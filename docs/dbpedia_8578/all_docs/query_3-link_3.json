{
    "id": "dbpedia_8578_3",
    "rank": 3,
    "data": {
        "url": "https://en.wikipedia.org/wiki/JTS_Topology_Suite",
        "read_more_link": "",
        "language": "en",
        "title": "JTS Topology Suite",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2006-06-15T23:23:30+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/JTS_Topology_Suite",
        "text": "JTS Topology SuiteOriginal author(s)Martin DavisStable release\n\n1.19.0[1] / 21 June 2022; 2 years ago ( )\n\nRepositoryWritten inJavaPlatformJava SETypeLibraryLicenseEclipse Public License v.1.0 (starting with 1.15), GNU Lesser General Public License (up to version 1.14)Websitelocationtech .github .io /jts /\n\nJTS Topology Suite (Java Topology Suite) is an open-source Java software library that provides an object model for Euclidean planar linear geometry together with a set of fundamental geometric functions. JTS is primarily intended to be used as a core component of vector-based geomatics software such as geographical information systems.[2] It can also be used as a general-purpose library providing algorithms in computational geometry.[3]\n\nJTS implements the geometry model and API defined in the OpenGIS Consortium Simple Features Specification for SQL. JTS defines a standards-compliant geometry system for building spatial applications; examples include viewers, spatial query processors, and tools for performing data validation, cleaning and integration.\n\nIn addition to the Java library, the foundations of JTS and selected functions are maintained in a C++ port, for use in C-style linking on all major operating systems, in the form of the GEOS software library.\n\nUp to JTS 1.14, and the GEOS port, are published under the GNU Lesser General Public License (LGPL).\n\nWith the LocationTech adoption future releases will be under the EPL/BSD licenses.\n\nJTS provides the following functionality:\n\nGeometry classes support modelling points, linestrings, polygons, and collections. Geometries are linear, in the sense that boundaries are implicitly defined by linear interpolation between vertices. Geometries are embedded in the 2-dimensional Euclidean plane. Geometry vertices may also carry a Z value.\n\nUser-defined precision models are supported for geometry coordinates. Computation is performed using algorithms which provide robust geometric computation under all precision models.\n\nTopological validity checking\n\nArea and Distance functions\n\nSpatial Predicates based on the Egenhofer DE-9IM model[4]\n\nOverlay functions (including intersection, difference, union, symmetric difference)\n\nBuffer computation (including different cap and join types)\n\nConvex hull\n\nGeometric simplification including the Douglas–Peucker algorithm\n\nGeometric densification\n\nLinear referencing\n\nPrecision reduction\n\nDelaunay triangulation and constrained Delaunay triangulation\n\nVoronoi diagram generation\n\nSmallest enclosing rectangle\n\nDiscrete Hausdorff distance\n\nRobust line segment intersection\n\nEfficient line arrangement intersection\n\nEfficient point in polygon\n\nSpatial index structures including quadtree and STR-tree\n\nPlanar graph structures and algorithms\n\nReading and writing of WKT, WKB and GML formats\n\nFunding for the initial work on JTS was obtained in the Fall 2000 from GeoConnections and the Government of British Columbia, based on a proposal put forward by Mark Sondheim and David Skea. The work was carried out by Martin Davis (software design and lead developer) and Jonathan Aquino (developer), both of Vivid Solutions at the time. Since then JTS has been maintained as an independent software project by Martin Davis.[5]\n\nSince late 2016/early 2017 JTS has been adopted by LocationTech.\n\nGeoServer\n\nGeoTools\n\nOpenJUMP and forks\n\nuDig\n\ngvSIG\n\nBatik\n\nGeoforge\n\nHibernate Spatial\n\nWhitebox Geospatial Analysis Tools\n\nODL Studio\n\njts-discretizer\n\norbis gis/h2gis\n\nGeophile\n\nJTS is developed under the Java JDK 1.4 platform. It is 100% pure Java. It will run on all more recent JDKs as well.[6]\n\nJTS has been ported to the .NET Framework as the Net Topology Suite.\n\nA JTS subset has been ported to C++, with entry points declared as C interfaces, as the GEOS library.\n\nGEOS is the C/C++ port of a subset of JTS and selected functions. It is a foundation component in a software ecosystem of native, compiled executable binaries on Linux, Mac and Windows platforms. Due to the runtime construction of Java and the Java Virtual Machine (JVM), code libraries that are written in Java are basically not usable as libraries from a standardized cross-linking environment (often built from C). Linux, Microsoft Windows and the BSD family, including Mac OSX, use a linking structure that enables libraries from various languages to be integrated (linked) into a native runtime executable. Java, by design, does not participate in this interoperability without unusual measures (JNI).\n\nGEOS links and ships internally in popular applications listed below; and, by delineating and implementing standards-based geometry classes available to GDAL, which in turn is a widely supported inner-engine in GIS, GEOS becomes a core geometry implementation in even more applications:\n\nGDAL - OGR - raster and vector data munging\n\nQGIS - Desktop cross-platform, open source GIS\n\nPostGIS - spatial types and operations for PostgreSQL\n\nGeoDjango – Django's support for GIS-enabled databases\n\nGoogle Earth – A virtual globe and world imaging program\n\nGRASS GIS Library and Application\n\nMapServer - an open source development environment for building spatially enabled internet applications\n\nWorld Wind Java – NASA's open source virtual globe and world imaging technology\n\nOrfeo toolbox – A satellite image processing library\n\nR – Open source statistical software with extensions for spatial data analysis.\n\nSAGA GIS[7] A cross-platform open source GIS software\n\nDE-9IM, a topological model\n\nGeospatial topology"
    }
}