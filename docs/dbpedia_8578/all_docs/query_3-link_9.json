{
    "id": "dbpedia_8578_3",
    "rank": 9,
    "data": {
        "url": "https://hub.packtpub.com/libraries-for-geospatial-analysis/",
        "read_more_link": "",
        "language": "en",
        "title": "Here's top 7 libraries for geospatial analysis",
        "top_image": "https://hub.packtpub.com/wp-content/uploads/2018/05/libraries.jpg",
        "meta_img": "https://hub.packtpub.com/wp-content/uploads/2018/05/libraries.jpg",
        "images": [
            "https://hub.packtpub.com/wp-content/uploads/2022/10/normal-logo.png",
            "https://hub.packtpub.com/wp-content/uploads/2022/10/normal-logo.png",
            "https://hub.packtpub.com/wp-content/uploads/2021/06/CS-iStock-479801072-218x150.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2021/01/1080x720-I8zvyt-218x150.jpeg",
            "https://hub.packtpub.com/wp-content/uploads/2020/12/1080x720-3EsvpS-218x150.jpeg",
            "https://hub.packtpub.com/wp-content/uploads/2020/12/1080x720-zIVPjc-218x150.jpeg",
            "https://hub.packtpub.com/wp-content/uploads/2020/12/1080x720-aG1Zka-218x150.jpeg",
            "https://hub.packtpub.com/wp-content/uploads/2021/08/MicrosoftTeams-image-11-218x150.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2021/06/Mammino-DZone-highlight-218x150.png",
            "https://hub.packtpub.com/wp-content/uploads/2018/06/trading-bots-218x150.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2018/03/iStock-621992502-218x150.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2018/08/iStock-877278574-218x150.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2018/05/avatar_user_233_1526981801-96x96.jpeg",
            "https://hub.packtpub.com/wp-content/uploads/2021/07/7-day-trial.png",
            "https://hub.packtpub.com/wp-content/uploads/2021/10/luca-bravo-XJXWbfSo2f0-unsplash-1-scaled-e1634215535552-324x160.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2021/08/MicrosoftTeams-image-11-100x70.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2020/10/AI-sEM9dE-100x70.jpeg",
            "https://hub.packtpub.com/wp-content/uploads/2021/08/transformers-iStock-157286819-324x160.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2021/05/Rothman-HUb-iStock-1127063562-100x70.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2021/04/iStock-1001817594-RL-Analytics-India-Mag-100x70.jpg",
            "https://hub.packtpub.com/wp-content/uploads/2022/10/normal-logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Aarthi Kumaraswamy"
        ],
        "publish_date": "2018-05-22T22:00:35+00:00",
        "summary": "",
        "meta_description": "The term geospatial refers to finding information that is located on the earth's surface. Geospatial data often associates some piece of information with a particular location. In this article, we will look at the major libraries used to process and analyze geospatial data.",
        "meta_lang": "en",
        "meta_favicon": "https://hub.packtpub.com/wp-content/uploads/2022/10/favicon.png",
        "meta_site_name": "Packt Hub",
        "canonical_link": "https://hub.packtpub.com/libraries-for-geospatial-analysis/",
        "text": "The term geospatial refers to finding information that is located on the earth’s surface. This can include, for example, the position of a cellphone tower, the shape of a road, or the outline of a country. Geospatial data often associates some piece of information with a particular location. Geospatial development is the process of writing computer programs that can access, manipulate, and display this type of information.\n\nInternally, geospatial data is represented as a series of coordinates, often in the form of latitude and longitude values. Additional attributes, such as temperature, soil type, height, or the name of a landmark, are also often present. There can be many thousands (or even millions) of data points for a single set of geospatial data.\n\nIn addition to the prosaic tasks of importing geospatial data from various external file formats and translating data from one projection to another, geospatial data can also be manipulated to solve various interesting problems. Obvious examples include the task of calculating the distance between two points, calculating the length of a road, or finding all data points within a given radius of a selected point. We use libraries to solve all of these problems and more.\n\nToday we will look at the major libraries used to process and analyze geospatial data.\n\nGDAL/OGR\n\nGEOS\n\nShapely\n\nFiona\n\nPython Shapefile Library (pyshp)\n\npyproj\n\nRasterio\n\nGeoPandas\n\nThis is an excerpt from the book, Mastering Geospatial Analysis with Python by Paul Crickard, Eric van Rees, and Silas Toms.\n\nGeospatial Data Abstraction Library (GDAL) and the OGR Simple Features Library\n\nThe Geospatial Data Abstraction Library (GDAL)/OGR Simple Features Library combines two separate libraries that are generally downloaded together as a GDAL. This means that installing the GDAL package also gives access to OGR functionality. The reason GDAL is covered first is that other packages were written after GDAL, so chronologically, it comes first. As you will notice, some of the packages covered in this post extend GDAL’s functionality or use it under the hood.\n\nGDAL was created in the 1990s by Frank Warmerdam and saw its first release in June 2000. Later, the development of GDAL was transferred to the Open Source Geospatial Foundation (OSGeo). Technically, GDAL is a little different than your average Python package as the GDAL package itself was written in C and C++, meaning that in order to be able to use it in Python, you need to compile GDAL and its associated Python bindings. However, using conda and Anaconda makes it relatively easy to get started quickly. Because it was written in C and C++, the online GDAL documentation is written in the C++ version of the libraries. For Python developers, this can be challenging, but many functions are documented and can be consulted with the built-in pydoc utility, or by using the help function within Python.\n\nBecause of its history, working with GDAL in Python also feels a lot like working in C++ rather than pure Python. For example, a naming convention in OGR is different than Python’s since you use uppercase for functions instead of lowercase. These differences explain the choice for some of the other Python libraries such as Rasterio and Shapely, which are also covered in this chapter, that has been written from a Python developer’s perspective but offer the same GDAL functionality.\n\nGDAL is a massive and widely used data library for raster data. It supports the reading and writing of many raster file formats, with the latest version counting up to 200 different file formats that are supported. Because of this, it is indispensable for geospatial data management and analysis. Used together with other Python libraries, GDAL enables some powerful remote sensing functionalities. It’s also an industry standard and is present in commercial and open source GIS software.\n\nThe OGR library is used to read and write vector-format geospatial data, supporting reading and writing data in many different formats. OGR uses a consistent model to be able to manage many different vector data formats. You can use OGR to do vector reprojection, vector data format conversion, vector attribute data filtering, and more.\n\nGDAL/OGR libraries are not only useful for Python programmers but are also used by many GIS vendors and open source projects. The latest GDAL version at the time of writing is 2.2.4, which was released in March 2018.\n\nGEOS\n\nThe Geometry Engine Open Source (GEOS) is the C/C++ port of a subset of the Java Topology Suite (JTS) and selected functions. GEOS aims to contain the complete functionality of JTS in C++. It can be compiled on many platforms, including Python. As you will see later on, the Shapely library uses functions from the GEOS library. In fact, there are many applications using GEOS, including PostGIS and QGIS. GeoDjango, also uses GEOS, as well as GDAL, among other geospatial libraries. GEOS can also be compiled with GDAL, giving OGR all of its capabilities.\n\nThe JTS is an open source geospatial computational geometry library written in Java. It provides various functionalities, including a geometry model, geometric functions, spatial structures and algorithms, and i/o capabilities. Using GEOS, you have access to the following capabilities—geospatial functions (such as within and contains), geospatial operations (union, intersection, and many more), spatial indexing, Open Geospatial Consortium (OGC) well-known text (WKT) and well-known binary (WKB) input/output, the C and C++ APIs, and thread safety.\n\nShapely\n\nShapely is a Python package for manipulation and analysis of planar features, using functions from the GEOS library (the engine of PostGIS) and a port of the JTS. Shapely is not concerned with data formats or coordinate systems but can be readily integrated with such packages. Shapely only deals with analyzing geometries and offers no capabilities for reading and writing geospatial files. It was developed by Sean Gillies, who was also the person behind Fiona and Rasterio.\n\nShapely supports eight fundamental geometry types that are implemented as a class in the shapely.geometry module—points, multipoints, linestrings, multilinestrings, linearrings, multipolygons, polygons, and geometrycollections. Apart from representing these geometries, Shapely can be used to manipulate and analyze geometries through a number of methods and attributes.\n\nShapely has mainly the same classes and functions as OGR while dealing with geometries. The difference between Shapely and OGR is that Shapely has a more Pythonic and very intuitive interface, is better optimized, and has a well-developed documentation. With Shapely, you’re writing pure Python, whereas with GEOS, you’re writing C++ in Python. For data munging, a term used for data management and analysis, you’re better off writing in pure Python rather than C++, which explains why these libraries were created.\n\nFor more information on Shapely, consult the documentation. This page also has detailed information on installing Shapely for different platforms and how to build Shapely from the source for compatibility with other modules that depend on GEOS. This refers to the fact that installing Shapely will require you to upgrade NumPy and GEOS if these are already installed.\n\nFiona\n\nFiona is the API of OGR. It can be used for reading and writing data formats. The main reason for using it instead of OGR is that it’s closer to Python than OGR as well as more dependable and less error-prone. It makes use of two markup languages, WKT and WKB, for representing spatial information with regards to vector data. As such, it can be combined well with other Python libraries such as Shapely, you would use Fiona for input and output, and Shapely for creating and manipulating geospatial data.\n\nWhile Fiona is Python compatible and our recommendation, users should also be aware of some of the disadvantages. It is more dependable than OGR because it uses Python objects for copying vector data instead of C pointers, which also means that they use more memory, which affects the performance.\n\nPython shapefile library (pyshp)\n\nThe Python shapefile library (pyshp) is a pure Python library and is used to read and write shapefiles. The pyshp library’s sole purpose is to work with shapefiles—it only uses the Python standard library. You cannot use it for geometric operations. If you’re only working with shapefiles, this one-file-only library is simpler than using GDAL.\n\npyproj\n\nThe pyproj is a Python package that performs cartographic transformations and geodetic computations. It is a Cython wrapper to provide Python interfaces to PROJ.4 functions, meaning you can access an existing library of C code in Python.\n\nPROJ.4 is a projection library that transforms data among many coordinate systems and is also available through GDAL and OGR. The reason that PROJ.4 is still popular and widely used is two-fold:\n\nFirstly, because it supports so many different coordinate systems\n\nSecondly, because of the routes it provides to do this—Rasterio and GeoPandas, two Python libraries covered next, both use pyproj and thus PROJ.4 functionality under the hood\n\nThe difference between using PROJ.4 separately instead of using it with a package such as GDAL is that it enables you to re-project individual points, and packages using PROJ.4 do not offer this functionality.\n\nThe pyproj package offers two classes—the Proj class and the Geod class. The Proj class performs cartographic computations, while the Geod class performs geodetic computations.\n\nRasterio\n\nRasterio is a GDAL and NumPy-based Python library for raster data, written with the Python developer in mind instead of C, using Python language types, protocols, and idioms. Rasterio aims to make GIS data more accessible to Python programmers and helps GIS analysts learn important Python standards. Rasterio relies on concepts of Python rather than GIS.\n\nRasterio is an open source project from the satellite team of Mapbox, a provider of custom online maps for websites and applications. The name of this library should be pronounced as raster-i-o rather than ras-te-rio. Rasterio came into being as a result of a project called the Mapbox Cloudless Atlas, which aimed to create a pretty-looking basemap from satellite imagery.\n\nOne of the software requirements was to use open source software and a high-level language with handy multi-dimensional array syntax. Although GDAL offers proven algorithms and drivers, developing with GDAL’s Python bindings feels a lot like C++.\n\nTherefore, Rasterio was designed to be a Python package at the top, with extension modules (using Cython) in the middle, and a GDAL shared library on the bottom. Other requirements for the raster library were being able to read and write NumPy ndarrays to and from data files, use Python types, protocols, and idioms instead of C or C++ to free programmers from having to code in two languages.\n\nFor georeferencing, Rasterio follows the lead of pyproj. There are a couple of capabilities added on top of reading and writing, one of them being a features module. Reprojection of geospatial data can be done with the rasterio.warp module.\n\nRasterio’s project homepage can be found on Github.\n\nGeoPandas\n\nGeoPandas is a Python library for working with vector data. It is based on the pandas library that is part of the SciPy stack. SciPy is a popular library for data inspection and analysis, but unfortunately, it cannot read spatial data. GeoPandas was created to fill this gap, taking pandas data objects as a starting point. The library also adds functionality from geographical Python packages.\n\nGeoPandas offers two data objects—a GeoSeries object that is based on a pandas Series object and a GeoDataFrame, based on a pandas DataFrame object, but adding a geometry column for each row. Both GeoSeries and GeoDataFrame objects can be used for spatial data processing, similar to spatial databases. Read and write functionality is provided for almost every vector data format. Also, because both Series and DataFrame objects are subclasses from pandas data objects, you can use the same properties to select or subset data, for example .loc or .iloc.\n\nGeoPandas is a library that employs the capabilities of newer tools, such as Jupyter Notebooks, pretty well, whereas GDAL enables you to interact with data records inside of vector and raster datasets through Python code. GeoPandas takes a more visual approach by loading all records into a GeoDataFrame so that you can see them all together on your screen. The same goes for plotting data. These functionalities were lacking in Python 2 as developers were dependent on IDEs without extensive data visualization capabilities which are now available with Jupyter Notebooks.\n\nWe’ve provided an overview of the most important open source packages for processing and analyzing geospatial data. The question then becomes when to use a certain package and why. GDAL, OGR, and GEOS are indispensable for geospatial processing and analyzing, but were not written in Python, and so they require Python binaries for Python developers. Fiona, Shapely, and pyproj were written to solve these problems, as well as the newer Rasterio library. For a more Pythonic approach, these newer packages are preferable to the older C++ packages with Python binaries (although they’re used under the hood).\n\nNow that you have an idea of what options are available for a certain use case and why one package is preferable over another, here’s something you should always remember. As is often the way in programming, there might be multiple solutions for one particular problem. For example, when dealing with shapefiles, you could use pyshp, GDAL, Shapely, or GeoPandas, depending on your preference and the problem at hand."
    }
}