{
    "id": "dbpedia_8578_0",
    "rank": 59,
    "data": {
        "url": "http://lin-ear-th-inking.blogspot.com/2021/05/fixing-invalid-geometry-with-jts.html",
        "read_more_link": "",
        "language": "en",
        "title": "Lin.ear th.inking: Fixing Invalid Geometry with JTS",
        "top_image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi01sDZyQLxaMR9t4DRCnitNta7_NP_XXIsId5XekJBsrmm0PpKvy1k32cK7shTKYwYmKspJ00c6AktWcCIIGBK-Q55OBqM17v8clKdNEB-XiPwnqtdYyzcGgdV83L027c1pid4SIIVUEM/w1200-h630-p-k-no-nu/valid-polygons.png",
        "meta_img": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi01sDZyQLxaMR9t4DRCnitNta7_NP_XXIsId5XekJBsrmm0PpKvy1k32cK7shTKYwYmKspJ00c6AktWcCIIGBK-Q55OBqM17v8clKdNEB-XiPwnqtdYyzcGgdV83L027c1pid4SIIVUEM/w1200-h630-p-k-no-nu/valid-polygons.png",
        "images": [
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi01sDZyQLxaMR9t4DRCnitNta7_NP_XXIsId5XekJBsrmm0PpKvy1k32cK7shTKYwYmKspJ00c6AktWcCIIGBK-Q55OBqM17v8clKdNEB-XiPwnqtdYyzcGgdV83L027c1pid4SIIVUEM/w400-h132/valid-polygons.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBn2OWlQbUnfdqcH8pvdGFLXU8r_jiG0vzzqUJhcMIFrr4ZAoyzMjUDDvG4rAilJr_iSwLqoaf1BdUimCm6wgawRVO2RkLaVtMERA4YtC8v-K_KVLm5f_9IIuux8041k9Ek67B32FAJZo/w400-h169/figure-8-buffer-0.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjhQMD4XO_xZ_E6tZjLOa7VxJ7zTZTE1_LALi2q1g2WH2THSo0yxCTvsdBCq2dfwr65G7z5SJhDq8S-AzhaMJfZQdOPjrRKvkNG6d-jogvn5F516xmQWNSCVW_rOFpvJeDIGdX3NuDNU7c/w400-h183/makeValid-complex-2.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLZOvxfQfcWGs6yhi2RQfvGHrbIUk3_cTdAHTiR5dDOWERt1b5lCo0Wa1WzUBekoU2abN1MnOCkiaYjKrauJWJrt7omHSgTr9YirUKyFbTJvVtJOPSU-Tz025l00AOEQSoUoxPk90NdQA/w400-h185/geomfixer-complex-2.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwp7xisN2MWXYBuDrTbQg0b-R69G66NbqooeG5SzTKMV13u7ahG3dtfVVQWIlrdc91Uj8mOvTRpU9G5Q6p9-kw49-h_AKkF4xtstkWN6MchlKvtNAKZISBlRFyjFGnL_DmEU8AlTPdMuw/w400-h185/geomfixer-figure-8.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEik6uZcxLWfCsUB3GlU7-bSbO7d7PBqYjvbt-ZSX81wV2XUiN8SL_c_cJ5Z0BFkCHGFc2UX1K0GgCKuH-HAP9wVZX1tlv8W40wWuIUipifISxn6dPkanYSzR43mJXRccHROU97T0sGvUY4/w400-h188/geomfixer-self-overlap.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3_miH5TVP1NMZM8hIeLDcVrgRB6qN4PG3lgzSvdSYy-7r4XlsUy0b7zstwameU7ToLEscwyTSx1EaacwvG0cqB4TOpr_pzKHZbbHYVzk0U-fOsijiRh74EdHGD3XNmMaHFBZbACTmLJM/w400-h386/geomfixer-TestBuilder.png",
            "https://resources.blogblog.com/img/icon18_edit_allbkg.gif",
            "http://www.blogger.com/img/blogger_logo_round_35.png",
            "https://resources.blogblog.com/img/icon_delete13.gif",
            "http://www.blogger.com/img/blogger_logo_round_35.png",
            "https://resources.blogblog.com/img/icon_delete13.gif",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWp2Q_-RyV0nv5mthgxzsoogVrLcr3X74exGMOxopNrPzJ4VPliS-IN0J3Ad8QNeB6veXmiVW7yRFRefUeM0YXXsa7W2F7BP-Z42NGP8R-9RGOn7ab2ltWb7gs8bpGot4Klifg1DOdu1U/s1600/martin_davis_small.jpg",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhSmFeaYPuQLXCc98HVc_NxM0EVZnHsmZm_XMqjnXrVojopYJHuaR29nJO83f_hPNEZlhFI86XRTaWvjBUDO0DDHX1uNQ2sv6LSuYnyiPXi0-NqFP4K8WQ5MH1vPWmL4WT1pBIT5smlZmk/w72-h72-p-k-no-nu/cascadedUnion.png",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_tnGYjVn7RmhdIP-IRFlqd0zYs6mU3pvm4pFvD9W9JHN8UQGyutnL__MkH0YfxqtqkWhcuseY9zTvPbtt8WtbUEioGl3khpjsoiyV1afvmlSRaHJTnxkxw9dkr9iQYTbfm61Q=w72-h72-p-k-no-nu",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhcP5TOZySOotC15jt5E7yG4ZJrxEQK14lgNqPF9DcqYgnLnxFHydTkHO9RoIzitO0ftsCYMtYGq_Rc4otQFzb-cD-_E7L-gNPhAXRqd9qhVD2hOQHxsSfQ0Q66nK7JbMIrRYkRNLGWAYw/w72-h72-p-k-no-nu/bigpoly_noimprove.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMMXmeVsTTInsYKjWalulH-n97pp4_9xhf7OeRfX8Fe94v85qluxTTYuWL0RRwwuH4wm93x929W9Sh2snLy_xnGavzapfP3wFgFmtIyS6V7DO4wUF2IOicwGOmUOEhxjAWSL0gSTCNIWo/w72-h72-p-k-no-nu/GTFS_data_model_diagram.PNG",
            "https://blogger.googleusercontent.com/img/a/AVvXsEhTsfTJAsSKAscvZpIr8bVlodUAyTswzjzdCpat2TswDnV6AYdkYDly3T934T8SHlfaBowVpNwlgyY2jMNCMwc_FTiNrJQFvH2JnXWBClRDeuLqYwb4zZKpCrNugxVQBAwK_E2Q27jLtVOn1O9asYOYja8feDScJVC8nv8vzcJkhQlNsSkD7jYQ0Kg3=w72-h72-p-k-no-nu",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhu5W1Qcc-r3e4KCczmkHv6hIDp3ppYKx50dgFKmjq7pP_DYpePFtUB7IVGhJZS_XsPSrAwNF2m8JjpvpvDJmnk3x-vvFYGwosExDD7xCv7WIVvxBDsisziKJePCkBVcFoHiFKSoQNKUNY/w72-h72-p-k-no-nu/gdos-pinch.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiS5c8lcxsTJld5MG692-JtaTChUkfbaHnncI0WMUgnhuKtjCIXt50wDlb86TZ6dCAJFFBsaSFe66laHUfBrGC_FRDxwfmanKnPvxTERfbxajbmqvIk2u7xwXTmckSCMe7jKOKPTP1y7TU/w72-h72-p-k-no-nu/interiorpoint-ebc-va.png",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_v8sJm0QGBEeljri27v6_zjvJ30Sv6pZEIskOakohppsYjKmo3IWalUShemAIEAZeNa6Hui3cuhWXoqDkh7nqfVipxnKsXd=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_vEIhI--j78yW6bl4Rin3h85p3jZX0woKB3fWcuhU8WtTON2nENJrAd4wjO4BHKIw5tiQfU1YU6p4tOOOlwaNo7aoAaDCJV4xRwclMQbvbxtWG3=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_uM5kHgRIlyDXGL3sOJcGUJ3Wcg5VL0FfycnuHOXWJsOg2sCG8SdGNacqm5F6nE9547FJx3yznmRTYTt5FZWTpMT6uwAucWXvXsZaIN-xuLkQ=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_snWTdaukjOptEw7BhZSUcIxXz06o5i3C7jfHsjt-2LmXmNKWlCwfCVm4BfiVLfA-kpWYRb6P2PLFZjNCntRaoawtUmv-zOfZ6hac8EiVMLPwvyzA=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_snWTdaukjOptEw7BhZSUcIxXz06o5i3C7jfHsjt-2LmXmNKWlCwfCVm4BfiVLfA-kpWYRb6P2PLFZjNCntRaoawtUmv-zOfZ6hac8EiVMLPwvyzA=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_t1yrH-TGu086qowswxMcuJKt_b7uedPrcptF9OLKrTmY8RWsu7ZKK3qFQjEDkFl92OZo1z578bF2yUuDj4TQruXIC2XLxlxa5Ar3I=s16-w16-h16"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dr JTS",
            "View my complete profile"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "TLDR: JTS can now fix invalid geometry! The JTS Topology Suite  implements the Geometry model defined in the OGC Simple Features specificati...",
        "meta_lang": "",
        "meta_favicon": "http://lin-ear-th-inking.blogspot.com/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "http://lin-ear-th-inking.blogspot.com/2021/05/fixing-invalid-geometry-with-jts.html",
        "text": "TLDR: JTS can now fix invalid geometry!\n\nThe JTS Topology Suite implements the Geometry model defined in the OGC Simple Features specification. An important part of the specification is the definition of what constitutes valid geometry. These are defined by rules about the structural and geometric characteristics of geometry objects. Some validity rules apply to all geometry; e.g. vertices must be defined by coordinates with finite numeric values (so that NaN and Inf ordinates are not valid). In addition, each geometric subtype (Point, LineString, LinearRing, Polygon, and Multi-geometry collections) has its own specific rules for validity.\n\nThe rules for Polygons and MultiPolygons are by far the most restrictive. They include the following constraints:\n\nPolygons rings must not self-intersect\n\nRings may touch at only a finite number of points, and must not cross\n\nA Polygon interior must be connected (i.e. holes must not split a polygon into two parts)\n\nMultiPolygon elements may touch at only a finite number of points, and must not overlap\n\nThese rules guarantee that:\n\na given area is represented unambiguously by a polygonal geometry\n\nalgorithms operating on polygonal geometry can make assumptions which provide simpler implementation and more efficient processing\n\nValid polygonal geometry is well-behaved\n\nGiven the highly-constrained definition of polygonal validity, it is not uncommon that real-world datasets contain polygons which do not satisfy all the rules, and hence are invalid. This occurs for various reasons:\n\nData is captured using tools which do not check validity, or which use a looser or different definition than the OGC standard\n\nData is imported from systems with different polygonal models\n\nData is erroneous or inaccurate\n\nBecause of this, JTS does not enforce validity on geometry creation, apart from a few simple structural constraints (such as rings having identical first and last points). This allows invalid geometry to be represented as JTS geometry objects, and processed using JTS code. Some kinds of spatial algorithms can execute correctly on invalid geometry (e.g. determining the convex hull). But most algorithms require valid input in order to ensure correct results (e.g. the spatial predicates) or to avoid throwing exceptions (e.g. overlay operations). So the main reason for representing invalid geometry is to allow validity to be tested, to take appropriate action on failure.\n\nBut this has a been a conspicuous gap in the JTS API. While it is possible to test for validity, there has never been a way to fix an invalid geometry. To be fair, JTS has always had an unofficial way to make polygonal geometry valid. This is the well-known trick of computing geometry.buffer(0), which creates a valid output which often is a good match to the input. This has worked as a stop-gap for years (in spite of an issue which caused some problems, now fixed - see the post Fixing Buffer for fixing Polygons). However, using buffer(0) on self-intersecting \"figure-8\" polygons produces a \"lossy\" result. Specifically, it retains only the largest lobes of the input linework. This is undesirable for some uses (although it is advantageous in other situations, such as trimming off small self-intersections after polygon simplification).\n\nBuffer(0) of Figure-8 is lossy\n\nSo, it's about time that JTS stepped up to provide a supported, guaranteed way of fixing invalid geometry. This should handle all geometry, although polygonal geometry repair is the most critical requirement.\n\nThis raises the question of what exactly the semantics of repairing polygons should be. While validity is well-specified, there are no limits to the complexity of invalid polygons, and a variety of possible approaches to fixing them. The most significant decision is how to determine the interior and exterior of a polygonal geometry with self-intersections or overlaps. (This is the classic \"bow-tie\" or \"figure-8\" - although self-intersecting polygons can be far more complex.) The question comes down to whether the geometry linework or structure is used to determine interior areas.\n\nIf linework is used to create validity, to node the constituent linework to form a topologically-valid coverage. This coverage is then scanned with an alternating even-odd strategy to assign areas as interior or exterior. This may result in adjacent interior or exterior areas, in which case these are merged.\n\nAlternatively, the structure of the polygonal geometry can be taken as determinative. The shell and hole rings are assumed to accurately specify the nature of the area they enclose (interior or exterior). Likewise, the (potentially overlapping or adjacent) elements of a MultiPolygon are assumed to enclose interior area. The repair operation processes each ring and polygon separately. Holes are subtracted from shells. Finally, if required the repaired polygons are unioned to form the valid result.\n\nPostGIS MakeValid and the ESRI Java Geometry API makeSimple both use the linework approach. However, for some relatively simple invalid geometries this produces results which seem overly complex.\n\nComplex output from ST_MakeValid\n\nHere's some examples of how GeometryFixer works. First, the example above, showing the (arguably) simpler result that arises from using the structure information:\n\nFigure-8s are handled as desired (keeping all area):\n\nSelf-overlapping shells have all interior area preserved:\n\nOf course, the GeometryFixer also handles simple fixes for all geometry types, such as removing invalid coordinates.\n\nOne further design decision is how to handle geometries which are invalid due to collapse (e.g. a line with a single point, or a ring which has only two unique vertices). GeometryFixer provides an option to either remove collapses, or to return them as equivalent lower dimensional geometry.\n\nIt's been a long time coming, but finally JTS can function as a full-service repair shop for geometry, no matter how mangled it might be."
    }
}