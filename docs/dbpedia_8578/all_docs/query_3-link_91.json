{
    "id": "dbpedia_8578_3",
    "rank": 91,
    "data": {
        "url": "http://www.yolinux.com/TUTORIALS/LinuxTutorialJava.html",
        "read_more_link": "",
        "language": "en",
        "title": "Linux Tutorial: Java on Linux",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://www.yolinux.com/TUTORIALS/images/YoLinux_logo.png",
            "http://www.yolinux.com/TUTORIALS/images/tux-Java-t2.gif",
            "http://www.yolinux.com/TUTORIALS/images/TradePubMagazines.gif",
            "http://www.yolinux.com/TUTORIALS/images/JavaIDE-Eclipse_Thumb.gif",
            "http://www.yolinux.com/TUTORIALS/images/JBuilder9-screenshot-small.gif",
            "http://www.yolinux.com/TUTORIALS/images/tux-DB-t2_w120.gif",
            "http://www.yolinux.com/TUTORIALS/images/book40.gif",
            "http://www.yolinux.com/BOOKS/0132354764.Vol1.jpg",
            "http://www.yolinux.com/TUTORIALS/images/Amazon-BuyABook88x31.gif",
            "http://www.yolinux.com/BOOKS/0132354799.Vol2.jpg",
            "http://www.yolinux.com/TUTORIALS/images/Amazon-BuyABook88x31.gif",
            "http://www.yolinux.com/BOOKS/0131738860.jpg",
            "http://www.yolinux.com/TUTORIALS/images/Amazon-BuyABook88x31.gif",
            "http://www.yolinux.com/BOOKS/0764547879.01.MZZZZZZZ.jpg",
            "http://www.yolinux.com/TUTORIALS/images/Amazon-BuyABook88x31.gif",
            "http://s7.addthis.com/static/btn/lg-bookmark-en.gif",
            "http://s7.addthis.com/static/btn/lg-bookmark-en.gif",
            "http://pixel.quantserve.com/pixel/p-ebIBcaVUngFBQ.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Linux",
            "Java",
            "linux and java",
            "linux java",
            "Java on Linux tutorials"
        ],
        "tags": null,
        "authors": [
            "Greg Ippolito"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "An in depth look at Java development tools and JSP supported by Linux.  Linux Information Portal includes informative tutorials and links to many Linux sites.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "http://www.yolinux.com/TUTORIALS/LinuxTutorialJava.html",
        "text": "Installing the Java Software Developers Kit (SDK/JDK):\n\nJava programmers have two popular choices for a Java Development Kit (JDK), also generically known as a Software Development Kit (SDK):\n\n# Open JDK (the default, usually installed using Linux package managers)\n\n# Oracle's JDK\n\nThe primary difference being that the Oracle JDK includes some licensed enterprise monitoring tools. The core Oracle JDK compiler, JVM and essential tools are provided by and in common with the Open JDK.\n\nInstalling the Open JDK:\n\nJDK Package Installation:\n\nRed Hat/Fedora/CentOS:\n\nyum install java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64 java-1.8.0-openjdk-javadoc\n\nServer only, no GUI: yum install java-1.8.0-openjdk-headless.x86_64\n\nyum install java-1.7.0-openjdk.x86_64 java-1.7.0-openjdk-devel.x86_64 java-1.7.0-openjdk-javadoc\n\nServer only, no GUI: yum install java-1.7.0-openjdk-headless.x86_64\n\nyum install java-1.6.0-openjdk.x86_64 java-1.6.0-openjdk-devel.x86_64 java-1.6.0-openjdk-javadoc\n\nyum install alternatives (need this to select the default if installing more than one version of java)\n\nNote: use the suffix \"x86_64\" requests the 64 bit version of Java on a 64 bit Linux OS or \"i686\" for the 32 bit version on either the 32 bit or 64 bit version of the Linux OS.\n\nJAVA_HOME can be set to /usr/lib/jvm/java-1.x.0-openjdk-1.x.0.0/ or /usr/lib/jvm/java-1.x.0-openjdk-1.x.0.0.x86_64/ for the 32 bit and 64 bit JDKs respectively.\n\nPATH can be set: export PATH=$PATH:/usr/lib/jvm/java-1.x.0-openjdk-1.x.0.0/bin/ or export PATH=$PATH:/usr/lib/jvm/java-1.x.0-openjdk-1.x.0.0.x86_64/bin/ for the 32 bit and 64 bit JDKs respectively.\n\nUbuntu/Debian:\n\n64 bit: apt-get install openjdk-7-jdk openjdk-7-jre-headless\n\n32 bit: apt-get install openjdk-7-jdk:i386 openjdk-7-jre-headless:i386\n\nTest your installation with the command: java -version.\n\nTo change the default when multiple versions have been installed: sudo alternatives --config java\n\nand select the version you which to be the default. The various versions are designed to cohabitate on a single system.\n\nInstalling the Oracle JDK:\n\nOracle has various bundled Java packages available for download: Java Standard Edition (SE), Java Runtime Environment (JRE), Software Development Kit (SDK), EE (Enterprise Edition), JavaFX, Netbeans (IDE) or just the bundle: Java SE and JDK development kit, used in this example. Note that the Java Runtime Environment (JRE) by itself is not for software development but only a JVM to run Java applications.\n\nDownload Java \"Standard Edition\" (SE) Software Developers Kit (SDK).\n\nThe Java \"Enterprise Edition\" with Glassfish application server is also available for Java web services development.\n\nThe installation of multiple versions of Java on different machines will require a \".bashrc\" file which can locate the appropriate CLASSPATH.\n\nExample file: $HOME/.bashrc\n\n.. ... # # Java # if [ -d /opt/java/latest ] then PATH=/opt/java/latest/bin:$PATH export JAVA_HOME=/opt/java/latest export CLASSPATH=/opt/java/latest/lib/tools.jar:./ elif [ -d /opt/java/jdk1.6.0_01 ] then PATH=/opt/java/jdk1.6.0_01/bin:$PATH export JAVA_HOME=/opt/java/jdk1.6.0_01 export CLASSPATH=/opt/java/jdk1.6.0_01/lib/tools.jar:./ elif [ -d /usr/java/jdk1.6.0 ] then PATH=/usr/java/jdk1.6.0/bin:$PATH export JAVA_HOME=/usr/java/jdk1.6.0 export CLASSPATH=/usr/java/jdk1.6.0/lib/tools.jar:./ elif [ -d /usr/lib/jvm/jre-1.4.2-sun/bin ] then PATH=/usr/lib/jvm/jre-1.4.2-sun/bin:$PATH export JAVA_HOME=/usr/lib/jvm/jre-1.4.2-sun export CLASSPATH=/usr/lib/jvm/jre-1.4.2-sun/lib/tools.jar:/usr/lib/jvm/jre-1.4.2-sun/lib/rt.jar:./ fi ... ..\n\nWhere the following soft link is typical: ln -s /opt/java/jdk1.6.0_01 /opt/java/latest\n\nMust include \"./\" in CLASSPATH. This is necessary in 1.4.x and later.\n\nNote that admins often likes to preserve a common path between systems and the path /opt/java/latest or /usr/java/latest is chosen as a default for all systems. It is then often common to generate soft links to wherever the JDK resides. Eg when using the RHEL OpenJDK:\n\nln -s /usr/lib/jvm/java-1.7.0-openjdk.x86_64/jre /opt/java/latest\n\nJava SDK 1.6:\n\nThere is a choice of running 32 bit Java on a 32 bit or 64 bit Linux platform or running 64 bit Java on a 64 Linux bit platform.\n\nThere are three options offered for the download:\n\ncompressed tar file: jdk-7u4-linux-x64.tar.gz\n\nInstall:\n\ncd /opt/java\n\ntar xzf ~/Downloads/jdk-7u4-linux-x64.tar.gz\n\nThis creates: /opt/java/jdk1.7.0_04/...\n\nself extracting binary RPM jdk-6u17-linux-x64-rpm.bin\n\nInstall:\n\nAllow permissions to execute the binary package: chmod +x jdk-6u17-linux-x64-rpm.bin\n\nExecute the binary package: ./jdk-6u17-linux-x64-rpm.bin\n\nCreates RPMs:\n\njdk-6u17-linux-amd64.rpm\n\nsun-javadb-common-10.4.2-1.1.i386.rpm\n\nsun-javadb-core-10.4.2-1.1.i386.rpm\n\nsun-javadb-client-10.4.2-1.1.i386.rpm\n\nsun-javadb-demo-10.4.2-1.1.i386.rpm\n\nsun-javadb-docs-10.4.2-1.1.i386.rpm\n\nsun-javadb-javadoc-10.4.2-1.1.i386.rpm\n\nInstalls RPMs to:\n\n/usr/java/jdk1.6.0_17\n\n/etc/.java/.systemPrefs\n\n/etc/init.d/jexec\n\nDerby Database support installs to: /opt/sun/javadb/\n\nNote: all of the sun-javadb RPMs are related to Derby, the all Java database.\n\nself extracting binary bundle jdk-6u17-linux-x64.bin\n\nThis unpacks to a local directory ./jdk1.6.0_17/\n\nDo this in directory /usr/java to get a similar installation to the RPM result /usr/java/jdk1.6.0_17\n\n64 bit Workstation Tip: This option of installing the bundle to a directory of your choice is my preferred installation method for 64 bit Linux workstations as it allows me to install both a 32 bit version and a 64 bit version of Java. On 64 bit Linux Workstations it is typical to use a 32 bit browser which is compatible with the 32 bit Adobe Flash plug-in. Also, only the 32 bit version of Java offers a browser plug-in for applet support.\n\nInstall to:\n\n64 bit Java: /usr/java/64/... (or /opt/java/64/...)\n\n32 bit Java: /usr/java/... (or /opt/java/...)\n\nOn 64-bit Linux platforms the 32-bit JDK and 64-bit JDK cannot co-exist when installed from the RPM bundles. One must install one or the other but not both RPMs. You can install as many versions of the \".bin\" bundle into distinct directories.\n\nInstall:\n\nchmod +x jdk-6uxx-linux-xxxx-rpm.bin ./jdk-6uxx-linux-xxxx-rpm.bin ... This is where you agree to their license. Press the space bar to scroll down in \"More\". Do you agree the the above license terms? [yes or no] yes ...\n\nHit the space bar to scroll through the agreement or press the letter \"q\" to skip ahead.\n\nTest program: HelloWorld.java\n\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello world\"); } }\n\nCompile: javac HelloWorld.java\n\n(or /usr/java/latest/bin/javac HelloWorld.java)\n\nNote that the file name and the class name are the same. This became a requirement back in SDK 1.4. The result of the compile is the file: Test.class\n\nRun:\n\n[prompt]$ java HelloWorld\n\nHello world\n\n(or /usr/java/latest/bin/java HelloWorld)\n\n[Potential Pitfall]: Red Hat Enterprise Linux and other Linux systems which install GNU Java may find that this conflicts with the Sun Java installation. You may have to remove this (for example RHEL4):\n\nrpm -e java-1.4.2-gcj-compat-1.4.2.0-27jpp java-1.4.2-gcj-compat-devel-1.4.2.0-27jpp.noarch\n\nThe newer RHEL5 uses OpenJDK and is a valid Java distribution based on Java 1.6.0.\n\nInstall: yum install java\n\nThe Java SDK includes the following commands:\n\njavac: Linux Java compiler (i.e. javac program-name.java)\n\njava: Byte code interpreter / Java program launcher. (i.e. java program-name Do not include \".class\" extension.)\n\nTest version: java -version\n\nappletviewer: Views Java applet embedded in html file. (appletviewer myfile.html)\n\njavaws: Java Web Start application manager. Java application handler for browser.\n\n(Also see YoLinux Mozilla configuration tutorial)\n\njavadoc: Generate API documentation from tagged comments.\n\njavah: Creates C header and stub files for Java class.\n\njavap: Java file disassembler\n\njdb: Java debugger\n\njar: JAR archive file generation tool.\n\nJDK Tools and Utilities: Full list of tools and information.\n\nANT Built Tool:\n\nWhile files may be compiled using the command \"javac\", applications can quickly become too large and unwieldy for individual command line operations. Apache ANT is a Java build tool to compile and generate Java applications.\n\nFile: build.xml (example to build the previous HelloWorld example)\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <project name=\"HelloWorld\" default=\"run\" basedir=\".\"> <description>Builds and runs the application HelloWorld.</description> <property name=\"home\" value=\".\" /> <path id=\"classpath\"> <pathelement location=\"./\" /> </path> <target name=\"compile\" description=\"Compile Java source files\"> <javac destdir=\".\" debug=\"on\" includeAntRuntime=\"false\"> <src path=\".\" /> <classpath refid=\"classpath\" /> </javac> </target> <target name=\"run\" depends=\"compile\" description=\"Run the application\"> <java classname=\"HelloWorld\" fork=\"true\"> <classpath refid=\"classpath\" /> </java> </target> </project>\n\nRun:\n\n[prompt]$ ant\n\nHello world\n\nOptionally one may generate a JAR (Java Archive) file as a methodology for releasing an application.\n\nFile: build.xml (example to build a JAR file for the previous HelloWorld example)\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <project name=\"HelloWorld\" default=\"run\" basedir=\".\"> <description>Builds a jar file and runs it.</description> <property name=\"home\" value=\".\" /> <property name=\"build.dir\" value=\"classes\" /> <path id=\"classpath\"> <pathelement location=\"${build.dir}\" /> </path> <target name=\"compile\" description=\"Compile Java source files\"> <mkdir dir=\"${build.dir}\"> <javac destdir=\"${build.dir}\" debug=\"on\" includeAntRuntime=\"false\"> <src path=\".\" /> <classpath refid=\"classpath\" /> </javac> </target> <target name=\"jar\" depends=\"compile\" description=\"Generate the JAR file\"> <jar jarfile=\"hello-world.jar\"> <manifest> <attribute name=\"Main-Class\" value=\"HelloWorld\" /> <attribute name=\"Class-Path\" value=\"classpath\" /> </manifest> <fileset dir=\"${build.dir}\" includes=\"**/*.classes\" /> </jar> </target> <target name=\"run\" depends=\"jar\" description=\"Run the application\"> <java classname=\"HelloWorld\" fork=\"true\"> <classpath refid=\"classpath\" /> </java> </target> </project>\n\nRun:\n\n[prompt]$ ant\n\nHello world\n\nJava IDE Installations:\n\n# Eclipse\n\n# Oracle/Sun NetBeans\n\n# Borland JBuilder\n\n# IntelliJ\n\nInstalling Eclipse on Linux:\n\nEdit and debug Java IDE tool with plug-ins\n\nEclipse.org\n\nEclipsePluginCentral.com\n\nMaven build integration plug-in\n\nSubversion CM integration plug-in\n\nWSDL generator plugin for Apache AXIS\n\nTo install, just un-tar the package to the area desired: tar -xzf eclipse-j2ee-europa-linux-gtk-x86_64.tar.gz\n\nTypical installation is to /opt/\n\nOracle/Sun NetBeans on Linux:\n\nNetBeans IDE download - IDE for Java, Ruby, C++, PHP, GlassFish, Tomcat\n\nNetBeans 5.0+ includes the Java Swing GUI builder Swing GUI builder (formerly Matisse) (Netbeans Gui building tutorial)\n\nInstalling Borland JBuilder 9 Enterprise on Linux:\n\nUML design, edit, test Java IDE tool\n\nLoad JBuilder9 Enterprise CD 1\n\nNote the /etc/fstab cdrom statement used below. This may have been altered when using CrossOver PC software installer as it may add \"user,unhide,\" to the list of options and prohibit a JBuilder installation.:\n\n/dev/cdrom /mnt/cdrom iso9660 noauto,owner,kudzu,ro 0 0\n\n[Potential Pitfall]: If the install script does not execute, it could be because of the way the CD was mounted.\n\nCD should automount. If not mount.\n\ncd /mnt/cdrom\n\nExecute the install script on the CD: ./install_linux\n\nSelect \"Borland JBuilder 9 Enterprise\" and select all components\n\nAgree to license\n\nSelect \"Full Install\"\n\nSet install path to /opt/JBuilder9\n\n(no spaces allowed)\n\nSelect \"Install\" button.\n\nSelect \"Done\" button.\n\nTerminate installer program. Select \"X\" in window corner.\n\nIf using a FlexLM License, place license file in the following directory: /opt/JBuilder9/defaults/license.dat\n\nFlexLM License server info\n\nFour desktop icons created:\n\nJBuilder: Start JBuilder 9\n\nLicensing Information: Obtain a trial license or register your single user license.\n\nJDataStore Explorer\n\nJDataStoreServer\n\nNote: To un-install run: /opt/JBuilder9/UninstallEnterprise/UninstallEnterprise\n\nDesktop icon launcher:\n\nName: JBuilder9\n\nCommand: /opt/JBuilder9/bin/jbuilder\n\nIcon: /opt/JBuilder9/bin/jbuilder_icon.xpm\n\nComplete IDE for building applications, JSP/Servlets, JavaBeans[tm], Enterprise JavaBeans and distributed J2EE applications. Comes with AppServer and Visi-Broker (Visigenics CORBA broker). Supports UML, SOAP, UDDI, WSDL. (Linux, Solaris, Mac OS X and MS/Windows) Oracle also sells a version of JBuilder under the Oracle brand name.\n\nBorland OptimizeitSuite Installation:\n\nOptimizeit Suite, Profiler, Thread Debugger and Code Coverage\n\nLoad JBuilder9 Enterprise CD 2\n\nCD should automount. If not mount.\n\ncd /opt\n\ntar -xvzf /mnt/cdrom/linux/suite.tgz\n\nThis creates /opt/OptimizeitSuite55/...\n\nAdd FlexLM License: /opt/OptimizeitSuite55/lib/license.dat\n\nTools:\n\n/opt/OptimizeitSuite55/CCoverage\n\n/opt/OptimizeitSuite55/OptimizeIt\n\n/opt/OptimizeitSuite55/ProgressTracker\n\n/opt/OptimizeitSuite55/ThreadD\n\nJetBrains: IntelliJ:\n\nIntelliJ-Idea\n\nIDE: Commercial and Open Source. Various components are available as GPL'd software.\n\nOther Java IDEs:\n\nBEA: Weblogic Workshop (Eclipse based) Full web services and Java development IDE.\n\nOracle JDeveloper - Full IDE for Java and web services (WSDL, SOAP, ...) development.\n\nFreescale: CodeWarrior - Java and GNU C++ development\n\nJDEE - Java Development Environment for Emacs\n\nVisual-Paradigm - UML Tool Builder which interfaces with most of the other IDE's listed above.\n\nAlso see the YoLinux.com list of Linux text editors.\n\nJava Profiling Tools:\n\nProfiling code is the process of running instrumented code so that one can report on the behavior of the executing software with the intent of improving the performance of execution. Profiling tools will reveal what methods are being executed, how much time is spent executing the methods, what and how many objects have been invoked, how much memory they are using and other details of the execution behavior of the code.\n\nTools which come with the JDK:\n\njava: The JVM has a built-in profiler which is activated with the command line argument \"java -prof\". This will generate a \"java.prof\" file in the runtime directory. Other tools can then be used to make sense of the data.\n\njmap: Show memory use. First list processes with jps to find the PID of the process you want to query. Show object count for running process: jmap -histo:live 4172\n\nShow heap: jmap -heap 4172\n\nHelp: jmap -h\n\njconsole:\n\nFor Java 6: Start app, find the pid with the command: jps\n\nand then issue the command: jconsole process-id\n\nFor Java 5 it requires use of JMX and thus it must be compiled in: java –Dcom.sun.management.jmxremote myprogram\n\nRun JConsole: jconsole process-id\n\njvisualvm: GUI and self explanatory. Allows you to select the running java process to monitor. Various tabs are available for related output.\n\nMany of these tools require the use of jps to identify the system process id of the Java process. List Java processes: jps -vl\n\nList command options: jps -h Open Source Profiling Tools:\n\nbtrace: Compiled into your class files with the BTrace compiler: btracec to instrument your code. Text output only. Documentation\n\neurekaj: Accepts and visualizes btrace output via a broker (EurekaJ proxy) which then sends results via JSON to the EurekaJ Manager.\n\nCommercial Profiling Tools:\n\nJProfiler: GUI. JEE, database and thread profiling.\n\nJava Virtual Machines and Tools:\n\nJVM/JDK: Java Virtual Machines (JVM) and Software Development Kits (SDK)\n\nOracle's Java - Java Linux SDK (32 and 64 bit).\n\nHotSpot virtual machine - Oracle's ubiquitous JVM (for Linux). Included with JDK.\n\nJikes - Open Source Project\n\nIBM Linux JDK\n\nExcelsior JET: Java SE (Standard Edition) - J2SE 1.4.0 JVM for Linux and Windows on Intel-32. Ahead of time compilation and caching JIT.\n\nSableVM - JVM. Clean-room implementation. LGPL\n\nKaffe.org: Kaffe is a GPL clean room implementation of the Java virtual machine\n\nOracle/BEA: JRockit\n\nEmbedded:\n\nKada Systems - Their virtual machine is for PALM and wireless portable devices but their development environment is on Linux (1st Q 2002)\n\nAonix Inc.: PERC - JVM for embedded Linux applications. Support for JBuilder.\n\nAplix Corp: JBlend - Embedded mobile phone JVM. Popular.\n\nOracle: JRockitVM performance virtual machine\n\nLanguage Extensions:\n\nApache AspectJ - seamless aspect-oriented programming (AOP) extension to the Java\n\nJava Build Tools:\n\nApache.org: ANT - Java-based build tool (like Make)\n\nSee example ANT build file\n\nApache.org: Centipede - Project build system based on ANT\n\nApache.org: Maven - manage a project's build, reporting and documentation. Based on POM (Project Object Model)\n\nJava Tools:\n\nQuest: JProbe - Profiler, Debugger, Threadalyzer. Supports Blackdown, Oracle, IBM JDK's\n\nQuest: JClass - Java components (Tables, charts, graphics, database front-ends, text fields) Supports Borland, IBM Visual Age, SUN IDE's and Netscape/Explorer browsers\n\nMicro Focus: DevPartner - Distributed application, memory, performance, code coverage and thread deadlock detection and analysis. Also supports Oracle PL/SQL and Java stored procedure applications.\n\nCodeMesh - A make Java and C++ work together product.\n\nSeaGullSoftware.com: LegaSuite - J2EE based, XML driven process execution and Workflow Automation framework which can be deployed on a multitude of J2EE servers.\n\nJava Installers:\n\ncminstall - cross platform installers based on Java.\n\nOpenInstaller - framework for building cross platform installers.\n\nBitRock: Install Builder - generate an installer for any platform (MS/Windows, Linux, Unix, Mac, ...). RPM integration. Supports Java applications as well as support for many other languages.\n\nInstall4j - multi-platform Java installer.\n\nFlexera: InstallAnywhere - Multi-platform Java software installation tool for software distribution. Includes JVM installation if necessary.\n\nJava Source Code Review Tools:\n\nFindBugs finds errors not found by compiler syntax checking (list of bugs) See the YoLinux Jenkins - FindBugs integration and configuration tutorial\n\nPMD - Java, C++, Ruby, ...\n\nCheckstyle - adheres to a coding standards\n\nThreadSafe - automatic and precise thread safety checker for Java classes\n\nJava Test Tools:\n\nJUnit - Software development unit testing tool. See the YoLinux Java JUnit tutorial\n\nApache.org: Gump - Continuous build and integration tool for Java. Interfaces with CVS or Subversion. Supports Ant and Maven. Will show which check-in breaks the build.\n\nAbbot - Java JUnit extension to support GUI test framework. Uses an AWT robot class to test code. (Review: Java Developer Journal Apr. 2003)\n\nPounder.sourceforge.net - Utility for automating Java GUI tests\n\nTest Coverage Tools:\n\nTest coverage tools report on which parts of the code were \"covered\" or executed during software test suite execution. Typical reports detail routines executed and a percentage of the code executed. Helps assess test reliability (how effective was the test in testing all of the code) and helps find dead code.\n\nJaCoCo JAva COde COverage tool. Works at runtime. No need to instrument code or compile your code differently. Forked from Emma with a new architecture to support these new features.\n\nI use JoCoCo with Jenkins with reporting supported by the Jenkins JoCoCo plugin.\n\nHas Sonar, Jenkins and Eclipse plug-ins. See the YoLinux Jenkins and JaCoCo tutorial\n\nEMMA - Coverage at line, block, method, class and package level.\n\nCobertura\n\nHas Sonar, Jenkins and Eclipse plug-ins.\n\nCodecover\n\nHas Eclipse plug-in.\n\nQuilt.Sourceforge.net: JUnit-Quilt - Provides Code Coverage information off of a JUnit Unit Test. Statement and Branch coverage. Operates on Java Byte code.(Commercial)\n\nClover - commercial code coverage tool.\n\nHas Sonar, Jenkins and Eclipse plug-ins.\n\nJava Servlet, Application Servers and JSP Servers:\n\nSimply put, Java servlets are like CGI in Java for the dynamic generation of web content. JSP is embedding Java in a web page which is processed by the servlet engine before being served.\n\nApache Tomcat - Java solutions for the Apache web server. Servlet processing module which integrates with the Apache web server.\n\nTomcat - Java Servlet and Java Server Pages\n\nYoLinux Tutorial: Apache, Tomcat, Java Servlets and a database\n\nAdobe/Macromedia: J-Run - Java Application Server (JSP, Servlets, EJB, Transaction and Messaging)\n\nCaucho Tech: Resin - Java servlet and JSP engine with load balancing. (commercial)\n\nJETTY - web server written in Java which provides servlet processing.\n\ncometd - httpd server written in Java. Support for servlets and event routing. Web framework for push to browser technology.\n\nJava App Server, SOA, Middleware and Three Tier Systems (J2EE or CORBA services):\n\nJBoss - Open Source Enterprise JavaJ2EE application server. Bundles Tomcat app engine, HornetQ message queue, Hibernate (Db interface), Business Rules Management System (BRMS), SOAP SOA services, HSQL database, SEAM (AJAX, JSF, JPA, EJB, BPM, ...\n\nJBOSS.com: Red Hat owns JBOSS and this is their home page.\n\njBPM: (Java Business Process Management) workflow/orchestration using BPEL (Business Process Execution Language)\n\nJEMS: (JBoss Enterprise Middleware System) for SOA (Service Oriented Architecture)\n\nDrools - business rules engine\n\nApache.org: Geronimo - fully certified J2EE 1.4 application server.\n\nBEA Systems\n\nWebLogic - Enterprise Java Beans (EJB) and Java 2 Enterprise Edition (J2EE)\n\nSun J2EE application server - For building enterprise-class server-side applications with Java. (EJB,JSF,SOA,JSP,JMS,CORBA,JDBC,XML,JNDI and servlets.\n\nOracle Application Server - Supports SOAP, J2EE, etc.\n\nJava.net: GlassFish - open source Java EE 5 application server.\n\nEnhydra.org - Java Application J2EE/XML Server. Development sponsored by Lutris Technologies\n\nIBM WebSphere\n\niPlanet Application Server - J2EE e-commerce platform.\n\nOrion - J2EE: EJB, Servlets, JSP, JTA, JNDI, JDBC, JMS, XML/XSLT. (Used by Oracle in their J2EE server)\n\nAligo: M-1 server - Mobile Application Server. Built for J2EE end-to-end Java mobile application development. Supports Palm, WAP Phones, RIM pagers, Windows CE mobile devices. Supports WAP/WML, PQA HDML, Clipped HTML and Compact HTML. integrates with LDAP, PKI, EJB, XML, JDBC, JMS, CORBA. Requires Apache/Tomcat.\n\nBlazix - J2EE, SSL, EJB, JRMP, Servlets, JSP. (Commercial licensing available)\n\nSybase: EAServer\n\nJava Frameworks, API:\n\nApache:\n\nSTRUTS - Model-View-Controller (MVC) design\n\nTapestry - Servlets framework\n\nTurbine - A model-view-controller (MVC) framework for constructing web applications with either Velocity or Java Server Pages (JSP).\n\nSpring Framework - J2EE application framework\n\ndescription\n\nSourceForge.net: Spring Framework\n\nIBM tutorial\n\nTerracotta - Clustered objects. Alternate JVM boot class path which loads code to synchronize specified Java objects between applications on distributed JVMs. Open source, commercially supported.\n\nMultiple Agent frameworks: (distributed agents)\n\nCougaar.org: (BBN Technologies) Architecture to support distributed agent-based applications.\n\nJack: (AOS Group) intelligent agent development environment scalable from PDAs to large systems\n\nVoyager: (Recursion software) multi-platform location engine from Recursion\n\nJTS: Java Topology Suite - GIS\n\n(JTS: Java Topology Suite, PostGIS (PostgreSQL))\n\nApache POI: Java API To Access Microsoft Format Files\n\nJava Data Storage: (Databases)\n\nJava API for Data Formats and Data Exchange:\n\nData Exchange Formats:\n\nXML:\n\nApache: XML Beans: Program to generate Java source code classes to parse and encapsulate XML based on an XSD schema file and populate a data class. Also generates code to generate XML from a Java data object. Released by BEA to open source community. (YoLinux.com XmlBeans tutorial)\n\nJAXB: Generates Java source code to parse and encapsulate XML. Similar to XmlBeans except that it maps XML to a specific JAXB object which reflects the schema of the XML. XmlBeans allows you to parse and then store or use the data however you would like.\n\nAlso see the YoLinux JAXB Tutorial\n\nJava: JAXP: XML parser. Included in Java SE 1.6\n\nPiccolo: High speed XML parser implementing SAX and JAXP interfaces.\n\nApache: Xerces2: XML parser\n\nBinary:\n\nFast Infoset: terse, tight and light binary alternative format developed by Sun for data exchange when XML is too heavy. A more compact and efficient serialization than text-based XML format.\n\nSun GlassFish implementation: JAX-WS Fast Infoset (~10X faster than Java marshaling XML through Xerces)\n\nW3C Fast Infoset standard\n\nC/C++ FI API\n\nC++ and C# FI API\n\nNon XML Formats:\n\nJSON: JavaScript Object Notation\n\nGSON - uses reflection to automatically marshal a Java object to/from JSON\n\nJackson - API to code translation to/from JSON\n\nYAML: serialized, human readable text data\n\nEDI: Old/historical data exchange format\n\nJava GUI Components:\n\nThe compiled code is not cross platform but use of cross platform GUI frameworks should make the source portable if coded well.\n\nSL.com - Sherrill - Lubinski SL-GMS - [Applet demo]\n\nDynamic graphic GUI components and controls for real time interfaces and displays. Common \".m1\" file graphic framework for C++ and Java. Graphic sources include Visio, bitmaps and DXF. Supports pan, zoom, drill-down and hyperlink capability. Supports input as well as displays. Low weight applets for good performance\n\nQuest: JClass Delivered as separate class components to be integrated within ones program. Many are Bean components which can be dragged and dropped within a GUI IDE. Many configurable widgets.\n\nGenlogic.com: GLG - Dynamic, data driven visual components. Must use GLG monolithic super class framework within your application. Widgets are used within their class framework. Includes many widgets. Strong support of widgets for process control displays.\n\nILog.com: JViews - Diagramming and data graphing capabilities. Requires use of their super class framework. Few predefined widgets. (just graphs and layout) Developer must develop most widgets.\n\nInfragistics.com: JSuite - Access control (ACL), db connection pools, GUI components (calendars, explorer trees, editing components), charting (scatter, bar) Not all components were beans and thus would not integrate with IDE.\n\nINT.com: Java components - 2D and 3D data visualization.\n\nCustom Java GUI Components\n\nJava GUI frameworks:\n\nSWING - Sun GUI API (written using AWT)\n\nAWT - Java's primitive graphics layer.\n\nJavaFX - Sun Java GUI description language/presentation layer.\n\nJava GUI's and interaction defined by an XML file. This allows for an infinitely flexible interface.\n\nCookSwing - extensive framework supporting AWT, Swing and Bean listeners.\n\nJGB - Extensible infrastructure and design. Shows promise for easily re-configurable GUI layouts.\n\nSwiXml - uses javax.swing. Tight code base.\n\nWidgetServer - unified GUI toolkit to support web AJAX as well as Swing interfaces.\n\nOpenLaszlo - web based UI development for J2EE or servlet containers. UI is AJAX HTML/Javascript or Flash for user interaction.\n\nXoetrope: XUI - web or stand-alone applications\n\nBeryl XML GUI - Java Swing apps, J2EE client apps\n\nSwingML - web J2EE/servlet and AJAX\n\nJava Connection Architectures and Web Services:\n\nTopologies:\n\nclient - server: e.g.:\n\nWWW: Web browser (client) to web server (server) connection. A click on a web page invokes processing by the server which feeds a response to the web browser.\n\nSoftware: Apache web server and CGI\n\nServlets: A JVM used to process Java to perform CGI functionality.\n\nSoftware:\n\nTomcat - Also see the YoLinux.com Tomcat Tutorial\n\nJRun: Adobe/Macromedia\n\nAny J2EE application server supports Servlets and so much more.\n\nWeb Services:\n\nSOAP: client calls a remote process. The requested process and input arguments are encapsulated in XML and passed to the server. The server executes the requested function and passes the results back to the client encapsulated in XML.\n\nSOA: Service Oriented Architecture - key components of a SOA include services, dynamic discovery, and messages.\n\nMay integrate the following to locate and invoke the web service:\n\nUDDI: Universal Description, Discovery, and Integration - Find a web service, registry\n\nSoftware:\n\njUDDI\n\nWSDL: Web Services Description Language. - Locate the SOAP service and server\n\nSOAP - The Web services server.\n\nSoftware:\n\nApache Axis2: SOAP and WSDL support. The Axis SOAP/WSDL engine servlet runs under Tomcat which is coupled with the Apache web server.\n\nApache CXF: (was XFire) Web services programming framework: SOAP, WSDL, JAX, ...\n\nAlso see lists above i.e. JBoss, BEA Weblogic, IBM WebSphere, Sun, Oracle Application server, ...\n\nCORBA: Compact binary transport over IIOP. May use a CORBA name server to locate services. Native Java support.\n\nJava RMI: Remote Method Invocation. Native Java support.\n\npeer to peer: Two systems or processes passing information between the two.\n\nJMS: Java Messaging Service. Supports publish-subscribe communications framework. Subscription via callback methods provided by the subscriber. ActiveMQ is often used as a communications bus for ESB.\n\nJMS and other message queues:\n\nApache ActiveMQ\n\nHermes JMS: Debugging tool to view and monitor JMS messages.\n\nApache: QPID (AMQP)\n\nThree tier architectures: J2EE (middleware)\n\nJ2EE Software:\n\nGlassFish (Sun open source)\n\nGeronimo (Apache.org)\n\nJBOSS (Red Hat)\n\nIBM WebSphere\n\nBEA Weblogic\n\nESB: Enterprise Service Bus - a collection of specialized processes (may be distributed) integrated by a common infrastructure which handles communication, interactions, interfaces, authentication, discovery and any other needs of the service bus.\n\nBPEL: Business Process Execution Language - Workflow defined in an XML schema, used to invoke web services in the proper order and deliver the results.\n\nBPEL Software: Apache ODE. (Note project Agila is retired.)\n\nESB Software:\n\nOpenESB - includes an amazing NetBeans plugin\n\nMule ESB\n\nApache ESB: ServiceMix - Full functionality. Based on JBI spec. Uses Apache Camel internally.\n\nApache ESB: Camel - Embeddable. Supports routing and mediation rules.\n\n(Camel an ESB?)\n\nApache ESB: Synapse - Lightweight\n\nSonic ESB (commercial)\n\nCloud Computing:\n\nMost Cloud computing efforts are available as services purchased through vendors such as Amazon Web Services (EC2: Elastic Computing Cloud) or Google AppEngine.\n\nJava Kernel Support:\n\nLinux has support for Java binaries in the OS. You can execute Java applications and Java Applets just like any other program once the Java Runtime Environment is loaded and the kernel configured.\n\nSee:\n\nLocal document /usr/src/linux/Documentation/java.txt. A re-compile of the kernel is required.\n\nAlso see the file /usr/src/linux/Documentation/proc.txt which discusses the /proc/fs/binfmt_misc file.\n\nReal Time Java:\n\nThe Java Real-Time System (RTS) runs on the Linux Real-Time kernel. The \"Red Hat Enterprise MRG\" (Messaging Real-time Grid) is a set of over 50 RPMs which add or replace components of the \"Enterprise Linux\" release. It includes a real-time kernel, configuration and tuning utilities, performance monitoring tools and documentation. The Red Hat MRG Linux includes software based on the University of Wisconsin's Condor project for high throughput computing. The Red Hat MRG release includes QPID, the Apache group's implementation of the AMQP message queues which greatly improves messaging throughput vs traditional SOA technology.\n\nSun Java RTS - Real-Time System - Features the ability to schedule real-time threads, AOT (Ahead of Time Compile as opposed to JIT) to load classes before they are required so this action does not introduce an unexpected latency, and it includes the ability to perform deterministic garbage collection.\n\nRTS runs on:\n\nRed Hat Enterprise MRG\n\nSuSE Linux Enterprise Real Time (SuSE real-time for financial services)\n\nAMQP.org\n\nImplementations:\n\nApache: QPID - Note: examples are installed to /usr/share/qpidc/examples/pub-sub/ and /usr/share/doc/rhm-0.2/cpp/pub-sub/\n\nWhile Red Hat's PR states magnificent gains in speed (qpid 1.0), tests show that Apache ActiveMQ to be both faster and more reliable.\n\nRabbitMQ\n\nJava RTS tutorials:\n\nIBM: Real-Time Java: scheduling, memory management,threads, ... (part 1), part 2, 3, 4, 5, 6\n\nSun:\n\nFAQ\n\nReference\n\nMediacasts\n\nForum\n\nJava One presentations:\n\nJava Real-Time System Revealed\n\nA Real-Time Garbage Collector for a Real-Time Java Virtual Machine\n\nHands-On Lab Java RTS Programming\n\nDot NET Interoperability and Integration:\n\nDot NET calls to Java:\n\nIKVM: JVM in dot NET including dot NET versions of Java libraries. No support for Java GUI.\n\nJava calls to dot NET:\n\nJacob\n\nAlso: Javacom\n\nJAWIN\n\njSegue\n\nCOM4J\n\nSolution is to share COM object. Make COM object available with regasm.exe then call COM component from Java using JNI.\n\nDeveloper Sites:\n\nJadCentral.com: Java Developers Central\n\nTheServerSide.com - EJB Patterns for J2EE applications.\n\nJava.net\n\nJava Tutorials:\n\nThe Java Tutorial from Sun Microsystems\n\nJava 1.6 API docs (essential for programmers)\n\nJavaBeginner.com\n\nIBM Tutorials\n\nStudyJava.org\n\nInteractive Programming In Java - Lynn Andrea Stein (MIT)\n\nJava Passion\n\nJVM Languages (other than Java):\n\nGroovey - optionally typed and dynamic language, with static-typing and static compilation capabilities, for the Java platform.\n\nScala - Object oriented meets Functional programming. Construct elegant class hierarchies for maximum code reuse and extensibility, implement their behavior using higher-order functions.\n\nKotlin - a statically-typed programming language that runs on the Java Virtual Machine, developed by JetBrains (IntelliJ). Approved by Google for Android development.\n\nClosure - member of the Lisp family of languages. Supports multi-threaded programming, Functional Programming and Runtime Polymorphism.\n\nJython - Python for the Java Platform\n\nJRuby - The Ruby Programming Language on the JVM\n\nNashorn - Javascript engine implemented in Java provided by the Mozilla Foundation.\n\nRakudo - Perl on the JVM\n\nQuercus on Resin commercial app server - PHP 5 compiled for the JVM\n\nRenjin - The R Language for statistical computing on the JVM\n\nJacl - self-contained implementation of a Tcl interpreter, written entirely in Java. Jacl is typically used to incorporate Tcl scripting functionality into an existing Java application.\n\nJScheme - Scheme with a very simple interface to Java\n\nJabaco - Compiles Visual Basic 6 source to Java byte code.\n\nLinks:\n\nJava.Sun.com - The official Sun Java site\n\nJavaWorld.com\n\nJAVABoutique.com - applets, applications and servlets.\n\nJGuru.com\n\nObjectWeb.org - Open source middleware and Java software.\n\nEnterprise Java HOWTO - Gary Meyer\n\nJava CGI HOWTO - David H. Silber\n\nLinux on the Sun JavaStation NC HOWTO - Robert S. Dubinski\n\nOnline Electronic Book: Thinking in Java\n\nJXTA - peer to peer applications framework - Sun open source project.\n\nJava SE security\n\nJPackage.org: RPM's of Java development tools\n\nJava Developer Magazine\n\nJava EE Journal\n\nJava Blackbelt\n\nJava Community Process - Java standards development and release\n\nNews Groups:\n\ncomp.os.linux.hardware - Deja\n\nGlossary:\n\nJ2SE: Java 2 Standard Edition: Foundation for desktop, server, J2EE, web services, embedded and real-time applications\n\nJ2ME: Java 2 Micro Edition\n\nJ2EE: Java 2 Enterprise Edition: Server side and middleware. built upon J2SE. Web services, SOA, component model, management and communications API.\n\nJAXP: Java API for XML processing.\n\nJAXM: Java API for message processing.\n\nJAXR: Java API for XML based registry integration. Registration and discovery of web services.\n\nJAX-RPC: Java API for a remote procedure call interface.\n\nJAXB: Enables bindings between the XML schema and the Java object.\n\nJINI: Framework for advertising services on the local network. Discovery mechanism for systems to obtain and lease these services. See Apache river.\n\nJMX: Monitor distributed devices, applications and service driven networks.\n\nJVM: Java Virtual Machine - compiles Java byte code to machine code, then executes.\n\nSOAP: Simple Object Access Protocol.\n\nUDDI: Universal Description, Discovery and Integration. SOAP services discovery.\n\nWSDL: Web Services Description Language. Name service to locate SOAP service and its interface definition.\n\nXSLT: eXtensible Stylesheet Language Transformation. i.e. translates XML into renderable XHTML for viewing in a browser or translate XML to a format required for another application.\n\n[Potential Pitfall]: If your Sun or IBM JVM doesn't work with RH 7.1? - [Solution]\n\nBooks:"
    }
}