{
    "id": "dbpedia_8578_3",
    "rank": 76,
    "data": {
        "url": "https://datacarpentry.org/organization-geospatial/aio.html",
        "read_more_link": "",
        "language": "en",
        "title": "Introduction to Geospatial Concepts: All in One View",
        "top_image": "https://datacarpentry.org/organization-geospatial/favicon-32x32.png",
        "meta_img": "https://datacarpentry.org/organization-geospatial/favicon-32x32.png",
        "images": [
            "https://datacarpentry.org/organization-geospatial/assets/images/data-logo.svg",
            "https://datacarpentry.org/organization-geospatial/assets/images/data-logo-sm.svg",
            "https://datacarpentry.org/organization-geospatial/fig/dc-spatial-raster/raster_concept.png",
            "https://datacarpentry.org/organization-geospatial/fig/01-intro-raster-data-rendered-elevation-map-1.png",
            "https://datacarpentry.org/organization-geospatial/fig/USA_landcover_classification.png",
            "https://datacarpentry.org/organization-geospatial/fig/01-intro-raster-data-rendered-classified-elevation-map-1.png",
            "https://datacarpentry.org/organization-geospatial/fig/dc-spatial-raster/spatial_extent.png",
            "https://datacarpentry.org/organization-geospatial/fig/dc-spatial-raster/raster_resolution.png",
            "https://datacarpentry.org/organization-geospatial/fig/dc-spatial-raster/RGBSTack_1.jpg",
            "https://datacarpentry.org/organization-geospatial/fig/01-intro-raster-data-rendered-demonstrate-RGB-Image-1.png",
            "https://datacarpentry.org/organization-geospatial/fig/01-intro-raster-data-rendered-plot-RGB-now-1.png",
            "https://datacarpentry.org/organization-geospatial/fig/dc-spatial-vector/pnt_line_poly.png",
            "https://datacarpentry.org/organization-geospatial/fig/02-intro-vector-data-rendered-unnamed-chunk-2-1.png",
            "https://media.opennews.org/cache/06/37/0637aa2541b31f526ad44f7cb2db7b6c.jpg",
            "https://datacarpentry.org/organization-geospatial/fig/citrus.jpg",
            "https://datacarpentry.org/organization-geospatial/fig/orange-peel-earth.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/8/8d/Utm-zones-USA.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-04-05T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Content from Introduction to Raster Data\n\nLast updated on 2023-08-15 | Edit this page\n\nOverview\n\nQuestions\n\nWhat format should I use to represent my data?\n\nWhat are the main data types used for representing geospatial data?\n\nWhat are the main attributes of raster data?\n\nObjectives\n\nDescribe the difference between raster and vector data.\n\nDescribe the strengths and weaknesses of storing data in raster format.\n\nDistinguish between continuous and categorical raster data and identify types of datasets that would be stored in each format.\n\nThis episode introduces the two primary types of geospatial data: rasters and vectors. After briefly introducing these data types, this episode focuses on raster data, describing some major features and types of raster data.\n\nData Structures: Raster and Vector\n\nThe two primary types of geospatial data are raster and vector data. Raster data is stored as a grid of values which are rendered on a map as pixels. Each pixel value represents an area on the Earth’s surface. Vector data structures represent specific features on the Earth’s surface, and assign attributes to those features. Vector data structures will be discussed in more detail in the next episode.\n\nThe R for Raster and Vector Data lesson will focus on how to work with both raster and vector data sets, therefore it is essential that we understand the basic structures of these types of data and the types of data that they can be used to represent.\n\nAbout Raster Data\n\nRaster data is any pixelated (or gridded) data where each pixel is associated with a specific geographical location. The value of a pixel can be continuous (e.g. elevation) or categorical (e.g. land use). If this sounds familiar, it is because this data structure is very common: it’s how we represent any digital image. A geospatial raster is only different from a digital photo in that it is accompanied by spatial information that connects the data to a particular location. This includes the raster’s extent and cell size, the number of rows and columns, and its coordinate reference system (or CRS).\n\nSource: National Ecological Observatory Network (NEON) {: .text-center}\n\nSome examples of continuous rasters include:\n\nPrecipitation maps.\n\nMaps of tree height derived from LiDAR data.\n\nElevation values for a region.\n\nA map of elevation for Harvard Forest derived from the NEON AOP LiDAR sensor is below. Elevation is represented as continuous numeric variable in this map. The legend shows the continuous range of values in the data from around 300 to 420 meters.\n\nSome rasters contain categorical data where each pixel represents a discrete class such as a landcover type (e.g., “forest” or “grassland”) rather than a continuous value such as elevation or temperature. Some examples of classified maps include:\n\nLandcover / land-use maps.\n\nTree height maps classified as short, medium, and tall trees.\n\nElevation maps classified as low, medium, and high elevation.\n\nThe map above shows the contiguous United States with landcover as categorical data. Each color is a different landcover category. (Source: Homer, C.G., et al., 2015, Completion of the 2011 National Land Cover Database for the conterminous United States-Representing a decade of land cover change information. Photogrammetric Engineering and Remote Sensing, v. 81, no. 5, p. 345-354)\n\nThe map above shows elevation data for the NEON Harvard Forest field site. We will be working with data from this site later in the workshop. In this map, the elevation data (a continuous variable) has been divided up into categories to yield a categorical raster.\n\nAdvantages and Disadvantages\n\nWith your neighbor, brainstorm potential advantages and disadvantages of storing data in raster format. Add your ideas to the Etherpad. The Instructor will discuss and add any points that weren’t brought up in the small group discussions.\n\nRaster data has some important advantages:\n\nrepresentation of continuous surfaces\n\npotentially very high levels of detail\n\ndata is ‘unweighted’ across its extent - the geometry doesn’t implicitly highlight features\n\ncell-by-cell calculations can be very fast and efficient\n\nThe downsides of raster data are:\n\nvery large file sizes as cell size gets smaller\n\ncurrently popular formats don’t embed metadata well (more on this later!)\n\ncan be difficult to represent complex information\n\nImportant Attributes of Raster Data\n\nExtent\n\nThe spatial extent is the geographic area that the raster data covers. The spatial extent of an R spatial object represents the geographic edge or location that is the furthest north, south, east and west. In other words, extent represents the overall geographic coverage of the spatial object.\n\n(Image Source: National Ecological Observatory Network (NEON)) {: .text-center}\n\nExtent Challenge\n\nIn the image above, the dashed boxes around each set of objects seems to imply that the three objects have the same extent. Is this accurate? If not, which object(s) have a different extent?\n\nThe lines and polygon objects have the same extent. The extent for the points object is smaller in the vertical direction than the other two because there are no points on the line at y = 8.\n\nResolution\n\nA resolution of a raster represents the area on the ground that each pixel of the raster covers. The image below illustrates the effect of changes in resolution.\n\n(Source: National Ecological Observatory Network (NEON)) {: .text-center}\n\nRaster Data Format for this Workshop\n\nRaster data can come in many different formats. For this workshop, we will use the GeoTIFF format which has the extension .tif. A .tif file stores metadata or attributes about the file as embedded tif tags. For instance, your camera might store a tag that describes the make and model of the camera or the date the photo was taken when it saves a .tif. A GeoTIFF is a standard .tif image format with additional spatial (georeferencing) information embedded in the file as tags. These tags should include the following raster metadata:\n\nExtent\n\nResolution\n\nCoordinate Reference System (CRS) - we will introduce this concept in a later episode\n\nValues that represent missing data (NoDataValue) - we will introduce this concept in a later lesson.\n\nWe will discuss these attributes in more detail in a later lesson. In that lesson, we will also learn how to use R to extract raster attributes from a GeoTIFF file.\n\nMulti-band Raster Data\n\nA raster can contain one or more bands. One type of multi-band raster dataset that is familiar to many of us is a color image. A basic color image consists of three bands: red, green, and blue. Each band represents light reflected from the red, green or blue portions of the electromagnetic spectrum. The pixel brightness for each band, when composited creates the colors that we see in an image.\n\n(Source: National Ecological Observatory Network (NEON).) {: .text-center}\n\nWe can plot each band of a multi-band image individually.\n\nOr we can composite all three bands together to make a color image.\n\nIn a multi-band dataset, the rasters will always have the same extent, resolution, and CRS.\n\nOther Types of Multi-band Raster Data\n\nMulti-band raster data might also contain:\n\nTime series: the same variable, over the same area, over time. We will be working with time series data in the Raster Time Series Data in R episode.\n\nMulti or hyperspectral imagery: image rasters that have 4 or more (multi-spectral) or more than 10-15 (hyperspectral) bands. We won’t be working with this type of data in this workshop, but you can check out the NEON Data Skills Imaging Spectroscopy HDF5 in R tutorial if you’re interested in working with hyperspectral data cubes.\n\nKeypoints\n\nRaster data is pixelated data where each pixel is associated with a specific location.\n\nRaster data always has an extent and a resolution.\n\nThe extent is the geographical area covered by a raster.\n\nThe resolution is the area covered by each pixel of a raster.\n\nContent from Coordinate Reference Systems\n\nLast updated on 2023-08-15 | Edit this page\n\nOverview\n\nQuestions\n\nWhat is a coordinate reference system and how do I interpret one?\n\nObjectives\n\nName some common schemes for describing coordinate reference systems.\n\nInterpret a PROJ4 coordinate reference system description.\n\nCoordinate Reference Systems\n\nA data structure cannot be considered geospatial unless it is accompanied by coordinate reference system (CRS) information, in a format that geospatial applications can use to display and manipulate the data correctly. CRS information connects data to the Earth’s surface using a mathematical model.\n\nCRS vs SRS\n\nCRS (coordinate reference system) and SRS (spatial reference system) are synonyms and are commonly interchanged. We will use only CRS throughout this workshop.\n\nThe CRS associated with a dataset tells your mapping software (for example R) where the raster is located in geographic space. It also tells the mapping software what method should be used to flatten or project the raster in geographic space.\n\nThe above image shows maps of the United States in different projections. Notice the differences in shape associated with each projection. These differences are a direct result of the calculations used to flatten the data onto a 2-dimensional map. (Source: opennews.org) {: .text-center}\n\nThere are lots of great resources that describe coordinate reference systems and projections in greater detail. For the purposes of this workshop, what is important to understand is that data from the same location but saved in different projections will not line up in any GIS or other program. Thus, it’s important when working with spatial data to identify the coordinate reference system applied to the data and retain it throughout data processing and analysis.\n\nComponents of a CRS\n\nCRS information has three components:\n\nDatum: A model of the shape of the earth. It has angular units (i.e. degrees) and defines the starting point (i.e. where is (0,0)?) so the angles reference a meaningful spot on the earth. Common global datums are WGS84 and NAD83. Datums can also be local - fit to a particular area of the globe, but ill-fitting outside the area of intended use. In this workshop, we will use the WGS84 datum.\n\nProjection: A mathematical transformation of the angular measurements on a round earth to a flat surface (i.e. paper or a computer screen). The units associated with a given projection are usually linear (feet, meters, etc.). In this workshop, we will see data in two different projections.\n\nAdditional Parameters: Additional parameters are often necessary to create the full coordinate reference system. One common additional parameter is a definition of the center of the map. The number of required additional parameters depends on what is needed by each specific projection.\n\nOrange Peel Analogy\n\nA common analogy employed to teach projections is the orange peel analogy. If you imagine that the earth is an orange, how you peel it and then flatten the peel is similar to how projections get made.\n\nA datum is the choice of fruit to use. Is the earth an orange, a lemon, a lime, a grapefruit?\n\nImage source {: .text-center}\n\nA projection is how you peel your orange and then flatten the peel.\n\nImage source {: .text-center}\n\nAn additional parameter could include a definition of the location of the stem of the fruit. What other parameters could be included in this analogy?\n\nWhich projection should I use?\n\nTo decide if a projection is right for your data, answer these questions:\n\nWhat is the area of minimal distortion?\n\nWhat aspect of the data does it preserve?\n\nUniversity of Colorado’s Map Projections and the Department of Geo-Information Processing has a good discussion of these aspects of projections. Online tools like Projection Wizard can also help you discover projections that might be a good fit for your data.\n\nData Tip\n\nTake the time to figure identify a projection that is suited for your project. You don’t have to stick to the ones that are popular.\n\nDescribing Coordinate Reference Systems\n\nThere are several common systems in use for storing and transmitting CRS information, as well as translating among different CRSs. These systems generally comply with ISO 19111. Common systems for describing CRSs include EPSG, PROJ, and OGC WKT. Most of the data we will be working with in this workshop use the PROJ system.\n\nPROJ is an open-source library for storing, representing and transforming CRS information. PROJ.5 has been recently released, but PROJ.4 was in use for 25 years so you will still mostly see PROJ referred to as PROJ.4. PROJ represents CRS information as a text string of key-value pairs, which makes it easy to customise (and with a little practice, easy to read and interpret).\n\nA PROJ4 string includes the following information:\n\nproj=: the projection of the data\n\nzone=: the zone of the data (this is specific to the UTM projection)\n\ndatum=: the datum use\n\nunits=: the units for the coordinates of the data\n\nellps=: the ellipsoid (how the earth’s roundness is calculated) for the data\n\nNote that the zone is unique to the UTM projection. Not all CRSs will have a zone.\n\nImage source: Chrismurf at English Wikipedia, via Wikimedia Commons (CC-BY). {: .text-center}\n\nReading a PROJ4 String\n\nHere is a PROJ4 string for one of the datasets we will use in this workshop:\n\n+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0\n\nWhat projection, zone, datum, and ellipsoid are used for this data?\n\nWhat are the units of the data?\n\nUsing the map above, what part of the United States was this data collected from?\n\nProjection is UTM, zone 18, datum is WGS84, ellipsoid is WGS84.\n\nThe data is in meters.\n\nThe data comes from the eastern US seaboard.\n\nOther Common Systems\n\nThe EPSG system is a database of CRS information maintained by the International Association of Oil and Gas Producers. The dataset contains both CRS definitions and information on how to safely convert data from one CRS to another. Using EPSG is easy as every CRS has a integer identifier, e.g. WGS84 is EPSG:4326. The downside is that you can only use the CRSs EPSG defines and cannot customise them. Detailed information on the structure of the EPSG dataset is available on their website.\n\nThe OGC WKT standard is used by a number of important geospatial apps and software libraries. WKT is a nested list of geodetic parameters. The structure of the information is defined on their website. WKT is valuable in that the CRS information is more transparent than in EPSG, but can be more difficult to read and compare than PROJ. Additionally, the WKT standard is implemented inconsistently across various software platforms, and the spec itself has some known issues).\n\nFormat interoperability\n\nMany existing file formats were invented by GIS software developers, often in a closed-source environment. This led to the large number of formats on offer today, and considerable problems transferring data between software environments. The Geospatial Data Abstraction Library (GDAL) is an open-source answer to this issue.\n\nGDAL is a set of software tools that translate between almost any geospatial format in common use today (and some not so common ones). GDAL also contains tools for editing and manipulating both raster and vector files, including reprojecting data to different CRSs. GDAL can be used as a standalone command-line tool, or built in to other GIS software. Several open-source GIS programs use GDAL for all file import/export operations. We will be working with GDAL later in this workshop.\n\nMetadata\n\nSpatial data is useless without metadata. Essential metadata includes the CRS information, but proper spatial metadata encompasses more than that. History and provenance of a dataset (how it was made), who is in charge of maintaining it, and appropriate (and inappropriate!) use cases should also be documented in metadata. This information should accompany a spatial dataset wherever it goes. In practice this can be difficult, as many spatial data formats don’t have a built-in place to hold this kind of information. Metadata often has to be stored in a companion file, and generated and maintained manually.\n\nMore Resources on CRS\n\nspatialreference.org - A comprehensive online library of CRS information.\n\nQGIS Documentation - CRS Overview.\n\nChoosing the Right Map Projection.\n\nNCEAS Overview of CRS in R.\n\nVideo highlighting how map projections can make continents seems proportionally larger or smaller than they actually are.\n\nKeypoints\n\nAll geospatial datasets (raster and vector) are associated with a specific coordinate reference system.\n\nA coordinate reference system includes datum, projection, and additional parameters specific to the dataset.\n\nContent from The Geospatial Landscape\n\nLast updated on 2023-08-15 | Edit this page\n\nOverview\n\nQuestions\n\nWhat programs and applications are available for working with geospatial data?\n\nObjectives\n\nDescribe the difference between various approaches to geospatial computing, and their relative strengths and weaknesses.\n\nName some commonly used GIS applications.\n\nName some commonly used R packages that can access and process spatial data.\n\nDescribe pros and cons for working with geospatial data using a command-line versus a graphical user interface.\n\nStandalone Software Packages\n\nMost traditional GIS work is carried out in standalone applications that aim to provide end-to-end geospatial solutions. These applications are available under a wide range of licenses and price points. Some of the most common are listed below.\n\nCommercial software\n\nESRI (Environmental Systems Research Institute) is an international supplier of geographic information system (GIS) software, web GIS and geodatabase management applications. ESRI provides several licenced platforms for performing GIS, including ArcGIS, ArcGIS Online, and Portal for ArcGIS a stand alone version of ArGIS Online which you host locally. ESRI welcomes development on their platforms through their DevLabs. ArcGIS software can be installed using Chef Cookbooks from Github.\n\nPitney Bowes produce MapInfo Professional, which was one of the earliest desktop GIS programs on the market.\n\nHexagon Geospatial Power Portfolio includes many geospatial tools including ERDAS Imagine, a powerful remotely sensed image processing platform.\n\nManifold is a desktop GIS that emphasizes speed through the use of parallel and GPU processing.\n\nOpen-source software\n\nThe Open Source Geospatial Foundation (OSGEO) supports several actively managed GIS platforms:\n\nQGIS is a professional GIS application that is built on top of and proud to be itself Free and Open Source Software (FOSS). QGIS is written in Python, but has several interfaces written in R including RQGIS.\n\nGRASS GIS, commonly referred to as GRASS (Geographic Resources Analysis Support System), is a FOSS-GIS software suite used for geospatial data management and analysis, image processing, graphics and maps production, spatial modeling, and visualization. GRASS GIS is currently used in academic and commercial settings around the world, as well as by many governmental agencies and environmental consulting companies. It is a founding member of the Open Source Geospatial Foundation (OSGeo).\n\nGDAL is a multiplatform set of tools for translating between geospatial data formats. It can also handle reprojection and a variety of geoprocessing tasks. GDAL is built in to many applications both FOSS and commercial, including GRASS and QGIS.\n\nSAGA-GIS, or System for Automated Geoscientific Analyses, is a FOSS-GIS application developed by a small team of researchers from the Dept. of Physical Geography, Göttingen, and the Dept. of Physical Geography, Hamburg. SAGA has been designed for an easy and effective implementation of spatial algorithms, offers a comprehensive, growing set of geoscientific methods, provides an easily approachable user interface with many visualisation options, and runs under Windows and Linux operating systems.\n\nPostGIS is a geospatial extension to the PostGreSQL relational database.\n\nOnline + Cloud computing\n\nGoogle has created Google Earth Engine which combines a multi-petabyte catalog of satellite imagery and geospatial datasets with planetary-scale analysis capabilities and makes it available for scientists, researchers, and developers to detect changes, map trends, and quantify differences on the Earth’s surface. Earth Engine API runs in both Python and JavaScript.\n\nArcGIS Online provides access to thousands of maps and base layers.\n\nPrivate companies have that released SDK platforms for large scale GIS analysis:\n\nKepler.gl is Uber’s toolkit for handling large datasets (i.e. Uber’s data archive).\n\nPublically funded open-source platforms for large scale GIS analysis:\n\nPanGEO for the Earth Sciences.\n\nSepal.io by FAO Openforis utilizing EOS satellite imagery and cloud resources for global forest monitoring.\n\nGUI vs CLI\n\nThe earliest computer systems operated without a graphical user interface (GUI), relying only on the command-line interface (CLI). Since mapping and spatial analysis are strongly visual tasks, GIS applications benefited greatly from the emergence of GUIs and quickly came to rely heavily on them. Most modern GIS applications have very complex GUIs, with all common tools and procedures accessed via buttons and menus.\n\nBenefits of using a GUI include:\n\nTools are all laid out in front of you\n\nComplex commands are easy to build\n\nDon’t need to learn a coding language\n\nCartography and visualisation is more intuitive and flexible\n\nDownsides of using a GUI include:\n\nLow reproducibility - you can’t record your actions and replay\n\nMost are not designed for batch-processing files\n\nLimited ability to customise functions or write your own\n\nIntimidating interface for new users - so many buttons!\n\nIn scientific computing, the lack of reproducibility in point-and-click software has come to be viewed as a critical weakness. As such, scripted CLI-style workflows are again becoming popular, which leads us to another approach to doing GIS: via a programming language. This is the approach we will be using throughout this workshop.\n\nGIS in programming languages\n\nA number of powerful geospatial processing libraries exist for general-purpose programming languages like Java and C++. However, the learning curve for these languages is steep and the effort required is excessive for users who only need a subset of their functionality.\n\nHigher-level scripting languages like R and Python are easier to learn and use. Both now have their own packages that wrap up those geospatial processing libraries and make them easy to access and use safely. A key example is the Java Topology Suite (JTS), which is implemented in C++ as GEOS. GEOS is accessible in R via the sf package and in Python via shapely. R and Python also have interface packages for GDAL, and for specific GIS apps.\n\nThis last point is a huge advantage for GIS-by-programming; these interface packages give you the ability to access functions unique to particular programs, but have your entire workflow recorded in a central document - a document that can be re-run at will. Below are lists of some of the key spatial packages for R, which we will be using in the remainder of this workshop.\n\nsf for working with vector data\n\nraster for working with raster data\n\nrgdal for an R-friendly GDAL interface\n\nWe will also be using the ggplot2 package for spatial data visualisation.\n\nAn overview of these and other R spatial packages can be accessed here.\n\nAs a programming language, R is a CLI tool. However, using R together with an IDE (Integrated Development Environment) application allows some GUI features to become part of your workflow. IDEs allow the best of both worlds. They provide a place to visually examine data and other software objects, interact with your file system, and draw plots and maps, but your activities are still command-driven - recordable and reproducible. There are several IDEs available for R, but RStudio is by far the most well-developed. We will be using RStudio throughout this workshop.\n\nTraditional GIS apps are also moving back towards providing a scripting environment for users, further blurring the CLI/GUI divide. ESRI have adopted Python into their software, and QGIS is both Python and R-friendly.\n\nKeypoints\n\nMany software packages exist for working with geospatial data.\n\nCommand-line programs allow you to automate and reproduce your work.\n\nThe RStudio GUI provides a user-friendly interface for working with R."
    }
}