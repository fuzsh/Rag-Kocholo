{
    "id": "dbpedia_8578_1",
    "rank": 45,
    "data": {
        "url": "https://datacarpentry.org/organization-geospatial/////04-geo-landscape.html",
        "read_more_link": "",
        "language": "en",
        "title": "Introduction to Geospatial Concepts: The Geospatial Landscape",
        "top_image": "https://datacarpentry.org/organization-geospatial/favicon-32x32.png",
        "meta_img": "https://datacarpentry.org/organization-geospatial/favicon-32x32.png",
        "images": [
            "https://datacarpentry.org/organization-geospatial/assets/images/data-logo.svg",
            "https://datacarpentry.org/organization-geospatial/assets/images/data-logo-sm.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-04-05T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "GUI vs CLI\n\nThe earliest computer systems operated without a graphical user interface (GUI), relying only on the command-line interface (CLI). Since mapping and spatial analysis are strongly visual tasks, GIS applications benefited greatly from the emergence of GUIs and quickly came to rely heavily on them. Most modern GIS applications have very complex GUIs, with all common tools and procedures accessed via buttons and menus.\n\nBenefits of using a GUI include:\n\nTools are all laid out in front of you\n\nComplex commands are easy to build\n\nDon’t need to learn a coding language\n\nCartography and visualisation is more intuitive and flexible\n\nDownsides of using a GUI include:\n\nLow reproducibility - you can’t record your actions and replay\n\nMost are not designed for batch-processing files\n\nLimited ability to customise functions or write your own\n\nIntimidating interface for new users - so many buttons!\n\nIn scientific computing, the lack of reproducibility in point-and-click software has come to be viewed as a critical weakness. As such, scripted CLI-style workflows are again becoming popular, which leads us to another approach to doing GIS: via a programming language. This is the approach we will be using throughout this workshop.\n\nGIS in programming languages\n\nA number of powerful geospatial processing libraries exist for general-purpose programming languages like Java and C++. However, the learning curve for these languages is steep and the effort required is excessive for users who only need a subset of their functionality.\n\nHigher-level scripting languages like R and Python are easier to learn and use. Both now have their own packages that wrap up those geospatial processing libraries and make them easy to access and use safely. A key example is the Java Topology Suite (JTS), which is implemented in C++ as GEOS. GEOS is accessible in R via the sf package and in Python via shapely. R and Python also have interface packages for GDAL, and for specific GIS apps.\n\nThis last point is a huge advantage for GIS-by-programming; these interface packages give you the ability to access functions unique to particular programs, but have your entire workflow recorded in a central document - a document that can be re-run at will. Below are lists of some of the key spatial packages for R, which we will be using in the remainder of this workshop.\n\nsf for working with vector data\n\nraster for working with raster data\n\nrgdal for an R-friendly GDAL interface\n\nWe will also be using the ggplot2 package for spatial data visualisation.\n\nAn overview of these and other R spatial packages can be accessed here.\n\nAs a programming language, R is a CLI tool. However, using R together with an IDE (Integrated Development Environment) application allows some GUI features to become part of your workflow. IDEs allow the best of both worlds. They provide a place to visually examine data and other software objects, interact with your file system, and draw plots and maps, but your activities are still command-driven - recordable and reproducible. There are several IDEs available for R, but RStudio is by far the most well-developed. We will be using RStudio throughout this workshop.\n\nTraditional GIS apps are also moving back towards providing a scripting environment for users, further blurring the CLI/GUI divide. ESRI have adopted Python into their software, and QGIS is both Python and R-friendly.\n\nKeypoints\n\nMany software packages exist for working with geospatial data.\n\nCommand-line programs allow you to automate and reproduce your work.\n\nThe RStudio GUI provides a user-friendly interface for working with R."
    }
}