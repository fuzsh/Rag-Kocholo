{
    "id": "dbpedia_8578_3",
    "rank": 4,
    "data": {
        "url": "https://java.libhunt.com/spatial4j-alternatives",
        "read_more_link": "",
        "language": "en",
        "title": "Spatial4j Alternatives - Java Geospatial",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://cdn-b.libhunt.com/assets/logos/java/awesome-java-a974eafd7232945ba21aaf501ceacaa45d8f7441e2c7d7f0e0cff8c713c0bd29.svg",
            "https://cdn-b.libhunt.com/assets/logos/java/awesome-java-a974eafd7232945ba21aaf501ceacaa45d8f7441e2c7d7f0e0cff8c713c0bd29.svg",
            "https://avatars.githubusercontent.com/u/1991411?v=4&s=160",
            "https://avatars.githubusercontent.com/u/2264498?v=4&s=160",
            "https://avatars.githubusercontent.com/u/1187031?v=4&s=160",
            "https://cdn-b.libhunt.com/images/promo-campaign-images/000/000/021/main.png?1663900378",
            "https://avatars.githubusercontent.com/u/1991411?v=4&s=160",
            "https://avatars.githubusercontent.com/u/9842346?v=4&s=160",
            "https://avatars.githubusercontent.com/u/47359?v=4&s=160",
            "https://avatars.githubusercontent.com/u/3954733?v=4&s=160",
            "https://cdn-b.libhunt.com/images/promo-campaign-images/000/000/043/main.png?1722330015",
            "https://cdn-b.libhunt.com/assets/partners/saashub-small-09b040e303cf50000aca670e1c77a15c64fc5c073fbdca2665ec2b8b621efc1a.png",
            "https://travis-ci.org/locationtech/spatial4j.svg",
            "https://img.shields.io/codecov/c/github/locationtech/spatial4j.svg",
            "https://img.shields.io/maven-central/v/org.locationtech.spatial4j/spatial4j.svg",
            "https://cdn-b.saashub.com/img/badges/featured-color.png?v=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-04-06T23:10:29-07:00",
        "summary": "",
        "meta_description": "LocationTech Spatial4j: A Geospatial Library for Java. Tags: Geospatial.",
        "meta_lang": "",
        "meta_favicon": "https://cdn-b.libhunt.com/assets/logos/java/logo-favicon-1ba5abb13b6a92aa5147a9b5db9fcda9ca7d936edd7a2fb393c4fd96f8168d30.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Spatial4j\n\n(note: Spatial4j's official home page is at LocationTech: https://projects.eclipse.org/projects/locationtech.spatial4j but this README has richer information)\n\nSpatial4j is a general purpose spatial / geospatial ASL licensed open-source Java library. It's core capabilities are 3-fold: to provide common shapes that can work in Euclidean and geodesic (surface of sphere) world models, to provide distance calculations and other math, and to read & write shapes from formats like WKT and GeoJSON. Spatial4j is a project of the LocationTech Industry Working Group of the Eclipse Foundation.\n\nIf you are working with spatial grid-square indexing schemes, be it Geohash or something custom, then you are likely to find especially high utility from Spatial4j.\n\nSpatial4j is well tested; it's monitored via Travis-CI continuous integration (plus another Hudson build) and we use Codecov for code coverage.\n\nIf you are interested in contributing to Spatial4j please review the [contribution guidelines](CONTRIBUTING.md).\n\nShapes and Other Features\n\nThe main part of Spatial4j is its collection of shapes. Shapes in Spatial4j have these features:\n\nCompute its lat-lon bounding box.\n\nCompute an area. For some shapes its more of an estimate.\n\nCompute if it contains a provided point.\n\nCompute the relationship to a lat-lon rectangle. Relationships are: CONTAINS, WITHIN, DISJOINT, INTERSECTS. Note that Spatial4j doesn't have a notion of \"touching\".\n\nSpatial4j has a variety of shapes that operate in Euclidean-space -- i.e. a flat 2D plane. Most shapes are augmented to support a wrap-around at X -180/+180 for compatibility with latitude & longitudes, which is effectively a cylindrical model. But the real bonus is its circle (i.e. point-radius shape that can operate on a surface-of-a-sphere model. See below for further info. The term \"geodetic\" or \"geodesic\" or \"geo\" is used here as synonymous with that model but technically those words have a more broad meaning.\n\nShape Euclidean Cylindrical Spherical Point Y Y Y Rectangle Y Y Y Circle Y N Y LineString Y N N Buffered L/S Y N N Polygon Y Y N ShapeCollection Y Y Y\n\nThe Rectangle shape exists in the spherical model as a lat-lon rectangle, which basically means it's math is no different than cylindrical.\n\nPolygons don't support pole-wrap (sorry, no Antarctica polygon); just dateline-cross. Polygons are supported by wrapping JTS's Geometry, which is to say that most of the fundamental logic for that shape is implemented by JTS.\n\nOther Features\n\nRead and write Shapes as WKT. Include the ENVELOPE extension from CQL, plus a Spatial4j custom BUFFER operation. Buffering a point gets you a Circle.\n\nRead and write Shapes as GeoJSON.\n\nRead and write Shapes as [Polyshape](FORMATS.md#polyshape).\n\nRead and write Shapes using the Jackson-databdind serialization framework.\n\n3 great-circle distance calculators: Law of Cosines, Haversine, Vincenty\n\nFor more information on the formats supported, see [FORMATS.md](FORMATS.md).\n\nDependencies\n\nSpatial4j runs on Java 8 (v1.8) or better. Otherwise, all dependencies listed in the maven [pom.xml](pom.xml) are either marked optional or are for testing. The optional dependencies are:\n\nJTS: You need JTS if you use polygons, or obviously if you use any of the classes prefixed with \"Jts\".\n\nNoggit: The Noggit JSON parsing library is only needed for GeoJSON parsing (not required for writing).\n\nJackson-databind: If you wish to use Spatial4j's Jackson-databind feature to read/write shapes.\n\nWhy not use JTS? Why should you use Spatial4j?\n\nSpatial4j was born out of an unmet need from other open-source Java software.\n\nJTS is the most popular spatial library in Java. JTS is powerful but it only supports Euclidean geometry (no geodesics) and it has no Circle shape. Spatial4j has a geodesic circle implementation, and it wraps JTS geometries to add dateline-wrap support (no pole wrap yet). JTS recently broadened it's licensing but originally this was a major factor contributing to the founding of Spatial4j.\n\nA geodesic circle implementation (i.e. point-radius on surface of a sphere), has been non-trivial; see for yourself and look at the extensive testing. Presumably many applications will use a polygon substitute for a circle, however note that not only is it an approximation, but common algorithms inscribe instead of circumscribe the circle. The result is a polygon that doesn't quite completely cover the intended shape, potentially resulting in not finding desired data when applied to the information-retrieval domain (e.g. indexing/search in Apache Lucene) where it is usually better to find a false match versus not find a positive match when making approximations. Also, Spatial4j's implementation goes to some lengths to be efficient by only calculating the great-circle-distance a minimum number of times in order to find the intersection relationship with a rectangle. Even computing the bounding-box of this shape was non-obvious, as the initial algorithm lifted from the web at a popular site turned out to be false.\n\nGetting Started\n\nJavadoc API\n\nThe facade to all of Spatial4j is the SpatialContext. It acts as a factory for shapes and it holds references to most other classes you might use and/or it has convenience methods for them. For example you can get a DistanceCalculator but if you just want to calculate the distance then the context has a method for that.\n\nTo get a SpatialContext (or just \"context\" for short), you could use a global singleton SpatialContext.GEO or JtsSpatialContext.GEO which both use geodesic surface-of-sphere calculations (when available); the JTS one principally adds Polygon support. If you want a non-geodesic implementation or you want to customize one of many options, then instantiate a SpatialContextFactory (or JtsSpatialContextFactory), set the options, then invoke newSpatialContext(). If you have a set of name-value string pairs, perhaps from a java properties file, then instead use the static makeSpatialContext(map, classLoader) method which adds a lot of flexibility to the configuration initialization versus hard-coding it.\n\nYou should generally avoid calling constructors for anything in Spatial4j except for the SpatialContextFactory. Constructors aren't strictly forbidden but the factories are there to provide an extension point / abstraction, so don't side-step them unless there's a deliberate reason.\n\nMiscellaneous\n\nDiscuss Spatial4j on our mailing list (note: old list is here).\n\nView metadata about the project as generated by Maven: maven site.\n\nSpatial4j has been ported to .NET (C#) where it is appropriately named Spatial4n.\n\nFuture Road Map Ideas\n\nSupport for projections by incorporating Proj4j\n\nMore surface-of-sphere implemented shapes (LineString, Polygon), such as by using Geo3D\n\nPolygon pole wrap\n\nMulti-dimensional?\n\nHistory"
    }
}