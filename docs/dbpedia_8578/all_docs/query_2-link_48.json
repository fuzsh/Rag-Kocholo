{
    "id": "dbpedia_8578_2",
    "rank": 48,
    "data": {
        "url": "http://lin-ear-th-inking.blogspot.com/2021/07/jts-isvalidop-built-back-better.html",
        "read_more_link": "",
        "language": "en",
        "title": "Lin.ear th.inking: JTS IsValidOp Built Back Better",
        "top_image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrK8g0zyct6pEXDGpZ1kC5Zn0QQ2DKRK92x3dhp3Y3JDk1tTozfJ9SySfq5KAMz166Wj-Y6mt7ZFN3QzFAl6bfbFbJf5XRLaFz_wiivuv_-D4SmFTzNC7NyVsCDsYPgrQtSCrgsb13ZDs/w1200-h630-p-k-no-nu/invalid-intersections.png",
        "meta_img": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrK8g0zyct6pEXDGpZ1kC5Zn0QQ2DKRK92x3dhp3Y3JDk1tTozfJ9SySfq5KAMz166Wj-Y6mt7ZFN3QzFAl6bfbFbJf5XRLaFz_wiivuv_-D4SmFTzNC7NyVsCDsYPgrQtSCrgsb13ZDs/w1200-h630-p-k-no-nu/invalid-intersections.png",
        "images": [
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgrK8g0zyct6pEXDGpZ1kC5Zn0QQ2DKRK92x3dhp3Y3JDk1tTozfJ9SySfq5KAMz166Wj-Y6mt7ZFN3QzFAl6bfbFbJf5XRLaFz_wiivuv_-D4SmFTzNC7NyVsCDsYPgrQtSCrgsb13ZDs/s320/invalid-intersections.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBQAvH0ZqSgrv1V9XI9-1EhYRQP5MSDJKnBvcGdlQGz1NgKrDF1ERJb9ODJzUtGtXymB54tfskaW5Q111HFSnUvANs0_W7Oakh1jgi53g7amFdM4mU0NkDeYFyLrpunmOJ9OcA4OCgpE8/s320/polygon-touch-all-vertices.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh2FXm2UNV6MpuslctajJVdSuNlxBR79FP100V0WlfW7nNqCLN4Y4Uuhi-0E0PVWge7hmrGuLM2ZL9YetL7iE6rCpM60WJK0rGfQNdQPj1L8zJC1z0PbOH3_c1RWJDLkm2HU-qYemH2vXA/s320/disconnected-polygon.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiymLSbJL0jD8DH7WY_OM8yz_wJnLGdvWB3ko-si-19OWeYhOEu-U8FxeFS6AfBj8fd18ieYo3pwLMu0_OOWlZREXSXeq3TBdplFx9Yh-KiqWroeTp8Jq4cNYT-TPVr0KcTEN_nXkzuvOk/w400-h180/inverted-exverted.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjc2VgW5lTkKpo3iPl3n9ba7pSJFrZ2OPXU0UcraQt-C5KxzHy7H5wpSmIub-ybs0L7hmEKKtcN2sWz4mwG3lCDlv5KhFpATB0khNJAjT-kXA7WzO-QZPLrfNt5AAZ870Z1q4StZek5ank/s320/australia-islands.png",
            "https://resources.blogblog.com/img/icon18_edit_allbkg.gif",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgWp2Q_-RyV0nv5mthgxzsoogVrLcr3X74exGMOxopNrPzJ4VPliS-IN0J3Ad8QNeB6veXmiVW7yRFRefUeM0YXXsa7W2F7BP-Z42NGP8R-9RGOn7ab2ltWb7gs8bpGot4Klifg1DOdu1U/s1600/martin_davis_small.jpg",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhSmFeaYPuQLXCc98HVc_NxM0EVZnHsmZm_XMqjnXrVojopYJHuaR29nJO83f_hPNEZlhFI86XRTaWvjBUDO0DDHX1uNQ2sv6LSuYnyiPXi0-NqFP4K8WQ5MH1vPWmL4WT1pBIT5smlZmk/w72-h72-p-k-no-nu/cascadedUnion.png",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_tnGYjVn7RmhdIP-IRFlqd0zYs6mU3pvm4pFvD9W9JHN8UQGyutnL__MkH0YfxqtqkWhcuseY9zTvPbtt8WtbUEioGl3khpjsoiyV1afvmlSRaHJTnxkxw9dkr9iQYTbfm61Q=w72-h72-p-k-no-nu",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhcP5TOZySOotC15jt5E7yG4ZJrxEQK14lgNqPF9DcqYgnLnxFHydTkHO9RoIzitO0ftsCYMtYGq_Rc4otQFzb-cD-_E7L-gNPhAXRqd9qhVD2hOQHxsSfQ0Q66nK7JbMIrRYkRNLGWAYw/w72-h72-p-k-no-nu/bigpoly_noimprove.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgMMXmeVsTTInsYKjWalulH-n97pp4_9xhf7OeRfX8Fe94v85qluxTTYuWL0RRwwuH4wm93x929W9Sh2snLy_xnGavzapfP3wFgFmtIyS6V7DO4wUF2IOicwGOmUOEhxjAWSL0gSTCNIWo/w72-h72-p-k-no-nu/GTFS_data_model_diagram.PNG",
            "https://blogger.googleusercontent.com/img/a/AVvXsEhTsfTJAsSKAscvZpIr8bVlodUAyTswzjzdCpat2TswDnV6AYdkYDly3T934T8SHlfaBowVpNwlgyY2jMNCMwc_FTiNrJQFvH2JnXWBClRDeuLqYwb4zZKpCrNugxVQBAwK_E2Q27jLtVOn1O9asYOYja8feDScJVC8nv8vzcJkhQlNsSkD7jYQ0Kg3=w72-h72-p-k-no-nu",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhu5W1Qcc-r3e4KCczmkHv6hIDp3ppYKx50dgFKmjq7pP_DYpePFtUB7IVGhJZS_XsPSrAwNF2m8JjpvpvDJmnk3x-vvFYGwosExDD7xCv7WIVvxBDsisziKJePCkBVcFoHiFKSoQNKUNY/w72-h72-p-k-no-nu/gdos-pinch.png",
            "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiS5c8lcxsTJld5MG692-JtaTChUkfbaHnncI0WMUgnhuKtjCIXt50wDlb86TZ6dCAJFFBsaSFe66laHUfBrGC_FRDxwfmanKnPvxTERfbxajbmqvIk2u7xwXTmckSCMe7jKOKPTP1y7TU/w72-h72-p-k-no-nu/interiorpoint-ebc-va.png",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_v8sJm0QGBEeljri27v6_zjvJ30Sv6pZEIskOakohppsYjKmo3IWalUShemAIEAZeNa6Hui3cuhWXoqDkh7nqfVipxnKsXd=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_vEIhI--j78yW6bl4Rin3h85p3jZX0woKB3fWcuhU8WtTON2nENJrAd4wjO4BHKIw5tiQfU1YU6p4tOOOlwaNo7aoAaDCJV4xRwclMQbvbxtWG3=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_uM5kHgRIlyDXGL3sOJcGUJ3Wcg5VL0FfycnuHOXWJsOg2sCG8SdGNacqm5F6nE9547FJx3yznmRTYTt5FZWTpMT6uwAucWXvXsZaIN-xuLkQ=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_snWTdaukjOptEw7BhZSUcIxXz06o5i3C7jfHsjt-2LmXmNKWlCwfCVm4BfiVLfA-kpWYRb6P2PLFZjNCntRaoawtUmv-zOfZ6hac8EiVMLPwvyzA=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_snWTdaukjOptEw7BhZSUcIxXz06o5i3C7jfHsjt-2LmXmNKWlCwfCVm4BfiVLfA-kpWYRb6P2PLFZjNCntRaoawtUmv-zOfZ6hac8EiVMLPwvyzA=s16-w16-h16",
            "https://lh3.googleusercontent.com/blogger_img_proxy/AEn0k_t1yrH-TGu086qowswxMcuJKt_b7uedPrcptF9OLKrTmY8RWsu7ZKK3qFQjEDkFl92OZo1z578bF2yUuDj4TQruXIC2XLxlxa5Ar3I=s16-w16-h16"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Dr JTS",
            "View my complete profile"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "In a previousÂ  post  I described how the JTS Topology Suite  operation IsSimpleOp  has been completely rewritten to reduce code dependencies...",
        "meta_lang": "",
        "meta_favicon": "http://lin-ear-th-inking.blogspot.com/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "http://lin-ear-th-inking.blogspot.com/2021/07/jts-isvalidop-built-back-better.html",
        "text": "In a previous post I described how the JTS Topology Suite operation IsSimpleOp has been completely rewritten to reduce code dependencies, improve performance, and provide a simpler, more understandable implementation. The post points out that the IsValidOp implementation would benefit from the same treatment. This work has now been carried out, with similar benefits achieved.\n\nThe original IsValidOp code used the GeometryGraph framework to represent the topology of geometries. This code reuse reduced development effort, but it carried some serious drawbacks:\n\nThe GeometryGraph structure was used for many JTS operations, including overlay, buffer, and spatial predicate evaluation. This made the code complex, hard to understand, and difficult to maintain and enhance\n\nThe GeometryGraph structure computes the full topology graph of the input geometry, in order to support constructive operations such as overlay and buffer. This makes it slower and more subject to robustness problems. Non-constructive operations such as IsValidOp and IsSimpleOp can compute topology \"on-the-fly\", which allows short-circuiting processing as soon as an invalidity is found.\n\nHowever, dropping GeometryGraph means that the topology information required to confirm validity needs to be computed some other way. The goal is to compute just enough topological structure to evaluate validity, and do that efficiently on an as-needed basis. This required some deep thinking about validity to pare the topology information required down to a minimum. This was assisted by the extensive set of unit tests for IsValidOp, which ensured that all possible situations were handled by the new logic (although there was an untested situation which uncovered a bug late in development.) The resulting algorithm uses some elegant logic and data structures, which are explained in detail below.\n\nOGC Validity\n\nJTS implements the OGC Simple Features geometry model. To understand the validity algorithm, it helps to review the rules of geometry validity in the OGC specification:\n\nFor non-polygonal geometry types, the validity rules are simple;\n\nFor polygonal geometry, on the other hand, the validity rules are quite stringent (sometimes considered too much so!). The rules are:\n\nValidity Algorithm for Polygonal Geometry\n\nThe new IsValidOp uses an entirely new algorithm to validate polygonal geometry. It has the following improvements:\n\nThe algorithm consists of a sequence of checks for different kinds of invalid situations. The order of the checks is important, since the logic for some checks depends on previous checks passing.\n\n1. Check Ring Intersections\n\nThe first check determines if the rings in the geometry have any invalid intersections. This includes the cases of a ring crossing itself or another ring, a ring intersecting itself or another ring in a line segment (a collinear intersection), and a ring self-touching (which is invalid in the OGC polygon model). This check can use the robust and performant machinery in the JTS noding package. If an invalid intersection is found, the algorithm can return that result immediately.\n\nKinds of invalid intersections:\n\n(i) a self-touch; (ii) collinear; (iii) segment crossing; (iv) vertex crossing\n\nThis check is an essential precursor to all the remaining checks. If a geometry has no invalid intersections this confirms that its rings do not self-cross or partially overlap. This means that the results of orientation and point-in-polygon computations are reliable. It also indicates that the rings are properly nested (although it remains to be determined if the nesting of shells and holes is valid).\n\nIntersection search is the most computationally expensive phase of the algorithm. Because of this, information about the locations where rings touch is saved for use in the final phase of checking connected interiors.\n\n2. Check Shell and Hole nesting\n\nIf no invalid intersections are found, then the rings are properly nested. Now it is necessary to verify that shells and holes are correctly positioned relative to each other:\n\nMultiPolygon with an element where all vertices lie on the boundary\n\n3. Check Connected Interior\n\nThe final check is that the interior of each polygon is connected. In a polygon with no self-touching rings, there are two ways that interior disconnection can happen:\n\na chain of one or more touching holes touches the shell at both ends, thus splitting the polygon in two\n\na chain of of two or more touching holes forms a loop, thus enclosing a portion of the polygon interior\n\nTo check that these conditions do not occur, the only information needed is the set of locations where two rings touch. These induce the structure of an undirected graph, with the rings being the graph vertices, and the touches forming the edges. The situations above correspond to the touch graph containing a cycle (the splitting situation is a cycle because the shell ring is also a graph vertex). (Equivalently, the touch graph of a valid polygon is a tree, or more accurately a forest, since there may be sets of holes forming disconnected subgraphs.) So a polygon can be verified to have a connected interior by checking that its touch graph has no cycles. This is done using a simple graph traversal, detecting vertices (rings) which are visited twice.\n\nSituations causing a disconnected interior:\n\n(i) a chain of holes; (ii) a cycle of holes\n\nIf no invalid situations are discovered during the above checks, the polygonal geometry is valid according to the OGC rules.\n\nValidity with Self-touching Rings\n\nSome spatial systems allow a polygon model in which \"inverted shells\" are valid. These are polygon shells which contain a self-touch in a way that encloses some exterior area. They also allow \"exverted holes\", which contain self-touches that disconnect the hole into two or more lobes. A key point is that they do not allow \"exverted shells\" or \"inverted holes\"; self-touches may disconnect the polygon exterior, but not the interior. Visually this looks like:\n\nLeft: Inverted shell and exverted hole (valid)\n\nRight: Exverted shell and inverted hole (invalid)\n\nThis kind of topology is invalid under the OGC polygon model, which prohibits all ring self-intersections. However, the more lenient model still provides unambiguous topology, and most spatial algorithms can handle geometry of this form perfectly well. So there is a school of thought that considers the OGC model to be overly restrictive.\n\nHowever, it turns out that the solution is much simpler. It relies on the fact that valid self-touches can only disconnect the exterior, not the interior. This means that self-touches of inverted shells and exverted holes can be validated by the local topology at the self-intersection node. This condition can be tested by the same logic already used to test for nested touching shells. Even better, if the self-touches are valid, then the touch-graph algorithm to check connectivity still works. (This is the same phenomenon that allows most spatial algorithms to work correctly on the inverted/exverted ring model.)\n\nPerformance\n\nAs expected, the new codebase provides better performance, due to simpler code and the ability to short-circuit when an invalidity is found. Here's some performance comparisons for various datasets:\n\nDataSizeNew (ms)Old (ms)Improvement world 244 Polygons, 366K vertices 3401250 3.7 x invalid-polys 640 Polygons, 455K vertices 126334 2.6 x valid-polys 640 Polygons, 455K vertices 244487 2 x australia 1 MultiPolygon, 1,222K vertices 132169026 52 x\n\nNext Steps\n\nThe improved IsValidOp will appear in JTS version 1.19. It has already been ported to GEOS, providing similar performance improvements. And since GEOS backs the PostGIS ST_IsValid function, that will become faster as well."
    }
}