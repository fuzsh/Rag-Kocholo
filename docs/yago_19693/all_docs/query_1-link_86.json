{
    "id": "yago_19693_1",
    "rank": 86,
    "data": {
        "url": "https://arstechnica.com/civis/threads/the-art-of-computer-programming-is-it-worth-the-time-investment.246208/",
        "read_more_link": "",
        "language": "en",
        "title": "The art of computer programming. Is it worth the time investment?",
        "top_image": "https://cdn.arstechnica.net/civis/styles/ars/ars/ars-icon.png",
        "meta_img": "https://cdn.arstechnica.net/civis/styles/ars/ars/ars-icon.png",
        "images": [
            "https://cdn.arstechnica.net/civis/styles/ars/ars/ars-open-forum.svg",
            "https://cdn.arstechnica.net/civis/styles/ars/ars/ars-open-forum.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "concurrent"
        ],
        "publish_date": "2006-12-22T00:33:55+00:00",
        "summary": "",
        "meta_description": "A co-worker recently recommended that I read Knuth's classic \"The art of computer programming\". I have a lot of respect for this co-worker, but then I've...",
        "meta_lang": "",
        "meta_favicon": "https://cdn.arstechnica.net/civis/styles/ars/ars/ars-icon.png",
        "meta_site_name": "Ars OpenForum",
        "canonical_link": "https://arstechnica.com/civis/threads/the-art-of-computer-programming-is-it-worth-the-time-investment.246208/",
        "text": "A co-worker recently recommended that I read Knuth's classic \"The art of computer programming\". I have a lot of respect for this co-worker, but then I've heard some negative things about these books.<BR><BR> From what I understand, much of the book revolves around an architecture called MIX. Most of the code in the book is in MIX assembly, and MIX is a purely hypothetical<BR>machine. I have no interest in ever programming in assembly, and I don't really feel bad about that considering that the set of problems where assembly makes sense is very small.<BR><BR> Is Knuth's set still relevant? Is it still worth reading, or should I get some other, newer set of books which maintain the same degree of mathematical rigour without using an ancient hypothetical machine for examples?<BR><BR> My purpose in reading this set would be to extend the range of problems I can solve with computers. I've heard people say it won't make you a better programmer, but if it gives me new tools for use in problem solving, that aren't as easily available from other sources then I want to read it. If you think its outdated, I humbly ask what books you think should replace it on my bookshelf.<BR><BR>edited for readablility.\n\nIt's probably not as essential as it used to be (although MIX has nothing to do with that.) Programming has changed from being an art where the maximum performance in speed and accuracy was required, to a trade where usually \"close enough\" is good enough, and there are cycles and storage to waste. Most programmers don't spend much time \"down on the metal\" and while I understand how productive the modern languages are, one of the consequences of them is that you can use them without understanding what is going on in the lower two or three levels, giving rise to \"wha?\" moments when the compiler gives you code that doesn't seem to be working right.<BR><BR>MIX is going to be replaced in the forthcoming editions with MMIX, a more up-to-date processor. This will give us all a whole new set of programming puzzles to solve. As well, there are (currently) MMIX simulators, assemblers, and a port of the GCC c/c++ compiler.<BR><BR>More about MMIX, including Knuth's reason for using MIXX rather than high level languages.<BR><BR>The mathematics, of course, hasn't changed at all.<BR><BR>It's a resource you can study, repeatedly and profitably, for decades. Keeps your brain active."
    }
}