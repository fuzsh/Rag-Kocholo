{
    "id": "yago_19693_0",
    "rank": 79,
    "data": {
        "url": "https://softwareengineering.stackexchange.com/questions/17214/the-art-of-computer-programming-to-read-or-not-to-read",
        "read_more_link": "",
        "language": "en",
        "title": "Software Engineering Stack Exchange",
        "top_image": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "meta_img": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "images": [
            "https://cdn.sstatic.net/Sites/softwareengineering/Img/logo.svg?v=e86f7d5306ae",
            "https://softwareengineering.stackexchange.com/posts/17214/ivc/9d18?prg=154b20c0-0a61-4c44-a203-c3525a100e28"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-11-05T20:27:19",
        "summary": "",
        "meta_description": "There are lots of books about programming out there, and it seems Code Complete is pretty much at the top of most people's list of \"must-read programming books\", but what about The Art of Computer",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/softwareengineering/Img/favicon.ico?v=c4f35a1e3900",
        "meta_site_name": "Software Engineering Stack Exchange",
        "canonical_link": "https://softwareengineering.stackexchange.com/questions/17214/the-art-of-computer-programming-to-read-or-not-to-read",
        "text": "TAOCP is an utterly invaluable reference for understanding how the data structures and algorithms that we use every day work and why they work, but undertaking to read it cover-to-cover would be an extraordinary investment of your time.\n\nAs one family man to another, spend the time with your kids.\n\nSubstitute \"the encyclopedia\" in your question for every reference to TAOCP, and I think the answer should be obvious. Because in a lot of respects, that's what TAOCP is.\n\nThere's a (possibly apocryphal) story about Steve Jobs meeting Knuth. The first thing Jobs said to him was \"It's a pleasure to meet you Dr. Knuth. I've read all your works!\". Knuth's response was \"You're full of shit\": http://www.folklore.org/StoryView.py?project=Macintosh&story=Close_Encounters_of_the_Steve_Kind.txt\n\nNo, it should not be at the top of your priority list. I've got a full set and I have NOT read the whole thing. I've used it (so far) as a good reference on certain problems (it was invaluable in my understanding of randomness and the testing of random generators, for instance). Whenever a CS topic comes up that I don't have a REALLY good handle on, I tend to grab the relevant bit of TAOCP as a good step in my understanding.\n\nIf you do decide to read it, more power to you, and I definitely recommend taking it in small chunks. Don't be afraid to skip around and look at whatever is most interesting first.\n\nTOACP is an essential read -- at some point. Depending on what you do daily, it may not be your most urgent one.\n\nIt's one of those books (well, collections of books) that is good to read early in your career because it really gives you good insights you normally wouldn't get to until later, but it's not essential to survival until you graduate to that part of your career where you don't just code, you choose the toolbox. This is the point where you really want to study algorithms, hopefully already understand language design a bit, and have a very broad understanding of what tools, languages, and systems are out there, and how each one fits into the ecosystem of things you can draw on for a particular project.\n\nIn other words: it's big-picture learning, so if you are obsessive like me read it now, if you aren't, it's okay to put it off until you start yearning to move up the ladder and become a big picture guy.\n\nTAOCP is a great work, but reading it would be a terrible time investment for a practicing software developer. If you do it you will be sacrificing couple of years (thats how long will it takes) of your professional self-improvement budget to learn too much about too little.\n\nI would recommend to work through one or several less \"ultimate\" books about algorithms, my favorite in this area is The Algorithm Design Manual by Steven S. Skiena\n\nThen if you feel that you need/want more move up to the Knuth.\n\nAt the same time you can buy one or several volumes of TAOCP, look it through to understand what areas does Knuth covers in it, and keep it in your library in case you will actually need some information from it in your day-to-day work. My educated guess is that you wouldn't and that is another reason why I do not advise trying to read. But if you will find yourself referencing it often enough, then you will know that it is well worth your time to read it cover to cover.\n\nI'm firmly in the camp of folks that feel that every developer should make the investment in getting the books at some point (and it's getting easier now that it looks like they are being reprinted in paperback) but on the same token, I would also be hard pressed to believe that someone would sit down and read them all from cover to cover.\n\nThe best approach to them - if you don't have a commute to work where you have free time to sit and read - is to read enough of them to know where to find things in them and then to read a full chapter when ever you find yourself using them as reference books for a given problem. With Google and Stack Overflow it's not as common to be reaching for reference books, but in some cases you may find that the books provide some insight that you would have to send some extra time looking for on the internet.\n\nIt's probably more important that you do that problems in the book than you just read it. That will require a lot of time.\n\nHe's up to like 4 volumes and 5 fascicles (whatever those are) so completing the books would be probably better than a university course in the fundamentals of computer science and make you nearly the best programmer ever.\n\nSince you've got a young family, like me, you gave me a pretty swell idea. I'd buy the books one at a time and teach through'em to your kids.\n\nDon't forget that at the beginning, Knuth wanted to write something about how to write a compiler.\n\nYou can get a lot of information on the net with wikipedia for example, but if you are not some kind of researcher, just read the summary, you will get satisfaction.\n\nYou can still get the first tome so you can read it when you're bored though...\n\nIt's not something most people will want to sit down and read cover-to-cover, no. It is an incredibly invaluable reference, and it's certainly good to pick it up, pick an interesting section, read over it, and do some exercises. But the encyclopedia comparisons made above are pretty apt... it's big, extensive, and detailed. And some of the \"exercises\" are research problems that might take years to solve.\n\nIf you just want a better knowledge of low-level algorithms, it might be better to start with the Robert Sedgewick books (eg, \"Algorithms in C,\" \"Algorithms in Java,\" etc.).\n\nIf you are curious, then do it, but it takes quite some time to digest so you need to take your time.\n\nDo you have a commute where you can read - that would be perfect.\n\nEDIT: You might find this preview of a small part of Volume 4 interesting: http://www-cs-faculty.stanford.edu/~uno/fasc1a.ps.gz\n\n(note: compressed postscript)\n\nKnuth's TAOCP is a masterpiece. But, just like any masterpiece (like \"Illiad\",\"War and Peace\" or Proust's \"In Search of Lost Time\") , it's not for everyone or evertime.\n\nThe book is very well written and very well-researched. The problems are great and explanation of the algorithms is well done.\n\nThe great problem of the book is the fact that Knuth show code for a fictional assembly language for a fictional computer. I understand why he did it, but the fact is it sucks.\n\nI recommend to use this book as a bible. When in need, look for it. You will find the answer. It happened to me more than once!"
    }
}