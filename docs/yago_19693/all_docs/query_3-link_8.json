{
    "id": "yago_19693_3",
    "rank": 8,
    "data": {
        "url": "https://www.red-gate.com/simple-talk/opinion/opinion-pieces/don-knuth-and-the-art-of-computer-programming-the-interview/",
        "read_more_link": "",
        "language": "en",
        "title": "Don Knuth and the Art of Computer Programming: The Interview",
        "top_image": "https://www.red-gate.com/simple-talk/wp-content/uploads/imported/873-knuth_don.jpg",
        "meta_img": "https://www.red-gate.com/simple-talk/wp-content/uploads/imported/873-knuth_don.jpg",
        "images": [
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/icons/rss-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/icons/burger-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/icons/rss-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/06/Richard-Morris.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/x-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/linkedin-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/mastodon-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/facebook-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2024/07/Image-600x823-1.jpeg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/imported/873-knuth_don.jpg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/imported/1819-Don%20Knuth%20With%20an%20ibm-650%20in1958.jpg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/06/Richard-Morris.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/06/Richard-Morris.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/06/Richard-Morris.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/06/Richard-Morris.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Richard Morris"
        ],
        "publish_date": "2013-06-11T00:00:00+00:00",
        "summary": "",
        "meta_description": "Fifty years after starting the 'Art of Computer Programming', (TAOCP), Don Knuth is still working hard at the project. He has almost completed the first five volumes. It is considered amongst the \"hundred or so books that shaped a century of science”. Richard Morris asks him how things are going, and to find out more about his many achievements.",
        "meta_lang": "en",
        "meta_favicon": "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/07/gatebase-favicon.png",
        "meta_site_name": "Simple Talk",
        "canonical_link": "https://www.red-gate.com/simple-talk/opinion/opinion-pieces/don-knuth-and-the-art-of-computer-programming-the-interview/",
        "text": "In the nearly fifty years since beginning the book, ‘The Art of Computer Programming’, that has almost defined computer programming as much as it has defined him, Donald Knuth has received awards including the Kyoto Prize (1996), the Turing Award (1974), and the National Medal of Science (1979). He is an extraordinary man. As well as inventing ‘Literate Programming’ and writing the most important textbook on programming algorithms, he is also famous for designing and programming one of the most widely-used digital typesetting systems ever, even designing the fonts that went with it. He also pioneered the use of ‘Open-source’ software.\n\nKnuth is a man of engaging charm and enthusiasms who combines a knowledge of history, music, art and mathematics with a unique insight into the art of computer programming.\n\nDon Knuth has always viewed the stages of writing ‘The Art of Computer Programming’ as the most important project of his life.\n\nKnuth’s full-time writing schedule means that he is ‘pretty much a hermit… concentrating intensively and uninterruptedly on one subject at a time, rather than swapping a number of topics in and out of his head. I’m unable to schedule appointments with visitors, travel to conferences or accept speaking engagements, or undertake any new responsibilities of any kind.’\n\nThe irony is that computer science nearly lost Knuth to its ranks because of his love of music (his house is built around a two-storey pipe organ that he designed himself) and says he intends to return to it once he has completed the expected seven volumes of ‘The Art of Computer Science’.\n\nRM:\n\nDon, the last time we spoke we touched on complexity and you said that simplicity was the only answer to this. Why is it important to find simple solutions to software problems?\n\nDK:\n\nIt is important to find simple solutions instead of stopping as soon as a first solution is found.\n\nI suppose people usually stop early because most problems do not have a simple solution; thus they figure there’s no reason to spend any time looking further. If we start with the assumption that a simple solution does exist, we’re much more likely to find one.\n\nRM:\n\nYou have an essay about developing TeX where you talk about going over to a pure, destructive QA personality and trying your hardest to break code. Do you think most developers are good at that?\n\nDK:\n\nYou are right that it takes a certain kind of mentality to create test cases that will detect subtle bugs. For example, I know that I’m not sneaky enough to ever become an expert on cryptography or computer security.\n\nOn the other hand I have been reasonably successful at designing torture tests for software that I’ve written, mostly by\n\n(1) imagining myself as the enemy of the system, rather than as its friend;\n\n(2) thinking of inputs that are legal but bizarre and unlikely ever to be useful;\n\n(3) embedding an incredibly complicated construction into another that’s even less scrutable.\n\nSome parts of my test programs for TeX and METAFONT required many hours of thought before I could convince myself that the program did the right thing. But in the process I discovered bugs that I’m pretty sure wouldn’t have been found by any other method that I’ve ever heard about.\n\nEven better results will presumably be obtained if several different people independently create the torture tests. I can imagine that test creation would be a satisfying career.\n\nI guess I do tend to use systems in unexpected ways, and I get some satisfaction when this reveals a flaw. For example, I remember having fun while visiting my sister and playing with a `shoot-em-up’ game that my nephew showed me.\n\nSince I’m kind of a pacifist, I tried shooting bullets at the wall, instead of trying to kill the hidden attackers. Sure enough, I could spell my name on that wall, by making bullet holes in an appropriate pattern. But later when I came back to that same position, after wandering around further in the game, my name was gone! I think that was a bug in the software.\n\nLong ago when I was a teenager, probably in 1952 or 1953, I saw my first “computer game”, a demonstration of tic-tac-toe at a museum in Chicago where visitors were challenged to beat a machine.\n\nThe exhibit was designed by AT&T, and I think it was controlled by relay switches rather than by a real general-purpose computer.\n\n‘Hmm. No Angry Birds here!’\n\n(Don Knuth with an IBM 650 in 1958)\n\nI knew that I could never win if I made normal responses; so I intentionally made the stupidest possible moves. The machine got to a position where it had two ways to beat me by completing three in a row. I decided not to block either possibility. In response, the machine made both of its winning moves … and this was clearly in violation of the rules. So I had won a moral victory.\n\nThus, it appears that an encouragement to “think outside the box” helps for designing test cases, just as it does in many other situations.\n\nRM:\n\nIf you were to start over and design TeX today, would the advances in computing or your understanding change the design in dramatic ways or would it turn out mostly the same?\n\nDK:\n\nI’m not sure if anybody can still write such a program today, without paying a fortune to license patented ideas. But suppose we ignore such problems; then I would keep the system basically as it is now.\n\nThe only serious mistake that I regret making with respect to TeX is that I used binary arithmetic internally but decimal arithmetic in the user interface; I should have done all computations in decimal.\n\nRM:\n\nWhat would you suggest to someone who wants to be a better software > designer? Decide if they want to make money or whether they want to do science? Do you think we need better incentives to make better software?\n\nDK:\n\nI think existing incentives are working fine, except of course that I wish more people would discover the advantages of literate programming.\n\nRM:\n\nIs there any truth in the rumour that Chuck Moore had an influence on your thinking about algorithms or you having any influence on Chuck?\n\nDK:\n\nWe haven’t intersected at all, as far as I know.\n\nRM:\n\nWhat’s your process look like when you’re doing exploratory programming and readying it for publication?\n\nDK:\n\nI write about five programs each week, on average, and I continue to enjoy making them “literate”. I often tear up the first draft or two, after I see how things are going, because algorithms tend to be full of surprises. I often make close studies of code written by the leading experts in whatever kind of application I’m currently studying; but I also try to rethink everything from scratch. I make many mistakes, but afterwards I try to help my readers to avoid them.\n\nRM:\n\nHow do you define the idea of designing a programming language? Is it a tool to express ideas or a tool to express goals?\n\nDK:\n\nI think of a programming language as a tool to convert a programmer’s mental images into precise operations that a machine can perform. The main idea is to match the user’s intuition as well as possible. There are many kinds of users, and many kinds of application areas, so we need many kinds of languages.\n\nI discuss language design in detail in Chapter 11 of my recent book ‘Selected Papers on Computer Languages’. I was asked in the 1960s to write about this topic, and the best way I could figure out to explain principles of good design was to violate them all and to present the design of BL\\I, “Bad Language One”. But I hesitated for more than 40 years before publishing anything about BL\\I, because I was afraid people might implement it and start to use it. Finally, when preparing that book, I decided to take a chance.\n\nRM:\n\nI realise this is an enormous question, but what is the link between the design of a language and the design of software written with that language?\n\nDK:\n\nThe software writers who have particular ways of thinking about algorithms need a language that matches their thoughts so that they can efficiently transform those thoughts into working code.\n\nDifferent thought processes result in different structures.\n\nRM:\n\nWhat are the major problems in the computer industry today?\n\nDK:\n\nD’uh. I’m just an academic who writes about programming; I never have understood industry or economics.\n\nRM:\n\nDo you prefer freedom or order? Do you prefer one way to do a single thing, or a thousand ways to reach the same goal?\n\nDK:\n\n(a) Freedom AND order. (b) I guess I prefer maybe three ways, having different characteristics, together with the knowledge of how to convert each of them into the other two.\n\nRM:\n\nIn what ways do you think you have influenced the computer industry as a technologist and what lessons should people learn from your experience?\n\nDK:\n\nI can’t say what influence I’ve had, but I can summarize what I’ve been trying to accomplish during my career: I’ve attempted to organize many of the best ideas that have been discovered related to programming, and to explain them effectively, because I believe computer science is a beautiful body of knowledge.\n\nI’m glad that this knowledge has proved to be very useful, although I would actually want to organize it and explain it even if the only motivation were intellectual curiosity and a desire to explore fascinating patterns."
    }
}