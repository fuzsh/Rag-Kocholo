{
    "id": "dbpedia_2234_2",
    "rank": 93,
    "data": {
        "url": "https://www.myexperiment.org/workflows/1202",
        "read_more_link": "",
        "language": "en",
        "title": "Copasi time simulation of SBML model (Peter Li) [Taverna 2 Workflow]",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.myexperiment.org/images/logo.png?1680607579",
            "https://www.myexperiment.org/images/logo_cropped.png?1680607579",
            "https://www.myexperiment.org/images/redmond_studio/arrow-down_16.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/workflows/1202/versions/1/previews/medium",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/folds/unfold.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/pictures/show/254?size=60x60",
            "https://www.myexperiment.org/images/famfamfam_flags/cn.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/by-sa.png",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/user.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/manhattan_studio/folder-closed_16.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/information.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/report.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/comments.png?1680607579",
            "https://www.myexperiment.org/images/famfamfam_silk/timeline_marker.png?1680607579",
            "https://www.myexperiment.org/images/redmond_studio/applications_16.png?1680607579"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Script\n\nimport java.util.Iterator; import java.util.List; import javax.xml.namespace.NamespaceContext; import javax.xml.parsers.*; import javax.xml.xpath.*; import org.w3c.dom.Document; import org.apache.xpath.NodeSet; import java.io.*; import org.w3c.dom.*; import org.xml.sax.InputSource; import org.apache.xpath.NodeSet; DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance(); domFactory.setNamespaceAware(true); // never forget this! DocumentBuilder builder = domFactory.newDocumentBuilder(); ByteArrayInputStream bs = new ByteArrayInputStream(sbrml.getBytes()); Document doc = builder.parse(bs); NamespaceContext ctx = new NamespaceContext() { public String getNamespaceURI(String prefix) { String uri; if (prefix.equals(\"ns1\")) uri = \"http://www.sbrml.org/sbrml/level1/version1\"; else uri = null; return uri; } //Dummy implementation - not used! public Iterator getPrefixes(String val) { return null; } //Dummy implemenation - not used! public String getPrefix(String uri) { return null; } }; //Get all time frames String xpathStr1 = \"/ns1:sbrml/ns1:operations/ns1:operation/ns1:result/ns1:resultComponent/ns1:dimension/ns1:compositeValue/@indexValue\"; //Get all species names String xpathStr2 = \"/ns1:sbrml/ns1:operations/ns1:operation/ns1:result/ns1:resultComponent/ns1:dimension/ns1:compositeValue[@indexValue='0']/ns1:compositeValue/@indexValue\"; XPathFactory xpathFact = XPathFactory.newInstance(); XPath xpath = xpathFact.newXPath(); xpath.setNamespaceContext(ctx); Object result = xpath.evaluate(xpathStr1, doc, XPathConstants.NODESET); NodeList nodes = (NodeList) result; //Sort out output StringBuffer sb = new StringBuffer(); //sb.append(\"Species\"); ArrayList timeframes = new ArrayList(); for (int i = 0; i < nodes.getLength(); i++) { String time = nodes.item(i).getNodeValue(); timeframes.add(time); sb.append(time); if(i == nodes.getLength() - 1) sb.append(\"\\n\"); else sb.append(\",\"); } //Use species names in sbrml String[] lines = species.split(\"\\n\"); Hashtable ht = new Hashtable(); for(int x = 0; x < lines.length; x++) { String[] tokens = lines[x].split(\";\"); String spId = tokens[0]; String name = tokens[1]; if(name.equals(\"Nicotinamide adenine dinucleotide - reduced\")) name = \"NADH\"; else if(name.equals(\"Nicotinamide adenine dinucleotide\")) name = \"NAD\"; ht.put(spId, name); } Object result = xpath.evaluate(xpathStr2, doc, XPathConstants.NODESET); NodeList nodes = (NodeList) result; for (int i = 0; i < nodes.getLength(); i++) { String species = nodes.item(i).getNodeValue(); String speciesName = ht.get(species); if(!selectedSpeciesNames.contains(speciesName)) continue; else { sb.append(\"\\\"\" + speciesName + \"\\\"\"); //Iterate for(int x = 0; x < timeframes.size(); x++) { String timeFrame = timeframes.get(x); //Get concentration values String xpathStr3 = \"/ns1:sbrml/ns1:operations/ns1:operation/ns1:result/ns1:resultComponent/ns1:dimension/ns1:compositeValue[@indexValue='\" + timeFrame + \"']/ns1:compositeValue[@indexValue='\" + species + \"']/ns1:tuple/ns1:atomicValue[1]\"; String data2 = xpath.evaluate(xpathStr3, doc); sb.append(\",\" + data2); } sb.append(\"\\n\"); } } //Output String output = sb.toString();\n\nScript\n\n#Initialise output of png image png(graph_image); #Read in csv data from previous taverna activity data <- read.table(file=csv,head=TRUE,sep=\",\"); #transpose data tdata <- t(data); #Plot all species concentrations against time matplot(tdata,axes=F,frame=T,type=\"l\", col= 1:ncol(tdata), ylab=\"Concentration\", xlab=\"Time\"); #Add title title(\"Copasi time course simulation\"); # put numerical annotations at the tickmarks in y-axis; axis(2); #Remove Xs from row name strings rnames <- rownames(tdata); for (i in 1:length(rnames)) #Loop thru rows in x object { rnames[i] <- substr(rnames[i], 2, nchar(rnames[i])); } #Add ticks and time unit values to x axis axis(1, 1:length(rnames), rnames); #Add legend for species legend(\"bottomright\", colnames(tdata), lty = 1:ncol(tdata), col = 1:ncol(tdata), cex = .6); #Close stream to png image dev.off();"
    }
}