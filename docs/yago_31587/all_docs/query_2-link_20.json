{
    "id": "yago_31587_2",
    "rank": 20,
    "data": {
        "url": "https://www.frontiersofknowledgeawards-fbbva.es/galardonados/donald-e-knuth-2/",
        "read_more_link": "",
        "language": "en",
        "title": "Donald E. Knuth",
        "top_image": "https://www.premiosfronterasdelconocimiento.es/wp-content/uploads/sites/2/2019/06/FBBVA-10-tic-Knuth.jpg",
        "meta_img": "https://www.premiosfronterasdelconocimiento.es/wp-content/uploads/sites/2/2019/06/FBBVA-10-tic-Knuth.jpg",
        "images": [
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/fundacion/assets/img/fundacion-bbva-en.svg",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/fundacion/assets/img/fundacion-bbva-en.svg",
            "https://www.premiosfronterasdelconocimiento.es/wp-content/uploads/sites/2/2019/06/FBBVA-10-tic-Knuth.jpg",
            "https://www.premiosfronterasdelconocimiento.es/wp-content/uploads/sites/2/2019/06/FBBVA-10-tic-Knuth.jpg",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/assets/img/logo-csic.jpg",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/assets/img/logo-csic.jpg",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/assets/img/fundacion-bbva.svg",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/assets/img/fundacion-bbva.svg",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/assets/img/BBVA.png",
            "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/assets/img/BBVA.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The BBVA Foundation Frontiers of Knowledge Award in the Information and Communication Technologies category goes in this third edition to U.S. mathematician Donald E. Knuth, for making computing a science by introducing formal mathematical techniques for the rigorous analysis of algorithms.",
        "meta_lang": "en",
        "meta_favicon": "https://www.frontiersofknowledgeawards-fbbva.es/wp-content/themes/premios_fronteras/favicon.ico",
        "meta_site_name": "Premios Fronteras",
        "canonical_link": "https://www.frontiersofknowledgeawards-fbbva.es/galardonados/donald-e-knuth-2/",
        "text": "Computers may not think but they have their language. And their literature. Donald E. Knuth, 2010 BBVA Foundation Frontiers of Knowledge laureate in Information and Communication Technologies, is something like the literary light of the computing world. Not for nothing is his still unfinished masterwork titled The Art of Computer Programming. âThe Artâ is the great encyclopedia of programming; the reference work to which computer scientists turn to communicate with their machines. Knuth has taught humans how to talk to computers. His life story and lifestyle, however, could not be further away from what is popularly expected of a technological guru.\n\nDonald E. Knuth hasnât used e-mail for the last fifteen years. He doesnât spend time on social networks. He is not a multimillionaire who has made an overnight fortune with the latest great idea. Knuth plays the organ, rides his bike, and gets his best ideas when swimming in the Stanford University pool. He even writes his books in longhand: âThereâs a synchronization problem,â he explains. âI type faster than I think, but I come up with ideas at about the same rate as I can write them down with a pencil.â He admits that since his first infancy he has lived âa strange kind of love affair with booksâ and the appearance of the printed word.\n\nHe enjoys reading source code and discovering the mental processes that have guided others in their work â just as, in his student days, he read the great 17th-century mathematician Pierre de Fermat in the original Latin. For him, programs should be written âlike works of literature,â so other people, and not just computers, can read, understand and, even, savor them. This, then, is a scientist who shares with artists the âcompulsion to produceâ: âJust as a poet has to write poetry, I wake up in the morning, and it makes my day to think of adding some lines to my program,â he enthuses. âI just have to program in order to be a happy man.â\n\nIt is no surprise then that his academic future was decided by his first encounter with a computer. âThere was something special about that IBM 650, something that has provided the inspiration for much of my lifeâs work.â The IBM 650, one of the first computers to earn its maker a profit, back in the 1950s, worked with vacuum tubes and punch cards, and was too big to fit inside a car. Knuth would spend hours just watching the lights blink on this âautomatic calculatorâ â as IBM advertised it â and would write his first program for it. It factorized numbers, and ended up with more errors than lines of code. âMy first program taught me a lot about the errors I was going to be making in the future. […] Now I probably obsess about not making too many mistakes,â he confesses.\n\nIs this what drives Knuthâs passion for precision? Precision, he admits, is part of the nature of his job, since only the most pared-down thoughts can be understood by a machine. âWhen youâre doing programming, you have to explain something to a computer, which is dumb. If you write for a human being, he will look at it and nod his head and say, âyeah, this makes sense.â But in fact there are all kinds of vagueness and ambiguities that you only detect when you start writing for a computer.â It is commonly affirmed that you canât understand something until youâve had to explain it. Knuth has his own version:âThe truth is you donât understand something until youâve taught it to a computer, until youâve been able to program it.â\n\nâThe truth is you donât understand something until youâve taught it to a computer, until youâve been able to program it.â\n\nTUITEAR\n\nThe Knuth who fell under the spell of the IBM 650 was a second year math student, son of an accounting teacher at a Lutheran school who played the organ in church and kept an offset printer in the basement. His original plan to devote himself to music â he played the organ, saxophone and tuba â fell by the wayside when he got the chance to study physics at the Case Institute of Technology in Ohio: âI was intrigued by the idea that Case was going to make me work hard. I was scared of flunking out, but I was also ready to work.â Finally, however, mathematical abstraction appealed to him more than the âmessyâ experimental side of physics: âI visualize the symbols. I take a mathematical problem, I translate it into formulas, and then the formulas are the reality.â\n\nIf mathematics was the substrate then computers were the catalyst. The appropriate stimulus for a mind already that way inclined. Knuth contends that a computer scientist is distinguished above all by a way of thinking âthat correlates well with computersâ: âThere is a certain intellectual skills set that lends itself to programing. About one person in fifty has this peculiar approach to knowledge, and they came to the fore when the computer was born.â\n\nIn 1963, Knuth completed his doctorate at the California Institute of Technology, after resolving the central problem of his PhD thesis in a single, inspired hourâs work. He had by then realized that the key to advancing the infant field of Computer Science lay in mathematics. With math you could check if a program was correct before you ran it, in contrast to the crude and inefficient trial and error method previously in use â write the program then find the errors when it runs. With Knuth programs could be elegant, symmetrical, beautiful… Programing became an art.\n\nBut not all Knuthâs work is theory. It is to him we owe the typesetting languages TeX and METAFONT. Knuth developed them out of sheer frustration at the poor print quality of his published works. Originally scheduled for completion during a one-year break from his main line of work, TeX would eventually take a decade to perfect. But the wait was worth it. TeX is now the most widely used program for the editing of scientific texts. And of course it is available in open source, true to Knuthâs championing of the universality of knowledge.\n\nBut Knuthâs ultimate legacy is The Art of Computer Programming. Conceived as a seven-volume work back in 1962, a total of three volumes have been published to date (in 1968, 1969 and 1973), with volume 4A just off the press. This is âthe seminal work on computer science in the broadest sense,â in the words of the juryâs citation, whose impact on the theory and practice of computer science is âbeyond parallel.â Its author reveals the thinking behind the title: âArtÂ means something artificial, devised by human beings rather than by nature, but it also means a work of beauty. What I want is to create something of beauty: that a computer program has style and elegance and communicates well.â\n\nA professor at Stanford University since the age of thirty, Knuth decided at age fifty-five to step into an emeritus role and devote himself entirely to completing his magnum opus. His chair bears the name The Art of Computer Programming."
    }
}