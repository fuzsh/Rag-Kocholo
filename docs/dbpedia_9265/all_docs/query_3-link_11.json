{
    "id": "dbpedia_9265_3",
    "rank": 11,
    "data": {
        "url": "https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html",
        "read_more_link": "",
        "language": "en",
        "title": "Understanding Success Criterion 2.5.3: Label in Name",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.w3.org/WAI/WCAG22/Understanding/img/rich-text-editor-detail.png",
            "https://www.w3.org/analytics/piwik/piwik.php?idsite=328&rec=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Intent\n\nThe intent of this Success Criterion is to ensure that the words which visually label a component are also the words associated with the component programmatically. This helps ensure that people with disabilities can rely on visible labels as a means to interact with the components.\n\nMost controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the accessible name. Users typically have a much better experience if the words and characters in the visible label of a control match or are contained within the accessible name. When these match, speech-input users (i.e., users of speech recognition applications) can navigate by speaking the visible text labels of components, such as menus, links, and buttons, that appear on the screen. Sighted users who use text-to-speech (e.g., screen readers) will also have a better experience if the text they hear matches the text they see on the screen.\n\nNote that where a visible text label does not exist for a component, this Success Criterion does not apply to that component.\n\nWhere text labels exist and are properly linked to the user interface components through established authoring practices, the label and name will normally match. When they don't match, speech-input users who attempt to use the visible text label as a means of navigation or selection (e.g., \"move to Password\") will be unsuccessful. The speech-based navigation fails because the visible label spoken by the users does not match (or is not part of) the accessible name that is enabled as a speech-input command. In addition, when the accessible name is different from the visible label, it may function as a hidden command that can be accidentally activated by speech-input users.\n\nMismatches between visible labels and programmatic names for controls are even more of an issue for speech-input and text-to-speech users who also have cognitive challenges. Mismatches create an extra cognitive load for speech-input users, who must remember to say a speech command that is different from the visible label they see on a control. It also creates extra cognitive load for a text-to-speech user to absorb and understand speech output that does not match the visible label.\n\nNote that when a user interface component lacks an accessible name — a failure of 4.1.2 Name, Role, Value — and has a visible text label, then it also fails this Success Criterion.\n\nIdentifying label text for components\n\nIn order for the label text and accessible name to be matched, it is first necessary to determine which text on the screen should be considered a label for any given control. There are often multiple text strings in a user interface that may be relevant to a control. However, there are reasons why it is best to conservatively interpret the label as being only the text in close proximity.\n\nConventionally the label for user interface components is the adjacent text string. The typical positioning for left to right languages is:\n\nimmediately to the left of comboboxes, dropdown lists, text inputs, and other widgets (or in the absence of left-side labels, immediately above and aligned with the left edge of each input)\n\nimmediately to the right of checkboxes and radio buttons\n\ninside buttons and tabs or immediately below icons serving as buttons\n\nThe rationale for some of these conventions is explained in G162: Positioning labels to maximize predictability of relationships.\n\nIt is important to bias towards treating only the adjacent text as a label because liberal interpretations of what constitutes a text label can jeopardize the value of this Success Criterion (SC) by lessening predictability. Isolating the label to the single string in close proximity to the component makes it easier for developers, testers, and end users to identify the label targeted for evaluation in this SC. Predictable interpretation of labeling allows users of speech recognition technologies to interact with the element via its conventionally positioned label, and allows users of screen reading technologies to enjoy consistency between the nearby visible label and the announced name of the component.\n\nNote that placeholder text within an input field is not considered an appropriate means of providing a label. The HTML5 specification states The placeholder attribute should not be used as an alternative to a <label>. However, it is worth noting that \"label\" in that HTML5 statement is in code brackets and links to the label element. For the purposes of this Label in Name Success Criterion, \"label\" is not used in such a programmatic sense but is simply referring to a text string in close visual proximity to a component. As such, in the absence of any other nearby text string (as described in the preceding list), if an input contains placeholder text, such text may be a candidate for Label in Name. This is supported both through the accessible name calculation (discussed later) and from the practical sense that where a visible label is not otherwise provided, it is likely that a speech-input user may attempt to use the placeholder text value as a means of interacting with the input.\n\nText labels \"express something in human language\"\n\nSymbolic text characters\n\nFor the purposes of this SC, text should not be considered a visible label if it is used in a symbolic manner, rather than directly expressing something in human language as per the definition of text in WCAG. For example, 1.4.5 Images of Text describes considerations for \"symbolic text characters.\" In the images of text example \"B\", \"I\", and \"ABC\" appear on icons in a text editor, where they are meant to symbolize the functions for Bold, Italics, and Spelling, respectively. In such a case, the accessible name should be the function the button serves (e.g., \"Spell check\" or \"Check spelling\"), not the visible symbolic characters. A similar text editor is shown in the figure below.\n\nLikewise, where an author has used a greater-than symbol (\">\") to mimic the appearance of the right-facing arrow, the text does not convey something in human language. It is a symbol, in this scenario likely meant to mimic the icons used for a \"Play\" button or a \"Next\" arrow.\n\nPunctuation and capitalization\n\nThe use of punctuation and capitalization in labels may also be considered optional for the same reason. For example, the colon conventionally added at the end of input labels does not express something in human language, and capitals on the first letter of each word in a label do not normally alter the words' meaning. This is particularly relevant in the context of this SC, since it is primarily aimed at users of speech recognition; capitals and most punctuation are frequently ignored when a user speaks a label as a means of interacting with a control.\n\nWhile it is certainly not an error to include the colon and capitalization in the accessible name, a computed name of \"First name\" should not be considered a failure of \"First Name:\".\n\nFirst Name:\n\nLikewise, \"Next…\" visibly shown on a button could have \"Next\" as the accessible name.\n\n. When in doubt, where a meaningful visible label exists, match the string exactly for the accessible name.\n\nMathematical expressions and formulae\n\nMathematical expressions are an exception to the previous subsection about symbolic characters. Math symbols can be used as labels; for example \"11×3=33\" and \"A>B\" convey meaning.\n\nA>B 11×3=33\n\nThe label should not be overwritten in the accessible name, and substitutions of words where a formula is used should be avoided since there are multiple ways to express the same equation. For example, making the name \"eleven multiplied by three is equivalent to thirty-three\" might mean a user who said \"eleven times three equals thirty-three\" may not match. It is best to leave the formulas as used in the label and count on the user's familiarity with their speech software to achieve a match. Further, converting a mathematical formula label into an accessible name that is a spelled-out equivalent may create issues for translation. The name should match the label's formula text. Note that a consideration for authors is to use the proper symbol in the formula. For instance 11x3 (with a lower or upper case letter X), 11*3 (with the asterisk symbol), and 11×3 (with the &times; symbol) are all easy for sighted users to interpret as meaning the same formula, but may not all be matched to \"11 times 3\" by the speech recognition software. The proper operator symbol (in this case the times symbol) should be used.\n\nAccessible Name and Description Computation specification\n\nIt is important to understand how the accessible name is derived. The Accessible Name and Description Computation 1.1 and the HTML Accessibility API Mappings 1.0 describe how the accessible name is computed, including which attributes are considered in its calculation, and in what order of preference. If a component has multiple possible attribute values that could be used for its accessible name, only the most preferred of those values will be computed. None of the other, less preferred values will be part of the name. For the most part, existing established programmatic relationships between labels and controls are reinforced by the specification.\n\nOther text displayed on the screen that is correctly coded to meet 1.3.1: Info and Relationships is not normally factored into the calculation for the accessible name of a UI component without author intervention (via ARIA labeling techniques). The most common of these are:\n\nheadings and instructions\n\ngroup labels for sets of components (i.e., used with legend/fieldset or with role of group or radiogroup)\n\nSuch textual information may constitute part of the component's description. So from both a programmatic viewpoint, and from the conservative tactic of only considering a label to be \"adjacent text,\" neither headings, instructions, nor group 'labels' should normally be considered labels for the purpose of this Success Criterion.\n\nIt is important to note that the specification allows authors to override the name calculated through native semantics. Both aria-label and aria-labelledby take precedence in the name calculation, overriding the visible text as the accessible name even when the visible text label is programmatically associated with the control. For this reason, when a visible label already exists, aria-label should be avoided or used carefully, and aria-labelledby should be used as a supplement with care.\n\nFinally, aria-describedby is not included in the Accessible Name computation (instead it is part of the Accessible Description computation). By convention, text associated with a control through aria-describedby is announced immediately after the accessible name by screen readers. Therefore, the context of headings, instructions, and group labels can be provided through the accessible description to assist users of screen readers without affecting the experience of those who navigate using speech recognition software.\n\nText in parentheses\n\nNote: The term \"parenthetical\" in this section is describing text that literally appears within a set of round brackets (). It is not used in the more abstract sense of \"information related to\".\n\nIt is important to mention parenthetical text in labels in the context of accessible name versus description. In common usage, text in parentheses is considered secondary but relevant to meaning. Users of speech recognition would not typically announce text in parentheses as part of the input name. For that reason, parenthetical text may be optionally considered a description and left out of the accessible name.\n\nHowever, where parenthetical information provides important context, such as indication of a required field or limitations on what is allowed for input, this information must be provided programmatically in some other way to the user if that information is not included as part of the accessible name. For example, \"Name (required)\" and \"Date (YYYY-MM-DD)\" could accept \"Name\" and \"Date\" as the accessible names. However, in order to pass 1.3.1 Info & Relationships, authors would need to programmatically surface both the required state and the limit on the allowed data formatting (in this example, eight integers fitting the YYYY-MM-DD pattern). The \"required\" state could be surfaced through the HTML required attribute or by using aria-required=\"true\". The allowed data formatting could be surfaced by being referenced using the aria-describedby) attribute."
    }
}