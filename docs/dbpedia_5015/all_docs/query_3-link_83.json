{
    "id": "dbpedia_5015_3",
    "rank": 83,
    "data": {
        "url": "https://all-things-andy-gavin.com/tag/silicon-graphics/",
        "read_more_link": "",
        "language": "en",
        "title": "Silicon Graphics :: All Things Andy Gavin",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://all-things-andy-gavin.com/wp-content/uploads/2012/01/TreeHeader31.jpg",
            "http://pixelvolt.com/wp-content/uploads/2013/09/crash_bandicoot1.jpg",
            "http://pixelvolt.com/wp-content/uploads/2013/09/crash-racing-image.jpg",
            "http://pixelvolt.com/wp-content/uploads/2013/09/jak-and-daxter-image.jpg",
            "http://pixelvolt.com/wp-content/uploads/2013/09/gsm_169_lastofus_vr_ps3_060413_80_640.jpg",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/fb_icon.png",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/twitter_icon.png",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/emailicon.png",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/rss_icon.gif",
            "https://all-things-andy-gavin.com/untimed/cover-small",
            "http://mascherato.com/wp-content/uploads/2011/02/crash_bandicoot1.jpg?w=300",
            "http://mascherato.com/wp-content/uploads/2011/02/evolvoray.jpg?w=241",
            "http://mascherato.com/wp-content/uploads/2011/02/crash1.jpg?w=300",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/fb_icon.png",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/twitter_icon.png",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/emailicon.png",
            "http://mascherato.com.s3.amazonaws.com/blog/misc/rss_icon.gif",
            "https://all-things-andy-gavin.com/untimed/cover-small",
            "http://mascherato.com/wp-content/uploads/2011/02/crashsketch3.gif?w=174"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://all-things-andy-gavin.com/wp-content/themes/BuilderChild-Kepler-agavin/images/favicon.ico",
        "meta_site_name": "All Things Andy Gavin",
        "canonical_link": "https://all-things-andy-gavin.com/tag/silicon-graphics/",
        "text": "Periodically I was asked by Pixelvolt to answer a few interview questions.\n\nCheck them out here for the latest in Indie Game News!\n\nI’m also posting the interview here for posterity:\n\nPixelvolt: Many enjoyed the Crash Bandicoot trilogy more than Super Mario 64 or DK64. How do you think the Crash Bandicoot franchise did against Nintendo’s heavy hitter platformers?\n\nAndy: Crash Bandicoot was in development during the same period as Mario 64. We started in 1994 and first saw our rival at E3 in May of 1996, only 3 months before we shipped. Basically that meant that Mario had no influence on us (although it was to later inform Jak & Daxter). Doing platforming in 3D was hard, and both games took different approaches. Our aim was to try and bring the Donkey Kong Country style gameplay into 3D as faithfully as possible. Mario went for more open puzzle solving and exploration (Miyamoto called it a garden or sandbox). I personally like ours better because it’s more straightforward to play with less thinking involved (more twitching). I don’t like my platform games to involve too much thinking – I do plenty of that at work.\n\nPixelvolt: Were there any N64, GCN, or Xbox games that you enjoyed playing?\n\nAndy: My favorite N64 games were Goldeneye, Zelda, and Banjo-Kazooie.\n\nPixelvolt: Do you have a personal favorite out of the Crash Bandicoot games?\n\nAndy: Crash 2. It’s better technically than Crash 1, has a bigger more flexible move set, and the play is very balanced. It’s hard but not brutal. Crash 3 is great too, but I think it relies a little too much on gimmick levels (jet skiing, flying, etc).\n\nPixelvolt: Naughty Dog has always been great at pushing the limits of hardware. Can you give us some details from the development of the Crash series and the Jak series and just how far things were pushed – and how they were pushed?\n\nAndy: Crash 1 was all about forging into the unknown. Everything was new. The gameplay was totally new. We had no model for how to do it in 3D, and it took 6 months of unplayable test levels before we developed some that were actually fun. On the technical side, the sheer volume of data was overwhelming for the computers of the time (1994-6). We had to do all the tool processing on big Silicon Graphics workstations. I actually had 8 gigs of memory in my desktop machine by fall 1996! Imagine that, the memory alone cost $75,000! With Jak, the seamless loading was hard. We had been heading in this direction with Crash, which featured a very sophisticated streaming system and extremely short load times (3-4 seconds!), but with Jak & Daxter, we had this early mandate to eliminate loading entirely. It was hard but very cool in a subtle way. Very few games do it even now.\n\nPixelvolt: Was it hard to leave Crash Bandicoot behind, and do you think there is a chance that Naughty Dog will save Crash from his most recent outings and produce another game?\n\nAndy: Naughty Dog doesn’t own all the rights to Crash; Activision owns most of them, so it’s difficult for that to happen just from a legal perspective. Still, a fan can always hope.\n\nPixelvolt: What were some of the immediate allowances that were enjoyed most when switching from Crash to Jak?\n\nAndy: No one would ever call the PS2 an “easy” machine to program for, but there were certain niceties compared to the PS1. Z buffering was a big one. On the PS1, you had to sort all your polygons and make sure they didn’t overlap. The PS1 really freaked out when polygons stretched off (or into the screen). Another more amorphous advantage was the huge step up in raw processing power, which made it possible to stop worrying about individual lines of logic (as much).\n\nPixelvolt: How did it feel among your video game peers when CTR: Crash Team Racing was being developed? With Mario Kart 64 having thought up the kart racer genre, was it awkward? Many gamers enjoyed CTR much more than MK64; how did this reaction make everyone feel after it was released?\n\nAndy: Obviously, CTR owes a big debt to Mario Kart, even if the graphics are better looking and more detailed – but I also think – and this is one of the game’s big triumphs, that the handling and gameplay we achieved was really first rate. The combination of steering, power sliding, powerups, and the like was really very, very fun (not that Mario Kart 64 and Diddy Kong Racing weren’t too).\n\nPixelvolt: What do you and ND think of the current state of Crash Bandicoot. Since Crash Bandicoot: The Wrath of Cortex, almost all the fans agree that the quality has skydived; what do you and the original development team think of the situation?\n\nAndy: I try not to look at anything Crash related after Crash Bash. It’s all kind of sad because even the basic art design isn’t “correct” with the standards of the Crash character.\n\nPixelvolt: Did you learn anything from video game development that is assisting with your writing at all?\n\nAndy: As a serial creator (having made over a dozen major video games), it was interesting how similar the process was to any other complex creative project. Video games and novel writing are both very iterative and detail oriented. They use a lot of the same mental muscles.\n\nPixelvolt: What do you plan on doing next? Do you plan to do anything in addition to writing?\n\nAndy: I just finished up adapting Untimed (my time travel novel) as a screenplay. And I’ve got three different new novels in the works. The one I’m working on at the moment is background notes for an epic fantasy series. I’m trying to create an entire extremely detailed world so that’s a lot of fun.\n\nPixelvolt: Do you ever think you’d consider returning to game development?\n\nAndy: I might someday. I have a cool dungeon crawler idea I’ve wanted to do for years. But right now, I still get to build worlds, characters, and general IP. I can do it faster and without as much stress. I miss the sheer exposure the games got as the whole business is on a much bigger scale than publishing. I’m immensely proud of all my games, but I also think Untimed is as good a novel as my favorite, Crash 2 is a game. Hint, hint. Nudge, nudge. Wink, wink. Buy, read.\n\nPixelvolt: What were your thoughts on Jason Rubin and THQ? I know a lot of ND/THQ fans thought he did a great job, despite everything working out the way that it did.\n\nAndy: Jason had a real uphill battle there and very little time to fight it. He’s one of the most talented people I know, so I have to imagine that he did as good a job as humanly possible.\n\nPixelvolt: Tell us about your books. You’ve been a huge reader for quite some time. When did you decide you were going to leave the gaming industry and pursue writing full time?\n\nAndy: I’m a lifelong creator and explorer of worlds. As far back as first grade, I remember spending most of the school day in one day dream or another. I had a huge notebook stuffed with drawings, story bits, and concepts for an elaborate Sci-Fi/Fantasy world I cobbled together from bits of Star Wars, Narnia, and Battlestar Galactica. By fourth or fifth grade, not only was I losing myself in every fantasy or Sci-Fi novel I could, but I was building Dungeons & Dragons castles and caverns on paper. Then from 1980 on the computer. Over the following decades, I wrote dozens of stories and created and published over a dozen video games all set in alternative universes. And as an avid reader (over 10,000 novels and who knows how many non-fiction volumes), it was no surprise that I eventually decided to write some books of my own.\n\nPixelvolt: Would you ever consider having any movies or games made based off your books? If so, would you oversee any of the development?\n\nAndy: Uh, big yes. As I mentioned, I just finished adapting Untimed into a screenplay. That was a lot of fun and took far longer than I thought, including at least six major drafts. Untimed is a focused story of about the right scope for the big screen, and it’s fairly short (75,000 words), but I still had to cut at least a quarter out of the novel and learn to adapt the story telling to the new strictly audio-visual medium. Now I just need to figure out how to sell it and get it produced. Haha. Film, unlike novels, is a very collaborative medium.\n\nPixelvolt: What are you currently playing?\n\nAndy: I’m still playing a bit of WoW. I have on and off since launch and used to be a serious raider in the Vanilla, BC, and Lich King eras. I played The Last of Us when it came out from start to finish and that was hands down the best story-based game I’ve ever played. Really, really emotional and intense. My two games of the moment are really different: the new Mickey Mouse Castle of Illusion with my five year-old (I loved the Genesis original) and Bioshock Infinite. That’s an awesome game too. The control and character isn’t quite as good as TLOU, but it’s really engaging, and I’m totally drawn in by the 1912 alternate America and its in-depth and surprisingly accurate depiction. Speaking of 1912, my first novel, The Darkening Dream, is a fantasy set in 1913, so if any of you are curious, think Bioshock Infinite, minus the floating city and plus a 900-year-old vampire, crazy Egyptian gods, and some nasty succubus on preacher action.\n\nThis interview was originally posted here.\n\nFor more game articles, click here.\n\nsharethis_button(); ?>\n\nPREVIOUS installment, or the FIRST POST.\n\nWhile all this art design was going on, I, and then in January 1995, Dave, struggled to build an engine and tool pipeline that would make it possible to render these grandiose cartoon worlds we had envisioned on paper. Since during fall of 1994 Jason was also the only artist, he frantically generated all the source material and banged on my head to make sure it would look incredible.\n\nOur motto was “bite off more than we could chew, then figure out some crazy complicated way to make it work.”\n\nThe Playstation had this oddball 512×240 video mode that everyone else ignored, it wasn’t standard (320×240) and ate up video memory others wanted for textures. But it looked SHARP and we found the machine was really good at rendering shaded, but un-textured, triangles. In fact, just as fast in the 512 mode as 320. Jason pointed out — he’s always been the master of seeing the intersection between art and tech — that since polygons on 3D characters our size were just a few pixels, shaded characters actually looked better than textured ones. So we went with more polys on the characters, less texture. This was a highly usual approach, but had lots of advantages. The characters popped, like cartoons are supposed to, we had lots more polygons to work with, and it worked around the Playstation’s lack of texture correction or polygon clipping.\n\nSince the soul of good Animation, is…. drum roll please… animation! We were obsessed with making ours look like that really good Disney or Looney Tunes stuff. In those days, most people used a simple skeleton system with “1 joint” weighting, and very few bones. This gives a very stiff look, so we went instead with vertex animation. This allowed us to use the more sophisticated 3-4 joint weighting available in PowerAnimator, which the Playstation had no hope of matching at runtime (until the PS2), instead we stored the location of every vertex, every frame at 30 frames a second. No one else had the guts, as while this was easy to render, it required inventing some totally hardcore assembly language vertex compressors. First me (three times), then Dave (twice), then finally Mark took a crack at it. Mark’s was the best — being the best assembly programmer of us three — but also the most complicated.\n\nComplexity became the name of the game at Naughty Dog.\n\nWe also wanted vast and detailed worlds. Dave, Jason, and I had done a bunch of research “post Doom” on visibility calculation. And Dave and I were convinced that extensive pre-calculation of visibility could allow the renderer to handle A LOT more polygons. So we did experiments in free roaming camera control and settled on branching rail camera + pre-calculation = gorgeous visuals.\n\nThe idea was that the camera would follow along next to, behind, or in front of the character, generally looking at him, moving on a “track” through the world. Dave and I experimented with pre-calculating the visibility and sort (the Playstation had no z-buffer, and hence no easy way to sort polygons) ahead of time on the SGI workstations the artists used. Although painful and expensive, this worked really well. As long as you could never SEE more than a set number of polygons (800 for Crash 1, 1300 for Crash 2 or 3) from any given position we could have perfect occlusion and sort, with no runtime cost. We conceived of using trees, cliffs, walls, and twists and turns in the environment to hide a lot of the landscape from view – but it would be there, just around the corner.\n\nSo we decided to use an entirely SGI and IRIX based tool pipeline. In fact the game itself even ran on the SGI (with terrible keyboard control). This meant buying programmers $100,000 SGIs instead of $3,000 PCs. Gulp again. No one else did this. No one. And at the time, when a 50mhz Pentium with 8-32 megs of RAM was typical, our 250mhz 64 bit SGIs with 256 or 512 megs of RAM opened up totally different computational possibilities. By 1997 I had 4 gigs of ram in my machine! Of course some of those computational possibilities were so brutal that I had to code tools to distribute the calculations out to the video hardware, and chop it up onto all the office machines, where processing could be done in parallel 24 hours a day. Levels often took several hours to process on our 5-8 machine farm!\n\nI also concocted a crazy algorithmic texture packer that would deal with the fact that our gorgeous 512×240 mode left us with too little texture memory. And the even crazier – way crazier – virtual memory system required to shoehorn the 8-16 meg levels the artists created into the Playstation’s little 2megs of RAM. Dave meanwhile had to invent insane bidirectional 10x compressors to help get the 128meg levels down into 12, and figure out some tool for managing the construction of our gigantic 3D worlds.\n\nOur levels were so big, that our first test level, which never shipped and was creatively named “level1” or “the jungle,” couldn’t be loaded into Alias PowerAnimator even on a machine with 256megs. In fact, it had to be cut up into 16 chunks, and even then each chunk took 10 minutes to load!\n\nSo Dave created a level design tool where component parts were entered into a text file, and then a series of 10-15 Photoshop layers indicated how the parts were combined. The tool, known as the DLE, would build each chunk of the level and save it out. Artists tweaked their photoshop and text files, ran the tool, then loaded up chunks to look for errors. Or they might let the errors pass through the 8 hour level processing tool, there to possibly pick up or interact with new (or old) programmer bugs. If one was lucky, the result wouldn’t crash the Playstation.\n\nBut the craziest thing I did was create a new programming language – with Lisp syntax – for coding all of the gameplay. It had all sorts of built in state machine support (very useful with game objects), powerful macros, dynamic loading etc. It was also highly irregular and idiosyncratic, and in true Naughty Dog fashion “powerful but complicated.”\n\nJason says:\n\nThe secret to Crash’s success was its Art. And the secret to its Art was its Programming. [ Andy NOTE: well, and the F-word ]\n\nAndy and Dave broke a lot of rules. First and foremost, they didn’t follow PlayStation’s library restrictions. Other developers often complained that Crash was using some sort of secret Sony library. That is the exact opposite of the truth. The truth is that Crash used as little as it could of Sony’s library and the programmers basically hacked everything right to the hardware.\n\nYears later Sony tried to create a game called Harry Jalapeño to compete with Crash. No, I am not making that up. Besides the name fail, the internal team in San Francisco also utterly failed to create the complex worlds and characters that we created in Crash. Let me repeat – an internal Sony team couldn’t create Crash. Let the rumors of “insider information” forever rest.\n\nHitting the hardware directly was against the rules. But by the time Sony saw the results they needed a Mario killer. It was too late for them to complain.\n\nIt is easy to underestimate the value of the pre-occlusion and vertex animation hacks. But let me tell you, this was everything.\n\nThe occlusion meant more polygons in the background, and more polygons meant we could do the levels. Without it we NEVER could have made the world look as good as it did.\n\nOur occlusion worked on a texture level. That is, if we had a giant polygon with a fern texture on it (think many leaves but lots of empty space) the occlusion could actually get rid of polygons behind the leaf part of the texture but leave the polygons seen through the alpha channel holes. No other game had that kind of detail in occlusion, and it paid off immensely. Given how small ground polygons could be in the distance, a little fern action went a long way.\n\nWe were up against the polygon draw limit at every twist and turn in the game. We wanted to have as much distance and detail visible as possible, but the minute we went over that limit the game started getting “hitchy.” We’d build a level over night (really 4am-11am, the only times the office was ever empty) and come in to see the results. Wherever we had too many polygons we’d add some leaves or whatever to occlude some distance. Wherever there were more polygons available to draw we’d pull leaves out.\n\nAnd remember, more foreground (boxes, enemies, platforms) meant we had to have less background. So just when you had a level perfectly balanced, someone (usually me or Mark) would determine that the level was too hard or easy and we’d have to add a platform or enemy and the level builder (usually Bob Rafei or Taylor Kurosaki) would have to start balancing the background poly count over again. It was so cruel.\n\nWe couldn’t see the result of any change for at least 12 hours, so if we made a mistake we’d make a tweak and then we’d have to repeat the process. No level was “done” till the game shipped.\n\nCrash was 512 polygons in the first game, with textures only for his spots and his shoelaces, and his model didn’t change much through the 3 platform titles. It took me a month to settle on the perfect 512. As Andy said, we went with non-textured polygons instead of textured ones on most of the characters. Instead of texture, we used corner colors to create the textures that seemed to be there.\n\nThere were many advantages to this strategy. The simplest was that we got more polygons. But we also solved a texture stretching and warping issue inherent in the PlayStation’s renderer that tended to make textures look terrible. Since you spent most of your time looking at the character, and he could get quite close to the camera, avoiding texture mess meant a lot for visual quality.\n\nAnd there was another important issue solved by using polygons instead of textures. The PlayStation tended to render every polygon as a pixel, no matter how small it got. Had Crash’s pupils been texture, they might have disappeared when the got smaller than a pixel. But by making the pupil 2 polygons (a quad), they almost always showed up as long as the total eye, including whites, was more than a few pixels tall. Subtle, but trust me, it made the game so much more clean looking. It’s the small things that matter.\n\nThe most important advantage of our character system was vertex animation. I cannot imagine the torture that other game developers went through trying to bend the low polygon arms and legs of their characters using nothing but bone weighting! When the bones failed for us, and they often did in a character with <1000 polygons, we just grabbed vertices and yanked them around until things were fixed. This is why Crash doesn’t bend and fall apart when animating. It meant more mobility and stretchability.\n\nIn some of the most stretched or bent poses, we just pulled vertices by hand and forgot the bones altogether, which brought us two additional abilities that nobody else had. [ Andy NOTE: this allowed the same animation techniques then at use at Pixar into our little effort ]\n\nThe first is that the characters in Crash had different facial expressions on every single frame. Forget bones. I just pulled the vertices until I had what I wanted. It doesn’t sound like a big distinction, but I could go from a huge smile full of teeth to a whistle mouth that was toothless or no mouth at all just by collapsing vertices on top of each other to make zero volume polygons. Thus Crash had a more expressive face than any other character had ever had before, and this created emotion that gamers hadn’t felt before.\n\nIt was that opening sequence, when Crash pulls his flat face out of the sand, shakes it off, looks confused, leaps up, looks at the camera and does his great big goofy smile that SOLD Crash as a character. No 2d game could afford the art, and no other 3d game had the facial animation that our vertex system brought. And thus the main character transformed from emotionless “vehicles” to an emotive friend.\n\nBefore Crash characters had no emotion (Pacman, and even Mario), or one dimensional emotions (Sonic was “fast”). Crash had facial emotions that let him speak to you and gave him personal range. Crash wasn’t any one emotion. Crash was Crash. For example, you could see Crash acting like a mime. Sonic and Mario weren’t capable expressing even a mimes range of emotion until after Crash came out. “Itsa me, Mario” just doesn’t cut it, especially when Mario’s face didn’t even animate as he said it!!\n\nOf course it wouldn’t be until much later that the game industry got fully 3 dimensional characters, like Daxter, who had full personalities, and could go beyond mime and do, for example, a scene from Shakespeare, but in their very own way. But that’s a story for another time. [ Andy NOTE: and when we got there we had to build a special “face engine” and “eye engine” to do it ]\n\nThe second thing that vertex animation allowed is total warping of the character beyond bones. If I wanted Crash to become a balloon, I just animated a keyframe of him wrapped around a sphere (shoes and face usually un-stretched!) and the game tweened to it. If I wanted to smash him flat into his shoes I just folded his legs and body up into his face and cleaned up the resulting frames as it went. The animators were free to do anything, and we did. Again, helped endear Crash as a character.\n\nThat made Crash’s characters feel more like the Loony Toons than the stiff 3d bone creatures of the day. I still have a signed copy of Disney’s “The Illusion of Life,” by Frank Thomas and Ollie Johnson, two of the greatest animators of all time. It’s dog-eared and beat up. Bob, Taylor and I read it, absorbed it, and tried to live it.\n\nAgain, all this was only possible thanks to some incredibly crafty programming from Andy, Dave, and Mark.\n\nCONTINUED HERE WITH PART 4 or\n\nsharethis_button(); ?>"
    }
}