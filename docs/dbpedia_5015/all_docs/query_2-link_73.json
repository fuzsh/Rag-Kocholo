{
    "id": "dbpedia_5015_2",
    "rank": 73,
    "data": {
        "url": "https://www-f9.ijs.si/~matevz/docs/007-2392-003/sgi_html/ch01.html",
        "read_more_link": "",
        "language": "en",
        "title": "Chapter 1. OpenGL on Silicon Graphics Systems",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www-f9.ijs.si/~matevz/docs/007-2392-003/sgi_html/figures/note.png",
            "https://www-f9.ijs.si/~matevz/docs/007-2392-003/sgi_html/figures/01.layers.gif",
            "https://www-f9.ijs.si/~matevz/docs/007-2392-003/sgi_html/figures/note.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Libraries, Tools, Toolkits, and Widget Sets\n\nWhen you prepare a program to run with the X Window System, you can choose the level of complexity and control that suits you best, depending on how much time you have and how much control you need.\n\nThis section describes different tools and libraries for working with OpenGL in an X Window System environment. It starts with easy-to-use toolkits and libraries with less control and then describes the Xlib library, which is more primitive but offers more control. Most application developers usually write at a higher level than Xlib, but you may find it helpful to understand the basic facts about the lower levels of the X Window System that are discussed in this guide.\n\nNote that the different tools are not mutually exclusive: You may design most of the interface with one of the higher-level tools, then use Xlib to fine-tune a specific aspect or add something that is otherwise unavailable. Figure 1-1 illustrates the layering:\n\nIRIS ViewKit (only supported on IRIX systems) and Open Inventor are layered on top of IRIS IM, which is on top of Xlib.\n\nGLX links Xlib and OpenGL.\n\nOpen Inventor uses GLX and OpenGL.\n\nFigure 1-1. How X, OpenGL, and Toolkits Are Layered\n\nNote: If you write an application on IRIX using IRIS Viewkit or Open Inventor, the graphical user interface will be visually consistent with the IRIX Interactive Desktop.\n\nOpen Inventor\n\nThe Open Inventor library uses an object-oriented approach to make the creation of interactive 3D graphics applications as easy as possible by letting you use its high-level rendering primitives in a scene graph. It is a useful tool for bypassing the complexity of X and widget sets, as well as many of the complex details of OpenGL.\n\nOpen Inventor provides prepackaged tools for viewing, manipulating, and animating 3D objects. It also provides widgets for easy interaction with X and Xt, and a full event-handling system.\n\nIn most cases, you use Open Inventor, not the lower-level OpenGL library, for rendering from Open Inventor. However, the Open Inventor library provides several widgets for use with X and OpenGL (in subclasses of the SoXtGLWidget class) that you can use if OpenGL rendering is desired. For instance, the SoXtRenderArea widget and its viewer subclasses can all perform OpenGL rendering. SoXtGLWidget is, in turn, a subclass of SoXtComponent, the general Open Inventor class for widgets that perform 3D editing.\n\nComponents provide functions to show and hide the associated widgets, set various parameters (such as title and size of the windows), and use callbacks to send data to the calling application. The viewer components based on SoXtRenderArea handle many subsidiary tasks related to viewing 3D objects. Other components handle anything from editing materials and lights in a 3D scene, to copying and pasting 3D objects.\n\nNote that if you are using libInventorXt, you need only link with libInventorXt (it automatically “exports” all of the routines in libInventor, so you never need to use -lInventorXt -lInventor, you need only -lInventorXt).\n\nFor detailed information on Open Inventor, see The Inventor Mentor: Programming Object-Oriented 3D Graphics with Open Inventor, Release 2, published by Addison-Wesley and available online through IRIS InSight.\n\nIRIS ViewKit\n\nThe IRIS ViewKit library is a C++ application framework designed to simplify the task of developing applications based on the IRIS IM widget set. The ViewKit framework promotes consistency by providing a common architecture for applications and improves programmer productivity by providing high-level, and in many cases automatic, support for commonly needed operations.\n\nWhen you use Viewkit in conjunction with OpenGL, it provides drawing areas that OpenGL can render to.\n\nFor more information, see the IRIS ViewKit Programmer's Guide, available online through IRIS InSight.\n\nIRIS IM Widget Set\n\nThe IRIS IM widget set is an implementation of OSF/Motif provided by Silicon Graphics. You are strongly encouraged to use IRIS IM when writing software for Silicon Graphics systems. IRIS IM integrates your application with the desktop's interface. If you use it, your application conforms to a consistent look and feel for Silicon Graphics applications. See the sources listed in “Background Reading” for further details.\n\nXlib Library\n\nThe X library, Xlib, provides function calls at a lower level than most application developers want to use. Note that while Xlib offers the greatest amount of control, it also requires that you attend to many details you could otherwise ignore. If you do decide to use Xlib, you are responsible for maintaining the Silicon Graphics user interface standards.\n\nPorting Applications between IRIX and Linux\n\nNot all of the toolkits just described are available on all Silicon Graphics platforms and if you are targeting both IRIX and Linux, you should be aware of the differences. IRIS ViewKit is only supported on IRIX systems, but Integrated Computer Solutions Incorporated (ICS) makes a commercial version of ViewKit for Linux and other platforms. The IRIS IM widget set includes widgets specific to SGI and supported only on IRIX. However, the OSF/Motif implementation on Linux supports most of the same functionality.\n\nIn addition to the toolkits and widget sets described earlier, similar GUI functionality is available from open source packages such as the Gnome Toolkit (GTK), Qt from Trolltech, and many others. SGI provides industry-standard versions of some of these packages with SGI Linux systems, and some are also available prebuilt for IRIX through the IRIX Freeware site, http://freeware.sgi.com/. Although SGI does not recommend any specific alternative, you may find these toolkits useful."
    }
}