{
    "id": "dbpedia_4481_0",
    "rank": 74,
    "data": {
        "url": "https://github.com/BKnights/netsuite-types/blob/master/SuiteScriptV1.d.ts",
        "read_more_link": "",
        "language": "en",
        "title": "netsuite-types/SuiteScriptV1.d.ts at master Â· BKnights/netsuite-types",
        "top_image": "https://opengraph.githubassets.com/99fca5f2480eecfc3d2bc747efccb941b36921f33602fe974022f2467246c42f/BKnights/netsuite-types",
        "meta_img": "https://opengraph.githubassets.com/99fca5f2480eecfc3d2bc747efccb941b36921f33602fe974022f2467246c42f/BKnights/netsuite-types",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Contribute to BKnights/netsuite-types development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/BKnights/netsuite-types/blob/master/SuiteScriptV1.d.ts",
        "text": "/** UI Object page type used to build multi-step \"assistant\" pages to simplify complex workflows. All data and state for an assistant is tracked automatically throughout the user's session up until completion of the assistant. */\n\ninterface NLObjAssistant {\n\n/**\n\n* Add a field to this page and return it.\n\n* @param {string} name field name\n\n* @param {string} type field type\n\n* @param {string} label field label\n\n* @param {number|string} source script ID or internal ID for source list (select and multiselects only) -or- radio value for radio fields\n\n* @param {string} group group name that this field will live on. If empty then the field is added to the main section of the page\n\n*/\n\naddField(name: string, type: string, label?: string, source?: number|string, group?: string): NLObjField;\n\n/**\n\n* Add a field group to the page.\n\n* @param {string} name field group name\n\n* @param {string} label field group label\n\n*/\n\naddFieldGroup(name: string, label: string): NLObjFieldGroup;\n\n/**\n\n* Add a step to the assistant.\n\n* @param {string} name the name of the step\n\n* @param {string} label label used for this step\n\n*/\n\naddStep(name: string, label: string): NLObjAssistantStep;\n\n/**\n\n* Add a sublist to this page and return it. For now only sublists of type inlineeditor are supported\n\n* @param {string} name sublist name\n\n* @param {string} type sublist type (inlineeditor only for now)\n\n* @param {string} label sublist label\n\n*/\n\naddSubList(name: string, type: string, label: string): NLObjSubList;\n\n/**\n\n* Return an array of the names of all field groups on this page.\n\n*/\n\ngetAllFieldGroups(): string[];\n\n/**\n\n* Return an array of the names of all fields on this page.\n\n*/\n\ngetAllFields(): string[];\n\n/**\n\n* Return an array of all the assistant steps for this assistant.\n\n*/\n\ngetAllSteps(): NLObjAssistantStep[];\n\n/**\n\n* Return an array of the names of all sublists on this page .\n\n*/\n\ngetAllSubLists(): string[];\n\n/**\n\n* Return current step set via nlobjAssistant.setCurrentStep(step)\n\n*/\n\ngetCurrentStep(): NLObjAssistantStep;\n\n/**\n\n* Return a field on this page.\n\n* @param {string} name field name\n\n*/\n\ngetField(name: string): NLObjField;\n\n/**\n\n* Return a field group on this page.\n\n* @param {string} name field group name\n\n*/\n\ngetFieldGroup(name: string): NLObjFieldGroup;\n\n/**\n\n* Return the last submitted action by the user: next|back|cancel|finish|jump\n\n*/\n\ngetLastAction(): string;\n\n/**\n\n* Return step from which the last submitted action came from\n\n*/\n\ngetLastStep(): NLObjAssistantStep;\n\n/**\n\n* Return the next logical step corresponding to the user's last submitted action. You should only call this after\n\n* you have successfully captured all the information from the last step and are ready to move on to the next step. You\n\n* would use the return value to set the current step prior to continuing.\n\n*/\n\ngetNextStep(): NLObjAssistantStep;\n\n/**\n\n* Return an assistant step on this page.\n\n* @param {string} name step name\n\n*/\n\ngetStep(name: string): NLObjAssistantStep;\n\n/**\n\n* Return the total number of steps in the assistant.\n\n*/\n\ngetStepCount(): number;\n\n/**\n\n* Return a sublist on this page.\n\n* @param {string} name sublist name\n\n*/\n\ngetSubList(name: string): NLObjSubList;\n\n/**\n\n* Return true if the assistant has an error message to display for the current step.\n\n*/\n\nhasError(): boolean;\n\n/**\n\n* Return true if all the steps have been completed.\n\n*/\n\nisFinished(): boolean;\n\n/**\n\n* Redirect the user following a user submit operation. Use this to automatically redirect the user to the next logical step.\n\n* @param {NLObjResponse} response The response object used to communicate back to the user's client\n\n*/\n\nsendRedirect(response: NLObjResponse): void;\n\n/**\n\n* Mark a step as current. It will be highlighted accordingly when the page is displayed\n\n* @param {NLObjAssistantStep} step Assistant step object representing the current step that the user is on.\n\n*/\n\nsetCurrentStep(step: NLObjAssistantStep): void;\n\n/**\n\n* Set the error message for the current step.\n\n* @param {string} html Error message (rich text) to display on the page to the user.\n\n*/\n\nsetError(html: string): void;\n\n/**\n\n* Set the values for all the fields on this page.\n\n* @param {Object} values Object of field name/value pairs used to set all fields on page.\n\n*/\n\nsetFieldValues(values: Object): void;\n\n/**\n\n* Mark assistant page as completed and optionally set the rich text to display on completed page.\n\n* @param {string} html Completion message (rich text) to display on the \"Finish\" page.\n\n*/\n\nsetFinished(html: string): void;\n\n/**\n\n* If numbered, step numbers are displayed next to the step's label in the navigation area.\n\n* @param {boolean} numbered If true (default assistant behavior) step numbers will be displayed next to the step label.\n\n*/\n\nsetNumbered(numbered: boolean): void;\n\n/**\n\n* If ordered, steps are show on left and must be completed sequentially, otherwise steps are shown on top and can be done in any order\n\n* @param {boolean} ordered If true (default assistant behavior) then a navigation order thru the steps/pages will be imposed on the user. Otherwise the user will be allowed to navigate across steps/pages in any order they choose.\n\n*/\n\nsetOrdered(ordered: boolean): void;\n\n/**\n\n* Set the script ID for Client Script used for this form.\n\n* @param {string|number} script Script ID or internal ID for global client script used to enable Client SuiteScript on page.\n\n*/\n\nsetScript(script: string|number): void;\n\n/**\n\n* Show/hide shortcut link. Always hidden on external pages.\n\n* @param {boolean} show Enable/disable \"Add To Shortcut\" link on this page.\n\n*/\n\nsetShortcut(show: boolean): void;\n\n/**\n\n* Set the splash screen used for this page.\n\n* @param {string} title splash portlet title\n\n* @param {string} text1 splash portlet content (left side)\n\n* @param {string} text2 splash portlet content (right side)\n\n*/\n\nsetSplash(title: string, text1: string, text2?: string): void;\n\n/**\n\n* Set the page title.\n\n* @param {string} title\n\n*/\n\nsetTitle(title: string): void;\n\n}\n\n/** Assistant Step Definition. Used to define individual steps/pages in multi-step workflows. */\n\ninterface NLObjAssistantStep {\n\n/**\n\n* Return an array of the names of all fields entered by the user during this step.\n\n*/\n\ngetAllFields(): string[];\n\n/**\n\n* Return an array of the names of all sublist fields entered by the user during this step\n\n* @param {string} group sublist name\n\n*/\n\ngetAllLineItemFields(group: string): string[];\n\n/**\n\n* Return an array of the names of all sublists entered by the user during this step.\n\n*/\n\ngetAllLineItems(): string[];\n\n/**\n\n* Return the value of a field entered by the user during this step.\n\n* @param {string} name field name\n\n*/\n\ngetFieldValue(name: string): string;\n\n/**\n\n* Return the selected values of a multi-select field as an Array entered by the user during this step.\n\n* @param {string} name multi-select field name\n\n*/\n\ngetFieldValues(name: string): string[];\n\n/**\n\n* Return the number of lines previously entered by the user in this step (or -1 if the sublist does not exist).\n\n* @param {string} group sublist name\n\n*/\n\ngetLineItemCount(group: string): number;\n\n/**\n\n* Return the value of a sublist field entered by the user during this step.\n\n* @param {string} group sublist name\n\n* @param {string} name sublist field name\n\n* @param {number} line sublist (1-based)\n\n*/\n\ngetLineItemValue(group: string, name: string, line: number): string;\n\n/**\n\n* Return the index of this step in the assistant page (1-based).\n\n*/\n\ngetStepNumber(): number;\n\n/**\n\n* Set helper text for this assistant step.\n\n* @param {string} help inline help text to display on assistant page for this step\n\n*/\n\nsetHelpText(help: string): NLObjAssistantStep\n\n/**\n\n* Set the label for this assistant step.\n\n* @param {string} label display label used for this assistant step\n\n*/\n\nsetLabel(label: string): void;\n\n}\n\n/** Buttons used for triggering custom behaviors on pages. */\n\ninterface NLObjButton {\n\n/**\n\n* Disable or enable button.\n\n* @param {boolean} disabled If true then this button should be disabled on the page.\n\n*/\n\nsetDisabled(disabled: boolean): NLObjButton;\n\n/**\n\n* Set the label for this button.\n\n* @param {string} label display label for button\n\n*/\n\nsetLabel(label: string): NLObjButton;\n\n/**\n\n* Sets the button as hidden in the UI. This API is supported on custom buttons and on some standard NetSuite buttons\n\n* @param {boolean} visible Defaults to true if not set. If set to false, the button will be hidden in the UI.\n\n*/\n\nsetVisible(visible: boolean): NLObjButton;\n\n}\n\ninterface NLObjCache {\n\nget(key: string): string;\n\n/**\n\n* @param {string} key\n\n* @param {string} value\n\n* @param {number} ttl, time to live in seconds.\n\n*/\n\nput(key: string, value: string, ttl: number): Object;\n\nremove(key: string): Object;\n\n}\n\n/** For columns used on scriptable lists and list portlets. */\n\ninterface NLObjColumn {\n\n/**\n\n* Add a URL parameter (optionally defined per row) to this column's URL.\n\n*\n\n* @param {string} param the name of a parameter to add to URL\n\n* @param {string} value the value of the parameter to add to URL -or- a column in the datasource that returns the parameter value for each row\n\n* @param {boolean} perRow if true then the 2nd arg is expected to be a column in the datasource\n\n*/\n\naddParamToURL(param: string, value: string, perRow?: boolean): void;\n\n/**\n\n* Set the header name for this column.\n\n*\n\n* @param {string} label The label for this column.\n\n*/\n\nsetLabel(label: string): void;\n\n/**\n\n* Set the base URL (optionally defined per row) for this column.\n\n*\n\n* @param {string} value the base URL or a column in the datasource that returns the base URL for each row\n\n* @param {boolean} perRow if true then the 1st arg is expected to be a column in the datasource\n\n*/\n\nsetURL(value: string, perRow?: boolean): void;\n\n}\n\n/** For interacting with setup/configuration pages. */\n\ninterface NLObjConfiguration {\n\n/**\n\n* Return an Array of all field names on the record.\n\n*/\n\ngetAllFields(): string[];\n\n/**\n\n* Return the type corresponding to this setup record.\n\n*/\n\ngetType(): string;\n\n/**\n\n* Return field metadata for field.\n\n*\n\n* @param {string} fldnam field name\n\n*/\n\ngetField(fldnam: string): NLObjField;\n\n/**\n\n* Return the text value of a field.\n\n* @restriction only supported for select fields\n\n*\n\n* @param {string} name field name\n\n*/\n\ngetFieldText(name: string): string;\n\n/**\n\n* Return the selected text values of a multi-select field as an Array.\n\n* @param {string} name field name\n\n*/\n\ngetFieldTexts(name: string): string[];\n\n/**\n\n* Return the value of a field.\n\n*\n\n* @param {string} name field name\n\n*/\n\ngetFieldValue(name: string): string;\n\n/**\n\n* Return the selected values of a multi-select field as an Array.\n\n* @restriction only supported for multi-select fields\n\n*\n\n* @param {string} name field name\n\n*/\n\ngetFieldValues(name: string): string[];\n\n/**\n\n* Set the value of a field.\n\n*\n\n* @param {string} name field name\n\n* @param {string} value field value\n\n*/\n\nsetFieldValue(name: string, value: string): void;\n\n/**\n\n* Set the values of a multi-select field.\n\n* @restriction only supported for multi-select fields\n\n*\n\n* @param {string} name field name\n\n* @param {string[]} values field values\n\n*/\n\nsetFieldValues(name: string, values: string[]): void;\n\n/**\n\n* Set the value (via display value) of a field.\n\n* @restriction only supported for select fields\n\n*\n\n* @param {string} name field name\n\n* @param {string} text field display text\n\n*/\n\nsetFieldText(name: string, text: string): void;\n\n/**\n\n* Set the values (via display values) of a multi-select field.\n\n* @restriction only supported for multi-select fields\n\n*\n\n* @param {string} name Field name.\n\n* @param {string[]} texts Array of field display text values.\n\n*/\n\nsetFieldTexts(name: string, texts: string[]): void;\n\n}\n\n/** Utility class providing information about the current user and the script runtime. */\n\ninterface NLObjContext {\n\n/**\n\n* Return the account ID of the current user.\n\n*/\n\ngetCompany(): string;\n\n/**\n\n* Return the deployment ID for the current script.\n\n*/\n\ngetDeploymentId(): string;\n\n/**\n\n* Return the internalId of the current user's department.\n\n*/\n\ngetDepartment(): number;\n\n/**\n\n* Return the email address of the current user.\n\n*/\n\ngetEmail(): string;\n\n/**\n\n* Return the environment that the script is executing in: SANDBOX, PRODUCTION, BETA, INTERNAL.\n\n*/\n\ngetEnvironment(): string;\n\n/**\n\n* Return the execution context for this script: webServices|csvImport|client|userInterface|scheduledScript|portlet|suitelet|debugger|custommassupdate\n\n*/\n\ngetExecutionContext(): string;\n\n/**\n\n* Return true if feature is enabled, false otherwise.\n\n* @param {string} name\n\n*/\n\ngetFeature(name: string): boolean;\n\n/**\n\n* Return the internalId of the current user's location.\n\n*/\n\ngetLocation(): number;\n\n/**\n\n* Return the logging level for the current script execution. Not supported in CLIENT scripts.\n\n*/\n\ngetLogLevel(): string;\n\n/**\n\n* Return the name of the current user.\n\n*/\n\ngetName(): string;\n\n/**\n\n* Return the % complete specified for the current scheduled script execution.\n\n*/\n\ngetPercentComplete(): number;\n\n/**\n\n* Return current user's permission level (0-4) for this permission.\n\n* @param {string} name\n\n*/\n\ngetPermission(name: string): number;\n\n/**\n\n* Return system or script preference selection for current user.\n\n* @param {string} name\n\n*/\n\ngetPreference(name: string): string;\n\n/**\n\n* Returns the number of scheduled script queues in a given account.\n\n*/\n\ngetQueueCount(): number;\n\n/**\n\n* Return the amount of usage units remaining for this script.\n\n*/\n\ngetRemainingUsage(): number;\n\n/**\n\n* Return the internalId of the current user's role.\n\n*/\n\ngetRole(): string;\n\n/**\n\n* Return the internalId of the current user's center type.\n\n*/\n\ngetRoleCenter(): string;\n\n/**\n\n* Return the script ID of the current user's role.\n\n*/\n\ngetRoleId(): string;\n\n/**\n\n* Return the script ID for the current script.\n\n*/\n\ngetScriptId(): string;\n\n/**\n\n* Return value of session object set by script.\n\n* @param {string} name\n\n*/\n\ngetSessionObject(name: string): string;\n\n/**\n\n* Return a system/script setting. Types are SCRIPT, SESSION, FEATURE, PERMISSION.\n\n*\n\n* @param {string} type\n\n* @param {string} name\n\n*\n\n* @deprecated\n\n*/\n\ngetSetting(type: string, name: string): string;\n\n/**\n\n* Return the internalId of the current user's subsidiary.\n\n*/\n\ngetSubsidiary(): number;\n\n/**\n\n* Return the internalId of the current user.\n\n*/\n\ngetUser(): string;\n\n/**\n\n* Return the NetSuite version for the current account.\n\n*/\n\ngetVersion(): string;\n\n/**\n\n* Set the % complete for the current scheduled script execution.\n\n* @param {number} pct The percentage of records completed\n\n*/\n\nsetPercentComplete(pct: number): void;\n\n/**\n\n* Set the value of a session object using a key.\n\n* @param {string} name\n\n* @param {string} value\n\n*/\n\nsetSessionObject(name: string, value: string): void;\n\n/**\n\n* Set a system/script setting. Only supported type is SESSION.\n\n*\n\n* @param {string} type\n\n* @param {string} name\n\n* @param {string} value\n\n*\n\n* @deprecated\n\n*/\n\nsetSetting(type: string, name: string, value: string): void;\n\n}\n\n/**\n\n* Return a new instance of nlobjCredentialBuilder\n\n*\n\n* @classDescription The nlobjCredentialBuilder object encapsulates a request string that can be passed to nlapiRequestURLWithCredentials(credentials, url, postdata, headers, httpsMethod).\n\n* @param {string} request can include an embedded GUID (globally unique string).\n\n* @param {string} domain URLâs host name. Host name must exactly match the host name in your URL.\n\n*\n\n* @constructor\n\n*/\n\ndeclare function nlobjCredentialBuilder(request: string, domain: string): NLObjCredentialBuilder;\n\ninterface NLObjCredentialBuilder {\n\n/**\n\n* Appends a passed in string to an nlobjCredentialBuilder object.\n\n*\n\n* @param {string} string String to be appended.\n\n*/\n\nappend(string: string): NLObjCredentialBuilder;\n\n/**\n\n* Encodes an nlobjCredentialBuilder object per the base64 scheme.\n\n*/\n\nbase64(): NLObjCredentialBuilder;\n\n/**\n\n* Hashes an nlobjCredentialBuilder object with the MD5 hash function.\n\n*/\n\nmd5(): NLObjCredentialBuilder;\n\n/**\n\n* Replaces all instances of string1 with string2.\n\n*\n\n* @param {string} string1 String to be replaced\n\n* @param {string} string2 String to be replaced with\n\n*/\n\nreplace(string1: string, string2: string): NLObjCredentialBuilder;\n\n/**\n\n* Hashes an nlobjCredentialBuilder object with the SHA-256 hash function.\n\n*/\n\nsha256(): NLObjCredentialBuilder;\n\n/**\n\n* Encodes an nlobjCredentialBuilder object per the UTF-8 scheme.\n\n*/\n\nutf8(): NLObjCredentialBuilder;\n\n}\n\ninterface NLObjCSVImport {\n\n/**\n\n* Sets the data to be imported in a linked file for a multi-file import job, by referencing a file in the file cabinet using nlapiLoadFile(id), or by inputting CSV data as raw string.\n\n*\n\n* @param {string} sublist The internal ID of the record sublist for which data is being imported.\n\n* @param {string|NLObjFile} file Raw data or nlobjFile object containing CSV data.\n\n*/\n\nsetLinkedFile(sublist: string, file: string|NLObjFile): NLObjCSVImport;\n\n/**\n\n* Sets the name of the saved import map to be used for an import, by referencing the internal ID or script ID of the import map.\n\n*\n\n* @param {string} savedImport The internal ID or script ID of the saved mapping to use for the import job.\n\n*/\n\nsetMapping(savedImport: string): void;\n\n/**\n\n* Sets the name of the saved import map to be used for an import, by referencing the internal ID or script ID of the import map.\n\n*\n\n* @param {string} option The name of the option; in this case, jobName.\n\n* @param {string} value The value for the jobName option, meaning the text to be displayed in the Job Name column at Setup > Import/Export > View CSV Import Status.\n\n*/\n\nsetOption(option: string, value: string): void;\n\n/**\n\n* Sets the data to be imported in the primary file for an import job, by referencing a file in the file cabinet using nlapiLoadFile, or by inputting CSV data as raw string.\n\n*\n\n* @param {string|NLObjFile} file Raw data or nlobjFile object containing CSV data.\n\n*/\n\nsetPrimaryFile(file: string|NLObjFile): void;\n\n/**\n\n* Sets the data to be imported in the primary file for an import job, by referencing a file in the file cabinet using nlapiLoadFile, or by inputting CSV data as raw string.\n\n*\n\n* @param {string} queue The new queue number. Valid values range from '1' to '5', depending upon the SuiteCloud License.\n\n*/\n\nsetQueue(queue: string): void;\n\n}\n\ninterface NLObjDuplicateJobRequest {\n\nsetEntityType(entityType: string): void;\n\nsetMasterId(masterID: string): void;\n\nsetMasterSelectionMode(masterSelectionMode: string): void;\n\nsetOperation(operation: string): void;\n\nsetRecords(dupeRecords: string[]): void;\n\n}\n\ninterface NLObjEmailMerger {\n\n/**\n\n* Perform the merge and return an object containing email subject and body.\n\n* @governance 20 units\n\n*/\n\nmerge(): { subject: string, body: string };\n\n/**\n\n* Associate a custom record to the merger.\n\n* @param {string} recordType type of the custom record\n\n* @param {number} recordId ID of the record to be associated with the merger\n\n*/\n\nsetCustomRecord(recordType: string, recordId: number): void;\n\n/**\n\n* Associate an entity to the merger.\n\n* @param {string} entityType type of the entity (customer/contact/partner/vendor/employee)\n\n* @param {number} entityId ID of the entity to be associated with the merger\n\n*/\n\nsetEntity(entityType: string, entityId: number): void;\n\n/**\n\n* Associate a second entity (recipient) to the merger.\n\n* @param {string} recipientType type of the entity (customer/contact/partner/vendor/employee)\n\n* @param {number} recipientId ID of the entity to be associated with the merger\n\n*/\n\nsetRecipient(recipientType: string, recipientId: number): void;\n\n/**\n\n* Associate a support case to the merger.\n\n* @param {number} caseId ID of the support case to be associated with the merger\n\n*/\n\nsetSupportCase(caseId: number): void;\n\n/**\n\n* Associate a transaction to the merger\n\n* @param {number} transactionId ID of the transaction to be associated with the merger\n\n*/\n\nsetTransaction(transactionId: number): void;\n\n}\n\n/**\n\n* Return a new instance of nlobjError used system or user-defined error object.\n\n*\n\n* @classDescription Encapsulation of errors thrown during script execution.\n\n*\n\n* @constructor\n\n*/\n\ndeclare function nlobjError(): NLObjError;\n\ninterface NLObjError {\n\n/**\n\n* Return the error code for this system or user-defined error.\n\n*/\n\ngetCode(): string;\n\n/**\n\n* Return the error description for this error.\n\n*/\n\ngetDetails(): string;\n\n/**\n\n* Return the error db ID for this error (if it was an unhandled unexpected error).\n\n*/\n\ngetId(): string;\n\n/**\n\n* Return the internalid of the record if this error was thrown in an aftersubmit script.\n\n*/\n\ngetInternalID(): number;\n\n/**\n\n* Return a stacktrace containing the location of the error.\n\n*/\n\ngetStackTrace(): string[];\n\n/**\n\n* Return the userevent script name where this error was thrown.\n\n*/\n\ngetUserEvent(): string;\n\n}\n\ninterface NLObjField {\n\n/**\n\n* Add a select option to this field (valid for select/multiselect fields). This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {string} value internal ID for this select option\n\n* @param {string} text display value for this select option\n\n* @param {boolean} selected if true then this select option will be selected by default\n\n*/\n\naddSelectOption(value: string, text: string, selected?: boolean): void;\n\n/**\n\n* Return field label.\n\n*/\n\ngetLabel(): string;\n\n/**\n\n* Return field name.\n\n*/\n\ngetName(): string;\n\n/**\n\n* This method can only be used in server contexts against a record object. Also note that a call to this method may return different results for the same field for different roles.\n\n*\n\n* @param {string} filter A search string to filter the select options that are returned.\n\n* @param {string} filteroperator Supported operators are contains | is | startswith. If not specified, defaults to the contains operator.\n\n*/\n\ngetSelectOptions(filter?: string, filteroperator?: string): NLObjSelectOption[];\n\n/**\n\n* Return field type.\n\n*/\n\ngetType(): string;\n\n/**\n\n* Set the alias used to set the value for this field. Defaults to field name. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {string} alias Column used to populate the field (mostly relevant when populating sublist fields).\n\n*/\n\nsetAlias(alias: string): NLObjField;\n\n/**\n\n* Set the break type (startcol|startrow|none) for this field. startrow is only used for fields with a layout type of outside. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {string} breaktype Break type used to add a break in flow layout for this field: startcol | startrow | none.\n\n*/\n\nsetBreakType(breaktype: string): NLObjField;\n\n/**\n\n* Set the default value for this field. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {string} value\n\n*/\n\nsetDefaultValue(value: string): NLObjField;\n\n/**\n\n* Set the width and height for this field. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {number} width\n\n* @param {number} height\n\n*/\n\nsetDisplaySize(width: number, height?: number): NLObjField;\n\n/**\n\n* Set the display type for this field. This method is only supported on scripted fields via the UI Object API\n\n*\n\n* @param {string} type display type: inline|normal|hidden|disabled|readonly|entry\n\n*/\n\nsetDisplayType(type: string): NLObjField;\n\n/**\n\n* Set help text for this field. If inline is set on assistant pages, help is displayed inline below field. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {string} help Field level help content (rich text) for field.\n\n* @param {string} inline If true then in addition to the popup field help, the help will also be displayed inline below field (supported on assistant pages only).\n\n*/\n\nsetHelpText(help: string, inline?: boolean): NLObjField;\n\n/**\n\n* Set the label for this field. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {string} label\n\n*/\n\nsetLabel(label: string): NLObjField;\n\n/**\n\n* Set the layout type and optionally the break type. This method is only supported on scripted fields via the UI Object API\n\n*\n\n* @param {string} type Layout type: outside|startrow|midrow|endrow|normal\n\n* @param {string} breaktype Break type: startcol|startrow|none\n\n*/\n\nsetLayoutType(type: string, breaktype?: string): NLObjField;\n\n/**\n\n* Set the text that gets displayed in lieu of the field value for URL fields.\n\n*\n\n* @param {string} text user-friendly display value in lieu of URL\n\n*/\n\nsetLinkText(text: string): NLObjField;\n\n/**\n\n* Make this field mandatory. This method is only supported on scripted fields via the UI Object API\n\n*\n\n* @param {boolean} mandatory if true then field becomes mandatory\n\n*/\n\nsetMandatory(mandatory: boolean): NLObjField;\n\n/**\n\n* Set the maxlength for this field (only valid for certain field types). This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {number} maxLength maximum length for this field\n\n*/\n\nsetMaxLength(maxLength: number): NLObjField;\n\n/**\n\n* Set the amount of empty vertical space (rows) between this field and the previous field. This method is only supported on scripted fields via the UI Object API.\n\n*\n\n* @param {number} padding # of empty rows to display above field\n\n*/\n\nsetPadding(padding: number): NLObjField;\n\n}\n\ninterface NLObjFieldGroup {\n\n/**\n\n* Set collapsibility property for this field group.\n\n*\n\n* @param {boolean} collapsible if true then this field group is collapsible\n\n* @param {boolean} defaultcollapsed if true and the field group is collapsible, collapse this field group by default\n\n*/\n\nsetCollapsible(collapsible: boolean, defaultcollapsed?: boolean): NLObjFieldGroup;\n\n/**\n\n* Set the label for this field group.\n\n* @param {string} label display label for field group\n\n*/\n\nsetLabel(label: string): NLObjFieldGroup;\n\n/**\n\n* Set showBorder property for this field group.\n\n*\n\n* @param {boolean} showBorder If true then this field group shows border including label of group.\n\n*/\n\nsetShowBorder(showBorder: boolean): NLObjFieldGroup;\n\n/**\n\n* Set singleColumn property for this field group.\n\n*\n\n* @param {boolean} singleColumn if true then this field group is displayed in single column\n\n*/\n\nsetSingleColumn(singleColumn: boolean): NLObjFieldGroup;\n\n}\n\ninterface NLObjFile {\n\n/**\n\n* Return the file description.\n\n*/\n\ngetDescription(): string;\n\n/**\n\n* Return the internal ID of the folder that this file is in.\n\n*/\n\ngetFolder(): number;\n\n/**\n\n* Return the id of the file (if stored in the FC).\n\n*/\n\ngetId(): number;\n\n/**\n\n* Return the name of the file.\n\n*/\n\ngetName(): string;\n\n/**\n\n* Return the size of the file in bytes.\n\n*/\n\ngetSize(): number;\n\n/**\n\n* Return the type of the file.\n\n*/\n\ngetType(): string;\n\n/**\n\n* Return the URL of the file (if stored in the FC).\n\n*/\n\ngetURL(): string;\n\n/**\n\n* Return the value (base64 encoded for binary types) of the file.\n\n*/\n\ngetValue(): string;\n\n/**\n\n* Return true if the file is inactive.\n\n*/\n\nisInactive(): boolean;\n\n/**\n\n* Return true if the file is \"Available without Login\".\n\n*/\n\nisOnline(): boolean;\n\n/**\n\n* Sets the file's description.\n\n* @param {string} description the file description\n\n*/\n\nsetDescription(description: string): void;\n\n/**\n\n* Sets the character encoding for the file.\n\n* @param {string} encoding\n\n*/\n\nsetEncoding(encoding: string): void;\n\n/**\n\n* Sets the internal ID of the folder that this file is in.\n\n* @param {number} folder\n\n*/\n\nsetFolder(folder: number): void;\n\n/**\n\n* Sets the file's inactive status.\n\n* @param {boolean} inactive\n\n*/\n\nsetIsInactive(inactive: boolean): void;\n\n/**\n\n* Sets the file's \"Available without Login\" status.\n\n* @param {boolean} online\n\n*/\n\nsetIsOnline(online: boolean): void;\n\n/**\n\n* Sets the name of a file.\n\n* @param {string} name the name of the file.\n\n*/\n\nsetName(name: string): void;\n\n}\n\ninterface NLObjForm {\n\n/**\n\n* Add a button to this form.\n\n*\n\n* @param {string} name button name\n\n* @param {string} label button label\n\n* @param {string} script button script (function name)\n\n*/\n\naddButton(name: string, label: string, script: string): NLObjButton;\n\n/**\n\n* Adds a field that lets you store credentials in NetSuite to be used when invoking services provided by third parties.\n\n*\n\n* @param {string} id The internal ID of the credential field.\n\n* @param {string} label The UI label for the credential field.\n\n* @param {string} website The domain the credentials can be sent to.\n\n* @param {string} scriptId The scriptId of the script that is allowed to use this credential field.\n\n* @param {string} value If you choose, you can set an initial value for this field. This value is the handle to the credentials.\n\n* @param {boolean} entityMatch Controls whether use of nlapiRequestUrlWithCredentials with this credential is restricted to the same entity that originally entered the credential.\n\n* @param {string} tab The tab parameter can be used to specify either a tab or a field group (if you have added nlobjFieldGroup objects to your form).\n\n*/\n\naddCredentialField(id: string, label: string, website?: string, scriptId?: string, value?: string, entityMatch?: boolean, tab?: string): NLObjField;\n\n/**\n\n* Add a field (nlobjField) to this form and return it.\n\n*\n\n* @param {string} name field name\n\n* @param {string} type field type\n\n* @param {string} label field label\n\n* @param {string|number} sourceOrRadio Script ID or internal ID for source list (select and multiselects only) -or- radio value for radio fields\n\n* @param {string} tab Tab name that this field will live on. If empty then the field is added to the main section of the form (immediately below the title bar).\n\n*/\n\naddField(name: string, type: string, label: string, sourceOrRadio?: string|number, tab?: string): NLObjField;\n\n/**\n\n* Add a field group to the form.\n\n* @param {string} name field group name\n\n* @param {string} label field group label\n\n* @param {string} tab\n\n*/\n\naddFieldGroup(name: string, label: string, tab?: string): NLObjFieldGroup;\n\n/**\n\n* Add a navigation cross-link to the page.\n\n*\n\n* @param {string} type page link type: crosslink|breadcrumb\n\n* @param {string} title page link title\n\n* @param {string} url URL for page link\n\n*/\n\naddPageLink(type: string, title: string, url: string): void;\n\n/**\n\n* Add a reset button to this form.\n\n*\n\n* @param {string} label Label for this button. defaults to \"Reset\".\n\n*/\n\naddResetButton(label?: string): NLObjButton;\n\n/**\n\n* Add a sublist (nlobjSubList) to this form and return it.\n\n*\n\n* @param {string} name sublist name\n\n* @param {string} type sublist type: inlineeditor|editor|list|staticlist\n\n* @param {string} label sublist label\n\n* @param {string} tab parent tab that this sublist lives on. If empty, it is added to the main tab\n\n*/\n\naddSubList(name: string, type: string, label: string, tab?: string): NLObjSubList;\n\n/**\n\n* Add a submit button to this form.\n\n*\n\n* @param {string} label Label for this submit button. Defaults to \"Save\".\n\n*/\n\naddSubmitButton(label?: string): NLObjButton;\n\n/**\n\n* Add a subtab (nlobjTab) to this form and return it.\n\n*\n\n* @param {string} name subtab name\n\n* @param {string} label subtab label\n\n* @param {string} tab parent tab that this subtab lives on. If empty, it is added to the main tab.\n\n*/\n\naddSubTab(name: string, label: string, tab?: string): NLObjTab;\n\n/**\n\n* Add a tab (nlobjTab) to this form and return it.\n\n*\n\n* @param {string} name tab name\n\n* @param {string} label tab label\n\n*/\n\naddTab(name: string, label: string): NLObjTab;\n\n/**\n\n* Get a button from this form by name.\n\n* @param {string} name Button Id.\n\n*/\n\ngetButton(name: string): NLObjButton;\n\n/**\n\n* Return a field (nlobjField) on this form.\n\n*\n\n* @param {string} name field name\n\n* @param {string} radio If this is a radio field, specify which radio field to return based on radio value.\n\n*/\n\ngetField(name: string, radio?: string): NLObjField;\n\n/**\n\n* Return a sublist (nlobjSubList) on this form.\n\n*\n\n* @param {string} name sublist name\n\n*/\n\ngetSubList(name: string): NLObjSubList;\n\n/**\n\n* Return a subtab (nlobjTab) on this form.\n\n*\n\n* @param {string} name subtab name\n\n*/\n\ngetSubTab(name: string): NLObjTab;\n\n/**\n\n* Return a tab (nlobjTab) on this form.\n\n*\n\n* @param {string} name Tab name.\n\n*/\n\ngetTab(name: string): NLObjTab;\n\n/**\n\n* Get a list of all tabs.\n\n*/\n\ngetTabs(): string[];\n\n/**\n\n* Insert a field (nlobjField) before another field (name).\n\n*\n\n* @param {NLObjField} field The field object to insert.\n\n* @param {string} nextfld The name of the field before which to insert this field.\n\n*/\n\ninsertField(field: NLObjField, nextfld: string): NLObjField;\n\n/**\n\n* Insert a sublist (nlobjSubList) before another subtab or sublist (name).\n\n*\n\n* @param {NLObjSubList} sublist The sublist object to insert.\n\n* @param {string} nextsublist The name of the sublist before which to insert this sublist.\n\n*/\n\ninsertSubList(sublist: NLObjSubList, nextsublist: string): NLObjSubList;\n\n/**\n\n* Insert a subtab (nlobjTab) before another subtab or sublist (name).\n\n*\n\n* @param {NLObjTab} subtab The subtab object to insert.\n\n* @param {string} nextsubtab The name of the subtab before which to insert this subtab.\n\n*/\n\ninsertSubTab(subtab: NLObjTab, nextsubtab: string): NLObjTab;\n\n/**\n\n* Insert a tab (nlobjTab) before another tab (name).\n\n*\n\n* @param {NLObjTab} tab the tab object to insert\n\n* @param {string} nexttab the name of the tab before which to insert this tab\n\n*/\n\ninsertTab(tab: NLObjTab, nexttab: string): NLObjTab;\n\n/**\n\n* Removes an nlobjButton object. This method can be used on custom buttons and certain built-in NetSuite buttons.\n\n* @param {string} name\n\n*/\n\nremoveButton(name: string): void;\n\n/**\n\n* Set the values for all the fields on this form.\n\n*\n\n* @param {Object} values Object containing field name/value pairs\n\n*/\n\nsetFieldValues(values: Object): void;\n\n/**\n\n* Set the Client Script definition used for this page.\n\n*\n\n* @param {string|number} script Script ID or internal ID for global client script used to enable Client SuiteScript on page\n\n*/\n\nsetScript(script: string|number): void;\n\n/**\n\n* Set the page title.\n\n*\n\n* @param {string} title\n\n*/\n\nsetTitle(title: string): void;\n\n}"
    }
}