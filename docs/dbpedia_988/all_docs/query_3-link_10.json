{
    "id": "dbpedia_988_3",
    "rank": 10,
    "data": {
        "url": "https://gamia-archive.fandom.com/wiki/Sprite",
        "read_more_link": "",
        "language": "en",
        "title": "Sprite",
        "top_image": "https://static.wikia.nocookie.net/gamia_archive_gamepedia_en/images/e/e6/Site-logo.png/revision/latest?cb=20210719151537",
        "meta_img": "https://static.wikia.nocookie.net/gamia_archive_gamepedia_en/images/e/e6/Site-logo.png/revision/latest?cb=20210719151537",
        "images": [
            "https://static.wikia.nocookie.net/gamia_archive_gamepedia_en/images/e/e6/Site-logo.png/revision/latest?cb=20210719151537",
            "https://static.wikia.nocookie.net/gamia_archive_gamepedia_en/images/b/b5/Sprites.jpg/revision/latest?cb=20181217205809",
            "https://static.wikia.nocookie.net/ucp-internal-test-starter-commons/images/5/54/Information.png/revision/latest/scale-to-width-down/48?cb=20200818143857",
            "https://static.wikia.nocookie.net/ucp-internal-test-starter-commons/images/5/54/Information.png/revision/latest/scale-to-width-down/48?cb=20200818143857",
            "https://static.wikia.nocookie.net/6a181c72-e8bf-419b-b4db-18fd56a0eb60",
            "https://static.wikia.nocookie.net/6c42ce6a-b205-41f5-82c6-5011721932e7",
            "https://static.wikia.nocookie.net/464fc70a-5090-490b-b47e-0759e89c263f",
            "https://static.wikia.nocookie.net/f7bb9d33-4f9a-4faa-88fe-2a0bd8138668"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Encyclopedia Gamia Archive Wiki"
        ],
        "publish_date": "2024-07-29T22:27:06+00:00",
        "summary": "",
        "meta_description": "A sprite is a rendered 2D graphic, used mostly in the 1980s and 1990s, particularly the SNES and Genesis days. It is not the background. Sprites are often on a different layer as items or characters. Sprites usually have some transparency. As games went 3D, sprites became rarer, replaced by...",
        "meta_lang": "en",
        "meta_favicon": "https://static.wikia.nocookie.net/gamia_archive_gamepedia_en/images/4/4a/Site-favicon.ico/revision/latest?cb=20210719151538",
        "meta_site_name": "Encyclopedia Gamia Archive Wiki",
        "canonical_link": "https://gamia-archive.fandom.com/wiki/Sprite",
        "text": "A sprite is a rendered 2D graphic, used mostly in the 1980s and 1990s, particularly the SNES and Genesis days. It is not the background. Sprites are often on a different layer as items or characters. Sprites usually have some transparency.\n\nAs games went 3D, sprites became rarer, replaced by models. Sprites were still incorporated, since they were smaller files, for less important things such as backgrounds (The crowds in games like WWF No Mercy had sprites for crowds) or various explosions (Super Smash Bros. Melee used many sprites for items & hit explosions).\n\nSprites tend to take longer to animate then models, because they require redrawing, while models only need to be moved. Because of the time it takes, sprites are often the subject of palette swapping.\n\nOverview[]\n\nFile:Vg graphics.svgPart of a series on:Video game graphics\n\nTypes\n\n2.5D & 3/4 perspective\n\nFirst person (video games)\n\nFixed 3D\n\nFull motion video based game\n\nGraphic adventure game\n\nGraphical video game\n\nIsometric graphics in video games and pixel art\n\nSide-scrolling video game\n\nText-based game\n\nThird-person view\n\nTile-based video game\n\nTop-down perspective\n\nVector game\n\nTopics\n\nAnimation\n\nCel-shaded animation\n\nDigitizing\n\nRotoscoping\n\nComputer graphics\n\n2D computer graphics\n\n3D computer graphics\n\n3D rendering\n\nGame art design\n\nGraphics engine\n\nFirst-person shooter engine\n\nTile engine\n\nParallax scrolling\n\nPixel art\n\nSkybox\n\nSprite\n\nTile set\n\nVirtual camera system\n\nVoxel\n\nLists\n\nList of FMV-based games\n\nList of stereoscopic video games\n\nList of text-based computer games\n\nCategory:Video game graphics\n\nIn computer graphics, a sprite[1][2] (also known by other names; see Synonyms below) is a two-dimensional bitmap graphic object that can be a static image or animation (2D computer graphics) that is integrated into a larger scene. Initially including just graphical objects handled separately from the memory bitmap of a video display, this now includes various manners of graphical overlays.\n\nOriginally, sprites were a method of integrating unrelated bitmaps so that they appeared to be part of the normal bitmap on a screen, such as creating an animated character that can be moved on a screen without altering the data defining the overall screen. Such sprites can be created by either electronic circuitry or software. In circuitry, a hardware sprite is a hardware construct that employs custom DMA channels to integrate visual elements with the main screen in that it super-imposes two discrete video sources. Software can simulate this through specialized rendering methods.\n\nMore recently, CSS sprites are used in web design as a way to improve performance by combining numerous small images or icons into a larger image called a sprite sheet or tile set, and selecting which icon to show on the rendered page using Cascading Style Sheets.\n\nAs three-dimensional graphics became more prevalent, sprites came to include flat images seamlessly integrated into complicated three-dimensional scenes.\n\nHistory[]\n\nThe first video game with color sprites was 1973 arcade game Playtron,[3] developed by Japanese company Kasco,[4] which only manufactured two cabinets of the game.[5]\n\nThe use of read-only memory in arcade games from around 1974 allowed the widespread use of sprites. Taito released some of the earliest known video games with sprites that year, including Basketball, a sports game that represented four basketball players and two baskets as sprite images,[6] and Speed Race, a racing video game that represented cars as sprite images,[7] which could collide with each other and vertically scroll across a race track.[8] The following year, they released Western Gun, a run and gun multi-directional shooter that was the earliest known video game to visually represent game characters as sprites,[9] as well as the first to depict a gun on screen.[10] Gun Fight's sprite graphics were powered by the Fuujitsu MB14241 video shifter, the first graphics processor used for video games; it would be used by Taito and Midway in subsequent arcade games, including Taito's blockbuster hit Space Invaders in 1978. The arcades would remain at the forefront of sprite graphics technology, producing the most advanced sprite graphics possible since the 1970s through to the 1990s.\n\nSpeed Race, which ran on Taito Discrete Logic hardware in 1974,[11] featured sprites[12] with collision detection moving along a vertical scrolling playfield.[13] The Fujitsu MB14241 was used to accelerate the drawing of sprite graphics for various 1970s arcade games from Taito and Midway, such as Gun Fight (1975), Sea Wolf (1976) and Space Invaders (1978). It could display up to 11 sprites per scanline.[14] In 1976, Signetics devised a video/graphics processor capable of generating sprite graphics. The Signetics 2636 video processor was first used in the Radofin 1292 Advanced Programmable Video System, released in 1976.\n\nIn the mid-1970s, Signetics devised the first video/graphics processors capable of generating sprite graphics on a home system. The Signetics 2636 video processors were first used in the 1976 Radofin 1292 Advanced Programmable Video System.\n\nIn 1977, the Taito Z80 arcade system board used for Super Speed Race[15] was capable of generating up to 16 sprites in hardware and display 4 sprites per scanline. Each sprite could have a size up to 32 pixels in width or height and display up to 15 colors.[16]\n\nThe Atari VCS, released in 1977, features a hardware sprite implementation wherein five graphical objects can be moved independently of the game playfield. The VCS's sprites, called players and missiles, are constructed from a single row of pixels that displayed on a scan line; to produce a two-dimensional shape, the sprite's single-row bitmap is altered by software from one scanline to the next.\n\nThe Atari 400 and 800 home computers of 1979 feature similar, but more elaborate circuitry, capable of moving eight Player/Missile objects per scanline -- four 8-bit wide players, and four 2-bit wide missiles. This more advanced version allows operation like the VCS where the CPU modifies the graphics pattern register for each scan line, or an automatic mode where the display chip performs DMA from a table in memory populating the graphics pattern registers for each scan line. In the automatic DMA mode vertical motion is simulated by moving the sprite's up and down incrementally in memory. The hardware produces a two-dimensional bitmap several pixels wide, and as tall as the screen. The width of pixels can also vary from 1, 2, or 4 color clocks. Multiple Player objects can be merged to produce a multi-color player. The four missile objects can be grouped together as a fifth Player and colored independently from the Players.\n\nIn 1979, the Namco Galaxian arcade system used specialized graphics hardware supporting RGB color, multi-colored sprites and tilemap backgrounds. It could display up to 64 hardware sprites on screen and 16 per scanline. Each sprite could be up to 16x16 pixels in size, with 3 colors each.[17] The Galaxian hardware was widely used during the golden age of arcade video games, by game companies such as Namco, Centuri, Gremlin, Irem, Konami, Midway, Nichibutsu, Sega and Taito.[18][19] The Elektor TV Games Computer in 1979 was an early microcomputer capable of generating sprite graphics, which Signetics referred to as \"objects\".\n\nThe term sprite was first used in the graphic sense by one of the definers of the Texas Instruments 9918(A) video display processor (VDP),[20] released in 1981. The term was derived from the fact that sprites, rather than being part of the bitmap data in the framebuffer, instead \"floated\" around on top without affecting the data in the framebuffer below, much like a ghost or \"sprite\". By this time, sprites had advanced to the point where complete two-dimensional shapes could be moved around the screen horizontally and vertically with minimal software overhead.\n\nThe CPU would instruct the external chips to fetch source images and integrate them into the main screen using direct memory access channels. Calling up external hardware, instead of using the processor alone, greatly improved graphics performance. Because the processor was not occupied by the simple task of transferring data from one place to another, software could run faster; and because the hardware provided certain innate abilities, programs were also smaller.\n\nIn the 1980s, sprite-scaling became a popular technique in arcade games to represent a three-dimensional perspective using 2D sprite graphics. Sega in particular was at the forefront of sprite-scaling graphics with its powerful custom Super Scaler graphics boards, which could quickly scale and rotate many large colourful sprites at high frame rates. Sega's Super Scaler hardware powered a string of 1980s arcade hits ranging from Space Harrier and Out Run to After Burner and Galaxy Force. Other arcade manufacturers such as Namco, Capcom and SNK also relied on custom graphics processors in order to produce similarly advanced sprite graphics in the 1980s to early 1990s. Following the rise of true 3D polygon graphics in the early 1990s, the sprite-scaling technique declined in popularity.\n\nHardware sprites[]\n\nIn early video gaming, hardware sprites were a method of compositing separate bitmap so that they appear to be part of a single image on a screen.\n\nMany early graphics chips had true spriting use capabilities in which the sprite images were integrated into the screen, often with priority control with respect to the background graphics, at the time the video signal was being generated by the graphics chip.\n\nThese contrasted with software and blitter methods of 2D animation which modify a framebuffer held in RAM, which required more memory cycles to load and store the pixels, sometimes with an additional mask, and refresh backgrounds behind moving objects. These methods frequently required double buffering to avoid flickering and tearing, but placed fewer restrictions on the size and number of moving objects.\n\nThe sprite engine is a hardware implementation of scanline rendering. For each scanline the appropriate scanlines of the sprites are first copied (the number of pixels is limited by the memory bandwidth and the length of the horizontal retrace) into very fast, small, multiple (limiting the number of sprites on a line), and costly caches (the size of which limit the horizontal width) and as the pixel are sent to the screen, these caches are combined with each other and the background. It may be larger than the screen and is usually tiled, where the tile map is cached, but the tile set is not. For every pixel, every sprite unit signals its presence onto its line on a bus, so every other unit can notice a collision with it. Some sprite engines can automatically reload their \"sprite units\" from a display list. The sprite engine has synergy with the palette. To save registers, the height of the sprite, the location of the texture, and the zoom factors are often limited. On systems where the word size is the same as the texel there is no penalty for doing unaligned reads needed for rotation. This leads to the limitations of the known implementations:\n\nSprite Hardware Features Year System(s), chip(s) Sprites on screen Sprites on line Max. texels on line Texture width Texture height Colors Hardware zoom Rotation Background Collision detection Transparency Source 1974 Taito Discrete Logic,\n\narcade hardware[21] 14 9 60 4, 8, 16 4, 8 1 No No 1 tile or bitmap layer Yes No [22][23] 1975 Fujitsu MB14241\n\n(Midway 8080, Taito 8080) 60 9 144 4 to 32 1 to 224 1 1, 2× vertical, 1, 2× horizontal Screen orientation 1 bitmap layer Yes Color key [14] 1976 Speed Race Twin,\n\nTaito Discrete Logic 10 6 48 4, 8 8, 16 1, 3 1, 2× integer No 1 tile or bitmap layer Yes Color key [24][25] Sega Discrete Logic,[26]\n\nSega 94789-P 5 5 96 8, 16, 32, 64 8, 16, 32, 64 1 1, 2× integer Horizontal mirroring 1 tile or bitmap layer Yes Color key [27][28][29] Fairchild Channel F, F8 Display list (run by CPU) 9 56 4, 8 5, 8 1 No No 1 bitmap layer No Color key [30][31][32] Signetics 2636/2637\n\n(1292, VC 4000, Arcadia) 4 4 32 8 8 1 No No 1 bitmap layer No Color key [33] 1977 Atari 2600,\n\nTIA 9 (5 multiplied by CPU) 9 (with triplication) 51 (with triplication) 1, 8 192 1 1, 2, 4, 8× horizontal Horizontal mirroring 1 bitmap layer Yes Color key [34] Taito Z80,\n\nTaito AO84-91335-C762[35] 7 7 224 32 16 15 No Screen orientation 1 tile or bitmap layer Yes Color key [15][16] 1979 Namco Galaxian,\n\nNamco LFSR Display list 15 240 8, 16 8, 16 3 1, 2, 3× vertical, 1, 2, 3× horizontal Horizontal and vertical mirroring 1 tile layer and 1 bitmap layer Yes Color key [17][18][36] Atari 8-bit,\n\nGTIA/ANTIC Display list 8 40 2, 8 128, 256 1, 3 1, 2× vertical, 1, 2, 4× horizontal No 1 bitmap layer Yes Color key [37] Texas Instruments TMS9918\n\n(TI-99/4, ColecoVision, MSX, SG‑1000) 32 4 64 8, 16 8, 16 1 1, 2× integer No 1 tile layer Partial Color key [38] Radar Scope,\n\nNintendo Classic 64 16 256 8, 16, 32 8, 16, 32 3, 7 Analog scaling Horizontal and vertical mirroring 1 tile layer, 1 bitmap layer Yes Color key [39] [40]\n\n[41] [42] 1980 Namco Pac-Man,\n\nNamco NVC293 8 8 128 16 16 3 No Horizontal and vertical mirroring 2 tile layers Yes Color key [43][44][45] 1981 Jump Bug,\n\nSega Z80 Display list 16 256 8, 16 8, 16, 32 3, 7 1, 2× integer No 1 tile layer and 1 bitmap layer Yes Color key KO Punch 32 16 256 16 16 7 No Horizontal mirroring 1 bitmap layer ? Color key [46] Sega G80,\n\nRaster Display Controller 64 32 256 8, 16 8, 16 3 Vector scaling Screen orientation 2 tile layers Yes Color key [47][48][49] Sega VCO Object,\n\narcade hardware 64 16 315 8 to 20 8 to 20 3, 7 Voltage control Background tile mirroring 1 tile layer and 1 bitmap layer Yes Color key [50] 1982 C64, VIC-II !Display list run by CPU 8 192 !96, 192 12, 24 21 1, 3 1, 2× integer No 1 tile or bitmap layer Yes Color key [51] Moon Patrol,\n\nIrem M52 64 16 256 8, 16 8, 16, 32 3, 7 No Horizontal and vertical mirroring 2 tile layers Yes Color key Namco Pole Position,\n\n04xx & 09xx 64 32 512 16, 32 16, 32 15 Yes, anisotropic Horizontal and vertical mirroring 1 tile layer and 1 bitmap layer Yes Color key [52][53] Sega 315‑5011 & 315‑5012\n\n(Sega Z80, System 1/2/16, Space Harrier) 128 100 800 8 to 256 8 to 256 15 Yes, anisotropic Horizontal and vertical mirroring 2 tile layers and 1 bitmap layer Yes Alpha [54][55][56] 1983 Namco System 16 96 24 384 8, 16 8, 16 3 Background only Horizontal and vertical mirroring 2 bitmap layers Yes Color key [57][58] NES, RP2C0x 64 8 64 8 8, 16 3 No Horizontal and vertical mirroring 1 tile layer Partial Color key [59] Punch-Out,\n\nNintendo CHP1-VIDEO b 4 3 384 64, 128 128, 256 15 Yes Horizontal and vertical mirroring 1 tile layer Yes Color key Sega SG-1000,\n\nTMS9929 32 4 64 8, 16 8, 16 1, 3 1, 2× integer No 1 tile layer Yes Color key [60][61] TX-1,\n\nTatsumi TC012 96 24 384 8, 16, 32, 64 8, 16, 32, 64 3, 7 Yes Horizontal and vertical mirroring 2 tile layers Yes Color key [62] 1984 Taito Z80,[63]\n\nFujitsu MB112S146 96 24 384 8, 16 8, 16 15 Yes Horizontal and vertical mirroring 2 tile layers Yes Color key [64][65][66] 1985 Amiga, Denise !Display list 8 128 16 Up to 256 3, 15 Vertical by display list No 2 bitmap layers Yes Color key [67] MSX2,\n\nYamaha V9938 32 8 128 8, 16, 32 8, 16, 32 1, 3, 7, 15 per line 1, 2× integer Horizontal and vertical mirroring 1 tile or bitmap layer Yes Color key [68][69][70] Sega VDP\n\n(Master System, Game Gear) 64 8 128 8, 16 8, 16 15 1, 2× integer, 1, 2× vertical Background tile mirroring 1 tile layer Yes Color key [71][72][73] 1986 Atari 7800,\n\nMARIA 100 (without background) 30 (without background) 160 4 to 160 4, 8, 16 1, 3, 8 No No 1 bitmap layer No Color key [74] Namco Thunder Ceptor, C45 Display list 8 512 16, 32 16, 32 15 Yes, anisotropic Road rotation 2 tile layers and 1 bitmap layer ? Color key [75][76][77] Sega OutRun,\n\n315-5211 128 128 1600 8 to 512 8 to 256 15 Yes, anisotropic Horizontal and vertical mirroring 2 tile layers and 1 bitmap layer Yes Alpha [78] 1987 Namco System 2,\n\nNamco V56 128 128 2081 8 to 64 8 to 64 255 Yes, anisotropic Yes, affine 7 tile layers and 1 bitmap layer Yes Color key [79] NEC PC Engine, Hudson HuC6270A 64 16 256 16, 32 16, 32, 64 15 No Horizontal and vertical mirroring 1 tile layer Yes Color key [80][81] Sega X Board,\n\n315-5211A & 315‑5278 256 256 3200 8 to 512 8 to 256 15 Yes, anisotropic Yes, affine 4 tile layers and 1 bitmap layer Yes Alpha [82] Sharp X68000,\n\nCynthia 512 (128 multiplied by raster interrupt) 32 512 16 16 15 1, 2× integer Horizontal and vertical mirroring 1-2 tile layers and 1-4 bitmap layers Partial Color key [83][84][85][86] Taito Ninja Warriors,\n\nTC0100SCN 128 108 1737 16 16 15 No Horizontal and vertical mirroring 6 tile layers Yes Color key [87][88][89] Taito Z System,\n\nMotion Object Generator 512 108 1737 16 to 128 8 to 128 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 2-4 tile layers and 1 bitmap layer Yes Color key [90] 1988 Capcom CP System,\n\nCPS-A & CPS‑B 256 65 1048 16 to 256 16 to 256 15 No Horizontal and vertical mirroring 3 tile layers and 2 bitmap layers Yes Color key [91][92] Sega System 24,\n\n315-5293 & 315‑5295 2048 512 4096 8 to 1024 8 to 1024 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 4 tile layers Yes Alpha [93][94][95][96] Sega Y Board,\n\n315-5196 & 315‑5305 2176 400 3200 8 to 512 8 to 512 15 to 511 Yes, anisotropic Yes, affine 1 bitmap layer Yes Alpha [97][98][99][100] Taito B System, TC0180VCU 408 110 1768 16 to 256 16 to 256 15 to 63 Sprite shrinking Horizontal and vertical mirroring 2 tile layers and 1 bitmap layer Yes Color key [101][102][103] Taito F2 System 2048 512 4096 8, 16 8, 16 2, 4, 16, 64 1, 2, 4× integer No 3 tile layers Yes Color key [104][105][106] Yamaha V9958\n\n(MSX2+, TurboR, TIM) 32 8 128 8, 16, 32 8, 16, 32 1, 3, 7, 15 per line 1, 2× integer Horizontal and vertical mirroring 1 tile layer and 1 bitmap layer Yes Color key [68][69][107][70] Yamaha YM7101\n\n(Mega Drive, Mega‑Tech/Play, System C) 80 20 320 8, 16, 24, 32 8, 16, 24, 32 15 1, 2× integer Horizontal and vertical mirroring 2 tile layers Yes Color key [108] 1989 Fujitsu FM Towns,\n\nFM Towns Marty 1024 64 1024 16 16 15 1, 2× vertical, 1, 2, 3, 4, 5× horizontal Horizontal and vertical mirroring 1-2 bitmap layers Partial Color key [109][110] Game Boy 40 10 80 8 8, 16 3 No No 1 tile layer No Color key [111] NEC PC Engine SuperGrafx, HuC6270A 128 32 512 16, 32 16, 32, 64 15 No Horizontal and vertical mirroring 2 tile layers Yes Color key [81] Taito F1 System 2048 512 4096 8, 16 8, 16 2, 4, 16, 64 Yes Yes 4 tile layers Yes Color key [112][113][114] Taito Z System 512 512 4096 8 to 128 8 to 128 16 Yes Partial 4 tile layers Yes Color key [115][116] 1990 Amstrad Plus, Asic !Display list run by CPU 16 !16 min. 256 16 16 15 1, 2, 4x vertical,\n\n1, 2, 4x horizontal No Bitmap layer No Color key [117] SNK Neo Geo,\n\nLSPC2-A2 384 96 1536 16 16 to 512 15 Sprite shrinking Horizontal and vertical mirroring 1 tile layer Partial Color key [118][119][120] Sega System 32,\n\n315-5387 8192 512 4096 8 to 1024 8 to 1024 15 to 512 Yes, anisotropic Yes, affine 4 tile layers and 1 bitmap layer Yes Alpha [93][121][122][123] SNES, PPU 128 34 272 8, 16, 32, 64 8, 16, 32, 64 15 Background, affine Background affine rotation and sprite mirroring 1-4 tile layers or 1 affine mapped tile layer Yes Color key, averaging [124] 1991 Sega CD 80 20 320 8, 16, 24, 32 8, 16, 24, 32 15 Yes Yes 2 tile layers Yes Color key [125] 1992 Amiga (AGA), Lisa !Display list 8 448 16, 32, 64 Up to 256 3, 15 Vertical by display list No 2 bitmap layers Yes Color key [67][126] Taito F3 System 2048 1024 8192 8, 16 8, 16 15, 31, 63 Yes Yes 5 tile layers Yes Alpha [127][128][129] Taito SZ System, TC0570SPC 1024 162 2604 16 to 128 8 to 128 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 4 tile layers and 1 bitmap layer Yes Color key [90][130] 1993 Atari Jaguar, Tom 1000 90 720 8 to 360 Up to 220 Up to 255 Yes, anisotropic Yes, affine 1 bitmap layer Partial Color key [131][132] Capcom CP System II (CPS2),\n\nCPS-A & CPS‑B 900 65 1048 16 to 256 16 to 256 15 No Horizontal and vertical mirroring 3 tile layers and 2 bitmap layers Yes Alpha [91][133][134] 1994 PC Engine Arcade CD-ROM, HuC6270A 256 96 1536 16, 32, 64 16, 32, 64, 128 15 No Horizontal and vertical mirroring 1 tile layer Yes Color key [81] Sega 32X,\n\nSega 32X VDP 320 80 1280 8, 16, 24, 32 8, 16, 24, 32 15, 255 Yes Yes 3 tile layers Yes Color key Sega VDP1\n\n(Saturn, STV) 16,384 512 4096 8 to 504 1 to 255 15 to 32,768 Yes, anisotropic Yes, affine 3-6 tile layers and 1-4 bitmap layers Yes Alpha [93][135][136] Sony GPU\n\n(PSX, System 11/10/12) 4000 128 1024 8, 16, 256 8, 16, 256 15, 255 Yes, anisotropic Yes, affine 1 bitmap layer Partial Alpha [137][138][139] 1996 Capcom CP System III (CPS3),\n\nDL-2729 1024 482 3861 8, 16 8, 16 63, 255 Yes, anisotropic Horizontal and vertical mirroring 4 tile layers Yes Alpha [140][141] Data East MLC System,\n\nDE150 & DE223 614 176 2828 16 16 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 2 tile layers Yes Alpha [142] 1997 Hyper Neo Geo 64,\n\nNEO64-SPR 1535 384 3072 16 16 to 512 15, 255 Yes, anisotropic Yes, affine 4 tile layers Yes Alpha [143][144][145] 2001 Game Boy Advance 128 128 1210 8, 16, 32, 64 8, 16, 32, 64 15, 255 Yes, affine Yes, affine 2-4 layers or 1-2 affine layers No Color key, blending [146] 2004 Nintendo DS 256 (128 per screen) 128 1210 8, 16, 32, 64 8, 16, 32, 64 15 to 32,768 Yes affine Yes, affine 8 layers (4 per screen); each layer is independent No Color key, blending [147] 2011 Gameduino 256 96 1536 16 16 255 No Yes 1 tile layer Yes Color key [148] System(s), chip(s) Sprites on screen Sprites on line Max. texels on line Texture width Texture height Colors Hardware zoom Rotation Background Collision detection Transparency Source\n\nMany third party graphics cards offered sprite capabilities. Sprite engines often scaled badly, starting to flicker as the number of sprites increased above the number of sprite units, or used more and more silicon as the designer of the chip implements more units and bigger caches. The exception was arcade games, which were expensive and could afford to feature more advanced sprite engines compared to home systems, with the exception of the Sharp X68000 computer and Neo Geo console, both of which were based on expensive arcade technology.\n\nSprites by software[]\n\nMany popular home computers of the 1980s lack any support for sprites by hardware. The animated characters, bullets, pointing cursors, etc. for videogames (mainly) were rendered exclusively with the CPU by software, as part of the screen video memory in itself. Hence the term software sprites.\n\nMainly, two distinct techniques were used to render the sprites by software, depending on the display hardware characteristics:\n\nBinary image masks, mainly for systems with bitmapped video frame buffers. It employs the use of an additional binary mask for every sprite displayed to create transparent areas within a sprite.\n\nTransparent color, mainly for systems with indexed color displays. This method defines a particular color index (typically index '0' or index '255') with a palletted display mode as a 'transparent color' which the blitter ignores when blitting the sprite to video memory or the screen.\n\nSprites by CSS[]\n\nTo reduce the number of requests the browser makes to the server, some web designers combine numerous small images or icons into a larger image called a sprite sheet or tile set.[149] CSS is used to select the parts of the composite image to display at different points in the page. If a page has ten 1 kB images, they can be combined into one 10 kB image, downloaded with a single HTTP request, and then positioned with CSS. Reducing the number of HTTP requests can make a Web page load much faster.[150] In this usage, the sprite sheet format that had been developed for use in game and animation engines is being applied to static images.[151][152]\n\nReturn of sprites in casual games and mobile devices[]\n\nWith mobile devices and casual gaming becoming more and more popular the classic 2D games return. The modern devices lack support for hardware sprites but come with powerful 3D hardware. On these devices sprites are simulated using textures on rectangular shapes. Perspective is disabled for these games. Since the hardware often comes with constraints - e.g. that it can only use power-of-two sized textures (that is a width or height of 64,128,256,...) sprite sheets are used to reduce memory consumption. This is done by packing many sprites into one texture which, as a whole, has to meet the hardware constraints. Apart from the memory usage this technique can also be used to reduce the number of draw calls to the graphics subsystem and speed up rendering. [153]\n\nMove to 3D[]\n\nPrior to the popularizing of true 3D graphics in the late 1990s, many 2D games attempted to imitate the look of three-dimensionality with a variety of sprite production methods. These included:\n\nRotoscoping: The filmed performances of live actors were sometimes used for creating sprites, most famously in the case of Prince of Persia which added a relative element of realism to a platform game. The method was used in a number of other fighting games, mostly in the mid 1990s.\n\nClaymation or the use of posable models which were used for characters that could not be portrayed by actors. Famous early examples include Goro of Mortal Kombat and various enemies from Doom. Used to a greater extent in games like Clay Fighter and Neverhood.\n\nPre-rendered CGI models: Introduced by Rise of the Robots and made famous by Donkey Kong Country, and later used to a great extent in PC real-time strategy and role-playing video game games prior to the move to real-time 3D. Since computers of the day could not run complex 3D graphics, footage of pre-rendered three-dimensional character models were often used which created a (relative) illusion of 3D.\n\nMore often sprite now refers to a partially transparent two dimensional animation that is mapped onto a special plane in a 3D scene. Unlike a texture map, the sprite plane is always perpendicular to the axis emanating from the camera. The image can be scaled to simulate perspective, rotated two dimensionally, overlapped with other objects, and be occluded, but it can only be viewed from a single angle. This rendering method is also referred to as billboarding.\n\nSprites create an effective illusion when\n\nthe image inside the sprite already depicts a three dimensional object;\n\nthe animation is constantly changing or depicts rotation;\n\nthe sprite exists only shortly;\n\nthe depicted object has a similar appearance from many common viewing angles (such as something spherical);\n\nthe perspective of the object from the viewer cannot possibly change fast enough for the viewer to discern a difference from true 3D geometry, as in the case of object a long distance away from the viewer in 3D space.\n\nthe viewer accepts that the depicted object only has one perspective (such as small plants or leaves).\n\nWhen the illusion works, viewers will not notice that the sprite is flat and always faces them. Often sprites are used to depict phenomena such as fire, smoke, small objects, small plants (like blades of grass), or special symbols (like \"1-Up\"), or object of any size where the angle of view does not appreciably change with respect to the rectilinear projection of the object (usually from a long distance). The sprite illusion can be exposed in video games by quickly changing the position of the camera while keeping the sprite in the center of the view. Sprites are also used extensively in particle effects and commonly represented pickups in early 3D games especially.\n\nAn example of extensive usage of sprites to create the illusion is the game The Elder Scrolls IV: Oblivion, whose main graphical feature was the ability to display hundreds, if not thousands of animated trees on-screen at one time. Closer inspection of those trees reveals that the leaves are in fact sprites, and rotate along with the position of the user. The tree rendering package used by Oblivion uses sprites to create the appearance of a high number of leaves. However, this fact is only revealed when the player actually examines the trees up-close, and rotates the camera.\n\nSprites have also occasionally been used as a special-effects tool in movies. One such example is the fire breathing Balrog in The Lord of the Rings: The Fellowship of the Ring; the effects designers utilized sprites to simulate fire emanating from the surface of the demon. Small bursts of fire were filmed in front of a black background and made transparent using a luma key. Many bursts were then attached to the surface of the animated Balrog model and mixed with simulated smoke and heat waves to create the illusion of a monster made from fire.\n\nThe term sprite is often confused with low resolution 2D graphics drawn on a computer, also known as pixel art. However, sprite graphics (bitmaps) can be created from any imaginable source, including prerendered CGI, dynamic 3D graphics, vector art, and even text. Likewise, pixel art is created for many purposes other than as a sprite, such as video game backgrounds, textures, icons, websites, display art, comics, and t-shirts.\n\nWith the advancement in computer graphics and improved power and resolution, actual pixel art sprites are becoming increasingly infrequent outside of handheld game systems and cell phones.\n\nApplication[]\n\nSprites are typically used for characters and other moving objects in video games. They have also been used for mouse pointers and for writing letters to the screen. For on-screen moving objects larger than one sprite's extent, sprites may sometimes be scaled and/or combined.\n\nBillboarding is the use of sprites in a 3D environment. In the same way that a billboard is positioned to face drivers on a highway, the 3D sprite always faces the camera. There is both a performance advantage and an aesthetic advantage to using billboarding. Most 3D rendering engines can process \"3D sprites\" much faster than other types of 3D objects. So it is possible to gain an overall performance improvement by substituting sprites for some objects that might normally be modeled using texture mapped polygons. Aesthetically sprites are sometimes desirable because it can be difficult for polygons to realistically reproduce phenomena such as fire. In such situations, sprites provide a more attractive illusion.\n\nSprites are also made and used by various online digital artists, usually to train their ability to make more complicated images using different computer programs or just for the fun of it. \"Sprite Artists\" will either create their own \"custom\" sprites, or use and edit pre-existing sprites (often made by other artists or \"ripped\" from a video game or other media) in order to create art, comics, or animations.\n\nSynonyms[]\n\nMajor video game companies rarely (if at all) use the term \"sprite\" in the general public. Some other alternatives that have been used are:\n\nPlayer-Missile Graphics was a term used by Atari, Inc. for hardware-generated sprites in the company's early coin-op games, the Atari 2600 and 5200 consoles and the Atari 8-bit computers. The term reflected the usage for both characters (\"players\") and other objects (\"missiles\"). They had restricted horizontal size (8 or 2 pixels, albeit with scalability) and vertical size equal to height of the entire screen.\n\nMovable Object Block, or MOB, was used in MOS Technology's graphics chip literature (data sheets, etc.) However, Commodore, the main user of MOS chips and the owner of MOS for most of the chip maker's lifetime, applied the common term \"sprite\", except for Amiga line of home computers, where MOB was the preferred term.\n\nThe developer manuals for the Nintendo Entertainment System, Super Nintendo Entertainment System, and Game Boy referred to sprites as OBJs (short for \"objects\"), and the region of RAM used to store sprite attributes and coordinates was known as OAM (Object Attribute Memory). This still applies today on the Game Boy Advance and Nintendo DS handheld systems. However, Nintendo Power referred to them as sprites in articles about the NES architecture in the magazine's third year.\n\nBOB, more often BLOB or 'Blitter Object', popular name for graphics objects drawn with the dedicated graphics blitter in the Amiga series of computers, which was available in addition to its true hardware sprites.\n\nSoftware sprites were used to refer to subroutines that used bit blitting to accomplish the same goal on systems such as the Atari ST and the Apple II whose graphics hardware had no sprite capability.\n\nThe computer programming language DarkBASIC used the term Bob (for \"blitter object\") to refer to its software-sprite functions, before switching to the more conventionally used \"sprite\" term.\n\nBillboard or 3D Sprite is a term often used to refer to sprites that are essentially texture mapped 3D facets that always have their surface normal facing into the camera.\n\nZ-Sprite is a term often used for 3D environments that contain only sprites. The Z-parameter provides a scaling effect that creates an illusion of depth. For example in adventure games such as King's Quest VI where the camera never moves, normal 2D sprites might suffice, but Z-sprites provide an extra touch.\n\nImpostor is a term used instead of billboard if the billboard is meant to subtly replace a real 3D object.\n\nSee also[]\n\nTwo-dimensional\n\nTwo-and-a-half-dimensional\n\nIsometric graphics in video games and pixel art\n\nVideo games with isometric graphics\n\nThree-dimensional\n\nGraphics processing unit\n\nVideo display controller\n\nTile engine\n\nTile-based video game\n\nReferences[]\n\n[]"
    }
}