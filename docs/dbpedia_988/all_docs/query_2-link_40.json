{
    "id": "dbpedia_988_2",
    "rank": 40,
    "data": {
        "url": "https://www.gamedev.net/forums/topic/708830-i-do-not-understand-the-code-version-of-time-based-sprite-animation/",
        "read_more_link": "",
        "language": "en",
        "title": "I do not understand the code version of time based sprite animation?",
        "top_image": "https://www.gamedev.net/static/media/logo/icons/icon-512x512.png",
        "meta_img": "https://www.gamedev.net/static/media/logo/icons/icon-512x512.png",
        "images": [
            "https://uploads.gamedev.net/profile/medium.photo-230227.jpg",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://uploads.gamedev.net/profile/medium.photo-230227.jpg",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://uploads.gamedev.net/profile/medium.photo-230227.jpg",
            "https://uploads.gamedev.net/profile/photo-thumb-231493.png",
            "https://uploads.gamedev.net/profiles/monthly_2019_11/large.21d3191d918a4ed085c3c52761dfb73f.Dragon.JPG",
            "https://uploads.gamedev.net/forums/monthly_2020_12/aaf3eba39c324f7aac283cb0718744f0.animation-canvas2d-js.gif",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://uploads.gamedev.net/profile/medium.photo-230227.jpg",
            "https://uploads.gamedev.net/profiles/monthly_2019_11/large.21d3191d918a4ed085c3c52761dfb73f.Dragon.JPG",
            "https://uploads.gamedev.net/forums/monthly_2020_12/aaf3eba39c324f7aac283cb0718744f0.animation-canvas2d-js.gif",
            "https://uploads.gamedev.net/profiles/monthly_2023_11/medium.eb077b57a7b143a8882f74ec1a697397.dizzyIcon.png",
            "https://uploads.gamedev.net/profiles/monthly_2022_01/medium.d12061bdebe64b16a562252b843e170e.josh_thuglife.jpg.8a8fc989cb842d4c9d623739bd9f5dbf.jpg",
            "https://uploads.gamedev.net/monthly_2019_03/EARTH2.thumb.png.87d7865d938d0c9b1ca8e56c761ae323.png",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://uploads.gamedev.net/monthly_2018_08/large.0.png.924f55bbfcb69e0c782e99ab6f96bbdf.png",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://www.gamedev.net/static/media/user/generic-user.png",
            "https://www.gamedev.net/static/media/user/generic-user.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "game development",
            "make a game",
            "game developer",
            "game programming",
            "game making",
            "indie",
            "beginner",
            "tutorials",
            "technology",
            "jobs",
            "news",
            "unity",
            "unreal",
            "godot",
            "game engine",
            "gamedev",
            "community",
            "graphics",
            "game design",
            "game art",
            "game business",
            "game producer",
            "game marketing",
            "indie game developer",
            "indie games",
            "virtual reality",
            "mobile development",
            "augmented reality",
            "game math",
            "game music",
            "webgl",
            "html5 game development",
            "2d",
            "3d",
            "animation",
            "modeling",
            "pixel art",
            "opengl",
            "vulkan",
            "directx",
            "assets",
            "textures",
            "3D",
            "shaders"
        ],
        "tags": null,
        "authors": [
            "Universa",
            "Dominic Hughes"
        ],
        "publish_date": "2021-01-18T21:02:23",
        "summary": "",
        "meta_description": "GameDev.net is your resource for game development with forums, tutorials, blogs, projects, portfolios, news, and more.",
        "meta_lang": "en",
        "meta_favicon": "/static/media/logo/icons/icon-72x72.png",
        "meta_site_name": "GameDev.net",
        "canonical_link": "https://www.gamedev.net/forums/topic/708830-i-do-not-understand-the-code-version-of-time-based-sprite-animation/",
        "text": "I'm Universo and for the longest time had coding issues around the concept of time-based sprite animation basically, do not know how to implement it and any code or explanation simple or complex that I've found has been extremely confusing to me and was hoping to have a kind person walk me through the code step by step, explaining exactly how this is implemented correctly.\n\nHere's what, I believe to know about the concept and or idea for time-based sprite animation it is to construct a delay or halt of some code statement using time of some kind in milliseconds with a collection of moving images and or sprites however any attempts from the tutorial's or my own brain have resulted in inaccurate various speed sprite animations and not the consistent stable speed, Id appreciate and be grateful for here's some code to show my progress and perhaps help you understand my position in this mess baring in mind, I prefer my code be as extremely simple and speedy as possible within the limitations, of course:\n\nJavaScript with HTML5 Canvas\n\nwindow.onload = function () { var canvas = document.getElementById(\"canvas\"); // get the canvas object var ctx = canvas.getContext(\"2d\"); // make sure we have a context for that canvas so we can draw stuff var FrameSize = 120; //120 pixels var FrameNumber = 0; //obvious var img = new Image(); // make a image object img.src = 'sprite_ani.png'; // url to the image var last = 0; // no idea function Render() { ctx.clearRect(0,0 ,640,480); // clear screen now = performance.now(); //to get the current timestamp in milliseconds delta = now - last; // last is 0, how does this work? last = now; // last is now, why? if(delta > 20 //what does this value represent??) { FrameNumber += FrameNumber + 1; // increment FrameNumber by 1 could have been FrameNumber++ delta = 20; // No idea why I need to keep this the same number?? } if(FrameNumber>=4){ //just to make sure this is the end of the frame number sequence FrameNumber = 0; // to reset the frame number } ctx.drawImage(img,FrameSize*FrameNumber,0,120,120,0,0,120,120); /* perticularly draw a sequence of images and switch each individual image in that sequence based on the equation FrameSize (number to multiply the pixels by) * // multiply operator symbol FrameNumber (the pixels for the FrameSize to multiply with) */ window.requestAnimationFrame(Render); // do the Raf stuff part one } window.requestAnimationFrame(Render); // do the raf stuff part two }\n\nAs you can see, it's extremely simple yet, I'm still struggling to not only understand it but extremely simply implement it, I'm not a fan of over-complicated coding hence why I ditched c++ ages ago.\n\nCould someone in extremely simple English guide me through time-based sprite animation in the context of JavaScript preferably but can be any other language, Id also really appreciate various time-based sprite animation methods being explained too in extremely simple terms but not holding out, I thank you for reading this far.\n\n@ddlox\n\nMy engineering background could be considered the verb of sublime perhaps, I'm much better with idea's formulated within and around abstract realism/realistic abstractions in one form or another in a creative expression like music, art, etc, I need instant gratification at times to enjoy somethings, however, to answer you directly “sorry”, I've got hefty sparse computer knowledge to be fair, I could probably have a simplified conversation with a deep technical programmer/engineer at a slow pace to some extent unless he started talking about some very deep physical computer topic like how a rocket computer works and asked me confusing questions relating to it, ya, I've also programmed 3D prototype game engines in c++ with old and modern OpenGL this is without knowing answers to questions like the one I asked today and I was much younger but of course they were limited and lacking extremely haha if that helps, I learn in preferably very originate throw stuff together kinda way rather than a methodical logical computer-minded technique like a logician would or a careless just get it done swiftly mindset like a strategic mastermind type of person regardless of hedonistic qualities, however I'm able to dabble in those techniques if I have too, I am an emotion visionary and somewhat selfless idealist after all ?, which might not suggest my abilities but if you look into the shadows, you'll see a fidelity much more than light it self.\n\nId like to add that I've worked in a lot of languages like C++(WxWidgets, Win32, Qt, SDL, OpenGL. SFML), C (Win32, etc), Java(Slick2D/LWJGL/Swing/JavaFx), JavaScript(many libraries here), got 3D models on the screen or 2D images, etc, GLSL shaders, messed about with assembly language very mildly in various ways including NES, SNES, stuff played about with GBC code, etc, I'm pretty hardcore but maybe not as much as some others of course.\n\nEducation is definitely sublime in a lot of area's in one form or another, in terms of schooling, not much to write home about very brief and lacking, I learnt most of my stuff from the internet nowadays anything else was from people, books, school, myself, etc.\n\nI enjoy the ability to go deep into stuff right down to the origin and also find myself fascinated by the creative potential of programmatic control, it's like being able to do whatever, you want nearly if you can program, then you can probably build a computer from scratch in one form or another or you can make a video camera, etc it sounds dumb at first but think about it, binary programming is about as hard as it gets in creativity within and around inside and outside the scope of fidelity unless we go to an energetic level then we are at the limitation of everything which itself is a binary network of mechanical and or radiant energy (in my opinion) and plus, I see individuals like Bisqwit, Javidx9, John Carmack, etc on various sites and experience a sense of missing out on the creative potential of binary programming.\n\nHope that answers your questions and no problem though it's nice to have the consideration as an option.\n\nDominic Hughes said:\n\nHope that answers your questions and no problem though it's nice to have the consideration as an option.\n\nok i sorta understand your background, i'll keep my explanation very simple indeed;\n\nthanks and apologies for late reply… i shutdown for christmas -?-, but i see that u have received some decent answers; so i will only touch on what has not been answered (in simple explanation);\n\nAnimation these days comes in various forms, but forget everything for a moment…let's picture this for a moment:\n\nlook outside through your window, look at a tree and focus your attention on 1 leaf only of that tree ;\n\nnow look at your watch (or wall clock) and every second try and see how that leaf behaves;\n\nthere are 2 things you should understand with this picture scene:\n\nthe leaf moves (or is animated by the wind) every time (but in our case every second) that you have looked at your watch:\n\nthis is called “time-based” animation\n\nnow imagine if you could draw by hand on the surface of your window (using a Marker pen or so) every position that this leaf was animated to by the wind:\n\nthis is called “frame-based” animation\n\nThese 2 concepts aim to achieve the same objective: the animation of the subject-matter (in our case the leaf);\n\nThe main difference between these 2 forms of animation is that:\n\nin time-based animation, time drives the animation like this:\n\nyour game engine continuously announces the time (like your watch) and everytime a pre-defined time of interest has been announced (like 1second) then you animate the subject-matter\n\nSo if you want to animate your leaf every second, then everytime your engine tells u that a second has elapsed (since the last time it drew something) then you animate this leaf;\n\nin frame-based animation, each video frame count drives the animation like this:\n\n(note: each time you had to draw a new leaf on your window without lifting your pen counts as a video frame rendering), so in analogy your game engine can be coded such that it can continuously announce/notify you each time it is about to draw without lifting its pen, that is, everytime a pre-defined number of frames has been announced (like 24 frames) then you animate the subject-matter\n\nSo if you want to animate your leaf every 24 frames, then everytime your engine tells u it is about to draw on its 24th frame (since the last time it drew something) then you animate this leaf ;\n\nnote: when i say “since the last time….”, it means:\n\nthe game engine has to be able to reset time to be able to tell how much time is elapsing from the last time, this is simply like pressing a timer reset button (like on real stopwatches: Start | Stop | Reset )\n\nlikewise the game engine has to be able to tell how many video frames have gone on (or been displayed), so that when it gets to the frame of interest it can draw what we want on it\n\ni hope so far this makes sense, if not, read again until it sinks in a bit ?\n\nsome game engines have one or the other methods implemented, others have both, it depends on what you want to achieve, how you want to achieve and also very often how the animation data is stored (but let's not go there)…\n\nso let's pick a real example now: GRID5 from Codemasters:\n\nwhen the company Codemasters claims that their game engine can render GRID5 the game at 60 FPS, it means:\n\nin frame-based animation: their engine can animate our leaf up to 60 times (frames) a second; so within 1 second of time, that leaf could have been animated 1 to 60 times;\n\nin time-based animation: their engine can animate our leaf approximately every 16.66666667milliseconds; how do we get to this number?\n\nif 60 frames are rendered in 1 second which is 1000milliseconds then 1 frame can be rendered in (1000/60)msec\n\nnow you can imagine that with more than just 1 leaf to render, it does take a lot of code effort to render everything (not just a leaf) in under 16msec (but that's discussion for other web forums -lol-)\n\nanyway now let's answer some of your questions (the Render( ) you have presented contains both time-based and frame-based code):\n\nvar last = 0; // no idea\n\nRemember I mentioned about RESET: well, this is how you tell the engine to reset its time-based counter and later on, instead of resetting to 0 again, you just reset it to the current time:\n\nlast = now; // last is now, why?\n\nwhy? because the current time is no longer 0 it has moved on and is depicted in now, so by storing now into last you are telling the engine to effectively reset its time-based counter to the current time in now ?\n\nnext:\n\nif(delta > 20 //what does this value represent??) {\n\nfirst of all you should not put a comment like this, it should be like this:\n\nif(delta ≥ 20) { //what does this value represent??\n\ni assume that was probably an editing error as you typed your question;\n\nso what does 20 represent?\n\nBecause you are calculating time in millisecs as in this line:\n\nnow = performance.now(); //to get the current timestamp in milliseconds\n\n20 is therefore 20msec\n\nRemember I mentioned pre-defined time?\n\nwell, 20msec is the time-based pre-defined time at which you want to animate your \"leaf\"\n\nand delta is used to measure time since the last time the engine drew something and if the time difference since the last draw is more than 20msec then your code increases the frame number;\n\nif GRID5 does this every 16msec which means that every 1000th msec, it draws: 1000 / 16.6.. = 60 frames,\n\nyour engine does this every 20msec which means that every 1000th msec, your engine draws: 1000 / 20 = 50 frames\n\ndelta = now - last; // last is 0, how does this work?\n\nyes last is 0 when then engine's stopwatch called performance in your code started, but the next time the Render( ) function is called again last will not be 0, this has been explained to you by @stardog earlier\n\nnext:\n\nDominic Hughes said:\n\nFrameNumber += FrameNumber + 1; // increment FrameNumber by 1 could have been FrameNumber++\n\nthis has been explained to you by @alberth\n\nnext:\n\nDominic Hughes said:\n\ndelta = 20; // No idea why I need to keep this the same number??\n\nyou keep it the same number because you want to the same action the next time delta is the 20th msec again, why? because that's when frame number is increased in your code, in other words, everytime your stopwatch performance hits its 20th msec you increase frame number and then you press the reset button, which is the same as saying: delta = 20;\n\nyou can change 20 to whatever you want, but that would change the engine's behaviour as well\n\nfinally,\n\ni can see that from previous explanations from other fellow posts, u have improved your Render( ) already, and @8observer8 has also given u a decent improved version of your code;\n\nso hope u see the light a bit more now, and i hope my explanation was simple enough to understand;\n\nAll the best and have fun ?"
    }
}