{
    "id": "dbpedia_988_3",
    "rank": 95,
    "data": {
        "url": "http://androidarts.com/Amiga/ZX.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Zed",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://androidarts.com/Amiga/QX cases.jpg",
            "http://androidarts.com/Amiga/QXPrism keyboard.jpg",
            "http://androidarts.com/Amiga/QX keyboard.jpg",
            "http://androidarts.com/Amiga/Roper.jpg",
            "http://androidarts.com/Amiga/zx os 2x v52.gif",
            "http://androidarts.com/Amiga/ZX17b.jpg",
            "http://androidarts.com/Amiga/ZXjoy2.jpg",
            "http://androidarts.com/Amiga/K120.jpg",
            "http://androidarts.com/Amiga/ZX81exw.jpg",
            "http://androidarts.com/Amiga/ZX91.jpg",
            "http://androidarts.com/Amiga/ZXULA.jpg",
            "http://androidarts.com/Amiga/Z80X2.jpg",
            "http://androidarts.com/Amiga/Runner.gif",
            "http://androidarts.com/Amiga/QX-PPU.gif",
            "http://androidarts.com/Amiga/PrinKong2.jpg",
            "http://androidarts.com/Amiga/AtariXE.jpg",
            "http://androidarts.com/Amiga/Fantasy2.gif",
            "http://androidarts.com/Amiga/Backpackers.jpg",
            "http://androidarts.com/Amiga/Horace.jpg",
            "http://androidarts.com/Amiga/PanPacC.gif",
            "http://androidarts.com/Amiga/TapeD.jpg",
            "http://androidarts.com/Amiga/DuoTape.jpg",
            "http://androidarts.com/Amiga/Z80MoboAgain.jpg",
            "http://androidarts.com/Amiga/DataCart2b.jpg",
            "http://androidarts.com/Amiga/MekaDizzy.jpg",
            "http://androidarts.com/Amiga/YolkAnatomy2.jpg",
            "http://androidarts.com/Amiga/zxtris.gif",
            "http://androidarts.com/Amiga/RoguePx.png",
            "http://androidarts.com/Amiga/Rogue copy.jpg",
            "http://androidarts.com/Amiga/ScatterBrain.jpg",
            "http://androidarts.com/Amiga/RedFDD.jpg",
            "http://androidarts.com/Amiga/Zakus.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "ZX Spectrum",
            "Sinclair",
            "Art",
            "redesigns",
            "games",
            "Android Arts",
            "PSG",
            "Prometheus",
            "Retro",
            "Concepts"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Game projects and art.",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "ZX Computer thoughts\n\nZX Spectrum\n\nThis project escalated into its own page. I never saw the ZX Spectrum over here in Sweden, but I can understand its appeal. Cheap unit, cheap games, and booting right into a programming environment. As usual, I'd like to design my own, modern version based on the same philosophy... except it wouldn't be cheap because I'm obsessed by ASICs and nice injection moulded cases.\n\nSome initial sketches. Also some Macs. Some sort of mini printer, and a 2\" floppy (nod at the micro drive).\n\nThe keyboard is a mix of the QL and ZX. I'm thinking it is a full ZX which can be slaved as a keyboard to a mini mini-computer/mainframe. The mainframe (only in name as it isn't all that powerful) can connect to several keyboards. I abandoned this concept.\n\nA case design which I don't really like anymore.\n\nMoving onto 2017. Quick and rather random case sketch.\n\nA window manager doesn't really lose much functionality in tiled mode, if it just has to do the basic file stuff. 16:9 / 48:27 tiles. In a world of black-box OSes, even on (supposedly) learning oriented platforms, the computer accessibility (and ownership) philosophy of the '80s, augmented by modern advances, would be... ... *memories of having typed all this before*\n\nI'd simplify the GPU. A bitmap/screen mode, and tile mode, both being 1-bit, with a 4+4 bit colour attribute byte per tile (rather than 3+3+1+1 bit). Tile mode has a name table. Scrolling? The GPU has a local line buffer to minimize redundant memory access (and make scanline doubling easier, as this might be aimed for modern displays). The Spectrum would apparently have to re-read attributes, which is why it can do MSX-style per-line colours with some work. Perhaps some of the RAM has video priority.\n\nPalette here is WIP (v5.2). It was initially more graphical and saturated, but I decided to give more of a natural or photographic focus. By replacing the bright magenta with a brown it lost graphical width, but gained the ability to... do strip poker games.\n\nCrash in-print palette\n\nHonestly, I have mostly forgotten how graphics looked on old TVs. I know there's a problem with gamma in emulation (graphics looking pastel/washed out). Colour vibrancy might have been different too. Anyways, oftentimes, the first impression (and only impression) we got from games back then was in print, so I wanted to see how that palette looked. Photographing TVs with film, then printing, does introduce a lot of variance, but ultimately that's what we saw. Mind, the scans I used might be from yellowed magazines and I didn't use that many sample points. Also, it's hard to tell the brightness levels apart so I sorted coloors just by hue. Then I averaged together into a palette and used that to inform my own WIP palette, and then I made a bunch of haphazard feel-good changes.\n\n35th anniversary! But, how would the original Speccy case look with the half-height keys of my Logitech K120 budget keyboard, which I quite like? I dunno... maybe? A bit tight/noisy/packed perhaps. I do like both the look and feel of these keys though. I changed the key layout (48 keys, incidentally) so it won't be legacy-friendly. Using the K120 keyboard as a base, the entire right side has been moved two keys in (no loss to a Swede as those are mostly our weirdo keys which are not used in programming). Gaming is now done with WASD, L-Shift and Spacebar. Actual character layout hasn't really been optimized. Tab and CapsLock are perhaps a waste.\n\nI'm thinking this machine uses a custom BASIC dialect so all those labels are just placeholders. Function keys are shifted numericals I suppose. I ignored the convention of only placing shifted characters high on the key. A programming language would be automatically tokenized in RAM and textified on screen, saving a ton of memory and making block management/shuffling faster due to compactness.\n\nAnyways, I can imagine this keyboard being quite usable even in a small format. Spacebar-ing with the right pinky does actually sort of work, but it does leave the thumbs a bit useless. Wait, \"small\"? In truth, if using the K120 keys, this case would have to be around ~29cm wide and not 23.3cm like the original. Still quite light and easy to plop in front of the tellie though, especially now when PSUs are so nimble for low power systems.\n\nI wrote a keyboard mouse in BASIC for my HB-101 MSX. A hardware implementation of that could be fun, e.g. holding red shift and moving cursor with WASD, with some simple momentum to make it more analog. Should draw a little mouse arrow on red shift key. Q & E for mouse buttons. PageUp/Down, Home, End on green modifier key + WASD?\n\nAforementioned K120 keyboard - already looks a bit Speccy-like.\n\nDrew the keyboard. Case had to be a bit longer. Probably doesn't make sense to use BASIC shortcut keys with a proper keyboard, plus it makes the keys really busy and hard to manufacture. Floppy drive!\n\nI like PLCC44.\n\nThinking about hardware design for this (a new zx system in general), the goal must be to design a primitive, consistent but also convenient learning/tinkering system. If too primitive, developing natively on it will be a hassle. Recently I've been using my Amiga 1200 a bit and it's surprisingly self-sufficient, with AMOS and Deluxe paint functioning well. Developing on the Speccy is a lot harder, but with a mouse, better keyboard, storage and some decent programs it doesn't have to be. I think most of the ZX identity springs from the graphics. Z80 processors are still around in various flavours, costing about Â£3-5. My ideal fit for this project doesn't exist, but it would be a 8-20MHz in a cute 44-PLCC package, which has room for 4 extra address pins (64KB*2*2*2*2 = 512KB). Some onboard flash for booting might be nice too. There is a close fit, the eZ80 series which supports both 16 and 24-bit addressing and comes with flash. However, it's a bit cluttered by other things and doesn't come in PLCC form.\n\nA regular Z80 with bank switching would sort of work I guess, but I think in order to offer a nice development environment it will need extra RAM and it shouldn't be a (confusing) chore to keep track of the Program Counter. I had some idea of using different 64K banks for different programs... allowing a form of cooperative multitasking (or alt-tabbing) by moving between banks. This promotes a sort of clean/\"nice\" 64K limit, whilst allowing various development environments to persist in the background. It also offers a form of primitive memory protection (the OS hibernating in bank 1 would be pretty safe from the irresponsible user's wild poking in bank 2). Kind of kawaii to have programs running on discrete 64K chips, ~ne? SRAM would be cleaner than DRAM me thinks. Bit pricey though?\n\nBranching off graphics and sound memory is another idea for freeing up memory for programs. Last option I can think of is the Z180, which has an onboard MMU and I settled on this one for my Famicube design. Hmm, apparently I sketched on another Z180 system a while back. Not much of a cartridge guy though.\n\nColour clashing is perhaps both the charm and curse of the ZX spectrum. Basically, game characters will blend into the background (tile) colours, as they have no colour themselves. For my PPU, I want to keep some of that effect. It'll be useful for transparency effects, like water, mist or tinted windows.\n\nNormally I think the Speccy inverts the characters onto the backhround, but to make the graphics readable, some games erase the background with a mask that's often a bit larger than the character. This creates an outline effect. It also means that the graphics are basically 2-bit, like e.g. the NES, which has 3 colours plus transparency (4).\n\n4 colour sprites isn't Speccy-like though, so I'm thinking of implementing the clash effect just for the outline, creating a sort of coloured halo around the characters if the designer chooses. Furthermore, background tiles have a flag for also colourizing the remaining two sprite colours.\n\nI have begun working on a PPU emulator. Because of the colourized 1-bit look is the appeal here, it doesn't quite make sense to use e.g. a wasteful 4-bit nibble frame-buffer, as that would allow fancy 16-color footwork and eat up VRAM. I have other projects for that kind of stuff anyways. My PPU currently goes for the following architecture:\n\nStatic 16 colour palette (likely only defined in the output DAC).\n\n384x216, 48x27 tiles, a modern 16:9...\n\nVRAM up to 64K but support for less, meaning, base addresses for graphics and tables/maps can be set. My idea is that the machine was eventually scaled up, the reason for the 1-bit graphics being initial memory scarcity. The simplest display requires about [ 48*27*3 = 3456 + 1*8*256 = 2048 + entries, a sprite ], so under 8K I guess?\n\nPPU can be set up during vblank (just reads from VRAM that has been set up?) but is quite independent in that it doesn't require scanline-based nannying. It can however do some scanline-based tricks for h-splitscreen and sprite column \"shearing\". VRAM would be in contention, as the user might try to update graphics and entries maybe whilst the PPU is trying to read. For this reason I think it should be fairly competent and independent, having a defined setup-window each frame.\n\n1-bit background tile graphics 1x8 bytes each.\n\n2-bit sprite graphics with transparency and weird clash colour.\n\nThe byte-sized BG tile tables/maps have three planes (at variable location):\n\nAddress of tile graphics.\n\nTwo 4-bit colour-byte nibbles setting back and foreground color.\n\nAdditional address bits and some flags for h-flip, full-clash, sprite-cover.\n\nBuilt in support for large tables/maps with fractional sub-tile scrolling. Scrolling is currently simply set by feeding it x and y pixel coordinates. Bounds are enforced automatically.\n\nSprites are 16 wide columns, maybe 8 or whatever the timings allow. The PPU has a registry for each column. When a sprite has been drawn to its full height, that column is updated from an entry in VRAM on scanline porch. By setting up these entries in VRAM, the columns are re-used and various effects can be achieved.\n\nAn entry needs to store: On/Off, H-flip, Address to graphics start, Width (in tiles) (determining address forward skip on scanline), Height in scanlines, determining when the next entry is read. X-position (will have to be up to 512, hard coords), Placing things partially outside of the screen gets a bit complicated. Doesn't matter for bottom, but at top I guess incrementing the address and decreasing the height will solve it. Left and right slightly trickier.\n\nI do not like 16:9, but it's the common screen format now. Outputting unscaled lowrez video to a modern screen will likely blur it terribly, but I do not wish to use a modern video scaling chip. One solution might be to 2X the video signal. Easy for horizontal pixels, but duplicating the scanlines might require a scanline buffer (a screen wide 4-bit pixel row), otherwise the chip has re-do lots of old work. I'm thinking of adding a few flags, so I can process the sprite columns separately on top (or below). Finally, the line is fed to the DAC (4-bit inputs), twice with the timings necessary.\n\nI'm also thinking that a buffer for tiles would reduce VRAM access to 1/8th, as the tiles are 8 pixel tall and would otherwise have to be re-read each new scanline.\n\nSplitscreen could be supported by entires similar to those of the sprites. Entry: Base addresses for the various tables/maps, X&Y scroll, Height in scanlines (i.e. when to read the next entry from VRAM).\n\nMinor change to the palette here, the dark brown is now grey, which provides a less biased base for shadows. However, the plan for the dark brown was to provide skin-tone and nature support, so I'm on the fence. Having trouble keeping memory access down for the PPU. Maybe the PPU supports horizontal flipping. Maybe a foreground/background flag? Maybe a Color clash flag, for water and tinted window transparency effects? However, tile address needs at least a full byte, as does the color attribute, unless I use e.g. 32 palettes (5 bits) but that's a reference and possibly more memory access. In the NES, the color attribute is a 4-bit nibble (2 per byte), so that's one approach.\n\nHome Taping is ...\n\n...probably helping to sell machines, grow the platform and thus increase the amount people who buy legitimately, and it's also as we have learned, a way to preserve. ZX tape games were really cheap though. It's a balance if you ask me. What? Home taping is no longer a controversy? Anyways... some time ago I was looking into old tape and wire tech. Always thought it would be cool with a sort of random access tape, but finding files is a problem. The Microdrive used a short loop and zipped through it. Pretty cool. My solution also involves custom hardware.\n\nSingle sided tape cartridge of unusual design. It's single-sided so flipping over doesn't make sense, meaning, backside could perhaps be full label. No need for holes there.\n\nTwo separate tapes can be controlled by the capstans. One tape is really short and contains the file allocation table. The longer tape contains the files, along with location marks made when formatting. This way the system can quickly figure out where it is at, and also has immediate access to a single FAT entry. The solution of using two separate cassette tapes requires two calibrated players and constant pairing with no mistakes. My tape cartridge would of course require an expensive custom datacorder. By Sony.\n\nAnother MoBo blurb. My not-speccy might have four 64K banks so I wanted those to be tidy. A large SRAM is simpler but looks kinda poop. Tilted PLCC! Sockets everywhere! Missing memory pulled to FF or whatever and detected as unwritable on boot. At first I was thinking 9-wire cables for joypads etc, but those can be a bit thick I guess. If going serial, 5 might be enough. I don't like USB, but the plug for USB-B is actually nice and chunky and plugs in cleanly... but anachronistic and nonstandard if I use with shift register communication. Hmmm. PS2? DE-9?\n\nCartridge with cassette dimensions. The manual would feature a full colour cover, but the interior would be duo-tone (dark blue, warm red), like the Space Hunter (fc) manual. It could probably be some 16 pages. Cassettes are pretty thick at the bottom and thin at the top, making them wobble, but this cartridge can be more even thick. I've curved the bottom bit gently because that feels more sinclair'y. Internally, wall placement has to be considered as walls will put dimples on the exterior due to shrinking. Screws on back. Not sure how many would be needed, but two is a cost saver. Perhaps some of the internal front/back walls interlock/mate to improve rigidity. Trivia: Apparently the Famicom carts were initially supposed to be cassette sized.\n\nDizzy\n\nHardware pages\n\nAmiga HDD - Amiga cleanup - Amiga pixels - SBC - Assorted - MSX - Acorn project - Amstrad project - ZX project\n\nArt by Arne Niklas Jansson"
    }
}