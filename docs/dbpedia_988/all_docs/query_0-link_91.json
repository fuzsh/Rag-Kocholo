{
    "id": "dbpedia_988_0",
    "rank": 91,
    "data": {
        "url": "https://www.cs.utexas.edu/~theksong/teaching/cs324e/su2023/",
        "read_more_link": "",
        "language": "en",
        "title": "Su2023 CS 324E",
        "top_image": "https://www.cs.utexas.edu/~theksong/favicon-32x32.png",
        "meta_img": "https://www.cs.utexas.edu/~theksong/favicon-32x32.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Kevin Song"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "CS 324E is a course on computer graphics intended for non-major students. The course uses Processing, a Java-based language, as a starting point to explore various topics in computer graphics, including, but not limited to:",
        "meta_lang": "en",
        "meta_favicon": "/~theksong/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.cs.utexas.edu/~theksong/teaching/cs324e/su2023/",
        "text": "CS 324E is a course on computer graphics intended for non-major students. The course uses Processing, a Java-based language, as a starting point to explore various topics in computer graphics, including, but not limited to:\n\nimage manipulation\n\ntransformation hierarchies\n\nmotion and sprite-based animation\n\nshading and lighting\n\nsimulation of various systems, such as\n\nparticle systems\n\nflocking\n\ncellular automata\n\nIn addition, the class has an emphasis on using inheritance-based object-oriented programming to simplify the behavior of code, and students learn to program in the event-driven asynchronous global state-machine style which is common to graphics applications, but is relatively alien in the rest of the CS curriculum.\n\nThis course is primarily managed on Canvas. However, since I believe in making course materials available, I am making the class materials and assignments available here. Since some of these are HTML that is recovered from Canvas, the formatting may be slightly wrong.\n\nClass Syllabus\n\nClass Slides #\n\nFor reasons that are unclear to me, the slides for class 14 simply do not work correctly as a PDF (perhaps an export problem from reveal.js) so I have linked their source in the online editor that I use. The rest of these slides are presented as PDFs.\n\nClass 1: Introduction and Shapes\n\nClass 2: Attributes, Modes, and Color\n\nClass 3: Images\n\nClass 4: Interactivity\n\nClass 5: Object Oriented Programming\n\nClass 6: Composition and Inheritance\n\nClass 7: Scene Hierarchies\n\nClass 8 became part of class 10 due to scheduling issues.\n\nClass 9: Transformations\n\nClass 10: Shapes and Interpolation\n\nClass 11: 3D Shapes\n\nClass 12: Lighting\n\nClass 13: Materials and Textures\n\nClass 14: Simulation and Particle Systems\n\nClass 15: Physical Simulation\n\nClass 16: Cellular Automata\n\nClass 17: GUIs\n\nClass 18: Collisions\n\nClass 18 (Defunct): Timers and Animation\n\nClass 19: Data Storage Formats\n\nClass 20: Graphics Hardware\n\nClass 21: Intro to Shaders\n\nBonus Class 1: Procedural Generation\n\nBonus Class 2: Raytracing\n\nClass Programs #\n\nThese are programs that were either written in-class as a demonstration, or meant as examples for students who were interested in certain topics.\n\napplyKernelTo\n\nA program which demonstrates applying a kernel to a specific pixel of an image, but correctly (the version in the lecture was originally flawed).\n\nBeep Beep\n\nA program which demonstrates the power of transformations, by moving various objects within other objects’ coordinate systems.\n\nBezier Demo\n\nA GPT-written program which visualizes the control points of a Bezier curve, making it easier to understand how the control points work.\n\nCollisions\n\nA program which somewhat-physically-correctly handles collisions using impulse-based forces. Explicit Euler integration makes it somewhat unstable.\n\ndrawCellularGrid\n\nA snippet which was used for the CA Hands-On activity. This made it much easier to visualize a grid of cells without having to resort to pixel-sized cells.\n\nMaterials Demo\n\nA demonstration of how materials and lighting interact in Processing.\n\nOverload Demo\n\nA Processing program which draws a bunch of boxes in 3D. Was used to demonstrate that Processing can be fairly efficient in drawing lots of 3D geometry, even when you’d think it shouldn’t be.\n\nAlso demonstrates the use of an edge-based key detection system which allows the program to register multiple keypresses simultaneously.\n\nSpring\n\nA simple program demonstrating a box on a spring in 2D.\n\nTextures Demo\n\nDemonstrating texturing a quad, box, and sphere.\n\n3D Demo\n\nShows how to display various 3D geometry in Processing.\n\nAssignments #"
    }
}