{
    "id": "dbpedia_988_0",
    "rank": 11,
    "data": {
        "url": "https://medium.com/%40fakgun/what-do-you-recall-when-somebody-mentions-computer-graphics-part-1-9b3a334e828e",
        "read_more_link": "",
        "language": "en",
        "title": "What do you recall when somebody mentions “Computer Graphics” ~ Part-1",
        "top_image": "https://miro.medium.com/v2/da:true/resize:fit:1024/0*Ehw05pR6h8XO_QZp",
        "meta_img": "https://miro.medium.com/v2/da:true/resize:fit:1024/0*Ehw05pR6h8XO_QZp",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*vrdwm9688aTIQ1RKQuUu8w.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*vrdwm9688aTIQ1RKQuUu8w.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Furkan Akgün",
            "medium.com"
        ],
        "publish_date": "2023-12-30T08:28:20.215000+00:00",
        "summary": "",
        "meta_description": "This article is a very basic research for those who are interested in computer graphics like me. I’m currently interested in computer graphics and I decided to make this article to visualize things…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@fakgun/what-do-you-recall-when-somebody-mentions-computer-graphics-part-1-9b3a334e828e",
        "text": "Furkan Akgün\n\n·\n\nFollow\n\n9 min read\n\n·\n\nDec 30, 2023\n\n--\n\nThis article is a very basic research for those who are interested in computer graphics like me. I’m currently interested in computer graphics and I decided to make this article to visualize things for those who are also starting to research computer graphics. As a student, I was always interested in this area but I had never a chance to work on it. Now I’m working on GIS applications and now I’m really into deep research and I’m going to share what I’ve learned with this journey.\n\nContent\n\nWhat frameworks, libraries, and languages are in this field\n\nThe base theorems of computer graphics.\n\nThe well-known universities’ computer graphics courses and the common outcomes\n\nBasic program with OpenGL\n\nWhat frameworks, libraries, and languages are in this field?\n\nIn the field of computer graphics, especially within computer science, there’s a rich array of frameworks, APIs, and libraries that are commonly used, each serving different purposes and catering to various needs in graphics development.\n\nLow-Level 3D APIs\n\nThese APIs offer direct control over the hardware and are essential for high-performance graphics rendering:\n\nOpenGL: A cross-platform API for rendering 2D and 3D graphics, supported on a wide range of platforms including Windows, macOS, Linux, and mobile operating systems. It’s widely recognized as the standard in computer graphics development.\n\nGLEW (OpenGL Extension Wrangler Library): GLEW provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform. It helps in managing OpenGL extensions across various platforms and driver versions. It simplifies the process of accessing advanced features in OpenGL that may not be available in the core version.\n\nGLFW (Graphics Library Framework): GLFW is a lightweight utility library for use with OpenGL. It provides a simple API for creating windows, contexts, and surfaces, receiving input and events. GLFW is particularly useful for developing portable software that runs across various operating systems, as it handles operating system-specific tasks like window creation, OpenGL context initialization, and input handling.\n\nSDL (Simple DirectMedia Layer): SDL is a cross-platform development library designed to provide low-level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D. It is used for game development and other multimedia applications. SDL handles graphics, sound playback, and input, making it a versatile choice for media applications.\n\nTogether, these libraries offer a comprehensive toolkit for developers working on graphics-intensive applications, especially in gaming and real-time simulations. They abstract away many low-level tasks, allowing developers to focus more on the creative aspects of their applications.\n\nDirect3D: Part of Microsoft’s DirectX suite, mainly used in Windows-based systems for rendering 3D graphics. It’s known for its comprehensive collection of multimedia APIs.\n\nVulkan: A modern API providing high-efficiency, cross-platform access to modern GPUs. It’s known for its low overhead and ability to handle complex scenes.\n\nWebGL: A JavaScript API that brings 3D graphics to web browsers without plugins. It’s based on OpenGL ES and is ideal for web-based graphics applications.\n\nHigh-Level 3D APIs and Frameworks\n\nThese provide additional functionality on top of lower-level APIs and are often more accessible:\n\nThree.js: A JavaScript framework built on WebGL, simplifying the creation of 3D graphics in web browsers. It’s known for its ease of use and extensive feature set.\n\nUnity: A powerful game development framework supporting both 2D and 3D graphics. It’s popular due to its comprehensive toolset, visual editor, and scripting API.\n\nUnreal Engine: Known for its high-fidelity, realistic graphics. It’s used not only in game development but also in architectural visualizations and VR applications.\n\nOther Notable Frameworks and Libraries\n\nThese include more specialized or platform-specific options:\n\noryol/sokol_gfx: Lightweight C/C++ frameworks, with oryol offering a more high-level approach and sokol_gfx being a header-only single file library for C.\n\nMethane Kit: Based on C++17, focused mainly on desktop compatibility, particularly Windows/Mac.\n\nbs::framework: An integrated framework offering functionalities similar to game engines like Unity or Unreal Engine, based on C++14.\n\n2D Graphics Libraries\n\nFor 2D graphics, there are several libraries worth noting:\n\nCairo: A 2D graphics library supporting multiple output devices like X Window and Win32.\n\nSkia: An open-source 2D graphics library used in Google Chrome, Android, and more, supporting various back-ends including OpenGL and software rasterization.\n\nThese tools and languages represent the backbone of computer graphics in computer science, each bringing unique capabilities to the table. Depending on the specific requirements of a project, such as platform compatibility, performance needs, or the level of control over the graphics pipeline, developers can choose the most suitable tool or combination of tools.\n\nThe base concepts and principles of computer graphics.\n\nComputer graphics merges art and technology, focusing on creating and manipulating digital visuals. Key aspects include 2D and 3D transformations for object manipulation, rasterization for turning vector graphics into pixel images, and geometric modeling for realistic 3D scene rendering. Lighting and texturing add realism, while advanced techniques like ray tracing and global illumination achieve lifelike effects. Understanding camera models and perspectives is also crucial for mimicking real-world views in digital spaces. These principles collectively define the vibrant and evolving field of computer graphics. This is my personal decision to cover these topics. In the next chapter, we’ll discuss the common university’s computer lecture outcomes course topics.\n\nThe base concepts and principles of computer graphics can be divided into several key areas:\n\nRay Casting\n\nRay casting is a computational technique used in 3D computer graphics to create two-dimensional images from three-dimensional models. It works by projecting imaginary rays from the viewpoint of the observer, typically a virtual camera, through each pixel on the screen into the 3D space of the model. The point where these rays intersect with the objects in the 3D scene determines what will be visible at each pixel in the final image.\n\nTo visualize this, imagine standing in a room with a flashlight pointing at a wall. Each spot of light on the wall represents where your flashlight’s rays have intersected with the wall’s surface, similar to how ray casting finds the surfaces in a 3D model.\n\nThe beauty of ray casting lies in its simplicity and versatility. It can be explained to non-technical audiences by comparing it to how light travels in the real world and how our eyes perceive it. Rays of light from an object travel to our eyes, allowing us to see the object. In ray casting, the computer reverses this process, sending rays out from the viewpoint to the virtual world and determining what it ‘sees’ along those rays, thus creating a visual representation of that world on screen. I kept this long but this is one of the best methodologies in 3D computer graphics.\n\nRay Tracing: An extension of ray casting that includes additional calculations for effects like reflection, refraction, and shadows, providing more photorealistic images.\n\nRay tracing is a rendering technique that simulates the physical behavior of light to produce highly realistic images. Unlike ray casting, which simply determines the visibility of surfaces, ray tracing takes into account the way light interacts with materials, including effects such as:\n\nReflection: Light bouncing off shiny surfaces.\n\nRefraction: Light passing through transparent materials and bending.\n\nDiffusion: Light scattering in many directions from rough surfaces.\n\nShadows: Areas where light is obstructed by objects.\n\nEach ray in ray tracing may spawn new rays when it encounters a surface, tracing the paths that light might take as it reflects or refracts. This allows for the creation of complex visual effects such as soft shadows, depth of field, and motion blur. The trade-off is that ray tracing is computationally intensive and has traditionally been used in situations where images can be rendered slowly, such as in CGI for films. However, with advancements in computing power, ray tracing is increasingly being used in real-time applications like video games\n\nScanline Rendering: This technique processes an image line by line, determining the visibility of objects within each line. Used in early graphics systems, it’s efficient for simple scenes. Example: Old video games used scanline rendering for fast, real-time graphics.\n\nRadiosity: Calculates light interaction between surfaces, emphasizing color and light diffusion. Ideal for scenes needing accurate indoor lighting. Example: Architectural visualizations often use radiosity for natural light simulation.\n\nPhoton Mapping: A global illumination algorithm that simulates light reflections and refractions, focusing on complex interactions like caustics. Example: Used in movies to create realistic lighting effects, especially in scenes with water or glass.\n\nPath Tracing: Simulates entire light paths for photorealistic images, accounting for various scattering events. Example: High-end movie CGI uses path tracing for lifelike renderings.\n\nRasterization: Converts 3D models into 2D images by turning vector data into pixels. Key in video games and GUIs. Example: Most real-time 3D applications, like video games, rely on rasterization for quick rendering.\n\nTexturing: Involves applying images to 3D models, and adding details like colors, patterns, and bumps. Example: Video game characters and environments often use texturing to enhance visual realism.\n\nLighting and Shading: These techniques simulate light’s effects on objects, affecting appearance and depth. Example: In 3D animation and games, lighting and shading are critical for creating mood and realism.\n\nRendering: Generating an image from a 3D model, incorporating lighting, shading, and camera angles. Encompasses both real-time rendering for games and ray tracing for high-quality stills. Example: Movie CGI and video games use different rendering techniques for desired visual effects.\n\nAnimation: Creating motion, ranging from keyframe animation to physics-based simulations like fluid dynamics. Example: Animated films use various animation techniques for character movement and environmental effects.\n\nGPU Programming: Utilizing Graphics Processing Units for efficient graphics processing. Example: Modern video games leverage GPU programming for complex graphics tasks.\n\nColor Theory: Understanding how color is represented digitally, including color spaces like RGB and CMYK, is crucial.\n\nReal-Time Rendering: Techniques for rendering graphics quickly enough for interactive applications like video games.\n\nThese principles form the foundation of computer graphics, blending mathematical, artistic, and technical skills to create visual content.\n\nImage Types\n\nRaster Graphics: These are images made up of pixels, and small squares of color. Common in digital photography, they offer detailed and complex images but lose quality when enlarged due to their fixed resolution.\n\nCommon file extensions for raster graphics include:\n\n.jpg or .jpeg (JPEG)\n\n.png (Portable Network Graphics)\n\n.gif (Graphics Interchange Format)\n\n.bmp (Bitmap Image File)\n\n.tiff (Tagged Image File Format)\n\nVector Graphics: Constructed using mathematical formulas to define points, lines, curves, and shapes. They are infinitely scalable without losing quality, making them ideal for logos and designs that need to be resized frequently.\n\nCommon file extensions for vector graphics are:\n\n.svg (Scalable Vector Graphics)\n\n.ai (Adobe Illustrator File)\n\n.eps (Encapsulated PostScript)\n\n.pdf (Portable Document Format, can contain vector graphics)\n\n.cdr (CorelDRAW Image File)\n\n3D Graphics: These images simulate depth and dimension, creating realistic renderings of objects and environments. They’re used in video games, simulations, and animations, offering a lifelike visual experience.\n\nSprite Graphics: Sprite graphics are a fundamental component in 2D computer graphics, especially in video games. They are small bitmap images or animations integrated into larger scenes. They represent discrete objects that can be manipulated independently within a scene. This makes them ideal for games where multiple, movable elements are involved, offering a balance between performance and visual complexity.\n\nThank you for following along, please feel free to drop your thoughts in the comments below. The next chapter is about The well-known universities’ computer graphics courses and the common outcomes\n\nFollow me on Twitter\n\nCheers!"
    }
}