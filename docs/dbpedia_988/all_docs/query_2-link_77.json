{
    "id": "dbpedia_988_2",
    "rank": 77,
    "data": {
        "url": "https://www.nashvail.me/blog/canvas-image/",
        "read_more_link": "",
        "language": "en",
        "title": "How displaying an image on HTML5 canvas works",
        "top_image": "https://www.nashvail.me/icons/icon-48x48.png?v=e0b95de68da9fec55d8b7844eb283dfc",
        "meta_img": "https://www.nashvail.me/icons/icon-48x48.png?v=e0b95de68da9fec55d8b7844eb283dfc",
        "images": [
            "https://d33wubrfki0l68.cloudfront.net/69c38dc7deace05e5cb69560f0c979a5e3b8ece2/f0818/static/236e51f141c8835b7de122ce2c1ad857/8ff1e/documentation.png",
            "https://d33wubrfki0l68.cloudfront.net/555eaab6d6d57612254423934585a9350bd07a1d/5d2c0/static/ada35f4037ed04fec203d9a9c067c989/8ff1e/fig1.png",
            "https://d33wubrfki0l68.cloudfront.net/87ba4813f8c7a0de2d948cd8f2fb281cfd01c6ed/3ba2f/static/eb1f899ed3aeedbfdb762a8a0091caa4/6da3e/fig3.png",
            "https://d33wubrfki0l68.cloudfront.net/2633ab73609b9734bb312c912bc541c8d488b538/84a51/static/7703cd50c2726b54f0782d3a325c78a3/6da3e/fig2.png",
            "https://d33wubrfki0l68.cloudfront.net/aa168f2f35c1d6356c2ad95539300ede53becb74/c9ca9/static/146b179c6ec38721a39a75c5e543eaec/6da3e/fig4.png",
            "https://d33wubrfki0l68.cloudfront.net/c6f0b0afe567e121f10bef3efc76aaf77443dee7/549b9/static/fig5-2ad72218af0f52e02c8eec6f01b2fc16.gif",
            "https://d33wubrfki0l68.cloudfront.net/517a3dda5afb6cd2ff2c5621f25fc4b916430405/e185d/static/4e503eb1309da7aaf2b005b752e0dd2c/a700e/fig6.png",
            "https://d33wubrfki0l68.cloudfront.net/ca82ad898006e44b916c61c654904009983bb3b5/a6d96/static/dc87e6b298a1ec904e64edd7324d277e/a700e/fig7.png",
            "https://d33wubrfki0l68.cloudfront.net/0e5b9af5ddadc7e14326dba7985219957a492d07/59dc7/static/c0ce76f6bd356e018cabecb724acd30e/8ff1e/fig8.png",
            "https://d33wubrfki0l68.cloudfront.net/67d20fe37f48088bd32c132de2c5df8882988b2a/020b2/static/6f43f26e0999e7f1e2f65b213d61820a/8ff1e/fig9.png",
            "https://d33wubrfki0l68.cloudfront.net/be68ad1e11acf34621869c79202b3c19a7b28779/e8802/static/773f1caa32033d8472f1e210b0b34257/6da3e/fig10.png",
            "https://d33wubrfki0l68.cloudfront.net/2115bc50fc3c00bd2a65b2e75f5d1954c1a9309a/38d2d/static/4c444051ce8a9a393e49ac2da1374fe4/8ff1e/fig11.png",
            "https://d33wubrfki0l68.cloudfront.net/4b3f90b22986fb9c2265e9006dd27d916de20ef5/59790/static/0bcabcb66188e7b2e27f59c2966c4629/8ff1e/fig12.png",
            "https://d33wubrfki0l68.cloudfront.net/bc67f5df950c25b93c859427b23fbfb0d275c0ca/a4688/static/bb6190779ee66c4adc9f7d91d562428e/5c0ae/mario.png",
            "https://d33wubrfki0l68.cloudfront.net/7848fe56e88cb22c5effa5aa860e926439a7a247/7805f/static/6bd399cd8fca1c7cde0e05d85520b1d6/8ff1e/mario-grid.png",
            "https://d33wubrfki0l68.cloudfront.net/01739db488fd2dbdb8186945b7e612abc586952f/27394/static/fcf03565a5aea74193e37bf7c86d72a8/374ce/fig15.png",
            "https://d33wubrfki0l68.cloudfront.net/5577bb6c2c38e3b702bdd8f423a2252c0ac278b8/24ec7/static/165ea0543a22d7479a28310de03538bf/8ff1e/fig16.png",
            "https://d33wubrfki0l68.cloudfront.net/c27687c72d32006da0b18ab9baac8e12c9a8bb61/9c818/static/c9f28dc1a6002da02ffe3bcb5336be7e/8ff1e/fig17.png",
            "https://d33wubrfki0l68.cloudfront.net/2eedb882aef531bf56446195f8ad56a097e770cf/bb3d3/static/c39b2f251987e9b27cb84cf2e5344c84/8ff1e/fig18.png",
            "https://d33wubrfki0l68.cloudfront.net/6aec6f53383adbe6cf96000f5ba7b6535537f56b/e3906/static/course_git-f0afac65231848683fd789c12402e724.png"
        ],
        "movies": [
            "//codepen.io/nashvail/embed/preview/REpWNG/?height=400&theme-id=dark&default-tab=html,result"
        ],
        "keywords": [],
        "meta_keywords": [
            "nash",
            "vail",
            "tutorial",
            "code",
            "javascript",
            "css",
            "web",
            "html",
            "courses",
            "illustration",
            "design",
            "philosophy",
            "life",
            "html5",
            "canvas",
            "image",
            "math",
            "tutorial",
            "web development",
            "nash",
            "nash vail"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Dive into the details of canvas's drawImage API, also, learn how to make Mario walk!",
        "meta_lang": "en",
        "meta_favicon": "/icons/icon-48x48.png?v=e0b95de68da9fec55d8b7844eb283dfc",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "A question occurs, \"Why do we need an article for this Nash?\"\n\nOkay, grab a seat.\n\nNo, wait! First, have a look at this.\n\nExactly. What was that?\n\ndrawImage is the method used to display or \"draw\" an image on canvas. You might, or not already know that it's not as simple as just passing the URI of the image to it. drawImage accepts a maximum of 9 parameters. They go something like this, ready? Hold your breathâ€¦\n\nBreathe, out.\n\nI found the documentation for drawImage a little confusing and hardcore. Just the documentation, yes. The concept and how the API works is great for all the needs that it is supposed to serve.\n\nWe'll go over the parameters mentioned above one by one, in a way that'll make complete sense to you. If at any point in the article you find yourself going \"I just wanted to draw an image on my canvas dear Nash. Why put my mind through a ringer?\", it'll be an understandable frustration.\n\nThe way drawImage works does seem complex to some extent, but this complexity makes drawImage immensely powerful, and useful -- as we'll see through examples at the end -- And moreover, the complexity is just on the surface, once you understand the whole picture it's a downhill bicycle ride on a country road somewhere in Europe.\n\nBy the end of this article you'll be able to visualise how drawImage will draw any given image on canvas just by looking at the values of the 9 parameters. Sounds like a superpower you might wanna have? Okay then, let's dive right in!\n\nLoading an image in canvas\n\nLet's start simple with an image and an HTML5 canvas.\n\nHere's what our directory looks like\n\nInside of our index.html file we have created a new canvas element like so.\n\nOur goal is to take the cat.jpg image and put it on the canvas (#my-canvas). And like I already said, it ain't that easy betty! Otherwise I won't be writing this article, you feel me? Good.\n\nTo start with, let's target the canvas element using JavaScript and get its context.\n\nWe need myContext to interact with the canvas element. It's like, if canvas is a blank sheet of paper, the canvas's context is the pen. Intuitively, you'll tell your pen to draw something on a blank sheet of paper, and not just yell at the paper to draw something on itself right?\n\nThere is a number of things you can do with context. You can draw a rectangle, or an ellipse or a line, or, an... image. Also, notice that the context myContext is implicitly linked to myCanvas. You can have multiple canvass and call getContext() on each of them to get a new context/pen for each. In our case we are dealing with just one canvas (myCanvas) and just one context (myContext).\n\nAlright, with that out of the way, we can finally start getting our feet wet with drawImage.\n\nFor a refresher, here are the 9 parameters that drawImage accepts.\n\nWe'll start with the first parameter, image. Let's, like the constitution of many countries, write something that doesn't work.\n\nSee the two zeroes at the end? Good. This is not the part of the article where you're supposed to understand what they're there for. Ignore them for now, just keep in the back of your head that Nash wrote 2 zeroes and didn't explain them. I won't mind.\n\nNow notice ...('./cat.jpg',.. in the line of code above. Appears to be a perfectly correct URI, doesn't it? And it is, buuuut, if you fire up index.html in a browser you'll see a long long error message identical to what's shown below.\n\n*gulp*\n\nThe error is telling us that it needs an image element and not just a URI to the image. To get around that, this is what we can do.\n\nThat is something you didn't expect, did you? Canvas needs a preloaded image in order to draw/display it in itself. No need to show any contempt towards canvas by the way. It has its reason, it's just like the rest of us. We'll eventually see what those reasons are and maybe then you'll be able to sympathise.\n\nTo recap,\n\ndrawImage asks for 9 parameters, first of which is image. We looked and understood that canvas requires a preloaded image to draw and not just a URI to the image. Why does it need that? It will become clear as you read.\n\nNow it's time for the remaning 8 parameters. Pop your collars! I am gonna learn you some graphics editing first!\n\nHow to crop a picture\n\nEvery single, even the most basic of graphics editing programs come with the feature of cropping. It's fairly simple, open an image > select the area you want visible > hit crop. And just like that the naked beer belly of that obnoxious smelling old man is out. Poof!\n\nTechnology! Saving teenage girls' Instagrams since Instagram existed.\n\nLet's take a step back, and stop riiight, here.\n\nLet's mark some points on it.\n\n\"Wait a second! sx, sy, sWidth and sHeight? I have seen them before!\"\n\nYes, about a minute ago! Which leads us to the fleshiest part of the article.\n\nDisplaying an image on canvas, Step 1: Selection\n\nThe first task drawImage performs--behind the scenes--is it selects a portion of the image based on the four s parameters (sx, sy, sWidth, sHeight). You can say that s in all the s.. parameters stands for \"select\".\n\nHere's how it goes. sx and sy mark the point on the image from where the selection is to begin, or in other words the coordinates of the top left corner of the selection rectangle. sWidth and sHeight then, are the width and height of the selection rectangle respectively. You can scroll right up to the last image to get a clearer picture of what I am trying to explain.\n\n\"But why the selection Nash? Can't it just display the entire image?\" We're getting closer to all your answers, patience.\n\nJust know that the first step drawImage performs after receiving a proper image is it selects a portion/area of the image based on the s parameters (sx, sy, sWidth, sHeight) you provide.\n\nRemember that you don't always have to select a small portion of the image, you can select the entire image if you want to. In that case sx and sy will have values 0 and 0 respectively and sWidth, sHeight will be the same as the image's width and height.\n\nAlso, negative values are welcome for sx and sy. The values of sx and sy are relative to the origin of the image on the top left.\n\nOnce drawImage has selected the area of image you asked it to -- and we'll see soon why selecting an area of the image helps -- the next step is to draw the selected portion of the image on the canvas.\n\n\"Originally\" s and d in the official documentation stand for 'source' and 'destination'. But, just between us, let's call it 'select' and 'draw'. It makes much more sense this way, doesn't it?\n\nAgain. selection is done, the next step is to draw.\n\nDisplaying an image on canvas, Step 2: Drawing\n\nTo draw the selected portion of the image, we again need four parameters.\n\nx Coordinate of where to start drawing on the canvas. ( dx )\n\ny Coordinate of where to start drawing on the canvas. ( dy )\n\nHow wide to draw the image. ( dWidth )\n\nHow high/tall to draw the image. ( dHeight )\n\nThe values of dx and dy will be relative to the origin of the canvas.\n\nThere's a very important but subtle detail to notice here. dWidth and dHeight are in no way tied to sWidth and sHeight. They are independent values. Why do you need to know that? Well, because if you don't choose values of the width and height of 'draw' carefully you will end up with a stretched or squashed image, like this.\n\nSo if that's something you're not looking for, which I hope you're not. Make sure to maintain the aspect ratio. Or so to say sWidth divided by sHeight should be equal to dWidth divided by dHeight. That was a small little disclaimer, you're the king of your own world and free to choose whatever values you like.\n\nThe whole process of displaying/drawing an image on canvas can thus be summarised in just two steps. Selection and Drawing.\n\nAwesome! Not so complicated after all is it?\n\nNow at this point, we're done with all the theory. In rest of the article that follows we'll bake the batter of knowledge spread around your head with a fun and practical example and you'll be good to go. But, before we do that, let's talk about one last important thing concerning drawImage.\n\nThe default values\n\nRemember my lecture on \"hey keep the aspect ratio and be careful don't take chocolates from strangersâ€¦\"? Well, as it turns out, you can omit certain values and not worry about the aspect ratio at all. As far as taking chocolates from strangers go, you're the king of your own world.\n\nHere's one way to use the method.\n\nThat is all! In this case you're telling drawImage only the location on canvas where to start the drawing. The rest, sx, sy, sWidth, sHeight, dWidth and dHeight are taken care of automagically. The method selects the entire image (sx = 0, sy = 0, sWidth = image's width, sHeight = images' height) and starts drawing on canvas at (dx, dy) with dWidth and dHeight same as sWidth(image's width), sHeight(image's height) .\n\nRemember the two zeroes that I didn't explain? That is where the two zeroes came from.\n\nYet another way to use the method is,\n\nIn this form sx, sy, sWidth and sHeight are taken care of, and the method automatically selects the entire image and leaves it upto you to choose where and how large of an image to draw.\n\nPretty cool! isn't it?\n\nIf I can have your attention for another two minutes I'd like to tell you why selection and drawing are two separate operations. And how it is helpful.\n\nDo I have your attention? Great!\n\nSo here.\n\nHeard of sprites before? You see, sprites is a computer graphics concept where a graphic may be moved on-screen and otherwise manipulated as a single entity.\n\n...?\n\nI copied this definition from Google to sound suave.\n\nAlright alright. Remember Mario?\n\nGood.\n\nLet's do something fun.\n\nAnimating Mario with drawImage\n\nYou see, when Mario moves forward/backward or in any other direction, it appears as if he is walking. His position changes but also there is an accompanying animation of his legs and hands moving.\n\nHow do they do that? Do they show different images of Mario in succession, like a flipbook and it appears as if he's moving?\n\nWell, a 50% yes. Imagine how resource intensive storing and loading a huge set of images describing every frame of animation in our program (or game) would be. Instead, there's a single image and all the positions are laid out in a grid. Like the one shown below.\n\nTo execute an animation, instead of loading a new image every millisecond a portion of the same image is shown through a viewport just at different positions. Clever isn't it?\n\nSo yes, it's sorta like a flipbook, a clever flipbook actually.\n\nNow if you could just stretch a little and pop your knuckles I would like us to recreate Mario's walking animation. We'll use the sprite shown above and everything we have learnt about drawImage so far.\n\nReady? Here we go!\n\nLet's take another look at our sprite and try to figure the grid dimensions that it has been laid out on.\n\nAll that we have done here is imagined a grid over the sprite. Notice that the entire grid is made up of cells of equal dimensions (32 x 39). But it's still just one image, remember that.\n\nGreat! Now let's get to writing some code. We'll start in the usual way by first creating a canvas element, grabbing it and its context in JavaScript and then loading our Mario spritesheet.\n\nAbove code will result in the following.\n\nWokay! we've got the image showing! What's happening really?\n\nHere, we're using the form of drawImage--drawImage(image, sx, sy)--where the whole image is selected and drawn on the canvas as it is.\n\nWhat we want to do, first of all, is select just one cell of the grid and draw just that single cell. Let's start out by first making tweaks to our code that selects the first cell in the third row, the one in which Mario is standing facing east. We'll figure how to animate once we have that done. Sounds good? Lovely!\n\nLet's make the necessary changes to our code.\n\nFirst off, notice the two variables MARIO_WIDTH and MARIO_HEIGHT. They are the dimensions of the grid cell, that's all they are. We defined them to make it easier for us to traverse the grid using just multiples of each of those constants. Makes sense?\n\nGood.\n\nNext, in the // Selection block we defined the area of the image we want to select, in the // Drawing section we defined the width and height and the position from where to start drawing on the canvas... aaand just like that we managed to draw just one cell of the entire imaginary grid.\n\nPretty simple, just selection and drawing. Now at this point I'd like to digress into an older topic about aspect ratio. \"Nash! again? ugghh\" I know I know. But it's cool! Look!\n\nIf I change the values of dWidth or dHeight or both of them, look at how the image stretches and squashes.\n\nHah! See! That's why I was advising you to maintain the aspect ratio and that the values of selection and drawing have no real interconnection.\n\nOkay, back to what we were doing.\n\nSo now we have Mario in the canvas, small and little. We need to animate it, or in other words show different frames at the same location in succession and make the illusion of movement happen. Was I too specific? Heck yeah!\n\nWe can do that by selecting the grid cells we want to draw in succession. We just need to change the value of sx by the multiples of MARIO_WIDTH.\n\nNow doing this will require the use of requestAnimationFrame and I have been explaining that in a streak in this and this article.\n\nAs a small challenge why don't you go ahead and try accomplishing this on your own? In any case, you can check out this Codepen where I have Mario running like this. The pen has enough comments to help you understand the tiny bit of high school math that's being used to make the animation happen.\n\nCute little thing!\n\nAnd with that, we're done with a very comprehensive explanation of drawImage. Hope you enjoyed.\n\nIf you have made it this far, how about you shoot me some feedback or #goodvibes on Twitter?\n\nLove you lots!"
    }
}