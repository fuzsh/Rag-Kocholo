{
    "id": "dbpedia_988_2",
    "rank": 89,
    "data": {
        "url": "https://docs.krita.org/en/user_manual/animation.html",
        "read_more_link": "",
        "language": "en",
        "title": "Animation with Krita",
        "top_image": "https://docs.krita.org/en/user_manual/_static/sidebar-logo.png",
        "meta_img": "https://docs.krita.org/en/user_manual/_static/sidebar-logo.png",
        "images": [
            "https://docs.krita.org/_static/sidebar-logo.png",
            "https://docs.krita.org/en/_static/images/source-code.png",
            "https://docs.krita.org/en/_images/Storyboard_thumbnailonly_view.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_01.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_02.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_03.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_04.png",
            "https://docs.krita.org/en/_images/addduplicateframe.svg",
            "https://docs.krita.org/en/_images/Introduction_to_animation_05.png",
            "https://docs.krita.org/en/_images/onionOn.svg",
            "https://docs.krita.org/en/_images/onionOff.svg",
            "https://docs.krita.org/en/_images/onionOn.svg",
            "https://docs.krita.org/en/_images/Introduction_to_animation_06.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_07.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_08.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_09.png",
            "https://docs.krita.org/en/_images/Krita_mouse_right.png",
            "https://docs.krita.org/en/_images/Krita_mouse_right.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_10.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_11.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_12.png",
            "https://docs.krita.org/en/_images/animation_walkcycle_2021_4_frames.gif",
            "https://docs.krita.org/en/_images/Introduction_to_animation_13.png",
            "https://docs.krita.org/en/_images/Krita_mouse_right.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_14.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_13.png",
            "https://docs.krita.org/en/_images/Krita_mouse_right.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_13b.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_15.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_14b.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_16.png",
            "https://docs.krita.org/en/_images/reference_images_tool.svg",
            "https://docs.krita.org/en/_images/Introduction_to_animation_17.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_18.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_walkcycle_02.gif",
            "https://docs.krita.org/en/_images/Krita_mouse_right.png",
            "https://docs.krita.org/en/_images/keyframe-add.svg",
            "https://docs.krita.org/en/_images/Introduction_to_animation_19.png",
            "https://docs.krita.org/en/_images/introduction_to_animation_walkcycle_03_simple_tween.gif",
            "https://docs.krita.org/en/_images/Introduction_to_animation_20a.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_20b.png",
            "https://docs.krita.org/en/_images/Introduction_to_animation_20c.png",
            "https://docs.krita.org/en/_images/introduction_to_animation_walkcycle_03_adjusted_tween.gif",
            "https://stats.kde.org/piwik.php?idsite=13"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Detailed guide on the animation workflow in Krita.",
        "meta_lang": "en",
        "meta_favicon": "../../_static/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.krita.org/en/user_manual/animation.html",
        "text": "WorkflowÂ¶\n\nIn traditional animation workflow, what you do is that you make Keyframes, which contain the important poses, and then draw frames in between (tweening in highly sophisticated animatorâs jargon).\n\nFor this workflow, there are three important dockers:\n\nThe Animation Timeline Docker. View and control all the frames in your animation. The timeline docker also contains functions to manage your layers. The layers that are created in the timeline docker also appear on the normal Layer docker.\n\nThe Onion Skin Docker. This docker controls the look of the onion skin, which in turn is useful for seeing the previous frame.\n\nThe Animation Curves Docker. This docker allows you to do minor tweening for animation curves.\n\nThe Storyboard Docker. This docker helps you create and keep track of storyboards.\n\nFurthermore, especially when you want to do a big animation, that is, any animation longer than 3 seconds, you will need to think about how you are going to approach this. Krita is specialized in frame by frame animation, and because of this Krita keeps all the frames in memory. This means that animation files will eat up all of your computerâs working memory (RAM). If you donât know what working memory is, you probably have too little to do a long sequence in Krita. Therefore, you need to take a page from professional animation and do some planning!\n\nTypically, most animation projects start with a script or at the very least an outline of actions that will happen. You can do this in any kind of text editor you like. The next step is to create a storyboard. They are sketches of the basic composition of each scene, with some extra notes on what is going to move, like camera movement, character movement, notes on audio, notes on color. These seem closer to a comic than an animation, but the key difference between the two is that in comics the composition is made to help the reader move their eyes over the page, while in animation the viewerâs eyes will stay in relatively the same spot, so consecutive storyboard frames will have their most important elements in relatively the same place. If that seems a little abstract, donât worry. You can make a story board by using the animation functions, but the key here is that you use as little frames as possible. Export the story board using the render animation option.\n\nThen, the next step is to make an Animatic. An animatic is basically the storyboard, but then animated. You are best off doing this in a video editor like Kdenlive, OpenShot, Olive, or even Windows Movie Maker. If you want to put everything together into one big animation you will need to learn how to use such a program to begin with, as Krita doesnât have extensive video and audio montage functions.\n\nDoing the animatic will allow you to see how the animation can be subdivided into small clips. If you are just starting out, you are best off limiting yourself to 12 frames per second. Then, a 10-second clip would be 120 frames. Try to figure out if you can subdivide your animation idea into clips of 10 seconds or shorter. You can import the story board frames associated with a specific clip by going to File â£ Import Animation Frames. From there, slowly start building up your animation. During the sketching phase it may also help to work on a low resolution, like 800Ã450 pixels. High resolution only starts mattering when you are doing line art, after all. And it will be hard to get to that point if you donât even have a rough outline.\n\nAlways keep an eye on the memory consumption. You can see the memory consumption in the status bar, by clicking the resolution label. This label should also have a little progress bar that shows how much memory Krita is using at this moment. Donât let the memory bar get full: it will lead to Krita slowing down, and sometimes it might even mean Krita wonât be able to export the animation on your specific machine. You can reduce memory consumption by:\n\nMerging together layers. Yes, you cannot afford to have a layer for every single change. Often, the fewer layers, the better.\n\nIn some cases by going to Image â£ Crop Layers to Image Size, this will crop all layers to remove sections that are outside the canvas.\n\nSometimes, certain layers donât need to be full color, especially if theyâre just black and white. You can then go to Layers â£ Convert â£ Convert Layer Color Space and convert the layer to a grayscale one. This will half the amount of RAM this specific layer will take up.\n\nWorking smaller. Even if you imagined yourself animating in the 4K resolution, you might need to accept your computer just cannot handle this. Try going a step lower, on animations, even a 20% reduction can make a huge difference in memory consumption, while not being a huge difference in resolution.\n\nAlso watch out that other programs on your computer arenât hogging all the RAM. Web browsers and chat programs tend to be the biggest culprits here, especially if you are streaming music or videos. If you are hurting for memory, see if you can get these functions to work on a separate device like a phone instead.\n\nAnother thing you will want to do is make a ton of backups. Every time you hit an important section with an animation, like you finished the line art, or you did a pretty tricky section, you will want to use File â£ Incremental Backup to make a separate copy of the current file to continue working in. This way, if the animation file gets corrupt, which could happen due to a power outage, or a cat jumping on the keyboard, you will still have a snapshot of the last important section. Other backup techniques, like copying the files to a cloud service, or to a backup hard drive are also very recommended.\n\nTip\n\nAnd while weâre at it, whenever youâve hit a milestone, donât forget to take a break as well! Doing big projects like animations take a lot of effort and concentration, so taking breaks is important to recharge yourself.\n\nWhen you are done, you will want to use Render Animation again. Now either export a frame sequence or a small video file, and then compose all the frame sequences and video files together in the video editor. Then you can render it to WebM, and upload it to your favorite video hosting website.\n\nThis may all seem a little complicated, but if your computer doesnât have a lot of resources, you have got to be resourceful yourself!\n\nIntroduction to animation: How to make a walk cycleÂ¶\n\nThe best way to get to understand all these different parts is to actually use them. Walk cycles are considered the most basic form of a full animation, because of all the different parts involved with them. Therefore, going over how one makes a walk cycle should serve as a good introduction.\n\nSetupÂ¶\n\nFirst, we make a new file. On the first tab, we type in a nice ratio like 1280Ã1024, set the dpi to 72 (weâre making this for screens after all) and title the document âwalk cycleâ.\n\nIn the second tab, we choose a nice background color, and set the background to canvas-color. This means that Krita will automatically fill in any transparent bits with the background color. You can change this in Image â£ Image Properties. This is very useful for animation, as the layer you do animation on must be semi-transparent to get onion skinning working.\n\nNote\n\nKrita has a bunch of functionality for meta-data, starting at the Create Document screen. The title will be automatically used as a suggestion for saving and the description can be used by databases, or for you to leave comments behind. Not many people use it individually, but it can be useful for working in larger groups.\n\nThen hit Create!\n\nThen, to get all the necessary tools for animation, select the animation workspace in Window â£ Workspace â£ Animation\n\nWhich should result in this:\n\nAnimatingÂ¶\n\nMake sure thereâs two transparent layers setup in the layer docker. You can add a new layer by pressing the + or by pressing ins. Letâs name the bottom one âenvironmentâ and the top walkcycle by double-clicking their names in the layer docker.\n\nUse the Straight Line Tool to draw a single horizontal line. This is the ground.\n\nThen, select the walkcycle layer and draw a head and torso (you can use any brush for this).\n\nNow, selecting a new frame will not make a new frame automatically. Krita doesnât actually see the walkcycle layer as an animated layer at all!\n\nWe can make it an animated layer by adding a frame to the timeline. A frame in the timeline to get a context menu. Select Create Duplicate Frame ( ).\n\nAttention\n\nIf you select Create Blank Frame, the content of the layer will be dropped and a new blank frame will appear; since you want to preserve the image, you need to use Create Duplicate Frame.\n\nYou can see it has become an animated layer because of the onion skin icon ( ) showing up in the timeline docker.\n\nUse the Create Duplicate Frame button to copy the first frame onto the second. Then, use the Move Tool (switch to it using the T shortcut) with the Shift + â shortcut to move the frame contents up.\n\nWe can see the difference by turning on the onion skinning (press the , so it becomes ):\n\nNow, you should see the previous frame as red.\n\nWarning\n\nKrita sees white as a color, not as transparent, so make sure the animation layer you are working on is transparent in the bits where thereâs no drawing. You can fix the situation by use the Color to Alpha filter, but prevention is best.\n\nFuture frames are drawn in green, and both colors can be configured in the onion skin docker.\n\nNow, weâre going to draw the two extremes of the walk cycle. These are the pose where both legs are as far apart as possible, and the pose where one leg is full stretched and the other pulled in, ready to take the next step.\n\nLetâs copy these two. You can do this by doing on the frame, and then selecting Copy Keyframes. Then select the new position in the time line, again, and Paste Keyframes.\n\nNow thenâ¦\n\nCopy frame 0 to frame 2.\n\nCopy frame 1 to frame 3.\n\nErase the semi transparent lines to make it obvious which leg is in front of the other. In 0 and 1, we have the closer leg to the right, then bend, and in 2 and 3, we have the further leg to the right and then bend.\n\nIn the animation settings, set the frame-rate to 4\n\nSelect all frames in the timeline docker by dragging-selecting them.\n\nPress play in the header.\n\nEnjoy your first animation!\n\nExpanding upon your rough walk cycleÂ¶\n\nYou can quickly make some space by the Alt + drag shortcut on any frame. Thisâll move that frame and all others after it in one go. More efficient for us, however, is to select all frames, them, and then select Hold frames â£ Insert Hold Frame, which will insert an empty space or Hold Frame in between each Keyframe.\n\nMake new frames in between each keyframe, and try to interpolate, or inbetween each frame you add.\n\nNote\n\nA lot has been written about how to inbetween properly, and itâs one of the areas where animators express their own style the clearest. As such, we wonât cover inbetweening itself here. We recommend you do a search for inbetweening tutorials on the internet. We also recommend animation analyses to get an idea of how intricate this subject is.\n\nFor this particular example, I prefer to start by finding the position of the heel in a frame, then draw the rest of the foot, then the knees, and then the rest of the legs.\n\nYouâll find that the more frames you add, the more difficult it becomes to keep track of the animation. There are two things you can do here. The first is to color label frames, you can do on the keyframes, and select any of the colors on the bottom.\n\nAnother thing you can do is to adjust the onion skins.\n\nYou can modify the onion skin by using the Onion Skin Docker, where you can change how many frames are visible at once, by toggling them on the top row. The bottom row is for controlling transparency, while below there you can modify the colors and intensity of the coloring.\n\nAnimating with multiple layersÂ¶\n\nOkay, our walk cycle is missing some hands, letâs add them on a separate layer. So we make a new layer, and name it hands andâ¦\n\nOur walk cycle is gone from the timeline docker! This is a feature actually. A full animation can have so many little parts that an animator might want to remove the layers theyâre not working on from the timeline docker.\n\nNew in version 4.3.0: In Krita 4.3.0 and later, all new layers are pinned to the timeline by default.\n\nTo show a layer whether itâs active or not, you can âpinâ it to the timeline by clicking the icon while having the layer you want pinned selected in the layer docker. We recommend pinning any layers that youâre currently animating on.\n\nExportingÂ¶\n\nWhen you are done, select File â£ Render Animation. To render to a video file, youâll need a program called FFmpeg. To learn more, please read Render Animation.\n\nEnjoy your walk cycle!\n\nAnimating with transform masksÂ¶\n\nNew in version 5.0.\n\nIf you want to move your walk cycle, you may use Transform Masks to move the frames from left to right without editing the pixels themselves.\n\nFirst, open up the Animation Curves Docker if it has not been opened yet, under Settings â£ Dockers â£ Animation Curves.\n\nThen, group the layers that you want to transform, in our example, these are the hands and the walkcycle layers. the group, Add â£ Transform mask.\n\nThen, go into the animation docker, select the first frame, and select Adds keyframe to control scalar property ( ). In the Timeline Docker, Scalar Frames will be marked with a diamond.\n\nNow select the Transform Tool, press the screen and move the group to the start point. Press Enter to confirm. Select the last frame in the docker, and then press the screen again, now move everything to the end point. Press Zoom view to fit channel range to view the whole frame.\n\nNow, when you press play, you will see the layer contents move. However, it is probably moving too fast. There are two things to reduce that problem: The first is to copy and paste the walk cycle frames, so it repeats 3-4 times, then move the scalar frame to the last frame.\n\nThis still doesnât sync the walk cycle directly to the speed itâs moving at. The best method, if a little laborious, is to go to the first frame where one of the feet touches the ground, and then mark that section (for example, using guides), then, in subsequent frames, use the Transform Tool on each frame to move it so that the foot stays in the same place as long as itâs touching the ground. Do the same for the next bit where a foot touches the ground, and the next, and so on.\n\nAfter having done all that, you will end up with a smoothly moving walk cycle:"
    }
}