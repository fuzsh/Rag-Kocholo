{
    "id": "dbpedia_988_0",
    "rank": 85,
    "data": {
        "url": "https://www.routledge.com/Computer-Graphics-From-Pixels-to-Programmable-Graphics-Hardware/Boreskov-Shikin/p/book/9781439867303",
        "read_more_link": "",
        "language": "en",
        "title": "Computer Graphics From Pixels to Programmable Graphics Hardware",
        "top_image": "https://images.routledge.com/common/jackets/crclarge/978143986/9781439867303.jpg",
        "meta_img": "https://images.routledge.com/common/jackets/crclarge/978143986/9781439867303.jpg",
        "images": [
            "https://secure.ride8stir.com/202702.png",
            "https://www.routledge.com/images/routledge-logo.png",
            "https://images.routledge.com/common/jackets/crclarge/978143986/9781439867303.jpg",
            "https://images.routledge.com/common/jackets/crclarge/978042906/9780429068744.jpg",
            "https://www.routledge.com/images/vs.png",
            "https://images.routledge.com/common/jackets/crclarge/978143980/9781439803349.jpg",
            "https://images.routledge.com/common/jackets/crclarge/978143982/9781439827376.jpg",
            "https://images.routledge.com/common/jackets/crclarge/978143984/9781439846209.jpg",
            "https://images.routledge.com/common/jackets/crclarge/978103278/9781032785967.jpg",
            "https://www.routledge.com/img/covers/loading-image-sm.png",
            "https://www.routledge.com/images/routledge-logo-lg.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Alexey Boreskov",
            "Evgeniy Shikin"
        ],
        "publish_date": "2013-10-24T00:00:00",
        "summary": "",
        "meta_description": "Complete Coverage of the Current Practice of Computer GraphicsComputer Graphics: From Pixels to Programmable Graphics Hardware explores all major areas of moder",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Routledge & CRC Press",
        "canonical_link": "https://www.routledge.com/Computer-Graphics-From-Pixels-to-Programmable-Graphics-Hardware/Boreskov-Shikin/p/book/9781439867303",
        "text": "Complete Coverage of the Current Practice of Computer Graphics\n\nComputer Graphics: From Pixels to Programmable Graphics Hardware explores all major areas of modern computer graphics, starting from basic mathematics and algorithms and concluding with OpenGL and real-time graphics. It gives students a firm foundation in today’s high-performance graphics.\n\nUp-to-Date Techniques, Algorithms, and API\n\nThe book includes mathematical background on vectors and matrices as well as quaternions, splines, curves, and surfaces. It presents geometrical algorithms in 2D and 3D for spatial data structures using large data sets. Although the book is mainly based on OpenGL 3.3, it also covers tessellation in OpenGL 4.0, contains an overview of OpenGL ES 2.0, and discusses the new WebGL, which allows students to use OpenGL with shaders directly in their browser. In addition, the authors describe a variety of special effects, including procedural modeling and texturing, fractals, and non-photorealistic rendering. They also explain the fundamentals of the dominant language (OpenCL) and platform (CUDA) of GPGPUs.\n\nWeb Resource\n\nOn the book’s CRC Press web page, students can download many ready-to-use examples of C++ code demonstrating various effects. C++ wrappers for basic OpenGL entities, such as textures and programs, are also provided.\n\nIn-Depth Guidance on a Programmable Graphics Pipeline\n\nRequiring only basic knowledge of analytic geometry, linear algebra, and C++, this text guides students through the OpenGL pipeline. Using one consistent example, it leads them step by step from simple rendering to animation to lighting and bumpmapping.\n\nKey Features\n\nCovers the main aspects of modern computer graphics\n\nExplains how to create various special effects using OpenGL\n\nDescribes a wide range of current topics, such as tessellation, spherical harmonics, and geometric shaders\n\nContains practical exercises and examples as well as numerous illustrations, including several color images\n\nOffers full, cross-platform source code and examples on the book’s CRC Press web page\n\nFigure slides available upon qualifying course adoption\n\nIntroduction: Basic Concepts\n\nCoordinate spaces, transformations\n\nGraphics pipeline\n\nWorking with the windowing system\n\nColors. Color models\n\nRaster algorithms\n\nHidden surface removal\n\nLighting models and shading\n\nTransforms in 2D\n\nVectors and matrices\n\nTransforms in 2D\n\nBasic linear transformations\n\nHomogeneous coordinates\n\nGeometric Algorithms in 2D\n\nLine from two points\n\nClassification of a point relative to the line\n\nClassification of a circle relative to the line\n\nClassification of an axis-aligned bounding box (AABB) relative to the line\n\nComputing the area of triangle and polygon\n\nIntersection of two lines\n\nIntersection of two line segments\n\nClosest point on the line to the given point\n\nDistance from point to line segment\n\nChecking whether the given polygon is convex\n\nCheck whether the point lies inside the given polygon\n\nClipping line segment to a convex polygon, Cyrus-Beck algorithm\n\nClipping a polygon: Sutherland-Hodgman algorithm\n\nClipping a polygon to a convex polygon\n\nBarycentric coordinates\n\nTransformations in 3D, Projections, Quaternions\n\n3D vectors and matrices. Dot and vector (cross) products\n\nLinear transformations—scale, reflection, rotation, and shear\n\nReflection relative to a plane\n\nRotation around an arbitrary vector (direction)\n\nEuler transformation\n\nTranslation, affine transformation and homogeneous coordinates\n\nRigid-body transformation\n\nNormal transformation\n\nProjections\n\nCoordinate systems in 3D, translations between different coordinate systems\n\nQuaternions: Representation of orientation in 3D using quaternions, quaternion interpolation\n\nBasic Raster Algorithms\n\nRaster grid, connectivity of raster grid, 4-connectivity, and 8-connectivity\n\nBresenheim’s line algorithm\n\nBresenheim’s circle algorithm\n\nTriangle filling\n\nFlood fill algorithm\n\nColor and Color Models\n\nCIEXY Z color space\n\nRGB color space\n\nCMY and CMYK color spaces\n\nHSV and HSL color spaces\n\nGamma correction\n\nY uv and Y CBCR color spaces\n\nPerceptually uniform color spaces, L*u*v* and L*a*b* color spaces\n\nsRGB color space\n\nBasic freeglut and GLEW for OpenGL Rendering\n\nfreeglut initialization\n\nWindow creation\n\nProcessing events\n\nUsing the GLEW library\n\nWrapping freeglut in a C++ class\n\nHidden Surface Removal\n\nBasic notions\n\nRay casting\n\nz-buffer\n\nHierarchical z-buffer\n\nPriority algorithms\n\nPortals\n\nPotentially visible sets (PVS), computing PVS via portals\n\nHardware occlusion queries and their usage\n\nModern OpenGL: The Beginning\n\nHistory of OpenGL\n\nMain concepts of OpenGL\n\nProgrammable pipeline\n\nOur first OpenGL program\n\nFirst OpenGL program using C++ classes\n\nParameter interpolation\n\nMatrix operations\n\nRotating the object by mouse\n\nWorking with meshes\n\nWorking with textures\n\nInstancing\n\nFramebuffer object and rendering into a texture\n\nPoint sprite in OpenGL\n\nWorking with Large 2D/3D Data Sets\n\nBounding volumes\n\nRegular grids\n\nNested (hierarchical) grids\n\nQuad-trees and Oct-trees\n\nkD-tree\n\nBinary space partitioning (BSP) tree\n\nBounding volume hierarchy (BVH)\n\nR-trees\n\nMixed structures\n\nCurves and Surfaces: Geometric Modeling\n\nRepresentation of curves and surfaces\n\nElements of differential geometry, tangent space, curvature\n\nBezier and Hermite curves and surfaces\n\nInterpolation\n\nSplines\n\nSurfaces of revolution\n\nSubdivision of curves and surfaces\n\nBasics of Animation\n\nCoordinates interpolation\n\nOrientation interpolation\n\nKey-frame animation\n\nSkeletal animation\n\nPath following\n\nLighting Models\n\nDiffuse (Lambert) model\n\nPhong model\n\nBlinn-Phong model\n\nWard isotropic model\n\nMinnaert lighting\n\nLommel-Seeliger lighting\n\nRim lighting\n\nDistance attenuation\n\nReflection, Fresnel coefficient, and its approximations\n\nStrauss lighting model\n\nAnisotropic lighting\n\nBidirectional reflection distribution function (BRDF)\n\nOren-Nayar model\n\nCook-Torrance model\n\nAshikhmin-Shirley model\n\nImage-based lighting (IBL)\n\nSpherical harmonics and their usage for lighting\n\nAdvanced OpenGL\n\nImplementation of lighting models\n\nGeometry shaders\n\nTransform feedback\n\nMultiple render targets (MRT)\n\nUniform blocks and uniform buffers\n\nTessellation\n\nOpenGL ES 2\n\nWebGL\n\nGPU Image Processing\n\nSampling, aliasing, filters\n\nSepia effect\n\nEffects based on color transformations\n\nEdge detect filters\n\nEmboss filter\n\nBlur filters, Gaussian blur, separable filters\n\nOld-film effect\n\nSharpness filter\n\nImage denoising, bilateral filter\n\nSpecial Effects in OpenGL\n\nReflections\n\nVolumetric/layered fog\n\nBillboards, particle systems, soft particles\n\nBumpmapping\n\nReflection and refraction, environment mapping\n\nFur rendering\n\nParallax, relief and cone step mapping\n\nSky rendering, Perez all-weather model\n\nScreen-space ambient occlusion (SSAO)\n\nModeling depth of field\n\nHigh dynamic range (HDR) rendering\n\nRealistic water rendering\n\nDeferred rendering\n\nLight prepass rendering\n\nAmbient cubes\n\nReflective shadow maps\n\nSplatting indirect illumination\n\nBasics of GPGPU\n\nWhat is GPGPU\n\nBasics of OpenCL\n\nBasics of CUDA\n\nBasics of linear algebra in OpenCL\n\nOpenCL—OpenGL interoperability\n\nElements of Procedural Texturing and Modeling\n\nFractals, Mandelbrot, and Julia sets\n\nFractal mountains\n\nL-systems\n\nPerlin noise, turbulence, fBm\n\nModeling marble, water, clouds with Perlin noise\n\nCellular textures\n\nNon-Photorealistic Rendering\n\nCartoon rendering\n\nExtended cartoon rendering\n\nGooch lighting model\n\nWatercolor rendering\n\nBibliography"
    }
}