{
    "id": "dbpedia_988_0",
    "rank": 0,
    "data": {
        "url": "https://graphics.fandom.com/wiki/Sprite",
        "read_more_link": "",
        "language": "en",
        "title": "Sprite",
        "top_image": "https://static.wikia.nocookie.net/graphics/images/f/f7/SpriteExamplefromZeldaWindwalker.jpg/revision/latest?cb=20060420065052",
        "meta_img": "https://static.wikia.nocookie.net/graphics/images/f/f7/SpriteExamplefromZeldaWindwalker.jpg/revision/latest?cb=20060420065052",
        "images": [
            "https://static.wikia.nocookie.net/graphics/images/f/f7/SpriteExamplefromZeldaWindwalker.jpg/revision/latest/scale-to-width-down/350?cb=20060420065052",
            "https://static.wikia.nocookie.net/graphics/images/8/8a/SpriteExampleRevealed.jpg/revision/latest/scale-to-width-down/346?cb=20060420065121",
            "https://static.wikia.nocookie.net/graphics/images/c/ce/An_unfinished_sprite_of_a_penguin.png/revision/latest/scale-to-width-down/180?cb=20100110110222",
            "https://static.wikia.nocookie.net/6a181c72-e8bf-419b-b4db-18fd56a0eb60",
            "https://static.wikia.nocookie.net/6c42ce6a-b205-41f5-82c6-5011721932e7",
            "https://static.wikia.nocookie.net/464fc70a-5090-490b-b47e-0759e89c263f",
            "https://static.wikia.nocookie.net/f7bb9d33-4f9a-4faa-88fe-2a0bd8138668"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Computer Graphics"
        ],
        "publish_date": "2024-07-29T22:27:06+00:00",
        "summary": "",
        "meta_description": "In computer graphics, a sprite is a two-dimensional image or animation that is integrated into a larger scene. Sprites were originally invented as a method of quickly compositing several images together in two-dimensional video games using special hardware. As computer performance improved, this...",
        "meta_lang": "en",
        "meta_favicon": "/skins-ucp/mw139/common/favicon.ico",
        "meta_site_name": "Computer Graphics",
        "canonical_link": "https://graphics.fandom.com/wiki/Sprite",
        "text": "In computer graphics, a sprite is a two-dimensional image or animation that is integrated into a larger scene.\n\nSprites were originally invented as a method of quickly compositing several images together in two-dimensional video games using special hardware. As computer performance improved, this optimization became unnecessary and the term evolved to refer specifically to the two dimensional images themselves that were integrated into a scene. That is, figures generated by either custom hardware or by software alone were all referred to as sprites. As three-dimensional graphics became more prevalent, the term was used to describe a technique whereby flat images are seamlessly integrated into complicated three-dimensional scenes.\n\nMore often sprite now refers to a partially transparent two dimensional animation that is mapped onto a special plane in a three dimensional scene. Unlike a texture map, the sprite plane is always perpendicular to the axis emanating from the camera. The image can be scaled to simulate perspective, it can be rotated two dimensionally, it can overlap other objects and be occluded, but it can only ever be viewed from the same angle. This rendering method is also referred to as billboarding.\n\nSprites create an effective illusion when:\n\nthe image inside the sprite already depicts a three dimensional object\n\nthe animation is constantly changing or depicts rotation\n\nthe sprite exists only for a short period of time\n\nthe depicted object has a similar appearance from many common viewing angles (such as something spherical)\n\nthe viewer accepts that the depicted object only has one perspective. (such as small plants or leaves)\n\nWhen the illusion works viewers will not notice that the sprite is flat and always faces them. Often sprites are used to depict phenomena such as fire, smoke, small objects, small plants (like blades of grass), or special symbols (like \"1-Up\"). The sprite illusion can be exposed in video games by quickly changing the position of the camera while keeping the sprite in the center of the view.\n\nSprites have also occasionally been used as a special effects tool in movies. Most notably, the creators of the fire breathing Balrog in The Lord of the Rings: The Fellowship of the Ring used sprites to simulate fire emanating from the surface of the demon. Small bursts of fire were filmed in front of a black background and made transparent using a luma key. Many bursts were then attached to the surface of the animated Balrog model and mixed with simulated smoke and heat waves to create the illusion of a monster made from fire.\n\nThe term sprite can be applied more loosely to mean any 2D graphic drawn on a computer, also known as Pixel Art.\n\nHistory[]\n\nThe use of sprites originated with arcade games. The first video game to represent player characters as human spriteplayer images was Taito's Basketball, which was licensed in February 1974 to Midway, releasing it as TV Basketball in North America.[1][2]\n\nThe first video game with color sprites was 1973 arcade game Playtron, developed by Japanese company Kasco, which only manufactured two cabinets of the game.[3]\n\nBillboarding[]\n\nBillboarding is one term used to describe the use of sprites in a 3D environment. In the same-way that a billboard is positioned to face drivers on a highway, the 3D sprite always faces the camera.\n\nAh, yeah. You need the image to be 256 color/8 bit PNG or a BMP file. You can use Irfanview to convert it if you want.Since the color palttee is limited to 256 colors (it is a pixel program after all), a 24 bit PNG won't work.Also, gifs won't work either, you'd have to convert them to a PNG. Ah, yeah. You need the image to be 256 color/8 bit PNG or a BMP file. You can use Irfanview to convert it if you want.Since the color palttee is limited to 256 colors (it is a pixel program after all), a 24 bit PNG won't work.Also, gifs won't work either, you'd have to convert them to a PNG.\n\nAlternative terms[]\n\n3D Sprite is a term often used to refer to sprites that are essentially texture mapped 3D facets that always have their surface normal facing into the camera.\n\nZ-Sprite is a term often used for 3D environments that contain only sprites. The Z-parameter provides a scaling effect that creates an illusion of depth. For example in adventure games such as Kings Quest VI the camera never moves, normal 2D sprites might suffice, but Z-sprites provide an extra touch.\n\nImpostor is a term used instead of billboard if the billboard is meant to subtly replace a real 3D object.\n\nHardware sprites[]\n\nIn early video gaming, sprites were a method of integrating unrelated bitmaps so that they appear to be part of the a single bitmap on a screen.\n\nThe Blitter is a hardware implentation of the Painter's algorithm. For each frame the sprites are first bit blited (short for \"bit block transfer\") into the fast, large, double, and costly frame buffer and then the frame buffer is sent to the screen. The Blitter was renamed to graphics accelerators as more complicated rendering algorithms are used. The Blitter has a high initial cost for simple scenes.\n\nThe Sprite Engine is a hardware implementation of Scanline rendering. For each scanline the appropriate scanlines of the sprites are first copied (the number of texels is limited by the memory bandwidth and the length of the horizontal retrace) into very fast, small, multiple (limiting the # of sprites on a line), and costly caches (the size of which limit the horizontal width) and as the pixels are sent to the screen, these caches are combined with each other and a special sprite: The background. It is larger than the screen and tiled, were the tile map is cached, but the tile set is not. For every pixel every sprite unit signals it presence onto its line on a bus, so every other unit can notice a collision with it. Some sprite engines can automatically reload their \"sprite units\" from a display list. The Sprite Engine has synergy with the palette. To save registers, the height of the sprite, the location of the texture, and the zoom factors are often limited. On systems were the word size is the same as the texel there is no penality of doing unaligned reads needed for rotation. This leads to the limitations of the known implementations:\n\nSprite Hardware Features Year System(s), chip(s) Sprites on screen Sprites on line Max. texels on line Texture width Texture height Colors Hardware zoom Rotation Background Collision detection Transparency Source 1975 Fujitsu MB14241\n\n(Midway 8080, Taito 8080) 60 9 144 4 to 32 1 to 224 1 1, 2× vertical, 1, 2× horizontal Screen orientation 1 bitmap layer Yes Color key [4] 1976 Fairchild Channel F, F8 Display list (run by CPU) 9 56 4, 8 5, 8 1 No No 1 bitmap layer No Color key [5][6][7] Signetics 2636/2637\n\n(1292, VC 4000, Arcadia) 4 4 32 8 8 1 No No 1 bitmap layer No Color key [8] 1977 Atari 2600,\n\nTIA 9 (5 multiplied by CPU) 9 (with triplication) 51 (with triplication) 1, 8 192 1 1, 2, 4, 8× horizontal Horizontal mirroring 1 bitmap layer Yes Color key [9] Taito Z80,\n\nTaito AO84-91335-C762[10] 7 7 224 32 16 15 No Screen orientation 1 tile or bitmap layer Yes Color key [11][12] 1979 Namco Galaxian,\n\nNamco LFSR Display list 15 240 8, 16 8, 16 3 1, 2, 3× vertical, 1, 2, 3× horizontal Horizontal and vertical mirroring 1 tile layer and 1 bitmap layer Yes Color key [13][14][15] Atari 8-bit,\n\nGTIA/ANTIC Display list 8 40 2, 8 128, 256 1, 3 1, 2× vertical, 1, 2, 4× horizontal No 1 bitmap layer Yes Color key [16] Texas Instruments TMS9918\n\n(TI-99/4, ColecoVision, MSX, SG‑1000) 32 4 64 8, 16 8, 16 1 1, 2× integer No 1 tile layer Partial Color key [17] Nintendo Classic 128 16 256 8, 16, 32 8, 16, 32 3, 7 Analog scaling Horizontal and vertical mirroring 1 tile layer, 1 bitmap layer Yes Color key [18] [19]\n\n[20] [21] [22] 1980 Namco Pac-Man,\n\nNamco NVC293 8 8 128 16 16 3 No Horizontal and vertical mirroring 2 tile layers Yes Color key [23][24][25] 1981 Jump Bug,\n\nSega Z80 Display list 16 256 8, 16 8, 16, 32 3, 7 1, 2× integer No 1 tile layer and 1 bitmap layer Yes Color key KO Punch 32 16 256 16 16 7 No Horizontal mirroring 1 bitmap layer ? Color key [26] Sega G80,\n\nRaster Display Controller 64 32 256 8, 16 8, 16 3 Vector scaling Screen orientation 2 tile layers Yes Color key [27][28][29] Sega VCO Object,\n\narcade hardware 64 16 315 8 to 20 8 to 20 3, 7 Voltage control Background tile mirroring 1 tile layer and 1 bitmap layer Yes Color key [30] 1982 C64, VIC-II !Display list run by CPU 8 192 !96, 192 12, 24 21 1, 3 1, 2× integer No 1 tile or bitmap layer Yes Color key [31] Moon Patrol,\n\nIrem M52 64 16 256 8, 16 8, 16, 32 3, 7 No Horizontal and vertical mirroring 2 tile layers Yes Color key Namco Pole Position,\n\n04xx & 09xx 64 32 512 16, 32 16, 32 15 Yes, anisotropic Horizontal and vertical mirroring 1 tile layer and 1 bitmap layer Yes Color key [32][33] Sega 315‑5011 & 315‑5012\n\n(Sega Z80, System 1/2/16, Space Harrier) 128 100 800 8 to 256 8 to 256 15 Yes, anisotropic Horizontal and vertical mirroring 2 tile layers and 1 bitmap layer Yes Alpha [34][35][36] 1983 Namco System 16 96 24 384 8, 16 8, 16 3 Background only Horizontal and vertical mirroring 2 bitmap layers Yes Color key [37][38] NES, RP2C0x 64 8 64 8 8, 16 3 No Horizontal and vertical mirroring 1 tile layer Partial Color key [39] Punch-Out,\n\nNintendo CHP1-VIDEO b 4 3 384 64, 128 128, 256 15 Yes Horizontal and vertical mirroring 1 tile layer Yes Color key Sega SG-1000,\n\nTMS9929 32 4 64 8, 16 8, 16 1, 3 1, 2× integer No 1 tile layer Yes Color key [40][41] TX-1,\n\nTatsumi TC012 96 24 384 8, 16, 32, 64 8, 16, 32, 64 3, 7 Yes Horizontal and vertical mirroring 2 tile layers Yes Color key [42] 1984 Taito Z80,[43]\n\nFujitsu MB112S146 96 24 384 8, 16 8, 16 15 Yes Horizontal and vertical mirroring 2 tile layers Yes Color key [44][45][46] 1985 Amiga, Denise !Display list 8 128 16 Up to 256 3, 15 Vertical by display list No 2 bitmap layers Yes Color key [47] MSX2,\n\nYamaha V9938 32 8 128 8, 16, 32 8, 16, 32 1, 3, 7, 15 per line 1, 2× integer Horizontal and vertical mirroring 1 tile or bitmap layer Yes Color key [48][49][50] Sega VDP\n\n(Master System, Game Gear) 64 8 128 8, 16 8, 16 15 1, 2× integer, 1, 2× vertical Background tile mirroring 1 tile layer Yes Color key [51][52][53] 1986 Atari 7800,\n\nMARIA 100 (without background) 30 (without background) 160 4 to 160 4, 8, 16 1, 3, 8 No No 1 bitmap layer No Color key [54] Namco Thunder Ceptor, C45 Display list 8 512 16, 32 16, 32 15 Yes, anisotropic Road rotation 2 tile layers and 1 bitmap layer ? Color key [55][56][57] Sega OutRun,\n\n315-5211 128 128 1600 8 to 512 8 to 256 15 Yes, anisotropic Horizontal and vertical mirroring 2 tile layers and 1 bitmap layer Yes Alpha [58] 1987 Namco System 2,\n\nNamco V56 128 128 2081 8 to 64 8 to 64 255 Yes, anisotropic Yes, affine 7 tile layers and 1 bitmap layer Yes Color key [59] NEC PC Engine, Hudson HuC6270A 64 16 256 16, 32 16, 32, 64 15 No Horizontal and vertical mirroring 1 tile layer Yes Color key [60][61] Sega X Board,\n\n315-5211A & 315‑5278 256 256 3200 8 to 512 8 to 256 15 Yes, anisotropic Yes, affine 4 tile layers and 1 bitmap layer Yes Alpha [62] Sharp X68000,\n\nCynthia 512 (128 multiplied by raster interrupt) 32 512 16 16 15 1, 2× integer Horizontal and vertical mirroring 1-2 tile layers and 1-4 bitmap layers Partial Color key [63][64][65][66] Taito Ninja Warriors,\n\nTC0100SCN 128 108 1737 16 16 15 No Horizontal and vertical mirroring 6 tile layers Yes Color key [67][68][69] Taito Z System,\n\nMotion Object Generator 512 108 1737 16 to 128 8 to 128 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 2-4 tile layers and 1 bitmap layer Yes Color key [70] 1988 Capcom CP System,\n\nCPS-A & CPS‑B 256 65 1048 16 to 256 16 to 256 15 No Horizontal and vertical mirroring 3 tile layers and 2 bitmap layers Yes Color key [71][72] Sega System 24,\n\n315-5293 & 315‑5295 2048 512 4096 8 to 1024 8 to 1024 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 4 tile layers Yes Alpha [73][74][75][76] Sega Y Board,\n\n315-5196 & 315‑5305 2176 400 3200 8 to 512 8 to 512 15 to 511 Yes, anisotropic Yes, affine 1 bitmap layer Yes Alpha [77][78][79][80] Taito B System, TC0180VCU 408 110 1768 16 to 256 16 to 256 15 to 63 Sprite shrinking Horizontal and vertical mirroring 2 tile layers and 1 bitmap layer Yes Color key [81][82][83] Taito F2 System 2048 512 4096 8, 16 8, 16 2, 4, 16, 64 1, 2, 4× integer No 3 tile layers Yes Color key [84][85][86] Yamaha V9958\n\n(MSX2+, TurboR, TIM) 32 8 128 8, 16, 32 8, 16, 32 1, 3, 7, 15 per line 1, 2× integer Horizontal and vertical mirroring 1 tile layer and 1 bitmap layer Yes Color key [48][49][87][50] Yamaha YM7101\n\n(Mega Drive, Mega‑Tech/Play, System C) 80 20 320 8, 16, 24, 32 8, 16, 24, 32 15 1, 2× integer Horizontal and vertical mirroring 2 tile layers Yes Color key [88] 1989 Fujitsu FM Towns,\n\nFM Towns Marty 1024 64 1024 16 16 15 1, 2× vertical, 1, 2, 3, 4, 5× horizontal Horizontal and vertical mirroring 1-2 bitmap layers Partial Color key [89][90] Game Boy 40 10 80 8 8, 16 3 No No 1 tile layer No Color key [91] NEC PC Engine SuperGrafx, HuC6270A 128 32 512 16, 32 16, 32, 64 15 No Horizontal and vertical mirroring 2 tile layers Yes Color key [61] Taito F1 System 2048 512 4096 8, 16 8, 16 2, 4, 16, 64 Yes Yes 4 tile layers Yes Color key [92][93][94] Taito Z System 512 512 4096 8 to 128 8 to 128 16 Yes Partial 4 tile layers Yes Color key [95][96] 1990 Amstrad Plus, Asic !Display list run by CPU 16 !16 min. 256 16 16 15 1, 2, 4x vertical,\n\n1, 2, 4x horizontal No Bitmap layer No Color key [97] SNK Neo Geo,\n\nLSPC2-A2 384 96 1536 16 16 to 512 15 Sprite shrinking Horizontal and vertical mirroring 1 tile layer Partial Color key [98][99][100] Sega System 32,\n\n315-5387 8192 512 4096 8 to 1024 8 to 1024 15 to 512 Yes, anisotropic Yes, affine 4 tile layers and 1 bitmap layer Yes Alpha [73][101][102][103] SNES, PPU 128 34 272 8, 16, 32, 64 8, 16, 32, 64 15 Background, affine Background affine rotation and sprite mirroring 1-4 tile layers or 1 affine mapped tile layer Yes Color key, averaging [104] 1991 Sega CD 80 20 320 8, 16, 24, 32 8, 16, 24, 32 15 Yes Yes 2 tile layers Yes Color key [105] 1992 Amiga (AGA), Lisa !Display list 8 448 16, 32, 64 Up to 256 3, 15 Vertical by display list No 2 bitmap layers Yes Color key [47][106] Taito F3 System 2048 1024 8192 8, 16 8, 16 15, 31, 63 Yes Yes 5 tile layers Yes Alpha [107][108][109] Taito SZ System, TC0570SPC 1024 162 2604 16 to 128 8 to 128 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 4 tile layers and 1 bitmap layer Yes Color key [70][110] 1993 Atari Jaguar, Tom 1000 90 720 8 to 360 Up to 220 Up to 255 Yes, anisotropic Yes, affine 1 bitmap layer Partial Color key [111][112] Capcom CP System II (CPS2),\n\nCPS-A & CPS‑B 900 65 1048 16 to 256 16 to 256 15 No Horizontal and vertical mirroring 3 tile layers and 2 bitmap layers Yes Alpha [71][113][114] 1994 PC Engine Arcade CD-ROM, HuC6270A 256 96 1536 16, 32, 64 16, 32, 64, 128 15 No Horizontal and vertical mirroring 1 tile layer Yes Color key [61] Sega 32X,\n\nSega 32X VDP 1900 80 1280 8, 16, 24, 32 8, 16, 24, 32 15, 255 Yes Yes 1-2 tile layers Yes Color key Sega VDP1\n\n(Saturn, STV) 16,384 512 4096 8 to 504 1 to 255 15 to 32,768 Yes, anisotropic Yes, affine 3-6 tile layers and 1-4 bitmap layers Yes Alpha [73][115][116] Sony GPU\n\n(PSX, System 11/10/12) 4000 128 1024 8, 16, 256 8, 16, 256 15, 255 Yes, anisotropic Yes, affine 1 bitmap layer Partial Alpha [117][118][119] 1996 Capcom CP System III (CPS3),\n\nDL-2729 1024 482 3861 8, 16 8, 16 63, 255 Yes, anisotropic Horizontal and vertical mirroring 4 tile layers Yes Alpha [120][121] Data East MLC System,\n\nDE150 & DE223 614 176 2828 16 16 15 to 255 Yes, anisotropic Horizontal and vertical mirroring 2 tile layers Yes Alpha [122] 1997 Hyper Neo Geo 64,\n\nNEO64-SPR 1535 384 3072 16 16 to 512 15, 255 Yes, anisotropic Yes, affine 4 tile layers Yes Alpha [123][124][125] 2001 Game Boy Advance 128 128 1210 8, 16, 32, 64 8, 16, 32, 64 15, 255 Yes, affine Yes, affine 2-4 layers or 1-2 affine layers No Color key, blending [126] 2004 Nintendo DS 256 (128 per screen) 128 1210 8, 16, 32, 64 8, 16, 32, 64 15 to 32,768 Yes affine Yes, affine 8 layers (4 per screen); each layer is independent No Color key, blending [127] 2011 Gameduino 256 96 1536 16 16 255 No Yes 1 tile layer Yes Color key [128] Ssytem(s), chip(s) Sprites on screen Sprites on line Max. texels on line Texture width Texture height Colors Hardware zoom Rotation Background Collision detection Transparency Source\n\nMany third party graphics cards offered sprite capabilities. Sprite Engines often scale badly, starting to flicker as the number of sprites increases above the number of sprite units, or uses more and more silicon as the designer of the chip implements more units and bigger caches.\n\nHistory[]\n\nDuring most of the 1980s, hardware speed was in the low, single-digit megahertz and memory was measured in mere kilobytes. Beside CISC-processors all chips are hardwired. Sprites are rare in most video hardware today.\n\nThe central processor can instruct the external chips to fetch source images and integrate them into the main screen using direct memory access channels. Calling up external hardware, instead of using the processor alone, greatly improved graphics performance. Because the processor is not occupied by the simple task of transferring data from one place to another, software can run faster; and because the hardware provided certain innate abilities, programs that use CISC or BIOS were also smaller.\n\nSeparate locations in memory were used to hold the main display and the sprites.\n\nThere is a technique called \"dirty rectangles\", useful when the Blitter was not sufficiently powerful or software sprites were being used. There is only one frame buffer that wraps around the edges, but only those parts that have changed since the last repaint are updated either with the background or the sprites in their updated positions.\n\nSome sprite engines could only store 8 positions in their registers and the unchallenged CPU was programmed to update them\n\nseveral times per frame. Software blitting was complicated by some very strange addressing modes into video ram.\n\n1970s\n\nThe use of read-only memory in arcade game from around 1974 allowed the widespread use of sprites. Taito released some of the earliest known video games with sprites that year, including Basketball, a sports game that represented four basketball players and two baskets as sprite images,[129] and Speed Race, a racing video game that represented cars as sprite images,[130] which could collide with each other and vertically scroll across a race track.[131] The following year, they released Western Gun, a run and gun multi-directional shooter that was the earliest known video game to visually represent game characters as sprites,[132] as well as the first to depict a gun on screen.[133] Gun Fight's sprite graphics were powered by the Fuujitsu MB14241 video shifter, the first graphics processor used for video games; it would be used by Taito and Midway in subsequent arcade games, including Taito's blockbuster hit Space Invaders in 1978. The arcades would remain at the forefront of sprite graphics technology, producing the most advanced sprite graphics possible since the 1970s through to the 1990s.\n\nSpeed Race, which ran on Taito Discrete Logic hardware in 1974,[134] featured sprites[135] with collision detection moving along a vertical scrolling playfield.[136] The Fujitsu MB14241 was used to accelerate the drawing of sprite graphics for various 1970s arcade game from Taito and Midway, such as Gun Fight (1975), Sea Wolf (1976) and Space Invaders (1978). It could display up to 11 sprites per scanline.[4] In 1976, Signetics devised a video/graphics processor capable of generating sprite graphics. The Signetics 2636 video processor was first used in the Radofin 1292 Advanced Programmable Video System, released in 1976.\n\nIn the mid-1970s, Signetics devised the first video/graphics processors capable of generating sprite graphics on a home system. The Signetics 2636 video processors were first used in the 1976 Radofin 1292 Advanced Programmable Video System.\n\nIn 1977, the Taito Z80 arcade system board used for Super Speed Race[11] was capable of generating up to 16 sprites in hardware and display 4 sprites per scanline. Each sprite could have a size up to 32 pixels in width or height and display up to 15 colors.[12]\n\nThe Atari VCS, released in 1977, features a hardware sprite implementation wherein five graphical objects can be moved independently of the game playfield. The VCS's sprites, called players and missiles, are constructed from a single row of pixels that displayed on a scan line; to produce a two-dimensional shape, the sprite's single-row bitmap is altered by software from one scanline to the next.\n\nThe Atari 400 and 800 home computers of 1979 feature similar, but more elaborate circuitry, capable of moving eight Player/Missile objects per scanline -- four 8-bit wide players, and four 2-bit wide missiles. This more advanced version allows operation like the VCS where the CPU modifies the graphics pattern register for each scan line, or an automatic mode where the display chip performs DMA from a table in memory populating the graphics pattern registers for each scan line. In the automatic DMA mode vertical motion is simulated by moving the sprite's up and down incrementally in memory. The hardware produces a two-dimensional bitmap several pixels wide, and as tall as the screen. The width of pixels can also vary from 1, 2, or 4 color clocks. Multiple Player objects can be merged to produce a multi-color player. The four missile objects can be grouped together as a fifth Player and colored independently from the Players.\n\nIn 1979, the Namco Galaxian arcade system used specialized graphics hardware supporting RGB color, multi-colored sprites and tilemap backgrounds. It could display up to 64 hardware sprites on screen and 16 per scanline. Each sprite could be up to 16x16 pixels in size, with 3 colors each.[13] The Galaxian hardware was widely used during the golden age of arcade video games, by game companies such as Namco, Centuri, Gremlin, Irem, Konami, Midway, Nichibutsu, Sega and Taito.[14][137] The Elektor TV Games Computer in 1979 was an early microcomputer capable of generating sprite graphics, which Signetics referred to as \"objects\".\n\n1980s–1990s\n\nThe term sprite was first used in the graphic sense by one of the definers of the Texas Instruments 9918(A) video display processor (VDP),[138] released in 1981. The term was derived from the fact that sprites, rather than being part of the bitmap data in the framebuffer, instead \"floated\" around on top without affecting the data in the framebuffer below, much like a ghost or \"sprite\". By this time, sprites had advanced to the point where complete two-dimensional shapes could be moved around the screen horizontally and vertically with minimal software overhead.\n\nThe CPU would instruct the external chips to fetch source images and integrate them into the main screen using direct memory access channels. Calling up external hardware, instead of using the processor alone, greatly improved graphics performance. Because the processor was not occupied by the simple task of transferring data from one place to another, software could run faster; and because the hardware provided certain innate abilities, programs were also smaller.\n\nIn the 1980s, sprite-scaling became a popular technique in arcade game to represent a three-dimensional perspective using 2D sprite graphics. Sega in particular was at the forefront of sprite-scaling graphics with its powerful custom Super Scaler graphics boards, which could quickly scale and rotate many large colourful sprites at high frame rates. Sega's Super Scaler hardware powered a string of 1980s arcade hits ranging from Space Harrier and Out Run to After Burner and Galaxy Force. Other arcade manufacturers such as Namco, Capcom and SNK also relied on custom graphics processors in order to produce similarly advanced sprite graphics in the 1980s to early 1990s. Following the rise of true 3D polygon graphics in the early 1990s, the sprite-scaling technique declined in popularity.\n\nApplication[]\n\nSprites are typically used for characters and other moving objects in video games. They have also been used for mouse pointers and for writing letters to the screen.\n\nAlternative terms[]\n\nFor on-screen moving objects larger than one sprite's extent, sprites may sometimes be scaled and/or combined.\n\nPlayer-Missile Graphics was used on the Atari 400/800 to refer to hardware-generated sprites. The term reflected the usage for both characters (\"players\") and other objects (\"missiles\"). They had restricted horizontal resolution (8 or 2 pixels, albeit with scalability, and a potential 192 lines of vertical resolution), limiting their use somewhat.\n\nMovable Object Block, or MOB was used in MOS Technology's graphics chip literature (data sheets, etc). However, Commodore, the main user of MOS chips and the owner of MOS for most of the chip maker's lifetime, applied the common term \"sprite\".\n\nOn the Nintendo Entertainment System, Super Nintendo Entertainment System, and Game Boy, sprites were referred to as OBJs (short for \"objects\"), and the region of RAM used to store sprite attributes and coordinates was known as OAM (Object Attribute Memory). This still applies today on the Game Boy Advance and Nintendo DS handheld systems.\n\nSoftware sprites were used to refer to subroutines that used bit blitting to accomplish the same goal on systems such as the Atari ST and the Apple II whose graphics hardware had no sprite capability. (This was of course oxymoronic)\n\nSprite culture[]\n\nMore recently, sprites are edited or created by fans in a process called \"spriting\". \"Spriters\" mostly use them to become sprite comic artists, for the purpose of creating a video game-themed comic. It has been continued by Macromedia Flash animators who create sprite cartoons.\n\nReferences[]\n\n[]\n\nSprite archives[]"
    }
}