{
    "id": "correct_subsidiary_00051_2",
    "rank": 84,
    "data": {
        "url": "https://patents.google.com/patent/US7047179B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US7047179B2 - Clustered processors in an emulation engine - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/58/d0/b2/f5a6f7f2fadb8e/US07047179-20060516-D00000.png",
            "https://patentimages.storage.googleapis.com/4c/c2/31/5507fdd94e908d/US07047179-20060516-D00001.png",
            "https://patentimages.storage.googleapis.com/da/96/f4/1122f4944a9d48/US07047179-20060516-D00002.png",
            "https://patentimages.storage.googleapis.com/dc/4e/24/06fbe42694be29/US07047179-20060516-D00003.png",
            "https://patentimages.storage.googleapis.com/8d/1a/6f/cb5252b1253583/US07047179-20060516-D00004.png",
            "https://patentimages.storage.googleapis.com/a0/07/d6/da06ac0efa2d26/US07047179-20060516-D00005.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "1999-08-12T00:00:00",
        "summary": "",
        "meta_description": "Clusters of processors are interconnected as an emulation engine such that processors share input and data stacks, and the setup and storing of results are done in parallel, but the output of one evaluation unit is connected to the input of the next evaluation unit. A set of âcascadeâ connections provides access to the intermediate values. By tapping intermediate values from one processor, and feeding them to the next, a significant emulation speedup is achieved.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US7047179B2/en",
        "text": "Clustered processors in an emulation engine Download PDF\n\nInfo\n\nPublication number\n\nUS7047179B2\n\nUS7047179B2 US10/459,340 US45934003A US7047179B2 US 7047179 B2 US7047179 B2 US 7047179B2 US 45934003 A US45934003 A US 45934003A US 7047179 B2 US7047179 B2 US 7047179B2\n\nAuthority\n\nUS\n\nUnited States\n\nPrior art keywords\n\nprocessing system\n\nprocessing\n\nsystems\n\nprocessing systems\n\nclusters\n\nPrior art date\n\n1999-08-12\n\nLegal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)\n\nExpired - Lifetime, expires 2020-04-03\n\nApplication number\n\nUS10/459,340\n\nOther versions\n\nUS20030212539A1 (en\n\nInventor\n\nWilliam F. Beausoleil\n\nTak-Kwong Ng\n\nHelmut Roth\n\nPeter Tannenbaum\n\nN. James Tomassetti\n\nCurrent Assignee (The listed assignees may be inaccurate. Google has not performed a legal analysis and makes no representation or warranty as to the accuracy of the list.)\n\nCadence Design Systems Inc\n\nOriginal Assignee\n\nQuickturn Design Systems Inc\n\nPriority date (The priority date is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the date listed.)\n\n1999-08-12\n\nFiling date\n\n2003-06-11\n\nPublication date\n\n2006-05-16\n\n2003-06-11 Application filed by Quickturn Design Systems Inc filed Critical Quickturn Design Systems Inc\n\n2003-06-11 Priority to US10/459,340 priority Critical patent/US7047179B2/en\n\n2003-11-13 Publication of US20030212539A1 publication Critical patent/US20030212539A1/en\n\n2006-05-16 Application granted granted Critical\n\n2006-05-16 Publication of US7047179B2 publication Critical patent/US7047179B2/en\n\n2012-03-01 Assigned to CADENCE DESIGN SYSTEMS, INC. reassignment CADENCE DESIGN SYSTEMS, INC. ASSIGNMENT OF ASSIGNORS INTEREST (SEE DOCUMENT FOR DETAILS). Assignors: QUICKTURN DESIGN SYSTEMS, INC.\n\n2020-04-03 Adjusted expiration legal-status Critical\n\nStatus Expired - Lifetime legal-status Critical Current\n\nLinks\n\nUSPTO\n\nUSPTO PatentCenter\n\nUSPTO Assignment\n\nEspacenet\n\nGlobal Dossier\n\nDiscuss\n\nImages\n\nClassifications\n\nG—PHYSICS\n\nG06—COMPUTING; CALCULATING OR COUNTING\n\nG06F—ELECTRIC DIGITAL DATA PROCESSING\n\nG06F30/00—Computer-aided design [CAD]\n\nG06F30/30—Circuit design\n\nG06F30/32—Circuit design at the digital level\n\nG06F30/33—Design verification, e.g. functional simulation or model checking\n\nG06F30/3308—Design verification, e.g. functional simulation or model checking using simulation\n\nG06F30/331—Design verification, e.g. functional simulation or model checking using simulation with hardware acceleration, e.g. by using field programmable gate array [FPGA] or emulation\n\nDefinitions\n\nThis invention relates to processor-based emulation engines.\n\nIBM is a registered trademark of International Business Machines Corporation, Armonk, N.Y.\n\nHardware emulators are programmable devices used in the verification of logic designs.\n\na common method of logic design verification is to use processors to emulate the design.\n\nThese processor-based emulators sequentially evaluate combinatorial logic levels, starting at the inputs and proceeding to the outputs. Each pass through the entire set of logic levels is called a Target Cycle; the evaluation of each individual logic level is called an Emulation Step.\n\nSpeed is a major selling factor in the emulator market, and is a well known problem.\n\nthe purpose of this invention is to significantly improve our emulator's speed.\n\nOur invention is an improvement over that disclosed in U.S. Pat. No. 5,551,013, âMultiprocessor for Hardware Emulation,â issued to Beausoleil, et al., where a software-driven multiprocessor emulation system with a plurality of emulation processors connected in parallel in a module has one or more modules of processors to make up an emulation system.\n\nOur current processor-based emulator consists of a large number of interconnected processors, each with an individual control store, as described in detail in the U.S. Pat. No. 5,551,013. It would be desirable to improve the speed of this emulator.\n\nFPGA-based emulation systems exist that achieve high speeds for small models.\n\nFPGA-based emulators are inherently I/O bound, and therefore perform poorly with large models. In general, the problem of high-speed emulation of large models had not been solved.\n\nan emulation step consisted of a setup phase, an evaluation phase, and a storage phase.\n\nclusters of processors are interconnected such that the evaluation phases can be cascaded. All processors in a cluster perform the setup in parallel.\n\nThis setup includes routing of the data through multiple evaluation units for the evaluation phase. (For most efficient operation, the input stack and data stack of each processor must be stored in shared memory within each cluster.) Then, all processors perform the storage phase, again in parallel. The net result is multiple cascaded evaluations performed in a single emulation step.\n\na key feature of the invention is that every processor in a cluster can access the input and data stacks of every other processor in the cluster.\n\nFIG. 1 illustrates how a processor reads a logic function and associated operands from the input and data store, performs the operation, and writes the results, all in a single step.\n\nFIG. 2 illustrates how, in accordance with the invention, clusters of processors share input and data stacks and are interconnected such that the setup and storing of results is done in parallel, and an option is available to route the output of one evaluation unit, via âcascadeâ connections, to the input of the next evaluation unit.\n\nFIG. 3 illustrates a single processor, with times listed as D 1 through D 4 , showing how the total step time is equal to the sum D 1 +D 2 +D 3 +D 4 .\n\nFIG. 4 shows four clustered processors and their shared input and data stacks, with the signal âcascadingâ through the four function evaluation units, and with the total step time equal to the same sum D 1 +D 2 +D 3 +D 4 .\n\nFIG. 5 illustrates three methods of routing thirteen signals through four function evaluation units, with the total step time in each case equal to the same sum D 1 +D 2 +D 3 +D 4 .\n\na parallel system may consist of hierarchically arranged processors: multiprocessor modules on multi-module boards, in a multi-board system. Synchronization is achieved by delaying the start of the next target cycle until the completion of all paths. This means that the effective emulation speed is determined by the time required to evaluate the longest path (called the critical path).\n\nthe sequencer and the interconnection network occurs only once in a module.\n\nthe control stores hold a program created by an emulation compiler for a specified processor.\n\nthe stacks hold data and inputs previously generated and are addressed by fields in a corresponding control word to locate the bits for input to the logic element.\n\nan emulation processor emulates a logic function according to the emulation program.\n\nthe data flow control interprets the current control word to route and latch data within the processor.\n\nthe node-bit-out signal from a specified processor is presented to the interconnection network where it is distributed to each of the multiplexors (one for each processor) of the module.\n\nthe node address field in the control word allows a specified processor to select for its node-bit-in signal the node-bit-out signal from any of the processors within its module.\n\nthe node bit is stored in the input stack on every step. During any operation the node-bit-out signal of a specified processor may be accessed by none, one, or all of the processors within the module.\n\nEach control store stores control words executed sequentially under control of the sequencer and program steps in the associated module. Each revolution of the sequencer causes the step value to advance from zero to a predetermined maximum value and corresponds to one target clock cycle for the emulated design. A control word in the control store is simultaneously selected during each step of the sequencer. A logic function operation is defined by each control word.\n\nEach emulation processor switches from a specified one logic gate function to a next logic gate function in a switched-emulation sequence of different gate functions.\n\nthe switched-emulation sequence of each of the processors thus can emulate a subset of gates in a hardware arrangement in which logic gates are of any type that the emulation processors functionally represent for a sequence of clock cycles.\n\nthe processors are coupled by a like number of multiplexors having outputs respectively connected to the emulation processors of a module and having inputs respectively connected to each of the other emulation processors.\n\nthe bus connected to the multiplexors enables an output from any emulation processor to be transferred to an input of any other of the emulation processors.\n\nthe embedded control store in each of the emulation processors stores logic-representing signals for controlling operations of the emulation processor.\n\nthe emulation engine's processor evaluation unit illustrated by FIG. 1 is provided with an embedded data store for each of the emulation processors which receives data generated by the very same emulation processor under control of software signals stored in the embedded control store in the same emulation processor. It is the controls that are used to transmit data from any emulation processor through a connected multiplexor under control of software signals stored in the embedded control store to control computational emulation of the hardware arrangement by operation of the plurality of processors which form evaluation units of the emulation engine under software control in accordance with the following description of FIGS. 2 , 3 , 4 , and 5 .\n\nAn execution unit in each processor's emulation unit includes a table-lookup unit for emulating any type of logic gate function and a connection from the output of each processor to a multiplexor input with every other processor in a module.\n\nEach processor embeds a control store to store software logic-representing signals for controlling operations of each processor. Also in the prior system a data store is embedded in each processor to receive data generated under control of the software signals in the control store.\n\nthe parallel processors on each module have a module input and a module output from each processor.\n\nthe plurality of modules have their module outputs interconnected to module inputs of all other modules.\n\na sequencer synchronously cycles the processors through mini-cycles on all modules.\n\nLogic software drives all of the processors in the emulation system to emulate a complex array of Boolean logic, which may represent all of the logic gates in a complex logic semiconductor chip or system. Each cycle of processing may control the emulation of a level of logic being verified by the single emulation processor illustrated in FIG. 1 , having our âcascadeâ connection control facility improvement.\n\na processor reads a logic function and associated operands from the data store, performs the operation, and writes the results as illustrated by FIG. 2 (consider the first stage as illustrative here).\n\nthe internal clock frequency of the emulator is given as (1/t), where t is the time taken for a single step.\n\nt is the time taken for a single step.\n\nthe effective speed of the emulator measured in cycles per unit time, is given as 1/(n*t).\n\nt represents the time taken for a single emulation step\n\nour invention enables, with the ability to evaluate four logic functions in the same time t, a 400% speedup by enabling each processor to evaluate effectively in parallel four (four stages are shown in FIG. 2 ) logic functions in this same time t.\n\nthe clock granularity was the time for one processor to evaluate one logic function. We have found that signal propagation times and power consumption considerations determine the step time t. This time t is greater-than or equal-to D 1 +D 2 +D 3 +D 4 .\n\nD 1 +D 2 +D 3 +D 4 includes reading from the data store, setting up the operation, performing the evaluation, and storing the results.\n\nsetup can include gathering data from other processors on the same module or on other modules.\n\nFIG. 3 shows a single processor, with the times listed as D 1 through D 4 ; the relative times are not drawn to scale.\n\nthe total step time t is equal to the sum D 1 +D 2 +D 3 +D 4 .\n\nthe total step time is D 1 +D 2 +D 3 +D 4 .\n\nthe connections between the processors in FIG. 4 are through the cascade connections shown in FIG. 2 . To visualize the speedup achieved through this invention, consider a logic path with 18 levels, A through R.\n\neach evaluation would take a single step, for a total time of 18 steps.\n\nlevels A through D would be distributed among the four processors in a cluster for evaluation in the first step.\n\nE through H would be distributed to the same four processors for evaluation in the second step.\n\nI through L would be evaluated in the third step, M through P in the fourth step, and Q and R in the fifth step.\n\nthe evaluation of the entire path would be reduced from 18 to 5 steps.\n\nFIG. 5 illustrates three methods of routing thirteen signals through four function evaluation units, with the total step time in each case equal to the same sum D 1 +D 2 +D 3 +D 4 .\n\nLandscapes\n\nEngineering & Computer Science (AREA)\n\nComputer Hardware Design (AREA)\n\nPhysics & Mathematics (AREA)\n\nTheoretical Computer Science (AREA)\n\nEvolutionary Computation (AREA)\n\nGeometry (AREA)\n\nGeneral Engineering & Computer Science (AREA)\n\nGeneral Physics & Mathematics (AREA)\n\nTest And Diagnosis Of Digital Computers (AREA)\n\nAbstract\n\nClusters of processors are interconnected as an emulation engine such that processors share input and data stacks, and the setup and storing of results are done in parallel, but the output of one evaluation unit is connected to the input of the next evaluation unit. A set of âcascadeâ connections provides access to the intermediate values. By tapping intermediate values from one processor, and feeding them to the next, a significant emulation speedup is achieved.\n\nDescription\n\nThis application is a continuation of and claims the benefit of United States application Ser. No. 09/373,125, filed on Aug. 12, 1999 now U.S. Pat. No. 6,618,698.\n\nFIELD OF THE INVENTION\n\nThis invention relates to processor-based emulation engines.\n\nTRADEMARKS\n\nIBM is a registered trademark of International Business Machines Corporation, Armonk, N.Y.\n\nBACKGROUND\n\nHardware emulators are programmable devices used in the verification of logic designs. A common method of logic design verification is to use processors to emulate the design. These processor-based emulators sequentially evaluate combinatorial logic levels, starting at the inputs and proceeding to the outputs. Each pass through the entire set of logic levels is called a Target Cycle; the evaluation of each individual logic level is called an Emulation Step.\n\nSpeed is a major selling factor in the emulator market, and is a well known problem. The purpose of this invention is to significantly improve our emulator's speed.\n\nOur invention is an improvement over that disclosed in U.S. Pat. No. 5,551,013, âMultiprocessor for Hardware Emulation,â issued to Beausoleil, et al., where a software-driven multiprocessor emulation system with a plurality of emulation processors connected in parallel in a module has one or more modules of processors to make up an emulation system. Our current processor-based emulator consists of a large number of interconnected processors, each with an individual control store, as described in detail in the U.S. Pat. No. 5,551,013. It would be desirable to improve the speed of this emulator.\n\nWhile not suitable for our purposes, but for completeness, we note that FPGA-based emulation systems exist that achieve high speeds for small models. However, FPGA-based emulators are inherently I/O bound, and therefore perform poorly with large models. In general, the problem of high-speed emulation of large models had not been solved.\n\nSUMMARY OF THE INVENTION\n\nWe have increased the processor-based emulation speed by increasing the amount of work done during each emulation step. In the original emulator, an emulation step consisted of a setup phase, an evaluation phase, and a storage phase. With this invention, clusters of processors are interconnected such that the evaluation phases can be cascaded. All processors in a cluster perform the setup in parallel. This setup includes routing of the data through multiple evaluation units for the evaluation phase. (For most efficient operation, the input stack and data stack of each processor must be stored in shared memory within each cluster.) Then, all processors perform the storage phase, again in parallel. The net result is multiple cascaded evaluations performed in a single emulation step. A key feature of the invention is that every processor in a cluster can access the input and data stacks of every other processor in the cluster.\n\nDESCRIPTION OF THE DRAWINGS\n\nFIG. 1 illustrates how a processor reads a logic function and associated operands from the input and data store, performs the operation, and writes the results, all in a single step.\n\nFIG. 2 illustrates how, in accordance with the invention, clusters of processors share input and data stacks and are interconnected such that the setup and storing of results is done in parallel, and an option is available to route the output of one evaluation unit, via âcascadeâ connections, to the input of the next evaluation unit.\n\nFIG. 3 illustrates a single processor, with times listed as D1 through D4, showing how the total step time is equal to the sum D1+D2+D3+D4.\n\nFIG. 4 shows four clustered processors and their shared input and data stacks, with the signal âcascadingâ through the four function evaluation units, and with the total step time equal to the same sum D1+D2+D3+D4.\n\nFIG. 5 illustrates three methods of routing thirteen signals through four function evaluation units, with the total step time in each case equal to the same sum D1+D2+D3+D4.\n\nDETAILED DESCRIPTION OF THE INVENTION\n\nBefore turning to the detailed description of our invention, we would note that one method of speedup is to evaluate independent logic paths in parallel. A parallel system may consist of hierarchically arranged processors: multiprocessor modules on multi-module boards, in a multi-board system. Synchronization is achieved by delaying the start of the next target cycle until the completion of all paths. This means that the effective emulation speed is determined by the time required to evaluate the longest path (called the critical path).\n\nFor evaluation of independent logic paths in parallel, we can describe our improvement over that disclosed in U.S. Pat. No. 5,551,013, âMultiprocessor for Hardware Emulation,â issued to Beausoleil, et al. (fully incorporated herein by this reference) where a software-driven multiprocessor emulation system with a plurality of emulation processors connected in parallel in a module has one or more modules of processors to make up an emulation system. To illustrate, refer to FIG. 1 of U.S. Pat. No. 5,551,013, which shows an emulation chip, called a module here, having multiple (e.g. 64) processors. All processors within the module are identical and have the internal structure shown in FIG. 1. The sequencer and the interconnection network occurs only once in a module. The control stores hold a program created by an emulation compiler for a specified processor. The stacks hold data and inputs previously generated and are addressed by fields in a corresponding control word to locate the bits for input to the logic element. During each step of the sequencer an emulation processor emulates a logic function according to the emulation program. The data flow control interprets the current control word to route and latch data within the processor. The node-bit-out signal from a specified processor is presented to the interconnection network where it is distributed to each of the multiplexors (one for each processor) of the module. The node address field in the control word allows a specified processor to select for its node-bit-in signal the node-bit-out signal from any of the processors within its module. The node bit is stored in the input stack on every step. During any operation the node-bit-out signal of a specified processor may be accessed by none, one, or all of the processors within the module.\n\nData routing within each processor's data flow and through the interconnection network occurs independently of and overlaps the execution of the logic emulation function in each processor. Each control store stores control words executed sequentially under control of the sequencer and program steps in the associated module. Each revolution of the sequencer causes the step value to advance from zero to a predetermined maximum value and corresponds to one target clock cycle for the emulated design. A control word in the control store is simultaneously selected during each step of the sequencer. A logic function operation is defined by each control word. Thus, we have provided in FIG. 1 a software-driven multiprocessor emulation system which uses in a module a plurality of emulation processors. Each of these emulation processors has an execution unit for processing multiple types of logic gate functions. Each emulation processor switches from a specified one logic gate function to a next logic gate function in a switched-emulation sequence of different gate functions. The switched-emulation sequence of each of the processors thus can emulate a subset of gates in a hardware arrangement in which logic gates are of any type that the emulation processors functionally represent for a sequence of clock cycles. The processors are coupled by a like number of multiplexors having outputs respectively connected to the emulation processors of a module and having inputs respectively connected to each of the other emulation processors. The bus connected to the multiplexors enables an output from any emulation processor to be transferred to an input of any other of the emulation processors. In accordance with our improvement, it will be understood that we have provided clusters of processors which are interconnected as an emulation engine such that the setup and storing of results is done in parallel, but the output of one evaluation unit is made available as the input of the next evaluation unit. For this purpose we enabled processors to share input and data stacks, and have provided a set of âcascadeâ connections which provides access to the intermediate values as we will describe. By tapping âintermediateâ values from one processor, and feeding them to the next, significant emulation speedup is achieved.\n\nThe embedded control store in each of the emulation processors stores logic-representing signals for controlling operations of the emulation processor. The emulation engine's processor evaluation unit illustrated by FIG. 1 is provided with an embedded data store for each of the emulation processors which receives data generated by the very same emulation processor under control of software signals stored in the embedded control store in the same emulation processor. It is the controls that are used to transmit data from any emulation processor through a connected multiplexor under control of software signals stored in the embedded control store to control computational emulation of the hardware arrangement by operation of the plurality of processors which form evaluation units of the emulation engine under software control in accordance with the following description of FIGS. 2, 3, 4, and 5.\n\nAn execution unit in each processor's emulation unit includes a table-lookup unit for emulating any type of logic gate function and a connection from the output of each processor to a multiplexor input with every other processor in a module. Each processor embeds a control store to store software logic-representing signals for controlling operations of each processor. Also in the prior system a data store is embedded in each processor to receive data generated under control of the software signals in the control store. The parallel processors on each module have a module input and a module output from each processor. The plurality of modules have their module outputs interconnected to module inputs of all other modules. A sequencer synchronously cycles the processors through mini-cycles on all modules. Logic software drives all of the processors in the emulation system to emulate a complex array of Boolean logic, which may represent all of the logic gates in a complex logic semiconductor chip or system. Each cycle of processing may control the emulation of a level of logic being verified by the single emulation processor illustrated in FIG. 1, having our âcascadeâ connection control facility improvement.\n\nFor a more detailed understanding of our invention, it should be understood that at each emulation step, a processor reads a logic function and associated operands from the data store, performs the operation, and writes the results as illustrated by FIG. 2 (consider the first stage as illustrative here). The internal clock frequency of the emulator is given as (1/t), where t is the time taken for a single step. In general, if a processor is designated to evaluate the critical path with n logic levels, then the time taken will be (n*t). (This assumes that the evaluation of the logic levels is not delayed by the availability of the input signals. Sharing input and data stacks within the clusters greatly enhances the probability that signals are available when needed.) The effective speed of the emulator, measured in cycles per unit time, is given as 1/(n*t). As our goal is to make the emulator run as fast as possible, we have developed the system as illustrated, where when, as stated above, t represents the time taken for a single emulation step, our invention enables, with the ability to evaluate four logic functions in the same time t, a 400% speedup by enabling each processor to evaluate effectively in parallel four (four stages are shown in FIG. 2) logic functions in this same time t.\n\nBefore we developed our current emulator, the clock granularity was the time for one processor to evaluate one logic function. We have found that signal propagation times and power consumption considerations determine the step time t. This time t is greater-than or equal-to D1+D2+D3+D4.\n\nThis sum, D1+D2+D3+D4, includes reading from the data store, setting up the operation, performing the evaluation, and storing the results. Note that setup can include gathering data from other processors on the same module or on other modules. We determined that for our planned interconnection networks, the setup times dominate the sum; there is a large differential between the amount of time spent during setup versus the amount of time spent during the logic evaluation.\n\nWe have provided, in accordance with our invention, the ability to exploit this time differential by tapping the results from one processor and feeding them to the next, within the step time t. Thus, when clusters of processors are interconnected such that the setup and storing of results is done in parallel, as illustrated by FIG. 2, the output of one evaluation unit has the option of being connected to the input of the next evaluation units. We have, in accordance with our invention, a set of âcascadeâ connections which provides access to these intermediate values.\n\nFIG. 3 shows a single processor, with the times listed as D1 through D4; the relative times are not drawn to scale. The total step time t is equal to the sum D1+D2+D3+D4. Now when we illustrate our invention in accordance with FIG. 4 with four clustered processors arranged with the signal flowing through all four function evaluation units, here again, the total step time is D1+D2+D3+D4. Note that the number of evaluations that can be performed within a step is limited by the relative times of DF and D3. The connections between the processors in FIG. 4 are through the cascade connections shown in FIG. 2. To visualize the speedup achieved through this invention, consider a logic path with 18 levels, A through R. In our current emulator, each evaluation would take a single step, for a total time of 18 steps. With this invention, levels A through D would be distributed among the four processors in a cluster for evaluation in the first step. E through H would be distributed to the same four processors for evaluation in the second step. I through L would be evaluated in the third step, M through P in the fourth step, and Q and R in the fifth step. The evaluation of the entire path would be reduced from 18 to 5 steps.\n\nIllustrating how different connections can be made for differing numbers of processors, FIG. 5 illustrates three methods of routing thirteen signals through four function evaluation units, with the total step time in each case equal to the same sum D1+D2+D3+D4.\n\nWhile the preferred embodiment to the invention has been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.\n\nClaims (13)\n\n1. On an integrated circuit, a processing system cluster for use in a processor-based system, comprising:\n\na cascade connection that interconnects a plurality of processing systems within the processing system cluster, each of said processing systems having an output terminal coupled with an input terminal of at least one successive processing system in said cascade connection; and\n\na stack system coupled with and shared with said processing systems within the processing system cluster, said stack system being configured to provide input signals to at least one of said processing systems and to receive output signals from at least one of said processing systems,\n\nwherein said cascade connection of said processing systems is configured to allow said processing systems to evaluate a plurality of logic functions at substantially the same time.\n\n2. The processing system cluster of claim 1, wherein each of said processing systems in said cascade connection comprises an execution unit that is configured to process multiple types of logic functions.\n\n3. The processing system cluster of claim 1, wherein said output terminal of each of said processing systems is coupled with said input terminals of substantially all successive processing systems in said cascade connection.\n\n4. The processing system cluster of claim 1, wherein said output terminal of each of said processing systems is coupled with said input terminal of said at least one successive processing system via an interconnection network.\n\n5. The processing system cluster of claim 1, wherein said stack system is configured to provide said input signals to each of said processing systems.\n\n6. The processing system cluster of claim 1, wherein said cascade connection of said processing systems is configured to evaluate said plurality of logic functions sequentially.\n\n7. The processing system cluster of claim 1, wherein said cascade connection of said processing systems is configured to receive a predetermined logic function and at least one associated operand from said stack system, to perform said predetermined logic function on said at least one associated operand, and to provide a result of said predetermined logic function to said stack system during each processing cycle of said cascade connection.\n\n8. The processing system cluster of claim 7, wherein at least one of said processing systems in said cascade connection is configured to receive an intermediate result from at least one preceding processing system in said cascade connection, to perform said predetermined logic function on said at least one associated operand and said intermediate result, and to provide said result of said predetermined logic function to at least one succeeding processing system in said cascade connection.\n\n9. On an integrated circuit, a processor-based system, comprising:\n\na plurality of processing system clusters, each processing system cluster including a cascade connection that interconnects processing systems within each of the plurality of processing system clusters, each of processing systems capable of evaluating a plurality of logic functions at substantially the same time, the cascade connection comprising output terminals on each of said processing systems within each of said plurality of processing system clusters coupled with an input terminal of at least one successive processing system in a same one of said plurality of processing system clusters; and\n\nan interconnect network that interconnects each of the plurality of processing system clusters; and\n\na stack system for each processing system cluster, said stack system coupled with and shared with each of said plurality of processing systems within each of said processing system clusters and being configured to provide input signals to at least one of said cascade connections of processing systems and to receive output signals from at least one of said cascade connections of processing systems.\n\n10. The processor-based system of claim 9, further comprising a plurality of stack systems each being coupled with a corresponding one of said plurality of processing system clusters and being configured to provide input signals to at least one of said processing systems of said corresponding one of said plurality of processing system clusters and to receive output signals from at least one of said processing systems of said corresponding one of said plurality of processing system clusters.\n\n11. The processing system cluster of claim 10, wherein at least one of said plurality of stack systems is configured to provide said input signals to each of said processing systems of said corresponding one of said plurality of processing system clusters.\n\n12. The processing system cluster of claim 10, wherein each of said plurality of stack systems is configured to provide said input signals to each of said processing systems of said corresponding one of said plurality of processing system clusters.\n\n13. The processor-based system of claim 9, wherein at least one of said plurality of stack systems is configured to provide input signals to each of said processing systems of said corresponding one of said plurality of processing system clusters and to receive output signals from at least one of said processing systems of said corresponding one of said plurality of processing system clusters.\n\nUS10/459,340 1999-08-12 2003-06-11 Clustered processors in an emulation engine Expired - Lifetime US7047179B2 (en)\n\nPriority Applications (1)\n\nApplication Number Priority Date Filing Date Title US10/459,340 US7047179B2 (en) 1999-08-12 2003-06-11 Clustered processors in an emulation engine\n\nApplications Claiming Priority (2)\n\nApplication Number Priority Date Filing Date Title US09/373,125 US6618698B1 (en) 1999-08-12 1999-08-12 Clustered processors in an emulation engine US10/459,340 US7047179B2 (en) 1999-08-12 2003-06-11 Clustered processors in an emulation engine\n\nRelated Parent Applications (1)\n\nApplication Number Title Priority Date Filing Date US09/373,125 Continuation US6618698B1 (en) 1999-08-12 1999-08-12 Clustered processors in an emulation engine\n\nPublications (2)\n\nPublication Number Publication Date US20030212539A1 US20030212539A1 (en) 2003-11-13 US7047179B2 true US7047179B2 (en) 2006-05-16\n\nFamily\n\nID=27789179\n\nFamily Applications (2)\n\nApplication Number Title Priority Date Filing Date US09/373,125 Expired - Lifetime US6618698B1 (en) 1999-08-12 1999-08-12 Clustered processors in an emulation engine US10/459,340 Expired - Lifetime US7047179B2 (en) 1999-08-12 2003-06-11 Clustered processors in an emulation engine\n\nFamily Applications Before (1)\n\nApplication Number Title Priority Date Filing Date US09/373,125 Expired - Lifetime US6618698B1 (en) 1999-08-12 1999-08-12 Clustered processors in an emulation engine\n\nCountry Status (1)\n\nCountry Link US (2) US6618698B1 (en)\n\nCited By (3)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US20070198809A1 (en) * 2006-01-31 2007-08-23 Cadence Design Systems, Inc. Method and apparatus for increasing the efficiency of an emulation engine US8743735B1 (en) 2012-01-18 2014-06-03 Cadence Design Systems, Inc. Emulation system for verifying a network device US8959010B1 (en) 2011-12-08 2015-02-17 Cadence Design Systems, Inc. Emulation system with improved reliability of interconnect and a method for programming such interconnect\n\nFamilies Citing this family (53)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US6618698B1 (en) * 1999-08-12 2003-09-09 Quickturn Design Systems, Inc. Clustered processors in an emulation engine US7107203B1 (en) * 2000-09-06 2006-09-12 Quickturn Design Systems Inc. High speed software driven emulator comprised of a plurality of emulation processors with improved board-to-board interconnection cable length identification system US7043417B1 (en) 2000-09-06 2006-05-09 Quickturn Design Systems, Inc. High speed software driven emulator comprised of a plurality of emulation processors with improved multiplexed data memory US6901359B1 (en) * 2000-09-06 2005-05-31 Quickturn Design Systems, Inc. High speed software driven emulator comprised of a plurality of emulation processors with a method to allow high speed bulk read/write operation synchronous DRAM while refreshing the memory US6898562B2 (en) * 2000-12-07 2005-05-24 International Business Machines Corporation Method and system for efficiently overriding net values in a logic simulator machine ITMI20010997A1 (en) * 2001-05-16 2002-11-16 Cit Alcatel METHODS FOR TESTING THE CONTROL SOFTWARE OF A TELECOMMUNICATIONS EQUIPMENT EQUIPPED WITH A DISTRIBUTED CONTROL EP1423509A2 (en) * 2001-08-30 2004-06-02 Stem Cell Therapeutics Inc. Differentiation of neural stem cells and therapeutic use thereof EP1430114B1 (en) * 2001-09-14 2012-01-18 Stem Cell Therapeutics Inc. Prolactin induced increase in neural stem cell numbers and therapeutical use thereof AR036402A1 (en) * 2001-09-18 2004-09-08 Stem Cell Therapeutics Inc EFFECT OF GROWTH HORMONE AND IGF-1 ON NEURONAL MOTHER CELLS. AU2003250705A1 (en) * 2002-07-31 2004-02-16 Stem Cell Therapeutics Inc. Method of enhancing neural stem cell proliferation, differentiation, and survival using pituitary adenylate cyclase activating polypeptide (pacap) US7256991B2 (en) * 2002-10-22 2007-08-14 Sullivan Jason A Non-peripherals processing control module having improved heat dissipating properties AU2003290533B2 (en) 2002-10-22 2009-04-09 Jason Sullivan Systems and methods for providing a dynamically modular processing unit BR0315624A (en) 2002-10-22 2005-08-23 Jason A Sullivan Rugged Customizable Computer Processing System FR2854703B1 (en) * 2003-05-07 2005-06-24 Arteris DEVICE FOR EMULATING ONE OR MORE INTEGRATED CIRCUIT CHIPS WO2005038676A2 (en) 2003-10-17 2005-04-28 University Of Delaware Method and apparatus for emulation of logic circuits EP1701729B1 (en) 2003-12-31 2018-05-02 Warsaw Orthopedic, Inc. Improved bone matrix compositions and methods US8734525B2 (en) 2003-12-31 2014-05-27 Warsaw Orthopedic, Inc. Osteoinductive demineralized cancellous bone CA2556266A1 (en) * 2004-02-13 2005-08-25 Stem Cell Therapeutics Corp. Use of luteinizing hormone (lh), and chorionic gonadotropin (hcg) for proliferation of neural stem cells and neurogenesis US7640155B2 (en) * 2004-06-01 2009-12-29 Quickturn Design Systems, Inc. Extensible memory architecture and communication protocol for supporting multiple devices in low-bandwidth, asynchronous applications US7739093B2 (en) * 2004-06-01 2010-06-15 Quickturn Design System, Inc. Method of visualization in processor based emulation system US7738399B2 (en) * 2004-06-01 2010-06-15 Quickturn Design Systems Inc. System and method for identifying target systems US7440866B2 (en) * 2004-06-01 2008-10-21 Quickturn Design Systems Inc. System and method for validating an input/output voltage of a target system US7606697B2 (en) * 2004-06-01 2009-10-20 Quickturn Design Systems, Inc. System and method for resolving artifacts in differential signals US7721036B2 (en) * 2004-06-01 2010-05-18 Quickturn Design Systems Inc. System and method for providing flexible signal routing and timing US7534765B2 (en) * 2005-09-27 2009-05-19 Stem Cell Therapeutics Corp. Pregnancy-induced oligodendrocyte precursor cell proliferation regulated by prolactin WO2007053850A2 (en) 2005-11-01 2007-05-10 Osteotech, Inc. Bone matrix compositions and methods CN103021908B (en) * 2005-12-20 2015-09-30 åºç¨ææå ¬å¸ Extended mainframe for semiconductor device manufacturing equipment designs US7827023B2 (en) * 2006-02-01 2010-11-02 Cadence Design Systems, Inc. Method and apparatus for increasing the efficiency of an emulation engine US8090568B2 (en) 2006-02-21 2012-01-03 Cadence Design Systems, Inc. Hardware emulator having a variable input primitive KR20080106976A (en) * 2006-03-17 2008-12-09 ì¤í  ì  í ë¼í¨í±ì¤ ì½í¬ë ì´ì  Continuous dosing regimens for neural stem cell proliferating agents and neural stem cell differentiating agents US8612201B2 (en) * 2006-04-11 2013-12-17 Cadence Design Systems, Inc. Hardware emulation system having a heterogeneous cluster of processors US7725304B1 (en) 2006-05-22 2010-05-25 Cadence Design Systems, Inc. Method and apparatus for coupling data between discrete processor based emulation integrated chips US7606698B1 (en) * 2006-09-26 2009-10-20 Cadence Design Systems, Inc. Method and apparatus for sharing data between discrete clusters of processors US8468009B1 (en) * 2006-09-28 2013-06-18 Cadence Design Systems, Inc. Hardware emulation unit having a shadow processor US7904288B1 (en) * 2006-11-06 2011-03-08 Cadence Design Systems, Inc. Hardware emulator having a variable input emulation group US7908465B1 (en) * 2006-11-17 2011-03-15 Cadence Design Systems, Inc. Hardware emulator having a selectable write-back processor unit US7739094B1 (en) * 2006-11-22 2010-06-15 Cadence Design Systems, Inc. Method and apparatus for designing an emulation chip using a selectable fastpath topology US7990724B2 (en) 2006-12-19 2011-08-02 Juhasz Paul R Mobile motherboard US8296121B2 (en) * 2007-04-25 2012-10-23 Cadence Design Systems, Inc. Method and apparatus for controlling power in an emulation system US9554920B2 (en) 2007-06-15 2017-01-31 Warsaw Orthopedic, Inc. Bone matrix compositions having nanoscale textured surfaces WO2008157495A2 (en) 2007-06-15 2008-12-24 Osteotech, Inc. Bone matrix compositions and methods CA2690816C (en) 2007-06-15 2016-12-06 Osteotech, Inc. Method of treating tissue US9358113B2 (en) 2007-07-10 2016-06-07 Warsaw Orthopedic, Inc. Delivery system US8202539B2 (en) 2007-10-19 2012-06-19 Warsaw Orthopedic, Inc. Demineralized bone matrix compositions and methods US9101475B2 (en) 2009-02-12 2015-08-11 Warsaw Orthopedic, Inc. Segmented delivery system US20110307746A1 (en) * 2010-06-07 2011-12-15 Sullivan Jason A Systems and Methods for Intelligent and Flexible Management and Monitoring of Computer Systems US9372947B1 (en) 2014-09-29 2016-06-21 Cadence Design Systems, Inc. Compacting trace data generated by emulation processors during emulation of a circuit design US9292639B1 (en) 2014-10-30 2016-03-22 Cadence Design Systems Inc. Method and system for providing additional look-up tables US9379846B1 (en) 2014-12-19 2016-06-28 Cadence Design Systems, Inc. System and method of encoding in a serializer/deserializer US9647688B1 (en) 2014-12-19 2017-05-09 Cadence Design Systems, Inc. System and method of encoding in a serializer/deserializer US9702933B1 (en) 2015-10-22 2017-07-11 Cadence Design Systems, Inc. System and method for concurrent interconnection diagnostics field US9697324B1 (en) 2015-11-05 2017-07-04 Cadence Design Systems, Inc. System for concurrent target diagnostics field US10176100B1 (en) 2015-12-21 2019-01-08 Cadence Design Systems, Inc. Cache coherency process\n\nCitations (76)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US3775598A (en) 1972-06-12 1973-11-27 Ibm Fault simulation system for determining the testability of a non-linear integrated circuit by an electrical signal test pattern US4306286A (en) 1979-06-29 1981-12-15 International Business Machines Corporation Logic simulation machine US4594677A (en) 1983-11-09 1986-06-10 International Business Machines Corporation System for detecting and diagnosing noise caused by simultaneous current switching US4656580A (en) 1982-06-11 1987-04-07 International Business Machines Corporation Logic simulation machine US4744084A (en) 1986-02-27 1988-05-10 Mentor Graphics Corporation Hardware modeling system and method for simulating portions of electrical circuits US4754398A (en) 1985-06-28 1988-06-28 Cray Research, Inc. System for multiprocessor communication using local and common semaphore and information registers US4769817A (en) 1986-01-31 1988-09-06 Zycad Corporation Concurrent fault simulation for logic designs US4775950A (en) 1984-11-02 1988-10-04 Mitsubishi Denki Kabushiki Kaisha Logic simulation system US4782440A (en) 1984-08-03 1988-11-01 Nec Corporation Logic simulator using small capacity memories for storing logic states, connection patterns, and logic functions US4819150A (en) 1985-04-05 1989-04-04 Unisys Corporation Array for simulating computer functions for large computer systems US4862347A (en) 1986-04-22 1989-08-29 International Business Machine Corporation System for simulating memory arrays in a logic simulation machine US4914612A (en) 1988-03-31 1990-04-03 International Business Machines Corporation Massively distributed simulation engine US4918594A (en) 1986-02-07 1990-04-17 Hitachi, Ltd. Method and system for logical simulation of information processing system including logic circuit model and logic function model US5132971A (en) 1987-02-06 1992-07-21 Anritsu Corporation In-circuit emulator US5146460A (en) 1990-02-16 1992-09-08 International Business Machines Logic simulation using a hardware accelerator together with an automated error event isolation and trace facility US5179672A (en) 1990-06-19 1993-01-12 International Business Machines Corporation Apparatus and method for modeling parallel processing of instructions using sequential execution hardware US5210700A (en) 1990-02-20 1993-05-11 International Business Machines Corporation Automatic delay adjustment for static timing analysis US5263149A (en) 1990-03-08 1993-11-16 International Business Machines Corporation Integrated circuit logic functions simulator for selectively connected series of preprogrammed PLA devices using generated sequence of address signals being provided between simulated clock cycles US5299313A (en) 1992-07-28 1994-03-29 3Com Corporation Network interface with host independent buffer management US5313618A (en) * 1992-09-03 1994-05-17 Metalink Corp. Shared bus in-circuit emulator system and method US5327361A (en) 1990-03-30 1994-07-05 International Business Machines Corporation Events trace gatherer for a logic simulation machine US5329470A (en) 1988-12-02 1994-07-12 Quickturn Systems, Inc. Reconfigurable hardware emulation system US5339262A (en) 1992-07-10 1994-08-16 Lsi Logic Corporation Method and apparatus for interim, in-situ testing of an electronic system with an inchoate ASIC US5375074A (en) 1990-01-23 1994-12-20 At&T Corp. Unboundedly parallel simulations US5410300A (en) 1991-09-06 1995-04-25 International Business Machines Corporation Distributed crossbar switch architecture US5425036A (en) 1992-09-18 1995-06-13 Quickturn Design Systems, Inc. Method and apparatus for debugging reconfigurable emulation systems US5442772A (en) 1991-03-29 1995-08-15 International Business Machines Corporation Common breakpoint in virtual time logic simulation for parallel processors US5448496A (en) 1988-10-05 1995-09-05 Quickturn Design Systems, Inc. Partial crossbar interconnect architecture for reconfigurably connecting multiple reprogrammable logic devices in a logic emulation system US5452239A (en) 1993-01-29 1995-09-19 Quickturn Design Systems, Inc. Method of removing gated clocks from the clock nets of a netlist for timing sensitive implementation of the netlist in a hardware emulation system US5475624A (en) 1992-04-30 1995-12-12 Schlumberger Technologies, Inc. Test generation by environment emulation US5490266A (en) 1991-03-01 1996-02-06 Altera Corporation Process oriented logic simulation having stability checking US5537341A (en) 1995-02-10 1996-07-16 Jonathan Rose Complementary architecture for field-programmable gate arrays US5548785A (en) 1990-03-30 1996-08-20 International Business Machines Corporation Interface for logic simulation using parallel bus for concurrent transfers and having fifo buffers for sending data to receiving units when ready US5551013A (en) * 1994-06-03 1996-08-27 International Business Machines Corporation Multiprocessor for hardware emulation US5566097A (en) 1993-03-05 1996-10-15 International Business Machines Corporation System for optimal electronic debugging and verification employing scheduled cutover of alternative logic simulations US5581562A (en) 1992-02-07 1996-12-03 Seiko Epson Corporation Integrated circuit device implemented using a plurality of partially defective integrated circuit chips US5583450A (en) 1995-08-18 1996-12-10 Xilinx, Inc. Sequencer for a time multiplexed programmable logic device US5590345A (en) 1990-11-13 1996-12-31 International Business Machines Corporation Advanced parallel array processor(APAP) US5590372A (en) 1992-07-14 1996-12-31 International Business Machines Corporation VME bus transferring system broadcasting modifiers to multiple devices and the multiple devices simultaneously receiving data synchronously to the modifiers without acknowledging the modifiers US5596742A (en) 1993-04-02 1997-01-21 Massachusetts Institute Of Technology Virtual interconnections for reconfigurable logic systems US5600263A (en) 1995-08-18 1997-02-04 Xilinx, Inc. Configuration modes for a time multiplexed programmable logic device US5602754A (en) 1994-11-30 1997-02-11 International Business Machines Corporation Parallel execution of a complex task partitioned into a plurality of entities US5629858A (en) 1994-10-31 1997-05-13 International Business Machines Corporation CMOS transistor network to gate level model extractor for simulation, verification and test generation US5629637A (en) 1995-08-18 1997-05-13 Xilinx, Inc. Method of time multiplexing a programmable logic device US5634003A (en) 1993-07-07 1997-05-27 Fujitsu Limited Logic simulation apparatus based on dedicated hardware simulating a logic circuit and selectable to form a processing scale US5646545A (en) 1995-08-18 1997-07-08 Xilinx, Inc. Time multiplexed programmable logic device US5696987A (en) 1989-12-29 1997-12-09 Packard Bell Nec Inc. Hardware based interface for emulation of a standard system control processor US5699283A (en) 1994-09-09 1997-12-16 Hitachi, Ltd. Logic emulation system US5701441A (en) 1995-08-18 1997-12-23 Xilinx, Inc. Computer-implemented method of optimizing a design in a time multiplexed programmable logic device US5715433A (en) 1995-04-20 1998-02-03 Raghavan; Rajan Dynamic software model for emulating hardware US5715172A (en) 1994-08-26 1998-02-03 Quickturn Design Systems, Inc. Method for automatic clock qualifier selection in reprogrammable hardware emulation systems US5721695A (en) 1994-10-17 1998-02-24 Advanced Micro Devices, Inc. Simulation by emulating level sensitive latches with edge trigger latches US5727217A (en) 1995-12-20 1998-03-10 Intel Corporation Circuit and method for emulating the functionality of an advanced programmable interrupt controller US5734869A (en) 1995-09-06 1998-03-31 Chen; Duan-Ping High speed logic circuit simulator US5737578A (en) 1994-11-18 1998-04-07 International Business Machines Corp. Apparatus and method for partitioning multiport rams US5742180A (en) 1995-02-10 1998-04-21 Massachusetts Institute Of Technology Dynamically programmable gate array with multiple contexts US5754871A (en) 1990-11-13 1998-05-19 International Business Machines Corporation Parallel processing system having asynchronous SIMD processing US5761484A (en) 1994-04-01 1998-06-02 Massachusetts Institute Of Technology Virtual interconnections for reconfigurable logic systems US5761483A (en) 1995-08-18 1998-06-02 Xilinx, Inc. Optimizing and operating a time multiplexed programmable logic device US5784313A (en) 1995-08-18 1998-07-21 Xilinx, Inc. Programmable logic device including configuration data or user data memory slices US5790479A (en) 1996-09-17 1998-08-04 Xilinx, Inc. Method for characterizing interconnect timing characteristics using reference ring oscillator circuit US5798645A (en) 1992-03-31 1998-08-25 Manfred Zeiner Hardware emulations system with delay units US5801955A (en) 1996-05-31 1998-09-01 Mentor Graphics Corporation Method and apparatus for removing timing hazards in a circuit design US5802348A (en) 1995-12-18 1998-09-01 Virtual Machine Works, Inc. Logic analysis system for logic emulation systems US5815687A (en) 1996-09-19 1998-09-29 International Business Machines Corporation Apparatus and method for simulating domino logic circuits using a special machine cycle to validate pre-charge US5819065A (en) 1995-06-28 1998-10-06 Quickturn Design Systems, Inc. System and method for emulating memory US5822564A (en) 1996-06-03 1998-10-13 Quickturn Design Systems, Inc. Checkpointing in an emulation system US5822570A (en) 1996-10-30 1998-10-13 Microsoft Corporation System and method for parsing and executing a single instruction stream using a plurality of tightly coupled parsing and execution units US5966528A (en) * 1990-11-13 1999-10-12 International Business Machines Corporation SIMD/MIMD array processor with vector processing US6035117A (en) * 1998-03-31 2000-03-07 International Business Machines Corporation Tightly coupled emulation processors US6051030A (en) * 1998-03-31 2000-04-18 International Business Machines Corporation Emulation module having planar array organization US6075937A (en) * 1998-03-18 2000-06-13 International Business Machines Corporation Preprocessing of stored target routines for controlling emulation of incompatible instructions on a target processor and utilizing target processor feedback for controlling non-sequential incompatible instruction emulation US6192072B1 (en) * 1999-06-04 2001-02-20 Lucent Technologies Inc. Parallel processing decision-feedback equalizer (DFE) with look-ahead processing US6370585B1 (en) * 1997-09-05 2002-04-09 Sun Microsystems, Inc. Multiprocessing computer system employing a cluster communication launching and addressing mechanism US6564376B1 (en) * 1999-09-30 2003-05-13 International Business Machines Corporation Method, system and program products for operationally backing out components of a cluster through emulation US6618698B1 (en) * 1999-08-12 2003-09-09 Quickturn Design Systems, Inc. Clustered processors in an emulation engine\n\nFamily Cites Families (1)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US5326568A (en) * 1991-05-03 1994-07-05 Giampapa Vincent C Method of tissue-specific delivery\n\n1999\n\n1999-08-12 US US09/373,125 patent/US6618698B1/en not_active Expired - Lifetime\n\n2003\n\n2003-06-11 US US10/459,340 patent/US7047179B2/en not_active Expired - Lifetime\n\nPatent Citations (87)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US3775598A (en) 1972-06-12 1973-11-27 Ibm Fault simulation system for determining the testability of a non-linear integrated circuit by an electrical signal test pattern US4306286A (en) 1979-06-29 1981-12-15 International Business Machines Corporation Logic simulation machine US4656580A (en) 1982-06-11 1987-04-07 International Business Machines Corporation Logic simulation machine US4594677A (en) 1983-11-09 1986-06-10 International Business Machines Corporation System for detecting and diagnosing noise caused by simultaneous current switching US4782440A (en) 1984-08-03 1988-11-01 Nec Corporation Logic simulator using small capacity memories for storing logic states, connection patterns, and logic functions US4775950A (en) 1984-11-02 1988-10-04 Mitsubishi Denki Kabushiki Kaisha Logic simulation system US4819150A (en) 1985-04-05 1989-04-04 Unisys Corporation Array for simulating computer functions for large computer systems US4754398A (en) 1985-06-28 1988-06-28 Cray Research, Inc. System for multiprocessor communication using local and common semaphore and information registers US4769817A (en) 1986-01-31 1988-09-06 Zycad Corporation Concurrent fault simulation for logic designs US4918594A (en) 1986-02-07 1990-04-17 Hitachi, Ltd. Method and system for logical simulation of information processing system including logic circuit model and logic function model US4744084A (en) 1986-02-27 1988-05-10 Mentor Graphics Corporation Hardware modeling system and method for simulating portions of electrical circuits US4862347A (en) 1986-04-22 1989-08-29 International Business Machine Corporation System for simulating memory arrays in a logic simulation machine US5132971A (en) 1987-02-06 1992-07-21 Anritsu Corporation In-circuit emulator US4914612A (en) 1988-03-31 1990-04-03 International Business Machines Corporation Massively distributed simulation engine US5448496A (en) 1988-10-05 1995-09-05 Quickturn Design Systems, Inc. Partial crossbar interconnect architecture for reconfigurably connecting multiple reprogrammable logic devices in a logic emulation system US5734581A (en) 1988-10-05 1998-03-31 Quickturn Design Systems, Inc. Method for implementing tri-state nets in a logic emulation system US5812414A (en) 1988-10-05 1998-09-22 Quickturn Design Systems, Inc. Method for performing simulation using a hardware logic emulation system US5452231A (en) 1988-10-05 1995-09-19 Quickturn Design Systems, Inc. Hierarchically connected reconfigurable logic assembly US5796623A (en) 1988-10-05 1998-08-18 Quickturn Design Systems, Inc. Apparatus and method for performing computations with electrically reconfigurable logic devices US5612891A (en) 1988-10-05 1997-03-18 Quickturn Design Systems, Inc. Hardware logic emulation system with memory capability US5329470A (en) 1988-12-02 1994-07-12 Quickturn Systems, Inc. Reconfigurable hardware emulation system US5477475A (en) 1988-12-02 1995-12-19 Quickturn Design Systems, Inc. Method for emulating a circuit design using an electrically reconfigurable hardware emulation apparatus US5644515A (en) 1988-12-02 1997-07-01 Quickturn Design Systems, Inc. Hardware logic emulation system capable of probing internal nodes in a circuit design undergoing emulation US5696987A (en) 1989-12-29 1997-12-09 Packard Bell Nec Inc. Hardware based interface for emulation of a standard system control processor US5375074A (en) 1990-01-23 1994-12-20 At&T Corp. Unboundedly parallel simulations US5146460A (en) 1990-02-16 1992-09-08 International Business Machines Logic simulation using a hardware accelerator together with an automated error event isolation and trace facility US5210700A (en) 1990-02-20 1993-05-11 International Business Machines Corporation Automatic delay adjustment for static timing analysis US5263149A (en) 1990-03-08 1993-11-16 International Business Machines Corporation Integrated circuit logic functions simulator for selectively connected series of preprogrammed PLA devices using generated sequence of address signals being provided between simulated clock cycles US5327361A (en) 1990-03-30 1994-07-05 International Business Machines Corporation Events trace gatherer for a logic simulation machine US5548785A (en) 1990-03-30 1996-08-20 International Business Machines Corporation Interface for logic simulation using parallel bus for concurrent transfers and having fifo buffers for sending data to receiving units when ready US5721953A (en) 1990-03-30 1998-02-24 International Business Machines Corporation Interface for logic simulation using parallel bus for concurrent transfers and having FIFO buffers for sending data to receiving units when ready US5179672A (en) 1990-06-19 1993-01-12 International Business Machines Corporation Apparatus and method for modeling parallel processing of instructions using sequential execution hardware US5754871A (en) 1990-11-13 1998-05-19 International Business Machines Corporation Parallel processing system having asynchronous SIMD processing US5966528A (en) * 1990-11-13 1999-10-12 International Business Machines Corporation SIMD/MIMD array processor with vector processing US5842031A (en) 1990-11-13 1998-11-24 International Business Machines Corporation Advanced parallel array processor (APAP) US5590345A (en) 1990-11-13 1996-12-31 International Business Machines Corporation Advanced parallel array processor(APAP) US5490266A (en) 1991-03-01 1996-02-06 Altera Corporation Process oriented logic simulation having stability checking US5442772A (en) 1991-03-29 1995-08-15 International Business Machines Corporation Common breakpoint in virtual time logic simulation for parallel processors US5410300A (en) 1991-09-06 1995-04-25 International Business Machines Corporation Distributed crossbar switch architecture US5581562A (en) 1992-02-07 1996-12-03 Seiko Epson Corporation Integrated circuit device implemented using a plurality of partially defective integrated circuit chips US5798645A (en) 1992-03-31 1998-08-25 Manfred Zeiner Hardware emulations system with delay units US5475624A (en) 1992-04-30 1995-12-12 Schlumberger Technologies, Inc. Test generation by environment emulation US5339262A (en) 1992-07-10 1994-08-16 Lsi Logic Corporation Method and apparatus for interim, in-situ testing of an electronic system with an inchoate ASIC US5590372A (en) 1992-07-14 1996-12-31 International Business Machines Corporation VME bus transferring system broadcasting modifiers to multiple devices and the multiple devices simultaneously receiving data synchronously to the modifiers without acknowledging the modifiers US5299313A (en) 1992-07-28 1994-03-29 3Com Corporation Network interface with host independent buffer management US5313618A (en) * 1992-09-03 1994-05-17 Metalink Corp. Shared bus in-circuit emulator system and method US5425036A (en) 1992-09-18 1995-06-13 Quickturn Design Systems, Inc. Method and apparatus for debugging reconfigurable emulation systems US5452239A (en) 1993-01-29 1995-09-19 Quickturn Design Systems, Inc. Method of removing gated clocks from the clock nets of a netlist for timing sensitive implementation of the netlist in a hardware emulation system US5566097A (en) 1993-03-05 1996-10-15 International Business Machines Corporation System for optimal electronic debugging and verification employing scheduled cutover of alternative logic simulations US5596742A (en) 1993-04-02 1997-01-21 Massachusetts Institute Of Technology Virtual interconnections for reconfigurable logic systems US5634003A (en) 1993-07-07 1997-05-27 Fujitsu Limited Logic simulation apparatus based on dedicated hardware simulating a logic circuit and selectable to form a processing scale US5761484A (en) 1994-04-01 1998-06-02 Massachusetts Institute Of Technology Virtual interconnections for reconfigurable logic systems US5551013A (en) * 1994-06-03 1996-08-27 International Business Machines Corporation Multiprocessor for hardware emulation US5715172A (en) 1994-08-26 1998-02-03 Quickturn Design Systems, Inc. Method for automatic clock qualifier selection in reprogrammable hardware emulation systems US5699283A (en) 1994-09-09 1997-12-16 Hitachi, Ltd. Logic emulation system US5721695A (en) 1994-10-17 1998-02-24 Advanced Micro Devices, Inc. Simulation by emulating level sensitive latches with edge trigger latches US5629858A (en) 1994-10-31 1997-05-13 International Business Machines Corporation CMOS transistor network to gate level model extractor for simulation, verification and test generation US5737578A (en) 1994-11-18 1998-04-07 International Business Machines Corp. Apparatus and method for partitioning multiport rams US5602754A (en) 1994-11-30 1997-02-11 International Business Machines Corporation Parallel execution of a complex task partitioned into a plurality of entities US5615127A (en) 1994-11-30 1997-03-25 International Business Machines Corporation Parallel execution of a complex task partitioned into a plurality of entities US5537341A (en) 1995-02-10 1996-07-16 Jonathan Rose Complementary architecture for field-programmable gate arrays US5742180A (en) 1995-02-10 1998-04-21 Massachusetts Institute Of Technology Dynamically programmable gate array with multiple contexts US5715433A (en) 1995-04-20 1998-02-03 Raghavan; Rajan Dynamic software model for emulating hardware US5819065A (en) 1995-06-28 1998-10-06 Quickturn Design Systems, Inc. System and method for emulating memory US5761483A (en) 1995-08-18 1998-06-02 Xilinx, Inc. Optimizing and operating a time multiplexed programmable logic device US5629637A (en) 1995-08-18 1997-05-13 Xilinx, Inc. Method of time multiplexing a programmable logic device US5784313A (en) 1995-08-18 1998-07-21 Xilinx, Inc. Programmable logic device including configuration data or user data memory slices US5701441A (en) 1995-08-18 1997-12-23 Xilinx, Inc. Computer-implemented method of optimizing a design in a time multiplexed programmable logic device US5646545A (en) 1995-08-18 1997-07-08 Xilinx, Inc. Time multiplexed programmable logic device US5600263A (en) 1995-08-18 1997-02-04 Xilinx, Inc. Configuration modes for a time multiplexed programmable logic device US5825662A (en) 1995-08-18 1998-10-20 Xilinx, Inc. Computer-implemented method of optimizing a time multiplexed programmable logic device US5583450A (en) 1995-08-18 1996-12-10 Xilinx, Inc. Sequencer for a time multiplexed programmable logic device US5734869A (en) 1995-09-06 1998-03-31 Chen; Duan-Ping High speed logic circuit simulator US5802348A (en) 1995-12-18 1998-09-01 Virtual Machine Works, Inc. Logic analysis system for logic emulation systems US5727217A (en) 1995-12-20 1998-03-10 Intel Corporation Circuit and method for emulating the functionality of an advanced programmable interrupt controller US5801955A (en) 1996-05-31 1998-09-01 Mentor Graphics Corporation Method and apparatus for removing timing hazards in a circuit design US5822564A (en) 1996-06-03 1998-10-13 Quickturn Design Systems, Inc. Checkpointing in an emulation system US5790479A (en) 1996-09-17 1998-08-04 Xilinx, Inc. Method for characterizing interconnect timing characteristics using reference ring oscillator circuit US5815687A (en) 1996-09-19 1998-09-29 International Business Machines Corporation Apparatus and method for simulating domino logic circuits using a special machine cycle to validate pre-charge US5822570A (en) 1996-10-30 1998-10-13 Microsoft Corporation System and method for parsing and executing a single instruction stream using a plurality of tightly coupled parsing and execution units US6370585B1 (en) * 1997-09-05 2002-04-09 Sun Microsystems, Inc. Multiprocessing computer system employing a cluster communication launching and addressing mechanism US6075937A (en) * 1998-03-18 2000-06-13 International Business Machines Corporation Preprocessing of stored target routines for controlling emulation of incompatible instructions on a target processor and utilizing target processor feedback for controlling non-sequential incompatible instruction emulation US6035117A (en) * 1998-03-31 2000-03-07 International Business Machines Corporation Tightly coupled emulation processors US6051030A (en) * 1998-03-31 2000-04-18 International Business Machines Corporation Emulation module having planar array organization US6192072B1 (en) * 1999-06-04 2001-02-20 Lucent Technologies Inc. Parallel processing decision-feedback equalizer (DFE) with look-ahead processing US6618698B1 (en) * 1999-08-12 2003-09-09 Quickturn Design Systems, Inc. Clustered processors in an emulation engine US6564376B1 (en) * 1999-09-30 2003-05-13 International Business Machines Corporation Method, system and program products for operationally backing out components of a cluster through emulation\n\nNon-Patent Citations (6)\n\n* Cited by examiner, â Cited by third party Title \"Local ratio cut and set covering partitioning for huge logic emulation systems\", Chou et alâ¡â¡Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions, vol. 14, Issue 9, â¡â¡Sep. 1995 pp.:1085-1092 â¡â¡. * \"Parallel Logic Programming Systems\", J. C. De Kergommeaux, ACM Computing Surveys, vol. 26, No. 3, Sep. 1994. * Collins, L., \"Way Ahead of the Pack,\" Electronic Times, Jan. 30, 1997, pp. 16-17. Computer Systems Architecture, J. Baer, ISBN 0-914894-15-3, Computer Science Press, 1980. Encyclopedia of Computer Science, A. Ralston, p. 1248, ISBN 0-88405-321-0, 1975. Microsoft Press Computer Dictionary, p. 447, ISBN 1-57231-446-X, 1997.\n\nCited By (4)\n\n* Cited by examiner, â Cited by third party Publication number Priority date Publication date Assignee Title US20070198809A1 (en) * 2006-01-31 2007-08-23 Cadence Design Systems, Inc. Method and apparatus for increasing the efficiency of an emulation engine US8706469B2 (en) * 2006-01-31 2014-04-22 Cadence Design Systems, Inc. Method and apparatus for increasing the efficiency of an emulation engine US8959010B1 (en) 2011-12-08 2015-02-17 Cadence Design Systems, Inc. Emulation system with improved reliability of interconnect and a method for programming such interconnect US8743735B1 (en) 2012-01-18 2014-06-03 Cadence Design Systems, Inc. Emulation system for verifying a network device\n\nAlso Published As\n\nPublication number Publication date US6618698B1 (en) 2003-09-09 US20030212539A1 (en) 2003-11-13\n\nSimilar Documents\n\nPublication Publication Date Title US7047179B2 (en) 2006-05-16 Clustered processors in an emulation engine JP2989518B2 (en) 1999-12-13 Multi-processor emulation system US7930517B2 (en) 2011-04-19 Programmable pipeline array US4553203A (en) 1985-11-12 Easily schedulable horizontal computer US4914612A (en) 1990-04-03 Massively distributed simulation engine EP0102242B1 (en) 1989-06-14 Data processing apparatus US5815723A (en) 1998-09-29 Picket autonomy on a SIMD machine US6859869B1 (en) 2005-02-22 Data processing system US6305001B1 (en) 2001-10-16 Clock distribution network planning and method therefor US4621339A (en) 1986-11-04 SIMD machine using cube connected cycles network architecture for vector processing EP0021404A1 (en) 1981-01-07 Computing system for the simulation of logic operations GB2122781A (en) 1984-01-18 Multimicroprocessor systems JPH11327944A (en) 1999-11-30 Emulation module US7054802B2 (en) 2006-05-30 Hardware-assisted design verification system using a packet-based protocol logic synthesized for efficient data loading and unloading US7904288B1 (en) 2011-03-08 Hardware emulator having a variable input emulation group US6832185B1 (en) 2004-12-14 Non-synchronous hardware emulator JP2001249824A (en) 2001-09-14 Logical emulation processor and its module unit US7725304B1 (en) 2010-05-25 Method and apparatus for coupling data between discrete processor based emulation integrated chips US4536855A (en) 1985-08-20 Impedance restoration for fast carry propagation US4811201A (en) 1989-03-07 Interconnect circuit US6886088B2 (en) 2005-04-26 Memory that allows simultaneous read requests US6901359B1 (en) 2005-05-31 High speed software driven emulator comprised of a plurality of emulation processors with a method to allow high speed bulk read/write operation synchronous DRAM while refreshing the memory EP0570952A2 (en) 1993-11-24 Slide network for an array processor\n\nLegal Events\n\nDate Code Title Description"
    }
}