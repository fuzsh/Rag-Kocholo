{
    "id": "correct_subsidiary_00051_3",
    "rank": 62,
    "data": {
        "url": "https://www.slideshare.net/slideshow/pspice-references/257561501",
        "read_more_link": "",
        "language": "en",
        "title": "PSpice References",
        "top_image": "https://cdn.slidesharecdn.com/ss_thumbnails/pspcref-230425161318-8a9a3ea0-thumbnail.jpg?width=640&height=640&fit=bounds",
        "meta_img": "https://cdn.slidesharecdn.com/ss_thumbnails/pspcref-230425161318-8a9a3ea0-thumbnail.jpg?width=640&height=640&fit=bounds",
        "images": [
            "https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=128&q=75 1x, https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=256&q=75 2x",
            "https://image.slidesharecdn.com/pspcref-230425161318-8a9a3ea0/85/PSpice-References-1-320.jpg 320w, https://image.slidesharecdn.com/pspcref-230425161318-8a9a3ea0/85/PSpice-References-1-638.jpg 638w, https://image.slidesharecdn.com/pspcref-230425161318-8a9a3ea0/75/PSpice-References-1-2048.jpg 2048w"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-04-25T16:13:18+00:00",
        "summary": "",
        "meta_description": "PSpice References - Download as a PDF or view online for free",
        "meta_lang": "en",
        "meta_favicon": "https://public.slidesharecdn.com/_next/static/media/favicon.7bc3d920.ico",
        "meta_site_name": "SlideShare",
        "canonical_link": "https://www.slideshare.net/slideshow/pspice-references/257561501",
        "text": "1. PSpice How to Use This Online Manual How to print this online manual Welcome Overview Commands Analog devices Digital devices Customizing device equations Glossary Index Reference Guide\n\n2. Copyright Â© 1985-2000 Cadence Design Systems, Inc. All rights reserved. Trademarks Allegro, Ambit, BuildGates, Cadence, Cadence logo, Concept, Diva, Dracula, Gate Ensemble, NC Verilog, OpenBook online documentation library, Orcad, Orcad Capture, PSpice, SourceLink online customer support, SPECCTRA, Spectre, Vampire, Verifault-XL, Verilog, Verilog-XL, and Virtuoso are registered trademarks of Cadence Design Systems, Inc. Affirma, Assura, Cierto, Envisia, Mercury Plus, Quickturn, Radium, Silicon Ensemble, and SPECCTRAQuest are trademarks of Cadence Design Systems, Inc. Alanza is a service mark of Cadence Design Systems, Inc. All other brand and product names mentioned herein are used for identification purposes only and are registered trademarks, trademarks, or service marks of their respective holders. Second online edition 31 May 2000 Cadence PCB Systems Division (PSD) offices PSD main office (Portland) (503) 671-9500 PSD Irvine office (949) 788-6080 PSD Japan office 81-45-682-5770 PSD UK office 44-1256-381-400 PSD customer support (877) 237-4911 PSD web site www.orcad.com PSD customer support web page www.orcad.com/technical/technical.asp PSD customer support email form www.orcad.com/technical/email_support.asp Cadence PCB Systems Division 13221 SW 68th Parkway, Suite 200\n\n3. Contents How to Use This Online Manual How to print this online manual xii Welcome xiii Overview xiv Typographical conventions xiv Command syntax formats xv Numeric value conventions xvi Numeric expression conventions xvii Command line options for Orcad applications xx Command files xx Creating and editing command files xx Log files xxi Editing log files xxii Simulation command line specification format xxiii Simulation command line options xxiv Specifying simulation command line options xxv Commands Command reference for PSpice and PSpice A/D 28 .AC (AC analysis) 30 .ALIASES, .ENDALIASES (aliases and endaliases) 31 .DC (DC analysis) 32 Linear sweep 33 Logarithmic sweep 33 Nested sweep 34 .DISTRIBUTION (user-defined distribution) 35 Deriving updated parameter values 35 Usage example 36 .END (end of circuit) 37 .EXTERNAL (external port) 38 .FOUR (Fourier analysis) 39 .FUNC (function) 40 .IC (initial bias point condition) 41 .INC (include file) 42 .LIB (library file) 43 .LOADBIAS (load bias point file) 44 .MC (Monte Carlo analysis) 45 .MODEL (model definition) 48 Parameters for setting temperature 51 Model parameters for device temperature 51 Examples 51\n\n4. Contents 4 Special considerations 52 .NODESET (set approximate node voltage for bias point) 53 .NOISE (noise analysis) 54 .OP (bias point) 56 .OPTIONS (analysis options) 57 Flag options 57 Option with a name as its value 58 Numerical options with their default values 59 Options for scheduling changes to runtime parameters 60 PSpice A/D digital simulation condition messages 61 .PARAM (parameter) 63 .PLOT (plot) 64 .PRINT (print) 66 .PROBE (Probe) 67 DC Sweep and transient analysis output variables 68 Multiple-terminal devices 70 AC analysis 72 Noise analysis 74 .SAVEBIAS (save bias point to file) 75 Usage examples 76 .SENS (sensitivity analysis) 78 .STEP (parametric analysis) 79 Usage examples 81 .STIMLIB (stimulus library file) 82 .STIMULUS (stimulus) 83 .SUBCKT (subcircuit) 84 .ENDS (end subcircuit) 84 Usage examples 86 .TEMP (temperature) 87 .TEXT (text parameter) 88 .TF (transfer) 89 .TRAN (transient analysis) 90 Scheduling changes to runtime parameters with the .TRAN statement 91 .VECTOR (digital output) 92 .WATCH (watch analysis results) 94 .WCASE (sensitivity/worst-case analysis) 95 * (comment) 98 ; (in-line comment) 99 + (line continuation) 100 Differences between PSpice and Berkeley SPICE2 101 Analog devices Analog devices 104 Device types 105 Analog device summary 105 GaAsFET 108 Capture parts 109 Setting operating temperature 109 Model parameters 110\n\n5. 5 Contents GaAsFET model parameters for all levels 110 GaAsFET model parameters specific to model levels 111 Auxiliary model parameters BTRK, DVT, and DVTT 114 GaAsFET equations 115 GaAsFET equations for DC current: all levels 115 GaAsFET equations for DC current: specific to model levels 116 GaAsFET equations for capacitance 121 GaAsFET equations for temperature effect 123 GaAsFET equations for noise 124 References 125 Capacitor 126 Capture parts 127 Breakout parts 127 Capacitor model parameters 128 Capacitor equations 128 Capacitor value formula 128 Capacitor equation for noise 128 Diode 129 Capture parts 130 Setting operating temperature 130 Diode model parameters 131 Diode equations 132 Diode equations for DC current 132 Diode equations for capacitance 132 Diode equations for noise 133 References 133 Diode equations for temperature effects 133 Voltage-controlled voltage source 134 Voltage-controlled current source 134 Basic SPICE polynomial expressions (POLY) 136 Basic controlled source properties 136 Implementation examples 137 Current-controlled current source 139 Current-controlled voltage source 139 Basic SPICE polynomial expressions (POLY) 139 Independent current source & stimulus 140 Independent voltage source & stimulus 140 Independent current source & stimulus (EXP) 142 Independent current source and stimulus exponential waveform formulas 142 Independent current source & stimulus (PULSE) 143 Independent current source and stimulus pulse waveform formulas 144 Independent current source & stimulus (PWL) 145 Independent current source & stimulus (SFFM) 148 Independent current source & stimulus (SIN) 149 Independent current source and stimulus sinusoidal waveform formulas 150 Junction FET 151\n\n6. Contents 6 Capture parts 152 Setting operating temperature 152 Model parameters 153 JFET equations 154 JFET equations for DC current 155 JFET equations for capacitance 156 JFET equations for temperature effects 157 JFET equations for noise 157 Reference 157 Inductor coupling (and magnetic core) 158 Transmission line coupling 158 Inductor coupling 159 Capture parts 161 Breakout parts 161 Inductor coupling: Jiles-Atherton model 163 Inductor coupling model parameters 163 Including air-gap effects in the inductor coupling model 164 Getting core inductor coupling model values 165 Transmission line coupling 165 Example 166 Lossy lines 166 References 167 Inductor 168 Capture parts 169 Breakout parts 170 Inductor equations 171 Inductance value formula 171 Inductor equation for noise 171 Inductor model parameters 171 MOSFET 172 Capture parts 175 Setting operating temperature 175 MOSFET model parameters 176 For all model levels 176 Model levels 1, 2, and 3 176 Model level 4 176 Model level 5 (EKV version 2.6) 177 Model level 6 (BSIM3 version 2.0) 179 Model level 7 (BSIM3 version 3.1) 179 MOSFET model parameters 182 MOSFET Equations 197 MOSFET equations for DC current 198 MOSFET equations for capacitance 199 MOSFET equations for temperature effects 200 MOSFET equations for noise 201 References 202 Bipolar transistor 203 Capture parts 204 Setting operating temperature 204\n\n7. 7 Contents Bipolar transistor model parameters 205 Distribution of the CJC capacitance 207 Bipolar transistor equations 208 Bipolar transistor equations for DC current 209 Bipolar transistor equations for capacitance 210 Bipolar transistor equations for quasi-saturation effect 211 Bipolar transistor equations for temperature effect 212 Bipolar transistor equations for noise 213 References 213 Resistor 214 Capture parts 214 Breakout parts 215 Resistor model parameters 216 Resistor equations 217 Resistor value formulas 217 Resistor equation for noise 217 Voltage-controlled switch 218 Capture parts 219 Ideal switches 219 Voltage-controlled switch model parameters 219 Special considerations 219 Voltage-controlled switch equations 220 Voltage-controlled switch equations for switch resistance 221 Voltage-controlled switch equation for noise 221 Transmission line 222 Ideal line 223 Lossy line 224 Capture parts 225 Ideal and lossy transmission lines 225 Coupled transmission lines 226 Simulating coupled lines 227 Simulation considerations 227 Transmission line model parameters 228 References 229 Independent voltage source & stimulus 230 Current-controlled switch 231 Capture parts 232 Ideal switches 232 Current-controlled switch model parameters 233 Special considerations 233 Current-controlled switch equations 233 Current-controlled switch equations for switch resistance 234 Current-controlled switch equation for noise 234 Subcircuit instantiation 235 IGBT 236 Capture parts 237 Setting operating temperature 237 IGBT device parameters 238 IGBT model parameters 239\n\n8. Contents 8 IGBT equations 240 IGBT equations for DC current 241 IGBT equations for capacitance 242 References 243 Digital devices Digital device summary 252 Digital primitive summary 253 General digital primitive format 256 Timing models 258 Treatment of unspecified propagation delays 258 Treatment of unspecified timing constraints 259 Gates 260 Standard gates 261 Standard gate timing model parameters 263 Tristate gates 264 Tristate gate types 265 Tristate gate timing model parameters 266 Bidirectional transfer gates 267 Flip-flops and latches 270 Initialization 270 Timing violations 270 Edge-triggered flip-flops 271 Edge-triggered flip-flop timing model parameters 273 Edge-triggered flip-flop truth tables DFF and JKFF 274 Edge-triggered flip-flop truth tables DFFDE and JKFFDE 275 Gated latch 276 Gated latch truth tables 278 Pullup and pulldown 279 Delay line 280 Programmable logic array 281 Read only memory 285 Random access read-write memory 289 Multi-bit A/D and D/A converter 292 Multi-bit analog-to-digital converter 293 Multi-bit digital-to-analog converter 295 Behavioral primitives 297 Logic expression 298 Pin-to-pin delay 301 Constraint checker 310 Stimulus devices 316 Stimulus generator 317 Time units 318 Stimulus generator examples 319 File stimulus 323 Stimulus file format 323 Transition format 324 File stimulus device 325 Input/output model 328\n\n9. 9 Contents Input/output model parameters 328 Digital/analog interface devices 330 Digital input (N device) 330 Digital input model parameters 331 Digital output (O Device) 334 Digital output model parameters 334 Digital model libraries 338 7400-series TTL and CMOS library files 339 4000-series CMOS library 339 Programmable array logic devices 340 Customizing device equations Introduction to Device Equations 342 Making device model changes 343 Changing a parameter name 344 Giving a parameter an alias 344 Adding a parameter 344 Changing the device equations 345 Functional subsections of the device source file 346 Adding a new device 347 Specifying new internal device structure 348 Example 348 Procedure 349 Recompiling and linking the Device Equations option 351 Personalizing your DLL 351 Simulating with the Device Equations option 352 Selecting which models to use from a Device Equations DLL 352 Glossary Index\n\n10. 10 Contents\n\n11. How to Use This Online Manual Click this toolbar button or book icon... To do this... Go back and forth between pages. Go back and forth between views. Go back to the beginning of the section. Go back to the beginning of the chapter. Go to the Commands chapter. (Other chapters have similar icons.) Go to the Index. Go to the Glossary. Go to the Contents. Commands\n\n12. How to Use This Online Manual How to print this online manual xii How to print this online manual You can print any portion of this manual, or the entire book, to keep as a printed reference. The pages are desgined to print on 8.5\"-by-11\" paper, with a left margin wide enough to punch holes for use in a binder. To print this manual 1 In Acrobat Reader, from the File menu, choose Print. 2 Under Print Range, choose one of the following: â¢ All Pages, if you want to print the entire book â¢ Current Page, if you want to print the current page only â¢ Pages, if you want to print a range of pages (such as a chapterâsee the table below ) 3 Click OK. To print this chapter... Print this range of pages... How to Use This Online Manual xi to xxv Commands 27 to 102 Analog devices 103 to 243 Digital devices 251 to 340 Customizing device equations 341 to 352 Glossary 353 to 357 Index 359 to the last page of this manual\n\n13. xiii How to Use This Online Manual Welcome Welcome Orcad family products offer a total solution for your core design tasks: schematic- and VHDL-based design entry; FPGA and CPLD design synthesis; digital, analog, and mixed-signal simulation; and printed circuit board layout. What's more, Orcad family products are a suite of applications built around an engineer's design flowâ not just a collection of independently developed point tools. PSpice is just one element in our total solution design flow.\n\n14. How to Use This Online Manual Overview xiv Overview This manual contains the reference material needed when working with special circuit analyses in PSpice. Included in this manual are detailed command descriptions, start-up option definitions, and a list of supported devices in the digital and analog device libraries. This manual has comprehensive reference material for all of the PSpice circuit analysis applications, which include: â¢ PSpice A/D â¢ PSpice A/D Basics â¢ PSpice This manual assumes that you are familiar with Microsoft Windows (NT, 95, or 98), including how to use icons, menus and dialog boxes. It also assumes you have a basic understanding about how Windows manages applications and files to perform routine tasks, such as starting applications and opening and saving your work. If you are new to Windows, please review your Microsoft Windows Userâs Guide. Typographical conventions This manual generally follows the conventions used in the Microsoft Windows Userâs Guide. Procedures for performing an operation are generally numbered with the following typographical conventions. Notation Examples Description monospace font mydiodes.slb Library files and file names. key cap or letter Press J ... A specific key or key stroke on the keyboard. monospace font Type VAC... Output produced by a printer and commands/text entered from the keyboard.\n\n15. xv How to Use This Online Manual Overview Command syntax formats The following table provides the command syntax formats. Notation Examples Description monospace font abcd User input including keypad symbols, numerals, and alphabetic characters as shown; alphabetic characters are not case sensitive. < > <model name> A required item in a command line. For example, <model name> in a command line means that the model name parameter is required. < >* <value>* The asterisk indicates that the item shown in italics must occur one or more times in the command line. [ ] [AC] Optional item. [ ]* [value]* The asterisk indicates that there is zero or more occurrences of the specified subject. < | > <YES | NO> Specify one of the given choices. [ | ] [ON | OFF] Specify zero or one of the given choices.\n\n16. How to Use This Online Manual Overview xvi Numeric value conventions The numeric value and expression conventions in the following table not only apply to the PSpice Commands, but also to the device declarations and interactive numeric entries described in subsequent chapters. Literal numeric values are written in standard floating point notation. PSpice applies the default units for the numbers describing the component values and electrical quantities. However, these values can be scaled by following the number using the appropriate scale suffix as shown in the following table. Scale Symbol Name 10-15 F femto- 10-12 P pico- 10-9 N nano- 10-6 U micro- 25.4*10-6 MIL -- 10-3 M milli- C clock cycle* * Clock cycle varies and must be set where applicable. 10+3 K kilo- 10+6 MEG mega- 10+9 G giga- 10+12 T tera-\n\n17. xvii How to Use This Online Manual Overview Numeric expression conventions Numeric values can also be indirectly represented by parameters; see the .PARAM (parameter) command. Numeric values and parameters can be used together to form arithmetic expressions. PSpice expressions can incorporate the intrinsic functions shown in the following table. The Function column lists expressions that PSpice and PSpice A/D recognize. The Meaning column lists the mathematical definition of the function. There are also some differences between the intrinsic functions available for simulation and those available for waveform analysis. Refer to your PSpice userâs guide for more information about waveform analysis. Function* Meaning Comments ABS(x) |x| ACOS(x) arccosine of x -1.0 <= x <= +1.0 ARCTAN(x) tan-1 (x) result in radians ASIN(x) arcsine of x -1.0 <= x <= +1.0 ATAN(x) tan-1 (x) result in radians ATAN2(y,x) arctan of (y/x) result in radians COS(x) cos(x) x in radians COSH(x) hyperbolic cosine of x x in radians DDT(x) time derivative of x transient analysis only EXP(x) ex IF(t, x, y) x if t=TRUE y if t=FALSE t is a Boolean expression that evaluates to TRUE or FALSE and can include logical and relational operators (see Command line options for Orcad applications). X and Y are either numeric values or expressions. For example, {IF ( v(1)<THL, v(1), v(1)*v(1)/THL )} Care should be taken in modeling the discontinuity between the IF and ELSE parts, or convergence problems can result. IMG(x) imaginary part of x returns 0.0 for real numbers LIMIT(x,min,ma x) result is min if x < min, max if x > max, and x otherwise LOG(x) ln(x) log base e LOG10(x) log(x) log base 10 M(x) magnitude of x this produces the same result as ABS(x) MAX(x,y) maximum of x and y MIN(x,y) minimum of x and y P(x) phase of x returns 0.0 for real numbers\n\n18. How to Use This Online Manual Overview xviii PWR(x,y) |x|y or, {x**y} the binary operator ** is interchangeable with PWR(x,y). PWRS(x,y) +|x|y (if x>0), -|x|y (if x<0) R(x) real part of x SCHEDULE (x1,y1,x2,y2,... xn,yn) piecewise constant function: from time x forward use y Must include an entry for TIME=0. All y values must be legal for the associated parameter. Time (x) values must be >= 0. SDT(x) time integral of x For transient analysis only. SGN(x) signum function SIN(x) sin(x) x in radians SINH(x) hyperbolic sine of x x in radians STP(x) 1 if x>0.0 0 if x<0.0 The unit step function can be used to suppress a value until a given amount of time has passed. For instance, {v(1)*STP(TIME-10ns)} gives a value of 0.0 until 10ns has elapsed, then gives v(1). SQRT(x) x1/2 TAN(x) tan(x) x in radians TANH(x) hyperbolic tangent of x x in radians TABLE (x,x1,y1,x2,y2,... xn,yn) Result is the y value corresponding to x, when all of the xn,yn points are plotted and connected by straight lines. If x is greater than the max xn, then the value is the yn associated with the largest xn. If x is less than the smallest xn, then the value is the yn associated with the smallest xn. * Most numeric specifications in PSpice allow for arithmetic expressions. Some exceptions do exist and are sum- marized in your PSpice userâs guide. There are also some differences between the intrinsic functions available for simulation and those available for waveform analysis. Refer to your PSpice userâs guide for more information about waveform analysis. Function* Meaning Comments\n\n19. xix How to Use This Online Manual Overview Expressions can contain the standard operators as shown in the following table. Operators Meaning arithmetic + addition (or string concatenation) - subtraction * multiplication / division ** exponentiation logical ~ unary NOT | boolean OR ^ boolean XOR & boolean AND relational (within IF( ) functions) == equality test != non-equality test > greater than test >= greater than or equal to test < less than test <= less than or equal to test\n\n20. How to Use This Online Manual Command line options for Orcad applications xx Command line options for Orcad applications Command files A command file is an ASCII text file which contains a list of commands to be executed. A command file can be specified in multiple ways: â¢ at the command line when starting PSpice, Stimulus Editor, or the Model Editor, â¢ by choosing Run Commands from the File menu and entering a command file name (for PSpice and Stimulus Editor only), or â¢ at the PROBECMD or STMEDCMD command line, found in the configuration file pspice.ini. The command file is read by the program and all of the commands contained within the file are performed. When the end of the command file is reached, commands are taken from the keyboard and the mouse. If no command file is specified, all of the commands are received from the keyboard and mouse. The ability to record a set of commands can be useful when using PSpice, the Model Editor, and Stimulus Editor. This is especially useful in PSpice, if you are repeatedly doing the same simulation and looking at the same waveform with only slight changes to the circuit before each run. It can also be used to automatically create hardcopy output at the end of very long (such as overnight) simulation runs. Creating and editing command files You can create your own command file using a text editor (such as Notepad). In PSpice and Stimulus Editor, you can choose Log Commands from the File menu (see Log files for an example) to record a list of transactions in a log file, then choose Run Commands from the File menu to run the logged file. After you activate cursors (from the Tools menu, choose Cursor), any mouse or keyboard movements that you make for moving the cursor will not be recorded in the command file. If you choose to create a command file using a text editor, note that the commands in the command file are the same as those available from the keyboard with these differences: â¢ The name of the command or its first capitalized letter can be used. â¢ Any line that begins with an * is a comment. â¢ Blank lines are ignored, therefore, they can be added to improve the readability of the command file. â¢ The commands @CR, @UP, @DWN, @LEFT, @RIGHT, and @ESC are used to represent the <Enter>, <â>, <â>, <â>, <â>, and <Esc> keys, respectively.\n\n21. xxi How to Use This Online Manual Command line options for Orcad applications â¢ The command PAUSE causes PSpice, the Model Editor, or Stimulus Editor to wait until any key on the keyboard is pressed. In the case of PSpice, this can be useful to examine a waveform before the command file draws the next one. The commands are one to a line in the file, but comment and blank lines can be used to make the file easier to read. Assuming that a waveform data file has been created by simulating the circuit example.dsn, you can manually create a command file (using a text editor) called example.cmd which contains the commands listed below. This set of commands draws a waveform, allows you to look at it, and then exits PSpice. * Display trace v(out2) and wait Trace Add v(out2) Pause * Exit Probe environment File Exit See Simulation command line specification format and Specifying simulation command line options for specifying command files on the simulation command line. See Simulation command line specification format and Specifying simulation command line options for details on specifying the /C or -c option for PSpice. The Search Commands feature is a Cursor option for positioning the cursor at a particular point. You can learn more about Search Commands by consulting PSpice Help. Log files Instead of creating command files by hand, using a text editor, you can generate them automatically by creating a log file while running PSpice, the Model Editor, or Stimulus Editor. While executing the particular package, all of the commands given are saved in the log file. The format of the log file is correct for use as a command file. To create a .log file in PSpice or Stimulus Editor, from the File menu, choose Log Commands and enter a log file name. This turns logging on. Any action taken after starting Log Commands is logged in the named file and can be run in another session by choosing Run Commands. You can also create a log file for PSpice, Stimulus Editor, or the Model Editor by using the /l or -l option at the command line. For example: PROBE /L EXAMPLE.LOG Of course, you can use a name for the log file that is more recognizable, such as acplots.cmd (to PSpice, the Model Editor, and Stimulus Editor, the file name is any valid file name for your computer). You can use either (/) or (-) as separators, and file names can be in upper or lower case.\n\n22. How to Use This Online Manual Command line options for Orcad applications xxii Editing log files After PSpice, the Model Editor, or Stimulus Editor is finished, the log file is available for editing to customize it for use as a command file. You can edit the following items: â¢ Add blank lines and comments to improve readability (perhaps a title and short discussion of what the file does). â¢ Add the Pause command for viewing waveforms before proceeding. â¢ Remove the Exit command from the end of the file, so that PSpice, the Model Editor, and Stimulus Editor do not automatically exit when the end of the command file is reached. You can add or delete other commands from the file or even change the file name to be more recognizable. It is possible to build onto log files, either by using your text editor to combine files or by running PSpice, the Model Editor, and Stimulus Editor with both a command and log file: PROBE /C IN.CMD /L OUT.LOG The file in.cmd gives the command to PSpice, and PSpice saves the (same) commands into the out.log file. When in.cmd runs out of commands, and PSpice is taking commands from the keyboard, these commands also go into the out.log file. To log commands in PSpice Use command logging in PSpice to record and save frequently used actions to a command file. Command files are useful when you need to remember the steps taken in order to display a set of waveforms for any given data file. 1 From the File menu, choose Log Commands. 2 In the Log File Name text box, type 2traces, then click OK. A check mark appears next to Log Command to indicate that logging is turned on. 3 From the File menu, choose Open. 4 Select example.dat (located in the examples directory), then click OK. 5 From the Trace menu, choose Add. 6 Select V(OUT1) and V(OUT2), then click OK. 7 From the File menu, choose Log Commands to turn command logging off. The check mark next to the command disappears. Subsequent actions performed are not logged in the command file. You can view the command file using an ASCII text editor, such as Notepad. Command files can be edited or appended, depending on the types of commands you want to store for future use. The file 2traces.cmd should look as shown below (with the exception of a different file path). *Command file created by Probe - Wed Apr 17 10:33:55 File Open /orcad/probe/example.dat OK Trace Add V(OUT1) V(OUT2) OK\n\n23. xxiii How to Use This Online Manual Command line options for Orcad applications To run the command log 1 From the File menu, choose Run Command. 2 Select 2traces.cmd, then click OK. The two traces appear. Simulation command line specification format The format for specifying command line options for PSpice and PSpice A/D are as follows. pspice [options] [input file(s)] input file Specifies the name of a circuit file for PSpice or PSpice A/D to simulate after it starts. The input file can be a simulation file (.sim, .cir, .net), data files (.dat), output files (.out), or any files (*.*). PSpice opens any files whose extension PSpice does not recognize as a text file. You can specify multiple input files, but if the output file or data file options are specified, they apply only to the first specified input file. The input file name can include wildcard characters (* and ?), in which case all file names matching the specification are simulated. options One or more of the options listed in Simulation command line options.\n\n24. How to Use This Online Manual Command line options for Orcad applications xxiv Simulation command line options Options can be entered using the dash (-) or slash (/) separator. Option Description -bf<flush interval> Determines how often (in minutes) the simulator will flush the buffers of the waveform data file to disk. This is useful when a long simulation is left running and the machine crashes or is restarted. In this case, the data file will be readable up to the last flush. The default is to flush every 10 minutes. The <flush interval> can be set between 0 and 1440 minutes. A value of zero means not to write unless necessary. -bn<number of buffers> Determines the number of buffers to potentially allocate for the waveform data file. Zero buffers means to do all writing directly to disk. Allocating a large number of buffers can speed up a large simulation, but will increase memory requirements. Exceeding physical memory will either slow down the simulation, or will make it fail. The default number of buffers is 4 (1 buffer if you are using the CSDF option). -bs<buffer size factor> Determines the size of the individual buffers for writing the waveform data file. Using a larger buffer size can reduce execution time, but at the expense of increasing the memory requirements. The values for the buffer files work as follows: option:-bs0 -bs1 -bs2 -bs3 -bs4 -bs5 -bs6 value: 256 512 1024 2048 4096 8192 16384 The default is 4K (8K if you are using CSDF). -c <file name> Specifies the command file, which runs the session until the command file ends or PSpice stops. -d <data file> Specifies the name of the waveform data file to which PSpice saves the waveform data from the simulation. By default, the name of the waveform data file is the name of the input file with a .dat extension. -e Exits PSpice after all specified files have been simulated. This option replaces the -wONLY option. -i <ini file name> Specifies the name of an alternate initialization file. If not specified, the simulator uses: windowspspice.ini -l <file name> Creates a log file, which saves the commands from this session. This log file can later be used as an input command file for PSpice. -o <output file> Specifies the output file to which PSpice saves the simulation output. By default, the name of the output file name defaults to the name of the input file with an .out extension.\n\n25. xxv How to Use This Online Manual Command line options for Orcad applications Specifying simulation command line options Using the pspice.ini configuration file You can customize your initialization file to include command line options by editing the PSPICECMDLINE line in the file pspice.ini, using any ASCII text editor, such as Notepad. These options take effect the next time PSpice A/D starts. The command line options can be separated by spaces or in a continuous string, therefore: -c makeplot.cmd -p newamp.prb -cmakeplot.cmd-pnewamp.prb are equivalent. The order of the options does not matter. The command line options that use <file name> assume default extensions. These command line options can be used without specifying the extension to <file name>. For example: -c makeplot -p newamp -c makeplot.cmd -p newamp.prb are equivalent. However, PSpice searches first for the exact <file name> specified for these command line options, and if that <file name> exists, PSpice uses it. If the exact <file name> does not exist, PSpice adds default extensions to <file name> and searches for those. The following default extensions are used: You can learn more about PSpice macros by consulting PSpice Help. -p <file name> Specifies a file that contains goal functions for Performance Analysis, macro definitions, and display configurations. This file is loaded after the global .prb file (specified in the .ini file by the line PRBFILE=pspice.prb), and the local .prb file (<file name>.prb), have been loaded. Definitions in this file will replace definitions from the global or local .prb files that have already been loaded. -r Runs simulation files. If this option is not specified, the specified files are opened but not simulated. -t <temp directory name> Specifies a directory where PSpice can write temporary files. This option replaces the -wTEMP option. <file name[.dat]> waveform data file -c<file name[.cmd]> command file -l<file name[.log]> log file -p<file name[.prb]> displays, goal functions, and macros file Option Description\n\n26. How to Use This Online Manual Command line options for Orcad applications xxvi\n\n27. Commands standard analyses .AC (AC analysis) .DC (DC analysis) .FOUR (Fourier analysis) .NOISE (noise analysis) .OP (bias point) .SENS (sensitivity analysis) .TF (transfer) .TRAN (transient analysis) output control .PLOT (plot) .PRINT (print) .PROBE (Probe) .VECTOR (digital output) .WATCH (watch analysis results) simple multi-run analyses .STEP (parametric analysis) .TEMP (temperature) circuit file processing .END (end of circuit) .FUNC (function) .INC (include file) .LIB (library file) .PARAM (parameter) statistical analyses .MC (Monte Carlo analysis) .WCASE (sensitivity/worst-case analysis) device modeling .ENDS (end subcircuit) .DISTRIBUTION (user-defined distribution ) .MODEL (model definition) .SUBCKT (subcircuit) initial conditions .IC (initial bias point condition) .LOADBIAS (load bias point file) .NODESET (set approximate node voltage for bias point) .SAVEBIAS (save bias point to file) miscellaneous .ALIASES, .ENDALIASES (aliases and endaliases) .EXTERNAL (external port) .OPTIONS (analysis options) .STIMLIB (stimulus library file) .STIMULUS (stimulus) .TEXT (text parameter) * (comment) ; (in-line comment) + (line continuation) Analog devices Digital devices Device equations\n\n28. Commands Command reference for PSpice and PSpice A/D 28 Command reference for PSpice and PSpice A/D Schematics users enter analysis specifications through the Analysis Setup dialog box (from the Analysis menu, select Setup). Function PSpice command Description standard analyses .AC (AC analysis) .DC (DC analysis) .FOUR (Fourier analysis) .NOISE (noise analysis) .OP (bias point) .SENS (sensitivity analysis) .TF (transfer) .TRAN (transient analysis) frequency response DC sweep Fourier components noise bias point DC sensitivity small-signal DC transfer function transient simple multi-run analyses .STEP (parametric analysis) .TEMP (temperature) parametric temperature statistical analyses .MC (Monte Carlo analysis) .WCASE (sensitivity/worst-case analysis) Monte Carlo sensitivity/worst-case initial conditions .IC (initial bias point condition) .LOADBIAS (load bias point file) .NODESET (set approximate node voltage for bias point) .SAVEBIAS (save bias point to file) clamp node voltage for bias point calculation to restore a .NODESET bias point to suggest a node voltage for bias calculation to store .NODESET bias point information device modeling .ENDS (end subcircuit) .DISTRIBUTION (user-defined distrib ution) .MODEL (model definition) .SUBCKT (subcircuit) end of subcircuit definition model parameter tolerance distribution modeled device definition to start subcircuit definition output control .PLOT (plot) .PRINT (print) .PROBE (Probe) .VECTOR (digital output) .WATCH (watch analysis results) to send an analysis plot to output file (line printer format) to send an analysis table to output file to send simulation results to Probe data file digital state output view numerical simulation results in progress\n\n29. 29 Commands Command reference for PSpice and PSpice A/D circuit file processing .END (end of circuit) .FUNC (function) .INC (include file) .LIB (library file) .PARAM (parameter) end of circuit simulation description expression function definition include specified file reference specified library parameter definition miscellaneous .ALIASES, .ENDALIASES (aliases and endaliases) .EXTERNAL (external port) .OPTIONS (analysis options) .STIMLIB (stimulus library file) .STIMULUS (stimulus) .TEXT (text parameter) * (comment) ; (in-line comment) + (line continuation) to begin and end an alias definition to identify nets representing the outermost (or peripheral) connections to the circuit being simulated to set miscellaneous simulation limits, analysis control parameters, and output characters to specify a stimulus library name containing .STIMULUS information stimulus device definition text expression, parameter, or file name used by digital devices to create a comment line to add an in-line comment to continue the text of the previous line Function PSpice command Description\n\n30. Commands .AC (AC analysis) 30 .AC (AC analysis) Purpose The .AC command calculates the frequency response of a circuit over a range of frequencies. General form .AC <sweep type> <points value> + <start frequency value> <end frequency value> Examples .AC LIN 101 100Hz 200Hz .AC OCT 10 1kHz 16kHz .AC DEC 20 1MEG 100MEG Arguments and options <sweep type> Must be LIN, OCT, or DEC, as described below. Parameter Description Description LIN linear sweep The frequency is swept linearly from the starting to the ending frequency. The <points value> is the total number of points in the sweep. OCT sweep by octaves The frequency is swept logarithmically by octaves. The <points value> is the number of points per octave. DEC sweep by decades The frequency is swept logarithmically by decades. The <points value> is the number of points per decade. <points value> Specifies the number of points in the sweep, using an integer. <start frequency value> <end frequency value> The end frequency value must not be less than the start frequency value, and both must be greater than zero. The whole sweep must include at least one point. If a group delay (G suffix) is specified as an output, the frequency steps must be close enough together that the phase of that output changes smoothly from one frequency to the next. Calculate group delay by subtracting the phases of successive outputs and dividing by the frequency increment. Comments A .PRINT (print), .PLOT (plot), or .PROBE (Probe) command must be used to get the results of the AC sweep analysis. AC analysis is a linear analysis. The simulator calculates the frequency response by linearizing the circuit around the bias point. All independent voltage and current sources that have AC values are inputs to the circuit. During AC analysis, the only independent sources that have nonzero amplitudes are those using AC specifications. The SIN specification does not count, as it is used only during transient analysis. To analyze nonlinear functions such as mixers, frequency doublers, and AGC, use .TRAN (transient analysis).\n\n31. 31 Commands .ALIASES, .ENDALIASES (aliases and endaliases) .ALIASES, .ENDALIASES (aliases and endaliases) Purpose The Alias commands set up equivalences between node names and pin names, so that traces in the Probe display can be identified by naming a device and pin instead of a node. They are also used to associate a net name with a node name. General form .ALIASES <device name> <device alias> (<<pin>=<node>>) _ _ (<<net>=<node>>) .ENDALIASES Examples .ALIASES R_RBIAS RBIAS (1=$N_0001 2=VDD) Q_Q3 Q3 (c=$N_0001 b=$N_0001 e=VEE) _ _ (OUT=$N_0007) .ENDALIASES The first alias definition shown in the example allows the name RBIAS to be used as an alias for R_RBIAS, and it relates pin 1 of device R_RBIAS to node $N_0001 and pin 2 to VDD. The last alias definition equates net name OUT to node name $N_0007.\n\n32. Commands .DC (DC analysis) 32 .DC (DC analysis) Purpose The .DC command performs a linear, logarithmic, or nested DC sweep analysis on the circuit. The DC sweep analysis calculates the circuitâs bias point over a range of values for <sweep variable name>. Sweep type The sweep can be linear, logarithmic, or a list of values. Parameter Description Meaning LIN linear sweep The sweep variable is swept linearly from the starting to the ending value. OCT sweep by octaves Sweep by octaves. The sweep variable is swept logarithmically by octaves. DEC sweep by decades Sweep by decades. The sweep variable is swept logarithmically by decades. LIST list of values Use a list of values.\n\n33. 33 Commands .DC (DC analysis) Linear sweep Logarithmic sweep General form .DC [LIN] <sweep variable name> + <start value> <end value> <increment value> + [nested sweep specification] Examples .DC VIN -.25 .25 .05 .DC LIN I2 5mA -2mA 0.1mA .DC VCE 0V 10V .5V IB 0mA 1mA 50uA .DC RES RMOD(R) 0.9 1.1 .001 Arguments and options <start value> Can be greater or less than <end value>: that is, the sweep can go in either direction. <increment value> The step size. This value must be greater than zero. Comments The sweep variable is swept linearly from the starting to the ending value. The keyword LIN is optional. General form .DC <logarithmic sweep type> <sweep variable name> + <start value> <end value> <points value> + [nested sweep specification] Examples .DC DEC NPN QFAST(IS) 1E-18 1E-14 5 Arguments and options <logarithmic sweep type> Must be specified as either DEC (to sweep by decades) or OCT (to sweep by octaves). <start value> Must be positive and less than <end value>. <points value> The number of steps per octave or per decade in the sweep. This value must be an integer. Comments Either OCT or DEC must be specified for the <logarithmic sweep type>.\n\n34. Commands .DC (DC analysis) 34 Nested sweep General form .DC <sweep variable name> LIST <value>* +[nested sweep specification] Examples .DC TEMP LIST 0 20 27 50 80 100 PARAM Vsupply 7.5 15 .5 Arguments and options <sweep variable name> After the DC sweep is finished, the value associated with <sweep variable name> is set back to the value it had before the sweep started. The following items can be used as sweep variables in a DC sweep: Parameter Description Meaning Source A name of an independent voltage or current source. During the sweep, the sourceâs voltage or current is set to the sweep value. Model Parameter A model type and model name followed by a model parameter name in parenthesis. The parameter in the model is set to the sweep value. The following model parameters cannot be (usefully) swept: L and W for the MOSFET device (use LD and WD as a work around), and any temperature parameters, such as TC1 and TC2 for the resistor. Temperature Use the keyword TEMP for <sweep variable name>. Set the temperature to the sweep value. For each value in the sweep, all the circuit components have their model parameters updated to that temperature. Global Parameter Use the keyword PARAM, followed by the parameter name, for <sweep variable name>. During the sweep, the global parameterâs value is set to the sweep value and all expressions are reevaluated. Comments For a nested sweep, a second sweep variable, sweep type, start, end, and increment values can be placed after the first sweep. In the nested sweep example, the first sweep is the inner loop: the entire first sweep is performed for each value of the second sweep. When using a list of values, there are no start and end values. Instead, the numbers that follow the keyword LIST are the values that the sweep variable is set to. The rules for the values in the second sweep are the same as for the first. The second sweep generates an entire .PRINT (print) table or .PLOT (plot) plot for each value of the sweep. Probe displays nested sweeps as a family of curves.\n\n35. 35 Commands .DISTRIBUTION (user-defined distribution) .DISTRIBUTION (user-defined distribution) Deriving updated parameter values The updated value of a parameter is derived from a combination of a random number, the distribution, and the tolerance specified. This method permits distributions which have different excursions in the positive and negative directions. It also allows the use of one distribution even if the tolerances of the components are different so long as the general shape of the distributions are the same. 1 Generate a <temporary random number> in the range (0, 1). 2 Normalize the area under the specified distribution. 3 Set the <final random number> to the point where the area under the normalized distribution equals the <temporary random number>. 4 Multiply this <final random number> by the specified tolerance. Purpose The .DISTRIBUTION command defines a user distribution for tolerances, and is only used with Monte Carlo and sensitivity/worst-case analyses. The curve described by a .DISTRIBUTION command controls the relative probability distribution of random numbers generated by PSpice to calculate model parameter deviations. General form DISTRIBUTION <name> (<deviation> <probability>)* Examples .DISTRIBUTION bi_modal (-1,1) (-.5,1) (-.5,0) (.5,0) + (.5,1) (1,1) .DISTRIBUTION triangular (-1,0) (0,1) (1,0) Arguments and options (<deviation> <probability>) Defines the distribution curve by pairs, or corner points, in a piecewise linear fashion. You can specify up to 100 value pairs. <deviation> Must be in the range (-1,+1), which matches the range of the random number generator. No <deviation> can be less than the previous <deviation> in the list, although it can repeat the previous value. <probability> Represents a relative probability, and must be positive or zero. Comments When using Schematics, several distributions can be defined by configuring an include file containing the .DISTRIBUTION command. For details on how to do this, refer to your PSpice userâs guide. If you are not using Schematics, a user-defined distribution can be specified as the default by setting the DISTRIBUTION parameter in the .OPTIONS (analysis options) command.\n\n36. Commands .DISTRIBUTION (user-defined distribution) 36 Usage example To illustrate, assume there is a 1.0 Âµfd capacitor that has a variation of -50% to +25%, and another that has tolerances of -10% to +5%. Note that both capacitorsâ tolerances are in the same general shape, i.e., both have negative excursions twice as large as their positive excursions. .distribution cdistrib (-1,1) (.5, 1) (.5, 0) (1, 0) c1 1 0 cmod 11u c2 1 0 cmod2 1u .model cmod1 cap (c=1 dev/cdistrib 50%) .model cmod2 cap (c=1 dev/cdistrib 10%) The steps taken for this example are as follows: 1 Generate a <temporary random value> of 0.3. 2 Normalize the area under the cdistrib distribution (1.5) to 1.0. 3 The <final random number> is therefore -0.55 (the point where the normalized area equals 0.3). 4 For c1, this -0.55 is then scaled by 50%, resulting in -0.275; for c2, it is scaled by 10%, resulting in -0.055. Separate random numbers are generated for each parameter that has a tolerance unless a tracking number is specified.\n\n37. 37 Commands .END (end of circuit) .END (end of circuit) Purpose The .END command marks the end of the circuit. All the data and every other command must come before it. When the .END command is reached, PSpice does all the specified analyses on the circuit. General form .END Examples * 1st circuit in file ... circuit definition .END * 2nd circuit in file ... circuit definition .END Comments There can be more than one circuit in an input file. Each circuit is marked by an .END command. PSpice processes all the analyses for each circuit before going on to the next one. Everything is reset at the beginning of each circuit. Having several circuits in one file gives the same results as having them in separate files and running each one separately. However, all the simulation results go into one .OUT file and one .DAT file. This is a convenient way to arrange a set of runs for overnight operation. The last statement in an input file must be an .END command.\n\n38. Commands .EXTERNAL (external port) 38 .EXTERNAL (external port) Purpose External ports are provided as a means of identifying and distinguishing those nets representing the outermost (or peripheral), connections to the circuit being simulated. The external port statement .EXTERNAL applies only to nodes that have digital devices attached to them. General form .EXTERNAL <attribute> <node-name>* Examples .EXTERNAL INPUT Data1, Data2, Data3 .EXTERNAL OUTPUT P1 .EXTERNAL BIDIRECTIONAL BPort1 BPort2 BPort3 Arguments and options <attribute> One of the keywords INPUT, OUTPUT, or BIDIRECTIONAL, describing the usage of the port. <node_name> One or more valid PSpice A/D node names. Comments When a node is included in a .EXTERNAL statement it is identified as a primary observation point. For example, if you are modeling and simulating a PCB-level description, you could place an .EXTERNAL (or its Capture symbol counterparts) on the edge pin nets to describe the pin as the external interface point of the network. PSpice recognizes the nets marked as .EXTERNAL when reporting any sort of timing violation. When a timing violation occurs, PSpice analyzes the conditions that would permit the effects of such a condition to propagate through the circuit. If, during this analysis, a net marked external is encountered, PSpice reports the condition as a Persistent Hazard, signifying that it has a potential effect on the externally visible behavior of the circuit. For more information on Persistent Hazards, refer to your PSpice userâs guide. Port specifications are inserted in the netlist by Capture whenever an external port symbol, EXTERNAL_IN, EXTERNAL_OUT, or EXTERNAL_BI is used. Refer to your PSpice userâs guide for more information.\n\n39. 39 Commands .FOUR (Fourier analysis) .FOUR (Fourier analysis) Purpose Fourier analysis decomposes the results of a transient analysis into Fourier components. General form .FOUR <frequency value> [no. harmonics value] <output variable> Examples .FOUR 10kHz V(5) V(6,7) I(VSENS3) .FOUR 60Hz 20 V(17) .FOUR 10kHz V([OUT1],[OUT2]) Arguments and options <output variable> An output variable of the same form as in a .PRINT (print) command or .PLOT (plot) command for a transient analysis. <frequency value> The fundamental frequency. Not all of the transient results are used, only the interval from the end, back to 1/<frequency value> before the end is used. This means that the transient analysis must be at least 1/<frequency value> seconds long. Comments The analysis results are obtained by performing a Fourier integral on the results from a transient analysis. The analysis must be supplied with specified output variables using evenly spaced time points. The time interval used is <print step value> in the .TRAN (transient analysis) command, or 1% of the <final time value> (TSTOP) if smaller, and a 2nd-order polynomial interpolation is used to calculate the output value used in the integration. The DC component, the fundamental, and the 2nd through 9th harmonics of the selected voltages and currents are calculated by default, although more harmonics can be specified. A .FOUR command requires a .TRAN command, but Fourier analysis does not require .PRINT, .PLOT, or .PROBE (Probe) commands. The tabulated results are written to the output file (.out) as the transient analysis is completed. The results of the .FOUR command are only available in the output file. They cannot be viewed in Probe.\n\n40. Commands .FUNC (function) 40 .FUNC (function) Purpose The .FUNC command defines functions used in expressions. Besides their obvious flexibility, they are useful for where there are several similar subexpressions in a circuit file. General form .FUNC <name> ([arg]*) {<body>} Examples .FUNC E(x) {exp(x)} .FUNC DECAY(CNST) {E(-CNST*TIME)} .FUNC TRIWAV(x) {ACOS(COS(x))/3.14159} .FUNC MIN3(A,B,C) {MIN(A,MIN(B,C))} Arguments and options .FUNC Does not have to precede the first use of the function name. Functions cannot be redefined and the function name must not be the same as any of the predefined functions (e.g., SIN and SQRT). See How to Use This Online Manual for a list of valid expressions. .FUNC arguments cannot be node names. <body> Refers to other (previously defined) functions; the second example, DECAY, uses the first example, E. [arg] Specifies up to 10 arguments in a definition. The number of arguments in the use of a function must agree with the number in the definition. Functions can be defined as having no arguments, but the parentheses are still required. Parameters, TIME, other functions, and the Laplace variable s are allowed in the body of function definitions. Comments The <body> of a defined function is handled in the same way as any math expression; it is enclosed in curly braces {}. Previous versions of PSpice did not require this, so for compatibility the <body> can be read without braces, but a warning is generated. Creating a file of frequently used .FUNC definitions and accessing them using an .INC command near the beginning of the circuit file can be helpful. .FUNC commands can also be defined in subcircuits. In those cases they only have local scope.\n\n41. 41 Commands .IC (initial bias point condition) .IC (initial bias point condition) Purpose The .IC command sets initial conditions for both small-signal and transient bias points. Initial conditions can be given for some or all of the circuitâs nodes. .IC sets the initial conditions for the bias point only. It does not affect a .DC (DC analysis) sweep. General form .IC < V(<node> [,<node>])=<value> >* .IC <I(<inductor>)=<value>>* Examples .IC V(2)=3.4 V(102)=0 V(3)=-1V I(L1)=2uAmp .IC V(InPlus,InMinus)=1e-3 V(100,133)=5.0V Arguments and options <value> A voltage assigned to <node> (or a current assigned to an inductor) for the duration of the bias point calculation. Comments The voltage between two nodes and the current through an inductor can be specified. During bias calculations, PSpice clamps the voltages to specified values by attaching a voltage source with a 0.0002 ohm series resistor between the specified nodes. After the bias point has been calculated and the transient analysis started, the node is released. If the circuit contains both the .IC command and .NODESET (set approximate node voltage for bias point) command for the same node or inductor, the .NODESET command is ignored (.IC overrides .NODESET). Refer to your PSpice userâs guide for more information on setting initial conditions. An .IC command that imposes nonzero voltages on inductors cannot work properly, since inductors are assumed to be short circuits for bias point calculations. However, inductor currents can be initialized.\n\n42. Commands .INC (include file) 42 .INC (include file) Purpose The .INC command inserts the contents of another file. General form .INC <file name> Examples .INC \"SETUP.CIR\" .INC \"C:LIBVCO.CIR\" Arguments and options <file name> Any character string that is a valid file name for your computer system. Comments Including a file is the same as bringing the fileâs text into the circuit file. Everything in the included file is actually read in. The comments of the included file are then treated just as if they were found in the parent file. Included files can contain any valid PSpice statements, with the following conditions: â¢ The included files should not contain title lines unless they are commented. â¢ Included files can be nested up to 4 levels. Every model and subcircuit definition, even if not needed, takes up memory.\n\n43. 43 Commands .LIB (library file) .LIB (library file) Purpose The .LIB command references a model or subcircuit library in another file. General form .LIB [file_name] Examples .LIB .LIB linear.lib .LIB \"C:libbipolar.lib\" Arguments and options [file_name] Any character string that is a valid file name for the computer system. Comments Library files can contain any combination of the following: â¢ comments â¢ .MODEL (model definition) commands â¢ subcircuit definitions (including the .ENDS (end subcircuit) command) â¢ .PARAM (parameter) commands â¢ .FUNC (function) commands â¢ .LIB commands No other statements are allowed. For further discussion of library files, refer to your PSpice userâs guide. If [file_name] is left off, all references point to the master library file, nom.lib. When a library file is referenced in Schematics, PSpice first searches for the file in the current working directory, then searches in the directory specified by the LIBPATH variable (set in msim.ini). When any library is modified, PSpice creates an index file based on the first use of the library. The index file is organized so that PSpice can find a particular .MODEL or .SUBCKT (subcircuit) quickly, despite the size of the library file. The index files have to be regenerated each time the library is changed. Because of this, it is advantageous to configure separately any frequently changed libraries. Nom.lib normally contains references to all parts in the Orcad Standard Model Library. You can edit nom.lib to include your custom model references.\n\n44. Commands .LOADBIAS (load bias point file) 44 .LOADBIAS (load bias point file) Purpose The .LOADBIAS command loads the contents of a bias point file. It is helpful in setting initial bias conditions for subsequent simulations. However, the use of .LOADBIAS does not guarantee convergence. General form .LOADBIAS <file name> Examples .LOADBIAS \"SAVETRAN.NOD\" .LOADBIAS \"C:PROJECTINIT.FIL\" Arguments and options <file name> Any character string which is a valid computer system file name, but it must be enclosed in quotation marks. Comments Normally, the bias point file is produced by a previous circuit simulation using the .SAVEBIAS (save bias point to file) command. The bias point file is a text file that contains one or more comment lines and a .NODESET (set approximate node voltage for bias point) command setting the bias point voltage or inductor current values. If a fixed value for a transient analysis bias point needs to be set, this file can be edited to replace the .NODESET command with an .IC (initial bias point condition) command. Any nodes mentioned in the loaded file that are not present in the circuit are ignored, and a warning message will be generated. To echo the .LOADBIAS file contents to the output file, use the EXPAND option on the .OPTIONS (analysis options) command.\n\n45. 45 Commands .MC (Monte Carlo analysis) .MC (Monte Carlo analysis) Purpose The .MC command causes a Monte Carlo (statistical) analysis of the circuit and causes PSpice to perform multiple runs of the selected analysis (DC, AC, or transient). General form .MC <#runs value> <analysis> <output variable> <function> [option]* + [SEED=value] Examples .MC 10 TRAN V(5) YMAX .MC 50 DC IC(Q7) YMAX LIST .MC 20 AC VP(13,5) YMAX LIST OUTPUT ALL .MC 10 TRAN V([OUT1],[OUT2]) YMAX SEED=9321 Arguments and options <#runs value> The total number of runs to be performed (for printed results the upper limit is 2,000, and for results to be viewed in Probe, the limit is 400). <analysis> Specifies at least one analysis type: .DC (DC analysis), .AC (AC analysis), or .TRAN (transient analysis). This analysis is repeated in subsequent passes. All analyses that the circuit contains are performed during the nominal pass. Only the selected analysis is performed during subsequent passes. <output variable> Identical in format to that of a .PRINT (print) output variable. <function> Specifies the operation to be performed on the values of <output variable> to reduce these to a single value. This value is the basis for the comparisons between the nominal and subsequent runs.The <function> can be any one of the following: Function Definition YMAX Find the absolute value of the greatest difference in each waveform from the nominal run. MAX Find the maximum value of each waveform. MIN Find the minimum value of each waveform. RISE_EDGE(<value>) Find the first occurrence of the waveform crossing above the threshold <value>. The waveform must have one or more points at or below <value> followed by one above; the output value listed is the first point that the waveform increases above <value>. FALL_EDGE(<value>) Find the first occurrence of the waveform crossing below the threshold <value>. The waveform must have one or more points at or above <value> followed by one below; the output value listed is where the waveform decreases below <value>.\n\n46. Commands .MC (Monte Carlo analysis) 46 <function> and all [option]s (except for <output type>) have no effect on the Probe data that is saved from the simulation. They are only applicable to the output file. [option]* Can include zero or more of the following options: Option Definition Example LIST Lists, at the beginning of each run, the model parameter values actually used for each component during that run. OUTPUT <output type> Asks for an output from subsequent runs, after the nominal (first) run. The output from any run is governed by a .PRINT, .PLOT, and .PROBE command in the file. If OUTPUT is omitted, then only the nominal run produces output. The <output type> is one of the ones shown in the examples to the right. ALL forces all output to be generated (including the nominal run). FIRST <N> generates output only during the first n runs. EVERY <N> generates output every nth run. RUNS <N>* does analysis and generates output only for the listed runs. Up to 25 values can be specified in the list. RANGE* (<low value>, <high value>) * If RANGE is omitted, then <function> is evaluated over the whole sweep range. This is equivalent to RANGE(*,*). Restricts the range over which <function> is evaluated. An asterisk (*) can be used in place of a <value> to show for all values. YMAX RANGE(*,.5) YMAX is evaluated for values of the sweep variable (e.g., time and frequency) of .5 or less. MAX RANGE(-1,*) The maximum of the output variable is found for values of the sweep variable of -1 or more. [SEED=value] Defines the seed for the random number generator within the Monte Carlo analysis (The Art of Computer Programming, Donald Knuth, vol. 2, pg. 171, âsubtractive methodâ). <value> Must be an odd integer ranging from 1 to 32,767. If the seed value is not set, its default value is 17,533. For almost all analyses, the default seed value is adequate to achieve a constant set of results. The seed value can be modified within the integer value as required.\n\n47. 47 Commands .MC (Monte Carlo analysis) Comments The first run uses nominal values of all components. Subsequent runs use variations on model parameters as specified by the DEV and LOT tolerances on each .MODEL (model definition) parameter. The other specifications on the .MC command control the output generated by the Monte Carlo analysis. For more information on Monte Carlo analysis, refer to your PSpice userâs guide.\n\n48. Commands .MODEL (model definition) 48 .MODEL (model definition) Purpose The .MODEL command defines a set of device parameters that can be referenced by devices in the circuit. General form .MODEL <model name> [AKO: <reference model name>] + <model type> + ([<parameter name> = <value> [tolerance specification]]* + [T_MEASURED=<value>] [[T_ABS=<value>] or + [T_REL_GLOBAL=<value>] or [T_REL_LOCAL=<value>]]) Examples .MODEL RMAX RES (R=1.5 TC1=.02 TC2=.005) .MODEL DNOM D (IS=1E-9) .MODEL QDRIV NPN (IS=1E-7 BF=30) .MODEL MLOAD NMOS(LEVEL=1 VTO=.7 CJ=.02pF) .MODEL CMOD CAP (C=1 DEV 5%) .MODEL DLOAD D (IS=1E-9 DEV .5% LOT 10%) .MODEL RTRACK RES (R=1 DEV/GAUSS 1% LOT/UNIFORM 5%) .MODEL QDR2 AKO:QDRIV NPN (BF=50 IKF=50m) Arguments and options <model name> The model name which is used to reference a particular model. <reference model name> The model types of the current model and the AKO (A Kind Of) reference model must be the same. The value of each parameter of the referenced model is used unless overridden by the current model, e.g., for QDR2 in the last example, the value of IS derives from QDRIV, but the values of BF and IKF come from the current definition. Parameter values or formulas are transferred, but not the tolerance specification. The referenced model can be in the main circuit file, accessed through a .INC command, or it can be in a library file; see .LIB (library file). <model type> Must be one of the types outlined in the table that follows. Devices can only reference models of a corresponding type; for example: â¢ A JFET can reference a model of types NJF or PJF, but not of type NPN. â¢ There can be more than one model of the same type in a circuit, although they must have different names. Following the <model type> is a list of parameter values enclosed by parentheses. None, any, or all of the parameters can be assigned values. Default values are used for all unassigned parameters. The lists of parameter names, meanings, and default values are found in the individual device descriptions.\n\n49. 49 Commands .MODEL (model definition) Model type Instance name Type of device CAP Cxxx capacitor CORE Kxxx nonlinear, magnetic core (transformer) D Dxxx diode DINPUT Nxxx digital input device (receive from digital) DOUTPUT Oxxx digital output device (transmit to digital) GASFET Bxxx N-channel GaAs MESFET IND Lxxx inductor ISWITCH Wxxx current-controlled switch LPNP Qxxx lateral PNP bipolar transistor NIGBT Zxxx N-channel insulated gate bipolar transistor (IGBT) NJF Jxxx N-channel junction FET NMOS Mxxx N-channel MOSFET NPN Qxxx NPN bipolar transistor PJF Jxxx P-channel junction FET PMOS Mxxx P-channel MOSFET PNP Qxxx PNP bipolar transistor RES Rxxx resistor TRN Txxx lossy transmission line UADC Uxxx multi-bit analog-to-digital converter UDAC Uxxx multi-bit digital-to-analog converter UDLY Uxxx digital delay line UEFF Uxxx edge-triggered flip-flop UGATE Uxxx standard gate UGFF Uxxx gated flip-flop UIO Uxxx digital I/O model UTGATE Uxxx tristate gate VSWITCH Sxxx voltage-controlled switch\n\n50. Commands .MODEL (model definition) 50 [tolerance specification] Appended to each parameter, using the format: [DEV [track&dist] <value>[%]] [LOT [track&dist] <value>[%]] to specify an individual device (DEV) and the device lot (LOT) parameter value deviations. The tolerance specification is used by the .MC (Monte Carlo analysis) analysis only. The LOT tolerance requires that all devices that refer to the same model use the same adjustments to the model parameter. DEV tolerances are independent, that is each device varies independently. The % shows a relative (percentage) tolerance. If it is omitted, <value> is in the same units as the parameter itself. [track & dist] Specifies the tracking and non-default distribution, using the format: [/<lot #>][/<distribution name>]. These specifications must immediately follow the keywords DEV and LOT (without spaces) and are separated by /. <lot #> Specifies which of ten random number generators, numbered 0 through 9, are used to calculate parameter value deviations. This allows deviations to be correlated between parameters in the same model, as well as between models. The generators for DEV and LOT tolerances are distinct: there are ten generators for DEV tracking and ten generators for LOT tracking. Tolerances without <lot #> are assigned individually generated random numbers. <distribution name> The distribution name is one of the following. The default distribution can be set by using the DISTRIBUTION parameter of the .OPTIONS (analysis options) command. Distribution name Function UNIFORM Generates uniformly distributed deviations over the range Â±<value>. GAUSS Generates deviations using a Gaussian distribution over the range Â±3Ï and <value> specifies the Â±1Ï deviation (i.e., this generates deviations greater than Â±<value>). <user name> Generates deviations using a user-defined distribution and <value> specifies the Â±1 deviation in the user definition; see the .DISTRIBUTION (user-defined distribution). Comments The examples are for the .MODEL parameter. The last example uses the AKO syntax to reference the parameters of the model QDRIV in the third example. For more information, refer to your PSpice userâs guide.\n\n51. 51 Commands .MODEL (model definition) Parameters for setting temperature Some passive and semiconductor devices (C, L, R, B, D, J, M, and Q) have two levels of temperature attributes that can be customized on a model-by-model basis. First, the temperature at which the model parameters were measured can be defined by using one of the following model parameter formats in the .MODEL command line: T_MEASURED = <literal value> T_MEASURED = { <parameter> } This overrides the nominal TNOM value which is set in the .OPTIONS (analysis options) command line (default = 27Â°C). All other parameters listed in the .MODEL command are assumed to have been measured at T_MEASURED. In addition to the measured model parameter temperature, current device temperatures can be customized to override the circuitâs global temperature specification defined by the .TEMP (temperature) command line (or equivalent .STEP TEMP or .DC TEMP). There are three forms, as described below. Model parameters for device temperature For all formats, <value> can be a literal value or a parameter of the form {<parameter name>}. A maximum of one device temperature customization can coexist using the T_MEASURED customization. For example, .MODEL PNP_NEW PNP( T_ABS=35 T_MEASURED=0 BF=90 ) defines a new model PNP_NEW, where BF was measured at 0Â°C. Any bipolar transistor referencing this model has an absolute device temperature of 35Â°C. Examples One This example demonstrates device temperatures set relative to the global temperature of the circuit: .TEMP 10 30 40 .MODEL PNP_NEW PNP( T_REL_GLOBAL=-5 BF=90 ) This produces three PSpice runs where global temperature changes from 10Â° to 30Â° to 40Â°C, respectively, and any bipolar transistor that references the PNP_NEW model has a device temperature of 5Â°, 25Â°, or 35Â°C, respectively. Description .MODEL format Parameter format Referencing device temperature absolute temperature standard T_ABS=<value> T_ABS relative to current temperature standard T_REL_GLOBAL=<value> global temperature + T_REL_GLOBAL relative to AKO model temperature AKO T_REL_LOCAL=<value> T_ABS(AKO Model) + T_REL_LOCAL\n\n52. Commands .MODEL (model definition) 52 Two This example sets the device temperature relative to a referenced AKO model: .MODEL PNP_NEW PNP( AKO:PNP_OLD T_REL_LOCAL=10) .MODEL PNP_OLD PNP( T_ABS=20) Any bipolar transistor referencing the PNP_NEW model has a device temperature of 30Â°C. Special considerations There are a few special considerations when using these temperature parameters: â¢ If the technique for current device temperature is using the value relative to an AKO modelâs absolute temperature (T_ABS), and the AKO referenced model does not specify T_ABS, then the T_REL_LOCAL specification is ignored and the standard global temperature specification is used. â¢ These temperature parameters cannot be used with the DEV and LOT model parameter tolerance feature. â¢ A DC sweep analysis can be performed on these parameters so long as the temperature parameter assignment is to a variable parameter. For example: .PARAM PTEMP 27 .MODEL PNP_NEW PNP ( T_ABS={PTEMP} ) .DC PARAM PTEMP 27 35 1 This method produces a single DC sweep in PSpice where any bipolar transistor referencing the PNP_NEW model has a device temperature which is swept from 27Â°C to 35Â°C in 1Â°C increments. A similar effect can be obtained by performing a parametric analysis. For instance: .PARAM PTEMP 27 .MODEL PNP_NEW PNP( T_ABS={PTEMP} ) .STEP PARAM PTEMP 27 35 1 This method produces nine PSpice runs where the PNP_NEW model temperature steps from 27Â°C to 35Â°C in increments of 1Â°C, one step per run. â¢ The effect of a temperature parameter is evaluated once prior to the bias point calculation, unless parameters are swept by means of a .DC PARAM or .STEP PARAM analysis described above. In these cases, the temperature parameterâs effect is reevaluated once for each value of the swept variable.\n\n53. 53 Commands .NODESET (set approximate node voltage for bias point) .NODESET (set approximate node voltage for bias point) Purpose The .NODESET command helps calculate the bias point by providing an initial best guess for some node voltages and/or inductor currents. Some or all of the circuitâs node voltages and inductor currents can be given the initial guess, and in addition, the voltage between two nodes can be specified. General form .NODESET < V(<node> [,<node>])=<value> >* .NODESET <I(<inductor>)=<value>> Examples .NODESET V(2)=3.4 V(102)=0 V(3)=-1V I(L1)=2uAmp .NODESET V(InPlus,InMinus)=1e-3 V(100,133)=5.0V Comments This command is effective for the bias point (both small-signal and transient bias points) and for the first step of the DC sweep. It has no effect during the rest of the DC sweep, nor during a transient analysis. Unlike the .IC (initial bias point condition) command, .NODESET provides only an initial guess for some initial values. It does not clamp those nodes to the specified voltages. However, by providing an initial guess, .NODESET can be used to break the tie in, for instance, a flip-flop, and make it come up in a required state. If both the .IC command and .NODESET command are present, the .NODESET command is ignored for the bias point calculations (.IC overrides .NODESET). For Capture-based designs, refer to your PSpice userâs guide for more information on setting initial conditions.\n\n54. Commands .NOISE (noise analysis) 54 .NOISE (noise analysis) Purpose The .NOISE command performs a noise analysis of the circuit. General form .NOISE V(<node> [,<node>]) <name> [interval value] Examples .NOISE V(5) VIN .NOISE V(101) VSRC 20 .NOISE V(4,5) ISRC .NOISE V([OUT1],[OUT2]) V1 Arguments and options V(<node> [,<node>]) Output voltage. It has a form such as V(5), which is the voltage at the output node five, or a form such as V(4,5), which is the output voltage between two nodes four and five. <name> The name of an independent voltage or current source where the equivalent input noise is calculated. The <name> is not itself a noise generator, but only a place where the equivalent input noise is calculated. [interval value] Integer that specifies how often the detailed noise analysis data is written to the output file. Comments A noise analysis is performed in conjunction with an AC sweep analysis and requires an .AC (AC analysis) command. When .NOISE is used, noise data is recorded in the Probe .DAT file for each frequency in the AC sweep. The simulator computes: â¢ Device noise for every resistor and semiconductor in the circuit (propagated to a specified output node) â¢ Total input and output noise At each frequency, each noise generatorâs contribution is calculated and propagated to the output node. At that point, all the propagated noise values are RMS-summed to calculate the total output noise. The gain from the input source to the output voltage, the total output noise, and the equivalent input noise are all calculated. For more information, refer to the AC Analyses chapter of your PSpice userâs guide. If: <name> is a voltage source then: the input noise units are volt/hertz 1/2 If: <name> is a current source then: the input noise units are amp/hertz 1/2 The output noise units are always volt/hertz 1/2 .\n\n55. 55 Commands .NOISE (noise analysis) Every nth frequency, where n is the print interval, a detailed table is printed showing the individual contributions of all the circuitâs noise generators to the total noise. These values are the noise amounts propagated to the output node, not the noise amounts at each generator. If [interval value] is not present, then no detailed table is printed. The detailed table is printed while the analysis is being performed and does not need a .PRINT (print) command or a .PLOT (plot) command. The output noise and equivalent input noise can be printed in the output by using a .PRINT command or a .PLOT command.\n\n56. Commands .OP (bias point) 56 .OP (bias point) Purpose The .OP command causes detailed information about the bias point to be printed. General form .OP Examples .OP Comments This command does not write output to the Probe data file. The bias point is calculated regardless of whether there is a .OP command. Without the .OP command, the only information about the bias point in the output is a list of the node voltages, voltage source currents, and total power dissipation. Using a .OP command can cause the small-signal (linearized) parameters of all the nonlinear controlled sources and all the semiconductor devices to be printed in the output file. The .OP command controls the output for the regular bias point only. The .TRAN (transient analysis) command controls the output for the transient analysis bias point. If no other analysis is performed, then no Probe data file is created.\n\n57. 57 Commands .OPTIONS (analysis options) .OPTIONS (analysis options) Flag options The default for any flag option is off or no (i.e., the opposite of specifying the option). Flag options affect the output file unless otherwise specified. Purpose The .OPTIONS command is used to set all the options, limits, and control parameters for the simulator. General form .OPTIONS [option name]* [ <option name>=<value> ]* Examples .OPTIONS NOECHO NOMOD DEFL=12u DEFW=8u DEFAD=150p + DEFAS=150p .OPTIONS ACCT RELTOL=.01 .OPTIONS DISTRIBUTION=GAUSS .OPTIONS DISTRIBUTION=USERDEF1 Comments The options can be listed in any order. There are two kinds of options: those with values, and those without values. Options without values are flags that are activated by simply listing the option name. The .OPTIONS command is cumulative. That is, if there are two (or more) of the .OPTIONS command, the effect is the same as if all the options were listed together in one .OPTIONS command. If the same option is listed more than once, only its last value is used. For SPICE options not available in PSpice, see Differences between PSpice and Berkeley SPICE2. Flag option Meaning ACCT Summary and accounting information is printed at the end of all the analyses (refer to your PSpice userâs guide for further information on ACCT). EXPAND Lists devices created by subcircuit expansion and lists contents of the bias point file; see .SAVEBIAS (save bias point to file) and .LOADBIAS (load bias point file). LIBRARY Lists lines used from library files. LIST Lists a summary of the circuit elements (devices). NOBIAS Suppresses the printing of the bias point node voltages. NODE Lists a summary of the connections (node table). NOECHO Suppresses a listing of the input file(s).\n\n58. Commands .OPTIONS (analysis options) 58 Option with a name as its value The following option has a name as its value. Default distribution values The default distribution is used for all of the deviations throughout the Monte Carlo analyses, unless specifically overridden for a particular tolerance. The default value for the default distribution is UNIFORM, but can also be set to GAUSS or to a user-defined (<user name>) distribution. If a user-defined distribution is selected (as illustrated in the last example on page 1-57), a .DISTRIBUTION (user-defined distribution) command must be included in the circuit file to define the user distribution for the tolerances. An example would be: .DISTRIBUTION USERDEF1 (-1,1) (.5,1) (.5,0) (1,0) NOICTRANSLATE Suppresses the translation of initial conditions (IC attributes) specified on capacitors and inductors into .IC statements (IC pseudocomponents). This means that IC attributes are ignored if the keyword Skip Bias Point (SKIPBP) is not put at the end of the .TRAN statement. See .TRAN (transient analysis). NOMOD Suppresses listing of model parameters and temperature updated values. NOOUTMSG Suppresses simulation error messages in output file. NOPAGE Suppresses paging and the banner for each major section of output. NOPRBMSG Suppresses simulation error messages in Probe data file. NOREUSE Suppresses the automatic saving and restoring of bias point information between different temperatures, Monte Carlo runs, worst-case runs, and .STEP (parametric analysis). See also .SAVEBIAS (save bias point to file) and .LOADBIAS (load bias point file). OPTS Lists values for all options. STEPGMIN Enables GMIN stepping. This causes a GMIN stepping algorithm to be applied to circuits that fail to converge. GMIN stepping is applied first, and if that fails, the simulator falls back to supply stepping. Option Meaning Default DISTRIBUTION default distribution for Monte Carlo deviations UNIFORM Flag option (continued) Meaning (continued)\n\n59. 59 Commands .OPTIONS (analysis options) .OPTIONS DISTRIBUTION=USERDEF1 Numerical options with their default values Options Description Units Default ABSTOL**** best accuracy of currents amp 1.0 pA CHGTOL best accuracy of charges coulomb 0.01 pC CPTIME* CPU time allowed for this run sec 0.0** DEFAD MOSFET default drain area (AD). meter2 0.0 DEFAS MOSFET default source area (AS). meter2 0.0 DEFL MOSFET default length (L). meter 100.0 u DEFW MOSFET default width (W). meter 100.0 u DIGFREQ minimum digital time step is 1/DIGFREQ hertz 10.0 GHz DIGDRVF minimum drive resistance (Input/Output UIO type model, DRVH (high) and DRVL (low) values) ohm 2.0 DIGDRVZ maximum drive resistance (UIO type model, DRVH and DRVL values) ohm 20K DIGERRDEFAULT default error limit per digital constraint device 20.0 DIGERRLIMIT maximum digital error message limit 0** DIGINITSTATE sets initial state of all flip-flops and latches in circuit: 0=clear, 1=set, 2=X 2.0 DIGIOLVL default digital I/O level: 1-4; see UIO in .MODEL (model definition) 1.0 DIGMNTYMX*** default delay selector: 1=min, 2-typical, 3=max, 4=min/max 2.0 DIGMNTYSCALE scale factor used to derive minimum delays from typical delays 0.4 DIGOVRDRV ratio of drive resistances required to allow one output to override another driving the same node 3.0 DIGTYMXSCALE scale factor used to derive maximum delays from typical delays 1.6 GMIN**** minimum conductance used for any branch ohm-1 1.0E-12 ITL1 DC and bias point blind repeating limit 150.0 ITL2 DC and bias point educated guess repeating limit 20.0 ITL4**** the limit at any repeating point in transient analysis 10.0 ITL5* total repeating limit for all points for transient analysis (ITL5=0 means ITL5=infinity) 0.0**\n\n60. Commands .OPTIONS (analysis options) 60 Options for scheduling changes to runtime parameters Purpose: The .OPTIONS command can be used to schedule automatic changes to certain runtime parameters during a simulation. A special command syntax is used for this (see General Form below). Note The ability to schedule such parameter changes only applies to transient analysis. You cannot interact with other analysis types. General form: .OPTIONS <Parameter Name>={SCHEDULE(<time-value>, <parameter value>, <time-value>, <parameter value>, â¦)} Example: .OPTIONS RELTOL={SCHEDULE( 0s,.001,2s,.005)} indicates that RELTOL should have a value of .001 from time 0 up to time 2s, and a value of .005 from time 2s and beyond (that is: RELTOL=.001 for t, where 0 <= t < 2s, and RELTOL=.005 for t, where t >= 2s). LIMPTS* maximum points allowed for any print table or plot (LIMPTS=0 means LIMPTS=infinity) 0.0** NUMDGT number of digits output in print tables (maximum of 8 useful digits) 4.0 PIVREL* relative magnitude required for pivot in matrix solution 1.0E-3 PIVTOL* absolute magnitude required for pivot in matrix solution 1.0E-13 RELTOL**** relative accuracy of V and I 0.001 TNOM default nominal temperature (also the temperature at which model parameters are assumed to have been measured) Â°C 27.0 VNTOL**** best accuracy of voltages volt 1.0 uV WIDTH same as the .WIDTH OUT= statement (can be set to either 80 or 132) 80.0 *These options are available for modification in PSpice, but it is recommended that the program defaults be used. **For these options zero means infinity. ***Setting the DIGMNTYMX=4 (min/max) directs PSpice to perform digital worst-case timing simulation. Refer to your PSpice userâs guide for a complete description. ****These options can have an expression that uses the SCHEDULE function, which is a function of time. Numerical options with their default values (continued) Options Description Units Default\n\n61. 61 Commands .OPTIONS (analysis options) PSpice A/D digital simulation condition messages Other PSpice features produce warning messages in simulations (e.g., for the digital CONSTRAINT devices monitoring timing relationships of digital nodes). These messages are directed to the PSpice output file (and in Windows, to the Probe data file). You can use options to control where and how many of these messages are generated. Below is a summary of the PSpice message types and a brief description of their meaning. The condition messages are specific to digital device timing violations and digital worst-case timing hazards. Refer to the Digital Simulation chapter of your PSpice userâs guide for more information on digital worst-case timing. Message type Meaning Timing violations FREQUENCY The minimum or maximum frequency specification for a signal has not been satisfied. Minimum frequency violations show that the period of the measured signal is too long, while maximum frequency violations describe signals changing too rapidly. GENERAL A boolean expression described within the GENERAL constraint checker was evaluated and produced a true result. HOLD The minimum time required for a data signal to be stable after the assertion of a clock, has not been met. SETUP The minimum time required for a data signal to be stable prior to the assertion of a clock, has not been met. RELEASE The minimum time for a signal that has gone inactive (usually a control such as CLEAR) to remain inactive before the asserting clock edge, has not been met. WIDTH The minimum pulse width specification for a signal has not been satisfied. That is, a pulse that is too narrow was observed on the node. Hazards AMBIGUITY CONVERGENCE The convergence of conflicting rising and falling states (timing ambiguities) arriving at the inputs of a primitive, have produced a pulse (glitch) on the output. CUMULATIVE AMBIGUITY Signal ambiguities are additive, increased by propagation through each level of logic in the circuit. When the ambiguities associated with both edges of a pulse increase to the point where they would overlap, this is flagged as a cumulative ambiguity hazard. DIGITAL INPUT VOLTAGE When a voltage is out of range on a digital pin, PSpice uses the state whose voltage range is closest to the input voltage and continues using the simulation. A warning message is reported. NET-STATE CONFLICT When two or more outputs attempt to drive a net to different states, PSpice represents the conflict as an X (unknown) state. This usually results from improper selection of a bus driverâs enable inputs.\n\n62. Commands .OPTIONS (analysis options) 62 SUPPRESSED GLITCH A pulse applied to the input of a primitive that is shorter than the active propagation delay is ignored by PSpice. This can or cannot be significant, depending upon the nature of the circuit. The reporting of the suppressed glitch hazard shows that there might be a problem with either the stimulus, or the path delay configuration of the circuit. PERSISTENT HAZARD If the effects of any of the other logic hazard messages mentioned in the output file are able to propagate to either an EXTERNAL port, or to any storage device in the circuit, they are flagged as PERSISTENT HAZARDs. (Refer to your PSpice userâs guide for more details on PERSISTENT HAZARDs.) ZERO-DELAY- OSCILLATION If the output of a primitive changes more than 50 times within a single digital time step, the node is considered to be oscillating. PSpice reports this and cancels the run.\n\n63. 63 Commands .PARAM (parameter) .PARAM (parameter) Purpose The .PARAM statement defines the value of a parameter. A parameter name can be used in place of most numeric values in the circuit description. Parameters can be constants, or expressions involving constants, or a combination of these, and they can include other parameters. General form .PARAM < <name> = <value> >* .PARAM < <name> = { <expression> } >* Examples .PARAM VSUPPLY = 5V .PARAM VCC = 12V, VEE = -12V .PARAM BANDWIDTH = {100kHz/3} .PARAM PI = 3.14159, TWO_PI = {2*3.14159} .PARAM VNUM = {2*TWO_PI} Arguments and options <name> Cannot begin with a number, and it cannot be one of the following predefined parameters, or TIME, or .TEXT (text parameter) names. There are several predefined parameters. The parameter values must be either constants or expressions: Predefined parameter Meaning TEMP temperature (works using ABM expressions and digital models only) VT thermal voltage (reserved) GMIN shunt conductance for semiconductor p-n junctions <value> Constants (<value>) do not need braces { }. <expression> Can contain constants or parameters. Comments The .PARAM statements are order independent. They can be used inside a subcircuit definition to create local subcircuit parameters. Once defined, a parameter can be used in place of almost all numeric values in the circuit description with the following exceptions: â¢ Not in the in-line temperature coefficients for resistors (parameters can be used for the TC1 and TC2 resistor model parameters). â¢ Not in the PWL values for independent voltage and current source (V and I device) parameters. â¢ Not the E, F, G, and H device SPICE2G6 syntax for polynomial coefficient values and gain. A .PARAM command can be in a library. The simulator can search libraries for parameters not defined in the circuit file, in the same way it searches for undefined models and subcircuits. Parameters cannot be used in place of node numbers, nor can the values on an analysis command (e.g., TRAN and AC) be parameterized.\n\n64. Commands .PLOT (plot) 64 .PLOT (plot) Purpose The .PLOT command causes results from DC, AC, noise, and transient analyses to be line printer plots in the output file. This command is included for backward compatibility with earlier versions of PSpice. It is more effective to print plots from within Probe. Printing from Probe yields higher-resolution graphics and provides an opportunity to preview the plot before printing. General form .PLOT <analysis type> [output variable]* + ( [<lower limit value> , <upper limit value>] )* Examples .PLOT DC V(3) V(2,3) V(R1) I(VIN) I(R2) IB(Q13) VBE(Q13) .PLOT AC VM(2) VP(2) VM(3,4) VG(5) VDB(5) IR(D4) .PLOT NOISE INOISE ONOISE DB(INOISE) DB(ONOISE) .PLOT TRAN V(3) V(2,3) (0,5V) ID(M2) I(VCC) (-50mA,50mA) I.PLOT TRAN D(QA) D(QB) V(3) V(2,3) .PLOT TRAN V(3) V(R1) V([RESET]) Arguments and options <analysis type> DC, AC, NOISE, or TRAN. Only one analysis type can be specified. <output variable> Following the analysis type is a list of the output variables and (possibly) Y axis scales. A maximum of 8 output variables are allowed on one .PLOT command. However, an analysis can have any number of a .PLOT command. See .PROBE (Probe) for the syntax of the output variables. (<lower limit value>, <upper limit value>) Sets the range of the y-axis. This forces all output variables on the same y-axis to use the specified range. The same form, (<lower limit value>, <upper limit value>), can also be inserted one or more times in the middle of a set of output variables. Each occurrence defines one Y axis that has the specified range. All the output variables that come between it and the next range to the left in the .PLOT command are put on its corresponding Y axis. Comments Plots are made by using text characters to draw the plot, which print on any kind of printer. However, plots printed from within Probe look much better. The range and increment of the x-axis is fixed by the analysis being plotted. The y-axis default range is determined by the ranges of the output variables. In the fourth example, the two voltage outputs go on the y-axis using the range (0,5V) and the two current outputs go on the y-axis using the range (-5mMA, 50mA). Lower and upper limit values do not apply to AC Analysis.\n\n65. 65 Commands .PLOT (plot) If the different output variables differ considerably in their output ranges, then the plot is given more than one y-axis using ranges corresponding to the different output variables. The y-axis of frequency response plots (AC) is always logarithmic. The last example illustrates how to plot the voltage at a node that has a name rather than a number. The first item to plot is a node voltage, the second item is the voltage across a resistor, and the third item is another node voltage, even though the second and third items both begin with the letter R. The square brackets force the interpretation of names to mean node names.\n\n66. Commands .PRINT (print) 66 .PRINT (print) Purpose The .PRINT command allows results from DC, AC, noise, and transient analyses to be an output in the form of tables, referred to as print tables in the output file. General form .PRINT[/DGTLCHG] <analysis type> [output variable]* Examples .PRINT DC V(3) V(2,3) V(R1) I(VIN) I(R2) IB(Q13) VBE(Q13) .PRINT AC VM(2) VP(2) VM(3,4) VG(5) VDB(5) IR(6) II(7) .PRINT NOISE INOISE ONOISE DB(INOISE) DB(ONOISE) .PRINT TRAN V(3) V(2,3) ID(M2) I(VCC) .PRINT TRAN D(QA) D(QB) V(3) V(2,3) .PRINT/DGTLCHG TRAN QA QB RESET .PRINT TRAN V(3) V(R1) V([RESET]) The last example illustrates how to print a node that has a name, rather than a number. The first item to print is a node voltage, the second item is the voltage across a resistor, and the third item to print is another node voltage, even though the second and third items both begin with the letter R. The square brackets force the names to be interpreted as node names. Arguments and options [/DGTLCHG] For digital output variables only. Values are printed for each output variable whenever one of the variables changes. <analysis type> Only one analysis typeâ DC, AC, NOISE, or TRANâcan be specified for each .PRINT command. <output variable> Following the analysis type is a list of the output variables. There is no limit to the number of output variables: the printout is split up depending on the width of the data columns (set using NUMDGT option) and the output width (set using WIDTH option). See .PROBE (Probe) for the syntax of output variables. Comments The values of the output variables are printed as a table where each column corresponds to one output variable. You can change the number of digits printed for analog values by using the NUMDGT option of the .OPTIONS (analysis options) command. An analysis can have multiple .PRINT commands.\n\n67. 67 Commands .PROBE (Probe) .PROBE (Probe) Purpose The .PROBE command writes the results from DC, AC, and transient analyses to a data file used by Probe. General form .PROBE[/CSDF][output variable]* Examples .PROBE .PROBE V(3) V(2,3) V(R1) I(VIN) I(R2) IB(Q13) VBE(Q13) .PROBE/CSDF .PROBE V(3) V(R1) V([RESET]) .PROBE D(QBAR) The first example (with no output variables) writes all the node voltages and all the device currents to the data file. The list of device currents written is the same as the device currents allowed as output variables. The second example writes only those output variables specified to the data file, to restrict the size of the data file. The third example creates a data file in a text format using the Common Simulation Data File (CSDF) format, not a binary format. This format is used for transfers between different computer families. CSDF files are larger than regular text files. The fourth example illustrates how to specify a node that has a name rather than a number. The first item to output is a node voltage, the second item is the voltage across a resistor, and the third item to output is another node voltage, even though the second and third items both begin with the letter R. The square brackets force the interpretation of names to mean node names. The last example writes only the output at digital node QBAR to the data file, to restrict the size of the data file. Arguments and options [output variable] This section describes the types of output variables allowed in a .PRINT (print), .PLOT (plot), and .PROBE command. Each .PRINT or .PLOT can have up to 8 output variables. This format is similar to that used when calling up waveforms while running Probe. See the tables below for descriptions of the possible output variables. If .PROBE is used without specifying a list of output variables, all of the circuit voltages and currents are stored for post-processing. When an output variable list is included, the data stored is limited to the listed items. This form is intended for users who want to limit the size of the Probe data file. Comments Refer to your PSpice userâs guide for a description of Probe, for information about using the Probe data file, and for more information on the use of text files in Probe. You can also consult Probe Help. Unlike the .PRINT and .PLOT commands, there are no analysis names before the output variables. Also, the number of output variables is unlimited.\n\n68. Commands .PROBE (Probe) 68 DC Sweep and transient analysis output variables For DC sweep and transient analysis, these are the available output variables: General form Meaning of output variable D(<name>) digital value of <name> (a digital node)* *These values are available for transient only. For the .PRINT/DGTLCHG statement, the D( ) is optional. /D( ) all digital data -/D( ) no digital data -/D(X) all digital data except internal sub-circuit data I(<name>) current through a two terminal device Ix(<name>) current into a terminal of a three or four terminal device (x is one of B, D, G, or S) Iz(<name>) current into one end of a transmission line (z is either A or B) /I( ) all currents -/I( ) no currents -/I(X) all currents except internal sub-circuit currents V(<node>) voltage at a node V(<+ node>, <- node>) voltage between two nodes V(<name>) voltage across a two-terminal device Vx(<name>) voltage at a non-grounded terminal of a device (see Ix) Vz(<name>) voltage at one end of a transmission line (z is either A or B) Vxy(<name>) voltage across two terminals of a three or four terminal device type /V( ) all voltages -/V( ) no voltages -/V(X) all voltages except internal sub-circuit voltages W(<name>) power dissipation of a device /W( ) all power data -/W( ) no power data -/W(X) all power data except internal sub-circuit data"
    }
}