{
    "id": "correct_subsidiary_00121_2",
    "rank": 4,
    "data": {
        "url": "https://www.infoworld.com/article/2253054/up-down-out-20-years-microsoft-internet-explorer-3.html",
        "read_more_link": "",
        "language": "en",
        "title": "Up, down, and out: 20 years of Internet Explorer",
        "top_image": "https://www.infoworld.com/wp-content/uploads/2024/06/thinkstockphotos-505208936-100648029-orig.jpg?quality=50&strip=all&w=1024",
        "meta_img": "https://www.infoworld.com/wp-content/uploads/2024/06/thinkstockphotos-505208936-100648029-orig.jpg?quality=50&strip=all&w=1024",
        "images": [
            "https://www.infoworld.com/wp-content/uploads/2024/06/thinkstockphotos-505208936-100648029-orig.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/07/482983-0-51626300-1721336819-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=484",
            "https://www.infoworld.com/wp-content/uploads/2024/07/serdaryegulalp2_crop-100796854-orig-30.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/06/nick_hodges-100924628-orig.jpg?quality=50&strip=all&w=200",
            "https://www.infoworld.com/wp-content/uploads/2024/07/2520803-0-15318900-1721342270-shutterstock_1451794184-100952664-orig.jpg?quality=50&strip=all&w=375",
            "https://www.infoworld.com/wp-content/uploads/2024/07/2520525-0-00017900-1721298859-shutterstock_2041424264.jpg?quality=50&strip=all&w=375",
            "https://www.infoworld.com/wp-content/uploads/2024/07/2518975-0-15105300-1721293240-shutterstock_2221903257.jpg?quality=50&strip=all&w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/07/Youtube-Thumbnails_Template-OLD-1.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/06/youtube-thumbnails_template-old-100963211-orig.jpg?quality=50&strip=all&w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/06/youtube-thumbnails_template-old-100963201-orig.jpg?quality=50&strip=all&w=444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mary Branscombe",
            "Mary Branscombe Contributing",
            "Serdar Yegulalp Senior",
            "Nick Hodges Contributing"
        ],
        "publish_date": "2015-08-21T06:00:00-04:00",
        "summary": "",
        "meta_description": "On IE’s 20th anniversary, the story of the web browser that had it all and lost its way.",
        "meta_lang": "en",
        "meta_favicon": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon.ico",
        "meta_site_name": "InfoWorld",
        "canonical_link": "https://www.infoworld.com/article/2253054/up-down-out-20-years-microsoft-internet-explorer-3.html",
        "text": "But there was also the fact that the W3C, the standards body that defines HTML and other web standards, went down a dead end for years trying to come up with the next version of HTML. The working group turned back to the SGML roots of HTML, trying to settle on a strict and definitive way of building pages, one that would be less error-prone but also far harder to develop for. The web was the Wild West of development, and the W3C sheriff was trying to impose order, but plenty of people preferred the freewheeling opportunity of the online frontier.\n\nIn 1998, the HTML working group decided to essentially abandon HTML4 and start rebuilding it in XML as a “fresh start.” It was also abandoning the techniques developers were using for the first web apps, saying in 1999 “after careful consideration, the HTML Working Group has decided that the goals for the next generation of forms are incompatible with preserving backward compatibility with browsers designed for earlier versions of HTML,” and the “W3C has no intention to extend HTML4.”\n\nArguments about the direction started almost immediately and continued over such fundamentals as how hyperlinks work, but the working group carried on with the new XHTML standards, warning again in 2002 that it was not interested in HTML4.\n\nWith the future of HTML mired in committee, Microsoft looked elsewhere for powerful development platforms. Like the W3C, Microsoft was interested in XML; Jean Paoli pushed Microsoft to follow his vision of self-describing information schemas and services based on open standards that would work cross-platform, codifying almost any kind of information.\n\nIn 2001 Gates talked up the idea of web services, based on XML, unlocking the flow of information in a way that the “dumb terminal” browser couldn’t. XML, he said in a memo introducing .NET, “is a lingua franca for the Internet age. Just as the web revolutionized how users talk to applications, XML transforms how applications talk to each other.”\n\nPaoli’s ideas about smart documents surfaced in a Microsoft project called NetDocs, but that was shut down in 2001 because it competed too much with Office. The underlying technologies turned up in the InfoPath forms tools and Microsoft’s own e-commerce systems, but they didn’t replace the browser.\n\nNor did .NET create the new OS the Windows team were dreaming of. Longhorn was an ambitious project, an OS written in C# and .NET that included communication and presentation technologies designed to be more powerful than what you could then do on the web.\n\nThe whole OS never shipped, but it spawned competition for the browser in the shape of managed code that would run on the (less ambitious) Windows Vista or in the browser—thanks to the Silverlight plug-in, which the team originally called WPF/E. Depending on your viewpoint, that stood for “Windows Presentation Foundation Express” or “Windows Presentation Foundation Everywhere.” Regardless, WPF/E would run on Windows (desktop and server), Mac OS, Linux, on phones (Microsoft’s own Windows Mobile and Nokia’s Symbian), and on embedded devices (Windows CE still powers everything from sewing machines to meat slicers in slaughterhouses).\n\nAlthough (as usual) opinions on the potential of .NET varied inside Microsoft, attention turned from building the web platform to building .NET and Longhorn. Many of the people who had built the Trident rendering engine for IE moved on to work on WPF/E after IE6, including Chris Wilson, and that left fewer resources for IE. “To oversimplify,” as former IE head Dean Hachamovitch later put it, “they wanted to make developing powerful, secure applications and sites a lot easier.”\n\nWPF/E started by looking at the drawbacks of Microsoft’s DHTML approach, recalls Wilson: “It doesn’t use local resources, it doesn’t run better with a better graphics card, the security model is a bit of a challenge and tool support is always a challenge. That’s when we sat down and said we need a new platform.” WPF/E was intended to be “a unified platform for documents, user interface, and media, including 2D graphics, frame-synchronized audio, and video.” But although WPF/E code could run in the browser, it was about using the power of Windows.\n\nThat was different from Silverberg’s vision for the browser, which in retrospect looks like a politer version of Andreessen’s intention of “reducing Windows to a poorly debugged set of device drivers.”\n\n“We wanted Microsoft to be in the vanguard of the Internet and be a good citizen, so we worked closely with the IETF and W3C and innovated with things like CSS3 and other ways to improve HTML, so it could be easier to develop for and have a user experience more similar to native,” Silverberg remembers. “We believed the future of PC apps was Internet apps, both client and server-side, and that is what drove IE4, whose innovation was DHTML, DOM, XML, and essentially what is AJAX and the modern web. We didn’t know where it would all lead or how it would all be used, but that was most definitely the vision.”\n\nLooking back, Scott Berkun (who carefully notes that he worked on IE until version 5 and not 6) believes “Netscape and Microsoft were after the same thing: control over the next platform. Microsoft hoped DHTML and Channels would dominate how content was created, and that IE (on many existing platforms) would lead the market for how content was consumed. Netscape had a similar strategy, with versions for many platforms, and the browser wars of 1995-1999 can be looked at as two organizations with very different histories sharing the same ambition and many of the same tactics—with the W3C, the only real champion of an open platform, playing the frustrating role of the United Nations during a world war.”\n\nThe battle was fought inside Microsoft as well, as Berkun points out (for more details, track down a copy of “Breaking Windows” by David Banks):\n\nThe plan was for the Web to replace Windows as the platform and that’s why there was, for the first time in history, a Unix version of IE, as well as a Mac version. Microsoft’s DHTML wasn’t intended just to be for the Web, the ambition was for it the complete platform of the future. Silverberg saw the writing on the wall for the Web and how the world would move away from the PC and OS centricity. Many of the features of IE4 were built on the notion of making the Web central to everything.\n\nSilverberg agrees that there was a grand vision for IE:\n\nWith the Web (and the Internet), I saw it as the manifest destiny of personal computing—the way to really get personal computing, with people being more productive, having more fun, and connected to each other, all over the world, with people of all ages and socio-economic classes. It was so easy to use and so powerful, I believed in it as a superior way of interacting with the computer.\n\nTo make that happen, the plan went far beyond the browser, including Internet Information Services in Windows Server and developer tools. In late 1996, the plan was for Visual Basic to create web apps using either ActiveX or Java (which Microsoft had licensed from Sun in December 1995, with IE pioneer Ben Slivka taking the lead). That never happened, and Microsoft’s next Java programming system, Visual J++, ran into problems when Sun objected to the Windows-specific class libraries Microsoft created to let developers take advantage of Windows features that meant your Java apps would only run on Windows)\n\nGates saw Java as a threat to Windows—and Windows, Bill shouted at Slivka at one notorious meeting in 1997, “is what this company is about.”\n\nInternet Explorer loses the battle with Windows\n\nAfter the release of IE4 in October 1997, IE moved into the Windows division, which Silverberg drily notes “did not share the same vision for the Internet and Microsoft playing a leading role; they were Windows-first rather than Internet-first.” That’s a polite way of saying that the browser upstarts had lost the internal battle and Allchin, representing the status quo of “big Windows,” had won.\n\nAllchin had taken over the consumer side of Windows from Silverberg after shipping Windows NT and was busy turning both into a single platform. The idea of giving away a browser that was a free operating system for the web platform, when there was no clear business model for making money from it, had not convinced a leadership team used to regular profits.\n\nAfter all, going back to Gates’ very first memo pointing out that copying software was stealing, Microsoft has seen software as a business proposition. “I don’t want to be remembered as the guy who destroyed one of the most amazing business in history,” Allchin wrote in an email, complaining about “engineers who didn’t understand and didn’t have any responsibility for the financial aspects of the company at all. Who live in this paradise where the stock goes up, revenues keep going up, earnings keep going up. And all they have to do is crank software. Somehow it gets into packages and makes money. Well, it doesn’t work that way.”\n\nIn fact, if you view the Microsoft rhetoric about dominating the web and protecting Windows, and Allchin’s email saying “we need something with more Windows integration” as part of the internal power struggle between Windows and Internet Explorer rather than simply a response to the growing importance of Netscape and Sun, it seems a lot less tone-deaf and a lot more like two competing visions of the future: Tying Internet Explorer to Windows wasn’t only about beating other browsers—it was about beating the Internet Explorer team.\n\nThe next two versions of IE consolidated Microsoft’s domination of the browser market. But as the Windows team (now including a number of key IE developers) started work on Longhorn, the browser slipped into a limbo of unambitious maintenance releases. Microsoft stopped putting out independent versions of IE and tied it to new releases of Windows. The web was no longer the platform.\n\nIE6 was a good browser when it came out in 2001, although IE insiders saw it as a shadow of what it could have been. For the next three years, it received only minor annual updates. The most significant was part of the major security overhaul in Windows XP SP2 that came out in mid-2004 and involved what Aroncheck calls “a complete security revamp for the IE code base.” The SP2 version of IE included Group Policy for the first time, and at one point the team considered locking down IE in XP as securely as in Windows Server 2003.\n\nThe rest of the now far smaller browser team’s time was taken up bringing the browser to different versions of Windows (like Media Center and Tablet PC), including the 64-bit versions of Windows XP plus Windows Server, building a version of IE based on WPF/E and XAML as part of the original Longhorn OS that never shipped, and rolling out hundreds of thousands of custom changes for enterprise customers.\n\nNot only did the Longhorn project focus Microsoft’s attention on .NET and XAML rather than HTML as the future, it also sucked the Windows team into a five-year morass of missed deadlines and project resets. What shipped as Windows Vista was a long way from the original code (or the betas that were released in 2003 and 2005)—it wasn’t simply IE falling behind during those years.\n\nMembers of the IE team were also busy defending against a lawsuit from Eolas. This one-person company claimed to have created the first browser to support plug-ins in 1993. It patented the idea in 1994 and sued Microsoft in 1999; the case came to court in 2003, when another browser developer, Pei-Yuan Wei, tried to show the Viola browser he had built in 1992. Wei didn’t have much time to prepare, and even with World Wide Web inventor Tim Berners-Lee backing Microsoft, the court agreed with Eolas (who went on to sue 22 other companies, including Apple and Google). In 2012, a Texas jury finally invalidated the patents and the U.S. Court of Appeals agreed in 2013. That was too late for Microsoft, which had modified IE to work around the issue in 2006—taking more development time away from catching up with competing browsers—and had settled with Eolas in 2007.\n\nMeanwhile, Microsoft’s view of the Internet for consumers was focused on building up MSN to compete with AOL, who still had a significant proportion of online users. Thus, more members of the IE team moved on to work on MSN Explorer. That seems short-sighted, given the rise of the web, and some at Microsoft found it frustrating. As Partovi put it later, “it has always been sad to see the Internet side [of Microsoft] define itself more based on who it wanted to compete with (Netscape, AOL, Yahoo, and Google) rather than defining its own vision of what it wanted to be.”\n\nResurrecting Firefox from the ashes of Netscape\n\nAll this meant IE was effectively in maintenance mode after 2001. And for all the IE team’s hard work it would be more than five years before IE7 shipped, two years after Netscape’s browser had returned from the dead as Mozilla Firefox.\n\nStrictly speaking, Navigator didn’t die; it was bought by AOL. But between the popularity of IE and the increasingly poor performance of the exceptionally buggy Netscape Navigator 6, usage of Netscape was minimal. Netscape had set up the Mozilla open source project before the sale to AOL, and for several years, Netscape incorporated Mozilla code into its browser releases. The dot-com collapse led to major layoffs at AOL in late 2002, and after the $750 million settlement and AOL’s 2003 agreement to stick to its contract and carry on distributing IE, the company turned the Mozilla project into the nonprofit Mozilla Foundation with $2 million in seed funding.\n\nMozilla carried on cleaning up and rewriting the Netscape code, releasing a browser that was called first Phoenix, then Firebird, and finally Firefox. Firefox 1 came out in 2004 with the tabbed browsing and separate search bar that Opera had introduced, and it quickly started gaining market share and adding features. Meanwhile, Apple had released the first beta of Safari in early 2003.\n\nSoon after, arguments about how web apps should be written turned the long-running disagreements between the W3C and some browser creators into a formal split. Since the end of 2000, the W3C had been working on XForms, which was strongly tied to XHTML. When this was formally proposed in 2003, both Apple and Opera rejected it, calling it not “appropriate for the web.”\n\nIn 2004, the Mozilla Foundation and Opera got together to propose new standards for web applications at the W3C to deal with the “rising threat of single-vendor solutions.” When the proposal was voted down, Mozilla’s Brendan Eich (the creator of JavaScript), Ian Hickson (then at Opera, having worked at both Netscape and Mozilla, now with Google and famous as the author of the ACID tests), and others “managed to get Apple, Mozilla, and Opera cooperating” to set up the Web Hypertext Application Technology Working Group (WHATWG). WHATWG was a reaction against both the direction and the slow pace of the W3C. The plan was to get a spec out by the end of 2004—far faster than the W3C group was moving—and to build on HTML.\n\nFor the next few years, WHATWG was the way the “modern” browsers drove HTML—and Microsoft wasn’t formally involved. Microsoft’s Chris Wilson was invited to join in 2006 but declined. Although he mostly agreed with the direction of the group, there were two issues. Especially after the Eolas lawsuit, he felt WHATWG needed to have a patent policy (which the W3C had always had, to make it clear if someone was suggesting using a technology their company had patented) and, because of the thousands of enterprise customers who relied on IE working the way it did, changing the way errors were handled would cause too many problems.\n\nBy then, it was clear that XHTML wasn’t the future. World Wide Web creator Berners-Lee said it was time to reinvent HTML rather than replace it, and the Fifth HTML Working Group was set up in March 2007, with Wilson as chair.\n\nThere was some disagreement as to whether the working group would cooperate with or try to replace WHATWG, so WHATWG continued work. Google got involved, producing first the Google Gears plug-in and, in 2008, the Chrome browser. Gears was authored by the team behind the powerful but insecure Greasemonkey scripting plug-in for Firefox, with features like giving a website your location without asking, which led to Wilson telling the Gears team the plug-in would never ship as default in IE unless they added clear privacy protection.\n\nHaving parallel groups working on HTML led to the bizarre situation of WHATWG declaring HTML as a “living standard” that would always be evolving—right after the W3C working group finalized much of HTML5. That’s complicated by the fact that HTML5 is actually a group of hundreds of specifications, all at different stages of maturity. Simplistic test sites (including Hickson’s famous ACID tests) can be misleading; the scores they give say more about what the test writers are interested in than about the formal state of the standards.\n\nWeb development continues to be a thorny issue because web standards are always a moving target. When it got back in the browser game, Microsoft took a different approach because of all the existing sites based on how IE6 did things—and because of its focus on security.\n\nRestarting Internet Explorer for security\n\nFrom the vulnerability in Universal Plug and Play found soon after Windows XP shipped to viruses to worms like Code Red, SQL Slammer, and Blaster, Windows was starting to look like a security punch bag. In February 2002, the Windows team downed tools and stopped coding for a few weeks while all 8,500 developers went through security training. The results came in Windows Server 2003 and its IIS server, in SQL Server 2003, and in Windows XP SP2, which were all major security improvements.\n\nBut rescuing Windows users from the security nightmare also meant rescuing IE. As Windows XP SP2 expanded from the initial quick-fix idea of shipping an update (built by the sustained engineering team that created most service packs) to enable the Windows firewall by default into a year-long major rewrite by the core Windows team. Making IE more secure became a key part of SP2. At the end of XP SP2, Todd Wanke, who ran the XP SP2 effort, commented, “We realize we have a lot of work to do to improve Internet Explorer, and we’re just doing everything we can do ensure that we’re securing that platform.” That project turned into IE7.\n\nA month before XP SP2 shipped, the first post on the new IE blog appeared, written by then product unit manager Dean Hachamovitch. He’d been running sustained engineering for IE and had been pushing to break IE apart from Windows and improve the browser rather than concentrating on custom fixes for enterprise customers.\n\nBy October 2004, Hachamovitch was demonstrating prototypes of IE7 to the Microsoft executive team, not long after Wilson came back to IE after his years working on WPF/E. In February 2005, Gates announced IE7 at the RSA conference.\n\nAnnouncing a new version of IE at a security conference was a clear message that although there were new features (like the search bar Firefox had adopted from Opera) and better CSS support, the first priority was improving browser security. As Hachamovitch put it at the time, the plan was to “go further to defend users from phishing as well as deceptive or malicious software. Why? Because we listened to customers, analysts, and business partners. We heard a clear message: ‘Yes, XP SP2 makes the situation better. We want more, sooner. We want security on top of the compatibility and extensibility IE gives us, and we want it on XP. Microsoft, show us your commitment.’”\n\nWhat they got in IE7 was significant security improvements, such as the first versions of the SmartScreen malware protection, color-coding the address bar to show when you were on a secure site, blocking Active X controls unless you specifically asked for them and running them in a separate process, and locking down browser settings and using protected mode in Windows Vista. That put the browser in a sandbox with fewer rights than a limited user account, so IE—and any malicious websites you visited—couldn’t write files or registry keys anywhere important.\n\nAfter a year, Microsoft even stopped checking to see that users had a genuine copy of Windows before letting them download IE7, presumably believing that getting more people onto a more secure version of IE would protect paying customers better than leaving a pool of IE6 on pirated systems. As IE’s Rob Franco joked at the time, “My goal with IE7 is to protect the system against the most destructive force in the universe: my brother, who believes that everything on the Internet should be free and will click on anything to get it.”\n\nThe initial impetus for IE might have been the security problems Microsoft was facing, but Microsoft’s own telemetry told it how much of time people were now spending in the browser. By the time IE7 shipped, it was also obviously a response to Firefox. In fact, Firefox vice president Nightingale jokes, “IE7 is one of the releases we’re most proud of” because “that release didn’t happen the way it did without Firefox and without Microsoft realizing the game was afoot.”\n\nNightingale also gives Microsoft credit for joining in: “Of all things, IE is showing up in standards bodies. Microsoft wants to engage, to win hearts and minds among web developers. It’s really positive to see all browsers recognizing the value of that investment [in standards].”\n\nDevelopers, developers—web developers?\n\nMicrosoft dropped the Mac version of IE at the end of 2005 to concentrate on Windows, and IE7 launched in October 2006. It wasn’t a one-time fix, either. The plan was to come out with a new browser with better security and slightly better standards support as soon as possible (it took about 18 months in the end) while working on much more support for standards for the next two versions of IE.\n\n“In a sense we’re doing a mea culpa, saying we waited too long for a browser release,” Gates said at the MIX 06 conference soon before IE7 was released. Hachamovitch was even blunter: “For a lot of people, anything short of an apology, to them, just sounds defensive. So I want to be clear: We messed up. As committed as we are to the browser, we just messed up.”\n\nHaving a more secure browser would be no use if developers didn’t build for it, and that’s been the uphill battle Microsoft has faced ever since it let IE6 effectively fossilize. And there was a tension that was evident at the time that has dogged IE to this day.\n\n“We had a very simple goal: We wanted to make every day better for every developer,” Hachamovitch said at MIX 06. The point of the MIX conferences was to put Microsoft “in the mix” as a possibility for web developers to consider—although it was still pushing IIS and WPF/E as much as HTML, and Silverlight made its first appearance at the conference, demonstrated by Joe Belfiore.\n\nMicrosoft was prepared to take its lumps from a frustrated developer community, and the first MIX conference drew half its speakers from the HTML and open web community. Still, Microsoft needed to strike a balance for developers, users, and enterprises.\n\n“Web developers are our customers,” Wilson said at MIX 06, “but there are balance points around that. Although we’re committed to making [our standards support] better, we have to balance that along with backward compatibility and along with security. That’s not an excuse no to improve; it’s just a challenge.”\n\nWhen IE8 came out in early 2009 it, it was clearly an attempt to balance those demands. It was faster and far more stable than IE7, and it had handy tools like web slices and accelerators for grabbing updated content from web pages and add-ons that were simpler and less insecure than ActiveX. It also had better support for some of the standards that made up HTML5 at the time, especially for CSS2, and Microsoft changed the behavior of the DOM to match that of other browsers.\n\nBut IE8 had compatibility mode for developers who wanted the older IE behavior. It wasn’t exactly the same, and developers still had work to do, but it’s what a lot of enterprise developers jumped on to keep their old sites working—and stayed on.\n\nMeanwhile, Firefox had gained significant market share, Apple had launched the iPhone 3G, and Google had come out with Chrome. Both Apple and Google used the WebKit browser engine. Web developers were keen to build sites designed to for WebKit and iPhone.\n\nThe problem was they sometimes hard-coded in references to browser-specific implementation of unfinished standards (tagged with browser prefixes) without always including the code for the standard itself. Thus, even when IE supported a standard, it wouldn’t be able to run those pages correctly. That is why you started hearing the phrase “same markup” from Microsoft. If developers would only give IE9 the same HTML, CSS, and JavaScript code they gave other browsers, the IE team begged, IE9 would be able to cope with it.\n\nHachamovitch said it so often that he began to joke about the “same-markup drinking game.” But the problem was bad enough that in early 2012 Daniel Glazman, co-chair of the W3C CSS working group, wrote an official call for action naming “WebKit the over-dominant browser on the mobile web,” pleading with developers to stop making “works-only-in-WebKit” sites, and requesting Apple and Google offer their WebKit-only CSS properties to the W3C so that they could become standards. Otherwise, other browsers would have “no other option” than to use WebKit prefixes, even if they didn’t use the WebKit rendering engine, and “turning a single implementation into a worldwide monopoly.”\n\nIt would be IE6 all over again, only worse. In fact, by IE11, IE had indeed started telling websites it was “like Gecko” in an effort to get that same markup, and on Windows Phone IE supports those WebKit prefixes.\n\nReinvigorating Internet Explorer: From IE9 to IE11\n\nIn 2009 and 2010, the IE team was getting ever more involved with web standards, from giving feedback on WHATWG’s HTML5 draft specification to joining the SVG working group.\n\nIronically although IE had never implemented SVG, Microsoft was partly responsible for its creation. When Microsoft got together with Macromedia, Visio, and Canon in 1998 to suggest a VML specification for vector graphics on the web that overlapped with Adobe’s PGML plans, the W3C told all the companies to work together; those discussions became the basis of the original 2001 SVG specification, and Microsoft worked with Adobe to create the original SVG browser plug-in.\n\nIt was clear that Microsoft was getting back in the game. “On August 7, 2009, [IE program manager] Adrian Bateman did what no man or woman had ever done before: He gave substantive feedback on the current editor’s draft of HTML5 on behalf of Microsoft. His feedback was detailed and well-reasoned, and it spawned much discussion,” Google’s Mark Pilgrim commented at the time. “After five years of virtual silence, nobody wants to miss the opportunity to engage with a representative of the world’s still-dominant browser.”\n\nThe plans for IIE9 were far more ambitious than for IE7 and IE8, and Microsoft didn’t merely want to catch up. Hachamovitch and Sinofsky went recruiting again and picked up heavy hitters on the team. In 2008 they’d already snapped up Jason Weber, one of Gates’ technical assistants (think less fetching coffee and more consulting on Microsoft company strategy) to work on performance. Rob Mauceri (who briefly ran IE after Hachamovitch moved on run a cross-Microsoft data science team) had come to Microsoft when it bought Vermeer, creator of the HTML authoring tool that became FrontPage; he moved from the Office team to “reinvigorate” IE.\n\nAnd Microsoft had Ted Johnson, who had created the Windows version of the classic desktop publishing tool Aldus PageMaker and later founded Visio. He came to Microsoft when it bought Visio in 1999 (not long after the two companies cooperated on VML), left to build a cloud service, and returned in late 2008 to work on IE9, to get SVG right this time—and in less than nine months, Microsoft built SVG support into IE.\n\nAlthough IE9 didn’t ship as part of Windows 7, Microsoft wanted to take advantage of Windows and the PC hardware it was running on. As then-Windows chief Sinofsky put it at the time:\n\n… the world for a time went down this path where the browser was a little program you just ran on top of the OS. It was this cool thing that didn’t care about the device hardware or the OS; it was agnostic to all that. That can work for a period of time, but underneath the hardware has been changing rapidly and eventually the hardware capabilities transcend that.\n\nIf you want location or a screen that rotates as you turn a tablet or to take advantage of the GPU for performance, he pointed out, “browsers need to know what’s going on on the hardware to move forward; the whole way you architect and write a browser has to change.” That didn’t apply to IE only:\n\nNo browser vendor needs us to tell them that if you want to do SVG you’re going to need to use the GPU. We’re all going to do just-in-time compilation; if you want to do that you have to think about how to do threading and multiprocessing, and the OS can help do those things well. We think using APIs in Windows is a good thing—and we think that writing a browser that uses them is the only way to really do a great job on HTML5.\n\nThat connection to the hardware was one reason IE9 didn’t run on Windows XP (along with security issues and the fact XP was already nearly 10 years old); XP didn’t have a version of DirectX that would give you the hardware acceleration that IE uses for everything from zooming to rendering fonts to playing videos to drawing SVG. “It’s about running with the whole power of the PC,” Hachamovitch said in 2010. The message was the same when IE11 came out in 2013: “With Windows 8.1 and IE11, the browser is no longer a commodity—it’s a way to differentiate the device and the operating systems.”\n\nChrome might carry on support XP, but that wasn’t worth doing, Hachamovitch claimed: “Using compatibility layers to run cross-platform in nonnative ways makes browser development easier; [but] it doesn’t always make a better browser or the best experience of the web.”\n\nThe other factor behind IE9’s improved performance was the new Chakra JavaScript engine from Weber’s team (one of the last projects Wilson was involved with before moving on to Google). Chakra doesn’t only run the JavaScript in a web page; it uses a separate core on multicore processors (including on ARM systems like Surface RT and Windows Phone 8.1) to compile it in advance.\n\nAs a result, IE9 quickly caught up to the performance of Chrome and Firefox, at least on JavaScript tests (and slowdowns in other areas were often caused by ActiveX controls and plug-ins rather than the browser). But the issue of standards and tests wasn’t settled.\n\nIE near the end: Common standards, stable standards\n\nWith IE9, Microsoft wasn’t simply following the standards; it was picking through them with a fine-toothed comb, suggesting improvements (SVG hadn’t been significantly updated since the 2001 specification and the code that IBM wrote in 2003 and donated to the open source browsers like Firefox) and writing thousands of tests to check the IE implementations it donated to the W3C.\n\n“We love HTML5 so much [that] we want it to actually work, and in IE9 it will,” Hachamovitch said at the MIX 10 conference. “And so in IE9, we will do for the rest of the web platform what we did with CSS 2.1 in IE8.” IE’s head of testing, Kris Krueger, didn’t only work with the W3C on handing over the tests; he became the head of the W3C HTML5 testing task force (and Paul Cotton became co-chair of the HTML working group).\n\nFor IE9, the team focused on commonly used standards and standards that were stable enough to implement without worrying that they’d be out of date a month after the browser shipped: HTML5 video, audio and canvas tags, some of CSS3, ECMAScript5 (including the strict subset of JavaScript), geolocation, and the Web Open Font Format. In typically thorough Microsoft fashion, it scanned 7,000 websites to find which Web standards developers were actually using—not only which showed up in popular tests.\n\nEven as IE was improving its score on the ACID test, Hachamovitch wasn’t afraid to critique it.\n\nThe ACID 3 test is a proxy that many people use for standards compliance. ACID has 100 tests of features, some of which were under construction when it was written, some of which went back into construction afterward. You can have a score of 100 on ACID and completely mess up these borders I’d want to use on my page. … If I can score 100 and the same markup fails, maybe there’s a problem in the test?\n\nEven in WebKit browsers, he pointed out, not every page looked the same. “There are great examples of where the same HTML markup does radically, painfully different things—not just between IE and other browsers but between other browsers and even between different versions of WebKit,” Hachamovitch said.\n\nIt wasn’t IE6 versus the web, Hachamovitch said: “We heard the talk about this IE6 problem, and we’re calling out that there’s this problem with every browser. It’s not like there is this happy bubble world where everything interoperates and IE is over here.”\n\nIn June 2010, neither IE nor Firefox could get a full score on the ACID 3 test because it looked for SVG font support, though that wasn’t widely used on the web (and the SVG working group was prepping significant changes to the SVG spec). Hickson was concerned about simply removing the test in case it looked like he was “trying to make it easy for Firefox,” but in September 2011, he excised several “antiquated and unusual” sections of ACID 3. As a result, IE joined the other browsers in getting a perfect score.\n\nSome standards Microsoft was slow to adopt. For example, IE didn’t add WebGL support until IE11—by which time the WebGL standard had changed to fix the security issues Microsoft had been concerned with. Microsoft had also added WebGL checking to the SmartScreen phishing and malware scanner that was now blocking almost all malicious URLs and malware in tests, and the new version of DirectX could back off instead of crashing if malicious WebGL tried to overwhelm the GPU.\n\nSimilarly, Microsoft waited out the Webworkers spec until it stopped changing—and breaking sites built on it. Firefox and Opera had WebSocket support long before IE10 added it, but they had to remove it in 2010 because of a security flaw. It was only in IE11 that Microsoft’s adopted Google’s SPDY protocol (after the HTTP working group had started incorporating it into HTTP2).\n\nIE10—announced less than a month after IE9 shipped in March 2011—added more CSS3 and HTML5 standards, as well as integrating the Flash plug-in and bringing in a touch-friendly, full-screen browser interface for Windows 8 and Windows RT.\n\nOther standards Microsoft started work on while they were still controversial. In addition to supporting third-party tracking protection lists, IE9 was the first browser to turn on the still-undefined Do Not Track header. And the media extensions for streaming protected video content it supported in IE11 had generated furious debate inside the W3C.\n\n“There are three parts,” Hachamovitch explained at the time. “There is the web crypto, so that Netflix can go, ‘I want to make sure you really are generating a key for me so that we can do the handshake.’ No one seems to mind the web crypto one, no one seems to mind the web streaming one. And the last one has a lot more to do with somebody’s business reality. I don’t know if I believe in rights management philosophically; I know Netflix has contractual agreements and I have a choice: I can enable it in the browser or I can condemn everyone to have to go get an app or a plug-in.”\n\nMicrosoft also started proposing its own standards. It offered the W3C the Tracking Protection List specification. The Navigation Timing spec from IE9 was quickly adopted by other browsers, but despite encouraging comments they’ve been slower to pick up Microsoft’s Pointer Events suggestion for handling touch, mouse, pen, and other ways of interacting with a device. One likely reason for the resistance: Pointer Events works differently from the touch support Apple created for WebKit. However, Firefox and Chrome are adding support for Pointer Events now, after much debate, but there’s no sign of it in Safari.\n\nWhen Windows 8 tablets came along, Microsoft started comparing IE11 not only to desktop browsers but to Safari on the iPad or Chrome on Android tablets. It emphasized features for more mobile browsing, such as showing multiple tabs and windows in the full-screen immersive browser, letting you use hover menus and drag and drop with touch, syncing tabs to other devices, prefetching pages while you’re reading the first one, cutting out ads with the new reading view, and saving battery life by using the GPU, especially for video playback.\n\nInternet Explorer’s future gets cloudy\n\nBy October 2010, IE’s market share had dipped below 50 percent for the first time, and over the next 18 months, Chrome and IE battled for first place, depending on whose stats you look at and how they count the pages Chrome fetches speculatively.\n\nIE10 began to reverse the decline, though, and Roger Capriotti (who joined the IE team shortly before IE9 was announced) claimed that over those 12 months there was “a resurgence from the IE perspective; we picked up over five points of share worldwide while Chrome and Firefox lost that amount of market share. We hit a high point in November at 58.36 percent; in February we were still over 58 percent.” He called that “the highest share we have seen in almost two years.”\n\nTo show off IE, Capriotti started working with developers like the folks behind Cut The Loop and Contre Jour to build sites that used IE features. “Two years ago we were looking for partners; now I turn partners away. I have more people knocking on my door than I can handle.”\n\nThe IE team also reached out to web developers with tools, with teardowns of how they built those experience, with self-mocking campaigns like The Browser You Love to Hate—aimed at “a certain set of folks were either upset with us or had forgotten about us,” Capriotti says—and a Tumblr about comebacks. “People started to say to us, ‘maybe it’s time to stop picking on yourself; you have a modern browser with these great experiences—maybe it’s time to start thumping your chest a bit.’”\n\nCompetitors started imitating IE, Capriotti says, especially in touch: “When Apple shipped iOS 7 on the iPad, they added some swipe gestures in the browser. Google has continued to build more touch integration into Chrome. They recognize that’s what users want on these tablets.” He says Google has also “taken a page from our playbook” in building experiences and telling developers how they work.\n\nBy IE11, IE had come a very long way—but Microsoft had to keep proving that IE6 wouldn’t happen again. It had caught up, but would IE fall behind again?\n\nOne problem was the perception that a new version of IE only shipped with a new version of Windows. In fact, IE10 arrived 18 months after IE9, IE11 came along after a year and the IE11 update six months later. With IE11, minus any fanfare, Microsoft quietly started updating the browser regularly—slipping out new standards support along with the security fixes coming through Windows Update, like four major updates to WebGL in six months, and Microsoft introduced a public list of the technologies and standards it was considering or working on adding to the browser.\n\nThere were still omissions—especially WebRTC, Google’s proposal for real-time communications in the browser. It’s easy to see Microsoft’s reluctance to adopt WebRTC as protecting its income from Skype and Lync, but Microsoft has said all along it’s about technical issues (views shared by some developers). The Skype team is working on a version that will run in the browser without plug-ins, and Microsoft has suggested its own proposal to the W3C, called ORTC. This is being developed as a standard that will be compatible with WebRTC; Google is also involved. The rivalry between the browser makers was quietly turning into cooperation, at least between the engineers working on the browsers—but tensions remained.\n\nAs Mozilla’s Nightingale points out, “part of the standards process is bringing your own proposals, and we’re thrilled to see [Microsoft do that]. But part of the process is also building to the consensus even if it’s not your proposal.” On the other hand, he notes “any world where you’ve got Microsoft and Google trying to outdo each other in interoperability is a world I feel pretty good about.”\n\nWindows 10: IE passes the torch to Edge\n\nThe good news was those ongoing updates to IE meant more web pages built for Chrome, Firefox, and Safari would work in IE, as long as web developers stuck to cross-browser standards and didn’t send IE code designed for an older version.\n\nBut for businesses that had built internal tools on IE6, moved as far as IE8, and stopped there, compatibility was a higher concern. For them, Microsoft added back several technologies from IE8 (writing the code from scratch, for better security, rather than bolting the old code back in place), along with Enterprise Mode as a way to choose which version of IE the browser should pretend to be.\n\nBut handling new standards remained a tension for IE. It was a hard balancing act to satisfy both leading-edge and conservative web developers and to move at web speed without losing stability.\n\nBecause it wanted to support all those thousands of enterprises that run their business on sites they’ve built in IE, Microsoft was prone to be more conservative about developing standards. In 2012, IE evangelist Rey Bango defined what Microsoft counted as a stable standard: “When there have been no recent additions or changes and no major changes or renaming is expected. Is it in at least two other browsers? Is it a candidate recommendation?”\n\nAll that backward compatibility was time-consuming to implement and complex for developers to use. Rather than keep all the old versions and write another one that was the new HTML5 engine, telling web developers to keep using the HTML5 “edge mode” to always get the latest version of the Trident browser engine, the team decided to cut the Gordian knot in two.\n\nIn Windows 10, IE11 remains, but it has no new features and the only updates it will get are security fixes. What would have been the new HTLM5 edge mode became the EdgeHTML engine of the brand-new Edge browser. (The Edge browser app is completely new; the Edge engine is technically a fork of the Trident rendering engine with thousands of lines of code removed, killing off proprietary features and backward compatibility, and many new HTML5 standards added.)\n\nBefore Windows 10, Capriotti promised, “You can tell from the amount of development we put into IE10 and IE11 that we haven’t taken our foot off the gas pedal. We’re building a modern browser to help the web. We’re going to continue working to make sure IE is the fastest-performing browser out there, and make sure it’s in line with other browsers from a standards perspective and it’s interoperable.”\n\nThat’s still true, but it now applies to Edge rather than IE.\n\nWith Edge, everything was up for grabs. The browser team considered dropping Trident and adopting WebKit, Blink, or Gecko. It talked about whether there was a benefit to taking Trident open source. When the team asked if Microsoft would do a browser for iOS, Android, or OS X, the reply was that nothing was off the table. (The Cortana apps for iOS and Android that sync your searches among devices are a first step toward cross-platform browsing, but Windows is where Microsoft’s browser focus remains today.)\n\nThe decision to keep its own rendering engine was pragmatism rather than persistence. “If we were to use WebKit,” Sam George explained at Build 2014, “there is a very, very, very high switching cost, like Opera had as they switched to Blink. Our analysis is that the fastest way to keep up with the modern web and keep delivering great interoperability is with our current technology, but to do it in a way where we can both preserve existing investments and move forward with the modern web.”\n\n“It’s a very real fact that we push each other,” John Hazen added. “There are ways that Chrome, and things they’re doing in Blink and the V8 engine are really pushing Microsoft, and ways that Microsoft is really pushing the industry—like the hardware rendering we’ve done in the browser and with touch innovations. In the end we think it’s best for the ecosystems to have a rich and competitive set of engines out there to spur innovation. We think it’s a positive thing we’re staying on Trident, we think it’s a positive think Google is pushing ahead on Blink, we think it’s a positive thing that there are still innovations that are being done on WebKit. A monoculture would end up degrading your overall experience.”\n\nEdge gets updates as soon as features are ready. If businesses want a stable version of Windows 10, they can pick the Long Term Servicing Branch of Windows 10 Enterprise, which only has IE—not the fast-moving Edge. Which features get added first is a trade-off involving factors like how widespread their use, how much demand Microsoft hears through the User Voice site, how complex they are to develop, how much traffic goes to sites that rely on them, what bugs need to be fixed to make them work, and how much other work the browser developers already have to do.\n\nAlthough the Edge engine isn’t open source, it includes code contributed by Dolby, Adobe, Borland (for web remoting), and even Google—parts of Edge’s Web Audio code come from Chromium.\n\nIn many ways, Edge has come back to the promise of IE3—without giving up on Windows, despite the Edge team’s willingness to at least consider the possibility of taking IE to other platforms. As Capriotti puts it, “There’s the concept of the modern web, and that isn’t a concept that should be dictated by us or Mozilla or Google; it should come through the W3C.”\n\nIt might have taken 20 years, but this time around, Microsoft isn’t giving up on the browser."
    }
}