{
    "id": "correct_subsidiary_00121_1",
    "rank": 72,
    "data": {
        "url": "https://alistapart.com/article/dom/",
        "read_more_link": "",
        "language": "en",
        "title": "Meet the DOM",
        "top_image": "http://screen.gif",
        "meta_img": "http://screen.gif",
        "images": [
            "https://i0.wp.com/alistapart.com/wp-content/uploads/2019/03/ala-logo-big.png?fit=960%2C98&ssl=1",
            "https://149572954.v2.pressablecdn.com/wp-content/uploads/2023/02/IDS_700x200_Logo.gif",
            "https://149572954.v2.pressablecdn.com/wp-content/uploads/2019/03/logo_a-book-apart-color.png",
            "https://alistapart.com/article/dom/screen.gif",
            "https://secure.gravatar.com/avatar/f0fc21a0548d547b7ec638eae8dcc045?s=150&d=identicon&r=pg",
            "https://149572954.v2.pressablecdn.com/wp-content/uploads/2023/02/IDS_700x200_Logo.gif",
            "https://i0.wp.com/alistapart.com/wp-content/uploads/2019/04/promo_aba_2.jpg?w=960&ssl=1",
            "https://i0.wp.com/alistapart.com/wp-content/uploads/2019/04/promo_aea_v1_2.png?w=960&ssl=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "J. David Eisenberg",
            "Gerry Duffy",
            "Colin Eagan",
            "Jeffrey MacIntyre",
            "Ste Grainer",
            "Aaron Gustafson",
            "Jeffrey Zeldman"
        ],
        "publish_date": "2000-04-21T08:00:16+00:00",
        "summary": "",
        "meta_description": "We’ve read about it. We’ve waited for it. Now we can actually start to use it. In this gentle introduction to the W3C Document Object Model, new ALA contributor Eisenberg shows how to make friends with the DOM, and use its power to manipulate dynamic HTML elements on the web.",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/alistapart.com/wp-content/uploads/2019/03/cropped-icon_navigation-laurel-512.jpg?fit=32%2C32&ssl=1",
        "meta_site_name": "A List Apart",
        "canonical_link": "https://alistapart.com/article/dom/",
        "text": "one, we see that Explorer displays a color originally expressed as hexadecimal in hex; Mozilla displays it in\n\nrgb\n\nformat using decimal equivalents. Colors entered as names stay as names.\n\nConcentrating on Mozilla, let’s look more closely at the properties detected and the HTML that produced the styles. When we retrieve, say, division one’s style object with this JavaScript:\n\n{Line wraps are marked thusly: ». – Ed.}\n\nstyleObject = » document.getElementById( \"d1\" ).style;\n\nwe get the style object that’s attached to the tag. The style information defined in the stylesheet is not “merged” in with the information, as was the case in Navigator 4.\n\nTable 1 shows the relevant properties and associated HTML.\n\nIf we needed to use DHTML and JavaScript on only one page, this wouldn’t be a problem. We’d simply put all the style information into the tags and have it at our disposal.\n\nWhat do we do if we have several pages that use the same styles and JavaScript?\n\nUsing Properties on Multiple Pages#section5\n\nWhen we have several pages using the same styles and JavaScript, we can:\n\n1. Duplicate the styles into the tags on all the pages\n\nThis strategy will certainly work, but it defeats the purpose of style sheets – the ability to separate style from content.\n\n2. Use JavaScript to set initial conditions\n\nWe could set all the\n\ns to be invisible in the style sheet, and then explicitly set all the initial style attributes from a shared JavaScript .js file. This is a reasonable solution when every page starts out in the same initial state.\n\n3. Access Style Objects in a Stylesheet\n\nIf we can find a way to access the styles that are in the stylesheet, we have the greatest flexibility; we can use a style across multiple pages, and, since we can access them from JavaScript, we can read the initial conditions rather than use fixed code to set them.\n\nAccessing Style Sheets#section6\n\nFrom Mozilla, it’s possible to access all the style sheets. Starting from the document, here’s the hierarchy for accessing a particular style within a stylesheet:\n\nstyleSheets (list)\n\nhref (property)\n\ncssRules (list)\n\ntype (property)\n\nselectorText (property)\n\nstyle (property)\n\nFilling in some details on the properties:\n\nhref\n\nThe URL of the stylesheet\n\ntype\n\nAn integer telling which type of rule this is. The only ones we’re interested in are the ones of type CSSRule.STYLE_RULE.\n\nselectorText\n\nstyle\n\nThe selector and the style. In the following stylesheet rule:\n\np {color:blue; font-size:24pt;}\n\nthe selectorText would be the string p and the style would be an object corresponding to the properties in the braces.\n\nJavaScript Access to Style Sheets#section7\n\nHere is the JavaScript code that will retrieve a style by its selector name. Note that it works only on Mozilla; it doesn’t appear to work properly in IE4.\n\nfunction getStyleBySelector( selector ) { var sheetList = document.styleSheets; var ruleList; var i, j; /* look through stylesheets in reverse order that they appear in the document */ for (i=sheetList.length-1; i >= 0; i--) { ruleList = sheetList.cssRules; for (j=0; j<rulelist.length; j++)=\"\" {=\"\" if=\"\" (rulelist[j].type=\"=\" <span=\"\" class=\"linewrap\">» CSSRule.STYLE_RULE » && » ruleList[j].selectorText == » selector) { return ruleList[j].style; } } } return null; } </rulelist.length;>\n\nThis will work with\n\nany\n\nselector, so you can find the style associated with, say, the\n\ntag by calling\n\ngetStyleBySelector(“h3”), the style associated with a\n\nNote:\n\nMozilla M14 will not correctly find a style if it is in an imported stylesheet (using\n\n@\n\nnotation). It causes a JavaScript error.\n\nExample of Style Sheet Access in JavaScript#section8\n\nHere’s an example that uses\n\ngetStyleBySelector()\n\nto dynamically change the style of a class. The text below contains warnings and features defined as clsses by the style sheet below; by clicking the buttons you can see those parts of the highlighted.\n\n<style type=\"text/css\"> .warning { color: black; } .feature { color: black; } </style>\n\nBlend-O-Matic#section9\n\nThank you for choosing Blend-O-Matic as your new food processor. The Blend-O-Matic has a large variety of attachments that allow you to stir, whip, blend, and purée your foods.\n\nWe’ve even added a gentle rinse cycle for your delicate vegetables!\n\nYour Blend-O-Matic requires a 110 volt AC power supply in the United States, and a 220 volt AC power supply in Europe.\n\nA 12-volt DC adapater is included so that you can use the Blend-O-Matic in your car, although\n\nyou should not operate this device while driving or intoxicated.\n\nAll the metal parts are coated with Cruft-B-Gone®, making clean-up a breeze.\n\nDo not immerse the blender in water while it is plugged in.\n\nWe hope you enjoy using your Blend-O-Matic as much as the grossly underpaid workers in some unnamed third world country enjoyed making it.\n\nJavaScript DOM Utilities#section10\n\nI have written a few utilities to work with the DOM in Mozilla. You may\n\nsee a text version of that file here.\n\nBelow is a listing of the function names, preceded with a brief commentary of what each one does. You may see them in action on the next page.\n\n/* * Browser version snooper; determines * your browser (Navigator 4, Navigator 6, * or Internet Explorer 4/5) */ function setBrowser()/* * * Given a selector string, return a style * object by searching through * stylesheets. * Return null if none found */ function getStyleBySelector( selector )/* * * Given an id and a property (as strings), * return the given property of that id. * Navigator 6 will first look for the property * in a tag; if not found, it will look * through the stylesheet. * * Note: do not precede the id with a # -- it * will be appended when searching the * stylesheets * */ function getIdProperty( id, property )/* * * Given an id and a property (as strings), * set the given property of that id to the * value provided. * */ function setIdProperty( id, property, value )/* * * Move a given id to position (xValue, yValue) * In Navigator 6 and IE 4/5, * length units are preserved. * */ function moveTo( id, x, y )/* * * Move a given id to * (currentX + xValue, currentY + yValue) * In Navigator 6 and IE 4/5, * length units are preserved. * */ function moveBy( id, x, y)/* * * Retrieve background color for a given id. * The value returned will be in hex format * (#rrggbb) * */ function getBackgroundColor( id )/* * * Return a division’s document * */ function getDocument( divName )\n\nCSS Property Tests#section11\n\nCSS Properties Examples (1)\n\nCSS Properties Examples (2)\n\nSummary#section12\n\nAs these introductory examples suggest, the DOM is a remarkable tool that can make your web pages far more dynamic. And it does so without resorting to proprietary tags or “innovations” that work only in one browser. At the moment, Netscape 6 is the only browser that fully supports the DOM – and Netscape 6 is still in development. Once it’s released, it’s hard to imagine that other browsers won’t be forced to catch up."
    }
}