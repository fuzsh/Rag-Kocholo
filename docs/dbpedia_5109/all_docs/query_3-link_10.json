{
    "id": "dbpedia_5109_3",
    "rank": 10,
    "data": {
        "url": "https://stackoverflow.com/questions/60287504/how-display-images-from-google-drive-on-gsheet-cell",
        "read_more_link": "",
        "language": "en",
        "title": "How display images from Google Drive on Gsheet cell?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/KzGMT.png",
            "https://lh3.googleusercontent.com/-nvtqjkvBBHQ/AAAAAAAAAAI/AAAAAAAAAAA/jopQrjwXSIQ/photo.jpg?sz=64",
            "https://i.sstatic.net/LH2EI.png?s=64",
            "https://i.sstatic.net/hXT0U.jpg?s=64",
            "https://www.gravatar.com/avatar/18588a280ecff5072c2dd277b2d69f21?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/zz7w8.jpg?s=64",
            "https://www.gravatar.com/avatar/16081f635943840684f112a8434bca7d?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/qT6Bt.png",
            "https://www.gravatar.com/avatar/a2d2a4290791fc4ab9c9e35463ff8761?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/c60a0c8abccf6763b608ea51e362a82a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/4850d24a28fa6c94a4a7e8b38c9bd205?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/pDNUF.jpg?s=64",
            "https://www.gravatar.com/avatar/a9dffbf6951dfabc9f601b49efae4b75?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/2wOmQ.jpg?s=64",
            "https://stackoverflow.com/posts/60287504/ivc/59ff?prg=e45d0282-c47a-4a23-9121-530c871b93fb"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-02-18T18:42:12",
        "summary": "",
        "meta_description": "I would like to display easily an image on Gsheet cell based from URL of image stored in Gdrive.\n\nI have tried with the Gsheet function =IMAGE(\"URL\") and it does not work.\n\nThe objective is to disp...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/60287504/how-display-images-from-google-drive-on-gsheet-cell",
        "text": "You want to put the image in your Google Drive to your Google Spreadsheet.\n\nYou want to achieve this using Google Apps Script.\n\nIf my understanding is correct, how about this answer? Please think of this as just one of several possible answers.\n\nPattern 1:\n\nIn this pattern, the image is put using =IMAGE(\"URL\").\n\nWhen =IMAGE(\"URL\") is used, the image is required to publicly shared. So please share the images with publicly shared as On - Anyone with the link.\n\nAnd also, please modify the endpoint as follows.\n\nFrom:\n\nhttps://drive.google.com/open?id=###\n\nto:\n\nhttps://drive.google.com/uc?export=download&id=###\n\nIn this case, you can put the image with =IMAGE(\"https://drive.google.com/uc?export=download&id=###\") after the image is shared publicly.\n\nPattern 2:\n\nIf you don't want to share publicly the images, how about this pattern? In this pattern, the image is put as the blob without sharing publicly.\n\nHere, please check the following sample script.\n\nSample script:\n\nvar fileId = \"###\"; // Please set the file ID of the image. var sheet = SpreadsheetApp.getActiveSheet(); var blobSource = DriveApp.getFileById(fileId).getBlob(); var image = sheet.insertImage(blobSource, 1, 1); image.setWidth(100).setHeight(100); sheet.setColumnWidth(1, 100).setRowHeight(1, 100);\n\nWhen you run the script, the image is put to the cell \"A1\". And the image size is resized to 100 x 100 pixels. And then, the row and column size is changed for the image size.\n\nThis is a simple sample script. So please modify this for your actual situation.\n\nReferences:\n\ninsertImage()\n\nClass OverGridImage\n\nsetColumnWidth()\n\nsetRowHeight()\n\nIf I misunderstood your question and this was not the direction you want, I apologize.\n\nAdded:\n\nFrom your replying, it was found that the image size is over than the limitation size (1,048,576 pixels^2) Ref The reason of your current is is this.\n\nIn this case, in order to put the image, it is required to resize the image. The following sample script puts the image by resizing image size. For this, I used a Google Apps Script library. So please install it to the script editor.\n\nSample script:\n\nvar fileId = \"###\"; // Please set the file ID of the image. var sheet = SpreadsheetApp.getActiveSheet(); var blobSource = DriveApp.getFileById(fileId).getBlob(); var obj = ImgApp.getSize(blobSource); var height = obj.height; var width = obj.width; if (height * width > 1048576) { var r = ImgApp.doResize(fileId, 512); blobSource = r.blob; } var image = sheet.insertImage(blobSource, 1, 1); image.setWidth(100).setHeight(100); sheet.setColumnWidth(1, 100).setRowHeight(1, 100);\n\nIn this sample script, when the image size is over than 1,048,576 pixels^2, the image is resized and put to the Spreadsheet.\n\nThis is a simple sample script. So please modify it for your actual situation.\n\nReferences:\n\nLimitations for Inserting Images to Google Docs\n\nImgApp\n\nUpdated: September 30, 2023\n\nAs the current method, I think that the following patterns might also be able to be used.\n\nScript 1:\n\nIn this script, the file content retrieved from Google Drive is used as an object of SpreadsheetApp.CellImage. In this case, when the image size is large, an error might occur. Please be careful about this.\n\nconst fileId = \"###fileId###\": // Please set the file ID of the image file on Google Drive. const file = DriveApp.getFileById(fileId); const dataUrl = `data:${file.getMimeType()};base64,${Utilities.base64Encode(file.getBlob().getBytes())}`; const img = SpreadsheetApp.newCellImage().setSourceUrl(dataUrl).build(); const sheet = SpreadsheetApp.getActiveSheet(); sheet.getRange(\"A1\").setValue(img);\n\nWhen this script is run, an image is put into a cell \"A1\".\n\nScript 2:\n\nIn this script, the thumbnail of file content retrieved from Google Drive is used as an object of SpreadsheetApp.CellImage. In this case, even when the image size is large, this script can be used, because the image size is resized.\n\nconst fileId = \"###fileId###\": // Please set the file ID of the image file on Google Drive. const imageUrl = `https://drive.google.com/thumbnail?sz=w1000&id=${fileId}`; // Ref: https://stackoverflow.com/a/31504086 const bytes = UrlFetchApp.fetch(imageUrl, { headers: { authorization: \"Bearer \" + ScriptApp.getOAuthToken() } }).getContent(); const dataUrl = `data:${MimeType.PNG};base64,${Utilities.base64Encode(bytes)}`; const img = SpreadsheetApp.newCellImage().setSourceUrl(dataUrl).build(); const sheet = SpreadsheetApp.getActiveSheet(); sheet.getRange(\"A1\").setValue(img); // DriveApp.getFiles(); // This comment line is used for automatically detecting a scope of https://www.googleapis.com/auth/drive.readonly This is used for ScriptApp.getOAuthToken()\n\nWhen this script is run, an image is put into a cell \"A1\".\n\nReferences:\n\nnewCellImage()\n\nClass CellImageBuilder\n\nAs @nguyen-hieu suggested, for what you want to do in the spreadsheet you are showing, his/her answer is a good solution\n\n=image(\"https://drive.google.com/uc?export=download&id=\"&right(A2;33);1).\n\nMore Advanced Option\n\nWhen you want to query an image based on a constantly changing cell content, like a data validation dropdown menu list, use this code\n\n=IMAGE( CONCATENATE(\"https://drive.google.com/uc?export=download&id=\", QUERY(Images, \"SELECT B WHERE A = '\" & Item & \"'\", 0)) , 1)\n\nDissection of the Formulas\n\nSheet: Images\n\nIn this sheet you want to keep all your images (best if you only use the URL ID)\n\n| A | B | -------------- |Item |ImageID| -------------- |Hammers |XYZABC | -------------- |Chairs |ABCXYZ | -------------- |Wood |ABXXYA |\n\nMain Sheet\n\nLet's say you have a main sheet (ej. Summary) with a drop down menu (data validation list) in $A$2 of the full list of items from the sheet =Images!$A:$A\n\nTo make coding much easier, create the following Named Ranges:\n\nItem: =Summary!$A$2\n\nItems: (=Images!$A:$B)\n\nOn the cell you to display to display the image use this code\n\n=IMAGE( CONCAT(\"https://drive.google.com/uc?export=download&id=\", QUERY(Images, \"SELECT B WHERE A = '\" & Item & \"'\", 0)) , 1)\n\n=Image\n\nThe formula Image needs a URL and the format needs to be \"https://drive.google.com/uc?export=download&id=GoogleDriveImageID\n\nThe number 1 specifies the image to auto-resize to take the whole width of the cell. Keeping the aspect ratio. If you want to use the height of the row instead, replace it for the number 2\n\n=CONCAT\n\nTo give the formula =IMAGE a URL that it can use, CONCAT puts together the string \"https://drive.google.com/uc?export=download&id= and the image ID from the sheet Images.\n\nAs an alrernative, you can add this CONCAT formula in your Images sheet, on Column C, CONCAT( \"https://drive.google.com/uc?export=download&id=\", $B:$RowNumber ) for every entry (replace RowNumber for the actual row number of the entry) and then update your IMAGE formula to this:\n\n=IMAGE( QUERY(Images, \"SELECT C WHERE A = '\" & Item & \"'\", 0)) , 1)\n\nRemoving CONCAT and replacing the column B for the column C in the SELECT statement. ALSO update the named range Images to Images!A:C\n\n=QUERY\n\nThis function is the \"workhorse of the show\". QUERY will get the image ID based on the value of the cell (in this example, Summary!$A:$2 or Image named range).\n\nQUERY(Images, \"SELECT B WHERE A = '\" & Item & \"'\", 0)\n\nThe named range Images replaces Images!$A:$B, and gives you the data you need based on the query \"SELECT B WHERE A = 'Item'\" The Item portion of the WHERE query is the named range Item (Summary!$A:$2).\n\nFinally, the number 0 after the comma, at the end of the select query statement QUERY(Images, \"SELECT B WHERE A = '\" & Item & \"'\", 0) is required to remove the headers from the first row (Images!$A$1; |Item |ImageID|)"
    }
}