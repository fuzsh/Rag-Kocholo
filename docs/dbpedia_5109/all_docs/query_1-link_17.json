{
    "id": "dbpedia_5109_1",
    "rank": 17,
    "data": {
        "url": "https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/apl-image.html",
        "read_more_link": "",
        "language": "en",
        "title": "Alexa Skills Kit",
        "top_image": "https://ds6yc8t7pnx74.cloudfront.net/en-US/alexa/techdoc-template.thumb.800.480.png?ck=1625002623",
        "meta_img": "https://ds6yc8t7pnx74.cloudfront.net/en-US/alexa/techdoc-template.thumb.800.480.png?ck=1625002623",
        "images": [
            "https://d7qzviu3xw2xc.cloudfront.net/alexa/assets/images/Alexa_Logo_RGB_BLUE.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "An Image component draws a bitmap image on the screen.  This document describes the Image component in the current version of APL.",
        "meta_lang": "en",
        "meta_favicon": "https://m.media-amazon.com/images/G/01/AlexaDevPortal/favicon-32x32._CB1544644721_.png",
        "meta_site_name": "Amazon Alexa",
        "canonical_link": "https://developer.amazon.com/en-US/docs/alexa/alexa-presentation-language/apl-image.html",
        "text": "APL Image\n\nNote: Learn how to improve your skills with APL with Build visually rich experiences using APL at the Alexa Learning Lab.\n\nAn Image component draws a bitmap image on the screen. Don't use animated .gif files in your skills. Although these images might appear animated in the simulator, their behavior on screen devices with Alexa might be different.\n\nProperties\n\nThe Image component has the following properties in addition to the base component properties. See the meaning of the columns.\n\nThe \"auto\" value isn't supported for dimension-related properties on Image. If you use \"auto\", the image might not render.\n\nProperty Type Default Styled Dynamic Description\n\nAll images must specify a width and a height value. To minimize errors, the width and height of an Image component default to 100dp.\n\nThe source / sources property of the Image component is an array of one or more image URLs. The Image component doesn't render until after all the URLs in the array have loaded. After all URLs load, the component applies any filters defined in the filters property. When the filters property is empty or not provided, the component renders the last image in the sources array.\n\nFilters modify, augment, and merge images from the image array. The result of filter processing is a single image. The image that results from filter processing can be further modified by the overlayColor and overlayGradient properties.\n\nFor details about image filters, see Filters.\n\nWhen the Image is the source or target of an event, the following values are reported in event.source or event.target:\n\n{ // Image-specific values \"type\": \"Image\", \"url\": URL, // The URL of the image. Contains an array if multiple images are provided // General component values \"bind\": Map, // Access to component data-binding context \"checked\": Boolean, // Checked state \"disabled\": Boolean, // Disabled state \"focused\": Boolean, // Focused state \"height\": Number, // Height of the component, in dp (includes the padding) \"id\": ID, // ID of the component \"opacity\": Number, // Opacity of the component [0-1] \"pressed\": Boolean, // Pressed state \"uid\": UID, // Runtime-generated unique ID of the component \"width\": Number // Width of the component, in dp (includes the padding) }\n\nalign\n\nPositions the image within the container.\n\nName Description\n\nborderRadius\n\nA uniform clipping radius to be set on the corners of the image. Setting the borderRadius to a large number will create a circular clip.\n\nfilter, filters\n\nOne or more filtering operations to apply to the image. See Filters.\n\nonFail\n\nCommands to run when any of the requested URLs in sources fails to load. The event contains a single source. If multiple sources fail to load, for example when using a filter, one source triggers the event.\n\nThe handler runs one time. After the handler runs, the component is considered invalid. Setting a new value to the sources property can trigger the handler again. The onFail handler runs at most one time for any new sources value.\n\nThe onFail handler doesn't affect the display status of the component and the display status doesn't affect the handler. For example, when the display property for the Image component is invisible the component takes up space but doesn't display. The device still attempts to load the image and runs the commands in onFail if the image source fails to load.\n\nThe onMount handler for the component runs regardless of whether onFail runs. The onMount handler runs in this scenario because the component can mount and display before or after the component loads the image source.\n\nThe onFail handler generates an event with the following form:\n\nRefer to Event source for a description of event.source properties.\n\nThe onFail event handler runs in fast mode in the component data-binding context.\n\nonLoad\n\nCommands to run after all the requested URLs in sources load.\n\nSetting a new value to the sources property can trigger the handler to run again. The onLoad handler runs at most one time for any new 'sources' value.\n\nThe onLoad handler doesn't affect the display status of the component and the display status doesn't affect the handler. For example, when the display property for the Image component is invisible the component takes up space but doesn't display. The device still attempts to load the image and runs the commands in onLoad after the image source loads.\n\nThe onMount handler for the component runs regardless of whether onLoad runs. The Image component can mount and display before or after the component loads the image source.\n\nThe onLoad handler generates an event with the following form:\n\nRefer to Event source for a description of event.source properties.\n\nThe onLoad event handler runs in fast mode in the component data-binding context.\n\noverlayColor\n\nA color applied as a scrim across the image. The color must have a transparent component for the image to show. For instance, you could set overlayColor to rgba(white,0.3) to overlay the image with white at 30% opacity.\n\nNote that overlayColor is a convenience name for a filter that overlays the image with a single color. The overlayColor filter is applied after any filters defined by the filter property.\n\nThe scrim applies only to the drawn area of the image, not the padding or any blank space left over after image scaling and alignment.\n\noverlayGradient\n\nA gradient applied as a scrim across the image. The gradient must have a transparent component for the image to show. An overlayGradient is equivalent to a filter that overlays the image with a named gradient. The overlayGradient filter is applied after any filters defined by the filter property and after the overlayColor property.\n\nThe gradient applies only to the drawn area of the image, not the padding or any blank space left over after image scaling and alignment.\n\nscale\n\nScales the image within the container.\n\nName Description\n\nThe following example illustrates the scale options with different images. The Frame defines a box with a green border. The Image component displays inside the Frame and uses the height and width of the Frame to define the bounding box. Click the Change Scale button to cycle through each of the scale options. Click the Change Image button to view different images fit within the same bounding box.\n\nsource, sources\n\nThe URL of the image to download and display.\n\nUse https instead of http for image source URLs. Many Alexa devices don't support the http scheme in skill APL documents for security reasons.\n\nYou can set this property to an array of URLs instead of a single string. When the filters property is empty, the component displays the last image in the array. When the filters property contains one or more filters, the filter determines which image or images to use in the array. For details about filters, see Filters.\n\nManage alignment, scaling, and sizing of images\n\nImage alignment and scaling can be complex. Images must have a specified height and width. The actual image must then be clipped, scaled, and positioned within the bounding box of the Image component.\n\nThe scale mode controls how the image size is adjusted to fit the bounding box.\n\nThe align mode controls how the image (after scaling) is positioned in the box.\n\nAny clipping is always applied to the bounding box, not to the scaled image.\n\nSample image\n\nThe following example shows an Image component. The bounding box for the Image is 300 x 300 pixels. The large value for borderRadius clips the image to a circle.\n\nIn this case, the image fills a 300x300 box on the screen.\n\nAlexa Image Responsive Component\n\nFrame\n\nFilters\n\nAlexa Design Guide: Alexa Presentation Language\n\nWas this page helpful?"
    }
}