{
    "id": "wrong_mix_property_foundationPlace_00044_1",
    "rank": 43,
    "data": {
        "url": "https://www.axisgroup.com/data-industry-insights-blog/baby-steps-to-really-understand-link-tables-in-qlik-and-tableau",
        "read_more_link": "",
        "language": "en",
        "title": "Baby Steps to *Really* Understand Link Tables in Qlik and Tableau",
        "top_image": "https://www.axisgroup.com/hubfs/Screen%20Shot%202022-01-25%20at%205.35.19%20PM.png",
        "meta_img": "https://www.axisgroup.com/hubfs/Screen%20Shot%202022-01-25%20at%205.35.19%20PM.png",
        "images": [
            "https://www.axisgroup.com/hubfs/Axis_LogoEPS.svg 1x, https://www.axisgroup.com/hubfs/Axis_LogoEPS.svg 2x, https://www.axisgroup.com/hubfs/Axis_LogoEPS.svg 3x",
            "https://www.axisgroup.com/hubfs/Images/search-white.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Screen%20Shot%202022-01-25%20at%205.35.19%20PM.png?width=809&name=Screen%20Shot%202022-01-25%20at%205.35.19%20PM.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Screen%20Shot%202022-01-25%20at%205.37.51%20PM.png?width=809&name=Screen%20Shot%202022-01-25%20at%205.37.51%20PM.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Screen%20Shot%202022-01-25%20at%205.39.13%20PM.png?width=523&name=Screen%20Shot%202022-01-25%20at%205.39.13%20PM.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Unknown.png?width=831&name=Unknown.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Unknown-1.png?width=486&name=Unknown-1.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Unknown-2.png?width=681&name=Unknown-2.png",
            "https://www.axisgroup.com/hs-fs/hubfs/Steedle%20head%20shot.jpg?width=192&height=192&name=Steedle%20head%20shot.jpg",
            "https://www.axisgroup.com/hs-fs/hubfs/linkedin-1.png?width=119&name=linkedin-1.png 1x, https://www.axisgroup.com/hs-fs/hubfs/linkedin-1.png?width=238&name=linkedin-1.png 2x, https://www.axisgroup.com/hs-fs/hubfs/linkedin-1.png?width=357&name=linkedin-1.png 3x",
            "https://www.axisgroup.com/hubfs/Axis_white.svg 1x, https://www.axisgroup.com/hubfs/Axis_white.svg 2x, https://www.axisgroup.com/hubfs/Axis_white.svg 3x",
            "https://px.ads.linkedin.com/collect/?pid=5263345&fmt=gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "In this blog, Mike Steedle explains the \"why\" of link tables to help users become comfortable using them.",
        "meta_lang": "en",
        "meta_favicon": "https://www.axisgroup.com/hubfs/favicon-1.png",
        "meta_site_name": "",
        "canonical_link": "https://www.axisgroup.com/data-industry-insights-blog/baby-steps-to-really-understand-link-tables-in-qlik-and-tableau",
        "text": "My experience both learning and teaching about link tables is that it is hard to explain why they are what they are. You often end up resorting to: \"Just follow this formula to build the link table, and you're good.\" And then people are afraid to modify them once they exist.\n\nSo, let's walk through the logical steps you might take to arrive at a Qlik-style link table as the solution to a data modeling challenge. My goal is to explain the why of link tables better than I have seen before, and hopefully make you more comfortable using them. When to use link tables compared to concatenated fact tables or other approaches is a conversation for another post...\n\nEvolution of a Data Model\n\nFigure 1: Two fact tables with shared dimensions: creates circular references in data model\n\nThis is the scenario that sets people down the path of BI platform-specific data modeling in Qlik. Just loading fact tables with multiple shared dimensions results in a circular reference, with more than one path to get from one table to another. I am assuming in this case that the solution requires a shared date dimension, to compare actual to forecast over time.\n\nQlik treats this as a faulty direct relationship between two fact tables and creates a synthetic table, so I am drawing it as you would expect to see it in an ER diagram (which would not try to relate facts directly to facts).\n\nFigure 2: Outer join shared dimensions into one table: resolves loops, but creates composite keys between facts and new table\n\nIf multiple shared dimensions create multiple paths between the tables, what if we outer join them into one super-dimension to leave just one path between the tables?\n\nThis addresses the circular reference, but now we have a composite key between our fact tables and the super-dimension. Most BI platforms prefer if not require single-field relationships between tables at the presentation layer.\n\nFigure 3: Concatenate keys: resolves composite/synthetic keys (highly denormalized, but maybe okay)\n\nBy trading out the composite key for a single concatenated key in both the fact tables and the super-dimension -- let's just call it a link table now -- we now have the simple relationships BI platforms like.\n\nLooking at the structure, one possible optimization remains: the link table is highly denormalized. It is likely to have a lot of rows and a lot of columns, with a greater overall footprint than the separate dimensions that were used to create it (especially when more than two dimensions are combined). This may be okay, or it may benefit from normalizing. Let's assume the latter and move to the next step.\n\nFigure 4: Normalize original dimensions from link table: now you have the typical link table data model\n\nThis should look familiar to Qlik data modelers now. The link table is the hub with relationships between fact and shared dimension tables.\n\nSome Refinement Building the Link Table\n\nConceptually, that is how you can logic your way into designing a Qlik-style link table, although it's not how I recommend building it. The downside of full outer joining the dimensions without a common key (AKA cross-joining or creating a Cartesian product) is that the link table is likely to contain many rows with combinations of dimension values that never occur in the fact data and thus are not needed for the data model to work. You can reduce the row count and link table size by doing a distinct union of the key field combinations from the fact tables.\n\nIn Qlik, if you have these fields ready to go in QVDs, use those (DISTINCT does not deoptimize QVD loads), else resident load the fact tables, as shown here. Both examples assume you have already built the concatenated key in the fact tables.\n\nIf your data model is simple enough to support it, an ultra-efficient way to generate a link table is to leverage the same trick we use to create distinct lists of resident field values, with SubField to parse out the components of the concatenated key. This one load addresses the values from both fact tables.\n\nAnd don't forget to AutoNumber concatenated keys when you're done.\n\nNote for Tableau Data Modelers\n\nLink tables, like concatenated fact tables, are usually thought of as Qlik-specific constructs (unless you have read The Unified Star Schema). I'd guess most Tableau developers have never heard of them. However, with the introduction of Tableau Relationships and lack of support for fact tables with multiple shared dimensions, Tableau now describes the same constructs as potential solutions for Tableau data modelers, as well:\n\n[\"Unsupported Models\" section]\n\nMultiple fact tables related to multiple shared dimension tables. In some use cases it is common to have multiple fact tables related to multiple shared dimension tables. For example, you might have two fact tables, Store Sales and Internet Sales, related to two common dimension tables, Date and Customer. Typically, such scenarios would require creating a circular relationship in your data model. Circular relationships are not supported in 2020.2.\n\nYou can approximate this type of model by merging some of the tables in the physical layer. For example, you might be able to union Store Sales and Internet Sales into a single table [concatenated fact table], which can then be related to Date and Customer. Alternatively, you might be able to cross-join Date and Customer to create a single dimension table [link table] which can then be related to Store Sales and Internet Sales.\n\nSo, it's up to you whether you combine the fact tables that have shared dimensions (concatenated fact table) or combine the shared dimensions themselves (link table), but both are viable solutions for generating a variety of answers using just one Tableau data source with multiple fact tables.\n\nThis blog was originally published on michaelsteedle.com.\n\nAbout the Author"
    }
}