{
    "id": "wrong_mix_property_foundationPlace_00044_1",
    "rank": 96,
    "data": {
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html",
        "read_more_link": "",
        "language": "en",
        "title": "Quick start guide",
        "top_image": "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt280217a63b82a734/6202d3378b1f312528798412/elastic-logo.svg",
        "meta_img": "https://static-www.elastic.co/v3/assets/bltefdd0b53724fa2ce/blt280217a63b82a734/6202d3378b1f312528798412/elastic-logo.svg",
        "images": [
            "https://www.elastic.co/guide/en/elasticsearch/reference/current/images/kibana-console.png",
            "https://www.elastic.co/guide/en/elasticsearch/reference/current/images/kibana-console.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/apple-icon-57x57.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This guide helps you learn how to:\n\nRun Elasticsearchedit\n\nThe simplest way to set up Elasticsearch is to create a managed deployment with Elasticsearch Service on Elastic Cloud. If you prefer to manage your own test environment, install and run Elasticsearch using Docker.\n\nSend requests to Elasticsearchedit\n\nYou send data and other requests to Elasticsearch using REST APIs. This lets you interact with Elasticsearch using any client that sends HTTP requests, such as curl. You can also use Kibana’s Console to send requests to Elasticsearch.\n\nAdd dataedit\n\nYou add data to Elasticsearch as JSON objects called documents. Elasticsearch stores these documents in searchable indices.\n\nAdd a single documentedit\n\nSubmit the following indexing request to add a single document to the books index. The request automatically creates the index.\n\nresponse = client.index( index: 'books', body: { name: 'Snow Crash', author: 'Neal Stephenson', release_date: '1992-06-01', page_count: 470 } ) puts response\n\nconst response = await client.index({ index: 'books', document: { name: 'Snow Crash', author: 'Neal Stephenson', release_date: '1992-06-01', page_count: 470, } }) console.log(response)\n\nPOST books/_doc {\"name\": \"Snow Crash\", \"author\": \"Neal Stephenson\", \"release_date\": \"1992-06-01\", \"page_count\": 470}\n\nThe response includes metadata that Elasticsearch generates for the document including a unique _id for the document within the index.\n\nExpand to see example response\n\n{ \"_index\": \"books\", \"_id\": \"O0lG2IsBaSa7VYx_rEia\", \"_version\": 1, \"result\": \"created\", \"_shards\": { \"total\": 2, \"successful\": 2, \"failed\": 0 }, \"_seq_no\": 0, \"_primary_term\": 1 }\n\nAdd multiple documentsedit\n\nUse the _bulk endpoint to add multiple documents in one request. Bulk data must be newline-delimited JSON (NDJSON). Each line must end in a newline character (\\n), including the last line.\n\nresponse = client.bulk( body: [ { index: { _index: 'books' } }, { name: 'Revelation Space', author: 'Alastair Reynolds', release_date: '2000-03-15', page_count: 585 }, { index: { _index: 'books' } }, { name: '1984', author: 'George Orwell', release_date: '1985-06-01', page_count: 328 }, { index: { _index: 'books' } }, { name: 'Fahrenheit 451', author: 'Ray Bradbury', release_date: '1953-10-15', page_count: 227 }, { index: { _index: 'books' } }, { name: 'Brave New World', author: 'Aldous Huxley', release_date: '1932-06-01', page_count: 268 }, { index: { _index: 'books' } }, { name: 'The Handmaids Tale', author: 'Margaret Atwood', release_date: '1985-06-01', page_count: 311 } ] ) puts response\n\nconst response = await client.bulk({ operations: [ { index: { _index: 'books' } }, { name: 'Revelation Space', author: 'Alastair Reynolds', release_date: '2000-03-15', page_count: 585, }, { index: { _index: 'books' } }, { name: '1984', author: 'George Orwell', release_date: '1985-06-01', page_count: 328, }, { index: { _index: 'books' } }, { name: 'Fahrenheit 451', author: 'Ray Bradbury', release_date: '1953-10-15', page_count: 227, }, { index: { _index: 'books' } }, { name: 'Brave New World', author: 'Aldous Huxley', release_date: '1932-06-01', page_count: 268, }, { index: { _index: 'books' } }, { name: 'The Handmaids Tale', author: 'Margaret Atwood', release_date: '1985-06-01', page_count: 311, } ] }) console.log(response)\n\nPOST /_bulk { \"index\" : { \"_index\" : \"books\" } } {\"name\": \"Revelation Space\", \"author\": \"Alastair Reynolds\", \"release_date\": \"2000-03-15\", \"page_count\": 585} { \"index\" : { \"_index\" : \"books\" } } {\"name\": \"1984\", \"author\": \"George Orwell\", \"release_date\": \"1985-06-01\", \"page_count\": 328} { \"index\" : { \"_index\" : \"books\" } } {\"name\": \"Fahrenheit 451\", \"author\": \"Ray Bradbury\", \"release_date\": \"1953-10-15\", \"page_count\": 227} { \"index\" : { \"_index\" : \"books\" } } {\"name\": \"Brave New World\", \"author\": \"Aldous Huxley\", \"release_date\": \"1932-06-01\", \"page_count\": 268} { \"index\" : { \"_index\" : \"books\" } } {\"name\": \"The Handmaids Tale\", \"author\": \"Margaret Atwood\", \"release_date\": \"1985-06-01\", \"page_count\": 311}\n\nYou should receive a response indicating there were no errors.\n\nExpand to see example response\n\n{ \"errors\": false, \"took\": 29, \"items\": [ { \"index\": { \"_index\": \"books\", \"_id\": \"QklI2IsBaSa7VYx_Qkh-\", \"_version\": 1, \"result\": \"created\", \"_shards\": { \"total\": 2, \"successful\": 2, \"failed\": 0 }, \"_seq_no\": 1, \"_primary_term\": 1, \"status\": 201 } }, { \"index\": { \"_index\": \"books\", \"_id\": \"Q0lI2IsBaSa7VYx_Qkh-\", \"_version\": 1, \"result\": \"created\", \"_shards\": { \"total\": 2, \"successful\": 2, \"failed\": 0 }, \"_seq_no\": 2, \"_primary_term\": 1, \"status\": 201 } }, { \"index\": { \"_index\": \"books\", \"_id\": \"RElI2IsBaSa7VYx_Qkh-\", \"_version\": 1, \"result\": \"created\", \"_shards\": { \"total\": 2, \"successful\": 2, \"failed\": 0 }, \"_seq_no\": 3, \"_primary_term\": 1, \"status\": 201 } }, { \"index\": { \"_index\": \"books\", \"_id\": \"RUlI2IsBaSa7VYx_Qkh-\", \"_version\": 1, \"result\": \"created\", \"_shards\": { \"total\": 2, \"successful\": 2, \"failed\": 0 }, \"_seq_no\": 4, \"_primary_term\": 1, \"status\": 201 } }, { \"index\": { \"_index\": \"books\", \"_id\": \"RklI2IsBaSa7VYx_Qkh-\", \"_version\": 1, \"result\": \"created\", \"_shards\": { \"total\": 2, \"successful\": 2, \"failed\": 0 }, \"_seq_no\": 5, \"_primary_term\": 1, \"status\": 201 } } ] }\n\nSearch dataedit\n\nIndexed documents are available for search in near real-time.\n\nSearch all documentsedit\n\nRun the following command to search the books index for all documents:\n\nresponse = client.search( index: 'books' ) puts response\n\nconst response = await client.search({ index: 'books' }) console.log(response)\n\nGET books/_search\n\nThe _source of each hit contains the original JSON object submitted during indexing.\n\nmatch queryedit\n\nYou can use the match query to search for documents that contain a specific value in a specific field. This is the standard query for performing full-text search, including fuzzy matching and phrase searches.\n\nRun the following command to search the books index for documents containing brave in the name field:\n\nresponse = client.search( index: 'books', body: { query: { match: { name: 'brave' } } } ) puts response\n\nconst response = await client.search({ index: 'books', query: { match: { name: 'brave' } } }) console.log(response)\n\nGET books/_search { \"query\": { \"match\": { \"name\": \"brave\" } } }\n\nNext stepsedit\n\nNow that Elasticsearch is up and running and you’ve learned the basics, you’ll probably want to test out larger datasets, or index your own data.\n\nLearn more about search queriesedit\n\nAdd more dataedit"
    }
}