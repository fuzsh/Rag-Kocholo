{
    "id": "wrong_mix_property_foundationPlace_00044_2",
    "rank": 59,
    "data": {
        "url": "https://www.analyticsvidhya.com/blog/2014/09/qlikview-incremental-load/",
        "read_more_link": "",
        "language": "en",
        "title": "How to implement Incremental Load in QlikView?",
        "top_image": "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_1-300x214.jpg",
        "meta_img": "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_1-300x214.jpg",
        "images": [
            "https://av-public-assets.s3.ap-south-1.amazonaws.com/logos/av-logo-svg.svg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/navbar.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/navbar.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/navbar.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/navbar.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/navbar.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/default_avatar.svg",
            "https://secure.gravatar.com/avatar/e3bea1e58e6e462c72b1684b66c7f99a?s=500",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_1-300x214.jpg",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_2.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_3.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_4.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_5.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_6.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_7.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_8.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_9.png",
            "https://www.analyticsvidhya.com/blog/wp-content/uploads/2014/09/Incremental_Load_Qlikview_10.png",
            "https://secure.gravatar.com/avatar/e3bea1e58e6e462c72b1684b66c7f99a?s=500",
            "https://secure.gravatar.com/avatar/f98aa6ba77644a131136d34787c4d40d?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/8eb58b19b1af908592d82d975afd6a44?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/748a125f3ff77afc4e7adfba7d5c4b9b?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/3bc98561e0bda35d29f635f44bf58d84?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/33d0bb0e1d3cf9c73a749e9577b197c8?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/0c8fdaa9724d67957949f261fa54c3eb?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/7eefd132ed84a5667fed3cce4913b7f4?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/6f5bcdb4385fd457bc0832a8db154c0b?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/dfc676e0c15fed48ab4bf761b3f543c6?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/88b00215d528a41feead27cff56b31c8?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/3c44655f85b0f2d4766b44b881c27b1a?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/edab0cea740829dc4f927357a5825218?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/f0ec82a2215cb25e11c6c420abac7230?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/f32fe62f47f2d2eddc4ed0a0e49fb7ae?s=74&d=mm&r=g",
            "https://secure.gravatar.com/avatar/d8ce70ca1ef37868073996dc5039fa0e?s=74&d=mm&r=g",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/path-digital.png",
            "https://av-identity.s3.amazonaws.com/users/user/bGnsep7nT0GMWuLpkDl15Q.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://av-identity.s3.amazonaws.com/users/user/R7HrsWl1QrGRiw_e9m4fDA.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://av-identity.s3.amazonaws.com/users/user/ZcU4ALTFT96MVCzfiGuhsQ.jpeg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://av-identity.s3.amazonaws.com/users/user/aM3WrxdNSTGLg7LoqX-q0w.png",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://av-identity.s3.amazonaws.com/users/user/zy4FL_yyQlG4PkWcyGYvhw.jpg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://av-identity.s3.amazonaws.com/users/user/a4ByfUyoQRmdGzLpBzHVLw.jpeg",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://av-identity.s3.amazonaws.com/users/user/ZTsmKl-1Qvqn07FUzgaBNw.png",
            "https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/removeAfterProdcution/in.png",
            "https://d2cd20fxv8fgim.cloudfront.net/homepage/images/Play_Store.svg",
            "https://d2cd20fxv8fgim.cloudfront.net/homepage/images/App_Store.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Sunil Ray"
        ],
        "publish_date": "2014-09-12T03:18:17+00:00",
        "summary": "",
        "meta_description": "This article explains qlikview Incremental Load, its benefits with an example and implemented through simple steps that can be understood easily.",
        "meta_lang": "en",
        "meta_favicon": "https://imgcdn.analyticsvidhya.com/favicon/av-fav.ico",
        "meta_site_name": "Analytics Vidhya",
        "canonical_link": "https://www.analyticsvidhya.com/blog/2014/09/qlikview-incremental-load/",
        "text": "In my previous article, we discussed “How to use QVDs to make your QlikView application more efficient?”. In this article, we will go one step ahead to make our application more efficient while dealing with large transactional data. As discussed in my previous article I was working on a QlikView application, where I had to show the sales across various channels for pre-defined frequencies (e.g. Daily, Monthly, Yearly).\n\nInitially, I was reloading the entire transactions table on a daily basis even though I already had the data till yesterday with me. This not only took significant time, but also increased the load on the database server and the network.This is where incremental load with QVDs made a huge difference by loading only new or updated data from the database into a table.\n\nIncremental loads:\n\nIncremental load is defined as the activity of loading only new or updated records from the database into an established QVD. Incremental loads are useful because they run very efficiently when compared to full loads, particularly so for large data sets.\n\nIncremental load can be implemented in different ways, the common methods are as follows:\n\nInsert Only (Do not validate for duplicated records)\n\nInsert and Update\n\nInsert, Update and Delete\n\nLet us understand each of these 3 scenarios with an example\n\n1. Insert Only:\n\nLet us say, we have sales raw data (in Excel) and whenever a new sales get registered, it is updated with basic details about the sale by modified date. Since, we are working on QVDs, we already have QVD created till yesterday (25-Aug-14 in this case). Now, I want to load only the incremental records (Highlighted in yellow below).\n\nTo perform this exercise, first create a QVD for data till 25-Aug-14. To identify new incremental records, we need to know the date till which, QVD is already updated. This can be identified by checking the maximum of Modified_date in available QVD file.\n\nAs mentioned before, I have assumed that “Sales. qvd” is updated with data till 25-Aug-14. In order to identify the last modified date of “Sales. qvd”, following code can help:\n\nHere, I have loaded the last updated QVD into the memory and then identifed the last modified date by storing maximum of “Modified_Date”. Next we store this date in a variable “Last_Updated_Date” and drop the table “Sales”. In above code, I have used Peek() function to store maximum of modified date. Here is it’s syntax:\n\nPeek( FieldName, Row Number, TableName)\n\nThis function returns the contents of given field for a specified row from the internal table. FieldName and TableName must be given as a string and Row must be an integer. 0 denotes the first record, 1 the second and so on. Negative numbers indicate order from the end of the table. -1 denotes the last record.\n\nSince we know the date after which the records will be considered as new records, we can Load incremental records of the data set (Where clause in Load statement) and merge them with available QVD (Look at the snapshot below).\n\nNow, load updated QVD (Sales), it would have incremental records.\n\nAs you can see, two records of 26-Aug-14 were added. However, we have inserted a duplicate record also. Now we can say that, an INSERT only method does not validate for duplicate records because we have not accessed the available records.\n\nAlso, in this method we can not update value of existing records.\n\nTo summarize, following are the steps to load only the incremental records to QVD using INSERT only method:\n\n1) Identify New Records and Load it\n\n2) Concatenate this data with QVD file\n\n3) Replace old QVD file with new concatenated table\n\n2. Insert and Update method:\n\nAs seen in previous example, we are not able to perform check for duplicate records and update existing record. This is where, Insert and Update method comes to help:\n\nIn the data set above (Right table), we have one record (ID = PRD1458) to add and another one (ID = PRD858) to update (value of sales from 131 to 140). Now, to update and check for duplicate records, we need a primary key in our data set.\n\nLet’s assume that ID is the primary key and based on modification date and ID, we should be able to identify & classify the new or modified records.\n\nIn order to execute this method, follow similar steps to identify the new records as we have done in INSERT only method and while concatenating incremental data with existing one, we apply the check for duplicated records or update the value of existing records.\n\nHere, we have loaded only those records where Primary Key(ID) is new and use of Exists() function stops the QVD from loading the outdated records since the UPDATED version is currently in memory so values of existing records gets updated automatically.\n\nNow, we have all unique records available in QVD with an updated sales value for ID(PRD858).\n\n3. INSERT, UPDATE, & DELETE method:\n\nThe Script for this method is very similar to the INSERT & UPDATE, however here we have an additional step needed to remove deleted records.\n\nWe will load primary keys of all records from current data set and apply an inner join with concatenated data set (Old+Incremental). Inner join will retain only common records and therefore delete unwanted records. Let’s assume that we want to delete a record of (ID PRD1058) in the previous example.\n\nHere, we have a data set with the addition of one record (ID PRD1458), modification of one record (ID PRD158) and deletion of one record (ID PRD1058).\n\nEnd Notes :\n\nIn this article, we have discussed how incremental loads are better and provide an efficient way to load data as compared to FULL load. As a good practice, you should have regular backup of data because it may get impacted or a data loss can occur, if there are issues with database server and network.\n\nDepending on your industry and need of the application, you can select, which method works for you. Most of the common applications in BFSI industry are based on Insert & Update. Deletion of records is normally not used.\n\nHave you dealt with similar situation or have another hack to improve efficiency of Qlikview applications under your hat? If so, I’d love to hear your thoughts through comments below as it also benefit someone else trying to handle similar situation."
    }
}