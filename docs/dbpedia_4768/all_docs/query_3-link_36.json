{
    "id": "dbpedia_4768_3",
    "rank": 36,
    "data": {
        "url": "https://fortran-lang.discourse.group/t/john-backus-1924-2007-fortrans-father/873",
        "read_more_link": "",
        "language": "en",
        "title": "John Backus (1924-2007), Fortran's father",
        "top_image": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6.png",
        "meta_img": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6.png",
        "images": [
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/e3dcf719088761ee6f1db014c6678378753d70ce.jpeg",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/116ae7b05230aba99aefecc5ae236aa9814dc0de.jpeg",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/ivanpribec/48/3290_2.png",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/vmagnin/48/28_2.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/4/41edbbfef3169f7999c9b3d03cdd2a6d85c536c7.jpeg",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/3/36c61d44414bc268e3817b3bcd125761061dafa8.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/3/36c61d44414bc268e3817b3bcd125761061dafa8.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/optimized/2X/a/a982df92faeaaeddec35c71cde611e93265ee8ef_2_690x247.jpeg",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://sea1.discourse-cdn.com/free1/user_avatar/fortran-lang.discourse.group/vmagnin/48/28_2.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-03-21T17:21:27+00:00",
        "summary": "",
        "meta_description": "Following @beliavsky &#39;s post, I think that John Backus deserves his own post in our Discourse. And knowledge about the birth of Fortran can help the community to promote the language: as for human beings, many qualities &hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/optimized/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6_2_32x32.png",
        "meta_site_name": "Fortran Discourse",
        "canonical_link": "https://fortran-lang.discourse.group/t/john-backus-1924-2007-fortrans-father/873",
        "text": "Following @beliavsky 's post, I think that John Backus deserves his own post in our Discourse. And knowledge about the birth of Fortran can help the community to promote the language: as for human beings, many qualities and defects of Fortran come from its early years.\n\nSpeedcoding (1953)\n\nIn 1953, John Backus works on the IBM 701 Speedcoding system, a simple interpreter to ease computing with floating point numbers (the IBM 704 will be the first to have builtin floating point reals). In those early days, programmers are programming in machine language, a tedious task. Backus says that the operation cost is equally divided between the operation cost of the computer and personnel cost [1]. And Speecoding allows to reduce the cost by accelerating the programming and testing of programs, although running far slower than machine language.\n\nAt that time, other people were working on the problem. For example, Grace Hopper completed in 1952 what is considered the first compiler: the A-0 Compiler.\n\nFortran (1954-1958)\n\nIn december 1953, John Backus writes a letter to his boss to propose the Fortran project, for the new IBM 704. It is motivated by the same economical reasons as Speedcoding and will be funded by IBM without questions for that reason.\n\nInterestingly, FORTRAN is described to be composed of two parts: the language itself and the translator. In 1957, Backus does not still use the word “compiler” [2], although he uses the verb “to compile”.\n\nIn [3] he insists that their objective was nor to translate quickly, nor to elaborate features of the language, but to obtain very fast object programs, working especially on the optimization of the loops and the way array indexes were treated.\n\nIn [4] he explains that most people were skeptical about the ability of a program computer to generate a machine code as fast as would human beings. That’s why his group wanted to create a compiler which would produce optimized machine code whatever the problem, fearing that if a particular problem would be running much slower than a human being’s code, Fortran would be rejected.\n\nThus this interesting sentence which tells much about Fortran: “Because of our 1954 view that success in producing efficient programs was more important than the design of the Fortran language…” And: “As far as we were aware, we simply made up the language as we went along. We did not regard language design as a difficult problem, merely a simple prelude to the real problem: designing a compiler that could produce efficient programs.” While people working on other early languages were focused on their language, Backus’ group was focused on the translator program (compiler).\n\nIt was already quite sophisticated: there was even a compiling phase investigating the frequency of execution of each part of the program, using a Monte Carlo algorithm. Backus will even pretend that it remained the best compiler for more than 20 years. Note also that they were working for the IBM 704, not even thinking Fortran will run one day on other computers.\n\nThe compiler was ready in April 1957 and distributed to all IBM 704 installations. Interestingly, they first tried to distribute it using punched cards, but failed and finally used magnetic tapes…\n\nBackus also insists on the importance of the writing of “Programmer’s Primer” (Spring 1957) by Mitchell, the first Fortran tutorial, on the subsequent growth in the use of Fortran.\n\nAfter Fortran\n\nWhile working on Algol, he worked on the Backus-Naur form (Backus–Naur form - Wikipedia) to describe the syntax of the language.\n\nHe will also work on functional programming. In the conclusion of [4], he wrote: “By splitting programming into a world of expressions, one the one hand, and a world of statements, on the other, von Neumann languages prevent the effective use of higher-level combining forms”. “The world of expressions has some elegant and useful mathematical properties, whereas the world of statements is a disorderly one without useful mathematical properties.”\n\nIn 1977, he will be the laureate of the A.M. Turing Award (the equivalent of Nobel Prize for computer science), “for profound, influential, and lasting contributions to the design of practical high-level programming systems, notably through his work on FORTRAN, and for seminal publication of formal procedures for the specification of programming languages”:\n\nhttps://amturing.acm.org/award_winners/backus_0703524.cfm\n\n[1] J. Backus, “The IBM 701 Speedcoding System,” J. ACM, vol. 1, no. 1,\n\n1953, pp. 4–6. https://archive.computerhistory.org/resources/access/text/2018/02/102632810-05-01-acc.pdf\n\n[2] Backus, J. W., H. Stern, I. Ziller, R. A. Hughes, R. Nutt, R. J. Beeber, S. Best, et al. ‘The FORTRAN Automatic Coding System’. In Papers Presented at the February 26-28, 1957, Western Joint Computer Conference: Techniques for Reliability on - IRE-AIEE-ACM ’57 (Western), 188–98. Los Angeles, California: ACM Press, 1957. https://doi.org/10.1145/1455567.1455599. http://archive.computerhistory.org/resources/text/Fortran/102663113.05.01.acc.pdf\n\n[3] Backus, J. W., and W. P. Heising. ‘Fortran’. IEEE Transactions on Electronic Computers EC-13, no. 4 (August 1964): 382–85. https://doi.org/10.1109/PGEC.1964.263818. http://www.softwarepreservation.org/projects/FORTRAN/paper/BackusHeising-FORTRAN-1964.pdf\n\n[4] Backus, J. ‘The History of Fortran I, II, and III’. IEEE Annals of the History of Computing 20, no. 4 (December 1998, first published in July 1979): 68–78. https://doi.org/10.1109/85.728232. http://www.softwarepreservation.org/projects/FORTRAN/paper/p165-backus.pdf\n\nReading that interview was a strange experience. It was made in 2006, as J. Backus was approaching 81 years old, one year before he passed away. He seemed not a very talkative man, but quite fun and humble, not taking too seriously the achievements he made in his life.\n\n\"Programming is a pretty low-level enterprise\"\n\nI have not learned more about the beginnings of Fortran, but interestingly discovered that he did not seem to be someone passionate about programming, as we may think. On the contrary, my feeling is his work was, in a certain sense, mainly about getting rid of programming!\n\nSpeedcoding and Fortran were about getting rid of machine language programming. And I feel the effort of people coding fpm and the stdlib is similar: getting rid of reinventing the wheel, a quite common syndrome in our Fortran world.\n\nHis work on functional programming (or rather function-level programming) was an attempt to get rid of Von Neumann programming style: \"Basically, the idea was to try to describe the transformation that you wanted to take place, rather than how to do it. \"\n\nHe seemed rather a mathematical mind (Masters in Mathematics) and was more proud of his work on what he called functional programming than on Fortran:\n\n- “Well, I guess the question of it still seems that programming is a pretty low-level enterprise, and that somebody ought to be thinking about how to make it higher; really higher level than it is.”\n\n- “Actually that functional programming was an effort to try to go up a level, so that you didn’t have to keep saying how to do everything, but rather say what you wanted done.”\n\nA wise man’s conclusion\n\nInterviewer: “Is the world a better place because of all the software that’s been written in your lifetime, or not?”\n\nBackus: “Well, in human terms, probably not. Because it just takes us further and further away from human affairs. But as far as economic, and welfare, it’s done a lot of good. So it’s a mixed bag.\n\n…\n\nBut I don’t envy you, I’m afraid. I think that we’re getting more and more technological and less and less human oriented.”\n\nHis advice to young people in High School: “Well, don’t go into software. It’s just such a complicated mess that you just frazzle your brains trying to do anything worthwhile.”\n\nAnd I am not sure it’s a joke… Half a joke?"
    }
}