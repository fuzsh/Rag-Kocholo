{
    "id": "dbpedia_4768_2",
    "rank": 46,
    "data": {
        "url": "https://langdev.stackexchange.com/questions/2935/why-do-programming-languages-use-the-asterisk-for-multiplication",
        "read_more_link": "",
        "language": "en",
        "title": "Why do programming languages use the asterisk * for multiplication?",
        "top_image": "https://cdn.sstatic.net/Sites/langdev/Img/apple-touch-icon@2.png?v=9f1dac205d5e",
        "meta_img": "https://cdn.sstatic.net/Sites/langdev/Img/apple-touch-icon@2.png?v=9f1dac205d5e",
        "images": [
            "https://i.sstatic.net/cZDaT.jpg?s=64",
            "https://i.sstatic.net/JG40K.png?s=64",
            "https://i.sstatic.net/7Wi05.png?s=64",
            "https://i.sstatic.net/LzHYN.jpg?s=64",
            "https://i.sstatic.net/0pja9.png?s=64",
            "https://i.sstatic.net/VzGOD.png?s=64",
            "https://www.gravatar.com/avatar/46ac2ffdab439207d4a590f00da53096?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/2bb7485134a4957636621aa28e6f9fae?s=64&d=identicon&r=PG",
            "https://langdev.stackexchange.com/posts/2935/ivc/acfa?prg=884a85c7-f48d-48d2-a437-aa694bdf4e34"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Hashim Aziz"
        ],
        "publish_date": "2023-09-20T22:32:42",
        "summary": "",
        "meta_description": "Having had very little math(s) education I'm trying to bring myself up to speed for university, which currently involves teaching myself the times tables, where X is frequently used as the operator...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/langdev/Img/favicon.ico?v=9c9246580b4a",
        "meta_site_name": "Programming Language Design and Implementation Stack Exchange",
        "canonical_link": "https://langdev.stackexchange.com/questions/2935/why-do-programming-languages-use-the-asterisk-for-multiplication",
        "text": "Maybe FORTRAN, maybe MATH-MATIC\n\nFORTRAN's Preliminary Report in 1954 anticipated using the × symbol for multiplication (and ×× for exponentiation). The 1956 Programmer's Reference Manual, which is the first manual for a working version, notes that the multiplication symbol is *.\n\nIn the 1978 HOPL-I history of FORTRAN, John Backus claimed that the team were not influenced by any other languages as far as design goes, and specifically notes MATH-MATIC as a non-influence. Some syntax changes were made due to the 48 character set limit on punched cards (even the < symbol wasn't available, hence .LT.), but the team felt that language design was the easy part, and focused their efforts on compilation.\n\nSo we can say that some time between November 1954 and October 1956, FORTRAN adopted * as the multiplication symbol, and they claimed not to be influenced by any other work.\n\nSo that's what was happening at IBM.\n\nBack over at Remington Rand, Grace Hopper's A-2 language, released around 1951-2 for the UNIVAC I, used a text mnemonic for multiplication.\n\nThe next iteration, A-3, was renamed by Remington Rand as ARITH-MATIC, which used essentially the same mnemonic. However, the arithmetic translator layer AT-3, named MATH-MATIC, was developed around the same time, in 1955. The preliminary manual was published in April 1957 and shows the * symbol for multiplication.\n\nSo it appears that FORTRAN and MATH-MATIC settled on this syntax independently. The implementations happened concurrently. FORTRAN shipped first, with AT-3 shipping less than a year later.\n\nSo while FORTRAN certainly shipped *-as-multiplication first, which one of the two designed it first and which one implemented it first... that's probably lost to history.\n\nThe Hopper family of languages became COBOL in 1959, and between them, FORTRAN and COBOL heavily influenced the arithmetic syntax of all subsequent languages.\n\nI believe the first language to use * for multiplication was FORTRAN, in its original specification in 1956 (with earlier drafts).\n\nNone of the other symbols you suggest except the full stop were available in the character set in use on the machines, which predated the high-level language design and was taken as a given. It's only a relatively recent development that these other symbols are all in sufficiently widespread encodings together that choosing between them is an option.\n\nHowever, in 1954 the FORTRAN authors were considering that a programmer\n\nwould like to write $\\sum a_{ij} \\cdot b_{jk}$ instead of the fairly involved set of instructions corresponding to this expression\n\nas part of the work leading into FORTRAN. Clearly none of this made it into the language in that form: the symbols and subscripting just weren't feasible on the machines of the time, but X + Y also considered did, along with X * Y.\n\nThis was all for a punch-card system on the IBM 704, which used BCD encoding with 48 total code points. In some respects the assignment of symbols to codes there is arbitrary, but encodings did correspond to real physical hardware for printing and input. * is one of the few available characters without a more obvious mathematical meaning and has some resemblence to both × and ·, so it's not an unreasonable choice. Subsequent languages have inherited this convention, often via ALGOL or BASIC.\n\nSimilarly, \"keyboard\" symbols have a significant advantage over others. * was present on ordinary typewriters as a marker, and no standard layout has either of the others now. It also made its way into ASCII for the same reason. Much of this is historical contingency, rather than an overarching design, but once the symbol is in use then there is also value in consistency, which reinforces making it available, which reinforces using it.\n\nApplied Science Division and Programming Research Dept, International Business Machines Corporation. 1956. FORTRAN Automatic Coding System for the IBM 704: Programmer's Reference Manual.\n\nBackus, John W. and Herrick, Harlan. 1954. IBM 701 Speedcoding and other automatic programming systems. In Proceedings of the Symposium on Automatic Programming for Digital Computers.\n\nThe fundamental reason is because neither true multiplication symbols × nor ⋅ were (or are) common on US keyboards. Using symbols that are not available on the keyboard is a far bigger problem than learning a new symbol for multiplication because after the trivial learning bump of associating * with multiplication it has no real cost whereas as needing characters off the keyboard or using a compound symbol (e.g. .x.) is a permanent slowdown.\n\nThe alternatives of x and . have major problems of their own. Using x would have caused parsing problems and stopped x being used as a variable. Using . would have been even worse as it clashes with the use of a full stop as the decimal separator that is normal among English speakers. There could, presumably, have been other symbols used but * is the one closest in appearance to the × and most other symbols already had established meanings that would have prevented their use.\n\nFORTRAN seems to have been the first language to adopt the convention in 1956 with the manual simply stating \"The symbol * denotes multiplication\" without explanation. From there it seems to have become ubiquitous but given how other languages have changed almost every convention in one way or another, the origin in FORTRAN does not seem to me to be a particularly important justification for the usage and I think the reasons given at the start of this answer are more important than historical accident - ultimately * is simply the only good solution for English speakers, perhaps had German speakers driven the development of programming languages we'd all use , as the decimal separator and . as multiplication.\n\nFORTRAN I\n\nBased on some quick research, it appears that FORTRAN I was the first language to use * for multiplication. You can see a sample of FORTRAN I code here, which does appear to use *[1]\n\nREAD 1, N, (A(1), 1 * l,N) ... DO 20, I * 2,N\n\n(copied out the best I can read). There are also several examples around of FORTRAN II using * for multiplication[2], so it's really more up to whether FORTRAN I or II did it first.\n\nYou'd have to go back and either read the original FORTRAN tech reports or similar to figure out why they used *, but I'm assuming it's exactly because it looks similar to an interpunct.\n\nAs an anecdote, this would rather funnily indicate that using * for multiplication is quite literally as old as programming languages.\n\n[1] http://www.paulgraham.com/history.html\n\n[2] https://github.com/scivision/fortran-II-examples/blob/main/funcs58.f eg:\n\nterm = -prevxp / presxp * y * term"
    }
}