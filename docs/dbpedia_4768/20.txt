In an earlier article I presented a brief history of high-level, algebraic programming languages starting with Fortran 58 and 60, leading up to the initial development of the Algol language in the years 1958 through 1960. In this article I’m going to discuss several of the technical features of Algol that influenced subsequent high-level programming languages such as BCPL and ultimately C.

Data Types

High-level programming languages before Algol did not have data types. Variables simply sprang into existing by assigning them a value, either an integer or a real number. Fortran did have a bit of data typing in that integers were to be defined using the letters I, J, K, L, M, and N. Any other variable that existed would be a real variable.

Algol began the practice of declaring the type of variable as part of its declaration. This allowed the compiler to perform more efficient by knowing the type of number that was going to be stored in the variable before a number was assigned to the variable.

However, as I discovered reading through a history of Algol that there wasn’t a real theory of data type built into the language until Algol 68.

Here is an example of how data types are used in Algol 60. This program fragment reads some values from a data card(!):