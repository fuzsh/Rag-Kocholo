{
    "id": "correct_foundationPlace_00024_2",
    "rank": 92,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Mono_(software)",
        "read_more_link": "",
        "language": "en",
        "title": "Mono (software)",
        "top_image": "https://upload.wikimedia.org/wikipedia/en/thumb/b/b4/Mono_project_logo.svg/1200px-Mono_project_logo.svg.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/en/thumb/b/b4/Mono_project_logo.svg/1200px-Mono_project_logo.svg.png",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Ambox_current_red_Americas.svg/42px-Ambox_current_red_Americas.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/b4/Mono_project_logo.svg/120px-Mono_project_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Mono_architecture.svg/220px-Mono_architecture.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Mono_booth_at_OSCON_2009_San_Jose.jpg/220px-Mono_booth_at_OSCON_2009_San_Jose.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Banshee_AlbumPic.png/220px-Banshee_AlbumPic.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/a/aa/GNOME_Do_-_blue.png/220px-GNOME_Do_-_blue.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Free_and_open-source_software_logo_%282009%29.svg/28px-Free_and_open-source_software_logo_%282009%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Novell.svg/170px-Novell.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/d/db/Symbol_list_class.svg/16px-Symbol_list_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/12px-Commons-logo.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2003-06-01T14:39:05+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Mono_(software)",
        "text": "Computer software project\n\nMonoOriginal author(s)XimianDeveloper(s).NET Foundation and Xamarin (a Microsoft subsidiary)Initial releaseJune 30, 2004; 20 years ago ( )Stable release\n\n6.12.0.206 / February 13, 2024; 5 months ago ( )\n\nRepositoryWritten inC, C#, XMLOperating systemWindows, macOS, Linux, IBM AIX, IBM i[2]PlatformIA-32, x64, IA-64, ARM, MIPS, RISC-V, PowerPC, SPARC, S390TypeSoftware frameworkLicenseMIT License[3]Websitewww .mono-project .com\n\nMono is a free and open-source .NET Framework-compatible software framework. Originally by Ximian, it was later acquired by Novell, and is now being led by Xamarin, a subsidiary of Microsoft[4] and the .NET Foundation. Mono can be run on many software systems.\n\nWhen Microsoft first announced their .NET Framework in June 2000 it was described as \"a new platform based on Internet standards\",[5] and in December of that year the underlying Common Language Infrastructure was published as an open standard, \"ECMA-335\",[6] opening up the potential for independent implementations.[7] Miguel de Icaza of Ximian believed that .NET had the potential to increase programmer productivity and began investigating whether a Linux version was feasible.[8] Recognizing that their small team could not expect to build and support a full product, they launched the Mono open-source project, on July 19, 2001, at the O'Reilly conference.\n\nAfter three years of development, Mono 1.0 was released on June 30, 2004.[9] Mono evolved from its initial focus of a developer platform for Linux desktop applications to supporting a wide range of architectures and operating systems - including embedded systems.[10]\n\nNovell acquired Ximian in 2003. After Novell was acquired by Attachmate in April 2011, Attachmate announced hundreds of layoffs for the Novell workforce,[11] putting in question the future of Mono.[12][13]\n\nOn May 16, 2011, Miguel de Icaza announced in his blog that Mono would continue to be supported by Xamarin, a company he founded after being laid off from Novell. The original Mono team had also moved to the new company. Xamarin planned to keep working on Mono and had planned to rewrite the proprietary .NET stacks for iOS and Android from scratch, because Novell still owned MonoTouch and Mono for Android at the time.[14] After this announcement, the future of the project was questioned, MonoTouch and Mono for Android being in direct competition with the existing commercial offerings now owned by Attachmate, and considering that the Xamarin team would have difficulties proving that they did not use technologies they formerly developed when they were employed by Novell for the same work.[15] However, in July 2011, Novell, now a subsidiary of Attachmate, and Xamarin, announced that it granted a perpetual license to Xamarin for Mono, MonoTouch and Mono for Android, which officially took stewardship of the project.[16][17]\n\nMono's current version is 6.12.0 (as of June 2024 ). This version provides the core API of the .NET Framework and support for Visual Basic.NET and C# 7.0. LINQ to Objects, XML, and SQL are part of the distribution. Windows Forms 2.0 is also supported, but not actively developed, and as such its support on Mono is incomplete.[18] Version 4.0 was the first version that incorporates Microsoft original source code that was released by Microsoft as part of the .NET Core project.\n\nAs of January 14, 2021, Mono has full support for all the features in .NET 4.7 except Windows Presentation Foundation (WPF) (which the Mono team do not plan to support due to the amount of work it would need)[18] and Windows Workflow Foundation (WF), and with only limited support for Windows Communication Foundation (WCF) and the ASP.NET async stack. However, System.Web and WCF are candidates for 'almost immediate' porting from the .NET reference source back to Mono.[19] Some missing parts of the .NET Framework are under development in an experimental Mono subproject called Olive.[20]\n\nThe Mono project has also created a Visual Basic .NET compiler and a runtime designed for running VB.NET applications. It is currently being developed by Rolf Bjarne Kvinge.\n\nMain article: Moonlight (runtime)\n\nAn open-source implementation of Microsoft Silverlight, called Moonlight, has been included since Mono 1.9.[21] Moonlight 1.0, which supports the Silverlight 1.0 APIs, was released January 20, 2009. Moonlight 2.0 supports Silverlight 2.0 and some features of Silverlight 3.0.[22] A preview release of Moonlight 3.0 was announced in February 2010 and contains updates to Silverlight 3 support.[23]\n\nThe Moonlight project was abandoned on May 29, 2012.[24] According to Miguel, two factors sealed the fate of the project: Microsoft added \"artificial restrictions\" that \"made it useless for desktop programming\", and the technology had not gained enough traction on the Web. In addition, Silverlight itself was deprecated by Microsoft by 2012.\n\nMono consists of three groups of components:\n\nCore components\n\nMono/Linux/GNOME development stack\n\nMicrosoft compatibility stack\n\nThe core components include the C# compiler, the virtual machine for the Common Language Infrastructure and the core class libraries. These components are based on the Ecma-334 and Ecma-335 standards,[25] allowing Mono to provide a standards compliant, free and open-source CLI virtual machine. Microsoft issued a statement that covers both standards under their Community Promise license.[26]\n\nThe Mono/Linux/GNOME development stack provide tools for application development while using the existing GNOME and free and open-source libraries. These include: Gtk# for graphical user interface (GUI) development, Mozilla libraries for working with the Gecko rendering engine, Unix integration libraries (Mono.Posix), database connectivity libraries, a security stack, and the XML schema language RelaxNG. Gtk# allows Mono applications to integrate into the Gnome desktop as native applications. The database libraries provide connectivity to the object-relational database db4o, Firebird, Microsoft SQL Server (MSSQL), MySQL, Open Database Connectivity (ODBC), Oracle, PostgreSQL, SQLite, and many others. The Mono project tracks developing database components at its website.[27]\n\nThe Microsoft compatibility stack provides a pathway for porting Windows .NET applications to Linux. This group of components include ADO.NET, ASP.NET, and Windows Forms, among others. As these components are not covered by Ecma standards, some of them remain subject to patent fears and concerns.\n\nThe major components of Mono include:\n\nCode Execution Engine\n\nClass Libraries\n\nBase Class Library\n\n.NET Compatibility Class Libraries\n\nMono specific class libraries:\n\nCross platform class libraries for both Mono and .NET (Gtk#, Mono.Cecil, Mono.CSharp, Text.Templating)\n\nUnix-specific class libraries (POSIX, Filesystem in Userspace (FUSE), curses)\n\nPlatform-specific class libraries (bindings for: Mac, iOS, Android, MeeGo)\n\nCLI Assemblies\n\nCLI Metadata\n\nMono's Common Language Runtime\n\nCompatible with the ECMA Common Language Infrastructure/.NET Common Language Runtime\n\nMono-specific enhancements:\n\nMono.SIMD support\n\nMono co-routines and continuations.\n\nMono-specific enhancements\n\nNative interop services and COM interop\n\nSecurity - Transparent Code Framework\n\nThe Mono runtime contains a code execution engine that translates ECMA CIL byte codes into native code and supports a number of processors: ARM, MIPS (in 32-bit mode only), SPARC, PowerPC, z/Architecture, IA-32, x86-64 and IA-64 for 64-bit modes.\n\nThe code generator is exposed in three modes:\n\nJust-in-time (JIT) compilation: The runtime will turn ECMA CIL byte codes into native code as the code runs.\n\nAhead-of-Time (AOT) compilation: this code turns the ECMA CIL byte codes (typically found on a .exe or .dll file) and generates native code stored in an operating system, architecture and CPU specific file (for a foo.exe file, it would produce foo.exe.so on Linux). This mode of operation compiles most of the code that is typically done at runtime. There are some exceptions like trampolines and other administrative code that still require the JIT to function, so AOT images are not fully standalone.\n\nFull Static Compilation: this mode is only supported on a handful of platforms and takes the Ahead-of-Time compilation process one step further and generates all the trampolines, wrappers and proxies that are required into a static file that can be statically linked into a program and eliminates the need for a JIT at runtime. This is used on Apple's iOS, Sony's PlayStation 3 and Microsoft's Xbox 360 operating systems.[citation needed]\n\nStarting with Mono 2.6, it is possible to configure Mono to use the LLVM as the code generation engine instead of Mono's own code generation engine. This is useful for high performance computing loads and other situations where the execution performance is more important than the startup performance.\n\nStarting with the Mono 2.7 preview, it is no longer necessary to pick one engine over the other at configuration time. The code generation engine can be selected at startup by using the --llvm or --nollvm command line arguments, and it defaults to the fast-starting Mono code generation engine.\n\nStarting with Mono 5.18, support for LLVM is a default configuration option. Previous versions required a special LLVM fork, but now mono can fall back to its own code generator when it encounters something not handled by LLVM.[28]\n\nAs of Mono 2.8, the Mono runtime ships with two garbage collectors: a generational collector and the Boehm-Demers-Weiser Conservative Garbage Collector. The Boehm garbage collector could exhibit memory leaks on certain classes of applications, making it unsuitable for some long-running server applications.[29][30] Mono switched to Simple Generational GC (SGen-GC) as the default collector in version 3.1.1.\n\nThe SGen garbage collector has many advantages over a traditional conservative scanner. It uses generational garbage collection where new objects are allocated from a nursery, during the garbage collection cycle, all objects that survived are migrated to an older generation memory pool. The idea is that many objects are transient and can quickly be collected and only a handful of objects are long-term objects that live for the entire life of the application. To improve performance this collector assigns memory pools to each thread to let threads allocate new memory blocks without having to coordinate with other threads. Migration of objects from the nursery to the old generation is done by copying the data from the nursery to the old generation pool and updating any live pointers that point to the data to point to the new location. This can be expensive for large objects, so Mono's SGen uses a separate pool of memory for large objects (Large Object Section) and uses a mark-and-sweep algorithm for those objects.[29]\n\nThe class library provides a comprehensive set of facilities for application development. They are primarily written in C#, but due to the Common Language Specification they can be used by any .NET language. The class library is structured into namespaces, and deployed in shared libraries known as assemblies. Speaking of the .NET Framework is primarily referring to this class library.[31]\n\nNamespaces are a mechanism for logically grouping similar classes into a hierarchical structure. This prevents naming conflicts. The structure is implemented using dot-separated words, where the most common top-level namespace is System, such as System.IO and System.Net. There are other top-level namespaces as well, such as Accessibility and Windows. A user can define a namespace by placing elements inside a namespace block.\n\nAssemblies are the physical packaging of the class libraries. These are .dll files, just like (but not to be confused with) Win32 shared libraries. Examples of assemblies are mscorlib.dll, System.dll, System.Data.dll and Accessibility.dll. Namespaces are often distributed among several assemblies and one assembly can be composed of several files.\n\nThe Common Language Infrastructure (CLI) as implemented by the Common Language Runtime (CLR), is implemented by the Mono executable. The runtime compiles and executes .NET applications. The common language infrastructure is defined by the ECMA standard.[25] To run an application, you must invoke the runtime with the relevant parameters.\n\nThe Common Language Specification (CLS) is specified in chapter 6 of ECMA-335 and defines the interface to the CLI, such as conventions like the underlying types for Enum. The Mono compiler generates an image that conforms to the CLS. This is the Common Intermediate Language. The Mono runtime takes this image and runs it. The ECMA standard formally defines a library that conforms to the CLS as a framework.\n\nWithin a native .NET/Mono application, all code is managed; that is, it is governed by the CLI's style of memory management and thread safety. Other .NET or Mono applications can use legacy code, which is referred to as unmanaged, by using the System.Runtime.InteropServices libraries to create C# bindings. Many libraries which ship with Mono use this feature of the CLI, such as Gtk#.\n\nMono has innovated in some areas with new extensions to the core C# and CLI specifications:\n\nC# Compiler as a Service (Use the C# compiler as a library).[32]\n\nC# Interactive Shell.[33]\n\nSIMD support[34] as part of the Mono.SIMD namespace, where method calls to special vector types are directly mapped to the underlying processor CPU SIMD instructions.\n\nFull static compilation of .NET code[35] (used on Mono/iPhone, Mono/PS3).\n\nMono coroutines (used to implement micro-threading code and continuations, mostly for game developers).[36]\n\nAssembly injection to live processes.[37]\n\nUse of LLVM as JIT backend.\n\nCxxi and CppSharp direct interop with C++ code and libraries.\n\nIn addition, Mono is available on a variety of operating systems and architectures.[38]\n\nWindows 7, Windows 8, Windows 8.1, Windows 10, macOS or Linux\n\nSeveral projects extend Mono and allow developers to use it in their development environment. These projects include:\n\nCross-platform:\n\nBanshee Media Player (stalled), a cross-platform music media player built with Mono and Gtk# and also a driver of dozens of C#-based libraries and projects for media handling.\n\nBeagle (unmaintained), a search system for Unix systems.\n\nGecko#, bindings for embedding the layout engine used in Mozilla (Gecko).\n\nGtk#, C# wrappers around the underlying GTK and GNOME libraries, written in C and available on Linux, MacOS and Windows.\n\nMono Migration Analyzer (MoMA), a tool which aids Windows .NET developers in finding areas in their code that might not be cross-platform and therefore not work in Mono on Linux and other Unixes. Not upgraded since Mono 2.8 (2013); use Microsoft's .NET Portability Analyzer (dotnet-apiport) instead.\n\nMonoCross, a cross-platform model–view–controller design pattern where the Model and Controller are shared across platforms and the Views are unique for each platform for an optimized User Interface. The framework requires Xamarin.iOS and Xamarin.Android.\n\nMvvmCross, a cross-platform Model View ViewModel framework utilizing Xamarin.iOS and Xamarin.Android for developing mobile apps.\n\nMonoDevelop an open-source and cross-platform integrated development environment that supports building applications for ASP.NET, Gtk#, Meego, MonoTouch and Silverlight/Moonlight.\n\nMoonlight (discontinued), an implementation of Silverlight that uses Mono.\n\nOpenTK, a managed binding for OpenGL, OpenCL and OpenAL.\n\nQtSharp, C# bindings for the Qt framework.\n\nResco MobileBusiness, a cross-platform developer solution for mobile clients.\n\nResco MobileCRM, a cross-platform developer solution for mobile clients synchronized with Microsoft Dynamics CRM.\n\nServiceStack a high-performance open-source .NET REST web services framework that simplifies the development of XML, JSON and SOAP web services.\n\nSparkleShare an open-source client software that provides cloud storage and file synchronization services.\n\nTao (superseded by OpenTK), a collection of graphics and gaming bindings (OpenGL, SDL, GLUT, Cg).\n\nXwt, a GUI toolkit that maps API calls to native platform calls of the underlying platform, exposing one unified API across different platforms and making possible for the graphical user interfaces to have native look and feel on different platforms. It enables building GUI-based desktop applications that run on multiple platforms, without having to customizing code for different platforms. Xwt API is mapped to a set of native controls on each supported platform. Features that are not available on specific platforms are emulated by using native widgets, which is referred to as hosting in the Xwt context.[39] Xwt was partially used as GUI toolkit (beside GTK#) in the development of the Xamarin Studio.[40] Supported \"backend\" engines are: WPF engine and Gtk engine (using Gtk#) on Windows, Cocoa engine (using MonoMac) and Gtk engine (using Gtk#) on Mac OS X, and Gtk engine (using Gtk#) on Linux.[41]\n\nmacOS:\n\nCocoa# – wrappers around the native macOS toolkit (Cocoa) (deprecated).\n\nMonobjc – a set of bindings for macOS programming.\n\nMonoMac – newer bindings for macOS programming, based on the MonoTouch API design.\n\nMobile platforms:\n\nMonoDroid. Mono for the Android operating system. With bindings for the Android APIs.\n\nMonoTouch. Mono for the iPhone, iPad and iPod Touches. With bindings to the iOS APIs.\n\nWindows:\n\nMonoTools for Visual Studio A Visual Studio plugin that allows Windows developers to target Linux and macOS right from Visual Studio and integrates with SUSE Studio.\n\nMicrosoft has a version of .NET 2.0 now available only for Windows XP, called the Shared Source CLI (Rotor). Microsoft's shared source license may be insufficient for the needs of the community (it explicitly forbids commercial use).\n\nFree Software Foundation's decommissioned Portable.NET project.[42]\n\nMain article: MonoDevelop\n\nMonoDevelop is a free GNOME integrated development environment primarily designed for C# and other .NET languages such as Nemerle, Boo, and Java (via IKVM.NET), although it also supports languages such as C, C++, Python, and Vala. MonoDevelop was originally a port of SharpDevelop to Gtk#, but it has since evolved to meet the needs of Mono developers. The IDE includes class management, built-in help, code completion, Stetic (a GUI designer), project support, and an integrated debugger.\n\nThe MonoDoc browser provides access to API documentation and code samples. The documentation browser uses wiki-style content management, allowing developers to edit and improve the documentation.\n\nXamarin.iOS and Xamarin.Android, both developed by Xamarin, are implementations of Mono for iPhone and Android-based smartphones. Previously available only for commercial licensing,[43] after Microsoft's acquisition of Xamarin in 2016, the Mono runtime itself was relicensed under MIT license[44] and both Xamarin.iOS and Xamarin.Android are being made free and open-source.[45]\n\nXamarin.iOS (previously named MonoTouch) is a library that allows developers to create C# and .NET based applications that run on the iPhone, iPod and iPad devices. It is based on the Mono framework and developed in conjunction with Novell. Unlike Mono applications, Xamarin.iOS \"Apps\" are compiled down to machine code targeted specifically at the Apple iPhone and iPad.[46] This is necessary because the iOS kernel prevents just-in-time compilers from executing on the device.\n\nThe Xamarin.iOS stack is made up of:\n\nCompilers\n\nC# from the Mono Project\n\nThird-party compilers like RemObject's Oxygene can target Xamarin.iOS also\n\nCore .NET libraries\n\nDevelopment SDK:\n\nLinker – used to bundle only the code used in the final application\n\nmtouch – the Native compiler and tool used to deploy to the target device\n\nInterface Builder integration tools\n\nLibraries that bind the native CocoaTouch APIs\n\nXamarin Studio IDE\n\nXamarin Studio is used as the primary IDE, however additional links to Xcode and the iOS simulator have been written.\n\nFrom April to early September 2010, the future of MonoTouch was put in doubt as Apple introduced new terms for iPhone developers that apparently prohibits them from developing in languages other than C, C++ and Objective-C, and the use of a middle layer between the iOS platform and iPhone applications. This made the future of MonoTouch, and other technologies such as Unity, uncertain.[47] Then, in September 2010, Apple rescinded this restriction, stating that they were relaxing the language restrictions that they had put in place earlier that year.[48][49]\n\nRelease History Date Version Notes September 14, 2009 MonoTouch 1.0[50] Initial release April 5, 2010 MonoTouch 2.0[51] iPad support April 16, 2010 MonoTouch 3.0[52] iPhone 4 support April 6, 2011 MonoTouch 4.0[53] iOS 4 support October 12, 2011 MonoTouch 5.0[54] iOS 5 support September 19, 2012 MonoTouch 6.0[55] iOS 6 support February 20, 2013 Xamarin.iOS 6.2[56] Visual Studio support July 24, 2013 Xamarin.iOS 6.4[57] .NET 4.5 async/await support June 19, 2013 Xamarin.iOS 7.0[58] XCode 5 and iOS 7 support September 10, 2014 Xamarin.iOS 8.0[59] iOS 8 and Xcode 6 support September 16, 2015 Xamarin.iOS 9.0[60] iOS 9 and Xcode 7 support September 13, 2016 Xamarin.iOS 10.0[61] iOS 10 and Xcode 8 support September 19, 2017 Xamarin.iOS 11.0[62] iOS 11 and Xcode 9 support September 14, 2018 Xamarin.iOS 12.0[63] iOS 12 and Xcode 10 support September 13, 2019 Xamarin.iOS 13.0[64] iOS 13 and Xcode 11 support September 20, 2020 Xamarin.iOS 14.0[65] iOS 14 and Xcode 12 support\n\nXamarin.Android (formerly known as Mono for Android), initially developed by Novell and continued by Xamarin, is a proprietary[citation needed][66] implementation of Mono for Android-based smart-phones.[67][68][69] It was first released on April 6, 2011.[70] Mono for Android was developed to allow developers to more easily write cross-platform applications that will run on all mobile platforms.[71] In an interview with H-Online, Miguel de Icaza stated, \"Our vision is to allow developers to reuse their engine and business logic code across all mobile platforms and swapping out the user interface code for a platform-specific API.\"[72]\n\nIn August 2010, a Microsoft spokesman, Tom Hanrahan of Microsoft's Open Source Technology Centre, stated, in reference to the lawsuit filed by Oracle against Google over Android's use of Java, that \"The type of action Oracle is taking against Google over Java is not going to happen. If a .NET port to Android was through Mono it would fall under the Microsoft Community Promise Agreement.\"[73][74]\n\nThe Xamarin.Android stack consists of the following components:\n\nMono runtime\n\nAn Android UI designer[75]\n\nLibraries:\n\nCore .NET class libraries\n\nLibraries that bind the native Android/Java APIs\n\nSDK tools to package, deploy and debug\n\nXamarin Studio and Visual Studio 2010 integration to design the UI, remotely debug, and deploy.\n\nCocoa# (also known as CocoaSharp) was a bridge framework for Mac OS X, which allowed applications developed with the Mono runtime to access the Cocoa API. It was initially released on August 12, 2004,[76] and was included with the Mono distribution starting with version 1.0.6, released on February 18, 2005.[citation needed] It has not seen any development since 2008,[citation needed] and is now deprecated.[77]\n\nMonobjc was CocoaSharp's replacement. It allows .NET developers to use most of the Mac OS X API, including Cocoa, with no native code, while still achieving a native UI.[citation needed]\n\nXamarin.Mac is a library that allows developers to run .NET and C# apps on the Mac.[78]\n\nMono is dual licensed by Xamarin, similar to other products such as Qt and the Mozilla Application Suite. Mono's C# compiler and tools are released under the GNU General Public License (GPLv2 only) (starting with version 2.0 of Mono, the Mono C# compiler source code is also available under the MIT X11 License),[79] the runtime libraries under the GNU Lesser General Public License (LGPLv2 only) and the class libraries under the MIT License. These are all free software and open-source licenses and hence Mono is free and open-source software.\n\nThe license of the C# compiler was changed from the GPL to the MIT X11 license[80] to allow the compiler code to be reused in a few instances where the GPL would have prevented such:\n\nMono's Compiler as a Service\n\nThe Mono interactive Shell\n\nThe Mono embeddable C# compiler\n\nMono's implementation of the C# 4.0 dynamic binder.\n\nMonoDevelop's built-in parser and AST graph\n\nOn March 18, 2016, Microsoft's acquisition of Xamarin was officially closed.[81] On March 31, 2016, Microsoft announced at Microsoft Build that they'll completely re-license Mono under the MIT License even in scenarios where previously a commercial license was necessary,[82] and Microsoft stated that they won't assert any \"applicable patents\" against parties that are \"using, selling, offering for sale, importing, or distributing Mono.\"[83][84] It was also announced that Xamarin had contributed the Mono Project to the .NET Foundation.[83]\n\nMany programs covering a range of applications have been developed using the Mono application programming interface (API) and C#. Some programs written for the Linux Desktop include Banshee, Beagle, F-Spot, Gbrainy, Docky/GNOME Do, MonoTorrent, Pinta, and Tomboy. The program, Logos 5 Bible Study Software (OS X Version), was written for the MacOS.\n\nA number of video games, such as The Sims 3 and Second Life (for their scripting languages), OpenSimulator virtual world server, or games built with the Unity or MonoGame game engines, also make use of Mono.[85] OpenRA bundles its Apple Disk Image and Linux AppImages with Mono essentially removing almost all dependencies from the game.[86]\n\nRelease history[87] Date Version[88] Notes June 30, 2004 1.0[89] C# 1.0 support September 21, 2004 1.1[90] November 9, 2006 1.2[91] C# 2.0 support October 6, 2008 2.0[92] Mono's APIs are now in par with .NET 2.0. Introduces the C# 3.0 and Visual Basic 8 compilers. New Mono-specific APIs: Mono.Cecil, Mono.Cairo and Mono.Posix. Gtk# 2.12 is released. The Gendarme verification tool and Mono Linker are introduced. January 13, 2009 2.2[93] Mono switches its JIT engine to a new internal representation[94] that gives it a performance boost and introduces SIMD support in the Mono.Simd[34] Mono.Simd namespace.\n\nMono introduces Full Ahead of Time compilation that allows developers to create full static applications and debuts the C# Compiler as a Service[32] and the C# Interactive Shell[33] (C# REPL) March 30, 2009 2.4[95] This release mostly polishes all the features that shipped in 2.2 and became the foundation for the Long-Term support of Mono in SUSE Linux. December 15, 2009 2.6[96] The Mono runtime is now able to use LLVM as a code generation backend and this release introduces Mono co-routines, the Mono Soft Debugger and the CoreCLR security system required for Moonlight and other Web-based plugins.\n\nOn the class library System.IO.Packaging, WCF client, WCF server, LINQ to SQL debut. The Interactive shell supports auto-completion and the LINQ to SQL supports multiple database backends. The xbuild build system is introduced. September 22, 2010 2.8[97] Defaults to .NET 4.0 profile, C# 4.0 support, new generational garbage collector, includes Parallel Extensions, WCF Routing, CodeContracts, ASP.NET 4.0, drops the 1.0 profile support; the LLVM engine tuned to support 99.9% of all generated code, runtime selectable llvm and gc; incorporates Dynamic Language Runtime, MEF, ASP.NET MVC2, OData Client open-source code from Microsoft;. Will become release 3.0 February 15, 2011 2.10[98] October 18, 2012 3.0[99] C# 5.0 support, async support, Async Base Class Library Upgrade and MVC4 - Partial, no async features support. July 24, 2013 3.2[100] Default Garbage Collector is now the SGEN, instead of Boehm March 31, 2014 3.4[101] August 12, 2014 3.6[102] September 4, 2014 3.8[103] October 4, 2014 3.10[104] January 13, 2015 3.12[105] April 29, 2015 4.0[106] Defaults to .NET 4.5 profile and ships only .NET 4.5 assemblies, defaults to C# 6.0. First release to integrate Microsoft open-source .NET Core code May 10, 2017 5.0[107] Shipping Roslyn C# compiler to enable C#7 support; Shipping msbuild and deprecating xbuild for better compatibility; Enabling concurrent SGen garbage collector to reduce time spent in GC; Introducing the AppleTLS stack on macOS for HTTPS connections; Continued Progress on .NET Class Library convergence; Updated libjpeg in macOS package July 14, 2017 5.2[108] Support for .NET Standard 2.0, strong assembly names, and experimental default interface members. October 5, 2017 5.4[109] The JIT Runtime now supports concurrent method compilation and various other Performance Optimisations; Added .NET 4.7 reference assemblies February 1, 2018 5.8[110] Initial WebAssembly port; Modes for the SGen GC; Includes Roslyn's csi (C# interactive) REPL tool February 26, 2018 5.10[111] The Interpreter is now included in the default installation; runtime now supports Default Interface Methods; WebAssembly considered reliable now; Support for .NET 4.7.1 / C# 7.2 / F# 4.1 May 8, 2018 5.12[112] Port to IBM AIX/i; now includes VB.NET compiler; option to use jemalloc August 7, 2018 5.14[113] Major Windows.Forms update to improve compatibility with .NET October 8, 2018 5.16[114] Hybrid suspend garbage collector; Client certificate support; C# 7.3 support December 21, 2018 5.18[115] .NET 4.7.2 support; more CoreFX code is used April 11, 2019 5.20[116] SSPI (Security Support Provider Interface) in System.Data assembly; Various issues resolved July 17, 2019 6.0[117] C# compiler defaults to version C# 8.0 RC; Various stability improvement in debugger support; Mono Interpreter is feature complete and stable September 23, 2019 6.4[118] C# compiler support for C# 8 language version; .NET Standard 2.1 support December 10, 2019 6.6[119] Added .NET 4.8 reference assemblies January 15, 2020 6.8[120] Various Bugfixes May 19, 2020 6.10[121] Various Bugfixes November 24, 2020 6.12[122] Various Bugfixes\n\nFree and open-source software portal\n\nCommon Language Runtime\n\n.NET Framework\n\n.NET, an open-source framework and successor to .NET Framework\n\nStandard Libraries (CLI)\n\nBase Class Library (BCL)\n\nComparison of application virtual machines\n\nDotGNU – A free software umbrella project which includes Portable.NET\n\nMonoDevelop – An open-source IDE targeting both Mono and Microsoft .NET Framework platforms\n\nMoonlight (runtime), an open-source implementation of Microsoft's Silverlight developed by the Mono Project\n\nShared Source Common Language Infrastructure – Microsoft's shared source implementation of .NET, formerly codenamed Rotor\n\nmod_mono – A module for the Apache HTTP Server that allows hosting of ASP.NET pages and other assemblies on multiple platforms by use of Mono\n\nThis article incorporates text from Mono's homepage, which was then under the GNU Free Documentation License.\n\nde Icaza, Miguel (October 13, 2003). \"[Mono-list] Mono early history.\". Archived from the original (mailing list) on June 6, 2011 .\n\nDumbill, Edd (March 11, 2004). \"Will Mono Become the Preferred Platform for Linux Development?\". ONLamp. Archived from the original on October 19, 2006 .\n\nLoli-Queru, Eugenia (February 22, 2005). \"Mono Applications? Aplenty!\". OSNews .\n\nKerner, Sean Michael (November 18, 2005). \"Mono Project Goes Virtual\". Internet News .\n\nKerner, Sean Michael (November 9, 2006). \"Months Late, Novell Ships Mono 1.2\". internetnews.com.\n\nNorthcutt, Corey (October 12, 2006). \"In the World of mod_mono\". Ubiquity. Archived from the original on February 23, 2007 .\n\nCampbell, Sean (October 8, 2008). \"Interview with Joseph Hill - Product Manager - Mono - Novell\". HSIB .\n\nSmith, Tim (September 9, 2010). \"A Brief Introduction to the Java and .NET Patent Issues\". InfoQ ."
    }
}