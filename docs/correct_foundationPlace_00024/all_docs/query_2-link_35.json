{
    "id": "correct_foundationPlace_00024_2",
    "rank": 35,
    "data": {
        "url": "https://www.uipath.com/kb-articles/automating-terminals-and-mainframes",
        "read_more_link": "",
        "language": "en",
        "title": "Automating Terminals and Mainframes",
        "top_image": "https://www.uipath.com/hubfs/img/og-image-orange.png",
        "meta_img": "https://www.uipath.com/hubfs/img/og-image-orange.png",
        "images": [
            "https://www.uipath.com/hubfs/Valentin/images/misc/logo/logo-mini.svg?v=2.0",
            "https://www.uipath.com/hubfs/brand-kit/uipath-corporate-logo-digital-rgb-orange-small.svg",
            "https://www.uipath.com/hubfs/resources/icons/Search-menu.svg",
            "https://www.uipath.com/hubfs/resources/icons/Search_hover-menu.svg",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_0.png?width=634&name=Image_0.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_1.png?width=486&name=Image_1.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_2.png?width=634&name=Image_2.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_3.png?width=634&name=Image_3.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/GetFieldActivityInTerminal.png?width=1013&name=GetFieldActivityInTerminal.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_5.png?width=634&name=Image_5.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_6.png?width=634&name=Image_6.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_7.png?width=634&name=Image_7.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_8.png?width=634&name=Image_8.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_9.png?width=634&name=Image_9.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_10.png?width=634&name=Image_10.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_11.png?width=486&name=Image_11.png",
            "https://www.uipath.com/hs-fs/hubfs/KB_article/TerminalsArticle/Image_12.png?width=486&name=Image_12.png",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/up_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/up_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/up_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/up_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/up_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/up_arrow_white.svg",
            "https://www.uipath.com/hubfs/brand-kit/uipath-corporate-logo-digital-rgb-white-small.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/arrows/down_arrow_white.svg",
            "https://www.uipath.com/hubfs/Valentin/images/footer/close/close_icon_blue.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Robert Dima"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Setting up a terminal session. UiPath Terminal wizard. Automate data extraction and/or task execution (Mainframe/AS400/VT) TN3270/TN5250/VT.",
        "meta_lang": "en",
        "meta_favicon": "https://www.uipath.com/hubfs/favicon-32x32.png",
        "meta_site_name": "",
        "canonical_link": "https://www.uipath.com/kb-articles/automating-terminals-and-mainframes",
        "text": "1. Introduction\n\nIn order to use terminal activities, the Nuget package “UiPath.Terminal.Activities” needs to be installed. Once installed, the activities can be found under “App Integration -> Terminals” as in the following picture:\n\n2. Terminal wizard\n\nUiPath Terminal wizard is designed to help you automate data extraction and/or task execution on various terminals (Mainframe/AS400/VT). It works with TN3270/TN5250/VT terminals.\n\nThere are several ways to automate the mentioned terminals:\n\nusing the existing/installed terminal application\n\nusing the IBM EHLLL standard\n\nusing the UiPath internal implementation of these protocols\n\nOne may choose between those three based on the accuracy and the level of the provided details (like colors, field information, etc).\n\n2.1. Setting up a terminal session\n\nThe first step for creating a terminal session is by dragging the “Terminal Session” activity into the workflow. Then the connection configuration dialog is displayed.\n\nThe “Provider” combo box specifies which provider to use. Based on this selection, the “Connection type” section changes accordingly, depending on what connection types are available for the specific provider. A more detailed description on each provider can be found in section Supported providers.\n\n“Show client application” flag specifies if the 3rd party provider window is displayed during recording/play.\n\n2.1.1. Use an existing profile\n\nBrowse to a profile file containing the connection information, specific to selected provider. For example, for Attachmate Reflection, one may choose a rd5x/rd3x file, corresponding to a TN5250/TN3270 profile file. The same applies to other providers.\n\n2.1.2. Manually specify address\n\nEnter manually the connection parameters:\n\nAddress : the server address\n\nPort: the port to use for connection\n\nType: the terminal type: TN3270, TN5250 or VT\n\n2.1.3. Attach to an existing session\n\nThis method is available only when using IBM EHLL standard and it is described in EHLL section.\n\n2.2. Recording wizard\n\nAfter specifying connection parameters the UiPath Terminal Wizard is automatically started.\n\n2.2.1. Screen organization\n\nThe terminal screen is organized in fields, highlighted in orange color. The properties of the selected field are displayed the Field Properties pane.\n\nThere are two methods by which UiPath identifies a field on the screen: by coordinates or by visual elements.\n\nField identification by coordinates is straightforward, as it uses the row/column coordinates to located the field. The more reliable way is using LabeledBy/FollowedBy/Index properties. This is useful in case a screen changes a bit and the coordinates are not valid anymore, however, the text before/after a field is usually the same.\n\nIn the above picture, the selected field is “PUB1” and it is labeled by “System name:”. Index property is used when there are multiple fields with the same LabeledBy/FollowedBy property, like in a table.\n\n2.2.2. Field Properties pane\n\nThe properties of the selected field are displayed the Field Properties pane. It includesthe coordinates (row/column), LabeledBy/FollowedBy/Index properties, the text value and a flag indicating if the field is editable or not.\n\n2.2.3. Recorded Actions pane\n\nThis pane containsthe list of recorded actions (auto generated activities).\n\n2.2.4. Available commands\n\nSave & Exit: stops the terminal connection and saves the recorded actions\n\nStop/Start (recording): temporarily stops recording, in case some actions do not need to be recorded\n\nActions commands: each of these are commands generates a specific terminal activity; they are described in a Terminal activities section\n\nRefresh: used to perform a full refresh of the terminal screen (used only for testing/validation)\n\n3. Terminal activities\n\n3.1. Common properties\n\nDelayMS: represents the time to wait after the activity executed; value is in milliseconds\n\nTimeoutMS: specifies the time to wait for the activity to execute; value is in milliseconds\n\nWaitType: allows specifying if the terminal should be in a ready state when executing the activity; recommended value is “READY”\n\n3.2. Terminal Session activity\n\nIt is the main terminal activity and represents a connection to a terminal server. It acts as a container for all other terminal activities. By default, after activity execution, the terminal connection is closed.\n\nProperties:\n\nConnectionString: contains the connection parameters; automatically generated from the connection dialog\n\nOutputConnection: optional, one may specify an output variable (of type TerminalConnection) in order to be used later in other terminal sessions\n\nCloseConnection: used with ExistingConnection property; specifies if the connection is closed after executing the Terminal Session activity\n\nExistingConnection: a variable of type TerminalConnection that was previously initialized\n\nWhen using many terminal sessions, it is recommended to reuse the terminal connection by saving it into a variable and use it in the next sessions. This is to avoid connecting and disconnecting multiple times, as this process is more time consuming.\n\n3.3. Set Field activity\n\nSet the text value of the selected field to a given value. The field must be editable, otherwise the activity is disabled.\n\nIn the sample above, the selected field identified by label “Username/Benutzer” is set to the provided value “test”.\n\nProperties:\n\nLabeledBy: the label before the selected field\n\nFollowedBy: the label following the selected field\n\nIndex: 1 or greater, depending if there are multiple fields with same labels\n\nText: a string expression used for setting the field value\n\n3.4. Get Field activity\n\nObtains the text value of the selected field.\n\nIn the sample above, the text from selected field identified by label “devicename:” is returned.\n\nProperties:\n\nLabeledBy: the label before the selected field\n\nFollowedBy: the label following the selected field\n\nIndex: 1 or greater, depending if there are multiple fields with same labels\n\nText: a string variable where the resulting text is saved\n\n3.5. Get Text activity\n\nObtains the text value of the entire screen.\n\nProperties:\n\nText: a string variable where the resulting text is saved\n\n3.6. Send Control Key activity\n\nSends a special key to the terminal, like (Enter), F1-F24 functional keys, etc. Usually, following a control key like , the screen changes. In the sample below it changes to the information screen following the login screen.\n\nProperties:\n\nKey: the control key to send to the terminal (selected from the provided combo box)\n\n3.7. Wait Field Text activity\n\nWaits the specified amount of time (TimeoutMS, in milliseconds) until the selected field contains the provided text.\n\nIn the sample above, the workflow execution waits until the field identified by label “Username/Benutzer:” contains the text “test”.\n\nProperties:\n\nLabeledBy: the label before the selected field\n\nFollowedBy: the label following the selected field\n\nIndex: 1 or greater, depending if there are multiple fields with same labels\n\nText: a string expression containing the value to wait for; it supports wildcards\n\nMatchCase: a flag indicating if the text matching should be case sensitive\n\n3.8. Wait Screen Text activity\n\nWaits the specified amount of time (TimeoutMS, in milliseconds) until the screen contains the provided text. It is very similar to Wait Field Text activity, except it searches the entire screen instead of being limited to a specific field.\n\nIn the sample above, the workflow execution waits until the text “code400” is found on the screen.\n\nProperties:\n\nText: a string expression containing the value to wait for; it supports wildcards\n\nMatchCase: a flag indicating if the text matching should be case sensitive\n\n3.9. Advanced activities\n\nAdvanced activities are terminal activities that work based on coordinates and cursor location. They should be used only when the field’s positions do not change, in order to ensure a successful workflow run.\n\n3.9.1. Move Cursor activity\n\nMoves the cursor position to the specified location. In the sample below, the cursor will be moved at the beginning of the selected field.\n\nProperties:\n\nRow: 1-based index of the row where the cursor will be moved\n\nColumn: 1-based index of the column where the cursor will be moved\n\n3.9.2. Send Keys activity\n\nSends the specified text to the terminal cursor position. One must ensure that the cursor position is inside an editable field by using Move Cursor activity.\n\nProperties:\n\nText: a string expression that will be sent to the terminal\n\n3.9.3. Set Field at Position activity\n\nSimilar to Set Field activity, uses coordinates to identify the field.\n\nProperties:\n\nRow: 1-based index of the row where the cursor will be moved\n\nColumn: 1-based index of the column where the cursor will be moved\n\nText: a string expression used for setting the field value\n\n3.9.4. Get Field at Position activity\n\nSimilar to Get Field activity, uses coordinates to identify the field.\n\nProperties:\n\nRow: 1-based index of the row where the cursor will be moved\n\nColumn: 1-based index of the column where the cursor will be moved\n\nText: a string variable where the resulting text is saved\n\n3.9.5. Get Text at Position activity\n\nObtains the text of length from the specified position. It is not limited to a single field.\n\nProperties:\n\nRow: 1-based index of the row where the cursor will be moved\n\nColumn: 1-based index of the column where the cursor will be moved\n\nLength: the number of characters to return; if is not supplied, the text until the end of the screen is returned\n\nText: a string variable where the resulting text is saved\n\n3.9.6. Wait Text at Position activity\n\nSimilar to Wait Field Text activity, uses coordinates to identify the field.\n\nProperties:\n\nRow: 1-based index of the row where the cursor will be moved\n\nColumn: 1-based index of the column where the cursor will be moved\n\nText: a string expression containing the value to wait for; it supports wildcards\n\nMatchCase: a flag indicating if the text matching should be case sensitive\n\n4. Supported providers\n\n4.1. Attachmate Reflection\n\n4.1.1. Prerequisites\n\nAttachmate reflection installed (https://www.attachmate.com/products/reflection/2014/)\n\n4.1.2. Usage\n\nWhen using profile mode, the profile file must be located in the Attachmate Reflection profile folder. Default is ‘C:\\Users\\\\Documents\\Attachmate\\Reflection’\n\n4.2. Rocket BlueZone\n\n4.2.1. Prerequisites\n\nRocket BlueZone (5.2+) Terminal Emulation installed (https://www.rocketsoftware.com/products/rocket-bluezone-terminal-emulation )\n\n4.2.2. Usage\n\nNo custom requirements\n\n4.3. IBM Personal Communications\n\n4.3.1. Prerequisites\n\nIBM Personal Communications (https://www-03.ibm.com/software/products/en/pcomm )\n\n4.3.2. Usage\n\nOnly profile mode supported. The profile file must be located in the IBM Personal Communications profile folder. Default is ‘C:\\Users\\\\AppData\\Roaming\\IBM\\Personal Communications’\n\n4.4. Using IBM EHLL standard\n\nOne may choose to connect to a terminal using IBM EHLL standard. This is an advanced type of connection and specific information regarding EHLL implementation need to be provided. Depending on the EHLL implementation, some features could not be available (like field color).\n\nOne can only attach to an existing terminal session using this method.\n\n4.4.1. Prerequisites\n\nAn emulator that implements the EHLLAPI standard\n\n4.4.2. Usage\n\nThe terminal emulator window should be opened before the connection (see the Application Specifics chapter below)\n\nIn connection dialog the path to the DLL implementing the EHLLAPI standard must be specified\n\nThe EHLL function should be changed accordingly (usually is ‘hllapi’)\n\nThe session name should be the session short name of the previously opened connection\n\nThe Show client application has no effect\n\n4.4.3. Application specifics\n\n4.4.3.1. IBM implementation\n\nThe EHLLAPI implementation dll is ‘pcshll32.dll’; default, it is located in ‘C:\\Program Files (x86)\\IBM\\Personal Communications’.\n\n4.4.3.2. Attachmate Extra\n\nThe EHLLAPI implementation .dll is pcshll32.dll; default, it is located in C:\\Program Files (x86)\\Attachmate\\EXTRA!.\n\nRequirements/limitations:\n\nIn Attachmate Extra application, one must associate a session short name letter with a profile file (Options -> Global Preferences -> Advanced -> HLLAPI shortname); this letter will be used in terminal session connection dialog (UiPath Studio)\n\nThe session must NOT be started when connecting from UiPath Studio\n\n4.4.3.3. Micro Focus Rumba\n\nThe EHLLAPI implementation dll is ehlapi32.dll’; default, it is located in ‘C:\\Program Files (x86)\\Micro Focus\\RUMBA\\System’. The Ehll Enhanced checkbox should be unchecked.\n\nRequirements/limitations:\n\nIn Micro Focus Rumba Desktop application one must associate a session short name letter (Options -> API… -> Identification ->Session Short Name). Also, must check the classic HLLAPI data structure (Options -> API… -> Configuration -> Classic HLLAPI data structure).\n\n4.5. Using UiPath implementation\n\nThis is a custom implementation and it requires the address of the server and the terminal type."
    }
}