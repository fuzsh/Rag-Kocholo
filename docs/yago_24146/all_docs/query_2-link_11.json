{
    "id": "yago_24146_2",
    "rank": 11,
    "data": {
        "url": "https://www.cdslab.org/matlab/notes/preliminary-foundations/matlab-for-beginners/index.html",
        "read_more_link": "",
        "language": "en",
        "title": "MATLAB for beginners",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.cdslab.org/matlab/notes/preliminary-foundations/matlab-for-beginners/matlab.png",
            "https://www.cdslab.org/matlab/images/logo.png"
        ],
        "movies": [
            "https://www.youtube.com/embed/fa-sUaKv56A"
        ],
        "keywords": [],
        "meta_keywords": [
            "MATLABbeginner",
            "MATLAB",
            "beginner"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This note aims at providing an introduction to MATLAB programming for beginners, how to install it, different components of the Graphical Unit Interface of M...",
        "meta_lang": "",
        "meta_favicon": "/matlab/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This note aims at providing an introduction to MATLAB programming for beginners, how to install it, different components of the Graphical Unit Interface of MATLAB, as well as how to perform simple arithmetic operations in MATLAB.\n\nMATLAB: a brief history\n\nMATLAB was developed in the mid 1980’, by the collaborative works of Cleve Moler, a PhD graduate of Stanford University, and John Little, a graudate of MIT. Together they co-founded a private company named MathWorks.\n\nThe name of the language and software they developed, MATLAB is an attribution to the original purpose of the software, that is, to serve as a matrix laboratory. Cleve Moler was among the developers of the popular Fortran libraries EISPACK and LINPACK. He wanted to provide his students with a higher-level environment so that they could use these high-performance Fortran libraries without the need to learn Fortran.\n\nSince MATLAB was developed by a scientist for scientists, its structure and syntax have more resemblance to the popular programming language of scientists, Fortran, than to any other language. You will soon notice this similarity when we get to learn modern Fortran later on in this course.\n\nAn informative historical review of MATLAB by its own inventor is available to watch on MathWorks website. Lower quality of the same video can be accessed on youtube, which I embed here for you:\n\nMATLAB: Why do you need to learn it?\n\nFor the following reasons:\n\nIt targets engineers as well as natural and medical scientists as its main audience, just like Fortran.\n\nIt has an excellent native array/matrix representation and manipulation tools, just like Fortran.\n\nIt has extensive sets of high-level commands for numerical computing, like Fortran.\n\nIt is an interpreted language that makes it easy to use anytime, unlike Fortran, C, C++, which are compiled languages.\n\nIt has an excellent set of graphical tools for 2D and 3D plotting (in fact other languages like Python have tried to copy from and reverse-engineer the graphical tools and commands available in MATLAB).\n\nIt has one of the largest user-base (over 2,000,000 users) in all scientific communities.\n\nThere is an extensive list of numerical libraries written in MATLAB over the past decades by all those science/engineering-oriented users.\n\nIt has an excellent manual and user guide, with extensive illustrative examples. You might not even need to take a MATLAB class if you could closely and carefully follow MATLAB’s user guide.\n\nMATLAB caveats\n\nHere is a personal list of MATLAB caveats that I can think of, at the moment:\n\nIt is not free.\n\nIt is slow compared to compiled programming languages. See for example, the following performance comparisons and tests in NASA modeling guru web page. As you can see there, the performance of MATLAB script can be significantly lower than compiled languages such as Fortran and C.\n\nIf you have already coded in fully object-oriented programming (OOP) language, in particular, Python, you will find some oddities in MATLAB’s OOP implementation. You may feel this when, for example, you are working with cell arrays in MATLAB. We will see later on, what cell arrays are.\n\nMATLAB features\n\nMATLAB has the following features and attributes.\n\nMATLAB is a fourth-generation, high-level programming language.\n\nRemember from the earlier discussion of the computer-programming history, that a high-level programming language provides a high level of programming abstraction from details of computer and machine code. For comparison, Fortran, C++, and C are considered high, medium, and low -level programming languages respectively.\n\nMATLAB is an array-based programming language.\n\nMATLAB is designed to facilitate array-manipulation for scientists and engineers.\n\nMATLAB is a multi-paradigm programming language.\n\nMATLAB allows the programmer to use the following major programming paradigms in their codes:\n\nfunctional programming\n\nimperative programming\n\nprocedural programming\n\nobject-oriented programming (OOP)\n\nMATLAB is an interpreted language.\n\nA programming-language implementation is a system for executing computer programs. There are two general approaches to programming language implementation:\n\nInterpretation: An interpreter takes as input a program in some language, and performs the actions written in that language on some machine.\n\nCompilation: A compiler takes as input a program in some language, and translates that program into some other language, which may serve as input to another interpreter or another compiler.\n\nMATLAB is an interpreted language, meaning that, as soon as you type a MATLAB command on the MATLAB’s command-line and press enter, the MATLAB interpreter executes the statement. MATLAB programs can also be compiled using MATLAB Compiler, to create standalone applications to be executed later when desired.\n\nThe file extension for human-readable MATLAB source code is .m.\n\nSome useful resources for MATLAB\n\nMATLAB Central: An extensive MATLAB code repository and MATLAB-related questions with answers.\n\ncomp.soft-sys.matlab: MATLAB’s newsletter.\n\nhttps://www.mathworks.com/moler: The original MATLAB developer’s page.\n\nMATLAB educational videos: A long search-able list of educational MATLAB videos.\n\nMATLAB installation\n\nDepending on your operating system, you can download and install a specific version of MATLAB for your personal computer. MATLAB is available to all students enrolled at UT Austin for free. It can be downloaded from here.\n\nAlternative replicas of MATLAB\n\nSince MATLAB is not free, the GNU organization has started a project called GNU Octave which is a reverse-engineering of MATLAB language and environment, hence mostly compatible with it, but at no cost!. You can download it from here. GNU Octave is a free open source software (FOSS) package which is mostly compatible with MATLAB. It provides a very similar command line interpreter interface and implements most of the functionality as the commercial MATLAB product. Nevertheless, there are subtle differences which anyone attempting to switch to GNU Octave or to write MATLAB/GNU Octave-compatible scripts must appreciate. Octave was conceived in 1988 and has been under development since 1992, and over the years has made a great deal of progress, especially in the area of graphics and plotting.\n\nMATLAB script editors\n\nI highly recommend you to use MATLAB’s built-in IDE for MATLAB scripting since it has fantastic features such as automatic debugging, indentation and syntax highlight. However, once you become proficient in MATLAB scripting, you may realize that the text-editing capabilities of MATLAB IDE are not that great compared to highly popular general-purpose text editors. In that case, I recommend you to use,\n\nSublime (available Windows, OS X, Linux)\n\nSublime is a sophisticated text editor for codes in many different languages, including MATLAB, Fortran, C, C++, etc. It has many advanced tools for code editing and syntax highlighting.\n\nNotepad++ (available only on Windows)\n\nNotepad++ is a highly versatile text and source code editor for use with Microsoft Windows. It is likely – and in my opinion, arguably – the most powerful general-purpose text editor that is currently available on the web. Notepad++ automatically identifies the type of code the file contains based on the file extension and highlights the code syntax accordingly. However, you should keep in mind that it is not specifically designed for MATLAB. If you are a professional multi-language programmer, you will soon find the hidden gems in Notepad++, that are not available in any other editor, including MATLAB’s built-in editor.\n\nWhich MATLAB version should I use?\n\nAlways try to use the latest version if possible, since new features are added to MATLAB every year.\n\nUsing MATLAB online, in your web browser\n\nSince as a UT student, you have a campus-wide MATLAB license, you can log in to your account to use MATLAB in your browser, on a remote server. For instructions on how to use MATLAB online, click here.\n\nMATLAB environment\n\nAs soon as you open MATLAB, you will likely encounter an environment like the following figure.\n\nThe main compartments in the MATLAB environment are:\n\ncommand window: where you can type single or multiple line commands.\n\nscript editor: which is where you can create new or open/edit existing MATLAB files.\n\naddress bar: indicating the current working directory.\n\nfolder tree window: showing all files in the current working directory.\n\nworkspace window: which shows all the global variables currently defined in MATLAB.\n\nUseful MATLAB commands\n\nThe following are some useful MATLAB commands that allow you to get help on the command-line:\n\ndemo will load MATLAB examples in the Help Browser, illustrating some features of MATLAB.\n\nhelp <keyword> will explain any function. For example,\n\n>> help sin sin Sine of argument in radians. sin(X) is the sine of the elements of X. See also asin, sind. Reference page for sin Other functions named sin\n\nhelp help will explain how MATLAB help works.\n\nlookfor <keyword> searches through MATLAB help for a specific word or phrase. For example,\n\n>> lookfor gaussian hwv - Create a Hull-White/Vasicek mean-reverting Gaussian diffusion model xreggpr - xreggpm Gaussian Process model constructor gmdistribution - Gaussian mixture distribution class. awgn - Add white Gaussian noise to a signal. bigaussianir - Bi-Gaussian Doppler filter impulse response. gaussianir - Gaussian Doppler filter impulse response. intfiltgaussian_intfactor - Support function used by @channel package for wgn - Generate white Gaussian noise. commblkgaussfilt - Gaussian filter block helper function. commblkgaussiansrc2 - Mask function for Gaussian Noise Generator block\n\ndoc <keyword> will bring up a documentation page in the Help Browser for the given keyword.\n\ndir <path> lists the contents of the given path.\n\n>> dir . lcdata.xml m3iregistry mcc.bat mexext.bat mw_mpiexec.bat win64 .. lcdata.xsd matlab.exe mex.bat mexsetup.pm registry worker.bat deploytool.bat lcdata_utf8.xml mbuild.bat mex.pl mexutils.pm util\n\npwd outputs the current working directory.\n\n>> pwd ans = C:\\Program Files\\MATLAB\\R2016a\\bin\n\nquit quits MATLAB by closing the application.\n\ndiary('filename') (or diary filename) saves all subsequent keyboard interactions with MATLAB Command Window to the file filename. diary off suspends the diary. diary on resumes diary mode using the current filename, or the default filename diary if none has yet been specified.\n\nComment lines in MATLAB begin with percent character %. Anything after % is ignored by MATLAB interpreter. The % character itself only tells the interpreter to ignore the remainder of the same line. In the MATLAB Editor, commented lines and sections of code are highlighted in green by default. There are two useful keyboard shortcuts for adding and removing chunks of comments. Select the code you wish to comment or uncomment, and then press Ctrl-R to place one % symbol at the beginning of each line and `Ctrl-T to do the opposite.\n\nMATLAB also supports multi-line comments, akin to /* ... */ in languages like C or C++, via the %{ %} delimiters. But there is a small and important difference. In MATLAB, the lines containing %{ or %} should not contain any other text (except white spaces). Otherwise, the multi-line comment would not work as you wish. For example,\n\nYou notice that in the above, y=2; is not commented. The correct syntax is,\n\nComments are useful for explaining what function a certain piece of code performs especially if the code relies on implicit or subtle assumptions or otherwise perform subtle actions. Doing this is a good idea both for yourself and for others who try to read your code. It is highly recommended to include a block of comments at the beginning of your codes explaining what your MATLAB script or function does and how to use it. MATLAB will output the leading comments that appear at the beginning of a .m file, when you type,\n\nAll of MATLAB’s built-in functions written in MATLAB are documented this way.\n\nMATLAB’s search path\n\nMATLAB has a search path and strategy that is used to find variables and MATLAB scripts. MATLAB’s current working directory is always displayed in the MATLAB address bar. When you enter a name in MATLAB’s command prompt, the MATLAB interpreter attempts to find an entity with that name in the following order:"
    }
}