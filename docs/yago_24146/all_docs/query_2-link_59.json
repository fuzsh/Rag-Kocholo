{
    "id": "yago_24146_2",
    "rank": 59,
    "data": {
        "url": "https://ivypanda.com/essays/ten-programming-languages/",
        "read_more_link": "",
        "language": "en",
        "title": "Ten Programming Languages - 1624 Words",
        "top_image": "https://ivypanda.com/outer/img/jpg/ogimage.jpg",
        "meta_img": "https://ivypanda.com/outer/img/jpg/ogimage.jpg",
        "images": [
            "https://ivypanda.com/essays/wp-content/uploads/slides/408/40857/ten-programming-languages-page1.webp",
            "https://ivypanda.com/essays/wp-content/uploads/slides/408/40857/ten-programming-languages-page2.webp",
            "https://ivypanda.com/essays/wp-content/uploads/slides/408/40857/ten-programming-languages-page3.webp",
            "https://ivypanda.com/essays/wp-content/uploads/slides/408/40857/ten-programming-languages-page4.webp",
            "https://ivypanda.com/essays/wp-content/uploads/slides/408/40857/ten-programming-languages-page5.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "IvyPanda"
        ],
        "publish_date": "2019-04-03T00:00:00",
        "summary": "",
        "meta_description": "Computer programming dates back to half a millennium after the end of antiquity. Several programming languages have emerged since the first electronically implemented program.",
        "meta_lang": "en",
        "meta_favicon": "/favicons/favicon.svg",
        "meta_site_name": "IvyPanda",
        "canonical_link": "https://ivypanda.com/essays/ten-programming-languages/",
        "text": "Introduction\n\nComputer programming dates back to half a millennium after the end of antiquity. Until the invention of electronic computers in the twentieth century, it was not possible to run complex high level programming languages on a machine.\n\nThe discovery and meteoric development of the computer enabled the development of the modern high-level programs, which have significantly changed the world of computing and influence various aspects of peoples’ lives in the 21st century. Several computer-programming languages have emerged since the first electronically implemented program.\n\nPlankalkül\n\nIn 1941, Konrad Zuse designed a programming language whose implementation on a machine was possible. The language was known as Plankalkül. In that era, there was no computing machine powerful enough to handle such a high-level language. Zuse had hoped that someone could develop a machine with such capabilities. In addition, he tried to popularize his mode of coding by publishing several articles about it.\n\nLater in the 1940s, the first viable electronic computers began to emerge, but they had other languages specifically designed for them. When Zuse wrote the code for his language, his intentions were to develop a code for use in engineering technology rather than for general purpose. The problem with the programming language was that it was too complex for the machines of the succeeding years. Designers of the first computer had to develop a machine language to link Plankalkül to modern day processors.\n\nRigors of war in Germany did not allow any specialist capable of developing computers to consider the viability of Zuse’s program. The compilation of the program and its use on a microprocessor-based system was achieved in the late 1920s, but was never used for any serious commercial purpose (Zuse, 1993).\n\nFORTRAN\n\nIn 1953, John Backus developed the FORTRAN language at the IBM with the intention of its application in mathematics and general scientific fields. FORTRAN was the first language realistic for use with the electronic technology available at the time. Although the language was a high-level programming language, it could only be used with digits and a few numerals for algebraic computation. This design facilitated its application on electronic devices.\n\nThe initial preference of the language for scientific application was because of its ability to compute complex numbers, which were useful for engineering applications. Computer users preferred the system to a compiler-based system, and this led to the manufacture of computers with architectures that could support the language.\n\nOne advantage of the programming language was the speed that it could attain. The language features as one of the fastest code in the programming realm. With numerous modifications, scientists to date have used the programming language in various applications (Calderbank, 1989).\n\nLisp\n\nIn 1958, John McCarthy invented one of the pioneer programming languages that emerged about the same era as the FORTRAN language. He published a documentation of the language at the Massachusetts Institute of Technology. Lisp presented a language difficult to implement on the computers of the time. However, several other technologists successfully streamlined the language to fit the practical application.\n\nSteve Russell developed the first compiler to generate the machine code for Lisp language. The language has diversified into various versions still in used to date. The original intended use of this language was to develop artificial intelligence in the field of mathematics. Various other computer-programming languages use the lisp language as a basis of coding and implementation. The advantage of the language is that it has high readability since the visible code is not much different from the code that the compiler uses (Queinnec, 2003).\n\nCOBOL\n\nThe Common Business Oriented Language, COBOL, is a development instituted in 1959 through the cooperation of the government, business, and technical institutions. The initial intention in the development of this language was for use by the authorities and business community.\n\nThe United States military sponsored a combined effort by computer manufacturers. COBOL’s set back is the lack of a definite structure that could be a designate for standard. To survive in the market, the developers had to remodel the language into a more user-friendly style. COBOL favors the end user of the language in that it has a direct meaning for the user independent of the user’s profession.\n\nThe coding language is analogous to a conventional verbal language. COBOL language design is limited to specific applications that suit the environment of application. Consequently, a version of the COBOL program is applicable in several different ways (Roy & Dastidar, 1982).\n\nPascal programming language\n\nThe development of the Pascal language was purposely to orient students to structured programming. Consequently, the language was compact. Niklaus Wirth developed the language in the late 1960s basing it on ALGOL language. German programmers implemented the initial compiler for the Pascal code.\n\nMore than a decade later, a compiler written in Pascal language was designed. Throughout the 1970s and 1980s, different compilers were implemented by academic institutions and programming scholars. The main feature of Pascal that differentiates it from the older languages is its use of complex data structures.\n\nThe rigid application of the first version of Pascal language is considered as an indication of an incomplete language. Furthermore, the language had only one practical application of teaching. In addition, the language’s procedural coding did not allow the programmer to escape conditions at points where it was necessary. The original version of Pascal is not in widespread use today due to its narrow scope of application and obsolescence. However, modifications of the original program are in use in various applications (Grogono, 1980).\n\nC++\n\nBjarne Stroustrup developed the C++ language as C with classes at Bell Laboratories. Intel and Microsoft are some of the many companies that have implemented compilers for the language for commercial purposes. C++ is a general-purpose programming language whose latest version in use is referred to as the C++11.\n\nThe inventor of C++ envisioned a language to create large, complex programs, and the modification of the C language. C++ has the advantage that the programmer can join procedural code with classes in the same program. Inheritance and polymorphism are other standard features of the language.\n\nThe fact that C++ is a bulky language is a major setback for programmers. In addition, the program’s object oriented function is regarded as restrictive and not fully developed. Furthermore, the language has several incompatibilities with other software systems. However, C++ language is widely used all over the world for general purposes due to its flexibility and multifunctionality (Albert, 2009).\n\nMATLAB\n\nCleve Moler of the University of New Mexico developed the Matrix Laboratory programming language for a wide range of applications. MAT lab is a numerical computation language. The MathWorks Company was established to develop MATLAB into a commercially competitive language like other major programming languages.\n\nLater, the language became popular in engineering fields. However, overtime, the language has become popular in other disciplines. MATLAB uses the manipulation of matrix arrays assigned to conventional variables to form an easily legible language.\n\nThe language is useful in the application functions since it is capable of generating three-dimensional representation of objects through coding. Various version languages of the MATLAB family are not compatible. The Matrix arrays form the primary data types, and the program can utilize functions written in other languages (Moler, 2004).\n\nHTML\n\nBetween the 1980s and 1990s, while working at CERN, Tim Berner-lee developed and wrote the Hypertext markup language. The program is used to create web pages through coding, and uses tags in its execution. The language is useful in internet applications since it is possible to code the visual characteristics of a page.\n\nIn addition, angle brackets in the code characterize the Html language. Tags represent the visual and the audio content of web pages, but they are not displayed. The HTML language was not popular in its initial stages of development, but has gained popularity in the internet age. HTML application in the internet is advantageous due to its speed and less data requirement. A setback of the language is that the HTML code representation omits some of the image features on web pages (Castro, 2007).\n\nVisual Basic\n\nThis programming language, abbreviated as VB, was developed from tripod, a programming language written by Alan cooper. Cooper then continued to develop the tripod for the Microsoft Corporation. The language is used for writing scripts and developing executable files for windows and other programming languages.\n\nIn addition, it is possible to compile files for other programming languages into a machine code executable on the windows platform by one comprehensive compiler. On the other hand, the language has other modified versions that support more functionality than the original updated version of visual basic language.\n\nAlthough the language provides an important platform for scripting, it does not adequately support object-oriented programming. Microsoft, which had sponsored the development of the language, stopped supporting it further development despite its continued use around the world (Jones, 1998).\n\nAction Script\n\nThe Macromedia Inc Corporation developed action script in the 1990s and for its use with Web pages. The program is used for two-dimensional images. Applications developed using action script use the adobe flash player to enhance web pages since the adobe systems owns Macromedia Inc.\n\nOriginally, the language supported two dimensional imaging but improvements have enabled programs to support three dimensional imaging, but on a rudimentary scale. The products owners, who continuously modify their programs to keep them secret, restrict the use of the products coded in the language. Modifications to the language make it faster and increase the applicability of the language.\n\nConclusion\n\nThe concept of programming languages is derived from the very first logical languages. Moreover, the language provided the first computers inventors with a clear picture of the expected capabilities of the first electronic computer.\n\nThis is because the languages required running on electronic computers, and this was a different concept unlike in mechanical computers. Features such as procedures, code, compiler, data structure, and others are common to many programs. Most of the programs share concepts of which there is little variety (DeHaan & Rhodes, 2002).\n\nReferences\n\nAlbert, R. (2009). C++ an active learning approach. Burlington: Jones & Bartlett Learning, 2008.\n\nCalderbank, V. J., & Calderbank, V. J. (1989). Programming in FORTRAN (3rd ed.). London: Chapman and Hall.\n\nCastro, E. (2007). HTML, XHTML & CSS (6th ed.). Berkeley, CA: Peachpit Press.\n\nDeHaan, J., & Rhodes, G. (2002). ActionScript: zero to hero. Birmingham: Friends of ED.\n\nGrogono, P. (1980). Programming in PASCAL (Rev. ed.). Reading, Mass.: Addison- Wesley.\n\nJones, P. (1998). Visual Basic: a complete course. London: Letts Educational Ltd.\n\nMoler, C. B. (2004). Numerical computing with MATLAB. Philadelphia: Society for Industrial and Applied Mathematics.\n\nQueinnec, C. (2003). Lisp in small pieces. Cambridge, U.K.: Cambridge University Press.\n\nRoy, M. K., & Dastidar, D. G. (1982). COBOL programming. New Delhi: Tata McGraw- Hill.\n\nZuse, K., & Bauer, F. L. (1993). The computer – my life. Berlin [etc.: Springer-Verlag."
    }
}