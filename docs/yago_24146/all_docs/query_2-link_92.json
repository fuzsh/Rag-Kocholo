{
    "id": "yago_24146_2",
    "rank": 92,
    "data": {
        "url": "https://fortran-lang.discourse.group/t/emulators-and-interpreters-in-fortran/5042",
        "read_more_link": "",
        "language": "en",
        "title": "Emulators and interpreters in Fortran",
        "top_image": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6.png",
        "meta_img": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6.png",
        "images": [
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/optimized/2X/d/da444fd54ce97150506cbb0222d3379b5272a146_2_316x499.jpeg",
            "https://avatars.discourse-cdn.com/v4/letter/u/0ea827/48.png",
            "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/original/2X/6/6509ba5677b725b3957eebfa3c5d95bd1715fcea.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-01-16T21:12:59+00:00",
        "summary": "",
        "meta_description": "Fortran is often perceived as a language suitable exclusively for numerical applications and not much else. However, digging a bit into the history I’ve discovered that a few computer emulators were written in Fortran: \n\n&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://canada1.discourse-cdn.com/free1/uploads/fortran_lang/optimized/1X/50078338be6df8cfc3e2277e9cb3c805f45c6ee6_2_32x32.png",
        "meta_site_name": "Fortran Discourse",
        "canonical_link": "https://fortran-lang.discourse.group/t/emulators-and-interpreters-in-fortran/5042",
        "text": "Fortran is often perceived as a language suitable exclusively for numerical applications and not much else. However, digging a bit into the history I’ve discovered that a few computer emulators were written in Fortran:\n\nLaunched in 1971, the 4004 was Intel’s first microprocessor. It was part of the MCS-4 micro computer set used in the Busicom electronic calculator (an emulator can be seen here). The index of the MCS-4 Users Manual mentions a MCS-4 Fortran Assembler/Simulator Package. According to another page this was a cross-assembler running on a PDP-8 and implemented in Fortran IV.\n\nAccording to DEC employee Larry McGowan in How the PDP-11 Was Born, a simulator called SIM-11 was written for the PDP-10 which was used to test software and early programs before the first PDP-11 prototype was built. The PDP-11 was released in 1970.\n\nIn the book FORTRAN TOOLS: For VAX/VMS and MS-DOS (1989), the authors Jones & Crabtree (presumably employed by Hughes Aircraft Company, later sold to Raytheon) provide listings for a virtual machine used to run a Fortran-like interpreted language called spl (simple programming language).\n\nSPICE2 was computer program used to simulate semiconductor circuits developed at the Electronics Research Laboratory at the University of California in 1975. I guess it was not an interpreter, however the input decks might be seen as an early example of domain-specific simulation language. SPICE2 is not to be confused with the NASA SPICE information system. The Cedar EDA program (briefly named JuliaSPICE?) seems like a descendant of SPICE2 written in Julia. (It appears to be closed-source.)\n\nAre you aware of any other historical emulators or interpreters written in Fortran? Do any of your Fortran programs in use today have an embedded interpreter? In case yes, what do you use it for?\n\nIt certainly does. I know @urbanjost has a derived version of it. Cleve Moler also wrote about in A History of MATLAB.\n\n@jacobwilliams, Copernicus looks impressive! I noticed EIS-2 is missing from your list of equation parsers. It was featured at FortranCon 2020 in the talk from Christopher Brady. The book Illustrating FORTRAN (1982) also has an exercise on reverse polish notation illustrating the use of stacks.\n\nThere is also the Fortran 2018 RPN Calculator which provides a lot more than just basic arithmetics.\n\nI have used two interactive FORTRAN77 interpreters written in Fortran but a cursory search\n\ndid not produce any copies of them.\n\nThere are at least two scheme interpreters written in Fortran\n\nDISCUS had/has a FORTRAN77-like interpreter\n\nI thought there was a FORTRAN77-like interpreter in ROOT from CERN,\n\nbut if there was it appears to be gone.\n\nWestinghouse had a shell program written in fortran that incorporated graphics, a functional language and extensive math functions and a set of operators for working on tables of numeric values and self-describing data files that has been in use for at least thirty years although I do not know if it is actively maintained.\n\nIf I get some time I might be able to track some of those down. I know the scheme interpreters are used in actively maintained programs but I have lost track of some of the others\n\nThe NCL scripting language for NCAR graphics had a huge amount of Fortran in it and I believe the original was all Fortran-based; but I think it migrated toward C; not sure but it had a huge amount of Fortran libraries available from NCL and is still available but no longer supported.\n\nSome current projects are\n\nM_matrix: Fortran callable version of old matlab-like interface, by @urbanjost\n\nsyntran, by Jeff Irwin, which can run the following code (taken from the Readme.md):\n\n{ // Calculate π let pi = 0.0; for k in [0: 10] { pi = pi + 1 / (16.0 ** k) * ( 4.0 / (8*k + 1) - 2.0 / (8*k + 4) - 1.0 / (8*k + 5) - 1.0 / (8*k + 6) ); } pi; // 3.141593E+00 // x is 30 degrees (in radians) let x = pi / 6; // Calculate sin(x) using Taylor series // Initialize Taylor series terms let xpow = x; let factorial = 1; let sign = 1; // Sum odd terms only let sinx = 0.0; for k in [1: 10] { sinx = sinx + sign * xpow / factorial; xpow = xpow * x ** 2; factorial = factorial * (2*k) * (2*k + 1); sign = -sign; } sinx; // 4.999999E-01 }\n\nThe early Prolog implementations were bootstrapped using Fortran:\n\nBlockquote\n\nFrom June to the end of the year [1973], Gérard Battani, Henri Meloni, and Rent Bazzoli, postgraduate students at the time, wrote the interpreter in FORTRAN and its supervisor in Prolog\n\nSome of the very early Lisp environments were implement in ancient dialects of Fortran:\n\nBlockquote\n\nThis paper concentrates on the development of the basic ideas of LISP and distinguishes two periods - Summer 1956 through Summer 1958 when most of the key ideas were developed (some of which were implemented in the FORTRAN based FLPL), and Fall 1958 through 1962 when the programming language was implemented and applied to problems of artificial intelligence. After 1962, the development of LISP became multi-stranded, and different ideas were pursued in different places.\n\nSlightly related, I see this as my ideal computing environment, with Fortran, C, or C++ being used for performance critical areas.\n\nMarsh, B. D., Williams, T. M., & Mathieson, G. L. (1990). The Use of Mixed Prolog/Fortran for Battle Simulation. The Journal of the Operational Research Society, 41(4), 311–318. The Use of Mixed Prolog/Fortran for Battle Simulation on JSTOR\n\nBlockquote\n\nA mixed-system architecture is developed, in which Fortran and Prolog are each used to best advantage, and which allows discrete events to be combined with pseudo-continuous processes. The architecture is analysed in terms of a number of performance metrics. The paper concludes that the mixed architecture is feasible, practicable and brings a variety of benefits."
    }
}