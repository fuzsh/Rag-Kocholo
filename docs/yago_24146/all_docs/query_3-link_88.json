{
    "id": "yago_24146_3",
    "rank": 88,
    "data": {
        "url": "https://www.evamariakiss.de/tutorial/matlab/",
        "read_more_link": "",
        "language": "en",
        "title": "MATLAB Tutorial - An introduction for beginners",
        "top_image": "https://www.evamariakiss.de/include/favicon-32x32.png",
        "meta_img": "https://www.evamariakiss.de/include/favicon-32x32.png",
        "images": [
            "https://www.evamariakiss.de/tutorial/matlab/images/matlab_ide.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/octave_ide.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_help.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_hello.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/matlab_ide_2.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_variables.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_whos.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_string.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_output.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_input.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_inputdlg.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_ifelse.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_while.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_while_1.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_for.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_vec_1.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_vec_2.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_random.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_vec_3.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_mat_1.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_mat_2.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_mat_3.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_mat_4.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_table_1.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_table_2.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_function_1.svg",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_function_2.svg",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_plot_1.svg",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_plot_2.svg",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_surf_1.png",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_surf_3.svg",
            "https://www.evamariakiss.de/tutorial/matlab/images/population_growth.svg",
            "https://www.evamariakiss.de/tutorial/matlab/images/mat_symb1.png",
            "https://www.evamariakiss.de/images/logo_hskl_2.png"
        ],
        "movies": [
            "https://www.youtube.com/embed/_sf3FYpaO9E"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Prof. Dr. Eva Maria Kiss"
        ],
        "publish_date": "2020-12-30T08:00:00+08:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../../include/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "MATLAB is a commercial computing environment developed by MathWorks, targeted specifically at numerical computations and simulations, that uses a proprietary language, also called MATLAB. MATLAB offers functionality for creating and manipulating arrays and matrices, for plotting functions and data and for implementing mathematical algorithms that solve physical and engineering problems. This tutorial gives an introduction to the MATLAB environment and language as needed by engineers for learning Numerical Methods. Basic MATLAB syntax (variables, input, output, vectors, matrices, functions, plotting) is illustrated using small examples that are saved as MATLAB scripts. All examples will also run in the open source software Octave.\n\n1 Install the Environment\n\nIn order to run MATLAB scripts, a MATLAB installation is required. A test version can be downloaded from Mathworks website. Alternatively, you can download and install Octave, which is free. In the following we use the term integrated development environments (IDE) and refer to \"MATLAB IDE\" and \"Octave IDE\". After installation, the IDE's look similarly as in the screenshots below.\n\nIn MATLAB, the default window layout displays file browser, workspace, editor and command window in a 4x4 grid, and be configured and aligned differently using the Layout menu.\n\nIn Octave, the default window layout organizes file browser, workspace and command history in the left part of the main view and command window, documentation, editor and variable editor in the right part of the main view. You can see either the command window or the editor, but not both at the same time, which is an inconvenience. When running scripts, it is often required to see editor and output next to each other. The only way to do this, is by undocking the command window, resizing it, and placing it on top of the main window.\n\nA MATLAB program can be created in different ways:\n\nInteractive mode:\n\nMATLAB can be used in interactive mode, by entering commands directly in the command window. Output is also shown in the command window. Interactive mode is useful for tutorials and for testing small program parts.\n\nMATLAB Script:\n\nLarger MATLAB programs are collections of MATLAB scripts stored in a common folder. The folder can be anywhere on your computer but must be added to the MATLAB path by using HOME > Set Path Menu.\n\nMATLAB LiveScript:\n\nMATLAB LiveScripts are a special type of scripts with extended documentation features. While an .m-file contains source code and comments and displays output in the command window and figures in the figure editor, a LiveScript (.mlx file) offers more functionality. In a LiveScript, user input, source code and output including graphics are displayed in one single interactive window. The effect of a change in the source code can be seen directly and immediately in the output results (graphics, text output, etc.). While a pure code script is more efficient when the task is to solve a specific problem, MATLAB LiveScripts can be used as teaching tool and for demonstration purpose, since they convey a better understanding of the steps, commands and functions used to solve a problem.\n\nA MATLAB script is a text file with the extension .m, that contains the statements and comments of the program. MATLAB script names may contain only letters, numbers and subscript. Valid names are for example myscript1.m, myscript2.m, myfun1.m, myfun2.m.\n\nMATLAB scripts are created using the menu items in the EDITOR > FILE menu (New, Open, Save etc.) and are executed using the menu items in the EDITOR > RUN-Menu (Run, Run and Advance, Run Section).\n\n2 First Lines in MATLAB\n\nTop\n\nMATLAB statements are expressions or assignments, variable declarations , operations with variables, input- or output-instructions, control flow statements or function calls, that perform specific tasks (plots, mathematical computations etc.). MATLAB statements can be terminated with a semicolon or not. If terminated with a semicolon, a statement will not generate any output in the command window.\n\n2-1 Commands for clearing, formatting, help\n\nBefore starting to explore the MATLAB language, we learn some commands that are needed frequently to keep a clean and organized workspace and command window.\n\nclear â Clears workspace variables. You can delete selected variables or all variables. Useful when you run multiple scripts that use the same variable names.\n\nclc â Clears command window (instructions and output). Useful when you want to start over with your script and do not need previously used commands or output.\n\nclose all â Closes all open figures.\n\nformat compact â Compactifies the command window output. More generally, the format command is used for formatting. For example format long changes the display of all floating point numbers in the command window to double precision. format short e is used for short scientific formatting.\n\nhelp â If you type help followed by the name of a command or function, the corresponding help page is displayed.\n\n\"Hello World\" Program in MATLAB\n\nA \"Hello World\" program is the smallest executable program in a programming language and prints the text \"Hello World\" to default output (here: the command window). We do it first in interactive mode and then in a script.\n\n2-2 Interactive mode\n\nTop\n\nIn interactive mode, we use only the command window. Statements are entered next to the command prompt (indicated by >>) and executed using ENTER.\n\n2-3 Script mode\n\nTop\n\nIn script mode, we first create a new script with the name \"test_hello.m\", then type the MATLAB statements below in the script file and save it, and finally execute the script by clicking the \"RUN\"-Button.\n\nTop\n\nComments in MATLAB start with a \"%\"-symbol followed by text. Comments are used for documentation purpose, they are not executed by the system. Two percent-symbols \"%%\" mark a section. Sections can be executed separately using the RUN SECTION-Button.\n\n%% Section 1 % Comment 1: This is the first comment for section 1. text = 'Let''s start simple' % Here we assign a value to the variable named text %% Section 2 % Comment 2: This is the first comment for section 2. a = 10 % Here we assign a value to variable a b = 20 % Here we assign a value to variable b\n\n2-5 Variables and data types\n\nVariables are named memory spaces that store the data of your program. MATLAB variables are declared by simply assigning a value to them. The data type (number, string, array etc.) is assigned automatically by MATLAB. For example, all numbers (integer, floating points) are stored internally as double precision floating point numbers. Knowing the data type is important, since the data type determines the set of operations that you can perform with your variables. For example, you can add two numbers or concatenate two strings with the \"+\"-operation as in the example below, but it is not possible to add a number to a string: sum = a + \" apples\" is an invalid statement. Before appending a number to a string, it must be converted to a string using num2string: sum = num2string(a) + \" apples\" is a valid statement.\n\nCode explanation:\n\nLine 2: Declare two variables a, b by assigning values to them. Since the declarations are terminated with semicolon, output of the variables to the command window is suppressed.\n\nLine 3: Add the two variables (actually, their values) and store the result in the variable sum.\n\nLine 4: Declare two string variables s1, s2.\n\nLine 5: Concatenate the strings to form a new string.\n\nLine 6: Replace the \"+\"-character with the string ' or '.\n\nData types\n\nMATLAB supports different data types, that are represented by classes:\n\nNumerical data types: int, single, double\n\nBoolean data types: logical\n\nString data types: string, char\n\nIn order to find out the exact data type and size of your variables, use the commands whos, class. With whos, you can find out size and type of workspace objects. With class, you can find out the data type of a variable.\n\nString variables\n\nString variables in MATLAB can be either of class \"string\" or of class \"character array\". When you create a string using single quotes, it is stored as character array. When you create a string using double quotes, it is stored as a string. A character array is a sequence of characters, just as a numeric array is a sequence of numbers. The String class provide a set of functions for working with text as data.\n\n3 Input and Output-Commands\n\nTop\n\nData stored in variables can either be viewed in the workspace or displayed in the command window. While the workspace shows the raw variable values, the command window is used for formatted output.\n\n3-1 Output to command window\n\nThere are three ways to output variable values to command window.\n\nType the name of a variable in a new line, with no terminating semicolon. In an assignment statement, omit semicolon at the end of a statement. The content of the variable then is displayed in the command window.\n\nUse disp()-function. This function takes as argument a variable / vector / matrix and displays it, omitting the name of the variable.\n\nUse fprintf()-function. This function builds a formatted output by using placeholders for the variables to be inserted. In our example, the value of variable a will be inserted in the place indicated by the first \"%d\", the value of variable b will be inserted in the place indicated by the second \"%d\" etc.\n\n3-2 Input with input()\n\nWhen presenting a MATLAB script to non-technical users, it may be helpful to let them enter configuration parameters as input from the command window or an input dialog. Input entered in the command window can be stored in variables using the input()-function.\n\nInput dialog\n\nAn input dialog as shown below is created using the MATLAB-function inputdlg. We pass four arguments to the function:\n\nprompt -- the labels of the input fields\n\ndlgtitle -- the title of the dialog\n\nwindowsize -- the size of the window\n\ndefinput -- specifies the default value for each edit field. The definput argument must contain the same number of elements as prompt.\n\nThe function returns an array of strings \"answer\", that contains the values entered in the edit fields.\n\n3-3 Input from files\n\nMany applications require to read tabular data from *.txt, *.csv or *.xlsx files, or binary data (images). For this type of requirement, MATLAB offers functions such as inputdata, readtable and load. They all require as input a file, specified by its name including the path, and return an internal representation of the data, either as table or as struct or array. If only the filename is specified, MATLAB searches for a file in the same folder where the script is placed. Alternatively, it is possible to specify the full path to the file, for example 'C:\\temp\\accidents.csv'. Note that when importing from Excel, the row and column headers should be specified correctly. Also, it is important to use the correct delimiters for the decimal point, in a computer with German settings, this will be comma (,), else dot (.).\n\nA = importdata(filename, delimiter) loads data into array A. This function is used for importing tabular data as well as images.\n\nT = readtable(filename, options) reads tabular data from a file and stores it internally in a table object. This function is useful when you have spreadsheet-like data as in an excel-sheet, where each column has its own data type. Column headers are imported (or not) by specifying the options 'ReadVariableNames' and 'PreserveVariableNames'.\n\nT = load(filename) loads variables or data from a file into workspace: if the file is a *.mat-file, then in loads the variables from this file, else if it is a text-file, it loads the data into a double-precision array.\n\nWhen developing a numerical method, it is often required to convert the table object returned by importdata into an array or extract single columns or rows of the imported table into a column vector. This is done by using the function table2array as in the next example.\n\n4 Control flow\n\nTop\n\nControl flow statements are used to determine which block of code to execute at run time (conditional statements, if-else) or to execute a block of code repeatedly (while-loop, for-loop). In MATLAB, these multiline statements are terminated using the keyword end.\n\n4-1 Conditional statements\n\nConditional statements are used to control which of two or more statement blocks are executed depending on a condition. In MATLAB, as in most programming languages, they are implemented using the if-else-syntax. The condition after the if or elsif-keyword can be enclosed in round brackets, this is optional.\n\nSwitch-case statements execute one of many different cases based on the evaluation of a variable. Switch-case can be used for performing a specific task according to user input. Different from C, Java or other programming languages, in MATLAB it is not required or allowed to terminate a case with break.\n\n4-2 Loops\n\nLoops are used for program flow control, so that statements can be executed repeatedly, as long as an execution condition is met. MATLAB has two loop commands: while loop and for loop. For additional control of the loop execution, the commands break and continue are used: break allows you to exit a loop if a given condition is fulfilled, with continue you can skip loop steps depending on a condition.\n\nFor-loops have a more compact syntax and are used frequently when working with tables and matrices. While-loops are used when more general loop conditions apply, for example input validation: as long as an user does not enter a required input format, he is asked to repeat his input.\n\nWhile Loop\n\nA while loop allows statements to be executed repeatedly, as long as an execution condition is met. The variable that is queried in the condition must be explicitly incremented in the body of the loop. If there is no increase in the variable, the loop is executed endlessly.\n\nFor Loop\n\nA for loop is a counting loop that defines a start and end condition for a counting variable (loop counter) and repeats a statement or a group of statements for a number of loop passes as specified by the loop counter. The loop counter is increased by 1 (or another step size) after each loop pass.\n\n5 Vectors\n\nTop\n\nVectors are one-dimensional arrays that store data of the same data type (numerical or strings). Matlab vectors can be stored in row or column format. For example, x = [1 4 9] will be a row vector, and x = [1; 4; 9] will be a column vector.\n\nElements of a vector are accessed using an index that starts at 1. For example, to access element i in vector x, we write x(i).\n\nCreate vectors\n\nVectors are created in different ways: by listing their elements explicitly in square brackets, using special MATLAB functions such aus zeros(), ones(), linspace() or using for-loops.\n\nRandom numbers\n\nAn important usecase for creating vectors is that of generating pseudo-random numbers. This can be done using the functions rand, randi, randn. rand creates uniformly distributed random numbers of data type double, by default in the interval (0,1), and depending on the provided arguments, you can generate a matrix, a column or row vector, or a single number. randi creates uniformly distributed random integers, as matrix, column or row vector.\n\nVector operations\n\nMATLAB supports vector operations of two kinds: mathematical operations according to the rules of linear algebra (transposition, addition, multiplication) and array-type elementwise operations. Elementwise operations are distinguished from vector operations by usage of the dot operator (.).\n\nx * y means matrix multiplication, and works only if x is a 1xn row vector and y is a nx1 column vector.\n\nx .* y means elementwise multiplication and works only if x and y are both row (or column) vectors of same size.\n\nVector and elementwise operations are the same for addition and subtraction, so the operators .+ and .- are not used. Since vectors actually are a special type of matrix, these operations are the same as the described below for matrices.\n\n6 Matrices\n\nTop\n\nData of MATLAB programs are stored in one- and multi-dimensional arrays (e.g. vectors, matrices) if the elements are of same data type, in cell arrays that can contain data of varying types and sizes, or in tables, if they are spreadsheet-like data with columns of same data type. A good understanding of matrices is important, since variables and vectors are actually a special case of matrices.\n\nCreate matrices\n\nMatrices are created in different ways: by enumerating their elements explicitly in square brackets, using functions, or using for-loops.\n\nCreate matrix using enumeration\n\nWhen declaring a matrix by explicit enumeration, row elements are separated by a space and columns are separated by semicolon.\n\nCreate matrix using functions\n\nMany mathematical problems require to use matrices initialized with specific values, such as the identity matrix. In MATLAB, the declaration of these matrices is done using MATLAB functions such as zeros - initializes a matrix with all zeros, ones - initializes a matrix with all ones, rand - creates a matrix with random values, or eye - creates the identity matrix.\n\nCreate matrix using for loops\n\nThe creation of a matrix using for loops is required when the size and even the element values change dynamically depending on some parameters. In this case, it is recommended to preallocate the maximal required memory using the zeros()-function.\n\nm = 3; n = 4; % m rows and n columns A = zeros(m, n); % create a mxn matrix initialized with zeros for i=1:m % loop over the rows for j=1:n % loop over the columns A(i,j) = i*j; % end end disp(A)\n\nElements of a matrix are accessed using a row index and a column index that both start at 1. For example, to access element in row i and column j in a matrix A with m rows and n columns, we write A(i, j). Element with row-index 1 and column-index 1 is accessed with A(1, 1), etc.\n\nMatrix operations\n\nMATLAB supports matrix operations of two kinds: mathematical operations according to the rules of linear algebra (transposition, addition, multiplication) and array-type elementwise operations. Elementwise operations are distinguished from matrix operations by usage of the dot operator (.): A * B means matrix multiplication, A .* B means elementwise multiplication, A.^2 means that each element of the matrix is taken at power 2, etc. Since matrix and elementwise operations are the same for addition and subtraction, the operators .+ and .- are not used.\n\n7 Tables\n\nTop\n\nMATLAB tables are data structures used for storing and manipulating spreadsheet-like data, with named columns (\"variables\") and possibly row names. Different columns may have different data types, but the elements of one column must have the same data type. Elements can be accessed via their index as well as via row and column names. The table data type is used mainly for statistical tasks, for example, when you need to evaluate statistical properties (mean, standard deviation, min, max) of the variables. Tables are also useful for creating nice tabular representations of data obtained from measurements or from testing a numerical method.\n\nTables are created from column vectors using the table()-function with different arguments, from matrices using the function array2table(), or by importing data from a spreadsheet or csv-file using readtable(). The properties of a table T such as DimensionNames, VariableNames, RowNames can be found out and set by using the T.Properties-syntax, as shown in the following examples.\n\nCreate tables from column vectors\n\nOne way to create a table is to use already existing vectors, which must be column vectors and must have the same number of elements. The table created in this way will automatically have the name of the vectors as column names.\n\nModify tables\n\nTables can be modified in various ways: you can add / remove / replace rows or columns, extract data, calculate statistical values for the table's variables (columns), plot the the table's variables..\n\n8 Functions\n\nTop\n\nA function is a reusable piece of code that is executed only when called. It is defined once and can be called multiple times. Functions may have parameters and also may return parameters. The most frequent application of functions is to use predefined MATLAB-functions such as plot (for plotting) or linspace for creating equidistant vectors, or solvers such as ode45. However, when writing larger MATLAB programs, you should structure them using self-defined functions, or, in a more advanced setting, object-oriented programming and classes.\n\nUser-defined functions can be defined in multiple ways:\n\nGlobal function: Function is stored in a separate m-file.\n\nLocal function: Function is stored inline in the script where it is called.\n\nAnonymous function: Function is defined as an anonymous function in the script where it is called.\n\nImportant: While the variables of a MATLAB script are displayed in the workspace, the variables used in a function are local variables and not visible in the workspace. Global functions must have an unique name, must be on the MATLAB path and can be used in any other script. Local and anonymous functions are visible only in the script in which they have been defined, their name must be unique within the file in which they have been defined.\n\n(1) Function stored in a separate m-file\n\nIn most cases, it is recommended to put the code of a function in its own function script. A function script is a MATLAB m-file that contains only the definition of a single function and cannot be executed as a \"normal\" script. Function and function script must have the same name, for example a function with name myfun1 must be stored in a function script with name myfun1.m. By storing a function in its own script, the function can be used by any other script in the MATLAB path by calling it with specific arguments.\n\nDefining a function\n\nFunctions begin with the keyword \"function\", followed by the statement\n\noutputargs = function_name(inputargs)\n\nand end with the keyword \"end\". The actual function statements that define the relationship between the input arguments and the output arguments are written in the function body between the first line and the last line. In order to display the general syntax of a function definition and generate a template for a new function, we use the New > Function-Button in the EDITOR-Tab. This creates a new function script \"untitled.m\" for the function \"untitled\" with two generic input arguments and two generic output arguments. Starting with this template, we create our own functions by changing name, arguments and code as needed.\n\nfunction [outputArg1,outputArg2] = untitled(inputArg1,inputArg2) %UNTITLED Summary of this function goes here % Detailed explanation goes here outputArg1 = inputArg1; outputArg2 = inputArg2; end\n\n(2) Local functions\n\nFunctions that will be used only in one script can be stored as local functions inline in that script, and should be placed at the end of the script. Local functions are visible only in the script in which they have been defined and cannot be used in other functions. Why use local functions at all, since the primary goal of a function is to make it reusable? There are situations when you develop new solvers for numerical methods and program variants of the same function, so you need to use it only locally in a test setting and also want to reuse the function name.\n\n(3) Anonymous functions\n\nAn anonymous function is a function that is not stored in a script file, instead it is associated with a variable of type function_handle. Informally, it is an inline function that is written in just one line with the help of the @-symbol. Anonymous functions are used for functions whose defining statement can be written in just one line.\n\nGeneral syntax is <function_name> = @ (<param_list>) ( <computation>).\n\nExample: Use anonymous functions\n\nIn this example three mathematical functions are defined as anonymous functions.\n\nLine 1-3: Define function f(x) = sin(2πx) and then calculate the function values at points x = 1 and x = 2.\n\nLine 4-8: Define polynomial p(x) = 1 + 2x + x2 and then calculate the function values at the equidistant points x = [0, 0.5, 1.0, 1.5, 2.0]. Since in the definition of the polynomial the dot-operator is used, it is allowed to pass a vector as argument to the function.\n\nLine 8-11: Define a function of two variables u(x,y) = 25xy, where x and y are allowed to be vectors of same size. Then, create two vectors x, y using linspace and calculate the function values z for these vector arguments.\n\n% Example 1: Sin-Function f = @(x) sin(2*pi*x); y1 = f(1); y2 = f(2); % Example 2: Polynomial p = @(x) (1 + 2.*x + x.^2); x = 0:0.5:2; % x = [0, 0.5, 1.0, 1.5, 2.0] y = p(x); % Example 3: Function with two variables u = @(x,y)(25.*x.*y); x = linspace(0,1,10); y = linspace(0,2,10); z = u(x, y);\n\n9 Plotting in MATLAB\n\nTop\n\nWhen solving a mathematical problem such as an ordinary or partial differential equation numerically, it is important to be able to visualize the solution and the intermediate steps easily, as this helps the intuitive understanding of the physical problem. MATLAB supports graphics and plotting via number of functions for creating different types of line plots (plot, area), statistical plots: (histogram, boxchart, scatter), surface and mesh plots (surf, mesh, contour, quiver).\n\nMATLAB plots are organized in figures and created with the figure command. The figure-command allows to specify options for the creation of the figure window, such as position and title. If the command figure is not specified, a figure is created by default.\n\n9-1 Line plots with plot\n\nThe simplest plot is the line plot of a function y = f(x), using the function plot(). The plot-function has the general syntax plot(X,Y), that creates a line plot of the data in Y versus the corresponding coordinate values in X. X and Y must be vectors or matrices with matching size. For example, in order to create a plot of y = f(x) = x^2 for the discrete values X = [1,2,3,4,5] and Y = [1,4,9,16,25], we write\n\nplot([1,2,3,4,5], [1,4,9,16,25])\n\nor simply\n\nplot([1,4,9,16,25])\n\nAdvanced usage of plot() enables to use other input parameters and specify options specified as name-value-pairs.\n\n9-2 Line plots\n\nIn this example we explore some of the plot options and display the sin and cos-function on the same axis.\n\nUsed functions: figure, plot, title, legend, xlabel, ylabel.\n\nUsed commands: hold on, grid on.\n\nLine 2: Create a discretization of the interval [-2*pi, 2*pi] using an equidistant vector with 51 data points.\n\nLine 3 and 4: Define the y-values for the functions to be plotted.\n\nLine 5: Create new figure with width 700, heigth 500 at position (50, 50).\n\nLine 6: Plot the sin-function given by the coordinate vectors x and y1.\n\nLine 7: hold on retains plots in the current axes so that new plots can be added\n\nLine 8: Plot the cos-function given by the coordinate vectors x and y2.\n\nLine 9-11: Specify a title, legend and labels for the axes.\n\n9-3 Subplots\n\nIn MATLAB, plots are displayed on the same figure but on different axes using the subplot-function. The command subplot(m, n, p) divides the current figure in a grid of plots as specified by its parameters: m rows, n columns and the next plot at position p.\n\nIn this example we plot the functions y1(x) = sin(x)*exp(x) and y2(x) = x*cos(x) on the same figure, so that the first plot is above the second plot. With the command subplot(2,1,p) we create a grid with 2 rows and 1 column, plus new axes at position p = 1,2.\n\nLine 5: Create subplot for upper plot at position p = 1\n\nLine 6-9: Create plot that will be placed at subplot p = 1. We specifiy linewidth, color and marker edge color of the plot using name-value pairs. Code line 6 is split using ellipses (...).\n\nLine 10: Create subplot for lower plot at position p = 2\n\nLine 11-14: Create plot that will be placed at subplot p = 2.\n\n9-4 Figure and plot handle\n\nFigures, plots and axes can be accessed and modified through their handles. A figure handle is obtained using the command gcf, as in line 3 of the example. Using the handle fig, we can change the default properties of the figure, such as color or position. In order to find out the properties of the figure handle, just type fig followed by a dot, then the autocompletion will show all the available properties.\n\nSimilarly, a plot handle is obtained by assigning a name to the plot. For example, h = plot(x,y) makes the plot accessible through the name h. By using hold on, the plot is not displayed immediately, we can change plot properties as needed and then use hold off to show the plot.\n\nx = linspace(0, 10, 20);y = x.^2; figure fig = gcf; % get current figure handle fig.Color = [1.0 1.0 1.0]; fig.Position = [50, 50, 700, 400]; subplot(1,2,1) % First subplot h1 = plot(x,y); % current plot handle hold on h1.Marker = '+';h1.LineWidth = 2; hold off subplot(1,2,2) % Second subplot h2 = plot(x,y); hold on h2.Color = 'r';set(h2, 'Marker', '*'); hold off\n\n9-5 Surface plots\n\nTop\n\nThe surface plot of a function z = u(x,y) is created using surf(). The surf-function has the general syntax surf(X, Y, Z), that creates a 3D height plot of the data in Z versus the coordinate values in X and Y.\n\nX, Y and Z must be matrices with matching size. The two matrices X and Y for the grid are obtained from the coordinate vectors for the x and y axis using meshgrid. If x is a vector with m elements and n is a vector with n elements, meshgrid(x, y) creates two nxm matrices X and Y: X replicates x as row vector n times, and Y replicates y as column vector m times.\n\nThe next example shows the basic usage of meshgrid and surf and the involved matrices X, Y, Z.\n\nExample 1: 3D-Plot with surf\n\nIn this example, we create a surface plot of z = u(x, y) = x^2 - y^2 for x- and y-coordinates given as vectors.\n\nLine 1-2: Create coordinate vectors x and y.\n\nLine 1-2: Coordinate vectors x and y are used as input to create the matrices X and Y with meshgrid().\n\nLine 4: Calculate 3x4 matrix Z containing the function values.\n\nLine 5: Plot surface using surf.\n\nExample 2: 3D-Plot with surf\n\nWe plot the same function u(x,y) = x^2-y^2 over a rectangular area [a, b] x [c, d] and enhance the plot with details: title, axis labels, colorbar. We also show the contours and gradient vector field using the functions contour and quiver. The gradient of a function u(x,y) at a point is the directional derivative of the function; the gradient at all points of the domain defines a vector field that can be plotted using the quiver-function.\n\nLine 1: Define u as anonymous function.\n\nLine 2-3: Define rectangle [a, b] x [c, d] and number of data points nx= 10 and ny = 20 for the discretization.\n\nLine 4: Create evenly spaced x and y-coordinate vectors.\n\nLine 5: Generate the grid matrices X, Y from the evenly space x- and y-coordinates.\n\nLine 6: Calculate matrix Z containing the function values.\n\nLine 7: Calculate the gradient [px, py] of the function\n\nLine 9-13: Create surface plot of the function u.\n\nLine 14-20:Create 2D-plot of function with contour lines and gradient vector field.\n\n9-6 Advanced plotting\n\nTop\n\nThis section shows some advanced plotting that can be used in the context of solving ordinary differential equations (ODEs). Firstly, we analyze the qualitative behaviour of the solutions of a population growth model by visualizing them.\n\nVisualize solutions of a population growth model\n\nThe population growth y(t) of an organism is modeled using the logistic equation\n\nODE: y' = c*y - c/k*y^2\n\nIC: y(0) = y0\n\nwhere c > 0 is the growth rate of the population and k > 0 is the carrying capacity, that is, the maximum population that the environment can sustain. In our specific example we set the parameters to c = 1.3 and k = 40. This ordinary differential equation is solved numerically for a set of initial conditions using MATLAB's ode45 solver.\n\n10 Symbolic computations\n\nTop\n\nThe Symbolic Math Toolbox is used to analyze and solve mathematical problems analytically, for example to calculate derivatives, partial derivatives and integrals of function expressions, to solve equations, or to plot functions.\n\nThe symbolic mode is started by typing the keyword syms followed by the name of the symbolic variables, for example:\n\nsyms x syms x y syms x y z\n\nSymbolic computations can be done interactively in the command window or in a script. Derivative, integral and gradient of functions are calculated symbolically using the functions diff, int and gradient. For symbolic plots there are a number of functions such as fplot, fsurf and fcontour, their name starts with \"f\" and they all work on symbolic function expressions.\n\nIf you mix symbolic and numerical computations in a MATLAB script, it is useful to know that symbolic functions can be transformed to function handles using matlabFunction. In the following example we calculate the symbolic exact derivative of a function and then transform it to an anonymous function, so that we can use it for further numerical computations.\n\nsyms x % Declare symbolic function f depending on x f = sin(2*x)*exp(2*x) % Determine symbolic derivative of f using diff df = diff(f) % this df is a symbolic function % Create anonymous function for derivative df = matlabFunction(df) % now df is a function handle\n\nMATLAB Quizzes\n\nTop\n\nFurther learning materials include a YouTube Video and two MATLAB Quizzes. The YouTube-Video gives additional insight in how to learn MATLAB basic commands using this tutorial in a step-by-step way.\n\nTest your basic understanding of MATLAB Development Environment and language syntax by taking the MATLAB Quizzes . Each quiz consists of ten questions, each with three to four possible answers, and there may be multiple correct or incorrect answers. Check those answers that you think are correct. If you have answered at least 50% of the answers correctly, you are prepared to take MATLAB a step further, for example by taking the course \"Numerical Methods\". Have fun!\n\nTools & References\n\nTop\n\nThis tutorial gives an introduction to MATLAB basic syntax. Starting here, there is much more to be learned and done. Further interesting topics are: write MATLAB LiveScripts, use the GUI Editor to create graphical user interfaces, write larger programs using classes and inheritance, develop your own toolbox.\n\nMATLAB Help: https://de.mathworks.com/help/matlab/\n\nMATLAB Language Fundamentals: https://de.mathworks.com/help/matlab/language-fundamentals.html\n\nOctave Software: https://www.gnu.org/software/octave/\n\nOctave Manual: https://octave.org/doc/v6.1.0/\n\nThis Tutorial as PDF-File: MATLAB Tutorial - First steps in MATLAB _ Prof. E. Kiss, HS KL.pdf\n\nThis Tutorial in German: MATLAB Tutorial - Der Einstieg fÃ¼r AnfÃ¤nger"
    }
}