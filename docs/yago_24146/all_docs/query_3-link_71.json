{
    "id": "yago_24146_3",
    "rank": 71,
    "data": {
        "url": "https://www.cfm.brown.edu/people/dobrush/am33/Matlab/index.html",
        "read_more_link": "",
        "language": "en",
        "title": "MATLAB Tutorial for the first in Applied Differential Equations",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.cfm.brown.edu/people/dobrush/am34/Matlab/MatlabLogo.png",
            "https://www.cfm.brown.edu/people/dobrush/am33/Matlab/figures/Matlabscreen.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Many mathematical problems can be solved approximately by numerical computations. The computation steps operate on numbers, which are stored internally in floating-point representation. This representation has the drawback that neither computations nor solutions are exact due to rounding errors. In general, numerical algorithms find approximate solutions as fast as possible. Often such solutions are the only way to handle a mathematical problem computationally, in particular if there is no “closed form” solution known. (The most popular example for this situation are roots of polynomials of high degrees.) Moreover, approximate solutions are useful if exact results are unnecessary (e.g., in visualization).\n\nCleve Moler introduced the first version of matlab (short for \"MATrix LABoratory\") to a group of Stanford University students in 1979. In its original form, it allowed scientists to chain together calls to optimized Fortran routines using an interactive text-based interpreter. Jack Little and Cleve Moler, the cofounders of MathWorks, recognized the need among engineers and scientists for more powerful and productive computation environments beyond those provided by languages such as Fortran and C. In response to that need, they combined their expertise in mathematics, engineering, and computer science to develop matlab, a high-performance technical computing environment. matlab combines comprehensive math and graphics functions with a powerful high-level language. The heart of the matlab engine is its kernel, which is implemented in C++, while interfacing with programs written in other languages, including C, C++, Java, Fortran, and Python.\n\nThere is a certain level of compatibility that allows us to write and run most programs seamlessly both in matlab and Octave. Just as matlab has its toolboxes, Octave has a richful set of functions available through a project called Octave-forge (see the website octave.sourceforge.net). This function repository grows steadily in many different areas. Some functions we use in this book don’t belong to the Octave core, nevertheless they can be downloaded by the website octave.sourceforge.net.\n\nmatlab program and script files always have filenames ending with \".m\"; the programming language is exceptionally straightforward since it has much in common with popular programming language C. matlab prompt always starts with a double arrow (>>), which tells you that the software is waiting for your input. In future, we will drop matlab prompt (>>) and write codes directly within a special box. However, in this introduction we show all details. To get help, simply type:\n\n>> help\n\n[a long list of help topics follows]\n\nand for specific commands:\n\n>> help fft [a help message on the fft function follows].\n\nHelp is available through the online manual – select the `Product help’ entry from the Help menu on the main window. You can use the navigator to search for help, or you can use the index in the Contents window to learn about matlab features.\n\nBy typing semicolomn (;) at the end of your command, matlab surpresses windows output; otherwise, the output is sent to the screen. To quit matlab session, simply type quit or exit on Matlab prompt, or click at the end red button of windows right upper corner. Note that you don’t need to type a semicolon at the end of the line. If you do put a semicolon, the operation will be completed but matlab will not print the result. This can be useful when you want to do a sequence of calculations. Special numbers, like `pi’ and ‘i’ don’t need to be capitalized. But beware -- you often use \"i\" as a counter in loops – and then the complex number i gets re-assigned as a number. You can also do dumb things like pi=3.14. Later you can reset these special variables to their proper definitions by using clear i or clear pi.\n\nThe Command History window keeps track of everything you have typed. You can double left click on a line in the Command history window to repeat it, or right click it to see a list of other options. If you screw up early on in a sequence of calculations, there is no quick way to fix your error, other than to type in the sequence of commands again. You can use the ‘up arrow’ key to scroll back through a sequence of commands. If you are really embarrassed by what you typed, you can right click the command window and delete everything (but this will not reset variables). You can also delete lines from the Command history, by right clicking the line and selecting Delete Selection. Or you can delete the entire Command History. You can get help on matlab functions by highlighting the function, then right clicking the line and selecting Help on Selection.\n\nWhen you start matlab, you should see the Graphic User Interface (GUI) shown below. The various windows may be positioned differently on your version of matlab – they are ‘drag and drop’ windows. You may also see a slightly different looking GUI if you are using an older version of matlab.\n\nReturn to computing page for the first course APMA0330\n\nReturn to computing page for the second course APMA0340\n\nReturn to Matlab tutorial for the first course APMA0330\n\nReturn to MuPad tutorial for the first course APMA0330\n\nReturn to MuPad tutorial for the second course APMA0340\n\nReturn to the main page for the course APMA0340\n\nReturn to the main page for the course APMA0330"
    }
}