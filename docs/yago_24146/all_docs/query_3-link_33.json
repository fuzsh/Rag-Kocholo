{
    "id": "yago_24146_3",
    "rank": 33,
    "data": {
        "url": "https://or.stackexchange.com/questions/4170/matlab-vs-python-in-industry",
        "read_more_link": "",
        "language": "en",
        "title": "MATLAB vs. Python in industry",
        "top_image": "https://cdn.sstatic.net/Sites/or/Img/apple-touch-icon@2.png?v=2c3f77762af2",
        "meta_img": "https://cdn.sstatic.net/Sites/or/Img/apple-touch-icon@2.png?v=2c3f77762af2",
        "images": [
            "https://www.gravatar.com/avatar/ef4feaacbcbd03edc4fb721854ad3f75?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/26b42f432940ab947c0b9ec328c15f77?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/VDrH9.png?s=64",
            "https://i.sstatic.net/Z55la.png?s=64",
            "https://i.sstatic.net/EUCPU.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/ecfa50e1785035a2bd035652104ebbc8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/eb02630d9fb632c9b1e45303bd665cd2?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/37cbdddd7da5786a3e401ba91001063e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/29bbeb9d92a3bd39b9182a8d8fef360a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/e0c6a0bb6585fe3acae43ae03c66cc49?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/a81d7b31c1f8568f60f131818db12606?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/5861dc7ab2930b6922dbdf980f739242?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh3.googleusercontent.com/a/AATXAJxr_v5ToLkx1I4_-iBeVg0PD-DvmUFr9Xjdxjw6=k-s64",
            "https://www.gravatar.com/avatar/6f059eca04200cdc1b82a3293757f594?s=64&d=identicon&r=PG",
            "https://or.stackexchange.com/posts/4170/ivc/6bd8?prg=d8c163ef-04d3-45bb-9a75-c6b4a039df58"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-05-17T16:22:23",
        "summary": "",
        "meta_description": "I am a beginning PhD student in math, and I would like to focus on optimization. I am learning programming for the first time, and I have written out some rudimentary optimization algorithms in both",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/or/Img/favicon.ico?v=52d06cae23d7",
        "meta_site_name": "Operations Research Stack Exchange",
        "canonical_link": "https://or.stackexchange.com/questions/4170/matlab-vs-python-in-industry",
        "text": "Regardless of what completes the phrase \"Python vs ...\", the answer is always going to be Python.\n\nVery few people who are serious about using optimisation in production use MATLAB, and the ones who do can't wait to move away from it.\n\nAs to why, there are plenty of reasons. MATLAB is:\n\nlicensed\n\nclosed source\n\nnot object-oriented friendly, so it's a very bad choice for complex software\n\nhard to distribute computations, and has a very expensive license for doing so\n\nvery hard to interface with\n\nnot scalable\n\nnigh-impossible to hire professional programmers for\n\nSeriously, if you want to be able to use your own code after your PhD, don't use commercial packages.\n\nFrom a programming perspective, I have personal experience in the bottlenecks. I wrote the very first version of my solver in MATLAB, and I could solve problems of ~5 variables in reasonable time. Moving to C++ increased that to 200 variables. Rewriting the solver in C++ once I had experience increased that to 100,000 variables, and hiring professional developers increased that to >1,000,000 variables.\n\nWhat's interesting here is that with the experience I have now, 10 years later, I know there's no way I could have ever scaled our software beyond 100 variables in MATLAB, but I could have in Python.\n\nNikos Kazazakis and EhsanK have given you great reasons for using Python. I will focus on the point from you about needing to use an additional package/library in Python for matrix and vector operations. In industry projects you will encounter many challenges and things you want to do, but you don't want to (and shouldn't) implement. Currently I work on a route planning software, most of what I do is sadly not core optimization work, but everything needed to making it useful for customers. Make imports from various data sources, integrating the data into objects (doing this in a non object oriented language would be annoying), make your product available via an API, and so on. This is to say I use a lot of things that come not out of the box. Adding numpy to that list of imports for the optimization work won't break the camel's back.\n\nAll this is to say: needing to import an additional library for functionality shouldn't be used to determine usefulness of a language most of the time ;).\n\nMATLAB is a language built on top of a library. Python (with NumPy & numba) is a language with a library built under it.\n\nNeither is ideal. Like all languages, both have a few quirks, due to their history.\n\nMy suggestion: Door Number 3, Julia.\n\nIn either case (MATLAB, Python, Julia), you should ask yourself:\n\nIs your immediate goal to master the math, or to master how to program it?\n\nIs your long-term career goal academia, or industry?\n\nIs it important to you that other people can run your code (e.g. github repo)?\n\nIs your code all short, or might it grow into a large (many 1000-line, 100's of functions) code?\n\nIf your answers are: 1: math, 2: academia, 3: no, 4: all short, then MATLAB is fine. It is an excellent tool. I love it for doing something fast and not fussing with things; it's an industry standard in DSP and radar and other problems that rely very heavily on linear algebra. There is a lot of code written in it; it will be around for a long time to come.\n\nNevertheless, if those are not your answers, then between the two, I definitely suggest Python over MATLAB. You will become a much better programmer, and your job prospects will be much better, too. If your code gets long, beware that managing a large (many 1000-lines) MATLAB code is a nightmare IMO (namespaces, anyone?). If you find you have to use MATLAB at some later date, it will be easy. Conversely, if you learn MATLAB and later on find you need to learn Python + NumPy + numba, then you will probably find this very difficult.\n\nThis is all the more true if we are talking about optimization, which is at least tangential to machine learning (ML). MATLAB is trying to compete in this space, but if you look online for job ads, they are almost all asking for Python, not MATLAB. In fact, in ML, you will find (in my experience) more job ads asking for Julia than for MATLAB.\n\nBut again (and yes it is just my personal opinion), I would suggest you take a look at Julia. I have not been as excited about a language after trying Julia since.... well, since I started learning Python 18 years ago. I use all three at work, and Julia is my first choice most of the time; I think the language is truly going places. But, I'm a risk-taker. It's not the safe move. If you want safe, the safe move is Python.\n\nDisclosure: I have no interests, financial or otherwise, in MATLAB, Python, or Julia, other than my own experience using them for work/research.\n\nI am geophysics professor and have been solving scientific computing problems in Matlab since 2000. In the last ~8 years graduate students have been preferring to work in Python. I have the following observations:\n\nOn a practical level Python is MUCH slower than Matlab.\n\nCode that my graduate students write is literally orders of magnitude slower than my Matlab for solution for matrices that arise from discretizing PDE's.\n\nHow can this be, aren't both using the same libraries under the hood? Yes, but clearly Matlab is much better at recognizing special forms of matrices and choosing optimized solvers for them. Once my graduate students have have put several weeks into optimizing their code, it is still much slower (seconds vs. tens of minutes). You may think my graduate students suck - but some of them are in a leading computational math graduate program.\n\nOne reason I am more likely to switch to Julia than Python is that many of the advertised advantages of Python, such as great string manipulation simply don't matter for scientific programming. Also the syntax is clumsy and verbose. Most people that know what they are doing are picking up Julia. For example the new Climate model (https://clima.caltech.edu/) is being developed in Julia, not Python. The same is true for various Astrophysical codes (https://juliacomputing.com/case-studies/celeste/).\n\nMy first language I have learned was MATLAB. After learning C++ I realized MATLAB is bad for really learning about programming in such. I would recommend you also Python as language because it is easier to switch from Python to MATLAB then in the other direction.\n\nBesides the downturns of commercial and closed software you should also keep in mind that MATLAB is a working universe in itself. For example you can really quick do a program for image pattern recognition without having (to much) knowledge about image processing and link your code into another toolbox for autonomous driving (just as an example, because that is something people like to forget about MATLAB). Python has a little bit steeper learning curve but for your case it is much worther I think.\n\nIn 2017 I was a grizzled veteran of Matlab and a reluctant Python novice. I had just started a new position at a startup that was about to conduct their first trials of their flagship device, second generation. In the scramble of the final days before trial began, a decision was made that calibration should no longer be manual, but automated (because duh). No big deal. Simple Matlab script and Matlab compiler, and we’d be good to go. Afternoon’s worth of work, easy. But I had not yet installed Matlab on my computer. And the guy I replaced hadn’t shared the password to his computer. And we were out of licenses, and had no budget. And when I reached out to Matlab’s support team, I was ping ponged between people who were less than motivated to help our little startup put out this little fire we were dealing with. And when the licensing issue was resolved, I goofed the install (which I hadn’t done myself since I was a student) and needed more help from Matlab support. While all of this was going on, I was also beating my brains against the keyboard learning the nuances of NumPy. By the time I got Matlab up and running, I had already solved the problem, and shipped a critical piece of code in Python. I have not used Matlab again since, and I don’t miss it. A year later, I was promoted to the systems team lead, right around the time we were due to renew our Matlab support. Which we did not do. Python til I die."
    }
}