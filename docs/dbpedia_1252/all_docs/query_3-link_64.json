{
    "id": "dbpedia_1252_3",
    "rank": 64,
    "data": {
        "url": "https://telecom.altanai.com/tag/sdp/",
        "read_more_link": "",
        "language": "en",
        "title": "sdp – Telecom R & D",
        "top_image": "https://secure.gravatar.com/blavatar/21cc9f0c24488201ce8b991b56333b01afc4a667f2fca750d814c8c26d37dfdf?s=200&ts=1723338422",
        "meta_img": "https://secure.gravatar.com/blavatar/21cc9f0c24488201ce8b991b56333b01afc4a667f2fca750d814c8c26d37dfdf?s=200&ts=1723338422",
        "images": [
            "https://telecom.altanai.com/wp-content/uploads/2016/06/altanaitelecom_logo1.png?w=122",
            "https://telecom.altanai.com/wp-content/uploads/2012/12/call-between-web-client-and-sip-client-1.jpg?w=720",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/screenshot-from-2022-03-08-10-32-33-edited.png",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-18.png?w=499",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-19.png?w=1024",
            "https://telecom.altanai.com/wp-content/uploads/2015/03/turn-4.png?w=720",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-12.png?w=475",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-13.png?w=469",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Full_Cone_NAT.svg/400px-Full_Cone_NAT.svg.png",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-15.png?w=400",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-16.png?w=400",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-17.png?w=400",
            "https://telecom.altanai.com/wp-content/uploads/2022/04/image-14.png?w=610",
            "https://telecom.altanai.com/wp-content/uploads/2015/03/turn.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/03/turn-1.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/03/turn-2.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/03/turn-3.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/kurentowowoza.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/screenshot-from-2015-01-30-152859.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/screenshot-from-2015-01-29-174221.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/screenshot-from-2015-01-21-174952.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/donekurento-streaming.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/ffmpeg-error-kurebto1.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2015/02/ffmpeg-error-kurebto2.png?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2022/12/image-45.png?w=896",
            "https://telecom.altanai.com/wp-content/uploads/2022/12/image-46.png?w=1024",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sip-voip-transformation.jpg?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2022/12/image-47.png?w=1024",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sdp-consolidation.jpg?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sdp-consolidation-1.jpg?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sdp-consolidation-2.jpg?w=300",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/intojaisnlee.png",
            "https://telecom.altanai.com/wp-content/uploads/2013/08/service-broker.jpg",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sb11.png?w=660",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sb2.png?w=660",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sb3.png?w=660",
            "https://telecom.altanai.com/wp-content/uploads/2014/09/sb5.png?w=660",
            "https://telecom.altanai.com/wp-content/uploads/2014/10/ott-players.jpg?w=200&h=150&crop=1",
            "https://telecom.altanai.com/wp-content/uploads/2014/01/sip.jpg?w=266&h=1&crop=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2013/07/sip-3.jpg?resize=350%2C200&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2019/02/nat.jpg?resize=350%2C200&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2013/07/sip-entities.jpg?resize=350%2C200&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2020/10/pexels-photo-3861969.jpeg?resize=350%2C200&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2020/01/stir.png?resize=350%2C200&ssl=1",
            "https://altanaitelecom.files.wordpress.com/2022/10/image.png?w=317",
            "https://scholar.google.com/intl/en/scholar/images/1x/scholar_logo_64dp.png",
            "https://altanaitelecom.files.wordpress.com/2014/11/1267os_webrtc-integrators-guide_0-1.jpg",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2014/11/kamailio.jpeg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2018/12/echo-AEC.png?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2020/01/pexels-photo-256219.jpeg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2020/01/pexels-photo-279810.jpeg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2014/01/sip.jpg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2019/02/nat.jpg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2016/08/sbc-webrtc-to-sip.jpg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2020/01/pexels-photo-1089438.jpeg?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2019/04/image-1.png?resize=40%2C40&ssl=1",
            "https://i0.wp.com/telecom.altanai.com/wp-content/uploads/2020/10/1200px-asterisk_logo.svg_.png?resize=40%2C40&ssl=1",
            "https://1.gravatar.com/avatar/a25cf0e9e04bce21095056333ebe5ffb?s=320",
            "https://0.gravatar.com/avatar/6d4195c5213bf09d386738972eebce2ea156d96e44b3c2a52bd8f9bc1c962662?s=32&d=&r=G",
            "https://1.gravatar.com/avatar/7ec234fe03aa96a034edc89be0a3f2207e8f076684f77b5e993782fa427df382?s=32&d=&r=G",
            "https://2.gravatar.com/avatar/229b7a64571ec05ce945ccaed045c5feb46b0e7fd191ac800e92cc02e2b1dd46?s=32&d=&r=G",
            "https://0.gravatar.com/avatar/c87da8c135bcc88acafaff963ed89d893ecef3d1a2c345000e863c4edacbdf40?s=32&d=&r=G",
            "https://programmerprodigycode.files.wordpress.com/2019/12/cropped-iconblog.png?w=32",
            "https://0.gravatar.com/avatar/fc293a964706b5f9cf0ef5bf394146f592d6277ad7d63ee93ff42e0b519dd340?s=32&d=&r=G",
            "https://0.gravatar.com/avatar/?s=32&d=&r=G",
            "https://telecom.altanai.com/i/rss/orange-small.png",
            "https://telecom.altanai.com/i/rss/orange-small.png",
            "https://s-ssl.wordpress.com/wp-includes/images/rss.png?m=1354137473i",
            "https://secure.gravatar.com/blavatar/21cc9f0c24488201ce8b991b56333b01afc4a667f2fca750d814c8c26d37dfdf?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://secure.gravatar.com/blavatar/21cc9f0c24488201ce8b991b56333b01afc4a667f2fca750d814c8c26d37dfdf?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [
            "https://telecom.altanai.com/2013/07/13/sip-entities/embed/#?secret=kV4Bb9WUZT",
            "https://www.slideshare.net/slideshow/embed_code/key/ti31yxOTXHt3Ir"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-03-11T21:45:00-07:00",
        "summary": "",
        "meta_description": "Posts about sdp written by altanai",
        "meta_lang": "en",
        "meta_favicon": "https://secure.gravatar.com/blavatar/21cc9f0c24488201ce8b991b56333b01afc4a667f2fca750d814c8c26d37dfdf?s=32",
        "meta_site_name": "Telecom R & D",
        "canonical_link": "https://telecom.altanai.com/tag/sdp/",
        "text": "NAT\n\nWhat is ICE and why is it used ?\n\nCall Flow for STUN protocol exchange\n\nNAT types\n\nFull Cone ( Normal)\n\nRestricted Cone\n\nPort Restricted Cone\n\nSymmetric\n\nNetwork Scenarios for NAT\n\nHole Punching\n\n1 . No Firewall present on either peer. Both connected to open public internet\n\n2. Either one or both the peer ( could be many in case of multi conf call ) are present behind a firewall or restrictive connection or router configured for intranet\n\n3. When the TURN server is also behind a firewall\n\nWebRTC : Web-based real-time communications is a gamechanger for real-time communication systems. WebRTC is one such open-source, royalty-free, unencumbered browser-based platform using the browser’s embedded media application programming interface (API). It allows developers to add custom JavaScript & HTML5 to control the media setup and flow. WebRTC has enabled developers to build apps, sites, widgets, plugins and extensions capable of delivering simultaneous audio, video, data, and screen-sharing capability in a peer to peer fashion.\n\nIssues accross Networks : But something which escapes our attention is how media is traversing across the network. Of course, the webrtc sessions run smoothly when both the peers are on the open public internet without any restrictions or firewall blocks. But the real problem begins when one of the peers is behind a Corporate/Enterprise network or using a different Internet service provider with some security restrictions. In such a case the normal ICE capability of WebRTC is not sufficient to set up a bidirectional media streaming setup. For network restriction what is required is a NAT ( Network Address Traversal) mechanism that performs address discovery.\n\nNAT and ICE Solution : STUN and TURN server protocols handle session initiations with handshakes between peers in different network environments. In the case of a firewall blocking a STUN peer-to-peer connection, the system fallback to a TURN server which provides the necessary traversing mechanism through the NAT.\n\nLets study from the start ie ICE.\n\nNAT\n\nNetwork Address Translation provides a mapping of internal to external IP addresses. This helps in network address modification for packets which in transit accross a tarfic routinig node such as inter networks.\n\nA private address on the inside of the NAT is mapped to an external public address. Port address translation (PAT) resolves conflicts that arise when multiple hosts happen to use the same source port number to establish different external connections at the same time.\n\nSome ways to acheive this\n\nApplication Layer Gateway (ALG)\n\nInteractive Connectivity Establishment ( ICE )\n\nUPnP Internet Gateway Device Protocol\n\npropertiary SIP based Session Border Controller, so on\n\nLets us just look at ICE in detail which is the default implementation for WebRTC\n\nWhat is ICE and why is it used ?\n\nICE (Interactive Connectivity Establishment ) framework ( mandatory by WebRTC standards ) find network interfaces and ports in Offer / Answer Model to exchange network based information with participating communication clients. ICE makes use of the Session Traversal Utilities for NAT (STUN) protocol and its extension, Traversal Using Relay NAT (TURN)\n\nICE is defined by RFC 5245 – Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols.\n\nSample WebRTC offer holding ICE candidates :\n\ntype: offer, sdp: v=0 o=- 3475901263113717000 2 IN IP4 127.0.0.1 s=- t=0 0 a=group:BUNDLE audio video data a=msid-semantic: WMS dZdZMFQRNtY3unof7lTZBInzcRRylLakxtvc m=audio 9 RTP/SAVPF 111 103 104 9 0 8 106 105 13 126 c=IN IP4 0.0.0.0 a=rtcp:9 IN IP4 0.0.0.0 a=ice-ufrag:/v5dQj/qdvKXthQ2 a=ice-pwd:CvSEjVc1z6cMnhjrLlcbIxWK a=ice-options:google-ice a=fingerprint:sha-256 F1:A8:2E:71:4B:4E:FF:08:0F:18:13:1C:86:7B:FE:BA:BD:67:CF:B1:7F:19:87:33:6E:10:5C:17:42:0A:6C:15 a=setup:actpass a=mid:audio a=sendrecv a=rtcp-mux a=rtpmap:111 opus/48000/2 a=fmtp:111 minptime=10 a=rtpmap:103 ISAC/16000 a=rtpmap:104 ISAC/32000 a=rtpmap:9 G722/8000 a=rtpmap:0 PCMU/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:106 CN/32000 a=rtpmap:105 CN/16000 a=rtpmap:13 CN/8000 a=rtpmap:126 telephone-event/8000 a=maxptime:60 m=video 9 RTP/SAVPF 100 116 117 96 c=IN IP4 0.0.0.0 a=rtcp:9 IN IP4 0.0.0.0 a=ice-ufrag:/v5dQj/qdvKXthQ2 a=ice-pwd:CvSEjVc1z6cMnhjrLlcbIxWK a=ice-options:google-ice a=fingerprint:sha-256 F1:A8:2E:71:4B:4E:FF:08:0F:18:13:1C:86:7B:FE:BA:BD:67:CF:B1:7F:19:87:33:6E:10:5C:17:42:0A:6C:15 a=setup:actpass a=mid:video a=sendrecv a=rtcp-mux a=rtpmap:100 VP8/90000 a=rtcp-fb:100 ccm fir a=rtcp-fb:100 nack a=rtcp-fb:100 nack pli a=rtcp-fb:100 goog-remb a=rtpmap:116 red/90000 a=rtpmap:117 ulpfec/90000 a=rtpmap:96 rtx/90000 a=fmtp:96 apt=100 m=application 9 DTLS/SCTP 5000 c=IN IP4 0.0.0.0 a=ice-ufrag:/v5dQj/qdvKXthQ2 a=ice-pwd:CvSEjVc1z6cMnhjrLlcbIxWK a=ice-options:google-ice a=fingerprint:sha-256 F1:A8:2E:71:4B:4E:FF:08:0F:18:13:1C:86:7B:FE:BA:BD:67:CF:B1:7F:19:87:33:6E:10:5C:17:42:0A:6C:15 a=setup:actpass a=mid:data a=sctpmap:5000 webrtc-datachannel 1024\n\nNotice the ICE candidates under video and audio. Now take a look at the SDP answer\n\ntype: answer, sdp: v=0 o=- 6931590438150302967 2 IN IP4 127.0.0.1 s=- t=0 0 a=group:BUNDLE audio video data a=msid-semantic: WMS R98sfBPNQwC20y9HsDBt4to1hTFeP6S0UnsX m=audio 1 RTP/SAVPF 111 103 104 0 8 106 105 13 126 c=IN IP4 0.0.0.0 a=rtcp:1 IN IP4 0.0.0.0 a=ice-ufrag:WM/FjMA1ClvNb8xm a=ice-pwd:8yy1+7x0PoHZCSX2aOVZs2Oq a=fingerprint:sha-256 7B:9A:A7:43:EC:17:BD:9B:49:E4:23:92:8E:48:E4:8C:9A:BE:85:D4:1D:D7:8B:0E:60:C2:AE:67:77:1D:62:70 a=setup:active a=mid:audio a=sendrecv a=rtcp-mux a=rtpmap:111 opus/48000/2 a=fmtp:111 minptime=10 a=rtpmap:103 ISAC/16000 a=rtpmap:104 ISAC/32000 a=rtpmap:0 PCMU/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:106 CN/32000 a=rtpmap:105 CN/16000 a=rtpmap:13 CN/8000 a=rtpmap:126 telephone-event/8000 a=maxptime:60 m=video 1 RTP/SAVPF 100 116 117 96 c=IN IP4 0.0.0.0 a=rtcp:1 IN IP4 0.0.0.0 a=ice-ufrag:WM/FjMA1ClvNb8xm a=ice-pwd:8yy1+7x0PoHZCSX2aOVZs2Oq a=fingerprint:sha-256 7B:9A:A7:43:EC:17:BD:9B:49:E4:23:92:8E:48:E4:8C:9A:BE:85:D4:1D:D7:8B:0E:60:C2:AE:67:77:1D:62:70 a=setup:active a=mid:video a=sendrecv a=rtcp-mux a=rtpmap:100 VP8/90000 a=rtcp-fb:100 ccm fir a=rtcp-fb:100 nack a=rtcp-fb:100 nack pli a=rtcp-fb:100 goog-remb a=rtpmap:116 red/90000 a=rtpmap:117 ulpfec/90000 a=rtpmap:96 rtx/90000 a=fmtp:96 apt=100 m=application 1 DTLS/SCTP 5000 c=IN IP4 0.0.0.0 b=AS:30 a=ice-ufrag:WM/FjMA1ClvNb8xm a=ice-pwd:8yy1+7x0PoHZCSX2aOVZs2Oq a=fingerprint:sha-256 7B:9A:A7:43:EC:17:BD:9B:49:E4:23:92:8E:48:E4:8C:9A:BE:85:D4:1D:D7:8B:0E:60:C2:AE:67:77:1D:62:70 a=setup:active a=mid:data a=sctpmap:5000 webrtc-datachannel 1024\n\nCall Flow for STUN protocol exchange\n\nClient -> Server : binding request with attributes – CHANGE-REQUEST\n\nServer -> Cient : binding response with attributes – MAPPED-ADDRESS, RESPONSE-ORIGIN, OTHER-ADDRESS, XOR-MAPPED-ADDRESS\n\nWebRTC needs SDP Offer to be sent to B from A.\n\nClient B uses this SDP offer to generate an SDP Answer for A.\n\nThe SDP ( as seen on chrome://webrtc-internals/ ) includes ICE candidates which map open ports in the firewalls.\n\nHowever, in case both sides are symmetric NATs, the media flow gets blocked. For such a case TURN is used which tries to give a public IP and port mapped to internal IP and port. This relay path provides an alternative routing mechanism like a packet mirror. It can open a DTLS connection and use it to key the SRTP-DTLS media streams.\n\nNAT types\n\nSome types of NAT are described below\n\nFull Cone ( Normal)\n\nAll requests from the same internal IP address and port are mapped to the same external IP address and port. It also allows external hosts to send packet to internal host by using the mapped external address.\n\nRestricted Cone\n\nAll requests from the same internal IP address and port are mapped to the same external IP address and port, but external hosts can send packet to internal host only if internal host had previously sent a packet to that IP address.\n\nPort Restricted Cone\n\nAll requests from the same internal IP address and port are mapped to the same external IP address and port, but external hosts can send packet to internal host only if internal host had previously sent a packet to that IP address and that port.\n\nSymmetric\n\nAll requests from the same internal IP address and port, to a specific destination IP address and port, are mapped to the same external IP address and port. Any traffic from same internal IP+port to a different destination uses a new mapping. Also external hosts which receives a packet can send a UDP packet back to internal host.\n\nNetwork Scenarios for NAT\n\nIn order to Understand this better consider various scenarios that determine the NAT Mapping Behavior one could run tests using cli or network analyzer tools and checking checking the XOR-MAPPED-ADDRESS value of the Binding Response message that the client receives\n\nMapping behaviour\n\nEndpoint-Independent Mapping NAT (EIM-NAT)\n\nAddress-Dependent Mapping NAT (ADM-NAT)\n\nAddress and Port-Dependent Mapping NAT (APDM-NAT)\n\nFiltering behaviour\n\nEndpoint-Independent Filtering NAT (EIF-NAT)\n\nAddress-Dependent Filtering NAT (ADF-NAT)\n\nAddress and Port-Dependent Filtering NAT (APDF-NAT)\n\nHole Punching\n\nAs long as one end of the connection is able to determine the dynamic association of thee other [arty by NAT and send data , hole punching can work.\n\nPermissive NAT mapping techniques which map the same internal address/port consistently to an external address/port are suitable for hole punching such as full cone , address or port restricted NAT. However pure symmetric NAT have inconsistent destination specific port mapping and thus cannot do hole punching.\n\n1 . No Firewall present on either peer. Both connected to open public internet\n\nDiagrammatic representation of this shown as follows :\n\nIn this case there is no restriction to signal or media flow and the call takes places smoothly in p2p fashion.\n\n2. Either one or both the peer ( could be many in case of multi conf call ) are present behind a firewall or restrictive connection or router configured for intranet\n\nIn such a case the signal may pass with the use of default ICE candidates or simple ppensource google Stun server such as\n\niceServers:[ { 'url': \"stun:stun.l.google.com:19302\"}]\n\nDiagram :\n\nHowever the media is restricted resulting in a black / empty / no video situation for both peers . To combat such situation a relay mechanism such as TURN is required which essentially maps public ip to private ips thus creating a alternative route for media and data to flow through .\n\nPeer config should look like :\n\nvar configuration = { iceServers: [ { \"url':\"stun::\"}, { \"url\":\"turn::\"} ]};\n\nvar pc = new RTCPeerConnection(configuration);\n\n3. When the TURN server is also behind a firewall\n\nThe config file of the turn server need to be altered to map the public and private IP. The diagrammatic description of this is as follows :\n\nReferences :\n\nRFC 3489 STUN – Simple Traversal of User Datagram Protocol (UDP)Through Network Address Translators (NATs)\n\nRFC 5928 Traversal Using Relays around NAT (TURN) Resolution Mechanism\n\nwebrtchacks https://webrtchacks.com/symmetric-nat/\n\nnetmanias https://www.netmanias.com/en/post/techdocs/6067/nat-network-protocol/nat-behavior-discovery-using-stun-rfc-5780\n\nwikipedia https://en.wikipedia.org/wiki/Network_address_translation\n\nThis blog is in continuation to the attempts / outcomes and problems in building a WebRTC to RTP media framework that successfully stream / broadcast WebRTC content to non webrtc supported browsers ( safari / IE ) / media players ( VLC ).\n\nAttempt 4: Stream the content to a WebRTC endpoint which is hidden in a video call . Pick the stream from vp8 object URL send to a streaming server\n\nThis process involved the following components :\n\nWebRTC API : simplewebrtc on Chrome\n\nTransfer mechanism from client to Streaming server: webrtc media channel\n\nProblems : No streaming server is qualified to handle a direct webrtc input and stream it on network .\n\nAttempt 4.1 : Stream the content to a WebRTC endpoint . Do WebRTC Endpoint to RTP Endpoint bridge using Kurento APIs.\n\nUse the RTP port and ip address to input into a ffmpeg or gstreamer or VLC terminal command and out put a live H264 stream on another ip and port address .\n\nThis process involved the following components :\n\nAPI : Kurento\n\nTransfer mechanism : HTML5 webrtc client -> application server hosting java -> media server -> application for webrtc media to RTP media conversation -> RTP player\n\nScreenshots of attempts with Wowza to stream RTP from a IP and port\n\nProblems : The stream was black which means 100% loss.\n\nLesson learned : RTP is not suitable for over the intgernet transmission especially with firewalls\n\nAttempt 4.2 : Build a WebRTC Endpoint to Http endpoint in kurento and force the video audio encoding to be that of H264 and PCMU.\n\nCode snippet for adding constraints to output media via pipeline and forcing choice of codecs( H264 for video and PCMU for audio ).\n\nMediaPipeline pipeline = kurento.createMediaPipeline(); WebRtcEndpoint webRtcEndpoint = new WebRtcEndpoint.Builder(pipeline).build(); HttpGetEndpoint httpEndpoint=new HttpGetEndpoint.Builder(pipeline).build(); org.kurento.client.Fraction fr= new org.kurento.client.Fraction(1, 30); VideoCaps vc= new VideoCaps(VideoCodec.H264,fr); httpEndpoint.setVideoFormat(vc); AudioCaps ac= new AudioCaps(AudioCodec.PCMU, 65536); httpEndpoint.setAudioFormat(ac); webRtcEndpoint.connect(httpEndpoint);\n\nAlternatively one can opt to use gstreamer filter to force the output in raw format.\n\n// basic media operation of 1 pipeline and 2 endpoints MediaPipeline pipeline = kurento.createMediaPipeline(); WebRtcEndpoint webRtcEndpoint = new WebRtcEndpoint.Builder(pipeline).build(); RtpEndpoint rtpEndpoint = new RtpEndpoint.Builder(pipeline).build(); // adding Gstream filters GStreamerFilter filter1 = new GStreamerFilter.Builder(pipeline, &quot;videorate max-rate=30&quot;).withFilterType(FilterType.VIDEO).build(); GStreamerFilter filter2 = new GStreamerFilter.Builder(pipeline, &quot;capsfilter caps=video/x-h264,width=1280,height=720,framerate=30/1&quot;).withFilterType(FilterType.VIDEO).build(); GStreamerFilter filter3 = new GStreamerFilter.Builder(pipeline, &quot;capsfilter caps=audio/x-mpeg,layer=3,rate=48000&quot;).withFilterType(FilterType.AUDIO).build(); // connecting all poin ts to one another webRtcEndpoint.connect (filter1); filter1.connect (filter2); filter2.connect (filter3); filter3.connect (rtpEndpoint); // RTP SDP offer and answer String requestRTPsdp = rtpEndpoint.generateOffer(); rtpEndpoint.processAnswer(requestRTPsdp);\n\nEnd result : The output is still webm based and doesnt work on h264 clients.\n\nAttempt 5 : Use a RTP SDP Endpoint ( ie a SDP file valid for a given session ) and use it to play the WebRTC media over Wowza streaming server\n\nThis process involved the following components\n\nWebRTC Stream and object URL of the blob containing VP8 media\n\nKurento WebRTC Endpoint bridge to generate SDP\n\nWowza Streaming server\n\nSnippet used for kurento to generate a SDP file from WebRTC to RTP bridge\n\n@RequestMapping(value = &quot;/rtpsdp&quot;, method = RequestMethod.POST) private String processRequestrtpsdp(@RequestBody String sdpOffer) throws IOException, URISyntaxException, InterruptedException { //basic media operation of 1 pipeline and 2 endpoinst MediaPipeline pipeline = kurento.createMediaPipeline(); WebRtcEndpoint webRtcEndpoint = new WebRtcEndpoint.Builder(pipeline).build(); RtpEndpoint rtpEndpoint = new RtpEndpoint.Builder(pipeline).build(); //connecting all poin ts to one another webRtcEndpoint.connect (rtpEndpoint); // RTP SDP offer and answer String requestRTPsdp = rtpEndpoint.generateOffer(); rtpEndpoint.processAnswer(requestRTPsdp); // write the SDP conector to an external file PrintWriter out = new PrintWriter(&quot;/tmp/test.sdp&quot;); out.println(requestRTPsdp); out.close(); HttpGetEndpoint httpEndpoint = new HttpGetEndpoint.Builder(pipeline).build(); PlayerEndpoint player = new PlayerEndpoint.Builder(pipeline, requestRTPsdp).build(); httpEndpoint.connect(rtpEndpoint); player.connect(httpEndpoint); // Playing media and opening the default desktop browser player.play(); String videoUrl = httpEndpoint.getUrl(); System.out.println(&quot; ------- video URL -------------&quot;+ videoUrl); // send the response to front client String responseSdp = webRtcEndpoint.processOffer(sdpOffer); return responseSdp; }\n\nEnd result : wowza doesnt not recognize the WebRTC SDP and play the video\n\nscreenshot of wowza with SDP input\n\nAttempt 5.1 : Use a RTP SDP Endpoint ( ie a SDP file valid for a given session ) and use it to play the WebRTC media over Default Ubuntu media player\n\nSDP file formed contains contents such as :\n\nv=0 o=- 3631611195 3631611195 IN IP4 192.168.0.119 s=Kurento Media Server c=IN IP4 192.168.0.119 t=0 0 m=audio 42802 RTP/AVP 98 99 0 a=rtpmap:98 OPUS/48000/2 a=rtpmap:99 AMR/8000/1 a=rtpmap:0 PCMU/8000 a=ssrc:2713728673 cname:user59375791@host-ad1117df m=video 35946 RTP/AVP 96 97 100 101 a=rtpmap:96 H263-1998/90000 a=rtpmap:97 VP8/90000 a=rtpmap:100 MP4V-ES/90000 a=rtpmap:101 H264/90000 a=ssrc:93449274 cname:user59375791@host-ad1117df\n\nEnd result : wowza doesnt not recognize the WebRTC SDP and play the video : deformed media\n\nscreenshot of playing from a SDP file\n\nAttempt 5.2 : Use a RTP SDP Endpoint ( ie a SDP file valid for a given session ) and use it to play the WebRTC media over VLC using socket input\n\nEnd result : nothing plays\n\nscreenshot of VLC connected to play from socket and failure to play anything\n\nAttempt 5.3: Create a WebRTC endpoint and connected it to RTP endpoint via media pipelines . Also make the RTP SDP offer and answering the same . Play with ffnpeg / ffplay / gst playbin\n\nString requestRTPsdp = rtpEndpoint.generateOffer(); rtpEndpoint.processAnswer(requestRTPsdp);\n\nWrite the requestRTPsdp to a file and obtain a RTP connector endpoint with Application/SDP .It plays okay with gst playbin ( 10 secs without audio ). Successful attempt to play from a gst playbin\n\ngst-launch -vvv playbin uri=file:///tmp/test.sdp\n\nbut refuses to be played by VLC , ffplay and even wowza . The error generated with\n\nffmpeg -i test.sdp -vcodec copy -acodec copy -f mpegts output-file.ts\n\nor\n\nffmpeg -re -i test.sdp -vcodec h264 -acodec mp3 -f mpegts \"udp://192.168.4.26:5000\"\n\nEnd result : This results in “Could not find codec parameter for stream1 ( video:h263, none ) .Other errors types are , Could not write header for output file output file is empty nothing was encoded”\n\nError screenshots of trying to play the RTP SDP file with ffmpeg\n\nAttempt 6 : Use a WebRTC capable media and streaming server ( eg Kurento ) to pick a live stream of VP8 .\n\nConvert the VP8 to H264 ( ffmpeg / RTP endpoint )\n\nConvert H264 to Mp4 using MP4 parser and pass to a streaming server ( wowza)\n\nEnd Result : yes it did work on mozilla but with considerable lag\n\nUpdate : Thankfully the updates to WebRTC standards mandated the support for PCMU and AVC/H264 CB profile in the media stack of the browser thus solving the “from scratch buildup of transcoder between webrtc and non webrtc endpoints”.\n\nVideo Codecs : RFC 7742 specifies that all WebRTC-compatible browsers must support VP8 and H.264’s Constrained Baseline profile for video.\n\nAudio Codecs : RFC 7874 specifies that browsers must support at least the Opus codec as well as G.711’s PCMA and PCMU formats.\n\nThe latest Webrtc specification lists a set of codecs which all compliant browsers are required to support which includes chrome 52 , Firefox , safari , edge.\n\nReferences :\n\nRFC7742: WebRTC Video Processing and Codec Requirements\n\nRFC 7874: WebRTC Audio Codec and Processing Requirements\n\nRead more about Webrtc Audio Video Codecs\n\nUpgrading a softswitrch solutions to IMS\n\nIntelligent Networks( IN)\n\nFixed/mobile convergence(FMC) with IMS\n\nLegacy to IP transformation\n\nWebRTC based Unified Communication platform\n\nChallenges in Migration to IMS (Total IP )\n\nThe telecommunications industry has been going through a significant transformation over the past few years. At the outset incumbent operators used to focus on mainly basic voice services and still remained profitable due to the limited number of players in the space and requirement of huge amounts as initial investment.\n\nHowever, with the advent of competitive vendors, rise in consumer base, and introduction of cost effective IP based technologies a major revolution has come about. This has enabled operators to come out of their traditional business models to maintain and enhance subscriber base by providing better and cheaper voice, multimedia and data services in order to grab the biggest possible share in this multi- billion dollar industry.\n\nThe evolution in Telecom industry has been accelerating all the time. The Next-Generation Operators wants to keep pace with the rapidly changing technology by, adapting to market needs and looking at the system and business process from multiple perspectives concurrently. Communication Service Providers (CSPs) need to consider several factors in mind before proposing any solution. They need to deploy solutions which are highly automated, highly flexible, caters to customer needs coupled with ultra low operating costs.\n\nUpgrading a softswitrch solutions to IMS\n\nThe Softswitch is decomposed into two logical components of a subscriber-facing unit and a PSTN-facing unit.\n\nSubscriber facing unit in Softswitch is upgraded to AGCF (Access Gateway Control Function)\n\nPSTN facing unit is upgraded to MGCF (Media Gateway Controller Function) to interwork with IMS as shown.\n\nBy separating the Softswitch into these components, the network can be more easily scaled for better overall network efficiencies. More AGCFs can be added as required, allowing the network to scale with an increase in subscribers. Similarly, More PSTN trunks can be added as traffic increases. Once PSTN and subscriber control functions are separated, the IMS elements, CSCF and BGCF functions can be introduced. BGCF is the interface for interconnecting IMS with legacy PSTN networks.\n\nNew SIP-based services can now be rapidly rolled out by deploying new Application Servers (AS) and its integrations to other SBC for UCC( unified communication and colloboartion ) systems. IMS has 3GPP specified ISC interface, which is a SIP-based interface for interfacing-to-application servers. Using these constructs, multiple application servers from multiple vendors can be interconnected over the IMS ISC interface.\n\nIntelligent Networks( IN)\n\nTelecom networks (2014) are made up of integrated service digital network (ISDN), the public switched telephone network (PSTN) ,the Public Land Mobility Network (PLMN) and many others. Intelligent networks (IN) ensures that call control is handed over to a control platform. The control platform determines how the establishment of this call shall continue. Applying IN to any of these networks has in common that call establishment is intercepted at a designated node in the network\n\nBy hosting new services on the new platform and combining new and old services CSP‟s aim to provide service bundles that would generate new revenue streams. This process is largely dependant on IMS ( IP Multimedia Subsystem ) architecture .\n\nOptimization in operator landscape evolve as result of synergistic technologies that come together to address the innovation and cost optimization needs of operator for better user experience. In following sections different technological evolutions that are affecting overall operator ecosystems have been discussed with focus towards Service Layer.\n\nFixed/mobile convergence(FMC) with IMS\n\n“Fixed Mobile Convergence is a transition point in the telecommunications industry that will finally remove the distinctions between fixed and mobile networks, providing a superior experience to customers by creating seamless services using a combination of fixed broadband and local access wireless technologies to meet their needs in homes, offices, other buildings and on the go.”\n\nFixed-Mobile Convergence Alliance (FMCA) 2004\n\nSystem can communicate over the cellular network, or act as a new endpoint on the IP network. Home Subscriber Server (HSS) manages subscriber data uniformly between the cellular and IP worlds. The Handoff Server runs on top of the ISC interface, and provides a seamless experience when subscribers move from the cellular network to a Wi-Fi network. The AGCF remains the functional centre of the network, but with the introduction of the HSS, has added the Cx and Sh interfaces defined by the IMS.\n\nLegacy to IP transformation\n\nThis section broadly covered the aspects of migration from legacy IN solution to new age JAINSLEE framework based one. Applies to Legacy IN hosting voice based services mostly such as VPN, Access Screening ,Number Portability, SIP-Trunking,Call Gapping.\n\nMost operator environments have seen a rise in the number of service delivery platforms. Also complexity of telecom networks have increased manifold hence CSPs are facing multiple challenges. Increased efforts and costs are required for maintaining all the SDP platforms. These platforms are generally of different vendors and cater to different technologies thereby greatly increase chances of limiting the scalability and flexibility of the operator landscape. More effort required for sustaining the life cycle of the platform and challenges in integrating non compatible SDPs due to proprietary design have been stumbling blocks in the progress of CSPs across the world.\n\nTo overcome these challenges there is trend in the market to move towards SDP consolidation wherein instead of maintaining several SDPs with their proprietary design CSPs prefer maintaining a single or less number of SDPs having standardized interfaces.\n\nAs illustrated in the above figure there is a transition that is taking place in the industry towards consolidation of service delivery session control. This would provide a cost effective sustenance of existing applications and the rapid creation and deployment of new services leading to increased revenue recognition by CSPs.\n\nAgile Development\n\nInnovative services\n\nopen SOA based architectures\n\nIN/NGN Platform and Services\n\nReuse of existing investments in legacy service platforms\n\nlow cost of new service development\n\nfaster time to market\n\nMonetize investment in Network Infrastructure uplift – SIP trunking, VoLTE etc.\n\nServices that should be covered in the Scope of Migration from fixed line to IP telephony are:\n\nVirtual Private Network (VPN) : An Intelligent Network (IN) service, which offers the functions of a private telephone network. The basic idea behind this service is that business customers are offered the benefits of a (physical) private network, but spared from owning and maintaining it.\n\nAccess Screening(ASC): An IN service, which gives the operators the possibility to screen (allow/barring) the incoming traffic and decide the call routing, especially when the subscribers choose an alternate route/carrier/access network (also called Equal Access) for long distance calls on a call by call basis or pre-selected.\n\nNumber Portability(NP) : An IN service allows subscribers to retain their subscriber number while changing their service provider, location, equipment or type of subscribed telephony service. Both geographic numbers and non-geographic numbers are supported by the NP service.\n\nWebRTC based Unified Communication platform\n\nUsing WebRTC Solution for Delivering In Context Voice which provides new monetizing benefits to the Enterprise customers of Service Providers. This includes following components:\n\nWebRTC Gateway for implementation for inter-connect with SIP Legacy\n\nEnhancement of WebRTC Client with new features like Cloud Address Book, Conferencing & Social Networking hooks.\n\nCloud based solutions\n\nChallenges in Migration to IMS (Total IP )\n\nSince long I have been advocating the benefits of migration to IMS from a current fixed line / legacy/ proprietary VOIP / SS7 based system . However I decided to write this post on the challenges in migration to IMS system from a telecom provider’s view. Though I could think of many , I have jot down the major 4 . they are as follows :\n\nData Migration challenges\n\nEstablishing a common data model definition\n\nData migration seamlessly\n\nConfiguration management\n\nExtracting data from multiple sources and vendors , that includes legacy systems\n\nExtracting data due to its large scale and volume\n\nTraining\n\nCreating an effective knowledge share and transfer for live operations\n\nTraining in fallback plans, standards and policies .\n\nCustomer impact\n\nMinimized customer outage\n\nEnhance customer experience by delivering quality services on schedule\n\nEnsuring security of customer’s confidential data\n\nTransfer of customer services without any impact.\n\nTesting in replicated environment\n\nPhysical pre-transfer test\n\nReducing cycle time\n\nVerification and validation at every change in data environment\n\nDetect production issues early in the test -lifecycle\n\nFallback plans\n\nPilot program and real network simulation for ensuring preparedness\n\nTracking changes in new network\n\nSIP is a widely adopted application layer protocol used in VoIP calls and confernecing applciations and in IMS architeture or pure packet switched networks .\n\nMore on SIP , its packet structure , transaction and dialogs , loose and strict record routing , location service , near and far end nating , and commonly used SIP Call flows like Redirection , forking , click to Dial – https://telecom.altanai.com/2013/07/13/sip-session-initiaion-protocol/(opens in a new tab)\n\nSIP Request and Repsosnes\n\nTraditional SIP headers for Call setup are INVITE, ACK and teardown are CANCEL or BYE , however with more adoption newer methods specific to services were added such as :\n\nMESSAGE Methods for Instant Message based services\n\nSUBSCRIBE, NOTIFY standardised by Event notification extension RFC 3856\n\nPUBLISH to push presence information to the network\n\nOutlining the SIP Requests and Responses in tables below,\n\nRequest Message\n\nResponse Message\n\nSIP headers\n\nDisplay names\n\nFrom originators sipuri\n\nCSeq or Command Sequence contains an integer and a method name. The CSeq number is incremented for each new request within a dialog and is a traditional sequence number.\n\nContact – SIP URI that represents a direct route to the originator usually composed of a username at a fully qualified domain name (FQDN) , also IP addresses are permitted. The Contact header field tells other elements where to send future requests.\n\nMax-Forwards -to limit the number of hops a request can make on the way to its destination. It consists of an integer that is decremented by one at each hop.\n\nContent\n\nContent-Type – description of the message body.\n\nContent-Type: application/h.323 Content-Type: message/sip Content-Type: application/sdp Content-Type: multipart/signed; protocol=\"application/pkcs7-signature\"; micalg=sha1; boundary=boundary42 Content-Type: application/pkcs7-signature; name=smime.p7s\n\nContent Encoding\n\nContent-Encoding: text/plain\n\nContent Language\n\nContent-Language: en\n\nContent-Length – an octet (byte) count of the message body.\n\nContent-Disposition\n\ndescribes how the message body or, for multipart messages, a message body part is to be interpreted by the UAC or UAS. It extends the MIME Content-Type\n\nDisposition Types :\n\n“session” – body part describes a session, for either calls or early (pre-call) media\n\n“render” – body part should be displayed or otherwise rendered to the user.\n\n“icon” – body part contains an image suitable as an iconic representation of the caller or callee\n\n“alert” – body part contains information, such as an audio clip\n\nAccept\n\nAccept – acceptable formats like application/sdp or currency/dollars\n\nHeader field where proxy ACK BYE CAN INV OPT REG\n\nAccept R - o - o m* o\n\nAccept 2xx - - - o m* o\n\nAccept 415 - c - c c c\n\nAn empty Accept header field means that no formats are acceptable.\n\nAccept-Encoding\n\nAccept-Encoding R - o - o o o\n\nAccept-Encoding 2xx - - - o m* o\n\nAccept-Encoding 415 - c - c c c\n\nAccept-Language : languages for reason phrases, session descriptions, or status responses carried as message bodies in the response.\n\nAccept-Language: da, en-gb;q=0.8, en;q=0.7 Accept-Language R - o - o o o Accept-Language 2xx - - - o m* o Accept-Language 415 - c - c c c\n\nTag globally unique and cryptographically random with at least 32 bits of randomness. identify a dialog, which is the combination of the Call-ID along with two tags ( from To and FROM headers )\n\nCall-Id uniquely identify a session\n\ncontact – sip url alternative for direct routing\n\nEncryption\n\nExpires – when msg content is no longer valid\n\nMandatory SIP headers\n\nINVITE sip:altanai@domain.comSIP/2.0 Via: SIP/2.0/UDP host.domain.com:5060 From: Bob To: Altanai Call-ID: 163784@host.domain.com CSeq: 1 INVITE\n\nInformational headers\n\nCall-Info additional information for example, through a web page. The “card” parameter provides a business card, for example, in vCard [36] or LDIF [37] formats. Additional tokens can be registered using IANA\n\nCall-Info: http://wwww.example.com/alice/photo.jpg ;purpose=icon,http://www.example.com/alice/ ;purpose=info\n\nContact\n\nContact: “Mr. Watson” ;q=0.7; expires=3600,\n\n“Mr. Watson” watson@bell-telephone.com ;q=0.1 m: ;expires=60\n\nPriority indicates the urgency of the request as perceived by the client.\n\ncan have the values “non-urgent”, “normal”, “urgent”, and “emergency”, but additional values can be defined elsewhere\n\nSubject: A tornado is heading our way!\n\nPriority: emergency\n\nor\n\nSubject: Weekend plans\n\nPriority: non-urgent\n\nSubject summary or indicates the nature of call\n\nSubject: Need more boxes\n\ns: Tech Support\n\nSupported enumerates all the extensions supported. can contain list of option tags, described\n\nSupported: 100rel\n\nk: 100rel\n\nUnsupported features not supported\n\nUnsupported: foo\n\nUser-Agent information about the UAC originating the request.\n\nUser-Agent: Softphone Beta1.5\n\nOrganization conveys the name of the organization to which the SIP element issuing the request or response belongs.\n\nOrganization: AltanaiTelecom Co.\n\nWarning additional information about the status of a response.\n\nList of warn-code\n\n300 Incompatible network protocol:\n\n301 Incompatible network address formats:\n\n302 Incompatible transport protocol:\n\n303 Incompatible bandwidth units:\n\n304 Media type not available:\n\n305 Incompatible media format:\n\n306 Attribute not understood:\n\n307 Session description parameter not understood:\n\n330 Multicast not available:\n\n331 Unicast not available:\n\n370 Insufficient bandwidth:\n\n399 Miscellaneous warning:\n\n1xx and 2xx have been taken by HTTP/1.1.\n\nWarning: 307 isi.edu “Session parameter ‘foo’ not understood”\n\nWarning: 301 isi.edu “Incompatible network address type ‘E.164′”\n\nAuthetication and Authorization related headers\n\nAuthentication-Info mutual authentication with HTTP Digest. A UAS MAY include this header field in a 2xx response to a request that was successfully authenticated using digest based on the Authorization header field.\n\nAuthentication-Info: nextnonce=”47364c23432d2e131a5fb210812c”\n\nAuthorization authentication credentials of a UA\n\nAuthorization: Digest username=”Alice”, realm=”atlanta.com”, nonce=”84a4cc6f3082121f32b42a2187831a9e”, response=”7587245234b3434cc3412213e5f113a5432″\n\nProxy-Authenticate contains an authentication challenge.\n\nProxy-Authenticate: Digest realm=”atlanta.com”,domain=”sip:ss1.carrier.com”, qop=”auth”,\n\nnonce=”f84f1cec41e6cbe5aea9c8e88d359″,opaque=””, stale=FALSE, algorithm=MD5\n\nTimers\n\nexponential back-off on re-transmissions\n\nSession Expire Header Feild\n\nlimit the time period over which a stateful proxy must maintain state information.\n\noptions\n\nUser agents must tear down the call after the expiration of the timer , or\n\naller can send re-INVITEs to refresh the timer, enabling a “keep alive” mechanism for SIP.\n\nSDP (Session Description Protocol)\n\nSIP can bear many kinds of MIME attachments , one such is SDP. It is a standard for protocol definition for exchange of media , metadata and other transport realted attributes between the particpants before establishing a VoIP call.\n\nSDP session description is entirely textual using the ISO 10646 character set in UTF-8 encoding and described by application/SDP media type.\n\nIt should be noted that SDP itself does not incorporate a transport protocol and can be used with difference protocls like Session announcement proctols (SAP) , SIP , HTTP , Electronic MAIl MIME extension, RTSP etc.\n\nIn case of SIP SDP is encapsulated inside of SIP packet and use offer/answer model to convey information about media stream in multimedia session.\n\nSDP body contains 2 parts : session based section starting with v= line and media bsesction starting with m= line\n\nMedia and Transport Information can contain type of media like video, audio , transport protocol like RTP/UDP/IP, H.320 and format of the media such as H.261 video, MPEG video, etc.\n\nSession Description in SDP\n\nprotocol version ( v= ) protocol version mostly version 0\n\noriginator and session identifier ( o= )\n\no= < username > <session-id> <session-version> <net-type> <addr-type> <unicast address> o=- 6476888576284874344 2 IN IP4 127.0.0.1\n\nsession name ( s=) and session information ( i= ) session name is textual and can contain empty space or even s=- but must not be empty. Session infomration is optional textual information about the session\n\nURI of description ( u = )\n\nEmail Address and Phone Number (“e=” and “p=”)\n\nBoth are optional free text string SHOULD be in the ISO-10646 character set with UTF-8 encoding\n\nNothe that if given the Phone numbers SHOULD follow international public telecommunication number specification ( ITU-T Recommendation E.164) and be preceded by a “+”. Spaces and hyphens may be used to split up a phone field to aid readability if desired.\n\ne=Jane Doe j.doe@example.com\n\np=+1 617 555-6011\n\nConnection Data ( c= ) connection information — not required if included in all media in which media specific connecion data override overall session connection data\n\nc= <net-type> <addr-type> <connection-address>\n\nc=IN IP4 172.31.90.251\n\nIf the session is multicast, the connection address will be an IP multicast group address . TTL shoudl be present in IPv4 multicast address .\n\nIf connection is unicast the address contains the unicast IP address of the expected data source or data relay or data sink .\n\nBandwidth ( b= ) interpreted as kilobits per second by default\n\nb= <bwtype> : <bandwidth>\n\nEncryption Keys ( k= ) Only is SDP is exchanged in secure and trusted channel, keys va be excahnged on this SDP field . Although this process is not recomended,\n\nk= clear:< encryption key >\n\nk= base64:< encoded encryption key >\n\nk= uri:< URI to obtain key >\n\nk= prompt\n\nAttributes ( a= )\n\nextends the SDP with values like flags\n\na=inactive , a=sendonly , a=sendrecv , a=recvonly\n\nMapping the Encoder Spec from\n\na=rtpmap: < payload type > < encoding name >/ < clock rate > [/ ]\n\na=rtpmap:96 opus/48000/2\n\na=rtpmap:0 PCMU/8000\n\na=rtpmap:8 PCMA/8000\n\na=rtpmap:9 G722/8000\n\na=rtpmap:101 telephone-event/48000\n\na=rtpmap:97 telephone-event/8000\n\nConferenec Type like “broadcast”, “meeting”, “moderated”, “test”,\n\na=type: < conf type>\n\nOrientation portrait or landscape for whiteboard session\n\na=orient: <orientation>\n\nICE candidates\n\na=ice-pwd:86701d63e2d96ec42268679a a=ice-ufrag:948a1316 a=rtcp-12133xr:rcvr-rtt=all:10000 stat-summary=loss,dup,jitt,TTL voip-metrics\n\nFrame per second for video\n\na=framerate:\n\nQuality between 0 – 10 ( 10 best still image , 5 default , 0 wrst )\n\na= quality: < quality >\n\nFormat specific Parameters\n\na=fmtp: <format> <parameters>\n\na=rtpmap:114 AMR-WB/16000/1 a=fmtp:114 mode-change-capability=2;max-red=220 a=rtpmap:113 AMR-WB/16000/1 a=fmtp:113 octet-align=1;mode-change-capability=2;max-red=220 a=rtpmap:102 AMR/8000/1 a=fmtp:102 mode-change-capability=2;max-red=220 a=rtpmap:115 AMR/8000/1 a=fmtp:115 octet-align=1;mode-change-capability=2;max-red=220 a=rtpmap:105 telephone-event/16000 a=fmtp:105 0-15 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-15\n\nTime Description in SDP\n\nTiming (t =)\n\ntime the session is active)\n\nt=<start-time> <stop-time>\n\nIf the <stop-time> is set to zero, then the session is not bounded, though it will not become active until after the < start -time>.\n\nIf the <start-time> is also zero, the session is regarded as permanent.\n\nt=0 0\n\nRepeat Times ( r= )\n\nzero or more repeat times for scheduling a session\n\nr= <repeat interval> <active duration> <offsets from start-time>\n\ntime zone adjustments ( z = )\n\nz= <adjustment time> <offset> <adjustment time> <offset> ….\n\nuseful for scejduling session during transation to daylightv saving to standard time and vice versa\n\nMedia Description in SDP\n\nFor RTP, the default is that only the even-numbered ports are used for data with the corresponding one-higher odd ports used for the RTCP belonging to the RTP session\n\nm= <media> <port> <proto> <fmt> …\n\nm=audio 20098 RTP/AVP 0 101\n\nwill stream RTP on 20098 and RTCP on 20099\n\nFor multiple transport ports pairs of RTP , RTCP stream are specified\n\nm= <media> <port>/ <number of ports> <proto> <fmt> …\n\nm=audio 20098/2 RTP/AVP 0 101\n\nwill stream one pair on RTP 20098 , RTCP 20099 and RTP 20100 , RTCP 20101\n\nIf non-contiguous ports are required, they must be signalled using a separate attribute like example, “a=rtcp:”\n\nAdditioan SDP features : In addition to normal unicast sessions , SDP can also convery multicast group address for media on IP multicast session. Private (encryption of SDP ) or public session are not treated differently by SDP and they are entorely a function of implementing mechanism like SIP or SAP. Optiopnal SDP params include URI , Categorisation “a=cat:” , Internationalisation etc\n\nExample 1 : Typical Audio call SIP INVITE showing SIP headers in blue and SDP in green below\n\nINVITEnbspsip:01150259917040@x.x.x.x SIP/2.0 Via: SIP/2.0/UDP x.x.x.x:5060branch=z9hG4bK400fc6e6 From: \"123456789\" ltsip:123456789@x.x.x.xgttag=as42e2ecf6 To: ltsip:01150259917040@x.x.x.x.4gt Contact: ltsip:123456789@x.x.x.x4gt Call-ID: 2485823e63b290b47c042f20764d990a@x.x.x.x.x CSeq: 102 INVITE User-Agent:nbspMatrixSwitch Date: Thu, 22 Dec 2005 18:38:28 GMT Allow: INVITE, ACK, CANCEL, OPTIONS, BYE, REFER Content-Type: application/sdp Content-Length: 268 v=0 o=root 14040 14040 IN IP4 x.x.x.x s=session c=IN IP4 x.x.x.x t=0 0 m=audio 26784 RTP/AVP 0 8 18 101 a=rtpmap:0 PCMU/8000 a=rtpmap:8 PCMA/8000 a=rtpmap:18 G729/8000 a=rtpmap:101 telephone-event/8000 a=fmtp:101 0-16 a=fmtp:18nbspannexb=no - - - - c=* (connection information - optional if included at session-level) b=* (bandwidth information) a=* (zero or more media attribute lines)\n\nThe above SDP shows 4 supported media codecs on audio stream which are 0 PCMU , 8 PCMA , 18 G729 and finally 101 used for telephone events . It also shows RTP/AVP as RTP profile and does not contain any m=cideo line which shows that this endpoint does not want a video call , only an audio one.\n\nExample 2 : Video Vall SIP invite from Linphone\n\nSIP URI Params\n\nInternet Assigned Number Authority (IANA) Universal Resource Identifier (URI) Parameter Registry defines URI params that can be sued along with SIP scheme\n\nsip:user:password@host:port;uri-parameters?headers\n\ncomp param\n\nsignalling compression of SIP messages\n\nsip:alice@atlanta.com;comp=sigcomp\n\nVia: SIP/2.0/UDP server1.foo.com:5060;branch=z9hG4bK87a7;comp=sigcomp\n\nThe aobve exmaple indicates that the request has to be compressed using SigComp\n\ntransport-param\n\nSIP can use any network transport protocol. Parameter names are defined for UDP (RFC 768), TCP (RFC 761), and SCTP (RFC 2960).\n\nFor a SIPS URI, the transport parameter MUST indicate a reliable transport.\n\n“transport=” ( “udp” / “tcp” / “sctp” / “tls” / “ws” / other-transport )\n\nsip:alice:secretword@atlanta.com;transport=tcp\n\nmaddr paarm\n\nThe server address ( detsiantion address , port , transport ) to be contacted for this user, overriding any address derived from the host field.\n\nAlthough discouraged , maddr URI param has been used as a simple form of loose source routing. It allows a URI to specify a proxy that must be traversed en-route to the destination.\n\nuser-param\n\n“user=” ( “phone” “ip” “dialstring” other-user )\n\nsip:1-212-555-1212:1234@gateway.com;user=phone\n\nsip:123;phone-context=atlanta.example.com@example.com;user=dialstring\n\nmethod-param\n\n“method=” Method\n\nsip:atlanta.com;method=REGISTER?to=alice%40atlanta.com\n\nannc-parameters (announcement)\n\nANNC-URL\n\nsip‑ind annc‑ind “@” hostport annc‑parameters uri‑parameters\n\nsip:annc@ms.example.net; \\\n\n; play=file://fs.example.net//clips/my-intro.dvi; \\\n\n; content-type=video/mpeg%3bencode%d3314M-25/625-50\n\nsip-ind - “sip:” / “sips:”\n\nannc-ind - “annc”\n\nannc-parameters\n\n“;” play‑param\n\n[ “;” delay‑param ]\n\n[ “;” duration‑param ]\n\n[ “;” repeat‑param ]\n\n[ “;” locale‑param ]\n\n[ “;” variable‑params ]\n\n[ “;” extension‑params ]\n\nplay-param – “play=” prompt‑url\n\nprompt-url – “/provisioned/” announcement‑id\n\nannouncement-id = 1*( ALPHA / DIGIT )\n\ncontent-param “content‑type=” MIME‑type\n\nVoiceXML Media Services\n\ndialog-param\n\n“voicexml=” vxml-url ; vxml-url follows the URI syntax\n\nmethod-param – “method=” ( “get” / “post” )\n\npostbody-param- “postbody=” token\n\nccxml-param – “ccxml=” json‑value\n\naai-param- “aai=” json‑value\n\njson-value – false / null / true / object / array / number / string\n\nsip:dialog@mediaserver.example.com; \\\n\nvoicexml=http://appserver.example.com/promptcollect.vxml; \\\n\nmaxage=3600;maxstale=0\n\ndialog-params (prompt and collect)\n\nDIALOG-URL = sip-ind dialog-ind “@” hostport dialog‑parameters\n\nttl-param (time-to-live)\n\nttl parameter determines the time-to-live value of the UDP multicast packet and MUST only be used if maddr is a multicast address and the transport protocol is UDP.\n\nsip:alice@atlanta.com;maddr=239.255.255.1;ttl=15\n\ncause param\n\n“cause” EQUAL Status-Code\n\n; 404 Unknown/Not available\n\n; 486 User busy\n\n; 408 No reply\n\n; 302 Unconditional\n\n; 487 Deflection during alerting\n\n; 480 Deflection immediate response\n\n; 503 Mobile subscriber not reachable\n\n; 380 Service number translation RFC 8119 – Section 2\n\nsip:voicemail@example.com;target=bob%40example.com;cause=486\n\nSIP Responses\n\n1xx—Provisional Responses\n\nresponse that tells to its recipient that the associated request was received but result of the processing is not known yet which could be if the processing hasnt finished immediately. The sender must stop retransmitting the request upon reception of a provisional response.\n\n100 Trying\n\n180 Ringing : Triigers a local ringing at callers device\n\n181 Call is Being Forwarded : Used before tranefering to another UA such as during forking or tranfer to voice mail Server\n\n182 Queued\n\n183 Session in Progress : conveys information . Headers field or SDP body has mor details about the call. Used in announcements and IVR + DTMF too by being followed by “Early media”.\n\n199 Early Dialog Terminated\n\n2xx—Successful Responses\n\nfinal responses express result of the processing of the associated request and they terminate the transactions.\n\n200 OK\n\n202 Accepted\n\n204 No Notification\n\n3xx—Redirection Responses\n\nRedirection response gives information about the user’s new location or an alternative service that the caller should try for the call. Used for cases when the server cant satisfy the call and wants the caller to try elsewhere . After this the caller is suppose to resend the request to the new location.\n\n300 Multiple Choices\n\n301 Moved Permanently\n\n302 Moved Temporarily\n\n305 Use Proxy\n\n380 Alternative Service\n\n4xx—Client Failure Responses\n\nnegative final responses indicating that the request couldn’t be processed due to callers fault , for reasons such as t contains bad syntax or cannot be fulfilled at that server.\n\n400 Bad Request\n\n401 Unauthorized\n\n402 Payment Required\n\n403 Forbidden\n\n404 Not Found\n\n405 Method Not Allowed\n\n406 Not Acceptable\n\n407 Proxy Authentication Required\n\n408 Request Timeout\n\n409 Conflict\n\n410 Gone\n\n411 Length Required\n\n412 Conditional Request Failed\n\n413 Request Entity Too Large\n\n414 Request-URI Too Long\n\n415 Unsupported Media Type\n\n416 Unsupported URI Scheme\n\n417 Unknown Resource-Priority\n\n420 Bad Extension\n\n421 Extension Required\n\n422 Session Interval Too Small\n\n423 Interval Too Brief\n\n424 Bad Location Information\n\n428 Use Identity Header\n\n429 Provide Referrer Identity\n\n430 Flow Failed\n\n433 Anonymity Disallowed\n\n436 Bad Identity-Info\n\n437 Unsupported Certificate\n\n438 Invalid Identity Header\n\n439 First Hop Lacks Outbound Support\n\n470 Consent Needed\n\n480 Temporarily Unavailable\n\n481 Call/Transaction Does Not Exist\n\n482 Loop Detected.\n\n483 Too Many Hops\n\n484 Address Incomplete\n\n485 Ambiguous\n\n486 Busy Here\n\n487 Request Terminated\n\n488 Not Acceptable Here\n\n489 Bad Event\n\n491 Request Pending\n\n493 Undecipherable\n\n494 Security Agreement Required\n\n5xx—Server Failure Responses\n\nnegative responses but indicating that fault is at server’s side for cases such as server cant or doesnt want to respond the the request.\n\n500 Server Internal Error\n\n501 Not Implemented\n\n502 Bad Gateway\n\n503 Service Unavailable\n\n504 Server Time-out\n\n505 Version Not Supported\n\n513 Message Too Large\n\n580 Precondition Failure\n\n6xx—Global Failure Responses\n\nrequest cannot be fulfilled at any server with definitive information\n\n600 Busy Everywhere\n\n603 Decline\n\n604 Does Not Exist Anywhere\n\n606 Not Acceptable\n\nMandatory SIP headers in SIP respone\n\nSIP/2.0 200 OK Via: SIP/2.0/UDP host.domain.com:5060 From: Bob<sip:bob@domain.com> To: Altanai<sip:altanai@domain.com> Call-ID: 163784@host.domain.com CSeq: 1 INVITE\n\nVia, From, To, Call-ID , and CSeq are copied exactly from request\n\nRe-INVITE and Target-Refresh Request Handling\n\nAn INVITE request sent within an existing dialog is known as a re-INVITE. A re-Invite has an offer-answer exchange and can be used to do the following\n\nchange the session and/or dialog params\n\nchange the port to which media should be sent.\n\nchange the connection address or media type.\n\nHold/Release and SUSPEND/RESUME rtp streams (connection address is zero).\n\nFAX (T.38 and Bypass).\n\nRe-INVITE with SDP useCases\n\n1.UAS rejects all changes in params in re-INVITE\n\nSitutaion where UAC establishes audio only call\n\nSDP1: m=audio 30000 RTP/AVP 0\n\nbut later wants to upgrade to video as well SDP:\n\nm=audio 30000 RTP/AVP 0 m=video 30002 RTP/AVP 31\n\nUAS configured to reject video streams, can reject this with a 4XX error and get ACK .\n\nNo changes to session are made\n\n2. UAS receives re-INVITE for param but wants to accept few and reject others, it sends back SDP with acceptable changes with 200 OK\n\nFor instance UAC moves to high bandwidth access point and wants to update IP of media stream . It also wanst to add video stream\n\ninitial SDP\n\nm=audio 30000 RTP/AVP 0\n\nc=IN IP4 192.0.2.1\n\nnew SDP in reINVITE\n\nm=audio 30000 RTP/AVP 0\n\nc=IN IP4 192.0.2.2\n\nm=video 30002 RTP/AVP 31\n\nc=IN IP4 192.0.2.2\n\nUAS returns a 200 (OK) response to accept IP but sets the port of the video stream to zero in its SDP to show rejected of video stream.\n\nm=audio 31000 RTP/AVP 0 c=IN IP4 192.0.2.5 m=video 0 RTP/AVP 31\n\nanother example is when UAC wwants to add another audio codec and also add video stream to session\n\norignal SDP\n\nm=audio 30000 RTP/AVP 0 c=IN IP4 192.0.2.1\n\nre-invite SDP\n\nm=audio 30000 RTP/AVP 0 3\n\nc=IN IP4 192.0.2.1\n\nm=video 30002 RTP/AVP 31\n\nc=IN IP4 192.0.2.1\n\nagain the UAS will optionally accept the some param canges like audio code but set video to null IP address\n\nm=audio 31000 RTP/AVP 0 3 c=IN IP4 192.0.2.5 m=video 31002 RTP/AVP 31 c=IN IP4 0.0.0.0\n\n3. UAS receives re-INVITE but waits for user intervention\n\nUAS receives re-INVITE to add video , but instead of rejecting , it prompts user to permit.\n\nSo UAS provides a null IPaddress instead of setting the stream to ‘inactive’ because inactive streams still need to exchange RTP Control Protocol (RTCP) traffic\n\nm=audio 31000 RTP/AVP 0\n\nc=IN IP4 192.0.2.5\n\nm=video 31002 RTP/AVP 31\n\nc=IN IP4 0.0.0.0\n\nLater if user rejects the addition of the video stream. Consequently, the UAS sends an UPDATE request (6) setting the port of the video stream to zero in its offer.\n\nm=audio 31000 RTP/AVP 0\n\nc=IN IP4 192.0.2.5\n\nm=video 0 RTP/AVP 31\n\nc=IN IP4 0.0.0.0\n\nReferences:\n\nRFC 3261 SIP\n\nRFC 4566 SDP https://tools.ietf.org/html/rfc4566\n\nRFC 6141 Updates the RFC 3261 with respect to re-INVITE and UAS behaviour https://tools.ietf.org/html/rfc6141\n\nTechinvote : https://www.tech-invite.com/fo-abnf/tinv-fo-abnf-sipuriup.html"
    }
}