{
    "id": "dbpedia_356_1",
    "rank": 97,
    "data": {
        "url": "https://techdocs.broadcom.com/us/en/ca-mainframe-software/devops/ca-librarian/4-4/using/using-ca-librarian-for-storing-vendor-source/if-both-the-site-and-the-vendor-modify-the-code.html",
        "read_more_link": "",
        "language": "en",
        "title": "If Both the Site and the Vendor Modify the Code",
        "top_image": "https://techdocs.broadcom.com/us/en/ca-mainframe-software/devops/ca-librarian/4-4/using/using-ca-librarian-for-storing-vendor-source/favicon.ico",
        "meta_img": "https://techdocs.broadcom.com/us/en/ca-mainframe-software/devops/ca-librarian/4-4/using/using-ca-librarian-for-storing-vendor-source/favicon.ico",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "CA Inc"
        ],
        "publish_date": "2024-08-12T12:08:23.083000+00:00",
        "summary": "",
        "meta_description": "If both the site and the vendor are to modify the source code, for the purposes of auditing and control it is best to regard the changes in the same light as changes being made concurrently by two different programmers. Each set of changes must be isolated and identified. Needless to say, this must be done very carefully.",
        "meta_lang": "en",
        "meta_favicon": "favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "cl\n\nIf both the site and the vendor are to modify the source code, for the purposes of auditing and control it is best to regard the changes in the same light as changes being made concurrently by two different programmers. Each set of changes must be isolated and identified. Needless to say, this must be done very carefully.\n\nThe recommended approach is to use two master files, one for the unmodified vendor source, and one for the site's production source. For the purposes of discussion, they are referred to as the\n\nvendor\n\nmaster file and the\n\nproduction\n\nmaster file.\n\nEach of these master files must be initialized and updated using the guidelines discussed in the previous section. The vendor master file contains only vendor source and is updated with vendor supplied modifications only. The production master file contains only the versions of the source that the site actually uses in production. This can include site modifications.\n\nGetting Started With a New Vendor Application\n\nTo get started with a new vendor package, perform the following steps:\n\nInitialize the vendor disk master file and add each member from the vendor-supplied file, as described in the previous section.\n\nCreate a backup tape master file of the vendor disk master file by executing the batch\n\nLibrarian\n\nprogram with the -OPT BKUPTAPE control statement. Refer to the \"System Services\" section for details. The backup tape is your vendor source master. It is restored to disk when vendor modifications are supplied.\n\nIf you are defining this application to LIB/CCF, also perform the following steps:\n\nDefine a Production - Test master file pair to LIB/CCF for this application, using the master file defined in step 1 as the Test master file. Initialize a Production master file with the same file attributes as the Test master file. For all environments other than\n\nVollie\n\n, in the SOURCE MOVE keyword of LCDF option 12.11 (Create library chain) for this pair, specify C for the production master file to copy the current archive level of the member, and A for the Test master file to copy all archive levels of the member. For the\n\nVollie\n\nenvironment, in the COPY keyword of LIB/CCF option 12.4 (Master File Definition Table) for this pair, specify S for the production master file to copy the current archive level of the member using a special copy, and U for the Test master file to copy all archive levels of the member using a UTILITY COPY.\n\nPerform a LOGOUT for each member on the vendor master file. Since the members do not yet exist on the LIB/CCF Production master file, they are processed as new members. This means that no module movement is performed. LIB/CCF creates a tracking record for each member that remains outstanding until a LOGIN for the member is performed. The members can be logged out individually in LIB/CCF or en masse by using the batch LOGOUT program, $CCFB102. You can use GPO to generate the necessary -COPY cards for the modules. See the following example for a sample JCL stream. Consult the \"Implementing LIB/CCF\" section for more details. You can now make site modifications. When the modifications are complete, a LOGIN is performed for each member. The LOGIN adds each member to the\n\nLibrarian\n\nProduction master file, and each contains only one archive level. Some or all of the members can contain site modifications. LIB/CCF automatically deletes the members from the test master file during LOGIN.\n\nIf your site is not using LIB/CCF, you can enter modifications directly onto the vendor master file created in step 1. When the updates are complete, the LIBRCOPY or LIBDCOPY utility program can copy the current level of all members to a master file you designate as Production. When the copy is complete, you can scratch the test master file.\n\n//LOGOUT JOB,BROWDER,CLASS=X //GPOSTEP EXEC PGM=librarian,PARM='NRJS,NJTA' //SYSPRINT DD SYSOUT=* //MASTER DD DSN=vendor.disk.master,DISP=SHR A //OSJOB DD DSN=&&GPO,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(1,1)), // DCB=(RECFM=FB,LRECL=80,BLKSIZE=8000) //SYSIN DD * -OPT GPO -MFID 1 B -CRID WO000019 -LANG COB -DESC VENDOR PAYROLL SYSTEM -APPL PAYROLL -ABST NEW VENDOR PAYROLL MEMBER -COPY NAME= C -END //STEP2 EXEC PGM=$CCFB102,PARM='COND,SYSTEM=ROSCOE' //SYSIN DD DSN=&&GPO,DISP=(OLD,PASS)\n\nA -- This is the master file created in the first step of this section. It is also identified to LIB/CCF as the Test master file.\n\nB -- This control statement identifies the LIB/CCF entry number of the Production - Test master file pair.\n\nC -- This GPO control statement specifies that a -COPY statement is generated for all members of the vendor master file.\n\nApplying Site Modifications\n\nAfter the vendor package is installed, you have one\n\nLibrarian\n\nbackup tape file that contains unmodified vendor source, and one\n\nLibrarian\n\ndisk master file that contains production source, which can contain site modifications.\n\nTo make further modifications, you can copy members in batch from the production master file to a test master file using UTILITY COPY. When the changes are completed, copy the members back to the production master file using LIBRCOPY or LIBDCOPY. Each time this is done, one new level is added to the production master file. This insures that the production master file contains only versions of the source that were actually executed in a production environment, while developers benefit from using\n\nLibrarian\n\n's archiving features in the test environment.\n\nIf the site is using LIB/CCF, this entire process is automated. To make modifications, you must enter a Change Request first. After the Work Order is assigned to a programmer, module LOGOUTs and LOGINs can execute. Under the guidelines established in the previous section, each LOGIN creates one new archive level for the member in the production master file.\n\nApplying Vendor Modifications\n\nThis section examines the procedures to follow when the site is supplied with vendor modifications.\n\nInitialize a temporary\n\nLibrarian\n\ndisk master file.\n\nUsing the vendor backup tape file as input, execute batch\n\nLibrarian\n\nwith the -OPT RESTORE control statement. Consult the \"System Services\" section for more information.\n\nApply the vendor modifications. This creates one new archive level on the vendor master file. It is important to record the date when each level of vendor modifications are applied, since each member might not be updated every time. These dates serve as the comparison points to determine which members were updated and what modifications were made.\n\nUsing the vendor disk master file as input, execute batch\n\nLibrarian\n\nwith the -OPT BKUPTAPE control statement. The output is the new vendor backup tape file. Do not delete the vendor disk master file until all of the new vendor changes are incorporated into the production master file.\n\nExecute a two step batch\n\nLibrarian\n\njobstream that identifies all members updated by the vendor and determines the results of each update. The control statements are shown in the following example. This job produces an archive cross level compare report and a change deck of\n\nLibrarian\n\ncontrol statements for each member compared.\n\n-OPT GPO -OPT COMPARE -SEL UPDA=010199&NOUPD=+0,OLD=970101,NEW=990301 -END\n\nNote the following:\n\nThis example assumes the original version of the vendor source was installed on the production\n\nLibrarian\n\nmaster file on January 1, 1997. The first modification supplied by the vendor was on March 1, 1997.\n\nOn the -SEL control statement, the UPDA= and NOUPD= operands specify the GPO selection criteria. These options request all members that were added or updated on or after 010197 (\n\nmmddyy\n\nformat), with a number of updates greater than zero.\n\nThe OLD= and NEW= operands specify the levels to compare in\n\nyymmdd\n\nformat.\n\nReconcile Vendor Modifications With Production Source?\n\nAs a result of the procedures outlined in the previous section, the site now knows which members the vendor modified and how each member was updated. At this point, the site must decide which portions, if any, of the vendor modifications to place into production, and, if so, how to merge the changes.\n\nThe recommended approach is to copy all of the affected members from the production master file to the test master file, as outlined in the section titled Applying Site Modifications. The programmer can examine the change report produced by the archive cross level compare of the member on the vendor master file to determine what the effects of the update are on the production environment. Never apply the change deck produced by the archive cross level compare indiscriminately. These changes might not only have an adverse effect on the member's sequence numbers, they can also effect any logic changes the site made to the system. You need to determine this before an update is performed.\n\nThe programmer might also find it useful to have a comparison report detailing the site's modifications to the member before the latest vendor modifications. This can be produced easily with the COMPARATOR utility program. Let us look at an example of how this might be done.\n\nThe vendor package was installed on 2/1/97. The site immediately made modifications to several of the members before placing them into production on 2/15/97. The vendor distributed some maintenance to the system, which the site applied to the vendor master file on 3/1/97.\n\nThe production master file contains a member named PROGX, which was one of the members modified by the site. The vendor modification also updated this member.\n\nPROGX has one archive level in the production master file. In the vendor master file, there are two levels.\n\nProduction Master File Module Name: PROGX 2/15/97 Level 0 - Original vendor source with site modifications Vendor Master File Module Name : PROGX 3/1/97 Level 1 - Vendor's source plus 1 modification 2/1/97 Level 0 - Original vendor source\n\nSince the original vendor source, level 0 in the vendor master file, was the starting point for the changes made by the site and by the vendor, this level is the point of reference for the comparison. This is why it is important to keep a file containing the unmodified vendor source.\n\nThe programmer has a report detailing the modifications made by the vendor. To get a similar report of the changes the site made, you need to run a compare between the current level in the production master against the starting point of those changes, level 0 in the vendor master file. The following examples illustrate how the COMPARATOR utility can provide this report."
    }
}