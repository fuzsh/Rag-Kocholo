{
    "id": "correct_subsidiary_00031_2",
    "rank": 68,
    "data": {
        "url": "https://cocalc.com/github/freebsd/freebsd-src/blob/main/sys/ofed/drivers/infiniband/core/ib_umem.c",
        "read_more_link": "",
        "language": "en",
        "title": "ib_umem.c",
        "top_image": "https://cocalc.com/webapp/favicon-32x32.png",
        "meta_img": "https://cocalc.com/webapp/favicon-32x32.png",
        "images": [
            "https://cocalc.com/_next/static/media/icon.9f1b8851.svg",
            "https://avatars.githubusercontent.com/freebsd",
            "https://cocalc.com/_next/static/media/rectangular.bd993a5c.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "CoCalc Share Server",
        "meta_lang": "en",
        "meta_favicon": "/webapp/favicon-32x32.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\nstaticvoid__ib_umem_release(structib_device*dev,structib_umem*umem,intdirty)\n\n52\n\n{\n\n53\n\nstructscatterlist*sg;\n\n54\n\nstructpage*page;\n\n55\n\ninti;\n\n56\n\n57\n\nif(umem->nmap>0)\n\n58\n\nib_dma_unmap_sg(dev,umem->sg_head.sgl,\n\n59\n\numem->nmap,\n\n60\n\nDMA_BIDIRECTIONAL);\n\n61\n\n62\n\nfor_each_sg(umem->sg_head.sgl,sg,umem->npages,i){\n\n63\n\n64\n\npage=sg_page(sg);\n\n65\n\nput_page(page);\n\n66\n\n}\n\n67\n\n68\n\nsg_free_table(&umem->sg_head);\n\n69\n\nreturn;\n\n70\n\n71\n\n}\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\nstructib_umem*ib_umem_get(structib_ucontext*context,unsignedlongaddr,\n\n86\n\nsize_tsize,intaccess,intdmasync)\n\n87\n\n{\n\n88\n\nstructib_umem*umem;\n\n89\n\nstructpage**page_list;\n\n90\n\nstructvm_area_struct**vma_list;\n\n91\n\nunsignedlonglocked;\n\n92\n\nunsignedlongcur_base;\n\n93\n\nunsignedlongnpages;\n\n94\n\nintret;\n\n95\n\ninti;\n\n96\n\nstructdma_attrsdma_attrs={0};\n\n97\n\nstructscatterlist*sg,*sg_list_start;\n\n98\n\nintneed_release=0;\n\n99\n\nunsignedintgup_flags=FOLL_WRITE;\n\n100\n\n101\n\nif(dmasync)\n\n102\n\ndma_attrs.flags|=DMA_ATTR_WRITE_BARRIER;\n\n103\n\n104\n\nif(!size)\n\n105\n\nreturnERR_PTR(-EINVAL);\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\nif(((addr+size)<addr)||\n\n112\n\nPAGE_ALIGN(addr+size)<(addr+size))\n\n113\n\nreturnERR_PTR(-EINVAL);\n\n114\n\n115\n\nif(priv_check(curthread,PRIV_VM_MLOCK)!=0)\n\n116\n\nreturnERR_PTR(-EPERM);\n\n117\n\n118\n\numem=kzalloc(sizeof*umem,GFP_KERNEL);\n\n119\n\nif(!umem)\n\n120\n\nreturnERR_PTR(-ENOMEM);\n\n121\n\n122\n\numem->context=context;\n\n123\n\numem->length=size;\n\n124\n\numem->address=addr;\n\n125\n\numem->page_size=PAGE_SIZE;\n\n126\n\numem->pid=get_pid(task_pid(current));\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\numem->writable=!!(access&\n\n135\n\n(IB_ACCESS_LOCAL_WRITE|IB_ACCESS_REMOTE_WRITE|\n\n136\n\nIB_ACCESS_REMOTE_ATOMIC|IB_ACCESS_MW_BIND));\n\n137\n\n138\n\nif(access&IB_ACCESS_ON_DEMAND){\n\n139\n\nret=ib_umem_odp_get(context,umem);\n\n140\n\nif(ret){\n\n141\n\nkfree(umem);\n\n142\n\nreturnERR_PTR(ret);\n\n143\n\n}\n\n144\n\nreturnumem;\n\n145\n\n}\n\n146\n\n147\n\numem->odp_data=NULL;\n\n148\n\n149\n\npage_list=(structpage**)__get_free_page(GFP_KERNEL);\n\n150\n\nif(!page_list){\n\n151\n\nkfree(umem);\n\n152\n\nreturnERR_PTR(-ENOMEM);\n\n153\n\n}\n\n154\n\n155\n\nvma_list=(structvm_area_struct**)__get_free_page(GFP_KERNEL);\n\n156\n\n157\n\nnpages=ib_umem_num_pages(umem);\n\n158\n\n159\n\ndown_write(&current->mm->mmap_sem);\n\n160\n\n161\n\nlocked=npages+current->mm->pinned_vm;\n\n162\n\n163\n\ncur_base=addr&PAGE_MASK;\n\n164\n\n165\n\nif(npages==0||npages>UINT_MAX){\n\n166\n\nret=-EINVAL;\n\n167\n\ngotoout;\n\n168\n\n}\n\n169\n\n170\n\nret=sg_alloc_table(&umem->sg_head,npages,GFP_KERNEL);\n\n171\n\nif(ret)\n\n172\n\ngotoout;\n\n173\n\n174\n\nif(!umem->writable)\n\n175\n\ngup_flags|=FOLL_FORCE;\n\n176\n\n177\n\nneed_release=1;\n\n178\n\nsg_list_start=umem->sg_head.sgl;\n\n179\n\n180\n\nwhile(npages){\n\n181\n\nret=get_user_pages(cur_base,\n\n182\n\nmin_t(unsignedlong,npages,\n\n183\n\nPAGE_SIZE/sizeof(structpage*)),\n\n184\n\ngup_flags,page_list,vma_list);\n\n185\n\n186\n\nif(ret<0)\n\n187\n\ngotoout;\n\n188\n\n189\n\numem->npages+=ret;\n\n190\n\ncur_base+=ret*PAGE_SIZE;\n\n191\n\nnpages-=ret;\n\n192\n\n193\n\nfor_each_sg(sg_list_start,sg,ret,i){\n\n194\n\nsg_set_page(sg,page_list[i],PAGE_SIZE,0);\n\n195\n\n}\n\n196\n\n197\n\n198\n\nsg_list_start=sg;\n\n199\n\n}\n\n200\n\n201\n\numem->nmap=ib_dma_map_sg_attrs(context->device,\n\n202\n\numem->sg_head.sgl,\n\n203\n\numem->npages,\n\n204\n\nDMA_BIDIRECTIONAL,\n\n205\n\n&dma_attrs);\n\n206\n\n207\n\nif(umem->nmap<=0){\n\n208\n\nret=-ENOMEM;\n\n209\n\ngotoout;\n\n210\n\n}\n\n211\n\n212\n\nret=0;\n\n213\n\n214\n\nout:\n\n215\n\nif(ret<0){\n\n216\n\nif(need_release)\n\n217\n\n__ib_umem_release(context->device,umem,0);\n\n218\n\nput_pid(umem->pid);\n\n219\n\nkfree(umem);\n\n220\n\n}else\n\n221\n\ncurrent->mm->pinned_vm=locked;\n\n222\n\n223\n\nup_write(&current->mm->mmap_sem);\n\n224\n\nif(vma_list)\n\n225\n\nfree_page((unsignedlong)vma_list);\n\n226\n\nfree_page((unsignedlong)page_list);\n\n227\n\n228\n\nreturnret<0?ERR_PTR(ret):umem;\n\n229\n\n}\n\n230\n\nEXPORT_SYMBOL(ib_umem_get);\n\n231\n\n232\n\nstaticvoidib_umem_account(structwork_struct*work)\n\n233\n\n{\n\n234\n\nstructib_umem*umem=container_of(work,structib_umem,work);\n\n235\n\n236\n\ndown_write(&umem->mm->mmap_sem);\n\n237\n\numem->mm->pinned_vm-=umem->diff;\n\n238\n\nup_write(&umem->mm->mmap_sem);\n\n239\n\nmmput(umem->mm);\n\n240\n\nkfree(umem);\n\n241\n\n}\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\nvoidib_umem_release(structib_umem*umem)\n\n248\n\n{\n\n249\n\nstructmm_struct*mm;\n\n250\n\nstructtask_struct*task;\n\n251\n\nunsignedlongdiff;\n\n252\n\n253\n\nif(!umem)\n\n254\n\nreturn;\n\n255\n\n256\n\nif(umem->odp_data){\n\n257\n\nib_umem_odp_release(umem);\n\n258\n\nreturn;\n\n259\n\n}\n\n260\n\n261\n\n__ib_umem_release(umem->context->device,umem,1);\n\n262\n\n263\n\ntask=get_pid_task(umem->pid,PIDTYPE_PID);\n\n264\n\nput_pid(umem->pid);\n\n265\n\nif(!task)\n\n266\n\ngotoout;\n\n267\n\nmm=get_task_mm(task);\n\n268\n\nput_task_struct(task);\n\n269\n\nif(!mm)\n\n270\n\ngotoout;\n\n271\n\n272\n\ndiff=ib_umem_num_pages(umem);\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\nif(umem->context->closing){\n\n283\n\nif(!down_write_trylock(&mm->mmap_sem)){\n\n284\n\nINIT_WORK(&umem->work,ib_umem_account);\n\n285\n\numem->mm=mm;\n\n286\n\numem->diff=diff;\n\n287\n\n288\n\nqueue_work(ib_wq,&umem->work);\n\n289\n\nreturn;\n\n290\n\n}\n\n291\n\n}else\n\n292\n\ndown_write(&mm->mmap_sem);\n\n293\n\n294\n\nmm->pinned_vm-=diff;\n\n295\n\nup_write(&mm->mmap_sem);\n\n296\n\nmmput(mm);\n\n297\n\nout:\n\n298\n\nkfree(umem);\n\n299\n\n}\n\n300\n\nEXPORT_SYMBOL(ib_umem_release);\n\n301\n\n302\n\nintib_umem_page_count(structib_umem*umem)\n\n303\n\n{\n\n304\n\nintshift;\n\n305\n\ninti;\n\n306\n\nintn;\n\n307\n\nstructscatterlist*sg;\n\n308\n\n309\n\nif(umem->odp_data)\n\n310\n\nreturnib_umem_num_pages(umem);\n\n311\n\n312\n\nshift=ilog2(umem->page_size);\n\n313\n\n314\n\nn=0;\n\n315\n\nfor_each_sg(umem->sg_head.sgl,sg,umem->nmap,i)\n\n316\n\nn+=sg_dma_len(sg)>>shift;\n\n317\n\n318\n\nreturnn;\n\n319\n\n}\n\n320\n\nEXPORT_SYMBOL(ib_umem_page_count);\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\nintib_umem_copy_from(void*dst,structib_umem*umem,size_toffset,\n\n333\n\nsize_tlength)\n\n334\n\n{\n\n335\n\nsize_tend=offset+length;\n\n336\n\nintret;\n\n337\n\n338\n\nif(offset>umem->length||length>umem->length-offset){\n\n339\n\npr_err(\"ib_umem_copy_from not in range. offset: %zd umem length: %zd end: %zd\\n\",\n\n340\n\noffset,umem->length,end);\n\n341\n\nreturn-EINVAL;\n\n342\n\n}\n\n343\n\n344\n\n345\n\nret=sg_pcopy_to_buffer(umem->sg_head.sgl,umem->nmap,dst,length,\n\n346\n\noffset+ib_umem_offset(umem));\n\n347\n\n348\n\nret=0;\n\n349\n\n350\n\nif(ret<0)\n\n351\n\nreturnret;\n\n352\n\nelseif(ret!=length)\n\n353\n\nreturn-EINVAL;\n\n354\n\nelse\n\n355\n\nreturn0;\n\n356\n\n}\n\n357\n\nEXPORT_SYMBOL(ib_umem_copy_from);\n\n358\n\n359"
    }
}