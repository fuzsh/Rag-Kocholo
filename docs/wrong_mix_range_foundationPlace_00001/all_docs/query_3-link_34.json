{
    "id": "wrong_mix_range_foundationPlace_00001_3",
    "rank": 34,
    "data": {
        "url": "https://github.com/terraform-google-modules/terraform-example-foundation",
        "read_more_link": "",
        "language": "en",
        "title": "foundation: Shows how the CFT modules can be composed to build a secure cloud foundation",
        "top_image": "https://opengraph.githubassets.com/075deb8a94c8020a579a8fb205cdcb299b4fc5fa03e59cd25626ce09f568bc1b/terraform-google-modules/terraform-example-foundation",
        "meta_img": "https://opengraph.githubassets.com/075deb8a94c8020a579a8fb205cdcb299b4fc5fa03e59cd25626ce09f568bc1b/terraform-google-modules/terraform-example-foundation",
        "images": [
            "https://avatars.githubusercontent.com/u/55760939?s=64&v=4",
            "https://avatars.githubusercontent.com/in/2740?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10992720?s=64&v=4",
            "https://avatars.githubusercontent.com/u/14035345?s=64&v=4",
            "https://avatars.githubusercontent.com/u/55760933?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4495773?s=64&v=4",
            "https://avatars.githubusercontent.com/u/60107303?s=64&v=4",
            "https://avatars.githubusercontent.com/in/29110?s=64&v=4",
            "https://avatars.githubusercontent.com/u/108549791?s=64&v=4",
            "https://avatars.githubusercontent.com/u/7413424?s=64&v=4",
            "https://avatars.githubusercontent.com/u/13495724?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1347387?s=64&v=4",
            "https://avatars.githubusercontent.com/u/42391123?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2367233?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "terraform-google-modules"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Shows how the CFT modules can be composed to build a secure cloud foundation - terraform-google-modules/terraform-example-foundation",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/terraform-google-modules/terraform-example-foundation",
        "text": "This example repository shows how the CFT Terraform modules can build a secure Google Cloud foundation, following the Google Cloud Enterprise Foundations Blueprint (previously called the Security Foundations Guide). The supplied structure and code is intended to form a starting point for building your own foundation with pragmatic defaults that you can customize to meet your own requirements.\n\nThe intended audience of this blueprint is large enterprise organizations with a dedicated platform team responsible for deploying and maintaining their GCP environment, who is commited to separation of duties across multiple teams and managing their environment solely through version-controlled Infrastructure as Code. Smaller organizations looking for a turnkey solution might prefer other options such as Google Cloud Setup\n\nThis repository is intended as an example to be forked, tweaked, and maintained in the user's own version-control system; the modules within this repository are not intended for use as remote references. Though this blueprint can help accelerate your foundation design and build, we assume that you have the engineering skills and teams to deploy and customize your own foundation based on your own requirements.\n\nWe will support:\n\nCode is semantically valid, pinned to known good versions, and passes terraform validate and lint checks\n\nAll PR to this repo must pass integration tests to deploy all resources into a test environment before being merged\n\nFeature requests about ease of use of the code, or feature requests that generally apply to all users, are welcome\n\nWe will not support:\n\nIn-place upgrades from a foundation deployed with an earlier version to a more recent version, even for minor version changes, might not be feasible. Repository maintainers do not have visibility to what resources a user deploys on top of their foundation or how the foundation was customized in deployment, so we make no guarantee about avoiding breaking changes.\n\nFeature requests that are specific to a single user's requirement and not representative of general best practices\n\nThis repo contains several distinct Terraform projects, each within their own directory that must be applied separately, but in sequence. Stage 0-bootstrap is manually executed, and subsequent stages are executed using your preferred CI/CD tool.\n\nEach of these Terraform projects are to be layered on top of each other, and run in the following order.\n\nThis stage executes the CFT Bootstrap module which bootstraps an existing Google Cloud organization, creating all the required Google Cloud resources and permissions to start using the Cloud Foundation Toolkit (CFT). For CI/CD Pipelines, you can use either Cloud Build (by default) or Jenkins. If you want to use Jenkins instead of Cloud Build, see README-Jenkins on how to use the Jenkins sub-module.\n\nThe bootstrap step includes:\n\nThe prj-b-seed project that contains the following:\n\nTerraform state bucket\n\nCustom service accounts used by Terraform to create new resources in Google Cloud\n\nThe prj-b-cicd project that contains the following:\n\nA CI/CD Pipeline implemented with either Cloud Build or Jenkins\n\nIf using Cloud Build, the following items:\n\nCloud Source Repository\n\nArtifact Registry\n\nIf using Jenkins, the following items:\n\nA Compute Engine instance configured as a Jenkins Agent\n\nCustom service account to run Compute Engine instances for Jenkins Agents\n\nVPN connection with on-prem (or wherever your Jenkins Controller is located)\n\nIt is a best practice to separate concerns by having two projects here: one for the Terraform state and one for the CI/CD tool.\n\nThe prj-b-seed project stores Terraform state and has the service accounts that can create or modify infrastructure.\n\nThe prj-b-cicd project holds the CI/CD tool (either Cloud Build or Jenkins) that coordinates the infrastructure deployment.\n\nTo further separate the concerns at the IAM level as well, a distinct service account is created for each stage. The Terraform custom service accounts are granted the IAM permissions required to build the foundation. If using Cloud Build as the CI/CD tool, these service accounts are used directly in the pipeline to execute the pipeline steps (plan or apply). In this configuration, the baseline permissions of the CI/CD tool are unchanged.\n\nIf using Jenkins as the CI/CD tool, the service account of the Jenkins Agent (sa-jenkins-agent-gce@prj-b-cicd-xxxx.iam.gserviceaccount.com) is granted impersonation access so it can generate tokens over the Terraform custom Service Accounts. In this configuration, the baseline permissions of the CI/CD tool are limited.\n\nAfter executing this step, you will have the following structure:\n\nWhen this step uses the Cloud Build submodule, it sets up the cicd project (prj-b-cicd) with Cloud Build and Cloud Source Repositories for each of the stages below. Triggers are configured to run a terraform plan for any non-environment branch and terraform apply when changes are merged to an environment branch (development, nonproduction or production). Usage instructions are available in the 0-bootstrap README.\n\nThe purpose of this stage is to set up the common folder used to house projects that contain shared resources such as Security Command Center notification, Cloud Key Management Service (KMS), org level secrets, and org level logging. This stage also sets up the network folder used to house network related projects such as DNS Hub, Interconnect, network hub, and base and restricted projects for each environment (development, nonproduction or production). This will create the following folder and project structure:\n\nUnder the common folder, a project prj-c-logging is used as the destination for organization wide sinks. This includes admin activity audit logs from all projects in your organization and the billing account.\n\nLogs are collected into a logging bucket with a linked BigQuery dataset, which can be used for ad-hoc log investigations, querying, or reporting. Log sinks can also be configured to export to Pub/Sub for exporting to external systems or Cloud Storage for long-term storage.\n\nNotes:\n\nLog export to Cloud Storage bucket has optional object versioning support via log_export_storage_versioning.\n\nThe various audit log types being captured in BigQuery are retained for 30 days.\n\nFor billing data, a BigQuery dataset is created with permissions attached, however you will need to configure a billing export manually, as there is no easy way to automate this at the moment.\n\nAnother project created under the common folder. This project will host the Security Command Center notification resources at the organization level. This project will contain a Pub/Sub topic, a Pub/Sub subscription, and a Security Command Center notification configured to send all new findings to the created topic. You can adjust the filter when deploying this step.\n\nAnother project created under the common folder. This project is allocated for Cloud Key Management for KMS resources shared by the organization.\n\nUsage instructions are available for the org step in the README.\n\nAnother project created under the common folder. This project is allocated for Secret Manager for secrets shared by the organization.\n\nUsage instructions are available for the org step in the README.\n\nThis project is created under the network folder. This project will host the DNS hub for the organization.\n\nAnother project created under the network folder. This project will host the Dedicated Interconnect Interconnect connection for the organization. In case of Partner Interconnect, this project is unused and the VLAN attachments will be placed directly into the corresponding hub projects.\n\nUnder the network folder, two projects, one for base and another for restricted network, are created per environment (development, nonproduction, and production) which is intended to be used as a Shared VPC host project for all projects in that environment. This stage only creates the projects and enables the correct APIs, the following networks stages, 3-networks-dual-svpc and 3-networks-hub-and-spoke, create the actual Shared VPC networks.\n\nThe purpose of this stage is to set up the environments folders that contain shared projects for each environemnt. This will create the following folder and project structure:\n\nUnder the environment folder, a project is created per environment (development, nonproduction, and production), which is intended to be used by Cloud Key Management for KMS resources shared by the environment.\n\nUsage instructions are available for the environments step in the README.\n\nUnder the environment folder, a project is created per environment (development, nonproduction, and production), which is intended to be used by Secret Manager for secrets shared by the environment.\n\nUsage instructions are available for the environments step in the README.\n\nThis step focuses on creating a Shared VPC per environment (development, nonproduction, and production) in a standard configuration with a reasonable security baseline. Currently, this includes:\n\n(Optional) Example subnets for development, nonproduction, and production inclusive of secondary ranges for those that want to use Google Kubernetes Engine.\n\nHierarchical firewall policy created to allow remote access to VMs through IAP, without needing public IPs.\n\nHierarchical firewall policy created to allow for load balancing health checks.\n\nHierarchical firewall policy created to allow Windows KMS activation.\n\nPrivate service networking configured to enable workload dependant resources like Cloud SQL.\n\nBase Shared VPC with private.googleapis.com configured for base access to googleapis.com and gcr.io. Route added for VIP so no internet access is required to access APIs.\n\nRestricted Shared VPC with restricted.googleapis.com configured for restricted access to googleapis.com and gcr.io. Route added for VIP so no internet access is required to access APIs.\n\nDefault routes to internet removed, with tag based route egress-internet required on VMs in order to reach the internet.\n\n(Optional) Cloud NAT configured for all subnets with logging and static outbound IPs.\n\nDefault Cloud DNS policy applied, with DNS logging and inbound query forwarding turned on.\n\nUsage instructions are available for the networks step in the README.\n\nThis step configures the same network resources that the step 3-networks-dual-svpc does, but this time it makes use of the architecture based on the hub-and-spoke reference network model.\n\nUsage instructions are available for the networks step in the README.\n\nThis step is focused on creating service projects with a standard configuration that are attached to the Shared VPC created in the previous step and application infrastructure pipelines. Running this code as-is should generate a structure as shown below:\n\nThe code in this step includes two options for creating projects. The first is the standard projects module which creates a project per environment, and the second creates a standalone project for one environment. If relevant for your use case, there are also two optional submodules which can be used to create a subnet per project, and a dedicated private DNS zone per project.\n\nUsage instructions are available for the projects step in the README.\n\nThe purpose of this step is to deploy a simple Compute Engine instance in one of the business unit projects using the infra pipeline set up in 4-projects.\n\nUsage instructions are available for the app-infra step in the README.\n\nAfter all steps above have been executed, your Google Cloud organization should represent the structure shown below, with projects being the lowest nodes in the tree.\n\nThere are three main named branches: development, nonproduction, and production that reflect the corresponding environments. These branches should be protected. When the CI/CD Pipeline (Jenkins or Cloud Build) runs on a particular named branch (say for instance development), only the corresponding environment (development) is applied. An exception is the shared environment, which is only applied when triggered on the production branch. This is because any changes in the shared environment may affect resources in other environments and can have adverse effects if not validated correctly.\n\nDevelopment happens on feature and bug fix branches (which can be named feature/new-foo, bugfix/fix-bar, etc.) and when complete, a pull request (PR) or merge request (MR) can be opened targeting the development branch. This will trigger the CI/CD Pipeline to perform a plan and validate against all environments (development, nonproduction, shared, and production). After the code review is complete and changes are validated, this branch can be merged into development. This will trigger a CI/CD Pipeline that applies the latest changes in the development branch on the development environment.\n\nAfter validated in development, changes can be promoted to nonproduction by opening a PR or MR targeting the nonproduction branch and merging them. Similarly, changes can be promoted from nonproduction to production.\n\nThis repo uses the terraform-tools component of the gcloud CLI to validate the Terraform plans against a library of Google Cloud policies.\n\nThe Scorecard bundle was used to create the policy-library folder with one extra constraint added.\n\nSee the policy-library documentation if you need to add more constraints from the samples folder in your configuration based in your type of workload.\n\nStep 1-org has instructions on the creation of the shared repository to host these policies.\n\nSome variables used to deploy the steps have default values, check those before deployment to ensure they match your requirements. For more information, there are tables of inputs and outputs for the Terraform modules, each with a detailed description of their variables. Look for variables marked as not required in the section Inputs of these READMEs:\n\nStep 0-bootstrap: If you are using Cloud Build in the CI/CD Pipeline, check the main README of the step. If you are using Jenkins, check the README of the module jenkins-agent.\n\nStep 1-org: The README of the environment shared.\n\nStep 2-environments: The READMEs of the environments development, nonproduction, and production\n\nStep 3-networks-dual-svpc: The READMEs of the environments shared, development, nonproduction, and production\n\nStep 3-networks-hub-and-spoke: The READMEs of the environments shared, development, nonproduction, and production\n\nStep 4-projects: The READMEs of the environments shared, development, nonproduction, and production\n\nRefer to the errata summary for an overview of the delta between the example foundation repository and the Google Cloud security foundations guide."
    }
}