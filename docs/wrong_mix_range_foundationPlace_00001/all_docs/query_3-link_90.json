{
    "id": "wrong_mix_range_foundationPlace_00001_3",
    "rank": 90,
    "data": {
        "url": "https://developer.android.com/jetpack/androidx/releases/compose-foundation",
        "read_more_link": "",
        "language": "en",
        "title": "Compose Foundation",
        "top_image": "https://developer.android.com/static/images/social/android-developers.png",
        "meta_img": "https://developer.android.com/static/images/social/android-developers.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/lockup.svg",
            "https://developer.android.com/_static/android/images/logo-x.svg",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png",
            "https://developer.android.com/_static/android/images/logo-linkedin.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/favicon.svg",
        "meta_site_name": "Android Developers",
        "canonical_link": "https://developer.android.com/jetpack/androidx/releases/compose-foundation",
        "text": "Write Jetpack Compose applications with ready to use building blocks and extend foundation to build your own design system pieces.\n\nLatest Update Stable Release Release Candidate Beta Release Alpha Release July 24, 2024 1.6.8 - 1.7.0-beta06 -\n\nStructure\n\nCompose is combination of 7 Maven Group Ids within androidx. Each Group contains a targeted subset of functionality, each with its own set of release notes.\n\nThis table explains the groups and links to each set of release notes.\n\nGroupDescription compose.animationBuild animations in their Jetpack Compose applications to enrich the user experience. compose.compilerTransform @Composable functions and enable optimizations with a Kotlin compiler plugin. compose.foundationWrite Jetpack Compose applications with ready to use building blocks and extend foundation to build your own design system pieces. compose.materialBuild Jetpack Compose UIs with ready to use Material Design Components. This is the higher level entry point of Compose, designed to provide components that match those described at www.material.io. compose.material3Build Jetpack Compose UIs with Material Design 3 Components, the next evolution of Material Design. Material 3 includes updated theming and components and Material You personalization features like dynamic color, and is designed to be cohesive with the new Android 12 visual style and system UI. compose.runtimeFundamental building blocks of Compose's programming model and state management, and core runtime for the Compose Compiler Plugin to target. compose.uiFundamental components of compose UI needed to interact with the device, including layout, drawing, and input.\n\nDeclaring dependencies\n\nTo add a dependency on Compose, you must add the Google Maven repository to your project. Read Google's Maven repository for more information.\n\nAdd the dependencies for the artifacts you need in the build.gradle file for your app or module:\n\nGroovy\n\ndependencies { implementation \"androidx.compose.foundation:foundation:1.6.8\" } android { buildFeatures { compose true } composeOptions { kotlinCompilerExtensionVersion = \"1.5.14\" } kotlinOptions { jvmTarget = \"1.8\" } }\n\nKotlin\n\ndependencies { implementation(\"androidx.compose.foundation:foundation:1.6.8\") } android { buildFeatures { compose = true } composeOptions { kotlinCompilerExtensionVersion = \"1.5.14\" } kotlinOptions { jvmTarget = \"1.8\" } }\n\nFor more information about dependencies, see Add build dependencies.\n\nFeedback\n\nYour feedback helps make Jetpack better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues in this library before you create a new one. You can add your vote to an existing issue by clicking the star button.\n\nCreate a new issue\n\nSee the Issue Tracker documentation for more information.\n\nVersion 1.7\n\nVersion 1.7.0-beta06\n\nJuly 24, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-beta06 is released. Version 1.7.0-beta06 contains these commits.\n\nVersion 1.7.0-beta05\n\nJuly 10, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-beta05 is released. Version 1.7.0-beta05 contains these commits.\n\nBug Fixes\n\nFix for treatment of Nan values in SnapFlingBehavior and Pager.\n\nVersion 1.7.0-beta04\n\nJune 26, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-beta04 is released. Version 1.7.0-beta04 contains these commits.\n\nBug Fixes\n\nAvoid crashes when measuring very large text lines (e.g. 10k characters) (8157ab)\n\nFixes measurement of very large text causing crash in the new BasicTextField (6b7575)\n\nReverts a behavior change in Row/Column measurement that breaks Text usage in certain scenarios (69e8ba)\n\nVersion 1.7.0-beta03\n\nJune 12, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-beta03 is released. Version 1.7.0-beta03 contains these commits.\n\nVersion 1.7.0-beta02\n\nMay 29, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-beta02 is released. Version 1.7.0-beta02 contains these commits.\n\nAPI Changes\n\nAdds an experimental API for configuring prefetch behavior of LazyGrids similar to the existing experimental API for LazyLists. This includes support for prefetching items in nested LazyGrids. Similiar to LazyListPrefetchStrategy, the implementation default is to prefetch the first 2 nested items of each grid, but this can be configured by the new LazyGridPrefetchStrategy(nestedPrefetchItemCount) and LazyListPrefetchStrategy#onNestedPrefetch APIs. (I591c4)\n\nRenamed SemanticsProperties.Editable to IsEditable and changes SemanticsPropertyReceiver.editable to a val isEditable. The property is now a boolean and always specified by text fields. (I8acd8)\n\nMoved basicMarquee default values into MarqueeDefaults object. (I12ff6)\n\nRenamed basicMarquee delayMillis parameter to repeatDelayMillis. (I12ff6)\n\nUpdate API for styling the links: moved the TextLinkStyles to the TextStyle and removed the TextDefaults from material (I5477b)\n\nBug Fixes\n\nRenamed LayoutCoordinates.introducesFrameOfReference to LayoutCoordinates.introducesMotionFrameOfReference to better reflect its purpose. Renamed related function to calculate coordinates based on that flag. (I3a330)\n\nRemoved 'Default' from the MarqueeDefaults properties. (I1d8a0)\n\nRemoved 'Marquee' from MarqueeDefaults properties. (Iad4f4)\n\nRemoved TextLinkStyles from the TextStyle class. Instead, TextLinkStyles is part of the LinkAnntation constructor and the AnnotatedString.fromHtml method (I90b2b)\n\nFixed a bug where Pager would snap when flinging towards a bound while already settled at the bound. (I9f373, b/339171222)\n\nBTF2 now has correct mouse selection gestures. (Ibe8c6)\n\nExternal Contribution\n\nResubmit 'Make compose/measure time calculation content-type based in prefetch to improve accuracy' (Iea622)\n\nMake compose/measure time calculation content-type based in prefetch to improve accuracy (Ibccb1)\n\nMake WindowInsetsPadding modifiers available from common source set (I070b2)\n\nVersion 1.7.0-beta01\n\nMay 14, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-beta01 is released. Version 1.7.0-beta01 contains these commits.\n\nAPI Changes\n\nAdded KeyboardOptions.shouldShowKeyboardOnFocus property back as deprecated hidden for binary compatibility. (I15cfe)\n\nModifier.anchoredDraggable now reverses drag deltas by default for components with a Horizontal orientation when used in an RTL layout. (I3c6d9)\n\nAnnotatedString.hasEqualsAnnotations is now hasEqualAnnotations. (I685c0)\n\nUpdated the API for getting Material themed links in text. Specifically, removed the methods from the TextDefaults for constructing themed LinkAnnotations and parse HTML with themed links. Instead, added a TextLinkStyles class that allows to style the links as a parameter to the Text composable. (I31b93)\n\nReplaced onDragStarted and onDragStopped with non-suspend callbacks. (I59de8)\n\nBug Fixes\n\nFixed a bug where Pager would crash when the contentPadding was bigger than the incoming constraints. Pager now coerces negative values returned from PageSize to 0. (Iba5d8, b/314008560)\n\nVersion 1.7.0-alpha08\n\nMay 1, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha08 is released. Version 1.7.0-alpha08 contains these commits.\n\nNew Features\n\nAdded right-click context menu to BasicTextField and SelectionContainer with items for cut, copy, paste, and select-all actions. (If8c93, Ia2b49, I6f268)\n\nAPI Changes\n\nLazyLayout prefetch requests can be marked as urgent now, meaning that we expect this item to be needed in the next frame and want to ignore frame budget to make sure to do more work in advance (Id513f)\n\nRenamed isPositionedByParentWithDirectManipulation to introducesFrameOfReference. Note that it now has the reverse effect, meaning that by default, most LayoutCoordinates introduce a frame of reference, and, only when placed under direct manipulation the property will be false. To query position with only those that introduce a frame of reference, use positionInLocalFrameOfReference(...). Or positionInLocalLookaheadFrameOfReference from a LookaheadScope. (Ifc5f7)\n\nRenamed onClicked to onClick inside LinkInteractionListener (Iaa35c)\n\nChange action lambda for getScrollViewportLength as per API council feedback. (Ibc74a)\n\nRenamed stylus handwriting delegation APIs. (Ica45f, b/327271923)\n\nRename TextInclusionStrategy.isInside to isIncluded. Make Paragraph/MultiParagraph#getRangeForRect() return type non nullable. (I51f26)\n\nBug Fixes\n\nAdded \"Select all\" to all text contextual menus in SelectionContainer. (Ib750e, b/240143283)\n\nFixed long screenshot capture for scrolling containers with reverseScrolling=true. (I7c59c)\n\nFixed an issue where AnchoredDraggableState's currentValue would change when approaching the state's bounds. (Iea30b, b/333846848)\n\nExternal Contribution\n\nRenamed PrefetchExecutor -> PrefetchScheduler to better reflect its responsibilities. (Ib9154)\n\nAdded support for prefetching items in nested LazyLists (e.g. a LazyColumn that renders nested LazyRows). This change is expected to reduce frame drops during scrolling for these LazyLists. The implementation default is to prefetch the first 2 nested items, however this behavior can be controlled by the new LazyLayoutPrefetchStrategy(nestedPrefetchItemCount) and LazyListPrefetchStrategy#onNestedPrefetch APIs. (I51952)\n\nVersion 1.7.0-alpha07\n\nApril 17, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha07 is released. Version 1.7.0-alpha07 contains these commits.\n\nNew Features\n\nAdded a TextDefaults object that contains methods to construct a LinkAnnotation and parse HTML-tagged string which apply MaterialTheme to the links. (I98532, b/139312671)\n\nItem appearance and disappearance animation support was added intoLazyVerticalGrid and LazyHorizontalGrid. Previously it was possible to add Modifier.animateItemPlacement() modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called Modifier.animateItem() which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (Ib7d12, b/330510929)\n\nItem appearance and disappearance animation support was added into LazyVerticalStaggeredGrid and LazyHorizontalStaggeredGrid. Previously it was possible to add Modifier.animateItemPlacement() modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called Modifier.animateItem() which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (I69bc9, b/330511290)\n\nAPI Changes\n\nAdds ContextMenuColors and the associated LocalContextMenuTheme ProvidableCompositionLocal. The colors of the context menu on text fields and selectable text can be modified by providing the composition local. (Ifa154)\n\nText links got pressed state styling option in addition to normal styling, hovered and focused. (I5f864, b/139312671)\n\nIntroduce ViewConfiguration.HandwritingGestureLineMargin for handwriting gestures. Support handwriting gesture for BasicTextField. (Ie6e13, b/325660505)\n\nRemoved DelegatableNode.scrollIntoView for the 1.7 release since we didn't have time to finish stabilizing the rest of the related API surface. This function will be re-introduced in 1.8 (I6cf61, b/333421581, b/332900232)\n\nWhen querying Layout coordinates, you may now use the excludeDirectManipulationOffset argument to exclude the offset set by parent Layouts that placed their children using Placeable.PlacementScope.withDirectManipulationPlacement. Likewise, a Layout that changes the position of its children frequently may now place them using withDirectManipulationPlacement (such as Scroll, implemented by default). This helps approachLayout based animations to be more intuitive, having now the opportunity to differentiate what offset to animate, and what to apply directly when deciding to animate their approach. (I60ec7)\n\nIntroduce requestScrollToItem for LazyStaggeredGrid. For each measure-pass, the client may now opt-out of maintaining index based on the key by calling requestScrollToItem. This does not change existing behavior in any way unless requestScrollToItem is called. (I63983)\n\nIntroduce requestScrollToPage in Pager. For each measure-pass, the client may now opt-out of maintaining index based on the key by calling requestScrollToPage. This does not change existing behavior in any way unless requestScrollToPage is called. (Ic4213)\n\nIntroduced requestScrollToItem for LazyGrids. For each measure-pass, the client may now opt-out of maintaining index based on the key by calling requestScrollToItem. This does not change existing behavior in any way unless requestScrollToItem is called. (I0a7a0)\n\nClickableText is marked as deprecated. To add links to the text, create an AnnotatedString with a LinkAnnotation corresponding to your link and pass this AnnotatedString to the Text composable (I34d4b, b/323346994)\n\nUrlAnnotation is deprecated, use LinkAnnotation.Url instead. If you're using Material theming, then use TextDefaults object to create the annotation with Material theming applied to it (I8d180, b/323346545)\n\nString.parseAsHtml renamed to AnnotatedString.Companion.fromHtml (I43dcd)\n\nAdded styling arguments (linkStyle, focusedLinkStyle, hoveredLinkStyle) and a link interaction listener to the parseAsHtml method. When parsing the HTML-tagged string with <a> tags, the method will construct a LinkAnnotation.Url for each such tag and pass the styling objects and link interaction listener to each annotation. (I7c977)\n\nLinkAnnotation now takes the state-based styling arguments and a LinkInteractionListener. Add this annotation to the AnnotatedString to get a hyperlink. By passing focusedState and/or hoveredState you can define the visual configuration for links when they are focused and/or hovered. (I81ce4, b/139312671)\n\nThe feature flag for long screenshots has been removed. (I28648, b/329128246)\n\nLazyColumn will now render sticky headers correctly in long screenshots. (I8d239, b/329296635)\n\nStabilized majority of the remaining experimental APIs that were introduced with the new BasicTextField. (I714e2)\n\nAdded textObfuscationCharacter parameter to BasicSecureTextField that controls which character to use while obfuscating the contents. (I0588b)\n\nNestedScroll sources Drag and Fling are being replaced by UserInput and SideEffect to accommodate for the extended definition of these sources that now include animations (Side Effect) and Mouse Wheel and Keyboard (UserInput). (I40579)\n\nIntroduce LocalBringIntoViewSpec, a platform dependent focus scrolling behavior that is applied at the Scrollable modifier layer. (I27aa5, b/317453911)\n\nRemoved TextFieldCharSequence. TextFieldBuffer.originalValues is replaced with TextFieldBuffer.originalText and TextFieldBuffer.originalSelection. (I2c7d6)\n\nImeOptions.hintLocales is no longer nullable. If you want to pass an empty Locale list, please use LocaleList.Empty. (Ic5bc4)\n\nRenamed getOffsetFractionForPage to getOffsetDistanceInPages. (Ia05e2)\n\nBug Fixes\n\nWhen InputTransformations are joined with next, their KeyboardOptions are now properly merged by individual options using the new KeyboardOptions.merge method. (Ie5304, b/295951492)\n\nAnchoredDraggableState's targetValue now does not consider positional thresholds anymore. It now has an implicit threshold of 50%, meaning that the targetValue changes at the midpoint between two anchors. (I82c2c)\n\nExternal Contribution\n\nRenamed 2 scroll APIs (I56a75)\n\nVersion 1.7.0-alpha06\n\nApril 3, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha06 is released. Version 1.7.0-alpha06 contains these commits.\n\nNew Features\n\nItem appearance and disappearance animation support was added into LazyColumn and LazyRow. Previously it was possible to add Modifier.animateItemPlacement() modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called Modifier.animateItem() which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (I2d7f7, b/150812265)\n\nClients of LazyColumn/LazyRowmay now opt-out of maintaining an index based on the key for the upcoming measure-pass by calling a non-suspend LazyListState.requestToScroll. (I98036, b/209652366)\n\nAdded parseAsHtml method for styled strings: it allows to convert a string marked with HTML tags into AnnotatedString. Note that not all tags are supported, for example you won't be able to display bullet lists yet. (I84d3d)\n\nImplemented experimental support for long screenshots in Compose scroll containers using the official Android API (ScrollCaptureCallback). This feature is experimental and may not currently handle all cases correctly. For that reason it is currently disabled by default. To opt-in, set the ComposeFeatureFlag_LongScreenshotsEnabled flag to true. This flag will be removed before 1.7 beta. (I2b055, b/329296471)\n\nIntroduce new GraphicsLayer API to provide more flexibility in placement and rendering of GraphicsLayer instances and support intrinsic rendering features without needing to coordinate with Composable implementations to specify GraphicsLayer modifier instances.\n\nAPI Changes\n\nAll KeyboardOptions parameters now have an unspecified value by default. Added KeyboardOptions.merge method.\n\nRenamed KeyboardOptions.autoCorrect to autoCorrectEnabled and made it nullable, where null indicates no value was specified. (Ia8ba0, b/295951492)\n\nRenamed outOfBoundsPageCount to beyondViewportPageCount. (I129c6)\n\nfun ClipEntry.getMetadata() is changed to val ClipEntry.clipMetadata. (I50155)\n\nRemoved TextFieldState.valueAsFlow(). Prefer using snapshotFlow { state.text }, or snapshotFlow { TextFieldCharSequence(state.text, state.selection) } (I7d629)\n\nReorganized InputTransformation.transformInput parameters. Removed originalValue: TextFieldCharSequence. Instead TextFieldBuffer now carries this value with the same name. Also removed the valueWithChanges: TextFieldBuffer parameter. TextFieldBuffer now is the receiver scope on the function. (I919cc)\n\nBasicTextField(state) variant and BasicSecureTextField now use KeyboardActionHandler instead of KeyboardActions to process actions taken by the software keyboard. (I58dda)\n\nStylus handwriting delegation APIs to support stylus handwriting on \"fake\" text input fields. (I9c09c, b/327271923)\n\nRenamed KeyboardOptions.shouldShowKeyboardOnFocus to showKeyboardOnFocus. (Ib4b7a, b/295951492)\n\nRemoved hintMediaTypes parameter from Modifier.contentReceiver. Developers were already encouraged to check the received TransferableContent's media type since it could be incompatible with the configured hintMediaTypes. (I82f99)\n\nReordered the parameters of BasicSecureTextField. Removed keyboardType and imeAction parameters in favor of full KeyboardOptions class while keeping the same defaults appropriate for BasicSecureTextField. Also removed the scrollState parameter. (Ibbfa9)\n\nTextFieldState.text's type is changed from TextFieldCharSequence to just CharSequence. Therefore, added TextFieldState.selection: TextRange and TextFieldState.composition: TextRange? to read the current selection and composition values directly from the state object.\n\nRemoved TextFieldState.forEachTextValue. (Idb2a2)\n\nRemoved ClipboardManager.getClipMetadata and ClipboardManager.hasClip functions. Please use clipEntry.getMetadata() to read the current clip entry's metadata. Also check ClipboardManager.getClip's result if it's null or not to understand whether Clipboard has a current clip. (I50498)\n\nClipboardManager.setClip now accepts null to be able to clear the Clipboard. (I7d2e9)\n\nReceiveContentListener is converted to a function interface. Also Modifier.receiveContent overload that takes in a lambda is removed since ReceiveContentListener is a function interface now.\n\nModifier.receiveContent is renamed to Modifier.contentReceiver. (I1e6af)\n\nRenamed TransferableContent.consumeEach to TransferableContent.consume. (I1e462)\n\nrememberTextFieldState has graduated to a Stable API. (I37999)\n\nBug Fixes\n\nFixed a bug where BasicTextField(state) variant did not work with CJK(composition based) keyboards. (I54425)\n\nFixed a bug where Modifier.dragAndDropTarget() could reference stale data in certain scenarios with Modifier.Node re-use. (I05bb1)\n\nReverted a recent contract change where AnchoredDraggableState#anchoredDrag calls would snap at the end of an anchoredDrag operation. (I95715)\n\nVersion 1.7.0-alpha05\n\nMarch 20, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha05 is released. Version 1.7.0-alpha05 contains these commits.\n\nAPI Changes\n\nRemoved experimental LocalTextLinkStyle composition local for styling hyperlinks. (Iebfa7)\n\nRemoved experimental override of BasicText with onLinkClicked argument. A replacement API for hyperlinks support will follow in the future. (I107d5)\n\nRemoved Codepoints related methods and properties under TextFieldState and TextFieldBuffer. Also removed the inChars suffixes from the remaining selection and composition related APIs. (Ief7ce)\n\nAnchoredDraggable's currentValue will now update when passing through an anchor point. Use settledValue to receive the previous currentValue semantics, only updating when settling at an anchor. The progress is now exposed as a function (requiring a starting and end point) instead of a property. (Ibe6e8, b/318707189, b/298271489, b/294991954)\n\nBasicTextField(state), TextFieldState, InputTransformation, OutputTransformation, TextFieldLineLimits, TextFieldDecorator are graduated to stable. (I9582b)\n\nIntroduced InterceptPlatformTextInput for helping write low-level IME-related tests and other low-level IME use cases. PlatformTextInputTestOverride has been deprecated. (I862ed, b/322680547)\n\nSplit restrictedConstraints() to two methods: fitPrioritizingWidth() and fitPrioritizingHeight() (I6d7fd)\n\nExternal Contribution\n\nAdded 2 new API isLastScrollForward/isLastScrollBackward to check scroll direction for latest scroll action, return false if no scroll action yet. (I63a0e)\n\nVersion 1.7.0-alpha04\n\nMarch 6, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha04 is released. Version 1.7.0-alpha04 contains these commits.\n\nAPI Changes\n\nSupport stylus handwriting feature on devices after Android U. (I002e4)\n\nAdded hintLocales to KeyboardOptions to provide TextFields with the ability to hint IMEs with specific locales to preset a preferred language. (Id18c2)\n\nRemoved the Experimental BasicTextField2 and BasicSecureTextField overloads that took value: String and onValueChange: () -> String parameters. (I568b4)\n\nAdd an optional applySemantics function to InputTransformation to influence the semantics of the BasicTextField2 that it's applied to. (I74a2f, b/170648072)\n\nIn this CL we are adding the GetScrollViewportLength semantic action so we can pipe up information about the components being scrolled in compose to the a11y system. This CL also applies the usage of said property in Foundation Scrollable Lists. (Ic5fa2)\n\nBasicTextField2 is renamed to BasicTextField. (Ie5713)\n\nFocusRequester.createRefs is now stable (I4d92c, b/261436820)\n\nIntroduced DelegatableNode.scrollIntoView() to allow modifier nodes to make scrollIntoView requests directly. (I2b3b7, b/299939840)\n\nIntroduced DelegatableNode.requireView() to allow modifier nodes to get the current Android View without reading a composition local. (I40768)\n\nIntroducing contextual layout information within Contextual Flow Row Scope and Contextual Flow Column Scope, featuring line index, position, and constraints on maximum width and height to stay in specified position. Items exceeding maximum width/height may flow to the next line or be omitted based on overflow settings. (Id13f8, b/292114798)\n\nBug Fixes\n\nFixed a bug where in certain conditions toggling enabled or readOnly attributes of TextField would cause a crash. (Iae17b)\n\nVersion 1.7.0-alpha03\n\nFebruary 21, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha03 is released. Version 1.7.0-alpha03 contains these commits.\n\nAPI Changes\n\nIntroduced DelegatableNode.requireLayoutCoordinates() as a way to get a Modifier.Node's current LayoutCoordinates without needing to override onPlaced and store the coordinates in a property yourself. (Ia8657)\n\nIntroduced DelegatableNode.currentLayoutCoordinates as a way to get a Modifier.Node's current LayoutCoordinates without needing to override onPlaced and store the coordinates in a property yourself. (Iaebaa)\n\nPerformance optimizations in DraggableAnchors used by AnchoredDraggable. (I89cff)\n\nBasicTextField2 and related APIs under androidx.compose.foundation.text2 package are moved to androidx.compose.foundation.text. (I9f635)\n\nBasicTextField2 no longer accepts a CodepointTransformation parameter. Use BasicSecureTextField or OutputTransformation. (Id34ff)\n\nAdded method to compare only the annotations of two AnnotatedStrings. (I32659)\n\nIntroducing ContextualFlowRow and Enhanced FlowRow/Column with MaxLines and Overflow. We are excited to announce enhancements to the experimental FlowRow and FlowColumn, now featuring maxLines and overflow support, alongside the debut of ContextualFlowRow and ContextualFlowColumn. This update is designed to provide performance optimal components, where ContextualFlow* is perfect for a large number of items making use of a small maxLines config and dynamic +N see more buttons, and FlowRow and FlowColumn is perfect for a small number of items, less than 100 items. Important: To maintain existing behavior in FlowRow or FlowColumn where all items are composed regardless of if they fit the cross axis max, set overflow to FlowRowOverflow.Visible or FlowColumnOverflow.Visible during initialization. Explore ContextualFlowRowSample and FlowRowSample for examples of these new features in action. (Ib9135, b/293577082)\n\nBug Fixes\n\nCursor animation no longer requests frames between on and off states. (Ia2253)\n\nKeyboardOptions' deprecated copy constructors will now correctly copy all properties. (If12de)\n\nVersion 1.7.0-alpha02\n\nFebruary 7, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha02 is released. Version 1.7.0-alpha02 contains these commits.\n\nAPI Changes\n\nHorizontalPager, VerticalPager and PagerState are promoted to stable. (I67660, b/316966909)\n\nAdded LocalTextLinkStyle composition local that allows to change the style of the links in Text across the app. If you're using your own theme in the app, you should be setting this composition local according to your theming. When using Material theme the color of the link by default will be set to Material's primary color. (I7eb10)\n\nIntroduced receiveContent modifier that provides developers with a way to receive rich content in Jetpack Compose.\n\nreceiveContent integrates with BasicTextField2 to accept rich content provided by the software keyboard, or via Clipboard paste action. (I81b72)\n\nIn this change we're replacing SnapFlingBehavior with TargetedFlingBehavior in pager to unlock other use cases and provide greater flexibility. (I762ea)\n\nIn this change we're making Snapping APIs Stable. We're also cleaning up some of the testing code and adding more samples to Snapping. (Id8da9)\n\nIntroduce TargetedFlingBehavior, a FlingBehavior that allows propagating information about the state of the ongoing animation and it's target scroll offset. (I6a207)\n\nBug Fixes\n\nBasicTextField2 now keeps the cursor in view while typing when it has been scrolled out of view or would move out of view due to input. (Ieb856, b/237190748)\n\nExternal Contribution\n\nAdds an experimental API for configuring prefetch behavior of LazyLists. (I022a4)\n\nVersion 1.7.0-alpha01\n\nJanuary 24, 2024\n\nandroidx.compose.foundation:foundation-*:1.7.0-alpha01 is released. Version 1.7.0-alpha01 contains these commits.\n\nNew Features\n\nAdded a new Indication API, IndicationNodeFactory. This leads to more performant Indication implementations compared to the previous (now deprecated) rememberUpdatedInstance API. For migration information, see developer.android.com.\n\nclickable / combinedClickable / selectable / toggleable now accepts a nullable MutableInteractionSource parameter. If null, and the provided Indication is an IndicationNodeFactory, the Indication can be lazily created only when needed, which improves performance. If you are not hoisting and using the MutableInteractionSource, it is recommended to pass null.\n\nAPI Changes\n\nIntroduce DecayAnimation in AnchoredDraggable, this change adds a decayAnimationSpec parameter to AnchoredDraggable allowing to use decay animation when settling to one of the anchors. The change also includes renaming the existing animationSpec to snapAnimationSpec to help understanding the use case of each spec.\n\nBasicTextField2 is available for experimental use. It should be roughly at feature parity with BasicTextField, and behavior should be production-ready. However, the API remains experimental for now. Before stabilizing, it will be renamed to BasicTextField and moved into the same package.\n\nIntroduced the first draft of the OutputTransformation API for BasicTextField2. This API replaces most of the use cases of VisualTransformation in the old BasicTextField. However it is not complete yet, and some things won't work correctly, but we'd appreciate any feedback on the API usability for your use cases. (aosp/2708848)\n\nIntroduced LinkAnnotation that allows to add links and clickables into text. Links feature is not complete yet and more API changes are coming.\n\nIntroduced receiveContent modifier that provides developers with a way to receive rich content in Jetpack Compose.\n\nreceiveContent integrates with BasicTextField2 to accept rich content provided by the software keyboard, or via paste from Clipboard.\n\nKeyboardOptions.shouldShowKeyboardOnFocus allows you to disable the default behavior of BasicTextField of requesting a software keyboard on focus.\n\nTextInputService and LocalTextInputService are now deprecated. Use PlatformTextInputModifierNode to integrate directly with platform IME APIs instead. (aosp/2862698)\n\nIndication#rememberUpdatedInstance has been deprecated. It has a high unavoidable performance penalty, and prevents other optimizations. Instead, you should use the new IndicationNodeFactory API.\n\nBug Fixes\n\nBasicTextField will now pre-validate a small selection of offset mappings when VisualTransformation is passed. This helps catch common coding errors that lead to unrecoverable exceptions in later measure or draw passes. By throwing during composition, it is more likely developers will see these errors during development helping avoid production crashes. (I0fd42)\n\nVisualTransformation will not throw if you return an invalid index for an invalid index (b/316401857 )\n\nVersion 1.6\n\nVersion 1.6.8\n\nJune 12, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.8 is released. Version 1.6.8 contains these commits.\n\nVersion 1.6.7\n\nMay 1, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.7 is released. Version 1.6.7 contains these commits.\n\nVersion 1.6.6\n\nApril 17, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.6 is released. Version 1.6.6 contains these commits.\n\nBug Fixes\n\nFixed a bug where in certain conditions toggling enabled or readOnly attributes of TextField would cause a crash. (Iae17b)\n\nVersion 1.6.5\n\nApril 3, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.5 is released. Version 1.6.5 contains these commits.\n\nBug Fixes\n\nAdds debugging logs to hard-to-reproduce bugs in Row/Column: (b/300280216 and b/297974033)\n\nVersion 1.6.4\n\nMarch 20, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.4 is released. Version 1.6.4 contains these commits.\n\nBug Fixes\n\nA long-press-then-drag selection gesture which moves out of the text’s layout bounds in the first frame of the drag no longer crashes. (Icdf90, b/325307463)\n\nVersion 1.6.3\n\nMarch 6, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.3 is released. Version 1.6.3 contains these commits.\n\nVersion 1.6.2\n\nFebruary 21, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.2 is released. Version 1.6.2 contains these commits.\n\nBug Fixes\n\nFix AnimateContentSize not resetting properly. (I07051)\n\nFix issue where intrinsicHeight of text would be over-cached in some circumstances. (3cd398, b/217910352)\n\nVersion 1.6.1\n\nFebruary 7, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.1 is released. Version 1.6.1 contains these commits.\n\nBug Fixes\n\nFix staggered grid measure when scrolled over limit. (bffc39)\n\nAdd check for layout with large dimensions. (e74af5)\n\nFix placement of 0-sized items at the start of the staggered grid. (785f94)\n\nCall onRelease callback in the same order as onForgotten. (31ce3b)\n\nVersion 1.6.0\n\nJanuary 24, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.0 is released. Version 1.6.0 contains these commits.\n\nImportant changes since 1.5.0\n\nNew Modifier Modifier.anchoredDraggable that unlocks the ability to drag and animate between predefined set of anchors. This modifier is intended to be a replacement for Modifier.swipeable. Learn how to use it and migrate from Modifier.swipeable in the migration guide.\n\nDrag and drop functionality between apps and components has been added. Refer to DragAndDropTarget, Modifier.dragAndDropSource and other APIs to get started\n\nModifier.draggable2D is the new modifier that allows for easy 2d dragging support. See Sample.\n\nAndroidExternalSurface and AndroidEmbeddedExternalSurface have been added to make it easier to add surface-driven components in compose\n\nVarious API changes and improvements in Pager and snapFlingBehaviour\n\nVarious focus, text and insets APIs have been promoted to stable APIs\n\nVersion 1.6.0-rc01\n\nJanuary 10, 2024\n\nandroidx.compose.foundation:foundation-*:1.6.0-rc01 is released. Version 1.6.0-rc01 contains these commits.\n\nAPI Changes\n\nThe DragAndDropTarget() extension constructor has been removed. Create a new instance using object: DragAndDropTarget {}. (I32318)\n\nVersion 1.6.0-beta03\n\nDecember 13, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-beta03 is released. Version 1.6.0-beta03 contains these commits.\n\nBug Fixes\n\nFix crash that impacted very large text measured with infinite constraints. (I1a7df, b/312294386)\n\nPlatformImeOptions is now a concrete class instead of an interface. (If40a4)\n\nVersion 1.6.0-beta02\n\nNovember 29, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-beta02 is released. Version 1.6.0-beta02 contains these commits.\n\nBug Fixes\n\nFix for canScroll not being updated after relayout-only scroll. (I60a86)\n\nFix for Modifier.animateItemPlacement() and LookaheadScope after small scrolls. (I3a2b7)\n\nVersion 1.6.0-beta01\n\nNovember 15, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-beta01 is released. Version 1.6.0-beta01 contains these commits.\n\nAPI Changes\n\nThe DragAndDropTarget modifier now takes in the receiving DragAndDropTarget explicitly and has a lambda to opt into a drag and drop session. There are now two factory functions for a DragAndDropModifierNode. One for receiving transfers and one for transferring data (I69481)\n\nUpdated maximumFlingVelocity to be represented as Float. Updated documentation to be more clear about the maximumFlingVelocity unity. (I8adc7)\n\nonDragAndDropStart in the DragAndDropModifierNode factory has been renamed to acceptDragAndDropTransfer.\n\nacceptsDragAndDropTransfer has been added to the dragAndDropTarget Modifier to accept from a drag and drop session. This lambda returns a viable DragAndDropTarget if interested in a drag and drop session. Other lambdas for processing drag events have been replaced by this.\n\na DragAndDropTarget factory function has been added to receive from drag and drop sessions (Iebf3a)\n\nExposing startDragImmediately in AnchoredDraggable gives control for detecting dragging gestures when using it. It is useful to set it when the widget is animating to a target anchor. See Sample. (Ie6d13, b/285139987)\n\nFoundation Tooltip APIs are now @ExperimentalFoundationApi (I30b0b)\n\nRemoved DragAndDropInfo as a type DragAndDropModifierNode.drag now takes parameters for the transferData, decoration size and drag decoration DrawScope lambda\n\nDragAndDropTarget has methods for particular drag and drop events instead of being a single abstract method\n\nonDragAndDropEvent in the factory function for a DragAndDropModifierNode has been renamed to onDragAndDropStart to better communicate that the DragAndDropTarget provided is valid for a given drag and drop session only\n\nThe DragAndDropEventType has been removed (I645b1)\n\nRenamed PlatformTextInputModifierNode.runTextInputSession to establishTextInputSession. (I03cd0)\n\nReplace OriginalText by TextSubstitution. (Ifa5a8)\n\nRenamed PlatformTextInputModifierNode.textInputSession to runTextInputSession. (Ie9c6b)\n\nThe children of SubcomposeLayout (and layouts like LazyColumn based on it) which are retained to be reused in future are considered deactivated. New assertIsDeactivated() test API was introduced to test such nodes. The rest of the test apis will filter out deactivated nodes by default. (I2ef84, b/187188981)\n\nclippingEnabled parameter of Modifier.magnifier is renamed to clip.\n\nmagnifierCenter parameter of Modifier.magnifier is made nullable preserving the same default behavior. (I6aa66)\n\nMaterial SwipeToReveal APIs (for Cards and Chips) now rely on a slot based API (as recommended by Compose) instead of data class based instances to create those slots. This is a breaking change, please see the demo and sample code for examples on how to use the new API. (Ia8943)\n\nBug Fixes\n\nImplement equals and hashcode for PageSize.Fixed. (Ie3ede, b/300134276)\n\nFixed a bug that would cause BasicText layout to not shrink when minWidth changed and minWidth less than initial measure constraints maxWidth (Idb19c)\n\nAdd renderer support for Sweep Gradient in ArcLine. (I4d5bb)\n\nFix binary compatibility issue with Window Inset change (Iee695)\n\nRemove material core layer for Material3 Chip/Button as the microbenchmarks show better performance without it. (I55555)\n\nVersion 1.6.0-alpha08\n\nOctober 18, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha08 is released. Version 1.6.0-alpha08 contains these commits.\n\nNew Features\n\nModifier.draggable2D is the new modifier that allows for easy 2d dragging support. See Sample (Id95f5, b/214412658)\n\nAPI Changes\n\nModifier.dragAndDrawSource has had the onDrawDragShadow lambda renamed to drawDragDecoration and DragAndDropInfo has had the size parameter renamed to dragDecorationSize. (Id0e30, b/303904810)\n\nBasicTextField2's decorationBox parameter is renamed to decorator. Its type is also changed to an equivalent fun interface TextFieldDecorator. (I23c1c)\n\nBug Fixes\n\nImproved documentation on BasicTextField regarding onValueChange requirements. (I90fc9, b/160257648)\n\nVersion 1.6.0-alpha07\n\nOctober 4, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha07 is released. Version 1.6.0-alpha07 contains these commits.\n\nAPI Changes\n\nIntroduced PlatformTextInputMethodTestOverride for writing tests for custom text editors. (Id159b)\n\nRenamed GraphicsSurface to AndroidExternalSurface (I11680)\n\nAdded DisableNonLinearFontScalingInCompose temporary flag to disable non-linear font scaling. Set DisableNonLinearFontScalingInCompose = true in your tests if you need time to clean them up. This flag will be removed in Compose 1.6.0-beta01. (Ic9486)\n\nAdded ColorList and ColorSet collections that avoid allocations. (I744bd)\n\nThis change removes shortSnapVelocityThreshold which has been turned into an implementation detail of the implementations of SnapLayoutInfoProvider. (I65f6d)\n\nAdds dragAndDropSource Modifier for starting drag and drop sessions, and dragAndDropTarget Modifier for receiving from drag and drop sessions (Ib7828, b/286038936)\n\nUpdate SnapPositionInLayout documentation and position method. Introduce content paddings to the position method in SnapPositionInLayout. (Id7938, b/300116110)\n\nAdded UndoState to TextFieldState that provides the ability to undo/redo the changes made by the user. (Icc024)\n\nBug Fixes\n\nFixed basicMarquee not animating after velocity change. (Id2e77, b/297974036)\n\nVersion 1.6.0-alpha06\n\nSeptember 20, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha06 is released. Version 1.6.0-alpha06 contains these commits.\n\nNew Features\n\nNew Composable wrappers for SurfaceView and TextureView: GraphicsSurface() and EmbeddedGraphicsSurface(). It is an experimental API and is subject to changes and modifications. (I9ddb2)\n\nModifier.magnifier() is now a stable API. This includes the removal of MagnifierStyle in favor of inline parameters in the modifier itself. (I83bec, b/298381260, b/262367109, b/261438887)\n\nAPI Changes\n\nIntroduced updateCurrentPage and updateTargetPage in ScrollScope, these are the last pieces necessary to allowing customization of animated scroll through PagerState.scroll. (I9cad5, b/267744105, b/243786897)\n\nRemove density from SnapFlingBehavior. All implementations of SnapLayoutInfoProvider already have a way of accessing the density, the receiver scope could be removed which will lead to a less complex implementation of both SnapFlingBehavior and SnapLayoutInfoProviders. (I153c3)\n\nMore modifiers marked as stable. (I56af1, b/298046462)\n\nRemoved SnapStepSize from SnapLayoutInfoProvider. The calculation should be done using the Layout information and provided through the approach or snapping offsets. (If320c)\n\nBehavior Changes\n\nCompose now uses non-linear font scaling for better readability and accessibility. When font scale > 100% in system settings, small text will increase in size normally, but already-large text will only increase a little bit. Also, line heights defined in SP will automatically adjust to stay proportional to the 100% scale intended height. See the Font Scaling Best Practices for more info. (I11518)\n\nBug Fixes\n\nRemove the use of rememberSaveable for tooltips. (Icc131, b/299500338)\n\nVersion 1.6.0-alpha05\n\nSeptember 6, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha05 is released. Version 1.6.0-alpha05 contains these commits.\n\nAPI Changes\n\nAdd overloads for BasicSecureTextField that accept an immutable value and a callback to change that value, just like the current BasicTextField API. (Ia4882)\n\nAdd Modifier.preferKeepClear() to mark as composable as preferring to keep clear of floating windows on API 33 and above. (Ib51d5, b/297260115)\n\nFling velocities in View components like ScrollView and RecyclerView are capped at ViewConfiguration.ScaledMaximumFlingVelocity. Compose now contains its own version of maximumFlingVelocity which now applies to Draggable. (Ibf974)\n\nRemoved deprecated Pager and PagerState overloads. (Iea07e)\n\nAdded BasicTooltipBox to compose.foundation and updated PlainTooltipBox and RichTooltipBox to use TooltipBox with new PlainTooltip and RichTooltip composables. (I79e1d)\n\nVersion 1.6.0-alpha04\n\nAugust 23, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha04 is released. Version 1.6.0-alpha04 contains these commits.\n\nAPI Changes\n\nAdd ReusableComposition interface for managing lifecycle and reuse of subcompositions. (I812d1, b/252846775)\n\nModifier.focusGroup has been promoted to stable APIs. (I7ffa3)\n\nAdd overloads for BasicTextField2 that accept an immutable value and a callback to change that value, just like the current BasicTextField API. (I3f2b8)\n\nGridItemSpan::currentLineSpan is now a stable API. (Icc29c)\n\nCanvas that accepts contentDescription is now a stable API. (Ib3d29)\n\nIntroduced viewportSize in ScrollState, a way of knowing the viewPort size of the component that uses ScrollState after measuring happens. (I8b85a, b/283102682)\n\nFixed an issue where the prefetching in Pager did not match the behavior in Views. (I93352, b/289088847)\n\nModifier.consumeWindowInsets(PaddingValues) is now stable.\n\nDeprecated Modifier.consumedWindowInsets API is now removed. Use Modifier.consumeWindowInsets instead. (Id72bb)\n\nVersion 1.6.0-alpha03\n\nAugust 9, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha03 is released. Version 1.6.0-alpha03 contains these commits.\n\nAPI Changes\n\nOverload of LazyLayout added, it accepts a lambda of LazyLayoutItemProvider, not a plain object as it was before. The previous overload is deprecated. (I42a5a)\n\nAdded support for configuring privateImeOptions (Idb772)\n\nBug Fixes\n\nFixed text fields showing keyboard and being editable when readOnly is true. Also fixed the keyboard not showing when readOnly is changed from true to false while focused. (I34a19, b/246909589)\n\nVersion 1.6.0-alpha02\n\nJuly 26, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha02 is released. Version 1.6.0-alpha02 contains these commits.\n\nAPI Changes\n\nIntroduced PagerLayoutInfo with information collected after a measure pass in Pager. Also introduced PageInfo, the information about a single measured Page in Pager. (Iad003, b/283098900)\n\nAdditional annotations to specify allowed inputs to composables (I51109)\n\nAdded SemanticsNodeInteraction.requestFocus as a more convenient and discoverable way to request focus in tests. (Ie8722)\n\nCompletely redesigned PlatformTextInput* API. (I6c93a, b/274661182, b/267235947, b/277380808)\n\nSoftwareKeyboardController and LocalSoftwareKeyboardController are no longer experimental. LocalSoftwareKeyboardController is also now a proper CompositionLocal. (I4c364)\n\nModifier.transformable now provides pan delta in canPan parameter to help determine the direction of the pan to allow or disallow it. (I692aa, b/266829800)\n\nUpdates the modifier consumeWindowInsets to extend the superclass AbstractComposeView (Iacd74, b/269479941)\n\nVersion 1.6.0-alpha01\n\nJune 21, 2023\n\nandroidx.compose.foundation:foundation-*:1.6.0-alpha01 is released. Version 1.6.0-alpha01 contains these commits.\n\nNew Features\n\nIntroduced a new AnchoredDraggable API in Foundation. It can be used to build components that can be dragged between discrete states, like modal bottom sheets. This API replaces Material's Swipeable API. (I4a2ed)\n\nAPI Changes\n\nSupport InputConnection#requestCursorUpdates (I0c69b)\n\nIntroduced scrollAnimationSpec to allow custom animation specs. Updated BringIntoViewCalculator to BringIntoViewScroller. (Idb741)\n\nAdd ResourceResolutionException type to wrap throwables thrown when attempting to load bitmap assets with a description of the asset path that failed to load. (I19f44, b/230166331, b/278424788)\n\nAdded semantics properties and actions to support text translation. (I4a6bc)\n\nIntroduced a BringIntoViewCalculator API that can be used to customize how components like Scrollable respond to bringIntoView requests. Changed the overload of scrollable to optionally accept an instance of BringIntoViewCalculator. (Iaf5af)\n\nBug Fixes\n\nAdded a lint check to warn if you are creating a MutableInteractionSource in composition without remembering it, similar to the lint checks for creating mutable state / Animatable. (I5daae)\n\nAdded support for selection by mouse. Touch based selection will expand by word, and shrink by character. (Ic0c6c, b/180639271)\n\nAdded FocusTargetModifierNode interface that can be used to create a custom FocusTarget. (I9790e)\n\nVersion 1.5\n\nVersion 1.5.4\n\nOctober 18, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.4 is released. Version 1.5.4 contains these commits.\n\nVersion 1.5.3\n\nOctober 4, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.3 is released. This version has no changes.\n\nVersion 1.5.2\n\nSeptember 27, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.2 is released. Version 1.5.2 contains these commits.\n\nBug Fixes\n\nFixed a bug in text that led to crashes in certain circumstances when semantics were invalidated.\n\nVersion 1.5.1\n\nSeptember 6, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.1 is released. Version 1.5.1 contains these commits.\n\nBug Fixes\n\nFixed text fields showing keyboard and being editable when readOnly is true. Also fixed the keyboard not showing when readOnly is changed from true to false while focused. (I34a19, b/246909589)\n\nVersion 1.5.0\n\nAugust 9, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.0 is released. Version 1.5.0 contains these commits.\n\nImportant changes since 1.4.0\n\nMany foundational modifiers, including Modifier.clickable,Modifier.draggable, Modifier.scrollable, layout modifier and more have been migrated to Modifier.Node API, reducing the overhead on the initial composition.\n\nImprovements in Pagers stability. Many bugs have been addressed.\n\npageCount parameters now lives in PagerState instead of the Pager itself\n\nVersion 1.5.0-rc01\n\nJuly 26, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.0-rc01 is released. Version 1.5.0-rc01 contains these commits.\n\nBug Fixes\n\nAn optional inspection to recommend migrating mutableStateOf() calls to their corresponding specialized types for primitives is available. Its lint ID is AutoboxingStateCreation. Previously, this inspection was enabled by default for all projects. To see this warning in Android Studio's editor and your project's lint outputs, change its severity from informational to warning (or higher) by declaring warning \"AutoboxingStateCreation\" inside your module's build.gradle or build.gradle.kts configuration as shown (I34f7e):\n\nandroid { lint { warning \"AutoboxingStateCreation\" } ... }\n\nVersion 1.5.0-beta03\n\nJune 28, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.0-beta03 is released. Version 1.5.0-beta03 contains these commits.\n\nVersion 1.5.0-beta02\n\nJune 7, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.0-beta02 is released. Version 1.5.0-beta02 contains these commits.\n\nVersion 1.5.0-beta01\n\nMay 24, 2023\n\nandroidx.compose.foundation:foundation-*:1.5.0-beta01 is released. Version 1.5.0-beta01 contains these commits.\n\nAPI Changes\n\nImplement PlatformDataProvider to provide heart rate and daily steps. SensorGateway interface is removed from the public API. (I55b84)\n\nBug Fixes\n\nReduce allocations during lazy list/grids/etc. measurements (Iaf9e2)\n\nReduced allocations when applying snapshots (I65c09)\n\nRemoved allocations from spring animations (Ie9431)\n\nRemoved allocation from TextLayout (I0fd11)\n\nRemoved multiple allocations in pointer velocity tracking (I26bae)\n\nVersion 1.5.0-alpha04\n\nMay 10, 2023\n\nandroidx.compose.foundation:foundation:1.5.0-alpha04 and androidx.compose.foundation:foundation-layout:1.5.0-alpha04 are released. Version 1.5.0-alpha04 contains these commits.\n\nAPI Changes\n\nAdded optimized TextStyle.merge(...) with full parameter list. (Iad234, b/246961787)\n\nIntroduce a SnapLayoutInfoProvider that can be used with LazyGridState. (I92134, b/269237141, b/260914964)\n\nExperimental Modifier.animateItemPlacement() was added for the lazy staggered grids item scope. You can apply it on the items in order to achieve the automation position change/reordering animations. (I4b62d, b/257034719)\n\nPromote GridCells.FixedSize to stable. FixedSize defines a LazyGrid where each cell takes exact size on cross axis, with the remaining space distributed by cross axis arrangement. (I8542f)\n\nIntroduced receiver scope PagerScope for Pager and an utility function for calculation a given page offset. (If2577)\n\nIntroduce the snapPositionalThreshold when creating a snap fling behavior. Use this parameter to specify a positional threshold to short snapping in Pager. (If8f7f)\n\nReplaced SnapLayoutInfoProvider.calculateSnappingOffsetBounds with calculateSnappingOffset. In this new method we simply request the next offset to snap to. The calculation of the bounds should be performed at the implementation level as this may differ depending on how one needs snapping to happen. (I923a4)\n\nLazyStaggeredGrid APIs have been promoted to stable. (I633a5)\n\nRemove pageCount from Horizontal/VerticalPager. This should be provided at the state creation. Updated PagerState and rememberPagerState to accept the pageCount. (Ieb52d, b/266965072)\n\nRemove pageCount from Horizontal/VerticalPager. This should be provided at the state creation. Updated PagerState and rememberPagerState to accept the pageCount. (Ifa3cb, b/266965072)\n\nIntroduce shortSnapVelocityThreshold in Pager's SnapFlingBehavior. (I7379e, b/275579012)\n\nAdds a FlowRowScope and FlowColumnScope. (I54fe2)\n\nBug Fixes\n\nCalls to get semantics on Text when constraints have minWidth and minHeight no longer crash. (Ibd072)\n\nFixed regression where keyboard wasn't showing for text fields inside dialogs not created by the Dialog composable. (I82551, b/262140644)\n\nVersion 1.5.0-alpha03\n\nApril 19, 2023\n\nandroidx.compose.foundation:foundation:1.5.0-alpha03 and androidx.compose.foundation:foundation-layout:1.5.0-alpha03 are released. Version 1.5.0-alpha03 contains these commits.\n\nThis release enables the new text rendering stack for Compose. The new stack is performance optimized, and you should see no visible changes.\n\nIf you do see changes in rendered text, you can debug by setting NewTextRendering1_5 = false to confirm the behavior difference. Setting this will force recomposition. Please file any behavior differences as bugs.\n\nThe debug flag will be removed before the 1.5 beta01 release.(Iada23, b/246960758)\n\nAPI Changes\n\nMake FlowColumn/FlowRow inline. (Idab37)\n\nVersion 1.5.0-alpha02\n\nApril 5, 2023\n\nandroidx.compose.foundation:foundation:1.5.0-alpha02 and androidx.compose.foundation:foundation-layout:1.5.0-alpha02 are released. Version 1.5.0-alpha02 contains these commits.\n\nAPI Changes\n\nAdded support for fixed size cells in LazyGrid and arranging them with cross axis arrangement. (I83ed9, b/235121277, b/267942510)\n\nAdded support for fixed size lanes in LazyStaggeredGrid and arranging them with cross axis arrangement. (I7d519)\n\nUrlAnnotations in AnnotatedStrings can now be opened via accessibility services like TalkBack. (If4d82, b/253292081)\n\nAdded the InsertTextAtCursor semantics action for text fields. (I11ed5)\n\nText-related test actions (e.g. performTextInput) will now request focus directly, using the semantics action, instead of clicking on the field. (I6ed05)\n\nAdds support for cross axis spacing/arrangement using the verticalArrangement in FlowRow and horizontalArrangement in FlowColumn. We also remove the top-level verticalAlignment and horizontalAlignment in FlowRow/FlowColumn. Developers can use Modifier.align instead. This reduces confusion between the naming conventions of verticalAlignment and verticalArrangement. (I87b60, b/268365538)\n\nVersion 1.5.0-alpha01\n\nMarch 22, 2023\n\nandroidx.compose.foundation:foundation:1.5.0-alpha01 and androidx.compose.foundation:foundation-layout:1.5.0-alpha01 are released. Version 1.5.0-alpha01 contains these commits.\n\nAPI Changes\n\nText and BasicText is refactored to use the new modifier system. This leads to substantial performance improvements in many cases. No changes should be visible. (If1d17, b/246961435)\n\nAdded the PerformImeAction semantics action to invoke the IME action on text editor nodes. (Ic606f, b/269633506)\n\nBug Fixes\n\nUpdated internals of Modifier.hoverable. The hoverable modifier will only be shown in the inspector if it is enabled. (I82103)\n\nVersion 1.4\n\nVersion 1.4.3\n\nMay 3, 2023\n\nandroidx.compose.foundation:foundation:1.4.3 and androidx.compose.foundation:foundation-layout:1.4.3 are released with no changes (only a version bump).\n\nVersion 1.4.2\n\nApril 19, 2023\n\nandroidx.compose.foundation:foundation:1.4.2 and androidx.compose.foundation:foundation-layout:1.4.2 are released. Version 1.4.2 contains these commits.\n\nVersion 1.4.1\n\nApril 5, 2023\n\nandroidx.compose.foundation:foundation:1.4.1 and androidx.compose.foundation:foundation-layout:1.4.1 are released. Version 1.4.1 contains these commits.\n\nVersion 1.4.0\n\nMarch 22, 2023\n\nandroidx.compose.foundation:foundation:1.4.0 and androidx.compose.foundation:foundation-layout:1.4.0 are released. Version 1.4.0 contains these commits.\n\nImportant changes since 1.3.0\n\nAdded Emoji compat integration to Text and TextField, as well as the lower level Paragraph. It is enabled by default when emojicompat is configured.\n\nEmojiCompat can be configured on a specific Text using PlatformParagraphStyle.\n\nAdded full line span support to LazyStaggeredGrid(I28252)\n\nAdding experimental onHover to ClickableText (I6938f)\n\nIntroduced new experimental overloads for the runComposeUiTest function and create*ComposeRule functions that accept CoroutineContext parameters. The context will be used for the test composition and any LaunchedEffect and rememberCoroutineScope() calls in the composition. (I10614, b/265177763)\n\nFlowRow and FlowColumn are now available as @ExperimentalFoundationApi that allow for a more flexible row and column based layout of components that will break to a new line if there is not enough space on the main axis. (I3a7b2)\n\nModifier.basicMarquee() is available as experimental for displaying content with a scrolling marquee effect. (I2df44, b/139321650)\n\nVersion 1.4.0-rc01\n\nMarch 8, 2023\n\nandroidx.compose.foundation:foundation:1.4.0-rc01 and androidx.compose.foundation:foundation-layout:1.4.0-rc01 are released. Version 1.4.0-rc01 contains these commits.\n\nAPI Changes\n\nIntroduced new low-level PlatformTextInputAdapter API for building custom text input implementations that talk directly to platform APIs. (I58df4)\n\nAdd support for reverse layout to LazyStaggeredGrid. (I3ef4a)\n\nBug Fixes\n\nBasicTextField's SetText semantics action will now update the text buffer using the same code path as IME updates and the testing functions (e.g. performTextReplacement).\n\nText testing functions performTextClearance, performTextReplacement, and performTextSelection now use SemanticsActions. (I0807d, b/269633168, b/269624358)\n\nVersion 1.4.0-beta02\n\nFebruary 22, 2023\n\nandroidx.compose.foundation:foundation:1.4.0-beta02 and androidx.compose.foundation:foundation-layout:1.4.0-beta02 are released. Version 1.4.0-beta02 contains these commits.\n\nAPI Changes\n\nAdded a new Modifier.Node.onReset() callback allowing you to reset some local state to properly handle the case when the Layout will be reused (for example as an item of LazyColumn). Fixed FocusTargetModifierNode to properly reset the focused state. (I65495, b/265201972)\n\nAdded BlendMode parameter to DrawScope.drawText, Paragraph.paint, and MultiParagraph.paint methods to support different blending algorithms when drawing text on Canvas. (I57508)\n\nRemoved the modifierElementOf() API. Please extend from ModifierNodeElement directly instead. (Ie6d21)\n\nBug Fixes\n\nAdjusting selection handles can no longer select a partial character. (Idedd1)\n\nFix crash when ctrl+backspace on empty TextField (I0427f, b/244185537)\n\nVersion 1.4.0-beta01\n\nFebruary 8, 2023\n\nandroidx.compose.foundation:foundation:1.4.0-beta01 and androidx.compose.foundation:foundation-layout:1.4.0-beta01 are released. Version 1.4.0-beta01 contains these commits.\n\nNew Features\n\nSince 1.3, added Emoji compat integration to Text and TextField, as well as the lower level Paragraph. It is enabled by default when emojicompat is configured.\n\nEmojiCompat can be configured on a specific Text using PlatformParagraphStyle.\n\nAPI Changes\n\nAdded common implementation of PinnableContainer API used in all LazyLayouts to retain items that exit composition, but still need to be active. (If45a4)\n\nPinnableContainer.PinnedHandle.unpin() was renamed to release() (I4667a)\n\nExternal Contribution\n\nAdded mainAxisItemSpacing property to LazyListLayoutInfo, LazyGridLayoutInfo and LazyStaggeredGridItemInfo (I52fad)\n\nVersion 1.4.0-alpha05\n\nJanuary 25, 2023\n\nandroidx.compose.foundation:foundation:1.4.0-alpha05 and androidx.compose.foundation:foundation-layout:1.4.0-alpha05 are released. Version 1.4.0-alpha05 contains these commits.\n\nNew Features\n\nAdded full line span support to LazyStaggeredGrid (I28252)\n\nAdding experimental onHover to ClickableText (I6938f)\n\nIntroduced new experimental overloads for the runComposeUiTest function and create*ComposeRule functions that accept CoroutineContext parameters. The context will be used for the test composition and any LaunchedEffect and rememberCoroutineScope() calls in the composition. (I10614, b/265177763)\n\nAPI Changes\n\nMerges the pre/post APIs of OverscrollEffect into combined 'decorator' applyToScroll and applyToFling functions. See the updated samples in the documentation for examples of how to implement an overscroll effect with the new API shape. (I8a9c4, b/255554340)\n\nMore type/nullability of inline/deprecated-hidden functions (I24f91)\n\nLineBreak and Hyphens APIs in TextStyle are graduated to stable. (Ic1e1d)\n\nBug Fixes\n\nThe cursor in text fields will now continue to blink even when animations are disabled. (I95e70, b/265177763)\n\nModifier.basicMarquee now animates even when animations are disabled in the system settings. (I23389, b/262298306, b/265177763)\n\nExternal Contribution\n\nnotifyFocusedRect methods in TextInputSession and TextInputService are not deprecated again. (I23a04, b/262648050)\n\nVersion 1.4.0-alpha04\n\nJanuary 11, 2023\n\nandroidx.compose.foundation:foundation:1.4.0-alpha04 and androidx.compose.foundation:foundation-layout:1.4.0-alpha04 are released. Version 1.4.0-alpha04 contains these commits.\n\nNew Features\n\nFlowRow and FlowColumn are now available as @ExperimentalFoundationApi that allow for a more flexible row and column based layout of components that will break to a new line if there is not enough space on the main axis. (I3a7b2)\n\nModifier.basicMarquee()is available as experimental for displaying content with a scrolling marquee effect. (I2df44, b/139321650)\n\nAPI Changes\n\nFocusRequesterModifier is deprecated in favor of FocusRequesterNode (I7f4d7, b/247708726, b/255352203, b/253043481, b/247716483, b/254529934, b/251840112, b/251859987, b/257141589)\n\nAndroidFont constructor with variationSettings is now a stable API, and can be used to create new types of font descriptors. (I5adcc, b/261565807)\n\nIntroduced PinnableContainer api propagated by lazy lists via a composition local which allows to pin current item. This means such item will not be disposed when it is scrolled away from the view. For example, Modifier.focusable() will pin the current focused item via this mechanism. (Ib8881, b/259274257, b/195049010)\n\nRewrote the way scrollables respond to bringIntoViewRequesters and focusables to better model the complexity of those operations and handle more edge cases. (I2e5fe, b/241591211, b/192043120, b/237190748, b/230756508, b/239451114)\n\nMore return type nullability of deprecated-hidden functions (Ibf7b0)\n\nAdded experimental TextMotion to TextStyle to define Text either to be Static(default) or Animated. Use TextMotion.Animated if Text is going to be scaled, translated, or rotated via animation. (I24dd7)\n\nAdd TextFieldFocusModifier to fix focus navigation behaviour for android platform (I00303)\n\nReplaced maxSize: IntSize argument in drawText with size: Size to be inline with other DrawScope functions. size is set to Size.Unspecified by default which should not change the previous default behavior. (Icd27d)\n\nBug Fixes\n\nAdjustments in the snapping physics in SnapFlingBehaviour for a more natural feel.\n\nKnown Issue\n\nWhen updating from androidx.compose.foundation:1.4.0-alpha03 to androidx.compose.foundation:1.4.0-alpha04, you might experience a java.lang.NoSuchFieldError error. Here is where the issue was orginially reported. A fix has been submitted, and will be available on the next Compose update. As a work around, update your androidx.compose.material and androidx.compose.material3 libraries to the latest version(1.1.0-alpha04) or downgrade your androidx.compose.foundation to 1.4.0-alpha03.\n\nVersion 1.4.0-alpha03\n\nDecember 7, 2022\n\nandroidx.compose.foundation:foundation:1.4.0-alpha03 and androidx.compose.foundation:foundation-layout:1.4.0-alpha03 are released. Version 1.4.0-alpha03 contains these commits.\n\nAPI Changes\n\nIn UI tests using a Compose rule, continuations resumed during withFrameNanos callbacks will not be dispatched until after all frame callbacks have finished running. This matches the behavior of compose when running normally. However, tests that rely on the old behavior may fail. This should only affect code that calls withFrameNanos or withFrameMillis directly, and has logic outside of callback passed to those functions that may need to be moved inside the callbacks. See the animation test changes in this CL for examples.\n\nAdded optional onPerformTraversals: (Long) -> Unit parameter to TestMonotonicFrameClock constructor and factory function to run code after withFrameNanos callbacks but before resuming callers' coroutines. (Idb413, b/254115946, b/222093277, b/255802670)\n\nIntroduce Page accessibility actions: PageUp, PageDown, PageLeft, PageRight. Note that these are only available from API 29. (Ida4ab)\n\nIntroduce HorizontalPager and VerticalPager, a way of showing composables in a Pager manner. Introduced PagerState to control the Pagers as well as query information about the Pager's current state. Introduced PageSize, a way of controlling the size of a Pager's page, this can be used to create a carousel like Pagers. Introduced PagerSnapDistance, a way to control how snapping will work in Pager's fling behavior. (I01120)\n\nIntroduced an overload in SnapFlingBehavior.performFling to help to understand where the fling will settle. (I569f6)\n\nRemoved OverscrollEffect#isEnabled. Instead of needing to remember and set this flag, just don't dispatch events to the overscroll effect in cases where you do not want overscroll to show (for example if ScrollableState#canScrollForward/backward both return false). (I1a4b0, b/255554340, b/255557085)\n\nAdded ScrollableState#canScrollForward and ScrollableState#canScrollBackward to query whether a ScrollableState has room to scroll in either direction (whether it is at the minimum / maximum of its range). This defaults to true for backwards compatibility with existing implementations of ScrollableState. Consumers can use this to show indication to the user that there is still room to scroll, and this could also be used to avoid dispatching delta to ScrollableStates that have no room to scroll in a given direction, to reduce unnecessary work. (Idf1a0, b/255557085)\n\nAdded an Modifier API to query ancestors scroll info. (I2ba9d, b/203141462)\n\nUsed in Clickable to correctly delay press interactions, when gestures could become scroll events.\n\nFixed Clickables not correctly delaying ripples, when used inside an Scrollable ViewGroup.\n\nUpdated Drawers and Sheets to correctly delay presses in case gestures can become scroll events.\n\nUpdate snapStepSize naming to be consistent with other methods in SnapLayoutInfoProvider. (Ife67c)\n\nAdded EmojiCompat to Compose (Ibf6f9, b/139326806)\n\nRenamed consumedWindowInsets() to consumeWindowInsets() and withConsumedWindowInsets() to onConsumedWindowInsetsChanged() and made the Modifiers public. (Ie44e1)\n\nBug Fixes\n\nThe crash with Modifier.animateItemPlacement() and Lazy grids was fixed. It was happening in some conditions when the new items count is smaller then the previous one. (I0bcac, b/253195989)\n\nVersion 1.4.0-alpha02\n\nNovember 9, 2022\n\nandroidx.compose.foundation:foundation:1.4.0-alpha02 and androidx.compose.foundation:foundation-layout:1.4.0-alpha02 are released. Version 1.4.0-alpha02 contains these commits.\n\nAPI Changes\n\nawaitFirstDown and waitForUpOrCancellation now accept a PointerEventPass for greater flexibility. (I7579a, b/212091796)\n\nRevert beyondBoundCount API from Lazy* APIs (I12197)\n\nIntroduced parameter in Lazy APIs to compose and place out of viewport items (I69e89, b/172029355)\n\nAdded minLines parameter to the BasicText and BasicTextField. It allows to set the minimum height of these composables in terms of number of lines (I24294, b/122476634)\n\nVersion 1.4.0-alpha01\n\nOctober 24, 2022\n\nandroidx.compose.foundation:foundation:1.4.0-alpha01 and androidx.compose.foundation:foundation-layout:1.4.0-alpha01 are released. Version 1.4.0-alpha01 contains these commits.\n\nAPI Changes\n\nA new method, awaitEachGesture(), for gesture detectors was added. It operates similar to forEachGesture(), but the loop over gestures operates entirely within the AwaitPointerEventScope so events can't be lost between iterations.\n\nforEachGesture() has been deprecated in favor of awaitEachGesture() because it allows events to be lost between gestures. (Iffc3f, b/251260206)\n\nAdded WindowInsets.imeAnimationSource and WindowInsets.imeAnimationTarget to determine the animation progress and know where the IME will be after animation completes. (I356f1, b/217770337)\n\nVersion 1.3\n\nVersion 1.3.1\n\nNovember 9, 2022\n\nandroidx.compose.foundation:foundation:1.3.1 and androidx.compose.foundation:foundation-layout:1.3.1 are released. Version 1.3.1 contains these commits.\n\nBug Fixes\n\nFix performance issue in BeyondBoundsLayout (aosp/2255266)\n\nContentInViewModifier will not read layout coordinates unless attached (aosp/2241316)\n\nVersion 1.3.0\n\nOctober 24, 2022\n\nandroidx.compose.foundation:foundation:1.3.0 and androidx.compose.foundation:foundation-layout:1.3.0 are released. Version 1.3.0 contains these commits.\n\nImportant changes since 1.2.0\n\nExperimental versions of LazyVerticalStaggeredGrid and LazyHorizontalStaggeredGrid were introduced.\n\nSnapFlingBehavior, rememberSnapFlingBehavior and other corresponding APIs were added as experimental.\n\nModifier.clickable, Modifier.toggleable, and Modifier.selectable now show ripples if clicked with the keyboard or d-pad on a remote control.\n\nVersion 1.3.0-rc01\n\nOctober 5, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-rc01 and androidx.compose.foundation:foundation-layout:1.3.0-rc01 are released. Version 1.3.0-rc01 contains these commits.\n\nAPI Changes\n\nIntroduced lowVelocityAnimationSpec used by the approach step when there's not enough fling velocity to decay. (Iaeb27)\n\nAdded new experimental API Hyphens to support automatic hyphenation in Text (Iaa869)\n\nVersion 1.3.0-beta03\n\nSeptember 21, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-beta03 and androidx.compose.foundation:foundation-layout:1.3.0-beta03 are released. Version 1.3.0-beta03 contains these commits.\n\nAPI Changes\n\nAdd options to customize line breaking in Text. (I86907)\n\nBringIntoViewResponders are now able to get the most up-to-date bounds of a request while processing it. (If86a5, b/241591211)\n\nIntroduce support for spacings between items to experimental Staggered Grid (I10b82)\n\nIntroduce content padding to experimental Staggered Grid (I342ea)\n\nChanged size:IntSize argument with constraints: Constraints in TextMeasurer.measure method to support minimum width constraints. (I37530, b/242707525)\n\nAdded Modifier.withConsumedWindowInsets() to get consumed WindowInsets for use outside windowInsetsPadding.\n\nAdded MutableWindowInsets to allow easily changing WindowInsets without recomposition. (I7fd28, b/237019262, b/243119659)\n\nVersion 1.3.0-beta02\n\nSeptember 7, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-beta02 and androidx.compose.foundation:foundation-layout:1.3.0-beta02 are released. Version 1.3.0-beta02 contains these commits.\n\nAPI Changes\n\nInitial version of experimental StaggeredGrid (Ia48be)\n\nRenamed FocusDirection.In and FocusDirection.Out to FocusDirection.Enter and FocusDirection.Exit (Ia4262, b/183746982)\n\nIntroduced a rememberSnapFlingBehavior overload that provides a quick way of enabling snapping in LazyLists. (Ifb48a)\n\nReplaced the snapFlingBehavior factory with a concrete SnapFlingBehavior class. Scoped SnapLayoutInfoProvider methods to Density to make Dp<->Px conversions easier for the API users. (I54a11)\n\nUpdate LazyLayoutMeasureScope.measure to return list of placeables, highlighting desired immutability of the returned value. (I48b7c)\n\nIntroduced SnapLayoutInfoProvider which takes a LazyListState to create an instance of SnapLayoutInfoProvider that can be used to enable a snap FlingBehavior for LazyLists. (I2dd10)\n\nBug Fixes\n\nRefactors AwaitPointerEventScope#awaitLongPressOrCancellation to match other await functions (I646e6)\n\nVersion 1.3.0-beta01\n\nAugust 24, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-beta01 and androidx.compose.foundation:foundation-layout:1.3.0-beta01 are released. Version 1.3.0-beta01 contains these commits.\n\nAPI Changes\n\nRemoved pointerPosition from OverscrollEffect - effects that care about pointer position can use Modifier.pointerInput { } in the effectModifier to get the current pointer position instead. (I9f606, b/241239306)\n\nExposed AwaitPointerEventScope#awaitLongPressOrCancellation as additional building block for more complex gesture detection (I04374, b/181577176)\n\nIntroduced lazyListSnapLayoutInfoProvider to enable snapping in Lazy Lists. (I3ecdf)\n\nIntroduced SnapFlingBehavior, a fling behavior that enables list snapping. Provide an instance of SnapLayoutInfoProvider with information about your snapping layout. (Ie754c)\n\nVersion 1.3.0-alpha03\n\nAugust 10, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-alpha03 and androidx.compose.foundation:foundation-layout:1.3.0-alpha03 are released. Version 1.3.0-alpha03 contains these commits.\n\nAPI Changes\n\nResource Fonts now support setting font variation settings (API 26+). (I900dd, b/143703328)\n\nVariable font support in DeviceFontFamilyNameFont (Ic1279, b/143703328)\n\nRemoved experimental annotation from PlatformTextStyle and LineHeightStyle. (I64bef)\n\nText fields will now throw more detailed exceptions when the OffsetMapping provided by a VisualTransformation returns invalid indices. (Ie73f9, b/229378536)\n\nIntroduce experimental APIs to share item provider logic between Lazy layouts. (Ic891c)\n\nScrollableDefaults.reverseDirection() is not experimental anymore. (Iba646)\n\nDeprecated SemanticsModifier.id and moved the semantics id to LayoutInfo.semanticsId instead. (Iac808, b/203559524)\n\ncheckScrollableContainerConstraints() is not experimental anymore. (I2c290)\n\nModifier.clipScrollableContainer() is not experimental anymore. (Ia2b44)\n\nDeprecate TextInputService.show|hideSoftwareKeyboard. Please use SoftwareKeyboardController instead in app code and TextInputSession in IME-management code. (I14e4c, b/183448615)\n\nVersion 1.3.0-alpha02\n\nJuly 27, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-alpha02 and androidx.compose.foundation:foundation-layout:1.3.0-alpha02 are released. Version 1.3.0-alpha02 contains these commits.\n\nAPI Changes\n\nAdded drawText extension function on DrawScope to provide a way to draw multi-styled text on composables and modifiers that operate on a DrawScope like Canvas and drawBehind. (I16a62, b/190787898)\n\nBug Fixes\n\nSoft keyboard will now be hidden when a text field is disabled while focused. (I6e3e4, b/237308379)\n\nWhen adding InputEventChange events to Velocity Tracker we will consider now deltas instead of positions, this will guarantee the velocity is correctly calculated for all cases even if the target element moves (Icea9d, b/216582726, b/223440806, b/227709803)\n\nWhen a scrollable has a focused child, it will now correctly scroll to keep the focused child in view when its size is decreased, even when the size is animated. (I80867, b/230756508, b/220119990)\n\nFixed a crash where TextField is cleared and refilled while selection is active. (I1235b, b/208655565, b/214253689)\n\nVersion 1.3.0-alpha01\n\nJune 29, 2022\n\nandroidx.compose.foundation:foundation:1.3.0-alpha01 and androidx.compose.foundation:foundation-layout:1.3.0-alpha01 are released. Version 1.3.0-alpha01 contains these commits.\n\nAPI Changes\n\nIntroduced the UrlAnnotation annotation type and associated methods to support TalkBack link support in AnnotatedStrings. (I1c754, b/231495122)\n\nBug Fixes\n\nBasicTextField cursorBrush may now be animated without restarting the cursor timer. (I812e6, b/236383522)\n\nVersion 1.2\n\nVersion 1.2.1\n\nAugust 10, 2022\n\nandroidx.compose.foundation:foundation:1.2.1 and androidx.compose.foundation:foundation-layout:1.2.1 are released. Version 1.2.1 contains these commits.\n\nVersion 1.2.0\n\nJuly 27, 2022\n\nandroidx.compose.foundation:foundation:1.2.0 and androidx.compose.foundation:foundation-layout:1.2.0 are released. Version 1.2.0 contains these commits.\n\nImportant changes since 1.1.0\n\nLazyVerticalGrid and LazyHorizontalGrid are stable now.\n\nYou can now specify a content type for items in Lazy lists and grids. This will allow the components to reuse elements more efficiently.\n\nLazy lists and grids now have userScrollEnabled param which allows to disable scrolling via the user gestures.\n\nA new experimental API called LazyLayout was added. It It is the API we use internally to power Lazy lists and grids.\n\nOverscrollEffect API has been introduced as experimental. You can define custom overscroll effects as well as adding a standard platform one to custom scrollable containers.\n\nNested scrolling interoperability APIs have been introduced to allow for interoperability between views and compose scrolling actors.\n\nMouse and trackpad scrolling has been added to all scrolling containers.\n\nVersion 1.2.0-rc03\n\nJune 29, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-rc03 and androidx.compose.foundation:foundation-layout:1.2.0-rc03 are released. Version 1.2.0-rc03 contains these commits.\n\nNo changes since 1.2.0-rc02.\n\nVersion 1.2.0-rc02\n\nJune 22, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-rc02 and androidx.compose.foundation:foundation-layout:1.2.0-rc02 are released. Version 1.2.0-rc02 contains these commits.\n\nVersion 1.2.0-rc01\n\nJune 15, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-rc01 and androidx.compose.foundation:foundation-layout:1.2.0-rc01 are released. Version 1.2.0-rc01 contains these commits.\n\nAPI Changes\n\nAn experimental OverscrollEffect has been introduced to allow for custom overscroll effects, alongside the Modifier.scrollable overloads that accept it.\n\nExperimental LocalOverScrollConfiguration has been moved from foundation.gesture to foundation package and renamed to LocalOverscrollConfiguration (If19fb, b/204650733)\n\nInterfaces in compose libraries are now built using jdk8 default interface methods (I5bcf1)\n\nIntroduced an experimental api checkScrollableContainerConstraints() which allows to check that we do not nest scrollable containers. You can use it when create your own scrollable lazy layouts via LazyLayout. (Id6fab, b/233352497)\n\nRemoved deprecated LazyVerticalGrid from androidx.compose.foundation.lazy package. The new stable api is located in androidx.compose.foundation.lazy.grid (I73c76, b/225192009)\n\nVersion 1.2.0-beta03\n\nJune 1, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-beta03 and androidx.compose.foundation:foundation-layout:1.2.0-beta03 are released. Version 1.2.0-beta03 contains these commits.\n\nAPI Changes\n\nAdded new experimental IntervalList and MutableIntervalList. It allows to represent some list of values via multiple intervals. It will be useful when you want to define your own dsl similar to the one used by LazyColumn where list items can be defined via multiple item/items calls. (I2d05e, b/228580728)\n\nBug Fixes\n\nClarified the documentation for WindowInsets.ime to state that ime insets are reported as far back as API 23, but only animated on 30+. (Ia7fc0, b/230756508)\n\nPressing the forward delete key when the cursor is at the end of a text field will no longer crash.\n\nDeleteSurroundingTextCommand and DeleteSurroundingTextInCodePointsCommand now require their constructor arguments to be non-negative. (Ica8e6, b/199919707)\n\nVersion 1.2.0-beta02\n\nMay 18, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-beta02 and androidx.compose.foundation:foundation-layout:1.2.0-beta02 are released. Version 1.2.0-beta02 contains these commits.\n\nDownloadable font resolution that does not change the layout size of Text or TextField previously would not redraw, leading to stale font display. This bugfix ensures that text layout always triggers redraw (b/229727404). (I1d49e, b/229727404)\n\nVersion 1.2.0-beta01\n\nMay 11, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-beta01 and androidx.compose.foundation:foundation-layout:1.2.0-beta01 are released. Version 1.2.0-beta01 contains these commits.\n\nNew Features\n\nThis is the first beta release of 1.2!\n\nAPI Changes\n\nAdded experimental BeyondBoundsInterval that can be used by custom implementations of LazyList when they layout items beyond visible bounds (Ifabfb, b/184670295)\n\nLineHeightBehavior is renamed as LineHeightStyle\n\nLineVerticalAlignment is renamed as LineHeightStyle.Alignment\n\nRenames LineHeightTrim is renamed as LineHeightStyle.Trim\n\nDefault constructor values from LineHeightStyle is removed (I582bf, b/181155707)\n\nAdded default values for the optional members of LazyLayoutItemProvider interface. (Iba8a0)\n\nIn the LazyLayoutItemProvider api instead of a factory returning the composable lambda by index we now have a simpler composable function Item accepting the index. (Id2196)\n\nLazyLayoutItemsProvider is renamed to LazyLayoutItemProvider (I0638c)\n\nLazyLayoutItemsProvider.itemsCount is renamed to itemCount (Id409c)\n\nAdded Brush to TextStyle and SpanStyle to provide a way to draw text with gradient coloring. (I53869, b/187839528)\n\ntrimFirstLineTop, trimLastLineBottom attributes of LineHeightBehavior changed into a single enum: LineHeightTrim. LineHeightTrim have values of 4 states defined by two booleans: FirstLineTop, LastLineBottom, Both and None (Ifc6a5, b/181155707)\n\nAdded LineHeightBehavior to the TextStyle and ParagraphStyle. LineHeightBehavior controls whether line height is applied to the top of the first line and to the bottom of the last line. It also defines the alignment of line in the space provided by TextStyle(lineHeight).\n\nFor example it is possible to get a behavior similar to what CSS defines via LineHeightBehavior(alignment = LineVerticalAlignment.Center, trimFirstLineTop=false, trimLastLineBottom = false).\n\ntrimFirstLineTop, trimLastLineBottom configurations works correctly only when includeFontPadding is false. (I97332, b/181155707)\n\nAdded experimental imeNestedScroll() modifier so that developers can control the IME through scrolling. (I60759)\n\nBug Fixes\n\nFixed regression where text fields would not hide the keyboard when removed from the composition while focused. (I7a410, b/230536793, b/225541817)\n\nSupport ellipsis when height is limited and doesn't fit all text lines (Ie528c, b/168720622)\n\nBringIntoViewRequester.bringIntoView will now always suspend until the request is either completed or was interrupted by a newer, non-overlapping request. Overlapping requests will be queued. (I43e7f, b/216790855)\n\nConcurrent BringIntoViewRequester.bringIntoView calls for rectangles that are completely overlapping will now only honor the larger rectangle's request. (I34be7, b/216790855, b/184760918)\n\nTurned on default includeFontPadding. It is possible to turn off the includeFontPadding using TextStyle.platformTextStyle attribute. In the near future we will change the default behavior however until that time this allows us to better integrate line height improvements (aosp/2058653) and solve TextField clipping issues. (I01423, b/171394808)\n\nModifier.bringIntoViewRequester no longer uses onGloballyPositioned. (I630f5)\n\nExternal Contribution\n\nMouseInjectionScope.scroll(delta = someDelta) is now inverted on Android if we scroll vertically (if someDelta is positive, it will scroll downward) (Ifb697, b/224992993)\n\nVersion 1.2.0-alpha08\n\nApril 20, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha08 and androidx.compose.foundation:foundation-layout:1.2.0-alpha08 are released. Version 1.2.0-alpha08 contains these commits.\n\nAPI Changes\n\nDisplay all available weights for systems fonts on Android when using FontFamily.SansSerif. This will use fallback font names like sans-serif-medium internally on API 21-28. This is a behavior change as previously only weights 400 and 700 were supported on API 21-28. (I380fe, b/156048036, b/226441992)\n\nParagraph and MultiParagraph are now accepting Constraints parameter. Passing Constraints.maxHeight is a no-op at the moment but will allow to do some calculation in the future, like ellipsizing based on the height. (I6afee, b/168720622)\n\nSubcomposeSlotReusePolicy.getSlotsToRetain() now accepts a custom MutableSet-like class which doesn't allow adding new items in it. (Icd314)\n\nPartial consumption (down OR position) has been deprecated in PointerInputChange. You can use consume() to consume the change completely. You can use isConsumed to determine whether or not someone else has previously consumed the change.\n\nPointerInputChange::copy() now always makes a shallow copy. It means that copies of PointerInputChange will be consumed once one of the copies is consumed. If you want to create an unbound PointerInputChange, use constructor instead. (Ie6be4, b/225669674)\n\nNew experimental LazyLayout API is introduced. This allows you to build your own components like LazyColumn of LazyVerticalGrid. Note that the API is in its early stages and can be changed in the future releases. (Iba2bc, b/166591700)\n\nAndroidFont now takes typefaceLoader as a constructor parameter. (I2c971)\n\nWindowInsets companion now exposes the visibility (whether they are on the screen, regardless of whether they intersect with the window) and the size they could be if they are available on the device, but not currently active. (I65182, b/217770337)\n\nVersion 1.2.0-alpha07\n\nApril 6, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha07 and androidx.compose.foundation:foundation-layout:1.2.0-alpha07 are released. Version 1.2.0-alpha07 contains these commits.\n\nAPI Changes\n\nAdded a PinnableParent API that allows children of lazy layouts to prevent the currently composed items from being disposed (Ibbdd0, b/184670295)\n\nLazyListLayoutInfo and LazyGridLayoutInfo now have beforeContentPadding and afterContentPadding fields (I3b628, b/200920410)\n\nAdded KeyboardType.Decimal as an alternative to Keyboard.Number for specifically including decimal separator in IME. (Iec4c8, b/209835363)\n\nAdd new font descriptor Font(DeviceFontFamilyName) to optionally lookup system-installed fonts during font fallback chains. (I30468, b/219754572)\n\nPointerEventType.Scroll and PointerEvent.scrollDelta are stable APIs now (I574c5, b/225669674)\n\nAdded temporary compatibility configuration for includeFontPadding in TextStyle/ParagraphStyle. includeFontPadding can be changed via TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = true/false)). This is a temporary configuration option to enable migration and will be removed. (If47be, b/171394808)\n\nUpdated FontFamily.Resolver to integrate System-wide bold text accessibility setting (I6c1e7)\n\nThe consumeWindowInsets extension property of ComposeView allows developers to disable consumption of Android WindowInsets. This allows separate ComposeViews in the hierarchy to each apply WindowInsets without interfering with each other. (I0ef08, b/220943142)\n\nVersion 1.2.0-alpha06\n\nMarch 23, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha06 and androidx.compose.foundation:foundation-layout:1.2.0-alpha06 are released. Version 1.2.0-alpha06 contains these commits.\n\nAPI Changes\n\nAdded RequestFocus semantics action to request focus on the focusable target. (I17b71)\n\nFocusOrder has now been merged into FocusProperties and focusProperties() now has all the capabilities of focusOrder(). FocusOrder and focusOrder() have been deprecated. focusOrder() that accepts a focusRequester should be replaced with a focusRequester() modifier in combination with focusProperties(). This allows the modifiers to have a stronger separation of concerns. (I601b7)\n\nWindowInsets.asPaddingValues(Density) was added to allow developers to do the conversion without needing to be in composition. (I94c35)\n\nUpdated parsing of vector drawables to support auto mirroring to flip the content of a VectorPainter if the current layout direction is RTL. (I79cd9, b/185760237)\n\nBug Fixes\n\nScroll modifiers (Modifier.verticalScroll(),Modifier.horizontalScroll(), and Modifier.scrollable()) will now scroll to keep the focused composable visible if the scroll area is resized and the focused composable was previously visible.\n\nTextFields will now be kept above the keyboard when they are focused and the keyboard is shown, when inside a non-lazy scrollable and the soft input mode is ADJUST_RESIZE. (I4a485, b/190539358, b/192043120, b/216842427)\n\nVersion 1.2.0-alpha05\n\nMarch 9, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha05 and androidx.compose.foundation:foundation-layout:1.2.0-alpha05 are released. Version 1.2.0-alpha05 contains these commits.\n\nAPI Changes\n\nLazyVerticalGrid and LazyHorizontalGrid are now stable. (I307c0)\n\nLazyGridItemInfo.Unknown was replaced with separate LazyGridItemInfo.UnknownRow and LazyGridItemInfo.UnknownColumn (I56d51)\n\nLazyVerticalGrid/LazyHorizontalGrid and all related apis were moved into .grid subpackage. Please update your imports from androidx.compose.foundation.lazy to androidx.compose.foundation.lazy.grid. (I2d446, b/219942574)\n\nText: includeFontPadding is now turned off by default. The clipping issues as a result of includeFontPadding=false is handled and no clipping should occur for tall scripts. (I31c84, b/171394808)\n\nMeasured interface now exposes parentData property (I3313f)\n\nIntroduced experimental Modifier.onFocusedBoundsChanged to allow observing the bounds of child focusables. (I14283, b/220030968, b/190539358, b/192043120, b/216842427)\n\nLazyHorizontalGrid was added. (I61ae7, b/191238807)\n\nAdded a new LazyVerticalGrid API to define cross axis sizes (I17723)\n\nAdded FocusGroup modifier (I64bc0, b/213508274, b/184670295)\n\nBug Fixes\n\nWindowInsets.toString() will now show the correct values. (I1585d)\n\nExternal Contribution\n\nUpdated to use Kotlinx coroutines 1.6.0 (I3366d)\n\nVersion 1.2.0-alpha04\n\nFebruary 23, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha04 and androidx.compose.foundation:foundation-layout:1.2.0-alpha04 are released. Version 1.2.0-alpha04 contains these commits.\n\nAPI Changes\n\nBringIntoViewResponders are no longer required to manually pass requests up to parent responders, and are instead required to immediately return the rectangle they want their parent to bring into view. (I8e66a)\n\nSupport async font loading in Text (I77057, b/214587005)\n\nLazyVerticalGrid now supports line breaking before items with span not fitting inside the current line. (I05c40, b/207462103)\n\nRenamed excludeFromSystemGestures to systemGesturesExclusion (I19526)\n\nLazyVerticalGrid now supports reverseLayout. (I6d7d7, b/215572963, b/211753558)\n\nAdd WindowInsets.only() method to allow developers to include only dimensions from the WindowInsets. (I14c94, b/217768486)\n\nAdded ComposableTarget, ComposableTargetMarker and ComposableOpenTarget that allows compile time reporting of when a composable function is called targeting an applier it was not designed to use.\n\nIn most cases the annotations can be inferred by the compose compiler plugin so using these annotation directly should be rare . The cases that cannot be inferred include creating and using a custom applier, abstract composable functions (such as interface methods), fields or global variables that are composable lambdas (local variables and parameters are inferred), or when using ComposeNode or a related composable functions.\n\nFor custom appliers the composable functions that calls ComposeNode or ReusableComposeNode need to add a CompoableTarget annotation for the function and any composable lambda parameter types. It is recommended, however, to create an annotation that is annotated with ComposableTargetMarker and then the marked annotation be used instead of ComposableTarget directly. A composable annotation marked with ComposableTargetMarker is equivalent to a ComposbleTarget with the fully qualified name of the attribute class as the applier parameter. For an example of using ComposableTargetMarker see anroidx.compose.ui.UiComposable. (I38f11)\n\nBug Fixes\n\nNow it is allowed to pass negative scroll offsets into LazyGridState.scrollToItem() and LazyGridState.animateScrollToItem(). (I025c6, b/211753558)\n\nSupport async font loading for TextField. (Icc4bf, b/214587005)\n\nVersion 1.2.0-alpha03\n\nFebruary 9, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha03 and androidx.compose.foundation:foundation-layout:1.2.0-alpha03 are released. Version 1.2.0-alpha03 contains these commits.\n\nAPI Changes\n\nnotifyFocusedRect methods in TextInputSession and TextInputService are now deprecated and won't be called. Use BringIntoViewRequester instead. (Ia4302, b/192043120, b/216842427, b/178211874)\n\nAnimations were enabled for items of lazy grids with Modifier.animateItemPlacement(). (Ib6621, b/211753218)\n\nBringIntoViewRequester now propagates requests to the hosting Android View. (Ia7a51)\n\nFontFamilyResolver is now available via LocalFontFamilyResolver.current\n\nAdded createFontFamilyResolver(context) and createFontFamilyResolver(context, coroutineScope) to create new FontFamily resolvers outside of compose usage.\n\nParagraph and MultiParagraph now take FontFamily.Resolver\n\nTextLayoutResult.layoutInput.fontFamilyResolver now contains the resolver used for this layout, deprecated TextLayoutResult.layoutInput.resourceLoader as it is no longer used. (Id5a45, b/174162090)\n\nAdded AndroidFont, a new low-level API for providing new types of font resource descriptors on Android. For example, loading fonts from an app-specific backend, optionally locating pre-installed fonts on-device, or loading a font from a resource not provided by the current Font factories.\n\nExpanded Font.ResourceLoaded API to support optional and async font loading. It is not recommended that application developers use this API directly. To add new types of fonts see AndroidFont.\n\nFont.AndroidResourceLoader extension function allows construction of a Font.ResourceLoader when outside of composition.\n\nAdded loadingStrategy parameter to resource-based fonts, to allow async loading when resource font references downloadable fonts XML. (Ie5aea, b/174162090)\n\nTypeface(FontFamily) constructor is deprecated. This was previously used to preload fonts, which may take up to 10 seconds for downloadable fonts. With downloadable fonts, this call may block for 10 seconds. Instead use FontFamilyResolver.preload\n\nfontResource(FontFamily): Typeface is deprecated. This was previously used to preload fonts, which may take up to 10 seconds for downloadable fonts. Instead use FontFamilyResolver.preload (If8e7c, b/174162090)\n\nYou can now specify the content type for the items of LazyVerticalGrid - item/items functions on LazyGridScope now accept such parameter. Providing such information helps item composition reusing logic to make it more efficiently and only reuse the content between the items of similar type. (I7b355, b/215372836)\n\nLazyListLayoutInfo and LazyGridLayoutInfo now have new properties: viewportSize, orientation, reverseLayout (Ifc8ed, b/200920410)\n\nYou can now specify the content type for the items of LazyColumn/LazyRow - item/items functions on LazyListScope now accept such parameter. Providing such information helps item composition reusing logic to make it more efficiently and only reuse the content between the items of similar type. (I26506)\n\nSubcomposeLayoutState constructor accepting maxSlotsToRetainForReuse is now deprecated. Instead there is a new constructor accepting SubcomposeSlotReusePolicy - a new interface allowing more granular control on what slots should be retained for the future reuse. (I52c4d)\n\nAdds Modifiers for WindowInsets, both for padding and sizing. This allows some content to extend into the inset area, and still have primary content stay out of the inset area. For example, windowInsetsPadding can be used to pad the content area to avoid areas that may be fully or partially covered. (Id0395, b/213942085)\n\nBug Fixes\n\nTextFields will now be kept above the keyboard when they are focused and the keyboard is shown, when the soft input mode is ADJUST_PAN. (I8eaeb, b/190539358, b/192043120)\n\nDesktop uses composition local for FontFamily.Resolver\n\nDesktop FontLoader is deprecated\n\nNew createFontFamilyResolver factory on Desktop (I6bbbb, b/174162090)\n\nThe soft keyboard input type no longer flickers when changing focus between text fields. (I1bf50, b/187746439)\n\nText fields no longer require an extra back press when the cursor handle is showing. (Ideb4b, b/205726883)\n\nText selection magnifier behavior has been polished to match the platform magnifier. (Idd918, b/206833278)\n\nVersion 1.2.0-alpha02\n\nJanuary 26, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha02 and androidx.compose.foundation:foundation-layout:1.2.0-alpha02 are released. Version 1.2.0-alpha02 contains these commits.\n\nAPI Changes\n\nAdded NonRestartableComposable to methods that are overloads of existing methods without complex logic. This reduces compiler generated memoization checks (equals) for all parameters which are repeated in the inner function that is called. (I90490)\n\nAdded excludeFromSystemGesture Modifiers for easy access to Android's setSystemGestureExclusionRects (I46f07)\n\nBug Fixes\n\nText selection magnifier behavior has been polished to match the platform magnifier. (Idd918, b/206833278)\n\nLazyColumn, LazyRow, Modifier.verticalScroll and other containers that use Modifier.scrollable now support mouse wheel scrolling. (I2b5e1, b/198214718)\n\nVersion 1.2.0-alpha01\n\nJanuary 12, 2022\n\nandroidx.compose.foundation:foundation:1.2.0-alpha01 and androidx.compose.foundation:foundation-layout:1.2.0-alpha01 are released. Version 1.2.0-alpha01 contains these commits.\n\nAPI Changes\n\nNew parameter userScrollEnabled was added to LazyColumn, LazyRow, and LazyVerticalGrid in order to allow users to temporarily or permanently disable the user initiated scroll via touch gestures or accessibility actions. Scrolling programmatically via the methods on the state will still be allowed. (I7eae9, b/201150093)\n\nAdd onSizeChanged callback to magnifier modifier. (I6879f)\n\nThe magnifier widget now shows when dragging selection handles in a SelectionContainer. (I30b38, b/139320979)\n\nBug Fixes\n\nFixes TextField cursor handle not hiding when scrolled out of view. (I14552, b/208883748)\n\nDependency Updates\n\nNow depends on Kotlin 1.6.10.\n\nVersion 1.1\n\nVersion 1.1.1\n\nFebruary 23, 2022\n\nandroidx.compose.foundation:foundation:1.1.1 and androidx.compose.foundation:foundation-layout:1.1.1 are released. Version 1.1.1 contains these commits.\n\nBug Fixes\n\nFix NullPointerException at androidx.compose.ui.platform.RenderNodeLayer.updateDisplayList (aosp/1947059, b/206677462)\n\nFix crash caused by clipboard content while reading from clipboard on Android. (I06020, b/197769306)\n\nFixed RTL in LazyVerticalGrid (aosp/1931080, b/207510535)\n\nVersion 1.1.0\n\nFebruary 9, 2022\n\nandroidx.compose.foundation:foundation:1.1.0 and androidx.compose.foundation:foundation-layout:1.1.0 are released. Version 1.1.0 contains these commits.\n\nImportant changes since 1.0.0\n\nStable support for the Android 12 Overscroll effect\n\nImprovements to touch target sizing\n\nNote that, with respect to Compose 1.0, Material components will expand their layout space to meet Material accessibility guidelines for touch target size. For instance, Button touch target will expand to a minimum size of 48x48dp, even if you set the Button's size to be smaller. This aligns Compose Material to the same behavior of Material Design Components, providing consistent behavior if you mix Views and Compose. This change also ensures that when you create your UI using Compose Material components, minimum requirements for touch target accessibility will be met.\n\nStable support for Navigation Rail\n\nGraduates a number of previously experimental APIs to stable\n\nSupport for newer versions of Kotlin\n\nVersion 1.1.0-rc03\n\nJanuary 26, 2022\n\nandroidx.compose.foundation:foundation:1.1.0-rc03 and androidx.compose.foundation:foundation-layout:1.1.0-rc03 are released. Version 1.1.0-rc03 contains these commits.\n\nBug Fixes\n\nUpdated to support Compose Material 1.1.0-rc03\n\nVersion 1.1.0-rc01\n\nDecember 15, 2021\n\nandroidx.compose.foundation:foundation:1.1.0-rc01 and androidx.compose.foundation:foundation-layout:1.1.0-rc01 are released. Version 1.1.0-rc01 contains these commits.\n\nBug Fixes\n\nNow it is allowed to pass negative scroll offsets into LazyListSta"
    }
}