{
    "id": "dbpedia_1550_1",
    "rank": 98,
    "data": {
        "url": "https://source.android.com/docs/compatibility/11/android-11-cdd",
        "read_more_link": "",
        "language": "en",
        "title": "Android 11 Compatibility Definition",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/androidsource/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/androidsource/images/lockup.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/androidsource/images/favicon.svg",
        "meta_site_name": "Android Open Source Project",
        "canonical_link": "https://source.android.com/docs/compatibility/11/android-11-cdd",
        "text": "Stay organized with collections Save and categorize content based on your preferences.\n\n1. Introduction\n\nThis document enumerates the requirements that must be met in order for devices to be compatible with Android 11.\n\nThe use of “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” is per the IETF standard defined in RFC2119.\n\nAs used in this document, a “device implementer” or “implementer” is a person or organization developing a hardware/software solution running Android 11. A “device implementation” or “implementation\" is the hardware/software solution so developed.\n\nTo be considered compatible with Android 11, device implementations MUST meet the requirements presented in this Compatibility Definition, including any documents incorporated via reference.\n\nWhere this definition or the software tests described in section 10 is silent, ambiguous, or incomplete, it is the responsibility of the device implementer to ensure compatibility with existing implementations.\n\nFor this reason, the Android Open Source Project is both the reference and preferred implementation of Android. Device implementers are STRONGLY RECOMMENDED to base their implementations to the greatest extent possible on the “upstream” source code available from the Android Open Source Project. While some components can hypothetically be replaced with alternate implementations, it is STRONGLY RECOMMENDED to not follow this practice, as passing the software tests will become substantially more difficult. It is the implementer’s responsibility to ensure full behavioral compatibility with the standard Android implementation, including and beyond the Compatibility Test Suite. Finally, note that certain component substitutions and modifications are explicitly forbidden by this document.\n\nMany of the resources linked to in this document are derived directly or indirectly from the Android SDK and will be functionally identical to the information in that SDK’s documentation. In any cases where this Compatibility Definition or the Compatibility Test Suite disagrees with the SDK documentation, the SDK documentation is considered authoritative. Any technical details provided in the linked resources throughout this document are considered by inclusion to be part of this Compatibility Definition.\n\n1.1 Document Structure\n\n1.1.1. Requirements by Device Type\n\nSection 2 contains all of the requirements that apply to a specific device type. Each subsection of Section 2 is dedicated to a specific device type.\n\nAll the other requirements, that universally apply to any Android device implementations, are listed in the sections after Section 2. These requirements are referenced as \"Core Requirements\" in this document.\n\n1.1.2. Requirement ID\n\nRequirement ID is assigned for MUST requirements.\n\nThe ID is assigned for MUST requirements only.\n\nSTRONGLY RECOMMENDED requirements are marked as [SR] but ID is not assigned.\n\nThe ID consists of : Device Type ID - Condition ID - Requirement ID (e.g. C-0-1).\n\nEach ID is defined as below:\n\nDevice Type ID (see more in 2. Device Types)\n\nC: Core (Requirements that are applied to any Android device implementations)\n\nH: Android Handheld device\n\nT: Android Television device\n\nA: Android Automotive implementation\n\nW: Android Watch implementation\n\nTab: Android Tablet implementation\n\nCondition ID\n\nWhen the requirement is unconditional, this ID is set as 0.\n\nWhen the requirement is conditional, 1 is assigned for the 1st condition and the number increments by 1 within the same section and the same device type.\n\nRequirement ID\n\nThis ID starts from 1 and increments by 1 within the same section and the same condition.\n\n1.1.3. Requirement ID in Section 2\n\nThe Requirement ID in Section 2 starts with the corresponding section ID that is followed by the Requirement ID described above.\n\nThe ID in Section 2 consists of : Section ID / Device Type ID - Condition ID - Requirement ID (e.g. 7.4.3/A-0-1).\n\n2. Device Types\n\nWhile the Android Open Source Project provides a software stack that can be used for a variety of device types and form factors, there are a few device types that have a relatively better established application distribution ecosystem.\n\nThis section describes those device types, and additional requirements and recommendations applicable for each device type.\n\nAll Android device implementations that do not fit into any of the described device types MUST still meet all requirements in the other sections of this Compatibility Definition.\n\n2.1 Device Configurations\n\nFor the major differences in hardware configuration by device type, see the device-specific requirements that follow in this section.\n\n2.2. Handheld Requirements\n\nAn Android Handheld device refers to an Android device implementation that is typically used by holding it in the hand, such as an mp3 player, phone, or tablet.\n\nAndroid device implementations are classified as a Handheld if they meet all the following criteria:\n\nHave a power source that provides mobility, such as a battery.\n\nHave a physical diagonal screen size in the range of 3.3 inches (or 2.5 inches for devices which launched on an API level earlier than Android 11) to 8 inches.\n\nThe additional requirements in the rest of this section are specific to Android Handheld device implementations.\n\nNote: Requirements that do not apply to Android Tablet devices are marked with an *.\n\n2.2.1. Hardware\n\nHandheld device implementations:\n\n[7.1.1.1/H-0-1] MUST have at least one Android-compatible display that meets all requirements described on this document.\n\n[7.1.1.3/H-SR] Are STRONGLY RECOMMENDED to provide users an affordance to change the display size (screen density).\n\nIf Handheld device implementations support software screen rotation, they:\n\n[7.1.1.1/H-1-1]* MUST make the logical screen that is made available for third party applications be at least 2 inches on the short edge(s) and 2.7 inches on the long edge(s). Devices which launched on an API level earlier than that of this document are exempted from this requirement.\n\nIf Handheld device implementations do not support software screen rotation, they:\n\n[7.1.1.1/H-2-1]* MUST make the logical screen that is made available for third party applications be at least 2.7 inches on the short edge(s). Devices which launched on an API level earlier than that of this document are exempted from this requirement.\n\nIf Handheld device implementations claim support for high dynamic range displays through Configuration.isScreenHdr() , they:\n\n[7.1.4.5/H-1-1] MUST advertise support for the EGL_EXT_gl_colorspace_bt2020_pq, EGL_EXT_surface_SMPTE2086_metadata, EGL_EXT_surface_CTA861_3_metadata, VK_EXT_swapchain_colorspace, and VK_EXT_hdr_metadata extensions.\n\nHandheld device implementations:\n\n[7.1.4.6/H-0-1] MUST report whether the device supports the GPU profiling capability via a system property graphics.gpu.profiler.support.\n\nIf Handheld device implementations declare support via a system property graphics.gpu.profiler.support, they:\n\n[7.1.4.6/H-1-1] MUST report as output a protobuf trace that complies with the schema for GPU counters and GPU renderstages defined in the Perfetto documentation.\n\n[7.1.4.6/H-1-2] MUST report conformant values for the device’s GPU counters following the gpu counter trace packet proto.\n\n[7.1.4.6/H-1-3] MUST report conformant values for the device’s GPU RenderStages following the render stage trace packet proto.\n\n[7.1.4.6/H-1-4] MUST report a GPU Frequency tracepoint as specified by the format: power/gpu_frequency.\n\nHandheld device implementations:\n\n[7.1.5/H-0-1] MUST include support for legacy application compatibility mode as implemented by the upstream Android open source code. That is, device implementations MUST NOT alter the triggers or thresholds at which compatibility mode is activated, and MUST NOT alter the behavior of the compatibility mode itself.\n\n[7.2.1/H-0-1] MUST include support for third-party Input Method Editor (IME) applications.\n\n[7.2.3/H-0-3] MUST provide the Home function on all the Android-compatible displays that provide the home screen.\n\n[7.2.3/H-0-4] MUST provide the Back function on all the Android-compatible displays and the Recents function on at least one of the Android-compatible displays.\n\n[7.2.3/H-0-2] MUST send both the normal and long press event of the Back function (KEYCODE_BACK) to the foreground application. These events MUST NOT be consumed by the system and CAN be triggered by outside of the Android device (e.g. external hardware keyboard connected to the Android device).\n\n[7.2.4/H-0-1] MUST support touchscreen input.\n\n[7.2.4/H-SR] Are STRONGLY RECOMMENDED to launch the user-selected assist app, in other words the app that implements VoiceInteractionService, or an activity handling the ACTION_ASSIST on long-press of KEYCODE_MEDIA_PLAY_PAUSE or KEYCODE_HEADSETHOOK if the foreground activity does not handle those long-press events.\n\n[7.3.1/H-SR] Are STRONGLY RECOMMENDED to include a 3-axis accelerometer.\n\nIf Handheld device implementations include a 3-axis accelerometer, they:\n\n[7.3.1/H-1-1] MUST be able to report events up to a frequency of at least 100 Hz.\n\nIf Handheld device implementations include a GPS/GNSS receiver and report the capability to applications through the android.hardware.location.gps feature flag, they:\n\n[7.3.3/H-2-1] MUST report GNSS measurements, as soon as they are found, even if a location calculated from GPS/GNSS is not yet reported.\n\n[7.3.3/H-2-2] MUST report GNSS pseudoranges and pseudorange rates, that, in open-sky conditions after determining the location, while stationary or moving with less than 0.2 meter per second squared of acceleration, are sufficient to calculate position within 20 meters, and speed within 0.2 meters per second, at least 95% of the time.\n\nIf Handheld device implementations include a 3-axis gyroscope, they:\n\n[7.3.4/H-3-1] MUST be able to report events up to a frequency of at least 100 Hz.\n\n[7.3.4/H-3-2] MUST be capable of measuring orientation changes up to 1000 degrees per second.\n\nHandheld device implementations that can make a voice call and indicate any value other than PHONE_TYPE_NONE in getPhoneType:\n\n[7.3.8/H] SHOULD include a proximity sensor.\n\nHandheld device implementations:\n\n[7.3.11/H-SR] Are RECOMMENDED to support pose sensor with 6 degrees of freedom.\n\n[7.4.3/H] SHOULD include support for Bluetooth and Bluetooth LE.\n\nIf Handheld device implementations include a metered connection, they:\n\n[7.4.7/H-1-1] MUST provide the data saver mode.\n\nIf Handheld device implementations include a logical camera device that lists capabilities using CameraMetadata.REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA, they:\n\n[7.5.4/H-1-1] MUST have normal field of view (FOV) by default and it MUST be between 50 and 90 degrees.\n\nHandheld device implementations:\n\n[7.6.1/H-0-1] MUST have at least 4 GB of non-volatile storage available for application private data (a.k.a. \"/data\" partition).\n\n[7.6.1/H-0-2] MUST return “true” for ActivityManager.isLowRamDevice() when there is less than 1GB of memory available to the kernel and userspace.\n\nIf Handheld device implementations declare support of only a 32-bit ABI:\n\n[7.6.1/H-1-1] The memory available to the kernel and userspace MUST be at least 416MB if the default display uses framebuffer resolutions up to qHD (e.g. FWVGA).\n\n[7.6.1/H-2-1] The memory available to the kernel and userspace MUST be at least 592MB if the default display uses framebuffer resolutions up to HD+ (e.g. HD, WSVGA).\n\n[7.6.1/H-3-1] The memory available to the kernel and userspace MUST be at least 896MB if the default display uses framebuffer resolutions up to FHD (e.g. WSXGA+).\n\n[7.6.1/H-4-1] The memory available to the kernel and userspace MUST be at least 1344MB if the default display uses framebuffer resolutions up to QHD (e.g. QWXGA).\n\nIf Handheld device implementations declare support of any 64-bit ABI (with or without any 32-bit ABI):\n\n[7.6.1/H-5-1] The memory available to the kernel and userspace MUST be at least 816MB if the default display uses framebuffer resolutions up to qHD (e.g. FWVGA).\n\n[7.6.1/H-6-1] The memory available to the kernel and userspace MUST be at least 944MB if the default display uses framebuffer resolutions up to HD+ (e.g. HD, WSVGA).\n\n[7.6.1/H-7-1] The memory available to the kernel and userspace MUST be at least 1280MB if the default display uses framebuffer resolutions up to FHD (e.g. WSXGA+).\n\n[7.6.1/H-8-1] The memory available to the kernel and userspace MUST be at least 1824MB if the default display uses framebuffer resolutions up to QHD (e.g. QWXGA).\n\nNote that the \"memory available to the kernel and userspace\" above refers to the memory space provided in addition to any memory already dedicated to hardware components such as radio, video, and so on that are not under the kernel’s control on device implementations.\n\nIf Handheld device implementations include less than or equal to 1GB of memory available to the kernel and userspace, they:\n\n[7.6.1/H-9-1] MUST declare the feature flag android.hardware.ram.low.\n\n[7.6.1/H-9-2] MUST have at least 1.1 GB of non-volatile storage for application private data (a.k.a. \"/data\" partition).\n\nIf Handheld device implementations include more than 1GB of memory available to the kernel and userspace, they:\n\n[7.6.1/H-10-1] MUST have at least 4GB of non-volatile storage available for application private data (a.k.a. \"/data\" partition).\n\nSHOULD declare the feature flag android.hardware.ram.normal.\n\nHandheld device implementations:\n\n[7.6.2/H-0-1] MUST NOT provide an application shared storage smaller than 1 GiB.\n\n[7.7.1/H] SHOULD include a USB port supporting peripheral mode.\n\nIf handheld device implementations include a USB port supporting peripheral mode, they:\n\n[7.7.1/H-1-1] MUST implement the Android Open Accessory (AOA) API.\n\nIf Handheld device implementations include a USB port supporting host mode, they:\n\n[7.7.2/H-1-1] MUST implement the USB audio class as documented in the Android SDK documentation.\n\nHandheld device implementations:\n\n[7.8.1/H-0-1] MUST include a microphone.\n\n[7.8.2/H-0-1] MUST have an audio output and declare android.hardware.audio.output.\n\nIf Handheld device implementations are capable of meeting all the performance requirements for supporting VR mode and include support for it, they:\n\n[7.9.1/H-1-1] MUST declare the android.hardware.vr.high_performance feature flag.\n\n[7.9.1/H-1-2] MUST include an application implementing android.service.vr.VrListenerService that can be enabled by VR applications via android.app.Activity#setVrModeEnabled.\n\nIf Handheld device implementations include one or more USB-C port(s) in host mode and implement (USB audio class), in addition to requirements in section 7.7.2, they:\n\n[7.8.2.2/H-1-1] MUST provide the following software mapping of HID codes:\n\nFunction Mappings Context Behavior A HID usage page: 0x0C\n\nHID usage: 0x0CD\n\nKernel key: KEY_PLAYPAUSE\n\nAndroid key: KEYCODE_MEDIA_PLAY_PAUSE Media playback Input: Short press\n\nOutput: Play or pause Input: Long press\n\nOutput: Launch voice command\n\nSends: android.speech.action.VOICE_SEARCH_HANDS_FREE if the device is locked or its screen is off. Sends android.speech.RecognizerIntent.ACTION_WEB_SEARCH otherwise Incoming call Input: Short press\n\nOutput: Accept call Input: Long press\n\nOutput: Reject call Ongoing call Input: Short press\n\nOutput: End call Input: Long press\n\nOutput: Mute or unmute microphone B HID usage page: 0x0C\n\nHID usage: 0x0E9\n\nKernel key: KEY_VOLUMEUP\n\nAndroid key: VOLUME_UP Media playback, Ongoing call Input: Short or long press\n\nOutput: Increases the system or headset volume C HID usage page: 0x0C\n\nHID usage: 0x0EA\n\nKernel key: KEY_VOLUMEDOWN\n\nAndroid key: VOLUME_DOWN Media playback, Ongoing call Input: Short or long press\n\nOutput: Decreases the system or headset volume D HID usage page: 0x0C\n\nHID usage: 0x0CF\n\nKernel key: KEY_VOICECOMMAND\n\nAndroid key: KEYCODE_VOICE_ASSIST All. Can be triggered in any instance. Input: Short or long press\n\nOutput: Launch voice command\n\n[7.8.2.2/H-1-2] MUST trigger ACTION_HEADSET_PLUG upon a plug insert, but only after the USB audio interfaces and endpoints have been properly enumerated in order to identify the type of terminal connected.\n\nWhen the USB audio terminal types 0x0302 is detected, they:\n\n[7.8.2.2/H-2-1] MUST broadcast Intent ACTION_HEADSET_PLUG with \"microphone\" extra set to 0.\n\nWhen the USB audio terminal types 0x0402 is detected, they:\n\n[7.8.2.2/H-3-1] MUST broadcast Intent ACTION_HEADSET_PLUG with \"microphone\" extra set to 1.\n\nWhen API AudioManager.getDevices() is called while the USB peripheral is connected they:\n\n[7.8.2.2/H-4-1] MUST list a device of type AudioDeviceInfo.TYPE_USB_HEADSET and role isSink() if the USB audio terminal type field is 0x0302.\n\n[7.8.2.2/H-4-2] MUST list a device of type AudioDeviceInfo.TYPE_USB_HEADSET and role isSink() if the USB audio terminal type field is 0x0402.\n\n[7.8.2.2/H-4-3] MUST list a device of type AudioDeviceInfo.TYPE_USB_HEADSET and role isSource() if the USB audio terminal type field is 0x0402.\n\n[7.8.2.2/H-4-4] MUST list a device of type AudioDeviceInfo.TYPE_USB_DEVICE and role isSink() if the USB audio terminal type field is 0x603.\n\n[7.8.2.2/H-4-5] MUST list a device of type AudioDeviceInfo.TYPE_USB_DEVICE and role isSource() if the USB audio terminal type field is 0x604.\n\n[7.8.2.2/H-4-6] MUST list a device of type AudioDeviceInfo.TYPE_USB_DEVICE and role isSink() if the USB audio terminal type field is 0x400.\n\n[7.8.2.2/H-4-7] MUST list a device of type AudioDeviceInfo.TYPE_USB_DEVICE and role isSource() if the USB audio terminal type field is 0x400.\n\n[7.8.2.2/H-SR] Are STRONGLY RECOMMENDED upon connection of a USB-C audio peripheral, to perform enumeration of USB descriptors, identify terminal types and broadcast Intent ACTION_HEADSET_PLUG in less than 1000 milliseconds.\n\nIf Handheld device implementations include at least one haptic actuator, they:\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED NOT to use an eccentric rotating mass (ERM) haptic actuator(vibrator).\n\n[7.10/H]* SHOULD position the placement of the actuator near the location where the device is typically held or touched by hands.\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to implement all public constants for clear haptics in android.view.HapticFeedbackConstants namely (CLOCK_TICK, CONTEXT_CLICK, KEYBOARD_PRESS, KEYBOARD_RELEASE, KEYBOARD_TAP, LONG_PRESS, TEXT_HANDLE_MOVE, VIRTUAL_KEY, VIRTUAL_KEY_RELEASE, CONFIRM, REJECT, GESTURE_START and GESTURE_END).\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to implement all public constants for clear haptics in android.os.VibrationEffect namely (EFFECT_TICK, EFFECT_CLICK, EFFECT_HEAVY_CLICK and EFFECT_DOUBLE_CLICK) and all public constants for rich haptics in android.os.VibrationEffect.Composition namely (PRIMITIVE_CLICK and PRIMITIVE_TICK).\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to use these linked haptic constants mappings.\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to follow quality assessment for createOneShot() and createWaveform() API's.\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to verify the capabilities for amplitude scalability by running android.os.Vibrator.hasAmplitudeControl().\n\nLinear resonant actuator (LRA) is a single mass spring system which has a dominant resonant frequency where the mass translates in the direction of desired motion.\n\nIf Handheld device implementations include at least one linear resonant actuator, they:\n\n[7.10/H]* SHOULD move the haptic actuator in the X-axis of portrait orientation.\n\nIf Handheld device implementations have a haptic actuator which is X-axis Linear resonant actuator (LRA), they:\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to have the resonant frequency of the X-axis LRA be under 200 Hz.\n\nIf handheld device implementations follow haptic constants mapping, they:\n\n[7.10/H-SR]* Are STRONGLY RECOMMENDED to perform a quality assessment for haptic constants.\n\n2.2.2. Multimedia\n\nHandheld device implementations MUST support the following audio encoding and decoding formats and make them available to third-party applications:\n\n[5.1/H-0-1] AMR-NB\n\n[5.1/H-0-2] AMR-WB\n\n[5.1/H-0-3] MPEG-4 AAC Profile (AAC LC)\n\n[5.1/H-0-4] MPEG-4 HE AAC Profile (AAC+)\n\n[5.1/H-0-5] AAC ELD (enhanced low delay AAC)\n\nHandheld device implementations MUST support the following video encoding formats and make them available to third-party applications:\n\n[5.2/H-0-1] H.264 AVC\n\n[5.2/H-0-2] VP8\n\nHandheld device implementations MUST support the following video decoding formats and make them available to third-party applications:\n\n[5.3/H-0-1] H.264 AVC\n\n[5.3/H-0-2] H.265 HEVC\n\n[5.3/H-0-3] MPEG-4 SP\n\n[5.3/H-0-4] VP8\n\n[5.3/H-0-5] VP9\n\n2.2.3. Software\n\nHandheld device implementations:\n\n[3.2.3.1/H-0-1] MUST have an application that handles the ACTION_GET_CONTENT, ACTION_OPEN_DOCUMENT, ACTION_OPEN_DOCUMENT_TREE, and ACTION_CREATE_DOCUMENT intents as described in the SDK documents, and provide the user affordance to access the document provider data by using DocumentsProvider API.\n\n[3.2.3.1/H-0-2]* MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here.\n\n[3.2.3.1/H-SR] Are STRONGLY RECOMMENDED to preload an email application which can handle ACTION_SENDTO or ACTION_SEND or ACTION_SEND_MULTIPLE intents to send an email.\n\n[3.4.1/H-0-1] MUST provide a complete implementation of the android.webkit.Webview API.\n\n[3.4.2/H-0-1] MUST include a standalone Browser application for general user web browsing.\n\n[3.8.1/H-SR] Are STRONGLY RECOMMENDED to implement a default launcher that supports in-app pinning of shortcuts, widgets and widgetFeatures.\n\n[3.8.1/H-SR] Are STRONGLY RECOMMENDED to implement a default launcher that provides quick access to the additional shortcuts provided by third-party apps through the ShortcutManager API.\n\n[3.8.1/H-SR] Are STRONGLY RECOMMENDED to include a default launcher app that shows badges for the app icons.\n\n[3.8.2/H-SR] Are STRONGLY RECOMMENDED to support third-party app widgets.\n\n[3.8.3/H-0-1] MUST allow third-party apps to notify users of notable events through the Notification and NotificationManager API classes.\n\n[3.8.3/H-0-2] MUST support rich notifications.\n\n[3.8.3/H-0-3] MUST support heads-up notifications.\n\n[3.8.3/H-0-4] MUST include a notification shade, providing the user the ability to directly control (e.g. reply, snooze, dismiss, block) the notifications through user affordance such as action buttons or the control panel as implemented in the AOSP.\n\n[3.8.3/H-0-5] MUST display the choices provided through RemoteInput.Builder setChoices() in the notification shade.\n\n[3.8.3/H-SR] Are STRONGLY RECOMMENDED to display the first choice provided through RemoteInput.Builder setChoices() in the notification shade without additional user interaction.\n\n[3.8.3/H-SR] Are STRONGLY RECOMMENDED to display all the choices provided through RemoteInput.Builder setChoices() in the notification shade when the user expands all notifications in the notification shade.\n\n[3.8.3.1/H-SR] Are STRONGLY RECOMMENDED to display actions for which Notification.Action.Builder.setContextual is set as true in-line with the replies displayed by Notification.Remoteinput.Builder.setChoices.\n\n[3.8.4/H-SR] Are STRONGLY RECOMMENDED to implement an assistant on the device to handle the Assist action.\n\nIf Handheld device implementations support Assist action, they:\n\n[3.8.4/H-SR] Are STRONGLY RECOMMENDED to use long press on HOME key as the designated interaction to launch the assist app as described in section 7.2.3. MUST launch the user-selected assist app, in other words the app that implements VoiceInteractionService , or an activity handling the ACTION_ASSIST intent.\n\nIf Handheld device implementations support conversation notifications and group them into a separate section from alerting and silent non-conversation notifications, they:\n\n[3.8.4/H-1-1]* MUST display conversation notifications ahead of non conversation notifications with the exception of ongoing foreground service notifications and importance:high notifications.\n\nIf Android Handheld device implementations support a lock screen, they:\n\n[3.8.10/H-1-1] MUST display the Lock screen Notifications including the Media Notification Template.\n\nIf Handheld device implementations support a secure lock screen, they:\n\n[3.9/H-1-1] MUST implement the full range of device administration policies defined in the Android SDK documentation.\n\n[3.9/H-1-2] MUST declare the support of managed profiles via the android.software.managed_users feature flag, except when the device is configured so that it would report itself as a low RAM device or so that it allocates internal (non-removable) storage as shared storage.\n\nIf Handheld device implementations include support for ControlsProviderService and Control APIs and allow third-party applications to publish device controls, then they:\n\n[3.8.16/H-1-1] MUST declare the feature flag android.software.controls and set it to true.\n\n[3.8.16/H-1-2] MUST provide a user affordance with the ability to add, edit, select, and operate the user’s favorite device controls from the controls registered by the third-party applications through the ControlsProviderService and the Control APIs.\n\n[3.8.16/H-1-3] MUST provide access to this user affordance within three interactions from a default Launcher.\n\n[3.8.16/H-1-4] MUST accurately render in this user affordance the name and icon of each third-party app that provides controls via the ControlsProviderService API as well as any specified fields provided by the Control APIs.\n\nConversely, If Handheld device implementations do not implement such controls, they:\n\n[3.8.16/H-2-1] MUST report null for the ControlsProviderService and the Control APIs.\n\n[3.8.16/H-2-2] MUST declare the feature flag android.software.controls and set it to false.\n\nHandheld device implementations:\n\n[3.10/H-0-1] MUST support third-party accessibility services.\n\n[3.10/H-SR] Are STRONGLY RECOMMENDED to preload accessibility services on the device comparable with or exceeding functionality of the Switch Access and TalkBack (for languages supported by the preinstalled Text-to-speech engine) accessibility services as provided in the talkback open source project.\n\n[3.11/H-0-1] MUST support installation of third-party TTS engines.\n\n[3.11/H-SR] Are STRONGLY RECOMMENDED to include a TTS engine supporting the languages available on the device.\n\n[3.13/H-SR] Are STRONGLY RECOMMENDED to include a Quick Settings UI component.\n\nIf Android handheld device implementations declare FEATURE_BLUETOOTH or FEATURE_WIFI support, they:\n\n[3.16/H-1-1] MUST support the companion device pairing feature.\n\nIf the navigation function is provided as an on-screen, gesture-based action:\n\n[7.2.3/H] The gesture recognition zone for the Home function SHOULD be no higher than 32 dp in height from the bottom of the screen.\n\nIf Handheld device implementations provide a navigation function as a gesture from anywhere on the left and right edges of the screen:\n\n[7.2.3/H-0-1] The navigation function's gesture area MUST be less than 40 dp in width on each side. The gesture area SHOULD be 24 dp in width by default.\n\n2.2.4. Performance and Power\n\n[8.1/H-0-1] Consistent frame latency. Inconsistent frame latency or a delay to render frames MUST NOT happen more often than 5 frames in a second, and SHOULD be below 1 frames in a second.\n\n[8.1/H-0-2] User interface latency. Device implementations MUST ensure low latency user experience by scrolling a list of 10K list entries as defined by the Android Compatibility Test Suite (CTS) in less than 36 secs.\n\n[8.1/H-0-3] Task switching. When multiple applications have been launched, re-launching an already-running application after it has been launched MUST take less than 1 second.\n\nHandheld device implementations:\n\n[8.2/H-0-1] MUST ensure a sequential write performance of at least 5 MB/s.\n\n[8.2/H-0-2] MUST ensure a random write performance of at least 0.5 MB/s.\n\n[8.2/H-0-3] MUST ensure a sequential read performance of at least 15 MB/s.\n\n[8.2/H-0-4] MUST ensure a random read performance of at least 3.5 MB/s.\n\nIf Handheld device implementations include features to improve device power management that are included in AOSP or extend the features that are included in AOSP, they:\n\n[8.3/H-1-1] MUST provide user affordance to enable and disable the battery saver feature.\n\n[8.3/H-1-2] MUST provide user affordance to display all apps that are exempted from App Standby and Doze power-saving modes.\n\nHandheld device implementations:\n\n[8.4/H-0-1] MUST provide a per-component power profile that defines the current consumption value for each hardware component and the approximate battery drain caused by the components over time as documented in the Android Open Source Project site.\n\n[8.4/H-0-2] MUST report all power consumption values in milliampere hours (mAh).\n\n[8.4/H-0-3] MUST report CPU power consumption per each process's UID. The Android Open Source Project meets the requirement through the uid_cputime kernel module implementation.\n\n[8.4/H-0-4] MUST make this power usage available via the adb shell dumpsys batterystats shell command to the app developer.\n\n[8.4/H] SHOULD be attributed to the hardware component itself if unable to attribute hardware component power usage to an application.\n\nIf Handheld device implementations include a screen or video output, they:\n\n[8.4/H-1-1] MUST honor the android.intent.action.POWER_USAGE_SUMMARY intent and display a settings menu that shows this power usage.\n\n2.2.5. Security Model\n\nHandheld device implementations:\n\n[9.1/H-0-1] MUST allow third-party apps to access the usage statistics via the android.permission.PACKAGE_USAGE_STATS permission and provide a user-accessible mechanism to grant or revoke access to such apps in response to the android.settings.ACTION_USAGE_ACCESS_SETTINGS intent.\n\nHandheld device implementations (* Not applicable for Tablet):\n\n[9.11/H-0-2]* MUST back up the keystore implementation with an isolated execution environment.\n\n[9.11/H-0-3]* MUST have implementations of RSA, AES, ECDSA, and HMAC cryptographic algorithms and MD5, SHA1, and SHA-2 family hash functions to properly support the Android Keystore system's supported algorithms in an area that is securely isolated from the code running on the kernel and above. Secure isolation MUST block all potential mechanisms by which kernel or userspace code might access the internal state of the isolated environment, including DMA. The upstream Android Open Source Project (AOSP) meets this requirement by using the Trusty implementation, but another ARM TrustZone-based solution or a third-party reviewed secure implementation of a proper hypervisor-based isolation are alternative options.\n\n[9.11/H-0-4]* MUST perform the lock screen authentication in the isolated execution environment and only when successful, allow the authentication-bound keys to be used. Lock screen credentials MUST be stored in a way that allows only the isolated execution environment to perform lock screen authentication. The upstream Android Open Source Project provides the Gatekeeper Hardware Abstraction Layer (HAL) and Trusty, which can be used to satisfy this requirement.\n\n[9.11/H-0-5]* MUST support key attestation where the attestation signing key is protected by secure hardware and signing is performed in secure hardware. The attestation signing keys MUST be shared across large enough number of devices to prevent the keys from being used as device identifiers. One way of meeting this requirement is to share the same attestation key unless at least 100,000 units of a given SKU are produced. If more than 100,000 units of an SKU are produced, a different key MAY be used for each 100,000 units.\n\nNote that if a device implementation is already launched on an earlier Android version, such a device is exempted from the requirement to have a keystore backed by an isolated execution environment and support the key attestation, unless it declares the android.hardware.fingerprint feature which requires a keystore backed by an isolated execution environment.\n\nWhen Handheld device implementations support a secure lock screen, they:\n\n[9.11/H-1-1] MUST allow the user to choose the shortest sleep timeout, that is a transition time from the unlocked to the locked state, as 15 seconds or less.\n\n[9.11/H-1-2] MUST provide user affordance to hide notifications and disable all forms of authentication except for the primary authentication described in 9.11.1 Secure Lock Screen. The AOSP meets the requirement as lockdown mode.\n\nIf Handheld device implementations include multiple users and do not declare the android.hardware.telephony feature flag, they:\n\n[9.5/H-2-1] MUST support restricted profiles, a feature that allows device owners to manage additional users and their capabilities on the device. With restricted profiles, device owners can quickly set up separate environments for additional users to work in, with the ability to manage finer-grained restrictions in the apps that are available in those environments.\n\nIf Handheld device implementations include multiple users and declare the android.hardware.telephony feature flag, they:\n\n[9.5/H-3-1] MUST NOT support restricted profiles but MUST align with the AOSP implementation of controls to enable /disable other users from accessing the voice calls and SMS.\n\nHandheld device implementations (* Not applicable for Tablet):\n\n[6.1/H-0-1]* MUST support the shell command cmd testharness.\n\nHandheld device implementations (* Not applicable for Tablet):\n\nPerfetto\n\n[6.1/H-0-2]* MUST expose a /system/bin/perfetto binary to the shell user which cmdline complies with the perfetto documentation.\n\n[6.1/H-0-3]* The perfetto binary MUST accept as input a protobuf config that complies with the schema defined in the perfetto documentation.\n\n[6.1/H-0-4]* The perfetto binary MUST write as output a protobuf trace that complies with the schema defined in the perfetto documentation.\n\n[6.1/H-0-5]* MUST provide, through the perfetto binary, at least the data sources described in the perfetto documentation.\n\n[6.1/H-0-6]* The perfetto traced daemon MUST be enabled by default (system property persist.traced.enable).\n\n2.2.7 Handheld Media Performance Class\n\nSee Section 7.11 for the definition of media performance class.\n\n2.2.7.1. Media\n\nIf Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:\n\n[5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods.\n\n[5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps.\n\n[5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods.\n\n[5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps.\n\n[5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods.\n\n[5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p@30 fps resolution.\n\n[5.1/H-1-7] MUST have a codec initialization latency of 65 ms or less for a 1080p or smaller video encoding session for all hardware video encoders (other than Dolby vision codec) when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization.\n\n[5.1/H-1-8] MUST have a codec initialization latency of 50 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load.Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization.\n\n[5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback.\n\n[5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback.\n\n[5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test.\n\n2.2.7.2. Camera\n\nIf Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:\n\n[7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID.\n\n[7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 4 megapixels supporting video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID.\n\n[7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for back primary and LIMITED or better for front primary camera.\n\n[7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras.\n\n[7.5/H-1-5] MUST have camera2 JPEG capture latency < 1000ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras.\n\n[7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) < 600ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras.\n\n2.2.7.3. Hardware\n\nIf Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:\n\n[7.1.1.1/H-1-1] MUST have screen resolution of at least 1080p.\n\n[7.1.1.3/H-1-1] MUST have screen density of at least 400 dpi.\n\n[7.6.1/H-1-1] MUST have at least 6 GB of physical memory.\n\n2.2.7.4. Performance\n\nIf Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:\n\n[8.2/H-1-1] MUST ensure a sequential write performance of at least 100 MB/s.\n\n[8.2/H-1-2] MUST ensure a random write performance of at least 10 MB/s.\n\n[8.2/H-1-3] MUST ensure a sequential read performance of at least 200 MB/s.\n\n[8.2/H-1-4] MUST ensure a random read performance of at least 25 MB/s.\n\n2.3. Television Requirements\n\nAn Android Television device refers to an Android device implementation that is an entertainment interface for consuming digital media, movies, games, apps, and/or live TV for users sitting about ten feet away (a “lean back” or “10-foot user interface”).\n\nAndroid device implementations are classified as a Television if they meet all the following criteria:\n\nHave provided a mechanism to remotely control the rendered user interface on the display that might sit ten feet away from the user.\n\nHave an embedded screen display with the diagonal length larger than 24 inches OR include a video output port, such as VGA, HDMI, DisplayPort, or a wireless port for display.\n\nThe additional requirements in the rest of this section are specific to Android Television device implementations.\n\n2.3.1. Hardware\n\nTelevision device implementations:\n\n[7.2.2/T-0-1] MUST support D-pad.\n\n[7.2.3/T-0-1] MUST provide the Home and Back functions.\n\n[7.2.3/T-0-2] MUST send both the normal and long press event of the Back function (KEYCODE_BACK) to the foreground application.\n\n[7.2.6.1/T-0-1] MUST include support for game controllers and declare the android.hardware.gamepad feature flag.\n\n[7.2.7/T] SHOULD provide a remote control from which users can access non-touch navigation and core navigation keys inputs.\n\nIf Television device implementations include a 3-axis gyroscope, they:\n\n[7.3.4/T-1-1] MUST be able to report events up to a frequency of at least 100 Hz.\n\n[7.3.4/T-1-2] MUST be capable of measuring orientation changes up to 1000 degrees per second.\n\nTelevision device implementations:\n\n[7.4.3/T-0-1] MUST support Bluetooth and Bluetooth LE.\n\n[7.6.1/T-0-1] MUST have at least 4 GB of non-volatile storage available for application private data (a.k.a. \"/data\" partition).\n\nIf Television device implementations include a USB port that supports host mode, they:\n\n[7.5.3/T-1-1] MUST include support for an external camera that connects through this USB port but is not necessarily always connected.\n\nIf TV device implementations are 32-bit:\n\n[7.6.1/T-1-1] The memory available to the kernel and userspace MUST be at least 896MB if any of the following densities are used:\n\n400dpi or higher on small/normal screens\n\nxhdpi or higher on large screens\n\ntvdpi or higher on extra large screens\n\nIf TV device implementations are 64-bit:\n\n[7.6.1/T-2-1] The memory available to the kernel and userspace MUST be at least 1280MB if any of the following densities are used:\n\n400dpi or higher on small/normal screens\n\nxhdpi or higher on large screens\n\ntvdpi or higher on extra large screens\n\nNote that the \"memory available to the kernel and userspace\" above refers to the memory space provided in addition to any memory already dedicated to hardware components such as radio, video, and so on that are not under the kernel’s control on device implementations.\n\nTelevision device implementations:\n\n[7.8.1/T] SHOULD include a microphone.\n\n[7.8.2/T-0-1] MUST have an audio output and declare android.hardware.audio.output.\n\n2.3.2. Multimedia\n\nTelevision device implementations MUST support the following audio encoding and decoding formats and make them available to third-party applications:\n\n[5.1/T-0-1] MPEG-4 AAC Profile (AAC LC)\n\n[5.1/T-0-2] MPEG-4 HE AAC Profile (AAC+)\n\n[5.1/T-0-3] AAC ELD (enhanced low delay AAC)\n\nTelevision device implementations MUST support the following video encoding formats and make them available to third-party applications:\n\n[5.2/T-0-1] H.264\n\n[5.2/T-0-2] VP8\n\nTelevision device implementations:\n\n[5.2.2/T-SR] Are STRONGLY RECOMMENDED to support H.264 encoding of 720p and 1080p resolution videos at 30 frames per second.\n\nTelevision device implementations MUST support the following video decoding formats and make them available to third-party applications:\n\n[5.3.3/T-0-1] MPEG-4 SP\n\n[5.3.4/T-0-2] H.264 AVC\n\n[5.3.5/T-0-3] H.265 HEVC\n\n[5.3.6/T-0-4] VP8\n\n[5.3.7/T-0-5] VP9\n\n[5.3.1/T-0-6] MPEG-2\n\nTelevision device implementations MUST support MPEG-2 decoding, as detailed in Section 5.3.1, at standard video frame rates and resolutions up to and including:\n\n[5.3.1/T-1-1] HD 1080p at 29.97 frames per second with Main Profile High Level.\n\n[5.3.1/T-1-2] HD 1080i at 59.94 frames per second with Main Profile High Level. They MUST deinterlace interlaced MPEG-2 video and make it available to third-party applications.\n\nTelevision device implementations MUST support H.264 decoding, as detailed in Section 5.3.4, at standard video frame rates and resolutions up to and including:\n\n[5.3.4/T-1-1] HD 1080p at 60 frames per second with Baseline Profile\n\n[5.3.4/T-1-2] HD 1080p at 60 frames per second with Main Profile\n\n[5.3.4/T-1-3] HD 1080p at 60 frames per second with High Profile Level 4.2\n\nTelevision device implementations with H.265 hardware decoders MUST support H.265 decoding, as detailed in Section 5.3.5, at standard video frame rates and resolutions up to and including:\n\n[5.3.5/T-1-1] HD 1080p at 60 frames per second with Main Profile Level 4.1\n\nIf Television device implementations with H.265 hardware decoders support H.265 decoding and the UHD decoding profile, they:\n\n[5.3.5/T-2-1] MUST support the UHD decoding profile at 60 frames per second with Main10 Level 5 Main Tier profile\n\nTelevision device implementations MUST support VP8 decoding, as detailed in Section 5.3.6, at standard video frame rates and resolutions up to and including:\n\n[5.3.6/T-1-1] HD 1080p at 60 frames per second decoding profile\n\nTelevision device implementations with VP9 hardware decoders MUST support VP9 decoding, as detailed in Section 5.3.7, at standard video frame rates and resolutions up to and including:\n\n[5.3.7/T-1-1] HD 1080p at 60 frames per second with profile 0 (8 bit color depth)\n\nIf Television device implementations with VP9 hardware decoders support VP9 decoding and the UHD decoding profile, they:\n\n[5.3.7/T-2-1] MUST support the UHD decoding profile at 60 frames per second with profile 0 (8 bit color depth).\n\n[5.3.7/T-2-1] Are STRONGLY RECOMMENDED to support the UHD decoding profile at 60 frames per second with profile 2 (10 bit color depth).\n\nTelevision device implementations:\n\n[5.5/T-0-1] MUST include support for system Master Volume and digital audio output volume attenuation on supported outputs, except for compressed audio passthrough output (where no audio decoding is done on the device).\n\nIf Television device implementations do not have a built in display, but instead support an external display connected via HDMI, they:\n\n[5.8/T-0-1] MUST set the HDMI output mode to select the maximum resolution that can be supported with either a 50Hz or 60Hz refresh rate.\n\n[5.8/T-SR] Are STRONGLY RECOMMENDED to provide a user configurable HDMI refresh rate selector.\n\n[5.8] SHOULD set the HDMI output mode refresh rate to either 50Hz or 60Hz, depending on the video refresh rate for the region the device is sold in.\n\nIf Television device implementations do not have a built in display, but instead support an external display connected via HDMI, they:\n\n[5.8/T-1-1] MUST support HDCP 2.2.\n\nIf Television device implementations do not support UHD decoding, but instead support an external display connected via HDMI, they:\n\n[5.8/T-2-1] MUST support HDCP 1.4\n\n2.3.3. Software\n\nTelevision device implementations:\n\n[3/T-0-1] MUST declare the features android.software.leanback and android.hardware.type.television.\n\n[3.2.3.1/T-0-1] MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here.\n\n[3.4.1/T-0-1] MUST provide a complete implementation of the android.webkit.Webview API.\n\nIf Android Television device implementations support a lock screen,they:\n\n[3.8.10/T-1-1] MUST display the Lock screen Notifications including the Media Notification Template.\n\nTelevision device implementations:\n\n[3.8.14/T-SR] Are STRONGLY RECOMMENDED to support picture-in-picture (PIP) mode multi-window.\n\n[3.10/T-0-1] MUST support third-party accessibility services.\n\n[3.10/T-SR] Are STRONGLY RECOMMENDED to preload accessibility services on the device comparable with or exceeding functionality of the Switch Access and TalkBack (for languages supported by the preinstalled Text-to-speech engine) accessibility services as provided in the talkback open source project.\n\nIf Television device implementations report the feature android.hardware.audio.output, they:\n\n[3.11/T-SR] Are STRONGLY RECOMMENDED to include a TTS engine supporting the languages available on the device.\n\n[3.11/T-1-1] MUST support installation of third-party TTS engines.\n\nTelevision device implementations:\n\n[3.12/T-0-1] MUST support TV Input Framework.\n\n2.3.4. Performance and Power\n\n[8.1/T-0-1] Consistent frame latency. Inconsistent frame latency or a delay to render frames MUST NOT happen more often than 5 frames in a second, and SHOULD be below 1 frames in a second.\n\n[8.2/T-0-1] MUST ensure a sequential write performance of at least 5MB/s.\n\n[8.2/T-0-2] MUST ensure a random write performance of at least 0.5MB/s.\n\n[8.2/T-0-3] MUST ensure a sequential read performance of at least 15MB/s.\n\n[8.2/T-0-4] MUST ensure a random read performance of at least 3.5MB/s.\n\nIf Television device implementations include features to improve device power management that are included in AOSP or extend the features that are included in AOSP, they:\n\n[8.3/T-1-1] MUST provide user affordance to enable and disable the battery saver feature.\n\nIf Television device implementations do not have a battery they:\n\n[8.3/T-1-2] MUST register the device as a batteryless device as described in Supporting Batteryless Devices.\n\nIf Television device implementations have a battery they:\n\n[8.3/T-1-3] MUST provide user affordance to display all apps that are exempted from App Standby and Doze power-saving modes.\n\nTelevision device implementations:\n\n[8.4/T-0-1] MUST provide a per-component power profile that defines the current consumption value for each hardware component and the approximate battery drain caused by the components over time as documented in the Android Open Source Project site.\n\n[8.4/T-0-2] MUST report all power consumption values in milliampere hours (mAh).\n\n[8.4/T-0-3] MUST report CPU power consumption per each process's UID. The Android Open Source Project meets the requirement through the uid_cputime kernel module implementation.\n\n[8.4/T] SHOULD be attributed to the hardware component itself if unable to attribute hardware component power usage to an application.\n\n[8.4/T-0-4] MUST make this power usage available via the adb shell dumpsys batterystats shell command to the app developer.\n\n2.3.5. Security Model\n\nTelevision device implementations:\n\n[9.11/T-0-1] MUST back up the keystore implementation with an isolated execution environment.\n\n[9.11/T-0-2] MUST have implementations of RSA, AES, ECDSA and HMAC cryptographic algorithms and MD5, SHA1, and SHA-2 family hash functions to properly support the Android Keystore system's supported algorithms in an area that is securely isolated from the code running on the kernel and above. Secure isolation MUST block all potential mechanisms by which kernel or userspace code might access the internal state of the isolated environment, including DMA. The upstream Android Open Source Project (AOSP) meets this requirement by using the Trusty implementation, but another ARM TrustZone-based solution or a third-party reviewed secure implementation of a proper hypervisor-based isolation are alternative options.\n\n[9.11/T-0-3] MUST perform the lock screen authentication in the isolated execution environment and only when successful, allow the authentication-bound keys to be used. Lock screen credentials MUST be stored in a way that allows only the isolated execution environment to perform lock screen authentication. The upstream Android Open Source Project provides the Gatekeeper Hardware Abstraction Layer (HAL) and Trusty, which can be used to satisfy this requirement.\n\n[9.11/T-0-4] MUST support key attestation where the attestation signing key is protected by secure hardware and signing is performed in secure hardware. The attestation signing keys MUST be shared across large enough number of devices to prevent the keys from being used as device identifiers. One way of meeting this requirement is to share the same attestation key unless at least 100,000 units of a given SKU are produced. If more than 100,000 units of an SKU are produced, a different key MAY be used for each 100,000 units.\n\nNote that if a device implementation is already launched on an earlier Android version, such a device is exempted from the requirement to have a keystore backed by an isolated execution environment and support the key attestation, unless it declares the android.hardware.fingerprint feature which requires a keystore backed by an isolated execution environment.\n\nIf Television device implementations support a secure lock screen, they:\n\n[9.11/T-1-1] MUST allow the user to choose the Sleep timeout for transition from the unlocked to the locked state, with a minimum allowable timeout up to 15 seconds or less.\n\nIf Television device implementations include multiple users and do not declare the android.hardware.telephony feature flag, they:\n\n[9.5/T-2-1] MUST support restricted profiles, a feature that allows device owners to manage additional users and their capabilities on the device. With restricted profiles, device owners can quickly set up separate environments for additional users to work in, with the ability to manage finer-grained restrictions in the apps that are available in those environments.\n\nIf Television device implementations include multiple users and declare the android.hardware.telephony feature flag, they:\n\n[9.5/T-3-1] MUST NOT support restricted profiles but MUST align with the AOSP implementation of controls to enable /disable other users from accessing the voice calls and SMS.\n\nTelevision device implementations:\n\nPerfetto\n\n[6.1/T-0-1] MUST expose a /system/bin/perfetto binary to the shell user which cmdline complies with the perfetto documentation.\n\n[6.1/T-0-2] The perfetto binary MUST accept as input a protobuf config that complies with the schema defined in the perfetto documentation.\n\n[6.1/T-0-3] The perfetto binary MUST write as output a protobuf trace that complies with the schema defined in the perfetto documentation.\n\n[6.1/T-0-4] MUST provide, through the perfetto binary, at least the data sources described in the perfetto documentation.\n\n2.4. Watch Requirements\n\nAn Android Watch device refers to an Android device implementation intended to be worn on the body, perhaps on the wrist.\n\nAndroid device implementations are classified as a Watch if they meet all the following criteria:\n\nHave a screen with the physical diagonal length in the range from 1.1 to 2.5 inches.\n\nHave a mechanism provided to be worn on the body.\n\nThe additional requirements in the rest of this section are specific to Android Watch device implementations.\n\n2.4.1. Hardware\n\nWatch device implementations:\n\n[7.1.1.1/W-0-1] MUST have a screen with the physical diagonal size in the range from 1.1 to 2.5 inches.\n\n[7.2.3/W-0-1] MUST have the Home function available to the user, and the Back function except for when it is in UI_MODE_TYPE_WATCH.\n\n[7.2.4/W-0-1] MUST support touchscreen input.\n\n[7.3.1/W-SR] Are STRONGLY RECOMMENDED to include a 3-axis accelerometer.\n\nIf Watch device implementations include a GPS/GNSS receiver and report the capability to applications through the android.hardware.location.gps feature flag, they:\n\n[7.3.3/W-1-1] MUST report GNSS measurements, as soon as they are found, even if a location calculated from GPS/GNSS is not yet reported.\n\n[7.3.3/W-1-2] MUST report GNSS pseudoranges and pseudorange rates, that, in open-sky conditions after determining the location, while stationary or moving with less than 0.2 meter per second squared of acceleration, are sufficient to calculate position within 20 meters, and speed within 0.2 meters per second, at least 95% of the time.\n\nIf Watch device implementations include a 3-axis gyroscope, they:\n\n[7.3.4/W-2-1] MUST be capable of measuring orientation changes up to 1000 degrees per second.\n\nWatch device implementations:\n\n[7.4.3/W-0-1] MUST support Bluetooth.\n\n[7.6.1/W-0-1] MUST have at least 1 GB of non-volatile storage available for application private data (a.k.a. \"/data\" partition).\n\n[7.6.1/W-0-2] MUST have at least 416 MB memory available to the kernel and userspace.\n\n[7.8.1/W-0-1] MUST include a microphone.\n\n[7.8.2/W] MAY have audio output.\n\n2.4.2. Multimedia\n\nNo additional requirements.\n\n2.4.3. Software\n\nWatch device implementations:\n\n[3/W-0-1] MUST declare the feature android.hardware.type.watch.\n\n[3/W-0-2] MUST support uiMode = UI_MODE_TYPE_WATCH.\n\n[3.2.3.1/W-0-1] MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here.\n\nWatch device implementations:\n\n[3.8.4/W-SR] Are STRONGLY RECOMMENDED to implement an assistant on the device to handle the Assist action.\n\nWatch device implementations that declare the android.hardware.audio.output feature flag:\n\n[3.10/W-1-1] MUST support third-party accessibility services.\n\n[3.10/W-SR] Are STRONGLY RECOMMENDED to preload accessibility services on the device comparable with or exceeding functionality of the Switch Access and TalkBack (for languages supported by the preinstalled Text-to-speech engine) accessibility services as provided in the talkback open source project.\n\nIf Watch device implementations report the feature android.hardware.audio.output, they:\n\n[3.11/W-SR] Are STRONGLY RECOMMENDED to include a TTS engine supporting the languages available on the device.\n\n[3.11/W-0-1] MUST support installation of third-party TTS engines.\n\n2.4.4. Performance and Power\n\nIf Watch device implementations include features to improve device power management that are included in AOSP or extend the features that are included in AOSP, they:\n\n[8.3/W-SR] Are STRONGLY RECOMMENDED to provide user affordance to display all apps that are exempted from App Standby and Doze power-saving modes.\n\n[8.3/W-SR] Are STRONGLY RECOMMENDED to provide user affordance to enable and disable the battery saver feature.\n\nWatch device implementations:\n\n[8.4/W-0-1] MUST provide a per-component power profile that defines the current consumption value for each hardware component and the approximate battery drain caused by the components over time as documented in the Android Open Source Project site.\n\n[8.4/W-0-2] MUST report all power consumption values in milliampere hours (mAh).\n\n[8.4/W-0-3] MUST report CPU power consumption per each process's UID. The Android Open Source Project meets the requirement through the uid_cputime kernel module implementation.\n\n[8.4/W-0-4] MUST make this power usage available via the adb shell dumpsys batterystats shell command to the app developer.\n\n[8.4/W] SHOULD be attributed to the hardware component itself if unable to attribute hardware component power usage to an application.\n\n2.4.5. Security Model\n\nIf Watch device implementations include multiple users and do not declare the android.hardware.telephony feature flag, they:\n\n[9.5/W-1-1] MUST support restricted profiles, a feature that allows device owners to manage additional users and their capabilities on the device. With restricted profiles, device owners can quickly set up separate environments for additional users to work in, with the ability to manage finer-grained restrictions in the apps that are available in those environments.\n\nIf Watch device implementations include multiple users and declare the android.hardware.telephony feature flag, they:\n\n[9.5/W-2-1] MUST NOT support restricted profiles but MUST align with the AOSP implementation of controls to enable /disable other users from accessing the voice calls and SMS.\n\n2.5. Automotive Requirements\n\nAndroid Automotive implementation refers to a vehicle head unit running Android as an operating system for part or all of the system and/or infotainment functionality.\n\nAndroid device implementations are classified as an Automotive if they declare the feature android.hardware.type.automotive or meet all the following criteria.\n\nAre embedded as part of, or pluggable to, an automotive vehicle.\n\nAre using a screen in the driver's seat row as the primary display.\n\nThe additional requirements in the rest of this section are specific to Android Automotive device implementations.\n\n2.5.1. Hardware\n\nAutomotive device implementations:\n\n[7.1.1.1/A-0-1] MUST have a screen at least 6 inches in physical diagonal size.\n\n[7.1.1.1/A-0-2] MUST have a screen size layout of at least 750 dp x 480 dp.\n\n[7.2.3/A-0-1] MUST provide the Home function and MAY provide Back and Recent functions.\n\n[7.2.3/A-0-2] MUST send both the normal and long press event of the Back function (KEYCODE_BACK) to the foreground application.\n\n[7.3/A-0-1] MUST implement and report GEAR_SELECTION, NIGHT_MODE, PERF_VEHICLE_SPEED and PARKING_BRAKE_ON.\n\n[7.3/A-0-2] The value of the NIGHT_MODE flag MUST be consistent with dashboard day/night mode and SHOULD be based on ambient light sensor input. The underlying ambient light sensor MAY be the same as Photometer.\n\n[7.3/A-0-3] MUST provide sensor additional info field TYPE_SENSOR_PLACEMENT as part of SensorAdditionalInfo for every sensor provided.\n\n[7.3/A-0-1] MAY dead reckon Location by fusing GPS/GNSS with additional sensors. If Location is dead reckoned, it is STRONGLY RECOMMENDED to implement and report the corresponding Sensor types and/or Vehicle Property IDs used.\n\n[7.3/A-0-2] The Location requested via LocationManager#requestLocationUpdates() MUST NOT be map matched.\n\nIf Automotive device implementations include a 3-axis accelerometer, they:\n\n[7.3.1/A-1-1] MUST be able to report events up to a frequency of at least 100 Hz.\n\n[7.3.1/A-1-2] MUST comply with the Android car sensor coordinate system.\n\nIf Automotive device implementations include a 3-axis gyroscope, they:\n\n[7.3.4/A-2-1] MUST be able to report events up to a frequency of at least 100 Hz.\n\n[7.3.4/A-2-2] MUST also implement the TYPE_GYROSCOPE_UNCALIBRATED sensor.\n\n[7.3.4/A-2-3] MUST be capable of measuring orientation changes up to 250 degrees per second.\n\n[7.3.4/A-SR] Are STRONGLY RECOMMENDED to configure the gyroscope’s measurement range to +/-250dps in order to maximize the resolution possible\n\nIf Automotive device implementations include a GPS/GNSS receiver, but do not include cellular network-based data connectivity, they:\n\n[7.3.3/A-3-1] MUST determine location the very first time the GPS/GNSS receiver is turned on or after 4+ days within 60 seconds.\n\n[7.3.3/A-3-2] MUST meet the time-to-first-fix criteria as described in 7.3.3/C-1-2 and 7.3.3/C-1-6 for all other location requests (i.e requests which are not the first time ever or after 4+ days). The requirement 7.3.3/C-1-2 is typically met in vehicles without cellular network-based data connectivity, by using GNSS orbit predictions calculated on the receiver, or using the last known vehicle location along with the ability to dead reckon for at least 60 seconds with a position accuracy satisfying 7.3.3/C-1-3, or a combination of both.\n\nAutomotive device implementations:\n\n[7.4.3/A-0-1] MUST support Bluetooth and SHOULD support Bluetooth LE.\n\n[7.4.3/A-0-2] Android Automotive implementations MUST support the following Bluetooth profiles:\n\nPhone calling over Hands-Free Profile (HFP).\n\nMedia playback over Audio Distribution Profile (A2DP).\n\nMedia playback control over Remote Control Profile (AVRCP).\n\nContact sharing using the Phone Book Access Profile (PBAP).\n\n[7.4.3/A-SR] Are STRONGLY RECOMMENDED to support Message Access Profile (MAP).\n\n[7.4.5/A] SHOULD include support for cellular network-based data connectivity.\n\n[7.4.5/A] MAY use the System API NetworkCapabilities#NET_CAPABILITY_OEM_PAID constant for networks that should be available to system apps.\n\nAn exterior view camera is a camera that images scenes outside of the device implementation, like a dashcam.\n\nAutomotive device implementations:\n\nSHOULD include one or more exterior view cameras.\n\nIf Automotive device implementations include an exterior view camera, for such a camera, they:\n\n[7.5/A-1-1] MUST NOT have exterior view cameras accessible via the Android Camera APIs, unless they comply with camera core requirements.\n\n[7.5/A-SR] Are STRONGLY RECOMMENDED not to rotate or horizontally mirror the camera preview.\n\n[7.5.5/A-SR] Are STRONGLY RECOMMENDED to be oriented so that the long dimension of the camera aligns with the horizon.\n\n[7.5/A-SR] Are STRONGLY RECOMMENDED to have a resolution of at least 1.3 megapixels.\n\nSHOULD have either fixed-focus or EDOF (extended depth of field) hardware.\n\nSHOULD support Android synchronization framework.\n\nMAY have either hardware auto-focus or software auto-focus implemented in the camera driver.\n\nAutomotive device implementations:\n\n[7.6.1/A-0-1] MUST have at least 4 GB of non-volatile storage available for application private data (a.k.a. \"/data\" partition).\n\n[7.6.1/A] SHOULD format the data partition to offer improved performance and longevity on flash storage, for example using f2fs file-system.\n\nIf Automotive device implementations provide shared external storage via a portion of the internal non-removable storage, they:\n\n[7.6.1/A-SR] Are STRONGLY RECOMMENDED to reduce I/O overhead on operations performed on the external storage, for example by using SDCardFS.\n\nIf Automotive device implementations are 32-bit:\n\n[7.6.1/A-1-1] The memory available to the kernel and userspace MUST be at least 512MB if any of the following densities are used:\n\n280dpi or lower on small/normal screens\n\nldpi or lower on extra large screens\n\nmdpi or lower on large screens\n\n[7.6.1/A-1-2] The memory available to the kernel and userspace MUST be at least 608MB if any of the following densities are used:\n\nxhdpi or higher on small/normal screens\n\nhdpi or higher on large screens\n\nmdpi or higher on extra large screens\n\n[7.6.1/A-1-3] The memory available to the kernel and userspace MUST be at least 896MB if any of the following densities are used:\n\n400dpi or higher on small/normal screens\n\nxhdpi or higher on large screens\n\ntvdpi or higher on extra large screens\n\n[7.6.1/A-1-4] The memory available to the kernel and userspace MUST be at least 1344MB if any of the following densities are used:\n\n560dpi or higher on small/normal screens\n\n400dpi or higher on large screens\n\nxhdpi or higher on extra large screens\n\nIf Automotive device implementations are 64-bit:\n\n[7.6.1/A-2-1] The memory available to the kernel and userspace MUST be at least 816MB if any of the following densities are used:\n\n280dpi or lower on small/normal screens\n\nldpi or lower on extra large screens\n\nmdpi or lower on large screens\n\n[7.6.1/A-2-2] The memory available to the kernel and userspace MUST be at least 944MB if any of the following densities are used:\n\nxhdpi or higher on small/normal screens\n\nhdpi or higher on large screens\n\nmdpi or higher on extra large screens\n\n[7.6.1/A-2-3] The memory available to the kernel and userspace MUST be at least 1280MB if any of the following densities are used:\n\n400dpi or higher on small/normal screens\n\nxhdpi or higher on large screens\n\ntvdpi or higher on extra large screens\n\n[7.6.1/A-2-4] The memory available to the kernel and userspace MUST be at least 1824MB if any of the following densities are used:\n\n560dpi or higher on small/normal screens\n\n400dpi or higher on large screens\n\nxhdpi or higher on extra large screens\n\nNote that the \"memory available to the kernel and userspace\" above refers to the memory space provided in addition to any memory already dedicated to hardware components such as radio, video, and so on that are not under the kernel’s control on device implementations.\n\nAutomotive device implementations:\n\n[7.7.1/A] SHOULD include a USB port supporting peripheral mode.\n\nAutomotive device implementations:\n\n[7.8.1/A-0-1] MUST include a microphone.\n\nAutomotive device implementations:\n\n[7.8.2/A-0-1] MUST have an audio output and declare android.hardware.audio.output.\n\n2.5.2. Multimedia\n\nAutomotive device implementations MUST support the following audio encoding and decoding formats and make them available to third-party applications:\n\n[5.1/A-0-1] MPEG-4 AAC Profile (AAC LC)\n\n[5.1/A-0-2] MPEG-4 HE AAC Profile (AAC+)\n\n[5.1/A-0-3] AAC ELD (enhanced low delay AAC)\n\nAutomotive device implementations MUST support the following video encoding formats and make them available to third-party applications:\n\n[5.2/A-0-1] H.264 AVC\n\n[5.2/A-0-2] VP8\n\nAutomotive device implementations MUST support the following video decoding formats and make them available to third-party applications:\n\n[5.3/A-0-1] H.264 AVC\n\n[5.3/A-0-2] MPEG-4 SP\n\n[5.3/A-0-3] VP8\n\n[5.3/A-0-4] VP9\n\nAutomotive device implementations are STRONGLY RECOMMENDED to support the following video decoding:\n\n[5.3/A-SR] H.265 HEVC\n\n2.5.3. Software\n\nAutomotive device implementations:\n\n[3/A-0-1] MUST declare the feature android.hardware.type.automotive.\n\n[3/A-0-2] MUST support uiMode = UI_MODE_TYPE_CAR.\n\n[3/A-0-3] MUST support all public APIs in the android.car.* namespace.\n\nIf Automotive device implementations provide a proprietary API using android.car.CarPropertyManager with android.car.VehiclePropertyIds, they:\n\n[3/A-1-1] MUST NOT attach special privileges to system application's use of these properties, or prevent third-party applications from using these properties.\n\n[3/A-1-2] MUST NOT replicate a vehicle property that already exists in the SDK.\n\nAutomotive device implementations:\n\n[3.2.1/A-0-1] MUST support and enforce all permissions constants as documented by the Automotive Permission reference page.\n\n[3.2.3.1/A-0-1] MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here.\n\n[3.4.1/A-0-1] MUST provide a complete implementation of the android.webkit.Webview API.\n\n[3.8.3/A-0-1] MUST display notifications that use the Notification.CarExtender API when requested by third-party applications.\n\n[3.8.4/A-SR] Are Strongly Recommended to implement an assistant on the device to handle the Assist action.\n\nIf Automotive device implementations include a push-to-talk button, they:\n\n[3.8.4/A-1-1] MUST use a short press of the push-to-talk button as the designated interaction to launch the user-selected assist app, in other words the app that implements VoiceInteractionService.\n\nAutomotive device implementations:\n\n[3.8.3.1/A-0-1] MUST correctly render resources as described in the Notifications on Automotive OS SDK documentation.\n\n[3.8.3.1/A-0-2] MUST display PLAY and MUTE for notification actions in the place of those provided through Notification.Builder.addAction()\n\n[3.8.3.1/A] SHOULD restrict the use of rich management tasks such as per-notification-channel controls. MAY use UI affordance per application to reduce controls.\n\nAutomotive device implementations:\n\n[3.14/A-0-1] MUST include a UI framework to support third-party apps using the media APIs as described in section 3.14.\n\n[3.14/A-0-2] MUST allow the user to safely interact with Media Applications while driving.\n\n[3.14/A-0-3] MUST support the CAR_INTENT_ACTION_MEDIA_TEMPLATE implicit Intent action with the CAR_EXTRA_MEDIA_PACKAGE extra.\n\n[3.14/A-0-4] MUST provide an affordance to navigate into a Media Application’s preference activity, but MUST only enable it when Car UX Restrictions are not in effect.\n\n[3.14/A-0-5] MUST display error messages set by Media Applications, and MUST support the optional extras ERROR_RESOLUTION_ACTION_LABEL and ERROR_RESOLUTION_ACTION_INTENT.\n\n[3.14/A-0-6] MUST support an in-app search affordance for apps that support searching.\n\n[3.14/A-0-7] MUST respect CONTENT_STYLE_BROWSABLE_HINT and CONTENT_STYLE_PLAYABLE_HINT definitions when displaying the MediaBrowser hierarchy.\n\nIf Automotive device implementations include a default launcher app, they:\n\n[3.14/A-1-1] MUST include media services and open them with the CAR_INTENT_ACTION_MEDIA_TEMPLATE intent.\n\nAutomotive device implementations:\n\n[3.8/A] MAY restrict the application requests to enter a full screen mode as described in immersive documentation.\n\n[3.8/A] MAY keep the status bar and the navigation bar visible at all times.\n\n[3.8/A] MAY restrict the application requests to change the colors behind the system UI elements, to ensure those elements are clearly visible at all times.\n\n2.5.4. Performance and Power\n\nAutomotive device implementations:\n\n[8.2/A-0-1] MUST report the number of bytes read and written to non-volatile storage per each process's UID so the stats are available to developers through System API android.car.storagemonitoring.CarStorageMonitoringManager. The Android Open Source Project meets the requirement through the uid_sys_stats kernel module.\n\n[8.3/A-1-3] MUST support Garage Mode.\n\n[8.3/A] SHOULD be in Garage Mode for at least 15 minutes after every drive unless:\n\nThe battery is drained.\n\nNo idle jobs are scheduled.\n\nThe driver exits Garage Mode.\n\n[8.4/A-0-1] MUST provide a per-component power profile that defines the current consumption value for each hardware component and the approximate battery drain caused by the components over time as documented in the Android Open Source Project site.\n\n[8.4/A-0-2] MUST report all power consumption values in milliampere hours (mAh).\n\n[8.4/A-0-3] MUST report CPU power consumption per each process's UID. The Android Open Source Project meets the requirement through the uid_cputime kernel module implementation.\n\n[8.4/A] SHOULD be attributed to the hardware component itself if unable to attribute hardware component power usage to an application.\n\n[8.4/A-0-4] MUST make this power usage available via the adb shell dumpsys batterystats shell command to the app developer.\n\n2.5.5. Security Model\n\nIf Automotive device implementations support multiple users, they:\n\n[9.5/A-1-1] MUST NOT allow users to interact with nor switch into the Headless System User, except for device provisioning.\n\n[9.5/A-1-2] MUST switch into a Secondary User before BOOT_COMPLETED.\n\n[9.5/A-1-3] MUST support the ability to create a Guest User even when the maximum number of Users on a device has been reached.\n\nAutomotive device implementations:\n\n[9.11/A-0-1] MUST back up the keystore implementation with an isolated execution environment.\n\n[9.11/A-0-2] MUST have implementations of RSA, AES, ECDSA and HMAC cryptographic algorithms and MD5, SHA1, and SHA-2 family hash functions to properly support the Android Keystore system's supported algorithms in an area that is securely isolated from the code running on the kernel and above. Secure isolation MUST block all potential mechanisms by which kernel or userspace code might access the internal state of the isolated environment, including DMA. The upstream Android Open Source Project (AOSP) meets this requirement by using the Trusty implementation, but another ARM TrustZone-based solution or a third-party reviewed secure implementation of a proper hypervisor-based isolation are alternative options.\n\n[9.11/A-0-3] MUST perform the lock screen authentication in the isolated execution environment and only when successful, allow the authentication-bound keys to be used. Lock screen credentials MUST be stored in a way that allows only the isolated execution environment to perform lock screen authentication. The upstream Android Open Source Project provides the Gatekeeper Hardware Abstraction Layer (HAL) and Trusty, which can be used to satisfy this requirement.\n\n[9.11/A-0-4] MUST support key attestation where the attestation signing key is protected by secure hardware and signing is performed in secure hardware. The attestation signing keys MUST be shared across large enough number of devices to prevent the keys from being used as device identifiers. One way of meeting this requirement is to share the same attestation key unless at least 100,000 units of a given SKU are produced. If more than 100,000 units of an SKU are produced, a different key MAY be used for each 100,000 units.\n\nNote that if a device implementation is already launched on an earlier Android version, such a device is exempted from the requirement to have a keystore backed by an isolated execution environment and support the key attestation, unless it declares the android.hardware.fingerprint feature which requires a keystore backed by an isolated execution environment.\n\nAutomotive device implementations:\n\n[9.14/A-0-1] MUST gatekeep messages from Android framework vehicle subsystems, e.g., adding permitted message types and message sources to an allowlist.\n\n[9.14/A-0-2] MUST watchdog against denial of service attacks from the Android framework or third-party apps. This guards against malicious software flooding the vehicle network with traffic, which may lead to malfunctioning vehicle subsystems.\n\nAutomotive device implementations:\n\nPerfetto\n\n[6.1/A-0-1] MUST expose a /system/bin/perfetto binary to the shell user which cmdline complies with the perfetto documentation.\n\n[6.1/A-0-2] The perfetto binary MUST accept as input a protobuf config that complies with the schema defined in the perfetto documentation.\n\n[6.1/A-0-3] The perfetto binary MUST write as output a protobuf trace that complies with the schema defined in the perfetto documentation.\n\n[6.1/A-0-4] MUST provide, through the perfetto binary, at least the data sources described in the perfetto documentation.\n\n2.6. Tablet Requirements\n\nAn Android Tablet device refers to an Android device implementation that typically meets all the following criteria:\n\nUsed by holding in both hands.\n\nDoes not have a clamshell or convertible configuration.\n\nPhysical keyboard implementations used with the device connect by means of a standard connection (e.g. USB, Bluetooth).\n\nHas a power source that provides mobility, such as a battery.\n\nHas a physical diagonal screen size in the range of 7 to 18 inches.\n\nTablet device implementations have similar requirements to handheld device implementations. The exceptions are indicated by an * in that section and noted for reference in this section.\n\n2.6.1. Hardware\n\nScreen Size\n\n[7.1.1.1/Tab-0-1] MUST have a screen in the range of 7 to 18 inches.\n\nGyroscope\n\nIf Tablet device implementations include a 3-axis gyroscope, they:\n\n[7.3.4/Tab-1-1] MUST be capable of measuring orientation changes up to 1000 degrees per second.\n\nMinimum Memory and Storage (Section 7.6.1)\n\nThe screen densities listed for small/normal screens in the handheld requirements are not applicable to tablets.\n\nUSB peripheral mode (Section 7.7.1)\n\nIf tablet device implementations include a USB port supporting peripheral mode, they:\n\n[7.7.1/Tab] MAY implement the Android Open Accessory (AOA) API.\n\nVirtual Reality Mode (Section 7.9.1)\n\nVirtual Reality High Performance (Section 7.9.2)\n\nVirtual reality requirements are not applicable to tablets.\n\n2.6.2. Security Model\n\nKeys and Credentials (Section 9.11)\n\nRefer to Section [9.11].\n\nIf Tablet device implementations include multiple users and do not declare the android.hardware.telephony feature flag, they:\n\n[9.5/T-1-1] MUST support restricted profiles, a feature that allows device owners to manage additional users and their capabilities on the device. With restricted profiles, device owners can quickly set up separate environments for additional users to work in, with the ability to manage finer-grained restrictions in the apps that are available in those environments.\n\nIf Tablet device implementations include multiple users and declare the android.hardware.telephony feature flag, they:\n\n[9.5/T-2-1] MUST NOT support restricted profiles but MUST align with the AOSP implementation of controls to enable /disable other users from accessing the voice calls and SMS.\n\n2.6.2. Software\n\n[3.2.3.1/Tab-0-1] MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here.\n\n3. Software\n\n3.1. Managed API Compatibility\n\nThe managed Dalvik bytecode execution environment is the primary vehicle for Android applications. The Android application programming interface (API) is the set of Android platform interfaces exposed to applications running in the managed runtime environment.\n\nDevice implementations:\n\n[C-0-1] MUST provide complete implementations, including all documented behaviors, of any documented API exposed by the Android SDK or any API decorated with the “@SystemApi” marker in the upstream Android source code.\n\n[C-0-2] MUST support/preserve all classes, methods, and associated elements marked by the TestApi annotation (@TestApi).\n\n[C-0-3] MUST NOT omit any managed APIs, alter API interfaces or signatures, deviate from the documented behavior, or include no-ops, except where specifically allowed by this Compatibility Definition.\n\n[C-0-4] MUST still keep the APIs present and behave in a reasonable way, even when some hardware features for which Android includes APIs are omitted. See section 7 for specific requirements for this scenario.\n\n[C-0-5] MUST NOT allow third-party apps to use non-SDK interfaces, which are defined as methods and fields in the Java language packages that are in the boot classpath in AOSP, and that do not form part of the public SDK. This includes APIs decorated with the @hide annotation but not with a @SystemAPI, as described in the SDK documents and private and package-private class members.\n\n[C-0-6] MUST ship with each and every non-SDK interface on the same restricted lists as provided via the provisional and denylist flags in prebuilts/runtime/appcompat/hiddenapi-flags.csv path for the appropriate API level branch in the AOSP.\n\n[C-0-7] MUST support the signed config dynamic update mechanism to remove non-SDK interfaces from a restricted list by embedding signed configuration in any APK, using the existing public keys present in AOSP.\n\nHowever they:\n\nMAY, if a hidden API is absent or implemented differently on the device implementation, move the hidden API into the denylist or omit it from all restricted lists (i.e. light-grey, dark-grey, black).\n\nMAY, if a hidden API does not already exist in the AOSP, add the hidden API to any of the restricted lists (i.e. light-grey, dark-grey, black).\n\n3.1.1. Android Extensions\n\nAndroid supports extending the managed API surface of a particular API level by updating the extension version for that API level. The android.os.ext.SdkExtensions.getExtensionVersion(int apiLevel) API returns the extension version of the provided apiLevel, if there are extensions for that API level.\n\nAndroid device implementations:\n\n[C-0-1] MUST preload the AOSP implementation of both the shared library ExtShared and services ExtServices with versions greater than or equal to the minimum versions allowed per each API level. For example, Android 7.0 device implementations, running API level 24 MUST include at least version 1.\n\n[C-0-2] MUST only return valid extension version number that have been defined by the AOSP.\n\n[C-0-3] MUST support all the APIs defined by the extension versions returned by android.os.ext.SdkExtensions.getExtensionVersion(int apiLevel) in the same manner as other managed APIs are supported, following the requirements in section 3.1.\n\n3.1.2. Android Library\n\nDue to Apache HTTP client deprecation, device implementations:\n\n[C-0-1] MUST NOT place the org.apache.http.legacy library in the bootclasspath.\n\n[C-0-2] MUST add the org.apache.http.legacy library to the application classpath only when the app satisfies one of the following conditions:\n\nTargets API level 28 or lower.\n\nDeclares in its manifest that it needs the library by setting the android:name attribute of <uses-library> to org.apache.http.legacy.\n\nThe AOSP implementation meets these requirements.\n\n3.2. Soft API Compatibility\n\nIn addition to the managed APIs from section 3.1, Android also includes a significant runtime-only “soft” API, in the form of such things as intents, permissions, and similar aspects of Android applications that cannot be enforced at application compile time.\n\n3.2.1. Permissions\n\n[C-0-1] Device implementers MUST support and enforce all permission constants as documented by the Permission reference page. Note that section 9 lists additional requirements related to the Android security model.\n\n3.2.2. Build Parameters\n\nThe Android APIs include a number of constants on the android.os.Build class that are intended to describe the current device.\n\n[C-0-1] To provide consistent, meaningful values across device implementations, the table below includes additional restrictions on the formats of these values to which device implementations MUST conform.\n\nParameter Details VERSION.RELEASE The version of the currently-executing Android system, in human-readable format. This field MUST have one of the string values defined in 11. VERSION.SDK The version of the currently-executing Android system, in a format accessible to third-party application code. For Android 11, this field MUST have the integer value 11_INT. VERSION.SDK_INT The version of the currently-executing Android system, in a format accessible to third-party application code. For Android 11, this field MUST have the integer value 11_INT. VERSION.INCREMENTAL A value chosen by the device implementer designating the specific build of the currently-executing Android system, in human-readable format. This value MUST NOT be reused for different builds made available to end users. A typical use of this field is to indicate which build number or source-control change identifier was used to generate the build. The value of this field MUST be encodable as printable 7-bit ASCII and match the regular expression “^[^ :\\/~]+$”. BOARD A value chosen by the device implementer identifying the specific internal hardware used by the device, in human-readable format. A possible use of this field is to indicate the specific revision of the board powering the device. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9_-]+$”. BRAND A value reflecting the brand name associated with the device as known to the end users. MUST be in human-readable format and SHOULD represent the manufacturer of the device or the company brand under which the device is marketed. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9_-]+$”. SUPPORTED_ABIS The name of the instruction set (CPU type + ABI convention) of native code. See section 3.3. Native API Compatibility. SUPPORTED_32_BIT_ABIS The name of the instruction set (CPU type + ABI convention) of native code. See section 3.3. Native API Compatibility. SUPPORTED_64_BIT_ABIS The name of the second instruction set (CPU type + ABI convention) of native code. See section 3.3. Native API Compatibility. CPU_ABI The name of the instruction set (CPU type + ABI convention) of native code. See section 3.3. Native API Compatibility. CPU_ABI2 The name of the second instruction set (CPU type + ABI convention) of native code. See section 3.3. Native API Compatibility. DEVICE A value chosen by the device implementer containing the development name or code name identifying the configuration of the hardware features and industrial design of the device. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9_-]+$”. This device name MUST NOT change during the lifetime of the product. FINGERPRINT A string that uniquely identifies this build. It SHOULD be reasonably human-readable. It MUST follow this template:\n\n$(BRAND)/$(PRODUCT)/\n\n$(DEVICE):$(VERSION.RELEASE)/$(ID)/$(VERSION.INCREMENTAL):$(TYPE)/$(TAGS)\n\nFor example:\n\nacme/myproduct/\n\nmydevice:11/LMYXX/3359:userdebug/test-keys\n\nThe fingerprint MUST NOT include whitespace characters. The value of this field MUST be encodable as 7-bit ASCII.\n\nHARDWARE The name of the hardware (from the kernel command line or /proc). It SHOULD be reasonably human-readable. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9_-]+$”. HOST A string that uniquely identifies the host the build was built on, in human-readable format. There are no requirements on the specific format of this field, except that it MUST NOT be null or the empty string (\"\"). ID An identifier chosen by the device implementer to refer to a specific release, in human-readable format. This field can be the same as android.os.Build.VERSION.INCREMENTAL, but SHOULD be a value sufficiently meaningful for end users to distinguish between software builds. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9._-]+$”. MANUFACTURER The trade name of the Original Equipment Manufacturer (OEM) of the product. There are no requirements on the specific format of this field, except that it MUST NOT be null or the empty string (\"\"). This field MUST NOT change during the lifetime of the product. MODEL A value chosen by the device implementer containing the name of the device as known to the end user. This SHOULD be the same name under which the device is marketed and sold to end users. There are no requirements on the specific format of this field, except that it MUST NOT be null or the empty string (\"\"). This field MUST NOT change during the lifetime of the product. PRODUCT A value chosen by the device implementer containing the development name or code name of the specific product (SKU) that MUST be unique within the same brand. MUST be human-readable, but is not necessarily intended for view by end users. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9_-]+$”. This product name MUST NOT change during the lifetime of the product. SERIAL MUST return \"UNKNOWN\". TAGS A comma-separated list of tags chosen by the device implementer that further distinguishes the build. The tags MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9._-]+” and MUST have one of the values corresponding to the three typical Android platform signing configurations: release-keys, dev-keys, and test-keys. TIME A value representing the timestamp of when the build occurred. TYPE A value chosen by the device implementer specifying the runtime configuration of the build. This field MUST have one of the values corresponding to the three typical Android runtime configurations: user, userdebug, or eng. USER A name or user ID of the user (or automated user) that generated the build. There are no requirements on the specific format of this field, except that it MUST NOT be null or the empty string (\"\"). VERSION.SECURITY_PATCH A value indicating the security patch level of a build. It MUST signify that the build is not in any way vulnerable to any of the issues described up through the designated Android Public Security Bulletin. It MUST be in the format [YYYY-MM-DD], matching a defined string documented in the Android Public Security Bulletin or in the Android Security Advisory, for example \"2015-11-01\". VERSION.BASE_OS A value representing the FINGERPRINT parameter of the build that is otherwise identical to this build except for the patches provided in the Android Public Security Bulletin. It MUST report the correct value and if such a build does not exist, report an empty string (\"\"). BOOTLOADER A value chosen by the device implementer identifying the specific internal bootloader version used in the device, in human-readable format. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9._-]+$”. getRadioVersion() MUST (be or return) a value chosen by the device implementer identifying the specific internal radio/modem version used in the device, in human-readable format. If a device does not have any internal radio/modem it MUST return NULL. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9._-,]+$”. getSerial() MUST (be or return) a hardware serial number, which MUST be available and unique across devices with the same MODEL and MANUFACTURER. The value of this field MUST be encodable as 7-bit ASCII and match the regular expression “^[a-zA-Z0-9._-,]+$”.\n\n3.2.3. Intent Compatibility\n\n3.2.3.1. Common Application Intents\n\nAndroid intents allow application components to request functionality from other Android components. The Android upstream project includes a list of applications which implement several intent patterns to perform common actions.\n\nDevice implementations:\n\n[C-SR] Are STRONGLY RECOMMENDED to preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here and provide fulfillment i.e meet with the developer expectation for these common application intents as described in the SDK.\n\nPlease refer to Section 2 for mandatory application intents for each device type.\n\n3.2.3.2. Intent Resolution\n\n[C-0-1] As Android is an extensible platform, device implementations MUST allow each intent pattern referenced in section 3.2.3.1 , except for Settings, to be overridden by third-party applications. The upstream Android open source implementation allows this by default.\n\n[C-0-2] Device implementers MUST NOT attach special privileges to system applications' use of these intent patterns, or prevent third-party applications from binding to and assuming control of these patterns. This prohibition specifically includes but is not limited to disabling the “Chooser” user interface that allows the user to select between multiple applications that all handle the same intent pattern.\n\n[C-0-3] Device implementations MUST provide a user interface for users to modify the default activity for intents.\n\nHowever, device implementations MAY provide default activities for specific URI patterns (e.g. http://play.google.com) when the default activity provides a more specific attribute for the data URI. For example, an intent filter pattern specifying the data URI “http://www.android.com” is more specific than the browser's core intent pattern for “http://”.\n\nAndroid also includes a mechanism for third-party apps to declare an authoritative default app linking behavior for certain types of web URI intents. When such authoritative declarations are defined in an app's intent filter patterns, device implementations:\n\n[C-0-4] MUST attempt to validate any intent filters by performing the validation steps defined in the Digital Asset Links specification as implemented by the Package Manager in the upstream Android Open Source Project.\n\n[C-0-5] MUST attempt validation of the intent filters during the installation of the application and set all successfully validated URI intent filters as default app handlers for their URIs.\n\nMAY set specific URI intent filters as default app handlers for their URIs, if they are successfully verified but other candidate URI filters fail verification. If a device implementation does this, it MUST provide the user appropriate per-URI pattern overrides in the settings menu.\n\nMUST provide the user with per-app App Links controls in Settings as follows:\n\n[C-0-6] The user MUST be able to override holistically the default app links behavior for an app to be: always open, always ask, or never open, which must apply to all candidate URI intent filters equally.\n\n[C-0-7] The user MUST be able to see a list of the candidate URI intent filters.\n\nThe device implementation MAY provide the user with the ability to override specific candidate URI intent filters that were successfully verified, on a per-intent filter basis.\n\n[C-0-8] The device implementation MUST provide users with the ability to view and override specific candidate URI intent filters if the device implementation lets some candidate URI intent filters succeed verification while some others can fail.\n\n3.2.3.3. Intent Namespaces\n\n[C-0-1] Device implementations MUST NOT include any Android component that honors any new intent or broadcast intent patterns using an ACTION, CATEGORY, or other key string in the android. or com.android. namespace.\n\n[C-0-2] Device implementers MUST NOT include any Android components that honor any new intent or broadcast intent patterns using an ACTION, CATEGORY, or other key string in a package space belonging to another organization.\n\n[C-0-3] Device implementers MUST NOT alter or extend any of the intent patterns listed in section 3.2.3.1.\n\nDevice implementations MAY include intent patterns using namespaces clearly and obviously associated with their own organization. This prohibition is analogous to that specified for Java language classes in section 3.6.\n\n3.2.3.4. Broadcast Intents\n\nThird-party applications rely on the platform to broadcast certain intents to notify them of changes in the hardware or software environment.\n\nDevice implementations:\n\n[C-0-1] MUST broadcast the public broadcast intents listed here in response to appropriate system events as described in the SDK documentation. Note that this requirement is not conflicting with section 3.5 as the limitation for background applications are also described in the SDK documentation. Also certain broadcast intents are conditional upon hardware support, if the device supports the necessary hardware they MUST broadcast the intents and provide the behavior inline with SDK documentation.\n\n3.2.3.5. Conditional Application Intents\n\nAndroid includes settings that provide users an easy way to select their default applications, for example for Home screen or SMS.\n\nWhere it makes sense, device implementations MUST provide a similar settings menu and be compatible with the intent filter pattern and API methods described in the SDK documentation as below.\n\nIf device implementations report android.software.home_screen, they:\n\n[C-1-1] MUST honor the android.settings.HOME_SETTINGS intent to show a default app settings menu for Home Screen.\n\nIf device implementations report android.hardware.telephony, they:\n\n[C-2-1] MUST provide a settings menu that will call the android.provider.Telephony.ACTION_CHANGE_DEFAULT intent to show a dialog to change the default SMS application.\n\n[C-2-2] MUST honor the android.telecom.action.CHANGE_DEFAULT_DIALER intent to show a dialog to allow the user to change the default Phone application.\n\nMUST use the user-selected default Phone app's UI for incoming and outgoing calls except for emergency calls, which would use the preinstalled Phone app.\n\n[C-2-3] MUST honor the android.telecom.action.CHANGE_PHONE_ACCOUNTS intent to provide user affordance to configure the ConnectionServices associated with the PhoneAccounts, as well as a default PhoneAccount that the telecommunications service provider will use to place outgoing calls. The AOSP implementation meets this requirement by including a \"Calling Accounts option\" menu within the \"Calls\" settings menu.\n\n[C-2-4] MUST allow android.telecom.CallRedirectionService for an app that holds the android.app.role.CALL_REDIRECTION role.\n\n[C-2-5] MUST provide the user affordance to choose an app that holds the android.app.role.CALL_REDIRECTION role.\n\n[C-2-6] MUST honor the android.intent.action.SENDTO and android.intent.action.VIEW intents and provide an activity to send/display SMS messages.\n\n[C-SR] Are Strongly Recommended to honor android.intent.action.ANSWER, android.intent.action.CALL, android.intent.action.CALL_BUTTON, android.intent.action.VIEW & android.intent.action.DIAL intents with a preloaded dialer application which can handle these intents and provide fulfillment as described in the SDK.\n\nIf device implementations report android.hardware.nfc.hce, they:\n\n[C-3-1] MUST honor the android.settings.NFC_PAYMENT_SETTINGS intent to show a default app settings menu for Contactless payment.\n\n[C-3-2] MUST honor android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT intent to show an activity which opens a dialog to ask the user to change the default card emulation service for a certain category as described in the SDK.\n\nIf device implementations report android.hardware.nfc, they:\n\n[C-4-1] MUST honor these intents android.nfc.action.NDEF_DISCOVERED, android.nfc.action.TAG_DISCOVERED & android.nfc.action.TECH_DISCOVERED, to show an activity which fulfils developer expectations for these intents as described in the SDK.\n\nIf device implementations support the VoiceInteractionService and have more than one application using this API installed at a time, they:\n\n[C-4-1] MUST hon"
    }
}