{
    "id": "dbpedia_1396_3",
    "rank": 19,
    "data": {
        "url": "https://linked.art/model/object/physical/",
        "read_more_link": "",
        "language": "en",
        "title": "Objects: Physical Characteristics",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://linked.art/media/logo/Linked_Art_logo.png",
            "https://www.netlify.com/img/global/badges/netlify-light.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Introduction\n\nThere are several important physical features of artworks that it is important to capture, including the size, shapes, colors, and the materials that it is made of. The model allows for both being explicit in the data for these, as well as simply including a textual description. The explicit form is preferred, however it is recognized that not all systems will be able to provide it.\n\nBeyond dimensions and materials, the model allows for the description of parts of objects, and parts of parts, using the base pattern. These parts can be thought of as objects in their own right, and thus have titles (\"Left Panel\" of a triptych), descriptions, rights, images, dimensions, materials, and so forth.\n\nDimensions\n\nThe physical dimensions of an object, such as height, width, diameter or weight, are included in the dimension property, and consist of three primary pieces of information:\n\nThe numeric value in value.\n\nThe type of dimension (e.g. height vs width) in classified_as, referencing an external vocabulary of dimension types.\n\nThe unit used to align the value with the real world such as inches, pounds or seconds. The unit should also be given from a controlled vocabulary.\n\nExample:\n\nThe Night Watch is 379.5 cm high, by 453.5 cm wide.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/6\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"dimension\": [ { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055647\", \"type\": \"Type\", \"_label\": \"Width\" } ], \"value\": 453.5, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" } }, { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055644\", \"type\": \"Type\", \"_label\": \"Height\" } ], \"value\": 379.5, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" } } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/6) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 dims; O4-- type -->O4_0[Dimension] class O4_0 classstyle; O5(aat:300055647) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Width''\") class O5_3 literal; O4-- classified_as -->O5 O4-- value -->O4_3(453.5) class O4_3 literal; O6(aat:300379098) class O6 type; O6-- type -->O6_0[MeasurementUnit] class O6_0 classstyle; O6-- _label -->O6_3(\"''centimeters''\") class O6_3 literal; O4-- unit -->O6 O1-- dimension -->O4 O7( _ ) class O7 dims; O7-- type -->O7_0[Dimension] class O7_0 classstyle; O8(aat:300055644) class O8 type; O8-- type -->O8_0[Type] class O8_0 classstyle; O8-- _label -->O8_3(\"''Height''\") class O8_3 literal; O7-- classified_as -->O8 O7-- value -->O7_3(379.5) class O7_3 literal; O7-- unit -->O6 O1-- dimension -->O7\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nDimension Statement\n\nIf the dimension text is not recorded in a way that is condusive to generating the full set, then it can be given as a LinguisticObject, classifed as dimensions by reference to aat:300435430, and the text provided in content. This is an example of the Statements base pattern.\n\nExample:\n\nThe dimensions, including weight, of the Night Watch, described in a human-readable text.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/7\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"referred_to_by\": [ { \"type\": \"LinguisticObject\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435430\", \"type\": \"Type\", \"_label\": \"Dimension Statement\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300418049\", \"type\": \"Type\", \"_label\": \"Brief Text\" } ] } ], \"content\": \"height 379.5 cm × width 453.5 cm × weight 337 kg\" } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/7) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 infoobj; O4-- type -->O4_0[LinguisticObject] class O4_0 classstyle; O5(aat:300435430) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Dimension Statement''\") class O5_3 literal; O6(aat:300418049) class O6 type; O6-- type -->O6_0[Type] class O6_0 classstyle; O6-- _label -->O6_3(\"''Brief Text''\") class O6_3 literal; O5-- classified_as -->O6 O4-- classified_as -->O5 O4-- content -->O4_3(\"''height 379.5 cm × width 453.5 cm × weight 337 kg''\") class O4_3 literal; O1-- referred_to_by -->O4\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nDimension Display Labels\n\nAnother method is to have the dimensions in the data include a human readable label for the value that the dimension is representing. This allows clients to present the data in a particular style, rather than having to generate the text from the dimension value, unit and type.\n\nThis same approach can be used on many data structures and is merely being called out here to compare with the machine oriented view of just the data structure, and the human oriented view of just the full description as a statement.\n\nExample:\n\nThe Night Watch once more, described with human readable labels on each dimension.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/8\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"dimension\": [ { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055647\", \"type\": \"Type\", \"_label\": \"Width\" } ], \"value\": 453.5, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" }, \"identified_by\": [ { \"type\": \"Name\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300404669\", \"type\": \"Type\", \"_label\": \"Display Title\" } ], \"content\": \"453.5 cm wide\" } ] }, { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055644\", \"type\": \"Type\", \"_label\": \"Height\" } ], \"value\": 379.5, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" }, \"identified_by\": [ { \"type\": \"Name\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300404669\", \"type\": \"Type\", \"_label\": \"Display Title\" } ], \"content\": \"379.5 cm high\" } ] } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/8) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 dims; O4-- type -->O4_0[Dimension] class O4_0 classstyle; O5(aat:300055647) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Width''\") class O5_3 literal; O4-- classified_as -->O5 O4-- value -->O4_3(453.5) class O4_3 literal; O6(aat:300379098) class O6 type; O6-- type -->O6_0[MeasurementUnit] class O6_0 classstyle; O6-- _label -->O6_3(\"''centimeters''\") class O6_3 literal; O4-- unit -->O6 O7( _ ) class O7 name; O7-- type -->O7_0[Name] class O7_0 classstyle; O8(aat:300404669) class O8 type; O8-- type -->O8_0[Type] class O8_0 classstyle; O8-- _label -->O8_3(\"''Display Title''\") class O8_3 literal; O7-- classified_as -->O8 O7-- content -->O7_3(\"''453.5 cm wide''\") class O7_3 literal; O4-- identified_by -->O7 O1-- dimension -->O4 O9( _ ) class O9 dims; O9-- type -->O9_0[Dimension] class O9_0 classstyle; O10(aat:300055644) class O10 type; O10-- type -->O10_0[Type] class O10_0 classstyle; O10-- _label -->O10_3(\"''Height''\") class O10_3 literal; O9-- classified_as -->O10 O9-- value -->O9_3(379.5) class O9_3 literal; O9-- unit -->O6 O11( _ ) class O11 name; O11-- type -->O11_0[Name] class O11_0 classstyle; O11-- classified_as -->O8 O11-- content -->O11_3(\"''379.5 cm high''\") class O11_3 literal; O9-- identified_by -->O11 O1-- dimension -->O9\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nMeasurements of Dimensions\n\nIn some contexts, it is also important to have more information about how the dimensions were measured. This could be useful, for example, to distinguish the time and method by which the measurement was taken, or to know who used which instrument in a conservation research setting to promote accuracy and reusability of results.\n\nIn order to build upon the dimension model described above, the model adds an AttributeAssignment activity to the Dimension which is the measuring activity, following the Assertion pattern. The Dimension is assigned_by the AttributeAssignment, to the object which has the dimension. In this particular case, as dimensions are specific to the object, and the dimension property is explicit in the model already, there is no need to link from the AttributeAssignment back to the object, or to give the property that is being assigned. It is permitted, but no new information is being added and hence it is not recommended.\n\nExample:\n\nThe measurement of the Night Watch was carried out by the \"Operation Night Watch\" team, during \"Operation Night Watch\"\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/9\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"dimension\": [ { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055644\", \"type\": \"Type\", \"_label\": \"Height\" } ], \"value\": 379.5, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" }, \"assigned_by\": [ { \"type\": \"AttributeAssignment\", \"_label\": \"Measurement of the Night Watch\", \"carried_out_by\": [ { \"id\": \"https://linked.art/example/group/nightwatchteam\", \"type\": \"Group\", \"_label\": \"Operation Night Watch Team\" } ], \"part_of\": [ { \"id\": \"https://linked.art/example/event/operationnightwatch\", \"type\": \"Activity\", \"_label\": \"Operation Night Watch\" } ] } ] } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/9) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 dims; O4-- type -->O4_0[Dimension] class O4_0 classstyle; O5(aat:300055644) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Height''\") class O5_3 literal; O4-- classified_as -->O5 O4-- value -->O4_3(379.5) class O4_3 literal; O6(aat:300379098) class O6 type; O6-- type -->O6_0[MeasurementUnit] class O6_0 classstyle; O6-- _label -->O6_3(\"''centimeters''\") class O6_3 literal; O4-- unit -->O6 O7( _ ) class O7 event; O7-- type -->O7_0[AttributeAssignment] class O7_0 classstyle; O7-- _label -->O7_2(\"''Measurement of the Night Watch''\") class O7_2 literal; O8(group/nightwatchteam) class O8 actor; O8-- type -->O8_0[Group] class O8_0 classstyle; O8-- _label -->O8_3(\"''Operation Night Watch Team''\") class O8_3 literal; O7-- carried_out_by -->O8 O9(event/operationnightwatch) class O9 event; O9-- type -->O9_0[Activity] class O9_0 classstyle; O9-- _label -->O9_3(\"''Operation Night Watch''\") class O9_3 literal; O7-- part_of -->O9 O4-- assigned_by -->O7 O1-- dimension -->O4\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nMeasurement of Object Features\n\nIt is common to measure parts of a particular object, such as the base of a statue or the image bearing part of a painting, or the object in a particular state, such as the height of the chest with the lid open rather than with the lid closed. If there is a record for the part, separate from the full object, then the dimension can be associated with that part of the object directly, but it is inconvenient to make separate records for all of the possible aspects that could be measured, and impossible to manage state in this way.\n\nIf there isn't a requirement to have multiple dimensions connected, and there isn't an interoperability or searchability requirement to be able to distinguish them computationally, then a display Name or a Statement is likely sufficient to explain to a human reader what was being measured.\n\nIf this is a requirement, then instead we add the technique property on the AttributeAssignment discussed in the previous section as a way to reference the method in which the measurement was taken. The technique would represent, for example, \"measuring the base\" or \"measuring while open\". The same technique would be added to each of the measurements for the particular feature -- the height, width, and depth of the statue's base would all have the \"measuring the base\" technique as a way to connect them together.\n\nMissing Vocabulary\n\nThese techniques are unlikely to exist in shared vocabularies, and implementers are thus very likely to have to create their own based on local practice.\n\nExample:\n\nSpring has \"Framed [Outer Dim]\" and \"Unframed\" dimensions. The \"Unframed\" height and width are 74 and 51.5cm.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/spring/29\", \"type\": \"HumanMadeObject\", \"_label\": \"Spring\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"dimension\": [ { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055644\", \"type\": \"Type\", \"_label\": \"Height\" } ], \"value\": 74, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" }, \"assigned_by\": [ { \"type\": \"AttributeAssignment\", \"_label\": \"Unframed Measuring\", \"technique\": [ { \"id\": \"https://linked.art/example/concept/measuring_unframed\", \"type\": \"Type\", \"_label\": \"Unframed Measuring\" } ] } ] }, { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300055647\", \"type\": \"Type\", \"_label\": \"Width\" } ], \"value\": 51.5, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300379098\", \"type\": \"MeasurementUnit\", \"_label\": \"centimeters\" }, \"assigned_by\": [ { \"type\": \"AttributeAssignment\", \"_label\": \"Unframed Measuring\", \"technique\": [ { \"id\": \"https://linked.art/example/concept/measuring_unframed\", \"type\": \"Type\", \"_label\": \"Unframed Measuring\" } ] } ] } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/spring/29) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Spring''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 dims; O4-- type -->O4_0[Dimension] class O4_0 classstyle; O5(aat:300055644) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Height''\") class O5_3 literal; O4-- classified_as -->O5 O4-- value -->O4_3(74) class O4_3 literal; O6(aat:300379098) class O6 type; O6-- type -->O6_0[MeasurementUnit] class O6_0 classstyle; O6-- _label -->O6_3(\"''centimeters''\") class O6_3 literal; O4-- unit -->O6 O7( _ ) class O7 event; O7-- type -->O7_0[AttributeAssignment] class O7_0 classstyle; O7-- _label -->O7_2(\"''Unframed Measuring''\") class O7_2 literal; O8(concept/measuring_unframed) class O8 type; O8-- type -->O8_0[Type] class O8_0 classstyle; O8-- _label -->O8_3(\"''Unframed Measuring''\") class O8_3 literal; O7-- technique -->O8 O4-- assigned_by -->O7 O1-- dimension -->O4 O9( _ ) class O9 dims; O9-- type -->O9_0[Dimension] class O9_0 classstyle; O10(aat:300055647) class O10 type; O10-- type -->O10_0[Type] class O10_0 classstyle; O10-- _label -->O10_3(\"''Width''\") class O10_3 literal; O9-- classified_as -->O10 O9-- value -->O9_3(51.5) class O9_3 literal; O9-- unit -->O6 O11( _ ) class O11 event; O11-- type -->O11_0[AttributeAssignment] class O11_0 classstyle; O11-- _label -->O11_2(\"''Unframed Measuring''\") class O11_2 literal; O11-- technique -->O8 O9-- assigned_by -->O11 O1-- dimension -->O9\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nColors\n\nThe main colors of an object can be determined and record in two very different ways - by capturing a very specific value for the wavelength of the light or composition of the color (in a Red/Green/Blue colorspace, for example), or categorizing the object into more broader, subjective color types (\"pale green\", \"ochre\"). The first approach might be done with instruments measuring the reflected light off the original, or via digital photography and computing the color from the resulting digital image. The second approach is likely carried out by a curator in describing the object in a collection management system, hopefully using a controlled set of terms. As it is desirable to have only a single place to look for information, the model for color tries to capture both of these possibilities at once in as simple a way as possible, allowing either or both to happen for any given color.\n\nMeasurements record a Dimension, and thus we create an instance of the class to record the color, even if the measurement is a categorization. The dimension has a value and unit, just like the more obvious physical dimensions described above. For an RGB colorspace, the value must be converted into an integer from the more traditional three-part hexadecimal value, as values are always decimalized. This allows the true value to be recorded. The dimension can also be classified_as a particular color family -- the object has a color which is a green color, for example. Either or both of these patterns can be used, and multiple dimensions using this pattern can be recorded without having to match up which categories map to which values. The traditional hex string for the color can be given as the content of an Identifier for the dimension.\n\nExample:\n\nThe Night Watch is primarily a brown color (B35A1F), which is categorized as being brown (aat:300127490)\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/10\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"dimension\": [ { \"type\": \"Dimension\", \"_label\": \"brown\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300080438\", \"type\": \"Type\", \"_label\": \"Color\" }, { \"id\": \"http://vocab.getty.edu/aat/300127490\", \"type\": \"Type\", \"_label\": \"Brown\" } ], \"value\": 11754015.0, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300266239\", \"type\": \"MeasurementUnit\", \"_label\": \"rgb\" }, \"identified_by\": [ { \"type\": \"Identifier\", \"content\": \"#B35A1F\" } ] } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/10) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 dims; O4-- type -->O4_0[Dimension] class O4_0 classstyle; O4-- _label -->O4_2(\"''brown''\") class O4_2 literal; O5(aat:300080438) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Color''\") class O5_3 literal; O4-- classified_as -->O5 O6(aat:300127490) class O6 type; O6-- type -->O6_0[Type] class O6_0 classstyle; O6-- _label -->O6_3(\"''Brown''\") class O6_3 literal; O4-- classified_as -->O6 O4-- value -->O4_4(11754015.0) class O4_4 literal; O7(aat:300266239) class O7 type; O7-- type -->O7_0[MeasurementUnit] class O7_0 classstyle; O7-- _label -->O7_3(\"''rgb''\") class O7_3 literal; O4-- unit -->O7 O8( _ ) class O8 name; O8-- type -->O8_0[Identifier] class O8_0 classstyle; O8-- content -->O8_2(\"''#B35A1F''\") class O8_2 literal; O4-- identified_by -->O8 O1-- dimension -->O4\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nShapes\n\nWhile some combinations of dimensions can give a sense of the shape of the object, it is also often useful to be more explicit. For example, a shield-shaped painting (perhaps due to being painted on an actual shield) would likely still only have height and width given. Without the additional information of the shape, it might be concluded that the painting is rectangular. Similarly, a circular object could be mistaken as a square, as the height and width would be the same in either case.\n\nShapes are given as classifications on the object via the classified_as property. The classification is then further classified as being a shape, with the term aat:300056273, in the same way that being a painting is further classified as being the type of work.\n\nExample:\n\nThe Night Watch is a landscape format painting, as it is wider than it is high.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/11\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] }, { \"id\": \"http://vocab.getty.edu/aat/300311843\", \"type\": \"Type\", \"_label\": \"Oblong\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300056273\", \"type\": \"Type\", \"_label\": \"Shape\" } ] } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/11) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4(aat:300311843) class O4 type; O4-- type -->O4_0[Type] class O4_0 classstyle; O4-- _label -->O4_3(\"''Oblong''\") class O4_3 literal; O5(aat:300056273) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Shape''\") class O5_3 literal; O4-- classified_as -->O5 O1-- classified_as -->O4\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nMaterials\n\nObjects are created using different materials, such as canvas or marble. These are recorded using the made_of property on the object directly. The materials are the type of material, rather than the specific bits of matter and therefore refer to entries in external vocabularies. When possible, it is good to use this model, and combined with the parts model described in the next section, allows for a comprehensive set of information about which parts are which sizes, shapes, colors, and made of which materials.\n\nNote that the type-of-type pattern is not needed for materials, like it is for shape, as they have their own Material class that is used to distinguish them. Note also that materials should be specifically the material of the artwork, rather than the tool used to apply the material. For example, the material should be graphite, not pencil, as pencils can be used as materials to create (very small) sculptures.\n\nExample:\n\nThe Night Watch is made of oil paint and canvas.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/12\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"made_of\": [ { \"id\": \"http://vocab.getty.edu/aat/300015050\", \"type\": \"Material\", \"_label\": \"oil\" }, { \"id\": \"http://vocab.getty.edu/aat/300014078\", \"type\": \"Material\", \"_label\": \"canvas\" } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/12) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4(aat:300015050) class O4 type; O4-- type -->O4_0[Material] class O4_0 classstyle; O4-- _label -->O4_3(\"''oil''\") class O4_3 literal; O1-- made_of -->O4 O5(aat:300014078) class O5 type; O5-- type -->O5_0[Material] class O5_0 classstyle; O5-- _label -->O5_3(\"''canvas''\") class O5_3 literal; O1-- made_of -->O5\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nMaterials Statement\n\nSimilarly to dimensions statements, it is possible to describe the materials using a LinguisticObject classified as being about the materials of the object via aat:300435429.\n\nExample:\n\nThe Night Watch is \"oil on canvas\".\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/13\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300033618\", \"type\": \"Type\", \"_label\": \"Painting\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435443\", \"type\": \"Type\", \"_label\": \"Type of Work\" } ] } ], \"referred_to_by\": [ { \"type\": \"LinguisticObject\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435429\", \"type\": \"Type\", \"_label\": \"Material Statement\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300418049\", \"type\": \"Type\", \"_label\": \"Brief Text\" } ] } ], \"content\": \"Oil on Canvas\" } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/13) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Night Watch by Rembrandt''\") class O1_4 literal; O2(aat:300033618) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Painting''\") class O2_3 literal; O3(aat:300435443) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Type of Work''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 infoobj; O4-- type -->O4_0[LinguisticObject] class O4_0 classstyle; O5(aat:300435429) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Material Statement''\") class O5_3 literal; O6(aat:300418049) class O6 type; O6-- type -->O6_0[Type] class O6_0 classstyle; O6-- _label -->O6_3(\"''Brief Text''\") class O6_3 literal; O5-- classified_as -->O6 O4-- classified_as -->O5 O4-- content -->O4_3(\"''Oil on Canvas''\") class O4_3 literal; O1-- referred_to_by -->O4\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nParts\n\nAs described in the basic patterns, one of the main modeling paradigms used is to separate parts of resources from the whole. Physical objects are particularly amenable to this, and allows reuse of the rest of the model as needed. The parts do not need to be physically separable without destroying the object, but do need to be objectively definable in terms of the matter that makes it up. For example, the arm of a sculpture could have dimensions and materials, but while an arch-shaped space in a rock formation might have dimensions, it could not be removed, nor is it made of anything, and thus it is not a part.\n\nPhysical parts are linked to the whole using the part_of property, and use the same HumanMadeObject class. The classified_as property can be used to be more specific as to the sort of part, in this case the support for the painting, which is in turn made of canvas. The type of part is then further classified as aat:300241583 to ensure that it can be distinguished as a part-type, rather than an object-type.\n\nThe model does not have a separate parts statement to describe this in a human-readable way, as this is traditionally done using the materials statement as demonstrated above.\n\nExample:\n\nThe support part of the Night Watch is made of canvas, and part of the Night Watch.\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/nightwatch/support\", \"type\": \"HumanMadeObject\", \"_label\": \"Support of Night Watch\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300014844\", \"type\": \"Type\", \"_label\": \"Support\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300241583\", \"type\": \"Type\", \"_label\": \"Part Type\" } ] } ], \"made_of\": [ { \"id\": \"http://vocab.getty.edu/aat/300014078\", \"type\": \"Material\", \"_label\": \"canvas\" } ], \"part_of\": [ { \"id\": \"https://linked.art/example/object/nightwatch\", \"type\": \"HumanMadeObject\", \"_label\": \"Night Watch by Rembrandt\" } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/nightwatch/support) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Support of Night Watch''\") class O1_4 literal; O2(aat:300014844) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Support''\") class O2_3 literal; O3(aat:300241583) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Part Type''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4(aat:300014078) class O4 type; O4-- type -->O4_0[Material] class O4_0 classstyle; O4-- _label -->O4_3(\"''canvas''\") class O4_3 literal; O1-- made_of -->O4 O5(object/nightwatch) class O5 object; O5-- type -->O5_0[HumanMadeObject] class O5_0 classstyle; O5-- _label -->O5_3(\"''Night Watch by Rembrandt''\") class O5_3 literal; O1-- part_of -->O5\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nSides of an Object\n\nWhile some artworks can be treated as two dimensional, as the only part of interest is the front of a flat surface such as a painting, drawing or photograph, there are many other objects where it is desirable to record information separately about the front and back, or any number of other sides.\n\nThis pattern allows separate identities for the recto and verso of a page, the obverse and reverse of a coin, in the same manner as the frame or canvas of a painting. The use of the classification aat:300133025 (artwork) is important to distinguish between objects that should be treated as the complete artwork, and objects that are either parts of it, or those that it is part of.\n\nExample:\n\nOn the back of Manet's \"Spring\" is an inscription \"11505F\".\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/spring/back\", \"type\": \"HumanMadeObject\", \"_label\": \"Back of Spring by Manet\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300190692\", \"type\": \"Type\", \"_label\": \"Back Part\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300241583\", \"type\": \"Type\", \"_label\": \"Part Type\" } ] } ], \"referred_to_by\": [ { \"type\": \"LinguisticObject\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300435414\", \"type\": \"Type\", \"_label\": \"Inscription\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300418049\", \"type\": \"Type\", \"_label\": \"Brief Text\" } ] } ], \"content\": \"11505F\" } ], \"part_of\": [ { \"id\": \"https://linked.art/example/object/spring\", \"type\": \"HumanMadeObject\", \"_label\": \"Jeanne (Spring) by Manet\" } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/spring/back) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Back of Spring by Manet''\") class O1_4 literal; O2(aat:300190692) class O2 type; O2-- type -->O2_0[Type] class O2_0 classstyle; O2-- _label -->O2_3(\"''Back Part''\") class O2_3 literal; O3(aat:300241583) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Part Type''\") class O3_3 literal; O2-- classified_as -->O3 O1-- classified_as -->O2 O4( _ ) class O4 infoobj; O4-- type -->O4_0[LinguisticObject] class O4_0 classstyle; O5(aat:300435414) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Inscription''\") class O5_3 literal; O6(aat:300418049) class O6 type; O6-- type -->O6_0[Type] class O6_0 classstyle; O6-- _label -->O6_3(\"''Brief Text''\") class O6_3 literal; O5-- classified_as -->O6 O4-- classified_as -->O5 O4-- content -->O4_3(\"''11505F''\") class O4_3 literal; O1-- referred_to_by -->O4 O7(object/spring) class O7 object; O7-- type -->O7_0[HumanMadeObject] class O7_0 classstyle; O7-- _label -->O7_3(\"''Jeanne (Spring) by Manet''\") class O7_3 literal; O1-- part_of -->O7\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)\n\nNumber of Parts\n\nSome objects have a much higher number of parts than others, and it would be impractical to describe them all independently. For example, a chess set might consist of 33 parts (the board, the 16 white pieces, the 16 black pieces), whereas a vase that has been shattered might consist of hundreds of fragments. It is possible, using the dimension pattern described above, to record the number of parts of an object regardless of whether they are described individually or not.\n\nExample:\n\n\"Vessel with miniature chess set\" by Michael Mode consists of 36 parts (the 32 pieces, the board, a lid, and two other parts)\n\n{ \"@context\": \"https://linked.art/ns/v1/linked-art.json\", \"id\": \"https://linked.art/example/object/chess/1\", \"type\": \"HumanMadeObject\", \"_label\": \"Miniature Chess\", \"identified_by\": [ { \"type\": \"Name\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300404670\", \"type\": \"Type\", \"_label\": \"Primary Name\" } ], \"content\": \"Vessel with miniature chess set\" } ], \"dimension\": [ { \"type\": \"Dimension\", \"classified_as\": [ { \"id\": \"http://vocab.getty.edu/aat/300404433\", \"type\": \"Type\", \"_label\": \"Count\" } ], \"value\": 36, \"unit\": { \"id\": \"http://vocab.getty.edu/aat/300241583\", \"type\": \"MeasurementUnit\", \"_label\": \"Components\" } } ] }\n\ngraph TD classDef object stroke:black,fill:#E1BA9C,rx:20px,ry:20px; classDef actor stroke:black,fill:#FFBDCA,rx:20px,ry:20px; classDef type stroke:red,fill:#FAB565,rx:20px,ry:20px; classDef name stroke:orange,fill:#FEF3BA,rx:20px,ry:20px; classDef dims stroke:black,fill:#c6c6c6,rx:20px,ry:20px; classDef infoobj stroke:#907010,fill:#fffa40,rx:20px,ry:20px classDef timespan stroke:blue,fill:#ddfffe,rx:20px,ry:20px classDef place stroke:#3a7a3a,fill:#aff090,rx:20px,ry:20px classDef event stroke:#1010FF,fill:#96e0f6,rx:20px,ry:20px classDef literal stroke:black,fill:#f0f0e0; classDef classstyle stroke:black,fill:white; O1(object/chess/1) class O1 object; O1-- type -->O1_0[HumanMadeObject] class O1_0 classstyle; O1-- _label -->O1_4(\"''Miniature Chess''\") class O1_4 literal; O2( _ ) class O2 name; O2-- type -->O2_0[Name] class O2_0 classstyle; O3(aat:300404670) class O3 type; O3-- type -->O3_0[Type] class O3_0 classstyle; O3-- _label -->O3_3(\"''Primary Name''\") class O3_3 literal; O2-- classified_as -->O3 O2-- content -->O2_3(\"''Vessel with miniature chess set''\") class O2_3 literal; O1-- identified_by -->O2 O4( _ ) class O4 dims; O4-- type -->O4_0[Dimension] class O4_0 classstyle; O5(aat:300404433) class O5 type; O5-- type -->O5_0[Type] class O5_0 classstyle; O5-- _label -->O5_3(\"''Count''\") class O5_3 literal; O4-- classified_as -->O5 O4-- value -->O4_3(36) class O4_3 literal; O6(aat:300241583) class O6 type; O6-- type -->O6_0[MeasurementUnit] class O6_0 classstyle; O6-- _label -->O6_3(\"''Components''\") class O6_3 literal; O4-- unit -->O6 O1-- dimension -->O4\n\nOther Representations: JSON-LD (raw) | JSON-LD (playground) | Turtle (raw) | Turtle (styled)"
    }
}