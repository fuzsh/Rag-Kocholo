{
    "id": "dbpedia_3091_1",
    "rank": 78,
    "data": {
        "url": "https://developers.google.com/maps/documentation/places/web-service/autocomplete",
        "read_more_link": "",
        "language": "en",
        "title": "Google for Developers",
        "top_image": "https://developers.google.com/static/maps/images/google-maps-platform-1200x675.png",
        "meta_img": "https://developers.google.com/static/maps/images/google-maps-platform-1200x675.png",
        "images": [
            "https://developers.google.com/static/maps/images/maps-icon.svg",
            "https://developers.google.com/static/maps/images/maps-icon.svg",
            "https://developers.google.com/static/site-assets/logo-stack-overflow.svg",
            "https://developers.google.com/static/site-assets/logo-github.svg",
            "https://developers.google.com/static/maps/images/discord-color.png",
            "https://developers.google.com/static/site-assets/developers_64dp.png",
            "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vd185cef2092d5507cf5d5de6d49d6afd8eb38fe69b728d88979eb4a70550ff03/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/maps/documentation/places/web-service/autocomplete",
        "text": "Place Autocomplete\n\nStay organized with collections Save and categorize content based on your preferences.\n\nNote: Server-side and client-side libraries\n\nThe Places API is also available with the Java Client, Python Client, Go Client and Node.js Client for Google Maps Services. The Places API and the client libraries are for use in server applications.\n\nIf you're building a client-side application, take a look at the Places SDK for Android, the Places SDK for iOS, and the Places Library, Maps JavaScript API.\n\nThe Place Autocomplete service is a web service that returns place predictions in response to an HTTP request. The request specifies a textual search string and optional geographic bounds. The service can be used to provide autocomplete functionality for text-based geographic searches, by returning places such as businesses, addresses and points of interest as a user types.\n\nPlace Autocomplete requests\n\nThe Place Autocomplete service is part of the Places API and shares an API key and quotas with the Places API.\n\nThe Place Autocomplete service can match on full words and substrings, resolving place names, addresses, and plus codes. Applications can therefore send queries as the user types, to provide on-the-fly place predictions.\n\nYou must properly format plus codes. This means you must URL-escape the plus sign to %2B, and you must URL-escape spaces to %20.\n\nglobal code is a four character area code, and six character or longer local code. For example, the URL-escape global code 849VCWC8+R9 is 849VCWC8%2BR9.\n\ncompound code is a six character (or longer) local code with an explicit location. For example, the URL-escaped compound code CWC8+R9 Mountain View, CA, USA is CWC8%2BR9%20Mountain%20View%20CA%20USA.\n\nThe returned predictions are designed to be presented to the user to aid them in selecting the desired place. You can send a Place Details request for more information about any of the places which are returned.\n\nA Place Autocomplete request is an HTTP URL of the following form:\n\nhttps://maps.googleapis.com/maps/api/place/autocomplete/output?parameters\n\nwhere output may be either of the following values:\n\njson (recommended) indicates output in JavaScript Object Notation (JSON)\n\nxml indicates output as XML\n\nCertain parameters are required to initiate a Place Autocomplete request. As is standard in URLs, all parameters are separated using the ampersand (&) character. The list of parameters and their possible values are enumerated below.\n\nRequired parameters\n\ninput\n\nThe text string on which to search. The Place Autocomplete service will return candidate matches based on this string and order results based on their perceived relevance.\n\nOptional parameters\n\ncomponents\n\nA grouping of places to which you would like to restrict your results. Currently, you can use components to filter by up to 5 countries. Countries must be passed as a two character, ISO 3166-1 Alpha-2 compatible country code. For example: components=country:fr would restrict your results to places within France. Multiple countries must be passed as multiple country:XX filters, with the pipe character | as a separator. For example: components=country:us|country:pr|country:vi|country:gu|country:mp would restrict your results to places within the United States and its unincorporated organized territories.\n\nNote: If you receive unexpected results with a country code, verify that you are using a code which includes the countries, dependent territories, and special areas of geographical interest you intend. You can find code information at Wikipedia: List of ISO 3166 country codes or the ISO Online Browsing Platform.\n\nlanguage\n\nThe language in which to return results.\n\nSee the list of supported languages. Google often updates the supported languages, so this list may not be exhaustive.\n\nIf language is not supplied, the API attempts to use the preferred language as specified in the Accept-Language header.\n\nThe API does its best to provide a street address that is readable for both the user and locals. To achieve that goal, it returns street addresses in the local language, transliterated to a script readable by the user if necessary, observing the preferred language. All other addresses are returned in the preferred language. Address components are all returned in the same language, which is chosen from the first component.\n\nIf a name is not available in the preferred language, the API uses the closest match.\n\nThe preferred language has a small influence on the set of results that the API chooses to return, and the order in which they are returned. The geocoder interprets abbreviations differently depending on language, such as the abbreviations for street types, or synonyms that may be valid in one language but not in another. For example, utca and t√©r are synonyms for street in Hungarian.\n\nlocation\n\nThe point around which to retrieve place information. This must be specified as latitude,longitude. The radius parameter must also be provided when specifying a location. If radius is not provided, the location parameter is ignored.\n\nWhen using the Text Search API, the `location` parameter may be overriden if the `query` contains an explicit location such as `Market in Barcelona`.\n\nlocationbias\n\nPrefer results in a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle. If this parameter is not specified, the API uses IP address biasing by default.\n\nIP bias: Instructs the API to use IP address biasing. Pass the string ipbias (this option has no additional parameters).\n\nCircular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: circle:radius@lat,lng.\n\nRectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:rectangle:south,west|north,east. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n\nlocationrestriction\n\nRestrict results to a specified area, by specifying either a radius plus lat/lng, or two lat/lng pairs representing the points of a rectangle.\n\nCircular: A string specifying radius in meters, plus lat/lng in decimal degrees. Use the following format: circle:radius@lat,lng.\n\nRectangular: A string specifying two lat/lng pairs in decimal degrees, representing the south/west and north/east points of a rectangle. Use the following format:rectangle:south,west|north,east. Note that east/west values are wrapped to the range -180, 180, and north/south values are clamped to the range -90, 90.\n\noffset\n\nThe position, in the input term, of the last character that the service uses to match predictions. For example, if the input is Google and the offset is 3, the service will match on Goo. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is Google abc and the offset is 3, the service will attempt to match against Goo abc. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.\n\norigin\n\nThe origin point from which to calculate straight-line distance to the destination (returned as distance_meters). If this value is omitted, straight-line distance will not be returned. Must be specified as latitude,longitude.\n\nradius\n\nDefines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a location and a radius parameter. Doing so instructs the Places service to prefer showing results within that circle; results outside of the defined area may still be displayed.\n\nThe radius will automatically be clamped to a maximum value depending on the type of search and other parameters.\n\nAutocomplete: 50,000 meters\n\nNearby Search:\n\nwith keyword or name: 50,000 meters\n\nwithout keyword or name\n\nUp to 50,000 meters, adjusted dynamically based on area density, independent of rankby parameter.\n\nWhen using rankby=distance, the radius parameter will not be accepted, and will result in an INVALID_REQUEST.\n\nQuery Autocomplete: 50,000 meters\n\nText Search: 50,000 meters\n\nregion\n\nThe region code, specified as a ccTLD (\"top-level domain\") two-character value. Most ccTLD codes are identical to ISO 3166-1 codes, with some notable exceptions. For example, the United Kingdom's ccTLD is \"uk\" (.co.uk) while its ISO 3166-1 code is \"gb\" (technically for the entity of \"The United Kingdom of Great Britain and Northern Ireland\").\n\nsessiontoken\n\nA random string which identifies an autocomplete session for billing purposes.\n\nThe session begins when the user starts typing a query, and concludes when they select a place and a call to Place Details is made. Each session can have multiple queries, followed by one place selection. The API key(s) used for each request within a session must belong to the same Google Cloud Console project. Once a session has concluded, the token is no longer valid; your app must generate a fresh token for each session. If the sessiontoken parameter is omitted, or if you reuse a session token, the session is charged as if no session token was provided (each request is billed separately).\n\nWe recommend the following guidelines:\n\nUse session tokens for all autocomplete sessions.\n\nGenerate a fresh token for each session. Using a version 4 UUID is recommended.\n\nEnsure that the API key(s) used for all Place Autocomplete and Place Details requests within a session belong to the same Cloud Console project.\n\nBe sure to pass a unique session token for each new session. Using the same token for more than one session will result in each request being billed individually.\n\nstrictbounds\n\nReturns only those places that are strictly within the region defined by location and radius. This is a restriction, rather than a bias, meaning that results outside this region will not be returned even if they match the user input.\n\ntypes\n\nYou can restrict results from a Place Autocomplete request to be of a certain type by passing the types parameter. This parameter specifies a type or a type collection, as listed in Place Types. If nothing is specified, all types are returned.\n\nA place can only have a single primary type from types listed in Table 1 or Table 2. For example, a hotel where food is served may by returned only with types=lodging and not with types=restaurant.\n\nFor the value of the types parameter you can specify either:\n\nUp to five values from Table 1 or Table 2. For multiple values, separate each value with a | (vertical bar). For example:\n\ntypes=book_store|cafe\n\nAny single supported filter in Table 3. You cannot mix type collections.\n\nThe request will be rejected with an INVALID_REQUEST error if:\n\nMore than five types are specified.\n\nAny unrecognized types are present.\n\nAny types from in Table 1 or Table 2 are mixed with any of the filters in Table 3.\n\nPlace Autocomplete examples\n\nA request for establishments containing the string \"Amoeba\" within an area centered in San Francisco, CA:\n\nURL\n\nhttps://maps.googleapis.com/maps/api/place/autocomplete/json ?input=amoeba &location=37.76999%2C-122.44696 &radius=500 &types=establishment &key=YOUR_API_KEY\n\ncURL\n\ncurl -L -X GET 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=amoeba&types=establishment&location=37.76999%2C-122.44696&radius=500&key=YOUR_API_KEY'\n\nThe same request, restricted to results within 500 meters of Ashbury St & Haight St, San Francisco:\n\nURL\n\nhttps://maps.googleapis.com/maps/api/place/autocomplete/json ?input=amoeba &location=37.76999%2C-122.44696 &radius=500 &strictbounds=true &types=establishment &key=YOUR_API_KEY\n\ncURL\n\ncurl -L -X GET 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=amoeba&types=establishment&location=37.76999%2C-122.44696&radius=500&strictbounds=true&key=YOUR_API_KEY'\n\nA request for addresses containing \"Vict\" with results in French:\n\nURL\n\nhttps://maps.googleapis.com/maps/api/place/autocomplete/json ?input=Vict &language=fr &types=geocode &key=YOUR_API_KEY\n\ncURL\n\ncurl -L -X GET 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Vict&types=geocode&language=fr&key=YOUR_API_KEY'\n\nA request for cities containing \"Vict\" with results in Brazilian Portuguese:\n\nURL\n\nhttps://maps.googleapis.com/maps/api/place/autocomplete/json ?input=Vict &language=pt_BR &types=%28cities%29 &key=YOUR_API_KEY\n\ncURL\n\ncurl -L -X GET 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Vict&types=(cities)&language=pt_BR&key=YOUR_API_KEY'\n\nNote that you'll need to replace the API key in these examples with your own key.\n\nPlace Autocomplete response\n\nPlace Autocomplete responses are returned in the format indicated by the output flag within the request's URL path. The results below are indicative of what may be returned for a query with the following parameters:\n\nURL\n\nhttps://maps.googleapis.com/maps/api/place/autocomplete/json ?input=Paris &types=geocode &key=YOUR_API_KEY\n\ncURL\n\ncurl -L -X GET 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=Paris&types=geocode&key=YOUR_API_KEY'\n\nJSON\n\n{ \"predictions\": [ { \"description\": \"Paris, France\", \"matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"place_id\": \"ChIJD7fiBh9u5kcRYJSMaMOCCwQ\", \"reference\": \"ChIJD7fiBh9u5kcRYJSMaMOCCwQ\", \"structured_formatting\": { \"main_text\": \"Paris\", \"main_text_matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"secondary_text\": \"France\", }, \"terms\": [ { \"offset\": 0, \"value\": \"Paris\" }, { \"offset\": 7, \"value\": \"France\" }, ], \"types\": [\"locality\", \"political\", \"geocode\"], }, { \"description\": \"Paris, TX, USA\", \"matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"place_id\": \"ChIJmysnFgZYSoYRSfPTL2YJuck\", \"reference\": \"ChIJmysnFgZYSoYRSfPTL2YJuck\", \"structured_formatting\": { \"main_text\": \"Paris\", \"main_text_matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"secondary_text\": \"TX, USA\", }, \"terms\": [ { \"offset\": 0, \"value\": \"Paris\" }, { \"offset\": 7, \"value\": \"TX\" }, { \"offset\": 11, \"value\": \"USA\" }, ], \"types\": [\"locality\", \"political\", \"geocode\"], }, { \"description\": \"Paris, TN, USA\", \"matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"place_id\": \"ChIJ4zHP-Sije4gRBDEsVxunOWg\", \"reference\": \"ChIJ4zHP-Sije4gRBDEsVxunOWg\", \"structured_formatting\": { \"main_text\": \"Paris\", \"main_text_matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"secondary_text\": \"TN, USA\", }, \"terms\": [ { \"offset\": 0, \"value\": \"Paris\" }, { \"offset\": 7, \"value\": \"TN\" }, { \"offset\": 11, \"value\": \"USA\" }, ], \"types\": [\"locality\", \"political\", \"geocode\"], }, { \"description\": \"Paris, Brant, ON, Canada\", \"matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"place_id\": \"ChIJsamfQbVtLIgR-X18G75Hyi0\", \"reference\": \"ChIJsamfQbVtLIgR-X18G75Hyi0\", \"structured_formatting\": { \"main_text\": \"Paris\", \"main_text_matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"secondary_text\": \"Brant, ON, Canada\", }, \"terms\": [ { \"offset\": 0, \"value\": \"Paris\" }, { \"offset\": 7, \"value\": \"Brant\" }, { \"offset\": 14, \"value\": \"ON\" }, { \"offset\": 18, \"value\": \"Canada\" }, ], \"types\": [\"neighborhood\", \"political\", \"geocode\"], }, { \"description\": \"Paris, KY, USA\", \"matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"place_id\": \"ChIJsU7_xMfKQ4gReI89RJn0-RQ\", \"reference\": \"ChIJsU7_xMfKQ4gReI89RJn0-RQ\", \"structured_formatting\": { \"main_text\": \"Paris\", \"main_text_matched_substrings\": [{ \"length\": 5, \"offset\": 0 }], \"secondary_text\": \"KY, USA\", }, \"terms\": [ { \"offset\": 0, \"value\": \"Paris\" }, { \"offset\": 7, \"value\": \"KY\" }, { \"offset\": 11, \"value\": \"USA\" }, ], \"types\": [\"locality\", \"political\", \"geocode\"], }, ], \"status\": \"OK\", }\n\nXML\n\n<AutocompletionResponse> <status>OK</status> <prediction> <description>Paris, France</description> <type>locality</type> <type>political</type> <type>geocode</type> <reference>ChIJD7fiBh9u5kcRYJSMaMOCCwQ</reference> <term> <value>Paris</value> <offset>0</offset> </term> <term> <value>France</value> <offset>7</offset> </term> <matched_substring> <offset>0</offset> <length>5</length> </matched_substring> <place_id>ChIJD7fiBh9u5kcRYJSMaMOCCwQ</place_id> <structured_formatting> <description>Paris</description> <subdescription>France</subdescription> <description_matched_substring> <offset>0</offset> <length>5</length> </description_matched_substring> </structured_formatting> </prediction> <prediction> <description>Paris, TX, USA</description> <type>locality</type> <type>political</type> <type>geocode</type> <reference>ChIJmysnFgZYSoYRSfPTL2YJuck</reference> <term> <value>Paris</value> <offset>0</offset> </term> <term> <value>TX</value> <offset>7</offset> </term> <term> <value>USA</value> <offset>11</offset> </term> <matched_substring> <offset>0</offset> <length>5</length> </matched_substring> <place_id>ChIJmysnFgZYSoYRSfPTL2YJuck</place_id> <structured_formatting> <description>Paris</description> <subdescription>TX, USA</subdescription> <description_matched_substring> <offset>0</offset> <length>5</length> </description_matched_substring> </structured_formatting> </prediction> <prediction> <description>Paris, TN, USA</description> <type>locality</type> <type>political</type> <type>geocode</type> <reference>ChIJ4zHP-Sije4gRBDEsVxunOWg</reference> <term> <value>Paris</value> <offset>0</offset> </term> <term> <value>TN</value> <offset>7</offset> </term> <term> <value>USA</value> <offset>11</offset> </term> <matched_substring> <offset>0</offset> <length>5</length> </matched_substring> <place_id>ChIJ4zHP-Sije4gRBDEsVxunOWg</place_id> <structured_formatting> <description>Paris</description> <subdescription>TN, USA</subdescription> <description_matched_substring> <offset>0</offset> <length>5</length> </description_matched_substring> </structured_formatting> </prediction> <prediction> <description>Paris, Brant, ON, Canada</description> <type>neighborhood</type> <type>political</type> <type>geocode</type> <reference>ChIJsamfQbVtLIgR-X18G75Hyi0</reference> <term> <value>Paris</value> <offset>0</offset> </term> <term> <value>Brant</value> <offset>7</offset> </term> <term> <value>ON</value> <offset>14</offset> </term> <term> <value>Canada</value> <offset>18</offset> </term> <matched_substring> <offset>0</offset> <length>5</length> </matched_substring> <place_id>ChIJsamfQbVtLIgR-X18G75Hyi0</place_id> <structured_formatting> <description>Paris</description> <subdescription>Brant, ON, Canada</subdescription> <description_matched_substring> <offset>0</offset> <length>5</length> </description_matched_substring> </structured_formatting> </prediction> <prediction> <description>Paris, KY, USA</description> <type>locality</type> <type>political</type> <type>geocode</type> <reference>ChIJsU7_xMfKQ4gReI89RJn0-RQ</reference> <term> <value>Paris</value> <offset>0</offset> </term> <term> <value>KY</value> <offset>7</offset> </term> <term> <value>USA</value> <offset>11</offset> </term> <matched_substring> <offset>0</offset> <length>5</length> </matched_substring> <place_id>ChIJsU7_xMfKQ4gReI89RJn0-RQ</place_id> <structured_formatting> <description>Paris</description> <subdescription>KY, USA</subdescription> <description_matched_substring> <offset>0</offset> <length>5</length> </description_matched_substring> </structured_formatting> </prediction> </AutocompletionResponse>\n\nPlacesAutocompleteResponse\n\nFieldRequiredTypeDescription\n\nOf particular interest within the results are the place_id elements, which can be used to request more specific details about the place via a separate query. See Place Details requests.\n\nAn XML response consists of a single <AutocompletionResponse> element with two types of child elements:\n\nA single <status> element contains metadata on the request. See Status Codes below.\n\nZero or more <prediction> elements, each containing information about a single place. See Place Autocomplete Results for information about these results. The Places API returns up to 5 results.\n\nWe recommend that you use json as the preferred output flag unless your application requires xml for some reason. Processing XML trees requires some care, so that you reference proper nodes and elements. See Processing XML with XPath for help processing XML.\n\nPlacesAutocompleteStatus\n\nStatus codes returned by service.\n\nOK indicating the API request was successful.\n\nZERO_RESULTS indicating that the search was successful but returned no results. This may occur if the search was passed a bounds in a remote location.\n\nINVALID_REQUEST indicating the API request was malformed, generally due to the missing input parameter.\n\nOVER_QUERY_LIMIT indicating any of the following:\n\nYou have exceeded the QPS limits.\n\nBilling has not been enabled on your account.\n\nThe monthly $200 credit, or a self-imposed usage cap, has been exceeded.\n\nThe provided method of payment is no longer valid (for example, a credit card has expired).\n\nSee the Maps FAQ for more information about how to resolve this error.\n\nREQUEST_DENIED indicating that your request was denied, generally because:\n\nThe request is missing an API key.\n\nThe key parameter is invalid.\n\nUNKNOWN_ERROR indicating an unknown error.\n\nWhen the Places service returns JSON results from a search, it places them within a predictions array. Even if the service returns no results (such as if the location is remote) it still returns an empty predictions array. XML responses consist of zero or more <prediction> elements.\n\nPlaceAutocompletePrediction\n\nFieldRequiredTypeDescription\n\nPlaceAutocompleteMatchedSubstring\n\nFieldRequiredTypeDescription\n\nPlaceAutocompleteStructuredFormat\n\nFieldRequiredTypeDescription\n\nPlaceAutocompleteTerm\n\nFieldRequiredTypeDescription\n\nPlace Autocomplete optimization\n\nThis section describes best practices to help you make the most of the Place Autocomplete service.\n\nHere are some general guidelines:\n\nThe quickest way to develop a working user interface is to use the Maps JavaScript API Autocomplete widget, Places SDK for Android Autocomplete widget, or Places SDK for iOS Autocomplete UI control\n\nDevelop an understanding of essential Place Autocomplete data fields from the start.\n\nLocation biasing and location restriction fields are optional but can have a significant impact on autocomplete performance.\n\nUse error handling to make sure your app degrades gracefully if the API returns an error.\n\nMake sure your app handles when there is no selection and offers users a way to continue.\n\nCost optimization best practices\n\nBasic cost optimization\n\nTo optimize the cost of using the Place Autocomplete service, use field masks in Place Details and Place Autocomplete widgets to return only the place data fields you need.\n\nAdvanced cost optimization\n\nConsider programmatic implementation of Place Autocomplete in order to access Per Request pricing and request Geocoding API results about the selected place instead of Place Details. Per Request pricing paired with Geocoding API is more cost-effective than Per Session (session-based) pricing if both of the following conditions are met:\n\nIf you only need the latitude/longitude or address of the user's selected place, the Geocoding API delivers this information for less than a Place Details call.\n\nIf users select an autocomplete prediction within an average of four Autocomplete predictions requests or fewer, Per Request pricing may be more cost-effective than Per Session pricing.\n\nFor help selecting the Place Autocomplete implementation that fits your needs, select the tab that corresponds to your answer to the following question.\n\nDoes your application require any information other than the address and latitude/longitude of the selected prediction?\n\nYes, needs more details\n\nUse session-based Place Autocomplete with Place Details.\n\nSince your application requires Place Details such as the place name, business status, or opening hours, your implementation of Place Autocomplete should use a session token (programmatically or built into the JavaScript, Android, or iOS widgets) for a total cost of $0.017 per session plus applicable Places Data SKUs depending on which place data fields you request.1\n\nWidget implementation\n\nSession management is automatically built into the JavaScript, Android, or iOS widgets. This includes both the Place Autocomplete requests and the Place Details request on the selected prediction. Be sure to specify the fields parameter in order to ensure you are only requesting the place data fields you need.\n\nProgrammatic implementation\n\nUse a session token with your Place Autocomplete requests. When requesting Place Details about the selected prediction, include the following parameters:\n\nThe place ID from the Place Autocomplete response\n\nThe session token used in the Place Autocomplete request\n\nThe fields parameter specifying the place data fields you need\n\nNo, needs only address and location\n\nGeocoding API could be a more cost-effective option than Place Details for your application, depending on the performance of your Place Autocomplete usage. Every application's Autocomplete efficiency varies depending on what users are entering, where the application is being used, and whether performance optimization best practices have been implemented.\n\nIn order to answer the following question, analyze how many characters a user types on average before selecting a Place Autocomplete prediction in your application.\n\nDo your users select a Place Autocomplete prediction in four or fewer requests, on average?\n\nYes\n\nImplement Place Autocomplete programmatically without session tokens and call Geocoding API on the selected place prediction.\n\nGeocoding API delivers addresses and latitude/longitude coordinates for $0.005 per request. Making four Place Autocomplete - Per Request requests costs $0.01132 so the total cost of four requests plus a Geocoding API call about the selected place prediction would be $0.01632 which is less than the Per Session Autocomplete price of $0.017 per session.1\n\nConsider employing performance best practices to help your users get the prediction they're looking for in even fewer characters.\n\nNo\n\nUse session-based Place Autocomplete with Place Details.\n\nSince the average number of requests you expect to make before a user selects a Place Autocomplete prediction exceeds the cost of Per Session pricing, your implementation of Place Autocomplete should use a session token for both the Place Autocomplete requests and the associated Place Details request for a total cost of $0.017 per session.1\n\nWidget implementation\n\nSession management is automatically built into the JavaScript, Android, or iOS widgets. This includes both the Place Autocomplete requests and the Place Details request on the selected prediction. Be sure to specify the fields parameter in order to ensure you are only requesting Basic Data fields.\n\nProgrammatic implementation\n\nUse a session token with your Place Autocomplete requests. When requesting Place Details about the selected prediction, include the following parameters:\n\nThe place ID from the Place Autocomplete response\n\nThe session token used in the Place Autocomplete request\n\nThe fields parameter specifying Basic Data fields such as address and geometry\n\nConsider delaying Place Autocomplete requests\n\nYou can employ strategies such as delaying a Place Autocomplete request until the user has typed in the first three or four characters so that your application makes fewer requests. For example, making Place Autocomplete requests for each character after the user has typed the third character means that if the user types seven characters then selects a prediction for which you make one Geocoding API request, the total cost would be $0.01632 (4 * $0.00283 Autocomplete Per Request + $0.005 Geocoding).1\n\nIf delaying requests can get your average programmatic request below four, you can follow the guidance for performant Place Autocomplete with Geocoding API implementation. Note that delaying requests can be perceived as latency by the user who might be expecting to see predictions with every new keystroke.\n\nConsider employing performance best practices to help your users get the prediction they're looking for in fewer characters.\n\nPerformance best practices\n\nThe following guidelines describe ways to optimize Place Autocomplete performance:\n\nAdd country restrictions, location biasing, and (for programmatic implementations) language preference to your Place Autocomplete implementation. Language preference is not needed with widgets since they pick language preferences from the user's browser or mobile device.\n\nIf Place Autocomplete is accompanied by a map, you can bias location by map viewport.\n\nIn situations when a user does not choose one of the Autocomplete predictions, generally because none of those predictions are the desired result-address, you can re-use the original user input to attempt to get more relevant results:\n\nIf you expect the user to enter only address information, re-use the original user input in a call to the Geocoding API.\n\nIf you expect the user to enter queries for a specific place by name or address, use a Find Place request. If results are only expected in a specific region, use location biasing.\n\nOther scenarios when it's best to fall back to the Geocoding API include:\n\nUsers inputting subpremise addresses in countries where Place Autocomplete support of subpremise addresses is incomplete, e.g. Czechia, Estonia and Lithuania. For example, the Czech address \"Stroupe≈ænick√©ho 3191/17, Praha\" yields a partial prediction in Place Autocomplete.\n\nUsers inputting addresses with road-segment prefixes like \"23-30 29th St, Queens\" in New York City or \"47-380 Kamehameha Hwy, Kaneohe\" on the island of Kauai in Hawai'i.\n\nLocation biasing\n\nBias results to a specified area by passing a location parameter and a radius parameter. This instructs the Place Autocomplete service to prefer showing results within the defined area. Results outside of the defined area may still be displayed. You can use the components parameter to filter results to show only those places within a specified country.\n\nTip: Establishment results generally do not rank highly enough to show in results when the search area is large. If you want establishments to appear in mixed establishment/geocode results, you can specify a smaller radius. Alternatively, use types=establishment to restrict results to establishments only.\n\nLocation restrict\n\nRestrict results to a specified area by passing a locationrestriction parameter.\n\nYou may also restrict results to the region defined by location and a radius parameter, by adding the strictbounds parameter. This instructs the Place Autocomplete service to return only results within that region."
    }
}