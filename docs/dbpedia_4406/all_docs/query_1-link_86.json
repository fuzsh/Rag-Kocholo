{
    "id": "dbpedia_4406_1",
    "rank": 86,
    "data": {
        "url": "https://cloud.google.com/pubsub/docs/overview",
        "read_more_link": "",
        "language": "en",
        "title": "What is Pub/Sub?",
        "top_image": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "meta_img": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/cloud/images/cloud-logo.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/cloud/images/cloud-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Understand how Pub/Sub works and the different terms associated with Pub/Sub",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vb04bc6a770b206c5880569d039fa6eaa90ca0850e1afe1934dab7999e04ac53a/cloud/images/favicons/onecloud/favicon.ico",
        "meta_site_name": "Google Cloud",
        "canonical_link": "https://cloud.google.com/pubsub/docs/overview",
        "text": "Stay organized with collections Save and categorize content based on your preferences.\n\nPub/Sub is an asynchronous and scalable messaging service that decouples services producing messages from services processing those messages.\n\nPub/Sub allows services to communicate asynchronously, with latencies on the order of 100 milliseconds.\n\nPub/Sub is used for streaming analytics and data integration pipelines to load and distribute data. It's equally effective as a messaging-oriented middleware for service integration or as a queue to parallelize tasks.\n\nPub/Sub lets you create systems of event producers and consumers, called publishers and subscribers. Publishers communicate with subscribers asynchronously by broadcasting events, rather than by synchronous remote procedure calls (RPCs).\n\nPublishers send events to the Pub/Sub service, without regard to how or when these events are to be processed. Pub/Sub then delivers events to all the services that react to them. In systems communicating through RPCs, publishers must wait for subscribers to receive the data. However, the asynchronous integration in Pub/Sub increases the flexibility and robustness of the overall system.\n\nTo get started with Pub/Sub, check out the Quickstart using Google Cloud console. For a more comprehensive introduction, see Building a Pub/Sub messaging system.\n\nCommon use cases\n\nIngesting user interaction and server events. To use user interaction events from end-user apps or server events from your system, you might forward them to Pub/Sub. You can then use a stream processing tool, such as Dataflow, which delivers the events to databases. Examples of such databases are BigQuery, Bigtable, and Cloud Storage. Pub/Sub lets you gather events from many clients simultaneously.\n\nReal-time event distribution. Events, raw or processed, may be made available to multiple applications across your team and organization for real- time processing. Pub/Sub supports an \"enterprise event bus\" and event-driven application design patterns. Pub/Sub lets you integrate with many systems that export events to Pub/Sub.\n\nReplicating data among databases. Pub/Sub is commonly used to distribute change events from databases. These events can be used to construct a view of the database state and state history in BigQuery and other data storage systems.\n\nParallel processing and workflows. You can efficiently distribute many tasks among multiple workers by using Pub/Sub messages to communicate with the workers. Examples of such tasks are compressing text files, sending email notifications, evaluating AI models, and reformatting images.\n\nEnterprise event bus. You can create an enterprise-wide real-time data sharing bus, distributing business events, database updates, and analytics events across your organization.\n\nData streaming from applications, services, or IoT devices. For example, a SaaS application can publish a real-time feed of events. Or, a residential sensor can stream data to Pub/Sub for use in other Google Cloud products through a data-processing pipeline.\n\nRefreshing distributed caches. For example, an application can publish invalidation events to update the IDs of objects that have changed.\n\nLoad balancing for reliability. For example, instances of a service may be deployed on Compute Engine in multiple zones but subscribe to a common topic. When the service fails in any zone, the others can pick up the load automatically.\n\nTypes of Pub/Sub services\n\nPub/Sub consists of two services:\n\nPub/Sub service. This messaging service is the default choice for most users and applications. It offers the highest reliability and largest set of integrations, along with automatic capacity management. Pub/Sub supports synchronous replication of all data to at least two zones and best-effort replication to a third additional zone.\n\nPub/Sub Lite service. A separate but similar messaging service built for lower cost. It offers lower reliability compared to Pub/Sub. It offers either zonal or regional topic storage. Zonal Lite topics are stored in only one zone. Regional Lite topics replicate data to a second zone asynchronously. Also, Pub/Sub Lite requires you to pre-provision and manage storage and throughput capacity. Consider Pub/Sub Lite only for applications where achieving a low cost justifies some additional operational work and lower reliability.\n\nFor more details about the differences between Pub/Sub and Pub/Sub Lite, see Choosing Pub/Sub or Pub/Sub Lite.\n\nComparing Pub/Sub to other messaging technologies\n\nPub/Sub combines the horizontal scalability of Apache Kafka and Pulsar with features found in messaging middleware such as Apache ActiveMQ and RabbitMQ. Examples of such features are dead-letter queues and filtering.\n\nAnother feature that Pub/Sub adopts from messaging middleware is per-message parallelism, rather than partition-based messaging. Pub/Sub \"leases\" individual messages to subscriber clients, then tracks whether a given message is successfully processed.\n\nBy contrast, other horizontally scalable messaging systems use partitions for horizontal scaling. This forces subscribers to process messages in each partition in order and limits the number of concurrent clients to the number of partitions. Per-message processing maximizes the parallelism of subscriber applications, and helps ensure publisher and subscriber independence.\n\nCompare Service-to-service and service-to-client communication\n\nPub/Sub is intended for service-to-service communication rather than communication with end-user or IoT clients. Other patterns are better supported by other products:\n\nClient-server. To send messages between a mobile or web app and a service, use products that include Firebase Realtime Database and Firebase Cloud Messaging.\n\nAsynchronous service calls. Use Cloud Tasks.\n\nYou can use a combination of these services to build client -> services -> database patterns. For example, see the tutorial Streaming Pub/Sub messages over WebSockets.\n\nIntegrations\n\nPub/Sub has many integrations with other Google Cloud products to create a fully featured messaging system:\n\nStream processing and data integration. Supported by Dataflow, including Dataflow templates and SQL, which allow processing and data integration into BigQuery and data lakes on Cloud Storage. Dataflow templates for moving data from Pub/Sub to Cloud Storage, BigQuery, and other products are available in the Pub/Sub and Dataflow UIs in the Google Cloud console. Integration with Apache Spark, particularly when managed with Dataproc is also available. Visual composition of integration and processing pipelines running on Spark + Dataproc can be accomplished with Data Fusion.\n\nMonitoring, Alerting and Logging. Supported by Monitoring and Logging products.\n\nAuthentication and IAM. Pub/Sub relies on a standard OAuth authentication used by other Google Cloud products and supports granular IAM, enabling access control for individual resources.\n\nAPIs. Pub/Sub uses standard gRPC and REST service API technologies along with client libraries for several languages.\n\nTriggers, notifications, and webhooks. Pub/Sub offers push-based delivery of messages as HTTP POST requests to webhooks. You can implement workflow automation using Cloud Functions or other serverless products.\n\nOrchestration. Pub/Sub can be integrated into multistep serverless Workflows declaratively. Big data and analytic orchestration often done with Cloud Composer, which supports Pub/Sub triggers. You can also integrate Pub/Sub with Application Integration (Preview) which is an Integration-Platform-as-a-Service (iPaaS) solution. Application Integration provides a Pub/Sub trigger to trigger or start integrations.\n\nIntegration Connectors.(Preview) These connectors let you connect to various data sources. With connectors, both Google Cloud services and third-party business applications are exposed to your integrations through a transparent, standard interface. For Pub/Sub, you can create a Pub/Sub connection for use in your integrations.\n\nNext steps\n\nGet started with the Pub/Sub quickstart or the Pub/Sub Lite quickstart.\n\nRead the basics of the Pub/Sub service.\n\nLearn how to build a Pub/Sub messaging system.\n\nUnderstand Pub/Sub pricing.\n\nUnderstand quotas and limits for Pub/Sub and Pub/Sub Lite.\n\nRead the Pub/Sub release notes.\n\nExplore data engineering with Google Cloud services on Qwiklabs."
    }
}