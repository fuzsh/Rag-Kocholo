{
    "id": "dbpedia_4406_1",
    "rank": 94,
    "data": {
        "url": "https://about.gitlab.com/topics/devops/",
        "read_more_link": "",
        "language": "en",
        "title": "What is DevOps?",
        "top_image": "https://about.gitlab.com/nuxt-images/open-graph/open-graph-gitlab.png",
        "meta_img": "https://about.gitlab.com/nuxt-images/open-graph/open-graph-gitlab.png",
        "images": [
            "https://about.gitlab.com/_nuxt/image/87eca8.svg",
            "https://about.gitlab.com/_nuxt/image/65fccb.svg",
            "https://images.ctfassets.net/xz1dnu24egyd/2S16xLgZGnBkxXgFVQOrxv/24e5808aba2b4c7024c15daa6b6ef5f7/loop-white.svg",
            "https://images.ctfassets.net/xz1dnu24egyd/1LnYFXmG1LzJwfmQ3kDZXR/4e4fadaf83e1aa00e494093f427ed234/how-devops-leads-transformation.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/3O1jcZpXEawB1BKrIMSJl3/e3fa46a0aae8ea70b09fb4c22bcacaba/cloud-native-devops.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/76OWPA5lUlWTnOaBxQz1tX/809ead4d6c388bb5d234547c5b34f3fc/devops-tips-and-tricks.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/1rgRBVdc4LIHfxefT4wmdT/5a90597f7b71e8f35c7cf14242231c51/simplify-devops.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/2wircHbmgUmTdnHzjBj7F9/10f3246d6472b2b4acae55a59e0ff7cc/resources_3.jpg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/6OAid2EmbLCu96eCNrIU1R/6379538af1f98fbf8be1090349695739/resources_1.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/2d6TAd6DKw4wsSmY3YZmd3/4555118cd2fd79369e151dbaf8c24a12/resources_11.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/29VlOEpD6O0wdH7jjygrQx/640ba5d0a0d385ea70178bc619e890cd/resources_14.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/2ieftuQVKqENXLE7v7r8E4/af66a129dfd5b7ffdbdc494e0801f617/resources_4.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/6H8qOzthny2fXmnaCxHHTj/5bec6ffab6c4c15fbe596e421119925b/resources_9.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/3ZrUpmLGQgfQ9MNnOwitl8/eeac81bc073c69940f9b669f28933be8/resources_18.jpg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/3YWpUPx34FgP5bdhhWYoNL/6169a02c3fef56a006e91af9d796bf04/resources_5.jpeg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/5QOYq7jomwq5YTvZljpGsL/fd0366d7bf05b23b13c97a1077bbd662/resources_16.jpg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/5Xwe49f52qFtMNiyxzkafe/4c59e209c74806831f07dfdc93f7dc7c/alteryx_case_study.jpg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/6cj7AwGn7JOStgR531zAp/ac99d10d85f44561b9bbad5b2bc44430/beginners-guide-to-ci.jpg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/3HSLEydQHYPzzB67DnTjo9/21b2974334fd23d03e1760c0de17468b/scm-ci-cr.png?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/1BxUSmJCzFzJo9gIUHHs4Q/3fa57bc75277795fec4deb797138e34e/markus-spiske-MkwAXj8LV8c-unsplash.png?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/193SnGdNyUfFqgY7oImrCz/0127bcf06919548f927a0bda67db5512/future-of-software-future-proof-your-career.png?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/VbIIULCmEBGGGBNARcsko/0d981991d2f087e9f626fed4837214ff/whatisgitlabflow.jpg?h=400&fl=progressive",
            "https://images.ctfassets.net/xz1dnu24egyd/2ouky0TRvapIoHpqLsJD1C/4a96055848d7e679da16c7d15ea4295d/next-step.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "GitLab"
        ],
        "publish_date": "2022-02-10T00:00:00+00:00",
        "summary": "",
        "meta_description": "Learn about the benefits and features of the DevOps lifecycle, and how to use communication and collaboration to deliver better quality code, faster!",
        "meta_lang": "en",
        "meta_favicon": "/nuxt-images/ico/favicon.ico?cache=20220414",
        "meta_site_name": "",
        "canonical_link": "https://about.gitlab.com/topics/devops/",
        "text": "DevOps can be best explained as people working together to conceive, build and deliver secure software at top speed. DevOps practices enable software development (dev) and operations (ops) teams to accelerate delivery through automation, collaboration, fast feedback, and iterative improvement.Stemming from an Agile approach to software development, a DevOps process expands on the cross-functional approach of building and shipping applications in a faster and more iterative manner.\n\nIn adopting a DevOps development process, you are making a decision to improve the flow and value delivery of your application by encouraging a more collaborative environment at all stages of the development cycle.DevOps represents a change in mindset for IT culture. In building on top of Agile, lean practices, and systems theory, DevOps focuses on incremental development and rapid delivery of software. Success relies on the ability to create a culture of accountability, improved collaboration, empathy, and joint responsibility for business outcomes.\n\nDevOps is a combination of software development (dev) and operations (ops). It is defined as a software engineering methodology which aims to integrate the work of development teams and operations teams by facilitating a culture of collaboration and shared responsibility.\n\nThe DevOps methodology aims to shorten the systems development lifecycle and provide continuous delivery with high software quality. It emphasizes collaboration, automation, integration and rapid feedback cycles. These characteristics help ensure a culture of building, testing, and releasing software that is more reliable and at a high velocity.\n\nThis methodology comprises four key principles that guide the effectiveness and efficiency of application development and deployment. These principles, listed below, center on the best aspects of modern software development.\n\nCore DevOps principles\n\nAutomation of the software development lifecycle. This includes automating testing, builds, releases, the provisioning of development environments, and other manual tasks that can slow down or introduce human error into the software delivery process.\n\nCollaboration and communication. A good DevOps team has automation, but a great DevOps team also has effective collaboration and communication.\n\nContinuous improvement and minimization of waste. From automating repetitive tasks to watching performance metrics for ways to reduce release times or mean-time-to-recovery, high performing DevOps teams are regularly looking for areas that could be improved.\n\nHyperfocus on user needs with short feedback loops. Through automation, improved communication and collaboration, and continuous improvement, DevOps teams can take a moment and focus on what real users really want, and how to give it to them.\n\nBy adopting these principles, organizations can improve code quality, achieve a faster time to market, and engage in better application planning.\n\nThe evolution of DevOps has unfolded across four distinct phases, each marked by shifts in technology and organizational practices. This progression reflects the growing complexity within DevOps, driven primarily by two key trends:\n\nTransition to Microservices: As organizations shift from monolithic architectures to more flexible microservices architectures, the demand for specialized DevOps tools has surged. This shift aims to accommodate the increased granularity and agility offered by microservices.\n\nIncrease in Tool Integration: The proliferation of projects and the corresponding need for more DevOps tools have led to a significant rise in the number of integrations between projects and tools. This complexity has prompted organizations to rethink their approach to adopting and integrating DevOps tools.\n\nThe evolution of DevOps has unfolded through four distinct phases, each addressing the growing demands and complexities of software development and delivery.\n\nThis four phases are as follows:\n\nPhase 1: Bring Your Own DevOps (BYOD)\n\nIn the Bring Your Own DevOps phase, each team selected its own tools. This approach caused problems when teams attempted to work together because they were not familiar with the tools of other teams. This phase highlighted the need for a more unified toolset to facilitate smoother team integration and project management.\n\nPhase 2: Best-in-class DevOps\n\nTo address the challenges of using disparate tools, organizations moved to the second phase, Best-in-class DevOps. In this phase, organizations standardized on the same set of tools, with one preferred tool for each stage of the DevOps lifecycle. It helped teams collaborate with one another, but the problem then became moving software changes through the tools for each stage.\n\nPhase 3: Do-it-yourself (DIY) DevOps\n\nTo remedy this problem, organizations adopted do-it-yourself (DIY) DevOps, building on top of and between their tools. They performed a lot of custom work to integrate their DevOps point solutions together. However, since these tools were developed independently without integration in mind, they never fit quite right. For many organizations, maintaining DIY DevOps was a significant effort and resulted in higher costs, with engineers maintaining tooling integration rather than working on their core software product.\n\nPhase 4: DevOps Platform\n\nA single-application platform approach improves the team experience and business efficiency. A DevOps platform replaces DIY DevOps, allowing visibility throughout and control over all stages of the DevOps lifecycle.\n\nBy empowering all teams â Development, Operations, IT, Security, and Business â to collaboratively plan, build, secure, and deploy software across an end-to-end unified system, a DevOps platform represents a fundamental step-change in realizing the full potential of DevOps.\n\nGitLab's DevOps platform is a single application powered by a cohesive user interface, agnostic of self-managed or SaaS deployment. It is built on a single codebase with a unified data store, that allows organizations to resolve the inefficiencies and vulnerabilities of an unreliable DIY toolchain.\n\nThe business value of DevOps and the benefits of a DevOps culture lies in the ability to improve the production environment in order to deliver software faster with continuous improvement. You need the ability to anticipate and respond to industry disruptors without delay. This becomes possible within an Agile software development process where teams are empowered to be autonomous and deliver faster, reducing work in progress. Once this occurs, teams are able to respond to demands at the speed of the market.\n\nThere are some fundamental concepts that need to be put into action in order for DevOps to function as designed, including the need to:\n\nRemove institutionalized silos and handoffs that lead to roadblocks and constraints, particularly in instances where the measurements of success for one team is in direct odds with another teamâs key performance indicators (KPIs).\n\nImplement a unified tool chain using a single application that allows multiple teams to share and collaborate. This will enable teams to accelerate delivery and provide fast feedback to one another.\n\nKey benefits:\n\nAdopting a DevOps culture brings numerous benefits to an organization, notably in operational efficiency, faster delivery of features, and improved product quality. Key advantages include:\n\nEnhanced Collaboration: Breaking down silos between development and operations teams fosters a more cohesive working environment, leading to better communication and collaboration.\n\nIncreased Efficiency: Automation of the software development lifecycle reduces manual tasks, minimizes errors, and accelerates delivery times.\n\nContinuous Improvement: DevOps encourages a culture of continuous feedback, allowing teams to quickly adapt and make improvements, ensuring that the software meets user needs effectively.\n\nHigher Quality and Security: With practices like continuous integration and delivery (CI/CD) and proactive security measures, DevOps ensures that the software is not only developed faster but also maintains high quality and security standards.\n\nFaster Time to Market: By streamlining development processes and improving team collaboration, organizations can reduce the overall time from conception to deployment, offering a competitive edge in rapidly evolving markets.\n\nAdopting DevOps breaks down barriers so that development and operations teams are no longer siloed and have a more efficient way to work across the entire development and application lifecycle. Without DevOps, organizations often experience handoff friction, which delays the delivery of software releases and negatively impacts business results.\n\nThe DevOps model is an organizationâs answer to increasing operational efficiency, accelerating delivery, and innovating products. Organizations that have implemented a DevOps culture experience the benefits of increased collaboration, fluid responsiveness, and shorter cycle times.\n\nCollaboration\n\nAdopting a DevOps model creates alignment between development and operations teams; handoff friction is reduced and everyone is all in on the same goals and objectives.\n\nFluid responsiveness\n\nMore collaboration leads to real-time feedback and greater efficiency; changes and improvements can be implemented quicker and guesswork is removed.\n\nShorter cycle time\n\nImproved efficiency and frequent communication between teams shortens cycle time; new code can be released more rapidly while maintaining quality and security."
    }
}