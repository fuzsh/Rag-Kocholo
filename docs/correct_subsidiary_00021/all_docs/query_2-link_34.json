{
    "id": "correct_subsidiary_00021_2",
    "rank": 34,
    "data": {
        "url": "https://4js.com/support/ibm-i4gl-to-genero/",
        "read_more_link": "",
        "language": "en",
        "title": "IBM Informix 4GL to Genero – Four Js Low",
        "top_image": "https://4js.com/wp-content/uploads/2015/05/logo.png",
        "meta_img": "https://4js.com/wp-content/uploads/2015/05/logo.png",
        "images": [
            "https://4js.com/files/images/flags/flag_great_britain.png",
            "https://4js.com/files/images/flags/flag_france.png",
            "https://4js.com/files/images/flags/flag_italy.png",
            "https://4js.com/wp-content/uploads/2015/05/logo_4Js_2014_CMYK_seul-300x92.png",
            "https://4js.com/wp-content/uploads/2024/07/Genero-cont_EAP-36x36.jpg",
            "https://4js.com/wp-content/uploads/2024/05/WWDC_picto-36x36.jpg",
            "https://4js.com/wp-content/uploads/2024/04/FY-24-26-Roadmap-36x36.jpg",
            "https://4js.com/wp-content/uploads/2018/04/Genero-enterprise_maintenance_activity-36x36.jpg",
            "https://4js.com/wp-content/uploads/2017/03/Genero-st_GA-36x36.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-05-21T07:39:14+00:00",
        "summary": "",
        "meta_description": "Genero Business is inspired by IBM's Informix 4GL, providing a low-code, no-code development environment for the rapid creation of cross-platform and mission-critical business applications. Informix 4GL applications can be recompiled with Genero BDL",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "Genero software development platform low-code no-code",
        "canonical_link": "https://4js.com/support/ibm-i4gl-to-genero/",
        "text": "Your modernization : I-4GL/D-4GL to Genero\n\nExploit Cross Platform Widget Sets to the Full\n\nGenero introduces a new way to render screen forms by representing them logically as an XML tree. This method enables the logical abstraction of the user interface from the physical implementation of the client technology. As a result, applications may execute across multiple client technologies and fully exploit the local widget set, whether it be a Windows, Linux, iMac or smartphone platform, using native desktop or web clients.\n\nIBM Informix 4GL compatible\n\nAll of the language key words are the same and in many cases a simple recompilation of your I-4GL source code with Genero will still work. But the result will lack panache. To unleash Genero’s power, form definition files and some parts of the code can and should be revisited.\n\nImprove the ergonomics, reduce code length\n\nTo enable cross platform support, FORM file layouts will need to be modified. I-4GL FORMs are still supported, but they have limited graphic capabilities. Start with the most commonly used data entry forms first. Less used FORMs can be compiled ‘as is’ to save time.\n\nIn I-4GL, application presentation forms part of the business logic. Genero on the other hand, separates business logic from the presentation layer with its XML architecture. As you review the design and ergonomics of your application, you see the opportunities to significantly reduce code length and simplify forms.\n\nThe result will be tighter more reliable code that executes faster than ever before.\n\nIBM Informix database support\n\nThrough Genero, your application can connect to very early versions of the Informix database through to the very latest. Check with technical support to see if your version is supported.\n\nLanguage extension with ‘C’ libraries\n\nIf you have extended I-4GL with custom ‘C’ libraries, Genero supports that too. The mechanism to integrate ‘C’ libraries differs from that used with I-4GL however. Custom ‘C’ libraries will need to be recompiled and linked as shared libraries to the Genero runtime system (Dynamic Virtual Machine).\n\nNote also that ‘C’ functions that interact with the text terminal, for example via libcurses, will need to be rewritten in BDL.\n\nGenerally speaking, using ‘C’ functions in an application impairs its portability and we recommend rewriting as much of this as possible in BDL. Additionally, Genero introduces many new built-in utilities that can be used instead. For example, early versions of I-4GL did not include external file management commands. To work around this shortcoming, ‘C’ functions had to be used and most of the time, are still used. BDL now includes channel commands that can be used to read, write or append data from/to external files.\n\nIn summary, ‘C’ functions can be maintained for the first step but you should seriously consider rewriting them as BDL functions to keep your application as portable as possible.\n\nGenero documentation\n\nGenero documentation will be very helpful during the installation of the product and during the migration phase. The documentation includes also a list of new features, which may help you in modifying your application."
    }
}