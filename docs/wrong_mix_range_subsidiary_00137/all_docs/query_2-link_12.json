{
    "id": "wrong_mix_range_subsidiary_00137_2",
    "rank": 12,
    "data": {
        "url": "https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk",
        "read_more_link": "",
        "language": "en",
        "title": "Differences between Oracle JDK and OpenJDK",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/enNdg.jpg?s=64",
            "https://www.gravatar.com/avatar/bf8ea1db8b578e7fab08e9a787acb911?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0ca4c6bc08e59c34de7fc39e09de8dbe?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f516c2bdc196689bb2a9e65be876b8d3?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/311548701799ba8f9ad05554d3ad1795?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/2969bc1f725d2052af3c6cd95699769e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/mmVJs.png",
            "https://i.sstatic.net/iBmkk.png?s=64",
            "https://i.sstatic.net/z6QQ5.jpg?s=64",
            "https://www.gravatar.com/avatar/f1b897b74e66c8060dbd47f0f678b51c?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/fd6bd9736f57929ea252d71570cdf05a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/E8aHV.jpg?s=64",
            "https://i.sstatic.net/nLJUc.jpg",
            "https://lh5.googleusercontent.com/-Ox4mfYesxlg/AAAAAAAAAAI/AAAAAAAAAA0/2c0OMTmAbes/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/575f9fca1e268aaab33aee1fb8946147?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ffeccc0bf6020a4c7cfb2f014e02de35?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/b7853fb2bdc0b5958a28da6984178c82?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d605ab906ab94367aef8db39bef0e36e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/2Af4l.jpg?s=64",
            "https://lh3.googleusercontent.com/a-/AOh14GgbQc688KcKAPuAwNBAru3cUsxN0ORTNbBXK8pC=k-s64",
            "https://stackoverflow.com/posts/22358071/ivc/1758?prg=2fb49bc6-42ff-4d81-9a9a-d08e2939d19f"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-03-12T16:36:32",
        "summary": "",
        "meta_description": "NOTE:  This question is from 2014.  As of Java 11 OpenJDK and Oracle\n  JDK are converging.\r\nAre there any crucial differences between Oracle and OpenJDK?\n\nFor example, are the garbage collection and",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk",
        "text": "Both OpenJDK and Oracle JDK are created and maintained currently by Oracle only.\n\nOpenJDK and Oracle JDK are implementations of the same Java specification passed the TCK (Java Technology Certification Kit).\n\nMost of the vendors of JDK are written on top of OpenJDK by doing a few tweaks to [mostly to replace licensed proprietary parts / replace with more high-performance items that only work on specific OS] components without breaking the TCK compatibility.\n\nMany vendors implemented the Java specification and got TCK passed. For example, IBM J9, Azul Zulu, Azul Zing, and Oracle JDK.\n\nAlmost every existing JDK is derived from OpenJDK.\n\nAs suggested by many, licensing is a change between JDKs.\n\nStarting with JDK 11 accessing the long time support Oracle JDK/Java SE will now require a commercial license. You should now pay attention to which JDK you're installing as Oracle JDK without subscription could stop working. source\n\nRef: List of Java virtual machines\n\nThe Oracle and OpenJDK JVMs are the same and have the same GC features (as of the latest versions 10+). Prior to Oracle managing the OpenJDK JVM there were concrete differences that made that old Openjdk JVM almost unusable in many environments. The JVMs are now the same.\n\nThe JDKs which include the JVM as part of the Kit, differ by licensing, release and maintenance schedule, and the software libraries included in the JDK. Crucial differences to me also mean things that would make code not run if not present. Not only licensing.\n\ndiff --brief -r openjdk oraclejdk\n\nCrucially the following files are missing in addition to a bunch of others on the linux JDK (So if you 'claimed' that code didn't work on OpenJDK and did so on OracleJDK while you were using javafx then you were correct):\n\nOnly in jdk-10.0.1/bin: javapackager Only in jdk-10.0.1/bin: javaws Only in jdk-10.0.1/bin: jcontrol Only in jdk-10.0.1/bin: jmc Only in jdk-10.0.1/bin: jweblauncher Only in jdk-10.0.1/lib: ant-javafx.jar Only in jdk-10.0.1/lib: deploy Only in jdk-10.0.1/lib: deploy.jar Only in jdk-10.0.1/lib: desktop Only in jdk-10.0.1/lib: fontconfig.bfc Only in jdk-10.0.1/lib: fontconfig.properties.src Only in jdk-10.0.1/lib: fontconfig.RedHat.6.bfc Only in jdk-10.0.1/lib: fontconfig.RedHat.6.properties.src Only in jdk-10.0.1/lib: fontconfig.SuSE.11.bfc Only in jdk-10.0.1/lib: fontconfig.SuSE.11.properties.src Only in jdk-10.0.1/lib: fonts Only in jdk-10.0.1/lib: javafx.properties Only in jdk-10.0.1/lib: javafx-swt.jar Only in jdk-10.0.1/lib: java.jnlp.jar Only in jdk-10.0.1/lib: javaws.jar Only in jdk-10.0.1/lib: jdk.deploy.jar Only in jdk-10.0.1/lib: jdk.javaws.jar Only in jdk-10.0.1/lib: jdk.plugin.jar Only in jdk-10.0.1/lib: jfr Only in jdk-10.0.1/lib: libavplugin-53.so Only in jdk-10.0.1/lib: libavplugin-54.so Only in jdk-10.0.1/lib: libavplugin-55.so Only in jdk-10.0.1/lib: libavplugin-56.so Only in jdk-10.0.1/lib: libavplugin-57.so Only in jdk-10.0.1/lib: libavplugin-ffmpeg-56.so Only in jdk-10.0.1/lib: libavplugin-ffmpeg-57.so Only in jdk-10.0.1/lib: libbci.so Only in jdk-10.0.1/lib: libcmm.so Only in jdk-10.0.1/lib: libdecora_sse.so Only in jdk-10.0.1/lib: libdeploy.so Only in jdk-10.0.1/lib: libfxplugins.so Only in jdk-10.0.1/lib: libglassgtk2.so Only in jdk-10.0.1/lib: libglassgtk3.so Only in jdk-10.0.1/lib: libglass.so Only in jdk-10.0.1/lib: libgstreamer-lite.so Only in jdk-10.0.1/lib: libjavafx_font_freetype.so Only in jdk-10.0.1/lib: libjavafx_font_pango.so Only in jdk-10.0.1/lib: libjavafx_font.so Only in jdk-10.0.1/lib: libjavafx_iio.so Only in jdk-10.0.1/lib: libjfxmedia.so Only in jdk-10.0.1/lib: libjfxwebkit.so Only in jdk-10.0.1/lib: libnpjp2.so Only in jdk-10.0.1/lib: libprism_common.so Only in jdk-10.0.1/lib: libprism_es2.so Only in jdk-10.0.1/lib: libprism_sw.so Only in jdk-10.0.1/lib: librm.so Only in jdk-10.0.1/lib: libt2k.so Only in jdk-10.0.1/lib: locale Only in jdk-10.0.1/lib: missioncontrol Only in jdk-10.0.1/lib: oblique-fonts Only in jdk-10.0.1/lib: plugin.jar Only in jdk-10.0.1/lib: plugin-legacy.jar Only in jdk-10.0.1/lib/security: blacklist Only in jdk-10.0.1/lib/security: public_suffix_list.dat Only in jdk-10.0.1/lib/security: trusted.libraries Only in openjdk-10.0.1: man`\n\nAccording to the oracle blog, Oracle JDK Releases for Java 11 and Later\n\nStarting with Java 11, Oracle will provide JDK releases under the open source GNU General Public License v2, with the Classpath Exception (GPLv2+CPE), and under a commercial license for those using the Oracle JDK as part of an Oracle product or service, or who do not wish to use open source software. This combination of using an open source license and a commercial license replaces the historical “BCL” license, which had a combination of free and paid commercial terms.\n\nDifferent builds will be provided for each license, but these builds are functionally identical aside from some cosmetic and packaging differences, described in detail below.\n\nFrom the BCL to the GPL\n\nThe Binary Code License for Oracle Java SE technologies (“BCL”) has been the primary license for Oracle Java SE technologies for well over a decade. The BCL permits use without license fees under certain conditions. To simplify things going forward, Oracle started providing open source licensed OpenJDK builds as of Java 9, using the same license model as the Linux platform. If you are used to getting Oracle Java SE binaries for free, you can simply continue doing so with Oracle’s OpenJDK builds available at jdk.java.net. If you are used to getting Oracle Java SE binaries as part of a commercial product or service from Oracle, then you can continue to get Oracle JDK releases through My Oracle Support (MOS), and other locations.\n\nFunctionally identical and interchangeable...\n\nOracle’s BCL-licensed JDK historically contained “commercial features” that were not available in OpenJDK builds. As promised, however, over the past year Oracle has contributed these features to the OpenJDK Community, including:\n\nJava Flight Recorder,\n\nJava Mission Control,\n\nApplication Class-Data Sharing, and\n\nZGC.\n\nFrom Java 11 forward, therefore, Oracle JDK builds and OpenJDK builds will be essentially identical.\n\n...yet with some cosmetic and packaging differences\n\nThere do remain a small number of differences, some intentional and cosmetic, and some simply because more time to discuss with OpenJDK contributors is warranted.\n\nOracle JDK 11 emits a warning when using the -XX:+UnlockCommercialFeatures option, whereas in OpenJDK builds this option results in an error. This option was never part of OpenJDK and it would not make sense to add it now, since there are no commercial features in OpenJDK. This difference remains in order to make it easier for users of Oracle JDK 10 and earlier releases to migrate to Oracle JDK 11 and later.\n\nOracle JDK 11 can be configured to provide usage log data to the “Advanced Management Console” tool, which is a separate commercial Oracle product. We will work with other OpenJDK contributors to discuss how such usage data may be useful in OpenJDK in future releases, if at all. This difference remains primarily to provide a consistent experience to Oracle customers until such decisions are made.\n\nThe javac --release command behaves differently for the Java 9 and Java 10 targets, since in those releases the Oracle JDK contained some additional modules that were not part of corresponding OpenJDK releases:\n\njavafx.base\n\njavafx.controls\n\njavafx.fxml\n\njavafx.graphics\n\njavafx.media\n\njavafx.web\n\njava.jnlp\n\njdk.jfr\n\njdk.management.cmm\n\njdk.management.jfr\n\njdk.management.resource\n\njdk.packager.services\n\njdk.snmp\n\nThis difference remains in order to provide a consistent experience for specific kinds of legacy use. These modules are either now available separately as part of OpenJFX, are now in both OpenJDK and the Oracle JDK because they were commercial features which Oracle contributed to OpenJDK (e.g., Flight Recorder), or were removed from Oracle JDK 11 (e.g., JNLP).\n\nThe output of the java --version and java -fullversion commands will distinguish Oracle JDK builds from OpenJDK builds, so that support teams can diagnose any issues that may exist. Specifically, running java --version with an Oracle JDK 11 build results in:\n\njava 11 2018-09-25\n\nJava(TM) SE Runtime Environment 18.9 (build 11+28)\n\nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11+28, mixed mode)\n\nAnd for an OpenJDK 11 build:\n\nopenjdk version \"11\" 2018-09-25\n\nOpenJDK Runtime Environment 18.9 (build 11+28)\n\nOpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)\n\nThe Oracle JDK has always required third party cryptographic providers to be signed by a known certificate. The cryptography framework in OpenJDK has an open cryptographic interface, meaning it does not restrict which providers can be used. Oracle JDK 11 will continue to require a valid signature, and Oracle OpenJDK builds will continue to allow the use of either a valid signature or unsigned third party crypto provider.\n\nOracle JDK 11 will continue to include installers, branding and JRE packaging for an experience consistent with legacy desktop uses. Oracle OpenJDK builds are currently available as zip and tar.gz files, while alternative distribution formats are being considered."
    }
}