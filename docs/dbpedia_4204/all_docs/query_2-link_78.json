{
    "id": "dbpedia_4204_2",
    "rank": 78,
    "data": {
        "url": "https://stackoverflow.com/questions/20550598/django-rest-framework-could-not-resolve-url-for-hyperlinked-relationship-using",
        "read_more_link": "",
        "language": "en",
        "title": "Django Rest Framework - Could not resolve URL for hyperlinked relationship using view name \"user-detail\"",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/bea547ac8925422ccfcf611fafeb0e35?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/48916f8a56d36f9bca3252c7931a7398?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/dded210cf1b572f6f8208695b2fc6eb3?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/82M1K.jpg?s=64",
            "https://www.gravatar.com/avatar/13c63eed8f0cbebd6da7f1f2d61edbd0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/40fadfeeb5d98b7f7f27478d0d9651b0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/b3fca0712edb17faca9791caacfd56f6?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/3a8929f9eb35214eac15d8d1c33acfe6?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/kdH2k.jpg?s=64",
            "https://www.gravatar.com/avatar/987b01dfe3a745a3e1956fef3254a15a?s=64&d=identicon&r=PG",
            "https://lh6.googleusercontent.com/-aIcY1a2kESI/AAAAAAAAAAI/AAAAAAAAT5A/4OQG-UJ6-98/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/151141223bc57f49364d652b119edd4f?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/09ada3e291434abf75466ee741c839a7?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/6db35f016a4cb5b9f88810eebc746754?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/932ad32f58e0992e8e87e5e7de106b2c?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/46b68c29f5034dc0b1b4d4426e1e57b0?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/71bf0f533009c069d44abde4c927c638?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/hamL0.png?s=64",
            "https://i.sstatic.net/rFHR0.jpg?s=64",
            "https://www.gravatar.com/avatar/bac578d2da1b5914ee2b9fec50afe2d3?s=64&d=identicon&r=PG",
            "https://graph.facebook.com/1406389318/picture?type=large",
            "https://i.sstatic.net/dDsHs.jpg?s=64",
            "https://www.gravatar.com/avatar/eff2cdaa8474520ed29ebc38031fab87?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/3PoRJ.jpg?s=64",
            "https://i.sstatic.net/E1fzl.png?s=64",
            "https://i.sstatic.net/kv1x6.jpg?s=64",
            "https://www.gravatar.com/avatar/9e7dc543951ca63dbbd27b1578259d7c?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/20550598/ivc/a19f?prg=7b6b849e-87d9-4f3d-9d57-585247b537bc"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-12-12T17:49:04",
        "summary": "",
        "meta_description": "I am building a project in Django Rest Framework where users can login to view their wine cellar.\nMy ModelViewSets were working just fine and all of a sudden I get this frustrating error:\r\n  Could ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/20550598/django-rest-framework-could-not-resolve-url-for-hyperlinked-relationship-using",
        "text": "I came across this error too and solved it as follows:\n\nThe reason is I forgot giving \"**-detail\" (view_name, e.g.: user-detail) a namespace. So, Django Rest Framework could not find that view.\n\nThere is one app in my project, suppose that my project name is myproject, and the app name is myapp.\n\nThere is two urls.py file, one is myproject/urls.py and the other is myapp/urls.py. I give the app a namespace in myproject/urls.py, just like:\n\nurl(r'', include(myapp.urls, namespace=\"myapp\")),\n\nI registered the rest framework routers in myapp/urls.py, and then got this error.\n\nMy solution was to provide url with namespace explicitly:\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField(view_name=\"myapp:user-detail\") class Meta: model = User fields = ('url', 'username')\n\nAnd it solved my problem.\n\nAnother nasty mistake that causes this error is having the base_name unnecessarily defined in your urls.py. For example:\n\nrouter.register(r'{pathname}', views.{ViewName}ViewSet, base_name='pathname')\n\nThis will cause the error noted above. Get that base_name outta there and get back to a working API. The code below would fix the error. Hooray!\n\nrouter.register(r'{pathname}', views.{ViewName}ViewSet)\n\nHowever, you probably didn't just arbitrarily add the base_name, you might have done it because you defined a custom def get_queryset() for the View and so Django mandates that you add the base_name. In this case you'll need to explicitly define the 'url' as a HyperlinkedIdentityField for the serializer in question. Notice we are defining this HyperlinkedIdentityField ON THE SERIALIZER of the view that is throwing the error. If my error were \"Could not resolve URL for hyperlinked relationship using view name \"study-detail\". You may have failed to include the related model in your API, or incorrectly configured the lookup_field attribute on this field.\" I could fix this with the following code.\n\nMy ModelViewSet (the custom get_queryset is why I had to add the base_name to the router.register() in the first place):\n\nclass StudyViewSet(viewsets.ModelViewSet): serializer_class = StudySerializer '''custom get_queryset''' def get_queryset(self): queryset = Study.objects.all() return queryset\n\nMy router registration for this ModelViewSet in urls.py:\n\nrouter.register(r'studies', views.StudyViewSet, base_name='studies')\n\nAND HERE'S WHERE THE MONEY IS! Then I could solve it like so:\n\nclass StudySerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField(view_name=\"studies-detail\") class Meta: model = Study fields = ('url', 'name', 'active', 'created', 'time_zone', 'user', 'surveys')\n\nYep. You have to explicitly define this HyperlinkedIdentityField on itself for it to work. And you need to make sure that the view_name defined on the HyperlinkedIdentityField is the same as you defined on the base_name in urls.py with a '-detail' added after it.\n\nTL;DR: It may be as simple as removing a trailing 's' from the router basename. No need to define a url field in your serializer.\n\nFor the original poster, the issue was resolved simply by registering the UserViewSet, as suggested in the top answer.\n\nHowever, if anyone else has this issue even with all ViewSets registered, I think I've figured out what's going wrong, and I've found a solution that's cleaner than a lot of the others here.\n\nIn my case, I encountered this issue after trying to create a ViewSet with a custom get_queryset() function. When I replaced the ViewSet's queryset field with a custom get_queryset() function, I was then hit with this error:\n\nAssertionError: `basename` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute.\n\nSo, of course, I went to urls.py and modified my registration to include a basename as such:\n\nrouter.register(r'messages', MessageViewSet, basename='messages')\n\nBut then I was hit with this error (as we see in the original post):\n\nCould not resolve URL for hyperlinked relationship using view name \"message-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n\nAfter reading the DRF docs on routers, I learned that the router automatically generates two url patterns for you, which have names:\n\n'basename-list'\n\n'basename-detail'\n\nBecause I set my basename='messages' (note the 's' at the end), my url patterns were named:\n\n'messages-list'\n\n'messages-detail'\n\nSince DRF was looking a url pattern named 'message-detail' (note here the lack of 's'), I realized that I could resolve this simply by removing the trailing 's' from my basename as such:\n\nrouter.register(r'messages', MessageViewSet, basename='message')\n\nMy final serializer and ViewSet implementations were as simple as this!\n\nclass MessageSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Message fields = ['url', 'message', 'timestamp', 'sender', ...] class MessageViewSet(viewsets.ModelViewSet): serializer_class = MessageSerializer def get_queryset(self): return Message.objects.filter(...)\n\nI was stuck in this error for almost 2 hours:\n\nImproperlyConfigured at /api_users/users/1/ Could not resolve URL for hyperlinked relationship using view name \"users-detail\". You may have failed to include the related model in your API, or incorrectly configured the lookup_field attribute on this field.\n\nWhen I finally get the solution but I don't understand why, so my code is:\n\n#models.py class Users(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=50, blank=False, null=False) email = models.EmailField(null=False, blank=False) class Meta: verbose_name = \"Usuario\" verbose_name_plural = \"Usuarios\" def __str__(self): return str(self.name) #serializers.py class UserSerializer(serializers.HyperlinkedModelSerializer): class Meta: model = Users fields = ( 'id', 'url', 'name', 'email', 'description', 'active', 'age', 'some_date', 'timestamp', ) #views.py class UserViewSet(viewsets.ModelViewSet): queryset = Users.objects.all() serializer_class = UserSerializer #urls_api.py router = routers.DefaultRouter() router.register(r'users',UserViewSet, base_name='users') urlpatterns = [ url(r'^', include(router.urls)), ]\n\nbut in my main URLs, it was:\n\nurlpatterns = [ url(r'^admin/', admin.site.urls), #api users url(r'^api_users/', include('usersApi.users_urls', namespace='api')), ]\n\nSo to finally I resolve the problem erasing namespace:\n\nurlpatterns = [ url(r'^admin/', admin.site.urls), #api users url(r'^api_users/', include('usersApi.users_urls')), ]\n\nAnd I finally resolve my problem, so any one can let me know why, bests.\n\nA bit late but in Django 3 and above, include doesn't support namespace without specifying the app_name. Checking the source code for include, we see that the condition\n\nif namespaces and not app_name: ....\n\nis checked. And still from the source code, app_name is gotten like;\n\nurlconf_module, app_name = arg\n\nwhere arg is the first argument of the include. This tells us that, our include should be defined as\n\ninclude((app.urls, app_name), namespace='...')\n\nExample\n\nSay you have a project myproject and an app myapp. Then you want to establish an address. You should use a viewset and define a router as below\n\nmyapp.urls\n\nrouter.register('address', exampleviewset, basename='address')\n\nmyproject.urls\n\npath('api/v1/', include(('myapp.urls', 'myapp'), namespace='myapp')),\n\nserializers.py\n\nclass AddressSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField(view_name=\"myapp:address-detail\") class Meta: model = Address fields = ('url',...)\n\nApparently, we can't use fields='__all__'. We must include url explicitly and list the remaining fields we need.\n\nI ran into the same error while I was following the DRF quickstart guide http://www.django-rest-framework.org/tutorial/quickstart/ and then attempting to browse to /users. I've done this setup many times before without problems.\n\nMy solution was not in the code but in replacing the database.\n\nThe difference between this install and the others before was when I created the local database.\n\nThis time I ran my\n\n./manage.py migrate ./manage.py createsuperuser\n\nimmediately after running\n\nvirtualenv venv . venv/bin/activate pip install django pip install djangorestframework\n\nInstead of the exact order listed in the guide.\n\nI suspected something wasn't properly created in the DB. I didn't care about my dev db so I deleted it and ran the ./manage.py migrate command once more, created a super user, browsed to /users and the error was gone.\n\nSomething was problematic with the order of operations in which I configured DRF and the db.\n\nIf you are using sqlite and are able to test changing to a fresh DB then it's worth an attempt before you go dissecting all of your code.\n\nFrom DRF Docs:\n\ndrf docs note source\n\nNote: If using namespacing with hyperlinked serializers you'll also need to ensure that any view_name parameters on the serializers correctly reflect the namespace. In the examples above you'd need to include a parameter such as view_name='app_name:user-detail' for serializer fields hyperlinked to the user detail view.\n\nThe automatic view_name generation uses a pattern like %(model_name)-detail. Unless your models names actually clash you may be better off not namespacing your Django REST Framework views when using hyperlinked serializers.\n\nSolution\n\nexample of setting view_name\n\nfrom rest_framework import serializers from myapp.models import Post from django.contrib.auth.models import User class PostSerializer(serializers.HyperlinkedModelSerializer): url = serializers.HyperlinkedIdentityField(view_name=\"api:post-detail\") author = serializers.HyperlinkedRelatedField(view_name=\"api:user-detail\", read_only=True) viewers = serializers.HyperlinkedRelatedField(view_name=\"api:user-detail\", read_only=True, many=True) class Meta: model = Post fields = ('id', 'title', 'url', 'author', 'viewers') class UserSerializer(serializers.ModelSerializer): class Meta: model = User fields = \"__all__\""
    }
}