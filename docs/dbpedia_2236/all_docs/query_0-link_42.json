{
    "id": "dbpedia_2236_0",
    "rank": 42,
    "data": {
        "url": "https://56-deploy-doxygen-documentation--dune-copasi.netlify.app/docs/install_use/",
        "read_more_link": "",
        "language": "en",
        "title": "Installation and Usage",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://56-deploy-doxygen-documentation--dune-copasi.netlify.app/img/logo.svg",
            "https://56-deploy-doxygen-documentation--dune-copasi.netlify.app/img/logo.svg",
            "https://56-deploy-doxygen-documentation--dune-copasi.netlify.app/img/logo.svg",
            "https://56-deploy-doxygen-documentation--dune-copasi.netlify.app/img/logo.svg",
            "https://56-deploy-doxygen-documentation--dune-copasi.netlify.app/assets/images/spatial-model-editor-e8ce255f5d48c17da41b6a804a4f54b3.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Usage",
        "meta_lang": "en",
        "meta_favicon": "/img/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://dune-copasi.netlify.app//docs/install_use",
        "text": "Usage#\n\nThere are three different ways to use dune-copasi:\n\nGUI: Graphical User Interface\n\nINI: Configuration File\n\nAPI: Application Programming Interface\n\nGraphical User Interface#\n\nThe Spatial Model Editor is a user friendly GUI editor to create and edit 2D spatial Systems Biology Markup Language (SBML) models of bio-chemical reactions. Additionally, it can simulate them with dune-copasi. A big adventage of this package is that is tailored for biologists and is availalbe with just a pair of clicks on the major plataforms. Find more information here!\n\nConfiguration File#\n\nIn this form, dune-copasi provides one executable for single compartment systems (dune-copasi-sd) and another one for multiple compartment systems (dune-copasi-md). Both executables expect one INI configuration file which shall contain all the information to perform the simulation.\n\nFind more information about available configurations on the Parameter Tree documentation. This form may be installed in one of the following procedures:\n\nDocker Runner\n\nDebian/Ubuntu and macOS Packages\n\nManual Installation\n\nApplication Programming Interface#\n\nThe dune-copasi C++ objects may be consumed by other programs in order to generate custom simulation rules, to couple intermediate steps with other tools, or to implement another GUI, etc. In such a case, dune-copasi must be available in development mode and the downstream library is expected to consume the library by using the CMake build system and use the C++ objects in code. This form is avaliable on:\n\nManual Installation\n\nDocker Build\n\nInstallation#\n\nGraphical User Interface#\n\nTo install the Spatial Model Editor, please refer to its installation instructions:\n\nhttps://spatial-model-editor.readthedocs.io/en/stable/quickstart/get-started.html#installation\n\nDocker Runner#\n\nThe easiest form to use our executables for INI usage, is by using a Docker Container. There, the software is boundled such that no installation other than docker is required.\n\nInstall Docker#\n\nFirst, get and install Docker following the docker installation instructions.\n\nPrepare a working directory#\n\nTo be able to easily share data between your operating system and the docker container, prepare a working directory with read/write rights to other users (e.g. a folder named dune-copasi):\n\nThis working directory will be accessible to your text editor, paraview as well as to the dune-copasi-md executable inside the docker container. Thus, move or create your configuration files into it at will.\n\nRun the program#\n\nHere, you may pull and run the container from our GitLab registry. To do so, call the docker container with a configuration file config.ini using one of the following commands on the terminal:\n\nThe results of those computations will be written on current directory as mentioned above. For more information about running docker images, visit the docker run documentation.\n\nDebian/Ubuntu and macOS Packages#\n\nFor Debian/Ubuntu/macOS users that want to make use of dune-copasi with INI usage, installation is as simple as:\n\nOnce installed, the programs dune-copasi-sd and dune-copasi-md will be available on the command line:\n\nTo remove the package call the following command on the terminal\n\nDocker Build#\n\nAdvanced users, who may want to make modifications the dune-copasi code but do not to install all the dependencies may opt for a docker build. In this case, you must download the dune-copasi source code, modify it, and build a new local docker image:\n\nThis will build all dune dependencies as well as the new modified version of dune-copasi. Then, follow the Docker runner guide to run the new image with tag dune-copasi.\n\nManual Installation#\n\nFinally, to locally build and install dune-copasi we requires to obtain, compile and install a variety of dependencies.\n\nOperating Systems and Compilers#\n\nThe manual installation is known to compile and run under Debian/Ubuntu, macOS, and Windows. In all three cases with Clang and GCC based compilers. It is however, known to not be compatible with Microsoft Visual Studio.\n\nDependencies#\n\nThe following list of software is required to install and use dune-copasi:\n\nSoftwareVersion/BranchCMake>= 3.1C++ compiler>= C++17libTIFF>= 3.6.1muParser>= 2.2.5dune-common== 2.7dune-geometry== 2.7dune-grid== 2.7dune-uggrid== 2.7dune-istl== 2.7dune-localfunctions== 2.7dune-functions== 2.7dune-logging== 2.7dune-multidomaingrid== 2.7COPASI/dune-typetreesupport/dune-copasi-v1.1.0COPASI/dune-pdelabsupport/dune-copasi-v1.1.0\n\nDune Options File#\n\nAn important part of the installation procedure is to tune the build system flags to accomodate the build to your system. This is done via the dune options file. In essence, is just a bash script that sets different flags (mainly the flags for CMake CMAKE_FLAGS). While the dune project usually leaves this open for the user, we provide a dune-copasi.opts file with sensible default options for the main operating systems.\n\nThis file can be called to show the current configuration:\n\nThere are two form to add flags to the dune-copasi.opts file:\n\nSetting enviromental variables starging with CMAKE_ and DUNE_. These variables will be automatically included into the list of cmake flags.\n\nexportCMAKE_INSTALL_PREFIX=\"/path/to/install/prefix/\"\n\nexportCMAKE_GENERATOR=\"'Ninja'\"\n\n./dune-copasi.opts\n\nAppending new flags into the CMAKE_FLAGS variable in the dune-copasi.opts file (care must be taken to scape quotes):\n\necho'CMAKE_FLAGS+=\" -DCMAKE_INSTALL_PREFIX=/path/to/install/prefix/\"'>> dune-copasi.opts\n\necho\"CMAKE_FLAGS+=\\\" -DCMAKE_GENERATOR='Ninja'\\\"\">> dune-copasi.opts\n\n./dune-copasi.opts\n\nFor more information about the possible options and the dune options file, check out the dune installation documentation and the build system docuentation.\n\nInstallation#\n\nThe first four dependencies can be obtained by your prefered package manager in unix-like operating systems. e.g.\n\nThe required DUNE modules (including dune-copasi) can be obtained via internet by using git. For smooth installation, is better place all the dune modules within the same directory.\n\nThen, build and install the DUNE modules with the dunecontrol script:\n\nFor further information on dune module installation process, please check out the dune-project web page.\n\nRun the program#\n\nOnce installed, the programs dune-copasi-sd and dune-copasi-md will be available on the command line:\n\nImporting CMake targets#\n\nIf you additionaly want to use the API for development, you must find and consume the CMake targets from dune-copasi in your project as follows:"
    }
}