{
    "id": "dbpedia_2236_0",
    "rank": 15,
    "data": {
        "url": "https://github.com/copasi/copasi-dependencies",
        "read_more_link": "",
        "language": "en",
        "title": "dependencies: Collection of OpenSource libraries to simplify COPASI build",
        "top_image": "https://opengraph.githubassets.com/873804179321ed5f42d4d27a4cdde8519c25560a7ab628022232f07ac663276f/copasi/copasi-dependencies",
        "meta_img": "https://opengraph.githubassets.com/873804179321ed5f42d4d27a4cdde8519c25560a7ab628022232f07ac663276f/copasi/copasi-dependencies",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Collection of OpenSource libraries to simplify COPASI build - copasi/copasi-dependencies",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/copasi/copasi-dependencies",
        "text": "COPASI Dependencies\n\nThis project contains a number of open source libraries, that make the building of COPASI with CMAKE as easy as to configure with:\n\ncmake -DCOPASI_DEPENDENCY_DIR=<dir> <copasi source dir> make make install\n\nBuilding the dependencies\n\nWe are in the process of updating the documentation. The older instructions are still available.\n\nTo build the COPASI dependencies we recommend to use the cmake build system from the main directory. This basically includes the required dependency libraries from the chosen configuration as external projects.\n\nsupported cmake generators\n\nCurrently not all cmake generators support external subprojects (building from the visual studio IDE is currently known to be not working) so we recommend to use either:\n\nNinja\n\nUnix Makefiles\n\nNMake Makefiles JOM\n\nNMake Makefiles\n\noverview of the build options\n\nIf you just want to build the dependencies for the language bindings or the command line version for COPASI, you can simply configure using the BUILD_UI_DEPS=OFF option. Then a build of those dependencies is done simply with:\n\nmkdir build cd build cmake -G Ninja -DBUILD_UI_DEPS=OFF -DCMAKE_INSTALL_PREFIX=../bin .. ninja\n\nwhere:\n\nbuild: is the name of the build folder in which all of the copasi-dependencies will be built.\n\n-G Ninja: specifies that the ninja generator should be used\n\n-DCMAKE_INSTALL_PREFIX=../bin: this is also the path that you later specify as -DCOPASI_DEPENDENCY_DIR=<dir> when configuring COPASI\n\n-DBUILD_UI_DEPS=OFF: that no UI dependencies should be built\n\n..: indicates that the root of the copasi-dependencies directory is one folder up\n\nNote: on linux system crossguid has a dependency on the uuid library, as such you will have to install it manually first. This can be done using your package manager:\n\napt-get install uuid-dev\n\nor\n\nyum install uuid-devel\n\nor\n\npacman -S libutil-linux-devel\n\nor directly from the source archives.\n\nUI dependency libraries\n\nThe COPASI user interface uses Qt. We recommend to use Qt5, with the additional Qt5DataVisualization module installed.\n\nTo specify which Qt should be used, use the\n\nSELECT_QT: option we recommend it to be set to Qt5, other valid values are Qt4 and Any\n\nTo ensure that Qt can be found you will need to specify the Qt5_DIR variable to the full path of the lib/cmake/Qt5 path of your Qt5 installation). (Or for Qt4 the QT_DIR variable to the full path of the root of your Qt4 installation).\n\nExamples:\n\nQt5:\n\n-DSELECT_QT=Qt5 -DQt5_DIR=C:/Qt/Qt5.14.2/5.14.2/msvc2017/lib/cmake/Qt5\n\nQt4:\n\n-DSELECT_QT=Qt4 -DQTDIR=C:\\Qt\\qt-everywhere-opensource-src-4.8.6_vs14\n\nto summarize to build all dependencies (including UI dependencies for Qt5) you would use commands like:\n\nmkdir build cd build cmake -G Ninja -DSELECT_QT=Qt5 -DQt5_DIR=C:/Qt/Qt5.11.1/5.11.1/msvc2015/lib/cmake/Qt5 -DCMAKE_INSTALL_PREFIX=../bin .. ninja\n\nwhere:\n\nbuild: is the name of the build folder in which all of the copasi-dependencies will be built.\n\n-G Ninja: specifies that the ninja generator should be used\n\n-DSELECT_QT=Qt5: that Qt5 from the specified Qt5_DIR should be used\n\n-DCMAKE_INSTALL_PREFIX=../bin: this is also the path that you later specify as -DCOPASI_DEPENDENCY_DIR=<dir> when configuring COPASI\n\n..: indicates that the root of the copasi-dependencies directory is one folder up\n\nall options:\n\nThe complete list of all options is:\n\nBUILD_UI_DEPS: specifies whether the UI dependencies are preselected. (defaults to ON)\n\nBUILD_expat: specifies whether or not expat should be built (defaults to ON)\n\nBUILD_raptor: specifies whether raptor should be built (defaults to ON, forces expat to be built)\n\nBUILD_crossguid: specifies whether raptor should be built (defaults to ON)\n\nBUILD_clapack: specifies whether clapack should be built (defaults to ON)\n\nBUILD_libSBML: specifies whether libSBML should be built (defaults to ON, forces expat to be built)\n\nBUILD_libnuml: specifies whether libNUML should be built (defaults to ON, forces libSBML to be built)\n\nBUILD_libSEDML: specifies whether libSEDML should be built (defaults to ON, forces libnuml to be built)\n\nBUILD_zlib: specifies whether zlib should be built (defaults to ON)\n\nBUILD_zipper: specifies whether zipper should be built (defaults to ON, forces zlib to be built)\n\nBUILD_libCombine: specifies whether libCombine should be built (defaults to ON, forces zipper and libSBML to be built)\n\nBUILD_SBW: specifies whether SBW should be built (defaults to BUILD_UI_DEPS)\n\nBUILD_mml: specifies whether MML should be built (defaults to BUILD_UI_DEPS)\n\nBUILD_qwt6: specifies whether qwt-6 should be built (defaults to BUILD_UI_DEPS)\n\nBUILD_qwt: specifies whether qwt should be built (defaults to BUILD_UI_DEPS)\n\nBUILD_qwtplot3d: specifies whether qwtplot3d should be built (defaults to BUILD_UI_DEPS)\n\nBUILD_archive: specifies whether an archive of the binaries should be created (defaults to ON)\n\nWITH_STATIC_RUNTIME: a specific option on windows to ensure that the static MSVC runtime is used rather than the dynamic one. (defaults to OFF) When using the dynamic runtime, the MSVC redistributable package will have to be installed on the target system.\n\nThe following open source libraries are included in this project:\n\nclapack 3.2.1\n\ncppunit 1.12.1\n\nexpat 2.1.0\n\nqtmmlwidget\n\nQWT 5.2.0 or 6.1.0\n\nQWT 3D plot\n\nlibSBML 5.18.0\n\nlibnuml 1.1.1\n\nlibSEDML 0.4.2\n\nlibCOMBINE 0.2.2\n\nSBW Core\n\nraptor\n\nzipper 0.9.1\n\ncrossguid\n\nJust in case it needs saying, each of the libraries in the src folder are released under their own respective licenses. Otherwise this project (i.e.: the build scripts) are released under the BSD License:\n\nCopyright (c) 2013-2020, Frank T. Bergmann All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    }
}