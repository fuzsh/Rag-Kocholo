{
    "id": "dbpedia_1718_1",
    "rank": 61,
    "data": {
        "url": "https://www.matuzo.at/blog/heres-what-i-didnt-know-about-content/",
        "read_more_link": "",
        "language": "en",
        "title": "Here‚Äôs what I didn‚Äôt know about ‚Äúcontent‚Äù",
        "top_image": "https://res.cloudinary.com/dp3mem7or/image/upload/w_1200/articles/sm_content.jpg?s=213",
        "meta_img": "https://res.cloudinary.com/dp3mem7or/image/upload/w_1200/articles/sm_content.jpg?s=213",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Manuel Matuzoviƒá"
        ],
        "publish_date": "2020-05-26T00:00:00",
        "summary": "",
        "meta_description": "In part 3 of my series I'm trying to find out what I didn‚Äôt know about the `content` property.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Manuel Matuzovic",
        "canonical_link": "https://www.matuzo.at/blog/heres-what-i-didnt-know-about-content",
        "text": "posted on 26.05.2020\n\nThis is part 3 of my series Here‚Äôs what I didn‚Äôt know about‚Ä¶ in which I try to learn new things about CSS. This time I'm trying to find out what I didn‚Äôt know about the content property.\n\nA few weeks ago Stefan published a post on his website called ‚ÄúThe CSS \"content\" property accepts alternative text‚Äù, which blew my mind. He showed that the content property excepts 2 values and not just 1, the actual content and an alternative text.\n\n.new-item::before { /* \"Highlighted item\" and element content is read out */ content: '‚òÖ' / 'Highlighted item'; }\n\nI didn‚Äôt know that and I was wondering if there were more things I didn‚Äôt know about the content property. Since you‚Äôre reading this, I found something, so let‚Äôs see what I was able to add to my ‚ÄúHere‚Äôs what I didn‚Äôt know about‚Ä¶‚Äù series.\n\nHow I‚Äôm using the content attribute.\n\nBefore I started my research, I was using this property primarily for 3 things.\n\nAdding an element to another element using pseudo elements\n\nIf I want to create a simple shape in CSS that is not a rectangle or circle, I use :after and ::before to give myself more options for styling.\n\n<div></div>\n\ndiv { width: 70px; height: 50px; margin-top: 15px; border: 5px solid #123456; border-radius: 5px; position: relative; } div::before { content: ''; position: absolute; left: 0; right: 0; top: -16px; width: 20px; height: 20px; margin: auto; border: solid #123456; border-width: 5px 5px 0 0; border-radius: 5px; transform: rotate(-45deg); background: #fff; }\n\nCheckout example 1 on CodePen.\n\nTo render on screen, the pseudo elements needs the content attribute.\n\nRevealing URLs in print styles sheets\n\nPrinted links are useless if you don‚Äôt know where there are leading. I‚Äôm using a combination of content and the attr() function in print style sheets to display URLs next to their linked text.\n\nMax B√∂ck\n\n@media print { a[href^=\"http://\"]:after, a[href^=\"https://\"]:after { content: ' (' attr(href) ')'; } }\n\nCustom counters\n\nEvery now and then I need custom counters in lists. A combination of content and counter properties usually does the job.\n\nElement 001\n\nElement 002\n\nElement 003\n\n<ol> <li>Element 001</li> <li>Element 002</li> <li>Element 003</li> </ol>\n\nol { list-style-type: none; counter-reset: mylist; } li { counter-increment: mylist; } li::before { content: 'ü§§ ' counter(mylist) ': '; }\n\nCheckout example 2 on CodePen.\n\nHave a look at Here‚Äôs what I didn‚Äôt know about list-style-type for more options to style list items.\n\nNow, let‚Äôs see what else content can do for us. Here‚Äôs what I‚Äôve learned recently:\n\nContent accepts images and gradients\n\nI knew that content accepts the counter and attr functions, but it never came to my mind that it might allow other functions, as well. Whenever I needed an image in a pseudo element, I would use background-image, although content would've worked, too.\n\ndiv::before { content: url('pin.png'); }\n\nCheckout example 3 on CodePen.\n\nIf this works with images, it should work with gradients too, right? Yeah, well, no. Chrome seems to be the only browser that renders pseudo elements with gradient content values.\n\ndiv::before { content: linear-gradient(blue, red); height: 50px; width: 50px; display: block; border: 1px solid red; }\n\nCheckout example 4 on CodePen.\n\nYou can define alt text for content values (‚Ä¶in Chrome)\n\nWhat‚Äôs the point of using content when background-image has better support? The reason Stefan wrote his post, content supports alt text.\n\ndiv::before { content: url('pin.png') / 'You are here.'; }\n\nCheckout example 5 on CodePen.\n\nUnfortunately, this only works in Chrome (tested on macOS 10.15.4, Chrome 81 with VoiceOver). Firefox and Safari don't even render the pseudo element because the value is invalid. Too bad.\n\nEven if this worked in most browsers, I wouldn‚Äôt recommend adding text content to a CSS file. Others working on the project probably wouldn‚Äôt expect text coming from a CSS file, things might get messy on sites with multiple languages, auto-translation may not work, and the content is only accessible if the CSS loads successfully.\n\nAdrian Roselli shares an example of a poor practice in Link Targets and 3.2.5.\n\nYou can combine text and images\n\nNor did I know that you can use the url() function as a value, I also didn‚Äôt know that you can combine it with text.\n\ndiv::before { content: url('pin.png') 'You are here.'; }\n\nCheckout example 6 on CodePen.\n\nYou can only replace the content of a regular element with an <image>\n\nThe content property is meant to be used with pseudo elements. You can‚Äôt use it to replace a string in an element with another string. This won‚Äôt work:\n\ndiv { content: 'You are here'; }\n\nBut you can use it to replace a string with an image. The string is still in the DOM but screen readers announce the filename. (You can do it, but you shouldn‚Äôt.)\n\nYou are here!\n\n<div>You are here!</div>\n\ndiv { content: url('pin.png'); }\n\nCheckout example 7 on CodePen.\n\nThere are quotes and no-quotes\n\nOkay, now this one is really cool. Let‚Äôs say we have a quote nested in another quote.\n\n<blockquote> My mama always said, <q> Life was like a box of chocolates. You never know what you‚Äôre gonna get </q >. </blockquote>\n\nMy mama always said, Life was like a box of chocolates. You never know what you‚Äôre gonna get.\n\nWhat you should see in the above example is that the blockquote has no quotes and q has double quotes.\n\nIf we add opening and closing quotes to the blockquote using pseudo elements and the content property, the blockquote now displays double quotes and the q automatically single quotes.\n\nblockquote::before { content: open-quote; } blockquote::after { content: close-quote; }\n\nMy mama always said, Life was like a box of chocolates. You never know what you‚Äôre gonna get.\n\nNice! To top it all off, we can even have a combination of the two variations, blockquote with no quotes and q with single quotes.\n\nblockquote::before { content: no-open-quote; } blockquote::after { content: no-close-quote; }\n\nMy mama always said, Life was like a box of chocolates. You never know what you‚Äôre gonna get.\n\nThe no-open-quote and no-close-quote keywords don‚Äôt insert anything, but increment the quotation depth by one.\n\nNested quotes in different languages\n\nJust because I was curious, here are some variations of the second example in other languages.\n\nFrench\n\n<blockquote lang=\"fr\"> Maman disait toujours, <q> la vie, c'est comme une bo√Æte de chocolats: on ne sait jamais sur quoi on va tomber </q >. </blockquote>\n\nMaman disait toujours, la vie, c'est comme une bo√Æte de chocolats: on ne sait jamais sur quoi on va tomber .\n\nRussian\n\n<blockquote lang=\"ru\"> –ú–æ—è –º–∞–º–∞ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏–ª–∞, <q> –ñ–∏–∑–Ω—å –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∞ —à–æ–∫–æ–ª–∞–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ç: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∞—è –Ω–∞—á–∏–Ω–∫–∞ —Ç–µ–±–µ –ø–æ–ø–∞–¥—ë—Ç—Å—è </q >. </blockquote>\n\n–ú–æ—è –º–∞–º–∞ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏–ª–∞, –ñ–∏–∑–Ω—å –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∞ —à–æ–∫–æ–ª–∞–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ç: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∞—è –Ω–∞—á–∏–Ω–∫–∞ —Ç–µ–±–µ –ø–æ–ø–∞–¥—ë—Ç—Å—è .\n\nGerman\n\n<blockquote lang=\"de\"> Mama hat immer gesagt, <q> Das Leben ist wie eine Schachtel Pralinen. Man wei√ü nie, was man kriegt </q >. </blockquote>\n\nMama hat immer gesagt, Das Leben ist wie eine Schachtel Pralinen. Man wei√ü nie, was man kriegt .\n\nSpanish\n\n<blockquote lang=\"es\"> Mi mam√° siempre dec√≠a, <q> La vida es como una caja de bombones, nunca sabes lo que vas a conseguir </q >. </blockquote>\n\nMi mam√° siempre dec√≠a, La vida es como una caja de bombones, nunca sabes lo que vas a conseguir .\n\nSorry, if I fucked up any of the translations.\n\nThere‚Äôs counter() and counters()\n\nI'm really not sure if I was aware of the fact there isn‚Äôt just a counter() but also a counters() function. However, the difference is that counters() enables nested custom counters.\n\nElement 001\n\nElement 001\n\nElement 002\n\nElement 003\n\nElement 002\n\nElement 003\n\n<ol> <li> Element 001 <ol> <li>Element 001</li> <li>Element 002</li> <li>Element 003</li> </ol> </li> <li>Element 002</li> <li>Element 003</li> </ol>\n\nol { list-style-type: none; counter-reset: mylist; } li { counter-increment: mylist; } li::before { content: 'ü§§ ' counters(mylist, '.') ': '; }\n\nCheckout example 8 on CodePen.\n\nYou‚Äôll find more ways of using the content property in Adrian‚Äôs article https://adrianroselli.com/2019/12/showing-file-types-in-links.html.\n\nWow, that was a lot. I didn‚Äôt expect to write and learn so much. I hope that you‚Äôve learned as much as I did.\n\nThanks for reading ‚ù§Ô∏è and thanks to Stefan for the inspiration for this post.\n\nUpdates\n\n28.05.2020 Added a disclaimer about putting text in CSS files, and a link to an article by Adrian Roselli."
    }
}