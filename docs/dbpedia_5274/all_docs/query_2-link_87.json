{
    "id": "dbpedia_5274_2",
    "rank": 87,
    "data": {
        "url": "https://www.gamedeveloper.com/design/how-to-create-2d-physics-games-with-box2d-library",
        "read_more_link": "",
        "language": "en",
        "title": "How to create 2D Physics Games with Box2D Library",
        "top_image": "https://www.gamedeveloper.com/build/_assets/gamedeveloper-X2EP7LQ6.ico",
        "meta_img": "https://www.gamedeveloper.com/build/_assets/gamedeveloper-X2EP7LQ6.ico",
        "images": [
            "https://www.gamedeveloper.com/build/_assets/informaLogoWhite-RZAE7EJI.png",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt8d5417b628e6b04b/656f5ed8485fda040aba11a1/Game_Developer_Logo_RGB_1.png?width=476&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/bltc50ecf21e858dd8d/650f0bf219d3136303c61470/cyberpunk_phantom.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt2a0d1f11364c9213/66883687732a20aa82d80306/dawntrail.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/bltb8149045ecc9add6/664670498df30a26f54d5ed4/GDBlogs_Logo_FINAL.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt913410484be59c9b/65087ea6ae486828bc158703/Juan_Belon_Perez.jpg?width=100&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/bltba62518415cda0e2/652fe6ddbc479f8697ef691f/default-cubic.png?width=1280&auto=webp&quality=95&format=jpg&disable=upscale",
            "https://storage.googleapis.com/google-code-archive/v2/code.google.com/box2d/logo.png?width=153&auto=webp&quality=80&disable=upscale",
            "http://crayonphysicsdeluxe.s3.amazonaws.com/crayonphysics.com/screenshots/shot_00.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh6.googleusercontent.com/-YCr3tm_Pg2Y/Uhsz8Z8CLuI/AAAAAAAACRs/dB0YDLJ39rM/w958-h639-no/Box2D_POLYGONS.PNG?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh4.googleusercontent.com/-7o_bz6JXKVE/UhfL-1n_XEI/AAAAAAAACMk/vm2pBM_JaeM/w640-h270-no/thomasWasAloneBoxes.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh4.googleusercontent.com/--tUotBCrdXw/UhfL0hm2r8I/AAAAAAAACMc/asryk6caRRc/w294-h200-no/boxExamples.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "http://upload.wikimedia.org/wikipedia/commons/6/6d/Metaball_contact_sheet.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh5.googleusercontent.com/-hMlG-0lRV40/Uhsz_Tadv8I/AAAAAAAACSE/UuJYbvuDtPM/w958-h639-no/Box2D_waterPhysics.PNG?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh6.googleusercontent.com/-8gkolt-3s7E/UhfPn-6PTqI/AAAAAAAACNI/15OkZJa9b_I/w320-h480-no/wmw.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh4.googleusercontent.com/-bFXGGucpbCw/UhfT3YkVn4I/AAAAAAAACNs/WU0HBk2Rvtk/w958-h719-no/sprinkle_islands_boss.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh4.googleusercontent.com/-pS7ZiinNexw/Uhs3ZzZqseI/AAAAAAAACUI/GVhFyyLBjAA/w958-h639-no/Box2D_ElasticRopes.PNG?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh5.googleusercontent.com/-r35HXZ324rw/UhfaNEznV7I/AAAAAAAACOM/en46GadgbkE/w958-h719-no/Contre-Jour-5.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "http://blogs.claritycon.com/files/2012/10/snotDiagram.png?width=700&auto=webp&quality=80&disable=upscale",
            "http://blogs.claritycon.com/files/2012/10/jsRopeSegmented.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh5.googleusercontent.com/-Y6DxOF4V0UY/UhfbhUxOVZI/AAAAAAAACOk/9JqgDFxfLHM/w523-h414-no/cut-the-rope1.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh5.googleusercontent.com/-x7MsfFyugSo/UhfhhYlWv8I/AAAAAAAACPE/uldyNJ_RVs0/w480-h270-no/tinywings2.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh6.googleusercontent.com/-8mkCGHMTYoo/Uhszv_NsVeI/AAAAAAAACRM/P0i3UXeERvQ/w958-h639-no/Box2D_JumpRun.JPG?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh5.googleusercontent.com/-ecnO8DSWkEY/UhfiOgb-5xI/AAAAAAAACPY/hPUPQ9L4mw0/w700-h320-no/Jetpack-Joyride.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh4.googleusercontent.com/-2qcMHIUYpOE/Uhsz4AiSNnI/AAAAAAAACRc/K340ekmKiwg/w958-h719-no/Box2D_Forces_Gravity.png?width=700&auto=webp&quality=80&disable=upscale",
            "http://www.topappreviews101.com/ipappimg/2185/saving-seeds-hd-doodle-physics-screenshot-2.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh6.googleusercontent.com/-IW49WUaZznY/Uhsz8NRGo3I/AAAAAAAACRw/JCgXnYMONSI/w958-h719-no/Box2D_Lines.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://lh3.googleusercontent.com/--cYYVZXewp4/Uhs59HXAFKI/AAAAAAAACU0/iX_vl9cwY7Q/w958-h639-no/Box2D_BezierRampage.PNG?width=700&auto=webp&quality=80&disable=upscale",
            "http://www.yeahus.net/wp-content/uploads/2012/10/10.jpeg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt913410484be59c9b/65087ea6ae486828bc158703/Juan_Belon_Perez.jpg?width=400&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/bltc50ecf21e858dd8d/650f0bf219d3136303c61470/cyberpunk_phantom.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt2a0d1f11364c9213/66883687732a20aa82d80306/dawntrail.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt5b911461dd4460c0/66ce3e792dd9337f760328f2/humberlykayfeatured.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt2f9bd49e6597d185/66ccc89464ee12917096abd0/Animal_Crossing_Kelsey_Lewin_Cover.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/bltc8c8e7e733f6d866/66ccc878a85a6ab3468a7aa2/monsterhunterwildsfeatured.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt52e4e5e4eabc3597/66ce05c65eb28c4cf2046dd3/Gamescom_2024.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt2638a8adf802a111/66cde4955026665eb67a1cfe/GUzApxWXQAAODBa_(1)_(1).jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt46f485438e82bb10/66c8efe5c0f884d3071f0b35/pexels-olia-danilevich-4974920.jpg?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt8d5417b628e6b04b/656f5ed8485fda040aba11a1/Game_Developer_Logo_RGB_1.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt1363a10229efc062/656db9e79761ff040a595688/MicrosoftTeams-image_(3).png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt1bbfb7520e56ef03/65250cc0c5c21b80cfb55335/Game_Developer_Jobs_Logo_white.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt431090e6027a0c17/65250c42e4f4b80857d3c9cb/gdc_logo_(1).png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt789019463bae70bf/6523eb443c9b45aa9da4f4b2/logo_omdia_white.png?width=700&auto=webp&quality=80&disable=upscale",
            "https://eu-images.contentstack.com/v3/assets/blt740a130ae3c5d529/blt7ac431a25be6784c/6474a0a18bdc2b0843a07db3/InformaTechBTYB_240x60.png?width=700&auto=webp&quality=80&disable=upscale"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Juan Belon Perez"
        ],
        "publish_date": "2013-08-26T06:00:00+00:00",
        "summary": "",
        "meta_description": "How to make 2D games with realistic physics and cool mechanics using Lua language and Box 2D Library.",
        "meta_lang": "en",
        "meta_favicon": "/build/_assets/gamedeveloper-X2EP7LQ6.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.gamedeveloper.com/design/how-to-create-2d-physics-games-with-box2d-library",
        "text": "If you take a look to the list of the top games in the markets, flash-games portals,etc, what can you see?, there are a lot of 2D games with an outstanding use of physics and visual arts!.\n\nWe are here today to study the physics of those games and to understand what are they made of, with Box2D.\n\nBut, more than the \"what\", it is much better to know the \"how\", first of all, let me ask you a question: if you would have to replicate a physics game mechanic or behaviour, will you have the skills and techniques to do so?\n\n...I asked myself this same question more than a year ago, and the game 6 Dimensions is the answer ,it is a creative box where each dimension contains a different set of game mechanics using Box2d physics, mixed with visual art techniques, that I am sharing with you, because I made this game to improve a game engine called Codea (the guys from Crabitron), and finally, to write tutorials like this, where I wanted you and me to learn about realistic physics, art and game design...,together we are going to improve our game development skills.\n\nI have designed 6 dimensions in my game, I'm using the same idea like a process capable of bring to your mind how are made features, so, before you say anything I'm writting near the dimension , the games from which we are replicating its physics, mechanics and art techniques.\n\n1.The SHAPE Dimension\n\nThomas was alone, Angry Birds, Crayon Physics\n\nIn Crayon Physics: you can craw something in the screen with your fingers or the mouse, for example a circle, a triangle or a rectangle,and, as you release the mouse/touch, the lines will turn into a solid physical object (in the virtual world).\n\nHow do you do that?\n\nIt is pretty simple actually, you have to save each point coordinate of the trace from the mouse/touch start to end, when the release event occurs, then you call to a function of Box2D that creates a polygon with a serie of points, something like this:\n\nlocal body = physics.body(POLYGON, unpack( points ) )\n\nSome definitions:\n\nYou have to know that there is some kind of shape types in Box2D :\n\nOnce you have defined a body shape, there are different behaviours,or body types:\n\nwell,...the exact sintaxis depends of the implementation of the API, in this article I'm using this because it is the simplest code I can find. But it would be so simple to change to actual code for any language, you can find a Box2D lib for almost every language (Flash as3, c++, objc, java, javascript, java+processing,etc), this is in ObjC. I recommend you to open the level definitions of the game Crayon Physics to understand how it works.\n\nYou have to save the result of that function to a var, then, in the draw loop of the game the properties of that body are accesible, like body.position, body.radius, body.linearVelocity, body.angularVelocity, body.mass, etc.\n\nWhen the body is created, you may want to define some of its properties, there are interesting things like the restitution,gravityScale and damping, these can turn our physical object into a bouncing or floating one, for example.\n\nHere is a sample of what can be done with this feature of Box2d.\n\nAt this point you might want go to the Ray Wenderlich site and follow some of the box2d tutorials and then come back and continue reading with more knowledge...or no.\n\nThere are more complexity in Box2D and other games ( Magic Pen ) within this dimension of physics game mechanics, you can draw some things that look likes \"nodes\" but developers call them \"joints\", this things are used to put magic glue between bodies, there are some kind of them, depending on the mechanics you want (Codea reference for physics with Box2d , or the Nature of Code videos - processing) and they can be used to create a behaviour between the connected bodies:\n\nSummarizing:\n\n1) Create: a body with the points of the touch or a box definition or any other polygonal geometry (a set of 2d points:x,y), set physics properties for what we want it to (different behaviours like Thomas was alone are possible), like if the body is static, it mass, density, gravityScale, and so on.\n\n3) Optional: attach to another body, for example, you can attach the body to a static body which is set as a sensor (not affecting world physics but has collision events) and activate the enableMotor property of the REVOLUTE joint, this also needs motorSpeed, maxMotorTorque and maxMotorForce, defines a rotation for this object. This is a result (dont pay attention to the water, we are going into it next).\n\n3) Visual Art: You have the body, if you want to draw it, not as a shape but like a filled body with color or a texture you may want to triangularize the points to create a POLYGON-shape (mesh) and set the colors or the texture to it.\n\nExamples:\n\nFor the behaviour of boxes from Thomas Was Alone you can set a simple \"juice\" system animation (evolution of tweeners), so, when you choose a cube and press the jump button (or the collision with the different physics bodies happens), it triggers the juice command = animation like squash, roll, etc., each character has its own animation params, the same goes for physics: mass, linearVelocity, damping, etc.\n\nAngry Birds, (Ray Wenderlich has a tutorial to make that too) , you can create a level by defining different properties to the boxes, draw different sprites or meshes with textures, so, in the collision events you can drown an amount of the \"life\" or \"resistance\" of the box-body and change the texture with another one, more appropiate to the current state (broken wood, almost broken glass, broking sprite animation,etc).\n\nYou can do the launching of the bird with a simple body:applyForce(vec2(x,y)) function. Each bird has it own mass, damping, info and properties as well...\n\n2.The WATER Dimension\n\nWhere is my water? , Sprinkle Ilsands...\n\nWhen you ask to the Internet coding sages how to make water physics like those games, they end up talking you about Metaballs:\n\nBut using metaballs in a game is not so trivial and not too easy to get neither, it has high computational cost, unless you discover some trick and apply it with some art.\n\nThat's why you dont see so many games with water physics. I started talking about this some months ago in this forum, and thanks to a lot of people I get a good water physics model for a game.\n\nYou can get it here,in the example I am using dynamic balls with CIRCLE bodies from Box2D lib (code inside videolink).\n\nThe code is easy to understand, look, the balls are just physic bodies generated with parameters to give them the behaviour of water drops, it is: restitution, friction, damping, linear velocity, then, to draw these balls we are using a technique with a shader (GLSL) and a texture, you will need a mesh to apply the shader, just like a ripple fx or other glsl shader samples that uses textures, we are setting the width and height of the area of the mesh to the whole screen, from the middle:\n\nmesh:addRect(WIDTH / 2, HEIGHT / 2, WIDTH, HEIGHT)\n\nthis way we can use the (x,y) position of each ball to paint in the virtual space of the texture (with setContext) of the mesh rect, so, each ball is represented in the texture as a ball painted with a gradient inside the image generated of the ball (200*200) -ballTex -\n\nfor k,b in ipairs(balls) do sprite(ballTexture, b.x, b.y) end\n\nthen , you have to use the additive blend mode to add all the painted balls to the texture and mix them with a background and a colour.\n\nExample:\n\nAs I said, each ball has a texture (procedurally generated) , a gradient, this was it can be mixed with other ball textures using a low level filter (the glsl shader).\n\nWhere is my water?\n\nYou can do the same water fx using different layers for each type of behaviour, or make one layer for all the liquids and one for all the dynamic terrains, then in the shader change the filter values and colors (water, lava, dirty,etc.).\n\nAn example of handling the collision within a behaviour can be:\n\nIn the collision events you must check what kind of ball is bodyA and bodyB, if one is gas (gravityScale/mass/density is practically zero, so it floats) and the other body is an \"ice\" polygon, then you turn the ball into water...\n\nAnother example:\n\nif bodyA is lava and bodyB is water, you must turn bodyB into gas, ...it is as easy as change the properties of the ball, so it will change the response in box2d and you do the new drawing the drawLoop of the game.\n\nTerrain example:\n\nthe static terrains could be just a POLYGON body created with a function that read an image of the whole terrain and build a set of pairs x,y (vec2) of the non-transparent pixels, then return this to the box2d function.\n\nDynamic terrain could be just a mesh and when you touch it, you will remove the points over that coordinates x,y of the touch, you have to rebuild the physics body with the new set of pairs of the mesh.\n\nAnd you have just see how to create the water so, here it is an example with all together: water physics and real time terrain modification based on box2d physics.\n\nPickups, powerups, etc. example:\n\nWhen a drop of water (physics body CIRCLE) hit a duck (physics body with sensor activated) you must delete that ball and change the animation of the duck for the new state ,until it is completly filled with water, then delete the duck and record the achievement.\n\nWater drops have a little trail,these are drawn using the linearVelocity and angularVelocity properties, you can get the direction and the speed so you can calculate the angle and distance of the trail (opposite direction and distance based on speed).\n\nIn fact, there are as many behaviours as you want.\n\nIn Sprinkle Ilsands the water shader is different as the one we have studied, only changes something with the particles fx, it has the linearVelocity detail added too, in another way.\n\nBut the behaviour could be the same, when the water balls (physics body CIRCLE) hit a fire sensor , it applies whatever it makes the fire goes down, the same for a water mesh in the sea, in the case of a rock you could add some details like particle effects or something like that.\n\nIn this dimension we can't find any joint, that's why it may be not necessary, well, in Sprinkle Islands the hose is a rope, which we are going to analyze in the next dimension, and there is a REVOLUTE joint in the hose cone...\n\n3.The ELASTIC Dimension\n\nContre Jour, Cut the Rope, Ninja Fruit,...\n\nIt took me another month to have a working prototype of a rope like those top games...see this one (code inside the video info), but the soft body was easy made once I got the rope finished, as I understand the joints better.\n\nTo make a realistic rope you have to create a set of bodies (CIRCLE or POLYGON,your choice) all attached to a STATIC body, the base. The joints used to joining the bodies of the rope can be of two types, DISTANCE or REVOLUTE, but the joint that join the base (STATIC) with the final part (DYNAMIC) must be a ROPE joint to create an elastic rope. Use the restitution property and frequency (hz) to adjust the response/damping/elasticity.\n\nExample:\n\nHere is the ROPE (code), and this is the result (video).\n\nTo create a soft body, you have to build a set of CIRCLE bodies around another center body (circle is better), which can be STATIC or DYNAMIC, it will affect the rest of the bodies for sure, if you change the types of the joints you will realise how the body can be deformed automatically, you need to draw the whole set with a mesh.\n\nContre Jour\n\nIn this game, you can find soft bodies: deformable terrains; and two types of ropes:elastics and ropes with a limit, fixed. These fixed ropes uses a more advanced technique than the elastics, to draw the texture in it shapes you have the properties of the bodies and the joints, i.e., points, types, properties, etc., the method must build a mesh and apply the texture in real time, like in the previous example of the video of the soft body but these guys do this thing better:\n\nTake a look to this: the tech behind the visual art of Contre Jour.\n\nCut the Rope\n\nThis is the perfect example of an Box2d physics set for a rope, the texture is dynamic also, and you can notice the weakness of it in the colors used along the mesh from the base to the ball, where it is attached the sugar.\n\nYou can build this rope as we have done in the previous example, the bubble effect can be achieved by setting the physics properties to the ball (candy): mass, density, gravityScale, it will float and you may draw the bubble after the candy with a multiply blend mode. Another way is change the body to a sensor and move it with your own gravity formula, but we are going to study this technique in the fifth dimension.\n\nIf the bubble-body-ball collides with the frog or the spikes, or the user touch the bubble, then you would animate the bubble explosion and change the physics properties of the candy again...\n\nExample code:\n\nif (vec2:distance( bFrog_Mouth, bCandy ) < maxDistance) then\n\n-- change animation of the frog from \"idle\" to \"eat\"\n\n-- pause input\n\n-- tween and trigger the end of game at the end of the animation\n\nend\n\n4.The GRAVITY Dimension\n\nTiny Wings, JetPack JoyRide, Madcoaster, Whale Trail, ...\n\nIn this dimension we can find a lot of games that uses forces against the gravity, but this is something that you can play with. For example, you can generate a simple terrain based on a sine function passed to the box2d function and it will return a CHAIN or EDGE shape types, STATIC bodies.\n\nYou can make your own Tiny Wings with Box2d, there is a tutorial here, and another here, the basis is that, a ball (CIRCLE body) falls with the force of gravity, you can increase the linearVelocity by touching the screen, and when the touch is released in the appropiate part (you can check the height of your sine function) of a hill it would be better for that increase amount...Another way is using only forces.\n\nExample:\n\nFor the draw loop, add particle effects to the picking, fever states (trails), and so on. The textures can be generated using procedurally imageswith random colors, gaussian noises to add details, borders, etc...you can see an example here.\n\nJetpack Joyride\n\nYou can follow the pattern for this game?, If you have readed the previous examples you must fall into account, you have the same behaviour for the character-body-ball (CIRCLE physics body or other you want),you must be applying forces against gravity, different physics properties for each jetpack, the missile and each vehicle, etc.\n\nThe same goes for Madcoaster, Rocket Chicken, Whale Trail and those kind of games...\n\nBut this dimension includes other mechanics, like the planetary physics, gravition is a strong field :)\n\nYou can use a simple formula to simulate zero gravity with physics.gravity(0,0), the force of attraction of a planet is something like this:\n\nMore in this example.\n\nfunction Planet:attract(m) -- Direction of the force local force = self.body.position - m.body.position local d = force:len() -- = m.body.position:dist(self.body.position) force = force:normalize() local dir = vec2(self.mass/m.body.mass, self.mass/m.body.mass) -- Magnitude of the force local strength = (GRAVITY * self.mass * m.body.mass)/(d*d) force = force * strength m.body:applyForce(force) stroke((1+math.floor(force.y))*110, (1+math.floor(force.x))*110, 10, 255) -- draw line between attractor/mover line(m.body.x+force.x, m.body.y+force.y, (self.body.x), (self.body.y)) end\n\nthis function will make the character ball to move around a planet.\n\n5.The LINE Dimension\n\nSaving Seeds, Crayon Physics, ...\n\nOnly lines: to draw lines you can create bodies of the shape type CHAIN and body type STATIC or DYNAMIC.\n\nFor level-design, obstacles are STATIC too, could be EDGE or POLYGON...\n\nYou can replicate a game like Saving Seeds with that configuration.\n\nHere it is an example.\n\nThe code is the same as in the first dimension but you have to change the rules of the game, you start with the physics engine paused, then draw and create the CHAIN static shapes, and when the user press the start button, the game must create the ball of the player (with it restitution, gravity, mass, etc. params) and resume the physics engine, it can be done with a single command (physics.pause() and physics.resume()).\n\nIt only remains in the game loop, to check collisions and linear Velocity, change the game state...\n\nYou can change the whole game reality by turning the gravity on or off, even for each player, like it happens in Thomas was alone or ibb and obb games.\n\n6.The VEHICLE Dimension\n\nPumped BMX, Hill Climb Racing\n\nMake a game with rampages and vehicles, if you reach this point, you are able to do this and whatever you want with the Box2d library.\n\nTo make a vehicle, just think in joints, the wheels are CIRCLE bodies, connect them with a POLYGON ( shape of the car, bike, etc. ) using a REVOLUTE joint with the correct anchors, and you got it, the motor is enabled only for one of the wheels, back , normally.\n\nTo draw the main body of the bike/car use a mesh with a texture, sprites for the wheels, unless you are using softbodies for those, add a trail, particle fx, etc.\n\nExample from code:\n\nFor the roads, use some noise, or a sine, and it could be STATIC or DYNAMIC, you can use a Bezier spline like this example [code].\n\nPumped BMX\n\nI know this game and its physics thanks to this author article in Gamasutra.\n\nAlthough he did not mention anything about Box2D, I guess is what it is used because uses Cocos2d, (and Corona SDK), which uses the lib...anyway, now you know how to create a vehicle and the rampages, go and do some tests!\n\nCheck out this game too: Canvas Rider. There are two bike models, you can change it in the game, then you will notice that the bodies of the bike set are being a joint configuration that allow some damping , when you change the bike the dynamic bodies are destructed and then the game is creating the new ones of the new bike.\n\nAlso, the lines you can touch with your bike in this game are just static CHAINs, the touches of the mouse when you are designing the road are the x,y...as we have done before.\n\nAnd that's all for now, hope you enjoy coding some physics with Box2D."
    }
}