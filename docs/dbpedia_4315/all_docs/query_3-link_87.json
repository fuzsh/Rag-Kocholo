{
    "id": "dbpedia_4315_3",
    "rank": 87,
    "data": {
        "url": "https://embeddedartistry.com/blog/author/phillip/page/29/",
        "read_more_link": "",
        "language": "en",
        "title": "Phillip Johnston, Author at Embedded Artistry",
        "top_image": "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/wpforo/avatars/phillip_2.png",
        "meta_img": "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/wpforo/avatars/phillip_2.png",
        "images": [
            "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_transparent_with_mark_half.png 400w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_transparent_with_mark_half-300x43.png 300w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_transparent_with_mark_half-200x29.png 200w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_transparent_with_mark_half-100x14.png 100w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_transparent_with_mark_half-350x50.png 350w",
            "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_transparent_with_mark_half.png",
            "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/embedded_artistry_transparent_with_mark_half.png 400w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/embedded_artistry_transparent_with_mark_half-300x43.png 300w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/embedded_artistry_transparent_with_mark_half-200x29.png 200w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/embedded_artistry_transparent_with_mark_half-100x14.png 100w, https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/embedded_artistry_transparent_with_mark_half-350x50.png 350w",
            "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/embedded_artistry_transparent_with_mark_half.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Phillip Johnston"
        ],
        "publish_date": "2017-03-20T16:00:00-07:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://eadn-wc05-197419.nxedge.io/cdn/wp-content/uploads/2021/05/cropped-embedded_artistry_icon_with_trademark-32x32.png",
        "meta_site_name": "Embedded Artistry",
        "canonical_link": "https://embeddedartistry.com/blog/author/phillip/page/29/",
        "text": "Thoughts on the Vagaries of C++ Initialization\n\nToday's reading assignment is another one from Scott Meyers: \"Thoughts on the Vagaries of C++ Initialization\". There are a variety of initialization methods, so it is important to understand the distinction between them - especially when using auto. I initially ran acros sthis article when trying to figure out why auto kept giving me a …\n\nContinue reading \"Thoughts on the Vagaries of C++ Initialization\"\n\ncompiler-rt\n\nAs we're exploring bringing up a C/C++ runtime on our system, I'd like to share a very helpful resource for those using clang/llvm: compiler-rt. Compiler-rt is an LLVM project that provides implementations of various builtin functions for a variety of architectures. This saves us a lot of heavy lifting when bringing up a new platform, …\n\nContinue reading \"compiler-rt\"\n\nC++ Casting, or: “Oh No, They Broke Malloc!”\n\nThe first time you try compiling your C code with a C++ compiler can be terrifying. One of the most troublesome offenders is malloc, and you will have your eyes opened to the number of implicit type conversions in your code. Table of Contents: malloc: C vs C++ C++ Casts static_cast reinterpret_cast const_cast const_cast and …\n\nContinue reading \"C++ Casting, or: “Oh No, They Broke Malloc!”\"\n\nNever Call Virtual Functions During Construction or Destruction\n\nToday I have another Scott Meyers article for your enjoyment: \"Never Call Virtual Functions During Construction or Destruction\". The best summary I can offer comes from the master himself: I'll begin with the recap: you shouldn't call virtual functions during construction or destruction, because the calls won't do what you think, and if they did, …\n\nContinue reading \"Never Call Virtual Functions During Construction or Destruction\"\n\nCode Change Control (CCC) Template\n\nOne of the processes that I was introduced to while working at Apple was CCC: Code Change Control. During normal development, the requirement for many teams was that your code needed to be reviewed by at least one other developer before you checked it into the main branch. When we were approaching our product’s ship date, the code …\n\nContinue reading \"Code Change Control (CCC) Template\"\n\nMigrating from C to C++: NULL vs nullptr\n\nOn my last project, my team started working on implementing object-oriented concepts in C. Eventually we realized that we were reimplementing multiple C++ features. We admitted to ourselves that we would not implement our constructs more efficiently than the C++ compiler. We were also very interested in the extra safety mechanisms implicit in C++: better …\n\nContinue reading \"Migrating from C to C++: NULL vs nullptr\"\n\nMake Interfaces Easy to Use Correctly\n\nI was perusing Scott Meyers's Articles and Interviews, and I noticed one with an interesting title: \"Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly\". This article comes from 97 Things Every Programmer Should Know, a collection of rules and advice proposed by the wider programming community. You can find a list of …\n\nContinue reading \"Make Interfaces Easy to Use Correctly\"\n\nAnnouncing ea-jenkins Repository\n\nI want to announce a new repository: ea-jenkins. ea-jenkins contains an example Jenkins build server configuration. This configuration can be imported into your own Jenkins build server to get you up and running quickly. I recommend forking this repository for your own development purposes. Importing the ea-jenkins Configuration To utilize this base config with Jenkins, …\n\nContinue reading \"Announcing ea-jenkins Repository\"\n\nC++ Smart Pointers with Aligned Malloc/Free\n\nRecall in the aligned_malloc article that we noted the need to pair aligned_malloc with aligned_free. Using the wrong free call can cause serious problems, as we have modified the pointer that malloc originally returned to us. This problem of pairing allocators and deleters also applies in other situations: new must be paired with delete, while …\n\nContinue reading \"C++ Smart Pointers with Aligned Malloc/Free\""
    }
}