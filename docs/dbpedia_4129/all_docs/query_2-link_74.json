{
    "id": "dbpedia_4129_2",
    "rank": 74,
    "data": {
        "url": "https://www.theverge.com/2012/8/31/3279757/commodore-64-turns-30-inspired-generation-programmers",
        "read_more_link": "",
        "language": "en",
        "title": "64 to 30: Commodore's game-changing computer enters its fourth decade",
        "top_image": "https://cdn.vox-cdn.com/thumbor/LqS6JWh959qKRPRtYqu_T2ZXeDo=/0x51:1020x625/1600x900/cdn.vox-cdn.com/assets/1326778/c66.jpg",
        "meta_img": "https://cdn.vox-cdn.com/thumbor/LqS6JWh959qKRPRtYqu_T2ZXeDo=/0x51:1020x625/1600x900/cdn.vox-cdn.com/assets/1326778/c66.jpg",
        "images": [
            "https://cdn.vox-cdn.com/thumbor/7GIM4CGb_zy6MUEMM-J-eTvsz1Q=/3x0:1017x676/1025x683/cdn.vox-cdn.com/assets/1326778/c66.jpg",
            "http://assets.sbnation.com/assets/1325832/commodore-765.jpg",
            "http://assets.sbnation.com/assets/1327698/c765.jpg",
            "http://assets.sbnation.com/assets/1325852/commodore-2-.jpg"
        ],
        "movies": [
            "http://www.youtube.com/embed/796KD4SNzwE",
            "http://www.youtube.com/embed/bzvMYE3PUn4",
            "http://www.youtube.com/embed/_kDhpFaf4EY"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Janus Kopfstein"
        ],
        "publish_date": "2012-08-31T00:00:00",
        "summary": "",
        "meta_description": "These days, using a computer often seems like it's less about actual computing and more about touching and dragging your way across the slick, safe UI of a mysteriously sealed, glowing rectangle....",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.vox-cdn.com/images/verge/favicon.v86bfa84309341a916fd48be1819b1e9185640f78.ico",
        "meta_site_name": "The Verge",
        "canonical_link": "https://www.theverge.com/2012/8/31/3279757/commodore-64-turns-30-inspired-generation-programmers",
        "text": "\"For the masses, not the classes.\"\n\nThe C64's legacy has as much to do with who uses computers as what they're being used for. The late Jack Tramiel — a Polish businessman who emigrated to the United States in 1947 — famously founded Commodore International in an effort to make powerful and affordable machines \"for the masses, not the classes.\" Earlier realizations of this mission were the Commodore PET and VIC-20, which Commodore managed to sell on the cheap by manufacturing its own chips under its subsidiary, MOS Technology.\n\nThe Commodore 64 was undoubtedly the most lustrous milestone in Tramiel's career. Not only was the machine affordable (just $595, compared to the Apple II which sat at $1298 with minimum specs) — it was also comparable in power to many of its heavyweight competitors. And while it competed fiercely in Europe with similar machines like the Sinclair ZX Spectrum, it was this combination of raw capability and price — as well as the aggressive marketing strategy which placed the system on toy and department store shelves across the world — that put the Commodore 64 into the hands of more people than any other home computer in history.\n\nThere was a comforting sense that your machine was exactly as useful as you could make it\n\nSince learning how to use a home computer was the same as learning how to program it, operating a Commodore 64 in many ways meant achieving a kind of intimacy, beyond merely recalling memory tables and knowing the various rituals for loading programs without error. Instead of an operating system, there was a blue-flavored BASIC terminal and the comforting sense that your machine was exactly as useful as you could make it. Without the convenient guided rails of a modern OS, the C64 was one of the last, brightest moments for the DIY computer.\n\nFrom that humble command line spawned all manner of creativity, from rudimentary BASIC programs to more advanced video games and software written in assembly language for the C64's 8-bit microprocessor, the 6510. C64 programming’s most stand-out period came in the mid-80s, when what began as visual intros created to accompany cracked software evolved into the demoscene, the first homebrew computer art movement.\n\nCoders from that era will commonly point to the C64 as the machine that helped catalyze the demoscene — and for good reason. Early computer artists loved its raw power, and demo groups, collaborating via trade meetups and BBS, spent much of the next decade crunching code to push the system to its limits.\n\nCompetition was the name of the game, and one-file demos soon evolved into multi-disk computer graphics odysseys. And thanks to the ubiquitous C64 hardware, the level playing field made it easy to recognize superior coding skills, prompting the appearance of competitive demo parties across the globe.\n\nThe demoscene is not about creating narratives or \"art,\" but using code to facilitate complete audiovisual immersion\n\nThe demoscene is not about creating narratives or \"art,\" but using code to facilitate complete audiovisual immersion. That was assisted in large part by the C64’s legendary sound chip, the SID (Sound Interface Device). With its unique, customizable sound palette, the reasons that so many musicians swear by the SID are too numerous to list here.\n\nDemoscene musicians known for their work on C64 like Jeroen Tel, Martin Galway, and Rob Hubbard alternately worked on video games, and a majority are still active today. The SID’s sound was also famously used by groups like Swedish metal band Machinae Supremacy — and more notoriously, stolen by the likes of Timbaland and Zombie Nation.\n\nToday, SIDs are a precious commodity that continue play an active role in chip music, which has since become an international music scene all its own. “It has a charm to it that's hard to replicate these days,” says Chris Hülsbeck, a composer known for his work on games like Turrican, R-Type, and countless others. “It's warm and powerful at the same time, but it also can sound whimsical — there's nothing else that really compares to it.\"\n\nWithout software, however, early Commodore composition was no easy feat. \"The music had to be all in your head,” Hülsbeck recalled over the phone, describing the arduous process of notating music by referencing specific memory addresses controlling things like pitch, duration, and timbre. Then, in the mid 80s, he built his own software tool, Soundmonitor, to make the process easier. The tool gained widespread use and served as a predecessor to the tracker programs that came on later machines like the Commodore Amiga.\n\nHülsbeck got his start participating in music contests hosted by a German C64 magazine at age 17, and went on to score countless game soundtracks for the C64, Amiga, and others. \"It was fun, at least back then. I don't know if it would be the same fun if I tried to do it nowadays, but I felt like I was doing something special, and that pushed me forward.\"\n\nValve hardware designer Jeri Ellsworth's Commodore 64 bass guitar\n\n\"It gave you a feeling of connection with the machine — that you were making it work.\"\n\nLooking at modern computers, one gets the sense that we've either lost touch or lost interest in understanding even their most basic operations. \"In the early days it was considered a barrier to entry,\" says Douglas Rushkoff, a media theorist and computer literacy advocate serving as a staff advisor at Codecademy. \"But that gave you a feeling of connection with the machine — that you were making it work.\"\n\nRushkoff recalls how he learned programming using both the Commodore 64 and an old teletype system connected to the state Board of Education. With modern computing, he compares it to the difference between sitting down at a piano — feeling the responsiveness of the keys as they're pressed to generate sound — and putting a roll into a player piano, or a record onto a turntable.\n\nProgrammer and blogger Mike Taylor expresses similar thoughts in his 2010 essay, \"Whatever Happened to Programming?\" which regrets (with many sensible objections) that programming now seems to be more about piecing together chunks of pre-written code than creating your own solutions. \"Yes, it takes taste and discernment and experience to do well,\" he writes, \"but it doesn’t require brilliance and it doesn’t excite. It’s not what we dreamed of as fourteen-year-olds and trained for as eighteen-year-olds. It doesn’t get the juices flowing. It’s not making.\"\n\nEben Upton, designer of the credit card-sized Raspberry Pi, a kind of spiritual successor to the C64, knows well the double-edged sword of \"user-friendliness\" in modern day computers. \"This is in general a good thing, as it's expanded the pool of people who can benefit,\" he said in an email, \"but it doesn’t mean that we're getting a supply of experienced computer programmers as a \"free\" side effect.\" He’s hopeful that with cheap hardware and the right plan, we can still teach the next generation of programmers to see the raw potential that gets them excited about computing, as the C64 once did. \"I think it's equally important to provide children with the opportunity to program on their own time,\" he says. \"This is where cheap hardware is particularly helpful, as it means that nobody is excluded on the basis of their financial circumstances.\"\n\nOf course the biggest contributor to those trends is that since the Commodore 64’s heyday, mainstream computers and operating systems have veered away from open, multi-purpose architectures to become abstracted, special purpose machines. And for the next generation of programmers, that can make it difficult to see past the outermost layer.\n\n\"All these programs we're using now are just particular metaphors,\" says Rushkoff. He emphasizes the need for computer education to go beyond the 'app-centric' model of computing and reveal the true potential of computers and what they can be made to accomplish. \"If you see it like that then you see it as an open set of possibilities, rather than this very locked down set of purchases.\""
    }
}