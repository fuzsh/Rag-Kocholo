{
    "id": "dbpedia_6537_3",
    "rank": 36,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units",
        "read_more_link": "",
        "language": "en",
        "title": "CSS values and units - Learn web development",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [],
        "movies": [
            "https://mdn.github.io/css-examples/learn/values-units/length.html",
            "https://mdn.github.io/css-examples/learn/values-units/em-rem.html",
            "https://live.mdnplay.dev/en-US/docs/Learn/CSS/Building_blocks/Values_and_units/runner.html?id=line_height_units"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-13T13:25:16+00:00",
        "summary": "",
        "meta_description": "This has been a quick run-through of the most common types of values and units you might encounter. You can have a look at all of the different types on the CSS Values and units reference page â you will encounter many of these in use as you work through these lessons.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units",
        "text": "In CSS specifications and on the property pages here on MDN you will be able to spot value types as they will be surrounded by angle brackets, such as <color> or <length>. When you see the value type <color> as valid for a particular property, that means you can use any valid color as a value for that property, as listed on the <color> reference page.\n\nNote: You'll see CSS value types referred to as data types. The terms are basically interchangeable â when you see something in CSS referred to as a data type, it is really just a fancy way of saying value type. The term value refers to any particular expression supported by a value type that you choose to use.\n\nNote: CSS value types tend to be enclosed in angle brackets (<, >) to differentiate them from CSS properties. For example there is a color property and a <color> data type. This is not to be confused with HTML elements, as they also use angle brackets, but this is something to keep in mind that the context should make clear.\n\nIn the following example, we have set the color of our heading using a keyword, and the background using the rgb() function:\n\ncss\n\nh1 { color: black; background-color: rgb(197 93 161); }\n\nA value type in CSS is a way to define a collection of allowable values. This means that if you see <color> as valid you don't need to wonder which of the different types of color value can be used â keywords, hex values, rgb() functions, etc. You can use any available <color> values, assuming they are supported by your browser. The page on MDN for each value will give you information about browser support. For example, if you look at the page for <color> you will see that the browser compatibility section lists different types of color values and support for them.\n\nLet's have a look at some of the types of values and units you may frequently encounter, with examples so that you can try out different possible values.\n\nThe numeric type you will come across most frequently is <length>. For example, 10px (pixels) or 30em. There are two types of lengths used in CSS â relative and absolute. It's important to know the difference in order to understand how big things will become.\n\nAbsolute length units\n\nThe following are all absolute length units â they are not relative to anything else, and are generally considered to always be the same size.\n\nMost of these units are more useful when used for print, rather than screen output. For example, we don't typically use cm (centimeters) on screen. The only value that you will commonly use is px (pixels).\n\nRelative length units\n\nRelative length units are relative to something else. For example:\n\nem is relative to the font size of this element, or the font size of the parent element when used for font-size. rem is relative to the font size of the root element.\n\nvh and vw are relative to the viewport's height and width, respectively.\n\nThe benefit of using relative units is that with some careful planning you can make it so the size of text or other elements scales relative to everything else on the page. For a complete list of the relative units available, see the reference page for the <length> type.\n\nIn this section we'll explore some of the most common relative units.\n\nExploring an example\n\nIn the example below, you can see how some relative and absolute length units behave. The first box has a width set in pixels. As an absolute unit, this width will remain the same no matter what else changes.\n\nThe second box has a width set in vw (viewport width) units. This value is relative to the viewport width, and so 10vw is 10 percent of the width of the viewport. If you change the width of your browser window, the size of the box should change. However this example is embedded into the page using an <iframe>, so this won't work. To see this in action you'll have to try the example after opening it in its own browser tab.\n\nThe third box uses em units. These are relative to the element's font size. I've set a font size of 1em on the containing <div>, which has a class of .wrapper. Change this value to 1.5em and you will see that the font size of all the elements increases, but only the last item will get wider, as its width is relative to that font size.\n\nAfter following the instructions above, try playing with the values in other ways, to see what you get.\n\nems and rems\n\nem and rem are the two relative lengths you are likely to encounter most frequently when sizing anything from boxes to text. It's worth understanding how these work, and the differences between them, especially when you start getting on to more complex subjects like styling text or CSS layout. The below example provides a demonstration.\n\nThe HTML illustrated below is a set of nested lists â we have two lists in total and both examples have the same HTML. The only difference is that the first has a class of ems and the second a class of rems.\n\nTo start with, we set 16px as the font size on the <html> element.\n\nTo recap, the em unit means \"my parent element's font-size\" if used for font-size (and \"my own font-size\" when used for anything else). The <li> elements inside the <ul> with a class of ems take their sizing from their parent. So each successive level of nesting gets progressively larger, as each has its font size set to 1.3em â 1.3 times its parent element's font size.\n\nTo recap, the rem unit means \"The root element's font-size\" (rem stands for \"root em\"). The <li> elements inside the <ul> with a class of rems take their sizing from the root element (<html>). This means that each successive level of nesting does not keep getting larger.\n\nHowever, if you change the <html> element's font-size in the CSS you will see that everything else changes relative to it â both rem- and em-sized text.\n\nLine height units\n\nlh and rlh are relative lengths units similar to em and rem. The difference between lh and rlh is that the first one is relative to the line height of the element itself, while the second one is relative to the line height of the root element, usually <html>.\n\nUsing these units, we can precisely align box decoration to the text. In this example, we use lh unit to create notepad-like lines using repeating-linear-gradient(). It doesn't matter what's the line height of the text, the lines will always start in the right place.\n\nbody { margin: 0; display: grid; grid-template-columns: 1fr 1fr; padding: 24px; gap: 24px; background-color: floralwhite; font-family: sans-serif; } @supports not (height: 1lh) { body::before { grid-column: 1 / -1; padding: 8px; border-radius: 4px; background-color: tomato; color: white; content: \"You browser doesn't support lh unit just yet\"; } }\n\ncss\n\np { margin: 0; background-image: repeating-linear-gradient( to top, lightskyblue 0 2px, transparent 2px 1lh ); }\n\nhtml\n\n<p style=\"line-height: 2em\"> Summer is a time for adventure, and this year was no exception. I had many exciting experiences, but two of my favorites were my trip to the beach and my week at summer camp. </p> <p style=\"line-height: 4em\"> At the beach, I spent my days swimming, collecting shells, and building sandcastles. I also went on a boat ride and saw dolphins swimming alongside us. </p>\n\nIn a lot of cases, a percentage is treated in the same way as a length. The thing with percentages is that they are always set relative to some other value. For example, if you set an element's font-size as a percentage, it will be a percentage of the font-size of the element's parent. If you use a percentage for a width value, it will be a percentage of the width of the parent.\n\nIn the below example the two percentage-sized boxes and the two pixel-sized boxes have the same class names. The sets are 40% and 200px wide respectively.\n\nThe difference is that the second set of two boxes is inside a wrapper that is 400 pixels wide. The second 200px wide box is the same width as the first one, but the second 40% box is now 40% of 400px â a lot narrower than the first one!\n\nTry changing the width of the wrapper or the percentage value to see how this works.\n\nThe next example has font sizes set in percentages. Each <li> has a font-size of 80%; therefore, the nested list items become progressively smaller as they inherit their sizing from their parent.\n\nNote that, while many value types accept a length or a percentage, there are some that only accept length. You can see which values are accepted on the MDN property reference pages. If the allowed value includes <length-percentage> then you can use a length or a percentage. If the allowed value only includes <length>, it is not possible to use a percentage.\n\nWhen you are creating styles for a project, you will probably start off with numbers like 300px for lengths or 200ms for durations. If you want to have these values change based on other values, you will need to do some math. You could calculate the percentage of a value or add a number to another number, then update your CSS with the result.\n\nCSS has support for Math functions, which allow us to perform calculations instead of relying on static values or doing the math in JavaScript. One of the most common math functions is calc() which lets you do operations like addition, subtraction, multiplication, and division.\n\nFor example, let's say we want to set the width of an element to be 20% of its parent container plus 100px. We can't specify this width with a static value â if the parent uses a percentage width (or a relative unit like em or rem) then it will vary depending on the context it is used in, and other factors such as the user's device or browser window width. However, we can use calc() to set the width of the element to be 20% of its parent container plus 100px. The 20% is based on the width of the parent container (.wrapper) and if that width changes, the calculation will change too:\n\nThere are many other math functions that you can use in CSS, such as min(), max(), and clamp(); respectively these let you pick the smallest, largest, or middle value from a set of values. You can also use Trigonometric functions like sin(), cos(), and tan() to calculate angles for rotating elements around a point, or choose colors that take a hue angle as a parameter. Exponential functions might also be used for animations and transitions, when you require very specific control over how something moves and looks.\n\nKnowing about CSS functions is useful so you recognize them when you see them. You should start experimenting with them in your projects â they will help you avoid writing custom or repetitive code to achieve results that you can get with regular CSS."
    }
}