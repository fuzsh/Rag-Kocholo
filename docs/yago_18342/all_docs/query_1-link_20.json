{
    "id": "yago_18342_1",
    "rank": 20,
    "data": {
        "url": "https://github.com/eliben/xmlgen/blob/master/xmlgen.c",
        "read_more_link": "",
        "language": "en",
        "title": "xmlgen/xmlgen.c at main Â· eliben/xmlgen",
        "top_image": "https://opengraph.githubassets.com/4a60d04b3d81fa44bf02a097dc596bd2d28cbe5cd6d92385bbc23250e80426f8/eliben/xmlgen",
        "meta_img": "https://opengraph.githubassets.com/4a60d04b3d81fa44bf02a097dc596bd2d28cbe5cd6d92385bbc23250e80426f8/eliben/xmlgen",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Contribute to eliben/xmlgen development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/eliben/xmlgen/blob/main/xmlgen.c",
        "text": "Skip to content\n\nNavigation Menu\n\nSearch code, repositories, users, issues, pull requests...\n\nProvide feedback\n\nWe read every piece of feedback, and take your input very seriously.\n\nInclude my email address so I can be contacted\n\nSaved searches\n\nUse saved searches to filter your results more quickly\n\nName\n\nQuery\n\nTo see all available qualifiers, see our documentation.\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert\n\neliben / xmlgen Public\n\nNotifications You must be signed in to change notification settings\n\nFork 3\n\nLatest commit\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n\n556\n\n557\n\n558\n\n559\n\n560\n\n561\n\n562\n\n563\n\n564\n\n565\n\n566\n\n567\n\n568\n\n569\n\n570\n\n571\n\n572\n\n573\n\n574\n\n575\n\n576\n\n577\n\n578\n\n579\n\n580\n\n581\n\n582\n\n583\n\n584\n\n585\n\n586\n\n587\n\n588\n\n589\n\n590\n\n591\n\n592\n\n593\n\n594\n\n595\n\n596\n\n597\n\n598\n\n599\n\n600\n\n601\n\n602\n\n603\n\n604\n\n605\n\n606\n\n607\n\n608\n\n609\n\n610\n\n611\n\n612\n\n613\n\n614\n\n615\n\n616\n\n617\n\n618\n\n619\n\n620\n\n621\n\n622\n\n623\n\n624\n\n625\n\n626\n\n627\n\n628\n\n629\n\n630\n\n631\n\n632\n\n633\n\n634\n\n635\n\n636\n\n637\n\n638\n\n639\n\n640\n\n641\n\n642\n\n643\n\n644\n\n645\n\n646\n\n647\n\n648\n\n649\n\n650\n\n651\n\n652\n\n653\n\n654\n\n655\n\n656\n\n657\n\n658\n\n659\n\n660\n\n661\n\n662\n\n663\n\n664\n\n665\n\n666\n\n667\n\n668\n\n669\n\n670\n\n671\n\n672\n\n673\n\n674\n\n675\n\n676\n\n677\n\n678\n\n679\n\n680\n\n681\n\n682\n\n683\n\n684\n\n685\n\n686\n\n687\n\n688\n\n689\n\n690\n\n691\n\n692\n\n693\n\n694\n\n695\n\n696\n\n697\n\n698\n\n699\n\n700\n\n701\n\n702\n\n703\n\n704\n\n705\n\n706\n\n707\n\n708\n\n709\n\n710\n\n711\n\n712\n\n713\n\n714\n\n715\n\n716\n\n717\n\n718\n\n719\n\n720\n\n721\n\n722\n\n723\n\n724\n\n725\n\n726\n\n727\n\n728\n\n729\n\n730\n\n731\n\n732\n\n733\n\n734\n\n735\n\n736\n\n737\n\n738\n\n739\n\n740\n\n741\n\n742\n\n743\n\n744\n\n745\n\n746\n\n747\n\n748\n\n749\n\n750\n\n751\n\n752\n\n753\n\n754\n\n755\n\n756\n\n757\n\n758\n\n759\n\n760\n\n761\n\n762\n\n763\n\n764\n\n765\n\n766\n\n767\n\n768\n\n769\n\n770\n\n771\n\n772\n\n773\n\n774\n\n775\n\n776\n\n777\n\n778\n\n779\n\n780\n\n781\n\n782\n\n783\n\n784\n\n785\n\n786\n\n787\n\n788\n\n789\n\n790\n\n791\n\n792\n\n793\n\n794\n\n795\n\n796\n\n797\n\n798\n\n799\n\n800\n\n801\n\n802\n\n803\n\n804\n\n805\n\n806\n\n807\n\n808\n\n809\n\n810\n\n811\n\n812\n\n813\n\n814\n\n815\n\n816\n\n817\n\n818\n\n819\n\n820\n\n821\n\n822\n\n823\n\n824\n\n825\n\n826\n\n827\n\n828\n\n829\n\n830\n\n831\n\n832\n\n833\n\n834\n\n835\n\n836\n\n837\n\n838\n\n839\n\n840\n\n841\n\n842\n\n843\n\n844\n\n845\n\n846\n\n847\n\n848\n\n849\n\n850\n\n851\n\n852\n\n853\n\n854\n\n855\n\n856\n\n857\n\n858\n\n859\n\n860\n\n861\n\n862\n\n863\n\n864\n\n865\n\n866\n\n867\n\n868\n\n869\n\n870\n\n871\n\n872\n\n873\n\n874\n\n875\n\n876\n\n877\n\n878\n\n879\n\n880\n\n881\n\n882\n\n883\n\n884\n\n885\n\n886\n\n887\n\n888\n\n889\n\n890\n\n891\n\n892\n\n893\n\n894\n\n895\n\n896\n\n897\n\n898\n\n899\n\n900\n\n901\n\n902\n\n903\n\n904\n\n905\n\n906\n\n907\n\n908\n\n909\n\n910\n\n911\n\n912\n\n913\n\n914\n\n915\n\n916\n\n917\n\n918\n\n919\n\n920\n\n921\n\n922\n\n923\n\n924\n\n925\n\n926\n\n927\n\n928\n\n929\n\n930\n\n931\n\n932\n\n933\n\n934\n\n935\n\n936\n\n937\n\n938\n\n939\n\n940\n\n941\n\n942\n\n943\n\n944\n\n945\n\n946\n\n947\n\n948\n\n949\n\n950\n\n951\n\n952\n\n953\n\n954\n\n955\n\n956\n\n957\n\n958\n\n959\n\n960\n\n961\n\n962\n\n963\n\n964\n\n965\n\n966\n\n967\n\n968\n\n969\n\n970\n\n971\n\n972\n\n973\n\n974\n\n975\n\n976\n\n977\n\n978\n\n979\n\n980\n\n981\n\n982\n\n983\n\n984\n\n985\n\n986\n\n987\n\n988\n\n989\n\n990\n\n991\n\n992\n\n993\n\n994\n\n995\n\n996\n\n997\n\n998\n\n999\n\n1000\n\n#include <stdlib.h>\n\n#include <stdarg.h>\n\n#include <string.h>\n\n#include <stdlib.h>\n\n#include <math.h>\n\n#include <stdio.h>\n\n#include <stdio.h>\n\n#include <sys/time.h>\n\n#include <unistd.h>\n\nextern char *pmoptarg;\n\nextern int pmoptind;\n\nextern char dash;\n\nint pmgetopt(int argc, char * const argv[], const char *optstring);\n\nunsigned long timediff(void);\n\nextern int indent_level;\n\nextern int fmt_width;\n\nint xmlfmtprintf(FILE *, const char *fmt,...);\n\ntypedef struct\n\n{\n\nint type;\n\ndouble mean, dev, min, max;\n\n}\n\nProbDesc;\n\ntypedef struct\n\n{\n\nint id;\n\nProbDesc pd;\n\nchar rec;\n\n}\n\nElmDesc;\n\ntypedef struct\n\n{\n\nchar name[20];\n\nint type;\n\nint ref;\n\nProbDesc pd;\n\nfloat prcnt;\n\n}\n\nAttDesc;\n\ntypedef struct SetDesc\n\n{\n\nint size,id;\n\nstruct SetDesc *next;\n\n}\n\nSetDesc;\n\ntypedef struct\n\n{\n\nint id;\n\nchar *name;\n\nElmDesc elm[20];\n\nAttDesc att[5];\n\nint type;\n\nint kids;\n\nSetDesc set;\n\nint flag;\n\n}\n\nObjDesc;\n\nextern int (*xmlprintf)(FILE *stream, const char *format, ...);\n\nextern void FixSetByEdge(char *, char *, int size);\n\nextern FILE *xmlout;\n\nextern FILE *debug;\n\nextern int indent_level;\n\nextern int indent_inc;\n\nextern ObjDesc *stack[];\n\nextern int stackdepth;\n\nextern ObjDesc objs[];\n\nextern char dtd_name[128];\n\nextern int dtd_len;\n\nextern char *dtd[];\n\nint NumberOfObjs(void);\n\nint GenContents(ObjDesc*);\n\nvoid GenAttCDATA(ObjDesc*,char*,char*);\n\nextern int (*IdRefHook)(ObjDesc *od, int type, int *iRef);\n\nextern void (*InitHook)(void);\n\nextern double (*correction)(double scalefactor);\n\ntypedef struct {\n\nint idum,iff;\n\nlong ix1,ix2,ix3;\n\ndouble r[98];\n\nint ipos;\n\n} random_gen;\n\nvoid init_gen(random_gen *rg);\n\nfloat genunf(float low,float high);\n\nfloat genexp(float av);\n\nfloat gennor(float av,float sd);\n\nint ignuin(int low, int high);\n\nint __ignuin(random_gen *rg, int low, int high);\n\nint signuin(int seed, int low, int high);\n\ndouble ranf();\n\ndouble GenRandomNum(ProbDesc *pd);\n\ndouble GenRandomNumSeeded(int seed, ProbDesc *pd);\n\nvoid MakeRandomString(char *string, int length);\n\nstatic random_gen rgGlobal={-3};\n\nstatic random_gen rgNull,rgSeed;\n\nvoid init_gen(random_gen *rg)\n\n{\n\nmemcpy(rg,&rgNull,sizeof(rgNull));\n\n}\n\ndouble __ranf(random_gen *rg) {\n\nregister double temp;\n\nregister int j;\n\n{\n\nif (rg->idum<0 || rg->iff==0) {\n\nrg->iff=1;\n\nrg->ix1=(54773-rg->idum) % 259200;\n\nrg->ix1=(7141*rg->ix1+54773) % 259200;\n\nrg->ix2=rg->ix1 % 134456;\n\nrg->ix1=(7141*rg->ix1+54773) % 259200;\n\nrg->ix3=rg->ix1 % 243000;\n\nfor (j=1;j<=97;j++) {\n\nrg->ix1=(7141*rg->ix1+54773) % 259200;\n\nrg->ix2=(8121*rg->ix2+28411) % 134456;\n\nrg->r[j]=(rg->ix1+rg->ix2*(1.0/134456))*(1.0/259200);\n\n}\n\nrg->idum=1;\n\n}\n\nrg->ix1=(7141*rg->ix1+54773) % 259200;\n\nrg->ix2=(8121*rg->ix2+28411) % 134456;\n\nrg->ix3=(4561*rg->ix3+51349) % 243000;\n\nj=1+((97*rg->ix3)/243000);\n\nif (j>97 || j<1)\n\nprintf(\"ranf: index out of range\\n\");\n\ntemp=rg->r[j];\n\nrg->r[j]=(rg->ix1+rg->ix2*(1.0/134456))*(1.0/259200);\n\n}\n\nreturn temp;\n\n}\n\ndouble ranf()\n\n{\n\nreturn __ranf(&rgGlobal);\n\n}\n\nfloat __sexpo(random_gen *rg)\n\n{\n\nstatic float q[8] = {\n\n0.6931472,0.9333737,0.9888778,0.9984959,0.9998293,0.9999833,0.9999986,1.0\n\n};\n\nregister long i;\n\nregister float a,u;\n\nstatic float sexpo,ustar,umin;\n\nstatic float *q1 = q;\n\na = 0.0;\n\nu = __ranf(rg);\n\ngoto S30;\n\nS20:\n\na += *q1;\n\nS30:\n\nu += u;\n\nif(u <= 1.0) goto S20;\n\nu -= 1.0;\n\nif(u > *q1) goto S60;\n\nsexpo = a+u;\n\nreturn sexpo;\n\nS60:\n\ni = 1;\n\nustar = __ranf(rg);\n\numin = ustar;\n\nS70:\n\nustar = __ranf(rg);\n\nif(ustar < umin) umin = ustar;\n\ni += 1;\n\nif(u > *(q+i-1)) goto S70;\n\nsexpo = a+umin**q1;\n\nreturn sexpo;\n\n}\n\nfloat sexpo()\n\n{\n\nreturn __sexpo(&rgGlobal);\n\n}\n\nfloat __genexp(random_gen *rg, float av)\n\n{\n\nstatic float genexp;\n\ngenexp = __sexpo(rg)*av;\n\nreturn genexp;\n\n}\n\nfloat genexp(float av)\n\n{\n\nreturn __genexp(&rgGlobal,av);\n\n}\n\nfloat __snorm(random_gen *rg)\n\n{\n\nstatic float a[32] = {\n\n0.0,3.917609E-2,7.841241E-2,0.11777,0.1573107,0.1970991,0.2372021,0.2776904,\n\n0.3186394,0.36013,0.4022501,0.4450965,0.4887764,0.5334097,0.5791322,\n\n0.626099,0.6744898,0.7245144,0.7764218,0.8305109,0.8871466,0.9467818,\n\n1.00999,1.077516,1.150349,1.229859,1.318011,1.417797,1.534121,1.67594,\n\n1.862732,2.153875\n\n};\n\nstatic float d[31] = {\n\n0.0,0.0,0.0,0.0,0.0,0.2636843,0.2425085,0.2255674,0.2116342,0.1999243,\n\n0.1899108,0.1812252,0.1736014,0.1668419,0.1607967,0.1553497,0.1504094,\n\n0.1459026,0.14177,0.1379632,0.1344418,0.1311722,0.128126,0.1252791,\n\n0.1226109,0.1201036,0.1177417,0.1155119,0.1134023,0.1114027,0.1095039\n\n};\n\nstatic float t[31] = {\n\n7.673828E-4,2.30687E-3,3.860618E-3,5.438454E-3,7.0507E-3,8.708396E-3,\n\n1.042357E-2,1.220953E-2,1.408125E-2,1.605579E-2,1.81529E-2,2.039573E-2,\n\n2.281177E-2,2.543407E-2,2.830296E-2,3.146822E-2,3.499233E-2,3.895483E-2,\n\n4.345878E-2,4.864035E-2,5.468334E-2,6.184222E-2,7.047983E-2,8.113195E-2,\n\n9.462444E-2,0.1123001,0.136498,0.1716886,0.2276241,0.330498,0.5847031\n\n};\n\nstatic float h[31] = {\n\n3.920617E-2,3.932705E-2,3.951E-2,3.975703E-2,4.007093E-2,4.045533E-2,\n\n4.091481E-2,4.145507E-2,4.208311E-2,4.280748E-2,4.363863E-2,4.458932E-2,\n\n4.567523E-2,4.691571E-2,4.833487E-2,4.996298E-2,5.183859E-2,5.401138E-2,\n\n5.654656E-2,5.95313E-2,6.308489E-2,6.737503E-2,7.264544E-2,7.926471E-2,\n\n8.781922E-2,9.930398E-2,0.11556,0.1404344,0.1836142,0.2790016,0.7010474\n\n};\n\nstatic long i;\n\nstatic float snorm,u,s,ustar,aa,w,y,tt;\n\nu = __ranf(rg);\n\ns = 0.0;\n\nif(u > 0.5) s = 1.0;\n\nu += (u-s);\n\nu = 32.0*u;\n\ni = (long) (u);\n\nif(i == 32) i = 31;\n\nif(i == 0) goto S100;\n\nustar = u-(float)i;\n\naa = *(a+i-1);\n\nS40:\n\nif(ustar <= *(t+i-1)) goto S60;\n\nw = (ustar-*(t+i-1))**(h+i-1);\n\nS50:\n\ny = aa+w;\n\nsnorm = y;\n\nif(s == 1.0) snorm = -y;\n\nreturn snorm;\n\nS60:\n\nu = __ranf(rg);\n\nw = u*(*(a+i)-aa);\n\ntt = (0.5*w+aa)*w;\n\ngoto S80;\n\nS70:\n\ntt = u;\n\nustar = __ranf(rg);\n\nS80:\n\nif(ustar > tt) goto S50;\n\nu = __ranf(rg);\n\nif(ustar >= u) goto S70;\n\nustar = __ranf(rg);\n\ngoto S40;\n\nS100:\n\ni = 6;\n\naa = *(a+31);\n\ngoto S120;\n\nS110:\n\naa += *(d+i-1);\n\ni += 1;\n\nS120:\n\nu += u;\n\nif(u < 1.0) goto S110;\n\nu -= 1.0;\n\nS140:\n\nw = u**(d+i-1);\n\ntt = (0.5*w+aa)*w;\n\ngoto S160;\n\nS150:\n\ntt = u;\n\nS160:\n\nustar = __ranf(rg);\n\nif(ustar > tt) goto S50;\n\nu = __ranf(rg);\n\nif(ustar >= u) goto S150;\n\nu = __ranf(rg);\n\ngoto S140;\n\n}\n\nfloat snorm()\n\n{\n\nreturn __snorm(&rgGlobal);\n\n}\n\nfloat __gennor(random_gen *rg,float av,float sd)\n\n{\n\nstatic float gennor;\n\ngennor = sd*__snorm(rg)+av;\n\nreturn gennor;\n\n}\n\nfloat gennor(float av, float sd)\n\n{\n\nreturn __gennor(&rgGlobal,av,sd);\n\n}\n\nfloat __genunf(random_gen *rg,float low,float high)\n\n{\n\nstatic float genunf;\n\nif(!(low > high)) goto S10;\n\nfprintf(stderr,\"LOW > HIGH in GENUNF: LOW %16.6E HIGH: %16.6E\\n\",low,high);\n\nfputs(\"Abort\",stderr);\n\nexit(1);\n\nS10:\n\ngenunf = low+(high-low)*__ranf(rg);\n\nreturn genunf;\n\n}\n\nfloat genunf(float low, float high)\n\n{\n\nreturn __genunf(&rgGlobal,low,high);\n\n}\n\nint __ignuin(random_gen *rg,int low, int high)\n\n{\n\nint f=(int)(__ranf(rg)*(high-low+1));\n\nreturn low+f;\n\n}\n\nint ignuin(int low, int high)\n\n{\n\nreturn __ignuin(&rgGlobal,low,high);\n\n}\n\nint signuin(int seed, int low, int high)\n\n{\n\ninit_gen(&rgSeed);\n\nrgSeed.idum=seed;\n\nreturn __ignuin(&rgSeed,low,high);\n\n}\n\ndouble GenRandomNum(ProbDesc *pd)\n\n{\n\ndouble res=0;\n\nif (pd->max>0)\n\nswitch(pd->type)\n\n{\n\ncase 0:\n\nif (pd->min==pd->max && pd->min>0)\n\n{\n\nres=pd->min;\n\nbreak;\n\n}\n\nfprintf(stderr,\"undefined probdesc.\\n\");\n\nexit(EXIT_FAILURE);\n\ncase 1:\n\nres=genunf(pd->min,pd->max);\n\nbreak;\n\ncase 3:\n\nres=pd->min+genexp(pd->mean);\n\nres=(((pd->max)>(res)?(res):(pd->max)));\n\nbreak;\n\ncase 2:\n\nres=gennor(pd->mean,pd->dev);\n\nres=(((pd->min)<((((pd->max)>(res)?(res):(pd->max))))?((((pd->max)>(res)?(res):(pd->max)))):(pd->min)));\n\nbreak;\n\ndefault:\n\nfprintf(stderr,\"woops! undefined distribution.\\n\");\n\nexit(EXIT_FAILURE);\n\n}\n\nreturn res;\n\n}\n\nvoid MakeRandomString(char *string, int length)\n\n{\n\nint i;\n\nlength=(((0)<(length)?(length):(0)));\n\nfor (i=0;i<length;i++)\n\nstring[i]=65+(int)(ranf()*26);\n\nstring[i]=0;\n\n}\n\nint indent_level=0;\n\nint fmt_width=79;\n\nint xmlfmtprintf(FILE *xfp, const char *fmt, ...)\n\n{\n\nstatic char buf[20000], *blank=0, *lstblank=0, *start=0, *write=0;\n\nstatic int width=0, indent=0;\n\nint newindent=-1;\n\nchar *trail;\n\nva_list ap;\n\nif (!blank)\n\n{\n\nwrite=start=lstblank=blank=buf;\n\nindent=indent_level;\n\nwidth=indent-1;\n\n}\n\nva_start (ap,fmt);\n\nvsprintf(write, fmt, ap);\n\nva_end(ap);\n\ntrail=write;\n\nif (start==trail) indent=indent_level;\n\nwhile(*trail)\n\n{\n\nwidth++;\n\nif (*trail=='\\n') newindent=indent_level;\n\nif (*trail=='\\t' || *trail==' ')\n\n{\n\n*trail=' ';\n\nblank=trail;\n\nif (width==fmt_width && lstblank!=blank) *trail='\\n';\n\n}\n\nif (*trail=='\\n')\n\n{\n\n*trail='\\0';\n\nfprintf(xfp,\"%*s%s\\n\",indent,\"\",start);\n\nstart=lstblank=blank=trail+1;\n\nwidth=indent-1;\n\nif (newindent>=0) indent=newindent;\n\nif (!trail+1) blank=0;\n\n}\n\nif (width==fmt_width && lstblank!=blank)\n\n{\n\n*blank='\\0';\n\nfprintf(xfp,\"%*s%s\\n\",indent,\"\",start);\n\nlstblank=start=trail=++blank;\n\nwidth=indent;\n\n}\n\ntrail++;\n\n}\n\nwrite=trail;\n\nreturn width;\n\n}\n\nFILE *xmlout=0;\n\nchar *outputname=0;\n\nint indent_inc=0;\n\ndouble scale_factor=1;\n\nObjDesc *stack[64];\n\nint stackdepth=0;\n\nint stackatt=0;\n\nint split=0;\n\nint splitcnt=0;\n\nint (*xmlprintf)(FILE *stream, const char *format, ...)=fprintf;\n\nvoid OpenOutput()\n\n{\n\nstatic int fileno=0;\n\nchar *newname=outputname;\n\nif (!outputname) return;\n\nif (xmlout!=stdout) fclose(xmlout);\n\nif (split)\n\n{\n\nif (fileno>99999)\n\nfprintf(stderr,\"Warning: More than %d files.\\n\",99999);\n\nnewname=(char*)malloc(strlen(outputname)+7);\n\nsprintf(newname,\"%s%0*d\",outputname,5,fileno++);\n\n}\n\nif ((xmlout=fopen(newname,\"w\"))==NULL)\n\n{\n\nfflush(stdout);\n\nfprintf(stderr,\"Can't open file %s\\n\",newname);\n\nexit(EXIT_FAILURE);\n\n}\n\nif (split) free(newname);\n\n}\n\nint hasID(ObjDesc *od)\n\n{\n\nint i;\n\nfor(i=0;i<5;i++)\n\n{\n\nif (od->att[i].type==0) break;\n\nif (od->att[i].type==1) return 1;\n\n}\n\nreturn 0;\n\n}\n\nint GenRef(ProbDesc *pd, int type)\n\n{\n\nObjDesc* od=objs+type;\n\nstatic ProbDesc pdnew;\n\n((void) 0);\n\n((void) 0);\n\n((void) 0);\n\nif (pd->type!=0)\n\n{\n\npdnew.min=0;\n\npdnew.max=od->set.size-1;\n\npdnew.type=pd->type;\n\nif (pd->type!=1)\n\n{\n\npdnew.mean=pd->mean*pdnew.max;\n\npdnew.dev=pd->dev*pdnew.max;\n\n}\n\n}\n\nreturn (int)GenRandomNum(&pdnew);\n\n}\n\nvoid FixDist(ProbDesc *pd, double val)\n\n{\n\n((void) 0);\n\npd->min=pd->max=val;\n\npd->type=0;\n\n}\n\nvoid FixReferenceSets(ObjDesc *od)\n\n{\n\nint i,j,maxref=0;\n\n((void) 0);\n\nif (od->flag++) return;\n\nfor (i=0;i<od->kids;i++)\n\n{\n\nElmDesc *ed=&(od->elm[i]);\n\nObjDesc *son=&objs[ed->id];\n\nif (!son) continue;\n\nif (ed->pd.min>1 && !hasID(son))\n\n{\n\nint size;\n\ndouble local_factor=1;\n\nfor (j=0;j<5;j++)\n\n{\n\nif (son->att[j].name[0]=='\\0') break;\n\nmaxref=(((maxref)<(objs[son->att[j].ref].set.size)?(objs[son->att[j].ref].set.size):(maxref)));\n\n}\n\nif (!maxref) break;\n\nlocal_factor=maxref/ed->pd.max;\n\nsize=(int)(GenRandomNum(&ed->pd)+0.5);\n\nsize=(int)(((1)<(size*local_factor)?(size*local_factor):(1)));\n\nson->set.size+=size;\n\nFixDist(&ed->pd,size);\n\n}\n\nFixReferenceSets(son);\n\n}\n\n}\n\nvoid FixSetSize(ObjDesc *od)\n\n{\n\nint i;\n\n((void) 0);\n\nif (od->flag++) return;\n\nfor (i=0;i<od->kids;i++)\n\n{\n\nObjDesc *son;\n\nElmDesc *ed=&(od->elm[i]);\n\nson=&objs[ed->id];\n\nif (!son) continue;\n\nif (ed->pd.min>1 && (hasID(son) || (son->type&0x04)))\n\n{\n\nint size=(int)(GenRandomNum(&ed->pd)+0.5);\n\nsize=(int)(((1)<(size*scale_factor)?(size*scale_factor):(1)));\n\nson->set.size+=size;\n\nFixDist(&ed->pd,size);\n\n}\n\nFixSetSize(son);\n\n}\n\n}\n\nvoid FixSetByEdge(char *father_name, char *son_name, int size)\n\n{\n\nint nobj=NumberOfObjs();\n\nint i,j,fixed=0;\n\nfor (i=0;i<nobj;i++)\n\n{\n\nif (!strcmp(father_name,objs[i].name))\n\n{\n\nObjDesc *od=objs+i;\n\nfor (j=0;j<od->kids;j++)\n\n{\n\nElmDesc *ed=&(od->elm[j]);\n\nObjDesc *son=objs+ed->id;\n\nif (!strcmp(son_name,son->name))\n\n{\n\nFixDist(&ed->pd,size);\n\nfixed=1;\n\n}\n\n}\n\n}\n\n}\n\n((void) 0);\n\n}\n\nvoid ClearFlags()\n\n{\n\nint i;\n\nint nobj=NumberOfObjs();\n\nfor(i=0;i<nobj;i++)\n\nobjs[i].flag=0;\n\n}\n\nvoid OpeningTag(ObjDesc *od)\n\n{\n\nstatic char cdata[1024]=\"yes\";\n\nint i;\n\nAttDesc *att=0;\n\n((void) 0);\n\n((void) 0);\n\nstack[stackdepth++]=od;\n\nxmlprintf(xmlout,\"<%s\",od->name);\n\nfor (i=0;i<5;i++)\n\n{\n\nchar *attname;\n\natt=&od->att[i];\n\nif (att->name[0]=='\\0') break;\n\nif (att->name[0]=='\\1') attname=objs[att->ref].name;\n\nelse attname=att->name;\n\nswitch(att->type)\n\n{\n\ncase 1:\n\nxmlprintf(xmlout,\" %s=\\\"%s%d\\\"\",\n\nattname,od->name,od->set.id++);\n\nbreak;\n\ncase 2:\n\n{\n\nint ref=0;\n\nif (!IdRefHook || !IdRefHook(od,att->ref,&ref))\n\nref=GenRef(&att->pd,att->ref);\n\nxmlprintf(xmlout,\" %s=\\\"%s%d\\\"\",\n\nattname,objs[att->ref].name,ref);\n\n}\n\nbreak;\n\ncase 3:\n\nif (genunf(0,1)<att->prcnt)\n\n{\n\nGenAttCDATA(od,attname,cdata);\n\nxmlprintf(xmlout,\" %s=\\\"%s\\\"\",attname,cdata);\n\n}\n\nbreak;\n\ndefault:\n\nfflush(xmlout);\n\nfprintf(stderr,\"unknown ATT type %s\\n\",attname);\n\nexit(EXIT_FAILURE);\n\n}\n\n}\n\nif (!(od->elm[0].id!=0) && (od->att[0].name[0])) xmlprintf(xmlout,\"/>\\n\");\n\nelse\n\n{\n\nxmlprintf(xmlout,\">\");\n\nif ((od->elm[0].id!=0) || od->type&0x01) xmlprintf(xmlout,\"\\n\");\n\n}\n\n}\n\nvoid ClosingTag(ObjDesc *od)\n\n{\n\n((void) 0);\n\nstackdepth--;\n\nif (od->type&0x01) xmlprintf(xmlout,\"\\n\");\n\nif ((od->att[0].name[0]) && !(od->elm[0].id!=0)) return;\n\nxmlprintf(xmlout,\"</%s>\\n\",od->name);\n\n}\n\nvoid SplitDoc()\n\n{\n\nint i;\n\nint oldstackdepth=stackdepth;\n\nfor (i=oldstackdepth-1; i>=0; i--)\n\n{\n\nindent_level-=indent_inc;\n\nClosingTag(stack[i]);\n\n}\n\nOpenOutput();\n\nfor (i=0; i<oldstackdepth; i++)\n\n{\n\nOpeningTag(stack[i]);\n\nindent_level+=indent_inc;\n\n}\n\nsplitcnt=0;\n\n}\n\nvoid GenSubtree(ObjDesc *od)\n\n{\n\nstatic int splitnow=0;\n\nint i=0;\n\nElmDesc *ed;\n\n((void) 0);\n\nif (od->type&0x10) return;\n\nif (splitnow)\n\n{\n\nSplitDoc();\n\nsplitnow=0;\n\n}\n\nOpeningTag(od);\n\nindent_level+=indent_inc;\n\nod->flag++;\n\nif (GenContents(od) && (od->elm[0].id!=0)) xmlprintf(xmlout,\"\\n\");\n\nif (od->type&0x02)\n\n{\n\ndouble sum=0,alt=genunf(0,1);\n\ni=0;\n\nif (od->flag>2-1)\n\nwhile (i<od->kids-1 && od->elm[i].rec) i++;\n\nelse\n\nwhile (i<od->kids-1 && (sum+=od->elm[i].pd.mean)<alt) i++;\n\nGenSubtree(objs+od->elm[i].id);\n\n}\n\nelse\n\nfor (i=0;i<od->kids;i++)\n\n{\n\nint num;\n\ned=&od->elm[i];\n\nnum=(int)(GenRandomNum(&ed->pd)+0.5);\n\nwhile(num--)\n\nGenSubtree(objs+ed->id);\n\n}\n\nindent_level-=indent_inc;\n\nClosingTag(od);\n\nif (split && (od->type&0x20 || (od->type&0x40 && splitcnt++>split)))\n\nsplitnow=1;\n\nod->flag--;\n\n((void) 0);\n\n}\n\nvoid Preamble(int type)\n\n{\n\nswitch(type)\n\n{\n\ncase 1:\n\nxmlprintf(xmlout,\"<?xml version=\\\"1.0\\\" standalone=\\\"yes\\\"?>\\n\");\n\nbreak;\n\ncase 2:\n\nxmlprintf(xmlout,\"<?xml version=\\\"1.0\\\"?>\\n<!DOCTYPE %s SYSTEM \\\"%s\\\">\\n\",\n\nobjs[1].name,dtd_name);\n\nbreak;\n\ncase 3:\n\nxmlprintf(stderr,\"Not yet implemented.\\n\");\n\nexit(EXIT_FAILURE);\n\n}\n\n}\n\nvoid Version()\n\n{\n\nfprintf(stderr,\"This is xmlgen, version %s.%s\\n%s\\n\",\"0\",\"92\",\"by Florian Waas (flw@mx4.org)\");\n\n}\n\nvoid Usage(char *progname)\n\n{\n\nVersion();\n\nfprintf(stderr, \"Usage: %s [ %ch ] [ %cditve ] [ %cf <factor> ] [ %co <file> ] [ %cs <cnt> ]\\n\",progname,dash,dash,dash,dash,dash);\n\nexit(EXIT_FAILURE);\n\n}\n\nvoid AlignObjs(void)\n\n{\n\nint i=0,j;\n\nObjDesc * newobjs;\n\nint nobj=NumberOfObjs();\n\nnewobjs=(ObjDesc*)malloc(sizeof(ObjDesc)*nobj);\n\nmemset(newobjs,0,sizeof(ObjDesc)*nobj);\n\nfor (i=0;i<nobj;i++)\n\nmemcpy(&newobjs[objs[i].id], &objs[i],sizeof(ObjDesc));\n\nmemcpy(objs,newobjs,sizeof(ObjDesc)*nobj);\n\nfree(newobjs);\n\nfor (i=0;i<nobj;i++)\n\nfor (j=0;j<20;j++)\n\nif (objs[i].elm[j].id!=0) objs[i].kids++;\n\n}\n\nint FindRec(ObjDesc *od, ObjDesc *search)\n\n{\n\nint i,r=0;\n\nif (od==search) r=1;\n\nelse\n\n{\n\nif(!od->flag)\n\n{\n\nod->flag=1;\n\nfor (i=0;i<od->kids;i++)\n\nr+=FindRec(objs+od->elm[i].id,search);\n\n}\n\n}\n\nod->flag=0;\n\nreturn r;\n\n}\n\nvoid CheckRecursion()\n\n{\n\nint i,j;\n\nint nobj=NumberOfObjs();\n\nObjDesc *root;\n\nfor (i=1;i<nobj;i++)\n\n{\n\nroot=objs+i;\n\nif (!(root->type&0x02)) continue;\n\nfor (j=0;j<root->kids;j++)\n\nroot->elm[j].rec=FindRec(&objs[root->elm[j].id],root);\n\n}\n\n}\n\nvoid printdtd()\n\n{\n\nint i;\n\nfor (i=0;i<dtd_len;i++)\n\nfprintf(xmlout,dtd[i]);\n\n}\n\nint main(int argc, char **argv)\n\n{\n\nint opt,stop=0,timing=0,dumpdtd=0;\n\nextern char *pmoptarg;\n\nint document_type=1;\n\nObjDesc *root;\n\nif (argc==1) Usage(argv[0]);\n\nxmlout=stdout;\n\nwhile((opt=pmgetopt(argc,argv,\n\n\"edf:o:ihvs:tw:\"\n\n))!=-1)\n\n{\n\nswitch(opt)\n\n{\n\ncase 'e':\n\ndumpdtd=1;\n\nbreak;\n\ncase 'f':\n\nscale_factor=atof(pmoptarg);\n\nif (correction)\n\nscale_factor=correction(scale_factor);\n\nbreak;\n\ncase 'o':\n\noutputname=(char*)malloc(strlen(pmoptarg)+1);\n\nstrcpy(outputname,pmoptarg);\n\nbreak;\n\ncase 's':\n\nsplit=atoi(pmoptarg);\n\nbreak;\n\ncase 'd':\n\ndocument_type=2;\n\nbreak;\n\ncase 'i':\n\nindent_inc=2;\n\nxmlprintf=xmlfmtprintf;\n\nbreak;\n\ncase 'v':\n\nVersion();\n\nstop=1;\n\nbreak;\n\ncase 't':\n\ntiming=1;\n\nbreak;\n\ncase 'w':\n\nfmt_width=atoi(pmoptarg);\n\nbreak;\n\ndefault:\n\nUsage(argv[0]);\n\n}\n\n}\n\nif (stop) exit(EXIT_SUCCESS);\n\nif (timing) timediff();\n\nOpenOutput();\n\nif (dumpdtd)\n\n{\n\nprintdtd();\n\ngoto wrapup;\n\n}\n\nAlignObjs();\n\nroot=objs+1;\n\nFixSetSize(root);\n\nClearFlags();\n\nFixReferenceSets(root);\n\nClearFlags();\n\nCheckRecursion();\n\nClearFlags();\n\nif (InitHook) InitHook();\n\nPreamble(document_type);\n\nGenSubtree(root);\n\nwrapup:\n\nfclose(xmlout);\n\nif (timing)\n\nfprintf(stderr,\"Elapsed time: %.3f sec\\n\",timediff()/1E6);\n\nreturn 0;\n\n}\n\nchar *pmoptarg;\n\nint pmoptind;\n\nchar dash='-';\n\nint pmgetopt(int argc, char * const argv[], const char *optstring)\n\n{\n\nstatic int next=1,pp=0;\n\nint i=0,found=0,len=0;\n\nchar *option,*tr;\n\npmoptind=next;\n\npmoptarg=0;\n\nif (next==argc || ( !pp && (argv[next][0])!=dash)) return -1;\n\noption=&argv[next++][pp+1];\n\nwhile(optstring+len && optstring[len]!='\\0') len++;\n\nwhile(i<len && !(found=(optstring[i]==*option))) i++;\n\nif (!found) { pp=0; return '?'; }\n\ntr=option+1;\n\nif (optstring[i+1]==':')\n\n{\n\nif (*tr) pmoptarg=tr;\n\nelse\n\nif (next<argc && argv[next][0]!=dash)\n\npmoptarg=&argv[next++][0];\n\nelse { pp=0; return '?'; }\n\n}\n\nelse if (*tr) { pp++; next--; }\n\nreturn (int)*option;\n\n}\n\nunsigned long timediff(void)\n\n{\n\nstatic struct timeval last;\n\nstruct timeval time;\n\nunsigned long diff;\n\ngettimeofday(&time,0);\n\ndiff=(time.tv_sec-last.tv_sec )*1000000L+(time.tv_usec-last.tv_usec);\n\nlast.tv_sec=time.tv_sec;\n\nlast.tv_usec=time.tv_usec;\n\nreturn diff;\n\n}\n\nstruct idrepro\n\n{\n\nint cur, out, brosout;\n\nint max, brosmax;\n\nint dir, mydir;\n\nint current;\n\nrandom_gen rk;\n\n};\n\nvoid InitReproPair(struct idrepro *, struct idrepro *,int , int );\n\nint GenItemIdRef(struct idrepro *, int *);\n\nint firstnames_len=10000;\n\nchar *firstnames[10000]={\n\n\"Frederique\",\"Shigeichiro\",\"Xinan\",\"Takahira\",\"Rildo\",\"IEEE\",\"Weiru\",\n\n\"Nitsan\",\"Taiji\",\"Takahiro\",\"Zsolt\",\"Xiaoheng\",\"Toney\",\"Tru\",\"Nishit\",\n\n\"Gudjon\",\"Satoru\",\"Mohd\",\"Golgen\",\"Nidapan\",\"Lidong\",\"Serap\",\n\n\"Domenick\",\"Woody\",\"Ebbe\",\"Tse\",\"Domenico\",\"Zeydy\",\"Hidde\",\"Fumiko\",\n\n\"Sajjad\",\"Satosi\",\"Hitofumi\",\"Sibyl\",\"Mechthild\",\"Pramod\",\"Eishiro\",\n\n\"Demin\",\"Sajjan\",\"Jinpo\",\"Kazuyasu\",\"Lijia\",\"Branimir\",\"Lijie\",\"Moie\",\n\n\"Yoshimitsu\",\"Tsz\",\"Berhard\",\"Clyde\",\"Shakhar\",\"Moriyoshi\",\"Khedija\",\n\n\"Valdiodio\",\"Xuejia\",\"Guozhong\",\"Gian\",\"Giao\",\"Sailaja\",\"Giap\",\n\n\"Takahito\",\"Dmitri\",\"Licheng\",\"Hideo\",\"Faiza\",\"Masamitsu\",\"Oguz\",\n\n\"Souichi\",\"Fai\",\"Raimond\",\"Dmitry\",\"Candida\",\"Fan\",\"Elliott\",\"Shugo\",\n\n\"Hatem\",\"Tua\",\"Odysseas\",\"Fay\",\"Danae\",\"Angel\",\"Ferdinand\",\"Candido\",\n\n\"Lunjin\",\"Mingsen\",\"Danai\",\"Vugranam\",\"Sushant\",\"Tonia\",\"Shuho\",\n\n\"Jolita\",\"Zine\",\"Jeanna\",\"Franziska\",\"Dhritiman\",\"Jeanne\",\"Mingdong\",\n\n\"Jianhao\",\"Shigeaki\",\"Fumino\",\"Piyawadee\",\"Hein\",\"Zejun\",\"Eben\",\n\n\"Tesuro\",\"Theirry\",\"Ingmar\",\"Otmar\",\"Siamak\",\"Tommaso\",\"Makato\",\n\n\"Rosalie\",\"Genki\",\"Tokuyasu\",\"Bowen\",\"Weiwu\",\"Khosrow\",\"Guadalupe\",\n\n\"Shigenori\",\"Yoshinari\",\"Jaana\",\"Wanqing\",\"Danco\",\"Neelam\",\"Shuji\",\n\n\"Kwan\",\"Lakshmi\",\"Khoa\",\"Trygve\",\"Zhenhua\",\"Yongqiao\",\"Filipe\",\n\n\"Rasiah\",\"Heather\",\"Kokou\",\"Jenwei\",\"Yongmao\",\"Aamer\",\"Radoslaw\",\n\n\"Shridhar\",\"Filipp\",\"Taegyun\",\"Morrie\",\"Elrique\",\"Chiranjit\",\"Weiye\",\n\n\"Kamakshi\",\"Mona\",\"Etsuo\",\"Serge\",\"Weiyi\",\"Fei\",\"Sergi\",\"Amabile\",\n\n\"Morris\",\"Mong\",\"Fen\",\"Moni\",\"Suvo\",\"Aiichiro\",\"Gererd\",\"Jasminko\",\n\n\"Hatim\",\"Iara\",\"Unal\",\"Yunming\",\"Shuky\",\"Udaiprakash\",\"Gadiel\",\"Gift\",\n\n\"Reuven\",\"Ramya\",\"Danel\",\"Zhigen\",\"Yakichi\",\"Arfst\",\"Soenke\",\"Karlis\",\n\n\"Kerhong\",\"Ishfaq\",\"Demos\",\"Suebskul\",\"Mooi\",\"LiMin\",\"Miomir\",\n\n\"Kendra\",\"Guttorm\",\"Moon\",\"Zdislav\",\"Brewster\",\"Tze\",\"Subhankar\",\n\n\"Lansing\",\"Nagui\",\"Guoxiang\",\"Basant\",\"Pantung\",\"Arunachalam\",\n\n\"Froduald\",\"Nobuyoshi\",\"Tzu\",\"Bernardo\",\"Barna\",\"Serif\",\"Kensei\",\n\n\"Diederik\",\"Ramzi\",\"Murthy\",\"Remco\",\"Chandrasekaran\",\"Wilmer\",\"Heng\",\n\n\"Brigham\",\"Henk\",\"Yechezkel\",\"Lobel\",\"Zorica\",\"Jeong\",\"Ulises\",\n\n\"Jinxi\",\"Kwee\",\"Yannik\",\"Tonny\",\"Navid\",\"Shushma\",\"Yannis\",\"Juyoung\",\n\n\"Premsyl\",\"Zita\",\"Terresa\",\"Menkae\",\"Navin\",\"Xiaocheng\",\"Ashish\",\n\n\"Jinya\",\"Zito\",\"Heon\",\"Insup\",\"Abdelkader\",\"Dipankar\",\"Shahab\",\n\n\"Sakthirel\",\"Gladys\",\"Kauko\",\"Shahaf\",\"Rayond\",\"Premal\",\"Elzbieta\",\n\n\"Kellie\",\"Jungsoon\",\"Nikolaos\",\"Mori\",\"Sasan\",\"Shahar\",\"Thanasis\",\n\n\"Gaetan\",\"Tesuya\",\"Arnould\",\"Limsoon\",\"Sadok\",\"Evgueni\",\"Atreye\",\n\n\"Subhada\",\"Takanari\",\"Atreyi\",\"Danil\",\"Gretta\",\"Claude\",\"Roddy\",\n\n\"Claudi\",\"Shooichi\",\"Mabry\",\"Vojin\",\"Amalendu\",\"Yaghout\",\"Ziva\",\n\n\"Khue\",\"Roded\",\"Vidar\",\"Hisao\",\"Tianruo\",\"DAIDA\",\"Moss\",\"Khun\",\n\n\"Caolyn\",\"Shietung\",\"Naftali\",\"Tadanori\",\"Szabolcs\",\"Garnet\",\"Fusako\",\n\n\"Zhanqiu\",\"Jahangir\",\"Vitali\",\"Peternela\",\"Hairong\",\"Sreenivas\",\n\n\"Jacopo\",\"Gila\",\"Hongzhu\",\"Moti\",\"Naftaly\",\"Poornachandra\",\"Herb\",\n\n\"Tran\",\"Pintsang\",\"Moto\",\"Laurentiu\",\"Gill\",\"Cathie\",\"Vitaly\",\n\n\"Sahrah\",\"Otilia\",\"Jingling\",\"Remmert\",\"Moty\",\"Hilari\",\"Reinhold\",\n\n\"Barry\",\"Katsuyuki\",\"Valeska\",\"Shigehiro\",\"Brendon\",\"Adamantios\",\n\n\"Genta\",\"Phillip\",\"Saddek\",\"Karoline\",\"Ipke\",\"Tadahiko\",\n\n\"Sivanarayana\",\"Kaijung\",\"Hilary\",\"Mohammad\",\"Yongmin\",\"Weicheng\",\n\n\"JiYoung\",\"Mayuko\",\"Lokesh\",\"Shrikanth\",\"Conal\",\"Mabo\",\"Xuejun\",\n\n\"Youngkon\",\"Radhia\",\"Janalee\",\"Gina\",\"Ziya\",\"Fumiya\",\"Ohad\",\"Vesna\",\n\n\"Jongsuk\",\"Felicidad\",\"Sungwon\",\"Gino\",\"Fumiyo\",\"Saniya\",\"Mack\",\n\n\"Mansur\",\"Teruyuki\",\"Aruna\",\"Ingemar\",\"Shigehito\",\"Abdulah\",\"Goetz\",\n\n\"Yinghua\",\"Abdelwaheb\",\"Aamod\",\"Sachar\",\"Falguni\",\"Ayonca\",\"Ymte\",\n\n\"Becky\",\"Arvind\",\"Kiyokazu\",\"Barun\",\"Mayumi\",\"Kousuke\",\"Garnik\",\n\n\"Shimshon\",\"Yucai\",\"Taizo\",\"Geoffry\",\"Baziley\",\"Ioana\",\"Shaunak\",\n\n\"Sverrir\",\"Sugwoo\",\"Mads\",\"Nikolaus\",\"Danny\",\"Teunis\",\"Ranan\",\"Dannz\",\n\n\"Remko\",\"Guther\",\"Yuqun\",\"Sanjeeva\",\"Fox\",\"Anyuan\",\"Susuma\",\"Xuedong\",\n\n\"Sadun\",\"Heping\",\"Pranjal\",\"Heejo\",\"Xiaoqiang\",\"Paris\",\"Ebru\",\n\n\"Sampalli\",\"Heeju\",\"Sashi\",\"Mohammed\",\"Radhakrishnan\",\"Susumu\",\n\n\"Hsiangchu\",\"Marsal\",\"Taisook\",\"Sudhanshu\",\"Youjian\",\"Bartek\",\n\n\"Shahid\",\"Mandell\",\"Boutros\",\"Eirik\",\"Rance\",\"Sariel\",\"Kerryn\",\n\n\"Harngdar\",\"Giri\",\"Leaf\",\"Gianluca\",\"Wayne\",\"Parke\",\"Harjit\",\"Leah\",\n\n\"Mariusz\",\"Alois\",\"Jordanka\",\"Udi\",\"Lucian\",\"Chikako\",\"Howell\",\n\n\"Geraldo\",\"Angus\",\"Djenana\",\"Kasidit\",\"Udo\",\"Sachem\",\"Bader\",\n\n\"Masasuke\",\"Siddarth\",\"Kwok\",\"Randi\",\"Magy\",\"Conrado\",\"Kagan\",\n\n\"Yakkov\",\"Yinlin\",\"Maha\",\"Rafols\",\"Anoosh\",\"Prodip\",\"Mizuhito\",\n\n\"Randy\",\"Houman\",\"Pascal\",\"Pohua\",\"Kwangyoen\",\"Debaprosad\",\"Yucel\",\n\n\"Chiradeep\",\"Pasqua\",\"Zengping\",\"Sedat\",\"Ziyad\",\"Rutger\",\"Holgard\",\n\n\"Tadahiro\",\"Qingxiang\",\"Aloke\",\"Gita\",\"Hailing\",\"Aksel\",\"Boguslaw\",\n\n\"Pranas\",\"Leucio\",\"Piyush\",\"Pranav\",\"Jiakeng\",\"Pragnesh\",\"Maia\",\n\n\"Pranay\",\"Mayuri\",\"Rosalyn\",\"Lech\",\"Katsuo\",\"Goncalo\",\"Maik\",\n\n\"Somnath\",\"Yongdong\",\"Jouko\",\"Chaosheng\",\"Abdelaziz\",\"Jianwen\",\n\n\"Shuzo\",\"Alejandra\",\"Maja\",\"Lalit\",\"Dante\",\"Alejandro\",\"Hidekazu\",\n\n\"Hirochika\",\"Juichirou\",\"Ugo\",\"Ranga\",\"Margareta\",\"Alenka\",\"Gunilla\",\n\n\"Oldrich\",\"Sven\",\"Fun\",\"Selwyn\",\"Tomokazu\",\"Dayanand\",\"Shuichi\",\n\n\"Honesty\",\"Make\",\"Teiji\",\"Yuguang\",\"Leen\",\"Lucien\",\"Steen\",\"Jagoda\",\n\n\"Zhiguo\",\"Niteen\",\"Adhemar\",\"Mahmut\",\"Joydip\",\"Nadjib\",\"Sachin\",\n\n\"Sachio\",\"Tamiya\",\"Jianhua\",\"Along\",\"Aral\",\"Aram\",\"Aran\",\"Lihong\",\n\n\"Suzette\",\"Jianhui\",\"Jamaludin\",\"Xinyu\",\"Sukumar\",\"Jouni\",\"Lenore\",\n\n\"Doohun\",\"Kenroku\",\"Divier\",\"Poorav\",\"Ravishankar\",\"Sanjai\",\"Khatoun\",\n\n\"Zijian\",\"Malu\",\"Ottavia\",\"Marsha\",\"Kolar\",\"Youpyo\",\"Sanjay\",\n\n\"Avishai\",\"Honglan\",\"Kristian\",\"Cristinel\",\"Kiam\",\"Feiyu\",\"Inderjeet\",\n\n\"Hongzue\",\"Hideyuki\",\"Nathalie\",\"Arch\",\"Kwun\",\"Xinglin\",\"Hinrich\",\n\n\"Arco\",\"Chikara\",\"Boriana\",\"Kristen\",\"Radhika\",\"Tomoyuki\",\"Mana\",\n\n\"Tsuneo\",\"Krister\",\"Chenxi\",\"Sreekrishna\",\"Eberhardt\",\"Mang\",\"Mani\",\n\n\"Nectarios\",\"Abdulla\",\"Paloma\",\"Luerbio\",\"Isaac\",\"Manu\",\"Subhash\",\n\n\"Genevieve\",\"Baoqiu\",\"Marsja\",\"Ortrud\",\"Kwangsub\",\"Bezalel\",\"Chenye\",\n\n\"Fuqing\",\"Kellyn\",\"Leif\",\"Jessie\",\"Ortrun\",\"Chenyi\",\"Ulf\",\"Minghong\",\n\n\"Uli\",\"Amstein\",\"Troy\",\"Lein\",\"Stein\",\"Ibibia\",\"Tetsurou\",\"Weidon\",\n\n\"Shunichi\",\"Yuuichi\",\"Petter\",\"Ult\",\"Aluzio\",\"Stepehn\",\"Koldo\",\n\n\"Shigeo\",\"Jackson\",\"Uma\",\"Shigeu\",\"Eckart\",\"Muneo\",\"Valeri\",\n\n\"Zhenbing\",\"Mohamadou\",\"Djelloul\",\"Tzvetan\",\"Hatsukazu\",\"Kayoko\",\n\n\"Parto\",\"Barton\",\"Srinidhi\",\"Dekang\",\"Conor\",\"Duangkaew\",\"Quingbo\",\n\n\"Shaleah\",\"Valery\",\"Foong\",\"Jeane\",\"Achilleas\",\"Fayez\",\"Neven\",\n\n\"Valter\",\"Yishai\",\"Cordelia\",\"Kensyu\",\"Nahid\",\"Martial\",\"Kien\",\"Ung\",\n\n\"Manibrata\",\"Zhensheng\",\"Toshimitsu\",\"Uno\",\"Yishay\",\"Godehard\",\"Duke\",\n\n\"Heekeun\",\"DeForest\",\"Oscal\",\"Xiaoshan\",\"Jayson\",\"Shounak\",\"Arlette\",\n\n\"Hyuckchul\",\"Oscar\",\"Vatsa\",\"Kristin\",\"Jaber\",\"Mara\",\"Marc\",\n\n\"Venkatesan\",\"Dzung\",\"Mari\",\"Mark\",\"Hiroyasu\",\"Marl\",\"Christoper\",\n\n\"Yuchang\",\"Mart\",\"Rosella\",\"Niranjan\",\"Mary\",\"Wojceich\",\"Susanna\",\n\n\"Zongyan\",\"Junsik\",\"Susanne\",\"Theron\",\"Bangqing\",\"Nirmal\",\"Yefim\",\n\n\"Uinam\",\"Shmuel\",\"Aria\",\"Aleksandar\",\"Keiichiro\",\"Waiman\",\"Arie\",\n\n\"Arif\",\"Yonghoan\",\"Beshir\",\"Berna\",\"Remzi\",\"Doowon\",\"Bernd\",\n\n\"Kazuhide\",\"Freyja\",\"Koichi\",\"Vishwani\",\"Berni\",\"Lena\",\"Nahla\",\"Aris\",\n\n\"Shichao\",\"Lene\",\"Wuxu\",\"Masoud\",\"Paddy\",\"Leni\",\"Khaled\",\"Rosine\",\n\n\"Munir\",\"Bernt\",\"Mohan\",\"Rafael\",\"Jiong\",\"Matk\",\"Badri\",\"Dipayan\",\n\n\"Niclas\",\"Spyrose\",\"Ronghao\",\"Gully\",\"Mats\",\"Dung\",\"Matt\",\"Vishu\",\n\n\"Rosli\",\"Vishv\",\"Nechama\",\"True\",\"Chuanti\",\"Owen\",\"Geoff\",\"Sanjit\",\n\n\"Shaibal\",\"Wonhee\",\"Kitty\",\"Sanjiv\",\"Janche\",\"Divine\",\"Tsutomu\",\n\n\"Nevin\",\"Christophe\",\"Basem\",\"Nevio\",\"Haldon\",\"Odoardo\",\"Martien\",\n\n\"Uri\",\"Sarita\",\"Sigeru\",\"Leon\",\"Chinho\",\"Gonzalo\",\"Urs\",\"Visit\",\n\n\"Emran\",\"Gopalakrishnan\",\"Oddvar\",\"Macha\",\"Elgin\",\"Saeed\",\n\n\"Ramachenga\",\"Sudharsan\",\"Masanao\",\"Satyanarayana\",\"Hyuncheol\",\n\n\"Edwin\",\"Gritta\",\"Masadi\",\"Denis\",\"Weijing\",\"Percy\",\"Mrinalini\",\n\n\"Slavian\",\"Changho\",\"Deniz\",\"Nakhoon\",\"Hitomi\",\"Boalin\",\"Uta\",\n\n\"Mokhtar\",\"Ute\",\"Constantijn\",\"Aloys\",\"Debatosh\",\"Vidya\",\"Aleksander\",\n\n\"Serenella\",\"Gad\",\"JoAnna\",\"Mitchel\",\"JoAnne\",\"Kristof\",\"Gal\",\"Ennio\",\n\n\"Utz\",\"Gao\",\"Moheb\",\"Luigi\",\"Erzsebet\",\"Younwoo\",\"Anestis\",\"Gay\",\n\n\"Khalid\",\"Rafail\",\"Keung\",\"Mantis\",\"Olivera\",\"Berry\",\"Khalil\",\"Arnd\",\n\n\"Florian\",\"Vivian\",\"Arne\",\"Duri\",\"Christfried\",\"Alagu\",\"Mariangiola\",\n\n\"Duro\",\"Susanta\",\"Arno\",\"Shawna\",\"Jixiang\",\"Basil\",\"Basim\",\"Maya\",\n\n\"Chaoyi\",\"Kshitij\",\"Qunsheng\",\"Frazer\",\"Anneke\",\"Gaurav\",\"Odinaldo\",\n\n\"Chuanyi\",\"Kristina\",\"Kazunori\",\"Rajmohan\",\"Kristine\",\"Yurii\",\"Aron\",\n\n\"Baocai\",\"Yurij\",\"King\",\"Kinh\",\"Torsten\",\"Vincent\",\"Kristinn\",\n\n\"Rosita\",\"Berto\",\"Shai\",\"Uwe\",\"Martijn\",\"Sham\",\"Jacqueline\",\"Shan\",\n\n\"Bogdan\",\"Shao\",\"Hidefumi\",\"Yuriy\",\"Nigel\",\"Werner\",\"Anneli\",\"Miquel\",\n\n\"Alain\",\"Shaw\",\"Alair\",\"Shay\",\"Shaz\",\"Feixiong\",\"Francoise\",\n\n\"Subhrajyoti\",\"Reinhard\",\"Constantine\",\"Herbert\",\"Tomofumi\",\"Sanjoy\",\n\n\"Isamu\",\"Phule\",\"Haldun\",\"Xiaobin\",\"Kazuhiko\",\"Constantino\",\"Temple\",\n\n\"Huican\",\"Fabrizio\",\"Mostafa\",\"Sastry\",\"Pradeep\",\"KayLiang\",\"Jaques\",\n\n\"Gen\",\"Denny\",\"Krassimir\",\"Ger\",\"Mahendra\",\"Huiqun\",\"Steve\",\n\n\"Charmane\",\"Dinkar\",\"Akeel\",\"Saeko\",\"Utpal\",\"Stevo\",\"Padma\",\"Arra\",\n\n\"Mohit\",\"Volkmar\",\"Salvador\",\"Zhaofang\",\"Sorina\",\"Rimli\",\"Billie\",\n\n\"Zeljko\",\"Seongbae\",\"Seshu\",\"Yagil\",\"Uzi\",\"Supot\",\"Nahum\",\"Yuichiro\",\n\n\"Hercules\",\"Tayeb\",\"Mingzeng\",\"Masaki\",\"Armond\",\"Hauke\",\"Jaroslava\",\n\nYou canât perform that action at this time."
    }
}