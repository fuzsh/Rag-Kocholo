{
    "id": "dbpedia_4648_3",
    "rank": 2,
    "data": {
        "url": "https://patents.google.com/patent/US8782236B1/en",
        "read_more_link": "",
        "language": "en",
        "title": "US8782236B1 - Managing resources using resource expiration data - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/27/28/99/4b788d3f9451e5/US08782236-20140715-D00000.png",
            "https://patentimages.storage.googleapis.com/0e/7c/64/1fe7bdaa8a994f/US08782236-20140715-D00001.png",
            "https://patentimages.storage.googleapis.com/30/0c/f9/429b8e191d0255/US08782236-20140715-D00002.png",
            "https://patentimages.storage.googleapis.com/07/8d/1d/3f9916304b9af2/US08782236-20140715-D00003.png",
            "https://patentimages.storage.googleapis.com/c4/2c/6f/fd762649bdfc70/US08782236-20140715-D00004.png",
            "https://patentimages.storage.googleapis.com/f1/81/2a/1a992dd2b1162f/US08782236-20140715-D00005.png",
            "https://patentimages.storage.googleapis.com/7a/60/ab/893f73d6f3bae1/US08782236-20140715-D00006.png",
            "https://patentimages.storage.googleapis.com/31/13/b5/01e5a6dbe35116/US08782236-20140715-D00007.png",
            "https://patentimages.storage.googleapis.com/6a/2e/2e/22b42a2d9a45e6/US08782236-20140715-D00008.png",
            "https://patentimages.storage.googleapis.com/ff/e3/d0/fc840d27c323de/US08782236-20140715-D00009.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-06-16T00:00:00",
        "summary": "",
        "meta_description": "Resource management techniques, such as cache optimization, are employed to organize resources within caches such that the most requested content (e.g., the most popular content) is more readily available. A service provider utilizes content expiration data as indicative of resource popularity. As resources are requested, the resources propagate through a cache server hierarchy associated with the service provider. More frequently requested resources are maintained at edge cache servers based on shorter expiration data that is reset with each repeated request. Less frequently requested resources are maintained at higher levels of a cache server hierarchy based on longer expiration data associated with cache servers higher on the hierarchy.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US8782236B1/en",
        "text": "BACKGROUND\n\nGenerally described, computing devices and communication networks can be utilized to exchange information. In a common application, a computing device can request content from another computing device via the communication network. For example, a user at a personal computing device can utilize a software browser application to request a Web page from a server computing device via the Internet. In such embodiments, the user computing device can be referred to as a client computing device and the server computing device can be referred to as a content provider.\n\nContent providers are generally motivated to provide requested content to client computing devices often with consideration of efficient transmission of the requested content to the client computing device and/or consideration of a cost associated with the transmission of the content. For larger scale implementations, a content provider may receive content requests from a high volume of client computing devices which can place a strain on the content provider's computing resources. Additionally, the content requested by the client computing devices may have a number of components, which can further place additional strain on the content provider's computing resources.\n\nWith reference to an illustrative example, a requested Web page, or original content, may be associated with a number of additional resources, such as images or videos, that are to be displayed with the Web page. In one specific embodiment, the additional resources of the Web page are identified by a number of embedded resource identifiers, such as uniform resource locators (âURLsâ). In turn, software on the client computing devices typically processes embedded resource identifiers to generate requests for the content. Often, the resource identifiers associated with the embedded resources reference a computing device associated with the content provider such that the client computing device would transmit the request for the additional resources to the referenced content provider computing device. Accordingly, in order to satisfy a content request, the content provider would provide client computing devices data associated with the Web page as well as the data associated with the embedded resources.\n\nSome content providers attempt to facilitate the delivery of requested content, such as Web pages and/or resources identified in Web pages, through the utilization of a content delivery network (âCDNâ) service provider. A CDN server provider typically maintains a number of computing devices in a communication network that can maintain content from various content providers. In turn, content providers can instruct, or otherwise suggest to, client computing devices to request some, or all, of the content provider's content from the CDN service provider's computing devices.\n\nWith reference to previous illustrative example, the content provider can leverage a CDN service provider with the modification or substitution of resource identifiers associated with the embedded resources. Specifically, the resource identifiers can reference a computing device associated with the CDN service provider such that the client computing device would transmit the request for the additional resources to the referenced CDN service provider computing device. Typically, the content provider facilitates the utilization of a CDN provider by including CDN-provider specific resources identifiers in requested content (e.g., Web pages). This approach generally corresponds to an âofflineâ process implemented by the content provider in advance of receipt of a request for the original content from the client computing devices. Accordingly, modifications to resource identifiers, such as to provide alternative resources identifiers for the same CDN service provider, to provide additional information utilized by CDN service providers in processing the request for content and/or to identify alternative CDN service providers, can become inefficient as they typically require implementation of the offline process the content provider.\n\nAs with content providers, CDN providers are also generally motivated to provide requested content to client computing devices often with consideration of efficient transmission of the requested content to the client computing device and/or consideration of a cost associated with the transmission of the content. Accordingly, CDN service providers often consider factors such as latency of delivery of requested content in order to meet service level agreements or to generally improve the quality of delivery service.\n\nBRIEF DESCRIPTION OF THE DRAWINGS\n\nThe foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:\n\nFIG. 1 is a block diagram illustrative of content delivery environment including a number of client computing devices, content provider, a content delivery network service provider, and a network computing and storage provider;\n\nFIG. 2 is a block diagram of the content delivery environment of FIG. 1 illustrating the registration of a content provider with a content delivery service provider;\n\nFIG. 3 is a block diagram of the content delivery environment of FIG. 1 illustrating the generation and processing of a content request from a client computing device to a content provider;\n\nFIG. 4 is a block diagram of the content delivery environment of FIG. 1 illustrating one embodiment of the generation and processing of a DNS query corresponding to an embedded resource from a client computing device to a content delivery network service provider;\n\nFIG. 5 is a block diagram of the content delivery environment of FIG. 1 illustrating the generation and processing of embedded resource requests from a client computing device to a content delivery network service provider;\n\nFIGS. 6A and 6B are block diagrams of a hierarchy of cache server components illustrative of the processing of content requests;\n\nFIG. 7A is a flow diagram illustrating one embodiment of a request processing routine implemented by an embodiment of the hierarchy of cache server components of FIG. 6; and\n\nFIG. 7B is a flow diagram illustrating one embodiment of a routine for adjusting resident time assigned to a resource stored by an embodiment of the hierarchy of cache server components of FIG. 6.\n\nDETAILED DESCRIPTION\n\nGenerally described, the present disclosure is directed to content management techniques for responding to resource requests from a client computing device to a network computing component via a content delivery network (âCDN). Specifically, aspects of the disclosure will be described with regard to management of resources within a resource cache component hierarchy. The management of the objects can be implemented in a manner such that the most frequently requested content (e.g., most popular resources) is available for delivery by the most accessible portions of the resource cache component hierarchy. Additionally, less frequently request content can be distributed within the resource cache component hierarchy to less accessible portions of the resource cache component hierarchy. Although various aspects of the disclosure will be described with regard to illustrative examples and embodiments, one skilled in the art will appreciate that the disclosed embodiments and examples should not be construed as limiting.\n\nA service provider, such as a CDN service provider, can maintain a hierarchy of cache servers to provide cached resources. In certain embodiments, a service provider can manage resource expiration data associated with the resources maintained in the resource cache component hierarchy as indicative of the popularity, or relative popularity, of the resource. In the discussion below, embodiments are discussed with respect to expiration data that can be described as a time to live, after which the cache server component deletes the resource, designates the resource as stale or allows the storage location corresponding to the expired resource to be overwritten. Accordingly, the expiration data may be specified in terms of a measured unit of time. However, one skilled in the relevant art will appreciate that the expiration data may be specified in terms of other measurable activities, such as frequency of requests, and the like.\n\nTraditionally, cache server components within a cache server hierarchy associate resource expiration data such that the most recently requested resource is associated with the highest expiration data (e.g., the most recently requested resource is associated with the longest time to live). In this embodiment, however, the cache server components within the resource cache component hierarchy assign expiration data, such as a resident time, to resources based upon the position of the respective cache server component within the resource cache component hierarchy and the relative frequency in which the resource has been requested. Specifically, in one example, resources are assigned shorter expiration data for the cache servers at the lowest levels of the resource cache component hierarchy that are typically the primary cache components fielding resource requests. The lowest level of the resource cache component hierarchy is often referred to as the âedgeâ of the resource cache component hierarchy. Additionally, resources are assigned longer expiration data in successively higher levels of the resource cache component hierarchy. Additionally, the expiration data for a given resource may be modified by a cache server component when a request for that resource is received by that cache server component such that content will reside within the various cache server components according to the frequency in which the content is requested by client computing devices.\n\nFor less popular resources, the resource will migrate through the cache server components of a resource cache component hierarchy as the expiration data expires unless subsequent requests for the resources are received. In one example, a newly obtained resource is cached through several components of a resource cache component hierarchy after the processing of the initial request for the resource. At each level of the resource cache component hierarchy, the resource is associated with shorter expiration data, such that the shortest expiration data with be assigned at the edge of a resource cache component hierarchy. If the requested resource is not requested, the version of the resource stored at each level of the hierarchy will successively expire. Thus, the expiration of the version of the resource has the effect of âpushingâ the resource up the resource cache component hierarchy, in which the version of the resource is associated with longer expiration data. Subsequent requests for the resource at the edge servers may then cause the edge servers to request the resource from the cache server components higher in the resource cache component hierarchy. In another example, if the cache server components receive requests for the resource prior to the expiration of the expiration data, the expiration data is reset and the resource is maintained at the cache server component and the expiration data does not need to be modified. Thus, more popular content may be maintained at the edge cache servers, as their expiration data may be frequently reset.\n\nFIG. 1 is a block diagram illustrative of a content delivery environment 100 for the management and processing of content requests. As illustrated in FIG. 1, the content delivery environment 100 includes a number of client computing devices 102 (generally referred to as clients) for requesting content from a content provider and/or a CDN service provider. In an illustrative embodiment, the client computing devices 102 can correspond to a wide variety of computing devices including personal computing devices, laptop computing devices, hand-held computing devices, terminal computing devices, mobile devices, wireless devices, various electronic devices and appliances and the like. In an illustrative embodiment, the client computing devices 102 include necessary hardware and software components for establishing communications over a communication network 108, such as a wide area network or local area network. For example, the client computing devices 102 may be equipped with networking equipment and browser software applications that facilitate communications via the Internet or an intranet.\n\nAlthough not illustrated in FIG. 1, each client computing device 102 utilizes some type of local DNS resolver component, such as a DNS Name server, that generates the DNS queries attributed to the client computing device. In one embodiment, the local DNS resolver component may be provided by an enterprise network to which the client computing device 102 belongs. In another embodiment, the local DNS resolver component may be provided by an Internet Service Provider (ISP) that provides the communication network connection to the client computing device 102.\n\nThe content delivery environment 100 can also include a content provider 104 in communication with the one or more client computing devices 102 via the communication network 108. The content provider 104 illustrated in FIG. 1 corresponds to a logical association of one or more computing devices associated with a content provider. Specifically, the content provider 104 can include a web server component 110 corresponding to one or more server computing devices for obtaining and processing requests for content (such as Web pages) from the client computing devices 102. The content provider 104 can further include an origin server component 112 and associated storage component 114 corresponding to one or more computing devices for obtaining and processing requests for network resources from the CDN service provider.\n\nOne skilled in the relevant art will appreciate that the content provider 104 can be associated with various additional computing resources, such additional computing devices for administration of content and resources, DNS name servers, and the like. For example, although not illustrated in FIG. 1, the content provider 104 can be associated with one or more DNS name server components that would be authoritative to resolve client computing device DNS queries corresponding to a domain of the content provider (e.g., return an IP address responsive to the DNS query). A DNS name server component is considered to be authoritative to a DNS query if the DNS nameserver can completely resolve the query by providing a responsive IP address. Additionally, the content provider 104 may omit some of the components illustrated in FIG. 1, such as the origin server 112.\n\nWith continued reference to FIG. 1, the content delivery environment 100 can further include a CDN service provider 106 in communication with the one or more client computing devices 102 and the content provider 104 via the communication network 108. The CDN service provider 106 illustrated in FIG. 1 corresponds to a logical association of one or more computing devices associated with a CDN service provider. Specifically, the CDN service provider 106 can include a number of Point of Presence (âPOPâ) locations 116, 122, 128 that correspond to nodes on the communication network 108. Each CDN POP 116, 122, 128 includes a DNS component 118, 124, 130 made up of a number of DNS server computing devices for resolving DNS queries from the client computers 102.\n\nEach CDN POP 116, 122, 128 also includes a resource cache component 120, 126, 132 made up of a number of cache server computing devices for storing resources from content providers and transmitting various requested resources to various client computers. The DNS components 118, 124 and 130 and the resource cache components 120, 126, 132 may further include additional software and/or hardware components that facilitate communications including, but not limited to, load balancing or load sharing software/hardware components.\n\nAs discussed in detail with respect to FIGS. 6A and 6B below, the resource cache components may be logically organized in a hierarchy, where resource cache components located close to client computing devices (e.g. edge cache components) populate the lower levels of the resource cache component hierarchy and resource cache components located further from the client computing devices populate the higher levels of the resource cache component hierarchy. Still further, the resource cache components 120, 126, 132 may include hardware and/or software components for tracking the expiration of resources stored on behalf of one or more various content providers 104. In an embodiment, the expiration tracking components may assign an expiration time (e.g., time to live) to at least a portion of the resources stored within their respective resource cache component and provided to other resource cache components with the cache server hierarchy. In another embodiment, the expiration tracking components can monitor a residence time during which resources are stored by their resource cache component. The expiration time and residence time may be employed by the resource cache components 120, 126, 132 for expiring stored resources.\n\nIn an illustrative embodiment, the DNS component 118, 124, 130 and resource cache component 120, 126, 132 are considered to be logically grouped, regardless of whether the components, or portions of the components, are physically separate. Additionally, although the CDN POPs 116, 122, 128 are illustrated in FIG. 1 as logically associated with the CDN Provider 106, the CDN POPs will be geographically distributed throughout the communication network 108 in a manner to best serve various demographics of client computing devices 102. Additionally, one skilled in the relevant art will appreciate that the CDN service provider 106 can be associated with various additional computing resources, such as additional computing devices for administration of content and resources, and the like. Still further, although the resource cache components 120, 126, 132 are discussed as being associated with the CDN service provider 106, one skilled in the relevant art will appreciate that the resource cache components 120, 126, 132 may be provided different service providers, independently or on behalf content provider 104 or CDN server provider 106.\n\nWith reference now to FIGS. 2-6, the interaction between various components of the content delivery environment 100 of FIG. 1 will be illustrated. For purposes of the example, however, the illustration has been simplified such that many of the components utilized to facilitate communications are not shown. One skilled in the relevant art will appreciate that such components can be utilized and that additional interactions would accordingly occur without departing from the spirit and scope of the present disclosure.\n\nWith reference to FIG. 2, an illustrative interaction for registration of a content provider 104 with the CDN service provider 106 will be described. As illustrated in FIG. 2, the CDN content registration process begins with registration of the content provider 104 with the CDN service provider 106. In an illustrative embodiment, the content provider 104 utilizes a registration application program interface (âAPIâ) to register with the CDN service provider 106 such that the CDN service provider 106 can provide content on behalf of the content provider 104. The registration API includes the identification of the origin server 112 of the content provider 104 that will provide requested resources to the CDN service provider 106. Additionally, the registration API can further facilitate the specification of content provider service levels, financial cost criteria, or other content provider specified criteria that can be utilized by the CDN service provider 106 in request routing processing.\n\nOne skilled in the relevant art will appreciate that upon identification of appropriate origin servers 112, the content provider 104 can begin to direct requests for content from client computing devices 102 to the CDN service provider 106. Specifically, in accordance with DNS routing principles, a client computing device request corresponding to a resource identifier would eventually be directed toward a CDN POP 116, 122, 128 associated with the CDN service provider 106. In the event that the resource cache component 120, 126, 132 of a selected CDN POP does not have a copy of a resource requested by a client computing device 102, owing to the expiration of the resource from the resource cache component 120, 126, 132 of the selected CDN POP in accordance with the expiration data assigned to the resource, the resource cache component 120, 126, 132 will request the resource. Such a resource request may be directed to one or more hierarchically superior resource cache components or, if the resource is also absent from these hierarchically superior resource cache components, the origin server 112 previously registered by the content provider 104.\n\nWith continued reference to FIG. 2, upon receiving the registration API, the CDN service provider 106 obtains and processes the registration information. In an illustrative embodiment, the CDN service provider 106 can then generate additional information that will be used by the client computing devices 102 as part of the content requests. The additional information can include, without limitation, client identifiers, such as client identification codes, content provider identifiers, such as content provider identification codes, executable code for processing resource identifiers, such as script-based instructions, the like. In another embodiment, in addition or alternatively, the additional information can include file type identifiers which can include file type information. Additional information may also include or be associated with requirements for selecting a POP for processing the requested content, such as quality of service criteria which can include information as to compression rates, processing power, processing speed, and/or bandwidth of the POP, and the like. One skilled in the relevant art will appreciate that various types of additional information may be generated by the CDN service provider 106 and that the additional information may be embodied in any one of a variety of formats.\n\nThe CDN service provider 106 returns an identification of applicable domains for the CDN service provider (unless it has been previously provided) and any additional information to the content provider 104. In turn, the content provider 104 can then process the stored content with content provider specific information. In one example, as illustrated in FIG. 2, the content provider 104 translates resource identifiers originally directed toward a domain of the origin server 112 to a domain corresponding to the CDN service provider. The translated URLs are embedded into requested content in a manner such that DNS queries for the translated URLs will resolve to a DNS server corresponding to the CDN service provider 106 and not a DNS server corresponding to the content provider 104.\n\nGenerally, the identification of the resources originally directed to the content provider 104 will be in the form of a resource identifier that can be processed by the client computing device 102, such as through a browser software application. In an illustrative embodiment, the resource identifiers can be in the form of a uniform resource locator (âURLâ). Because the resource identifiers are included in the requested content directed to the content provider, the resource identifiers can be referred to generally as the âcontent provider URL.â For purposes of an illustrative example, the content provider URL can identify a domain of the content provider 104 (e.g., contentprovider.com), generally referred to as a DNS portion of the URL, a name of the resource to be requested (e.g., âresource.jpgâ) and a path where the resource will be found (e.g., âpathâ), the path and resource generally referred to as a path portion of the URL. In this illustrative example, the content provider URL has the form of:\n\nhttp://www.contentprovider.com/path/resource.jpg\n\nDuring an illustrative translation process, the content provider URL is modified such that requests for the resources associated with the translated URLs resolve to a CDN POP associated with the CDN service provider 106. In one embodiment, the translated URL identifies the domain of the CDN service provider 106 (e.g., âcdnprovider.comâ), the same name of the resource to be requested (e.g., âresource.xxxâ) and the same path where the resource will be found (e.g., âpathâ). One skilled in the relevant art will appreciate that the name information and the path information is not accessible to a DNS nameserver as a part of DNS query processing. Accordingly, the portion of the URL including the domain and any preceding information is generally referred to as the âDNS portionâ of the URL.\n\nAdditionally, the translated URL can include additional processing information (e.g., âadditional informationâ) in the DNS portion of the URL. The additional information can correspond to any one of a variety of information utilized by the CDN service provider 106 to process a corresponding DNS query. The translated URL would have the form of:\n\nhttp://additional_information.cdnprovider.com/path/resource.xxx\n\nIn another embodiment, the information associated with the CDN service provider 106 is included in a modified URL, such as through prepending or other techniques, such that the translated URL can maintain all of the information associated with the original URL. In this embodiment, the translated URL would have the form of:\n\nhttp://additional_information.cdnprovider.com/www.contentprovider.com/path/resource.xxx\n\nWith reference now to FIG. 3, after completion of the registration and translation processes illustrated in FIG. 2, a client computing device 102 subsequently generates a content request that is received and processed by the content provider 104, such as through the Web server 110. In accordance with an illustrative embodiment, the request for content can be in accordance with common network protocols, such as the hypertext transfer protocol (âHTTPâ). Upon receipt of the content request, the content provider 104 identifies the appropriate responsive content. In an illustrative embodiment, the requested content can correspond to a Web page that is displayed on the client computing device 102 via the processing of information, such as hypertext markup language (âHTMLâ), extensible markup language (âXMLâ), and the like. The requested content can also include a number of embedded resource identifiers, described above, that corresponds to resource objects that should be obtained by the client computing device 102 as part of the processing of the requested content. The embedded resource identifiers can be generally referred to as original resource identifiers or original URLs.\n\nUpon receipt of the requested content, the client computing device 102, such as through a browser software application, begins processing any of the markup code included in the content and attempts to acquire the resources identified by the embedded resource identifiers. Accordingly, the first step in acquiring the content corresponds to the issuance, by the client computing device 102 (through its local DNS resolver), of a DNS query for the original URL resource identifier that results in the identification of a DNS server authoritative to the â.â and the âcomâ portions of the translated URL. After resolving the â.â and âcomâ portions of the embedded URL, the client computing device 102 then issues a DNS query for the resource URL that results in the identification of a DNS server authoritative to the â.cdnproviderâ portion of the embedded URL. The issuance of DNS queries corresponding to the â.â and the âcomâ portions of a URL are well known and have not been illustrated.\n\nWith reference now to FIG. 4, in an illustrative embodiment, the successful resolution of the âcdnproviderâ portion of the original URL identifies a network address, such as an IP address, of a DNS server associated with the CDN service provider 106. In one embodiment, the IP address can be a specific network address unique to a DNS server component of a POP. In another embodiment, the IP address can be shared by one or more CDN POPs. In this embodiment, a further DNS query to the shared IP address utilizes a one-to-many network routing schema, such as anycast, such that a specific POP will receive the request as a function of network topology. For example, in an anycast implementation, a DNS query issued by a client computing device 102 to a shared IP address will arrive at a DNS server component logically having the shortest network topology distance, often referred to as network hops, from the client computing device. The network topology distance does not necessarily correspond to geographic distance. However, in some embodiments, the network topology distance can be inferred to be the shortest network distance between a client computing device 102 and a POP. It will be appreciated by one skilled in the relevant art that a number of ways exist to determine network topology distance.\n\nWith continued reference to FIG. 4, in either of the above identified embodiments (or any other embodiment), a specific DNS server in the DNS component 118 of a CDN POP 116 receives the DNS query corresponding to the original URL from the client computing device 102. Once one of the DNS servers in the DNS component 118 receives the request, the specific DNS server attempts to resolve the request. In one illustrative embodiment as shown in FIG. 4, a specific DNS server resolves the DNS query by identifying an IP address of a cache server component that will process the request for the requested resource. As will be described further below in reference to FIG. 6, a selected resource cache component can process the request by either providing the requested resource if it is available or attempting to obtain the requested resource from another source, such as a peer cache server computing device, a hierarchically superior cache server computing device, or the origin server 112 of the content provider 104.\n\nThe CDN service provider 106 can utilize the additional information (e.g., the âadditional informationâ) included in the modified URL to select a more appropriate POP. In one aspect, the CDN service provider 106 can utilize the additional information to select from a set of DNS nameservers identified as satisfying routing criteria including, but are not limited to, financial cost to content provider 104, network performance (e.g., âinternet weatherâ) service level criteria, content provider specified, etc.\n\nIn one example, the CDN service provider 106 can attempt to direct a DNS query to DNS severs according to geographic criteria. The geographic criteria can correspond to a geographic-based regional service plans contracted between the CDN service-provider 106 and the content provider 104 in which various CDN service provider 106 POPs are grouped into geographic regions. Accordingly, a client computing device 102 DNS query received in a region not corresponding to the content provider's regional plan may be better processed by a DNS nameserver in region corresponding to the content provider's regional plan. In this example, the DNS nameserver component 118 may also obtain geographic information from the client directly (such as information provided by the client computing device or ISP) or indirectly (such as inferred through a client computing device's IP address).\n\nIn still a further example, the CDN service provider 106 can attempt to direct a DNS query to DNS servers according to network performance criteria. The network performance criteria can correspond to measurements of network performance for transmitting data from the CDN service provider POPs to the client computing device 102. Examples of network performance metrics can include network data transfer latencies (measured by the client computing device or the CDN service provider 106, network data error rates, and the like.\n\nIn an illustrative embodiment, the specific DNS server can utilize a variety of information in selecting a resource cache component. In one illustrative embodiment, the DNS server can use the additional information in the DNS portion of the resource identifier (which is used to resolve the DNS query by the DNS server) to return an IP address of a resource cache component. In another example, the DNS nameserver component can default to a selection of a resource cache component of the same POP. In another example, the DNS nameserver components can select a resource cache component based on various load balancing or load sharing algorithms. Still further, the DNS nameserver components can utilize network performance metrics or measurements to assign specific resource cache components. The IP address selected by a DNS nameserver component may correspond to a specific caching server in the resource cache. Alternatively, the IP address can correspond to a hardware/software selection component (such as a load balancer).\n\nEven further, the DNS server can also use information obtained directly from a client computing device (such as information provided by the client computing device or ISP) or indirectly (such as inferred through a client computing device's IP address) to select a resource cache component. Such client computing device information can, for example, be geographic information. Still further, the DNS server components can utilize network performance metrics or measurements, as discussed above, to assign specific resource cache components.\n\nWith reference now to FIG. 5, in an illustrative example, assume that the DNS nameserver component 118 has resolved the received DNS query by returning the IP address of the resource cache component 120 of POP 116. Upon receipt of the IP address for the resource cache component 120, the client computing device 102 transmits requests for the requested content to the resource cache component 120.\n\nWith reference to FIGS. 6A and 6B, the resource cache component 120 processes the request and the requested resource is transmitted to the client computing device 102. FIG. 6 illustrates one embodiment of a hierarchy of cache server components 600, including resource cache component 120 of POP 116 selected to respond to the DNS query from the client computing device 102. For clarity in discussing various embodiments, the resource cache component 120 will be referred to as cache component 120â² and 120â³.\n\nThe resource cache component hierarchy 600 illustrated in FIGS. 6A and 6B comprises a plurality of resource cache components that are logically organized in levels. Resource cache components residing on the same logical level as the resource cache component of interest (e.g. cache server component 120) are referred to as peers, while resource cache components residing at a higher logical level as the resource cache component of interest are referred to as hierarchically superior or parent cache components. At the top of the hierarchy is the origin server 112 of the content provider, as any resource to be maintained by one or more resource cache components of the resource cache component hierarchy may ultimately retrieved from the origin server 112, in the event that the resource is not maintained by a peer or parent resource cache component.\n\nEach resource cache component includes tracking components, which may include hardware and/or software components for management of stored resources according to expiration data. In an embodiment, the tracking components may allow the resource cache component to assign expiration data, such as a time to live, to at least a portion of the resources maintained by the respective resource cache component. The assigned time to live may be varied in accordance with the relative position of the logical level within the resource cache component hierarchy 600 and based, at least in part, on resource request parameters. In one embodiment, resource cache components located at a relatively low position within the resource cache component hierarchy 600, such as cache level N of FIGS. 6A and 6B, will assign a relatively short time to live to their stored resources, while resource cache components located at a relatively high position within the resource cache component hierarchy 600, such as cache level 1 of FIGS. 6A and 6B, will assign a relatively longer time to live to their stored resources.\n\nThe tracking components may enable the resource cache components to monitor a residence time for each of the stored resources, which represents a time duration over which each of the resources has been stored by their respective resource cache component from a selected starting time. In one embodiment, the residence time of a resource may be measured starting from the time at which the resource is stored by the resource cache component or the time at which a request for the resource is received by the resource cache component, whichever is more recent.\n\nThe resource cache components may further employ the assigned expiration data and monitored residence time in order to make expiration decisions regarding expiration of their stored resources. For example, when the residence time of a resource exceeds the time to live assigned to the resource, the resource may be deleted from the resource cache component. In this manner, because the time to live assigned by resource cache components increases when moving upwards in the resource cache component hierarchy 600, resource cache components will expire from the bottom up within the resource cache component hierarchy 600.\n\nSimilarly, in further reference to FIGS. 6A and 6B, resources may be maintained at the lower levels of the resource cache component hierarchy or propagated down to the lower levels of the resource cache component hierarchy 600. In another example illustrated in FIG. 6A, assume that a resource request is received by resource cache component 120â², which maintains requested resource in storage. When receiving the resource request, the resource cache component 120â² determines that it maintains the requested resource in storage, renews the residence time of the requested resource, and returns the requested resource to the client computing device 102. In this manner, because the residence time of the requested resource may be renewed, the resource will be retained by the resource cache component 120â² until such time as the residence time of the resource exceeds the time to live of the resource.\n\nIn a further example illustrated in FIG. 6B, assume that a resource request is received by resource cache component 120â³ which does not initially maintain the requested resource in storage. When receiving the resource request, the resource cache component 120â³ determines that it does not maintain the requested resource in storage or that a previously stored copy of the resource is no longer valid, or otherwise unknown. Accordingly, the resource cache component 120â³ requests the resource from a parent resource cache component, such as resource cache component 602. Should the requested resource not be available from the parent resource cache component 602, further requests for the resource will be transmitted up the resource cache component hierarchy to other parent cache components (e.g. resource cache 604), or even to the origin server 112, until a computing device that maintains the requested resource in storage is found.\n\nUpon identification of the requested resource components, the residence time of the requested resource is set at an initial value on the resource cache component in which the requested resource is found. Illustratively, the residence time is set, at least in part, based on the relative location of the resource cache component within the resource cache component hierarchy 600. For example, the top resource cached component 604 can set an initial value for the resident time associated with the requested resource such that the resource will be maintained with the resource cache component hierarchy 600. In one example, the initial value for the resident time associated with the requested resource can be set to a minimum value for each lower level within the resource cache component hierarchy. In this example, resources which are frequently requested may be propagated down to the lower levels of the resource cache component hierarchy. Likewise, resources that are less frequently requested will expire on each of the lower levels of the resource cache component hierarchy 600. Accordingly, upon a subsequent request for the resource (after expiration), the resource can be associated with a longer resident time.\n\nIn another example, the initial value for the resident time for the resource maintained at each level in the resource cache component hierarchy 600 can be set to various minimums associated with the specific level of the resource cache component within the hierarchy. In such an embodiment, the resident time can be set in accordance with historical information for that particular resource or for the resource cache component. For example, the resident time may be set at the average resident time for some set of resources stored at the particular resource cache component. In another example, the resident time may be fixed for particular levels of the resource cache component hierarchy 600, such as a minimum resident time for the lowest levels of the resource cache component hierarchy 600, often referred to as the edge of the hierarchy. In such an example, the resident times for resources may or may not be adjusted.\n\nWith reference now to FIG. 7A, a request processing routine 700 implemented by a resource cache component to process resource requests will be described. At block 702, a resource request is received at the resource cache component. As previously discussed, the resource request may be transmitted from a client computing device and the requested resource may correspond to an embedded resource in content requested by a client computing device 102 and previously provided by the content provider 104.\n\nAt decision block 704, a test is conducted to determine whether the current resource cache component has stored the requested resource. If the current resource cache component maintains the requested resource in storage, the current resource cache component renews the expiration data, such as resident time, at block 706. If, however, at decision block 704, the current resource cache component does not maintain the requested resource in storage, the current resource cache component selects another resource cache component to which a request for the resource is transmitted in block 710. As discussed above, this other resource cache component may include one or more parent resource cache components in communication with the current resource cache component. The test of decision block 704 and the request forwarding operation of block 710 may be repeated, as necessary, with parent resource cache components higher up the resource cache component hierarchy 600 until a resource cache component that maintains the requested resource in storage is identified. The routine 700 then moves to block 706, where the time to live of the requested resource on the identified parent resource cache component is renewed.\n\nThe routine 700 subsequently moves to decision block 712, where a test is performed to determine whether the resource computing device that is identified to maintain the requested resource in storage is the resource cache component that originally received the request from the client computing device 102 or a parent resource cache component. In one embodiment, such a determination may be made by review of the resource request. When the original resource cache component forwards a resource request to a parent resource cache component, a record may be stored in the resource request to this effect, allowing the parent resource cache to identify that it is not the original recipient of the resource request.\n\nIf the resource computing device that is identified to maintain the requested resource in storage is the resource cache component that is the current resource cache component (e.g., the resource cache component that originally received the request from the client computing device 102), the routine moves to block 716, where the requested resource is transmitted to the client computing device by the current resource cache component.\n\nIf, however, the resource computing device that is identified to maintain the requested resource in storage is a parent resource cache component to the current resource cache component, the routine 700 proceeds to block 714. At block 714, the current resource cache component determines whether to adjust the resident time associated with the requested resource. Illustratively, the adjustment is based on the various resource processing parameters and can include increasing the resident time, decreasing the resident time or not adjusting the resident time. An illustrative sub-routine 750 for determining whether to adjust resident time will be described with regard to FIG. 7B (below). The routine moves to block 716, where the requested resource is transmitted to the client computing device by the current resource cache component.\n\nWith reference now to FIG. 7B, an embodiment of a resident time adjustment routine 750 implemented by a resource cache component will be described. As described above, the routine 750 can be used by a resource cache component to determine whether to adjust a resident time associated with a resource requested by another resource cache component (e.g., the transmitting resource cache component) with a resource cache component hierarchy. At block 752, the resource cache component obtains resource resident time parameters associated with the resource request. As previously described, the resource request parameters correspond to information associated with the specific resource request from the transmitting resource request component. In one embodiment, the resource request parameters can include a number of requests transmitted by the transmitting resource cache component over a fixed period of time. In another embodiment, the resource request parameters can include a time elapsed since a milestone, such as the time since the last request for the resource or a time since the expiration of the resource. In still further embodiments, the resource request parameters can include information associated with average resident times or default resident times associated with the transmitting resource cache component.\n\nIn decision block 754, the resource cache component determines whether the resource resident time parameters satisfy one or more threshold values. If the one or more resource resident time parameter are satisfied, the resource cache component adjusts the resident time for the requested resource. Alternatively, if the resource resident time parameters are not satisfied, the routine 750 terminates at block 758.\n\nIllustratively, the satisfaction of the one or more threshold values for the resource resident time parameters can correspond to adjustments to increase and decrease the resident time associated with a resource. For example, if the number of requests received within a given time period increases, the resident time of the resource can be increased to indicate a lower popularity resource because the current resident time expires before the subsequent request. Likewise if a threshold amount of time has expired since the last request for the resource, the resource cache component may reset the resident time to a default value or initial value. Still further, in another example, the resource cache component can be limited in the amount of adjustment for the resident time. For example, each level of the resource cache component hierarchy may be associated with a range of resident times that limits the amount of adjustment for the resident times of resource maintained at the specific level in the resource cache server hierarchy.\n\nWhile illustrative embodiments have been disclosed and discussed, one skilled in the relevant art will appreciate that additional or alternative embodiments may be implemented within the spirit and scope of the present invention. Additionally, although many embodiments have been indicated as illustrative, one skilled in the relevant art will appreciate that the illustrative embodiments do not need to be combined or implemented together. As such, some illustrative embodiments do not need to be utilized or implemented in accordance with scope of variations to the present disclosure.\n\nConditional language, such as, among others, âcan,â âcould,â âmight,â or âmay,â unless specifically stated otherwise, or otherwise understood within the context as used, is generally intended to convey that certain embodiments include, while other embodiments do not include, certain features, elements and/or steps. Thus, such conditional language is not generally intended to imply that features, elements and/or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding, with or without user input or prompting, whether these features, elements and/or steps are included or are to be performed in any particular embodiment.\n\nAny process descriptions, elements, or blocks in the flow diagrams described herein and/or depicted in the attached figures should be understood as potentially representing modules, segments, or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted, executed out of order from that shown or discussed, including substantially concurrently or in reverse order, depending on the functionality involved, as would be understood by those skilled in the art. It will further be appreciated that the data and/or components described above may be stored on a computer-readable medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable storing the computer executable components such as a CD-ROM, DVD-ROM, or network interface further, the component and/or data can be included in a single device or distributed in any manner. Accordingly, general purpose computing devices may be configured to implement the processes, algorithms and methodology of the present disclosure with the processing and/or execution of the various data and/or components described above.\n\nIt should be emphasized that many variations and modifications may be made to the above-described embodiments, the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."
    }
}