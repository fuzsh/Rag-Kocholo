{
    "id": "dbpedia_3936_1",
    "rank": 8,
    "data": {
        "url": "https://experienceleague.adobe.com/en/docs/commerce-merchant-services/live-search/install",
        "read_more_link": "",
        "language": "en",
        "title": "Get Started with Live Search",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://experienceleague.adobe.com/en/docs/commerce-merchant-services/live-search/media_10418769ede0dd47d7e3c8af4f60513a18743bf08.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/commerce-merchant-services/live-search/media_10b6d08d70505f598c56473c39f0a50a1406650b3.png?width=750&format=png&optimize=medium",
            "https://experienceleague.adobe.com/en/docs/commerce-merchant-services/live-search/media_1a751f67bf745f1104f13c0e39440120c4501812b.png?width=750&format=png&optimize=medium"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn the system requirements and installation steps for Live Search from Adobe Commerce.",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://experienceleague.adobe.com/en/docs/commerce-merchant-services/live-search/install",
        "text": "Set up for success with Live Search\n\nLast update: Fri Jul 19 2024 00:00:00 GMT+0000 (Coordinated Universal Time)\n\nTopics:\n\nServices\n\nSearch\n\nCREATED FOR:\n\nAdmin\n\nDeveloper\n\nAdobe Commerce Live Search and Catalog Service work together to provide a performant, relevant, and intuitive search solution to allow your customers to find exactly what they need, fast. Specifically, Catalog Service surfaces your catalog data for SaaS services, such as Live Search to use.\n\nThis article provides step-by-step instructions for implementing Live Search with Catalog Service.\n\nIMPORTANT\n\nWhen it comes to site search, Adobe Commerce gives you options. Be sure to read Boundaries and Limits before implementing, to ensure Live Search is a fit for your business needs.\n\nAudience\n\nThis article is intended for the developer or systems integrator on your team who is responsible for installing and configuring your Adobe Commerce instance.\n\nRequirements\n\nAdobe Commerce 2.4.4+\n\nPHP 8.1 / 8.2 / 8.3\n\nComposer\n\nSupported platforms\n\nAdobe Commerce on Cloud (ECE) : 2.4.4+\n\nAdobe Commerce on-prem (EE) : 2.4.4+\n\nWorkflow overview\n\nAt a high level, onboarding Live Search requires that you:\n\n1. Install the Live Search extension\n\nLive Search is installed as an extension from Adobe Marketplace through Composer. After you install and configure Live Search, Adobe Commerce begins sharing search and catalog data with SaaS services. At this point, Admin users can set up, customize, and manage search facets, synonyms, and merchandising rules.\n\nNOTE\n\nAs of Live Search 3.0.2, the Catalog Service extension is bundled in with the Live Search installation.\n\nConfirm that cron jobs and indexers are running.\n\nnote important IMPORTANT Due to the Elasticsearch 7 end-of-support announcement for August 2023, it is recommended that all Adobe Commerce customers migrate to the OpenSearch 2.x search engine. For information about migrating your search engine during a product upgrade, see Migrating to OpenSearch in the Upgrade Guide.\n\nDownload the live-search package from the Adobe Marketplace.\n\nRun the following from the command line:\n\ncode language-bash\n\ncomposer require magento/live-search\n\nIf you are adding the Live Search extension to a new Adobe Commerce installation, run the following to disable OpenSearch and related modules, and install Live Search. Then proceed to step 4.\n\ncode language-bash\n\nbin/magento module:disable Magento_Elasticsearch Magento_Elasticsearch7 Magento_OpenSearch Magento_ElasticsearchCatalogPermissions Magento_InventoryElasticsearch Magento_ElasticsearchCatalogPermissionsGraphQl\n\nIf you are adding the Live Search extension to an existing Adobe Commerce installation, run the following to temporarily disable the Live Search modules that serve storefront search results. Then proceed to step 4:\n\ncode language-bash\n\nbin/magento module:disable Magento_LiveSearchAdapter Magento_LiveSearchStorefrontPopover Magento_LiveSearchProductListing\n\nElasticsearch continues to manage search requests from the storefront while the Live Search service synchronizes catalog data and indexes products in the background.\n\nRun the following:\n\ncode language-bash\n\nbin/magento setup:upgrade\n\nVerify that the following indexers are set to “Update by Schedule”:\n\nProduct Feed\n\nProduct Variant Feed\n\nCatalog Attributes Feed\n\nProduct Prices Feed\n\nScopes Website Data Feed\n\nScopes Customer Groups Data Feed\n\nCategories Feed\n\nCategory Permissions Feed\n\nIf you are installing Live Search on a new Commerce instance, you are done and can skip to the 2. Configure API keys section. If you are installing Live Search to an existing Commerce instance, proceed to the next step.\n\nRun the following commands to enable the Live Search extension, disable OpenSearch, and run setup.\n\ncode language-bash\n\nbin/magento module:enable Magento_LiveSearchAdapter Magento_LiveSearchStorefrontPopover Magento_LiveSearchProductListing\n\ncode language-bash\n\nbin/magento module:disable Magento_Elasticsearch Magento_Elasticsearch6 Magento_Elasticsearch7 Magento_ElasticsearchCatalogPermissions Magento_InventoryElasticsearch Magento_ElasticsearchCatalogPermissionsGraphQl\n\ncode language-bash\n\nbin/magento setup:upgrade\n\n2. Configure API keys\n\nThe Adobe Commerce API key and its associated private key are required to connect Live Search to an installation of Adobe Commerce. The API key is generated and maintained in the account of the Commerce license holder, who can share it with the developer or systems integrator. The developer can then create and manage the SaaS Data Spaces on behalf of the license holder. If you already have a set of API keys, you do not need to regenerate them.\n\nLearn how to configure your API keys in the Commerce Services Connector article.\n\n3. Sync your catalog data synchronize-catalog-data\n\nLive Search moves catalog data to Adobe’s SaaS infrastructure. The data is indexed and search results are delivered from this index directly to the storefront. Depending on the size and complexity, indexing can take from 30 minutes to a couple of hours.\n\nTo begin the initial sync of your catalog data to SaaS services, run the following commands in this order:\n\nbin/magento saas:resync --feed productattributes bin/magento saas:resync --feed products bin/magento saas:resync --feed scopesCustomerGroup bin/magento saas:resync --feed scopesWebsite bin/magento saas:resync --feed prices bin/magento saas:resync --feed productoverrides bin/magento saas:resync --feed variants bin/magento saas:resync --feed categories bin/magento saas:resync --feed categoryPermissions\n\nWhen you run these commands, the initial sync of your catalog data to SaaS services begins.\n\nWARNING\n\nWhile the data is indexed and synchronized, the search and category browse operations are not available in the storefront. Depending on the size of your catalog, the process can take at least an hour from the time cron runs to synchronize your data to SaaS services.\n\nMonitor sync progress\n\nYou can view the data that is synchronized and shared using the Data Management Dashboard. This dashboard provides valuable insights into the availability of product data for your storefront, ensuring it can be promptly displayed to your shoppers.\n\nYou can also run sync commands and troubleshoot the synchronization process using the Commerce CLI and the data export extension logs.\n\nAfter the initial synchronization, it can take up to 15 minutes for incremental product updates to become available to storefront search. To learn more, see Indexing - Streaming Product Updates.\n\n4. Verify the data was exported verify-export\n\nTo verify that the catalog data has been exported from your Adobe Commerce instance and is synchronized for Live Search, you have a couple of options:\n\nLook for entries in the following tables:\n\ncatalog_data_exporter_products\n\ncatalog_data_exporter_product_attributes\n\nUse the GraphQL playground with the default query to verify the following:\n\nThe returned product count is close to what you expect for the store view.\n\nFacets are returned.\n\nFor additional help, see Live Search catalog not synchronized in the Support Knowledge Base.\n\n5. Configure the data\n\nGetting your product data configured correctly ensures good search results for your customers. In this section, you enable the product listing widgets and assign categories.\n\nEnable Product Listing Widgets\n\nWhen you install Live Search 4.0.0+, Product Listing Widgets are enabled by default. When widgets are enabled, a different UI component is used for the search results page and category browse Product Listing Page. This UI component makes direct calls to the Catalog Service API, which results in faster response times.\n\nIf you have a Live Search version older than 4.0.0+, you need to manually enable the Product Listing Widget.\n\nFrom the Admin, go to Stores > Settings > Configuration.\n\nUnder Live Search, select Storefront Features.\n\nSet Enable Product Listing Widgets to Yes.\n\nWhen you change this configuration, the message Page cache is invalidated appears. You need to flush the Magento Cache to save your change.\n\nAccess the Cache Management page by doing one of the following:\n\nClick the Cache Management link in the message above the workspace.\n\nOn the Admin sidebar, go to System > Tools > Cache Management.\n\nSelect the Configuration Cache Type and click Flush Magento Cache.\n\nChanges to the storefront are immediate after you flush the cache.\n\nAssign categories\n\nProducts returned in Live Search must be assigned to a category. In Luma, for example, products are put into categories such as “Men”, “Women”, and “Gear”. Subcategories are also set up for “Tops”, “Bottoms”, and “Watches”. This allows for better granularity when filtering.\n\n6. Test the connection test-connection\n\nWith your catalog data now in SaaS, test to make sure product data is returned in the following scenarios:\n\nThe Search box returns results correctly\n\nCategory browse returns results correctly\n\nFacets are available as filters on search results pages\n\nIf everything works correctly, Live Search is installed, connected, and ready to use.\n\nIf you encounter problems in the storefront, check the var/log/system.log file for API communication failures or errors on the services side.\n\nTo allow Live Search through a firewall, add commerce.adobe.io to the allowlist.\n\n7. Customize for your storefront\n\nYou have installed the Live Search extension, synced, validated, and configured your data. Now, you will want to ensure that the Live Search widgets conform to your store’s look and feel.\n\nYou can style the popover and PLP widgets by defining custom CSS rules as needed. See Styling Popover Elements and Product Listing Page Widget.\n\nIf you wish to extend the functionality of the widgets, the source code for each is available in a public repo.\n\nIn this scenario, you can customize the JavaScript for your own needs and then host your custom code on your CDN. This custom script communicates with the Live Search service and returns the results like normal, allowing you to control the functionality of the widget.\n\nBefore updating Live Search, run the following from the command line to check the version of Live Search that is installed:\n\ncomposer show magento/module-live-search | grep version\n\nTo update Live Search, run the following from the command line:\n\ncomposer update magento/live-search --with-dependencies\n\nTo update to a major version such as from 3.1.1 to 4.0.0, edit the project’s root Composer .json file as follows:\n\nIf your currently installed magento/live-search version is 3.1.1 or below, and you are upgrading to version 4.0.0 or higher, run the following command before the upgrade:\n\ncode language-bash\n\nbin/magento module:enable Magento_AdvancedSearch\n\nFor information about the currently installed magento/live-search version, run the following command:\n\ncode language-bash\n\ncomposer show magento/live-search\n\nOpen the root composer.json file and search for magento/live-search.\n\nIn the require section, update the version number as follows:\n\ncode language-json\n\n\"require\": { ... \"magento/live-search\": \"^4.0\", ... }\n\nSave composer.json. Then, run the following from the command line:\n\ncode language-bash\n\ncomposer update magento/live-search --with-dependencies\n\nUninstalling Live Search uninstall\n\nTo uninstall Live Search, refer to Uninstall modules.\n\nLive Search packages packages\n\nThe Live Search extension consists of the following packages:\n\nPackage\n\nDescription\n\nmodule-live-search\n\nAllows merchants to configure their search settings for faceting, synonyms, query rules, and so on, and provides access to a read-only GraphQL playground to test queries from the Admin.\n\nmodule-live-search-adapter\n\nRoutes search requests from the storefront to the Live Search service and renders the results in the storefront.\n\n- Category browse - Routes requests from the storefront top navigation to the search service.\n\n- Global search - Routes requests from the quick search box in the upper-right of the storefront to the Live Search service.\n\nmodule-live-search-storefront-popover\n\nA “search as you type” popover replaces the standard quick search and returns data and thumbnails of top search results.\n\nLive Search dependencies dependencies\n\nThe following Live Search dependencies are captured by Composer.\n\nmagento/module-saas-catalog\n\nmagento/module-saas-category\n\nmagento/module-saas-category-permissions\n\nmagento/module-saas-product-override\n\nmagento/module-saas-product-variant\n\nmagento/module-saas-price\n\nmagento/module-saas-scopes\n\nmagento/module-bundle-product-data-exporter\n\nmagento/module-catalog-inventory-data-exporter\n\nmagento/module-catalog-url-rewrite-data-exporter\n\nmagento/module-configurable-product-data-exporter\n\nmagento/module-parent-product-data-exporter\n\nmagento/module-gift-card-product-data-exporter\n\nmagento/module-bundle-product-override-data-exporter\n\ndata-services\n\nservices-id\n\nAdvanced concepts\n\nThe following sections provide more advanced topics when using Live Search and Catalog Service.\n\nEndpoint\n\nLive Search communicates through the endpoint at https://catalog-service.adobe.io/graphql.\n\nAs Live Search does not have access to the complete product database, Live Search GraphQL and Commerce core GraphQL will not have complete parity.\n\nIt is recommended to call the SaaS APIs directly - specifically the Catalog Service endpoint.\n\nGain performance and reduce processor load by bypassing the Commerce database/Graphql process\n\nTake advantage of the Catalog Service federation to call Live Search, Catalog Service, and Product Recommendations from a single endpoint.\n\nFor some use cases, it maybe better to call Catalog Service for product details and similar cases. See refineProduct for more information.\n\nIf you have a custom headless implementation, check out the Live Search reference implementations:\n\nIf you do not use the default components, such as Search Adapter or widgets on Luma, or AEM CIF Widgets, eventing (clickstream data that feeds Adobe Sensei for Intelligent Merchandising and performance metrics) will not work out of the box and requires custom development to implement headless eventing.\n\nThe latest version of Live Search already uses Catalog Service.\n\nLanguage support\n\nLive Search widgets support the following languages:\n\nLanguage\n\nRegion\n\nLanguage Code\n\nMagento Locale\n\nBulgarian\n\nBulgaria\n\nbg_BG\n\nbg_BG\n\nCatalan\n\nSpain\n\nca_ES\n\nca_ES\n\nCzech\n\nCzech Republic\n\ncs_CZ\n\ncs_CZ\n\nDanish\n\nDenmark\n\nda_DK\n\nda_DK\n\nGerman\n\nGermany\n\nde_DE\n\nde_DE\n\nGreek\n\nGreece\n\nel_GR\n\nel_GR\n\nEnglish\n\nUnited Kingdom\n\nen_GB\n\nen_GB\n\nEnglish\n\nUnited States\n\nen_US\n\nen_US\n\nSpanish\n\nSpain\n\nes_ES\n\nes_ES\n\nEstonian\n\nEstonia\n\net_EE\n\net_EE\n\nBasque\n\nSpain\n\neu_ES\n\neu_ES\n\nPersian\n\nIran\n\nfa_IR\n\nfa_IR\n\nFinnish\n\nFinland\n\nfi_FI\n\nfi_FI\n\nFrench\n\nFrance\n\nfr_FR\n\nfr_FR\n\nGalician\n\nSpain\n\ngl_ES\n\ngl_ES\n\nHindi\n\nIndia\n\nhi_IN\n\nhi_IN\n\nHungarian\n\nHungary\n\nhu_HU\n\nhu_HU\n\nIndonesian\n\nIndonesia\n\nid_ID\n\nid_ID\n\nItalian\n\nItaly\n\nit_IT\n\nit_IT\n\nKorean\n\nSouth Korea\n\nko_KR\n\nko_KR\n\nLithuanian\n\nLithuania\n\nlt_LT\n\nlt_LT\n\nLatvian\n\nLatvia\n\nlv_LV\n\nlv_LV\n\nNorwegian\n\nNorway Bokmal\n\nnb_NO\n\nnb_NO\n\nDutch\n\nNetherlands\n\nnl_NL\n\nnl_NL\n\nPolish\n\nPoland\n\npl_PL\n\npl_PL\n\nPortuguese\n\nBrazil\n\npt_BR\n\npt_BR\n\nPortuguese\n\nPortugal\n\npt_PT\n\npt_PT\n\nRomanian\n\nRomania\n\nro_RO\n\nro_RO\n\nRussian\n\nRussia\n\nru_RU\n\nru_RU\n\nSwedish\n\nSweden\n\nsv_SE\n\nsv_SE\n\nThai\n\nThailand\n\nth_TH\n\nth_TH\n\nTurkish\n\nTurkey\n\ntr_TR\n\ntr_TR\n\nChinese\n\nChina\n\nzh_CN\n\nzh_Hans_CN\n\nChinese\n\nTaiwan\n\nzh_TW\n\nzh_Hant_TW\n\nIf the widget detects that the Commerce Admin language setting (Stores > Settings > Configuration > General > Country Options) matches a supported language, it defaults to that language. Otherwise, the widgets default to English.\n\nAdmins can also set the language of the search index, to help ensure better search results.\n\nWidget code repository\n\nThe Product Listing Page widget and the Live Search field widget are both available for download from their github repository.\n\nThis allows developers to fully customize the functionality and styling. These users host the code themselves while still taking advantage of the Live Search service.\n\nData Export extension\n\nAfter Live Search is enabled, the Data Export extension synchronizes Commerce data between the Commerce application and Live Search. This process ensures that the most current Commerce data is available on the storefront. In the Admin, you can check synchronization status using the Data Management dashboard. You can manage and troubleshoot the data export process using the Commerce CLI and logs. For details, see the Data Export Guide.\n\nInventory Management\n\nLive Search supports Inventory Management capabilities in Commerce (formerly knows as Multi-Source Inventory, or MSI). To enable full support, you must update the dependency module commerce-data-export to version 102.2.0+.\n\nLive Search returns a boolean noting whether a product is available within Inventory Management, but does not contain information about which source has the stock.\n\nPrice indexer\n\nLive Search customers can use the SaaS price indexer, which provides faster price change updates and synchronization time.\n\nPrice support\n\nLive Search widgets support most but not all price types supported by Adobe Commerce.\n\nCurrently, basic prices are supported. Advanced prices that are not supported are:\n\nCost\n\nMinimum Advertised Price\n\nLook at API Mesh for more complex price calculations.\n\nThe price format supports the locale configuration setting within the Commerce instance: Stores > Settings > Configuration > General > General > Local Options > Locale.\n\nHeadless storefront support\n\nOptionally, you might need to install the module-data-services-graphql module that expands the application’s existing GraphQL coverage to include fields required for storefront behavioral data collection.\n\ncomposer require magento/module-data-services-graphql\n\nThis module adds additional contexts to GraphQL queries:\n\ndataServicesStorefrontInstanceContext\n\ndataServicesMagentoExtensionContext\n\ndataServicesStoreConfigurationContext\n\nB2B support\n\nLive Search supports B2B functionality with additional limitations.\n\nPWA support\n\nLive Search works with PWA Studio but users might see slight differences compared to other Commerce implementations. Basic functionality such as search and product listing page work in Venia but some permutations of Graphql might not work correctly. There might also be performance differences.\n\nThe current PWA implementation of Live Search requires more processing time to return search results than Live Search with the native Commerce storefront.\n\nLive Search in PWA does not support event handling. As a result, search reporting nor intelligent merchandising will work.\n\nFiltering directly on description, name, short_description is not supported by GraphQL when used with PWA, but they are returned with a more general filter.\n\nTo use Live Search with PWA Studio, integrators must also:\n\nInstall livesearch-storefront-utils.\n\nSet the environmentId in the storeDetails object.\n\ncode language-javascript\n\nconst storeDetails: StoreDetailsProps = { environmentId: <Storefront_ID>, websiteCode: \"base\", storeCode: \"main_website_store\", storeViewCode: \"default\", searchUnitId: searchUnitId, config: { minQueryLength: 5, pageSize: 8, currencySymbol: \"$\", }, };\n\nCookies\n\nLive Search collects user interaction data as part of its base functionality and cookies are used to store this data. When collecting any user information, the user must agree to store cookies. Live Search and Product Recommendations share the data stream and therefore the same cookie mechanism. Read more about it in Handle Cookie Restrictions.\n\nrecommendation-more-help"
    }
}