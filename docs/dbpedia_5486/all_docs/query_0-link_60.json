{
    "id": "dbpedia_5486_0",
    "rank": 60,
    "data": {
        "url": "https://docs.vmssoftware.com/vsi-abs-operations-guide/",
        "read_more_link": "",
        "language": "en",
        "title": "VSI Archive Backup System for OpenVMS Guide to Operations — VMS Software, Inc.",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.vmssoftware.com/images/logo.svg",
            "https://docs.vmssoftware.com/images/logo.svg",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/cxo4090d.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/cxo5022c.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-3-1.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-3-2.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/cxo6756a.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-1.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-2.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-3.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-4.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-5.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-6.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-7.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-8.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-9.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-10.png",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/fig-6-11.png",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-6.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-7.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-8.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-9.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-10.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-6.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-7.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-8.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-9.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-10.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-6.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-7.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-8.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-9.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-10.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-6.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-7.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-8.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-9.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-10.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-6.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-7.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-8.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-9.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-10.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-11.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-1.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-2.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-3.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-4.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-5.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-6.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-7.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-8.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-9.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-10.svg",
            "https://docs.vmssoftware.com/images/theme/doc-callout-11.svg",
            "https://docs.vmssoftware.com/images/documents/vsi-abs-operations-guide/e-5.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "&#8592; All Documents...",
        "meta_lang": "en",
        "meta_favicon": "/images/theme/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Chapter 3. Saving and Restoring Data\n\nThis chapter expands upon the ABS Overview in Chapter 2 and describes saving and restoring in detail by discussing the ABS objects, and the meanings, possible values and uses for all attributes. For each object, the attributes are listed in alphabetical order for easy reference, but related attributes are discussed together. The attributes are described without specific syntax or instructions on how to manipulate them, but are named according to the qualifiers in the CLI and attributes on the MDMSView GUI screens. For information on the syntax and semantic rules for each object and attribute, refer to the VSI MDMS Reference Guide.\n\nAll objects have an owner, and optional access control which limits access to the object. Since these attributes are common to all objects, they are described in Chapter 5.\n\nIn addition, ABS supports inheriting attributes from one object to another when creating a new object. For example, if you want to create a new save request SAVE2, but use most of the attributes from another save request SAVE1, you can specify SAVE1 as the inherit attribute when you create SAVE2. From there you can modify SAVE2 to define its unique characteristics. This philosophy applies to all ABS and MDMS objects. You can even inherit restore requests from save requests if you want to restore the same files as were previously saved.\n\nFinally, all objects have a description attribute in which you can enter a text string to describe the object. This attribute is not interpreted by either ABS or MDMS, so you can use it for any purpose you see fit. By default, the description is blank.\n\nThe following sections discusses all seven ABS objects in detail.\n\n3.1. Archives\n\nArchives define the media type and characteristics about where backup data is stored. Each save and restore uses exactly one archive, except that certain complex save and restores can use two archives (see Section 3.3). You can use a single archive for many different saves and restores by simply referencing the archive in the save and restore request. ABS defines four archives by default, which you can use in your save and restore requests as needed:\n\nSYSTEM_BACKUPS - For system backups that are normally performed by a system administrator at regularly scheduled times\n\nUSER_BACKUPS - For backups performed by a non-privileged user to save or restore his or her own data\n\nUNIX_BACKUPS - For backups of UNIX client data, normally performed by a system administrator\n\nDISASTER_RECOVERY - For backups primarily designated for disaster recovery\n\nAlthough these default archives are provided by ABS, you may modify them as needed to suit your site’s operational environment. Alternatively, you can create your own archives and manipulate the attributes as described in the following sections.\n\n3.1.1. Archive Name\n\nThis name is used to reference the archive in save and restore requests. There are no required or ad-hoc conventions for archive names, so they can reflect their usage in your environment. However, there are ad-hoc conventions for environment names based on the archive name, so you should restrict the archive name to 60 characters.\n\n3.1.2. Archive Type\n\nABS supports two types of archive, which are hopefully self-explanatory:\n\nDISK - The archive data is stored on disk media, which can include optical disk. ABS assumes that all disk media are online and mounted on the OpenVMS system before any save or restore operation is executed. ABS does not perform any load/unload or mount operations on disk archives. When you specify disk archive type, the archive must contain a destination attribute indicating the disk and directory location of the archive data.\n\nTAPE - The archive data is stored on tape media, and uses MDMS for media management control of the media. When you specify tape archive type, the archive must contain a media type (defined in MDMS) that defines the type of tape media to be used for the archive. Only a single media type is supported. In addition, the archive may optionally contain a pool specification (indicating a set of volumes reserved to users authorized for the pool) and a location specification (used to allocate a drive).\n\n3.1.3. Catalog\n\nA catalog contains information about what data is stored in the archive and where it is stored. Each archive uses exactly one catalog, although catalogs can be shared among different archives. ABS defines a default catalog called ABS_CATALOG, which is assigned to all archives by default if a different catalog is not specified. If you wish to define a different catalog for an archive, then specify a catalog object name (not its location) in the catalog attribute of the archive. For the archive to be useful, the catalog must be defined as a catalog object in MDMS.\n\nAn archive with a name of “DISASTER_RECOVERY” is the only archive allowed to have no catalog associated with it and the save operation is therefore not catalogued (see Chapter 7).\n\n3.1.4. Consolidation\n\nABS supports the concept of consolidation criteria which determine when a volume set should be retired from use in the archive and a new volume set used. ABS supports three types of consolidation criteria, of which none, one, two or all three can be applicable:\n\nINTERVAL - You can specify an interval as a delta time from the creation of the current volume set to the creation of the next volume set. The current volume set is retired if the consolidation interval is exceeded.\n\nSAVESETS - You can specify the maximum number of savesets that should reside on the volume set. If this number would be exceeded, ABS retires the current volume set and allocates a new volume set for the archive. There is an ANSI-imposed maximum of 10000 savesets in a volume set.\n\nVOLUMES - A volume set can contain one or more physical tape volumes. You can limit the number of volumes by specifying volumes on the consolidation criteria. If this number would be exceeded, ABS retires the volume set and allocates a new volume set. There is an ANSI-imposed maximum limit of 100 volumes in a volume set.\n\nIf you specify multiple consolidation criteria, ABS creates a new volume set when the first of any of the defined criteria are exceeded. The default consolidation criteria is an INTERVAL of 7 days. If no consolidation criteria are specified, then ABS creates a new volume set when the ANSI limits apply, or upon the first error writing to the volume set. This is not recommended as you may create excessively large volume sets, and may have to split a volume set between onsite and offsite (vault) locations. Consolidation criteria are only applicable to an archive type of TAPE.\n\n3.1.5. Destination\n\nIf you specified an archive type of DISK, you must enter a destination attribute for the archive, or use the default of ABS$ROOT:[000000]. The destination contains the disk and directory location of the data saved in this disk archive. When specifying destination, you should ensure that the specified disk has enough free capacity to handle all data to be saved in this archive. ABS does not monitor the disk for sufficient capacity. ABS clears this attribute if the archive type is TAPE.\n\nAlso, if you have specified a logical name as part of the destination name, then ensure that before the restore request is executed, the logical is defined as a concealed logical that is either defined as a system-wide logical name or just has the physical device name before the restore request is executed. If you do not want to use the logical name, then specify the physical device name followed by the directory path as the destination for the restore request.\n\n3.1.6. Drives\n\nABS allows you to enter a list of drives that can be used by save and restore operations to and from this archive. This should be used only to restrict the drives that would normally be available for these operations for some reason. Normally, you can let ABS select drives for all operations based on media type and location, and so you do not need to specify the drives in the archive. If you do specify drives, be aware that these drives apply to restores as well as saves. Drives are only applicable to an archive type of TAPE.\n\n3.1.6.1. Drive selection\n\nWhen the drive list is specified in the archive class, the drive is allocated by ABS/MDMS for operation as below:\n\nVolume-set is not present in the archive class\n\nABS will allocate the first available drive and continues to select a volume matching the selection criteria. If all the drives in drive list are not free then ABS will Indefinitely loop for allocating the drives and wait for drive to be available.\n\nWhen the volume set is present in the archive class and the required volume is present in:\n\nSlot - then ABS selects the first available drive from the drive list.\n\nDrive that is part of drive list in the archive class - In this condition the drive where the volume is currently present will be used for save operation.\n\nFor example, if drive list consist of 2 drives A and B and if the required volume is present in B, then drive B will be used for the save/restore operation even if drive A comes first in the drive list.\n\nDrive that is not a part of drive list - ABS will unload the volume from the drive and load the volume in first available drive in the drive list.\n\nNote\n\nThe above allocation algorithm is applicable only when drive list is specified in the archive class.\n\n3.1.7. Expiration Date and Retention Days\n\nABS supports two alternative methods of specifying when an archive expires. These are:\n\nExpiration Date - A date given in OpenVMS absolute time that defines a specific future date that the volume data will expire.\n\nRetention Days - The number of days following retirement of the volume set that the data will be retained, after which time it will expire.\n\nEither retention days or expiration date may be given, but not both. By default, ABS defines retention days of 365, meaning that volume data is valid for one year after retirement of the volume set.\n\nFor an archive type of TAPE it defines the initial scratch date of the tape volume set. Once a volume has transitioned to FREE state and it has been re-used all catalog entries relating to the past usage of this volume are deleted. You can change the expiration of the archive by setting a new scratch date for the volume. Whenever data is added to the volume set a new scratch date will be set if the expiration date extends beyond the old scratch date.\n\nFor an archive type of DISK it defines the time at which the on-disk saveset is deleted. At the same time all catalog entries relating to that saveset are also deleted.\n\nExpiration date and retention days are only applicable to an archive type of TAPE.\n\nABS supports save requests that sometimes perform full backups and sometimes perform incremental backups. Under these circumstances, it is useful to use different volume sets with different retention days or expiration dates for the fulls and the incrementals. To support this, ABS allows you to specify two archives for save requests: the first applies to the full backups, and the second applies to the incremental backups.\n\n3.1.8. Location\n\nA location is an MDMS object that defines the physical location of volumes, drives or jukeboxes. The location is used as one of the selection criteria (along with media type) for allocating a drive to load a scratch volume to extend the archive. If no location is specified for the archive, ABS uses the default onsite location defined in the MDMS domain. This is the default. Location is only applicable to an archive type of TAPE.\n\n3.1.9. Maximum Saves\n\nABS supports multiple parallel save operations using a single archive, each operating on a different drive and volume set (archive type TAPE). To enable this feature, specify the maximum number of parallel saves that are desired using the maximum saves attribute. Values can range between 1 and 36, with 1 being the default. This attribute also applies to an archive type of DISK, but without the implications of multiple drives and volume sets being allocated.\n\n3.1.10. Media Type\n\nMedia type is an MDMS object that describes the type of tape media to be used in the archive. Specify a media type that is defined within MDMS, or use the default domain media type. The media type is used as a mandatory selection criterion (along with optional pool and location) for volumes to be used in the archive. Media type is only applicable to an archive type of TAPE.\n\n3.1.11. Pool\n\nA pool is a logical MDMS object that relates a collection of volumes to a set of authorized users. In this way, you can allocate a collection of volumes to certain users knowing that other users cannot use volumes from the pool. Similarly, you can assign a pool to an archive, so that all volumes used in the archive must be taken from the volumes that are in the pool. You can specify only one pool per archive. If you do not specify a pool, then only volumes that have no pool defined can be used for the archive (this is also known as the scratch pool).\n\n3.1.12. Volume Sets\n\nThe volume sets attribute indicates which volume sets are currently being used by save requests using the archive. There may up to the maximum saves number of volume sets currently being used. These volume sets are those to which the next save operation will be written to the archive. This attribute is normally maintained by ABS and you should not modify it unless there is a pressing need to remove one or more of the volume sets from the list and let ABS allocate new volume sets. Under no circumstances should you add volumes to the volume set list.\n\n3.2. Catalogs\n\nAn ABS catalog contains historical information about ABS save operations. This historical information includes the location of data that was saved using ABS. For this purpose, ABS provides a default catalog named ABS_CATALOG.\n\nSome sites can operate efficiently using only ABS_CATALOG provided by ABS. However, using additional catalogs can improve your ABS operations:\n\nSpeed of record insertion\n\nSpeed of lookup operations\n\nSegregation of saved data\n\nRegular catalog file maintenance\n\n3.2.1. Catalog Name\n\nThis name is used to reference the catalog. There are no required or ad-hoc conventions for catalog names, so they can reflect their usage in your environment.\n\n3.2.2. Catalog Node\n\nCatalogs are node specific. You have to specify the MDMS node name where the catalog resides. An empty catalog node name means the local node where the command was issued or where the request executes. In a VMScluster, multiple nodes can share the same catalogs on a common disk as long as they have direct access to the catalog files. During a save operation ABS always accesses the catalog on the local node even though a different node name is specified in the archive. During a restore operation the catalog lookup will be performed for the catalog at the specified node. This allows to restore data that has been saved on another node.\n\n3.2.3. Type\n\nABS supports four types of catalogs, which are hopefully self-explanatory:\n\nDISKS - This catalog type only stores information about save requests performed. No information about individual filenames are stored in the catalog. The size of a DISKS type catalog is drastically smaller than the FILES catalog type. Save requests using this catalog type must be of type FULL and only specify a disk name. Staging does not apply to these catalogs.\n\nSelective restore can be performed from a DISK type of catalog using ABS.\n\nTo view information about saved disks use the /SAVE qualifier with the “SHOW CATALOG” command. The show output lists the data saved, the volume ID and save set name used.\n\nWhen a save request uses a DISKS type catalog, the following message is displayed in the save request log file:\n\n\"Filenames will not be catalogued\"\n\nFILES - The FILES type catalog stores all information about save requests performed and all files saved. It allows individual file lookups and restores.\n\nSLS - The SLS type catalog is used only for the lookup of the files backed up by SLS. ABS V4.0x and later versions do not adequately support the use of lookups and restoring of SLS history files. ABS will only be able to restore the latest files that were backed up by SLS.\n\nNote\n\nFor ABS to perform a lookup on the SLS History, the following conditions need to be met:\n\nImage SLS$SHR in the SYS$SHARE directory\n\nLogical SLS$HIST_<catalog_name> for performing a lookup on the catalog of SLS Type just as SLS does for the “STOR RESTORE command.\n\nVOLUME_SETS - The VOLUME_SETS type catalog stores all information like the FILES type catalog. However, ABS uses individual files for each volume set. Catalog lookups take slightly longer for VOLUME_SETS type catalogs compared to FILES type catalogs. But VOLUME_SETS type catalogs avoid the constant growth of catalog files because the volume set specific file is deleted once the volume set has been re-used. A VOLUME_SETS type catalog cannot be used for DISK archive types.\n\nNote\n\nIn ABS V4.4, the existing lookup on Volume_Set type of catalog is enhanced to use the date qualifiers effectively. This has significantly reduced the lookup time and improved the performance. However, if you still want to use the previous Lookup feature, define the logical ABS_V40_LOOKUP System-wide. By default, this logical is not set.\n\n$ DEFINE/SYSTEM ABS_V40_LOOKUP 1\n\nThis user defined logical is specific to ABS version 4.4 and will be automatically removed when ABS is uninstalled. In case you want to downgrade ABS, you need to manually deassign this logical to free the space that it has occupied in the System table.\n\n3.2.4. Directory\n\nBy default catalog files are created in ABS$CATALOG. Without modification ABS$CATALOG points to ABS$ROOT:[CATALOG]. When creating a new catalog you can create the catalog files in a different location by specifying a device and directory. You have to update the definition of ABS$CATALOG logical in ABS$SYSTARTUP.COM to include the new device and directory solution in form of a search list.\n\nThis creates a new directory for catalog files and adds it to the ABS$CATALOG search list. The same definition needs to be set in ABS$SYSTARTUP.COM.\n\nIf a “SHOW CATALOG/FULL” does not display a directory for a catalog it means the catalog’s location is not included in the ABS$CATALOG search list.\n\n3.2.5. Staging\n\nA catalog that is setup for staging improves the performance of the save operation because the catalog entry for a saved file is first written to a sequential disk file in ABS$CATALOG. Once the backup operation has completed a separate process moves the entries from the staging catalog file to the final catalog which is specified in the archive associated with the save request.\n\nThe final catalog does not contain the information about the save operation until the staging process has completed. If you request a backup operation and immediately look in the final catalog, the entries may not be available, yet. The backup operation and the staging process must complete before the currently saved files can be looked up in the catalog.\n\nYou can always modify the staging setting for an existing catalog. The use of staging is highly recommended to improve your overall backup times.\n\nThe staging catalog file is created in the first location pointed to by logical name ABS$CATALOG.\n\n3.2.6. Catalog Save Entries\n\nSave entries contain information about executing or executed save operations:\n\nCatalog Name - The name of the catalog\n\nCatalog Node - The name of the MDMS node where the catalog resides\n\nDate Archived - The date the save operation was performed\n\nExpiration Date - The original date the entry expires in the catalog (used only for archive type of DISK)\n\nSource Node - The network name of the node where the saved data was located (UNIX and Windows Files only)\n\nInclude - The include file specification used\n\nObject Entries - Number of entries added to the catalog\n\nArchive - The name of the archive or, if the original archive no longer exists the previous archive UID\n\nEnvironment - The name of the environment or, if the original environment no longer exists the previous environment UID\n\nSave - The name of the save or, if the original save no longer exists the previous environment UID\n\nSave Type - Shows the type of save being performed\n\nall files with recording (R) - All files in a full incremental save with final recording of the backup date\n\nall files (B) - All files in an incremental selective save\n\nall files (S) - All files in a selective save\n\nall files (0) - All files in an incremental save\n\nincrement level n - All files modified between incremental save n and n-1\n\nOwner - The owner field of the archive being used\n\nSaveset Format - The format used in the saveset:\n\nGTAR - UNIX gtar format\n\nNT_GTAR - Windows gtar format\n\nRMU_BACKUP - Oracle Rdb/RMU saveset format\n\nVMS_BACKUP - OpenVMS BACKUP saveset format\n\nArchive Type- DISK or TAPE\n\nSaveset Location -\n\nFor archive type TAPE the list of volume IDs containing the saveset\n\nFor archive type DISK the on-disk location of the saveset\n\nSaveset Name - The filename of the saveset\n\nSaveset Position - The tape mark offset of the beginning of the saveset on tape\n\nStatus - The ABS status for the save operation\n\nSeverity - The ABS severity level for the save operation\n\n3.2.7. Catalog File Entries\n\nFile entries contain information about files which have been saved.\n\nCatalog Name - The name of the catalog\n\nCatalog Node - The name of the MDMS node where the catalog resides\n\nData Select Type - The format of the entry name\n\nRDB_[Vnm_]_DATABASE - An Oracle Rdb database file\n\nRDB_[Vnm_]_STORAGE_AREA - An Oracle Rdb storage area\n\nUNIX_FILES - UNIX file specification\n\nVMS_FILES - OpenVMS file specification\n\nVMS_SAVESET - volumeID:saveset specification\n\nWINDOWS_FILES - Windows files specification\n\nFilename - The name of the entry\n\nSource Node - The network nodename where the entry was located\n\nDate Archived - The date the entry was saved\n\nExpiration Date - The original date the entry expires in the catalog (used only for archive type of DISK)\n\nCreation Date - The date the entry was created on the source node\n\nRevision Date - The date the entry was last modified on the source node before being saved\n\nOwner - Owner information of the entry used on the source node\n\nSaveset Name - Copied from related save entry\n\nSaveset Location - Copied from related save entry\n\nSaveset Section -\n\nFor archive type of TAPE the index into the list of volume IDs indicating the volume which contains the start of the saved entry\n\nFor archive type of DISK it is always 1\n\nSave Type - Copied from related save entry\n\nStatus - Copied from related save entry\n\nSeverity - Copied from related save entry\n\n3.2.8. Improving Catalog Performance\n\nCatalog files are RMS index-sequential files and as such need regular maintenance to avoid unnecessary file growth and performance penalties. ABS provides a catalog conversion command procedure (“ABS$SYSTEM:ABS$CONVERT_CATALOG.COM”) that improves the target catalog update performance by doing a file-to-file conversion. By converting the target catalogs, you improve catalog update time.\n\n3.2.8.1. Catalog File Sizes\n\nThe ABS catalog files will grow as you continue to execute save requests. The sizes depend on the number of files saved and the retention period used. For as long as the retention period has not expired more entries will be added to the catalog. Once the retention period is reached the ABS_CLEAN_CATLG_<node_name> batch job will remove expired entries from the catalog. So, the more the files you save and the longer you want to maintain the archived data, the larger the catalog files size.\n\nBe sure to consider this information when creating catalogs and assigning retention values to your archives. It may be best to create separate catalogs for each archive, if the retention period is different. For example, you may create an archive called MONTHLY_SAVE, with a retention period of one month. Create a catalog called MONTHLY_SAVE to be used by that archive. The catalog size will grow for one month and then maintains its size.\n\n3.2.8.2. Catalog File Maintenance\n\nRun the conversion command procedure for each individual catalog on a regular basis. Catalogs with more frequent delete operations should be converted on a monthly basis. See the logfiles ABS$SYSTEM:ABS$CATALOG_CLEANUP.LOG;* for information on catalog file activities. As a rule of thumb, the catalog must be converted if more than 10% of its records have been deleted.\n\nThis example converts all files for catalog “MyCatalog” by creating new copies of the files in the same directory.\n\nFor additional improvement you can also move the target catalogs to a different disk by defining a system level search list logical for ABS$CATALOG in ABS$SYSTARTUP.COM. The command procedure also allows you to move the converted files to a different disk or directory.\n\nThis example converts the files for catalog “MyCatalog” and places the new files in location “DKA100:[ABS_CATALOGS”. Once the files have been copied over, you can add the new location to the ABS$CATALOG search list. Rename the old catalog files to *.DAT_OLD and verify that you can lookup information using the new files. Once the new catalog files are used you can delete the old files.\n\n3.2.8.3. Catalog Cleanup\n\nTo clean expired entries from the catalog, there is a process that runs in the ABS$node batch queue called ABS_CLEAN_CATLG_node. This process is scheduled to run once a day at 12:30 pm. The scheduled time is set in the ABS$SYSTEM:ABS$START_CATALOG_CLEANUP.COM procedure. You may modify the start time for the job or change the frequency of the job. If you do not have lot of expired entries daily, you may want to run the job less frequently.\n\nThe log file generated by this cleanup process is called ABS$LOG:ABS$CATALOG_CLEANUP.LOG. A lot of information about how many records were read from the catalog, how many were deleted, and any errors are kept in this log. Most errors seen should be reported to VSI.\n\nThe catalog cleanup process cleans up all the catalogs when executed. We can also nominate the catalogs that need to be cleaned up. Also, we can specify the interval in which this cleanup process needs to run. This would be helpful:\n\nIf the cleanup process of all the catalogs takes a long time affecting the other daily jobs.\n\nCleanup of all the catalogs need not done always.\n\nTo nominate catalogs for cleanup:\n\nStop the catalog cleanup process.\n\nSubmit the cleanup COM file with the parameters as mentioned below:\n\n$ @ABS$SYSTEM:ABS$START_CATALOG_CLEANUP catalog_names interval catalog_names - Space delimited catalog names. Default: All Catalogs Interval - \"+n-\"(n denoting the frequency at which the catalogs need to be cleaned). Default: Every Day\n\nExample:\n\n$ @ABS$SYSTEM:ABS$START_CATALOG_CLEANUP \"CATLG1 CATLG2 CATLG3\" \"+2-\"\n\nThis command would nominate CATLG1,CATLG2,CATLG3 catalogs for cleanup and the cleanup runs with the frequency of 2 days. i.e if submitted on 01-Nov-2001, then cleanup runs on 03-Nov-2001 at 12:30, 05-Nov-2001 at 12:30 and so on.\n\nNote\n\nThe cleanup of the VAOE file can be performed only after defining the ABS_CATALOG_VAOE_CLEANUP logical System-wide.\n\n$ DEFINE/SYSTEM ABS_CATALOG_VAOE_CLEANUP 1\n\n3.2.8.4. Staging Catalog\n\nWith staging enabled for a catalog ABS writes the catalog entries to a sequential file during a save operation. The save operation at the end creates a command procedure and executes it in a separate process. This unpack process moves all entries from the staging catalog to the final catalog. If all entries have been moved successfully the command procedure is deleted. If the unpack process failed for some reason you can run the command procedure manually. To do this, find the location and name of the command procedure in the logfile of the save request. Then execute the command procedure on the node where the save request was running.\n\nIn this example if the command procedure file “ABS$CATALOG:ABS_CATALOG_4_1.COM” still exists it indicates that the staging unpack process has failed and you can manually execute the command procedure to update the catalog.\n\nStaging files by default are created in the first location pointed to by logcial name MDMS$CATALOG.\n\n3.3. Cataloging Existing Savesets\n\nYou may catalog information from existing VMS Backup savesets on tape. This allows you to lookup and restore files from savesets created outside of ABS.\n\nRestrictions:\n\nThe saveset must reside on tape\n\nOnly VMS Backup savesets may be cataloged\n\nThe tape volume must be defined in MDMS and allocated to ABS so that ABS may reference the volume\n\nA separate catalog and archive should be created for the saveset information\n\nTo catalog the savesets, create a SAVE request with the name of the tape volume and the saveset name, or wildcard, separated by a colon as the selection (include) and a data_type of VMS_SAVESET:\n\nMDMS CREATE SAVE mysaveset_catalog/INCLUDE=tap001:mysaveset.sav/DATA_TYPE = VMS_SAVESET/ARCHIVE=my_archive/ENVIRONMENT=my_env/START=01-MAY-2002\n\nor\n\nMDMS CREATE SAVE mysaveset_catalog - /INCLUDE=tape001:*/DATA_TYPE=VMS_SAVESET/ARCHIVE=my_archive/ENVIRONMENT= my_env/START=01-MAY-2002\n\nABS will load the tape listed in the include specification, then do a BACKUP/LIST of the contents, loading the information into the ABS catalog defined in the archive. The original date of the saveset will be preserved in the catalog.\n\nRecommended Implementation:\n\nIt is recommended that you create a new catalog to store this data. You should also create a new archive to be used by these cataloging operations. This is mainly if you are cataloging copied tapes, where the dates of the original and the copied savesets will be duplicates.\n\nThis will allow you to choose to restore from the original or copies by selecting the appropriate archive for the restore request.\n\nFor example:\n\nSeveral ABS save requests were saved on tape ABS000 using the SYSTEM_BACKUPS archive. Saveset Manager (SSM) was used to copy that tape to another tape, TAP000.\n\nBefore cataloging the data, do the following:\n\nCreate a new catalog called COPIED_TAPES. Create an archive called COPIED_ARCH, which points to the catalog COPIED_TAPES.\n\nCreate a save request specifying TAP000:* for the include specification and give it a data_type of VMS_SAVESET.\n\nABS will execute the request, cataloging the information into the COPIED_TAPES catalog.\n\nTo restore the data which is on ABS000 or TAP000, decide which copy you wish to restore and specify the appropriate archive or catalog on the restore request. For example, to restore from the original tapes, specify the SYSTEM_BACKUPS archive. To restore from the copy, specify the COPIED_ARCH archive. The MDMS SHOW CATALOG/FILES command with the /FULL qualifier will show the volumes used for the data.\n\nNote\n\nIf the information about the original and copied savesets is put into the same catalog, they will have exactly the same archived data. This could cause confusion when restoring the data because ABS may not choose the tapes you wish to use for the restore. To make it easier to restore, it is recommended to use a separate catalog (as described above).\n\n3.4. Environments\n\nAn environment describes the criteria under which save and restore requests execute, and exactly one environment must be associated with each save and restore request. You can use a single environment for many different saves and restores by simply referencing the environment in the save and restore request. ABS defines five environments by default, which you can use in your save and restore requests as needed:\n\nSYSTEM_BACKUPS_ENV - For system backups that are normally performed by a system administrator at regularly scheduled times\n\nUSER_BACKUPS_ENV - For backups performed by a non-privileged user to save or restore his or her own data\n\nUNIX_BACKUPS_ENV - For backups of UNIX client data, normally performed by a system administrator\n\nDISASTER_RECOVERY_ENV - For backups primarily designated for disaster recovery\n\nDEFAULT_ENV - Used by default in the event one of the other default environments have been deleted\n\nAlthough these default environments are provided by ABS, you may modify them as needed to suit your site’s operational needs. Alternatively, you can create your own environments and manipulate the attributes as described in the following sections.\n\n3.4.1. Environment Name\n\nThis name is used to reference the environment in save and restore requests. There are no required conventions for environment names, but ABS uses an ad-hoc convention that pairs environments and archives. If you specify an archive of name FOO, then by convention there should be a matching environment named FOO_ENV. You can choose to follow or ignore this convention for your site.\n\n3.4.2. Action\n\nThe action attribute specifies one of three possible actions to be performed on files saved using this environment. Specify one of the following three actions:\n\nRECORD_DATE - Modify the BACKUP date to reflect the time that this file was backed up; this is the required option if you intend to do incremental backups of this file, and is the default value - supported for files of type VMS_FILES only.\n\nNO_CHANGE - Do not change the online file at all. If this option is specified, you will not be able to perform incremental saves on this file.\n\nDELETE_FILE - This option is used when the backup is intended to be a long-term archive and you wish the file to be removed from the online system. The file is only deleted on a successful save operation.\n\nAlthough RECORD_DATE is supported for VMS_FILES only, it remains the default for all data types, and is simply ignored for the other types.\n\n3.4.3. Compression\n\nABS supports the following types of compression for UNIX clients:\n\nNo compression (default)\n\nUNIX Compression\n\nGZIP Compression\n\nIt is recommended that you either use the default UNIX environment (UNIX_BACKUPS_ENV) or a single user-created environment for all your UNIX client saves, using a single type of compression for all UNIX saves. If you mix compression types among your UNIX saves, you should be very careful to assign the appropriate environment on any restore. If you specify the wrong compression option on a restore, then ABS will not be able to restore the data. The default is no compression.\n\n3.4.4. Data Safety\n\nThe environment object allows you to specify one or more data safety features to ensure the reliability of the data on your offline tape volumes. You can select one or more of the following options:\n\nCRC - Performs a Cyclic Redundancy check and writes it for each data block on a tape volume. This enables detection of a bad block during a restore operation.\n\nFULL_VERIFY - Rereads all saved data and compares to what is on disk during a save. This option approximately doubles the time for the data copy phase of a save operation.\n\nXOR - If the CRC check detects a bad block during a restore operation, the XOR mechanism allows recovery of the block. This option is applicable only to data type VMS_FILES, for which the backup agent is VMS BACKUP.\n\nBy default, all three options are enabled for maximum data safety.\n\n3.4.5. Drive Count\n\nThe drive count specifies the number of tape drives to use for each save or restore using this environment. If there are at least as many drives available as the drive count, that number of drives are allocated for each save and restore request. If not, a reduced number of drives are allocated.\n\nThe default and highly recommended value is 1. The number of drives may range from 1 to 32.\n\n3.4.6. Prologue and Epilogue\n\nThe prologue and epilogue attributes in the environment allow you to invoke a command procedure before and/or after the entire save or restore request. This allows you to perform pre-processing and post-processing operations around the entire request. Compare the order of environment prologue and epilogue procedures operations to the individual save and restore prologue and epilogue procedures, which are executed before and/or after each file or disk specification in the save or restore request. The order of execution is illustrated below:\n\nEnvironment prologue\n\nStart save or restore request\n\nFirst disk/file specification prologue\n\nFirst disk/file specification save or restore operation\n\nFirst disk/file specification epilogue\n\nNext disk/file specification prologue\n\nNext disk/file specification save or restore operation\n\nNext disk/file specification epilogue\n\n......\n\nEnd save or restore request\n\nEnvironment epilogue (only on successful completion)\n\nABS defines logical names that can be used within the prologue or epilogue command procedure. These are defined in the process job table as follows:\n\nYou should enter an OpenVMS command of up to 80 characters in the prologue and/or epilogue strings. For example:\n\n@ABS$SYSTEM:ABS_ENV_PROLOGUE.COM\n\nBy default, there are no prologues or epilogues defined for an environment.\n\n3.4.7. Retry Limit and Interval\n\nThe retry limit and retry interval options allows you to specify the number of times and how often ABS should retry a object in a save or restore request before operator intervention is required. Specify the following:\n\nRetry Limit - The number of retries (excluding the first attempt) to attempt before activating the notification options. A value of zero means no retries. You can also specify no limit, which means retries will be performed until the request either succeeds, or is manually stopped.\n\nInterval - The interval between retry attempts, expressed as a delta time. The default retry interval is 15 minutes.\n\nEach time a retry attempt is made, ABS generates a warning message. If you wish to see the warning messages, select the warning option in the when attribute for notification.\n\n3.4.8. Links Only and Span Filesystems\n\nFor UNIX clients, ABS provides the option to either backup UNIX symbolic links only, or to follow the UNIX symbolic links and backup up the data as well. The default is to backup the symbolic links only (not the data).\n\nIn addition, ABS allows you to backup only the root file system (such as the disk the root directory resides on) or an entire file system if the filesystem spans physical devices. The default is nospan filesystems, which copies the root file system only.\n\nBoth attributes apply to data type UNIX_FILES only.\n\n3.4.9. Listing Option\n\nThe listing option allows you to specify the type of listing generated for save and restore requests using this environment. Specify one of the following options:\n\nNONE - Does not generate a listing file\n\nBRIEF - Generates a brief listing file\n\nFULL - Generates a detailed listing file\n\nIf not specified, NONE is the default option.\n\n3.4.10. Lock\n\nABS allows you to specify what a save request should do when data usage conflicts occur by means of the lock attribute. If you specify lock, ABS saves the data even if other applications have the data locked for write access. If you specify nolock ABS does not save the data if other applications have the data locked for write - this is the safer approach. If you specify lock, it is possible that the data you save is inconsistent, as the other application may be writing to the file during the actual save operation. Use lock with caution. The default is nolock.\n\n3.4.11. Notification\n\nABS uses the notification attributes in the environment to determine who, how and under what circumstances users are notified of ABS events during save and restore operations. ABS supports notification using mail, OPCOM or both. You can specify up to 32 separate notification options in each environment, using the following attributes:\n\nMAIL - Specifies one or more mail users to be notified on certain types of event; specify one or more OpenVMS mail usernames (including node names as needed).\n\nOPCOM - Specifies one or more OPCOM classes to be notified on certain types of events - specify one or more OpenVMS OPCOM classes (e.g. TAPES) to be notified - notification will be directed to the (execution) node(s) specified in the save or restore request.\n\nTYPE - Indicates the level of information given. Select one of the following:\n\nBRIEF - Contains only basic information (default)\n\nNORMAL - Contains a moderate amount of information\n\nFULL - Contains the maximum amount of information\n\nWHEN - Indicates when the notification should occur. Choose one or more of the following:\n\nSTART - Sends notification at the start of a save or restore request\n\nCOMPLETE - Sends notification at the completion of a save or restore request with any status (success or failure)\n\nWARNING - Sends notification if the request completes with a warning, error or fatal status\n\nERROR - Sends notification if the request completes with an error or fatal status\n\nFATAL - Sends notification if the request completes with a fatal status\n\nYou associate a TYPE and WHEN for each MAIL or OPCOM option provided. If you do not specify a TYPE and/or WHEN, a notification option acquires a TYPE of BRIEF and a WHEN of COMPLETE.\n\nIf you specify no notification options, then by default ABS sends a brief OPCOM message to class TAPES on completion of every request executed under the environment.\n\n3.4.12. Profile\n\nABS allows you to specify the user name, node name, cluster name, rights and privileges under which save or restore requests in the environment will execute. ABS supports three main options for username:\n\nABS - This option specifies that all save and restore requests execute in the context of the ABS user (and account). You should not change the cluster, nodes, rights or privileges with this option, otherwise the saves and restores may not execute correctly. This is the default option, and is recommended for all system backup operations. It is also the required option for both UNIX and Windows client operations.\n\n<REQUESTER> - This option (including the angle brackets) instructs ABS to run associated save and restore requests under the user profile of the associated save or restore request. The save and restore user profile (which is not normally displayed and not is changeable) is that of the user who created the save or restore request. This option should be used for user backups. With this option you should not adjust node or cluster, but you can manipulate rights and privileges if the user’s normal rights and privileges are not sufficient to run ABS save and restore requests.\n\nOther user - This option instructs ABS to run associated save and restore requests under the profile of a third user (not the save/restore creator or ABS). With this option, you can manipulate rights and privileges if the user’s normal rights and privileges are not sufficient to run ABS save and restore requests. In addition, you should also define node and/or cluster to uniquely identify the user in the domain. Wildcard node and cluster names are supported.\n\nIt is recommended that you only specify a user profile for user backups. All other backups should run under the default ABS user profile.\n\n3.5. Saves and Restores\n\nThe purpose of a save request is to backup data from primary online disk storage to either alternative disk or optical storage, or to tape storage. Saves are typically performed on a regular basis to provide protection in the event of a disk hardware failure, data corruption or deletion, or site disaster. Saves can also be used for archiving data that must be kept for a relatively long time for business purposes, but does not need to be online.\n\nThe purpose of a restore request is to return data from tape or alternate disk or optical storage back to primary online storage. In most cases, restores are performed after a disk hardware failure or user file corruption or deletion - these are usually one-time events. However, sometimes it is necessary to bring archived data online, and restores (perhaps scheduled restores) can be used for this purpose also.\n\nABS models save and restore requests in a similar fashion so in most cases the attributes for one are applicable to the other (exceptions are noted). The main difference is the direction of data transfer between disk and tape storage. As such, we shall discuss saves and restores in a single section.\n\nYou create each save or restore with a unique name, and associate a single archive and a single environment with it. Under certain circumstances, you can associate two archives with save requests. In addition, you implicitly create a schedule with each save request, and specify disks or files to save in objects called selections. As such each save or restore request is related to other ABS objects as shown below:\n\nThe following sections describes the attributes of save and restore requests.\n\n3.5.1. Save Name or Restore Name\n\nYou must assign a unique name to each save and restore request, which is used as the only method of referencing the request. There are no required conventions associated with save and restore names. However, in previous ABS versions, the names could be generated automatically so you might see names that are a combination of the creation date of the request and a generated unique identifier (UID) if you are converting from pre-V4 ABS. For version V4 and later, ABS almost always references saves and restores by name rather than UID, and ABS no longer shows UIDs by default.\n\n3.5.2. Archive\n\nEach save or restore requests is associated with one or two archives, which contain information about where the backed up data is stored. The two archives are for those requests that involve both full and incremental operations: the first archive applies to the full operations and the second applies to the incremental operations. In this way, fulls and incrementals can reside on different volume sets with their own retention days or expiration dates. In other types of request, only one archive is used.\n\nIf you do not specify an archive, ABS chooses SYSTEM_BACKUPS.\n\n3.5.3. Base Date, Start Date and Skip Time\n\nThe base date is the date and time that you wish the request to first execute on a regular basis. The base date is used for two purposes:\n\nDefining the date and time to be used as a basis for scheduling - all scheduling intervals are based on both the date portion and time portion of the base date, and anniversaries of the base date at intervals defined by the frequency attribute.\n\nDefining the basis for full versus incremental saves for complex frequencies such as dailyfull- weekly, log_2 and log_3. The base date and appropriate anniversaries of the base date define the date of the full saves.\n\nUnless you want to change the scheduling or save type basis for the request, you would not change the base date. As such, the base date will remain a date in the past. Compare this to the start date, which specifies the next start date and time for the request. The start date is updated whenever the request is run to reflect the next time it is scheduled, or NONE if it is not scheduled again.\n\nWhen a request is first created, and you specify only one of the dates, both dates are set (i.e. the next start date is the base date). By default, neither a base date or start date are supplied so the request is not scheduled for execution.\n\nYou can use the start date and skip time to request a one-time special, or non-scheduled, execution of the request. For example, assume that the normal scheduled time for a request is 23:00, as specified in the base date. However, you know that this is a particularly busy night and you want to start this request for tonight only at 21:00 instead. You can do this by setting the start date to 21:00. However, when the request is rescheduled, it will be rescheduled to the next iteration of the base date, or 23:00 the same day. You probably do not want this, so to avoid it you can set the start date together with a skip time to avoid running the request twice. The skip time is an exclusion time (expressed as a delta time) from the specified start date in which the request will not be rescheduled: normally you can set this to one day to avoid running the request twice in the same day. The following table shows some examples of base date, start date and skip time definitions based on a daily frequency:\n\nWhen you specify a skip time, ABS saves it in the database until the request is next rescheduled. When the rescheduling takes place, the skip time is applied to the calculation, then cleared from the database. If you set a skip time and do not see it in the request, then it has already been applied to the next start date.\n\n3.5.4. Before Date, Since Date and Date Archived (Restore Only)\n\nWhen restoring files, you can choose a specific iteration of the files based on their archive date - that is, the date that they were saved in the archive. If you know the exact date archived, use the data archived attribute. If you know only an approximate date archived, use the before or since attributes to specify a range of dates. So, for example, if you wish to restore a file as it existed in the first week of January, you can specify a before date of the 8th January (at midnight), or a since date of 1st January (at midnight). When determining appropriate before or since dates, you should probably lookup the files in the catalog before requesting a restore, so that you can specify before and since dates that uniquely identify a single iteration of the file to restore.\n\nThe before and since dates in the restore apply only to the archive date of the file. They are not related to the before and since dates in the selection object, which refer to files’ online dates that are maintained by OpenVMS.\n\n3.5.5. Catalog (Restore Only)\n\nOn a restore, you can specify a catalog name instead of an archive name if you know the name of the catalog from which to locate the restore information, and do not know the name of the archive. Normally, however, you would specify the archive under which the data was saved rather than the catalog.\n\n3.5.6. Include, Exclude, Data Type and Source Node\n\nOne of the more obvious attributes of a save or restore request are the file names, disk names path names or database names that you wish to save or restore. There are two options for specifying these names in a save or restore request:\n\nIn an INCLUDE specification - You can specify the names directly in the save or restore request in an INCLUDE specification. You can specify multiple disks and/or files in a comma-separated list with the restriction that all disk and file specifications relate to a single data type (for example, VMS files). If you wish to mix file types in a single save or restore request (for example, VMS files and Windows files), then you must use the second option.\n\nNote\n\nIn case the include specification in the Save request had a directory tree structure, then to maintain the same during the Restore operation, you must specify the wildcard “*” in the include specification of the Restore request.\n\nExample: /Include = TPRD:[TPRD.APPFILES*]*.*;*\n\nIf you do not use the wildcard “*” or specify a wildcard other than “*” in the include specification, then all the files are automatically restored to the root directory.\n\nExamples:\n\n/Include = TPRD:[TPRD.APPFILES]*.*;*\n\n/Include = TPRD:[TPRD.APPFILES%]*.*;*\n\nUsing SELECTIONS - With this option, you create selection objects directly using the MDMSView GUI or the CLI, specify the appropriate include specifications, then associate the selection object(s) with the save or restore. You can associate multiple selection objects with any save or restore request as long as the total number of disk, file, path or database specifications in all the selection objects does not exceed 24.\n\nWhen you specify disk, file and database names by including them in the save and restore request, then you are effectively creating a default selection object. This selection object has the same name as the save or restore, with the suffix “_SAVE_SEL_DEL” or “_REST_SEL_DEF” respectively. You can specify the following attributes directly in the save or restore request for inclusion in the default selection:\n\nINCLUDE - A list of disks, files, paths or databases to include in the save or restore.\n\nEXCLUDE - A list of files to exclude from the save or restore that would otherwise have been included according to the include specification. This option applies to data type VMS FILES only\n\nDATA TYPE - The type of data to be saved or restored - select one of the following:\n\nVMS Files - Applicable to VMS files. If only a disk is selected, a FULL backup of the entire disk is performed. If directory and file specifications are specified, then a SELECTIVE backup of files is performed.\n\nOracle Rdb Database Options - These options (which are version-number specific) specify that you wish to back up an entire Rdb database using the RMU backup utility. In this case, specify the name of the Rdb database files.\n\nOracle Rdb Storage Area - These options (which are version-number specific) specify that you wish to back up selected storage areas of an Rdb database. In this case specify both the database file name(s) and selected storage areas.\n\nUNIX Files - This option applies to saving or restoring UNIX files on a client node. Enter a filesystem name in the format “/usr/...” to the level of granularity you want. With this option you must specify a SOURCE_NODE, which is the name of the UNIX node on which the online data resides.\n\nWindows Files - This option applies to saving or restoring Windows files on a client node. Enter a file pathname starting with the device (for example: C:\\Windows\\...” to the level of granularity you want. With this option you must specify a SOURCE_NODE, which is the name of the Windows node on which the online data resides.\n\nVMS Saveset cataloging - This option applies to cataloging existing VMS Backup saveset from tapes. Enter the tape name followed by a colon (:) and the saveset name (or wildcard). See Section 3.3 for more information on this functionality.\n\nSOURCE NODE - This attribute applies to data types UNIX FILES and WINDOWS files only, and specifies the name of the node on which the file data resides. For other data types, the node is specified through the nodes and groups attributes in the request.\n\nThe following table shows examples of the appropriate file, disk, path or database names that are valid for each data type:\n\nNote\n\nWildcards are not allowed in the include specification for WINDOWS_FILES and UNIX_FILES data type in a save request.\n\nIf you prefer to use selection objects directly (which enable you to specify additional selection criteria), then create a selection as shown in Section 3.3, then include the selection in the SELECTIONS attribute in the save or restore request. You can include up to 24 selections in a save or restore request with the caveat that a maximum of 24 disk, file or database file specifications (in total) are supported in a single save or restore request.\n\n3.5.7. Delete Interval and Keep\n\nSome saves and most restores are intended to be run only once, and have a frequency of ONE TIME ONLY. With this in mind, ABS automatically deletes such requests after a defined interval after the request has executed. This interval is the delete interval and can be customized for each save and restore request. If not specified, all ONE TIME ONLY requests are deleted approximately 3 days after execution: the actual delete is performed by a daily scheduled activity which runs at a certain time every day. If the frequency is something other than ONE TIME ONLY, ABS does not automatically delete the request. If the delete interval is set to NONE, then the request is deleted the next time the scheduled activity runs after execution of the request.\n\nIf you do not wish to have these requests automatically deleted, then set the keep attribute. This flags the request to be kept indefinitely and clears the delete interval.\n\n3.5.8. Destination (Restore Only)\n\nABS allows you to restore data to a different disk, directory, file system or pathname from where the data was saved. This is useful if you wish to make additional copies of data from the archive. If you wish to restore to a different location, enter the disk, directory, file system or pathname in the destination attribute of the restore. If not specified, the data is restored to the original source location of the data.\n\nNote\n\nIf a logical is used to specify the disk name, which is part of the destination specified for the restore request (the location where the data is restored), then ensure that the logical is defined before executing the restore request.\n\nIf the destination is not exclusively provided for the /DESTINATION qualifier, then the restore request considers the include specification path as the default destination.\n\nIf the logical is not properly defined, then the restore request fails displaying the “NO_SUCH_DEVICE” error.\n\n3.5.9. Environment\n\nThe environment attribute specifies an environment object name for this request. An environment contains attributes relating to how the request is executed. For example, an environment specifies data safety options, notification options and user profile. If not specified, the environment SYSTEM_BACKUPS_ENV is selected if available, otherwise DEFAULT_ENV is selected.\n\n3.5.10. Frequency and Explicit Interval\n\nABS supports very flexible options for scheduling save and restore requests, both using the internal MDMS scheduling options and using a third part scheduler. The scheduling options can be divided into three main categories:\n\nStandard - ABS provides a list of standard options that you can specify, and the scheduling information is applied to the schedule object automatically. Standard options are supported by both internal MDMS scheduling and an external scheduler product. Standard options are all those that are neither custom or explicit.\n\nCustom - This option allows you to customize the schedule for the request if the standard options are not sufficient. For example, if you want to run the request every second Sunday in January, April, July and October, then the custom option can do this. You specify CUSTOM as the frequency, then modify the schedule object for the request directly. This option is applicable to internal MDMS scheduling only.\n\nExplicit - This option also allows you to customize your schedule, but this time with an external scheduler product. You specify EXPLICIT as a frequency, then enter a string into the EXPLICIT INTERVAL attribute. This attribute is a string that can be understood by the external scheduler product specifying the desired frequency. Alternatively, you can use the user interface of the external scheduler product to specify the frequency of the request. This option is applicable only to external scheduling options.\n\nSelect from one of the following frequencies:\n\nONE TIME ONLY - Executes the save request one time only according to the option specified for Start Date.\n\nAfter the save request has been executed and the delete interval (default approximately 3 days) have passed, ABS deletes the job from the database (including any external scheduler database). This is the default frequency if none is specified in the request.\n\nON DEMAND - This option executes the save request according to the option specified for Start Date. The difference between One Time Only and On Demand is that ABS does not delete the request from the database.\n\nDAILY - Executes a save request once per day according to the option specified for Base Date.\n\nWEEKLY FULL, DAILY INCREMENTAL (Saves only) - This option enables you to create a single save request that executes a full backup operation once per week on the day specified in the Base Date, and an incremental backup operation for each subsequent day after the full backup operation is successful. ABS performs the full backup operation on a fixed day of the week during the 7-day cycle.\n\nThe Weekly Full/Daily Incremental Process:\n\nFor example, if the save request starts the full backup operation on Monday, ABS will always perform the full backup operation on Monday for that particular save request. This happens even if some of the subsequent incremental backup operations fail.\n\nExample A:\n\nDayTypeMondayFullTuesdayLevel 1WednesdayLevel 2ThursdayLevel 3FridayLevel 4SaturdayLevel 5SundayLevel 6MondayFull\n\nIf that full backup operation fails, the cycle is repeated until a successful, full backup operation is achieved. ABS considers success and qualified success as a successful completed operation. ABS considers all other status as a failed operation.\n\nExample B:\n\nDayDate and Time RunTypeResultMonday31-MAR-1997 02:00FullFailureTuesday01-APR-1997 02:00FullFailureWednesday02-APR-1997 02:00FullSuccessThursday03-APR-1997 02:00Level 3SuccessFriday04-APR-1997 02:00Level 4FailureSaturday05-APR-1997 02:00Level 5SuccessSunday06-APR-1997 02:00Assume skipping this day using a 3rd party schedulerMonday07-APR-1997 02:00FullSuccess\n\nIf you are manually setting up your schedule to skip special days, ABS skips the next level of an incremental backup operation. In Example B, ABS skips Sunday and does not perform the Level 6 incremental backup operation. ABS resumes the full backup operation again on Monday, and the schedule once again repeats itself.\n\nNotice also in Example B that ABS repeats the full backup operation until a successful full backup operation is achieved on Wednesday. If one of the incremental backup operations fail, ABS skips to the next level of the incremental backup operations. Unlike repeating the full backup operation, ABS does not repeat the same level of incremental backup operations during the 7-day cycle.\n\nIn the Example B, the Level 4 incremental backup operation failed on Friday. On Saturday, ABS resumes with a Level 5 incremental backup operation. However, the contents of the incremental backup operations are correct because ABS will back up all new or modified files since the last successful full backup or the last successful lower level incremental backup operation.\n\nThe save log file will contain the following backup command issued by ABS for Saturday, 05-APR-1997:\n\n$ BACKUP/.../SINCE=”03-APR-1997 02:00:00.00”\n\nBecause the last successful lower level incremental backup operation was performed on 03-APR-1997, all changes to any file since the date and time specified in the BACKUP command are included in the backup operation.\n\nWEEKLY - Executes the save request once per week according to the date and time specified for the start time.\n\nBIWEEKLY - Executes the save request once every two weeks according to the date and time specified for the start time.\n\nMONTHLY - Executes the job the first time on the date and time specified in the start time attribute. Subsequent jobs are scheduled on the first day of each month.\n\nQUARTERLY - Executes the job the first time on the date and time specified in the start time attribute. Subsequent jobs are scheduled to execute on the first day of the quarter (3 month period).\n\nSEMI_ANNUALLY - Executes the job the first time on the date and time specified in the start time attribute. Subsequent jobs are scheduled to execute on the first day of the month every 6 months and 12 months.\n\nANNUALLY - Executes the job the first time on the date and time specified in the start time attribute. Subsequent jobs are scheduled to execute every 12 months.\n\nLOG-2 (Saves only) - ABS executes a full backup operation on day 1, and an incremental backup operation on day 2. On day 3, ABS executes an extended incremental backup operation. An extended incremental backup operation backs up any file modified since the last full or extended incremental backup operation.\n\nLOG-3 (Saves only) - ABS executes a full backup operation on day 1, and an incremental backup operation on days 2 and 3. On day 4, ABS executes an extended incremental backup operation. An extended incremental backup operation backs up any file modified since the last full or extended incremental backup operation.\n\nAdvantages of Log-n backup operations:\n\nPerforming Log-n backup operations require less restore operations to fully restore a lost or corrupted disk volume. The higher the number of Log-n, the less restore operations you need to perform. Log-n backup operations are configured on a 32-day schedule, as shown in the examples below:\n\nCUSTOM - This option allows you to define a specialized frequency by manipulating the associated schedule object directly. In this way you can define more flexible scheduling frequencies than are offered by the standard options. If you specify CUSTOM but do not modify the schedule object, then the default custom frequency is daily. This option applies only if internal MDMS scheduling is enabled (scheduler options INTERNAL and EXTERNAL).\n\nEXPLICIT - This option enables you to submit the save request using a specific scheduler interval. If you select Explicit, you must enter a scheduler time format valid for the scheduler being used in the EXPLICIT INTERVAL attribute. This option applies only if a thirdparty scheduler is being used (scheduler options SCHEDULER).\n\nNEVER - Never submits the save request and does not call the scheduler to create a job. For example, you may need to create one or more save requests before you determine their schedule. To submit the save request, modify the save request and change the scheduling option.\n\nDepending on the selected scheduling option and the use of a 3rd party scheduler product, the Explicit Interval option allows to specify more flexible intervals. The Explicit Interval is passed as a string to the scheduler in use. Consult your scheduler’s manual for more information.\n\n3.5.11. Incremental\n\nEvery save or restore request can be flagged as an incremental operation or a non-incremental operation. An incremental operation saves or restores files based on a previous operation - either a full operation or another incremental operation. For example, you could define a save request that performs a full disk save on Sunday, and an incremental save request that performs incremental saves on Monday through Saturday. The incremental saves will only save files that have been created or modified since the previous save (whether full or incremental). Restores can be performed in a similar fashion.\n\nBy default, saves and restores are not flagged as incremental. If you wish to define an incremental save or restore, then set the incremental attribute.\n\nIt is important to point out that if you execute an incremental save 127 times in a row without an intervening FULL save, then the 128th “incremental” save will actually be a full save. This rule actually applies to each individual file, disk, path or database specification within the save request, and as such, it is possible for the various files, disks, paths or databases within a single save request to be backed up at different incremental levels, or have a mixture of fulls and incrementals. As such, it is recommended that you intersperse a non-incremental (full) save at least once a week to avoid unexpected full backups on saves/restores marked incremental and to reduce the restore time required with a large number of incrementals. If you are mixing FULL and INCREMENTAL save requests, use the same catalog for both save requests so that the FULL catalog entry will be found and used as a base for the incrementals.\n\n3.5.12. Nodes and Groups\n\nABS always performs save and restore operations on an OpenVMS execution node, under the control of the ABS coordinator process. Only one execution node actually executes any particular save or restore request at a particular time, but you can specify a list of compatible nodes using either the nodes or groups attributes. At execution time, the node list or group list is scanned in order to determine the execution node, and ABS will attempt to schedule the operation on the first such node. If ABS fails to establish a connection to that node, it will try the next node on the list, and so on until the request is successfully submitted.\n\nFor data types VMS files and Oracle databases of all types, the execution node is also the node where the data resides. Therefore, all execution nodes or groups must have access to the data being saved or restored. For data types UNIX files and Windows files, the execution node is the node running the ABS coordinator process, not the UNIX or Windows node on which the data resides: that node is specified by the SOURCE NODE attribute in the save or restore (or selection).\n\nIf you wish to enter nodes individually, enter a comma-separated list of nodes in the NODES attribute or select a list of nodes from the GUI. Enter the MDMS node object name (which should be the same as the DECnet Phase IV name if DECnet is running) - do not specify the TCP/IP name or DECnet Phase V fullname.\n\nMDMS supports the notion of groups, whereby you can associate a list of nodes which have something in common (for example, nodes in a cluster) into a group, and simply reference the group name. In this case, you can simply enter one or more group names in the GROUPS attribute.\n\nThe NODES attribute and GROUPS attribute are mutually exclusive - you have to choose which one to enter.\n\nIf you enter neither nodes nor groups, then ABS enters the node from which the save or restore was created in the NODES attribute.\n\n3.5.13. Prologue and Epilogue\n\nThe prologue and epilogue attributes in the save or restore request allow you to invoke a command procedure before and/or after each disk, file, path or database specification in the request. This allows you to perform pre-processing and post-processing operations around individual save or restore iterations. Compare the order of save and restore prologue and epilogue procedures operations to the environment prologue and epilogue procedures, which are executed before and/or after the entire save or restore request. The order of execution is illustrated below:\n\nEnvironment prologue\n\nStart save or restore request\n\nFirst disk/file specification prologue\n\nFirst disk/file specification save or restore operation\n\nFirst disk/file specification epilogue\n\nNext disk/file specification prologue\n\nNext disk/file specification save or restore operation\n\nNext disk/file specification epilogue\n\n......\n\nEnd save or restore request\n\nEnvironment epilogue (only on successful completion)\n\nABS defines logical names that can be used within the prologue or epilogue command procedures. Each name is suffixed by “_n”, where n is the iteration number for each include disk, file, path or database specification. The value for n starts at 1 and goes to 24, the maximum number of include specifications supported by ABS. These logical names are defined in the process job table as follows:\n\n3.5.14. Reschedule\n\nThe reschedule attribute is used to create a new job with an external scheduler product. Normally, when you create a save or restore request, ABS creates a new scheduler job for the request. If you modify the request, then ABS modifies the existing scheduler job. However, there are circumstances whereby the scheduler job is deleted and needs to be re-created. You can set the reschedule attribute to re-create a new scheduler job for the request. This attribute has no effect when MDMS scheduling is in operation.\n\n3.5.15. Selections\n\nAs discussed in section 3.2.3.6, you can specify the files, disks, paths or databases to be included in a save or restore request in one of two ways:\n\nBy using the INCLUDE attribute in the save or restore request, and using a default selection\n\nBy manually creating SELECTIONS, including the files, disks, paths or databases in the selection objects, then associating the selection objects with the save or restore requests.\n\nThe SELECTION attribute is how you associate a selection object with a save or restore request. Simply include the selection names as a comma-separated list in the selections attribute. If you wish to have no selections and use the default selection, specify no selections.\n\n3.5.16. Sequence Option (Saves Only)\n\nA save operation involves a data copy phase and a post-processing phase. For archive type TAPE, the post-processing phase does not require the use of a tape drive, so ABS could start on the next data copy phase using the drive before the post-processing phase of the previous operation is complete. This option speeds up the total save operation - if you want to use this option, specify OVERLAPPED as the sequence option. If, on the other hand, you prefer the data copy and post-processing phases to be performed sequentially, enter SEQUENTIAL for the sequence option.\n\nBy default, the sequence option is set to SEQUENTIAL.\n\n3.5.17. Skipping schedule operations on Holidays\n\nThis feature allows the system administrator to prevent scheduling of operations on certain dates as operators are not available to service requests.\n\nAs stated earlier, the start date specifies the next start date and time for the request. This start date is updated whenever the request is run to reflect the next time it is scheduled, or NONE if it is not scheduled again.\n\nBefore a calculated date is assigned to the start date, it is compared against a list of holidays which is loaded into memory from MDMS$DATABASE_LOCATION:HOLIDAYS.DAT at start up.\n\nIf the calculated date matches any of the holiday definitions, this date is ignored and we search further for the next valid start date. This process continues until we find a calculated date that does not match any of the holiday definitions and hence can be assigned to the start date.\n\nAt start up time, the MDMS server reads all the records in HOLIDAYS.DAT and loads the valid holiday definitions in memory. Definitions that do not confirm to the stated record format are ignored. The valid holiday definitions loaded in memory are displayed in:\n\n$ MDMS SHOW DOMAIN/FULL\n\nBy default, there are no holiday definitions. If the system administrator wishes to define a list of holidays, a HOLIDAYS.DAT file has to be created in the database location where the MDMS DATABASE files are present (MDMS$DATABASE_LOCATION:HOLIDAYS.DAT).\n\nNote\n\nSince the MDMS server loads the holiday definitions into memory at start up time, for any changes in HOLIDAYS.DAT to take effect, the MDMS server needs to be restarted.\n\n3.5.17.1. HOLIDAYS.DAT Record Format\n\nThe format for each record in HOLIDAYS.DAT file is:\n\ndd-mmm-yyyy,xxxxxxxxxxx\n\nWhere:\n\ndd—is the day mmm—is the first three letters of the month yyyy—is the year xxxxxxxx—is the name of the holiday\n\n3.5.17.2. Example: HOLIDAYS.DAT File\n\nThe following example shows the contents of a HOLIDAYS.DAT file for the year 2002.\n\n04-JUL-2002,Independence Day 02-SEP-2002,Labor Day 28-NOV-2002,Thanksgiving 25-DEC-2002,Christmas\n\n3.6. Selections\n\nABS uses selections to hold information about files, disks, paths and databases to be saved or restored. You can elect to specify these names in one of two ways:\n\nBy using the INCLUDE attribute in the save or restore request, and using a default selection\n\nBy manually creating SELECTIONS, including the files, disks, paths or databases in the selection objects, then associating the selection objects with the save or restore requests.\n\nThe first option is discussed in Section 3.5.6 as part of the save and restore option. This section discusses the various attributes in the selection object.\n\nThe selection object gives you more flexibility to select files based on dates, agent qualifiers for the backup agent, and specifying conflict options on a restore. You can associate up to 24 selections with a given save and restore request, with the caveat that the total number of disk, file, path or database specifications in all selections does not exceed 24.\n\nThere are two steps in using selections:\n\nCreating or modifying a selection object directly by using the MDMSView GUI or the CLI.\n\nAssociating the selection to the associated save and restore request by including it in the SELECTIONS attribute of the request.\n\nThe following sections describe attributes in the selection object.\n\n3.6.1. Agent Qualifiers\n\nABS uses a backup agent to perform saves and restores, and the backup agent is dependent on the data type as follows:\n\nVMS Files - The backup agent is the OpenVMS BACKUP utility.\n\nRdb Databases and Rdb Storage Areas - The backup agent is RMU Backup\n\nUNIX Files and Windows Files - The backup agent is gtar (tape archiver)\n\nAlthough ABS passes information that you specify in the save, restore and environment to the backup agent, you can pass qualifiers directly to the backup agent using the agent qualifiers attribute. Refer to the appropriate backup agent documentation for information on these qualifiers.\n\n3.6.2. Before Date, Since Date and Date Type (Saves Only)\n\nFor save requests, you can select files for saving based on the date files were last modified. You can specify either or both of the following:\n\n• Before Date - Any version of the file modified before the specified date\n\n• Since Date - Any version of the file modified after the specified date\n\nIf you specify both a before and since date, you are providing a range of dates in which to select files. If a file does not have a revision date (modified date), then ABS uses the creation date instead.\n\nABS does not yet support the date type attribute, which would allow you to select any one of the four online dates maintained by OpenVMS.\n\n3.6.3. Conflict Options (Restore Only)\n\nWhen restoring files, you may find that there are files of the same name already located in the destination directory or original source location. You can specify what ABS should do if it encounters this situation by specifying one of the following conflict options:\n\nNEW VERSION - Restores the data and header and creates a new version of the file - applicable to VMS files only.\n\nOVERLAY VERSION - Overwrites the online version with the archive version of the data, but keeps the online version of the header.\n\nREPLACE VERSION - Deletes the online version of the file, and restores both the header and data from the archive.\n\nRETAIN VERSION - Keeps the online version of the header and data and does not restore the file from the archive.\n\nIf not specified, the default is RETAIN VERSION.\n\n3.6.4. Include, Exclude, Data Type and Source Node\n\nIn exactly the same manner as in save and restore requests, you can specify the following attributes in selection objects directly:\n\nINCLUDE - A list of disks, files, paths or databases to include in the save or restore. If you want the file directory structure to be maintained during the restore operation, see the note given in Section 3.5.6.\n\nEXCLUDE - A list of files to exclude from the save or restore that would otherwise have been included according to the include specification. This option applies to data type VMS FILES only\n\nDATA TYPE - The type of data to be saved or restored - select one of the following:\n\nVMS Files - Applicable to VMS files. If only a disk is selected, a FULL backup of the entire disk is performed. If directory and file specifications are specified, then a SELECTIVE backup of files is performed.\n\nOracle Rdb Database Options - These options (which are version-number specific) specify that you wish to back up an entire Rdb database using the RMU backup utility. In this case, specify the name of the Rdb database files.\n\nOracle Rdb Storage Area - These options (which are version-number specific) specify that you wish to back up selected storage areas of an Rdb database. In this case specify both the database file name(s) and selected storage areas.\n\nUNIX Files - This option applies to saving or restoring UNIX files on a client node. Enter a filesystem name in the format “/usr/...” to the level of granularity you want. With this option you must specify a SOURCE_NODE, which is the name of the UNIX node on which the online data resides.\n\nWindows Files - This options applies to saving or restoring Windows files on a client node. Enter a file pathname starting with the device (for example: C:\\Windows\\...” to the level of granularity you want. With this option you must specify a SOURCE_NODE, which is the name of the Windows node on which the online data resides.\n\nSOURCE NODE - This attribute applies to data types UNIX FILES and WINDOWS files only, and specifies the name of the node on which the file data resides. For other data types, the node is specified through the nodes and groups attributes in the request.\n\nThe following table shows examples of the appropriate file, disk, path or database names that are valid for each data type:\n\n3.7. Schedules\n\nABS supports very flexible options for scheduling save and restore requests, both using the internal MDMS scheduling options and using a third part scheduler. The scheduling options can be divided into three main categories:\n\nStandard - ABS provides a list of standard options that you can specify, and the scheduling information is applied to the schedule object automatically. Standard options are supported by both internal MDMS scheduling and an external scheduler product. Standard options are all those that are neither custom or explicit.\n\nCustom - This option allows you to customize the schedule for the request if the standard options are not sufficient. For example, if you want to run the request every second Sunday in January, April, July and October, then the custom option can do this. You specify CUSTOM as the frequency, then modify the schedule object for the request directly. This option is applicable to internal MDMS scheduling only.\n\nExplicit - This option also allows you to customize your schedule, but this time with an external scheduler product. You specify EXPLICIT as a frequency, then enter a string into the EXPLICIT INTERVAL attribute. This attribute is a string that can be understood by the external scheduler product specifying the desired frequency. Alternatively, you can use the user interface of the external scheduler product to specify the frequency of the request. This option is applicable only to external scheduling options.\n\nThis section discusses the second option, custom schedules, which are only applicable to internal MDMS scheduling. To use a custom schedule, specify CUSTOM as the frequency on the save and restore request, then modify the attributes of the associated schedule object. The schedule object always has the name of the save and restore request, followed by “_SAVE_SCHED” or “REST_SCHED” respectively.\n\n3.7.1. After Schedule\n\nWith ABS custom scheduling, you can actually define one schedule to execute after another schedule has completed. For example, if you want SAVE2 to execute immediately after SAVE1 completes, you can modify SAVE2’s schedule object and setting its AFTER SCHEDULE attribute to SAVE1’s schedule object. In this case:\n\nSAVE2_SAVE_SCHED:\n\nAfter Schedule: SAVE1_SAVE_SCHED\n\nIf you specify an after schedule and only want the associated request to execute after the after schedule (and not at any other time), then do not specify any other date or time attributes in the schedule. If on the other hand you want the associated request to execute at regular times AND after the specified after schedule, then you can associate date and time attributes to the schedule.\n\nWith after schedule, you can also define conditions upon which the schedule will run after the other schedule. The conditions are stored in an attribute called after schedule when. Select from one of the following:\n\nALL - Always run the schedule after the dependent schedule completion\n\nSUCCESS - Run the schedule if the dependent save or restore completed with a successful status\n\nWARNING - Run the schedule if the dependent save or restore completed with a Warning, Error or Fatal status\n\nERROR - Run the schedule if the dependent save or restore completed with an Error or Fatal Status\n\nFATAL - Run the schedule if the dependent save or restore completed with a fatal status\n\nNONE - Never run the schedule (can be used as a temporary placeholder)\n\nIf an after schedule name is defined, but no conditions are specified, the default condition is ALL. To remove the after schedule dependency, specify no after schedule.\n\n3.7.2. Command\n\nFor ABS save and restore commands, the command to run a schedule and execute the associated save and restore request is:\n\nMDMS RUN SCHEDULE schedule_name\n\nYou should not modify this command line, unless you know how to activate an ABS request in some other way.\n\nFor non-ABS save or restore requests, this command line can be any command that can be submitted to the OpenVMS CLI.\n\n3.7.3. Restriction\n\nThere is a restriction with using the /AFTER_SCHEDULE qualifier. Only those schedules (created automatically by MDMS) that have an associated save can be assigned to the /AFTER_SCHEDULE qualifier. Schedules that do NOT have an associated save cannot be assigned to the /AFTER_SCHEDULE qualifier. Hence, any schedule (one with an associated save, or one which executes DCL commands) can have a dependency on a schedule with an associated save, but not on a schedule which executes DCL commands. This is a current MDMS design limitation.\n\n3.7.4. Dates, Days and Months\n\nABS supplies three attributes in the schedule object by which you can specify on what days you want the schedule to be regularly executed. These are:\n\nDates - The dates of the month you want the schedule to execute\n\nDays - The days of the week you want the schedule to execute\n\nMonths - The months of the year you want the schedule to execute\n\nYou can specify the actual dates in the month that you want the schedule to run by number. Here are some examples:\n\nIf you do not specify a date attribute, the default is every day of the month.\n\nYou can specify the actual day in the week that you want the schedule to run by name. Here are some examples:\n\nIf you do not specify a day attribute, the default is every day of the week.\n\nFinally, you can specify the actual months in the year that you want the schedule to run by name. Here are some examples:\n\nIf you do not specify a month attribute, the default is every month of the year.\n\nThe dates, days and months attributes work together so that all must qualify for the schedule to be run. Therefore if you specify days SUN, but months of JAN, JUL only, then the schedule only runs on Sundays in January and July.\n\nThe following table shows some examples of how the days, dates and months attributes work together to produce custom schedules.\n\nIf there are schedules that cannot be accommodated by this scheme, then you can use the INCLUDE and EXCLUDE attributes as explained below.\n\n3.7.5. Include and Exclude\n\nAlthough the days, dates and months attributes can produce a very flexible scheduling scheme, there may be specific days that you want to include or exclude regardless of the regular schedule. You can do this using the following attributes:\n\nINCLUDE - Include specific dates that otherwise may not be included using the days, dates and months attributes\n\nEXCLUDE - Exclude specific dates that otherwise may be included using the days, dates and months attributes\n\nThe dates are specified in the standard OpenVMS format DD-MMM-YYYY, and can range from the current date to up to 10 years in the future. Only dates may be specified, not times. Specification of include and exclude dates override the regular schedule as determined by the dates, days and months attributes.\n\nYou can also use the include and exclude attributes to augment the days, dates and months in situations that they do not cover what you want. For example, to run on the last day of every month, you can specify DATES 31, DAYS MON-SUN and MONTHS JAN-DEC, then specifically include 28-Feb, 30-Apr, 30-Jun, 30-Sep, 30-Nov.\n\n3.7.6. Times\n\nABS allows you to specify times that you wish your schedule to run. Normally a schedule runs only once per day, but ABS allows you the flexibility to specify up to 100 times per day for a schedule to run. Simply specify times in the times attribute as a comma-separated list. Be careful to not specify so many times that the schedule executions overlap each other.\n\nChapter 4. Media Management\n\nThis chapter expands on the MDMS object summary given in Chapter 2, and describes all the MDMS objects in detail, including the object attributes and operations that can be performed on the objects.\n\nBefore going into details on each object, however, the use of the MDMS$CONFIGURE.COM procedure is recommended to configure your MDMS domain and the objects in it. In many cases this should take care of your entire initial configuration.\n\n4.1. MDMS Domain Configuration\n\nIf you are configuring your MDMS domain (including all objects in the domain) for the first time, HP recommends that you use the MDMS$CONFIGURE.COM command procedure. This procedure prompts you for most MDMS objects, including domain, drives, jukeboxes, media types, locations and volumes, and establishes relationships between the objects. The goal is to allow complete configuration of simple to moderately complex sites without having to read the manual.\n\nThe configuration procedure offers extensive help, and contains much of the information contained in this chapter. Help is offered in a tutorial form if you answer “No” to “Have you used this procedure before”. In addition, for each question asked, you can enter “?” to have help on that question displayed. Furthermore, if you type “??” to a question, not only will the help be displayed, but in most cases a list of possible options is also displayed.\n\nThis procedure is also useful when adding additional resources to an existing MDMS configuration. To invoke this procedure, enter:\n\n@MDMS$SYSTEM:MDMS$CONFIGURE.COM\n\nand just follow the questions and help.\n\nA complete example of running the procedure is shown in Appendix A.\n\n4.2. Domain\n\nThe MDMS domain encompasses all objects that are served by a single MDMS database, and all users that utilize those objects. A domain can range from a single OpenVMS cluster and its backup requirements, to multi-site configurations that may share resources over a wide area network or through Fibre Channel connections. An OpenVMS system running MDMS is considered a node within the MDMS domain, and MDMS server processes within a domain can communicate with one another.\n\nThe MDMS domain object is created at initial installation, and cannot be deleted. Its main focus is to maintain domain-wide attributes and defaults, and these attributes are described in the following sections.\n\n4.2.1. ABS Rights\n\nThe domain attribute ABS_RIGHTS controls whether a user having certain pre-V4.0 ABS rights can map these to MDMS rights for security purposes (see Chapter 5 for more information about rights). Setting the attribute allows the mapping, and setting the attribute to false disallows the mapping.\n\n4.2.2. Application Rights\n\nThe right MDMS_APPLICATION_RIGHTS is a high-level right that maps to a set of low level rights suitable for MDMS applications (for example, ABS and HSM). Normally these rights should not be changed, or at least not reduced from the default settings otherwise ABS and HSM may not function correctly. You may add rights to application rights if you have your own MDMS applications or command procedures. The ABS and MDMS$SERVER accounts should have MDMS_APPLICATION_RIGHTS granted in the User Authorization File.\n\n4.2.3. Check Access\n\nThe check access attribute determines if access controls are checked in the domain. MDMS uses two forms of security: Rights and Access Control. Rights checking is a task-oriented form of security and is always performed. However, access control is an object-oriented form of security and can be optionally enabled or disabled with this attribute. Setting Check Access enables access control checking. Clearing Check Access disables access control checking even if there are objects with access control entries.\n\n4.2.4. Deallocate State\n\nWhen a volume is deallocated after its data has expired, it may go into one of two states. The transition state is an interim state that the volume goes into after deallocation, but it is not eligible to be used again until a period of time called the transition time expires. This is a safety feature that allows you to examine whether the data has legitimately expired, and if not to retain the volume (put back to the allocated state). If you do not wish this feature, you can disable the transition state and allow volume to return directly to the free state, where it is eligible for immediate allocation and initialization for new data. The domain deallocate state is applied to all volumes that are automatically deallocated by MDMS. When manually deallocating volumes, you can override the domain deallocate state with a state on the deallocate operation itself.\n\n4.2.5. Default Rights\n\nThe MDMS default rights attribute maps a set of MDMS low-level rights to all users in the domain. This allows you to give all users a limited set of rights to access MDMS objects and perform operations, without having to expressly modify their accounts. Be aware that default rights are applied to all users on all nodes in the domain, so granting such rights should be carefully reviewed. By default, MDMS maps no rights to the default rights.\n\n4.2.6. Mail Users\n\nWhen MDMS deallocates volumes based on their scratch date (an operation that is performed once per day), it sends a mail message indicating which volumes were deallocated to the set of users defined in the mail users attributes. You should enter a list of users in the format node::username. Every user in the list will receive the deallocate volume mail messages. This mail address is also used when the ABS catalog unpack process encounters an error.\n\n4.2.7. Maximum Scratch Time\n\nThe maximum scratch time is the maximum scratch time that can be applied to any volume when it is allocated. The scratch time is the period of time that you wish the volume to stay allocated because its data is still valid. The maximum scratch time imposes a maximum limit and overrides the volume’s scratch time if it exceeds the maximum. For HSM, the maximum scratch time should be set to zero (unlimited), as HSM volumes’ data remains valid until it is repacked. For ABS uses, this value should be set to the longest period of time you wish to retain any volume.\n\n4.2.8. Media Type\n\nThe domain media type attribute is the media type that is applied to new volumes and drives by default when they are created. In a simple configuration, you may only have a single media type, so specifying it in the domain allows you to not have to specify it when creating individual drives and volumes. It may also be applied as a default to ABS archives. You may always override the domain default media type with a specific media type when you create or modify drives and volumes.\n\n4.2.9. Offsite Location\n\nThe domain offsite location attribute is applied by default to the offsite location field of new volumes when they are created. The offsite location is an MDMS location that is used for secure storage of the volumes in case of a disaster. You can always override the domain default offsite location when you create or modify volumes.\n\n4.2.10. Onsite Location\n\nThe domain onsite location attribute is applied by default to the onsite location field of new volumes when they are created. The onsite location is an MDMS location that is used for storage of the volumes when they are onsite, or quickly accessible to jukeboxes and drives. You can always override the domain default onsite location when you create or modify volumes.\n\n4.2.11. OPCOM Classes\n\nThe domain OPCOM classes attribute contains the default OPCOM classes that are applied to new node objects by default when they are created. OPCOM classes are classes of users whose terminals are enabled to receive certain OPCOM classes. You can override the domain default OPCOM classes with specific classes on a per-node basis when you create or modify a node.\n\n4.2.12. Operator Rights\n\nThe right MDMS_OPERATOR_RIGHTS is a high-level right that maps to a set of low level rights suitable for operators managing the domain. The default set of operator rights allow for normal operator activities such as loading and unloading volumes into drives, showing any object or operations, and moving volumes offsite and onsite. However, you can add or remove low level rights to/from the operator rights as you wish.\n\n4.2.13. Protection\n\nThe domain protection attributes defines the default protection applied to new volumes when they are created. This protection is used by MDMS when it initializes volumes, and writes the protection on the magnetic tape volume itself. You can always override the domain default protection by specifying the protection specifically when creating or modifying a volume.\n\n4.2.14. Relaxed Access\n\nThe relaxed access attribute controls the security when a user or application tries to access an object without any access control entries, and access control checking is enabled. If relaxed access is set, such access is granted. If relaxed access is clear, such access is denied. The relaxed access attribute is ignored if the check access attribute is clear.\n\n4.2.15. Request ID\n\nMDMS uses sequentially increasing request identifiers for each request received by the MDMS database server, and this attribute displays the ID of the next request. If this ID is becoming very large, you can reset it to zero or one (or indeed any value) if you wish. The request ID automatically resets to one when it reaches one million.\n\n4.2.16. Scheduler Type\n\nMDMS performs scheduling operations on behalf of itself and ABS. For ABS scheduling, you can choose a scheduler type that best meets your needs, as follows:\n\nInternal - The default internal scheduler type uses MDMS schedule objects and OpenVMS batch queues. This option should be sufficient for most sites as the schedule object supports many custom scheduling options.\n\nExternal - This option uses MDMS schedule objects and OpenVMS batch queue, but the scheduling is submitted through a command procedure. You can use this option if you have a need to modify the command procedure to perform site-specific operations.\n\nScheduler - This option uses an external scheduler product via command procedures. ABS supplies a template scheduler command procedure that you can modify to access your own scheduler product. You can also use this option to invoke the pre-V3.0 ABS DECScheduler V2.1B, as long as you have a license for that product.\n\nMDMS-initiated scheduled operations such as MDMS$MOVE_VOLUMES always use the internal MDMS scheduler.\n\n4.2.17. Scratch Time\n\nThe domain default scratch time is the default scratch time applied to new volumes when they are created. Scratch time indicates how long a volume is to remain allocated (that is, how long its data is valid and needs to be kept). You can override the domain volume scratch time when you create, modify or allocate individual volumes. For HSM volumes, the scratch time should be set to zero (unlimited), since HSM data remains valid until a volume is repacked.\n\n4.2.18. SYSPRV\n\nMDMS uses user account rights as one mechanism for security within the domain. MDMS allows you to control whether the OpenVMS privilege SYSPRV can map to the ultimate MDMS right MDMS_ALL_RIGHTS. If you set the SYSPRV attribute, users with SYSPRV are assigned MDMS_ALL_RIGHTS, which means they can perform any operation subject to access control checks. Clearing SYSPRV gives users with SYSPRV no special rights.\n\nNote\n\nIf you wish to use the SYSPRV attribute from the MDMSView GUI, the user’s authorization file must have SYSPRV defined as a privilege and a default privilege. Having SETPRV is not sufficient as there is no way to set the SYSPRV privilege from the GUI.\n\n4.2.19. Transition Time\n\nThe domain default transition time is applied to volumes by default when they are deallocated into the transition state. The transition time determines how long the volumes remain in the transition state before moving to the free state. This attribute is used alongside t"
    }
}