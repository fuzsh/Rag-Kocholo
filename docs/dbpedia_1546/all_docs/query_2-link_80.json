{
    "id": "dbpedia_1546_2",
    "rank": 80,
    "data": {
        "url": "https://blog.digitalasset.com/developers/daml-smart-contracts-composability",
        "read_more_link": "",
        "language": "en",
        "title": "Delivering the composable enterprise of the future with Daml",
        "top_image": "https://blog.digitalasset.com/hubfs/unnamed-98.png",
        "meta_img": "https://blog.digitalasset.com/hubfs/unnamed-98.png",
        "images": [
            "https://blog.digitalasset.com/hubfs/raw_assets/public/da-website-overhaul-2022/images/digital-asset-logo-light.svg",
            "https://blog.digitalasset.com/hubfs/raw_assets/public/da-website-overhaul-2022/images/da-mobile-icon.png",
            "https://blog.digitalasset.com/hubfs/raw_assets/public/da-website-overhaul-2022/images/mobile-email.png",
            "https://blog.digitalasset.com/hs-fs/hubfs/unnamed-96.png?width=512&name=unnamed-96.png",
            "https://blog.digitalasset.com/hs-fs/hubfs/unnamed-97.png?width=512&name=unnamed-97.png",
            "https://blog.digitalasset.com/hs-fs/hubfs/unnamed-98.png?width=419&name=unnamed-98.png",
            "https://blog.digitalasset.com/hs-fs/hubfs/unnamed-99.png?width=420&name=unnamed-99.png",
            "https://blog.digitalasset.com/hs-fs/hubfs/unnamed-100.png?width=512&name=unnamed-100.png",
            "https://blog.digitalasset.com/hs-fs/hubfs/unnamed-101.png?width=512&name=unnamed-101.png",
            "https://no-cache.hubspot.com/cta/default/2704830/a7a551e2-dbda-4be1-bc0e-d11b23eddcb6.png",
            "https://blog.digitalasset.com/hubfs/Logos/Digital%20Asset%20Logos/digital-asset-logo-light.svg",
            "https://px.ads.linkedin.com/collect/?pid=1132186&fmt=gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "See how Daml Smart Contracts support composable enterprise by unifying business processes and avoiding data reconciliations across the applications.",
        "meta_lang": "en",
        "meta_favicon": "https://blog.digitalasset.com/hubfs/A-Favicon-circle.svg",
        "meta_site_name": "",
        "canonical_link": "https://blog.digitalasset.com/developers/daml-smart-contracts-composability",
        "text": "The need to deliver better customer experiences and business agility have led to the concept of the composable enterprise. For example, in this article, Gartner lays out a compelling argument for organizations to follow the four principles of modularity, autonomy, orchestration, and discovery. At its core this means a decoupled, more agile organization so that business processes can pivot quickly, and technology applications can be composable.\n\nIn this post, we’ll explore how to make that vision of the composable enterprise a practical reality. We’ll create a technology architecture that can strongly support this vision of a composable enterprise. We will also anticipate and address the two primary challenges for realizing this vision—unifying business processes and avoiding data reconciliations across the applications.\n\nTo create the examples illustrating the composable enterprise, we’ll use concepts from the Daml smart contract language. We’ll also use the features of the Canton interoperability protocol to integrate the business logic of various applications regardless of their technology stack.\n\nOur example business process\n\nAs an example of composable business architecture, let’s consider a practical use case that many of us are familiar with—a telecom company that provides your broadband internet as well as your cellular service. Like any organization in any industry, multiple business units generally have evolved over time and often have different regulatory requirements. So it is typical to have diverse technology infrastructures and business processes that need to be integrated together to provide a unified front to the customers.\n\nIn our telecom example, customers get a bundled discount depending on different parameters of their cellular and broadband subscription packages. For example, if they have a platinum broadband package, then they receive discounts on each cellular line. Likewise if they have multiple cellular lines, then they receive an extra service on the broadband plan. The combinations are endless.\n\nThe challenge that we will be addressing today is of creating composability so that the business processes are unified and that changes in one unit (e.g., a new cellular connection) do not need data transfers or reconciliations between multiple applications. In other words, a golden source of data across the enterprise is created. These two capabilities will allow the enterprise to pivot quickly as business needs change—or in other words, lead to a composable enterprise.\n\nFirst, let’s assume that a customer relationship and the customer’s updates is represented using traditional architecture as follows:\n\nEach business division has its own database infrastructure, and then the updates are synced via different mechanisms. Regardless of how the updates are synced, you’ll note that transfer of data and reconciliation will always be needed to keep the records in sync. The need to keep all this running, while still maintaining data integrity, masking, and compliance, causes tremendous complexity in the enterprise technology landscape.\n\nThis traditional approach of integration and syncing multiple databases leads to challenges as soon as a “customer” view is required. See this article by Gartner on 12 data and analytics trends for 2022 that brings out the need for a common data fabric to enable AI and analytics. In fact, the availability of clean data is also a must to build a composable enterprise business.\n\nTo simplify this, we’ll create the overall customer relationship using Daml smart contracts. The conceptual diagram becomes something like the below:\n\nAs you can see, the problem of golden source maintenance has been removed. The smart contracts layer maintains the golden source of data automatically based on unified business processes that span both business units. Moreover, within the golden source, we can now achieve full privacy and data segregation between the business divisions, and also more granularly. That’s because a smart contract language like Daml maintains privacy at the “Party” level. A “Party” to whom the data is visible is an entity that takes an action or is a stakeholder to a transaction. Because a business process in Daml is defined in this way, users would only be able to see transactions on the ledger to which they are a party. It follows that based on the need-to-know privacy requirements required by an enterprise, specific smart contracts would be created with different users as stakeholders. For example, while an overall customer relationship contract may be made available to customer services representatives from both enterprises, the smart contracts that contain the details of each relationship may only be available to specific users from within that business unit. For more details, refer to this explanation of how this enhanced privacy protection works.\n\nHow would we collaborate in a composable enterprise?\n\nThe collaboration between multiple business units and applications of a composable enterprise can be achieved through smart contracts that encode the rights and obligations of the parties. As mentioned before, one of the initial contracts to be created would be a “customer relationship” contract. This will be created by the business entity that onboards the customer first. Then, subsequent business entities would refer to this contract and add their relationships to it. The customer and both business units are signatories on the contract, which means that changes to this contract can be done only after every party has provided its consent. This capability is called a multi-signatory pattern. Both business1 and business2 have access to this overall contract without necessarily having the permission to read the actual, more detailed customer entitlements from the other business unit. That provides for strong privacy and compliance. We can of course model this any other way as well, to suit the business needs.\n\nNow, based on this relationship, a customer representative (or even a chatbot) can avoid swivel chair operations and effectively service the customer.\n\nWe achieve this by adding a right to this smart contract. In Daml, every action that can be performed is a right that is afforded to the party in question. In our hypothetical organization, we have modeled a chinese wall between the broadband and cellular organizations, but naturally, we now want to give business1 (say, the broadband division) the right to update the broadband package that the customer is subscribed to.\n\nAfter adding the “right” for each business division, the conceptual model looks like this:\n\nEach business unit has the right to update their own part of the customer relationship. This makes sense because Business2 should not be able to alter the package that is owned by business 1. Thus, through the system of controllers and signatories, Daml provides regulatory and compliance guarantees built right into the business process model.\n\nIn our example, when the broadband division exercises this “right” and updates the broadband package, contrary to what happens in legacy technology architectures, we now avoid the usual data transfers and reconciliations. Instead, all parties will access a common, golden source of information, which in turn makes available only the information that a business unit needs.\n\nSo, in our simplistic use case, an update to the broadband package above will now automatically trigger a contract on the cellular side of the business. That way they can adjust the customer bundles as needed. In most cases, these subsequent actions will be automated.\n\nThus, there is no need to transfer or send data or messages back and forth between applications. Everything becomes a part of the golden source, fully private to the party that requires access to it.\n\nIn the updated golden source of this customer relationship, the cellular division (business2) can now update the pricing of the cellular subscription. Doing so also notifies the customer to accept new terms. This final loop is closed by sending a contract with the pricing change proposal to the customer. As you can see below, the customer has been given a right on that contract to accept the proposal. And as they do so, the original golden source of the customer relationship is also automatically updated.\n\nThis smart contract model above mirrors the business process closely (the one we decided to model), and accomplishes some remarkable things technologically:\n\nNo data reconciliation across the enterprise is needed. Contrast that with multiple databases that are often scattered across numerous applications, often being updated through middlewares and APIs. In the composable enterprise model we demonstrated using Daml, these databases can still exist, but will be synced tightly with the golden source of information created by the Daml smart contracts layer.\n\nUnifying the business process: Enterprise and business architects finally get to have a single version of the business process to refer to—that represented by Daml above. There are no other documents or technical models to refer to. And, if the business process changes, so does this Daml model. This makes it very efficient to examine any change impacts and increase the speed of any pivots that are required.\n\nWhat about physical infrastructure decoupling in a composable enterprise using Daml?\n\nDecoupling of the various business units is inherently supported by the composable enterprise business model above. The business logic of the organizational units can be hosted on a variety of different infrastructures and technology stacks. The Daml smart contracts layer outlined above can be distributed and synchronized across organizational units by the Canton distributed ledger layer. This way, there is full flexibility to choose the tech stack and deployment architecture for each business unit.\n\nThe technology choices of the different business divisions will be respected by using a composable business architecture using Daml and Canton. For example, business1 could be using MS Azure, while business2 may be on Amazon AWS. The smart contract model ensures composability, making this completely transparent to the application developers on either side. All that they are exposed to are smart contract APIs from Daml.\n\nAs is evident, the deployment topology is flexible enough to support various kinds of architectures and requirements.\n\nWhat’s next in the journey towards a composable enterprise?\n\nThe model of a composable enterprise demonstrated above is simplistic, but we hope it shows how the vision for a composable enterprise is very much within reach when we use the right technologies. In this example, we modeled two business divisions being able to collaborate in real time without having to send and reconcile data back and forth. Similar use cases are in every industry. For example, Tracy Moors outlines legacy modernization in capital markets."
    }
}