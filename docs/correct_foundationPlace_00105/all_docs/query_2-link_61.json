{
    "id": "correct_foundationPlace_00105_2",
    "rank": 61,
    "data": {
        "url": "https://www.hipparchus.org/xref/org/hipparchus/analysis/solvers/PegasusSolver.html",
        "read_more_link": "",
        "language": "en",
        "title": "PegasusSolver xref",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "View Javadoc\n\n1 /* 2 * Licensed to the Apache Software Foundation (ASF) under one or more 3 * contributor license agreements. See the NOTICE file distributed with 4 * this work for additional information regarding copyright ownership. 5 * The ASF licenses this file to You under the Apache License, Version 2.0 6 * (the \"License\"); you may not use this file except in compliance with 7 * the License. You may obtain a copy of the License at 8 * 9 * https://www.apache.org/licenses/LICENSE-2.0 10 * 11 * Unless required by applicable law or agreed to in writing, software 12 * distributed under the License is distributed on an \"AS IS\" BASIS, 13 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 14 * See the License for the specific language governing permissions and 15 * limitations under the License. 16 */ 17 18 /* 19 * This is not the original file distributed by the Apache Software Foundation 20 * It has been modified by the Hipparchus project 21 */ 22 23 package org.hipparchus.analysis.solvers; 24 25 /** 26 * Implements the <em>Pegasus</em> method for root-finding (approximating 27 * a zero of a univariate real function). It is a modified 28 * {@link RegulaFalsiSolver <em>Regula Falsi</em>} method. 29 * 30 * <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by 31 * maintaining a bracketed solution. The <em>Pegasus</em> method however, 32 * should converge much faster than the original <em>Regula Falsi</em> 33 * method. Furthermore, this implementation of the <em>Pegasus</em> method 34 * should not suffer from the same implementation issues as the <em>Regula 35 * Falsi</em> method, which may fail to convergence in certain cases. Also, 36 * the <em>Pegasus</em> method should converge faster than the 37 * {@link IllinoisSolver <em>Illinois</em>} method, another <em>Regula 38 * Falsi</em>-based method.</p> 39 * 40 * <p>The <em>Pegasus</em> method assumes that the function is continuous, 41 * but not necessarily smooth.</p> 42 * 43 * <p>Implementation based on the following article: M. Dowell and P. Jarratt, 44 * <em>The \"Pegasus\" method for computing the root of an equation</em>, 45 * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer, 46 * 1972.</p> 47 * 48 */ 49 public class PegasusSolver extends BaseSecantSolver { 50 51 /** Construct a solver with default accuracy (1e-6). */ 52 public PegasusSolver() { 53 super(DEFAULT_ABSOLUTE_ACCURACY, Method.PEGASUS); 54 } 55 56 /** 57 * Construct a solver. 58 * 59 * @param absoluteAccuracy Absolute accuracy. 60 */ 61 public PegasusSolver(final double absoluteAccuracy) { 62 super(absoluteAccuracy, Method.PEGASUS); 63 } 64 65 /** 66 * Construct a solver. 67 * 68 * @param relativeAccuracy Relative accuracy. 69 * @param absoluteAccuracy Absolute accuracy. 70 */ 71 public PegasusSolver(final double relativeAccuracy, 72 final double absoluteAccuracy) { 73 super(relativeAccuracy, absoluteAccuracy, Method.PEGASUS); 74 } 75 76 /** 77 * Construct a solver. 78 * 79 * @param relativeAccuracy Relative accuracy. 80 * @param absoluteAccuracy Absolute accuracy. 81 * @param functionValueAccuracy Maximum function value error. 82 */ 83 public PegasusSolver(final double relativeAccuracy, 84 final double absoluteAccuracy, 85 final double functionValueAccuracy) { 86 super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.PEGASUS); 87 } 88 }"
    }
}