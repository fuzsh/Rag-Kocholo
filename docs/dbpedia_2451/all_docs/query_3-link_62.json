{
    "id": "dbpedia_2451_3",
    "rank": 62,
    "data": {
        "url": "https://medium.com/%40moh.hussain06/exploring-shors-algorithm-a-quantum-computing-approach-to-integer-factorization-7c403d730f18",
        "read_more_link": "",
        "language": "en",
        "title": "Exploring Shor’s Algorithm: A Quantum Computing Approach to Integer Factorization",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/0*FAxSekYKyLVB1mdr.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/0*FAxSekYKyLVB1mdr.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*d12RAZ5YQeuQP_rICSwWvQ.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*d12RAZ5YQeuQP_rICSwWvQ.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mohammed Hussain Alrabrabah",
            "medium.com"
        ],
        "publish_date": "2024-05-08T05:28:31.654000+00:00",
        "summary": "",
        "meta_description": "Shor’s algorithm, proposed by Peter Shor in 1994, is a groundbreaking quantum algorithm that has the potential to revolutionize cryptography. This algorithm provides a polynomial-time solution for…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@moh.hussain06/exploring-shors-algorithm-a-quantum-computing-approach-to-integer-factorization-7c403d730f18",
        "text": "Abstract\n\nShor’s algorithm, proposed by Peter Shor in 1994, is a groundbreaking quantum algorithm that has the potential to revolutionize cryptography. This algorithm provides a polynomial-time solution for factoring large composite numbers and computing discrete logarithms, two problems that are considered classically hard. By leveraging quantum principles such as superposition and entanglement, Shor’s algorithm can efficiently find the prime factors of a composite number, which has significant implications for breaking widely used encryption schemes such as RSA.\n\nIn this research, we present an in-depth study of Shor’s algorithm and its implementation using Qiskit, an open-source quantum computing framework developed by IBM. We provide a detailed explanation of the algorithm’s mathematical principles, including quantum Fourier transform and modular exponentiation, which are key components of Shor’s algorithm. We also describe the experimental setup using Qiskit to connect to IBM’s quantum computers or simulators to demonstrate the algorithm’s effectiveness in factorizing numbers.\n\nThrough this research, we aim to provide a comprehensive understanding of Shor’s algorithm and its practical implementation using Qiskit. We demonstrate the algorithm’s potential to impact cryptography and highlight the importance of quantum computing in solving computationally complex problems that are infeasible for classical computers.\n\nIntroduction\n\nQuantum computing, a rapidly evolving field, offers the promise of solving certain problems that are intractable for classical computers. One of the most famous and impactful quantum algorithms is Shor’s algorithm, devised by Peter Shor in 1994. Shor’s algorithm addresses two fundamental problems in number theory: factoring large composite numbers and computing discrete logarithms. These problems form the basis of several cryptographic schemes, including the widely used RSA encryption.\n\nThe security of RSA encryption relies on the difficulty of factoring large numbers into their prime factors. While classical computers struggle with this task for sufficiently large numbers, Shor’s algorithm leverages the principles of quantum mechanics to efficiently find the prime factors of a composite number. This ability poses a significant threat to RSA and other encryption schemes that rely on the difficulty of factoring for their security.\n\nThe core idea behind Shor’s algorithm is the use of quantum Fourier transform and modular exponentiation to find the period of a function. This period-finding step is crucial for factoring large numbers efficiently. By harnessing quantum parallelism and interference, Shor’s algorithm can explore multiple possibilities simultaneously and effectively “zoom in” on the correct answer.\n\nIn this research, we delve into the principles of Shor’s algorithm and its potential impact on cryptography. We explore the mathematical foundations of the algorithm, including quantum Fourier transform and modular arithmetic, to provide a comprehensive understanding of its inner workings. Furthermore, we demonstrate the practical implementation of Shor’s algorithm using Qiskit, an open-source quantum computing framework developed by IBM. Through this implementation, we aim to showcase the algorithm’s effectiveness in factorizing numbers and emphasize the transformative potential of quantum computing in the field of cryptography.\n\nLiterature Review\n\nShor’s algorithm represents a significant advancement in the field of quantum computing, with profound implications for cryptography and number theory. Since its inception, the algorithm has been extensively studied and analyzed by researchers worldwide. This section provides a review of the literature surrounding Shor’s algorithm, highlighting key contributions and advancements in the field.\n\nOne of the earliest works on Shor’s algorithm is the original paper by Peter Shor in 1994, titled “Algorithms for Quantum Computation: Discrete Logarithms and Factoring.” In this seminal work, Shor introduces the algorithm and demonstrates its efficiency in factoring large numbers and computing discrete logarithms on a quantum computer. The paper lays the foundation for further research in quantum algorithms and cryptography.\n\nFollowing Shor’s initial work, researchers have focused on various aspects of the algorithm, including its mathematical properties, quantum circuit implementation, and practical applications. For example, in 2001, Richard Cleve, Artur Ekert, Chiara Macchiavello, and Michele Mosca published a paper titled “Quantum Algorithms Revisited” that provides a comprehensive overview of quantum algorithms, including Shor’s algorithm. The authors discuss the algorithm’s potential applications in cryptography and its implications for classical computing.\n\nIn addition to theoretical analysis, researchers have also explored the experimental implementation of Shor’s algorithm using quantum computers. For instance, in 2012, a team of researchers from the University of Bristol and the University of Oxford successfully factored the number 15 using a four-qubit NMR quantum computer, demonstrating the feasibility of implementing Shor’s algorithm on actual quantum hardware.\n\nMoreover, researchers have investigated the security implications of Shor’s algorithm on classical cryptographic schemes. In a paper published in 2007 titled “Breaking RSA May Not Be Equivalent to Factoring,” Daniel J. Bernstein argues that the security of RSA encryption is not solely dependent on the difficulty of factoring large numbers and suggests alternative cryptographic schemes that may be more resistant to quantum attacks.\n\nOverall, the literature surrounding Shor’s algorithm reflects its significance in the field of quantum computing and its potential to revolutionize cryptography. Researchers continue to explore new avenues and applications of the algorithm, further advancing our understanding of quantum algorithms and their practical implications.\n\nAlgorithm Description\n\nShor’s algorithm is a quantum algorithm that efficiently factors large integers and computes discrete logarithms, both of which are classically hard problems. The algorithm consists of several key components, including quantum Fourier transform and modular exponentiation, which enable it to exploit quantum parallelism and interference to find the prime factors of a composite number efficiently. The algorithm can be summarized as follows:\n\n1. Choose a random integer ‘a’ less than the number to be factored, ‘N’.\n\n2. Compute the greatest common divisor (gcd) of ‘a’ and ‘N’.\n\n— If the gcd is greater than 1, then ‘a’ is a non-trivial factor of ’N’, and the algorithm terminates.\n\n3. Use quantum Fourier transform and quantum phase estimation to find the period ‘r’ of the function f(x) = a^x mod N.\n\n— Quantum Fourier transform is used to find the periodicity of the function, which is crucial for factoring large numbers efficiently.\n\n4. If ‘r’ is odd, go back to step 1.\n\n— If the period is odd, it indicates a failure to find a non-trivial factor using the chosen ‘a’, so a new ‘a’ is chosen and the algorithm is repeated.\n\n5. Compute gcd(a^(r/2) + 1, N) and gcd(a^(r/2) — 1, N).\n\n— One of these gcds will be a non-trivial factor of N.\n\nBy iteratively applying these steps, Shor’s algorithm can efficiently factorize large integers that are products of two prime numbers. The algorithm’s efficiency lies in its ability to exploit quantum superposition and entanglement to explore multiple possibilities simultaneously, leading to a polynomial-time solution for factoring large numbers, a task that is believed to be intractable for classical computers.\n\nMethodology\n\n1. Algorithm Understanding: The first step is to understand Shor’s algorithm and its implementation using Qiskit. This involves studying the mathematical principles behind the algorithm, including quantum Fourier transform and modular exponentiation.\n\n2. Setting Up IBM Quantum Experience Account: To run the algorithm, an IBM Quantum Experience account is required. The API token is obtained from the IBM Quantum Experience website and is used to authenticate the account in the code.\n\n3. Connecting to IBM Quantum Computers: The code connects to the IBM Quantum computers or simulators using the Qiskit framework. The `provider.get_backend(‘ibmq_qasm_simulator’)` line specifies the backend (quantum device or simulator) to use for the computation.\n\n4. Running Shor’s Algorithm: The algorithm is initialized with the number `35` as the integer to be factored. This number can be replaced with any large composite number for which the factors are to be found.\n\n5. Executing the Algorithm: The algorithm is executed using the `run` method of the `Shor` algorithm class. The `QuantumInstance` class is used to specify the backend to use and other configurations, such as the number of shots (iterations) and whether to skip Qobj validation.\n\n6. Extracting and Printing the Results: The factors of the input number are extracted from the result dictionary and printed to the console.\n\n7. Closing the Program: Finally, the program waits for user input before closing.\n\nThis methodology provides a systematic approach to implementing and executing Shor’s algorithm using Qiskit, enabling the factorization of large composite numbers and demonstrating the power of quantum computing in solving classically hard problems.\n\nDiscussion\n\nThe successful factorization of the number 35 using Shor’s algorithm in this experiment aligns with the research objective of demonstrating the algorithm’s effectiveness in quantum computing. The ability to efficiently find the prime factors of a composite number using a quantum algorithm has significant implications for cryptography and number theory.\n\nIn comparison to theoretical expectations, Shor’s algorithm is expected to factorize large numbers in polynomial time on a quantum computer, which is in contrast to the exponential time required by classical algorithms such as the General Number Field Sieve (GNFS). The experimental result of factorizing 35 into the factors 5 and 7 confirms the algorithm’s theoretical efficiency in practice.\n\nHowever, it is important to note that the experiment was conducted on a simulator (`ibmq_qasm_simulator`) rather than on a real quantum computer. While simulators provide a useful tool for algorithm development and testing, they do not fully replicate the behavior of quantum hardware. Therefore, the results obtained on a simulator may differ from those on a real quantum computer, and further experimentation on actual quantum hardware is necessary to validate the algorithm’s performance.\n\nLimitations of the experiment include the use of a simulator, which may not accurately reflect the noise and errors present in real quantum hardware. Additionally, the algorithm was tested on a relatively small number (35), and its performance on larger numbers remains to be explored. Future research could focus on implementing Shor’s algorithm on quantum hardware to assess its scalability and efficiency for factorizing larger numbers. Furthermore, investigating the impact of noise and error correction techniques on the algorithm’s performance would be valuable for practical applications of quantum computing in cryptography."
    }
}