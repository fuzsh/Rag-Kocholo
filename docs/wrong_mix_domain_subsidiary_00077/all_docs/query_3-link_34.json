{
    "id": "wrong_mix_domain_subsidiary_00077_3",
    "rank": 34,
    "data": {
        "url": "https://stackoverflow.com/questions/3980909/microsoft-webapplication-targets-was-not-found-on-the-build-server-whats-your",
        "read_more_link": "",
        "language": "en",
        "title": "Microsoft.WebApplication.targets was not found, on the build server. What's your solution?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/c4c2dd916f14ce77004c937b2667fe12?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/wBRgZ.jpg?s=64",
            "https://i.sstatic.net/LcxXq.png",
            "https://www.gravatar.com/avatar/21127f16e7235060e9bc6ef97b685a73?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/80e497ec2173c1a6a4f28f0aec5a77a8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7049803124c603147c4388e0691dbf72?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0aacc49f7f62dd0c930335b19befbaed?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Ryqtb.jpg?s=64",
            "https://www.gravatar.com/avatar/328cc2ab3e5eb0d9588d40a30c07ffad?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ef820271b3f3e060aea24c2484602ef1?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/2814cc20402299cffb1e46898424e84f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a5bbdb764df8fc898a6a884142bffa26?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/7XSQE.png",
            "https://www.gravatar.com/avatar/fc2b6796fb6638ae62a8cf150e38b988?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/88be3a650ae5b4a09df3a3fdb80080d8?s=64&d=identicon&r=PG",
            "https://graph.facebook.com/543270572/picture?type=large",
            "https://www.gravatar.com/avatar/54f7e39b54c125b935a516ef080fcb94?s=64&d=identicon&r=PG",
            "https://lh3.googleusercontent.com/-B1jXHjrSUek/AAAAAAAAAAI/AAAAAAAAAuM/THOAxmaAdvE/photo.jpg?sz=64",
            "https://i.sstatic.net/FEnvJ.png",
            "https://www.gravatar.com/avatar/7fc2db839382b30434539fbc967c498e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/c4c2dd916f14ce77004c937b2667fe12?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/BKRy0.png",
            "https://i.sstatic.net/Ja1ty.png?s=64",
            "https://i.sstatic.net/phQqC.jpg?s=64",
            "https://lh5.googleusercontent.com/-FSH3IX4Z9BQ/AAAAAAAAAAI/AAAAAAAAALY/orl86EtTh04/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/6426531743295d8b4f6c488f5bab2a8e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/UxXtL.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a424e1b0ab3a8dee82c25ae0f0804107?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/bab6378644f0d67eb3ab7806faf2b6ac?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/PJNvj.png",
            "https://i.sstatic.net/hujFk.jpg?s=64",
            "https://i.sstatic.net/7Mc2a.jpg?s=64",
            "https://www.gravatar.com/avatar/760a6dbe2bd58f7f06a6c0f7310df373?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/bddefa4a921ff3917d10a63a3cdf77a5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/197452a9d00603b97d9f268946ebccf1?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://stackoverflow.com/posts/3980909/ivc/70d9?prg=9a666043-7b0f-4d75-81d1-96c16d633f0d"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-10-20T18:05:00",
        "summary": "",
        "meta_description": "Trying to build my project on the build server gives me the following error:\n\nMicrosoft (R) Build Engine Version 4.0.30319.1\nerror MSB4019: The imported project \"C:\\Program Files (x86)\\MSBuild\\Micr...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/3980909/microsoft-webapplication-targets-was-not-found-on-the-build-server-whats-your",
        "text": "To answer the title of the question (but not the question about the output you're getting):\n\nCopying the following folder from your dev machine to your build server fixes this if it's just web applications\n\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v10.0\\WebApplications\n\nRemove x86 according to how your build breaks. If you have other project types you will probably need to copy the entire msbuild folder.\n\nThe solution would be to install redistributable packages on build server agent. It can be accomplished multiple ways, out of which 3 are described below. Pick one that suits you best.\n\nUse installer with UI\n\nthis is the original answer\n\nRight now, in 2017, you can install WebApplication redists with MSBuildTools. Just go to this page that will download MSBuild 2017 Tools and while installation click Web development build tools to get these targets installed as well:\n\nThis will lead to installing missing libraries in C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\WebApplications by default\n\nUse command line\n\ndisclaimer I haven't tested any of the following proposals\n\nAs @PaulHicks and @WaiHaLee suggested in comments, it can also be installed in headless mode (no ui) from CLI, that might actually be preferable way of solving the problem on remove server.\n\nSolution A - using package manager (choco)\n\nchoco install visualstudio2017-workload-webbuildtools\n\nSolution B - run installer in headless mode\n\nNotice, this is the same installer that has been proposed to be used in original answer\n\nvs_BuildTools.exe --add Microsoft.VisualStudio.Workload.WebBuildTools --passive\n\nBuilding and publishing WAPs is not supported if VS is not installed. With that said, if you really do not want to install VS then you will need to copy all the files under %ProgramFiles32%\\MSBuild\\Microsoft\\.\n\nYou will need to install the Web Deploy Tool as well. I think that is it.\n\nUPD: as of VS2017, there is workload in Build Tools that eliminates this problem completely. See @SOReader answer.\n\nIf you'd prefer not to modify anything on build server, and you still want the project to build right out of source control, it might be a good idea to put the required binaries under source control. You'll need to modify the imports section in your project file to look like this:\n\n<Import Project=\"$(SolutionDir)\\BuildTargets\\WebApplications\\Microsoft.WebApplication.targets\" /> <Import Condition=\"false\" Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" />\n\nThe first line is the actual import from the new location that is relative to the solution directory. The second one is a turned-off version (Condition=\"false\") of the original line that allows for Visual Studio to still consider your project to be a valid Web Application Project (that's the trick that VS 2010 SP1 does itself).\n\nDon't forget to copy the C:\\Program Files (x86)\\Microsoft\\VisualStudio\\v10.0\\WebApplications to BuildTargets folder under your source control.\n\nBased on this post here you can simply download the Microsoft Visual Studio 2010 Shell (Integrated) Redistributable Package and the targets are installed.\n\nThis avoids the need to install Visual Studio on the build server.\n\nI have just tried this out now, and can verify that it works:\n\nBefore:\n\nerror MSB4019: The imported project \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Confirm that the path in the declaration is correct, and that the file exists on disk.\n\nAfter the install:\n\n[Builds correctly]\n\nThis is a far better solution than installing Visual Studio on a build server, obviously.\n\nAdd dependency through NuGet & set a Build Parameter\n\nGoal: no changes / installs necessary to the build agents\n\nI have taken a hybrid approach to the NuGet approach by Lloyd here, which was based off of the committing binary dependencies solution by Andrik.\n\nThe reason why is I want to be able to add new build agents without having to pre-configure them with items such as this.\n\nOn a machine with Visual Studio, Open the solution; ignore that the web project fails.\n\nIn the NuGet package manager, add MSBuild.Microsoft.VisualStudio.Web.targets, as Lloyd mentioned.\n\nThis will resolve the binaries to [solution]\\packages\\MSBuild.Microsoft.VisualStudio.Web.targets.nn.n.n.n\\tools\\VSToolsPath\\\n\nYou can copy these to a references folder & commit,\n\nOr just use them where they are at. I chose this, but I'm going to have to deal with the version number in the path later.\n\nIn Version 7, I did the following. This may not have been necessary, and based on the comments is definitely not needed now. Please see the comments below.\n\nNext, in your TeamCity build configuration, add a build Paramenter for env.VSToolsPath and set it to the VSToolsPath folder; I used ..\\packages\\MSBuild.Microsoft.VisualStudio.Web.targets.11.0.2.1\\tools\\VSToolsPath\n\nIt seems the new version of msbuild does not ship with Microsoft.WebApplication.targets. To fix you need to update your csproj file as so:\n\n1) Edit the web app csproj (right click). Find the section in the csproj towards the bottom concerning build tools. It should look like so.\n\n<PropertyGroup> <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">10.0</VisualStudioVersion> </PropertyGroup> <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" /> <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"'$(VSToolsPath)' != ''\" /> <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"false\" />\n\n2) You need to add one VSToolsPath line below the VisualStudioVersion tag so it looks like so\n\n<PropertyGroup> <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">10.0</VisualStudioVersion> <!--Add the below line to fix the project loading in VS 2017 --> <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath> <!--End --> </PropertyGroup> <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" /> <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"'$(VSToolsPath)' != ''\" /> <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"false\" />\n\nReference link: https://alastaircrabtree.com/cannot-open-vs-2015-web-project-in-vs-2017/\n\nAnyone coming here for Visual Studio 2017. I had the similar issue and couldn't compile the project after update to 15.6.1. I had to install MSBulild tools but still the error was there.\n\nI was able to fix the issue by copying the v14.0 folder from C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio to the same folder as v15.0 and that resolved all the errors. So now my folder structure looks like below, where both folders contain the same content.\n\nMy solution is a mix of several answers here.\n\nI checked the build server, and Windows7/NET4.0 SDK was already installed, so I did find the path:\n\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v9.0\\WebApplications\\Microsoft.WebApplication.targets`\n\nHowever, on this line:\n\n<Import Project=\"$(MSBuildExtensionsPath)\\Microsoft\\VisualStudio\\v9.0\\WebApplications\\Microsoft.WebApplication.targets\" />\n\n$(MSBuildExtensionsPath) expands to C:\\Program Files\\MSBuild which does not have the path.\n\nTherefore what I did was to create a symlink, using this command:\n\nmklink /J \"C:\\Program Files\\MSBuild\\Microsoft\\VisualStudio\" \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\"\n\nThis way the $(MSBuildExtensionsPath) expands to a valid path, and no changes are needed in the app itself, only in the build server (perhaps one could create the symlink every build, to make sure this step is not lost and is \"documented\").\n\nI was having this issue building a SQL Server project on a CI/CD pipeline. In fact, I was having it locally as well, and I did not manage to solve it.\n\nWhat worked for me was using an MSBuild SDK, capable of producing a SQL Server Data-Tier Application package (.dacpac) from a set of SQL scripts, which implies creating a new project. But I wanted to keep the SQL Server project, so that I could link it to the live database through SQL Server Object Explorer on Visual Studio. I took the following steps to have this up and running:\n\nKept my SQL Server project with the .sql database scripts.\n\nCreated a .NET Standard 2.0 class library project, making sure that the target framework was .NET Standard 2.0, as per the guidelines in the above link.\n\nSet the contents of the .csproj as follows:\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <Project Sdk=\"MSBuild.Sdk.SqlProj/1.0.0\"> <PropertyGroup> <SqlServerVersion>Sql140</SqlServerVersion> <TargetFramework>netstandard2.0</TargetFramework> </PropertyGroup> </Project>\n\nI have chosen Sql140 as the SQL Server version because I am using SQL Server 2019. Check this answer to find out the mapping to the version you are using.\n\nIgnore the SQL Server project on build, so that it stops breaking locally (it does build on Visual Studio, but it fails on VS Code).\n\nNow we just have to make sure the .sql files are inside the SDK project when it is built. I achieved that with a simple powershell routine on the CI/CD pipeline that would copy the files from the SQL Server project to the SDK project:\n\nCopy-Item -Path \"Path.To.The.Database.Project\\dbo\\Tables\\*\" -Destination (New-item -Name \"dbo\\Tables\" -Type Directory -Path \"Path.To.The.DatabaseSDK.Project\\\")\n\nPS: The files have to be physically in the SDK project, either in the root or on some folder, so links to the .sdk files in the SQL Server project won't work. In theory, it should be possible to copy these files with a pre-build condition, but for some obscure reason, this was not working for me. I tried also to have the .sql files on the SDK project and link them to the SQL Server project, but that would easily break the link with the SQL Server Object Explorer, so I decided to drop this as well."
    }
}