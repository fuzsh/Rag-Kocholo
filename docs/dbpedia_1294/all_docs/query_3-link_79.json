{
    "id": "dbpedia_1294_3",
    "rank": 79,
    "data": {
        "url": "https://developer.ap.org/enps-playbook/",
        "read_more_link": "",
        "language": "en",
        "title": "AP ENPS and AP Storytelling API",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://developer.ap.org/images/ap.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A starting point for developers interested in the AP Metadata Services",
        "meta_lang": "",
        "meta_favicon": "../images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Sample Workflows and Use Cases\n\nHere is how AP ENPS and AP Storytelling customers are using the API to enhance their newsroom's workflows.\n\nContent Ingest/Creation\n\nThe Associated Press\n\nThe Associated Press uses the API to automatically generate Topics and Assignments in Storytelling for thousands of sporting events (NFL, NHL, NBA, NCAA, MLB, golf, etc.) based on schedule data from an external vendor's database. AP developed an application that pulls the data from the database â including home and away teams, league, game time, and location â and pushes that data to Storytelling along with additional metadata that is cross-referenced from an internal datastore. Having this information automatically loaded into Storytelling saves AP sports editors and reporters dozens of hours of manual data entry each week, allowing them to refocus that time on quality journalism and storytelling.\n\nVoice of America\n\nVoice of America (VOA) utilizes the API to ingest AP Planner content. The API pulls in data from a configured saved search that VOA created on the AP Planner site, assuring that only content VOA is interested in is converted into Playbook Topics. The created Topics include key information like Slug, Description, Organizer, Press Contacts, UniqueID and the Last Updated time of the item. Having this information automatically loaded into Playbook saves VOA planning editors and reporters hours of manual data entry each week, allowing them to refocus that time on quality journalism and storytelling.\n\nNRK\n\nNRK (Norway) was one of the first organizations to realize the potential of the API and now has multiple systems using it. NRK leveraged the API to create a system that acts as a bridge to its master scheduling system and automatically creates regional news running orders.\n\nAnother implementation is designed to improve communication and collaboration between regional newsrooms and the national headquarters in Oslo. The application monitors all regional planning grids for stories to indicate that the story may be of national interest.\n\nThis master grid is used to populate a web page that is displayed on a large monitor in the newsroom that shows contact details for all users referenced in stories.\n\nThe API is further leveraged in a system that tracks sports recordings and in another that automates large amounts of the testing that is applied to new releases of NRK's third-party MAM system.\n\nThis creative use of the API has allowed NRK to drastically reduce the amount of time spent on routine tasks and on editorial conference calls.\n\nContent Discovery/Retrieval\n\nRundown Archival\n\nGray Television uses the API to save hundreds of hours of busywork a year. Previously, someone in each newsroom of the company's TV stations would have to comb through all of the archived rundowns to compile lists of news stories in a variety of community interest categories to be submitted as part of their quarterly FCC reports.\n\nStations add a drop-down column to their stories that contain a list of community interest categories. If a story qualifies as being \"FCC worthy,\" the producer flags it by selecting a category. The export program is hosted as a web application that taps into the Search and RundownContent endpoints of the API. The end user chooses a date range, and the application finds all of the stories that have an FCC category set. The application then displays the stories on the screen and provides an option to download them to a spreadsheet.\n\nStatistical Reporting and Archive Management\n\nOne broadcaster has utilized the API to siphon content from ENPS into two external systems: an SQL database to generate reports based on a wide range of ENPS metadata, and an archive management system that links script text, media and metadata to publish content to the archive.\n\nThe archive management implementation is part of a wider set of processes that links content from a variety of systems and is designed to improve the management of organization-wide metadata and facilitate better use of the archive.\n\nA browser-based interface allows users to choose the channel and date, and to select from a list of broadcast programs initially populated by another system that generates the unique program IDs and contains the descriptions used in program guides. The user can incorporate additional metadata through integration with the media system, but also from ENPS via the API.\n\nThe browser-based interface allows users to choose the channel and date, and to select from a list of broadcast programs, initially populated by another system that generates the unique program IDs and contains the descriptions used in program guides. The user can incorporate additional metadata through integration with the audio system but also from ENPS via the Open API; clicking a button in the interface that calls the api/Search endpoint and then uses api/BasicContent and api/RundownContent to fetch the relevant running order and scripts, the latter filtered by a local matching algorithm to only keep items of interest.\n\nThis allows all content to be checked and additional metadata to be added prior to the rundown and script content being published to the archive.\n\nPublishing\n\nThe Associated Press uses the API to share its editorial coverage plans with members and subscribers by publishing planning data from Storytelling to the Coverage Plan section of its AP Newsroom portal. Once a Coverage Plan is ready to be made public, editors click a custom \"Publish\" button in the Storytelling interface that triggers APâs custom code to retrieve the full data for that story and push the story plan to the portal's datastore. The publishing application then pushes a status update back into Storytelling indicating when the story was successfully published to the AP Newsroom portal and provides a link that allows AP journalists to view the story in AP Newsroom just as AP members would see it.\n\nThe AP also uses the API to produce daily content advisories â \"digests\" â to alert members and subscribers about the most important or interesting stories and related media that have already been published or those that are coming up later in the day. After selecting and ordering the stories in Storytelling's Cast module, an editor publishes the list to AP's digest automation system, which formats the content for distribution and sends it to an editor for final polishing before transmission on the wire.\n\nGetting Started with the API\n\nAccess\n\nFor Customers: Use of the API requires an addendum to your contract for other AP services. Contact your AP representative for the form. If you don't know who your AP representative is, please e-mail us at APNewsTech-API@ap.org.\n\nFor Partners: We are eager to work with you to develop the best-integrated systems for our mutual users. Our Integration Team can work with you to set up development/test systems and provide you an API development key. Please e-mail us at APNewsTech-API@ap.org.\n\nInstallation\n\nIf you are using Storytelling and ENPS as an AP-provided service, the API comes ready to use, no installation is necessary. Customer-built systems do require a dedicated API server, or a platform shared with an ENPS Mobile server.\n\nIf you are an ENPS customer and require installation instructions, please go to AP ENPS Resources.\n\nKeys\n\nYour API development key is a unique identifier for your organization. The API development key will be issued to you by the AP when your agreement to use the API is completed.\n\nThe API development key is used to initiate each session between your API-enabled system and your ENPS and/or Storytelling servers. That initial logon also requires a valid username and password tied to ENPS or Storytelling Staff Table. It is recommended that you create a separate \"Service Account\" that is not tied to an individual and does not change passwords without the involvement of an administrator who can also make the required updates to your API-enabled system. This account does not need to have ENPS \"Administrator\" status in ENPS or Storytelling but must have sufficient access in Staff Privileges to read or edit the information that your API-enabled system requires.\n\nFollowing the initial per-session logon, validation for every subsequent query or command uses a dynamically-generated token that is issued uniquely per session and returned in the response to the logon call. At your discretion, communication between your API-enabled system and ENPS or Storytelling may be encrypted using HTTPS communication. This is especially and strongly recommended if transmission is across the public internet.\n\nRate Limiting\n\nThe API usage is \"rate-limited\" meaning there is a maximum number of calls that you may make to the API per minute. This is designed to protect your ENPS or Storytelling servers against a data storm generated by improper usage of the API that could interfere with users' ability to use the system. The API will reject all calls after you reach your limit for any given minute. The count begins cleanly at the commencement of the next minute. The default limit is 100 calls/minute.\n\nRate limiting is based on the total number of API calls using a single API development key against any ENPS or Storytelling systems. If you find that you are frequently reaching your limit because you are using the same API development key with multiple servers (for example, multiple sites across an enterprise), please email us at APNewsTech-API@ap.org so we may review your technical situation. There is no additional fee for increasing your rate limit.\n\nAny server that the API is installed on must have access to the internet so it can communicate with our licensing service.\n\nSupported Protocols\n\nHTTP 1.1 and HTTPS 1.1 are supported for the API.\n\nIn support of HTTPS, AP ENPS and Storytelling provide the option for SSL security for API communication through configuration of Microsoft IIS components. It is mandatory and enforced on AP-hosted implementations.\n\nOn an ongoing basis, on AP-hosted services, the AP maintains SSL/TLS protocols at the currently recommended levels â and disables other levels as recommended by security advisers. You are strongly encouraged to keep systems under your control to the same standards.\n\nAs of mid-2022, only TLS protocols 1.2 and 1.3 should be enabled. Earlier versions of TLS and SSL should be disabled.\n\nAPI Explorer/Swagger Spec (SDK)\n\nThe Swagger-based API Explorer is included as an interactive quick reference that lists the API calls and parameters and allows for testing live API calls and generating sample code.\n\nThe API Explorer is installed as part of the API and can be accessed by adding \"/swagger\" to the end of your root API URL: https://servername/NOMWebServices3API/swagger.\n\nTo use the API Explorer, you'll first select the LOGON endpoint (POST) and log in using your ENPS/Storytelling credentials and API development key (similar to starting any API session outside the API Explorer).\n\nCopy the SessionID value from the response X-ENPS-TOKEN. Click the Authorize button on the right side of the landing page, paste in the copied X-ENPS-TOKEN value, and click Authorize. This will now allow the X-ENPS-TOKEN to be used for all other activity in the API Explorer. When you're done, click Authorize again and select Logout to clear the token.\n\nNOTE: The Swagger page is interacting with a live server in the URL, enabling Swagger exploration of your server-specific records and schema. Use caution when performing patch, put or delete operations on the server. Utilize the Swagger page on a development or testing server whenever possible.\n\nOn request, AP can also provide additional resources such as a Postman collection containing a basic environment and samples for all API calls.\n\nGetting Help\n\nNeed help?\n\nTry checking our FAQs and the Best Practices guide available at the ENPS Resources site. Both sections contain useful information that may get you the answer you need. You can also use the API Explorer to help develop and test specific API calls.\n\nIf those options don't get you the answer you are looking for, contact us at APNewsTech-API@ap.org.\n\nWe'll respond as quickly as we can, usually by the next business day.\n\nFAQs\n\nWhat is the difference between the AP ENPS and AP Storytelling API?\n\nThey are one and the same. AP ENPS and AP Storytelling are built on a common platform and share many of their backend components, including the API. Some areas of the API are specific to one or the other, since not all objects and data types are used in both applications. All of the core endpoints (Logon, Search, BasicContent, etc.) are used equally for both AP ENPS and AP Storytelling.\n\nHow do I get access to the API?\n\nFor Customers: Use of the API requires an addendum to your contract for other AP services. Contact your AP representative for the form. If you don't know who your AP representative is, please e-mail us at APNewsTech-API@ap.org.\n\nFor Partners: We are eager to work with you to develop the best-integrated systems for our mutual users. Our Integration Team can work with you to set up development/test systems and provide you an API development key. Please e-mail us at APNewsTech-API@ap.org.\n\nOnce the above has been completed, an API development key will be issued to you with a default rate limit of 100 calls/minute. For more information on how and when to use the development key, see Keys. For an explanation of our rate limiting, see Rate Limiting.\n\nIf I keep exceeding my rate limit, can I get it increased?\n\nPossibly, yes. Contact us at APNewsTech-API@ap.org to discuss your requirements.\n\nCan I use my development key for more than one application?\n\nYes, but all calls will count against the same rate limit whether they originate from one application or multiple. If you need more than one development key, email us at APNewsTech-API@ap.org to discuss your requirements.\n\nIn what format are the API messages sent?\n\nThe API calls and responses are primarily in JSON. The few exceptions are endpoints that accept GET calls and return an empty response body with status codes indicating either success or failure.\n\nIs there somewhere I can build and test live API calls?\n\nThe Swagger-based API Explorer is available. The API Explorer is an interactive quick reference that lists the API methods and parameters and allows for testing live API calls and generating sample code. An API development key is required for testing live API calls.\n\nDoes the API support a subscription/pushed based model?\n\nYes, ENPS and Storytelling support the creation of webhook-based HTTP event streams that can be used to automatically push select updates to integrated systems downstream.\n\nFor both ENPS and Storytelling systems, an administrator can configure webhook functionality, or webhooks can be managed via the /Webhooks API endpoint. Webhook events can be raised on specific object types and further fine-tuned to result only from changes to specified fields when those fields are configured as Resthook triggers.\n\nIt is also possible to attach a WebhooksWatch field to a record pointing to a given webhook URL to raise events for any change to the object. This is useful for monitoring specific Rundowns or Topics.\n\nAs a commercial product developer, may I bundle my API key in products provided to clients/customers?\n\nNo. Each AP ENPS and AP Storytelling customer is required to use an API key provided to that organization by the AP. Your product should have a means for your customer to load their own AP ENPS/AP Storytelling API key.\n\nUsing the API in the Cloud\n\nWhen using the API on an API-hosted instance in the cloud (for example, with hosted Storytelling installations), the following must be kept in mind:\n\nBase URL\n\nThe base URL for all calls to the API is https://siteID.apstorytelling.com/NomWebServices3API/api, where siteID is the first part of your Storytelling URL as assigned by AP.\n\nSo, if you are site XYZ, your Base URL would be:\n\nhttps://xyz.apstorytelling.com/NomWebServices3API/api\n\nSome implementations still use 'applaybook' instead of 'apstorytelling' in the domain name.\n\nCookies\n\nWhen first calling the API to logon, you will receive a pair of cookies returned in the response called AWSALB and AWSALBCORS. These cookies must be reused in the headers of all subsequent calls which are part of the same API logon session.\n\nSome HTTP clients (browsers, Powershell) will manage these cookies automatically, others (Node libraries like Fetch, Axios or Express) will require the last 'set-cookie' header to be sent back on next request.\n\nTo set cookies in Node libraries, use the following:\n\nNewRequest.headers.common['set-cookie'] = [(lastResponse.headers['set-cookie'][0]), (lastResponse.headers['set-cookie'][1]) ];"
    }
}