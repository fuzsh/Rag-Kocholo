{
    "id": "dbpedia_767_3",
    "rank": 84,
    "data": {
        "url": "https://www.academia.edu/68061909/Using_Scratch_to_Improve_Learning_Programming_in_College_Students_A_Positive_Experience_from_a_Non_WEIRD_Country",
        "read_more_link": "",
        "language": "en",
        "title": "Using Scratch to Improve Learning Programming in College Students: A Positive Experience from a Non-WEIRD Country",
        "top_image": "http://a.academia-assets.com/images/open-graph-icons/fb-paper.gif",
        "meta_img": "http://a.academia-assets.com/images/open-graph-icons/fb-paper.gif",
        "images": [
            "https://a.academia-assets.com/images/academia-logo-redesign-2015-A.svg",
            "https://a.academia-assets.com/images/academia-logo-redesign-2015.svg",
            "https://a.academia-assets.com/images/single_work_splash/adobe.icon.svg",
            "https://0.academia-photos.com/attachment_thumbnails/78674854/mini_magick20220114-30494-184bioj.png?1642154851",
            "https://a.academia-assets.com/images/s65_no_pic.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loaders/paper-load.gif",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png",
            "https://a.academia-assets.com/images/loswp/related-pdf-icon.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Águeda Jiménez",
            "us.academia.edu"
        ],
        "publish_date": "2022-01-14T00:00:00",
        "summary": "",
        "meta_description": "Teaching computer programming is a real challenge in the State University of Milagro (UNEMI), located in one of the least-developed zones in Ecuador, a non-WEIRD country (WEIRD stands for Western, Educated, Industrialized, Rich and Democratic).",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://www.academia.edu/68061909/Using_Scratch_to_Improve_Learning_Programming_in_College_Students_A_Positive_Experience_from_a_Non_WEIRD_Country",
        "text": "This study presents a set of categories of learning activities which could be performed by the students using the tools of the well-known educational software Scratch (www.scratch.mit.edu) that is dedicated for the learning of programming by novices. Specifically, eleven categories of learning activities that could be performed within Scratch were formed, namely: (a) Free creative activities, (b) Solving a specific problem, © Multiple solution tasks, (d) Experimentation within working Scratch projects, (e) Modification of working Scratch projects, (f) Working on a complete Scratch output and a correct but incomplete part of its code, (g) Working on a complete Scratch output and a mixed form of its code, (h) Working with a complete Scratch output and an incorrect part of its code, (i) Working with the complete code of a Scratch program and predicting its output, (j) Black-box activities, and (k) Collaborative learning activities. Computing teachers can use these categories of activities in their attempts to design appropriate every day classroom settings for the learning of programming by novices within Scratch.\n\nScratch is a visual programming environment that is widely used by young people. We investigated if Scratch can be used to teach concepts of computer science. We developed new learning materials for middle-school students that were designed according to the constructionist philosophy of Scratch and evaluated them in two schools. The classes were normal classes, not extracurricular activities whose participants are self-selected. Questionnaires and a test were constructed based upon a novel combination of the Revised Bloom Taxonomy and the SOLO taxonomy. These quantitative instruments were augmented with a qualitative analysis of observations within the classes. The results showed that in general students could successfully learn important concepts of computer science, although there were some problems with initialization, variables and concurrency; these problems can be overcome by modifications to the teaching process.\n\nThis article presents datasets representing the demographics and achievements of computer science students in their first programming courses (CS1). They were collected from a research project comparing the effects of a constructionist Scratch programming and the conventional instructions on the achievements of CS1 students from selected Nigerian public colleges. The project consisted of two consecutive quasi-experiments. In both cases, we adopted a non-equivalent pretest-posttest control group design and multistage sampling. Institutions were selected following purposive sampling, and those selected were randomly assigned to the Scratch programming class (experimental) and the conventional (comparison) class. A questionnaire and pre- and post-introductory programming achievement tests were used to collect data. To strengthen the research design, we used the Coarsened Exact Matching (CEM) algorithm to create matched samples from the unmatched data obtained from both experiments. Future studies can use these data to identify the factors influencing CS1 students' performance, investigate how programming pedagogies or tools affect CS1 students' achievements in higher education, identify important trends using machine learning techniques, and address additional research ideas.\n\nIt is important to teach students programming at an early age so that they do not have difficulty in understanding the programming logic when they reach the age of undergraduate education. Scratch, a visual two-dimensional programming tool, has been developed to accomplish this purpose. There are studies in the literature related to Scratch on problem-solving skills, but they are not directed at the steps of problem solving. In order to find a proper solution to a problem, it is necessary to carry out each problem-solving step in an appropriate way. Based on this need, the aim of this study is to investigate how teaching programming through Scratch affects the problem-solving skills of 5th and 6th grade middle school students and to identify the steps that students go through to solve ill-structured problems. It is also intended that these steps guide teachers in terms of the pedagogies for teaching coding. This study utilized an explanatory design, one of the mixed method research designs. In the quantitative stage of the study, a one-group pretest-posttest model, one of the simple experimental models, was used. In the qualitative stage, a case study model was used as the research design. A total of 226 5th and 6th grade students, including 109 males and 117 females, constituted the sample of the study. The data were collected using a problem-solving skills scale and interview questions. A statistically significant difference was found between the mean scores of the first and second measurements of the problem-solving skills scale according to the Wilcoxon signed-rank test result. According to the results, when teaching programming through Scratch, it is recommended to have students design games, as an alternative method, for them to develop problem-solving skills. The solution of a problem is facilitated when students construct a game in their minds in accordance with real-life conditions and design and detail it in accordance with computational expressions.\n\nParadoxically, as the role and significance of computing have increased in society and the economy, and coding is recognised as the fourth literacy, the number of students attending a programming course is in decline. In an attempt to increase interest in computer science (CS), there has been made much effort in developing tools and activities as preliminary learning materials in schools and universities. App Inventor and Scratch strive to engage the novice users by allowing them to write programs about things that connect with their interests in contrast to more conventional programming. In this paper, we focus on the use of these two block-based programming environments as tools to facilitate learning programming for novices. In our analysis, both novice programming environments (NPEs) seemed to be attractive platforms for introducing fundamental concepts in computer programming and both look appealing for majors and non-majors as well.\n\nHow and what would you teach if you had only one course to helpstudents explore the essence of computation and perhaps inspire a few of themto think computationally? Generally, students learn all the information andcommunication tools provided to them, but they are never expected to write anycomputer programs. A new ICT curriculum, which started being implementedlast year in Turkey, gives students a chance to learn not just using computers,but to think like computers. This paper provides implementation suggestions forthe integration of Scratch into the existing ICT curriculum, based on priorresearch on the phenomenon. Hence Scratch, as a computational thinking tool,will be discussed in terms of its possible contribution to students’computational thinking skills.\n\nIt is important to teach students programming at an early age so that they do not have difficulty in understanding the programming logic when they reach the age of undergraduate education. Scratch, a visual two-dimensional programming tool, has been developed to accomplish this purpose. There are studies in the literature related to Scratch on problem-solving skills, but they are not directed at the steps of problem solving. In order to find a proper solution to a problem, it is necessary to carry out each problem-solving step in an appropriate way. Based on this need, the aim of this study is to investigate how teaching programming through Scratch affects the problem-solving skills of 5th and 6th grade middle school students and to identify the steps that students go through to solve ill-structured problems. It is also intended that these steps guide teachers in terms of the pedagogies for teaching coding. This study utilized an explanatory design, one of the mixed method research designs. In the quantitative stage of the study, a one-group pretest-posttest model, one of the simple experimental models, was used. In the qualitative stage, a case study model was used as the research design. A total of 226 5th and 6th grade students, including 109 males and 117 females, constituted the sample of the study. The data were collected using a problem-solving skills scale and interview questions. A statistically significant difference was found between the mean scores of the first and second measurements of the problem-solving skills scale according to the Wilcoxon signed-rank test result. According to the results, when teaching programming through Scratch, it is recommended to have students design games, as an alternative method, for them to develop problem-solving skills. The solution of a problem is facilitated when students construct a game in their minds in accordance with real-life conditions and design and detail it in accordance with computational expressions."
    }
}