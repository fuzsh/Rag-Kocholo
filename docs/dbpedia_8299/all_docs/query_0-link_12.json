{
    "id": "dbpedia_8299_0",
    "rank": 12,
    "data": {
        "url": "https://blog.appsignal.com/2022/07/06/get-started-with-hotwire-in-your-ruby-on-rails-app.html",
        "read_more_link": "",
        "language": "en",
        "title": "Get Started with Hotwire in Your Ruby on Rails App",
        "top_image": "https://ondemand.bannerbear.com/signedurl/Mn62mqoVbWvyB5wgQ1/image.jpg?modifications=W3sibmFtZSI6InRpdGxlIiwidGV4dCI6IkdldCBTdGFydGVkIHdpdGggSG90d2lyZSBpbiBZb3VyIFJ1Ynkgb24gUmFpbHMgQXBwIn0seyJuYW1lIjoiaW1hZ2UiLCJpbWFnZV91cmwiOiJodHRwczovL2FwcHNpZ25hbC1uZXh0anMtYmxvZy1kN3F4enRyZmctYXBwc2lnbmFsLnZlcmNlbC5hcHAvaW1hZ2VzL2Jsb2cvMjAyMi0wNy9ob3R3aXJlLnBuZyJ9LHsibmFtZSI6ImNhdGVnb3J5X2xvZ28iLCJpbWFnZV91cmwiOiJodHRwczovL2FwcHNpZ25hbC1uZXh0anMtYmxvZy1kN3F4enRyZmctYXBwc2lnbmFsLnZlcmNlbC5hcHAvaW1hZ2VzL2xvZ29zL3J1YnktbG9nby5wbmcifV0&s=81dd37f8d967ad70f1aa609c199dac4f0e9ae4e214f960e5bb9438ab9b7cd5d8",
        "meta_img": "https://ondemand.bannerbear.com/signedurl/Mn62mqoVbWvyB5wgQ1/image.jpg?modifications=W3sibmFtZSI6InRpdGxlIiwidGV4dCI6IkdldCBTdGFydGVkIHdpdGggSG90d2lyZSBpbiBZb3VyIFJ1Ynkgb24gUmFpbHMgQXBwIn0seyJuYW1lIjoiaW1hZ2UiLCJpbWFnZV91cmwiOiJodHRwczovL2FwcHNpZ25hbC1uZXh0anMtYmxvZy1kN3F4enRyZmctYXBwc2lnbmFsLnZlcmNlbC5hcHAvaW1hZ2VzL2Jsb2cvMjAyMi0wNy9ob3R3aXJlLnBuZyJ9LHsibmFtZSI6ImNhdGVnb3J5X2xvZ28iLCJpbWFnZV91cmwiOiJodHRwczovL2FwcHNpZ25hbC1uZXh0anMtYmxvZy1kN3F4enRyZmctYXBwc2lnbmFsLnZlcmNlbC5hcHAvaW1hZ2VzL2xvZ29zL3J1YnktbG9nby5wbmcifV0&s=81dd37f8d967ad70f1aa609c199dac4f0e9ae4e214f960e5bb9438ab9b7cd5d8",
        "images": [
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=16&q=75 16w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=32&q=75 32w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=48&q=75 48w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=64&q=75 64w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=96&q=75 96w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=128&q=75 128w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=256&q=75 256w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=384&q=75 384w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=640&q=75 640w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=750&q=75 750w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=828&q=75 828w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=1080&q=75 1080w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=1200&q=75 1200w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=1920&q=75 1920w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=2048&q=75 2048w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=3840&q=75 3840w",
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=640&q=50 640w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=750&q=50 750w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=828&q=50 828w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=1080&q=50 1080w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=1200&q=50 1200w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=1920&q=50 1920w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=2048&q=50 2048w, /_next/image?url=%2Fimages%2Fblog%2F2022-07%2Fhotwire.png&w=3840&q=50 3840w",
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=640&q=75 640w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=750&q=75 750w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=828&q=75 828w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=1080&q=75 1080w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=1200&q=75 1200w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=1920&q=75 1920w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=2048&q=75 2048w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-left%402x.png&w=3840&q=75 3840w",
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=640&q=75 640w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=750&q=75 750w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=828&q=75 828w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=1080&q=75 1080w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=1200&q=75 1200w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=1920&q=75 1920w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=2048&q=75 2048w, /_next/image?url=%2Fimages%2Fcomponents%2Fbanner%2Fimg-right%402x.png&w=3840&q=75 3840w",
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=16&q=75 16w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=32&q=75 32w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=48&q=75 48w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=64&q=75 64w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=96&q=75 96w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=128&q=75 128w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=256&q=75 256w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=384&q=75 384w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=640&q=75 640w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=750&q=75 750w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=828&q=75 828w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=1080&q=75 1080w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=1200&q=75 1200w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=1920&q=75 1920w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=2048&q=75 2048w, /_next/image?url=%2Fimages%2Fauthors%2Fsapan.jpg&w=3840&q=75 3840w",
            "https://blog.appsignal.com/images/newsletter/logo-ruby.svg",
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fgeneral%2Fcall-to-action-small.png&w=640&q=75 1x, /_next/image?url=%2Fimages%2Fgeneral%2Fcall-to-action-small.png&w=1200&q=75 2x",
            "https://blog.appsignal.com/_next/image?url=%2Fimages%2Fgeneral%2Fcall-to-action.png&w=1920&q=75 1x, /_next/image?url=%2Fimages%2Fgeneral%2Fcall-to-action.png&w=3840&q=75 2x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Sapan Diwakar"
        ],
        "publish_date": "2022-07-06T00:00:00",
        "summary": "",
        "meta_description": "Learn the basics of Hotwire and how to use it in your Rails app.",
        "meta_lang": "en",
        "meta_favicon": "/favicon/favicon.svg",
        "meta_site_name": "",
        "canonical_link": "https://blog.appsignal.com/2022/07/06/get-started-with-hotwire-in-your-ruby-on-rails-app.html",
        "text": "Hotwire is a hot topic at the moment for every Rails developer. If you work with Rails, there is a good chance you have already heard a lot about it.\n\nHotwire is a completely new way of adding interactivity to your app with very few lines of code, and it works blazing fast by transmitting HTML over the wire. That means you can keep your hands clean from most Single Page Applications (SPA) frameworks. You can also keep your rendering logic centralized on the server, while still maintaining quick page load times and interactivity.\n\nIn this post, we'll look at the main components of Hotwire and how to use it in your Rails app. But first: what is Hotwire and why should you use it?\n\nWhat Is Hotwire?\n\nHotwire is not a single library, but a new approach to building web and mobile applications by sending HTML over the wire. It includes Turbo, Stimulus, and Strada (coming later this year). We will discuss each of these in detail in the next section.\n\nSide note: While Hotwire is highly linked with Rails, it is completely language-agnostic, so it can work just as well with other applications. I have been using Stimulus in production on several non-Rails apps and some static websites. You can use Turbo without Rails as well.\n\nBut let us come back to the Rails world for now.\n\nWhy Use Hotwire in Your Rails App?\n\nSo when should you use Hotwire? The answer is anywhere you want to add interactivity to your application. For example, if you want:\n\nSome content to be displayed/hidden conditionally based on a user's interaction (e.g., an address form where the list of states automatically changes based on the selected country).\n\nTo update some content in real-time (e.g., a feed like Twitter where new Tweets automatically get added to the page).\n\nTo lazy-load some parts of your pages (e.g., inside an accordion, you can load the titles and mark the details to be lazy-loaded to speed up load times).\n\nHotwire Components\n\nAs mentioned before, Hotwire is a collection of new (and some old) techniques for building web apps.\n\nLet's discuss each of these in the next few sections.\n\nTurbo\n\nHTML drives Turbo at its core. Turbo provides several techniques to handle HTML data coming over the wire and display it on your application without performing a full page reload. It is composed of:\n\nTurbo Drive\n\nIf you have used Turbolinks in the past, you will feel right at home with Turbo Drive. At its core, some JS code intercepts JavaScript events on your application, loads HTML asynchronously, and replaces parts of your HTML markup.\n\nTurbo Frames\n\nTurbo Frames decouple parts of your markup into different sections that can be loaded independently.\n\nFor example, if you have a blog application, the content of your post and the comments are two related but independent parts of the page. You can decouple them so navigation works independently or even load them asynchronously with turbo frames.\n\nTurbo Streams\n\nTurbo Streams offers utilities to easily bring in real-time data to your application. For example, let's say you are building a news feed like Twitter. You want to pull new tweets into a user's feed as soon as they are posted without reloading the page. Turbo Streams allow you to do this without writing a single line of JS.\n\nTurbo Native\n\nTurbo Native lets you build a native wrapper around your web application. Navigations and interactions will feel native without you having to redo all the screens natively.\n\nYou'll keep delivering the rest of the application through the web. That way, you can focus on the really interactive parts of your application and get them right.\n\nStimulus\n\nStimulus is a JavaScript framework for writing controllers that interact with your HTML.\n\nLet's say we need to add some JavaScript attributes like data-controller, data-action, and data-target to elements on a page. We'll write a stimulus controller with access to elements that receives events based on those attributes. Here's an example:\n\nIt is very easy to get an idea about what this does without even reading the associated Stimulus controller.\n\nHere's a controller that goes with the HTML:\n\nThat is at the core of Stimulus: keeping things simple and reusable.\n\nNow, if you ever need a copy-to-the-clipboard button on another page, you can just re-use that controller. Add the data-* attributes on the markup to get everything working.\n\nStrada\n\nUnfortunately, we don't know much about Strada yet. But it will allow a web application to communicate (and possibly perform actions) with a native app using HTML bridge attributes.\n\nHow to Use Hotwire in Your Ruby on Rails Application\n\nI don't want to spend too much time discussing Hotwire installation or a basic use case. The Hotwire team has already done an excellent job of it in their Hotwire screencast. For full instructions, see turbo-rails installation and Stimulus installation.\n\nLet's jump straight into some common Hotwire use cases.\n\nEndless Scroll\n\nUsing Turbo Frames, we can easily make a page with automatic pagination as the user scrolls. For this, we need to do two things:\n\nRender each \"page\" inside its own frame by appending the page number to the frame id (e.g., turbo_frame_tag \"posts_#{@posts.current_page}\").\n\nUse a lazy frame for the next page so that it doesn't load automatically unless it comes into view.\n\nNote that this example uses methods from Kaminari, but you can adapt it to any other pagination method.\n\nWe don't need anything special in the controller. A standard index method works:\n\nThe trick here is that we use nested frames, with the frame for the next page nested inside the frame for the previous page. That way, when the first page loads, the frame for the next page is placed at the end. When the user scrolls to that frame, it is replaced with the content of the second page. The lazy frame for the third page renders at the end.\n\nDynamic Forms\n\nYou can easily implement dynamic forms with Hotwire without custom logic for toggling fields on the front end. This is a bit more involved than the endless scroll use case, as it includes the use of both Turbo Stream and Stimulus.\n\nLet's start with our form first.\n\nThe form is simple enough — we display a kind select with News and Blog options. We want to change the available categories' values based on the kind that is selected (assuming that categories_for_kind(@post.kind) returns the list of categories for the given kind).\n\nIf you look closer, you'll see that we've added some data attributes to the form. The data-target will link the form element to the RefreshFormController Stimulus Controller's form target. And the data-action with the value of change->refresh-form#refreshForm will call the refreshForm method on the linked Stimulus Controller every time the kind select is changed.\n\nLet's look at our Stimulus Controller:\n\nOn all refreshForm calls, we just make a new PUT request to the controller's URL (set using the data-refresh-form-url on the same element with a data-controller=\"refresh-form\"). The important part here is that the responseKind is set to turbo-stream. The @rails/request library understands this response and performs instructions based on the response stream.\n\nNow all that's left is to return the correct stream from our refresh_form call for Turbo to understand and update our form.\n\nJust update the attributes on the post and mark that you want to respond in a turbo_stream format (so that it looks up refresh_form.turbo_stream.erb).\n\nIn this step, we are reusing our form partial, wrapping it inside a turbo_stream with a replace action.\n\nAnd that's all you need to get a dynamic form working. I know this looks a bit advanced, but the refresh stimulus controller is a shared part you can now use for all your dynamic forms by adding the correct data-* attributes. So essentially, you now get server-side dynamic form refresh without writing any new JS for other forms. Pretty awesome, right?\n\nAppend Content to Pages Without Reloading\n\nThe next use case that Hotwire makes easy is streaming HTML over a WebSocket connection and updating a page with new content as it comes in. A good example of this is the GitHub comments section. You can implement this very easily using Turbo Streams.\n\nThere are two parts to this.\n\nFirst, we embed a turbo stream listener on the listing page that opens a WebSocket connection to the server and listens for events.\n\nNext, we update the model to broadcast new comments to the stream.\n\nYou don't need anything else. Turbo will automatically render the app/views/comments/_comment.html.erb partial for each new comment and send it over a WebSocket connection. It will be picked up by Turbo's JS and prepended to the target with id comments.\n\nLet's go one step ahead and add an indication to all newly added comments with a small Stimulus Controller.\n\nFirst, modify the broadcast and comment partial to include the controller conditionally.\n\nThis small Stimulus controller adds a special highlight class on connection for 3 seconds and then removes it.\n\nNote: You also need to update the CSS highlighting based on the presence of that class.\n\nOnce this controller is done, you can re-use it on anything that requires a highlight class. You could even modify it to get the duration and class name from data attributes if you need that flexibility.\n\nThat's the great thing about Hotwire — it takes you a long way, and you don't have to dip your hands in JS. When you do need to write some JS, Stimulus gives you the tools to build small generic controllers that can be re-used.\n\nWrap Up and Further Reading\n\nThe Rails community has been really excited with the introduction of Hotwire, and rightly so.\n\nIn this post, we looked at the key components of Hotwire and how to use Hotwire in your Rails app. We touched on how you can bring your application to life using Turbo and Stimulus.\n\nThe official Hotwire screencast introduction and the Turbo documentation are great places to see what Hotwire and Turbo can do for you.\n\nFor advanced usage, I suggest heading over to the turbo-rails GitHub repo. Sadly, the documentation is a bit sparse, but if you are not afraid to get your hands dirty, read the code and inline comments in:\n\nTurbo::FramesHelper for Turbo Frames.\n\nTurbo::Broadcastable for broadcasting to Turbo Streams from the code.\n\nTurbo::Streams::TagBuilder for broadcasting to Turbo Streams as part of inline controller actions.\n\nHappy coding!"
    }
}