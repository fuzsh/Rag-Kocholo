{
    "id": "dbpedia_8299_0",
    "rank": 11,
    "data": {
        "url": "https://www.infoworld.com/article/2174329/javascript-creator-ponders-past-future.html",
        "read_more_link": "",
        "language": "en",
        "title": "JavaScript creator ponders past, future",
        "top_image": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon-32x32.png",
        "meta_img": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon-32x32.png",
        "images": [
            "https://www.infoworld.com/wp-content/uploads/2024/08/2356-0-91980000-1723797039-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/08/2356-0-91980000-1723797039-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=250",
            "https://www.infoworld.com/wp-content/uploads/2024/06/sharon-machlis_150x150px-100780511-orig.gif?w=150",
            "https://www.infoworld.com/wp-content/uploads/2024/08/483088-0-88557000-1723562370-serdaryegulalp2_crop-100796854-orig.jpg?quality=50&strip=all&w=1024",
            "https://www.infoworld.com/wp-content/uploads/2024/08/482983-0-62898900-1723762303-paulkrill_crop-100796855-orig.jpg?quality=50&strip=all&w=484",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3487164-0-83574300-1723798858-shutterstock_1951878751.jpg?quality=50&strip=all&w=413",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3484132-0-94554000-1723741474-shutterstock_634752599.jpg?quality=50&strip=all&w=380",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3486794-0-89413800-1723712466-shutterstock_1858812901_1200x800_redteam-100938532-orig.jpg?quality=50&strip=all&w=375",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3480797-0-15076600-1723830721-Youtube-Thumbnails_Template-OLD.jpg?quality=50&strip=all&w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/08/3479099-0-77926700-1723830335-Linux-Tips-video-template_9673e7.png?w=444",
            "https://www.infoworld.com/wp-content/uploads/2024/07/Youtube-Thumbnails_Template-OLD-1.png?w=444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Paul Krill",
            "Sharon Machlis Executive Editor",
            "Data & Analytics",
            "Serdar Yegulalp Senior"
        ],
        "publish_date": "2008-06-23T11:00:00-04:00",
        "summary": "",
        "meta_description": "Mozilla's Brendan Eich describes JavaScript's history, the upcoming upgrade, and disagreements with Microsoft",
        "meta_lang": "en",
        "meta_favicon": "https://www.infoworld.com/wp-content/themes/iw-b2b-child-theme/src/static/img/favicon.ico",
        "meta_site_name": "InfoWorld",
        "canonical_link": "https://www.infoworld.com/article/2174329/javascript-creator-ponders-past-future.html",
        "text": "Brendan Eich created JavaScript, the popular scripting language being used to liven up Internet applications. Coupled with XML, JavaScript has become part of the AJAX (Asynchronous JavaScript and XML) technique popular in Web development. InfoWorld recently met with Eich to talk about JavaScript: where it has been and where it is headed. Eich, who serves as chief technology officer at Mozilla, also commented on other languages and about working with Microsoft in developing standards.\n\nInfoWorld: As I understand it, JavaScript started out as Mocha, then became LiveScript and then became JavaScript when Netscape and Sun got together. But it actually has nothing to do with Java or not much to do with it, correct?\n\nEich: That’s right. It was all within six months from May till December (1995) that it was Mocha and then LiveScript. And then in early December, Netscape and Sun did a license agreement and it became JavaScript. And the idea was to make it a complementary scripting language to go with Java, with the compiled language.\n\nSo it’s 1995, the Web is very early. HTML was 3.2, I think, or something like that. People did not have much programmability. Java was coming along at the same time but it required you to use a high-powered programming language and then run a compiler and put your code into a package that became an applet that was part of the page but it was in a little silo. It was kind of walled off.\n\nAnd it was hard to do — it was for professional programmers. It was for the high-powered real estate virtual tour or something like that. Whereas JavaScript was just a little snippet you could write, you could copy somebody else’s, you could learn as you went. You didn’t have to learn the whole language to use it and you could buy it by the yard.\n\nThat idea was very strongly held by Marc Andreessen and myself. Bill Joy at Sun was the champion of it, which was very helpful because that’s how we got the name. And we were pushing it as a little brother to Java, as a complementary language like Visual Basic was to C++ in Microsoft’s language families at the time. And it took off. We got it out in time.\n\nLet me go back to the first one. When will it be out? We’re not sure. We’d like to standardize after we implement because we don’t want to just rubber stamp a standard. We’d like to have several different implementations in some kind of open source [format] in which we build community-tested quality that we can evaluate to see if the specification led them to interoperate. So that means that we should get the implementations going as we’re writing the spec and the spec is being constructed right now. It’s getting done, it’s getting more solid. So we’ll have implementations I think by the end of this year that people will be able to play with. They won’t be in Firefox 3. They won’t be in probably the 3.1 that we’ve talked about doing, but they might be in our [nightly] builds, our trunk builds. It’ll be like a draft version of the spec, so we might call it JavaScript 1.9 or 1.99. We don’t want to get people to confuse it with what becomes the final spec, but we have to be able to test it with real programmers and get usability feedback. That’s critical.\n\nInfoWorld: So what are some of the features in JavaScript 2?\n\nEich: We’re trying to address programming in the large, because no one thought JavaScript would be used at the wide scale it is. Not just reaching lots of people on the Web, but large applications like Gmail.\n\nTo write large code, you don’t just want this little snippet language that I made easy for beginners to start buying by the yard. You want strong APIs, ways of saying — this is my module and this is your module and you can throw your code over to me and I can use it safely.\n\nTo do that, you need more than is in the current third edition of the language. You need some kind of a way of talking about the types of values, some way of talking about interfaces or the arguments that can go into a function in the result and come back. Can they be of any type? Can they be of the wrong type? Or can they only be of certain types?\n\nWe’d like to be flexible about this and not make things painfully static in a fixed way like Java does. We’d like to say, “Here’s the patterns people use in their code today. Here are the latent types they use for their data. Their data types look like these JSON objects, these trees of data.” We can write down very concise descriptions of those in the fourth edition using the [type] system, and then you can have the implementation automatically check that the shape of the data matches. So you can make sure that somebody isn’t sending you the wrong data by accident or maliciously — you can make sure that certain names can’t be changed to mean something other than what they should mean.\n\nGenerally we’re improving the integrity of the programming language because you’ve heard of mash-ups. JavaScript is very mutable, it’s very flexible. You can rename things. That’s good except when it’s bad, and so there should be ways for programmers as they figure out what their modules are and they know what their contract with their neighbor is, to lock things down.\n\nIt doesn’t mean everything gets locked down; it’s still JavaScript. You can start buying by the yard, you don’t have to declare the type of any variable. You can just start writing code and snippets.\n\nInfoWorld: So is this the first major upgrade in what — 13 years?\n\nEich: Nine years.\n\nInfoWorld: What is this dispute with Microsoft over ECMAScript 4 and JavaScript 2?\n\nEich: Well, we’re trying to work together in the ECMA working group and it’s going OK but we have a split committee. So part of the committee is focused on what’s being called ECMAScript 3.1 and the idea there, at least the idea that I think everyone in the committee agrees with, is that it would be a small improvement to the third edition, the last edition from 1999. That it would fix known bugs, it would maybe add a few standards that are already implemented in three out of four browsers, maybe it would add a few more things. But it has to be pretty small because, for one thing, it’s supposed to be a subset of the fourth edition. It’s not supposed to have anything in it that’s not in the fourth edition. And it’s also supposed to be done sooner, so if they keep adding things to it, it’ll never get done.\n\nI’m hopeful that it does come through because it would be an improvement. In many ways in Firefox we’ve already moved way beyond what’s in there. There are a few things in there that might be good to add to Firefox, so I’m not saying we thought of it all before, but some of it is just based on work we’ve already done. And so we don’t want to take a step backwards and do only 3.1 — that’s why we’re doing 4. Microsoft seems much more focused on 3.1, and that’s their choice.\n\nInfoWorld: What is Project Screaming Monkey? Apparently it’s some kind of a scripting engine for Internet Explorer?\n\nEich: Yes. Internet Explorer is a very flexible platform, and you can add scripting engines. They made it possible to add Visual Basic script and so they allowed other people to add Perl and Python; ActiveState did that. So we’ve commissioned Mark Hammond who worked at ActiveState to do active scripting glue for Tamarin, which is the Adobe-donated virtual machine for ActionScript, an ECMAScript implementation, that’s in the Flash Player.\n\nIt’s possible that if you’re a developer and you get this, or if Adobe were to distribute this active scripting glue that Mark wrote, that IE would be able to support JavaScript through the Flash Player. It wouldn’t need to have native support for JavaScript 2, it would get it just for free because Flash is widely distributed. Now I don’t know if Adobe will do that. It’d be good if they did, in case Microsoft does not ever get around to supporting JavaScript 2.\n\nAnd frankly, if Microsoft does a great job on JavaScript 2 and knocks it out of the park, Screaming Monkey doesn’t need to exist. It’s really just a way of getting browsers, starting with IE, to be uplifted to JavaScript 2. Because a lot of people worry — well, if Mozilla and Opera say, “Do JavaScript 2, but we don’t know when Apple is going to do it and Microsoft says they won’t,” then how can anyone ever use JavaScript 2?\n\nOne answer is — you can see this already on a Web site called ECMAScript4.com: Someone has just released a translator that takes draft fourth edition JavaScript 2 code and translates it into JavaScript that works in today’s browsers. That’s one tool you could use to use the new language soon. On those browsers that don’t have support for it natively, you translate to JavaScript. Those that do, you just ship the primary source straight through, say, Firefox. The other way to do it is Screaming Monkey and that could be applied to other browsers than IE, but IE is the one that most people use. So if we can uplift IE to support JavaScript 2 without Microsoft’s cooperation, and it’s part of their platform to support other scripting engines, then why not?"
    }
}