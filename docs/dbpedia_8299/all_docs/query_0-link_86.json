{
    "id": "dbpedia_8299_0",
    "rank": 86,
    "data": {
        "url": "https://airenemagunot.wordpress.com/about/",
        "read_more_link": "",
        "language": "en",
        "title": "Prelim Exam",
        "top_image": "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/java1.gif?w=300",
        "meta_img": "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/java1.gif?w=300",
        "images": [
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/cropped-3.jpg",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/java1.gif?w=300&h=227",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/java1.png?w=300&h=199",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/java3.png?w=300&h=153",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/c3.jpg?w=300&h=161",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/c2.png?w=295&h=168",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/src_prv.jpg?w=300&h=162",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/c11.png?w=300&h=213",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/c21.jpg?w=300&h=212",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/src_prv.jpg?w=300&h=203",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/php.gif?w=300&h=203",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/php1.png?w=300&h=208",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/php2.png?w=300&h=226",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/292px-python_add5_syntax-svg.png?w=640",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/python3.png?w=300&h=224",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/python2.png?w=290&h=299",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/ruby-3.png?w=300&h=137",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/ruby2.png?w=300&h=159",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/ruby1.png?w=300&h=162",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/javascript-slideshow-code.jpg?w=300&h=114",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/java31.png?w=300&h=153",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/js11.png?w=300&h=210",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/vb-net1.gif?w=300&h=238",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/vb-net2.png?w=300&h=236",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/vb-net3.gif?w=300&h=210",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/vb-net4.gif?w=300&h=210",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/mercury3.gif?w=300&h=183",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/mercury2.png?w=300&h=183",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/mercury1.png?w=300&h=225",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/go11.jpg?w=300&h=223",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/go21.png?w=300&h=224",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/go31.png?w=300&h=152",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/perl1.png?w=300&h=224",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/perl21.gif?w=300&h=225",
            "https://airenemagunot.wordpress.com/wp-content/uploads/2014/06/perl31.png?w=300&h=185",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [
            "https://read.amazon.com/kp/card?preview=inline&linkCode=kpd&ref_=k4w_oembed_aQbkIdxd6ycOeO&asin=0133081729&tag=kpembed-20"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-06-22T05:38:40+00:00",
        "summary": "",
        "meta_description": "The Ten Current Trends in Programming Language JAVA Technical Background In 1991, a group of Sun Microsystems engineers led by James Gosling decided to develop a language for consumer devices (cable boxes, etc.). They wanted the language to be small and use efficient code since these devices do not have powerful CPUs. They also wanted…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Current Trends in I.T.",
        "canonical_link": "https://airenemagunot.wordpress.com/about/",
        "text": "The Ten Current Trends in Programming Language\n\nJAVA\n\nTechnical Background\n\nIn 1991, a group of Sun Microsystems engineers led by James Gosling decided to develop a language for consumer devices (cable boxes, etc.). They wanted the language to be small and use efficient code since these devices do not have powerful CPUs. They also wanted the language to be hardware independent since different manufacturers would use different CPUs. The project was code-named Green. These conditions led them to decide to compile the code to an intermediate machine-like code for an imaginary CPU called a virtual machine. (Actually, there is a real CPU that implements this virtual CPU now.) This intermediate code (called byte code) is completely hardware independent. Programs are run by an interpreter that converts the byte code to the appropriate native machine code. Thus, once the interpreter has been ported to a computer, it can run any byte coded program. Sun uses UNIX for their computers, so the developers based their new language on C++. They picked C++ and not C because they wanted the language to be object-oriented.\n\nThe original name of the language was Oak. However, they soon discovered that there was already a programming language called Oak, so they changed the name to Java. The Green project had a lot of trouble getting others interested in Java for smart devices. It was not until they decided to shift gears and market Java as a language for web applications that interest in Java took off. Many of the advantages that Java has for smart devices are even bigger advantages on the web. Currently, there are two versions of Java. The original version of Java is 1.0. At the moment (Nov. 1997), most browsers only support this version. The newer version is 1.1 (in addition 1.2 is in beta). Only MS Internet Explorer 4.0 and Sun’s Hot Java browsers currently support it. The biggest differences in the two versions are in the massive Java class libraries. Unfortunately, Java 1.1 applets will not run on web browsers that do not support 1.1. (However, it is still possible to create 1.0 applets with Java 1.1 development systems.)\n\nCompany Profile\n\nOracle Corporation develops, manufactures, markets, hosts, and supports database and middleware software, applications software, and hardware systems. It licenses database and middleware software, including database and database management, application server and cloud application, service-oriented architecture and business process management, business intelligence, identity and access management, data integration, Web experience management, portals, and content management and social network software, as well as development tools and Java, a software development platform; and applications software comprising human capital and talent management, customer experience and customer relationship management, financial management and governance, risk and compliance, procurement, project portfolio management, supply chain management, business analytics and enterprise performance management, and industry-specific applications software. The company also provides customers with rights to unspecified software product upgrades and maintenance releases; patches released; Internet access to technical content; and Internet and telephone access to technical support personnel. In addition, it offers servers; storage, networking, and virtualization software; operating systems, including the Oracle Solaris Operating System; management software to IT environments, such as public and private cloud computing environments; Oracle engineered systems; and hardware systems support solutions, including software updates for the software components, as well as product repair, maintenance, and technical support services. Further, the company provides consulting services in business and IT strategy alignment, enterprise architecture planning and design, initial product implementation and integration, and ongoing product enhancement and upgrade services; Oracle managed cloud services; and education services. Oracle Corporation was founded in 1977 and is headquartered in Redwood City, California.\n\nSignificance and Purpose\n\nOne characteristic of Java is portability, which means that computer programs written in the Java language must run similarly on any hardware/operating-system platform. This is achieved by compiling the Java language code to an intermediate representation called Java bytecode, instead of directly to platform-specific machine code. Java bytecode instructions are analogous to machine code, but they are intended to be interpreted by a virtual machine (VM) written specifically for the host hardware. End-users commonly use a Java Runtime Environment (JRE) installed on their own machine for standalone Java applications, or in a Web browser for Java applets.\n\nStandardized libraries provide a generic way to access host-specific features such as graphics, threading, and networking.\n\nA major benefit of using bytecode is porting. However, the overhead of interpretation means that interpreted programs almost always run more slowly than programs compiled to native executable would. Just-in-Time (JIT) compilers were introduced from an early stage that compile bytecodes to machine code during runtime.\n\nConceptual Development and Implementations\n\nIn 1978, Software Development Laboratories moved from their office in Santa Clara to a new one on Sand Hill Road in Menlo Park, the heart of Silicon Valley. In an attempt to explain what their company does, they changed their name to Relational Software Inc., or RSI. The newly-christened company shipped its first commercial SQL-based database, V2, in 1979 (V1 was never officially released). In 1982 RSI changed its name to Oracle Systems Corporation, which later become Oracle Corporation.\n\nOracle Corporation is the current owner of the official implementation of the Java SE platform, following their acquisition of Sun Microsystems on January 27, 2010. This implementation is based on the original implementation of Java by Sun. The Oracle implementation is available for Mac OS X, Windows and Solaris. Because Java lacks any formal standardization recognized by Ecma International, ISO/IEC, ANSI, or other third-party standards organization, the Oracle implementation is the de facto standard.\n\nThe Oracle implementation is packaged into two different distributions: The Java Runtime Environment (JRE) which contains the parts of the Java SE platform required to run Java programs and is intended for end-users, and the Java Development Kit (JDK), which is intended for software developers and includes development tools such as the Java compiler, Javadoc, Jar, and a debugger. OpenJDK is another notable Java SE implementation that is licensed under the GPL. The implementation started when Sun began releasing the Java source code under the GPL. As of Java SE 7, OpenJDK is the official Java reference implementation. The goal of Java is to make all implementations of Java compatible. Historically, Sun’s trademark license for usage of the Java brand insists that all implementations be “compatible”. This resulted in a legal dispute with Microsoft after Sun claimed that the Microsoft implementation did not support RMI or JNI and had added platform-specific features of their own. Sun sued in 1997, and in 2001 won a settlement of US$20 million, as well as a court order enforcing the terms of the license from Sun.[24] As a result, Microsoft no longer ships Windows with Java. Platform-independent Java is essential to Java EE, and an even more rigorous validation is required to certify an implementation. This environment enables portable server-side applications.\n\nQuality Attributes\n\nReliability\n\nThese guidelines deal with Java language features that can easily be misused by the unwary. The Java language allows a great deal of flexibility in the ways in which it is used, but some of these uses can lead to obscure techniques and code that is difficult to understand and maintain. By following these guidelines, programmers will produce code that is less prone to bugs and runtime failure.\n\nThis chapter includes guidelines that\n\nHelp reduce errors, and are consequently important for developing reliable Java code\n\nContain specific Java coding recommendations to improve software reliability\n\nPerformance\n\nPrograms written in Java have a reputation for being slower and requiring more memory than those written in C++. However, Java programs’ execution speed improved significantly with the introduction of Just-in-time compilation in 1997/1998 for Java 1.1, the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine itself, such as HotSpot becoming the default for Sun’s JVM in 2000. Some platforms offer direct hardware support for Java; there are microcontrollers that can run Java in hardware instead of a software Java virtual machine, and ARMbased processors can have hardware support for executing Java bytecode through their Jazelle option.\n\nSecurity\n\nEvery object and primitive data element in Java has a built-in access level associated with it, either the explicit private, protected, or public access level, or a default access level.\n\nPrivate variables and classes can only be accessed by the class that created them.\n\nProtected variables and classes can only be accessed by the class that created them, the creator’s subclasses, and classes in the same Java package.\n\nPublic variables and classes are accessible by all classes.\n\nBy default, entities in a class can be accessed by code within the class that defines them, or by a class in the same package as the class that defines them.\n\nPossible Problems\n\nJava is not suitable for many critical programming tasks.\n\nJava may never be in demand like C and C++ have been for years.\n\nDesign Specification\n\nReferences\n\nhttp://www.securecodingacademy.com/reviews\n\nhttp://en.wikipedia.org/wiki/Java_(programming_language)\n\nhttp://en.wikipedia.org/wiki/Java_(programming_language)#Java_platform\n\nhttp://www.cs.binghamton.edu/~guydosh/cs350/JavaPrimer.pdf\n\nhttp://stackoverflow.com/questions/14209887/why-java-is-secure-compared-with-other-programming-languages\n\nhttp://www.securingjava.com/chapter-two/chapter-two-4.html\n\nhttp://www.quora.com/Java-programming-language/Why-is-Java-considered-to-be-the-most-secure-language\n\nhttp://java.com/en/about/oracleacademy.jsp\n\nhttp://mil-embedded.com/guest-blogs/ada-watch-choosing-a-programming-language-that-supports-reliability/\n\nhttp://www.informit.com/articles/article.aspx?p=2133373\n\nhttp://www.cs.virginia.edu/~mpw7t/cs655/nojava.html\n\nhttp://finance.yahoo.com/q/pr?s=orcl\n\nC ++\n\nTechnical Background\n\nC was developed at Bell Laboratories in 1972 by Dennis Ritchie. Many of its principles and ideas were taken from the earlier language B and B’s earlier ancestors BCPL and CPL. CPL ( Combined Programming Language ) was developed with the purpose of creating a language that was capable of both high level, machine independent programming and would still allow the programmer to control the behavior of individual bits of information. The one major drawback of CPL was that it was too large for use in many applications. In 1967, BCPL ( Basic CPL ) was created as a scaled down version of CPL while still retaining its basic features. In 1970, Ken Thompson, while working at Bell Labs, took this process further by developing the B language. B was a scaled down version of BCPL written specifically for use in systems programming. Finally in 1972, a co-worker of Ken Thompson, Dennis Ritchie, returned some of the generality found in BCPL to the B language in the process of developing the language we now know as C.\n\nC’s power and flexibility soon became apparent. Because of this, the Unix operating system which was originally written in assembly language, was almost immediately re-written in C ( only the assembly language code needed to “bootstrap” the C code was kept ). During the rest of the 1970’s, C spread throughout many colleges and universities because of it’s close ties to Unix and the availability of C compilers. Soon, many different organizations began using their own versions of C causing compatibility problems. In response to this in 1983, the American National Standards Institute ( ANSI ) formed a committee to establish a standard definition of C which became known as ANSI Standard C. Today C is in widespread use with a rich standard library of functions.\n\nCompany Profile\n\nBell Laboratories (also known as Bell Labs and formerly known as AT&T Bell Laboratories and Bell Telephone Laboratories) is the research and development subsidiary of Alcatel-Lucent. Bell Laboratories operates its headquarters in Murray Hill, New Jersey, United States, and has research and development facilities throughout the world.\n\nThe historic laboratory originated in the late 19th century as the Volta Laboratory and Bureau created by Alexander Graham Bell. Bell Labs was also at one time a division of the American Telephone & Telegraph Company (AT&T Corporation), half-owned through its Western Electric manufacturing subsidiary.\n\nResearchers working at Bell Labs are credited with the development of radio astronomy, the transistor, the laser, the charge-coupled device (CCD), information theory, the UNIX operating system, the C programming language, S programming language and the C++ programming language. Seven Nobel Prizes have been awarded for work completed at Bell Laboratories.\n\nOn May 20, 2014, Bell Labs announced the Bell Labs Prize, a competition for innovators to offer game changing proposals in information and communications technologies, with cash awards of up to $100,000 for the grand prize.\n\nSignificance and Purpose\n\nC is a powerful, flexible language that provides fast program execution and imposes few constraints on the programmer. It allows low level access to information and commands while still retaining the portability and syntax of a high level language. These qualities make it a useful language for both systems programming and general purpose programs.\n\nC’s power and fast program execution come from its ability to access low level commands, similar to assembly language, but with high level syntax. Its flexibility comes from the many ways the programmer has to accomplish the same tasks. C includes bitwise operators along with powerful pointer manipulation capabilities. C imposes few constraints on the programmer. The main area this shows up is in C’s lack of type checking. This can be a powerful advantage to an experienced programmer but a dangerous disadvantage to a novice.\n\nAnother strong point of C is its use of modularity. Sections of code can be stored in libraries for re-use in future programs. This concept of modularity also helps with C’s portability and execution speed. The core C language leaves out many features included in the core of other languages. These functions are instead stored in the C Standard Library where they can be called on when needed. An example of this concept would be C’s lack of built in I/O capabilities. I/O functions tend to slow down program execution and also be machine independent when running optimally. For these reasons, they are stored in a library separately from the C language and only included when necessary.\n\nConceptual Development and Implementations\n\nHigh or Low Level Level, in this case, refers to how much the nature of the language reflects the underlying system. In other words, a programming language’s level refers to how similar the language is to a computer’s native language. The higher the level, the less similar it is.\n\nA low-level language is generally quite similar to machine code, and thus is more suitable for programs like device drivers or very high performance programs that really need access to the hardware. Generally, the term is reserved for machine code itself and assembly languages, though many languages offer low-level elements. Since a low-level language is subject to all the nuances of the hardware it’s accessing, however, a program written in a low-level language is generally difficult to port to other platforms. Low level languages are practically never interpreted, as this generally defeats the purpose.\n\nA high-level language focuses more on concepts that are easy to understand by the human mind, such as objects or mathematical functions. A high-level language usually is easier to understand than a low-level language, and it usually takes less time to develop a program in a high-level language than it does in a low-level language. As a trade-off one generally needs to sacrifice some degree of control over what the resulting program actually does. It is not, however, impossible to mix high-level and low-level functionality in a language.\n\nQuality Attributes\n\nReliability\n\nMISRA stands for Motor Industry Software Reliability Association. It originally published Guidelines for the Use of the C Language In Critical Systems, known informally as MISRA C, in 1998. A second edition of MISRA C was introduced in 2004, and then MISRA C++ was released in 2008. More information on MISRA and the standards themselves can be obtained from the MISRA website. The purpose of MISRA C and MISRA C++ guidelines are not to promote the use of C or C++ in critical systems. Rather, the guidelines accept that these languages are being used for an increasing number of projects. The guidelines discuss general problems in software engineering and note that C and C++ do not have as much error checking as other languages do. Thus the guidelines hope to make C and C++ safer to use, although they do not endorse MISRA C or MISRA C++ over other languages. MISRA C is a subset of the C language. In particular, it is based on the ISO/IEC 9899:1990 C standard, which is identical to the ANSI X3.159-1989 standard, often called C ’89. Thus every MISRA C program is a valid C program. The MISRA C subset is defined by 141 rules that constrain the C language. Correspondingly, MISRA C++ is a subset of the ISO/IEC 14882:2003 C++ standard. MISRA C++ is based on 228 rules, many of which are refinements of the MISRA C rules to deal with the additional realities of C++.\n\nFor notational convenience, we will use the terms “MISRA”, “MISRA C” or “MISRA C++” loosely in the remainder of the document to refer to either the defining documents or the language subsets.\n\nPerformance\n\nProducing a reasonably standards-compliant C++ compiler has proven to be a difficult task for compiler vendors in general. For many years, different C++ compilers implemented the C++ language to different levels of compliance to the standard, and their implementations varied widely in some areas such as partial template specialization. Recent releases of most popular C++ compilers support almost all of the C++ 1998 standard.[30]\n\nTo give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code produced by different compilers is expected to be incompatible. There were, however, attempts to standardize compilers for particular machines or operating systems (for example C++ ABI), though they seem to be largely abandoned now.\n\nSecurity\n\nThere are a number of reasons for the many buffer overruns in production C and C++ code. The first I have already mentioned: the languages provide direct access to vulnerable memory. Second, developers make mistakes. And third, there are normally no defenses offered by compilers. It is feasible to provide remedies for the first issue, but then C and C++ start to become different languages.\n\nThe reason for developers making mistakes could be partially addressed through education, but I really don’t see the educational institutions stepping up. Sure there is a place in industry for security education, too, but we are all part of the solution or part of the problem, and I would love to see colleges doing more to educate students about software security. You’re probably asking, “Why are educational institutions not attempting to teach this critically important subject?” To be honest, I have absolutely no idea. It’s kind of depressing, actually.\n\nPossible problems\n\nThis is probably by far the most common misconception (sometimes even a deliberate “misconception”) C hackers have about C++. Some of them probably honestly believe that C++ code just creates a slower program than the equivalent C code would, without even having tried it in practice.\n\nI can say from long experience that this claim is pure BS. For example, I recently made a C++ version of the great ISAAC random number generator (which you can download here). I encapsulated all the ugly details inside a class with a simple and clean, easy to use public interface (much easier than the original C library). I have measured the speed of the original C library and my C++ version, and there just is no speed difference at all. They are both equally fast.\n\nMost C hackers, for some reason, have the notion that if you use C++, you must use classes, and if you use classes, you must use inheritance, and if you use inheritance, you must use virtual functions, and virtual functions are enormously slower than regular C functions.\n\nThis chain of deductions is completely and absolutely false. None of those features are mandatory to be used and, most importantly, even if you use classes and inheritance, there’s nothing in the resulting code that would make it slower than using regular functions. (My C++ version of the ISAAC library above, where I encapsulated the library inside a class, is a perfect example of this.)\n\nThe speed penalty of virtual functions compared to regular functions exists, but is greatly exaggerated. C hackers make it sound like calling a virtual function could be tens, if not even hundreds of times slower than calling a regular function. In reality calling a virtual function probably takes just a few clock cycles more than calling a regular function (sure, even those few clock cycles can have an impact in some cases, but in general it’s negligible).\n\nC hackers also make it sound like if you use a class, all the functions are automatically virtual (like they are, for example, in Java), with the subsequent speed penalty. This is, of course, just not true. A member function is virtual only if you explicitly say so, and a class with no virtual functions at all is, in its underlaying implementation, almost completely equivalent to a C struct, with no penalties whatsoever.\n\nNote that even inheritance does not automatically imply virtual functions or speed penalties. A class inherited from another class, when there are no virtual functions anywhere, is no different from a C struct with just the same elements as the other class plus the new elements in the derived class. There are no size nor speed penalties.\n\nDesign Specification\n\nReferences\n\nhttp://en.wikipedia.org/wiki/C%2B%2B\n\nhttp://online.wsj.com/news/articles/SB10001424052970204774604576629354123067080\n\nhttp://en.wikipedia.org/wiki/C%2B%2B#Compatibility\n\nhttp://cplus.about.com/od/introductiontoprogramming/p/profileofc.htm\n\nhttps://www.google.fr/search?biw=1366&bih=667&q=who+developed+c%2B%2B+programming+language&revid=1148232076&sa=X&ei=9HamU5jKFYfvoATyqoGoDQ&ved=0CHsQ1QIoATgK#q=all+about+the+C+language+\n\nhttp://en.wikipedia.org/wiki/Bell_Labs\n\nhttp://www.insideview.com/directory/bell-laboratories-inc\n\nhttp://www.codingunit.com/the-history-of-the-c-language\n\nhttp://en.wikipedia.org/wiki/C_(programming_language)\n\nhttp://www.tutorialspoint.com/cprogramming/c_overview.htm\n\nhttp://www.cranfield.ac.uk/courses/training/programming-and-software-development-in-c.html\n\nhttp://compsci.ca/v3/viewtopic.php?p=146557\n\nhttp://www.cplusplus.com/forum/beginner/67682/\n\nhttp://www.amazon.com/Debugging-Testing-Reliability-Prevention-Correction/dp/0133081729\n\nC#\n\nTechnical Background\n\nDuring the development of the .NET Framework, the class libraries were originally written using a managed code compiler system called Simple Managed C (SMC). In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for “C-like Object Oriented Language”.Microsoft had considered keeping the name “Cool” as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to C#.\n\nC#’s principal designer and lead architect at Microsoft is Anders Hejlsberg, who was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and technical papers he has stated that flawsin most major programming languages (e.g.C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language itself.\n\nJames Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an “imitation” of Java; Gosling further said that “[C# is] sort of Java with reliability, productivity and security deleted.” Klaus Kreft and Angelika Langer (authors of a C++ streams book) stated in a blog post that “Java and C# are almost identical programming languages. Boring repetition that lacks innovation,” “Hardly anybody will claim that Java or C# are revolutionary programming languages that changed the way we write programs,” and “C# borrowed a lot from Java – and vice versa. Now that C# supports boxing and unboxing, we’ll have a very similar feature in Java.” In July 2000, Anders Hejlsberg said that C# is “not a Java clone” and is “much closer to C++” in its design. Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming somewhat less similar. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# makes use of reification to provide “first-class” generic objects that can be used like any other class, with code generation performed at class-load time. By contrast, Java’s generics are essentially a language syntax feature, and they do not affect the generated byte code, because the compiler performs type erasure on the generic type information after it has verified its correctness.\n\nFurthermore, C# has added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types. These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of “boilerplate” code that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability. C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004. C# was originally submitted for review to the ISO subcommittee JTC 1/SC 22 under ISO/IEC 23270:2003, which is now withdrawn. It was then approved under ISO/IEC 23270:2006.\n\nCompany Background\n\nMicrosoft Corporation is an American multinational corporation headquartered in Redmond, Washington, that develops, manufactures, licenses, supports and sells computer software, consumer electronics and personal computers and services. Its best known software products are the Microsoft Windows line of operating systems, Microsoft Office office suite, and Internet Explorer web browser. Its flagship hardware products are Xbox game console and the Microsoft Surface series of tablets. It is the world’s largest software maker measured by revenues. It is also one of the world’s most valuable companies.\n\nMicrosoft was founded by Bill Gates and Paul Allen on April 4, 1975 to develop and sell BASIC interpreters for Altair 8800. It rose to dominate the personal computer operating system market with MS-DOS in the mid-1980s, followed by the Microsoft Windows. The company’s 1986 initial public offering, and subsequent rise in its share price, created an estimated three billionaires and 12,000 millionaires from Microsoft employees. Since the 1990s, it has increasingly diversified from the operating system market and has made a number of corporate acquisitions. In May 2011, Microsoft acquired Skype Technologies for $8.5 billion in its largest acquisition to date.\n\nAs of 2013, Microsoft is market dominant in both the IBM PC-compatible operating system and office software suite markets (the latter with Microsoft Office). The company also produces a wide range of other software for desktops and servers, and is active in areas including Internet search (with Bing), the video game industry (with the Xbox, Xbox 360 and Xbox One consoles), the digital services market (through MSN), and mobile phones (via the Windows Phone OS). In June 2012, Microsoft entered the personal computer production market for the first time, with the launch of the Microsoft Surface, a line of tablet computers.\n\nWith the acquisition of Nokia’s devices and services division to form Microsoft Mobile Oy, the company will re-enter the smartphone hardware market, after its previous attempt, Microsoft Kin, which resulted from their acquisition of Danger Inc.\n\nSignificance and Purposes\n\nThe C# language is intended to be a simple, modern, general-purpose, object-oriented programming language.\n\nThe language, and implementations thereof, should provide support for software engineering principles such as strong typechecking, array bounds checking, detection of attempts to use uninitialized variables, and automatic garbage collection. Software robustness, durability, and programmer productivity are important.\n\nThe language is intended for use in developing software components suitable for deployment in distributed environments.\n\nSource code portability is very important, as is programmer portability, especially for those programmers already familiar with C and C++.\n\nSupport for internationalization is very important.\n\nC# is intended to be suitable for writing applications for both hosted and embedded systems, ranging from the very large that use sophisticated operating systems, down to the very small having dedicated functions.\n\nAlthough C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language.\n\nConceptual Development and Implementations\n\nThe reference C# compiler is Microsoft Visual C#, which is closed-source.\n\nMicrosoft is leading the development of a new open source C# compiler and set of tools, previously codenamed “Roslyn“. The compiler, which is entirely written in managed code(C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools.\n\nOther C# compilers exist, often including an implementation of the Common Language Infrastructure and the .NET class libraries up to .NET 2.0:\n\nThe Mono project provides an open source C# compiler, a complete open source implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and a nearly complete implementation of the Microsoft proprietary .NET class libraries up to .NET 3.5. As of Mono 2.6, no plans exist to implement WPF; WF is planned for a later release; and there are only partial implementations of LINQ to SQL and WCF.\n\nThe DotGNU project also provides an open source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft’s standard .NET Framework distribution).\n\nMicrosoft’s Rotor project (currently called Shared Source Common Language Infrastructure) (licensed for educational and research use only) provides a shared source implementation of the CLR runtime and a C# compiler, and a subset of the required Common Language Infrastructure framework libraries in the ECMA specification (up to C# 2.0, and supported on Windows XP only).\n\nQuality Attributes\n\nReliability\n\nInstances of value types do not have referential identity nor referential comparison semantics – equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures).\n\nIn contrast, reference types have the notion of referential identity – each instance of reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String). In general, it is not always possible to create an instance of a reference type, nor to copy an existing instance, or perform a value comparison on two existing instances, though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the ultimate base class for all other C# classes),System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays). Both type categories are extensible with user-defined types.\n\nPerformance\n\nTypical programming tasks includes putting data into a database or pulling it out, displaying high speed graphics in a game or video, controlling electronic devices attached to the PC or even playing music and/or sound effects. You can even write software to generate music or help you compose.\n\nSome developers believe that C# is too slow for games, because it is interpreted. However the .NET runtime compiles the interpreted code (called CIL) the first time it is run.\n\nSecurity\n\nThe .NET Framework security protects your code and data from being misused or damaged by other code by enforcing security restrictions on managed code. When a .NET Framework application requests permission, the security policy established by the administrator grants the permission or refuses to run the code. Trust is based on evidence about the code such as a digital signature, where the code comes from, and so forth. Once granted, security enforces permissions that control what code is (and by not being granted, what code is not) allowed to do.\n\nPossible Problems\n\nC# is slower to run. This is somewhat taken care of when using WPF, although currently the launching of WPF application is still a bit slow. However, after the program is launched, the animation effects are all very smooth.\n\nC# is less flexible than C++. C# depends greatly on .NET framework, anything that is not found in the .NET framework will be difficult to implement.\n\nDesigns Specifications\n\nReferences\n\nhttp://aboutcsharpprogramming.blogspot.com/2012/09/history-of-c-programming.html\n\nhttp://en.wikipedia.org/wiki/C_Sharp_(programming_language)#History\n\nhttp://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Implementations\n\nhttp://en.wikipedia.org/wiki/Anders_Hejlsberg\n\nhttp://en.wikipedia.org/wiki/Microsoft\n\nhttp://cplus.about.com/od/introductiontoprogramming/p/profileofcsh.htm\n\nhttp://msdn.microsoft.com/en-us/library/z1zx9t92.aspx\n\nhttp://www.dotnetperls.com/all\n\nhttp://msdn.microsoft.com/en-us/library/z1zx9t92.aspx\n\nhttp://stackoverflow.com/questions/3482441/what-is-c-sharp-purpose\n\nhttp://csharp.net-tutorials.com/basics/functions/\n\nhttp://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Design_goals\n\nhttp://csharp.net-tutorials.com/basics/functions/\n\nhttp://msdn.microsoft.com/en-us/magazine/cc163716.aspx\n\nhttp://msdn.microsoft.com/en-us/magazine/cc163716.aspx#S4\n\nhttp://stackoverflow.com/questions/1732076/how-reliable-is-mono-on-linux-vs-net-on-windows\n\nhttp://msdn.microsoft.com/en-us/library/aa287558(v=vs.71).aspx\n\nhttp://msdn.microsoft.com/en-us/library/67ef8sbd.aspx\n\nhttp://en.wikipedia.org/wiki/C_Sharp_(programming_language)#Syntax\n\nhttp://codereview.stackexchange.com/questions/15346/using-system-security-cryptography-protecteddata-do-you-see-any-issue-with-encr\n\nhttp://www.daniweb.com/software-development/csharp/threads/132710/looking-for-c-problems\n\nPHP\n\nTechnical Background\n\nPHP is a server-side scripting language designed for web development but also used as a general-purpose programming language. As of January 2013, PHP was installed on more than 240 million websites (39% of those sampled) and 2.1 million web servers. Originally created by Rasmus Lerdorf in 1994, the reference implementation of PHP is now produced by The PHP Group. While PHP originally stood for Personal Home Page, it now stands for PHP: Hypertext Preprocessor, a recursive backronym.\n\nPHP code can be simply mixed with HTML code, or it can be used in combination with various templating engines and web frameworks. PHP code is usually processed by a PHP interpreter, which is usually implemented as a web server’s native module or aCommon Gateway Interface (CGI) executable. After the PHP code is interpreted and executed, the web server sends resulting output to its client, usually in form of a part of the generated web page – for example, PHP code can generate a web page’s HTML code, an image, or some other data. PHP has also evolved to include a command-line interface (CLI) capability and can be used in standalonegraphical applications. PHP is free software released under the PHP License. PHP has been widely ported and can be deployed on most web servers on almost every operating system and platform, free of charge.\n\nCompany Background\n\nZend Technologies was founded by Andi Gutmans and Zeev Suraski who, along with other Israeli graduates of the Technion, developed PHP after its creation by Rasmus Lerdorf.\n\nIn 1997, Gutmans and Suraski rewrote the parser of PHP-FI, originally written by Lerdorf, resulting in PHP 3. In 1998 they redesigned that parser completely, and named it theZend Engine. The name Zend is a combination of Suraski’s and Gutmans’ forenames, Zeev and Andi. PHP 4 is based on the first version of the Zend Engine.\n\nIn 1999, their company Zend Technologies was formally established and received initial funding from Israeli venture capital funds Platinum Neurone Ventures and Walden Israel, an experienced business executive, Doron Gerstel, was recruited to head the company as a CEO.\n\nIn July 2004, Zend Technologies raised $8M in a series C funding and established a headquarters in the USA. In January 2005 Intel Capital and SAP ventures joined the existing investors in Zend Technologies.\n\nIn June 2006, Zend Technologies received the Best Startup Software Company Award at the Israeli Venture Association Annual Hi Tech Conference in Tel Aviv. The award was presented by Israeli Prime Minister Ehud Olmert. In August 2006 Zend raised $20 Million in a series D funding.\n\nIn February 2009, Zend’s Co-Founder Andi Gutmans was appointed as Chief Executive Officer, after previously serving as the company’s VP of Research and Development. Zend also recruited Mark Burton, who previously served as EVP of worldwide sales and alliances at MySQL, as Executive Chairman.\n\nSignificance and Purpose\n\nThere are three main areas where PHP scripts are used.\n\nServer-side scripting. This is the most traditional and main target field for PHP. You need three things to make this work. The PHP parser (CGI or server module), a web server and a web browser. You need to run the web server, with a connected PHP installation. You can access the PHP program output with a web browser, viewing the PHP page through the server. All these can run on your home machine if you are just experimenting with PHP programming. See the installation instructions section for more information.\n\nCommand line scripting. You can make a PHP script to run it without any server or browser. You only need the PHP parser to use it this way. This type of usage is ideal for scripts regularly executed using cron (on *nix or Linux) or Task Scheduler (on Windows). These scripts can also be used for simple text processing tasks. See the section about Command line usage of PHP for more information.\n\nWriting desktop applications. PHP is probably not the very best language to create a desktop application with a graphical user interface, but if you know PHP very well, and would like to use some advanced PHP features in your client-side applications you can also use PHP-GTK to write such programs. You also have the ability to write cross-platform applications this way. PHP-GTK is an extension to PHP, not available in the main distribution. If you are interested in PHP-GTK, visit » its own website.\n\nPHP can be used on all major operating systems, including Linux, many Unix variants (including HP-UX, Solaris and OpenBSD), Microsoft Windows, Mac OS X, RISC OS, and probably others. PHP has also support for most of the web servers today. This includes Apache, IIS, and many others. And this includes any web server that can utilize the FastCGI PHP binary, like lighttpd and nginx. PHP works as either a module, or as a CGI processor.\n\nSo with PHP, you have the freedom of choosing an operating system and a web server. Furthermore, you also have the choice of using procedural programming or object oriented programming (OOP), or a mixture of them both.\n\nWith PHP you are not limited to output HTML. PHP’s abilities includes outputting images, PDF files and even Flash movies (using libswf and Ming) generated on the fly. You can also output easily any text, such as XHTML and any other XML file. PHP can autogenerate these files, and save them in the file system, instead of printing it out, forming a server-side cache for your dynamic content.\n\nOne of the strongest and most significant features in PHP is its support for a wide range of databases. Writing a database-enabled web page is incredibly simple using one of the database specific extensions (e.g., for mysql), or using an abstraction layer like PDO, or connect to any database supporting the Open Database Connection standard via the ODBC extension. Other databases may utilize cURL or sockets, like CouchDB.\n\nPHP also has support for talking to other services using protocols such as LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (on Windows) and countless others. You can also open raw network sockets and interact using any other protocol. PHP has support for the WDDX complex data exchange between virtually all Web programming languages. Talking about interconnection, PHP has support for instantiation of Java objects and using them transparently as PHP objects.\n\nPHP has useful text processing features, which includes the Perl compatible regular expressions (PCRE), and many extensions and tools to parse and access XML documents. PHP standardizes all of the XML extensions on the solid base of libxml2, and extends the feature set adding SimpleXML, XMLReader and XMLWriter support.\n\nAnd many other interesting extensions exist, which are categorized both alphabetically and by category. And there are additional PECL extensions that may or may not be documented within the PHP manual itself, like » XDebug.\n\nAs you can see this page is not enough to list all the features and benefits PHP can offer. Read on in the sections about installing PHP, and see the function reference part for explanation of the extensions mentioned here.\n\nConceptual Development and Implementations\n\nPHP source code is compiled on-the-fly to an internal format that can be executed by the PHP engine, which works as an interpreter. In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine’s internal format by using a PHP compiler. Code optimizers aim to enhance the performance of the compiled code by reducing its size, merging redundant instructions and making other changes that can reduce the execution time. With PHP, there are often opportunities for code optimization. An example of a code optimizer is the eAccelerator PHP extension.\n\nAnother approach for reducing compilation overhead for PHP servers is using an opcode cache. Opcode caches work by caching the compiled form of a PHP script (opcodes) inshared memory to avoid the overhead of parsing and compiling the code every time the script runs. An opcode cache, Zend Opcache, is built into PHP since version 5.5. Another example of a widely used opcode cache is the Alternative PHP Cache (APC), which is available as a PECL extension.\n\nThe PHP language was originally implemented as an interpreter, and this is still the most popular implementation. Several compilers have been developed which decouple the PHP language from the interpreter. Advantages of compilation include better execution speed, static analysis, and improved interoperability with code written in other languages. Notable PHP compilers include the following:\n\nHipHop Virtual Machine (HHVM) – developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an intermediate language), which is then translated into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6× performance improvements.\n\nParrot – a virtual machine designed to run dynamic languages efficiently; Pipp transforms the PHP source code into the Parrot intermediate representation, which is then translated into the Parrot’s bytecode and executed by the virtual machine.\n\nPhalanger – compiles PHP into Common Intermediate Language (CIL) bytecode\n\nHipHop – developed at Facebook and available as open source, it transforms the PHP scripts into C++ code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favor of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the create function() and eval() constructs.\n\nQuality Attributes\n\nReliability\n\nPHP acts primarily as a filter, taking input from a file or stream containing text and/or PHP instructions and outputting another stream of data. Most commonly the output will be HTML, although it could be JSON, XML orbinary data such as image or audio formats. Since PHP 4, the PHP parser compiles input to produce bytecodefor processing by the Zend Engine, giving improved performance over its interpreter predecessor.\n\nOriginally designed to create dynamic web pages, PHP now focuses mainly on server-side scripting, and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Microsoft‘s ASP.NET, Sun Microsystems‘ JavaServer Pages, and mod_perl. PHP has also attracted the development of many software frameworks that provide building blocks and a design structure to promote rapid application development (RAD). Some of these include PRADO, CakePHP, Symfony, CodeIgniter, Laravel, Yii Framework, and Zend Framework, offering features similar to other web application frameworks.\n\nThe LAMP architecture has become popular in the web industry as a way of deploying web applications. PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python, Perl, or some mix of the three. Similar packages, WAMP and MAMP, are also available for Windows and OS X, with the first letter standing for the respective operating system. Although both PHP and Apache are provided as part of the Mac OS X base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date.\n\nAs of April 2007, over 20 million Internet domains had web services hosted on servers with PHP installed and mod_php was recorded as the most popular Apache HTTP Servermodule. As of October 2010, PHP was used as the server-side programming language on 75% of all websites whose server-side programming language was known (as of February 2014, the percentage had reached 82%), and PHP was the most-used open source software within enterprises. Web content management systems written in PHP include MediaWiki, Joomla, eZ Publish, SilverStripe, WordPress, Drupal, Moodle, the user-facing portion of Facebook, and Digg.\n\nFor specific and more advanced usage scenarios, PHP offers a well defined and documented way for writing custom extensions in C or C++. Besides extending the language itself in form of additional libraries, extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true compiled language. PHP also offers well defined ways for embedding itself into other software projects. That way PHP can be easily used as an internalscripting language for another project, also providing tight interfacing with the project’s specific internal data structures.\n\nPHP received mixed reviews due to lacking support for multithreading at the core language level, though using threads is made possible by the “pthreads” PECLextension.\n\nPerformance\n\nPHP performance also continues to get better with every release. PHP 5.3 was ~20% faster than 5.2, and 5.4 showed a 20-40% improvement over 5.3. Then with PHP 5.5 we got a bundled opcode cache, which has a dramatic positive impact on PHP’s out of the box performance, and removes the necessity of installing APC. The core PHP developers care deeply about performance, and the consistent improvements from version to version show that this will continue to be an area of focus going forward.\n\nPerhaps most importantly, for a typical web application PHP is simply not the bottleneck. Most websites connect to networked resources to get the majority of their data (e.g. memcached, redis, MySQL or another datastore), and those resources typically govern the runtime of the page. I’ve worked on the performance team for multiple companies running large, monolithic PHP applications, and the database has always been the primary focus of our optimization efforts. Projects to reduce round trips across the network, optimize queries, and restructure data have always yielded much bigger gains than micro optimizations within PHP.\n\nPHP is a language that optimizes for speed of development, not speed of execution. If you are working in an environment that requires extremely low latency backend performance, or one that will be running across thousands of servers and needs to be very conservative with CPU consumption, then PHP is likely not the best choice for you (or you should consider HHVM – works great with Drupal!). If, however, you are like the hundreds of millions of other websites on the internet that talk to a database, serve HTML, and need to ship features quickly, then PHP’s performance is certainly not going to hold you back. The ultimate decision about which language you use to build your application needs to consider many factors, but when you are going down the list you should put a checkmark next to PHP in the “fast enough” column.\n\nSecurity\n\nIn 2013, 9% of all vulnerabilities listed by the National Vulnerability Database were linked to PHP; historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (22 in 2009, about 1% of the total although PHP applies to about 20% of programs listed). Recognizing that programmers make mistakes, some languages include taint checking to automatically detect the lack of input validation which induces many issues. Such a feature is being developed for PHP, but its inclusion into a release has been rejected several times in the past.\n\nThere are advanced protection patches such as Suhosin and Hardening-Patch, especially designed for web hosting environments.\n\nThere is a number of language features and historical configuration parameters that make PHP prone to security issues:\n\nmagic_quotes_gpc and register_globalsconfiguration directives are the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for “magic quotes” and “register globals” has been deprecated as of PHP 5.3.0, and removed as of PHP 5.4.0.\n\nimplied type conversions that results in incompatible values being treated as identical against the programmer’s intent; for example, comparison of 0e1234 == 0 will be Truebecause the first value will be treated as scientific notation number 0×101234 with value of 0. This feature resulted in authentication vulnerabilities in Simple Machines Forum, Typo3and phpBB when MD5 password hashes were compared. Instead, identity operator (===) should be used: 0e1234 === 0 will result in False.\n\nAnother example for the runtime settings vulnerability comes from failing to disable PHP execution (via engine configuration directive) for the directory where uploaded images are stored; leaving the default settings can result in execution of malicious PHP code embedded within the uploaded images. Also, leaving enabled the dynamic loading of PHP extensions (via enable_dl configuration directive) in a shared web hosting environment can lead to security issues.\n\nPossible Problems\n\nSecurity : Since it is open sourced, so all people can see the source code, if there are bugs in the source code, it can be used by people to explore the weakness of PHP\n\nNot suitable for large applications: Hard to maintain since it is not very modular.\n\nWeak type: Implicit conversion may surprise unwary programmers and lead to unexpected bugs. For example, the strings “1000” and “1e3” compare equal because they are implicitly cast to floating point numbers.\n\nDesign Specification\n\nReferences\n\nhttp://en.wikipedia.org/wiki/PHP\n\nhttp://www.php.net//manual/en/introduction.php\n\nhttp://en.wikipedia.org/wiki/PHP#Implementations\n\nhttp://www.php.net/manual/en/intro-whatcando.php\n\nhttp://en.wikipedia.org/wiki/PHP#Use\n\nhttp://en.wikipedia.org/wiki/Portal:Featured_content\n\nhttp://www.itbusinessedge.com/cm/blogs/mah/disadvantages-of-web-development-using-php/?cs=33397\n\nhttp://www.pixelstech.net/topic/25-What-are-advantages-and-disadvantages-of-PHP-\n\nhttp://wiki.answers.com/Q/What_are_the_advantages_and_disadvantages_of_PHP?#slide=1\n\nhttp://www.freeservers.com/WebHosting101/WhatIsPHP.html\n\nhttp://www.php.net//manual/en/history.php.php\n\nhttp://www.bluemoosetech.com/php-and-mysql.php?jid=11\n\nhttp://www.zend.com/en/company/company-overview\n\nhttp://in2.php.net/manual/en/language.operators.php\n\nhttp://en.wikipedia.org/wiki/Zend_Technologies\n\nPYTHON\n\nTechnical Background\n\nPython is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes codereadability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C. The language provides constructs intended to enable clear programs on both a small and large scale.\n\nPython supports multiple programming paradigms, including object-oriented, imperative and functional programming or proceduralstyles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.\n\nLike other dynamic languages, Python is often used as a scripting language, but is also used in a wide range of non-scripting contexts. Using third-party tools, such as Py2exe or Pyinstaller, Python code can be packaged into standalone executable programs. Python interpreters are available for many operating systems.\n\nCPython, the reference implementation of Python, is free and open source software and has a community-based development model, as do nearly all of its alternative implementations. CPython is managed by the non-profit Python Software Foundation.\n\nPython was conceived in the late 1980s and its implementation was started in December 1989by Guido van Rossum at CWI in the Netherlands as a successor to the ABC language (itself inspired by SETL) capable of exception handling and interfacing with the Amoeba operating system. Van Rossum is Python’s principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community,benevolent dictator for life (BDFL).\n\nPython 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for Unicode. With this release the development process was changed and became more transparent and community-backed.\n\nPython 3.0 (also called Python 3000 or py3k), a major, backwards-incompatible release, was released on 3 December 2008[29] after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.6 and 2.7.\n\nCompany Profile\n\nThe main Python implementation, named CPython, is written in C meeting the C89 standard. It compiles Python programs into intermediate bytecode, which is executed by the virtual machine. CPython is distributed with a large standard library written in a mixture of C and Python. It is available in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform.\n\nPyPy is a fast, compliant interpreter of Python 2.7. Its just-in-time compiler brings a significant speed improvement over CPython. A version taking advantage of multi-core processors using software transactional memory is being created.\n\nStackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.\n\nOther just-in-time compilers have been developed in the past, but are now unsupported:\n\nGoogle started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM and improving its multithreading ability to scale to thousands of cores. Later the project lost Google’s backing and its main developers. As of 1 February 2012, the modified interpreter was about 2 times faster than CPython.[citation needed]\n\nPsyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certaindata types and is faster than standard Python code.\n\nIn 2005, Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia N900 also supports Python with GTK widget libraries, with the feature that programs can be both written and run on the device itself.[citation needed]\n\nThere are several compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\nJython compiles into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the use of Java class library functions from the Python program.\n\nIronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime.\n\nThe RPython language can be compiled to C, Java bytecode, or Common Intermediate Language, and is used to build the PyPy interpreter of Python;\n\nPyjamas compiles Python to JavaScript;\n\nShed Skin compiles Python to C++;\n\nCython and Pyrex compile to C.\n\nA performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy ’13.\n\nSignificance and Purpose\n\nPython is used as a scripting language for web applications, e.g., via mod wsgi for the Apache web server. With Web Server Gateway Interface, a standard API has been developed to facilitate these applications. Web application frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask and Zope support developers in the design and maintenance of complex applications. Pyjamas and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as data mapper to a relational database. Twisted is a framework to program communications between computers, and is used for example by Dropbox.\n\nLibraries like NumPy, SciPy and Matplotlib allow Python to be used effectively in scientific computing, with specialized libraries such as BioPython and Astropy providing domain-specific functionality. Sage is a mathematical software with a “notebook” programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics,numerical mathematics, number theory, and calculus.\n\nPython has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, and 2D imaging programs likeGIMP, Inkscape, Scribus and Paint Shop Pro. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri is now promoting Python as the best choice for writing scripts in ArcGIS. It has also been used in several video games, and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.\n\nPython has also been used in artificial intelligence tasks. Thanks to being a scripting language with module architecture, syntax simplicity and rich text processing tools, Python is often used for natural language processing tasks.\n\nConceptual Development and Implementation\n\nPython’s development is conducted largely through the Python Enhancement Proposal (PEP) process. The PEP process is the primary mechanism for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. Outstanding PEPs are reviewed and commented upon by the Python community and by Van Rossum, the Python project’s BDFL.\n\nEnhancement of the language goes along with development of the CPython reference implementation. The mailing list python-dev is the primary forum for discussion about the language’s development; specific issues are discussed in the Roundup bug tracker maintained at python.org. Development takes place on a self-hosted source code repository running Mercurial.\n\nCPython’s public releases come in three types, distinguished by which part of the version number is incremented:\n\nBackwards-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.\n\nMajor or “feature” releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.\n\nBugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.\n\nA number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the BuildBot continuous integration system.\n\nThe community of Python developers has also contributed over 38,000 software modules (as of January 2014) to the Python Package Index (called pypi), the official repository of third-party libraries for Python.\n\nThe major academic conference on Python is named PyCon. There are special mentoring programmes like the Pyladies.\n\nQuality Attributes\n\nReliability\n\nPython uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\n\nPython allows programmers to define their own types using classes, which are most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowingmetaprogramming and reflection.\n\nPrior to version 3.0, Python had two kinds of classes: “old-style” and “new-style”. Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type).\n\nPerformance\n\nMost Python implementations (including CPython) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell.\n\nOther shells add capabilities beyond those in the basic interpreter, including IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.\n\nIn addition to standard desktop Python IDEs (integrated development environments), there are also browser-based IDEs, Sage (intended for developing science and math-related Python programs), and a browser-based IDE and hosting environment, PythonAnywhere.\n\nSecurity\n\nWeb programming innately involves programming for security. But programming for security does not require a siege mentality. As Bruce Schneier notes in Secrets and Lies(prices), attackers need find only one angle of attack; anyone who tries to secure systems, like programs, must secure everything. This is certainly true, but it means that the systems must be developed more intelligently.\n\nWhen one knowingly programs unsecurely, one holds the mindset that the threat, if it exists, will effect someone else. The attack will not happen here. Popular notions of secure programming are the opposite: Imagine every attack happening here. After all, just because your paranoid does not mean they are not after you.\n\nProgramming securely lies somewhere in between. One must maximise control over one’s sphere of influence while guarding against problems in one’s sphere of concern. The ensuing discussion considers in turn the sphere of a Python programmers influence, his/her sphere of concern, and one common programming concern about which Python programmers need not worry.\n\nPossible Problems\n\nPython isn’t the best for memory intensive tasks.\n\nPython is interpreted language & is slow compared to C/C++ or java.\n\nPython not a great choice for a high-graphic 3d game that takes up a lot of CPU.\n\nPython is evolving continuously, with constant evolution there is little substantial documentation available for the language.\n\nDesign Specification\n\nReferences\n\nhttp://en.wikipedia.org/wiki/Python_(programming_language)\n\nhttp://en.wikipedia.org/wiki/Python_Software_Foundation_License\n\nhttps://www.python.org/psf/records/board/history/\n\nhttps://www.google.com.ph/?gfe_rd=cr&ei=ccmmU8eRN9SBoAO18YKIAQ&gws_rd=ssl#q=python%20software%20foundation%20background\\\n\nhttps://www.python.org/psf/records/board/history/\n\nhttp://careerride.com/python-disadvantages.aspx\n\nhttp://programmers.stackexchange.com/questions/15468/what-are-the-drawbacks-of-python\n\nhttp://security.stackexchange.com/questions/15705/using-python-for-security\n\nhttps://www.python.org/news/security\n\nhttp://resources.infosecinstitute.com/python-for-web-app-security-pros/\n\nhttp://python.about.com/od/gettingstarted/ss/whatispython_3.htm\n\nhttp://python.about.com/od/cgiformswithpython/ss/ProgramSecurity.htm\n\n6. RUBY\n\nTechnical Background\n\nThe name “Ruby” originated during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language.Initially two names were proposed: “Coral” and “Ruby“. Matsumoto chose the latter in a later e-mail to Ishitsuka. Matsumoto later noted a factor in choosing the name “Ruby” – it was the birthstone of one of his colleagues. Ruby is a dynamic, reflective, object-oriented, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro “Matz” Matsumoto in Japan.\n\nAccording to its authors, Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, and Lisp. It supports multiple programming paradigms, including functional, object-oriented, and imperative. It also has a dynamic type system and automatic memory management.\n\nCompany Profile\n\nYukihiro Matsumoto Matsumoto Yukihiro?, a.k.a. Matz, born 14 April 1965) is a Japanese computer scientist and software programmer best known as the chief designer of the Ruby programming language and its reference implementation, Matz’s Ruby Interpreter (MRI).\n\nAs of 2011, Matsumoto is the Chief Architect of Ruby at Heroku, an online cloud platform-as-a-service in San Francisco. He is a fellow of Rakuten Institute of Technology, a research and development organisation in Rakuten Inc. In addition, he has recently been appointed to the role of technical advisor for VASILY, Inc. starting in June, 2014.\n\nMatsumoto’s name can be written using kanji, but is normally written using hiragana: Born in Osaka Prefecture, he was raised in Tottori Prefecture from the age of four. According to an interview conducted by Japan Inc., he was a self-taught programmer until the end of high school. He graduated with an information science degree from University of Tsukuba, where he was a member of Ikuo Nakata‘s research lab on programming languages and compilers.\n\nSignificance and Purpose\n\nRuby is used in typical scripting language applications such as text processing and “glue” or middleware programs. It’s suitable for small, ad-hoc scripting tasks that, in the past, may have been solved with Perl. Writing small programs with Ruby is as easy as importing the modulesyou need and writing an almost BASIC-like “sequence of events” type of program.\n\nLike Perl, Ruby also has first-class regular expressions, which makes text processing scripts a snap to write. The flexible syntax also aides in small scripts. With some object-oriented languages, you can get bogged down with verbose and bulky code, but Ruby leaves you free to simply worry about your script.\n\nRuby is also suitable for larger software systems. It’s most successful application is in the Ruby on Rails web framework, software which has five major subsystems, numerous minor pieces and a plethora of support scripts, database backends and libraries.\n\nTo aid the creation of larger systems, Ruby offers several layers of compartmentalization, including the class and module. Its lack of superfluous features allows programmers to write and use large software systems without any surprises.\n\nConceptual Development and Implementation\n\nAs of 2010, there are a number of alternative implementations of Ruby, including JRuby, Rubinius, MagLev, IronRuby, MacRuby (and its iOS counterpart, RubyMotion), mruby,HotRuby, Topaz and Opal. Each takes a different approach, with IronRuby, JRuby, MacRuby and Rubinius providing just-in-time compilation and MacRuby and mruby also providing ahead-of-time compilation.\n\nRuby 1.9 has two major alternate implementations:\n\nJRuby, a Java implementation that runs on the Java virtual machine,\n\nRubinius, a C++ bytecode virtual machine that uses LLVM to compile to machine code at runtime. The bytecode compiler and most core classes are written in pure Ruby.\n\nOther Ruby implementations include:\n\nMagLev, a Smalltalk implementation that runs on GemTalk Systems‘ GemStone/S VM\n\nRGSS, or Ruby Game Scripting System, an implementation that is used by the RPG Maker series of software for game design and modification of the RPG Maker engine.\n\nOther now defunct Ruby implementations were:\n\nMacRuby, an OS X implementation on the Objective-C runtime\n\nCardinal, an implementation for the Parrot virtual machine\n\nIronRuby an implementation on the .NET Framework\n\nRuby can also run on embedded system by mruby, developing in GitHub.\n\nThe maturity of Ruby implementations tends to be measured by their ability to run the Ruby on Rails (Rails) framework, because it is complex to implement and uses many Ruby-specific features. The point when a particular implementation achieves this goal is called “the Rails singularity”. The reference implementation (MRI), JRuby, and Rubinius[48] are all able to run Rails unmodified in a production environment. IronRuby is starting to be able to run Rails test cases, but is still far from being production-ready.\n\nQuality Attributes\n\nReliability\n\nRuby is object-oriented: every value is an object, including classes and instances of types that many other languages designate as primitives (such as integers, booleans, and “null“). Variables always hold references to objects. Every function is a method and methods are always called on an object. Methods defined at the top level scope become members of the Object class. Since this class is an ancestor of every other class, such methods can be called on any object. They are also visible in all scopes, effectively serving as “global” procedures. Ruby supports inheritance with dynamic dispatch, mixins and singleton methods (belonging to, and defined for, a single instance rather than being defined on the class). Though Ruby does not support multiple inheritance, classes can import modules as mixins.\n\nRuby has been described as a multi-paradigm programming language: it allows procedural programming (defining functions/variables outside classes makes them part of the root, ‘self’ Object), with object orientation (everything is an object) or functional programming (it has anonymous functions, closures, and continuations; statements all have values, and functions return the last evaluation). It has support for introspection, reflection and metaprogramming, as well as support for interpreter-based[44] threads. Ruby features dynamic typing, and supports parametric polymorphism. According to the Ruby FAQ,[45] “If you like Perl, you will like Ruby and be right at home with its syntax. If you like Smalltalk, you will like Ruby and be right at home with its semantics. If you like Python, you may or may not be put off by the huge difference in design philosophy between Python and Ruby/Perl.”\n\nPerformance\n\nThe syntax of Ruby is broadly similar to that of Perl and Python. Class and method definitions are signaled by keywords. In contrast to Perl, variables are not obligatorily prefixed with a sigil. When used, the sigil changes the semantics of scope of the variable. One difference from C and Perl is that keywords are typically used to define logical code blocks, without braces (i.e., pair of { and }). For practical purposes there is no distinction between expressions and statements.[46] Line breaks are significant and taken as the end of a statement; a semicolon may be equivalently used. Unlike Python, indentation is not significant. One of the differences of Ruby compared to Python and Perl is that Ruby keeps all of its instance variables completely private to the class and only exposes them through accessory methods (attr_writer, attr_reader, etc.). Unlike the “getter” and “setter” methods of other languages like C++ or Java, accessory methods in Ruby can be created with a single line of code via meta programming; however, accessory methods can also be created in the traditional fashion of C++ and Java. As invocation of these methods does not require the use of parentheses, it is trivial to change an instance variable into a full function, without modifying a single line of code or having to do any refactoring achieving similar functionality to C# and VB.NET property members. Python’s property descriptors are similar, but come with a tradeoff in the development process. If one begins in Python by using a publicly exposed instance variable, and later changes the implementation to use a private instance variable exposed through a property descriptor, code internal to the class may need to be adjusted to use the private variable rather than the public property. Ruby’s design forces all instance variables to be private, but also provides a simple way to declare set and get methods. This is in keeping with the idea that in Ruby, one never directly accesses the internal members of a class from outside of it; rather, one passes a message to the class and receives a response.\n\nPossible Problems\n\nRuby lacks information resources\n\nA search on Barnes & Noble, or Amazon reveals about 50 or so books on Ruby programming. But, that is barely a drop in the bucket compared to more than 400 books written about C#. These numbers certainly don’t inspire a lot of confidence in Ruby as a broadly accepted programming language in the industry at large. Web searches for available online resources also reflect this tremendous disparity. Sure, the Ruby zealots support the few websites and respond to requests for assistance. But, there are a greater number of C# forums with greater numbers of registered members who frequently participate and provide solutions to questions. Additionally, you won’t find too many universities or community colleges offering courses in Ruby programming. If Ruby is so good then why are there such limited resources? The answer is because there simply isn’t the business demand, or other compelling reasons for adoption.\n\nRuby is not a high demand skill among employers.\n\nTake a look at any of the technical job sites such as Dice, Monster, etc. and you will not find a plethora of jobs asking for Ruby programming skills. For example, of the approximately 16,500 software testing jobs on Dice only 65 contain the keyword Ruby as compared to 1,668 job listings containing the keyword C#. That means there are 25 times more employers desiring C# as compared to Ruby. IT Jobs Watch in the UK has an interesting site with lots of statistics relative to software testing positions in the UK. Looking at software testing jobs C# is listed in the top 5 desired programming languages. (Ruby doesn’t even make the top 20 list anywhere on this site.) The job trends on Indeed provides a visual perspective comparing jobs with C#, Ruby, Perl, and VB.NET keywords.\n\nRuby has not been widely adopted in application development.\n\nSo, you may ask why this is a weakness for testers writing test automation? The simple fact is that if the development team is programming in say C/C++ or Java, and the test automation is in Ruby you probably won’t get a lot of support from the development team to help reviewing or debugging test automation. Also, it is very likely the developers may not want to install the Ruby interpreter on their Windows machine to use test automation to reproduce a defect, and instead ask for the manual steps. The test libraries the development team creates will require porting to Ruby which increases the cost and effort. Since many developers are familiar with at least the basic syntax of C/C++ and Java it is easier for them to pick up C# syntax and understand automated test code.\n\nDesign Specification\n\nReferences\n\nhttps://www.ruby-lang.org/en/\n\nhttp://ruby.about.com/od/beginningruby/a/WhatIsRuby.htm\n\nhttp://en.wikipedia.org/wiki/Ruby_(programming_language)#Features\n\nhttp://en.wikipedia.org/wiki/Ruby_(programming_language)#Implementations\n\nhttp://en.wikipedia.org/wiki/Yukihiro_Matsumoto\n\nhttp://en.wikipedia.org/wiki/Ruby_(programming_language)#Differences_from_other_languages\n\nhttp://programmers.stackexchange.com/questions/230954/advantages-and-disadvantages-of-php-ruby\n\nhttp://blogs.msdn.com/b/imtesty/archive/2006/06/08/621755.aspx\n\nhttp://books.google.com.ph/books?id=jcUbTcr5XWwC&printsec=frontcover&dq=safety+usage+of+Ruby+programming+language&hl=en&sa=X&ei=9MOnU_HuN4HdoAT_m4KIDA&ved=0CCcQ6AEwAA#v=onepage&q=safety%20usage%20of%20Ruby%20programming%20language&f=false\n\nhttp://books.google.com.ph/books?id=OBhAuww-OokC&printsec=frontcover&dq=safety+usage+of+Ruby+programming+language&hl=en&sa=X&ei=9MOnU_HuN4HdoAT_m4KIDA&ved=0CDMQ6AEwAg#v=onepage&q&f=false\n\nhttps://www.udemy.com/blog/ruby-thread/\n\nhttp://www.skilledup.com/learn/programming/4-reasons-learn-ruby-first-programming-language/\n\nhttp://www.leonardteo.com/2012/07/ruby-on-rails-vs-php-the-good-the-bad/\n\nhttp://www.sitepoint.com/php-vs-ruby-whats-the-point/\n\nhttp://najafali.com/php-is-better-than-ruby.html\n\nhttp://tomharrisonjr.com/2011/03/why-ruby-is-better-than-php-and-other-truisms/\n\nhttp://themeforest.net/forums/thread/is-ruby-better-than-php/36980\n\n7. JAVASCRIPT\n\nTechnical Background\n\nJavaScript (JS) is a dynamic computer programming language. It is most commonly used as part of web browsers, whose implementations allow client-side scripts to interact with the user, control the browser, communicate asynchronously, and alter the document content that is displayed. It is also being used in server-side network programming (with Node.js), game development and the creation of desktop and mobile applications.\n\nJavaScript is a prototype-based scripting language with dynamic typing and has first-class functions. Its syntax was influenced by C. JavaScript copies many names and naming conventions from Java, but the two languages are otherwise unrelated and have very different semantics. The key design principles within JavaScript are taken from the Self and Scheme programming languages. It is a multi-paradigm language, supporting object-oriented, imperative, and functional programming styles. The application of JavaScript in use outside of web pages—for example, in PDF documents, site-specific browsers, and desktop widgets—is also significant. Newer and faster JavaScript VMs and platforms built upon them (notably Node.js) have also increased the popularity of JavaScript for server-side web applications. On the client side, JavaScript was traditionally implemented as an interpreted language but just-in-time compilation is now performed by recent (post-2012) browsers. JavaScript was formalized in the ECMAScript language standard and is primarily used as part of a web browser (client-side JavaScript). This enables programmatic access to objects within a host environment.\n\nCompany Background\n\nNetscape Communications (formerly known as Netscape Communications Corporation and commonly known as Netscape) is a US computer services company, best known for Netscape Navigator, its web browser. When it was an independent company, its headquarters were in Mountain View, California. Netscape’s web browser was once dominant in terms of usage share, but lost most of that share to Internet Explorer during the first browser war. The usage share of Netscape had fallen from over 90 percent in the mid-1990s to less than one percent by the end of 2006.\n\nNetscape is credited with developing the Secure Sockets Layer Protocol (SSL) for securing online communication, which is still widely used, as well as JavaScript, the most widely used language for client-side scripting of web pages.\n\nNetscape stock traded from 1995 until 1999 when it was acquired by AOL in a pooling-of-interests transaction ultimately worth US$10 billion. Shortly before its acquisition by AOL, Netscape released the source code for its browser and created the Mozilla Organization to coordinate future development of its product. The Mozilla Organization rewrote the entire browser’s source code based on the Gecko rendering engine; all future Netscape releases were based on this rewritten code. The Gecko engine would later be used to power the Mozilla Foundation’s Firefox browser.\n\nUnder AOL, Netscape’s browser development continued until December 2007, when Tom Drapeau, director of AOL’s Netscape Brand, announced that the company would stop supporting Netscape software products as of February 1, 2008. The Netscape brand is still used, as of 2013, by AOL to market a discount Internet service provider.\n\nSignificance and Purpose\n\nJavaScript also allows your page to be interactive in other ways that do not involve forms at all. You can add animations into the page which either attract attention to a specific part of the page or which make the page easier to use. You can provide responses within the web page to various actions that your visitor takes so as to avoid the need to load new web pages to respond. You can even have the JavaScript load new images, objects, or scripts into the web page without needing to reload the entire page. There is even a way for JavaScript to pass requests back to the server and handle responses from the server without the need for loading new pages.\n\nIncorporating JavaScript into a web page allows you to improve your visitor’s experience of the web page by converting it from a static page into one that can interact with them. One important thing to remember though is that not everyone visiting your page will have JavaScript and so your page will still need to work for those who don’t have JavaScript. You use JavaScript to make your page work better for those who have it.\n\nConceptual Development and Implementations\n\nModules\n\nHow many of you are working with an application that has JavaScript that looks like this just sitting in a file (notice I didn’t say embedded in your html files, there is no good excuse for that):\n\n?\n\nvar someSharedValue = 10;var myFunction = function(){ //do something }var anotherImportantFunction = function() { //do more stuff }\n\nIf you’ve made it to this point in the post, then most likely you are dealing with (or creating) code that looks like this. I’m not judging you, I wrote code like that for a really long time. The problems here are many, but the one that we are going to focus on is the pollution of the global namespace. When writing code like this, you are just shoving all of these methods and variables into the global namespace. We need some way to keep this kind of data out of the global namespace, and the technique we are going to use here is the module pattern. There are different forms that modules can take, but I’m going to start off with the easiest method that you can start using today, an IIFE (Immediately Invoked Function Expression).\n\nIt is a big name, but the implementation is very simple:\n\n?\n\n(function(){//do some work})();\n\nIf you haven’t used an IIFE before this might look at bit weird at first. There are a lot of parentheses going on around here! Basically we have an anonymous function with a set of parentheses following it which cause the function to be immediately invoked. So we are creating the function, then immediately calling it. Hence the “immediately invoked function” part of the name. The “expression” part of IIFE comes from the fact that we need to turn this into an expression and not a statement, since a function statement must have a name. We do this by adding the extra set of parentheses around the outside. This also gives us an easy way to spot IIFE’s when looking through our code.\n\nNow that we know how to implement it, let’s talk about why we do this. In JavaScript all we have to work with for scoping is functions, and so if we want to create scope, we use a function. By executing code inside of the IIFE we are scoping all variables and functions inside of the IIFE and so we aren’t polluting the global namespace. The only problem is that all variables we create are now scoped inside of the function, so if we want to access them outside of the global scope, we need to get them into the global namespace, or at least into something that is in the global namespace.\n\nOne thing we can do is to use the window object and assign any functions or values to this object, which allows us to call these methods externally. In order to guarantee that nothing messes with the window variable, we can pass the window object as a parameter to our IIFE. We can do the same thing with references to libraries or even the value ‘undefined’. Our IIFE ends up looking like this:\n\n?\n\n(function(window, $, undefined){//do some work})(window, jQuery);\n\nAs you can see, we are passing in the window and jQuery variables (the jQuery $ variable is just an alias for the ‘jQuery’ variable, and we use it here in case another library has redefined the $ variable), but then we have three parameters going into the method. The idea is that since we aren’t passing a third parameter, it ends up being undefined, so we get a variable called ‘undefined’ local to the method that is guaranteed to actually have the value ‘undefined’, in case another piece of JavaScript modified it. Notice that we could call any of these values within the function without passing them in, this works because functions in JavaScript form closures where they “close over” the outer scope that they reside in. This topic can be an entire post, and I have written one which explains closures in terms of C#, but the concepts are very similar.\n\nNow we have a a method which is executed immediately, has a much safer execution context containing valid window, $, and undefined variables (it is still possible that something could have reassigned one of these variables before we hit this script, but it is much less likely). We are in a pretty good place, having saved our code from becoming a bunch of clutter in the global namespaces and reducing the potential for collisions with other JavaScript running in our application.\n\nAt this point anything we want to export from the module we are just assigning direction to the window object. But often I don’t want to just assign everything in my module directly to the window object, I want to have some way of grouping functionality. In most languages we call these containers namespaces, and we can emulate them in JavaScript using objects.\n\nNamespaces\n\nIf we wanted to declare a namespace, and assign a function to it, we could do something like this:\n\n?\n\nwindow.myApp = window.myApp || {};window.myApp.someFunction = function(){//so some work};\n\nWe are merely creating an object in the global namespace by checking to see if the object already exists, and if so we use it, otherwise we create a new object using the object literal notation: {}. At this point we could just start building up the namespace by assigning functions like we are doing above, but we don’t want our code just hanging out there, we want to combine our namespaces with our modules, like this:\n\n?\n\n(function(myApp, $, undefined){//do some work}(window.myApp = window.myApp || {}, jQuery));\n\nThis could also be written like this:\n\n?\n\nwindow.myApp = (function(myApp, $, undefined){//do some workreturn myApp;})(window.myApp || {}, jQuery);\n\nNow, instead of passing in window to our module, we are passing in a namespace object that is hanging off the window object. The reason we assign it using || is so that if we use this namespace in multiple places we will end up using the same object over and over instead of creating a new object each time which would clear out our namespace. Many libraries include namespace functions which will create namespaces for you, or you can use something like namespace.js which allows you to easily create nested namespaces. I generally try not to create deeply nested namespaces, since in JavaScript you have to specify the namespace on every item that is in the namespace. So if you created a “doSomething” method in the MyApp.MyModule.MySubModule namespace, you would either have to reference it like:\n\n?\n\nMyApp.MyModule.MySubModule.doSomething();\n\nevery time you called it, or you would have to alias the namespace inside of your module by doing:\n\n?\n\nvar MySubModule = MyApp.MyModule.MySubModule;\n\nThis way you would only need to say “MySubModule.doSomething()”. It just makes things more complicated, and unless you have a ton of code, it can be unnecessary.\n\nRevealing Module Pattern\n\nThere is another pattern that you’ll often see being used to create modules, and it is called the revealing module pattern. This pattern is just a different approach to creating a module, letting you define everything privately inside of the module, then expose what you want to expose by returning an object which has references to everything you want to expose publicly. Let’s take a look at how you would define this:\n\n?\n\nvar myModule = (function($, undefined){var myVar1 = ”,myVar2 = ”;var someFunction = function(){\n\nreturn myVar1 + ” ” + myVar2;\n\n};\n\nreturn {\n\ngetMyVar1: function() { return myVar1; }, //myVar1 public getter\n\nsetMyVar1: function(val) { myVar1 = val; }, //myVar1 public setter\n\nsomeFunction: someFunction //some function made public\n\n}\n\n})(jQuery);\n\nAs you can see, we are creating a module in one pass which makes it more simple, and then we are returning an object which exposes the pieces of our module that we are interested in making public, while allowing us to keep our private variables hidden. The variable “myModule” is going to contain the two publicly exposed items, but as you can see, “someFunction” uses “myVar2″, but it is not externally accessible.\n\nCreating Constructors (Classes)\n\nIn JavaScript we don’t have classes, but we can create objects, and we do this by creating a constructor function. Let’s say that we wanted to create a bunch of Person objects, and we wanted to pass in a first name, last name, and age. We could define our constructor like this (we would most likely put this inside of a module):\n\n?\n\nvar Person = function(firstName, lastName, age){this.firstName = firstName;this.lastName = lastName;this.age = age;}\n\nPerson.prototype.fullName = function(){\n\nreturn this.firstName + ” ” + this.lastName;\n\n};\n\nLooking at just the first function for now, you’ll see that we are creating a Person constructor. This is what we will use to build new person objects. It takes three parameters and it assigns them all to the execution context from the current invocation of the constructor. This is how we get public instance variables. We could create private variables here too, by assigning the constructor parameters to local variables inside of the constructor, but the problem becomes that public methods can’t access those variables, and so you’re probably better off making them all public. You can create methods inside of the constructor which are publicly accessible, and can access the private variables, but they create a whole different set of problems.\n\nNext you’ll see that we accessing the “prototype” of the Person constructor. The prototype of a function is an object that all instances of a function will go to when trying to resolve fields or functions called on the instance. So what we are doing here is creating a single instance of a “fullName” method that all instances of “Person” can access without having a ton of instances of “fullName” hanging around. We could have defined “fullName” inside of the constructor as “this.fullName = function() { …” but then every person would have another copy of the fullName method, which is not what we want.\n\nIf we wanted to start creating people, we could do so like this:\n\n?\n\nvar person = new Person(“Justin”, “Etheredge”);alert(person.fullName());\n\nIf we wanted to, we could also create another constructor that inherits from the Person constructor. Let’s say we wanted to create a Spy constructor, that would build an instance of Spy, but would only declare a single method:\n\n?\n\nvar Spy = function(firstName, lastName, age){this.firstName = firstName;this.lastName = lastName;this.age = age;};\n\nSpy.prototype = new Person();\n\nSpy.prototype.spy = function(){\n\nalert(this.fullName() + ” is spying.”);\n\n}\n\nvar mySpy = new Spy(“Mr.”, “Spy”, 50);\n\nmySpy.spy();\n\nAs you can see, we are creating a constructor that looks just like the person, but then we are settings its prototype to an instance of the Person constructor. Now we can add methods, and when we create an instance of Spy, it can access methods in the Person constructor, and the methods can access variables which were assigned in the Spy instance! It is a bit convoluted, but once you get past the details, it is pretty elegant.\n\nWrapping It Up\n\nAt this point, if you have learned something, then awesome! But unfortunately we really haven’t touched on any “modern” JavaScript development. All of the topics that we have gone over in this blog post are relatively old, and have been in fairly wide use for at least the last few years. But now hopefully you are at least heading down the right road. Now that you are splitting up your code into modules and using lots of different files (you should be!), the next step for you should be to start researching JavaScript combination and minification. If you are a Rails developer, and are using Rails 3, then you get all of this for free in the asset pipeline. If you’re using .NET then you can look at the framework that I started, SquishIt. If you’re using ASP.NET MVC 4, then it also has some built in combination and minification support.\n\nQuality Attributes\n\nReliability\n\nEven with all these improvements in recent times, there is still a catch: JavaScript is flaky. Not the language itself but the environment it is implemented in. You don’t know what computer is on the receiving end of your web page, you don’t know how busy the computer is with other things and you don’t know if some other JavaScript open in another tab of the browser is grinding things down to a halt. Until browsers in general begin having different processing resources for different tabs and windows (also known as threads), this will always remain an issue. Multiple threading"
    }
}