{
    "id": "dbpedia_8299_0",
    "rank": 76,
    "data": {
        "url": "https://slideplayer.com/slide/5106785/",
        "read_more_link": "",
        "language": "en",
        "title": "Page 1 Ruby by Tim Hanson & Mamadou Seck. Page 2 Philosophy \"I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming,",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://slideplayer.com/static/blue_design/img/logo_slideplayer.png",
            "https://slideplayer.com/static/blue_design/img/slide-loader4.gif",
            "https://images.slideplayer.com/16/5106785/slides/slide_1.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_2.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_3.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_4.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_5.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_6.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_7.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_8.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_9.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_10.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_11.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_12.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_13.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_14.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_15.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_16.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_17.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_18.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_19.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_20.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_21.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_22.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_23.jpg",
            "https://images.slideplayer.com/16/5106785/slides/slide_24.jpg",
            "https://slideplayer.com/2/684476/big_thumb.jpg",
            "https://slideplayer.com/12/3520661/big_thumb.jpg",
            "https://slideplayer.com/14/4228852/big_thumb.jpg",
            "https://slideplayer.com/15/4574024/big_thumb.jpg",
            "https://slideplayer.com/16/5059175/big_thumb.jpg",
            "https://slideplayer.com/16/5263447/big_thumb.jpg",
            "https://slideplayer.com/16/5265492/big_thumb.jpg",
            "https://slideplayer.com/17/5266316/big_thumb.jpg",
            "https://slideplayer.com/17/5323064/big_thumb.jpg",
            "https://slideplayer.com/17/5368168/big_thumb.jpg",
            "https://slideplayer.com/20/6052358/big_thumb.jpg",
            "https://slideplayer.com/20/6232247/big_thumb.jpg",
            "https://slideplayer.com/23/6540811/big_thumb.jpg",
            "https://slideplayer.com/24/6997301/big_thumb.jpg",
            "https://slideplayer.com/24/7337876/big_thumb.jpg",
            "https://slideplayer.com/25/7689071/big_thumb.jpg",
            "https://slideplayer.com/25/7689818/big_thumb.jpg",
            "https://slideplayer.com/25/7762551/big_thumb.jpg",
            "https://slideplayer.com/25/7798377/big_thumb.jpg",
            "https://slideplayer.com/25/7799409/big_thumb.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Page 1 Ruby by Tim Hanson & Mamadou Seck. Page 2 Philosophy \"I hope to see Ruby help every programmer in the world to be productive",
            "and to enjoy programming",
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Page 3 History Created in Japan in the mid-1990s Christmas 1996: Version 1 released 2000: First English book printed 2005: Ruby on Rails popularized it 2008: Ruby version released 2010: Ruby version released (not fully compatible with Rails 3.0)",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://slideplayer.com/slide/5106785/",
        "text": "Presentation on theme: \"Page 1 Ruby by Tim Hanson & Mamadou Seck. Page 2 Philosophy \"I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming,\"— Presentation transcript:\n\n1 Page 1 Ruby by Tim Hanson & Mamadou Seck\n\n2 Page 2 Philosophy \"I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.” - Yukihiro « Matz » Matsumoto\n\n3 Page 3 History Created in Japan in the mid-1990s Christmas 1996: Version 1 released 2000: First English book printed 2005: Ruby on Rails popularized it 2008: Ruby version 1.8.7 released 2010: Ruby version 1.9.2 released (not fully compatible with Rails 3.0)\n\n4 Page 4 Overview Influenced by Perl, Smalltalk, Eiffel, and Lisp Supports Multiple Programming Paradigms Functional Object-Oriented Imperative Reflective Dynamic typing Automatic Memory Management Interactive Ruby Shell Centralized Package Management via RubyGems\n\n5 Page 5 TIOBE Index\n\n6 Page 6 Multiple Implementations  Ruby 1.8.7 MRI – Matz’ Ruby Interpreter Written in C Single pass interpreted language Slow Compatible with Rails 3  Just-in-time Compilation implementations YARV, JRuby, Rubinius, Iron Ruby, HotRuby MacRuby (ahead-of -time compilation too)  Ruby 1.9.2 Based on YARV Unicode support Changes broke many unmaintained gems Rails 3 not fully supported\n\n7 Page 7 Performance\n\n8 Page 8 Command Line Utilities  ri – ruby index works like man in linux  irb – interactive ruby shell  gem – RubyGem package manager works like apt-get or yum in linux but installs ruby packages (gems) likes rails  ruby – runs ruby scripts ruby script.rb shebang line : #! /usr/bin env ruby\n\n9 Page 9 Identifiers and Scope  Identifiers  Can’t include white space  Can’t include nonprinting characters  Case sensitive  First character denotes scope $ - global variables @ - instance variables @@ - class variables Lower case letter or underscore - local variables Upper case letter – constant Capital letter – constant (convention – all caps) Capital letter – class (convention – CamelCase) Method ending with: ? - return boolean value (convention) ! – use with caution (convention for mutators) = - can be invoxed using assignment syntax\n\n10 Page 10 Data Types  Numeric Integer – automatically converts between subtypes Fixnum Bignum – arbitrary precision Float Digit has to appear on both sides of decimal point i.e. can’t write just.1 BigDecimal – arbitrary precision Complex Rational  No primitives – everything is an object\n\n11 Page 11 Data Types Continued  Symbols prefixed by : Lightweight strings  Strings Many methods for String processing Can be single quoted or double quoted Can use any non-alphanumeric delimiter %!Also a valid string!  Hashes Key – Value pairs like Dictionaries in Python  Arrays Untyped Mutable Elements don’t have to be from same class 0 is the first element and -1 is the last element Methods size and length both return size Self expanding Nil extended if assign element beyond the end\n\n12 Page 12 Assignment  Parallel assignment  No pre or post increment or decrement operators  Conditional Assignment  x || = “default” #assigned if x is nil or false  x && = “other” #assigned if x is NOT nil or false  Self Assignment Operators x += 2 x - = 2 x *= 2 x /= 2 x **= 2\n\n13 Page 13 Flow Control  If statement Keywords if, then, elseif, else, end Parentheses optional Multiple forms  Ternary Operator\n\n14 Page 14 Loops  Many Different Ways to Write Loops\n\n15 Page 15 Loops Continued  One line loops use braces\n\n16 Page 16 Loops Continued  More Ways to Do the Same Loop\n\n17 Page 17 Loops Continued  Even More Ways\n\n18 Page 18 Example Programs\n\n19 Page 19 Readability  Pros  Identifier naming conventions denote scope  Methods ending in ? are boolean  Methods ending in ! are dangerous  Braces used for one liners  Begin and End used for blocks  Doesn’t require semicolons  Cons  Many different ways to do the same thing  Precedence in arguments to function calls can be confusing because () are optional  There are no keywords or reserved words - You can override everything\n\n20 Page 20 Writability  Pros  Many ways to do the same thing  Dynamic Typing  Can write really compact code  Functional Programming is powerful  Debugging is easy with interpreter  Extensive Libraries Available  Cons  None\n\n21 Page 21 Reliability  Pros  Supports Exception Handling  Interpreter allows for rapid testing  Cons  Dynamically Typed  Allows Aliasing  Many third party libraries are not maintained  Multiple language implementations that do not work exactly the same\n\n22 Page 22 Cost  Pros  Open Source  Free Compilers  Rapid Development Cycle  Netbeans adds IDE support  Feature multiplicity makes learning basics of Ruby easy for new developers  Cons  Mastering all of Ruby takes a long time  Slow Execution  you might have to rewrite your code in a new language at some point\n\n23 Page 23 Who uses Ruby? Amazon Basecamp BBC CISCO EA Funnyordie.com IBM JP Morgan Lucent NASA Oakley Penny-arcade.com Pitchforkmedia.com Oracle Scribd.com Siemens Twitter Yahoo!"
    }
}