{
    "id": "dbpedia_4954_3",
    "rank": 32,
    "data": {
        "url": "https://www.w3.org/TR/vc-data-model/",
        "read_more_link": "",
        "language": "en",
        "title": "Verifiable Credentials Data Model v1.1",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.w3.org/StyleSheets/TR/2021/logos/W3C",
            "https://www.w3.org/TR/vc-data-model/diagrams/ecosystem.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/claim.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/claim-example.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/claim-extended.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/credential.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/credential-graph.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/presentation.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/presentation-graph.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/claim-example-2.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/ecosystemdetail.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/zkp-cred-pres.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/privacy-spectrum.svg",
            "https://www.w3.org/TR/vc-data-model/diagrams/subject-ne-holder.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-03-03T00:00:00",
        "summary": "",
        "meta_description": "Credentials are a part of our daily lives; driver's licenses are used to\nassert that we are capable of operating a motor vehicle, university degrees\ncan be used to assert our level of education, and government-issued passports\nenable us to travel between countries. This specification provides a mechanism\nto express these sorts of credentials on the Web in a way that is\ncryptographically secure, privacy respecting, and machine-verifiable.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://www.w3.org/TR/vc-data-model/",
        "text": "1. Introduction\n\nThis section is non-normative.\n\nCredentials are a part of our daily lives; driver's licenses are used to assert that we are capable of operating a motor vehicle, university degrees can be used to assert our level of education, and government-issued passports enable us to travel between countries. These credentials provide benefits to us when used in the physical world, but their use on the Web continues to be elusive.\n\nCurrently it is difficult to express education qualifications, healthcare data, financial account details, and other sorts of third-party verified machine-readable personal information on the Web. The difficulty of expressing digital credentials on the Web makes it challenging to receive the same benefits through the Web that physical credentials provide us in the physical world.\n\nThis specification provides a standard way to express credentials on the Web in a way that is cryptographically secure, privacy respecting, and machine-verifiable.\n\nFor those unfamiliar with the concepts related to verifiable credentials, the following sections provide an overview of:\n\nThe components that constitute a verifiable credential\n\nThe components that constitute a verifiable presentation\n\nAn ecosystem where verifiable credentials and verifiable presentations are expected to be useful\n\nThe use cases and requirements that informed this specification.\n\n1.1 What is a Verifiable Credential?\n\nThis section is non-normative.\n\nIn the physical world, a credential might consist of:\n\nInformation related to identifying the subject of the credential (for example, a photo, name, or identification number)\n\nInformation related to the issuing authority (for example, a city government, national agency, or certification body)\n\nInformation related to the type of credential this is (for example, a Dutch passport, an American driving license, or a health insurance card)\n\nInformation related to specific attributes or properties being asserted by the issuing authority about the subject (for example, nationality, the classes of vehicle entitled to drive, or date of birth)\n\nEvidence related to how the credential was derived\n\nInformation related to constraints on the credential (for example, expiration date, or terms of use).\n\nA verifiable credential can represent all of the same information that a physical credential represents. The addition of technologies, such as digital signatures, makes verifiable credentials more tamper-evident and more trustworthy than their physical counterparts.\n\nHolders of verifiable credentials can generate verifiable presentations and then share these verifiable presentations with verifiers to prove they possess verifiable credentials with certain characteristics.\n\nBoth verifiable credentials and verifiable presentations can be transmitted rapidly, making them more convenient than their physical counterparts when trying to establish trust at a distance.\n\nWhile this specification attempts to improve the ease of expressing digital credentials, it also attempts to balance this goal with a number of privacy-preserving goals. The persistence of digital information, and the ease with which disparate sources of digital data can be collected and correlated, comprise a privacy concern that the use of verifiable and easily machine-readable credentials threatens to make worse. This document outlines and attempts to address a number of these issues in Section 7. Privacy Considerations. Examples of how to use this data model using privacy-enhancing technologies, such as zero-knowledge proofs, are also provided throughout this document.\n\nThe word \"verifiable\" in the terms verifiable credential and verifiable presentation refers to the characteristic of a credential or presentation as being able to be verified by a verifier, as defined in this document. Verifiability of a credential does not imply that the truth of claims encoded therein can be evaluated; however, the issuer can include values in the evidence property to help the verifier apply their business logic to determine whether the claims have sufficient veracity for their needs.\n\n1.2 Ecosystem Overview\n\nThis section is non-normative.\n\nThis section describes the roles of the core actors and the relationships between them in an ecosystem where verifiable credentials are expected to be useful. A role is an abstraction that might be implemented in many different ways. The separation of roles suggests likely interfaces and protocols for standardization. The following roles are introduced in this specification:\n\nholder\n\nA role an entity might perform by possessing one or more verifiable credentials and generating verifiable presentations from them. Example holders include students, employees, and customers.\n\nissuer\n\nA role an entity performs by asserting claims about one or more subjects, creating a verifiable credential from these claims, and transmitting the verifiable credential to a holder. Example issuers include corporations, non-profit organizations, trade associations, governments, and individuals.\n\nsubject\n\nAn entity about which claims are made. Example subjects include human beings, animals, and things. In many cases the holder of a verifiable credential is the subject, but in certain cases it is not. For example, a parent (the holder) might hold the verifiable credentials of a child (the subject), or a pet owner (the holder) might hold the verifiable credentials of their pet (the subject). For more information about these special cases, see Appendix C. Subject-Holder Relationships.\n\nverifier\n\nA role an entity performs by receiving one or more verifiable credentials, optionally inside a verifiable presentation, for processing. Example verifiers include employers, security personnel, and websites.\n\nverifiable data registry\n\nA role a system might perform by mediating the creation and verification of identifiers, keys, and other relevant data, such as verifiable credential schemas, revocation registries, issuer public keys, and so on, which might be required to use verifiable credentials. Some configurations might require correlatable identifiers for subjects. Example verifiable data registries include trusted databases, decentralized databases, government ID databases, and distributed ledgers. Often there is more than one type of verifiable data registry utilized in an ecosystem.\n\nNote\n\nFigure 1 above provides an example ecosystem in which to ground the rest of the concepts in this specification. Other ecosystems exist, such as protected environments or proprietary systems, where verifiable credentials also provide benefit.\n\n1.3 Use Cases and Requirements\n\nThis section is non-normative.\n\nThe Verifiable Credentials Use Cases document [VC-USE-CASES] outlines a number of key topics that readers might find useful, including:\n\nA more thorough explanation of the roles introduced above\n\nThe needs identified in market verticals, such as education, finance, healthcare, retail, professional licensing, and government\n\nCommon tasks performed by the roles in the ecosystem, as well as their associated requirements\n\nCommon sequences and flows identified by the Working Group.\n\nAs a result of documenting and analyzing the use cases document, the following desirable ecosystem characteristics were identified for this specification:\n\nCredentials represent statements made by an issuer.\n\nVerifiable credentials represent statements made by an issuer in a tamper-evident and privacy-respecting manner.\n\nHolders assemble collections of credentials and/or verifiable credentials from different issuers into a single artifact, a presentation.\n\nHolders transform presentations into verifiable presentations to render them tamper-evident.\n\nIssuers can issue verifiable credentials about any subject.\n\nActing as issuer, holder, or verifier requires neither registration nor approval by any authority, as the trust involved is bilateral between parties.\n\nVerifiable presentations allow any verifier to verify the authenticity of verifiable credentials from any issuer.\n\nHolders can receive verifiable credentials from anyone.\n\nHolders can interact with any issuer and any verifier through any user agent.\n\nHolders can share verifiable presentations, which can then be verified without revealing the identity of the verifier to the issuer.\n\nHolders can store verifiable credentials in any location, without affecting their verifiability and without the issuer knowing anything about where they are stored or when they are accessed.\n\nHolders can present verifiable presentations to any verifier without affecting authenticity of the claims and without revealing that action to the issuer.\n\nA verifier can verify verifiable presentations from any holder, containing proofs of claims from any issuer.\n\nVerification should not depend on direct interactions between issuers and verifiers.\n\nVerification should not reveal the identity of the verifier to any issuer.\n\nThe specification must provide a means for issuers to issue verifiable credentials that support selective disclosure, without requiring all conformant software to support that feature.\n\nIssuers can issue verifiable credentials that support selective disclosure.\n\nIf a single verifiable credential supports selective disclosure, then holders can present proofs of claims without revealing the entire verifiable credential.\n\nVerifiable presentations can either disclose the attributes of a verifiable credential, or satisfy derived predicates requested by the verifier. Derived predicates are Boolean conditions, such as greater than, less than, equal to, is in set, and so on.\n\nIssuers can issue revocable verifiable credentials.\n\nThe processes of cryptographically protecting credentials and presentations, and verifying verifiable credentials and verifiable presentations, have to be deterministic, bi-directional, and lossless. Any verification of a verifiable credential or verifiable presentation has to be transformable to the generic data model defined in this document in a deterministic process, such that the resulting credential or presentation is semantically and syntactically equivalent to the original construct, so that it can be processed in an interoperable fashion.\n\nVerifiable credentials and verifiable presentations have to be serializable in one or more machine-readable data formats. The process of serialization and/or de-serialization has to be deterministic, bi-directional, and lossless. Any serialization of a verifiable credential or verifiable presentation needs to be transformable to the generic data model defined in this document in a deterministic process such that the resulting verifiable credential can be processed in an interoperable fashion. The serialized form also needs to be able to be generated from the data model without loss of data or content.\n\nThe data model and serialization must be extendable with minimal coordination.\n\nRevocation by the issuer should not reveal any identifying information about the subject, the holder, the specific verifiable credential, or the verifier.\n\nIssuers can disclose the revocation reason.\n\nIssuers revoking verifiable credentials should distinguish between revocation for cryptographic integrity (for example, the signing key is compromised) versus revocation for a status change (for example, the driver’s license is suspended).\n\nIssuers can provide a service for refreshing a verifiable credential.\n\n1.4 Conformance\n\nAs well as sections marked as non-normative, all authoring guidelines, diagrams, examples, and notes in this specification are non-normative. Everything else in this specification is normative.\n\nThe key words MAY, MUST, MUST NOT, RECOMMENDED, and SHOULD in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.\n\nA conforming document is any concrete expression of the data model that complies with the normative statements in this specification. Specifically, all relevant normative statements in Sections 4. Basic Concepts, 5. Advanced Concepts, and 6. Syntaxes of this document MUST be enforced. A serialization format for the conforming document MUST be deterministic, bi-directional, and lossless as described in Section 6. Syntaxes. The conforming document MAY be transmitted or stored in any such serialization format.\n\nA conforming processor is any algorithm realized as software and/or hardware that generates or consumes a conforming document. Conforming processors MUST produce errors when non-conforming documents are consumed.\n\nThis specification makes no normative statements with regard to the conformance of roles in the ecosystem, such as issuers, holders, or verifiers, because the conformance of ecosystem roles are highly application, use case, and market vertical specific.\n\nDigital proof mechanisms, a subset of which are digital signatures, are required to ensure the protection of a verifiable credential. Having and validating proofs, which may be dependent on the syntax of the proof (for example, using the JSON Web Signature of a JSON Web Token for proofing a key holder), are an essential part of processing a verifiable credential. At the time of publication, Working Group members had implemented verifiable credentials using at least three proof mechanisms:\n\nJSON Web Tokens [RFC7519] secured using JSON Web Signatures [RFC7515]\n\nData Integrity Proofs [DATA-INTEGRITY]\n\nCamenisch-Lysyanskaya Zero-Knowledge Proofs [CL-SIGNATURES].\n\nImplementers are advised to note that not all proof mechanisms are standardized as of the publication date of this specification. The group expects some of these mechanisms, as well as new ones, to mature independently and become standardized in time. Given there are multiple valid proof mechanisms, this specification does not standardize on any single digital signature mechanism. One of the goals of this specification is to provide a data model that can be protected by a variety of current and future digital proof mechanisms. Conformance to this specification does not depend on the details of a particular proof mechanism; it requires clearly identifying the mechanism a verifiable credential uses.\n\nThis document also contains examples that contain JSON and JSON-LD content. Some of these examples contain characters that are invalid JSON, such as inline comments (//) and the use of ellipsis (...) to denote information that adds little value to the example. Implementers are cautioned to remove this content if they desire to use the information as valid JSON or JSON-LD.\n\n4. Basic Concepts\n\nThis section introduces some basic concepts for the specification, in preparation for Section 5. Advanced Concepts later in the document.\n\n4.1 Contexts\n\nWhen two software systems need to exchange data, they need to use terminology that both systems understand. As an analogy, consider how two people communicate. Both people must use the same language and the words they use must mean the same thing to each other. This might be referred to as the context of a conversation.\n\nVerifiable credentials and verifiable presentations have many attributes and values that are identified by URIs [RFC3986]. However, those URIs can be long and not very human-friendly. In such cases, short-form human-friendly aliases can be more helpful. This specification uses the @context property to map such short-form aliases to the URIs required by specific verifiable credentials and verifiable presentations.\n\nNote\n\nIn JSON-LD, the @context property can also be used to communicate other details, such as datatype information, language information, transformation rules, and so on, which are beyond the needs of this specification, but might be useful in the future or to related work. For more information, see Section 3.1: The Context of the [JSON-LD] specification.\n\nVerifiable credentials and verifiable presentations MUST include a @context property.\n\n@context\n\nThe value of the @context property MUST be an ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1. For reference, a copy of the base context is provided in Appendix B.1 Base Context. Subsequent items in the array MUST express context information and be composed of any combination of URIs or objects. It is RECOMMENDED that each URI in the @context be one which, if dereferenced, results in a document containing machine-readable information about the @context.\n\nNote\n\nThough this specification requires that a @context property be present, it is not required that the value of the @context property be processed using JSON-LD. This is to support processing using plain JSON libraries, such as those that might be used when the verifiable credential is encoded as a JWT. All libraries or processors MUST ensure that the order of the values in the @context property is what is expected for the specific application. Libraries or processors that support JSON-LD can process the @context property using full JSON-LD processing as expected.\n\nExample 3: Usage of the @context property\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/58473\", \"type\": [\"VerifiableCredential\", \"AlumniCredential\"], \"issuer\": \"https://example.edu/issuers/565049\", \"issuanceDate\": \"2010-01-01T00:00:00Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"alumniOf\": { \"id\": \"did:example:c276e12ec21ebfeb1f712ebc6f1\", \"name\": [{ \"value\": \"Example University\", \"lang\": \"en\" }, { \"value\": \"Exemple d'Université\", \"lang\": \"fr\" }] } }, \"proof\": { } }\n\nThe example above uses the base context URI (https://www.w3.org/2018/credentials/v1) to establish that the conversation is about a verifiable credential. The second URI (https://www.w3.org/2018/credentials/examples/v1) establishes that the conversation is about examples.\n\nNote\n\nThis document uses the example context URI (https://www.w3.org/2018/credentials/examples/v1) for the purpose of demonstrating examples. Implementations are expected to not use this URI for any other purpose, such as in pilot or production systems.\n\nThe data available at https://www.w3.org/2018/credentials/v1 is a static document that is never updated and SHOULD be downloaded and cached. The associated human-readable vocabulary document for the Verifiable Credentials Data Model is available at https://www.w3.org/2018/credentials/. This concept is further expanded on in Section 5.3 Extensibility.\n\n4.2 Identifiers\n\nWhen expressing statements about a specific thing, such as a person, product, or organization, it is often useful to use some kind of identifier so that others can express statements about the same thing. This specification defines the optional id property for such identifiers. The id property is intended to unambiguously refer to an object, such as a person, product, or organization. Using the id property allows for the expression of statements about specific things in the verifiable credential.\n\nIf the id property is present:\n\nThe id property MUST express an identifier that others are expected to use when expressing statements about a specific thing identified by that identifier.\n\nThe id property MUST NOT have more than one value.\n\nThe value of the id property MUST be a URI.\n\nNote\n\nDevelopers should remember that identifiers might be harmful in scenarios where pseudonymity is required. Developers are encouraged to read Section 7.3 Identifier-Based Correlation carefully when considering such scenarios. There are also other types of correlation mechanisms documented in Section 7. Privacy Considerations that create privacy concerns. Where privacy is a strong consideration, the id property MAY be omitted.\n\nid\n\nThe value of the id property MUST be a single URI. It is RECOMMENDED that the URI in the id be one which, if dereferenced, results in a document containing machine-readable information about the id.\n\nExample 4: Usage of the id property\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/565049\", \"issuanceDate\": \"2010-01-01T00:00:00Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/565049\",\n\n\"issuanceDate\": \"2010-01-01T00:00:00Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:42Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/565049#key-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"z3FXQjecWufY46yg5abdVZsXqLhxhueuSoZgNSARiKBk9czhSePTFehP\n\n8c3PGfb6a22gkfUKods5D2UAUL5n2Brbx\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/565049\",\n\n\"issuanceDate\": \"2010-01-01T00:00:00Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n}\n\n},\n\n\"iss\": \"https://example.edu/issuers/565049\",\n\n\"nbf\": 1262304000,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nU2NTA0OSIsImlzc3VhbmNlRGF0ZSI6IjIwMTAtMDEtMDFUMDA6MDA6MDBaIiwiY3JlZGVudGlhb\n\nFN1YmplY3QiOnsiaWQiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEi\n\nLCJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IkJhY2hlbG9yIG9mIFN\n\njaWVuY2UgYW5kIEFydHMifX19LCJpc3MiOiJodHRwczovL2V4YW1wbGUuZWR1L2lzc3VlcnMvNT\n\nY1MDQ5IiwibmJmIjoxMjYyMzA0MDAwLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVud\n\nGlhbHMvMzczMiIsInN1YiI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMy\n\nMSJ9.giMDNtWUgKbvWL4pteSpSkrh-lhgkhJUZ_gatHdRvEFs9_kB4G9neABvTuuQKfwERzi2KF\n\nQz3X0nzF-jrOO-5w\n\nThe example above uses two types of identifiers. The first identifier is for the verifiable credential and uses an HTTP-based URL. The second identifier is for the subject of the verifiable credential (the thing the claims are about) and uses a decentralized identifier, also known as a DID.\n\nNote\n\nAs of this publication, DIDs are a new type of identifier that are not necessary for verifiable credentials to be useful. Specifically, verifiable credentials do not depend on DIDs and DIDs do not depend on verifiable credentials. However, it is expected that many verifiable credentials will use DIDs and that software libraries implementing this specification will probably need to resolve DIDs. DID-based URLs are used for expressing identifiers associated with subjects, issuers, holders, credential status lists, cryptographic keys, and other machine-readable information associated with a verifiable credential.\n\n4.3 Types\n\nSoftware systems that process the kinds of objects specified in this document use type information to determine whether or not a provided verifiable credential or verifiable presentation is appropriate. This specification defines a type property for the expression of type information.\n\nVerifiable credentials and verifiable presentations MUST have a type property. That is, any credential or presentation that does not have type property is not verifiable, so is neither a verifiable credential nor a verifiable presentation.\n\ntype\n\nThe value of the type property MUST be, or map to (through interpretation of the @context property), one or more URIs. If more than one URI is provided, the URIs MUST be interpreted as an unordered set. Syntactic conveniences SHOULD be used to ease developer usage. Such conveniences might include JSON-LD terms. It is RECOMMENDED that each URI in the type be one which, if dereferenced, results in a document containing machine-readable information about the type.\n\nExample 5: Usage of the type property\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/565049\", \"issuanceDate\": \"2010-01-01T00:00:00Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/565049\",\n\n\"issuanceDate\": \"2010-01-01T00:00:00Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/565049#key-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"zeEdUoM7m9cY8ZyTpey83yBKeBcmcvbyrEQzJ19rD2UXArU2U1jPGoEt\n\nrRvGYppdiK37GU4NBeoPakxpWhAvsVSt\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/565049\",\n\n\"issuanceDate\": \"2010-01-01T00:00:00Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n}\n\n},\n\n\"iss\": \"https://example.edu/issuers/565049\",\n\n\"nbf\": 1262304000,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nU2NTA0OSIsImlzc3VhbmNlRGF0ZSI6IjIwMTAtMDEtMDFUMDA6MDA6MDBaIiwiY3JlZGVudGlhb\n\nFN1YmplY3QiOnsiaWQiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEi\n\nLCJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IkJhY2hlbG9yIG9mIFN\n\njaWVuY2UgYW5kIEFydHMifX19LCJpc3MiOiJodHRwczovL2V4YW1wbGUuZWR1L2lzc3VlcnMvNT\n\nY1MDQ5IiwibmJmIjoxMjYyMzA0MDAwLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVud\n\nGlhbHMvMzczMiIsInN1YiI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMy\n\nMSJ9.IOKrRQb0yrNxHivWbzfNRdKsSbP-mzc-eaQpdkHKkxTi46x8D0h3aLS9KXcAprcMPioEN6\n\nNNSyqLj9ZTDYeoyg\n\nWith respect to this specification, the following table lists the objects that MUST have a type specified.\n\nObject Type Verifiable credential object\n\n(a subclass of a credential object) VerifiableCredential and, optionally, a more specific verifiable credential type. For example,\n\n\"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"] Credential object VerifiableCredential and, optionally, a more specific verifiable credential type. For example,\n\n\"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"] Verifiable presentation object\n\n(a subclass of a presentation object) VerifiablePresentation and, optionally, a more specific verifiable presentation type. For example,\n\n\"type\": [\"VerifiablePresentation\", \"CredentialManagerPresentation\"] Presentation object VerifiablePresentation and, optionally, a more specific verifiable presentation type. For example,\n\n\"type\": [\"VerifiablePresentation\", \"CredentialManagerPresentation\"] Proof object A valid proof type. For example,\n\n\"type\": \"RsaSignature2018\" credentialStatus object A valid credential status type. For example,\n\n\"type\": \"CredentialStatusList2017\" termsOfUse object A valid terms of use type. For example,\n\n\"type\": \"OdrlPolicy2017\") evidence object A valid evidence type. For example,\n\n\"type\": \"DocumentVerification2018\"\n\nNote\n\nThe type system for the Verifiable Credentials Data Model is the same as for [JSON-LD] and is detailed in Section 5.4: Specifying the Type and Section 8: JSON-LD Grammar. When using a JSON-LD context (see Section 5.3 Extensibility), this specification aliases the @type keyword to type to make the JSON-LD documents more easily understood. While application developers and document authors do not need to understand the specifics of the JSON-LD type system, implementers of this specification who want to support interoperable extensibility, do.\n\nAll credentials, presentations, and encapsulated objects MUST specify, or be associated with, additional more narrow types (like UniversityDegreeCredential, for example) so software systems can process this additional information.\n\nWhen processing encapsulated objects defined in this specification, (for example, objects associated with the credentialSubject object or deeply nested therein), software systems SHOULD use the type information specified in encapsulating objects higher in the hierarchy. Specifically, an encapsulating object, such as a credential, SHOULD convey the associated object types so that verifiers can quickly determine the contents of an associated object based on the encapsulating object type.\n\nFor example, a credential object with the type of UniversityDegreeCredential, signals to a verifier that the object associated with the credentialSubject property contains the identifier for the:\n\nSubject in the id property.\n\nType of degree in the type property.\n\nTitle of the degree in the name property.\n\nThis enables implementers to rely on values associated with the type property for verification purposes. The expectation of types and their associated properties should be documented in at least a human-readable specification, and preferably, in an additional machine-readable representation.\n\nNote\n\nThe type system used in the data model described in this specification allows for multiple ways to associate types with data. Implementers and authors are urged to read the section on typing in the Verifiable Credentials Implementation Guidelines [VC-IMP-GUIDE].\n\n4.4 Credential Subject\n\nA verifiable credential contains claims about one or more subjects. This specification defines a credentialSubject property for the expression of claims about one or more subjects.\n\nA verifiable credential MUST have a credentialSubject property.\n\ncredentialSubject\n\nThe value of the credentialSubject property is defined as a set of objects that contain one or more properties that are each related to a subject of the verifiable credential. Each object MAY contain an id, as described in Section 4.2 Identifiers.\n\nExample 6: Usage of the credentialSubject property\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/565049\", \"issuanceDate\": \"2010-01-01T00:00:00Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/565049\",\n\n\"issuanceDate\": \"2010-01-01T00:00:00Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/565049#key-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"zeEdUoM7m9cY8ZyTpey83yBKeBcmcvbyrEQzJ19rD2UXArU2U1jPGoEt\n\nrRvGYppdiK37GU4NBeoPakxpWhAvsVSt\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/565049\",\n\n\"issuanceDate\": \"2010-01-01T00:00:00Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n}\n\n},\n\n\"iss\": \"https://example.edu/issuers/565049\",\n\n\"nbf\": 1262304000,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nU2NTA0OSIsImlzc3VhbmNlRGF0ZSI6IjIwMTAtMDEtMDFUMDA6MDA6MDBaIiwiY3JlZGVudGlhb\n\nFN1YmplY3QiOnsiaWQiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEi\n\nLCJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IkJhY2hlbG9yIG9mIFN\n\njaWVuY2UgYW5kIEFydHMifX19LCJpc3MiOiJodHRwczovL2V4YW1wbGUuZWR1L2lzc3VlcnMvNT\n\nY1MDQ5IiwibmJmIjoxMjYyMzA0MDAwLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVud\n\nGlhbHMvMzczMiIsInN1YiI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMy\n\nMSJ9.z5vgMTK1nfizNCg5N-niCOL3WUIAL7nXy-nGhDZYO_-PNGeE-0djCpWAMH8fD8eWSID5Pf\n\nkPBYkx_dfLJnQ7NA\n\nIt is possible to express information related to multiple subjects in a verifiable credential. The example below specifies two subjects who are spouses. Note the use of array notation to associate multiple subjects with the credentialSubject property.\n\nExample 7: Specifying multiple subjects in a verifiable credential\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"RelationshipCredential\"], \"issuer\": \"https://example.com/issuer/123\", \"issuanceDate\": \"2010-01-01T00:00:00Z\", \"credentialSubject\": [{ \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"name\": \"Jayden Doe\", \"spouse\": \"did:example:c276e12ec21ebfeb1f712ebc6f1\" }, { \"id\": \"did:example:c276e12ec21ebfeb1f712ebc6f1\", \"name\": \"Morgan Doe\", \"spouse\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\" }] }\n\n4.5 Issuer\n\nThis specification defines a property for expressing the issuer of a verifiable credential.\n\nA verifiable credential MUST have an issuer property.\n\nissuer\n\nThe value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if dereferenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.\n\nExample 8: Usage of issuer property\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/14#key-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"z4kWncP1KLByEaSU3oaijUNk8GPGCCgntz8q4Gk55QuMwQe1dsWgSmf7\n\nRsRNYgfJUChdSV22khsfpBsX7ub14aYbe\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n}\n\n},\n\n\"iss\": \"https://example.edu/issuers/14\",\n\n\"nbf\": 1262373804,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nE0IiwiaXNzdWFuY2VEYXRlIjoiMjAxMC0wMS0wMVQxOToyMzoyNFoiLCJjcmVkZW50aWFsU3Via\n\nmVjdCI6eyJpZCI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSIsImRl\n\nZ3JlZSI6eyJ0eXBlIjoiQmFjaGVsb3JEZWdyZWUiLCJuYW1lIjoiQmFjaGVsb3Igb2YgU2NpZW5\n\njZSBhbmQgQXJ0cyJ9fX0sImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5lZHUvaXNzdWVycy8xNCIsIm\n\n5iZiI6MTI2MjM3MzgwNCwianRpIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRlbnRpYWxzLzM3M\n\nzIiLCJzdWIiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEifQ.oOoii\n\nTBKC6zbJ8rx916SSHEKk4Fhc5-gFD8Qh64zRsf5ea7D-bu9zA1ii12hnXLloL7Cz0reXKA9P1nB\n\nZzQvTw\n\nIt is also possible to express additional information about the issuer by associating an object with the issuer property:\n\nExample 9: Usage of issuer expanded property\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": { \"id\": \"did:example:76e12ec712ebc6f1c221ebfeb1f\", \"name\": \"Example University\" }, \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": {\n\n\"id\": \"did:example:76e12ec712ebc6f1c221ebfeb1f\",\n\n\"name\": \"Example University\"\n\n},\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"did:example:76e12ec712ebc6f1c221ebfeb1f#key-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"z2Xdmp6YDYz5RPKeRFDcPYorAmnERyr7aRNzv176oLMxwcW7GgKxAQT4\n\n5jUKwsMA1XvrmFT5Y8WCx7ZnkNTTHJnu9\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": {\n\n\"id\": \"did:example:76e12ec712ebc6f1c221ebfeb1f\",\n\n\"name\": \"Example University\"\n\n},\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n}\n\n},\n\n\"iss\": {\n\n\"id\": \"did:example:76e12ec712ebc6f1c221ebfeb1f\",\n\n\"name\": \"Example University\"\n\n},\n\n\"nbf\": 1262373804,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjp7ImlkIjoiZGlkOmV4YW1wbGU6NzZlMTJlYzcxMm\n\nViYzZmMWMyMjFlYmZlYjFmIiwibmFtZSI6IkV4YW1wbGUgVW5pdmVyc2l0eSJ9LCJpc3N1YW5jZ\n\nURhdGUiOiIyMDEwLTAxLTAxVDE5OjIzOjI0WiIsImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImlkIjoi\n\nZGlkOmV4YW1wbGU6ZWJmZWIxZjcxMmViYzZmMWMyNzZlMTJlYzIxIiwiZGVncmVlIjp7InR5cGU\n\niOiJCYWNoZWxvckRlZ3JlZSIsIm5hbWUiOiJCYWNoZWxvciBvZiBTY2llbmNlIGFuZCBBcnRzIn\n\n19fSwiaXNzIjp7ImlkIjoiZGlkOmV4YW1wbGU6NzZlMTJlYzcxMmViYzZmMWMyMjFlYmZlYjFmI\n\niwibmFtZSI6IkV4YW1wbGUgVW5pdmVyc2l0eSJ9LCJuYmYiOjEyNjIzNzM4MDQsImp0aSI6Imh0\n\ndHA6Ly9leGFtcGxlLmVkdS9jcmVkZW50aWFscy8zNzMyIiwic3ViIjoiZGlkOmV4YW1wbGU6ZWJ\n\nmZWIxZjcxMmViYzZmMWMyNzZlMTJlYzIxIn0.ev4-5Dx9nRy_RUwWMLvnCJ1i-bizgom5VcyYE0\n\nTpGsJ7-bPr6NFUh426Yzx5kc5cEh-a0JPPYBqM6jyrgmyvzA\n\nNote\n\nThe value of the issuer property can also be a JWK (for example, \"https://example.com/keys/foo.jwk\") or a DID (for example, \"did:example:abfe13f712120431c276e12ecab\").\n\n4.7 Proofs (Signatures)\n\nAt least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential or presentation to be a verifiable credential or verifiable presentation; that is, to be verifiable.\n\nThis specification identifies two classes of proof mechanisms: external proofs and embedded proofs. An external proof is one that wraps an expression of this data model, such as a JSON Web Token, which is elaborated on in Section 6.3.1 JSON Web Token. An embedded proof is a mechanism where the proof is included in the data, such as a Linked Data Signature, which is elaborated upon in Section 6.3.2 Data Integrity Proofs.\n\nWhen embedding a proof, the proof property MUST be used.\n\nproof\n\nOne or more cryptographic proofs that can be used to detect tampering and verify the authorship of a credential or presentation. The specific method used for an embedded proof MUST be included using the type property.\n\nBecause the method used for a mathematical proof varies by representation language and the technology used, the set of name-value pairs that is expected as the value of the proof property will vary accordingly. For example, if digital signatures are used for the proof mechanism, the proof property is expected to have name-value pairs that include a signature, a reference to the signing entity, and a representation of the signing date. The example below uses RSA digital signatures.\n\nExample 11: Usage of the proof property on a verifiable credential\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.gov/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"proof\": { \"type\": \"Ed25519Signature2020\", \"created\": \"2021-11-13T18:19:39Z\", \"verificationMethod\": \"https://example.edu/issuers/14#key-1\", \"proofPurpose\": \"assertionMethod\", \"proofValue\": \"z58DAdFfa9SkqZMVPxAQpic7ndSayn1PzZs6ZjWp1CktyGesjuTSwRdo WhAfGFCF5bppETSTojQCrfFPP2oumHKtz\" } }\n\nNote\n\nAs discussed in Section 1.4 Conformance, there are multiple viable proof mechanisms, and this specification does not standardize nor recommend any single proof mechanism for use with verifiable credentials. For more information about the proof mechanism, see the following specifications: Data Integrity [DATA-INTEGRITY], Linked Data Cryptographic Suites Registries [LDP-REGISTRY], and JSON Web Signature (JWS) Unencoded Payload Option [RFC7797]. A list of proof mechanisms is available in the Verifiable Credentials Extension Registry [VC-EXTENSION-REGISTRY].\n\n4.8 Expiration\n\nThis specification defines the expirationDate property for the expression of credential expiration information.\n\nexpirationDate\n\nIf present, the value of the expirationDate property MUST be a string value of an [XMLSCHEMA11-2] date-time representing the date and time the credential ceases to be valid.\n\nNote\n\nIt is expected that the next version of this specification will add the validUntil property in a way that deprecates, but preserves backwards compatibility with the expirationDate property. Implementers are advised that the validUntil property is reserved and its use for any other purpose is discouraged.\n\n4.9 Status\n\nThis specification defines the following credentialStatus property for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked.\n\ncredentialStatus\n\nIf present, the value of the credentialStatus property MUST include the following:\n\nid property, which MUST be a URI.\n\ntype property, which expresses the credential status type (also referred to as the credential status method). It is expected that the value will provide enough information to determine the current status of the credential and that machine readable information needs to be retrievable from the URI. For example, the object could contain a link to an external document noting whether or not the credential is suspended or revoked.\n\nThe precise contents of the credential status information is determined by the specific credentialStatus type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing.\n\nExample 13: Usage of the status property\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"credentialStatus\": { \"id\": \"https://example.edu/status/24\", \"type\": \"CredentialStatusList2017\" } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"credentialStatus\": {\n\n\"id\": \"https://example.edu/status/24\",\n\n\"type\": \"CredentialStatusList2017\"\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/14#key-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"z3BXsFfx1qJ5NsTkKqREjQ3AGh6RAmCwvgu1HcDSzK3P5QEg2TAw8ufk\n\ntJBw8QkAQRciMGyBf5T2AHyRg2w13Uvhp\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"credentialStatus\": {\n\n\"id\": \"https://example.edu/status/24\",\n\n\"type\": \"CredentialStatusList2017\"\n\n}\n\n},\n\n\"iss\": \"https://example.edu/issuers/14\",\n\n\"nbf\": 1262373804,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nE0IiwiaXNzdWFuY2VEYXRlIjoiMjAxMC0wMS0wMVQxOToyMzoyNFoiLCJjcmVkZW50aWFsU3Via\n\nmVjdCI6eyJpZCI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSIsImRl\n\nZ3JlZSI6eyJ0eXBlIjoiQmFjaGVsb3JEZWdyZWUiLCJuYW1lIjoiQmFjaGVsb3Igb2YgU2NpZW5\n\njZSBhbmQgQXJ0cyJ9fSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6Imh0dHBzOi8vZXhhbXBsZS\n\n5lZHUvc3RhdHVzLzI0IiwidHlwZSI6IkNyZWRlbnRpYWxTdGF0dXNMaXN0MjAxNyJ9fSwiaXNzI\n\njoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLzE0IiwibmJmIjoxMjYyMzczODA0LCJqdGki\n\nOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsInN1YiI6ImRpZDpleGFtcGx\n\nlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSJ9.YQKQUu_zreDs69AZ8YqpMGHLl9V_tWH4N\n\nS9P9l67J1wWHf0QCyt5hyuA8ckM4seV-1TRbeiHwdJ3VRkDMcwFcg\n\nDefining the data model, formats, and protocols for status schemes are out of scope for this specification. A Verifiable Credential Extension Registry [VC-EXTENSION-REGISTRY] exists that contains available status schemes for implementers who want to implement verifiable credential status checking.\n\n4.10 Presentations\n\nPresentations MAY be used to combine and present credentials. They can be packaged in such a way that the authorship of the data is verifiable. The data in a presentation is often all about the same subject, but there is no limit to the number of subjects or issuers in the data. The aggregation of information from multiple verifiable credentials is a typical use of verifiable presentations.\n\nA verifiable presentation is typically composed of the following properties:\n\nid\n\nThe id property is optional and MAY be used to provide a unique identifier for the presentation. For details related to the use of this property, see Section 4.2 Identifiers.\n\ntype\n\nThe type property is required and expresses the type of presentation, such as VerifiablePresentation. For details related to the use of this property, see Section 4.3 Types.\n\nverifiableCredential\n\nIf present, the value of the verifiableCredential property MUST be constructed from one or more verifiable credentials, or of data derived from verifiable credentials in a cryptographically verifiable format.\n\nholder\n\nIf present, the value of the holder property is expected to be a URI for the entity that is generating the presentation.\n\nproof\n\nIf present, the value of the proof property ensures that the presentation is verifiable. For details related to the use of this property, see Section 4.7 Proofs (Signatures).\n\nThe example below shows a verifiable presentation that embeds verifiable credentials.\n\nExample 14: Basic structure of a presentation\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"urn:uuid:3978344f-8596-4c3a-a978-8fcaba3903c5\", \"type\": [\"VerifiablePresentation\", \"CredentialManagerPresentation\"], \"verifiableCredential\": [{ }], \"proof\": [{ }] }\n\nThe contents of the verifiableCredential property shown above are verifiable credentials, as described by this specification. The contents of the proof property are proofs, as described by the Data Integrity [DATA-INTEGRITY] specification. An example of a verifiable presentation using the JWT proof mechanism is given in section 6.3.1 JSON Web Token.\n\n4.10.1 Presentations Using Derived Credentials\n\nSome zero-knowledge cryptography schemes might enable holders to indirectly prove they hold claims from a verifiable credential without revealing the verifiable credential itself. In these schemes, a claim from a verifiable credential might be used to derive a presented value, which is cryptographically asserted such that a verifier can trust the value if they trust the issuer.\n\nFor example, a verifiable credential containing the claim date of birth might be used to derive the presented value over the age of 15 in a manner that is cryptographically verifiable. That is, a verifier can still trust the derived value if they trust the issuer.\n\nNote\n\nFor an example of a ZKP-style verifiable presentation containing derived data instead of directly embedded verifiable credentials, see Section 5.8 Zero-Knowledge Proofs.\n\nSelective disclosure schemes using zero-knowledge proofs can use claims expressed in this model to prove additional statements about those claims. For example, a claim specifying a subject's date of birth can be used as a predicate to prove the subject's age is within a given range, and therefore prove the subject qualifies for age-related discounts, without actually revealing the subject's birthdate. The holder has the flexibility to use the claim in any way that is applicable to the desired verifiable presentation.\n\n5. Advanced Concepts\n\nBuilding on the concepts introduced in Section 4. Basic Concepts, this section explores more complex topics about verifiable credentials.\n\n5.1 Lifecycle Details\n\nThis section is non-normative.\n\nSection 1.2 Ecosystem Overview provided an overview of the verifiable credential ecosystem. This section provides more detail about how the ecosystem is envisaged to operate.\n\nThe roles and information flows in the verifiable credential ecosystem are as follows:\n\nAn issuer issues a verifiable credential to a holder. Issuance always occurs before any other actions involving a credential.\n\nA holder might transfer one or more of its verifiable credentials to another holder.\n\nA holder presents one or more of its verifiable credentials to a verifier, optionally inside a verifiable presentation.\n\nA verifier verifies the authenticity of the presented verifiable presentation and verifiable credentials. This should include checking the credential status for revocation of the verifiable credentials.\n\nAn issuer might revoke a verifiable credential.\n\nA holder might delete a verifiable credential.\n\nNote\n\nThe order of the actions above is not fixed, and some actions might be taken more than once. Such action-recurrence might be immediate or at any later point.\n\nThe most common sequence of actions is envisioned to be:\n\nAn issuer issues to a holder.\n\nThe holder presents to a verifier.\n\nThe verifier verifies.\n\nThis specification does not define any protocol for transferring verifiable credentials or verifiable presentations, but assuming other specifications do specify how they are transferred between entities, then this Verifiable Credential Data Model is directly applicable.\n\nThis specification also does not define an authorization framework nor the decisions that a verifier might make after verifying a verifiable credential or verifiable presentation, taking into account the holder, the issuers of the verifiable credentials, the contents of the verifiable credentials, and its own policies.\n\nIn particular, Sections 5.6 Terms of Use and C. Subject-Holder Relationships specify how a verifier can determine:\n\nWhether the holder is a subject of a verifiable credential.\n\nThe relationship between the subject and the holder.\n\nWhether the original holder passed a verifiable credential to a subsequent holder.\n\nAny restrictions using the verifiable credentials by the holder or verifier.\n\n5.2 Trust Model\n\nThis section is non-normative.\n\nThe verifiable credentials trust model is as follows:\n\nThe verifier trusts the issuer to issue the credential that it received. To establish this trust, a credential is expected to either:\n\nInclude a proof establishing that the issuer generated the credential (that is, it is a verifiable credential), or\n\nHave been transmitted in a way clearly establishing that the issuer generated the verifiable credential and that the verifiable credential was not tampered with in transit or storage. This trust could be weakened depending on the risk assessment of the verifier.\n\nAll entities trust the verifiable data registry to be tamper-evident and to be a correct record of which data is controlled by which entities.\n\nThe holder and verifier trust the issuer to issue true (that is, not false) credentials about the subject, and to revoke them quickly when appropriate.\n\nThe holder trusts the repository to store credentials securely, to not release them to anyone other than the holder, and to not corrupt or lose them while they are in its care.\n\nThis trust model differentiates itself from other trust models by ensuring the:\n\nIssuer and the verifier do not need to trust the repository\n\nIssuer does not need to know or trust the verifier.\n\nBy decoupling the trust between the identity provider and the relying party a more flexible and dynamic trust model is created such that market competition and customer choice is increased.\n\nFor more information about how this trust model interacts with various threat models studied by the Working Group, see the Verifiable Credentials Use Cases document [VC-USE-CASES].\n\nNote\n\nThe data model detailed in this specification does not imply a transitive trust model, such as that provided by more traditional Certificate Authority trust models. In the Verifiable Credentials Data Model, a verifier either directly trusts or does not trust an issuer. While it is possible to build transitive trust models using the Verifiable Credentials Data Model, implementers are urged to learn about the security weaknesses introduced by broadly delegating trust in the manner adopted by Certificate Authority systems.\n\n5.3 Extensibility\n\nOne of the goals of the Verifiable Credentials Data Model is to enable permissionless innovation. To achieve this, the data model needs to be extensible in a number of different ways. The data model is required to:\n\nModel complex multi-entity relationships through the use of a graph-based data model.\n\nExtend the machine-readable vocabularies used to describe information in the data model, without the use of a centralized system for doing so, through the use of [LINKED-DATA].\n\nSupport multiple types of cryptographic proof formats through the use of Data Integrity Proofs [DATA-INTEGRITY] and a variety of signature suites listed in the Linked Data Cryptographic Suites Registry [LDP-REGISTRY]\n\nProvide all of the extensibility mechanisms outlined above in a data format that is popular with software developers and web page authors, and is enabled through the use of [JSON-LD].\n\nThis approach to data modeling is often called an open world assumption, meaning that any entity can say anything about any other entity. While this approach seems to conflict with building simple and predictable software systems, balancing extensibility with program correctness is always more challenging with an open world assumption than with closed software systems.\n\nThe rest of this section describes, through a series of examples, how both extensibility and program correctness are achieved.\n\nLet us assume we start with the verifiable credential shown below.\n\nExample 15: A simple credential\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.com/credentials/4643\", \"type\": [\"VerifiableCredential\"], \"issuer\": \"https://example.com/issuers/14\", \"issuanceDate\": \"2018-02-24T05:28:04Z\", \"credentialSubject\": { \"id\": \"did:example:abcdef1234567\", \"name\": \"Jane Doe\" } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.com/credentials/4643\",\n\n\"type\": [\n\n\"VerifiableCredential\"\n\n],\n\n\"issuer\": \"https://example.com/issuers/14\",\n\n\"issuanceDate\": \"2018-02-24T05:28:04Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:abcdef1234567\",\n\n\"name\": \"Jane Doe\"\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/14#keys-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"zyrpmzxPy2fDzqv9Pgr4XBzX2rys1FDuLNkYRVmhXuyype8fB44qNX8m\n\nNnXf99i7x1eSpLdYKNhEKknEJmdGfQ4w\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.com/credentials/4643\",\n\n\"type\": [\n\n\"VerifiableCredential\"\n\n],\n\n\"issuer\": \"https://example.com/issuers/14\",\n\n\"issuanceDate\": \"2018-02-24T05:28:04Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:abcdef1234567\",\n\n\"name\": \"Jane Doe\"\n\n}\n\n},\n\n\"iss\": \"https://example.com/issuers/14\",\n\n\"nbf\": 1519450084,\n\n\"jti\": \"http://example.com/credentials/4643\",\n\n\"sub\": \"did:example:abcdef1234567\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuY29tL2NyZWRl\n\nbnRpYWxzLzQ2NDMiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIl0sImlzc3VlciI6Imh\n\n0dHBzOi8vZXhhbXBsZS5jb20vaXNzdWVycy8xNCIsImlzc3VhbmNlRGF0ZSI6IjIwMTgtMDItMj\n\nRUMDU6Mjg6MDRaIiwiY3JlZGVudGlhbFN1YmplY3QiOnsiaWQiOiJkaWQ6ZXhhbXBsZTphYmNkZ\n\nWYxMjM0NTY3IiwibmFtZSI6IkphbmUgRG9lIn19LCJpc3MiOiJodHRwczovL2V4YW1wbGUuY29t\n\nL2lzc3VlcnMvMTQiLCJuYmYiOjE1MTk0NTAwODQsImp0aSI6Imh0dHA6Ly9leGFtcGxlLmNvbS9\n\njcmVkZW50aWFscy80NjQzIiwic3ViIjoiZGlkOmV4YW1wbGU6YWJjZGVmMTIzNDU2NyJ9.oIDq_\n\nJtiKwm1AVikEjMuurZcfZdTtNAvus63k2kbD1HF2l_5V36ekulxPPY7rKYEeiH3e6bTq1urNoML\n\nK3UipA\n\nThis verifiable credential states that the entity associated with did:example:abcdef1234567 has a name with a value of Jane Doe.\n\nNow let us assume a developer wants to extend the verifiable credential to store two additional pieces of information: an internal corporate reference number, and Jane's favorite food.\n\nThe first thing to do is to create a JSON-LD context containing two new terms, as shown below.\n\nExample 16: A JSON-LD context\n\n{ \"@context\": { \"referenceNumber\": \"https://example.com/vocab#referenceNumber\", \"favoriteFood\": \"https://example.com/vocab#favoriteFood\" } }\n\nAfter this JSON-LD context is created, the developer publishes it somewhere so it is accessible to verifiers who will be processing the verifiable credential. Assuming the above JSON-LD context is published at https://example.com/contexts/mycontext.jsonld, we can extend this example by including the context and adding the new properties and credential type to the verifiable credential.\n\nExample 17: A verifiable credential with a custom extension\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://example.com/contexts/mycontext.jsonld\" ], \"id\": \"http://example.com/credentials/4643\", \"type\": [\"VerifiableCredential\", \"CustomExt12\"], \"issuer\": \"https://example.com/issuers/14\", \"issuanceDate\": \"2018-02-24T05:28:04Z\", \"referenceNumber\": 83294847, \"credentialSubject\": { \"id\": \"did:example:abcdef1234567\", \"name\": \"Jane Doe\", \"favoriteFood\": \"Papaya\" } }\n\nThis example demonstrates extending the Verifiable Credentials Data Model in a permissionless and decentralized way. The mechanism shown also ensures that verifiable credentials created in this way provide a mechanism to prevent namespace conflicts and semantic ambiguity.\n\nA dynamic extensibility model such as this does increase the implementation burden. Software written for such a system has to determine whether verifiable credentials with extensions are acceptable based on the risk profile of the application. Some applications might accept only certain extensions while highly secure environments might not accept any extensions. These decisions are up to the developers of these applications and are specifically not the domain of this specification.\n\nDevelopers are urged to ensure that extension JSON-LD contexts are highly available. Implementations that cannot fetch a context will produce an error. Strategies for ensuring that extension JSON-LD contexts are always available include using content-addressed URLs for contexts, bundling context documents with implementations, or enabling aggressive caching of contexts.\n\nImplementers are advised to pay close attention to the extension points in this specification, such as in Sections 4.7 Proofs (Signatures), 4.9 Status, 5.4 Data Schemas,5.5 Refreshing, 5.6 Terms of Use, and 5.7 Evidence. While this specification does not define concrete implementations for those extension points, the Verifiable Credentials Extension Registry [VC-EXTENSION-REGISTRY] provides an unofficial, curated list of extensions that developers can use from these extension points.\n\n5.3.1 Semantic Interoperability\n\nThis specification ensures that \"plain\" JSON and JSON-LD syntaxes are semantically compatible without requiring JSON implementations to use a JSON-LD processor. To achieve this, the specification imposes the following additional requirements on both syntaxes:\n\nJSON-based processors MUST process the @context key, ensuring the expected values exist in the expected order for the credential type being processed. The order is important because keys used in a credential, which are defined using the values associated with @context, are defined using a \"first defined wins\" mechanism and changing the order might result in a different key definition \"winning\".\n\nJSON-LD-based processors MUST produce an error when a JSON-LD context redefines any term in the active context. The only way to change the definition of existing terms is to introduce a new term that clears the active context within the scope of that new term. Authors that are interested in this feature should read about the @protected feature in the JSON-LD 1.1 specification.\n\nA human-readable document describing the expected order of values for the @context property is expected to be published by any implementer seeking interoperability. A machine-readable description (that is, a normal JSON-LD Context document) is expected to be published at the URL specified in the @context property by JSON-LD implementers seeking interoperability.\n\nThe requirements above guarantee semantic interoperability between JSON and JSON-LD for terms defined by the @context mechanism. While JSON-LD processors will use the specific mechanism provided and can verify that all terms are correctly specified, JSON-based processors implicitly accept the same set of terms without testing that they are correct. In other words, the context in which the data exchange happens is explicitly stated for both JSON and JSON-LD by using the same mechanism. With respect to JSON-based processors, this is achieved in a lightweight manner, without having to use JSON-LD processing libraries.\n\n5.4 Data Schemas\n\nData schemas are useful when enforcing a specific structure on a given collection of data. There are at least two types of data schemas that this specification considers:\n\nData verification schemas, which are used to verify that the structure and contents of a credential or verifiable credential conform to a published schema.\n\nData encoding schemas, which are used to map the contents of a verifiable credential to an alternative representation format, such as a binary format used in a zero-knowledge proof.\n\nIt is important to understand that data schemas serve a different purpose from the @context property, which neither enforces data structure or data syntax, nor enables the definition of arbitrary encodings to alternate representation formats.\n\nThis specification defines the following property for the expression of a data schema, which can be included by an issuer in the verifiable credentials that it issues:\n\ncredentialSchema\n\nThe value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema. Each credentialSchema MUST specify its type (for example, JsonSchemaValidator2018), and an id property that MUST be a URI identifying the schema file. The precise contents of each data schema is determined by the specific type definition.\n\nNote\n\nThe credentialSchema property provides an opportunity to annotate type definitions or lock them to specific versions of the vocabulary. Authors of verifiable credentials can include a static version of their vocabulary using credentialSchema that is locked to some content integrity protection mechanism. The credentialSchema property also makes it possible to perform syntactic checking on the credential and to use verification mechanisms such as JSON Schema [JSON-SCHEMA-2018] validation.\n\nExample 18: Usage of the credentialSchema property to perform JSON schema validation\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"credentialSchema\": { \"id\": \"https://example.org/examples/degree.json\", \"type\": \"JsonSchemaValidator2018\" } }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"credentialSchema\": {\n\n\"id\": \"https://example.org/examples/degree.json\",\n\n\"type\": \"JsonSchemaValidator2018\"\n\n},\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/14#keys-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"z5JKxik9jw25W2s9Q3N3RMovCVLSt1h6bBTZrKsy3JWP48KokH4spdBU\n\nxTykSb11FCtn8q5HWybySAGCFaWwN2aiT\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"credentialSchema\": {\n\n\"id\": \"https://example.org/examples/degree.json\",\n\n\"type\": \"JsonSchemaValidator2018\"\n\n}\n\n},\n\n\"iss\": \"https://example.edu/issuers/14\",\n\n\"nbf\": 1262373804,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nE0IiwiaXNzdWFuY2VEYXRlIjoiMjAxMC0wMS0wMVQxOToyMzoyNFoiLCJjcmVkZW50aWFsU3Via\n\nmVjdCI6eyJpZCI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSIsImRl\n\nZ3JlZSI6eyJ0eXBlIjoiQmFjaGVsb3JEZWdyZWUiLCJuYW1lIjoiQmFjaGVsb3Igb2YgU2NpZW5\n\njZSBhbmQgQXJ0cyJ9fSwiY3JlZGVudGlhbFNjaGVtYSI6eyJpZCI6Imh0dHBzOi8vZXhhbXBsZS\n\n5vcmcvZXhhbXBsZXMvZGVncmVlLmpzb24iLCJ0eXBlIjoiSnNvblNjaGVtYVZhbGlkYXRvcjIwM\n\nTgifX0sImlzcyI6Imh0dHBzOi8vZXhhbXBsZS5lZHUvaXNzdWVycy8xNCIsIm5iZiI6MTI2MjM3\n\nMzgwNCwianRpIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRlbnRpYWxzLzM3MzIiLCJzdWIiOiJ\n\nkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEifQ.GRJHwxvQfgEOP8TaaBn\n\np2ZCPjFlA_KodpdBupHsRroql10gaE--8oAXR1e-wOuxjFoK-T814h9LKnv71IMI38Q\n\nIn the example above, the issuer is specifying a credentialSchema, which points to a [JSON-SCHEMA-2018] file that can be used by a verifier to determine if the verifiable credential is well formed.\n\nNote\n\nFor information about linkages to JSON Schema [JSON-SCHEMA-2018] or other optional verification mechanisms, see the Verifiable Credentials Implementation Guidelines [VC-IMP-GUIDE] document.\n\nData schemas can also be used to specify mappings to other binary formats, such as those used to perform zero-knowledge proofs. For more information on using the credentialSchema property with zero-knowledge proofs, see Section 5.8 Zero-Knowledge Proofs.\n\nExample 19: Usage of the credentialSchema property to perform zero-knowledge validation\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"credentialSchema\": { \"id\": \"https://example.org/examples/degree.zkp\", \"type\": \"ZkpExampleSchema2018\" }, \"proof\": { } }\n\nIn the example above, the issuer is specifying a credentialSchema pointing to a zero-knowledge packed binary data format that is capable of transforming the input data into a format, which can then be used by a verifier to determine if the proof provided with the verifiable credential is valid.\n\n5.5 Refreshing\n\nIt is useful for systems to enable the manual or automatic refresh of an expired verifiable credential. For more information about expired verifiable credentials, see Section 4.8 Expiration. This specification defines a refreshService property, which enables an issuer to include a link to a refresh service.\n\nThe issuer can include the refresh service as an element inside the verifiable credential if it is intended for either the verifier or the holder (or both), or inside the verifiable presentation if it is intended for the holder only. In the latter case, this enables the holder to refresh the verifiable credential before creating a verifiable presentation to share with a verifier. In the former case, including the refresh service inside the verifiable credential enables either the holder or the verifier to perform future updates of the credential.\n\nThe refresh service is only expected to be used when either the credential has expired or the issuer does not publish credential status information. Issuers are advised not to put the refreshService property in a verifiable credential that does not contain public information or whose refresh service is not protected in some way.\n\nNote\n\nPlacing a refreshService property in a verifiable credential so that it is available to verifiers can remove control and consent from the holder and allow the verifiable credential to be issued directly to the verifier, thereby bypassing the holder.\n\nrefreshService\n\nThe value of the refreshService property MUST be one or more refresh services that provides enough information to the recipient's software such that the recipient can refresh the verifiable credential. Each refreshService value MUST specify its type (for example, ManualRefreshService2018) and its id, which is the URI of the service. There is an expectation that machine readable information needs to be retrievable from the URI. The precise content of each refresh service is determined by the specific refreshService type definition.\n\nExample 20: Usage of the refreshService property by an issuer\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"refreshService\": { \"id\": \"https://example.edu/refresh/3732\", \"type\": \"ManualRefreshService2018\" } }\n\nIn the example above, the issuer specifies a manual refreshService that can be used by directing the holder or the verifier to https://example.edu/refresh/3732.\n\n5.6 Terms of Use\n\nTerms of use can be utilized by an issuer or a holder to communicate the terms under which a verifiable credential or verifiable presentation was issued. The issuer places their terms of use inside the verifiable credential. The holder places their terms of use inside a verifiable presentation. This specification defines a termsOfUse property for expressing terms of use information.\n\nThe value of the termsOfUse property tells the verifier what actions it is required to perform (an obligation), not allowed to perform (a prohibition), or allowed to perform (a permission) if it is to accept the verifiable credential or verifiable presentation.\n\nNote\n\nFurther study is required to determine how a subject who is not a holder places terms of use on their verifiable credentials. One way could be for the subject to request the issuer to place the terms of use inside the issued verifiable credentials. Another way could be for the subject to delegate a verifiable credential to a holder and place terms of use restrictions on the delegated verifiable credential.\n\ntermsOfUse\n\nThe value of the termsOfUse property MUST specify one or more terms of use policies under which the creator issued the credential or presentation. If the recipient (a holder or verifier) is not willing to adhere to the specified terms of use, then they do so on their own responsibility and might incur legal liability if they violate the stated terms of use. Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id. The precise contents of each term of use is determined by the specific termsOfUse type definition.\n\nExample 21: Usage of the termsOfUse property by an issuer\n\nCredentialVerifiable Credential (with proof)Verifiable Credential (as JWT)\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"termsOfUse\": [{ \"type\": \"IssuerPolicy\", \"id\": \"http://example.com/policies/credential/4\", \"profile\": \"http://example.com/profiles/credential\", \"prohibition\": [{ \"assigner\": \"https://example.edu/issuers/14\", \"assignee\": \"AllVerifiers\", \"target\": \"http://example.edu/credentials/3732\", \"action\": [\"Archival\"] }] }] }\n\n{\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\",\n\n\"https://w3id.org/security/suites/ed25519-2020/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"termsOfUse\": [\n\n{\n\n\"type\": \"IssuerPolicy\",\n\n\"id\": \"http://example.com/policies/credential/4\",\n\n\"profile\": \"http://example.com/profiles/credential\",\n\n\"prohibition\": [\n\n{\n\n\"assigner\": \"https://example.edu/issuers/14\",\n\n\"assignee\": \"AllVerifiers\",\n\n\"target\": \"http://example.edu/credentials/3732\",\n\n\"action\": [\n\n\"Archival\"\n\n]\n\n}\n\n]\n\n}\n\n],\n\n\"proof\": {\n\n\"type\": \"Ed25519Signature2020\",\n\n\"created\": \"2022-02-25T14:58:43Z\",\n\n\"verificationMethod\": \"https://example.edu/issuers/14#keys-1\",\n\n\"proofPurpose\": \"assertionMethod\",\n\n\"proofValue\": \"z2ty8BNvrKCvAXGqJVXF8aZ1jK5o5uXFvhXJksUXhn61uSwJJmWdcntf\n\nqvZTLbWmQHpieyhdcrG43em37Jo8bswvR\"\n\n}\n\n}\n\n---------------- JWT header ---------------\n\n{\n\n\"alg\": \"ES256\",\n\n\"typ\": \"JWT\"\n\n}\n\n--------------- JWT payload ---------------\n\n// NOTE: The example below uses a valid VC-JWT serialization\n\n// that duplicates the iss, nbf, jti, and sub fields in the\n\n// Verifiable Credential (vc) field.\n\n{\n\n\"vc\": {\n\n\"@context\": [\n\n\"https://www.w3.org/2018/credentials/v1\",\n\n\"https://www.w3.org/2018/credentials/examples/v1\"\n\n],\n\n\"id\": \"http://example.edu/credentials/3732\",\n\n\"type\": [\n\n\"VerifiableCredential\",\n\n\"UniversityDegreeCredential\"\n\n],\n\n\"issuer\": \"https://example.edu/issuers/14\",\n\n\"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n\"credentialSubject\": {\n\n\"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n\"degree\": {\n\n\"type\": \"BachelorDegree\",\n\n\"name\": \"Bachelor of Science and Arts\"\n\n}\n\n},\n\n\"termsOfUse\": [\n\n{\n\n\"type\": \"IssuerPolicy\",\n\n\"id\": \"http://example.com/policies/credential/4\",\n\n\"profile\": \"http://example.com/profiles/credential\",\n\n\"prohibition\": [\n\n{\n\n\"assigner\": \"https://example.edu/issuers/14\",\n\n\"assignee\": \"AllVerifiers\",\n\n\"target\": \"http://example.edu/credentials/3732\",\n\n\"action\": [\n\n\"Archival\"\n\n]\n\n}\n\n]\n\n}\n\n]\n\n},\n\n\"iss\": \"https://example.edu/issuers/14\",\n\n\"nbf\": 1262373804,\n\n\"jti\": \"http://example.edu/credentials/3732\",\n\n\"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\"\n\n}\n\n--------------- JWT ---------------\n\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3\n\nd3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L\n\n2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRl\n\nbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eUR\n\nlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLz\n\nE0IiwiaXNzdWFuY2VEYXRlIjoiMjAxMC0wMS0wMVQxOToyMzoyNFoiLCJjcmVkZW50aWFsU3Via\n\nmVjdCI6eyJpZCI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSIsImRl\n\nZ3JlZSI6eyJ0eXBlIjoiQmFjaGVsb3JEZWdyZWUiLCJuYW1lIjoiQmFjaGVsb3Igb2YgU2NpZW5\n\njZSBhbmQgQXJ0cyJ9fSwidGVybXNPZlVzZSI6W3sidHlwZSI6Iklzc3VlclBvbGljeSIsImlkIj\n\noiaHR0cDovL2V4YW1wbGUuY29tL3BvbGljaWVzL2NyZWRlbnRpYWwvNCIsInByb2ZpbGUiOiJod\n\nHRwOi8vZXhhbXBsZS5jb20vcHJvZmlsZXMvY3JlZGVudGlhbCIsInByb2hpYml0aW9uIjpbeyJh\n\nc3NpZ25lciI6Imh0dHBzOi8vZXhhbXBsZS5lZHUvaXNzdWVycy8xNCIsImFzc2lnbmVlIjoiQWx\n\nsVmVyaWZpZXJzIiwidGFyZ2V0IjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRlbnRpYWxzLzM3Mz\n\nIiLCJhY3Rpb24iOlsiQXJjaGl2YWwiXX1dfV19LCJpc3MiOiJodHRwczovL2V4YW1wbGUuZWR1L\n\n2lzc3VlcnMvMTQiLCJuYmYiOjEyNjIzNzM4MDQsImp0aSI6Imh0dHA6Ly9leGFtcGxlLmVkdS9j\n\ncmVkZW50aWFscy8zNzMyIiwic3ViIjoiZGlkOmV4YW1wbGU6ZWJmZWIxZjcxMmViYzZmMWMyNzZ\n\nlMTJlYzIxIn0.YMeGs_5KDNzta-h_ehAY9RS6jyyJ8kB36QOXQL6GR1WCkWUz7S2ZUUsBblvipk\n\ncgnA4fCfdjI5c_aZI3Ce8byw\n\nIn the example above, the issuer (the assigner) is prohibiting verifiers (the assignee) from storing the data in an archive.\n\nExample 22: Usage of the termsOfUse property by a holder\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\", { \"@protected\": true, \"VerifiablePresentationTermsOfUseExtension\": { \"@id\": \"https://www.w3.org/2018/credentials/examples#VerifiablePresentationExtension\", \"@context\": { \"@protected\": true, \"termsOfUse\": { \"@id\": \"https://www.w3.org/2018/credentials#termsOfUse\", \"@type\": \"@id\" } } } } ], \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"type\": [\"VerifiablePresentation\", \"VerifiablePresentationTermsOfUseExtension\"], \"verifiableCredential\": [{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"proof\": { } }], \"termsOfUse\": [{ \"type\": \"HolderPolicy\", \"id\": \"http://example.com/policies/credential/6\", \"profile\": \"http://example.com/profiles/credential\", \"prohibition\": [{ \"assigner\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"assignee\": \"https://wineonline.example.org/\", \"target\": \"http://example.edu/credentials/3732\", \"action\": [\"3rdPartyCorrelation\"] }] }], \"proof\": [ ... ] }\n\nNote\n\nWarning: The termsOfUse property is improperly defined within the VerifiablePresentation scoped context. This is a bug with the version 1 context and will be fixed in the version 2 context. In the meantime, implementors who wish to use this feature will be required to extend the context of their verifiable presentation with an additional term that defines the termsOfUse property, which can then be used alongside the verifiable presentation type property, in order for the term to be semantically recognized in a JSON-LD processor.\n\nIn the example above, the holder (the assigner), who is also the subject, expressed a term of use prohibiting the verifier (the assignee, https://wineonline.example.org) from using the information provided to correlate the holder or subject using a third-party service. If the verifier were to use a third-party service for correlation, they would violate the terms under which the holder created the presentation.\n\nThis feature is also expected to be used by government-issued verifiable credentials to instruct digital wallets to limit their use to similar government organizations in an attempt to protect citizens from unexpected usage of sensitive data. Similarly, some verifiable credentials issued by private industry are expected to limit usage to within departments inside the organization, or during business hours. Implementers are urged to read more about this rapidly evolving feature in the appropriate section of the Verifiable Credentials Implementation Guidelines [VC-IMP-GUIDE] document.\n\n5.7 Evidence\n\nEvidence can be included by an issuer to provide the verifier with additional supporting information in a verifiable credential. This could be used by the verifier to establish the confidence with which it relies on the claims in the verifiable credential.\n\nFor example, an issuer could check physical documentation provided by the subject or perform a set of background checks before issuing the credential. In certain scenarios, this information is useful to the verifier when determining the risk associated with relying on a given credential.\n\nThis specification defines the evidence property for expressing evidence information.\n\nevidence\n\nThe value of the evidence property MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential. Each evidence scheme is identified by its type. The id property is optional, but if present, SHOULD contain a URL that points to where more information about this instance of evidence can be found. The precise content of each evidence scheme is determined by the specific evidence type definition.\n\nNote\n\nFor information about how attachments and references to credentials and non-credential data might be supported by the specification, see the Verifiable Credentials Implementation Guidelines [VC-IMP-GUIDE] document.\n\nExample 23: Usage of the evidence property\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"id\": \"http://example.edu/credentials/3732\", \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"issuer\": \"https://example.edu/issuers/14\", \"issuanceDate\": \"2010-01-01T19:23:24Z\", \"credentialSubject\": { \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\" } }, \"evidence\": [{ \"id\": \"https://example.edu/evidence/f2aeec97-fc0d-42bf-8ca7-0548192d4231\", \"type\": [\"DocumentVerification\"], \"verifier\": \"https://example.edu/issuers/14\", \"evidenceDocument\": \"DriversLicense\", \"subjectPresence\": \"Physical\", \"documentPresence\": \"Physical\", \"licenseNumber\": \"123AB4567\" }], \"proof\": { } }\n\nNote\n\nIn this evidence example, the issuer is asserting that they physically matched the subject of the credential to a physical copy of a driver's license with the stated license number. This driver's license was used in the issuance process to verify that \"Example University\" verified the subject before issuance of the credential and how they did so (physical verification).\n\nNote\n\nThe evidence property provides different and complementary information to the proof property. The evidence property is used to express supporting information, such as documentary evidence, related to the integrity of the verifiable credential. In contrast, the proof property is used to express machine-verifiable mathematical proofs related to the authenticity of the issuer and integrity of the verifiable credential. For more information about the proof property, see Section 4.7 Proofs (Signatures).\n\n5.8 Zero-Knowledge Proofs\n\nA zero-knowledge proof is a cryptographic method where an entity can prove to another entity that they know a certain value without disclosing the actual value. A real-world example is proving that an accredited university has granted a degree to you without revealing your identity or any other personally identifiable information contained on the degree.\n\nThe key capabilities introduced by zero-knowledge proof mechanisms are the ability of a holder to:\n\nCombine multiple verifiable credentials from multiple issuers into a single verifiable presentation without revealing verifiable credential or subject identifiers to the verifier. This makes it more difficult for the verifier to collude with any of the issuers regarding the issued verifiable credentials.\n\nSelectively disclose the claims in a verifiable credential to a verifier without requiring the issuance of multiple atomic verifiable credentials. This allows a holder to provide a verifier with precisely the information they need and nothing more.\n\nProduce a derived verifiable credential that is formatted according to the verifier's data schema instead of the issuer's, without needing to involve the issuer after verifiable credential issuance. This provides a great deal of flexibility for holders to use their issued verifiable credentials.\n\nThis specification describes a data model that supports selective disclosure with the use of zero-knowledge proof mechanisms. The examples below highlight how the data model can be used to issue, present, and verify zero-knowledge verifiable credentials.\n\nFor a holder to use a zero-knowledge verifiable presentation, they need an issuer to have issued a verifiable credential in a manner that enables the holder to derive a proof from the originally issued verifiable credential, so that the holder can present the information to a verifier in a privacy-enhancing manner. This implies that the holder can prove the validity of the issuer's signature without revealing the values that were signed, or when only revealing certain selected values. The standard practice is to do so by proving knowledge of the signature, without revealing the signature itself. There are two requirements for verifiable credentials when they are to be used in zero-knowledge proof systems.\n\nThe verifiable credential MUST contain a Proof, using the proof property, so that the holder can derive a verifiable presentation that reveals only the information than the holder intends to reveal.\n\nIf a credential definition is being used, the credential definition MUST be defined in the credentialSchema property, so that it can be used by all parties to perform various cryptographic operations in zero-knowledge.\n\nThe following example shows one method of using verifiable credentials in zero-knowledge. It makes use of a Camenisch-Lysyanskaya Signature [CL-SIGNATURES], which allows the presentation of the verifiable credential in a way that supports the privacy of the holder and subject through the use of selective disclosure of the verifiable credential values. Some other cryptographic systems which rely upon zero-knowledge proofs to selectively disclose attributes can be found in the [LDP-REGISTRY] as well.\n\nExample 24: A verifiable credential that supports CL Signatures\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"credentialSchema\": { \"id\": \"did:example:cdf:35LB7w9ueWbagPL94T9bMLtyXDj9pX5o\", \"type\": \"did:example:schema:22KpkXgecryx9k7N6XN1QoN3gXwBkSU8SfyyYQG\" }, \"issuer\": \"did:example:Wz4eUg7SetGfaUVCn8U9d62oDYrUJLuUtcy619\", \"credentialSubject\": { \"givenName\": \"Jane\", \"familyName\": \"Doe\", \"degree\": { \"type\": \"BachelorDegree\", \"name\": \"Bachelor of Science and Arts\", \"college\": \"College of Engineering\" } }, \"proof\": { \"type\": \"CLSignature2019\", \"issuerData\": \"5NQ4TgzNfSQxoLzf2d5AV3JNiCdMaTgm...BXiX5UggB381QU7ZCgqWivUmy4D\", \"attributes\": \"pPYmqDvwwWBDPNykXVrBtKdsJDeZUGFA...tTERiLqsZ5oxCoCSodPQaggkDJy\", \"signature\": \"8eGWSiTiWtEA8WnBwX4T259STpxpRKuk...kpFnikqqSP3GMW7mVxC4chxFhVs\", \"signatureCorrectnessProof\": \"SNQbW3u1QV5q89qhxA1xyVqFa6jCrKwv...dsRypyuGGK3RhhBUvH1tPEL8orH\" } }\n\nThe example above provides the verifiable credential definition by using the credentialSchema property and a specific proof that is usable in the Camenisch-Lysyanskaya Zero-Knowledge Proof system.\n\nThe next example utilizes the verifiable credential above to generate a new derived verifiable credential with a privacy-preserving proof. The derived verifiable credential is then placed in a verifiable presentation, so that the verifiable credential discloses only the claims and additional credential metadata that the holder intended. To do this, all of the following requirements are expected to be met:\n\nEach derived verifiable credential within a verifiable presentation MUST contain all information necessary to verify the verifiable credential, either by including it directly within the credential, or by referencing the necessary information.\n\nA verifiable presentation MUST NOT leak information that would enable the verifier to correlate the holder across multiple verifiable presentations.\n\nThe verifiable presentation SHOULD contain a proof property to enable the verifier to check that all derived verifiable credentials in the verifiable presentation were issued to the same holder without leaking personally identifiable information that the holder did not intend to share.\n\nExample 25: A verifiable presentation that supports CL Signatures\n\n{ \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"type\": \"VerifiablePresentation\", \"verifiableCredential\": [ { \"@context\": [ \"https://www.w3.org/2018/credentials/v1\", \"https://www.w3.org/2018/credentials/examples/v1\" ], \"type\": [\"VerifiableCredential\", \"UniversityDegreeCredential\"], \"credentialSchema\": { \"id\": \"did:example:cdf:35LB7w9ueWbagPL94T9bMLtyXDj9pX5o\", \"type\": \"did:example:schema:22KpkXgecryx9k7N6XN1QoN3gXwBkSU8SfyyYQG\" }, \"issuer\": \"did:example:Wz4eUg7SetGfaUVCn8U9d62oDYrUJLuUtcy619\", \"credentialSubject\": { \"degreeType\": \"BachelorDegree\", \"degreeSchool\": \"College of Engineering\" }, \"proof\": { \"type\": \"AnonCredDerivedCredentialv1\", \"primaryProof\": \"cg7wLNSi48K5qNyAVMwdYqVHSMv1Ur8i...Fg2ZvWF6zGvcSAsym2sgSk737\", \"nonRevocationProof\": \"mu6fg24MfJPU1HvSXsf3ybzKARib4WxG...RSce53M6UwQCxYshCuS3d2h\" } }], \"proof\": { \"type\": "
    }
}