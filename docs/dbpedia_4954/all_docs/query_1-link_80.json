{
    "id": "dbpedia_4954_1",
    "rank": 80,
    "data": {
        "url": "https://docs.oracle.com/javaee/1.4/api/javax/mail/internet/MimeBodyPart.html",
        "read_more_link": "",
        "language": "en",
        "title": "MimeBodyPart (Java 2 Platform Ent. Ed. v1.4)",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/javaee/1.4/api/resources/inherit.gif",
            "https://docs.oracle.com/javaee/1.4/api/resources/inherit.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "javax.mail.internet.MimeBodyPart class"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "JavaTM 2 Platform\n\nEnt. Ed. v1.4\n\njavax.mail.internet\n\nClass MimeBodyPart\n\njava.lang.Object javax.mail.BodyPart javax.mail.internet.MimeBodyPart\n\nAll Implemented Interfaces:\n\nMimePart, Part\n\npublic class MimeBodyPart\n\nextends BodyPart\n\nimplements MimePart\n\nThis class represents a MIME body part. It implements the BodyPart abstract class and the MimePart interface. MimeBodyParts are contained in MimeMultipart objects.\n\nMimeBodyPart uses the InternetHeaders class to parse and store the headers of that body part.\n\nA note on RFC 822 and MIME headers\n\nRFC 822 header fields must contain only US-ASCII characters. MIME allows non ASCII characters to be present in certain portions of certain headers, by encoding those characters. RFC 2047 specifies the rules for doing this. The MimeUtility class provided in this package can be used to to achieve this. Callers of the setHeader, addHeader, and addHeaderLine methods are responsible for enforcing the MIME requirements for the specified headers. In addition, these header fields must be folded (wrapped) before being sent if they exceed the line length limitation for the transport (1000 bytes for SMTP). Received headers may have been folded. The application is responsible for folding and unfolding headers as appropriate.\n\nAuthor:\n\nJohn Mani, Bill Shannon\n\nSee Also:Part, MimePart, MimeUtility\n\nField Summary protected byte[] content\n\nByte array that holds the bytes of the content of this Part. protected InputStream contentStream\n\nIf the data for this body part was supplied by an InputStream that implements the SharedInputStream interface, contentStream is another such stream representing the content of this body part. protected DataHandler dh\n\nThe DataHandler object representing this Part's content. protected InternetHeaders headers\n\nThe InternetHeaders object that stores all the headers of this body part.\n\nFields inherited from class javax.mail.BodyPart parent\n\nFields inherited from interface javax.mail.Part ATTACHMENT, INLINE\n\nConstructor Summary MimeBodyPart()\n\nAn empty MimeBodyPart object is created. MimeBodyPart(InputStream is)\n\nConstructs a MimeBodyPart by reading and parsing the data from the specified input stream. MimeBodyPart(InternetHeaders headers, byte[] content)\n\nConstructs a MimeBodyPart using the given header and content bytes.\n\nMethod Summary void addHeader(String name, String value)\n\nAdd this value to the existing values for this header_name. void addHeaderLine(String line)\n\nAdd a header line to this body part Enumeration getAllHeaderLines()\n\nGet all header lines as an Enumeration of Strings. Enumeration getAllHeaders()\n\nReturn all the headers from this Message as an Enumeration of Header objects. Object getContent()\n\nReturn the content as a java object. String getContentID()\n\nReturns the value of the \"Content-ID\" header field. String[] getContentLanguage()\n\nGet the languages specified in the Content-Language header of this MimePart. String getContentMD5()\n\nReturn the value of the \"Content-MD5\" header field. protected InputStream getContentStream()\n\nProduce the raw bytes of the content. String getContentType()\n\nReturns the value of the RFC 822 \"Content-Type\" header field. DataHandler getDataHandler()\n\nReturn a DataHandler for this body part's content. String getDescription()\n\nReturns the \"Content-Description\" header field of this body part. String getDisposition()\n\nReturns the value of the \"Content-Disposition\" header field. String getEncoding()\n\nReturns the content transfer encoding from the \"Content-Transfer-Encoding\" header field. String getFileName()\n\nGet the filename associated with this body part. String[] getHeader(String name)\n\nGet all the headers for this header_name. String getHeader(String name, String delimiter)\n\nGet all the headers for this header name, returned as a single String, with headers separated by the delimiter. InputStream getInputStream()\n\nReturn a decoded input stream for this body part's \"content\". int getLineCount()\n\nReturn the number of lines for the content of this Part. Enumeration getMatchingHeaderLines(String[] names)\n\nGet matching header lines as an Enumeration of Strings. Enumeration getMatchingHeaders(String[] names)\n\nReturn matching headers from this Message as an Enumeration of Header objects. Enumeration getNonMatchingHeaderLines(String[] names)\n\nGet non-matching header lines as an Enumeration of Strings. Enumeration getNonMatchingHeaders(String[] names)\n\nReturn non-matching headers from this Message as an Enumeration of Header objects. InputStream getRawInputStream()\n\nReturn an InputStream to the raw data with any Content-Transfer-Encoding intact. int getSize()\n\nReturn the size of the content of this body part in bytes. boolean isMimeType(String mimeType)\n\nIs this Part of the specified MIME type? void removeHeader(String name)\n\nRemove all headers with this name. void setContent(Multipart mp)\n\nThis method sets the body part's content to a Multipart object. void setDescription(String description)\n\nSet the \"Content-Description\" header field for this body part. void setDescription(String description, String charset)\n\nSet the \"Content-Description\" header field for this body part. void setDisposition(String disposition)\n\nSet the \"Content-Disposition\" header field of this body part. void setFileName(String filename)\n\nSet the filename associated with this body part, if possible. void setHeader(String name, String value)\n\nSet the value for this header_name. void setText(String text)\n\nConvenience method that sets the given String as this part's content, with a MIME type of \"text/plain\". void setText(String text, String charset)\n\nConvenience method that sets the given String as this part's content, with a MIME type of \"text/plain\" and the specified charset. protected void updateHeaders()\n\nExamine the content of this body part and update the appropriate MIME headers. void writeTo(OutputStream os)\n\nOutput the body part as an RFC 822 format stream.\n\nMethods inherited from class javax.mail.BodyPart getParent\n\nMethods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait\n\nField Detail\n\ndh\n\nprotected DataHandler dh\n\nThe DataHandler object representing this Part's content.\n\ncontent\n\nprotected byte[] content\n\nByte array that holds the bytes of the content of this Part.\n\ncontentStream\n\nprotected InputStream contentStream\n\nIf the data for this body part was supplied by an InputStream that implements the SharedInputStream interface, contentStream is another such stream representing the content of this body part. In this case, content will be null.\n\nSince:\n\nJavaMail 1.2\n\nheaders\n\nprotected InternetHeaders headers\n\nThe InternetHeaders object that stores all the headers of this body part.\n\nConstructor Detail\n\nMimeBodyPart\n\npublic MimeBodyPart()\n\nAn empty MimeBodyPart object is created. This body part maybe filled in by a client constructing a multipart message.\n\nMimeBodyPart\n\npublic MimeBodyPart(InputStream is) throws MessagingException\n\nConstructs a MimeBodyPart by reading and parsing the data from the specified input stream. The parser consumes data till the end of the given input stream. The input stream must start at the beginning of a valid MIME body part and must terminate at the end of that body part.\n\nNote that the \"boundary\" string that delimits body parts must not be included in the input stream. The intention is that the MimeMultipart parser will extract each body part's bytes from a multipart stream and feed them into this constructor, without the delimiter strings.\n\nParameters:is - the body part Input Stream\n\nMimeBodyPart\n\npublic MimeBodyPart(InternetHeaders headers, byte[] content) throws MessagingException\n\nConstructs a MimeBodyPart using the given header and content bytes.\n\nUsed by providers.\n\nParameters:headers - The header of this partcontent - bytes representing the body of this part.\n\nMethod Detail\n\ngetSize\n\npublic int getSize() throws MessagingException\n\nReturn the size of the content of this body part in bytes. Return -1 if the size cannot be determined.\n\nNote that this number may not be an exact measure of the content size and may or may not account for any transfer encoding of the content.\n\nThis implementation returns the size of the content array (if not null), or, if contentStream is not null, and the available method returns a positive number, it returns that number as the size. Otherwise, it returns -1.\n\nSpecified by:getSize in interface Part\n\nReturns:\n\nsize in bytes, or -1 if not known\n\nThrows: MessagingException\n\ngetLineCount\n\npublic int getLineCount() throws MessagingException\n\nReturn the number of lines for the content of this Part. Return -1 if this number cannot be determined.\n\nNote that this number may not be an exact measure of the content length and may or may not account for any transfer encoding of the content.\n\nThis implementation returns -1.\n\nSpecified by:getLineCount in interface Part\n\nReturns:\n\nnumber of lines, or -1 if not known\n\nThrows: MessagingException\n\ngetContentType\n\npublic String getContentType() throws MessagingException\n\nReturns the value of the RFC 822 \"Content-Type\" header field. This represents the content type of the content of this body part. This value must not be null. If this field is unavailable, \"text/plain\" should be returned.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getContentType in interface Part\n\nReturns:\n\nContent-Type of this body part\n\nThrows: MessagingExceptionSee Also:DataHandler\n\nisMimeType\n\npublic boolean isMimeType(String mimeType) throws MessagingException\n\nIs this Part of the specified MIME type? This method compares only the primaryType and subType. The parameters of the content types are ignored.\n\nFor example, this method will return true when comparing a Part of content type \"text/plain\" with \"text/plain; charset=foobar\".\n\nIf the subType of mimeType is the special character '*', then the subtype is ignored during the comparison.\n\nSpecified by:isMimeType in interface Part\n\nThrows: MessagingException\n\ngetDisposition\n\npublic String getDisposition() throws MessagingException\n\nReturns the value of the \"Content-Disposition\" header field. This represents the disposition of this part. The disposition describes how the part should be presented to the user.\n\nIf the Content-Disposition field is unavailable, null is returned.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getDisposition in interface Part\n\nReturns:\n\ndisposition of this part, or null if unknown\n\nThrows: MessagingExceptionSee Also:headers\n\nsetDisposition\n\npublic void setDisposition(String disposition) throws MessagingException\n\nSet the \"Content-Disposition\" header field of this body part. If the disposition is null, any existing \"Content-Disposition\" header field is removed.\n\nSpecified by:setDisposition in interface Part\n\nParameters:disposition - disposition of this part Throws: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingExceptionSee Also:Part.ATTACHMENT, Part.INLINE, Part.setFileName(java.lang.String)\n\ngetEncoding\n\npublic String getEncoding() throws MessagingException\n\nReturns the content transfer encoding from the \"Content-Transfer-Encoding\" header field. Returns null if the header is unavailable or its value is absent.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getEncoding in interface MimePart\n\nReturns:\n\ncontent-transfer-encoding\n\nThrows: MessagingExceptionSee Also:headers\n\ngetContentID\n\npublic String getContentID() throws MessagingException\n\nReturns the value of the \"Content-ID\" header field. Returns null if the field is unavailable or its value is absent.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getContentID in interface MimePart\n\nReturns:\n\ncontent-ID\n\nThrows: MessagingException\n\nsetContentID\n\npublic void setContentID(String cid) throws MessagingException\n\nSet the \"Content-ID\" header field of this body part. If the cid parameter is null, any existing \"Content-ID\" is removed.\n\nThrows: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException\n\nSince:\n\nJavaMail 1.3\n\ngetContentMD5\n\npublic String getContentMD5() throws MessagingException\n\nReturn the value of the \"Content-MD5\" header field. Returns null if this field is unavailable or its value is absent.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getContentMD5 in interface MimePart\n\nReturns:\n\ncontent-MD5\n\nThrows: MessagingException\n\nsetContentMD5\n\npublic void setContentMD5(String md5) throws MessagingException\n\nSet the \"Content-MD5\" header field of this body part.\n\nSpecified by:setContentMD5 in interface MimePart\n\nParameters:md5 - the MD5 value Throws: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException\n\ngetContentLanguage\n\npublic String[] getContentLanguage() throws MessagingException\n\nGet the languages specified in the Content-Language header of this MimePart. The Content-Language header is defined by RFC 1766. Returns null if this header is not available or its value is absent.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getContentLanguage in interface MimePart\n\nThrows: MessagingException\n\nsetContentLanguage\n\npublic void setContentLanguage(String[] languages) throws MessagingException\n\nSet the Content-Language header of this MimePart. The Content-Language header is defined by RFC 1766.\n\nSpecified by:setContentLanguage in interface MimePart\n\nParameters:languages - array of language tags Throws: MessagingException\n\ngetDescription\n\npublic String getDescription() throws MessagingException\n\nReturns the \"Content-Description\" header field of this body part. This typically associates some descriptive information with this part. Returns null if this field is unavailable or its value is absent.\n\nIf the Content-Description field is encoded as per RFC 2047, it is decoded and converted into Unicode. If the decoding or conversion fails, the raw data is returned as is.\n\nThis implementation uses getHeader(name) to obtain the requisite header field.\n\nSpecified by:getDescription in interface Part\n\nReturns:\n\ncontent description\n\nThrows: MessagingException\n\nsetDescription\n\npublic void setDescription(String description) throws MessagingException\n\nSet the \"Content-Description\" header field for this body part. If the description parameter is null, then any existing \"Content-Description\" fields are removed.\n\nIf the description contains non US-ASCII characters, it will be encoded using the platform's default charset. If the description contains only US-ASCII characters, no encoding is done and it is used as is.\n\nNote that if the charset encoding process fails, a MessagingException is thrown, and an UnsupportedEncodingException is included in the chain of nested exceptions within the MessagingException.\n\nSpecified by:setDescription in interface Part\n\nParameters:description - content description Throws: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException - otherwise; an UnsupportedEncodingException may be included in the exception chain if the charset conversion fails.\n\nsetDescription\n\npublic void setDescription(String description, String charset) throws MessagingException\n\nSet the \"Content-Description\" header field for this body part. If the description parameter is null, then any existing \"Content-Description\" fields are removed.\n\nIf the description contains non US-ASCII characters, it will be encoded using the specified charset. If the description contains only US-ASCII characters, no encoding is done and it is used as is.\n\nNote that if the charset encoding process fails, a MessagingException is thrown, and an UnsupportedEncodingException is included in the chain of nested exceptions within the MessagingException.\n\nParameters:description - Descriptioncharset - Charset for encoding Throws: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException - otherwise; an UnsupportedEncodingException may be included in the exception chain if the charset conversion fails.\n\ngetFileName\n\npublic String getFileName() throws MessagingException\n\nGet the filename associated with this body part.\n\nReturns the value of the \"filename\" parameter from the \"Content-Disposition\" header field of this body part. If its not available, returns the value of the \"name\" parameter from the \"Content-Type\" header field of this body part. Returns null if both are absent.\n\nSpecified by:getFileName in interface Part\n\nReturns:\n\nfilename\n\nThrows: MessagingException\n\nsetFileName\n\npublic void setFileName(String filename) throws MessagingException\n\nSet the filename associated with this body part, if possible.\n\nSets the \"filename\" parameter of the \"Content-Disposition\" header field of this body part.\n\nSpecified by:setFileName in interface Part\n\nParameters:filename - Filename to associate with this part Throws: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException\n\ngetInputStream\n\npublic InputStream getInputStream() throws IOException, MessagingException\n\nReturn a decoded input stream for this body part's \"content\".\n\nThis implementation obtains the input stream from the DataHandler. That is, it invokes getDataHandler().getInputStream();\n\nSpecified by:getInputStream in interface Part\n\nReturns:\n\nan InputStream\n\nThrows: MessagingException IOException - this is typically thrown by the DataHandler. Refer to the documentation for javax.activation.DataHandler for more details.See Also:getContentStream(), DataHandler.getInputStream()\n\ngetContentStream\n\nprotected InputStream getContentStream() throws MessagingException\n\nProduce the raw bytes of the content. This method is used when creating a DataHandler object for the content. Subclasses that can provide a separate input stream for just the Part content might want to override this method.\n\nThrows: MessagingExceptionSee Also:content, MimeMessage.getContentStream()\n\ngetRawInputStream\n\npublic InputStream getRawInputStream() throws MessagingException\n\nReturn an InputStream to the raw data with any Content-Transfer-Encoding intact. This method is useful if the \"Content-Transfer-Encoding\" header is incorrect or corrupt, which would prevent the getInputStream method or getContent method from returning the correct data. In such a case the application may use this method and attempt to decode the raw data itself.\n\nThis implementation simply calls the getContentStream method.\n\nThrows: MessagingException\n\nSince:\n\nJavaMail 1.2\n\nSee Also:getInputStream(), getContentStream()\n\ngetDataHandler\n\npublic DataHandler getDataHandler() throws MessagingException\n\nReturn a DataHandler for this body part's content.\n\nThe implementation provided here works just like the the implementation in MimeMessage.\n\nSpecified by:getDataHandler in interface Part\n\nReturns:\n\nDataHandler for the content\n\nThrows: MessagingExceptionSee Also:MimeMessage.getDataHandler()\n\ngetContent\n\npublic Object getContent() throws IOException, MessagingException\n\nReturn the content as a java object. The type of the object returned is of course dependent on the content itself. For example, the native format of a text/plain content is usually a String object. The native format for a \"multipart\" content is always a Multipart subclass. For content types that are unknown to the DataHandler system, an input stream is returned as the content.\n\nThis implementation obtains the content from the DataHandler. That is, it invokes getDataHandler().getContent();\n\nSpecified by:getContent in interface Part\n\nReturns:\n\nObject\n\nThrows: MessagingException IOException - this is typically thrown by the DataHandler. Refer to the documentation for javax.activation.DataHandler for more details.See Also:DataHandler.getContent()\n\nsetDataHandler\n\npublic void setDataHandler(DataHandler dh) throws MessagingException\n\nThis method provides the mechanism to set this body part's content. The given DataHandler object should wrap the actual content.\n\nSpecified by:setDataHandler in interface Part\n\nParameters:dh - The DataHandler for the content Throws: IllegalWriteException - if the underlying implementation does not support modification IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException\n\nsetContent\n\npublic void setContent(Object o, String type) throws MessagingException\n\nA convenience method for setting this body part's content.\n\nThe content is wrapped in a DataHandler object. Note that a DataContentHandler class for the specified type should be available to the JavaMail implementation for this to work right. That is, to do setContent(foobar, \"application/x-foobar\"), a DataContentHandler for \"application/x-foobar\" should be installed. Refer to the Java Activation Framework for more information.\n\nSpecified by:setContent in interface Part\n\nParameters:o - the content objecttype - Mime type of the object Throws: IllegalWriteException - if the underlying implementation does not support modification of existing values IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException\n\nsetText\n\npublic void setText(String text) throws MessagingException\n\nConvenience method that sets the given String as this part's content, with a MIME type of \"text/plain\". If the string contains non US-ASCII characters, it will be encoded using the platform's default charset. The charset is also used to set the \"charset\" parameter.\n\nNote that there may be a performance penalty if text is large, since this method may have to scan all the characters to determine what charset to use.\n\nIf the charset is already known, use the setText() version that takes the charset parameter.\n\nSpecified by:setText in interface MimePart\n\nThrows: MessagingExceptionSee Also:setText(String text, String charset)\n\nsetText\n\npublic void setText(String text, String charset) throws MessagingException\n\nConvenience method that sets the given String as this part's content, with a MIME type of \"text/plain\" and the specified charset. The given Unicode string will be charset-encoded using the specified charset. The charset is also used to set the \"charset\" parameter.\n\nSpecified by:setText in interface MimePart\n\nThrows: MessagingException\n\nsetContent\n\npublic void setContent(Multipart mp) throws MessagingException\n\nThis method sets the body part's content to a Multipart object.\n\nSpecified by:setContent in interface Part\n\nParameters:mp - The multipart object that is the Message's content Throws: IllegalWriteException - if the underlying implementation does not support modification of existing values. IllegalStateException - if this body part is obtained from a READ_ONLY folder. MessagingException\n\nwriteTo\n\npublic void writeTo(OutputStream os) throws IOException, MessagingException\n\nOutput the body part as an RFC 822 format stream.\n\nSpecified by:writeTo in interface Part\n\nThrows: MessagingException IOException - if an error occurs writing to the stream or if an error is generated by the javax.activation layer.See Also:DataHandler.writeTo(java.io.OutputStream)\n\ngetHeader\n\npublic String[] getHeader(String name) throws MessagingException\n\nGet all the headers for this header_name. Note that certain headers may be encoded as per RFC 2047 if they contain non US-ASCII characters and these should be decoded.\n\nSpecified by:getHeader in interface Part\n\nParameters:name - name of header Returns:\n\narray of headers\n\nThrows: MessagingExceptionSee Also:MimeUtility\n\ngetHeader\n\npublic String getHeader(String name, String delimiter) throws MessagingException\n\nGet all the headers for this header name, returned as a single String, with headers separated by the delimiter. If the delimiter is null, only the first header is returned.\n\nSpecified by:getHeader in interface MimePart\n\nParameters:name - the name of this headerdelimiter - delimiter between fields in returned string Returns:\n\nthe value fields for all headers with this name\n\nThrows: MessagingException\n\nsetHeader\n\npublic void setHeader(String name, String value) throws MessagingException\n\nSet the value for this header_name. Replaces all existing header values with this new value. Note that RFC 822 headers must contain only US-ASCII characters, so a header that contains non US-ASCII characters must be encoded as per the rules of RFC 2047.\n\nSpecified by:setHeader in interface Part\n\nParameters:name - header namevalue - header value Throws: MessagingExceptionSee Also:MimeUtility\n\naddHeader\n\npublic void addHeader(String name, String value) throws MessagingException\n\nAdd this value to the existing values for this header_name. Note that RFC 822 headers must contain only US-ASCII characters, so a header that contains non US-ASCII characters must be encoded as per the rules of RFC 2047.\n\nSpecified by:addHeader in interface Part\n\nParameters:name - header namevalue - header value Throws: MessagingExceptionSee Also:MimeUtility\n\nremoveHeader\n\npublic void removeHeader(String name) throws MessagingException\n\nRemove all headers with this name.\n\nSpecified by:removeHeader in interface Part\n\nParameters:name - the name of this header Throws: MessagingException\n\ngetAllHeaders\n\npublic Enumeration getAllHeaders() throws MessagingException\n\nReturn all the headers from this Message as an Enumeration of Header objects.\n\nSpecified by:getAllHeaders in interface Part\n\nReturns:\n\nenumeration of Header objects\n\nThrows: MessagingException\n\ngetMatchingHeaders\n\npublic Enumeration getMatchingHeaders(String[] names) throws MessagingException\n\nReturn matching headers from this Message as an Enumeration of Header objects.\n\nSpecified by:getMatchingHeaders in interface Part\n\nReturns:\n\nenumeration of Header objects\n\nThrows: MessagingException\n\ngetNonMatchingHeaders\n\npublic Enumeration getNonMatchingHeaders(String[] names) throws MessagingException\n\nReturn non-matching headers from this Message as an Enumeration of Header objects.\n\nSpecified by:getNonMatchingHeaders in interface Part\n\nReturns:\n\nenumeration of Header objects\n\nThrows: MessagingException\n\naddHeaderLine\n\npublic void addHeaderLine(String line) throws MessagingException\n\nAdd a header line to this body part\n\nSpecified by:addHeaderLine in interface MimePart\n\nThrows: MessagingException\n\ngetAllHeaderLines\n\npublic Enumeration getAllHeaderLines() throws MessagingException\n\nGet all header lines as an Enumeration of Strings. A Header line is a raw RFC 822 header line, containing both the \"name\" and \"value\" field.\n\nSpecified by:getAllHeaderLines in interface MimePart\n\nThrows: MessagingException\n\ngetMatchingHeaderLines\n\npublic Enumeration getMatchingHeaderLines(String[] names) throws MessagingException\n\nGet matching header lines as an Enumeration of Strings. A Header line is a raw RFC 822 header line, containing both the \"name\" and \"value\" field.\n\nSpecified by:getMatchingHeaderLines in interface MimePart\n\nThrows: MessagingException\n\ngetNonMatchingHeaderLines\n\npublic Enumeration getNonMatchingHeaderLines(String[] names) throws MessagingException\n\nGet non-matching header lines as an Enumeration of Strings. A Header line is a raw RFC 822 header line, containing both the \"name\" and \"value\" field.\n\nSpecified by:getNonMatchingHeaderLines in interface MimePart\n\nThrows: MessagingException\n\nupdateHeaders\n\nprotected void updateHeaders() throws MessagingException\n\nExamine the content of this body part and update the appropriate MIME headers. Typical headers that get set here are Content-Type and Content-Transfer-Encoding. Headers might need to be updated in two cases:\n\n- A message being crafted by a mail application will certainly need to activate this method at some point to fill up its internal headers.\n\n- A message read in from a Store will have obtained all its headers from the store, and so doesn't need this. However, if this message is editable and if any edits have been made to either the content or message structure, we might need to resync our headers.\n\nIn both cases this method is typically called by the Message.saveChanges method.\n\nThrows: MessagingException\n\nJavaTM 2 Platform\n\nEnt. Ed. v1.4"
    }
}