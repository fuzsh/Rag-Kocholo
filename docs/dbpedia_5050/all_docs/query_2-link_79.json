{
    "id": "dbpedia_5050_2",
    "rank": 79,
    "data": {
        "url": "https://developers.google.com/apps-script/reference/spreadsheet/range",
        "read_more_link": "",
        "language": "en",
        "title": "Google for Developers",
        "top_image": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/opengraph/white.png",
        "meta_img": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/opengraph/white.png",
        "images": [
            "https://fonts.gstatic.com/s/i/productlogos/googleg/v6/16px.svg",
            "https://fonts.gstatic.com/s/i/productlogos/googleg/v6/16px.svg",
            "https://www.gstatic.com/images/branding/product/2x/google_cloud_64dp.png",
            "https://developers.google.com/static/site-assets/logo-stack-overflow.svg",
            "https://developers.google.com/static/site-assets/developers_64dp.png",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_64dp.png",
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/apps-script/reference/spreadsheet/range",
        "text": "Class Range\n\nStay organized with collections Save and categorize content based on your preferences.\n\nRange\n\nAccess and modify spreadsheet ranges. A range can be a single cell in a sheet or a group of adjacent cells in a sheet.\n\nMethods\n\nMethodReturn typeBrief description activate()RangeSets the specified range as the active range, with the top left cell in the range as the current cell. activateAsCurrentCell()RangeSets the specified cell as the current cell. addDeveloperMetadata(key)RangeAdds developer metadata with the specified key to the range. addDeveloperMetadata(key, visibility)RangeAdds developer metadata with the specified key and visibility to the range. addDeveloperMetadata(key, value)RangeAdds developer metadata with the specified key and value to the range. addDeveloperMetadata(key, value, visibility)RangeAdds developer metadata with the specified key, value, and visibility to the range. applyColumnBanding()BandingApplies a default column banding theme to the range. applyColumnBanding(bandingTheme)BandingApplies a specified column banding theme to the range. applyColumnBanding(bandingTheme, showHeader, showFooter)BandingApplies a specified column banding theme to the range with specified header and footer settings. applyRowBanding()BandingApplies a default row banding theme to the range. applyRowBanding(bandingTheme)BandingApplies a specified row banding theme to the range. applyRowBanding(bandingTheme, showHeader, showFooter)BandingApplies a specified row banding theme to the range with specified header and footer settings. autoFill(destination, series)voidFills the destinationRange with data based on the data in this range. autoFillToNeighbor(series)voidCalculates a range to fill with new data based on neighboring cells and automatically fills that range with new values based on the data contained in this range. breakApart()RangeBreak any multi-column cells in the range into individual cells again. canEdit()BooleanDetermines whether the user has permission to edit every cell in the range. check()RangeChanges the state of the checkboxes in the range to “checked”. clear()RangeClears the range of contents and formats. clear(options)RangeClears the range of contents, format, data validation rules, and/or comments, as specified with the given advanced options. clearContent()RangeClears the content of the range, leaving the formatting intact. clearDataValidations()RangeClears the data validation rules for the range. clearFormat()RangeClears formatting for this range. clearNote()RangeClears the note in the given cell or cells. collapseGroups()RangeCollapses all groups that are wholly contained within the range. copyFormatToRange(gridId, column, columnEnd, row, rowEnd)voidCopy the formatting of the range to the given location. copyFormatToRange(sheet, column, columnEnd, row, rowEnd)voidCopy the formatting of the range to the given location. copyTo(destination)voidCopies the data from a range of cells to another range of cells. copyTo(destination, copyPasteType, transposed)voidCopies the data from a range of cells to another range of cells. copyTo(destination, options)voidCopies the data from a range of cells to another range of cells. copyValuesToRange(gridId, column, columnEnd, row, rowEnd)voidCopy the content of the range to the given location. copyValuesToRange(sheet, column, columnEnd, row, rowEnd)voidCopy the content of the range to the given location. createDataSourcePivotTable(dataSource)DataSourcePivotTableCreates an empty data source pivot table from the data source, anchored at the first cell in this range. createDataSourceTable(dataSource)DataSourceTableCreates an empty data source table from the data source, anchored at the first cell in this range. createDeveloperMetadataFinder()DeveloperMetadataFinderReturns a DeveloperMetadataFinderApi for finding developer metadata within the scope of this range. createFilter()FilterCreates a filter and applies it to the specified range on the sheet. createPivotTable(sourceData)PivotTableCreates an empty pivot table from the specified sourceData anchored at the first cell in this range. createTextFinder(findText)TextFinderCreates a text finder for the range, which can find and replace text in this range. deleteCells(shiftDimension)voidDeletes this range of cells. expandGroups()RangeExpands the collapsed groups whose range or control toggle intersects with this range. getA1Notation()StringReturns a string description of the range, in A1 notation. getBackground()StringReturns the background color of the top-left cell in the range (for example, '#ffffff'). getBackgroundObject()ColorReturns the background color of the top-left cell in the range. getBackgroundObjects()Color[][]Returns the background colors of the cells in the range. getBackgrounds()String[][]Returns the background colors of the cells in the range (for example, '#ffffff'). getBandings()Banding[]Returns all the bandings that are applied to any cells in this range. getCell(row, column)RangeReturns a given cell within a range. getColumn()IntegerReturns the starting column position for this range. getDataRegion()RangeReturns a copy of the range expanded in the four cardinal Directions to cover all adjacent cells with data in them. getDataRegion(dimension)RangeReturns a copy of the range expanded Direction.UP and Direction.DOWN if the specified dimension is Dimension.ROWS, or Direction.NEXT and Direction.PREVIOUS if the dimension is Dimension.COLUMNS. getDataSourceFormula()DataSourceFormulaReturns the DataSourceFormula for the first cell in the range, or null if the cell doesn't contain a data source formula. getDataSourceFormulas()DataSourceFormula[]Returns the DataSourceFormulas for the cells in the range. getDataSourcePivotTables()DataSourcePivotTable[]Gets all the data source pivot tables intersecting with the range. getDataSourceTables()DataSourceTable[]Gets all the data source tables intersecting with the range. getDataSourceUrl()StringReturns a URL for the data in this range, which can be used to create charts and queries. getDataTable()DataTableReturn the data inside this object as a DataTable. getDataTable(firstRowIsHeader)DataTableReturn the data inside this range as a DataTable. getDataValidation()DataValidationReturns the data validation rule for the top-left cell in the range. getDataValidations()DataValidation[][]Returns the data validation rules for all cells in the range. getDeveloperMetadata()DeveloperMetadata[]Gets the developer metadata associated with this range. getDisplayValue()StringReturns the displayed value of the top-left cell in the range. getDisplayValues()String[][]Returns the rectangular grid of values for this range. getFilter()FilterReturns the filter on the sheet this range belongs to, or null if there is no filter on the sheet. getFontColorObject()ColorReturns the font color of the cell in the top-left corner of the range. getFontColorObjects()Color[][]Returns the font colors of the cells in the range. getFontFamilies()String[][]Returns the font families of the cells in the range. getFontFamily()StringReturns the font family of the cell in the top-left corner of the range. getFontLine()StringGets the line style of the cell in the top-left corner of the range ('underline', 'line-through', or 'none'). getFontLines()String[][]Gets the line style of the cells in the range ('underline', 'line-through', or 'none'). getFontSize()IntegerReturns the font size in point size of the cell in the top-left corner of the range. getFontSizes()Integer[][]Returns the font sizes of the cells in the range. getFontStyle()StringReturns the font style ('italic' or 'normal') of the cell in the top-left corner of the range. getFontStyles()String[][]Returns the font styles of the cells in the range. getFontWeight()StringReturns the font weight (normal/bold) of the cell in the top-left corner of the range. getFontWeights()String[][]Returns the font weights of the cells in the range. getFormula()StringReturns the formula (A1 notation) for the top-left cell of the range, or an empty string if the cell is empty or doesn't contain a formula. getFormulaR1C1()StringReturns the formula (R1C1 notation) for a given cell, or null if none. getFormulas()String[][]Returns the formulas (A1 notation) for the cells in the range. getFormulasR1C1()String[][]Returns the formulas (R1C1 notation) for the cells in the range. getGridId()IntegerReturns the grid ID of the range's parent sheet. getHeight()IntegerReturns the height of the range. getHorizontalAlignment()StringReturns the horizontal alignment of the text (left/center/right) of the cell in the top-left corner of the range. getHorizontalAlignments()String[][]Returns the horizontal alignments of the cells in the range. getLastColumn()IntegerReturns the end column position. getLastRow()IntegerReturns the end row position. getMergedRanges()Range[]Returns an array of Range objects representing merged cells that either are fully within the current range, or contain at least one cell in the current range. getNextDataCell(direction)RangeStarting at the cell in the first column and row of the range, returns the next cell in the given direction that is the edge of a contiguous range of cells with data in them or the cell at the edge of the spreadsheet in that direction. getNote()StringReturns the note associated with the given range. getNotes()String[][]Returns the notes associated with the cells in the range. getNumColumns()IntegerReturns the number of columns in this range. getNumRows()IntegerReturns the number of rows in this range. getNumberFormat()StringGet the number or date formatting of the top-left cell of the given range. getNumberFormats()String[][]Returns the number or date formats for the cells in the range. getRichTextValue()RichTextValueReturns the Rich Text value for the top left cell of the range, or null if the cell value is not text. getRichTextValues()RichTextValue[][]Returns the Rich Text values for the cells in the range. getRow()IntegerReturns the row position for this range. getRowIndex()IntegerReturns the row position for this range. getSheet()SheetReturns the sheet this range belongs to. getTextDirection()TextDirectionReturns the text direction for the top left cell of the range. getTextDirections()TextDirection[][]Returns the text directions for the cells in the range. getTextRotation()TextRotationReturns the text rotation settings for the top left cell of the range. getTextRotations()TextRotation[][]Returns the text rotation settings for the cells in the range. getTextStyle()TextStyleReturns the text style for the top left cell of the range. getTextStyles()TextStyle[][]Returns the text styles for the cells in the range. getValue()ObjectReturns the value of the top-left cell in the range. getValues()Object[][]Returns the rectangular grid of values for this range. getVerticalAlignment()StringReturns the vertical alignment (top/middle/bottom) of the cell in the top-left corner of the range. getVerticalAlignments()String[][]Returns the vertical alignments of the cells in the range. getWidth()IntegerReturns the width of the range in columns. getWrap()BooleanReturns whether the text in the cell wraps. getWrapStrategies()WrapStrategy[][]Returns the text wrapping strategies for the cells in the range. getWrapStrategy()WrapStrategyReturns the text wrapping strategy for the top left cell of the range. getWraps()Boolean[][]Returns whether the text in the cells wrap. insertCells(shiftDimension)RangeInserts empty cells into this range. insertCheckboxes()RangeInserts checkboxes into each cell in the range, configured with true for checked and false for unchecked. insertCheckboxes(checkedValue)RangeInserts checkboxes into each cell in the range, configured with a custom value for checked and the empty string for unchecked. insertCheckboxes(checkedValue, uncheckedValue)RangeInserts checkboxes into each cell in the range, configured with custom values for the checked and unchecked states. isBlank()BooleanReturns true if the range is totally blank. isChecked()BooleanReturns whether all cells in the range have their checkbox state as 'checked'. isEndColumnBounded()BooleanDetermines whether the end of the range is bound to a particular column. isEndRowBounded()BooleanDetermines whether the end of the range is bound to a particular row. isPartOfMerge()BooleanReturns true if the cells in the current range overlap any merged cells. isStartColumnBounded()BooleanDetermines whether the start of the range is bound to a particular column. isStartRowBounded()BooleanDetermines whether the start of the range is bound to a particular row. merge()RangeMerges the cells in the range together into a single block. mergeAcross()RangeMerge the cells in the range across the columns of the range. mergeVertically()RangeMerges the cells in the range together. moveTo(target)voidCut and paste (both format and values) from this range to the target range. offset(rowOffset, columnOffset)RangeReturns a new range that is offset from this range by the given number of rows and columns (which can be negative). offset(rowOffset, columnOffset, numRows)RangeReturns a new range that is relative to the current range, whose upper left point is offset from the current range by the given rows and columns, and with the given height in cells. offset(rowOffset, columnOffset, numRows, numColumns)RangeReturns a new range that is relative to the current range, whose upper left point is offset from the current range by the given rows and columns, and with the given height and width in cells. protect()ProtectionCreates an object that can protect the range from being edited except by users who have permission. randomize()RangeRandomizes the order of the rows in the given range. removeCheckboxes()RangeRemoves all checkboxes from the range. removeDuplicates()RangeRemoves rows within this range that contain values that are duplicates of values in any previous row. removeDuplicates(columnsToCompare)RangeRemoves rows within this range that contain values in the specified columns that are duplicates of values any previous row. setBackground(color)RangeSets the background color of all cells in the range in CSS notation (such as '#ffffff' or 'white'). setBackgroundObject(color)RangeSets the background color of all cells in the range. setBackgroundObjects(color)RangeSets a rectangular grid of background colors (must match dimensions of this range). setBackgroundRGB(red, green, blue)RangeSets the background to the given color using RGB values (integers between 0 and 255 inclusive). setBackgrounds(color)RangeSets a rectangular grid of background colors (must match dimensions of this range). setBorder(top, left, bottom, right, vertical, horizontal)RangeSets the border property. setBorder(top, left, bottom, right, vertical, horizontal, color, style)RangeSets the border property with color and/or style. setDataValidation(rule)RangeSets one data validation rule for all cells in the range. setDataValidations(rules)RangeSets the data validation rules for all cells in the range. setFontColor(color)RangeSets the font color in CSS notation (such as '#ffffff' or 'white'). setFontColorObject(color)RangeSets the font color of the given range. setFontColorObjects(colors)RangeSets a rectangular grid of font colors (must match dimensions of this range). setFontColors(colors)RangeSets a rectangular grid of font colors (must match dimensions of this range). setFontFamilies(fontFamilies)RangeSets a rectangular grid of font families (must match dimensions of this range). setFontFamily(fontFamily)RangeSets the font family, such as \"Arial\" or \"Helvetica\". setFontLine(fontLine)RangeSets the font line style of the given range ('underline', 'line-through', or 'none'). setFontLines(fontLines)RangeSets a rectangular grid of line styles (must match dimensions of this range). setFontSize(size)RangeSets the font size, with the size being the point size to use. setFontSizes(sizes)RangeSets a rectangular grid of font sizes (must match dimensions of this range). setFontStyle(fontStyle)RangeSet the font style for the given range ('italic' or 'normal'). setFontStyles(fontStyles)RangeSets a rectangular grid of font styles (must match dimensions of this range). setFontWeight(fontWeight)RangeSet the font weight for the given range (normal/bold). setFontWeights(fontWeights)RangeSets a rectangular grid of font weights (must match dimensions of this range). setFormula(formula)RangeUpdates the formula for this range. setFormulaR1C1(formula)RangeUpdates the formula for this range. setFormulas(formulas)RangeSets a rectangular grid of formulas (must match dimensions of this range). setFormulasR1C1(formulas)RangeSets a rectangular grid of formulas (must match dimensions of this range). setHorizontalAlignment(alignment)RangeSet the horizontal (left to right) alignment for the given range (left/center/right). setHorizontalAlignments(alignments)RangeSets a rectangular grid of horizontal alignments. setNote(note)RangeSets the note to the given value. setNotes(notes)RangeSets a rectangular grid of notes (must match dimensions of this range). setNumberFormat(numberFormat)RangeSets the number or date format to the given formatting string. setNumberFormats(numberFormats)RangeSets a rectangular grid of number or date formats (must match dimensions of this range). setRichTextValue(value)RangeSets the Rich Text value for the cells in the range. setRichTextValues(values)RangeSets a rectangular grid of Rich Text values. setShowHyperlink(showHyperlink)RangeSets whether or not the range should show hyperlinks. setTextDirection(direction)RangeSets the text direction for the cells in the range. setTextDirections(directions)RangeSets a rectangular grid of text directions. setTextRotation(degrees)RangeSets the text rotation settings for the cells in the range. setTextRotation(rotation)RangeSets the text rotation settings for the cells in the range. setTextRotations(rotations)RangeSets a rectangular grid of text rotations. setTextStyle(style)RangeSets the text style for the cells in the range. setTextStyles(styles)RangeSets a rectangular grid of text styles. setValue(value)RangeSets the value of the range. setValues(values)RangeSets a rectangular grid of values (must match dimensions of this range). setVerticalAlignment(alignment)RangeSet the vertical (top to bottom) alignment for the given range (top/middle/bottom). setVerticalAlignments(alignments)RangeSets a rectangular grid of vertical alignments (must match dimensions of this range). setVerticalText(isVertical)RangeSets whether or not to stack the text for the cells in the range. setWrap(isWrapEnabled)RangeSet the cell wrap of the given range. setWrapStrategies(strategies)RangeSets a rectangular grid of wrap strategies. setWrapStrategy(strategy)RangeSets the text wrapping strategy for the cells in the range. setWraps(isWrapEnabled)RangeSets a rectangular grid of word wrap policies (must match dimensions of this range). shiftColumnGroupDepth(delta)RangeChanges the column grouping depth of the range by the specified amount. shiftRowGroupDepth(delta)RangeChanges the row grouping depth of the range by the specified amount. sort(sortSpecObj)RangeSorts the cells in the given range, by column and order specified. splitTextToColumns()voidSplits a column of text into multiple columns based on an auto-detected delimiter. splitTextToColumns(delimiter)voidSplits a column of text into multiple columns using the specified string as a custom delimiter. splitTextToColumns(delimiter)voidSplits a column of text into multiple columns based on the specified delimiter. trimWhitespace()RangeTrims the whitespace (such as spaces, tabs, or new lines) in every cell in this range. uncheck()RangeChanges the state of the checkboxes in the range to “unchecked”.\n\nDeprecated methods\n\nMethodReturn typeBrief description getFontColor()StringReturns the font color of the cell in the top-left corner of the range, in CSS notation (such as '#ffffff' or 'white'). getFontColors()String[][]Returns the font colors of the cells in the range in CSS notation (such as '#ffffff' or 'white').\n\nDetailed documentation\n\nactivate()\n\nSets the specified range as the active range, with the top left cell in the range as the current cell.\n\nvar sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0]; var range = sheet.getRange('A1:D10'); range.activate(); var selection = sheet.getSelection(); // Current cell: A1 var currentCell = selection.getCurrentCell(); // Active Range: A1:D10 var activeRange = selection.getActiveRange();\n\nReturn\n\nRange — This range, for chaining.\n\nactivateAsCurrentCell()\n\nSets the specified cell as the current cell.\n\nIf the specified cell is present in an existing range, then that range becomes the active range with the cell as the current cell.\n\nIf the specified cell is not present in any existing range, then the existing selection is removed and the cell becomes the current cell and the active range.\n\nNote: The specified Range must consist of one cell, otherwise it throws an exception.\n\n// Gets the first sheet of the spreadsheet. var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0]; // Gets the cell B5 and sets it as the active cell. var range = sheet.getRange('B5'); var currentCell = range.activateAsCurrentCell(); // Logs the activated cell. console.log(currentCell.getA1Notation());\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\naddDeveloperMetadata(key)\n\nAdds developer metadata with the specified key to the range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 on the sheet. const range = sheet.getRange('2:2'); // Adds the key 'NAME' to the developer metadata for row 2. range.addDeveloperMetadata('NAME'); // Gets the metadata and logs it to the console. const developerMetaData = range.getDeveloperMetadata()[0]; console.log(developerMetaData.getKey());\n\nParameters\n\nNameTypeDescription keyStringThe key for the new developer metadata.\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\naddDeveloperMetadata(key, visibility)\n\nAdds developer metadata with the specified key and visibility to the range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 on Sheet1. const range = sheet.getRange('2:2'); // Adds the key 'NAME' and sets the developer metadata visibility to 'DOCUMENT' // for row 2 on Sheet1. range.addDeveloperMetadata('NAME', SpreadsheetApp.DeveloperMetadataVisibility.DOCUMENT); // Gets the updated metadata info and logs it to the console. const developerMetaData = range.getDeveloperMetadata()[0]; console.log(developerMetaData.getKey()); console.log(developerMetaData.getVisibility().toString());\n\nParameters\n\nNameTypeDescription keyStringThe key for the new developer metadata. visibilityDeveloperMetadataVisibilityThe visibility of the new developer metadata.\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\naddDeveloperMetadata(key, value)\n\nAdds developer metadata with the specified key and value to the range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 of Sheet1. const range = sheet.getRange('2:2'); // Adds the key 'NAME' and sets the value to 'GOOGLE' for the metadata of row 2. range.addDeveloperMetadata('NAME', 'GOOGLE'); // Gets the metadata and logs it to the console. const developerMetaData = range.getDeveloperMetadata()[0]; console.log(developerMetaData.getKey()); console.log(developerMetaData.getValue());\n\nParameters\n\nNameTypeDescription keyStringThe key for the new developer metadata. valueStringThe value for the new developer metadata.\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\naddDeveloperMetadata(key, value, visibility)\n\nAdds developer metadata with the specified key, value, and visibility to the range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 on the sheet. const range = sheet.getRange('2:2'); // Adds the key 'NAME', sets the value to 'GOOGLE', and sets the visibility // to PROJECT for row 2 on the sheet. range.addDeveloperMetadata( 'NAME', 'GOOGLE', SpreadsheetApp.DeveloperMetadataVisibility.PROJECT); // Gets the updated metadata info and logs it to the console. const developerMetaData = range.getDeveloperMetadata()[0]; console.log(developerMetaData.getKey()); console.log(developerMetaData.getValue()); console.log(developerMetaData.getVisibility().toString());\n\nParameters\n\nNameTypeDescription keyStringThe key for the new developer metadata. valueStringThe value for the new developer metadata. visibilityDeveloperMetadataVisibilityThe visibility of the new developer metadata.\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\napplyColumnBanding()\n\nApplies a default column banding theme to the range. By default, the banding has header and no footer color.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 on the sheet. const range = sheet.getRange('2:2'); // Applies column banding to row 2. const colBanding = range.applyColumnBanding(); // Gets the first banding on the sheet and logs the color of the header column. console.log(sheet.getBandings()[0].getHeaderColumnColorObject().asRgbColor().asHexString()); // Gets the first banding on the sheet and logs the color of the second column. console.log(sheet.getBandings()[0].getSecondColumnColorObject().asRgbColor().asHexString());\n\nReturn\n\nBanding — The new banding.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\napplyColumnBanding(bandingTheme)\n\nApplies a specified column banding theme to the range. By default, the banding has header and no footer color.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 on the sheet. const range = sheet.getRange('2:2'); // Applies the INDIGO color banding theme to the columns in row 2. const colBanding = range.applyColumnBanding(SpreadsheetApp.BandingTheme.INDIGO); // Gets the first banding on the sheet and logs the color of the second column. console.log(sheet.getBandings()[0].getSecondColumnColorObject().asRgbColor().asHexString());\n\nParameters\n\nNameTypeDescription bandingThemeBandingThemeA color theme to apply to the columns in the range.\n\nReturn\n\nBanding — The new banding.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nApplies a specified column banding theme to the range with specified header and footer settings.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets rows 12-22 on the sheet. const range = sheet.getRange('12:22'); // Applies the BLUE color banding theme to rows 12-22. // Sets the header visibility to false and the footer visibility to true. const colBanding = range.applyColumnBanding(SpreadsheetApp.BandingTheme.BLUE, false, true); // Gets the banding color and logs it to the console. console.log(sheet.getBandings()[0].getSecondColumnColorObject().asRgbColor().asHexString()); // Gets the header color object and logs it to the console. Returns null because the header // visibility is set to false. console.log(sheet.getBandings()[0].getHeaderColumnColorObject()); // Gets the footer color and logs it to the console. console.log(sheet.getBandings()[0].getFooterColumnColorObject().asRgbColor().asHexString());\n\nParameters\n\nNameTypeDescription bandingThemeBandingThemeA color theme to apply to the columns in the range. showHeaderBooleanIf true, the banding theme header color is applied to the first column. showFooterBooleanIf true, the banding theme footer color is applied to the last column.\n\nReturn\n\nBanding — The new banding.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\napplyRowBanding()\n\nApplies a default row banding theme to the range. By default, the banding has header and no footer color.\n\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets // spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets rows 1-30 on Sheet1. const range = sheet.getRange('1:30'); // Applies row banding to rows 1-30. range.applyRowBanding(); // Gets the hex color of the second banded row. const secondRowColor = range.getBandings()[0] .getSecondRowColorObject() .asRgbColor() .asHexString(); // Logs the hex color to console. console.log(secondRowColor);\n\nReturn\n\nBanding — The banding.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\napplyRowBanding(bandingTheme)\n\nApplies a specified row banding theme to the range. By default, the banding has header and no footer color.\n\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets // spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets rows 1-30 on Sheet1. const range = sheet.getRange('1:30'); // Applies the INDIGO row banding theme to rows 1-30. range.applyRowBanding(SpreadsheetApp.BandingTheme.INDIGO); // Gets the hex color of the second banded row. const secondRowColor = range.getBandings()[0] .getSecondRowColorObject() .asRgbColor() .asHexString(); // Logs the hex color to console. console.log(secondRowColor);\n\nParameters\n\nNameTypeDescription bandingThemeBandingThemeA color theme to apply to the rows in the range.\n\nReturn\n\nBanding — The new banding.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nApplies a specified row banding theme to the range with specified header and footer settings.\n\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets // spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets rows 1-30 on Sheet1. const range = sheet.getRange('1:30'); // Applies the INDIGO row banding to rows 1-30 and // specifies to hide the header and show the footer. range.applyRowBanding(SpreadsheetApp.BandingTheme.INDIGO, false, true);\n\nParameters\n\nNameTypeDescription bandingThemeBandingThemeA color theme to apply to the rows in the range. showHeaderBooleanIf true, the banding theme header color is applied to the first row. showFooterBooleanIf true, the banding theme footer color is applied to the last row.\n\nReturn\n\nBanding — The new banding.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nautoFill(destination, series)\n\nFills the destinationRange with data based on the data in this range. The new values are also determined by the specified series type. The destination range must contain this range and extend it in only one direction. For example, the following fills A1:A20 with a series of increasing numbers based on the current values in A1:A4:\n\nvar sheet = SpreadsheetApp.getActiveSheet(); // Has values [1, 2, 3, 4]. var sourceRange = sheet.getRange(\"A1:A4\"); // The range to fill with values. var destination = sheet.getRange(\"A1:A20\"); // Inserts new values in A5:A20, continuing the pattern expressed in A1:A4 sourceRange.autoFill(destination, SpreadsheetApp.AutoFillSeries.DEFAULT_SERIES);\n\nParameters\n\nNameTypeDescription destinationRangeThe range to be auto-filled with values. The destination range should contain this range and extend it in only one direction (upwards, downwards, left, or right). seriesAutoFillSeriesThe type of autoFill series that should be used to calculate new values. The effect of this series differs based on the type and amount of source data.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nautoFillToNeighbor(series)\n\nCalculates a range to fill with new data based on neighboring cells and automatically fills that range with new values based on the data contained in this range. These new values are also determined by the specified series type.\n\nThe calculated destination range considers the surrounding data to determine where the new values should be inserted: if there is data to the immediate left or right of a column that is being auto-filled, new values only extend as far as this adjacent data.\n\nFor example, if A1:A20 is filled with a series of increasing numbers and this method is called on the range B1:B4 which contains a series of dates, new values are only inserted into B5:B20. In this way, these new values \"stick\" to the cells that contain values in column A.\n\nvar sheet = SpreadsheetApp.getActiveSheet(); // A1:A20 has values [1, 2, 3, ... 20]. // B1:B4 has values [1/1/2017, 1/2/2017, ...] var sourceRange = sheet.getRange(\"B1:B4\"); // Results in B5:B20 having values [1/5/2017, ... 1/20/2017] sourceRange.autoFillToNeighbor(SpreadsheetApp.AutoFillSeries.DEFAULT_SERIES);\n\nParameters\n\nNameTypeDescription seriesAutoFillSeriesThe type of autoFill series that should be used to calculate new values. The effect of this series differs based on the type and amount of source data.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nbreakApart()\n\nBreak any multi-column cells in the range into individual cells again.\n\nCalling this function on a range is equivalent to selecting a range and clicking Format > Merge cells > Unmerge.\n\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets // spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:C6 on Sheet1. const range = sheet.getRange('A1:C6'); // Unmerges the range A1:C6 into individual cells. range.breakApart();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncanEdit()\n\nDetermines whether the user has permission to edit every cell in the range. The spreadsheet owner is always able to edit protected ranges and sheets.\n\n// Opens the spreadsheet by its URL. If you created your script from within a Google Sheets // spreadsheet, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:C6 on Sheet1. const range = sheet.getRange('A1:C6'); // Logs whether the user has permission to edit every cell in the range. console.log(range.canEdit());\n\nReturn\n\nBoolean — true if the user has permission to edit every cell in the range; false otherwise.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncheck()\n\nChanges the state of the checkboxes in the range to “checked”. Ignores the cells in the range which currently do not contain either the checked or unchecked value configured.\n\n// Changes the state of cells which currently contain either the checked or unchecked value // configured in the range A1:B10 to 'checked'. var range = SpreadsheetApp.getActive().getRange('A1:B10'); range.check();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nclear()\n\nClears the range of contents and formats.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:D10\"); range.clear();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nclear(options)\n\nClears the range of contents, format, data validation rules, and/or comments, as specified with the given advanced options. By default all data is cleared.\n\n// The code below clears range C2:G7 in the active sheet, but preserves the format, // data validation rules, and comments. SpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 5).clear({contentsOnly: true});\n\nParameters\n\nNameTypeDescription optionsObjectA JavaScript object that specifies advanced parameters, as listed below.\n\nAdvanced parameters\n\nNameTypeDescription commentsOnlyBooleanWhether to clear only the comments. contentsOnlyBooleanWhether to clear only the contents. formatOnlyBooleanWhether to clear only the format; note that clearing format also clears data validation rules. validationsOnlyBooleanWhether to clear only data validation rules. skipFilteredRowsBooleanWhether to avoid clearing filtered rows.\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nclearContent()\n\nClears the content of the range, leaving the formatting intact.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:D10\"); range.clearContent();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nclearDataValidations()\n\nClears the data validation rules for the range.\n\n// Clear the data validation rules for cells A1:B5. var range = SpreadsheetApp.getActive().getRange('A1:B5'); range.clearDataValidations();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nclearFormat()\n\nClears formatting for this range.\n\nThis clears text formatting for the cell or cells in the range, but does not reset any number formatting rules.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:D10\"); range.clearFormat();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nclearNote()\n\nClears the note in the given cell or cells.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:D10\"); range.clearNote();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncollapseGroups()\n\nCollapses all groups that are wholly contained within the range. If no group is fully within the range, the deepest expanded group that is partially within the range is collapsed.\n\nvar sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0]; var range = sheet.getActiveRange(); // All row and column groups within the range are collapsed. range.collapseGroups();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncopyFormatToRange(gridId, column, columnEnd, row, rowEnd)\n\nCopy the formatting of the range to the given location. If the destination is larger or smaller than the source range then the source is repeated or truncated accordingly. Note that this method copies the formatting only.\n\nFor a detailed description of the gridId parameter, see getGridId().\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var source = ss.getSheets()[0]; var range = source.getRange(\"B2:D4\"); // This copies the formatting in B2:D4 in the source sheet to // D4:F6 in the sheet with gridId 1555299895. Note that you can get the gridId // of a sheet by calling sheet.getSheetId() or range.getGridId(). range.copyFormatToRange(1555299895, 4, 6, 4, 6);\n\nParameters\n\nNameTypeDescription gridIdIntegerThe unique ID of the sheet within the spreadsheet, irrespective of position. columnIntegerThe first column of the target range. columnEndIntegerThe end column of the target range. rowIntegerThe start row of the target range. rowEndIntegerThe end row of the target range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nSee also\n\ngetGridId()\n\ncopyFormatToRange(sheet, column, columnEnd, row, rowEnd)\n\nCopy the formatting of the range to the given location. If the destination is larger or smaller than the source range then the source is repeated or truncated accordingly. Note that this method copies the formatting only.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var source = ss.getSheets()[0]; var destination = ss.getSheets()[1]; var range = source.getRange(\"B2:D4\"); // This copies the formatting in B2:D4 in the source sheet to // D4:F6 in the second sheet range.copyFormatToRange(destination, 4, 6, 4, 6);\n\nParameters\n\nNameTypeDescription sheetSheetThe target sheet. columnIntegerThe first column of the target range. columnEndIntegerThe end column of the target range. rowIntegerThe start row of the target range. rowEndIntegerThe end row of the target range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncopyTo(destination)\n\nCopies the data from a range of cells to another range of cells. Both the values and formatting are copied.\n\n// The code below copies the first 5 columns over to the 6th column. var sheet = SpreadsheetApp.getActiveSheet(); var rangeToCopy = sheet.getRange(1, 1, sheet.getMaxRows(), 5); rangeToCopy.copyTo(sheet.getRange(1, 6));\n\nParameters\n\nNameTypeDescription destinationRangeA destination range to copy to; only the top-left cell position is relevant.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncopyTo(destination, copyPasteType, transposed)\n\nCopies the data from a range of cells to another range of cells.\n\n// The code below copies only the values of the first 5 columns over to the 6th column. var sheet = SpreadsheetApp.getActiveSheet(); sheet.getRange(\"A:E\").copyTo(sheet.getRange(\"F1\"), SpreadsheetApp.CopyPasteType.PASTE_VALUES, false);\n\nParameters\n\nNameTypeDescription destinationRangeA destination range to copy to; only the top-left cell position is relevant. copyPasteTypeCopyPasteTypeA type that specifies how the range contents are pasted to the destination. transposedBooleanWhether the range should be pasted in its transposed orientation.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncopyTo(destination, options)\n\nCopies the data from a range of cells to another range of cells. By default both the values and formatting are copied, but this can be overridden using advanced arguments.\n\n// The code below copies only the values of the first 5 columns over to the 6th column. var sheet = SpreadsheetApp.getActiveSheet(); sheet.getRange(\"A:E\").copyTo(sheet.getRange(\"F1\"), {contentsOnly:true});\n\nParameters\n\nNameTypeDescription destinationRangeA destination range to copy to; only the top-left cell position is relevant. optionsObjectA JavaScript object that specifies advanced parameters, as listed below.\n\nAdvanced parameters\n\nNameTypeDescription formatOnlyBooleandesignates that only the format should be copied contentsOnlyBooleandesignates that only the content should be copied\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncopyValuesToRange(gridId, column, columnEnd, row, rowEnd)\n\nCopy the content of the range to the given location. If the destination is larger or smaller than the source range then the source is repeated or truncated accordingly.\n\nFor a detailed description of the gridId parameter, see getGridId().\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var source = ss.getSheets()[0]; var range = source.getRange(\"B2:D4\"); // This copies the data in B2:D4 in the source sheet to // D4:F6 in the sheet with gridId 0 range.copyValuesToRange(0, 4, 6, 4, 6);\n\nParameters\n\nNameTypeDescription gridIdIntegerThe unique ID of the sheet within the spreadsheet, irrespective of position. columnIntegerThe first column of the target range. columnEndIntegerThe end column of the target range. rowIntegerThe start row of the target range. rowEndIntegerThe end row of the target range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nSee also\n\ngetGridId()\n\ncopyValuesToRange(sheet, column, columnEnd, row, rowEnd)\n\nCopy the content of the range to the given location. If the destination is larger or smaller than the source range then the source is repeated or truncated accordingly.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var source = ss.getSheets()[0]; var destination = ss.getSheets()[1]; var range = source.getRange(\"B2:D4\"); // This copies the data in B2:D4 in the source sheet to // D4:F6 in the second sheet range.copyValuesToRange(destination, 4, 6, 4, 6);\n\nParameters\n\nNameTypeDescription sheetSheetThe target sheet. columnIntegerThe first column of the target range. columnEndIntegerThe end column of the target range. rowIntegerThe start row of the target range. rowEndIntegerThe end row of the target range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncreateDataSourcePivotTable(dataSource)\n\nCreates an empty data source pivot table from the data source, anchored at the first cell in this range.\n\nThis example shows how to create and configure a new data source pivot table.\n\nvar spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); var anchorCell = spreadsheet.getSheets()[0].getRange('A1'); var dataSource = spreadsheet.getDataSources()[0]; var pivotTable = anchorCell.createDataSourcePivotTable(dataSource); pivotTable.addRowGroup('dataColumnA'); pivotTable.addColumnGroup('dataColumnB'); pivotTable.addPivotValue('dataColumnC', SpreadsheetApp.PivotTableSummarizeFunction.SUM); pivotTable.addFilter('dataColumnA', SpreadsheetApp.newFilterCriteria().whenTextStartsWith('A').build());\n\nParameters\n\nNameTypeDescription dataSourceDataSourceThe data source to create the pivot table from.\n\nReturn\n\nDataSourcePivotTable — The newly created data source pivot table.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncreateDataSourceTable(dataSource)\n\nCreates an empty data source table from the data source, anchored at the first cell in this range.\n\nThis example shows how to create and configure a new data source table.\n\nvar spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); var anchorCell = spreadsheet.getSheets()[0].getRange('A1'); var dataSource = spreadsheet.getDataSources()[0]; var dataSourceTable = anchorCell.createDataSourceTable(dataSource); .addColumns('dataColumnA', 'dataColumnB', 'dataColumnC') .addSortSpec('dataColumnA', /* ascending= *\\/ true) .addSortSpec('dataColumnB', /* ascending= *\\/ false);\n\nParameters\n\nNameTypeDescription dataSourceDataSourceThe data source to create the pivot table from.\n\nReturn\n\nDataSourceTable — The newly created data source table.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncreateDeveloperMetadataFinder()\n\nReturns a DeveloperMetadataFinderApi for finding developer metadata within the scope of this range. Metadata is within the scope of the range only if it is wholly contained within that range. For example, metadata associated with the row ‘3:3’ is not in the scope of a range ‘A1:D5’ but is within the scope of a range ‘1:5’.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:C6. const range = sheet.getRange('A1:C6'); // Creates a developer metadata finder to search for metadata in the scope of this range. const developerMetaDataFinder = range.createDeveloperMetadataFinder(); // Logs information about the developer metadata finder to the console. const developerMetaData = developerMetaDataFinder.find()[0]; console.log(developerMetaData.getKey()); console.log(developerMetaData.getValue()); console.log(developerMetaData.getVisibility().toString());\n\nReturn\n\nDeveloperMetadataFinder — A developer metadata finder to search for metadata in the scope of this range.\n\ncreateFilter()\n\nCreates a filter and applies it to the specified range on the sheet. You can't create more than one filter on a sheet. To access and modify your filter after you create it, use getFilter() or Sheet.getFilter().\n\nlet ss = SpreadsheetApp.getActiveSheet(); let range = ss.getRange(\"A1:C20\"); // Creates a new filter and applies it to the range A1:C20 on the active sheet. function createFilter() { range.createFilter(); } // Gets the filter and applies criteria that only shows cells that aren't empty. function getFilterAddCriteria() { let filter = range.getFilter(); let criteria = SpreadsheetApp.newFilterCriteria() .whenCellNotEmpty() .build(); filter.setColumnFilterCriteria(2, criteria); }\n\nUse this method to create filters for Grid sheets, the default type of sheet. Grid sheets are sheets that aren't connected to a database. To create other types of filters, refer to the following:\n\nCreate a pivot table filter with PivotTable.addFilter(sourceDataColumn, filterCriteria)\n\nCreate a filter for a sheet connected to a database with DataSourceSheet.addFilter(columnName, filterCriteria)\n\nCreate a filter for a pivot table connected to a database with DataSourcePivotTable.addFilter(columnName, filterCriteria)\n\nReturn\n\nFilter — The new filter.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncreatePivotTable(sourceData)\n\nCreates an empty pivot table from the specified sourceData anchored at the first cell in this range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets cell A1 as a range in order to place the pivot table. const range = sheet.getRange('A1'); // Gets the range of the source data for the pivot table. const dataRange = sheet.getRange('E12:G20'); // Creates an empty pivot table from the specified source data. const pivotTable = range.createPivotTable(dataRange); // Logs the values from the pivot table's source data to the console. console.log(pivotTable.getSourceDataRange().getValues());\n\nParameters\n\nNameTypeDescription sourceDataRangeThe data to create the pivot table from.\n\nReturn\n\nPivotTable — The newly created PivotTable.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ncreateTextFinder(findText)\n\nCreates a text finder for the range, which can find and replace text in this range.\n\nvar sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0]; var range = sheet.getActiveRange(); // Creates a text finder for the range. var textFinder = range.createTextFinder('dog'); // Returns the first occurrence of 'dog'. var firstOccurrence = textFinder.findNext(); // Replaces the last found occurrence of 'dog' with 'cat' and returns the number // of occurrences replaced. var numOccurrencesReplaced = textFinder.replaceWith('cat');\n\nParameters\n\nNameTypeDescription findTextStringThe text to search for.\n\nReturn\n\nTextFinder — The TextFinder for the range\n\ndeleteCells(shiftDimension)\n\nDeletes this range of cells. Existing data in the sheet along the provided dimension is shifted towards the deleted range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:D10\"); range.deleteCells(SpreadsheetApp.Dimension.COLUMNS);\n\nParameters\n\nNameTypeDescription shiftDimensionDimensionThe dimension along which to shift existing data.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\nexpandGroups()\n\nExpands the collapsed groups whose range or control toggle intersects with this range. The control toggle location is the index at which the control toggle is shown, directly before or after the group depending on settings. If there is more than one group at the same location, the shallowest group is expanded.\n\nvar sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0]; var range = sheet.getActiveRange(); // All row and column groups within the range are expanded. range.expandGroups();\n\nReturn\n\nRange — This range, for chaining.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetA1Notation()\n\nReturns a string description of the range, in A1 notation.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(1, 1, 2, 5); // Logs \"A1:E2\" Logger.log(range.getA1Notation());\n\nReturn\n\nString — The string description of the range in A1 notation.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetBackground()\n\nReturns the background color of the top-left cell in the range (for example, '#ffffff').\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var cell = sheet.getRange(\"B5\"); Logger.log(cell.getBackground());\n\nReturn\n\nString — The color code of the background.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetBackgroundObject()\n\nReturns the background color of the top-left cell in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var cell = sheet.getRange(\"B5\"); Logger.log(cell.getBackgroundObject().asRgbColor().asHexString());\n\nReturn\n\nColor — The background color of the top-left cell in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetBackgroundObjects()\n\nReturns the background colors of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B5:C6\"); var bgColors = range.getBackgroundObjects(); for (var i in bgColors) { for (var j in bgColors[i]) { Logger.log(bgColors[i][j].asRgbColor().asHexString()); } }\n\nReturn\n\nColor[][] — A two-dimensional array of background colors.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetBackgrounds()\n\nReturns the background colors of the cells in the range (for example, '#ffffff').\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B5:C6\"); var bgColors = range.getBackgrounds(); for (var i in bgColors) { for (var j in bgColors[i]) { Logger.log(bgColors[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of color codes of the backgrounds.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetBandings()\n\nReturns all the bandings that are applied to any cells in this range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Sets a range. const range = sheet.getRange('A1:K50'); // Gets the banding info for the range. const bandings = range.getBandings(); // Logs the second row color for each banding to the console. for (let banding of bandings) { console.log(banding.getSecondRowColor()); }\n\nReturn\n\nBanding[] — All the bandings that are applied to any cells in this range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetCell(row, column)\n\nReturns a given cell within a range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); // The row and column here are relative to the range // getCell(1,1) in this code returns the cell at B2 var cell = range.getCell(1, 1); Logger.log(cell.getValue());\n\nParameters\n\nNameTypeDescription rowIntegerThe row of the cell relative to the range. columnIntegerThe column of the cell relative to the range.\n\nReturn\n\nRange — A range containing a single cell at the specified coordinates.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetColumn()\n\nReturns the starting column position for this range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); // Logs \"2.0\" Logger.log(range.getColumn());\n\nReturn\n\nInteger — The range's starting column position in the spreadsheet.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataRegion()\n\nReturns a copy of the range expanded in the four cardinal Directions to cover all adjacent cells with data in them. If the range is surrounded by empty cells not including those along the diagonals, the range itself is returned. This is similar to selecting the range and typing Ctrl+A in the editor.\n\n// Assume the active spreadsheet is blank. var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; sheet.getRange(\"C2\").setValue(100); sheet.getRange(\"B3\").setValue(100); sheet.getRange(\"D3\").setValue(100); sheet.getRange(\"C4\").setValue(100); // Logs \"B2:D4\" Logger.log(sheet.getRange(\"C3\").getDataRegion().getA1Notation());\n\nReturn\n\nRange — The range's data region or a range for the entire spreadsheet.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataRegion(dimension)\n\nReturns a copy of the range expanded Direction.UP and Direction.DOWN if the specified dimension is Dimension.ROWS, or Direction.NEXT and Direction.PREVIOUS if the dimension is Dimension.COLUMNS. The expansion of the range is based on detecting data next to the range that is organized like a table. The expanded range covers all adjacent cells with data in them along the specified dimension including the table boundaries. If the original range is surrounded by empty cells along the specified dimension, the range itself is returned. This method is similar to selecting the range and typing Ctrl+Space for columns or Shift+Space for rows in the editor.\n\n// Assume the active spreadsheet is blank. var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; sheet.getRange(\"C2\").setValue(100); sheet.getRange(\"B3\").setValue(100); sheet.getRange(\"D3\").setValue(100); sheet.getRange(\"C4\").setValue(100); // Logs \"C2:C4\" Logger.log(sheet.getRange(\"C3\").getDataRegion(SpreadsheetApp.Dimension.ROWS).getA1Notation()); // Logs \"B3:D3\" Logger.log( sheet.getRange(\"C3\").getDataRegion(SpreadsheetApp.Dimension.COLUMNS).getA1Notation());\n\nParameters\n\nNameTypeDescription dimensionDimensionThe dimension along which to expand the range.\n\nReturn\n\nRange — The range's data region or a range covering each column or each row spanned by the original range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataSourceFormula()\n\nReturns the DataSourceFormula for the first cell in the range, or null if the cell doesn't contain a data source formula.\n\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file, // use SpreadsheetApp.getActiveSpreadsheet(). // TODO(developer): Replace the ID with your own. const ss = SpreadsheetApp.openById('abc123456'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1 on Sheet1. const range = sheet.getRange('A1'); // Gets the data source formula from cell A1. const dataSourceFormula = range.getDataSourceFormula(); // Gets the formula. const formula = dataSourceFormula.getFormula(); // Logs the formula. console.log(formula);\n\nReturn\n\nDataSourceFormula — The DataSourceFormula for the cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataSourceFormulas()\n\nReturns the DataSourceFormulas for the cells in the range.\n\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file, // use SpreadsheetApp.getActiveSpreadsheet(). // TODO(developer): Replace the ID with your own. const ss = SpreadsheetApp.openById('abc123456'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:B5 on Sheet1. const range = sheet.getRange('A1:B5'); // Gets an array of the data source formulas in the range A1:B5. const dataSourceFormulas = range.getDataSourceFormulas(); // Logs the first formula in the array. console.log(dataSourceFormulas[0].getFormula());\n\nReturn\n\nDataSourceFormula[] — An array of DataSourceFormulas.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataSourcePivotTables()\n\nGets all the data source pivot tables intersecting with the range.\n\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file, // use SpreadsheetApp.getActiveSpreadsheet(). // TODO(developer): Replace the ID with your own. const ss = SpreadsheetApp.openById('abc123456'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:G50 on Sheet1. const range = sheet.getRange('A1:G50'); // Gets an array of the data source pivot tables in the range A1:G50. const dataSourcePivotTables = range.getDataSourcePivotTables(); // Logs the last time that the first pivot table in the array was refreshed. console.log(dataSourcePivotTables[0].getStatus().getLastRefreshedTime());\n\nReturn\n\nDataSourcePivotTable[] — A list of data source pivot tables.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataSourceTables()\n\nGets all the data source tables intersecting with the range.\n\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file, // use SpreadsheetApp.getActiveSpreadsheet(). // TODO(developer): Replace the ID with your own. const ss = SpreadsheetApp.openById('abc123456'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:G50 on Sheet1. const range = sheet.getRange('A1:G50'); // Gets the first data source table in the range A1:G50. const dataSourceTable = range.getDataSourceTables()[0]; // Logs the time of the last completed data execution on the data source table. console.log(dataSourceTable.getStatus().getLastExecutionTime());\n\nReturn\n\nDataSourceTable[] — A list of data source tables.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataSourceUrl()\n\nReturns a URL for the data in this range, which can be used to create charts and queries.\n\nCode.gs\n\nfunction doGet() { var ss = SpreadsheetApp.openById('1khO6hBWTNNyvyyxvob7aoZTI9ZvlqqASNeq0e29Tw2c'); var sheet = ss.getSheetByName('ContinentData'); var range = sheet.getRange('A1:B8'); var template = HtmlService.createTemplateFromFile('piechart'); template.dataSourceUrl = range.getDataSourceUrl(); return template.evaluate(); }\n\npiechart.html\n\n<!DOCTYPE html> <html> <head> <!--Load the AJAX API--> <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script> <script type=\"text/javascript\"> // Load the Visualization API and the corechart package. google.charts.load('current', {'packages': ['corechart']}); // Set a callback to run when the Google Visualization API is loaded. google.charts.setOnLoadCallback(queryData); function queryData() { var query = new google.visualization.Query('<?= dataSourceUrl ?>'); query.send(drawChart); } // Callback that creates and populates a data table, // instantiates the pie chart, passes in the data and // draws it. function drawChart(response) { if (response.isError()) { alert('Error: ' + response.getMessage() + ' ' + response.getDetailedMessage()); return; } var data = response.getDataTable(); // Set chart options. var options = { title: 'Population by Continent', width: 400, height: 300 }; // Instantiate and draw the chart, passing in some options. var chart = new google.visualization.PieChart(document.getElementById('chart_div')); chart.draw(data, options); } </script> </head> <body> <!-- Div that holds the pie chart. --> <div id=\"chart_div\"></div> </body> </html>\n\nReturn\n\nString — A URL for this range as a data source that can be passed to other APIs such as charts.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataTable()\n\nReturn the data inside this object as a DataTable.\n\n// Opens the spreadsheet file by its ID. If you created your script from a Google Sheets file, // use SpreadsheetApp.getActiveSpreadsheet(). // TODO(developer): Replace the ID with your own. const ss = SpreadsheetApp.openById('abc123456'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets the range A1:B7 on Sheet1. const range = sheet.getRange('A1:B7'); // Gets the range A1:B7 as a data table. The values in each column must be of the same type. const datatable = range.getDataTable(); // Uses the Charts service to build a bar chart from the data table. // This doesn't build an embedded chart. To do that, use sheet.newChart().addRange() instead. const chart = Charts.newBarChart() .setDataTable(datatable) .setOption('title', 'Your Chart Title Here') .build();\n\nReturn\n\nDataTable — the data as a datatable.\n\ngetDataTable(firstRowIsHeader)\n\nReturn the data inside this range as a DataTable.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:B7\"); // Calling this method with \"true\" sets the first line to be the title of the axes var datatable = range.getDataTable(true); // Note that this doesn't build an EmbeddedChart, so you can't just use // Sheet#insertChart(). To do that, use sheet.newChart().addRange() instead. var chart = Charts.newBarChart() .setDataTable(datatable) .setOption(\"title\", \"Your Title Here\") .build();\n\nParameters\n\nNameTypeDescription firstRowIsHeaderBooleanWhether to treat the first row as a header.\n\nReturn\n\nDataTable — The data as a datatable.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataValidation()\n\nReturns the data validation rule for the top-left cell in the range. If data validation has not been set on the cell, this method returns null.\n\n// Log information about the data validation rule for cell A1. var cell = SpreadsheetApp.getActive().getRange('A1'); var rule = cell.getDataValidation(); if (rule != null) { var criteria = rule.getCriteriaType(); var args = rule.getCriteriaValues(); Logger.log('The data validation rule is %s %s', criteria, args); } else { Logger.log('The cell does not have a data validation rule.') }\n\nReturn\n\nDataValidation — The data validation rule for the top-left cell in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDataValidations()\n\nReturns the data validation rules for all cells in the range. If data validation has not been set on a given cell, this method returns null for that cell's position in the array.\n\n// Change existing data validation rules that require a date in 2013 to require a date in 2014. var oldDates = [new Date('1/1/2013'), new Date('12/31/2013')]; var newDates = [new Date('1/1/2014'), new Date('12/31/2014')]; var sheet = SpreadsheetApp.getActiveSheet(); var range = sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns()); var rules = range.getDataValidations(); for (var i = 0; i < rules.length; i++) { for (var j = 0; j < rules[i].length; j++) { var rule = rules[i][j]; if (rule != null) { var criteria = rule.getCriteriaType(); var args = rule.getCriteriaValues(); if (criteria == SpreadsheetApp.DataValidationCriteria.DATE_BETWEEN && args[0].getTime() == oldDates[0].getTime() && args[1].getTime() == oldDates[1].getTime()) { // Create a builder from the existing rule, then change the dates. rules[i][j] = rule.copy().withCriteria(criteria, newDates).build(); } } } } range.setDataValidations(rules);\n\nReturn\n\nDataValidation[][] — A two-dimensional array of data validation rules associated with the cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDeveloperMetadata()\n\nGets the developer metadata associated with this range.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets row 2 on Sheet1. const range = sheet.getRange('2:2'); // Adds metadata to row 2. range.addDeveloperMetadata('NAME', 'GOOGLE'); // Logs the metadata to console. for (const metadata of range.getDeveloperMetadata()) { console.log(`${metadata.getKey()}: ${metadata.getValue()}`); }\n\nReturn\n\nDeveloperMetadata[] — The developer metadata associated with this range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDisplayValue()\n\nReturns the displayed value of the top-left cell in the range. The value is a String. The displayed value takes into account date, time and currency formatting formatting, including formats applied automatically by the spreadsheet's locale setting. Empty cells return an empty string.\n\n// Opens the spreadsheet file by its URL. If you created your script from within a // Google Sheets file, you can use SpreadsheetApp.getActiveSpreadsheet() instead. // TODO(developer): Replace the URL with your own. const ss = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/abc123456/edit'); // Gets Sheet1 by its name. const sheet = ss.getSheetByName('Sheet1'); // Gets cell A30 and sets its value to 'Test code.' const cell = sheet.getRange('A30'); cell.setValue('Test code'); // Gets the value and logs it to the console. console.log(cell.getDisplayValue());\n\nReturn\n\nString — The displayed value in this cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetDisplayValues()\n\nReturns the rectangular grid of values for this range.\n\nReturns a two-dimensional array of displayed values, indexed by row, then by column. The values are String objects. The displayed value takes into account date, time and currency formatting, including formats applied automatically by the spreadsheet's locale setting. Empty cells are represented by an empty string in the array. Remember that while a range index starts at 1, 1, the JavaScript array is indexed from [0][0].\n\n// The code below gets the displayed values for the range C2:G8 // in the active spreadsheet. Note that this is a JavaScript array. var values = SpreadsheetApp.getActiveSheet().getRange(2, 3, 6, 4).getDisplayValues(); Logger.log(values[0][0]);\n\nReturn\n\nString[][] — A two-dimensional array of values.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFilter()\n\nReturns the filter on the sheet this range belongs to, or null if there is no filter on the sheet.\n\nlet ss = SpreadsheetApp.getActiveSheet(); let range = ss.getRange(\"A1:C20\"); // Gets the existing filter on the sheet that the given range belongs to. let filter = range.getFilter();\n\nReturn\n\nFilter — The filter.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontColorObject()\n\nReturns the font color of the cell in the top-left corner of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getFontColorObject().asRgbColor().asHexString());\n\nReturn\n\nColor — The font color of the top-left cell in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontColorObjects()\n\nReturns the font colors of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getFontColorObjects(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j].asRgbColor().asHexString()); } }\n\nReturn\n\nColor[][] — A two-dimensional array of font colors associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontFamilies()\n\nReturns the font families of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getFontFamilies(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of font families associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontFamily()\n\nReturns the font family of the cell in the top-left corner of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getFontFamily());\n\nReturn\n\nString — The font family of the cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontLine()\n\nGets the line style of the cell in the top-left corner of the range ('underline', 'line-through', or 'none').\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getFontLine());\n\nReturn\n\nString — The font line.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontLines()\n\nGets the line style of the cells in the range ('underline', 'line-through', or 'none').\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getFontLines(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of font lines associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontSize()\n\nReturns the font size in point size of the cell in the top-left corner of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getFontSize());\n\nReturn\n\nInteger — The font size in point size.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontSizes()\n\nReturns the font sizes of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getFontSizes(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nInteger[][] — A two-dimensional array of font sizes of text associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontStyle()\n\nReturns the font style ('italic' or 'normal') of the cell in the top-left corner of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getFontStyle());\n\nReturn\n\nString — The font style of the text in the cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontStyles()\n\nReturns the font styles of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getFontStyles(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of font styles of text associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontWeight()\n\nReturns the font weight (normal/bold) of the cell in the top-left corner of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getFontWeight());\n\nReturn\n\nString — The font weight of the text in the cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFontWeights()\n\nReturns the font weights of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getFontWeights(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of font weights of text associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFormula()\n\nReturns the formula (A1 notation) for the top-left cell of the range, or an empty string if the cell is empty or doesn't contain a formula.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; // This assumes you have a function in B5 that sums up // B2:B4 var range = sheet.getRange(\"B5\"); // Logs the calculated value and the formula Logger.log(\"Calculated value: %s Formula: %s\", range.getValue(), range.getFormula());\n\nReturn\n\nString — The formula for the cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFormulaR1C1()\n\nReturns the formula (R1C1 notation) for a given cell, or null if none.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B5\"); var formula = range.getFormulaR1C1(); Logger.log(formula);\n\nReturn\n\nString — The formula in R1C1 notation.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFormulas()\n\nReturns the formulas (A1 notation) for the cells in the range. Entries in the 2D array are empty strings for cells with no formula.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B5:C6\"); var formulas = range.getFormulas(); for (var i in formulas) { for (var j in formulas[i]) { Logger.log(formulas[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of formulas in string format.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetFormulasR1C1()\n\nReturns the formulas (R1C1 notation) for the cells in the range. Entries in the 2D array are null for cells with no formula.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B5:C6\"); var formulas = range.getFormulasR1C1(); for (var i in formulas) { for (var j in formulas[i]) { Logger.log(formulas[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of formulas in R1C1 notation.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetGridId()\n\nReturns the grid ID of the range's parent sheet. IDs are random non-negative int values.\n\n// Log the grid ID of the first sheet (by tab position) in the spreadsheet. var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getGridId());\n\nReturn\n\nInteger — The grid ID of the parent sheet.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetHeight()\n\nReturns the height of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); // logs 3.0 Logger.log(range.getHeight());\n\nReturn\n\nInteger — The height of the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetHorizontalAlignment()\n\nReturns the horizontal alignment of the text (left/center/right) of the cell in the top-left corner of the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getHorizontalAlignment());\n\nReturn\n\nString — The horizontal alignment of the text in the cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetHorizontalAlignments()\n\nReturns the horizontal alignments of the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getHorizontalAlignments(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of horizontal alignments of text associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetLastColumn()\n\nReturns the end column position.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); // Logs \"4.0\" Logger.log(range.getLastColumn());\n\nReturn\n\nInteger — The range's ending column position in the spreadsheet.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetLastRow()\n\nReturns the end row position.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); // Logs \"4.0\" Logger.log(range.getLastRow());\n\nReturn\n\nInteger — The range's ending row position in the spreadsheet.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetMergedRanges()\n\nReturns an array of Range objects representing merged cells that either are fully within the current range, or contain at least one cell in the current range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"A1:B3\"); var mergedRanges = range.getMergedRanges(); for (var i = 0; i < mergedRanges.length; i++) { Logger.log(mergedRanges[i].getA1Notation()); Logger.log(mergedRanges[i].getDisplayValue()); }\n\nReturn\n\nRange[] — An array of Range objects, representing merged cells overlapping the range.\n\ngetNextDataCell(direction)\n\nStarting at the cell in the first column and row of the range, returns the next cell in the given direction that is the edge of a contiguous range of cells with data in them or the cell at the edge of the spreadsheet in that direction. This is equivalent to typing Ctrl+[arrow key] in the editor.\n\n// Assume the active spreadsheet is blank. var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"C3:E5\"); // Logs \"C1\" Logger.log(range.getNextDataCell(SpreadsheetApp.Direction.UP).getA1Notation());\n\nParameters\n\nNameTypeDescription directionDirectionThe direction in which to find the next data region edge cell.\n\nReturn\n\nRange — The data region edge cell or the cell at the edge of the spreadsheet.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetNote()\n\nReturns the note associated with the given range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); Logger.log(range.getNote());\n\nReturn\n\nString — The note associated with the given cell.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetNotes()\n\nReturns the notes associated with the cells in the range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D4\"); var results = range.getNotes(); for (var i in results) { for (var j in results[i]) { Logger.log(results[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of notes associated with cells in the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetNumColumns()\n\nReturns the number of columns in this range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D5\"); Logger.log(range.getNumColumns());\n\nReturn\n\nInteger — The number of columns in this range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetNumRows()\n\nReturns the number of rows in this range.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B2:D5\"); Logger.log(range.getNumRows());\n\nReturn\n\nInteger — The number of rows in this range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetNumberFormat()\n\nGet the number or date formatting of the top-left cell of the given range. The returned format patterns are described in the Sheets API documentation.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var cell = sheet.getRange(\"C4\"); Logger.log(cell.getNumberFormat());\n\nReturn\n\nString — The number format of the top-left cell of the range.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetNumberFormats()\n\nReturns the number or date formats for the cells in the range. The returned format patterns are described in the Sheets API documentation.\n\nvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getSheets()[0]; var range = sheet.getRange(\"B5:C6\"); var formats = range.getNumberFormats(); for (var i in formats) { for (var j in formats[i]) { Logger.log(formats[i][j]); } }\n\nReturn\n\nString[][] — A two-dimensional array of number formats.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly\n\nhttps://www.googleapis.com/auth/spreadsheets\n\ngetRichTextValue()\n\nReturns the Rich Text value for the top left cell of the range, or null if the cell value is not text.\n\n// Gets the Rich Text value of cell D4. var sheet = SpreadsheetApp.getActiveSheet(); var range = sheet.getRange(\"D4:F6\"); var richText = range.getRichTextValue(); console.log(richText.getText());\n\nReturn\n\nRichTextValue — The Rich Text value of the top left cell in the range, or null if the cell value is not text.\n\nAuthorization\n\nScripts that use this method require authorization with one or more of the following scopes:\n\nhttps://www.googleapis.com/auth/spreadsheets.currentonly"
    }
}