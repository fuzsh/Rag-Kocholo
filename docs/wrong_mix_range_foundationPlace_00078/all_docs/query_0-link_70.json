{
    "id": "wrong_mix_range_foundationPlace_00078_0",
    "rank": 70,
    "data": {
        "url": "https://docs.oracle.com/en-us/iaas/Content/Identity/Concepts/commonpolicies.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Common Policies",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "bare metal identity",
            "governance",
            "iam cloud",
            "iam documentation",
            "iam policies",
            "identity and access management",
            "identity and access management documentation"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn about some common Identity and Access Management (IAM) policies you might want to use in your organization.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This section includes some common policies you might want to use in your organization.\n\nNote\n\nThese policies use example group and compartment names. Make sure to replace them with your own names.\n\nLet the Help Desk manage users\n\nType of access: Ability to create, update, and delete users and their credentials. It does not include the ability to put users in groups.\n\nWhere to create the policy: In the tenancy, because users reside in the tenancy.\n\nAllow group HelpDesk to manage users in tenancy\n\nLet auditors inspect your resources\n\nType of access: Ability to list the resources in all compartments. Be aware that:\n\nThe operation to list IAM policies includes the contents of the policies themselves\n\nThe list operations for Networking resource-types return all the information (for example, the contents of security lists and route tables)\n\nThe operation to list instances requires the read verb instead of inspect, and the contents include the user-provided metadata.\n\nThe operation to view Audit service events requires the read verb instead of inspect.\n\nWhere to create the policy: In the tenancy. Because of the concept of policy inheritance, auditors can then inspect both the tenancy and all compartments beneath it. Or you could choose to give auditors access to only specific compartments if they don't need access to the entire tenancy.\n\nAllow group Auditors to inspect all-resources in tenancy Allow group Auditors to read instances in tenancy Allow group Auditors to read audit-events in tenancy\n\nLet Autonomous Recovery Service admins manage protected databases, recovery service subnets, and protection policies\n\nType of access: Ability to manage Autonomous Recovery Service resources in all compartments:\n\nProtected databases\n\nRecovery service subnets\n\nProtection policies\n\nThis policy is applicable if you want to allow a single set of Recovery Service admins to manage all Recovery Service resources in all the compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to Recovery Service resources in a particular compartment, specify the required compartment instead of the tenancy.\n\nAllow group RecoveryServiceGroup to manage recovery-service-family in tenancy\n\nLet compliance admins manage protection policies\n\nType of access: Ability to manage protection policies in all compartments.\n\nThis policy is applicable if you want to allow a single set of compliance admins to manage Protection Policies in all the compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to protection policies in a particular compartment, specify the required compartment instead of the tenancy.\n\nAllow group ComplianceGroup to manage recovery-service-policy in tenancy\n\nLet network admins manage a cloud network\n\nType of access: Ability to manage all components in Networking. This includes cloud networks, subnets, gateways, virtual circuits, security lists, route tables, and so on. If the network admins need to launch instances to test network connectivity, see Let users launch compute instances.\n\nWhere to create the policy: In the tenancy. Because of the concept of policy inheritance, NetworkAdmins can then manage a cloud network in any compartment. To reduce the scope of access to a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group NetworkAdmins to manage virtual-network-family in tenancy\n\nFor policies used in connecting a DRG to VCNs and DRGs in other regions and tenancies, see IAM Policies for Routing Between VCNs.\n\nLet network admins manage load balancers\n\nType of access: Ability to manage all components in Load Balancer. If the group needs to launch instances, see Let users launch compute instances.\n\nWhere to create the policy: In the tenancy. Because of the concept of policy inheritance, NetworkAdmins can then manage load balancers in any compartment. To reduce the scope of access to a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group NetworkAdmins to manage load-balancers in tenancy\n\nIf the group wants to manage load balancers and network load balancers, additional policies to use the associated networking resources are required:\n\nAllow group NetworkAdmins to manage load-balancers in tenancy Allow group NetworkAdmins to use virtual-network-family in tenancy Allow group NetworkAdmins to manage instances in tenancy\n\nIf a particular group needs to update existing load balancers (for example, modify the backend set) but not create or delete them, use this statement:\n\nAllow group LBUsers to use load-balancers in tenancy\n\nLet users launch compute instances\n\nType of access: Ability to do everything with instances launched into the cloud network and subnets in compartment XYZ, and attach/detach any existing volumes that already exist in compartment ABC. The first statement also lets the group create and manage instance images in compartment ABC. If the group doesn't need to attach or detach volumes, you can delete the volume-family statement.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartments (ABC and XYZ) to have control over the individual policy statements for their compartments, see Policy Attachment.\n\nAllow group InstanceLaunchers to manage instance-family in compartment ABC Allow group InstanceLaunchers to read app-catalog-listing in tenancy Allow group InstanceLaunchers to use volume-family in compartment ABC Allow group InstanceLaunchers to use virtual-network-family in compartment XYZ\n\nTo allow users to create new cloud networks and subnets, see Let network admins manage a cloud network.\n\nTo allow users to determine whether capacity is available for a specific shape before creating an instance, add the following statement to the policy:\n\nAllow group InstanceLaunchers to manage compute-capacity-reports in tenancy\n\nLet users launch compute instances from a specific custom image\n\nType of access: Ability to launch instances into the cloud network and subnets in compartment XYZ using only the specified custom image. The policy also includes the ability to attach/detach any existing volumes that already exist in compartment ABC. If the group doesn't need to attach/detach volumes, you can delete the volume-family statement.\n\nTo specify multiple custom images, you can use conditions.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartments (ABC and XYZ) to have control over the individual policy statements for their compartments, see Policy Attachment.\n\nAllow group ImageUsers to inspect instance-images in compartment ABC Allow group ImageUsers to {INSTANCE_IMAGE_READ} in compartment ABC where target.image.id='<image_OCID>' Allow group ImageUsers to manage instances in compartment ABC Allow group ImageUsers to read app-catalog-listing in tenancy Allow group ImageUsers to use volume-family in compartment ABC Allow group ImageUsers to use virtual-network-family in compartment XYZ\n\nLet image admins manage custom images\n\nType of access: Ability to do everything with custom images and compute instances. Also includes the ability to do everything with Object Storage buckets, objects, and namespaces in compartment Y (for creating images from objects and creating pre-authenticated requests to images); to attach/detach any existing volumes in compartment X; and to launch instances into the cloud network and subnets in compartment Z (for creating new instances to base an image on). If the group doesn't need to attach/detach volumes, you can delete the volume-family statement.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartments (X, Y, and Z) to have control over the individual policy statements for their compartments, see Policy Attachment.\n\nAllow group ImageAdmins to manage instances in compartment X Allow group ImageAdmins to manage instance-images in compartment X Allow group ImageAdmins to read app-catalog-listing in tenancy Allow group ImageAdmins to manage object-family in compartment Y Allow group ImageAdmins to use volume-family in compartment X Allow group ImageAdmins to use virtual-network-family in compartment Z\n\nLet users manage Compute instance configurations, instance pools, and cluster networks\n\nType of access: Ability to do all things with instance configurations, instance pools, and cluster networks in all compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the instance configurations, instance pools, and cluster networks in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group InstancePoolAdmins to manage compute-management-family in tenancy\n\nIf a group needs to create instance configurations using existing instances as a template, and uses the API, SDKs, or command line interface (CLI) to do this, add the following statements to the policy:\n\nAllow group InstancePoolAdmins to read instance-family in tenancy Allow group InstancePoolAdmins to inspect volumes in tenancy\n\nIf a particular group needs to start, stop, or reset the instances in existing instance pools, but not create or delete instance pools, use this statement:\n\nAllow group InstancePoolUsers to use instance-pools in tenancy\n\nIf resources used by the instance pool contain default tags, add the following statement to the policy to give the group permission to the tag namespace Oracle-Tags:\n\nAllow group InstancePoolUsers to use tag-namespaces in tenancy where target.tag-namespace.name = 'oracle-tags'\n\nIf the instance configuration used by the instance pool launches instances in a capacity reservation, add the following statement to the policy:\n\nAllow service compute_management to use compute-capacity-reservations in tenancy\n\nIf the boot volume used in the instance configuration to create an instance pool is encrypted with a KMS key then, add the following statement to the policy\n\nallow service compute, blockstorage, compute_management to use key-family in compartment <compartment_id/<tenant_id>>\n\nLet users manage Compute autoscaling configurations\n\nType of access: Ability to create, update, and delete autoscaling configurations.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the autoscaling configurations in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group AutoscalingAdmins to manage auto-scaling-configurations in tenancy Allow group AutoscalingAdmins to manage instance-pools in tenancy\n\nLet users create Compute instance console connections\n\nType of access: Ability to create instance console connections.\n\nWhere to create the policy: In the tenancy.\n\nAllow group <group_name> to manage instance-console-connection in tenancy Allow group <group_name> to read instance in tenancy\n\nLet users manage Compute dedicated virtual machine hosts\n\nType of access: Ability to create, update, and delete dedicated virtual machine hosts as well as launch instances on dedicated virtual machine hosts.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the dedicated virtual machine hosts and instances in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group DedicatedVMHostAdmins to manage dedicated-vm-hosts in tenancy Allow group DedicatedVMHostAdmins to manage instances in tenancy\n\nLet users launch Compute instances on dedicated virtual machine hosts\n\nType of access: Ability to launch instances on dedicated virtual machine hosts.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the dedicated virtual machine hosts and instances in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group DedicatedVMHostAdmins to use dedicated-vm-hosts in tenancy Allow group DedicatedVMHostAdmins to manage instances in tenancy\n\nLet volume admins manage block volumes, backups, and volume groups\n\nType of access: Ability to do all things with block storage volumes, volume backups, and volume groups in all compartments with the exception of copying volume backups across regions. This makes sense if you want to have a single set of volume admins manage all the volumes, volume backups, and volume groups in all the compartments. The second statement is required in order to attach/detach the volumes from instances.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the volumes/backups and instances in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group VolumeAdmins to manage volume-family in tenancy Allow group VolumeAdmins to use instance-family in tenancy\n\nIf the group needs to also copy volume backups and boot volume backups across regions, add the following statements to the policy:\n\nAllow group VolumeAdmins to use volume-backups in tenancy where request.permission='VOLUME_BACKUP_COPY' Allow group VolumeAdmins to use boot-volume-backups in tenancy where request.permission='BOOT_VOLUME_BACKUP_COPY'\n\nLet volume backup admins manage only backups\n\nType of access: Ability to do all things with volume backups, but not create and manage volumes themselves. This makes sense if you want to have a single set of volume backup admins manage all the volume backups in all the compartments. The first statement gives the required access to the volume that is being backed up; the second statement enables creation of the backup (and the ability to delete backups). The third statement enables the creation and management of user defined backup policies; the fourth statement enables assignment and removal of assignment of backup policies.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the volumes and backups in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group VolumeBackupAdmins to use volumes in tenancy Allow group VolumeBackupAdmins to manage volume-backups in tenancy Allow group VolumeBackupAdmins to manage backup-policies in tenancy Allow group VolumeBackupAdmins to manage backup-policy-assignments in tenancy\n\nIf the group will be using the Console, the following policy gives a better user experience:\n\nAllow group VolumeBackupAdmins to use volumes in tenancy Allow group VolumeBackupAdmins to manage volume-backups in tenancy Allow group VolumeBackupAdmins to inspect volume-attachments in tenancy Allow group VolumeBackupAdmins to inspect instances in tenancy Allow group VolumeBackupAdmins to manage backup-policies in tenancy Allow group VolumeBackupAdmins to manage backup-policy-assignments in tenancy\n\nThe last two statements are not necessary in order to manage volume backups. However, they enable the Console to display all the information about a particular volume and the available backup policies.\n\nLet boot volume backup admins manage only backups\n\nType of access: Ability to do all things with boot volume backups, but not create and manage boot volumes themselves. This makes sense if you want to have a single set of boot volume backup admins manage all the boot volume backups in all the compartments. The first statement gives the required access to the boot volume that is being backed up; the second statement enables creation of the backup (and the ability to delete backups). The third statement enables the creation and management of user defined backup policies; the fourth statement enables assignment and removal of assignment of backup policies.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the boot volumes and backups in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group BootVolumeBackupAdmins to use volumes in tenancy Allow group BootVolumeBackupAdmins to manage boot-volume-backups in tenancy Allow group BootVolumeBackupAdmins to manage backup-policies in tenancy Allow group BootVolumeBackupAdmins to manage backup-policy-assignments in tenancy\n\nIf the group will be using the Console, the following policy gives a better user experience:\n\nAllow group BootVolumeBackupAdmins to use volumes in tenancy Allow group BootVolumeBackupAdmins to manage boot-volume-backups in tenancy Allow group BootVolumeBackupAdmins to inspect instances in tenancy Allow group BootVolumeBackupAdmins to manage backup-policies in tenancy Allow group BootVolumeBackupAdmins to manage backup-policy-assignments in tenancy\n\nThe last two statements are not necessary in order to manage volume backups. However, they enable the Console to display all the information about a particular boot volume and the available backup policies.\n\nLet users create a volume group\n\nType of access: Ability to create a volume group from a set of volumes.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the volumes and volume groups in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group VolumeGroupCreators to inspect volumes in tenancy Allow group VolumeGroupCreators to manage volume-groups in tenancy\n\nLet users clone a volume group\n\nType of access: Ability to clone a volume group from an existing volume group.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the volumes and volume groups in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group VolumeGroupCloners to inspect volumes in tenancy Allow group VolumeGroupCloners to manage volume-groups in tenancy Allow group VolumeGroupCloners to manage volumes in tenancy\n\nLet users create a volume group backup\n\nType of access: Ability to create a volume group backup.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the volumes/backups and volume groups/volume group backups in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group VolumeGroupBackupAdmins to inspect volume-groups in tenancy Allow group VolumeGroupBackupAdmins to manage volumes in tenancy Allow group VolumeGroupBackupAdmins to manage volume-group-backups in tenancy Allow group VolumeGroupBackupAdmins to manage volume-backups in tenancy\n\nLet users restore a volume group backup\n\nType of access: Ability to create a volume group by restoring a volume group backup.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the volumes/backups and volume groups/volume group backups in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group VolumeGroupBackupAdmins to inspect volume-group-backups in tenancy Allow group VolumeGroupBackupAdmins to read volume-backups in tenancy Allow group VolumeGroupBackupAdmins to manage volume-groups in tenancy Allow group VolumeGroupBackupAdmins to manage volumes in tenancy\n\nLet users create, manage, and delete file systems\n\nType of access: Ability to create, manage, or delete a file system or file system clone. Administrative functions for a file system include the ability to rename or delete it or disconnect from it.\n\nWhere to create the policy: In the tenancy, so that the ability to create, manage, or delete a file system is easily granted to all compartments by way of policy inheritance. To reduce the scope of these administrative functions to file systems in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group StorageAdmins to manage file-family in tenancy\n\nLet users create file systems\n\nType of access: Ability to create a file system or file system clone.\n\nWhere to create the policy: In the tenancy, so that the ability to create a file system is easily granted to all compartments by way of policy inheritance. To reduce the scope of these administrative functions to file systems in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group Managers to manage file-systems in tenancy Allow group Managers to read mount-targets in tenancy\n\nThe second statement is required when users create a file system using the Console. It enables the Console to display a list of mount targets that the new file system can be associated with.\n\nLet Object Storage admins manage buckets and objects\n\nType of access: Ability to do all things with Object Storage buckets and objects in all compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the buckets and objects in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group ObjectAdmins to manage buckets in tenancy Allow group ObjectAdmins to manage objects in tenancy\n\nLet users write objects to Object Storage buckets\n\nType of access: Ability to write objects to any Object Storage bucket in compartment ABC (imagine a situation where a client needs to regularly write log files to a bucket). This consists of the ability to list the buckets in the compartment, list the objects in a bucket, and create a new object in a bucket. Although the second statement gives broad access with the manage verb, that access is then scoped down to only the OBJECT_INSPECT and OBJECT_CREATE permissions with the condition at the end of the statement.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of compartment ABC to have control over the policy, see Policy Attachment.\n\nAllow group ObjectWriters to read buckets in compartment ABC Allow group ObjectWriters to manage objects in compartment ABC where any {request.permission='OBJECT_CREATE', request.permission='OBJECT_INSPECT'}\n\nAccess limited to a specific bucket: To limit access to a specific bucket in a particular compartment, add the condition where target.bucket.name='<bucket_name>'. The following policy allows the user to list all the buckets in a particular compartment, but they can only list the objects in and upload objects to BucketA:\n\nAllow group ObjectWriters to read buckets in compartment ABC Allow group ObjectWriters to manage objects in compartment ABC where all {target.bucket.name='BucketA', any {request.permission='OBJECT_CREATE', request.permission='OBJECT_INSPECT'}}\n\nAccess limited to buckets with a specific defined tag: To limit access to the buckets with a specific tag in a given compartment, add the condition where target.bucket.tag.<TagNamespace>.<TagKeyDefinition>='<TagValue>'. The following policy allows the user to list all buckets in compartment ABC, however, they can only list the objects in and upload objects to the bucket with the tag MyTagNamespace.TagKey='MyTagValue':\n\nAllow group ObjectWriters to read buckets in compartment ABC Allow group ObjectWriters to manage objects in compartment ABC where all {target.bucket.tag.MyTagNamespace.TagKey='MyTagValue', any {request.permission='OBJECT_CREATE', request.permission='OBJECT_INSPECT'}}\n\nFor more information about using conditions, see Advanced Policy Features.\n\nLet users download objects from Object Storage buckets\n\nType of access: Ability to download objects from any Object Storage bucket in compartment ABC. This consists of the ability to list the buckets in the compartment, list the objects in a bucket, and read existing objects in a bucket.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of compartment ABC to have control over the policy, see Policy Attachment.\n\nAllow group ObjectReaders to read buckets in compartment ABC Allow group ObjectReaders to read objects in compartment ABC\n\nAccess limited to a specific bucket: To limit access to a specific bucket in a particular compartment, add the condition where target.bucket.name='<bucket_name>'. The following policy allows the user to list all buckets in a particular compartment, but they can only read the objects in and download from BucketA:\n\nAllow group ObjectReaders to read buckets in compartment ABC Allow group ObjectReaders to read objects in compartment ABC where target.bucket.name='BucketA'\n\nAccess limited to buckets with a specific defined tag\n\nTo limit access to the buckets with a specific tag in a given compartment, add the condition where target.bucket.tag.<TagNamespace>.<TagKeyDefinition>='<TagValue>'. The following policy allows the user to list all buckets in compartment ABC, however, they can only read the objects in and download the objects from the bucket with the tag MyTagNamespace.TagKey='MyTagValue':\n\nAllow group ObjectReaders to read buckets in compartment ABC Allow group ObjectReaders to read objects in compartment ABC where target.bucket.tag.MyTagNamespace.TagKey='MyTagValue'\n\nFor more information about using conditions, see Advanced Policy Features.\n\nLet users access customer data in Object Storage encrypted with customer-managed key\n\nType of access: Ability to create customer managed key. This consists of the ability to set up policies to access data encrypted with customer managed key.\n\nallow group <group_in_tenancy> to manage vaults in compartment <key_located_compartment> allow group <group_in_tenancy> to manage keys in compartment <key_located_compartment> allow group <group_in_tenancy> to manage key-delegate in compartment <key_located_compartment> allow group <group_in_tenancy> to use object-family in compartment <key_located_compartment> allow service objectstorage-<region_name> to use keys in compartment <key_located_compartment>\n\nThe last statement in the above policy example is region specific. That means customers need to repeatedly write this statement for each region. To convenience policy setting, customers can use the following policy setting example:\n\nallow group <group_in_tenancy> to manage vaults in compartment <key_located_compartment> allow group <group_in_tenancy> to manage keys in compartment <key_located_compartment> allow group <group_in_tenancy> to manage key-delegate in compartment <key_located_compartment> allow group <group_in_tenancy> to use object-family in compartment <key_located_compartment> allow any-group to use keys in compartment <key_located_compartment> where all {request.principal.type = 'service', request.service.name = /objectstorage-*/}\n\nLet users have full access to a folder in an Object Storage bucket\n\nType of access: Ability of a group of users to do all actions to an Object Storage bucket and its objects.\n\nWhere to create the policy: In the tenancy where the users reside.\n\nALLOW group test-group TO manage objects IN TENANCY where all {target.bucket.name = 'test-bucket', target.object.name = 'prod/*'}\n\nLet users have read-only access to a folder in an Object Storage bucket\n\nType of access: Ability of a group of users to have read-only access to an Object Storage bucket and its objects.\n\nWhere to create the policy: In the tenancy where the users reside.\n\nALLOW group test-group TO manage objects IN TENANCY where all {target.bucket.name = 'test-bucket', target.object.name = 'prod/*', any{request.permission='OBJECT_INSPECT', request.permission='OBJECT_READ'}}\n\nLet users have write-once access to a folder in an Object Storage bucket (no read or delete)\n\nType of access: Ability of a group of users to have write-only access to a folder of objects within a bucket Users can't view a list of objects in the bucket, nor delete any objects it contains.\n\nWhere to create the policy: In the tenancy where the users reside.\n\nALLOW group test-group TO manage objects IN TENANCY where all {target.bucket.name = 'test-bucket', target.object.name = 'prod/*', any{request.permission='OBJECT_CREATE'}}\n\nLet users have read-write access to a folder in an Object Storage bucket (no listing or overwriting)\n\nType of access: Ability of a group of users to have read and write access to a folder of objects within an Object Storage bucket. Users can't generate a list of objects in the folder, nor overwrite any existing objects in the folder.\n\nWhere to create the policy: In the tenancy where the users reside.\n\nALLOW group test-group TO manage objects IN TENANCY where all {target.bucket.name = 'test-bucket', target.object.name = 'prod/*', any{request.permission='OBJECT_CREATE', request.permission='OBJECT_READ'}}\n\nLet a user have all access to an object pattern in an Object Storage bucket\n\nType of access: Ability of a specified user to have full access to all objects that match a specified pattern within an Object Storage bucket.\n\nWhere to create the policy: In the tenancy where the user resides.\n\nALLOW any-group TO manage objects IN TENANCY where all {target.bucket.name = 'test-bucket', target.object.name = '*.pdf', request.user.id='ocid1.user.oc1..exampleuniqueID'}\n\nLet database admins manage Oracle Cloud database systems\n\nType of access: Ability to do all things with the following system types and their associated resources in all compartments:\n\nExadata Database Service on Dedicated Infrastructure instances\n\nbare metal DB systems\n\nvirtual machine DB systems\n\nThis makes sense if you want to have a single set of database admins manage all the bare metal, virtual machine, and Exadata systems in all the compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the database systems in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group DatabaseAdmins to manage database-family in tenancy\n\nLet database admins manage Exadata Database Service on Cloud@Customer instances\n\nType of access: Ability to do all things with the Exadata Database Service on Cloud@Customer resources in all compartments. This makes sense if you want to have a single set of database admins manage all the Exadata Database Service on Cloud@Customer systems in all the compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the Exadata Database Service on Cloud@Customer\n\nsystems in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group ExaCCAdmins to manage database-family in tenancy\n\nLet database admins manage MySQL Database resources\n\nType of access:\n\nAbility to do all things with MySQL Database and MySQL HeatWave resources in all compartments. Creating and managing MySQL Database DB Systems also requires limited access to VCNs, Subnets, and Tag namespaces in the tenancy.\n\nWhere to create the policy: In the tenancy, granting access to all compartments by policy inheritance.\n\nAllow group <group_name> to { COMPARTMENT_INSPECT, VCN_READ, SUBNET_READ, SUBNET_ATTACH, SUBNET_DETACH, NETWORK_SECURITY_GROUP_UPDATE_MEMBERS, VNIC_CREATE, VNIC_UPDATE, VNIC_DELETE, VNIC_ASSOCIATE_NETWORK_SECURITY_GROUP } in tenancy | compartment <compartment_name> | compartment <compartment_ocid> Allow group <group_name> to manage mysql-family in tenancy | compartment <compartment_name> | compartment <compartment_ocid> Allow group <group_name> to use tag-namespaces in tenancy\n\nLet database admins manage Oracle Cloud external database resources\n\nType of access: Ability to do all things with the following OCI external database resources in all compartments:\n\nOCI external container database resources\n\nOCI external pluggable database resources\n\nOCI external non-container database resources\n\nOCI external database connectors\n\nThis makes sense if you want to have a single set of database admins manage all the OCI external database resources in all the compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the OCI external database resources in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group OnPremDatabaseAdmins to manage external-database-family in tenancy\n\nLet database and fleet admins manage Autonomous Databases\n\nType of access: Ability to do all things with Autonomous Database instances in all compartments. Applicable if you want to have a single set of database administrators manage all the Autonomous Database databases in all the compartments.\n\nWhere to create the policy: In the tenancy, so that the access is granted to all compartments by way of policy inheritance. To reduce the scope of access to just the Autonomous Databases in a particular compartment, specify that compartment instead of the tenancy.\n\nExample 1:Â For User Roles Associated with Autonomous Database on Dedicated Exadata Infrastructure. Enables Autonomous Database fleet administrator access to the any workload types, and to manage the following dedicated Exadata infrastructure resources: Autonomous Container Databases and Autonomous VM Clusters.\n\nAllow group DatabaseAdmins to manage autonomous-database-family in tenancy\n\nTip\n\nThe autonomous-database-family aggregate resource-type does not cover the cloud-exadata-infrastructures resource-type needed to provision Autonomous Database on dedicated Exadata infrastructure. See Policy Details for Exadata Database Service on Dedicated Infrastructure for information on the cloud Exadata infrastructure permissions. See Let database admins manage Oracle Cloud database systems for a sample policy covering cloud Exadata infrastructure resources.\n\nIf you must restrict access to the Autonomous VM Cluster and Autonomous Container Database resource types (applicable only to dedicated Exadata infrastructure), then you can do so by creating separate policy statements for database administrators that allow access to only Autonomous Databases and their backups. Because a policy statement can only specify one resource type, you must create separate statements for the database and backup resources.\n\nExample 2:Â For Autonomous Database on Dedicated Exadata Infrastructure. Enables Autonomous Database database administrators access to databases and backups of the various workload types, but denies access to Autonomous Container Databases, Autonomous VM Clusters, and Cloud Exadata Infrastructure resources.\n\nAllow group ADB-Admins to manage autonomous-database in tenancy\n\nAllow group ADB-Admins to manage autonomous-backup in tenancy\n\nTo reduce the scope of access for databases and backups to either the a specific workload type, use a where clause.\n\nExample 3: For Autonomous Database on Dedicated Exadata Infrastructure. Limits Autonomous Database access to databases and backups for a specific workload type.\n\nAllow group ADB-Admins to manage autonomous-databases in tenancy where target.workloadType = 'workload_type'\n\nAllow group ADB-Admins to manage autonomous-backups in tenancy where target.workloadType = 'workload_type'\n\nIn the preceding code examples, workload_type is one of the strings listed in the following table.\n\nAutonomous Database Workload Type Strings Database Workload Type workload_type String for Policies Autonomous Database for Transaction Processing and Mixed Workloads OLTP Autonomous Database for Analytics and Data Warehousing DW Autonomous JSON Database AJD Oracle APEX Application Development APEX\n\nLet security admins manage vaults, keys, and secrets\n\nType of access: Ability to do all things with the Vault service in all compartments. This makes sense if you want to have a single set of security admins manage all the vaults, keys, and secret components (including secrets, secret versions, and secret bundles) in all compartments.\n\nWhere to create the policy: In the tenancy, so that access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the vaults, keys, and secret components in a particular compartment, specify that compartment instead of the tenancy. To reduce the scope of access to just vaults, keys, or secret components, include only the policy statement that pertains to the respective individual or aggregate resource-type, as appropriate.\n\nAllow group SecurityAdmins to manage vaults in tenancy Allow group SecurityAdmins to manage keys in tenancy Allow group SecurityAdmins to manage secret-family in tenancy\n\nLet security admins manage all keys in a specific vault in a compartment\n\nType of access: Ability to do all things with keys in a specific vault in compartment ABC.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment, see Policy Attachment.\n\nAllow group SecurityAdmins to manage keys in compartment ABC where target.vault.id='<vault_OCID>'\n\nLet security admins use a specific key in a compartment\n\nType of access: Ability to list, view, and perform cryptographic operations with a specific key in a compartment.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment, see Policy Attachment.\n\nAllow group SecurityAdmins to use keys in compartment ABC where target.key.id='<key_OCID>'\n\nLet a user group delegate key usage in a compartment\n\nType of access: Ability to associate an Object Storage bucket, Block Volume volume, File Storage file system, Kubernetes cluster, or Streaming stream pool with a specific key authorized for use in a specific compartment. With this policy, a user in the specified group does not have permission to use the key itself. Rather, by association, the key can be used by Object Storage, Block Volume, File Storage, Container Engine for Kubernetes, or Streaming on behalf of the user to:\n\nCreate or update an encrypted bucket, volume, or file system and to encrypt or decrypt data in the bucket, volume, or file system.\n\nCreate Kubernetes clusters with encrypted Kubernetes secrets at rest in the etcd key-value store.\n\nCreate a stream pool to encrypt data in the streams in the stream pool.\n\nThis policy requires that you also have a companion policy that lets Object Storage, Block Volume, File Storage, Container Engine for Kubernetes, or Streaming use the key to perform cryptographic operations.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment, see Policy Attachment.\n\nAllow group ObjectWriters, VolumeWriters, FileWriters, ClusterWriters, StreamWriters to use key-delegate in compartment ABC where target.key.id = '<key_OCID>'\n\nLet Block Volume, Object Storage, Container Engine for Kubernetes, and Streaming services encrypt and decrypt volumes, volume backups, buckets, Kubernetes secrets, and stream pools\n\nType of access: Ability to list, view, and perform cryptographic operations with all keys in compartment ABC. Because Object Storage is a regional service, it has regional endpoints. As such, you must specify the regional service name for each region where you're using Object Storage with Vault encryption. This policy also requires that you have a companion policy that allows a user group to use the delegated key that Object Storage, Block Volume, Container Engine for Kubernetes, or Streaming will use.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment, see Policy Attachment.\n\nAllow service blockstorage, objectstorage-<region_name>, oke, streaming to use keys in compartment ABC where target.key.id = '<key_OCID>'\n\nFor Object Storage, replace <region_name> with the appropriate region identifier, for example:\n\nobjectstorage-us-phoenix-1\n\nobjectstorage-us-ashburn-1\n\nobjectstorage-eu-frankfurt-1\n\nobjectstorage-uk-london-1\n\nobjectstorage-ap-tokyo-1\n\nTo determine the region name value of an Oracle Cloud Infrastructure region, see Regions and Availability Domains.\n\nFor Container Engine for Kubernetes, the service name used in the policy is oke.\n\nFor Streaming, the service name used in the policy is streaming.\n\nLet File Storage encrypt and decrypt file systems\n\nType of access: Ability to list, view, and perform cryptographic operations with all keys in compartment ABC. This policy also requires that you have a companion policy that allows a user group to use the delegated key that File Storage will use.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment, see Policy Attachment.\n\nCreate a dynamic group for the file systems with a rule such as the following:\n\nALL { resource.type='filesystem', resource.compartment.id = '<file_system_compartment_OCID>' }\n\nNote\n\nIf you have more than one rule in the dynamic group, ensure that you use Match any rules defined below option.\n\nCreate an IAM policy that gives the dynamic group of file systems access to Vault keys:\n\nallow dynamic-group <dynamic_group_name> to use keys in compartment ABC\n\nLet security admins manage all secrets in a specific vault in a compartment\n\nType of access: Ability to do all things with secrets in a specific vault in compartment ABC.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment, see Policy Attachment.\n\nAllow group SecurityAdmins to manage secret-family in compartment ABC where target.vault.id='<vault_OCID>'\n\nLet users read, update, and rotate all secrets\n\nType of access: Ability to read, update, and rotate all secrets in any vault in the tenancy.\n\nWhere to create the policy: In the tenancy, so that access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the vaults, keys, and secrets in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group SecretsUsers to use secret-family in tenancy\n\nLet users manage their own passwords and credentials\n\nNo policy is required to let users manage their own credentials. All users can change and reset their own passwords, manage their own API keys, and manage their own auth tokens. For more information, see User Credentials.\n\nLet a compartment admin manage the compartment\n\nType of access: Ability to manage all aspects of a particular compartment. For example, a group called A-Admins could manage all aspects of a compartment called Project-A, including writing additional policies that affect the compartment. For more information, see Policy Attachment. For an example of this kind of setup and additional policies that are useful, see Example Scenario.\n\nWhere to create the policy: In the tenancy.\n\nAllow group A-Admins to manage all-resources in compartment Project-A\n\nRestrict admin access to a specific region\n\nType of access: Ability to manage resources in a specific region. Remember that IAM resources must be managed in the home region. If the specified region is not the home region, then the Admin will not be able to manage IAM resources. For more information about the home region, see Managing Regions.\n\nWhere to create the policy: In the tenancy.\n\nAllow group PHX-Admins to manage all-resources in tenancy where request.region='phx'\n\nThe preceding policy allows PHX-Admins to manage all aspects of all resources in US West (Phoenix).\n\nMembers of the PHX-Admins group can only manage IAM resources if the tenancy's home region is US West (Phoenix).\n\nRestrict user access to view only summary announcements\n\nType of access: Ability to view the summary versions of announcements about the operational status of Oracle Cloud Infrastructure services.\n\nWhere to create the policy: In the tenancy.\n\nAllow group AnnouncementListers to inspect announcements in tenancy\n\nThe preceding policy allows AnnouncementListers to view a list of summary announcements.\n\nLet users view details of announcements\n\nType of access: Ability to view the details of announcements about the operational status of Oracle Cloud Infrastructure services.\n\nWhere to create the policy: In the tenancy.\n\nAllow group AnnouncementReaders to read announcements in tenancy\n\nThe preceding policy allows AnnouncementReaders to view a list of summary announcements and the details of specific announcements.\n\nLet streaming admins manage streaming resources\n\nType of access: Ability to do all things with the Streaming service in all compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the streams in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group StreamAdmins to manage stream-family in tenancy\n\nLet streaming users publish messages to streams\n\nType of access: Ability to produce messages to streams with the Streaming service in all compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the streams in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group StreamUsers to use stream-push in tenancy\n\nLet streaming users publish messages to a specific stream\n\nType of access: Ability to produce messages to a stream with the Streaming service.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the streams in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group StreamUsers to use stream-push in tenancy where target.stream.id = '<stream_OCID>'\n\nLet streaming users publish messages to a stream in a specific stream pool\n\nType of access: Ability to produce messages to a stream with the Streaming service.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the streams in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group StreamUsers to use stream-push in tenancy where target.streampool.id = '<streampool_OCID>'\n\nLet streaming users consume messages from streams\n\nType of access: Ability to consume messages from streams with the Streaming service in all compartments.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the streams in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group StreamUsers to use stream-pull in tenancy\n\nLet users list metric definitions in a compartment\n\nType of access: Ability to list metric definitionsÂ in a specific compartment. For more information, see Listing Metric Definitions.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the metric definitions in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group <group_name> to inspect metrics in compartment <compartment_name>\n\nLet users query metrics in a compartment\n\nType of access: Ability to query metricsÂ for supported resources in a specific compartment. For more information, see Creating a Query.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the metrics in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group <group_name> to read metrics in compartment <compartment_name>\n\nRestrict queries to a specific metric namespace\n\nType of access: Ability to query metricsÂ for resources under a specific metric namespaceÂ . For more information, see Creating a Query.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to the specified metric namespace to just within a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group <group_name> to read metrics in compartment <compartment_name> where target.metrics.namespace='<metric_namespace>'\n\nLet users publish custom metrics\n\nType of access: Ability to publish custom metricsÂ under a specific metric namespaceÂ to the Monitoring service, as well as view metric data, create alarms and topics, and use streams with alarms. For more information about publishing custom metrics, see Publishing Custom Metrics.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just metrics in a particular compartment, specify that compartment instead of the tenancy.\n\nNote\n\nTo limit the group to the permissions required for selecting streams, replace use streams with {STREAM_READ, STREAM_PRODUCE}.\n\nAllow group <group_name> to use metrics in tenancy where target.metrics.namespace=<metric_namespace>' Allow group <group_name> to read metrics in tenancy Allow group <group_name> to manage alarms in tenancy Allow group <group_name> to manage ons-topics in tenancy Allow group <group_name> to use streams in tenancy\n\nLet users view alarms\n\nType of access: Ability to get alarm details and get alarm history. Does not include the ability to create alarms or to create or delete topics.\n\nWhere to create the policy: In the tenancy. Because of the concept of policy inheritance, the group can then view alarms in any compartment. To reduce the scope of access to a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group <group_name> to read alarms in tenancy Allow group <group_name> to read metrics in tenancy\n\nLet users manage alarms\n\nType of access: Ability to manage alarms, using streams and existing topics for notifications. Does not include the ability to create or delete topics.\n\nWhere to create the policy: In the tenancy. Because of the concept of policy inheritance, the group can then view and create alarms in any compartment. To reduce the scope of access to a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group <group_name> to manage alarms in tenancy Allow group <group_name> to read metrics in tenancy Allow group <group_name> to use ons-topics in tenancy Allow group <group_name> to use streams in tenancy\n\nLet users manage alarms and create topics\n\nType of access: Ability to manage alarms, including creating topics (and subscriptions) for notifications (and using streams for notifications).\n\nWhere to create the policy: In the tenancy. Because of the concept of policy inheritance, the group can then view and create alarms in any compartment. To reduce the scope of access to a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group <group_name> to manage alarms in tenancy Allow group <group_name> to read metrics in tenancy Allow group <group_name> to manage ons-topics in tenancy Allow group <group_name> to use streams in tenancy\n\nLet users access usage reports\n\nType of access: Ability to view usage reports for your tenancy. For more information about usage reports, see Cost and Usage Reports Overview.\n\nWhere to create the policy: This is a special cross-tenancy policy and must be created in the tenancy. For more information, see Accessing Cost and Usage Reports.\n\ndefine tenancy usage-report as ocid1.tenancy.oc1..aaaaaaaaned4fkpkisbwjlr56u7cj63lf3wffbilvqknstgtvzub7vhqkggq endorse group Administrators to read objects in tenancy usage-report\n\nLet users analyze costs\n\nType of access: Ability to see costs for the tenancy. See Checking Your Expenses and Usage.\n\nWhere to create the policy: In the tenancy so that users in the <Example_Group> can see costs for the entire account.\n\nAllow group <Example_Group> to read usage-reports in tenancy\n\nAllow a group to manage topics and subscriptions\n\nType of access: Ability to get, create, update, and delete topicsÂ in the tenancy, as well as move topics to different compartments in the tenancy. Also includes the ability to create subscriptionsÂ in the tenancy and to publish messagesÂ (broadcast notification messages) to all subscriptions in the tenancy.\n\nWhere to create the policy: In the tenancy.\n\nAllow group TopicManagers to manage ons-topics in tenancy\n\nAllow a group to manage subscriptions\n\nType of access: Ability to list, create, update, and delete subscriptionsÂ for topics in the tenancy. Ability to move subscriptions to different compartments in the tenancy.\n\nWhere to create the policy: In the tenancy.\n\nAllow group SubscriptionUsers to manage ons-subscriptions in tenancy\n\nAllow a group to publish messages to topics\n\nType of access: Ability to broadcast notification messagesÂ to all subscriptionsÂ in the tenancy, as well as list, create, update, and delete subscriptions in the tenancy.\n\nWhere to create the policy: In the tenancy.\n\nAllow group TopicUsers to use ons-topics in tenancy\n\nLet users create, deploy, and manage functions and applications using Cloud Shell\n\nType of access: Ability to create, deploy, and manage OCI Functions applications and functions using Cloud Shell. These policy statements give the group access to Cloud Shell, repositories in Oracle Cloud Infrastructure Registry, logs, metrics, functions, networks, and tracing.\n\nWhere to create the policy: In the tenancy, so that the access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the resources in a particular compartment, you can specify the compartment instead of the tenancy for most policy statements. However, to use cloud-shell, to manage repos, and to read objectstorage-namespaces must always be scoped to the tenancy.\n\nAllow group functions-developers to use cloud-shell in tenancy Allow group functions-developers to manage repos in tenancy Allow group functions-developers to read objectstorage-namespaces in tenancy Allow group functions-developers to manage logging-family in tenancy Allow group functions-developers to read metrics in tenancy Allow group functions-developers to manage functions-family in tenancy Allow group functions-developers to use virtual-network-family in tenancy Allow group functions-developers to use apm-domains in tenancy Allow group functions-developers to read vaults in tenancy Allow group functions-developers to use keys in tenancy Allow service faas to use apm-domains in tenancy Allow service faas to read repos in tenancy where request.operation='ListContainerImageSignatures' Allow service faas to {KEY_READ} in tenancy where request.operation='GetKeyVersion' Allow service faas to {KEY_VERIFY} in tenancy where request.operation='Verify'\n\nLet users list Events rules in a compartment\n\nType of access: Ability to list Events rules.\n\nWhere to create the policy: In the tenancy.\n\nAllow group RuleReaders to read cloudevents-rules in tenancy\n\nThe preceding policy allows RuleReaders to list rules in the tenancy.\n\nLet admins manage Events rules in a compartment\n\nType of access: Ability to manage Events rules, including creating, deleting and updating rules.\n\nWhere to create the policy: In the tenancy.\n\nThis line gives the user inspect access to resources in compartments to select actions.\n\nallow group <RuleAdmins> to inspect compartments in tenancy\n\nThis line gives the user access to defined tags to apply filter tags to rules.\n\nallow group <RuleAdmins> to use tag-namespaces in tenancy\n\nThese lines give the user access to Streaming resources for actions\n\nallow group <RuleAdmins> to inspect streams in tenancy allow group <RuleAdmins> to use stream-push in tenancy allow group <RuleAdmins> to use stream-pull in tenancy\n\nThese lines give the user access to Functions resources for actions.\n\nallow group <RuleAdmins> to use virtual-network-family in tenancy allow group <RuleAdmins> to manage function-family in tenancy\n\nThis line give the user access to Notifications topics for actions.\n\nallow group <RuleAdmins> to use ons-topic in tenancy\n\nThis line gives the user manage access to rules for Events.\n\nallow group <RuleAdmins> to manage cloudevents-rules in tenancy\n\nAllow a group to access all of Cloud Guard\n\nType of access: Read-only access to all of Cloud Guard. In the example policy, the group is \"CloudGuard_ReadOnly.\"\n\nallow group CloudGuard_ReadOnly to read cloud-guard-family in tenancy allow group CloudGuard_ReadOnly to read compartments in tenancy allow group CloudGuard_ReadOnly to read announcements in tenancy\n\nAllow a group to access Cloud Guard problems\n\nType of access: Read-only access to Cloud Guard problems. In the example policy, the group is \"CloudGuard_ReadOnlyProblems.\"\n\nallow group CloudGuard_ReadOnlyProblems to read cloud-guard-family in tenancy allow group CloudGuard_ReadOnlyProblems to inspect cloud-guard-detectors in tenancy allow group CloudGuard_ReadOnlyProblems to inspect cloud-guard-targets in tenancy allow group CloudGuard_ReadOnlyProblems to inspect cloud-guard-resource-types in tenancy allow group CloudGuard_ReadOnlyProblems to read announcements in tenancy allow group CloudGuard_ReadOnlyProblems to read compartments in tenancy allow group CloudGuard_ReadOnlyProblems to read cloud-guard-config in tenancy\n\nAllow a group to access Cloud Guard detector recipes\n\nType of access: Read-only access to Cloud Guard detector recipes. In the example policy, the group is \"CloudGuard_ReadOnlyDetectors.\"\n\nallow group CloudGuard_ReadOnlyDetectors to read cloud-guard-detector-recipes in tenancy allow group CloudGuard_ReadOnlyDetectors to read announcements in tenancy allow group CloudGuard_ReadOnlyDetectors to read compartments in tenancy allow group CloudGuard_ReadOnlyDetectors to read cloud-guard-config in tenancy\n\nAllow a group to access Cloud Guard in a single compartment\n\nType of access: Read-only access to Cloud Guard in a single compartment. In the example policy, the group is \"CloudGuard_ReadOnly_SingleCompartment\" and the compartment name is \"cgDemo_RestrictedAccess.\"\n\nallow group CloudGuard_ReadOnly_SingleCompartment to read compartments in tenancy where target.compartment.name = 'cgDemo_RestrictedAccess' allow group CloudGuard_ReadOnly_SingleCompartment to read cloud-guard-family in compartment cgDemo_RestrictedAccess allow group CloudGuard_ReadOnly_SingleCompartment to read announcements in compartment cgDemo_RestrictedAccess allow group CloudGuard_ReadOnly_SingleCompartment to read cloud-guard-config in tenancy\n\nAllow a group to administer all aspects of Full Stack Disaster Recovery operations in the entire tenancy\n\nType of access: Ability to allow a group to be superusers for all Full Stack Disaster Recovery operations.\n\nWhere to create the policy: In the tenancy\n\nAllow group DRUberAdmins to manage disaster-recovery-family in tenancy\n\nAllow a group to create Full Stack Disaster Recovery configurations and execute Prechecks\n\nType of access: Ability to allow a group to create Disaster Recovery (DR) protection groups, DR plans, and execute Prechecks but not actually create DR plan executions.\n\nWhere to create the policy: In the compartment.\n\nAllow group DRMonitors to manage disaster-recovery-protection-groups in compartment ApplicationERP Allow group DRMonitors to manage disaster-recovery-plans in compartment ApplicationERP Allow group DRMonitors to manage disaster-recovery-prechecks in compartment ApplicationERP\n\nAllow a group of users to create Full Stack Disaster Recovery configurations in a specific compartment\n\nType of access: Ability to allow a group to create Disaster Recovery (DR) protection groups and DR plans but not create any DR plan executions or Prechecks.\n\nWhere to create the policy: In the compartment.\n\nAllow group DRConfig to manage disaster-recovery-protection-groups in compartment ApplicationERP Allow group DRConfig to manage disaster-recovery-plans in compartment ApplicationERP\n\nAllow Object Storage to use Keys in Vault\n\nType of access: Other services to integrate with KMS to use KMS keys.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. If you want the admins of the individual compartment (ABC) to have control over the individual policy statements for their compartment.\n\nExample: Allow service objectstorage-<region> to use keys in compartment ABC where target.key.id = '<key_OCID>'\n\nallow service objectstorage-<region> to use keys in compartment Compartments where target.key.id = ocid1.key.oc1..exampleuniqueID\n\nLet security admins manage all bastions and sessions\n\nType of access: Ability to manage all resources in the Bastion service in all compartments. This makes sense if you want to have a single set of security admins manage all bastionsÂ and sessionsÂ in all compartments.\n\nWhere to create the policy: In the tenancy, so that access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the bastions and bastion sessions in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group SecurityAdmins to manage bastion in tenancy Allow group SecurityAdmins to manage bastion-session in tenancy Allow group SecurityAdmins to manage virtual-network-family in tenancy Allow group SecurityAdmins to read instance-family in tenancy Allow group SecurityAdmins to read instance-agent-plugins in tenancy Allow group SecurityAdmins to inspect work-requests in tenancy\n\nLet security admins manage bastion sessions\n\nType of access: Ability to manage all sessionsÂ on all bastionsÂ and in all compartments, including creating, connecting to, and terminating sessions.\n\nWhere to create the policy: In the tenancy, so that access is easily granted to all compartments by way of policy inheritance. To reduce the scope of access to just the bastion sessions in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group SecurityAdmins to use bastion in tenancy Allow group SecurityAdmins to manage bastion-session in tenancy Allow group SecurityAdmins to manage virtual-network-family in tenancy Allow group SecurityAdmins to read instance-family in tenancy Allow group SecurityAdmins to read instance-agent-plugins in tenancy Allow group SecurityAdmins to inspect work-requests in tenancy\n\nLet security admins manage Bastion sessions for a specific target host in a compartment\n\nType of access: Ability to manage sessionsÂ on a bastionÂ in a specific compartment, and only for sessions that provide connectivity to a specific Compute instance.\n\nWhere to create the policy: In the tenancy, so that access is easily granted to all compartments by way of policy inheritance.\n\nAllow group SecurityAdmins to use bastion in compartment ABC Allow group SecurityAdmins to manage bastion-session in compartment ABC where ALL {target.resource.ocid='<instance_OCID>', target.bastion-session.username='<session_username>'} Allow group SecurityAdmins to manage virtual-network-family in tenancy Allow group SecurityAdmins to read instance-family in tenancy Allow group SecurityAdmins to read instance-agent-plugins in tenancy Allow group SecurityAdmins to inspect work-requests in tenancy\n\nLet security admins configure scanning of instances in all compartments\n\nType of access: Ability to configure Oracle Cloud Infrastructure Vulnerability Scanning Service to scan all Compute instancesÂ in all compartments, and to view the scanning results. Consider this policy if you want to have a single set of security administrators configure vulnerability scanning for all instances.\n\nWhere to create the policy: In the tenancy, which grants access to all compartments by way of policy inheritance. To reduce the scope of access to just the Compute instances in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group SecurityAdmins to manage vss-family in tenancy Allow service vulnerability-scanning-service to manage instances in tenancy Allow service vulnerability-scanning-service to read compartments in tenancy Allow service vulnerability-scanning-service to read vnics in tenancy Allow service vulnerability-scanning-service to read vnic-attachments in tenancy\n\nLet users view vulnerability scan results in all compartments\n\nType of access: Ability to view the results of scanning Compute instancesÂ in all compartments for security vulnerabilities. Consider this policy if you have a dedicated team responsible for reviewing or auditing the security of your entire tenancy.\n\nWhere to create the policy: In the tenancy, which grants access to all compartments by way of policy inheritance. To reduce the scope of access to just the scanning results in a particular compartment, specify that compartment instead of the tenancy.\n\nAllow group SecurityReviewers to read vss-family in tenancy\n\nAllow a group to manage connectors\n\nType of access: Ability to list, create, update, and delete connectorsÂ in the tenancy. Ability to move connectors to different compartments in the tenancy.\n\nWhere to create the policy: In the tenancy.\n\nAllow group A-Admins to manage serviceconnectors in tenancy\n\nSee also IAM Policies (Securing Connector Hub).\n\nAllow a group to call Ops Insights ingest operations at tenancy\n\nType of access: Ability to call Ops Insights ingest operations at the tenancy level only.\n\nWhere to create the policy: In the tenancy.\n\nallow group opsi-users to use opsi-database-insights in tenancy where any {request.operation='IngestSqlBucket', request.operation='IngestSqlText', request.operation='IngestSqlPlanLines'}\n\nLet users create and delete workspaces without networking (Data Integration)\n\nAbility to create, delete, and modify workspaces within a compartment.\n\nallow group <group-name> to manage dis-workspaces in <compartment-name> allow group <group-name> to manage dis-work-requests in <compartment-name> allow group <group-name> to manage tag-namespaces in <compartment-name>\n\nLet users create and delete workspaces with networking (Data Integration)\n\nAbility to create, delete, and modify workspaces within a virtual network.\n\nallow service dataintegration to use virtual-network-family in <compartment-name> allow group <group-name> to manage dis-workspaces in <compartment-name> allow group <group-name> to manage dis-work-requests in <compartment-name> allow group <group-name> to use virtual-network-family in <compartment-name> allow group <group-name> to manage tag-namespaces in <compartment-name>\n\nLet users and resource principal access and use Object Storage for a given workspace (Data Integration)\n\nAbility to create and use Object Storage data assets within all workspaces.\n\nallow any-group to use buckets in <compartment-name> where ALL {request.principal.type='disworkspace'} allow any-group to manage objects in <compartment-name> where ALL {request.principal.type='disworkspace'} allow group <group-name> to use object-family in <compartment-name>\n\nTo give access to an individual workspace, specify the OCID for the workspace where you want to allow access. For example:\n\nallow any-group to use buckets in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>'} allow any-group to manage objects in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>'}\n\nLet users and resource principal access and use autonomous databases as a target for a given workspace (Data Integration)\n\nAbility to create and use autonomous database data assets within all workspaces.\n\nallow any-group to use buckets in <compartment-name> where ALL {request.principal.type='disworkspace'} allow any-group to manage objects in <compartment-name> where ALL {request.principal.type='disworkspace'} allow group <group-name> to use object-family in <compartment-name> allow any-group to manage buckets in <compartment-name> where ALL {request.principal.type='disworkspace', request.permission='PAR_MANAGE'}\n\nTo give access to an individual workspace, specify the OCID for the workspace where you want to allow access. For example:\n\nallow any-group to use buckets in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>'} allow any-group to manage objects in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>'} allow any-group to manage buckets in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>', request.permission='PAR_MANAGE'}\n\nLet users search objects within a workspace (Data Integration)\n\nAbility to search the components of Data Integration in a given workspace.\n\nThis policy must be applied at the tenancy (root compartment) level.\n\nallow service dataintegration to {TENANCY_INSPECT} in tenancy allow service dataintegration to {DIS_METADATA_INSPECT} in tenancy\n\nLet users move workspaces to a new compartment (Data Integration)\n\nAbility to move workspaces to a new compartment.\n\nallow service dataintegration to inspect compartments in <compartment-name> allow group <group-name> to manage dis-workspaces in <compartment-name>\n\nLet users publish tasks to the OCI Data Flow service (Data Integration)\n\nAbility to publish the different tasks within all workspaces to the OCI Data Flow service.\n\nallow any-group to manage dataflow-application in <compartment-name> where ALL {request.principal.type='disworkspace'}\n\nTo give access to an individual workspace, specify the OCID for the workspace where you want to allow access. For example:\n\nallow any-group to manage dataflow-application in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>'}\n\nLet users access the OCI Vault service for a given workspace (Data Integration)\n\nAbility to use OCI Vault secrets within all workspaces.\n\nallow any-group to read secret-bundles in <compartment-name> where ALL {request.principal.type='disworkspace'} allow group <group-name> to read secret-bundles in <compartment-name>\n\nTo give access to an individual workspace, specify the OCID for the workspace where you want to allow access. For example:\n\nallow any-group to read secret-bundles in <compartment-name> where ALL {request.principal.type='disworkspace', request.principal.id='<workspace-ocid>'}\n\nLet admins manage announcement subscriptions\n\nType of access: Ability to manage subscriptions that deliver announcements about the operational status of Oracle Cloud Infrastructure services.\n\nWhere to create the policy: The easiest approach is to put this policy in the tenancy. Because of the concept of policy inheritance, the group that you grant access can then manage announcement subscriptions in any compartment. To reduce the scope of access to announcements for a particular compartment, specify the compartment instead of the tenancy.\n\nAllow group AnnouncementAdmins to manage announcement-subscriptions in tenancy\n\nThe preceding policy allows AnnouncementAdmins to view a list of summary announcements and the details of specific announcements."
    }
}