{
    "id": "wrong_mix_range_foundationPlace_00078_0",
    "rank": 72,
    "data": {
        "url": "https://docs.oracle.com/cd/B13789_01/server.101/b10759/statements_9013.htm",
        "read_more_link": "",
        "language": "en",
        "title": "GRANT",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/prodicon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/bookicon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/conticon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/indxicon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/mix.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/feedback.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/larrow.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/rarrow.gif",
            "https://docs.oracle.com/cd/B13789_01/server.101/b10759/grant.gif",
            "https://docs.oracle.com/cd/B13789_01/server.101/b10759/grant_system_privileges.gif",
            "https://docs.oracle.com/cd/B13789_01/server.101/b10759/grant_object_privileges.gif",
            "https://docs.oracle.com/cd/B13789_01/server.101/b10759/on_object_clause.gif",
            "https://docs.oracle.com/cd/B13789_01/server.101/b10759/grantee_clause.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/larrow.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/rarrow.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/oracle.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/prodicon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/bookicon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/conticon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/indxicon.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/mix.gif",
            "https://docs.oracle.com/cd/B13789_01/dcommon/gifs/feedback.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Purpose\n\nUse the GRANT statement to grant:\n\nSystem privileges to users and roles\n\nRoles to users and roles. Both privileges and roles are either local, global, or external. Table 18-1 lists the system privileges (organized by the database object operated upon). Table 18-2 lists Oracle Database predefined roles.\n\nObject privileges for a particular object to users, roles, and PUBLIC. Table 18-3 summarizes the object privileges that you can grant on each type of object. Table 18-4 lists object privileges and the operations that they authorize.\n\nNotes on Authorizing Database Users\n\nYou can authorize database users through means other than the database and the GRANT statement.\n\nMany Oracle Database privileges are granted through supplied PL/SQL and Java packages. For information on those privileges, please refer to the documentation for the appropriate package.\n\nSome operating systems have facilities that let you grant roles to Oracle Database users with the initialization parameter OS_ROLES. If you choose to grant roles to users through operating system facilities, then you cannot also grant roles to users with the GRANT statement, although you can use the GRANT statement to grant system privileges to users and system privileges and roles to other roles.\n\nAdditional Topics\n\nPrerequisites\n\nSyntax\n\nSemantics\n\nListings of System and Object Privileges\n\nExamples\n\nPrerequisites\n\nTo grant a system privilege, you must either have been granted the system privilege with the ADMIN OPTION or have been granted the GRANT ANY PRIVILEGE system privilege.\n\nTo grant a role, you must either have been granted the role with the ADMIN OPTION or have been granted the GRANT ANY ROLE system privilege, or you must have created the role.\n\nTo grant an object privilege, you must own the object, or the owner of the object must have granted you the object privileges with the GRANT OPTION, or you must have been granted the GRANT ANY OBJECT PRIVILEGE system privilege.\n\nSyntax\n\ngrant::=\n\nDescription of the illustration grant.gif\n\n(grant_system_privileges::=, grant_object_privileges::=)\n\ngrant_system_privileges::=\n\nDescription of the illustration grant_system_privileges.gif\n\n(grantee_clause ::=)\n\ngrant_object_privileges::=\n\nDescription of the illustration grant_object_privileges.gif\n\n(on_object_clause ::=, grantee_clause ::=)\n\non_object_clause ::=\n\nDescription of the illustration on_object_clause.gif\n\ngrantee_clause ::=\n\nDescription of the illustration grantee_clause.gif\n\nSemantics\n\ngrant_system_privileges\n\nUse these clauses to grant system privileges.\n\nsystem_privilege\n\nSpecify the system privilege you want to grant. Table 18-1 lists the system privileges, organized by the database object operated upon.\n\nIf you grant a privilege to a user, then the database adds the privilege to the user's privilege domain. The user can immediately exercise the privilege.\n\nIf you grant a privilege to a role, then the database adds the privilege to the privilege domain of the role. Users who have been granted and have enabled the role can immediately exercise the privilege. Other users who have been granted the role can enable the role and exercise the privilege.\n\nSee Also:\n\nGranting a System Privilege to a User: Example and \"Granting System Privileges to a Role: Example\"\n\nIf you grant a privilege to PUBLIC, then the database adds the privilege to the privilege domains of each user. All users can immediately perform operations authorized by the privilege.\n\nOracle Database provides a shortcut for specifying all system privileges at once:\n\nALL PRIVILEGES: Specify ALL PRIVILEGES to grant all the system privileges listed in Table 18-1, except the SELECT ANY DICTIONARY privilege.\n\nrole\n\nSpecify the role you want to grant. You can grant an Oracle Database predefined role or a user-defined role. Table 18-2 lists the predefined roles.\n\nIf you grant a role to a user, then the database makes the role available to the user. The user can immediately enable the role and exercise the privileges in the privilege domain of the role.\n\nIf you grant a role to another role, then the database adds the privilege domain of the granted role to the privilege domain of the grantee role. Users who have been granted the grantee role can enable it and exercise the privileges in the granted role's privilege domain.\n\nIf you grant a role to PUBLIC, then the database makes the role available to all users. All users can immediately enable the role and exercise the privileges in the privilege domain of the role.\n\nSee Also:\n\n\"Granting a Role to a Role: Example\" and CREATE ROLE for information on creating a user-defined role\n\nIDENTIFIED BY Clause\n\nUse the IDENTIFIED BY clause to specifically identify an existing user by password or to create a nonexistent user. This clause is not valid if the grantee is a role or PUBLIC. If the user specified in the grantee_clause does not exist, then the database creates the user with the password and with the privileges and roles specified in this clause.\n\nWITH ADMIN OPTION\n\nSpecify WITH ADMIN OPTION to enable the grantee to:\n\nGrant the role to another user or role, unless the role is a GLOBAL role\n\nRevoke the role from another user or role\n\nAlter the role to change the authorization needed to access it\n\nDrop the role\n\nIf you grant a system privilege or role to a user without specifying WITH ADMIN OPTION, and then subsequently grant the privilege or role to the user WITH ADMIN OPTION, then the user has the ADMIN OPTION on the privilege or role.\n\nTo revoke the ADMIN OPTION on a system privilege or role from a user, you must revoke the privilege or role from the user altogether and then grant the privilege or role to the user without the ADMIN OPTION.\n\ngrantee_clause\n\nTO grantee_clause identifies users or roles to which the system privilege, role, or object privilege is granted.\n\nRestriction on Grantees\n\nA user, role, or PUBLIC cannot appear more than once in TO grantee_clause.\n\nPUBLIC\n\nSpecify PUBLIC to grant the privileges to all users.\n\nRestrictions on Granting System Privileges and Roles\n\nA privilege or role cannot appear more than once in the list of privileges and roles to be granted.\n\nYou cannot grant a role to itself.\n\nYou cannot grant a role IDENTIFIED GLOBALLY to anything.\n\nYou cannot grant a role IDENTIFIED EXTERNALLY to a global user or global role.\n\nYou cannot grant roles circularly. For example, if you grant the role banker to the role teller, then you cannot subsequently grant teller to banker.\n\ngrant_object_privileges\n\nUse these clauses to grant object privileges.\n\nobject_privilege\n\nSpecify the object privilege you want to grant. You can specify any of the values shown in Table 18-3. See also Table 18-4.\n\nRestriction on Object Privileges\n\nA privilege cannot appear more than once in the list of privileges to be granted.\n\nALL [PRIVILEGES]\n\nSpecify ALL to grant all the privileges for the object that you have been granted with the GRANT OPTION. The user who owns the schema containing an object automatically has all privileges on the object with the GRANT OPTION. The keyword PRIVILEGES is provided for semantic clarity and is optional.\n\ncolumn\n\nSpecify the table or view column on which privileges are to be granted. You can specify columns only when granting the INSERT, REFERENCES, or UPDATE privilege. If you do not list columns, then the grantee has the specified privilege on all columns in the table or view.\n\nFor information on existing column object grants, query the USER_,ALL_, and DBA_COL_PRIVS data dictionary view.\n\non_object_clause\n\nThe on_object_clause identifies the object on which the privileges are granted. Directory schema objects and Java source and resource schema objects are identified separately because they reside in separate namespaces.\n\nIf you can make this grant only because you have the GRANT ANY OBJECT PRIVILEGE system privilege—that is, you are not the owner of object, nor do you have object_privilege on object WITH GRANT OPTION—then the effect of this grant is that you are acting on behalf of the object owner. The *_TAB_PRIVS data dictionary views will reflect that this grant was made by the owner of object.\n\nWITH GRANT OPTION\n\nSpecify WITH GRANT OPTION to enable the grantee to grant the object privileges to other users and roles.\n\nRestriction on Granting WITH GRANT OPTION\n\nYou can specify WITH GRANT OPTION only when granting to a user or to PUBLIC, not when granting to a role.\n\nWITH HIERARCHY OPTION\n\nSpecify WITH HIERARCHY OPTION to grant the specified object privilege on all subobjects of object, such as subviews created under a view, including subobjects created subsequent to this statement.\n\nThis clause is meaningful only in combination with the SELECT object privilege.\n\nobject\n\nSpecify the schema object on which the privileges are to be granted. If you do not qualify object with schema, then the database assumes the object is in your own schema. The object can be one of the following types:\n\nTable, view, or materialized view\n\nSequence\n\nProcedure, function, or package\n\nUser-defined type\n\nSynonym for any of the preceding items\n\nDirectory, library, operator, or indextype\n\nJava source, class, or resource\n\nYou cannot grant privileges directly to a single partition of a partitioned table.\n\nDIRECTORY directory_name\n\nSpecify a directory schema object on which privileges are to be granted. You cannot qualify directory_name with a schema name.\n\nJAVA SOURCE | RESOURCE\n\nThe JAVA clause lets you specify a Java source or resource schema object on which privileges are to be granted.\n\nListings of System and Object Privileges\n\nNote 1: Oracle Database treats a Java class, source, or resource as if it were a procedure for purposes of granting object privileges.\n\nNote 2: Job scheduler objects are created using the DBMS_SCHEDULER package. Once these objects are created, you can grant the EXECUTE object privilege on job scheduler classes and programs. You can grant ALTER privilege on job scheduler jobs, programs, and schedules.\n\nNote 3: The DELETE, INSERT, and UPDATE privileges can be granted only to updatable materialized views.\n\nExamples\n\nGranting a System Privilege to a User: Example\n\nTo grant the CREATE SESSION system privilege to the sample user hr, allowing hr to log on to Oracle Database, issue the following statement:\n\nGRANT CREATE SESSION TO hr;\n\nGranting System Privileges to a Role: Example\n\nThe following statement grants appropriate system privileges to a data warehouse manager role, which was created in the \"Creating a Role: Example\":\n\nGRANT CREATE ANY MATERIALIZED VIEW , ALTER ANY MATERIALIZED VIEW , DROP ANY MATERIALIZED VIEW , QUERY REWRITE , GLOBAL QUERY REWRITE TO dw_manager WITH ADMIN OPTION;\n\nThe dw_manager privilege domain now contains the system privileges related to materialized views.\n\nGranting a Role with the Admin Option: Example\n\nTo grant the dw_manager role with the ADMIN OPTION to the sample user sh, issue the following statement:\n\nGRANT dw_manager TO sh WITH ADMIN OPTION;\n\nUser sh can now perform the following operations with the dw_manager role:\n\nEnable the role and exercise any privileges in the privilege domain of the role, including the CREATE MATERIALIZED VIEW system privilege\n\nGrant and revoke the role to and from other users\n\nDrop the role\n\nGranting Object Privileges to a Role: Example\n\nThe following example grants the SELECT object privileges to a data warehouse user role, which was created in the \"Creating a Role: Example\":\n\nGRANT SELECT ON sh.sales TO warehouse_user;\n\nGranting a Role to a Role: Example\n\nThe following statement grants the warehouse_user role to the dw_manager role. Both roles were created in the \"Creating a Role: Example\":\n\nGRANT warehouse_user TO dw_manager;\n\nThe dw_manager role now contains all of the privileges in the domain of the warehouse_user role.\n\nGranting an Object Privilege on a Directory: Example\n\nTo grant READ on directory bfile_dir to user hr, with the GRANT OPTION, issue the following statement:\n\nGRANT READ ON DIRECTORY bfile_dir TO hr WITH GRANT OPTION;\n\nGranting Object Privileges on a Table to a User: Example\n\nTo grant all privileges on the table oe.bonuses, which was created in \"Merging into a Table: Example\", to the user hr with the GRANT OPTION, issue the following statement:\n\nGRANT ALL ON bonuses TO hr WITH GRANT OPTION;\n\nThe user hr can subsequently perform the following operations:\n\nExercise any privilege on the bonuses table\n\nGrant any privilege on the bonuses table to another user or role\n\nGranting Object Privileges on a View: Example\n\nTo grant SELECT and UPDATE privileges on the view emp_view, which was created in \"Creating a View: Example\", to all users, issue the following statement:\n\nGRANT SELECT, UPDATE ON emp_view TO PUBLIC;\n\nAll users can subsequently query and update the view of employee details.\n\nGranting Object Privileges to a Sequence in Another Schema: Example\n\nTo grant SELECT privilege on the customers_seq sequence in the schema oe to the user hr, issue the following statement:\n\nGRANT SELECT ON oe.customers_seq TO hr;\n\nThe user hr can subsequently generate the next value of the sequence with the following statement:\n\nSELECT oe.customers_seq.NEXTVAL FROM DUAL;\n\nGranting Multiple Object Privileges on Individual Columns: Example\n\nTo grant to user oe the REFERENCES privilege on the employee_id column and the UPDATE privilege on the employee_id, salary, and commission_pct columns of the employees table in the schema hr, issue the following statement:\n\nGRANT REFERENCES (employee_id), UPDATE (employee_id, salary, commission_pct) ON hr.employees TO oe;\n\nThe user oe can subsequently update values of the employee_id, salary, and commission_pct columns. User oe can also define referential integrity constraints that refer to the employee_id column. However, because the GRANT statement lists only these columns, oe cannot perform operations on any of the other columns of the employees table.\n\nFor example, oe can create a table with a constraint:\n\nCREATE TABLE dependent (dependno NUMBER, dependname VARCHAR2(10), employee NUMBER CONSTRAINT in_emp REFERENCES hr.employees(employee_id) );"
    }
}