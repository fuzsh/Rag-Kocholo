personally (bias off) I like irrlicht most of all open-source engines. The license is very liberal (in fact some of the luxf3d fileformat conversion uses irrlicht code), features are solid and support is growing... while it is not technically as advanced as some others, ease of use, clean code and compiling and so on are a huge plus.

Luxinia was mostly born as I wanted to learn coding this stuff from ground up and not work into using another engine, when the basic knowledge isnt there yet.(especially ogre3d and cs are huuuge as beginner) And once some basics were there it was just too much fun to go on

That aside, for those who are more advanced and rather want to dig into c++ and such, I'd recommend irrlicht. Although it is a very minimal engine and doesnt come with a fancy material system or scriptable particles... Ogre3D is on this end more advanced...

(bias on) luxinia's strength lie in the use of a high-level language (lua) and its specific design for that (compared to most c++ engines just wrapping everything when exporting to scripting languages). Which lets you do things a bit quicker and easier than wrangling with compilers, memory allocation... And we got plenty of scriptable fx stuff and both of us are also into art.

however all open-source / free to use engines, or even many of the cheaper engines suffer from the lack of real good tools, and some on the documentation/samples end. At least for luxinia I am aware that there is still quite a way to go, but we are working on it

good news for artists is, that thru increased support and improvements in collada and fbx the situation around getting content into the engines should improve...

the DirectX engines have a slight advantage on being able to use .x and .fx, while OpenGL doesnt really provide something alike and .cgfx just begun to get better support on non nvidia cards.

And especially the moddable engines (HL2, Unreal2k4..) come with better tools, big communities, more artist friendly stuff and often access to at least some of their documentation. And of course if it's not a total conversion, you can build on existing content.

(rant:)

however as coder, you always gotta ask yourself, do I want to actually make a game and use the tech given. Then less tech is a bit better, that gives me more time to focus on the game, plus less tech likely means less work for my artists. Or am I more into the tech myself, hence rather would do ultra pong with Ã¼ber shaders and soft-body ball and such. Cause then likely I will only be able to do less game and I will also require content on a higher level, which given a small game might be doable in proper time.

I guess many projects start as "hey lets do a game" and end up with coders becoming demo coders instead of game coders and falling in love with the tech, while artists have it harder to play catch-up, especially when the proper pipeline tools dont exist.

I would rather recommend a more "get the game done" approach, than loosing yourself in endless features and tech gadgets (although personally I did the direct opposite hehe, but friend does all the game/app related code for luxinia, so progress is made on both ends)

Congradulations on the recent update to Luxinia, Crazy Butcher! Luxinia is really shaping up as a solid engine. I've tried out most of the demos you guys have posted on its site, and it seems a very capable framework for building games and applications.

And I really like the fact that Luxinia uses Lua, and doesn't need to be re-compiled. Compiling is the only way to get complete control over any program. But its also a huge pain in the ass! The linked libraries, the constant error messages, the specific requirements for development environments. Sometimes its just more trouble than its worth. Its really nice to see engines like Luxinia, that focus first and foremost on scripting support. (I believe Panda3D is similar in this respect) Most digital artists don't even want low-level control of a game or demo they're building.

I've really enjoyed working with Irrlicht, myself. It has its shortcomings. (I don't especially like its event receiver, or the way it handles its GUI) But it is one of the easiest to work with and compile. I've successfully compiled it using Visual C++ Express, Dev C++, and XCode. And it is riddled with useful functions to help speed up game development. (including a very capable collision detection system)