{
    "id": "dbpedia_8579_3",
    "rank": 18,
    "data": {
        "url": "https://polycount.com/discussion/104692/material-editors-vs-custom-shader-code",
        "read_more_link": "",
        "language": "en",
        "title": "Material editors vs. Custom shader code",
        "top_image": "https://us.v-cdn.net/5021068/uploads/0MTG10EE0G6C.png",
        "meta_img": "https://us.v-cdn.net/5021068/uploads/0MTG10EE0G6C.png",
        "images": [
            "https://us.v-cdn.net/5021068/uploads/userpics/pavatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar49070_2.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar49070_2.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar14513_10.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar39668_7.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar39168_10.gif",
            "https://polycount.com/plugins/emojiextender/emoji/twitter/smile.png",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar21308_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar14966_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar30785_2.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar21812_6.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar30443_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar14966_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar43116_4.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar13945_5.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar26976_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar33333_1.gif",
            "https://us.v-cdn.net/5021068/uploads/userpics/navatar26976_1.gif",
            "https://polycount.com/plugins/emojiextender/emoji/twitter/smile.png",
            "https://us.v-cdn.net/5021068/uploads/userpics/638/nQ8Z2Q6XZJ5TA.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Bigjohn",
            "Author: velja_bvath",
            "Ace-Angel",
            "Jason Young",
            "Kurt Russell Fan Club"
        ],
        "publish_date": "2012-08-29T21:28:20+00:00",
        "summary": "",
        "meta_description": "So I'm mostly just curious as to how other studios handle this.",
        "meta_lang": "",
        "meta_favicon": "https://us.v-cdn.net/5021068/uploads/favicon_2057333fd190ab0eaa48285b1ebc0234.ico",
        "meta_site_name": "polycount",
        "canonical_link": "https://polycount.com/discussion/104692/material-editors-vs-custom-shader-code",
        "text": "Take what I say with a pinch of salt. Engines themselves actually optimize the code pretty well, granted ofcourse that the guys who made the engine knew what to do to make the magic happen.\n\nThe entire 'nodes are inefficient' issue only exist because many who wrote said infrastructure didn't know what they were doing, and because they tend to leave behind alot of 'rubbish code' without a proper intermediate conveyer, to make the switch to shader types available (CGFX, HLSL, DXAS, etc), but thankfully (and hopefully) this will be thrown out of the window soon enough once ALL the engines actually optimize the stuff well under the hood.\n\nAs for the programmer and how they can save the day for nodes...well, I'm sure someone who actually worked in said area can answer you better.\n\nThe HLSL put out by UDK is really messy looking. Pages and pages of conditional stuff most of which is thrown out by the preprocessor, and loads of unnecessary variables all over the place as nodes save their result in a variable every time. (or at least did last time I looked)\n\nHowever, the compiler is intelligent enough to turn it into very efficient shader code so other than a longish compile time (which appears to be cached as a binary? does some processing when moving to a machine with a different GPU) it doesn't even matter.\n\nThe bulk of the shader code which actually does the lighting and so on is kept out of sight which is a mixed blessing but I would not be surprised if this is hand written in GPU assembler or kept as a compiled binary and just linked to every material's code during the compile process.\n\nI'd say you probably want most of the surfaces in your world to not have anything more complex than basic lighting and texture samples simply to save on fillrate cost, so again it doesn't matter too hugely what the few custom bits of shader code do.\n\nI remember not too long ago a bunch of peeps on some tech forums where talking about creating a unified shader system via Python (I think?), with a user interface but coded.\n\nSo basically, instead of having nodes, you would have editor under which you could put up words and what they all mean and have the engine load it externally as such, such as;\n\n{Lambert + Diffuse Fresnel\n\nLambert = Normal (fDot) Light\n\n{Diffuse Fresnel = Input some fancy code here.\n\nSo you would have the writer do all the work behind the scene, and the person, with a little knowledge of basic HLSL and CG, could get the same benefits of everything else.\n\nSadly, I can't find the topic, nor remember where I read about this, but the idea was very cool indeed, especially if you get tired of clicking all day long on nodes, or aren't too well versed in shader lingo to declare each time a parameter in the right place (especially when you have to expand the Normals).\n\nWe do it with education and profiling.\n\nEducation meaning we talk to anyone who's going to touch materials and give an overview of what's going to slow down the system (so in Unreal material terms, what instruction count and material dependency mean, and how they're calculated). Then we let them go crazy.\n\nProfiling comes in afterwards, when you're trying to get the game running at frame rate. Since 10% of the game is going to cause 90% of the slowdown, we run the game on PC and consoles and look at profiling tools to work out what's running slowest and causing bottlenecks. Fix that stuff and then ship it.\n\nRender Monkey maybe?\n\nRender Monkey has sadly gone out of development. You can still find it though FXComposer is probably your best bet when it comes to creating HLSL/CGFX shaders or good ol notepad++.\n\nFrom what I gather when I looked into shaders (this was when I was first researching tech art) some places have a material editor where a tech artist can prototype something and pass it off to the graphics engineer who will profile/covert etc. Naughty Dog showed theirs off or I think it was Sony who made it and first party studios have access to it. Looked good from the slides.\n\ntrue minor corrections:\n\n* there is no such thing as shaders written in GPU assembler. There is something like am immediate representation which is what DirectX's HLSL compiler spits out, that is passed to the driver and then turned to true GPU assembler (as that is very vendor/hw specific there is no \"standard\").\n\n* vector operations != scalar operations. The float4*float4 as fast as float*float is not globally true. NVIDIA has a scalar architecture for quite some time and AMD recently moved to one. Typically the compiler is good enough in dead code elimination. So if you do float4 op once but later say use only .x, then only that scalar will be calculated.\n\nHow good compilers are depends very much on the platform, your mileage will vary greatly on mobile platforms, while PC (especially DX) or consoles should be very tuned.\n\nPersonally I use my own scripted IDE for shader work, which passes files to offline compilers (GLSL,HLSL)\n\nhttp://www.luxinia.de/index.php/Estrela/Shader\n\nHi all,\n\nShaderFX was not abandoned.\n\nIt has been acquired by Autodesk and its development has moved there.\n\nIf you want to be on a future beta, drop me an email: kees.rijnen at autodesk.\n\nAs for the question about node editor versus hand-code.\n\nIt is mostly a personal preference.\n\nFrom a code inefficiency point of view. if you would know what you are doing with hand-written code to optimize performance, you could do this too in a good node-editor (for the most part).\n\nThe compiler is also very good at optimizing.\n\nSome people will never want to use a node editor, and some will never want to write code by hand.\n\nAs for code readability, I have spend a lot of time working on this in the new ShaderFX and it is doable to output code that is similar to what you would write by hand. But it does take a good amount of programmer time to get that to happen.\n\nUnreal does have many #ifdef in the code and it makes it very hard to do anything with the code afterwards, but I don't think it was their goal for you to print out the code and hand edit it or to take their code elsewhere. So they did what worked for them. And it is an awesome editor.\n\nFor Mental Mill I always thought the code was very bad to do anything with and I thought that was a major fail for that editor because if you want wide adoption of your 3rd party, shader node editor people should be able to read/edit the code.\n\nA node editor may never make code look exactly like hand written code, but it can do a much better job then Mental Mill did, imo."
    }
}