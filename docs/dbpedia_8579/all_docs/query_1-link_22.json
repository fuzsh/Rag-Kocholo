{
    "id": "dbpedia_8579_1",
    "rank": 22,
    "data": {
        "url": "https://www.inf.puc-rio.br/~roberto/lua-uses.html",
        "read_more_link": "",
        "language": "en",
        "title": "Lua: user projects",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.inf.puc-rio.br/~roberto/images/logo.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "List of projects\n\nTecgraf Modeling AXAF Obstructions with the Generalized Aperture Program RPA Bench test for snowmobiles Controlling robots Novation Lua/P - The PIROL Repository Language HZ - a real-time action strategy engine Automatic Web site maintenance Extensible Network Management AulaNet Repository for the Scitech MGL Noweb 3 Maths Problem Solving Deli - An Extension of Lua based on Actors uCore ImageKitchen: Solutions for Laboratory Visualization 3D Action-Strategy Game WPartner Grim Fandango 3DImager Zeus programmer's editor pdelib Baldur's Gate MDK2 Pagetrak System and RT-Mailplex ClanLib On-line simulation of crack growth in dams GameParts ENG32 / Station 5 Crazy Ivan Robot LuaSpace Yindo Automatic configuration of network devices Plasma Etch Simulator Escape From Monkey Island TSG - The Strategy Game Heart Institute Monitoring Network U61 CPC4400 Embedded Switching Platform FullMoon Soul Ride Lune MUD Server Free and Mighty Editor Roots - Family tree layout Extensible Web Portal Valkin II UGH: Universal Game Haven Horus Alarm monitoring software DigiTest Loop Test System SAGE - Open System for Energy Management NebLUA tomsrtbt - \"The most Linux on one floppy disk\" PlayCom (Platform Independent 3D Game Engine) GUPPY - genetic sequence visualization Finite Element Method Magnetics Doris cPix - Remote controller software for Nikon Coolpix cameras High availability blade clustering Publique! LabelSort MCCI USB DataPump and portable tools Meldlua Angband Lixoo 2D adventure game engine ToME Hands Browser Psychonauts Emotion Engine Digital Fusion Hyperspace Delivery Boy! ZIG Game Engine Monday ELinks Girder Mutant Storm Impossible Creatures Brazilian Marines Warfare System dZ80 Aranha Spellscape Plot Graphic Library SilenceVST Premake Lua and Perl6 Virtual Machine SpellForce - The Order Of Dawn Harmony Assistant Defender MMORPG: Monkey King II APT-RPM Blitzkrieg KQ, the console-style RPG APOCALYX 3D Engine Arkhart DCPlaya MusicMUD Mythica Lantern Games Chess Project 193 Microcontroller Meta-S aXes PtokaX DC Hub Space Shuttle Hazardous Gas Detection System FarCry Verbi MetaScope Vendetta Gorky Zero Homeworld 2 Battle Mages eGames Gameroom Excitement Mikatron Little Robots, Making friends Vega$ - Make It Big Enigma Railway Mogul ALPine AutoPlay Media Studio 5.0 LuaVIEW CARA - Computer Aided Resonance Assignment Entropy Jenet CAMAC crate controller Sigonyth - Desert Eternity ArGON JukeBox VIRTUAL Giggle Painkiller Direct Connect Secured Hub MPT Discovery zeGraph Randomedia Concept Eressea Frontrunner StyleADVISOR sidescrollerGL Ribosome Builder Minions of Mirth Inequality Computations (Welfare Economics) Centaur Force BCDC++ OpenSource Metaverse Project TeleTrader Professional Workstation Yzis Quest3D SciTE Lumo Camgoo Ultimate Mini Golf Designer The Fairly OddParents: Shadow Showdown Moho Setup Factory 7.0 gluas Nut/OS Configurator Legend Alive Series Lock On: Flaming Cliffs XVP - eXtensible Visualization Platform FlatOut Simulators GoElemental! Ughly! Moonlight SATOMI SipProxy LuaMat Hunter Dan's Bowfishing Survival Gauntlet Fish Fillets - Next Generation Daimonin MMORPG FreePOPs Steambird: Love Invaders Sprite Studio 32 libTAP - Augmented and Virtual Reality Prototyping Kit SafeKit - High Availability solution TrueUpdate 2.0 Gaia: An Operating System for Pervasive Computing Systems Necro3D Game Development SDK gameCore LuaBREW Lantern Games Checkers Ultimate Lantern Games Air Hockey Adrenaline Lantern Games Foosball Lantern Games Shuffleboard Showdown eGames Mahjongg Master 6 Lantern Games Video Poker eGames Riverboat Slots eGames Health & Fitness Club Tycoon Magic Lantern Video Game Tycoon eGames Vegas Casino Challenge eGames Video Blackjack iDMC interactive Dynamical Model Calculator Meetro Brave: The Search for Spirit Dancer Marathon Aleph One Underworld Adventures Intellipool Network Monitor OSKI: Self-tuning sparse matrix kernel library MySQL Migration Toolkit Mira Pro Script Module Buzzrick's TileEngine Lua Player Blue Frog Kepler Project DogLua Afrika Zlash There Rita Artweaver Lua Scripting Plug-In Dednat4 - a TeX preprocessor to typeset deduction trees and 2D diagrams BlogMe TEKlib virtual operating system and middleware project InkSpector RM-X General Purpose Control monotone Playhouse Disney: Preschool Time Online IrrLua expressor FMH Make Klango Environment Adobe Photoshop Lightroom World of Warcraft Hollywood Hyperion Demo-System DCWatch - The Beholder Symmetry Tax Engine Match-IT - an affordable and open production control system Civil Support Team Trainer Hercule - Olivetti printer firmware xNormal v3.0 normal mapper FreedomBox System Access Garry's Mod Graphical Windows-based SNMP manager XMLTV GUI STDK Impact IV Chipmunk AV Controller Luxinia - scriptable 3d game engine Hearts for GNOME Wireshark - The world's most popular network protocol analyzer ELF Integrated Scripting System Avalon Management Suite The Lost City of Malathedra David Douillet Judo MUSHclient - client for text-based MUD games CityBinder VoodooPad Illarion - a free massive multiplayer online roleplaying game Alt-IDE AAASeed Barracuda Embedded Web Server Prime Mover Infon Battle Arena Robots, AI warfare Catz 2006 and Dogz 2006 Pacific Biosciences K-MeleonCCF ROBLOX MAXi LLRnet HDngn FLEXON Multi Theft Auto: San Andreas Wireshark - The world's most popular network protocol analyzer T2 System Development Environment Turtle renderer pbLua for the LEGO Mindstorms NXT Strata 3D CX Scripting for Site Monitoring and Call Accounting S.T.A.L.K.E.R.: Shadow of Chernobyl TerraME DMT Those Funny Funguloids! LOona - tiny CMS, WIKI and homepage maker VPOP3 Email Server MotionNode Regnum Online ActiveModeler Avantage BPM Foundation Xeepe phone solution Squeezebox Jive Platform Nmap Supreme Commander Heroes of Might and Magic V MySQL Proxy TshwaneLex LuaTeX Warhammer Online: Age of Reckoning Metaplace SimCity 4 Allbase Suite\n\nTecgraf\n\nComputer Graphics Technology Group, PUC-Rio\n\nTecgraf is the result of a partnership between PUC-Rio, the Pontifical Catholic University of Rio de Janeiro, and PETROBRAS, the Brazilian Oil Company. Tecgraf is Lua's birthplace, and the language has been used there since 1993. Currently, more than thirty programmers in Tecgraf use Lua regularly, who have written more than two hundred thousand lines of code, distributed among dozens of final products.\n\nContact: Waldemar Celes\n\nModeling AXAF Obstructions with the Generalized Aperture Program\n\nSmithsonian Astrophysical Observatory\n\nThe Advanced X-ray Astrophysics Facility (AXAF), due to be launched in 1998, is the third of NASA's four Great Space Observatories. AXAF will provide unprecedented capabilities of high resolution imaging and spectroscopy over the X-ray range of 0.1-10keV.\n\nAs part of our efforts to support the AXAF program, the SAO AXAF Mission Support Team has developed a software suite to simulate AXAF images generated by the flight mirror assembly. One of the tasks of this system is to simulate the physical obstructions in front of and behind the AXAF mirrors.\n\nThe generalized aperture program is designed to simulate the effects on the incident photon stream of physical obstructions, such as thermal baffles and pre- and post-collimators. It can handle a wide variety of aperture shapes, and has provisions to allow alterations of the photons by the apertures. The philosophy behind the aperture program is that a geometrically complicated aperture may be modeled by a combination of geometrically simpler apertures. This is done by incorporating a language, Lua, to lay out the apertures. User provided call-back functions enable the modeling of the interactions of the incident photon with the apertures.\n\nThis approach allows for maximum flexibility, since the geometry and interactions of obstructions can be specified by the user at run time.\n\nSee also this page.\n\nContact: Diab Jerius\n\nRPA\n\nPontifical Catholic University of Rio de Janeiro\n\nRPA is an intranet system developed by PUC-Rio to record the academic production of its faculty. The project started in August, 1994 in the Department of Computer Science; in 1996 it was extended to other departments. Currently, the system is being used by hundreds of faculty and staff members from all departments of the University. This project was the birthplace of the CGILua library and its team contributes in the development of HTMLToolKit (which is distributed with CGILua).\n\nContact: Tomas Gorham\n\nBench test for snowmobiles\n\nLes Industries Hypershell\n\nWe did this application for Bombardier Inc. They are specialized in creating recreational and commercial vehicles.\n\nWe had to create a bench test for snowmobiles, which are assembled in Valcourt, Quï¿½bec, Canada. The application had to be fully customizable, because as new technologies are added to the vehicles, more tests have to be done, and existing ones change.\n\nAll the tests are done in Lua. The host application, which is programmed in Delphi, serves only to expose a toolkit to the Lua environment, and to load the correct Lua script depending on the vehicle being tested. The toolkit is composed of many functions that access different hardware components, like data acquisition cards and sound cards. Other functions are used to talk with a component inside the snowmobile, called a MEM. This is the heart of the snowmobile; it regulates motor speed and also serves as an anti-theft system. Some functions are used to interact with the operator performing the tests. All the test results are stored in an SQL server.\n\nThe host application is written in Delphi 2.0. We interact with Lua via a DLL written in C, using Visual C++ 4.2. I have merely exposed key Lua functions in the DLL, and call them from the host application. The DLL spawns a DOS console, then redirects stdin, stdout and stderr so we can see errors messages created by the Lua engine. There are currently 66 functions in the toolkit, and we are adding 16 more for future use. The part of the host application that treats Lua requests is in a separate thread, so we don't stop the main thread while executing Lua code. To execute the Lua code, I simply save the Lua script in a local file, then call the function lua_dofile. All Lua code comes from the SQL server.\n\nThe application is now in operation and works fine. We are currently working to adapt the host application to be used on another type of vehicle, the VTT, which will be produced by Bombardier this summer.\n\nContact: Robert Lamoureux\n\nControlling robots\n\nNon-Linear Control Consultants Ltd.\n\nI'm using Lua to sequence high-level commands to robots, connected to the host either via a serial line or transputer link; perhaps in future via USB or FireWire. Lua is particularly valuable here because the debugger hooks give me a means to make external asynchronous events (eg: touch-sensors) look like atomic actions as far as the Lua program is concerned, and allow users to assign call-back functions to them. Essentially the robot is a ``manipulation server'' and the Lua program its client. The second major advantage is the portability; I can easily compile a stripped-down Lua client for an embedded processor on the robot's motherboard. The user can then download their final debugged application into non-volatile memory, disconnect the host and leave the robot to get on with the job.\n\nContact: Mark Ian Barlow\n\nNovation\n\nGT Software, Inc.\n\nGT Software, Inc. has developed an IBM CICS Based HTTP/FTP Server that includes a 3270 Web Browser. The Product \"Novation\" (TM) includes Lua as a HTTP server script language.\n\nContact: Steve Able\n\nLua/P - The PIROL Repository Language\n\nTechnische Universitï¿½t Berlin\n\nPIROL (Project Integrating Reference Object Library) is targeted at full coverage of all aspects of real software development projects. It was first designed with a strict focus on object oriented development, but for the use within the ongoing project ESPRESS it has also been extended towards formal techniques such as Z. The redesign resulted in LuaP, an adaptation of Lua for PIROL, which is now used to define PIROL's meta model.\n\nContact: Stephan Herrmann\n\nHZ - a real-time action strategy engine\n\nThe HZ Engine is a 2d real-time action strategy engine. It was originally written for Win32/DirectDraw, but it has now been ported to Linux/X11. Lua is used for game logic and sprite definition. All sprite properties, including animation sequencing, physics, and object properties are coded in Lua.\n\nContact: David Jeske\n\nAutomatic Web site maintenance\n\nGraduate Program in Systems Engineering and Computer Science, Federal University of Rio de Janeiro\n\nSeveral pages in this site are generated automatically from databases in Lua.\n\nContact: webmast AT cos.ufrj.br\n\nExtensible Network Management\n\nDepartment of Computer Science, PUC-Rio\n\nThis project uses Lua as the basis of a platform for the construction of extensible management applications. Lua is used on a standalone basis and not really as an extension language.\n\nThe LuaMan library was developed to provide access to services which are specifically relevant to tcp/ip network management: SNMP, ICMP and DNS. We are currently working on the development of an OO interface for these services. LuaMan runs on Linux, Solaris, SunOS, IRIX and AIX. Work is also under way for porting LuaMan to Windows NT.\n\nUsing LuaMan and other available libraries, such as CGILua and LuaOrb, several small management applications have been built.\n\nContact: Noemi Rodriguez\n\nAulaNet\n\nSoftware Engineering Lab, PUC-Rio\n\nAulaNet is a software environment based on the Web developed at the Software Engineering Laboratory (LES) of the Department of Computer Science at PUC-Rio, for creating and assisting distance courses. AulaNet was conceived from the experience gained in three courses during the second semester of 1997, and is based on the following basic premises:\n\nThe courses created must posses great capacity of interactiveness, in order to encourage intense participation by the student in the learning process.\n\nThe author of the course does not need to be a specialist on the Internet.\n\nThe resources offered by the creation of the courses must correspond to those available in a conventional classroom, plus others normally available in a Web environment.\n\nIt must be possible to re-use the contents already existing in digital media, through importing files, for example.\n\nContact: AulaNet Team\n\nRepository for the Scitech MGL\n\nThe resource manager (RES) is a C-library for use with the Scitech MGL and uses the language Lua as a configuration language. The RES deals with resource allocation (i.e loading of files, use of certain datatypes) and abstracts the use of resources through a dictionary. This means that you never have to allocate a bitmap again, you just ask the repository for an image with a certain name. It also helps in grouping information so that multi-lingual versions of software are easier to develop and maintain. The project is under continuous development.... 8-)\n\nContact: Freek Brysse\n\nNoweb 3\n\nElectrical Engineering and Computer Science, Harvard University\n\nnoweb is designed to meet the needs of literate programmers while remaining as simple as possible. Its primary advantages are simplicity, extensibility, and language-independence. noweb uses 5 control sequences to WEB's 27. The noweb manual is only 3 pages; an additional page explains how to customize its LaTeX output. noweb works ``out of the box'' with any programming language, and supports TeX, latex, and HTML back ends. A back end to support full hypertext or indexing takes about 250 lines; a simpler one can be written in 40 lines of awk. The primary sacrifice relative to WEB is that code is seldom prettyprinted.\n\nnoweb has been used for eight years at many universities and industrial sites. It has been used for tens of thousands of lines of code in such languages as awk, C, C++, Icon, Modula-3, PAL, perl, Promela, Turing, and Standard ML.\n\nThe supposed advantages of Noweb 3 over Noweb 2 are:\n\nto be more portable and easier to install (perhaps in one binary);\n\nto be faster;\n\nto retain all the extensibility features;\n\nto document some of those third-party extensions.\n\nThe means to all these good ends is to replace the shell scripts and the Icon code with the embedded language Lua-2.5+nw. (This is Lua version 2.5 extended with 2 kinds of case statement.)\n\nContact: Norman Ramsey\n\nMaths Problem Solving\n\nGranada Learning\n\nMaths Problem Solving is a Windows based multimedia application aimed at developing mathematical problem solving techniques in 14-16 year olds.\n\nThe application mainly consists of an MFC operating shell, with plug in COM-based tools that the users interact with to solve problems. We use Lua 3.0 to script the way the problems are handled, and to control the interactive characters that guide sers through the problem.\n\nUsing Lua in this way allows to develop the core interactivity of the application very quickly.\n\nContact: Paul Dixon\n\nDeli - An Extension of Lua based on Actors\n\nDepartment of Computing, Imperial College\n\nDeli is a Lua extension to support Actors, a model for concurrent computation in distributed systems. Deli extends Lua with functions like become, send, accept and new to deal with actor creation and interaction in a distributed programming environment.\n\nContact: Carlos Duarte\n\nuCore\n\nThe uCore Development Team\n\nuCore is a integrated development enviroment for distributed business applications. It is primary developed for WIN32 but with several Unix platforms in target for server part.\n\nIt consists of a core with the following modules:\n\nRuntime environment (Compiler + Interpreter)\n\nDatabase Manager\n\nNetwork Manager (Including RPC)\n\nWindows Manager (Win32 Wrapper Library)\n\nDLL Manager (Plug-ins for interpreter)\n\nA series of modules are written with uCore itself:\n\nDatabase Designer (Tables + Relations + Triggers etc.)\n\nNetwork Server\n\nApplet Designer (Forms)\n\nReport Designer\n\nUser Control\n\nuCore will be used to create a series of distributed applications for the financial sector. Lua 3.2 has been used as the basis for the compiler/interpreter. All development are done by a team in Denmark.\n\nContact: Erik Hougaard\n\nImageKitchen: Solutions for Laboratory Visualization\n\nPhotonic Systems Group, Beckman Institute of Advanced Technology\n\nUniversity of Illinois at Urbana-Champaign\n\nImageKitchen is a software package developed for Windows 95, 98, and NT that automates the acquisition, processing, and presentation of image information. Its modular design allows hardware to be interfaced easily, and controlled via a built-in scripting language (Lua). Built in image processing primitives of the scripting language allow powerful manipulation of images. One, two, and three-dimensional display capability allows immediate visualization and interaction with the processed image information. The ImageKitchen environment and scripts interact to provide rapid prototyping of experiments and presentation environments.\n\nContact: Daniel Marks\n\n3D Action-Strategy Game\n\nCriterion Studios\n\nCriterion Studios, headquartered in Guildford, England, is a developer of 3D games. We are using Lua as an embedded scripting language in an upcoming action-strategy game. A number of Lua scripts control the high level flow of the game. Using Lua allows us to easily save and restore the game state, as well as significantly reducing the complexity of writing the game logic. This makes the game more crash proof, and opens up the writing of scripts to game designers and other non-programmers. The game will be published on PC as well as next-generation console platforms.\n\nContact: Luc Van den Borre\n\nWPartner\n\nNettivity Co.\n\nWPartner is a development tool for CGI scripting. WPartner utilizes Lua as one of its guest languages. PERL and REXX are also supported, but Lua is the preferred language.\n\nWPartner provides Lua with capability to build HTML output based on templates. It means that your program code is not polluted with \"print\" commands to generate HTML output and is much more readable than usual CGI script. You do not need to change your program to modify HTML output it produces. All you need is to modify HTML templates containing program data placeholder. Templates are actually HTML files that can be created and modified by any HTML editor.\n\nWPartner provides Lua with SQL databases connectivity (both ODBC and native). You can use embedded SQL straight in your Lua script and even operate with LOB objects such as images.\n\nWPartner's input parser dynamically creates program variables in the user's script that correspond to the input parameters (form data or URL data name-value pairs). Created variables are populated with the appropriate values. You can use and reference input parameters by their names assigned to them in the input form or URL. The input parser handles \"application/x-www-form-urlencoded\" and \"multipart/form-data\" encodings.\n\nWPartner provides file upload and download, mail (SMTP, Exchange...), execution control, and many more capabilities\n\nAll active pages and sample programs on our site are enabled with Lua.\n\nContact: Vlad Serpik\n\nGrim Fandango\n\nLucasArts Entertainment\n\nGrim Fandango is a graphic adventure game that uses a modified version of Lua 3.1 as its scripting language. Grim Fandango was lauded by critics and adventure game fans as one of the best games in its genre. \"A tremendous amount of the game was written in Lua\", according to Bret.\n\nContact: Bret Mogilefsky\n\n3DImager\n\nThe Computational Imaging Initiative, Beckman Institute of Advanced Technology\n\nUniversity of Illinois at Urbana-Champaign\n\nOur work on an integrated software environment is motivated by the observation that this is such a golden age for electronic imaging system development that the capability to quickly and robustly develop and test new imaging system concepts is more important than any single system concept. With this in mind, we have developed an integrated Windows software environment, named 3DImager. 3DImager encompasses image capture, hardware control, and data processing. It is the intent of this software to provide the user with the necessary tools for 3D data acquisition with real time feedback to speed up the development process. This software can control several pieces of hardware including a scientific grade CCD arrays, digital I/O, piezo accuators, and translation stages. The user has the option of controlling this hardware directly, which is useful during alignment procedures, or one can place it under script control. The scripting language is based on the Lua script engine. The Lua language itself has been extended to include control of all the hardware with the addition of image processing routines and display functions. The scripting language is complimented by macro support allowing the user to implement new features to the software that were not thought of at design time.\n\nContact: David J. Brady\n\nZeus programmer's editor\n\nXidicone Pty Ltd\n\nThe Zeus for Windows programmers text editor has been specifically designed for software developers working in the Windows 3.x, Windows 95 and Windows NT environments. The Zeus text editor offers all the features of an IDE (Integrated Development Environment) with the added benefit of providing an powerful text editor that supports the Brief, Epsilon, WordStar and Emacs keyboard mapping's. Zeus 3.0 includes new plugable scripting modules that allows you to write Zeus macro scripts using the Python, Lua or Small C macro languages.\n\nContact: Jussi Jumppanen\n\npdelib\n\nWeierstrass Institute for Applied Analysis and Stochastics, Berlin\n\npdelib is a collection of software components which are useful to create simulators based on partial differential equations. The main idea of the package is modularity, based on a pattern-oriented, bottom-up design. As the development of graphical user interfaces is a cumbersome task which takes a lot of time, we decided to enable users to communicate with our codes based on an interpreted scripting language. On demand, we plan to implement a GUI on top of Lua. Among the large number of languages of this type, only Lua proved to be simple, portable and powerful enough to meet our requirements.\n\nFor a list of applications developed within this framework, see the pdelib projects page.\n\nContact: Jï¿½rgen Fuhrmann\n\nBaldur's Gate\n\nBioWare Corp.\n\nBaldur's Gate is role-playing game (RPG) that is scripted internally using Lua. All debugging commands were exposed to Lua and a Lua prompt exposed to the game. This allowed complex debugging without spending much development time making debugging tools.\n\nContact: Cameron Tofer\n\nMDK2\n\nBioWare Corp.\n\nMDK2 is the sequel to the PC game MDK. MDK2 runs on both the SEGA Dreamcast and the PC.\n\nIn MDK2, Lua is critical for game functions. Lua's main purpose is its parsing ability. Many file formats were scraped because code/data could be parsed by Lua and read from the host. The real-time debugging features were taken to another step with MDK2, allowing for much more complicated tests. Even as far as prototyping. The other main use of Lua in MDK2 is that most of the movie scripts, AI scripts and time events are all done with Lua code.\n\nContact: Cameron Tofer\n\nPagetrak System and RT-Mailplex\n\nSoftronex Corporation, San Juan, Puerto Rico\n\nE-MAIL filtering, forwarding, etc. for large (250+ users) alphanumeric paging commercial application. Currently Lua substituted AWK scripts, and shell scripts. Next phase is conversion of C programs to Lua, interfacing to PostgreSQL, followed by a full (Yes, Lua is fast enough!) conversion of all our C programs to Lua. Operating systems used are FreeBSD 3.2 STABLE and OpenBSD 2.5 CURRENT.\n\nLua's speed and footprint are awesome. :)\n\nContact: Karl Wagner\n\nClanLib\n\nClanLib is a cross-platform Game SDK written in C++. ClanLib is under heavy development, but it has some stable versions. It currently works on Linux, Win32 and BeOS. ClanLib has support for Lua and that makes it faster to develop games. We chose Lua as scripting language to ClanLib because it is so fast.\n\nContact: Magnus Norddahl\n\nOn-line simulation of crack growth in dams\n\nCornell Fracture Group\n\nThis is educational software that we put together for crack growth in dams. We wanted to allow people to do a crack growth simulation on line. We took the (FORTRAN) core of FRANC2D, threw away the GUI, and replaced it with a scripted interface implemented in Lua. What happens is that the browser sends a message which runs a CGI script, which writes a Lua script, and runs FRANC2D on the web server. The results are then sent back as gif images. Not a very sophisticated use of Lua, but it works well in this application.\n\nContact: Wash Wawrzynek\n\nGameParts\n\nLoewen Entertainment GmbH\n\nGameParts is an object-oriented lightweight application framework for creating 2D games (mainly needed for coin-op/casino-games). Games are made up of C++ base objects and VCL-controls (Delphi C++ Builder). Some of those components are based on CDX (a popular DirectX-wrapper/sprite engine). Everything is controlled by Lua scripts, so most games can be done by visual editing of forms and define control flow/logic/animation with Lua scripts. Thanks to Lua and tolua there isn't a paradigm break between C++ and scripting and Lua adds a lot of flexibility/versatility to the OO power of C++ (in contrast to solutions based on COM/OLE automation, where passing objects between scripts and C++ code is severely limited and code gets bloated.\n\nContact: Klaus Zerbe\n\nENG32 / Station 5\n\nStation 5 is intended as a shareware Internet game with a highly configurable 3D engine called ENG32, featuring an SDK, a custom Level Editor, scripting capabilities (Lua), 3D Studio Max integration and state of the art 3D rendering. It targets mainly 3D game developers, who seek an engine upon which they can build - the Station 5 game provides a capability demo and a decent shareware game as well. The project is mid sized, featuring about 50.000 lines of C/C++ code and was designed and programmed by Harald Nowak. Since it is still under development there are no regular users now.\n\nLua was chosen as scripting language because of its ease of integration, source availability and easy extensibility. It is used to embed custom scripts in the levels for opening doors, playing sounds, switching on/off lights, changing polygon textures and performing other game relevant actions like sending / processing various messages between the moveable game entities (enemies, rotors, switches...) The scripts can be entered in the custom Leveleditor.\n\nContact: Harald Nowak\n\nCrazy Ivan Robot\n\nCrazy Ivan Robot Team\n\nCrazy Ivan was the robot that won the RoboCup 2000 in Denmark. Crazy Ivan has a \"brain\" that uses Lua for scripting language. All AI and logic is done in Lua. The brain is running on a Motorola Coldfire 5206e processor, and Lua is modified to use only int's as the Coldfire has no FPU.\n\nContact: Erik Hougaard\n\nLuaSpace\n\nComputer Science Department, PUC-Rio\n\nLuaSpace is an environment for configuring and reconfiguring component-based applications. The environment is composed of a set of tools that offer support for dynamic reconfiguration. One of these tools is a binding between Lua and CORBA - LuaOrb. The other tools are based on Lua. The generic connector is a mechanism that dynamically selects components for executing services required by an application. Exploring this approach, an application can be configured using a set of services without being aware of the specific componentes that offer these services. The components will be selected on-the-fly by the generic connector.\n\nContact: Thais Batista\n\nYindo\n\nYindo, Inc.\n\nA web browser plug-in and player for Lua with support for OpenGL. Comes with a base class implementing a NewtonScript-like object model as well as Foundation and Windowing toolkits.\n\nContact: Steve Dekorte\n\nAutomatic configuration of network devices\n\nXnet Communications GmbH\n\nThe project goal was to design a flexible system for automatic configuration of network devices through ISDN (X.75). We added data transfer functions to Lua and use it to perform communications sessions. Lua gives us flexibility to support various types of devices and configuration modes. We have chosen Lua because it is small, has great extension capabilities, nice syntax, and proved to be reliable. The system works as multi-threaded Windows NT service.\n\nContact: Maciej Maczynski\n\nPlasma Etch Simulator\n\nCornell University\n\nA plasma etch simulation was developed using Lua to allow users to modify the etch recipe, the structure being etched, or parameters of the simulator.\n\nContact: Fred Bertsch\n\nEscape From Monkey Island\n\nLucasArts Entertainment Company, LLC\n\nEscape From Monkey Island is the fourth game in the Monkey Island series of adventure games. Like Grim Fandango, it uses a modified version of Lua as the scripting interface.\n\nContact: Richard Sun\n\nTSG - The Strategy Game\n\nTSG Development Team\n\nThe Strategy Game Project is an effort to create an Open Source Engine for Real-time strategy games. This Engine can be employed to create real-time strategy games with very distinct look 'n' feel. As a part of this Project, an example game (including client software, graphics and maps) will be provided. Lua is an excellent tool to create flexible and efficient config files, engine modules and controlling scripts for our project. Good work, Lua developers :)\n\nContact: Davor Ocelic\n\nHeart Institute Monitoring Network\n\nInCor - HCFMUSP - Sï¿½o Paulo - Brazil\n\nThe Heart Institute has purchased a new line of Intensive Care Unit monitoring system. These new monitors are able to use de HL7 networking protocol. We built a system to make the data from monitoring available on line in the Web. And the Lua language was very useful. The parser of Lua language was useful to extract data from text written by the doctors as well lab results and convert this text in XML format. Also we used Lua (in the form of CGILua) as HTML script for our Monitoring Web.\n\nAn example of use of Lua tecnology in handheld devices used for Intensive Care monitoring is shown in this video from a presentation of Steve Balmer (Microsof's CEO) during a meeting in Brazil.\n\nContact: Pedro Paulo de M. Oliveira Junior\n\nU61\n\nU-Foot\n\nU61 is a block-based game which uses Lua as a scripting language. U61's main goal is to provide a solid framework for creating new block-based games (some well-known block-based games are Tetris, Columns or Puyo-Puyo...), while staying extensible with the help of Lua. As Lua is easy and quick to learn, any player who has some very basic programming skills should be able to create his own set of rules and share it with his friends. U61 is free software, distributed under the GPL.\n\nContact: Christian Mauduit\n\nCPC4400 Embedded Switching Platform\n\nPerformance Technologies, Inc.\n\nThe CPC4400 is a hot-swappable Ethernet switch in a CompactPCI 6U form factor. Lua is used to implement the CPC4400's command-line interface (CLI). Writing the CLI in Lua was far more pleasant and productive than if we had coded it in C or C++. Lua is also exposed as the scripting language of the CPC4400. The user is able to associate events (such as link status change, detection of topology changes, RMON alarms, etc.) with Lua scripts. This allows the user to customize the behavior of the CPC4400 to an unprecedented degree, and allows the CPC4400 to take intelligent action based on the user's requirements.\n\nLua was chosen over other languages because of its small memory footprint, efficient execution, ease of integrating with C code, and extensible semantics. We're already on the cutting edge by providing an Ethernet switching platform that incorporates a scripting language. But with Lua, we're really pushing the envelope by giving end users a powerful language.\n\nContact: Performance Technologies, Inc.\n\nFullMoon\n\nFullMoon is a plugin for a popular 3D modeller called Moray, extending it with new objects written in Lua. Objects are easy to write. The plugin provides an interface to Moray's API that makes it easy to write code to perform the various operations needed to obtain a fully functional object.\n\nContact: Andre de Leiradella\n\nSoul Ride\n\nSlingshot Game Technology\n\nSoul Ride is a PC snowboarding game featuring expansive real-world terrain and physics-based gameplay and character animation. We used stock Lua 3.2.2 in the engine as a configuration facility and console interface, and for scripting some game events. We dropped Lua into the engine late in development, and it proved to be simple, functional and headache-free.\n\nContact: Thatcher Ulrich\n\nLune MUD Server\n\nLune is a simple Multi User Dungeon (a text-based, multiplayer online role-playing game). I've been working on it since September 2000. It uses a modified Lua interpreter that provides a few functions for sockets, time, and directory listing. Other than that, the whole thing is written in Lua, including the data files. It currently runs on the Linux and Win32 platforms.\n\nContact: Jason Clow\n\nFree and Mighty Editor\n\nFaME is a programmer's text file editor for Windows 9x and NT. It is customizable and extendable by Lua scripts. At the moment I have a German version available, but I'm already working on an international version.\n\nContact: Florian Wolff\n\nRoots - Family tree layout\n\nA shareware program for the RISC OS operating system that allows you to graphically layout family trees. It uses Lua as a scripting language to control the style in which people and marriages are drawn.\n\nContact: Alex Waugh\n\nExtensible Web Portal\n\nDigital-Scurf\n\nThe Extensible Web Portal project, currently housed at http://lua.digital-scurf.org/, is a project to eventually build a good extensible ISAPI content generator based on Lua, to allow people to write their web pages in Lua. (Much like PHP does at the moment). The main application for this, is Digital-Scurf's portal site, which is constantly under development (although right now, development is paused while we work on another important project using Lua).\n\nContact: Daniel Silverstone and Robert Kendrick\n\nValkin II\n\nA fantasy role playing game (Linux based), using Lua for two main purposes: character AI and world actions. Most of the actions that can affect the world can be scripted by overloading the hardcoded behavior with a Lua script. The reasons for choosing Lua as a scripting language were mainly its speed and small memory footprint, secondary reasons being that it is a fully blown language with a neat syntax.\n\nContact: Vincent Penquerc'h\n\nUGH: Universal Game Haven\n\nThe Universal Game Haven (UGH) is a server and protocol meant to facilitate network game play, particularly of the bridge and chess variety. It is being built with the following goals in mind:\n\nsimple, textual protocol\n\nscalable to many rooms, many players per server\n\ncan be distributed over multiple servers\n\ngames written in Lua, to allow rapid development and perhaps direct play of client-programmed games\n\nContact: Noam Zeilberger\n\nHorus Alarm monitoring software\n\nAzur Soft\n\nHorus process incoming alarms from various sources: alarm transmitters, phone centers, GPS transmitters. It is mainly used for security centres in Europe (150+ sites).\n\nWe chose Lua because of it clear syntax, easy extension and reliability. We added a lot of NT core functions, a Dialogic board interface, SQLserver basic access, and redesigned the memory allocation subsystem.\n\nThe Lua interpreter is embedded in five modules of the Horus system: alarm supervisor, operator interface, remote command server, receiver and vocal server. Every module can be finely parametrized using Lua scripts, helping users sort false alarms.\n\nContact: Joel Jacob\n\nDigiTest Loop Test System\n\nTollgrade Communications, Inc.\n\nDigiTest is a next-generation telephony network testing family of products. Lua has been used extensively throughout for tasks such as user interfaces, automated test scripts, and results analysis and was chosen for its speed, small footprint and easy extensibility. Lua has been linked with the Tollgrade Services Architecture (tm), allowing scripts to be executed anywhere and at any time within a DigiTest network.\n\nContact: Todd Wade\n\nSAGE - Open System for Energy Management\n\nCEPEL - Electrical Research Center, Brazil\n\nSAGE is a computational system that executes the functions of energy management in electrical power systems. As SAGE fulfills a large number of functionalities, it is composed by several programs. Some of these programs were implemented using the Lua language:\n\nConditional Register (RegCond) - Using Lua configurations files, SAGE can be configured to log the values of some SCADA variables, dumping them to ASCII files whenever certain conditions are reached. The configuration file is composed by a set object descriptions (Lua table constructors) which allows the configurator to deal with a only-descritive syntax, legible to non-programmers.\n\nSAGE Shell (SASh) - This is basically a Lua interpreter linked with SAGE development libraries. With this special interpreter, programers can easily write simple scripts that access SAGE real-time database, command SCADA controls, and manage the system processes. The Lua/SAGE binding offers a high level abstraction for the concepts involved in this kind of program. As SASh is also linked with IUP/Lua, the scripts can deal with graphical widgets (dialogs, buttons, menus, etc.).\n\nDynamic Calculator - Using the functionalities of the Lua parser and interpreter, SAGE offers a dynamic calculator where the operator can easily set formulas that involve values and variables at SCADA real-time database. These formulas are calculated throughout the system execution and updated regulary, thus offering the possibility to setup calculations that were not previously expected to be needed; for example, in emergency situations.\n\nContact: sage AT cepel.br\n\nNebLUA\n\nLogic Hole Software\n\nNebLUA is a Lua script server for the 3d engine The Nebula Device. It makes use of Lua 4.0 and TKLua to achieve a very full-featured scripting interface to The Nebula Device. It was developed for use in Logic Hole Software's independent game, Catalyst.\n\nThe Nebula Device is a free full-featured 3d engine from Radon Labs, which they are using for their next commercial game, Nomads. It is cross platform between Linux, and Win9x and WinNT.\n\nNebLUA is about 1500 lines of code, and took a single programmer about a week to implement, knowing nothing about the Lua API or the Nebula API. It makes use of most of Lua's API facilities, including tag methods, garbage collection, and embedded c functions. Lua was chosen for this project because of its speed, powerful language features, and ease of embedding into the Nebula Device framework.\n\nContact: James Hearn\n\ntomsrtbt - \"The most Linux on one floppy disk\"\n\nTom's NET\n\ntomsrtbt is \"The most Linux on one floppy disk\" for: rescue recovery panic & emergencies, tools to keep in your shirt pockets, whenever you can't use a hard drive.\n\nTomsrtbt includes a Lua interpreter with luasocket, md5, and regex libraries as well as vi and emacs editors, along with other tools. Utilities currently written in Lua include: wc unrpm-- undeb-- tee split login head grep dirname cut cmp basename dhcpcd--.\n\nContact: Tom Oehser\n\nPlayCom (Platform Independent 3D Game Engine)\n\nNetbaby World AB\n\nPlayCom is a complete game development system implemented in C++. It has full support for 3D, physics, animation, music, audio fx and networking. All aspects of the system are controllable from Lua. The system is used to implement free (gratis) online multiplayer 3D games for Windows, Mac and Unix systems.\n\nContact: Lars Johan Rustemeier\n\nGUPPY - genetic sequence visualization\n\nComputational Biology Research Center, AIST Tokyo\n\nGUPPY (Genetic Understanding Perspective Preview sYstem) is a program for visualizing information of sequence databases in molecular biology. This program aims to accelerate computational tasks for various studies in bioinformatics. Our current development involves prototyping additional functions for some of active biological projects. Lua language was embedded in this program in order to facilitate data processing and scripting functions for layout of the sequence map.\n\nThis program also features highly interactive operations for smooth scrolling and zooming from the genomic landscape to discrete nucleic acid sequences.\n\nContact: Yutaka Ueno\n\nFinite Element Method Magnetics\n\nFEMM is a free magnetics finite element package for Windows. It solves low frequency problems over 2D and axisymmetric domains. The Lua scripting language integrated with FEMM, allowing for batch runs, creation of animations, dynamic simulations, and so on.\n\nContact: David Meeker\n\nDoris\n\nDoris is a script driven OpenGL viewer. Lua is bound to OpenGL, GLUT and GLUI so that graphical scripts can be written. The GLUI widget library provides a nice set of OpenGL implemented widgets for use from Lua. Designed to be portable and easy to use.\n\nContact: Nick Trout\n\ncPix - Remote controller software for Nikon Coolpix cameras\n\nfiniteMonkeys\n\ncPix allows you to control the Nikon Coolpix 990 digital camera. It includes timelapse functions and download capabilities, and includes scripting support with Lua: you can write Lua programs to control the camera.\n\nContact: Charlie Wallace\n\nHigh availability blade clustering\n\nAvailix SA\n\nAvailix is a software suite used for managing and monitoring blade clusters based on CompactPCI hardware. The project size is about 85,000 lines of C code and 6,500 lines of Lua. This a commercial project. Lua is mainly used for extending our management and monitoring applications. It is also used by the end user to change the default behavior of the system. Lua is the only language light and simple which can be easily embedded into host programs written in C. From our point of view it has no drawbacks.\n\nContact: Eric Mauger\n\nPublique!\n\nFï¿½brica Digital\n\nPublique! is a web based content management system. The information structure managed by Publique! can comprise an entire HTML site or just part of it. Publique! can also be used as an XML based web service or as an WML front end. Publique! offers a workflow based on three user types or actors: Authors, Editors and Readers.\n\nThere are currently more than 100 sites using Publique in Brazil, Argentina, USA and Japan. The current version (2.2) is available in Portuguese and English. Japanese and Spanish versions are on the way.\n\nPublique started in 1998 and has been developed by a team of 3 to 7 programmers during its lifetime. The production team totals 30.\n\nPublique uses a modified version of CGILua as its current web engine and consists in almost 50K lines of Lua and 5K line of C (not including CGILua itself).\n\nLua has been chosen for its ease of prototyping, speed of execution and extensibility. It is used for almost every feature in the system other than the OS Platform, DBMS and Web Server abstraction layers.\n\nContact: Andrï¿½ Carregal\n\nLabelSort\n\nIn the UK the post office offers a discount for mailshots over a certain size if they are sorted by delivery code - not the same as postcode (zip code). Labelsort takes a file of address labels, as would be sent to the printer, appends the delivery code to each postcode, and sorts the file. It works by having the post office data, listing for each delivery code which postcodes it accepts, converted into a Lua table. The table is indexed by initial letters of postcodes and its values are tables, indexed by delivery codes, of lists of patterns to match against postcodes.\n\nContact: Gavin Wraith\n\nMCCI USB DataPump and portable tools\n\nMCCI\n\nMCCI is a software IP development company, presently focused on USB. Our development tools are cross platform (both for compilation and for target system).\n\nOne of the big issues for a large commercial software project is cross-platform makes. We deliver software in source form and we need our customers to be able to build quickly. None of the previously available tools fit our needs; Lua was a key tool for solving this problem, and we now use it extensively internally and for customer deliveries.\n\nWe use Lua in the following ways:\n\nto write cross-platform portable scripts (so that we don't have to depend on 'sh' features that are not available on W32). In particular, this allows us to ship dependency checkers for third-party compilers without having to write C code, which is a great help.\n\nintegrated into a slightly augmented version of NetBSD's make, upgraded to run directly on Win32 as well as on BSD and MacOS X (again, to provide a local compute engine that can be used by MAKE instead of having to call shell scripts and external tools)\n\nto write internal scripts\n\nWe started with 3.2; are in the process of upgrading to 4.0. A small amount of work was needed in 3.2 to make it easy to do items (1) and (3).\n\nWe also had to create an MCCI standard library for Lua (written in Lua), both to allow scripts to be cross platform (hiding the details of pathnames, env variables, etc.), and to enforce a certain level of consistency.\n\nWith our local changes and development, we spent about one labor month integrating Lua into our project.\n\nWe found the language admirably suited for this need, and the interpreter shell (lua.c) and compiler shell (luac.c) were easy to modify to meet our local needs.\n\nContact: Terry Moore\n\nMeldlua\n\nMeldstar Studios\n\nMeldlua is a framework for scripting engines in Meldstar Studios' game projects. It is based on Lua 4.0 and uses a number of Meldstar only extensions. For our games, we build upon Meldlua to create the final scripting languages for each game. It is these final scripting languages that the level designers work with for extending their content. We're also looking at using Lua for configuration files; however, that's a different story.\n\nContact: Christopher S. Charabaruk\n\nAngband\n\nAngband is a freeware computer dungeon exploration game based (loosely) on the books of J.R.R.Tolkien. You explore a very deep dungeon, kill monsters, try to equip yourself with the best weapons and armor you can find, and finally face Morgoth - \"The Dark Enemy\". It is a highly portable game with versions available for Windows, MS-DOS, Linux, Amiga, RISC OS, Solaris, BSD, and many other systems. The source code for Angband (about 170,000 LOC) is freely available for non-commercial use.\n\nLua 4.0 is currently used in Angband to script the effects of magic spells and item use. The wrappers for the C functions and variables in the Angband game engine are created by tolua. Future Angband versions will extend the use of Lua to allow more customization of the gameplay. Lua was chosen as the scripting language for Angband because of its small footprint, high portability, speed, and ease of use.\n\nContact: Robert Ruehlmann\n\nLixoo 2D adventure game engine\n\nLixoo aims to be a fast, lightweight and extensible 2D adventure game engine. Lixoo's core is composed by the scripting engine provided by Lua, a plugin management system, and a minimal bunch of the engine's generic routines. Almost everything is scriptable with Lua and loadable as a plugin. This makes Lixoo extendable and a lot easier to port. We use Lua because it compiles without changes in several platforms and OSes, it's very fast and extremely small. Another interesting feature is the ability to run precompiled chunks: this way game scripts can be compiled to distribute final versions of the game.\n\nContact: Adrian Perez\n\nToME\n\nToME is a free roguelike game. It is a very evolved and deep game that started its life as a variant of Angband (of one of the variants actually) and has now grown into a wildly new game.\n\nToME uses Lua to allow customization of the engine, new quests, spells, powers, whatever. A lot is customizable thanks to Lua, and a lot more will be. Lua was selected because of its portability, smallness, clarity of syntax, tables and general neatness :)\n\nContact: DarkGod\n\nHands Browser\n\nHands Mobile Solutions\n\nHands is a Brazilian software company that provides technology for developing and deploying content, marketing and business applications to mobile platforms like PDAs and Cell Phones. Our PDA solution relies on a offline browser that uses Lua 4.0 as its scripting language. Lua is also used to create dynamic pages based on a internal relational database and some configuration scripts. Other Hands Browser's nice features include:\n\nLuaSockets TCP/IP layer for HTTP, FTP and email support;\n\nMD5 encryption and decryption;\n\nXML/HTML content grabbing;\n\nXSLT formatting templates;\n\nComplete API for creating business and content PDA applications;\n\nBitmap and animated GIF display;\n\nHTTP Sync capabilities;\n\nAvailable both for PalmOS and Windows/CE;\n\nLua was chosen because of its portability, speed, small footprint, and easy of embedding into host programs written in C.\n\nContact: Renato Crivano\n\nPsychonauts\n\nDouble Fine Productions\n\nPsychonauts is an XBox Action/Adventure game from the mind of Tim Schafer. All of Psychonauts Game logic is implemented via Lua. The Level Designers use Maya to create the geometry for the levels, and then place down markers for Lua controlled Script Entities. This includes all non-player characters, platforms, puzzle pieces. Basically the game engine boots up and places the main player into a static world. Lua scripts then take over and control all interactive elements. Lua is so light and fast! It is AWESOME!\n\nContact: Dave Dixon\n\nEmotion Engine\n\nOpen Source\n\nEmotion Engine is a 3d game engine based on plib for the 3d graphics, Lua for the scripting engine and xml for the world files. Originally the engines intent was to demo and create a tutorial on how to use plib for new game developers. This idea still stands but has now grown to a 3d Engine. Currently the engine is very new and there are some design changes that have to be completed. This Engine is meant to help people get started and experiment. New developers are more than welcome, working together we can learn Engine development. This is an engine ment for making mistakes, experimenting with ideas and most importantly learning and helping others.\n\nContact: Ben Woodhead\n\nDigital Fusion\n\neyeon Software\n\nDigital Fusion is a fully integrated, non-linear compositing and special effects post-production system for finishing, design and effects creation, used extensively in many feature films, HDTV productions, broadcast video, web-based/multimedia projects and more. Lua forms the basis of 'DFScript', an integrated scripting language added in Digital Fusion v4. This allows the automation of repetitive tasks within the program, as well as facilitating integration into other aspects of a post production facility, such as clip management, 3D renderer integration, EDL/conform integration etc.\n\nContact: Peter Loveday\n\nHyperspace Delivery Boy!\n\nMonkeystone Games\n\nLua was used as the language to handle all interaction, cinematics and game logic for each level in the game. Each game level had a Lua code file that contained all game logic, dialogue, cinematic code, etc. for that particular level. The Lua code files were pure Lua source and since Lua can compile at runtime, we could edit our source and then tell the engine to reload the Lua code file to test the changes without ever recompiling the game engine. HDB uses Lua for the PocketPC, PC and Linux versions. The Game Boy Advance version's Lua code and interface was all converted to straight C due to the extreme limitations of the GBA itself.\n\nContact: John Romero\n\nZIG Game Engine\n\nSourceforge.net Project\n\nZIG is a C++ library for scripted, action-multiplayer game programming. It's intended to be used directly for simple games, or as a starting point for the development of more sophisticated \"game engines\". Lua is the scripting language of ZIG. It was chosen because it's small, fast, and easy to use. Lua code will be used in the client and in the server, for instance, to assemble and to parse the application-specific part of network packets. This means that when you connect to a server with a newer version of the software, and perhaps with a new protocol, you can just download the client Lua code and start talking the new protocol, without having to update your game's native binaries. This empowers the game developer to squeeze the last bit out of the game protocol and to make practical experiments with the protocol, all without worrying about compatability with older versions\n\nContact: Fabio Reis Cecin\n\nMonday\n\nMonday is a collection of libraries and tools for the Dylan language. The Monday project uses Lua as the implementation and extension language for mmk, a specialized build tool for Monday's XML-based literate programs. (The mmk implementation also includes a Lua wrapper for libxml2.)\n\nContact: Peter S. Housel\n\nELinks\n\nELinks is text-mode web browser which can have various hook functions defined by the user in Lua. These hooks allow the user some degree of customisation over the basic program. For example, a hook can be defined to treat strings entered into a dialog box as terms to be searched for using a search engine, rather than a URL. Lua was chosen for its size, its string handling capabilities, and its relative ease of learning for non-programmers.\n\nContact: Jonas Fonseca\n\nGirder\n\nBessems-IT\n\nGirder is a Windows automation tool. It can control most Window s applications. To trigger commands you can have many kinds of input devices, things like a simple keyboard, Infrared receiver, X-10, Internet you name it. Girder is extensivly used in the HTPC (Home Theatre PC) community. Lua is the built-in scripting language in Girder that enables users to make complex commands. A plugin mechanism allows users to easily extend Lua, special commands give Lua the possibility to also trigger commands.\n\nContact: Ron Bessems\n\nMutant Storm\n\npompom\n\nInspired by Williams' Robotron and Smash T.V., MutantStorm is furious retro arcade gaming in a state of the art graphics environment for gamers who want pure action...\n\nContact: Miles Visman\n\nImpossible Creatures\n\nRelic Entertainment Inc\n\nImpossible Creatures is a PC RTS (real time strategy) game released on January 7th 2003. The project has 100's of thousands of lines of code and was written by ~8 programmers. Lua contributed about 50,000 lines of that code.\n\nLua was used extensively in all aspects of the game. It was used to configure almost every system and subsystem in the game. It defined and controlled the UI, managed the AI, and specified the look of the effects and other graphical entities. It was used in tuning the game in realtime, for editing unit attributes, processing the game rules, automation of tasks, and on and on.\n\nLua was chosen because of its speed, its simple syntax and its ease to understand for both programmers and designers. It was also easy to debug, modify and itegrate into our C++ game/ tools.\n\nContact: Shelby Hubick\n\nBrazilian Marines Warfare System\n\nCIASC/MB and Tecgraf/PUC-Rio partnership\n\nThe Brazilian Marines Warfare System (SJD - Sistema de Jogos Didï¿½ticos) is a computer-assisted warfare gaming system designed to support the training of Brazilian Marine officers. The SJD provides a complex and fully integrated combat models required to support Brazilian Marine exercises. The major functional areas are ground combat, air operations, fire support, ship-to-shore, logistics and engineering. The SJD uses digitized terrain files for trafficability, cover, and elevation in the area of operations. Either astronomical, weather and climate conditions can be described with resultant effects on ground movement, air operations, and visibility. Some modules of the game engine were wrote in Lua and all user interfaces were developed in Lua with IUP/CD library.\n\nContact: Roberto de Beauclair Seixas\n\ndZ80\n\nInkland\n\ndZ80 is a freeware Z80/Z180/Z80GB disassembler for binary files, such as arcade machine ROMs, Z80-based personal computer snapshots. dZ80 now has scripting support. Writing a script for dZ80 allows you to override, or simply modify dZ80's existing handling of opcodes. The scripting language used is Lua 4.0.\n\nContact: Mark Incley\n\nAranha\n\nThe Pepperfish Consortium\n\nAranha is a powerful web-application-development platform. Lua was chosen to drive it because Aranha needed a light-weight language which was easy for non-programmers to use. We also like Lua because it is easy to extend and offers many useful extensions. The Lua community is a very effective way to get help and ideas on how to improve on our project.\n\nContact: Daniel Silverstone\n\nSpellscape\n\nCodeminion Development Studios\n\nSpellscape is a 3d rpg/action computer game being developed by two computer science students in Warsaw, Poland. Almost all aspects of the game/scenario are controlled with Lua scripts - this includes game events, character AI, entity generation, visual fx, etc. Lua was chosen for its speed and easy integration with C/C++.\n\nContact: Maciej Biedrzycki\n\nPlot Graphic Library\n\nPelikhan\n\nThe Plot Graphic Library (PGL) is a C++ charting library specifically designed for Visual C++ and MFC applications. It is a complete solution for inserting 2D charting into your application. Lua is built on top of a limited C API wrapper of the library.\n\nContact: Jonathan de Halleux\n\nSilenceVST\n\nIrreducible Productions\n\nSilenceVST is a self-contained interactive language for programming music and sound, created by adding musical primitives written in C++ to Lua. SilenceVST runs as a standalone GUI application, as a standalone console application, and as a VST synthesizer or effect plugin. Users can write new plugins for SilenceVST in any language with a C binding, and such plugins automatically become part of the language. SilenceVST contains a programmable score generator together with two programmable software synthesizers. One, silence::Orchestra, is a new C++ synthesizer of my own design. The other is Csound version 4.23, embedded in SilenceVST using the Csound API. SilenceVST comes with several plugin opcodes, which also run in canonical Csound. These plugins include Jezar's freeverb, Perry Cook's Synthesis Tool Kit (STK) physical modeling instruments, and Peter Hanappe's iiwu SoundFont synthesizer.\n\nContact: Michael Gogins\n\nPremake\n\n379, Inc.\n\nPremake is a \"build script generator\". Premake reads configuration files written in Lua and can generate GNU makefiles, MS Visual Studio 6 workspace and project files, MS Visual Studio 7 solution and project files, and more coming soon.\n\nContact: Jason Perkins\n\nLua and Perl6 Virtual Machine\n\nBachelor's project for Computer Science at Hanzehogeschool Groningen, the Netherlands\n\nA compiler that compiles Lua code to the new Virtual Machine for Perl6, which is currently being developed (current version is 0.0.9).\n\nContact: Klaas-Jan Stol\n\nSpellForce - The Order Of Dawn\n\nPhenomic Game Development\n\nWe use Lua for several parts of the project. We first chose it to be the language for mission scripting (triggers and other stuff), but currently we use Lua for mission scripting, sound scripting, data definition language, general preprocess tools and other uses.\n\nContact: Dirk Ringe\n\nHarmony Assistant\n\nMYRIAD\n\nHarmony Assistant is powerful music notation and playing tool. It is now fully scripted by Lua 4. Harmony includes a Lua text editor with syntax coloring, an Interface Composer to build interface objects with Lua methods, a Lua debugger with breakpoints, step, global and local variable windows.\n\nContact: Didier Guillion\n\nDefender\n\nSeven Studios, Los Angeles\n\nLua was used as the scripting language to drive the missions for this PlayStation 2 game title (also ported to XBox and GameCube). We used Lua to script all the mission specific game events and extended it heavily to call numerous C++ routines from the scripts.\n\nContact: John Keating\n\nMMORPG: Monkey King II\n\nNetEase.com, Inc\n\nMonkey king II is the second game in the Monkey king series of MMORPG games. We are using Lua 4.0 as the scripting interface for the game UI and net protocol. It helps us to write flexible UI and can extend the gameplay easily.\n\nContact: Cloud Wu\n\nAPT-RPM\n\nConectiva\n\nLua has been used in APT-RPM to implement an extension system for the APT-RPM libraries, allowing many interesting tasks that can't be easily achieved using just the command line APT tools. With the scripting capabilities provided by Lua and the Lua API offered by APT-RPM, more advanced upgrading setups can easily be done, and it's possible to customize operations to the user's taste.\n\nA number of different languages were evaluated before Lua was chosen as the scripting language for APT-RPM. Lua was chosen because it's not a general purpose language. Lua is very small, fast, and perfect for embedding. No other language compares to Lua in that field.\n\nContact: Gustavo Niemeyer\n\nBlitzkrieg\n\nNival Interactive\n\nBlitzkrieg is a WWII real-time strategy game which implements Lua for scripting historical missions, as well as lets any player modify or create maps with a map editor using the Lua language.\n\nContact: Michael Allenson\n\nKQ, the console-style RPG\n\nAllegro community\n\nKQ is a console-style RPG for the PC that runs on DOS, Windows and Linux. Abandoned by its creator for personal reasons, the project was rescued by the Allegro community, thanks to the wonders of open-source software. In KQ, you control the destiny of any of eight different characters on a search for a magical staff. KQ has about 24000 lines of C source code and about 7000 lines of Lua scripts, which are used to control map triggers and progress flags. There are currently 10 KQ developers on sourceforge.net and thousands of users.\n\nContact: KQ Mailing List\n\nAPOCALYX 3D Engine\n\nTETRACTYS Software\n\nAPOCALYX is a simple open source 3D engine based on OpenGL and other free libraries. The engine includes simple features such as lens flares, sky boxes, flat and height field terrains, wavy surfaces, sprites, billboards, particles, 3D sound, compressed data management, MD3 models loader and animator, BSP levels loader, bumped materials, and Lua as a scripting language to describe and control the scenes without any recompilation. Features planned include the extension of the basic physics engine already available and more. The current implementation supports Win98 (or higher) with an accelerated graphic card installed and OpenGL drivers.\n\nContact: Leonardo Boselli\n\nArkhart\n\nNekeme Prod.\n\nArkhart is a Free (like in beer and speech, even the data, not just the code) (Multiplayer|Solo) RPG game in an original world called Arkhart. It uses its own 3D engine, called Ark, and all the game will be written in Lua, since the engine takes care of everything else. The engine itself is quite big (around ~50k lines of C++ code), and we are just starting to make the game... and we are always looking for talented people btw :) Lua was chosen because it was small, easy to use and understand :)\n\nContact: mat\n\nDCPlaya\n\nDCPlaya is a multiformat music player for Dreamcast, very flexible and extendable, with strong visual aspects. The whole GUI and many other aspects of DCPlaya were implemented in Lua, whereas all CPU usage critical tasks are implemented in C. Because Lua is used intensively on an embeded system with limited memory, we had to use a patched version of Lua 4.0 with incremental garbage collecting. (This is the version provided by Paul H. Liu.)\n\nContact: Vincent Penne\n\nMusicMUD\n\nEvil Magic Labs\n\nMusicMUD is a build-from-scratch mud codebase developed in the course of writing a mud (the Cryosphere). It uses Lua heavily, initially as a way to script events, but increasingly to implement commands and other more important parts. It's not just a toy mud, but a working one with over 40 missions and thousands of rooms. Lua was chosen for the ease of integration, the nice clean syntax, and the fact it is sandboxable.\n\nContact: Orange\n\nMythica\n\nMicrosoft\n\nUsed Lua on the server to script high-level behavior of entities and modules. Used Lua on the client for config stuff.\n\nContact: Curt Carpenter\n\nLantern Games Chess\n\nLantern Games\n\nWe have selected Lua 5.0 as our scripting language for Lantern Games Chess. All GUI elements are driven from Lua and the game's event handler is a Lua function. We are very pleased with the way Lua has been working for us, and we are continuing to find numerous ways to use Lua in our projects.\n\nContact: Paul Schuytema\n\nProject 193 Microcontroller\n\nThe Ohio State University Department of Engineering\n\nProject193 aims to create a robust, easy to use, general purpose microcontroller with specific considerations given to educational and robotics applications. Project 193 uses a Lua interpreter process running in the microcontroller firmware, and Lua as the target programming language for our language grammar translators.\n\nContact: Jeff McCune\n\nMeta-S\n\nJackson Solutions\n\nLua 5.0 is being incorporated into Meta-S, a parser generator, in order to allow reduction event code to be interpreted, rather than statically compiled. Since Meta-S grammars are already dynamic, the incorporation of Lua into Meta-S will finally allow parsers to be entirely defined fully at run-time.\n\nContact: Quinn Tyler Jackson\n\naXes\n\nArterial Software\n\naXes comprises a web server, a terminal server, and a set of tools that allow corporations to distribute existing AS/400 and iSeries applications via a TCP/IP network using a web browser. The web server component is called aXesW3 and the terminal server component is called aXesTS. Multiple instances of each server can be active at the same time. Commands are provided to start, stop and manage these servers. Tools are provided that allow developers to compress and decompress stream files, and to create and run script files written in the Lua language. These script files can be used to extend or customize the operation of the aXesW3 server, and can be used to write new web-based applications. The aXes implementation of Lua provides support for data queues and SQL access to AS/400 and iSeries databases.\n\nContact: Bob Moore\n\nPtokaX DC Hub\n\nPtokaX DC Hub is server application for Direct Connect P2P community. I've decided add scripting abilities on the end of 2002. Lua was exactly what I've been looking for. That time Direct Donnect was \"powered\" by Visual Basic server with VBScripting. These days more than 1400 servers out of 2200 use PtokaX and the Lua scripting popularity grows every day (check the forum).\n\nContact: Zdenek Stangl\n\nSpace Shuttle Hazardous Gas Detection System\n\nASRC Aerospace, Kennedy Space Center, Florida, USA\n\nLua 4.0 was integrated into the system that is used to monitor gas concentration levels during Space Shuttle launch operations. Launch personnel use Lua to perform some of the more tedious tasks such as long duration leak testing and statistical data collection. Lua was integrated into the Windows application that provides remote control of leak detection equipment installed at the launch pad. The remote control application provides hooks into Lua that allow a Lua script to gain access to the data collected and to issue commands to the leak detection equipment. Lua was chosen mainly because it is an easy language to understand (a benefit for the launch personnel) and it is very easy to integrate into a project.\n\nContact: Charles Curley\n\nFarCry\n\nCrytek/UbiSoft\n\nFarCry uses Lua extensively for scripting all game events and AI/game logic, both for single and multiplayer game, and for realtime game editing.\n\nContact: Marco Corbetta\n\nVerbi\n\nVerbi is a wxLua small application that gives all the conjugations for italian verbs.\n\nContact: Tiago Tresoldi\n\nMetaScope\n\nKrazydad.com\n\nLua-driven, image-searching kaleidoscope simulator.\n\nContact: Jim Bumgardner\n\nVendetta\n\nGuild Software\n\nVendetta is an internet multiplayer videogame. The client runs on Mac OS X, Linux, and Windows, and the server is FreeBSD.\n\nWe currently use Lua in each of the server-side sector processes -- Lua controls every aspect of the \"game\" separately from the \"engine\" which just handles physics and keeping things in sync across the network.\n\nLua has been a joy to work with for the most part. Initially debugging was very difficult to get used to, as many typos of table members weren't caught, but we got used to it and now have a better sense of debugging in Lua. The best part is that our developer accounts can run Lua code in-game and have the output returned to us as chat messages. Thus we can change the AI behavior, create space stations and wormholes, and pretty much modify any aspect of the universe while people are still playing.\n\nWe started with Lua 4, doing nothing but controlling behavior of the non-player ships. Lua 5 came out shortly afterwards, and features like coroutines were enough of a draw for us to scrap our entire server-side code base and start over with almost everything written in Lua.\n\nWe plan to use Lua in even more aspects of the server, such as handling logins and all database queries, and also on the clients for the user interface and inventory code.\n\nContact: Andy Sloane\n\nGorky Zero\n\nMetropolis Software\n\nGorky Zero is using Lua 4 for scripting AI, game logic and user interface. It was also used for realtime game debugging and tweaking.\n\nContact: Jacek Brzezinski\n\nHomeworld 2\n\nRelic Entertainment Inc\n\nHomeworld2 is a space PC RTS game that uses Lua4 extensively in almost every aspect of the game, including the UI, AI, game rules, game flow, stats, game attributes, game tuning and automation.\n\nContact: Shelby Hubick\n\nBattle Mages\n\nTargem Ltd.\n\n\"Battle Mages\" is a high-scale modern game that combines tactical strategy, quality role-playing system and original adventure elements. All game triggers, cinematic sequences and high-level magic effects are written using Lua 4. Lua is also heavily used for debugging purposes; in-game console fully incorporates Lua as its primary controlling language.\n\nContact: Alexey Scryabin\n\neGames Gameroom Excitement\n\nMagic Lantern Inc.\n\neGames Chess is a 3D chess. The Lua GUI handling from eGames Chess was expanded and more Lua interaction was introduced into our core system. Lua is very quickly becoming central to all of our projects.\n\nContact: Mark Manyen\n\nMikatron\n\nMikatron is a PC game currently under development that is inspired by the old Robotron arcade game. Mikatron uses Lua for enemy robot AI and general game configuration.\n\nContact: Mike DuVall\n\nLittle Robots, Making friends\n\nAbsolute Studios\n\n\"Little Robots, Making Friends\" is a party game consisting of 12 mini-games and a main game area. The game is being published by BBC Multimedia. The project consists of a C++ base with Lua running all the game code; we also used Lua for data description. We chose Lua because it is small and fast; we wanted a minimal script language without large CPU and memory overheads. Using Lua allowed us to develop the game very rapidly and to prototype new ideas quickly and safely. The project contains over 6000 lines of Lua code.\n\nContact: Robert Anderberg\n\nVega$ - Make It Big\n\nDeepred Games\n\nLua 4 was used extensively and successfully in the creation of the game at several levels. It was used to a significant degree in GUI creation, event handling, load/save functionality, parameter setup, scripting of maps and scenarios, object instantiation and so forth. The versatility and flexibility of Lua allowed us to move quickly when time was tight. It allowed us to tackle several fronts with minimal resources and allowed the designers the ability to tweak the game and change features on their own without much help. Due to the success of Lua 4 on this project and other prototypes, we have decided to fully commit ourselves to using Lua 5 and beyond for all our forseeable projects.\n\nContact: Simon Roper\n\nEnigma\n\nEnigma is a puzzle game, reminiscent of Oxyd and Rock'n'Roll. We are making extensive use of Lua 4 and tolua: for configuration files, for describing the graphical models and, most importantly, for describing the levels.\n\nContact: Daniel Heck\n\nRailway Mogul\n\nLimbic Jujitsu\n\nRailway Mogul is a realtime 3D strategy game in which the player is challenged to build a successful profitable railroad empire. All data, including the 2D Interface is fed to the game via Lua.\n\nContact: Aryan Mukherjee\n\nALPine\n\nALPine (Aftermath Lua Plugin Engine) is a tool for allowing plugin style mods for ALTAR Interactive's game UFO: Aftermath. Modders write plugins in Lua using functions provided by ALPine which allow for manipulation of the game data. ALPine can then apply a group of plugins to the game data, allowing multiple plugins to be active at once.\n\nContact: Andrew Campbell\n\nAutoPlay Media Studio 5.0\n\nIndigo Rose Corporation\n\nAutoPlay Media Studio 5.0 is a unique software tool which allows you to quickly create your own custom Windows software, autoplay/autorun CD/DVD ROMs, and interactive multimedia presentations. Simply drag and drop rich media content such as photos, video, audio, Macromedia Flash content, text, HTML, and more directly into your project. You can tie it all together with a powerful freeform scripting engine based on the popular Lua language. This easy-to-understand scripting language features everything from \"for, repeat and while\" loops, to \"if/else\" conditions, functions, variables and tables (associative arrays). We've included a library of 350+ powerful actions (high level functions) along with built-in mathematical and Boolean evaluation. The point-and-click \"Action Wizard\" and \"Code Wizard\" make is easy enough that even complete novices can add powerful interactivity to their projects. Advanced developers will appreciate the color syntax highlighting, code completion, function highlighting, as-you-type action prototypes and Ctrl+Space function listings.\n\nContact: Brett Kapilik\n\nLuaVIEW\n\nCIT Engineering\n\nThe LuaVIEW toolkit embeds the Lua scripting language into the LabVIEW graphical data-flow language. It allows Lua scripts to be run inside the LabVIEW runtime. The Lua language can be enhanced with custom LabVIEW-implemented functions so that LabVIEW can be called and scripted. LuaVIEW also provides tools for architecting modular LabVIEW applications with improved error handling.\n\nContact: Albert-Jan Brouwer\n\nCARA - Computer Aided Resonance Assignment\n\nCARA is a novel application for the interactive analysis and assignment of NMR spectra developed by the group of Prof. Dr. Kurt Wï¿½thrich, winner of the Nobel price for chemistry 2002. The software is written in C++, featuring an NMR object model accessible to Lua (which is statically linked).\n\nContact: Rochus Keller\n\nEntropy\n\nBinstar\n\nEntropy is a space-trading game using a massively multiplayer server based economy and communication mode to let players interact and enjoy it's universe together, while enjoying the hassle free enviroment an offline game provides.\n\nLua is used mainly on the backend, at the server, to provide script for AI, economy models, and describing equipment. All of those things need to be simply changed by people that don't necessarilly understand programming due to the expanding nature of the game. Lua functions bound with a healthy dose of C functions results in fairly intuitive scripts. In addition, scripts are sent to clients with patch server behaviour instructions (like updating the client, changing the protocol, etc.).\n\nBearing in mind also that most of Entropy's content is procedurally generated, scripting is a logical way to define elements that rely on predictable yet unknown data, such as missions.\n\nAdded to that is the mud-like use of Lua to define server side how the game reacts to player commands, such as say, /emote etc. This also allows developers particularly powerful debugging commands.\n\nOriginally I was writing my own scripting system but why re-invent the wheel? Lua is more feature packed and versatile than anything I could've done in the time available to a game development cycle.\n\nContact: Eth\n\nJenet CAMAC crate controller\n\nZP Engineering srl\n\nA novel embedded controller for CAMAC crates (racks of equipment conforming to IEEE-583 standard, widely used in nuclear physics applications) has been designed; a local Lua engine (based on version 4.0) allows stand-alone execution of scripts at startup or under user control. Support for sockets (from Luasocket), extensions for binary operators and more than 60 custom commands specific to the underlying hardware have been added. We appreciated good performance and easy integration of the scripting engine.\n\nContact: Umberto Zanghieri\n\nSigonyth - Desert Eternity\n\nNew Desert team\n\nSIGONYTH DESERT ETERNITY is a planet of eternal desert. Most of this planet is covered with sand. It's occupied by human race called Welimars. In Welimars language Sigonyth means ETERNAL DESERT. Atmosphere on the planet is very hot what makes impossible to walk on desert without proper suits. Going to the desert without good clothes is dangerous for two reasons. High temperature makes human body to dehydrate fast what leads to death. Second danger are desert maggots hiding in the sand and mutated griffons flying in the air.\n\nWe are creating our original engine which is specially made for this game (C++ and SDL). We use Lua to make scripts that can be used to execute actions on every part of game. For example: skills description, traps description, dialog scripts.\n\nContact: Dawid Makowski\n\nArGON\n\nMatchstickware\n\n(Ar)gon (G)eneric (O)nline (N)etwork server - Mostly designed to be used to create MUDs, currently text-only, in the future it may include graphical MMORPGs. Has been in development for 2 years now, with only one programmer and no other staff. Lua is being used to allow \"builders\" to create \"worlds\" from within the server without having to write a single line of C.\n\nOriginally I had written my own script language for use with the server, but had a change of heart and swapped over to Lua for the following reasons: a) Developing and expanding my script language would have been another full-time project when ArGON takes up enough of my time already, b) Lua is widely used and therefore learning Lua is much more useful than learning yet another proprietary script language, c) Lua has more functionality than I could be bothered adding to mine, d) Lua is written in ANSI C, e) Is flexible and easily expanded, f) Out of all the other scripting languages I have looked at, it is by far the easiest to embed into software and use.\n\nContact: Jarratt Davis\n\nJukeBox VIRTUAL\n\nVortex Entertainment / Eletrï¿½nica Vector - Sï¿½o Paulo - Brazil\n\nJukebox Virtual was the first commercial jukebox based on MP3 digital technology, fully developed in Brazil. Lua contributed by being an easy and reliable way to develop dynamic menus to the complex setting system of the machine. Before the implementation of Lua in the Jukebox Virtual, the settings system of the machine took months to be developed. After Lua, we've rewritten the entire system in just a few days. Lua eliminated the compilation problem, since we didn't need to close and recompile the entire program after each modification. Lua is also a very efficent tool to develop the advertisement system, which allow the user to program ad-banners, creating animations and simple visual effects in a simple way, using the VGM micro-engine that also implements the Lua technology and is designed to the game development market. Thanks to Lua, the owner of a JBV can customize some properties of the program.\n\nContact: Alexandre Ribeiro de Sï¿½\n\nGiggle\n\nThe Moving Picture Company\n\nGiggle is a renderman procedural DSO developed for the production of visual effects created for the film 'Troy'. This project required the rendering of scenes comprising tens of thousands of battling soldiers,in addition to complex city layouts and particle effects for flames, smoke and dust. The generation of all this geometry was handled almost exclusively at rendertime by Giggle.\n\nGiggle's core functionality comprises approximately 40,000 lines of C++, written by 2 MPC programmers over the course of 9 months. This provides many capabilities including :\n\nloading of geometry, shaders, particle caches and a proprietary cache format for agent simulations.\n\nskinning and other geometry modifiers\n\nprocedural geometry generation\n\nkd tree classes for space partitioning\n\ngeometry evaluators to perform ray intersections and closest point queries\n\nThe functionality is bound into Lua, providing a flexible scripting interface which allows it to be easily adapted to specific tasks. MPC initially chose Lua for its reputation for speed and efficiency as well as for the great simplicity of its API. It has subsequently proved itself through heavy use by a team of 16 or so CG artists and across a renderfarm of over 500 machines.\n\nSince adoption, Giggle's use has been extended to other MPC feature pipelines, and coupled with an interactive interpreter and OpenGL preview renderer to provide interactive script development and debugging.\n\nContact: John Haddon\n\nPainkiller\n\nPeople Can Fly\n\nPainkiller is a first-person horror shooter, designed to satisfy a gamer's hunger for intense, fast-paced action. Lua is used for game logic, AI, GUI and as a RPC in multiplayer.\n\nContact: Bartek Sokolowski\n\nDirect Connect Secured Hub\n\nDCSH\n\nDCSH is a server (or hub) allowing communication between direct connect clients. It's very flexible and can be scripted with Lua.\n\nContact: dcsh\n\nMPT Discovery\n\nCableTest Systems Inc.\n\nMPT Discovery is a new generation of software used on CableTest's MPT Series Wiring Analyzers. MPT Series Wiring Analyzers use computer controlled, state-of-the-art switching architecture to evaluate the functionality of complex electrical wiring systems. The project was developed in Delphi and is using Lua 5.0 both to allow the user to perform complex scripting and, internally, for handling the product under test's configuration.\n\nContact: Marius Gheorghe\n\nzeGraph\n\nzegraph.com\n\nzeGraph is an object rendering system designed for scientific data visualization and yet can be used to create 3D arts in a broad scope. It is small, fast, and easy to use. Here is a summary of zeGraph features: Light weighted and high performance; Rendering 2D and 3D objects using Lua script; Easy to construct scene and produce complex 3D image. Utilities to create 3D shapes; Offscreen image can be saved as JPEG, PNG, TIFF, and BMP; Offscreen image can be used directly as texture; Output to window for real time display or animation; Creation of simple graphic user interface; Array data manipulation; Binary input and output of netCDF and HDF formats, GSHHS coastline, and any other formats; XML parsing using Expat.\n\nContact: zegraph.com\n\nRandomedia Concept\n\nMoraldo Games\n\nA very bizarre action game developed by the Argentine game development company Moraldo Games, in C++ and Lua. A web page about it is also available on http://games.moraldo.com.ar/randomedia.htm (only in spanish though). Lua was used for storing the animation information, program data, and also for managing the entire GUI.\n\nContact: H. Hernan Moraldo\n\nEressea\n\nAndune GBR\n\nEressea is a play-by-email strategy game. While the bulk of the game is written in C, we use Lua to extend the gamecode and create different rule-sets for different worlds. We used luabind for making the bindings, which was straightforward and easy, even though our code was C, not C++. The game uses a proprietary data format that is hard to edit, and by adding a Lua console to it, we've now got a great way to change data and make small corrections programmatically without having to rebuild the server code.\n\nContact: Enno Rehling\n\nFrontrunner\n\nMagic Lantern Inc.\n\nFrontrunner is a simulation of the Presidential election. Frontrunner lets you jump into politics like you're out there kissing babies and shaking hands. Lua is the main development language for the product. It controls the game flow, GUI interaction, AI and nearly every other aspect of the game. This is our 3rd release using Lua.\n\nContact: Mark Manyen\n\nStyleADVISOR\n\nZephyr Associates\n\nStyleADVISOR is an institutional investment analysis platform used in analyzing investment managers, funds, markets and portfolios. Over 500 firms, including many of the worlds leading financial institutions, use StyleADVISOR as part of their investment management process. Lua 5.0 was integrated into StyleADVISOR's 500,000+ lines of C++ to provide end-user flexibility in generating reports. Lua allows the user to script the generation of dynamic text within reports that comply with various regulatory agency requirements. Lua was chosen for its ease of embedding, powerful yet simple grammar, and speed.\n\nContact: Aaron Moore\n\nsidescrollerGL\n\nA smooth scrolling 2D tile engine in Lua using OpenGL and ZEngine bindings. Originally the engine was all in C++, but after toying with Lua bindings for awhile I decided to go ahead and just try a full rewrite in Lua--it paid off. There's no noticable performance hit, the engine is more extensible, and new changes and additions are quick and painless. Eventually an actual game will be built on top of this technology--keep watching.\n\nContact: Kevin Watters\n\nRibosome Builder\n\nUniversity of Montana, USA\n\nThe Ribosome Builder Project aims to simulate the dynamic behavior of the ribosomal translational machinery. A secondary goal is the establishment of an open source project for developing modular, reusable, portable and documented software components and frameworks for structural and dynamical molecular modeling. The core application is written in C++. For rapid prototyping and tool development, the program provides a scripting interface implemented in Lua. The Rbq-Lua API is a comprehensive and documented set of functions, organized in different categories.\n\nContact: William Knight\n\nMinions of Mirth\n\nPrairie Games\n\nMinions of Mirth is a Massivle Single Player RPG in development at Prairie Games. We chose Lua for our database configuration language because of its simplicity to embed. Thanks to all the Lua developers and supporters!!!!\n\nContact: Josh Ritter\n\nInequality Computations (Welfare Economics)\n\npoorcity.richcity.org\n\nLua is used to provide a simple program for computing inequality coefficients (e.g. for wealth distribution and income distribution). Besides the usual coefficients (Gini, Atkinson, Hoover etc.) also an inequality coefficient based on the Kullback-Liebler-Redundancy (Actual redundancy is maximum entropy minus actual entropy) is computed as an average of two two Theil-Redundancies.\n\nContact: Goetz Kluge\n\nCentaur Force\n\nFusionX Game Development Studio\n\nCentaur Force is a tactical First Person/Third Person shooter set in 2005. The game will feature gameplay mixing Counter Strike, America's Army, and Rainbow Six. Lua is used for scripting events, triggers, etc. Basically everything that you would see in the game will be scripted via Lua + luabind.\n\nContact: Stephen Eckenrode\n\nBCDC++\n\nDirect Connect P2P Community\n\nBCDC++ is a popular clone/mod of the most popular Direct Connect peer-to-peer client, DC++. Due to the huge amount of small feature requests, the main author - BlackClaw - decided to add Lua support so non-C++-programmers could implement those features themselves. Lua scripting is now in use for colorization of chat lines (highlighting), automated responses and even bots for DC-hubs (servers) that lack scripting support.\n\nContact: Walter Doekes\n\nOpenSource Metaverse Project\n\nSourceForge-based project\n\nThe OpenSource Metaverse Project aims to provide a virtual online environment, a metaverse, where users can create what they choose on the fly and add scripts dynamically into the world. Lua was chosen for the role of secure scripting engine because it is very easy to attach to C, provides a tight control over what can and cant be executed, and the Lua language itself is powerful and easy to use. Lua is fast becoming a standard for in-game scripting engines.\n\nContact: Hugh Perkins\n\nTeleTrader Professional Workstation\n\nTeleTrader Software AG\n\nTeleTrader Professional is a complete information and analysis platform with quote data, news, charts and extensive possibilities of technical analysis. Lua is currently used for simple configuration tasks and transformations of some data sets. It is planned to further enlarge its use within the project for various calculations and probably in some form of macro language for Professional.\n\nContact: Bosko Ivanisevic\n\nYzis\n\nYzis team\n\nYzis is a vi compatible editor, which provides a reusable vi-engine, a ncurses based vi, a KDE based vi and a vi component for the KDE project. We use Lua as the scripting language.\n\nContact: Philippe Fremy\n\nQuest3D\n\nAct-3D B.V.\n\nQuest3D has an extra building block so that Lua scripts can be used to program logic in the Quest3D software. Quest3D can be used to create virtual reality productions using real-time 3D techniques.\n\nContact: Edward Niewold\n\nSciTE\n\nScintilla.org\n\nSciTE is a SCIntilla based Text Editor. Originally built to demonstrate Scintilla, it has grown to be a generally useful editor with facilities for building and running programs. It is best used for jobs with simple configurations. SciTE features a lot of modern editor features (most provided by Scintilla) like syntax highlighting of code, call tips, autocompletion of code, folding, etc. Since version 1.60, Lua can be used to perform operations on the current buffer, using the full API of the Scintilla component.\n\nContact: Neil Hodgson\n\nLumo\n\nKeep IT Simple Software\n\nLumo is a 3D middleware for use in complex virtual environments. It is used for medical, training & simulation and entertainment. Lua is used as a programmable shader pipeline for the global illumination simulator next to HLSL of DirectX and GLSL of OpenGL.\n\nContact: info AT keepitsimple.nl\n\nCamgoo\n\nbhv Software GmbH & Co. KG, Germany\n\nWe used Lua 5.0 with our own C++ wrapper to drive the games logic. We chose Lua because of its easy integration and robustness. We have never experienced any performance issues and could have build the scene graph entirely by script what was abandoned due to schedule issues.\n\nContact: Phil K\n\nUltimate Mini Golf Designer\n\nMagic Lantern\n\nMini Golf construction. Uses Lua 5.0 for many things including AI control, GUI and setup and game event handling. This is our 4th shipped product using Lua.\n\nContact: Mark Manyen\n\nThe Fairly OddParents: Shadow Showdown\n\nImaginEngine Corp.\n\nArcade style childrens game. We use Lua 5.0 in our engine's console window for debugging, and also for light scripting of game events. Other games from us, Care Bears Lets Have a Ball and The Incredibles: When Danger Calls, use Lua in the same fashion.\n\nContact: Brian Weed\n\nMoho\n\nLost Marble\n\nMoho is a 2D vector-based cartoon animation application for use by hobbyist animators as well as professional studios. Moho uses Lua 5.0.2 to implement all of its drawing and animation tools. Lua is also used to create \"plug-in\" menu commands, allowing users to extend Moho with special drawing and animation effects. Lua extensions to Moho have the ability to repsond to mouse, keyboard, and pressure-sensitive tablet events, as well as create and manage GUI elements in the program. Lua was a great choice for this project because of its speed and the ease with which it can be integrated with C++ code.\n\nContact: Mike Clifton\n\nSetup Factory 7.0\n\nIndigo Rose Corporation\n\nSetup Factory 7.0 is a Windows software development tool for creating compact software installers for deployment via web, email, LAN, CD, DVD and floppy disk. Its compact single-file setup creates little runtime overhead (~450KB including uninstall) making it fast and easy to initialize and install. It uses Lua 5.0 as a scripting language to control and customize the installation process.\n\nContact: Brett Kapilik\n\ngluas\n\nGjï¿½vik University College\n\nAn gimp 2.x plug-in for prototyping image processing algorithms in Lua. Available as source and precompiled for win32.\n\nContact: ï¿½yvind Kolï¿½s\n\nNut/OS Configurator\n\negnite Software GmbH\n\nNut/OS Configurator is a GUI application for configuring an RTOS and TCP/IP stack for tiny embedded systems. It's based on the eCos Configuration Tool, but uses Lua as its embedded scripting language.\n\nContact: Harald Kipp\n\nLegend Alive Series\n\nArtmanha Studios\n\nLua is being used as the \"Triggers\" language of the Game Map Editor, similar to \"Never Winter Nights\". The Map Editor will be the heart of Legend Alive and will be released to players, in a more practical version, different from the Developer version that we are currently using.\n\nContact: Marcelo M. Prado\n\nLock On: Flaming Cliffs\n\nEagle Dynamics\n\nLock On: Flaming Cliffs is a modern air combat simulator. Currently it uses Lua for configuration files parsing and for dynamic data export/import. Our advanced users make scripted LuaSocket network connections between Lock On and their custom cockpit instruments software. We also intend to use Lua in our future projects for UI implementation, for AI scripting, for data base processing, etc.\n\nContact: Valery Blazhnov\n\nXVP - eXtensible Visualization Platform\n\nSoular Souls Studios\n\nXVP is a 3D Visualization Toolkit for games and other applications requiring graphics, sound, input and network support. Lua fits into the package by offering a console at runtime that can be used to dynamically affect the engine by modifying settings, displaying debug information, etc. Lua was chosen because of its speed, ease of use and proven abilities in the game industry.\n\nContact: Lynn Duke\n\nFlatOut\n\nBugbear Entertainment Ltd.\n\nFlatOut uses slightly modified Lua 5.0 for configuration data and GUI. Total Lua code is around 50000 lines (including config files). FlatOut was developed for PC, Xbox and PS2.\n\nContact: Mikko Sivulainen\n\nSimulators\n\nTeam Simrac Finland Oy / Eepsoft Oy\n\nSimulators use Lua for configuration files and other scripting needs. The training simulators have their operator/instructor view almost completely implemented using Lua combined with wxWidgets GUI library glued together with wxLua. The exercise control in training simulators is also Lua based.\n\nContact: Eero Pajarre\n\nGoElemental!\n\nBath Spa Art College\n\nGoElemental! is an interactive open-air project in the city of Bath, UK based around the periodic table of elements. Users use cellphones to text in the name of an element and an informative movie about the element plays projected onto a wall above.\n\nAs well as being used for the base logic of the project Lua was used to handle interactions with a cellphone, sending and receiving SMS'es using AT commands over a serial connection. Lua's flexibility allowed quick prototyping and testing, and allowed an easy transition to more structured coding later.\n\nThe code was developed in San Francisco, CA, and the test system in the UK didn't have a full C++ dev environment so embedding Lua allowed a great deal of flexibility, most development moving out of C++ into Lua fairly quickly.\n\nUsing Lua 5.0.2 as it was current when the project was started. One coder, a month or so of time, and it's probably much smaller than many of the other projects on the uses page.\n\nContact: Peter Bradshaw\n\nUghly!\n\nRazor Games\n\nUghly is a remake of old DOS game called \"UGH!\". Ughly was designed to have two features: flexibility and backward compatibility. Flexibility was provided by the Lua script language. All significant variables like gravity factor or taxi draught are defined in a Lua configuration file. Maps are described with meta-language, designed to be easily comprehended by non-programmers. Also particle effects are defined in external *.pef files, utilizing Lua.\n\nContact: Konstanty Kalicki\n\nMoonlight\n\nAn implementation of the Lua programming language (version 4), with a GUI, editor and support for dbf files. This distribution also includes a character mode version of the interpreter with support for the dbf and date functions. Open plugin architecture allows for extension of the functionality provided.\n\nContact: Kenneth Camargo\n\nSATOMI SipProxy\n\nA modular and extendable SIP proxy (RFC 3261) that has script support through Lua. Lua is mainly supposed to add more dynamic routing capabilities (also on a per user base) but can be used in any prepared component. The Lua virtual machine is also seen as a base on which other languages may be build. An useful example for this would be CPL (Call Processing Language). Lua has been choosen because of its easy interface for extensions, customization and integration into the application, its platform independence, its small size and because it is a technically mature, used software.\n\nContact: Heiko Bennewitz\n\nLuaMat\n\nOpFX\n\nLuaMat is dedicated to Image Processing. It includes image io, visualization, matrix linear algebra, morphology, edges detection and segmentation functions. It works with images in bytes or in floating points, 1, 2 (complex images) or 3 channels. First developed for rapid prototyping of Photoshop and DirectX filters, the design is now oriented to a general purpose image processing language. LuaMat uses Lua 5.1 and the OpenCV library. It runs as a stand-alone interpreter under Windows. Lua was chosen for its speed and for its powerful simplicity. LuaMat is still under development (integration of others algorithms).\n\nContact: OpFX\n\nHunter Dan's Bowfishing Survival Gauntlet\n\neV Interactive LLC\n\nHunter Dan's Bowfishing Survival Gauntlet is a first-person bowfishing game where the player can explore and fish in three detailed environments inluding an exotic tropical island, and an overgown stretch of the Amazon. Hunter Dan's Bowfishing Survival Gauntlet uses Lua to provide access to much of the engine's functionality. Scripted sequences, end-of-game conditions and the menu interface are all specified in Lua. Lua was chosen for its lightweight nature, ease of use, and overall simplicity.\n\nContact: Matthew Harmon\n\nFish Fillets - Next Generation\n\nFish "
    }
}