{
    "id": "dbpedia_8579_1",
    "rank": 11,
    "data": {
        "url": "https://github.com/pixeljetstream/glslc",
        "read_more_link": "",
        "language": "en",
        "title": "pixeljetstream/glslc: Simple GLSL compilation checker that uses the display driver",
        "top_image": "https://opengraph.githubassets.com/504b843128013f0a025cd8a059fe5c3577f3cc523eb9eb13318a1fd5831f3dad/pixeljetstream/glslc",
        "meta_img": "https://opengraph.githubassets.com/504b843128013f0a025cd8a059fe5c3577f3cc523eb9eb13318a1fd5831f3dad/pixeljetstream/glslc",
        "images": [
            "https://camo.githubusercontent.com/5e51b22e02cfb76041864e22ee90933567989893eaf3622a40a9f5bf3435412e/687474703a2f2f7777772e6c7578696e69612e64652f696d616765732f65737472656c615f676c736c632e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Simple GLSL compilation checker that uses the display driver - pixeljetstream/glslc",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/pixeljetstream/glslc",
        "text": "Simple GLSL compilation checker (uses display driver)\n\n(c) 2013-2015 Christoph Kubisch: pixeljetstream@luxinia.de http://glslc.luxinia.de\n\nBasic commandline compiler for GLSL\n\nCreates an invisible dummy window and evokes the GL driver for compiling.\n\nCan dump pseudo assembly files for NVIDIA\n\nBasic #include handling independent of GL_ARB_shading_language_include support\n\nBest used with GLSL editing capabilites of the https://github.com/pkulchenko/ZeroBraneStudio/ IDE\n\nInstall the zbstudio-graphicscodepack\n\nSet the GLSLC_BIN_PATH environment variable to where your glslc.exe is located (excluding the exe name). Alternatively add \"path.glslcbin = [[path to glslc.exe]] \" to your \"cfg/user.lua\" file. Upon restart of zbstudio, you should now see the GLSL top menu.\n\n'Compile from .ext' derives the shader profile type from the filename, for example a \".v\" within the filename causes the file to be compiled as vertex shader. The tool tests in following order: \".v\",\".f\",\".g\",\".t * c\",\".t * e\",\".c\".\n\n'Link multiple .ext' will try to compile and link multiple shader files that only differ in their file extension.\n\nglslc -o output.txt -profile vertex myvertex.vs\n\nglslc -glslversion \"430 core\" -o output.txt -DFOO -vertex myvertex.vs -fragment myfrag.fs\n\nglslc -glslversion \"430 core\" -o output.txt -DFOO -SD_VERTEX_ -vertex myprogram.glsl -SD_FRAGMENT_ -fragment myprogram.glsl\n\nglslc [options] filename\n\n-profilename\n\nor\n\n-profile profilename\n\nProfilename can be: vertex, fragment, geometry, tessevaluation, tesscontrol, compute and must be specified prior each file name.\n\n-glslversion \"string\"\n\nPrepends \"#version string\\n\" prior macros and shader and puts // in front of #version find in shaderfile.\n\n-separable\n\nWill mark the program separable (default is false) prior attaching and linking, if GL_ARB_separate_shader_objects is supported.\n\n-o outputfilename\n\nNVIDIA drivers can output pseudo assembly file based on NV_program\n\n-P preprocessfilename\n\nstores the pre-processed file for the next specified shader\n\n-E\n\nPre-processes files only, no GL context creation. Outputs to stdout unless -P was specified.\n\n-DMACRO[=VALUE]\n\nPrepends '#define MACRO VALUE' to all shaders. If VALUE is not specified it defaults to 1.\n\n-SDMACRO[=VALUE]\n\nPrepends '#define MACRO VALUE' to next shader. If VALUE is not specified it defaults to 1. All shader defines are cleared with each shader file.\n\nCurrently Windows and Linux are supported. For Visual Studio 2008 a solution exists in /buildvc9. The project is just the src/glsl.cpp compiled as console application.\n\nThanks to Alan Chambers for Linux support."
    }
}