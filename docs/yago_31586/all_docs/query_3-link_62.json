{
    "id": "yago_31586_3",
    "rank": 62,
    "data": {
        "url": "https://github.com/ascherer/mmix/blob/master/README",
        "read_more_link": "",
        "language": "en",
        "title": "mmix/README at master · ascherer/mmix",
        "top_image": "https://opengraph.githubassets.com/ca00104624fafdb06e8f8ec65b68364a7add38b7a36d1d4c2b448e213d58e847/ascherer/mmix",
        "meta_img": "https://opengraph.githubassets.com/ca00104624fafdb06e8f8ec65b68364a7add38b7a36d1d4c2b448e213d58e847/ascherer/mmix",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "MMIX 2009 – a RISC computer for the third millennium - mmix/README at master · ascherer/mmix",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/ascherer/mmix/blob/master/README",
        "text": "MMIXware sources --- Initial release\n\nGreetings to the courageous souls who will be first on their\n\nblock to run MMIX programs! I've tested the programs in this directory\n\nfor several months and I can't find any more bugs, so now it is\n\nyour turn. I hope you will be able to help me gain experience with\n\nlots of different compilers and platforms.\n\nA hardcopy book that contains listings of these programs together\n\nwith handy cross-indexes on each two-page spread has been published:\n\nMMIXware by Donald E. Knuth\n\nLecture Notes in Computer Science 1750 (Springer Verlag, Heidelberg, 1999).\n\nAll source files are written in CWEB, a well-tested and widely\n\navailable system (see http://www-cs-faculty.stanford.edu/~knuth/cweb.html).\n\nFILES\n\nboilerplate.w Legal stuff; says you can copy but not change\n\nthe master sources\n\nmmix-doc.w Detailed description of the MMIX architecture\n\nmmixal.w Assembly program; includes detailed description of the\n\nsymbolic assembly language (MMIXAL), as well as\n\na full description of the binary executable format\n\nmmix-arith.w Subroutines to implement 64-bit arithmetic on a\n\n32-bit computer; includes complete implementation\n\nof standard IEEE floating binary arithmetic\n\nmmix-sim.w Program for the simple (non-pipelined) simulator;\n\nincludes detailed description of the runtime\n\nenvironment and facilities for online interaction\n\nmmix-io.w Subroutines to implement rudimentary memory-mapped I/O\n\nmmotype.w Program to convert binary executables to readable format\n\nabstime.w Program used to give each MMIX implementation a unique ID\n\nmmmix.w Driver program for the pipelined meta-simulator\n\nmmix-config.w Configuration module for the pipelined meta-simulator\n\nmmix-pipe.w Main logic of the pipelined meta-simulator\n\nmmix-mem.w Module to change if memory-mapped I/O is added to\n\nthe meta-simulator\n\ncopy.mms Example of MMIXAL I/O: copies a given file to standard output\n\nsilly.mms A test program that exercises almost all 256 opcodes\n\nsilly.run Command script to use when simulating silly.mms\n\nsilly.out The \"correct\" output of that silly input\n\niotest.mms Another test, for the I/O routines not used in \"copy.mms\"\n\ncrypto.mms, fib.mms, primes.mms, ...: Example programs used in TAOCP 1.3', 1.4'\n\nmmix.mp METAPOST source for an illustration used in mmix.w\n\nmmix.1 METAPOST output from mmix.mp; you don't need to run METAPOST\n\n*.mmconfig Example configuration files (for experts using mmmix)\n\n*.mmix Example hex program files (for experts using mmmix)\n\nMakefile UNIX makefile\n\nmakefile.dos DOS makefile (for DOS/Windows platforms)\n\nHOW TO GET STARTED\n\nFirst try \"make doc\"; this, at least on UNIX-like systems equipped with dvips,\n\nshould create three PostScript documents called mmix-doc.ps, mmixal-intro.ps,\n\nand mmix-sim-intro.ps. Print these files, and move each table-of-contents\n\npage to the front (those pages appear at the end). Read those documents,\n\nand please report any errors you find to ruckert@cs.hm.edu.\n\nIf your system is unable to create those documents for some reason, go to\n\nhttp://mmix.cs.hm.edu/doc\n\nfor pdf files, or to\n\nhttp://www-cs-faculty.stanford.edu/~knuth/mmix-news.html\n\nand download the compressed PostScript files from there.\n\nSay \"make clean\" when you've got hardcopy.\n\nThen try \"make mmix\", to create the simulator, and \"make mmixal\" to\n\ncreate the assembler. (Also \"make mmotype\" will create the MMOtype utility;\n\n\"make all\" makes all three, and it also makes the meta-simulator.)\n\nThen \"mmixal -l copy.lst copy.mms\" should create the MMIX object file\n\ncopy.mmo, as well as a symbolic listing file called copy.lst.\n\nThen \"mmix copy copy.mms\" should simulate MMIX copying the file copy.mms\n\nto the standard output on your terminal. In general,\n\nmmix <options> copy <filename>\n\nshould copy any given text file to the standard output. The options are\n\nexplained near the beginning of the documentation for mmix-sim, and\n\nyou get a summary of all command-line options if you say just \"mmix\"\n\nwith no arguments (or with unparsable arguments).\n\nThen \"mmixal silly.mms\" followed by \"mmix -i silly\" followed by \"i silly.run\"\n\nshould produce about 100K bytes of output that matches silly.out.\n\nOnce all this works, you should be able to try programs of your own.\n\nADVANCED TOPIC: THE PIPELINE SIMULATOR\n\nAfter you have some experience with the simple simulator, you're ready\n\nfor the super meta-simulator, \"mmmix\". This one is a lot more complicated,\n\nand the present interface is not especially user-friendly, but it can be used\n\nfor incredibly interesting tests of programs and hardware configurations.\n\nTo get started, \"make mmmix\" and then try this:\n\nhome_machine> mmixal hello.mms\n\nhome_machine> mmix -Dhello.mmb hello\n\nhome_machine> mmmix plain.mmconfig hello.mmb\n\nmmmix> 10000\n\nRunning 10000 at time 0\n\nhello, world\n\nHalted at time 405\n\nmmmix> q\n\nSimulation ended at time 406.\n\nPredictions: 0 in agreement, 0 in opposition; 0 good, 0 bad\n\nInstructions issued per cycle:\n\n0 380\n\n1 26\n\n[Explanation: First we use the mmixal assembler to create the object\n\nfile hello.mmo from the symbolic file hello.mms. Then we use the simple\n\nmmix simulator to prepare a binary dump file, hello.mmb, which it prepares\n\nfrom hello.mmo. Then we invoke the meta-mmix simulator (mmmix) with\n\nthe sample configuration file plain.mmconfig and the program file hello.mmb.\n\nThen we ask mmmix to \"run for up to 10000 cycles\". It actually finishes\n\nafter 405 cycles, having printed out its famous message to the world.]\n\nhome_machine> mmix -Dsilly.mmb silly\n\nhome_machine> mmmix plain.mmconfig silly.mmb\n\nmmmix> 10000\n\nRunning 10000 at time 0\n\nWarning: TRIP at location 000000000000039c\n\nWarning: floating point underflow at location 00000000000003a0\n\nHalted at time 4424\n\nmmmix> q\n\nSimulation ended at time 4425.\n\nPredictions: 183 in agreement, 15 in opposition; 176 good, 22 bad\n\nInstructions issued per cycle:\n\n0 2655\n\n1 1770\n\n[Explanation: This time we try mmmix on the torture-test program \"silly\".\n\nThat program is completely weird, but it does exercise all 256 instructions\n\nand comes up with lots of different cases. The \"silly\" program is so weird,\n\nit is semantically incorrect in its use of PREST instructions; hence it\n\ncannot be guaranteed to run correctly on all implementations of MMIX.\n\nBut with a sufficiently large Dcache, as in plain.mmconfig, this bug does\n\nnot arise, and the program runs through all its paces correctly,\n\nincluding many complicated interrupts and interactions between\n\nthe register stack and the various caches. You can watch all the gory details\n\nby asking for \"verbose\" output, saying\n\nmmmix> vff\n\nmmmix> 10000\n\nalthough the output file will then be huge. Indeed, it took me a couple days\n\nto verify that everything was indeed working as I thought it should.]\n\nhome_machine> mmmix test1.mmconfig test1.mmix\n\nmmmix> @8000000000010000\n\nmmmix> b0\n\nmmmix> vff\n\nmmmix> 140\n\nRunning 140 at time 0 with breakpoint 0000000000000000\n\n*** Cycle 0\n\nrunning Write:92 hist=0 state=0\n\nscheduling Write:92 at time 1, state 0\n\n. . . . . . {lots more}\n\n*** Cycle 137\n\nrunning ITfiller:93 hist=0 state=3\n\nrunning Write:92 hist=0 state=0\n\nscheduling Write:92 at time 138, state 0\n\nrunning Fetch:0 hist=0 state=19\n\nscheduling ITreader:98 at time 138, state 0\n\nscheduling Ireader:98 at time 138, state 0\n\nscheduling Fetch:0 at time 138, state 1\n\nscheduling UNI1:1 at time 138, state 0\n\nIssuing 0: fd000000(noop)* int=x hist=1 state=0 UNI1:1\n\nWrite buffer (empty)\n\nReorder buffer:\n\n0: fd000000(noop)* int=x hist=1 state=0 UNI1:1\n\n5 available rename registers, 2 memory slots\n\nFetch buffer:\n\n4: fd000000(SWYM)x\n\n8: fd000000(SWYM)x\n\nc: fd000000(SWYM)x\n\nInstruction pointer is 10\n\nScache locked by Dfiller:94\n\nScachefill locked by Dfiller:94\n\nmem locked by Sfiller:95\n\nBreakpoint instruction fetched at time 137\n\n[This was my first test program. It illustrates a complicated case of\n\nvirtual address translation; it also illustrates a second way to\n\ninput programs to mmmix, via the ASCII hexadecimal file \"test1.mmix\"\n\ninstead of a binary .mmb file. This second way allows you complete freedom in\n\nwhat you put into memory; there is no canned division into text, data, pool,\n\nand stack segments; there is no \"Main\"; you can try multiprocessing and\n\nall other aspects of the hardware. Of course you need to read the\n\ndocumentation before you can fathom what is happening; I've given these\n\nsamples just to help you know if your program seems to be installed correctly.]\n\nIMPORTANT NOTE\n\nIf changes are needed, do NOT change any of the source files. CWEB has\n\na convenient change-file mechanism by which you can make arbitrary\n\nmodifications, in such a way that your modifications will probably still\n\nwork when the master source files are improved later. Change files that\n\nadapt these sources to other platforms will be distributed in future releases\n\nof this software. (See, for example, the change files that come with"
    }
}