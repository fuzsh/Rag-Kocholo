{
    "id": "wrong_mix_domainrange_foundationPlace_00013_3",
    "rank": 6,
    "data": {
        "url": "https://www.slideshare.net/slideshow/inside-picnik-how-we-built-picnik-and-what-we-learned-along-the-way/1260577",
        "read_more_link": "",
        "language": "en",
        "title": "Inside Picnik: How We Built Picnik (and What We Learned Along the Way)",
        "top_image": "https://cdn.slidesharecdn.com/ss_thumbnails/picniktalkfinal-090407135937-phpapp02-thumbnail.jpg?width=640&height=640&fit=bounds",
        "meta_img": "https://cdn.slidesharecdn.com/ss_thumbnails/picniktalkfinal-090407135937-phpapp02-thumbnail.jpg?width=640&height=640&fit=bounds",
        "images": [
            "https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=128&q=75 1x, https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=256&q=75 2x",
            "https://image.slidesharecdn.com/picniktalkfinal-090407135937-phpapp02/85/Inside-Picnik-How-We-Built-Picnik-and-What-We-Learned-Along-the-Way-1-320.jpg 320w, https://image.slidesharecdn.com/picniktalkfinal-090407135937-phpapp02/85/Inside-Picnik-How-We-Built-Picnik-and-What-We-Learned-Along-the-Way-1-638.jpg 638w, https://image.slidesharecdn.com/picniktalkfinal-090407135937-phpapp02/75/Inside-Picnik-How-We-Built-Picnik-and-What-We-Learned-Along-the-Way-1-2048.jpg 2048w"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-04-07T13:59:36+00:00",
        "summary": "",
        "meta_description": "Inside Picnik: How We Built Picnik (and What We Learned Along the Way) - Download as a PDF or view online for free",
        "meta_lang": "en",
        "meta_favicon": "https://public.slidesharecdn.com/_next/static/media/favicon.7bc3d920.ico",
        "meta_site_name": "SlideShare",
        "canonical_link": "https://www.slideshare.net/slideshow/inside-picnik-how-we-built-picnik-and-what-we-learned-along-the-way/1260577",
        "text": "1. Inside Picnik: How we built Picnik and what we learned along the way Mike Harrington Justin Huff Web 2 Expo, April 3rd 2009\n\n3. Thanks! We couldn’t have done this without help!\n\n4. Traffic, show scale of our problem Our happy problem\n\n5. Client Flex HTML Apache Data Center MySQL Python Render Storage Amazon\n\n7. We Flash • Browser and OS independence • Secure and Trusted • Huge installed base • Graphics and animation in your browser Flex pros and cons\n\n8. We Flash • Decent tool set • Decent image support • ActionScript Flex pros and cons\n\n9. Flash isn’t Perfect • Not Windows, Not Visual Studio • ActionScript is not C++ • SWF Size/Modularity • Hardware isn’t accessible • Adobe is our Frienemy • Missing support for jpg Compression Flex pros and cons\n\n10. Flash is a control freak Flex pros and cons\n\n11. Forecast: Cloudy with a chance of CPU\n\n12. Your users are your free cloud! • Free CPU & Storage! • Cuts down on server round trips • More responsive (usually) • 3rd Party APIs Directly from your client • Flash 10 enables direct load User Cloud\n\n13. You get what you pay for. • Your user is a crappy sysadmin • Hard to debug problems you can’t see • Heterogeneous Hardware • Some OS Differences User Cloud\n\n14. Client Side Challenges • Hard to debug problems you can’t see • Every 3rd party API has downtime • You get blamed for everything • Caching madness User Cloud\n\n15. Dealing with nasty problems Logging • Ask customers directly • Find local customers • Test, test, test •\n\n17. LAMP\n\n18. Linux YUP.\n\n23. CherryPy • We chose CherryPy • RESTish API • Cheetah for a small amount of templaGng\n\n25. Fun Stuff\n\n26. VirtualizaGon XEN • Dual Quad core machines • 32GB RAM • We virtualize everything • – Except DB servers\n\n28. VirtualizaGon Cons • More complexity • Uses more RAM • IO/CPU ineﬃciencies\n\n29. Storage • We started with one server – Files stored locally – Not scalable\n\n30. Storage • Switched to MogileFS – Working great – No dedicated storage machines!\n\n32. Storage – S3 S3 is dead simple to implement. • For our usage paberns, it's expensive • Picnik generates lots of temp ﬁles • Problems keeping up with deletes • Made a decision to focus on other things • before ﬁxing deletes\n\n33. Load Balancers • Started using Perlbal • Bought two BigIPs – Expensive, but good. • Outgrew the BigIPs • Went with A10 Networks – A lible bumpy – They've had great support.\n\n35. Rendering We render images when a user saves • Render jobs go into a queue • Workers pull from the queue • Workers in both the DC and EC2 •\n\n36. Rendering • Manager process maintain enough idle workers • Workers in DC are at ~100% uGlizaGon %$@#!!!\n\n37. EC2 • Our processing is elasGc between EC2 and our own servers • We buy servers in batches\n\n39. Monitoring • Nagios for Up/Down – Integrated with automaGc tools – ~120 hosts – ~1100 service checks • CacG for general graphing/trending – ~3700 data sources – ~2800 Graphs • Smokeping – Network latency\n\n40. Redundancy I like sleeping at night • Makes maintenance tasks easier • It takes some work to build • We built early (thanks Flickr!)￼ •\n\n41. War Stories\n\n42. ISP Issues • We're happy with both of our providers. • But... – Denial of service abacks – Router problems – Power • Have several providers • Monitor & trend!\n\n43. ISP Issues • High latency on a transit link: • Cause: High CPU usage on their aggregaGon router • SoluGon: Clear and reconﬁg our interface\n\n44. Amazon Web Services • AWS is preby solid • But, it's not 100% • When AWS breaks, we're down – The worst type of outage because you can't do anything. • Watch out for issues that neither party controls – The Internet isn't as reliable point to point\n\n47. Flickr Launch • Very slow Flickr API calls post‐launch • Spent an enGre day on phone/IM with Flickr Ops • Finally discovered an issue with NAT and TCP Gmestamps • Lessons: – Have tools to be able to dive deep – Granular monitoring\n\n48. Firewalls • We had a pair of Watchguard x1250e ﬁrewalls. – Specs: “1.5Gbps of ﬁrewall throughput” – Actual at 100Mbps:\n\n49. authorize.net ConnecGvity issues • Support was useless • Eventually got to their NOC • We rerouted via my home DSL. • Lessons: • – Access to technical people – Handle failure of services gracefully"
    }
}