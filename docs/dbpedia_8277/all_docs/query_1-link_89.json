{
    "id": "dbpedia_8277_1",
    "rank": 89,
    "data": {
        "url": "https://github.blog/developer-skills/programming-languages-and-frameworks/cli-tricks-every-developer-should-know/",
        "read_more_link": "",
        "language": "en",
        "title": "CLI tricks every developer should know",
        "top_image": "https://github.blog/wp-content/uploads/2021/12/engineering-product_orange-green-banner.png?fit=1200%2C630",
        "meta_img": "https://github.blog/wp-content/uploads/2021/12/engineering-product_orange-green-banner.png?fit=1200%2C630",
        "images": [
            "https://github.blog/wp-content/uploads/2024/06/AI-DarkMode-4.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/05/Enterprise-DarkMode-3.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.42.45 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.43.47 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.44.23 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.46.23 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.47.04 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2021/12/engineering-product_orange-green-banner.png?resize=1200%2C630",
            "https://github.blog/wp-content/uploads/2023/04/bash-screenshot.png?w=653&resize=653%2C453",
            "https://github.blog/wp-content/uploads/2023/04/Grep_example.png?resize=300%2C72",
            "https://github.blog/wp-content/uploads/2023/04/jq-logo.png?resize=300%2C95",
            "https://github.blog/wp-content/uploads/2023/04/imagemagick-logo.png?resize=75%2C100",
            "https://github.blog/wp-content/uploads/2023/04/howdoi-logo.png?resize=100%2C100",
            "https://github.blog/wp-content/uploads/2023/04/taskwarrior-logo.png?resize=100%2C95",
            "https://github.blog/wp-content/uploads/2023/04/cli-1.png?resize=100%2C65",
            "https://avatars.githubusercontent.com/u/47188731?v=4&s=200",
            "https://github.blog/wp-content/uploads/2024/08/github-cli-header.png?resize=400%2C212",
            "https://github.blog/wp-content/uploads/2024/05/GitHub-for-beginners.png?resize=400%2C212",
            "https://github.blog/wp-content/uploads/2024/01/Productivity-LightMode-1-1.png?resize=400%2C212",
            "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
            "https://github.blog/wp-content/uploads/2022/05/readme.svg",
            "https://github.blog/wp-content/uploads/2022/05/actions.svg",
            "https://github.blog/wp-content/uploads/2022/05/careers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Kedasha Kerr",
            "Aaron Winston",
            "Sara Verdi",
            "Michelle Duke"
        ],
        "publish_date": "2023-04-26T16:00:18+00:00",
        "summary": "",
        "meta_description": "Learn some tips, tricks, and tools for mastering the command line from GitHub’s own developers.",
        "meta_lang": "en",
        "meta_favicon": "https://github.githubassets.com/favicon.ico",
        "meta_site_name": "The GitHub Blog",
        "canonical_link": "https://github.blog/developer-skills/programming-languages-and-frameworks/cli-tricks-every-developer-should-know/",
        "text": "The CLI is a critical component of a developer’s toolkit—it’s a trusty sidekick that offers flexibility and control. You can tell it what to do by simply typing in a specific command, and it will execute those commands like moving files, running programs, or even starting up a server, immediately. That being said, the CLI can be daunting to beginners, especially when you’re not sure which commands to run (and who hasn’t turned to Google to find a command they need?).\n\nIn this blog, we’ve compiled some important tricks and commands that every developer should know from GitHub’s own engineers. By mastering these basic techniques, developers can become more efficient at working with the command line and gain a deeper understanding of how the underlying operating system and programs work.\n\nComponents of the CLI\n\nThe CLI has two main components: the shell and the command. The shell is the interface that allows the user to enter commands and commands are the instructions that tell the computer what to do. Shells also provide a way to customize and extend the behavior of the CLI. With a shell, users can create their own scripts and aliases to automate tasks or simplify complex commands, and they can customize the behavior of the shell itself using configuration files. For this blog post, all of the examples are for Bash since it’s the most widely used shell. And if you’re using Windows, Windows Subsystem for Linux (WSL) is available if you’d like to use a Bash terminal.\n\nTo learn more about shells, you can check out our shell documentation here.\n\nKeyboard shortcuts in the CLI\n\nOne of the easiest ways to improve your productivity on the command line is to learn some keyboard shortcuts. Below, you’ll find popular shortcuts that can save you time and effort on navigating and executing demands.\n\nCTRL + C: Cancel the current command\n\nCTRL + A: Move the cursor to the beginning of the line\n\nCTRL + E: Move the cursor to the end of the line\n\nCTRL + L: Clear the terminal screen\n\nCTRL + _: Undo the last edit\n\nCTRL-D: Exit shell session\n\nTAB:Auto-complete commands, file names, and paths\n\nCLI command history shortcuts\n\nThe command history allows you to quickly access and reuse previously executed commands rather than retype or search for the whole command. Here are a few to try out for yourself:\n\nhistory n: Type this in the terminal to access the history\n\n!!: Execute the last command\n\nCTRL + R: Reverse search for a previously executed command\n\nCTRL + P: Move to the previous command in the history\n\nCTRL + N: Move to the next command in the history\n\nCTRL + G: Abort search\n\nPerform operations on multiple files with wildcards\n\nWildcards are characters that take the place of one or more other characters, and they’re used to increase the efficiency and flexibility of searches. They come in handy when you want to perform an operation on multiple files or directories that have similar names or patterns, and can save you a lot of time and effort by allowing you to specify patterns rather than list each individual file. There are three types of command wildcards:\n\n?: Matches a single character. For example, if you type d?g, it will match anything that begins with a “d” and ends with an “g.”\n\n*: Matches any number of characters. If you search s*n, it will match anything between “s” and “n” no matter how many characters are between the first and last letter.\n\n[]: Matches only the characters enclosed within the square brackets.\n\nCombine commands with pipes\n\nA pipe (represented by the symbol |) connects the output of the command on the left side of the symbol to the input of the command on the right side. This allows users to create more complex and powerful commands by combining simpler commands together.\n\nHere’s an example of how it’s used in a command:\n\nls -la | grep test | sort | uniq | wc -l: The final output of this command would be the number of files and directories in the current directory whose name contains the string “test.”\n\nWhen you pipe all of these commands together, you are essentially:\n\nListing all files and directories in the current directory in long format\n\nSearching for all lines that contain the string “test”\n\nSorting those lines alphabetically\n\nRemoving any duplicate lines\n\nCounting the number of remaining lines\n\nNote: grep is a useful CLI tool to search for matching patterns in a file. We’ll explore some more helpful CLI tools later on in this article.\n\nCommand substitution\n\nCommand substitution is a feature that allows you to execute a command with a different command. This helps you create more complex and dynamic commands by using the output of one command as an argument for another.\n\nThere are two different syntaxes for command substitution:\n\n$(command) or `command`\n\nHere’s a simple example:\n\n$ echo \"the date is $(date)\": This will display the current date and time in a sentence.\n\nLearning the CLI commands and tricks that work for you takes time and practice. But you’ll soon find that using the command line becomes second nature, and you’ll be able to accomplish more complex tasks with ease.\n\nNow that we’ve covered some basics, you can begin to experiment with different options and parameters for your commands to see what they do. And stay curious! There are tons of great resources out there, like tldr or Explainshell, to help you learn new commands or shortcuts. And speaking of resources, let’s take a look at some helpful CLI tools to help you optimize the command line—and have some fun with it.\n\nCommand line tools are scripts, programs, or libraries created to solve problems that developers might encounter while coding. While these tools are largely focused on improving productivity, there are also CLI tools that can entertain you while you’re in the terminal (check out football-cli or spotify-tui for reference).\n\nHere are a few CLI tools that we recommend.\n\nThe bottom line: ​​The CLI is a powerful tool for developers—especially if you prefer the keyboard over GUI interfaces. Learning how to use it and incorporating it into your daily workflow will help you become more productive and efficient, and getting familiar with these tips and tricks is a great way to start your CLI journey.\n\nAdditional resources for CLI\n\nAs you move further along in your developing journey, you’ll encounter different projects and pain points, which means that the commands and CLI tools you find useful might change and shift. There are so many diverse and useful CLI applications out there, and the repository awesome-cli-apps lists a bunch of excellent tools that are used and loved by developers around the world.\n\nWhat’s next for CLI\n\nWe’ll be launching a technical preview of GitHub Copilot for CLI, which translates natural language prompts into terminal commands to help you find the exact command you need for the task at hand. Click here to get on the waitlist and try it out for yourself."
    }
}