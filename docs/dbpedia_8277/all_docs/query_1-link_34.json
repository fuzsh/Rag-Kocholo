{
    "id": "dbpedia_8277_1",
    "rank": 34,
    "data": {
        "url": "https://www.ericsbinaryworld.com/2024/04/28/programming-jan-april-2024/",
        "read_more_link": "",
        "language": "en",
        "title": "Programming Jan-April 2024",
        "top_image": "https://www.ericsbinaryworld.com/wp-content/uploads/2016/04/cropped-site-icon-Twenty-Sixteen.png",
        "meta_img": "https://www.ericsbinaryworld.com/wp-content/uploads/2016/04/cropped-site-icon-Twenty-Sixteen.png",
        "images": [
            "http://www.ericsbinaryworld.com/wp-content/uploads/2023/05/header-image-scaled.jpg",
            "https://i0.wp.com/www.ericsbinaryworld.com/wp-content/uploads/2021/01/Github-Contribution-graph.png?resize=350%2C200&ssl=1",
            "https://i0.wp.com/www.ericsbinaryworld.com/wp-content/uploads/2021/04/Cutebot-2021-03-22T160335-003_v2.jpg?resize=350%2C200&ssl=1",
            "https://files.mastodon.social/accounts/avatars/001/139/753/original/2e72e88eb7ccd7fc.jpg",
            "https://files.mastodon.online/accounts/avatars/109/266/321/552/841/173/original/d43bfb09851bbb3e.jpg",
            "https://media.mstdn.social/accounts/avatars/110/516/347/538/832/456/original/5cf7acdbef0c79ac.png",
            "https://assets.chaos.social/accounts/avatars/000/080/818/original/45b66c1134f2c19c.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-04-28T00:00:00",
        "summary": "",
        "meta_description": "This year started off pretty light when it came to programming because I’ve been addicted to the video game Against the Storm since last winter. But I eventually started working again on vari…",
        "meta_lang": "en",
        "meta_favicon": "https://www.ericsbinaryworld.com/wp-content/uploads/2016/04/cropped-site-icon-Twenty-Sixteen-32x32.png",
        "meta_site_name": "It's A Binary World 2.0",
        "canonical_link": "https://www.ericsbinaryworld.com/2024/04/28/programming-jan-april-2024/",
        "text": "This year started off pretty light when it came to programming because I’ve been addicted to the video game Against the Storm since last winter. But I eventually started working again on various projects – some old and some new. I didn’t do any programming in January, so we’ll start in February.\n\nFebruary and March\n\nOver these two months I worked on my replacement for web access to my Taskwarrior TODO list because Inthe.am had shut down. In February I got the podman containers set up – one to run the taskd server and one to run the website I’d coded up in Flask. In March I had to write some rudimentary Javascript to get the website to highlight the selected tab (Overdue, Today, This Month, etc). The rest of the interactivity on the site works using HTMX, letting me focus on Python instead of Javascript, but I just wasn’t able to get that part of the site to work without a tiny bit of Javascript. I also added some fixes because the date/time widget assumes UTC. Of course, now that I have it all working correctly and get lots of use for it (especially when I’m at work and I want to quickly get something out of my brain’s short-term buffer), Taskwarrior went to 3.0 which completely changes the way the program works, the API, and the way syncing works. I think in the end it’ll be for the best, but it’s annoying that I need to figure this out. That may involve finally learning how to use PyO3 to interact with Rust or re-writing part of my backend in Rust. We’ll have to see where that goes.\n\nApril\n\nThings really picked up in April, programming-wise. First off, I had to upgrade the dependencies in my Amortization program. This will segue into the next topic in a second, but essentially every time I upgrade Fedora, I get a new version of Python. This means I have to redo my virtual environment. So when I tried to run this program again, I had to pip install my requirements and since some of the packages were no longer available on PyPi as wheels, it tried to compile. When that failed, I upgraded the dependencies.\n\nAs I’ve mentioned before, because of the virtual environment annoyances, I’ve decided to rewrite all my cron utilities in a compiled language. If it’s a utility I have running via cron, it’s something I want to work all the time. I don’t want to have to run around recreating virtual environments (something I don’t mind for a program I’m going to run occasionally – see previous paragraph). So I rewrote my NASA background downloading program in Go. This was a real breeze. It truly is a pretty easy language to work with – a hybrid of C and Python in my humble opinion. I also used the opportunity to learn how to use Go’s new(ish) SLOG package.\n\nI also took a few days to update the one project I know for a fact is used by other people besides myself, Extra Life Donation Tracker, to use PyQt6. It was an annoying couple days figuring out what has changed since PyQt5. Or rather, to be more specific, the Qt devs did a great job documenting what had changed, but seeing how that translated to what I needed to fix for pyinstaller to make an exe for my Windows users took a few days.\n\nAs I mentioned a couple days ago, I’ve started learning Rust. Just as I did with Python when I first learned it, I started with a project-based book: Command-Line Rust. However, while I was getting a good feel for the language, the author wasn’t quite explaining some concepts early enough (to my mind) like when to use a double colon vs a dot to access a function/method. So I started also reading The Rust Programming Language (2018 version) (link is to the newer 2021 edition). There I learned that (using Python terms) double colon is a static method (would belong to the class as a whole) while dot is a method on an instance of the “class”. While I probably could say the same thing about modern C++ or C, I think Rust is actually a good stepping-stone on the path that goes Python->Go->Hard Systems language. As a newer language with less baggage, it seems to be a child of Haskell and C, with functional programming being a first class way of programming in Rust. (I may be speaking out of my butt since I’m only a week or so into learning the language, but that’s my first impression).\n\nGoing back to what I said about rewriting my cron utilities in compiled languages, I may end up rewriting Snap-In-Time, my btrfs snapshot project in Rust. Based on what I did in the first project of Command-Line Rust, it seems like it would be pretty trivial (compared to Go) to retrieve and use the output of system commands (like btrfs sub snap, btrfs sub del, etc). If this happens, it’s probably a few months away."
    }
}