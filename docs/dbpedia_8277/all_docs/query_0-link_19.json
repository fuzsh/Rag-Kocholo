{
    "id": "dbpedia_8277_0",
    "rank": 19,
    "data": {
        "url": "https://gothenburgbitfactory.org/taskserver-setup/",
        "read_more_link": "",
        "language": "en",
        "title": "Taskserver Setup Guide",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Preparation\n\nBackup Your Data\n\nLet's reinforce a good habit and make a backup copy of your data first. Here is a very easy way to backup your data:\n\n$ cd ~/.task $ tar czf task-backup-$(date +'%Y%m%d').tar.gz *\n\nNow move that file to somewhere safe. All software contains bugs, so make regular backups.\n\nAttention\n\nThis is not only due to a good habit, we will modify your data, so a backup is highly recommended.\n\nChoose A Machine\n\nA suitable machine to run your Taskserver is one that is always available. If you have such a machine, or have access to a hosted machine, that is ideal.\n\nIf your machine is not continuously available, it can still be a suitable Taskserver because the sync mechanism doesn't require continuous access. When a client cannot sync, it simply accumulates local, unpropagated changes until it can sync.\n\nA laptop is a poor choice for a Taskserver host.\n\nChoose A Port\n\nBy default, Taskserver uses port 53589. You can choose any port you wish, provided it is unused. If you choose a port number that is under 1024, then Taskserver must run as root, which is not recommended.\n\nUser & Group\n\nIdeally you will create a new user and group solely to run the Taskserver. This helps you keep the data secure from other users on the machine, as well as controlling the privileges of Taskserver.\n\nFirewall\n\nDepending on what devices you use to access your server, you may need to configure the firewall to allow incoming TCP/IP traffic on your chosen port.\n\nInstallation from a package\n\nInstalling Taskserver from a binary package is the simplest option, but you will need to refer to your package manager's documentation and procedures for doing this.\n\nTake a look at the Download page for examples. Generally there are too many package managers to make a complete list with instructions here.\n\nDependencies\n\nBefore building the software, you will need to satisfy the dependencies by installing the following:\n\nGnuTLS (ideally version 3.2 or newer)\n\nlibuuid\n\nCMake (2.8 or newer, check with)\n\nmake\n\nA C++ Compiler (GCC 4.7 or Clang 3.0 or newer)\n\nNote\n\nNote that some OSes (Darwin, FreeBSD ...) include libuuid functionality in libc, check the following slides for more detailed instructions.\n\nYou don't necessarily need the latest version of all components, but it is a good idea if you can. GnuTLS is a security component, and as such, it is very important that it is current.\n\nAttention\n\nUsing GnuTLS version 2.12.x is neither adequately secure, nor production quality. Please check the slide describing the GnuTLS-Problems for details.\n\nOperating Systems\n\nWe have detailed instructions for the following operating operating systems on the following slides:\n\nCentOS\n\nDebian\n\nFedora\n\nopenSUSE\n\nUbuntu\n\nMacOS\n\nWindows & others\n\nA note on other operating systems:\n\nWindows with Cygwin (unsupported but working)\n\nRecommendation: Use the Ubuntu subsystem in Windows 10 and follow the Ubuntu instructions.\n\nIn case you can add your operating system of choice, please send an email to support@taskwarrior.org (Thank you!).\n\nCentOS\n\nInstall dependencies:\n\n$ sudo yum install gcc-c++ $ sudo yum install gnutls-devel $ sudo yum install libuuid-devel $ sudo yum install cmake $ sudo yum install gnutls-bin\n\nDebian\n\nInstall dependencies:\n\n$ sudo apt install g++ $ sudo apt install libgnutls28-dev $ sudo apt install uuid-dev $ sudo apt install cmake $ sudo apt install gnutls-bin\n\nFedora\n\nInstall dependencies:\n\n$ sudo dnf install gcc-c++ $ sudo dnf install gnutls-devel $ sudo dnf install libuuid-devel $ sudo dnf install cmake $ sudo dnf install gnutls-utils\n\nopenSUSE\n\nInstall dependencies:\n\n$ sudo zypper install gcc-c++ $ sudo zypper install libgnutls-devel $ sudo zypper install libuuid-devel $ sudo zypper install cmake $ sudo zypper install gnutls-utils\n\nUbuntu\n\nInstall dependencies:\n\n$ sudo apt install g++ $ sudo apt install libgnutls28-dev $ sudo apt install uuid-dev $ sudo apt install cmake $ sudo apt install gnutls-utils\n\nMacOS\n\nInstall Xcode from Apple, via the AppStore, launch it, and select from some menu that you want the command line tools.\n\nWe expect you to have Homebrew installed on your Mac.\n\n$ brew install cmake $ brew install git $ brew install gnutls\n\nWindows\n\nStart the Cygwin GUI and install the following packages and their dependencies.\n\nGnuTLS\n\nlibuuid\n\nCMake\n\nmake\n\ngcc-c++\n\ngnutls-utils\n\nInstallation from a tarball\n\nInstalling Taskserver from a tarball is a matter of downloading the tarball, extracting it, satisfying dependencies and building the server.\n\nDownload\n\nThe next step is to obtain the code. This means getting the Task Server 1.1.0 (or newer) source tarball. You should check for the latest stable release here:\n\nhttp://taskwarrior.org/download/\n\nYou can download the tarball with curl, as an example of just one of many ways to download the tarball.\n\n$ curl -LO https://taskwarrior.org/download/taskd-latest.tar.gz\n\nBuild\n\nExpand the tarball, and build the Taskserver.\n\n$ tar xzf taskd-latest.tar.gz $ cd taskd-latest $ cmake -DCMAKE_BUILD_TYPE=release . ... $ make ...\n\nWe will refer to the directory where you extracted the data to as SOURCEDIR (in the example above it is taskd-latest).\n\nBuild Again\n\nIf you ever want to build the software again, do some cleanup.\n\n$ cd taskd-latest $ make clean ... $ rm CMakeCache.txt ...\n\nmake install\n\nNow install Taskserver. This copies files into the right place, and installs man pages.\n\n$ sudo make install ...\n\nVerify installation\n\nRun the taskd command to verify that the server is installed, and the location is in your $PATH.\n\nYou should see something like this:\n\n$ taskd Usage: taskd -v|--version ...\n\nInstallation from Git-Repository\n\nInstalling Taskserver from git is a matter of cloning the git repository and building the server.\n\nThe same dependencies as for installation from tarball apply. Please check the corresponding slides.\n\nCloning the repository\n\nNow clone the repository like this:\n\n$ git clone --recurse-submodules=yes \\ https://github.com/GothenburgBitFactory/taskserver.git \\ taskserver.git ...\n\nUse stable!\n\nIt is highly recommended that you build the stable version. This involves simply executing the next command.\n\n$ cd taskserver.git $ git checkout master ...\n\nOnly under special circumstances you should build the unstable development version.\n\nSpecial circumstances\n\nThe unstable development version is at no point guaranteed to work or even compile. The only time it does stabilize is right at the end of the development cycle, and in that case, you should wait until the release.\n\nThe stable version is always merged to the master branch, which is the default branch, so ordinarily nothing needs to be done. To build an unstable branch, first determine which branch by looking at the available branches:\n\nChoosing the right branch\n\n$ cd taskserver.git $ git branch -a * master remotes/origin/1.1.0 remotes/origin/1.1.1 remotes/origin/1.2.0 remotes/origin/HEAD -> origin/master remotes/origin/master\n\nThe convention we use is that master represents the stable release. The numbered branches represent the latest development (1.2.0, the 'highest' branch number, ending in '.0') and a patch branch (1.1.1, ending in a non-zero number).\n\nDevelopment version\n\nPatch branches are reserved for emergency releases, so in this example you would choose to build 1.2.0 as the latest development branch like this (please not that starting with version 1.2.0 we make use of submodules).\n\n$ git checkout 1.2.0 Branch 1.2.0 set up to track remote branch 1.2.0 from origin. Switched to a new branch '1.2.0'\n\nSubmodules\n\n$ git submodule init Submodule 'src/libshared' (https://git.tasktools.org/scm/tm/libshared.git) registered for path 'src/libshared' $ git submodule update Cloning into 'src/libshared'... remote: Counting objects: 2180, done. remote: Compressing objects: 100% (1379/1379), done. remote: Total 2180 (delta 1641), reused 1018 (delta 796) Receiving objects: 100% (2180/2180), 369.13 KiB | 554.00 KiB/s, done. Resolving deltas: 100% (1641/1641), done. Checking connectivity... done. Submodule path 'src/libshared': checked out '2b0b70d90acb9a3ff3548befab9db8beb85a0c2d'\n\nBuild from Git\n\nNow build the Taskserver.\n\n$ cd taskserver.git $ cmake -DCMAKE_BUILD_TYPE=release . ... $ make ...\n\nIn this case the SOURCEDIR is taskserver.git.\n\nTest your build\n\nHaving built the server, now build and run the unit tests. Although this is an optional step, it is a good idea to know whether the build works on your platform.\n\n$ cd test # from SOURCEDIR $ make ... $ ./run_all Pass: 2920 Fail: 0 Skipped: 0 Runtime: 1 seconds $ cd ..\n\nInterprete the results\n\nThis example shows that all 2,920 tests pass. If you see test failures, stop and report them.\n\nNote that there are some unit tests that fail if you have not built the latest commit. Seeing 4 test failures may mean all is well. Seeing 30 failures does not.\n\nmake install\n\nNow install Taskserver. This copies files into the right place, and installs man pages.\n\n$ sudo make install ...\n\nVerify your Installation\n\nRun the taskd command to verify that the server is installed, and the location is in your $PATH. You should see something like this:\n\n$ taskd Usage: taskd -v|--version ...\n\ntaskd-User\n\nWe assume that you will do all configuration with the taskd user you chose to run the server with.\n\nData Location\n\nConfiguring the server is straightforward, but needs a little planning.\n\nA location for the data must be chosen and created. The TASKDDATA environment variable will be used to indicate that location to all the taskd commands.\n\n$ export TASKDDATA=/var/taskd $ sudo mkdir -p $TASKDDATA\n\nIf the TASKDDATA variable is not set, then most taskd commands require the --data ... argument.\n\nDirectory\n\nEverything the server does will be confined to that directory.\n\nThere are two 'D's in TASKDDATA, and omitting one is a common mistake.\n\nThe user that will run the server must have write permissions in that directory.\n\nInitialization\n\nNow we let the server initialize that directory:\n\n$ taskd init You must specify the 'server' variable, for example: taskd config server localhost:53589 Created /var/taskd\n\nIt is a good idea to copy the pki subdirectory from your SOURCEDIR to your TASKDDATA directory.\n\nIf you installed from a package (manager) search for the pki directory, find / -name pki -type d (example /usr/share/taskd/pki/ for Ubuntu).\n\nKeys & Certificates\n\nNow we create certificates and keys. The command below will generate all the certs and keys for the server, but this uses self-signed certificates, and this is not recommended for production use. This is for personal use, and this may be acceptable for you, but if not, you will need to purchase a proper certificate and key, backed by a certificate authority.\n\nAssumptions\n\nThe scripts make assumptions that are guaranteed to be wrong for you. Specifically the generate.server script has a hard-coded CN entry that is not going to work. You need to edit the vars file, which you find in the pki subdirectory in your SOURCEDIR.\n\nCN=localhost\n\nYou will need to modify this value to match your server.\n\nMost probably the result of hostname -f is exactly what you need (\"yourserver.example.com\").\n\nCommon Name\n\nThe value of CN (Common Name) is important.\n\nIt is this value against which Taskwarrior validates the servername, so use a value similar to ack.example.com, don't expect that example to work for you. If you do not change this value, the only option for the client is to skip some or all certificate validation, which is a bad idea.\n\nGo to your SOURCEDIR, which depends on which installation method you chose.\n\nCopy the certificates\n\nHere is is assumed that you installed from the source tarball.\n\n$ cd ~/taskd-1.1.0/pki $ ./generate ... $ cp client.cert.pem $TASKDDATA $ cp client.key.pem $TASKDDATA $ cp server.cert.pem $TASKDDATA $ cp server.key.pem $TASKDDATA $ cp server.crl.pem $TASKDDATA $ cp ca.cert.pem $TASKDDATA\n\nConfigure taskserver\n\n$ taskd config --force client.cert $TASKDDATA/client.cert.pem $ taskd config --force client.key $TASKDDATA/client.key.pem $ taskd config --force server.cert $TASKDDATA/server.cert.pem $ taskd config --force server.key $TASKDDATA/server.key.pem $ taskd config --force server.crl $TASKDDATA/server.crl.pem $ taskd config --force ca.cert $TASKDDATA/ca.cert.pem\n\nExplanation\n\nThere are three classes of key/cert here. There is the CA (Certificate Authority) cert, which has cert signing capabilities and is used to sign and verify the other certs.\n\nThere are the server key/certs, which are used to authenticate the server and encrypt.\n\nFinally there are client key/certs, which are not what you might expect. These are for API access, and not for your Taskwarrior client. Those are created later.\n\nControl Server\n\nYou can now to launch the server:\n\n$ taskdctl start # analogue stop to stop the server\n\nThis command launched the server as a daemon process. This command requires the TASKDDATA variable. Your server is now running, and ready for syncing.\n\nCheck that your server is running by looking in the taskd.log file, or running this:\n\n$ ps -leaf | grep taskd\n\nInteractive or Non-Daemon Server\n\nA daemon server is typically how you would want to run Taskserver, but there may be times when you need to run the server attached to a terminal. These two commands are identical:\n\n$ taskdctl start $ taskd server --data $TASKDDATA --daemon\n\nBy omitting the --daemon option, the server remains attached to the terminal. Then to stop the server you can enter Ctrl-C.\n\nInteractive Server\n\nThe interactive mode is really only useful for debugging, in conjunction with TLS debug mode, like this:\n\n$ taskd config debug.tls 3 $ taskd server --data $TASKDDATA ...\n\nWith a debug.tls setting that is non-zero, you see lots of security-related diagnostic output.\n\nsystemd unit file\n\nYou can start Taskserver using a systemd-unitfile (called taskd.service) like the one on the next slide (please add the contents of $TASKDDATA not the variable itself). Running the Taskserver as root is not recommended, please add an appropriate user and group to run the daemon with ($TASKDUSER and $TASKDGROUP).\n\ntaskd.service\n\n[Unit] Description=Secure server providing multi-user, multi-client access to Taskwarrior data Requires=network.target After=network.target Documentation=http://taskwarrior.org/docs/#taskd [Service] ExecStart=/usr/local/bin/taskd server --data $TASKDDATA Type=simple User=$TASKDUSER Group=$TASKDGROUP WorkingDirectory=$TASKDDATA PrivateTmp=true InaccessibleDirectories=/home /root /boot /opt /mnt /media ReadOnlyDirectories=/etc /usr [Install] WantedBy=multi-user.target\n\nControl with systemd\n\nAfterwards prepare systemd to recognise the file. The following commands need to be run as root-user.\n\n$ cp taskd.service /etc/systemd/system $ systemctl daemon-reload $ systemctl start taskd.service $ systemctl status taskd.service\n\nIn case everything is running fine, enable the script to start Taskserver on every boot.\n\n$ systemctl enable taskd.service\n\nAdd Organization\n\nA user account must be created, along with a key, cert and ID, before syncing may occur.\n\nBefore creating a user account, you may need to create an organization. An organization consists of a group of zero or more users. You can get away with just one organization, and in this example, we will create just one, named 'Public'.\n\nCreate Organisation\n\nYou can create as many organizations as you wish (even one per user), and the purpose is simply to group users together. Future features will utilize this.\n\n$ taskd add org Public Created organization 'Public'\n\nNow the organization 'Public' exists, we can add users to that organization.\n\nCreate User\n\nNow we add a new user, named 'First Last' as an example. You can use any name you wish, and if it contains spaces, quote the name as shown.\n\n$ taskd add user 'Public' 'First Last' New user key: cf31f287-ee9e-43a8-843e-e8bbd5de4294 Created user 'First Last' for organization 'Public'\n\nNote that you will get a different 'New user key' than is shown here, and you will need to retain it, to be used later for client configuration. Note that the key is just a unique id, because your name alone is not necessarily unique.\n\nCreate Certificate and Key\n\nGo to your SOURCEDIR, which depends on which installation method you chose. Here it is assumed that you installed from the source tarball.\n\n$ cd ~/taskd-1.1.0/pki $ ./generate.client first_last\n\nThis will generate a new key and cert, named first_last.cert.pem and first_last.key.pem. It is not important that 'first\\_last' was used here, just that it is something unique, and valid for use in a file name. It has no bearing on security.\n\nLet's encrypt\n\nCertificates coming from Let's encrypt have not been successfully used by anyone.\n\nPlease remember that Let's encrypt only generates servers, but we need a client certificate as well.\n\nA working scenario would be highly appreciated.\n\nTaskwarrior Configuration\n\nYou have now created a new user account on the server, created a new client cert and key, and have details that need to be transferred to the user, to set up a sync client.\n\nInformation needed\n\nca.cert.pem is the certificate authority, and the only way to validate self-signed certs like ours.\n\nfirst_last.cert.pem is the client certificate.\n\nfirst_last.key.pem is the client key.\n\nThe new user key (yours will be different): cf31f287-ee9e-43a8-843e-e8bbd5de4294\n\nThe organization, Public.\n\nThe full and proper user name, First Last.\n\nServer address and port\n\nThe server address and port, host.domain:53589 is needed as well.\n\nIn the server configuration we used localhost as an example. With localhost your server can not be reached from outside the machine your are running it on.\n\nWhatever you actually used there, should be used here.\n\nCertificates\n\nIf you have configured Taskserver and created a user account (or better yet, someone created an account for you) then you now have details needed in the configuration of your Taskwarrior client.\n\nNow we feed this information to Taskwarrior.\n\nCopy all of them\n\nCopy the Cert, Key and CA to your ~/.task directory. The reason we are copying the CA cert is because this is a self-signed cert, and we need the CA to validate against. Alternately we could force Taskwarrior to trust all certs, but that is not recommended.\n\n$ cp first_last.cert.pem ~/.task $ cp first_last.key.pem ~/.task $ cp ca.cert.pem ~/.task\n\nConfigure Taskwarrior to use them\n\nNow we need to make Taskwarrior aware of these certs:\n\n$ task config taskd.certificate -- ~/.task/first_last.cert.pem $ task config taskd.key -- ~/.task/first_last.key.pem $ task config taskd.ca -- ~/.task/ca.cert.pem\n\nConfigure Taskserver in Taskwarrior\n\nNow set the server info:\n\n$ task config taskd.server -- host.domain:53589\n\nFinally we provide the credentials, which combine the organization, account name and user key:\n\n$ task config taskd.credentials -- Public/First Last/cf31f287-ee9e-43a8-843e-e8bbd5de4294\n\nYour Taskwarrior is now ready to sync.\n\nTrust Level\n\nIt is possible to configure Taskwarrior's trust level, which determines how the server certificate is treated.\n\nYou could specify taskd.trust=ignore hostname to skip certificate hostname validation. This is a bad idea. You can also specify taskd.trust=allow all to perform no validation. This is a worse idea.\n\nThe default value is taskd.trust=strict which performs the most stringent verification, and is more secure.\n\nNote on Taskwarrior 2.3.0\n\nFor Taskwarrior 2.3.0 you can specify taskd.trust=yes in order to skip certificate validation. This is a bad idea. The default is taskd.trust=no, which does not trust the server certificate, which is more secure.\n\nFirst Time Sync\n\nYou will do this differently depending on whether this is the first sync per device, or one of the many subsequent syncs.\n\nThe first time you sync is special - the client sends all your tasks to the server. This is something you should only do once on only one device.\n\n$ task sync init Please confirm that you wish to upload all your pending tasks to the Task Server (yes/no) yes Syncing with host.domain:53589 Sync successful. 2 changes uploaded.\n\nNote\n\nYou should get an indication that tasks were uploaded, in this case 2 of them.\n\nPlease note that older Taskwarrior versions - before 2.5.1 - only sync the pending tasks and not all tasks.\n\nGeneral Sync\n\nAfter the first time sync, you switch and just use this command:\n\n$ task sync Syncing with host.domain:53589 Sync successful. No changes.\n\nFeedback\n\nThis will give you feedback about what happened. Please note that it is perfectly safe to run this command as often as you wish. Syncing is safe and does not consume great system resources.\n\nSync Reminder\n\nAfter you modify data locally, Taskwarrior will start notifying you that you need to sync, after commands, like this:\n\n$ task project:foo list No matches. There are local changes. Sync required.\n\nThis is just a reminder to sync.\n\nSync!\n\nRespond with a sync, and the reminder goes away:\n\n$ task sync Syncing with <server>:<port> Sync successful. 1 changes uploaded.\n\nIf you do not respond with a sync, then local changes accumulate unseen by other clients. When you do eventually sync, the data will be properly propagated, so it is a question of whether you need current data on the server. It is perfectly fine to allow weeks to go by without a sync.\n\nTroubleshooting Guide\n\nPlease note there is a troubleshooting guide as well.\n\nYou can find the recent version here.\n\nGetting Help\n\nAs a last resort, ask for help. But please make sure you have carefully reviewed your setup, and gone through the checks above before asking. No one wants to lead you through the steps above to discover that you didn't.\n\nWe'll ask you to provide the diagnostics output for both Taskwarrior and Taskserver, then we're going to go through the steps above, because this is our checklist also.\n\nGetting Help (1)\n\nThere are several ways of getting help:\n\nWe have an FAQ covering a lot of questions.\n\nEmail us at support@taskwarrior.org, then wait patiently for a volunteer to respond.\n\nJoin us IRC in the #taskwarrior channel on Freenode.net, and get a quick response from the community, where, as you have anticipated, we will walk you through the checklist above.\n\nGetting Help (2)\n\nThere are several ways of getting help:\n\nEven though Twitter is no means of support, you can get in touch with @taskwarrior.\n\nWe have a User Mailinglist which you can join anytime to discuss about Taskwarrior and techniques.\n\nThe Developer Mailinglist is focussing on a more technical oriented audience."
    }
}