{
    "id": "dbpedia_8277_1",
    "rank": 82,
    "data": {
        "url": "https://manpages.debian.org/unstable/taskwarrior/taskrc.5.en.html",
        "read_more_link": "",
        "language": "en",
        "title": "taskrc(5) — taskwarrior — Debian unstable — Debian Manpages",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://manpages.debian.org/openlogo-50.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "DESCRIPTION¶\n\nTaskwarrior obtains its configuration data from a file called .taskrc . This file is normally located in the user's home directory:\n\n$HOME/.taskrc\n\nThe default location can be overridden using the rc: attribute when running task:\n\n$ task rc:<directory-path>/.taskrc ...\n\nor using the TASKRC environment variable:\n\n$ TASKRC=/tmp/.taskrc task ...\n\nAdditionally, if no ~/.taskrc exists, taskwarrior will check if the XDG_CONFIG_HOME environment variable is defined:\n\n$ XDG_CONFIG_HOME=~/.config task ...\n\nIndividual options can be overridden by using the rc.<name>: attribute when running task:\n\n$ task rc.<name>:<value> ...\n\nor\n\n$ task rc.<name>=<value> ...\n\nIf Taskwarrior is run without an existing configuration file it will ask if it should create a default, sample .taskrc file in the user's home directory.\n\nThe .taskrc file follows a very simple syntax defining name/value pairs:\n\n<name> = <value>\n\nThere may be whitespace around <name>, '=' and <value>, and it is ignored. Whitespace within the <value> is left intact. Whitespace is not permitted in comma-separated lists. The entry must be on a single line, no continuations. Values support UTF8 as well as JSON encoding, such as \\uNNNN.\n\nNote that Taskwarrior is flexible about the values used to represent Boolean items. You can use \"1\" to enable, anything else is interpreted as disabled. The values \"on\", \"yes\", \"y\" and \"true\" are currently supported but deprecated.\n\ninclude <file>\n\nThere may be whitespace around 'include' and <file>. The file may be an absolute or relative path, and the special character '~' is expanded to mean $HOME. If relative path is specified, the it will be evaluated as relative with respect to the following directories (listed in order of precedence): 1. the current working directory 2. the directory containing the taskrc file 3. the directories set by the package manager (which usually contain\n\npre-defined themes)\n\nNote that environment variables are also expanded in paths (and any other taskrc variables).\n\n# <comment>\n\nA comment consists of the character '#', and extends from the '#' to the end of the line. There is no way to comment a multi-line block. There may be blank lines.\n\nAlmost every value has a default setting, and an empty .taskrc file is one that makes use of every default. The contents of the .taskrc file therefore represent overrides of the default values. To remove a default value completely there must be an entry like this:\n\n<name> =\n\nThis entry overrides the default value with a blank value.\n\nCONFIGURATION VARIABLES¶\n\nValid variable names and their default values are:\n\nFILES¶\n\ndata.location=$HOME/.task\n\nThis is a path to the directory containing all the Taskwarrior files. By default, it is set up to be ~/.task, for example: /home/paul/.task\n\nNote that you can use the ~ shell meta character, which will be properly expanded.\n\nNote that the TASKDATA environment variable overrides this setting.\n\nhooks.location=$HOME/.task/hooks\n\nThis is a path to the hook scripts directory. By default it is ~/.task/hooks.\n\nlocking=1\n\nDetermines whether to use file locking when accessing the pending.data and completed.data files. Defaults to \"1\". Solaris users who store the data files on an NFS mount may need to set locking to \"0\". Note that there is danger in setting this value to \"0\" - another program (or another instance of task) may write to the task.pending file at the same time.\n\ngc=1\n\nCan be used to temporarily suspend garbage collection (gc), so that task IDs don't change. Note that this should be used in the form of a command line override (task rc.gc=0 ...), and not permanently used in the .taskrc file, as this significantly affects performance in the long term.\n\nhooks=1\n\nThis master control switch enables hook script processing. The default value is '1', but certain extensions and environments may need to disable hooks.\n\nexit.on.missing.db=0\n\nWhen set to '1' causes the program to exit if the database (~/.task or rc.data.location or TASKDATA override) is missing. Default value is '0'.\n\nTERMINAL¶\n\ndetection=1\n\nDetermines whether to use ioctl to establish the size of the window you are using, for text wrapping.\n\ndefaultwidth=80\n\nThe width of output used when auto-detection support is not available. Defaults to 80. If set to 0, it is interpreted as infinite width, therefore with no word-wrapping; this is useful when redirecting report output to a file for subsequent handling.\n\ndefaultheight=24\n\nThe height of output used when auto-detection support is not available. Defaults to 24. If set to 0, it is interpreted as infinite height. This is useful when redirecting charts to a file for subsequent handling.\n\navoidlastcolumn=0\n\nCauses the width of the terminal minus one to be used as the full width. This avoids placing color codes in the last column which can cause problems for Cygwin users. Default value is '0'.\n\nhyphenate=1\n\nHyphenates lines when wrapping breaks occur mid-word. Default value is '1'.\n\neditor=editor\n\nSpecifies which text editor you wish to use for when the task edit <ID> command is used. Taskwarrior will first look for this configuration variable. If found, it is used. Otherwise it will look for the $VISUAL or $EDITOR environment variables, before it defaults to using \"editor\".\n\nreserved.lines=1\n\nThis is the number of lines reserved at the bottom of the screen for the shell prompt. This is only referenced when 'limit:page' is used.\n\nMISCELLANEOUS¶\n\nverbose=1|0|nothing|list...\n\nWhen set to \"1\" (the default), helpful explanatory comments are added to all output from Taskwarrior. Setting this to \"0\" means that you would see regular output.\n\nThe special value \"nothing\" can be used to eliminate all optional output, which results in only the formatted data being shown, with nothing else. This output is most readily parsed and used by shell scripts.\n\nAlternatively, you can specify a comma-separated list of verbosity tokens that control specific occasions when output is generated. This list may contain:\n\nblank Inserts extra blank lines in output, for clarity\n\nheader Messages that appear before report output (this includes .taskrc/.task overrides and the \"[task next]\" message)\n\nfootnote Messages that appear after report output (mostly status messages and change descriptions)\n\nlabel Column labels on tabular reports\n\nnew-id Provides feedback on any new task with IDs (and UUIDs for new tasks with ID 0, such as new completed tasks).\n\nnew-uuid Provides feedback on any new task with UUIDs. Overrides new-id. Useful for automation.\n\naffected Reports 'N tasks affected' and similar\n\nedit Used the verbose template for the 'edit' command\n\nspecial Feedback when applying special tags\n\nproject Feedback about project status changes\n\nsync Feedback about sync\n\nfilter Shows the filter used in the command\n\ncontext Show the current context. Displayed in footnote.\n\noverride Notification when configuration options are overridden\n\nrecur Notification when a new recurring task instance is created\n\ndefault Notifications about taskwarrior choosing to perform a default action.\n\nThe tokens \"affected\", \"new-id\", \"new-uuid\", \"project\", \"override\" and \"recur\" imply \"footnote\".\n\nThe token \"default\" implies \"header\".\n\nNote that the \"1\" setting is equivalent to all the tokens being specified, and the \"nothing\" setting is equivalent to none of the tokens being specified.\n\nHere are the shortcut equivalents:\n\nverbose=on\n\nverbose=blank,header,footnote,label,new-id,affected,edit,special,project,sync,filter,override,recur\n\nverbose=0\n\nverbose=blank,label,new-id,edit\n\nverbose=nothing\n\nverbose=\n\nThose additional comments are sent to the standard error for header, footnote and project. The others are sent to standard output.\n\nconfirmation=1\n\nMay be \"1\" or \"0\", and determines whether Taskwarrior will ask for confirmation before deleting a task or performing the undo command. The default value is \"1\". Consider leaving this enabled, for safety.\n\nallow.empty.filter=1\n\nAn empty filter combined with a write command is potentially a way to modify all tasks by mistake, and when this is detected, confirmation is required. Setting this to '0' means that it is an error to use a write command with no filter.\n\nindent.annotation=2\n\nControls the number of spaces to indent annotations when shown beneath the description field. The default value is \"2\".\n\nindent.report=0\n\nControls the indentation of the entire report output. Default is \"0\".\n\nrow.padding=0\n\nControls left and right padding around each row of the report output. Default is \"0\".\n\ncolumn.padding=0\n\nControls padding between columns of the report output. Default is \"1\".\n\nbulk=3\n\nIs a number, defaulting to 3. When this number or greater of tasks are modified in a single command, confirmation will be required, regardless of the value of confirmation variable. The special value bulk=0 is treated as an infinity.\n\nThis is useful for preventing large-scale unintended changes.\n\nnag=You have more urgent tasks.\n\nThis may be a string of text, or blank. It is used as a prompt when a task is started of completed, when there are other tasks with a higher urgency. Default value is: 'You have more urgent tasks'. It is a gentle reminder that you are contradicting your own urgency settings.\n\nlist.all.projects=0\n\nMay be \"1\" or \"0\", and determines whether the 'projects' command lists all the project names you have used, or just the ones used in active tasks. The default value is \"0\".\n\nsummary.all.projects=0\n\nIf set to \"1\", shows all projects in the summary report, even if there are no pending tasks. The default value is \"0\".\n\nMay be \"1\" or \"0\", and determines whether the tab completion scripts consider all the tag names you have used, or just the ones used in active tasks. The default value is \"0\".\n\nMay be \"1\" or \"0\", and determines whether the 'tags' command lists all the tag names you have used, or just the ones used in active tasks. The default value is \"0\".\n\nprint.empty.columns=1\n\nMay be \"1\" or \"0\", and determines whether columns with no data for any task are printed. Defaults to \"0\".\n\nsearch.case.sensitive=1\n\nMay be \"1\" or \"0\", and determines whether keyword lookup and substitutions on the description and annotations are done in a case sensitive way. Defaults to \"1\" on most platforms. Defaults to \"0\" on Cygwin due to older regex library problems with case-insensitivity.\n\nregex=1\n\nControls whether regular expression support is enabled. The default value is \"1\".\n\nxterm.title=1\n\nSets the xterm window title when reports are run. Defaults to \"0\".\n\nexpressions=infix|postfix\n\nSets a preference for infix expressions (1 + 2) or postfix expressions (1 2 +). Defaults to infix.\n\njson.array=1\n\nDetermines whether the export command encloses the JSON output in '[...]' and adds ',' after each exported task object to create a properly-formed JSON array. With json.array=0, export writes raw JSON objects to STDOUT, one per line. Defaults to \"1\".\n\n_forcecolor=1\n\nTaskwarrior shuts off color automatically when the output is not sent directly to a TTY. For example, this command:\n\n$ task list > file\n\nwill not use any color. To override this, use:\n\n$ task rc._forcecolor=yes list > file\n\nDefaults to \"0\".\n\nactive.indicator=*\n\nThe character or string to show in the start.active column. Defaults to *.\n\ntag.indicator=+\n\nThe character or string to show in the tag.indicator column. Defaults to +.\n\ndependency.indicator=D\n\nThe character or string to show in the depends.indicator column. Defaults to D.\n\nuda.<name>.indicator=U\n\nThe character or string to show in the <uda>.indicator column. Defaults to U.\n\nrecurrence=1\n\nControls whether recurrence is enabled, and whether recurring tasks continue to generate new task instances. Defaults to \"1\".\n\nIf you are syncing multiple clients, then it is advised that you set 'recurrence=1' on your primary client, and 'recurrence=0' on ALL other clients. This is a workaround for a duplication bug.\n\nrecurrence.confirmation=prompt\n\nControls whether changes to recurring tasks propagates to other child tasks with or without confirmation. A value of 'yes' means propagate changes without confirmation. A value of 'no' means do not propagate changes and don't ask for confirmation. A value of 'prompt' prompts you every time. Defaults to 'prompt'.\n\nrecurrence.indicator=R\n\nThe character or string to show in the recurrence_indicator column. Defaults to R.\n\nrecurrence.limit=1\n\nThe number of future recurring tasks to show. Defaults to 1. For example, if a weekly recurring task is added with a due date of tomorrow, and recurrence.limit is set to 2, then a report will list 2 pending recurring tasks, one for tomorrow, and one for a week from tomorrow.\n\nundo.style=side\n\nWhen the 'undo' command is run, Taskwarrior presents a before and after comparison of the data. This can be in either the 'side' style, which compares values side-by-side in a table, or 'diff' style, which uses a format similar to the 'diff' command.\n\nabbreviation.minimum=2\n\nMinimum length of any abbreviated command/value. This means that \"ve\", \"ver\", \"vers\", \"versi\", \"versio\" will all equate to \"version\", but \"v\" will not. Default is 2.\n\ndebug=0\n\nTaskwarrior has a debug mode that causes diagnostic output to be displayed. Typically this is not something anyone would want, but when reporting a bug, debug output can be useful. It can also help explain how the command line is being parsed, but the information is displayed in a developer-friendly, not a user-friendly way.\n\nTurning debug on automatically sets debug.hooks=1, debug.parser=1 and debug.tls=2 if they do not already have assigned values. Defaults to \"0\".\n\ndebug.hooks=0\n\nControls the hook system diagnostic level. Level 0 means no diagnostics. Level 1 shows hook calls. Level 2 also shows exit status and I/O.\n\ndebug.parser=0\n\nControls the parser diagnostic level. Level 0 shows no diagnostics. Level 1 shows the final parse tree. Level 2 shows the parse tree from all phases of the parse. Level 3 shows expression evaluation details.\n\ndebug.tls=0\n\nControls the GnuTLS diagnostic level. For 'sync' debugging. Level 0 means no diagnostics. Level 9 is the highest. Level 2 is a good setting for debugging.\n\nobfuscate=0\n\nWhen set to '1', will replace all report text with 'xxx'. This is useful for sharing report output in bug reports. Default value is '0'.\n\nalias.rm=delete\n\nTaskwarrior supports command aliases. This alias provides an alternate name (rm) for the delete command. You can use aliases to provide alternate names for any of the commands. Several commands you may use are actually aliases - the 'history' report, for example, or 'export'.\n\nburndown.cumulative=1\n\nMay be \"1\" or \"0\", and controls the behaviour of the burndown command. When set to 1, it sums up all completed tasks, otherwise they only get plotted in the interval where the task was completed. Defaults to 1.\n\nThis is a string of characters that defines how Taskwarrior formats date values. The precedence order for the configuration variable is report.X.dateformat then dateformat.report then dateformat for formatting the due dates in reports. If both report.X.dateformat and dateformat.report are not set then dateformat will be applied to the date. Entered dates as well as all other displayed dates in reports are formatted according to dateformat.\n\nThe default value is the ISO-8601 standard: Y-M-D. The string can contain the characters:\n\nm minimal-digit month, for example 1 or 12\n\nd minimal-digit day, for example 1 or 30\n\ny two-digit year, for example 09 or 12\n\nD two-digit day, for example 01 or 30\n\nM two-digit month, for example 01 or 12\n\nY four-digit year, for example 2009 or 2015\n\na short name of weekday, for example Mon or Wed\n\nA long name of weekday, for example Monday or Wednesday\n\nb short name of month, for example Jan or Aug\n\nB long name of month, for example January or August\n\nv minimal-digit week, for example 3 or 37\n\nV two-digit week, for example 03 or 37\n\nh minimal-digit hour, for example 3 or 21\n\nn minimal-digit minutes, for example 5 or 42\n\ns minimal-digit seconds, for example 7 or 47\n\nH two-digit hour, for example 03 or 21\n\nN two-digit minutes, for example 05 or 42\n\nS two-digit seconds, for example 07 or 47\n\nJ three-digit Julian day, for example 023 or 365\n\nj Julian day, for example 23 or 365\n\nw Week day, for example 0 for Monday, 5 for Friday\n\nThe characters 'v', 'V', 'a' and 'A' can only be used for formatting printed dates (not to parse them).\n\nThe string may also contain other characters to act as spacers, or formatting. Examples for other values of dateformat:\n\nd/m/Y would use for input and output 24/7/2009\n\nyMD would use for input and output 090724\n\nM-D-Y would use for input and output 07-24-2009\n\nExamples for other values of dateformat.report:\n\na D b Y (V) would emit \"Fri 24 Jul 2009 (30)\"\n\nA, B D, Y would emit \"Friday, July 24, 2009\"\n\nwV a Y-M-D would emit \"w30 Fri 2009-07-24\"\n\nyMD.HN would emit \"110124.2342\"\n\nm/d/Y H:N would emit \"1/24/2011 10:42\"\n\na D b Y H:N:S would emit \"Mon 24 Jan 2011 11:19:42\"\n\nUndefined fields are put to their minimal valid values (1 for month and day and 0 for hour, minutes and seconds) when there is at least one more global date field that is set. Otherwise, they are set to the corresponding values of \"now\". For example:\n\n8/1/2013 with m/d/Y implies August 1, 2013 at midnight (inferred)\n\n8/1 20:40 with m/d H:N implies August 1, 2013 (inferred) at 20:40\n\nEnables ISO-8601 date support. The default value is \"1\".\n\nCALENDAR¶\n\nweekstart=Sunday\n\nDetermines the day a week starts. Valid values are Sunday or Monday only. The default value is \"Sunday\".\n\ndisplayweeknumber=1\n\nDetermines if week numbers are displayed when using the \"task calendar\" command. The week number is dependent on the day a week starts. The default value is \"1\".\n\ndue=7\n\nThis is the number of days into the future that define when a task is considered due, and is colored accordingly. The default value is 7.\n\ncalendar.details=sparse\n\nIf set to \"full\" running \"task calendar\" will display the details of tasks with due dates that fall into the calendar period. The corresponding days will be color-coded in the calendar. If set to \"sparse\" only the corresponding days will be color coded and no details will be displayed. The displaying of due dates with details is turned off by setting the variable to \"none\". The default value is \"sparse\".\n\ncalendar.details.report=list\n\nThe report to run when displaying the details of tasks with due dates when running the \"task calendar\" command. The default value is \"list\".\n\ncalendar.offset=0\n\nIf \"1\" the first month in the calendar report is effectively changed by the offset value specified in calendar.offset.value. It defaults to \"0\".\n\ncalendar.offset.value=-1\n\nThe offset value to apply to the first month in the calendar report. The default value is \"-1\".\n\ncalendar.holidays=none\n\nIf set to full running \"task calendar\" will display holidays in the calendar by color-coding the corresponding days. A detailed list with the dates and names of the holidays is also shown. If set to sparse only the days are color-coded and no details on the holidays will be displayed. The displaying of holidays is turned off by setting the variable to none. The default value is \"none\".\n\ncalendar.legend=1\n\nDetermines whether the calendar legend is displayed. The default value is \"1\".\n\ncalendar.monthsperline=N\n\nDetermines how many months the \"task calendar\" command renders across the screen. Defaults to however many will fit. If more months than will fit are specified, Taskwarrior will only show as many that will fit.\n\nJOURNAL ENTRIES¶\n\njournal.time=0\n\nMay be \"1\" or \"0\", and determines whether the 'start' and 'stop' commands should record an annotation when being executed. The default value is \"0\". The text of the corresponding annotations is controlled by:\n\njournal.time.start.annotation=Started task\n\nThe text of the annotation that is recorded when executing the start command and having set journal.time.\n\njournal.time.stop.annotation=Stopped task\n\nThe text of the annotation that is recorded when executing the stop command and having set journal.time.\n\njournal.info=1\n\nWhen enabled, this setting causes a change log of each task to be displayed by the 'info' command. Default value is \"1\".\n\nHOLIDAYS¶\n\nHolidays are entered either directly in the .taskrc file or via an include file that is specified in .taskrc. For single-day holidays the name and the date is required to be given:\n\nholiday.towel.name=Day of the towel\n\nholiday.towel.date=20100525\n\nFor holidays that span a range of days (i.e. vacation), you can use a start date and an end date:\n\nholiday.sysadmin.name=System Administrator Appreciation Week\n\nholiday.sysadmin.start=20100730\n\nholiday.sysadmin.end=20100805\n\nDates are to be entered according to the setting in the dateformat.holiday variable.\n\nThe following holidays are computed automatically: Good Friday (goodfriday), Easter (easter), Easter Monday (eastermonday), Ascension (ascension), Pentecost (pentecost). The date for these holidays is the given keyword:\n\nholiday.eastersunday.name=Easter\n\nholiday.eastersunday.date=easter\n\nNote that the Taskwarrior distribution contains example holiday files that can be included like this:\n\ninclude holidays.en-US.rc\n\nDEPENDENCIES¶\n\ndependency.reminder=1\n\nDetermines whether dependency chain violations generate reminders.\n\ndependency.confirmation=1\n\nDetermines whether dependency chain repair requires confirmation.\n\nCOLOR CONTROLS¶\n\ncolor=1\n\nMay be \"1\" or \"0\". Determines whether Taskwarrior uses color. When \"0\", will use dashes (-----) to underline column headings.\n\nfontunderline=1\n\nDetermines if font underlines or ASCII dashes should be used to underline headers, even when color is enabled.\n\nTaskwarrior has a number of coloration rules. They correspond to a particular attribute of a task, such as it being due, or being active, and specifies the automatic coloring of that task. A list of valid colors, depending on your terminal, can be obtained by running the command:\n\ntask colors\n\nNote that no default values are listed here - the defaults now correspond to the dark-256.theme (Linux) and dark-16.theme (other) theme values. The coloration rules are as follows:\n\ncolor.due.today Task is due today\n\ncolor.active Task is started, therefore active.\n\ncolor.scheduled Task is scheduled, therefore ready for work.\n\ncolor.until Task has an expiration date.\n\ncolor.blocking Task is blocking another in a dependency.\n\ncolor.blocked Task is blocked by a dependency.\n\ncolor.overdue Task is overdue (due some time prior to now).\n\ncolor.due Task is coming due.\n\ncolor.project.none Task does not have an assigned project.\n\ncolor.tag.none Task has no tags.\n\ncolor.tagged Task has at least one tag.\n\ncolor.recurring Task is recurring.\n\ncolor.completed Task is completed.\n\ncolor.deleted Task is deleted.\n\nTo disable a coloration rule for which there is a default, set the value to nothing, for example:\n\ncolor.tagged=\n\nBy default, colors produced by rules blend. This has the advantage of conveying additional information, by producing combinations that are not used by any particular rule directly.\n\nHowever, color blending can produce highlighting combinations which are not desired. In such cases, use the following option to disable this behaviour:\n\nrule.color.merge=1\n\nCan be \"1\" or \"0\". When \"0\", disables merging of colors produced by different color rules. Use if your color scheme produces unpleasing foreground and background combinations.\n\nSee the task-color(5) man pages for color details.\n\nCertain attributes like tags, projects and keywords can have their own coloration rules.\n\ncolor.tag.X=yellow\n\nColors any task that has the tag X.\n\ncolor.project.X=on green\n\nColors any task assigned to project X.\n\ncolor.keyword.X=on blue\n\nColors any task where the description or any annotation contains X.\n\ncolor.uda.X=on green\n\nColors any task that has the user defined attribute X.\n\ncolor.uda.X.VALUE=on green\n\nColors any task that has the user defined attribute X set to VALUE.\n\ncolor.uda.X.none=on green\n\nColors any task that does not have the user defined attribute X.\n\ncolor.error=white on red\n\nColors any of the error messages.\n\ncolor.warning=bold red\n\nColors any of the warning messages.\n\ncolor.header=green\n\nColors any of the messages printed prior to the report output.\n\nColors any of the messages printed last.\n\ncolor.summary.bar=on green\n\nColors the summary progress bar. Should consist of a background color.\n\ncolor.summary.background=on black\n\nColors the summary progress bar. Should consist of a background color.\n\ncolor.calendar.today=black on cyan\n\nColor of today in calendar.\n\ncolor.calendar.due=black on green\n\nColor of days with due tasks in calendar.\n\ncolor.calendar.due.today=black on magenta\n\nColor of today with due tasks in calendar.\n\ncolor.calendar.overdue=black on red\n\nColor of days with overdue tasks in calendar.\n\ncolor.calendar.scheduled=black on orange\n\nColor of days with scheduled tasks in calendar.\n\ncolor.calendar.weekend=bright white on black\n\nColor of weekend days in calendar.\n\ncolor.calendar.holiday=black on bright yellow\n\nColor of holidays in calendar.\n\ncolor.calendar.weeknumber=black on white\n\nColor of weeknumbers in calendar.\n\ncolor.label=\n\nColors the report labels. Defaults to not use color.\n\ncolor.label.sort=\n\nColors the report labels for sort columns. Defaults to color.label.\n\ncolor.alternate=on rgb253\n\nColor of alternate tasks. This is to apply a specific color to every other task in a report, which can make it easier to visually separate tasks. This is especially useful when tasks are displayed over multiple lines due to long descriptions or annotations.\n\ncolor.history.add=on red\n\ncolor.history.done=on green\n\ncolor.history.delete=on yellow\n\nColors the bars on the ghistory report graphs. Defaults to red, green and yellow bars.\n\ncolor.burndown.pending=on red\n\ncolor.burndown.started=on yellow\n\ncolor.burndown.done=on green\n\nColors the bars on the burndown reports graphs. Defaults to red, green and yellow bars.\n\ncolor.undo.before=red\n\ncolor.undo.after=green\n\nColors used by the undo command, to indicate the values both before and after a change that is to be reverted.\n\ncolor.sync.added=green\n\ncolor.sync.changed=yellow\n\ncolor.sync.rejected=red\n\nColors the output of the sync command.\n\nrule.precedence.color=due.today,active,blocking,blocked,overdue,due,\n\nscheduled,keyword.,project.,tag.,uda.,recurring, tagged,completed,deleted\n\nThis setting specifies the precedence of the color rules, from highest to lowest. Note that the prefix 'color.' is omitted (for brevity), and that any wildcard value (color.tag.XXX) is shortened to 'tag.', which places all specific tag rules at the same precedence, again for brevity.\n\ncolor.debug=green\n\nColors all debug output, if enabled.\n\nURGENCY¶\n\nThe urgency calculation uses a polynomial with several terms, each of which has a configurable coefficient. Those coefficients are:\n\nurgency.blocking.coefficient=8.0\n\nUrgency coefficient for blocking tasks\n\nurgency.blocked.coefficient=-5.0\n\nUrgency coefficient for blocked tasks\n\nurgency.due.coefficient=12.0\n\nUrgency coefficient for due dates\n\nurgency.waiting.coefficient=-3.0\n\nUrgency coefficient for waiting status\n\nurgency.active.coefficient=4.0\n\nUrgency coefficient for active tasks\n\nurgency.scheduled.coefficient=5.0\n\nUrgency coefficient for scheduled tasks\n\nurgency.project.coefficient=1.0\n\nUrgency coefficient for projects\n\nurgency.tags.coefficient=1.0\n\nUrgency coefficient for tags\n\nurgency.annotations.coefficient=1.0\n\nUrgency coefficient for annotations\n\nurgency.age.coefficient=2.0\n\nUrgency coefficient for the age of tasks\n\nurgency.age.max=365\n\nMaximum age in days. After this number of days has elapsed, the urgency of a task won't increase any more because of aging.\n\nurgency.user.tag.<tag>.coefficient=...\n\nSpecific tag coefficient.\n\nurgency.user.tag.next.coefficient=15.0\n\nUrgency coefficient for tag 'next'.\n\nurgency.user.project.<project>.coefficient=...\n\nSpecific project coefficient.\n\nurgency.user.keyword.<keyword>.coefficient=...\n\nSpecific description keyword coefficient.\n\nurgency.uda.<name>.coefficient=...\n\nPresence/absence of UDA data.\n\nurgency.uda.<name>.<value>.coefficient=...\n\nSpecific value of UDA data.\n\nThe coefficients reflect the relative importance of the various terms in the urgency calculation. These are default values, and may be modified to suit your preferences, but it is important that you carefully consider any modifications.\n\nurgency.inherit=0\n\nNot actually a coefficient. When enabled, blocking tasks inherit the highest urgency value found in the tasks they block. This is done recursively. It is recommended to set urgency.blocking.coefficient and urgency.blocked.coefficient to 0.0 in order for this setting to be the most useful.\n\nDEFAULTS¶\n\ndefault.project=foo\n\nProvides a default project name for the task add command, if you don't specify one. The default is blank.\n\ndefault.due=...\n\nProvides a default due date for the task add command, if you don't specify one. You can use a date, or a duration value which is assumed to be relative to 'now'. The default is blank.\n\ndefault.scheduled=...\n\nProvides a default scheduled date for the task add command, if you don't specify one. You can use a date, or a duration value which is assumed to be relative to 'now'. The default is blank.\n\nuda.<name>.default=...\n\nProvides default values for UDA fields when using the task add command, if you don't specify values. The default is blank.\n\ndefault.command=next\n\nProvides a default command that is run every time Taskwarrior is invoked with no arguments. For example, if set to:\n\ndefault.command=project:foo list\n\nthen Taskwarrior will run the \"project:foo list\" command if no command is specified. This means that by merely typing\n\n$ task\n\n[task project:foo list]\n\nID Project Pri Description\n\n1 foo H Design foo\n\n2 foo Build foo\n\nREPORTS¶\n\nThe reports can be customized by using the following configuration variables. The output columns, their labels and the sort order can be set using the corresponding variables for each report. Each report name is used as a \"command\" name. For example\n\ntask overdue\n\nreport.X.description\n\nThe description for report X when running the \"task help\" command.\n\nreport.X.columns\n\nThis is a comma-separated list of columns and formatting specifiers. See the command 'task columns' for a full list of options and examples.\n\nreport.X.context\n\nA boolean value representing whether the given report should respect (apply) the currently active context. See CONTEXT section for details about context. Defaults to 1.\n\nreport.X.labels\n\nThe labels for each column that will be used when generating report X. The labels are a comma separated list.\n\nreport.X.sort\n\nThe sort order of the tasks in the generated report X. The sort order is specified by using the column ids post-fixed by a \"+\" for ascending sort order or a \"-\" for descending sort order. The sort IDs are separated by commas. For example:\n\nreport.list.sort=due+,priority-,start.active-,project+\n\nAdditionally, after the \"+\" or \"-\", there can be a solidus \"/\" which indicates that there are breaks after the column values change. For example:\n\nreport.minimal.sort=project+/,description+\n\nThis sort order now specifies that there is a listing break between each project. A listing break is simply a blank line, which provides a visual grouping.\n\nA special sort value of \"none\" indicates that no sorting is required, and tasks will be presented in the order (if any) in which they are selected.\n\nreport.X.filter\n\nThis adds a filter to the report X so that only tasks matching the filter criteria are displayed in the generated report.\n\nThere is a special case for 'report.timesheet.filter', which may be specified even though the 'timesheet' report is not very customizable.\n\nThis adds a dateformat to the report X that will be used by the \"due date\" column. If it is not set then dateformat.report and dateformat will be used in this order. See the DATES section for details on the sequence placeholders.\n\nreport.X.annotations\n\nThis adds the possibility to control the output of annotations for a task in a report. Deprecated. Use the description column with a format (e.g., description.count) instead.\n\nTaskwarrior comes with a number of predefined reports, which are:\n\nnext\n\nLists the most important tasks.\n\nlong\n\nLists all pending tasks and all data, matching the specified criteria.\n\nlist\n\nLists all tasks matching the specified criteria.\n\nls\n\nShort listing of all tasks matching the specified criteria.\n\nminimal\n\nMinimal listing of all tasks matching the specified criteria.\n\nnewest\n\nShows the newest tasks.\n\noldest\n\nShows the oldest tasks.\n\noverdue\n\nLists overdue tasks matching the specified criteria.\n\nactive\n\nLists active tasks matching the specified criteria.\n\ncompleted\n\nLists completed tasks matching the specified criteria.\n\nrecurring\n\nLists recurring tasks matching the specified criteria.\n\nwaiting\n\nLists all waiting tasks matching the specified criteria.\n\nall\n\nLists all tasks matching the specified criteria.\n\nblocked\n\nLists all tasks that have dependencies.\n\nUSER DEFINED ATTRIBUTES¶\n\nUser defined attributes (UDAs) are an extension mechanism that allows you to define new attributes for Taskwarrior to store and display. One such example is an 'estimate' attribute that could be used to store time estimates associated with a task. This 'estimate' attribute is not built in to Taskwarrior, but with a few simple configuration settings you can instruct Taskwarrior to store this item, and provide access to it for custom reports and filters.\n\nThis allows you to augment Taskwarrior to accommodate your workflow, or bend the rules and use Taskwarrior to store and synch data that is not necessarily task-related.\n\nOne important restriction is that because this is an open system that allows the definition of any new attribute, Taskwarrior cannot understand the meaning of that attribute. So while Taskwarrior will faithfully store, modify, report, sort and filter your UDA, it does not understand anything about it. For example if you define a UDA named 'estimate', Taskwarrior will not know that this value is weeks, hours, minutes, money, or some other resource count.\n\nDefines a UDA called '<name>', of the specified type.\n\nuda.<name>.label=<column heading>\n\nProvides a default report label for the UDA called '<name>'.\n\nuda.<name>.values=A,B,C\n\nFor type 'string' UDAs only, this provides a comma-separated list of acceptable values. In this example, the '<name>' UDA may only contain values 'A', 'B', or 'C', but may also contain no value.\n\nNote that the order of the value is important, and denotes the sort order from highest ('A') to lowest ('C').\n\nNote that a blank value is permitted.\n\nuda.<name>.default=...\n\nProvides a default value for the UDA called '<name>'.\n\nExample 'estimate' UDA\n\nThis example shows an 'estimate' UDA that stores specific values for the size of a task. Note the blank value after 'trivial'.\n\nuda.estimate.type=string\n\nuda.estimate.label=Size Estimate\n\nuda.estimate.values=huge,large,medium,small,trivial,\n\nNote that the value are sorted\n\nhuge > large > medium > small > trivial > ''\n\nCONTEXT¶\n\nContext setting is a mechanism which allows the user to set a permanent filter, thus avoiding the need to specify one filter repeatedly. More details on usage can be found in the task(1) man page.\n\nThe current context is stored in the .taskrc file, along with definitions for all user provided contexts.\n\ncontext=<name>\n\nStores the value of the currently active context.\n\ncontext.<name>.read=<filter>\n\ncontext.<name>.write=<modifications>\n\nStores the definition of the read or write context with the name <name>. Read context is the default filter applied when the context is active. The write context are the default modifications applied to newly added tasks when the context is active.\n\ncontext.<name>.rc.<key>=<value>\n\nThe rc type allows to override any configuration parameter for the current context, e.g. if the default command for the context home should be changed to home_report, the following statement could be added:\n\ncontext.home.rc.default.command=home_report\n\nSYNC¶\n\nThese configuration settings are used to connect and sync tasks with the task server.\n\ntaskd.server=<host>:<port>\n\nSpecifies the hostname and port of the Taskserver. Hostname may be an IPv4 or IPv6 address, or domain. Port is an integer.\n\ntaskd.credentials=<organization>/<user>/<key>\n\nUser identification for the Taskserver, which includes a private key.\n\ntaskd.certificate=<path>\n\nSpecifies the path to the client certificate used for identification with the Taskserver.\n\ntaskd.key=<path>\n\nSpecifies the path to the client key used for encrypted communication with the Taskserver.\n\ntaskd.ca=<path>\n\nSpecifies the path to the CA certificate in the event that your Taskserver is using a self-signed certificate. Optional.\n\ntaskd.trust=strict|ignore hostname|allow all\n\nThis settings allows you to override the trust level when server certificates are validated. With \"allow all\", the server certificate is trusted automatically. With \"ignore hostname\", the server certificate is verified but the hostname is ignored. With \"strict\", the server certificate is verified. Default is \"strict\", which requires full validation.\n\ntaskd.ciphers=NORMAL\n\nOverride of the cipher selection. The set of ciphers used by TLS may be controlled by both server and client. There must be some overlap between client and server supported ciphers, or communication cannot occur. Default is \"NORMAL\". See GnuTLS documentation for full details."
    }
}