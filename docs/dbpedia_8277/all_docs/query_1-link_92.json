{
    "id": "dbpedia_8277_1",
    "rank": 92,
    "data": {
        "url": "https://yoshuawuyts.gitbooks.io/knowledge/content/unix/tasks.html",
        "read_more_link": "",
        "language": "en",
        "title": "tasks Â· knowledge",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Yoshua Wuyts"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../gitbook/images/apple-touch-icon-precomposed-152.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "tasks\n\nHow to create tasks, manage tasks and stay productive.\n\nCreating tasks\n\nA day has 24 hours, of which 8 are for sleep, 8 are for work, and 8 for the rest. There's only so much time you can be productive in a day, so it's key to utilize your time efficiently and spend as little time (and mental power) as possible on side tasks.\n\nA neat strategy to create value for your day is to create an achievable goal for the day, and write down a max of 5 items that help you achieve that goal.\n\nManaging tasks\n\nManaging tasks is something you want to spend the minimum amount of time on as it doesn't produce any direct value. For that purpose I use a program called task(1) (taskwarrior).\n\nCreate\n\nTasks can be created and assigned to projects\n\n$ task add project:myProject +myLabel 'This is my task'\n\nRead\n\nTasks can be printed to stdout, filtered by project and further filtered by label name. You can also specify when a task is due in natural language.\n\n$ task project:myProject +myLabel due.before: today ls ID D Project Due Description 1 myProject 1 day create `pull build` bar 1 task\n\nTasks can depend on each other\n\n$ task 1 modify depends:2-4\n\nRead subcommand\n\nAll tasks accept a <filter> property.\n\ntask blocked task active task burndown.{daily,weekly,monthly} task calendar task count task export task ghistory.{monthly,annual} task next task overdue task recurring\n\nWrite subcommands\n\nAll tasks accept a <filter> property.\n\ntask add # add a new task task annotate # add an annotation to a task task append # append description text to a task task delete # delete the task task denotate # remove an annotation from a task task done # mark a task as done task duplicate # duplicate the task and allow modifications task edit # edit the task in an editor task import # import a task from JSON task log # add an already completed task to the list task modify # edit an existing task task prepend # prepend description text to a task task start # mark the specified tasks as started task stop # remove the start time from the task\n\nMisc subcommands\n\ntask context <name> # set the active context task context delete <name> # delete the context task context define <name> <filter> # define a new context task context list # print all contexts task context none # unset current context task context show # show the currently active context task diagnostics # show diagnostic information for bug reports task execute # execute an external command task logo # print taskwarrior logo task reports # list all supported reports task show # show current settings task stats # show stats task timesheet # show weekly report of task completed & started task undo # undo the last action task version # show the version\n\nAttributes & metadata\n\n[tbd]\n\nAttribute modifiers\n\n[tbd]\n\nContext\n\n[tbd]\n\nRegexes\n\nRegexes are kind of tricky. Here's an example to add a new context that matches a regex:\n\n$ task context define myProject \"project ~ 'myProject/*'\"\n\nSee also"
    }
}