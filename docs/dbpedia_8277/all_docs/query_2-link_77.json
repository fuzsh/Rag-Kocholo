{
    "id": "dbpedia_8277_2",
    "rank": 77,
    "data": {
        "url": "https://blog.jetbrains.com/clion/2021/07/cpp-ecosystem-in-2021/",
        "read_more_link": "",
        "language": "en",
        "title": "C++ Ecosystem in 2021: 1 in 5 C++ developers are using C++20 and a third of us are not writing any unit tests at all, and other facts",
        "top_image": "https://blog.jetbrains.com/wp-content/uploads/2021/07/DSGN-11534_DevEco_C_Featured_1280x720.png",
        "meta_img": "https://blog.jetbrains.com/wp-content/uploads/2021/07/DSGN-11534_DevEco_C_Featured_1280x720.png",
        "images": [
            "https://blog.jetbrains.com/wp-content/uploads/2024/06/JETBRAINS-Blog.svg",
            "https://blog.jetbrains.com/wp-content/uploads/2019/01/CLion-1.svg",
            "https://blog.jetbrains.com/wp-content/uploads/2021/03/Anastasia-200x200.jpg",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/DSGN-11534_DevEco_C_Blog_1600x800.png",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/standards.png",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/cpp11_migration.png",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/cpp14_migration.png",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/code_analysis.png",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/build_systems.png",
            "https://blog.jetbrains.com/wp-content/uploads/2021/07/dependency_management.png",
            "https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg",
            "https://blog.jetbrains.com/wp-content/uploads/2024/08/Featured_Blog_1280x720-2x-4-1.png",
            "https://blog.jetbrains.com/wp-content/uploads/2024/05/andrey-gushchin.jpg",
            "https://blog.jetbrains.com/wp-content/uploads/2024/07/CL_Featured_Blog_1280x720-2x.png",
            "https://blog.jetbrains.com/wp-content/uploads/2024/05/andrey-gushchin.jpg",
            "https://blog.jetbrains.com/wp-content/uploads/2024/07/Featured_Blog_1280x720-2x-2.png",
            "https://blog.jetbrains.com/wp-content/uploads/2024/05/andrey-gushchin.jpg",
            "https://blog.jetbrains.com/wp-content/uploads/2024/05/cl-social-featured_blog_1280x720_en-1.png",
            "https://blog.jetbrains.com/wp-content/uploads/2024/05/andrey-gushchin.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Andrey Gushchin"
        ],
        "publish_date": "2021-07-21T13:26:18+01:00",
        "summary": "",
        "meta_description": "The Developer Ecosystem 2021 report is now available! We discuss the latest trends in C++ with Matt Godbolt and Andreas Kling.",
        "meta_lang": "en",
        "meta_favicon": "https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/favicons/favicon.ico",
        "meta_site_name": "The JetBrains Blog",
        "canonical_link": "https://blog.jetbrains.com/clion/2021/07/cpp-ecosystem-in-2021/",
        "text": "News\n\nThe Developer Ecosystem 2021 report is now available!\n\nEvery year we ask thousands of developers, with various backgrounds from all around the globe, dozens of questions, which we have localized into many different languages. We then clean, weigh, and process the data carefully, and validate it against other data sources. Our goal is to extract the key trends, which we will present through infographics to the public. This data is used across JetBrains to help our team make the right decisions on both global and product-levels. We are happy to share this data with the community so we can all thrive together!\n\nThe full report for 2021 is now available. We invite you to read through the key takeaways and detailed data for many programming languages and areas of software development.\n\nLet’s discuss the C++ results with experts!\n\nWhere is the C++ ecosystem now\n\nC++ language standards adoption\n\nLet’s talk about code quality\n\nIs there a standard build system for C++?\n\nWhat about other C++ tools?\n\nCompare to C++ Foundation Lite Survey 2021\n\nLet’s discuss the C++ results with experts!\n\nWe’ve invited two guests to join us and take a closer look at this year’s C++ results and what they mean to the C++ community:\n\nMatt Godbolt, creator of Compiler Explorer\n\nAndreas Kling, creator of SerenityOS and the accompanying YouTube channel\n\nWe’d like to thank Matt and Andreas for joining the discussion.\n\nWe gave our guests early access to the results and asked them about their general impressions on the state of the C++ ecosystem through 3 questions:\n\nWhat was the most surprising data from 2021?\n\nIs there anything in the results that you find especially encouraging from the perspective of the evolution of the C++ ecosystem?\n\nIs there anything in the results that you find extremely disappointing from the perspective of the evolution of the C++ ecosystem?\n\nI. What was the most surprising data from 2021?\n\nAndreas:\n\nThe top-3 surprises for me are:\n\nHow many people are not using any static analysis or automatic code formatting\n\nHow many people are still using C++98/C++03\n\nGCC is growing more than Clang!\n\nMatt:\n\nIt is interesting to see open source compilers topping the list of regularly used compilers. In my world, being on Linux makes the MSVC compilers unavailable to me, but I have always thought that the programmers on Windows would outnumber us, and so the MSVC usage would be higher.\n\nII. Is there anything in the results you find especially encouraging from the perspective of the evolution of the C++ ecosystem?\n\nAndreas:\n\nThe hype around modules is very encouraging! Better encapsulation and reduced compile times for libraries will be a huge boost to the ecosystem!\n\nMatt:\n\nIt is nice to see the adoption of modern C++. 1 in 5 respondents are on the latest standard, which is great, and many more are planning on migrating to at least C++17 in the next year. Modules and concepts seem to be some of the strongest motivators to adopt a newer standard. I’m finding concepts valuable, but I haven’t yet gotten my head around modules, and I’m hoping tooling will help me move to modules as it becomes more widely supported.\n\nBesides that, it’s great to see many people using static analysis.\n\nIII. Is there anything in the results you find extremely disappointing from the perspective of the evolution of the C++ ecosystem?\n\nAndreas:\n\nThe fragmentation in build systems and package management continues to be an issue. While it’s good to explore different solutions, I think the C++ community can learn a lot from other languages that have chosen to go with a single unified approach to build/package management.\n\nMatt:\n\nIt is still disappointing to see that a third of the developers are not writing any unit tests at all.\n\nNearly 3/4 of respondents are suffering from lack of good packaging solutions – having to build libraries separately, prebuild, or use system package management means either developer toil or reliance on external parties to build them. That can mean getting behind on new versions and it adds complexity to upgrading or changing compilers.\n\nWhere is the C++ ecosystem now?\n\nC++ language standards adoption\n\nWhile there is still a stable audience for C++98/C++03, newer standards are constantly growing and taking developers away from previous versions. This is how the timeline for C++11 and newer standards looks through the years we’ve been running the research:\n\nJust to highlight this: in 2021, 1 in 5 C++ developers are using the latest officially signed C++20 standard even though it’s not yet fully supported in all major compilers! Many of us believe that C++20 is the next big release after C++11 and will have a huge impact on the C++ ecosystem. It looks like this could be true! Take a look at the top-3 C++20 big features and how many developers plan to adopt them soon: 48% for Modules, 46% for Concepts, and 33% for Coroutines.\n\nAndreas:\n\nModules tops the charts as expected. With C++ build times constantly getting worse, it will be very interesting to see how people use modules to push back against this trend.\n\nIt is interesting that in game development, Concepts are ahead of the other features in terms of plans to adopt them with 53%. Of course, these developers are still waiting for the reflection mechanism that is not yet available natively in the C++ language.\n\nLater this year, the C++ Standard Committee plans to make C++23 “feature complete”. However, it now seems it will be a bug-fix release (even though many of the upcoming improvements are very useful), which totally makes sense after such a huge update.\n\nLooking at the C++ standards migration charts from the report, it’s interesting to see how the share of those who don’t plan to update drops between “from C++11” and “from C++14” transition paths:\n\nAndreas (on some of the transition paths):\n\nFrom C++98/03: While this looks promising, I wish more teams would take the opportunity to make a greater leap than just going to C++11, which is already a decade old at this point.\n\nFrom C++11: It’s great to see that so many are looking to skip over C++14 and go directly to C++17 or C++20.\n\nFrom C++17: It makes sense that lots of people who were already on C++17 are eager to adopt C++20.\n\nLet’s talk about the code quality\n\nTo improve code quality and catch potential issues in the early stages, static code analysis tools are very useful. There are many of them, and we can see a lot of activity in this part of the C++ market. The Clang ecosystem is growing blazingly fast, with many tools based on LLVM as a back-end. It is no real surprise that Clang-based tools are trending in the list of tools for Code Analysis and guideline enforcements:\n\nAndreas:\n\nIt’s also good to see that people are using static analysis tools. Even if you don’t have the budget for paid tools, the free tools like Clang-tidy and Clang-analyzer are great.\n\nStill, the majority of C++ developers prefer tools bundled into their IDEs. We are seeing many code analysis tools providing plugins for the major C++ IDEs on the market. For example, in the recent edition of C++ Annotated we talked about new 3rd party plugins for Code Analysis for CLion – SonarLint and PVS-Studio.\n\nThe second most popular response to the question of what code analysis tools do you use was “None”.\n\nAndreas:\n\nThe “30% None” crowd needs to wake up and try some static analysis. I guarantee they will find real bugs!\n\nAt first, you would think these people use no code analysis at all. So did we! However, while preparing my talk “Code Analysis++” for C++Now 2021, I realized that some of these developers rely on code analysis on CI, like SonarQube. After a few confirmations from the C++ community members, we plan to update the list of possible answers next year to cover this case and, hopefully, decrease the share of “None” answers to this question. By the way, at JetBrains, we are also working on providing the code analyzers from our IDEs as CI services. For that, we’ve recently started the Qodana Early Preview. We hope C++ linters from CLion will soon become a part of it too!\n\nIs there a standard build system for C++?\n\nThat’s a very good question. We tend to say there isn’t, and instead we have many options, like Makefiles, Autotools, CMake, Visual Studio, Bazel, Meson, Scons, and many others. What are your thoughts here?\n\nBryce Adelstein Lelbach, the chair of Standard C++ Library Evolution group, in his talk “What Belongs In The C++ Standard Library?” at C++Now earlier this year, stated that we actually have one! It’s CMake. If you still have concerns here, just look at how it has grown over the years (let’s compare the top-3 most popular build systems in C++ through the last 5 years):\n\nThere are many open source projects that tended to use Makefile in the past, but are moving to CMake these days.\n\nFor unit testing, Google Test is trending, the same as in previous years. But we agree with Matt:\n\nIt is still disappointing to see a third of developers not writing any unit tests at all.\n\nDependency management is one of the major pain points for C++ developers. We still mostly build libraries as part of our projects, which is not an easy task given the variety of possible build systems in the C++ world.\n\nMatt:\n\nNearly three quarters of respondents lack a good packaging solution. Having to build libraries separately, prebuild, or use system package management means either developer labor or reliance on external parties to build them. That can mean getting behind on new versions, and adds complexity to upgrading or changing compilers.\n\nAndreas:\n\nIt wouldn’t be C++ if we didn’t have many competing solutions to this problem, but I can’t help but wonder if we’d all be better off if we just picked one and went with it.\n\nWe’d love to know what you think about dependency management in C++? Do you use Conan, Nuget, or vcpkg? Leave us a comment below.\n\nWhile we are still on the topic of tools, we are pleased to see that CLion is in the top-3. We have big plans to improve and evolve CLion in various directions. We keep an eye on the current trends in the C++ ecosystem and make sure there is support in CLion for our users to utilize them.\n\nAndreas:\n\nQuite impressive numbers from CLion considering it’s such a young IDE. I can see why though, having recently switched to it myself!\n\nIf you are working on a non-commercial open source project, don’t forget you qualify for a free license for our IDEs!\n\nComparing to C++ Foundation Lite Survey 2021\n\nValidating Developer Ecosystem results against other community surveys and research is important and helps make us confident in the results. Even when the results are different, it’s not always a bug, but often it is down to different methodology. Understanding these differences help us understand the trends correctly. For C++, we validate our results against C++ Foundation Lite Survey results.\n\nThis year, there are 2276 responses in the Developer Ecosystem survey and 1873 in the C++ Foundation survey. We spotted a few major differences in the data origins:\n\nExperience: The majority of the C++ Foundation Lite survey respondents have 10+ and even 20+ years of programming experience. For Developer Ecosystem research (C++ audience) more than a half of the respondents have 1-5 years of experience.\n\nGeography: We are also geographically different, as the top-3 countries in C++ Foundation results are the United States, Germany, and Russia, while in the Developer Ecosystem (C++ part) it’s China, India, and the United States. This bias is likely because the C++ Foundation Lite survey is only provided in English, while the Developer Ecosystem survey is localized into 9 additional languages.\n\nSpecialization: Gaming is trending in the areas of development in C++ Foundation Lite results this year (they got 31%). That’s why the results are often shifted towards the Microsoft ecosystem and tools (which is a default for many developers in this area).\n\nYou can learn more about Developer Ecosystem methodology in the corresponding section of the report.\n\nTo compare, we apply the same methodology and selection process to the raw data of both surveys. In the resulting groups similar trends are observed, but some differences are still present:\n\nWhile the top-3 project models are the same, Ninja and Qmake are twice as popular among C++ Foundation Lite survey respondents.\n\nDeveloper Ecosystem respondents tend to use more programming languages besides C++. Java, JavaScript, SQL, PHP, Swift, and Kotlin are much more popular among them, whereas C++ Foundation Lite survey respondents use Assembly, Objective-C, and Haskell more actively.\n\nThat’s it! Check out the full report and let us know which trends you find the most interesting and exciting, and which are a little disappointing to you.\n\nCHECK THE FULL REPORT"
    }
}