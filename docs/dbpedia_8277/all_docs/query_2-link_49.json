{
    "id": "dbpedia_8277_2",
    "rank": 49,
    "data": {
        "url": "https://www.perforce.com/resources/qac/misra-c-cpp",
        "read_more_link": "",
        "language": "en",
        "title": "MISRA C and MISRA C++ ‚Äî Coding Standards For Compliance",
        "top_image": "https://www.perforce.com/sites/default/files/image/2021-03/image-2-resource-misra-coding-guidelines.jpg",
        "meta_img": "https://www.perforce.com/sites/default/files/image/2021-03/image-2-resource-misra-coding-guidelines.jpg",
        "images": [
            "https://www.perforce.com/sites/default/themes/custom/perforce/logo.svg",
            "https://www.perforce.com/sites/default/files/styles/teaser_image/public/image/2024-08/vcs_helix-core_report_2024_state-of-game-technology-report_resource.jpg?itok=Yt8ggwcv",
            "https://www.perforce.com/sites/default/files/image/2018-09/image-blog-better-embedded-coding-misra.jpg",
            "https://www.perforce.com/sites/default/files/image/2018-10/logo-customer-socionext.png",
            "https://www.perforce.com/sites/default/files/image/2018-10/logo-customer-selex-es.png",
            "https://www.perforce.com/sites/default/files/image/2018-10/logo-customer-viveris.png",
            "https://www.perforce.com/sites/default/themes/custom/perforce/logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "MISRA C and MISRA C++ are two of the most widely used coding standards in embedded industries. And achieving MISRA compliance is often a critical step for functional safety. Learn more about MISRA C and C++ rules and how to check your code against them with MISRA checkers.",
        "meta_lang": "en",
        "meta_favicon": "/sites/default/themes/custom/perforce/images/favicons/favicon.ico",
        "meta_site_name": "Perforce Software",
        "canonical_link": "https://www.perforce.com/resources/qac/misra-c-cpp",
        "text": "MISRA¬Æ provides coding guidelines for C and C++.\n\nConsider this your guide to MISRA C and MISRA C++.\n\nRead along or jump to the section that interests you most:\n\nWhat Is MISRA?\n\nWhy Use MISRA Standards?\n\nImportant MISRA C Rules With Examples\n\nImportant MISRA C++ Rules With Examples\n\nHow to Achieve MISRA Compliance\n\n‚û°Ô∏è efficient misra compliance with helix qac\n\nWhat Is MISRA?\n\nMISRA provides coding standards for developing safety-critical systems.\n\nMISRA is made up of vehicle manufacturers, component suppliers, and engineering consultancies. Experts from Perforce‚Äôs static code analysis team (formerly PRQA) are members of the General Meeting and MISRA working groups, too.\n\nMISRA first developed coding guidelines in 1998. These were specific to the C programming language. Since then, MISRA has added a coding standard for C++.\n\nüìï Related White Paper: How to Write Secure Code in C\n\nWhy Use MISRA Standards?\n\nYou can use MISRA standards to ensure your code is:\n\nSafe\n\nSecure\n\nReliable\n\nPortable\n\nüìï Related White Paper: What Is MISRA? An Overview of the MISRA Standard\n\nThe MISRA C coding standard was originally written for the automotive embedded software industry. But today, MISRA standards for C and C++ are widely used by embedded industries ‚Äî including aerospace and defense, telecommunications, medical devices, and rail.\n\nMost of these industries have a compliance requirement to use a coding standard ‚Äî such as ISO 26262 for automotive functional safety.\n\nüìï Related White Paper: How to Comply With the ISO 26262 Standard\n\nWhat Are MISRA C Rules for the MISRA C Standard? And MISRA C Rules With Examples\n\nMISRA C is the most widely used set of coding guidelines for C around the world. There have been three releases of the MISRA C standard.\n\nMISRA C:1998\n\nMISRA C:1998 was published in 1998 and remains widely used today. It was written for C90. There are 127 coding rules, including:\n\nRule 59\n\nThe statement forming the body of an \"if\", \"else if\", \"else\", \"while\", \"do ... while\", or \"for\" statement shall always be enclosed in braces\n\nMISRA C:2004\n\nMISRA C:2004 is the second edition of MISRA C, published in 2004. It was written for C90. There are 142 coding rules, including:\n\nRule 14.9\n\nAn if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement.\n\nRule 14.10\n\nAll if ‚Ä¶ else if constructs shall be terminated with an else clause.\n\nMISRA C:2012\n\nMISRA C:2012 is the third edition of MISRA C, published in 2012. It was written for C99 and C90 to provide better rationales for the guidelines and more precise descriptions. There are 143 rules, including:\n\nRule 18.1\n\nA pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand\n\nüìï Related White Paper: 6 Key Changes in MISRA:C 2012\n\nMISRA C:2012 Amendment 1\n\nMISRA C 2012 Amendment 1 was released in 2016. The aim of AMD1 was to add security guidelines. With this amendment, MISRA C:2012 includes 156 rules and 17 directives for a total of 173 guidelines, including:\n\nRule 12.5\n\nThe sizeof operator shall not have an operand which is a function parameter declared as \"array of type\"\n\nMISRA C:2012 Amendment 2\n\nMISRA C 2012 Amendment 2 was released in 2020 and adds coverage for C11 core functionality. It adds two new rules. With this amendment, MISRA C:2012 includes 158 rules and 17 directives for a total of 175 guidelines. The new rules are:\n\nRule 1.4\n\nEmergent language features shall not be used\n\nRule 21.21\n\nThe Standard Library function system of <stdlib.h> shall not be used\n\nMISRA C:2012 Amendment 3\n\nMISRA C 2012 Amendment 3 was released in 2022 and adds guidance for C11 and C18 new features previously prevented by Rule 1.4. It adds 24 new rules and 1 new directive. This makes a total of 182 rules and 18 directives, for a total of 200 guidelines.\n\nAdditionally, a number of existing guidelines have been revised together with supporting materials.\n\nThe new rules include further guidance on some of the emergent features previously covered by Rule 1.4, specifically:\n\nRules 8.15-8.17\n\nAlignment of objects (<stdalign.h>)\n\nRules 17.9-17.13\n\nNo-return functions (<stdnoreturn.h>)\n\nRules 23.1-23.7\n\nType generic expressions (_Generic)\n\nRule 1.4 has been updated to remove the guidance on these features provided in Amendment 2.\n\nFurther guidance is provided with:\n\nRule 1.5\n\nObsolescent language features shall not be used\n\nRule 6.3\n\nBit field in unions\n\nRule 7.5\n\nInteger-constant macros\n\nRule 18.9\n\nObject lifetime\n\nRules 21.22-21.23\n\nType generic math macros (<tgmath.h>)\n\nRule 21.24\n\nThe random number generator functions of <stdlib.h>\n\nDirective 4.15\n\nFloating point (including comparisons, NaNs, and infinities)\n\nThe essential type model has been extended to include of essentially complex floating.\n\nMISRA C:2012 Amendment 4\n\nAmendment 4 was released in 2023 and completes guidance for C11 and C18 new features to include multithreading (Rules 22.11 - 22.20) and atomics (updates to various rules). AMD4 adds 19 new rules and directives, with 221 guidelines total.\n\nMISRA C:2023\n\nA new revision of MISRA C:2012 was published in 2023. It is a rollup of all the previous amendments and technical corrigenda and is known as MISRA C:2023. MISRA C:2023 covers C90, C99, and C11/C18. It adds 200 new rules and 21 directives, with 221 guidelines total. MISRA C:2023 is also referred to as MISRA C Third Edition, second revision.\n\nWhat Are Important MISRA C++ Rules? And MISRA C++ Rules With Examples\n\nMISRA C++ is widely used by safety-critical developers.\n\nMISRA C++2008\n\nMISRA C++:2008 was published in 2008. It was written for C++03. There are 228 coding rules, including:\n\nRule 5-0-13\n\nThe condition of an if-statement and the condition of an iteration statement shall have type bool.\n\nMISRA C++:2023 (formerly referred to as MISRA C++:202x)\n\nMISRA C++:2023 is a new standard for use with modern C++ up to C++17 and incorporating AUTOSAR guidelines.\n\nüìï Related Resource: MISRA and AUTOSAR to Unite C++ Coding Guidelines ‚Äî What This Means\n\nHow to Achieve MISRA C and MISRA C++ Compliance?\n\nAchieving MISRA compliance takes knowledge, skill, and the right tools.\n\nHere are seven steps to comply with MISRA:\n\n1. Know the Rules\n\nYou need to know the MISRA coding rules pertinent to which version of C or C++ you‚Äôre using.\n\n2. Check Your Code Constantly\n\nContinuously inspecting your code for violations is the best way to improve quality.\n\n3. Set Baselines\n\nEmbedded systems come with legacy codebases. By setting baselines, you can focus on making sure your new code is compliant.\n\n4. Prioritize Violations Based on Risk\n\nYou could have hundreds or even thousands of violations in your code. That‚Äôs why it‚Äôs important to prioritize rule violations based on risk severity. Some static code analysis tools can do this for you.\n\n5. Document Your Deviations\n\nSometimes there are exceptions to the rule. But when it comes to compliance, every rule deviation needs to be well-documented.\n\n6. Monitor Your MISRA Compliance\n\nKeep an eye on how MISRA compliant your code is. Using a static code analyzer makes this easier by automatically generating a compliance report.\n\n7. Choose the Right Static Code Analyzer\n\nChoosing the right static code analyzer makes everything else easy. It takes care of scanning your code ‚Äî new and legacy ‚Äî for violations. It prioritizes vulnerabilities based on risk.\n\nComplying with MISRA is important for many development teams today. Especially as virtualization rises.\n\nüìï Related Resource: See how an automotive hypervisor achieves MISRA compliance üöó\n\nBut not all MISRA checkers are the same‚Ä¶\n\nüìï Related Resource: How to Compare MISRA Checkers\n\nUsing Helix QAC For MISRA C Rules\n\nHelix QAC finds and reports on violations of MISRA rules and directives in C and C++.\n\nHere's a short demo using Helix QAC with MISRA C:2012 guidelines.\n\nWhy Use Helix QAC for MISRA Compliance?\n\nIndependently certified for use in the development of safety-critical software.\n\nFully documented rule enforcement and message interpretation.\n\nSupplied with extensive example code.\n\nFully configurable rules processing.\n\nCompliance reports for functional safety audits.\n\nHow Embedded Developers Use Helix QAC For MISRA?\n\nSee how leaders in embedded industries ‚Äî automotive, aerospace, and rail ‚Äî use Helix QAC and MISRA."
    }
}