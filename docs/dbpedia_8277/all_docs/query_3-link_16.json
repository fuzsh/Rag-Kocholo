{
    "id": "dbpedia_8277_3",
    "rank": 16,
    "data": {
        "url": "https://talk.tiddlywiki.org/t/tiddlywiki-as-a-note-taking-tool-positive-and-negative-aspects-lets-discuss/7497/31",
        "read_more_link": "",
        "language": "en",
        "title": "Tiddlywiki as a note taking tool - Positive and negative aspects - Lets discuss",
        "top_image": "https://talk.tiddlywiki.org/uploads/default/original/1X/c37924f29560702aa8fa13e684116ac0b7874b20.svg",
        "meta_img": "https://talk.tiddlywiki.org/uploads/default/original/1X/c37924f29560702aa8fa13e684116ac0b7874b20.svg",
        "images": [
            "https://talk.tiddlywiki.org/uploads/default/original/1X/b2a621abb3e5dba3e554bc07ec56a04897e392ca.svg",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/vilc/40/6864_2.png",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/vilc/40/6864_2.png",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/arunnbabu81/40/6160_2.png",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/mark_s/40/3904_2.png",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/offray/40/1254_2.png",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/makiaea/40/2918_2.png",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/justin_h/40/663_2.png",
            "https://talk.tiddlywiki.org/images/emoji/twitter/thinking.png?v=10",
            "https://talk.tiddlywiki.org/user_avatar/talk.tiddlywiki.org/makiaea/40/2918_2.png",
            "https://talk.tiddlywiki.org/uploads/default/original/2X/a/ad9fafc639af23b9fa599bc32e1b5db812e5c9fa.png",
            "https://talk.tiddlywiki.org/uploads/default/original/2X/1/11ed36e42e8e9b53e182fe1e6e024ac5694eb3b5.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mario split this topic"
        ],
        "publish_date": "2023-07-23T02:05:19+00:00",
        "summary": "",
        "meta_description": "Today I came across a digital garden created by Riz aka ibnishak (the creator of Timimi, Tekan and many other TW hacks). Here is a link to a note made by him about  - why he is no longer using TW for his note taking. \nI &hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://talk.tiddlywiki.org/uploads/default/optimized/1X/39026bc4f2982199e99372b6c3c9655d07544b7d_2_32x32.svg",
        "meta_site_name": "Talk TW",
        "canonical_link": "https://talk.tiddlywiki.org/t/tiddlywiki-as-a-note-taking-tool-positive-and-negative-aspects-lets-discuss/7497?page=2",
        "text": "Inability to scale.\n\nInteresting. I used to use a tree-type note taker for 20+ years. I had about 200 “nodes” in that program, each node corresponds to 1 tiddler. Then I found Tiddlywiki. I take notes about many programming languages and tools I have to use, and dozens of projects I work on over the years. So I would have 100-200 tiddlers. I don’t think I would need 30,000 tiddlers. TW works for my use case, so that’s why I use it.\n\nThe TW search facility is much better than in my other note taking app. The first tiddlers it lists are the ones that match the title of the tiddler, which I like.\n\nThe problem with the tree-type note taker is it had to be recompiled to keep up with 64-bit architecture, and support had stopped years before 64 bit compilers existed. With TW it works in any browser. So I don’t have to worry about TW becoming obsolete.\n\nAlso:\n\nIt’s not that hard to upgrade TW when needed.\n\nIt supports the Markdown plugin which I like.\n\nI don’t think TW won’t have to be recompiled if we get to 128 bit architecture.\n\nThanks @vilc for you view point. I had a thought when reading this comment.\n\nIn some ways this is similtaniously true and false, and it comes about due to the versatility of tiddlywiki.\n\nIf you treat tiddlywiki as a platform or compare to a cloud server you can use webdav or node to break the single file model storing media in seperate files. But not using the single file model.\n\nNote that tiddlyhost is not the above, it is cloud delivered single file wikis.\n\nIf you treat tiddlywiki as a single file smart document its has enought capacity if not more, as most single file documents to handle media except perhaps for the most media rich contents. Compare it to word, powerpoint, excel even a combination of these. Like such documents it can be cloned, posted, shared, emailed.\n\nQuite importiantly you do not need any service to host it and can just have local files, only you access, and all for free.\n\nIf we do want to move to the server or cloud platform model, we quickly see a range of divergent solutions, many technical, or with some limitation or other that makes choosing difficult. But for most users the line between “served or single file” is blured, so it is easy to be confused, or make unfair comparisons.\n\nDo Notion and obsidian etc… run on a single file model, without a server and fees? I dont think so.\n\nHaving used TiddlyWiki for more than a decade now and informed by my expierence in Information and Knowledge management, I primarily use a large number of single file wikis and happy with lots of intergration between wikis (I will not detail for brevity).\n\nI have a large complex Single files wiki that ties everything together which does not include much media.\n\nIf I were a “betting man”, I am not, I would think if we could serve TiddlyWiki multifile on PHP or WebDav and permit TiddlerLevel locks (as in Bob) for multi-user, and external files (like upoload plugin) then it would be much easier to set up and deploy scalable internet facing cloud and multi-user team solutions.\n\nThere would be nothing holding TiddlyWiki back.\n\nUnfortunatly the server side is dominated by Node, which is difficult to get Internet facing, and secure.\n\nSince beyond a single file wiki there are so many platforms and operating systems etc… involved, the community ends up fractured and divergent and its hard to coral people back towards a somewhat universal hosting solution.\n\nJust my personal perspective, and hopefruly a direction to move.\n\nIt’s is good to know that, despite the critical approach to TW, Riz is committed to maintain Timimi, as it’s one of the easiest path to storing your TW locally and the route we follow here after having a public wiki in TiddlyHost.\n\nRegarding Riz’s criticisms I don’t share the starting premise: the idea of wanting to have single TW with everything on it as an stressing point in my use cases. And I found splitting my wikis by topic and audience a powerful knowledge management mechanism (personal private/public, our table role playing group, the data activism grassroots community, my general classes, wiki/hipertext learning, among others).\n\nThat being said, I share some of the criticisms. I share the one regarding the default UI feeling kind of old, but that have been addressed in several theme and ui tweaking discussions, so I will address other two.\n\nNodeJS seems overkilling when HTML files are not enough\n\nThere are lighter self containd alternatives like TW5-Server. But, part of the JS culture creates this maximalist approaches (if plain JS is not enough, go with the overcomplex framework of the week, headless full browser Electron or huge NodeJS and its dependencies). And while each culture has its caveats and advantages, I think that, as a TW community, we should explore and make more visible more minimalist, non JS nor full blown solutions. With TiddlyWikiPharo we are trying that approach, and because we use Nim for some external optimizations, maybe we’ll use TW5-Server in the future.\n\nOperators/filters knowledge seems too specific and difficult to recontextualize elsewhere\n\nI like the way TW created a continuum that blurs the distinction between user and developer, instead of those high barriers being put in other wiki software, where the jump between being a “content creator” and a “functionality creator” is pretty big. In contrast, in TW you go from formating wiki text, to macros, to filters and extra operators in a mostly pretty fluent way. I have seen that with some of my learners in my classes and workshops.\n\nThat being said, the more complex the filters and customizations go, the more you need the particular ways of TW, knowing that they will not be transferable elsewhere which, at least in my case, make me practice them in pretty constrain settings and do most of my data manipulation in Pharo (as shown in the data stories about migrations from Hugo and from Wordpress to TW).\n\nWhat I would like is to be able to extend TW in several languages, once its data has been exposed in JSON. This is the approach we use in TiddlyWikiPharo by parsing (with Nim optimizations) the HTML file, looking for the JSON tiddlers. But something easier should be provided by default, kind of the /tiddlers.json address provided by TiddlyHost, if we want an easier cross-language extension mechanism that doesn’t require a full NodeJS server behind to work, but it is provided by the default HTML single file (because it already knows how to store and read itself as JSON).\n\nExposing the JSON storage as a easy prepackaged default will open possibilities to use TW not only from external languages and frameworks beyond JS/NodeJS (as we do with Pharo and Nim), but also from “internal” ones, which would create more extension mechanisms to traverse/blur the gap between content and functionality creators.\n\nFor example, I imagine adding a Fengari plugin included in some stand alone version of TW that makes TW extensible from Lua using some kind of Lua powered domain specific language (DSL) for tiddlers’ querying, composing, building and styling. The language can be similar to the one used in Typst “hashtag” functions but using Lua tables/functions to query and compose tiddlers. So a functionality like the one in this filter, could be expressed in an imaginary Lua DSL:\n\n--|| all() |> select() |> taggedAs(\"member\") |> ramdomized() |> styled(\"MemberTemplate\") --|\n\nThe user would loose the compactness of <$list filter=\"[tag[member]choose-random:all[]]\"> of the initial tiddler example, in this imaginary Lua DSL (influenced by Elixir’s pipe operator). But, by using functions to compose a tiddler’s query, randomize its result and injecting that into view, s/he would gain exposure to functional programming concepts (listed below), while keeping them simple in an easy to learn language. In this way, the usage of alter filters outside TiddlyWiki is high, as it is bringing back knowledge outside of web programming (e.g. from the diverse Lua ecosystem) into TW.\n\nFor example, in the previous code, the all() |> select () could be replaced by selectAll(), which would be defined in some “Lua tiddler macro” as something like:\n\nfunction select(reach) if reach == \"all\" then return selectAll() end -- ... other selection cases follow end function selectAll() return select(all()) end\n\nAnd so, filters could be an example of DSLs, pipe operators and functions, function composition and a bridge to the Lua language, that would have a gentle learning curve, as we do with TW operators today, but with more reusability potential.\n\nOf course, this is easier said than done and there is a long path ahead to follow this, including parser changes to support other languages and DSLs. But this could be easily started by improving the exposing of the JSON storage.\n\nAs a working conclusion…\n\nWhile TW’s criticisms and their validity depend on the context where they arise and despite TW providing a fluent experience when is “used as intended” (and its many intended uses behind), it is easily stressed when is not: large wikis, complex theming, non JS or Node. Some of the criticisms can be addressed, kind of swiftly, by exposing TW storage internals so more languages and frameworks, avoiding the incidental current complexity and lack of recontextualization that is behind many of such criticisms.\n\nHow to traverse and open the possibilities, as a community, is still an open question, as more experimentation is needed (I’ll do my part by sharing my experiences of extending TW mostly outside of TW).\n\nPs: The code for the imaginary Lua TiddlyWiki DSL could also be written as the equivalent:\n\n--|| taggedAs(\"member\") |> ramdomized() |> styled(\"MemberTemplate\") --|\n\nwhich shows that once a sound extension DSL have been implemented, economy of language and composition becomes easier… of course is even easiest in the plane of imaginary extension DSL and details are in the implementation.\n\nAlthough I haven’t studied the linked material in depth I can attribute my own experiences. For context I searched for several decades for a journaling system. I tried things like OmniFocus, TaskWarrior, Things, and even Markdown files. Nothing stuck. Nothing I did kept me active on the system daily. It wasn’t till I started using TW as my daily note-taking and to do tracking system at my current job did it stick. For me TW is a fantastic tool that I have depended on every day for four years consistently.\n\nThe points the OP is making seem pedantic to me. Though technically correct in their observations I feel they don’t apply to my own experiences and needs of a daily notes system. Perhaps these concerns would be more noticeable to me if I were to use TW in a different kind of note taking (college classes, book research)—but in this case I think I would not associate TW as the tool for the job as my outcome might likely be more a text book then a wiki—I mean there is MediaWiki for that kind of scale and seriously who is taking notes at the scale of Wikipedia?!\n\nI also take issue at the idea that notes I take on a daily basis would have need to back-link and full text search so far back as to need 30K tiddlers! I figure in about five years of making tiddlers daily I will move the > 5 years ones to an archive. Easy under Node as they are all text files on disk. Speaking of which if I need to full text search that I’d either use grep or feed the text files into Elastic Search.\n\nI feel like they were expecting TW to solve more problems then it is designed to do. TW works well for me and I am ever thankful it is available to me.\n\nI’ve been using TiddlyWiki since 2017 and my understanding it was quite basic to begin with but I was able to get a lot of use out of it. Grok helped my understanding a lot though I’ve only partially gone through the course. There gets a point where I struggled with it and my brain kept glazing over. (I blame tiredness and my own lack of programming understanding more than anything else on this front.) I’ve tried going back to it again and plan to again in the future. I’ve already got a lot out of it though and more from checking this forum daily for problems/ solutions that may be of use and for ideas of what else I can do with my various wiki instances.\n\nI don’t use TiddlyWiki as a note taking tool though I did attempt to use it this way when I first found it. I have other tools at hand that work well for note taking that are quick, easily accessible and not so easily lost if I accidently refresh my screen. I do use it as a note keeping tool though which I thinki is an important distinction. Notes taken by other methods are not so easily found after and spread out through various different locations. If previously written notes have been found important or useful enough to keep for future reference I would take the time to draft some tiddler articles based on them. I’ve also adapted some documentation into the wiki to make the information more accessible.\n\non “5. issues with search” i really like @clsturgeon 's rsort e.g. Auto complete with sorting by relevance and am using it with command palette after reading @etardiff 's Navigating to a missing tiddler with the Command Palette? - #7 by etardiff\n\ni can’t access https://philosopher.life/ to read the “audit note by the author” (raised in “1. inability to scale”, which implies Riz’s note is from a while back) but i suffered data loss until i realised that browsers by default will cache (single-file) TW, and started to only use non-cached “private” windows/browser settings to always load the latest version instead of a cached version that might not contain my latest changes. if you haven’t fallen foul of this particular scenario, you will likely never realise it happened, and it’s super difficult to diagnose/appreciate without a particular set of circumstances.\n\nbut any saving system for any notetaking system has gotchas (e.g. cloud saving), this is just one that happened to affect my usage of tiddlywiki and happily is now solved. i’m not sure if this is the issue that affected the “audit note by the author” as that note is not accessible to me, but it could be a candidate.\n\ni agree with @Mark_S and others, i also very highly appreciate TW’s semi-“independence” of being able to run a “simple” long-term reliable tool by decent authors, which is a point not mentioned in Riz’s note. a commercial product brings a commercial bias, which carries substantial negative risk that we likely can’t evaluate."
    }
}