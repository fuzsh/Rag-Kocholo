{
    "id": "dbpedia_8277_0",
    "rank": 34,
    "data": {
        "url": "https://fossies.org/linux/task/INSTALL",
        "read_more_link": "",
        "language": "en",
        "title": "Taskwarrior: INSTALL",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://fossies.org/warix/forest1.gif",
            "https://fossies.org/warix/forest2.gif",
            "https://fossies.org/delta_answer_10.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "\"Fossies\" - the Fresh Open Source Software Archive\n\nMember \"task-3.0.2/INSTALL\" (23 Apr 2024, 5995 Bytes) of package /linux/misc/task-3.0.2.tar.gz:\n\nAs a special service \"Fossies\" has tried to format the requested text file into HTML format (style: standard) with prefixed line numbers. Alternatively you can here view or download the uninterpreted source code file. See also the last Fossies \"Diffs\" side-by-side code changes report for \"INSTALL\": 2.6.2_vs_3.0.0.\n\n1 Installation Instructions 2 ------------------------- 3 4 Please follow the instructions below to build and install Taskwarrior from 5 source. 6 7 8 Dependencies 9 ------------ 10 11 You will need the CMake 3.0+ build system installed in order to build Taskwarrior 12 from source. More information on CMake can be obtained at https://cmake.org 13 14 You will also need: 15 - make 16 17 You will need a C++ compiler that supports full C++17, which includes: 18 - gcc 7.1 (released 2017-05-02) 19 - clang 5.0 (released 2017-09-07) 20 21 You will need the following libraries: 22 - libuuid (not needed for OSX) 23 24 25 Basic Installation 26 ------------------ 27 28 Briefly, these shell commands will unpack, build and install Taskwarrior: 29 30 $ tar xzf task-X.Y.Z.tar.gz [1] 31 $ cd task-X.Y.Z [2] 32 $ cmake -DCMAKE_BUILD_TYPE=release . [3] 33 $ make [4] 34 $ sudo make install [5] 35 $ cd .. ; rm -r task-X.Y.Z [6] 36 37 These commands are explained below: 38 39 1. Unpacks the source tarball. This creates the directory task-X.Y.Z, 40 containing all the code. 41 42 2. Change directory to the root of the distribution. 43 44 3. Invokes CMake to scan for dependencies and machine-specific details, then 45 generate the makefiles. Requests an optimized build, which will run faster 46 and be more compact. This may take a minute. 47 48 4. Builds Taskwarrior. This may take a minute. 49 50 5. Installs the program, documentation and other data files. 51 52 6. Removes the temporary directory. 53 54 55 Build and configurations options 56 -------------------------------- 57 58 You can customize the configuration run with cmake variables. This will modify 59 the installation process: 60 61 To change the installation directory you use the following configuration 62 variable: 63 64 $ cmake -DCMAKE_INSTALL_PREFIX=<path-to-installation-dir> . 65 66 cmake configuration variables are applied with the -D option and consist of a 67 <name> and a <value>: 68 69 $ cmake -D<name>=<value> . 70 71 Four more variables can customize the installation process. The following table 72 lists them and their defaults plus the CMAKE_INSTALL_PREFIX: 73 74 CMAKE_INSTALL_PREFIX /usr/local 75 TASK_BINDIR bin 76 TASK_DOCDIR share/doc/task 77 TASK_RCDIR share/doc/task/rc 78 TASK_MAN1DIR share/man/man1 79 TASK_MAN5DIR share/man/man5 80 81 The corresponding TASK_* variables will be combined with CMAKE_INSTALL_PREFIX to 82 get absolute installation directories: 83 84 CMAKE_INSTALL_PREFIX/TASK_BINDIR /usr/local/bin 85 CMAKE_INSTALL_PREFIX/TASK_DOCDIR /usr/local/share/doc/task 86 CMAKE_INSTALL_PREFIX/TASK_RCDIR /usr/local/share/doc/task/rc 87 CMAKE_INSTALL_PREFIX/TASK_MAN1DIR /usr/local/share/man/man1 88 CMAKE_INSTALL_PREFIX/TASK_MAN5DIR /usr/local/share/man/man5 89 90 91 Uninstallation 92 -------------- 93 94 There is no uninstall option in CMake makefiles. This is a manual process. 95 96 To uninstall Taskwarrior, remove the files listed in the install_manifest.txt 97 file that was generated when you built Taskwarrior. 98 99 100 Taskwarrior Build Notes 101 ----------------------- 102 103 Taskwarrior has dependencies that are detected by CMake in almost all cases, but 104 there are situations and operating systems that mean you will need to offer a 105 little help. 106 107 If Taskwarrior will not build on your system, first take a look at the Operating 108 System notes below. If this doesn't help, then go to the Troubleshooting 109 section, which includes instructions on how to contact us for help. 110 111 112 Operating System Notes 113 ---------------------- 114 115 Cygwin 116 If 'make install' fails when writing to the /usr/local/share/ directory, 117 this may be because your current login doesn't have permission to write 118 to the Windows directory containing your Cygwin installation. Either 119 login to Windows as an Administrator and try the 'make install' process 120 again, or reinstall Cygwin under your normal Windows login. 121 122 123 Darwin, 32bit 124 Taskwarrior needs to be built from source, and use this configure command: 125 126 cmake -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_EXE_LINKER_FLAGS=-m32 . 127 128 See: 129 https://taskwarrior.org/issues/817 130 https://stackoverflow.com/questions/3261909/build-32bit-on-64-bit-linux-using-a-configure-script 131 https://stackoverflow.com/questions/2617508/cmake-gcc-cuda-and-m32-wtf 132 https://stackoverflow.com/questions/6077414/cmake-how-to-set-the-ldflags-in-cmakelists-txt 133 134 135 OpenBSD 136 In order to build Taskwarrior 2.4.2+, you might need to install a newer GCC 137 version from ports or packages. 138 139 Afterwards, run 140 cmake -DCMAKE_CXX_COMPILER=eg++ . 141 142 and build normally. 143 144 See: https://github.com/GothenburgBitFactory/taskwarrior/issues/1605 145 146 WASM 147 Using the Emscripten compiler, you can achieve it like this: 148 149 cmake -DCMAKE_CXX_COMPILER=emcc -DCMAKE_BUILD_TYPE=release -DENABLE_WASM=ON \\ 150 -DCMAKE_EXE_LINKER_FLAGS=\"-m32 -s NO_DYNAMIC_EXECUTION=1 -s WASM=1 -s NO_EXIT_RUNTIME=1 -s INVOKE_RUN=0\" \\ 151 -DCMAKE_CXX_FLAGS_RELEASE=\"-O2 -m32\" 152 153 This will produce an optimized WASM with a main() that is callable multiple times. 154 155 Troubleshooting 156 --------------- 157 158 If you've recently made changes to dependencies (by reinstalling them, for 159 example) be sure to rerun 'cmake .' before trying to execute 'make' again. 160 161 CMake will run and locate all the necessary pieces for the build, and create 162 a Makefile. There may be errors and warnings when running CMake, or there 163 may be compiler errors and warnings when running 'make'. Sometimes you will run 164 CMake with no reported problems, and the build will fail later. This is 165 almost always because CMake is mistaken about some assumption. 166 167 If a build does not succeed, please send the contents of the 'CMakeCache.txt' 168 and 'CMakeFiles/CMakeOutput.log' files to support@gothenburgbitfactory.org. 169 170 If CMake runs but Taskwarrior does not build, please send the contents of the 171 above files as well as a transcript from the build, which is not written to a 172 file and must be captured from the terminal. 173 174 ---"
    }
}