{
    "id": "dbpedia_8277_3",
    "rank": 48,
    "data": {
        "url": "https://forum.sailfishos.org/t/rust-howto-request/3187/35",
        "read_more_link": "",
        "language": "en",
        "title": "Rust Howto (Request)",
        "top_image": "https://forum.sailfishos.org/uploads/db4219/original/1X/f0e9e9fd3e6f8fe34a11f92dea2f4737e4a26941.png",
        "meta_img": "https://forum.sailfishos.org/uploads/db4219/original/1X/f0e9e9fd3e6f8fe34a11f92dea2f4737e4a26941.png",
        "images": [
            "https://forum.sailfishos.org/uploads/db4219/original/1X/9104e9e3beaa954b4bf9843639568b35ce3952f1.png",
            "https://forum.sailfishos.org/images/emoji/twitter/wink.png?v=9",
            "https://forum.sailfishos.org/user_avatar/forum.sailfishos.org/flypig/40/24_2.png",
            "https://forum.sailfishos.org/letter_avatar_proxy/v4/letter/m/ba8739/40.png",
            "https://forum.sailfishos.org/letter_avatar_proxy/v4/letter/m/ba8739/40.png",
            "https://forum.sailfishos.org/uploads/db4219/original/1X/c2911d91c1567acaf78af4212b7669f2f61f67c1.png",
            "https://forum.sailfishos.org/uploads/db4219/original/1X/10f2d759dce6ea753e1e0b2bf9dc52b57a2f433b.png",
            "https://forum.sailfishos.org/uploads/db4219/optimized/2X/1/1639e57a352585c7f7b4aa3341f59635b74116c8_2_690x149.png",
            "https://forum.sailfishos.org/uploads/db4219/original/2X/f/f4e7c09086d5b84deef7b3a955f102d06a2e611d.png",
            "https://forum.sailfishos.org/letter_avatar_proxy/v4/letter/t/a88e4f/40.png",
            "https://forum.sailfishos.org/user_avatar/forum.sailfishos.org/vige/40/145_2.png",
            "https://forum.sailfishos.org/letter_avatar_proxy/v4/letter/v/898d66/40.png",
            "https://forum.sailfishos.org/letter_avatar_proxy/v4/letter/m/ba8739/40.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-08-06T19:20:45+00:00",
        "summary": "",
        "meta_description": "With 3.4 rust support was announced, but I couldn’t find any documentation on how to get started with rust for sailfish. I understand that probably many things are not yet figured out or subject to change. \nThere is whis&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://forum.sailfishos.org/uploads/db4219/optimized/1X/f0e9e9fd3e6f8fe34a11f92dea2f4737e4a26941_2_32x32.png",
        "meta_site_name": "Sailfish OS Forum",
        "canonical_link": "https://forum.sailfishos.org/t/rust-howto-request/3187?page=2",
        "text": "Thanks, it is indeed faster without -j 1. I updated it.\n\nHi @R1tschY, thanks for the project example!\n\nI get this when building for SFOS 3.4 ARM:\n\n+ CARGO_INCREMENTAL=0 + cargo build --release --target-dir=target --locked --manifest-path /home/vlad/Projects/harbour-rust-example/rpm/../Cargo.toml Compiling proc-macro2 v1.0.24 Compiling memchr v2.3.3 Compiling unicode-xid v0.2.1 Compiling syn v1.0.45 Compiling lazy_static v1.4.0 Compiling regex-syntax v0.6.20 Compiling cc v1.0.61 Compiling byteorder v1.3.4 Compiling if_rust_version v1.0.0 Compiling pkg-config v0.3.19 Compiling thread_local v1.0.1 error[E0463]: can't find crate for `unicode_xid` --> /home/mersdk/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.24/src/fallback.rs:16:5 | 16 | use unicode_xid::UnicodeXID; | ^^^^^^^^^^^ can't find crate error: aborting due to previous error\n\nAny advice? I did added the rust package in Tools->Options->Sailfish OS->Build Engine->Manage build targets->Manage packages…\n\nI have no idea how this can happen. Did you try to cleanup and compile again? Maybe it is a concurrency problem.\n\n“Build Engine->Manage build targets->Manage packages…” is not needed, because the build dependencies rustc and cargo are installed automatically. But should do no harm.\n\n@R1tschY maybe it would make sense to add a few more components to the example.\n\nA two-paged application with a few components and layouts would be nice!\n\nEdit: sorry just noticed this is basically there (thats happening when you reply very long after looking into something…) I’ll look into it again and check what I encounter when I’m trying to build something more complex\n\nHello,\n\nFirst, sorry for the necromancy (raising thread out of the dead)\n\nThanks all for this thread that was very informative about how to develop with the recent Rust addition.\n\nI have faced nearly all issues in this thread and have some answers to give too !\n\nIt seems that the VirtualBox based SDK is unable to build rust correctly. I have seen the “crate not found error” appearing. This doesn’t appear with Coderus’s docker images\n\nTo build i486 Rust packages, you need to actually install Rust in the build engine. So you should run something like\n\nsudo zypper in rust cargo # Then install it in sb2, see below\n\nDue to the cross compilation features of scratchbox, it’s dangerous to install gcc inside the target. You might want to use some hacks like\n\nsb2 -R zypper in --download-only -y rust cargo && \\ sb2 -R rm $(sb2 find /var/cache/zypp/packages/jolla/oss/armv7hl/ -name cpp-*.rpm) && \\ sb2 -R rm $(sb2 find /var/cache/zypp/packages/jolla/oss/armv7hl/ -name gcc-*.rpm) && \\ sb2 -R rpm -i --nodeps $(sb2 find /var/cache/zypp/packages/jolla/oss/armv7hl/ -name *.rpm)\n\nie: download the packages, remove cpp and gcc RPM and install the rest.\n\n(Also note the absence of wildcards and the use of find, wildcards cannot be propagated through sb2)\n\nIt seems to me the Rust in the current SDK is way to old since many applications does not compile. Including my new planned Sailserver. I also tried wisperfish with the default installed Rust and it failed.\n\nThen I tried to install GitHub - sailfishos/rust after I succesfully built packages with mb2 command.\n\nBut now I am stuck how I install those packages in the toolchain using sb2 -t SailfishOS-latest-aarch64 zypper -p . install rust cargo # (-p standing in RPMS catalog btw) failed cause it expects root. But if run sb2 as root sb2 fails to find the target for some unknown reason. Can someone give a hint how to install local rpm packages in a sysroot in the builder? I also tried rpm install but then got another error about rpm.lock file etc…\n\nAre you using the Platform SDK (sfossdk) or the Application SDK (sfdk)? I’m going to assume you’re using sfdk, but if that’s not the case then you’ll need to adjust the following. Also, are you using snapshots? This is important because installing into a target doesn’t necessarily make a package available in a snapshot. To check run sfdk config and see whether snapshot is set.\n\nIf you have a local rpm package that you want to install to a target, one way to do it is like this:\n\nsfdk engine exec sb2 -t <target> -R -m sdk-install rpm -U <file.rpm>\n\nThe -R -m sdk-install part is what gives you the root access you need.\n\nIf you’re using snapshots you should avoid installing anything into the target like this, since it will mean an important benefit of using snapshots – knowing whether you’ve captured all of the dependencies – is lost. So if you have snapshots enabled you should install into the snapshot instead. The easiest way to find the name of the snapshot in use is to do a build. The snapshot name is output right at the start, like this:\n\nTaking snapshot 'SailfishOS-4.1.0.24-armv7hl.mb2.2LJ' of 'SailfishOS-4.1.0.24-armv7hl' target...\n\nIn this case you’d change the install command to the following:\n\nsfdk engine exec sb2 -t SailfishOS-4.1.0.24-armv7hl.mb2.2LJ -R -m sdk-install rpm -U <file.rpm>\n\n(i.e. use the snapshot name instead of the target name).\n\nOne other thing you could consider is using a shared output directory (see sfdk --help-all and search for SHARED), since in this case sfdk will automatically search the output directory for any build dependencies.\n\nPlease do share your experiences with Sailserver and rust, it’d be interesting to hear how things progress.\n\nStill dont get it.\n\nsb2 -t SailfishOS-latest-aarch64 -m sdk-install -R rpm --install rust-1.52.1+git1-1.aarch64.rpm cargo-1.52.1+git1-1.aarch64.rpm package rust-1.52.1+git1-1.aarch64 is already installed package cargo-1.52.1+git1-1.aarch64 is already installed [mersdk@8924e8b8daed RPMS]$ sb2 -t SailfishOS-latest-aarch64 rustc -V rustc 1.44.0-dev\n\nusing sfdk engine exec in the default sfos sdk gave same result.\n\nIt simply does not pickup the correct rustc/cargo version and makes it impossible to compile “moderner” rust applications.\n\nI’m not sure. Could your package be installing to a different path? Maybe compare the outputs from these:\n\n$ sfdk engine exec sb2 -t SailfishOS-latest-aarch64 whereis rustc rustc: /usr/bin/rustc $ sfdk engine exec sb2 -t SailfishOS-latest-aarch64 rpm -fq /usr/bin/rustc rust-1.44.0+git10-1.4.1.jolla.aarch64 $ rpm -qlp rust-1.52.1+git1-1.aarch64.rpm | grep rustc ...\n\nCould you share your built rust package? I can try it out here.\n\nOk the thing is that sb2 -t SailfishOS-latest-aarch64 will install it in the sysroot eg: srv/mersdk/targets/SailfishOS-latest-aarch64. When thinking of it I want install it as a “crosscompiler” eg in the /src/toolings/usr/bin because that is what sb2 -t ... cargo build will execute when build. And that’s why it points to the old compiler when doing sb -t SailfishOS-latest-aarch64 cargo -V. Now I have to find out how to install the RPM inside the srv/mersdk/toolings and it should probably use the “hosts” rustc and not the aarch64 one that I built with mb2 command…\n\nNot sure if helpful (most of this is over my head…), but I installed rust directly from here - Install Rust - Rust Programming Language - and used it to build viu, and everything good…\n\nIn that case you probably just need to install the (x86) rpm package like this:\n\nsfdk engine exec sudo rpm -U <file.rpm>\n\nNew issues. Can’t build rpm for i486 host of the :\n\n# local fork of https://github.com/sailfishos/rust.git sfdk engine exec mb2 -t SailfishOS-4.1.0.24-i486 -s rust.spec build + PATH=/opt/cross/bin/:/home/mersdk/.mb2/wrappers/rust:/home/mersdk/.mb2/user-wrappers/rust:/usr/local/bin:/bin:/usr/bin + ./configure --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --includedir=/usr/include --libdir=/usr/lib --libexecdir=/usr/libexec --localstatedir=/var --sharedstatedir=/var/lib --mandir=/usr/share/man --infodir=/usr/share/info --disable-option-checking --libdir=/usr/lib --build=i686-unknown-linux-gnu --host=i686-unknown-linux-gnu --target=i686-unknown-linux-gnu,armv7-unknown-linux-gnueabihf,aarch64-unknown-linux-gnu --python=python3 --local-rust-root=/home/mikael/MyStuff/src/rust/rust-1.52.1-i686-unknown-linux-gnu/usr --enable-local-rebuild --enable-llvm-link-shared --enable-ccache --enable-optimize --disable-docs --disable-compiler-docs --disable-jemalloc --disable-rpath --disable-codegen-tests --disable-verbose-tests --debuginfo-level=0 --debuginfo-level-std=2 --disable-debuginfo --disable-debuginfo-only-std --disable-debuginfo-tools --disable-debuginfo-lines --enable-extended --enable-vendor --set rust.codegen-units-std=1 --tools=cargo --llvm-root=/usr/ --enable-parallel-compiler --set target.i686-unknown-linux-gnu.cc=/usr/bin/cc --set target.i686-unknown-linux-gnu.ar=/usr/bin/ar --set target.armv7-unknown-linux-gnueabihf.cc=/opt/cross/bin/armv7hl-meego-linux-gnueabi-cc --set target.armv7-unknown-linux-gnueabihf.ar=/opt/cross/bin/armv7hl-meego-linux-gnueabi-ar --set target.aarch64-unknown-linux-gnu.cc=/opt/cross/bin/aarch64-meego-linux-gnu-cc --set target.aarch64-unknown-linux-gnu.ar=/opt/cross/bin/aarch64-meego-linux-gnu-ar --set build.verbose=2 /var/tmp/rpm-tmp.8hqBY8: line 65: ./configure: No such file or directory error: Bad exit status from /var/tmp/rpm-tmp.8hqBY8 (%build) Bad exit status from /var/tmp/rpm-tmp.8hqBY8 (%build)\n\nCan you share the source you’re attempting to build (including the spec file)? I think this would be a big help in understanding what might be happening.\n\nEdit: Ah, sorry, I see in the comment where it’s coming from. I’ll give it a go myself.\n\nIt looks like the git-submodule branch is better set up for building with the sfdk. You’ll also need git lfs installed, and on the first run will need to run the prepare step to apply the patches. Something like this seems to work for me (it’s still running, so not fully tested), You’ll probably need to amend the steps for your set up.\n\n# Set up git large file storage (this on Ubuntu) sudo apt install git-lfs git lfs install # Clone the repo and submodules git clone https://github.com/sailfishos/rust.git cd rust git checkout git-submodule git submodule update --init cd rust git submodule update --init cd .. # Initial build with prepare step sfdk config --session --push target SailfishOS-4.1.0.24-i486 sfdk build -p # Subsequent builds sfdk config --session --push target SailfishOS-4.1.0.24-i486 sfdk build\n\nWithout more detail it’s hard to help I’m afraid. Which patch didn’t apply, and what was the error message? They apply fine for me here.\n\nI forgot run 2nd git submodule inside the subdir. I try again…\n\nOkey after some more testing I realized this submodule branch is not the solution since that branch is rust 1.44.\n\nI also tried this in master branch:\n\nsfdk build -p Fatal: No spec or yaml file found in './rpm/'\n\nSo, I’ve been toying a lot with Rust and build systems lately. The cleanest that I could find so far uses either my version of Rust 1.52 (if you use build scripts or target-conditional dependencies, this is needed), or the 1.52 that’s currently included with the tooling and targets of SailfishOS 4.2.0.19EA.\n\nI’ve moulded and kneaded the spec and yaml files of a standard app such that it calls cargo build. I have worked on qmetaobject-rs (also this), such that it still works on Qt 5.6. I started a crate sailo-rs which wraps around sailfishapp. Combining all of these (and maybe also qmeta-async, if that’s your kinda kink — it certainly is mine) means you can actually build Sailfish applications in about 130 lines of Rust. As an example to that, I present you:\n\nIn order to build it, you’ll need the build instructions for Whisperfish’ SFDK branch, which should soon™ hit master. It involves only installing the custom Rust version (in fact, custom Cargo version), which Jolla will hopefully fix in the 4.3 or 4.4-series.\n\nIt integrates so well now, that you can even use QtCreator to build it. It contains a .pro file, and you only need to fiddle a bit with the build settings: you need to disable the qmake and make steps, and add sfdk build.\n\nThe run-configuration can look like this:\n\nAs of there, QtCreator will happily do many things that you’d do on a daily basis. I’ve even seen qmlive work, more or less!\n\n(gonna try to answer some ill-answered or unanswered questions now)\n\nWe seem to have the same experience when building Whisperfish now: the VBox version has problems finding downloaded crates, the Docker version runs just fine.\n\n-j 1 is also used in Whisperfish. There’s a bug in (presumably) SB2, which gets cargo stuck in a futex when running with “too high level of parallelism”. Eventually, it probably will also lock up on -j 1, but it seems to deter for now. If dropping the parallelism flag works for you, you could drop it locally. I’d still keep it in CI. I think @flypig may be able to give more context.\n\nYou’re probably running the VirtualBox SDK, which seems to behave badly w.r.t. the SB2 tooling-based cross compilation. @direc85 and me are trying to figure out, but it seems like the Docker-based SDK works better.\n\nI use these two scripts to get Rust in a tooling and target:\n\nbuild.sh (compiles the actual Rust and Cargo):\n\n#!/bin/sh -ex ARCHS=\"i486 armv7hl aarch64\" cd rust for arch in $ARCHS; do rpmbuild -bb rust.spec --define \"_target_cpu $arch\" done cd ..\n\ninstall.sh (Creates the stub compilers and repackages the stdlib):\n\n#!/bin/sh -ex ARCHS=\"i486 armv7hl aarch64\" TOOLING=SailfishOS-4.1 # TARGET=SailfishOS-3.4-on-4.1 TARGET=SailfishOS-4.1 VERSION=1.52.1+git1-1 sudo zypper install ~/rpmbuild/RPMS/i486/rust* ~/rpmbuild/RPMS/i486/cargo* || echo zypper error cd cross rpmbuild -bb rust-cross-aarch64.spec rpmbuild -bb rust-cross-armv7hl.spec cd .. mkdir -p /srv/mer/toolings/$TOOLING/tmp/rust-rpms/ for f in ~/rpmbuild/RPMS/i486/rust* ~/rpmbuild/RPMS/i486/cargo*; do cp $f /srv/mer/toolings/$TOOLING/tmp/rust-rpms/ done sdk-manage tooling package-install $TOOLING /tmp/rust-rpms/{rust-std-static-i686-unknown-linux-gnu-$VERSION.i486.rpm,rust-std-static-armv7-unknown-linux-gnueabihf-$VERSION.i486.rpm,rust-std-static-aarch64-unknown-linux-gnu-$VERSION.i486.rpm,rust-$VERSION.i486.rpm,cargo-$VERSION.i486.rpm} rm -rf /srv/mer/toolings/$TOOLING/tmp/rust-rpms/* for arch in $ARCHS; do sdk-manage target package-remove $TARGET-$arch rust cargo rust-std-static-i686-unknown-linux-gnu rust-std-static-aarch64-unknown-linux-gnu rust-std-static-armv7-unknown-linux-gnueabihf || echo continuing done for arch in $ARCHS; do sdk-manage target package-install $TARGET-$arch ~/rpmbuild/RPMS/$arch/* done\n\nThese assume that you have https://github.com/sailfishos/rust and https://github.com/sailfishos/rust-cross in directories next to eachother, respectively rust and cross. I run these scripts inside the Platform SDK, not in mb2 (these packages used to build in mb2, but Jolla seems to have changed their strategy for the better here).\n\nOn SDK 4.1, you can use the repo on my home server, which hosts the patched cargo: ssu ar https://nas.rubdos.be/~rsmet/sailfish-repo/ rubdos. These do not have bumped version numbers, so you have to fiddle a bit with zypper. If someone has a good suggestion on how to get a personalised version number that will get upped by Jolla, let me know."
    }
}