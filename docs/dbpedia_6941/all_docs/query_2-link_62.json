{
    "id": "dbpedia_6941_2",
    "rank": 62,
    "data": {
        "url": "https://playwright.dev/docs/trace-viewer",
        "read_more_link": "",
        "language": "en",
        "title": "Trace viewer",
        "top_image": "https://repository-images.githubusercontent.com/221981891/8c5c6942-c91f-4df1-825f-4cf474056bd7",
        "meta_img": "https://repository-images.githubusercontent.com/221981891/8c5c6942-c91f-4df1-825f-4cf474056bd7",
        "images": [
            "https://playwright.dev/img/playwright-logo.svg",
            "https://playwright.dev/img/playwright-logo.svg",
            "https://github.com/microsoft/playwright/assets/13063165/948b65cd-f0fd-4c7f-8e53-2c632b5a07f1",
            "https://github.com/microsoft/playwright/assets/13063165/b04a7d75-54bb-4ab2-9e30-e76f6f74a2c8",
            "https://github.com/microsoft/playwright/assets/13063165/7168d549-eb0a-4964-9c93-483f03711fa9",
            "https://github.com/microsoft/playwright/assets/13063165/daa8845d-c250-4923-aa7a-5d040da9adc5",
            "https://github.com/microsoft/playwright/assets/13063165/95498580-f9dd-4932-a123-c37fe7cfc3c2",
            "https://github.com/microsoft/playwright/assets/13063165/de621461-3bab-4140-b39d-9f02d6672dbf",
            "https://github.com/microsoft/playwright/assets/13063165/e9ef77b3-05d1-4df2-852c-981023723d34",
            "https://github.com/microsoft/playwright/assets/13063165/4107c08d-1eaf-421c-bdd4-9dd2aa641d4a",
            "https://github.com/microsoft/playwright/assets/13063165/0a3d1671-8ccd-4f7a-a844-35f5eb37f236",
            "https://github.com/microsoft/playwright/assets/13063165/82ab3d33-1ec9-4b8a-9cf2-30a6e2d59091",
            "https://github.com/microsoft/playwright/assets/13063165/4386178a-5808-4fa8-9436-315350a23b04",
            "https://user-images.githubusercontent.com/13063165/194577918-b4d45726-2692-4093-8a28-9e73552617ef.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Introduction",
        "meta_lang": "en",
        "meta_favicon": "/img/playwright-logo.svg",
        "meta_site_name": "",
        "canonical_link": "https://playwright.dev/docs/trace-viewer",
        "text": "Playwright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has run. Traces are a great way for debugging your tests when they fail on CI. You can open traces locally or in your browser on trace.playwright.dev.\n\nIn the Actions tab you can see what locator was used for every action and how long each one took to run. Hover over each action of your test and visually see the change in the DOM snapshot. Go back and forward in time and click an action to inspect and debug. Use the Before and After tabs to visually see what happened before and after the action.\n\nSelecting each action reveals:\n\naction snapshots\n\naction log\n\nsource code location\n\nWhen tracing with the screenshots option turned on (default), each trace records a screencast and renders it as a film strip. You can hover over the film strip to see a magnified image of for each action and state which helps you easily find the action you want to inspect.\n\nDouble click on an action to see the time range for that action. You can use the slider in the timeline to increase the actions selected and these will be shown in the Actions tab and all console logs and network logs will be filtered to only show the logs for the actions selected.\n\nWhen tracing with the snapshots option turned on (default), Playwright captures a set of complete DOM snapshots for each action. Depending on the type of the action, it will capture:\n\nTypeDescriptionBeforeA snapshot at the time action is called.ActionA snapshot at the moment of the performed input. This type of snapshot is especially useful when exploring where exactly Playwright clicked.AfterA snapshot after the action.\n\nHere is what the typical Action snapshot looks like:\n\nNotice how it highlights both, the DOM Node as well as the exact click position.\n\nWhen you click on an action in the sidebar, the line of code for that action is highlighted in the source panel.\n\nThe call tab shows you information about the action such as the time it took, what locator was used, if in strict mode and what key was used.\n\nSee a full log of your test to better understand what Playwright is doing behind the scenes such as scrolling into view, waiting for element to be visible, enabled and stable and performing actions such as click, fill, press etc.\n\nIf your test fails you will see the error messages for each test in the Errors tab. The timeline will also show a red line highlighting where the error occurred. You can also click on the source tab to see on which line of the source code the error is.\n\nSee console logs from the browser as well as from your test. Different icons are displayed to show you if the console log came from the browser or from the test file.\n\nDouble click on an action from your test in the actions sidebar. This will filter the console to only show the logs that were made during that action. Click the Show all button to see all console logs again.\n\nUse the timeline to filter actions, by clicking a start point and dragging to an ending point. The console tab will also be filtered to only show the logs that were made during the actions selected.\n\nThe Network tab shows you all the network requests that were made during your test. You can sort by different types of requests, status code, method, request, content type, duration and size. Click on a request to see more information about it such as the request headers, response headers, request body and response body.\n\nDouble click on an action from your test in the actions sidebar. This will filter the network requests to only show the requests that were made during that action. Click the Show all button to see all network requests again.\n\nUse the timeline to filter actions, by clicking a start point and dragging to an ending point. The network tab will also be filtered to only show the network requests that were made during the actions selected.\n\nNext to the Actions tab you will find the Metadata tab which will show you more information on your test such as the Browser, viewport size, test duration and more.\n\nThe \"Attachments\" tab allows you to explore attachments. If you're doing visual regression testing, you'll be able to compare screenshots by examining the image diff, the actual image and the expected image. When you click on the expected image you can use the slider to slide one image over the other so you can easily see the differences in your screenshots.\n\nTo record a trace during development mode set the --trace flag to on when running your tests. You can also use UI Mode for a better developer experience.\n\nYou can then open the HTML report and click on the trace icon to open the trace.\n\nTraces should be run on continuous integration on the first retry of a failed test by setting the trace: 'on-first-retry' option in the test configuration file. This will produce a trace.zip file for each test that was retried.\n\nAvailable options to record a trace:\n\n'on-first-retry' - Record a trace only when retrying a test for the first time.\n\n'on-all-retries' - Record traces for all test retries.\n\n'off' - Do not record a trace.\n\n'on' - Record a trace for each test. (not recommended as it's performance heavy)\n\n'retain-on-failure' - Record a trace for each test, but remove it from successful test runs.\n\nYou can also use trace: 'retain-on-failure' if you do not enable retries but still want traces for failed tests.\n\nThere are more granular options available, see testOptions.trace.\n\nIf you are not using Playwright as a Test Runner, use the browserContext.tracing API instead.\n\nYou can open the saved trace using the Playwright CLI or in your browser on trace.playwright.dev. Make sure to add the full path to where your trace.zip file is located.\n\ntrace.playwright.dev is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.\n\nYou can open remote traces using its URL. They could be generated on a CI run which makes it easy to view the remote trace without having to manually download the file.\n\nYou can also pass the URL of your uploaded trace (e.g. inside your CI) from some accessible storage as a parameter. CORS (Cross-Origin Resource Sharing) rules might apply."
    }
}