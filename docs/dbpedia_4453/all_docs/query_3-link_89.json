{
    "id": "dbpedia_4453_3",
    "rank": 89,
    "data": {
        "url": "https://vdoc.pub/documents/internet-world-wide-web-how-to-program-4uusa4669ot0",
        "read_more_link": "",
        "language": "en",
        "title": "Internet & World Wide Web. How To Program [PDF] [4uusa4669ot0]",
        "top_image": "https://vdoc.pub/img/detail/4uusa4669ot0.jpg",
        "meta_img": "https://vdoc.pub/img/detail/4uusa4669ot0.jpg",
        "images": [
            "https://vdoc.pub/theme/static/images/header-logo3.png",
            "https://vdoc.pub/theme/static/images/logo-socudoc-square.png",
            "https://vdoc.pub/theme/static/images/logo-socudoc-square.png",
            "https://vdoc.pub/img/detail/4uusa4669ot0.jpg",
            "https://vdoc.pub/img/crop/300x300/4uusa4669ot0.jpg",
            "https://vdoc.pub/img/crop/300x300/5ncr9rsc1ru0.jpg",
            "https://vdoc.pub/img/crop/300x300/416i3k2uenf0.jpg",
            "https://vdoc.pub/img/crop/300x300/7j14qhujpm70.jpg",
            "https://vdoc.pub/img/crop/300x300/3ee9v0v0aqlg.jpg",
            "https://vdoc.pub/img/crop/300x300/niegir26n980.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Internet & World Wide Web. How To Program [PDF] [4uusa4669ot0]. Covers virtually every Web development skill now in demand, from building dynamic pages through server and client-side s...",
        "meta_lang": "en",
        "meta_favicon": "https://vdoc.pub/theme/static/images/favicon/favicon-32x32.png",
        "meta_site_name": "",
        "canonical_link": "https://vdoc.pub/documents/internet-world-wide-web-how-to-program-4uusa4669ot0",
        "text": ". These comments can be placed throughout a JSP, but not inside scriptlets. Scripting language comments are currently Java comments, because Java is the only JSP scripting language at the present time. Scriptlets can use Java’s single-line comments (delimited by/ and /) and multiline comments (delimited by /* and */). Common Programming Error 31.1 Placing a JSP comment or XHTML comment inside a scriptlet is a translation-time syntax error that prevents the JSP from being translated properly.\n\n31.1\n\nJSP comments and scripting-language comments are ignored and do not appear in the response to a client. When clients view the source code of a JSP response, they will see only the XHTML comments in the source code. The different comment styles are useful for separating comments that the user should be able to see from comments that document logic processed on the server. A JSP expression, delimited by , contains a Java expression that is evaluated when a client requests the JSP containing the expression. The container converts the result of a JSP expression to a String object, then outputs the String as part of the response to the client. Declarations (delimited by ) enable a JSP programmer to define variables and methods. Variables become instance variables of the servlet class that represents the translated JSP. Similarly, methods become members of the class that represents the translated JSP. Declarations of variables and methods in a JSP use Java syntax. Thus, a variable declaration must end in a semicolon, as in\n\nCommon Programming Error 31.2 Declaring a variable without using a terminating semicolon is a syntax error.\n\n31.2\n\nSoftware Engineering Observation 31.5 Variables and methods declared in JSP declarations are initialized when the JSP is initialized and are available for use in all scriptlets and expressions in that JSP. Variables declared in this manner become instance variables of the servlet class that represents the translated JSP. 31.5\n\nSoftware Engineering Observation 31.6 As with servlets, JSPs should not store client state information in instance variables. Rather, JSPs should use the JSP implicit session object. 31.6\n\niw3htp2_31.fm Page 1127 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1127\n\nSpecial characters or character sequences that the JSP container normally uses to delimit JSP code can be included in a JSP as literal characters in scripting elements, fixed template data and attribute values using escape sequences. Figure 31.3 shows the literal character or characters and the corresponding escape sequences and discusses where to use the escape sequences.\n\n31.5.2 Scripting Example The JSP of Fig. 31.4 demonstrates basic scripting capabilities by responding to get requests. The JSP enables the user to input a first name, then outputs that name as part of the response. Using scripting, the JSP determines whether a firstName parameter was passed to the JSP as part of the request; if not, the JSP returns an XHTML document containing a form through which the user can input a first name. Otherwise, the JSP obtains the firstName value and uses it as part of an XHTML document that welcomes the user to JavaServer Pages. Literal\n\nEscape sequence\n\nDescription\n\nin the response to the client.\n\n' \" \\\n\n\\' \\\" \\\\\n\nAs with string literals in a Java program, the escape sequences for characters ', \" and \\ allow these characters to appear in attribute values. Remember that the literal text in a JSP becomes string literals in the servlet that represents the translated JSP.\n\nFig. 31.3 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n\nJSP escape sequences.\n\nFig. 31.4\n\nHello ,\n\nWelcome to JavaServer Pages!\n\nType your first name and press Submit\n\nFig. 31.4\n\nUsing jsp:include\n\n\"width: 160px; text-align: center\" = \"images/logotiny.png\" = \"140\" height = \"93\" \"Deitel & Associates, Inc. Logo\" />\n\nFig. 31.10 JSP include.jsp Includes resources with (part 1 of 2).\n\niw3htp2_31.fm Page 1135 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\n44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1135\n\nFig. 31.10 JSP include.jsp Includes resources with (part 2 of 2).\n\n31.6.2 Action Action enables a JSP to forward request processing to a different resource. Request processing by the original JSP terminates as soon as the JSP forwards the request. Action has only a page attribute that specifies the relative URI of the resource (in the same Web application) to which the request should be forwarded.\n\niw3htp2_31.fm Page 1136 Monday, July 23, 2001 4:27 PM\n\n1136\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\nSoftware Engineering Observation 31.9 When using the action, the resource to which the request will be forwarded must be in the same context (Web application) as the JSP that originally received the request.\n\n31.9\n\nJavaServer Page forward1.jsp (Fig. 31.11) is a modified version of welcome.jsp (Fig. 31.4). The primary difference is in lines 22–25 in which JavaServer Page forward1.jsp forwards the request to JavaServer Page forward2.jsp (Fig. 31.12). Notice the action in lines 23–24. This action adds a request parameter representing the date and time at which the initial request was received to the request object that is forwarded to forward2.jsp. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\n\nFig. 31.11 JSP forward1.jsp receives a firstName parameter, adds a date to the request parameters and forwards the request to forward2.jsp for further processing (part 2 of 2).\n\nThe action specifies name/value pairs of information that are passed to the , and actions. Every action has two required attributes: name and value. If a action specifies a parameter that already exists in the request, the new value for the parameter takes precedence over the original value. All values for that parameter can be obtained by using the JSP implicit object request’s getParameterValues method, which returns an array of Strings. JSP forward2.jsp uses the name specified in the action (\"date\") to obtain the date and time. It also uses the firstName parameter originally passed to forward1.jsp to obtain the user’s first name. JSP expressions in Fig. 31.12 (lines 23 and 31) insert the request parameter values in the response to the client. The screen capture in Fig. 31.11 shows the initial interaction with the client. The screen capture in Fig. 31.12 shows the results returned to the client after the request was forwarded to forward2.jsp. 1 2 3 4 5 6\n\nUsing jsp:plugin to load an applet\n\nFig. 31.15 Using to incorporate a Java applet into a JSP (part 1 of 2).\n\niw3htp2_31.fm Page 1142 Monday, July 23, 2001 4:27 PM\n\n1142\n\n15 16 17 18 19 20 21 22 23 24\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\nFig. 31.15 Using to incorporate a Java applet into a JSP (part 2 of 2).\n\niw3htp2_31.fm Page 1143 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1143\n\nTo test the action in Tomcat, copy plugin.jsp and ShapesApplet.class into the jsp directory created in Section 31.3. [Note: ShapesApplet is defined in package com.deitel.advjhtp1.jsp.applet. This example will work only if the proper package directory structure is defined in the classes directory.] Open your Web browser and enter the following URL to test plugin.jsp: http://localhost:8080/advjhtp1/jsp/plugin.jsp\n\nThe screen captures in Fig. 31.15 show the applet executing in Microsoft Internet Explorer 5.5 and Netscape Navigator 6.0.\n\n31.6.4 Action Action enables a JSP to manipulate a Java object. This action creates a Java object or locates an existing object for use in the JSP. Figure 31.16 summarizes action ’s attributes. If attributes class and beanName are not specified, the JSP container attempts to locate an existing object of the type specified in attribute type. Like JSP implicit objects, objects specified with action have page, request, session or application scope that indicates where they can be used in a Web application. Objects with page scope are accessible only to the page in which they are defined. Multiple JSP pages potentially can access objects with other scopes. For example, all JSPs that process a single request can access an object with request scope. Common Programming Error 31.6 One or both of the attributes class and type must be specified; otherwise, a translation-time error occurs. 31.6\n\nAttribute\n\nDescription\n\nid\n\nThe name used to manipulate the Java object with actions and . A variable of this name is also declared for use in JSP scripting elements. The name specified here is case sensitive.\n\nscope\n\nThe scope in which the Java object is accessible—page, request, session or application. The default scope is page.\n\nclass\n\nThe fully qualified class name of the Java object.\n\nbeanName\n\nThe name of a bean that can be used with method instantiate of class java.beans.Beans to load a JavaBean into memory.\n\ntype\n\nThe type of the JavaBean. This can be the same type as the class attribute, a superclass of that type or an interface implemented by that type. The default value is the same as for attribute class. A ClassCastException occurs if the Java object is not of the type specified with attribute type.\n\nFig. 31.16 Attributes of the action.\n\niw3htp2_31.fm Page 1144 Monday, July 23, 2001 4:27 PM\n\n1144\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\nMany Web sites today place rotating advertisements on their Web pages. Each visit to one of these pages typically results in a different advertisement being displayed in the user’s Web browser. Typically, clicking an advertisement takes you to the Web site of the company that placed the advertisement. Our first example of demonstrates a simple advertisement rotator bean that cycles through a list of five advertisements. In this example, the advertisements are covers for some of our books. Clicking a cover takes you to the Amazon.com Web site where you can read about and possibly order the book. The Rotator bean (Fig. 31.17) has three methods: getImage, getLink and nextAd. Method getImage returns the image file name for the book cover image. Method getLink returns the hyperlink to the book at Amazon.com. Method nextAd updates the Rotator so the next calls to getImage and getLink return information for a different advertisement. Methods getImage and getLink each represent a read-only JavaBean property—image and link, respectively. Rotator keeps track of the current advertisement with its selectedIndex variable, which is updated by invoking method nextAd. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\n\n// Fig. 10.17: Rotator.java // A JavaBean that rotates advertisements. package com.deitel.advjhtp1.jsp.beans; public class Rotator { private String images[] = { \"images/jhtp3.jpg\", \"images/xmlhtp1.jpg\", \"images/ebechtp1.jpg\", \"images/iw3htp1.jpg\", \"images/cpphtp3.jpg\" };\n\nFig. 31.17\n\nprivate String links[] = { \"http://www.amazon.com/exec/obidos/ASIN/0130125075/\" \"deitelassociatin\", \"http://www.amazon.com/exec/obidos/ASIN/0130284173/\" \"deitelassociatin\", \"http://www.amazon.com/exec/obidos/ASIN/013028419X/\" \"deitelassociatin\", \"http://www.amazon.com/exec/obidos/ASIN/0130161438/\" \"deitelassociatin\", \"http://www.amazon.com/exec/obidos/ASIN/0130895717/\" \"deitelassociatin\" }; private int selectedIndex = 0; // returns image file name for current ad public String getImage() { return images[ selectedIndex ]; } // returns the URL for ad's corresponding Web site public String getLink() { return links[ selectedIndex ]; }\n\nRotator bean that maintains a set of advertisements (part 1 of 2).\n\n+ + + + +\n\niw3htp2_31.fm Page 1145 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\n36 37 38 39 40 41 42\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1145\n\n// update selectedIndex so next calls to getImage and // getLink return a different advertisement public void nextAd() { selectedIndex = ( selectedIndex + 1 ) % images.length; } }\n\nFig. 31.17\n\nRotator bean that maintains a set of advertisements (part 2 of 2).\n\nLines 7–8 of JavaServer Page adrotator.jsp (Fig. 31.18) obtain a reference to an instance of class Rotator. The id for the bean is rotator. The JSP uses this name to manipulate the bean. The scope of the object is session, so that each individual client will see the same sequence of ads during their browsing session. When adrotator.jsp receives a request from a new client, the JSP container creates the bean and stores it in JSP that client’s session (an HttpSession object). In each request to this JSP, line 22 uses the rotator reference created in line 7 to invoke the Rotator bean’s nextAd method. Thus, each request will receive the next advertisement maintained by the Rotator bean. Lines 29–34 define a hyperlink to the Amazon.com site for a particular book. Lines 29–30 introduce action to obtain the value of the Rotator bean’s link property. Action has two attributes—name and property—that specify the bean object to manipulate and the property to get. If the JavaBean object uses standard JavaBean naming conventions, the method used to obtain the link property value from the bean should be getLink. Action invokes getLink on the bean referenced with rotator, converts the return value into a String and outputs the String as part of the response to the client. The link property becomes the value of the hyperlink’s href attribute. The hyperlink is represented in the resulting Web page as the book cover image. Lines 32–33 create an img element and use another action to obtain the Rotator bean’s image property value.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13\n\nGuest Book Login\n\nEnter your first name, last name and email address to register in our guest book.\n\nFig. 31.22 JavaServer page guestBookLogin.jsp enables the user to submit a first name, a last name and an e-mail address to be placed in the guest book (part 1 of 2).\n\niw3htp2_31.fm Page 1153 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1153\n\n52 First name 53 54 55\n\n56 57 58 59 60 Last name 61 62 63\n\n64 65 66 67 68 Email 69 70 71\n\n72 73 74 75 76 77\n\n79 80 81\n\n82\n\n83 84 91 92\n\n93\n\n94 95 100 101 102 Fig. 31.22 JavaServer page guestBookLogin.jsp enables the user to submit a first name, a last name and an e-mail address to be placed in the guest book (part 2 of 2).\n\niw3htp2_31.fm Page 1154 Monday, July 23, 2001 4:27 PM\n\n1154\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\nLine 8 of guestBookLogin.jsp introduces the page directive, which defines information that is globally available in a JSP. Directives are delimited by . In this case, the page directive’s errorPage attribute is set to guestBookErrorPage.jsp (Fig. 31.24), indicating that all uncaught exceptions are forwarded to guestBookErrorPage.jsp for processing. A complete description of the page directive appears in Section 31.7. Lines 11–14 define two actions. Lines 11–12 create an instance of GuestBean called guest. This bean has page scope—it exists for use only in this page. Lines 14–14 create an instance of GuestDataBean called guestData. This bean has request scope—it exists for use in this page and any other page that helps process a single client request. Thus, when guestBookLogin.jsp forwards a request to guestBookView.jsp, the GuestDataBean is still available for use in guestBookView.jsp. Line 36 demonstrates setting properties of the GuestBean called guest with request parameter values. The input elements on lines 55, 63 and 71 have the same names as the GuestBean properties. So, we use action ’s ability to match request parameters to properties by specifying \"*\" for attribute property. Line 36 also can set the properties individually with the following lines:\n\nIf the request parameters had names that differed from GuestBean’s properties, the param attribute in each of the preceding actions could be changed to the appropriate request parameter name. JavaServer Page guestBookView.jsp (Fig. 31.23) outputs an XHTML document containing the guest book entries in tabular format. Lines 8–10 define three page directives. Line 8 specifies that the error page for this JSP is guestBookErrorPage.jsp. Lines 9–10 introduce attribute import of the page directive. Attribute import enables programmers to specify Java classes and packages that are used in the context of the JSP. Line 9 indicates that classes from package java.util are used in this JSP, and line 10 indicates that classes from our package com.deitel.advjhtp1.jsp.beans also are used. Lines 13–14 specify a action that obtains a reference to an object of class GuestDataBean. If a GuestDataBean object already exists, the action returns a reference to the existing object. If a GuestDataBean object does no exist, the action creates a GuestDataBean for use in this JSP. Lines 50–59 define a scriptlet that gets the guest list from the GuestDataBean and begin a loop to output the entries. Lines 61–70 combine fixed template text with JSP expressions to create rows in the table of guest book data that will be displayed on the client. The scriptlet at lines 72–76 terminates the loop.\n\niw3htp2_31.fm Page 1155 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1155\n\nError!\n\nAn SQLException\n\nA ClassNotFoundException\n\nAn exception\n\noccurred while interacting with the guestbook database.\n\nFig. 31.24 JavaServer page guestBookErrorPage.jsp responds to exceptions in guestBookLogin.jsp and guestBookView.jsp (part 1 of 2).\n\niw3htp2_31.fm Page 1158 Monday, July 23, 2001 4:27 PM\n\n1158\n\n53 54 55 56 57 58 59 60 61 62\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\nThe error message was:\n\nPlease try again later\n\nFig. 31.24 JavaServer page guestBookErrorPage.jsp responds to exceptions in guestBookLogin.jsp and guestBookView.jsp (part 2 of 2).\n\nFigure 31.25 shows sample interactions between the user and the JSPs in the guest book example. In the first two rows of output, separate users entered their first name, last name and e-mail. In each case, the current contents of the guest book are returned and displayed for the user. In the final interaction, a third user specified an e-mail address that already existed in the database. The e-mail address is the primary key in the guests table of the guestbook database, so its values must be unique. Thus, the database prevents the new record from being inserted, and an exception occurs. The exception is forwarded to guestBookErrorPage.jsp for processing, which results in the last screen capture. To test the guest book in Tomcat, copy guestBookLogin.jsp, guestBookView.jsp and guestBookErrorPage.jsp into the jsp directory created in Section 31.3. Copy GuestBean.class and GuestDataBean.class into the advjhtp1 Web application’s WEB-INF\\classes directory in Tomcat. [Note: This example will work only if the proper package directory structure for GuestBean and GuestDataBean is defined in the classes directory. These classes are defined in package com.deitel.advjhtp1.jsp.beans.] Open your Web browser and enter the following URL to test guestBookLogin.jsp: http://localhost:8080/advjhtp1/jsp/guestBookLogin.jsp\n\nFig. 31.25 JSP guest book sample output windows (part 1 of 2).\n\niw3htp2_31.fm Page 1159 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nFig. 31.25 JSP guest book sample output windows (part 2 of 2).\n\n1159\n\niw3htp2_31.fm Page 1160 Monday, July 23, 2001 4:27 PM\n\n1160\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\n31.7 Directives Directives are messages to the JSP container that enable the programmer to specify page settings (such as the error page), to include content from other resources and to specify custom-tag libraries for use in a JSP. Directives (delimited by ) are processed at translation time. Thus, directives do not produce any immediate output, because they are processed before the JSP accepts any requests. Figure 31.26 summarizes the three directive types. These directives are discussed in the next several subsections.\n\n31.7.1 page Directive The page directive specifies global settings for the JSP in the JSP container. There can be many page directives, provided that there is only one occurrence of each attribute. The only exception to this rule is the import attribute, which can be used repeatedly to import Java packages used in the JSP. Figure 31.27 summarizes the attributes of the page directive. Common Programming Error 31.9 Providing multiple page directives with one or more attributes in common is a JSP translation-time error. 31.9\n\nCommon Programming Error 31.10 Providing a page directive with an attribute or value that is not recognized is a JSP translation-time error. 31.10\n\nDirective\n\nDescription\n\npage\n\nDefines page settings for the JSP container to process.\n\ninclude\n\nCauses the JSP container to perform a translation-time insertion of another resource’s content. As the JSP is translated into a servlet and compiled, the referenced file replaces the include directive and is translated as if it were originally part of the JSP.\n\ntaglib\n\nAllows programmers to include their own new tags in the form of tag libraries. These libraries can be used to encapsulate functionality and simplify the coding of a JSP.\n\nFig. 31.26 JSP directives.\n\nAttribute\n\nDescription\n\nlanguage\n\nThe scripting language used in the JSP. Currently, the only valid value for this attribute is java.\n\nextends\n\nSpecifies the class from which the translated JSP will be inherited. This attribute must be a fully qualified package and class name.\n\nFig. 31.27 Attributes of the page directive (part 1 of 2).\n\niw3htp2_31.fm Page 1161 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1161\n\nAttribute\n\nDescription\n\nimport\n\nSpecifies a comma-separated list of fully qualified class names and/or packages that will be used in the current JSP. When the scripting language is java, the default import list is java.lang.*, javax.servlet.*, javax.servlet.jsp.* and javax.servlet.http.*. If multiple import properties are specified, the package names are placed in a list by the container.\n\nsession\n\nSpecifies whether the page participates in a session. The values for this attribute are true (participates in a session—the default) or false (does not participate in a session). When the page is part of a session, the JSP implicit object session is available for use in the page. Otherwise, session is not available. In the latter case, using session in the scripting code results in a translation-time error.\n\nbuffer\n\nSpecifies the size of the output buffer used with the implicit object out. The value of this attribute can be none for no buffering, or a value such as 8kb (the default buffer size). The JSP specification indicates that the buffer used must be at least the size specified.\n\nautoFlush\n\nWhen set to true (the default value), this attribute indicates that the output buffer used with implicit object out should be flushed automatically when the buffer fills. If set to false, an exception occurs if the buffer overflows. This attribute’s value must be true if the buffer attribute is set to none.\n\nisThreadSafe\n\nSpecifies if the page is thread safe. If true (the default), the page is considered to be thread safe, and it can process multiple requests at the same time. If false, the servlet that represents the page implements interface java.lang.SingleThreadModel and only one request can be processed by that JSP at a time. The JSP standard allows multiple instances of a JSP to exists for JSPs that are not thread safe. This enables the container to handle requests more efficiently. However, this does not guarantee that resources shared across JSP instances are accessed in a thread-safe manner.\n\ninfo\n\nSpecifies an information string that describes the page. This string is returned by the getServletInfo method of the servlet that represents the translated JSP. This method can be invoked through the JSP’s implicit page object.\n\nerrorPage\n\nAny exceptions in the current page that are not caught are sent to the error page for processing. The error page implicit object exception references the original exception.\n\nisErrorPage\n\nSpecifies if the current page is an error page that will be invoked in response to an error on another page. If the attribute value is true, the implicit object exception is created and references the original exception that occurred. If false (the default), any use of the exception object in the page results in a translation-time error.\n\ncontentType\n\nSpecifies the MIME type of the data in the response to the client. The default type is text/html.\n\nFig. 31.27 Attributes of the page directive (part 2 of 2).\n\niw3htp2_31.fm Page 1162 Monday, July 23, 2001 4:27 PM\n\n1162\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\nSoftware Engineering Observation 31.11 According to the JSP specification section 2.7.1, the extends attribute “should not be used without careful consideration as it restricts the ability of the JSP container to provide specialized superclasses that may improve on the quality of rendered service.” Rememeber that a Java class can extend exactly one other class. If your JSP specifies an explicit superclass, the JSP container cannot translate your JSP into a sublcass of one of the container application’s own enhanced servlet classes. 31.11\n\nCommon Programming Error 31.11 Using JSP implicit object session in a JSP that does not have its page directive attribute session set to true is a translation-time error. 31.11\n\n31.7.2 include Directive The include directive includes the content of another resource once, at JSP translation time. The include directive has only one attribute—file—that specifies the URL of the page to include. The difference between directive include and action is noticeable only if the included content changes. For example, if the definition of an XHTML document changes after it is included with directive include, future invocations of the JSP will show the original content of the XHTML document, not the new content. In contrast, action is processed in each request to the JSP. Therefore, changes to included content would be apparent in the next request to the JSP that uses action . Software Engineering Observation 31.12 The JavaServer Pages 1.1 specification does not provide a mechanism for updating text included in a JSP with the include directive. Version 1.2 of the JSP specification allows the container to provide such a mechanism, but the specification does not provide for this directly. 31.12\n\nJavaServer Page includeDirective.jsp (Fig. 31.28) reimplements JavaServer Page include.jsp (Fig. 31.10) using include directives. To test includeDirective.jsp in Tomcat, copy includeDirective.jsp into the jsp directory created in Section 31.3. Open your Web browser and enter the following URL to test includeDirective.jsp: http://localhost:8080/advjhtp1/jsp/includeDirective.jsp\n\n1 2 3 4 5 6 7 8 9 10\n\n1.0 1.1 advjhtp1\n\nA simple tab library for the examples\n\nwelcome2\n\ncom.deitel.advjhtp1.jsp.taglibrary.Welcome2TagHandler\n\nempty\n\nInserts content welcoming user to tag libraries. Uses attribute \"name\" to insert the user's name.\n\nfirstName true true\n\nFig. 31.35 Element tag for the welcome2 custom tag.\n\niw3htp2_31.fm Page 1173 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1173\n\n31.8.3 Evaluating the Body of a Custom Tag Custom tags are particularly powerful for processing the element body. When a custom tag interacts with the element body, additional methods are required to perform those interactions. The methods are defined in class BodyTagSupport. In our next example, we reimplement guestBookView.jsp (Fig. 31.23) and replace the JavaBean processing performed in the JSP with a custom guestlist tag. Figure 31.36 (customTagBody.jsp) uses the custom guestlist tag at lines 41–52. Note that the JSP expressions in the body of element guestlist use variable names that are not defined in the JSP. These variables are defined by the custom tag handler when the custom tag is encountered. The custom tag handler places the variables in the JSP’s PageContext, so the variables can be used throughout the page. Although no repetition is defined in the JSP, the custom tag handler is defined to iterate over all the guests in the guestbook database. This action results in the creation of a table row in the resulting Web page for each guest in the database.\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n\n. Java’s single-line comments (//) and multiline comments (delimited by /* and */) can be used inside scriptlets. • JSP comments and scripting language comments are ignored and do not appear in the response. • A JSP expression, delimited by , contains a Java expression that is evaluated when a client requests the JSP containing the expression. The container converts the result of a JSP expression to a String object, then outputs the String as part of the response to the client.\n\niw3htp2_31.fm Page 1181 Monday, July 23, 2001 4:27 PM\n\nChapter 31\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\n1181\n\n• Declarations, delimited by , enable a JSP programmer to define variables and methods. Variables become instance variables of the class that represents the translated JSP. Similarly, methods become members of the class that represents the translated JSP. • Special characters or character sequences that the JSP container normally uses to delimit JSP code can be included in a JSP as literal characters in scripting elements, fixed template data and attribute values by using escape sequences. • JSP standard actions provide JSP implementors with access to several of the most common tasks performed in a JSP. JSP containers process actions at request time. • JavaServer Pages support two include mechanisms—the action and the include directive. • Action enables dynamic content to be included in a JavaServer Page. If the included resource changes between requests, the next request to the JSP containing the action includes the new content of the resource. • The include directive is processed once, at JSP translation time, and causes the content to be copied into the JSP. If the included resource changes, the new content will not be reflected in the JSP that used the include directive unless that JSP is recompiled. • Action enables a JSP to forward the processing of a request to a different resource. Processing of the request by the original JSP terminates as soon as the request is forwarded. • Action specifies name/value pairs of information that are passed to the include, forward and plugin actions. Every action has two required attributes—name and value. If a param action specifies a parameter that already exists in the request, the new value for the parameter takes precedence over the original value. All values for that parameter can be obtained with the JSP implicit object request’s getParameterValues method, which returns an array of Strings. • JSP action enables an applet or JavaBean to be added to a Web page in the form of a browser-specific object or embed XHTML element. This action also enables the downloading and installation of the Java Plug-in if it is not already installed on the client computer. • Action enables a JSP to manipulate a Java object. This action can be used to create a Java object for use in the JSP or to locate an existing object. • Like JSP implicit objects, objects specified with action have page, request, session or application scope that indicates where they can be used in a Web application. • Action obtains the value of JavaBean’s property. Action has two attributes—name and property—that specify the bean object to manipulate and the property to get. • JavaBean property values can be set with action . This action is particularly useful for mapping request parameter values to JavaBean properties. Request parameters can be used to set properties of primitive types boolean, byte, char, int, long, float and double and java.lang types String, Boolean, Byte, Character, Integer, Long, Float and Double. • The page directive defines information that is globally available in a JSP. Directives are delimited by . The page directive’s errorPage attribute indicates where all uncaught exceptions are forwarded for processing. • Action has the ability to match request parameters to properties of the same name in a bean by specifying \"*\" for attribute property. • Attribute import of the page directive enables programmers to specify Java classes and packages that are used in the context of a JSP.\n\niw3htp2_31.fm Page 1182 Monday, July 23, 2001 4:27 PM\n\n1182\n\nJavaServer Pages (JSP): Bonus for Java™ Developers\n\nChapter 31\n\n• If the attribute isErrorPage of the page directive is set to true, the JSP is an error page. This condition enables access to the JSP implicit object exception that refers to an exception object indicating the problem that occurred. • Directives are messages to the JSP container that enable the programmer to specify page settings (such as the error page), to include content from other resources and to specify custom tag libraries that can be used in a JSP. Directives are processed at the time a JSP is translated into a servlet and compiled. Thus, directives do not produce any immediate output. • The page directive specifies global settings for a JSP in the JSP container. There can be many page directives, provided that there is only one occurrence of each attribute. The exception to this rule is the import attribute, which can be used repeatedly to import Java packages. • Custom tag libraries define one or more custom tags that JSP implementors can use to create dynamic content. The functionality of these custom tags is defined in Java classes that implement interface Tag (package javax.servlet.jsp.tagext), normally by extending class TagSupport or BodyTagSupport. • A JSP can include a custom tag library with the taglib directive. • When implementing custom tags, you must define a tag handler class for each tag that provides the tag’s functionality, a tag library descriptor that provides information about the tag library and its custom tags to the JSP container and a JSP that uses the custom tag. • The most important methods of interface Tag are doStartTag and doEndTag. The JSP container invokes these methods when it encounters the starting custom tag and the ending custom tag, respectively. • A custom tag library descriptor file is an XML document that specifies information about the tag library that is required by the JSP container. • Class BodyTagSupport contains several methods for interacting with the body of a custom tag, including doInitBody and doAfterBody (from interface BodyTag). Method doInitBody is called once after doStartTag and once before doAfterBody. Method doAfterBody can be called many times to process the body of a custom tag.\n\nTERMINOLOGY %\\> escape sequence for %> BodyContent interface\n\nDemonstrating Microsoft Agent and the Lernout and Hauspie TruVoice textto-speech (TTS) engine (part 4 of 7).\n\n© Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1242 Monday, July 23, 2001 4:28 PM\n\n1242\n\n196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 Fig. 33.6\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nDeitel Programming Tips\n\nGood Programming Practices\n\nSoftware Engineering Observations\n\nPerformance Tips\n\nPortability Tips\n\nLook-and-Feel Observations\n\nTesting and Debugging Tips\n\nCommon Programming Errors\n\nDemonstrating Microsoft Agent and the Lernout and Hauspie TruVoice textto-speech (TTS) engine (part 5 of 7).\n\n© Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1243 Monday, July 23, 2001 4:28 PM\n\nChapter 33 Multimedia: Audio, Video, Speech Synthesis and Recognition\n\n1243\n\n248\n\n250\n\n251 C\n\nFig. 33.6\n\nDemonstrating Microsoft Agent and the Lernout and Hauspie TruVoice textto-speech (TTS) engine (part 6 of 7).\n\n© Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1244 Monday, July 23, 2001 4:28 PM\n\n1244\n\nFig. 33.6\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nDemonstrating Microsoft Agent and the Lernout and Hauspie TruVoice textto-speech (TTS) engine (part 7 of 7).\n\nLine 99 assigns to global variable actor a reference to the Peedy Character object. Object Character of the Characters collection receives as its argument the name that was used to download the character data in lines 97–98. Line 100 sets the Character’s LanguageID property to 0x0409 (English). Microsoft Agent can actually be used with several different languages (see the documentation for more information). Lines 103–105 use the Character object’s Get method to download the Showing, Speaking and Hiding states for the character. The method takes two arguments—the type of information to download (in this case, state information) and the name of the corresponding element (e.g., Showing). Each state has animations associated with it. When the character is displayed (i.e., the Showing state), its associated animation plays (Peedy flies onto the screen). Downloading the Speaking state provides a default animation that makes the character appear to be speaking. When the character hides (i.e., goes into the Hiding state), the animations that make the character disappear are played (Peedy flies away). Line 108 calls Character method Get to load an animation (Greet, in this example). Lines 109–116 use a variety of Character methods to interact with Peedy. Line 109 invokes the MoveTo method to specify Peedy’s position on the screen. Line 110 calls method Show to display the character. When this occurs, the character plays the animation assigned to the Showing state (Peedy flies onto the screen). Line 111 calls method Play to play the Greet animation (see the first screen capture). Lines 112–116 invoke method Speak to make the character speak its string argument. If there is a compatible TTS engine installed, the character displays a bubble containing the text and speaks the text as well. The Microsoft Agent Web site contains complete lists of animations available for each character (some are standard to all characters, others are specific to each character). © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1245 Monday, July 23, 2001 4:28 PM\n\nChapter 33 Multimedia: Audio, Video, Speech Synthesis and Recognition\n\n1245\n\nLines 119–125 load several other animations. Line 119 loads the set of Idling animations that Microsoft Agent uses when users are not interacting with the character. When running this example, be sure to leave Peedy alone for a while to see some of these animations. Lines 120–123 load the animations for moving the character up, down, left and right (MoveUp, MoveDown, MoveLeft and MoveRight, respectively). Clicking an image calls function imageSelectTip (lines 137–142). The method first uses Character method Stop to terminate the current animation. Next, the for structure at lines 139–141 determines which image the user clicked. The condition in line 140 calls the document object’s images collection which determines the index of the clicked img element. If the tip number is equal to the image number (document.images( i )), then function tellMeAboutIt (lines 158–166) is called, where i is passed as the argument. Line 160 of function tellMeAboutIt assigns global variable currentImage a reference to the clicked img element. This function changes the background color of the img element that the user clicked by highlighting that image on the screen. Line 161 changes the background color of the image to red. Line 162 invokes Character method MoveTo to position Peedy above the clicked image. When this statement executes, Peedy flies to the image. The currentImage’s offsetParent property determines the parent element that contains the image (in this example, the table cell in which the image appears). The offsetLeft and offsetTop properties of the table cell determine the location of the cell with respect to the upper left corner of the browser window. The Character object’s Speak method (Line 165) speaks the text that is stored as strings in the array explanations for the selected tip. Lines 177–188 invoke the script for the agent control in response to the hiding of the text balloon. If the currentImage is not null, the background color of the image is changed to lemonchiffon (the document’s background color) and variable currentImage is reset to null. The script for the agent control at lines 187–194 is invoked in response to the user’s clicking the character. When this occurs, line 190 plays the GetAttention animation, line 191 causes Peedy to speak the text “Stop poking me with that pointer!” and line 192 plays the last frame of the GetAttention animation by specifying GetAttentionReturn. Microsoft provides complete lists of animations as well as recommended standard animation sets for their Agent characters at msdn.microsoft.com/library/en-us/ dnagent/html/characterdata.asp. Voice recognition is also included in this example to enable the Agent character to receive voice commands. The first screen capture illustrates Peedy finishing his introduction (Fig. 33.7). The second screen capture shows Peedy after the user presses the Scroll Lock key to start issuing voice commands, which initializes the voice-recognition engine (Fig. 33.8). The third screen capture (Fig. 33.9) shows Peedy after receiving a voice command (i.e., “Good Programming Practice”, which causes a Command event for the agent control). The last screen capture shows Peedy discussing Good Programming Practices (Fig. 33.10). To enable Microsoft Agent to recognize voice commands, a compatible voice-recognition engine must be installed. Lines 25–28 use an object element to embed an instance of the Microsoft Speech Recognition engine control in the Web page. © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1246 Monday, July 23, 2001 4:28 PM\n\n1246\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nNext, the voice commands used to interact with the Peedy must be registered in the Character object’s Commands collection. The for structure at lines 128–130 uses the Commands collection’s Add method to register each voice command. The method receives five arguments. The first argument is a string representing the command name (typically used in scripts that respond to voice commands). The second argument is a string that appears in a pop-up menu in response to a right-click on the character. The third argument is a string representing the words or phrase users can speak for this command (stored in array voiceTips at lines 44–51). Optional words or phrases are enclosed in square brackets ([]). The last two arguments are boolean values indicating whether the command is currently enabled (i.e., whether users can speak the command) and whether the command is currently visible in the pop-up menu and Voice Commands window for the character. Lines 132–134 set the Caption, Voice and Visible properties of the Commands object. The Caption property specifies text that describes the voice command set. This text appears in the small rectangular area that appears below the character when users press the Scroll Lock key. The Voice property is similar to the Caption property except that the specified text appears in the Voice Commands window with the set of voice commands the user can speak below it. The Visible property is a boolean value that specifies whether the commands of this Commands object should appear in the pop-up menu. After receiving a voice command, the agent control’s Command event handler (lines 170–175) executes. This script calls function voiceSelectTip and passes it the name of the received command. Function voiceSelectTip (lines 144–156) uses the name of the command in the for structure (lines 148–152) to determine the index of the command in the Commands object. This value is then passed to function tellMeAboutIt (line 158), which causes Peedy to move to the specified tip and discuss that tip.\n\nFig. 33.7\n\nPeedy finishing introduction.\n\n© Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1247 Monday, July 23, 2001 4:28 PM\n\nChapter 33 Multimedia: Audio, Video, Speech Synthesis and Recognition\n\nFig. 33.8\n\nPeedy ready to receive voice commands.\n\nFig. 33.9\n\nPeedy receiving voice command.\n\n© Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\n1247\n\niw3htp2_33.fm Page 1248 Monday, July 23, 2001 4:28 PM\n\n1248\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nFig. 33.10 Peedy discussing Good Programming Practice.\n\nThis example has covered only the basic features and functionality of Microsoft Agent. Many more features are available. Figure 33.11 lists several other Microsoft Agent events. Figure 33.12 shows some other properties and methods of the Character object. Remember that the Character object represents the character that is displayed on the screen and enables interaction with that character. For a complete listing of properties and methods, see the Microsoft Agent Web site Figure 33.13 shows some speech output tags that can customize speech output properties. The animated character will speak these tags inserted into the text string. Speech output tags generally remain in effect from the time at which they are encountered until the end of the current Speak method call. Event\n\nDescription\n\nBalloonHide\n\nCalled when the text balloon for a character is hidden.\n\nBalloonShow\n\nCalled when the text balloon for a character is shown.\n\nHide\n\nCalled when a character is hidden.\n\nMove\n\nCalled when a character is moved on the screen.\n\nShow\n\nCalled when a character is displayed on the screen.\n\nSize\n\nCalled when a character’s size is changed.\n\nFig. 33.11 Other events for the Microsoft Agent control. © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1249 Monday, July 23, 2001 4:28 PM\n\nChapter 33 Multimedia: Audio, Video, Speech Synthesis and Recognition\n\n1249\n\n.\n\nProperty or method\n\nDescription\n\nProperties Height\n\nThe height of the character in pixels.\n\nLeft\n\nThe left edge of the character in pixels from the left of the screen.\n\nName\n\nThe default name for the character.\n\nSpeed\n\nThe speed of the character’s speech.\n\nTop\n\nThe top edge of the character in pixels from the top of the screen.\n\nWidth\n\nThe width of the character in pixels.\n\nMethods Activate\n\nSets the currently active character when multiple characters appear on the screen.\n\nGestureAt\n\nSpecifies that the character should gesture toward a location on the screen that is specified in pixel coordinates from the upper left corner of the screen.\n\nInterrupt\n\nInterrupts the current animation. The next animation in the queue of animations for this character is then displayed.\n\nStopAll\n\nStops all animations of a specified type for the character.\n\nFig. 33.12 Other properties and methods for the Character object. Tag\n\nDescription\n\n\\Chr=string\\\n\nSpecifies the tone of the voice. Possible values for string are Normal (the default) for a normal tone of voice, Monotone for a monotone voice or Whisper for a whispered voice.\n\n\\Emp\\\n\nEmphasizes the next spoken word.\n\n\\Lst\\\n\nRepeats the last statement spoken by the character. This tag must be the only content of the string in the Speak method call.\n\n\\Pau=number\\\n\nPauses speech for number milliseconds.\n\n\\Pit=number\\\n\nChanges the pitch of the character’s voice. This value must be within the range 50 to 400 hertz for the Microsoft Agent speech engine.\n\n\\Spd=number\\\n\nChanges the speech speed to a value in the range 50 to 250.\n\n\\Vol=number\\\n\nChanges the volume to a value in the range 0 (silent) to 65,535 (maximum volume).\n\nFig. 33.13 Speech output tags.\n\n33.8 RealPlayer™ Plug-in A RealPlayer object may be embedded into a Web page to enhance the page with streaming audio and video. RealPlayer can also be delivered as a browser plug-in on multiple plat© Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1250 Monday, July 23, 2001 4:28 PM\n\n1250\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nforms. Figure 33.14 demonstrates streaming audio in a Web page by embedding a RealPlayer object in the page using embed element. Users can select from several different audio sources; this selection then calls a JavaScript which invokes RealPlayer methods to play the selected audio stream. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n\nLive Audio!\n\nPick from my favorite audio streams:\n\nSelect a station CNN KING-FM Jazz Summit\n\nFig. 33.14 Embedding RealPlayer in a Web page (part 1 of 2). © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1251 Monday, July 23, 2001 4:28 PM\n\nChapter 33 Multimedia: Audio, Video, Speech Synthesis and Recognition\n\n1251\n\nImage of RealPlayer playing the selected audio stream. Run the example to see this live.\n\nFig. 33.14 Embedding RealPlayer in a Web page (part 2 of 2).\n\nThe embed element in lines 42–45 embeds the RealPlayer plug-in into the page. The type attribute specifies the MIME type of the embedded file, which in this case is the MIME type for streaming audio. (Remember that MIME is a standard for specifying the format of content so the browser can determine how to handle the content.) The width and height attributes specify the dimensions of the space the control occupies on the page. The autostart attribute determines whether the audio starts playing when the page loads (for this example, we set it to false). The controls attribute specifies which controls users can access (e.g., Play button, Pause button and Volume Control). Setting controls to Default places the standard control buttons on screen. A list of the available controls can be found at the site www.real.com/devzone/library/stream/plugtest/plugin.html\n\nWe do not set the src attribute of the embed element. Normally, this is the location of the streaming audio, but in this example, we use JavaScript to change the source dynamically based on user selections. Now that the player is embedded in the Web page, we use scripting to activate the streaming audio. The select menu (line 33) lists three radio stations, corresponding to the three entries in the array locations (defined at line 14), which contain the actual URLs for the live audio of those stations. When the selection changes, function change (line 20) is called by the onchange event. This function calls methods SetSource and DoPlayPause of the RealPlayer object. Method SetSource sets the source URL of the audio stream to be played. Then, method DoPlayPause toggles between pausing and playing the stream. [Note: In this case, the stream is paused because it has not started playing yet, so it begins playing in response to the call to DoPlayPause.] In this example, we only explore streaming audio. The latest versions of RealPlayer support streaming video as well. To view streaming video with RealPlayer, visit the following sites: www.cnn.com www.msnbc.com © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1252 Monday, July 23, 2001 4:28 PM\n\n1252\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nwww.broadcast.com/television\n\nTo learn more about programming with RealPlayer, visit the RealPlayer DevZone at www.realnetworks.com/devzone/index.html\n\nA few years, ago broadcasting personal streaming audio and video required a dedicated server and expensive software. Today, open source software, such as Darwin Streaming Server and RealNetwork’s Basic Server G2, provide “home-made” servers, such as Linux or Apache running on a PC, with streaming capability. These applications are available free for download from www.shareware.com. With limited server processor power and Internet bandwidth, this type of set-up cannot support the same number of streams and bitrates as a dedicated streaming server.\n\n33.9 Synchronized Multimedia Integration Language (SMIL) The Synchronized Multimedia Integration Language (SMIL, pronounced “smile”) enables Web document authors to coordinate the presentation of a wide range of multimedia elements. SMIL is an XML-based description language that allows static and dynamic text, audio and video to occur simultaneously and sequentially. Like Flash, SMIL provides a time reference for all instances of text and media. A SMIL document specifies the source (i.e., the URL) and presentation of multimedia elements. In XHTML, multimedia elements are autonomous entities that cannot interact without complicated scripts. In SMIL, multimedia elements can work together, enabling document authors to specify when and how multimedia elements appear in a document. For example, SMIL can produce TV-style content, in which static and dynamic text, audio and video occur simultaneously and sequentially. One way to render SMIL documents is with RealPlayer. Apple’s Quicktime plug-in also plays SMIL in both Windows and Mac OS environments. The example in Fig. 33.15 is a SMIL document that displays .jpg images for a variety of Java How to Program book covers. The images are displayed sequentially, and sound accompanies each image. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\nFig. 33.15 SMIL document with images and sound (part 1 of 2). © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1253 Monday, July 23, 2001 4:28 PM\n\nChapter 33 Multimedia: Audio, Video, Speech Synthesis and Recognition\n\n17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\n\n1253\n\nFig. 33.15 SMIL document with images and sound (part 2 of 2).\n\nElement head (lines 5–14) contains all the information for setting up the document. Lines 6–13 show element layout, which sets the layout attributes for the document. Lines 7–8 set the document size, color and title using element root-layout. Lines 10–12 set a region for displaying objects (e.g., images) using element region. Attribute id is a unique identifier for each region. Attributes width and height specify the size of the region, and attributes top and left provide its relative position. Attribute background-color sets the color of the region’s background. Line 15 begins the element body, which encloses the contents of the document. Line 16 starts element seq, which sets its child elements to execute sequentially (i.e., in chronological order). A par element (starting on Line 18) sets its child elements to execute simultaneously. © Copyright 1992–2002 by Deitel & Associates, Inc. All Rights Reserved. 7/23/01\n\niw3htp2_33.fm Page 1254 Monday, July 23, 2001 4:28 PM\n\n1254\n\nMultimedia: Audio, Video, Speech Synthesis and Recognition Chapter 33\n\nLines 19–20 show element img, which references an image. Attribute src contains the location of the image, and attribute alt provides a description of the image. Attribute region specifies the region in which the image is to be displayed; a fit value of fill sets the image to fill the entire region. Attribute dur describes how long the image appears on the screen (e.g., one second). Line 21 shows element audio, which references audio file bounce.au. The remaining elements in the document (lines 24–52) display different images and play the same audio file. We can also embed a SMIL document in a Web page. We use the method described in Section 33.7 to embed the RealPlayer. Visitors to a Web site need the RealPlayer plug-in to view SMIL content. The plug-in is installed with RealPlayer basic and is available for download from RealNetworks at www.real.com/player\n\nFigure 33.16 uses an embedded RealPlayer to view our example SMIL document. On lines 14–17 we use the tag to add the RealPlayer to the Web page. The many attributes of this tag determine how our SMIL is displayed. First, set the src attribute on line 14 by giving it the location of the SMIL file. The file is located in the same folder so the path is simply the name of the file: example1.smil. The controls attribute on line 15 is set to ImageWindow; hiding the controls from users. The type attribute on line 16 allows the specification of the MIME type for the embedded object. In this case, we set type to audio/x-pn-realaudio-plugin to inform the browser that the RealPlayer plug-in will display the SMIL file. Users do not have GUI controls, so the autostart attribute set to true on line 17 starts the movie automatically.\n\n33.10 Scalable Vector Graphics (SVG) The Scalable Vector Graphics (SVG) markup language describes vector graphic data for JPEG, GIF and PNG formats) such that they may be distributed over the Web efficiently. The GIF, JPEG and PNG file formats store images as bitmaps. Bitmaps describe the color of every pixel in an image and can take quite a bit of time to download. Due to the method in which bitmap information is stored, images of these file types cannot be enlarged or reduced without a loss of image quality. Vector graphics are produced by mathematical equations which describe graphical information in terms of lines, curves, etc. Not only do images rendered by vectors require less bandwidth, but these images also can be easily scaled and printed without loss of image clarity. Different graphic formats are discussed in detail in Chapter 3, Photoshop® Elements. 1 2 3 4 5 6 7\n\n--> --> -->\n\n<strong>Price of Fruit Fruit Price Apple $0.25 Orange $0.50\n\nTable optimized for screen reading using attribute headers (part 1 of 2).\n\niw3htp2_34.fm Page 1276 Monday, July 23, 2001 4:29 PM\n\n1276\n\n47 48 49 50 51 52 53 54 55 56 57 58 59 60\n\nAccessibility\n\nChapter 34\n\nBanana $1.00 Pineapple $2.00\n\nFig. 34.4\n\nTable optimized for screen reading using attribute headers (part 2 of 2).\n\n34.7 Accessibility in XHTML Frames Web designers often use frames to display more than one XHTML file in a single browser window. Frames are a convenient way to ensure that certain content always displays on the screen. Unfortunately, frames often lack proper descriptions, which prevents users with text-based browsers, or users listening with speech synthesizers, from navigating the Web site. A site with frames must have meaningful descriptions in the tag for each frame. Examples of good titles include “Navigation Frame” and “Main Content Frame.” Users with text-based browsers, such as Lynx, must choose which frame they want to open; descriptive titles make this choice simpler. However, assigning titles to frames does not solve all the navigation problems associated with frames. The tag allows Web designers to offer alternative content for browsers that do not support frames. Good Programming Practice 34.1 Always provide titles for frames to ensure that user agents which do not support frames have alternatives. 34.0\n\niw3htp2_34.fm Page 1277 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1277\n\nGood Programming Practice 34.2 Include a title for each frame’s contents with the frame element, and, if possible, provide links to the individual pages within the frameset so that users still can navigate through the Web pages. To provide access to browsers that do not support frames, use the tag. It also provides better access to browsers that have limited support. 34.0\n\nWCAG 1.0 suggests using Cascading Style Sheets (CSS) as an alternative to frames, because CSS can provide similar functionality and are highly customizible. Unfortunately, the ability to display multiple XHTML documents in a single browser window requires the complete support of HTML 4, which is not widespread. However, the second generation of Cascading Style Sheets (CSS2) can display a single document as if it were several documents. However, CSS2 is not yet fully supported by many user agents.\n\n34.8 Accessibility in XML XML allows developers to create new markup languages, which may not necessarily incorporate accessibility features. To prevent the proliferation of inaccessible languages, the WAI is developing guidelines—the XML Guidelines (XML GL)—for creating accessible XML documents. The XML GL recommend including a text description, similar to XHTML’s tag, for each non-text object on a page. To facilitate accessibility further, element types should allow grouping and classification and should identify important content. Without an accessible user interface, other efforts to implement accessibility are less effective, so it is essential to create XSLT (Chapter 20) or CSS style sheets that can produce multiple outputs, including document outlines. Many XML languages, including Synchronized Multimedia Integration Language (SMIL) and Scalable Vector Graphics (SVG) (discussed in Chapter 33), have implemented several of the WAI guidelines. The WAI XML Accessibility Guidelines can be found at www.w3.org/WAI/PF/xmlgl.htm.\n\n34.9 Using Voice Synthesis and Recognition with VoiceXML™ A joint effort by AT&T®, IBM®, Lucent™ and Motorola® has created an XML vocabulary that marks up information for speech synthesizers, which enable computers to speak to users. This technology, called VoiceXML, has tremendous implications for people with visual impairments and for the illiterate. VoiceXML-enabled applications read Web pages to the user, and understand words spoken into a microphone through speech recognition technology. An example of a speech recognition tool is IBM’s ViaVoice (www-4.ibm.com/ software/speech). A VoiceXML interpreter and VoiceXML browser process VoiceXML, a platformindependent XML-based technology. Web browsers may incorporate these interpreters in the future. When a VoiceXML document is loaded, a voice server sends a message to the VoiceXML browser and begins a conversation between the user and the computer. IBM WebSphere Voice Server SDK 1.5 is a VoiceXML interpreter that can be used for testing VoiceXML documents on a desktop computer. To download the VoiceServer SDK, visit www.alphaworks.ibm.com/tech/voiceserversdk. [Note: To run the VoiceXML program in Fig. 34.5, download Java 2 Platform Standard Edition (Java SDK)\n\niw3htp2_34.fm Page 1278 Monday, July 23, 2001 4:29 PM\n\n1278\n\nAccessibility\n\nChapter 34\n\n1.3 from www.java.sun.com/j2se/1.3. To obtain installation instructions for the VoiceServer SDK and the Java SDK, visit the Deitel & Associates, Inc. Web site at www.deitel.com.] Figures 34.5 and 34.6 show examples of VoiceXML that would be appropriate for a Web site. The document’s text is spoken to the user, and the text embedded in the VoiceXML tags allows for interactivity between the user and the browser. The output included in Fig. 34.6 demonstrates a conversation that might take place between a user and a computer after loading this document. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\n\nhome\n\nexit\n\nWelcome to the voice page of Deitel and Associates. To exit any time say exit. To go to the home page any time say home.\n\nYou have just entered the Deitel home page. Please make a selection by speaking one of the following options:\n\nFig. 34.5\n\nPlease say one of the following.\n\nAbout us Driving directions Home page written in VoiceXML (part 1 of 3).\n\niw3htp2_34.fm Page 1279 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\n43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\n\nAccessibility\n\n1279\n\nPublications\n\nAbout Deitel and Associates, Inc. Deitel and Associates, Inc. is an internationally recognized corporate training and publishing organization, specializing in programming languages, Internet and World Wide Web technology and object technology education. Deitel and Associates, Inc. is a member of the World Wide Web Consortium. The company provides courses on Java, C++, Visual Basic, C, Internet and World Wide Web programming and Object Technology.\n\nDirections to Deitel and Associates, Inc. We are located on Route 20 in Sudbury, Massachusetts, equidistant from route 128 and route 495.\n\nTo repeat say yes. To go back to home, say no.\n\nThank you for visiting Deitel and Associates voice page. Have a nice day.\n\nFig. 34.5\n\nHome page written in VoiceXML (part 2 of 3).\n\niw3htp2_34.fm Page 1280 Monday, July 23, 2001 4:29 PM\n\n1280\n\n96 97 98 99\n\nAccessibility\n\nChapter 34\n\nFig. 34.5\n\nHome page written in VoiceXML (part 3 of 3).\n\nA VoiceXML document contains a series of dialogs and subdialogs which result in spoken interaction between the user and the computer. The and tags implement the dialogs. A form element presents information and gathers data from the user. A menu element provides users with options and transfers control to other dialogs, based on users’ selections. Lines 7–9 use element link to create an active link to the home page. Attribute next specifies the URI navigated to when the link is selected. Element grammar marks up the text that the user must speak to select the link. In the link element, we navigate to the element with id home when users speak the word home. Lines 11–13 use element link to create a link to id end when users speak the word exit. Lines 17–24 create a form dialog using element form, which collects information from the user. Lines 18–22 present introductory text. Element block, which can exist only within a form element, groups elements that perform an action or an event. Element emp states that a section of text should be spoken with emphasis. If the level of emphasis is not specified, then the default level—moderate—is used. Our example uses the default level. [Note: To specify an emphasis level, use the level attribute. This attribute accepts the following values: strong, moderate, none and reduced.] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124\n\nhome\n\nexit\n\nmenu\n\nFig. 34.6\n\nFollowing are some of our publications. For more information visit our web page at www.deitel.com. To repeat the following menu, say menu at any time. Please select by saying one of the following books: Publication page of Deitel’s VoiceXML page (part 1 of 4).\n\niw3htp2_34.fm Page 1281 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\n125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178\n\nAccessibility\n\n1281\n\nPlease select from the following books.\n\nJava. C. C plus plus.\n\nJava How to program, third edition. The complete, authoritative introduction to Java. Java is revolutionizing software development with multimedia-intensive, platform-independent, object-oriented code for conventional, Internet, Intranet and Extranet-based applets and applications. This Third Edition of the world's most widely used university-level Java textbook carefully explains Java's extraordinary capabilities.\n\nC How to Program, third edition. This is the long-awaited, thorough revision to the world's best-selling introductory C book! The book's powerful \"teach by example\" approach is based on more than 10,000 lines of live code, thoroughly explained and illustrated with screen captures showing detailed output.World-renowned corporate trainers and best-selling authors Harvey and Paul Deitel offer the most comprehensive, practical introduction to C ever published with hundreds of hands-on exercises, more than 250 complete programs written and documented for easy learning, and exceptional insight into good programming practices, maximizing performance, avoiding errors, debugging, and testing. New features include thorough introductions to C++, Java, and object-oriented programming that build directly on the C skills taught in this book; coverage of graphical user interface development and C library functions; and many new, substantial hands-on projects.For anyone who wants to learn C, improve their existing C skills, and understand how C serves as the foundation for C++, Java, and\n\nFig. 34.6\n\nPublication page of Deitel’s VoiceXML page (part 2 of 4).\n\niw3htp2_34.fm Page 1282 Monday, July 23, 2001 4:29 PM\n\n1282\n\n179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232\n\nAccessibility\n\nChapter 34\n\nobject-oriented development.\n\nThe C++ how to program, second edition. With nearly 250,000 sold, Harvey and Paul Deitel's C++ How to Program is the world's best-selling introduction to C++ programming. Now, this classic has been thoroughly updated! The new, full-color Third Edition has been completely revised to reflect the ANSI C++ standard, add powerful new coverage of object analysis and design with UML, and give beginning C++ developers even better live code examples and real-world projects. The Deitels' C++ How to Program is the most comprehensive, practical introduction to C++ ever published with hundreds of hands-on exercises, roughly 250 complete programs written and documented for easy learning, and exceptional insight into good programming practices, maximizing performance, avoiding errors, debugging, and testing. This new Third Edition covers every key concept and technique ANSI C++ developers need to master: control structures, functions, arrays, pointers and strings, classes and data abstraction, operator overloading, inheritance, virtual functions, polymorphism, I/O, templates, exception handling, file processing, data structures, and more. It also includes a detailed introduction to Standard Template Library containers, container adapters, algorithms, and iterators.\n\nTo repeat say yes. Say no, to go back to home.\n\nFig. 34.6\n\nPublication page of Deitel’s VoiceXML page (part 3 of 4).\n\niw3htp2_34.fm Page 1283 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1283\n\nComputer: Welcome to the voice page of Deitel and Associates. To exit any time say exit. To go to the home page any time say home. User: Home Computer: You have just entered the Deitel home page. Please make a selection by speaking one of the following options: About us, Driving directions, Publications. User: Driving directions Computer: Directions to Deitel and Associates, Inc. We are located on Route 20 in Sudbury, Massachusetts, equidistant from route 128 and route 495. To repeat say yes. To go back to home, say no. Fig. 34.6\n\nPublication page of Deitel’s VoiceXML page (part 4 of 4).\n\nThe menu element on line 26 enables users to select the page to which they would like to link. The choice element, which is always part of either a menu or a form, presents the options. The next attribute indicates the page to be loaded when a user makes a selection. The user selects a choice element by speaking the text marked up between the tags into a microphone. In this example, the first and second choice elements on lines 41–42 transfer control to a local dialog (i.e., a location within the same document) when they are selected. The third choice element transfers the user to the document publications.vxml. Lines 27–33 use element prompt to instruct the user to make a selection. Attribute count maintains the number of times a prompt is spoken (i.e., each time a prompt is read, count increments by one). The count attribute transfers control to another prompt once a certain limit has been reached. Attribute timeout specifies how long the program should wait after outputting the prompt for users to respond. In the event that the user does not respond before the timeout period expires, lines 35–39 provide a second, shorter prompt to remind the user to make a selection. When the user chooses the publications option, the publications.vxml (Fig. 34.6) loads into the browser. Lines 106–111 define link elements that provide links to main.vxml. Lines 112–114 provide links to the menu element (lines 118–138), which asks users to select one of the publications: Java, C or C++. The form elements on lines 140–214 describe each of the books on these topics. Once the browser speaks the description, control transfers to the form element with an id attribute that has a value equal to repeat (lines 216–231). Figure 34.7 provides a brief description of each VoiceXML tag used in the previous example (Fig. 34.6).\n\niw3htp2_34.fm Page 1284 Monday, July 23, 2001 4:29 PM\n\n1284\n\nAccessibility\n\nChapter 34\n\nVoiceXML Tag\n\nDescription\n\nAssigns a value to a variable.\n\nPresents information to users without any interaction between the user and the computer (i.e., the computer does not expect any input from the user).\n\nInstructs the computer to pause its speech output for a specified period of time.\n\nSpecifies an option in a menu element.\n\nLists all the available options to the user.\n\nExits the program.\n\nContains elements to be executed when the computer receives user input for a form element.\n\nGathers information from the user for a set of variables.\n\nTransfers control from one dialog to another.\n\nSpecifies grammar for the expected input from the user.\n\n, ,\n\nControl statements used for making logic decisions.\n\nA transfer of control similar to the goto statement, but a link can be executed at any time during the program’s execution.\n\nProvides user options and transfers control to other dialogs, based on the selected option.\n\nSpecifies text to be read to the user when a selection is needed.\n\nCalls another dialog. After executing the subdialog, the calling dialog resumes control.\n\nDeclares a variable.\n\nThe top-level tag specifying that the document should be processed by a VoiceXML interpreter.\n\nFig. 34.7\n\nSome VoiceXML tags.\n\n34.10 CallXML™ Another advancement in voice technology for people with visual impairments is CallXML, a technology created and supported by Voxeo (www.voxeo.com). CallXML creates phone-to-Web applications that control incoming and outgoing telephone calls. Some examples of CallXML applications include voice mail, interactive voice response systems and Internet call waiting. While VoiceXML assists individuals with visual impairments by reading Web pages, CallXML provides individuals with visual impairments access to Webbased content through telephones. When users access CallXML applications, a text-to-speech (TTS) engine reads information contained within CallXML elements. A TTS engine converts text to an automated voice. Web applications respond to the caller’s input. [Note: A touch-tone phone is required to access CallXML applications.]\n\niw3htp2_34.fm Page 1285 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1285\n\nTypically, CallXML applications play pre-recorded audio clips or text as output, requesting a response as input. An audio clip may contain a greeting that introduces callers to the application or to a menu of options that requires callers to make touch-tone entries. Certain applications, such as voice mail, may require verbal and touch-tone input. Once the input is received, the application responds by invoking CallXML elements such as text, which contain the information a TTS engine reads to users. If the application does not receive input within a designated time frame, it prompts the user to enter valid input. When a user accesses a CallXML application, the incoming telephone call is referred to as a session. A CallXML application can support multiple sessions, enabling the application to receive multiple telephone calls at once. Each session is independent of the others and is assigned a unique sessionID for identification. A session terminates either when the user hangs up the telephone or when the CallXML application invokes the hangup element. Our first CallXML example shows the classic Hello World example (Fig. 34.8). Line 1 contains the optional XML declaration.Value version indicates the XML version to which the document conforms. The current XML recommendation is version 1.0. Value encoding indicates the type of Unicode encoding to use. For this example we use UTF-8, which requires eight bits to transfer and receive data. More information on Unicode may be found in Appendix G, Unicode®. 1 2 3 4 5 6 7 8\n\nHello World.\n\nFig. 34.8\n\nHello World CallXML example. (Courtesy of Voxeo, © Voxeo Corporation 2000–2001.)\n\niw3htp2_34.fm Page 1286 Monday, July 23, 2001 4:29 PM\n\n1286\n\nAccessibility\n\nChapter 34\n\nThe tag on line 6 declares the contents of a CallXML document. Line 7 contains the Hello World text. All text that is to be spoken by a text-to-speech (TTS) engine needs to be placed within tags. To deploy a CallXML application, register with the Voxeo Community (community.voxeo.com), a Web resource for creating, debugging and deploying phone applications. For the most part, Voxeo is a free Web resource. However, the company charges fees when CallXML applications are deployed commercially. The Voxeo Community assigns a unique telephone number to each CallXML application so that external users may access and interact with the application. [Note: Voxeo assigns telephone numbers to applications that reside on the Internet. If you have access to a Web server (IIS, PWS, Apache, etc.), use it to post your CallXML application. Otherwise, open an Internet account using one of the many Internet-service companies (e.g., www.geocities.com, www.angelfire.com). These companies allow you to post documents on the Internet by using their Web servers.] Figure 34.8 demonstrates the logging feature of the Voxeo Account Manager, which is accessible to registered members. The logging feature records and displays the “conversation” between the user and the application. The first row of the logging feature displays the URL of the CallXML application and the global variables associated with each session. The application (program) creates and assigns values to global variables at the start of each session, which the entire application can access and modify. The subsequent row(s) display(s) the “conversation.” This example shows a one-way conversation (because the application does not accept any input from the user) in which the TTS says Hello World. The last row shows the end of session message, which states that the phone call has terminated. The logging feature assists developers in debugging their applications. By observing the “conversation,” a developer can determine at which point the application terminates. If the application terminates abruptly (“crashes”), the logging feature states the type and location of the error, so that a developer knows the particular section of the application on which to focus. The next example (Fig. 34.9) shows a CallXML application that reads the ISBN values of three Deitel textbooks—Internet and World Wide Web How to Program: Second Edition, XML How to Program and Java How to Program: Fourth Edition—based on the user’s touch-tone input. [Note: The following code has been formatted for presentation purposes.] 1 2 3 4 5 6 7 8 9 10 11\n\nWelcome. To obtain the ISBN of the Internet and World Wide Web How to Program: Second Edition, please enter 1. To obtain the ISBN of the XML How to Program,\n\nFig. 34.9\n\nCallXML example that reads three ISBN values (part 1 of 3). (Courtesy of Voxeo, © Voxeo Corporation 2000–2001.)\n\niw3htp2_34.fm Page 1287 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 Fig. 34.9\n\nAccessibility\n\n1287\n\nplease enter 2. To obtain the ISBN of the Java How to Program: Fourth Edition, please enter 3. To exit the application, please enter 4.\n\nFig. 34.9\n\nCallXML example that reads three ISBN values (part 3 of 3). (Courtesy of Voxeo, © Voxeo Corporation 2000–2001.)\n\nThe tag (line 7) encapsulates other CallXML tags. Usually, CallXML tags that perform a similar task should be enclosed within .... The block element in this example encapsulates the , , and tags. A block element can also contain nested block elements. Lines 20–23 show some attributes of the tag. The getDigits element obtains the user’s touch-tone response and stores it in the variable declared by the var attribute (i.e., ISBN). The maxDigits attribute (line 21) indicates the maximum number of digits that the application can accept. This application accepts only one character. If no number is stated, then the application uses the default value—nolimit.\n\niw3htp2_34.fm Page 1289 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1289\n\nThe termDigits attribute (line 22) contains the list of characters that terminate user input. When a character from this list is received as input, the CallXML application is notified that the last acceptable input has been received and that any character entered after this point is invalid. These characters do not terminate the call; they simply notify the application to proceed to the next step because the necessary input has been received. In our example, the values for termDigits are one, two, three or four. The default value for termDigits is the null value (\"\"). The maxTime attribute (line 23) indicates the maximum amount of time to wait for a user response (i.e., 60 seconds). If no input is received within the given time frame, then the CallXML application may terminate—a drastic measure. The default value for this attribute is 30 seconds. The onMaxSilence element (lines 27–37) is an event handler that is invoked when the maxTime (or maxSilence) expires. An event handler notifies the application of the appropriate action to perform. In this case, the application asks the user to enter a value because the maxTime has expired. After receiving input, getDigits (line 32) stores the value in the ISBN variable. The onTermDigit element (lines 39–68) is an event handler that notifies the application of the appropriate action to perform when users select one of the termDigits characters. At least one tag must be associated with the getDigits element, even if the default value (\"\") is used. We provide four actions that the application can perform depending on the user-entered value. For example, if the user enters 1, the application reads the ISBN value of the Internet and World Wide Web How to Program: Second Edition textbook. Line 72 contains the event handler, which terminates the telephone call when the user hangs up the telephone. Our event handler is an empty tag (i.e., there is no action to perform when this tag is invoked). The logging feature in Fig. 34.9 displays the “conversation” between the application and the user. The first row displays the URL of the application and the global variables of the session. The subsequent rows display the “conversation”—the application asks the caller which ISBN value to read, the caller enters 1 (Internet and World Wide Web How to Program: Second Edition) and the application reads the corresponding ISBN. The end of session message states that the application has terminated. Brief descriptions of several logic and action CallXML elements are provided in Fig. 34.10. Logic elements assign values to, and clear values from, the session variables, and action elements perform specified tasks, such as answering and terminating a telephone call during the current session. A complete list of CallXML elements is available at: www.oasis-open.org/cover/callxmlv2.html\n\n34.11 JAWS® for Windows JAWS (Job Access with Sound) is one of the leading screen readers on the market today. Henter-Joyce, a division of Freedom Scientific™, created this application to help people with visual impairments use technology. To download a demonstration version of JAWS, visit www.hj.com/JAWS/ JAWS37DemoOp.htm and select the JAWS 3.7 FREE Demo link. The demo expires\n\niw3htp2_34.fm Page 1290 Monday, July 23, 2001 4:29 PM\n\n1290\n\nAccessibility\n\nChapter 34\n\nafter 40 minutes. The computer must be rebooted before another 40-minute session can be started.\n\nElements\n\nDescription\n\nassign\n\nAssigns a value to a variable, var.\n\nclear\n\nClears the contents of the var attribute.\n\nclearDigits\n\nClears all digits that the user has entered.\n\ngoto\n\nNavigates to another section of the current CallXML application or to a different CallXML application. The value attribute specifies the application URL. The submit attribute lists the variables that are passed to the invoked application. The method attribute states whether to use the HTTP get or post request types when sending and retrieving information. A get request retrieves data from a Web server without modifying the contents, while the post request sends modified data.\n\nrun\n\nStarts a new CallXML session for each call. The value attribute specifies which CallXML application to retrieve. The submit attribute lists the variables that are passed to the invoked application. The method attribute states whether to use the HTTP get or post request type. The var attribute stores the identification number of the session.\n\nsendEvent\n\nAllows multiple sessions to exchange messages. The value attribute stores the message, and the session attribute specifies the identification number of the session that receives the message.\n\nanswer\n\nAnswers an incoming telephone call.\n\ncall\n\nCalls the URL specified by the value attribute. The callerID attribute contains the phone number that is displayed on a CallerID device. The maxTime attribute specifies the length of time to wait for the call to be answered before disconnecting.\n\nconference\n\nConnects multiple sessions so that people can participate in a conference call. The targetSessions attribute specifies the identification numbers of the sessions, and the termDigits attribute indicates the touch-tone keys that terminate the call.\n\nwait\n\nWaits for user input. The value attribute specifies how long to wait. The termDigits attribute indicates the touch-tone keys that terminate the wait element.\n\nplay\n\nPlays an audio file or a value that is stored as a number, date or amount of money and is indicated by the format attribute. The value attribute contains the information (location of the audio file, number, date or amount of money) that corresponds to the format attribute. The clearDigits attribute specifies whether or not to delete the previously entered input. The termDigits attribute indicates the touch-tone keys that terminate the audio file, etc.\n\nFig. 34.10 List of some CallXML elements (part 1 of 2).\n\niw3htp2_34.fm Page 1291 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1291\n\nElements\n\nDescription\n\nrecordAudio\n\nRecords an audio file and stores it at the URL specified by value. The format attribute indicates the file extension of the audio clip. Other attributes include termDigits, clearDigits, maxTime and maxSilence.\n\nFig. 34.10 List of some CallXML elements (part 2 of 2).\n\nThe JAWS demo is fully functional and includes an extensive, highly customized help system. Users can select which voice to use and the rate at which text is spoken. Users also can create keyboard shortcuts. Although the demo is in English, the full version of JAWS 3.7 allows the user to choose one of several supported languages. JAWS also includes special key commands for popular programs such as Microsoft Internet Explorer and Microsoft Word. For example, when browsing in Internet Explorer, JAWS’ capabilities extend beyond reading the content on the screen. If JAWS is enabled, pressing Insert + F7 in Internet Explorer opens a Links List dialog, which displays all the links available on a Web page. For more information about JAWS and the other products offered by Henter-Joyce, visit www.hj.com.\n\n34.12 Other Accessibility Tools Many additional accessibility products are available to assist people with disabilities. This section describes a variety of accessibility products, including hardware items and advanced technologies. A braille keyboard, in addition to having each key labeled with the letter it represents, has the equivalent braille symbol printed on the key. Braille keyboards are combined most often with a speech synthesizer or a braille display, so users can interact with the computer to verify that their typing is correct. Speech synthesis is another research-intensive area that will benefit people with disabilities. Speech synthesizers have been used for many years to aid those who are unable to communicate verbally. However, the growing popularity of the Web has prompted a great deal of work in the field of speech synthesis and speech recognition. These technologies are allowing individuals with disabilities to use computers more than ever before. The development of speech synthesizers is also enabling the improvement of other technologies, such as VoiceXML and AuralCSS (www.w3.org/TR/REC-CSS2/ aural.html). These tools allow people with visual impairment and the illiterate to access Web sites. Despite the existence of adaptive software and hardware for people with visual impairments, the accessibility of computers and the Internet is still hampered by the high costs, rapid obsolescence and unnecessary complexity of current technology. Moreover, almost all software currently available requires installation by a person who can see. Ocularis is a project launched in the open-source community to help address these problems. Open source software for people with visual impairments already exists, and although it is often superior to its proprietary, closed-source counterparts, it has not yet reached its full poten-\n\niw3htp2_34.fm Page 1292 Monday, July 23, 2001 4:29 PM\n\n1292\n\nAccessibility\n\nChapter 34\n\ntial. Ocularis ensures that the blind can use the Linux operating system fully, by providing an Audio User Interface (AUI). Products that integrate with Ocularis include a word processor, calculator, basic finance application, Internet browser and e-mail client. A screen reader will also be included with programs that have a command-line interface. The official Ocularis Web site is located at ocularis.sourceforge.net. People with visual impairments are not the only beneficiaries of the effort being made to improve markup languages. People with hearing impairments also have a number of tools to help them interpret auditory information delivered over the Web, such as Synchronized Multimedia Integration Language (SMIL™), discussed in Chapter 33, Multimedia. This markup language is designed to add extra tracks—layers of content found within a single audio or video file—to multimedia content. The additional tracks can contain closed captioning. Technologies also are being designed to help people with severe disabilities, such as quadriplegia, a form of paralysis that affects the body from the neck down. One such technology, EagleEyes, developed by researchers at Boston College (www.bc.edu/ eagleeyes), is a system that translates eye movements into mouse movements. Users move the mouse cursors by moving their eyes or heads and thereby can control computers. The company CitXCorp is developing new technology that translates Web information through the telephone. Information on a specific topic can be accessed by dialing the designated number. The new software is expected to be made available to users for $10 per month. For more information on regulations governing the design of Web sites to accommodate people with disabilities, visit www.access-board.gov. In alliance with Microsoft, GW Micro, Henter-Joyce and Adobe Systems, Inc. are also working on software to aid people with disabilities. JetForm Corp also is accommodating the needs of people with disabilities by developing server-based XML software. The new software allows users to download a format that best meets their needs. There are many services on the Web that assist e-business owners in designing their Web sites to be accessible to individuals with disabilities. For additional information, the U.S. Department of Justice (www.usdoj.gov) provides extensive resources detailing legal issues and current technologies related to people with disabilities. These examples are just a few of the accessibility projects and technologies that currently exist. For more information on Web and general computer accessibility, see the resources provided in Section 34.14, Internet and World Wide Web Resources.\n\n34.13 Accessibility in Microsoft® Windows® 2000 Beginning with Microsoft Windows 95, Microsoft has included accessibility features in its operating systems and many of its applications, including Office 97, Office 2000 and Netmeeting. In Microsoft Windows 2000, the accessibility features have been significantly enhanced. All the accessibility options provided by Windows 2000 are available through the Accessibility Wizard, which guides users through all the Windows 2000 accessibility features and configures their computers according to the chosen specifications. This section guides users through the configuration of their Windows 2000 accessibility options using the Accessibility Wizard. To access the Accessibility Wizard, users must have Microsoft Windows 2000. Click the Start button and select Programs followed by Accessories, Accessibility and\n\niw3htp2_34.fm Page 1293 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1293\n\nAccessibility Wizard. When the wizard starts, the Welcome screen is displayed. Click Next to display a dialog (Fig. 34.11) that asks the user to select a font size. Click Next. Figure 34.12 shows the next dialog displayed. This dialog allows the user to activate the font size settings chosen in the previous window, change the screen resolution, enable the Microsoft Magnifier (a program that displays an enlarged section of the screen in a separate window) and disable personalized menus (a feature which hides rarely used programs from the start menu, which can be a hindrance to users with disabilities). Make selections and click Next.\n\nFig. 34.11 Font Size dialog.\n\nFig. 34.12 Display Settings dialog.\n\niw3htp2_34.fm Page 1294 Monday, July 23, 2001 4:29 PM\n\n1294\n\nAccessibility\n\nChapter 34\n\nThe next dialog (Fig. 34.13) displayed asks questions about the user’s disabilities, which allows the Accessibility Wizard to customize Windows to better suit their needs. We selected everything for demonstration purposes. Click Next to continue.\n\n34.13.1 Tools for People with Visual Impairments When we checked all the options in Fig. 34.13, the wizard began configuring Windows for people with visual impairments. As shown in Fig. 34.14, this dialog box allows the users to resize the scroll bars and window borders to increase their visibility. Click Next to proceed to the next dialog.\n\nFig. 34.13 Accessibility Wizard initialization options.\n\nFig. 34.14 Scroll Bar and Window Border Size dialog.\n\niw3htp2_34.fm Page 1295 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1295\n\nThe dialog in Fig. 34.15’s dialog allows the user to resize icons. Users with poor vision, as well as users who have trouble reading, benefit from large icons. Clicking Next displays the Display Color Settings dialog (Fig. 34.16). These settings allow users to change Windows’ color scheme and resize various screen elements. Click Next to view the dialog (Fig. 34.17) for customizing the mouse cursor.\n\nFig. 34.15 Setting up window element sizes.\n\nFig. 34.16 Display Color Settings options.\n\niw3htp2_34.fm Page 1296 Monday, July 23, 2001 4:29 PM\n\n1296\n\nAccessibility\n\nChapter 34\n\nFig. 34.17 Accessibility Wizard mouse cursor adjustment tool.\n\nAnyone who has ever used a laptop computer knows how difficult it is to see the mouse cursor. This is also a problem for people with visual impairments. To help solve this problem, the wizard offers larger cursors, black cursors and cursors that invert the colors of objects underneath them. Click Next.\n\n34.13.2 Tools for People with Hearing Impairments This section, which focuses on accessibility for people with hearing impairments, begins with the SoundSentry window (Fig. 34.18). SoundSentry is a tool that creates visual signals when system events occur. For example, people with hearing impairments are unable to hear the beeps that normally warn users, so SoundSentry flashes the screen when a beep occurs. To continue to the next dialog, click Next. The next window is the ShowSounds window (Fig. 34.19). ShowSounds adds captions to spoken text and other sounds produced by today’s multimedia-rich software. For ShowSounds to work, software developers must provide the captions and spoken text specifically within their software. Make selections and click Next.\n\n34.13.3 Tools for Users Who Have Difficulty Using the Keyboard The next dialog is StickyKeys (Fig. 34.20). StickyKeys is a program that helps users who have difficulty pressing multiple keys at the same time. Many important computer commands can be invoked only by pressing specific key combinations. For example, the reboot command requires pressing Ctrl+Alt+Delete simultaneously. StickyKeys allows the user to press key combinations in sequence rather than at the same time. Click Next to continue to the BounceKeys dialog (Fig. 34.21). Another common problem for certain users with disabilities is accidentally pressing the same key more than once. This problem typically is caused by holding a key down too long. BounceKeys forces the computer to ignore repeated keystrokes. Click Next.\n\niw3htp2_34.fm Page 1297 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nAccessibility\n\n1297\n\nFig. 34.18 SoundSentry dialog.\n\nFig. 34.19 ShowSounds dialog.\n\nToggleKeys (Fig. 34.22) alerts users that they have pressed one of the lock keys (i.e., Caps Lock, Num Lock and Scroll Lock) by sounding an audible beep. Make selections and click Next. Next, the Extra Keyboard Help dialog (Fig. 34.23) is displayed. This section activates a tool that displays information such as keyboard shortcuts and tool tips when they are available. Like ShowSounds, this tool requires that software developers provide the content to be displayed. Clicking Next will load the MouseKeys (Fig. 34.24) customization window.\n\niw3htp2_34.fm Page 1298 Monday, July 23, 2001 4:29 PM\n\n1298\n\nAccessibility\n\nFig. 34.20 StickyKeys window.\n\nFig. 34.21 BounceKeys dialog.\n\nChapter 34\n\niw3htp2_34.fm Page 1299 Monday, July 23, 2001 4:29 PM\n\nChapter 34\n\nFig. 34.22 ToggleKeys window.\n\nFig. 34.23 Extra Keyboard Help dialog.\n\nAccessibility\n\n1299\n\niw3htp2_34.fm Page 1300 Monday, July 23, 2001 4:29 PM\n\n1300\n\nAccessibility\n\nChapter 34\n\nFig. 34.24 MouseKeys window.\n\nMouseKeys is a tool that uses the keyboard to emulate mouse movements. The arrow keys direct the mouse, while the 5 key sends a single click. To double click, the user must press the + key; to simulate holding down the mouse button, the user must press the Ins (Insert) key and to release the mouse button, the user must press the Del (Delete) key. To continue to the next screen in the Accessibility Wizard, click Next. Today’s computer tools are made almost exclusively for right-handed users, including most computer mice. Microsoft recognized this problem and added the Mouse Button Settings window (Fig. 34.25) to the Accessibility Wizard. This tool allows the user to create a virtual left-handed mouse by swapping the button functions. Click Next.\n\nFig. 34.25 Mouse Button Settings window.\n\niw3htp2_34.fm Page 1301 Monday, Jul"
    }
}