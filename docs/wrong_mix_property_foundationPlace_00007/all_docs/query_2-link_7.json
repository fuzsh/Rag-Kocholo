{
    "id": "wrong_mix_property_foundationPlace_00007_2",
    "rank": 7,
    "data": {
        "url": "https://patents.google.com/patent/US6687696B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US6687696B2 - System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models - Google Patents",
        "top_image": "https://patentimages.storage.googleapis.com/e8/2c/13/9cb38962412bbb/US06687696-20040203-M00004.png",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/02/57/e5/8b795e95ed29c5/US06687696-20040203-D00000.png",
            "https://patentimages.storage.googleapis.com/9a/f0/b9/d2a4a90de4e382/US06687696-20040203-D00001.png",
            "https://patentimages.storage.googleapis.com/b0/b0/54/a9629298103fa2/US06687696-20040203-D00002.png",
            "https://patentimages.storage.googleapis.com/de/2f/e4/33b54ae227a2ce/US06687696-20040203-D00003.png",
            "https://patentimages.storage.googleapis.com/0c/18/b3/f7455cc6cc969e/US06687696-20040203-D00004.png",
            "https://patentimages.storage.googleapis.com/94/1d/94/069f2fe1f5f4ab/US06687696-20040203-D00005.png",
            "https://patentimages.storage.googleapis.com/22/54/42/9f0816aec43a95/US06687696-20040203-D00006.png",
            "https://patentimages.storage.googleapis.com/20/10/16/865e44b3d314e5/US06687696-20040203-D00007.png",
            "https://patentimages.storage.googleapis.com/90/5d/c3/c1b6ac1713a390/US06687696-20040203-D00008.png",
            "https://patentimages.storage.googleapis.com/f4/e3/3c/d493ef8cca2bcc/US06687696-20040203-D00009.png",
            "https://patentimages.storage.googleapis.com/17/a9/b6/06c0871887e67f/US06687696-20040203-D00010.png",
            "https://patentimages.storage.googleapis.com/4e/01/bc/cca1007d9e464b/US06687696-20040203-D00011.png",
            "https://patentimages.storage.googleapis.com/53/1a/cf/f548992bb0afd2/US06687696-20040203-D00012.png",
            "https://patentimages.storage.googleapis.com/13/4f/b2/8bc5bb23423ae6/US06687696-20040203-D00013.png",
            "https://patentimages.storage.googleapis.com/7b/2f/aa/863a4a05834ccf/US06687696-20040203-D00014.png",
            "https://patentimages.storage.googleapis.com/67/77/eb/d53ed3cc57340e/US06687696-20040203-D00015.png",
            "https://patentimages.storage.googleapis.com/f2/8c/8b/0292c46754f1cc/US06687696-20040203-M00001.png",
            "https://patentimages.storage.googleapis.com/0a/08/e0/350382af19d3da/US06687696-20040203-M00002.png",
            "https://patentimages.storage.googleapis.com/91/43/ef/ba598fa1adb399/US06687696-20040203-M00003.png",
            "https://patentimages.storage.googleapis.com/e8/2c/13/9cb38962412bbb/US06687696-20040203-M00004.png",
            "https://patentimages.storage.googleapis.com/da/8e/29/c053128d6ebec8/US06687696-20040203-M00005.png",
            "https://patentimages.storage.googleapis.com/f4/0b/9a/f3d05f1f4e38f5/US06687696-20040203-M00006.png",
            "https://patentimages.storage.googleapis.com/55/d7/59/c032e5d3b64e09/US06687696-20040203-M00007.png",
            "https://patentimages.storage.googleapis.com/4b/85/23/1e26d4b7e2ed68/US06687696-20040203-M00008.png",
            "https://patentimages.storage.googleapis.com/18/fd/83/f828378f4ad4c0/US06687696-20040203-M00009.png",
            "https://patentimages.storage.googleapis.com/3e/0f/db/e733c5a98ef92b/US06687696-20040203-M00010.png",
            "https://patentimages.storage.googleapis.com/c6/9c/82/83a23ac50f3aa5/US06687696-20040203-M00011.png",
            "https://patentimages.storage.googleapis.com/af/15/b7/9929d12b221651/US06687696-20040203-M00012.png",
            "https://patentimages.storage.googleapis.com/2b/c3/b7/6d9dc8df6d0c31/US06687696-20040203-M00013.png",
            "https://patentimages.storage.googleapis.com/8b/05/d7/ddf01bc33ad76c/US06687696-20040203-M00014.png",
            "https://patentimages.storage.googleapis.com/c3/36/f7/05ccc7cff311a8/US06687696-20040203-M00015.png",
            "https://patentimages.storage.googleapis.com/ed/bc/fb/5214167695f2ad/US06687696-20040203-M00016.png",
            "https://patentimages.storage.googleapis.com/55/fd/a7/b300cf71e66178/US06687696-20040203-M00017.png",
            "https://patentimages.storage.googleapis.com/ce/7f/35/fe450aac48a215/US06687696-20040203-M00018.png",
            "https://patentimages.storage.googleapis.com/6b/a9/67/e863531794c4fc/US06687696-20040203-M00019.png",
            "https://patentimages.storage.googleapis.com/a1/5b/30/99b0872ea9d9c8/US06687696-20040203-M00020.png",
            "https://patentimages.storage.googleapis.com/66/ea/46/041a51f95b0643/US06687696-20040203-M00021.png",
            "https://patentimages.storage.googleapis.com/44/e2/15/93bf47bfea45d9/US06687696-20040203-M00022.png",
            "https://patentimages.storage.googleapis.com/7e/13/ad/df03bf9ede03f5/US06687696-20040203-M00023.png",
            "https://patentimages.storage.googleapis.com/3a/3c/8a/c769b515a10977/US06687696-20040203-M00024.png",
            "https://patentimages.storage.googleapis.com/6b/63/b2/001e07b3cc50ec/US06687696-20040203-M00025.png",
            "https://patentimages.storage.googleapis.com/e1/5c/32/5ac78bb17dade0/US06687696-20040203-M00026.png",
            "https://patentimages.storage.googleapis.com/2e/ce/a3/924a1db09f2c34/US06687696-20040203-M00027.png",
            "https://patentimages.storage.googleapis.com/b5/a2/6b/e08f1b4456d648/US06687696-20040203-M00028.png",
            "https://patentimages.storage.googleapis.com/bf/cc/e3/24c6faf7620bf8/US06687696-20040203-M00029.png",
            "https://patentimages.storage.googleapis.com/47/3f/78/7e7ac80ed97537/US06687696-20040203-M00030.png",
            "https://patentimages.storage.googleapis.com/39/ac/0e/5ba207fa046ecb/US06687696-20040203-M00031.png",
            "https://patentimages.storage.googleapis.com/90/76/fe/8308337008fd51/US06687696-20040203-M00032.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2000-07-26T00:00:00",
        "summary": "",
        "meta_description": "The disclosed system implements a novel method for personalized filtering of information and automated generation of user-specific recommendations. The system uses a statistical latent class model, also known as Probabilistic Latent Semantic Analysis, to integrate data including textual and other content descriptions of items to be searched, user profiles, demographic information, query logs of previous searches, and explicit user ratings of items. The disclosed system learns one or more statistical models based on available data. The learning may be reiterated once additional data is available. The statistical model, once learned, is utilized in various ways: to make predictions about item relevance and user preferences on un-rated items, to generate recommendation lists of items, to generate personalized search result lists, to disambiguate a users query, to refine a search, to compute similarities between items or users, and for data mining purposes such as identifying user communities.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US6687696B2/en",
        "text": "This application claims the benefit of U.S. Provisional application No. 60/220,926, filed Jul. 26, 2000. Application Serial No. 60/220,926 is hereby incorporated by reference.\n\nTECHNICAL FIELD\n\nThe present invention relates generally to data processing systems and more specifically to a personalized search engine that utilizes latent class models called aspect models or Probabilistic Latent Semantic Analysis or Indexing.\n\nBACKGROUND OF THE INVENTION\n\nThe rapid growth of digital data storage and the overwhelming supply of on-line information provided by today's communication networks creates a risk of constant information overload. One of the key problems of modern information society is the increasing difficulty in accessing relevant information while suppressing the overwhelming mass of irrelevant data. Most importantly, the notion of relevance is highly individual and thus difficult to formalize in general terms. Information Filtering refers to the general problem of separating useful and important information from nuisance data. Individual users have different preferences, opinions, judgments, tastes, and cultural backgrounds. In order to support different individuals in their quest for information, an automated filtering system has to take into account the diversity of preferences and the inherent relativity of information value.\n\nOne commonly distinguishes between (at least) two major approaches to information filtering. The first approach is content-based filtering in which information organization is based on properties of the object or the carrier of information. The second approach is collaborative filtering (or social filtering), in which the preference-behavior and qualities of other persons are exploited in speculating about the preferences of a particular individual. Information Filtering technology had a huge impact on the development of the Internet and the e-commerce boom.\n\nSearch engines are classical content-based systems based on pattern matching technology to quickly retrieve information based on query keywords. Search engines are fast and have proven to be scalable to data sets of the size of the Internet, but they have inherent limitations. Due to the simple nature of direct pattern matching they provide no understanding of the sense of a word and the context of its use, often resulting in an unexpected variety of search results. These results are typically explained by word matching, but are meaningless on the intentional level. Search engines typically are unable to effectively process over-specific queries where keywords are closely related to actual document content, yet do not appear in the actual text. Search engines are also frequently non-personalized, i.e., they provide the same results, independent of the user history, and they have no effective mechanism to learn from user satisfaction.\n\nAt the other end of the spectrum, E-commerce sites use recommender systems to suggest products to their customers. The products can be recommended based on the top overall sellers on a site, or on the demographics of the customer, or an analysis of the past buying behavior of the customer as a prediction for future buying behavior. Recommender systems aim at personalization on the Web, enabling individual treatment of each customer. However, recommender systems and their underlying collaborative filtering techniques have several shortcomings. Poor predictions at best can be made for new objects and new users (âEarly rater problemâ). In many domains, only a small percentage of possible items receive ratings for a given user (âScarcity problemâ). There are often users with different interests and tastes than any other users in the database (âGrey sheep problemâ). More fundamentally, while many users may share some common interest, it may be extremely difficult to find a sufficient number of users that share all interests.\n\nTherefore, in light of the foregoing deficiencies in the prior art, the applicant's invention is herein presented.\n\nSUMMARY OF THE INVENTION\n\nThe disclosed system provides a method for the personalized filtering of information and the automated generation of user-specific recommendations. The system goes through 3 phases: 1) Information Gathering, 2) System Learning, and 3) Information Retrieval. The disclosed system is concerned primarily with the final two phases (System Learning and Information Retrieval). In the Information Gathering phase, information about the data to be retrieved (DOCUMENT DATA) and about the individual users (USER DATA) is collected. The USER DATA can be gathered explicitly through questionnaires, etc. or can be implied though observing user behavior such as Internet history logs, demographic information, or any other relevant sources of information. The DOCUMENT DATA can be gathered though a variety of methods including Internet crawling, topic taxonomies or any other relevant source of information. Once the Information Gathering phase is completed, the System Learning phase is initiated. The system employs a statistical algorithm that uses available USER DATA and DOCUMENT DATA to create a statistical latent class model (MODEL), also known as Probabilistic Latent Semantic Analysis (PLSA). The system learns one or more MODELS based on the USER DATA, DOCUMENT DATA, and the available database containing data obtained from other users. Within the MODEL, probabilities for words extracted from training data are calculated and stored in at least one matrix. An extended inverted index may also be generated and stored along with the MODEL in order to facilitate more efficient information gathering. The MODEL may be used in other applications such as the unsupervised learning of topic hierarchies and for other data mining functions such as identifying user communities. Various parts of the Information Gathering phase and the System Learning phase are repeated from time to time in order to further refine or update the MODEL. This refined or updated model will result in even higher levels of accuracy in processing the user's query. The final phase is the Information Retrieval phase. The user may enter a query. Once the query is entered into the system, the MODEL is utilized in calculating probabilities for every word in a document based upon at least 1) the user query, or 2) words associated with the users query in the MODEL, or 3) document information. All of the probabilities for a given document are added together yielding a total relevance âscoreâ after which related documents are compared using this relevance score. The results are returned in descending order of relevance organized into at least one result list. Through the use of the MODEL, the system provides two benefits to the user: 1) the search results are personalized as each MODEL may be created in part using USER DATA, and 2) results for new users are somewhat personalized from the initial use through collaborative filtering based upon USER DATA for other system users.\n\nSUMMARY OF THE DRAWINGS\n\nFIG. 1 is a table showing possible queries in a combined content/collaborative system.\n\nFIG. 2 is a schematic representation of the cluster-abstraction structure.\n\nFIG. 3 is a schematic representation showing the assignment of occurrences to abstraction levels in terms of latent class variables.\n\nFIG. 4 is a graphical representation of the aspect model in the asymmetric parameterization.\n\nFIG. 5 is a graphical representation of the aspect model in the symmetric parameterization.\n\nFIG. 6 is a graphical representation of the probability sub-simplex spanned by the aspect model.\n\nFIG. 7 is a table showing eight selected factors from a 128-factor decomposition along with their respective most probable words in the class-conditional distribution P(w|z), from top to bottom in descending order.\n\nFIG. 8 is a graphical representation of abstracts of 2 exemplary documents from a cluster collection along with latent class posterior probabilities and word probabilities.\n\nFIG. 9 is a schematic representation showing the information aggregation and integration of the present invention;\n\nFIG. 10 is a schematic representation illustrating the various modules of one implementation of the present invention;\n\nFIG. 11 is a second schematic representation illustrating the various modules of one implementation of the present invention;\n\nFIG. 12 is a schematic representation illustrating a retrieval engine for the present invention; and\n\nFIG. 13 is a schematic representation illustrating the overall implementation of the present invention.\n\nFIG. 14 is a flow chart illustrating the overall method for generating recommendation lists.\n\nFIG. 15 is a flow chart illustrating the process of training a latent class model.\n\nDETAILED DESCRIPTION OF THE INVENTION\n\nThe following detailed description sets forth preferred embodiments for a search engine. This description should not be interpreted as limiting the use of the invention to this particular application. Rather, the present invention may be utilized for various functions including information retrieval, data mining, as a recommender system, and to identify user communities. Further, reference is made to the accompanying drawings, figures and equations, which, in conjunction with this detailed description, illustrate and describe the search engine. The invention may be embodied in many different forms and should not be construed as limited only to the disclosed embodiments and equations.\n\nGenerally\n\nThe information available in typical information filtering applications is highly diverse. Thus, we are first concerned with abstracting away from this diversity in order to identify a few fundamental types of observation data. Co-occurrence data refers to a domain with two or more finite sets of objects in which observations are made for joint occurrences of objects, i.e., typically consist of tuples with one element from either set. This includes event dyadic data, histogram data, and single stimulus preference data as special cases. Co-occurrence data arises naturally in many applications ranging from computational linguistics and information retrieval to preference analysis and computer vision.\n\nIn online information filtering applications, we find three fundamental variables, namely objects (documents or products) oÎµO, users or customers uÎµU, and a vocabulary wÎµW of terms and descriptors. Here O, U and W are discrete spaces (i.e. the set of all objects, the set of all users and the underlying vocabulary) so observations can be modeled as co-occurrences of these basic variables, e.g. user queries as (u;w1, . . . , wn), object description (o;w1, . . . , wn), buying events (u, o) etc.\n\nMore formally, our starting point is an observation sequence S=(xI n n), 1â¦nâ¦N, which is a realization of an underlying sequence of random variables (XI n n) 1â¦nâ¦N. Superscript indices are used to number observations. Capital letters without superscripts X are used to refer to generic instances of random variables with values in O, U or W, and XI refer to a generic co-occurrence where I is a multi-index for addressing the different co-occurring variables involved. In the modeling approach, it is assumed that the choice of a specific type of co-occurrence In for the n-th observation is predetermined and is not part of the statistical model.\n\nIn this fashion, information filtering can be viewed in a statistical setting as completion of co-occurrences based on partial information, in essence the prediction of a response variable given a set of predictors. For example, a search engine functionality is modeled as predicting o given w1, . . . , wn or, in a statistical setting as computing the probability P(o|w1, . . . , wn) of observing o given the query terms. A recommender system is implemented by computing P(o|u) while P(o|u;w1, . . . , wn) implements a personalized search engine. Several other possible applications seem reasonable. FIG. 1 is a table showing possible queries in a combined content/collaborative system (taken in part from Patrick Baudisch, Joining collaborative and content-based filtering. CHI'99 Workshop: Interacting with Recommender Systems, 1999.) FIG. 1 provides an overview of possible modalities in a combined content/collaborative system where the rows relate to a query and the columns relate to a target. The middle row 2 of FIG. 1 represents actual recommender functionality, where users are interested in retrieving objects. The last row 4 is of special interest for marketing applications, where users are to be identified.\n\nThe key problem in the statistical analysis of co-occurrence data is data sparseness. While counts n(xI)=|xI n n:xI n n=xI| of the empirical frequency of an event xI capture all that can be possibly measured from the data, these sufficient statistics are subject to statistical fluctuations that for large underlying spaces and higher order co-occurrences become overwhelming, and therefore a direct estimation of joint occurrence probabilities becomes prohibitive.\n\nIn describing the invention, we follow three stages of describing Probabilistic Latent Semantic Analysis as the invented fundamental new principle for data analysis, prediction, and other applications.\n\nFirst, we start with Probabilistic Latent Semantic Indexing which is the PROBABILISTIC LATENT SEMANTIC ANALYSIS realization for the case of only two types of observations, namely documents and words. It is thus used for classical information retrieval applications and indexing of document collections, hence the name. Probabilistic Latent Semantic Indexing has somewhat related to classical Latent Semantic Indexing, so the relationship is discussed in detail. We also discuss the relationship with distributional clustering, its most closely related statistical model that we are aware of.\n\nSecond, we then introduce the full, flat Probabilistic Latent Semantic Analysis model for generic multiway co-occurrence data that can be used, e.g. for joint collaborative and content filtering. While for the special case Probabilistic Latent Semantic Indexing several relationships to known proposals can be drawn, no competing approach is known for the full Probabilistic Latent Semantic Analysis method.\n\nFinally, we address on how to extend the invention to hierarchical probabilistic models, which we call cluster-abstraction models. These are especially useful when data is inherently hierarchical and can be employed in many data mining tasks.\n\nProbabilistic Latent Semantic Indexing\n\nThe starting point for Probabilistic Latent Semantic Indexing is a statistical model, which is also called (dyadic) aspect model. The aspect model is a latent variable model for co-occurrence data which associates an unobserved class variable aÎµA={a1, . . . , aK} with each observation. The modeling principle of latent variable models is the specification of a joint probability distribution for latent and observable variables. This unifies statistical modeling and structure detection: a probabilistic model of the observables is obtained by marginalization, while Bayes' rule induces posterior probabilities on the latent space of structures with respect to given observations. The latter provides a natural solution for topic extraction, word sense disambiguation and cataloging which correspond to different values of the hidden variables. As a key advantage, mixture models provide both, a parsimonious yet flexible parameterization of probability distributions with good generalization performance on sparse data, as well as structural information about data-inherent grouping structure, which is discussed in detail below in the section entitled âThe Cluster-Abstraction Modelâ. In the plain Probabilistic Latent Semantic Indexing model a joint probability model over OxW is defined by the mixture: P î¢ ( o , w ) = P î¢ ( o ) î¢ P î¢ ( w | o ) , P î¢ ( w | o ) = â a â A î¢ P î¢ ( w | a ) î¢ P î¢ ( a | o ) . ( 1 )\n\nThe aspect model introduces a conditional independence assumption, namely that o and w are independent conditioned on the state of the associated latent variable. FIG. 4 is a graphical representation of the aspect model in the asymmetric parameterization. Since the cardinality of a is smaller than the number of documents/words in the collection, a acts as a bottleneck variable in predicting words. It is worth noticing that the model can be equivalently parameterized by: P î¢ ( o , w ) = â a â A î¢ P î¢ ( a ) î¢ P î¢ ( o | a ) î¢ P î¢ ( w | a ) ( 2 )\n\nwhich is perfectly symmetric in both entities, documents and words. FIG. 5 is a graphical representation of the aspect model in the symmetric parameterization.\n\nThe standard procedure for maximum likelihood estimation in latent variable models is the Expectation Maximization (EM) algorithm. Expectation Maximization alternates two coupled steps: (i) an expectation (E) step where posterior probabilities are computed for the latent variables, (ii) an maximization (M) step, where parameters are updated. Expectation Maximization is discussed in more detail in the section on multivariate aspect models. Standard calculations yield the E-step equation: P î¢ ( a | o , w ) = P î¢ ( a ) î¢ P î¢ ( o | a ) î¢ P î¢ ( w | a ) â a â² â A î¢ P î¢ ( a â² ) î¢ P î¢ ( o | a â² ) î¢ P î¢ ( w | a â² ) ( 3 )\n\nas well as the following M-step formulae: P î¢ ( w | a ) â â o â O î¢ n î¢ ( o , w ) î¢ P î¢ ( a | o , w ) , ( 4 ) P î¢ ( o | a ) â â w â W î¢ n î¢ ( o , w ) î¢ P î¢ ( a | o , w ) , ( 5 ) P î¢ ( a ) â â o â O î¢ â w â W î¢ n î¢ ( o , w ) î¢ P î¢ ( a | o , w ) . ( 6 )\n\nBefore discussing algorithmic refinements, we will study the relationship between the proposed model and the classical Latent Semantic Indexing in more detail. Consider the class-conditional multinomial distributions P(Â·|a) over the vocabulary which we call factors. They can be represented as points on the Mâ1 dimensional simplex of all possible multinomials. Via its convex hull, this set of K points defines a Lâ¦Kâ1 dimensional sub-simplex. The modeling assumption expressed by equation (1) is that conditional distributions P(w|o) for all documents are approximated by a multinomial representable as a convex combination of factors P(w|a), where the mixing weights P(a|o) uniquely define a point on the spanned sub-simplex. FIG. 6 is a graphical representation of the probability sub-simplex spanned by the aspect model. Despite the discreteness of the introduced latent variables, a continuous latent space is obtained within the space of all multinomial distributions. Since the dimensionality of the sub-simplex is â¦Kâ1 as opposed to a maximum of Mâ1 for the complete probability simplex, this performs a dimensionality reduction in the space of multinomial distributions and the spanned sub-simplex can be identified with a probabilistic latent semantic space.\n\nTo stress this point and to clarify the relation to Latent Semantic Analysis, let us rewrite the aspect model as parameterized by equation (2) in matrix notation. Hence define matrices by Ã=(P(oi|ak))i,k, {circumflex over (V)}=(P(wj|ak))j,k and â ^ î¢ = ( diag î¢ ( P î¢ ( z k ) ) ) k .\n\nThe joint probability model P can then be written as a matrix product P = U ^ î¢ â ^ î¢ V ^ â² .\n\nComparing this with the Singular Value Decomposition UÎ£Vâ² of the matrix n(oi,wj), as computed in Latent Semantic Indexing, one can make the following observations: (i) outer products between rows of Ã and {circumflex over (V)} reflect conditional independence in Probabilistic Latent Semantic Indexing, (ii) the K factors correspond to the mixture components in the aspect model, and (iii) the mixing proportions in Probabilistic Latent Semantic Indexing substitute the singular values. The crucial difference between Probabilistic Latent Semantic Indexing and Latent Semantic Indexing, however, is the objective function utilized to determine the optimal decomposition/approximation.\n\nIn Latent Semantic Indexing, this is the L2- or Frobenius norm, which corresponds to an implicit additive Gaussian noise assumption on (possibly transformed) counts. In contrast, Probabilistic Latent Semantic Indexing relies on the likelihood function of multinomial sampling and aims at an explicit maximization of the predictive power of the model. As is well known, this corresponds to a minimization of the cross entropy or Kullback-Leibler divergence between the empirical distribution and the model, which is very different from any type of squared deviation. On the modeling side this offers important advantages, for example, the mixture approximation P of the co-occurrence table is a well-defined probability distribution and factors have a clear probabilistic meaning. In contrast, Latent Semantic Indexing does not define a properly normalized probability distribution and may even contain negative entries. In addition, there is no obvious interpretation of the directions in the Latent Semantic Indexing latent space, while the directions in the Probabilistic Latent Semantic Indexing space are interpretable as multinomial word distributions.\n\nLet us briefly discuss some elucidating examples at this point which will also reveal a further advantage of Probabilistic Latent Semantic Indexing over Latent Semantic Indexing in the context of polsemous words. We have generated a dataset (CLUSTER) with abstracts of 1568 documents on clustering and trained an aspect model with 128 latent classes. FIG. 7 is a table showing eight selected factors 50, 51, 52, 53, 54, 55, 56, 57 from a 128 factor decomposition along with their respective most probable words 60 in the class-conditional distribution P(w|z), from top to bottom in descending order. These pairs have been selected as the two factors 50 & 51, 52 & 53, 54 & 55, 56 & 57 that have the highest probability to generate the words âsegmentâ, âmatrixâ, âlineâ, and âpowerâ, respectively.\n\nThe sketchy characterization of the factors by their ten most probable words 60 already reveals interesting topics. In particular, notice that the term used to select a particular pair has a different meaning in either topic factor: (i) âSegmentâ 50, 51 refers to an image region in the first and to a phonetic segment in the second factor; (ii) âMatrixâ 52, 53 denotes a rectangular table of numbers and to a material in which something is embedded or enclosed; (iii) âLineâ 54, 55 can refer to a line in an image, but also to a line in a spectrum; and (iv) âPowerâ 56, 57 is used in the context of radiating objects in astronomy, but also in electrical engineering. FIG. 8 is a graphical representation of abstracts of two exemplary documents from the cluster collection along with latent class posterior probabilities. The posterior probabilities for the classes given the different occurrences of âsegmentâ 50, 51 indicate how likely it is for each of the factors in the first pair of FIG. 7 to have generated this observation. We have also displayed the estimates of the conditional word probabilities P{w=âsegmentâ|o1,2}. One can see that the correct meaning of the word âsegmentâ 50, 51 is identified in both cases. This implies that although âsegmentâ 50, 51 occurs frequently in both documents, the overlap in the factored representation is low, since âsegmentâ 50, 51 is identified as a polysemous word (relative to the chosen resolution level) whichâdependent on the contextâis explained by different factors.\n\nNext, the aspect model is compared with statistical clustering models. In clustering models for documents, one typically associates a latent class variable with each document in the collection. Most closely related to our invention is the distributional clustering model, which can be thought of as an unsupervised version of a naive Bayes' classifier. It can be shown that the conditional word probability of a probabilistic clustering model is given by: P î¢ ( w | o ) = â a â A î¢ P î¢ { c î¢ ( o ) = a } î¢ P î¢ ( w | a ) , ( 7 )\n\nwhere P{c(o)=a} is the posterior probability of document o having latent class a. It is a simple implication of Bayes' rule that these posterior probabilities will concentrate their probability mass on a certain value a with an increasing number of observations (i.e., with the length of the document). This means that although equations (1) and (7) appear algebraically similar, they are conceptually very different and yield in fact very different results. The aspect model assumes that document-specific distributions are a convex combination of aspects, while the clustering model assumes there is just one cluster-specific distribution, which is inherited by all documents in the cluster. In the distributional clustering model it is only the posterior uncertainty of the cluster assignments that induces some averaging over the class-conditional word distributions P(w|a).\n\nThus in clustering models the class-conditionals P(w|a) have to capture the complete vocabulary of a subset (cluster) of documents, while factors can focus on certain aspects of the vocabulary of a subset of documents. For example, a factor can be very well used to explain some fraction of the words occurring in a document, although it might not explain other words at all (e.g., even assign zero probability), because these other words can be taken care of by other factors. The difference between aspect and clustering models has to be emphasized. While the latent class structure of an aspect model partitions the observations, clustering models provide a group structure on object spaces. As a consequence, identical observations may have different latent classes in aspect models, whereas latent variables are shared by sets of observations in clustering models.\n\nProbabilistic Latent Semantic Analysis\n\nThe aspect model for multivariate co-occurrence data is built on the assumption that all co-occurrences in the sample S=(xI n n) 1â¦nâ¦N are independent and identically distributed and that random variables Xi n and Xj n iâ j are conditionally independent given the respective latent class. The randomized data generation process can be described as follows:\n\n(i) Choose an aspect a with probability P(A=a) (or, in short notation, P(a)), and\n\n(ii) Select xÎµ{O,U,W} for all iÎµI with probability P(x1|a).\n\nThe corresponding complete data probability, i.e., the joint probability of the data and a hypothetical instantiation for the latent variables, is given by: P î¢ ( S , a â ) = â n = 1 N î¢ P î¢ ( x I n , a n ) = â n = 1 N î¢ P î¢ ( a n ) î¢ â i â I î¢ P î¢ ( x i | a n ) ( 8 )\n\nBy summing over all possible realizations of the latent variables and grouping identical co-occurrences together, one obtains the usual mixture probability distribution on the observables, P î¢ ( S ) = â x I î¢ P î¢ ( x I ) n î¢ ( x I ) î¢ î¢ with ( 9 ) P î¢ ( x I ) = â a â A î¢ P î¢ ( a ) î¢ â i â I î¢ P î¢ ( x i | a ) . ( 10 )\n\nTwo fundamental problems arise in the context of statistical modeling, prediction or inference on one hand and model estimation or model learning on the other hand. In prediction, we have to compute probabilities P(XJ|xI, Î¸) for given model parameters Î¸=(P(a), P(xi|a)) where we summarize all continuous parameters in a vector Î¸. Remember that all spaces are discrete, thus e.g., P(a) corresponds to a vector of dimension K. The problem of efficient prediction is addressed below. Estimation or learning on the other hand refers to determining the model parameters Î¸ given a set of observations or training data S. It should, however, be emphasized that model estimation and prediction are computationally well-separated problems. Model learning can be performed offline, while online requirements often lead to high efficiency demands on prediction algorithms.\n\nIn the context of statistical models, learning can be identified with the problem of parameter estimation. Since the latent structure by definition consists of unobserved variables, the learning problem is essentially an unsupervised one. The present invention utilizes a novel Tempered Expectation Maximization (tempered EM, TEM) estimation procedure. Tempered Expectation Maximization is an effective learning procedure aspect models. In addition, it allows us to gradually control and reduce the effective degrees of freedoms used in the estimation process (as opposed to the maximal degree of freedoms allowed by the model itself). Tempered Expectation Maximization is a generalization of the standard Expectation Maximization (EM) algorithm used to compute maximum likelihood estimators for a probabilistic model. For better understanding, this standard algorithm is now described first. Maximum likelihood is implemented by maximizing the log-likelihood log P(S;Î¸) with respect to the model parameters, which have been concatenated in a vector Î¸ for notational convenience. The difficulties in maximizing a logarithm of a sum in the log-likelihood of the aspect model is overcome by Expectation Maximization. The Expectation Maximization algorithm and its extensions can be developed generically for the complete class of models covered by this invention and are easily adapted to the specific instances.\n\nExpectation Maximization results in an alternating procedure with two re-estimation steps. The first is an Expectation (E)-step for estimating the posterior probabilities of latent variables for a given parameter estimate Î¸â². The second is a Maximization (M)-step, which involves maximization of the expected complete data log-likelihood with respect to Î¸, where the average is performed based on the posterior probabilities computed in the E-step. The Expectation Maximization algorithm is known to increase the observed likelihood with each completed iteration, and converges to a (local) maximum under mild assumptions. The E-step equations for the class posterior probabilities in the aspect model can be derived from Bayes' rule and are given by: P î¢ ( a | x I ; Î¸ ) = P î¢ ( a ) î¢ â i â I î¢ P î¢ ( x i | a ) â a â² î¢ P î¢ ( a â² ) î¢ â i â I î¢ P î¢ ( x i | a â² ) . ( 11 )\n\nIt is straightforward to derive the M-step re-estimation formulae by differentiating the expected complete data log-likelihood with respect to Î¸. The latter is given by: Q î¢ ( Î¸ , Î¸ â² ) = â x I î¢ n î¢ ( x I ) î¢ â a î¢ P î¢ ( a | x I ; Î¸ â² ) î¢ log î¢ â î¢ P î¢ ( x I , a | Î¸ ) , ( 12 )\n\nwhere n (xI) again denotes the sufficient statistics (counts). The probabilities P(a) are easily estimated by: P î¢ ( a ) = â x I î¢ P î¢ ( a | x I ; Î¸ â² ) î¢ â î¢ n î¢ â î¢ ( x I ) / N .\n\nAfter introducing appropriate Lagrange multipliers to ensure the correct normalization one obtains for the M-step formulae P î¢ ( x i | a ) ~ â x I î¢ n î¢ ( x I ) î¢ P î¢ ( a | x I ; Î¸ â² ) . ( 13 )\n\nTempered Expectation Maximization is a novel generalization of Expectation Maximization-based model fitting that incorporates ideas from deterministic annealing based combinatorial optimization. Tempered Expectation Maximization pursues two main goals; (i) avoiding over-fitting by controlling the effective model complexity, and (ii), reducing the sensitivity of Expectation Maximization to local maxima.\n\nConsider, therefore, the general case of maximum likelihood estimation by the Expectation Maximization algorithm. The E-step by definition computes a posterior average of the complete data log-likelihood, which is maximized in the M-step. The tempered E-step at temperature T performs this average with respect to a distribution which is obtained by generalizing Bayes' formula such that the likelihood contribution is taken to the power of 1/T, i.e., in mnemonic notation: temperedâposteriorËpriorÃlikelihood1/T. For T>1 this amounts to increasing the influence of the prior which in turn results in a larger entropy of the tempered posteriors. For mathematical precision, consider the following objective function: F T î¢ ( Î¸ , Q î¢ ( a â ) ) = â a â î¢ Q î¢ ( a â ) î¢ [ log î¢ â î¢ P î¢ ( S | a â ; Î¸ ) - T î¢ â î¢ log î¢ Q î¢ ( a â ) P î¢ ( a â | Î¸ ) ] ( 14 )\n\nwhere Q({right arrow over (a)}) are variational parameters. Minimizing FT with respect to Q({right arrow over (a)}) then yields:\n\nQ({right arrow over (a)})âP(S|{right arrow over (a)};Î¸)1/T P({right arrow over (a)}|Î¸).ââ(15)\n\nFor T=1 the usual posterior Q({right arrow over (a)})=P ({right arrow over (a)}|S;Î¸) is obtained, which is equivalent to computing the standard E-step. In addition, for T=1 the derivative of the averaged complete data log-likelihood with respect to Î¸ equals the derivative of F1 in equation (14). Thus F1 provides a Lyapunov function for the Expectation Maximization-algorithm, which is minimized with respect to Q({right arrow over (a)}) in the E-step and with respect to Î¸ in the M-step. In the aspect model, the tempered E-step generalizing equation (11) is given by:\n\nP(a|x I;Î¸)âP(a)[P(x I |a)]1/T.ââ(16)\n\nFor fixed T>1 the tempered E-step performs a regularization based on entropy. This is the reason why tempered Expectation Maximization not only reduces the sensitivity to local minima but also controls the effective model complexity.\n\nThe Tempered Expectation Maximization algorithm is implemented in the following way:\n\n(i) Set T=1 and perform Expectation Maximization with early stopping.\n\n(ii) Increase Tân T(n>1) and perform one Tempered Expectation Maximization iteration.\n\n(iii) While performance on hold-out data improves: continue Tempered Expectation Maximization iterations,\n\n(iv) Return when increasing T does not yield further improvements\n\n(v) Return to step ii.\n\nWhile aspect models already provide substantial modeling flexibility, the number of aspects chosen introduces a notion of granularity and scale. It basically determines how many topics or user tastes can be modeled at the same time. However, these entities are naturally described on different resolutions. The present invention employs two different methods. In the sequel, a simple solution is described which trains independent models on multiple scales and then combines them additively. More specifically, denoted by P (xI; Ml) the prediction of an observation with signature I based on the l-th model Ml. Then the combined estimate: P î¢ ( x I ) = â l î¢ Î» I î¢ P î¢ ( x I ; M l ) ( 17 )\n\nis used to compute a probability estimate over different scales. The combination is convex, i.e., we require Î»lâ§0 and Î£lÎ»l=1. The model combination parameters Î»l are determined by running the Expectation Maximization algorithm on hold-out data, a method referred to as deleted interpolation. More precisely, for each observation in a hold-out data set, we compute in the E-step the probability that the observation xl is best âexplainedâ by Ml, P î¢ ( M l | x I ) = Î» l î¢ P î¢ ( x I ; M l ) â l â² î¢ Î» l â² î¢ P î¢ ( x I ; M l â² ) ( 18 )\n\nIn the M-step one simply sums up those posterior probabilities: Î» l â â x I î¢ P î¢ ( M l | x I ) . ( 19 )\n\nRe-iterating results in an estimate for the combination weights.\n\nFor large data sets, the Expectation Maximization algorithm may not be very efficient, since it requires cycling through all observations before actually performing a parameter update step. For highly redundant data sets, an additional intermediate update step based only on some fraction of the data can greatly accelerate the learning procedure. The extreme case would be to perform a parameter update step after each observation, which is usually called on-line learning. In an intermediate case, one would partition the data into blocks of observations and perform an incremental update step with a learning rate n after the E-step for a single block is completed:\n\nÎ¸new=(1âÎ·)Î¸old+Î·Î¸block,ââ(20)\n\nwhere Î¸block is the M-step estimate computed for a particular block of observations. n<1 is decreased according to a learning rate schedule, asymptotically as Î¸Î±+1/(t+c), where t is the step number and c is a constant.\n\nFor prediction, we are interested in calculating probabilities P(xI|xJ). Assuming we are interested in computing the probability of an object given a query and a user, P(o|w1, . . . , wn;u). The first difficulty arises from the fact that we basically train models for co-occurrences with single w, so we assume conditional independence of keywords given object and user, P î¢ ( w 1 , â¦ î¢ â , w n | o , u ) = â i î¢ P î¢ ( w i | o , u ) ( 21 )\n\nto simplify things. This ensures that different keywords can be generated from different hidden states. More formally, using Bayes' rule we obtain:\n\nP(o|w 1 , . . . , w n ; u)ËP(o|u)P(w i , . . . , w n |o,u)ââ(22)\n\n=P(o|u)ÏP(w i |o,u)ââ(23)\n\nby equation (14) where: P î¢ ( w i | o , u ) î¢ â = â a î¢ P î¢ ( w i | a ) î¢ P î¢ ( a | o , u ) ( 24 ) â î¢ = â a î¢ P î¢ ( w i | a ) î¢ P î¢ ( a | u ) â a â² î¢ P î¢ ( a | u ) î¢ P î¢ ( o | a â² ) î¢ P î¢ ( o | a ) , ( 25 ) P î¢ ( o | u ) î¢ â = â a î¢ P î¢ ( o | a ) î¢ P î¢ ( a | u ) , ( 26 ) P î¢ ( a | u ) î¢ â = P î¢ ( u | a ) î¢ P î¢ ( a ) â a â² î¢ P î¢ ( u | a â² ) î¢ P î¢ ( a â² ) . ( 27 )\n\nThe grouping of terms in equation (25) already indicates that for efficient computation we first evaluate the terms independent of o. Equation (27) can be computed offline with identical storage requirements. Other predictions can be carried out similarly by applying the rules of the calculus of probability theory starting from the trained model or combination of models.\n\nIn order to achieve an efficient implementation in a preferred embodiment, one should sparsen the representation of probability distributions by discarding probabilities that are below a certain threshold t. Basically, all parameter vectors are stored as sparse vectors, e.g. we set P(x|a)=0 iff P(x|a)<t. To achieve good approximation properties, t is made proportional on the number of entries in the vector P(x|a). In addition to this sparse model representation, we also sparsen the final result vectors as well as most intermediate entities like: P î¢ ( w i | a ) î¢ P î¢ ( a | u ) / â a â² î¢ P î¢ ( a | u ) î¢ P î¢ ( o | a â² ) ( 28 )\n\nto achieve maximal computational efficiency.\n\nThe Cluster-abstraction Model\n\nWe next describe the cluster abstraction model. As previously noted, mixture models provide structural information about data-inherent grouping structure and are thus well suited to perform data mining functions. The cluster abstraction model combines a (horizontal) clustering of documents with a (vertical) aspect model that explains shared factors on different levels of resolutions. The clustering part is demonstrated by the simplified, non-hierarchical version of the Cluster Abstraction Model, which performs âflatâ probabilistic clustering, described earlier as the distributional clustering model, see derivation above. Most hierarchical document clustering techniques utilize agglomerative algorithms, which generate a cluster hierarchy or dendogram as a by-product of successive cluster merging. In the Cluster Abstraction Model we will use an explicit abstraction model instead to represent hierarchical relations between document groups. This is achieved by extending the âhorizontalâ mixture model of the distributional clustering with a âverticalâ component that captures the specificity of a particular word wt in the context of a document o. It is assumed that each word occurrence (wt,o)=wot of a word wt in document o has an associated abstraction node a, the latter being identified with inner or terminal nodes of the cluster hierarchy. FIG. 2 is a schematic representation of the cluster abstraction structure. To formalize the sketched ideas, additional latent variable vectors ao with components aot are introduced which assign the words in o to exactly one of the nodes in the hierarchy. Based on the topology of the nodes in the hierarchy the following constraints between the cluster variables co and the abstraction variables aot are imposed:\n\na ot Îµ{a|a is above co in the hierarchy}ââ(28)\n\nThe notation a â c will be used as a shortcut to refer to nodes a above the terminal node c in the hierarchy. Equation (28) states that the admissible values of the latent abstraction variables aot for a particular document with latent class co are restricted to those nodes in the hierarchy that are predecessors of co. This breaks the permutation-symmetry of the abstraction nodes as well as of the document clusters. An abstraction node a at a particular place in the hierarchy can only be utilized to âexplainâ words of documents associated with terminal nodes in the subtree of a. FIG. 3 is a schematic representation showing the assigning occurrences to abstraction levels in terms of latent class variables. If o is assigned to c the choices for abstraction nodes for word occurrences wot are restricted to the âactiveâ (highlighted) vertical path 10. One may think of the Cluster Abstraction Model as a mixture model with a horizontal mixture of clusters and a vertical mixture of abstraction levels. Each horizontal component is a mixture of vertical components on the path to the root, vertical components being shared by different horizontal components according to the tree topology. Generalizing the non-hierarchical model, a probability distribution P(w|a) over words is attached to each node (inner or terminal) of the hierarchy.\n\nAfter application of the chain rule, the complete data model (i.e., the joint probability of all observed and latent variables) can be specified in three steps P(co=c;Î¸)=P(c), P(aot=a|co=c;=Î¸)=P(a|c,o), and P î¢ ( w o | a o ; Î¸ ) = â i = 1 n î¢ ( o ) î¢ P î¢ ( w ot | a ot ) . ( 29 )\n\nNote that additional document-specific vertical mixing proportions P (a|c,o) over abstraction nodes above cluster c have been introduced, with the understanding that P(a|c,o)=0 whenever it is not the case that a â c. If one makes the simplifying assumption that the same mixing proportions are shared by all documents assigned to a particular cluster (i.e., P(a|c,o)=P(a|c)), the solution degenerates to the distributional clustering model since one may always choose P(a|c)=Î´ac. However, we propose to use this more parsimonious model and fit P(a|c) from hold-out data (a fraction of words held out from each document), which is in the spirit of model interpolation techniques.\n\nAs for the distributional clustering model before, we will derive an Expectation Maximization algorithm for model fitting. The E-step requires to compute (joint) posterior probabilities of the form P(Cd=c, aot=a|wo;Î¸). After applying the chain rule one obtains: P î¢ ( c o = c | w o ; Î¸ ) â P î¢ ( c ) î¢ â w î¢ [ â a î¢ P î¢ ( w | a ) î¢ P î¢ ( a | c ) ] n î¢ ( o , w ) , ( 30 ) P î¢ ( a ot = a | w o , c o = c ; Î¸ ) = P î¢ ( w ot | a ) î¢ P î¢ ( a | c ) â a â² î¢ P î¢ ( w ot | a â² ) î¢ P î¢ ( a â² | c ) . ( 31 )\n\nThe M-step re-estimation equations for the conditional word distributions are given by: P î¢ ( w | a ) = â o î¢ â t : w ot = w î¢ P î¢ ( a ot = a | w o ; Î¸ ) â o î¢ â t î¢ P î¢ ( a ot = a | w o ; Î¸ ) ( 32 )\n\nwhere P î¢ ( a ot = a | w o ; Î¸ ) = â c î¢ P î¢ ( c o = c | w o ; Î¸ ) î¢ P î¢ ( a ot = a | w o , c o = c ; Î¸ ) .\n\nMoreover, we have the update equation ( P î¢ ( c ) = 1 I î¢ â d î¢ P î¢ ( c d = c | w d ; Î¸ ) )\n\nfor the class priors P(c) and the formula: P î¢ ( a | c ) â â o î¢ P î¢ ( c o = c | w o ; Î¸ ) Ã â t î¢ P î¢ ( a ot = a | w o , c o = c ; Î¸ ) ( 33 )\n\nwhich is evaluated on the held-out data. Finally, it may be worth taking a closer look at the predictive word probability distribution P (w|o) in the Cluster Abstraction Model, which is given by: P î¢ ( w | o ) = â c î¢ P î¢ ( c o = c | w o ; Î¸ ) î¢ â a î¢ P î¢ ( a | c ) î¢ P î¢ ( w | a ) . ( 34 )\n\nIf we assume for simplicity that P(co=c|wo;Î¸)=1 for some c (hard clustering case), then the word probability of o is modeled as a mixture of occurrences from different abstraction levels a. This reflects the reasonable assumption that each document contains a certain mixture of words ranging from general terms of ordinary language to highly specific technical terms and specialty words.\n\nThere are three important problems, which also need to be addressed in a successful application of the Cluster Abstraction Model: First and most importantly, one has to avoid the problem of over-fitting. Second, it is necessary to specify a method to determine a meaningful tree topology including the maximum number of terminal nodes. And third, one may also want to find ways to reduce the sensitivity of the Expectation Maximization procedure to local maxima. The present invention finds the answer to all three questions through the optimization algorithm introduced above as tempered Expectation Maximization.\n\nApplying the temperature principle to the clustering variables, the posterior calculation in equation (30) is generalized by replacing n(o, w) in the exponent by n(o, w)/T. In annealed Expectation Maximization (as opposed to âheatedâ Expectation Maximization discussed above), T is utilized as a control parameter, which is initialized at a high value and successively lowered until the performance on the held-out data starts to decrease. Annealing offers a way to generate tree topologies, since annealing leads through a sequence of so-called phase transitions, where clusters split. In our experiments, T has been lowered until the perplexity (i.e., the log-averaged inverse word probability) on holdout data starts to increase, which automatically defines the number of terminal nodes in the hierarchy.\n\nExtension to Preference Values.\n\nWhen observing user behavior and preferences one may have richer observations than plain co-occurrences. Many use cases may also provide some additional preference value v with an observation. In this invention, we will treat the simplest case, where vÎµ{â1,+1} corresponds to either a negative or a positive example of preference, modeling events like âperson u likes/dislikes object oâ.\n\nLet us now focus on extending the aspect model to capture additional binary preferences vÎµ{â1,+1}. The probabilistic latent semantic analysis models can be generalized to handle arbitrary preference values, which requires specifying an appropriate likelihood function based on assumptions on the preference scale. We distinguish two different cases: (i.) situations where the person performs the selection of an object, and then announces her or his preference in retrospect, (ii.) problems where the selection of o is not part of the behavior to be modeled, for instance because it is controlled or triggered by some other external process.\n\nIn the first case, there are three different ways to integrate the additional random variable v into the model. v can be conditionally independent of o and u given a, which is a very strong assumption. One implication is that aspects are typically employed to either model positive or negative preferences. In addition, v also depends on either u or o, which offers considerably more flexibility, but also requires estimating more parameters. It is straightforward to modify the Expectation Maximization equations appropriately. We show the equations for the model, where v is assumed to be directly dependent on o, and only indirectly dependent on u through a. The other variants require only minor changes.\n\nFor the E-step one obtains: P î¢ ( a | o , u , v ) = P î¢ ( a ) î¢ P î¢ ( u | z ) î¢ P î¢ ( o , v | a ) â z â² î¢ P î¢ ( a â² ) î¢ P î¢ ( u | a â² ) î¢ P î¢ ( o , v | a â² ) ( 35 )\n\nwhile the M-step equations can be summarized into: P î¢ ( o , v | a ) = â u î¢ n î¢ ( o , u , v ) î¢ P î¢ ( a | o , u , v ) â o , u â² , v â² î¢ n î¢ ( o , u â² , v â² ) î¢ P î¢ ( a | o , u â² , v â² ) , ( 36 )\n\nwhere n(o,u,v) denotes the number of times a particular preference has been observed (typically n(o, u, v)Îµ{0, 1}). From P(o,v|a) one may also derive P(o|a) and P(v|o,a), if necessary. The M-step equation for P(u|a) does not change. Effectively the state space of O has been enlarged to Oâ²=OÃ{â1,+1}.\n\nIn the second case, the multinomial sampling model of selecting o or a (o, v) pair conditioned on a is no longer adequate. We thus invented a modification of the aspect model and replace multinomials P(o|a) with Bernoulli probabilities P(v|o,a), assuming that o is always conditioned on. This modification results in the E-step: P î¢ ( a | o , u , v ) = P î¢ ( a ) î¢ P î¢ ( u | a ) î¢ P î¢ ( v | o , a ) â a â² î¢ P î¢ ( a â² ) î¢ P î¢ ( u | a â² ) î¢ P î¢ ( v | o , a â² ) . ( 37 )\n\nand a M-step re-estimation formula: P î¢ ( v | o , a ) = â u î¢ P î¢ ( a | o , u , v ) â v = Â± 1 î¢ â u â² î¢ P î¢ ( a | o , u â² , v ) . ( 38 )\n\nComparing equation(37) with equation (35) one observes that P(v|o,a) now replaces P(v,o|a) since o is treated as a fixed (observation-dependent) conditioning variable. Note that by conditioning on both, o and u, one gets P î¢ ( v | o , u ) = â a î¢ P î¢ ( v | o , a ) î¢ â î¢ P î¢ ( a | u )\n\nwhich reveals the asymmetry introduced into the aspect model by replacing one of the class-conditional multinomials with a vector of Bernoulli probabilities.\n\nImplementation\n\nFIGS. 9 through 13 illustrate an implementation of latent class models for personalized information filtering and recommendations. FIG. 9 shows the primary input streams into server platform 100. User profiles 111 are processed through a profiler module 110 to provide the user related information, such as transaction data, click stream data, download, demographic information, etc. Document information, such as text documents, web pages, emails, etc. comes from a content repository 121 and is processed by a preprocessor and crawler module 120. Content repository 121 can be single proprietary database owned by the user. It can be any collection of data sources including any and all of the information available on the World Wide Web. The final primary input stream is expert annotations 131, including taxonomies, web catalogues, XML ontology, etc. and is processed by XML-parsing module 130. Here we assume that expert annotations of documents are stored as XML tags with the documents. Although this is common nowadays, other interfaces are of course possible.\n\nFIG. 10 illustrates the main data processing modules for latent class models for personalized information filtering and recommendations. The concept extraction module 140 automatically extracts domain-specific concepts and topics for the documents provided by the preprocessor and crawler module 120. Preferably, this extraction includes statistically analyzing the data to learn the semantic associations between words within specific items in the acquired data. Also, preferably, probabilities for each learned semantic association are computed. The collaborative filtering module 142 analyzes the user profiles 111 provided by profiler 110 to learn about user interests long-term information needs. The collaborative filtering module performs 142 two functions: 1) it analyzes the current user's historical profile; and 2) it analyzes other users' historical profiles. Preferably both profile analyses are used in combination with the learned semantic associations and computed probabilities to provide improved predictions or recommendations lists. The categorization module 144 automatically annotates documents with appropriate categories. The data mining module 145 extracts taxonomies, topic maps and user communities. Depending upon the needs of the user one or more of these modules 140, 142, 144, 145 are used to implement latent class modeling for personalized information filtering and recommendations. All four modules are not necessarily used for each implementation.\n\nFIG. 11 illustrates some of the preferred applications of the present invention. Functions included in the software provided by the server platform 100 are intelligent retrieval, categorization, filtering and recommendation. The intelligent retrieval of information incorporates user information from a user profile and from collaborative filtering into the search. From these functions, the present invention can provided personalized search results, automatic categorization of documents, email and text sorting and recommendations. The automatic categorization of documents categorizes the data into existing taxonomies and subject heading classification schemas. The email/text sorting can be used for intelligent information routing for customer relationship management (CRM) supply chain, distributed networking, storage, eMarketplaces, and web application server environments.\n\nFIG. 12 illustrates one implementation of the present invention. A query 151 is input into server 100. The server 100 identifies matching documents 153 based on pure content analysis, it then connects the personalization engine 152 to access the user profile 111. Using the query 151 and the user profile 111, the server 100 uses the full probabilistic latent semantic analysis of user (community) data and content, 156 to produces an unstructured result list 155 with associated relevance scores. The taxonomy 154 is accessed to apply relevant concepts and categories to refine the unstructured result 155 into a structured search result 157. The structured search result can be further refined by including similar documents, refinement of the query by the user, etc.\n\nFIG. 13 is an overall representation of an implementation of latent class modeling for personalized information filtering and recommendations. Server 100 initially acquires a set of data or documents by such means as web crawlers or spiders. Alternatively, the documents could be directly provided by the client in the form of a database or a proprietary database. This set of data is analyzed by server 100 using probabilistic latent semantic analysis to provide a set of statistical latent class models with appropriate model combination weights along with a probability of occurrence for each possible combination of items, content descriptors, users, object or user attributes. The set of models along with the relevant document information is stored on document server 103. A user or client 101 access server through a web server 102 and inputs a query to server 100. Server 100 then produces a recommendation list for user 101 using the set of models and a user profile.\n\nBefore processing the user's request, the server 100 analyzes the data collection and automatically extracts concepts, topics, and word contexts that are fully adapted to the specific data and the specific domain. The server 100 extracts concepts from the documents automatically, thus removing the need to manually tag documents. Most document collections are based on a very specific vocabulary, terminology or jargon. Contrary to standard information retrieval engines based on general dictionaries or thesauri, server 100 automatically creates indices and adapts and optimizes with respect to a specific document base. The server 100 architecture is divided into three main components: the learning module, the prediction module, and the data store. The learning module takes content (emails, documents, web-pages, data), adds it to the data store or document server 103 and makes this content accessible for searching, categorizing, filtering, and delivery. The prediction module is used to perform searches against indexed documents. A search is entered using a web search page. The prediction module reduces the search to a set of documents that most clearly match the criteria of the search, and formats this set into a series of document lists, segmented by category. Because the system knows the different meanings of words, it can accommodate ambiguities by returning multiple result lists along with characterizing keywords. For example, the system can distinguish between Apple, the computer company; apple, the fruit; and Apple, the Beatles record company, and group the search results into three distinct lists. Users can then refine or rephrase queries.\n\nFIG. 14 is a flow chart illustrating the overall method for generating recommendation lists. A statistical latent class model is generated using data, items, and other relevant sources of data. The system receives data including the statistical latent class models, content descriptors, user data, object or user attributes, preferences, and other relevant data. The system then receives at least one of: (1) a user profile; (2) user query; and (3) a request to generate a recommendation. Next the probability of relevance of each item in the set of data is computed. If the user query received is ambiguous, then the system will return multiple recommendation lists. Otherwise, the system will return a single recommendation list.\n\nFIG. 15 is a flow chart illustrating the process of training a latent class model. Data in the form of a list of tuples of entities is received into the system. Parameters are then received into the system including; (1) a number of dimensions to be used in model training; (2) predetermined fraction of hold out data; and (3) a termination condition. The system then partitions the received data into training data and hold out data. Tempered posterior probabilities are then computed for each tupel and each possible state of a corresponding latent class variable. Next, using the posterior probabilities, the system updates the class conditional probabilities for items, descriptors and attributes, and users. The system continues to iterate the steps of computing tempered posterior probabilities and updating class conditional probabilities until the predictive performance on the hold out data degrades. Then the temperature parameter is adjusted and tempered posterior probabilities continue to be computed until the termination condition is met. Finally, the system combines the trained models."
    }
}