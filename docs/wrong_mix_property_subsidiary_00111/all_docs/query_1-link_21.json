{
    "id": "wrong_mix_property_subsidiary_00111_1",
    "rank": 21,
    "data": {
        "url": "https://www.slideshare.net/slideshow/the-ba-role-in-agile-development/5406780",
        "read_more_link": "",
        "language": "en",
        "title": "The BA role in Agile Development",
        "top_image": "https://cdn.slidesharecdn.com/ss_thumbnails/allankelly-101010134550-phpapp01-thumbnail.jpg?width=640&height=640&fit=bounds",
        "meta_img": "https://cdn.slidesharecdn.com/ss_thumbnails/allankelly-101010134550-phpapp01-thumbnail.jpg?width=640&height=640&fit=bounds",
        "images": [
            "https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=128&q=75 1x, https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=256&q=75 2x",
            "https://cdn.slidesharecdn.com/profile-photo-agileee-48x48.jpg?cb=1522856292",
            "https://image.slidesharecdn.com/allankelly-101010134550-phpapp01/85/The-BA-role-in-Agile-Development-1-320.jpg 320w, https://image.slidesharecdn.com/allankelly-101010134550-phpapp01/85/The-BA-role-in-Agile-Development-1-638.jpg 638w, https://image.slidesharecdn.com/allankelly-101010134550-phpapp01/75/The-BA-role-in-Agile-Development-1-2048.jpg 2048w"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-10-10T13:45:42+00:00",
        "summary": "",
        "meta_description": "The BA role in Agile Development  - Download as a PDF or view online for free",
        "meta_lang": "en",
        "meta_favicon": "https://public.slidesharecdn.com/_next/static/media/favicon.7bc3d920.ico",
        "meta_site_name": "SlideShare",
        "canonical_link": "https://www.slideshare.net/slideshow/the-ba-role-in-agile-development/5406780",
        "text": "1. Agile Eastern Europe, Kiev, October 2010 More important than ever: The Business Analysts’ role in Agile software development Allan Kelly allan@allankelly.net http://www.allankelly.net Software Strategy http://www.softwarestrategy.co.uk 1\n\n2. Allan Kelly, BSc, MBA  Training, Consulting & Coaching in Agile software development  Author:  Changing Software Development: Learning to be Agile, Wiley 2008. 97 Things Every Programmer Should Know, Henney, 2010 Context Encapsulation in Pattern Languages of Program Design volume 5, 2006\n\n3. What is Agility? “Agile processes promise to react flexibly to changing requirements, thus providing the highest business value to the customer at any Jim Highsmith, 2002 point in time” “Agility is the ability to both create and respond Jutta Eckstein 2004 to change in order to profit in a turbulent business environment.” 3\n\n4. What is Agility?  Agile Today: Agile as Better  Respond to changing (business) environment  Faster, more productive, higher quality  Happier customers  Agile Tomorrow: Agile creates new business models  Opportunities for those not confined by traditional IT 4\n\n5. Agile  Its the business need, stupid 5\n\n6. Traditional approach Business Analysis / System Analysis Royce, 1970, “Managing the Development of Large Software Systems” 6\n\n7. 7\n\n8. BA/Product Owner Traditional approach Agile approach works ahead of team - scouting out requirements 6+ months  Slice through work Decide requirement Decide requirement  Everything in iteration  End-to-End Analysis / Design Analysis / Design  Deliver business functionality Code & Unit Test Code & Unit Test Merge & Release Merge & Release Iteration 1 (2 weeks) Iteration 2 (2 weeks)\n\n9. BA/Product Owner works ahead of team - scouting out requirements  Slice through work Decide requirement Decide requirement  Everything in iteration  End-to-End Analysis / Design Analysis / Design  Deliver business functionality Code & Unit Test Code & Unit Test Merge & Release Merge & Release Iteration 1 (2 weeks) Iteration 2 (2 weeks)\n\n10. Lesson 1: Continual requirements  Discovery  Understanding  Refinement  Valuation  Prioritization  Explanation 10\n\n11. Agile in context More prescriptive XP Scrum … Agile Kanban More Lean thinking philosophical: value, idea Organizational Learning based Applicability\n\n12. Agile, Agile methods & Agile toolkit The State of • Quick on our feet Agile (our • Deliver quickly objective) • Respond to change rapidly • Seize opportunities Kanban Agile Methods DSDM ... Promise to create the state of Agile Scrum XP • Test Driven Development, The Refactoring Agile • Iterations, Time boxing Toolkit • User Stories, Feature injection • Retrospectives, .... 12\n\n13. 1999-2004: Agile = XP  Extreme Programming  First Agile method to gain popularity  Developer centric practices and literature  Business need from onsite Customer  Customer on C3 was a Business Analyst  “Customer” view simplistic  Short sighted  Assume customer knows  No discussion on how the customer knows 13\n\n14. 2005-today: Agile = Scrum  Scrum  Aproject management method without a project manager  Product Owner specifies need  Scrum silent on how the Product Owner knows 14\n\n15. Who is the Product Owner? Business Subject Analyst Matter /Domain Expert Product Manager 15\n\n16. 3 Types of Software Makers Software Microsoft, Oracle, Adobe, TargetProcess Product Product Owner is Product Manager Company Accenture, Luxoft, Tata, EDS (HP), … Software (Proxy) Product Owner is Business Service Analyst Company ESP - External Service Provider Banks, Pharmaceutical, Oil, … • Product Owner is Business Analyst Corporate IT Or Department • Business Analysts supports non- technical Produce Owner\n\n17. Lesson 2: Know your Product Owner Business Analyst is either  Is the Product Owner Or  Supporting Product Owner 17\n\n18. Business Analysts Role  Ensure Agile teams meet business need  Help explain business need to development team  Act as “Product Owner” when  No other Product Owner  Product Owner does not have time or skills  Advise development team on business details 18\n\n19. How to help a team  Work closely with the team  Sit with the team  Be part of the team  Stay involved  Do not leave after initial stages  Requirements gathering is ongoing process  Not only at the start  Dialogue over document 19\n\n20. How to help a team  Be ONE step ahead  Ready to answer questions  But not too far ahead  Goals and objectives  Replace Big Requirements Documents  Under continual review  Delivered functionality changes and evolves  In direction of the goal and objective 20\n\n21. Less (software) is more (value) Potentially 80% of software Only about 20% of development work is waste • Better understanding can reduce features & functions demand by 80% in typical custom software are used If 30+% of requirements change then We often encounter • Why bother doing work on them in the requirements churn first place? of 30% to 50% Solution: Just In Time Requirements Identify, implement, deliver in quick Mary & Tom Poppendieck succession Implementing Lean Software Development 2007 21\n\n22. Project constraints Product Resources Owner needs to Features (People) make these trade offs Cost = Fixed in Time x People the short run (Brooks Law) Scope control Time (run backwards) Time boxed Agile projects negotiate over requirements rather than resources or time 22\n\n23. Lesson 3: Negotiate over What  Time is fixed  Fixed iterations  Fixed delivery dates  Resources are fixed in short term  Can only increase slowly with time  Therefore….  Negotiate over what will be delivered  Therefore…  Requirements understand more important 23\n\n24. Business Analysts, move on up r tOwne  BA Product Owner Pro duc needs  Move up the BA Maturity Model  From “Requirements gather” / “Order taker”  To “Internal Consultant”  Improvingbusiness Source and more details on BAMM: http://www.assistkd.com/bamm/ effectiveness bamm.html 24\n\n25. Lesson 4: Think BIG!  Business Analysts think about  The business system  the business objective  the need  Be more than an order taker 25\n\n26. But....  There is a time and a place for everything  .... Requirements come second when changing to Agile 26\n\n27. The Alignment Trap IT Highly aligned ‘Alignment trap’ ‘IT Enabled growth’ Doing the right thing 11% companies 7% companies • IT spending +13% above average • IT spending 6% less than average • Sales -14% over 3 years • Sales growth +35% over 3 years ‘Maintenance zone’ ‘Well-oiled IT’ 74% companies 8% companies • Average IT spending • IT spending 15% below average • Sales -2% over 3 years • Sales growth +11% over 3 year Less aligned IT Less Doing things right IT More Effective Effective Source: Shpilberg, Berez, Puryear, Shah: MIT Sloan Review, Fall 2007\n\n28. Lesson 5 Build effective delivery machine Then Move outwards and upwards\n\n29. When adopting Agile 1. Do it right: Focus on the development team 2. Do not emphasis requirements or BA role 3. Get developers more effective Then 4. Do the right thing: Focus on the what 5. Long term benefits in BA role 29\n\n30. More work for Product Owners Less work for Project Managers • Negotiate over feature delivery • Self organizing teams • Not when • No task allocation • Flexible release plan Project • Tracking by delivery • Not Gantt chart Manager • Not % complete • Measure value delivered • Commitment over • Not time spent estimates • Changing requirements • Not work packages BA/Product • Sustainable pace Development • No whip cracking Owner team 30\n\n31. More work for Product Owners Less work for Project Managers • Negotiate over feature delivery • Self organizing teams - Not when - No task allocation • Flexible release plan Project Manager • Tracking by delivery - No Gantt chart - Not % complete • Measure value delivered • Commitment over - Not time spent estimates • Changing requirements BA/Product - No work packages Development Owner • Sustainable pace - No whip cracking team 31\n\n32. More work for BA’s  More work for Business Analysts  More/better analysis can reduce work load in time  More responsible for value delivered  More conversations with Developers  Writing/Creating acceptance tests  Slack for Just in time requirements (Queuing theory)  Move from requirements push to needs pull  Therefore... 1 BA for every 3 to 7 developers  Stable product: 1 BA -> 7 developers  Rapid change: 1 BA -> 3 developers 32\n\n33. Take aways 1. Being Agile means delivering business needs 2. Product Owner is often a BA  If not then BA supports Product Owner & Dev team  Agile process does not remove need for requirements 3. BA take a back seat in early transition  Step forward as team becomes effective  Key in reducing work to be done 4. Product Owner role is larger than BA role  Need greater staffing  Shift from Requirements Push to Need Pull 33"
    }
}