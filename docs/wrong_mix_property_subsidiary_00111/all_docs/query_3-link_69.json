{
    "id": "wrong_mix_property_subsidiary_00111_3",
    "rank": 69,
    "data": {
        "url": "https://www.red-gate.com/simple-talk/devops/software-delivery-devops-2/consider-agile-large-projects/",
        "read_more_link": "",
        "language": "en",
        "title": "Should You Consider Agile for Very Large IT Projects?",
        "top_image": "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/word-image-77.png",
        "meta_img": "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/word-image-77.png",
        "images": [
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/icons/rss-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/icons/burger-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/icons/rss-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/mo.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/x-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/linkedin-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/mastodon-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/sharing/facebook-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2024/07/Image-600x823-1.jpeg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/word-image-77.png",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/word-image-82.png",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/word-image-84.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo-white.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/mo.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/mo.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/mo.png",
            "https://www.red-gate.com/simple-talk/wp-content/themes/simple-talk-theme-2024/assets/images/logos/st-logo.svg",
            "https://www.red-gate.com/simple-talk/wp-content/uploads/2017/08/mo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mohammad Rizvi"
        ],
        "publish_date": "2017-08-11T16:00:08+00:00",
        "summary": "",
        "meta_description": "Many large organisations are compelled to embark on wide-ranging business-transformation IT projects. They are difficult to manage because, in the intervening months before the end of the project, the changing business environment will have forced further changes on the business. Agile holds out the promise of managing these changes more easily. Mohammad Rizvi explains, from experience, some of the the issues you are likely to face, and how you can solve them.",
        "meta_lang": "en",
        "meta_favicon": "https://www.red-gate.com/simple-talk/wp-content/uploads/2016/07/gatebase-favicon.png",
        "meta_site_name": "Simple Talk",
        "canonical_link": "https://www.red-gate.com/simple-talk/devops/software-delivery-devops-2/consider-agile-large-projects/",
        "text": "Providing the Necessary Tools and Reports for Very Large IT Projects\n\nRequirements of large IT projects (typically, part of Transformation programs)\n\nMany organizations often need to tackle several major changes to the IT that underpins their business simultaneously. This type of project is hard to deliver.\n\nIT projects, like any other type of project, have a budget, delivery dates and requirements. What makes IT projects so unusual when compared to construction or engineering projects is that the scope and requirements change during the project. There is, to be sure, usually a small allowance in the budget for changes to the requirements, but the delivery time, typically nine months or less in an IT transformation, doesn’t change along with the changing requirements because this timeline must be met for the program objectives to stay relevant.\n\nA large IT project will generally present some of the following challenges.\n\nThe requirements will be complex.\n\nThere will be a large number of requirements.\n\nThe End-to-end requirements will affect many systems and have a high interdependency\n\nMany systems will be involved, sometimes requiring different skillsets.\n\nThere will be significant changes in many systems at the same time.\n\nSome of the project resources are likely to belong to different companies and different cultures, and in different geographic locations.\n\nWith project size, the task of managing Integration Testing and end-to-end testing will increase exponentially.\n\nAll these challenges can be managed individually, but when they come together in one project then project design and execution becomes highly complex. It takes specialist skills and tremendous effort from all involved to keep such a project on track.\n\nSoftware Development Models\n\nLet’s take a brief look at software development models to provide the context.\n\nWaterfall model\n\nThe Waterfall model of software delivery is the first established approach to build an IT system, defined by Winston W. Royce in 1970. It gained support in early days of software development and underlies methodologies such as such as SSADM, Prince, soft systems methodology, structured design, Yourdon Structured Method, Jackson Structured Programming, and structured analysis. In this model, everything flows logically from beginning through end and is split in clearly defined phases. The key steps in this model are Analysis, Design, Implementation, Testing, Installation and Maintenance. The Waterfall model makes a very important assumption – all requirements have been collected up front and frozen before start of the Analysis phase. Hence, communication with the business users is done upfront.\n\nAll the phases are firm, clearly separated and are executed in sequence. The Requirements are not allowed to change and the end product can only be tested, in the true sense, once the project goes into its testing phase as shown below.\n\nIterative model\n\nThe Iterative model, as used in Modified Waterfall, Rational Unified Process, Extreme Programming and Agile, tries to avoid the necessity for freezing of the requirements at the start of the project, and provides some level of flexibility in the process. As the name ‘Iterative’ implies, the general idea is to develop the software through multiple iterations. Working though iterations means that, in each iteration, a chunk of functionality is analyzed, designed, developed, and tested. Iteration cycles are repeated till the fully functional product is ready for production.\n\nIt is a common practice to demonstrate the developed product to stakeholders at end of each iteration. Feedback from the demonstration are input to the next iteration in order to add or correct the scope. Since this problem gives chance to stakeholders to look at the product early, problems can be corrected before they become too expensive to fix.\n\nThe key advantage of Iterative model is that it allows more flexibility in scope and requirement changes.\n\nAgile-Scrum (Iterative Incremental) model\n\nIn year 2001, a group of engineers discussed lightweight development methods and published “Manifesto for Agile Software Development” to define the approach that is now known as Agile.\n\nThe Agile manifesto2 reads as follows.\n\nWe are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\n\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nThat is, while there is value in the items on the right, we value the items on the left more.\n\nScrum is one of the most commonly-used methodologies of Agile software development. Other Agile methodologies for software development are Lean, Kanban and eXtreme Programming (XP). Each agile methodology has its own practices, tactics and terminology. Kanban focuses on elimination of waste and limits the amount of work and does not prescribe to work in iterations. XP framework focuses heavily on ensuring the quality of delivered software. XP works towards a continuously improving, high quality product which can respond to changes in customer requirements even within the iteration. Scrum is more prescriptive than Kanban. Scrum focuses on the delivery of scoped work in time-boxed fashion and it does not allow requirement changes within an iteration.\n\nModel comparison\n\nWhat\n\nWaterfall Methodology\n\nIterative Methodology\n\nScrum Methodology\n\n(Incremental and Iterative)\n\nResponsiveness & Flexibility\n\nVery Low\n\nAt each iteration cycle\n\nThroughout\n\nEnd product\n\nDefined at beginning\n\nDefined during project\n\nDefined during project\n\nOverall project cost\n\nDefined at beginning\n\nDefined during project\n\nDefined during project\n\nSuccess probability\n\nLow\n\nMedium\n\nHigh\n\nCost of change\n\nVery High\n\nMedium\n\nLow\n\nMindset\n\nProject mindset\n\nProduct mindset\n\nProduct mindset\n\nCustomer involvement\n\nLow\n\nMedium\n\nHigh\n\nWhy consider Agile?\n\nAgile process is proven to produce higher productivity, quality in less time. Agile methodology results in productivity gains by better communication and being responsive to customers’ demands and adapting continuously through the project. Many companies have registered an increase of team productivity by 16% or even more. 3,4,5,6\n\nAdvantages of a well-adapted Agile\n\nReduced risk\n\nThere are fewer surprises. Because the model is incremental and iterative, it can give indications of success and failure early in the project, allowing the Project Management Office (PMO) to take corrective actions to correct problems before they get out of hand.\n\nAt least a part of the working product is always available, so that the project can never end in complete failure\n\nThe product owners and sponsors know exactly what usable features are available at any point of time, regardless of the outcome of future sprints.\n\nProject governance has the opportunity of providing constant feedback, mitigating communication gaps and helping in team morale constantly.\n\nPredictable outcome\n\nBy knowing the work rate of each developer, the development team can help the PMO to predict timelines and budget for releases more accurately.\n\nIn-depth information from daily scrum meetings, burndown charts, task boards and retrospective meetings allows a more accurate forecast for future sprints.\n\nRelevant project metrics\n\nIt is easier to predict overall project performance, timelines and budget from each team’s performance and outputs.\n\nIt is easier to estimate the timelines and budget for successive development projects where requirements are of a similar complexity.\n\nDaily burndown charts provide relevant insight into day-to-day progress.\n\nBetter product quality\n\nRequirements can be tweaked as business needs change, making for a more adaptable model\n\nContinuous integration (CI) processes and daily sanity testing helps in resolving issues before they cause a snowball affect\n\nIncorporation of automated testing improves quality further as it allows the delivery team to increase the scope and thoroughness of with currently-available resources\n\nSprint retrospectives help in improving the progress and quality of day-to-day activities\n\nHigher customer satisfaction\n\nCustomers are engaged throughout the project lifecycle.\n\nEffective communication is an important factor in Agile success. In non-Agile approaches, project manager is the source of information for project sponsors and stakeholders. In Agile, this silo is broken. All the project metrics and project data are available on click of a button for everyone to view, resulting in higher transparency and satisfaction.\n\nProduct owner is able to ‘keep tabs’ on requirements and can fine-tune the resources required to meet them.\n\nEvery Sprint review gives chance to customers to see working functionality\n\nHigher control\n\nThe project stakeholders, the developers, the product owner and scrum master all can monitor progress throughout the project to learn and improve, thereby, creating better products.\n\nExpectations\n\nNo technology leader wants a project to fail- let alone a large/transformational one. Although the benefits of Agile make it an obvious candidate when choosing a development methodology, the choice is dependent on the priorities and requirements of the stakeholders.\n\nExpectations matrix:\n\nWhat\n\nStakeholder expectation\n\nProvided by\n\n*Even though fixed, leaders want some flexibility in requirements with changing business scenarios.\n\nThis matrix makes it obvious that, to leverage benefits of Agile without sacrificing the stakeholder priorities in their expectations, the benefits of Waterfall will have to be incorporated in Agile methodology. The rest of this article will explain how this can be done.\n\nTailored Agile Model\n\nNo single process fits every product development, and most Agile techniques can be tailored to the needs of the product. This tailored model is an example of the way that Agile can be adapted for an Iterative-Incremental development, where each sprint will be of three weeks.\n\nIn this approach, Analysis and Design will be completed before the start of coding of the sprint, and will be done concurrently with the Coding and Continuous Integration of the previous sprint.\n\nA final UAT phase will help in Quality-Assurance of the completed yet unshipped functionality in which some stories are production-ready.\n\nThis approach may not be liked by Agile purists: However any project requires, more than anything, the successful project delivery with the right product quality, within the timeline and budget. Project stakeholders want a project delivery methodology that is coupled with a strong governance mechanism that is ethical, robust and which meets the end objectives. Also, stakeholders are aiming to transform an organization rather than just to succeed with adopting Agile for a single project; but this is easier said than done.\n\nAcceptance of Tailored Agile\n\nFirst and foremost, if an organization is transitioning from Waterfall, then, more effort will be needed to convince it why “transitioning to Agile” is the right choice.\n\nThe next issue faced by the project team is to convince the stakeholders why pure-play Agile can’t deliver as per the exceptions and secondly why the tailored methodology will not end in failure. Convincing Agile purists becomes the next problem at hand as the tailored methodology uses only some of the concepts of Agile unmodified.\n\nAny plan to deploy all of the functionality into Production in a single huge single release will cause a justifiable level of concern from the QA leadership. The reason is quite understandable. Though code is continuously integrated and tested for its incremental functionality, the code is not immediately deployed to Production. Therefore, the scope of Regression testing will keep on increasing with number of completed sprints.\n\nThe final piece of the puzzle is to come up with a schedule that is acceptable to all, where all parties are responsible for the success of the project. In organizations that have been in the business for decades and follow a hierarchal organization structure with a low level of collaboration among teams and departments, it may prove to a herculean task to arrive at a common agreement. Be ready to have many meetings with various stakeholders to reconcile the differences.\n\nExpected Issues and Resolutions\n\nDespite all our best efforts, the team will be faced with several issues, including the following:\n\nS.No.\n\nIssue\n\nResolution\n\n1\n\nAn integration requirement, with business logic in multiple system can’t be broken into User Stories that can be completed within one sprint due to dependencies.\n\nSuch stories should span a maximum of two sprints. Related dependent stories from other systems should be stopped from being delivered to the testing environment by mistake. All the interconnected stories should be deployed to the testing environment at the same time.\n\n2\n\nSome stories will be too complex and require a large effort sequentially and can’t be broken into stories to fit in 3-week time-box.\n\nSame as above\n\n3\n\nScope creep: The business will likely try to add new stories into the scope.\n\nA well-oiled process should be in place to prevent scope creep while at the same time facilitating user-feedback at the end of every sprint.\n\n4\n\nDefects that span across more than one system. Testing for huge set of requirements where one requirement may touch multiple systems is time-consuming and difficult to manage.\n\nA system must be in place that has the end-to-end requirements, affected system, related user stories, their daily progress and associated defects. This must be in a single system with reporting capabilities. Such reports must not take more than 30 minutes to generate daily.\n\n5\n\nTracking the design documents and their delivery and approval\n\nTo meet the organization’s delivery methodology, all the designs must be approved prior to start of sprint. A collaboration and tracking system must be in place and teams should use it properly so that managers can do backward planning and use collaboration for document delivery, review cycles and online approvals.\n\nIt is to be expected that at times key approvers may be unavailable. Alternate processes should be in place for mitigation. Such processes must be established in advance and approved in steering committee.\n\n6\n\nCode shipment for CI\n\nSuccessful code shipment for continuous integration will require the co-ordination of-\n\nProcess\n\nIssue tracking system\n\nCode shipment system\n\nAutomatic deployment (preferable)\n\nTeams\n\nSanity testing (preferably automated)\n\n7\n\nCome up with a schedule that is acceptable by all, where all parties are responsible for the success as well as for the failure\n\nSocialize the methodology from the bottom upwards, and drive the decision from the top downwards.\n\n8\n\nEnd-to-End requirements, User Stories breakdown, issues and progress tracking\n\nA system must be in place that has the E2E requirements, affected system, related user stories, their daily progress, associated defects must be in a single system with reporting capabilities. Such reports must not take more than 30 minutes to generate daily.\n\nIn worst-case scenario, an additional daily meeting may be set up that can review the progress of the day and define priorities for next day.\n\n9\n\nDefinition of Done\n\nTrack the “Done” at two levels.\n\nUser Story Level\n\nE2E Requirement Level\n\n10\n\nScrum of Scrums\n\nDaily Scrum of Scrums must be instituted and followed in letter and spirit. These meetings can be applied at all levels and rolled up to next level.\n\n11\n\nCommunication\n\nCommunication is one of the pillars of success. Communications effectiveness must be reviewed regularly and issues must be addressed proactively without delay.\n\n12\n\nWhile not in line with Agile methodology, some teams will work from remote location(s). Co-location is not possible for these teams.\n\nWhile co-location is one of the key Agile demands, it is not always possible. It can be resolved with the combination of following two options.\n\nOne or two team members must be co-located locally and represent them. Such team members should have worked with the extended off-location team.\n\nDaily scrum meetings should use Video-conferencing with such extended teams and their local representatives.\n\n13\n\nIssues prioritization – deciding which issues, defects should be tacked first.\n\nIssues will be difficult to tackle and as count will increase beyond manual controllable number early in the CI cycle.\n\nA three prong approach will be helpful.\n\nA common tracking system should be used for User Stories, Business Requirements and Defects. The system must have the capability to connect these to one another.\n\nSystem must have a reporting capability that can roll up defects/issues to User story and then to Business Requirement.\n\nSeparate daily meetings should be held if the issues seem to get out of hand, and developers should be informed which issues are a priority.\n\n14\n\nDesign Approval, Quality Gates\n\nIf the organization is transitioning from a Waterfall methodology, project stakeholders may insist of having Design Approvals and UAT Entry and Exit Quality Gates in place. This situation will especially true in Transformation projects.\n\nOnly a tailored Agile model will be able to satisfy these needs.\n\n15\n\nLess than planned output from initial sprints.\n\nOutput of initial sprints should not become a deal breaker. Negative sentiment is hard to tackle, especially if this is one of the first projects in Agile model.\n\nThe Agile coach should gauge the team’s Agile knowledge in advance and coach appropriately at all levels.\n\n16\n\nContinuously changing requirements\n\nAgile is not as a license to give half-baked requirements that will require multiple sprints.\n\nEarly flags should be raised to align the expectations of all involved teams.\n\nIf any requirement will genuinely require more time to get frozen, consider it in future Sprints.\n\nThe table above covers most of the issues such implementation will face and their resolutions.\n\nIn the next article of this series, I shall delve into finer aspects of these issues.\n\nReferences:"
    }
}