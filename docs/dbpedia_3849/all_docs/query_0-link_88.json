{
    "id": "dbpedia_3849_0",
    "rank": 88,
    "data": {
        "url": "https://ebin.pub/body-of-knowledge-for-modeling-and-simulation-a-handbook-by-the-society-for-modeling-and-simulation-international-9783031110849-9783031110856.html",
        "read_more_link": "",
        "language": "en",
        "title": "Body of Knowledge for Modeling and Simulation. A Handbook by the Society for Modeling and Simulation International 9783031110849, 9783031110856",
        "top_image": "https://ebin.pub/img/body-of-knowledge-for-modeling-and-simulation-a-handbook-by-the-society-for-modeling-and-simulation-international-9783031110849-9783031110856.jpg",
        "meta_img": "https://ebin.pub/img/body-of-knowledge-for-modeling-and-simulation-a-handbook-by-the-society-for-modeling-and-simulation-international-9783031110849-9783031110856.jpg",
        "images": [
            "https://ebin.pub/ebinpub/assets/img/ebinpub_logo.png",
            "https://ebin.pub/img/200x200/engine-modeling-and-simulation-9789811686184-9789811686177-9811686181.jpg",
            "https://ebin.pub/img/200x200/introduction-to-modeling-and-simulation-a-systems-approach-111998288x-9781119982883.jpg",
            "https://ebin.pub/img/200x200/modeling-and-simulation-of-aerospace-vehicle-dynamics-2ed-9781563478758-1563478757.jpg",
            "https://ebin.pub/img/200x200/3d-groundwater-modeling-with-pmwin-a-simulation-system-for-modeling-groundwater-flow-and-transport-processes-3540275908-9783540709718.jpg",
            "https://ebin.pub/img/200x200/modeling-simulation-and-control-of-electrical-drives-1785615874-9781785615870.jpg",
            "https://ebin.pub/img/200x200/a-step-by-step-approach-to-the-modeling-of-chemical-engineering-processes-using-excel-for-simulation-9783319660479-9783319660462-3319660470.jpg",
            "https://ebin.pub/img/200x200/spray-simulation-modeling-and-numerical-simulation-of-sprayforming-metals-0521820987-9780521820981-9780511184659.jpg",
            "https://ebin.pub/img/200x200/systems-modeling-and-simulation-theory-and-applications-asian-simulation-conference-2006-1nbsped-9784431490210-4431490213.jpg",
            "https://ebin.pub/img/200x200/modeling-and-simulation-of-fluidized-bed-reactors-for-chemical-looping-combustion-3031113349-9783031113345.jpg",
            "https://ebin.pub/img/200x200/modeling-and-python-simulation-of-magnetics-for-power-electronics-applications-3030967670-9783030967673.jpg",
            "https://ebin.pub/img/200x200/body-of-knowledge-for-modeling-and-simulation-a-handbook-by-the-society-for-modeling-and-simulation-international-9783031110849-9783031110856.jpg",
            "https://ebin.pub/ebinpub/assets/img/ebinpub_logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "...",
        "meta_lang": "en",
        "meta_favicon": "https://ebin.pub/ebinpub/assets/img/apple-icon-57x57.png",
        "meta_site_name": "ebin.pub",
        "canonical_link": "https://ebin.pub/body-of-knowledge-for-modeling-and-simulation-a-handbook-by-the-society-for-modeling-and-simulation-international-9783031110849-9783031110856.html",
        "text": "Citation preview\n\nSimulation Foundations, Methods and Applications\n\nTuncer Ören Bernard P. Zeigler Andreas Tolk Editors\n\nBody of Knowledge for Modeling and Simulation A Handbook by the Society for Modeling and Simulation International\n\nSimulation Foundations, Methods and Applications Series Editor Andreas Tolk, The MITRE Corporation, Charlottesville, VA, USA Advisory Editors Roy E. Crosbie, California State University, Chico, CA, USA Tony Jakeman, Australian National University, Canberra, ACT, Australia Axel Lehmann, Universität der Bundeswehr München, Neubiberg, Germany Stewart Robinson, Loughborough University, Loughborough, Leicestershire, UK Bernard P. Zeigler, University of Arizona, Tucson, AZ, USA\n\nThe modelling and simulation community extends over a range of diverse disciplines and this landscape continues to expand at an impressive rate. Modelling and simulation is fundamentally a computational tool which has an established record of signiﬁcantly enhancing the understanding of dynamic system behaviour on one hand, and the system design process on the other. Its relevance is unconstrained by discipline boundaries. Furthermore, the ever-increasing availability of computational power makes feasible applications that were previously beyond consideration. Simulation Foundations, Methods and Applications hosts high-quality contributions that address the various facets of the modelling and simulation enterprise. These range from fundamental concepts that are strengthening the foundation of the discipline to the exploration of advances and emerging developments in the expanding landscape of application areas. The underlying intent is to facilitate and promote the sharing of creative ideas across discipline boundaries. The readership will include senior undergraduate and graduate students, modelling and simulation professionals and research workers. Inasmuch as a model development phase is a prerequisite for any simulation study, there is an expectation that modelling issues will be appropriately addressed in each presentation. Incorporation of case studies and simulation results will be strongly encouraged. Titles can span a variety of product types, including but not exclusively, textbooks, expository monographs, contributed volumes, research monographs, professional texts, guidebooks and other references. These books will appeal, varyingly, to senior undergraduate and graduate students, and researchers in any of a host of disciplines where modelling and simuation has become (or is becoming) a basic problem-solving tool. Some titles will also directly appeal to modelling and simulation professionals and practitioners.\n\nTuncer Ören • Bernard P. Zeigler Andreas Tolk Editors\n\nBody of Knowledge for Modeling and Simulation A Handbook by the Society for Modeling and Simulation International\n\n123\n\n•\n\nEditors Tuncer Ören School of Electrical Engineering and Computer Science University of Ottawa Ottawa, ON, Canada\n\nBernard P. Zeigler Department of Electrical and Computer Engineering University of Arizona Tucson, AZ, USA\n\nAndreas Tolk The MITRE Corporation Charlottesville, VA, USA\n\nISSN 2195-2817 ISSN 2195-2825 (electronic) Simulation Foundations, Methods and Applications ISBN 978-3-031-11084-9 ISBN 978-3-031-11085-6 (eBook) https://doi.org/10.1007/978-3-031-11085-6 © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2023 This work is subject to copyright. All rights are solely and exclusively licensed by the Publisher, whether the whole or part of the material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microﬁlms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or hereafter developed. The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does not imply, even in the absence of a speciﬁc statement, that such names are exempt from the relevant protective laws and regulations and therefore free for general use. The publisher, the authors, and the editors are safe to assume that the advice and information in this book are believed to be true and accurate at the date of publication. Neither the publisher nor the authors or the editors give a warranty, expressed or implied, with respect to the material contained herein or for any errors or omissions that may have been made. The publisher remains neutral with regard to jurisdictional claims in published maps and institutional afﬁliations. This Springer imprint is published by the registered company Springer Nature Switzerland AG The registered company address is: Gewerbestrasse 11, 6330 Cham, Switzerland\n\nTo the many distinguished simulationist colleagues whom I had the chance to collaborate with since 1963 and to Füsun, my wife and my lifelong friend. Tuncer Ören To all our fellow participants in the modeling and simulation adventure: may we help the world keep up more competently with the technology it keeps advancing. Bernard P. Zeigler To the many pioneers of modeling and simulation who paved the way to make us a scientiﬁc discipline, and to my family—Andrea, Florian, and Christopher—who had to share me so often with my passion for these scientiﬁc endeavors. Andreas Tolk\n\nPreface\n\nAny scientiﬁc Body of Knowledge is a comprehensive and concise representation of concepts, terms, and activities needed to explain a professional domain by representing the common understanding of relevant professionals and professional associations. Deﬁning this body for Modeling and Simulation (M&S) is essential for the discipline of M&S. These concepts must include the science-philosophical foundations and implications, the understanding what models are and how their implementation in form of simulations can be used to support the many application domains, such as gaining experience for training and education, as well as experimentation for analysis, design, control, and optimization, within increasing number of computational disciplines. But is Modeling and Simulation really a discipline? To some people, simulation is a very useful technique for representing a system under study to enable computational experimentation with a view to improve system performance. In this perspective, modeling, the representation itself, is of secondary importance— merely a necessary means to an end. For other users, simulation provides a virtual environment that allows to train people. The defense simulation community is a good example for this type of simulation use, but also the aviation community using flight simulators to educate and qualify their pilots. These users look at simulation as a powerful computational tool. In contrast, underlying the SCS Modeling and Simulation Body of Knowledge (M&SBoK) is the assertion that there is a discipline called Modeling and Simulation (M&S). Moreover, this discipline provides visibility into the holistic nature, and the conjoint activities, of model creation and simulation experimentation. At the core of the M&S discipline is the identiﬁcation of the elements manipulated by its associated activities: real system data, experimental frame, model, and simulator, as well as the relationships that must bind these components together to form a meaningful composition. There is a huge paradigm shift from M&S as a computational tool to the M&S as discipline world view. Taking this shift, the M&S framework ontology (the four elements and their relations) effectively lays the foundation for computational experiments, clearly stating boundaries, and interactions, of systems, data, and representation. This shifts the focus from simulation to modeling, placing the model at the center, making the model the curated artifact of knowledge that must be\n\nvii\n\nviii\n\nPreface\n\nmaintained, enhanced, and reused over time. This viewpoint allows the application of simulation in many computational sciences to help gaining new knowledge by creating numerical insight into the dynamic behavior of the modeled entities, the use of M&S as an epistemological tool. These views are not mutually exclusive. Contrarily, they represent multiple facets of the variety how M&S is and can be used. M&S supports many disciplines, computationally as well as epistemologically. The simulation engineer must be aware of the whole picture to serve their communities best. They must understand the application domains and must be able to support the best conceptualization and capture this in a model that is implemented as a simulation. If the application domain uses IT support, the simulation engineer should be aware of interfaces that can support the data information exchange needs. The M&SBoK provides a ﬁrst collection of such knowledge and surely needs to be a living document that is augmented over time. In this initial Guide to M&SBoK, Chap. 1 sets out the concepts of the M&S framework ontology that lay the groundwork for subsequent discussion. Chapter 2 covers the core areas of M&S and provides an overall big picture portrait of this emerging discipline and how it supports other knowledge domains. Chapter 3 covers the traditional view of simulation as experimentation. Indeed, there is no other discipline that can provide powerful simulations providing numerical insight into complex dynamic systems. And yet, the epistemology of M&S is the brain power that enables these tools. Simulation is the muscle; modeling is the soul! Chapters 4 and 5 introduce simulation as experience, both in the technical and entertainment arenas. Chapters 6–10 cover the internals of the M&S disciple, its mechanics, ethics, and economics, while Chaps. 11–16 concern the external relationships, how M&S is taking its place among, and increasingly central to, the recognized disciplines in science, technology, and the arts. Finally, Chaps. 17–19 review the development of M&S over time and set forth the trends, aspirations, and challenges of the future. It is expected that the M&SBoK will grow over time. This ﬁrst version is a ﬁrst set of core concepts, but as the application domains of simulation grow, so will the body of knowledge. We already see growing ﬁelds that need to be addressed in more detail, such as complexity, deep uncertainty, and quantum simulation. We assume that in the next iteration, we will see how M&S can be increasingly used to address complex system, which comprises a variety of heterogenous entities, often highly interdependent and connect in nonlinear fashion. We assume to see an increasing use to address the challenge of deep uncertainty in operations research, which requires multi-model approaches and a new paradigm to conduct simulation-based optimization to understand the topology of the solution space instead of looking for point-solutions. And ﬁnally, with quantum computing becoming increasingly available, simulation engineers have to address how we use this new resource: like we developed concepts for parallel and distributed simulation we will have to address quantum computing-based simulation soon to be ready as the community of simulation engineers when the time comes.\n\nPreface\n\nix\n\nWe like to express our thanks to the Virginia Modeling, Analysis, and Simulation Center (VMASC) of Old Dominion University, Norfolk, Virginia, as they committed to provide a website hosting any errata as well as supplemental material for the M&SBoK. The website can be accessed at http://vmasc.org/partnerships/ msbok. In summary, we are convinced that we are indeed an M&S discipline. We have our professional societies, our journals, our code of ethics, and our common knowledge. We address many of these concepts, we are grateful to the many contributors to create this foundational initial version, and we are excited about the future and the new insights to come and to be integrated to witness to the growing contributions of M&S to solve the challenges of our society. Ottawa, ON, Canada Tucson, AZ, USA Charlottesville, VA, USA March 2022\n\nTuncer Ören Bernard P. Zeigler Andreas Tolk\n\nContents\n\n1\n\nPreliminary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Tuncer Ören, Bernard P. Zeigler, and Thorsten Pawletta\n\n1\n\n2\n\nM&S Bok Core Areas and the Big Picture . . . . . . . . . . . . . . . . . . . Tuncer Ören, Umang Kant, Mayank Sing, Paul Fishwick, Mamadou Kaba Traoré, Lin Zhang, Yuanjun Laili, Bernard P. Zeigler, Andreas Tolk, Gregory Zacharewicz, Mohammad S. Obaidat, and Balqies Sadoun\n\n21\n\n3\n\nSimulation as Experimentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . Tuncer Ören, Paul K. Davis, Rhys Goldstein, Azam Khan, Laurent Capocchi, Maâmar El-Amine Hamri, Navonil Mustafee, Alison L. Harper, Baocun Hou, Bo Hu Li, and Yang Liu\n\n77\n\n4\n\nSimulation as Experience to Enhance Three Types of Skills . . . . . . 121 Tuncer Ören, Umut Durak, Ernest H. Page, Andreas Tolk, and Saikou Y. Diallo\n\n5\n\nSimulation Games . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141 Rodrigo Pereira dos Santos and Esteban Walter Gonzalez Clua\n\n6\n\nInfrastructure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149 Margaret L. Loper, Tuncer Ören, Cláudio Gomes, Valdemar Vicente Graciano Neto, and Ernest H. Page\n\n7\n\nReliability and Quality Assurance of M&S . . . . . . . . . . . . . . . . . . . 167 Tuncer Ören, Valdemar Vicente Graciano Neto, Paul K. Davis, and Bernard P. Zeigler\n\n8\n\nEthics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205 Nico Formanek, Juan Manuel Durán, Paul K. Davis, Andreas Tolk, and Tuncer Ören\n\n9\n\nEnterprise Modeling and Simulation . . . . . . . . . . . . . . . . . . . . . . . 221 Hezam Haidar, Nicolas Daclin, Gregory Zacharewicz, and Guy Doumeingts\n\nxi\n\nxii\n\nContents\n\n10 Maturity and Accreditation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249 Tuncer Ören and Margaret L. Loper 11 Supporting Computer Domains . . . . . . . . . . . . . . . . . . . . . . . . . . . 255 Jean François Santucci, Laurent Capocchi, Tuncer Ören, Saurabh Mittal, Bo Hu Li, Lin Zhang, Ting Yu Lin, Yuanjun Laili, and Claudia Szabo 12 Synergies of Soft Computing and M&S . . . . . . . . . . . . . . . . . . . . . 287 Jean François Santucci, Laurent Capocchi, Tuncer Ören, Claudia Szabo, and Valdemar Vicente Graciano Neto 13 Supporting Science Areas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311 Bernard P. Zeigler, Paul Wach, Laurent Capocchi, Paul Weirich, Mohammad S. Obaidat, Balqies Sadoun, and Claudia Szabo 14 Supporting Engineering Areas . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353 Andrea D’Ambrogio, Chen Yang, and Hessam S. Sarjoughian 15 Supporting Social Science and Management Areas . . . . . . . . . . . . . 373 Paul K. Davis 16 Philosophy and Modeling and Simulation . . . . . . . . . . . . . . . . . . . . 383 Andreas Tolk, Ernest H. Page, Valdemar Vicente Graciano Neto, Paul Weirich, Nico Formanek, Juan Manuel Durán, Jean François Santucci, and Saurabh Mittal 17 History of Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413 Bernard P. Zeigler, Breno Bernard Nicolau de França, Valdemar Vicente Graciano Neto, Raymond R. Hill, Lance E. Champagne, and Tuncer Ören 18 Core Research Areas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435 Paul Fishwick, Saikou Y. Diallo, Umut Durak, Baocun Hou, Bo Hu Li, Chunhui Su, Yanguang Wang, Lin Zhang, Xu Xie, Longfei Zhou, Bernard P. Zeigler, Thorsten Pawletta, Hendrik Folkerts, and Saurabh Mittal 19 Trends, Desirable Features, and Challenges . . . . . . . . . . . . . . . . . . 471 Bo Hu Li, Wenhui Fan, and Lin Zhang Appendix A: Terminology and Other Reference Documents . . . . . . . . . . 495 Appendix B: Bios of the Contributors . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515 Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 543\n\nContributors\n\nLaurent Capocchi University of Corsica, Haute-Corse, Corte, France Lance E. Champagne Air Force Institute of Technology, Dayton, OH, USA Esteban Walter Gonzalez Clua Universidade Federal Fluminense, Niterói, Brazil Andrea D’Ambrogio University of Roma Tor Vergata, Rome, Italy Nicolas Daclin IMT-Mines Ales, Alès, France Paul K. Davis The RAND Corporation and the Pardee RAND Graduate School, Santa Monica, CA, USA Saikou Y. Diallo Old Dominion University, Norfolk, VA, USA Guy Doumeingts Bordeaux University, Nouvelle-Aquitaine, France Umut Durak German Aerospace Center, Cologne, Germany Juan Manuel Durán Delft University of Technology, Delft, Netherlands Wenhui Fan Tsinghua University, Beijing, China Paul Fishwick University of Texas at Dallas, Richardson, TX, USA Hendrik Folkerts University of Applied Sciences in Wismar, Wismar, Germany Nico Formanek High Performance Computing Center, Stuttgart, Germany Rhys Goldstein Autodesk Research, Toronto, ON, Canada Cláudio Gomes Aarhus University, Aarhus, Denmark Valdemar Vicente Graciano Neto Federal University of Goiás, Goiania, Brazil Hezam Haidar INTEROP-VLap, Brussels, Belgium Maâmar El-Amine Hamri Aix-Marseille University (LSIS), Marseille, France Alison L. Harper University of Exeter Medical School, Exeter, UK Raymond R. Hill Air Force Institute of Technology, Dayton, OH, USA\n\nxiii\n\nxiv\n\nContributors\n\nBaocun Hou Midea Cloud Tech Co., Ltd, Jilin, Beijing, China Umang Kant Delhi Technological University, New Delhi, India Azam Khan Trax.Co, Toronto, ON, Canada Yuanjun Laili Beihang University, Beijing, China Bo Hu Li Beihang University, Beijing, China Ting Yu Lin Beijing Simulation Center, Beijing, China Yang Liu CASICloud-Tech Co., Ltd., Haidian, China Margaret L. Loper Georgia Tech Research Institute, Atlanta, GA, USA Saurabh Mittal The MITRE Corporation, Dayton, OH, USA Navonil Mustafee University of Exeter Business School, Exeter, UK Breno Bernard Nicolau de França Universidade Estadual de Campinas, Campinas, Brazil Mohammad S. Obaidat University of Texas-Permian Basin, Odessa, TX, USA King Abdullah II School of Information Technology, University of Jordan, Jordan and University of Science and Technology, Amman, Jordan Tuncer Ören University of Ottawa, Ottawa, ON, Canada Ernest H. Page The MITRE Corporation, McLean, VA, USA Thorsten Pawletta University of Applied Sciences in Wismar, Wismar, Germany Balqies Sadoun College of Engineering, Al Balqa’ Applied University, Al Salt, Jordan Rodrigo Pereira dos Santos Federal University of the State of Rio de Janeiro, Rio de Janeiro, Brazil Jean François Santucci University of Corsica, Corte, France Hessam S. Sarjoughian Arizona State University, Tempe, AZ, USA Mayank Sing Consilio Research Lab, Noida, India Chunhui Su CASICloud-Tech Co., Ltd., Beijing, China Claudia Szabo University of Adelaide, Adelaide, SA, Australia Andreas Tolk The MITRE Corporation, Charlottesville, VA, USA Mamadou Kaba Traoré University of Bordeaux, Bordeaux, France Paul Wach Virginia Tech, Blacksburg, VA, USA Yanguang Wang CASICloud-Tech Co., Ltd., Beijing, China\n\nContributors\n\nPaul Weirich University of Missouri, Columbia, MO, USA Xu Xie National University of Defense Technology, Changsha, China Chen Yang Beijing Institute of Technology, Beijing, China Gregory Zacharewicz IMT-Mines Alès, Alès, France Bernard P. Zeigler University of Arizona, Tucson, AZ, USA Lin Zhang Beihang University, Beijing, China Longfei Zhou Duke University Medical Center, Durham, NC, USA\n\nxv\n\n1\n\nPreliminary Tuncer Ören , Bernard P. Zeigler , and Thorsten Pawletta\n\nAbstract\n\nIn this chapter, we provide an introductory view for the scope of the SCS M&S Body of Knowledge, including the terminology. We provide a rationale for the theoretical basis of M&S and give an overview of the modeling and simulation framework (MSF) applied in many contributions, followed by the basic system entity structure (SES) concepts. Keywords\n\n.\n\nModeling and simulation Discrete event systems speciﬁcation (DEVS) Modeling and simulation framework (MSF) System entity structure (SES)\n\n1.1\n\n.\n\n.\n\nScope\n\nTuncer Ören The term simulation, based on the concept of similarity, has been used in English since mid-fourteenth century. Hence, simulation has non-technical as well as technical meanings. Accordingly, it has many deﬁnitions. A collection of about 100 T. Ören (&) University of Ottawa, Ottawa, ON, Canada e-mail: [email protected] B. P. Zeigler University of Arizona, Tucson, USA e-mail: [email protected] T. Pawletta University of Applied Sciences in Wismar, Wismar, Germany e-mail: [email protected] © The Author(s), under exclusive license to Springer Nature Switzerland AG 2023 T. Ören et al. (eds.), Body of Knowledge for Modeling and Simulation, Simulation Foundations, Methods and Applications, https://doi.org/10.1007/978-3-031-11085-6_1\n\n1\n\n2\n\nT. Ören et al.\n\ndeﬁnitions of the term simulation is compiled and categorized in three groups and nine subgroups by Ören [1]. In a sequel article, a critical review of these deﬁnitions was given [2]. In a Body of Knowledge document, it is imperative to delimit the scope of the main concept. Therefore, the meaning(s) of the term “simulation” as used in this document is clariﬁed based on Ören [2]. From a pragmatic point of view, based on the purpose of its use, simulation has three aspects: (1) Perform experiments, (2) Gain experience for training to gain/enhance any one of the three types of skills, or for entertainment, and (3) Imitation, pretense. Only the experiment and experimentation aspects are within the scope of this study. From experimentation aspect: “Simulation is performing goal-directed experiments with models of dynamic systems.” Purpose of simulation, as well as deﬁnitions and explanations of different types of experiments—outlined in Ören [2]—is elaborated later. From the experience perspective, simulation has two distinct usages for training and for entertainment: “Simulation is providing experience under controlled conditions for training, i.e., for gaining/enhancing competence in one of the three types of skills: (1) motor skills (virtual simulation or use of simulators), (2) decision and/or communication skills (constructive simulation such as business games, war games, or peace games; aka serious games), and (3) operational skills (live simulation).” Experience through gaming simulations can be used for training as well as for entertainment purposes. Simulation has many aspects. A recent publication lists 750 types of simulation [3].\n\n1.2\n\nTerminology\n\nBernard P. Zeigler After several decades of development, there are still a wide variety of modeling and simulation terms and associated concepts with multiple interpretations. This variety derives from different historical streams of development of Modeling and Simulation (M&S) within different contexts (whether industrial, governmental, or military) or disciplinary (whether in “hard” or “soft” science or engineering). The premise behind the need for a body of knowledge for M&S is that there is some\n\n1\n\nPreliminary\n\n3\n\ncore set of concepts that identify its activities as different from others and that are common no matter in which context they are employed. The reference list [4] contains 29 dictionaries of modeling and simulation. Some deﬁnitions can provide a good “ﬁrst approximation” to understanding a term and how it is used, and they lack the precision and rigor that a BoK should aspire to. Therefore, this BoK employs a Framework of M&S (reviewed in Sect. 1.4) to map out the basic entities and their relationships employed in M&S and at the same time, providing a theory-based set of deﬁnitions employed in the framework. Terms such as “model” and “simulator” are often loosely used in current practice but have a very sharp meanings in the framework. Therefore, it is important to understand what is included and excluded by the deﬁnitions. (This is especially true if you have some experience in M&S and are likely to associate (or prefer) meanings that are different from those developed here.) Based on the Modeling and Simulation Framework (MSF), the basic issues and problems encountered in performing M&S activities and using their vocabulary can be better understood and coherent solutions developed. Understanding the MSF core concepts and employing the associated terminology will help everyone involved in a simulation modeling project such as analysts, programmers, managers, and users to better carry out their tasks and communicate with each other.\n\n1.3\n\nRationale for Theoretical Basis of M&S\n\nBernard P. Zeigler “An established body of knowledge (BoK) is one of the pillars of an established discipline” [5]. The BoK establishes a kernel of topics that categorically characterize the discipline. When sufﬁciently mature, a comprehensive theory of the domain provides an essential framework to deﬁne a kernel of topics and to organize these topics in a meaningful way. Further, the framework and its underlying theory provide a sound foundation for conduct of activities in the disciple. At this point in time, it has been asserted that “Theory of Modeling and Simulation (1976) gives a theory for simulation that is based on general system theory and this theory is considered the only major theory for simulation. This book showed that simulation has a solid foundation and is not just some ad hoc way of solving problems” [6]. Furthermore, “Theory of Modeling and Simulation (1976)] is a major reference for modeling formalisms, particularly the Discrete Event System Speciﬁcation (DEVS). ... We mention the System Entity Structures and Model Base (SES/MB) framework as breakthrough in this ﬁeld [Model-base management]. It enables efﬁciency, reusability and interoperability” [5]. For an empirically based discipline, still in its formative stage, the theory and framework provided by Theory of Modeling and Simulation (1976) provided a sound foundation for M&S to emerge as an established discipline. Such a foundation is necessary to foster the development of M&S-speciﬁc methods and the use\n\n4\n\nT. Ören et al.\n\nof such methods to solve real-world problems faced by practitioners. Even when not fully accepted as gospel (as is theory in Theoretical Physics), the theory is sufﬁciently mature to provide the necessary skeleton to deﬁne a kernel of topics for the emerging M&S discipline and to meaningfully organize these topics. Furthermore, the theory’s basic entities and relations such as the separation, and inter-relation, of models and simulators, provide starting points to enumerate and address core M&S research challenges [7]. At the time of ﬁrst writing of this M&SBoK, theory and practice are being more strongly aligned in a comprehensive formulation of the simulation development life cycle [8]. Indeed, as the richness and applicability of the ﬁeld increase, it becomes more and more urgent to have an openly available M&SBoK.\n\n1.4\n\nModeling and Simulation Framework (MSF)\n\nBernard P. Zeigler\n\n1.4.1 System Concepts The US Department of Defense M&S Glossary (M&S Glossary) gives these definitions: (1) system model: A representation of a system; and (2) simuland: The system being simulated by a simulation. These deﬁne “system model” and “simuland” in terms of “system” but nowhere to be found is a deﬁnition of “system” itself. In contrast, the Modeling and Simulation Framework (MSF), to be reviewed here, includes the “system” as one of the four basic entities along with “experimental frame,” “model,” and “simulator.” Moreover, we need some basic concepts about systems that are reviewed only in outline (for details, see Zeigler et al. [9], Theory of Modeling and Simulation, Chap. 1—any edition.)\n\n1.4.1.1 System Specification Hierarchy Levels of System Specification The MSF sets forth the fundamental entities and relationships in the M&S enterprise. To describe these items, we employ the systems’ speciﬁcation hierarchy as the basis for the MSF. Table 1.1 identiﬁes ﬁve basic levels of system speciﬁcation forming a System Speciﬁcation Hierarchy. The fourth column gives an example of a system speciﬁcation at each level applied to a person in a conversation. Later, we will formulate a conversation, itself, as system composed of two interacting persons. At each level, we know some important things about a system that we did not know at lower levels. At the lowest level, the Observation Frame identiﬁes a portion of the real world (source system) that we wish to model and the means by which we are going to observe it.\n\n1\n\nPreliminary\n\n5\n\nTable 1.1 Levels of system speciﬁcation Level\n\nSpeciﬁcation name\n\nWhat we know at this level\n\nExample: a person in a conversation\n\n0\n\nObservation frame\n\nThe person has inputs and outputs at the usual cognitive level, such as streams of words\n\n1\n\nI/O behavior\n\nHow to stimulate the system with inputs; what variables to measure and how to observe them over a time base Time-indexed data collected from a source system; consists of input/output pairs\n\n2\n\nI/O function\n\nKnowledge of initial state; given an initial state, every input stimulus produces a unique output\n\n3\n\nState transition\n\n4\n\nCoupled component\n\nHow states are affected by inputs; given a state and an input what is the state after the input stimulus is over; what output event is generated by a state Components and how they are coupled together. The components can be speciﬁed at lower levels or can even be structure systems themselves— leading to hierarchical structure\n\nFor each input that the person recognizes, the set of possible outputs that the person can produce Assuming knowledge of the person’s initial state when starting the conversation, the unique output response to each input How the person transits from state to state under input words and generates output words from the current state\n\nA description of a person’s I/O behavior in terms of neural components and their interaction by spikes is at this level\n\nAs the next two levels, the I/O Behavior and Function levels, we have a database of measurements and observations made for the source system. When we get to Level 3, the State Transition Level, we have the ability to recreate this data using a more compact representation, such as a formula. Since typically, there are many formulas or other means to generate the same data, the particular means or formula we have settled on constitutes knowledge we did not have at the lower data levels. When people talk about models in the context of simulation studies, they are usually referring to the concepts identiﬁed at this level. That is, to them a model means a program to generate data. At the highest level, the Coupled Component Level we have a very speciﬁc kind of generative system. In other words, we know how to generate the data observed at Level 1 in a more speciﬁc manner in terms of component systems that are interconnected together and whose interaction accounts for the observations made. When people talk about systems, they are often referring to this level of knowledge. They think of reality as being made up of interacting parts so that the whole is the sum (or sometimes claimed, more, or less, than the sum) of its parts. Although some people use the term “subsystems” for these parts, we call them component systems (and reserve the term subsystem for another meaning).\n\n6\n\nT. Ören et al.\n\nThe System Speciﬁcation Hierarchy is a useful starting point since it provides a uniﬁed perspective on what are usually considered to be distinct concepts. From this perspective, there are only three basic kinds of problems dealing with systems and they involve moving between the levels of system knowledge. In systems analysis, we are trying to understand the behavior of an existing or hypothetical system based on its known structure. Systems inference is done when we do not know what this structure is—so we try to guess this structure from observations that we can make. Finally, in systems design, we are investigating the alternative structures for a completely new system or the redesign of an existing one.\n\n1.4.2 The Entities of the Modeling and Simulation Framework As illustrated in Fig. 1.1, the basic entities of the framework are source system, model, simulator, and experimental frame. The basic inter-relationships among entities are the modeling and the simulation relationships. The entities are deﬁned in Table 1.2 which also characterizes the level of system speciﬁcation that typically describes the entities. The level of speciﬁcation is an important feature for distinguishing between the entities, which is often confounded in the literature. You can return to Fig. 1.1 and Table 1.2 to keep an overall view of the framework as we describe each of the components in the following presentation.\n\n1.4.2.1 Source System The source system (we will omit the “source” qualiﬁer, when the context is clear) is the real or virtual environment that we are interested in modeling. It is viewed as a source of observable data, in the form of time-indexed trajectories of variables. The\n\nFig. 1.1 Fundamental entities and relationships in the M&S framework\n\n1\n\nPreliminary\n\n7\n\nTable 1.2 Deﬁning the basic entities in M&S and their usual levels of speciﬁcation Basic entity\n\nDeﬁnition\n\nRelated system speciﬁcation levels\n\nSource system Behavior database Experimental frame Model\n\nReal or artiﬁcial source of data\n\nKnown at level 0\n\nCollection of gathered data\n\nObserved at level 1\n\nSpeciﬁes the conditions under which system is observed or experimented with Instructions for generating data\n\nSimulator\n\nComputational device for generating behavior of the model\n\nConstructed at levels 3 and 4 Constructed at levels 3 and 4 Constructed at level 4\n\ndata that has been gathered from observing or otherwise experimenting with a system is called the system behavior database. As indicated in Table 1.2, this concept of system is a speciﬁcation at level 0 and its database is a speciﬁcation at level 1. This data is viewed or acquired through experimental frames of interest to the modeler. Applications of M&S differ with regard to how much data is available to populate the system database. In data-rich environments, such data is abundant from prior experimentation or can easily be obtained from measurements. In contrast, data-poor environments offer meager amounts of historical data or low-quality data (whose representativeness of the system of interest is questionable). In some cases, it is impossible to acquire better data (e.g., of combat in real warfare); in others, it is expensive to do so (e.g., topography and vegetation of a forest). In the latter case, the modeling process can direct the acquisition of data to those areas that have the highest impact on the ﬁnal outcome.\n\n1.4.2.2 Experimental Frame An experimental frame is a speciﬁcation of the conditions under which the system is observed or experimented with. As such, an experimental frame is the operational formulation of the objectives that motivate a modeling and simulation project. For example, out of the multitude of variables that relate to a forest, the set {lightning, rain, wind, smoke} represents one particular choice. Such an experimental frame is motivated by the interest in modeling the way lightning ignites a forest ﬁre. A more reﬁned experimental frame would add the moisture content of the vegetation and the amount of unburned material as variables. Thus, many experimental frames can be formulated for the same system (both source system and model) and the same experimental frame may apply to many systems. Why would we want to deﬁne many frames for the same system? Or apply the same frame to many systems? For the same reason, we might have different objectives in modeling the same system or have the same objective in modeling different systems. More of this in the sequel.\n\n8\n\nT. Ören et al.\n\nThere are two equally valid views of an experimental frame. One views a frame as a deﬁnition of the type of data elements that will go into the database. The second views a frame as a system that interacts with the system of interest to obtain the data of interest under speciﬁed conditions. In this view, the frame is characterized by its implementation as a measurement system or observer. In this implementation, a frame typically has three types of components (as shown in Fig. 1.2): generator that generates input segments to the system; acceptor that monitors an experiment to see the desired experimental conditions are met; and transducer that observes and analyzes the system output segments.\n\n1.4.2.3 Objectives and Experimental Frames Objectives for modeling relate to the role of the model in systems design, management, or control. The statement of objectives serves to focus model construction on particular issues. Figure 1.3 depicts the process of transforming objectives into experimental frames. Typically, modeling objectives concern system design. Here, measures of the effectiveness of a system in accomplishing its goal are required to evaluate the design alternatives. We call such measures, outcome measures. In order to compute such measures, the model must include variables, we will call output variables, whose values are computed during execution runs of the model. The mapping of the output variables into outcome measures is performed by the transducer component of the experimental frame. Often there may be more than one layer of variables intervening between output variables and outcome measures. For example, in military simulations, measures of performance are output variables that typically judge how well parts of a system are operating. For example, the success of a missile in hitting its target is a performance measure. Such measures enter as factors into outcome measures, often called measures of effectiveness, that measure how well the overall system goals are being achieved, e.g., how many battles are actually won by a particular combination of weapons, platforms, personnel, etc. The implication is that high performing components are necessary, but not sufﬁcient, for highly effective systems, in which they must be coordinated together to achieve the overall goals.\n\nFig. 1.2 Experimental frame and its components SYSTEM\n\nEXPERIMENTAL FRAME\n\ngenerator\n\nacceptor\n\ntransducer\n\n1\n\nPreliminary\n\n9 Objectives\n\nOutcome Measures\n\nOutput Variables\n\nExperimental Frame\n\nFig. 1.3 Transforming objectives to experimental frames\n\nExample: Two-person Interaction The conversation example for the System Speciﬁcation Hierarchy of Table 1.1 actually assumes an underlying experimental frame that was not completely speciﬁed. We can specify the objective of trying to characterize when a two-person interaction is a valid conversation, i.e., when the participants exchange words that make sense to an observer. We restrict the interaction to an exchange of greetings of two people passing by each other. There are relatively few pairs of words that make sense such as “Hello, Hi” as a greeting by one person and a response of the other, whereas most other pairs of words do not. Such pairs are in effect a description at the I/O Behavior level for the interaction of two persons. An experimental frame in this case centers on collecting such I/O pairs in both a real two-person encounter and a simulation model of it. The acceptor component of such a frame can monitor the interaction for pairs judged to be indicative of a valid conversation. Model In its most general guise, a model is a system speciﬁcation at any of the levels of the System Speciﬁcation Hierarchy. However, in the traditional context of M&S, the system speciﬁcation is usually done at levels 3 and 4. Thus, the most common concept of a simulation model is that it is a set of instructions, rules, equations, or constraints for generating I/O behavior. In other words, we write a model with a state transition and output generation mechanisms (level 3) to accept input trajectories and generate output trajectories depending on its initial state setting. Such models form the basic components in more complex models that are constructed by coupling them together to form a level 4 speciﬁcation. Example: Two-person Interaction An example of a conversation between two persons can be modeled as agents interacting through exchange of messages carried by discrete events. This constitutes a coupled model with atomic model components. Each component alternates between speaking and listening phases. If moreover, the components adhere to the discipline that only one is in the speaking phase at any time, then the result represents a valid conversation. If at any time, both components are in the same phase (speaking or listening) then the experimental frame acceptor just discussed will stop the simulation and declare this as an invalid conversation.\n\n10\n\nT. Ören et al.\n\nThere are many meanings that are ascribed to the word “model.” For example, a model is conceived as any physical, mathematical, or logical representation of a system, entity, phenomenon, or process. The deﬁnition in terms of system speciﬁcations has the advantages that it has a sound mathematical foundation and it has a deﬁnite semantics that everyone can understand in unambiguous fashion. Like other formal deﬁnitions, it cannot capture all meanings in the dictionary. However, it is intended to capture the most useful concepts in the M&S context.\n\n1.4.2.4 Simulator As a set of instructions, a model needs some agent capable of actually obeying the instructions and generating behavior. We call such an agent a simulator. Thus, a simulator is any computation system (such as a single processor, a processor network, the human mind, or more abstractly an algorithm), capable of executing a model to generate its behavior. A simulator is typically speciﬁed at a high level since it is a system that we design intentionally to be synthesized from components that are off-the-shelf and well-understood. Separating the model and simulator concepts provides a number of beneﬁts for the framework: . The same model, expressed in a formalism, may be executed by different simulators thus opening the way for portability and interoperability at a high level of abstraction. . Simulator algorithms for the various formalisms may be formulated and their correctness rigorously established. . The resources required to correctly simulate a model afford a measure of its complexity. Example: Two-person Interaction The two-person discrete event model just mentioned can be formulated within the Discrete Event System Speciﬁcation (DEVS) formalism as illustrated in Chap. 10 of (Zeigler et al. 2017). This then allows the model behavior to be generated by a DEVS simulator, i.e., a simulation program implementing the rules of the Abstract DEVS simulation protocol that guarantees correct simulation of any DEVS model.\n\n1.4.3 Primary Relations Among Entities The entities—system, experimental frame, model, and simulator—become truly signiﬁcant only when properly related to each other. For example, we build a model of a particular system for some objective—only some models, and not others, are suitable. Thus, it is critical to the success of a simulation modeling effort that certain relationships hold. The two most fundamental are the modeling and the simulation relations (Table 1.3).\n\n1\n\nPreliminary\n\n11\n\nTable 1.3 Primary relationships among entities Basic relationship\n\nDeﬁnition\n\nRelated system speciﬁcation levels\n\nModeling relation Replicative validity Predictive validity Structural validity Simulation relation Correctness\n\nConcerned with how well model-generated behavior agrees with observed system behavior\n\nComparison is at level 1 Comparison is at level 2 Comparison is at level 3, 4\n\nConcerned with assuring that the simulator carries out correctly the model instructions\n\nBasic comparison is at level 2; involves homomorphism at levels 3 or 4\n\n1.4.3.1 Modeling Relation: Validity The basic modeling relation, validity, refers to the relation between a model, a system, and an experimental frame. Validity is often thought of as the degree to which a model faithfully represents its system counterpart. However, it makes much more practical sense to require that the model faithfully captures the system behavior only to the extent demanded by the objectives of the simulation study. In the MSF, the concept of validity answers the question of whether it is impossible to distinguish the model and system in the experimental frame of interest. The most basic concept, replicative validity, is afﬁrmed if, for all the experiments possible within the experimental frame, the behavior of the model and system agree within acceptable tolerance. Thus, replicative validity requires that the model and system agree at the I/O relation level 1 of the system speciﬁcation hierarchy. Stronger forms of validity are predictive validity and structural validity. In predictive validity, we require not only replicative validity, but also the ability to predict as yet unseen system behavior. To do this, the model needs to be set in a state corresponding to that of the system. Thus, predictive validity requires agreement at the next level of the system hierarchy, that of the I/O function level 2. Finally, structural validity requires agreement at level 3 (state transition) or higher (coupled component). This means that the model not only is capable of replicating the data observed from the system but also mimics in step-by-step, component-by-component fashion, the way that the system does its transitions. The term accuracy is often used in place of validity. Another term, ﬁdelity, is often used for a combination of both validity and detail. Thus, a high-ﬁdelity model may refer to a model that is both high in detail and in validity (in some understood experimental frame). However, when used this way, beware that there may be a tacit assumption that high detail alone is needed for high ﬁdelity, as if validity is a necessary consequence of high detail. In fact, it is possible to have a very detailed model that is nevertheless very much in error, simply because some of the highly resolved components function in a different manner than their real system counterparts.\n\n12\n\nT. Ören et al.\n\n1.4.3.2 Simulation Relation: Simulator Correctness The basic simulation relation, simulator correctness, is a relation between a simulator and a model. A simulator correctly simulates a model if it is guaranteed to faithfully generate the model’s output trajectory given its initial state and its input trajectory. Thus, simulator correctness requires agreement at the I/O function level 2. In practice, simulators are constructed to execute not just one model but a family of possible models. This flexibility is necessary if the simulator is to be applicable to a range of applications. In such cases, we must establish that a simulator will correctly execute a particular class of models. Since the structures of both the simulator and the model are at hand, it may be possible to prove correctness by showing that a homomorphism relation holds. Here, a homomorphism is a correspondence between simulator and model states that is preserved under transitions and outputs.\n\n1.4.4 Other Important Relationships Besides the two fundamental modeling and simulation relationships, there are others that are important for the M&SBoK. These relations have to with the interplay and comparative complexity-related orderings of models and experimental frames.\n\n1.4.4.1 Modeling as Valid Simplification The inescapable fact about modeling is that it is severely constrained by complexity limitations. Complexity is at heart, an intuitive concept—the feeling of frustration or awe that we all sense when things get too numerous, diverse, or intricately related to discern a pattern, to see all at once—in a word, to comprehend. Generalizing from the boggled human mind to the overstressed simulator suggests that the complexity of model can be measured by the resources required by a particular simulator to correctly interpret it. As such, complexity is measured relative to a particular simulator, or class of simulators. However, properties intrinsic to the model are often strongly correlated with complexity independently of the underlying simulator. Successful modeling can then be seen as valid simpliﬁcation. We need to simplify, or reduce the complexity, to enable our models to be executed on our resource-limited simulators. But the simpliﬁed model must also be valid, at some level, and within some experimental frame of interest. As in Fig. 1.4, there is always a pair of models involved, call them the base and lumped models. Here, the base model is typically “more capable” and requires more resources for interpretation than the lumped model. By the term “more capable,” we mean that the base model is valid within a larger set of experimental frames (with respect to a real system) than the lumped model. However, the important point is that within a particular frame of interest the lumped model might be just as valid as the base model. The concept of morphism affords criteria for judging the equivalence of base and lumped models with respect to an experimental frame.\n\n1\n\nPreliminary\n\nFig. 1.4 Base/lumped model equivalence in experimental frame\n\n13 Experimental Frame base model\n\nmorphism\n\nlumped model\n\n1.4.4.2 Experimental Frame—Model Relationships Assume that we have a whole repository of models and experimental frames that have been built up over years of experience. Then, it is critical to have an ability to ask whether there are any experimental frames that meet our current objectives and whether there are models that can work within this frame. Only those models have a chance of providing valid answers to our current questions. The relation that determines if a frame can logically be applied to a model is called applicability and its converse is called accommodation (Table 1.4). Notice that validity of a model in a particular experimental frame requires, as a precondition, that the model accommodates the frame. The degree to which one experimental frame is more restrictive in its conditions than another is formulated in the derivability relation. A more restrictive frame leaves less room for experimentation or observation than one from which it is derivable. So, as illustrated in Fig. 1.5, it is easier to ﬁnd a model that is valid in a restrictive frame for a given system. It turns out that applicability may be reduced to derivability. To see this, deﬁne the scope frame of the model to represent the most relaxed conditions under which it can be experimented with (this is clearly a characteristic of the model.) Then, a frame is applicable to a model, if it is derivable from the scope frame of the model. This means that a repository need not support both applicability and derivability queries. Only the latter is sufﬁcient if each model has an associated scope frame.\n\nTable 1.4 Other M&S relationships important when dealing with a model repository Relationship\n\nDeﬁnition\n\nExperimental frame applies to a model (or “is applicable to”) Model accommodates experimental frame Experimental frame 1 is derivable from experimental frame 2\n\nThe conditions on experimentation required by the frame can be enforced in the model Frame is applicable to the model Any model that accommodates experimental frame 2 also accommodates experimental frame 1\n\n14\n\nT. Ören et al.\n\nFig. 1.5 Illustrating important M&S relations relevant to model repositories\n\nMore demanding frames\n\nMore Detailed Models\n\napplies to\n\nderivable from\n\nexperimental frames\n\nhomomorphism\n\nmodels\n\n1.4.5 Time A time base is an ordered set, usually the real numbers, for indexing events that models the flow of actual time (Table 1.5). If the interpretation of such a time base is left abstract in this manner, we refer to it as logical time. In contrast, when we consider events happening in the real world, in real time, we refer to a time variable as measured by an actual clock. Thus, physical time, also called metric time or wall-clock time, is measured by ticks of physical clocks, while logical time is measured by ticks of a clock somehow embedded in a model. Also, as relativity theory made clear, time, as perceived by observers at different locations may be different. Based on this distinction, time can be either local or global. The former is valid only within a component of a system; the latter is valid in the whole system. Thus, there are at least two dimensions for classifying time: one along the logical/physical axis and the other along the local/global axis. Consequently, a time base can be interpreted as falling in any one of the four combinations shown in 0. Traditionally, modeling and simulation have considered mainly the ﬁrst (global, logical) combination. That is, we assume all components of a modeled system have the same time frame of reference and we consider time as an abstract quantity. Table 1.5 A time taxonomy Logical/physical Logical time Local/global\n\nGlobal time\n\nLocal time\n\nGlobal logical: All components operate on the same abstract time base All components operate on the same abstract time base Local, logical: A component operates on its own abstract time base\n\nPhysical time Global, physical: All components operate on the same system clock Local, physical: A component operates on its own system clock\n\n1\n\nPreliminary\n\n15\n\nHowever, when a model is executing in a simulator, which may be distributed among computer nodes in a network and may also be interacting with the real world, it is hard to maintain this ﬁction. We note that synchronization between time bases requires maintaining a correspondence between the two. For example, a distributed simulation protocol synchronizes the local, logical times maintained by the individual simulator nodes. Another example of synchronization occurs in a real time, human-in-the-loop simulation-based training. Here, the simulator employs a physical time base (e.g., computer system clock) to synchronize between a pilot’s physically perceived time base and the logical time of a model of the aircraft being simulated.\n\n1.4.6 Mapping Informal Terminology to MSF Formalization Bernard P. Zeigler Often in the literature of M&S, terminology is deﬁned conceptually but not in the mathematically precise manner of the MSF presented here. For example, we have seen how the US Department of Defense M&S Glossary (M&S Glossary— M&SCO) deﬁnes “system model” and “simuland” in terms of “system” without giving a deﬁnition of “system” itself. A rough equivalence between terminology often found in the literature and entities of the framework can be established in Tables 1.6 and 1.7: Since the MSF deﬁnes its entities as mathematical systems, it can deﬁne typical activities involved in M&S work as mathematical relations. A rough equivalence is given in Table 1.7: Table 1.6 Some common conceptual deﬁnitions and MSF equivalents Conceptual deﬁnition of object\n\nMSF formalization\n\nA simuland is the real-world system of interest. It is the object, process, or phenomena to be simulated A model is a representation of a simuland, broadly grouped into conceptual and executable types\n\nReal-world system is a source of data that can be represented by a system speciﬁcation at a behavioral level Model is a set of rules for generating behavior and can be represented by a system speciﬁcation at a structural level. A modeling formalism, e.g., DEVS, enables conceptual speciﬁcation and is mapped to a simulation language for execution by a simulator A simulator is a system capable of generating the behavior of a model; simulators come in classes corresponding to formalisms, e.g., an abstract DEVS simulator describes implementable simulators of DEVS models The behavior of a model generated by a simulator constitutes a speciﬁcation at the behavior level\n\nSimulation is the process of executing a model over time\n\nThe results of simulation are the output produced by a model during a simulation\n\n16\n\nT. Ören et al.\n\nTable 1.7 Conceptual deﬁnitions and MSF equivalents Conceptual deﬁnition of activity\n\nMSF formalization\n\nVeriﬁcation is the process of determining if an implemented model is consistent with its speciﬁcation\n\nThere is a relation, called simulation correctness, between models and simulators. Veriﬁcation is the process of proving this correctness in a simulator generating the behavior of the model. When this is done for a formalism, it certiﬁes a simulator as correct for any model of the associated class There is a relation, called validity in a frame, between models and real systems within an experimental frame. Validation is the process of establishing that the behaviors of the model and real system agree in the frame in question. The frame can capture the intended objectives (extended to intended uses), domain of applicability, and accuracy requirements Abstraction is the process of constructing a lumped model from a base model intended to be valid for the real system in a given experimental frame\n\nValidation is the process of determining if a model behaves with satisfactory accuracy consistent with the study objectives within its domain of applicability to the simuland it represents\n\nAbstraction is the omission or reduction of detail not considered necessary in a model\n\nThe deﬁnition of validation is a synthesis of various deﬁnitions in the literature that separately relate the model to a real system, the purposes of model construction, the domain of applicability, and the accuracy required. For example, Balci [10] deﬁnes validation as the assessment of behavioral or representational accuracy and then later conditions accuracy on intended use. Our intent is to best represent the conceptual literature for the purposes of relating it to the MSF.\n\n1.5\n\nBasic System Entity Structure (SES) Concepts\n\nThorsten Pawletta The System Entity Structure (SES) is a structural knowledge representation scheme introduced by Zeigler [11]. It contains knowledge of decomposition, taxonomy, and coupling of a system. In combination with a Model Base (MB), it supports different concepts for system modeling, investigating design alternatives, reusing good designs, and collaborative modeling [7, 12, 13]. Figure 1.6 shows the general procedure model of an SES/MB-based M&S according to Pawletta et al. [14]. Possible conﬁgurations of a system or a family of systems are analyzed. That means, basic dynamic components, their relations, and parameter settings are identiﬁed. Dynamic components are modeled or implemented as reusable basic systems with deﬁned input and output interfaces and organized in a MB. The possible system structures and parameter settings are modeled with an SES, which speciﬁes formal links to basic systems in the MB. Figure 1.7 shows an\n\n1\n\nPreliminary\n\n17\n\nFig. 1.6 Procedure model of an SES/MB-based M&S according to Pawletta et al. [14]\n\nFig. 1.7 Basic example of a SES, which describes ten admissible system structures. There are two variants of composing entity B (aspects B1-Dec and B2-Dec), three variants for selecting a speciﬁc type of entity C and entity D can be replicated one, two, or three times. However, the semantic condition limits the selection to C3_C and only one replication of D when using aspect B2-Dec. The coupling relations of the replicated entities D result dynamically dependent on the value of attribute numRepD\n\nexample of an SES with associated MB. In the application phase, executable models are generated with transformation methods such as pruning and build. Based on deﬁned objectives, the pruning method derives a unique system conﬁguration from the set of possible conﬁgurations. The result of pruning is called Pruned Entity Structure (PES). Based on the information in the PES, the build method generates an Executable Model using basic systems from the MB.\n\n18\n\nT. Ören et al.\n\nThe transformation methods can be executed interactively or automatically. Extended SES/MB-based architectures for automated and reactive pruning of SES are presented in Schmidt et al. [15] and Folkerts et al. [16]. Different approaches of the build method are discussed in Folkerts et al. [17]. The generation of executable models for different simulators based on a uniform MB is discussed by Pawletta and Folkerts (Sect. 18.6). An SES is represented by a directed tree structure, as illustrated in Fig. 1.7. The different edges are related to different node types. Each node can deﬁne attached variables, also called attributes. Real-world or imaginary objects are represented by entity nodes. Entity attributes represent properties of the respective object. The root and the leaves are always entities. Relations between entities are speciﬁed by three types of descriptive nodes, called aspect, multi-aspect, and specialization. The attributes of descriptive nodes specify relations between their parent node and children nodes or decisions for the pruning process. Aspects describe how entities can be decomposed in partial entities. Coupling relations can be speciﬁed in a couplings attribute. Multi-aspects describe the decomposition of an entity into entities of the same class. They deﬁne an additional attribute, called Number of Replications (numRep). The taxonomy of an entity is described by specialization(s) and concerns admissible variants of an entity. Rules for selecting a variant during pruning can be deﬁned in a selection rule attribute. With the extended procedural knowledge representation according to Pawletta et al. [14], attributes can be dynamically assigned values. For example, coupling relations of a multi-aspect can result dependent on the value of attribute numRep. The semantics of the SES is deﬁned by axioms. Types of each node have to follow the axiom alternating mode. Every entity node has to be followed by a descriptive node, and vice versa. A strict hierarchy is needed. In every path of the tree, a name of a node may occur only once. If nodes in different paths have the same name, they need to have the same variables and isomorphic partial trees. This is called uniformity. Nodes on the same level of a hierarchy, called sibling nodes, have to be valid brothers, meaning that sibling nodes must not have the same name. The axiom of attached variables implies that a node must not have variables of the same name. The axiom of inheritance implies that during pruning, the parent and the child of a specialization combine their variables, aspects, and specializations. The conﬁgurations modeled in an SES tree can be delimited by selection constraints and semantic conditions. There are numerous additional SES concepts, such as using the SES as a general ontology for data modeling [18], the speciﬁcation of abstraction hierarchies and time granularities for families of systems [19], interfaces for automated, reactive pruning [15], methods for the pruning of deep hierarchies of certain node type combinations [16], or the combination with performance metrics to evaluate and select the best possible system conﬁgurations [20].\n\n1\n\nPreliminary\n\n19\n\nReferences 1. Ören TI (2011a) The many facets of simulation through a collection of about 100 deﬁnitions. SCS M&S Magazine, 2:2 (April), pp. 82–92. http://scs.org/wp-content/uploads/2016/12/ 2011-04-Issue06-6.pdf. Accessed: 2019–01–24 2. Ören TI (2011b) A critical review of deﬁnitions and about 400 types of modelling and simulation. SCS M&S Mag 2:3 (July):142–151. http://scs.org/wp-content/uploads/2016/12/ 2011-04-Issue06-6.pdf. Accessed: 2019–01–24 3. Ören T, Mittal S, Durak U (Invited Chapter) Modeling and simulation: the essence and increasing importance. In: Niazi MA (ed) Modeling and simulation of complex communication networks, the IET book series on big data. (Appendix A: A list of over 750 types of simulation, Appendix B: A list of 900 types of models, and Appendix C: A list of 120 types of input) 4. Appendix A1—Dictionaries of modeling and simulation, cybernetics, and systems (compiled by Tuncer Ören) 5. Durak U, Őren T, Tolk A (2017) An index to the body of knowledge of simulation systems engineering. In: Tolk A, Őren T (eds) The profession of modeling and simulation: discipline, ethics, education, vocation, societies, and economics. Wiley. 6. Sargent RG (2017) A perspective on ﬁfty-ﬁve years of the evolution of scientiﬁc respect for simulation. In: Chan WKV, D'Ambrogio A, Zacharewicz G, Mustafee N, Wainer G, Page E (eds) Page proceedings of the 2017 winter simulation conference 7. Zeigler BP, Muzy A, Kofman E (2018) Theory of modelling and simulation, 3rd edn. Elsevier Academic Press 8. Zhang L, Zeigler BP, LaiLi Y (2019) Model engineering for simulation, (co-volume with TMS3rd Ed.) Elsevier 9. Zeigler BP, Muzy A, Kofman E (3rd edn, 2019) Theory of modeling and simulation: discrete event & iterative system computational foundations, Elsevier. Please note: Chapters from this latest (3rd) edition can be downloaded from: https://www.sciencedirect.com/book/ 9780128133705/theory-of-modeling-and-simulation or from Researchgate.net (requesting from Alex Muzy or B.P. Zeigler) 10. Balci O (2012) A life cycle for modeling and simulation. Simulation 88(7):870–883 11. Zeigler BP (1984) Multifaceted modelling and discrete event simulation. Academic Press 12. Rozenblit JW, Zeigler BP (1993) Representing and constructing system speciﬁcations using the system entity structure concepts. In: Winter simulation conference, Los Angeles, pp 604– 611 13. Zeigler BP, Praehofer H, Kim TG (2000) Theory of modelling and simulation, 2nd edn. Elsevier Academic Press 14. Pawletta T, Durak U, Schmidt A (2019) Modeling and simulation of versatile technical systems using an extended system entity structure/model base infrastructure. In: Zhang L, Zeigler BP, Laili Y (eds) Model engineering for simulation. Elsevier Academic Press, pp 393–418 (Chapter 18) 15. Schmidt A, Durak U, Pawletta T (2016) Model-based testing methodology using system entity structures for MATLAB/simulink models. Simul Trans Soc Model Simul Int 92 (8):729–746 16. Folkerts H, Pawletta T, Deatcu C, Zeigler BP (2020) Automated, reactive pruning of system entity structures for simulation engineering. SpringSim’20, May 19–21, Fairfax, VA, USA, Society for Modeling & Simulation International (SCS), 12 pages 17. Folkerts H, Pawletta T, Deatcu C (2020) Model generation for multiple simulators using SES/MB and FMI. ASIM SST 2020, October 14–15, St. Augustin, Germany, ARGESIM report 59, pp 13–20. https://doi.org/10.11128/arep.59.a59003 18. Zeigler BP, Hammonds P (2007) Modeling and simulation-based data engineering. Academic Press, Burlington\n\n20\n\nT. Ören et al.\n\n19. Santucci JF, Capocchi L, Zeigler BP (2016) System entity structure extension to integrate abstraction hierarchies and time granularity into DEVS modeling and simulation. Simul Trans Soc Model Simul Int 92(8):747–794 20. Capocchi L, Santucci JF, Pawletta T, Folkerts H, Zeigler BP (2020) Discrete-event simulation model generation based on activity metrics. Simul Model Pract Theory 103:102122 (41 pages). https://doi.org/10.1016/j.simpat.2020.102122 21. Fujimoto R, Bock C, Chen W, Page E, Panchal JH (eds) (2017) Research challenges in modeling and simulation for engineering complex systems. Springer International Publishing AG 22. Zeigler BP (1976) Theory of modeling and simulation. Academic Press, Elsevier\n\n2\n\nM&S Bok Core Areas and the Big Picture Tuncer Ören , Umang Kant , Mayank Sing , Paul Fishwick , Mamadou Kaba Traoré , Lin Zhang , Yuanjun Laili , Bernard P. Zeigler , Andreas Tolk , Gregory Zacharewicz , Mohammad S. Obaidat, and Balqies Sadoun\n\nAbstract\n\nThis chapter deals with models, data, and their relations and use. It introduces the big picture of the SCS M&S Body of Knowledge, providing taxonomies for models and their uses and resulting perceptions as well as an extensive section on data. It addresses the questions of modeling and various modeling formalisms, model engineering, and model curation for repository integration. The chapter concludes with model-based simulation approaches and a section on the transient elimination in simulation.\n\nT. Ören (&) University of Ottawa, Ottawa, ON, Canada e-mail: [email protected] U. Kant Delhi Technological University, New Delhi, India M. Sing Consilio Research Lab, Noida, India e-mail: [email protected] P. Fishwick University of Texas at Dallas, Richardson, TX, USA e-mail: [email protected] M. K. Traoré University of Bordeaux, Bordeaux, France e-mail: [email protected] L. Zhang . Y. Laili Beihang University, Beijing, China e-mail: [email protected] © The Author(s), under exclusive license to Springer Nature Switzerland AG 2023 T. Ören et al. (eds.), Body of Knowledge for Modeling and Simulation, Simulation Foundations, Methods and Applications, https://doi.org/10.1007/978-3-031-11085-6_2\n\n21\n\n22\n\nT. Ören et al.\n\nKeywords\n\n.\n\n.\n\nModeling and simulation Simulation data Modeling formalisms engineering Model curation Transient elimination\n\n.\n\n2.1\n\n.\n\n. Model\n\nThe Big Picture\n\nTuncer Ören This section is adopted from [1, 2] and has been updated accordingly. Simulation is a model-based activity [3]. Hence, core areas of simulation include models and data; their relationship is straightforward. Data is used to formulate and calibrate models, and models are used to generate data. Models are formulated according to modeling formalisms. Model engineering covers all aspect of formulation, processing, and use of models. Experiments and experience are the main reasons of using modeling and simulation. Models or representations of existing or non-existing reality are used in simulation. Study of reality/model dichotomy can help us explore different types of simulation. Table 2.1 outlines model/reality dichotomy based on usage in art, engineering, science, decision support, education, training, entertainment, as well as pretense and representation.\n\nY. Laili e-mail: [email protected] B. P. Zeigler University of Arizona, Tucson, USA e-mail: [email protected] A. Tolk The MITRE Corporation, Charlottesville, VA, USA e-mail: [email protected] G. Zacharewicz IMT-Mines Alès, 6 avenue de Clavières, 30100 Ales, France e-mail: [email protected] M. S. Obaidat University of Texas-Permian Basin, Odessa, TX 79762, USA King Abdullah II School of Information Technology, University of Jordan, Jordan and University of Science and Technology, Amman, Jordan B. Sadoun College of Engineering, Al Balqa’ Applied University, Al Salt, Jordan\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n23\n\nTable 2.1 Model/reality dichotomies Based on reality/model dichotomy In simulation, models or representations of existing or non-existing reality are used. Study of reality/model dichotomy can help us explore different types of simulation. Reality/model dichotomy depends on the purpose: art, engineering, science, decision support, education, training, entertainment, as well as pretense, representation Art In art, reality is a source of inspiration and is called ‘model’ The model—for an artist—is what a simulationist would say real system! Engineering There are two possibilities for design and control problems: Design A design (or a model) is an instrument to engineer a system Control A model is a basis to control a system Science Use of models in analysis problems Analysis A model is a representation to understand a system Decision support A model is a substitute of reality to perform experiments A model or a representation of reality can be used to gain experience to develop/enhance three types of skills Education A model is a representation to explain/teach dynamic systems Training A representation of a system provides experience to enhance three types of skills – Motor skills (virtual simulation, simulators, virtual simulators) – Decision-making skills (constructive simulation; serious games) – Operational skills (live simulation) Entertainment A representation of a system provides experience for entertainment pretense/representation We are often exposed to simulated reality, in postmodern societies [4] (boundary becomes blurred)\n\nSimulation can be perceived from different perspectives such as purpose of use, problem to be solved, connectivity of operations, types of knowledge processing, and philosophy of science. Table 2.2 outlines perceptions of simulation based on purpose of use and problem to be solved. Use of simulation experiments for decision support has many aspects. Table 2.3 outlines several ways simulation experiments are used for decision support. Perceptions of simulation based on the connectivity of operations of simulation and system of interest are outlined in Table 2.4. Based on knowledge processing, simulation can be perceived as a computational activity, a system theory-based activity, a model-based activity, a knowledge generation activity, and a knowledge-processing activity. Table 2.5 outlines perceptions of simulation from the perspectives of computational and system theory-based activities. As a model-based activity, simulation has several advantages and covers four types of activities. Table 2.6 outlines advantages and four types of activities.\n\n24\n\nT. Ören et al.\n\nTable 2.2 Perceptions of simulation based on purpose of use and problem to be solved Based on purpose of use This perspective is user oriented and clariﬁes main categories of uses of simulation Experiment Simulation is performing experiments (for decision support, understanding, and education) Experience Simulation provides experience (under controlled conditions) for: Training (for gaining/enhancing competence) for three types of skills: – Motor skills (virtual simulation by using virtual or simulated equipment) – Decision and/or communication skills (constructive simulation— serious games) – Operational skills (live simulation) Entertainment (gaming simulation) Imitation Imitation is another aspect of simulation (such as simulated leather or fake) and is the original meaning attached to the term simulation. Art can also be perceived as experience [5]. However, these aspects are beyond the scope of this document Based on problem to be solved (Simulation is perceived as an infrastructure to support real-world activities and is perceived as not being the “real thing”) Table 2.3 Several ways simulation experiments are used for decision support Use of simulation experiments for decision support Prediction of behavior and/or performance of the system of interest within the constraints inherent in the simulation model (e.g., its granularity) and the experimental conditions Evaluation of alternative models, parameters, experimental and/or operating conditions on model behavior or performance Sensitivity analysis of behavior or performance of the system of interest based on granularities of different models, parameters, experimental and/or operating conditions Evaluation of behavior and/or performance of engineering designs Virtual prototyping Testing Planning Acquisition (or simulation-based acquisition) Proof of concept\n\nModel analysis covers many model-based activities. It can be descriptive model analysis or model characterization and evaluative model analysis or model evaluation. Table 2.7 outlines types of model characterization. Model evaluation or evaluative model analysis can be done with respect to modeling formalisms, another model (model comparison), real system, and goal of study. Table 2.8 outlines types of model evaluations. Model transformation is another type of model-based activity. Table 2.9 outlines types of model transformations.\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n25\n\nTable 2.4 Perceptions of simulation based on the connectivity of operations of simulation and system of interest Based on connectivity of operations of simulation and system of interest Two possibilities can be identiﬁed No connection This is the case of stand-alone simulation which is the most widely used type of simulation Operations are This is the case of integrated or symbiotic simulation. It can be used for interwoven two purposes To enrich real system’s operations (The system of interest and the simulation program operate simultaneously) for – Online diagnostics (or simulation-based diagnostics) – Simulation-based augmented/enhanced reality operation (for training to gain/enhance motor skills and related decision-making skills) (e.g., AI airplane in a dogﬁght training with real aircrafts) To support real system operations (The system of interest and the simulation program operate alternately to provide simulation-based predictive displays) – Parallel experiments while system is running\n\nTable 2.5 Perceptions of simulation from the perspectives of computational and system theory-based activities Based on types of knowledge processing Simulation is a computational activity, a system theory-based activity, a model-based activity, a knowledge generation activity, and a knowledge-processing activity Computational This point of view clariﬁes some legacy deﬁnitions of simulation activity Simulation is “A method for implementing a model over time.” [6] “Simulation: the exercising of a model over time.” [7] Some examples of circular, incorrect, and misleading deﬁnitions of simulation were cited by Ören [1] System theory-based This approach [8] is the basis of system-theoretic approach for activity modeling and symbolic model processing – The widely used standard approach is discrete event system speciﬁcation (DEVS) [9] – General system theory implementor (GEST) was a system theory-based [10] declarative language for continuous systems expressible by ordinary differential equations [11, 12]. Its coupling features, which include time-varying coupling [13], go beyond traditional programming [14]. However, there is no commercial version – Dynamo (DYNAmic models) is a historic language developed by J. W. Forrester et al. in late 1950s and was based in industrial dynamics (later system dynamics) (Wikipedia-Dynamo)\n\n26\n\nT. Ören et al.\n\nTable 2.6 Advantages of model-based simulation and four types of activities Based on types of knowledge processing: simulation is a model-based activity Some of the advantages of model-based approach [3] are efﬁciency in computerization, reliability, reusability and composability, and interoperability – Efﬁciency in computerization: model bases (or model repositories) may contain model speciﬁcations that can easily be converted into programs. Hence, programming aspect can and should be fully automated. This aspect also eliminates programming errors and contributes to the reliability of the computerization of models – Reliability: models can easily be read and understood by specialists in the ﬁeld. This aspect can help assuring model reliability Model speciﬁcations can be checked by specialized software as well as manually for consistency, completeness, and correctness. This aspect is deﬁnitely superior to traditional V&V techniques that work on code only and can be the basis for built-in reliability in M&S studies – Reusability and composability: model speciﬁcations can easily be modiﬁed for model reusability as well as model composition. Some of the model composability techniques can be dynamically applicable for systems that not only have dynamic behavior but also can and should be modiﬁed dynamically as the simulation evolves – Interoperability: it is highly desirable to check interoperability of model speciﬁcations rather than the codes of models since executability of code does not necessarily signify its semantic interoperability As a model-based activity, simulation includes the following four types of activities: model building, model-based management, parameter base management, and model processing – Model building It consists of modeling (from scratch) and model composition including dynamic model composition at run time (or execution time) – Model-based management It includes model search, semantic model search, and model integrity – Parameter base management In some applications, such as nuclear fuel waste management simulations, a large number of parameters may be involved, and some parameters may not have point values and may be described by probability density functions – Model processing: it consists of – Model analysis (descriptive model analysis (model characterization)) evaluative model analysis (model evaluation) – Model transformation, and behavior generation Table 2.7 Types of descriptive model analysis or model characterization\n\nDescriptive model analysis (Model characterization) for Model comprehensibility Model documentation Static model documentation Dynamic model documentation Model ventilation (to examine its assumptions, deﬁciencies, limitations, etc.) Model usability Model referability Model-based management Model integrity Model composability\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n27\n\nTable 2.8 Types of model evaluations Evaluative model analysis (Model evaluation) with respect to Modeling formalisms Consistency of model representation Static structure of Component models Total system (coupled model, model of system of systems) Dynamic structure State transitions, output function(s) Structural change Dynamic coupling Model robustness Another model (model comparison) Structural model comparison Model veriﬁcation (comparison of a computerized model and corresponding conceptual model) Checking Model homomorphism, model isomorphism Model equivalencing for: – Any two models – A simpliﬁed and original model – An elaborated and original model Behavioral model comparison (comparison of behaviors of several models within a given scenario) Real system Model qualiﬁcation Model realism (model veracity, model verisimilitude) Adequacy of model structure: – Static structure (relevant variables, interface of models) – Dynamic structure Adequacy of model constants and parameters – Model identiﬁcation, model ﬁtting, model calibration Model correctness analysis Dimensional analysis Model validity Goal of the study Model relevance Domain of intended application(s) (appropriate use of a model) Range of applicability of a model Acceptability of a model with respect to its technical system speciﬁcation\n\n28 Table 2.9 Types of model transformations\n\nT. Ören et al. Types of model transformation Model Model Model Model\n\nModel Model Model Model\n\ncopying reduction pruning simpliﬁcation Structural model simpliﬁcation Behavioral model simpliﬁcation elaboration isomorphism homomorphism endomorphism\n\nTable 2.10 Types of model behavior\n\nTypes of model behavior\n\nTable 2.11 Types of model behavior generation\n\nTypes of model behavior generation by\n\nPoint behavior (as a result of) Computation Optimization Search Trajectory behavior Simulators Simulation Intermittent simulation Optimizing simulation Gaming simulation Structural behavior Growth systems Lindenmayer systems (L-systems) Mixed trajectory and structural behavior\n\nNumerical techniques Deterministic techniques Stochastic techniques Non-numerical techniques By symbolic techniques By analogical techniques Mixed numerical and symbolic techniques (multi-paradigm modeling)\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n29\n\nTable 2.12 Characteristics of simulation as a knowledge generation activity Based on types of knowledge processing: (Simulation is a knowledge generation activity) From this perspective, “Simulation is model-based experiential knowledge generation” [2]. Based on this feature – Advanced simulation environments can combine modeling, model processing, behavior generation, and other types of knowledge processing (integrated use of M&S with optimization, AI, and software agents) – Combination of simulation systems with sensors and affectors; and switching from simulation to real system operation or vice versa is possible – Combination of several types of knowledge processing such as soft computing, cognitive, and emotive computing is possible\n\nTable 2.13 Characteristics of simulation as a knowledge-processing activity Based on types of knowledge processing: (Simulation is a knowledge-processing activity) Advanced simulation environments can Combine modeling, model processing, behavior generation, and other types of knowledge processing such as – Integrated use of M&S with optimization, AI, and software agents Combine simulation systems with sensors and affectors; and switching from simulation to real system operation or vice versa Allow combination of several types of knowledge processing: soft computing, cognitive, and emotive computing\n\nA pragmatically important type of model processing is generation of model behavior which is done in every simulation study. Tables 2.10 and 2.11 outline, respectively, types of model behavior and types of model behavior generation. Characteristics of simulation as a knowledge generation activity are outlined in Table 2.12. Characteristics of simulation as a knowledge-processing activity are outlined in Table 2.13. From the point of view of philosophy of science, simulation supports and enriches modern scientiﬁc thinking as advocated by Bacon [15].\n\n2.2\n\nData\n\nUmang Kant, Mayank Sing Data plays a pivotal role in the process of simulation. Data works as the input to the simulation models which in turn produce data. Simulations are often used to solve real-time problems, and hence, we need real-time data to make the simulation a success. Simulation process gives solutions to problems by giving clear insights. The data used for simulation will shape the outcome of the process. Hence, it is of utmost importance to be clear about what type of data is to be used.\n\n30\n\nT. Ören et al.\n\nThe choice and value of data used in simulation can have an impact on the underlying mechanisms that control the behavior of the system. In this chapter, we explore and discuss the types of data and various terms related to data with respect to M&S BOK. Accessible data Accessible data refers to the data which can be retrieved, modiﬁed, copied, or moved from an organization’s repository (hard drives, disks, database, data warehouse, cloud, etc.) provided the party (users) accessing the data has proper authority. The data can be accessed on demand as per needs, and authorized users can perform above-mentioned functions at any location as per convenience. So, data access can be deﬁned as the way by which authorized users can get access to this data and its location in an authenticated manner approved by the organization having that data. This data can either be at rest or in motion. When data is at rest in a repository, we can access the data in two ways: (i) sequential access: where seek operation is used till the required data is found and (ii) random access: data can be retrieved from anywhere in the disk. Actual data Actual data is the data which has been interpolated using the current parameters, hence making it more fluid data. Actual data is different from historical data, as well as forecast data; where the historical data is the collection the data which has happened in the past and has records of its existence, whereas forecast data is the prediction based on the correlations of the historical and current trends. Adjusted data The principle behind the concept of adjusting data is that the data is adjusted to satisfy the constraint which is believed to be true and is a fact. Hence, adjusted data can be deﬁned as data which has had some modiﬁcations and manipulations to adjust in the required speciﬁcations of the application. Three of the most signiﬁcation methods of adjusting the data are (i) weighing data, (ii) variable respeciﬁcation, and (iii) scale transformation. ALSP data ALSP stands for aggregate level simulation protocol. This protocol facilitates interoperating the simulations with each other. It manages the adaptable demands of the system with respect to the application in use. ALSP data refers to the data which supports the various simulations and their relationship with each other. Ambiguous data Ambiguous data refers to the data having same representation but different meaning or value. Ambiguous data leads to ambiguous information which in turn affects the process of decision making. Ambiguous data can be mined using multi-instance multi-label learning and other algorithms.\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n31\n\nAuditable data Auditable data is set of data which is forwarded to the process of data auditing. Data audit is the process to auditing the data to evaluate the utility and quality of the data being used for a speciﬁc purpose. The process of data audit requires considering key metrics to assess the quality of the data set. The main objective to carry out this process is to check if the data set ﬁts the organization’s data for a particular purpose, i.e., to check how the data set affects the performance, cost, and proﬁts/loss of the organization. Bivariate data Bivariate data refers to the data of two related variables. For example, sale of ice cream and temperature are related; similarly, the booking of hotel rooms is dependent upon the weather and vacation months. Such examples refer to bivariate data. Bivariate data is different from univariate data which is dependent on only one variable. Calibrated data Calibration refers to the process of comparing a device under test (DUT) on an unknown value with respect to a standard of a known value. Calibrated data can be deﬁned as the data upon which the calibrated settings have been applied. Calibration settings are flexible, and they are applied after applying the suitable data settings. Certiﬁed data Data is interpreted as certiﬁed data when a certiﬁed data analyst (CDA) acquires, cleanses, processes, and analyzes the data. Certiﬁed data helps the certiﬁed data analyst in making efﬁcient decisions and producing business reports in various industries such as retail, telecommunication, ﬁnancial, medicine, tourism, and others. Coarse data Coarse data can be interpreted as data that one observes not the true value of variable of interest but rather a subset of the sample space in which the true data lies. When the data is not to be found, their true values are known to lie somewhere in their sample space. The process of coarsening is not stochastic in nature. The degree of coarsening is pre-decided and is known in advance. Complex data Complex data is a type of data which indicates the level of difﬁculty while translating it into some business value. As the name suggests, complex data is difﬁcult to collect, model, and analyze than simple data. Such data requires various tools for interpretation and processing. Data falls into the category of complex data when it is ‘big’ in nature and when it is coming from various disparate sources.\n\n32\n\nT. Ören et al.\n\nConsistent data By consistent data, it is understood that the data is produced in a regulated and predictable manner. Consistent data is constant over time and relationship with other elements of the system environment. Each time the data is run on a particular system or application, it produces the same result, i.e., there is no data discrepancy. Data is considered to be consistent if it is formatted in a manner. A system is said to include consistent data if it does not contain contradiction or does not allow the users to infer any contradiction with respect to the data. Correct data As the name suggests, correct data is exact in nature, i.e., it is accurate and is free of faults and inconsistencies with respect to the system or the application, where that data is to be used and processed. Current data Current data lets the organization team to view the state-of-the-art analytics data even before the data is completely processed and conﬁrmed for decision making. It is in the nature of current data to display the metrics in least amount of time, which in turn provides actionable data which is further used for decision making. In reports, the current data is enabled by default to support quick decision making. Digital data Information which can be stored on the machine in the form of collections of 0s and 1s, i.e., in binary language is called digital data. A sequence or collection of 0s and 1s is forwarded to digital machines because these machines do not understand human understandable language (high-level language); hence, it is must to convert the information into low-level language and then covert the low-level language using a complier into a sequence of 0s and 1s. Digital data is different from analog data. DIS protocol data DIS stands for distributed interactive simulation. DIS refers to a protocol that has been speciﬁcally designed to facilitate communication between heterogenous simulators built by different manufacturers. The protocol data unit (PDU) is the DIS format for truth conveyance. It is an ambiguous data format for communicating a particular event or speciﬁc piece of information. Environmental data Environmental data refers to that data which is solely based on the (i) measurements of environmental characteristics such as pressure and temperature, (ii) state of the environment, and (iii) the environment impacts on the ecosystems. Environmental statistics are also often considered as environmental data. While understanding environmental data, we need to understand what data we need to collect and analyze and then break down the types of data. The environmental data can be\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n33\n\nclassiﬁed into following types: (i) continuous, (ii) count (simple or categorical), (iii) proportion, and (iv) binary or unary, etc. Evaluation data Evaluation data refers to the compilation of data and the use of consistent analysis methods. Evaluation data includes identiﬁcation of research goal, existence of research problem, methodology type, data compilation processes, sample data, and data analysis techniques and outcomes. If we are trying to ﬁnd out: how many? how much? what percentage? how often? what is the average amount?, etc., then we must choose quantitative methods. If we are trying to ﬁnd out: what worked best? what did not work well? what do the numbers mean? how was the project useful? what factors influenced success or failure?, etc., we must choose qualitative methods. Exchange data Exchange data refers to the data being shared among different stakeholders or different computer programs. Here the data is structured under a source schema and transformed into a target schema. It provides data points from various parts of the world to support data marketing and advertising. Here we can use previously unavailable or outdated data and use it to power the marketing campaigns. Experimental data In science and engineering, experimental data is the data produced by a test method, a measurement, an experiment design, or quasi-experimental design. Haptic data Haptic data is the data being generated by haptic technology. The aim of haptic technology is to simulate the sensory environment and enable the users to touch, feel, and manipulate virtual objects in the environment through haptic interfaces as true to the reality as possible. By incorporating perceptual cues such as feel, shape, texture, stiffness, and friction, one can depict properties of virtual object. Hardwired data By hardwired data, we mean the data which is not flexible and will not thrive in different environments. Hardwired data comes wired up by the developer or by the system before it can be used, and during the use, there is no possibility of changing its properties. Heterogenous data Data which is generated by Internet of Things (IoT) is heterogenous data. These types of data come with high variability of data formats and data types. These data are ambiguous in nature, and since they are collected over the Internet with sensors, i.e., they are collected on a large scale, there is no guarantee of their quality. This type of data needs to be analyzed before use. Heterogenous data falls into the\n\n34\n\nT. Ören et al.\n\nfollowing categories: (i) syntactic heterogenous data, (ii) conceptual heterogenous data, (iii) terminological heterogenous data, and (iv) semiotic heterogenous data. Historical data In broad context, historical data can be deﬁned as the data which is collected from past events and situations pertaining to a particular application. This data is generated either manually or routinely within an enterprise. HLA protocol data HLA stands for high-level architecture, and HLA protocol data refers to more recent standard for interoperability among simulations. This data refers to architecture with a set of API standards as opposed to a networking protocol like DIS. Real-time infrastructure supports and implements the HLA protocol data and transports data from one federate to another. Input data Input data serves as input to the system, device, or programs. Instance data Instance data completely describes the state of object in question. It consists of all the internal states of the object so that it almost becomes synonymous to the object itself. Instance meta-data Instance meta-data discusses the instance. This data can be used to manage the current running instance. Instance meta-data can be divided into categories depending upon the application in question such as events, partners names, and security levels. Instance data can also be used to access user data speciﬁed at the launch of the instance. Irrelevant data Irrelevant data refers to the data which is not connected or relevant to the application being dealt. Using irrelevant data will lead to change in the desired outcome. Irrelevant data can also be understood as unimportant data. Legacy data Legacy data refers to such data which comes in the category of enterprise essential information. This data is stored in some old format in computer system. Legacy data is usually used in government schemes or in industries. This data is generally available online depending upon the use. It is important to handle the legacy data by following some steps: (i) develop data error handling strategy, (ii) support read-only legacy data access, (iii) encapsulate legacy data access, etc.\n\n2\n\nM&S Bok Core Areas and the Big Picture\n\n35\n\nLivewired data Livewired data is complete opposite if hardwired data. As opposed to hardwired, livewired data provides huge flexibility and possibility of changes as per the environment. This type of data can thrive in any type of environment as it learns to adapt to the environment, and hence, the properties are also not ﬁxed. Meta-data Meta-data refers to data about data. Model data Model data is the data used in a data model, where model data and other related elements are organized together. The related data follows model’s standardization. Monitoring data Monitoring data is obtained by the method of evaluating and reviewing the data at every step. The quality of the data is to be ensured and monitored so that it is ﬁt for the purpose. For the monitoring purpose, we can use data monitoring software which helps in tracking the data for the use. Multisample data Multisample data is obtained in those instances where enough experiments are performed so that the reliability of the results can be assured by statistics. Noisy data Noisy data can be referred to as corrupt data or meaning less data. This data cannot be understood and interpreted by the machines used in the organizations. Other issues with noisy data are that it wastes the storage capacity of the machine and yields incorrect results. Noisy data is generated by human or computer error, faulty instruments, data transmission errors, naming convention inconsistencies, inconsistent formats, etc. Non-stationary data The data which is unpredictable and hence cannot be modeled or forecasted is known as non-stationary data. They yield spurious results and hence indic"
    }
}