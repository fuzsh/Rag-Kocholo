{
    "id": "dbpedia_1734_1",
    "rank": 30,
    "data": {
        "url": "https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/table/kafka/",
        "read_more_link": "",
        "language": "en",
        "title": "Kafka",
        "top_image": "https://nightlies.apache.org/flink/flink-docs-master/favicon.png",
        "meta_img": "https://nightlies.apache.org/flink/flink-docs-master/favicon.png",
        "images": [
            "https://nightlies.apache.org/flink/flink-docs-master/flink-header-logo.svg",
            "https://nightlies.apache.org/flink/flink-docs-master/svg/menu.svg",
            "https://nightlies.apache.org/flink/flink-docs-master/svg/toc.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Apache Kafka SQL Connector # Scan Source: Unbounded Sink: Streaming Append Mode\nThe Kafka connector allows for reading data from and writing data into Kafka topics.\nDependencies # Only available for stable versions.\nThe Kafka connector is not part of the binary distribution. See how to link with it for cluster execution here.\nHow to create a Kafka table # The example below shows how to create a Kafka table:",
        "meta_lang": "en",
        "meta_favicon": "/flink/flink-docs-master/favicon.png",
        "meta_site_name": "",
        "canonical_link": "//nightlies.apache.org/flink/flink-docs-master/docs/connectors/table/kafka/",
        "text": "Apache Kafka SQL Connector #\n\nScan Source: Unbounded Sink: Streaming Append Mode\n\nThe Kafka connector allows for reading data from and writing data into Kafka topics.\n\nDependencies #\n\nOnly available for stable versions.\n\nThe Kafka connector is not part of the binary distribution. See how to link with it for cluster execution here.\n\nHow to create a Kafka table #\n\nThe example below shows how to create a Kafka table:\n\nAvailable Metadata #\n\nThe following connector metadata can be accessed as metadata columns in a table definition.\n\nThe R/W column defines whether a metadata field is readable (R) and/or writable (W). Read-only columns must be declared VIRTUAL to exclude them during an INSERT INTO operation.\n\nKey Data Type Description R/W topic STRING NOT NULL Topic name of the Kafka record. R partition INT NOT NULL Partition ID of the Kafka record. R headers MAP NOT NULL Headers of the Kafka record as a map of raw bytes. R/W leader-epoch INT NULL Leader epoch of the Kafka record if available. R offset BIGINT NOT NULL Offset of the Kafka record in the partition. R timestamp TIMESTAMP_LTZ(3) NOT NULL Timestamp of the Kafka record. R/W timestamp-type STRING NOT NULL Timestamp type of the Kafka record. Either \"NoTimestampType\", \"CreateTime\" (also set when writing metadata), or \"LogAppendTime\". R\n\nThe extended CREATE TABLE example demonstrates the syntax for exposing these metadata fields:\n\nFormat Metadata\n\nThe connector is able to expose metadata of the value format for reading. Format metadata keys are prefixed with 'value.'.\n\nThe following example shows how to access both Kafka and Debezium metadata fields:\n\nConnector Options #\n\nOption Required Forwarded Default Type Description\n\nconnector\n\nrequired no (none) String Specify what connector to use, for Kafka use 'kafka'.\n\ntopic\n\nrequired for sink yes (none) String Topic name(s) to read data from when the table is used as source. It also supports topic list for source by separating topic by semicolon like 'topic-1;topic-2'. Note, only one of \"topic-pattern\" and \"topic\" can be specified for sources. When the table is used as sink, the topic name is the topic to write data to. Note topic list is not supported for sinks.\n\ntopic-pattern\n\noptional yes (none) String The regular expression for a pattern of topic names to read from. All topics with names that match the specified regular expression will be subscribed by the consumer when the job starts running. Note, only one of \"topic-pattern\" and \"topic\" can be specified for sources.\n\nproperties.bootstrap.servers\n\nrequired yes (none) String Comma separated list of Kafka brokers.\n\nproperties.group.id\n\noptional for source, not applicable for sink yes (none) String The id of the consumer group for Kafka source. If group ID is not specified, an automatically generated id \"KafkaSource-{tableIdentifier}\" will be used.\n\nproperties.*\n\noptional no (none) String This can set and pass arbitrary Kafka configurations. Suffix names must match the configuration key defined in Kafka Configuration documentation. Flink will remove the \"properties.\" key prefix and pass the transformed key and values to the underlying KafkaClient. For example, you can disable automatic topic creation via 'properties.allow.auto.create.topics' = 'false'. But there are some configurations that do not support to set, because Flink will override them, e.g. 'key.deserializer' and 'value.deserializer'.\n\nformat\n\nrequired no (none) String The format used to deserialize and serialize the value part of Kafka messages. Please refer to the formats page for more details and more format options. Note: Either this option or the 'value.format' option are required.\n\nkey.format\n\noptional no (none) String The format used to deserialize and serialize the key part of Kafka messages. Please refer to the formats page for more details and more format options. Note: If a key format is defined, the 'key.fields' option is required as well. Otherwise the Kafka records will have an empty key.\n\nkey.fields\n\noptional no [] List<String> Defines an explicit list of physical columns from the table schema that configure the data type for the key format. By default, this list is empty and thus a key is undefined. The list should look like 'field1;field2'.\n\nkey.fields-prefix\n\noptional no (none) String Defines a custom prefix for all fields of the key format to avoid name clashes with fields of the value format. By default, the prefix is empty. If a custom prefix is defined, both the table schema and 'key.fields' will work with prefixed names. When constructing the data type of the key format, the prefix will be removed and the non-prefixed names will be used within the key format. Please note that this option requires that 'value.fields-include' must be set to 'EXCEPT_KEY'.\n\nvalue.format\n\nrequired no (none) String The format used to deserialize and serialize the value part of Kafka messages. Please refer to the formats page for more details and more format options. Note: Either this option or the 'format' option are required.\n\nvalue.fields-include\n\noptional no ALL\n\nEnum\n\nPossible values: [ALL, EXCEPT_KEY] Defines a strategy how to deal with key columns in the data type of the value format. By default, 'ALL' physical columns of the table schema will be included in the value format which means that key columns appear in the data type for both the key and value format.\n\nscan.startup.mode\n\noptional yes group-offsets Enum Startup mode for Kafka consumer, valid values are 'earliest-offset', 'latest-offset', 'group-offsets', 'timestamp' and 'specific-offsets'. See the following Start Reading Position for more details.\n\nscan.startup.specific-offsets\n\noptional yes (none) String Specify offsets for each partition in case of 'specific-offsets' startup mode, e.g. 'partition:0,offset:42;partition:1,offset:300'.\n\nscan.startup.timestamp-millis\n\noptional yes (none) Long Start from the specified epoch timestamp (milliseconds) used in case of 'timestamp' startup mode.\n\nscan.bounded.mode\n\noptional unbounded Enum Bounded mode for Kafka consumer, valid values are 'latest-offset', 'group-offsets', 'timestamp' and 'specific-offsets'. See the following Bounded Ending Position for more details.\n\nscan.bounded.specific-offsets\n\noptional yes (none) String Specify offsets for each partition in case of 'specific-offsets' bounded mode, e.g. 'partition:0,offset:42;partition:1,offset:300'. If an offset for a partition is not provided it will not consume from that partition..\n\nscan.bounded.timestamp-millis\n\noptional yes (none) Long End at the specified epoch timestamp (milliseconds) used in case of 'timestamp' bounded mode.\n\nscan.topic-partition-discovery.interval\n\noptional yes (none) Duration Interval for consumer to discover dynamically created Kafka topics and partitions periodically.\n\nsink.partitioner\n\noptional yes 'default' String Output partitioning from Flink's partitions into Kafka's partitions. Valid values are\n\ndefault: use the kafka default partitioner to partition records.\n\nfixed: each Flink partition ends up in at most one Kafka partition.\n\nround-robin: a Flink partition is distributed to Kafka partitions sticky round-robin. It only works when record's keys are not specified.\n\nCustom FlinkKafkaPartitioner subclass: e.g. 'org.mycompany.MyPartitioner'.\n\nSee the following Sink Partitioning for more details.\n\nsink.semantic\n\noptional no at-least-once String Deprecated: Please use sink.delivery-guarantee.\n\nsink.delivery-guarantee\n\noptional no at-least-once String Defines the delivery semantic for the Kafka sink. Valid enumerationns are 'at-least-once', 'exactly-once' and 'none'. See Consistency guarantees for more details.\n\nsink.transactional-id-prefix\n\noptional yes (none) String If the delivery guarantee is configured as 'exactly-once' this value must be set and is used a prefix for the identifier of all opened Kafka transactions.\n\nsink.parallelism\n\noptional no (none) Integer Defines the parallelism of the Kafka sink operator. By default, the parallelism is determined by the framework using the same parallelism of the upstream chained operator.\n\nFeatures #\n\nKey and Value Formats #\n\nBoth the key and value part of a Kafka record can be serialized to and deserialized from raw bytes using one of the given formats.\n\nValue Format\n\nSince a key is optional in Kafka records, the following statement reads and writes records with a configured value format but without a key format. The 'format' option is a synonym for 'value.format'. All format options are prefixed with the format identifier.\n\nThe value format will be configured with the following data type:\n\nKey and Value Format\n\nThe following example shows how to specify and configure key and value formats. The format options are prefixed with either the 'key' or 'value' plus format identifier.\n\nThe key format includes the fields listed in 'key.fields' (using ';' as the delimiter) in the same order. Thus, it will be configured with the following data type:\n\nSince the value format is configured with 'value.fields-include' = 'ALL', key fields will also end up in the value format’s data type:\n\nOverlapping Format Fields\n\nThe connector cannot split the table’s columns into key and value fields based on schema information if both key and value formats contain fields of the same name. The 'key.fields-prefix' option allows to give key columns a unique name in the table schema while keeping the original names when configuring the key format.\n\nThe following example shows a key and value format that both contain a version field:\n\nThe value format must be configured in 'EXCEPT_KEY' mode. The formats will be configured with the following data types:\n\nTopic and Partition Discovery #\n\nThe config option topic and topic-pattern specifies the topics or topic pattern to consume for source. The config option topic can accept topic list using semicolon separator like ’topic-1;topic-2’. The config option topic-pattern will use regular expression to discover the matched topic. For example, if the topic-pattern is test-topic-[0-9], then all topics with names that match the specified regular expression (starting with test-topic- and ending with a single digit)) will be subscribed by the consumer when the job starts running.\n\nTo allow the consumer to discover dynamically created topics after the job started running, set a non-negative value for scan.topic-partition-discovery.interval. This allows the consumer to discover partitions of new topics with names that also match the specified pattern.\n\nPlease refer to Kafka DataStream Connector documentation for more about topic and partition discovery.\n\nNote that topic list and topic pattern only work in sources. In sinks, Flink currently only supports a single topic.\n\nStart Reading Position #\n\nThe config option scan.startup.mode specifies the startup mode for Kafka consumer. The valid enumerations are:\n\ngroup-offsets: start from committed offsets in ZK / Kafka brokers of a specific consumer group.\n\nearliest-offset: start from the earliest offset possible.\n\nlatest-offset: start from the latest offset.\n\ntimestamp: start from user-supplied timestamp for each partition.\n\nspecific-offsets: start from user-supplied specific offsets for each partition.\n\nThe default option value is group-offsets which indicates to consume from last committed offsets in ZK / Kafka brokers.\n\nIf timestamp is specified, another config option scan.startup.timestamp-millis is required to specify a specific startup timestamp in milliseconds since January 1, 1970 00:00:00.000 GMT.\n\nIf specific-offsets is specified, another config option scan.startup.specific-offsets is required to specify specific startup offsets for each partition, e.g. an option value partition:0,offset:42;partition:1,offset:300 indicates offset 42 for partition 0 and offset 300 for partition 1.\n\nBounded Ending Position #\n\nThe config option scan.bounded.mode specifies the bounded mode for Kafka consumer. The valid enumerations are:\n\n`group-offsets`: bounded by committed offsets in ZooKeeper / Kafka brokers of a specific consumer group. This is evaluated at the start of consumption from a given partition.\n\n`latest-offset`: bounded by latest offsets. This is evaluated at the start of consumption from a given partition.\n\n`timestamp`: bounded by a user-supplied timestamp.\n\n`specific-offsets`: bounded by user-supplied specific offsets for each partition.\n\nIf config option value scan.bounded.mode is not set the default is an unbounded table.\n\nIf timestamp is specified, another config option scan.bounded.timestamp-millis is required to specify a specific bounded timestamp in milliseconds since January 1, 1970 00:00:00.000 GMT.\n\nIf specific-offsets is specified, another config option scan.bounded.specific-offsets is required to specify specific bounded offsets for each partition, e.g. an option value partition:0,offset:42;partition:1,offset:300 indicates offset 42 for partition 0 and offset 300 for partition 1. If an offset for a partition is not provided it will not consume from that partition.\n\nCDC Changelog Source #\n\nFlink natively supports Kafka as a CDC changelog source. If messages in a Kafka topic are change event captured from other databases using a CDC tool, you can use the corresponding Flink CDC format to interpret the messages as INSERT/UPDATE/DELETE statements into a Flink SQL table.\n\nThe changelog source is a very useful feature in many cases, such as synchronizing incremental data from databases to other systems, auditing logs, materialized views on databases, temporal join changing history of a database table and so on.\n\nFlink provides several CDC formats:\n\ndebezium\n\ncanal\n\nmaxwell\n\nSink Partitioning #\n\nThe config option sink.partitioner specifies output partitioning from Flink’s partitions into Kafka’s partitions. By default, Flink uses the Kafka default partitioner to partition records. It uses the sticky partition strategy for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n\nIn order to control the routing of rows into partitions, a custom sink partitioner can be provided. The ‘fixed’ partitioner will write the records in the same Flink partition into the same Kafka partition, which could reduce the cost of the network connections.\n\nConsistency guarantees #\n\nBy default, a Kafka sink ingests data with at-least-once guarantees into a Kafka topic if the query is executed with checkpointing enabled.\n\nWith Flink’s checkpointing enabled, the kafka connector can provide exactly-once delivery guarantees.\n\nBesides enabling Flink’s checkpointing, you can also choose three different modes of operating chosen by passing appropriate sink.delivery-guarantee option:\n\nnone: Flink will not guarantee anything. Produced records can be lost or they can be duplicated.\n\nat-least-once (default setting): This guarantees that no records will be lost (although they can be duplicated).\n\nexactly-once: Kafka transactions will be used to provide exactly-once semantic. Whenever you write to Kafka using transactions, do not forget about setting desired isolation.level (read_committed or read_uncommitted - the latter one is the default value) for any application consuming records from Kafka.\n\nPlease refer to Kafka documentation for more caveats about delivery guarantees.\n\nSource Per-Partition Watermarks #\n\nFlink supports to emit per-partition watermarks for Kafka. Watermarks are generated inside the Kafka consumer. The per-partition watermarks are merged in the same way as watermarks are merged during streaming shuffles. The output watermark of the source is determined by the minimum watermark among the partitions it reads. If some partitions in the topics are idle, the watermark generator will not advance. You can alleviate this problem by setting the 'table.exec.source.idle-timeout' option in the table configuration.\n\nPlease refer to Kafka watermark strategies for more details.\n\nSecurity #\n\nIn order to enable security configurations including encryption and authentication, you just need to setup security configurations with “properties.” prefix in table options. The code snippet below shows configuring Kafka table to use PLAIN as SASL mechanism and provide JAAS configuration:\n\nFor a more complex example, use SASL_SSL as the security protocol and use SCRAM-SHA-256 as SASL mechanism:\n\nPlease note that the class path of the login module in sasl.jaas.config might be different if you relocate Kafka client dependencies, so you may need to rewrite it with the actual class path of the module in the JAR. For example if you are using SQL client JAR, which has relocate Kafka client dependencies to org.apache.flink.kafka.shaded.org.apache.kafka, the path of plain login module should be org.apache.flink.kafka.shaded.org.apache.kafka.common.security.plain.PlainLoginModule instead.\n\nFor detailed explanations of security configurations, please refer to the “Security” section in Apache Kafka documentation.\n\nData Type Mapping #\n\nKafka stores message keys and values as bytes, so Kafka doesn’t have schema or data types. The Kafka messages are deserialized and serialized by formats, e.g. csv, json, avro. Thus, the data type mapping is determined by specific formats. Please refer to Formats pages for more details."
    }
}