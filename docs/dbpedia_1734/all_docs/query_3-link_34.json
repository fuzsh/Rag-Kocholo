{
    "id": "dbpedia_1734_3",
    "rank": 34,
    "data": {
        "url": "https://docs.emqx.com/en/emqx/latest/changes/changes-ce-v5.html",
        "read_more_link": "",
        "language": "en",
        "title": "Version 5",
        "top_image": "https://www.emqx.com/images/logo_512.png",
        "meta_img": "https://www.emqx.com/images/logo_512.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.emqx.com/en/emqx/latest/changes/changes-ce-v5.html",
        "text": "Version 5 â\n\n5.7.2 â\n\nRelease Date: 2024-08-07\n\nEnhancements â\n\n#13317 Added a new per-authorization source metric type: ignore. This metric increments when an authorization source attempts to authorize a request but encounters scenarios where the authorizer is not applicable or encounters an error, resulting in an undecidable outcome.\n\n#13336 Added functionality to initialize authentication data in the built-in database of an empty EMQX node or cluster using a bootstrap file in CSV or JSON format. This feature introduces new configuration entries, bootstrap_file and bootstrap_type.\n\n#13348 Added a new field payload_encode in the log configuration to determine the format of the payload in the log data.\n\n#13436 Added the option to add custom request headers to JWKS requests.\n\n#13507 Introduced a new built-in function getenv in the rule engine and variform expression to facilitate access to environment variables. This function adheres to the following constraints:\n\nPrefix EMQXVAR_ is added before reading from OS environment variables. For example, getenv('FOO_BAR') is to read EMQXVAR_FOO_BAR.\n\nThese values are immutable once loaded from the OS environment.\n\n#13521 Resolved an issue where LDAP query timeouts could cause the underlying connection to become unusable, potentially causing subsequent queries to return outdated results. The fix ensures the system reconnects automatically in case of a timeout.\n\n#13528 Applied log throttling for the event of unrecoverable errors in data integrations.\n\n#13548 EMQX now can optionally invoke the on_config_changed/2 callback function when the plugin configuration is updated via the REST API. This callback function is assumed to be exported by the <PluginName>_app module. For example, if the plugin name and version are my_plugin-1.0.0, then the callback function is assumed to be my_plugin_app:on_config_changed/2.\n\n#13386 Added support for initializing a list of banned clients on an empty EMQX node or cluster with a bootstrap file in CSV format. The corresponding config entry to specify the file path is banned.bootstrap_file. This file is a CSV file with , as its delimiter. The first line of this file must be a header line. All valid headers are listed here:\n\nas :: required\n\nwho :: required\n\nby :: optional\n\nreason :: optional\n\nat :: optional\n\nuntil :: optional\n\nSee the Configuration Manual for details on each field.\n\nEach row in the rest of this file must contain the same number of columns as the header line, and the column can be omitted then its value is undefined.\n\nBug Fixes â\n\n#13222 Resolved issues with flags checking and error handling associated with the Will message in the CONNECT packet. For detailed specifications, refer to:\n\nMQTT-v3.1.1-[MQTT-3.1.2-13], MQTT-v5.0-[MQTT-3.1.2-11]\n\nMQTT-v3.1.1-[MQTT-3.1.2-14], MQTT-v5.0-[MQTT-3.1.2-12]\n\nMQTT-v3.1.1-[MQTT-3.1.2-15], MQTT-v5.0-[MQTT-3.1.2-13]\n\n#13307 Updated ekka library to version 0.19.5. This version of ekka utilizes mria 0.8.8, enhancing auto-heal functionality. Previously, the auto-heal worked only when all core nodes were reachable. This update allows to apply auto-heal once the majority of core nodes are alive. For details, refer to the Mria PR.\n\n#13334 Implemented strict mode checking for the PasswordFlag in the MQTT v3.1.1 CONNECT packet to align with protocol specifications.\n\nNote: To ensure bug-to-bug compatibility, this check is performed only in strict mode.\n\n#13344 Resolved an issue where the POST /clients/:clientid/subscribe/bulk API would not function correctly if the node receiving the API request did not maintain the connection to the specified clientid.\n\n#13358 Fixed an issue when the reason in the authn_complete_event event was incorrectly displayed.\n\n#13375 The value infinity has been added as default value to the listener configuration fields max_conn_rate, messages_rate, and bytes_rate.\n\n#13382 Updated the emqtt library to version 0.4.14, which resolves an issue preventing emqtt_pools from reusing pools that are in an inconsistent state.\n\n#13389 Fixed an issue where the Derived Key Length for pbkdf2 could be set to a negative integer.\n\n#13389 Fixed an issue where topics in the authorization rules might be parsed incorrectly.\n\n#13393 Fixed an issue where plugin applications failed to restart after a node joined a cluster, resulting in hooks not being properly installed and causing inconsistent states.\n\n#13398 Fixed an issue where ACL rules were incorrectly cleared when reloading the built-in database for authorization using the command line.\n\n#13403 Addressed a security issue where environment variable configuration overrides were inadvertently logging passwords. This fix ensures that passwords present in environment variables are not logged.\n\n#13408 Resolved a function_clause crash triggered by authentication attempts with invalid salt or password types. This fix enhances error handling to better manage authentication failures involving incorrect salt or password types.\n\n#13419 Resolved an issue where crash log messages from the /configs API were displaying garbled hints. This fix ensures that log messages related to API calls are clear and understandable.\n\n#13422 Fixed an issue where the option force_shutdown.max_heap_size could not be set to 0 to disable this tuning.\n\n#13442 Fixed an issue where the health check interval configuration for actions/sources was not being respected. Previously, EMQX ignored the specified health check interval for actions and used the connector's interval instead. The fix ensures that EMQX now correctly uses the health check interval configured for actions/sources, allowing for independent and accurate health monitoring frequencies.\n\n#13503 Fixed an issue where connectors did not adhere to the configured health check interval upon initial startup, requiring an update or restart to apply the correct interval.\n\n#13515 Fixed an issue where the same client could not subscribe to the same exclusive topic when the node was down for some reason.\n\n#13527 Fixed an issue in the Rule Engine where executing a SQL test for the Message Publish event would consistently return no results when a $bridges/... source was included in the FROM clause.\n\n#13541 Fixed an issue where disabling CRL checks for a listener required a listener restart to take effect.\n\n#13552 Added a startup timeout limit for EMQX plugins with a default timeout of 10 seconds. Before this update, problematic plugins could cause runtime errors during startup, leading to potential issues where the main startup process might hang when EMQX is stopped and restarted.\n\n5.7.1 â\n\nRelease Date: 2024-06-26\n\nEnhancements â\n\n#12983 Add new rule engine event $events/client_check_authn_complete for authentication completion event.\n\n#13180 Improved client message handling performance when EMQX is running on Erlang/OTP 26 and increased message throughput by 10% in fan-in mode.\n\n#13191 Upgraded EMQX Docker images to run on Erlang/OTP 26.\n\nEMQX had been running on Erlang/OTP 26 since v5.5 except for docker images which were on Erlang/OTP 25. Now all releases are on Erlang/OTP 26.\n\n#13242 Significantly increased the startup speed of EMQX dashboard listener.\n\nBug Fixes â\n\n#13156 Resolved an issue where the Dashboard Monitoring pages would crash following the update to EMQX v5.7.0.\n\n#13164 Fixed HTTP authorization request body encoding.\n\nBefore this fix, the HTTP authorization request body encoding format was taken from the accept header. The fix is to respect the content-type header instead. Also added access templating variable for v4 compatibility. The access code of SUBSCRIBE action is 1 and PUBLISH action is 2.\n\n#13238 Improved the logged error messages when an HTTP authorization request with an unsupported content-type header is returned.\n\n#13258 Fix an issue where the MQTT-SN gateway would not restart correctly due to incorrect startup order of gateway dependencies.\n\n#13273 Fixed and improved handling of URIs in several configurations. The fix includes the following improvement details:\n\nAuthentication and authorization configurations: Corrected a previous error where valid pathless URIs such as https://example.com?q=x were mistakenly rejected. These URIs are now properly recognized as valid.\n\nConnector configurations: Enhanced checks to ensure that URIs with potentially problematic components, such as user info or fragment parts, are no longer erroneously accepted.\n\n#13276 Fixed an issue in the durable message storage mechanism where parts of the internal storage state were not correctly persisted during the setup of new storage generations. The concept of \"generation\" is used internally and is crucial for managing message expiration and cleanup. This could have manifested as messages being lost after a restart of EMQX.\n\n#13291 Fixed an issue where durable storage sites that were down being reported as up.\n\n#13290 Fixed an issue where the command $ bin/emqx ctl rules show rule_0hyd would produce no output when used to display rules with a data integration action attached.\n\n#13293 Improved the restoration process from data backups by automating the re-indexing of imported retained messages. Previously, re-indexing required manual intervention using the emqx ctl retainer reindex start CLI command after importing a data backup file.\n\nThis fix also extended the functionality to allow exporting retained messages to a backup file when the retainer.backend.storage_type is configured as ram. Previously, only setups with disc as the storage type supported exporting retained messages.\n\n#13140 Fixed an issue that caused text traces for the republish action to crash and not display correctly.\n\n#13148 Fixed an issue where a 500 HTTP status code could be returned by /connectors/:connector-id/start when there is a timeout waiting for the resource to be connected.\n\n#13181 EMQX now forcefully shut down the connector process when attempting to stop a connector, if such operation times out. This fix also improved the clarity of error messages when disabling an action or source fails due to an unresponsive underlying connector.\n\n#13216 Respect clientid_prefix config for MQTT bridges. Since EMQX v5.4.1, the MQTT client IDs are restricted to a maximum of 23 bytes. Previously, the system factored the clientid_prefix into the hash of the original, longer client ID, affecting the final shortened ID. The fix includes the following change details:\n\nWithout Prefix: The behavior remains unchanged. EMQX hashes the long client IDs (exceeding 23 bytes) to fit within the 23-byte limit.\n\nWith Prefix:\n\nPrefix â¤ 19 bytes: The prefix is retained, and the remaining portion of the client ID is hashed into a 4-byte space, ensuring the total length does not exceed 23 bytes.\n\nPrefix â¥ 20 bytes: EMQX will not attempt to shorten the client ID, fully preserving the configured prefix regardless of length.\n\n5.7.0 â\n\nRelease Date: 2024-05-27\n\nEnhancements â\n\nSecurity â\n\n#12947 For JWT authentication, support new disconnect_after_expire option. When enabled, the client will be disconnected after the JWT token expires.\n\nNote: This is a breaking change. This option is enabled by default, so the default behavior is changed. Previously, the clients with actual JWTs could connect to the broker and stay connected even after the JWT token expired. Now, the client will be disconnected after the JWT token expires. To preserve the previous behavior, set disconnect_after_expire to false.\n\nData Processing and Integration â\n\n#12671 An unescape function has been added to the rule engine SQL language to handle the expansion of escape sequences in strings. This addition has been done because string literals in the SQL language don't support any escape codes (e.g., \\n and \\t). This enhancement allows for more flexible string manipulation within SQL expressions.\n\nExtensibility â\n\n#12872 Implemented the Client Attributes feature. It allows setting additional properties for each client using key-value pairs. Property values can be generated from MQTT client connection information (such as username, client ID, TLS certificate) or set from data accompanying successful authentication returns. Properties can be used in EMQX for authentication, authorization, data integration, and MQTT extension functions. Compared to using static properties like client ID directly, client properties offer greater flexibility in various business scenarios, simplifying the development process and enhancing adaptability and efficiency in development work. Initialization of client_attrs The client_attrs fields can be initially populated from one of the following clientinfo fields:\n\ncn: The common name from the TLS client's certificate.\n\ndn: The distinguished name from the TLS client's certificate, that is, the certificate \"Subject\".\n\nclientid: The MQTT client ID provided by the client.\n\nusername: The username provided by the client.\n\nuser_property: Extract a property value from 'User-Property' of the MQTT CONNECT packet.\n\nExtension through Authentication Responses Additional attributes may be merged into client_attrs from authentication responses. Supported authentication backends include:\n\nHTTP: Attributes can be included in the JSON object of the HTTP response body through a client_attrs field.\n\nJWT: Attributes can be included via a client_attrs claim within the JWT.\n\nUsage in Authentication and Authorization If client_attrs is initialized before authentication, it can be used in external authentication requests. For instance, ${client_attrs.property1} can be used within request templates directed at an HTTP server for authenticity validation.\n\nThe client_attrs can be utilized in authorization configurations or request templates, enhancing flexibility and control. Examples include: In acl.conf, use {allow, all, all, [\"${client_attrs.namespace}/#\"]} to apply permissions based on the namespace attribute.\n\nIn other authorization backends, ${client_attrs.namespace} can be used within request templates to dynamically include client attributes.\n\nFor more information about the Client Attributes feature, see Client Attributes.\n\n#12910 Added plugin configuration management and schema validation. For EMQX enterprise edition, one can also annotate the schema with metadata to facilitate UI rendering in the Dashboard. See more details in the plugin template and plugin documentation.\n\nOperations and Management â\n\n#12923 Provided more specific error when importing wrong format into builtin authenticate database.\n\n#12940 Added ignore_readonly argument to PUT /configs API. Before this change, EMQX would return 400 (BAD_REQUEST) if the raw config included read-only root keys (cluster, rpc, and node). After this enhancement it can be called as PUT /configs?ignore_readonly=true, EMQX will in this case ignore readonly root config keys, and apply the rest. For observability purposes, an info level message is logged if any readonly keys are dropped. Also fixed an exception when config has bad HOCON syntax (returns 500). Now bad syntax will cause the API to return 400 (BAD_REQUEST).\n\n#12957 Started building packages for macOS 14 (Apple Silicon) and Ubuntu 24.04 Noble Numbat (LTS).\n\nBug Fixes â\n\nSecurity â\n\n#12887 Fixed MQTT enhanced auth with sasl scram.\n\n#12962 TLS clients can now verify server hostname against wildcard certificate. For example, if a certificate is issued for host *.example.com, TLS clients is able to verify server hostnames like srv1.example.com.\n\nMQTT â\n\n#12996 Fixed process leak in emqx_retainer application. Previously, client disconnection while receiving retained messages could cause a process leak.\n\nData Processing and Integration â\n\n#12653 The rule engine function bin2hexstr now supports bitstring inputs with a bit size that is not divisible by 8. Such bitstrings can be returned by the rule engine function subbits.\n\n#12657 The rule engine SQL-based language previously did not allow putting any expressions as array elements in array literals (only constants and variable references were allowed). This has now been fixed so that one can use any expressions as array elements. The following is now permitted, for example:\n\nbash\n\nselect [21 + 21, abs(-abs(-2)), [1 + 1], 4] as my_array from \"t/#\"\n\n#12932 Previously, if a HTTP action request received a 503 (Service Unavailable) status, it was marked as a failure and the request was not retried. This has now been fixed so that the request is retried a configurable number of times.\n\n#12948 Fixed an issue where sensitive HTTP header values like Authorization would be substituted by ****** after updating a connector.\n\n#13118 Fix a performance issue in the rule engine template rendering.\n\nObservability â\n\n#12765 Make sure stats subscribers.count subscribers.max contains shared-subscribers. It only contains non-shared subscribers previously.\n\nOperations and Management â\n\n#12812 Made resource health checks non-blocking operations. This means that operations such as updating or removing a resource won't be blocked by a lengthy running health check.\n\n#12830 Made channel (action/source) health checks non-blocking operations. This means that operations such as updating or removing an action/source data integration won't be blocked by a lengthy running health check.\n\n#12993 Fixed listener config update API when handling an unknown zone. Before this fix, when a listener config is updated with an unknown zone, for example {\"zone\": \"unknown\"}, the change would be accepted, causing all clients to crash whens connected. After this fix, updating the listener with an unknown zone name will get a \"Bad request\" response.\n\n#13012 The MQTT listerners config option access_rules has been improved in the following ways:\n\nThe listener no longer crash with an incomprehensible error message if a non-valid access rule is configured. Instead a configuration error is generated.\n\nOne can now add several rules in a single string by separating them by comma (for example, \"allow 10.0.1.0/24, deny all\").\n\n#13041 Improved HTTP authentication error log message. If HTTP content-type header is missing for POST method, it now emits a meaningful error message instead of a less readable exception with stack trace.\n\n#13077 This fix makes EMQX only read action configurations from the global configuration when the connector starts or restarts, and instead stores the latest configurations for the actions in the connector. Previously, updates to action configurations would sometimes not take effect without disabling and enabling the action. This means that an action could sometimes run with the old (previous) configuration even though it would look like the action configuration has been updated successfully.\n\n#13090 Attempting to start an action or source whose connector is disabled will no longer attempt to start the connector itself.\n\nGateways â\n\n#12909 Fixed UDP listener process handling on errors or closure, The fix ensures the UDP listener is cleanly stopped and restarted as needed if these error conditions occur.\n\n#13001 Fixed an issue where the syskeeper forwarder would never reconnect when the connection was lost.\n\n#13010 Fixed the issue where the JT/T 808 gateway could not correctly reply to the REGISTER_ACK message when requesting authentication from the registration service failed.\n\n5.6.1 â\n\nRelease Date: 2024-04-18\n\nBug Fixes â\n\n#12759 EMQX now automatically removes invalid backup files that fail during upload due to schema validation errors. This fix ensures that only valid configuration files are displayed and stored, enhancing system reliability.\n\n#12766 Renamed message_queue_too_long error reason to mailbox_overflow\n\nmailbox_overflow. The latter is consistent with the corresponding config parameter: force_shutdown.max_mailbox_size.\n\n#12773 Upgraded HTTP client libraries.\n\nThe HTTP client library (gun-1.3) incorrectly appended a :portnumber suffix to the Host header for standard ports (http on port 80, https on port 443). This could cause compatibility issues with servers or gateways performing strict Host header checks (e.g., AWS Lambda, Alibaba Cloud HTTP gateways), leading to errors such as InvalidCustomDomain.NotFound or \"The specified CustomDomain does not exist.\"\n\n#12802 Improved how EMQX handles node removal from clusters via the emqx ctl cluster leave command. Previously, nodes could unintentionally rejoin the same cluster (unless it was stopped) if the configured cluster discovery_strategy was not manual. With the latest update, executing the cluster leave command now automatically disables cluster discovery for the node, preventing it from rejoining. To re-enable cluster discovery, use the emqx ctl discovery enable command or simply restart the node.\n\n#12814 Improved error handling for the /clients/{clientid}/mqueue_messages and /clients/{clientid}/inflight_messages APIs in EMQX. These updates address:\n\nInternal Timeout: If EMQX fails to retrieve the list of Inflight or Mqueue messages within the default 5-second timeout, likely under heavy system load, the API will return 500 error with the response {\"code\":\"INTERNAL_ERROR\",\"message\":\"timeout\"}, and log additional details for troubleshooting.\n\nClient Shutdown: Should the client connection be terminated during an API call, the API now returns a 404 error, with the response {\"code\": \"CLIENT_SHUTDOWN\", \"message\": \"Client connection has been shutdown\"}. This ensures clearer feedback when client connections are interrupted.\n\n#12824 Updated the statistics metrics subscribers.count and subscribers.max to include shared subscribers. Previously, these metrics accounted only for non-shared subscribers.\n\n#12826 Fixed issues related to the import functionality of source data integrations and retained messages in EMQX. Before this update:\n\nThe data integration sources specified in backup files were not being imported. This included configurations under the sources.mqtt category with specific connectors and parameters such as QoS and topics.\n\nImporting the mnesia table for retained messages was not supported.\n\n#12843 Fixed cluster_rpc_commit transaction ID cleanup procedure on replicator nodes after executing the emqx ctl cluster leave command. Previously, failing to properly clear these transaction IDs impeded configuration updates on the core node.\n\n#12885 Fixed an issue in EMQX where users were unable to view \"Retained Messages\" under the \"Monitoring\" menu in the Dashboard.\n\nThe \"Retained messages\" backend API uses the qlc library. This problem was due to a permission issue where the qlc library's file_sorter function tried to use a non-writable directory, /opt/emqx, to store temporary files, resulting from recent changes in directory ownership permissions in Docker deployments.\n\nThis update modifies the ownership settings of the /opt/emqx directory to emqx:emqx, ensuring that all necessary operations, including retained messages retrieval, can proceed without access errors.\n\n5.6.0 â\n\nRelease Date: 2024-03-28\n\nEnhancements â\n\n#12251 Optimized the performance of the RocksDB-based persistent sessions, achieving a reduction in RAM usage and database request frequency. Key improvements include:\n\nIntroduced dirty session state to avoid frequent mria transactions.\n\nIntroduced an intermediate buffer for the persistent messages.\n\nUsed separate tracks of PacketIds for QoS1 and QoS2 messages.\n\nLimited the number of continuous ranges of inflight messages to 1 per stream.\n\n#12326 Enhanced session tracking with registration history. EMQX now has the capability to monitor the history of session registrations, including those that have expired. By configuring broker.session_history_retain, EMQX retains records of expired sessions for a specified duration.\n\nSession count API: Use the API GET /api/v5/sessions_count?since=1705682238 to obtain a count of sessions across the cluster that remained active since the given UNIX epoch timestamp (with seconds precision). This enhancement aids in analyzing session activity over time.\n\nMetrics expansion with cluster sessions gauge: A new gauge metric, cluster_sessions, is added to better track the number of sessions within the cluster. This metric is also integrated into Prometheus for easy monitoring:\n\n# TYPE emqx_cluster_sessions_count gauge emqx_cluster_sessions_count 1234\n\nNOTE: Please consider this metric as an approximate estimation. Due to the asynchronous nature of data collection and calculation, exact precision may vary.\n\n#12338 Introduced a time-based garbage collection mechanism to the RocksDB-based persistent session backend. This feature ensures more efficient management of stored messages, optimizing storage utilization and system performance by automatically purging outdated messages.\n\n#12398 Exposed the swagger_support option in the Dashboard configuration, allowing for the enabling or disabling of the Swagger API documentation.\n\n#12467 Started supporting cluster discovery using AAAA DNS record type.\n\n#12483 Renamed emqx ctl conf cluster_sync tnxid ID to emqx ctl conf cluster_sync inspect ID.\n\nFor backward compatibility, tnxid is kept, but considered deprecated and will be removed in 5.7.\n\n#12499 Enhanced client banning capabilities with extended rules, including:\n\nMatching clientid against a specified regular expression.\n\nMatching client's username against a specified regular expression.\n\nMatching client's peer address against a CIDR range.\n\nImportant Notice: Implementing a large number of broad matching rules (not specific to an individual clientid, username, or host) may affect system performance. It's advised to use these extended ban rules judiciously to maintain optimal system efficiency.\n\n#12509 Implemented API to re-order all authenticators / authorization sources.\n\n#12517 Configuration files have been upgraded to accommodate multi-line string values, preserving indentation for enhanced readability and maintainability. This improvement utilizes \"\"\"~ and ~\"\"\" markers to quote indented lines, offering a structured and clear way to define complex configurations. For example:\n\nrule_xlu4 { sql = \"\"\"~ SELECT * FROM \"t/#\" ~\"\"\" }\n\nSee HOCON 0.42.0 release notes for details.\n\n#12520 Implemented log throttling. The feature reduces the volume of logged events that could potentially flood the system by dropping all but the first occurance of an event within a configured time window. Log throttling is applied to the following log events that are critical yet prone to repetition:\n\nauthentication_failure\n\nauthorization_permission_denied\n\ncannot_publish_to_topic_due_to_not_authorized\n\ncannot_publish_to_topic_due_to_quota_exceeded\n\nconnection_rejected_due_to_license_limit_reached\n\ndropped_msg_due_to_mqueue_is_full\n\n#12561 Implemented HTTP APIs to get the list of client's in-flight and message queue (mqueue) messages. These APIs facilitate detailed insights and effective control over message queues and in-flight messaging, ensuring efficient message handling and monitoring.\n\nTo get the first chunk of data:\n\nGET /clients/{clientid}/mqueue_messages?limit=100\n\nGET /clients/{clientid}/inflight_messages?limit=100\n\nAlternatively, for the first chunks without specifying a start position:\n\nGET /clients/{clientid}/mqueue_messages?limit=100&position=none\n\nGET /clients/{clientid}/inflight_messages?limit=100&position=none\n\nTo get the next chunk of data:\n\nGET /clients/{clientid}/mqueue_messages?limit=100&position={position}\n\nGET /clients/{clientid}/inflight_messages?limit=100&position={position}\n\nWhere {position} is a value (opaque string token) of meta.position field from the previous response.\n\nOrdering and Prioritization:\n\nMqueue Messages: These are prioritized and sequenced based on their queue order (FIFO), from higher to lower priority. By default, mqueue messages carry a uniform priority level of 0.\n\nIn-Flight Messages: Sequenced by the timestamp of their insertion into the in-flight storage, from oldest to newest.\n\n#12590 Removed mfa meta data from log messages to improve clarity.\n\n#12641 Improved text log formatter fields order. The new fields order is as follows:\n\ntag > clientid > msg > peername > username > topic > [other fields]\n\n#12670 Added field shared_subscriptions to endpoint /monitor_current and /monitor_current/nodes/:node.\n\n#12679 Upgraded docker image base from Debian 11 to Debian 12.\n\n#12700 Started supporting \"b\" and \"B\" unit in bytesize hocon fields. For example, all three fields below will have the value of 1024 bytes:\n\nbytesize_field = \"1024b\" bytesize_field2 = \"1024B\" bytesize_field2 = 1024\n\n#12719 The /clients API has been upgraded to accommodate queries for multiple clientids and usernames simultaneously, offering a more flexible and powerful tool for monitoring client connections. Additionally, this update introduces the capability to customize which client information fields are included in the API response, optimizing for specific monitoring needs.\n\nExamples of Multi-Client/Username Queries:\n\nTo query multiple clients by ID: /clients?clientid=client1&clientid=client2\n\nTo query multiple users: /clients?username=user11&username=user2\n\nTo combine multiple client IDs and usernames in one query: /clients?clientid=client1&clientid=client2&username=user1&username=user2\n\nExamples of Selecting Fields for the Response:\n\nTo include all fields in the response: /clients?fields=all (Note: Omitting the fields parameter defaults to returning all fields.)\n\nTo specify only certain fields: /clients?fields=clientid,username\n\n#12381 Added new SQL functions: map_keys(), map_values(), map_to_entries(), join_to_string(), join_to_string(), join_to_sql_values_string(), is_null_var(), is_not_null_var().\n\nFor more information on the functions and their usage, refer to Built-in SQL Functions the documentation.\n\n#12336 Performance enhancement. Created a dedicated async task handler pool to handle client session cleanup tasks.\n\n#12725 Implemented REST API to list the available source types.\n\n#12746 Added username log field. If MQTT client is connected with a non-empty username the logs and traces will include username field.\n\n#12785 Added timestamp_format configuration option to log handlers. This new option allows for the following settings:\n\nauto: Automatically determines the timestamp format based on the log formatter being used. Utilizes rfc3339 format for text formatters, and epoch format for JSON formatters.\n\nepoch: Represents timestamps in microseconds precision Unix epoch format.\n\nrfc3339: Uses RFC3339 compliant format for date-time strings. For example, 2024-03-26T11:52:19.777087+00:00.\n\nBug Fixes â\n\n#11868 Fixed a bug where will messages were not published after session takeover.\n\n#12347 Implemented an update to ensure that messages processed by the Rule SQL for the MQTT egress data bridge are always rendered as valid, even in scenarios where the data is incomplete or lacks certain placeholders defined in the bridge configuration. This adjustment prevents messages from being incorrectly deemed invalid and subsequently discarded by the MQTT egress data bridge, as was the case previously.\n\nWhen variables in payload and topic templates are undefined, they are now rendered as empty strings instead of the literal undefined string.\n\n#12472 Fixed an issue where certain read operations on /api/v5/actions/ and /api/v5/sources/ endpoints might result in a 500 error code during the process of rolling upgrades.\n\n#12492 EMQX now returns the Receive-Maximum property in the CONNACK message for MQTT v5 clients, aligning with protocol expectations. This implementation considers the minimum value of the client's Receive-Maximum setting and the server's max_inflight configuration as the limit for the number of inflight (unacknowledged) messages permitted. Previously, the determined value was not sent back to the client in the CONNACK message.\n\n#12500 The GET /clients and GET /client/:clientid HTTP APIs have been updated to include disconnected persistent sessions in their responses.\n\nNOTE: A current known issue with these enhanced API responses is that the total client count provided may exceed the actual number of clients due to the inclusion of disconnected sessions.\n\n#12513 Changed the level of several flooding log events from warning to info.\n\n#12530 Improved the error reporting for frame_too_large events and malformed CONNECT packet parsing failures. These updates now provide additional information, aiding in the troubleshooting process.\n\n#12541 Introduced a new configuration validation step for autocluster by DNS records to ensure compatibility between node.name and cluster.discover_strategy. Specifically, when utilizing the dns strategy with either a or aaaa record types, it is mandatory for all nodes to use a (static) IP address as the host name.\n\n#12562 Added a new configuration root: durable_storage. This configuration tree contains the settings related to the new persistent session feature.\n\n#12566 Enhanced the bootstrap file for REST API keys:\n\nEmpty lines within the file are now skipped, eliminating the previous behavior of generating an error.\n\nAPI keys specified in the bootstrap file are assigned the highest precedence. In cases where a new key from the bootstrap file conflicts with an existing key, the older key will be automatically removed to ensure that the bootstrap keys take effect without issue.\n\n#12646 Fixed an issue with the rule engine's date-time string parser. Previously, time zone adjustments were only effective for date-time strings specified with second-level precision.\n\n#12652 Fixed a discrepancy where the subbits functions with 4 and 5 parameters, despite being documented, were missing from the actual implementation. These functions have now been added.\n\n#12663 Fixed an issue where the emqx_vm_cpu_use and emqx_vm_cpu_idle metrics, accessible via the Prometheus endpoint /prometheus/stats, were inaccurately reflecting the average CPU usage since the operating system boot. This fix ensures that these metrics now accurately represent the current CPU usage and idle, providing more relevant and timely data for monitoring purposes.\n\n#12668 Refactored the SQL function date_to_unix_ts() by using calendar:datetime_to_gregorian_seconds/1. This change also added validation for the input date format.\n\n#12672 Changed the process for generating the node boot configuration by incorporating the loading of {data_dir}/configs/cluster.hocon. Previously, changes to logging configurations made via the Dashboard and saved in {data_dir}/configs/cluster.hocon were only applied after the initial boot configuration was generated using etc/emqx.conf, leading to potential loss of some log segment files due to late reconfiguration.\n\nNow, both {data_dir}/configs/cluster.hocon and etc/emqx.conf are loaded concurrently, with settings from emqx.conf taking precedence, to create the boot configuration.\n\n#12696 Fixed an issue where attempting to reconnect an action or source could lead to wrong error messages being returned in the HTTP API.\n\n#12714 Fixed inaccuracies in several metrics reported by the /prometheus/stats endpoint of the Prometheus API. The correction applies to the following metrics:\n\nemqx_cluster_sessions_count\n\nemqx_cluster_sessions_max\n\nemqx_cluster_nodes_running\n\nemqx_cluster_nodes_stopped\n\nemqx_subscriptions_shared_count\n\nemqx_subscriptions_shared_max\n\nAdditionally, this fix rectified an issue within the /stats endpoint concerning the subscriptions.shared.count and subscriptions.shared.max fields. Previously, these values failed to update promptly following a client's disconnection or unsubscription from a Shared-Subscription.\n\n#12715 Fixed a crash that could occur during configuration updates if the connector for the ingress data integration source had active channels.\n\n#12740 Fixed an issue when durable sessions could not be kicked out.\n\n#12768 Addressed a startup failure issue in EMQX version 5.4.0 and later, particularly noted during rolling upgrades from versions before 5.4.0. The issue was related to the initialization of the routing schema when both v1 and v2 routing tables were empty.\n\nThe node now attempts to retrieve the routing schema version in use across the cluster instead of using the v2 routing table by default when local routing tables are found empty at startup. This approach mitigates potential conflicts and reduces the chances of diverging routing storage schemas among cluster nodes, especially in a mixed-version cluster scenario.\n\nIf conflict is detected in a running cluster, EMQX writes instructions on how to manually resolve it in the log as part of the error message with critical severity. The same error message and instructions will also be written on standard error to make sure this message will not get lost even if no log handler is configured.\n\n#12786 Added a strict check that prevents replicant nodes from connecting to core nodes running with a different version of EMQX application. This check ensures that during the rolling upgrades, the replicant nodes can only work when at least one core node is running the same EMQX release version.\n\n5.5.1 â\n\nRelease Date: 2024-03-06\n\nBug Fixes â\n\n#12471 Fixed an issue that data integration configurations failed to load correctly during upgrades from EMQX version 5.0.2 to newer releases.\n\n#12598 Fixed an issue that users were unable to subscribe to or unsubscribe from shared topic filters via HTTP API.\n\nThe affected APIs include:\n\n/clients/:clientid/subscribe\n\n/clients/:clientid/subscribe/bulk\n\n/clients/:clientid/unsubscribe\n\n/clients/:clientid/unsubscribe/bulk\n\n#12601 Fixed an issue where logs of the LDAP driver were not being captured. Now, all logs are recorded at the info level.\n\n#12606 The Prometheus API experienced crashes when the specified SSL certificate file did not exist in the given path. Now, when an SSL certificate file is missing, the emqx_cert_expiry_at metric will report a value of 0, indicating the non-existence of the certificate.\n\n#12620 Redacted sensitive information in HTTP headers to exclude authentication and authorization credentials from debug level logs in the HTTP Server connector, mitigating potential security risks.\n\n#12632 Fixed an issue where the rule engine's SQL built-in function date_to_unix_ts produced incorrect timestamp results for dates starting from March 1st on leap years.\n\n5.5.0 â\n\nRelease Date: 2024-02-01\n\nEnhancements â\n\n#12085 EMQX has been upgraded to leverage the capabilities of OTP version 26.1.2-2. NOTE: Docker images are still built with OTP 25.3.2.\n\n#12189 Enhanced the ACL claim format in EMQX JWT authentication for greater versatility. The updated format now supports an array structure, aligning more closely with the file-based ACL rules.\n\nFor example:\n\njson\n\n[ { \"permission\": \"allow\", \"action\": \"pub\", \"topic\": \"${username}/#\", \"qos\": [0, 1], \"retain\": true }, { \"permission\": \"allow\", \"action\": \"sub\", \"topic\": \"eq ${username}/#\", \"qos\": [0, 1] }, { \"permission\": \"deny\", \"action\": \"all\", \"topics\": [\"#\"] } ]\n\nIn this new format, the absence of a matching rule does not result in an automatic denial of the action. The authorization chain can advance to other configured authorizers if a match is not found in the JWT ACL. If no match is found throughout the chain, the final decision defers to the default permission set in authorization.no_match.\n\n#12267 Added a new timeout parameter to the cluster/:node/invite interface, addressing the issue of default timeouts. The previously set 5-second default timeout often led to HTTP API call timeouts because joining an EMQX cluster usually requires more time.\n\nIn addition, EMQX added a new API /cluster/:node/invite_async to support an asynchronous way to invite nodes to join the cluster and introduced a new cluster/invitation API to inspect the join status.\n\n#12272 Introduced updates to the retain API in EMQX:\n\nAdded a new API DELETE /retainer/messages to clean all retained messages.\n\nAdded an optional topic filter parameter topic in the query string for the API GET /retainer/messages. For example, using a query string topic=t/1 filters the retained messages for a specific topic, improving the efficiency of message retrieval.\n\n#12277 Added mqtt/delayed/messages/:topic API to remove delayed messages by topic name.\n\n#12278 Adjusted the maximum pagination size for paginated APIs in the REST API from 3000 to 10000.\n\n#12289 Authorization caching now supports the exclusion of specific topics. For the specified list of topics and topic filters, EMQX will not generate an authorization cache. The list can be set through the authorization.cache.excludes configuration item or via the Dashboard. For these specific topics, permission checks will always be conducted in real-time rather than relying on previous cache results, thus ensuring the timeliness of authorization outcomes.\n\n#12329 Added broker.routing.batch_sync configuration item to enable a dedicated process pool that synchronizes subscriptions with the global routing table in batches, thus reducing the frequency of cross-node communication that can be slowed down by network latency. Processing multiple subscription updates collectively, not only accelerates synchronization between replica nodes and core nodes in a cluster but also reduces the load on the broker pool, minimizing the risk of overloading.\n\n#12333 Added a tags field for actions and connectors. Similar to the description field (which is a free text annotation), tags can be used to annotate actions and connectors for filtering and grouping.\n\n#12299 Exposed more metrics to improve observability:\n\nMontior API:\n\nAdded retained_msg_count field to /api/v5/monitor_current.\n\nAdded license_quota field to /api/v5/monitor_current\n\nAdded retained_msg_count and node_uptime fields to /api/v5/monitor_current/nodes/{node}.\n\nAdded retained_msg_count, license_quota and node_uptime fields to /api/v5/monitor_current/nodes/{node}.\n\nPrometheus API:\n\nAdded emqx_cert_expiry_at and emqx_license_expiry_at to /api/v5/prometheus/stats to display TLS listener certificate expiration time and license expiration time.\n\nAdded /api/v5/prometheus/auth endpoint to provide metrics such as execution count and running status for all authenticatiors and authorizators.\n\nAdded /api/v5/prometheus/data_integration endpoint to provide metrics such as execution count and status for all rules, actions, and connectors.\n\nLimitations: Prometheus push gateway only supports the content in /api/v5/prometheus/stats?mode=node.\n\nFor more API details and metric type information, please see swagger api docs.\n\n#12196 Improved network efficiency during routes cleanup.\n\nPreviously, when a node was down, a delete operation for each route to that node must be exchanged between all the other live nodes. After this change, only one match and delete operation is exchanged between all live nodes, significantly reducing the number of necessary network packets and decreasing the load on the inter-cluster network. This optimization must be especially helpful for geo-distributed EMQX deployments where network latency can be significantly high.\n\n#12354 The concurrent creation and updates of data integrations are now supported, significantly increasing operation speeds, such as when importing backup files.\n\nBug Fixes â\n\n#12232 Fixed an issue when cluster commit log table was not deleted after a node was forced to leave a cluster.\n\n#12243 Fixed a family of subtle race conditions that could lead to inconsistencies in the global routing state.\n\n#12269 Improved error handling in the /clients interface; now returns a 400 status with more detailed error messages, instead of a generic 500, for query string validation failures.\n\n#12285 Updated the CoAP gateway to support short parameter names for slight savings in datagram size. For example, clientid=bar can be written as c=bar.\n\n#12303 Fixed the message indexing in retainer. Previously, clients with wildcard subscriptions might receive irrelevant retained messages not matching their subscription topics.\n\n#12305 Corrected an issue with incomplete client/connection information being passed into emqx_cm, which could lead to internal inconsistencies and affect memory usage and operations like node evacuation.\n\n#12306 Fixed an issue preventing the connectivity test for the Connector from functioning correctly after updating the password parameter via the HTTP API.\n\n#12359 Fixed an issue causing error messages when restarting a node configured with some types of data bridges. Additionally, these bridges were at risk of entering a failed state upon node restart, requiring a manual restart to restore functionality.\n\n#12404 Fixed an issue where restarting a data integration with heavy message flow could lead to a stop in the collection of data integration metrics.\n\n5.4.1 â\n\nRelease Date: 2024-01-09\n\nBug Fixes â\n\n#12234 Resolved compatibility issues with Open Telemetry configurations defined in emqx.conf from versions before EMQX 5.4.0, ensuring smooth integration of legacy configurations with the latest EMQX release.\n\n#12236 Fixed client ID generation in MQTT broker data integration to comply with MQTT 3.1 specification of 23-byte limit. Client ID is now prefixed with user-assigned Connector name, followed by the first 8 bytes of node name's SHA hash and pool member ID. If the resulting ID exceeds 23 bytes, additional SHA hash and truncation for the first 23 characters are applied to ensure compliance.\n\n#12238 Resolved compatibility issue with the error format configurations introduced in the HTTP Action feature of EMQX version 5.3.2.\n\n#12246 Stopped exposing port 11883 by default in Docker and removed it from Helm charts, as this port is no longer in use.\n\n#12249 Fixed an issue in the /configs API where attempting to modify a read-only configuration value resulted in a garbled response message.\n\n#12264 Fixed an issue where version 5.4 replica nodes could not join clusters with core nodes running versions earlier than 5.4 during the rolling upgrade process.\n\n5.4.0 â\n\nRelease Date: 2023-12-23\n\nEnhancements â\n\n#11884 Modified the Prometheus API and configuration to implement the following improvements:\n\nRestructured configuration sections to group-related settings, improving readability and maintainability.\n\nIntroduced enable_basic_auth configuration for basic authentication on the scrape API endpoint, enhancing security.\n\nMaintained backward compatibility while refactoring code, avoiding breaking changes.\n\n#11896 Introduced an enhancement for configuring sensitive authentication fields in bridges, such as passwords, tokens, and secret keys. This improvement allows the use of secrets stored as files in the file system. These secrets can be securely referenced in configuration files using the special file:// prefix, enhancing the security of sensitive data handling in bridge configurations.\n\n#11921 Introduced Open Telemetry Logs Handler that allows to format log events in alignment with the Open Telemetry log data model. This handler facilitates the exportation of formatted log events to a configured Open Telemetry collector or back-end, thereby enhancing log management and integration capabilities.\n\n#11935 Switched to the new v2 routing store schema by default. The new schema improves both subscription and routing performance, especially in scenarios with concurrent subscriptions to topic filters sharing common wildcard prefixes. However, it does come with a minor increase in memory usage. This schema also eliminates the need for a separate index, thus inconsistencies in the routing state rarely encountered in previous versions should no longer be possible.\n\nIf a cluster is rolling upgraded from an older version, the cluster will continue to use v1 store until a full cluster (non-rolling) restart happens.\n\nUsers can still opt for the previous schema by configuring the broker.routing.storage_schema option to v1. However, this also requires a complete, non-rolling restart of the cluster to take effect.\n\n#11984 Implemented Open Telemetry distributed tracing feature.\n\n#12017 Implemented a dedicated REST API for the import and export of configuration and user data.\n\n#12040 Upgraded QUIC protocol stack.\n\n#12201 Added support for hot updates to TCP/SSL/WS/WSS MQTT listener configurations. This feature allows you to modify most configuration parameters without restarting the listener and disconnecting the clients. However, there are some limitations:\n\nFor TCP/SSL listeners, changes to the following parameters will still require a listener restart and client reconnection:\n\nbind\n\ntcp_options.backlog\n\nFor WS/WSS (WebSocket) listeners, modifying transport-related parameters (listed below) will result in the listening socket being reopened, but established connections will remain uninterrupted.\n\nbind\n\ntcp_options.*\n\nssl_options.*\n\n#11608 Integrated LDAP bind operation as a new authenticator, providing a more flexible and secure method for user authentication.\n\n#11766 Implemented a preliminary Role-Based Access Control for the REST API. In this version, there are three predefined roles:\n\nAdministrator: This role can access all resources.\n\nViewer: This role can only view resources and data, corresponding to all GET requests in the REST API.\n\nPublisher: Specifically tailored for MQTT message publishing, this role is confined to accessing endpoints related to message publication.\n\n#11773 Implemented Dashboard support for audit log management. Users can utilize this page to view all change operations performed on EMQX devices and data, such as kicking out devices, creating/deleting rules, etc.\n\n#11778 Integrated Microsoft Entra Identity (formerly known as Azure Active Directory) support into the SAML single sign-on (SSO) process.\n\n#11811 Improved the format for the REST API key bootstrap file to support initializing key with a role.\n\nThe new form is:api_key:api_secret:role.\n\nrole is optional and its default value is administrator.\n\n#11852 Introduced a new GB/T 32960 gateway, enabling vehicles to connect with EMQX via the GBT32960 vehicular networking protocol.\n\n#11883 Introduced a new JT/T808 gateway, enabling vehicles to connect with EMQX via the JT/T 808 vehicular networking protocol.\n\n#11885 Introduced a new OCPP gateway for Electric vehicle (EV) charging stations to access EMQX through the OCPP (Open Charge Point Protocol).\n\n#11971 Made /api/v5/load_rebalance/availability_check public, meaning it no longer requires authentication. This change simplifies the setup of load balancers.\n\nIt improved the gracefulness of the rebalance/evacuation process during the wait health check phase. The connections to nodes marked for eviction are now not prohibited during this phase. During this phase it is unknown whether these nodes are all marked unhealthy by the load balancer, so prohibiting connections to them may cause multiple unsuccessful reconnection attempts.\n\n#12013 The data bridging design has been adjusted to split it into connectors and actions (Sinks). Connectors are used to manage the integration of data with external systems and can be reused across multiple actions, while actions are used to configure how data is processed. This design provides greater flexibility and scalability, resulting in clearer data integration configuration and management.\n\nThe adjusted data bridges includes PostgreSQL, Timescale, and Matrix, which have now been split into connectors and actions APIs, but they remain backward compatible with the old data bridge API.\n\n#12016 Enhanced license key management.\n\nEMQX can now load the license key from a specified file. This is enabled by setting the license.key configuration to a file path, which should be prefixed with \"file://\". Also added the ability to revert to the default trial license by setting license.key = default. This option simplifies the process of returning to the trial license if needed.\n\n#12129 Renewed the default license, replacing the old license issued in January 2023. At the same time, the license capacity has been adjusted from 100 concurrent connections to 25 concurrent connections.\n\nBug Fixes â\n\n#10976 Fixed topic-filter overlapping handling in shared subscription. In the previous implementation, the storage method for subscription options did not provide adequate support for shared subscriptions. This resulted in message routing failures and leakage of routing tables between nodes during the \"subscribe-unsubscribe\" process with specific order and topics.\n\n#12048 Fixed COAP gateway bug that caused it to ignore subscription options.\n\n#12078 Upgraded grpc-erl to 0.6.12. This update addresses a potential deadlock issue where the grpc client started dependent apps lazily.\n\n#12081 Updated gen_rpc library to version 3.3.1. The new version includes several performance improvements:\n\nAvoiding allocating extra memory for the packets before they are sent to the wire in some cases.\n\nBypassing network for the local calls.\n\nAvoid senstive data leaking in debug logs #12202\n\n#12111 Fixed an issue when API tokens were sometimes unavailable immediately after login due to race condition.\n\n#12121 Fixed an issue where nodes in the cluster would occasionally return a stale view when updating configurations on different nodes concurrently.\n\n#12158 Fixed an issue when the rule engine cannot connect to Redis hosted by Upstash.\n\nBefore the fix, after establishing a TCP connection with the Redis service, the Redis driver of EMQX used Inline Commands to send AUTH and SELECT commands. However, the upstash Redis service does not support Inline Commands, which causes the rule engine to fail to connect to the upstash Redis service. After the fix, the Redis driver of EMQX uses RESP (REdis Serialization Protocol) to send AUTH and SELECT commands.\n\n#12176 Always acknowledge DISCONNECT packet to MQTT-SN client regardless of whether the connection has been successfully established before.\n\n#12180 Fix an issue where DTLS enabled MQTT-SN gateways could not be started, caused by incompatibility of default listener configuration with the DTLS implementation.\n\n#12219 Fix file transfer S3 config secret deobfuscation issue while performing config updates from dashboard.\n\n5.3.2 â\n\nRelease Date: 2023-12-01\n\nEnhancements â\n\n#11752 Changed default RPC driver from gen_rpc to rpc for core-replica database synchronization.\n\nThis improves core-replica data replication latency.\n\n#11785 Allowed users with the \"Viewer\" role to change their own passwords. However, those with the \"Viewer\" role do not have permission to change the passwords of other users.\n\n#11787 Improved the performance of the emqx command.\n\n#11790 Added validation to Redis commands in Redis authorization source. Additionally, this improvement refines the parsing of Redis commands during authentication and authorization processes. The parsing now aligns with redis-cli compatibility standards and supports quoted arguments.\n\n#11541 Enhanced file transfer capabilities. Now, clients can use an asynchronous method for file transfer by sending commands to the $file-async/... topic and subscribing to command execution results on the $file-response/{clientId} topic. This improvement simplifies the use of the file transfer feature, particularly suitable for clients using MQTT v3.1/v3.1.1 or those employing MQTT bridging. For more details, please refer to EIP-0021.\n\nBug Fixes â\n\n#11757 Fixed the error response code when downloading non-existent trace files. Now the response returns 404 instead of 500.\n\n#11762 Fixed an issue in EMQX's built_in_database authorization source. With this update, all Access Control List (ACL) records are completely removed when an authorization source is deleted. This resolves the issue of residual records remaining in the database when re-creating authorization sources.\n\n#11771 Fixed validation of Bcrypt salt rounds in authentication management through the API/Dashboard.\n\n#11780 Fixed validation of the iterations field of the pbkdf2 password hashing algorithm. Now, iterations must be strictly positive. Previously, it could be set to 0, which led to a nonfunctional authenticator.\n\n#11791 Fixed an issue in the EMQX CoAP Gateway where heartbeats were not effectively maintaining the connection's active status. This fix ensures that the heartbeat mechanism properly sustains the liveliness of CoAP Gateway connections.\n\n#11797 Modified HTTP API behavior for APIs managing the built_in_database authorization source. They will now return a 404 status code if built_in_database is not set as the authorization source, replacing the former 20X response.\n\n#11965 Improved the termination of EMQX services to ensure a graceful stop even in the presence of an unavailable MongoDB resource.\n\n#11975 This fix addresses an issue where redundant error logs were generated due to a race condition during simultaneous socket closure by a peer and the server. Previously, concurrent socket close events triggered by the operating system and EMQX resulted in unnecessary error logging. The implemented fix improves event handling to eliminate unnecessary error messages.\n\n#11987 Fixed a bug where attempting to set the active_n option on a TCP/SSL socket could lead to a connection crash.\n\nThe problem occurred if the socket had already been closed by the time the connection process attempted to apply the active_n setting, resulting in a case_clause crash.\n\n#11731 Added hot configuration support for the file transfer feature.\n\n#11754 Improved the log formatting specifically for the Postgres bridge in EMQX. It addresses issues related to Unicode characters in error messages returned by the driver.\n\n5.3.1 â\n\nRelease Date: 2023-11-14\n\nEnhancements â\n\n#11637 Added extra diagnostic checks to help debug issues when mnesia is stuck waiting for tables. Library Updates: ekka has been upgraded to version 0.15.15, and mria to version 0.6.4.\n\n#11581 Feature Preview: Planned for EMQX v5.4.0, introducing the concepts of Connector and Action base on data bridge. The existing data bridge will be gradually migrated to Connector and Action. Connector are designed to manage the integration with external systems, while Actions are solely used to configure the data processing methods. Connector can be reused across multiple Actions, providing greater flexibility and scalability. Currently, the migration has been completed for Kafka producer and Azure Event Hub producer.\n\nThe Dashboard now supports MQTT 5.0 publish attribute settings for the rule engine's message republish action, allowing users more flexibility in publishing messages.\n\nBug Fixes â\n\n#11565 Upgraded jq library from v0.3.10 to v0.3.11. In this version, jq_port programs are initiated on-demand and will not appear in users' processes unless the jq function in EMQX is used. Additionally, idle jq_port programs will auto-terminate after a set period. Note: Most EMQX users are running jq in NIF mode and will not be affected by this update.\n\n#11676 Hid a few pieces of sensitive information from debug-level logs.\n\n#11697 Disabled outdated TLS versions and cipher suites in the EMQX backplane network (gen_rpc). Added support for tlsv1.3 on the backplane and introduced new configuration parameters: EMQX_RPC__TLS_VERSIONS and EMQX_RPC__CIPHERS.\n\nThe corresponding gen_rpc PR: https://github.com/emqx/gen_rpc/pull/36\n\n#11734 Fixed clustering in IPv6 network. Added new configurations rpc.listen_address and rpc.ipv6_only to allow EMQX cluster RPC server and client to use IPv6.\n\n#11747 Updated QUIC stack to msquic 2.2.3.\n\n#11796 Fixed rpc schema to ensure that client/server uses same transport driver.\n\n#11798 Fixed the issue where the node could not start after executing ./bin/emqx data import [FILE].\n\nThe connection between apikey_key and apikey_name is also enhanced for better consistency and unique identification.\n\napikey_key: When generating an API key via the dashboard, apikey_key will now create a unique value derived from the provided human-readable apikey_name.\n\napikey_name Conversely, when using a bootstrap file to generate an API key, apikey_name will be generated as a unique value based on the associated apikey_key.\n\n#11813 Fixed the schema to ensure that RPC client SSL port aligns with the configured server port. This fix also guarantees that the RPC ports are correctly opened in the Helm chart.\n\n#11819 Upgraded opentelemetry library to v1.3.1-emqx. This opentelemetry release fixes invalid metrics timestamps in the exported metrics.\n\n#11861 Fixed excessive warning message printed in remote console shell.\n\n#11722 Fixed an issue where a Kafka Producer bridge with sync query mode would not buffer messages when in the connecting state.\n\n#11724 Fixed a metrics-related issue where messages sent to Kafka would be counted as failed even when they were successfully transmitted afterward due to internal buffering.\n\n#11728 Enhanced the LDAP filter string parser with the following improvements:\n\nAutomatic escaping of special characters within filter strings.\n\nFixed a bug that previously prevented the use of dn as a filter value.\n\n#11733 Resolved an incompatibility issue that caused crashes during session takeover or channel eviction when the session was located on a remote node running EMQX v5.2.x or an earlier version.\n\n#11750 Eliminated logging and tracing of HTTP request bodies in HTTP authentification and HTTP bridges.\n\n#11760 Simplified the CQL query used for the Cassandra bridge health check, which was previously generating warnings in the Cassandra server logs.\n\n#11886 Fixed backward plugin compatibility.\n\nCurrently, EMQX validates hook point names, and invalid hook points cannot be used for hook registration. However, some older versions of plugin templates used misspelled hook points, and actual plugins in use may also have this issue. To maintain compatibility with these older plugins, we allow the use of the old hook points for hook registration, but we issue deprecated warnings for them. As before, these hooks will not be called.\n\n#11897 Fixed the issue of waiting for a loop race condition during node configuration synchronization when cluster nodes are started approximately at the same time.\n\n5.3.0 â\n\nRelease Date: 2023-09-29\n\nEnhancements â\n\n#11597 Upgraded ekka to 0.15.13, which incorporates the following changes:\n\nUpgraded Mria to 0.6.2.\n\nIntroduced the ability to configure the bootstrap data sync batch size, as detailed in Mria PR.\n\nEnhanced the reliability of mria_membership processes, as described in Mria PR.\n\nFix log message formatting error.\n\nAdded node.default_bootstrap_batch_size option to EMQX configuration. Increasing the value of this option can greatly reduce a replicant node startup time, especially when the EMQX cluster interconnect network latency is high and the EMQX built-in database holds a large amount of data, e.g. when the number of subscriptions is high.\n\n#11620 Added a new rule-engine SQL function bytesize to get the size of a byte-string. e.g. SELECT * FROM \"t/#\" WHERE bytesize(payload) > 10.\n\n#11642 Updated to quicer version 0.0.200 in preparation for enabling openssl3 support for QUIC transport.\n\n#11610 Implemented a preliminary Role-Based Access Control for the Dashboard.\n\nIn this version, there are two predefined roles:\n\nAdministrator: This role could access all resources.\n\nViewer: This role can only view resources and data, corresponding to all GET requests in the REST API.\n\n#11631 Added Single Sign-On (SSO) feature and integrated with LDAP.\n\n#11656 Integrated the SAML 2.0 Support for SSO.\n\n#11599 Supported audit logs to record operations from CLI, REST API, and Dashboard in separate log files.\n\nBug Fixes â\n\n#11682 Fixed an issue where logging would stop if \"Rotation Size\" would be set to infinity on file log handlers.\n\n#11567 Improve EMQX graceful shutdown (emqx stop command):\n\nIncrease timeout from 1 to 2 minutes.\n\nPrinted an error message if EMQX can't stop gracefully within the configured timeout.\n\nPrint periodic status messages while EMQX is shutting down.\n\n#11584 Fixed telemetry reporting error on Windows when os_mon module is unavailable.\n\n#11605 Lowered CMD_overridden log severity from warning to info.\n\n#11622 Upgraded rpc library gen_rpc from 2.8.1 to 3.1.0.\n\n#11623 Upgraded library esockd from 5.9.6 to 5.9.7. This upgrade included:\n\nEnhancements regarding proxy protocol error and timeout. esockd pr#178\n\nLowered ssl_error exceptions to info-level logging. esockd pr#180\n\nMalformed MQTT packet parsing exception log level is lowered from error to info.\n\nIn command emqx ctl listeners output, the shutdown_count counter is incremented when TLS handshake failure (ssl_error) or Malformed packet (frame_error) happens.\n\n#11661 Fixed log formatter when log.HANDLER.formatter is set to 'json'. The bug was introduced in v5.0.4 where the log line was no longer a valid JSON, but prefixed with timestamp string and level name.\n\n#11627 Fixed resources cleanup in HStreamdB bridge. Prior to this fix, HStreamDB bridge might report errors during bridge configuration updates, since hstreamdb client/producer were not stopped properly.\n\n5.2.1 â\n\nRelease Date: 2023-09-20\n\nEnhancements â\n\n#11487 The bcrypt work factor is limited to the range 5-10, because higher values consume too much CPU resources. Bcrypt library is updated to allow parallel hash evaluation.\n\n#11568 Added support for defining templates for MQTT 5.0 publish properties and user properties in Republish rule action.\n\n#11612 During node evacuation, evacuate all disconnected sessions, not only those started with clean_start set to false.\n\n#11532 Improved error messaging for better clarity when parsing invalid packets.\n\nBug Fixes â\n\n#11493 Fixed response examples for /api/v5/publish bad request in RESP API documentation. Previously the documentation example said that the bad request response could return a list in the body which was not actually the case.\n\n#11499 Upgraded Erlang/OTP to version 25.3.2-2, which now excludes sensitive data from mnesia_hook log messages.\n\n#11506 Previously, attempting to download a non-existent trace log file would result in downloading an empty file. After implementing this fix, when attempting to download an empty trace log file using the GET request /api/v5/trace/clientempty/download, the server will now respond with a 404 status code and the following JSON message: {\"code\":\"NOT_FOUND\",\"message\":\"Trace is empty\"}. This response will be triggered if no events matching the trace condition are found in the log file.\n\n#11522 Improved rule engine schema registry error message when schema name exceeds the permissible length.\n\n#11531 Fixed an issue where authorization cache cleaning CLI was not working properly for specific client ID.\n\n#11564 Fixed cluster partition autoheal functionality. Implemented autohealing for the clusters that split into multiple partitions.\n\n#11568 Fixed an issue where an ill-defined built-in rule action config could be interpreted as a custom user function.\n\n#11394 Upgraded Kafka producer client wolff from 1.7.6 to 1.7.7. This fixed a potential race condition that might cause all Kafka producers to crash if some failed to initialize.\n\n#11401 Fixed the behavior of the rule SQL mongo_date function in SQL statement testing in the EMQX Dashboard. The rule SQL mongo_date function now returns a string with the format ISODate(*), where * is an ISO date string when running rules in test mode. This format aligns with how MongoDB stores dates.\n\n#11547 Fixed several emqx_bridge issues:\n\nFixed Cassandra bridge connect error occurring when the bridge is configured without username/password (Cassandra doesn't require user credentials when it is configured with authenticator: AllowAllAuthenticator.)\n\nFixed SQL Server bridge connect error caused by an empty password.\n\nMade username a required field in Oracle bridge.\n\nFixed IoTDB bridge error caused by setting base URL without a scheme (e.g. <host>:<port>).\n\n#11630 Fixed an issue where the core node could get stuck in the mria_schema:bootstrap/0 state, preventing new nodes from joining the cluster.\n\n5.2.0 â\n\nRelease Date: 2023-09-07\n\nEnhancements â\n\n#10697 This enhancement enables the configuration of the minReadySeconds for the StatefulSet. This feature allows for the introduction of a time gap between the restarts of individual pods triggered by upgrade or restart commands.\n\n#11124 Released packages for Amazon Linux 2023.\n\n#11289 Released packages for Debian 12.\n\n#11290 Updated the jq dependency to version 0.3.10, which includes an update to the oniguruma library to version 6.9.8 with a few minor security fixes.\n\n#11291 Updated RocksDB version to 1.8.0-emqx-1 via ekka update to 0.15.6.\n\n#11390 Added node.broker_pool_size, node.generic_pool_size, node.channel_cleanup_batch_size options to EMQX configuration. Tuning these options can significantly improve the performance if cluster interconnect network latency is high.\n\n#11429 Added an option to configure detection of the legacy protocol in MondoDB connectors and bridges.\n\n#11436 Added a new API endpoint DELETE/banned for clearing all banned data.\n\n#11438 Changed the type of the mqtt.max_packet_size from string to byteSize for a better representation of the valid numeric range. Strings will still be accepted for backward compatibility.\n\n#11469 Added support for specifying username in Redis authentication.\n\n#11496 Disabled the Erlang VM Prometheus exporter by default to improve performance and security.\n\n#11497 Enhanced broker metrics collection and export by adding new metrics for messages, overload protection, authorization, authentication, and improving naming consistency for OpenTelemetry.\n\n#10647 Implemented GreptimeDB data integration.\n\n#11261 Implemented Amazon Kinesis Data Streams producer data integration.\n\n#11329 Implemented Azure Event Hub Producer data integration.\n\n#11363 Added TLS connection support to the RabbitMQ bridge.\n\n#11367 Ported GCP IoT Hub authentication support from EMQX 4.4.\n\n#11386 Integrated LDAP as a new authenticator.\n\n#11392 Integrated LDAP as an authorization source.\n\n#11402 Added support for using placeholders to define MQTT Topic in Kafka Consumer bridge topic mappings. This allows dynamically setting the MQTT Topic.\n\n#11403 Added support for defining message attributes and ordering key templates for GCP PubSub Producer bridge.\n\nAlso updated our HOCON library to fix an issue where objects in an array were concatenated even if they were laid on different lines.\n\n#11459 Added the option to configure health check interval for Kafka bridges.\n\n#11478 Added HStreamDB bridge support (both TCP and TLS connection allowed), adapted to the HStreamDB v0.16.1.\n\nUpdated driver to 0.4.5+v0.16.1 in PR#11530.\n\n#11389 Improved retained message publishing latency by consolidating multiple index update operations into a single Mnesia activity, leveraging the new APIs introduced in Mria 0.6.0.\n\n#11396 Introduced topic index for the rule engine runtime to speed up matching messages' topics to topic filters configured in rule definitions by avoiding full scan of the rule set, significantly improving EMQX's performance when handling a substantial number of rules.\n\n#11399 Improved the placeholder syntax in the rule engine. The republishing actions support placeholder syntax to dynamically fill in the content of strings in the payload variable. The format of the placeholder syntax is \\${key}. Before this improvement, the key in \\${key} could only contain letters, numbers, and underscores. Now the key supports any UTF8 characters.\n\n#11405 Made the error message for date_to_unix_ts function more understandable.\n\n#11490 Added fast error handling for undefined passwords in various authentication backends. This improves the consistency and user-friendliness of the authentication process.\n\nBug Fixes â\n\n#11065 Silenced irrelevant error messages during EMQX shutdown.\n\n#11279 Fixed an issue where clients could not send messages with large payloads when debug/trace logging was enabled in EMQX.\n\n#11296 Added support for importing additional configurations from EMQX backup file using the emqx ctl import command):\n\nrule_engine (previously not imported due to the bug)\n\ntopic_metrics (previously not implemented)\n\nslow_subs (previously not implemented)\n\n#11327 Updated ekka to version 0.15.8, mria to version 0.15.8, and optvar to 1.0.5. This fixes occasional assertion failures.\n\n#11346 Updated ekka to version 0.15.9. This fixes dangling etcd locks that occurred when acquiring the lock failed with a timeout.\n\n#11347 Ensured that OCSP request path is properly URL encoded.\n\n#11352 Fixed a crash issue that occurred when starting on Windows or any other platform without RocksDB support.\n\n#11388 Increased emqx_router_sup restart intensity to improve tolerance for occasional crashes that can occur under normal conditions, without necessitating the shutdown of the entire EMQX application. For example, mria write/delete call delegated from a replicant to a core node by emqx_router_helper may fail, if the core node undergoes stopping, restarting, or is in an unready state. The modified restart intensity ensures that the system remains stable and operational.\n\nThis fixes issues found when trying to upgrade from 5.1.3 where that option was set in the configuration files or persisted in EMQX Operator settings.\n\n#11424 Added a check for the maximum value of the timestamp in the API to ensure it is a valid Unix timestamp.\n\n#11445 Removed os_mon application monitor support on Windows platforms to prevent VM crashes. Functionality remains on non-Windows platforms.\n\n#11454 Fixed crashing when debugging/tracing with large payloads (introduced in #11279).\n\n#11456 Removed validation that enforced non-empty PEM for the CA cert file, allowing the CA certificate file PEM to be empty.\n\n#11466 Fixed a crash that occurred when setting the ssl_options.ciphers configuration option to an empty string (\"\").\n\n#11480 Improves the error handling and testing of SQL functions in the rule engine when rule functions receive bad arguments.\n\n#11520 Fixed issue where packets_connack_sent metric was not incremented on CONNACK packets sent with non-zero ack_flag.\n\n#11523 Corrected a misleading prompt when specifying invalid certificates/keys for the /configs API.\n\n#11534 Fixed the increment on data bridge statistics when the bridge is unhealthy. Now, messages sent to unhealthy bridges are counted as dropped messages.\n\n#11540 Improved HTTP response when attempting to create a bridge with an invalid name.\n\n#11548 Fixed an issue that prevented the plugin order from being updated across the entire cluster.\n\n#11366 Fixed an issue that could prevent a pod from starting if some bridge configurations were specified in bootstrapConfig using EMQX Operator.\n\n#11453 Fixed an issue that would yield false negatives when testing the connectivity of InfluxDB bridges.\n\n#11461 Aligned the timeout for testing bridge connectivity more closely with the configured health check timeout.\n\n#11492 Fixed an issue that would yield false negatives when testing the connectivity of GreptimeDB bridges.\n\n#11508 Fixed error handling in Kafka bridge when headers are translated to an invalid value.\n\n#11513 Fixed a bug that prevented the Kafka Producer bridge from using the correct template for the timestamp field.\n\n#11527 Fixed an issue related to Kafka header template handling. The issue occurs when placeholders are resolved into an array of key-value pairs (e.g.: [{\"key\": \"foo\", \"value\": \"bar\"}]).\n\n5.1.1 â\n\nRelease Date: 2023-07-05\n\nEnhancements â\n\n#10667 The MongoDB connector and bridge have been refactored into a separate app to improve the code structure.\n\n#11115 Added info logs to indicate when buffered messages are dropped due to time-to-live (TTL) expiration.\n\n#11133 Renamed deliver_rate to delivery_rate in the configuration of retainer, while being compatible with the previous deliver_rate.\n\n#11137 Refactored the Dashboard listener configuration to use a nested ssl_options field for SSL settings.\n\n#11138 Changed the default value of k8s api_server from http://127.0.0.1:9091 to https://kubernetes.default.svc:443.\n\nemqx_ctl conf show cluster no longer displays irrelevant configuration items when discovery_strategy=static. Configuration information related to etcd/k8s/dns will not be shown.\n\nRemoved zones (deprecated config key) from emqx_ctl conf show_keys.\n\n#11165 Removed the /configs/limiter API from swagger.json. Only the API documentation was removed, and the /configs/limiter API functionalities remain unchanged.\n\n#11166 Added 3 random SQL functions to the rule engine:\n\nrandom(): Generates a random number between 0 and 1 (0.0 =< X < 1.0).\n\nuuid_v4(): Generates a random UUID (version 4) string.\n\nuuid_v4_no_hyphen(): Generates a random UUID (version 4) string without hyphens.\n\n#11180 Added a new configuration API /configs (GET/PUT) that supports reloading the HOCON format configuration file.\n\n#11226 Unified the listener switch to enable, while being compatible with the previous enabled.\n\n#11249 Added /license/setting REST API endpoint to read and update licensed connections usage alarm watermark.\n\n#11251 Added the /cluster/topology REST API endpoint:\n\nA GET request to this endpoint returns the cluster topology, showing connections between RLOG core and replicant nodes.\n\n#11253 The Webhook/HTTP bridge has been refactored into its own Erlang application. This allows for more flexibility in the future and allows the bridge to be run as a standalone application.\n\n#11079 Added support for custom headers in messages for Kafka bridge producer mode.\n\n#11132 Added support for MQTT action authorization based on QoS level and Retain flag values. Now, EMQX can verify whether clients have the permission to publish/subscribe using specific QoS levels, and whether they have the permission to publish retained messages.\n\n#11207 Updated the driver versions of multiple data bridges to enhance security and ensure that sensitive data will not be leaked. This includes:\n\nTDengine\n\nMongoDB\n\nMySQL\n\nClickhouse\n\n#11241 Schema Registry has been refactored into its own Erlang application. This allows for more flexibility in the future.\n\n#11020 Upgraded emqtt dependency to prevent sensitive data leakage in the debug log.\n\n#11135 Improved time offset parser in rule engine and return uniform error codes.\n\n#11236 Improved the speed of clients querying in REST API /clients endpoint with default parameters.\n\nBug Fixes â\n\n#11004 Wildcards are no longer allowed for the destination topic in topic rewrite.\n\n#11026 Addressed an inconsistency in the usage of div and mod operations within the rule engine. Previously, the div' operation could only be used as an infix operation, and mod could only be applied through a function call. Now, both div and mod can be used via function call syntax and infix syntax.\n\n#11037 When starting an HTTP connector, EMQX now returns a descriptive error in case the system is unable to connect to the remote target system.\n\n#11039 Fixed database number validation for Redis connector. Previously, negative numbers were accepted as valid database numbers.\n\n#11074 Fixed a bug to adhere to Protocol spec MQTT-5.0 [MQTT-3.8.3-4].\n\n#11077 Fixed a crash when updating listener binding with a non-integer port.\n\n#11094 Fixed an issue where connection errors in Kafka Producer would not be reported when reconnecting the bridge.\n\n#11103 Updated erlcloud dependency.\n\n#11106 Added validation for the maximum number of worker_pool_size of a bridge resource.\n\nNow the maximum amount is 1024 to avoid large memory consumption from an unreasonable number of workers.\n\n#11118 Ensured that validation errors in REST API responses are slightly less confusing. Now, if there are out-of-range errors, they will be presented as {\"value\": 42, \"reason\": {\"expected\": \"1..10\"}, ...}, replacing the previous usage of expected_type with expected.\n\n#11126 Rule metrics for async mode bridges will set failure counters correctly now.\n\n#11134 Fixed the value of the uppercase authorization header not being obfuscated in the log.\n\n#11139 The Redis connector has been refactored into its own Erlang application to improve the code structure.\n\n#11145 Added several fixes and improvements in Ekka and Mria.\n\nEkka:\n\nImproved cluster discovery log messages to consistently describe actual events. Ekka PR\n\nRemoved deprecated cluster auto-clean configuration parameter (it has been moved to Mria). Ekka PR\n\nMria:\n\nPing now only runs on replicant nodes. Previously, mria_lb was trying to ping both stopped and running replicant nodes, which could result in timeout errors. Mria PR\n\nUsed null_copies storage when copying $mria_rlog_sync table. This fix has no effect on EMQX for now, as $mria_rlog_sync is only used in mria:sync_transaction/2,3,4, which is not utilized by EMQX. Mria PR\n\n#11148 Fixed an issue when nodes tried to synchronize configuration update operations to a node which has already left the cluster.\n\n#11150 Wait for Mria table when emqx_psk app is being started to ensure that PSK data is synced to replicant nodes even if they don't have init PSK file.\n\n#11151 The MySQL connector has been refactored into its own Erlang application to improve the code structure.\n\n#11158 Wait for Mria table when the mnesia backend of retainer starts to avoid a possible error of the retainer when joining a cluster.\n\n#11162 Fixed an issue in webhook bridge where, in async query mode, HTTP status codes like 4XX and 5XX would be treated as successes in the bridge metrics.\n\n#11164 Reintroduced support for nested (i.e.: ${payload.a.b.c}) placeholders for extracting data from rule action messages without the need for calling json_decode(payload) first.\n\n#11172 Fixed the payload field in rule engine SQL being duplicated in the below situations:\n\nWhen using a foreach sentence without the as sub-expression and selecting all fields (using the * or omitting the do sub-expression).\n\nFor example:\n\nFOREACH payload.sensors FROM \"t/#\"\n\nWhen selecting the payload field and all fields.\n\nFor example:\n\nSELECT payload.sensors, * FROM \"t/#\"\n\n#11174 Fixed the encoding of the server key coming from an ingress MQTT bridge.\n\nBefore the fix, it was encoded as a list of integers corresponding to the ASCII characters of the server string.\n\n#11184 Config value for mqtt.max_packet_size now has a max value of 256MB as defined by the protocol.\n\n#11192 Fixed an issue with producing invalid HOCON file when an atom type was used. Also removed unnecessary \" around keys and latin1 strings from HOCON file.\n\n#11195 Fixed an issue where the REST API could create duplicate subscriptions for specified clients of the Stomp gateway.\n\n#11206 Made the username and password params of CoAP client optional in connection mode.\n\n#11208 Fixed the issue of abnormal data statistics for LwM2M clients.\n\n#11211 HTTP API DELETE operations on non-existent resources now consistently returns 404.\n\n#11214 Fixed a bug where node configuration may fail to synchronize correctly when the node joins the cluster.\n\n#11229 Fixed an issue that prevented plugins from starting/stopping after changing configuration via emqx ctl conf load.\n\n#11237 The headers default value in /prometheus API should be a map instead of a list.\n\n#11250 Fixed a bug when the order of MQTT packets withing a WebSocket packet will be reversed.\n\n#11271 Ensured that the range of all percentage type configurations is from 0% to 100% in the REST API and configuration. For example, sysom.os.sysmem_high_watermark=101% is invalid now.\n\n#11272 Fixed a typo in the log, where an abnormal PUBREL packet was mistakenly referred to as pubrec.\n\n#11281 Restored support for the special $queue/ shared subscription topic prefix.\n\n#11294 Fixed emqx ctl cluster join, leave, and status commands.\n\n#11306 Fixed rule action metrics inconsistency where dropped requests were not accounted for.\n\n#11309 Improved startup order of EMQX applications. Simplified build scripts and improved code reuse.\n\n#11322 Added support for importing additional configurations from EMQX backup file (emqx ctl import command):\n\nrule_engine (previously not imported due to the bug)\n\ntopic_metrics (previously not implemented)\n\nslow_subs (previously not implemented).\n\n#10645 Changed health check for Oracle Database, PostgreSQL, MySQL and Kafka Producer data bridges to ensure target table/topic exists.\n\n#11107 MongoDB bridge health check now returns the failure reason.\n\n#11139 The Redis bridge has been refactored into its own Erlang application to improve the code structure and to make it easier to maintain.\n\n#11151 The MySQL bridge has been refactored into its own Erlang application to improve the code structure and to make it easier to maintain.\n\n#11163 Hid topology.pool_size in MondoDB bridges and fixed it to 1 to avoid confusion.\n\n#11175 Now when using a nonexistent hostname for connecting to MySQL, a 400 error is returned rather than 503 in the REST API.\n\n#11198 Fixed global rebalance status evaluation on replicant nodes. Previously, /api/v5/load_rebalance/global_status API method could return incomplete results if handled by a replicant node.\n\n#11223 In InfluxDB bridging, mixing decimals and integers in a field may lead to serialization failure in the Influx Line Protocol, resulting in the inability to write to the InfluxDB bridge (when the decimal point is 0, InfluxDB mistakenly interprets it as an integer).\n\nSee also: InfluxDB v2.7 Line-Protocol.\n\n#11225 The username field in PostgreSQL/Timescale/MatrixDB bridges configuration is now a required one.\n\n#11242 Restarted emqx_ee_schema_registry when a node joins a cluster. As emqx_ee_schema_registry uses Mria tables, a node joining a cluster needs to restart this application in order to start relevant Mria shard processes, ensuring a correct behaviour in Core/Replicant mode.\n\n#11266 Fixed and improved support for TDengine insert syntax:\n\nAdded support for inserting into multi-table in the template.\n\nFor example:\n\ninsert into table_1 values (${ts}, '${id}', '${topic}') table_2 values (${ts}, '${id}', '${topic}')\n\nAdded support for mixing prefixes/suffixes and placeholders in the template.\n\nFor example:\n\ninsert into table_${topic} values (${ts}, '${id}', '${topic}')\n\nNote: This is a breaking change. Previously, the values of string type were quoted automatically, but now they must be quoted explicitly.\n\nFor example:\n\ninsert into table values (${ts}, '${a_string}')\n\n#11307 Fixed check for table existence to return a more friendly message in the Oracle bridge.\n\n#11316 Fixed Pool Size value not being considered in Oracle Bridge.\n\n#11326 Fixed return error checking on table validation in the Oracle bridge.\n\n5.1.0 â\n\nRelease Date: 2023-06-21\n\nEnhancements â\n\n#11035 Upgraded Cassandra driver to avoid username and password leakage in data bridge logs.\n\n#10584 Added log level configuration to SSL communication\n\n#10678 Optimized counter increment calls to avoid work if increment is zero.\n\n#10690 Added a retry mechanism to webhook bridge that attempts to improve throughput. This optimization retries request failures without blocking the buffering layer, which can improve throughput in situations of high messaging rate.\n\n#10702 Introduced a more straightforward configuration option keepalive_multiplier and deprecate the old keepalive_backoff configuration. After this enhancement, EMQX checks the client's keepalive timeout status period by multiplying the \"Client Requested Keepalive Interval\" with keepalive_multiplier.\n\n#10698 Optimized memory usage when accessing the configuration during runtime.\n\n#10778 Refactored Pulsar Producer bridge to avoid leaking resources in case bridge crashed during initialization phase.\n\n#10813 Refactored Kafka Producer and Consumer bridges to avoid leaking resources in case bridge crashed during initialization phase.\n\n#10858 A new utility function timezone_to_offset_seconds/1 has been added to the rule engine SQL language. This function converts a timezone string (for example, \"+02:00\", \"Z\" and \"local\") to the corresponding offset in seconds.\n\n#10841 Added a schema validation to ensure message key is not empty when \"key_dispatch\" strategy is selected in Kafka and Pulsar Producer bridges.\n\n#10754 The MQTT bridge has been enhanced to utilize connection pooling and leverage available parallelism, substantially improving throughput. As a consequence, single MQTT bridge now uses a pool of clientids to connect to the remote broker.\n\n#10782 Added a new deliver_rate option to the retainer configuration, which can limit the maximum delivery rate per session in the retainer.\n\n#10877 Upgraded RocketMQ driver to enhance security for sensitive data.\n\n#10598 Provided a callback method of Unary type in ExProto to avoid possible message disorder issues.\n\n#10895 Refactored most of the bridges to avoid resource leaks in case bridge crashed during initialization phase.\n\n#10790 Optimized access to configuration in runtime by reducing overhead of reading configuration per zone.\n\n#10892 Added the requirement for setting SID or Service Name in Oracle Database bridge creation.\n\n#10910 The data bridge resource option auto_restart_interval was deprecated in favor of health_check_interval, and request_timeout was renamed to request_ttl. Also, the default request_ttl value went from 15 seconds to 45 seconds. The previous existence of both auto_restart_interval and health_check_interval was a source of confusion, as both parameters influenced the recovery of data bridges under failures. An inconsistent configuration of those two parameters could lead to messages being expired without a chance to retry. Now, health_check_interval is used both to control the interval of health checks that may transition the data bridge into disconnected or connecting states, as well as recovering from disconnected.\n\n#10929 Upgraded Erlang/OTP to 25.3.2-1.\n\n#10909 Removed the deprecated HTTP APIs for gateways.\n\n#10908 Refactored the RocketMQ bridge to avoid resources leaks in case bridge crashed during initialization phase.\n\n#10924 Refactored Influxdb bridge connector to avoid resource leaks in case bridge crashed during initialization phase.\n\n#10944 Improved the GCP PubSub bridge to avoid a potential issue that the bridge could fail to send messsages after node restart.\n\n#10933 Added support for configuring TCP keep-alive in MQTT/TCP and MQTT/SSL listeners.\n\n#10948 Added live_connections field for some HTTP APIs, i.e:\n\n/monitor_current, /monitor_current/nodes/{node}\n\n/monitor/nodes/{node}, /monitor\n\n/node/{node}, /nodes\n\n#10941 Improved the collection speed of Prometheus metrics when setting prometheus.vm_dist_collector=disabled and metric erlang_vm_statistics_run_queues_length_total is renamed to erlang_vm_statistics_run_queues_length\n\n#10985 Renamed emqx ctl command cluster_call to conf cluster_sync. The old command cluster_call is still a valid command, but not included in usage info.\n\n#10988 Improved log security when data bridge creation fails to ensure sensitive data is always obfuscated.\n\n#10926 Allowed enable as well as enabled as the state flag for listeners. Prior to this change, listener can be enable/disabled by setting the true or false on the enabled config. This is slightly different naming comparing to other state flags in the system. Now the enable flag is added as an alias in listener config.\n\n#10970 A query_mode parameter has been added to the Kafka producer bridge. This parameter allows you to specify if the bridge should use the asynchronous or synchronous mode when sending data to Kafka. The default is asynchronous mode.\n\n#10676 Added CLI commands emqx ctl export and emqx ctl import for importing/exporting configuration and user data. This allows exporting configurations and built-in database data from a running EMQX cluster and importing them into the same or another running EMQX cluster.\n\n#11003 Added an option to configure TCP keepalive in Kafka bridge.\n\n#10961 Added support for unlimited max connections for gateway listeners by allowing infinity as a valid value for the max_connections field in the configuration and HTTP API.\n\n#11019 Improved log security for JWT, now it will be obfuscated before print.\n\n#11024 Added a small improvement to reduce the chance of seeing the connecting state when creating/updating a Pulsar Producer bridge.\n\n#11034 Hid the broker config and changed the broker.shared_subscription_strategy to mqtt.shared_subscription_strategy as it belongs to mqtt.\n\n#11045 The listener's authentication and zone related apis have been officially removed in version 5.1.0.\n\n#11062 Renamed config log.file.to to log.file.path.\n\nBug Fixes â\n\n#11018 Fixed multiple issues with the Stomp gateway, including:\n\nFixed an issue where is_superuser was not working correctly.\n\nFixed an issue where the mountpoint was not being removed in message delivery.\n\nAfter a message or subscription request fails, the Stomp client should be disconnected immediately after replying with an ERROR message.\n\n#11051 Added validation to ensure that certificate depth (listener SSL option) is a non negative integer.\n\n#10563 Corrected an issue where the no_local flag was not functioning correctly in subscription.\n\n#10653 Stored gateway authentication TLS certificates and keys in the data directory to fix the problem of memory leakage.\n\n#10682 Fixed the timestamp for the will message is incorrectly assigned at the session creation time, now this timestamp is the disconnected time of the session.\n\n#10701 RPM package for Amazon Linux 2 did not support TLS v1.3 as it was assembled with Erlang/OTP built with openssl 1.0.\n\n#10677 Fixed an issue in the Rule API where attempting to delete a non-existent rule resulted in a 404 HTTP error code response.\n\n#10715 Support for getting the client certificate in the client.connected hook. Previously, this data was removed after the connection was established to reduce memory usage.\n\n#10737 Fixed the issue where the HTTP API interface of Gateway cannot handle ClientIDs with special characters, such as: !@#$%^&*()_+{}:\"<>?/.\n\n#10809 Addressed ** ERROR ** Mnesia post_commit hook failed: error:badarg error messages happening during node shutdown or restart. Mria pull request: https://github.com/emqx/mria/pull/142\n\n#10807 The debug-level logs related to license checks will no longer be printed. These logs were generated too frequently and could interfere with log recording.\n\n#10818 Fixed emqx_ctl traces command error where the traces start command in the emqx_mgmt_cli module was not working properly with some filters.\n\n#10600 Deleted emqx_statsd application.\n\n#10820 Fixed the issue where newly added nodes in the cluster would not apply the new license after a cluster license update and would continue to use the old license. Sometimes the new node must start with a outdated license. e.g. use emqx-operator deployed and needed to scale up after license expired. At the time the cluster's license key already updated by API/CLI, but the new node won't use it.\n\n#10851 Obfuscated sensitive data in the bad API logging.\n\n#10884 Fixed an issue where trying to get rule info or metrics could result in a crash when a node is joining a cluster.\n\n#10887 Fixed a potential issue where requests to bridges might take a long time to be retried. This only affected low throughput scenarios, where the buffering layer could take a long time to detect connectivity and driver problems.\n\n#10878 Fixed a vulnerability in the RabbitMQ bridge, which could potentially expose passwords to log files.\n\n#10871 Fixed an issue where the Dashboard shows that the connection still exists after a CoAP connection is disconnected, but deletion and message posting requests do not take effect.\n\n#10880 Added a new REST API POST /clients/kickout/bulk for kicking out multiple clients in bulk.\n\n#10913 Fixed an issue where the plugin status REST API of a node would still include the cluster node status after the node left the cluster.\n\n#10923 Fixed a race-condition in channel info registration. Prior to this fix, when system is under heavy load, it might happen that a client is disconnected (or has its session expired) but still can be found in the clients page in dashboard. One of the possible reasons is a race condition fixed in this PR: the connection is killed in the middle of channel data registration.\n\n#10930 Added a schema validation for duration data type to avoid invalid values. Before this fix, it was possible to use absurd values in the schema that would exceed the system limit, causing a crash.\n\n#10952 Disallow enabling fail_if_no_peer_cert in listener SSL options if verify = verify_none is set. Setting fail_if_no_peer_cert = true and verify = verify_none caused connection errors due to incompatible options. This fix validates the options when creating or updating a listener to avoid these errors.\n\nNote: any old listener configuration with fail_if_no_peer_cert = true and verify = verify_none that was previously allowed will fail to load after applying this fix and must be manually fixed.\n\n#10951 Fixed the issue in MQTT-SN gateway when the mountpoint did not take effect on message publishing.\n\n#10943 Deprecated UDP mcast mechanism for cluster discovery. This feature has been planed for deprecation since 5.0 mainly due to the lack of actual production use. This feature code is not yet removed in 5.1, but the document interface is demoted.\n\n#10902 Avoid syncing cluser.hocon file from the nodes running a newer version than the self-node. During cluster rolling upgrade, if an older version node has to restart due to whatever reason, if it copies the cluster.hocon file from a newer version node, it may fail to start. After this fix, the older version node will not copy the cluster.hocon file from a newer, so it will use its own cluster.hocon file to start.\n\n#10967 Fixed error message formatting in rebalance API: previously they could be displayed as unclear dumps of internal Erlang structures. Added wait_health_check option to node evacuation CLI and API. This is a time interval when the node reports \"unhealthy status\" without beginning actual evacuation. We need this to allow a Load Balancer (if any) to remove the evacuated node from balancing and not forward (re)connecting clients to the evacuated node.\n\n#10911 The error message and log entry that appear when one tries to create a bridge with a name the exceeds 255 bytes is now easier to understand.\n\n#10983 Fixed the issue when mqtt clients could not connect over TLS if the listener was configured to use TLS v1.3 only. The problem was that TLS connection was trying to use options incompatible with TLS v1.3.\n\n#10977 Fixed the delay in updating subscription count metric and corrected configuration issues in Stomp gateway.\n\n#10950 Fixed the issue where the enable_qos option does not take effect in the MQTT-SN gateway.\n\n#10999 Changed schema validation for Kafka fields 'Partition Count Refresh Interval' and 'Offset Commit Interval' to avoid accepting values larger then maximum allowed.\n\n#10997 The ClickHouse bridge had a problem that could cause messages to be dropped when the ClickHouse server is closed while sending messages even when the request_ttl is set to infinity. This has been fixed by treating errors due to a closed connection as recoverable errors.\n\n#10994 Redacted proxy-authorization headers as used by HTTP connector to avoid leaking secrets into log files.\n\n#10996 For any unknown HTTP/API request, the default response is a 404 error rather than the dashboard's index.html.\n\n#11005 Fixed the issue where the method field cannot be correctly printed in the trace logs of AuthN HTTP.\n\n#11006 Fixed QUIC listeners's default cert file paths. Prior to this change, the default cert file paths are prefixed with environment variable ${EMQX_ETC_DIR} which were not interpolated before used in QUIC listeners.\n\n#10998 Do not allow batch_size option for MongoDB bridge resource. MongoDB connector currently does not support batching, the batch_size config value is forced to be 1 if provided.\n\n#10955 Fixed the issue in MQTT-SN gateway where deleting Predefined Topics configuration does not work.\n\n#11025 Fixed a case_clause error that could "
    }
}