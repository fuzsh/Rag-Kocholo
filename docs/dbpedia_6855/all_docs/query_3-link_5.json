{
    "id": "dbpedia_6855_3",
    "rank": 5,
    "data": {
        "url": "https://www.petergirnus.com/blog/curl-command-line-ultimate-reference-guide",
        "read_more_link": "",
        "language": "en",
        "title": "The Ultimate Reference Guide & Cheatsheet — Peter Girnus",
        "top_image": "http://static1.squarespace.com/static/60c543f3dd587909185f6a3f/t/64f97658f58d4d71fcbf9e8d/1694070362903/curl-logo.jpg?format=1500w",
        "meta_img": "http://static1.squarespace.com/static/60c543f3dd587909185f6a3f/t/64f97658f58d4d71fcbf9e8d/1694070362903/curl-logo.jpg?format=1500w",
        "images": [
            "https://images.squarespace-cdn.com/content/v1/60c543f3dd587909185f6a3f/1623957240483-CCI5PYL1ZN84RZX62BY1/peter_girnus_logo_white.png?format=1500w",
            "https://images.squarespace-cdn.com/content/v1/60c543f3dd587909185f6a3f/1623957240483-CCI5PYL1ZN84RZX62BY1/peter_girnus_logo_white.png?format=1500w",
            "https://images.squarespace-cdn.com/content/v1/60c543f3dd587909185f6a3f/f1f8494c-b2e4-4810-8a39-0dbb39b736e7/wireshark-window.jpg",
            "https://images.squarespace-cdn.com/content/v1/60c543f3dd587909185f6a3f/b5a95144-3a99-44d2-90cf-d27bc412e9b5/http-multipart-mime-boundary-wireshark.jpg",
            "https://images.squarespace-cdn.com/content/v1/60c543f3dd587909185f6a3f/8c200e9c-f0bc-4dc9-8647-b81f404e443b/wireshark-curl-request-target.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Peter Girnus"
        ],
        "publish_date": "2023-09-07T09:10:57-05:00",
        "summary": "",
        "meta_description": "This page contains a comprehensive curl command-line reference and guide based on the Mastering the Curl Command Line master class as well additional usage notes and examples on using curl. cURL is a computer software project providing the libcurl library and curl command-line tool for transferring",
        "meta_lang": "en",
        "meta_favicon": "https://images.squarespace-cdn.com/content/v1/60c543f3dd587909185f6a3f/8ebcb639-2c0f-41df-bb58-38ab9da4af3b/favicon.ico?format=100w",
        "meta_site_name": "Peter Girnus",
        "canonical_link": "https://www.petergirnus.com/blog/curl-command-line-ultimate-reference-guide",
        "text": "cURL short for “Client for URL” is a computer software project providing the libcurl library and curl command-line tool for transferring data such as downloads and uploads using various network protocols. The curl tool and libcurl library support a large selection of network protocols such as: DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, TFTP, WS and WSS. This rich support for common data transfer protocols makes curl and libcurl a powerful tool in the arsenal of anyone interacting with network protocols.\n\nI recently watched the above master class presentation on Mastering the Curl Command Line (slides) with Daniel Stenberg (@badger) the founder and lead developer of cURL and libcurl which was very detailed and full of useful information regarding the cURL command-line tool. From the video I added a plethora of new notes to my curl note collection. From these notes I decided to share them as a comprehensive reference and guide to the curl command-line tool. These notes are a compilation of my personal notes as well as notes taken while watching Mastering the Curl Command Line.\n\nBefore Starting\n\nIf you’re just learning about curl or are a seasoned curler looking to try new commands I highly recommend installing Wireshark while fiddling with curl. This allows you to see the network traffic you’re sending with curl.\n\n.netrc\n\nTo avoid password leakage you can pass a .netrc or config file. The command -n, --netrc will look for a .netrc file in the home directory.\n\nPass your own netrc file using the --netrc-file option.\n\nSee a full list of information on over 50 variables.\n\nDownloads\n\nSupports outputting using the -o, --output (specify filename) and -O, --remote-name (use server name) options.\n\nUse the --remote-header-name to use content-disposition name for the filename, use with the -O, --remote-name option.\n\nOutput Options\n\n-o, --output - Write to file instead of stdout\n\n-O, --remote-name - Write output to a file named as the remote file\n\n--output-dir - saves the -O, --remote-name data in another directory.\n\nTLS Backends\n\nWhen curl is built, it gets told to use a specific TLS library (backend). That TLS library (backend) is the engine that provides curl with the powers to speak TLS over the wire.\n\nSSLKEYLOGFILE\n\nThe curl command-line tool can push secrets to SSLKEYLOGFILE which can be read by Wireshark to decrypt traffic.\n\nSet the SSLKEYLOGFILE environment variable pointing to a file.\n\nTell Wireshark to read from the SSLKEYLOGFILE.\n\nRun curl\n\nRead decrypted traffic in Wireshark\n\nProxy\n\nA proxy server is a system or router that provides a gateway between users and the internet.\n\n-x, --proxy\n\nUse this proxy\n\nHTTP\n\nHypertext Transfer Protocol (HTTP) is an application-layer protocol that serves as the foundational protocol for retrieving web resources, including HTML documents, and serves as the backbone for all data exchanges on the Internet. It operates as a client-server protocol, with requests typically initiated by the recipient, often a web browser.\n\nHTTP Methods\n\nHTTP request methods are commands used by a client to indicate the desired action for a resource on a web server, such as GET for retrieving data or POST for submitting data.\n\nHTTP Headers in Terminal\n\nA HEAD request is a type of HTTP request method used to retrieve only the headers of a resource without actually fetching the resource's body content.\n\n-I, --head\n\nShow document info only\n\nHTTP Authentication\n\nHTTP Authentication is defined in RFC7235 which can be used by a server to challenge a client to authenticate.\n\n401 Unauthorized\n\nThe HyperText Transfer Protocol (HTTP) 401 Unauthorized response status code indicates that the client request is unauthorized and must authenticate.\n\n407 Proxy Authentication Required\n\nThe HTTP 407 Proxy Authentication Required client error status response code indicates the client request is unauthorized and must authenticate to a proxy between it and the server.\n\n-u, --user\n\nServer user and password\n\nHTTP POST: Expect 100-continue\n\nFor HTTP/1.1 only, the HTTP 100 Continue header used by curl when POST or PUT greater than 1MB. Is used to avoid sending data when server refused data, when server responds with 100, continue transmission.\n\nDisable 100 Continue\n\nCan waste time as often ignored by servers, so disable with curl\n\nHTTP Cookies\n\nAn HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser. The browser may store the cookie and send it back to the same server with later requests. Typically this cookie is used to store sessions, personalize the browser experience, and tracking the user.\n\nHTTP Cookies - Sending\n\n-b, --cookie\n\nSend cookies from string/file\n\nHTTP/3\n\nIn HTTP/3 is done over Quick UDP Internet Connections (QUIC), a new transport protocol.\n\nIn curl the HTTP protocol differences are obfuscated from the user, HTTP/3 is experimental in curl and it only available for HTTPS with the --http3.\n\n--http3 races against HTTP/1 and HTTP/2 and picks a winner.\n\n-Z, --parallel\n\nPerform transfers in parallel\n\nFile Transfer Protocol (FTP)\n\nFile Transfer Protocol (FTP) is a way to download, upload, and transfer one network location to another. Originally built on top of the Network Control Protocol (NCP) or ARPANET which uses a simplex protocol that uses two port addresses, establishing two connections. The 2nd connection server-to-client (active) or client-to-server (passive)\n\n--ftp-pasv\n\nUse PASV/EPSV instead of PORT\n\nUse FTPS:// if using (rare) implicit TLS. However, using this option is more problematic for stateful firewalls to handle.\n\nConclusion\n\nThe Mastering the Curl Command Line (slides) with Daniel Stenberg (@badger) was a massive talk that dove into great detail on this amazing tool from the author himself! If you’d like to learn more about curl you can visit the official Everything curl guide as well check out the official GitHub Repo. While you’re at it be sure to check out the curl releases webpage which gives information such as curl version, data, bugfixes, changes, and vulnerabilities."
    }
}