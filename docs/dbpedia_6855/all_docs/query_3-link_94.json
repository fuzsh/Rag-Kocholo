{
    "id": "dbpedia_6855_3",
    "rank": 94,
    "data": {
        "url": "https://pandoc.org/MANUAL.html",
        "read_more_link": "",
        "language": "en",
        "title": "Pandoc User’s Guide",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.paypalobjects.com/en_US/i/scr/pixel.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Synopsis ±\n\npandoc [options] [input-file]…\n\nDescription ±\n\nPandoc is a Haskell library for converting from one markup format to another, and a command-line tool that uses this library.\n\nPandoc can convert between numerous markup and word processing formats, including, but not limited to, various flavors of Markdown, HTML, LaTeX and Word docx. For the full lists of input and output formats, see the --from and --to options below. Pandoc can also produce PDF output: see creating a PDF, below.\n\nPandoc’s enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more. See below under Pandoc’s Markdown.\n\nPandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an abstract syntax tree or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom pandoc filters to modify the intermediate AST.\n\nBecause pandoc’s intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc’s simple document model. While conversions from pandoc’s Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc’s Markdown can be expected to be lossy.\n\nSpecifying formats ±\n\nThe format of the input and output can be specified explicitly using command-line options. The input format can be specified using the -f/--from option, the output format using the -t/--to option. Thus, to convert hello.txt from Markdown to LaTeX, you could type:\n\npandoc -f markdown -t latex hello.txt\n\nTo convert hello.html from HTML to Markdown:\n\npandoc -f html -t markdown hello.html\n\nSupported input and output formats are listed below under Options (see -f for input formats and -t for output formats). You can also use pandoc --list-input-formats and pandoc --list-output-formats to print lists of supported formats.\n\nIf the input or output format is not specified explicitly, pandoc will attempt to guess it from the extensions of the filenames. Thus, for example,\n\npandoc -o hello.tex hello.txt\n\nwill convert hello.txt from Markdown to LaTeX. If no output file is specified (so that output goes to stdout), or if the output file’s extension is unknown, the output format will default to HTML. If no input file is specified (so that input comes from stdin), or if the input files’ extensions are unknown, the input format will be assumed to be Markdown.\n\nCharacter encoding ±\n\nPandoc uses the UTF-8 character encoding for both input and output. If your local character encoding is not UTF-8, you should pipe input and output through iconv:\n\niconv -t utf-8 input.txt | pandoc | iconv -f utf-8\n\nNote that in some output formats (such as HTML, LaTeX, ConTeXt, RTF, OPML, DocBook, and Texinfo), information about the character encoding is included in the document header, which will only be included if you use the -s/--standalone option.\n\nCreating a PDF ±\n\nTo produce a PDF, specify an output file with a .pdf extension:\n\npandoc test.txt -o test.pdf\n\nBy default, pandoc will use LaTeX to create the PDF, which requires that a LaTeX engine be installed (see --pdf-engine below). Alternatively, pandoc can use ConTeXt, roff ms, or HTML as an intermediate format. To do this, specify an output file with a .pdf extension, as before, but add the --pdf-engine option or -t context, -t html, or -t ms to the command line. The tool used to generate the PDF from the intermediate format may be specified using --pdf-engine.\n\nYou can control the PDF style using variables, depending on the intermediate format used: see variables for LaTeX, variables for ConTeXt, variables for wkhtmltopdf, variables for ms. When HTML is used as an intermediate format, the output can be styled using --css.\n\nTo debug the PDF creation, it can be useful to look at the intermediate representation: instead of -o test.pdf, use for example -s -o test.tex to output the generated LaTeX. You can then test it with pdflatex test.tex.\n\nWhen using LaTeX, the following packages need to be available (they are included with all recent versions of TeX Live): amsfonts, amsmath, lm, unicode-math, iftex, listings (if the --listings option is used), fancyvrb, longtable, booktabs, [multirow] (if the document contains a table with cells that cross multiple rows), graphicx (if the document contains images), bookmark, xcolor, soul, geometry (with the geometry variable set), setspace (with linestretch), and babel (with lang). If CJKmainfont is set, xeCJK is needed. framed is required if code is highlighted in a scheme that use a colored background. The use of xelatex or lualatex as the PDF engine requires fontspec. lualatex uses selnolig and lua-ul. xelatex uses bidi (with the dir variable set). If the mathspec variable is set, xelatex will use mathspec instead of unicode-math. The upquote and microtype packages are used if available, and csquotes will be used for typography if the csquotes variable or metadata field is set to a true value. The natbib, biblatex, bibtex, and biber packages can optionally be used for citation rendering. The following packages will be used to improve output quality if present, but pandoc does not require them to be present: upquote (for straight quotes in verbatim environments), microtype (for better spacing adjustments), parskip (for better inter-paragraph spaces), xurl (for better line breaks in URLs), and footnotehyper or footnote (to allow footnotes in tables).\n\nReading from the Web ±\n\nInstead of an input file, an absolute URI may be given. In this case pandoc will fetch the content using HTTP:\n\npandoc -f html -t markdown https://www.fsf.org\n\nIt is possible to supply a custom User-Agent string or other header when requesting a document from a URL:\n\npandoc -f html -t markdown --request-header User-Agent:\"Mozilla/5.0\" \\ https://www.fsf.org\n\nOptions ±\n\nGeneral options ±\n\n-f FORMAT, -r FORMAT, --from=FORMAT, --read=FORMAT\n\nSpecify input format. FORMAT can be:\n\nbibtex (BibTeX bibliography)\n\nbiblatex (BibLaTeX bibliography)\n\nbits (BITS XML, alias for jats)\n\ncommonmark (CommonMark Markdown)\n\ncommonmark_x (CommonMark Markdown with extensions)\n\ncreole (Creole 1.0)\n\ncsljson (CSL JSON bibliography)\n\ncsv (CSV table)\n\ntsv (TSV table)\n\ndjot (Djot markup)\n\ndocbook (DocBook)\n\ndocx (Word docx)\n\ndokuwiki (DokuWiki markup)\n\nendnotexml (EndNote XML bibliography)\n\nepub (EPUB)\n\nfb2 (FictionBook2 e-book)\n\ngfm (GitHub-Flavored Markdown), or the deprecated and less accurate markdown_github; use markdown_github only if you need extensions not supported in gfm.\n\nhaddock (Haddock markup)\n\nhtml (HTML)\n\nipynb (Jupyter notebook)\n\njats (JATS XML)\n\njira (Jira/Confluence wiki markup)\n\njson (JSON version of native AST)\n\nlatex (LaTeX)\n\nmarkdown (Pandoc’s Markdown)\n\nmarkdown_mmd (MultiMarkdown)\n\nmarkdown_phpextra (PHP Markdown Extra)\n\nmarkdown_strict (original unextended Markdown)\n\nmediawiki (MediaWiki markup)\n\nman (roff man)\n\nmuse (Muse)\n\nnative (native Haskell)\n\nodt (OpenOffice text document)\n\nopml (OPML)\n\norg (Emacs Org mode)\n\nris (RIS bibliography)\n\nrtf (Rich Text Format)\n\nrst (reStructuredText)\n\nt2t (txt2tags)\n\ntextile (Textile)\n\ntikiwiki (TikiWiki markup)\n\ntwiki (TWiki markup)\n\ntypst (typst)\n\nvimwiki (Vimwiki)\n\nthe path of a custom Lua reader, see Custom readers and writers below\n\nExtensions can be individually enabled or disabled by appending +EXTENSION or -EXTENSION to the format name. See Extensions below, for a list of extensions and their names. See --list-input-formats and --list-extensions, below.\n\n-t FORMAT, -w FORMAT, --to=FORMAT, --write=FORMAT\n\nSpecify output format. FORMAT can be:\n\nasciidoc (modern AsciiDoc as interpreted by AsciiDoctor)\n\nasciidoc_legacy (AsciiDoc as interpreted by asciidoc-py).\n\nasciidoctor (deprecated synonym for asciidoc)\n\nbeamer (LaTeX beamer slide show)\n\nbibtex (BibTeX bibliography)\n\nbiblatex (BibLaTeX bibliography)\n\nchunkedhtml (zip archive of multiple linked HTML files)\n\ncommonmark (CommonMark Markdown)\n\ncommonmark_x (CommonMark Markdown with extensions)\n\ncontext (ConTeXt)\n\ncsljson (CSL JSON bibliography)\n\ndjot (Djot markup)\n\ndocbook or docbook4 (DocBook 4)\n\ndocbook5 (DocBook 5)\n\ndocx (Word docx)\n\ndokuwiki (DokuWiki markup)\n\nepub or epub3 (EPUB v3 book)\n\nepub2 (EPUB v2)\n\nfb2 (FictionBook2 e-book)\n\ngfm (GitHub-Flavored Markdown), or the deprecated and less accurate markdown_github; use markdown_github only if you need extensions not supported in gfm.\n\nhaddock (Haddock markup)\n\nhtml or html5 (HTML, i.e. HTML5/XHTML polyglot markup)\n\nhtml4 (XHTML 1.0 Transitional)\n\nicml (InDesign ICML)\n\nipynb (Jupyter notebook)\n\njats_archiving (JATS XML, Archiving and Interchange Tag Set)\n\njats_articleauthoring (JATS XML, Article Authoring Tag Set)\n\njats_publishing (JATS XML, Journal Publishing Tag Set)\n\njats (alias for jats_archiving)\n\njira (Jira/Confluence wiki markup)\n\njson (JSON version of native AST)\n\nlatex (LaTeX)\n\nman (roff man)\n\nmarkdown (Pandoc’s Markdown)\n\nmarkdown_mmd (MultiMarkdown)\n\nmarkdown_phpextra (PHP Markdown Extra)\n\nmarkdown_strict (original unextended Markdown)\n\nmarkua (Markua)\n\nmediawiki (MediaWiki markup)\n\nms (roff ms)\n\nmuse (Muse)\n\nnative (native Haskell)\n\nodt (OpenOffice text document)\n\nopml (OPML)\n\nopendocument (OpenDocument)\n\norg (Emacs Org mode)\n\npdf (PDF)\n\nplain (plain text)\n\npptx (PowerPoint slide show)\n\nrst (reStructuredText)\n\nrtf (Rich Text Format)\n\ntexinfo (GNU Texinfo)\n\ntextile (Textile)\n\nslideous (Slideous HTML and JavaScript slide show)\n\nslidy (Slidy HTML and JavaScript slide show)\n\ndzslides (DZSlides HTML5 + JavaScript slide show)\n\nrevealjs (reveal.js HTML5 + JavaScript slide show)\n\ns5 (S5 HTML and JavaScript slide show)\n\ntei (TEI Simple)\n\ntypst (typst)\n\nxwiki (XWiki markup)\n\nzimwiki (ZimWiki markup)\n\nthe path of a custom Lua writer, see Custom readers and writers below\n\nNote that odt, docx, epub, and pdf output will not be directed to stdout unless forced with -o -.\n\nExtensions can be individually enabled or disabled by appending +EXTENSION or -EXTENSION to the format name. See Extensions below, for a list of extensions and their names. See --list-output-formats and --list-extensions, below.\n\n-o FILE, --output=FILE\n\nWrite output to FILE instead of stdout. If FILE is -, output will go to stdout, even if a non-textual format (docx, odt, epub2, epub3) is specified. If the output format is chunkedhtml and FILE has no extension, then instead of producing a .zip file pandoc will create a directory FILE and unpack the zip archive there (unless FILE already exists, in which case an error will be raised).\n\n--data-dir=DIRECTORY\n\nSpecify the user data directory to search for pandoc data files. If this option is not specified, the default user data directory will be used. On *nix and macOS systems this will be the pandoc subdirectory of the XDG data directory (by default, $HOME/.local/share, overridable by setting the XDG_DATA_HOME environment variable). If that directory does not exist and $HOME/.pandoc exists, it will be used (for backwards compatibility). On Windows the default user data directory is %APPDATA%\\pandoc. You can find the default user data directory on your system by looking at the output of pandoc --version. Data files placed in this directory (for example, reference.odt, reference.docx, epub.css, templates) will override pandoc’s normal defaults. (Note that the user data directory is not created by pandoc, so you will need to create it yourself if you want to make use of it.)\n\n-d FILE, --defaults=FILE\n\nSpecify a set of default option settings. FILE is a YAML file whose fields correspond to command-line option settings. All options for document conversion, including input and output files, can be set using a defaults file. The file will be searched for first in the working directory, and then in the defaults subdirectory of the user data directory (see --data-dir). The .yaml extension may be omitted. See the section Defaults files for more information on the file format. Settings from the defaults file may be overridden or extended by subsequent options on the command line.\n\n--bash-completion\n\nGenerate a bash completion script. To enable bash completion with pandoc, add this to your .bashrc:\n\neval \"$(pandoc --bash-completion)\"\n\n--verbose\n\nGive verbose debugging output.\n\n--quiet\n\nSuppress warning messages.\n\n--fail-if-warnings[=true|false]\n\nExit with error status if there are any warnings.\n\n--log=FILE\n\nWrite log messages in machine-readable JSON format to FILE. All messages above DEBUG level will be written, regardless of verbosity settings (--verbose, --quiet).\n\n--list-input-formats\n\nList supported input formats, one per line.\n\n--list-output-formats\n\nList supported output formats, one per line.\n\n--list-extensions[=FORMAT]\n\nList supported extensions for FORMAT, one per line, preceded by a + or - indicating whether it is enabled by default in FORMAT. If FORMAT is not specified, defaults for pandoc’s Markdown are given.\n\n--list-highlight-languages\n\nList supported languages for syntax highlighting, one per line.\n\n--list-highlight-styles\n\nList supported styles for syntax highlighting, one per line. See --highlight-style.\n\n-v, --version\n\nPrint version.\n\n-h, --help\n\nShow usage message.\n\nReader options ±\n\n--shift-heading-level-by=NUMBER\n\nShift heading levels by a positive or negative integer. For example, with --shift-heading-level-by=-1, level 2 headings become level 1 headings, and level 3 headings become level 2 headings. Headings cannot have a level less than 1, so a heading that would be shifted below level 1 becomes a regular paragraph. Exception: with a shift of -N, a level-N heading at the beginning of the document replaces the metadata title. --shift-heading-level-by=-1 is a good choice when converting HTML or Markdown documents that use an initial level-1 heading for the document title and level-2+ headings for sections. --shift-heading-level-by=1 may be a good choice for converting Markdown documents that use level-1 headings for sections to HTML, since pandoc uses a level-1 heading to render the document title.\n\n--base-header-level=NUMBER\n\nDeprecated. Use --shift-heading-level-by=X instead, where X = NUMBER - 1. Specify the base level for headings (defaults to 1).\n\n--indented-code-classes=CLASSES\n\nSpecify classes to use for indented code blocks—for example, perl,numberLines or haskell. Multiple classes may be separated by spaces or commas.\n\n--default-image-extension=EXTENSION\n\nSpecify a default extension to use when image paths/URLs have no extension. This allows you to use the same source for formats that require different kinds of images. Currently this option only affects the Markdown and LaTeX readers.\n\n--file-scope[=true|false]\n\nParse each file individually before combining for multifile documents. This will allow footnotes in different files with the same identifiers to work as expected. If this option is set, footnotes and links will not work across files. Reading binary files (docx, odt, epub) implies --file-scope.\n\nIf two or more files are processed using --file-scope, prefixes based on the filenames will be added to identifiers in order to disambiguate them, and internal links will be adjusted accordingly. For example, a header with identifier foo in subdir/file1.txt will have its identifier changed to subdir__file1.txt__foo.\n\n-F PROGRAM, --filter=PROGRAM\n\nSpecify an executable to be used as a filter transforming the pandoc AST after the input is parsed and before the output is written. The executable should read JSON from stdin and write JSON to stdout. The JSON must be formatted like pandoc’s own JSON input and output. The name of the output format will be passed to the filter as the first argument. Hence,\n\npandoc --filter ./caps.py -t latex\n\nis equivalent to\n\npandoc -t json | ./caps.py latex | pandoc -f json -t latex\n\nThe latter form may be useful for debugging filters.\n\nFilters may be written in any language. Text.Pandoc.JSON exports toJSONFilter to facilitate writing filters in Haskell. Those who would prefer to write filters in python can use the module pandocfilters, installable from PyPI. There are also pandoc filter libraries in PHP, perl, and JavaScript/node.js.\n\nIn order of preference, pandoc will look for filters in\n\na specified full or relative path (executable or non-executable),\n\n$DATADIR/filters (executable or non-executable) where $DATADIR is the user data directory (see --data-dir, above),\n\n$PATH (executable only).\n\nFilters, Lua-filters, and citeproc processing are applied in the order specified on the command line.\n\n-L SCRIPT, --lua-filter=SCRIPT\n\nTransform the document in a similar fashion as JSON filters (see --filter), but use pandoc’s built-in Lua filtering system. The given Lua script is expected to return a list of Lua filters which will be applied in order. Each Lua filter must contain element-transforming functions indexed by the name of the AST element on which the filter function should be applied.\n\nThe pandoc Lua module provides helper functions for element creation. It is always loaded into the script’s Lua environment.\n\nSee the Lua filters documentation for further details.\n\nIn order of preference, pandoc will look for Lua filters in\n\na specified full or relative path,\n\n$DATADIR/filters where $DATADIR is the user data directory (see --data-dir, above).\n\nFilters, Lua filters, and citeproc processing are applied in the order specified on the command line.\n\n-M KEY[=VAL], --metadata=KEY[:VAL]\n\nSet the metadata field KEY to the value VAL. A value specified on the command line overrides a value specified in the document using YAML metadata blocks. Values will be parsed as YAML boolean or string values. If no value is specified, the value will be treated as Boolean true. Like --variable, --metadata causes template variables to be set. But unlike --variable, --metadata affects the metadata of the underlying document (which is accessible from filters and may be printed in some output formats) and metadata values will be escaped when inserted into the template.\n\n--metadata-file=FILE\n\nRead metadata from the supplied YAML (or JSON) file. This option can be used with every input format, but string scalars in the metadata file will always be parsed as Markdown. (If the input format is Markdown or a Markdown variant, then the same variant will be used to parse the metadata file; if it is a non-Markdown format, pandoc’s default Markdown extensions will be used.) This option can be used repeatedly to include multiple metadata files; values in files specified later on the command line will be preferred over those specified in earlier files. Metadata values specified inside the document, or by using -M, overwrite values specified with this option. The file will be searched for first in the working directory, and then in the metadata subdirectory of the user data directory (see --data-dir).\n\n-p, --preserve-tabs[=true|false]\n\nPreserve tabs instead of converting them to spaces. (By default, pandoc converts tabs to spaces before parsing its input.) Note that this will only affect tabs in literal code spans and code blocks. Tabs in regular text are always treated as spaces.\n\n--tab-stop=NUMBER\n\nSpecify the number of spaces per tab (default is 4).\n\n--track-changes=accept|reject|all\n\nSpecifies what to do with insertions, deletions, and comments produced by the MS Word “Track Changes” feature. accept (the default) processes all the insertions and deletions. reject ignores them. Both accept and reject ignore comments. all includes all insertions, deletions, and comments, wrapped in spans with insertion, deletion, comment-start, and comment-end classes, respectively. The author and time of change is included. all is useful for scripting: only accepting changes from a certain reviewer, say, or before a certain date. If a paragraph is inserted or deleted, track-changes=all produces a span with the class paragraph-insertion/paragraph-deletion before the affected paragraph break. This option only affects the docx reader.\n\n--extract-media=DIR\n\nExtract images and other media contained in or linked from the source document to the path DIR, creating it if necessary, and adjust the images references in the document so they point to the extracted files. Media are downloaded, read from the file system, or extracted from a binary container (e.g. docx), as needed. The original file paths are used if they are relative paths not containing ... Otherwise filenames are constructed from the SHA1 hash of the contents.\n\n--abbreviations=FILE\n\nSpecifies a custom abbreviations file, with abbreviations one to a line. If this option is not specified, pandoc will read the data file abbreviations from the user data directory or fall back on a system default. To see the system default, use pandoc --print-default-data-file=abbreviations. The only use pandoc makes of this list is in the Markdown reader. Strings found in this list will be followed by a nonbreaking space, and the period will not produce sentence-ending space in formats like LaTeX. The strings may not contain spaces.\n\n--trace[=true|false]\n\nPrint diagnostic output tracing parser progress to stderr. This option is intended for use by developers in diagnosing performance issues.\n\nGeneral writer options ±\n\n-s, --standalone\n\nProduce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, TEI, or RTF file, not a fragment). This option is set automatically for pdf, epub, epub3, fb2, docx, and odt output. For native output, this option causes metadata to be included; otherwise, metadata is suppressed.\n\n--template=FILE|URL\n\nUse the specified file as a custom template for the generated document. Implies --standalone. See Templates, below, for a description of template syntax. If no extension is specified, an extension corresponding to the writer will be added, so that --template=special looks for special.html for HTML output. If the template is not found, pandoc will search for it in the templates subdirectory of the user data directory (see --data-dir). If this option is not used, a default template appropriate for the output format will be used (see -D/--print-default-template).\n\n-V KEY[=VAL], --variable=KEY[:VAL]\n\nSet the template variable KEY to the value VAL when rendering the document in standalone mode. If no VAL is specified, the key will be given the value true.\n\n--sandbox[=true|false]\n\nRun pandoc in a sandbox, limiting IO operations in readers and writers to reading the files specified on the command line. Note that this option does not limit IO operations by filters or in the production of PDF documents. But it does offer security against, for example, disclosure of files through the use of include directives. Anyone using pandoc on untrusted user input should use this option.\n\nNote: some readers and writers (e.g., docx) need access to data files. If these are stored on the file system, then pandoc will not be able to find them when run in --sandbox mode and will raise an error. For these applications, we recommend using a pandoc binary compiled with the embed_data_files option, which causes the data files to be baked into the binary instead of being stored on the file system.\n\n-D FORMAT, --print-default-template=FORMAT\n\nPrint the system default template for an output FORMAT. (See -t for a list of possible FORMATs.) Templates in the user data directory are ignored. This option may be used with -o/--output to redirect output to a file, but -o/--output must come before --print-default-template on the command line.\n\nNote that some of the default templates use partials, for example styles.html. To print the partials, use --print-default-data-file: for example, --print-default-data-file=templates/styles.html.\n\n--print-default-data-file=FILE\n\nPrint a system default data file. Files in the user data directory are ignored. This option may be used with -o/--output to redirect output to a file, but -o/--output must come before --print-default-data-file on the command line.\n\n--eol=crlf|lf|native\n\nManually specify line endings: crlf (Windows), lf (macOS/Linux/UNIX), or native (line endings appropriate to the OS on which pandoc is being run). The default is native.\n\n--dpi=NUMBER\n\nSpecify the default dpi (dots per inch) value for conversion from pixels to inch/centimeters and vice versa. (Technically, the correct term would be ppi: pixels per inch.) The default is 96dpi. When images contain information about dpi internally, the encoded value is used instead of the default specified by this option.\n\n--wrap=auto|none|preserve\n\nDetermine how text is wrapped in the output (the source code, not the rendered version). With auto (the default), pandoc will attempt to wrap lines to the column width specified by --columns (default 72). With none, pandoc will not wrap lines at all. With preserve, pandoc will attempt to preserve the wrapping from the source document (that is, where there are nonsemantic newlines in the source, there will be nonsemantic newlines in the output as well). In ipynb output, this option affects wrapping of the contents of Markdown cells.\n\n--columns=NUMBER\n\nSpecify length of lines in characters. This affects text wrapping in the generated source code (see --wrap). It also affects calculation of column widths for plain text tables (see Tables below).\n\n--toc[=true|false], --table-of-contents[=true|false]\n\nInclude an automatically generated table of contents (or, in the case of latex, context, docx, odt, opendocument, rst, or ms, an instruction to create one) in the output document. This option has no effect unless -s/--standalone is used, and it has no effect on man, docbook4, docbook5, or jats output.\n\nNote that if you are producing a PDF via ms, the table of contents will appear at the beginning of the document, before the title. If you would prefer it to be at the end of the document, use the option --pdf-engine-opt=--no-toc-relocation.\n\n--toc-depth=NUMBER\n\nSpecify the number of section levels to include in the table of contents. The default is 3 (which means that level-1, 2, and 3 headings will be listed in the contents).\n\nStrip out HTML comments in the Markdown or Textile source, rather than passing them on to Markdown, Textile or HTML output as raw HTML. This does not apply to HTML comments inside raw HTML blocks when the markdown_in_html_blocks extension is not set.\n\n--no-highlight\n\nDisables syntax highlighting for code blocks and inlines, even when a language attribute is given.\n\n--highlight-style=STYLE|FILE\n\nSpecifies the coloring style to be used in highlighted source code. Options are pygments (the default), kate, monochrome, breezeDark, espresso, zenburn, haddock, and tango. For more information on syntax highlighting in pandoc, see Syntax highlighting, below. See also --list-highlight-styles.\n\nInstead of a STYLE name, a JSON file with extension .theme may be supplied. This will be parsed as a KDE syntax highlighting theme and (if valid) used as the highlighting style.\n\nTo generate the JSON version of an existing style, use --print-highlight-style.\n\n--print-highlight-style=STYLE|FILE\n\nPrints a JSON version of a highlighting style, which can be modified, saved with a .theme extension, and used with --highlight-style. This option may be used with -o/--output to redirect output to a file, but -o/--output must come before --print-highlight-style on the command line.\n\n--syntax-definition=FILE\n\nInstructs pandoc to load a KDE XML syntax definition file, which will be used for syntax highlighting of appropriately marked code blocks. This can be used to add support for new languages or to use altered syntax definitions for existing languages. This option may be repeated to add multiple syntax definitions.\n\n-H FILE, --include-in-header=FILE|URL\n\nInclude contents of FILE, verbatim, at the end of the header. This can be used, for example, to include special CSS or JavaScript in HTML documents. This option can be used repeatedly to include multiple files in the header. They will be included in the order specified. Implies --standalone.\n\n-B FILE, --include-before-body=FILE|URL\n\nInclude contents of FILE, verbatim, at the beginning of the document body (e.g. after the <body> tag in HTML, or the \\begin{document} command in LaTeX). This can be used to include navigation bars or banners in HTML documents. This option can be used repeatedly to include multiple files. They will be included in the order specified. Implies --standalone. Note that if the output format is odt, this file must be in OpenDocument XML format suitable for insertion into the body of the document, and if the output is docx, this file must be in appropriate OpenXML format.\n\n-A FILE, --include-after-body=FILE|URL\n\nInclude contents of FILE, verbatim, at the end of the document body (before the </body> tag in HTML, or the \\end{document} command in LaTeX). This option can be used repeatedly to include multiple files. They will be included in the order specified. Implies --standalone. Note that if the output format is odt, this file must be in OpenDocument XML format suitable for insertion into the body of the document, and if the output is docx, this file must be in appropriate OpenXML format.\n\n--resource-path=SEARCHPATH\n\nList of paths to search for images and other resources. The paths should be separated by : on Linux, UNIX, and macOS systems, and by ; on Windows. If --resource-path is not specified, the default resource path is the working directory. Note that, if --resource-path is specified, the working directory must be explicitly listed or it will not be searched. For example: --resource-path=.:test will search the working directory and the test subdirectory, in that order. This option can be used repeatedly. Search path components that come later on the command line will be searched before those that come earlier, so --resource-path foo:bar --resource-path baz:bim is equivalent to --resource-path baz:bim:foo:bar. Note that this option only has an effect when pandoc itself needs to find an image (e.g., in producing a PDF or docx, or when --embed-resources is used.) It will not cause image paths to be rewritten in other cases (e.g., when pandoc is generating LaTeX or HTML).\n\n--request-header=NAME:VAL\n\nSet the request header NAME to the value VAL when making HTTP requests (for example, when a URL is given on the command line, or when resources used in a document must be downloaded). If you’re behind a proxy, you also need to set the environment variable http_proxy to http://....\n\n--no-check-certificate[=true|false]\n\nDisable the certificate verification to allow access to unsecure HTTP resources (for example when the certificate is no longer valid or self signed).\n\nOptions affecting specific writers ±\n\n--self-contained[=true|false]\n\nDeprecated synonym for --embed-resources --standalone.\n\n--embed-resources[=true|false]\n\nProduce a standalone HTML file with no external dependencies, using data: URIs to incorporate the contents of linked scripts, stylesheets, images, and videos. The resulting file should be “self-contained,” in the sense that it needs no external files and no net access to be displayed properly by a browser. This option works only with HTML output formats, including html4, html5, html+lhs, html5+lhs, s5, slidy, slideous, dzslides, and revealjs. Scripts, images, and stylesheets at absolute URLs will be downloaded; those at relative URLs will be sought relative to the working directory (if the first source file is local) or relative to the base URL (if the first source file is remote). Elements with the attribute data-external=\"1\" will be left alone; the documents they link to will not be incorporated in the document. Limitation: resources that are loaded dynamically through JavaScript cannot be incorporated; as a result, fonts may be missing when --mathjax is used, and some advanced features (e.g. zoom or speaker notes) may not work in an offline “self-contained” reveal.js slide show.\n\nFor SVG images, img tags with data: URIs are used, unless the image has the class inline-svg, in which case an inline SVG element is inserted. This approach is recommended when there are many occurrences of the same SVG in a document, as <use> elements will be used to reduce duplication.\n\n--link-images[=true|false]\n\nInclude links to images instead of embedding the images in ODT. (This option currently only affects ODT output.)\n\nUse <q> tags for quotes in HTML. (This option only has an effect if the smart extension is enabled for the input format used.)\n\n--ascii[=true|false]\n\nUse only ASCII characters in output. Currently supported for XML and HTML formats (which use entities instead of UTF-8 when this option is selected), CommonMark, gfm, and Markdown (which use entities), roff man and ms (which use hexadecimal escapes), and to a limited degree LaTeX (which uses standard commands for accented characters when possible).\n\nUse reference-style links, rather than inline links, in writing Markdown or reStructuredText. By default inline links are used. The placement of link references is affected by the --reference-location option.\n\n--reference-location=block|section|document\n\nSpecify whether footnotes (and references, if reference-links is set) are placed at the end of the current (top-level) block, the current section, or the document. The default is document. Currently this option only affects the markdown, muse, html, epub, slidy, s5, slideous, dzslides, and revealjs writers. In slide formats, specifying --reference-location=section will cause notes to be rendered at the bottom of a slide.\n\n--markdown-headings=setext|atx\n\nSpecify whether to use ATX-style (#-prefixed) or Setext-style (underlined) headings for level 1 and 2 headings in Markdown output. (The default is atx.) ATX-style headings are always used for levels 3+. This option also affects Markdown cells in ipynb output.\n\n--list-tables[=true|false]\n\nRender tables as list tables in RST output.\n\n--top-level-division=default|section|chapter|part\n\nTreat top-level headings as the given division type in LaTeX, ConTeXt, DocBook, and TEI output. The hierarchy order is part, chapter, then section; all headings are shifted such that the top-level heading becomes the specified type. The default behavior is to determine the best division type via heuristics: unless other conditions apply, section is chosen. When the documentclass variable is set to report, book, or memoir (unless the article option is specified), chapter is implied as the setting for this option. If beamer is the output format, specifying either chapter or part will cause top-level headings to become \\part{..}, while second-level headings remain as their default type.\n\n-N, --number-sections=[true|false]\n\nNumber section headings in LaTeX, ConTeXt, HTML, Docx, ms, or EPUB output. By default, sections are not numbered. Sections with class unnumbered will never be numbered, even if --number-sections is specified.\n\n--number-offset=NUMBER[,NUMBER,…]\n\nOffset for section headings in HTML output (ignored in other output formats). The first number is added to the section number for top-level headings, the second for second-level headings, and so on. So, for example, if you want the first top-level heading in your document to be numbered “6”, specify --number-offset=5. If your document starts with a level-2 heading which you want to be numbered “1.5”, specify --number-offset=1,4. Offsets are 0 by default. Implies --number-sections.\n\n--listings[=true|false]\n\nUse the listings package for LaTeX code blocks. The package does not support multi-byte encoding for source code. To handle UTF-8 you would need to use a custom template. This issue is fully documented here: Encoding issue with the listings package.\n\n-i, --incremental[=true|false]\n\nMake list items in slide shows display incrementally (one by one). The default is for lists to be displayed all at once.\n\n--slide-level=NUMBER\n\nSpecifies that headings with the specified level create slides (for beamer, revealjs, pptx, s5, slidy, slideous, dzslides). Headings above this level in the hierarchy are used to divide the slide show into sections; headings below this level create subheads within a slide. Valid values are 0-6. If a slide level of 0 is specified, slides will not be split automatically on headings, and horizontal rules must be used to indicate slide boundaries. If a slide level is not specified explicitly, the slide level will be set automatically based on the contents of the document; see Structuring the slide show.\n\n--section-divs[=true|false]\n\nWrap sections in <section> tags (or <div> tags for html4), and attach identifiers to the enclosing <section> (or <div>) rather than the heading itself (see Heading identifiers, below). This option only affects HTML output (and does not affect HTML slide formats).\n\n--email-obfuscation=none|javascript|references\n\nSpecify a method for obfuscating mailto: links in HTML documents. none leaves mailto: links as they are. javascript obfuscates them using JavaScript. references obfuscates them by printing their letters as decimal or hexadecimal character references. The default is none.\n\n--id-prefix=STRING\n\nSpecify a prefix to be added to all identifiers and internal links in HTML and DocBook output, and to footnote numbers in Markdown and Haddock output. This is useful for preventing duplicate identifiers when generating fragments to be included in other pages.\n\n-T STRING, --title-prefix=STRING\n\nSpecify STRING as a prefix at the beginning of the title that appears in the HTML header (but not in the title as it appears at the beginning of the HTML body). Implies --standalone.\n\n-c URL, --css=URL\n\nLink to a CSS style sheet. This option can be used repeatedly to include multiple files. They will be included in the order specified. This option only affects HTML (including HTML slide shows) and EPUB output. It should be used together with -s/--standalone, because the link to the stylesheet goes in the document header.\n\nA stylesheet is required for generating EPUB. If none is provided using this option (or the css or stylesheet metadata fields), pandoc will look for a file epub.css in the user data directory (see --data-dir). If it is not found there, sensible defaults will be used.\n\n--reference-doc=FILE|URL\n\nUse the specified file as a style reference in producing a docx or ODT file.\n\nDocx\n\nFor best results, the reference docx should be a modified version of a docx file produced using pandoc. The contents of the reference docx are ignored, but its stylesheets and document properties (including margins, page size, header, and footer) are used in the new docx. If no reference docx is specified on the command line, pandoc will look for a file reference.docx in the user data directory (see --data-dir). If this is not found either, sensible defaults will be used.\n\nTo produce a custom reference.docx, first get a copy of the default reference.docx: pandoc -o custom-reference.docx --print-default-data-file reference.docx. Then open custom-reference.docx in Word, modify the styles as you wish, and save the file. For best results, do not make changes to this file other than modifying the styles used by pandoc:\n\nParagraph styles:\n\nNormal\n\nBody Text\n\nFirst Paragraph\n\nCompact\n\nTitle\n\nSubtitle\n\nAuthor\n\nDate\n\nAbstract\n\nAbstractTitle\n\nBibliography\n\nHeading 1\n\nHeading 2\n\nHeading 3\n\nHeading 4\n\nHeading 5\n\nHeading 6\n\nHeading 7\n\nHeading 8\n\nHeading 9\n\nBlock Text [for block quotes]\n\nFootnote Block Text [for block quotes in footnotes]\n\nSource Code\n\nFootnote Text\n\nDefinition Term\n\nDefinition\n\nCaption\n\nTable Caption\n\nImage Caption\n\nFigure\n\nCaptioned Figure\n\nTOC Heading\n\nCharacter styles:\n\nDefault Paragraph Font\n\nBody Text Char\n\nVerbatim Char\n\nFootnote Reference\n\nHyperlink\n\nSection Number\n\nTable style:\n\nTable\n\nODT\n\nFor best results, the reference ODT should be a modified version of an ODT produced using pandoc. The contents of the reference ODT are ignored, but its stylesheets are used in the new ODT. If no reference ODT is specified on the command line, pandoc will look for a file reference.odt in the user data directory (see --data-dir). If this is not found either, sensible defaults will be used.\n\nTo produce a custom reference.odt, first get a copy of the default reference.odt: pandoc -o custom-reference.odt --print-default-data-file reference.odt. Then open custom-reference.odt in LibreOffice, modify the styles as you wish, and save the file.\n\nPowerPoint\n\nTemplates included with Microsoft PowerPoint 2013 (either with .pptx or .potx extension) are known to work, as are most templates derived from these.\n\nThe specific requirement is that the template should contain layouts with the following names (as seen within PowerPoint):\n\nTitle Slide\n\nTitle and Content\n\nSection Header\n\nTwo Content\n\nComparison\n\nContent with Caption\n\nBlank\n\nFor each name, the first layout found with that name will be used. If no layout is found with one of the names, pandoc will output a warning and use the layout with that name from the default reference doc instead. (How these layouts are used is described in PowerPoint layout choice.)\n\nAll templates included with a recent version of MS PowerPoint will fit these criteria. (You can click on Layout under the Home menu to check.)\n\nYou can also modify the default reference.pptx: first run pandoc -o custom-reference.pptx --print-default-data-file reference.pptx, and then modify custom-reference.pptx in MS PowerPoint (pandoc will use the layouts with the names listed above).\n\n--split-level=NUMBER\n\nSpecify the heading level at which to split an EPUB or chunked HTML document into separate files. The default is to split into chapters at level-1 headings. In the case of EPUB, this option only affects the internal composition of the EPUB, not the way chapters and sections are displayed to users. Some readers may be slow if the chapter files are too large, so for large documents with few level-1 headings, one might want to use a chapter level of 2 or 3. For chunked HTML, this option determines how much content goes in each “chunk.”\n\n--chunk-template=PATHTEMPLATE\n\nSpecify a template for the filenames in a chunkedhtml document. In the template, %n will be replaced by the chunk number (padded with leading 0s to 3 digits), %s with the section number of the chunk, %h with the heading text (with formatting removed), %i with the section identifier. For example, %section-%s-%i.html might be resolved to section-1.1-introduction.html. The characters / and \\ are not allowed in chunk templates and will be ignored. The default is %s-%i.html.\n\n--epub-chapter-level=NUMBER\n\nDeprecated synonym for --split-level.\n\n--epub-cover-image=FILE\n\nUse the specified image as the EPUB cover. It is recommended that the image be less than 1000px in width and height. Note that in a Markdown source document you can also specify cover-image in a YAML metadata block (see EPUB Metadata, below).\n\n--epub-title-page=true|false\n\nDetermines whether a the title page is included in the EPUB (default is true).\n\n--epub-metadata=FILE\n\nLook in the specified XML file for metadata for the EPUB. The file should contain a series of Dublin Core elements. For example:\n\n<dc:rights>Creative Commons</dc:rights> <dc:language>es-AR</dc:language>\n\nBy default, pandoc will include the following metadata elements: <dc:title> (from the document title), <dc:creator> (from the document authors), <dc:date> (from the document date, which should be in ISO 8601 format), <dc:language> (from the lang variable, or, if is not set, the locale), and <dc:identifier id=\"BookId\"> (a randomly generated UUID). Any of these may be overridden by elements in the metadata file.\n\nNote: if the source document is Markdown, a YAML metadata block in the document can be used instead. See below under EPUB Metadata.\n\n--epub-embed-font=FILE\n\nEmbed the specified font in the EPUB. This option can be repeated to embed multiple fonts. Wildcards can also be used: for example, DejaVuSans-*.ttf. However, if you use wildcards on the command line, be sure to escape them or put the whole filename in single quotes, to prevent them from being interpreted by the shell. To use the embedded fonts, you will need to add declarations like the following to your CSS (see --css):\n\n@font-face { font-family: DejaVuSans; font-style: normal; font-weight: normal; src:url(\"../fonts/DejaVuSans-Regular.ttf\"); } @font-face { font-family: DejaVuSans; font-style: normal; font-weight: bold; src:url(\"../fonts/DejaVuSans-Bold.ttf\"); } @font-face { font-family: DejaVuSans; font-style: italic; font-weight: normal; src:url(\"../fonts/DejaVuSans-Oblique.ttf\"); } @font-face { font-family: DejaVuSans; font-style: italic; font-weight: bold; src:url(\"../fonts/DejaVuSans-BoldOblique.ttf\"); } body { font-family: \"DejaVuSans\"; }\n\n--epub-subdirectory=DIRNAME\n\nSpecify the subdirectory in the OCF container that is to hold the EPUB-specific contents. The default is EPUB. To put the EPUB contents in the top level, use an empty string.\n\n--ipynb-output=all|none|best\n\nDetermines how ipynb output cells are treated. all means that all of the data formats included in the original are preserved. none means that the contents of data cells are omitted. best causes pandoc to try to pick the richest data block in each output cell that is compatible with the output format. The default is best.\n\n--pdf-engine=PROGRAM\n\nUse the specified engine when producing PDF output. Valid values are pdflatex, lualatex, xelatex, latexmk, tectonic, wkhtmltopdf, weasyprint, pagedjs-cli, prince, context, pdfroff, and typst. If the engine is not in your PATH, the full path of the engine may be specified here. If this option is not specified, pandoc uses the following defaults depending on the output format specified using -t/--to:\n\n-t latex or none: pdflatex (other options: xelatex, lualatex, tectonic, latexmk)\n\n-t context: context\n\n-t html: wkhtmltopdf (other options: prince, weasyprint, pagedjs-cli; see print-css.rocks for a good introduction to PDF generation from HTML/CSS)\n\n-t ms: pdfroff\n\n-t typst: typst\n\n--pdf-engine-opt=STRING\n\nUse the given string as a command-line argument to the pdf-engine. For example, to use a persistent directory foo for latexmk’s auxiliary files, use --pdf-engine-opt=-outdir=foo. Note that no check for duplicate options is done.\n\nCitation rendering ±\n\n-C, --citeproc\n\nProcess the citations in the file, replacing them with rendered citations and adding a bibliography. Citation processing will not take place unless bibliographic data is supplied, either through an external file specified using the --bibliography option or the bibliography field in metadata, or via a references section in metadata containing a list of citations in CSL YAML format with Markdown formatting. The style is controlled by a CSL stylesheet specified using the --csl option or the csl field in metadata. (If no stylesheet is specified, the chicago-author-date style will be used by default.) The citation processing transformation may be applied before or after filters or Lua filters (see --filter, --lua-filter): these transformations are applied in the order they appear on the command line. For more information, see the section on Citations.\n\n--bibliography=FILE\n\nSet the bibliography field in the document’s metadata to FILE, overriding any value set in the metadata. If you supply this argument multiple times, each FILE will be added to bibliography. If FILE is a URL, it will be fetched via HTTP. If FILE is not found relative to the working directory, it will be sought in the resource path (see --resource-path).\n\n--csl=FILE\n\nSet the csl field in the document’s metadata to FILE, overriding any value set in the metadata. (This is equivalent to --metadata csl=FILE.) If FILE is a URL, it will be fetched via HTTP. If FILE is not found relative to the working directory, it will be sought in the resource path (see --resource-path) and finally in the csl subdirectory of the pandoc user data directory.\n\n--citation-abbreviations=FILE\n\nSet the citation-abbreviations field in the document’s metadata to FILE, overriding any value set in the metadata. (This is equivalent to --metadata citation-abbreviations=FILE.) If FILE is a URL, it will be fetched via HTTP. If FILE is not found relative to the working directory, it will be sought in the resource path (see --resource-path) and finally in the csl subdirectory of the pandoc user data directory.\n\n--natbib\n\nUse natbib for citations in LaTeX output. This option is not for use with the --citeproc option or with PDF output. It is intended for use in producing a LaTeX file that can be processed with bibtex.\n\n--biblatex\n\nUse biblatex for citations in LaTeX output. This option is not for use with the --citeproc option or with PDF output. It is intended for use in producing a LaTeX file that can be processed with bibtex or biber.\n\nMath rendering in HTML ±\n\nThe default is to render TeX math as far as possible using Unicode characters. Formulas are put inside a span with class=\"math\", so that they may be styled differently from the surrounding text if needed. However, this gives acceptable results only for basic math, usually you will want to use --mathjax or another of the following options.\n\n--mathjax[=URL]\n\nUse MathJax to display embedded TeX math in HTML output. TeX math will be put between \\(...\\) (for inline math) or \\[...\\] (for display math) and wrapped in <span> tags with class math. Then the MathJax JavaScript will render it. The URL should point to the MathJax.js load script. If a URL is not provided, a link to the Cloudflare CDN will be inserted.\n\n--mathml\n\nConvert TeX math to MathML (in epub3, docbook4, docbook5, jats, html4 and html5). This is the default in odt output. MathML is supported natively by the main web browsers and select e-book readers.\n\n--webtex[=URL]\n\nConvert TeX formulas to <img> tags that link to an external script that converts formulas to images. The formula will be URL-encoded and concatenated with the URL provided. For SVG images you can for example use --webtex https://latex.codecogs.com/svg.latex?. If no URL is specified, the CodeCogs URL generating PNGs will be used (https://latex.codecogs.com/png.latex?). Note: the --webtex option will affect Markdown output as well as HTML, which is useful if you’re targeting a version of Markdown without native math support.\n\n--katex[=URL]\n\nUse KaTeX to display embedded TeX math in HTML output. The URL is the base URL for the KaTeX library. That directory should contain a katex.min.js and a katex.min.css file. If a URL is not provided, a link to the KaTeX CDN will be inserted.\n\n--gladtex\n\nEnclose TeX math in <eq> tags in HTML output. The resulting HTML can then be processed by GladTeX to produce SVG images of the typeset formulas and an HTML file with these images embedded.\n\npandoc -s --gladtex input.md -o myfile.htex gladtex -d image_dir myfile.htex # produces myfile.html and images in image_dir\n\nOptions for wrapper scripts ±\n\n--dump-args[=true|false]\n\nPrint information about command-line arguments to stdout, then exit. This option is intended primarily for use in wrapper scripts. The first line of output contains the name of the output file specified with the -o option, or - (for stdout) if no output file was specified. The remaining lines contain the command-line arguments, one per line, in the order they appear. These do not include regular pandoc options and their arguments, but do include any options appearing after a -- separator at the end of the line.\n\n--ignore-args[=true|false]\n\nIgnore command-line arguments (for use in wrapper scripts). Regular pandoc options are not ignored. Thus, for example,\n\npandoc --ignore-args -o foo.html -s foo.txt -- -e latin1\n\nis equivalent to\n\npandoc -o foo.html -s\n\nExit codes ±\n\nIf pandoc completes successfully, it will return exit code 0. Nonzero exit codes have the following meanings:\n\nCode Error 1 PandocIOError 3 PandocFailOnWarningError 4 PandocAppError 5 PandocTemplateError 6 PandocOptionError 21 PandocUnknownReaderError 22 PandocUnknownWriterError 23 PandocUnsupportedExtensionError 24 PandocCiteprocError 25 PandocBibliographyError 31 PandocEpubSubdirectoryError 43 PandocPDFError 44 PandocXMLError 47 PandocPDFProgramNotFoundError 61 PandocHttpError 62 PandocShouldNeverHappenError 63 PandocSomeError 64 PandocParseError 66 PandocMakePDFError 67 PandocSyntaxMapError 83 PandocFilterError 84 PandocLuaError 89 PandocNoScriptingEngine 91 PandocMacroLoop 92 PandocUTF8DecodingError 93 PandocIpynbDecodingError 94 PandocUnsupportedCharsetError 97 PandocCouldNotFindDataFileError 98 PandocCouldNotFindMetadataFileError 99 PandocResourceNotFound\n\nDefaults files ±\n\nThe --defaults option may be used to specify a package of options, in the form of a YAML file.\n\nFields that are omitted will just have their regular default values. So a defaults file can be as simple as one line:\n\nverbosity: INFO\n\nIn fields that expect a file path (or list of file paths), the following syntax may be used to interpolate environment variables:\n\ncsl: ${HOME}/mycsldir/special.csl\n\n${USERDATA} may also be used; this will always resolve to the user data directory that is current when the defaults file is parsed, regardless of the setting of the environment variable USERDATA.\n\n${.} will resolve to the directory containing the defaults file itself. This allows you to refer to resources contained in that directory:\n\nepub-cover-image: ${.}/cover.jpg epub-metadata: ${.}/meta.xml resource-path: - . # the working directory from which pandoc is run - ${.}/images # the images subdirectory of the directory # containing this defaults file\n\nThis environment variable interpolation syntax only works in fields that expect file paths.\n\nDefaults files can be placed in the defaults subdirectory of the user data directory and used from any directory. For example, one could create a file specifying defaults for writing letters, save it as letter.yaml in the defaults subdirectory of the user data directory, and then invoke these defaults from any directory using pandoc --defaults letter or pandoc -dletter.\n\nWhen multiple defaults are used, their contents will be combined.\n\nNote that, where command-line arguments may be repeated (--metadata-file, --css, --include-in-header, --include-before-body, --include-after-body, --variable, --metadata, --syntax-definition), the values specified on the command line will combine with values specified in the defaults file, rather than replacing them.\n\nThe following tables show the mapping between the command line and defaults file entries.\n\ncommand line defaults file\n\nfoo.md\n\ninput-file: foo.md\n\nfoo.md bar.md\n\nThe value of input-files may be left empty to indicate input from stdin, and it can be an empty sequence [] for no input.\n\nGeneral options ±\n\ncommand line defaults file\n\n--from markdown+emoji\n\nfrom: markdown+emoji\n\nreader: markdown+emoji\n\n--to markdown+hard_line_breaks\n\nto: markdown+hard_line_breaks\n\nwriter: markdown+hard_line_breaks\n\n--output foo.pdf\n\noutput-file: foo.pdf\n\n--output -\n\n--data-dir dir\n\ndata-dir: dir\n\n--defaults file\n\n--verbose\n\nverbosity: INFO\n\n--quiet\n\nverbosity: ERROR\n\n--fail-if-warnings\n\nfail-if-warnings:true\n\n--sandbox\n\nsandbox:true\n\n--log=FILE\n\nlog-file: FILE\n\nOptions specified in a defaults file itself always have priority over those in another file included with a defaults: entry.\n\nverbosity can have the values ERROR, WARNING, or INFO.\n\nReader options ±\n\ncommand line defaults file\n\n--shift-heading-level-by -1\n\nshift-heading-level-by:-1\n\n--indented-code-classes python\n\n--default-image-extension \".jpg\"\n\ndefault-image-extension:'.jpg'\n\n--file-scope\n\nfile-scope:true\n\n--citeproc \\ --lua-filter count-words.lua \\ --filter special.lua\n\n--metadata key=value \\ --metadata key2\n\n--metadata-file meta.yaml\n\nmetadata-files: - meta.yaml\n\nmetadata-file: meta.yaml\n\n--preserve-tabs\n\npreserve-tabs:true\n\n--tab-stop 8\n\ntab-stop:8\n\n--track-changes accept\n\ntrack-changes: accept\n\n--extract-media dir\n\nextract-media: dir\n\n--abbreviations abbrevs.txt\n\nabbreviations: abbrevs.txt\n\n--trace\n\ntrace:true\n\nMetadata values specified in a defaults file are parsed as literal string text, not Markdown.\n\nFilters will be assumed to be Lua filters if they have the .lua extension, and JSON filters otherwise. But the filter type can also be specified explicitly, as shown. Filters are run in the order specified. To include the built-in citeproc filter, use either citeproc or {type: citeproc}.\n\nGeneral writer options ±\n\ncommand line defaults file\n\n--standalone\n\nstandalone:true\n\n--template letter\n\ntemplate: letter\n\n--variable key=val \\ --variable key2\n\n--eol nl\n\neol: nl\n\n--dpi 300\n\ndpi:300\n\n--wrap 60\n\nwrap:60\n\n--columns 72\n\ncolumns:72\n\n--table-of-contents\n\ntable-of-contents:true\n\n--toc\n\ntoc:true\n\n--toc-depth 3\n\ntoc-depth:3\n\n--strip-comments\n\nstrip-comments:true\n\n--no-highlight\n\nhighlight-style:null\n\n--highlight-style kate\n\nhighlight-style: kate\n\n--syntax-definition mylang.xml\n\nsyntax-definitions: - mylang.xml\n\nsyntax-definition: mylang.xml\n\n--include-in-header inc.tex\n\ninclude-in-header: - inc.tex\n\n--include-before-body inc.tex\n\ninclude-before-body: - inc.tex\n\n--include-after-body inc.tex\n\ninclude-after-body: - inc.tex\n\n--resource-path .:foo\n\nresource-path:['.','foo']\n\n--request-header foo:bar\n\nrequest-headers: -[\"User-Agent\",\"Mozilla/5.0\"]\n\n--no-check-certificate\n\nno-check-certificate:true\n\nOptions affecting specific writers ±\n\ncommand line defaults file\n\n--self-contained\n\nself-contained:true\n\n--html-q-tags\n\nhtml-q-tags:true\n\n--ascii\n\nascii:true\n\n--reference-links\n\nreference-links:true\n\n--reference-location block\n\nreference-location: block\n\n--markdown-headings atx\n\nmarkdown-headings: atx\n\n--list-tables\n\nlist-tables:true\n\n--top-level-division chapter\n\ntop-level-division: chapter\n\n--number-sections\n\nnumber-sections:true\n\n--number-offset=1,4\n\nnumber-offset: \\[1,4\\]\n\n--listings\n\nlistings:true\n\n--incremental\n\nincremental:true\n\n--slide-level 2\n\nslide-level:2\n\n--section-divs\n\nsection-divs:true\n\n--email-obfuscation references\n\nemail-obfuscation: references\n\n--id-prefix ch1\n\nidentifier-prefix: ch1\n\n--title-prefix MySite\n\ntitle-prefix: MySite\n\n--css styles/screen.css \\ --css styles/special.css\n\ncss: - styles/screen.css - styles/special.css\n\n--reference-doc my.docx\n\nreference-doc: my.docx\n\n--epub-cover-image cover.jpg\n\nepub-cover-image: cover.jpg\n\n--epub-title-page=false\n\nepub-title-page:false\n\n--epub-metadata meta.xml\n\nepub-metadata: meta.xml\n\n--epub-embed-font special.otf \\ --epub-embed-font headline.otf\n\n--split-level 2\n\nsplit-level:2\n\n--chunk-template=\"%i.html\"\n\nchunk-template:\"%i.html\"\n\n--epub-subdirectory=\"\"\n\n--ipynb-output best\n\nipynb-output: best\n\n--pdf-engine xelatex\n\npdf-engine: xelatex\n\n--pdf-engine-opt=--shell-escape\n\npdf-engine-opt:'-shell-escape'\n\nCitation rendering ±\n\ncommand line defaults file\n\n--citeproc\n\nciteproc:true\n\n--bibliography logic.bib\n\nbibliography: logic.bib\n\n--csl ieee.csl\n\ncsl: ieee.csl\n\n--citation-abbreviations ab.json\n\ncitation-abbreviations: ab.json\n\n--natbib\n\ncite-method: natbib\n\n--biblatex\n\ncite-method: biblatex\n\ncite-method can be citeproc, natbib, or biblatex. This only affects LaTeX output. If you want to use citeproc to format citations, you should also set ‘citeproc: true’.\n\nIf you need control over when the citeproc processing is done relative to other filters, you should instead use citeproc in the list of filters (see Reader options).\n\nMath rendering in HTML ±\n\ncommand line defaults file\n\n--mathjax\n\nhtml-math-method: method: mathjax\n\n--mathml\n\nhtml-math-method: method: mathml\n\n--webtex\n\nhtml-math-method: method: webtex\n\n--katex\n\nhtml-math-method: method: katex\n\n--gladtex\n\nhtml-math-method: method: gladtex\n\nIn addition to the values listed above, method can have the value plain.\n\nIf the command line option accepts a URL argument, an url: field can be added to html-math-method:.\n\nOptions for wrapper scripts ±\n\ncommand line defaults file\n\n--dump-args\n\ndump-args:true\n\n--ignore-args\n\nignore-args:true\n\nTemplates ±\n\nWhen the -s/--standalone option is used, pandoc uses a template to add header and footer material that is needed for a self-standing document. To see the default template that is used, just type\n\npandoc -D *FORMAT*\n\nwhere FORMAT is the name of the output format. A custom template can be specified using the --template option. You can also override the system default templates for a given output format FORMAT by putting a file templates/default.*FORMAT* in the user data directory (see --data-dir, above). Exceptions:\n\nFor odt output, customize the default.opendocument template.\n\nFor pdf output, customize the default.latex template (or the default.context template, if you use -t context, or the default.ms template, if you use -t ms, or the default.html template, if you use -t html).\n\ndocx and pptx have no template (however, you can use --reference-doc to customize the output).\n\nTemplates contain variables, which allow for the inclusion of arbitrary information at any point in the file. They may be set at the command line using the -V/--variable option. If a variable is not set, pandoc will look for the key in the document’s metadata, which can be set using either YAML metadata blocks or with the -M/--metadata option. In addition, some variables are given default values by pandoc. See Variables below for a list of variables used in pandoc’s default templates.\n\nIf you use custom templates, you may need to revise them as pandoc changes. We recommend tracking the changes in the default templates, and modifying your custom templates accordingly. An easy way to do this is to fork the pandoc-templates repository and merge in changes after each pandoc release.\n\nTemplate syntax ±\n\nDelimiters ±\n\nTo mark variables and control structures in the template, either $…$ or ${…} may be used as delimiters. The styles may also be mixed in the same template, but the opening and closing delimiter must match in each case. The opening delimiter may be followed by one or more spaces or tabs, which will be ignored. The closing delimiter may be preceded by one or more spaces or tabs, which will be ignored.\n\nTo include a literal $ in the document, use $$.\n\nInterpolated variables ±\n\nA slot for an interpolated variable is a variable name surrounded by matched delimiters. Variable names must begin with a letter and can contain letters, numbers, _, -, and .. The keywords it, if, else, endif, for, sep, and endfor may not be used as variable names. Examples:\n\n$foo$ $foo.bar.baz$ $foo_bar.baz-bim$ $ foo $ ${foo} ${foo.bar.baz} ${foo_bar.baz-bim} ${ foo }\n\nVariable names with periods are used to get at structured variable values. So, for example, employee.salary will return the value of the salary field of the object that is the value of the employee field.\n\nIf the value of the variable is a simple value, it will be rendered verbatim. (Note that no escaping is done; the assumption is that the calling program will escape the strings appropriately for the output format.)\n\nIf the value is a list, the values will be concatenated.\n\nIf the value is a map, the string true will be rendered.\n\nEvery other value will be rendered as the empty string.\n\nConditionals ±\n\nA conditional begins with if(variable) (enclosed in matched delimiters) and ends with endif (enclosed in matched delimiters). It may optionally contain an else (enclosed in matched delimiters). The if section is used if variable has a true value, otherwise the else section is used (if present). The following values count as true:\n\nany map\n\nany array containing at least one true value\n\nany nonempty string\n\nboolean True\n\nNote that in YAML metadata (and metadata specified on the command line using -M/--metadata), unquoted true and false will be interpreted as Boolean values. But a variable specified on the command line using -V/--variable will always be given a string value. Hence a conditional if(foo) will be triggered if you use -V foo=false, but not if you use -M foo=false.\n\nExamples:\n\n$if(foo)$bar$endif$ $if(foo)$ $foo$ $endif$ $if(foo)$ part one $else$ part two $endif$ ${if(foo)}bar${endif} ${if(foo)} ${foo} ${endif} ${if(foo)} ${ foo.bar } ${else} no foo! ${endif}\n\nThe keyword elseif may be used to simplify complex nested conditionals:\n\n$if(foo)$ XXX $elseif(bar)$ YYY $else$ ZZZ $endif$\n\nFor loops ±\n\nA for loop begins with for(variable) (enclosed in matched delimiters) and ends with endfor (enclosed in matched delimiters).\n\nIf variable is an array, the material inside the loop will be evaluated repeatedly, with variable being set to each value of the array in turn, and concatenated.\n\nIf variable is a map, the material inside will be set to the map.\n\nIf the value of the associated variable is not an array or a map, a single iteration will be performed on its value.\n\nExamples:\n\n$for(foo)$$foo$$sep$, $endfor$ $for(foo)$ - $foo.last$, $foo.first$ $endfor$ ${ for(foo.bar) } - ${ foo.bar.last }, ${ foo.bar.first } ${ endfor } $for(mymap)$ $it.name$: $it.office$ $endfor$\n\nYou may optionally specify a separator between consecutive values using sep (enclosed in matched delimiters). The material between sep and the endfor is the separator.\n\n${ for(foo) }${ foo }${ sep }, ${ endfor }\n\nInstead of using variable inside the loop, the special anaphoric keyword it may be used.\n\n${ for(foo.bar) } - ${ it.last }, ${ it.first } ${ endfor }\n\nPartials ±\n\nPartials (subtemplates stored in different files) may be included by using the name of the partial, followed by (), for example:\n\n${ styles() }\n\nPartials will be sought in the directory containing the main template. The file name will be assumed to have the same extension as the main template if it lacks an extension. When calling the partial, the full name including file extension can also be used:\n\n${ styles.html() }\n\n(If a partial is not found in the directory of the template and the template path is given as a relative path, it will also be sought in the templates subdirectory of the user data directory.)\n\nPartials may optionally be applied to variables using a colon:\n\n${ date:fancy() } ${ articles:bibentry() }\n\nIf articles is an array, this will iterate over its values, applying the partial bibentry() to each one. So the second example above is equivalent to\n\n${ for(articles) } ${ it:bibentry() } ${ endfor }\n\nNote that the anaphoric keyword it must be used when iterating over partials. In the above examples, the bibentry partial should contain it.title (and so on) instead of articles.title.\n\nFinal newlines are omitted from included partials.\n\nPartials may include other partials.\n\nA separator between values of an array may be specified in square brackets, immediately after the variable name or partial:\n\n${months[, ]}$ ${articles:bibentry()[; ]$\n\nThe separator in this case is literal and (unlike with sep in an explicit for loop) cannot contain interpolated variables or other template directives.\n\nNesting ±\n\nTo ensure that content is “nested,” that is, subsequent lines indented, use the ^ directive:\n\n$item.number$ $^$$item.description$ ($item.price$)\n\nIn this example, if item.description has multiple lines, they will all be indented to line up with the first line:\n\n00123 A fine bottle of 18-year old Oban whiskey. ($148)\n\nTo nest multiple lines to the same level, align them with the ^ directive in the template. For example:\n\n$item.number$ $^$$item.description$ ($item.price$) (Available til $item.sellby$.)\n\nwill produce\n\n00123 A fine bottle of 18-year old Oban whiskey. ($148) (Available til March 30, 2020.)\n\nIf a variable occurs by itself on a line, preceded by whitespace and not followed by further text or directives on the same line, and the variable’s value contains multiple lines, it will be nested automatically.\n\nBreakable spaces ±\n\nNormally, spaces in the template itself (as opposed to values of the interpolated variables) are not breakable, but they can be made breakable in part of the template by using the ~ keyword (ended with another ~).\n\n$~$This long line may break if the document is rendered with a short line length.$~$\n\nPipes ±\n\nA pipe transforms the value of a variable or partial. Pipes are specified using a slash (/) between the variable name (or partial) and the pipe name. Example:\n\n$for(name)$ $name/uppercase$ $endfor$ $for(metadata/pairs)$ - $it.key$: $it.value$ $endfor$ $employee:name()/uppercase$\n\nPipes may be chained:\n\n$for(employees/pairs)$ $it.key/alpha/uppercase$. $it.name$ $endfor$\n\nSome pipes take parameters:\n\n|----------------------|------------| $for(employee)$ $it.name.first/uppercase/left 20 \"| \"$$it.name.salary/right 10 \" | \" \" |\"$ $endfor$ |----------------------|------------|\n\nCurrently the following pipes are predefined:\n\npairs: Converts a map or array to an array of maps, each with key and value fields. If the original value was an array, the key will be the array index, starting with 1.\n\nuppercase: Converts text to uppercase.\n\nlowercase: Converts text to lowercase.\n\nlength: Returns the length of the value: number of characters for a textual value, number of elements for a map or array.\n\nreverse: Reverses a textual value or array, and has no effect on other values.\n\nfirst: Returns the first value of an array, if applied to a non-empty array; otherwise returns the original value.\n\nlast: Returns the last value of an array, if applied to a non-empty array; otherwise returns the original value.\n\nrest: Returns all but the first value of an array, if applied to a non-empty array; otherwise returns the original value.\n\nallbutlast: Returns all but the last value of an array, if applied to a non-empty array; otherwise returns the original value.\n\nchomp: Removes trailing newlines (and breakable space).\n\nnowrap: Disables line wrapping on breakable spaces.\n\nalpha: Converts textual values that can be read as an integer into lowercase alphabetic characters a..z (mod 26). This can be used to get lettered enumeration from array indices. To get uppercase letters, chain with uppercase.\n\nroman: Converts textual values that can be read as an integer into lowercase roman numerals. This can be used to get lettered enumeration from array indices. To get uppercase roman, chain with uppercase.\n\nleft n \"leftborder\" \"rightborder\": Renders a textual value in a block of width n, aligned to the left, with an optional left and right border. Has no effect on other values. This can be used to align material in tables. Widths are positive integers indicating the number of characters. Borders are strings inside double quotes; literal \" and \\ characters must be backslash-escaped.\n\nright n \"leftborder\" \"rightborder\": Renders a textual value in a block of width n, aligned to the right, and has no effect on other values.\n\ncenter n \"leftborder\" \"rightborder\": Renders a textual value in a block of width n, aligned to the center, and has no effect on other values.\n\nVariables ±\n\nMetadata variables ±\n\ntitle, author, date\n\nallow identification of basic aspects of the document. Included in PDF metadata through LaTeX and ConTeXt. These can be set through a pandoc title block, which allows for multiple authors, or through a YAML metadata block:\n\n--- author: - Aristotle - Peter Abelard ...\n\nNote that if you just want to set PDF or HTML metadata, without including a title block in the document itself, you can set the title-meta, author-meta, and date-meta variables. (By default these are set automatically, based on title, author, and date.) The page title in HTML is set by pagetitle, which is equal to title by default.\n\nsubtitle\n\ndocument subtitle, included in HTML, EPUB, LaTeX, ConTeXt, and docx documents\n\nabstract\n\ndocument summary, included in HTML, LaTeX, ConTeXt, AsciiDoc, and docx documents\n\nabstract-title\n\ntitle of abstract, currently used only in HTML, EPUB, and docx. This will be set automatically to a localized value, depending on lang, but can be manually overridden.\n\nkeywords\n\nlist of keywords to be included in HTML, PDF, ODT, pptx, docx and AsciiDoc metadata; repeat as for author, above\n\nsubject\n\ndocument subject, included in ODT, PDF, docx, EPUB, and pptx metadata\n\ndescription\n\ndocument description, included in ODT, docx and pptx metadata. Some applications show this as Comments metadata.\n\ncategory\n\ndocument category, included in docx and pptx metadata\n\nAdditionally, any root-level string metadata, not included in ODT, docx or pptx metadata is added as a custom property. The following YAML metadata block for instance:\n\n--- title: 'This is the title' subtitle: \"This is the subtitle\" author: - Author One - Author Two description: | This is a long description. It consists of two paragraphs ...\n\nwill include title, author and description as standard document properties and subtitle as a custom property when converting to docx, ODT or pptx.\n\nLanguage variables ±\n\nlang\n\nidentifies the main language of the document using IETF language tags (following the BCP 47 standard), such as en or en-GB. The Language subtag lookup tool can look up or verify these tags. This affects most formats, and controls hyphenation in PDF output when using LaTeX (through babel and polyglossia) or ConTeXt.\n\nUse native pandoc Divs and Spans with the lang attribute to switch the language:\n\n--- lang: en-GB ... Text in the main document language (British English). ::: {lang=fr-CA} > Cette citation est écrite en français canadien. ::: More text in English. ['Zitat auf Deutsch.']{lang=de}\n\ndir\n\nthe base script direction, either rtl (right-to-left) or ltr (left-to-right).\n\nFor bidirectional documents, native pandoc spans and divs with the dir attribute (value rtl or ltr) can be used to override the base direction in some output formats. This may not always be necessary if the final renderer (e.g. the browser, when generating HTML) supports the Unicode Bidirectional Algorithm.\n\nWhen using LaTeX for bidirectional documents, only the xelatex engine is fully supported (use --pdf-engine=xelatex).\n\nVariables for HTML ±\n\ndocument-css\n\nEnables inclusion of most of the CSS in the styles.html partial (have a look with pandoc --print-default-data-file=templates/styles.html). Unless you use --css, this variable is set to true by default. You can disable it with e.g. pandoc -M document-css=false.\n\nmainfont\n\nsets the CSS font-family property on the html element.\n\nfontsize\n\nsets the base CSS font-size, which you’d usually set to e.g. 20px, but it also accepts pt (12pt = 16px in most browsers).\n\nfontcolor\n\nsets the CSS color property on the html element.\n\nlinkcolor\n\nsets the CSS color property on all links.\n\nmonofont\n\nsets the CSS font-family property on code elements.\n\nmonobackgroundcolor\n\nsets the CSS background-color property on code elements and adds extra padding.\n\nlinestretch\n\nsets the CSS line-height property on the html element, which is preferred to be unitless.\n\nmaxwidth\n\nsets the CSS max-width property (default is 32em).\n\nbackgroundcolor\n\nsets the CSS background-color property on the html element.\n\nmargin-left, margin-right, margin-top, margin-bottom\n\nsets the corresponding CSS padding properties on the body element.\n\nTo override or extend some CSS for just one document, include for example:\n\n--- header-includes: | <style> blockquote { font-style: italic; } tr.even { background-color: #f0f0f0; } td, th { padding: 0.5em 2em 0.5em 0.5em; } tbody { border-bottom: none; } </style> ---\n\nVariables for HTML math ±\n\nclassoption\n\nwhen using --katex, you can render display math equations flush left using YAML metadata or with -M classoption=fleqn.\n\nVariables for HTML slides ±\n\nThese affect HTML output when producing slide shows with pandoc.\n\ninstitute\n\nauthor affiliations: can be a list when there are multiple authors\n\nrevealjs-url\n\nbase URL for reveal.js documents (defaults to https://unpkg.com/reveal.js@^4/)\n\ns5-url\n\nbase URL for S5 documents (defaults to s5/default)\n\nslidy-url\n\nbase URL for Slidy documents (defaults to https://www.w3.org/Talks/Tools/Slidy2)\n\nslideous-url\n\nbase URL for Slideous documents (defaults to slideous)\n\ntitle-slide-attributes\n\nadditional attributes for the title slide of reveal.js slide shows. See background in reveal.js, beamer, and pptx for an example.\n\nAll reveal.js configuration options are available as variables. To turn off boolean flags that default to true in reveal.js, use 0.\n\nVariables for Beamer slides ±\n\nThese variables change the appearance of PDF slides using beamer.\n\naspectratio\n\nslide aspect ratio (43 for 4:3 [default], 169 for 16:9, 1610 for 16:10, 149 for 14:9, 141 for 1.41:1, 54 for 5:4, 32 for 3:2)\n\nbeameroption\n\nadd extra beamer option with \\setbeameroption{}\n\ninstitute\n\nauthor affiliations: can be a list when there are multiple authors\n\nlogo\n\nlogo image for slides\n\nnavigation\n\ncontrols navigation symbols (default is empty for no navigation symbols; other valid values are frame, vertical, and horizontal)\n\nsection-titles\n\nenables “title pages” for new sections (default is true)\n\ntheme, colortheme, fonttheme, innertheme, outertheme\n\nbeamer themes\n\nthemeoptions\n\noptions for LaTeX beamer themes (a list).\n\ntitlegraphic\n\nimage for title slide\n\ntitlegraphicoptions\n\noptions for title slide image\n\nVariables for PowerPoint ±\n\nThese variables control the visual aspects of a slide show that are not easily controlled via templates.\n\nmonofont\n\nfont to use for code.\n\nVariables for LaTeX ±\n\nPandoc uses these variables when creating a PDF with a LaTeX engine.\n\nLayout ±\n\nblock-headings\n\nmake \\paragraph and \\subparagraph (fourth- and fifth-level headings, or fifth- and sixth-level with book classes) free-standing rather than run-in; requires further formatting to distinguish from \\subsubsection (third- or fourth-level headings). Instead of using this option, KOMA-Script can adjust headings more extensively:\n\n--- documentclass: scrartcl header-includes: | \\RedeclareSectionCommand[ beforeskip=-10pt plus -2pt minus -1pt, afterskip=1sp plus -1sp minus 1sp, font=\\normalfont\\itshape]{paragraph} \\RedeclareSectionCommand[ beforeskip=-10pt plus -2pt minus -1pt, afterskip=1sp plus -1sp minus 1sp, font=\\normalfont\\scshape, indent=0pt]{subparagraph} ...\n\nclassoption\n\noption for document class, e.g. oneside; repeat for multiple options:\n\n--- classoption: - twocolumn - landscape ...\n\ndocumentclass\n\ndocument class: usually one of the standard classes, article, book, and report; the KOMA-Script equivalents, scrartcl, scrbook, and scrreprt, which default to smaller margins; or memoir\n\ngeometry\n\noption for geometry package, e.g. margin=1in; repeat for multiple options:\n\n--- geometry: - top=30mm - left=20mm - heightrounded ...\n\nhyperrefoptions\n\noption for hyperref package, e.g. linktoc=all; repeat for multiple options:\n\n--- hyperrefoptions: - linktoc=all - pdfwindowui - pdfpagemode=FullScreen ...\n\nindent\n\nif true, pandoc will use document class settings for indentation (the default LaTeX template otherwise removes indentation and adds space between paragraphs)\n\nlinestretch\n\nadjusts line spacing using the setspace package, e.g. 1.25, 1.5\n\nmargin-left, margin-right, margin-top, margin-bottom\n\nsets margins if geometry is not used (otherwise geometry overrides these)\n\npagestyle\n\ncontrol \\pagestyle{}: the default article class supports plain (default), empty (no running heads or page numbers), and headings (section titles in running heads)\n\npapersize\n\npaper size, e.g. letter, a4\n\nsecnumdepth\n\nnumbering depth for sections (with --number-sections option or numbersections variable)\n\nbeamerarticle\n\nproduce an article from Beamer slides\n\nhandout\n\nproduce a handout version of Beamer slides (with overlays condensed into single slides)\n\nFonts ±\n\nfontenc\n\nallows font encoding to be specified through fontenc package (with pdflatex); default is T1 (see LaTeX font encodings guide)\n\nfontfamily\n\nfont package for use with pdflatex: TeX Live includes many options, documented in the LaTeX Font Catalogue. The default is Latin Modern.\n\nfontfamilyoptions\n\noptions for package used as fontfamily; repeat for multiple options. For example, to use the Libertine font with proportional lowercase (old-style) figures through the libertinus package:\n\n--- fontfamily: libertinus fontfamilyoptions: - osf - p ...\n\nfontsize\n\nfont size for body text. The standard classes allow 10pt, 11pt, and 12pt. To use another size, set documentclass to one of the KOMA-Script classes, such as scrartcl or scrbook.\n\nmainfont, sansfont, monofont, mathfont, CJKmainfont, CJKsansfont, CJKmonofont\n\nfont families for use with xelatex or lualatex: take the name of any system font, using the fontspec package. CJKmainfont uses the xecjk package.\n\nmainfontoptions, sansfontoptions, monofontoptions, mathfontoptions, CJKoptions\n\noptions to use with mainfont, sansfont, monofont, mathfont, CJKmainfont in xelatex and lualatex. Allow for any choices available through fontspec; repeat for multiple options. For example, to use the TeX Gyre version of Palatino with lowercase figures:\n\n--- mainfont: TeX Gyre Pagella mainfontoptions: - Numbers=Lowercase - Numbers=Proportional ...\n\nmainfontfallback, sansfontfallback, monofontfallback\n\nfonts to try if a glyph isn’t found in mainfont, sansfont, or monofont respectively. These are lists. The font name must be followed by a colon and optionally a set of options, for example:\n\n--- mainfontfallback: - \"FreeSans:\" - \"NotoColorEmoji:mode=harf\" ...\n\nFont fallbacks currently only work with lualatex.\n\nbabelfonts\n\na map of Babel language names (e.g. chinese) to the font to be used with the language:\n\n--- babelfonts: chinese-hant: \"Noto Serif CJK TC\" russian: \"Noto Serif\" ...\n\nmicrotypeoptions\n\noptions to pass to the microtype package\n\nFront matter ±\n\nlof, lot\n\ninclude list of figures, list of tables\n\nthanks\n\ncontents of acknowledgments footnote after document title\n\ntoc\n\ninclude table of contents (can also be set using --toc/--table-of-contents)\n\ntoc-depth\n\nlevel of section to include in table of contents\n\nBibLaTeX Bibliographies ±\n\nThese variables function when using BibLaTeX for citation rendering.\n\nbiblatexoptions\n\nlist of options for biblatex\n\nbiblio-style\n\nbibliography style, when used with --natbib and --biblatex\n\nbiblio-title\n\nbibliography title, when used with --natbib and --biblatex\n\nbibliography\n\nbibliography to use for resolving references\n\nnatbiboptions\n\nlist of options for natbib\n\nVariables for ConTeXt ±\n\nPandoc uses these variables when creating a PDF with ConTeXt.\n\nfontsize\n\nfont size for body text (e.g. 10pt, 12pt)\n\nheadertext, footertext\n\ntext to be placed in running header or footer (see ConTeXt Headers and Footers); repeat up to four times for different placement\n\nindenting\n\ncontrols indentation of paragraphs, e.g. yes,small,next (see ConTeXt Indentation); repeat for multiple options\n\ninterlinespace\n\nadjusts line spacing, e.g. 4ex (using setupinterlinespace); repeat for multiple options\n\nlayout\n\noptions for page margins and text arrangement (see ConTeXt Layout); repeat for multiple options\n\nlinkcolor, contrastcolor\n\ncolor for links outside and inside a page, e.g. red, blue (see ConTeXt Color)\n\nlinkstyle\n\ntypeface style for links, e.g. normal, bold, slanted, boldslanted, type, cap, small\n\nlof, lot\n\ninclude list of figures, list of tables\n\nmainfont, sansfont, monofont, mathfont\n\nfont families: take the name of any system font (see ConTeXt Font Switching)\n\nmainfontfallback, sansfontfallback, monofontfallback\n\nlist of fonts to try, in order, if a glyph is not found in the main font. Use \\definefallbackfamily-compatible font name syntax. Emoji fonts are unsupported.\n\nmargin-left, margin-right, margin-top, margin-bottom\n\nsets margins, if layout is not used (otherwise layout overrides these)\n\npagenumbering\n\npage number style and location (using setuppagenumbering); repeat for multiple options\n\npapersize\n\npaper size, e.g. letter, A4, landscape (see ConTeXt Paper Setup); repeat for multiple options\n\npdfa\n\nadds to the preamble the setup necessary to generate PDF/A of the type specified, e.g. 1a:2005, 2a. If no type is specified (i.e. the value is set to True, by e.g. --metadata=pdfa or pdfa: true in a YAML metadata block), 1b:2005 will be used as default, for reasons of backwards compatibility. Using --variable=pdfa without specified value is not supported. To successfully generate PDF/A the required ICC color profiles have to be available and the content and all included files (such as images) have to be standard-conforming. The ICC profiles and output intent may be specified using the variables pdfaiccprofile and pdfaintent. See also ConTeXt PDFA for more details.\n\npdfaiccprofile\n\nwhen used in conjunction with pdfa, specifies the ICC profile to use in the PDF, e.g. default.cmyk. If left unspecified, sRGB.icc is used as default. May be repeated to include multiple profiles. Note that the profiles have to be available on the system. They can be obtained from ConTeXt ICC Profiles.\n\npdfaintent\n\nwhen used in conjunction with pdfa, specifies the output intent for the colors, e.g. ISO coated v2 300\\letterpercent\\space (ECI) If left unspecified, sRGB IEC61966-2.1 is used as default.\n\ntoc\n\ninclude table of contents (can also be set using --toc/--table-of-contents)\n\nurlstyle\n\ntypeface style for links without link text, e.g. normal, bold, slanted, boldslanted, type, cap, small\n\nwhitespace\n\nspacing between paragraphs, e.g. none, small (using setupwhitespace)\n\nincludesource\n\ninclude all source documents as file attachments in the PDF file\n\nVariables for wkhtmltopdf ±\n\nPandoc uses these variables when creating a PDF with wkhtmltopdf. The --css option also affects the output.\n\nfooter-html, header-html\n\nadd information to the header and footer\n\nmargin-left, margin-right, margin-top, margin-bottom\n\nset the page margins\n\npapersize\n\nsets the PDF paper size\n\nVariables for man pages ±\n\nadjusting\n\nadjusts text to left (l), right (r), center (c), or both (b) margins\n\nfooter\n\nfooter in man pages\n\nheader\n\nheader in man pages\n\nsection\n\nsection number in man pages\n\nVariables for Texinfo ±\n\nversion\n\nversion of software (used in title and title page)\n\nfilename\n\nname of info file to be generated (defaults to a name based on the texi filename)\n\nVariables for Typst ±\n\nmargin\n\nA dictionary with the fields defined in the Typst documentation: x, y, top, bottom, left, right.\n\npapersize\n\nPaper size: a4, us-letter, etc.\n\nmainfont\n\nName of system font to use for the main font.\n\nfontsize\n\nFont size (e.g., 12pt).\n\nsection-numbering\n\nSchema to use for numbering sections, e.g. 1.A.1.\n\ncolumns\n\nNumber of columns for body text.\n\nVariables for ms ±\n\nfontfamily\n\nA (Avant Garde), B (Bookman), C (Helvetica), HN (Helvetica Narrow), P (Palatino), or T (Times New Roman). This setting does not affect source code, which is always displayed using monospace Courier. These built-in fonts are limited in their coverage of characters. Additional fonts may be installed using the script install-font.sh provided by Peter Schaffter and documented in detail on his web site.\n\nindent\n\nparagraph indent (e.g. 2m)\n\nlineheight\n\nline height (e.g. 12p)\n\npointsize\n\npoint size (e.g. 10p)\n\nVariables set automatically ±\n\nPandoc sets these variables automatically in response to options or document contents; users can also modify them. These vary depending on the output format, and include the following:\n\nbody\n\nbody of document\n\ndate-meta\n\nthe date variable converted to ISO 8601 YYYY-MM-DD, included in all HTML based formats (dzslides, epub, html, html4, html5, revealjs, s5, slideous, slidy). The recognized formats for date are: mm/dd/yyyy, mm/dd/yy, yyyy-mm-dd (ISO 8601), dd MM yyyy (e.g. either 02 Apr 2018 or 02 April 2018), MM dd, yyyy (e.g. Apr. 02, 2018 or April 02, 2018),yyyy[mm[dd]](e.g.20180402, 201804 or 2018).\n\nheader-includes\n\ncontents specified by -H/--include-in-header (may have multiple values)\n\ninclude-before\n\ncontents specified by -B/--include-before-body (may have multiple values)\n\ninclude-after\n\ncontents specified by -A/--include-after-body (may have multiple values)\n\nmeta-json\n\nJSON representation of all of the document’s metadata. Field values are transformed to the selected output format.\n\nnumbersections\n\nnon-null value if -N/--number-sections was specified\n\nsourcefile, outputfile\n\nsource and destination filenames, as given on the command line. sourcefile can also be a list if input comes from multiple files, or empty if input is from stdin. You can use the following snippet in your template to distinguish them:\n\n$if(sourcefile)$ $for(sourcefile)$ $sourcefile$ $endfor$ $else$ (stdin) $endif$\n\nSimilarly, outputfile can be - if output goes to the terminal.\n\nIf you need absolute paths, use e.g. $curdir$/$sourcefile$.\n\ncurdir\n\nworking directory from which pandoc is run.\n\npandoc-version\n\npandoc version.\n\ntoc\n\nnon-null value if --toc/--table-of-contents was specified\n\ntoc-title\n\ntitle of table of contents (works only with EPUB, HTML, revealjs, opendocument, odt, docx, pptx, beamer, LaTeX). Note that in docx and pptx a custom toc-title will be picked up from metadata, but cannot be set as a variable.\n\nExtensions ±\n\nThe behavior of some of the readers and writers can be adjusted by enabling or disabling various extensions.\n\nAn extension can be enabled by adding +EXTENSION to the format name and disabled by adding -EXTENSION. For example, --from markdown_strict+footnotes is strict Markdown with footnotes enabled, while --from markdown-footnotes-pipe_tables is pandoc’s Markdown without footnotes or pipe tables.\n\nThe Markdown reader and writer make by far the most use of extensions. Extensions only used by them are therefore covered in the section Pandoc’s Markdown below (see Markdown variants for commonmark and gfm). In the following, extensions that also work for other formats are covered.\n\nNote that Markdown extensions added to the ipynb format affect Markdown cells in Jupyter notebooks (as do command-line options like --markdown-headings).\n\nTypography ±\n\nExtension: smart ±\n\nInterpret straight quotes as curly quotes, --- as em-dashes, -- as en-dashes, and ... as ellipses. Nonbreaking spaces are inserted after certain abbreviations, such as “Mr.”\n\nThis extension can be enabled/disabled for the following formats:\n\ninput formats\n\nmarkdown, commonmark, latex, mediawiki, org, rst, twiki, html\n\noutput formats\n\nmarkdown, latex, context, rst\n\nenabled by default in\n\nmarkdown, latex, context (both input and output)\n\nNote: If you are writing Markdown, then the smart extension has the reverse effect: what would have been curly quotes comes out straight.\n\nIn LaTeX, smart means to use the standard TeX ligatures for quotation marks (`` and '' for double quotes, ` and ' for single quotes) and dashes (-- for en-dash and --- for em-dash). If smart is disabled, then in reading LaTeX pandoc will parse these characters literally. In writing LaTeX, enabling smart tells pandoc to use the ligatures when possible; if smart is disabled pandoc will use unicode quotation mark and dash characters.\n\nHeadings and sections ±\n\nExtension: auto_identifiers ±\n\nA heading without an explicitly specified identifier will be automatically assigned a unique identifier based on the heading text.\n\nThis extension can be enabled/disabled for the following formats:\n\ninput formats\n\nmarkdown, latex, rst, mediawiki, textile\n\noutput formats\n\nmarkdown, muse\n\nenabled by default in\n\nmarkdown, muse\n\nThe default algorithm used to derive the identifier from the heading text is:\n\nRemove all formatting, links, etc.\n\nRemove all footnotes.\n\nRemove all non-alphanumeric characters, except underscores, hyphens, and periods.\n\nReplace all spaces and newlines with hyphens.\n\nConvert all alphabetic characters to lowercase.\n\nRemove everything up to the first letter (identifiers may not begin with a number or punctuation mark).\n\nIf nothing is left after this, use the identifier section.\n\nThus, for example,\n\nHeading Identifier Heading identifiers in HTML heading-identifiers-in-html Maître d'hôtel maître-dhôtel *Dogs*?--in *my* house? dogs--in-my-house [HTML], [S5], or [RTF]? html-s5-or-rtf 3. Applications applications 33 section\n\nThese rules should, in most cases, allow one to determine the identifier from the heading text. The exception is when several headings have the same text; in this case, the first will get an identifier as described above; the second will get the same identifier with -1 appended; the third with -2; and so on.\n\n(However, a different algorithm is used if gfm_auto_identifiers is enabled; see below.)\n\nThese identifiers are used to provide link targets in the table of contents generated by the --toc|--table-of-contents option. They also make it easy to provide links from one section of a document to another. A link to this section, for example, might look like this:\n\nSee the section on [heading identifiers](#heading-identifiers-in-html-latex-and-context).\n\nNote, however, that this method of providing links to sections works only in HTML, LaTeX, and ConTeXt formats.\n\nIf the --section-divs option is specified, then each section will be wrapped in a section (or a div, if html4 was specified), and the identifier will be attached to the enclosing <section> (or <div>) tag rather than the heading itself. This allows entire sections to be manipulated using JavaScript or treated differently in CSS.\n\nExtension: ascii_identifiers ±\n\nCauses the identifiers produced by auto_identifiers to be pure ASCII. Accents are stripped off of accented Latin letters, and non-Latin letters are omitted.\n\nExtension: gfm_auto_identifiers ±\n\nChanges the algorithm used by auto_identifiers to conform to GitHub’s method. Spaces are converted to dashes (-), uppercase characters to lowercase characters, and punctuation characters other than - and _ are removed. Emojis are replaced by their names.\n\nMath Input ±\n\nThe extensions tex_math_dollars, tex_math_gfm, tex_math_single_backslash, and tex_math_double_backslash are described in the section about Pandoc’s Markdown.\n\nHowever, they can also be used with HTML input. This is handy for reading web pages formatted using MathJax, for example.\n\nRaw HTML/TeX ±\n\nThe following extensions are described in more detail in their respective sections of Pandoc’s Markdown:\n\nraw_html allows HTML elements which are not representable in pandoc’s AST to be parsed as raw HTML. By default, this is disabled for HTML input.\n\nraw_tex allows raw LaTeX, TeX, and ConTeXt to be included in a document. This extension can be enabled/disabled for the following formats (in addition to markdown):\n\ninput formats\n\nlatex, textile, html (environments, \\ref, and \\eqref only), ipynb\n\noutput formats\n\ntextile, commonmark\n\nNote: as applied to ipynb, raw_html and raw_tex affect not only raw TeX in Markdown cells, but data with mime type text/html in output cells. Since the ipynb reader attempts to preserve the richest possible outputs when several options are given, you will get best results if you disable raw_html and raw_tex when converting to formats like docx which don’t allow raw html or tex.\n\nnative_divs causes HTML div elements to be parsed as native pandoc Div blocks. If you want them to be parsed as raw HTML, use -f html-native_divs+raw_html.\n\nnative_spans causes HTML span elements to be parsed as native pandoc Span inlines. If you want them to be parsed as raw HTML, use -f html-native_spans+raw_html. If you want to drop all divs and spans when converting HTML to Markdown, you can use pandoc -f html-native_divs-native_spans -t markdown.\n\nLiterate Haskell support ±\n\nExtension: literate_haskell ±\n\nTreat the document as literate Haskell source.\n\nThis extension can be enabled/disabled for the following formats:\n\ninput formats\n\nmarkdown, rst, latex\n\noutput formats\n\nmarkdown, rst, latex, html\n\nIf you append +lhs (or +literate_haskell) to one of the formats above, pandoc will treat the document as literate Haskell source. This means that\n\nIn Markdown input, “bird track” sections will be parsed as Haskell code rather than block quotations. Text between \\begin{code} and \\end{code} will also be treated as Haskell code. For ATX-style headings the character ‘=’ will be used instead of ‘#’.\n\nIn Markdown output, code blocks with classes haskell and literate will be rendered using bird tracks, and block quotations will be indented one space, so they will not be treated as Haskell code. In addition, headings will be rendered setext-style (with underlines) rather than ATX-style (with ‘#’ characters). (This is because ghc treats ‘#’ characters in column 1 as introducing line numbers.)\n\nIn restructured text input, “bird track” sections will be parsed as Haskell code.\n\nIn restructured text output, code blocks with class haskell will be rendered using bird tracks.\n\nIn LaTeX input, text in code environments will be parsed as Haskell code.\n\nIn LaTeX output, code blocks with class haskell will be rendered inside code environments.\n\nIn HTML output, code blocks with class haskell will be rendered with class literatehaskell and bird tracks.\n\nExamples:\n\npandoc -f markdown+lhs -t html\n\nreads literate Haskell source formatted with Markdown conventions and writes ordinary HTML (without bird tracks).\n\npandoc -f markdown+lhs -t html+lhs\n\nwrites HTML with the Haskell code in bird tracks, so it can be copied and pasted as literate Haskell source.\n\nNote that GHC expects the bird tracks in the first column, so indented literate code blocks (e.g. inside an itemized environment) will not be picked up by the Haskell compiler.\n\nOther extensions ±\n\nExtension: empty_paragraphs ±\n\nAllows empty paragraphs. By default empty paragraphs are omitted.\n\nThis extension can be enabled/disabled for the following formats:\n\ninput formats\n\ndocx, html\n\noutput formats\n\ndocx, odt, opendocument, html, latex\n\nExtension: native_numbering ±\n\nEnables native numbering of figures and tables. Enumeration starts at 1.\n\nThis extension can be enabled/disabled for the following formats:\n\noutput formats\n\nodt, opendocument, docx\n\nExtension: xrefs_name ±\n\nLinks to headings, figures and tables inside the document are substituted with cross-references that will use the name or caption of the referenced item. The original link text is replaced once the generated document is refreshed. This extension can be combined with xrefs_number in which case numbers will appear before the name.\n\nText in cross-references is only made consistent with the referenced item once the document has been refreshed.\n\nThis extension can be enabled/disabled for the following formats:\n\noutput formats\n\nodt, opendocument\n\nExtension: xrefs_number ±\n\nLinks to headings, figures and tables inside the document are substituted with cross-references that will use the number of the referenced item. The original link text is discarded. This extension can be combined with xrefs_name in which case the name or caption numbers will appear after the number.\n\nFor the xrefs_number to be useful heading numbers must be enabled in the generated document, also table and figure captions must be enabled using for example the native_numbering extension.\n\nNumbers in cross-references are only visible in the final document once it has been refreshed.\n\nThis extension can be enabled/disabled for the following formats:\n\noutput formats\n\nodt, opendocument\n\nExtension: styles ±\n\nWhen converting from docx, read all docx styles as divs (for paragraph styles) and spans (for character styles) regardless of whether pandoc understands the meaning of these styles. This can be used with docx custom styles. Disabled by default.\n\ninput formats\n\ndocx\n\nExtension: amuse ±\n\nIn the muse input format, this enables Text::Amuse extensions to Emacs Muse markup.\n\nExtension: raw_markdown ±\n\nIn the ipynb input format, this causes Markdown cells to be included as raw Markdown blocks (allowing lossless round-tripping) rather than being parsed. Use this only when you are targeting ipynb or a Markdown-based output format.\n\nExtension: citations (org) ±\n\nWhen the citations exten"
    }
}