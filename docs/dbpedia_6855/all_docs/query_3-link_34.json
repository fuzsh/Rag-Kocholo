{
    "id": "dbpedia_6855_3",
    "rank": 34,
    "data": {
        "url": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6097606/",
        "read_more_link": "",
        "language": "en",
        "title": "cgpPindel: Identifying Somatically Acquired Insertion and Deletion Events from Paired End Sequencing",
        "top_image": "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/pmc-card-share.jpg?_=0",
        "meta_img": "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/pmc-card-share.jpg?_=0",
        "images": [
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/favicons/favicon-57.png",
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/icon-dot-gov.svg",
            "https://www.ncbi.nlm.nih.gov/coreutils/uswds/img/icon-https.svg",
            "https://www.ncbi.nlm.nih.gov/coreutils/nwds/img/logos/AgencyLogo.svg",
            "https://www.ncbi.nlm.nih.gov/corehtml/pmc/pmcgifs/logo-wtpa2.gif",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6097606/bin/emss-78936-f001.jpg",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6097606/bin/emss-78936-f002.jpg",
            "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6097606/bin/emss-78936-f003.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Keiran M. Raine",
            "Jonathan Hinton",
            "Adam P. Butler",
            "Jon W. Teague",
            "Helen Davies",
            "Patrick Tarpey",
            "Serena Nik-Zainal",
            "Peter J. Campbell"
        ],
        "publish_date": "2015-12-17T00:00:00",
        "summary": "",
        "meta_description": "cgpPindel is a modified version of Pindel that is optimized for detecting somatic insertions and deletions (indels) in cancer genomes and other samples compared to a reference control. Post-hoc filters remove false positive calls, resulting in a high-quality ...",
        "meta_lang": "en",
        "meta_favicon": "https://www.ncbi.nlm.nih.gov/coreutils/nwds/img/favicons/favicon.ico",
        "meta_site_name": "PubMed Central (PMC)",
        "canonical_link": "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6097606/",
        "text": "Curr Protoc Bioinformatics. Author manuscript; available in PMC 2018 Aug 17.\n\nPublished in final edited form as:\n\nPMCID: PMC6097606\n\nEMSID: EMS78936\n\nPMID: 26678382\n\ncgpPindel: Identifying Somatically Acquired Insertion and Deletion Events from Paired End Sequencing\n\n,1 ,1 ,1 ,1 ,1 ,1 ,1 and 1\n\nKeiran M. Raine\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Keiran M. Raine\n\nJonathan Hinton\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Jonathan Hinton\n\nAdam P. Butler\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Adam P. Butler\n\nJon W. Teague\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Jon W. Teague\n\nHelen Davies\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Helen Davies\n\nPatrick Tarpey\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Patrick Tarpey\n\nSerena Nik-Zainal\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Serena Nik-Zainal\n\nPeter J. Campbell\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nFind articles by Peter J. Campbell\n\n1Cancer Genome Project, Wellcome Trust Sanger Institute, Cambridge, United Kingdom\n\nAbstract\n\ncgpPindel is a modified version of Pindel that is optimized for detecting somatic insertions and deletions (indels) in cancer genomes and other samples compared to a reference control. Post-hoc filters remove false positive calls, resulting in a high-quality dataset for downstream analysis. This unit provides concise instructions for both a simple ‘one-shot’ execution of cgpPindel and a more detailed approach suitable for large-scale compute farms.\n\nKeywords: somatic, sequencing, Pindel, cancer\n\nIntroduction\n\nThe analysis of next-generation sequencing (NGS) data to identify indels using the Pindel algorithm (Ye et al., 2009) has several steps and requires pre- and post-processing to exclude sequencing artifacts. There are four main steps for processing: input generation, read filtering, detection by Pindel, and flagging (See ). The pre-processing step identifies read pairs where one read has mapped (the anchor) and the read mate is either unmapped or maps with the inclusion of an indel (the query). A modified version of Pindel is subsequently employed to analyze these fragments and performs ‘split read mapping’ on the query read to identify putative indels. Post-processing of the Pindel output involves the application of multiple empirically derived filters aimed at removing false calls and retaining genuine somatic mutations.\n\nIn order to run the algorithm on modest hardware, the process requires division into a series of steps. cgpPindel simplifies the running of these steps, allowing a single command to trigger the complete workflow. More granular control is available via the same tool set for users with access to a large-scale compute farm.\n\ncgpPindel has been optimized for detecting somatic mutations in tumor samples, which are paired with a non-neoplastic control from the same individual. In theory, however, it can be used to identify indels present in any sample compared to a reference control.\n\nStrategic Planning\n\ncgpPindel is a suite of tools that performs the full indel calling workflow, which has been used successfully within the Cancer Genome Project (CGP) and the International Cancer Genome Consortium (ICGC) PanCancer project. All components are wrapped in Perl scripts to simplify usage.\n\nPlease see Support Protocol 1 for installation instructions.\n\nOnce installed, running the following command will list available options:\n\npindel.pl -h\n\nBasic Protocol 1: Calling Indels with a Single Command for a Tumor/Normal Sample Pair\n\nThe purpose of cgpPindel is to produce a set of high-confidence somatic indel calls in VCF format (http://vcftools.github.io/specs.html). Additionally, reads that support these calls are aggregated into a pair of BAM files (https://samtools.github.io/hts-specs/SAMv1.pdf) to enable visual inspection if required. The algorithm identifies indels in both the tumor and normal samples and subsequently excludes variants that occur in the normal. This section describes how to execute cgpPindel with a single command.\n\nNecessary Resources\n\nHardware\n\nThe resources listed here assume a dataset of whole genome sequence (WGS) samples with 30- to 40-fold sequence coverage for Human Genome Reference GRCh37d5 from tumor and normal samples. Poor-quality input data (e.g., high indel artifact rates) can greatly increase both the running time and hardware requirements. Requirements include:\n\nA Linux computer with at least 8 GB of RAM\n\n4 to 6 cores (8 GB per core) recommended\n\nProcessing storage of 50 GB\n\nSoftware\n\nPCAP-core: https://github.com/ICGC-TCGA-PanCancer/PCAP-core/releases; this software installs its own dependencies including:\n\nbwa: https://github.com/lh3/bwa (not used here)\n\nkentUtils: https://github.com/ENCODE-DCC/kentUtils (not used here)\n\nVarious perl libraries\n\ncgpVcf: https://github.com/cancerit/cgpVcf/releases; this software installs its own dependencies including:\n\nVarious perl libraries\n\ncgpPindel: https://github.com/cancerit/cgpPindel/releases; this package includes a modified version of the pre 0.2.0 Pindel source with agreement of original author (Ye et al., 2009).\n\nFiles\n\nStatic reference files (see Support Protocol 2):\n\ngenome.fa: reference genome (with associated *.fai index). This must be the same as the reference used during mapping of the input BAMs.\n\nsimpleRepeats.bed.gz: tabix-indexed bed file of simple repeats\n\ncodingexon_regions.bed.gz: tabix-indexed bed file of coding exons (see unit 15.8)\n\nNormalPanel.gff3.gz: tabix indexed gff3 file of events seen in a panel of normal sequencing\n\n*.lst: List of rules to be applied depending on data type being analyzed\n\nSample data\n\n<Tumour>.bam: aligned paired-end sequencing for tumor sample\n\n<Normal>.bam: aligned data paired-end sequencing for normal sample\n\nFor sample alignments, both BWA-mem (Li, 2013) and BWA-backtrack (Li and Durbin, 2009) have been tested. Any other aligner that makes proper use of the MAPQ (mapping quality) SAM field should be suitable.\n\nExample data\n\nPre-generated reference files and COLO-829/COLO-829-BL (Pleasance et al., 2010) BAM files aligned with BWA-mem along with expected results can be found at ftp://ftp.sanger.ac.uk/pub/cancer/support-files/cgpPindel\n\nCollect mapping statistics for input BAM files:\n\nbam_stats -i tumour.bam -o tumour.bam.bas bam_stats -i normal.bam -o normal.bam.bas\n\nThis will take several hours (files included for example data). The output will be written into the two .bas files.\n\nSet an environment variable pointing to the file system location of the reference files (downloaded or otherwise). Modify the path as appropriate:\n\nexport REF=/refarea\n\nSet an environment variable to indicate the location for the output data. Modify as appropriate:\n\nexport POUT=/workspace\n\nCreate the output folder:\n\nmkdir -p $POUT/result\n\nSet an environment variable to indicate the location of the input example data. Modify as appropriate for your system:\n\nexport PIN=/exampleData\n\nBuild the pindel.pl command (this example uses 6 cores):\n\npindel.pl \\ -reference $REF/genome.fa \\ -exclude NC_007605,hs37d5,GL% \\ -simrep $REF/simpleRepeats.bed.gz \\ -badloci $REF/hiSeqDepth.bed.gz \\ -genes $REF/codingexon_regions.indel.bed.gz \\ -unmatched $REF/pindel_np.gff3.gz \\ -assembly GRCh37d5 \\ -species Human \\ -seqtype WGS \\ -filter $REF/genomicRules.lst \\ -softfil $REF/softRules.lst \\ -tumour $PIN/tumour/COLO-829.bam \\ -normal $PIN/normal/COLO-829-BL.bam \\ -outdir $POUT/result \\ -cpus 6 >& $POUT/run.log &\n\nThis is not a quick process; expect a wall-clock time of around 18 hr when using 6 cores.\n\nAlternate Protocol 1: Processing other Sequencing Types\n\nBasic Protocol 1 describes how to run WGS data to call somatic indels. Here, we address how to call indels in other data types (exome and targeted pulldown) and explain how to pick and choose the post cgpPindel filters. Although it is possible to use cgpPindel to process RNA-seq for indels, it is not considered a primary focus of the tool and consequently is not covered in this unit.\n\nNecessary Resources\n\nIn general, analysis of other DNA sequencing types such as whole exome sequence (WXS) and targeted pulldown (TG) have more modest hardware requirements than those described in Basic Protocol 1 Necessary Resources\n\nFollow steps 1 to 4 of Basic Protocol 1.\n\nModify the parameters of the command from step 5 of Basic Protocol 1 appropriately using as a guide.\n\nTable 15.7.1\n\nParameterDetailValues-seqtypeCorrelated with appropriate information in the input BAM headers and will be overridden should the two input BAMs disagree. Primarily provided for population of VCF when not found in BAM header.\n\nWGS—whole genome sequence\n\nWXS—whole exome sequence\n\nTG—targeted gene pulldown\n\nNot a restricted list.-filterThe list of filtering rules to be applied to the VCF file. This can be an empty file.Several panels of filtering rule sets are included in the distribution:\n\nWGS—genomicRules.lst\n\nWXS—pulldownRules.lst\n\nTG—targetedRules.lst\n\nAlternate Protocol 2: Using cgpPindel with Compute Farm Infrastructure\n\nRunning the complete analysis as a single command can be inefficient due to how memory and CPU are utilized in different elements of the analysis. More advanced users may wish to break down execution into subcomponents so that they can be resourced more accurately under a compute farm infrastructure.\n\nillustrates the different elements of the process flow.\n\nNecessary Resources\n\nIndividual steps have different hardware requirements that require tuning on a per species/build basis. This will require experimentation, but the resources described in Basic Protocol 1 can serve as a good starting point.\n\nFollow Basic Protocol 1 steps 1 to 4.\n\nDetermine the number of contigs/chromosomes that will be processed. This is the number of entries in the *.fa.fai file less any that match the patterns passed to -exclude (these are typically small contigs and other reference entries that you wish to ignore). An example for the provided data:\n\n$ wc -l genome.fa.fai 86\n\nLess 61 (NC_007605,hs37d5,GL%), resulting in 25 (1-22+X,Y,MT)\n\nPlease use this stub command from this point for all items indicated by ‘pindel.pl …’\n\npindel.pl \\ -reference $REF/genome.fa \\ -exclude NC_007605,hs37d5,GL% \\ -simrep $REF/simpleRepeats.bed.gz \\ -badloci $REF/hiSeqDepth.bed.gz \\ -genes $REF/codingexon_regions.indel.bed.gz \\ -unmatched $REF/pindel_np.gff3.gz \\ -assembly GRCh37d5 \\ -species Human \\ -seqtype WGS \\ -filter $REF/genomicRules.lst \\ -softfil $REF/softRules.lst \\ -tumour $PIN/tumour/COLO-829.bam \\ -normal $PIN/normal/COLO-829-BL.bam \\ -outdir $POUT/result\n\nRun the input generation steps, always 2 jobs. The option -cpus N can be included here to reduce run time (max 3):\n\npindel.pl … -cpus 3 -process input -index 1 pindel.pl … -cpus 3 -p input -index 2\n\nRun the filtering and calling step once for each of the 25 chromosomes/contigs:\n\npindel.pl … -process pindel -index 1 … pindel.pl … -process pindel -index 25\n\nRun the conversion of raw pindel output to VCF and BAM once for each of the 25 chromosomes/contigs:\n\npindel.pl … -process pin2vcf -index 1 … pindel.pl … -process pin2vcf -index 25\n\nMerge the per-contig outputs:\n\npindel.pl … -process merge -index 1\n\nRun the flagging and clean up step:\n\npindel.pl … -process flag -index 1\n\nIt is possible to use parallel ‘round-robin’ processing on a limited number of cores on a single host for steps 4 and 5. This is achieved by omitting -index, then specifying -cpus and -limit with the number of cores to utilize. A secondary advantage is that this removes the need to determine the number of jobs required.\n\nSupport Protocol 1: Installation of cgpPindel and Dependencies\n\ncgpPindel has been packaged to minimize the installation complexity. The examples below use the versions available at the time of publication. Please see the repositories for current versions.\n\nNecessary Resources\n\nLinux-based system with Web access\n\nInstall PCAP-core (which contains the thread framework for cgpPindel). In this and following steps, please replace /your/scratcharea and ~/installBase with the file system paths that you desire to use for scratch space and installed executables, respectively:\n\n$ cd /your/scratcharea $ wget https://github.com/ICGC-TCGA-PanCancer/PCAP-core/archive/v1.9.4.tar.gz $ tar -zxf v1.8.2.tar.gz $ rm v1.8.2.tar.gz $ cd PCAP-core-1.8.1 $./setup.sh ~/installBase\n\nInstall cgpVcf (reusable VCF manipulation tools common to many CGP projects):\n\n$ cd /your/scratcharea $ wget https://github.com/cancerit/cgpVcf/archive/v1.2.3.tar.gz $ tar -zxf v1.2.3.tar.gz $ rm v1.2.3.tar.gz $ cd cgpVcf-1.2.3 $./setup.sh ~/installBase\n\nInstall cgpPindel (modified version of Pindel optimized for somatic mutation detection):\n\n$ cd /your/scratcharea $ wget https://github.com/cancerit/cgpPindel/archive/v1.5.2.tar.gz $ tar -zxf v.1.3.2.tar.gz $ rm v1.3.2.tar.gz $ cd cgpPindel-1.3.2 $./setup.sh ~/installBase\n\nAll of the setup scripts above will complete with a message along the lines:\n\n'Please add the following to beginning of path …'\n\nIf any fail to give this message, examine the setup.log file (co-located with setup.sh).\n\nSupport Protocol 2: Static Reference Files\n\nThe genome reference file is an essential requirement to run the algorithm. The following are recommended for human WGS analysis. Examples of each of these are available on the FTP site indicated in Basic Protocol 1. Note that unlike some other human genome references, these files do not prefix each chromosome name with chr.\n\ngenome.fa\n\nThis is the reference assembly as used for the mapping of the paired end sequencing data. The fasta index (fai) is also required. This can be generated by executing:\n\nsamtools faidx genome.fa\n\nsamtools is included in the install detailed in Support Protocol 1.\n\nsimpleRepeats.bed.gz[.tbi]\n\nThis is a tabix (Li, 2011) indexed bed file of simple repeats, required for filtering of results. This is generated as follows for Human GRCh37/hg19:\n\nUsing a Web browser, navigate to https://genome.ucsc.edu/cgi-bin/hgTables.\n\nSet all of the options to match those shown in .\n\nSelect the create button for ‘filter:’.\n\nModify ‘period’ to be ‘<=6’ and submit this form.\n\nNow, back on the original form select ‘get output’.\n\nIndex the resulting file using tabix (i.e., create the *.tbi file):\n\ntabix -p bed simpleRepeats.bed.gz\n\nIn the example data, the chr prefix has been stripped to match the mapping chromosomes.\n\npindel_np.gff3.gz\n\nThis file supports one of the most powerful filters in the cgpPindel workflow. A normal panel is a list of locations found to be aberrant in normal genome sequencing, such as sequencing and mapping artifacts. There are several criteria to be considered when generating these:\n\nSequencing technology\n\nSequencing chemistry\n\nRead lengths of paired-end reads\n\nBase aligner used\n\nIt is not necessary to have a different panel for each permutation. In practice, the best approach is to ensure that any existing panel is augmented with data from new chemistry/read-length as it becomes available.\n\nIt is recommended that a new panel be created if the base alignment tools are changed (e.g., BWA backtrack -> BWA mem).\n\nFrom our experience, a minimum of 20 normal samples (from different donors) is required to generate an effective panel.\n\nCreate a BAM file with no reads (all relevant tools included in distributions):\n\n(echo '@1/1';echo 'A';echo '+';echo 'B' \\ ;echo '@1/2';echo 'A';echo '+';echo 'B') \\ | fastqtobam namescheme=generic \\ RGID=1 RGLB=X RGPL=ILLUMINA RGPU=X RGSM=FAKE \\ | samtools view -h - \\ | samtools view -Sbt genome.fa.fai -o FAKE.bam -\n\nIndex the BAM.\n\nsamtools index FAKE.bam\n\nGenerate a *.bas file:\n\nbam_stats -i FAKE.bam -o FAKE.bam.bas\n\nRun Basic Protocol 1 for each of the normal samples you want to include using FAKE.bam as the file for -tumour.\n\nRun pindel_np_from_vcf.pl using the VCF output from all of the data run in step 3:\n\npindel_np_from_vcf.pl -o normalPanel -samp_id NORMAL results/*.vcf.gz\n\ncodingexon_regions.bed.gz\n\nThis is a listing of coding exons required for filtering of results. Generation of this file is covered in unit 15.8.\n\nGuidelines for Understanding Results\n\ncgpPindel generates several result files of the format:\n\n<TUMOUR>_vs_<NORMAL>[._]*\n\nThe TUMOUR and NORMAL values are taken from the SM field of the BAM read-group headers. details the different extensions:\n\nTable 15.7.2\n\nFileTypeT_vs_N.flagged.vcf.gz[.tbi]Variant call format (bgzip compressed)T_vs_N_wt.bam[.bai|.md5]Pindel-aligned reads from the wild-type/normal sample in BAM formatT_vs_N_mt.bam[.bai|.md5]Pindel-aligned reads from the mutant/tumour sample in BAM formatT_vs_N.germline.bedBED file containing ranges of events highly likely to be germline\n\n*.germline.bed\n\nThis file is primarily used as an input for cgpCaVEManPostprocessing (filtering step for the CaVEMan substitution caller; please see the wrapping project cgpCaVEManWrapper at https://github.com/cancerit/cgpCaVEManWrapper).\n\nThe content provides regions where germline indels may cause incorrect primary alignment, which in turn can produce false-positive results in the substitution caller.\n\n*.bam\n\nThese files contain a BAM representation of all events called by Pindel. They can be integrated in to a genome browser and used with the primary alignment BAM for further analysis employing scripting tools such as Bio::DB::Sam.\n\n*.vcf.gz\n\nThe VCF file is the final result, currently v4.1 (http://samtools.github.io/hts-specs/VCFv4.1.pdf). Any variant not marked as PASS in the filter field can be ignored with high confidence.\n\nFor details of the individual flags applied please see Advanced Parameters, below.\n\nThe formatted Tumour/Normal fields require some explanation. details the ‘FORMAT’ elements with basic background.\n\nTable 15.7.3\n\nIDDescription (as VCF header)DetailGTGenotype‘./.’, see VCF specificationPPPindel calls on the positive strandNumber of reads mapped by Pindel to positive strandPNPindel calls on the negative strandNumber of reads mapped by Pindel to negative strandPBBWA calls on the positive strandNumber of reads mapped by the primary aligner to positive strand showing a similar indel event. Other aligners can be used.NBBWA calls on the negative strandNumber of reads mapped by the primary aligner to negative strand showing a similar indel event. Other aligners can be used.PDBWA mapped reads on the positive strandCount of positive strand mapped reads from primary aligner (with or without indel)NDBWA mapped reads on the negative strandCount of negative strand mapped reads from primary aligner (with or without indel)PRTotal mapped reads on the positive strandUnique union of PP and PDNRTotal mapped reads on the negative strandUnique union of NP and NDPUUnique calls on the positive strandUnique union of PP and PBNUUnique calls on the negative strandUnique union of NP and NBTGTotal distinct contributing read groupsNumber of read groups represented in PR/NR valuesVGVariant distinct contributing read groupsNumber of read groups represented in PU/NU values\n\nCommentary\n\nBackground Information\n\nThe major drive to package cgpPindel was the ICGC/TCGA PanCancer project. This large-scale project involves the systematic analysis of 2500 WGS Tumour/Normal sample pairs (http://icgc.org). To standardize the primary mutation dataset for this endeavor, one mapping workflow was used and the resulting data processed through three calling pipelines: one each from the Broad Institute, DKFZ, and Sanger Institute. To participate in this project, we needed to ensure that all tools could function on any Unix system. This was used as an opportunity to revisit code, remove aligner-specific dependencies, and improve performance.\n\nThe Cancer Genome Project originally worked closely with the author of Pindel (around 2010) to improve the sensitivity of the core caller. At this time, longer-read paired-end sequencing was becoming available, resulting in increased tolerance of indels within mapped reads. Pindel itself is a split-read mapper based on a pattern growth model originally designed to capture break points of large deletions and medium-size insertions. Changing the candidate read selection to include mapped reads exhibiting indel events found by the primary aligner was the key to allowing Pindel to detect small events. An early version of this code is included in the Pindel release; however, this is tightly coupled with BWA-backtrack (aln + sampe) using several aligner specific fields.\n\nTo facilitate analysis and visualization, the conversion of raw Pindel text alignments to BAM format were implemented internally; this feature was subsequently added to the core Pindel codebase. shows these minimal BAM files viewed in JBrowse (Skinner et al., 2009).\n\nThe version of Pindel included in cgpPindel has been tuned to our specifications and is divergent from the core algorithm available from the original authors, but any issues detected have been freely communicated.\n\nCritical Parameters\n\nIt is essential that the type of sequencing being processed be correctly set for the -filter option. Incorrect values here have a significant effect on specificity and sensitivity.\n\nFor targeted screens, you may wish to omit the -badloci and -simrep options.\n\nTroubleshooting\n\nSee for solutions to common problems.\n\nTable 15.7.4\n\nProblemCauseSolutionNo resultsReference files and inputs have different naming conventionCheck BAM is mapped with same reference build and or prefixes e.g., chr1 vs. 1.Known event not reportedEvent fails filteringSearch file including all results, not just PASS. If found, see the filter definitions.Known event not reportedRegion excluded by\n\n-exclude, -simrep, or -badloci optionsCheck for overlap with the expected event. -badloci will exclude any reads where the mapped mate is overlapping.\n\nAdvanced Parameters\n\nThe filtering step uses a panel of filters that can be switched on and off. As these are likely to be enhanced or augmented over time, please see the cgpPindel wiki for further details (https://github.com/cancerit/cgpPindel/wiki/VcfFilters).\n\nNew filters can be added by augmenting the perl module Sanger::CGP:: PindelPostProcessing::Filter Rules with a new subroutine, listing it in the dispatch table and adding the key to the relevant rules file (cgpPindel/perl/rules).\n\nThe subroutine uses the VcfTools perl module (http://vcftools.sourceforge.net/perl_module.html#Vcf.pm).\n\nPlease feel free to submit new filters for consideration as a pull request.\n\nSuggestions for Further Analysis\n\nCGP has created a variant annotation tool VAGrENT, which can be used to annotate indels and substitutions at the cDNA and protein level in VCF format. Please see unit 15.8 for further details on this tool.\n\nAcknowledgement\n\nThe authors wish to thank Kai Ye (The Genome Institute at Washington University in St. Louis), the original author of Pindel for continued support and enhancement of the CGP branch.\n\nThis work was supported by the Wellcome Trust grant [098051].\n\nLiterature Cited\n\nLi H. Tabix: Fast retrieval of sequence features from generic TAB-delimited files. Bioinformatics. 2011;27:718–719. [PMC free article] [PubMed] [Google Scholar]\n\nLi H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. Quant Biol. 2013 arXiv:1303.3997 [q-bio]. Available at http://arxiv.org/abs/1303.3997. [Google Scholar]\n\nLi H, Durbin R. Fast and accurate short read alignment with Burrows-Wheeler transform. Bioinformatics (Oxford, England) 2009;25:1754–1760. doi: 10.1093/bioinformatics/btp324. [PMC free article] [PubMed] [CrossRef] [Google Scholar]\n\nPleasance ED, Cheetham RK, Stephens PJ, McBride DJ, Humphray SJ, Greenman CD, Varela I, Lin M-L, Ordóñez GR, Bignell GR, Ye K, et al. A comprehensive catalogue of somatic mutations from a human cancer genome. Nature. 2010;463:191–196. doi: 10.1038/nature08658. [PMC free article] [PubMed] [CrossRef] [Google Scholar]\n\nSkinner ME, Uzilov AV, Stein LD, Mungall CJ, Holmes IH. JBrowse: A next-generation genome browser. Genome Res. 2009;19:1630–1638. doi: 10.1101/gr.094607.109. [PMC free article] [PubMed] [CrossRef] [Google Scholar]\n\nYe K, Schulz MH, Long Q, Apweiler R, Ning Z. Pindel: A pattern growth approach to detect break points of large deletions and medium sized insertions from paired-end short reads. Bioinformatics (Oxford, England) 2009;25:2865–2871. doi: 10.1093/bioinformatics/btp394. [PMC free article] [PubMed] [CrossRef] [Google Scholar]\n\nInternet Resources\n\nhttps://github.com/cancerit\n\nRepository for Wellcome Trust Sanger Institute Cancer Genome Project public projects.\n\nhttp://gmt.genome.wustl.edu/packages/pindel\n\nCore Pindel site.\n\nhttps://genome.ucsc.edu/cgi-bin/hgTables\n\nUCSC Genome Browser Table Browser.\n\nhttp://vcftools.github.io/specs.html\n\nVCF file format specification.\n\nhttps://samtools.github.io/hts-specs/SAMv1.pdf\n\nSAM format specification."
    }
}