{
    "id": "dbpedia_5039_3",
    "rank": 33,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management",
        "read_more_link": "",
        "language": "en",
        "title": "Memory management - JavaScript",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-30T04:48:57+00:00",
        "summary": "",
        "meta_description": "Low-level languages like C, have manual memory management primitives such as malloc() and free(). In contrast, JavaScript automatically allocates memory when objects are created and frees it when they are not used anymore (garbage collection). This automaticity is a potential source of confusion: it can give developers the false impression that they don't need to worry about memory management.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_management",
        "text": "The majority of memory management issues occur at this phase. The most difficult aspect of this stage is determining when the allocated memory is no longer needed.\n\nLow-level languages require the developer to manually determine at which point in the program the allocated memory is no longer needed and to release it.\n\nSome high-level languages, such as JavaScript, utilize a form of automatic memory management known as garbage collection (GC). The purpose of a garbage collector is to monitor memory allocation and determine when a block of allocated memory is no longer needed and reclaim it. This automatic process is an approximation since the general problem of determining whether or not a specific piece of memory is still needed is undecidable.\n\nNote: No modern JavaScript engine uses reference-counting for garbage collection anymore.\n\nThis is the most naÃ¯ve garbage collection algorithm. This algorithm reduces the problem from determining whether or not an object is still needed to determining if an object still has any other objects referencing it. An object is said to be \"garbage\", or collectible if there are zero references pointing to it.\n\nFor example:\n\njs\n\nlet x = { a: { b: 2, }, }; let y = x; x = 1; let z = y.a; y = \"mozilla\"; z = null;\n\nThere is a limitation when it comes to circular references. In the following example, two objects are created with properties that reference one another, thus creating a cycle. They will go out of scope after the function call has completed. At that point they become unneeded and their allocated memory should be reclaimed. However, the reference-counting algorithm will not consider them reclaimable since each of the two objects has at least one reference pointing to them, resulting in neither of them being marked for garbage collection. Circular references are a common cause of memory leaks.\n\njs\n\nfunction f() { const x = {}; const y = {}; x.a = y; y.a = x; return \"azerty\"; } f();\n\nThis algorithm reduces the definition of \"an object is no longer needed\" to \"an object is unreachable\".\n\nThis algorithm assumes the knowledge of a set of objects called roots. In JavaScript, the root is the global object. Periodically, the garbage collector will start from these roots, find all objects that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the garbage collector will thus find all reachable objects and collect all non-reachable objects.\n\nThis algorithm is an improvement over the previous one since an object having zero references is effectively unreachable. The opposite does not hold true as we have seen with circular references.\n\nCurrently, all modern engines ship a mark-and-sweep garbage collector. All improvements made in the field of JavaScript garbage collection (generational/incremental/concurrent/parallel garbage collection) over the last few years are implementation improvements of this algorithm, but not improvements over the garbage collection algorithm itself nor its reduction of the definition of when \"an object is no longer needed\".\n\nThe immediate benefit of this approach is that cycles are no longer a problem. In the first example above, after the function call returns, the two objects are no longer referenced by any resource that is reachable from the global object. Consequently, they will be found unreachable by the garbage collector and have their allocated memory reclaimed.\n\nHowever, the inability to manually control garbage collection remains. There are times when it would be convenient to manually decide when and what memory is released. In order to release the memory of an object, it needs to be made explicitly unreachable. It is also not possible to programmatically trigger garbage collection in JavaScript â and will likely never be within the core language, although engines may expose APIs behind opt-in flags.\n\nWeakMap and WeakSet are data structures whose APIs closely mirror their non-weak counterparts: Map and Set. WeakMap allows you to maintain a collection of key-value pairs, while WeakSet allows you to maintain a collection of unique values, both with performant addition, deletion, and querying.\n\nWeakMap and WeakSet got the name from the concept of weakly held values. If x is weakly held by y, it means that although you can access the value of x via y, the mark-and-sweep algorithm won't consider x as reachable if nothing else strongly holds to it. Most data structures, except the ones discussed here, strongly holds to the objects passed in so that you can retrieve them at any time. The keys of WeakMap and WeakSet can be garbage-collected (for WeakMap objects, the values would then be eligible for garbage collection as well) as long as nothing else in the program is referencing the key. This is ensured by two characteristics:\n\nWeakMap and WeakSet can only store objects or symbols. This is because only objects are garbage collected â primitive values can always be forged (that is, 1 === 1 but {} !== {}), making them stay in the collection forever. Registered symbols (like Symbol.for(\"key\")) can also be forged and thus not garbage collectable, but symbols created with Symbol(\"key\") are garbage collectable. Well-known symbols like Symbol.iterator come in a fixed set and are unique throughout the lifetime of the program, similar to intrinsic objects such as Array.prototype, so they are also allowed as keys.\n\nWeakMap and WeakSet are not iterable. This prevents you from using Array.from(map.keys()).length to observe the liveliness of objects, or get hold of an arbitrary key which should otherwise be eligible for garbage collection. (Garbage collection should be as invisible as possible.)\n\nIn typical explanations of WeakMap and WeakSet (such as the one above), it's often implied that the key is garbage-collected first, freeing the value for garbage collection as well. However, consider the case of the value referencing the key:\n\njs\n\nconst wm = new WeakMap(); const key = {}; wm.set(key, { key });\n\nIf key is stored as an actual reference, it would create a cyclic reference and make both the key and value ineligible for garbage collection, even when nothing else references key â because if key is garbage collected, it means that at some particular instant, value.key would point to a non-existent address, which is not legal. To fix this, the entries of WeakMap and WeakSet aren't actual references, but ephemerons, an enhancement to the mark-and-sweep mechanism. Barros et al. offers a good summary of the algorithm (page 4). To quote a paragraph:\n\nEphemerons are a refinement of weak pairs where neither the key nor the value can be classified as weak or strong. The connectivity of the key determines the connectivity of the value, but the connectivity of the value does not affect the connectivity of the key. [â¦] when the garbage collection offers support to ephemerons, it occurs in three phases instead of two (mark and sweep).\n\nAs a rough mental model, think of a WeakMap as the following implementation:\n\nWarning: This is not a polyfill nor is anywhere close to how it's implemented in the engine (which hooks into the garbage collection mechanism).\n\njs\n\nclass MyWeakMap { #marker = Symbol(\"MyWeakMapData\"); get(key) { return key[this.#marker]; } set(key, value) { key[this.#marker] = value; } has(key) { return this.#marker in key; } delete(key) { delete key[this.#marker]; } }\n\nAs you can see, the MyWeakMap never actually holds a collection of keys. It simply adds metadata to each object being passed in. The object is then garbage-collectable via mark-and-sweep. Therefore, it's not possible to iterate over the keys in a WeakMap, nor clear the WeakMap (as that also relies on the knowledge of the entire key collection).\n\nFor more information on their APIs, see the keyed collections guide.\n\nNote: WeakRef and FinalizationRegistry offer direct introspection into the garbage collection machinery. Avoid using them where possible because the runtime semantics are almost completely unguaranteed.\n\nAll variables with an object as value are references to that object. However, such references are strong â their existence would prevent the garbage collector from marking the object as eligible for collection. A WeakRef is a weak reference to an object that allows the object to be garbage collected, while still retaining the ability to read the object's content during its lifetime.\n\nOne use case for WeakRef is a cache system which maps string URLs to large objects. We cannot use a WeakMap for this purpose, because WeakMap objects have their keys weakly held, but not their values â if you access a key, you would always deterministically get the value (since having access to the key means it's still alive). Here, we are okay to get undefined for a key (if the corresponding value is no longer alive) since we can just re-compute it, but we don't want unreachable objects to stay in the cache. In this case, we can use a normal Map, but with each value being a WeakRef of the object instead of the actual object value.\n\njs\n\nfunction cached(getter) { const cache = new Map(); return async (key) => { if (cache.has(key)) { const dereferencedValue = cache.get(key).deref(); if (dereferencedValue !== undefined) { return dereferencedValue; } } const value = await getter(key); cache.set(key, new WeakRef(value)); return value; }; } const getImage = cached((url) => fetch(url).then((res) => res.blob()));\n\nFinalizationRegistry provides an even stronger mechanism to observe garbage collection. It allows you to register objects and be notified when they are garbage collected. For example, for the cache system exemplified above, even when the blobs themselves are free for collection, the WeakRef objects that hold them are not â and over time, the Map may accumulate a lot of useless entries. Using a FinalizationRegistry allows one to perform cleanup in this case.\n\njs\n\nfunction cached(getter) { const cache = new Map(); const registry = new FinalizationRegistry((key) => { if (!cache.get(key)?.deref()) { cache.delete(key); } }); return async (key) => { if (cache.has(key)) { return cache.get(key).deref(); } const value = await getter(key); cache.set(key, new WeakRef(value)); registry.register(value, key); return value; }; } const getImage = cached((url) => fetch(url).then((res) => res.blob()));\n\nDue to performance and security concerns, there is no guarantee of when the callback will be called, or if it will be called at all. It should only be used for cleanup â and non-critical cleanup. There are other ways for more deterministic resource management, such as try...finally, which will always execute the finally block. WeakRef and FinalizationRegistry exist solely for optimization of memory usage in long-running programs.\n\nFor more information on the API of WeakRef and FinalizationRegistry, see their reference pages."
    }
}