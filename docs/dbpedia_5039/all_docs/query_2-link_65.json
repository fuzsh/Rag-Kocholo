{
    "id": "dbpedia_5039_2",
    "rank": 65,
    "data": {
        "url": "https://docs.astro.build/en/guides/images/",
        "read_more_link": "",
        "language": "en",
        "title": "Images",
        "top_image": "https://docs.astro.build/open-graph/en/guides/images.webp",
        "meta_img": "https://docs.astro.build/open-graph/en/guides/images.webp",
        "images": [
            "https://docs.astro.build/_astro/houston_omg.CKiB_MJZ_wdOqF.webp",
            "https://docs.astro.build/houston_chef.webp",
            "https://docs.astro.build/houston_chef.webp",
            "https://docs.astro.build/_astro/houston-happy.fP8mBnGj.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn how to use images in Astro.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Docs",
        "canonical_link": "https://docs.astro.build/en/guides/images/",
        "text": "Astro provides several ways for you to use images on your site, whether they are stored locally inside your project, linked to from an external URL, or managed in a CMS or CDN!\n\nWe recommend that local images are kept in src/ when possible so that Astro can transform, optimize and bundle them. Files in the /public directory are always served or copied into the build folder as-is, with no processing.\n\nYour local images stored in src/ can be used by all files in your project: .astro, .md, .mdx, .mdoc, and other UI frameworks. Images can be stored in any folder, including alongside your content.\n\nStore your images in the public/ folder if you want to avoid any processing or to have a direct public link to them.\n\nYou can also choose to store your images remotely, in a content management system (CMS) or digital asset management (DAM) platform.\n\nFor extra protection when dealing with external sources, remote images will only be processed from authorized image sources specified in your configuration. However, any remote images can be displayed.\n\nAstro can fetch your data remotely using APIs or display images from their full URL path. See our CMS guides for examples of integrating common services.\n\nIn .astro files, local images must be imported into the file in order to be used. Remote and public/ images do not require importing.\n\nImport and use Astro’s built-in <Image /> component for optimized images using astro:assets. Alternatively, Astro syntax supports writing an HTML <img> tag directly, which skips image processing.\n\nTo dynamically import images from the src/ folder, see the following recipe:\n\nUse the built-in <Image /> Astro component to display optimized versions of your local images and configured remote images.\n\nImages in the public/ folder, as well as remote images not specifically configured in your project, can also be used with the Image component, but will not be processed.\n\n<Image /> can transform a local or authorized remote image’s dimensions, file type, and quality for control over your displayed image. The resulting <img> tag includes alt, loading, and decoding attributes and infers image dimensions to avoid Cumulative Layout Shift (CLS).\n\nThe format of the src value of your image file depends on where your image file is located:\n\nLocal images in src/ - you must also import the image using a relative file path or configure and use an import alias. Then use the import name as the src value:\n\nImages in the public/ folder - use the image’s file path relative to the public folder:\n\nRemote images - use the image’s full URL as the property value:\n\nUse the required alt attribute to provide a string of descriptive alt text for images.\n\nIf an image is merely decorative (i.e. doesn’t contribute to the understanding of the page), set alt=\"\" so that screen readers and other assistive technologies know to ignore the image.\n\nThese properties define the dimensions to use for the image.\n\nWhen using images in their original aspect ratio, width and height are optional. These dimensions can be automatically inferred from image files located in src/. For remote images, add the inferSize attribute set to true on the <Image /> or <Picture /> component or use inferRemoteSize() function.\n\nHowever, both of these properties are required for images stored in your public/ folder as Astro is unable to analyze these files.\n\nAdded in: astro@3.3.0\n\nA list of pixel densities to generate for the image.\n\nIf provided, this value will be used to generate a srcset attribute on the <img> tag. Do not provide a value for widths when using this value.\n\nDensities that are equal to widths larger than the original image will be ignored to avoid upscaling the image.\n\nAdded in: astro@3.3.0\n\nA list of widths to generate for the image.\n\nIf provided, this value will be used to generate a srcset attribute on the <img> tag. A sizes property must also be provided.\n\nDo not provide a value for densities when using this value. Only one of these two values can be used to generate a srcset.\n\nWidths that are larger than the original image will be ignored to avoid upscaling the image.\n\nYou can optionally state the image file type output to be used.\n\nBy default, the <Image /> component will produce a .webp file.\n\nquality is an optional property that can either be:\n\na preset (low, mid, high, max) that is automatically normalized between formats.\n\na number from 0 to 100 (interpreted differently between formats).\n\nAdded in: astro@4.4.0\n\nAllows you to set the original width and height of a remote image automatically.\n\nBy default, this value is set to false and you must manually specify both dimensions for your remote image.\n\nAdd inferSize to the <Image /> component (or inferSize: true to getImage()) to infer these values from the image content when fetched. This is helpful if you don’t know the dimensions of the remote image, or if they might change:\n\ninferSize can fetch the dimensions of a remote image from a domain that has not been authorized, however the image itself will remain unprocessed.\n\nAdded in: astro@4.12.0\n\nA function to infer the dimensions of remote images. This can be used as an alternative to passing the inferSize property.\n\nIn addition to the properties above, the <Image /> component accepts all properties accepted by the HTML <img> tag.\n\nFor example, you can provide a class to the final <img> element.\n\nCurrently, there is no way to specify default values for all <Image /> components. Required attributes should be set on each individual component.\n\nAs an alternative, you can wrap these components in another Astro component for reuse. For example, you could create a component for your blog post images:\n\nAdded in: astro@3.3.0\n\nUse the built-in <Picture /> Astro component to display a responsive image with multiple formats and/or sizes.\n\n<Picture /> accepts all the properties of the <Image /> component, plus the following:\n\nAn array of image formats to use for the <source> tags. Entries will be added as <source> elements in the order they are listed, and this order determines which format is displayed. For the best performance, list the most modern format first (e.g. webp or avif). By default, this is set to ['webp'].\n\nFormat to use as a fallback value for the <img> tag.\n\nDefaults to .png for static images (or .jpg if the image is a JPG), .gif for animated images, and .svg for SVG files.\n\nAn object of attributes to be added to the <picture> tag.\n\nUse this property to apply attributes to the outer <picture> element itself. Attributes applied to the <Picture /> component directly will apply to the inner <img> element, except for those used for image transformation.\n\nThe Astro template syntax also supports writing an <img> tag directly, with full control over its final output. These images will not be processed and optimized.\n\nIt accepts all HTML <img> tag properties, and the only required property is src.\n\nLocal images must be imported from the relative path from the existing .astro file, or configure and use an import alias. Then, you can access the image’s src and other properties to use in the <img> tag.\n\nFor example, use the image’s own height and width properties to avoid CLS and improve Core Web Vitals.\n\nImported image assets match the following signature:\n\nFor images located within public/ use the image’s file path relative to the public folder as the src value:\n\nFor remote images, use the image’s full URL as the src value:\n\nThe <Image /> component optimizes your image and infers width and height (of local images) based on the original aspect ratio to avoid CLS.\n\nUse the HTML <img> element when you cannot use the <Image /> component, for example:\n\nfor unsupported image formats\n\nwhen you do not want your image optimized by Astro\n\nto access and change the src attribute dynamically client-side\n\nYou can configure lists of authorized image source URL domains and patterns for image optimization using image.domains and image.remotePatterns. This configuration is an extra layer of safety to protect your site when showing images from an external source.\n\nRemote images from other sources will not be optimized, but using the <Image /> component for these images will prevent Cumulative Layout Shift (CLS).\n\nFor example, the following configuration will only allow remote images from astro.build to be optimized:\n\nThe following configuration will only allow remote images from HTTPS hosts:\n\nImage CDNs work with all Astro image options. Use an image’s full URL as the src attribute in the <Image /> component, an <img> tag, or in Markdown notation. For image optimization with remote images, also configure your authorized domains or URL patterns.\n\nAlternatively, if the CDN provides a Node.js SDK, you can use that in your project. For example, Cloudinary’s SDK can generate an <img> tag with the appropriate src for you.\n\nUse standard Markdown ![alt](src) syntax in your .md files. This syntax works with Astro’s Image Service API to optimize your local images stored in src/. Remote images and images stored in the public/ folder are not optimized.\n\nThe <img> tag is not supported for local images, and the <Image /> component is unavailable in .md files.\n\nIf you require more control over your image attributes, we recommend using the .mdx file format, which allows you to include Astro’s <Image /> component or a JSX <img /> tag in addition to the Markdown syntax. Use the MDX integration to add support for MDX to Astro.\n\nYou can use Astro’s <Image /> component and JSX <img /> tags in your .mdx files by importing both the component and your image. Use them just as they are used in .astro files.\n\nAdditionally, there is support for standard Markdown ![alt](src) syntax with no import required.\n\nImages in content collections will be processed the same way they are in Markdown and MDX depending on which file type you are using.\n\nAdditionally, you can declare an associated image for a content collections entry, such as a blog post’s cover image, in your frontmatter using its path relative to the current folder:\n\nThe image helper for the content collections schema lets you validate the image metadata using Zod.\n\nThe image will be imported and transformed into metadata, allowing you to pass it as a src to <Image/>, <img>, or getImage().\n\nThe example below shows a blog index page that renders the cover photo and title of each blog post from the schema above:\n\nWhen adding images in a UI framework component, use the framework’s own image syntax to render an image (e.g. <img /> in JSX, <img> in Svelte).\n\nLocal images must first be imported to access their image properties such as src.\n\nThe <Image /> component, like any other Astro component, is unavailable to UI framework components.\n\nBut, you can pass the static content generated by <Image /> to a framework component inside a .astro file as children or using a named <slot/>:\n\nThe getImage() function is intended for generating images destined to be used somewhere else than directly in HTML, for example in an API Route. It also allows you to create your own custom <Image /> component.\n\ngetImage() takes an options object with the same properties as the Image component (except alt).\n\nIt returns an object with the following properties:\n\nNot all users can see images in the same way, so accessibility is an especially important concern when using images. Use the alt attribute to provide descriptive alt text for images.\n\nThis attribute is required for both the <Image /> and <Picture /> components. If no alt text is provided, a helpful error message will be provided reminding you to include the alt attribute.\n\nIf the image is merely decorative (i.e. doesn’t contribute to the understanding of the page), set alt=\"\" so that screen readers know to ignore the image.\n\nSharp is the default image service used for astro:assets. You can further configure the image service using the image.service option.\n\nIf you would prefer to use Squoosh to transform your images, update your config with the following:\n\nIf your adapter for server or hybrid mode does not support Astro’s built-in Squoosh and Sharp image optimization (e.g. Deno, Cloudflare), you can configure a no-op image service to allow you to use the <Image /> and <Picture /> components. Note that Astro does not perform any image transformation and processing in these environments. However, you can still enjoy the other benefits of using astro:assets, including no Cumulative Layout Shift (CLS), the enforced alt attribute, and a consistent authoring experience.\n\nConfigure the passthroughImageService() to avoid both Squoosh and Sharp image processing:\n\nThere are several third-party community image integrations for optimizing and working with images in your Astro project.\n\nLearn"
    }
}