{
    "id": "dbpedia_5039_3",
    "rank": 7,
    "data": {
        "url": "https://www.geeksforgeeks.org/collections-in-java-2/",
        "read_more_link": "",
        "language": "en",
        "title": "Collections in Java",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20240726145939/Collections-in-Java.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/difference-between-collection-and-collections-in-java/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2016-03-09T10:29:10",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/collections-in-java-2/",
        "text": "Any group of individual objects that are represented as a single unit is known as a Java Collection of Objects. In Java, a separate framework named the “Collection Framework” has been defined in JDK 1.2 which holds all the Java Collection Classes and Interface in it.\n\nIn Java, the Collection interface (java.util.Collection) and Map interface (java.util.Map) are the two main “root” interfaces of Java collection classes.\n\nWhat You Should Learn in Java Collections?\n\nWhat is a Framework in Java?\n\nA framework is a set of classes and interfaces which provide a ready-made architecture. In order to implement a new feature or a class, there is no need to define a framework. However, an optimal object-oriented design always includes a framework with a collection of classes such that all the classes perform the same kind of task. To get more about the framework in Java you can explore Java free programming course, this course\n\nNeed for a Separate Collection Framework in Java\n\nBefore the Collection Framework(or before JDK 1.2) was introduced, the standard methods for grouping Java objects (or collections) were Arrays or Vectors, or Hashtables. All of these collections had no common interface. Therefore, though the main aim of all the collections is the same, the implementation of all these collections was defined independently and had no correlation among them. And also, it is very difficult for the users to remember all the different methods, syntax, and constructors present in every collection class.\n\nLet’s understand this with an example of adding an element in a hashtable and a vector.\n\nExample:\n\nJava\n\n// Java program to demonstrate // why collection framework was needed importjava.io.*; importjava.util.*; class CollectionDemo{ publicstaticvoidmain(String[]args) { // Creating instances of the array, // vector and hashtable intarr[]=newint[]{1,2,3,4}; Vector<Integer>v=newVector(); Hashtable<Integer,String>h=newHashtable(); // Adding the elements into the // vector v.addElement(1); v.addElement(2); // Adding the element into the // hashtable h.put(1,\"geeks\"); h.put(2,\"4geeks\"); // Array instance creation requires [], // while Vector and hastable require () // Vector element insertion requires addElement(), // but hashtable element insertion requires put() // Accessing the first element of the // array, vector and hashtable System.out.println(arr[0]); System.out.println(v.elementAt(0)); System.out.println(h.get(1)); // Array elements are accessed using [], // vector elements using elementAt() // and hashtable elements using get() } }\n\nOutput\n\n1 1 geeks\n\nAs we can observe, none of these collections(Array, Vector, or Hashtable) implements a standard member access interface, it was very difficult for programmers to write algorithms that can work for all kinds of Collections. Another drawback is that most of the ‘Vector’ methods are final, meaning we cannot extend the ’Vector’ class to implement a similar kind of Collection. Therefore, Java developers decided to come up with a common interface to deal with the above-mentioned problems and introduced the Collection Framework in JDK 1.2 post which both, legacy Vectors and Hashtables were modified to conform to the Collection Framework.\n\nAdvantages of the Java Collection Framework\n\nSince the lack of a collection framework gave rise to the above set of disadvantages, the following are the advantages of the collection framework.\n\nConsistent API: The API has a basic set of interfaces like Collection, Set, List, or Map, all the classes (ArrayList, LinkedList, Vector, etc) that implement these interfaces have some common set of methods.\n\nReduces programming effort: A programmer doesn’t have to worry about the design of the Collection but rather he can focus on its best use in his program. Therefore, the basic concept of Object-oriented programming (i.e.) abstraction has been successfully implemented.\n\nIncreases program speed and quality: Increases performance by providing high-performance implementations of useful data structures and algorithms because in this case, the programmer need not think of the best implementation of a specific data structure. He can simply use the best implementation to drastically boost the performance of his algorithm/program.\n\nHierarchy of the Collection Framework in Java\n\nThe utility package, (java.util) contains all the classes and interfaces that are required by the collection framework. The collection framework contains an interface named an iterable interface which provides the iterator to iterate through all the collections. This interface is extended by the main collection interface which acts as a root for the collection framework. All the collections extend this collection interface thereby extending the properties of the iterator and the methods of this interface. The following figure illustrates the hierarchy of the collection framework.\n\nBefore understanding the different components in the above framework, let’s first understand a class and an interface.\n\nClass: A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type.\n\nInterface: Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, nobody). Interfaces specify what a class must do and not how. It is the blueprint of the class.\n\nMethods of the Collection Interface\n\nThis interface contains various methods which can be directly used by all the collections which implement this interface. They are:\n\nMethod\n\nDescription\n\nadd(Object)This method is used to add an object to the collection.addAll(Collection c)This method adds all the elements in the given collection to this collection.clear()This method removes all of the elements from this collection.contains(Object o)This method returns true if the collection contains the specified element.containsAll(Collection c)This method returns true if the collection contains all of the elements in the given collection.equals(Object o)This method compares the specified object with this collection for equality.hashCode()This method is used to return the hash code value for this collection.isEmpty()This method returns true if this collection contains no elements.iterator()This method returns an iterator over the elements in this collection.max()\n\nThis method is used to return the maximum value present in the collection.parallelStream()This method returns a parallel Stream with this collection as its source.remove(Object o)This method is used to remove the given object from the collection. If there are duplicate values, then this method removes the first occurrence of the object.removeAll(Collection c)This method is used to remove all the objects mentioned in the given collection from the collection.removeIf(Predicate filter)This method is used to remove all the elements of this collection that satisfy the given predicate.retainAll(Collection c)This method is used to retain only the elements in this collection that are contained in the specified collection.size()This method is used to return the number of elements in the collection.spliterator()This method is used to create a Spliterator over the elements in this collection.stream()This method is used to return a sequential Stream with this collection as its source.toArray()This method is used to return an array containing all of the elements in this collection.\n\nInterfaces that Extend the Java Collections Interface\n\nThe collection framework contains multiple interfaces where every interface is used to store a specific type of data. The following are the interfaces present in the framework.\n\n1. Iterable Interface\n\nThis is the root interface for the entire collection framework. The collection interface extends the iterable interface. Therefore, inherently, all the interfaces and classes implement this interface. The main functionality of this interface is to provide an iterator for the collections. Therefore, this interface contains only one abstract method which is the iterator. It returns the\n\nIterator iterator();\n\n2. Collection Interface\n\nThis interface extends the iterable interface and is implemented by all the classes in the collection framework. This interface contains all the basic methods which every collection has like adding the data into the collection, removing the data, clearing the data, etc. All these methods are implemented in this interface because these methods are implemented by all the classes irrespective of their style of implementation. And also, having these methods in this interface ensures that the names of the methods are universal for all the collections. Therefore, in short, we can say that this interface builds a foundation on which the collection classes are implemented.\n\n3. List Interface\n\nThis is a child interface of the collection interface. This interface is dedicated to the data of the list type in which we can store all the ordered collections of the objects. This also allows duplicate data to be present in it. This list interface is implemented by various classes like ArrayList, Vector, Stack, etc. Since all the subclasses implement the list, we can instantiate a list object with any of these classes.\n\nFor example:\n\nList <T> al = new ArrayList<> ();\n\nList <T> ll = new LinkedList<> ();\n\nList <T> v = new Vector<> ();\n\nWhere T is the type of the object\n\nThe classes which implement the List interface are as follows:\n\ni). ArrayList\n\nArrayList provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. The size of an ArrayList is increased automatically if the collection grows or shrinks if the objects are removed from the collection. Java ArrayList allows us to randomly access the list. ArrayList can not be used for primitive types, like int, char, etc. We will need a wrapper class for such cases.\n\nLet’s understand the ArrayList with the following example:\n\nJava\n\n// Java program to demonstrate the // working of ArrayList importjava.io.*; importjava.util.*; class GFG{ // Main Method publicstaticvoidmain(String[]args) { // Declaring the ArrayList with // initial size n ArrayList<Integer>al=newArrayList<Integer>(); // Appending new elements at // the end of the list for(inti=1;i<=5;i++) al.add(i); // Printing elements System.out.println(al); // Remove element at index 3 al.remove(3); // Displaying the ArrayList // after deletion System.out.println(al); // Printing elements one by one for(inti=0;i<al.size();i++) System.out.print(al.get(i)+\" \"); } }\n\nOutput\n\n[1, 2, 3, 4, 5] [1, 2, 3, 5] 1 2 3 5\n\nii). LinkedList\n\nThe LinkedList class is an implementation of the LinkedList data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node.\n\nLet’s understand the LinkedList with the following example:\n\nJava\n\n// Java program to demonstrate the // working of LinkedList importjava.io.*; importjava.util.*; class GFG{ // Main Method publicstaticvoidmain(String[]args) { // Declaring the LinkedList LinkedList<Integer>ll=newLinkedList<Integer>(); // Appending new elements at // the end of the list for(inti=1;i<=5;i++) ll.add(i); // Printing elements System.out.println(ll); // Remove element at index 3 ll.remove(3); // Displaying the List // after deletion System.out.println(ll); // Printing elements one by one for(inti=0;i<ll.size();i++) System.out.print(ll.get(i)+\" \"); } }\n\nOutput\n\n[1, 2, 3, 4, 5] [1, 2, 3, 5] 1 2 3 5\n\niii). Vector\n\nA vector provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. This is identical to ArrayList in terms of implementation. However, the primary difference between a vector and an ArrayList is that a Vector is synchronized and an ArrayList is non-synchronized.\n\nLet’s understand the Vector with an example:\n\nJava\n\n// Java program to demonstrate the // working of Vector importjava.io.*; importjava.util.*; class GFG{ // Main Method publicstaticvoidmain(String[]args) { // Declaring the Vector Vector<Integer>v=newVector<Integer>(); // Appending new elements at // the end of the list for(inti=1;i<=5;i++) v.add(i); // Printing elements System.out.println(v); // Remove element at index 3 v.remove(3); // Displaying the Vector // after deletion System.out.println(v); // Printing elements one by one for(inti=0;i<v.size();i++) System.out.print(v.get(i)+\" \"); } }\n\nOutput\n\n[1, 2, 3, 4, 5] [1, 2, 3, 5] 1 2 3 5\n\niv). Stack\n\nStack class models and implements the Stack data structure. The class is based on the basic principle of last-in-first-out. In addition to the basic push and pop operations, the class provides three more functions empty, search, and peek. The class can also be referred to as the subclass of Vector.\n\nLet’s understand the stack with an example:\n\nJava\n\n// Java program to demonstrate the // working of a stack importjava.util.*; publicclass GFG{ // Main Method publicstaticvoidmain(Stringargs[]) { Stack<String>stack=newStack<String>(); stack.push(\"Geeks\"); stack.push(\"For\"); stack.push(\"Geeks\"); stack.push(\"Geeks\"); // Iterator for the stack Iterator<String>itr=stack.iterator(); // Printing the stack while(itr.hasNext()){ System.out.print(itr.next()+\" \"); } System.out.println(); stack.pop(); // Iterator for the stack itr=stack.iterator(); // Printing the stack while(itr.hasNext()){ System.out.print(itr.next()+\" \"); } } }\n\nOutput\n\nGeeks For Geeks Geeks Geeks For Geeks\n\nNote: Stack is a subclass of Vector and a legacy class. It is thread-safe which might be overhead in an environment where thread safety is not needed. An alternate to Stack is to use ArrayDequeue which is not thread-safe and has faster array implementation.\n\n4. Queue Interface\n\nAs the name suggests, a queue interface maintains the FIFO(First In First Out) order similar to a real-world queue line. This interface is dedicated to storing all the elements where the order of the elements matter. For example, whenever we try to book a ticket, the tickets are sold on a first come first serve basis. Therefore, the person whose request arrives first into the queue gets the ticket. There are various classes like PriorityQueue, ArrayDeque, etc. Since all these subclasses implement the queue, we can instantiate a queue object with any of these classes.\n\nFor example:\n\nQueue <T> pq = new PriorityQueue<> ();\n\nQueue <T> ad = new ArrayDeque<> ();\n\nWhere T is the type of the object.\n\nThe most frequently used implementation of the queue interface is the PriorityQueue.\n\nPriority Queue\n\nA PriorityQueue is used when the objects are supposed to be processed based on priority. It is known that a queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority and this class is used in these cases. The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used.\n\nLet’s understand the priority queue with an example:\n\nJava\n\n// Java program to demonstrate the working of // priority queue in Java importjava.util.*; class GfG{ // Main Method publicstaticvoidmain(Stringargs[]) { // Creating empty priority queue PriorityQueue<Integer>pQueue =newPriorityQueue<Integer>(); // Adding items to the pQueue using add() pQueue.add(10); pQueue.add(20); pQueue.add(15); // Printing the top element of PriorityQueue System.out.println(pQueue.peek()); // Printing the top element and removing it // from the PriorityQueue container System.out.println(pQueue.poll()); // Printing the top element again System.out.println(pQueue.peek()); } }\n\nOutput\n\n10 10 15\n\n5. Deque Interface\n\nThis is a very slight variation of the queue data structure. Deque, also known as a double-ended queue, is a data structure where we can add and remove elements from both ends of the queue. This interface extends the queue interface. The class which implements this interface is ArrayDeque. Since ArrayDeque class implements the Deque interface, we can instantiate a deque object with this class.\n\nFor example:\n\nDeque<T> ad = new ArrayDeque<> ();\n\nWhere T is the type of the object.\n\nThe class which implements the deque interface is ArrayDeque.\n\nArrayDeque\n\nArrayDeque class which is implemented in the collection framework provides us with a way to apply resizable array. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue. Array deques have no capacity restrictions and they grow as necessary to support usage.\n\nLet’s understand ArrayDeque with an example:\n\nJava\n\n// Java program to demonstrate the // ArrayDeque class in Java importjava.util.*; publicclass ArrayDequeDemo{ publicstaticvoidmain(String[]args) { // Initializing an deque ArrayDeque<Integer>de_que =newArrayDeque<Integer>(10); // add() method to insert de_que.add(10); de_que.add(20); de_que.add(30); de_que.add(40); de_que.add(50); System.out.println(de_que); // clear() method de_que.clear(); // addFirst() method to insert the // elements at the head de_que.addFirst(564); de_que.addFirst(291); // addLast() method to insert the // elements at the tail de_que.addLast(24); de_que.addLast(14); System.out.println(de_que); } }\n\nOutput\n\n[10, 20, 30, 40, 50] [291, 564, 24, 14]\n\n6. Set Interface\n\nA set is an unordered collection of objects in which duplicate values cannot be stored. This collection is used when we wish to avoid the duplication of the objects and wish to store only the unique objects. This set interface is implemented by various classes like HashSet, TreeSet, LinkedHashSet, etc. Since all the subclasses implement the set, we can instantiate a set object with any of these classes.\n\nFor example:\n\nSet<T> hs = new HashSet<> ();\n\nSet<T> lhs = new LinkedHashSet<> ();\n\nSet<T> ts = new TreeSet<> ();\n\nWhere T is the type of the object.\n\nThe following are the classes that implement the Set interface:\n\ni). HashSet\n\nThe HashSet class is an inherent implementation of the hash table data structure. The objects that we insert into the HashSet do not guarantee to be inserted in the same order. The objects are inserted based on their hashcode. This class also allows the insertion of NULL elements. Let’s understand HashSet with an example:\n\nJava\n\n// Java program to demonstrate the // working of a HashSet importjava.util.*; publicclass HashSetDemo{ // Main Method publicstaticvoidmain(Stringargs[]) { // Creating HashSet and // adding elements HashSet<String>hs=newHashSet<String>(); hs.add(\"Geeks\"); hs.add(\"For\"); hs.add(\"Geeks\"); hs.add(\"Is\"); hs.add(\"Very helpful\"); // Traversing elements Iterator<String>itr=hs.iterator(); while(itr.hasNext()){ System.out.println(itr.next()); } } }\n\nOutput\n\nVery helpful Geeks For Is\n\nii). LinkedHashSet\n\nA LinkedHashSet is very similar to a HashSet. The difference is that this uses a doubly linked list to store the data and retains the ordering of the elements.\n\nLet’s understand the LinkedHashSet with an example:\n\nJava\n\n// Java program to demonstrate the // working of a LinkedHashSet importjava.util.*; publicclass LinkedHashSetDemo{ // Main Method publicstaticvoidmain(Stringargs[]) { // Creating LinkedHashSet and // adding elements LinkedHashSet<String>lhs =newLinkedHashSet<String>(); lhs.add(\"Geeks\"); lhs.add(\"For\"); lhs.add(\"Geeks\"); lhs.add(\"Is\"); lhs.add(\"Very helpful\"); // Traversing elements Iterator<String>itr=lhs.iterator(); while(itr.hasNext()){ System.out.println(itr.next()); } } }\n\nOutput\n\nGeeks For Is Very helpful\n\n7. Sorted Set Interface\n\nThis interface is very similar to the set interface. The only difference is that this interface has extra methods that maintain the ordering of the elements. The sorted set interface extends the set interface and is used to handle the data which needs to be sorted. The class which implements this interface is TreeSet. Since this class implements the SortedSet, we can instantiate a SortedSet object with this class.\n\nFor example:\n\nSortedSet<T> ts = new TreeSet<> ();\n\nWhere T is the type of the object.\n\nThe class which implements the sorted set interface is TreeSet.\n\nTreeSet\n\nThe TreeSet class uses a Tree for storage. The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided. This must be consistent with equals if it is to correctly implement the Set interface. It can also be ordered by a Comparator provided at a set creation time, depending on which constructor is used.\n\nLet’s understand TreeSet with an example:\n\nJava\n\n// Java program to demonstrate the // working of a TreeSet importjava.util.*; publicclass TreeSetDemo{ // Main Method publicstaticvoidmain(Stringargs[]) { // Creating TreeSet and // adding elements TreeSet<String>ts=newTreeSet<String>(); ts.add(\"Geeks\"); ts.add(\"For\"); ts.add(\"Geeks\"); ts.add(\"Is\"); ts.add(\"Very helpful\"); // Traversing elements Iterator<String>itr=ts.iterator(); while(itr.hasNext()){ System.out.println(itr.next()); } } }\n\nOutput\n\nFor Geeks Is Very helpful\n\n8. Map Interface\n\nA map is a data structure that supports the key-value pair for mapping the data. This interface doesn’t support duplicate keys because the same key cannot have multiple mappings, however, it allows duplicate values in different keys. A map is useful if there is data and we wish to perform operations on the basis of the key. This map interface is implemented by various classes like HashMap, TreeMap, etc. Since all the subclasses implement the map, we can instantiate a map object with any of these classes.\n\nFor example:\n\nMap<T> hm = new HashMap<> ();\n\nMap<T> tm = new TreeMap<> ();\n\nWhere T is the type of the object.\n\nThe frequently used implementation of a Map interface is a HashMap.\n\nHashMap\n\nHashMap provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs. To access a value in a HashMap, we must know its key. HashMap uses a technique called Hashing. Hashing is a technique of converting a large String to a small String that represents the same String so that the indexing and search operations are faster. HashSet also uses HashMap internally.\n\nLet’s understand the HashMap with an example:\n\nJava\n\n// Java program to demonstrate the // working of a HashMap importjava.util.*; publicclass HashMapDemo{ // Main Method publicstaticvoidmain(Stringargs[]) { // Creating HashMap and // adding elements HashMap<Integer,String>hm =newHashMap<Integer,String>(); hm.put(1,\"Geeks\"); hm.put(2,\"For\"); hm.put(3,\"Geeks\"); // Finding the value for a key System.out.println(\"Value for 1 is \"+hm.get(1)); // Traversing through the HashMap for(Map.Entry<Integer,String>e:hm.entrySet()) System.out.println(e.getKey()+\" \" +e.getValue()); } }\n\nOutput\n\nValue for 1 is Geeks 1 Geeks 2 For 3 Geeks"
    }
}