{
    "id": "correct_subsidiary_00130_1",
    "rank": 81,
    "data": {
        "url": "https://xbrlus.github.io/docs/tdh.html",
        "read_more_link": "",
        "language": "en",
        "title": "XBRL Taxonomy Development Handbook",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://xbrlus.github.io/docs/images/thd_v10_001.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_002.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_003.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_004.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_005.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_006.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_007.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_008.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_009.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_010.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_011.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_012.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_012a.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_013.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_026a.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_014.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_014a.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_014b.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_015.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_016.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_017.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_018.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_019.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_019a.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_019b.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_019c.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_019d.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_019e.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_019f.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_020.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_021.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_022.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_023.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_024.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_025.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_026.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_027.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_028.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_029.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_030.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_031.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_032.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_033.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_034.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_035.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_035a.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_035b.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_036.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_037.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_038.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_038a.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038b.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038c.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038d.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038e.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038f.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038g.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038h.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038i.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038j.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038k.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038l.gif",
            "https://xbrlus.github.io/docs/images/tdh_v10_038m.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_039.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_040.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_041.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_042.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_043.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_044.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_045.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_046.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_047.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_048.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_049.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_050.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_051.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_051a.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_052.jpg",
            "https://xbrlus.github.io/docs/images/tdh_v10_052a.gif",
            "https://xbrlus.github.io/docs/images/thd_v10_053.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_054.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_055.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_056.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_057.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_058.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_059.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_060.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_061.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_062.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_063.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_064.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_065.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_066.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_067.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_068.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_069.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_070.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_071.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_072.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_073.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_074.jpg",
            "https://xbrlus.github.io/docs/images/thd_v10_075.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "https://xbrl.us/wp-content/themes/xbrl-jurisdiction/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "A Guide for XBRL Taxonomy Developers\n\nFirst Edition (July 2020)\n\nThe Taxonomy Development Handbook (TDH) is a comprehensive guide that directs regulators, industry experts, and businesses through a practical, consistent roadmap to building high quality data standards using XBRL.\n\nTable of Contents\n\n1 Introduction 1 7.4 The Importance of Public Exposure 108 1.1 Overview 1 7.5 Guidance 109 1.2 XBRL US and Its Mission 2 8 Documenting a Taxonomy 111 1.3 XBRL: the eXtensible Business Reporting Language 2 8.1 How to Use This Chapter 112 1.4 What Is in this Document 7 8.2 The Taxonomy White Paper 113 2 An Introduction to XBRL 11 8.3 The Taxonomy Guide 113 2.1 eXtensible Business Reporting Language 11 8.4 The Preparer Guide 117 2.2 How Does XBRL Represent Data? 15 8.5 The Data Consumer Guide 122 2.3 Machine-readability 27 8.6 Updates and Release Notes 126 2.4 The Taxonomy 29 9 Taxonomy Governance 127 3 Structuring Data 37 9.1 The Taxonomy Lifecycle 127 3.1 Introduction 37 9.2 Effective Communication 133 3.2 Typical Data 37 10 Success Stories 135 3.3 Creating an XBRL Data Model 40 10.1 Banking in the United States 135 3.4 Components of an XBRL Data Model 46 10.2 Business to Government Reporting 137 3.5 Implementing the XBRL Data Model 50 10.3 Work-in-Process Reporting for Surety Underwriting 138 3.6 Extensibility 56 10.4 Public Company Reporting in the United States 140 3.7 Moving Forward 57 10.5 Gathering and Analyzing Financial Reporting Data 142 4 Assessing Overall Project Scope 59 10.6 Improving Data Consistency with Validation Rules 146 4.1 Define the Project's Goals 59 Appendix A XBRL and XML Supporting Information 149 4.2 Identifying and Engaging Stakeholders 61 A.1 XML Overview 149 4.3 Define the Scope of the Taxonomy 62 A.2 Common XBRL Linkbases 155 4.4 Identifying Relevant Systems 63 A.3 Common and Core XBRL Data Types 156 4.5 Identifying Regulatory or NGO Requirements 63 A.4 Common XBRL Unit Types 161 4.6 Other Requirements and Considerations 63 A.5 Common and Extended XBRL Label Roles 164 4.7 Measuring Success 67 A.6 Transport Format 167 5 Building a Transport Data Model 69 Appendix B Taxonomy Creation Checklist 191 5.1 Getting Started 69 Appendix C Taxonomy White Paper Outline and Template 193 5.2 Developing a Model 69 Appendix D XBRL Overview Outline and Template 195 5.3 Transforming a Data Model to a Transport Model 73 Appendix E Taxonomy Guide Outline and Template 201 5.4 Reporting System Design 79 Appendix F Preparer Guide Outline and Template 207 5.5 Other Modeling Considerations and Common Pitfalls 83 Appendix G Data Consumer Guide Outline and Template 213 6 Validation 87 Appendix H XBRL US - Taxonomy Approval Metrics 217 6.1 Basic Validation 87 Appendix I Intellectual Property Status 221 6.2 Regulatory/Industry Requirements 88 I.1 Terms and Conditions: XBRL US Public Review 221 7 The Mechanics of Taxonomy Development 97 Appendix J Document Revision Status 223 7.1 Workflow 97 Appendix K Revisions and Public Comments 225 7.2 Preparing and Generating the Taxonomy 98 Glossary 227 7.3 Using Arelle 106 Index 241\n\nPDF of this document || Samples, templates and widget taxonomy referenced in this document (.zip)\n\nPreface\n\nIn 2016, I was asked by XBRL US: \"can we make a guide to help people and organizations build XBRL taxonomies?\" This handbook is that guide, and it is the result of the efforts of many people and organizations as part of the XBRL US Domain Steering Committee over the past few years.\n\nUp until now, the information available from XBRL International and XBRL US about XBRL was highly technical. While satisfying the need for specifications, these documents do not give an easy, \"all-in-one\" source of information about development using the XBRL platform. To put it simply: there was a wealth of information about what XBRL is, but there was a sharp lack of an explanation about how to use it effectively to transport and organize data. Therefore, the primary objective of the Taxonomy Development Handbook is to bridge this gap between technical description and practical application. It does this while providing an easy to understand introduction to XBRL and its capabilities, with a great deal of focus on how to build and maintain a taxonomy. Ideally, using this handbook the uninitiated can get a grasp of the XBRL model and terminology with only a few hours of study. In addition, we cover the high points of how to get an XBRL development project started, basic taxonomy documentation requirements, how to oversee the implementation of standards, and ways to manage the ongoing maintenance of a taxonomy.\n\nXBRL is uniquely suited to represent structured data for reporting purposes, and the information it expresses is comparable across different reports and historically stable. There is no other format or specification that provides support for unique data point identification, time domain structure, and the expression of multi-dimensionality all while describing a semantic data model. In addition, a data consumption system can examine an XBRL fact and have a well-defined understanding of its meaning and disclosure purpose without looking beyond the taxonomy itself, which is efficient in both time and cost.\n\nI believe XBRL is uniquely positioned to address the needs of many data providers, regulators, analysts, aggregators, and consumers. It is used all over the world in various forms to answer regulatory and private sector data exchange requirements. As Campbell Pryde, the President and CEO of XBRL, stated, \"up until now, XBRL is the best kept secret\" when addressing the volume of need and opportunities for structured data. We think it is high time this secret be made open and obvious for data communities. With this document, we think XBRL is ready to be discovered as a robust, powerful, and flexible data transport tool.\n\nAs set out in the mission for the Domain Steering Committee, our goal is to support the technology and development efforts of XBRL US necessary to meet the business reporting needs of key markets in the United States. This includes approving taxonomy development work, performing quality control, providing feedback to working groups, and guiding taxonomy developers in designing their own XBRL solutions. Hopefully this document is your first step to a successful project. XBRL US and the Domain Steering Committee stand ready to assist you in your efforts.\n\nScott A. Theis\n\nChairman, Domain Steering Committee, XBRL US\n\nPresident/CEO, Novaworks, LLC\n\n1 Introduction\n\n1.1 Overview\n\n1.1.1Scope and Goal\n\nThe purpose of this document is to provide a basic reference and useful guidelines for XBRL taxonomy development, implementation, and maintenance. Sections of this document discuss XBRL, why it was created, its advantages as a data transport tool, and how it compares to other systems. Other parts focus on proper taxonomy creation, covering the importance of how a taxonomy is designed, controlled, and implemented to maintain usability and data integrity. Since XBRL is more than a simple data transport mechanism, a well-defined data structure is critical to successful deployment. As such, this guide will also review certain aspects of system development, including data modeling, the mechanics of taxonomy development, and defining guidelines for the end result. Finally, any XBRL taxonomy is only as powerful as how well it is governed. Methods for maintaining a taxonomy once it has been designed and implemented to ensure proper validation, transmission, reception, and interpretation are discussed.\n\nIn total, this document will hopefully provide useful instruction and guidance so that taxonomy developers can be successful in creating and implementing their own XBRL taxonomy, no matter the circumstances, constraints, and requirements of their project. Although this document proceeds in a linear, \"story-telling\"-like fashion, readers should feel free to skip parts or any section not relevant to their needs or if the content is already familiar to them.\n\n1.1.2Audience\n\nThis document has been written to provide the reader with basic information to get started in the development of an XBRL taxonomy. The reader is assumed to have some familiarity with business data models, and it is assumed that the reader is either researching, or has been tasked with, building a system to transport and redistribute business or business-like data. A familiarity with XBRL is not required; XBRL constructs will be explained in detail so inexperienced readers can be introduced to necessary ideas as they follow along in the process of taxonomy development. XML experience is also not required as this guide will again instruct readers in the pertinent details and direct them to outside resources for more information.\n\nAt the end of the journey, readers should have the knowledge to put a data reporting system in place that answers all their specified requirements and is easy to understand, easy to implement, and extensible as required and desired.\n\n1.1.3Terminology\n\nBecause XBRL is an evolving, open-source entity, there are multiple ways of documenting and describing it. Readers who are familiar with XBRL/XML may be surprised by some of the new and different terminology used within this guide. These vocabulary choices are the result of a combination of things. First, to be in alignment with the proposed XBRL Open Information Model, certain terms such as \"context\" have been refined to a particular situation. More flexible terms, such as \"dimension\", have been selected instead. Choices like these were made to ensure the terms used in this document will be in alignment with current business and information systems modeling vocabulary while staying true to the underlying meaning and capabilities of XBRL. Second, through knowledge and experience, the authors of this document have tried to clean up and make consistent some of the terminology used in the past and avoid the blanket use of various ambiguous words such as \"properties,\" \"meta data,\" or \"attributes.\" Third, while XBRL has commonly been implemented to express accounting information, accounting is only a subset of the overall reporting capabilities of XBRL. Therefore, examples and terminology have been employed in this document to represent a general, wider range of reporting environments and circumstances.\n\nReaders should also note in the following chapters the term dimension can refer to both the dimensionality of the data model and the XBRL construct dimension. Sometimes these are truly interchangeable, as data model dimensionality is represented in XBRL with XBRL dimensions and dimensional constructs. However, if the text specifically refers to the dimensionality of the data model, it will be termed a data dimension. If the text is describing an XBRL construct, it will be termed an XBRL dimension.\n\nIn a similar vein, to distinguish between originating data models and the XBRL representations of them, data model line items or columns are capitalized in the text and match the examples typically provided in tables or figures. XBRL concept names follow the guidelines of the XBRL US Style Guide and are presented in upper camel case. Values (such as fact values or property values) are shown in quotation marks (such as \"12.5\" or \"true\").\n\n1.1.4The End Result\n\nNo matter the industry, specific requirements, or reporting needs, the ultimate goal at the end of the taxonomy development process is to create data that is meaningful to consumers. This is true regardless of what that data is and whether it is consumed in real time or collected in offline analyses. The accuracy, usability, and predictability for the consumer is vitally important, and the end product of development should be robust enough to deliver consistent results on all of these fronts. Balanced with this, though, the burden placed on the preparers must be reasonable. There should not be significant requirements for preparers that seem too complicated or byzantine, and the amount of time and cost associated with preparing and validating reports cannot be prohibitive. The solution, whatever it is, must be maintainable and open to future changes, which also means it must be self-describing, so those changes do not cause disruption for data consumers and preparers alike.\n\nXBRL accomplishes these aims and can produce this important end result: usable, meaningful data. XBRL is a method of transporting data in a way that is self-describing and self-contained. An XBRL taxonomy can serve as the center of any information supply chain, connecting preparers to consumers in a structured, logical way.\n\n1.2 XBRL US and Its Mission\n\nXBRL US is the non-profit consortium for XBRL business reporting standards in the United States. It is the US jurisdiction of XBRL International (XII). While XII is responsible for maintaining the technical XBRL specification, XBRL US focuses on education, awareness building, advocacy, and development work in the United States' marketplace. XBRL US is a membership organization, and its membership represents many links within the business information supply chain, including accounting firms, businesses, data providers, data consumers, software providers, database and analytical tool providers, as well as other nonprofit organizations. The mission of XBRL US is to support the implementation of business reporting standards through the development of taxonomies for use by the public and private sectors within the US, with a goal of interoperability between sectors, and by promoting XBRL adoption through marketplace collaboration.\n\nXBRL US has developed taxonomies for financial accounting, as well as credit rating and mutual fund reporting under contract with the United States Securities and Exchange Commission. It has also developed industry-specific taxonomies for corporate actions, solar financing, surety processing, and municipal financial reporting.\n\nXBRL US' website features access to a repository database for XBRL information and an application programming interface (API) for software development. The underlying code for the repository and API is available so members can setup private databases. This is an important part of the overall mission of XBRL US: to provide for consistent structure, useful tools, and guidelines for data integrity for the current and eventual consumers of XBRL.\n\nThis document is just one of XBRL US' many educational and outreach efforts to promote stable and standardized reporting of business information. For more information and other resources, visit XBRL US' website at https://xbrl.us/.\n\n1.3 XBRL: the eXtensible Business Reporting Language\n\n1.3.1XBRL Provides a Platform to Give Data Meaning\n\nThis is the age of big data, and people have an expectation that any piece of information should be readily available at their fingertips. Furthermore, not only should that information be accessible, but the exact form in which it is presented must be suited to an individual's or an organization's specific needs. Whether information is gathered using an everyday search engine or specialized software (that may analyze\n\neverything from vehicle movements to smart phone habits), having the right data in the right format is key. A lack of depth, context, and consistency significantly reduces the data's usefulness and the ability of consumers to interpret the information. Despite advances in data science, conveying the deeper meaning of information is a continuing struggle. The consistency and integrity of the data itself is important, but how can that data be interpreted meaningfully without context? For example, some data points can be very simple: \"on/off\" (or 1 and 0). However, this binary representation of information says very little. What is on or off? When is it on or off? In order to know more, a concept must be added: the \"light\" is \"on.\" Even more information can be appended through additional concepts. A location can be specified: the \"porch\" \"light\" is \"on.\" A time may be indicated as well, which leads to a more interpretable statement of data: the \"porch\" \"light\" is \"on\" at \"18:05 UTC.\"\n\nWithout the ability to provide this type of meaningful information about a data point, most people would agree that the value of the data diminishes. Data standards that focus on the interchange of data points are designed to provide additional context about data so systems and analysts can manage and utilize that data appropriately. Further, these types of data standards must also provide a semantic framework for that meaning to be interpreted appropriately by an external computer system or person.\n\nBefore examining standards like these, the process of assigning meaning to data should be examined a little more closely. What meaning needs to be included with a data point to make certain it is clearly understood between systems and people will be the first part of determining how that data and its relevant contextual information needs to be structured.\n\nFigure 1-1. Possible types of information that could accompany a simple numeric data point\n\nOn the left side of Figure 1-1, there is a piece of primitive numeric data: \"1234.\" On its own, that data point only relays information to a reader if that recipient is already familiar with its context and purpose. For the purposes of this discussion, that data point can be referred to as a fact. In layers, meaning can be added to the fact by defining precision, scaling, units, and other similar information. Contextual meaning can also be supplied through another layer containing information such as time and location.\n\nFinally, the fact can be identified with a concept. Depending on the semantic component of the standard being used to represent the data, this conceptual information could be quite detailed and include a wealth\n\nof additional meaning. As mentioned previously, structured data standards offer defined systems to represent data in this way, by adding layers of meaningful context that provide useful, pre-determined ways to interpret that data. XBRL is one such standard.\n\n1.3.2Background\n\nAt the turn of the century, an effort was undertaken to effectively represent business information for relaying and reporting data to government agencies. XBRL was born to address the idea of globally exchanging business information in a standard format. Beginning in 1998, numerous accountants and other business specialists, including the American Institute of Certified Public Accountants (AICPA), worked together to develop the early XBRL specifications and form what would eventually become XBRL International. The first XBRL specification was published in July 2000. The XBRL Specification, which has been stable since its release, was introduced in December 2003. Since then, XBRL has become widely used as a standard of transmitting structured business information.\n\n1.3.3Conveying Information\n\nCompanies report data to regulators and other entities using a multitude of syntactical formats, such as PDF, Excel, CSV, XML, JSON or through direct database entry into custom systems. Each of these formats was designed and selected with principal requirements in mind. For example, for PDF, or Portable Document Format, the name is self-explanatory; while the format may be employed for other purposes, it is primarily meant to exchange documents reliably between computers. The data in PDF documents is not always intended to be extracted as individual facts. Quite often the reporting or data exchange requirements in a situation dictate the data format and systems involved.\n\nUnfortunately, many organizations and agencies today do not use a consistent data format, either across agencies or even within a single organization. A data consumer receiving information in different formats must then use different methods to extract and use it, which can further confound the lack of consistency. Furthermore, not all formats can be processed equally by computers. For example, a PDF document, though generally readable by people, is not guaranteed to contain textual information that can be parsed and interpreted by a computer. This makes using data in a PDF report and other formats difficult. The lack of structure among formats and systems tends to lead to an inability to gather, analyze, and collect information in a systemized manner. One could take two PDF reports and note and compare their data, but this task becomes significantly more arduous when there are hundreds or thousands of reports to compare. In addition, the way in which one reporting entity expresses a data point may not be consistent with how other entities represent the same information. How can a data consumer relate information presented in such disparate manners?\n\nCorporate regulators have tackled this problem by introducing mandates requiring reporting entities to produce data using XBRL. Such mandates supply government officials and investors with well-structured and well-defined data that can be utilized in a variety of ways without the loss of meaning that is typically encountered when information is moved from one system to another.\n\nXBRL offers a wealth of information about data without cluttering each data point with unnecessary properties by using taxonomies, which are standardized documents that describe concepts and their relationships. Taxonomies can contain information as simple as geographic locations or as complex as United States Generally Accepted Accounting Principles (US GAAP) financial standards. XBRL data can also employ multiple taxonomies to bridge data across multiple sectors or industries. XBRL's ability to \"tag\" unstructured data as well as traditional data makes it ideal for exchanging a wide variety of rich information between systems. When data is tagged in XBRL, the destination system knows to what the data applies, to what it relates, what time frame is being reported, the unit or language of numeric or textual data respectively, the type and precision of the data, and finally, what standard or rule is used to generate the data point. Also, because the XBRL format is self-describing, XBRL software can provide additional functionality, such as validation and mathematical comparisons, with little or no additional development when that format changes.\n\nWhile XBRL got its start by being used for compliance-related purposes, it is an extremely versatile data standard with applications only limited by the imagination of taxonomy architects.\n\n1.3.3.1 XBRL and Data Formats\n\nThe XBRL specification currently defines how data is captured and represented in a format originally based on XML. XML was selected as the starting point for XBRL because it is an excellent platform (with a wide array of tools and support) to carry complex data. XML is a \"markup language\" that uses elements to tag and identify data points so a computer can easily process the data. Further, XML inherently allows contextual and other data to be included in each of those tags through the use of attributes. Interestingly, because XBRL is a data standard that establishes precepts rather than format, the vehicle for communicating the data could be based on other data formats like JSON. The benefits and disadvantages of data formats other than XML are discussed in Section 5.4.3. The fact that XBRL has flexibility in its transmission format makes it even more versatile as a reporting standard.\n\nBecause XBRL taxonomies are XML-based but extend upon that foundation, changing information in a taxonomy does not necessitate the system reading and consuming the XBRL data to update to a new standard in order to understand its meaning. A system that reads XBRL can simply \"plug in\" new taxonomies as they become available without the need to change programmatically. This flexibility is unparalleled in a data exchange standard. When a real-world change would require a conceptual change to the meaning of data, a new version of the taxonomy can be created and released in response. Data consumers would have access to the new information in the same instant the taxonomy becomes available.\n\n1.3.3.2 Practical Applications and Success Stories\n\nThe XBRL standard is widely used for reporting around the world. Implementations include public and private company reporting as well as government agency reporting. Numerous government programs to report business financial information in XBRL exist globally (Table 1-1). One of the largest implementations of XBRL as a data transport method involving regulation is periodic financial reporting to the United States Securities and Exchange Commission (SEC). In this case, commonly used accounting standards were incorporated into financial reporting taxonomies. Now, using those taxonomies, public companies report required financial information through the Electronic Data Gathering, Analysis, and Retrieval (EDGAR) System. With XBRL, financial data is publicly available for machine-driven analysis and consumption with very little delay or overhead once the reports are filed. Banks reporting to the Federal Deposit Insurance Corporation (FDIC) represent another industry where XBRL serves as a successful transmission structure. Here, the taxonomy is very tightly regulated and used by multiple banks to report regulatory information to the FDIC. These are just two examples of successful implementations of XBRL in the fields of governmental regulation.\n\nXBRL provides a strong advantage for regulatory reporting, but its uses extend beyond the scope of this type disclosure. Perhaps one of the best business cases that can be made for XBRL is in collaborative settings. XBRL is an excellent solution for situations requiring a common interface among diverse businesses. An example is the development of the Work in Process (WIP) taxonomy for construction projects with long time horizons. Surety insurance companies that provide bonds for these projects require periodic reporting so they can judge whether the project will be completed on time and within budget. Bond agents, surety insurance companies, contractors, and their auditors are all involved in this collaborative setting. Developing an XBRL taxonomy in a situation like this allows the common information needs of the contractors, bond agents, and sureties to be standardized and processed without human intervention.\n\nXBRL adds significant value in business cases where participants share a common set of information requirements among a subset of their business processing needs.\n\nCountry Application Regulator Apx. Reporting Entities United States Primary financials and disclosures for all public companies Securities and Exchange Commission (SEC) 9,000 United States Financial statements from all bank institutions Financial Depository Insurance Corporation (FDIC) 8,500 United Kingdom Financial statements from all private companies; tax filings Her Majesty's Revenues & Customs (HMRC) and Companies House 2 million + Singapore Financial statements from all private companies ACRA (Accounting and Corporate Regulatory Authority) - BizFinx Filing system 60,000 Spain Financial statements from all private companies Business Registrar, Banking Regulator, Securities Regulation, Accounting Oversight and State Federal Comptroller 800,000+ Denmark Financial statements from all private companies Danish Business Authority/SKAT 600,000 South Korea Private and Listed Companies Financial Supervisory Service (FSS) and Korea Exchange (KRX) 15,000 Italy Financial statements from all private companies Infocamere/Unioncamere 1 million Peru Banking and Insurance Regulation Superindencia de Banca y Seguros (SBS) and Superintendencia del Mercado del Valores (SMV) 180 Iran Listed Companies Securities and Exchange Organization 300+ Israel Listed Companies Israel Securities Authority 600 Japan Listed Companies Japan Financial Services Agency (JFSA) 9,000 Belgium Financial statements from all private companies National Bank of Belgium (Central Balance Sheet Office) 400,000 Panama Banking and insurance regulation SBP (Superintendencia de Bancos de Panama - Superintendency of Banks 76 Germany Financial statements from all private companies Bundensanzeiger 1 million Chile Banking and insurance regulation Superintendencia de Valores y Seguros (SVS) 270 Taiwan Securities regulation Taiwan Stock Exchange 1500 Brazil Public spending National Treasury\n\nFederal government\n\n26 States\n\n5570 municipalities\n\nColombia Financial statements from businesses and financial institutions Superintendencia de Sociedades; Superintendencia Financiera de Colombia 1000+ World Bank Sustainability Reporting Internal Report 1\n\nTable 1-1. Examples of successful XBRL implementations worldwide\n\nXBRL taxonomies can serve large industries, projects, and data sets, but they can also prove useful in smaller settings. Departments within a company or university may need to report to each other in a structured, predictable manner, for example. XBRL is well suited for business and financial data, but it need not be limited to this application. Taxonomies can be constructed to reflect any type of information, and XBRL's strengths in structured reporting can benefit any situation where data integrity and semantic interpretability is essential. For an in-depth exploration of success in implementing XBRL as a data standard, see Chapter 10.\n\n1.4 What Is in this Document\n\nThis document contains information that helps readers understand XBRL and its potential applications. It will walk readers through building an XBRL taxonomy. The handbook begins with information to help readers understand data modeling (and how data modeling translates to XBRL) and define the needs of the project. It continues by discussing the mechanics of building and implementing the taxonomy. Finally, this document explores governing the reporting system afterward. The manual builds a story that is the creation of an XBRL taxonomy from cover to cover, but sections or chapters can be skipped or read selectively without loss of continuity.\n\nChapter 1 - Introduction - A synopsis of the Taxonomy Development Handbook and XBRL.\n\nChapter 2 - An Introduction to XBRL - An overview of XBRL, its principles, and its conventions. Within this introduction is a general discussion of how XBRL is different than other data exchange standards such as basic XML, JSON or CSV.\n\nChapter 3 - Structuring Data - A discussion of methods for organizing data within an instance and the options for structuring dimensional data.\n\nChapter 4 - Assessing Overall Project Scope - A discussion of how stakeholders and use cases affect the data model.\n\nChapter 5 - Building a Transport Data Model - An in-depth review of taking a data model and applying stakeholder needs to create an XBRL transport model.\n\nChapter 6 - Validation - Sets forth various methods of validating XBRL data.\n\nChapter 7 - The Mechanics of Taxonomy Development - Detailed instructions on building a taxonomy in XML.\n\nChapter 8 - Documenting a Taxonomy - A discussion of how to document a taxonomy for use by preparers, developers, and information consumers.\n\nChapter 9 - Taxonomy Governance - Directions for the on-going maintenance of an implemented taxonomy.\n\nChapter 10 - Success Stories - A review of real-world implementations of XBRL.\n\nAppendix A - XBRL and XML Supporting Information - A collection of technical information to aid in understanding and using XBRL.\n\nAppendix B - Taxonomy Creation Checklist - A basic checklist of \"to do\" items for creating a taxonomy.\n\nAppendix C - Taxonomy White Paper Outline and Template - Information to aid in the creation of a project \"white paper\" to describe the process of developing a taxonomy.\n\nAppendix D - XBRL Overview Template - An example XBRL Overview section to be included in taxonomy documentation.\n\nAppendix E - Taxonomy Guide Outline and Template - An outline for a consolidated Taxonomy Guide to be used by users of a taxonomy including preparers, consumers and software developers.\n\nAppendix F - Preparer Guide Outline and Template - An outline for a separate Preparer Guide aimed to aid preparers in using the developed taxonomy.\n\nAppendix G - Data Consumer Guide Outline and Template - An outline for a separate Data Consumer Guide aimed to demonstrate to data consumers how the information in the taxonomy can be applied to common use cases.\n\nAppendix H - XBRL US Taxonomy Approval Metrics - Information as to how a taxonomy can be reviewed and approved by XBRL US.\n\nAppendix I - Intellectual Property Status - An overview of Intellectual Property considerations and a sample IP statement.\n\nAppendix J - Document Revision Status - A discussion of the status of the Taxonomy Development Handbook, including pertinent revisions.\n\nAppendix K - Revisions and Public Comments - A discussion of public comments and the relevant revisions.\n\nGlossary - A glossary of terms used for XBRL and within this document.\n\n1.4.1Supporting Specifications\n\nThis document is not a specification but rather a guide to aid in the development of well-formed taxonomies as well as setting forth best practices in development and management.\n\nThe following documentation was relied upon during the development of this guide. Readers are encouraged to both become familiar and comply with the following documents:\n\nExtensible Business Reporting Language (XBRL) Specification - The Extensible Business Reporting Language Specification, from XBRL International (XII), contains the raw information regarding the implementation of XBRL in XML. It defines XML elements and attributes that can be used to express information used in the creation, exchange, and comparison tasks of business reporting. Note that the XBRL specification terminology is XML centric.\n\nXBRL Open Information Model - The Open Information Model (OIM) describes methods of relaying XBRL information in a syntax-independent manner. It explores both JSON (JavaScript Object Notation) and CSV (Comma Separated Values) while revising some of the terminology to work in such environments. The OIM specification is supplied with companion examples and documents.\n\nXBRL Dimensions Specification - The XBRL Dimensions Specification provides a generalized mechanism to define dimensional metadata and to reference it in XBRL instances. It defines an architecture such that any XBRL documents (instances and their Discoverable Taxonomy Sets) that conform to the specification may be parsed without error by any processor that is capable of correctly processing XBRL, even if those processors are unaware of modular extension.\n\nXBRL Data Type Registry - The XBRL Data Type Registry (DTR) contains the data types defined by XBRL. These are in addition to standard XML data types. In addition, there are two provided specifications, the Process Specification and Structure Specification, which further describe the structure of the DTR and the steps through which a new data type can be added to it.\n\nXBRL Precision, Decimals and Units Specification - The XBRL Precision, Decimals and Units Specification details more information relating to the numerical precision, decimal expression, and units of XBRL facts (the @precision and @decimals fact attributes). This document extends the information provided in the XBRL Specification and also offers more examples of conventions used in practice.\n\nXBRL Formula Specification - The XBRL Formula Specification describes methods of providing additional validation that is not provided by the base XBRL Specification through XBRL formulas. The specification explains methods of using formulas and other approaches to test rigorously the data relationships within an instance document.\n\nXBRL Units Registry - Similar to the XBRL Data Types Registry, the XBRL Units Registry (UTR) defines the XBRL-allowable units for numeric facts. There is further documentation concerning the structure and syntax of the registry as well as information on the process by which new units can be added.\n\nXBRL Transformation Registry- The XBRL Transformation Registry contains the rules and metrics by which transformations in Inline XBRL are performed. These rules describe how descriptive text in Inline XBRL documents can be represented as XBRL data types.\n\n1.4.2Supporting Documents\n\nOther documents important to taxonomy development include:\n\nXBRL US Style Guide - The XBRL US Style Guide aids in maintaining consistency in all aspects of XBRL, including style, as a critical component to the successful deployment of the XBRL taxonomies. The guide lays out goals to: (a) provide a basis for the consistent development and maintenance of taxonomies; (b) increase the efficiency and effectiveness of taxonomies; (c) improve taxonomy extensibility for end users and taxonomy developers; (d) maximize comparability of data, reduce the ambiguity of data, and promote the normalization of data; (e) increase compatibility of taxonomies; (f) improve the reliability and consistency of the concepts, labels, and documentation; and (g) reduce the cost of taxonomy implementation.\n\nXBRL US Taxonomy Approval Metrics - The Taxonomy Approval Metrics (TAM) document establishes standards for XBRL taxonomy review and approval by the XBRL US Domain Steering Committee (DSC) with the following goals: (a) to enable a meaningful exchange of information between different business systems; (b) to avoid confusion and difficulties in initial setup of systems for the preparation and consumption of XBRL-based information; (c) to provide taxonomy developers with a clear understanding of the expectations of the requirements of the XBRL US Domain Steering Committee (DSC) Taxonomy Approval Process.\n\n1.4.3 Supporting Software and Tools\n\nThere are various, freely available software packages and tools that can aid in taxonomy development and XBRL instance document preparation or data extraction. They are as follows:\n\nArelle - Arelle is an open source platform for XBRL that can be used as a desktop application and integrated with other applications and languages through its web service. Numerous plugins exist to allow interfacing with Excel, Java, Oracle, RSS feeds, individual XBRL documents, and SQL and other databases. Arelle is covered in more detail in Chapter 6 as a means visualize and facilitate taxonomy development.\n\nXBRL API - Developed by XBRL US, the XBRL API (Application Program Interface) aids users in accessing timely, structured XBRL data with high resolution. The standardized API allows developers and data utilities to employ a single interface to gather data from an XBRL repository/instance. Developers can use the API to connect a custom database to a software front end. The API aids in automatically populating that database and permitting users to gather it for analysis.\n\nMore information about the XBRL API is available on XBRL US' website and in the API documentation (http://files.xbrl.us/documents/XBRL-API-V1.4.pdf).\n\nSpreadsheet/Word-processing Applications - There are numerous free software packages that offer spreadsheet and word-processing capabilities. These basic utilities can aid in drafting project plans and documentation as well as creating the taxonomy itself. In conjunction with Arelle, spreadsheets can be used to lay out the elements of the taxonomy in a human-readable, well organized manner. Free applications are offered at:\n\n• Google Docs (http://docs.google.com/)\n\n• LibreOffice (http://www.libreoffice.org/)\n\n• Microsoft Office Online (http://www.office.com/)\n\nNote that XBRL US does not endorse any of these products, and some may require valid accounts with the provider to use. In addition, some functionality may require purchase. XBRL US has a list of some XBRL software vendors on its website at https://xbrl.us/.\n\n(this page intentionally left blank)\n\n2 An Introduction to XBRL\n\n2.1 eXtensible Business Reporting Language\n\n2.1.1Why XBRL\n\nXBRL was developed to automate the process of sharing information. The information exchange could occur within an organization or with external groups, such as other entities in an industry, regulators, markets, and non-governmental organizations. Conceptual requirements for XBRL development included creating a system that is extensible, definable, and one that allows for comparisons among its data points. XBRL also had to possess the ability to hold or transport a wide variety of data, support standardized data representations, and be software agnostic such that the standards can be used through many different software applications.\n\nXBRL principally serves as a method that simultaneously transmits machine-readable data with information about how to interpret and contextualize that data. This is in contrast to other data transmission methods, where a single point of data is often bereft of further information to enhance or elucidate it. Using XBRL as a data structure ensures properly formatted points of data will be interpreted by the receiving system with all the meaning required to interpret that data, regardless of the originating system, time of interpretation, or the method of transmission. In data architecture, this is referred to as semantic interoperability. Semantic interoperability is achieved through adding information that links each data element to a well-defined, shared vocabulary among the systems involved in creating, transmitting, storing, and using that data. This allows for an information package that is self-describing and therefore independent of its originating information system and capable of being read by any destination system. Underlying semantic interoperability is syntactic interoperability, which is the syntax by which two or more systems communicate with each other, coupled with a defined ontology that must be able to adapt to new and changing terms. XBRL provides the foundation for these two important facets of relaying data: a syntactical specification relying on common standards to convey information and a means of providing an ontology (an XBRL taxonomy) to identify the meaning of that information within a well-defined semantic framework (Figure 2-1).\n\nFigure 2-1. XML as the syntactic component of XBRL and the XBRL taxonomy as a semantic framework\n\nThere are many standards for formatting, transmitting, storing, and presenting information, and each is designed for a specific purpose. Unlike many other data standards, XBRL allows for the simultaneous conveyance of structure and meaning, and its ontology can be adapted to suit a broad range of purposes and industries. This handbook examines how XBRL can become an integral part of a data architecture solution.\n\n2.1.2 The Transport Data Model\n\nThe task of an XBRL taxonomy developer is to take a semantic data model that represents business or other data and build a transport model to proliferate that data to data consumers. A transport model serves as an organizational structure when moving data from a source to a consumer (Figure 2-2). XBRL is an example of a transport model. Transport models can be complex and dynamic, such as XBRL, or they can be simple. In a sense, the act of filling out a paper or electronic form that contains fields for sets of information creates a transport model. The form takes data from a preparer in an organized way and then allows consumers to use that data as necessary. Of course, there can be very obvious limitations to a form-based transport model, such as the fact that the form may not be machine-readable, but this illustrates the concept that the model is the format that allows data to move from a source to a consumer in a meaningful way.\n\nFigure 2-2. An XBRL taxonomy as a transport data model\n\nIn a real-world environment, a reporting entity may use a variety of applications to manage and store business data. Such data can contain customer/client information, products, inventory, research, accounting, and modeling information. From an information technology standpoint, data points should fit into an ideal semantic model, where the dimensionality of that model provides a self-describing data set even though segments may exist in separate systems on separate platforms. In most cases, not all information from the semantic model is placed in the transport model for a variety of reasons ranging from confidentiality, depth or history of information, or the data simply not being required. In addition, some data points in the transport model may need to be created or calculated from points within the semantic model. As a result, the data from the semantic model must be filtered or prepared.\n\nTransport models can also be thought of as a link in an information supply chain. The supply chain refers to the systems of organizations, people, resources, and processes in moving data from a source (a business or semantic data model) to a consumer. Supply chains can be very complicated, involving multiple parties and models of information, or they can be simple. It is also important to note that in Figure 2-2, the business data and semantic model will vary from reporting entity to reporting entity, while the transport model will remain the same for all reporting entities. Also, the transport model may or may not match either the source business model or the consumer model. The challenge for developers is to create a transport model that is closely aligned with all the stakeholder requirements and is still easy to understand and expand to accommodate future requirements.\n\nXBRL provides the format of the transport model, and an XBRL report contains the information that is being exchanged among systems using that transport model. The defining and unifying force behind the structured XBRL transport model is the taxonomy. With a well-defined taxonomy, any consumer of data within an XBRL report should be able to properly read and interpret that data.\n\nThe right side of Figure 2-2 is the consumer model. Consumers may take various forms and can have widely varying requirements. Each will have their own specific models and may combine data from other sources to support their end work product. Consumers represent important stakeholders in the development process, and their needs concerning the way in which the reported data is organized should be considered.\n\nNote that Figure 2-2 is silent on the actual mechanics of transmitting and storing data. In many architectures, there is a reporting system that receives, validates, accepts, stores, and potentially distributes data. In some cases, the reporting system may be a secure, private transaction, while in others, such as the SEC's EDGAR system, the data is private until accepted by a regulatory system and then stored in a publicly available archive. Reporting systems may take the form of a single entity to another single entity transmission, or they may be as large and complex as a multiple entity repository.\n\nMany details of the reporting system (which taxonomy developers may still be tasked with designing) are beyond the scope of this document. However, there are aspects of the reporting system that can affect the transport model design process. The nature of the chosen data transport format (these formats are introduced in the next section) can influence decisions regarding how the taxonomy is structured. Importantly, whether a reporting system is considered open or closed can have profound design ramifications on the taxonomy. In an open reporting system, preparers are allowed to extend the XBRL taxonomy to include XBRL constructs from other taxonomies or of their own design. This allows for entity-specific reporting, where preparers can create or use their own methods of representing their data. In a closed reporting system, the XBRL taxonomy cannot be extended by preparers, which thus requires them to use the taxonomy as it is released by the taxonomy developers. While this is more limiting in terms of entity-specific data, it enhances the ease of analysis and usability of XBRL reports, as reports from different preparers must be structured in the exact same manner. Allowing extensibility in a reporting system is a complex decision that balances comparability (the extent to which one or more XBRL reports can be directly compared) with customizability. It is also not an \"all or none\" solution; there are many cases where developers allow very specific extensibility but otherwise structure a taxonomy strictly. Extensibility and its implications are discussed throughout this handbook.\n\n2.1.2.1 XBRL as a Transport Model\n\nXBRL provides a standard set of rules that define how data (which can be a broad range of types, including monetary, integer, text, and Boolean) can be transported. As mentioned previously, an XBRL report (also called an instance document) serves as the transmission or storage vehicle for the data reported. An XBRL taxonomy dictates how the data in that report should be organized. The taxonomy can only be built in XML, but the taxonomy can be used to generate XBRL instance documents in XML, JSON, HTML (Inline XBRL), or CSV format. XBRL International, which directs the ongoing development of the XBRL Specification, has created XBRL versions of these formats which are capable of intrinsically carrying semantic information along with the reported values.\n\nThe four format options for an XBRL instance document are as follows:\n\nXBRL as XML - In this mode, instance data is stored in XML format as dictated by the XBRL Specification. XML provides for the construction of custom schema to express a wide range of data types using elements to delineate and \"markup\" (or tag, as it colloquially called) data. XBRL builds on XML by adding relationships beyond simple parent-child inheritance as well as additional contextual information. Additional linkbases can be provided for definitions, references, labels, calculations, and presentations.\n\nInline XBRL - Inline XBRL (iXBRL) allows the instance data to be embedded in an XHTML document. This is iXBRL's principal advantage, that machine-readable data is located right within the human-readable report. Schema and linkbase requirements are the same as with XML.\n\nJSON - JSON, or JavaScript Object Notation, is a text format that provides for the expression of complex structured data. A number of programming languages will natively create and read JSON. For XBRL, the Open Information Model, which is a syntax-independent model of XBRL data developed by XBRL International, provides a specification for storing instance information in an XBRL-JSON report. JSON only allows for the transport of instance information. If extensions are\n\nallowed in the instance document and JSON is used, a schema (extension taxonomy) must be created in XML to accompany the JSON file.\n\nCSV - CSV (Comma Separated Values or comma delimited) is another option for transport. However, given the limited structure of CSV, files must be formatted in a specific manner with companion information to connect key XBRL structural data. CSV can be a good option for reporting highly structured information where only the facts change from report to report. The Open Information Model also provides a specification for storing instance information in an XBRL-CSV report. As with JSON, if extensions are needed, a schema (extension taxonomy) must be created in XML to accompany the CSV file.\n\nThe format used for the instance document is up to the preparer of the information and/or the reporting system. At this time, other data formats do not have the structure to carry semantic information, without which the reported values cannot be automatically understood and consumed.\n\n2.1.3Bringing Meaning to Data Points\n\nInformation can be gathered and organized in text, tables, named variables, arrays, and through other methods. However, with many of these methods, each reported value lacks additional identifying characteristics. In addition, depending on the language and platform, there may be varying data types or naming conventions. This can all lead to confusing comparisons among different data sets and to difficulties in transmitting the information from system to system.\n\nFigure 2-3. Disorganized versus organized data\n\nThe goal of XBRL is to transport data that is arranged in a meaningful way. Data can be organized in an appropriate pattern depending on the application, as tables, cubes, or perhaps in a hierarchical structure, for example (Figure 2-3). Each data point in an originating semantic data model may have a relationship (sometimes called an arc) with other data points that is demonstrative of its semantic meaning. XBRL adds depth to data points by adding XBRL dimensions to them. XBRL dimensions define the data's semantic meaning, its periodicity, its reporting entity, and other descriptive information. Taken together, a data set's dimensions represent meaningful semantic information and help consumers understand not only what each individual point means but how all the points within the set relate to each other.\n\nBeyond the representation of structured data, XBRL also offers several important features. First, data can be represented in a human-readable form either as a structured presentation or as part of an HTML document text as Inline XBRL or iXBRL. Second, additional information can be conveyed both for specific data points and for relationships. For example, a data point can convey information about the type of data, its precision, or it can have a textual note attached. In addition, XBRL is self-describing, meaning the taxonomy itself instructs receiving systems how to read and interpret the data structure. There is no need for additional libraries, documents, or formats. XBRL is also extensible, which allows both developers to build upon pre-existing taxonomies and preparers to create their own XBRL constructs to reflect their specific reporting circumstances (if permitted by developers). Finally, XBRL has multiple methods of enforcing and encouraging data integrity and validation. These topics will be addressed throughout this handbook to allow developers to leverage XBRL's many strengths in their reporting solutions.\n\n2.2 How Does XBRL Represent Data?\n\n2.2.1Overview\n\nThis section focuses on the basic structure of XBRL and how its constructs represent data points and their semantic dimensionality. Consider a simple report of monthly expenses, which may appear in a spreadsheet as follows:\n\nFigure 2-4. A simple expense example\n\nOn the left of Figure 2-4, there are categories of expenses (Column A, conventionally considered as line items). Expense categories include Food, Entertainment, Fuel, Rent, and so forth. The types of expenses are reported by the month in which the expense occurred (Columns B-E). The data points appear at the intersection of the category and the month. By themselves, the values of these values have very little meaning, but when taken in relation to the row and column orientation, each data point gains semantic context. This is a very typical, simple, tabular representation of data, where the data points are defined by a conceptual idea and a contextual timeframe to which that value pertains. In XBRL, this combination of a data point and a set of XBRL dimensions pertaining to that data point is called a fact.\n\n2.2.2The Fact (An Intersection of Dimensions and Data)\n\nIn XBRL, a fact is the unique intersection of a set of XBRL dimensions with a data point. Figure 2-5 illustrates the basic structure of a fact. Arbitrary information, such as a number or a name or even a short section of text, has no semantic or contextual information in and of itself. Once XBRL dimensions, which add semantic information, intersect with that data point, it now becomes an XBRL fact.\n\nFigure 2-5. A data point versus an XBRL fact\n\nThe data value can be of almost any form. For example, if the datum pertains to the number of widgets produced by a widget manufacturing company, it would be a numeric value. If the datum is a narrative description of widget production challenges, it would be textual.\n\nIn the simple expense example (Figure 2-4), the expense for Clothing in the context of January, which has a value of 180, would be a XBRL fact. There are also implicit dimensions, some of which appear in Figure 2-6.\n\nThese are monetary values, so the units could be US Dollars. These are also Bob's expenses, so the reporting entity for that data point can be identified. All of these dimensions intersect at this fact, and the combination of the concept and the dimensions help define and dictate the nature of the information stored at that intersection. Facts must have a concept core dimension, which provides the semantic meaning of the fact. In this example, ClothingExpenses is the concept core dimension.\n\nFigure 2-6. The expense example with an illustrated XBRL fact\n\nFigure 2-7 illustrates the intersection of the concept core dimension and another XBRL dimension. Again, relating to the expense example, the dimension is the period dimension January and the concept core dimension is ClothingExpenses.\n\nFigure 2-7. XBRL fact intersection with dimensions\n\nMultiple concepts along the concept dimension can intersect with the same secondary dimension (as shown in Figure 2-8). Looking back to the expense example, including multiple line item concepts adds a simple level of dimensionality to the data. A set of concepts (such as FoodExpenses, RentExpenses,\n\nClothingExpenses, and UtilitiesExpenses) that intersect with a single period dimension (January) could be visualized as follows:\n\nFigure 2-8. Multiple facts created by multiple concepts intersecting with one XBRL dimension\n\nAgain, this is analogous to line items on a table or spreadsheet with the data dimensionality expressed as the column heading. When there are multiple reporting periods (for example, for the first two months of expenses), multiple XBRL dimensions are defined, such as in Figure 2-9.\n\nFigure 2-9. Multiple concepts and XBRL dimensions intersecting to form multiple facts\n\nIn this case, the concepts would be the line items in Figure 2-4 (such as Food Expenses, Rent Expenses, and Utilities Expenses). The periods would be represented by the columns (January, February, and so forth). Again, each place where a concept dimension and period dimension intersect is a fact (in this case, a monetary amount located in the cell), and the combination of the contextual information provided by the concept and other dimensions (the period) create the XBRL dimensions of that fact.\n\n2.2.3Dimensions\n\nAs mentioned previously, an XBRL dimension is information that serves to uniquely identify a fact (Figure 2-5). A dimension may be either a core dimension (which includes the concept core dimension, period core dimension, reporting entity core dimension, and unit core dimension) or a taxonomy-defined dimension. These are discussed in greater detail later in this chapter.\n\nEach XBRL dimension adds unique contextual information to a data point. The concept core dimension confers basic semantic meaning to a data point, such as FoodExpenses or FuelExpenses as shown in the\n\nearlier examples. Within an instance, similar dimensions intersect facts to form tables, cubes, or more complex structures. Each intersecting fact is always unique.\n\nThere may also be, and often are, multiple dimensions associated with one fact. For example, in the expense data set, the columns represent period dimensions, and, as stated earlier, the rows could be considered concept core dimensions. Together, these are the dimensions for any given fact.\n\nFacts can have one or more of the following dimensions: the concept core dimension, the entity core dimension, the period core dimension, the unit core dimension, the language core dimension, the note ID core dimension, and taxonomy-defined dimensions.\n\n2.2.3.1 Concept Core Dimension\n\nEvery fact must have a concept core dimension as defined in Section 2.2.5. The concept core dimension provides semantic meaning for a fact. It also defines certain properties about the facts associated with it, including a fact's data type. More information about data types can be found in Section 2.3.1.\n\n2.2.3.2 Entity Core Dimension\n\nThe entity core dimension defines the entity for which the fact is being reported. The entity should be reported using a common identifier that is unique to the entity and unchanging. For example, a Legal Entity Identifier (LEI), IRS number, or Committee on Uniform Securities Identification Procedures (CUSIP) number is a static identifier that can be linked to a specific entity in a financial report. Likewise, a social security number uniquely identifies a person working in the United States and does not change with time. Developers should avoid using identifiers that change or are ambiguous. Also, since reports may be public, using identifiers that contain private information, such as social security numbers, may not be advisable.\n\n2.2.3.3 Period Core Dimension\n\nA period core dimension defines the period of time relevant to the fact. The period can be one of two types: an instant or a duration. Consider again the expense report example. Total expenses for the month are considered a duration because the data is measured from the start of the month to the end of the month. An instant period represents a measurement that occurs at a specific point in time. For example, the money in a bank account on any given day is an instant measure, the money available at that moment.\n\nThe periodicity of the data should be of a resolution that makes sense for the data itself. Again, for an expense report, a monthly period dimension is logical. Long-term growth of a market fund, however, might dictate using a period dimension to represent a year or even longer. Conversely, rainfall totals could be represented in days. Instant period core dimensions are expressed using a single date. Duration period dimensions are expressed using a starting date and an ending date which marks the beginning and end of the period, respectively.\n\nLike the concept core dimension, the period core dimension is required for all facts. If the data point describes information that does not change with time, such as genetic data, birth dates, or a constant such as pi, a period can be defined as \"forever.\" The period core dimension must agree with the properties of the concept core dimension. If the concept's period type property is defined as \"instant,\" only an instant period core dimension can intersect with facts that have that concept. Likewise, if the concept's period type is \"duration,\" only a duration period core dimension can intersect with those facts. For more information on concept properties, see Section 2.2.6.2.\n\n2.2.3.4 Unit Core Dimension\n\nThe unit core dimension indicates the unit of measurement of a fact. A unit of measurement is a magnitude of a quantity, defined and adopted by convention or by law. An example unit would be \"USD\" (United States Dollars) for monetary values or \"meters\" for length. The units are expressed as a list of numerator units with an optional list of denominator units. This allows for compound units, such as \"dollars/share\" or \"miles/hour\". It also allows for units that are an algebraic square, such as meters2, by specifying multiple of the unit in the numerator.\n\nThe unit core dimension is dictated by the data type property of the concept core dimension. For example, \"kilowatt-hour\" or \"megawatt-hour\" would be an appropriate unit for facts with a concept named EnergyProduced, which expresses the amount of total electricity created by a power plant. The unit core dimension is only applicable to concept core dimensions that have numeric data types.\n\nXBRL gives the flexibility to express facts in differing units on the same plane as an intersecting concept and unit dimension. The unit adds meaning to a numeric value. For example, \"3\" is a scalar value with no intrinsic meaning. When associated with a concept, the value can be known to be monetary. However, the specific type of monetary unit is still unclear. Adding a unit \"USD\" would indicate US dollars while \"CAD\" would be Canadian dollars. More than one unit can be expressed, allowing for both USD and CAD values for the same data point with an added unit differentiation.\n\nA set of standard units is defined in the XBRL Units Registry. The XBRL Units Registry has hundreds of defined units to qualify data ranging from currency to measurements, such as meters, volts, and hectares (see XBRL Units Registry).\n\nWhen expressing a numeric fact, it must contain a unit reference (see XBRL 2.1, §4.6.2 The @unitRef attribute). Facts with a data type of \"string\" will have no associated unit reference.\n\n2.2.3.5 Language Core Dimension\n\nThe language core dimension specifies the language in which a non-numeric fact is reported. Language values must be represented with a valid BCP 47 language code (for more information, see IETF BCP 47). Language core dimensions should only be present on concept core dimensions that allow textual information and are optional in this case.\n\nIf data is expected to be used in a multi-language environment, it is highly recommended that the language core dimension be employed. Note that for reports that will be consumed in a primarily English-speaking environment (or an environment where only one language is expected), the language core dimension can generally be omitted.\n\n2.2.3.6 Note Core ID Dimension\n\nThe note core ID dimension links a footnote or set of footnotes to one or more facts. More information about the note core ID dimension and XBRL footnotes is described in Section 2.2.9.\n\n2.2.3.7 Taxonomy-defined Dimensions\n\nA taxonomy-defined dimension is a concept that exists for the purpose of grouping facts that should be interpreted in a similar way. Taxonomy-defined dimensions will be explored in greater detail in later sections. For now, consider taxonomy-defined dimensions to be concepts that do not directly define a fact but rather intersect with a fact to add further contextual or semantic information beyond what is added by the core dimensions already discussed.\n\n2.2.4XBRL Dimension Details\n\nLooking back at the expense example, XBRL dimensions must be defined for each fact to be represented in XBRL. For now, a simplistic approach that makes use of the concepts previously discussed can be beneficial in understanding how to define and use XBRL dimensions. Because of the type the data in the expense report, some of the XBRL dimensions will be the same for all facts.\n\nThe core dimensions as relevant to the expense example used are listed in Table 2-1:\n\nCore Dimension Description Expense Example Entity The entity reporting this value (the entity core dimension). Normally, this is some sort of unique value, such as an LEI or tax number. Bob's Household Unit\n\nThe unit for a numeric value (the unit core dimension). The unit employed must be part of the XBRL Units Registry (UTR) or otherwise defined. For non-numeric facts, such as a narrative description, the unit core dimension is not used.\n\nDepending on the application, a numeric value can be represented by multiple facts, each with a specific unit. Alternatively, an entity may disclose data in another currency or measurement.\n\n(not shown)\n\nUSD\n\nPeriod Defines the time domain for the fact (the period core dimension). This time domain represents the period of time to which a fact is applicable. These are represented in ISO-8601 format.\n\nJanuary\n\n2019-01-31\n\nLanguage The language in which a fact is reported (the language core dimension). This dimension can be defined for non-numeric facts. Like units, the narrative can be represented in multiple facts using different languages. Language types are represented using the BCP 47 Codes. [n/a]\n\nTable 2-1. XBRL dimensions and their relation to the expense example (Figure 2-6)\n\nThe nature of the data dictates how these XBRL dimensions apply. For instance, in the previous example, expenses are monetary values measured in United States Dollars, which suggests using a unit core dimension of \"USD.\" The entity in the example is \"Bob's Household\" (which is not an ideal identifier but is sufficient for a simple example). The language core dimension does not apply in this case because the data contains no textual facts. Otherwise, these dimensions are applicable for all the data in the expenses table.\n\nThe period core dimension, however, changes from column to column. For the first column, the period dimension represents the month of January. The next dimension represents February and so on. With all these dimensions defined, the concepts and the core dimensions, every cell of data in the table can be represented as an XBRL fact.\n\nThere are multiple ways to organize data and relationships. In addition, there are cases where it is necessary to disaggregate similar data. For example, Bob may want to break his expenses down by his dependents. The above core dimensions will remain the same, but now the fact can be qualified or dimensionalized further by additional data relationships. This is explored in Section 2.2.8. For now, the XBRL core dimensions will be explored as a means to add specified semantic meaning to data.\n\n2.2.5 Concepts\n\nA concept is a semantic identifier as defined by the taxonomy. Concepts are the basic building blocks of a taxonomy, and all the data dimensions within that taxonomy refer to relationships between or among concepts. The term concept core dimension refers only to those concepts that define the semantic idea that a data value is meant to represent. Other types of concepts may be used as organizational containers for concept core dimensions that are semantically related. These are called grouping concepts, and they define structures within a taxonomy, such as an XBRL table structure or a domain of possible values. Still other concepts may be organized along a taxonomy-defined dimension to specify axes along which facts vary.\n\nBecause concepts are the basic unit of semantic and structural information in XBRL, concepts will have a relational position with respect to other concepts within the taxonomy. Combining concept core dimensions with grouping concepts and the concepts that make up taxonomy-defined dimensions can be used to create complex structures with self-describing semantic meaning. For example, a fact may have a concept core dimension of SalesRevenue, and this could intersect with the taxonomy-defined dimension Region, which may have further differentiating concept members such as EasternRegion and WesternRegion. This may all be contained by a concept defining a table of SalesByRegion.\n\nFigure 2-10. Types of concepts\n\nAs illustrated in Figure 2-10, concept core dimensions define a fact value. Grouping concepts are used to group concepts that are semantically related. Taxonomy-defined dimensions organize concepts to define additional dimensionality. Taxonomy-defined dimensions may or may not have member concepts. Again, more information on taxonomy-defined dimensions and how they add dimensionality to XBRL facts is discussed in Sections 2.2.8 and Chapter 3.\n\nConcepts have properties that define their usage and the types of data they can describe, which is discussed in greater detail in the next section. The properties of a concept also dictate the other types of XBRL dimensions that can intersect with the data.\n\n2.2.6 Concept Details\n\n2.2.6.1 Overview\n\nConcept identifiers define facts at the most basic semantic level. How is the semantic meaning behind these numeric data points implemented in XBRL?\n\nA deeper examination of the expense example yields some answers. Consider again Figure 2-4, where categories of expenses are rows (line items) and columns represent the months in which those expenses occurred. Because this example is so simple, the table line items (Column A) naturally lend themselves to becoming the concept core dimensions. Each of these concepts, such as FoodExpenses,\n\nEntertainmentExpenses, etc., is linked to a numeric value in Columns B-E, producing the beginnings of an XBRL fact. Defining concepts not only defines the discrete, semantic identifiers in the taxonomy, it also allows the properties of the concepts to add further qualitative information to the data points.\n\n2.2.6.2 Concept Properties\n\nIn addition to defining the semantic information associated with a fact, concepts themselves have properties. These properties can be thought of as ways to characterize the data to which the concept can be linked. This can include the type of data (numeric, textual), whether the data can be nil or undefined, or whether the concept itself can be associated with data at all.\n\nIn the example presented above, these concepts are all expenses, so they can have the same properties. Again, this is a simplistic approach; for real data, the properties of the concepts should vary with the information they are meant to represent. For now, a simplistic view can help to illustrate the basic types of properties concepts can possess and how they map onto a real-world data set. Table 2-2 defines the possible properties of a concept and how they are represented in the expense example.\n\nProperties Description Expense Example Name Name of the concept. FoodExpense, RentExpense, etc. Period Type The basic intersecting period core dimension that can be instant or duration. Period dimensions are discussed in Section 2.2.3.3. Duration Balance Type An optional qualifying property that can be debit or credit for accounting purposes. Debit Nillable An optional property indicating an intersecting fact can be nil or reported with no value regardless of its data type. Note that this is not the same as having a value of 0. False Abstract A property indicating the concept is specifically intended for organizational purposes within the taxonomy. False Data Type The type of data the concept can represent. Data types are formally defined and discussed in Section 2.3.1. Monetary Substitution Group A property categorizing the concept as one of a number of types, such as item, dimension, or enumeration, among others. Item\n\nTable 2-2. Concept properties and their relation to the expense example (Figure 2-6)\n\nAgain, the nature of the data leads to these property choices. For example, expenses are always monetary values expressed for a month. Also, because these expenses should always have a value, they are not nillable.\n\nThe values of these properties for each concept are stored in the taxonomy itself. The taxonomy schema is defined using the XBRL Specification and is in XML format. Example 2-1 is an excerpt from an XBRL taxonomy schema showing the concept definition of one of the example concepts:\n\nExample 2-1. An example XBRL concept definition\n\nThe element tag describes the XBRL concept using XML syntax. The XML syntax is the same syntax as XML schema documents. For more information on XML Schema, see Appendix A. The attributes of the XML element represent the properties of the concept as described above. Attributes with the \"xbrli\" namespace are defined in the XBRL Instance Schema. For more information on the XBRL Instance Schema, see Appendix A.\n\n2.2.6.3 Concept Naming\n\nAs one might imagine, a taxonomy with many concepts demands good organization and consistent concept names. The XBRL US Style Guide defines naming methods and constraints to avoid problems in building and maintaining a taxonomy. To be in agreement with that document and reflect consistency, concept names in this Handbook will use upper camel case naming (FoodExpense rather than foodExpense).\n\nThe amount of descriptive text to include in a concept name can also be tricky to determine. As an example, how should a concept used for facts expressing maximum electrical component heat dissipation be named? The following are all possibilities:\n\nElectricalComponentHeatDissipation\n\nComponentHeatDissipation\n\nMaximumElectricalComponentHeatDissipation\n\nMaximumElectricalComponentHeatDissipationInWatts\n\nTotalMaximumElectricalComponentHeatDissipationInWatts\n\nThere are a lot of options, but certain rules should be kept in mind when creating concept names. For example, adding \"watts\" to the name is considered bad practice because \"watts\" is a unit (which should be dictated by the unit core dimension). Concept names should contain a noun. If there is ambiguity surrounding the use of a noun in a concept name, adjectives should be added to clearly indicate the type of noun. Generally, concept names should best reflect the semantic meaning of the concept while being concise, avoiding excessive descriptive language, and following commonly used terminology in the industry. For example, the concept name PropertyPlantAndEquipmentNet is concise and appropriately descriptive as opposed to PropertyPlantAndAccumulatedDepreciation. InventoryAllocated is preferable to InvestoryForUseInWorkOrdersAndForUseInSalesOrder. Concept names should also avoid referencing other concept names in determining their meaning.\n\nPrior to defining concept names, the XBRL US Style Guide should be reviewed.\n\n2.2.6.4 Concept Labels\n\nXBRL defines an adjunct to concepts called labels or label roles. Given a specific usage, labels and label roles provide further information and documentation associated with a concept. For example, the default label role for the concept described in the previous section might be \"Maximum continuous heat dissipation in a normal operating environment,\" while the documentation label role might specify more detailed information.\n\nLabel roles can also be used to aid preparers in understanding how a concept should be used or not used. For example, if a total role is not defined, preparers can assume that the concept should not be used as a total.\n\n2.2.7Fact Properties\n\nFacts inherit properties from their concept core dimension. These include the data type and whether or not the fact is nillable. As said in the previous section, these properties are determined through the concept core dimension, rather than the fact itself. However, facts do possess properties regarding precision and scaling that are specific to the fact. For instance, the concept EmployeeTurnoverRate may have a data type requiring a decimal number, and this would apply to every fact that is associated with this concept. However, a fact with this concept can have a decimals property specified that would indicate the precision of that particular fact and only that fact.\n\nThe names and types of properties that can be specified on a fact-by-fact basis change, depending on the transport format. Consult the specification for the specific transport format for more information.\n\n2.2.8 Adding Taxonomy-defined Dimensions\n\nAs stated above, there are many XBRL dimensions to organize facts. Thus far, dimensions that are defined by the XBRL Specification have been the focus of this chapter. These core dimensions, such as the concept core dimension and period core dimension, can provide useful additional meaning and structure to data. However, often there will be a need to organize facts by a custom structure. There are also times when a simple data model with one or two data dimensions cannot accurately represent the complexity of the relationships among the data points. In these cases, adding further dimensionality is a key step to building an XBRL data model. For example, a retail chain may want to report its profits by both region and time, or an agricultural industry could need to indicate crop growth by both crop type and the types of fertilizers used. In XBRL, this can be accomplished by adding layers of custom dimensionality through taxonomy-defined dimensions.\n\nA taxonomy-defined dimension is a grouping of concepts that is used to add organizational structure to facts. These dimensional concepts should not be directly associated with a data point but rather are employed to indicate additional contextual information beyond the simple semantic identifier or what is provided through any of the other core dimensions. Expanding the expense example by attributing the monthly expenses to two people in the same household creates a level of complexity that cannot be easily represented with only concepts. Previously, there were only two dimensions: expenses (as rows) and months (as columns). If the data set tracked the expenses of Bob's children, Jared and Allyson, more columns would be added as follows:\n\nFigure 2-11. Multiple facts and dimensions in an expense example\n\nWithin Figure 2-11, two \"person\" dimensions are expressed in the data, Jared and Allyson, for each month, making a total of three dimensions for the resulting data model: concepts (line items or rows), periods (columns), and person (subcolumns). How can the XBRL taxonomy be adapted to show this added layer of dimensionality? One could add additional concepts as part of the concept core dimension, such as\n\nFoodExpensesForJared and FoodExpensesForAllyson, but this could quickly become cumbersome and tedious once the data set becomes sufficiently large and complex.\n\nA taxonomy-defined dimension provides an answer to this situation by disaggregating Bob's Household Expenses. This new XBRL dimension is defined by a concept that represents the nature of an axis in the data set. In the example, a concept named Person would be added to the taxonomy. Good practice would also dictate that a suffix is appended to the name of this concept to indicate that this is a taxonomy-defined dimension and should not itself be used as a concept core dimension. In other words, this new concept should not be used directly with any one fact. For more information on suffixes, see the XBRL Style Guide. This would make the concept name PersonAxis.\n\nNow that there is a concept to describe the taxonomy-defined dimension, the components, or members, of this dimension must be described. In the example, this would be Jared and Allyson, the two people who belong to the reporting entity, \"Bob's Household.\" Therefore, they belong to the new PersonAxis. XBRL offers numerous ways to express these components, but for this example, concepts named Jared and Allyson will be used. Again, good style practice and clarity suggest adding a suffix to these concept names to indicate they should not be used as concept core dimensions. Thus, they will be named JaredMember and AllysonMember. For a more in-depth discussion on the other options to express the components of a taxonomy-defined dimension, see Section 3.4.2.\n\nTaxonomy-defined dimensions allow for even greater flexibility in data as any number of additional axes can be added to the data model. In this example, they were used to disaggregate composite data into additional data dimensions, but taxonomy-defined dimensions can be used to represent many other types of data architecture scenarios. Designing XBRL dimensions is discussed in Chapter 3.\n\n2.2.8.1 Contexts in XML and Inline XBRL\n\nWhen preparing XBRL in XML or Inline XBRL, preparers can provide single references that define the entity core dimension, period core dimension, and if available, taxonomy-defined dimensions. This grouping of references, which are called contexts, allow the preparer to create a single grouping once and apply it to multiple facts. For example, in the expenses example, a context could be created to represent the period January plus the entity Bob's Household plus the Jared component of the taxonomy-defined dimension Person. This context, which is shown in Example 2-2, has been given the name JanuaryForJared. It can be used to identify multiple facts on the expense table. The advantage of using contexts is that the combination of period/entity/taxonomy-defined dimension(s) need only be created once and can be used multiple times. They are a shorthand identifier for a complex but constant set of information that applies to numerous facts. Using contexts is similar to using pronouns (he, she, they, it) in place of using a proper name over and over. With the context defined, it is easier to refer to it rather than saying or \"spelling out\" the information again.\n\nWith the context defined, the XBRL example can be updated to use it. Remember, for XBRL in XML and Inline XBRL, these dimensions are added to the XBRL context element, so first examine the updated context definition:\n\nExample 2-2. An XBRL fact with a taxonomy-defined dimension in XML\n\nNow there is segment for the context. A segment is a way of adding taxonomy-defined dimensions. This segment uses the dimension example:PersonAxis and the component for that dimension example:JaredMember. The identifier for the context also changed to reflect this XBRL dimension. Note that context identifiers are used to link facts to contexts and have no meaning on their own. The fact now uses this identifier for the context. Segments are discussed in more detail in Section 3.5.5.\n\nFigure 2-12 illustrates how the context JanuaryForJared would be used in the expenses example. This context can be used for all ten reported facts as shown below. Different concept core dimensions (for food expenses, fuel expenses, etc.) would intersect with the JanuaryForJared context to represent separate facts.\n\nFigure 2-12. Expense example with an illustrated XBRL in XML context\n\nInline XBRL (Example 2-3) uses the same context definitions as XBRL in XML.\n\nExample 2-3. An XBRL fact with a taxonomy-defined dimension in Inline XBRL\n\n2.2.8.2 Representing Dimensions in Other Transport Formats\n\nJSON and CSV do not support the use of contexts. These approaches handle adding taxonomy-defined dimensions differently. The JSON syntax for this change appears in Example 2-4.\n\nExample 2-4. An XBRL fact with a taxonomy-defined dimension in JSON\n\nIn JSON, the additional XBRL dimension has been added to the fact, which uses the taxonomy-defined dimension as the key and the member concept as the value. Additional taxonomy-defined dimensions can be included this way.\n\nFor a more complete example of representing an XBRL report in JSON, XML, and Inline XBRL, see Section A.6.\n\n2.2.9 Attaching Footnotes to Facts\n\nTraditionally, a footnote adds further explanatory information to a statement or fact. In XBRL, footnotes are created through relationships between note text and facts using the footnote relationships. One instance of footnote text can be linked to multiple facts. The note core ID dimension is the dimension on the fact that associates the fact with one or more footnotes arcs. Note that because more than one fact can reference the same footnote, the note ID core dimension does not confer any uniqueness to the fact.\n\n2.3 Machine-readability\n\nWith a better understanding of what an XBRL fact entails, it becomes clear that the fact is the basic unit of the XBRL transport model. With its XBRL dimensions, the fact uniquely represents data points within the semantic data model and becomes self-describing. Data consumers can interpret the fact as necessary with the information provided through the XBRL dimension, the relations to other facts, and the content of the fact itself.\n\nA key facet of this interpretation, though, and one of the strengths and purposes of XBRL as a data model, is maintaining machine-readability. While XBRL offers the means to connect human-readable formats with machine-readability, its purpose is allowing a consuming system to take its facts and realign them appropriately to consumer data models and reporting structures. The system that receives the XBRL report\n\nshould be able to interpret the transport model and all its facts correctly. Therefore, it is the job of the XBRL taxonomy developer to ensure XBRL facts are consistent and appear in a predictable, anticipated manner.\n\nXBRL describes a format for data storage, organization, and transport. Most XBRL software can provide additional functionality, such as validation and mathematical comparisons. Because XBRL describes its own data model, software can perform these additional tasks with little or no additional development.\n\n2.3.1 Data Types\n\nA key facet of maintaining a consistent, predictable structure pertaining to an XBRL fact is clearly defining the fact's data type. Data types have been briefly discussed, but this section aims to take a deeper dive into explain how data types in XBRL enable machine-readability. For a consumer system to be able to translate incoming XBRL facts appropriately, those facts must conform to that system's expectations concerning data types. The data type selection is also critical to aid in validation and documentation of the fact content as intersected by the concept. For example, if a data type specifies that a fact's value must be positive and non-zero, then it becomes a simple matter for XBRL software to indicate an erroneous entry or report a fact error.\n\nAt a basic level, a data type defines the set of possible values for a fact. Data types can be simple, such as an integer, or they can have additional constraints, such as a non-negative integer. Data types can be generally grouped as numeric or non-numeric. Numeric data types can be used in mathematical operations. They cannot contain text. Non-numeric data types are not meant to be used mathematically. For example, a data point expressing a tax identification number may be expressed only in digits. However, the data type for that fact should not be numeric as there is no logical reason to perform mathematical operations on this identifier.\n\nAs previously stated, a fact's data type is determined by the data type property of its concept core dimension. Accordingly, the concept's data type should be dictated by the nature of the data it is meant to represent. A concept representing total energy output of a power plant, for example, suggests a data type that allows decimal precision. Similarly, a concept describing the number of people answering a survey should dictate an integer data type.\n\nXBRL derives its data types from the standard XML data types. Table 2-3 contains a sampling of common XBRL data types.\n\nData Type Description stringItemType Represents character strings in XML. booleanItemType Represents the values of two-valued logic (true, false). decimalItemType Represents a subset of real numbers, which can be represented by decimal numerals. dateTimeItemType Represents instants of time, optionally marked with a time zone offset. integerItemType Represents the standard mathematical concept of integer numbers by fixing the fractional digits of decimal to be 0 and prohibiting the trailing decimal point. monetaryItemType Represents a decimal with the added constraint of a currency unit. qNameItemType Represents a qualified XML name.\n\nTable 2-3. Common XBRL data types\n\nMany standard taxonomies contain additional data types. Developers can also create their own data types. Data type extensibility is discussed in Section 3.6.1.1. Because data types are built into XML, any program that can understand XML will be able to validate them at a basic level, even custom data types that are properly extended from standard data types. See Appendix A for more information on XML data types.\n\n2.3.2Mathematical Consistency\n\nFacts with a numeric data type must have a decimals or precision property that states how mathematically precise the value of the fact is. Because all numeric facts must have precision, XBRL software can maintain precision when performing mathematical calculations. Given this, when comparing a computed value versus a fact value, XBRL software can automatically accommodate for rounding errors.\n\n2.3.3Transformation and Interpretation\n\nThere are various formats to express values for data types, such as numbers and dates. XBRL uses specific formats for these data types as governed by the XML specification. However, Inline XBRL offers additional instructions for XBRL software to convert human-readable expressions of this information into the appropriate data type format. For example, an XBRL date must be in ISO 8601 format but many textual dates are written in descriptive language. An XBRL transformation describes how the descriptive language can be converted to the appropriate format. For a list of rules and more information, see the XBRL Transformation Registry.\n\nInline XBRL also offers a scaling property on individual facts to indicate to XBRL software that the value of the fact must be scaled before it is interpreted. For example, a table of facts may be expressed in millions without the trailing zeros to aid in human readability, but Inline XBRL must have appropriate scaling so the value of 123 is interpreted as 123000000.\n\n2.4 The Taxonomy\n\nWith a high-level understanding of basic XBRL constructs and how those constructs intersect to represent a fact, XBRL developers can now explore the structure and components of an XBRL taxonomy. As mentioned previously, XBRL taxonomies define a semantic data model used for transport between originating preparers and consumers, both of whom potentially have semantic data models of their own to store, analyze, and report data. An XBRL taxonomy may represent semantic relationships within either the originating model or the consumer model, and it may also define its own relationships depending on what is required. Thus far, the discussion in this document has focused on how XBRL facts are represented in an XBRL report with their associated dimensions, but without the taxonomy and its roadmap of how the dimensions relate to each other, the XBRL report lacks meaning.\n\nThough XBRL taxonomies may greatly differ concerning the nature of the data they are intended to represent, taxonomies all employ the same XBRL structures, tools, and rules to function as a transport model.\n\n2.4.1 Taxonomy Characteristics\n\nThe basic purpose of a taxonomy is to organize concepts into a hierarchy. A hierarchy defines how concepts relate to one another. It is often visualized as a tree structure (Figure 2-13).\n\nFigure 2-13. An example hierarchical taxonomy structure\n\nThere are three basic structures that can be visualized within a taxonomy: calculations, presentations, and definitions. All three are present within Figure 2-13. More on these topics is discussed later in this section and in Chapter 3. Taxonomies typically possess one or more entry points. An entry point is a collection of concept groups that have been joined for a specific use. For example, an entry point may consist of all of the presentations, calculations, and definitions that are relevant to banking within a financial reporting taxonomy. Entry points help organize concepts by their use and can aid preparers in navigating a taxonomy and locating the sections that apply to their reporting needs. Only the concepts in the entry point should be used to describe data that is expressed by that entry point, although other concepts may exist for other entry points. In other words, the entry point should contain all the concepts necessary to express the data represented by that entry point completely.\n\nNote that every item in the taxonomy structure is in fact a concept, though only the concepts that fall directly beneath a table in Figure 2-13 are concepts that can intersect with facts; these are concept core dimensions. The other concepts are either member concepts or other structural containers, such as tables and axes. This represents concept grouping, which is a way to define hierarchical relationships within the taxonomy. Concept groups can contain any number of other concepts and concept groups, just as a branch of a tree can connect to many smaller branches, some of which also leading to many other branches, and so on. This hierarchical structure and the concept names represent the transport data model.\n\nFor an XBRL hierarchical model, each node (or element of the tree) is considered a concept. In this way, a concept identifies a unique position within the taxonomy for a specific data item, an XBRL dimension, or a grouping of dimensions. The root concept (or node) is at the top of the tree and may represent an entry point or a presentation.\n\nFor example, Figure 2-14 reflects a hierarchical structure for representing types of aircraft.\n\nFigure 2-14. An example hierarchical representation of concepts that describes types of aircraft\n\nThe first column specifies the concept name. The second column represents the standard label for the concept. For example, CommonDomainMembersAbstract has a label that indicates it is an abstract (which is discussed in more detail in the next section). The label for the CommonTable concept indicates it is a table container. This may seem redundant, but it is important since each concept can have multiple labels associated with it for differing roles. More on how concept names and properties influence their roles is discussed in the next section.\n\nChildren of the concept are indented in this case. This is a common way of expressing the parent/child relationship. A concept's parent is a node one step higher in the hierarchy. A concept's siblings share the same parent concept. It should be noted that while XBRL uses a hierarchical structure to organize concepts, the parent/child relationship within XBRL does not imply or allow the inheritance of properties. For example, while the concepts shown in Figure 2-13 and Figure 2-14 are children of the table and axis concepts, they do not inherit the properties of those parent table or axis concepts. It should also be noted that, while concepts can have differing roles and exist within multiple different presentations, specific relationships defined between concepts exist within at least one of these types of relationship structures. Concept A cannot be a parent of Concept B if Concepts A and B are not within the same hierarchical structure in some entry point of the taxonomy. More on parent/child relationships is discussed in Section 3.4.4.\n\nA taxonomy does not have to be a single, self-contained organization. Taxonomies can reference and contain other taxonomies. The external taxonomies referenced in this way are known as a Discoverable Taxonomy Set (DTS) for the prime taxonomy. The external taxonomies can themselves reference additional taxonomies. All of the taxonomies in this chain are required to understand the prime taxonomy. Employing a DTS is very useful as it allows developers to build on existing standards for specific applications.\n\n2.4.2Concept Properties and How They Relate Concepts to Each Other\n\nThe organization, selection, and naming of concepts are critical to creating a well-formed taxonomy that matches the real-world data application. Each concept has properties associated with it, as previously discussed. In terms of taxonomy structure and organization, the concept name, the abstract property, and the substitution group property can express the concept's use within the taxonomy. Often all three should be addressed appropriately to indicate a concept's role.\n\nThe first of these properties is the concept name, which, as discussed before, is a machine-readable name created to describe the concept in a consistent manner. Naming conventions should be employed following certain style rules (check the XBRL US Style Guide for language and reference styles). Of note in this case is the use of specific suffixes to indicate a concept's role. Suffixes should be appended to certain concept names to help users distinguish between their uses (for example, \"Abstract\" for an abstract concept, \"Member\" for a concept that is an axis member, or \"Axis\" for the concept container for an axis). These suffixes were briefly introduced in Section 2.2.8, where example concepts belonging to taxonomy-defined dimensions were defined in XBRL.\n\nThe second property is the abstract property. Concepts that do not actually intersect facts often have their abstract property set to \"true.\" This specifically indicates that a concept is not a concept core dimension but rather an organizational item. Grouping concepts should have the abstract property set to \"true.\"\n\nFinally, there is the substitution group prop"
    }
}