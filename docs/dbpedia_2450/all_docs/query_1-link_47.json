{
    "id": "dbpedia_2450_1",
    "rank": 47,
    "data": {
        "url": "https://mathoverflow.net/questions/162125/what-areas-of-pure-mathematics-research-are-best-for-a-post-phd-transition-to-in",
        "read_more_link": "",
        "language": "en",
        "title": "What areas of pure mathematics research are best for a post-PhD transition to industry?",
        "top_image": "https://cdn.sstatic.net/Sites/mathoverflow/Img/apple-touch-icon@2.png?v=f1c9606b77ff",
        "meta_img": "https://cdn.sstatic.net/Sites/mathoverflow/Img/apple-touch-icon@2.png?v=f1c9606b77ff",
        "images": [
            "https://cdn.sstatic.net/Sites/mathoverflow/Img/logo.svg?v=3a674b060adf",
            "https://mathoverflow.net/posts/162125/ivc/0eda?prg=f8faf4af-aeb4-45ed-b01e-db835b971733"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-04-01T23:51:16",
        "summary": "",
        "meta_description": "I have a student who is looking to start a PhD in pure mathematics. She is talented and motivated, and will do quite well. She is still in a phase of her development where she is still open to the",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/mathoverflow/Img/favicon.ico?v=8bbfe38cfc48",
        "meta_site_name": "MathOverflow",
        "canonical_link": "https://mathoverflow.net/questions/162125/what-areas-of-pure-mathematics-research-are-best-for-a-post-phd-transition-to-in",
        "text": "Probability. A strong background in probability will permit to qualify for jobs in statistics and financial math. See AMS Notices where a lot of statistics about the employment of recent PhD is published yearly. And a salary survey.\n\nEDIT. My second guess was combinatorics/coding theory or PDE. But my friend explained me that PURE combinatorics is not so hot in the (industrial) job market, coding theory is not pure math, and pure PDE is very different from numerical PDE, the last thing is of course in great demand.\n\nEDIT2. Reply on Peter Shor's comment. The distinction between \"pure\" and \"applied\" math is not sharp. On my opinion, if a problem arises from a \"real world application\", it is applied math (like math physics, control theory, coding theory). If a problem arises from the inner logic of development of math then it is pure math (like Fermat's last theorem). But of course, the difference is fuzzy, and one can trace almost all math problems to the \"real world\". Frequently it happens like this: a problem arises in the real world, mathematicians like it, and start working on it, and then work and work, forgetting its real world origin. (Example: constructions with compass and ruler, etc.) Probability was also applied math at its origin. And it becomes pure math. Similar things we see in coding theory, math physics and computer science. A lot of \"computer science\" is pure math.\n\nI'd like to push back a bit on one of the presuppositions behind the question, namely that the best way to \"hedge your bets\" is to choose a topic whose mathematical content is most likely to be needed in whatever industrial job you might end up taking. At least in the United States, the dominant factor in getting a job in industry is the impression you make on whoever makes the hiring decision. For a job where your Ph.D. matters to the employer, chances are that you'll be asked to give a talk about your research, just as you would for an academic job. Based on my experience, I would say that the key things people look for in your talk are the following:\n\nCan they understand what problem you worked on and why it's interesting?\n\nDo you seem to really know your stuff and be able to solve problems that others would not be able to solve?\n\nAre you enough of a generalist that you can communicate effectively with people outside your specialty and pick up new areas quickly?\n\nNote that points 1 and 2 are not that different from what an academic employer is looking for, except that for an audience in industry you will typically need to work harder to achieve them.\n\nWith the above in mind, the advice I would give is this: First and foremost, you have to pick an area that you are very interested in. That gives you the best chance that you will get significant results and be able to communicate them with enthusiasm. Secondarily, it helps if you can work closely with someone who is not a mathematician, and ideally someone who has experience in industry. For example, if your advisor has collaborators in other fields then you may want to get one of them on your thesis committee, and get their perspective on what sorts of questions are interesting in their field. This doesn't even have to be a field that you're hoping to eventually get a job in; the key thing is to accumulate some experience with talking to people outside mathematics and figuring out what kinds of things they find appealing, as well as how to pitch your work in a way that gets their attention.\n\nOf course, professors in so-called applied areas of math are more likely to have the right kinds of connections, so by following my advice you have an elevated probability of winding up in one of the areas that other responders have mentioned. But my point is that your mindset shouldn't be, \"I must learn specific mathematical facts that I will need to know later\"; rather, it should be, \"I must learn how to communicate with non-mathematicians and demonstrate that I can solve whatever problems they need solved.\"\n\nIf you know coding you can even escape without even having any expertise (or having minimal knowledge) in probability (like me). I didn't end up into things that involved lots of probability theory simply because I didn't liked it (I got offers from finanical sectors but I rejected the job and preferred to be more into technical area of the industry). If you know how to program then fields such as coding theory, number theory and even algorithmic and algebraic number theory does help. PDE and Analysis obviously helps a lot in the areas of engineering.\n\nI think the secret is to know how to write a computer program and implement it yourself, because from my experience in the industry: colleagues (esp. from non-mathematical fields) will not believe in your ability until you give them a tangible result and you can only show that something works from a mathematical theory you have in mind if you show them in practice and not if you prove it on paper. This usually involves programming and developing an application that applies your theory, unless you want to end up in a lab and do experiments which is not fun at all. You can almost forget the idea of other colleagues developing an algorithm based on your theories. I remember long time ago I had an idea of a mathematical algorithm that ended up saving my company around 400,000 euros each year but I didn't get any support from my colleagues (who where mostly compute engineers) and so I just programmed my algorithm in my free time and then showed the result when I finally developed the program.\n\nAs someone who had a PhD in one of the more obscure area in math and is working in industry, I have to say in all of my job finding efforts (software, banks, hedgefunds), the math area that was the focus of my PhD has never come into play. What would have helped me get the job easier ? More programming experience, more statistics, but those aren't pure maths. I also find it hard to believe that specializing in one area of pure math will give you some advantage in solving a real world problem over other areas. Most real world problems don't require knowledge that is terribly deep, it shouldn't take more than a few months to equalize whatever knowledge gap one might have. The rest, which is much more important, is the hands on experience. Would a combinatorics Phd has some sort of inherent advantage in tackling a real world algorithm problem over an algebraic geometry student. I don't think so.\n\nBottom line, spend few hours a week learning programming & statistics (the applied one, not the theory of statistics). Then still specialize in the area of maths that she really likes.\n\nI have thought a bit about this question because I have been contemplating this transition for myself. Here are a few ideas:\n\n-Stochastic analysis: this is a good area of expertise if she hopes to go into finance (though I should include the caveat that recruiters for big finance firms have admitted to me that for recent graduates they filter more by prestige of academic credentials than by research area). There also seem to be many good problems in this area, for instance involving the application of stochastic PDE to differential geometry.\n\n-Machine learning: this is technically an area of computer science, but there are a lot of important theoretical problems and these problems are really math problems (indeed many people working in this area come from a pure math background). You might suggest she take a graduate class in machine learning if her university has one; one doesn't need to penetrate the literature too deeply to find good math problems. This sort of background could help her pursue a career in data science, for instance.\n\n-Mathematical biology: I don't know much this area except that there seem to be lots of jobs for people who know how to model proteins and cells. I've known students who have been jointly advised by a mathematician and a biologist, and this seemed to work out pretty well.\n\nWhatever else happens, if she is serious about this I would strongly encourage her to learn how to code if she hasn't already. I think there was a time when a mathematician could reasonably hope to get a job designing models or algorithms for engineers to implement, but that time seems to have passed. At the very least it will make her a much more flexible and attractive applicant.\n\nI once did most of a PhD, and bailed out to take an industry job, and I'm still commercial, although maths is my hobby. That was around twenty years ago.\n\nI'm a contractor/consultant, so I've been to loads of interviews and interview-like situations. As far as I remember, no-one has ever asked what my PhD was in, or even cared about the fact that I never finished it.\n\nWhat they do care about is the sorts of programs I can write, and occasionally how good I am at solving toy problems. Mostly they look for ability in languages like C or python. When the people who are offering the jobs are themselves computer science graduates or very good programmers, they care about whether I can write in one of the functional languages, say Ocaml, Haskell, or Lisp (any one will do, or anything similar).\n\nMathematicians are always good at solving the sorts of toy problems you get in interviews. I'd recommend 'Are you smart enough to work at Google' for lots of examples of the sorts of things interviewers ask. She'll read it in an afternoon and enjoy it.\n\nWriting programs tends to be seriously illuminating when you're trying to understand a mathematical idea.\n\nSo I'd advise her to do some piece of maths which deals with problems where you can use a computer to get answers. (I'm pretty sure that's all areas of maths, actually, but maybe there are some subjects where a computer would be useless. In which case I'd be worried that they weren't actually about anything.).\n\nAnd she should try to write programs and make pictures about her field. And she should write these programs in C, python, and lisp, to get the feel for the differences between them. Mathematicians tend to love lisp. My favourite flavours are scheme and clojure. If she has any matrices to multiply, she should try MATLAB/Octave as well.\n\nShe should also play with maxima/mathematica/maple if she does a lot of symbolic calculation, and R if she does statistics or likes to make nice graphs.\n\nI think if she does this she'll have a serious advantage over non-programming mathematicians in maths itself, and if she eventually goes into industry, she'll have picked up the crucial skills by magic, and have enjoyed the process.\n\nAs far as which area to choose goes, a Maths PhD is such a dreadful experience if you don't love your subject that the only possible advice is 'either do something you're obsessively interested in, or don't do one at all'.\n\nIf she has more than one thing she's obsessed about, pick the one that's more amenable to understanding by writing programs.\n\nI think combinatorics is also good for a post-PhD transition to industry. It is closely related to the computer science. For example, combinatorics is used frequently in computer science to obtain formulas and estimates in the analysis of different kinds of algorithms. So when you go to an IT company and you need to write the code or design an algorithm, a good background in combinatorics will help.\n\nAnd one part of the combinatorics, the graph theory, also has numerous natural connections to other areas. For example, graph theory gives a model for the network. So I think if you go to the industry to seek a job for companies related the network, having some knowledge of graph theory may be helpful.\n\nI have to say that maybe combinatorics are not so close to the industry as the probability, since the theorists of combinatorics are mainly interested in the intrinsic property of a discrete structure, and in industry people often use discrete structure such as graphs to solve problems in reality. Though there is a little work to do for a PhD student to find job in the industry, but a good understanding of combinatorics, I think, will be helpful. There are a few examples of master students and PhD students which transition to industry in our department, so maybe this is a way."
    }
}