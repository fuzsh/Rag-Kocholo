{
    "id": "dbpedia_2450_0",
    "rank": 76,
    "data": {
        "url": "https://softwaredominos.com/home/science-technology-and-other-fascinating-topics/quantum-computing-beyond-qubits-part-1-starting-with-the-basics/",
        "read_more_link": "",
        "language": "en",
        "title": "Quantum Computing, Beyond Qubits – Part 1: Starting With the Basics",
        "top_image": "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2023/10/cropped-logo.png?fit=32%2C32&ssl=1",
        "meta_img": "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2023/10/cropped-logo.png?fit=32%2C32&ssl=1",
        "images": [
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_4988.jpg?fit=400%2C320&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_5008.jpg?fit=400%2C320&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_5006.jpg?fit=400%2C320&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_7711.jpg?fit=400%2C320&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_1479.jpg?fit=684%2C1024&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_5159.jpg?fit=731%2C1024&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_4218.jpg?fit=731%2C1024&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_1590.jpg?fit=684%2C1024&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2023/10/GML_3576-1-e1696879838804.jpg?fit=300%2C420&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_0426.jpg?fit=600%2C338&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_1058.jpg?fit=600%2C338&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_2865.jpg?fit=600%2C338&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_3019.jpg?fit=600%2C338&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_4833.jpg?fit=600%2C401&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2024/04/GML_1528.jpg?fit=600%2C401&ssl=1",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2021/09/GML_2690.jpg?fit=1200%2C675&ssl=1",
            "https://secure.gravatar.com/avatar/1a75f8a5bd51b1ca8af749ca0e0fc0d4?s=25&d=identicon&r=g",
            "https://s0.wp.com/latex.php?latex=0100000110%5Cdots++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D%5En%2C+n+%5Cin+%5Cmathbb%7BN%7D++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=S_1+%3D+%5Calpha+%7C0%5Crangle+%2B+%5Cbeta+%7C1%5Crangle++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Calpha%2C+%5Cbeta+%5Cin+%5Cmathbb%7BC%7D+%5Cquad+and+%5Cquad+%7C%5Calpha%7C%5E2+%2B+%7C%5Cbeta%7C%5E2+%3D+1++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=Pr%28OFF%29+%3D+1+-+p+%3D%7C%5Calpha%7C%5E2++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=Pr%28ON%29+%3D+p+%3D+%7C%5Cbeta%7C%5E2++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=S_2+%3D+%5Calpha_1+%7C00%5Crangle+%2B+%5Calpha_2+%7C01%5Crangle+%2B+%5Calpha_3+%7C10%5Crangle+%2B+%5Calpha_4+%7C11%5Crangle++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Csum_%7B0%7D%5E%7B2%5En-1%7D+%7C%5Calpha_i%7C%5E2+%3D+1%2C+%5Cquad+%5Calpha_i+%5Cin+%5Cmathbb%7BC%7D++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5En++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=2%5E%7B50%7D+%3D+1%2C125%2C899%2C906%2C842%2C624++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=S_1+%3D+%5Cdfrac%7B1%7D%7B%5Csqrt2%7D+%28%7C0%5Crangle+%2B+%7C1%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=S_1++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C0%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C1%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7Cx%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7Cy%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7Cx%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7Cx%5Crangle+%5Coplus+%7Cy%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29+%3D+0+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29+%3D+1+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29+%3D+x+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29+%3D+%5Cbar%7Bx%7D+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2021/09/QM1-Deutsch-algorithm-1.png?resize=451%2C671&ssl=1",
            "https://s0.wp.com/latex.php?latex=f%5Ctextendash+CNOT+%7Cxy%5Crangle+%3D+%7Cf%28x%29+%5Coplus+y%5Crangle++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5CPsi_%7Bstep+1%7D+%3D+%7C11%5Crangle++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5CPsi_%7Bstep+2%7D+%3D+%5Cdfrac%7B1%7D%7B2%7D+%28+%7C00%5Crangle+-+%7C10%5Crangle+-+%7C01%5Crangle+%2B+%7C11%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5CPsi_%7Bstep+3%7D+%3D+%5Cdfrac%7B1%7D%7B2%7D+%28+%7C0f%280%29%5Crangle+-+%7C1f%281%29%5Crangle+-+%7C0%5Cbar+%7Bf%7D%280%29%5Crangle+%2B+%7C1+%5Cbar%7Bf%7D%281%29%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C0f%280%29%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C00%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5CPsi_%7Bstep+3%7Cconstant%7D+%3D+%5Cdfrac%7B1%7D%7B2%7D+%28+%7C0%5Crangle+-+%7C1%5Crangle%29%28%7Cf%280%29%5Crangle+-+%7C%5Cbar%7Bf%7D%280%29%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5CPsi_%7Bstep+3%7Cbalanced%7D+%3D+%5Cdfrac%7B1%7D%7B2%7D+%28+%7C0%5Crangle+%2B+%7C1%5Crangle%29%28%7Cf%280%29%5Crangle+-+%7C%5Cbar%7Bf%7D%280%29%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=f%28x%29++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdfrac%7B1%7D%7B2%7D+%28+%7C0%5Crangle+%2B+%7C1%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdfrac%7B1%7D%7B2%7D+%28+%7C0%5Crangle+-+%7C1%5Crangle%29++&bg=ffffff&fg=000&s=3&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C0%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C1%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Cdfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D+&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C0%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C1%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://s0.wp.com/latex.php?latex=%7C0%5Crangle++&bg=ffffff&fg=000&s=2&c=20201002",
            "https://softwaredominos.com/wp-content/uploads/2024/02/GeorgesLteif-150x150.jpg?crop=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-10-06T00:00:49+11:00",
        "summary": "",
        "meta_description": "1. Overview In 1996, Peter Shor published his paper on Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer. At that instant, the topic of quantum computing suddenly rose to a whole new level. The paper received a lot of interest from the community as prime factorization of large numbers was considered…",
        "meta_lang": "en",
        "meta_favicon": "https://i0.wp.com/softwaredominos.com/wp-content/uploads/2023/10/cropped-logo.png?fit=32%2C32&ssl=1",
        "meta_site_name": "",
        "canonical_link": "https://softwaredominos.com/home/science-technology-and-other-fascinating-topics/quantum-computing-beyond-qubits-part-1-starting-with-the-basics/",
        "text": "1. Overview\n\nIn 1996, Peter Shor published his paper on Polynomial-Time Algorithms for Prime Factorization and Discrete Logarithms on a Quantum Computer. At that instant, the topic of quantum computing suddenly rose to a whole new level.\n\nThe paper received a lot of interest from the community as prime factorization of large numbers was considered extremely difficult and was therefore used as the basis for RSA cryptography.\n\nAt that time, however, no quantum computers existed, at least not in the sense that we are familiar with.\n\nIt wasn’t until 1998 that a physical quantum computing machine could be demonstrated.\n\nThat system was a 2-qubit quantum computer successfully used to demonstrate the Deutsch-Jozsa algorithm.\n\nThe Deutsch-Jozsa problem had very little practical use; its sole purpose is to provide an example of a problem that is easy to solve on a quantum computer but difficult to solve on a classical one.\n\nToday, Google and IBM race towards quantum supremacy, a term coined by John Preskill, which refers to achieving practical computational capabilities impossible on classical computers.\n\nThe below text is from IBM’s Q System One website; it shows how far quantum computing has travelled in the last couple of years:\n\nIn 2016 we were the first company to put quantum computing on the cloud and into the hands of hundreds of thousands of users. Today, anyone can access an expanded selection of quantum cloud services based on IBM Quantum System One technology to research and explore new problems on our systems.\n\nBut what is quantum computing? Can we determine how fast it is compared to classical machines?\n\nIn this article, we will use David Deutsch’s algorithm as our background to try and answer the following questions:\n\nHow quantum computing works\n\nHow quantum computers differ from their classical counterparts\n\nHow a difficult problem can be solved efficiently using quantum computing\n\nBut before we proceed, a word of caution.\n\n3. How Quantum Computing Works\n\n3.1 Bits vs Qubits\n\nAs you probably may know, a classical computer manipulates “bits” of data. A bit is a discrete unit of information allowing you to answer a question with a Yes or a No. A series of n bits allows you to answer n such questions.\n\nA sequence of bits looks like this:\n\nOr, using a generic notation:\n\nA string of bits can represent any number as long as it has finite precision.\n\nQuantum computers, on the other hand, use quantum bits (or qubits for short).\n\nWe will use the analogy of an electric switch to understand the difference between a quantum bit and a classical bit.\n\nIn classical systems, the switch can be either ON or OFF. “Looking” at the switch many times does not alter its state.\n\nAlternatively, we need to think of the switch as residing in a closed box in a quantum system.\n\nThe box and its accompanying switch, at the time of creation, can be in one of the following three scenarios:\n\nYou probably noticed that Scenarios 1 and 2 are somehow trivial. Scenario 3, however, is particularly interesting.\n\nIn scenario 3, and before the box is opened, the switch is in a superposition of two states: ON and OFF.\n\nWe will measure if we “look” inside the box. The measurement will instantly yield either ON or OFF in all three cases.\n\nWhen we measure, we are altering the quantum system’s state forever. The switch will remain in the “pure” state, either ON or OFF.\n\nThis is a very subtle point.\n\nYou might wonder whether we model the quantum system this way (as being in two states simultaneously) because we lack knowledge of what’s inside the box. That is not true.\n\nTo understand why this is not the case, consider the following scenario.\n\nIf we create many identical quantum boxes, we expect that if one of them is ON, the others will be the same. What happens, though, with quantum systems is quite different.\n\nWhenever we open one of those boxes, we find the switch to be ON with probability p or OFF with probability (1 – p).\n\nThis leads us to conclude that the switch was, in fact, in a superposition of two states, ON and OFF, until the time of measurement.\n\nWe can now denote a single qubit as follows:\n\nWhere:\n\nThe probability of obtaining an OFF state is whereas we can observe an ON state with probability .\n\n3.2 Quantum Computing with Multi-Qubit Systems\n\nNow let us consider the case where we have two switches inside the box instead of one. Opening the box will give us one of the following states:\n\nWe can now denote that system as follows:\n\nAgain, the coefficients satisfy the following constraint so that the total probability does not exceed 1:\n\nThis tells us that a system of n classical bits can be fully described by n numbers, whereas a quantum system requires .\n\nA quantum computer can hold exponentially more information, so it is so powerful.\n\nSimulating a Quantum Computer\n\nA double floating-point number can be represented on 8 bytes in classical memory. A 50 qubit system requires bytes or 1 Petabytes. To give you some context, a supercomputer at NASA can have 2,016 nodes, with each node running 128GB of RAM for 252TB, a quarter of what’s required to run a 50-qubit simulator!\n\nThat by itself, however, does not explain the power of quantum computing. The truth is: an analog bit that can take any value from 0 to 1 can be said to represent a superposition of the two states.\n\nSo what makes quantum computers and qubits so special?\n\nWe can observe three major differences, at least, between a classical analog bit and a qubit: superposition, measurement, and entanglement.\n\n3.3 Quantum Superposition\n\nThe first major difference between a qubit and a classical analog bit with a value of 0.5 is that the latter is just that. No matter how often you measure the analog bit, it will always show 0.5.\n\nNow, consider a qubit in the following state:\n\nEach time we measure , we have a 50% chance of observing 0 or 1. We will never observe 0.5.\n\nTaking Advantage of Superposition\n\nThe power of quantum computing lies in its ability to take advantage of superposition. If we use a qubit in a superposition of two states as input into our quantum computer and perform a single computation, we will process both states in a single shot.\n\nOn a classical machine, each input will have to be processed separately.\n\nThis may not seem like much for one qubit, but performance will scale significantly, although perhaps not exponentially, for practical reasons, which we will discuss in subsequent articles.\n\nIs That All?\n\nSuperposition by itself does not tell the whole story. If you think about it, you will notice that running a measurement on a superposition of states will yield a random result for each measurement with probabilities defined by the amplitudes of each state. This is not very helpful. We need the system to produce the correct value. For this to happen, we need to use constructive interference, which we will discuss in greater detail in Part 2.\n\n3.4 Quantum Measurements and Computation\n\nThe second difference between classical bits and qubits is the measurement exercise.\n\nWhenever we measure the value of a quantum system, we invalidate it. Scientists refer to a collapse of the wave function.\n\nGoing back to our analogy with the box and switch, we can state the following:\n\nBefore we open the box for the first time, the switch can be either ON, OFF, or both OF and OFF\n\nOnce the box is opened, the switch state will “collapse” to either an ON or an OFF state and remain in that state forever.\n\nThere is no distinction between the state of a bit before or after the measurement with classical bits.\n\n3.5 Entanglement\n\nUsing the box and switch analogy, consider the following experiment.\n\nFirstly, we make an identical set of boxes with one switch inside each.\n\nSecondly, we move those boxes far apart so that they cannot influence each other when opened, even if they exchange photons running at the speed of light.\n\nFinally, we ran a measurement on each box.\n\nThe result is as follows: The two boxes (or quantum systems) are said to be entangled if the outcome of the measurements is perfectly correlated.\n\nFor example, if we measure the first qubit and find it ON, we will notice that the second qubit will always yield OFF.\n\nEinstein was unhappy with this phenomenon and referred to it as “spooky action on a distance” since it seemed to violate the Special Theory of Relativity. However, experiments have now unequivocally confirmed it.\n\n3.5 Classical Gates\n\nInputs and outputs from classical computers are typically strings of bits which are then grouped into bytes to make up the different data types that a computer can process.\n\nThe way these bits are manipulated is as follows.\n\nClassical computers pass these bytes, 2 bits at a time, into a sequence of logical, also known as Boolean, gates. Each gate will perform a Boolean operation such as AND, OR, XOR, or NOT.\n\nThe Universality of Logical Gates\n\nComputer science tells us that these gates are universal. This means that a sequence of such gates, applied in a specific order, would allow us to compute any function we desire, such as addition, subtraction, or multiplication of two numbers.\n\nFor practical reasons, though, we only use a Negative AND or NAND gate. A combination of NAND gates allows us to emulate all the other logical gates, which, in turn, allows the implementation of every other function.\n\n3.6 Computing with Quantum Gates\n\nQuantum gates follow a similar logic. We have unitary gates that apply transformations to single qubits and binary gates that apply transformations to two bits simultaneously.\n\nAn example of a unitary gate is the Hadamard gate. It takes a or a , both pure (or eigen-) states, and transforms them into a superposition of the two states.\n\nThis is crucial as it allows us to design a multi-state, and therefore multi-input, qubit system that can be used to feed a quantum computer.\n\nAn equally important gate is the binary CNOT gate which allows us (in conjunction with the Hadamard gate) to entangle and disentangle two qubits.\n\nThe CNOT gate takes two inputs and and spits out two others. The first output is unchanged: .\n\nThe second qubit will result from XORing the two input qubits: .\n\n3.7 Quantum Annealing\n\nAnother way that principles of quantum mechanics can be used to run quantum computations that can outperform classical computers is through quantum annealers.\n\nThese are different types of quantum computers that may not be as universal as those that use gates, which are the focus of this article.\n\nQuantum annealers are designed to solve combinatorial optimization problems, the most popular of which is the Travelling Salesman Problem.\n\n4. Quantum Solution to Deutsch’s Problem\n\nLet’s practice some of these concepts and see what we get.\n\n4.1 Problem Position\n\nThe best example of how quantum computing works is probably Deutsch’s algorithm.\n\nThe problem that Deutsch proposed was as follows: with a single evaluation, determine whether a unitary function is constant or balanced.\n\nBy definition, a constant function always returns a 0 or a 1, regardless of the value of x. The only two examples of constant functions we know of are and .\n\nAlso, by definition, a balanced function will return a value. The only two examples we can find are the Identity and the Negation functions.\n\nTypically, you need to evaluate at least twice to find the answer, as running the function only once does not provide us with enough information. On quantum computers, though, the Deutsch algorithm allows us to do that with a single evaluation.\n\n4.2 Deutsch-Josza Algorithm\n\nThe following diagram describes Deutsch’s algorithm applied to a quantum computer.\n\nWe have already encountered the Hadamard gate (H), the measurement gate, and the CNOT gate, but we have not discussed the f-CNOT gate.\n\nThe f-CNOT gate is just a modified version of the CNOT gate where x is replaced with f(x) before the XOR operation occurs.\n\nIt’s nothing more than applying f(x) to the input before CNOT.\n\n4.2.1 Step 1: Preparing the Inputs\n\nThe first step is fairly simple. In it, we prepare two qubits in the ON state.\n\n4.2.2 Step 2: Creating Quantum Superposition\n\nIn step two, we apply a Hadamard gate on each qubit to transform its state into a superposition of ON and OFF. This allows us to obtain an input variable with all four possible combinations of qubit states:\n\nThis is where the magic happens. The system in this superposition state will allow us to perform all four evaluations simultaneously.\n\n4.2.3 Step 3: Evaluating f(x)\n\nIn this step, we look at the operation outcome f-CNOT will perform on the input from Step 2. The result is as follows:\n\nLook at the first term . This is the outcome of the transformation of .\n\nBecause the first qubit is 0, the CNOT gate will not flip the other one. Notice how that is not the case in the second term. Indeed the 0 has been flipped to 1.\n\nWe must consider two cases to understand how this will help us solve our problem. The first is when is constant, and the other is when is balanced.\n\nWith a little bit of elementary algebra, we can arrive at the two situations:\n\nIf is constant, we obtain:\n\nOn the other hand, if is balanced, we get:\n\nBut how does that help us determine the nature of ? The key to solving this problem lies in the first factor of both equations:\n\nAnd:\n\n4.2.4 Step 4: Finding the Result\n\nTaking a closer look at these two equations, you will probably recognize them as the outcomes of the Hadamard gate for inputs and although differing by a factor of .\n\nWe know that the Hadamard gate if applied to the two inputs in superposition, will allow us to recover the original inputs and . And this is exactly what we will do.\n\nThe function is balanced if the outcome is . Otherwise, it’s constant.\n\n4.3 What Does Deutsch’s Algorithm Tell Us About Quantum Computing\n\nWe can see Deutsch’s problem and solution as an example of those exponentially more difficult to solve on classical computers but take only a few steps to resolve on quantum computers.\n\nIt also tells us that some effort needs to be made to reformulate the problem to allow us to take advantage of superposition or any other quantum phenomenon.\n\n5. Further Reading"
    }
}