{
    "id": "dbpedia_1424_0",
    "rank": 51,
    "data": {
        "url": "https://docs.gitlab.com/omnibus/settings/ssl/ssl_troubleshooting.html",
        "read_more_link": "",
        "language": "en",
        "title": "Troubleshooting SSL",
        "top_image": "https://docs.gitlab.com/favicon.ico?v=2",
        "meta_img": "https://docs.gitlab.com/favicon.ico?v=2",
        "images": [
            "https://docs.gitlab.com/assets/images/gitlab-logo-header.svg",
            "https://docs.gitlab.com/assets/images/gitlab-logo.svg",
            "https://docs.gitlab.com/assets/images/by-sa.svg",
            "https://dc.ads.linkedin.com/collect/?pid=30694&fmt=gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "GitLab product documentation.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico?v=2",
        "meta_site_name": "",
        "canonical_link": "https://docs.gitlab.com/omnibus/settings/ssl/ssl_troubleshooting.html",
        "text": "Useful OpenSSL Debugging Commands\n\nCommon SSL errors\n\nReconfigure Fails Due to Certificates\n\nCustom Certificates Missing or Skipped\n\nCustom certificates not detected\n\nLet’s Encrypt Certificate signed by unknown authority\n\nLet’s Encrypt fails on reconfigure\n\nUsing an internal CA certificate with GitLab\n\nX.509 key values mismatch error\n\nUsing GitLab Runner with a GitLab instance configured with internal CA certificate or self-signed certificate\n\nMirroring a remote GitLab repository that uses a self-signed SSL certificate\n\nUnable to perform Git operations due to an internal or self-signed certificate\n\nSSL_connect wrong version number\n\nschannel: SEC_E_UNTRUSTED_ROOT\n\nTroubleshooting SSL\n\nTier: Free, Premium, Ultimate Offering: Self-managed\n\nThis page contains a list of common SSL-related errors and scenarios that you may encounter while working with GitLab. It should serve as an addition to the main SSL documentation:\n\nConfigure SSL for a Linux package installation.\n\nSelf-signed certificates or custom Certification Authorities for GitLab Runner.\n\nConfigure HTTPS manually.\n\nUseful OpenSSL Debugging Commands\n\nSometimes it’s helpful to get a better picture of the SSL certificate chain by viewing it directly at the source. These commands are part of the standard OpenSSL library of tools for diagnostics and debugging.\n\nnote\n\nGitLab includes its own custom-compiled version of OpenSSL that all GitLab libraries are linked against. It’s important to run the following commands using this OpenSSL version.\n\nPerform a test connection to the host over HTTPS. Replace HOSTNAME with your GitLab URL (excluding HTTPS), and replace port with the port that serves HTTPS connections (usually 443):\n\necho | /opt/gitlab/embedded/bin/openssl s_client -connect HOSTNAME:port\n\nThe echo command sends a null request to the server, causing it to close the connection rather than wait for additional input. You can use the same command to test remote hosts (for example, a server hosting an external repository), by replacing HOSTNAME:port with the remote host’s domain and port number.\n\nThis command’s output shows you the certificate chain, any public certificates the server presents, along with validation or connection errors if they occur. This makes for a quick check for any immediate issues with your SSL settings.\n\nView a certificate’s details in text form using x509. Be sure to replace /path/to/certificate.crt with the certificate’s path:\n\n/opt/gitlab/embedded/bin/openssl x509 -in /path/to/certificate.crt -text -noout\n\nFor example, GitLab automatically fetches and places certificates acquired from Let’s Encrypt at /etc/gitlab/ssl/hostname.crt. You can use the x509 command with that path to quickly display the certificate’s information (for example, the hostname, issuer, validity period, and more).\n\nIf there’s a problem with the certificate, an error occurs.\n\nFetch a certificate from a server and decode it. This combines both of the above commands to fetch the server’s SSL certificate and decode it to text:\n\necho | /opt/gitlab/embedded/bin/openssl s_client -connect HOSTNAME:port | /opt/gitlab/embedded/bin/openssl x509 -text -noout\n\nCommon SSL errors\n\nSSL certificate problem: unable to get local issuer certificate\n\nThis error indicates the client cannot get the root CA. To fix this, you can either trust the root CA of the server you are trying to connect to on the client or modify the certificate to present the full chained certificate on the server you are trying to connect to.\n\nnote\n\nIt is recommended to use the full certificate chain in order to prevent SSL errors when clients connect. The full certificate chain order should consist of the server certificate first, followed by all intermediate certificates, with the root CA last.\n\nunable to verify the first certificate\n\nThis error indicates that an incomplete certificate chain is being presented by the server. To fix this error, you will need to replace server’s certificate with the full chained certificate. The full certificate chain order should consist of the server certificate first, followed by all intermediate certificates, with the root CA last.\n\nnote\n\nIf you get this error while running the system OpenSSL utility instead of the /opt/gitlab/embedded/bin/openssl utility, make sure you update your CA certificates at the OS level to fix it.\n\ncertificate signed by unknown authority\n\nThis error indicates that the client does not trust the certificate or CA. To fix this error, the client connecting to server will need to trust the certificate or CA.\n\nSSL certificate problem: self signed certificate in certificate chain\n\nThis error indicates that the client does not trust the certificate or CA. To fix this error, the client connecting to server will need to trust the certificate or CA.\n\nx509: certificate relies on legacy Common Name field, use SANs instead\n\nThis error indicates that SANs (subjectAltName) must be configured in the certificate. For more information, see this issue.\n\nReconfigure Fails Due to Certificates\n\nERROR: Not a certificate: /opt/gitlab/embedded/ssl/certs/FILE. Move it from /opt/gitlab/embedded/ssl/certs to a different location and reconfigure again.\n\nCheck /opt/gitlab/embedded/ssl/certs and remove any files other than README.md that aren’t valid X.509 certificates.\n\nnote\n\nRunning gitlab-ctl reconfigure constructs symlinks named from the subject hashes of your custom public certificates and places them in /opt/gitlab/embedded/ssl/certs/. Broken symlinks in /opt/gitlab/embedded/ssl/certs/ will be automatically removed. Files other than cacert.pem and README.md stored in /opt/gitlab/embedded/ssl/certs/ will be moved into the /etc/gitlab/trusted-certs/.\n\nCustom Certificates Missing or Skipped\n\nIf no symlinks are created in /opt/gitlab/embedded/ssl/certs/ and you see the message “Skipping cert.pem” after running gitlab-ctl reconfigure, that means there may be one of four issues:\n\nThe file in /etc/gitlab/trusted-certs/ is a symlink\n\nThe file is not a valid PEM- or DER-encoded certificate\n\nPerl is not installed on the operating system which is needed for c_rehash to properly symlink certificates\n\nThe certificate contains the string TRUSTED\n\nTest the certificate’s validity using the commands below:\n\n/opt/gitlab/embedded/bin/openssl x509 -in /etc/gitlab/trusted-certs/example.pem -text -noout /opt/gitlab/embedded/bin/openssl x509 -inform DER -in /etc/gitlab/trusted-certs/example.der -text -noout\n\nInvalid certificate files produce the following outputs:\n\nunable to load certificate 140663131141784:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:701:Expecting: TRUSTED CERTIFICATE\n\ncannot load certificate PEM_read_bio_X509_AUX() failed (SSL: error:0909006C:PEM routines:get_name:no start line:Expecting: TRUSTED CERTIFICATE)\n\nIn either of those cases, and if your certificates begin and end with anything other than the following:\n\n-----BEGIN CERTIFICATE----- -----END CERTIFICATE-----\n\nThen they are not compatible with GitLab. You should separate them into the certificate components (server, intermediate, root), and convert them to the compatible PEM format.\n\nTo test if c_rehash is not symlinking the certificate due to a missing perl interpreter:\n\n$ /opt/gitlab/embedded/bin/c_rehash /etc/gitlab/trusted-certs bash: /opt/gitlab/embedded/bin/c_rehash: /usr/bin/perl: bad interpreter: No such file or directory\n\nIf you see this message, you will need to install perl with your distribution’s package manager.\n\nIf you inspect the certificate itself, then look for the string TRUSTED:\n\n-----BEGIN TRUSTED CERTIFICATE----- ... -----END TRUSTED CERTIFICATE-----\n\nIf it does, like the example above, then try removing the string TRUSTED and running gitlab-ctl reconfigure again.\n\nCustom certificates not detected\n\nIf after running gitlab-ctl reconfigure:\n\nno symlinks are created in /opt/gitlab/embedded/ssl/certs/;\n\nyou have placed custom certificates in /etc/gitlab/trusted-certs/; and\n\nyou do not see any skipped or symlinked custom certificate messages\n\nYou may be encountering an issue where a Linux package installation thinks that the custom certificates have already been added.\n\nTo resolve, delete the trusted certificates directory hash:\n\nrm /var/opt/gitlab/trusted-certs-directory-hash\n\nThen run gitlab-ctl reconfigure again. The reconfigure should now detect and symlink your custom certificates.\n\nLet’s Encrypt Certificate signed by unknown authority\n\nThe initial implementation of Let’s Encrypt integration only used the certificate, not the full certificate chain.\n\nStarting in 10.5.4, the full certificate chain will be used. For installs which are already using a certificate, the switchover will not happen until the renewal logic indicates the certificate is near expiration. To force it sooner, run the following\n\nrm /etc/gitlab/ssl/HOSTNAME* gitlab-ctl reconfigure\n\nWhere HOSTNAME is the hostname of the certificate.\n\nLet’s Encrypt fails on reconfigure\n\nnote\n\nYou can test your domain using the Let’s Debug diagnostic tool. It can help you figure out why you can’t issue a Let’s Encrypt certificate.\n\nWhen you reconfigure, there are common scenarios under which Let’s Encrypt may fail:\n\nLet’s Encrypt may fail if your server isn’t able to reach the Let’s Encrypt verification servers or vice versa:\n\nletsencrypt_certificate[gitlab.domain.com] (letsencrypt::http_authorization line 3) had an error: RuntimeError: acme_certificate[staging] (/opt/gitlab/embedded/cookbooks/cache/cookbooks/letsencrypt/resources/certificate.rb line 20) had an error: RuntimeError: [gitlab.domain.com] Validation failed for domain gitlab.domain.com\n\nIf you run into issues reconfiguring GitLab due to Let’s Encrypt make sure you have ports 80 and 443 open and accessible.\n\nYour domain’s Certification Authority Authorization (CAA) record does not allow Let’s Encrypt to issue a certificate for your domain. Look for the following error in the reconfigure output:\n\nletsencrypt_certificate[gitlab.domain.net] (letsencrypt::http_authorization line 5) had an error: RuntimeError: acme_certificate[staging] (/opt/gitlab/embedded/cookbooks/cache/cookbooks/letsencrypt/resources/certificate.rb line 25) had an error: RuntimeError: ruby_block[create certificate for gitlab.domain.net] (/opt/gitlab/embedded/cookbooks/cache/cookbooks/acme/resources/certificate.rb line 108) had an error: RuntimeError: [gitlab.domain.com] Validation failed, unable to request certificate\n\nIf you’re using a test domain such as gitlab.example.com, without a certificate, you’ll see the unable to request certificate error shown above. In that case, disable Let’s Encrypt by setting letsencrypt['enable'] = false in /etc/gitlab/gitlab.rb.\n\nLet’s Encrypt enforces rate limits, which is at the top-level domain. In case you’re using your cloud provider’s hostname as the external_url, for example *.cloudapp.azure.com, Let’s Encrypt would enforce limits to azure.com, which could make the certificate creation incomplete.\n\nIn that case, you can try renewing the Let’s Encrypt certificates manually:\n\nsudo gitlab-ctl renew-le-certs\n\nUsing an internal CA certificate with GitLab\n\nAfter configuring a GitLab instance with an internal CA certificate, you might not be able to access it by using various CLI tools. You may experience the following issues:\n\ncurl fails:\n\ncurl \"https://gitlab.domain.tld\" curl: (60) SSL certificate problem: unable to get local issuer certificate More details here: https://curl.haxx.se/docs/sslcerts.html\n\nTesting by using the rails console also fails:\n\nuri = URI.parse(\"https://gitlab.domain.tld\") http = Net::HTTP.new(uri.host, uri.port) http.use_ssl = true http.verify_mode = 1 response = http.request(Net::HTTP::Get.new(uri.request_uri)) ... Traceback (most recent call last): 1: from (irb):5 OpenSSL::SSL::SSLError (SSL_connect returned=1 errno=0 state=error: certificate verify failed (unable to get local issuer certificate))\n\nThe error SSL certificate problem: unable to get local issuer certificate is displayed when setting up a mirror from this GitLab instance.\n\nopenssl works when specifying the path to the certificate:\n\n/opt/gitlab/embedded/bin/openssl s_client -CAfile /root/my-cert.crt -connect gitlab.domain.tld:443\n\nIf you have the previously described issues, add your certificate to /etc/gitlab/trusted-certs, and then run sudo gitlab-ctl reconfigure.\n\nX.509 key values mismatch error\n\nAfter configuring your instance with a certificate bundle, NGINX may display the following error message:\n\nSSL: error:0B080074:x509 certificate routines:X509_check_private_key:key values mismatch\n\nThis error message means that the server certificate and key you have provided don’t match. You can confirm this by running the following command and then comparing the output:\n\nopenssl rsa -noout -modulus -in path/to/your/.key | openssl md5 openssl x509 -noout -modulus -in path/to/your/.crt | openssl md5\n\nThe following is an example of an md5 output between a matching key and certificate. Note the matching md5 hashes:\n\n$ openssl rsa -noout -modulus -in private.key | openssl md5 4f49b61b25225abeb7542b29ae20e98c $ openssl x509 -noout -modulus -in public.crt | openssl md5 4f49b61b25225abeb7542b29ae20e98c\n\nThis is an opposing output with a non-matching key and certificate which shows different md5 hashes:\n\n$ openssl rsa -noout -modulus -in private.key | openssl md5 d418865077299af27707b1d1fa83cd99 $ openssl x509 -noout -modulus -in public.crt | openssl md5 4f49b61b25225abeb7542b29ae20e98c\n\nIf the two outputs differ like the previous example, there’s a mismatch between the certificate and key. Contact the provider of the SSL certificate for further support.\n\nUsing GitLab Runner with a GitLab instance configured with internal CA certificate or self-signed certificate\n\nBesides getting the errors mentioned in Using an internal CA certificate with GitLab, your CI pipelines may get stuck in Pending status. In the runner logs you may see the following error message:\n\nDec 6 02:43:17 runner-host01 gitlab-runner[15131]: #033[0;33mWARNING: Checking for jobs... failed #033[0;m #033[0;33mrunner#033[0;m=Bfkz1fyb #033[0;33mstatus#033[0;m=couldn't execute POST against https://gitlab.domain.tld/api/v4/jobs/request: Post https://gitlab.domain.tld/api/v4/jobs/request: x509: certificate signed by unknown authority\n\nFollow the details in Self-signed certificates or custom Certification Authorities for GitLab Runner.\n\nMirroring a remote GitLab repository that uses a self-signed SSL certificate\n\nWhen configuring a local GitLab instance to mirror a repository from a remote GitLab instance that uses a self-signed certificate, you may see the SSL certificate problem: self signed certificate error message in the user interface.\n\nThe cause of the issue can be confirmed by checking if:\n\ncurl fails:\n\n$ curl \"https://gitlab.domain.tld\" curl: (60) SSL certificate problem: self signed certificate More details here: https://curl.haxx.se/docs/sslcerts.html\n\nTesting by using the Rails console also fails:\n\nuri = URI.parse(\"https://gitlab.domain.tld\") http = Net::HTTP.new(uri.host, uri.port) http.use_ssl = true http.verify_mode = 1 response = http.request(Net::HTTP::Get.new(uri.request_uri)) ... Traceback (most recent call last): 1: from (irb):5 OpenSSL::SSL::SSLError (SSL_connect returned=1 errno=0 state=error: certificate verify failed (unable to get local issuer certificate))\n\nTo fix this problem:\n\nAdd the self-signed certificate from the remote GitLab instance to the /etc/gitlab/trusted-certs directory on the local GitLab instance, and then run sudo gitlab-ctl reconfigure as per the instructions for installing custom public certificates.\n\nIf your local GitLab instance was installed using the Helm Charts, you can add your self-signed certificate to your GitLab instance.\n\nYou may also get another error message when trying to mirror a repository from a remote GitLab instance that uses a self-signed certificate:\n\n2:Fetching remote upstream failed: fatal: unable to access &amp;#39;https://gitlab.domain.tld/root/test-repo/&amp;#39;: SSL: unable to obtain common name from peer certificate\n\nIn this case, the problem can be related to the certificate itself:\n\nValidate that your self-signed certificate isn’t missing a common name. If it is, regenerate a valid certificate\n\nAdd the certificate to /etc/gitlab/trusted-certs.\n\nRun sudo gitlab-ctl reconfigure.\n\nUnable to perform Git operations due to an internal or self-signed certificate\n\nIf your GitLab instance is using a self-signed certificate, or if the certificate is signed by an internal certificate authority (CA), you might experience the following errors when attempting to perform Git operations:\n\n$ git clone https://gitlab.domain.tld/group/project.git Cloning into 'project'... fatal: unable to access 'https://gitlab.domain.tld/group/project.git/': SSL certificate problem: self signed certificate\n\n$ git clone https://gitlab.domain.tld/group/project.git Cloning into 'project'... fatal: unable to access 'https://gitlab.domain.tld/group/project.git/': server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none\n\nTo fix this problem:\n\nIf possible, use SSH remotes for all Git operations. This is considered more secure and convenient to use.\n\nIf you must use HTTPS remotes, you can try the following:\n\nCopy the self-signed certificate or the internal root CA certificate to a local directory (for example, ~/.ssl) and configure Git to trust your certificate:\n\ngit config --global http.sslCAInfo ~/.ssl/gitlab.domain.tld.crt\n\nDisable SSL verification in your Git client. This is intended as a temporary measure, as it could be considered a security risk.\n\ngit config --global http.sslVerify false\n\nSSL_connect wrong version number\n\nA misconfiguration may result in:\n\ngitlab-rails/exceptions_json.log entries containing:\n\n\"exception.class\":\"Excon::Error::Socket\",\"exception.message\":\"SSL_connect returned=1 errno=0 state=error: wrong version number (OpenSSL::SSL::SSLError)\", \"exception.class\":\"Excon::Error::Socket\",\"exception.message\":\"SSL_connect returned=1 errno=0 state=error: wrong version number (OpenSSL::SSL::SSLError)\",\n\ngitlab-workhorse/current containing:\n\nhttp: server gave HTTP response to HTTPS client http: server gave HTTP response to HTTPS client\n\ngitlab-rails/sidekiq.log or sidekiq/current containing:\n\nmessage: SSL_connect returned=1 errno=0 state=error: wrong version number (OpenSSL::SSL::SSLError) message: SSL_connect returned=1 errno=0 state=error: wrong version number (OpenSSL::SSL::SSLError)\n\nSome of these errors come from the Excon Ruby gem, and could be generated in circumstances where GitLab is configured to initiate an HTTPS session to a remote server that is serving only HTTP.\n\nOne scenario is that you’re using object storage, which isn’t served under HTTPS. GitLab is misconfigured and attempts a TLS handshake, but the object storage responds with plain HTTP.\n\nschannel: SEC_E_UNTRUSTED_ROOT\n\nIf you’re on Windows and get the following error:\n\nFatal: unable to access 'https://gitlab.domain.tld/group/project.git': schannel: SEC_E_UNTRUSTED_ROOT (0x80090325) - The certificate chain was issued by an authority that is not trusted.\"\n\nYou must specify that Git should use OpenSSL:\n\ngit config --system http.sslbackend openssl\n\nAlternatively, you can ignore SSL verification by running:\n\ncaution\n\nProceed with caution when ignoring SSL due to the potential security issues associated with disabling this option at global level. Use this option only when troubleshooting, and reinstate SSL verification immediately after.\n\ngit config --global http.sslVerify false"
    }
}