{
    "id": "dbpedia_5009_3",
    "rank": 93,
    "data": {
        "url": "https://developer.android.com/studio/run/emulator-commandline",
        "read_more_link": "",
        "language": "en",
        "title": "Start the emulator from the command line",
        "top_image": "https://developer.android.com/static/images/social/android-developers.png",
        "meta_img": "https://developer.android.com/static/images/social/android-developers.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/android/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/android/images/lockup.svg",
            "https://developer.android.com/_static/android/images/logo-x.svg",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png",
            "https://developer.android.com/_static/android/images/logo-linkedin.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/android/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Discover command-line features that you can use with the Android Emulator.",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v4513918f2560a1fecca3cf64c2df2e8b263c90b977664567b98ccb062542a623/android/images/favicon.svg",
        "meta_site_name": "Android Developers",
        "canonical_link": "https://developer.android.com/studio/run/emulator-commandline",
        "text": "The Android SDK includes an Android device emulator—a virtual device that runs on your computer. The Android Emulator lets you develop and test Android apps without using a physical device.\n\nThis page describes command-line features that you can use with the Android Emulator. For information about using the Android Emulator UI, see Run apps on the Android Emulator.\n\nStart the emulator\n\nUse the emulator command to start the emulator, as an alternative to running your project or starting it through the AVD Manager.\n\nHere's the basic command-line syntax for starting a virtual device from a terminal prompt:\n\nemulator -avd avd_name [ {-option [value]} … ]\n\nOr\n\nemulator @avd_name [ {-option [value]} … ]\n\nFor example, if you launch the emulator from within Android Studio running on a Mac, the default command line will be similar to the following:\n\n/Users/janedoe/Library/Android/sdk/emulator/emulator -avd Pixel8_API_34 -netdelay none -netspeed full -qt-hide-window -grpc-use-token -idle-grpc-timeout\n\nPlease note that the arguments -qt-hide-window -grpc-use-token -idle-grpc-timeout are only used to run the emulator window within Android Studio. If you want to run the emulator on its own window, you should not use those extra parameters.\n\nYou can specify startup options when you start the emulator, but not after it has started.\n\nFor a list of AVD names, enter the following command:\n\nemulator -list-avds\n\nUse this option to display a list of AVD names from your Android home directory. You can override the default home directory by setting the ANDROID_SDK_HOME environment variable that specifies the root of the user-specific directory where all configuration and AVD content is stored.\n\nYou can set the environment variable in the terminal window before launching a virtual device or through your user settings in the operating system. For example, in your .bashrc file on Linux.\n\nTo stop the Android Emulator, close the emulator window.\n\nInstall an app\n\nIn addition to installing an app through Android Studio or the emulator UI, you can install your app on a virtual device by using the adb utility.\n\nTo use adb to install, run, and test your app, follow these general steps:\n\nBuild and package your app into an APK, as described in Build and run your app.\n\nStart the emulator from the command line, as described in the previous section, using any startup options necessary.\n\nInstall your app using adb.\n\nRun and test your app on the emulator.\n\nWhile the emulator is running, you can use the Emulator console to issue commands as needed.\n\nTo uninstall an app, do so as you would on an Android device.\n\nThe virtual device preserves the app and its state data across restarts in a user data disk partition (userdata-qemu.img). To clear this data, start the emulator with the -wipe-data option or wipe the data in the AVD Manager. For more information about the user data partition and other storage, see the following section.\n\nNote: The adb utility views the virtual device as an actual physical device. For this reason, you might have to use the -d flag with some common adb commands, such as install. The -d flag lets you specify which of several connected devices to use as the target of a command. If you don't specify -d, the emulator targets the first device in its list.\n\nUnderstand the default directories and files\n\nThe emulator uses associated files, of which the AVD system and data directories are the most important. It's helpful to understand the emulator directory structure and files when specifying command-line options, although you typically don't need to modify the default directories or files.\n\nThe Android Emulator uses the (QEMU) hypervisor.\n\nAVD system directory\n\nThe system directory contains the Android system images that the emulator uses to simulate the operating system. This directory has platform-specific, read-only files shared by all AVDs of the same type, including API level, CPU architecture, and Android variant. The default locations are the following:\n\nmacOS and Linux - ~/Library/Android/sdk/system-images/android-apiLevel/variant/arch/\n\nWindows - C:\\Users\\user\\Library\\Android\\sdk\\system-images\\android-apiLevel\\variant\\arch\\\n\nWhere:\n\napiLevel is a numeric API level or a letter for preview releases. For example, android-V indicates the Android VanillaIceCream preview. On release, it became API level 35, designated by android-35.\n\nvariant is a name corresponding to specific features implemented by the system image. For example, google_apis or android-wear.\n\narch is the target CPU architecture. For example, x86.\n\nUse the -sysdir option to specify a different system directory for the AVD.\n\nThe emulator reads the following files from the system directory:\n\nTable 1. System directory files read by the Android Emulator\n\nFile Description Option to specify a different file kernel-qemu or kernel-ranchu The binary kernel image for the AVD. kernel-ranchu is based on the QEMU emulator. -kernel ramdisk.img The boot partition image. This is a subset of system.img loaded by the kernel initially before the system image is mounted. It typically contains just a few binaries and initialization scripts. -ramdisk system.img The read-only, initial version of the system image. Specifically, the partition containing the system libraries and data corresponding to the API level and variant. -system userdata.img The initial version of the data partition, which appears as data/ in the emulated system and contains all writable data for the AVD. The emulator uses this file when you create a new AVD or use the ‑wipe-data option. For more information, see the userdata-qemu.img file description in the following section. -initdata\n\n-init-data\n\nAVD data directory\n\nThe AVD data directory, also called the content directory, is specific to a single AVD instance and contains all modifiable data for the AVD.\n\nThe default location is the following, where name is the AVD name:\n\nmacOS and Linux - ~/.android/avd/name.avd/\n\nWindows 10, and higher - C:\\Users\\user\\.android\\name.avd\\\n\nUse the -datadir option to specify a different AVD data directory.\n\nThe following table lists the most important files contained in this directory:\n\nTable 2. Important files in the AVD data directory\n\nFile Description Option to specify a different file userdata-qemu.img\n\nThe content of the data partition, which appears as data/ in the emulated system. When you create a new AVD or when you use the -wipe-data option to reset the AVD to the factory defaults, the emulator copies the userdata.img file in the system directory to create this file.\n\nEach virtual device instance uses a writable user-data image to store user and session-specific data. For example, it uses the image to store a unique user's installed app data, settings, databases, and files. Each user has a different ANDROID_SDK_HOME directory that stores the data directories for the AVDs created by that user. Each AVD has a single userdata-qemu.img file.\n\n-data cache.img The cache partition image, which appears as cache/ in the emulated system. It's empty when you first create an AVD or use the -wipe-data option. It stores temporary download files and is populated by the download manager and sometimes the system. For example, the browser uses it to cache downloaded web pages and images while the emulator is running. When you power off the virtual device, the file is deleted. You can persist the file by using the -cache option. -cache sdcard.img\n\n(Optional) An SD card partition image that lets you simulate an SD card on a virtual device. You can create an SD card image file in the AVD Manager or using the mksdcard tool. The file is stored on your development computer and must be loaded at startup.\n\nWhen defining an AVD in the AVD Manager, you can choose to use an automatically managed SD card file or a file that you created with the mksdcard tool. You can view the sdcard.img file associated with an AVD in the AVD Manager. The -sdcard option overrides the SD card file specified in the AVD. Note that this SD Card option will not work on Mac with Apple Silicon.\n\nYou can browse, send files to, and copy and remove files from a simulated SD card by using the emulator UI or the adb utility while the virtual device is running. You can't remove a simulated SD card from a running virtual device.\n\nTo copy files to the SD card file before loading it, mount the image file as a loop device and then copy the files. Or, use a utility, such as the mtools package, to copy the files directly to the image.\n\nThe emulator treats the file as a pool of bytes, so the SD card format doesn't matter.\n\nThe -wipe-data option doesn't affect this file. If you want to clear the file, delete the file and then re-create it using the AVD Manager or the mksdcard tool. Changing the size of the file also deletes the file and creates a new file.\n\n-sdcard\n\nList directories and files used by the emulator\n\nYou can discover where files are located in two ways:\n\nUse the -verbose or -debug init option when you start the emulator from the command line. Look at the output.\n\nUse the emulator -help-option command to list a default directory. For example:\n\nemulator -help-datadir\n\nUse '-datadir <dir>' to specify a directory where writable image files will be searched. On this system, the default directory is: /Users/me/.android See '-help-disk-images' for more information about disk image files.\n\nCommand-line startup options\n\nThis section lists options you can supply on the command line when you start the emulator.\n\nNote: The Android Emulator is continually under development to make it more reliable. For status on the issues reported against various command-line options and to report bugs, see the Android Issue Tracker.\n\nCommonly used options\n\nThe following table lists command-line startup options that you might use more often:\n\nTable 3. Commonly used command-line options\n\nCommand-line option Description Quick Boot -no-snapshot-load Performs a cold boot and saves the emulator state on exit. -no-snapshot-save Performs a quick boot if possible, but does not save the emulator state on exit. -no-snapshot Disables the Quick Boot feature completely and doesn't load or save the emulator state. Device Hardware -camera-back mode\n\n-camera-front mode Sets the emulation mode for a camera facing back or front. This overrides any camera setting in the AVD.\n\nmode can be any of the following values:\n\nemulated - The emulator simulates a camera in the software.\n\nwebcamn - The emulator uses a webcam connected to your development computer, specified by number. For a list of webcams, use the -webcam-list option. For example, webcam0.\n\nnone - Disables the camera in the virtual device.\n\nFor example:\n\nemulator @Pixel8_API_34 -camera-back webcam0\n\n-webcam-list Lists the webcams on your development computer that are available for emulation. For example:\n\nemulator @Pixel8_API_34 -webcam-list List of web cameras connected to the computer: Camera 'webcam0' is connected to device 'webcam0' on channel 0 using pixel format 'UYVY'\n\nIn the example, the first webcam0 is the name you use on the command line. The second webcam0 is the name used by the OS on the development computer. The second name varies depending on the OS.\n\nAs of SDK Tools 25.2.4, the AVD name is required.\n\nDisk images and memory -memory size\n\nSpecifies the physical RAM size, from 1536 to 8192 MBs. For example:\n\nemulator @Pixel8_API_34 -memory 2048\n\nThis value overrides the AVD setting.\n\n-sdcard filepath Specifies the filename and path to an SD card partition image file. For example:\n\nemulator @Pixel8_API_34 -sdcard C:/sd/sdcard.img\n\nIf the file isn't found, the emulator still launches, but without an SD card. The command returns a No SD Card Image warning.\n\nIf you don't specify this option, the default is sdcard.img in the data directory unless the AVD specifies something different. For details about emulated SD cards, see AVD data directory.\n\n-wipe-data Deletes user data and copies data from the initial data file. This option clears the data for the virtual device and returns it to the same state as when it was first defined. All installed apps and settings are removed. For example:\n\nemulator @Pixel8_API_34 -wipe-data\n\nBy default, the user data file is userdata-qemu.img and the initial data file is userdata.img. Both of these files reside in the data directory. The -wipe-data option doesn't affect the sdcard.img file. For more information about user data, see the section called Understand the default directories and files.\n\nDebug -debug tags Enables or disables the display of debug messages for one or more tags. Separate multiple tags by a space, comma, or column. For example:\n\n$ emulator @Pixel8_API_34 -debug init,metrics\n\nTo disable a tag, place a dash (-) in front of it. For example, the following option displays all debug messages, except the ones related to network sockets and metrics:\n\n-debug all,-socket,-metrics\n\nFor a list of tags and descriptions, use the -help-debug-tags option. For example:\n\nemulator -help-debug-tags\n\nYou can define the default debug tags in the ANDROID_VERBOSE environment variable. Define the tags you want to use in a comma-delimited list. Here's an example that shows how to specify the socket and gles tags:\n\nANDROID_VERBOSE=socket,gles\n\nIt's equivalent to using:\n\n-debug-socket -debug-gles\n\nor\n\n-debug socket,gles\n\n-debug-tag\n\n-debug-no-tag Enables a specific debug message type. Use the no form to disable a debug message type. For example:\n\nemulator @Pixel8_API_34 -debug-all -debug-no-metrics\n\nFor a list of tags, use the emulator -help-debug-tags command.\n\n-logcat logtags Enables the display of Logcat messages for one or more tags and writes them to the terminal window. For example, the following command enables error messages from all components:\n\nemulator @Pixel8_API_34 -logcat *:e\n\nlogtags uses the same format as the adb logcat logtags command. Enter adb logcat -help for more information. It's a list of space- or comma-separated log filters of the format componentName:logLevel. componentName is either a wildcard asterisk (*) or a component name, such as ActivityManager, SystemServer, InputManager, or WindowManager.\n\nlogLevel is one of these values:\n\nv - verbose\n\nd - debug\n\ni - informative\n\nw - warning log level\n\ne - error\n\ns - silent\n\nThe following example displays GSM component messages at the informative log level:\n\nemulator @Pixel8_API_34 -logcat '*:s GSM:i'\n\nIf you don't supply the -logcat option on the command line, the emulator looks for the ANDROID_LOG_TAGS environment variable. If ANDROID_LOG_TAGS is defined with a valid logtags value and isn't empty, the emulator uses its value to enable Logcat output to the terminal by default. You can also redirect the same or other log messages to the terminal through adb.\n\nFor more information about Logcat and adb, see Logcat command-line tool, View and write logs with Logcat, Log class, and Issue adb commands.\n\n-show-kernel Displays kernel debug messages in the terminal window. For example:\n\nemulator @Pixel8_API_34 -show-kernel\n\nOne use of this option is to check that the boot process works correctly.\n\n-verbose Prints emulator initialization messages to the terminal window. For example:\n\nemulator @Pixel8_API_34 -verbose\n\nIt displays which files and settings are actually selected when starting a virtual device defined in an AVD. This option is the same as specifying -debug-init.\n\nNetwork -dns-server servers Uses the specified DNS servers. servers is a comma-separated list of up to four DNS server names or IP addresses. For example:\n\nemulator @Pixel8_API_34 -dns-server 192.0.2.0,\n\n192.0.2.255\n\nBy default, the emulator tries to detect the DNS servers you're using and sets up special aliases in the emulated firewall network to allow the Android system to connect directly to the servers. Use the -dns-server option to specify a different list of DNS servers.\n\n-http-proxy proxy Makes all TCP connections through a specified HTTP/HTTPS proxy. If your emulator must access the internet through a proxy server, you can use this option or the http_proxy environment variable to set up the appropriate redirection. For example:\n\nemulator @Pixel8_API_34 -http-proxy myserver:1981\n\nproxy can be one of the following:\n\nhttp://server:port\n\nhttp://username:password@server:port\n\nThe http:// prefix can be omitted.\n\nIf this option isn't supplied, the emulator looks up the http_proxy environment variable and automatically uses any value matching the proxy format. For more information, see Using the emulator with a proxy.\n\n-netdelay delay\n\nSets network latency emulation to one of the following delay values in milliseconds:\n\ngsm - GSM/CSD (min 150, max 550).\n\nhscsd - HSCSD (min 80, max 400).\n\ngprs - GPRS (min 35, max 200).\n\nedge - EDGE/EGPRS (min 80, max 400).\n\numts - UMTS/3G (min 35, max 200).\n\nhsdpa - HSDPA (min 0, max 0).\n\nlte - LTE (min 0, max 0).\n\nevdo - EVDO (min 0, max 0).\n\nnone - No latency, the default (min 0, max 0).\n\nnum - Specifies exact latency.\n\nmin:max - Specifies individual minimum and maximum latencies.\n\nFor example:\n\nemulator @Pixel8_API_34 -netdelay gsm\n\nThe emulator supports network throttling as well as higher connection latencies. You can define it either through the skin configuration or with the ‑netspeed and -netdelay options.\n\n-netfast Disables network throttling. For example:\n\nemulator @Pixel8_API_34 -netfast\n\nThis option is the same as specifying -netspeed full -netdelay none. These are the default values for these options.\n\n-netspeed speed\n\nSets the network speed emulation. Specifies the maximum network upload and download speeds with one of the following speed values in kbps:\n\ngsm - GSM/CSD (up: 14.4, down: 14.4).\n\nhscsd - HSCSD (up: 14.4, down: 57.6).\n\ngprs - GPRS (up: 28.8, down: 57.6).\n\nedge - EDGE/EGPRS (up: 473.6, down: 473.6).\n\numts - UMTS/3G (up: 384.0, down: 384.0).\n\nhsdpa - HSDPA (up: 5760.0, down: 13,980.0).\n\nlte - LTE (up: 58,000, down: 173,000).\n\nevdo - EVDO (up: 75,000, down: 280,000).\n\nfull - No limit, the default (up: 0.0, down: 0.0).\n\nnum - Specifies both upload and download speed.\n\nup:down - Specifies individual up and down speeds.\n\nFor example:\n\nemulator @Pixel8_API_34 -netspeed edge\n\nThe emulator supports network throttling as well as higher connection latencies. You can define it either through the skin configuration or with the ‑netspeed and -netdelay options.\n\n-port port Sets the TCP port number that's used for the console and adb. For example:\n\nemulator @Pixel8_API_34 -port 5556\n\nThe default value is 5554 for the first virtual device instance running on the your machine. A virtual device normally occupies a pair of adjacent ports: a console port and an adb port. The console of the first virtual device running on a particular machine uses console port 5554 and adb port 5555. Subsequent instances use port numbers increasing by two. For example, 5556/5557, 5558/5559, and so on. The range is 5554 to 5682, allowing for 64 concurrent virtual devices.\n\nThe port assignments are often the same as specifying -ports port,{port + 1}. {port + 1} must be free and is reserved for adb. If any of the console or adb ports are already in use, the emulator won't start.\n\nThe ‑port option reports which ports and serial number the virtual device is using and warns if there are any issues with the values you provided. In the emulator UI, you can see the console port number in the window title and view the adb port number by selecting Help > About.\n\nNote that if the port value is not even and is in the range 5554 to 5584, the virtual device will start but not be visible when you use the adb devices command, if the adb server starts after the emulator. For this reason, we recommend using an even console port number.\n\n-ports\n\nconsole-port,adb-port Sets the TCP ports used for the console and adb. For example:\n\nemulator @Pixel8_API_34 -ports 5556,5559\n\nThe valid ports range is 5554 to 5682, allowing for 64 concurrent virtual devices. The -ports option reports which ports and serial number the emulator instance is using and warns if there are any issues with the values you provided.\n\nWe recommend using the -port option instead, where possible. The -ports option is available for network configurations that require special settings.\n\nFor more information about setting console and adb ports, see the -port option.\n\n-tcpdump filepath Captures network packets and stores them in a file. For example:\n\nemulator @Pixel8_API_34 -tcpdump /path/dumpfile.cap\n\nUse this option to begin capturing all network packets that are sent through the virtual Ethernet LAN of the emulator. Afterward, you can use a tool like Wireshark to analyze the traffic.\n\nNote that this option captures all ethernet packets and isn't limited to TCP connections.\n\nSystem -accel mode Configures emulator VM acceleration. For example:\n\nemulator @Pixel8_API_34 -accel auto\n\nAccelerated emulation works for x86 and x86_64 system images only. On Linux, it relies on KVM. On Windows and Mac, it relies on an Intel CPU and Intel HAXM driver. This option is ignored if you're not emulating an x86 or x86_64 device.\n\nValid values for mode are:\n\nauto - Determines automatically if acceleration is supported and uses it when possible (default).\n\noff - Disables acceleration entirely, which is primarily useful for debugging.\n\non - Forces acceleration. If KVM or HAXM isn't installed or usable, the emulator won't start and prints an error message.\n\nFor more information, see Configure hardware acceleration for the Android Emulator.\n\n-accel-check Checks whether a required hypervisor for emulator VM acceleration is installed (HAXM or KVM). For example:\n\nemulator -accel-check\n\nFor more information, see Check if a hypervisor is installed.\n\n-engine engine\n\nSpecifies the emulator engine:\n\nauto - Automatically selects an engine (default).\n\nclassic - Uses the older QEMU 1 engine (deprecated).\n\nqemu2 - Uses the newer QEMU 2 engine.\n\nFor example:\n\nemulator @Pixel8_API_34 -engine auto\n\nAuto-detection should choose the value that provides the best performance when emulating a particular AVD. Use the -engine option for debugging and comparison purposes only.\n\n-gpu mode Selects the GPU emulation mode. For example:\n\nemulator @Pixel8_API_34 -gpu swiftshader_indirect\n\nFor more information, see Configure graphics acceleration.\n\n-no-accel Disables emulator VM acceleration when using an x86 or x86_64 system image. It's useful for debugging only and is the same as specifying -accel off. For example:\n\nemulator @Pixel8_API_34 -no-accel\n\nFor more information, see Configure hardware acceleration for the Android Emulator.\n\n-nojni\n\n-no-jni Disables extended Java Native Interface (JNI) checks in the Android Dalvik or ART runtime. For example:\n\nemulator @Pixel8_API_34 -nojni\n\nWhen you start a virtual device, extended JNI checks are enabled by default. For more information, see JNI tips.\n\n-selinux {disabled|permissive} Sets the Security-Enhanced Linux (SELinux) security module to either disabled or permissive mode on a Linux operating system. For example:\n\nme-linux$ emulator @Pixel8_API_34 -selinux permissive\n\nBy default, SELinux is in enforcing mode, meaning the security policy is enforced. permissive mode loads the SELinux policy but doesn't enforce it. This option only logs policy violations. disabled mode disables kernel support for SELinux.\n\n-timezone timezone\n\nSets the time zone for the virtual device to timezone instead of the host time zone. For example:\n\nemulator @Pixel8_API_34 -timezone Europe/Paris\n\nBy default, the emulator uses the time zone of your development computer. Use this option to specify a different time zone or if the automatic detection isn't working correctly. The timezone value must be in zoneinfo format, which is area/location or area/subarea/location. For example:\n\nAmerica/Los_Angeles\n\nEurope/Paris\n\nAmerica/Argentina/Buenos_Aires\n\nThe specified time zone must be in the zoneinfo database.\n\n-version Displays the emulator version number. For example:\n\nemulator @Pixel8_API_34 -version\n\nOr\n\nemulator -version\n\nUI -no-boot-anim Disables the boot animation during emulator startup for faster booting. For example:\n\nemulator @Pixel8_API_34 -no-boot-anim\n\nOn slower computers, this option can significantly speed up the boot sequence.\n\n-screen mode Sets emulated touch screen mode. For example:\n\nemulator @Pixel8_API_34 -screen no-touch\n\nmode can be any of the following values:\n\ntouch - Emulates a touch screen (default).\n\nmulti-touch - Emulates a multi-touch screen.\n\nno-touch - Disables touch and multi-touch screen emulation.\n\nAdvanced options\n\nThe command-line startup options in the following table are available but not commonly used by the average app developer.\n\nIn the descriptions, the working directory is the current directory in the terminal where you're entering commands. For information about the AVD system directory and data directory and the files stored within them, see the section about default directories and files.\n\nSome of these options are appropriate for external app developers, and some of them are used primarily by platform developers. App developers create Android apps and run them on specific AVDs. Platform developers work on the Android system and run it inside the emulator with no pre-created AVD.\n\nTable 4. Advanced command-line options\n\nDeprecated options\n\nThe following command-line options are deprecated:\n\n-audio-in\n\n-audio-out\n\n-charmap\n\n-code-profile\n\n-cpu-delay\n\n-dpi-device\n\n-dynamic_skin\n\n-enable-kvm\n\n-gps\n\n-image\n\n-keyset\n\n-help-keys\n\n-help-keyset-file\n\n-nand-limits\n\n-noskin\n\n-no-skin\n\n-onion\n\n-onion-alpha\n\n-onion-rotation\n\n-radio\n\n-ranchu\n\n-raw-keys\n\n-scale\n\n-shared-net-id\n\n-shell-serial\n\n-skin\n\n-skindir\n\n-trace\n\n-useaudio\n\nGet help about command-line options\n\nThis section describes how to get help about the command-line options. It provides more in-depth information about the commonly used emulator command-line options that are available when you start the emulator.\n\nList all emulator options\n\nTo print a list of all emulator options, including a short description, enter the following command:\n\nemulator -help\n\nGet detailed help for a specific option\n\nTo print help for a specific startup option, enter the following command:\n\nemulator -help-option\n\nFor example:\n\nemulator -help-netspeed\n\nThis help is more detailed than the description provided by the -help option.\n\nGet detailed help for all options\n\nTo get detailed help for all emulator options, enter the following command:\n\nemulator -help-all\n\nList emulator environment variables\n\nTo get a list of emulator environment variables, enter the following command:\n\nemulator -help-environment\n\nYou can set environment variables in the terminal window before launching a virtual device, or you can set it through your user settings in the operating system. For example, set it in your .bashrc file on Linux.\n\nList debug tags\n\nTo print a list of tags for the -debug options, enter the following command:\n\nemulator -help-debug-tags"
    }
}