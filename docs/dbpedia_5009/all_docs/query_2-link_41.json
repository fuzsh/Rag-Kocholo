{
    "id": "dbpedia_5009_2",
    "rank": 41,
    "data": {
        "url": "https://medium.com/%40ameerky/building-todo-app-with-qt-and-c-for-absolute-beginner-1998f5dbc40c",
        "read_more_link": "",
        "language": "en",
        "title": "Building ToDo App with Qt and C++ for Absolute Beginner (Part 1 of 2)",
        "top_image": "https://miro.medium.com/v2/resize:fit:384/1*IYche3brISP0qNyrLgsmVQ.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:384/1*IYche3brISP0qNyrLgsmVQ.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*-8d2Jb9jyj7ruqAcHzANLw.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*-8d2Jb9jyj7ruqAcHzANLw.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Ky, Ameer",
            "medium.com"
        ],
        "publish_date": "2021-08-02T03:05:44.818000+00:00",
        "summary": "",
        "meta_description": "Qt is a powerful software which it allows developers to develop application in one codebase framework for any platform. Qt consists 2 parts; Qt Designer and coding part. Qt Designer is where you…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@ameerky/building-todo-app-with-qt-and-c-for-absolute-beginner-1998f5dbc40c",
        "text": "Qt is a powerful software which it allows developers to develop application in one codebase framework for any platform.\n\nQt consists 2 parts; Qt Designer and coding part. Qt Designer is where you build the user interface (UI) for application and code part is where the logic function of the UI is implemented.\n\nFull project repo? Skip to Coding : Building ToDo App with Qt and C++ for Absolute Beginner (Part 2)\n\nMotivation\n\nI believe Todo app is the way to start understanding the main mechanics of Qt such as Signals and Slots, and I try my best to include as many useful Qt components that might help you to develop a complex application and progress in the future.\n\nIntroduction\n\nI try to make this tutorial as simple and direct as possible. Not wasting time. Let’s go.\n\n**If the loaded image is pixelated/blur, try reload page.**\n\nSetting Up Project\n\nI am using Visual Studio 2019 and Qt 5.14.2 for Windows.\n\nYou still not setup your Qt for Vs 2019 yet? Don’t worry I got you covered : How to install Qt and setup for Visual Studio 2019.\n\nStep 1 : Create Qt Project\n\nOpen Visual Studio 2019 and create a new project. Search for Qt Widgets Application and name your project as ToDoApps.\n\nA Qt wizard will pop-up and click next.\n\nThen, select the Debug version of Qt for your platform. The important part is the Qt Modules, make sure there are Core, GUI and Widgets. These modules will be pre-included in your project but you can always add or remove the modules in the project setting anytime. Check the box in the debug column and click next.\n\nNext, change the BaseClass from QMainWindow into QWidget. The different between them are that QMainWindow has a pre-defined UI; menu bar, a status bar, a toolbar, and other widgets, and QWidget does not. BaseClass differences. Click finish.\n\nYour project file will be like so, and run the project as it is to make sure the library or modules included successfully.\n\nQt Designer\n\nThis crucial part here is naming the UI/object because the UI/object name will be used in code implementation for their interactions.\n\nStep 2 : Create Title Bar\n\nOpen the ToDoApps.ui file and it will automatically open the file in Qt Designer. Your file will be like so,\n\nDrag in Frame from Containers group in the Widget Box tab into the UI widget. This frame will be our container for the title bar.\n\nThen, drag in Label inside the frame. The label will be the title text.\n\nIn order to center the label inside the frame, drag in two Horizontal Spacer at both sides of the Label so that the Label is in between these spacer.\n\nSo far your apps will be like this,\n\nTo make sure all align correctly like an actual title bar, Right-Click on the frame (QFrame) in the Object Inspector and go to Lay out and select Lay out Horizontally.\n\nNow, Right-Click on the ToDoAppsClass (QWidget) and select Lay out Vertically.\n\nNow rename the frame (QFrame) as TitleBarFrame and rename the label (QLabel) as TitleText for easy reference.\n\nTo change the text in TitleText, Double-Click on the TitleText UI and type your title as “To Do Lists” or something like that.\n\nStep 3 : Create Add New ToDo Lists\n\nThere are 4 main parts here, main frame for the whole container, the add new todo frame, left frame for the todo task details and right frame for the add button. So if you familiar with HTML, it would be like this;\n\n<div>main frame\n\n<div>new todo frame\n\n<div>left frame<div/> <div>right frame<div/>\n\n<div/>\n\n<div/>\n\nFirst, we have to set the ToDoAppsClass (QWidget) layout to Break Layout. Right-Click on it and select Break Layout\n\n3.1) The 4 Frames\n\n(main frame) Drag in new Frame from Containers group in Widget Box below the title bar frame and rename it as ContentFrame.\n\n(new todo frame) Drag in another Frame inside the ContentFrame and rename it as AddToDoList.\n\n(left frame) Drag in another Frame inside the AddToDoList on the left side and rename it as AddLeft.\n\n(right frame) Drag in another Frame inside the AddToDoList on the right side and rename it as AddRight.\n\nNow it looks trash and we need to align it correctly.\n\nSet Lay out ToDoAppsClass (QWidget) to Lay out Vertically.\n\nSet Lay out ContentFrame (QFrame) to Lay out Vertically.\n\nSet Lay out AddToDoList (QFrame) to Lay out Horizontally.\n\nWe are not going to set the layout for the left and right frame yet because they still empty.\n\n3.2) Left Frame\n\nDrag in Label inside AddLeft frame, rename it as NewTaskText and Double-Click on it to change the text to “Add New Task”.\n\nDrag in Line Edit inside AddLeft frame and rename it as “NewTaskLineEdit”.\n\nDrag in Label inside AddLeft frame and rename it as “NewDateText” and Double-Click on it to change the text to “Date Created”.\n\nNow, Set the AddLeft frame layout to Layout Vertically.\n\n3.3) Right Frame\n\nDrag in Push Button inside AddRight frame, rename it as AddNewBtn and change the text to “Add”.\n\nSet the AddRight frame layout to Lay out Vertically.\n\nIf you want to add a placeholder for the Line Edit, just Double-Click on it and enter your placeholder text.\n\nStep 4 : Create ScrollArea for All New Tasks Added\n\nThis scroll area box will be the stack container for all the new tasks added.\n\nDrag in Scroll Area from Containers group and place it below AddToDoList (QFrame) and rename them as AllNewTasks (QScrollArea) and AllNewTasksContents (QWidget) for the child.\n\nDrag in Vertical Spacer inside AllNewTasksContents to make it span vertically.\n\nSet AllNewTasks lay out to Layout Vertically.\n\nAnd your final UI design will be like this :\n\nFor the newly added task UI/object will be created in runtime. Thus, the next part will be the C++ coding part where you can copy paste the code.\n\nI will explain how the Signals and Slots be used and how to implement interaction from UI in the code.\n\nContinue Part 2 : Building ToDo App with Qt and C++ for Absolute Beginner (Part 2)\n\nConclusion\n\nThis article just too long. That is why I made separate part for coding. However, I hope this part of tutorial guide help you to design the user interface part of your application and help you get better understanding on how to use Qt Designer."
    }
}