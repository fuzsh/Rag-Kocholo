{
    "id": "dbpedia_5009_0",
    "rank": 7,
    "data": {
        "url": "https://community.toradex.com/t/visual-studio-code-qt-template/22123",
        "read_more_link": "",
        "language": "en",
        "title": "Visual Studio Code Qt template",
        "top_image": "https://europe1.discourse-cdn.com/toradexcommunity/original/2X/9/96adb5b9fb5f7d0ff4cd754b2cd60a1c3386496c.jpeg",
        "meta_img": "https://europe1.discourse-cdn.com/toradexcommunity/original/2X/9/96adb5b9fb5f7d0ff4cd754b2cd60a1c3386496c.jpeg",
        "images": [
            "https://dub2.discourse-cdn.com/toradexcommunity/user_avatar/community.toradex.com/jeremias.tx/48/5_2.png",
            "https://europe1.discourse-cdn.com/toradexcommunity/original/2X/8/86f6f080cf97ee334c0df64590a40e33a35c02c5.png",
            "https://cdck-file-uploads-europe1.s3.dualstack.eu-west-1.amazonaws.com/toradexcommunity/original/2X/b/b5a84a5a8b8b2b6c53fa22441f38738bb55c63fc.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "vscode",
            "torizon",
            "torizon-os",
            "imx6ull",
            "imx6",
            "verdin"
        ],
        "tags": null,
        "authors": [
            "jeremias.tx"
        ],
        "publish_date": "2024-03-14T13:33:02+00:00",
        "summary": "",
        "meta_description": "Hi, \nI trying to build a Qt app to run on iMX8 module. I’m using the VS code extension. I can create a Qt application and compile and run the template example. \nI would like to add qt modules such as qserialport, qwidget&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://europe1.discourse-cdn.com/toradexcommunity/optimized/2X/9/96adb5b9fb5f7d0ff4cd754b2cd60a1c3386496c_2_32x32.jpeg",
        "meta_site_name": "Toradex Community",
        "canonical_link": "https://community.toradex.com/t/visual-studio-code-qt-template/22123",
        "text": "Hi,\n\nI trying to build a Qt app to run on iMX8 module. I’m using the VS code extension. I can create a Qt application and compile and run the template example.\n\nI would like to add qt modules such as qserialport, qwidget, qlabel, etc. How do I bring these in so I can include them in my qt application code.\n\nMy code is below. I’m trying to add QWidget, QLabel, and QSerialport.\n\nI have tried to add them to my package list but it does not help.\n\n{ \"deps\": [ \"qt6-serialport-dev\", \"libqt6widgets6\" ], \"devDeps\": [ \"qt6-serialport-dev\", \"libqt6widgets6\" ] }\n\n#include <QGuiApplication> #include <QQmlApplicationEngine> #include <iostream> #include <QDebug> //#include <QWidget> <- Where to add //#include <QLabel> <- Where to add //#include <QtSerialPort/QSerialPortInfo> <- Where to add using namespace std; int main(int argc, char *argv[]) { QGuiApplication app(argc, argv); QQmlApplicationEngine engine; const QUrl url(\"qrc:/torizonqthdt/QML/main.qml\"); QObject::connect(&engine, &QQmlApplicationEngine::objectCreated, &app, [url](QObject *obj, const QUrl &objUrl) { if (!obj && url == objUrl) QCoreApplication::exit(-1); }, Qt::QueuedConnection); engine.load(url); std::cout << \"Hello Torizon!\" << std::endl; return app.exec(); }\n\nGreetings @jojo,\n\nI have tried to add them to my package list but it does help.\n\nDid you mean to say this does \"not\" help, or is your issue resolved now?\n\nIf you’re still having issues could you share the exact errors/logs that show what is wrong.\n\nOff the top of my head, I see you added the packages to the project. But, did you also remember to link the nesscary libraries to your application during compilation?\n\nBest Regards,\n\nJeremias\n\nThank you for the reply. I fixed my typo above as it does not help.\n\nI have not done anything other then adding “Qt += widgets serialport” to the .pro file and adding the packages to the .json above.\n\nDo I link the libraries in the qt .pro file with “LIB +=” and “INCLUDPATH +=” as I would on my native linux machine?\n\nI’m new to torizon/toradex so I am not familiar with the process and could not find much documentation regarding this subject other than to add the packages to the .json file.\n\nHere is the error.\n\n[ 13%] Built target torizonqt_tooling [ 18%] Automatic MOC for target torizonqt [ 22%] Built target torizonqt_autogen [ 27%] Running AUTOMOC file extraction for target torizonqt [ 27%] Built target torizonqt_automoc_json_extraction Consolidate compiler generated dependencies of target torizonqt [ 31%] Building CXX object CMakeFiles/torizonqt.dir/main.cpp.o /home/TorizonQt/torizonqt/main.cpp:6:10: fatal error: QWidget: No such file or directory 6 | #include <QWidget> | ^~~~~~~~~ compilation terminated. gmake[2]: *** [CMakeFiles/torizonqt.dir/build.make:157: CMakeFiles/torizonqt.dir/main.cpp.o] Error 1 gmake[1]: *** [CMakeFiles/Makefile2:94: CMakeFiles/torizonqt.dir/all] Error 2 gmake: *** [Makefile:91: all] Error 2\n\nDo I link the libraries in the qt .pro file with “LIB +=” and “INCLUDPATH +=” as I would on my native linux machine?\n\nYou’re still compiling a C/C++ application so yeah libraries need to be properly configured and linked. Just installing them is usually not enough. For example look at our project template for Qt. By default It has these includes:\n\n#include <QGuiApplication> #include <QQmlApplicationEngine> #include <iostream>\n\nNow look at the CMakeLists.txt file for the project: vscode-torizon-templates/cppQML/CMakeLists.txt at dev · toradex/vscode-torizon-templates · GitHub\n\nNotice how the basic Qt libraries/components get linked and configured in this file. I imagine you have to do something similar for these new libraries you just added. On the Qt website I see there’s even more info on how to configure these in CMake: QWidget Class | Qt Widgets 6.6.2\n\nBest Regards,\n\nJeremias\n\nI was able to get “#include ” by modifying my CMakeList.txt like below. I can now build my Gui.\n\nind_package(Qt6 REQUIRED COMPONENTS Core Gui Qml Quick Widgets) target_link_libraries(torizonqt PRIVATE Qt6::Core Qt6::Gui Qt6::Qml Qt6::Quick Qt6::Widgets )\n\nWhen I add SerialPort like below I get the following error.\n\nfind_package(Qt6 REQUIRED COMPONENTS Core Gui Qml Quick Widgets SerialPort) target_link_libraries(torizonqt PRIVATE Qt6::Core Qt6::Gui Qt6::Qml Qt6::Quick Qt6::Widgets Qt6::SerialPort ) CMake Error at CMakeLists.txt:6 (find_package): Found package configuration file: /usr/lib/x86_64-linux-gnu/cmake/Qt6/Qt6Config.cmake but it set Qt6_FOUND to FALSE so package \"Qt6\" is considered to be NOT FOUND. Reason given by package: Failed to find Qt component \"SerialPort\". Expected Config file at \"/usr/lib/x86_64-linux-gnu/cmake/Qt6SerialPort/Qt6SerialPortConfig.cmake\" does NOT exist\n\n“/usr/lib/x86_64-linux-gnu/cmake/Qt6SerialPort/”\" Does not exist.\n\nMy question is how do I bring Qt6SerialPort or any other Qt module into my container/development environment that’s not included in torizon/qt6-wayland?\n\nWhen I developon a my native machine I just select that module when i download it.\n\nI have tried to add “qt6-serialport-dev” to my docker files and the torizonPackages.json in my vs code project but I see no change.\n\nThank for you help as I have just started with the torizon extension.\n\nI don’t get the same error as you. Here’s what my files look like:\n\n# CMakeLists.txt cmake_minimum_required(VERSION 3.16) project(qttest LANGUAGES CXX C) set(CMAKE_AUTOMOC ON) find_package(Qt6 REQUIRED COMPONENTS Core Gui Qml Quick Widgets SerialPort) qt_add_executable(qttest WIN32 main.cpp ) if(CMAKE_BUILD_TYPE STREQUAL \"Debug\") target_compile_definitions(qttest PRIVATE QT_QML_DEBUG) endif() set_target_properties(qttest PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"bin\" ARCHIVE_OUTPUT_DIRECTORY \"lib\" LIBRARY_OUTPUT_DIRECTORY \"lib\" WIN32_EXECUTABLE TRUE ) target_link_libraries(qttest PRIVATE Qt::Core Qt::Gui Qt::Qml Qt::Quick Qt6::Widgets Qt6::SerialPort ) qt_add_qml_module(qttest URI qttest VERSION 1.0 QML_FILES \"QML/main.qml\" \"QML/Scene.ui.qml\" RESOURCES \"QML/assets/torizon-logo.png\" )\n\n# torizonPackages.json { \"deps\": [ \"qt6-serialport-dev\", \"libqt6widgets6\" ], \"devDeps\": [ \"qt6-serialport-dev\", \"libqt6widgets6\" ] }\n\nAlso here’s what my includes look like:\n\n#include <QGuiApplication> #include <QQmlApplicationEngine> #include <iostream> #include <QWidget> #include <QSerialPort> #include <QSerialPortInfo\n\nWith this my application build just fine without issue. Now what I noticed is your error message here:\n\nExpected Config file at \"/usr/lib/x86_64-linux-gnu/cmake/Qt6SerialPort/Qt6SerialPortConfig.cmake\" does NOT exist\n\nWhy is it looking for this in x86_64-linux-gnu? Did you configure your build for x86 or something similar, instead of for arm/arm64?\n\nBest Regards,\n\nJeremias\n\nI have two targets, amd64 and arm64, when I create a Qt project from the Torizon template. I did not do any configuration.\n\nI have an order for a Verdin IMX8M plus that is currently being shipped.\n\nI have a Qt project, which includes QSerialPort, that I would like to port to run on the Verdin. I was hoping I could get the project compiled with arm64 in VS Code and be ready to push to the module when it arrives.\n\nMaybe since my target(Verdin) is not connected it is targeting my host machine as you mentioned.\n\nThank you for your help. I will report back when my module arrives.\n\nHi Jeremias,\n\nThank you for the reply.\n\nI created a new project and added qserialport to the torizonPackages.json and CMakeFile.txt file like in the above comments.\n\nI built “build-debug-arm64” and it compiled successfully.\n\nI then built “build-debug-arm64” and got the errors above. I had to install the following packages on my native machine to compile in vs code even though it compiles fine in QtCreator. I originally installed Qt through the online installer on my host machine.\n\nsudo apt install libqt6serialport6 libqt6serialport6-dev\n\nI did have to change my includes like below to get it to compile for amd64.\n\nI’m new to running containers so I have found that to gain access to the ports in a container we need to add the uart device to the project, add serial access permission, and add torizon user to the dialout group? From the documentation this is done in the configuration tab in vs code but I do not see it. Is this because I do not have a target(Verdin Module) connected?\n\n#include <QApplication> #include <QMainWindow> #include <iostream> #include <QDebug> #include <QWidget> #include <QLabel> #include <QtSerialPort/QSerialPort> #include <QtSerialPort/QSerialPortInfo> int main(int argc, char *argv[]) { QApplication app(argc, argv); QMainWindow window; window.setWindowTitle(\"QSerialPort Test Application\"); window.resize(200, 100); QLabel *label = new QLabel(\"QSerialPort Test Application\"); label->setAlignment(Qt::AlignCenter); window.setCentralWidget(label); window.show(); // Get a list of available serial ports QList<QSerialPortInfo> ports = QSerialPortInfo::availablePorts(); std::cout << \"Available Serial Ports:\" << std::endl; for (const QSerialPortInfo& portInfo : ports) { std::cout << \"Name: \" << portInfo.portName().toStdString() << std::endl; std::cout << \"Description: \" << portInfo.description().toStdString() << std::endl; std::cout << \"Manufacturer: \" << portInfo.manufacturer().toStdString() << std::endl; std::cout << \"System Location: \" << portInfo.systemLocation().toStdString() << std::endl; std::cout << \"Serial Number: \" << portInfo.serialNumber().toStdString() << std::endl; std::cout << \"Vendor Identifier: \" << QString::number(portInfo.vendorIdentifier(), 16).toStdString() << std::endl; std::cout << \"Product Identifier: \" << QString::number(portInfo.productIdentifier(), 16).toStdString() << std::endl; std::cout << std::endl; } return app.exec(); }\n\nThank you again for you help.\n\nNow I’m confused you said:\n\nI built “build-debug-arm64” and it compiled successfully.\n\nBut then right after you also said this:\n\nI then built “build-debug-arm64” and got the errors above.\n\nPlease clarify what is and is not working in your setup.\n\nFrom the documentation this is done in the configuration tab in vs code but I do not see it. Is this because I do not have a target(Verdin Module) connected?\n\nWhat documentation are you referring to specifically? Please always link the documentation you are referencing.\n\nIs this because I do not have a target(Verdin Module) connected?\n\nI mean if you don’t have the device yet, then you wouldn’t have any serial ports for your application to access anyways. Or are you talking about locally? You keep switching context between amd64 and arm64, it’s difficult for me to follow which platform you are talking about.\n\nBest Regards,\n\nJeremias\n\nThis topic has been solved.\n\nPerfect, glad to hear!\n\nI only see documentation for python and .net but i figured it would be the same set up for my vs code Qt c++ project.\n\nOh I see, the documentation you found is for our old version of the VSCode IDE extension. The interface is completely different now. I would not reference these as they would probably confuse you, since you’re using the new/current IDE extension.\n\nFor the current extension, to add a serial port or any device to your project and container you need to modify the docker-compose.yml file in your project. You should add an entry that specifies the file path of the device you want to add access for. For example like this:\n\ndevices: - \"/dev/snd\"\n\nOf course substitute for whatever device you’re trying to add. If you want to learn more about the kinds of configurations you can do in the docker-compose.yml you should refer to the official Docker documentation on this topic: Compose file version 3 reference | Docker Docs\n\nBest Regards,\n\nJeremias"
    }
}