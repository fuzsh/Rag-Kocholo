{
    "id": "dbpedia_5009_0",
    "rank": 92,
    "data": {
        "url": "https://riptutorial.com/qt/example/12519/hello-world",
        "read_more_link": "",
        "language": "en",
        "title": "Qt Tutorial => Hello World",
        "top_image": "https://riptutorial.com/Images/home.jpg",
        "meta_img": "https://riptutorial.com/Images/home.jpg",
        "images": [
            "https://riptutorial.com/Images/logo_rip_full_white.png",
            "https://riptutorial.com/Images/icon-pdf-2.png",
            "https://riptutorial.com/Images/logo_rip_full_white.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn Qt - Hello World",
        "meta_lang": "en",
        "meta_favicon": "/Images/logo_rip.png",
        "meta_site_name": "",
        "canonical_link": "https://riptutorial.com/qt/example/12519/hello-world",
        "text": "Example\n\nIn this example, we simply create and show a push button in a window frame on the desktop. The push button will have the label Hello world!\n\nThis represents the simplest possible Qt program.\n\nFirst of all we need a project file:\n\nhelloworld.pro\n\nQT += core gui greaterThan(QT_MAJOR_VERSION, 4): QT += widgets TARGET = helloworld TEMPLATE = app SOURCES += main.cpp\n\nQT is used to indicate what libraries (Qt modules) are being used in this project. Since our first app is a small GUI, we will need QtCore and QtGui. As Qt5 separate QtWidgets from QtGui, we need add greaterThan line in order to compile it with Qt5.\n\nTARGET is the name of the app or the library.\n\nTEMPLATE describes the type to build. It can be an application (app), a library (lib), or simply subdirectories (subdirs).\n\nSOURCES is a list of source code files to be used when building the project.\n\nWe also need the main.cpp containing a Qt application:\n\nmain.cpp\n\n#include <QApplication> #include <QPushButton> int main(int argc, char *argv[]) { QApplication a(argc, argv); QPushButton button (\"Hello world!\"); button.show(); return a.exec(); // .exec starts QApplication and related GUI, this line starts 'event loop' }\n\nQApplication object. This object manages application-wide resources and is necessary to run any Qt program that has a GUI. It needs argv and args because Qt accepts a few command line arguments. When calling a.exec() the Qt event loop is launched.\n\nQPushButton object. The push button with the label Hello world!. The next line, button.show(), shows the push button on the screen in its own window frame.\n\nFinally, to run the application, open a command prompt, and enter the directory in which you have the .cpp file of the program. Type the following shell commands to build the program.\n\nqmake -project qmake make\n\nGot any Qt Question?\n\nAsk any Qt Questions and Get Instant Answers from ChatGPT AI:"
    }
}