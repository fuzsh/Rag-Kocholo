{
    "id": "dbpedia_5009_2",
    "rank": 55,
    "data": {
        "url": "https://developers.arcgis.com/qt/release-notes/prior-releases/release-notes-for-200-0/",
        "read_more_link": "",
        "language": "en",
        "title": "Release notes for 200.0",
        "top_image": "https://developers.arcgis.com/qt/static/thumbnail-45d6d823fb8081dc961cbf6e338407af.png",
        "meta_img": "https://developers.arcgis.com/qt/static/thumbnail-45d6d823fb8081dc961cbf6e338407af.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "qt",
            "what's new",
            "known issues",
            "issues resolved",
            "bugs",
            "deprecations",
            "enhancements",
            "breaking API changes"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Use the Qt framework with the latest version of ArcGIS Maps SDK for Qt to build cross-platform desktop and mobile apps that incorporate features such as mapping, geocoding, routing, spatial analysis.",
        "meta_lang": "en",
        "meta_favicon": "/qt/favicon-32x32.png?v=cc73a1016b830b97008ac5ee12a80774",
        "meta_site_name": "ArcGIS Maps SDK for Qt",
        "canonical_link": "https://developers.arcgis.com/qt/release-notes/prior-releases/release-notes-for-200-0/",
        "text": "Qt 6 Support\n\nQt 6 is the latest major version of the Qt framework, which brings in support for newer compilers, platforms, rendering APIs, language features, and more. This release of ArcGIS Maps SDK for Qt is the first release to support Qt 6. See the System requirements and Migration guide topics for more information on upgrading your app.\n\nmacOS ARM support\n\nApple Mac systems have transitioned from using Intel to Apple CPUs. The new Mac systems (often referred to as M1 and M2 Macs) now use ARM architecture instead of x86_64. While apps built for x86_64 will continue to run on ARM via Rosetta translation, the optimal solution is to support the two different architectures. This release of ArcGIS Maps SDK for Qt supports both architectures via universal libraries.\n\nCMake support in project templates\n\nQt 6 officially embraces CMake as the primary build system of Qt. CMake is now supported on all platforms and is the default build system when creating a new ArcGIS Maps SDK for Qt project.\n\nToolkit\n\nA new Utility network trace control has been added to the ArcGIS Maps SDK for Qt Toolkit for version 200.0. This control streamlines utility network trace workflows by allowing the user to select a starting point and trace configuration.\n\nEdge rendering\n\nVisualization of edges is now supported for 3D Object Scene Layers, which are typically used to represent buildings in your 3D scenes. Edge rendering helps you create stunning scenes with more detail and improves user depth perception. With this release, the Solid edge style is supported to accentuate and stylize the visually important edges, including substructures, exterior walls, balconies, and roofs. Edges of type Solid are rendered in a single color and are unaffected by scene lighting. Edge rendering is supported in apps built with ArcGIS Maps SDKs for Native Apps running on Android, Linux, macOS, or Windows. Support for this feature on iOS is planned for a future release. The Sketch edge style, resembling hand-drawn sketched lines, is not currently supported and will be rendered as solid edges.\n\nRun utility network traces offline\n\nArcGIS Maps SDKs for Native Apps can now run utility network traces (connected, subnetwork, upstream, and downstream) in a fully disconnected environment. You can create and fine-tune trace configuration options, or leverage named trace configurations to support even more complex traces while offline. The trace result types supported with offline utility networks are elements and functions. Offline tracing requires a mobile geodatabase with full utility network topology. These can be created using ArcGIS Pro as a standalone mobile geodatabase. In the future you will be able to create sync-enabled mobile geodatabases containing utility network topology using the OfflineMapTask or GeodatabaseSyncTask, or with offline map areas.\n\nIn this release, you can use the Utilit y N etwor k D efinition.capabilities to determine which utility network operations are available with your data. For example, a sync-enabled mobile geodatabase created with ArcGIS Enterprise 10.9 containing utility networks supports querying associations but not tracing. However, a standalone mobile geodatabase exported with ArcGIS Pro 2.9 or later that includes a full utility network supports both querying associations and tracing.\n\nSupport for Arcade 1.20\n\nArcGIS Maps SDKs for Native Apps now support Arcade 1.20. For more details, see the Arcade 1.20 release notes. Some enhancements include:\n\nNew functions: StandardizeGuid and HasValue.\n\nA new profile for QuickCapture.\n\nNote that the enhancement to the GetUser function to accept zero arguments always returns null, since ArcGIS Maps SDKs for Native Apps do not have the concept of an active portal.\n\nImproved consistency with the online implementation\n\nA trailing comma is now consistent with the online Arcade implementation. For example:\n\nFunction definitions function m y F n(a,b,c,) {}\n\nFunction calls m y F n(10, 11, 12,)\n\nArray literals [1,2,3,]\n\nDictionary literals { hell o : \"world\", goo d : \"night\", }\n\nThe checker that determines where function definitions are allowed has been improved. These checks are now consistent with the online implementation and prevent edge cases that could cause confusion around scoping rules. Function definitions within while statements, inside other function definitions, and codeblocks of if statements are not allowed."
    }
}