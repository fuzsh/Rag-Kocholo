{
    "id": "dbpedia_5009_3",
    "rank": 17,
    "data": {
        "url": "https://www.kdab.com/the-qt-less-traveled/",
        "read_more_link": "",
        "language": "en",
        "title": "The Qt Less Traveled",
        "top_image": "https://www.kdab.com/wp-content/uploads/stories/Capture-1-254x300.png",
        "meta_img": "https://www.kdab.com/wp-content/uploads/stories/Capture-1-254x300.png",
        "images": [
            "https://www.kdab.com/wp-content/uploads/stories/wpcf7_captcha/3496123957.png",
            "https://www.kdab.com/wp-content/themes/kdab18/images/svgs/kdab_date.svg",
            "https://www.kdab.com/wp-content/themes/kdab18/images/svgs/kdab_user.svg",
            "https://www.kdab.com/wp-content/themes/kdab18/images/svgs/kdab_comment.svg",
            "https://www.kdab.com/wp-content/uploads/stories/Capture-1-254x300.png",
            "https://www.kdab.com/wp-content/uploads/stories/font_stretch.png",
            "https://www.kdab.com/wp-content/uploads/stories/font_bold.png",
            "https://www.kdab.com/wp-content/uploads/stories/small_caps_broken-1.png",
            "https://www.kdab.com/wp-content/uploads/stories/small_caps_fixed.png",
            "https://www.kdab.com/wp-content/uploads/stories/broken_font_chooser-264x300.png",
            "https://www.kdab.com/wp-content/uploads/stories/workaround_font_chooser-264x300.png",
            "https://www.kdab.com/wp-content/uploads/stories/New-QAS-LOGO-Template3.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Albert Astals Cid"
        ],
        "publish_date": "2022-03-16T10:00:20+00:00",
        "summary": "",
        "meta_description": "Due to Qt's massive number of features, there are bugs in those lesser-used. QGIS hired us to fix some. Follow us down those less traveled paths.",
        "meta_lang": "en",
        "meta_favicon": "https://www.kdab.com/wp-content/uploads/stories/cropped-Favicon-32x32.png",
        "meta_site_name": "KDAB",
        "canonical_link": "https://www.kdab.com/the-qt-less-traveled/",
        "text": "Qt is a high quality library, but it is also massive in number of features. This massive number results in a higher likelihood that there are bugs that go unnoticed lying around in its less frequently used features or combination of features.\n\nOur friends at qgis.org hired us to solve some of those issues that had been affecting them for a while. QGIS is an open source geospatial information system (an application which allows users to design maps, analyze spatial data, and perform various ETL tasks) that makes use of the Qt library for its GUI components and relies on the QPainter framework for all of its map rendering and exporting functionality. Instead of trying to workaround these issues in their downstream project, the QGIS leadership instead invested some project funds to contract KDAB to fix these rare issues which were specifically affecting the QGIS application. Keep reading to follow our adventures through those less often traveled paths.\n\nSVG and Length Definitions\n\nSVG, Scalable Vector Graphics, is commonly used to share graphics that need to be drawn at arbitrary resolutions. We fixed two issues in that area regarding the parsing of elements:\n\nSVG has several specifications, 2.0, 1.1, and Tiny 1.2, each supporting different features. The Qt documentation is relatively clear that it supports a subset of features of Tiny 1.2: https://doc.qt.io/qt-5/svgrendering.html. That‚Äôs fine when you control the SVG that your application renders; your designers are a bit sad but can usually adapt to it. It gets much more complicated, however, when your application can use SVG files provided by the users. It‚Äôs relatively harder to explain the distinctions of the several SVG specifications to a normal user.\n\nYou can choose multiple units to represent SVG elements. Take, for example, the x,y properties of a text element. The definition in the specification (https://www.w3.org/TR/SVGTiny12/text.html#TextElement) is a bit long. But, after a few clicks, you end up with something that says:\n\nA length is a distance measurement. The format of a <length> is a <number> optionally followed by a unit identifier. If the <length> is expressed as a value without a unit identifier (e.g., ‚Äô48‚Äô), then the <length> represents a distance in the current user coordinate system. SVG Tiny 1.2 only supports optional units on the ‚Äòwidth‚Äô and ‚Äòheight‚Äô attributes on the ‚Äòsvg‚Äô element. These can specify values in any of the following units: in, cm, mm, pt, pc, px and %.\n\nIf we do the same for the SVG 1.1 spec, it doesn‚Äôt have that restriction of optional units only being valid for the width and height properties.\n\nHere, we colored a bit outside the lines because the Qt code was fine. It said that it supports SVG Tiny 1.2 and, as such, misrendered files that use unsupported features (like saying x=‚Äù15pt‚Äù), but given that supporting that feature was less than 10 lines. See https://codereview.qt-project.org/c/qt/qtsvg/+/376065 and https://codereview.qt-project.org/c/qt/qtsvg/+/376066. We applied the Robustness principle and allowed ourselves to be a bit more flexible in what we accept.\n\nQFont Ignored Stretch Value When Used Together with styleName\n\nNow, let‚Äôs talk about one of those combinations of two features that are probably not often used together.\n\nYou can tell QFont to stretch the font to a certain width:\n\nYou can also tell QFont to change the style of a given font, in this example to bold:\n\nHowever, if you tell it to do both things, Qt forgets to do the stretching. After some digging, the fix ended up being a single line of code: https://codereview.qt-project.org/c/qt/qtbase/+/373727.\n\nQPainterPath Did Not Respect SmallCaps in Some Situations\n\nThis bug was 10 years old! Let‚Äôs compare the old rendering (first below) and the fixed one (second below)\n\nSmallCaps is that feature that says, ‚Äúrender lowercase characters using (smaller) capital letters.‚Äù\n\nThe old rendering was half right, the letters positions were correct, but they where not ‚Äúsmall‚Äù. This means that the letters ended up overlapping each other.\n\nLike the previous fix, this was also a one liner: https://codereview.qt-project.org/c/qt/qtbase/+/373741 (The commit log is much longer than the actual fix). We also added some tests, in hopes of preventing regression: https://codereview.qt-project.org/c/qt/qtbase/+/374874.\n\nQFontComboBox and Broken Fonts\n\nQFontComboBox is a class used to select fonts. It shows the name of the font rendered in the font itself so you can see how it looks. Rendering the name of the font in its font is not always possible since there are some ‚ÄúSymbol‚Äù fonts that don‚Äôt have all the characters. In such cases, Qt renders the name of the font in your normal font, followed by adding a few characters of the font itself.\n\nFor that feature to work, the font has to correctly identify itself as a Symbol font. Sadly, that‚Äôs not always the case, as it‚Äôs not the case with the D050000L font that comes with most Linux distributions, for example. Here‚Äôs how that font name is rendered:\n\nIt‚Äôs definitely not easy to figure out what all those pencils are.\n\nOur first attempt at fixing that was saying, ‚ÄúWell, the type of font is not being properly detected, so let‚Äôs add a function so we can override the detected type.‚Äù We suggested a function called QFontDatabase::replaceWritingSystems to override the detected font type and get us this:\n\nAfter some back and forth with the reviewers, we ended up discarding that in favor of a more generic solution. That consisted of adding two new functions, QFontComboBox::setDisplayFont and QFontComboBox::setSampleText, that allow you to set which font and text will be used to display the preview of the font in question. Thus, we are able to workaround the initial issue while also adding extra functionality ‚Äî a win for everyone! üôÇ\n\nGetting Others to Fix Bugs for You\n\nSometimes when you try to fix a bug, your fix is not good enough. Fortunately, this doesn‚Äôt mean that all hope is lost. Your analysis of the situation may help the reviewers come up with a better solution.\n\nThis has happened twice in this series of bug fixes; let‚Äôs look at them.\n\nBrush Transformations When Printing to a PDF File\n\nSince brush transformations were not supported, I added a flag to the PDF printing engine that says so: https://codereview.qt-project.org/c/qt/qtbase/+/373978. Unfortunately, that flag regressed other features (the flags that mention which features are supported are not super detailed), so it had to be abandoned. But Eirik Aavitsland from The Qt Company came to the rescue and actually implemented support of brush transformations when printing to a PDF file with a one liner (as seen already a few times in this blog): https://codereview.qt-project.org/c/qt/qtbase/+/374484.\n\nQDockArea Sizing When Starting an Application\n\nThis one took a while to investigate. At the end, the problem was identified as:\n\nQMainWindow remembers a few things so it can restore its state when the application restarts. Among them are:\n\nthe size of the window when it was in ‚Äúnormal‚Äù state\n\nthe size of the window when it was in ‚Äúmaximized‚Äù state\n\nwhether the last state was maximized or normal\n\nthe sizes and positions of the dock widgets\n\nNow when starting the application, something like this happens:\n\nCreation of Window\n\nWindow is shown\n\nWindow says, ‚ÄúOh, it‚Äôs the first time I‚Äôm being shown; let‚Äôs restore my previous state.‚Äù\n\nIf it was maximized when the application was closed and upon restoring the previous state, it will say ‚ÄúI was maximized; I want to be maximized again, please.‚Äù\n\nAfter that, it will restore the sizes and positions of the dock widgets.\n\nThe problem is that ‚ÄúI want to be maximized‚Äù is not always a synchronous function (e.g. Linux/X11). Because of this, you sometimes still have a small-ish window when you get to the ‚Äúrestore dock widgets sizes and positions‚Äù phase and the dock widget sizes don‚Äôt make sense. The window says, ‚ÄúOh, you silly. I can‚Äôt give you 500 pixels of width for this dock widget; I‚Äôm only 400 pixels wide myself.‚Äù So, the dock widget gets a smaller size. Eventually, the window will get maximized, but your original dock widget size is already lost."
    }
}