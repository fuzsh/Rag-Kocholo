{
    "id": "dbpedia_5009_2",
    "rank": 27,
    "data": {
        "url": "https://subscription.packtpub.com/book/programming/9781789951752/2/ch02lvl1sec08/hello-world-using-the-qt-widgets-library",
        "read_more_link": "",
        "language": "en",
        "title": "Application Development with Qt Creator",
        "top_image": "https://subscription.packtpub.com/favicon.ico",
        "meta_img": "https://subscription.packtpub.com/favicon.ico",
        "images": [
            "https://subscription.packtpub.com/images/logo-new.svg",
            "https://content.packt.com/B13284/cover_image_small.jpg",
            "https://content.packt.com/B13284/cover_image_small.jpg",
            "https://content.packt.com/B13284/cover_image_small.jpg",
            "https://content.packt.com/B13284/cover_image_small.jpg",
            "https://content.packt.com/B16231/cover_image_small.jpg",
            "https://content.packt.com/B08328/cover_image_small.jpg",
            "https://content.packt.com/B20976/cover_image_small.jpg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-up-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/lock-close.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://subscription.packtpub.com/images/reader/lhs/chevron-down-grey.svg",
            "https://static.packt-cdn.com/products/9781789951752/graphics/assets/99606097-d4fb-4fbe-a686-4257eabe4a4d.png",
            "https://static.packt-cdn.com/products/9781789951752/graphics/assets/c58f4ae3-13b8-405a-9bd7-49fe2bf16c1e.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Lee Zhi Eng",
            "Nibedit Dey",
            "Lee Z Eng",
            "Mr. Lee Zhi Eng"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Qt is a powerful development framework that serves as a complete toolset for building cross-platform applications, helping you reduce development time and improve productivity. Completely revised and updated to cover C++17 and the latest developments in Qt 5.12, this comprehensive guide is the third edition of Application Development with Qt Creator.\nYou'll start by designing a user interface using Qt Designer and learn how to instantiate custom messages, forms, and dialogues. You'll then understand Qt's support for multithreading, a key tool for making applications responsive, and the use of Qt's Model-View-Controller (MVC) to display data and content. As you advance, you'll learn to draw images on screen using Graphics View Framework and create custom widgets that interoperate with Qt Widgets. This Qt programming book takes you through Qt Creator's latest features, such as Qt Quick Controls 2, enhanced CMake support, a new graphical editor for SCXML, and a model editor. You'll even work with multimedia and sensors using Qt Quick, and finally develop applications for mobile, IoT, and embedded devices using Qt Creator.\nBy the end of this Qt book, you'll be able to create your own cross-platform applications from scratch using Qt Creator and the C++ programming language.",
        "meta_lang": "en",
        "meta_favicon": "/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://subscription.packtpub.com/book/programming/9781789951752/2/ch02lvl1sec08/hello-world-using-the-qt-widgets-library",
        "text": "Hello World using the Qt Widgets library\n\nOne of Qt's strengths is its rich collection of GUI elements that you can use to create windowed applications. Making a GUI application is similar in principle to making a console application; instead of choosing Qt Console Application, select Qt Widgets Application from the New dialog presented when you choose New File or Project. Try it now:\n\nFirst, close the current file and project by clicking on Close All Projects and Editors from the File menu.\n\nNext, click on New File or Project again and click on Qt Widgets Application from the first step of the wizard.\n\nWalk through the wizard again, naming your project HelloWorldGui.\n\nThen, select the default kit. The New project wizard will prompt you for the name of the class implementing your main window. Leave the QMainWindow subclass as is and the name as MainWindow. Skip the build system and version control dialog portions of the wizard.\n\nQt Creator creates a default subclass of the class that provides the platform's basic window in the mainwindow.h and mainwindow.cpp files and creates a form that will contain the widgets for your application's window.\n\nThe following screenshot shows a default form as you're editing it in Qt Designer. If you run the application at this point, you'll see an empty window. Instead, double-click on the Forms folder in the project tree (the second pane) of Qt Creator and then double-click on the mainwindow.ui file. Qt Creator switches to the Design view, and you'll see something similar to the following screenshot:\n\nAs you can see from the preceding screenshot, on the left-hand side is a list of the layouts that you can choose to organize widgets. These include spacers, views, containers, buttons, and other widgets; other than that, there are a variety of edit and layout options as well. In the middle of the window is the preview of the layout of your application's main window. Further to the right are panes that show the hierarchy of objects in your main window and the properties of any item that you have clicked on in the main window.\n\nPlacing widgets in Qt Designer\n\nWhile we will explore Qt Designer more in Chapter 3, Designing Your Application with Qt Designer, you can get a feel for using it by building a simple UI. Begin by ensuring that you're in the Designer mode, then proceed as follows:\n\nWhere it says Type Here, right-click and choose Remove menu bar.\n\nDrag a label (under Display Widgets in the left-hand side pane) and drop it in the window preview in the center pane.\n\nDouble-click on the label that appears and type Hello world!.\n\nGrab a corner of the label and resize it so that the entire text is shown. You can also move it around in the window.\n\nNote that when you click on the label, the Property field in the lower-right pane is updated to show the properties of your new label.\n\nDrag a button (under Buttons in the left-hand side pane) and drop it in the window preview in the center pane.\n\nDouble-click on the button and change its text to Exit.\n\nWith the new button selected, change the objectName field in the Property browser to exitButton. You must follow the name described here so that the code generated when adding the slot function will be identical to the one shown in the next sample code snippet.\n\nRight-click on the button and select Go to slot.... A window appears with a list of slots (for now, you can think of a slot as something that is triggered on an action; we will discuss them more in Chapter 2, Building Applications with Qt Creator).\n\nChoose clicked() from the list that appears.\n\nQt Creator returns to the Edit view for your mainwindow.cpp file. Change it to read as follows:\n\n#include \"mainwindow.h\" #include \"ui_mainwindow.h\" #include <QApplication> MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow) { ui->setupUi(this); } MainWindow::~MainWindow() { delete ui; } voidMainWindow::on_exitButton_clicked() { QApplication::exit(); }\n\nBefore running your application, let's be sure that you understand the implementation of the MainWindow class. The constructor of the MainWindow class loads the description of the user interface for the main window and sets it up using the Qt Creator-generated Ui::MainWindow class. The destructor deletes the implementation of the code layout, and the on_exitButton_clicked method simply terminates the application by calling the exit static method implemented by the QApplication class.\n\nFinally, we have to add the on_exitButton_clicked method declaration to mainwindow.h if it's not already added. Double-click on this file in the browser on the left and make sure that it reads as follows:\n\n#ifndef MAINWINDOW_H #define MAINWINDOW_H #include <QMainWindow> namespaceUi { class MainWindow; } class MainWindow : public QMainWindow { Q_OBJECT public: explicit MainWindow(QWidget *parent = 0); ~MainWindow(); private slots: void on_exitButton_clicked(); private: Ui::MainWindow *ui; }; #endif // MAINWINDOW_H\n\nThe key lines you need to add are highlighted in the previous listing.\n\nWe'll learn more about signals and slots in the next chapter; for now, it's enough for you to know that you're declaring a private function to be triggered when you click on the button.\n\nRun the application. It should open a single window with the text Hello World!; clicking on the Exit button in the window (or on the close-box button in the upper-right corner) should close the application:\n\nAt this point, if you think you want to learn more about the Qt Widgets application, go ahead and try dragging other GUI items to the window, or explore the help documentation for the Qt Widgets application by switching to the Help view and clicking on Qt GUI from the list of help items."
    }
}