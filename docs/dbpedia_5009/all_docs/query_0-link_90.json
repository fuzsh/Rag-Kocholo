{
    "id": "dbpedia_5009_0",
    "rank": 90,
    "data": {
        "url": "https://riptutorial.com/qt",
        "read_more_link": "",
        "language": "en",
        "title": "Qt Tutorial => Getting started with Qt",
        "top_image": "https://riptutorial.com/Images/home.jpg",
        "meta_img": "https://riptutorial.com/Images/home.jpg",
        "images": [
            "https://riptutorial.com/Images/logo_rip_full_white.png",
            "https://i.stack.imgur.com/5tDKT.png",
            "https://i.stack.imgur.com/9my43.png",
            "https://i.stack.imgur.com/aXlRh.png",
            "https://i.stack.imgur.com/sZb2L.png",
            "https://i.stack.imgur.com/UfjWq.png",
            "https://i.stack.imgur.com/DLC1i.png",
            "https://i.stack.imgur.com/J0GvW.png",
            "https://i.stack.imgur.com/yrn4g.png",
            "https://i.stack.imgur.com/q36L3.png",
            "https://i.stack.imgur.com/Dfe7c.png",
            "https://i.stack.imgur.com/1kVGJ.png",
            "https://i.stack.imgur.com/fwdsk.png",
            "https://i.stack.imgur.com/1w8az.png",
            "https://i.stack.imgur.com/HHDRs.png",
            "https://i.stack.imgur.com/gNoYI.png",
            "https://i.stack.imgur.com/xkjfU.png",
            "https://i.stack.imgur.com/xFMnB.png",
            "https://i.stack.imgur.com/6Kun2.png",
            "https://i.stack.imgur.com/PPlm9.png",
            "https://i.stack.imgur.com/usf35.png",
            "https://i.stack.imgur.com/75Y5D.png",
            "https://i.stack.imgur.com/qr7iS.png",
            "https://i.stack.imgur.com/9NXKJ.png",
            "https://riptutorial.com/Images/icon-pdf-2.png",
            "https://riptutorial.com/Images/logo_rip_full_white.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn Qt - As official documentation stated, Qt is a cross-platform application development framework for desktop, embedded and mobile. Supported Platforms...",
        "meta_lang": "en",
        "meta_favicon": "/Images/logo_rip.png",
        "meta_site_name": "",
        "canonical_link": "https://riptutorial.com/qt",
        "text": "Remarks\n\nAs official documentation stated, Qt is a cross-platform application development framework for desktop, embedded and mobile. Supported Platforms include Linux, OS X, Windows, VxWorks, QNX, Android, iOS, BlackBerry, Sailfish OS and others.\n\nThis section provides an overview of what Qt is, and why a developer might want to use it.\n\nIt should also mention any large subjects within Qt, and link out to the related topics. Since the documentation for qt is new, you may need to create initial versions of those related topics.\n\nVersions\n\nBasic application with QtCreator and QtDesigner\n\nQtCreator is, at the moment, the best tool to create a Qt application. In this example, we will see how to create a simple Qt application which manage a button and write text.\n\nTo create a new application click on File->New File or Project:\n\nThen choose the Projects->Application->Qt Widgets Application\n\nThen you can choose the name and path of your project :\n\nNext, you can choose the kits you will be using. If you don't have any kit, QtCreator will create a kit with your Qt version and the main compiler of your computer. If you don't have any compiler, you can install one. On Windows: install Visual Studio. On Linux/Mac : install g++ or clang++.\n\nThen you can choose the name of your main window class, the inherited class, the name of the file corresponding to your main window class. If you are learning or testing Qt, you don't really need to change them.\n\nThe last step can be to choose a subproject of this project and to add a version control such as git and svn. Again if it's only for tests, you don't need to change them.\n\nThen click on the Finish Button. Now you should be here:\n\nThis is the base of your application. if you run it now by clicking on Build->Run or ctrl+R (by default) you will see an empty window.\n\nNow we will add a text and a button. to do that, we will use Qt Designer. Double click on the mainwindow.ui So now you should see: (if not and you see some xml file, click on the Design button at the left)\n\nHere Qt Designer ! Seems quite complicated. But once you get used to it, it really great. We will add some text and a button. On the left, there is the list of the items. You can click on one and drag&drop the objects. Click on the Push Button and drop it in the window. Then search the Label, and do the same (you have a filter at the top left where you can write the object you are looking for).\n\nYou should have something like this now:\n\nBy double clicking of the object, you can change the text on them. Or you can see at the bottom right the properties of the object you are now and find the text property. Here you can also change the name.\n\nNow if you save and run (better click on the edit button then save again to be sure your modifications has been saved), you get:\n\nHuh? Why my label and button are like that when I run ? It's because there is no layout in our central object. By the way, if you resize your main window, you can see that the object are keeping their place. So to fix it we will add a layout. Let's say a vertical layout. So drag and drop a vertical layout from the object list at the left. Now you should see:\n\nA floating layout.\n\nSo now right click on the main window, anywhere except on the label and button. c\\Click on Lay out->Lay Out Vertically. Now you should see that your objects a vertically aligned in your window. So now Move (with drag and drop again) your label and button in the layout. now you should get:\n\nIn your designer. And if you run you application:\n\nHere you can see your application with the label and the button. And if you resize your window, the label and button are resizing too.\n\nBut our button is still doing nothing. We can change it in 2 different ways. The first is to connect the button with a method we created. We can do it with the method name connect. So let's go back to our code and go to mainwindow.cpp now add:\n\nconnect(ui->pushButton, SIGNAL(clicked(bool)), this, SLOT(whenButtonIsClicked()));\n\nIn the constructor of your MainWindow AFTER the ui->setupUI(this); which initialize the ui.\n\nThen we can create the MainWindow::whenButtonIsClicked() in our .cpp class which could change the text of the label like that:\n\nvoid MainWindow::whenButtonIsClicked() { ui->label->setText(\"the button has been clicked !\"); }\n\nAnd in our mainwindow.h, we need to add:\n\npublic slots: void whenButtonIsClicked();\n\nPublic slots mean that this method can be called when a signal is received. connect link the signal when we click on the button and a method to call.\n\nSo now if we run our application and click on the button, we get:\n\nWhich mean that our connect is working. But with Qt Designer we have an even simpler way to do it. If you want to do the other way, remove the connect to unconnect the button (because we will connect it differently), go back to mainwindow.ui and right click on the button. Click on Go to slot... , select clicked() and press ok.\n\nThen you should be moved to this function:\n\nvoid MainWindow::on_pushButton_clicked() { }\n\nThis is the function which will be called when you click on the button. So you can add\n\nui->label->setText(\"it's even easier !\");\n\nInto it. Go to the mainwindow.h to save the change (when you do a go to slot, it create a method linked with the signal you asked for. It define the function in the .h but don't save it. So you should go to the file and save it).\n\nAnd now when you run your application and press the button, you can see the new message (if you still see the old one, is that you didn't remove the connect).\n\nWe can also add an int, double, etc in our label thanks to the QVariant which is an awesome class which can convert many thing in many others things. So left add an int which increase when we push the button.\n\nSo the .h:\n\n#ifndef MAINWINDOW_H #define MAINWINDOW_H #include <QMainWindow> namespace Ui { class MainWindow; } class MainWindow : public QMainWindow { Q_OBJECT public: explicit MainWindow(QWidget *parent = 0); ~MainWindow(); public slots: void whenButtonIsClicked(); private slots: void on_pushButton_clicked(); private: Ui::MainWindow *ui; double _smallCounter; }; #endif // MAINWINDOW_H\n\nThe .cpp:\n\n#include \"mainwindow.h\" #include \"ui_mainwindow.h\" MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow) { ui->setupUi(this); // connect(ui->pushButton, SIGNAL(clicked(bool)), this, SLOT(whenButtonIsClicked())); _smallCounter = 0.0f; } MainWindow::~MainWindow() { delete ui; } void MainWindow::whenButtonIsClicked() { ui->label->setText(\"the button has been clicked !\"); } void MainWindow::on_pushButton_clicked() { _smallCounter += 0.5f; ui->label->setText(\"it's even easier ! \" + QVariant(_smallCounter).toString()); }\n\nAnd now, we can save and run again. Every time you click on the button, it show \"it's even easier ! \" with the value of _smallCounter. So you should have something like:\n\nThis tutorial is done. If you want to learn more about Qt, let's see the other examples and documentation of Qt on the StackOverflow Documentation or the Qt Documentation\n\nHello World\n\nIn this example, we simply create and show a push button in a window frame on the desktop. The push button will have the label Hello world!\n\nThis represents the simplest possible Qt program.\n\nFirst of all we need a project file:\n\nhelloworld.pro\n\nQT += core gui greaterThan(QT_MAJOR_VERSION, 4): QT += widgets TARGET = helloworld TEMPLATE = app SOURCES += main.cpp\n\nQT is used to indicate what libraries (Qt modules) are being used in this project. Since our first app is a small GUI, we will need QtCore and QtGui. As Qt5 separate QtWidgets from QtGui, we need add greaterThan line in order to compile it with Qt5.\n\nTARGET is the name of the app or the library.\n\nTEMPLATE describes the type to build. It can be an application (app), a library (lib), or simply subdirectories (subdirs).\n\nSOURCES is a list of source code files to be used when building the project.\n\nWe also need the main.cpp containing a Qt application:\n\nmain.cpp\n\n#include <QApplication> #include <QPushButton> int main(int argc, char *argv[]) { QApplication a(argc, argv); QPushButton button (\"Hello world!\"); button.show(); return a.exec(); // .exec starts QApplication and related GUI, this line starts 'event loop' }\n\nQApplication object. This object manages application-wide resources and is necessary to run any Qt program that has a GUI. It needs argv and args because Qt accepts a few command line arguments. When calling a.exec() the Qt event loop is launched.\n\nQPushButton object. The push button with the label Hello world! . The next line, button.show() , shows the push button on the screen in its own window frame.\n\nFinally, to run the application, open a command prompt, and enter the directory in which you have the .cpp file of the program. Type the following shell commands to build the program.\n\nqmake -project qmake make\n\nInstallation and Setup on Windows and Linux\n\nDownload Qt for Linux Open Source Version\n\nGo to https://www.qt.io/download-open-source/ and click on Download Now, make sure that you are downloading the Qt installer for Linux.\n\nA file with the name qt-unified-linux-x-online.run will be downloaded, then add exec permission\n\nchmod +x qt-unified-linux-x-online.run\n\nRemember to change 'x' for the actual version of the installer. Then run the installer\n\n./qt-unified-linux-x-online.run\n\nDownload Qt for Windows Open Source Version\n\nGo to https://www.qt.io/download-open-source/. The following screenshot shows the download page on Windows:\n\nWhat you should do now depends on which IDE you're going to use. If you're going to use Qt Creator, which is included in the installer program, just click on Download Now and run the executable.\n\nIf you're going to use Qt in Visual Studio, normally the Download Now button should also work. Make sure the file downloaded is called qt-opensource-windows-x86-msvc2015_64-x.x.x.exe or qt-opensource-windows-x86-msvc2015_32-x.x.x.exe (where x.x.x is the version of Qt, for example 5.7.0). If that's not the case, click on View All Downloads and select one of the first four options under Windows Host.\n\nIf you're going to use Qt in Code::Blocks, click on View All Downloads and select Qt x.x.x for Windows 32-bit (MinGW x.x.x, 1.2 GB) under Windows Host.\n\nOnce you've downloaded the appropriate installer file, run the executable and follow the instructions below. Note that you need to be an administrator to install Qt. If you're not an administrator, you can find several alternative solutions here.\n\nInstall Qt in any operative system\n\nOnce you've downloaded Qt and opened the installer program, the installation procedure is the same for all operative systems, although the screenshots might look a bit different. The screenshots provided here are from Linux.\n\nLogin with a existing Qt account or create a new one:\n\nSelect a path to install the Qt libraries and tools\n\nSelect the library version and the features you want\n\nAfter downloading and the installation is finished, go to the Qt installation directory and launch Qt Creator or run it directly from the command line."
    }
}