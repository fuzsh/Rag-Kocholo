{
    "id": "dbpedia_5009_2",
    "rank": 23,
    "data": {
        "url": "https://cengizhanvarli.medium.com/qt-linguist-8d51eff22e4f",
        "read_more_link": "",
        "language": "en",
        "title": "QT Linguist",
        "top_image": "https://miro.medium.com/v2/resize:fit:700/1*aNX4EF39IEIWnHyNyGlTag.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:700/1*aNX4EF39IEIWnHyNyGlTag.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*MiJrd_Y4nsuwbx9rri09_g.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*MiJrd_Y4nsuwbx9rri09_g.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Cengizhan Varlı",
            "cengizhanvarli.medium.com"
        ],
        "publish_date": "2023-12-16T20:51:33.724000+00:00",
        "summary": "",
        "meta_description": "We generally want the projects developed to be global. In other words, we want not only the people of one country, but also the people of other countries to be able to use the project we have…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://cengizhanvarli.medium.com/qt-linguist-8d51eff22e4f",
        "text": "We generally want the projects developed to be global. In other words, we want not only the people of one country, but also the people of other countries to be able to use the project we have developed. I’m sure you’ve needed multi-language features in many projects you’ve developed in your professional life. It is possible to produce different solutions for this. Maybe we can use GNU gettext for C++, or we can create our JSON, XML based translation files. But if it uses qt, the easiest way is of course qt linguist.\n\nQt Linguist is a tool used for managing and translating text in Qt-based applications. It’s part of the Qt framework, which is a popular C++ library for building cross-platform applications. Qt Linguist helps developers and translators to localize applications by providing an interface to view, edit, and translate text strings within the user interface of Qt applications. It’s particularly useful for handling multilingual support, allowing developers to separate the text from the application’s code, making it easier to manage translations and support multiple languages.\n\nTo use QT Linguist, we must first install QT Linguist on our computer.\n\nFor ubuntu the following command can be used;\n\nsudo apt-get update\n\nsudo apt-get install qttools5-dev-tools\n\nAfter the installation process is completed, When we search in applications we can see qt linguist as follows.\n\nLet’s try to understand QT linguist with a simple application.\n\nLet’s create a Qt Widget application and make a design in the main window as follows.\n\nAs you see, the design consists of 2 buttons and 1 label.\n\nOur goal: When we press the TR button, the label should say “SELAM”. When we press the ENG button, it should say “WELCOME” on the label.\n\nYou must add the translation files to the pro file as follows;\n\nThen follow the steps below and select update Translations;\n\nTools->External->Linguist->Update Translations(lupdate)\n\nAfter this step, you will see that files with .ts extension have been created in the project path.\n\nThe .ts file is a file format used in Qt for storing translation source files. It stands for \"Translation Source.\" These files contain the original text or strings that need to be translated into different languages for localization purposes in Qt applications. In summary, .ts files serve as the source for translations in Qt applications, storing original text strings that are later translated into different languages and compiled into binary .qm files for actual use in the application.\n\nLet’s create our slots for our buttons, right click on the buttons and click on go to slot.\n\nDefine _langTranslator in mainwindow.h as follows:\n\n#include <QMainWindow>\n\n#include <QTranslator>\n\nQT_BEGIN_NAMESPACE\n\nnamespace Ui { class MainWindow; }\n\nQT_END_NAMESPACE\n\nclass MainWindow : public QMainWindow\n\n{\n\nQ_OBJECT\n\npublic:\n\nMainWindow(QWidget *parent = nullptr);\n\n~MainWindow();\n\nprivate slots:\n\nvoid on_buttonENG_clicked();\n\nvoid on_pushButton_clicked();\n\nprivate:\n\nUi::MainWindow *ui;\n\nQTranslator _langTranslator;\n\n};\n\nOf course you should write #include <QTranslator>.\n\nWe can write the following codes in slot functions;\n\nvoid MainWindow::on_buttonENG_clicked()\n\n{\n\n_langTranslator.load(\"/home/cengizhan/linguistCourse/lang_eng.qm\");\n\nQCoreApplication::installTranslator(&_langTranslator);\n\nui->label->setText(QTranslator::tr(\"MERHABA\"));\n\n}\n\nvoid MainWindow::on_buttonTR_clicked()\n\n{\n\n_langTranslator.load(\"/home/cengizhan/linguistCourse/lang_tr.qm\");\n\nQCoreApplication::installTranslator(&_langTranslator);\n\nui->label->setText(QTranslator::tr(\"MERHABA\"));\n\n}\n\nThe QTranslator::tr() function is used in Qt to translate text strings within an application. It's a method provided by the QTranslator::tr() class, which is used to manage translations.\n\nHere’s an overview of QTranslator::tr():\n\nTranslation Function: QTranslator::tr() is a function used for translating text strings from the source language (usually the default language of the application) to a target language specified by the loaded translation file.\n\nUsage: Developers use QTranslator::tr() to mark text within their code that requires translation. It takes a string as an argument, which represents the text that needs to be translated.\n\nLocalization Support: When the application is running, and a translation file (usually a .qm file generated from a .ts file) is loaded using QTranslator, calls to tr() will replace the original text with the translated text if a translation is available for the current language.\n\nQCoreApplication::installTranslator() is a function in the Qt framework that is used to install a translation file (usually a .qm file) for an application to enable runtime translation of text.\n\nWhen we add a new string that we want to translate to the code, we must repeat this step:\n\nTools->External->Linguist->Update Translations(lupdate)\n\nWell, now let’s open the Qt Linguist application we downloaded.\n\nClick File->Open and choose our .ts files\n\nEnter the Turkish and English equivalents for the “MERHABA” text as follows.\n\nThen click File->Release All in Qt Linguist application.\n\nYes, we have produced the .qm files in this step.\n\n.qm files are the result of compiling .ts(Translation Source) files. The translations provided by translators in the .ts files are compiled into a binary format for faster and more efficient access during runtime.\n\nAfter this step, let’s run our application.\n\nWhen the TR button is pressed;\n\nWhen the ENG button is pressed;\n\nYes this is it!!\n\nYou can find what is explained here in this video;"
    }
}