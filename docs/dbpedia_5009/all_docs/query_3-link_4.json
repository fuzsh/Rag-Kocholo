{
    "id": "dbpedia_5009_3",
    "rank": 4,
    "data": {
        "url": "https://developers.arcgis.com/qt/styles-and-data-visualization/add-labels/",
        "read_more_link": "",
        "language": "en",
        "title": "ArcGIS Maps SDK for Qt",
        "top_image": "https://developers.arcgis.com/qt/static/thumbnail-45d6d823fb8081dc961cbf6e338407af.png",
        "meta_img": "https://developers.arcgis.com/qt/static/thumbnail-45d6d823fb8081dc961cbf6e338407af.png",
        "images": [
            "https://developers.arcgis.com/qt/static/77019be7ebd846d3702e002cf109a853/d4713/city-labels.png",
            "https://developers.arcgis.com/qt/static/0e8e51b029b23db437fbaed8b537ce24/9128f/wind-labels.png",
            "https://developers.arcgis.com/qt/static/8529fc02d3355666190f9f1cc38640e5/b3c1d/name-pop-label.png",
            "https://developers.arcgis.com/qt/static/6803b21712e0f9d7a9a4c3ff03ed7cc5/38070/bold-name-pop-label.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Use the Qt framework with the latest version of ArcGIS Maps SDK for Qt to build cross-platform desktop and mobile apps that incorporate features such as mapping, geocoding, routing, spatial analysis.",
        "meta_lang": "en",
        "meta_favicon": "/qt/favicon-32x32.png?v=cc73a1016b830b97008ac5ee12a80774",
        "meta_site_name": "ArcGIS Maps SDK for Qt",
        "canonical_link": "https://developers.arcgis.com/qt/styles-and-data-visualization/add-labels/",
        "text": "Feature layers, graphics overlays, and map image layer sublayers in your app can be labeled using a combination of attribute values, text strings, and values calculated with an expression. You can determine how labels are positioned and prioritized, and how conflicts between overlapping labels are automatically and dynamically resolved.\n\nFor feature layers, graphics overlays, and map image sublayers, labeling is implemented using a collection of LabelDefinition objects to define things like:\n\nWhat labels look like (font, size, color, angle, and so on).\n\nAt which scales they should be visible.\n\nThe text to display (perhaps using attribute values).\n\nWhich geoelements should be labeled.\n\nHow to handle overlaps and prioritize labels.\n\nIf you want to label everything in your layer or overlay the same way, you can define a single label definition. If you want to display different labels for different attribute values, you can add as many label definitions as you need to define distinct sets of geoelements for labeling.\n\nDefine labels\n\nLabel definitions establish the label text and how labels are rendered for a specified group of geoelements using attributes, which provide the label text as well as determine which label is applied to each geoelement. The map in the following image uses three label definitions: one with a large blue label for cities with populations over 1.5 million, smaller black labels for cities between 0.5 and 1.5 million, and a small gray label for cities under 0.5 million. For the label text, each definition uses the value from the name attribute.\n\nEach label's symbol, text, placement, overlap rules, and so on is represented with a LabelDefinition and is constructed to conform to label properties defined in the Web map specification for labels. In order to provide a more accurate representation of labels created using ArcGIS Pro (for a mobile map package, for example), additional label properties are defined that are not included in the web map specification. These properties provide additional control for things like the layout, orientation, and stacking of label text and label overlap behavior. See the LabelDefinition class for details.\n\nMost properties for a label definition are optional and will use a default value if not assigned explicitly. At a minimum, you must provide an expression that defines the label text and a symbol (with at least color, font size, and type) to display labels for a layer. Refer to the label properties section for a description of some common properties available for label definitions.\n\nLabel properties\n\nThe following list describes some common aspects of label display and behavior that you can control in a label definition. Relevant classes and members are shown in parentheses.\n\nWhich geoelements to label (LabelDefinition::setWhereClause())âThe geoelements labeled with the label definition are determined by evaluating an attribute expression. This expression is defined using SQL syntax, Arcade expressions are not supported for defining a label definition's where clause. If this expression is not defined, all elements are included in the definition. When using multiple label definitions, it's important that expressions uniquely assign geoelements for each definition. Creating multiple label definitions for a single layer is useful when you want to distinguish labels for certain types of elements. When labeling a cities layer, for example, you may want to distinguish capital cities from the others by using a larger font or different color.\n\nLabel text (LabelDefinition::setExpression(), SimpleLabelExpression, ArcadeLabelExpression, WebmapLabelExpression)âA label expression can be used to determine the text to display for each geoelement in the label definition. The label text can come from a combination of available attributes, text strings, and expressions. A label showing length in meters from values in feet from an attribute named lengt h _ ft, for example, may use an Arcade expression like this: ($feature.lengt h _ ft * 0.3048) + ' meters'. A feature with a lengt h _ ft value of 343 would display a label of 104.546 meters. See the Label expressions section for more details and examples.\n\nText symbol (LabelDefinition::setTextSymbol(), TextSymbol)âThe font, size, color, angle, and so on, used to display labels in the definition. You can also provide a background color or halo for the text symbol.\n\nDisplay scale range (LabelDefinition::setMinScale(), LabelDefinition::setMaxScale())âThe scale range, defined with a minimum and maximum scale denominator, at which labels in the definition will be displayed. A value of 0 for one of the range values means that the end of the range is not restricted.\n\nPlacement (LabelDefinition::setPlacement(), LabelingPlacement)âLabels can be placed at a specified position relative to the elements they describe. There are different options for placement depending upon the geometry of the geoelements being labeled. Line features, for example, may have labels placed above the center of the line, below the center of the line, above the end point, and so on. The default is automatic. Depending upon the type of geometry, this means:\n\nAbove right for point labels\n\nAbove along for line labels\n\nAlways horizontal for polygon labels\n\nPriority (LabelDefinition::setPriority())âA label definition can be given a priority relative to other definitions in the layer. If labels from different definitions conflict in their placement, the label from the highest-priority definition will be displayed. Values indicate priority relative to other label definitions, with lower values indicating higher priority. If priority is not specified, a default prioritization is used based on geometry type: points (top priority), followed by lines, and then polygons.\n\nLabel overlap (LabelDefinition::setDeconflictionStrategy(), LabelDefinition::setLabelOverlapStrategy(), LabelDeconflictionStrategy, LabelOverlapStrategy)âControl label overlap with geoelements and other labels.\n\nDuplicate or repeating labels (LabelDefinition::setRemoveDuplicatesStrategy(), LabelDefinition::setRepeatStrategy(), LabelDefinition::setMultipartStrategy())âYou can define preferences for removing duplicate labels within a specified radius as well as for repeating labels along lines at a constant interval. You can also control how geoelements with multipart geometry should be labeled.\n\nLabel display can also be affected by applying a reference scale to the map. Reference scale is the scale at which symbols and labels appear at their intended, true size. As you zoom in and out beyond the reference scale, symbols and text will increase or decrease in size relative to the reference scale to keep a consistent size on the map. If no reference scale is set, symbols remain a constant size on the screen and do not change size as you zoom in or out. Individual layers in a map can opt in or out of honoring the map's reference scale.\n\nLabel expressions\n\nDepending upon your use case, you can define text for your labels using one of the following types of label expression classes:\n\nArcadeLabelExpressionâAn expression that uses the ArcGIS Arcade expression language to define label text.\n\nSimpleLabelExpressionâA simple label expression that uses the ArcGIS REST API labeling syntax.\n\nWebmapLabelExpressionâA web map script to be read and evaluated by a web map expression interpreter.\n\nArcade expressions\n\nArcade is a simple, lightweight scripting language that can evaluate expressions at runtime. It was designed specifically for creating custom visualizations and labeling expressions in ArcGIS. Users can write, share, and execute custom expressions in ArcGIS Pro, ArcGIS Online, ArcGIS Maps SDK for JavaScript, and ArcGIS Maps SDKs for Native Apps .\n\nYou can access feature attributes using Arcade's $feature global variable. For example, to label roads with a STREET _ N AME field, you can refer to the value in that attribute with this syntax: $feature.STREET _ N AME. Arcade also provides built-in functions for mathematical calculations, logical operations, and formatting that you can use in your expression. Consult the Arcade guide for details and usage examples.\n\nWhen defining a label, the final line of the expression must evaluate to a string or a number.\n\nThe following Arcade expression reads the attribute values for wind speed and direction. It then uses conditional logic (When function) to assign a cardinal direction based on azimuth. Another conditional function (IIf) is used to return an empty string for wind speeds of 0 and a formatted label for all other values.\n\nSimple expressions\n\nSimple expressions use ArcGIS REST API syntax. You can use functions in the expression to provide basic formatting of values, such as ROUND(), CONCAT, and FORMATDATETIME(). See JSON labeling objects for more information.\n\nThe simple expression below creates a label that combines static text, city name, and population. Note that the static text must be inside quotes.\n\nWeb map expressions\n\nA WebmapLabelExpression expression provides a legal web map script to be read and evaluated by a web map expression interpreter.\n\nA web map label expression that combines static text with an attribute value will look like this: State {Stat e _ Name}.\n\nNote that unlike a simple or Arcade expression, quotes are not needed around the literal text.\n\nText used for labels can contain some of the same formatting tags used by ArcGIS Pro. These tags are similar to HTML tags and are used to modify the appearance of the text. The following tags are supported:\n\n< F NT>âFont name, size, and scaling.\n\n< C LR>âColor (defined with RGB or CMYK values).\n\n< B OL>, < _ BOL>âBold / un-bold.\n\n< I TA>, < _ ITA>âItalic / un-italic.\n\n< U ND>, < _ UND>âUnderline / un-underline.\n\nThese tags allow you to format parts of the text differently than what has been defined for the label's text symbol. The following expression, for example, displays the name attribute with bold, underlined text. The rest of the text uses the unaltered text symbol previously defined for the label definition."
    }
}