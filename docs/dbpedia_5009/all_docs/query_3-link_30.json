{
    "id": "dbpedia_5009_3",
    "rank": 30,
    "data": {
        "url": "https://radekp.github.io/qtmoko/api/qmake-variable-reference.html",
        "read_more_link": "",
        "language": "en",
        "title": "Qt 4.4: qmake Variable Reference",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://radekp.github.io/qtmoko/api/images/qt-logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Home · All Namespaces · All Classes · Main Classes · Grouped Classes · Modules · Functions\n\n[Previous: qmake Reference] [Contents] [Next: qmake Function Reference]\n\nqmake Variable Reference\n\nqmake's fundamental behavior is influenced by variable declarations that define the build process of each project. Some of these declare resources, such as headers and source files, that are common to each platform; others are used to customize the behavior of compilers and linkers on specific platforms.\n\nPlatform-specific variables follow the naming pattern of the variables which they extend or modify, but include the name of the relevant platform in their name. For example, QMAKE_LIBS can be used to specify a list of libraries that a project needs to link against, and QMAKE_LIBS_X11 can be used to extend or override this list.\n\nCONFIG\n\nDEFINES\n\nDEF_FILE\n\nDEPENDPATH\n\nDEPLOYMENT\n\nDEPLOYMENT_PLUGIN\n\nDESTDIR\n\nDESTDIR_TARGET\n\nDLLDESTDIR\n\nDISTFILES\n\nDSP_TEMPLATE\n\nFORMS\n\nFORMS3\n\nHEADERS\n\nINCLUDEPATH\n\nINSTALLS\n\nLEXIMPLS\n\nLEXOBJECTS\n\nLEXSOURCES\n\nLIBS\n\nLITERAL_HASH\n\nMAKEFILE\n\nMAKEFILE_GENERATOR\n\nMOC_DIR\n\nOBJECTS\n\nOBJECTS_DIR\n\nOBJMOC\n\nPOST_TARGETDEPS\n\nPRE_TARGETDEPS\n\nPRECOMPILED_HEADER\n\nQMAKE\n\nQMAKESPEC\n\nQMAKE_APP_FLAG\n\nQMAKE_APP_OR_DLL\n\nQMAKE_AR_CMD\n\nQMAKE_BUNDLE_DATA\n\nQMAKE_BUNDLE_EXTENSION\n\nQMAKE_CC\n\nQMAKE_CFLAGS_DEBUG\n\nQMAKE_CFLAGS_MT\n\nQMAKE_CFLAGS_MT_DBG\n\nQMAKE_CFLAGS_MT_DLL\n\nQMAKE_CFLAGS_MT_DLLDBG\n\nQMAKE_CFLAGS_RELEASE\n\nQMAKE_CFLAGS_SHLIB\n\nQMAKE_CFLAGS_THREAD\n\nQMAKE_CFLAGS_WARN_OFF\n\nQMAKE_CFLAGS_WARN_ON\n\nQMAKE_CLEAN\n\nQMAKE_CXX\n\nQMAKE_CXXFLAGS\n\nQMAKE_CXXFLAGS_DEBUG\n\nQMAKE_CXXFLAGS_MT\n\nQMAKE_CXXFLAGS_MT_DBG\n\nQMAKE_CXXFLAGS_MT_DLL\n\nQMAKE_CXXFLAGS_MT_DLLDBG\n\nQMAKE_CXXFLAGS_RELEASE\n\nQMAKE_CXXFLAGS_SHLIB\n\nQMAKE_CXXFLAGS_THREAD\n\nQMAKE_CXXFLAGS_WARN_OFF\n\nQMAKE_CXXFLAGS_WARN_ON\n\nQMAKE_DISTCLEAN\n\nQMAKE_EXTENSION_SHLIB\n\nQMAKE_EXT_MOC\n\nQMAKE_EXT_UI\n\nQMAKE_EXT_PRL\n\nQMAKE_EXT_LEX\n\nQMAKE_EXT_YACC\n\nQMAKE_EXT_OBJ\n\nQMAKE_EXT_CPP\n\nQMAKE_EXT_H\n\nQMAKE_FAILED_REQUIREMENTS\n\nQMAKE_FILETAGS\n\nQMAKE_FRAMEWORK_BUNDLE_NAME\n\nQMAKE_FRAMEWORK_VERSION\n\nQMAKE_INCDIR\n\nQMAKE_INCDIR_OPENGL\n\nQMAKE_INCDIR_QT\n\nQMAKE_INCDIR_THREAD\n\nQMAKE_INCDIR_X11\n\nQMAKE_LFLAGS\n\nQMAKE_LFLAGS_CONSOLE\n\nQMAKE_LFLAGS_CONSOLE_DLL\n\nQMAKE_LFLAGS_DEBUG\n\nQMAKE_LFLAGS_PLUGIN\n\nQMAKE_LFLAGS_QT_DLL\n\nQMAKE_LFLAGS_RELEASE\n\nQMAKE_LFLAGS_SHAPP\n\nQMAKE_LFLAGS_SHLIB\n\nQMAKE_LFLAGS_SONAME\n\nQMAKE_LFLAGS_THREAD\n\nQMAKE_LFLAGS_WINDOWS\n\nQMAKE_LFLAGS_WINDOWS_DLL\n\nQMAKE_LIBDIR\n\nQMAKE_LIBDIR_FLAGS\n\nQMAKE_LIBDIR_OPENGL\n\nQMAKE_LIBDIR_QT\n\nQMAKE_LIBDIR_X11\n\nQMAKE_LIBS\n\nQMAKE_LIBS_CONSOLE\n\nQMAKE_LIBS_OPENGL\n\nQMAKE_LIBS_OPENGL_QT\n\nQMAKE_LIBS_QT\n\nQMAKE_LIBS_QT_DLL\n\nQMAKE_LIBS_QT_OPENGL\n\nQMAKE_LIBS_QT_THREAD\n\nQMAKE_LIBS_RT\n\nQMAKE_LIBS_RTMT\n\nQMAKE_LIBS_THREAD\n\nQMAKE_LIBS_WINDOWS\n\nQMAKE_LIBS_X11\n\nQMAKE_LIBS_X11SM\n\nQMAKE_LIB_FLAG\n\nQMAKE_LINK_SHLIB_CMD\n\nQMAKE_POST_LINK\n\nQMAKE_PRE_LINK\n\nQMAKE_LN_SHLIB\n\nQMAKE_MAC_SDK\n\nQMAKE_MACOSX_DEPLOYMENT_TARGET\n\nQMAKE_MAKEFILE\n\nQMAKE_MOC_SRC\n\nQMAKE_QMAKE\n\nQMAKE_QT_DLL\n\nQMAKE_RESOURCE_FLAGS\n\nQMAKE_RUN_CC\n\nQMAKE_RUN_CC_IMP\n\nQMAKE_RUN_CXX\n\nQMAKE_RUN_CXX_IMP\n\nQMAKE_TARGET\n\nQMAKE_UIC\n\nQT\n\nQTPLUGIN\n\nQT_VERSION\n\nQT_MAJOR_VERSION\n\nQT_MINOR_VERSION\n\nQT_PATCH_VERSION\n\nRC_FILE\n\nRCC_DIR\n\nREQUIRES\n\nRES_FILE\n\nSIGNATURE_FILE\n\nSOURCES\n\nSRCMOC\n\nSUBDIRS\n\nTARGET\n\nTARGET_EXT\n\nTARGET_x\n\nTARGET_x.y.z\n\nTEMPLATE\n\nTRANSLATIONS\n\nUICIMPLS\n\nUICOBJECTS\n\nUI_DIR\n\nUI_HEADERS_DIR\n\nUI_SOURCES_DIR\n\nVERSION\n\nVER_MAJ\n\nVER_MIN\n\nVER_PAT\n\nVPATH\n\nYACCIMPLS\n\nYACCOBJECTS\n\nYACCSOURCES\n\nCONFIG\n\nThe CONFIG variable specifies project configuration and compiler options. The values will be recognized internally by qmake and have special meaning. They are as follows.\n\nThese CONFIG values control compilation flags:\n\nOptionDescription releaseThe project is to be built in release mode. This is ignored if debug is also specified. debugThe project is to be built in debug mode. debug_and_releaseThe project is built in both debug and release modes. This can have some unexpected side effects (see below for more information). build_allIf debug_and_release is specified, the project is built in both debug and release modes by default. orderedWhen using the subdirs template, this option specifies that the directories listed should be processed in the order in which they are given. warn_onThe compiler should output as many warnings as possible. This is ignored if warn_off is specified. warn_offThe compiler should output as few warnings as possible.\n\nSince the debug option overrides the release option when both are defined in the CONFIG variable, it is necessary to use the debug_and_release option if you want to allow both debug and release versions of a project to be built. In such a case, the Makefile that qmake generates includes a rule that builds both versions, and this can be invoked in the following way:\n\nmake all\n\nOn Windows (or if Qt is configured with -debug_and_release, adding the build_all option to the CONFIG variable makes this rule the default when building the project, and installation targets will be created for both debug and release builds.\n\nAdditionally, adding debug_and_release to the CONFIG variable will cause both debug and release to be defined in the contents of CONFIG. When the project file is processed, the scopes that test for each value will be processed for both debug and release modes. The build_pass variable will be set for each of these mode, and you can test for this to perform build-specific tasks. For example:\n\nbuild_pass:CONFIG(debug, debug|release) { unix: TARGET = $$join(TARGET,,,_debug) else: TARGET = $$join(TARGET,,,d) }\n\nAs a result, it may be useful to define mode-specific variables, such as QMAKE_LFLAGS_RELEASE, instead of general variables, such as QMAKE_LFLAGS, where possible.\n\nThe following options define the application/library type:\n\nOptionDescription qtThe target is a Qt application/library and requires the Qt library and header files. The proper include and library paths for the Qt library will automatically be added to the project. This is defined by default, and can be fine-tuned with the \\l{#qt}{QT} variable. openglThe target requires the OpenGL (or Mesa) headers/libraries. The proper include and library paths for these libraries will automatically be added to the project. threadThe target is a multi-threaded application or library. The proper defines and compiler flags will automatically be added to the project. x11The target is a X11 application or library. The proper include paths and libraries will automatically be added to the project. windowsThe target is a Win32 window application (app only). The proper include paths,compiler flags and libraries will automatically be added to the project. consoleThe target is a Win32 console application (app only). The proper include paths, compiler flags and libraries will automatically be added to the project. sharedThe target is a shared object/DLL. The proper include paths, compiler flags and libraries will automatically be added to the project. dll staticThe target is a static library (lib only). The proper compiler flags will automatically be added to the project. staticlib pluginThe target is a plugin (lib only). This enables dll as well. designerThe target is a plugin for Qt Designer. uic3Configures qmake to run uic3 on the content of FORMS3 if defined; otherwise the contents of FORMS will be processed instead. no_lflags_mergeEnsures that the list of libraries stored in the LIBS variable is not reduced to a list of unique values before it is used. resourcesConfigures qmake to run rcc on the content of RESOURCES if defined.\n\nThese options are used to set the compiler flags:\n\nOptionDescription exceptionsException support is enabled. rttiRTTI support is enabled. stlSTL support is enabled.\n\nThese options define specific things on Windows only:\n\nOptionDescription flatWhen using the vcapp template this will put all the source files into the source group and the header files into the header group regardless of what directory they reside in. Turning this option off will group the files within the source/header group depending on the directory they reside. This is turned on by default. embed_manifest_dllEmbeds a manifest file in the DLL created as part of a library project. embed_manifest_exeEmbeds a manifest file in the DLL created as part of an application project.\n\nSee qmake Platform Notes for more information on the options for embedding manifest files.\n\nThese options only have an effect on Mac OS X:\n\nOptionDescription ppcBuilds a PowerPC binary. x86Builds an i386 compatible binary. app_bundlePuts the executable into a bundle (this is the default). lib_bundlePuts the library into a library bundle.\n\nThe build process for bundles is also influenced by the contents of the QMAKE_BUNDLE_DATA variable.\n\nThe CONFIG variable will also be checked when resolving scopes. You may assign anything to this variable.\n\nFor example:\n\nCONFIG += qt console newstuff ... newstuff { SOURCES += new.cpp HEADERS += new.h }\n\nDEFINES\n\nqmake adds the values of this variable as compiler C preprocessor macros (-D option).\n\nFor example:\n\nDEFINES += USE_MY_STUFF QT_DLL\n\nDEF_FILE\n\nThis is only used on Windows when using the app template.\n\nSpecifies a .def file to be included in the project.\n\nDEPENDPATH\n\nThis variable contains the list of all directories to look in to resolve dependencies. This will be used when crawling through included files.\n\nDEPLOYMENT\n\nThis is only used on Windows CE.\n\nSpecifies which additional files will be deployed.\n\nFor example:\n\nmyFiles.sources = path\\*.png DEPLOYMENT += myFiles\n\nThis will upload all PNG images in path to the same directory your build target will be deployed to.\n\nThe default deployment target path for Windows CE is %CSIDL_PROGRAM_FILES%\\target, which usually gets expanded to \\Program Files\\target.\n\nIt is also possible to specify multiple sources to be deployed on target paths. In addition, different variables can be used for deployment to different directories.\n\nFor example:\n\nmyFiles.sources = path\\file1.ext1 path2\\file2.ext1 path3\\* myFiles.path = \\some\\path\\on\\device someother.sources = C:\\additional\\files\\* someother.path = \\myFiles\\path2 DEPLOYMENT += myFiles someother\n\nNote: All linked Qt libraries will be deployed to the path specified by myFiles.path.\n\nDEPLOYMENT_PLUGIN\n\nThis is only used on Windows CE.\n\nThis variable specifies the Qt plugins that will be deployed. All plugins available in Qt can be explicitly deployed to the device. See Static Plugins for a complete list.\n\nNote: No plugins will be deployed automatically. If the application depends on plugins, these plugins have to be specified manually.\n\nDESTDIR\n\nSpecifies where to put the target file.\n\nFor example:\n\nDESTDIR = ../../lib\n\nDESTDIR_TARGET\n\nThis variable is set internally by qmake, which is basically the DESTDIR variable with the TARGET variable appened at the end. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nDLLDESTDIR\n\nSpecifies where to copy the target dll.\n\nDISTFILES\n\nThis variable contains a list of files to be included in the dist target. This feature is supported by UnixMake specs only.\n\nFor example:\n\nDISTFILES += ../program.txt\n\nDSP_TEMPLATE\n\nThis variable is set internally by qmake, which specifies where the dsp template file for basing generated dsp files is stored. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nFORMS\n\nThis variable specifies the .ui files (see Qt Designer) to be processed through uic before compiling. All dependencies, headers and source files required to build these .ui files will automatically be added to the project.\n\nFor example:\n\nFORMS = mydialog.ui \\ mywidget.ui \\ myconfig.ui\n\nIf FORMS3 is defined in your project, then this variable must contain forms for uic, and not uic3. If CONFIG contains uic3, and FORMS3 is not defined, the this variable must contain only uic3 type forms.\n\nFORMS3\n\nThis variable specifies the old style .ui files to be processed through uic3 before compiling, when CONFIG contains uic3. All dependencies, headers and source files required to build these .ui files will automatically be added to the project.\n\nFor example:\n\nFORMS3 = my_uic3_dialog.ui \\ my_uic3_widget.ui \\ my_uic3_config.ui\n\nHEADERS\n\nDefines the header files for the project.\n\nqmake will generate dependency information (unless -nodepend is specified on the command line) for the specified headers. qmake will also automatically detect if moc is required by the classes in these headers, and add the appropriate dependencies and files to the project for generating and linking the moc files.\n\nFor example:\n\nHEADERS = myclass.h \\ login.h \\ mainwindow.h\n\nSee also SOURCES.\n\nINCLUDEPATH\n\nThis variable specifies the #include directories which should be searched when compiling the project. Use ';' or a space as the directory separator.\n\nFor example:\n\nINCLUDEPATH = c:/msdev/include d:/stl/include\n\nINSTALLS\n\nThis variable contains a list of resources that will be installed when make install or a similar installation procedure is executed. Each item in the list is typically defined with attributes that provide information about where it will be installed.\n\nFor example, the following target.path definition describes where the build target will be installed, and the INSTALLS assignment adds the build target to the list of existing resources to be installed:\n\ntarget.path += $$[QT_INSTALL_PLUGINS]/imageformats INSTALLS += target\n\nLEXIMPLS\n\nThis variable contains a list of lex implementation files. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nLEXOBJECTS\n\nThis variable contains the names of intermediate lex object files.The value of this variable is typically handled by qmake and rarely needs to be modified.\n\nLEXSOURCES\n\nThis variable contains a list of lex source files. All dependencies, headers and source files will automatically be added to the project for building these lex files.\n\nFor example:\n\nLEXSOURCES = lexer.l\n\nLIBS\n\nThis variable contains a list of libraries to be linked into the project. You can use the Unix -l (library) and -L (library path) flags and qmake will do the correct thing with these libraries on Windows (namely this means passing the full path of the library to the linker). The only limitation to this is the library must exist, for qmake to find which directory a -l lib lives in.\n\nFor example:\n\nunix:LIBS += -L/usr/local/lib -lmath win32:LIBS += c:/mylibs/math.lib\n\nNote: On Windows, specifying libraries with the -l option, as in the above example, will cause the library with the highest version number to be used; for example, libmath2.lib could potentially be used instead of libmathlib. To avoid this ambiguity, we recommend that you explicitly specify the library to be used by including the .lib file name suffix.\n\nBy default, the list of libraries stored in LIBS is reduced to a list of unique names before it is used. To change this behavior, add the no_lflags_merge option to the CONFIG variable:\n\nCONFIG += no_lflags_merge\n\nLITERAL_HASH\n\nThis variable is used whenever a literal hash character (#) is needed in a variable declaration, perhaps as part of a file name or in a string passed to some external application.\n\nFor example:\n\n# To include a literal hash character, use the $$LITERAL_HASH variable: urlPieces = http://doc.trolltech.com/4.0/qtextdocument.html pageCount message($$join(urlPieces, $$LITERAL_HASH))\n\nBy using LITERAL_HASH in this way, the # character can be used to construct a URL for the message() function to print to the console.\n\nMAKEFILE\n\nThis variable specifies the name of the Makefile which qmake should use when outputting the dependency information for building a project. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nMAKEFILE_GENERATOR\n\nThis variable contains the name of the Makefile generator to use when generating a Makefile. The value of this variable is typically handled internally by qmake and rarely needs to be modified.\n\nMOC_DIR\n\nThis variable specifies the directory where all intermediate moc files should be placed.\n\nFor example:\n\nunix:MOC_DIR = ../myproject/tmp win32:MOC_DIR = c:/myproject/tmp\n\nOBJECTS\n\nThis variable is generated from the SOURCES variable. The extension of each source file will have been replaced by .o (Unix) or .obj (Win32). The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nOBJECTS_DIR\n\nThis variable specifies the directory where all intermediate objects should be placed.\n\nFor example:\n\nunix:OBJECTS_DIR = ../myproject/tmp win32:OBJECTS_DIR = c:/myproject/tmp\n\nOBJMOC\n\nThis variable is set by qmake if files can be found that contain the Q_OBJECT macro. OBJMOC contains the name of all intermediate moc object files. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nPOST_TARGETDEPS\n\nAll libraries that the target depends on can be listed in this variable. Some backends do not support this, these include MSVC Dsp, and ProjectBuilder .pbproj files. Generally this is supported internally by these build tools, this is useful for explicitly listing dependant static libraries.\n\nThis list will go after all builtin (and $$PRE_TARGETDEPS) dependencies.\n\nPRE_TARGETDEPS\n\nAll libraries that the target depends on can be listed in this variable. Some backends do not support this, these include MSVC Dsp, and ProjectBuilder .pbproj files. Generally this is supported internally by these build tools, this is useful for explicitly listing dependant static libraries.\n\nThis list will go before all builtin dependencies.\n\nPRECOMPILED_HEADER\n\nThis variable indicates the header file for creating a precompiled header file, to increase the compilation speed of a project. Precompiled headers are currently only supported on some platforms (Windows - all MSVC project types, Mac OS X - Xcode, Makefile, Unix - gcc 3.3 and up).\n\nOn other platforms, this variable has different meaning, as noted below.\n\nThis variable contains a list of header files that require some sort of pre-compilation step (such as with moc). The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE\n\nThis variable contains the name of the qmake program itself and is placed in generated Makefiles. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKESPEC\n\nThis variable contains the name of the qmake configuration to use when generating Makefiles. The value of this variable is typically handled by qmake and rarely needs to be modified. Use the QMAKESPEC environment variable instead.\n\nQMAKE_APP_FLAG\n\nThis variable is empty unless the app TEMPLATE is specified. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified. Use the following instead:\n\napp { # Conditional code for 'app' template here }\n\nQMAKE_APP_OR_DLL\n\nThis variable is empty unless the app or dll TEMPLATE is specified. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_AR_CMD\n\nThis is used on Unix platforms only.\n\nThis variable contains the command for invoking the program which creates, modifies and extracts archives. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_BUNDLE_DATA\n\nThis variable is used to hold the data that will be installed with a library bundle, and is often used to specify a collection of header files.\n\nFor example, the following lines add path/to/header_one.h and path/to/header_two.h to a group containing information about the headers supplied with the framework:\n\nFRAMEWORK_HEADERS.version = Versions FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h FRAMEWORK_HEADERS.path = Headers QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS\n\nThe last line adds the information about the headers to the collection of resources that will be installed with the library bundle.\n\nLibrary bundles are created when the lib_bundle option is added to the CONFIG variable.\n\nSee qmake Platform Notes for more information about creating library bundles.\n\nThis is used on Mac OS X only.\n\nQMAKE_BUNDLE_EXTENSION\n\nThis variable defines the extension to be used for library bundles. This allows frameworks to be created with custom extensions instead of the standard .framework directory name extension.\n\nFor example, the following definition will result in a framework with the .myframework extension:\n\nQMAKE_BUNDLE_EXTENSION = .myframework\n\nThis is used on Mac OS X only.\n\nQMAKE_CC\n\nThis variable specifies the C compiler that will be used when building projects containing C source code. Only the file name of the compiler executable needs to be specified as long as it is on a path contained in the PATH variable when the Makefile is processed.\n\nQMAKE_CFLAGS_DEBUG\n\nThis variable contains the flags for the C compiler in debug mode.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_MT\n\nThis variable contains the compiler flags for creating a multi-threaded application or when the version of Qt that you link against is a multi-threaded statically linked library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_MT_DBG\n\nThis variable contains the compiler flags for creating a debuggable multi-threaded application or when the version of Qt that you link against is a debuggable multi-threaded statically linked library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_MT_DLL\n\nThis is used on Windows only.\n\nThis variable contains the compiler flags for creating a multi-threaded dll or when the version of Qt that you link against is a multi-threaded dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_MT_DLLDBG\n\nThis is used on Windows only.\n\nThis variable contains the compiler flags for creating a debuggable multi-threaded dll or when the version of Qt that you link against is a debuggable multi-threaded statically linked library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_RELEASE\n\nThis variable contains the compiler flags for creating a non-debuggable application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_SHLIB\n\nThis is used on Unix platforms only.\n\nThis variable contains the compiler flags for creating a shared library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_THREAD\n\nThis variable contains the compiler flags for creating a multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_WARN_OFF\n\nThis variable is not empty if the warn_off TEMPLATE option is specified. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CFLAGS_WARN_ON\n\nThis variable is not empty if the warn_on TEMPLATE option is specified. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CLEAN\n\nThis variable contains any files which are not generated files (such as moc and uic generated files) and object files that should be removed when using \"make clean\".\n\nQMAKE_CXX\n\nThis variable specifies the C++ compiler that will be used when building projects containing C++ source code. Only the file name of the compiler executable needs to be specified as long as it is on a path contained in the PATH variable when the Makefile is processed.\n\nQMAKE_CXXFLAGS\n\nThis variable contains the C++ compiler flags that are used when building a project. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified. The flags specific to debug and release modes can be adjusted by modifying the QMAKE_CXXFLAGS_DEBUG and QMAKE_CXXFLAGS_RELEASE variables, respectively.\n\nQMAKE_CXXFLAGS_DEBUG\n\nThis variable contains the C++ compiler flags for creating a debuggable application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_MT\n\nThis variable contains the C++ compiler flags for creating a multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_MT_DBG\n\nThis variable contains the C++ compiler flags for creating a debuggable multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_MT_DLL\n\nThis is used on Windows only.\n\nThis variable contains the C++ compiler flags for creating a multi-threaded dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_MT_DLLDBG\n\nThis is used on Windows only.\n\nThis variable contains the C++ compiler flags for creating a multi-threaded debuggable dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_RELEASE\n\nThis variable contains the C++ compiler flags for creating an application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_SHLIB\n\nThis variable contains the C++ compiler flags for creating a shared library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_THREAD\n\nThis variable contains the C++ compiler flags for creating a multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_WARN_OFF\n\nThis variable contains the C++ compiler flags for suppressing compiler warnings. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_CXXFLAGS_WARN_ON\n\nThis variable contains C++ compiler flags for generating compiler warnings. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_DISTCLEAN\n\nThis variable removes extra files upon the invocation of make distclean.\n\nQMAKE_EXTENSION_SHLIB\n\nThis variable contains the extention for shared libraries. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nNote that platform-specific variables that change the extension will override the contents of this variable.\n\nQMAKE_EXT_MOC\n\nThis variable changes the extention used on included moc files.\n\nSee also File Extensions.\n\nQMAKE_EXT_UI\n\nThis variable changes the extention used on /e Designer UI files.\n\nSee also File Extensions.\n\nQMAKE_EXT_PRL\n\nThis variable changes the extention used on created PRL files.\n\nSee also File Extensions, Library Dependencies.\n\nQMAKE_EXT_LEX\n\nThis variable changes the extention used on files given to lex.\n\nSee also File Extensions, LEXSOURCES.\n\nQMAKE_EXT_YACC\n\nThis variable changes the extention used on files given to yacc.\n\nSee also File Extensions, YACCSOURCES.\n\nQMAKE_EXT_OBJ\n\nThis variable changes the extention used on generated object files.\n\nSee also File Extensions.\n\nQMAKE_EXT_CPP\n\nThis variable changes the interpretation of all suffixes in this list of values as files of type C++ source code.\n\nSee also File Extensions.\n\nQMAKE_EXT_H\n\nThis variable changes the interpretation of all suffixes in this list of values as files of type C header files.\n\nSee also File Extensions.\n\nQMAKE_FAILED_REQUIREMENTS\n\nThis variable contains the list of requirements that were failed to be met when qmake was used. For example, the sql module is needed and wasn't compiled into Qt. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_FILETAGS\n\nThis variable contains the file tags needed to be entered into the Makefile, such as SOURCES and HEADERS. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_FRAMEWORK_BUNDLE_NAME\n\nIn a framework project, this variable contains the name to be used for the framework that is built.\n\nBy default, this variable contains the same value as the TARGET variable.\n\nSee qmake Platform Notes for more information about creating frameworks and library bundles.\n\nThis is used on Mac OS X only.\n\nQMAKE_FRAMEWORK_VERSION\n\nFor projects where the build target is a Mac OS X framework, this variable is used to specify the version number that will be applied to the framework that is built.\n\nBy default, this variable contains the same value as the VERSION variable.\n\nSee qmake Platform Notes for more information about creating frameworks.\n\nThis is used on Mac OS X only.\n\nQMAKE_INCDIR\n\nThis variable contains the location of all known header files to be added to INCLUDEPATH when building an application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_INCDIR_OPENGL\n\nThis variable contains the location of OpenGL header files to be added to INCLUDEPATH when building an application with OpenGL support. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_INCDIR_QT\n\nThis variable contains the location of all known header file paths to be added to INCLUDEPATH when building a Qt application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_INCDIR_THREAD\n\nThis variable contains the location of all known header file paths to be added to INCLUDEPATH when building a multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_INCDIR_X11\n\nThis is used on Unix platforms only.\n\nThis variable contains the location of X11 header file paths to be added to INCLUDEPATH when building a X11 application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS\n\nThis variable contains a general set of flags that are passed to the linker. If you need to change the flags used for a particular platform or type of project, use one of the specialized variables for that purpose instead of this variable.\n\nQMAKE_LFLAGS_CONSOLE\n\nThis is used on Windows only.\n\nThis variable contains link flags when building console programs. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_CONSOLE_DLL\n\nThis is used on Windows only.\n\nThis variable contains link flags when building console dlls. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_DEBUG\n\nThis variable contains link flags when building debuggable applications. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_PLUGIN\n\nThis variable contains link flags when building plugins. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_QT_DLL\n\nThis variable contains link flags when building programs that use the Qt library built as a dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_RELEASE\n\nThis variable contains link flags when building applications for release. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_SHAPP\n\nThis variable contains link flags when building applications which are using the app template. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_SHLIB\n\nThis variable contains link flags when building shared libraries The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_SONAME\n\nThis variable specifies the link flags to set the name of shared objects, such as .so or .dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_THREAD\n\nThis variable contains link flags when building multi-threaded projects. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_WINDOWS\n\nThis is used on Windows only.\n\nThis variable contains link flags when building Windows GUI projects (i.e. non-console applications). The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LFLAGS_WINDOWS_DLL\n\nThis is used on Windows only.\n\nThis variable contains link flags when building Windows DLL projects. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBDIR\n\nThis variable contains the location of all known library directories.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBDIR_FLAGS\n\nThis is used on Unix platforms only.\n\nThis variable contains the location of all library directory with -L prefixed. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBDIR_OPENGL\n\nThis variable contains the location of the OpenGL library directory.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBDIR_QT\n\nThis variable contains the location of the Qt library directory.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBDIR_X11\n\nThis is used on Unix platforms only.\n\nThis variable contains the location of the X11 library directory.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS\n\nThis variable contains all project libraries. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_CONSOLE\n\nThis Windows-specific variable is no longer used.\n\nPrior to Qt 4.2, this variable was used to list the libraries that should be linked against when building a console application project on Windows. QMAKE_LIBS_WINDOW should now be used instead.\n\nQMAKE_LIBS_OPENGL\n\nThis variable contains all OpenGL libraries. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_OPENGL_QT\n\nThis variable contains all OpenGL Qt libraries.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_QT\n\nThis variable contains all Qt libraries.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_QT_DLL\n\nThis is used on Windows only.\n\nThis variable contains all Qt libraries when Qt is built as a dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_QT_OPENGL\n\nThis variable contains all the libraries needed to link against if OpenGL support is turned on. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_QT_THREAD\n\nThis variable contains all the libraries needed to link against if thread support is turned on. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_RT\n\nThis is used with Borland compilers only.\n\nThis variable contains the runtime library needed to link against when building an application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_RTMT\n\nThis is used with Borland compilers only.\n\nThis variable contains the runtime library needed to link against when building a multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_THREAD\n\nThis is used on Unix platforms only.\n\nThis variable contains all libraries that need to be linked against when building a multi-threaded application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_WINDOWS\n\nThis is used on Windows only.\n\nThis variable contains all windows libraries.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_X11\n\nThis is used on Unix platforms only.\n\nThis variable contains all X11 libraries.The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIBS_X11SM\n\nThis is used on Unix platforms only.\n\nThis variable contains all X11 session management libraries. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LIB_FLAG\n\nThis variable is not empty if the lib template is specified. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_LINK_SHLIB_CMD\n\nThis variable contains the command to execute when creating a shared library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_POST_LINK\n\nThis variable contains the command to execute after linking the TARGET together. This variable is normally empty and therefore nothing is executed, additionally some backends will not support this - mostly only Makefile backends.\n\nQMAKE_PRE_LINK\n\nThis variable contains the command to execute before linking the TARGET together. This variable is normally empty and therefore nothing is executed, additionally some backends will not support this - mostly only Makefile backends.\n\nQMAKE_LN_SHLIB\n\nThis variable contains the command to execute when creating a link to a shared library. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_MAC_SDK\n\nThis variable is used on Mac OS X when building universal binaries. This process is described in more detail in the Deploying an Application on Mac OS X document.\n\nQMAKE_MACOSX_DEPLOYMENT_TARGET\n\nThis variable only has an effect when building on Mac OS X. On that platform, the variable will be forwarded to the MACOSX_DEPLOYMENT_TARGET environment variable, which is interpreted by the compiler or linker. For more information, see the Deploying an Application on Mac OS X document.\n\nQMAKE_MAKEFILE\n\nThis variable contains the name of the Makefile to create. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_MOC_SRC\n\nThis variable contains the names of all moc source files to generate and include in the project. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_QMAKE\n\nThis variable contains the location of qmake if it is not in the path. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_QT_DLL\n\nThis variable is not empty if Qt was built as a dll. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_RESOURCE_FLAGS\n\nThis variable is used to customize the list of options passed to the Resource Compiler in each of the build rules where it is used. For example, the following line ensures that the -threshold and -compress options are used with particular values each time that rcc is invoked:\n\nQMAKE_RESOURCE_FLAGS += -threshold 0 -compress 9\n\nQMAKE_RUN_CC\n\nThis variable specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_RUN_CC_IMP\n\nThis variable specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_RUN_CXX\n\nThis variable specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_RUN_CXX_IMP\n\nThis variable specifies the individual rule needed to build an object. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_TARGET\n\nThis variable contains the name of the project target. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nQMAKE_UIC\n\nThis variable contains the location of uic if it is not in the path. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nIt can be used to specify arguments to uic as well, such as additional plugin paths. For example:\n\nQMAKE_UIC = uic -L /path/to/plugin\n\nQT\n\nThe values stored in the QT variable control which of the Qt modules are used by your project.\n\nThe table below shows the options that can be used with the QT variable and the features that are associated with each of them:\n\nOptionFeatures core (included by default)QtCore module gui (included by default)QtGui module networkQtNetwork module openglQtOpenGL module phononPhonon Multimedia Framework sqlQtSql module svgQtSvg module xmlQtXml module webkitWebKit integration qt3supportQt3Support module\n\nBy default, QT contains both core and gui, ensuring that standard GUI applications can be built without further configuration.\n\nIf you want to build a project without the QtGui module, you need to exclude the gui value with the \"-=\" operator; the following line will result in a minimal Qt project being built:\n\nQT -= gui # Only the core module is used.\n\nNote that adding the opengl option to the QT variable automatically causes the equivalent option to be added to the CONFIG variable. Therefore, for Qt applications, it is not necessary to add the opengl option to both CONFIG and QT.\n\nQTPLUGIN\n\nThis variable contains a list of names of static plugins that are to be compiled with an application so that they are available as built-in resources.\n\nQT_VERSION\n\nThis variable contains the current version of Qt.\n\nQT_MAJOR_VERSION\n\nThis variable contains the current major version of Qt.\n\nQT_MINOR_VERSION\n\nThis variable contains the current minor version of Qt.\n\nQT_PATCH_VERSION\n\nThis variable contains the current patch version of Qt.\n\nRC_FILE\n\nThis variable contains the name of the resource file for the application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nRCC_DIR\n\nThis variable specifies the directory where all intermediate resource files should be placed.\n\nFor example:\n\nunix:RCC_DIR = ../myproject/resources win32:RCC_DIR = c:/myproject/resources\n\nREQUIRES\n\nThis is a special variable processed by qmake. If the contents of this variable do not appear in CONFIG by the time this variable is assigned, then a minimal Makefile will be generated that states what dependencies (the values assigned to REQUIRES) are missing.\n\nThis is mainly used in Qt's build system for building the examples.\n\nRES_FILE\n\nThis variable contains the name of the resource file for the application. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nSIGNATURE_FILE\n\nThis is only used on Windows CE.\n\nSpecifies which signature file should be used to sign the project target.\n\nNote: This variable will overwrite the setting you have specified in configure, with the -signature option.\n\nSOURCES\n\nThis variable contains the name of all source files in the project.\n\nFor example:\n\nSOURCES = myclass.cpp \\ login.cpp \\ mainwindow.cpp\n\nSee also HEADERS\n\nSRCMOC\n\nThis variable is set by qmake if files can be found that contain the Q_OBJECT macro. SRCMOC contains the name of all the generated moc files. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nSUBDIRS\n\nThis variable, when used with the subdirs template contains the names of all subdirectories that contain parts of the project that need be built. Each subdirectory must contain its own project file.\n\nFor example:\n\nSUBDIRS = kernel \\ tools\n\nIt is essential that the project file in each subdirectory has the same name as the subdirectory itself, so that qmake can find it. For example, if the subdirectory is called myapp then the project file in that directory should be called myapp.pro.\n\nIf you need to ensure that the subdirectories are built in the order in which they are specified, update the CONFIG variable to include the ordered option:\n\nCONFIG += ordered\n\nTARGET\n\nThis specifies the name of the target file.\n\nFor example:\n\nTEMPLATE = app TARGET = myapp SOURCES = main.cpp\n\nThe project file above would produce an executable named myapp on unix and 'myapp.exe' on windows.\n\nTARGET_EXT\n\nThis variable specifies the target's extension. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nTARGET_x\n\nThis variable specifies the target's extension with a major version number. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nTARGET_x.y.z\n\nThis variable specifies the target's extension with version number. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nTEMPLATE\n\nThis variable contains the name of the template to use when generating the project. The allowed values are:\n\nOptionDescription appCreates a Makefile for building applications (the default). libCreates a Makefile for building libraries. subdirsCreates a Makefile for building targets in subdirectories. The subdirectories are specified using the SUBDIRS variable. vcappWindows only Creates an application project for Visual Studio. (See qmake Platform Notes for more information.) vclibWindows only Creates a library project for Visual Studio. (See qmake Platform Notes for more information.)\n\nFor example:\n\nTEMPLATE = lib SOURCES = main.cpp TARGET = mylib\n\nThe template can be overridden by specifying a new template type with the -t command line option. This overrides the template type after the .pro file has been processed. With .pro files that use the template type to determine how the project is built, it is necessary to declare TEMPLATE on the command line rather than use the -t option.\n\nTRANSLATIONS\n\nThis variable contains a list of translation (.ts) files that contain translations of the user interface text into non-native languages.\n\nSee the Qt Linguist Manual for more information about internationalization (i18n) and localization (l10n) with Qt.\n\nUICIMPLS\n\nThis variable contains a list of the generated implementation files by UIC. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nUICOBJECTS\n\nThis variable is generated from the UICIMPLS variable. The extension of each file will have been replaced by .o (Unix) or .obj (Win32). The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nUI_DIR\n\nThis variable specifies the directory where all intermediate files from uic should be placed. This variable overrides both UI_SOURCES_DIR and UI_HEADERS_DIR.\n\nFor example:\n\nunix:UI_DIR = ../myproject/ui win32:UI_DIR = c:/myproject/ui\n\nUI_HEADERS_DIR\n\nThis variable specifies the directory where all declaration files (as generated by uic) should be placed.\n\nFor example:\n\nunix:UI_HEADERS_DIR = ../myproject/ui/include win32:UI_HEADERS_DIR = c:/myproject/ui/include\n\nUI_SOURCES_DIR\n\nThis variable specifies the directory where all implementation files (as generated by uic) should be placed.\n\nFor example:\n\nunix:UI_SOURCES_DIR = ../myproject/ui/src win32:UI_SOURCES_DIR = c:/myproject/ui/src\n\nVERSION\n\nThis variable contains the version number of the application or library if either the app TEMPLATE or the lib TEMPLATE is specified.\n\nFor example:\n\nVERSION = 1.2.3\n\nVER_MAJ\n\nThis variable contains the major version number of the library, if the lib template is specified.\n\nVER_MIN\n\nThis variable contains the minor version number of the library, if the lib template is specified.\n\nVER_PAT\n\nThis variable contains the patch version number of the library, if the lib template is specified.\n\nVPATH\n\nThis variable tells qmake where to search for files it cannot open. With this you may tell qmake where it may look for things like SOURCES, and if it finds an entry in SOURCES that cannot be opened it will look through the entire VPATH list to see if it can find the file on its own.\n\nSee also DEPENDPATH.\n\nYACCIMPLS\n\nThis variable contains a list of yacc source files. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nYACCOBJECTS\n\nThis variable contains a list of yacc object files. The value of this variable is typically handled by qmake or qmake.conf and rarely needs to be modified.\n\nYACCSOURCES\n\nThis variable contains a list of yacc source files to be included in the project. All dependencies, headers and source files will automatically be included in the project.\n\nFor example:\n\nYACCSOURCES = moc.y"
    }
}