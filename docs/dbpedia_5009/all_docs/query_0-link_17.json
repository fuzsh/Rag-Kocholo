{
    "id": "dbpedia_5009_0",
    "rank": 17,
    "data": {
        "url": "https://www.pythonguis.com/tutorials/first-steps-qt-creator/",
        "read_more_link": "",
        "language": "en",
        "title": "Create your first PyQt5 app in Qt Creator",
        "top_image": "https://www.pythonguis.com/static/images/articles/qt-creator.jpg",
        "meta_img": "https://www.pythonguis.com/static/images/articles/qt-creator.jpg",
        "images": [
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-start.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-create-ui-file1.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-create-ui-file2.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-create-ui-file3.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-create-ui-file4.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-main-window.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-layout-start.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-layout1.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-layout2.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-layout3.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/qt-creator-layout4.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/Screenshot_2019-05-29_at_22.42.25.png",
            "https://www.pythonguis.com/static/tutorials/qt-creator/first-steps-qt-creator/Screenshot_2019-05-29_at_22.42.25.png",
            "https://www.pythonguis.com/static/theme/images/products/packaging-book.png",
            "https://www.pythonguis.com/static/theme/images/authors/martin-fitzpatrick.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "qt",
            "pyqt",
            "pyqt5",
            "qt-designer",
            "qt-creator",
            "pyqt5-qt-designer",
            "python",
            "qt5"
        ],
        "tags": null,
        "authors": [
            "Martin Fitzpatrick"
        ],
        "publish_date": "2019-04-15T12:04:00+00:00",
        "summary": "",
        "meta_description": "In this tutorial, we'll cover the basics of creating UIs with _Qt Designer_, which is a drag-and-drop UI editor. So far we have been creating apps using Python code.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.svg",
        "meta_site_name": "Python GUIs",
        "canonical_link": "https://www.pythonguis.com/tutorials/first-steps-qt-creator/",
        "text": "So far we have been creating apps using Python code. This works great in many cases, but as your applications get larger or interfaces more complicated, it can get a bit cumbersome to define all widgets programmatically. The good news is that Qt comes with a graphical editor — Qt Designer — which contains a drag-and-drop UI editor. Using Qt Designer you can define your UIs visually and then simply hook up the application logic later.\n\nIn this tutorial we'll cover the basics of creating UIs with Qt Designer. The principles, layouts and widgets are identical, so you can apply everything you've already learnt. You'll also need your knowledge of the Python API to hook up your application logic later.\n\nThis tutorial requires Qt Creator to be installed — you can download it free from the Qt website. Go to https://www.qt.io/download and download the Qt package. You can opt to install only Creator during the installation.\n\nOpen up Qt Creator and you will be presented with the main window. The designer is available via the tab on the left hand side. However, to activate this you first need to start creating a .ui file.\n\nThe Qt Creator interface, with the Design section shown on the left.\n\nTo create a .ui file go to File -> New File or Project... In the window that appears select Qt under Files and Classes on the left, then select Qt Designer Form on the right. You'll notice the icon has \"ui\" on it, showing the type of file you're creating.\n\nCreate a new Qt .ui file.\n\nIn the next step you'll be asked what type of widget you want to create. If you are starting an application then Main Window is the right choice. However, you can also create .ui files for dialog boxes, forms and custom compound widgets.\n\nSelect the type of widget to create, for most applications this will be Main Window.\n\nNext choose a filename and save folder for your file. Save your .ui file with the same name as the class you'll be creating, just to make make subsequent commands simpler.\n\nChoose save name and folder your your file.\n\nFinally, you can choose to add the file to your version control system if you're using one. Feel free to skip this step — it doesn't affect your UI.\n\nOptionally add the file to your version control, e.g. Git.\n\nLaying out your Main Window\n\nYou'll be presented with your newly created main window in the UI designer. There isn't much to see to begin with, just a grey working area representing the window, together with the beginnings of a window menu bar.\n\nThe initial view of the created main window.\n\nYou can resize the window by clicking the window and dragging the blue handles on each corner.\n\nThe initial view of the created main window.\n\nThe first step in building an application is to add some widgets to your window. In our first applications we learnt that to set the central widget for a QMainWindow we need to use .setCentralWidget(). We also saw that to add multiple widgets with a layout, we need an intermediary QWidget to apply the layout to, rather than adding the layout to the window directly.\n\nQt Creator takes care of this for you automatically, although it's not particularly obvious about it.\n\nTo add multiple widgets to the main window with a layout, first drag your widgets onto the QMainWindow. Here we're dragging 3 labels. It doesn't matter where you drop them.\n\nMain window with 1 labels and 1 button added.\n\nWe've created 2 widgets by dragging them onto the window, made them children of that window. We can now apply a layout.\n\nFind the QMainWindow in the right hand panel (it should be right at the top). Underneath you see centralwidget representing the window's central widget. The icon for the central widget show the current layout applied. Initially it has a red circle-cross through it, showing that there is no layout active.\n\nRight click on the QMainWindow object, and find 'Layout' in the resulting dropdown.\n\nRight click on the main window, and choose layout.\n\nNext you'll see a list of layouts which you can apply to the window. Select Lay Out Horizontally and the layout will be applied to the widget.\n\nSelect layout to apply to the main window.\n\nThe selected layout is applied to the the centralwidget of the QMainWindow and the widgets are added the layout, being laid out depending on the selected layout. Note that in Qt Creator you can actually drag and re-order the widgets within the layout, or select a different layout, as you like. This makes it especially nice to prototyping and trying out things.\n\nVertical layout applied to widgets on the main window.\n\nUsing your generated .ui file\n\nWe've created a very simple UI. The next step is to get this into Python and use it to construct a working application.\n\nFirst save your .ui file — by default it will save at the location you chosen while creating it, although you can choose another location if you like.\n\nThe .ui file is in XML format. To use our UI from Python we have two alternative methods available —\n\nload into into a class using the .loadUI() method\n\nconvert it to Python using the pyuic5 tool.\n\nThese two approaches are covered below. Personally I prefer to convert the UI to a Python file to keep things similar from a programming & packaging point of view.\n\nLoading the .ui file directly\n\nTo load .ui files we can use the uic module included with PyQt5, specifically the uic.loadUI()method. This takes the filename of a UI file and loads it creating a fully-functional PyQt5 object.\n\nA (very) simple UI designed in Qt Creator\n\nAs the uid.loadUI() method turns an instance object you cannot attach custom __init__() code. You can however handle this through a custom setup function\n\nTo load a UI from the __init__ block of an existing widget (e.g. a QMainWindow) you can use uic.loadUI(filename, self) for PyQt5.\n\nConverting your .ui file to Python\n\nTo generate a Python output file run pyuic5 from the command line, passing the .ui file and the target file for output, with a -o parameter. The following will generate a Python file named MainWindow.py which contains our created UI.\n\nIf you're using PyQt4 the tool is named `pyuic4`, but is otherwise completely identical.\n\nYou can open the resulting MainWindow.py file in an editor to take a look, although you should not edit this file. The power of using Qt Creator is being able to edit, tweak and update your application while you develop. Any changes made to this file will be lost when you update it. However, you can override and tweak anything you like when you import and use the file in your applications.\n\nImporting the resulting Python file works as for any other. You can import your class as follows. The pyuic5 tool appends Ui_ to the name of the object defined in Qt Creator, and it is this object you want to import.\n\nTo create the main window in your application, create a class as normal but subclassing from both QMainWindow and your imported Ui_MainWindow class. Finally, call self.setupUi(self) from within the __init__ to trigger the setup of the interface.\n\nThis produces exactly the same result as before.\n\nA (very) simple UI designed in Qt Creator\n\nThat's it. Your window is now fully set up. Since the use of a .ui file abstracts out the UI-specific code, you can use this same pattern to load any interface you design.\n\nAdding application logic"
    }
}