{
    "id": "dbpedia_5009_0",
    "rank": 2,
    "data": {
        "url": "https://stackoverflow.com/questions/53163714/how-build-the-qt-project-itself-using-qtcreator",
        "read_more_link": "",
        "language": "en",
        "title": "how build the qt project itself using qtcreator",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/BRddb.jpg?s=64",
            "https://www.gravatar.com/avatar/18e7b6c49fea4ea02536498a04c34e51?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://stackoverflow.com/posts/53163714/ivc/093f?prg=7da9d1a7-d468-4f7a-83e7-a65079579444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Patrick Fromberg"
        ],
        "publish_date": "2018-11-05T23:18:53",
        "summary": "",
        "meta_description": "Update:\nBecause this was partly to have a project to code-browse the whole of qt, here is a much better way to do this: Code Browser by Woboq for C &amp; C++\n\nThis even lets you browse into the inc...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/53163714/how-build-the-qt-project-itself-using-qtcreator",
        "text": "Qt is not really meant to be compiled from within an IDE. However, this does not mean it's impossible to do. There are two ways to archive this:\n\nFirst approach: Add the developer build as custom kit:\n\nRun the configure script (and add the -developer-build option)\n\nOpen QtCreator and go to \"Tools > Options > Kits\"\n\nGo to \"Qt Versions\" add press \"Add\" - select the qmake executable generated by the configure script. Then hit \"Apply\"\n\nGo to \"Kits\" and press \"Add\" - Make shure to select the correct compilers and debugger and select the previously create \"Qt Version\". Press \"Ok\"\n\nOpen the top level .pro file in QtCreator and choose the previously created Kit. QtCreator will now use the correct qmake executable\n\nThis is the \"proper\" way to go. You can now use the project as any normal project, including changes to pro-files. Also, QtCreator now correctly detects the build directory, so you won't have to change that, even when opening one of the modules.\n\nSecond approach: Use as a normal project without qmake:\n\nRun the configure script (and add the -developer-build option)\n\nRun make qmake_all in the same terminal to let Qt prepare all makefiles, create headers etc.\n\nOpen the top level .pro file in QtCreator. You can choose any kit.\n\nGo to Project > Your Kit > Build and disable the \"qmake\" step (the first of the default 2 steps)\n\nChange the \"build directory\" to be wherever you built Qt - either a shadow build or the source directory\n\nHit Build and QtCreator will invoke make only, archieving the same behaviour as running make from the console.\n\nThis is kind of a workaround and I would not recommend using it for a full Qt build, unless the first approach does not work for you for whatever reason.\n\nThis can also be useful if you only want to make changes to a single Qt module, without compiling the whole Qt framework, i.e. you can clone one of the submodules and use your \"existing\" qmake on it instead of compiling QtBase (in that case, you skip step 4)\n\nFinal notice: When I tried opening the whole Qt-Project, QtCreator crashed on my system because the project was to big to handle. I would recommend you to only open one of the modules within the super repostitory, i.e. \"qtbase\", \"qtdeclarative\", etc."
    }
}