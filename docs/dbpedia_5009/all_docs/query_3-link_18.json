{
    "id": "dbpedia_5009_3",
    "rank": 18,
    "data": {
        "url": "https://github.com/qt-creator/qt-creator",
        "read_more_link": "",
        "language": "en",
        "title": "creator: A cross",
        "top_image": "https://opengraph.githubassets.com/584d488e2ab469ecfef21eee60c586312e1590a2df298446de43c6900e304bc2/qt-creator/qt-creator",
        "meta_img": "https://opengraph.githubassets.com/584d488e2ab469ecfef21eee60c586312e1590a2df298446de43c6900e304bc2/qt-creator/qt-creator",
        "images": [
            "https://avatars.githubusercontent.com/u/4262563?s=64&v=4",
            "https://avatars.githubusercontent.com/u/73267?s=64&v=4",
            "https://avatars.githubusercontent.com/u/74902542?s=64&v=4",
            "https://avatars.githubusercontent.com/u/31125?s=64&v=4",
            "https://avatars.githubusercontent.com/u/11738164?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10196601?s=64&v=4",
            "https://avatars.githubusercontent.com/u/812380?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1246544?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5547450?s=64&v=4",
            "https://avatars.githubusercontent.com/u/15667773?s=64&v=4",
            "https://avatars.githubusercontent.com/u/9945687?s=64&v=4",
            "https://avatars.githubusercontent.com/u/30830880?s=64&v=4",
            "https://avatars.githubusercontent.com/u/531764?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1257414?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "qt-creator"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "A cross-platform Qt IDE. Contribute to qt-creator/qt-creator development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/qt-creator/qt-creator",
        "text": "Qt Creator is a cross-platform, integrated development environment (IDE) for application developers to create applications for multiple desktop, embedded, and mobile device platforms.\n\nThe Qt Creator Manual is available at:\n\nhttps://doc.qt.io/qtcreator/index.html\n\nFor an overview of the Qt Creator IDE, see:\n\nhttps://doc.qt.io/qtcreator/creator-overview.html\n\nThe standalone binary packages support the following platforms:\n\nWindows 10 (64-bit) or later\n\n(K)Ubuntu Linux 22.04 (64-bit) or later\n\nmacOS 11 or later\n\nWhen you compile Qt Creator yourself, the Qt version that you build with determines the supported platforms.\n\nFor instructions on how to set up the Qt Creator repository to contribute patches back to Qt Creator, please check:\n\nhttps://wiki.qt.io/Setting_up_Gerrit\n\nSee the following page for information about our coding standard:\n\nhttps://doc.qt.io/qtcreator-extending/coding-style.html\n\nPrerequisites:\n\nQt 6.4.3 or later. The Qt version that you use to build Qt Creator defines the minimum platform versions that the result supports (Windows 10, RHEL/CentOS 8.4, Ubuntu 20.04, macOS 10.15 for Qt 6.4.3).\n\nQt WebEngine module for QtWebEngine based help viewer\n\nOn Windows:\n\nMinGW with GCC 11.2 or Visual Studio 2019 or later\n\nPython 3.8 or later (optional, needed for the python enabled debug helper)\n\nDebugging Tools for Windows (optional, for MSVC debugging support with CDB)\n\nOn Mac OS X: latest Xcode\n\nOn Linux: GCC 9 or later\n\nLLVM/Clang 14 or later (optional, LLVM/Clang 17 is recommended. See instructions on how to get LLVM. The ClangFormat plugin uses the LLVM C++ API. Since the LLVM C++ API provides no compatibility guarantee, if later versions don't compile we don't support that version.)\n\nCMake\n\nNinja (recommended)\n\nThe used toolchain has to be compatible with the one Qt was compiled with.\n\nThe official mirror of the Qt Creator repository is located at https://code.qt.io/cgit/qt-creator/qt-creator.git/. Run\n\nto clone the Qt Creator sources from there. This creates a checkout of the Qt Creator sources in the qt-creator/ directory of your current working directory.\n\nQt Creator relies on some submodules, like litehtml for displaying documentation. Get these submodules with\n\nNote the --recursive in this command, which fetches also submodules within submodules, and is necessary to get all the sources.\n\nThe git history contains some coding style cleanup commits, which you might want to exclude for example when running git blame. Do this by running\n\nThese instructions assume that Ninja is installed and in the PATH, Qt Creator sources are located at /path/to/qtcreator_sources, Qt is installed in /path/to/Qt, and LLVM is installed in /path/to/llvm.\n\nNote that if you install Qt via the online installer, the path to Qt must include the version number and compiler ABI. The path to the online installer content is not enough.\n\nNote that /path/to/Qt doesn't imply the full path depth like: $USER/Qt/6.4.3/gcc_64/lib/cmake/Qt6, but only $USER/Qt/6.4.3/gcc_64.\n\nSee instructions on how to get LLVM.\n\nEnsure all prerequisites for building Qt are installed: https://doc.qt.io/qt-6/linux.html https://doc.qt.io/qt-6/linux-requirements.html\n\nIf they were installed before building Qt and xcb plugin is missing try reinstall them with\n\nReset building configuration for Qt libraries at '/path/to/qt_sources'\n\nand remove CMakeCache.txt\n\nrm CMakeCache.txt\n\nTry building Qt source again.\n\nThese instructions assume that Ninja is installed and in the PATH, Qt Creator sources are located at \\path\\to\\qtcreator_sources, Qt is installed in \\path\\to\\Qt, and LLVM is installed in \\path\\to\\llvm.\n\nNote that if you install Qt via the online installer, the path to Qt must include the version number and compiler ABI. The path to the online installer content is not enough.\n\nNote that \\path\\to\\Qt doesn't imply the full path depth like: c:\\Qt\\6.4.3\\msvc2019_64\\lib\\cmake\\Qt6, but only c:/Qt/6.4.3/msvc2019_64. The usage of slashes / is intentional, since CMake has issues with backslashes \\ in CMAKE_PREFX_PATH, they are interpreted as escape codes.\n\nSee instructions on how to get LLVM.\n\nDecide which compiler to use: MinGW or Microsoft Visual Studio.\n\nMinGW is available via the Qt online installer, for other options see https://wiki.qt.io/MinGW. Run the commands below in a shell prompt that has <path_to_mingw>\\bin in the PATH.\n\nFor Microsoft Visual C++ you can use the \"Build Tools for Visual Studio\". Also install the \"Debugging Tools for Windows\" from the Windows SDK installer. We strongly recommend using the 64-bit version and 64-bit compilers on 64-bit systems. Open the x64 Native Tools Command Prompt for VS <version> from the start menu items that were created for Visual Studio, and run the commands below in it.\n\nQt Creator can be registered as a post-mortem debugger. This can be done in the options page or by running the tool qtcdebugger with administrative privileges passing the command line options -register/unregister, respectively. Alternatively, the required registry entries\n\ncan be modified using the registry editor regedt32 to contain\n\nWhen using a self-built version of Qt Creator as post-mortem debugger, it needs to be able to find all dependent Qt-libraries and plugins when being launched by the system. The easiest way to do this is to create a self-contained Qt Creator by installing it and installing its dependencies. See \"Options\" below for details.\n\nNote that unlike on Unix, you cannot overwrite executables that are running. Thus, if you want to work on Qt Creator using Qt Creator, you need a separate installation of it. We recommend using a separate, release-built version of Qt Creator to work on a debug-built version of Qt Creator.\n\nAlternatively, take the following template of CMakeUserPresets.json for reference. Write your own configurePreset inheriting cmake-plugin-minimal in CMakeUserPresets.json to build with IDEs (such as QtCreator, VSCode, CLion...etc) locally:\n\nIf you do not have Ninja installed and in the PATH, remove -G Ninja from the first cmake call. If you want to build in release mode, change the build type to -DCMAKE_BUILD_TYPE=Release. You can also build with release optimizations but debug information with -DCMAKE_BUILD_TYPE=RelWithDebInfo.\n\nYou can find more options in the generated CMakeCache.txt file. For instance, building of Qbs together with Qt Creator can be enabled with -DBUILD_QBS=ON.\n\nInstallation is not needed. You can run Qt Creator directly from the build directory. On Windows, make sure that your PATH environment variable points to all required DLLs, like Qt and LLVM. On Linux and macOS, the build already contains the necessary RPATHs for the dependencies.\n\nIf you want to install Qt Creator anyway, that is however possible using\n\nTo create a self-contained Qt Creator installation, including all dependencies like Qt and LLVM, additionally run\n\nTo install development files like headers, CMake files, and .lib files on Windows, run\n\nIf you used the RelWithDebInfo configuration and want debug information to be available to the installed Qt Creator, run\n\nSupport for the perf profiler requires the perfparser tool that is part of the Qt Creator source package, and also part of the Qt Creator Git repository in form of a submodule in src/tools/perfparser.\n\nCompilation of perfparser requires ELF and DWARF development packages. You can either download and extract a prebuilt package from https://download.qt.io/development_releases/prebuilt/elfutils/ and add the directory to the CMAKE_PREFIX_PATH when configuring Qt Creator, or install the libdw-dev package on Debian-style Linux systems.\n\nYou can also point Qt Creator to a separate installation of perfparser by setting the PERFPROFILER_PARSER_FILEPATH environment variable to the full path to the executable.\n\nThe Clang code model uses Clangd and the ClangFormat plugin depends on the LLVM/Clang libraries. The currently recommended LLVM/Clang version is 14.0.\n\nPrebuilt packages of LLVM/Clang can be downloaded from https://download.qt.io/development_releases/prebuilt/libclang/\n\nThis should be your preferred option because you will use the version that is shipped together with Qt Creator (with backported/additional patches). In addition, MinGW packages for Windows are faster due to profile-guided optimization. If the prebuilt packages do not match your configuration, you need to build LLVM/Clang manually.\n\nIf you use the MSVC compiler to build Qt Creator the suggested way is: 1. Download both MSVC and MinGW packages of libclang. 2. Use the MSVC version of libclang during the Qt Creator build. 3. Prepend PATH variable used for the run time with the location of MinGW version of libclang.dll. 4. Launch Qt Creator.\n\nYou need to install CMake in order to build LLVM/Clang.\n\nBuild LLVM/Clang by roughly following the instructions at http://llvm.org/docs/GettingStarted.html#git-mirror:\n\nClone LLVM/Clang and checkout a suitable branch\n\ngit clone -b release_17.0.6-based --recursive https://code.qt.io/clang/llvm-project.git\n\nBuild and install LLVM/Clang\n\nmkdir build cd build\n\nFor Linux/macOS:\n\ncmake \\ -D CMAKE_BUILD_TYPE=Release \\ -D LLVM_ENABLE_RTTI=ON \\ -D LLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra\" \\ -D CMAKE_INSTALL_PREFIX=<installation location> \\ ../llvm-project/llvm cmake --build . --target install\n\nFor Windows:\n\ncmake ^ -G Ninja ^ -D CMAKE_BUILD_TYPE=Release ^ -D LLVM_ENABLE_RTTI=ON ^ -D LLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra\" ^ -D CMAKE_INSTALL_PREFIX=<installation location> ^ ..\\llvm-project\\llvm cmake --build . --target install\n\nQt Creator is available under commercial licenses from The Qt Company, and under the GNU General Public License version 3, annotated with The Qt Company GPL Exception 1.0. See LICENSE.GPL3-EXCEPT for the details."
    }
}