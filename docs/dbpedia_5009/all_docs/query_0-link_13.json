{
    "id": "dbpedia_5009_0",
    "rank": 13,
    "data": {
        "url": "https://www.soluling.com/Help/Qt/Index.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Qt Localization and Internationalization",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.soluling.com/Help/64x64/Qt.png",
            "https://www.soluling.com/Help/Qt/CreateDialogProject.png",
            "https://www.soluling.com/Help/Qt/Dialog.png",
            "https://www.soluling.com/Help/Qt/Translatable.png",
            "https://www.soluling.com/Help/Qt/SelectSource.png",
            "https://www.soluling.com/Help/Images/SolulingLogoFooter.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Qt (Wikipedia) is a popular cross-platform application framework that is used to develop desktop applications (e.g., Windows, Mac, Linux), embedded software (e.g. automobile and machine industry), and mobile applications (e.g., Sailfish). Qt has two frameworks. The traditional framework uses the widget-based API. The new framework is called Qt Quick, and it uses declarative language, QML. Both technologies use Qt Linquist files, .ts, to store localized strings. Use Soluling localization tool or service to create localized .ts files.\n\nProcess\n\nPlurals\n\nSamples\n\nConfiguring localization\n\nQt's online documentation contains several useful topics. Read them first.\n\nInternationalization with Qt\n\nQt Quick Internationalization Guide\n\nIf you want to implement a runtime language switch, read this.\n\nHow to create a multi language application\n\nProcess\n\nCreate a new Qt Widgets application that uses QDialog as a base class. Name the project Tutorial.\n\nComplete New Project wizard. Then add two labels on the dialog. Set the first text to \"Hello world\" and the second text to \"dummy.\" The first label is static, and the value is defined on design time. However, the second one is dynamic, and we will set the value on run time. This is why we set the value to \"dummy.\" You can also set the value to empty, but having a value makes it easier to see in the designer.\n\nBecause we don't want to extract the value of dummy, we need to turn the translatable property to false. Select the second label, expand text property, and uncheck translatable.\n\nThis will prevent \"dummy\" to appear in the translation file. Now we can enable creating the .ts file. Add the following line to Tutorial.pro\n\nTRANSLATIONS = strings.ts\n\nThis will tell Qt that we want to have all the strings (from .ui and .cpp) of the application stored into dialog.ts file. To scan the source code and to create the ts file, we need to call lupdate.exe from Qt's bin directory.\n\nlupdate Tutorial.pro\n\nThis scans the project files and creates dialog.ts. The next step is to create a Soluling project for the project.\n\nStart Soluling\n\nDrag strings.ts or Tutorial.pro on Soluling or click New from File or Files button and select either of the files.\n\nIf you selected .ts file the following dialog appears.\n\nThis is because the .ts file extension can either mean Qt translation file or TypeScript source code file. Soluling correctly detects it as a Qt translation file. Click OK.\n\nProject Wizard appears showing first the Options sheet. This lets you select the context method you want to use. Click Next.\n\nSelect Languages appears. Select the original languages and the target languages and clock Finnish.\n\nThe new project gets created. Translate the project and finally build the project by choosing Home | Build All ribbon menu.\n\nNow we have the localized ts files. Let's use them. First add lrelease into CONFIG of Tutorial.pro file.\n\nCONFIG += c++11 lrelease\n\nThen add the following line into Tutorial.pro file\n\nEXTRA_TRANSLATONS strings_fi.ts strings_de.ts strings_ja.ts\n\nYou have to add all the .ts files you have. In the above line, we added Finnish, German, and Japanese translation files. These two lines make the build process to compile .ts files to .qm files that are the binary version of .ts files. Qt runtime uses .qm files instead of .ts files.\n\nIf you added a .ts file to Soluling instead of a .pro file, when Soluling creates localized .ts file, it by default also compiles them into binary .qm file that you can deploy with your application. Use the Write options sheet to configure how to create the localized .ts files and select if to compile the .qm files. Another way to compile .ts files is to use Qt's lrelease.exe command -ine tool.\n\nlrelease strings_fi.ts\n\nNext modify main.pas to use a .qm file. Your original main.cpp looks like this.\n\n#include \"dialog.h\" #include <QApplication> int main(int argc, char *argv[]) { QApplication a(argc, argv); Dialog w; w.show(); return a.exec(); }\n\nChange it to\n\n#include \"dialog.h\" #include <QApplication> #include <QLocale> #include <QTranslator> int main(int argc, char *argv[]) { QApplication a(argc, argv); QTranslator translator; bool ok = translator.load(\"strings_\" + QLocale::system().name()); if (ok) a.installTranslator(&translator); Dialog w; w.show(); return a.exec(); }\n\nThe new code creates a translator, loads a .qm file, and installs the translator. Now when you run the application and if there exists a .qm file matching your system locale, Qt will use translations of from the .qm file.\n\nOur current application uses a standalone .qm file. If you want to add the .qm file inside your application as a resource, you can do that. Add embed_translations into CONFIG.\n\nCONFIG += c++11 lrelease embed_translations\n\nFinally, you need to modify main.pas to use resources translations instead of standalone translation files.\n\nbool ok = translator.load(\":/i18n/strings_\" + QLocale::system().name());\n\nContext\n\nA ts file contains one or more context elements. Each context element contains one or more message elements that each contain one string. The context element has a name that Soluling uses as a context. However, the message element does not contain any specific id or name that could be used as a context. This is why Soluling has to figure out the context using other elements and attributes. Let's see what they are. The following sample shows a message element.\n\n<message> <location filename=\"mainwindow.ui\" line=\"14\"/> <source>Driving Time</source> <comment>This is a comment</comment> <translation type=\"unfinished\"></translation> </message>\n\nThe comment element is optional, so it exists if you have specified comments in your source code. There are three elements we could use as a context: source, location, and comment. Each method has its pros and cons.\n\nBy default, Soluling uses the source element as a context. This means the original value sets a part of the context. The pro is that the value always exists. The cons are that your ts file might have the same source value more than twice. If the duplicate values are in the same context element, there is a conflict. In that case, Soluling adds a comment value (if it exists) or a running index. If you change the original string value, your context will also change, and you will lose the existing translations. It is recommended to use the original value as a context.\n\nAnother method to specify the context is to use the comment value. The pro is that you, as a developer, can control the value, and it does not change even if you change the string value. The cons are that the context element is meant for a string describing the string, not giving a context. Also is two message elements have the same comment value, then they are mapped as one. The source element is used if this method is set and the message element has no comment. Use this method only if you know that comment values contain context data, and every comment in the same context element is unique.\n\nThe last method is to use the location element. The pro is that it is automatically provided, and you do not have to perform any extra action to set it. The con is that the value is also very volatile. Any change in your source code will most likely cause a change in location values.\n\nPlurals\n\nQt has a plural enabled format function: tr. The 3rd parameter of tr is the count parameter that is used to select the right grammatical number. What is missing in Qt's pluralization support is the ability to give a correct grammatical number for the original language. You can only pass one pattern for tr function. However, the localized .ts file will have the correct amount of patterns.\n\nSee GitHub or <data-dir>\\Samples\\Qt\\Widget\\Plural sample.\n\nSamples\n\nSee GitHub and <data-dir>\\Samples\\Qt contains following Qt samples:\n\nDirectory Description Notes Widget\\Simple Simple localized Qt application.\n\nTry this first! Widget\\Hello Localized Hello World application for Qt Widget\\Driving Shows how to localize a Qt application. Widget\\Plural Shows how to create grammatically correct plural enabled messages. Widget\\Tutorial The above tutorial sample.\n\nConfiguring Qt Localization\n\nYou can configure how to localize your Qt application by selecting the item in the project tree, right-clicking, and choosing the Options menu. A source dialog appears that lets you edit the options. This source uses the following option sheets."
    }
}