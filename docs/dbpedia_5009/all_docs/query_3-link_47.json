{
    "id": "dbpedia_5009_3",
    "rank": 47,
    "data": {
        "url": "https://www.pythonguis.com/tutorials/pyqt-basic-widgets/",
        "read_more_link": "",
        "language": "en",
        "title": "PyQt5 Widgets — QCheckBox, QComboBox, QPushButton, QLabel, QSlider",
        "top_image": "https://www.pythonguis.com/static/images/courses/helloworld_JeRwi1P.jpg",
        "meta_img": "https://www.pythonguis.com/static/images/courses/helloworld_JeRwi1P.jpg",
        "images": [
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets-list.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets1.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/otje.jpg",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets2.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets3.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets4.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets5.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets6.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets7.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets8.png",
            "https://www.pythonguis.com/static/tutorials/start/basic-widgets/widgets9.png",
            "https://www.pythonguis.com/static/theme/images/products/packaging-book.png",
            "https://www.pythonguis.com/static/theme/images/authors/martin-fitzpatrick.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "qt",
            "pyqt",
            "pyqt5",
            "widgets",
            "qlabel",
            "qcheckbox",
            "qcombobox",
            "qlistbox",
            "qlistwidget",
            "qlineedit",
            "qspinbox",
            "qdoublespinbox",
            "qslider",
            "qwidget",
            "foundation",
            "pyqt5-foundation",
            "python",
            "qt5"
        ],
        "tags": null,
        "authors": [
            "Martin Fitzpatrick"
        ],
        "publish_date": "2019-05-05T20:05:00+00:00",
        "summary": "",
        "meta_description": "PyQt5 has a huge library of widgets, including buttons, checkboxes, list boxes, and sliders or dials. Learn how to use them in your apps. In Qt, like in most GUI frameworks, widget is the name given to a component of the UI that the user can interact with.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.svg",
        "meta_site_name": "Python GUIs",
        "canonical_link": "https://www.pythonguis.com/tutorials/pyqt-basic-widgets/",
        "text": "In Qt, like in most GUI frameworks, widget is the name given to a component of the UI that the user can interact with. User interfaces are made up of multiple widgets, arranged within the window.\n\nQt comes with a large selection of widgets available and even allows you to create your own custom and customized widgets. In this tutorial, you'll learn the basics of some of the most commonly used widgets in Qt GUI applications.\n\nA Quick Widgets Demo\n\nFirst, let's have a look at some of the most common PyQt widgets. The following code creates a range of PyQt widgets and adds them to a window layout so you can see them together:\n\nRun it! You'll see a window appear containing all the widgets we've created:\n\nBig ol' list of widgets on Windows, Mac & Ubuntu Linux.\n\nWe'll cover how layouts work in Qt in the next tutorial.\n\nLet's have a look at all the example widgets, from top to bottom:\n\nWidget What it does QCheckbox A checkbox QComboBox A dropdown list box QDateEdit For editing dates and datetimes QDateTimeEdit For editing dates and datetimes QDial Rotatable dial QDoubleSpinbox A number spinner for floats QFontComboBox A list of fonts QLCDNumber A quite ugly LCD display QLabel Just a label, not interactive QLineEdit Enter a line of text QProgressBar A progress bar QPushButton A button QRadioButton A toggle set, with only one active item QSlider A slider QSpinBox An integer spinner QTimeEdit For editing times\n\nThere are far more widgets than this, but they don’t fit so well! You can see them all by checking the Qt documentation.\n\nNext, we'll step through some of the most commonly used widgets and look at them in more detail. To experiment with the widgets, we'll need a simple application to put them in. Save the following code to a file named app.py and run it to make sure it's working:\n\nIn the code above, we've imported a number of Qt widgets. Now we'll step through each of those widgets in turn, adding them to our application and seeing how they behave.\n\nQLabel\n\nWe'll start the tour with QLabel, arguably one of the simplest widgets available in the Qt toolbox. This is a simple one-line piece of text that you can position in your application. You can set the text by passing in a string as you create it:\n\nYou can also set the text of a label dynamically, by using the setText() method:\n\nYou can also adjust font parameters, such as the size of the font or the alignment of text in the widget:\n\nQLabel on Windows, Mac & Ubuntu Linux.\n\nFont tip Note that if you want to change the properties of a widget font it is usually better to get the current font, update it, and then apply it back. This ensures the font face remains in keeping with the desktop conventions.\n\nThe alignment is specified by using a flag from the Qt namespace. The flags available for horizontal alignment are listed in the following table:\n\nFlag Behavior Qt.AlignLeft Aligns with the left edge. Qt.AlignRight Aligns with the right edge. Qt.AlignHCenter Centers horizontally in the available space. Qt.AlignJustify Justifies the text in the available space.\n\nSimilarly, the flags available for vertical alignment are:\n\nFlag Behavior Qt.AlignTop Aligns with the top. Qt.AlignBottom Aligns with the bottom. Qt.AlignVCenter Centers vertically in the available space.\n\nYou can combine flags together using pipes (|). However, note that you can only use vertical or horizontal alignment flags at a time:\n\nNote that you use an OR pipe (|) to combine the two flags (not A &amp; B). This is because the flags are non-overlapping bitmasks. For example, Qt.AlignmentFlag.AlignLeft has the hexadecimal value 0x0001, while Qt.AlignmentFlag.AlignBottom is 0x0040. By ORing them together, we get the value 0x0041, representing 'bottom left'. This principle applies to all other combinatorial Qt flags. If this is gibberish to you, then feel free to ignore it and move on. Just remember to use the pipe (|) symbol.\n\nFinally, there is also a shorthand flag that centers in both directions simultaneously:\n\nFlag Behavior Qt.AlignCenter Centers horizontally and vertically.\n\nWeirdly, you can also use QLabel to display an image using setPixmap(). This accepts a pixmap, which you can create by passing an image filename to the QPixmap class.\n\nBelow is an image which you can download for this example.\n\n\"Otje\" the cat.\n\nPlace the file in the same folder as your code, and then display it in your window as follows:\n\n\"Otje\" the cat, displayed in a window.\n\nWhat a lovely face. By default, the image scales while maintaining its aspect ratio. If you want it to stretch and scale to fit the window completely, then you can call setScaledContents(True) on the QLabel object:\n\nThis way, your image will stretch and scale to fit the window completely.\n\nQCheckBox\n\nThe next widget to look at is QCheckBox(), which, as the name suggests, presents a checkable box to the user. However, as with all Qt widgets, there are a number of configurable options to change the widget's default behaviors:\n\nQCheckBox on Windows, Mac & Ubuntu Linux.\n\nYou can set a checkbox state programmatically using the setChecked() or setCheckState() methods. The former accepts either True or False, which correspond to the checked or unchecked states, respectively. However, with setCheckState(), you also specify a particular checked state using a Qt namespace flag:\n\nFlag Behavior Qt.Unchecked Item is unchecked Qt.PartiallyChecked Item is partially checked Qt.Checked Item is checked\n\nA checkbox that supports a partially-checked (Qt.PartiallyChecked) state is commonly referred to as 'tri-state', which is being neither on nor off. A checkbox in this state is commonly shown as a greyed-out checkbox, and is commonly used in hierarchical checkbox arrangements where sub-items are linked to parent checkboxes.\n\nIf you set the value to Qt.PartiallyChecked the checkbox will become tristate. You can also set a checkbox to be tri-state without setting the current state to partially checked by using setTriState(True)\n\nYou may notice that when the script is running, the current state number is displayed as an int with checked = 2, unchecked = 0, and partially checked = 1. You don’t need to remember these values, the Qt.Checked namespace variable == 2, for example. This is the value of these state's respective flags. This means you can test state using state == Qt.Checked.\n\nQComboBox\n\nThe QComboBox is a drop-down list, closed by default with an arrow to open it. You can select a single item from the list, with the currently selected item being shown as a label on the widget. The combo box is suited for the selection of a choice from a long list of options.\n\nYou have probably seen the combo box used for the selection of font face, or size, in word processing applications. Although Qt actually provides a specific font-selection combo box as QFontComboBox.\n\nYou can add items to a QComboBox by passing a list of strings to addItems(). Items will be added in the order they are provided:\n\nQComboBox on Windows, Mac & Ubuntu Linux.\n\nThe currentIndexChanged signal is triggered when the currently selected item is updated, by default passing the index of the selected item in the list. There is also a currentTextChanged signal, which instead provides the label of the currently selected item, which is often more useful.\n\nQComboBox can also be editable, allowing users to enter values not currently in the list and either have them inserted or simply used as a value. To make the box editable, use the setEditable() method:\n\nYou can also set a flag to determine how the insertion is handled. These flags are stored on the QComboBox class itself and are listed below:\n\nFlag Behavior QComboBox.NoInsert Performs no insert. QComboBox.InsertAtTop Inserts as first item. QComboBox.InsertAtCurrent Replaces the currently selected item. QComboBox.InsertAtBottom Inserts after the last item. QComboBox.InsertAfterCurrent Inserts after the current item. QComboBox.InsertBeforeCurrent Inserts before the current item. QComboBox.InsertAlphabetically Inserts in alphabetical order.\n\nTo use these, apply the flag as follows:\n\nYou can also limit the number of items allowed in the box by using the setMaxCount() method:\n\nFor a more in-depth look at the QComboBox, check out our QComboBox documentation.\n\nQListWidget\n\nThis widget is similar to QComboBox, except options are presented as a scrollable list of items. It also supports the selection of multiple items at once. A QListWidget offers a currentItemChanged signal, which sends the QListWidgetItem (the element of the list widget), and a currentTextChanged signal, which sends the text of the current item:\n\nQListWidget on Windows, Mac & Ubuntu Linux.\n\nQLineEdit\n\nThe QLineEdit widget is a single-line text editing box, into which users can type input. These are used for form fields, or settings where there is no restricted list of valid inputs. For example, when entering an email address, or computer name:\n\nQLineEdit on Windows, Mac & Ubuntu Linux.\n\nAs demonstrated in the above code, you can set a maximum length for the text in a line edit using the setMaxLength() method.\n\nThe QLineEdit has a number of signals available for different editing events, including when the Enter key is pressed (by the user), and when the user selection is changed. There are also two edit signals, one for when the text in the box has been edited and one for when it has been changed. The distinction here is between user edits and programmatic changes. The textEdited signal is only sent when the user edits text.\n\nAdditionally, it is possible to perform input validation using an input mask to define which characters are supported and where. This can be applied to the field as follows:\n\nThe above would allow a series of 3-digit numbers separated with periods, and could therefore be used to validate IPv4 addresses.\n\nQSpinBox and QDoubleSpinBox\n\nQSpinBox provides a small numerical input box with arrows to increase and decrease the value. QSpinBox supports integers, while the related widget, QDoubleSpinBox, supports floats:\n\nRun it, and you'll see a numeric entry box. The value shows pre and post-fix units and is limited to the range 3 to -10.\n\nQSpinBox on Windows, Mac & Ubuntu Linux.\n\nThe demonstration code above shows the various features that are available for the widget.\n\nTo set the range of acceptable values, you can use the setMinimum() and setMaximum() methods. Alternatively, use setRange() to set both simultaneously. Annotation of value types is supported with both prefixes and suffixes that can be added to the number (e.g. for currency markers or units) using the setPrefix() and setSuffix() methods, respectively.\n\nClicking the up and down arrows on the widget will increase or decrease the value in the widget by an amount, which can be set using the setSingleStep() method. Note that this has no effect on the values that are acceptable to the widget.\n\nBoth QSpinBox and QDoubleSpinBox have a valueChanged signal, which fires whenever their value is altered. The raw valueChanged signal sends the numeric value (either an int or a float), while textChanged sends the value as a string, including both the prefix and suffix characters.\n\nYou can optionally disable text input on the spin box's line edit, by setting it to read-only. With this setting, the value can only be changed using the controls:\n\nThis setting also has the side effect of disabling the flashing cursor.\n\nQSlider\n\nQSlider provides a slide-bar widget, which internally works like a QDoubleSpinBox. Rather than display the current value numerically, that value is represented by the position of the slider's handle along the length of the widget. This is often useful when providing adjustment between two extremes, but when absolute accuracy is not required. The most common use case of this type of widget is for volume controls in audio playback.\n\nThere is an additional sliderMoved signal that is triggered whenever the slider moves position and a sliderPressed signal that is emitted whenever the slider is clicked:\n\nRun this, and you'll see a slider widget. Drag the slider to change the value:\n\nQSlider on Windows, Mac & Ubuntu Linux.\n\nYou can also construct a slider with a vertical or horizontal orientation by providing the orientation as you create it. The orientation flags are defined in the Qt namespace:\n\nQDial\n\nFinally, the QDial widget is a rotatable widget that works just like the slider but appears as an analog dial. This widget looks nice, but from a UI perspective, it is not particularly user-friendly. However, dials are often used in audio applications as a representation of real-world analog dials:\n\nRun this, and you'll see a circular dial. Rotate it to select a number from the range:\n\nQDial on Windows, Mac & Ubuntu Linux.\n\nThe signals are the same as for the QSlider widget and retain the same names (e.g. sliderMoved).\n\nConclusion"
    }
}