{
    "id": "dbpedia_5009_3",
    "rank": 74,
    "data": {
        "url": "https://medium.com/%40TomRvr/continuous-integration-for-a-qt-project-with-github-b19a33b39980",
        "read_more_link": "",
        "language": "en",
        "title": "Continuous integration for a Qt project with GitHub",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*1cQS5EwyjqLE60UArMLqXg.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*1cQS5EwyjqLE60UArMLqXg.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/0*vSdCS5Feqh-6kQcS.jpg",
            "https://miro.medium.com/v2/resize:fill:144:144/0*vSdCS5Feqh-6kQcS.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tom Rivoire",
            "medium.com"
        ],
        "publish_date": "2022-07-23T07:38:53.647000+00:00",
        "summary": "",
        "meta_description": "Use GitHub actions to build and release the Windows version of a Qt project",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@TomRvr/continuous-integration-for-a-qt-project-with-github-b19a33b39980",
        "text": "Introduction\n\nThe DevOps methodology includes two principles : continuous integration and continuous delivery (CI / CD).\n\nHere, I’m focusing on the first one, which implies to build the project as frequently as possible to iterate faster and detect bugs early in the process. Obviously, we want this to be automated.\n\nContinuous integration consists of the following steps :\n\nBuild\n\nRun unit tests\n\nRun code quality tests\n\nStore a release\n\nThe aim of this project is to set up continuous integration (CI) for a Qt application with GitHub actions. I will start from a basic Qt application and add automation to build and test the app on GitHub.\n\nI chose an example provided by Qt : https://doc.qt.io/qt-5/qt3d-planets-qml-example.html\n\nYou will find my repository for this project here : https://github.com/TomRvr/qt-planets-ci-cd\n\nProject setup\n\nThe first step is to create a GitHub repository, it will be a public repository as they offer access to GitHub actions for free.\n\nThen I cloned this new empty repo locally, I added the example code and pushed it to GitHub.\n\nThe only thing we have to do to enable GitHub actions is to create the configuration file. From GitHub, I created a new file named windows_release.yml at the following path : /.github/workflows\n\nOne yaml file will correspond to one action, we can have one file per platform (windows, android…) to separate builds.\n\nWindows build\n\nHere, the goal is to build the app for windows and save the release to be able to download it and run it.\n\nThis is what the action file looks like :\n\nname: Windows Release\n\non:\n\npush:\n\nbranches:\n\n- 'master'\n\n- 'continuous-integration'\n\ntags:\n\n- 'v*'\n\npull_request:\n\nbranches:\n\n- 'master'\n\n- 'continuous-integration'\n\ndefaults:\n\nrun:\n\nshell: cmd\n\nenv:\n\nSOURCE_DIR: ${{ github.workspace }}\n\nQT_VERSION: 5.15.2\n\nARTIFACT: qt-planets-build.zip\n\njobs:\n\nbuild:\n\nruns-on: windows-2019\n\nsteps:\n\n- name: (1) Checkout repo\n\nuses: actions/checkout@v2\n\nwith:\n\nsubmodules: recursive\n\n- name: (2) Get all tags for correct version determination\n\nworking-directory: ${{ github.workspace }}\n\nrun: |\n\ngit fetch --all --tags -f\n\n- name: (3) Install Qt\n\nuses: jurplel/install-qt-action@v2\n\nwith:\n\nversion: ${{ env.QT_VERSION }}\n\nhost: windows\n\ntarget: desktop\n\narch: win64_msvc2019_64\n\ndir: ${{ runner.temp }}\n\nmodules: qtcharts qt3d\n\nsetup-python: false\n\n- name: (4) Download JOM\n\nuses: suisei-cn/actions-download-file@v1\n\nwith:\n\nurl: http://download.qt.io/official_releases/jom/jom.zip\n\ntarget: ${{ runner.temp }}\\\n\n- name: (5) Unzip JOM\n\nworking-directory: ${{ runner.temp }}\n\nrun: |\n\n7z x jom.zip -ojom\n\n- name: (6) Create build directory\n\nrun: mkdir ${{ runner.temp }}\\build\n\n- name: (7) Set up Visual Studio shell\n\nuses: egor-tensin/vs-shell@v2\n\nwith:\n\narch: x64\n\n- name: (8) Build\n\nworking-directory: ${{ runner.temp }}\\build\n\nrun: |\n\nqmake -r ${{ env.SOURCE_DIR }}\\planets-qml.pro\n\n${{ runner.temp }}\\jom\\jom -j2\n\ncd release\n\nwindeployqt --qmldir ${{ env.SOURCE_DIR }} planets-qml.exe --pdb --release --compiler-runtime\n\ncopy C:\\Windows\\System32\\concrt140.dll .\n\ncopy C:\\Windows\\System32\\vccorlib140.dll .\n\ncopy C:\\Windows\\System32\\msvcp140.dll .\n\ncopy C:\\Windows\\System32\\vcruntime140.dll .\n\n- name: (9) Zip build\n\nworking-directory: ${{ runner.temp }}\n\nrun: |\n\n7z a qt-planets-build.zip ${{ runner.temp }}\\build\\* -r\n\n- name: (10) Save build artifact\n\nuses: actions/upload-artifact@master\n\nwith:\n\nname: ${{ env.ARTIFACT }}\n\npath: ${{ runner.temp }}\\${{ env.ARTIFACT }}\n\nI will explain the main sections :\n\non : configures what will trigger the action to run. Here, any commit, push or pull request merge on the branches master and continuous-integration will start this action and run the associated jobs.\n\ndefaults : allows setting a default configuration that will be applied to all jobs. In this case, we want to use the Windows cmd shell in each jobs.\n\nenv : set some environment variables that we can use in the jobs\n\njobs : list of jobs where each one will have multiple steps\n\nFor the build stage, we tell that we want to run the following steps on a Windows virtual machine with the runs-on parameter.\n\nHere is a quick description of the role of each step :\n\n1 and 2 are responsible for cloning the repo and all the associated tags. The parameter uses allows us to use actions developed by GitHub or other people, see the repository for the checkout action.\n\n3 will install the Qt framework on the build machine with the version that we defined as an environment variable.\n\n4 and 5 install JOM which is a tool for parallel builds.\n\n6 simply creates a build directory where we will save the output of the build\n\n7 configures Microsoft Visual Studio compiler and environment variables\n\n8 will build the project and deploy all the required dependencies to the build folder\n\n9 is in charge of creating an archive with the build output\n\n10 uploads the archive so that we can find it on the GitHub action summary\n\nWhen we commit the action file on the continuous-integration branch, the action will start automatically, and we can find some details in the actions tab.\n\nThe actions tab will show every workflow that is finished or that is currently running.\n\nWe can have a summary of a workflow by clicking on it, we will find what triggered the actions to run, what jobs ran and what artifacts (outputs) the jobs produced.\n\nHere we can find the archive saved after the build succeeded, which is named qt-planets-build.zip. We can then download it, and we will find the application and all the dependencies inside. This folder is now portable, the application can be executed without anything else installed, and is ready for deployment on tests or production computers.\n\nIt’s possible to see detailed logs of each step by clicking on a job (build for example), this will be useful to debug failed jobs.\n\nConclusion\n\nWe now have an automated workflow that runs when we make changes to our project, it builds the app and create a release that we can then use to test the new version of our app. Every build will be made on the same OS version and with the same Qt version, this will reduce the risk of environment configuration mistakes.\n\nThe process will help a lot to detect changes that cause build error, which will improves the validation and release process in order to iterate faster.\n\nNext steps will be to add unit testing and code quality jobs to this workflow. In the future we might want to create workflows for other platforms such as android."
    }
}