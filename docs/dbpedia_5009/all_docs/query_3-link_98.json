{
    "id": "dbpedia_5009_3",
    "rank": 98,
    "data": {
        "url": "http://www.robert-puskas.info/2018/09/my-first-experience-with-qt.html",
        "read_more_link": "",
        "language": "en",
        "title": "My first experience with Qt (and a comparison of qmake and CMake project files)",
        "top_image": "http://www.robert-puskas.info/assets/images/Logo3.png",
        "meta_img": "http://www.robert-puskas.info/assets/images/Logo3.png",
        "images": [
            "http://www.robert-puskas.info/assets/images/programming/QtSampleApp-ImageViewer.png",
            "http://www.robert-puskas.info/assets/images/programming/QtSampleApp-Converter.png",
            "http://www.robert-puskas.info/assets/images/programming/QtSampleApp-GraphicsPrimitives.png",
            "http://www.robert-puskas.info/assets/images/programming/QtSampleApp-FolderView.png",
            "http://www.robert-puskas.info/assets/images/programming/QtSampleApp-RadioButtons.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/Logo3.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Dear Readers!\n\nIn this post Iâm sharing my first impressions about Qt, the cross-platform application framework and widget toolkit, which apparently can be deployed on Linux (also embedded), Windows, macOS, iOS, Android, QNX, Integrity, VxWorks and others, in which list we can see purely embedded platforms as well. In order to gain a bit of an overview about the framework, I created a couple of example applications with various widgets to see it in action. Before we go into that however, letâs see the working environment, with a bit of an emphasis on build tools.\n\nI used Qt Creator and as such qmake to provide me a welcome shortcut to creating small applications, so that I didnât need to do everything manually. Admittedly though, I seriously considered sticking with CMake at first, as I use it for other learning projects as well, and because Qt Creator does provide support for it. After playing around with CMake a bit though, it became clear, that Creatorâs support for CMake is not as advanced as it is for qmake (which is not surprising), so as mentioned before, I decided to use the defaults (qmake). Anyway, just to learn how to use CMake with Qt, I created a Qt-style Hello World project with both CMake and qmake to see how they differ from each other. The first example below is a CMakeLists.txt file I wrote myself, and the second one is a HelloWorld.pro generated by Qt Creator, where the latter I supplemented a bit (with c++ standard and build flags) to make the comparison full. This way both of them are equivalent from an end result perspective (these files will produce debug builds, so please keep that in mind):\n\nCMake\n\nqmake\n\nAn observant reader might immediately notice, that the CMake file does not have a HEADERS and FORMS list at all, and the RESOURCES is merged into SOURCES. This is because CMake simply assumes the existence of headers and ui files (with appropriate naming and #includes) and as such there is no need to mention them. Their existence is assumed, once the CMAKE_AUTOMOC, CMAKE_AUTOUIC and CMAKE_AUTORCC options have been turned ON, that is. As mentioned before though, I stuck with qmake for the most part, but I also did some random checks with the CMake file, and everything compiled well with it, once the COMPONENTS and SOURCES sections have been properly modified of course. For a good read on using CMake with Qt, please refer to the appropriate documentation.\n\nOK, letâs see some very simple Qt applications I created with the above tools and help of some online guides (aka. non of this is original):\n\nA simplistic image viewer, that is capable of opening images with the proper dialogue, and has some basic zooming features (The image is a snapshot from a âStargate: Atlantisâ episode)\n\nA very simplistic GUI frontend for ffmpeg\n\nA couple of modifiable graphics primitives\n\nA mini âfile managerâ. It can create and delete folders at the designated path\n\nDepending on the option chosen, a window appears with different underlying implementation\n\nThe fact that such simple apps could be created with relative ease tells a lot about the quality of the framework, which I found to be quite extensive. So extensive in fact, that it has a surrogate for most of the components of the C++ standard library, like containers, concurrency, datastreams, etc. Above these, it also has its own unique way of conveying information between objects, the signal-slot mechanism, which basically replaces the observer pattern and/or callbacks. This is achieved through some specifically written macros, which then are âexpanded by the preprocessor to declare several member functions that are implemented by the mocâ, to quote the official documentation, and where âmocâ stands for Meta-Object Compiler. A curious reader might have already asked at this point what is that CMAKE_AUTOMOC option in the CMake file above, well that is for turning on Qtâs moc.\n\nAnother phenomenon I observed was Qtâs attempt on avoiding the direct use of C++ for GUI related tasks if possible, whether it is achieved with with .ui files, which are literally XML files, or with using a declarative approach with QML2. Obviously, creating GUI with such tools makes life easier, so I understand Qtâs decision on this. What is even more interesting, is that only the direct use of C++ is avoided, but not itâs indirect use. As mentioned in the build tools section, one needs to enable some options in the CMake file (e.g. CMAKE_AUTOUIC), which are nothing but C++ code generation tools. After poking around in the project directories, I found the appropriate generated .cpp files, so these tools (seems to me) are a kind of an abstraction layer, and they are used to abstract an entire language away. Neat.\n\nRight now that is all the things I can think of, so it is time to finish this post. Obviously, I havenât used Qt in any serious way to be able to have a well founded opinion, but so far Iâm impressed, and hopefully, Iâll be able to dive in more deeply into this framework in the future.\n\nUntil that time, thanks for reading."
    }
}