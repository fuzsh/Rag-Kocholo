{
    "id": "dbpedia_5009_0",
    "rank": 20,
    "data": {
        "url": "https://www.linkedin.com/pulse/my-criticisms-qt-project-why-i-dont-use-anymore-benjamin-cottrell",
        "read_more_link": "",
        "language": "en",
        "title": "My Criticisms of the Qt Project, or, \"Why I use Qt less\"",
        "top_image": "https://media.licdn.com/dms/image/v2/C5612AQG9vMOkllpKeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1620873583230?e=2147483647&v=beta&t=d8RH2K398cyx34qE1-w-sZacN8v8Q3RfAor3H5LWfh4",
        "meta_img": "https://media.licdn.com/dms/image/v2/C5612AQG9vMOkllpKeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1620873583230?e=2147483647&v=beta&t=d8RH2K398cyx34qE1-w-sZacN8v8Q3RfAor3H5LWfh4",
        "images": [
            "https://media.licdn.com/dms/image/v2/C5612AQG9vMOkllpKeA/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1620873583230?e=2147483647&v=beta&t=d8RH2K398cyx34qE1-w-sZacN8v8Q3RfAor3H5LWfh4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Ben Cottrell"
        ],
        "publish_date": "2021-05-13T02:56:28+00:00",
        "summary": "",
        "meta_description": "What led me to use Qt I first got excited about Qt several years ago, when I was still in high school, but could not try it out at that time, because the offline download was several gigabytes in size, and internet bandwidth was not as cheap as it is now. So, I carried on writing code in C#, or usin",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/my-criticisms-qt-project-why-i-dont-use-anymore-benjamin-cottrell",
        "text": "What led me to use Qt\n\nI first got excited about Qt several years ago, when I was still in high school, but could not try it out at that time, because the offline download was several gigabytes in size, and internet bandwidth was not as cheap as it is now.\n\nSo, I carried on writing code in C#, or using the Windows API with C++.\n\nThen I hit a snag: what if I want to target many platforms with the same code [C++]? I tried Mono and it's bindings to GTK, but that didn't satisfy me.\n\nI did try out something low-level akin to the Windows API: SDL2, and wrote a simple hangman game that also used RapidXML to parse an XML file containing sprites and a list of words. Using those two libraries I could build a small self-contained application for Linux and Windows.\n\nI then later decided that I needed cross platform API's to create familiar user interface components, such as buttons, labels and text boxes. I went with Qt, because of it's event system and because it was superior to other toolkits like FLTK, because it looks half-decent, and wxWidgets which uses a message table.\n\nI began experimenting with the Qt Widgets module. A module, which isn't properly explained in Qt's documentation, is a collection of re-usable headers, libraries and other components grouped together under a \"module\".\n\nThen I wanted to develop mobile apps, and Qt Widgets was not recommended because it didn't have batch rendering and a scene graph which Qt Quick has. So, I went for Qt Quick, so then my application would have a C++ entry point which would, inside compiled-in resources, load the QML code with the QQuickApplication class instance.\n\nQt Quick consists of an application class which wraps all the necessary functionality for rendering and extending the QML engine through C++. I wrote a mobile app for Android, called File Manager, and this uses Qt Quick: https://bitbucket.org/edition/fileexplorer/src/master/.\n\nWhat led me not to use Qt\n\nFragmented Licensing of Components: They sell commercial licenses to make money, but companies like Felgo make derivative products and don't give back to Qt because they are not obligated to.\n\nNegative user experience of Creator: Visual Studio and IntelliJ are professional IDE's because they are menu driven and feature rich. Creator's interface is deceptively simple.\n\nBulky re-distributables: while the total size of these is a fraction that Electron would take, it could be smaller. It should not un-reasonable for an app install size to be a few megabytes.\n\nReliance on Creator: While, in theory, you can use Qt through CMake modules in any other supporting IDE, like CLion, although you may still need extra tools for deployment and debugging, especially for Android.\n\nI can't change the colors of the scrollbars in Creator: This drawback is frustrating, so when using a dark color style, the scrollbars are barely visible.\n\nMass deprecation of useful modules in Qt 6: Well, at least for the initial release of Qt 6. There were so many modules gone in the initial release including Android Extras, which my File Explorer app uses.\n\nNone or Improper GTK theme integration on Linux: There exists a plugin called Kvantum to mimic GTK themes, but this doesn't work with Creator.\n\nWhat I'm using Instead for Android\n\nFor Android, I'm using a mix of C++ and Java, and it's not so bad; the performance is great, startup time takes milliseconds and, importantly, the install size is small.\n\nI'm working on an app that uses OpenGL, so I can test the graphics on my desktop machine running Linux and XOrg, and it appears the same as it would on my phone or tablet.\n\nClosing Remarks\n\nThe Qt project needs to consider and resolve my criticisms. It's too big, the licensing is really confusing, and we either need to see improvements in the IDE or see tools integrated with an existing one, such as IntelliJ IDEA."
    }
}