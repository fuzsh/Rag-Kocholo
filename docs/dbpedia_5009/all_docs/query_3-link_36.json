{
    "id": "dbpedia_5009_3",
    "rank": 36,
    "data": {
        "url": "https://www.sitepoint.com/developing-cross-platform-applications-qt/",
        "read_more_link": "",
        "language": "en",
        "title": "Developing Cross Platform Applications with Qt â SitePoint",
        "top_image": "https://www.sitepoint.com/favicons/32x32.png",
        "meta_img": "https://www.sitepoint.com/favicons/32x32.png",
        "images": [
            "https://uploads.sitepoint.com/wp-content/uploads/2015/05/1432813633pic_enhached-96x96.jpg",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416910922qtcrea.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416910954opton11.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416910985conf.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416911015hh.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416911043kitii.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416911068pl.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416911096Untitled.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2014/11/1416911128ssdemo.png",
            "https://uploads.sitepoint.com/wp-content/uploads/2015/05/1432813633pic_enhached-96x96.jpg",
            "https://cdn.sanity.io/images/708bnrs8/production/56eefa864f8139d1f9340235a77b6e7fdcf7ed52-282x352.png?w=282&h=352&auto=format",
            "https://cdn.sanity.io/images/708bnrs8/production/56eefa864f8139d1f9340235a77b6e7fdcf7ed52-282x352.png?w=282&h=352&auto=format",
            "https://uploads.sitepoint.com/wp-content/uploads/2016/05/1469250204python-300x200.jpg",
            "https://uploads.sitepoint.com/wp-content/uploads/2023/08/1692781397fallback.svg",
            "https://uploads.sitepoint.com/wp-content/uploads/2017/04/1493387491goodbye-java-300x163.jpg",
            "https://uploads.sitepoint.com/wp-content/uploads/2017/12/1513562687user-journey-mapping-300x179.jpg",
            "https://uploads.sitepoint.com/wp-content/uploads/2023/08/1692781397fallback.svg",
            "https://uploads.sitepoint.com/wp-content/uploads/2023/08/1692781397fallback.svg",
            "https://uploads.sitepoint.com/wp-content/uploads/2023/08/1692781397fallback.svg",
            "https://uploads.sitepoint.com/wp-content/uploads/2023/08/1692781397fallback.svg",
            "https://www.facebook.com/tr?id=721455246308784&ev=PageView&noscript=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Jay Raj"
        ],
        "publish_date": "2014-11-25T19:30:14+00:00",
        "summary": "",
        "meta_description": "Qt has been with us for some time, but it still offers a lot of easy options for cross platform app development. Jay Raj takes a look.",
        "meta_lang": "",
        "meta_favicon": "/favicons/48x48.png",
        "meta_site_name": "",
        "canonical_link": "https://www.sitepoint.com/developing-cross-platform-applications-qt/",
        "text": "Qt is a cross platform application development framework with a long history and now maintained by the Qt Project. It enables developers to create applications and UIs for desktop, embedded and mobile operating systems. It provides a GUI (Graphical User Interface) for ease of development and allows creation of hybrid applications. Applications can be developed using C++ or the QML language, a JavaScript like language.\n\nIn this tutorial, weâll get started with Qt framework and create a beginnerâs application.\n\nSource code from this tutorial is available on GitHub.\n\nSetting up Qt\n\nTo get started with Qt, download the Qt installer for your operating system from the download page and run it. You can find more details related to installing Qt on various platforms in the official docs.\n\nOnce the installation is complete, open the application and here is how it should look:\n\nConfigure Qt for Android Development\n\nTo get started with developing Android applications or widgets using Qt, we need to configure a few things first. Open the Tools -> Options (Application Menu -> Preferences on Mac) menu and you should see the screen below.\n\nFrom the left hand side menu, select Android and configure the required paths to JDK location, Android SDK location, Android NDK location (you may need to download this) and Ant executable.\n\nWhat weâll be creating\n\nIn this tutorial weâll create a simple calculator for Android. It will support addition, subtraction, multiplication and division.\n\nGetting started\n\nFrom the Qt Creator, open the File -> New File or Project menu item. From the window that opens, select an Applications project and then Qt Widgets Application as shown below:\n\nClick Chooseâ¦ to proceed and on the next screen, name your widget as CalWidget and click next. On the next screen, select the Android kit and proceed (On some OSs, the ânextâ button may be âcontinueâ).\n\nNext youâll see the class information details screen. Rename the Class name to CalWidget. Click next to configure version control which is not required at the moment. Click Next and then Finish to create the project structure. Here is how the project structure should look now:\n\nSome of the files we should see in the project are calwidget.h, calwidget.cpp, main.cpp and calwidget.ui. All these files already have some boiler plate code. First, weâll create our UI and then return to these files to add our required functionality.\n\nCreating the UI\n\nQt Creator provides an interface where we can drag and drop controls on to the screen and create our UI. Double click on the calwidget.ui file (inside the Forms folder) and it will open up a screen with controls. Here is how it should look:\n\nFrom the list of controls on the left hand side, try dragging and dropping controls onto the widget screen. Weâll need an input text control, label control and button control to create our UI. So drag and drop several Push Button, Label andLine Edit controls onto the widget screen to create a screen as shown:\n\nTo run the widget press Ctrl/Cmd+R and you should be able to see the widget running in the emulator.\n\nIf you get errors regarding missing button functions when building, Qt seems to hold on to old object names from the last build if you have renamed them. Open Headers -> calwidget.h and delete their references.\n\nImplementing functionality\n\nNext weâll try to read data from the input text boxes and display the result based on the operation clicked.\n\nTo attach a click event to the push buttons, right click on the button and select go to slot, from the signals listed select the clicked signal. As you do, click event functions like below are generated in calwidget.cpp:\n\nvoid CalWidget::on_btnAdd_clicked() { }\n\nWhen the operation button is clicked, we need to read the text value from the input text boxes. To access the elements in the UI, weâll make use of the ui variable declared above. So the code to access any ui element by id is as follows:\n\nui->(*elementId*)->text()\n\nInside the add button click, read the input text box values, sum it and display the result in the lblResult label. Here is my add button click code:\n\nvoid CalWidget::on_btnAdd_clicked() { int input1,input2,result; input1 = ui->txtNum1->text().toInt(); input2 = ui->txtNum2->text().toInt(); result = input1+input2; QString qString = QString::number(result); ui->lblResult->setText(qString); }\n\nSave your code and press Ctrl/Cmd+R to run the code. Input values into the text boxes, click Add and you should be able to see the output.\n\nHere is the code for all the four click events :\n\nvoid CalWidget::on_btnAdd_clicked() { int input1,input2,result; input1 = ui->txtNum1->text().toInt(); input2 = ui->txtNum2->text().toInt(); result = input1+input2; QString qString = QString::number(result); ui->lblResult->setText(qString); } void CalWidget::on_btnSub_clicked() { int input1,input2,result; input1 = ui->txtNum1->text().toInt(); input2 = ui->txtNum2->text().toInt(); result = input1-input2; QString qString = QString::number(result); ui->lblResult->setText(qString); } void CalWidget::on_btnMul_clicked() { int input1,input2,result; input1 = ui->txtNum1->text().toInt(); input2 = ui->txtNum2->text().toInt(); result = input1*input2; QString qString = QString::number(result); ui->lblResult->setText(qString); } void CalWidget::on_btnDiv_clicked() { int input1,input2,result; input1 = ui->txtNum1->text().toInt(); input2 = ui->txtNum2->text().toInt(); result = input1/input2; QString qString = QString::number(result); ui->lblResult->setText(qString); }\n\nTry running the app and check the output for all the implemented operations.\n\nNext, weâll add validation to our code to check for empty and non numeric values. An approach for checking validation is using QString. It provides certain built in libraries which makes validations easier. Instead of reading the input text values into integer variables, weâll use QString variables. QString has an inbuilt function called isEmpty which we can use to check for empty values. To validate for both non numeric values and empty values, weâll use the toInt() and toFloat() functions. Both the functions return 0 on trying to convert non-numeric strings.\n\nHere is the modified code with validations included:\n\nvoid CalWidget::on_btnAdd_clicked() { QString input1,input2; int result; QString qString = NULL; input1 = ui->txtNum1->text(); input2 = ui->txtNum2->text(); int isNumber1 = input1.toInt(); int isNumber2 = input2.toInt(); if(isNumber1 && isNumber2){ result = input1.toInt()+input2.toInt(); qString = QString::number(result); ui->lblResult->setText(qString); } else{ qString = QString::fromStdString(\"Enter Valid Numbers\"); ui->lblResult->setText(qString); } } void CalWidget::on_btnSub_clicked() { QString input1,input2; int result; QString qString = NULL; input1 = ui->txtNum1->text(); input2 = ui->txtNum2->text(); int isNumber1 = input1.toInt(); int isNumber2 = input2.toInt(); if(isNumber1 && isNumber2){ result = input1.toInt()-input2.toInt(); qString = QString::number(result); ui->lblResult->setText(qString); } else{ qString = QString::fromStdString(\"Enter Valid Numbers\"); ui->lblResult->setText(qString); } } void CalWidget::on_btnMul_clicked() { QString input1,input2; int result; QString qString = NULL; input1 = ui->txtNum1->text(); input2 = ui->txtNum2->text(); int isNumber1 = input1.toInt(); int isNumber2 = input2.toInt(); if(isNumber1 && isNumber2){ result = input1.toInt()*input2.toInt(); qString = QString::number(result); ui->lblResult->setText(qString); } else{ qString = QString::fromStdString(\"Enter Valid Numbers\"); ui->lblResult->setText(qString); } } void CalWidget::on_btnDiv_clicked() { QString input1,input2; float result; QString qString = NULL; input1 = ui->txtNum1->text(); input2 = ui->txtNum2->text(); float isNumber1 = input1.toFloat(); float isNumber2 = input2.toFloat(); if(isNumber1 && isNumber2){ result = input1.toFloat() / input2.toFloat(); qString = QString::number(result); ui->lblResult->setText(qString); } else{ qString = QString::fromStdString(\"Enter Valid Numbers\"); ui->lblResult->setText(qString); } }\n\nConclusion\n\nIn this tutorial, we looked at how to get started with Qt by creating a simple application for the android platform. We only used some basic features of Qt, for in-depth information on Qt and its features, have a look at their official docs.\n\nWould you use Qt? Do you feel it offers any advantages over other cross platform development options?\n\nFrequently Asked Questions (FAQs) about Cross-Platform Applications with Qt"
    }
}