{
    "id": "dbpedia_5009_0",
    "rank": 87,
    "data": {
        "url": "https://visualgdb.com/tutorials/android/qt/",
        "read_more_link": "",
        "language": "en",
        "title": "Developing Qt Projects for Android with VisualGDB – VisualGDB Tutorials",
        "top_image": "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/01-androidsettings.png",
        "meta_img": "",
        "images": [
            "https://sysprogs.com/img/logo_b&w.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/01-androidsettings.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/02-qtsettings.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/03-newqt.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/04-newqtname.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/05-androidkit.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/06-newform.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/08-projectmade.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/09-button.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/10-slot.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/11-clicked.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/13-build.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/14-buildsettings.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/15-newcustom.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/16-custom.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/19-qmakecmd.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/17-newsequence.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/18-newcustom.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/21-newenv.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/20-addenv.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/22-env.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/23-newqmakecmd.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/24-makestep.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/25-buildcmd.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/26a-originstallcmd.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/26-installcmd.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/27-antcmd.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/29-origmakeclean.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/28-makeclean.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/30-wizfinish.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/42-rebuild.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/31-apkdebug.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/33-apkdebug.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/34-deploying.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/35-debugging.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/37-listsources.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/39-sources.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/40-breakpoint.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/36-app.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/android/qt/41-breakpointhit.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-02-04T17:39:32-08:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://visualgdb.com/tutorials/android/qt/",
        "text": "Developing Qt Projects for Android with VisualGDB\n\nThis tutorial shows how to debug and build Qt 5.1 projects for Android.\n\nBefore we begin, ensure that VisualGDB is installed.\n\nIn this tutorial we will create a Qt widget project for Android in Qt Creator and then build and debug the APK file from Visual Studio using VisualGDB. We use Qt Creator to create the project as the initial project creation sets up Qt support libraries.\n\nStart Visual Studio and go to Android->Setup SDK/NDK locations. Set the paths to existing Android tools there or install them.\n\nDownload and install Qt Creator for Android meant for a Windows host.\n\nStart Qt Creator. Go to Tools->Options->Android. Set the Android tool paths there to be the same as in VisualGDB. Press on OK.\n\nGo to File->New File or Project. Choose Qt GUI Application.\n\nChoose a name and location for the project. Press on ‘Next’.\n\nUncheck the Desktop kit and select an Android kit instead. Here we choose arm, choose “Android for x86” as well or instead if you intend to support Android for Intel CPUs as well. Note that arm here actually means armeabi-v7a as Qt 5 is not supported for regular armeabi. That means for running and debugging the app, you will also need a armeabi-v7a device.\n\nThe default settings are fine for the rest of the project settings. Choose ‘Next’ and then ‘Finish’ on the next page.\n\nWe have now made a Qt5 project for Android. Currently the form is empty, let’s add a button to have something to see and test when the app is run. Open the ui file.\n\nDrag and drop a simple push button from the toolbox. We also change its text to “Test”.\n\nNext we add a clicked handler to it. Right-click on the placed button choose ‘Go to slot’. Select ‘clicked’ from the slots. Now a clicked handler has been made and we are ready to build the project.\n\nBoth build and run the project. This is important as currently the build step of copying the Qt libraries is only done by Qt Creator and not an external tool. Once the project has been run by QtCreator, it can be built by other tools as well. In case running the project crashes or does not succeed, it still may have been enough to copy the libraries. In that case, check inside the “android/bin” subfolder in the project folder, it must contain the Qtandroid-debug.apk file before we can proceed.\n\nOpen the ‘Projects’ tab, we will use these settings to create a project with VisualGDB.\n\nStart Visual Studio. Go to File->New->Project. Choose the ‘Custom Project Wizard’, choose a name and location and press on ‘OK’.\n\nCustom projects allow specifying arbitrary commands for building and debugging. We start by specifying the actions before building. We will use the main make command as the main build command and arrange all other commands before or after.\n\nThe first command is the qmake command. We base it on the qmake command from QtCreator. Add a new command to the sequence. Create a new custom command line. Copy the details of the command from Qt Creator. We also need to add additional environment variables to the command. Click to edit additional environment. Then click on ‘Add’. Look in the variables list from Qt Creator for variables to add. Most do not need to be added as they are system variables. We only add the following variables. The ready command looks as follows.\n\nNext add the build command. Fill in the command details based on the make command from QtCreator. The ready command looks as follows.\n\nNow we add a post build command based on the deployment install command from Qt Creator. This command will copy the built library from the Qt project’s build directory to the android subdirectory.\n\nFinally we add the last command to post build actions. This will build the Android app.\n\nWe also add a clean command based on the clean command from Qt Creator.\n\nAll of the build and clean commands now look as follows. Click on ‘Finish’ to complete the wizard.\n\nNow we have successfully created a project in VisualGDB building the Qt Creator created Android project. Rebuild the project to test the build commands.\n\nWe will use the Custom APK debug feature to debug the project. Go to Android->Debug custom APK file. Choose the Qtandroid-debug.apk file and choose a name for the debug preset. Press on ‘Debug’.\n\nNow the app will be automatically deployed and started on the connected Android device. Finally the debug session is started. Pause execution and use the ‘Show a list of all source files’ function. Open the mainwindow.cpp file. Set a breakpoint in the clicked function and continue execution.\n\nGo to the app running on the device and click on the button. Go back to Visual Studio. The breakpoint we set earlier has been hit now."
    }
}