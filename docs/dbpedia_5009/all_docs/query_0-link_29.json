{
    "id": "dbpedia_5009_0",
    "rank": 29,
    "data": {
        "url": "https://wiki.archlinux.org/title/Qt",
        "read_more_link": "",
        "language": "en",
        "title": "ArchWiki",
        "top_image": "https://wiki.archlinux.org/favicon.ico",
        "meta_img": "https://wiki.archlinux.org/favicon.ico",
        "images": [
            "https://wiki.archlinux.org/images/4/4e/View-refresh-red.svg",
            "https://wiki.archlinux.org/images/4/4e/View-refresh-red.svg",
            "https://wiki.archlinux.org/images/4/4e/View-refresh-red.svg",
            "https://wiki.archlinux.org/resources/assets/licenses/gnu-fdl.png",
            "https://wiki.archlinux.org/resources/assets/poweredby_mediawiki_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Qt is a cross-platform application and widget toolkit that uses standard C++ but makes extensive use of a special code generator (called the Meta Object Compiler, or moc) together with several macros to enrich the language. Some of its more important features include:\n\nRunning on the major desktop platforms and some of the mobile platforms.\n\nExtensive internationalization support.\n\nA complete library that provides SQL database access, XML parsing, thread management, network support, and a unified cross-platform application programming interface (API) for file handling.\n\nThe Qt framework is the basis of the KDE software community, as well as other important open source and proprietary applications such as VLC, VirtualBox, Mathematica and many others.\n\nInstallation\n\nQt 6.x and 5.x are available in the official repositories. Legacy versions of Qt (4.x and 3.x) are available from the AUR. They can be installed with the following packages:\n\nQt 6.x is available in the package, with documentation in the package.\n\nQt 5.x is available in the package, with documentation in the package.\n\nQt 4.x is available in the AUR package, with documentation in the AUR package.\n\nQt 3.x is available in the AUR package, without documentation package.\n\nDefault Qt toolkit\n\nBy installing AUR[broken link: package not found] you can make the Qt binaries in /usr/bin (e.g. qmake), which point to the Qt 5 versions by default (e.g. qmake-qt5), point to older versions of those tools (e.g. qmake-qt4 or qmake-qt3) instead.\n\nUsing environment variables\n\nTo define the default Qt toolkit, you can create QT_SELECT environment variable. For example, to use Qt n, set QT_SELECT=n.\n\nUsing configuration files\n\nYou can set the default Qt toolkit by creating a symlink ~/.config/qtchooser/default.conf to one of .conf files in /etc/xdg/qtchooser/ directory. For example, to set Qt 4 symlink /etc/xdg/qtchooser/4.conf to ~/.config/qtchooser/default.conf:\n\n$ ln -s /etc/xdg/qtchooser/4.conf ~/.config/qtchooser/default.conf\n\nConfiguration\n\nStyles in Qt 5\n\nQt 5 decides the style to use based on what desktop environment is used:\n\nIn KDE Plasma, it uses the actually selected Qt style. It can be configured using KDE System Settings (systemsettings), the settings can be found in Appearance > Application Style > Widget Style.\n\nIn Cinnamon, GNOME, MATE, LXDE, Xfce, it uses GTK (QGtkStyle).\n\nIn other desktop environments, it uses Fusion.\n\nTo force a specific style, you can set the QT_STYLE_OVERRIDE environment variable. Specifically, set it to gtk2 if you want to use the GTK theme (Note: you will need to install the Qt style plugins mention below to get the GTK style). Qt 5 applications also support the -style flag, which you can use to launch a Qt 5 application with a specific style.\n\nThe following styles are included in Qt 5: Fusion, Windows. Others can be installed separately:\n\nBreeze — Artwork, styles and assets for the Breeze visual style for the Plasma Desktop.\n\nhttps://invent.kde.org/plasma/breeze ||\n\nOxygen — KDE Oxygen style.\n\nhttps://invent.kde.org/plasma/oxygen ||\n\nLightly — Lightly is a fork of breeze theme style that aims to be visually modern and minimalistic.\n\nhttps://github.com/Luwx/Lightly || AUR[broken link: package not found]\n\nQtCurve — A configurable set of widget styles for KDE and Gtk.\n\nhttps://invent.kde.org/system/qtcurve || [broken link: package not found]\n\nAdwaita-Qt — A style to bend Qt applications to look like they belong into GNOME Shell.\n\nhttps://github.com/MartinBriza/adwaita-qt || AUR\n\nQt style plugins — Additional style plugins for Qt 5, including GTK, Cleanlooks, Motif, Plastique.\n\nhttps://code.qt.io/cgit/qt/qtstyleplugins.git || AUR\n\nKvantum — customizable SVG-based theme engine with a variety of built-in styles, including imitations of some popular GTK themes such as Adapta, Arc, Ambiance\n\nhttps://github.com/tsujan/Kvantum/tree/master/Kvantum ||\n\nStyles in Qt 4\n\nQt 4 application will try to mimic the behavior of the desktop environment they are running on, unless they run into some problems or hard-coded settings.\n\nIn KDE Plasma, it uses the actually selected Qt style. It can be configured using KDE System Settings (systemsettings), the settings can be found in Appearance > Application Style > Widget Style.\n\nIn Cinnamon, GNOME, Xfce, it uses GTK (QGtkStyle).\n\nIn other desktop environments, it uses Windows.\n\nFor those who want to change the look and feel of Qt 4 applications, the Qt Configuration (qtconfig-qt4) GUI tool is provided by the AUR package. It offers a simple interface to configure the appearance of Qt 4 applications including style, colors, fonts and some further options.\n\nNote: If you use GTK style, then color and font settings will be ignored, and inherited from GTK 2.\n\nQt keeps all its configuration information in /etc/xdg/Trolltech.conf (system-wide) or ~/.config/Trolltech.conf (user-specific). The file is rather difficult to navigate because it contains a lot of information not related to appearance, but for any changes you can just add to the end of the file and overwrite any previous values (make sure to add your modification under the [Qt] header).\n\nFor example, to change the theme to QtCurve, add:\n\n~/.config/Trolltech.conf\n\n... [Qt] style=QtCurve\n\nThe following styles are included in Qt 4: CDE, Cleanlooks, GTK, Motif, Plastique, Windows. Others can be installed separately:\n\nAdwaita-Qt — A style to bend Qt applications to look like they belong into GNOME Shell.\n\nhttps://github.com/MartinBriza/adwaita-qt || AUR\n\nQt Style Sheets\n\nAn interesting way of customizing the look and feel of a Qt application is using Style Sheets, which are just simple CSS files. Using Style Sheets, one can modify the appearance of every widget in the application.\n\nTo run an application with a different style just execute:\n\n$ qt_application -stylesheet style.qss\n\nFor more information on Qt Style Sheets see the official documentation or other tutorials. As an example Style Sheet see this Dolphin modification.\n\nGTK and Qt\n\nIf you have GTK and Qt applications, their looks might not exactly blend in very well. If you wish to make your GTK styles match your Qt styles please read Uniform look for Qt and GTK applications.\n\nConfiguration of Qt 5/6 applications under environments other than KDE Plasma\n\nUnlike Qt 4, Qt 5 does not ship a qtconfig utility to configure fonts, icons or styles. Instead, it will try to use the settings from the running desktop environment. In KDE Plasma or GNOME this works well, but in other less popular desktop environments or window managers it can lead to missing icons in Qt 5 applications. One way to solve this is to fake the running desktop environment by setting XDG_CURRENT_DESKTOP=KDE or GNOME, and then using the corresponding configuration application to set the desired icon set.\n\nAnother solution is provided by the / packages, which provide a QPA independent of the desktop environment and a configuration utility. After installing package, run qt5ct/qt6ct to set an icon theme, and set the environment variable QT_QPA_PLATFORMTHEME=qt5ct:qt6ct so that the settings are picked up by Qt applications. Alternatively, use --platformtheme qt5ct as argument to the Qt 5 application.\n\nAUR provides a patched qt5ct with better integration to KDE applications, including KDE QML applications.\n\nIf the errors below are received, and some icons still do not appear in some of the applications, install and :\n\nIcon theme \"oxygen\" not found. Icon theme \"oxygen\" not found. Error: standard icon theme \"oxygen\" not found!\n\nDevelopment\n\nSupported platforms\n\nQt supports most platforms that are available today, even some of the more obscure ones, with more ports appearing every once in a while. For a more complete list see the Qt Wikipedia article.\n\nAndroid\n\nNote: Qt Creator 4.12 or later can set up the SDK Tools, NDK, and essential packages automatically. For more information, see Qt Creator: Specifying Android Device Settings\n\nFirst of all, you need an Android SDK and NDK from AUR or using Android Studio.\n\nSDK requires OpenJDK too. Diffenent Qt versions have different version requirements, check here for detail.\n\nNext you are going to need Qt 5 for Android. You can install it from AUR as described below or build it yourself, you can find build instructions on Qt wiki page.\n\nIn case of problems you may want to visit known issues.\n\nAUR[broken link: package not found] - armeabi-v7a\n\nAUR[broken link: package not found] - aarch64\n\nAUR[broken link: package not found] - x86\n\nAUR[broken link: package not found] - x86_64\n\nAlternatively, you can use the official Qt installer.\n\nThe following are official Qt tools:\n\nQt Creator — A cross-platform IDE tailored for Qt that supports all of its features.\n\nhttps://doc.qt.io/qtcreator/ ||\n\nQt Linguist — A set of tools that speed the translation and internationalization of Qt applications.\n\nhttps://doc.qt.io/qt-5/qtlinguist-index.html || Qt 5: , Qt 4: AUR\n\nQt Assistant — A configurable and redistributable documentation reader for Qt qch files.\n\nhttps://doc.qt.io/qt-5/qtassistant-index.html || Qt 5: , Qt 4: AUR\n\nQt Designer — A powerful cross-platform GUI layout and forms builder for Qt widgets.\n\nhttps://doc.qt.io/qt-5/qtdesigner-manual.html || Qt 5: , Qt 4: AUR\n\nQt Quick Designer — A visual editor for QML files which supports WYSIWYG. It allows you to rapidly design and build Qt Quick applications and components from scratch.\n\nhttps://doc.qt.io/qtcreator/creator-qtquickdesigner-plugin.html ||\n\nqmlscene — A tool for loading QML documents that makes it easy to quickly develop and debug QML applications.\n\nhttps://doc.qt.io/qt-5/qtquick-qmlscene.html || Qt 5: , Qt 4 QML Viewer: AUR\n\nqmake — A tool that helps simplify the build process for development project across different platforms, similar to cmake, but with fewer options and tailored for Qt applications.\n\nhttps://doc.qt.io/qt-5/qmake-manual.html || Qt 5: , Qt 4: AUR\n\nuic — A tool that reads *.ui XML files and generates the corresponding C++ files.\n\nhttps://doc.qt.io/qt-5/uic.html || Qt 5: , Qt 4: AUR\n\nrcc — A tool that is used to embed resources (such as pictures) into a Qt application during the build process. It works by generating a C++ source file containing data specified in a Qt resource (.qrc) file.\n\nhttps://doc.qt.io/qt-5/rcc.html || Qt 5: , Qt 4: AUR\n\nmoc — A tool that handles Qt's C++ extensions (the signals and slots mechanism, the run-time type information, and the dynamic property system, etc.).\n\nhttps://doc.qt.io/qt-5/moc.html || Qt 5: , Qt 4: AUR\n\nBindings\n\nQt has bindings for all of the more popular languages, see https://wiki.qt.io/Language_Bindings for a full list.\n\nThe following examples display a small 'Hello world!' message in a window.\n\nC++\n\nPackage:\n\nWebsite: https://www.qt.io/developers/\n\nBuild: g++ $(pkg-config --cflags --libs Qt5Widgets) -fPIC -o hello hello.cpp\n\nRun with: ./hello\n\nhello.cpp\n\n#include <QApplication> #include <QLabel> int main(int argc, char **argv) { QApplication app(argc, argv); QLabel hello(\"Hello world!\"); hello.show(); return app.exec(); }\n\nQML\n\nPackage: .\n\nWebsite: https://doc.qt.io/qt-5/qtquick-qmlscene.html\n\nRun with: qmlscene hello.qml\n\nhello.qml\n\nimport QtQuick 2.3 Rectangle { id: page width: 400; height: 100 color: \"lightgray\" Text { id: helloText text: \"Hello world!\" anchors.horizontalCenter: page.horizontalCenter anchors.verticalCenter: page.verticalCenter font.pointSize: 24; font.bold: true } }\n\nPython (PyQt)\n\nPackage: - Python 3 bindings\n\nWebsite: https://riverbankcomputing.com/software/pyqt/intro\n\nRun with: python hello-pyqt.py.\n\nhello-pyqt.py\n\nimport sys from PyQt5.QtWidgets import QApplication, QLabel app = QApplication(sys.argv) label = QLabel(\"Hello world!\") label.show() sys.exit(app.exec_())\n\nPython (PySide2)\n\nPackage: AUR\n\nWebsite: https://wiki.qt.io/Qt_for_Python\n\nRun with: python hello-pyside.py\n\nhello-pyside2.py\n\nimport sys from PySide2.QtWidgets import QApplication, QLabel app = QApplication(sys.argv) label = QLabel(\"Hello world!\") label.show() sys.exit(app.exec_())\n\nC#\n\nSee QtSharp.\n\nTroubleshooting\n\nDisable/Change Qt journal logging behaviour\n\nWhen using KDE and/or any other Qt desktop environment debug info may be frequently logged in the systemd journal.\n\nSet QT_LOGGING_RULES as environment variable to change this behaviour, e.g. to completely disable logging:\n\n/etc/environment\n\nQT_LOGGING_RULES='*=false'\n\nTo disable only debug logging, use QT_LOGGING_RULES=\"*.debug=false\".\n\nIcon theme is not applied\n\nSince Qt 5.1 SVG support has moved into a module. Since does not depend on it may happen that the is installed but not . This results in deceptive icon theme behaviour. Since SVG is not supported the icons are silently skipped and the icon theme may seem to be unused. Installing explicitly solves the problem.\n\nTheme not applied to root applications\n\nAs the user theme file ($XDG_CONFIG_HOME/Trolltech.conf), are not read by other accounts, the selected theme will not apply to X applications run as root. Possible solutions include:\n\nCreate symlinks, e.g\n\n# ln -s /home/[username]/.config/Trolltech.conf /etc/xdg/Trolltech.conf\n\nConfigure system-wide theme file: /etc/xdg/Trolltech.conf\n\nAdjust the theme as root\n\nQt 4 style not respected\n\nIf pure Qt 4 (non-KDE) applications do not stick with your selected Qt 4 style, then you will probably need to tell Qt 4 how to find KDE's styles (Oxygen, Phase etc.). You just need to set the environment variable QT_PLUGIN_PATH. E.g.:\n\nQT_PLUGIN_PATH=$HOME/.kde4/lib/kde4/plugins/:/usr/lib/kde4/plugins/\n\nqtconfig-qt4 should then be able to find your kde styles and everything should look nice again!\n\nAlternatively, you can symlink the Qt 4 styles directory to the KDE4 styles one:\n\n# ln -s /usr/lib/{kde,qt}4/plugins/styles/theme_name\n\nIf you get an error similar to\n\nQt FATAL: Cannot mix incompatible Qt library (version 0x50900) with this library (version 0x50901)\n\nthen you are most likely using a Qt 5 platform theme or style plugin which has not been recompiled against the latest version of Qt 5. These usually use Qt private headers which means they depend on an exact version of Qt and not just a matching soname. Figure out which theme/style you are using by checking the QT_STYLE_OVERRIDE and QT_QPA_PLATFORMTHEME environment variables, and rebuild the AUR package that provides it.\n\nQXcbConnection: XCB error: 2 (BadValue)\n\nCreate a file with such content [1]:\n\n/etc/xdg/QtProject/qtlogging.ini\n\n[Rules] qt.qpa.xcb.xcberror=false\n\nGraphics misaligned or scaled improperly\n\nSee HiDPI#Qt 5.\n\nDead keys not working for Qt apps\n\nIf you have set the right keyboard configuration and dead keys are working in GTK apps (or other widget toolkits) but not in KDE or any Qt apps, then you might not have the proper compose file loaded in your Xorg session.\n\nA way to confirm that is to:\n\nlaunch a Qt app with qt.xkb.compose.debug logging rule enabled, eg. launching : QT_LOGGING_RULES=qt.xkb.compose.debug=true qtqr\n\nthen try to write a character using a dead key, eg. <dead_circumflex> <e> for ê (LATIN SMALL LETTER E WITH CIRCUMFLEX)\n\nif you encounter qt.xkb.compose: failed to create compose table then you probably have this issue.\n\nTo fix this, first identify your locale. Then, if your locale doesn't have its own folder in /usr/share/X11/locale/, eg. fr_FR.UTF-8, look for it in the compose.dir mapping file to find the corresponding compose file (eg. en_US.UTF-8/Compose):\n\n$ grep fr_FR.UTF-8 /usr/share/X11/locale/compose.dir\n\nen_US.UTF-8/Compose fr_FR.UTF-8 en_US.UTF-8/Compose: fr_FR.UTF-8\n\nNow create or edit ~/.XCompose to include this compose file:\n\n~/.XCompose\n\ninclude \"%S/en_US.UTF-8/Compose\"\n\nFinally, restart your Qt app, dead keys should be working and qt.xkb.compose: failed to create compose table error should have disappeared whenever you debug with QT_LOGGING_RULES=qt.xkb.compose.debug=true.\n\nFile dialog are very slow and crash the related application\n\nThe ~/.config/QtProject.conf file has been filled with garbage data and weighs hundreds of MiB: remove it. [2][3]\n\nQt 6.7 under Wayland sometimes ignore input method\n\nQt introduced text-input-v3 for Wayland platform. However, the implementation is not perfect and may cause serious issues preventing the usage of input method.\n\nSet the following environment variable globally if your Wayland compositor supports text-input-v2:\n\n/etc/environment\n\nQT_WAYLAND_TEXT_INPUT_PROTOCOL=zwp_text_input_v2\n\nSee also"
    }
}