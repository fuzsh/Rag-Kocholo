{
    "id": "dbpedia_7275_0",
    "rank": 18,
    "data": {
        "url": "https://www.npmjs.com/package/my-ua-parser",
        "read_more_link": "",
        "language": "en",
        "title": "my-ua-parser",
        "top_image": "https://static-production.npmjs.com/338e4905a2684ca96e08c7780fc68412.png",
        "meta_img": "https://static-production.npmjs.com/338e4905a2684ca96e08c7780fc68412.png",
        "images": [
            "https://static-production.npmjs.com/255a118f56f5346b97e56325a1217a16.svg",
            "https://www.npmjs.com/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9jM2ZjNzM3MGJjMDk1MWZiYTk0NGI3YjhjYWM1YjljYz9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.2735RDAi_avZ7jDl8X5eYXkrSEO_pVfVGcD6dGYgrMg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "user-agent",
            "parser",
            "browser",
            "engine",
            "os",
            "device",
            "cpu",
            "jquery-plugin",
            "ecosystem:jquery",
            "ua-parser-js",
            "client-hints",
            "user-agent-detection",
            "device-detection",
            "platform-detection",
            "mobile-detection",
            "browser-detection",
            "architecture-detection"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-06-11T08:53:14.078000+00:00",
        "summary": "",
        "meta_description": "Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data. Supports browser & node.js environment. Latest version: 2.0.3, last published: 2 months ago. Start using my-ua-parser in your project by running `npm i my-ua-parser`. There are 3 other projects in the npm registry using my-ua-parser.",
        "meta_lang": "en",
        "meta_favicon": "https://static-production.npmjs.com/58a19602036db1daee0d7863c94673a4.png",
        "meta_site_name": "npm",
        "canonical_link": "https://www.npmjs.com/package/my-ua-parser",
        "text": "JavaScript library to detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data with relatively small footprint (~17KB minified, ~6KB gzipped) that can be used in node.js (server-side).\n\ntypeof user-agent \"string\".\n\ntypeof extensions \"array\".\n\nIn The Browser environment you dont need to pass the user-agent string to the function, you can just call the funtion and it should automatically get the string from the window.navigator.userAgent, but that is not the case in nodejs. The user-agent string must be passed in nodejs for the function to work. Usually you can find the user agent in: request.headers[\"user-agent\"].\n\nWhen you call UAParser with the new keyword UAParser will return a new instance with an empty result object, you have to call one of the available methods to get the information from the user-agent string. Like so:\n\nnew UAParser([uastring][,extensions])\n\nWhen you call UAParser without the new keyword, it will automatically call getResult() function and return the parsed results.\n\nUAParser([uastring][,extensions])\n\nreturns result object { ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }\n\nThe methods are self explanatory, here's a small overview on all the available methods:\n\ngetResult() - returns all function object calls, user-agent string, browser info, cpu, device, engine, os: { ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }.\n\ngetBrowser() - returns the browser name and version.\n\ngetDevice() - returns the device model, type, vendor.\n\ngetEngine() - returns the current browser engine name and version.\n\ngetOS() - returns the running operating system name and version.\n\ngetCPU() - returns CPU architectural design name.\n\ngetUA() - returns the user-agent string.\n\nsetUA(user-agent) - set a custom user-agent to be parsed.\n\ngetResult()\n\nreturns { ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }\n\ngetBrowser()\n\nreturns { name: '', version: '' }\n\ngetDevice()\n\nreturns { model: '', type: '', vendor: '' }\n\ngetEngine()\n\nreturns { name: '', version: '' }\n\ngetOS()\n\nreturns { name: '', version: '' }\n\ngetCPU()\n\nreturns { architecture: '' }\n\ngetUA()\n\nreturns UA string of current instance\n\nsetUA(uastring)\n\nset UA string to be parsed\n\nreturns current instance\n\nNote: Device information is not available in the NodeJS environment.\n\n$ npm install ua-parser-js\n\nAlthough written in vanilla js, this library will automatically detect if jQuery/Zepto is present and create $.ua object (with values based on its User-Agent) along with window.UAParser constructor. To get/set user-agent you can use: $.ua.get() / $.ua.set(uastring).\n\nUAParser([uastring,] extensions)\n\nFork and clone this repository\n\nMake some changes as required\n\nWrite unit test to showcase its functionality\n\nRun the test suites to make sure it's not breaking anything $ npm test\n\nThis library is a fork of ua-parser-js by Faisal Salman. The original library switched to a AGPL+commercial license, so this fork was created to keep the library under the MIT license.\n\nThis fork was done at commit.\n\nMIT License\n\nCopyright (c) 2024 Matteo Collina <hello@matteocollina.com> Copyright (c) 2012-2023 Faisal Salman <f@faisalman.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    }
}