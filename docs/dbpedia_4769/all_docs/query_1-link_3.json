{
    "id": "dbpedia_4769_1",
    "rank": 3,
    "data": {
        "url": "https://en.wikipedia.org/wiki/ALGOL",
        "read_more_link": "",
        "language": "en",
        "title": "Wikipedia",
        "top_image": "https://upload.wikimedia.org/wikipedia/commons/c/c8/1965_ALGOL-20_A_Language_Manual%2C_Fierst_et_al_-_cover.jpg",
        "meta_img": "https://upload.wikimedia.org/wikipedia/commons/c/c8/1965_ALGOL-20_A_Language_Manual%2C_Fierst_et_al_-_cover.jpg",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/1965_ALGOL-20_A_Language_Manual%2C_Fierst_et_al_-_cover.jpg/121px-1965_ALGOL-20_A_Language_Manual%2C_Fierst_et_al_-_cover.jpg",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Algol%26Fortran_family-by-Borkowski.svg/220px-Algol%26Fortran_family-by-Borkowski.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Flag_of_Germany.svg/23px-Flag_of_Germany.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Flag_of_the_Netherlands.svg/23px-Flag_of_the_Netherlands.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Flag_of_Denmark.svg/20px-Flag_of_Denmark.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/0/03/Flag_of_Italy.svg/23px-Flag_of_Italy.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/c/c3/Flag_of_France.svg/23px-Flag_of_France.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Flag_of_the_Netherlands.svg/23px-Flag_of_the_Netherlands.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Flag_of_Norway.svg/21px-Flag_of_Norway.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Flag_of_the_Soviet_Union.svg/23px-Flag_of_the_Soviet_Union.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3d/Flag_of_the_Estonian_Soviet_Socialist_Republic_%281953%E2%80%931990%29.svg/23px-Flag_of_the_Estonian_Soviet_Socialist_Republic_%281953%E2%80%931990%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/1/12/Flag_of_Poland.svg/23px-Flag_of_Poland.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Flag_of_Norway.svg/21px-Flag_of_Norway.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Flag_of_Germany.svg/23px-Flag_of_Germany.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Flag_of_the_People%27s_Republic_of_China.svg/23px-Flag_of_the_People%27s_Republic_of_China.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/44px-Wiki_letter_w_cropped.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2001-08-26T23:02:19+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/ALGOL",
        "text": "Family of programming languages\n\nThis article is about the programming language family. For other uses, see Algol (disambiguation).\n\nALGOLParadigmProcedural, imperative, structuredFamilyALGOLDesigned byBauer, Bottenbruch, Rutishauser, Samelson, Backus, Katz, Perlis, Wegstein, Naur, Vauquois, van Wijngaarden, Woodger, Green, McCarthyFirst appeared1958; 66 years ago ( )Typing disciplineStatic, strongScopeLexicalInfluencedMost subsequent imperative languages (including so-called ALGOL-like languages)\n\ne.g. PL/I, Simula, Pascal, C and Scheme\n\nALGOL ( ; short for \"Algorithmic Language\")[1] is a family of imperative computer programming languages originally developed in 1958. ALGOL heavily influenced many other languages and was the standard method for algorithm description used by the Association for Computing Machinery (ACM) in textbooks and academic sources for more than thirty years.[2]\n\nIn the sense that the syntax of most modern languages is \"Algol-like\",[3] it was arguably more influential than three other high-level programming languages among which it was roughly contemporary: FORTRAN, Lisp, and COBOL.[4] It was designed to avoid some of the perceived problems with FORTRAN and eventually gave rise to many other programming languages, including PL/I, Simula, BCPL, B, Pascal, Ada, and C.\n\nALGOL introduced code blocks and the begin...end pairs for delimiting them. It was also the first language implementing nested function definitions with lexical scope. Moreover, it was the first programming language which gave detailed attention to formal language definition and through the Algol 60 Report introduced Backus–Naur form, a principal formal grammar notation for language design.\n\nThere were three major specifications, named after the years they were first published:\n\nALGOL 58 – originally proposed to be called IAL, for International Algebraic Language.\n\nALGOL 60 – first implemented as X1 ALGOL 60 in 1961. Revised 1963.[5][6][7]\n\nALGOL 68 – introduced new elements including flexible arrays, slices, parallelism, operator identification. Revised 1973.[8]\n\nALGOL 68 is substantially different from ALGOL 60 and was not well received,[according to whom?] so reference to \"Algol\" is generally understood to mean ALGOL 60 and its dialects.[citation needed]\n\nHistory\n\n[edit]\n\nALGOL was developed jointly by a committee of European and American computer scientists in a meeting in 1958 at the Swiss Federal Institute of Technology in Zurich (cf. ALGOL 58).[9] It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax, syntaxes that permitted it to use different keyword names and conventions for decimal points (commas vs periods) for different languages.[citation needed]\n\nALGOL was used mostly by research computer scientists in the United States and in Europe; commercial applications were hindered by the absence of standard input/output facilities in its description, and the lack of interest in the language by large computer vendors (other than Burroughs Corporation).[citation needed] ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.[according to whom?]\n\nJohn Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed Backus–Naur form.[10]\n\nPeter Naur: \"As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960.\"[11]\n\nThe following people attended the meeting in Paris (from 1 to 16 January):[citation needed]\n\nFriedrich Ludwig Bauer, Peter Naur, Heinz Rutishauser, Klaus Samelson, Bernard Vauquois, Adriaan van Wijngaarden, and Michael Woodger (from Europe)\n\nJohn Warner Backus, Julien Green, Charles Katz, John McCarthy, Alan Jay Perlis, and Joseph Henry Wegstein (from the US).\n\nAlan Perlis gave a vivid description of the meeting: \"The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent.\"[This quote needs a citation]\n\nALGOL 60 inspired many languages that followed it. Tony Hoare remarked: \"Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors.\"[12] The Scheme programming language, a variant of Lisp that adopted the block structure and lexical scope of ALGOL, also adopted the wording \"Revised Report on the Algorithmic Language Scheme\" for its standards documents in homage to ALGOL.[13]\n\nALGOL and programming language research\n\n[edit]\n\nAs Peter Landin noted,[citation needed] ALGOL was the first language to combine seamlessly imperative effects with the (call-by-name) lambda calculus.[citation needed] Perhaps the most elegant formulation of the language is due to John C. Reynolds, and it best exhibits its syntactic and semantic purity.[according to whom?] Reynolds's idealized ALGOL also made a convincing methodologic argument regarding the suitability of local effects in the context of call-by-name languages, in contrast with the global effects used by call-by-value languages such as ML.[citation needed] The conceptual integrity of the language made it one of the main objects of semantic research, along with Programming Computable Functions (PCF) and ML.[citation needed]\n\nIAL implementations timeline\n\n[edit]\n\nTo date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.[14]\n\nName Year Author Country Description Target CPU ZMMD-implementation 1958 Friedrich L. Bauer, Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch Germany implementation of ALGOL 58 Z22\n\n(later Zuse's Z23 was delivered with an Algol 60 compiler)[15] X1 ALGOL 60 1960 August[16] Edsger W. Dijkstra and Jaap A. Zonneveld Netherlands First implementation of ALGOL 60[17] Electrologica X1 Elliott ALGOL 1960s C. A. R. Hoare UK Subject of the 1980 Turing Award Lecture[18] Elliott 803, Elliott 503, Elliott 4100 series JOVIAL 1960 Jules Schwartz US A DOD HOL prior to Ada Various (see article) Burroughs Algol\n\n(Several variants) 1961 Burroughs Corporation (with participation by Hoare, Dijkstra, and others) US Basis of the Burroughs (and now Unisys MCP based) computers Burroughs Large Systems and their midrange also. Case ALGOL 1961 Case Institute of Technology[19] US Simula was originally contracted as a simulation extension of the Case ALGOL UNIVAC 1107 GOGOL 1961 William M. McKeeman US For ODIN time-sharing system[20] PDP-1 RegneCentralen ALGOL 1961 Peter Naur, Jørn Jensen Denmark Implementation of full Algol 60 DASK at Regnecentralen Dartmouth ALGOL 30 1962 Thomas Eugene Kurtz et al. US LGP-30 USS 90 Algol 1962 L. Petrone Italy ALGOL 60 1962 Bernard Vauquois, Louis Bolliet[21] France Institut d'Informatique et Mathématiques Appliquées de Grenoble (IMAG) and Compagnie des Machines Bull Bull Gamma 60 Algol Translator 1962 G. van der Mey and W.L. van der Poel Netherlands Staatsbedrijf der Posterijen, Telegrafie en Telefonie ZEBRA Kidsgrove Algol 1963 F. G. Duncan UK English Electric Company KDF9 VALGOL 1963 Val Schorre US A test of the META II compiler compiler Whetstone 1964 Brian Randell and L. J. Russell UK Atomic Power Division of English Electric Company. Precursor to Ferranti Pegasus, National Physical Laboratories ACE and English Electric DEUCE implementations. English Electric Company KDF9 NU ALGOL 1965 Norway UNIVAC ALGEK 1965 Soviet Union АЛГЭК, based on ALGOL-60 and COBOL support, for economical tasks Minsk-22 ALGOL W 1966 Niklaus Wirth US Proposed successor to ALGOL 60 IBM System/360 MALGOL 1966 publ. A. Viil, M Kotli & M. Rakhendi, Estonian SSR Minsk-22 ALGAMS 1967 GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of Science Comecon Minsk-22, later ES EVM, BESM ALGOL/ZAM 1967 Poland Polish ZAM computer Simula 67 1967 Ole-Johan Dahl and Kristen Nygaard Norway Algol 60 with classes UNIVAC 1107 Triplex-ALGOL Karlsruhe 1967/1968 Karlsruhe, Germany ALGOL 60 (1963) with triplex numbers for interval arithmetic [22] Chinese Algol 1972 China Chinese characters, expressed via the Symbol system DG/L 1972 US DG Eclipse family of Computers S-algol 1979 Ron Morrison UK Addition of orthogonal datatypes with intended use as a teaching language PDP-11 with a subsequent implementation on the Java VM\n\nThe Burroughs dialects included special Bootstrapping dialects such as ESPOL and NEWP. The latter is still used for Unisys MCP system software.\n\nProperties\n\n[edit]\n\nALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (input/output) facilities.\n\nALGOL 60 allowed for two evaluation strategies for parameter passing: the common call-by-value, and call-by-name. Call-by-name has certain effects in contrast to call-by-reference. For example, without specifying the parameters as value or reference, it is impossible to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.[23] Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap is referenced, it is reevaluated. Say i := 1 and A[i] := 2, so every time swap is referenced it will return the other combination of the values ([1,2], [2,1], [1,2] and so on). A similar situation occurs with a random function passed as actual argument.\n\nCall-by-name is known by many compiler designers for the interesting \"thunks\" that are used to implement it. Donald Knuth devised the \"man or boy test\" to separate compilers that correctly implemented \"recursion and non-local references.\" This test contains an example of call-by-name.\n\nALGOL 68 was defined using a two-level grammar formalism invented by Adriaan van Wijngaarden and which bears his name. Van Wijngaarden grammars use a context-free grammar to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled \"semantics\" and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ad hoc code attached to the formal language parser.\n\nExamples and portability\n\n[edit]\n\nCode sample comparisons\n\n[edit]\n\nALGOL 60\n\n[edit]\n\n(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER'—quotation marks included—for integer. This is known as stropping.)\n\nprocedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k); value n, m; array a; integer n, m, i, k; real y; comment The absolute greatest element of the matrix a, of size n by m, is copied to y, and the subscripts of this element to i and k; begin integer p, q; y := 0; i := k := 1; for p := 1 step 1 until n do for q := 1 step 1 until m do if abs(a[p, q]) > y then begin y := abs(a[p, q]); i := p; k := q end end Absmax\n\nHere is an example of how to produce a table using Elliott 803 ALGOL.[24]\n\nFLOATING POINT ALGOL TEST' BEGIN REAL A,B,C,D' READ D' FOR A:= 0.0 STEP D UNTIL 6.3 DO BEGIN PRINT PUNCH(3),££L??' B := SIN(A)' C := COS(A)' PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C' END END'\n\nALGOL 68\n\n[edit]\n\nThe following code samples are ALGOL 68 versions of the above ALGOL 60 code samples.\n\nALGOL 68 implementations used ALGOL 60's approaches to stropping. In ALGOL 68's case tokens with the bold typeface are reserved words, types (modes) or operators.\n\nproc abs max = ([,]real a, ref real y, ref int i, k)real: comment The absolute greatest element of the matrix a, of size ⌈a by 2⌈a is transferred to y, and the subscripts of this element to i and k; comment begin real y := 0; i := ⌊a; k := 2⌊a; for p from ⌊a to ⌈a do for q from 2⌊a to 2⌈a do if abs a[p, q] > y then y := abs a[p, q]; i := p; k := q fi od od; y end # abs max #\n\nNote: lower (⌊) and upper (⌈) bounds of an array, and array slicing, are directly available to the programmer.\n\nfloating point algol68 test: ( real a,b,c,d; # printf – sends output to the file stand out. # # printf($p$); – selects a new page # printf(($pg$,\"Enter d:\")); read(d); for step from 0 while a:=step*d; a <= 2*pi do printf($l$); # $l$ - selects a new line. # b := sin(a); c := cos(a); printf(($z-d.6d$,a,b,c)) # formats output with 1 digit before and 6 after the decimal point. # od )\n\nTimeline: Hello world\n\n[edit]\n\nThe variations and lack of portability of the programs from one implementation to another is easily demonstrated by the classic hello world program.[citation needed]\n\nALGOL 58 (IAL)\n\n[edit]\n\nMain article: ALGOL 58\n\nALGOL 58 had no I/O facilities.\n\nALGOL 60 family\n\n[edit]\n\nMain article: ALGOL 60\n\nSince ALGOL 60 had no I/O facilities, there is no portable hello world program in ALGOL. The next three examples are in Burroughs Extended Algol. The first two direct output at the interactive terminal they are run on. The first uses a character array, similar to C. The language allows the array identifier to be used as a pointer to the array, and hence in a REPLACE statement.\n\nBEGIN FILE F(KIND=REMOTE); EBCDIC ARRAY E[0:11]; REPLACE E BY \"HELLO WORLD!\"; WRITE(F, *, E); END.\n\nA simpler program using an inline format:\n\nBEGIN FILE F(KIND=REMOTE); WRITE(F, <\"HELLO WORLD!\">); END.\n\nAn even simpler program using the Display statement. Note that its output would end up at the system console ('SPO'):\n\nBEGIN DISPLAY(\"HELLO WORLD!\") END.\n\nAn alternative example, using Elliott Algol I/O is as follows. Elliott Algol used different characters for \"open-string-quote\" and \"close-string-quote\", represented here by ‘ and ’ .\n\nprogramHiFolks; begin print‘Helloworld’ end;\n\nBelow is a version from Elliott 803 Algol (A104). The standard Elliott 803 used five-hole paper tape and thus only had upper case. The code lacked any quote characters so £ (UK Pound Sign) was used for open quote and ? (Question Mark) for close quote. Special sequences were placed in double quotes (e.g. ££L?? produced a new line on the teleprinter).\n\nHIFOLKS' BEGIN PRINT £HELLO WORLD£L??' END'\n\nThe ICT 1900 series Algol I/O version allowed input from paper tape or punched card. Paper tape 'full' mode allowed lower case. Output was to a line printer. The open and close quote characters were represented using '(' and ')' and spaces by %.[25]\n\n'BEGIN' WRITE TEXT('('HELLO%WORLD')'); 'END'\n\nALGOL 68\n\n[edit]\n\nMain article: ALGOL 68\n\nALGOL 68 code was published with reserved words typically in lowercase, but bolded or underlined.\n\nbegin printf(($gl$,\"Hello, world!\")) end\n\nIn the language of the \"Algol 68 Report\" the input/output facilities were collectively called the \"Transput\".\n\nTimeline of ALGOL special characters\n\n[edit]\n\nThe ALGOLs were conceived at a time when character sets were diverse and evolving rapidly; also, the ALGOLs were defined so that only uppercase letters were required.\n\n1960: IFIP – The Algol 60 language and report included several mathematical symbols which are available on modern computers and operating systems, but, unfortunately, were unsupported on most computing systems at the time. For instance: ×, ÷, ≤, ≥, ≠, ¬, ∨, ∧, ⊂, ≡, ␣ and ⏨.\n\n1961 September: ASCII – The ASCII character set, then in an early stage of development, had the \\ (Back slash) character added to it in order to support ALGOL's boolean operators /\\ and \\/.[26]\n\n1962: ALCOR – This character set included the unusual \"᛭\" runic cross[27] character for multiplication and the \"⏨\" Decimal Exponent Symbol[28] for floating point notation.[29][30][31]\n\n1964: GOST – The 1964 Soviet standard GOST 10859 allowed the encoding of 4-bit, 5-bit, 6-bit and 7-bit characters in ALGOL.[32]\n\n1968: The \"Algol 68 Report\" – used extant ALGOL characters, and further adopted →, ↓, ↑, □, ⌊, ⌈, ⎩, ⎧, ○, ⊥, and ¢ characters which can be found on the IBM 2741 keyboard with typeball (or golf ball) print heads inserted (such as the APL golf ball). These became available in the mid-1960s while ALGOL 68 was being drafted. The report was translated into Russian, German, French, and Bulgarian, and allowed programming in languages with larger character sets, e.g., Cyrillic alphabet of the Soviet BESM-4. All ALGOL's characters are also part of the Unicode standard and most of them are available in several popular fonts.\n\n2009 October: Unicode – The ⏨ (Decimal Exponent Symbol) for floating point notation was added to Unicode 5.2 for backward compatibility with historic Buran programme ALGOL software.[33]\n\nLegacy\n\n[edit]\n\nA significant contribution of the ALGOL 58 Report was to provide standard terms for programming concepts: statement, declaration, type, label, primary, block, and others.[34]\n\nSee also\n\n[edit]\n\nReferences\n\n[edit]\n\nFurther reading\n\n[edit]\n\nO'Hearn, Peter; Tennent, Robert D., eds. (1997). Algol-like Languages. Vol. 1. Cambridge, MA: Birkhauser. doi:10.1007/978-1-4612-4118-8. ISBN 9780817638801. S2CID 6273486. The first volume of a two volume set, that includes an introduction from Peter W. O’Hearn and Robert D. Tennent, a report on Algol 60 from Peter Naur and colleagues, four chapters from John C. Reynolds, and other chapters from Christopher Strachey, Matthias Felleisen, Stephen Weeks, Albert R. Meyer, Kurt Sieber, Vipin Swarup, Uday S. Reddy, and Evan Ireland.\n\nBaumann, Richard [in German]; Feliciano, Manuel; Bauer, Friedrich Ludwig; Samelson, Klaus (1964). Introduction to ALGOL–A Primer for the Non-Specialist, Emphasizing the Practical Uses of the Algorithmic Language. Automatic Computation. Englewood Cliffs, NJ: Prentice-Hall, Inc. ISBN 0134778286. LCCN 64-10740. ark:/13960/t6qz35p37 .\n\nRandell, Brian & L. J. Russell (1964). ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer. Academic Press. CiteSeerX 10.1.1.737.475. . On the design of the Whetstone Compiler, and one of the early published descriptions of implementing a compiler. For a related paper, see Brian Randell's Whetstone Algol Revisited Archived 27 February 2008 at the Wayback Machine, and The Whetstone KDF9 Algol Translator.\n\nDijkstra, E. W (1961), ALGOL 60 Translation: An ALGOL 60 Translator for the X1 and Making a Translator for ALGOL 60 (PDF), report MR 35/61, Amsterdam: Mathematisch Centrum, archived (PDF) from the original on 9 October 2022\n\nKruseman Aretz, Frans E.J., The Dijkstra–Zonneveld ALGOL 60 Compiler for the Electrologica X1 (PDF), Historical note SEN, 2, Amsterdam: Centrum voor Wiskunde en Informatica, archived (PDF) from the original on 9 October 2022\n\nGoos, Gerhard [in German] (7 August 2017). Geschichte der Deutschsprachigen Informatik - Programmiersprachen und Übersetzerbau [History of Informatics in German-Speaking Countries - Programming Languages and Compiler Design] (PDF) (in German). Karlsruhe, Germany: Fakultät für Informatik, Karlsruhe Institute of Technology. Archived (PDF) from the original on 19 May 2022 ."
    }
}