{
    "id": "dbpedia_4769_0",
    "rank": 85,
    "data": {
        "url": "https://www.slideserve.com/uzuri/algol-60",
        "read_more_link": "",
        "language": "en",
        "title": "ALGOL 60 PowerPoint Presentation, free download",
        "top_image": "https://cdn3.slideserve.com/5519119/algol-60-n.jpg",
        "meta_img": "https://cdn3.slideserve.com/5519119/algol-60-n.jpg",
        "images": [
            "https://www.slideserve.com/img/logo.svg",
            "https://cdn3.slideserve.com/5519119/algol-60-n.jpg",
            "https://www.slideserve.com/photo/32558.jpeg",
            "https://www.slideserve.com/img/output_cBjjdt.gif",
            "https://cdn0.slideserve.com/189017/csce-330-project-algol-68-dt.jpg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg",
            "https://www.slideserve.com/img/preload-bg.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-10-14T00:00:00",
        "summary": "",
        "meta_description": "ALGOL 60. Design by committee of computer scientists: Naur, Backus, Bauer, McCarthy, van Wijngaarden, Landin, etc. Influence later languages : PL/I, Pascal, Algol68, (C) Slideshow 5519119 by uzuri",
        "meta_lang": "en",
        "meta_favicon": "https://www.slideserve.com/img/favicon.ico",
        "meta_site_name": "SlideServe",
        "canonical_link": "https://www.slideserve.com/uzuri/algol-60",
        "text": "ALGOL 60 • Design by committee of computer scientists: Naur, Backus, Bauer, McCarthy, van Wijngaarden, Landin, etc. • Influence later languages : PL/I, Pascal, Algol68, (C) • Formal definition for syntax (rules for well-formed programs - BNF); English for semantics (assignment of meaning to program text)\n\nALGOL DESIGN GOALS • Close as possible to mathematical notation • Use for describing computing processes • publication language (fonts, spacing, subscripts, etc. • reference language (official, but informal, documentation of the language) • hardware representation (machine character sets, etc.) • Mechanically translatable\n\nALGOL ISSUES • Formal syntax • Control structures • Scope • lexical; (dynamic) • Visibility • block structuring • Lifetime • static (own); automatic • Type checking • except for procedure parameters • Parameter passing • call by name; call by value • Attempt at precise semantics but ambiguities raised\n\nCONTROL STRUCTURES • if-then-else without endif (dangling else) • Compound statement / nesting • Designational expressions and switches (yield labels) • for loop / while • values specified by re-evaluated expressions • for <variable> := for_list do • for_list ::= comma-separated list of elements • element ::= arithmetic expression • | A step B until C • | E while B\n\nBLOCKS ANDCOMPOUND STATEMENTS • Compound statement: group of statements that can stand for a single statement syntactically • Block: a compound statement containing new declarations\n\nWHAT'S IN A NAME? • A value? • A set of values? • A memory location? • A set of memory locations? • An essential decision that separate imperative from functional languages • And places strict requirements on symbol table design\n\nEXAMPLE:LEXICAL VS. DYNAMIC SCOPING a: begin integer m; procedure P; m := 1; b: begin integer m; * P end ** P end Lexical scoping occurs when the binding of a variable reference to a declaration is made by searching upward in the set of nested blocks within the program source code (compile-time or static binding) Dynamic scoping occurs when the binding of a variable reference to a declaration is made by searching upward in the set of nested contexts in the program execution environ- ment (runtime binding) dynamic lexical * b a ** a a Algol uses lexical scoping\n\nPARAMETER PASSING • Actual argument - an expression that appears within a procedure call. The expression may be simply a variable name {f(x + 3);} • Formal (dummy) argument - an identifier used within a procedure definition as a surrogate for the actual argument {f(int a) integer a; ...}\n\nA PROBLEM WITH CALL BY NAME procedure SWAP(x, y); real x, y; begin real t; t := x; x := y; y := t; end; i == 1; A[1] == 2; A[2] == 8; SWAP(i, A[i]) t := i; (t == 1) i := A[i]; (i == 2) A[i] := t; (A[2] == 1)\n\nAMBIGUITY: SIDE EFFECTS For example: to get4.5, first evaluate the denominator (g(a)) which yields2and has the side effect of settingato2 begin integer a; integer procedure f(x, y); value y, x; integer y, x; a := f := x + 1; integer procedure g(x); integer x; x := g := a + 2; a := 0; outreal(1, a + f(a, g(a)) / g(a)) end Then, evaluate the numerator, first the a argument (2), then the g(a) nested call (yielding 4 and setting a to 4)"
    }
}