{
    "id": "dbpedia_4769_0",
    "rank": 60,
    "data": {
        "url": "https://groups.google.com/g/comp.sys.unisys/c/5apvpaA2fZs",
        "read_more_link": "",
        "language": "en",
        "title": "History of preprocessing (Burroughs ALGOL)",
        "top_image": "https://www.gstatic.com/images/branding/product/1x/groups_32dp.png",
        "meta_img": "https://www.gstatic.com/images/branding/product/1x/groups_32dp.png",
        "images": [
            "https://fonts.gstatic.com/s/i/productlogos/groups/v9/web-48dp/logo_groups_color_1x_web_48dp.png",
            "https://lh3.googleusercontent.com/a-/ALV-UjXRZApY6RzMoxmScL8JyPrIAaMUeaGoWCzA8rgPVB-8ju0-IQ=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjUHVxB7pNa155b1X4YYHwq3FIEzbAj6SxbF0cIqBlQFr1itoN_J=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjVG6Lfcf8_osfNBlOwqgJZe1ygwgZj5pcex6H4145RinFF2pA=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXRZApY6RzMoxmScL8JyPrIAaMUeaGoWCzA8rgPVB-8ju0-IQ=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjVG6Lfcf8_osfNBlOwqgJZe1ygwgZj5pcex6H4145RinFF2pA=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXRZApY6RzMoxmScL8JyPrIAaMUeaGoWCzA8rgPVB-8ju0-IQ=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXPJ1oOuskU65TM81d-aJRkfEpk2kVc7HSEkuYu5qE9IJTsig=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjVG6Lfcf8_osfNBlOwqgJZe1ygwgZj5pcex6H4145RinFF2pA=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjWpU8QMS2MwscSIWoXfdMT2WeQwe31eK0_ULQab1OPcqrNobfzK=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjUdODn-IUBRAPEUjY9QVN1ZSu77rOjHuGSmLn6GLjIvPHgk1Q=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXhFI1Yxc4gZ_MpfrBCoG4d_K9FEtOPsdl7CU805uWzmqb3eQ=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjUHVxB7pNa155b1X4YYHwq3FIEzbAj6SxbF0cIqBlQFr1itoN_J=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXPJ1oOuskU65TM81d-aJRkfEpk2kVc7HSEkuYu5qE9IJTsig=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU9I5xUptKwKpUCBAc06sQei0dow4jRPl2mpQLFWv9-UKZexR4=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjV_ph_JOFZGUtPKG2QKn_z8U8HOkUgZwGY08Ni4AOaVn2W6gdFN=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjU4VfbV-3kNkditPkE4h85tAAv_ctgc2PJA2RUCVDbm1kXahA=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXalhc7t0HKax_8_Wi3I2X8eyWfTPYzsP1pzYTlQ-WMGdJN=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjVG6Lfcf8_osfNBlOwqgJZe1ygwgZj5pcex6H4145RinFF2pA=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXwCxgY4_iubJskF0XVPtvri1EZTT1O1O8dss3EGY6fWAXEO1eG=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXwCxgY4_iubJskF0XVPtvri1EZTT1O1O8dss3EGY6fWAXEO1eG=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjXwCxgY4_iubJskF0XVPtvri1EZTT1O1O8dss3EGY6fWAXEO1eG=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjWl0_Ae48d5ENPE0Up2A6DxdG7m50CpTITB7JLeHh11rCBXv0M=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjWl0_Ae48d5ENPE0Up2A6DxdG7m50CpTITB7JLeHh11rCBXv0M=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a-/ALV-UjWl0_Ae48d5ENPE0Up2A6DxdG7m50CpTITB7JLeHh11rCBXv0M=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c",
            "https://lh3.googleusercontent.com/a/default-user=s40-c"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "//www.gstatic.com/images/branding/product/1x/groups_32dp.png",
        "meta_site_name": "",
        "canonical_link": "https://groups.google.com/g/comp.sys.unisys/c/5apvpaA2fZs",
        "text": "î—“\n\nActually, you can do it now, and have been able to do so since about\n\n2000. I do it all the time, both at home, and not infrequently on an\n\nairplane -- compiling Algol at 35,000 feet.\n\nIt's not inexpensive -- $3000 (U.S. pricing), plus the cost of whatever\n\nPC/laptop you will be running it on. That may be a little much for the\n\noccasional hobbyist, but it's within reach if you are serious enough,\n\nand certainly if you are an independent developer.\n\nUnisys markets this as the \"ClearPath MCP Software Developer's Kit\"\n\n(SDK), or more informally as the \"LX Laptop\". There are two flavors:\n\n* a demonstration-only version which allows you to run MCP\n\napplications, but which does not include compilers or other development\n\ntools. This is somewhat less expensive (I don't know how much exactly,\n\nbut think it's $1500-2000).\n\n* a full-fledged development version, including all compilers and\n\nutilities, along with most of the software that is normally unbundled\n\nand sold separately. It does not include, for example, LINC/EAE/ABS.\n\nThis is the version that costs $3000. For an additional $800 you can get\n\nsource code (or as much as is still being made available).\n\nWhat most people would want is the full SDK, so that's all I'll discuss\n\nfrom here on.\n\nUnisys qualifies the SDK on a particular model of laptop (currently the\n\nDell Latitude D830), and will only support it on that, although in my\n\nexperience it will run on most other Wintel systems with the appropriate\n\nresources and level of Windows. You're on your own, though, if you\n\ndecided to run on anything other than the qualified configurations.\n\nWhat you get for your $3000 is a box of CD-ROMs, a USB dongle that is\n\nrequired to boot the MCP environment, and a paper manual with\n\ninstallation instructions. The rest of the system documentation comes on\n\nCD-ROM. Installation is not difficult, but it helps if you have some MCP\n\nadministration experience.\n\nThe SDK is a variant of the same vmMCP (virtual machine) implementation\n\nused with the LX and low-end Libra systems. The MCP hardware is emulated\n\nin software on the Intel processor. It runs real MCP (E-mode) object\n\ncode, so you can exchange codefiles, in both directions, with\n\nproduction-model MCP systems.\n\nDisk units are emulated as large files within the Windows file system.\n\nYou cannot attach SCSI or Fibre Channel devices to the SDK system, so\n\nthings like tape drives are out. There is, however, full support for\n\nTCP/IP and BNA networking (the MCP shares the NIC with Windows and can\n\ncommunicate with the Windows environment using TCP/IP APIs). There are a\n\nnumber of ways of moving source code and data files among the SDK,\n\nWindows, Linux/Unix, and other MCP systems over the network.\n\nMCP-specific file structures (codefiles, DMSII data bases, etc.) can be\n\n\"wrapped\" into a container file (something like a Unix tar file), the\n\ncontainer file transmitted over the network, and that file unwrapped at\n\nthe destination MCP system.\n\nIf you haven't worked with MCP systems in a while, the networking\n\ncapabilities will probably surprise you. Old datacom (poll/select, etc.)\n\nis gone, and everything is now done with TCP/IP -- even BNA runs over IP\n\nthese days. The MCP plays well with Windows, including support for\n\nshared directories and named pipes. There is a nice Telnet\n\nimplementation, which you can use with low-end clients like the built-in\n\none for Windows, but most people either spring for a proper TCP/IP-based\n\nTD830/T27 emulator (prices start around $80), or use the Java-based Web\n\nEnabler that comes with the MCP.\n\nWhen you purchase the SDK, you get it for a particular (usually the\n\ncurrent) release of the MCP. Officially, you don't get support, but I've\n\nnever had a UCF rejected. You can purchase upgrades to new versions for\n\nhalf the price of the original SDK (in which case you get everything but\n\na new dongle).\n\nThere are some additional caveats and configuration information detailed\n\non the Unisys ecommunity web site (http://ecommunity.unisys.com). You\n\nneed to register to join (it's free). Once on the home page, search for\n\n\"LX laptop\". The current product is the LX170 (although I think the\n\nLX160 is still supported) and the current MCP release is 12.0 (also\n\nknown as SSR 53.1).\n\nI highly recommend this product if you want to do MCP development. I\n\nbought my first SDK in 2001 and used it on an HP Omnibook 6000 (the\n\nqualified laptop at the time) with MCP 6.0 through 10.1. It still works,\n\nbut decided to buy a new Dell D830 about six months ago and also bought\n\na new LX170 SDK with MCP 12.0.\n\nHere are two Unisys VARs that I know sell the SDK in the U.S. There are\n\nprobably others, but I don't know of them:\n\nComputer Resolutions (now Virtera)\n\nDave Lowenbaum <dloew...@cri1.com>\n\nG-Force Global Technologies\n\nhttp://www.gforceglobal.com\n\n--\n\nPaul\n\nî—“\n\n> /BAH- Tekst uit oorspronkelijk bericht niet weergeven -\n\n>\n\n> - Tekst uit oorspronkelijk bericht weergeven -\n\nUmm, standards for programming languages are like bicycles for\n\nfish :-)\n\nThe quick answer to your second question is: yes. For most people,\n\nAlgol is similar to Algol60 (like Fortran implies Fortran IV). Algol60\n\nis well documented in its Revised Report. The problem with Algol60 is\n\nthat the Rev.Rep. has no I/O functions. The language is ideal for\n\nwriting down algorithms and I'm sure that was one of its design goals.\n\nIt's somewhat of a drawback for a programming language though and all\n\nAlgol(60) implementations have different ways of getting input and\n\nwriting output.\n\nBurroughs extended the language considerably, and Burroughs Extended\n\nAlgol (BEA) offers a lot more language constructs then Algol60. It had\n\nto because most of the system software (compilers, batch subsystem,\n\ninteractive subsystem etc.) was written in Algol (or DCALGOL, which\n\nwas syntactically the same and gave you access to functions of the\n\noperating system). In that respect BEA serves the same purpose as C in\n\na unix environment.\n\nYour first question is also easily answered: no ;-)\n\nMost hardware architectures are sufficiently different to affect the\n\nimplementation of a language. Languages like Algol, Pascal and C let\n\nyou declare integers. The range of an integer value (minint .. maxint)\n\nis platform dependent. The PDP-10 had 36 bit words, the PDP-11 had 16\n\nbits, the PDP-8 was 12 bits, a B6700 word held 48 bits, 39 were used\n\nto store integers. Programs written in languages that support concept\n\nclass declarations ('integer', 'real', 'boolean' etc.) are difficult\n\nto port.\n\nLanguages that suport storage class declarations (COBOL, PL/I) are\n\npossibly a pain to implement on some platforms but a COBOL program\n\nthat complies to a given standard of the language ought to compile\n\nwithout a problem with a version-compatible compiler, irrespective of\n\nthe platform. Every variable can be neatly specified and thus\n\nimproving the chance that a strange compiler understands how it has to\n\ndeal with it.\n\nEven then porting may be a problem because your magtape or punched\n\ncards may be in EBCDIC (Burroughs' flavor) and the target machine\n\nmight be a VAX (ASCII) or an ICL system (EBCDIC, but a different set).\n\nI'm a chemist and had to take up programming because we had to move\n\ndata from our measurement systems (various platforms) to (at least)\n\nfour different computers to handle the data: Data General Nova 4\n\n(RDOS), DEC's VAX (VMS) and PDP-11/40 (RT-11) and a B7700 (MCP). I do\n\nunderstand E.W.Dijkstra's wish \"Free us from the curse of\n\nportability\" :-)\n\nHans\n\nOn 13 nov, 17:07, \"Charlie Gibbs\" <cgi...@kltpzyxm.invalid> wrote:\n\n> In article\n\n> <d1001475-ca48-4b7d-aa96-78f630a6f...@o40g2000prn.googlegroups.com>,\n\nî—“\n\nWhat happened is this: I was asked to convert a few FORTAN IV routines\n\nthat resided in a library on a Burroughs B7700 to a Polish system\n\ncalled an Odra 1900. Now the Odra 1190 was a copy of the ICL 1900.\n\nEindhoven University owned the B7700 and offered connections to\n\nUtrecht (CDC 6600) and Tilburg ((ICL 2900).\n\nBTW one had to be prepared to travel because the ICL 2900 had no\n\nterminal in Eindhoven. The CDC 6600 had one DECwriter IIRC.\n\nThe CDC 6600 was used sporadically, possibly because of its precision,\n\n64 bits compared to 48 bit reals on the B6700. The ICL 2900 was never\n\nused, so the person in charge of that cooperation program was really\n\nhappy to see me. I got all the support I needed, manuals and even\n\ntravel expenses. The ICL 2900 ran in ICL 1900 emulation mode twice a\n\nweek, two afternoons to accommodate users who hadn't ported their\n\nsoftware to the new 2900.\n\nSo I copied the routines to my own pack, compiled them and produced a\n\nlisting on paper and punched a card deck. I sure wasn't taking risks\n\nwith tapes. I knew of IBM sites that used the B7700 to convert their\n\ntapes from one IBM os to another and did not want to end up in that\n\ntarpit.\n\nSo I arrived in Tilburg and got a short introduction in JCL; The\n\noperations staff were very helpful, they had even punched the\n\nappropriate JCL cards. Lucky for me because JCL as used on the 1900\n\nwhen compared to Burroughs' WFL was, err, somewhat user unfriendly.\n\nAnyway, all I had to do was insert my card deck and run it. I've never\n\nseen so many syntax errors in a listing. The ICL EBCDIC was way\n\ndifferent from Burroughs. The operators gave me a manual with the card\n\npunch codes and with that I could write an ALGOL program on the B7700\n\nthat relied heavily on TRANSLATETABLEs and punched the correct cards.\n\nUnfortunately without a text on them because the Burroughs cardpunch\n\nobviously did not understand at all what the program was punching.\n\nDuring the second visit everything worked fine and the carddeck was\n\nmailed to Poland.\n\nI learned that Burroughs and IBM used the same EBCDIC set, perhaps\n\nwith some minor differences. ICL used a different EBCDIC collating\n\nsequence. Cards punched on the B7700 could be read on the PDP-11/40\n\nwhen it ran as an RJE emulator: its CR11 and LP11 acted as remote\n\nstations for the B7700. The PDP-11 is an ASCII machine though under\n\nRT-11 it could read EBCDIC cards and translate them to ASCII. I am not\n\nsure whether this was built into RT-11 or that I had written a\n\nconversion program. The CDC6600 had an entirely different character\n\nset IIRC.\n\nSo EBCDIC is like any other standard: there are more than enough of\n\nthem around to make life interesting :-)\n\nHans\n\nî—“\n\nNot if you had to pass the Navy tests. There was a requirement in\n\nthe US for selling gear to the government and they based their\n\nrequirements on IBM-influenced standards.\n\n> The quick answer to your second question is: yes. For most people,\n\n> Algol is similar to Algol60 (like Fortran implies Fortran IV). Algol60\n\n> is well documented in its Revised Report. The problem with Algol60 is\n\n> that the Rev.Rep. has no I/O functions. The language is ideal for\n\n> writing down algorithms and I'm sure that was one of its design goals.\n\n> It's somewhat of a drawback for a programming language though and all\n\n> Algol(60) implementations have different ways of getting input and\n\n> writing output.\n\nAll I know about Algol is that a guy used it for everything he did\n\nin one of the groups that supported the development groups. Nothing\n\nhe did worked; and all of his legacy, when he left the job, was\n\neradicated. I don't remember if this was due to Algol not working\n\nor the guy not knowing what he was doing.\n\nJust by hearing the chatter over the walls, I learned to be allergic\n\nto Algol and just let the customers, who wanted it, use it. I know\n\nthis was another superstition, but...\n\n> Burroughs extended the language considerably, and Burroughs Extended\n\n> Algol (BEA) offers a lot more language constructs then Algol60. It had\n\n> to because most of the system software (compilers, batch subsystem,\n\n> interactive subsystem etc.) was written in Algol (or DCALGOL, which\n\n> was syntactically the same and gave you access to functions of the\n\n> operating system). In that respect BEA serves the same purpose as C in\n\n> a unix environment.\n\n> Your first question is also easily answered: no ;-)\n\n> Most hardware architectures are sufficiently different to affect the\n\n> implementation of a language.\n\nThat didn't matter if all had to pass the Navy tests. You wrote the\n\ncompilers, assemblers, and interpreters so that it gave consistent\n\nresults. This isn't difficult to do as long as there is a standard\n\nto measure the results.\n\n>Languages like Algol, Pascal and C let\n\n> you declare integers. The range of an integer value (minint .. maxint)\n\n> is platform dependent. The PDP-10 had 36 bit words, the PDP-11 had 16\n\n> bits, the PDP-8 was 12 bits, a B6700 word held 48 bits, 39 were used\n\n> to store integers. Programs written in languages that support concept\n\n> class declarations ('integer', 'real', 'boolean' etc.) are difficult\n\n> to port.\n\nIf the requirement was a larger field for integers, a larger field\n\nwould have been supplied.\n\n> Languages that suport storage class declarations (COBOL, PL/I) are\n\n> possibly a pain to implement on some platforms but a COBOL program\n\n> that complies to a given standard of the language ought to compile\n\n> without a problem with a version-compatible compiler, irrespective of\n\n> the platform. Every variable can be neatly specified and thus\n\n> improving the chance that a strange compiler understands how it has to\n\n> deal with it.\n\n> Even then porting may be a problem because your magtape or punched\n\n> cards may be in EBCDIC (Burroughs' flavor) and the target machine\n\n> might be a VAX (ASCII) or an ICL system (EBCDIC, but a different set).\n\nThat's why ANSI and ASCII and all the other standards committees\n\nwere created. And they've been around longer than computers have\n\nbeen.\n\n> I'm a chemist and had to take up programming because we had to move\n\n> data from our measurement systems (various platforms) to (at least)\n\n> four different computers to handle the data: Data General Nova 4\n\n> (RDOS), DEC's VAX (VMS) and PDP-11/40 (RT-11) and a B7700 (MCP). I do\n\n> understand E.W.Dijkstra's wish \"Free us from the curse of\n\n> portability\" :-)\n\nYea, well. I won't get into that here.\n\nWhere did you do your work? If it was in Europe, I thought\n\nEuropean countries each had their own equivalent to our Navy\n\ntests. They had to have something for arithmetic results\n\nso that the same answer, even if wrong, would be produced.\n\n/BAH\n\nThe discussion of \"sticky\" tape calls to mind one of my introductions to\n\nthe hazards of talking to non-technical management....\n\nWe used (extensively) \"Checkpoint/Restart) where any batch job that\n\nmight run more that 20 minutes had to take a \"Checkpoint\" every 30 minutes.\n\nWe had a siege of (DMS 1100) Audit Trail failures right after the\n\nCheckpoint had been taken. (I suspect the whole concept of\n\nCheckpoint/Restart may be foreign to the youngsters--if there is an\n\ninterest, start a new thread on the topic.)\n\nBecause I was not long away from the world of 256-BPI 7-track tapes (we\n\nhad a few Uniservos on-line for interchange purposes) where developing\n\nthe image on tapes with \"Magnasee\" or a hand-held reader was common, I\n\ngot a can of Magnasee from somewhere and without anybodies permission (I\n\nknew it would never be granted) and to the horror of the Console\n\nManagers on duty, shut off the Uniservo and removed the tape.\n\nWhat I found was that the IBG where the tape had stopped had a deposit\n\nof crude in an image of the tape-head-gaps.\n\nAfter several such examinations I pondered the possible explanations and\n\nfinally decided that I knew the probably answer, so I wrote a paper to\n\nmy masters on-staff explaining what I had found.\n\nI the paper O theorized that when the Audit Trail was moving (which it\n\ndid at close to tape-speed) the heads A) got hot, and B) collected oxide\n\nand binder debris from the tape.\n\nWhen the tape stopped (as it did for the several minutes that a\n\nCheckpoint took), the head cooled and deposited the collection of crude\n\nonto the tape, leaving a raised area \"as if somebody had touched the\n\ntape while eating a jelly donut\". When the Audit Trail started to move\n\nagain the first motion is a back space to overwrite the tapemark but the\n\nlump of crude would raise the tape off the head, causing a misread.\n\nAnyway the only thing that registered with the uptown suits was \"jelly\n\ndonut\" so there were many heated discussions about identifying the\n\nculprits and treating them badly.\n\nI am not sure (memories do not work ass well as they used to) but I\n\nthink we changed brands of tape to solve the problem.\n\n--\n\nRequiescas in pace o email Two identifying characteristics\n\nof System Administrators:\n\nEx turpi causa non oritur actio Infallibility, and the ability to\n\nlearn from their mistakes.\n\nEppure si rinfresca\n\nICBM Targeting Information: http://tinyurl.com/4sqczs\n\nOn Thu, 13 Nov 2008 06:52:58 -0800 (PST), HVlems wrote:\n\n> Umm, standards for programming languages are like bicycles for\n\n> fish :-)\n\nSomeone said \"the great thing about standards is that there are so many to\n\nchoose from\". Someone here can probably remind who said it ...\n\n> The problem with Algol60 is\n\n> that the Rev.Rep. has no I/O functions.\n\nAnd also no character handling -- perhaps even more significant in terms of\n\nthe extensions required for real-world use.\n\n> Burroughs extended the language considerably\n\nYeah, the opinion I've often expressed is that Burroughs Algol is 80%\n\nextensions. A lot of the extensions maintain the basic flavor of the\n\nlanguage -- for example, the block structure is fully intact. Passing\n\nprocedures as parameters works exactly as it should -- even the kind with\n\nthe parameters to the formal procedure unspecified, though I've always\n\nwritten formal procedures using the extensions to specify the parameters.\n\nI remember getting upset when they introduced a new data type (I think it\n\nwas strings) and made the default parameter passing method\n\ncall-by-reference instead of call-by-name. In retrospect, that was a bit\n\nover the top, considering how much the SCAN and REPLACE statements already\n\nmangled the basic syntax of the language. They read more like COBOL than\n\nlike Algol, and are really just HLL syntax for the machine instructions\n\nunderlying them. Also, there are numerous extensions which use procedure\n\ncall syntax on the surface -- except that the actual parameters are not\n\nrestricted in type as they would be in Algol60.\n\n> Algol (BEA) offers a lot more language constructs then Algol60. It had\n\n> to because most of the system software (compilers, batch subsystem,\n\n> interactive subsystem etc.) was written in Algol (or DCALGOL, which\n\n> was syntactically the same and gave you access to functions of the\n\n> operating system).\n\nThe significance of DCALGOL in this context is overrated. For the most\n\npart, the additional access is in the form of access to procedures, and\n\ncalling those procedures would result in failure anyway unless the program\n\nwere given the right to call them, so allowing them in the language was not\n\na security issue. DCALGOL also added data types for MESSAGE and QUEUE. The\n\nnotable aspect of these is that messages move through queues without data\n\nmovement -- messages are special kinds of arrays which can be linked into\n\nthe queue data structure. Shortcuts were taken for efficiency, with the\n\nresult that a few insecurities were left open. It would have been difficult\n\nto use these to gain access to protected data, but I'm pretty sure that\n\ncrashing the system wouldn't have been difficult at all. I never tried it,\n\nand the insecurities were long ago closed by architecture improvements.\n\nSo today, one could just use the DCALGOL compiler for everything. The only\n\nconflicts would be due to additional reserved words in DCALGOL. There would\n\nbe no insecurities.\n\nî—“\n\nOn Sun, 30 Nov 2008 07:38:55 -0800 (PST), HVlems wrote:\n\n>> language -- for example, the block structure is fully intact. Passing\n\n>> procedures as parameters works exactly as it should -- even the kind with\n\n>> the parameters to the formal procedure unspecified, though I've always\n\n>> written formal procedures using the extensions to specify the parameters.\n\n>\n\n> It is not enforced by the language but a lot easier to maintain the\n\n> program.\n\nActually it is enforced. If the formal parameters of the formal procedure\n\nare not specified, then it's enforced at run time. If they are specified,\n\nthen it's usually enforced at compile time. (The only exception I can think\n\nof, the reason I say \"usually\", is when the procedure being passed as the\n\nactual parameter is itself a formal procedure without specified\n\nparameters.)\n\nThe only thing not enforced is that you are not required to specify the\n\nformal parameters of the formal procedure.\n\nAnything else would have a security nightmare. While a parameter mismatch\n\nwould have usually just caused a program fault, it could have caused a\n\nsystem fault or (much less likely) a security breach.\n\nYes, some things in DCALGOL can't be done any other way, with security\n\nissues which wre complex at the time. One example is GETSTATUS directory\n\ncalls -- a non-privileged user can make the call, but it only returns\n\ninformation which the user has the right to see. The MCP always preferred\n\nto make such checks early, for efficiency and security, and making the\n\ncheck so late was unusual. (Of course, in today's networked systems, far\n\nmore complex security decisions are made this late and even later.)\n\nRJE was an odd beast, in that it had to be secured for end users to use,\n\nbut sometimes system operators used it to. As a result, many sites patched\n\nit to allow commands not allowed in the released version.\n\nî—“\n\nOn 11/30/2008 7:38 AM, HVlems wrote:\n\n> On 27 nov, 07:28, Edward Reid <edw...@paleoNOTTHIS.org.NOTTHIS> wrote:\n\n>> On Thu, 13 Nov 2008 06:52:58 -0800 (PST), HVlems wrote:\n\n<snip>\n\n>> The significance of DCALGOL in this context is overrated. For the most\n\nî—“\n\nOn 12/3/2008 6:22 PM, Edward Reid wrote:\n\n<snip>\n\n>\n\n> RJE was an odd beast, in that it had to be secured for end users to use,\n\n> but sometimes system operators used it to. As a result, many sites patched\n\n> it to allow commands not allowed in the released version.\n\n>\n\n> Edward\n\nWow, RJE. I haven't thought about that product in years. I found a copy\n\nof the 3.6 source and looked to see how it handled the ODT commands that\n\nHans mentioned.\n\nIt turns out that RJE didn't use GETSTATUS or SYSTEMSTATUS for these\n\ncommands (although it used both of those for other purposes), nor did it\n\nuse DCKEYIN. It used a DCALGOL feature I had forgotten about -- intercom\n\nqueues. This is a reference to a queue array that allows an MCS (Message\n\nControl System, of which RJE was one) to communicate with the CONTROLLER\n\n(the part of the MCP that handles the ODTs and WFL job queues) and other\n\nMCSes. Intercom queue [0] is connected to the CONTROLLER. The\n\nremaining queue array entries are (potentially) connected to MCSes and\n\nare indexed by MCS number.\n\nRJE would insert a message with the text of an ODT command (along with\n\nseveral header fields in the front of the message) into queue [0] and\n\nreceive a response via a separate queue that it supplied. I suspect this\n\napproach was chosen over DCKEYIN because it was asynchronous -- ODT\n\ncommands that took a significant amount of time to process did not block\n\nRJE from handling other events.\n\nIt does not appear that an RJE station could function entirely as a\n\nremote ODT. The scope of the ODT commands that affected the state of the\n\nMCP host appears to have been restricted to the usercode associated with\n\na particular remote station. Therefore one RJE user could not kill\n\nanother user's tasks. This restriction appears to have been enforced by\n\nthe CONTROLLER based on information in the message header supplied by\n\nRJE. Query-only commands with a global scope (such as the P PK command\n\nto view mounted disk packs that Hans mentioned) were allowed because\n\nthey couldn't damage anything.\n\n--\n\nPaul\n\n\"Edward Reid\" <edw...@paleoNOTTHIS.org.NOTTHIS> wrote in message\n\nnews:1wc4xnsw6lng3$.oxfmmoy0emnh.dlg@40tude.net...\n\n> On Thu, 13 Nov 2008 06:52:58 -0800 (PST), HVlems wrote:\n\n[snip]\n\n> Yeah, the opinion I've often expressed is that Burroughs Algol is 80%\n\n> extensions. A lot of the extensions maintain the basic flavour of the\n\n> language -- for example, the block structure is fully intact. Passing\n\n> procedures as parameters works exactly as it should -- even the kind with\n\n> the parameters to the formal procedure unspecified, though I've always\n\n> written formal procedures using the extensions to specify the parameters.\n\n[snip]\n\nHello! Roger Jefferyes here!! :-)\n\nI left Glasgow University computing department to join Burroughs Machines\n\nLtd during the Easter Holidays of 1970. We had an interesting machine in\n\nGlasgow called a KDF9. Interesting for (at least) two reasons.\n\nFirstly it had hardware implementations of a return address stack and an\n\narithmetic stack. So those of us who were bold enough to write 'Usercode'\n\n(the assembler language) were used to stack handling and what were the\n\nprinciples for writing fast running code. Also looking at the machine code\n\nresulting from compiling higher level languages showed how to write these\n\nother languages to best effect too.\n\nSecondly it was one of a number of machines that ran the Whetstone Algol 60\n\ncompiler controller system. This implemented a version of Algol that was\n\nvery close to the Algol 60 report. The report didn't define input/output\n\nconstructs and a number of other things so these were added. The Whetstone\n\ncontroller interpreted pseudo op-codes inside a virtual machine very similar\n\nto the hardware of the Burroughs Large Systems. Many of the virtual\n\nregisters were even called by the same names.\n\nSo when a couple of salesmen (Garth Tillot was one) came trying to sell us a\n\nB6500 and described a machine so similar to what we already understood it\n\nseemed like a good idea to go and see how computing would be out in the\n\n'real' world with these machines.\n\nAfter a year or two of getting to know the B6500/B6700 I went back to\n\nGlasgow to explain to my former colleagues what a wonderful machine it was.\n\nMany of them were horrified at the 'liberties' the implementers of Burrough\n\nExtended Algol 60 had taken with their pet language. They balked at\n\nvarious constructs. Bit manipulation. Character handling with pointers and\n\narray rows. The attributes stuff. The rules about everything being\n\ndeclared before it is used. E.G. The requirement for FORWARD declarations\n\nof mutually calling procedures. (This restriction is not in the Algol 60\n\nreport.) And a number of other things.\n\nIn fact when I landed up supporting Academic Branch I heard it called\n\n\"Over-extended Algol\" several times and found myself asking what our\n\naccusers would have done given the tasks the company faced. The conflict\n\nbetween 'purity' and 'practicality' was not often resolved to everyone's\n\nsatisfaction! :-(\n\nWell! I seem to have rambled on far enough. What does everyone else think?\n\nWith Regards,\n\nRoger Jefferyes"
    }
}