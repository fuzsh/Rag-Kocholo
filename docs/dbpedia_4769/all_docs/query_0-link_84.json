{
    "id": "dbpedia_4769_0",
    "rank": 84,
    "data": {
        "url": "https://www.wikiwand.com/en/ALGOL_60",
        "read_more_link": "",
        "language": "en",
        "title": "Wikiwand articles",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Flag_of_the_Netherlands.svg/23px-Flag_of_the_Netherlands.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Flag_of_Denmark.svg/20px-Flag_of_Denmark.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4c/Flag_of_Sweden.svg/23px-Flag_of_Sweden.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Flag_of_Denmark.svg/20px-Flag_of_Denmark.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Flag_of_Germany.svg/23px-Flag_of_Germany.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Flag_of_Germany.svg/23px-Flag_of_Germany.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/0/03/Flag_of_Italy.svg/23px-Flag_of_Italy.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Flag_of_East_Germany.svg/23px-Flag_of_East_Germany.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/c/c3/Flag_of_France.svg/23px-Flag_of_France.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Flag_of_the_Netherlands.svg/23px-Flag_of_the_Netherlands.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Flag_of_Canada_%28Pantone%29.svg/23px-Flag_of_Canada_%28Pantone%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/ae/Flag_of_the_United_Kingdom.svg/23px-Flag_of_the_United_Kingdom.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/c/c3/Flag_of_France.svg/23px-Flag_of_France.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/c/c3/Flag_of_France.svg/23px-Flag_of_France.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Flag_of_Norway.svg/21px-Flag_of_Norway.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/2/20/Flag_of_the_Netherlands.svg/23px-Flag_of_the_Netherlands.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Flag_of_the_Soviet_Union.svg/23px-Flag_of_the_Soviet_Union.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3d/Flag_of_the_Estonian_Soviet_Socialist_Republic_%281953%E2%80%931990%29.svg/23px-Flag_of_the_Estonian_Soviet_Socialist_Republic_%281953%E2%80%931990%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/1/12/Flag_of_Poland.svg/23px-Flag_of_Poland.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Flag_of_the_People%27s_Republic_of_China.svg/23px-Flag_of_the_People%27s_Republic_of_China.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/23px-Flag_of_the_United_States.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Flag_of_Germany.svg/23px-Flag_of_Germany.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/f/f3/Flag_of_Russia.svg/23px-Flag_of_Russia.svg.png",
            "https://www.wikiwand.com/chrome.svg",
            "https://www.wikiwand.com/firefox.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/1965_ALGOL-20_A_Language_Manual%2C_Fierst_et_al_-_cover.jpg/180px-1965_ALGOL-20_A_Language_Manual%2C_Fierst_et_al_-_cover.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "ALGOL 60 is a member of the ALGOL family of computer programming languages. It followed on from ALGOL 58 which had introduced code blocks and the begin and end ...",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://www.wikiwand.com/en/articles/ALGOL_60",
        "text": "This article is about the programming language. For other uses, see Algol (disambiguation).\n\nALGOL 60 (short for Algorithmic Language 1960) is a member of the ALGOL family of computer programming languages. It followed on from ALGOL 58 which had introduced code blocks and the begin and end pairs for delimiting them, representing a key advance in the rise of structured programming. ALGOL 60 was one of the first languages implementing function definitions (that could be invoked recursively). ALGOL 60 function definitions could be nested within one another (which was first introduced by any programming language), with lexical scope. It gave rise to many other languages, including CPL, PL/I, Simula, BCPL, B, Pascal, and C. Practically every computer of the era had a systems programming language based on ALGOL 60 concepts.\n\nQuick Facts Paradigms, Family ...\n\nALGOL 60Paradigmsprocedural, imperative, structuredFamilyALGOLDesigned byBackus, Bauer, Green, Katz, McCarthy, Naur, Perlis, Rutishauser, Samelson, van Wijngaarden, Vauquois, Wegstein, WoodgerFirst appeared1960; 64 years ago ( )Typing disciplineStatic, strongScopeLexicalInfluenced byALGOL 58InfluencedMost subsequent imperative languages (so-called ALGOL-like languages), e.g., PL/I, Simula, CPL, Pascal, Ada, C\n\nClose\n\nNiklaus Wirth based his own ALGOL W on ALGOL 60 before moving to develop Pascal. Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published. ALGOL 68 is substantially different from ALGOL 60 and was criticised partially for being so, so that in general \"ALGOL\" refers to dialects of ALGOL 60.\n\nALGOL 60 – with COBOL – were the first languages to seek standardization.\n\nISO 1538:1984 Programming languages – ALGOL 60 (stabilized)\n\nISO/TR 1672:1977 Hardware representation of ALGOL basic symbols ... (now withdrawn)\n\nALGOL 60 was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.\n\nJohn Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed Backus–Naur form.[1]\n\nPeter Naur: \"As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960.\"[2]\n\nThe following people attended the meeting in Paris (from January 11 to 16):\n\nFriedrich Ludwig Bauer, Peter Naur, Heinz Rutishauser, Klaus Samelson, Bernard Vauquois, Adriaan van Wijngaarden, and Michael Woodger (from Europe)\n\nJohn Warner Backus, Julien Green, Charles Katz, John McCarthy, Alan Jay Perlis, and Joseph Henry Wegstein (from the USA).\n\nAlan Perlis gave a vivid description of the meeting: \"The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent.\"\n\nThe language originally did not include recursion. It was inserted into the specification at the last minute, against the wishes of some of the committee.[3]\n\nALGOL 60 inspired many languages that followed it. Tony Hoare remarked: \"Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors.\"[4][5]\n\nALGOL 60 implementations timeline\n\nTo date there have been at least 70 augmentations, extensions, derivations and sublanguages of ALGOL 60.[6]\n\nMore information Name, Year ...\n\nName Year Author State Description Target CPU X1 ALGOL 60August 1960[7]Edsger W. Dijkstra and Jaap A. ZonneveldNetherlandsFirst implementation of ALGOL 60[8]Electrologica X1 Algol1960[9]Edgar T. IronsUSAALGOL 60CDC 1604 Burroughs Algol\n\n(Several variants)1961Burroughs Corporation (with participation by Hoare, Dijkstra, and others)USABasis of the Burroughs (and now Unisys MCP based) computersBurroughs Large Systems\n\nand midrange systems Case ALGOL1961USASimula was originally contracted as a simulation extension of the Case ALGOLUNIVAC 1107 GOGOL1961William M. McKeemanUSAFor ODIN time-sharing systemPDP-1 DASK ALGOL1961Peter Naur, Jørn JensenDenmarkALGOL 60DASK at Regnecentralen SMIL ALGOL1962Torgil Ekman, Carl-Erik FröbergSwedenALGOL 60SMIL at Lund University GIER ALGOL1962Peter Naur, Jørn JensenDenmarkALGOL 60GIER at Regnecentralen Dartmouth ALGOL 30[10]1962Thomas Eugene Kurtz, Stephen J. Garland, Robert F. Hargraves, Anthony W. Knapp, Jorge LLacerUSAALGOL 60LGP-30 Alcor Mainz 20021962Ursula Hill-Samelson, Hans LangmaackGermanySiemens 2002 ALCOR-Illinois 7090 1962\n\n[11][12] Manfred Paul, Hans Rüdiger Wiehle, David Gries, and Rudolf Bayer USA, West Germany ALGOL 60\n\nImplemented at Illinois and the TH München, 1962-1964 IBM 7090 USS 90 Algol1962L. PetroneItaly Elliott ALGOL1962C. A. R. HoareUKDiscussed in his 1980 Turing Award lectureElliott 803 & the Elliott 503 ALGOL 601962Roland Strobel[13]East GermanyImplemented by the Institute for Applied Mathematics, German Academy of Sciences at BerlinZeiss-Rechenautomat ZRA 1 ALGOL 60 1962 Bernard Vauquois, Louis Bolliet[14] France Institut d'Informatique et Mathématiques Appliquées de Grenoble (IMAG) and Compagnie des Machines Bull Bull Gamma 60 Algol Translator1962G. van der Mey and W.L. van der PoelNetherlandsStaatsbedrijf der Posterijen, Telegrafie en TelefonieZEBRA Kidsgrove Algol1963F. G. DuncanUKEnglish Electric Company KDF9 SCALP[15]1963Stephen J. Garland, Anthony W. Knapp, Thomas Eugene KurtzUSASelf-Contained ALgol Processor for a subset of ALGOL 60LGP-30 VALGOL1963Val SchorreUSAA test of the META II compiler compiler FP6000 Algol1963Roger MooreCanadawritten for Saskatchewan Power CorpFP6000 Whetstone1964Brian Randell and Lawford John RussellUKAtomic Power Division of English Electric Company. Precursor to Ferranti Pegasus, National Physical Laboratories ACE and English Electric DEUCE implementationsEnglish Electric Company KDF9 ALGOL 601964Jean-Claude Boussard[16]FranceInstitut d'informatique et mathématiques appliquées de Grenoble[fr]IBM 7090 ALGOL 601965Claude Pair[fr][17]FranceCentre de calcul de la Faculté des Sciences de NancyIBM 1620 Dartmouth ALGOL1965Stephen J. Garland, Sarr Blumson, Ron MartinUSAALGOL 60Dartmouth Time Sharing System for the GE 235 NU ALGOL1965NorwayUNIVAC ALGOL 601965[18]F.E.J. Kruseman AretzNetherlandsMC compiler for the EL-X8Electrologica X8 ALGEK1965Soviet UnionMinsk-22АЛГЭК, based on ALGOL 60 and COBOL support, for economical tasks MALGOL1966publ. A. Viil, M Kotli & M. Rakhendi,Estonian SSRMinsk-22 ALGAMS1967GAMS group (ГАМС, группа автоматизации программирования для машин среднего класса), cooperation of Comecon Academies of ScienceComeconMinsk-22, later ES EVM, BESM ALGOL/ZAM1967PolandPolish ZAM computer Chinese Algol1972 ChinaChinese characters, expressed via the Symbol system DG/L1972USADG Eclipse family of Computers NASE1990Erik SchoenfelderGermanyInterpreterLinux and MS Windows MARST2000Andrew MakhorinRussiaALGOL 60 to C translatorAll CPUs supported by the GNU Compiler Collection; MARST is part of the GNU project\n\nClose\n\nThe Burroughs dialects included special system programming dialects such as ESPOL and NEWP.\n\nALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (ALGOL 68 parlance for input/output) facilities.\n\nALGOL 60 provided two evaluation strategies for parameter passing: the common call-by-value, and call-by-name. The procedure declaration specified, for each formal parameter, which was to be used: value specified for call-by-value, and omitted for call-by-name. Call-by-name has certain effects in contrast to call-by-reference. For example, without specifying the parameters as value or reference, it is impossible to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.[19] Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap is referenced, it's reevaluated. Say i := 1 and A[i] := 2, so every time swap is referenced it'll return the other combination of the values ([1,2], [2,1], [1,2] and so on). A similar situation occurs with a random function passed as actual argument.\n\nCall-by-name is known by many compiler designers for the interesting \"thunks\" that are used to implement it. Donald Knuth devised the \"man or boy test\" to separate compilers that correctly implemented \"recursion and non-local references.\" This test contains an example of call-by-name.\n\nALGOL 60 Reserved words and restricted identifiers\n\nThere are 35 such reserved words in the standard Burroughs Large Systems sub-language:\n\nALPHA\n\nARRAY\n\nBEGIN\n\nBOOLEAN\n\nCOMMENT\n\nCONTINUE\n\nDIRECT\n\nDO\n\nDOUBLE\n\nELSE\n\nEND\n\nEVENT\n\nFALSE\n\nFILE\n\nFOR\n\nFORMAT\n\nGO\n\nIF\n\nINTEGER\n\nLABEL\n\nLIST\n\nLONG\n\nOWN\n\nPOINTER\n\nPROCEDURE\n\nREAL\n\nSTEP\n\nSWITCH\n\nTASK\n\nTHEN\n\nTRUE\n\nUNTIL\n\nVALUE\n\nWHILE\n\nZIP\n\nThere are 71 such restricted identifiers in the standard Burroughs Large Systems sub-language:\n\nACCEPT\n\nAND\n\nATTACH\n\nBY\n\nCALL\n\nCASE\n\nCAUSE\n\nCLOSE\n\nDEALLOCATE\n\nDEFINE\n\nDETACH\n\nDISABLE\n\nDISPLAY\n\nDIV\n\nDUMP\n\nENABLE\n\nEQL\n\nEQV\n\nEXCHANGE\n\nEXTERNAL\n\nFILL\n\nFORWARD\n\nGEQ\n\nGTR\n\nIMP\n\nIN\n\nINTERRUPT\n\nIS\n\nLB\n\nLEQ\n\nLIBERATE\n\nLINE\n\nLOCK\n\nLSS\n\nMERGE\n\nMOD\n\nMONITOR\n\nMUX\n\nNEQ\n\nNO\n\nNOT\n\nON\n\nOPEN\n\nOR\n\nOUT\n\nPICTURE\n\nPROCESS\n\nPROCURE\n\nPROGRAMDUMP\n\nRB\n\nREAD\n\nRELEASE\n\nREPLACE\n\nRESET\n\nRESIZE\n\nREWIND\n\nRUN\n\nSCAN\n\nSEEK\n\nSET\n\nSKIP\n\nSORT\n\nSPACE\n\nSWAP\n\nTHRU\n\nTIMES\n\nTO\n\nWAIT\n\nWHEN\n\nWITH\n\nWRITE\n\nand also the names of all the intrinsic functions.\n\nStandard operators\n\nMore information Priority, Operator ...\n\nPriority Operator first arithmeticfirst↑ (power) second×, / (real), ÷ (integer) third+, - second<, ≤, =, ≥, >, ≠ third¬ (not) fourth∧ (and) fifth∨ (or) sixth⊃ (implication) seventh≡ (equivalence)\n\nClose\n\nCode sample comparisons\n\nALGOL 60\n\nprocedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k); value n, m; array a; integer n, m, i, k; real y; comment The absolute greatest element of the matrix a, of size n by m, is copied to y, and the subscripts of this element to i and k; begin integer p, q; y := 0; i := k := 1; for p := 1 step 1 until n do for q := 1 step 1 until m do if abs(a[p, q]) > y then begin y := abs(a[p, q]); i := p; k := q end end Absmax\n\nImplementations differ in how the text in bold must be written. The word 'INTEGER', including the quotation marks, must be used in some implementations in place of integer, above, thereby designating it as a special keyword.\n\nFollowing is an example of how to produce a table using Elliott 803 ALGOL:[20]\n\nFLOATING POINT ALGOL TEST' BEGIN REAL A,B,C,D' READ D' FOR A:= 0.0 STEP D UNTIL 6.3 DO BEGIN PRINT PUNCH(3),££L??' B := SIN(A)' C := COS(A)' PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C' END' END'\n\nALGOL 60 family\n\nSince ALGOL 60 had no I/O facilities, there is no portable hello world program in ALGOL. The following program could (and still will) compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from The Language Guide[21] at the University of Michigan-Dearborn Computer and Information Science Department Hello world! ALGOL Example Program page.[22]\n\nBEGIN FILE F(KIND=REMOTE); EBCDIC ARRAY E[0:11]; REPLACE E BY \"HELLO WORLD!\"; WRITE(F, *, E); END.\n\nWhere * etc. represented a format specification as used in FORTRAN, e.g.[23]\n\nA simpler program using an inline format:\n\n<nowiki/> BEGIN FILE F(KIND=REMOTE); WRITE(F, <\"HELLO WORLD!\">); END.\n\nAn even simpler program using the Display statement:\n\nBEGIN DISPLAY(\"HELLO WORLD!\") END.\n\nAn alternative example, using Elliott Algol I/O is as follows. Elliott Algol used different characters for \"open-string-quote\" and \"close-string-quote\", represented here by ‘ and ’ .\n\n<nowiki/> programHiFolks; begin print‘Helloworld’ end;\n\nHere's a version for the Elliott 803 Algol (A104) The standard Elliott 803 used 5-hole paper tape and thus only had upper case. The code lacked any quote characters so £ (pound sign) was used for open quote and ? (question mark) for close quote. Special sequences were placed in double quotes (e.g., £L?? produced a new line on the teleprinter).\n\nHIFOLKS' BEGIN PRINT £HELLO WORLD£L??' END'\n\nThe ICT 1900 series Algol I/O version allowed input from paper tape or punched card. Paper tape 'full' mode allowed lower case. Output was to a line printer. Note use of '(', ')', and %.[24]\n\n'PROGRAM' (HELLO) 'BEGIN' 'COMMENT' OPEN QUOTE IS '(', CLOSE IS ')', PRINTABLE SPACE HAS TO BE WRITTEN AS % BECAUSE SPACES ARE IGNORED; WRITE TEXT('('HELLO%WORLD')'); 'END' 'FINISH'\n\nLEAP is an extension to the ALGOL 60 programming language which provides an associative memory of triples. The three items in a triple denote the association that an Attribute of an Object has a specific Value. LEAP was created by Jerome Feldman (University of California Berkeley) and Paul Rovner (MIT Lincoln Lab) in 1967. LEAP was also implemented in SAIL.\n\nDijkstra, Edsger W. (1961). \"ALGOL 60 Translation: An ALGOL 60 Translator for the X1 and Making a Translator for ALGOL 60 (PDF) (Technical report). Amsterdam: Mathematisch Centrum. 35.\n\nRandell, Brian; Russell, Lawford John (1964). ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer. Academic Press. OCLC526731. The design of the Whetstone Compiler. One of the early published descriptions of implementing a compiler. See the related papers: Whetstone Algol Revisited, and The Whetstone KDF9 ALGOL Translator by Brian Randell\n\nGoos, Gerhard [in German] (2017-08-07). Geschichte der deutschsprachigen Informatik - Programmiersprachen und Übersetzerbau [History of informatics in German-speaking countries - Programming languages and compiler design] (PDF) (in German). Karlsruhe, Germany: Fakultät für Informatik, Karlsruhe Institute of Technology (KIT). Archived (PDF) from the original on 2022-05-19 . (11 pages)\n\nRevised Report on the Algorithmic Language ALGOL 60 by Peter Naur, et al. ALGOL definition\n\nA BNF syntax summary of ALGOL 60\n\n\"The Emperor's Old Clothes\" – Hoare's 1980 ACM Turing Award speech, which discusses ALGOL history and his involvement\n\nMARST, a free ALGOL-to-C translator\n\nAn Implementation of ALGOL 60 for the FP6000 Archived 2020-07-25 at the Wayback Machine Discussion of some implementation issues.\n\nNaur, Peter (August 1978). \"The European Side of the Last Phase of the Development of ALGOL 60\". ACM SIGPLAN Notices. 13 (8): 15–44. doi:10.1145/960118.808370. S2CID15552479.\n\nEdinburgh University wrote compilers for Algol60 (later updated for Algol60M) based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL4/75 (an IBM360 clone), and the ICL2900. Here is the BNF for Algol60 Archived 2020-05-15 at the Wayback Machine and the ICL2900 compiler source Archived 2020-05-15 at the Wayback Machine, library documentation Archived 2020-05-15 at the Wayback Machine, and a considerable test suite Archived 2020-05-15 at the Wayback Machine including Brian Wichmann's tests. Archived 2020-05-15 at the Wayback Machine Also there is a rather superficial Algol60 to Atlas Autocode source-level translator Archived 2020-05-15 at the Wayback Machine.\n\nEric S. Raymond's Retrocomputing Museum, among others a link to the NASE ALGOL 60 interpreter written in C.\n\nThe NASE interpreter\n\nStories of the B5000 and People Who Were There: a dedicated ALGOL computer ,\n\nBottenbruch, Hermann (1961). Structure and Use of ALGOL 60 (Report). doi:10.2172/4020495. OSTI4020495.\n\nNUMAL A Library of Numerical Procedures in ALGOL 60 developed at The Stichting Centrum Wiskunde & Informatica (legal successor of Stichting Mathematisch Centrum) legal owner.\n\nALGOL 60 resources: translators, documentation, programs\n\nALGOL 60 included in Racket\n\nWikiwand in your browser!\n\nSeamless Wikipedia browsing. On steroids.\n\nEvery time you click a link to Wikipedia, Wiktionary or Wikiquote in your browser's search results, it will show the modern Wikiwand interface.\n\nWikiwand extension is a five stars, simple, with minimum permission required to keep your browsing private, safe and transparent."
    }
}