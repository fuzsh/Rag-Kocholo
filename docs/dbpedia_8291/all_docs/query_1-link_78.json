{
    "id": "dbpedia_8291_1",
    "rank": 78,
    "data": {
        "url": "https://docs.oracle.com/javase/1.5.0/docs/relnotes/features.html",
        "read_more_link": "",
        "language": "en",
        "title": "J2SE(TM) 5.0 New Features",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/javase/1.5.0/docs/images/javalogo52x88.gif",
            "https://docs.oracle.com/javase/1.5.0/docs/images/sunlogo64x30.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Remote Method Invocation (RMI)\n\nRMI has been enhanced in the following areas:\n\nDynamic Generation of Stub Classes - This release adds support for the dynamic generation of stub classes at runtime, obviating the need to use the Java Remote Method Invocation (Java RMI) stub compiler, rmic, to pregenerate stub classes for remote objects. Note that rmic must still be used to pregenerate stub classes for remote objects that need to support clients running on earlier versions.\n\nStandard SSL/TLS Socket Factory Classes - This release adds standard Java RMI socket factory classes, javax.rmi.ssl.SslRMIClientSocketFactory and javax.rmi.ssl.SslRMIServerSocketFactory, which communicate over the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols using the Java Secure Socket Extension (JSSE).\n\nLaunching rmid or a Java RMI Server from inetd/xinetd - A new feature, provided by the System.inheritedChannel method, allows an application to obtain a channel (java.nio.channels.SocketChannel or java.nio.channels.ServerSocketChannel, for example) inherited from the process that launched the virtual machine (VM). Such an inherited channel can be used to either service a single incoming connection (as with SocketChannel) or accept multiple incoming connections (as with ServerSocketChannel). Therefore, Java networking applications launched by inetd (Solaris(tm) Operating System) or xinetd (Linux) can now obtain the SocketChannel or ServerSocketChannel inherited from inetd/xinetd.\n\nJava Database Connectivity (JDBC)\n\nRowSet interface, part of the javax.sql package, introduced in J2SE version 1.4, provides a lightweight means of passing data between components.\n\nAt this release, as an aid to developers, the RowSet interface has been implemented (as JSR 114) in five of the more common ways a RowSet object can be used. These implementations provide a standard that developers are free to use as is or to extend.\n\nFollowing are the five standard implementations:\n\nJdbcRowSet - used to encapsulate a result set or a driver that is implemented to use JDBC technology\n\nCachedRowSet - disconnects from its data source and operates independently except when it is getting data from the data source or writing modified data back to the data source. This makes it a lightweight container for as much data as it can store in memory.\n\nFilteredRowSet - extends CachedRowSet and is used to get a subset of data\n\nJoinRowSet - extends CachedRowSet and is used to get an SQL JOIN of data from multiple RowSet objects\n\nWebRowSet - extends CachedRowSet and is used for XML data. It describes tabular components in XML using a standardized XML schema.\n\nCORBA, Java IDL, and Java RMI-IIOP\n\nEnhancements to CORBA, Java IDL, and Java RMI-IIOP are discussed in Changes in CORBA Features Between J2SE 1.4.x and 5.0.\n\nJava Naming and Directory InterfaceTM (JNDI)\n\nJNDI provides the following new features."
    }
}