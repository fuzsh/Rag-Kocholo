{
    "id": "dbpedia_8291_1",
    "rank": 92,
    "data": {
        "url": "https://softpanorama.org/Net/Solaris/inetd_services.shtml",
        "read_more_link": "",
        "language": "en",
        "title": "Solaris Inetd Services",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://softpanorama.org/Images/splogo.gif",
            "https://softpanorama.org/Images/up.png",
            "https://softpanorama.org/Images/home.gif",
            "https://softpanorama.org/Images/down.png",
            "https://softpanorama.org/Images/up.png",
            "https://softpanorama.org/Images/home.gif",
            "https://softpanorama.org/Images/down.png",
            "https://softpanorama.org/Images/up.png",
            "https://softpanorama.org/Images/home.gif",
            "https://softpanorama.org/Images/down.png",
            "https://www.paypalobjects.com/en_US/i/scr/pixel.gif"
        ],
        "movies": [
            "/topupdates.shtml"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Softpanorama\n\nMay the source be with you, but remember the KISS principle ;-) Home Switchboard Unix Administration Red Hat TCP/IP Networks Neoliberalism Toxic Managers (slightly skeptical) Educational society promoting \"Back to basics\" movement against IT overcomplexity and bastardization of classic Unix\n\nSolaris Inetd Services\n\nNews\n\nLecture Notes OSI Protocol Layers Recommended Books Recommended Links TCP Wrappers Xinetd Humor Etc\n\nLecture Notes\n\nIntroduction\n\nStarting and stopping services\n\nInternet Service Daemon (inetd)\n\nServices Network Ports: Well known and Ephemeral Ports\n\nStarting Services for Well-known Ports\n\nStarting Well-Known Port Services Startup Scripts\n\nStarting Well-Known Port Services on Demand using Inetd\n\nInetd Enhancements and Replacements\n\nIntroduction\n\nOriginally, BSD Unix set a different server program running for every network service. As the number of services grew in the mid 1980s, Unix systems started having more and more server programs sleeping in the background, waiting for network connections. Although the servers were sleeping, they nevertheless consumed valuable system resources such as process table entries and swap space. Perhaps more importantly, configuring these servers was somewhat difficult, as each server was started up in a different way and had a different syntax for defining which port they should bind to and which UID they should use when running.\n\nToday most Unix systems use the Internet daemon, inetd (or xinetd), to centralize the handling of lightweight Internet services. The inetd daemon listens and accepts connections on many network ports at the same time. When a connection is received, inetd starts up the appropriate TCP-based or UDP-based server running under the appropriate UID. The Internet daemon also simplifies the writing of application-specific daemons themselves, as each daemon can be written so that it reads from the network on standard input and writes back to the network on standard outputÂ—no special calls from the Berkeley socket library are required.\n\nNote: Linux use an alternative Internet daemon called xinetd. Instead of locating all of its configuration in a single inetd.conf file, xinetd typically requires a separate configuration file for each service in the directory /etc/xinetd.d.\n\ninetd uses the bind( ) call to attach itself to many network ports and then uses the select( ) call to determine which of these ports is the one that has received a connection.\n\nThe inetd daemon is run at boot time as part of the startup procedure. When inetd starts executing, it examines the contents of the /etc/inetd.conf file to determine which network services it is supposed to manage. The program will reread its configuration file if it is sent a HUP signal\n\nA sample inetd.conf file\n\n# Internet server configuration database # ftp stream tcp nowait root /usr/sbin/ftpd ftpd #telnet stream tcp nowait root /usr/sbin/telnetd telnetd #shell stream tcp nowait root /usr/sbin/rshd rshd #login stream tcp nowait root /usr/sbin/rlogind rlogind #exec stream tcp nowait root /usr/sbin/rexecd rexecd #uucp stream tcp nowait uucp /usr/sbin/uucpd uucpd #finger stream tcp nowait nobody /usr/sbin/fingerd fingerd #tftp dgram udp wait nobody /usr/sbin/tftpd tftpd #comsat dgram udp wait root /usr/sbin/comsat comsat talk dgram udp wait root /usr/sbin/talkd talkd ntalk dgram udp wait root /usr/sbin/ntalkd ntalkd #echo stream tcp nowait root internal #discard stream tcp nowait root internal #chargen stream tcp nowait root internal #daytime stream tcp nowait root internal #time stream tcp nowait root internal #echo dgram udp wait root internal #discard dgram udp wait root internal #chargen dgram udp wait root internal #daytime dgram udp wait root internal #time dgram udp wait root internal\n\nEach line of the inetd.conf file contains at least six fields, separated by spaces or tabs:\n\nService name\n\nSpecifies the service name that appears in the /etc/services file. inetd uses this name to determine which port number it should listen to. If you are testing a new service or developing your own daemon, you may wish to put that daemon on a nonstandard port. Unfortunately, inetd requires that the service name be a symbolic value such as smtp, rather than a numeric value such as 25.\n\nSocket type\n\nIndicates whether the service expects to communicate via a stream or on a datagram basis.\n\nProtocol type\n\nIndicates whether the service expects to use TCP- or UDP-based communications. TCP is used with stream sockets, while UDP is used with dgram, or datagrams.\n\nWait/nowait\n\nIf the entry is \"wait,\" the server is expected to process all subsequent connections received on the socket. If \"nowait\" is specified, inetd will fork( ) and exec( ) a new server process for each additional datagram or connection request received. Most UDP services are \"wait,\" while most TCP services are \"nowait,\" although this is not a firm rule. Although some manpages indicate that this field is used only with datagram sockets, the field is actually interpreted for all services.\n\nUser\n\nSpecifies the UID that the server process will be run as. This can be root (UID 0), daemon (UID 1), nobody (often UID -2 or 65534), or any other user of your system. This field allows server processes to be run with fewer permissions than root to minimize the damage that could be done if a security hole is discovered in a server program.\n\nCommand name and arguments\n\nThe remaining arguments specify the command name to execute and the arguments passed to the command, starting with argv[0].\n\nSome services, like echo, time, and discard, are listed as \"internal.\" These services are so trivial that they are handled internally by inetd rather than requiring a special program to be run. Although these services are useful for testing, they can also be used for denial of service attacks. You should therefore disable them.\n\nYou should routinely check the entries in the /etc/inetd.conf file and verify that you understand why each of the services in the file is being offered to the Internet. Sometimes, when attackers break into systems, they create new services to make future break-ins easier. If you cannot explain why a service is being offered at your site, you may wish to disable it until you know what purpose it serves. In many circumstances, it is better to disable a service that you are not sure about than it is to leave it enabled in an effort to find out who is using it at a later point in time: if somebody is using the service, they are sure to let you know! One easy way to list all of the services that are enabled is:\n\n% grep -v \"^#\" /etc/inetd.conf talk dgram udp wait root /usr/sbin/tcpd in.talkd ntalk dgram udp wait root /usr/sbin/tcpd in.ntalkd pop-3 stream tcp nowait root /usr/sbin/tcpd popper -c -C -p 2 auth stream tcp nowait nobody /usr/sbin/tcpd identd -o -E -i\n\nBecause of the importance of the /etc/inetd.conf file, you may wish to track changes to this file using a source code control system such as RCS or CVS. You may also wish to use a consistency-checking tool such as Tripwire or detached PGP signatures to verify that all changes to the file are authorized and properly recorded.\n\nThe client-server model describes network services and the client programs of those services. One example of the client-server relationship is the name server and resolver model of the DNS. Another example of the client and server relationship is the NFS.\n\nThe client is a host or a process that uses services from another program, known as a server. You can apply the client-server relationship to computer programs within a single computer or use the relationship across a network to make one application server a host to one or more application clients. Examples of clients in the Solaris are:\n\nFor name services, a client is a host system that uses either the NIS+, NIS, DNS, or LDAP name service lookup provided by the name service server.\n\nIn file systems, the client is a system that remotely accesses the resources of a storage server, such as a server with large disk and network capacity.\n\nFor applications, such as sendmail or calendar manager, the client accesses services from a server process.\n\nThe server is a host or a process that provides services to another program(client). Client-server computing is a key factor in supporting network computing. The client-server model on the network can be multilayered. The storage clients rely on the storage server to access their data. Conversely, one of the storage clients, such as a printer host, can be configured to act as the interface for network printers. To perform print operations from the storage host, the storage host must assume a print client role when communicating with the print server role of the printer host.\n\nExamples of servers in the Solaris are:\n\nA host system providing name services to a network in NIS+, NIS, DNS, and LDAP.\n\nA host system providing disk space to the network, such as a server with large disk and network capacity.\n\nA host system providing windowing services to applications. The client and the server can run on the same system or on separate systems.\n\nA host system providing web services to client systems.\n\nStarting and stopping services\n\nTo start services for server processes, you must know which files to use for automatic service configuration. You must also know how to manually start the services.\n\nThere are two ways of starting services: via inetd and via RC files\n\nInternet Service Daemon (inetd)\n\nThe inetd daemon is a special network process that runs on each system and starts server processes that do not automatically start at boot time. The inetd daemon is the server process for both the standard Internet services and Sun Remote Procedure Call (Sun RPC) services. The inetd daemon starts at boot time using the /etc/rc2.d/S72inetsvcscript. A configuration file lists the services that the inetd daemon will listen for and start in response to network requests. If you do not specify a configuration file, the inetd daemon uses the default /etc/inet/inetd.conf file.\n\nTo get the list of services that the inetd daemon listens for, perform the command:\n\n# cat /etc/inet/inetd.conf\n\n.\n\n.(output truncated)\n\n.\n\n# TELNETD - telnet server daemon\n\ntelnet stream tcp6 nowait root /usr/sbin/in.telnetd in.telnetd\n\n# smserverd to support removable media devices\n\n100155/1 tli rpc/ticotsord wait root\n\n/usr/lib/smedia/rpc.smserverd rpc.smserverd\n\n# REXD - rexd server provides only minimal authentication\n\n#rexd/1 tli rpc/tcp wait root /usr/sbin/rpc.rexd rpc.rexd\n\n# FTPD - FTP server daemon\n\nftp stream tcp6 nowait root /usr/sbin/in.ftpd in.ftpd -a\n\n.\n\n.(output truncated)\n\n.\n\nWhen the inetd daemon receives a network request, it runs the associated command in the inetd.conf file.\n\nStructure of inetd.conf file Each entry is a single line in the following form:\n\nservice-name endpoint-type protocol wait-status uid server-program \\ server-arguments\n\nservice-name The name of a valid service listed in the /etc/services file.\n\nendpoint-type The value can be one of the following:\n\nstream for a stream socket\n\ndgram for a datagram socket\n\nraw for a raw socket\n\nseqpacket for a sequenced packet socket\n\ntli for all TLI endpoints protocol\n\nA recognized protocol listed in the /etc/inet/protocols file. For servers that support the Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) over the Internet Protocol Version 6 (IPv6) address, the tcp6 and udp6 protocol types are also recognized but are not listed in the /etc/inet/protocols file.\n\nwait-status This field has values wait or nowait. The wait keyword is usually associated with UDP servers and informs the inetd daemon that it should not listen for additional incoming requests for this service until the current server exits. The nowait keyword is usually associated with TCP servers and indicates that the inetd daemon continues to listen for incoming requests even while the current server is running.\n\nuid The user ID under which the server should run. server-program The path name of a server program that the inetd daemon invokes to provide a requested service, or the value internal if the inetd daemon itself provides the service.\n\nserver-To invoke a server with command-line arguments, the entire arguments command line (including the command itself) must appear in this field (which consists of all remaining words in the entry).\n\nNotes\n\nBy specifying a protocol value of tcp6 or udp6 for a service, the inetd daemon passes the given daemon an AF_INET6 socket.\n\nThe following daemons have been modified to accept AF_INET6 sockets and service connection requests coming from either IPv4 or IPv6-based transports: ftp, telnet, shell, login, exec, tftp, finger, and printer.\n\nModified services do not usually require separate configuration lines for tcp or udp.\n\nThe inetd daemon starts a server process when it receives an appropriate service request. The in.ftpd server process can be invoked by the inetd daemon each time a connection to the File Transfer Protocol (FTP) service is requested as shown in the following example:\n\n# grep ftp /etc/inet/inetd.conf\n\nftp stream tcp6 nowait root /usr/sbin/in.ftpd in.ftpd -a\n\nWhen changing the /etc/inet/inetd.conf file, send a hang-up (HUP) signal to the inetd process to force it to reread the configuration file:\n\n# pkill -HUP inetd\n\nNote Â– To turn off a service, add a # symbol to the beginning of the line corresponding to that service in the /etc/inetd.conf file, and send a HUP request.\n\nServices Network Ports: Well known and Ephemeral Ports\n\nNetwork ports help transport protocols distinguish between multiple service requests arriving at a given host computer. The TCP and UDP transport protocols identify ports using a positive integer between 1 and 65535, which is called a port number.\n\nNetwork ports can be divided into two categories:\n\nwell-known ports. Well-known ports are stored in the /etc/inet/services file. To view the well-known port that the telnet service uses, perform the command:\n\n# grep telnet /etc/inet/services\n\ntelnet 23/tcp\n\nThis example shows that the telnet service uses well-known port 23 and uses the TCP protocol.\n\nephemeral (short-lived) ports.\n\nPort Numbers There are two fundamental approaches to port assignments:\n\n. Central authority:\n\nAll users must agree to allow the central authority to assign all port numbers.\n\nThe central authority is responsible for publishing the list of port number assignments, called well-known port assignments.\n\nWell-known port assignments dictate software requirements on a system.\n\nDynamic binding:\n\nThe ports are unknown to the client in advance. The system software dynamically assigns ports to the programs that require them.\n\nTo obtain the current port assignments on any computer, the software generates a request to the target machine for the port number information. The target machine then responds with the port number.\n\nThese port number assignments are considered ephemeral since assignments are short lived, only lasting until the system is rebooted.\n\nStarting Services for Well-known Ports\n\nEach network service uses a port that represents an address space reserved for that service. If a port number is not pre-assigned, the operating system allows an application to choose an unused port number. A client often communicates with a server through a well-known port. The list of services that use a well-known port includes:\n\nServices that start using start-up scripts (R-scripts) at system boot time\n\nServices that do not start automatically at boot, and must start on demand\n\nStarting Well-Known Port Services Startup Scripts\n\nOne of the well-known port services that starts at boot time is the sendmail process. The sendmail process uses well-known port 25 to perform network services for email using the Simple Mail Transport Protocol (SMTP). You can confirm that the name has been translated to the port number by searching for the mail entry in the /etc/inet/services file. To confirm the translation, perform the command:\n\n# grep mail /etc/inet/services\n\nsmtp 25/tcp mail\n\nThe sendmail process is initialized by the startup script /etc/rc2.d/S88sendmail when you boot the Solaris. Because the sendmail process uses port 25, the sendmail process starts listening at port 25 for incoming mail activity soon after start up. There is no need for the inetd daemon to listen at port 25 for incoming sendmail requests or to start sendmail, because the sendmail process is already running.\n\nStarting Well-Known Port Services on Demand using Inetd\n\nThe telnet service is a well-known port service that does not automatically start at boot time. For example the telnet service uses port 23. At the same time this services is used only episodically and it makes sense to run it only when there is a request to save memory. The inetd daemon can listen for telnet requests, so that the telnet service does not have to continually run on the system. When the inetd daemon receives a network request at a port, it uses the information listed in the /etc/inet/service file to determine which service to start and if this is a telnet connection starts telnet daemon.\n\nHere is a typical scenario that involves two system alisa and bill with alisa trying to connect to bill using telnet service:\n\nThe initiating host alisa executes telnet bill command.\n\nThe telnet service is a well-known service. The port for this service is port 23.\n\nThe telnet packet requesting a connection goes to port 23 on the host bill.\n\nInitially, the inetd daemon listens at port 23 for the telnet service. The telnet bill command on alisa generates a request to port 23 that inetd recognizes as a telnet request because of the configuration entry in the /etc/inet/services file (it associates ports and services for inetd).\n\nThe telnet service does not continuously run on a system waiting for a connection. The inetd daemon must start the telnet service dynamically on demand.\n\nThe inetd daemon consults the /etc/inetd.conf file to find a matching entry for the requested service. The inetd daemon identifies the telnet service line.\n\nThe inetd daemon executes the in.telnetd process from the /etc/inetd.conf file. The in.telnetd daemon takes control of the current telnet sessionÂ’s communication.\n\nThe in.telnetd daemon receives this sessionÂ’s traffic and runs on port 23 until this telnet session ends.\n\nNote Â– The inetd daemon continues to listen for new service requests.\n\nInetd Enhancements and Replacements\n\nOne typical enhancement of indet that provides better security is TCP Wrappers. the idea of TCP Warappers is realy simple: to screen the connection based on the rules contained in certain files (hosts.allow, host.deny) and based onthis screening to grant of deny request. If the request is allowed, then the the corresponding server process (e.g ftp) can be started. This mechanism is also referred to as tcp_wrapper. Solaris 9 can be installed with TCP wrappers in the default installation. And TCP Wrappers are standard in Solaris 10.\n\nThere is also a replacement for inetd, called xinetd that includes built-in TCP wrapper functionality. Like combination of inetd+tcpd, it enables the configuration of the access rights for a given machine, but it can do more:\n\naccess control based on time segments\n\nfull logging both for connection success or failure\n\nsome level of containment against Denial of Services (DoS) attacks (attacks which attempt to freeze a machine by saturating its resources) :\n\nlimitation on the number of servers of the same type to run at a time\n\nlimitation on the total number of servers\n\nlimitation on the size of the log files.\n\nbinding of a service to a specific interface: this allows you, for instance, to make services available to your private network but not to the outside world.\n\ncan be used as a proxy to other systems.\n\nIt is often used in Linux distributions, but not in Solaris.\n\nFrederic Raynal has written an excellent article on xinetd.\n\nCurator has written a tutorial on the use of xinetd here.\n\nxinetd has a mailing list. More information on xinetd mailing lists can be found here.\n\nNEWS CONTENTS\n\n200102 : A Simple Socket Server Using inetd ( A Simple Socket Server Using 'inetd', )\n\n200102 : Chapter 24. The Internet Super Server inetd ( Chapter 24. The Internet Super Server inetd, )\n\n200102 : The inetd - -etc-inetd.conf file by Gerhard Mourani ( The inetd - -etc-inetd.conf file, )\n\nOld News ;-)\n\nA Simple Socket Server Using 'inetd'\n\nPerl code for simple server and client.\n\n24.9. When to use or not to use inetd\n\nThe decision to add or move a service into or out of inetd(8) is usually based on server load. As an example, on most systems the telnet daemon does not require as many new connections as say a mail server. Most of the time the administrator has to feel out if a service should be moved.\n\nA good example I have seen is mail services such as smtp and pop. I had setup a mail server in which pop3 was in inetd(8) and exim was running in standalone, I mistakenly assumed it would run fine since there was a low amount of users, namely myself and a diagnostic account. The server was also setup to act as a backup MX and relay in case another heavily used one went down. When I ran some tests I discovered a huge time lag for pop connections remotely. This was because of my steady fetching of mail and the diagnostic user constantly mailing diagnostics back and forth. In the end I had to move the pop3 service out of inetd(8).\n\nThe reason for moving the service is actually quite interesting. When a particular service becomes heavily used, of course, it causes a load on the system. In the case of a service that runs within the inetd(8) meta daemon the effects of a heavily loaded service can also harm other services that use inetd(8). If the multiplexor is getting too many requests for one particular service, it will begin to affect the performance of other services that use inetd(8). The fix, in a situation like that, is to make the offending service run outside of inetd(8) so the response time of both the service and inetd(8) will increase.\n\nChapter 24. The Internet Super Server inetd\n\nAnother reason to use inetd is that you can use TCP-wrappers with it. Mail daemons are usually complied with TCP-wrappers library support but this is not true for other daemons.\n\n24.9. When to use or not to use inetd\n\nThe decision to add or move a service into or out of inetd(8) is usually based on server load. As an example, on most systems the telnet daemon does not require as many new connections as say a mail server. Most of the time the administrator has to feel out if a service should be moved.\n\nA good example I have seen is mail services such as smtp and pop. I had setup a mail server in which pop3 was in inetd(8) and exim was running in standalone, I mistakenly assumed it would run fine since there was a low amount of users, namely myself and a diagnostic account. The server was also setup to act as a backup MX and relay in case another heavily used one went down. When I ran some tests I discovered a huge time lag for pop connections remotely. This was because of my steady fetching of mail and the diagnostic user constantly mailing diagnostics back and forth. In the end I had to move the pop3 service out of inetd(8).\n\nThe reason for moving the service is actually quite interesting. When a particular service becomes heavily used, of course, it causes a load on the system. In the case of a service that runs within the inetd(8) meta daemon the effects of a heavily loaded service can also harm other services that use inetd(8). If the multiplexor is getting too many requests for one particular service, it will begin to affect the performance of other services that use inetd(8). The fix, in a situation like that, is to make the offending service run outside of inetd(8) so the response time of both the service and inetd(8) will increase.\n\nThe inetd - -etc-inetd.conf file from Securing and Optimizing Linux by Gerhard Mourani\n\nOld Red Hat inetd configuration is like Solaris.\n\ninetd, called also the super server, will load a network program based upon a request from the network. The inetd.conf file tells inetd which ports to listen to and what server to start for each port.\n\nThe first thing to look at as soon as you put your Linux system on ANY network is what services you need to offer. Services that you do not need to offer should be disabled and uninstalled so that you have one less thing to worry about, and attackers have one less place to look for a hole. Look at your /etc/inetd.conf file to see what services are being offered by your inetd program. Disable what you do not need by commenting them out by adding a # at the beginning of the line, and then sending your inetd process a SIGHUP command to update it to the current inetd.conf file.\n\nChange the permissions on this file to 600.\n\n[root@deep] /#chmod 600 /etc/inetd.conf\n\nEnsure that the owner is root.\n\n[root@deep] /# stat /etc/inetd.conf\n\nFile: \"/etc/inetd.conf\" Size: 2869 Filetype: Regular File Mode: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root) Device: 8,6 Inode: 18219 Links: 1 Access: Wed Sep 22 16:24:16 1999(00000.00:10:44) Modify: Mon Sep 20 10:22:44 1999(00002.06:12:16) Change: Mon Sep 20 10:22:44 1999(00002.06:12:16)\n\nEdit the inetd.conf file vi /etc/inetd.conf and disable services like: ftp, telnet, shell, login, exec, talk, ntalk, imap, pop-2, pop-3, finger, auth, etc. unless you plan to use it. If it's turned off, it's much less of a risk.\n\n# To re-read this file after changes, just do a 'killall -HUP inetd' # #echo stream tcp nowait root internal #echo dgram udp wait root internal #discard stream tcp nowait root internal #discard dgram udp wait root internal #daytime stream tcp nowait root internal #daytime dgram udp wait root internal #chargen stream tcp nowait root internal #chargen dgram udp wait root internal #time stream tcp nowait root internal #time dgram udp wait root internal # # These are standard services. # #ftp stream tcp nowait root /usr/sbin/tcpd in.ftpd -l -a #telnet stream tcp nowait root /usr/sbin/tcpd in.telnetd # # Shell, login, exec, comsat and talk are BSD protocols. # #shell stream tcp nowait root /usr/sbin/tcpd in.rshd #login stream tcp nowait root /usr/sbin/tcpd in.rlogind #exec stream tcp nowait root /usr/sbin/tcpd in.rexecd #comsat dgram udp wait root /usr/sbin/tcpd in.comsat #talk dgram udp wait root /usr/sbin/tcpd in.talkd #ntalk dgram udp wait root /usr/sbin/tcpd in.ntalkd #dtalk stream tcp wait nobody /usr/sbin/tcpd in.dtalkd # # Pop and imap mail services et al # #pop-2 stream tcp nowait root /usr/sbin/tcpd ipop2d #pop-3 stream tcp nowait root /usr/sbin/tcpd ipop3d #imap stream tcp nowait root /usr/sbin/tcpd imapd # # The Internet UUCP service. # #uucp stream tcp nowait uucp /usr/sbin/tcpd /usr/lib/uucp/uucico -l # # Tftp service is provided primarily for booting. Most sites # run this only on machines acting as \"boot servers.\" Do not uncomment # this unless you *need* it. # #tftp dgram udp wait root /usr/sbin/tcpd in.tftpd #bootps dgram udp wait root /usr/sbin/tcpd bootpd # # Finger, systat and netstat give out user information which may be # valuable to potential \"system crackers.\" Many sites choose to disable # some or all of these services to improve security. # #finger stream tcp nowait root /usr/sbin/tcpd in.fingerd #cfinger stream tcp nowait root /usr/sbin/tcpd in.cfingerd #systat stream tcp nowait guest /usr/sbin/tcpd /bin/ps -auwwx #netstat stream tcp nowait guest /usr/sbin/tcpd /bin/netstat -f inet # # Authentication # #auth stream tcp nowait nobody /usr/sbin/in.identd in.identd -l -e -o # # End of inetd.conf\n\n[root@deep] /# killall -HUP inetd\n\nOne more security measure you can take to secure the inetd.conf file is to set it immutable, using the chattr command. To set the file immutable simply, execute the following command:\n\n[root@deep] /# chattr +i /etc/inetd.conf\n\nThis will prevent any changes accidental or otherwise to the inetd.conf file. A file with the immutable attribute set i cannot be modified, deleted or renamed, no link can be created to this file and no data can be written to it. The only person that can set or clear this attribute is the super-user root. If you wish later to modify the inetd.conf file you will need to unset the immutable flag: To unset the immutable flag, simply execute the following command:\n\n[root@deep] /# chattr -i /etc/inetd.conf\n\nNote: Don't forget to send your inetd process a SIGHUP signal killall -HUP inetd after making change to your inetd.conf file. The services you enable on a selected host depend on the functions you want the host to provide. Functions could support the selected network service, other services hosted on this computer, or development and maintenance of the operating system and applications.\n\nGoogle matched content\n\nSoftpanorama Recommended\n\nTop articles\n\nSites\n\ninetd - Wikipedia, the free encyclopedia\n\nThe inetd Super-Server FreeBSD page where the idea originated. BTW daytime, time, echo, discard, chargen, and auth are all internally provided services of inetd.\n\ninetd Daemon\n\ninetd.conf File Format for TCP/IP\n\ninetd Daemon\n\ninetd.conf File Format for TCP/IP\n\nChapter 24. The Internet Super Server inetd\n\nChapter 11: inetd: the Internet super server\n\nConfiguring the Internet Daemon, inetd\n\nThe inetd Super-Server\n\nUnderstanding inetd\n\nxinetd\n\nFrederic Raynal has written an excellent article on xinetd.\n\nCurator has written a tutorial on the use of xinetd here.\n\nxinetd has a mailing list. More information on xinetd mailing lists can be found here.\n\nEtc\n\nSociety\n\nGroupthink : Two Party System as Polyarchy : Corruption of Regulators : Bureaucracies : Understanding Micromanagers and Control Freaks : Toxic Managers : Harvard Mafia : Diplomatic Communication : Surviving a Bad Performance Review : Insufficient Retirement Funds as Immanent Problem of Neoliberal Regime : PseudoScience : Who Rules America : Neoliberalism : The Iron Law of Oligarchy : Libertarian Philosophy\n\nQuotes\n\nWar and Peace : Skeptical Finance : John Kenneth Galbraith :Talleyrand : Oscar Wilde : Otto Von Bismarck : Keynes : George Carlin : Skeptics : Propaganda : SE quotes : Language Design and Programming Quotes : Random IT-related quotes : Somerset Maugham : Marcus Aurelius : Kurt Vonnegut : Eric Hoffer : Winston Churchill : Napoleon Bonaparte : Ambrose Bierce : Bernard Shaw : Mark Twain Quotes\n\nBulletin:\n\nVol 25, No.12 (December, 2013) Rational Fools vs. Efficient Crooks The efficient markets hypothesis : Political Skeptic Bulletin, 2013 : Unemployment Bulletin, 2010 : Vol 23, No.10 (October, 2011) An observation about corporate security departments : Slightly Skeptical Euromaydan Chronicles, June 2014 : Greenspan legacy bulletin, 2008 : Vol 25, No.10 (October, 2013) Cryptolocker Trojan (Win32/Crilock.A) : Vol 25, No.08 (August, 2013) Cloud providers as intelligence collection hubs : Financial Humor Bulletin, 2010 : Inequality Bulletin, 2009 : Financial Humor Bulletin, 2008 : Copyleft Problems Bulletin, 2004 : Financial Humor Bulletin, 2011 : Energy Bulletin, 2010 : Malware Protection Bulletin, 2010 : Vol 26, No.1 (January, 2013) Object-Oriented Cult : Political Skeptic Bulletin, 2011 : Vol 23, No.11 (November, 2011) Softpanorama classification of sysadmin horror stories : Vol 25, No.05 (May, 2013) Corporate bullshit as a communication method : Vol 25, No.06 (June, 2013) A Note on the Relationship of Brooks Law and Conway Law\n\nHistory:\n\nFifty glorious years (1950-2000): the triumph of the US computer engineering : Donald Knuth : TAoCP and its Influence of Computer Science : Richard Stallman : Linus Torvalds : Larry Wall : John K. Ousterhout : CTSS : Multix OS Unix History : Unix shell history : VI editor : History of pipes concept : Solaris : MS DOS : Programming Languages History : PL/1 : Simula 67 : C : History of GCC development : Scripting Languages : Perl history : OS History : Mail : DNS : SSH : CPU Instruction Sets : SPARC systems 1987-2006 : Norton Commander : Norton Utilities : Norton Ghost : Frontpage history : Malware Defense History : GNU Screen : OSS early history\n\nClassic books:\n\nThe Peter Principle : Parkinson Law : 1984 : The Mythical Man-Month : How to Solve It by George Polya : The Art of Computer Programming : The Elements of Programming Style : The Unix HaterÂ’s Handbook : The Jargon file : The True Believer : Programming Pearls : The Good Soldier Svejk : The Power Elite\n\nMost popular humor pages:\n\nManifest of the Softpanorama IT Slacker Society : Ten Commandments of the IT Slackers Society : Computer Humor Collection : BSD Logo Story : The Cuckoo's Egg : IT Slang : C++ Humor : ARE YOU A BBS ADDICT? : The Perl Purity Test : Object oriented programmers of all nations : Financial Humor : Financial Humor Bulletin, 2008 : Financial Humor Bulletin, 2010 : The Most Comprehensive Collection of Editor-related Humor : Programming Language Humor : Goldman Sachs related humor : Greenspan humor : C Humor : Scripting Humor : Real Programmers Humor : Web Humor : GPL-related Humor : OFM Humor : Politically Incorrect Humor : IDS Humor : \"Linux Sucks\" Humor : Russian Musical Humor : Best Russian Programmer Humor : Microsoft plans to buy Catholic Church : Richard Stallman Related Humor : Admin Humor : Perl-related Humor : Linus Torvalds Related humor : PseudoScience Related Humor : Networking Humor : Shell Humor : Financial Humor Bulletin, 2011 : Financial Humor Bulletin, 2012 : Financial Humor Bulletin, 2013 : Java Humor : Software Engineering Humor : Sun Solaris Related Humor : Education Humor : IBM Humor : Assembler-related Humor : VIM Humor : Computer Viruses Humor : Bright tomorrow is rescheduled to a day after tomorrow : Classic Computer Humor\n\nThe Last but not Least Technology is dominated by two types of people: those who understand what they do not manage and those who manage what they do not understand ~Archibald Putt. Ph.D\n\nCopyright Â© 1996-2021 by Softpanorama Society. www.softpanorama.org was initially created as a service to the (now defunct) UN Sustainable Development Networking Programme (SDNP) without any remuneration. This document is an industrial compilation designed and created exclusively for educational use and is distributed under the Softpanorama Content License. Original materials copyright belong to respective owners. Quotes are made for educational purposes only in compliance with the fair use doctrine.\n\nFAIR USE NOTICE This site contains copyrighted material the use of which has not always been specifically authorized by the copyright owner. We are making such material available to advance understanding of computer science, IT technology, economic, scientific, and social issues. We believe this constitutes a 'fair use' of any such copyrighted material as provided by section 107 of the US Copyright Law according to which such material can be distributed without profit exclusively for research and educational purposes.\n\nThis is a Spartan WHYFF (We Help You For Free) site written by people for whom English is not a native language. Grammar and spelling errors should be expected. The site contain some broken links as it develops like a living tree...\n\nYou can use PayPal to to buy a cup of coffee for authors of this site\n\nDisclaimer:\n\nThe statements, views and opinions presented on this web page are those of the author (or referenced source) and are not endorsed by, nor do they necessarily reflect, the opinions of the Softpanorama society. We do not warrant the correctness of the information provided or its fitness for any purpose. The site uses AdSense so you need to be aware of Google privacy policy. You you do not want to be tracked by Google please disable Javascript for this site. This site is perfectly usable without Javascript.\n\nLast modified: March, 12, 2019"
    }
}