{
    "id": "dbpedia_110_3",
    "rank": 76,
    "data": {
        "url": "https://docs.datadoghq.com/logs/explorer/search_syntax/",
        "read_more_link": "",
        "language": "en",
        "title": "Log Search Syntax",
        "top_image": "https://datadog-docs.imgix.net/images/og-default/og-thumbnails-generic5.png",
        "meta_img": "https://datadog-docs.imgix.net/images/og-default/og-thumbnails-generic5.png",
        "images": [
            "https://datadog-docs.imgix.net/img/dd_logo_n_70x75.png?ch=Width,DPR&fit=max&auto=format&w=70&h=75",
            "https://datadog-docs.imgix.net/img/dd-logo-n-200.png?ch=Width,DPR&fit=max&auto=format&h=14&auto=format&w=807",
            "https://datadog-docs.imgix.net/img/datadog_rbg_n_2x.png?fm=png&auto=format&lossless=1",
            "https://datadog-docs.imgix.net/images/icons/nav_home.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/nav_docs.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/nav_mobile_api.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/logs/explorer/search/array_search.05bd5d84909392137bc906c136809452.png?auto=format",
            "https://datadog-docs.imgix.net/images/logs/explorer/search/facetless_query_json_arrray2.33d35703b48fcd22c300fdb2e278421a.png?auto=format",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-1.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/list-group-whats-next-arrow-2.png?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/icons/help-druids.svg",
            "https://datadog-docs.imgix.net/images/icons/icon-pencil.svg?ch=Width%2cDPR&fit=max&auto=format&w=807",
            "https://datadog-docs.imgix.net/images/dd-logo-white.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Search through all of your logs.",
        "meta_lang": "en",
        "meta_favicon": "https://docs.datadoghq.com/favicon.ico",
        "meta_site_name": "Datadog Infrastructure and Application Monitoring",
        "canonical_link": "https://docs.datadoghq.com/logs/explorer/search_syntax/",
        "text": "Overview\n\nA query filter is composed of terms and operators.\n\nThere are two types of terms:\n\nA single term is a single word such as test or hello.\n\nA sequence is a group of words surrounded by double quotes, such as \"hello dolly\".\n\nTo combine multiple terms into a complex query, you can use any of the following case sensitive Boolean operators:\n\nFull-text search\n\nThe full-text search feature is only available in Log Management and works in monitor, dashboard, and notebook queries. The full-text search syntax cannot be used to define index filters, archive filters, log pipeline filters, or in Live Tail.\n\nUse the syntax *:search_term to perform a full-text search across all log attributes, including the log message.\n\nSingle term example\n\nSearch term with wildcard example\n\nMultiple terms with exact match example\n\nMultiple terms without exact match example\n\nThe full-text search syntax *:hello world is equivalent to *:hello *:world. It searches all log attributes for the terms hello and world.\n\nMultiple terms with a white space example\n\nThe full-text search syntax *:\"hello world\" \"i am here\" is equivalent to *:\"hello world\" *:\"i am here\". It searches all log attributes for the terms hello world and i am here.\n\nEscape special characters and spaces\n\nThe following characters, which are considered special: + - = && || > < ! ( ) { } [ ] ^ \" “ ” ~ * ? : \\ #, and spaces require escaping with the \\ character. / is not considered a special character and doesn’t need to be escaped.\n\nYou cannot search for special characters in a log message. You can search for special characters when they are inside of an attribute.\n\nTo search for special characters, parse them into an attribute with the Grok Parser, and search for logs that contain that attribute.\n\nAttributes search\n\nTo search on a specific attribute, add @ to specify you are searching on an attribute.\n\nFor instance, if your attribute name is url and you want to filter on the url value www.datadoghq.com, enter:\n\nNotes:\n\nIt is not required to define a facet to search on attributes and tags.\n\nAttributes searches are case sensitive. Use full-text search to get case insensitive results. Another option is to use the lowercase filter with your Grok parser while parsing to get case insensitive results during search.\n\nSearching for an attribute value that contains special characters requires escaping or double quotes.\n\nFor example, for an attribute my_attribute with the value hello:world, search using: @my_attribute:hello\\:world or @my_attribute:\"hello:world\".\n\nTo match a single special character or space, use the ? wildcard. For example, for an attribute my_attribute with the value hello world, search using: @my_attribute:hello?world.\n\nExamples:\n\nSearch using CIDR notation\n\nClassless Inter Domain Routing (CIDR) is a notation that allows users to define a range of IP addresses (also called CIDR blocks) succinctly. CIDR is most commonly used to define a network (such as a VPC) or a subnetwork (such as public/private subnet within a VPC).\n\nUsers can use the CIDR() function to query attributes in logs using CIDR notation. The CIDR() function needs to be passed in a log attribute as a parameter to filter against, followed by one or multiple CIDR blocks.\n\nExamples\n\nCIDR(@network.client.ip,13.0.0.0/8) matches and filters logs that have IP addresses in the field network.client.ip that fall under the 13.0.0.0/8 CIDR block.\n\nCIDR(@network.ip.list,13.0.0.0/8, 15.0.0.0/8) matches and filters logs that have any IP addresses in an array attribute network.ip.list that fall under the 13.0.0.0/8 or 15.0.0.0/8 CIDR blocks.\n\nsource:pan.firewall evt.name:reject CIDR(@network.client.ip, 13.0.0.0/8) would match and filter reject events from palo alto firewall that originate in the 13.0.0.0/8 subnet\n\nsource:vpc NOT(CIDR(@network.client.ip, 13.0.0.0/8)) CIDR(@network.destination.ip, 15.0.0.0/8) will show all VPC logs that do not originate in subnet 13.0.0.0/8 but are designated for destination subnet 15.0.0.0/8 because you want to analyze network traffic in your environments between subnets\n\nThe CIDR() function supports both IPv4 and IPv6 CIDR notations and works in Log Explorer, Live Tail, log widgets in Dashboards, log monitors, and log configurations.\n\nWildcards\n\nYou can use wildcards with free text search. However, it only searches for terms in the log message, the text in the content column in Log Explorer. See Full-text search if you want to search for a value in a log attribute.\n\nMulti-character wildcard\n\nTo perform a multi-character wildcard search in the log message (the content column in Log Explorer), use the * symbol as follows:\n\nservice:web* matches every log message that has a service starting with web.\n\nweb* matches all log messages starting with web.\n\n*web matches all log messages that end with web.\n\nNote: Wildcards only work as wildcards outside of double quotes. For example, \"*test*\" matches a log which has the string *test* in its message. *test* matches a log which has the string test anywhere in its message.\n\nWildcard searches work within tags and attributes (faceted or not) with this syntax. This query returns all the services that end with the string mongo:\n\nWildcard searches can also be used to search in the plain text of a log that is not part of a log attribute. For example, this query returns all logs with content (message) that contain the string NETWORK:\n\nHowever, this search term does not return logs that contain the string NETWORK if it is in a log attribute and not part of the log message.\n\nSearch wildcard\n\nWhen searching for an attribute or tag value that contains special characters or requires escaping or double quotes, use the ? wildcard to match a single special character or space. For example, to search for an attribute my_attribute with the value hello world: @my_attribute:hello?world.\n\nNumerical values\n\nIn order to search on a numerical attribute, first add it as a facet. You can then use numerical operators (<,>, <=, or >=) to perform a search on numerical facets. For instance, retrieve all logs that have a response time over 100ms with:\n\nYou can search for numerical attribute within a specific range. For instance, retrieve all your 4xx errors with:\n\nYour logs inherit tags from hosts and integrations that generate them. They can be used in the search and as facets as well:\n\ntest is searching for the string “test”.\n\nenv:(prod OR test) matches all logs with the tag env:prod or the tag env:test\n\n(env:prod AND -version:beta) matches all logs that contain tag env:prod and that do not contain tag version:beta\n\nIf your tags don’t follow tags best practices and don’t use the key:value syntax, use this search query:\n\ntags:<MY_TAG>\n\nArrays\n\nIn the below example, clicking on the Peter value in the facet returns all the logs that contains a users.names attribute, whose value is either Peter or an array that contains Peter:\n\nNote: Search can also be used on non-faceted array attributes using an equivalent syntax.\n\nIn the following example, CloudWatch logs for Windows contain an array of JSON objects under @Event.EventData.Data. You cannot create a facet on array of JSON objects, but you can search using the following syntax.\n\n@Event.EventData.Data.Name:ObjectServer matches all logs with the key Name and value ObjectServer.\n\nSaved searches\n\nSaved Views contain your search query, columns, time horizon, and facet.\n\nFurther Reading"
    }
}