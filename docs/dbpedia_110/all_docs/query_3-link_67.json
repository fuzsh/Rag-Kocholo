{
    "id": "dbpedia_110_3",
    "rank": 67,
    "data": {
        "url": "https://summernote.org/deep-dive/",
        "read_more_link": "",
        "language": "en",
        "title": "Deep dive",
        "top_image": "https://summernote.org/img/icons/1200x630.png",
        "meta_img": "https://summernote.org/img/icons/1200x630.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "github.com"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Super Simple WYSIWYG Editor on Bootstrap Summernote is a JavaScript library that helps you create WYSIWYG editors online.",
        "meta_lang": "",
        "meta_favicon": "/favicon.ico?",
        "meta_site_name": "Summernote - Super Simple WYSIWYG editor",
        "canonical_link": "https://summernote.org/deep-dive/",
        "text": "Initialization options\n\nCustomize by Initializing various options and modules.\n\nCustom toolbar, popover\n\nSummernote allows you to customise the toolbar.\n\nThis is a toolbar with font style only.\n\nYou can compose a toolbar with pre-shipped buttons.\n\nInsert\n\npicture: open image dialog\n\nlink: open link dialog\n\nvideo: open video dialog\n\ntable: insert a table\n\nhr: insert a horizontal rule\n\nFont Style\n\nfontname: set font family\n\nfontsize: set font size\n\nfontsizeunit: set font size unit\n\ncolor: set foreground and background color\n\nforecolor: set foreground color\n\nbackcolor: set background color\n\nbold: toggle font weight\n\nitalic: toggle italic\n\nunderline: toggle underline\n\nstrikethrough: toggle strikethrough\n\nsuperscript: toggle superscript\n\nsubscript: toggle subscript\n\nclear: clear font style\n\nParagraph style\n\nstyle: format selected block\n\nol: toggle ordered list\n\nul: toggle unordered list\n\nparagraph: dropdown for paragraph align\n\nheight: set line height\n\nMisc\n\nfullscreen: toggle fullscreen editing mode\n\ncodeview: toggle wysiwyg and html editing mode\n\nundo: undo\n\nredo: redo\n\nhelp: open help dialog\n\nThe following settings are default options for toolbar buttons.\n\nAir-mode has its own popover, not toolbar. You can customize it with popover.air option.\n\nYou can also setup buttons of the other popovers in the same way. The below settings are default options for popovers.\n\nBlockquote breaking level\n\nYou can set blockquote breaking level with blockquoteBreakingLevel option.\n\nEach configurable breaking level means:\n\n0 - No break, the new paragraph remains inside the quote.\n\n1 - Break the first blockquote in the ancestors list.\n\n2 - Break all blockquotes, so that the new paragraph is not quoted. (default)\n\nCustom styles\n\nYou can set your own selection of styles with the styleTags option.\n\nThe tags can be specified just by tag name (as with p or pre or h1-h6 above). It is also possible to customize the style in more detail by providing an object looking like:\n\nCustom fontNames\n\nYou can define fontNames items with the fontNames option.\n\nSummernote tests for fonts in fontNames before adding them to dropdown. This is a problem while using web fonts. It’s not easy picking a nice time to check the availability of web fonts. You can define a list of web fonts to be ignored with the fontNamesIgnoreCheck.\n\nSummernote automatically populates the font dropdown with the available fonts that are given on fontNames option. This includes the font set on the current dom element. If you only want to display a specific list of fonts on the dropdown, you can set the addDefaultFonts option to false along with the fontNames option. Example settings below will only add Arial and Arial Black fonts to the dropdown.\n\nCustom font size units\n\nYou can set the available font size units with the fontSizeUnits option.\n\nCustom line heights\n\nYou can override the default list and specify a custom one.\n\nCustom placeholder\n\nYou can define a placeholder with the placeholder option.\n\nSummernote can also be set to inherit the placeholder from the placeholder attribute on the dom element.\n\nAnd then set the inheritPlaceholder option as true during initialization.\n\nDialogs\n\nDialogs can be placed in body, not within Summernote. If you’re using Summernote within a modal dialog, please set this option as true.\n\nBy default, dialogs are shown and hidden without a fading effect. But you can turn it on by dialogsFade.\n\nDisable drag and drop\n\nYou can disable drag and drop with the disableDragAndDrop option.\n\nDisable shortcuts\n\nYou can disable custom shortcuts with the shortcuts option.\n\nDisable TAB\n\nYou can disable TAB/Shift+Tab intereaction with the tabDisable option. This will allow tabbing through fields in Forms.\n\nXSS protection for CodeView\n\nSummernote provides a XSS protection for CodeView. It consists of filtering tags and whitelist for iframe.\n\nWhitelist filter is turned on by default, but filtering tags is not. You can turn them on and off by options like below.\n\nAnd, you can also add your own whitelist domains and use custom tag filters. Please check the default filter before customizing.\n\nBut you have to remember that this protection only affects on front-end side – to prevent attacks thoroughly, you have to check it on back-end side again.\n\nBasic API\n\nYou can initialize Summernote with summernote.\n\nThen You can use the editor API through the summernote method. This is an example code for inserting ‘hello world’ text.\n\nIt calls the editor module’s insertText method with ‘hello world’. The first argument is a string type which represents the module and its method. The rest are method’s arguments.\n\nIf you call the API without module name, editor.methodName will be called.\n\nA module named editor supports several methods for editor’s basic behavior\n\ncodeview\n\nYou can toggle editable/codable view by API.\n\ncreateRange\n\nCreates a range object for current user selection.\n\ndisable, enable\n\nYou can disable editor by API.\n\nIf you want to enable editor again, call API with enable.\n\nDisable Spellchecking\n\nYou can disable Spellchecking in the Editing area with the spellCheck option.\n\nDisable Grammarly Browser Addon\n\nYou can disable the Grammarly Browser Addon (currently researching other Grammar Addons for their disabling options) by using the disableGrammar option.\n\nfocus\n\nSets focus in current summernote\n\nfullscreen\n\nYou can toggle Fullscreen view by API.\n\nisFullscreen\n\nYou can programmatically determine if the Summernote is in Fullscreen mode by using isFullscreen, which will return true or false.\n\ninterface\n\nYou can find programmatically which Summernote you are using. This will return one of three values: bs3, bs4 or lite.\n\nisEmpty\n\nReturns whether editor content is empty or not.\n\nThe editing area needs <p><br></p> for focus, even if the editor content is empty. So Summernote supports this method for helping to check if editor content is empty.\n\nreset\n\nClear the editor content and remove all stored history.\n\nsaveRange, restoreRange\n\nsaveRange saves current user selection internally.\n\nrestoreRange restores currently saved range\n\nundo, redo\n\nUndoes and Redoes the last command\n\nFont style API\n\nbackColor, foreColor\n\nSet the Background or Foreground color.\n\nbold, italic, underline, strikethrough\n\nSet font style.\n\nfontName\n\nSet font family.\n\nfontSize\n\nSet font size.\n\nfontSizeUnit\n\nSet font size unit.\n\nremoveFormat\n\nClean a style.\n\nsuperscript, subscript\n\nSet superscript or subscript.\n\nParagraph API\n\nformatH1-H6\n\nChange current paragraph as a <h1> ~ <h6>.\n\nformatPara\n\nChange current paragraph as a <p>.\n\nindent and outdent\n\nIndent or Outdent on current paragraph.\n\ninsertOrderedList\n\nToggle ordered list or unordered list\n\ninsertParagraph\n\nInsert a paragraph\n\njustify left, right and more\n\nSet the alignment of a Paragraph.\n\nlineHeight\n\nSet line height.\n\nInsertion API\n\ncreateLink, unlink\n\nCreate link and unlink.\n\ninsertImage\n\nInsert an image.\n\nYou can modify image with passing callback as second argument.\n\ninsertNode\n\nInsert an element or textnode.\n\ninsertText\n\nInsert text.\n\npasteHTML\n\nPaste HTML string.\n\nRange & Selection API\n\nsaveRange\n\nrefer to #saveRange\n\nrestoreRange\n\nrefer to #restorerange\n\ngetLastRange\n\nsummernote is saving a range object(WrappedRange) on current cursor.\n\nwhen summernote save a range with dom event\n\nkeydown\n\nkeyup\n\nfocus\n\nmouseup\n\npaste\n\nwhen summernote save a range with api\n\neditor.insertImage -> Image\n\neditor.insertNode -> Node\n\neditor.insertText -> TextNode\n\neditor.pasteHTML -> last Node of contents\n\neditor.insertHorizontalRule -> next sibling node of hr node\n\neditor.createLink -> link node\n\nsetLastRange\n\nYou can define custom range in node of summernote editable element.\n\nrange utility\n\ncreate WrappedRange Object\n\nrange utility make a WrappedRange Class’s instance\n\ncreate\n\ncreate WrappedRange Object From arguments or Browser Selection\n\ncreateFromNode\n\ncreate WrappedRange object from node\n\ncreateFromNodeBefore\n\ncreate WrappedRange from node before position\n\ncreateFromNodeAfter\n\ncreate WrappedRange from node after position\n\ncreateFromSelection\n\ncreate WrappedRange object from selection\n\nWrappedRange Object\n\nselect()\n\nselect update visible range\n\ncollapse(isCollapseToStart)\n\nsplitText()\n\nsplitText on range\n\ndeleteContents()\n\ndelete contents on range\n\nisCollapsed()\n\nreturns whether range was collapsed or not\n\nwrapBodyInlineWithPara()\n\nwrap inline nodes which children of body with paragraph\n\ninsertNode(node)\n\ninsert node at current cursor\n\npasteHTML(markup)\n\ninsert html at current cursor\n\ntoString()\n\nreturns text in range\n\ngetWordRange(findAfter)\n\nreturns range for word before(or after) cursor\n\ngetWordsMatchRange(regex)\n\nreturns range for words before cursor that match with a Regex\n\ngetClientRects()\n\nreturns a list of DOMRect objects representing the area of the screen occupied by the range.\n\nRange.getClientRects()\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects\n\nCallbacks\n\nSummernote support initialize callbacks and jquery’s custom event style callbacks.\n\nPosition of callbacks in options is changed after v0.7.0\n\nAfter v0.7.0, every callbacks should be wrapped by callbacks object.\n\nCallback only works with camel case string after v0.6.5\n\nLowercase string has been used for basic event name(ex: oninit, onenter, onfocus, onblur, onkeyup, onkeydown, onpaste). In contrast, callbacks name for advanced feature has been used with camel case string. This is inconsistent and confusing to use. So we rename all lowercase callback to camel case string.\n\nonBeforeCommand\n\nWIP: Need to work on an explanation\n\nonChange\n\nIE9-10: DOMCharacterDataModified, DOMSubtreeModified, DOMNodeInserted\n\nChrome, FF: input\n\nonChangeCodeview\n\nWIP: Need to work on an explanation\n\nonDialogShown\n\nWIP: Need to work on an explanation\n\nonEnter\n\nonFocus, onBlur, onBlurCodeview\n\nonImageLinkInsert\n\nOverride insertion of image by url\n\nonImageUpload\n\nOverride image upload handler(default: base64 dataURL on IMG tag). You can upload image to server or AWS S3: more…\n\nonImageUploadError\n\nWIP: Need to work on an explanation\n\nonInit\n\nonKeyup, onKeydown\n\nonMouseDown,onMouseUp\n\nonPaste\n\nonScroll\n\nWIP: Need to work on an explanation\n\nCustom button\n\nSummernote also supports custom buttons. If you want to create your own button, you can simply define and use with options.\n\nDefine button\n\nYou can create a button object with $.summernote.ui. This buttons objects have the below properties.\n\ncontents: contents to be displayed on the button\n\ntooltip: tooltip text when mouse over\n\nclick: callback function to be called when mouse is clicked\n\nBelow codes is about simple button for inserting text ‘hello’.\n\nYou can see render() which returns jquery object as button.\n\nUsing button with options\n\nLet’s learn how to use the button on toolbar.\n\nFirst, you can define buttons with option named buttons which is a set of key-value. You can define custom button on toolbar options.\n\nYou can also use custom button on popover in the same way.\n\nCustom icons\n\nSummernote supports the usage of your own custom icons. You can e.g. use SVG based icons instead of the default ones.\n\nDefine your own icons\n\nIf you want to override the default icons, configure summernote like this:\n\nModule system\n\nFor supporting expandable features, summernote was assembled by module system. This module system was built inspired by spring framework.\n\nKey terms\n\nModule: Module is a component.\n\nContext: Context is a kind of container. It has modules and editor’s states.\n\nRenderer: Renderer is a function for creating element.\n\nUI: UI is a set of renderers to build ui elements.\n\nModule\n\nModule is a component for implementing feature and it has lifecycle. Module also has helper methods or methods related with lifecycle.\n\ninitialize\n\nThis method will be called when editor is initialized by $(‘..’).summernote();. You can attach events and created elements on editor elements(eg, editable, …).\n\ndestroy\n\nThis method will be called when editor is destroyed by $(‘..’).summernote(‘destroy’); You should detach events and remove elements on initialize.\n\nshouldInitialize\n\nThis method is used for deciding whether module will be initialized or not.\n\nBelow are full codes of AutoLink module.\n\nFor more module examples: modules\n\nModule with options\n\nYou can define custom module with options.\n\nYou can called module’s method with external API.\n\nPlugin\n\nPlugin is a kind of external module. You can also define your own module with plugin.\n\nBelow link is a example of external module.\n\nplugin-hello\n\nPlugin was redesigned by new module system after v0.7.0\n\nOld plugin was hard to control editor states(eg, range, layout so on). After v0.7.0 plugin is redesigned by new module system. It is exactly same with module except surrounding module pattern.\n\nModules\n\nNotification / Information Area\n\nSummernote allows to add Notifications with Contextual Colouring to indicate the type of Notifcation, or to use the area for Informational Purposes.\n\nThe area appears at the bottom of Summernote when used in Normal Mode, and at the top of the editing area when Summernote is used in Air Mode.\n\nTo use the Notifcation area is simple and is useable by targetting the area using it’s class name .note-status-output.\n\nNotification elements can use any markup, but we’ve added some styling along the lines of Bootstrap’s Alerts. For e.g. to produce an Error or Danger alert you can use <div class=\"alert alert-danger\">This is an error</div>. You can also use alert-info, alert-warning, alert-success and alert-danger.\n\nYou can add the above message using jQuery or other Javascript method by targetting the output element, like (using jQuery):\n\nIf you want to display just Informational Text, you can also add Text without the Alert if you wish.\n\nYou can also place text to the right side by placing the Text within an element such as div, span or small and including the class .pull-right."
    }
}