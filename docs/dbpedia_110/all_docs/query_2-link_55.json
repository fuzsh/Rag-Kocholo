{
    "id": "dbpedia_110_2",
    "rank": 55,
    "data": {
        "url": "https://stackoverflow.com/questions/1547899/which-characters-make-a-url-invalid",
        "read_more_link": "",
        "language": "en",
        "title": "Which characters make a URL invalid?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/xEcUu.jpg?s=64",
            "https://www.gravatar.com/avatar/5e0ce85fc839930f04478fee1c47e136?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/cd501083459cbc21fccae78e2d03bee2?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/5a50f328cdde15c3fad1f1b06f24a9a8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/cP8pZ.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/8a5072384679d1ed9b102ba569544247?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/8cdedb7ab4f1ebe2cbabaf470bcea784?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/5Powi.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/1dad5941fe69ec5107e2a214316447a9?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/5d457fe9d0c94a181f7631c3598b4e61?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/a84b3cec58446b5eb5ffd7268dc8f8dd?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/8622b80c205b74d219ad2d0fee76c562?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/gkmSI.png?s=64",
            "https://www.gravatar.com/avatar/062d75e0158fad5460ef1045eebef728?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/e81a48bd5e5f7d6a7efa567b50cde452?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/1547899/ivc/31d9?prg=c70bd95f-67a5-42ac-b5de-1f480a25c262"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-10-10T13:10:51",
        "summary": "",
        "meta_description": "Which characters make a URL invalid?\n\nAre these valid URLs?\r\nexample.com/file[/].html\nhttp://example.com/file[/].html",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/1547899/which-characters-make-a-url-invalid",
        "text": "The '[' and ']' in this example are \"unwise\" characters but still legal. If the '/' in the []'s is meant to be part of file name then it is invalid since '/' is reserved and should be properly encoded:\n\nhttp://example.com/file[/].html\n\nTo add some clarification and directly address the question above, there are several classes of characters that cause problems for URLs and URIs.\n\nThere are some characters that are disallowed and should never appear in a URL/URI, reserved characters (described below), and other characters that may cause problems in some cases, but are marked as \"unwise\" or \"unsafe\". Explanations for why the characters are restricted are clearly spelled out in RFC-1738 (URLs) and RFC-2396 (URIs). Note the newer RFC-3986 (update to RFC-1738) defines the construction of what characters are allowed in a given context but the older spec offers a simpler and more general description of which characters are not allowed with the following rules.\n\nExcluded US-ASCII Characters disallowed within the URI syntax:\n\ncontrol = <US-ASCII coded characters 00-1F and 7F hexadecimal> space = <US-ASCII coded character 20 hexadecimal> delims = \"<\" | \">\" | \"#\" | \"%\" | <\">\n\nThe character \"#\" is excluded because it is used to delimit a URI from a fragment identifier. The percent character \"%\" is excluded because it is used for the encoding of escaped characters. In other words, the \"#\" and \"%\" are reserved characters that must be used in a specific context.\n\nList of unwise characters are allowed but may cause problems:\n\nunwise = \"{\" | \"}\" | \"|\" | \"\\\" | \"^\" | \"[\" | \"]\" | \"`\"\n\nCharacters that are reserved within a query component and/or have special meaning within a URI/URL:\n\nreserved = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\"\n\nThe \"reserved\" syntax class above refers to those characters that are allowed within a URI, but which may not be allowed within a particular component of the generic URI syntax. Characters in the \"reserved\" set are not reserved in all contexts. The hostname, for example, can contain an optional username so it could be something like ftp://user@hostname/ where the '@' character has special meaning.\n\nHere is an example of a URL that has invalid and unwise characters (e.g. '$', '[', ']') and should be properly encoded:\n\nhttp://mw1.google.com/mw-earth-vectordb/kml-samples/gp/seattle/gigapxl/$[level]/r$[y]_c$[x].jpg\n\nSome of the character restrictions for URIs and URLs are programming language-dependent. For example, the '|' (0x7C) character although only marked as \"unwise\" in the URI spec will throw a URISyntaxException in the Java java.net.URI constructor so a URL like http://api.google.com/q?exp=a|b is not allowed and must be encoded instead as http://api.google.com/q?exp=a%7Cb if using Java with a URI object instance.\n\nMost of the existing answers here are impractical because they totally ignore the real-world usage of addresses like:\n\nhttps://en.wikipedia.org/wiki/Möbius_strip or\n\nhttps://zh.wikipedia.org/wiki/Wikipedia:关于中文维基百科/en.\n\nFirst, a digression into terminology. What are these addresses? Are they valid URLs?\n\nHistorically, the answer was \"no\". According to RFC 3986, from 2005, such addresses are not URIs (and therefore not URLs, since URLs are a type of URIs). Per the terminology of 2005 IETF standards, we should properly call them IRIs (Internationalized Resource Identifiers), as defined in RFC 3987, which are technically not URIs but can be converted to URIs simply by percent-encoding all non-ASCII characters in the IRI.\n\nPer modern spec, the answer is \"yes\". The WHATWG Living Standard simply classifies everything that would previously be called \"URIs\" or \"IRIs\" as \"URLs\". This aligns the specced terminology with how normal people who haven't read the spec use the word \"URL\", which was one of the spec's goals.\n\nWhat characters are allowed under the WHATWG Living Standard?\n\nPer this newer meaning of \"URL\", what characters are allowed? In many parts of the URL, such as the query string and path, we're allowed to use arbitrary \"URL units\", which are\n\nURL code points and percent-encoded bytes.\n\nWhat are \"URL code points\"?\n\nThe URL code points are ASCII alphanumeric, U+0021 (!), U+0024 ($), U+0026 (&), U+0027 ('), U+0028 LEFT PARENTHESIS, U+0029 RIGHT PARENTHESIS, U+002A (*), U+002B (+), U+002C (,), U+002D (-), U+002E (.), U+002F (/), U+003A (:), U+003B (;), U+003D (=), U+003F (?), U+0040 (@), U+005F (_), U+007E (~), and code points in the range U+00A0 to U+10FFFD, inclusive, excluding surrogates and noncharacters.\n\n(Note that the list of \"URL code points\" doesn't include %, but that %s are allowed in \"URL code units\" if they're part of a percent-encoding sequence.)\n\nThe only place I can spot where the spec permits the use of any character that's not in this set is in the host, where IPv6 addresses are enclosed in [ and ] characters. Everywhere else in the URL, either URL units are allowed or some even more restrictive set of characters.\n\nWhat characters were allowed under the old RFCs?\n\nFor the sake of history, and since it's not explored fully elsewhere in the answers here, let's examine was allowed under the older pair of specs.\n\nFirst of all, we have two types of RFC 3986 reserved characters:\n\n:/?#[]@, which are part of the generic syntax for a URI defined in RFC 3986\n\n!$&'()*+,;=, which aren't part of the RFC's generic syntax, but are reserved for use as syntactic components of particular URI schemes. For instance, semicolons and commas are used as part of the syntax of data URIs, and & and = are used as part of the ubiquitous ?foo=bar&qux=baz format in query strings (which isn't specified by RFC 3986).\n\nAny of the reserved characters above can be legally used in a URI without encoding, either to serve their syntactic purpose or just as literal characters in data in some places where such use could not be misinterpreted as the character serving its syntactic purpose. (For example, although / has syntactic meaning in a URL, you can use it unencoded in a query string, because it doesn't have meaning in a query string.)\n\nRFC 3986 also specifies some unreserved characters, which can always be used simply to represent data without any encoding:\n\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\n\nFinally, the % character itself is allowed for percent-encodings.\n\nThat leaves only the following ASCII characters that are forbidden from appearing in a URL:\n\nThe control characters (chars 0-1F and 7F), including new line, tab, and carriage return.\n\n\"<>^`{|}\n\nEvery other character from ASCII can legally feature in a URL.\n\nThen RFC 3987 extends that set of unreserved characters with the following unicode character ranges:\n\n%xA0-D7FF / %xF900-FDCF / %xFDF0-FFEF / %x10000-1FFFD / %x20000-2FFFD / %x30000-3FFFD / %x40000-4FFFD / %x50000-5FFFD / %x60000-6FFFD / %x70000-7FFFD / %x80000-8FFFD / %x90000-9FFFD / %xA0000-AFFFD / %xB0000-BFFFD / %xC0000-CFFFD / %xD0000-DFFFD / %xE1000-EFFFD\n\nThese block choices from the old spec seem bizarre and arbitrary given the latest Unicode block definitions; this is probably because the blocks have been added to in the decade since RFC 3987 was written.\n\nFinally, it's perhaps worth noting that simply knowing which characters can legally appear in a URL isn't sufficient to recognise whether some given string is a legal URL or not, since some characters are only legal in particular parts of the URL. For example, the reserved characters [ and ] are legal as part of an IPv6 literal host in a URL like http://[1080::8:800:200C:417A]/foo but aren't legal in any other context, so the OP's example of http://example.com/file[/].html is illegal.\n\nSeveral of Unicode character ranges are valid HTML5, although it might still not be a good idea to use them.\n\nE.g., href docs say http://www.w3.org/TR/html5/links.html#attr-hyperlink-href:\n\nThe href attribute on a and area elements must have a value that is a valid URL potentially surrounded by spaces.\n\nThen the definition of \"valid URL\" points to http://url.spec.whatwg.org/, which says it aims to:\n\nAlign RFC 3986 and RFC 3987 with contemporary implementations and obsolete them in the process.\n\nThat document defines URL code points as:\n\nASCII alphanumeric, \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \":\", \";\", \"=\", \"?\", \"@\", \"_\", \"~\", and code points in the ranges U+00A0 to U+D7FF, U+E000 to U+FDCF, U+FDF0 to U+FFFD, U+10000 to U+1FFFD, U+20000 to U+2FFFD, U+30000 to U+3FFFD, U+40000 to U+4FFFD, U+50000 to U+5FFFD, U+60000 to U+6FFFD, U+70000 to U+7FFFD, U+80000 to U+8FFFD, U+90000 to U+9FFFD, U+A0000 to U+AFFFD, U+B0000 to U+BFFFD, U+C0000 to U+CFFFD, U+D0000 to U+DFFFD, U+E1000 to U+EFFFD, U+F0000 to U+FFFFD, U+100000 to U+10FFFD.\n\nThe term \"URL code points\" is then used in the statement:\n\nIf c is not a URL code point and not \"%\", parse error.\n\nin a several parts of the parsing algorithm, including the schema, authority, relative path, query and fragment states: so basically the entire URL.\n\nAlso, the validator http://validator.w3.org/ passes for URLs like \"你好\", and does not pass for URLs with characters like spaces \"a b\"\n\nOf course, as mentioned by Stephen C, it is not just about characters but also about context: you have to understand the entire algorithm. But since class \"URL code points\" is used on key points of the algorithm, it that gives a good idea of what you can use or not.\n\nSee also: Unicode characters in URLs"
    }
}