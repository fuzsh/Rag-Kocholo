{
    "id": "dbpedia_110_1",
    "rank": 19,
    "data": {
        "url": "https://stackoverflow.com/questions/1053052/a-generic-error-occurred-in-gdi-jpeg-image-to-memorystream",
        "read_more_link": "",
        "language": "en",
        "title": "A generic error occurred in GDI+, JPEG Image to MemoryStream",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/e8891617e36b8d1254eb3ce1a5662da4?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7a2f3ed877bf84267770c1e3f239f593?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7a2f3ed877bf84267770c1e3f239f593?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6bb92f74ede398da1dfb174f9c20b6d5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/241493f248ad6498e21f0e950e81a9fa?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/5c1cbe5f3e01e49b697246037e1424d6?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/iVPZSI5j.jpg?s=64",
            "https://www.gravatar.com/avatar/541820cf4d8844ddb0755ac69218c0cc?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/16588d551c14464ee93a1c0236f598f3?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6990ef9b5ef19bb52cde2079b4dcb740?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/d5874a9362fed58bb2df043c20345fa2?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/2791d8cece0395dbfffce089e22049d4?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/618e5a76e4ba8693f893c2d3168a2e42?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/cfbbd7d52aa835133cff999a958c16a0?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7cc41a365b6101ec43031279d0b7a685?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/b1b71a898ba59c7033a19fb138597d1a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/63d5c04d56de9a3f7929cd4ca850ccf4?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/c61bc50f8fae95366222135bc052e1b2?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0c405651ae367cc72fc219fdea0a8073?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/20128a2c56af6818d0313a2e5c3c0f8b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/c486c90e9e7a87a23ea89c09f27e33da?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/2fb67e7c516bef32091d90733b05631b?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/yxuzy.gif?s=64",
            "https://www.gravatar.com/avatar/ecbcde03e09db0037014c2aa21472ed4?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/kBxAM.png?s=64",
            "https://www.gravatar.com/avatar/053255df138a44b7080da541200ad9e4?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/zZ28V.png?s=64",
            "https://www.gravatar.com/avatar/9fed34b130b7b5ca92e9b84f6200e4a8?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/gIt1g.png?s=64",
            "https://i.sstatic.net/wAHqV.png?s=64",
            "https://i.sstatic.net/JEPib.png?s=64",
            "https://www.gravatar.com/avatar/b38a288be889934d1c1aea62705176a2?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/035042994a4582a568a460d0cc9f360f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/82b4b1442aea2da6060419da115db304?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/cf413aac057e188bcbabcdecdb78ff85?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/975522fb6bcf1e31a11506e580c4778d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/e5904bf89eb9c2c296a7a0f732d52280?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/8fnET.png?s=64",
            "https://i.sstatic.net/QkYlT.jpg?s=64",
            "https://i.sstatic.net/TWeNK.jpg?s=64",
            "https://stackoverflow.com/posts/1053052/ivc/31d9?prg=4449da82-96b7-4b9a-b2cd-1cfaf1e2b65d"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-06-27T15:40:29",
        "summary": "",
        "meta_description": "This seems to be a bit of an infamous error all over the web. So much so that I have been unable to find an answer to my problem as my scenario doesn't fit. An exception gets thrown when I save the...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/1053052/a-generic-error-occurred-in-gdi-jpeg-image-to-memorystream",
        "text": "OK I seem to have found the cause just by sheer luck and its nothing wrong with that particular method, it's further back up the call stack.\n\nEarlier I resize the image and as part of that method I return the resized object as follows. I have inserted two calls to the above method and a direct save to a file.\n\n// At this point the new bitmap has no MimeType // Need to output to memory stream using (var m = new MemoryStream()) { dst.Save(m, format); var img = Image.FromStream(m); //TEST img.Save(\"C:\\\\test.jpg\"); var bytes = PhotoEditor.ConvertImageToByteArray(img); return img; }\n\nIt appears that the memory stream that the object was created on has to be open at the time the object is saved. I am not sure why this is. Is anyone able to enlighten me and how I can get around this.\n\nI only return from a stream because after using the resize code similar to this the destination file has an unknown mime type (img.RawFormat.Guid) and Id like the Mime type to be correct on all image objects as it makes it hard write generic handling code otherwise.\n\nEDIT\n\nThis didn't come up in my initial search but here's the answer from Jon Skeet\n\nIf you are getting that error , then I can say that your application doesn't have a write permission on some directory.\n\nFor example, if you are trying to save the Image from the memory stream to the file system , you may get that error.\n\nPlease if you are using XP, make sure to add write permission for the aspnet account on that folder.\n\nIf you are using windows server (2003,2008) or Vista, make sure that add write permission for the Network service account.\n\nHope it help some one.\n\nI'll add this cause of the error as well in hopes it helps some future internet traveler. :)\n\nGDI+ limits the maximum height of an image to 65500\n\nWe do some basic image resizing, but in resizing we try to maintain aspect ratio. We have a QA guy who's a little too good at this job; he decided to test this with a ONE pixel wide photo that was 480 pixels tall. When the image was scaled to meet our dimensions, the height was north of 68,000 pixels and our app exploded with A generic error occurred in GDI+.\n\nYou can verify this yourself with test:\n\nint width = 480; var height = UInt16.MaxValue - 36; //succeeds at 65499, 65500 try { while(true) { var image = new Bitmap(width, height); using(MemoryStream ms = new MemoryStream()) { //error will throw from here image.Save(ms, ImageFormat.Jpeg); } height += 1; } } catch(Exception ex) { //explodes at 65501 with \"A generic error occurred in GDI+.\" }\n\nIt's too bad there's not a friendly .net ArgumentException thrown in the constructor of Bitmap.\n\nThis is an expansion / qualification of Fred's response which stated: \"GDI limits the height of an image to 65534\". We ran into this issue with one of our .NET applications, and having seen the post, our outsourcing team raised their hands in the air and said they couldn't fix the problem without major changes.\n\nBased on my testing, it's possible to create / manipulate images with a height larger than 65534, but the issue arises when saving to a stream or file IN CERTAIN FORMATS. In the following code, the t.Save() method call throws our friend the generic exception when the pixel height is 65501 for me. For reasons of curiosity, I repeated the test for width, and the same limit applied to saving.\n\nfor (int i = 65498; i <= 100000; i++) { using (Bitmap t = new Bitmap(800, i)) using (Graphics gBmp = Graphics.FromImage(t)) { Color green = Color.FromArgb(0x40, 0, 0xff, 0); using (Brush greenBrush = new SolidBrush(green)) { // draw a green rectangle to the bitmap in memory gBmp.FillRectangle(greenBrush, 0, 0, 799, i); if (File.Exists(\"c:\\\\temp\\\\i.jpg\")) { File.Delete(\"c:\\\\temp\\\\i.jpg\"); } t.Save(\"c:\\\\temp\\\\i.jpg\", ImageFormat.Jpeg); } } GC.Collect(); }\n\nThe same error also occurs if you write to a memory stream.\n\nTo get round it, you can repeat the above code and substitute ImageFormat.Tiff or ImageFormat.Bmp for ImageFormat.Jpeg.\n\nThis runs up to heights / widths of 100,000 for me - I didn't test the limits. As it happens .Tiff was a viable option for us.\n\nBE WARNED\n\nThe in memory TIFF streams / files consume more memory than their JPG counterparts.\n\nSOLVED - I had this exact problem. The fix, for me, was to up the disk quota for IUSR on the IIS server. In this instance, we have a catalog app with images of items and such. The upload quota for the \"Anonymous Web User\" was set to 100MB, which is the default for this particular hosting company's IIS servers. I upped it to 400MB and was able to upload images without error.\n\nThis might not be your issue, but if it is, it's an easy fix.\n\nJust to throw another possible solution on the pile, I'll mention the case I ran into with this error message. The method Bitmap.Save would throw this exception when saving an bitmap I had transformed and was displaying. I discovered it would not throw the exception if the statement had a breakpoint on it, nor would it if the Bitmap.Save was preceeded by Thread.Sleep(500) so I suppose there is some sort of resource contention going on.\n\nSimply copying the image to a new Bitmap object was enough to prevent this exception from appearing:\n\nnew Bitmap(oldbitmap).Save(filename);"
    }
}