{
    "id": "dbpedia_110_3",
    "rank": 35,
    "data": {
        "url": "https://developers.google.com/business-communications/rcs-business-messaging/guides/build/messages/send",
        "read_more_link": "",
        "language": "en",
        "title": "RCS Business Messaging Developer Docs",
        "top_image": "https://www.gstatic.com/devrel-devsite/prod/v80280542cfb431993d6ccf12e26a1c5862cffb314c3cfae3ff08e8374a93b7f7/developers/images/opengraph/google-blue.png",
        "meta_img": "https://www.gstatic.com/devrel-devsite/prod/v80280542cfb431993d6ccf12e26a1c5862cffb314c3cfae3ff08e8374a93b7f7/developers/images/opengraph/google-blue.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v80280542cfb431993d6ccf12e26a1c5862cffb314c3cfae3ff08e8374a93b7f7/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [
            "https://developers.google.com/frame/business-communications/rcs-business-messaging/guides/build/messages/send_ec5aa24366ea5cca33003e52ad2ad04d489f0132529478354d5b4fa4500ed0c4.frame"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v80280542cfb431993d6ccf12e26a1c5862cffb314c3cfae3ff08e8374a93b7f7/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/business-communications/rcs-business-messaging/guides/build/messages/send",
        "text": "RBM agents communicate with users by sending and receiving messages. To send messages to users, your agent sends message requests to the RCS Business Messaging API. A single request can include text, a rich card, an image, or a video as well as suggested replies and suggested actions.\n\nIf you send a message to a user whose device doesn't support RCS or doesn't have RCS enabled, the RBM platform returns a 404 error. In this case, you can attempt to reach the user through the fallback methods defined in your infrastructure.\n\nIf you send a message to an RCS user on a network where your agent isn't launched yet, or on a network that hasn't enabled RCS traffic, the RBM platform returns a 403 error.\n\nIf you send a message with features that a user's device doesn't support, the RBM platform returns an error and doesn't deliver your message.\n\nThe maximum size of the entire stringified AgentMessage is 250 KB. Rich cards and other media contribute to this size limit. The text portion of the message has its own limit of 3072 characters.\n\nRecipient is offline\n\nThe RBM platform still accepts a message for delivery if the recipient is offline. You receive a 200 OK response, and the RBM platform holds the message and attempts redelivery for 30 days. There's no need to ask RBM to send the message again.\n\nRBM deletes any undelivered messages 30 days after they were submitted.\n\nDepending on your agent's use case, you might want to revoke an undelivered message before this 30-day timeout. Revocation can prevent offline users from receiving an outdated message when they come back online. There are multiple ways to revoke a message:\n\nSend a revocation request to trigger the revocation.\n\nSet a message expiration to automatically revoke the message at the appropriate time.\n\nSet a message expiration\n\nIs your agent's message time sensitive? For example, OTPs are only valid for a brief period. Limited-time offers expire. And appointment reminders aren't relevant after the appointment date. To help ensure timely and relevant messages, set a message expiration. This can prevent offline users from receiving stale content when they come back online. Expiration is also a good cue to invoke your fallback messaging strategy so users get the info they need on time.\n\nTo set a message expiration, specify one of the following fields in the agent message:\n\nexpireTime: the exact time in UTC when the message expires.\n\nttl(time to live): the amount of time before the message expires.\n\nFor formatting and value options, see AgentMessage.\n\nOnce the message expires, the RBM platform stops trying to deliver the message, and it's automatically revoked. However, this could fail on rare occasions. For example, the API could trigger the revocation while the RBM platform was in the process of delivering the message. To confirm whether or not the expired message was successfully revoked, RBM will send a notification event to your webhook.\n\nThe maximum value for ttl and expireTime is 15 days after message submission.\n\nText\n\nThe simplest messages are made of text. Text messages are best suited to communicate information without the need for visuals, complex interaction, or response.\n\nExample\n\nThe following code sends a plain text message. For formatting and value options, see phones.agentMessages.create.\n\nBasic Message content - conversion of SMS\n\nCarriers have introduced billing models to support the move of SMS messages to RBM. An RBM message containing up to 160 UTF-8 characters is called a Basic Message.\n\nWhen constructing a request to send a Basic Message, remember that characters are counted as 1 byte (UTF-8). If you send a message containing special characters such as emoji or a multi-byte character set, each character counts as 2 UTF-8 characters.\n\nEnter some text in the box to check its length:\n\nOne-time passwords for user verification\n\nYou can use RBM to send one-time passwords (OTPs) for automatic user verification with the SMS Retriever API. To learn more about the SMS Retriever and related APIs, see the SMS Retriever documentation. For details about automatic user verification in apps that have registered with the SMS Retriever API, see this flow diagram.\n\nDuring the verification process, the SMS Retriever API listens for an RBM message. This message must contain an OTP and a hash that identifies the app. After the hash is matched with the app, the OTP is extracted and forwarded to the app for automatic user verification.\n\nHere's a sample RBM text message for user verification: Your code is <OTP> <app hash>.\n\nFor example, Your code is 123456 M8tue43FGT.\n\nMedia and PDF files\n\nWhen you send a message with an image, video, or PDF file, your agent must provide a publicly accessible URL for the content or directly upload the file. For media files, you can also specify a thumbnail image that lets users preview the content before clicking on it.\n\nThe RBM platform caches files for 60 days, and the API returns a file ID that your agent can include in messages to users. After 60 days, RBM removes files from the cache.\n\nSee the best practices for file size recommendations and limits.\n\nFile URL example\n\nThe following code sends an image. For formatting and value options, see AgentContentMessage.\n\nAlternatively, you can upload media prior to sending it in a message with files.create.\n\nFile upload example\n\nThe following code uploads a video file and a thumbnail file, then it sends both files in a message. For formatting and value options, see files.create and AgentContentMessage.\n\nSupported media types\n\nRBM supports the following media types:\n\nMedia type Document type Extension Works with rich cards application/pdf PDF .pdf No image/jpeg JPEG .jpeg, .jpg Yes image/gif GIF .gif Yes image/png PNG .png Yes video/h263 H263 video .h263 Yes video/m4v M4V video .m4v Yes video/mp4 MP4 video .mp4 Yes video/mpeg4 MPEG-4 video .mp4, .m4p Yes video/mpeg MPEG video .mpeg Yes video/webm WEBM video .webm Yes\n\nSuggested replies\n\nSuggested replies guide users through conversations by providing responses that your agent knows how to react to. Your agent sends suggested replies in suggestion chip lists or in rich cards.\n\nWhen a user taps a suggested reply, your agent receives an event that contains the reply's text and postback data.\n\nSuggested replies have a maximum of 25 characters.\n\nExample\n\nThe following code sends text with two suggested replies. For formatting and value options, see SuggestedReply.\n\nSuggested actions\n\nSuggested actions guide users through conversations by leaveraging the built-in functionality of the their devices. Your agent can suggest that users dial a number, open a location on a map, share a location, open a URL, or create a calendar event. Your agent sends suggested actions in suggestion chip lists or in rich cards.\n\nWhen a user taps a suggested action, your agent receives an event that contains the action's postback data.\n\nSuggested actions have a maximum of 25 characters.\n\nFor formatting and value options, see SuggestedAction.\n\nDial a number\n\nThe Dial action guides the user to dial a phone number specified by your agent. Phone numbers can only include digits (0-9), plus sign (+), asterisk (*), and number sign (#). The E.164 international format (for example, +14155555555) is supported but not required. That is, both +14155555555 and 1011 are valid entries.\n\nExample\n\nThe following code sends a dial action. For formatting and value options, see DialAction.\n\nView a location\n\nThe View location action displays a location in the user's default map app. You can specify the location either by latitude and longitude or with a query based on the user's current location. You can also set a custom label for the pin that displays in the map app.\n\nExample\n\nThe following code sends a view location action. For formatting and value options, see ViewLocationAction.\n\nShare a location\n\nThe Share location action lets the user send a location to your agent. The location the user specifies is not necessarily the user's location.\n\nExample\n\nThe following code sends a share location action. For formatting and value options, see ShareLocationAction.\n\nOpen a URL\n\nThe Open URL action opens the user's web browser to the specified URL. If an app is registered as a default handler for the URL, the app opens instead, and the icon for the action is the app's icon.\n\nExample\n\nThe following code sends an open URL action. For formatting and value options, see OpenUrlAction.\n\nCreate a calendar event\n\nThe Create calendar event action opens the user's calendar app and begins to create a new event with the specified information.\n\nExample\n\nThe following code sends a create calendar event action. For formatting and value options, see CreateCalendarEventAction.\n\nSuggestion chip list\n\nYour agent sends suggestion chip lists with messages to guide users' subsequent actions. The chip list only displays when the associated message is at the bottom of the conversation. Any subsequent messages in the conversation (from either a user or your agent) overwrite the chip list.\n\nThe chips in the list are suggested replies and suggested actions.\n\nChip lists contain a maximum of 11 suggestion chips, and each chip label can have a maximum of 25 characters.\n\nFor formatting and value options, see AgentContentMessage.\n\nRich cards\n\nWhen you need to send a chunk of related information, media, or suggestions, you should send a rich card. Rich cards allow your agent to send multiple units of information in a single message.\n\nRich cards can contain the following items:\n\nAn image or video\n\nTitle text\n\nDescription text\n\nA list of suggested replies and suggested actions (maximum 4)\n\nA rich card can contain all of the listed items, but a card must contain at least an image, video, or title to be valid. A rich card can contain a maximum of four suggested actions or suggested replies. It can't contain a combination of suggested actions and suggested replies on a single card.\n\nYour agent can send multiple rich cards together in a rich card carousel.\n\nCard height\n\nCards expand vertically to fit their contents. Rich cards have a minimum height of 112 DP and a maximum height of 344 DP. If the contents of a card are not large enough to fill the minimum card height, the card expands and fills the extra height with whitespace.\n\nMedia in rich cards must fit one of three heights:\n\nShort: 112 DP\n\nMedium: 168 DP\n\nTall: 264 DP\n\nIf the media doesn't fit the dimensions within the card given the selected height, the media preview is chosen by zooming and cropping the media.\n\nExample\n\nThe following code sends a rich card with an image and suggested replies. For formatting and value options, see RichCard.\n\nRich card carousels\n\nWhen you need to present a user with multiple options to choose between, use a rich card carousel. Carousels string together multiple rich cards, allowing users to compare items and react to each individually.\n\nCarousels may contain a minimum of two and a maximum of ten rich cards. Rich cards within carousels must conform to general rich card requirements for content and height.\n\nTruncation\n\nMuch like rich cards, many factors (such as screen resolution, pixel density, and user preferences) affect how cards appear to end users. In a carousel, however, the height of the first few cards defines the height of all the cards in the carousel, and card height affects title, description, and suggestion truncation.\n\nIf a device can't display all elements of a card because of display constraints or card height, RBM truncates the card until it can display on the device, using the following logic:\n\nReduce the description to one line.\n\nReduce the title to one line.\n\nOmit suggestions that don't fit in the card, starting from the end of the defined list.\n\nOmit the description.\n\nOmit the title.\n\nTo avoid truncation, keep titles and descriptions as short as possible. For tall media, use either a title and description or one suggestion. For medium media, use up to two suggestions. For short media, use up to three suggestions. To fit four suggestions, don't include media in the card.\n\nKeep cards roughly equivalent in terms of content sizing and length, and if necessary, front-load the carousel with larger cards to avoid truncation in following cards.\n\nExample\n\nThe following code sends a rich card carousel. For formatting and value options, see RichCard.\n\nMaximum message sizes\n\nThe maximum size of text that can be sent in an RBM message is 256kb. This includes the text that makes up the JSON payload when sending structured messages.\n\nThe maximum size of a file that can be sent through RBM is 200MB.\n\nA single RBM message can have only one media file attached."
    }
}