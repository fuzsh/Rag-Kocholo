{
    "id": "dbpedia_7587_2",
    "rank": 9,
    "data": {
        "url": "https://dl.acm.org/doi/abs/10.5555/766951.766967",
        "read_more_link": "",
        "language": "en",
        "title": "Programming methodology",
        "top_image": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "meta_img": "https://dl.acm.org/pb-assets/head-metadata/favicon-32x32-1574252172003.png",
        "images": [
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-dl-logo-white-1ecfb82271e5612e8ca12aa1b1737479.png",
            "https://dl.acm.org/doi/abs/10.5555/specs/products/acm/releasedAssets/images/acm-logo-1-ad466e729c8e2a97780337b76715e5cf.png",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/footer-logo1-45ae33115db81394d8bd25be65853b77.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/Default_image_lazy-0687af31f0f1c8d4b7a22b686995ab9b.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/loader-7e60691fbe777356dc81ff6d223a82a6.gif",
            "https://dl.acm.org/pb-assets/icons/DOs/default-profile-1543932446943.svg",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-dl-8437178134fce530bc785276fc316cbf.png",
            "https://dl.acm.org/specs/products/acm/releasedAssets/images/acm-logo-3-10aed79f3a6c95ddb67053b599f029af.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "School of Computer Science",
            "Carnegie Mellon University",
            "Pennsylvania View Profile",
            "John C. Reynolds"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/pb-assets/head-metadata/apple-touch-icon-1574252172393.png",
        "meta_site_name": "Guide books",
        "canonical_link": "https://dl.acm.org/doi/10.5555/766951.766967",
        "text": "chapter\n\nWhat do types mean?: from intrinsic to extrinsic semantics\n\nPages 309 - 327\n\nPublished: Publication History\n\nAbstract\n\nA definition of a typed language is said to be \"intrinsic\" if it assigns meanings to typings rather than arbitrary phrases, so that ill-typed phrases are meaningless. In contrast, a definition is said to be \"extrinsic\" if all phrases have meanings that are independent of their typings, while typings represent properties of these meanings.For a simply typed lambda calculus, extended with integers, recursion, and conditional expressions, we give an intrinsic denotational semantics and a denotational semantics of the underlying untyped language. We then establish a logical relations theorem between these two semantics, and show that the logical relations can be \"bracketed\" by retractions between the domains of the two semantics. From these results, we derive an extrinsic semantics that uses partial equivalence relations.\n\nReferences\n\n[1]\n\n{1} John C. Reynolds. Theories of Programming Languages. Cambridge University Press, Cambridge, England, 1998.\n\n[2]\n\n{2} Daniel Leivant. Typing and computational properties of lambda expressions. Theoretical Computer Science, 44(1):51-68, 1986.\n\n[3]\n\n{3} Gordon D. Plotkin. Lambda-definability and logical relations. Memorandum SAIRM-4, University of Edinburgh, Edinburgh, Scotland, October 1973.\n\n[4]\n\n{4} Dana S. Scott. Data types as lattices. SIAM Journal on Computing, 5(3):522-587, September 1976.\n\n[5]\n\n{5} David M. R. Park. The Y-combinator in Scott's lambda-calculus models. Symposium on Theory of Programming, University of Warwick, unpublished; cited in {6}, 1970.\n\n[6]\n\n{6} Christopher P. Wadsworth. The relation between computational and denotational properties for Scott's D∞-models of the lambda-calculus. SIAM Journal on Computing, 5(3):488-521, September 1976.\n\n[7]\n\n{7} David B. MacQueen and Ravi Sethi. A semantic model of types for applicative languages. In Conference Record of the 1982 ACM Symposium on LISP and Functional Programming, pages 243-252, New York, 1982. ACM.\n\n[8]\n\n{8} David B. MacQueen, Gordon D. Plotkin, and Ravi Sethi. An ideal model for recursive polymorphic types. Information and Control, 71(1-2):95-130, October-November 1986.\n\n[9]\n\n{9} Dana S. Scott. Lambda calculus: Some models, some philosophy. In Jon Barwise, H. Jerome Keisler, and Kenneth Kunen, editors, The Kleene Symposium, volume 101 of Studies in Logic and the Foundations of Mathematics, pages 223-265, Amsterdam, 1980. North-Holland.\n\n[10]\n\n{10} Andrej Bauer, Lars Birkedal, and Dana S. Scott. Equilogical spaces. To appear in Theoretical Computer Science, 2002.\n\n[11]\n\n{11} Anne Sjerp Troelstra, editor. Metamathematical Investigation of Intuitionistic Arithmetic and Analysis, volume 344 of Lecture Notes in Mathematics. Springer-Verlag, Berlin, 1973.\n\n[12]\n\n{12} Anne Sjerp Troelstra. Realizability. In Samuel R. Buss, editor, Handbook of Proof Theory, volume 137 of Studies in Logic and the Foundations of Mathematics, pages 407-473. Elsevier, Amsterdam, 1998.\n\n[13]\n\n{13} Georg Kreisel. Interpretation of analysis by means of constructive functionals of finite types. In Arend Heyting, editor, Constructivity in Mathematics, pages 101-128. North-Holland, Amsterdam, 1959.\n\n[14]\n\n{14} S. C. Kleene. Countable functionals. In Arend Heyting, editor, Constructivity in Mathematics, pages 81-100. North-Holland, Amsterdam, 1959.\n\n[15]\n\n{15} Roberto M. Amadio and Pierre-Louis Curien. Domains and Lambda-Calculi, volume 46 of Cambridge Tracts in Theoretical Computer Science. Cambridge University Press, Cambridge, England, 1998.\n\n[16]\n\n{16} John C. Reynolds. The meaning of types -- from intrinsic to extrinsic semantics. Research Series RS-00-32, BRICS, DAIMI, Department of Computer Science, University of Aarhus, December 2000.\n\n[17]\n\n{17} John C. Reynolds. An intrinsic semantics of intersection types (abstract of invited lecture). In Proceedings of the Workshop on Intersection Types and Related Systems, 2000. The slides for this lecture are available at ftp://ftp.cs.cmu.edu/user/jcr/intertype.ps.gz.\n\nCited By\n\nView all\n\nFridlender DGadea APagano MRodríguez LBiorthogonality for a Lazy languageProceedings of the 29th Symposium on the Implementation and Application of Functional Programming Languages10.1145/3205368.3205374(1-9)\n\nCastagna GNguyen KXu ZIm HLenglet SPadovani LPolymorphic functions with set-theoretic typesACM SIGPLAN Notices10.1145/2578855.253584049:1(5-17)\n\nCastagna GNguyen KXu ZIm HLenglet SPadovani LJagannathan SSewell PPolymorphic functions with set-theoretic typesProceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages10.1145/2535838.2535840(5-17)\n\nShow More Cited By\n\nIndex Terms\n\nWhat do types mean?: from intrinsic to extrinsic semantics\n\nSoftware and its engineering\n\nSoftware notations and tools\n\nFormal language definitions\n\nSemantics\n\nTheory of computation\n\nLogic\n\nSemantics and reasoning\n\nProgram constructs\n\nType structures\n\nProgram reasoning\n\nProgram semantics\n\nRecommendations\n\nPropositions as [Types]\n\nImage factorizations in regular categories are stable under pullbacks, so they model a natural modal operator in dependent type theory. This unary type constructor [A] has turned up previously in a syntactic form as a way of erasing computational ...\n\nJudgmental subtyping systems with intersection types and modal types\n\nWe study how to extend modal type systems based on intuitionistic modal logic S4 or S5 with a subtyping system based on intersection types. In the presence of four type constructors $${\\!}\\!\\rightarrow \\!{\\!},\\,{\\!}\\wedge {\\!},\\,\\square {}$$ , , , and $$\\Diamond {}$$ , the traditional approach using a binary subtyping relation does ...\n\nType checking and inference for polymorphic and existential types\n\nCATS '09: Proceedings of the Fifteenth Australasian Symposium on Computing: The Australasian Theory - Volume 94\n\nThis paper proves undecidability of type checking and type inference problems in some variants of typed lambda calculi with polymorphic and existential types. First, type inference in the domain-free polymorphic lambda calculus is proved to be ...\n\nInformation & Contributors\n\nInformation\n\nPublished In\n\n419 pages\n\nISBN:0387953493\n\nEditors:\n\nAnnabelle McIver\n\nDepartment of Computing, Macquarie University, Sydney, 2109 Australia\n\n,\n\nCarroll Morgan\n\nDepartment of Computer Science and Engineering, The University of New South Wales, Sydney, 2052 Australia\n\nPublisher\n\nSpringer-Verlag\n\nBerlin, Heidelberg\n\nPublication History\n\nPublished: 01 January 2003\n\nQualifiers\n\nChapter\n\nContributors\n\nOther Metrics\n\nBibliometrics & Citations\n\nBibliometrics\n\nArticle Metrics\n\n5\n\nTotal Citations\n\nView Citations\n\n0\n\nTotal Downloads\n\nDownloads (Last 12 months)0\n\nDownloads (Last 6 weeks)0\n\nOther Metrics\n\nCitations\n\nCited By\n\nView all\n\nFridlender DGadea APagano MRodríguez LBiorthogonality for a Lazy languageProceedings of the 29th Symposium on the Implementation and Application of Functional Programming Languages10.1145/3205368.3205374(1-9)\n\nCastagna GNguyen KXu ZIm HLenglet SPadovani LPolymorphic functions with set-theoretic typesACM SIGPLAN Notices10.1145/2578855.253584049:1(5-17)\n\nCastagna GNguyen KXu ZIm HLenglet SPadovani LJagannathan SSewell PPolymorphic functions with set-theoretic typesProceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages10.1145/2535838.2535840(5-17)\n\nBerger UHou TTyped vs. Untyped RealizabilityElectronic Notes in Theoretical Computer Science (ENTCS)10.1016/j.entcs.2012.08.005286(57-71)\n\nSchwinghammer JA typed semantics of higher-order store and subtypingProceedings of the 9th Italian conference on Theoretical Computer Science10.1007/11560586_31(390-405)\n\nView Options\n\nView options\n\nGet Access\n\nLogin options\n\nCheck if you have access through your login credentials or your institution to get full access on this article.\n\nSign in\n\nFull Access\n\nMedia\n\nFigures\n\nOther\n\nTables\n\nShare\n\nShare\n\nShare this Publication link\n\nCopied!\n\nCopying failed.\n\nShare on social media\n\nAffiliations\n\nJohn C. Reynolds\n\nComputer Science Department, School of Computer Science, Carnegie Mellon University, Pittsburgh, Pennsylvania\n\nRequest permissions Authors Info & Affiliations"
    }
}