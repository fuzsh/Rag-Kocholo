{
    "id": "dbpedia_1428_2",
    "rank": 11,
    "data": {
        "url": "https://www.postgresql.org/docs/current/server-start.html",
        "read_more_link": "",
        "language": "en",
        "title": "PostgreSQL: Documentation: 16: 19.3. Starting the Database Server",
        "top_image": "https://www.postgresql.org/media/img/about/press/elephant.png",
        "meta_img": "https://www.postgresql.org/media/img/about/press/elephant.png",
        "images": [
            "https://www.postgresql.org/media/img/about/press/elephant.png",
            "https://www.postgresql.org/media/img/atpostgresql.png",
            "https://www.postgresql.org/media/img/git.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-08T12:46:17",
        "summary": "",
        "meta_description": "19.3.&nbsp;Starting the Database Server # 19.3.1. Server Start-up Failures 19.3.2. Client Connection Problems Before anyone can access the database, you â€¦",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "PostgreSQL Documentation",
        "canonical_link": "https://www.postgresql.org/docs/current/server-start.html",
        "text": "Before anyone can access the database, you must start the database server. The database server program is called postgres.\n\nIf you are using a pre-packaged version of PostgreSQL, it almost certainly includes provisions for running the server as a background task according to the conventions of your operating system. Using the package's infrastructure to start the server will be much less work than figuring out how to do this yourself. Consult the package-level documentation for details.\n\nThe bare-bones way to start the server manually is just to invoke postgres directly, specifying the location of the data directory with the -D option, for example:\n\n$ postgres -D /usr/local/pgsql/data\n\nwhich will leave the server running in the foreground. This must be done while logged into the PostgreSQL user account. Without -D, the server will try to use the data directory named by the environment variable PGDATA. If that variable is not provided either, it will fail.\n\nNormally it is better to start postgres in the background. For this, use the usual Unix shell syntax:\n\n$ postgres -D /usr/local/pgsql/data >logfile 2>&1 &\n\nIt is important to store the server's stdout and stderr output somewhere, as shown above. It will help for auditing purposes and to diagnose problems. (See Section 25.3 for a more thorough discussion of log file handling.)\n\nThe postgres program also takes a number of other command-line options. For more information, see the postgres reference page and Chapter 20 below.\n\nThis shell syntax can get tedious quickly. Therefore the wrapper program pg_ctl is provided to simplify some tasks. For example:\n\npg_ctl start -l logfile\n\nwill start the server in the background and put the output into the named log file. The -D option has the same meaning here as for postgres. pg_ctl is also capable of stopping the server.\n\nNormally, you will want to start the database server when the computer boots. Autostart scripts are operating-system-specific. There are a few example scripts distributed with PostgreSQL in the contrib/start-scripts directory. Installing one will require root privileges.\n\nDifferent systems have different conventions for starting up daemons at boot time. Many systems have a file /etc/rc.local or /etc/rc.d/rc.local. Others use init.d or rc.d directories. Whatever you do, the server must be run by the PostgreSQL user account and not by root or any other user. Therefore you probably should form your commands using su postgres -c '...'. For example:\n\nsu postgres -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog'\n\nHere are a few more operating-system-specific suggestions. (In each case be sure to use the proper installation directory and user name where we show generic values.)"
    }
}