{
    "id": "wrong_mix_property_subsidiary_00101_1",
    "rank": 68,
    "data": {
        "url": "http://docs.oasis-open.org/cti/stix/v2.0/stix-v2.0-part1-stix-core.html",
        "read_more_link": "",
        "language": "en",
        "title": "STIX Version 2.0. Part 1: STIX Core Concepts",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://docs.oasis-open.org/cti/stix/v2.0/stix-v2.0-cs01-part1-stix-core_files/image001.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Part 1 defines STIX concepts and the structure of the STIX language.",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Structured Threat Information Expression (STIX) is a language and serialization format used to exchange cyber threat intelligence (CTI). STIX enables organizations to share CTI with one another in a consistent and machine readable manner, allowing security communities to better understand what computer-based attacks they are most likely to see and to anticipate and/or respond to those attacks faster and more effectively. STIX is designed to improve many different capabilities, such as collaborative threat analysis, automated threat exchange, automated detection and response, and more.\n\nIn response to lessons learned in implementing previous versions, STIX has been significantly redesigned and, as a result, omits some of the objects and properties defined in STIX 1.2.1 (see STIX Version 1.2.1 Part 1: Overview). The objects chosen for inclusion in STIX 2.0 represent a minimally viable product (MVP) that fulfills basic consumer and producer requirements for CTI sharing. Objects and properties not included in STIX 2.0, but deemed necessary by the community, will be included in future releases.\n\n​1.0​ IPR Policy\n\nThis Committee Specification is provided under the Non-Assertion Mode of the OASIS IPR Policy, the mode chosen when the Technical Committee was established. For information on whether any patents have been disclosed that may be essential to implementing this specification, and any offers of patent licensing terms, please refer to the Intellectual Property Rights section of the TCs web page (https://www.oasis-open.org/committees/cti/ipr.php).\n\n​1.1​ Terminology\n\nThe key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in [RFC2119].\n\nAll text is normative except for examples, the overview (section 1.4), and any text marked non-normative.\n\n​1.2​ Normative References\n\n[ IEEE 754-2008] IEEE Standard for Floating-Point Arithmetic, IEEE 754-2008, August 2008. [Online]. Available:http://ieeexplore.ieee.org/document/4610935/\n\n[ISO10646] ISO/IEC 10646:2014 Information technology -- Universal Coded Character Set (UCS), 2014. [Online]. Available:http://standards.iso.org/ittf/PubliclyAvailableStandards/c063182_ISO_IEC_10646_2014.zip\n\n[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, http://www.rfc-editor.org/info/rfc2119.\n\n[RFC3339] Klyne, G. and C. Newman, \"Date and Time on the Internet: Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,http://www.rfc-editor.org/info/rfc3339.\n\n[RFC3986] Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform Resource Identifier (URI): Generic Syntax\", STD 66, RFC 3986, DOI 10.17487/RFC3986, January 2005,http://www.rfc-editor.org/info/rfc3986.\n\n[RFC4122] Leach, P., Mealling, M., and R. Salz, \"A Universally Unique IDentifier (UUID) URN Namespace\", RFC 4122, DOI 10.17487/RFC4122, July 2005,http://www.rfc-editor.org/info/rfc4122.\n\n[RFC7159] Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March 2014. http://www.rfc-editor.org/info/rfc7159.txt.\n\n[TLP] Traffic Light Protocol, Version 1.0 (TLP). (2016, Aug. 25). FIRST. [Online]. Available:https://first.org/tlp\n\n​1.3​ Non-Normative References\n\n[CAPEC] Common Attack Pattern Enumeration and Classification (CAPEC). (2014, Nov. 7). The MITRE Corporation. [Online]. Available:http://capec.mitre.org.\n\n[Casey 2007] Casey, T., Threat Agent Library Helps Identify Information Security Risks\n\nSeptember 2007. [Online]. Available:https://communities.intel.com/servlet/JiveServlet/downloadBody/1151-102-1-1111/Threat Agent Library_07-2202w.pdf.\n\n[Casey 2015] Casey, T., Understanding Cyberthreat Motivations to Improve Defense, Intel, February 2015. [Online]. Available:https://communities.intel.com/servlet/JiveServlet/previewBody/23856-102-1-28290/understanding-cyberthreat-motivations-to-improve-defense-paper-l.pdf.\n\n[Goessner 2007] Goessner, S., JSONPath - XPath for JSON, February 2007. [Online]. Available:\n\nhttp://goessner.net/articles/JsonPath/.\n\n[JSON Schema] OASIS Cyber Threat Intelligence (CTI) TC, cti-stix2-json-schemas, OASIS. [Online]. Available:https://github.com/oasis-open/cti-stix2-json-schemas.\n\n[Mell 2005] Mell, P., Kent, K. and Nusbaum, J., Guide to Malware Incident Prevention and Handling, NIST Special Publication 800-83, November 2005. [Online]. Available:http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-83.pdf.\n\n[VERIS] VERIS Community Database. (n.d.). [Online]. Available:http://vcdb.org/\n\n​1.4​ Overview\n\n​1.4.1​ Graph-Based Model\n\nSTIX 2.0 is a connected graph of nodes and edges. STIX Domain Objects define the graph nodes and STIX relationships (including STIX Relationship Objects and embedded relationships) define the edges. The full set of STIX Domain Objects and STIX Relationship Objects are known as STIX Objects. This graph-based language conforms to common analysis approaches and allows for flexible, modular, structured, and consistent representations of CTI.\n\n​1.4.2​ STIX Domain Objects\n\nSTIX 2.0 defines a set of STIX Domain Objects (SDOs): Attack Pattern, Campaign, Course of Action, Identity, Indicator, Intrusion Set, Malware, Observed Data, Report, Threat Actor, Tool, and Vulnerability. Each of these objects corresponds to a concept commonly used in CTI. Using the building blocks of SDOs alongside STIX relationships, entities can create and share broad and comprehensive CTI.\n\nSTIX Domain Objects all share a common set of properties. These common properties provide standard capabilities such as versioning, data marking (representing how data can be shared and used), and extensibility.\n\nSTIX Domain Objects are defined in STIX Version 2.0. Part 2: STIX Objects.\n\n​1.4.3​ STIX Relationships\n\nA relationship is a link between STIX Objects that describes the way in which the objects are related. Most relationships are represented using STIX Relationship Objects (SROs), while other special embedded relationships are represented as ID references.\n\nThe generic Relationship object is one of two SROs and is used for most relationships in STIX. This generic Relationship object contains a property called relationship_type to describe more specifically what the relationship represents. This specification defines a set of known terms to use for the relationship_type property between SDOs of specific types. For example, the Indicator SDO defines a relationship from itself to Malware with a relationship_type of indicates to describe how the Indicator can be used to detect the presence of that Malware. In addition to the terms defined in the specification, STIX also allows for custom terms to be used as the relationship type.\n\nCurrently the only other SRO (besides a generic Relationship) is the Sighting relationship object. The Sighting object is used to capture cases where an entity has \"seen\" an SDO, such as sighting an indicator. Sighting is a separate SRO because it contains additional properties such as count that are only applicable to Sighting relationships. Other SROs may be defined in future versions of STIX if new relationships are identified that also require additional properties not present on the generic Relationship object.\n\nIn addition to relationships created using the SROs (Relationship and Sighting), STIX also uses ID references to represent embedded relationships. Embedded relationships are simply ID reference properties on STIX Objects that contain the ID of a different STIX Object. Embedded relationships are used when the property is an inherent part of the object and not something that a third party might add or something that might require a confidence. Because they represent a simply inherent linkage and have no other properties, an SRO is not needed to represent them. An embedded relationship can only be asserted by the creator of the object (\"object creator\") it is contained in.\n\nFor example, the entity that created a STIX Object is an inherent, factual part of that object and therefore that information is captured in an embedded relationship contained in the created_by_ref property rather than through the use of an SRO.\n\nEmbedded relationships (ID references) are described in section 3.2 and STIX Relationship Objects (SROs) are defined in section 3 of STIX Version 2.0. Part 2: STIX Objects.\n\n​1.4.4​ Cyber Observables\n\nSome parts of the STIX language require describing structured representation of observed objects and their properties in the cyber domain. These capabilities differ from the parts of STIX used to describe higher-level concepts in many ways and are therefore contained in a separate section of the specification. The Cyber Observable sections describe one or more observed data points, for example, information about a file that existed, a process that was observed running, or that network traffic occurred between two IPs. It describes the facts concerning what happened, but not necessarily the who or when, and never the why.\n\nCyber Observables are defined by two documents in this specification. STIX Version 2.0. Part 3: Cyber Observable Core Concepts describes and defines Cyber Observable Core Concepts, which are the parts of STIX that are specific to representation of cyber observables. STIX Version 2.0. Part 4: Cyber Observable Objects contains a library of Cyber Observable Objects: definitions for the types of things that can be observed.\n\n​1.4.5​ STIX Patterning\n\nIn order to enhance detection of possibly malicious activity on networks and endpoints, a standard language is needed to describe what to look for in a cyber environment. The STIX Patterning language allows matching against timestamped Cyber Observable data (such as STIX Observed Data Objects) collected by a threat intelligence platform or other similar system so that other analytical tools and systems can be configured to react and handle incidents that might arise. STIX Patterning is a general concept that can be used anywhere, but in STIX it is currently used by the Indicator object.\n\nSTIX Patterning is defined in STIX Version 2.0. Part 5: STIX Patterning.\n\n​1.4.6​ Vocabularies\n\nMany STIX Objects contain properties whose values can be selected from a defined set of values. These sets of values are called vocabularies and are defined in STIX in order to enhance interoperability by increasing the likelihood that different entities use the same exact string to represent the same concept. If used consistently, vocabularies make it less likely that one entity refers to the energy sector as Energy and another as Energy Sector, thereby making comparison and correlation easier.\n\nWhile using predefined values from STIX vocabularies is encouraged, in some cases this is not possible or desirable. STIX supports this by defining vocabularies as open, where entities are permitted to use values outside of the suggested vocabulary.\n\nSTIX vocabularies are defined in section 6. Properties that are defined as open vocabularies identify a suggested vocabulary from that section. For example, the Indicator labels property, as defined in section 2.5 of STIX Version 2.0. Part 2: STIX Objects, uses the Indicator Label vocabulary as defined in section 6.5.\n\n​1.4.7​ Serialization\n\nSTIX is defined independent of any specific storage or serialization. However, the mandatory-to-implement (MTI) serialization for STIX 2.0 is JSON [RFC7159]. In other words, all STIX-conformant tools have to implement support for JSON and can implement support for other serializations.\n\nJSON schemas have been developed by members of the Cyber Threat Intelligence Technical Committee and are available in the cti-stix2-json-schemas OASIS Open Repository [JSON Schema]. The JSON schemas are informative and serve as a best effort attempt to validate that STIX 2.0 content meets the structural requirements identified in this specification. This specification is the normative description of STIX 2.0.\n\nAs JSON is the MTI serialization, all examples in this document are expressed in JSON.\n\n​1.4.8​ Transporting STIX\n\nSTIX 2.0 is transport-agnostic, i.e., the structures and serializations do not rely on any specific transport mechanism. A companion CTI specification, TAXII, is designed specifically to transport STIX Objects. STIX provides a Bundle (see section 5) as a container for STIX Objects to allow for transportation of bulk STIX data, especially over non-TAXII communication mechanisms.\n\n​1.5​ Naming Requirements\n\n​1.5.1​ Property Names and String Literals\n\nIn the JSON serialization all property names and string literals MUST be exactly the same, including case, as the names listed in the property tables in this specification. For example, the SDO common property created_by_ref must result in the JSON key name \"created_by_ref\". Properties marked required in the property tables MUST be present in the JSON serialization.\n\n​1.5.2​ Reserved Names\n\nReserved property names are marked with a type called RESERVED and a description text of RESERVED FOR FUTURE USE. Any property name that is marked as RESERVED MUST NOT be present in STIX content conforming to this version of the specification.\n\n​1.6​ Document Conventions\n\n​1.6.1​ Naming Conventions\n\nAll type names, property names and literals are in lowercase, except when referencing canonical names defined in another standard (e.g. literal values from an IANA registry). Words in property names are separated with an underscore (_), while words in type names and string enumerations are separated with a hyphen (-). All type names, property names, object names, and vocabulary terms are between three and 250 characters long.\n\n​1.6.2​ Font Colors and Style\n\nThe following color, font and font style conventions are used in this document:\n\nThe Consolas font is used for all type names, property names and literals.\n\ntype names are in red with a light red background  threat-actor\n\nproperty names are in bold style  created_at\n\nliterals (values) are in blue with a blue background  malicious-activity\n\nAll relationship types are string literals, therefore they will also appear in blue with a blue background  related-to\n\nIn an object's property table, if a common property is being redefined in some way, then the background is dark grey.\n\nAll examples in this document are expressed in JSON. They are in Consolas 9-point font, with straight quotes, black text and a light grey background, and 2-space indentation.\n\nParts of the example may be omitted for conciseness and clarity. These omitted parts are denoted with the ellipses (...).\n\nThe term hyphen is used throughout this document to refer to the ASCII hyphen or minus character, which in Unicode is hyphen-minus, U+002D.\n\nThis section defines the common types used throughout STIX. These types will be referenced by the Type column in other sections. This section defines the names and permitted values of common types that are used in the STIX information model; it does not, however, define the meaning of any properties using these types. These types may be further restricted elsewhere in the document.\n\n​\n\n​2.1​ Boolean\n\nType Name: boolean\n\nA boolean is a value of either true or false. Properties with this type MUST have a value of true or false.\n\nThe JSON MTI serialization uses the JSON boolean type [RFC7159], which is a literal (unquoted) true or false.\n\nExamples\n\n{\n\n...\n\n\"summary\": true,\n\n...\n\n}\n\n​2.2​ External Reference\n\nType Name: external-reference\n\nExternal references are used to describe pointers to information represented outside of STIX. For example, a Malware object could use an external reference to indicate an ID for that malware in an external database or a report could use references to represent source material.\n\nThe JSON MTI serialization uses the JSON object type [RFC7159] when representing external-reference.\n\n​2.2.1​ Properties\n\n​2.2.2​ Requirements\n\nIn addition to the source_name property, at least one of the description, url, or external_id properties MUST be present.\n\nExamples\n\nAn external-reference to a VERIS Community Database (VCDB) [VERIS] entry\n\n{\n\n...\n\n\"external_references\": [\n\n{\n\n\"source_name\": \"veris\",\n\n\"external_id\": \"0001AA7F-C601-424A-B2B8-BE6C9F5164E7\",\n\n\"url\": \"https://github.com/vz-risk/VCDB/blob/master/data/json/0001AA7F-C601-424A-B2B8-\n\nBE6C9F5164E7.json\",\n\n\"hashes\": {\n\n\"SHA-256\": \"6db12788c37247f2316052e142f42f4b259d6561751e5f401a1ae2a6df9c674b\"\n\n}\n\n}\n\n],\n\n...\n\n}\n\nAn external-reference from the CAPEC [CAPEC] repository\n\n{\n\n...\n\n\"external_references\": [\n\n{\n\n\"source_name\": \"capec\",\n\n\"external_id\": \"CAPEC-550\"\n\n}\n\n],\n\n...\n\n}\n\nAn external-reference from the CAPEC repository with URL\n\n{\n\n...\n\n\"external_references\": [\n\n{\n\n\"source_name\": \"capec\",\n\n\"external_id\": \"CAPEC-550\",\n\n\"url\": \"http://capec.mitre.org/data/definitions/550.html\"\n\n}\n\n],\n\n...\n\n}\n\nAn external-reference to ACME Threat Intel's report document\n\n{\n\n...\n\n\"external_references\": [\n\n{\n\n\"source_name\": \"ACME Threat Intel\",\n\n\"description\": \"Threat report\",\n\n\"url\": \"http://www.example.com/threat-report.pdf\"\n\n}\n\n],\n\n...\n\n}\n\nAn external-reference to a Bugzilla item\n\n{\n\n...\n\n\"external_references\": [\n\n{\n\n\"source_name\": \"ACME Bugzilla\",\n\n\"external_id\": \"1370\",\n\n\"url\": \"https://www.example.com/bugs/1370\"\n\n}\n\n],\n\n...\n\n}\n\nAn external-reference to an offline threat report (i.e., e-mailed, offline, etc.)\n\n{\n\n...\n\n\"external_references\": [\n\n{\n\n\"source_name\": \"ACME Threat Intel\",\n\n\"description\": \"Threat report\"\n\n}\n\n],\n\n...\n\n}\n\n​2.3​ Float\n\nType Name: float\n\nThe float data type represents an IEEE 754 [IEEE 754-2008] double-precision number (e.g., a number with a fractional part). However, because the values ±Infinity and NaN are not representable in JSON, they are not valid values in STIX.\n\nIn the JSON MTI serialization, floating point values are represented by the JSON number type [RFC7159].\n\n​\n\nExamples\n\n{\n\n...\n\n\"distance\": 8.321,\n\n...\n\n}\n\n​2.4​ Hashes\n\nType Name: hashes\n\nThe Hashes type represents 1 or more cryptographic hashes, as a special set of key/value pairs. Accordingly, the name of each hashing algorithm MUST be specified as a key in the dictionary and MUST identify the name of the hashing algorithm used to generate the corresponding value. This name SHOULD either be one of the values defined in the hash-algorithm-ov OR a custom value prepended with x_ (e.g., x_custom_hash).\n\nKeys MUST be unique in each hashes property, MUST be in ASCII, and are limited to the characters a-z (lowercase ASCII), A-Z (uppercase ASCII), numerals 0-9, hyphen (-), and underscore (_). Keys SHOULD be no longer than 30 ASCII characters in length, MUST have a minimum length of 3 ASCII characters, MUST be no longer than 256 ASCII characters in length.\n\n​\n\nExamples\n\nSHA-256 and Custom Hash\n\n{\n\n\"SHA-256\": \"6db12788c37247f2316052e142f42f4b259d6561751e5f401a1ae2a6df9c674b\",\n\n\"x_foo_hash\": \"aaaabbbbccccddddeeeeffff0123457890\"\n\n}\n\n​2.5​ Identifier\n\nType Name: identifier\n\nAn identifier universally and uniquely identifies a SDO, SRO, Bundle, or Marking Definition. Identifiers MUST follow the form object-type--UUIDv4, where object-type is the exact value (all type names are lowercase strings, by definition) from the type property of the object being identified or referenced and where the UUIDv4 is an RFC 4122-compliant Version 4 UUID. The UUID MUST be generated according to the algorithm(s) defined in RFC 4122, section 4.4 (Version 4 UUID) [RFC4122].\n\nThe JSON MTI serialization uses the JSON string type [RFC7159] when representing identifier.\n\n​Examples\n\n{\n\n...\n\n\"type\": \"indicator\",\n\n\"id\": \"indicator--e2e1a340-4415-4ba8-9671-f7343fbf0836\",\n\n...\n\n}\n\n{\n\n...\n\n\"type\": \"threat-actor\",\n\n\"id\": \"threat-actor--5ee9db36-4a1e-4dd4-bb32-2551eda97f4a\",\n\n...\n\n}\n\n​2.6​ Integer\n\nType Name: integer\n\nThe integer data type represents a whole number. Unless otherwise specified, all integers MUST be capable of being represented as a signed 64-bit value ([-(2**63)+1, (2**63)-1]). Additional restrictions MAY be placed on the type as described where it is used.\n\nIn the JSON MTI serialization, integers are represented by the JSON number type [RFC7159].\n\nExamples\n\n{\n\n...\n\n\"count\": 8,\n\n...\n\n}\n\n​2.7​ Kill Chain Phase\n\nType Name: kill-chain-phase\n\nThe kill-chain-phase represents a phase in a kill chain, which describes the various phases an attacker may undertake in order to achieve their objectives.\n\nThe JSON MTI serialization uses the JSON object type [RFC7159] when representing kill-chain-phase.\n\nWhen referencing the Lockheed Martin Cyber Kill Chain, the kill_chain_name MUST be lockheed-martin-cyber-kill-chain.\n\n​\n\nExamples\n\nExample specifying the reconnaissance phase from the Lockheed Martin Cyber Kill Chain\n\n{\n\n...\n\n\"kill_chain_phases\": [\n\n{\n\n\"kill_chain_name\": \"lockheed-martin-cyber-kill-chain\",\n\n\"phase_name\": \"reconnaissance\"\n\n}\n\n],\n\n...\n\n}\n\nExample specifying the pre-attack phase from the foo kill-chain\n\n{\n\n...\n\n\"kill_chain_phases\": [\n\n{\n\n\"kill_chain_name\": \"foo\",\n\n\"phase_name\": \"pre-attack\"\n\n}\n\n],\n\n...\n\n}\n\n​2.8​ List\n\nType Name: list\n\nThe list type defines a sequence of values ordered based on how they appear in the list. The phrasing list of type <type> is used to indicate that all values within the list MUST conform to the specified type. For instance, list of type integer means that all values of the list must be of the integer type. This specification does not specify the maximum number of allowed values in a list, however every instance of a list MUST have at least one value. Specific STIX object properties may define more restrictive upper and/or lower bounds for the length of the list.\n\nEmpty lists are prohibited in STIX and MUST NOT be used as a substitute for omitting the property if it is optional. If the property is required, the list MUST be present and MUST have at least one value.\n\nThe JSON MTI serialization uses the JSON array type [RFC7159], which is an ordered list of zero or more values.\n\nExamples\n\n{\n\n...\n\n\"observed_data_refs\": [\n\n\"observed-data--b67d30ff-02ac-498a-92f9-32f845f448cf\",\n\n\"observed-data--c96f4120-2b4b-47c3-b61f-eceaa54bd9c6\",\n\n\"observed-data--787710c9-1988-4a1b-9761-a2de5e19c62f\"\n\n],\n\n...\n\n}\n\n​2.9​ Open Vocabulary\n\nType Name: open-vocab\n\nThe open-vocab type is represented as a string. For properties that use this type there will be a list of suggested values, known as the suggested vocabulary, that is identified in the definition for that property. The suggested vocabularies are defined in section 6. The value of the property SHOULD be chosen from the suggested vocabulary but MAY be any other string value. Values that are not from the suggested vocabulary SHOULD be all lowercase (where lowercase is defined by the locality conventions) and SHOULD use hyphens instead of spaces or underscores as word separators.\n\nA consumer that receives STIX content with one or more open-vocab terms not defined in the suggested vocabulary MAY ignore those values.\n\nThe JSON MTI serialization uses the JSON string type [RFC7159] when representing open-vocab.\n\nExamples\n\nExample using value from the suggested vocabulary. In this example the Indicator labels property is an open vocabulary and we are using one of the suggested vocabulary values.\n\n{\n\n...,\n\n\"labels\": [\"malicious-activity\"],\n\n...\n\n}\n\nExample using a custom value. In this example, for the same Indicator labels property, we are not using a value in the suggested vocabulary.\n\n{\n\n...,\n\n\"labels\": [\"pbx-fraud-activity\"],\n\n...\n\n}\n\n​2.10​ String\n\nType Name: string\n\nThe string data type represents a finite-length string of valid characters from the Unicode coded character set [ISO10646]. Unicode incorporates ASCII and the characters of many other international character sets.\n\nThe JSON MTI serialization uses the JSON string type [RFC7159], which mandates the UTF-8 encoding for supporting Unicode.\n\nExamples\n\n{\n\n...\n\n\"name\": \"The Black Vine Cyberespionage Group\",\n\n...\n\n}\n\n​2.11​ Timestamp\n\nType Name: timestamp\n\nThe timestamp type defines how dates and times are represented in STIX.\n\nThe JSON MTI serialization uses the JSON string type [RFC7159] when representing timestamp.\n\n​2.11.1​ Requirements\n\nThe timestamp property MUST be a valid RFC 3339-formatted timestamp [RFC3339] using the format YYYY-MM-DDTHH:mm:ss[.s+]Z where the s+ represents 1 or more sub-second values. The brackets denote that sub-second precision is optional, and that if no digits are provided, the decimal place MUST NOT be present.\n\nThe timestamp MUST be represented in the UTC timezone and MUST use the Z designation to indicate this.\n\nExamples\n\n{\n\n...\n\n\"created\": \"2016-01-20T12:31:12.123Z\",\n\n...\n\n}\n\nThis section outlines the common properties and behavior across all SDOs and SROs.\n\nThe JSON MTI serialization uses the JSON object type [RFC7159] when representing all STIX Objects.\n\n​3.1​ Common Properties\n\n​3.2​ IDs and References\n\nThe id property universally and uniquely identifies an SDO, SRO, Bundle, or Marking Definition. It MUST meet the requirements of the identifier type (see section 2.5).\n\nAll STIX Objects (as well as Bundle and Marking Definition) use identifiers as defined by the identifier type. The identifier type is also used to define properties that are ID references to other constructs (such as the created_by_ref property in all STIX Objects). Resolving an ID reference is the process of identifying and obtaining the actual object referred to by the ID reference property. ID references resolve to an object when the value of the ID reference property (e.g., created_by_ref) is an exact match with the id property of another object. If a consumer has access to multiple versions of an object, the consumer SHOULD interpret any references to that object as referring to the latest version as defined in section 3.4. ID references can refer to objects to which the consumer/producer may not currently have. This specification does not address the implementation of ID reference resolution.\n\n​3.3​ Object Creator\n\nThe object creator is the entity (e.g., system, organization, instance of a tool) that generates the id property for a given object. Object creators are represented as Identity objects. An embedded relationship to the Identity object representing the object creator MAY be captured in the created_by_ref property (or that property can be left blank, meaning the object creator is anonymous).\n\nEntities that re-publish an object from another entity without making any changes to the object, and thus maintaining the original id, are not considered the object creator and MUST NOT change the created_by_ref property. An entity that accepts objects and republishes them with modifications, additions, or omissions MUST create a new id for the object. They are considered the object creator of the new object for purposes of versioning.\n\n​3.4​ Versioning\n\nVersioning is the mechanism that object creators use to update and revoke the STIX Objects that they create. This section describes the versioning process and normative rules for performing versioning and revocation. STIX Objects are versioned using the revoked, created, and modified properties. See the properties table in section 3.1 for full definitions and normative usage of those properties.\n\nSTIX Objects MAY be versioned in order to update, add, or remove information. A version of a STIX Object is identified uniquely by the combination of its id and modified properties. The first version of the object MUST have the same timestamp for the created and modified properties. More recent values of the modified property indicate later versions of the object. Implementations MUST consider the version of the STIX Object with the most recent modified value to be the most recent state of the object. For every new version of an object, the modified property MUST be updated to represent the time that the new version was created. If a consumer receives two objects that are different, but have the same id and modified timestamp, it is not defined how the consumer handles the objects. This specification does not address how implementations should handle versions of the object that are not current.\n\nSTIX Objects have a single object creator, the entity that generates the id for the object and creates the first version. The object creator may (but not necessarily will) be identified in the created_by_ref property of the object. Only the object creator is permitted to create new versions of a STIX Object. Producers other than the object creator MUST NOT create new versions of that object. If a producer other than the object creator wishes to create a new version, they MUST instead create a new object with a new id. They SHOULD additionally create a derived-from Relationship object to relate their new object to the original object that it was derived from.\n\nEvery representation (each time the object version is serialized and shared) of a version of an object (identified by the object's id and modified properties) MUST always have the same set of properties and the same values for each property. In order to change the value of any property, or to add or remove properties, the modified property MUST be updated with the time of the change to indicate a new version.\n\nObjects can also be revoked, which means that they are no longer considered valid by the object creator. As with issuing a new version, only the object creator is permitted to revoke a STIX Object. A value of true in the revoked property indicates that an object (including the current version and all past versions) has been revoked. Revocation is permanent: once an object is marked as revoked, later versions of that object MUST NOT be created. Changing the revoked property to indicate that an object is revoked is an update to the object, and therefore its modified property MUST be updated at the same time. This specification does not address how implementations should handle revoked data.\n\n​3.4.1​ Versioning Timestamps\n\nThere are two timestamp properties used to indicate when STIX Objects were created and modified: created and modified. The created property indicates the time the first version of the object was created. The modified property indicates the time the specific version of the object was created. The modified time MUST NOT be earlier than the created time. This specification does not address the specifics of how implementations should determine the value of the creation and modification times for use in the created and modified properties (e.g. one system might use when the object is first added to the local database as the creation time, while another might use the time when the object is first distributed as STIX).\n\n​3.4.2​ New Version or New Object?\n\nEventually an implementation will encounter a case where a decision must be made regarding whether a change is a new version of an existing object or is different enough that it is a new object. This is generally considered a data quality problem and therefore this specification does not provide any normative text.\n\nHowever, to assist implementers and promote consistency across implementations, some rules of thumb are provided. Any time a change indicates a material change to the meaning of the object, a new object with a different id should be used. A material change is any change that the object creator believes substantively changes the meaning of the object. As an example, an object creator might consider changing a Threat Actor from one country to another is a material change. These decisions are always made by the object creator. The object creator should also think about relationships to the object when deciding if a change is material. If the change would invalidate the usefulness of relationships to the object, then the change is considered material and a new object id should be used.\n\nExamples\n\nExample of a new version\n\nOne object creator has decided that the previous name they used for a SDO is incorrect. They consider that change as an update to the object.\n\nNote: the IDs in the example below use a simplified format to help illustrate the changing IDs more clearly.\n\nExample of derived object\n\nOne object creator has decided that the previous name they used for a SDO is incorrect. They consider that change fundamental to the meaning of the object and therefore revoke the object and issue a new one.\n\nExample consumer workflow\n\nThis section describes an example workflow where a consumer receives multiple updates to a particular object. (In this example, the STIX Objects have been truncated for brevity.)\n\n​\n\nExample object creator workflow\n\nThis section describes an example workflow where a object creator publishes multiple updates to a particular object. This scenario assumes a human using a STIX implementation. (In this example, the STIX Objects have been truncated for brevity.)\n\n​3.5​ Common Relationships\n\nEach SDO has its own set of relationship types that are specified in the definition of that SDO. The following common relationship types are defined for all SDOs. See section 1.4.3 for more information about relationships.\n\n​3.6​ Reserved Properties\n\nThis section defines property names that are reserved for future use in revisions of this document. The property names defined in this section MUST NOT be used for the name of any Custom Property.\n\nProperties that are currently reserved across all STIX Objects are:\n\nconfidence\n\nseverity\n\naction\n\nusernames\n\nphone_numbers\n\naddresses\n\nfirst_seen_precision\n\nlast_seen_precision\n\nvalid_from_precision\n\nvalid_until_precision\n\nIn addition, the following object names are reserved:\n\nincident\n\ninfrastructure\n\nData markings represent restrictions, permissions, and other guidance for how data can be used and shared. For example, data may be shared with the restriction that it must not be re-shared, or that it must be encrypted at rest. In STIX, data markings are specified using the marking-definition object. These definitions are applied to complete STIX Objects using object markings and to individual properties of STIX Objects via granular markings.\n\nSome types of marking definitions or trust groups have rules about which markings override other markings or which markings can be additive to other markings. This specification does not define rules for how multiple markings applied to the same object or property should be interpreted.\n\n​4.1​ Marking Definition\n\nType Name: marking-definition\n\nThe marking-definition object represents a specific marking. Data markings typically represent handling or sharing requirements for data, and are applied in the object_marking_refs and granular_markings properties on STIX Objects, which reference a list of IDs for marking-definition objects.\n\nTwo marking definition types are defined in this specification: TLP, to capture TLP markings, and Statement, to capture text marking statements. In addition, it is expected that the FIRST Information Exchange Policy (IEP) will be included in a future version once a machine-usable specification for it has been defined.\n\nUnlike STIX Objects, Marking Definition objects cannot be versioned because it would allow for indirect changes to the markings on a STIX Object. For example, if a Statement marking is changed from \"Reuse Allowed\" to \"Reuse Prohibited\", all STIX Objects marked with that Statement marking would effectively have an updated marking without being updated themselves. Instead, a new Statement marking with the new text should be created and the marked objects updated to point to the new marking.\n\nThe JSON MTI serialization uses the JSON object type [RFC7159] when representing marking-definition.\n\n​4.1.1​ Properties\n\n​4.1.2​ Relationships\n\nData Marking is not a STIX Object and MUST NOT have any SRO relationships to it or from it. This table lists the embedded relationships by property name along with their corresponding target.\n\nEmbedded Relationships\n\ncreated_by_ref\n\nidentity\n\nobject_marking_refs\n\nmarking-definition\n\n​\n\n​4.1.3​ Statement Marking Object Type\n\nThe Statement marking type defines the representation of a textual marking statement (e.g., copyright, terms of use, etc.) in a definition. The value of the definition_type property MUST be statement when using this marking type. Statement markings are generally not machine-readable and this specification does not define any behavior or actions based on their values.\n\nContent may be marked with multiple Statement marking types that do not override each other. In other words, the same content can be marked both with a statement saying \"Copyright 2016\" and a statement saying \"Terms of use are ...\" and both statements apply.\n\nExamples\n\n{\n\n\"type\": \"marking-definition\",\n\n\"id\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\",\n\n\"created\": \"2016-08-01T00:00:00.000Z\",\n\n\"definition_type\": \"statement\",\n\n\"definition\": {\n\n\"statement\": \"Copyright 2016, Example Corp\"\n\n}\n\n}\n\n​4.1.4​ TLP Marking Object Type\n\nThe TLP marking type defines how you would represent a Traffic Light Protocol (TLP) marking in a definition property. The value of the definition_type property MUST be tlp when using this marking type.\n\nThe following standard marking definitions MUST be used to reference or represent TLP markings. Other instances of tlp-marking MUST NOT be used (the only instances of TLP marking definitions permitted are those defined here).\n\nwhite\n\n{\n\n\"type\": \"marking-definition\",\n\n\"id\": \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\",\n\n\"created\": \"2017-01-20T00:00:00.000Z\",\n\n\"definition_type\": \"tlp\",\n\n\"definition\": {\n\n\"tlp\": \"white\"\n\n}\n\n}\n\ngreen\n\n{\n\n\"type\": \"marking-definition\",\n\n\"id\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\",\n\n\"created\": \"2017-01-20T00:00:00.000Z\",\n\n\"definition_type\": \"tlp\",\n\n\"definition\": {\n\n\"tlp\": \"green\"\n\n}\n\n}\n\namber\n\n{\n\n\"type\": \"marking-definition\",\n\n\"id\": \"marking-definition--f88d31f6-486f-44da-b317-01333bde0b82\",\n\n\"created\": \"2017-01-20T00:00:00.000Z\",\n\n\"definition_type\": \"tlp\",\n\n\"definition\": {\n\n\"tlp\": \"amber\"\n\n}\n\n}\n\nred\n\n{\n\n\"type\": \"marking-definition\",\n\n\"id\": \"marking-definition--5e57c739-391a-4eb3-b6be-7d15ca92d5ed\",\n\n\"created\": \"2017-01-20T00:00:00.000Z\",\n\n\"definition_type\": \"tlp\",\n\n\"definition\": {\n\n\"tlp\": \"red\"\n\n}\n\n}\n\n​4.2​ Object Markings\n\nObject Markings apply data markings to an entire STIX Object or Marking Definition and all of its contents. Object Markings are specified as embedded relationships in the object_marking_refs property, which is an optional list of IDs for marking-definition objects. The referenced markings apply to that STIX Object or Marking Definition and all of its contents. Changes to the object_marking_refs property (and therefore the markings applied to the object) are treated the same as changes to any other properties on the object and follow the same rules for versioning.\n\n​\n\nExamples\n\nThis example marks the Indicator and all its properties with the Marking Definition referenced by the ID.\n\n{\n\n\"type\": \"indicator\",\n\n\"id\": \"indicator--b346b4b3-f4b7-4235-b659-f985f65f0009\",\n\n...\n\n\"object_marking_refs\": [\"marking-definition--089a6ecb-cc15-43cc-9494-767639779123\"],\n\n...\n\n}\n\n​4.3​ Granular Markings\n\nWhereas object markings apply to an entire STIX Object or Marking Definition and all its properties, granular markings allow data markings to be applied to individual portions of STIX Objects and Marking Definitions. Granular markings are specified in the granular_markings property, which is a list of granular-marking instances. Each of those instances contains a list of selectors to indicate what is marked and a reference to the marking-definition object to be applied. Granular markings can be used, for example, to indicate that the name property of an indicator should be handled as TLP:GREEN, the description property as TLP:AMBER, and the pattern property as TLP:RED.\n\n​4.3.1​ Granular Marking Type\n\nThe granular-marking type defines how the marking-definition object referenced by the marking_ref property applies to a set of content identified by the list of selectors in the selectors property.\n\n​4.3.1.1​ Selector Syntax\n\nSelectors contained in the selectors list are strings that consist of multiple components that MUST be separated by the . character. Each component MUST be one of:\n\n● A property name, e.g., description, or;\n\n● A zero-based list index, specified as a non-negative integer in square brackets, e.g., [4]\n\nSelectors denote path traversals: the root of each selector is the STIX Object that the granular_markings property appears in. Starting from that root, for each component in the selector, properties and list items are traversed. When the complete list has been traversed, the value of the content is considered selected.\n\nSelectors MUST refer to properties or list items that are actually present on the marked object.\n\nAs an example, consider the following STIX Object:\n\n{\n\n\"id\": \"vulnerability--ee916c28-c7a4-4d0d-ad56-a8d357f89fef\",\n\n\"created\": \"2016-02-14T00:00:00.000Z\",\n\n\"modified\": \"2016-02-14T00:00:00.000Z\",\n\n\"type\": \"vulnerability\",\n\n\"name\": \"CVE-2014-0160\",\n\n\"description\": \"The (1) TLS...\",\n\n\"external_references\": [{\n\n\"source_name\": \"cve\",\n\n\"external_id\": \"CVE-2014-0160\"\n\n}],\n\n\"labels\": [\"heartbleed\", \"has-logo\"]\n\n}\n\nValid selectors:\n\n● description selects the description property (\"The (1) TLS...\").\n\n● external_references.[0].source_name selects the source_name property of the first value of the external_references list (\"cve\").\n\n● labels.[0] selects the first item contained within the labels list (\"heartbleed\").\n\n● labels selects the list contained in the labels property. Due to the recursive nature of the selector, that includes all items in the list ([\"heartbleed\", \"has-logo\"]).\n\n● external_references selects the list contained in the external_references property. Due to the recursive nature of the selector, that includes all list items and all properties of those list items.\n\nInvalid selectors:\n\n● pattern and external_references.[3] are invalid selectors because they refer to content not present in that object.\n\n● description.[0] is an invalid selector because the description property is a string and not a list.\n\n● labels.name is an invalid selector because labels property is a list and not an object.\n\nThis syntax is inspired by JSONPath [Goessner 2007] and is in fact a strict subset of allowable JSONPath expressions (with the exception that the '$' to indicate the root is implicit). Care should be taken when passing selectors to JSONPath evaluators to ensure that the root of the query is the individual STIX Object. It is expected, however, that selectors can be easily evaluated in programming languages that implement list and key/value mapping types (dictionaries, hashmaps, etc.) without resorting to an external library.\n\nExamples\n\nThis example marks the description and labels properties with the single marking definition referenced in the list.\n\n{\n\n...\n\n\"granular_markings\": [\n\n{\n\n\"marking_ref\": \"marking-definition--089a6ecb-cc15-43cc-9494-767639779123\",\n\n\"selectors\": [\"description\", \"labels\"]\n\n}\n\n],\n\n\"description\": \"Some description\",\n\n\"name\": \"Some name\",\n\n\"labels\": [\"first\", \"second\"]\n\n}\n\nType Name: bundle\n\nA Bundle is a collection of arbitrary STIX Objects and Marking Definitions grouped together in a single container. A Bundle does not have any semantic meaning and Objects are not considered related by virtue of being in the same Bundle.\n\nBundle is not STIX Object, so it does not have any of the Common Properties other than the type and id properties. Bundle is transient and implementations should not assume that other implementations will treat it as a persistent object.\n\nThe JSON MTI serialization uses the JSON object type [RFC7159] when representing bundle.\n\n​5.1​ Properties\n\n​5.2​ Relationships\n\nBundle is not a STIX Object and MUST NOT have any relationships to it or from it.\n\n​\n\nExamples\n\n{\n\n\"type\": \"bundle\",\n\n\"id\": \"bundle--5d0092c5-5f74-4287-9642-33f4c354e56d\",\n\n\"spec_version\": \"2.0\",\n\n\"objects\": [\n\n{\n\n\"type\": \"indicator\",\n\n\"id\": \"indicator--8e2e2d2b-17d4-4cbf-938f-98ee46b3cd3f\",\n\n\"created_by_ref\": \"identity--f431f809-377b-45e0-aa1c-6a4751cae5ff\",\n\n\"created\": \"2016-04-29T14:09:00.000Z\",\n\n\"modified\": \"2016-04-29T14:09:00.000Z\",\n\n\"object_marking_refs\": [\"marking-definition--089a6ecb-cc15-43cc-9494-767639779123\"],\n\n\"name\": \"Poison Ivy Malware\",\n\n\"description\": \"This file is part of Poison Ivy\",\n\n\"pattern\": \"[file:hashes.'SHA-256' = 'aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f']\"\n\n},\n\n{\n\n\"type\": \"marking-definition\",\n\n\"id\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\",\n\n\"created\": \"2016-08-01T00:00:00.000Z\",\n\n\"definition_type\": \"tlp\",\n\n\"definition\": {\n\n\"tlp\": \"green\"\n\n}\n\n}\n\n]\n\n}\n\nThe following sections provide object-specific listings for each of the vocabularies referenced in the object description sections defined in STIX Version 2.0. Part 2: STIX Objects. STIX vocabularies, which all have type names ending in '-ov', are \"open\": they provide a listing of common and industry accepted terms as a guide to the user but do not limit the user to that defined list.\n\n​6.1​ Attack Motivation\n\nVocabulary Name: attack-motivation-ov\n\nThe attack motivation vocabulary is currently used in the following SDOs:\n\n● Intrusion Set\n\n● Threat Actor\n\nKnowing a Threat Actor or Intrusion Set's motivation may allow an analyst or defender to better understand likely targets and behaviors.\n\nMotivation shapes the intensity and the persistence of an attack. Threat Actors and Intrusion Sets usually act in a manner that reflects their underlying emotion or situation, and this informs defenders of the manner of attack. For example, a spy motivated by nationalism (ideology) likely has the patience to achieve long-term goals and work quietly for years, whereas a cyber-vandal out for notoriety can create an intense and attention-grabbing attack but may quickly lose interest and move on. Understanding these differences allows defenders to implement controls tailored to each type of attack for greatest efficiency.\n\nThis section including vocabulary items and their descriptions is based on the Threat Agent Motivations publication from Intel Corp in February 2015 [Casey 2015].\n\n​6.2​ Attack Resource Level\n\nVocabulary Name: attack-resource-level-ov\n\nThe attack resource level vocabulary is currently used in the following SDO(s):\n\n● Intrusion Set\n\n● Threat Actor\n\nAttack Resource Level is an open vocabulary that captures the general level of resources that a threat actor, intrusion set, or campaign might have access to. It ranges from individual, a person acting alone, to government, the resources of a national government.\n\nThis section including vocabulary items and their descriptions is based on the Threat Agent Library publication from Intel Corp in September 2007 [Casey 2007].\n\n​6.3​ Hashing Algorithm Vocabulary\n\nVocabulary Name: hash-algorithm-ov\n\nAn open vocabulary of hashing algorithms.\n\nWhen specifying a hashing algorithm not already defined within the hash-algorithm-ov, wherever an authoritative name for a hashing algorithm name is defined, it should be used as the value. In cases where no authoritative name exists and/or where there is variance in the naming of a particular hashing algorithm, producers should exercise their best judgement.\n\n​6.4​ Identity Class\n\nVocabulary Name: identity-class-ov\n\nThe identity class vocabulary is currently used in the following SDO(s):\n\n● Identity\n\nThis vocabulary describes the type of entity that the Identity represents: whether it describes an organization, group, individual, or class.\n\n​6.5​ Indicator Label\n\nVocabulary Name: indicator-label-ov\n\nThe indicator label vocabulary is currently used in the following SDO(s):\n\n● Indicator\n\nIndicator labels is an open vocabulary used to categorize Indicators. It is intended to be high-level to promote consistent practices. Indicator labels should not be used to capture information that can be better captured via related Malware or Attack Pattern objects. It is better to link an Indicator to a Malware object describing Poison Ivy rather than simply labeling it with \"poison-ivy\".\n\n​6.6​ Industry Sector\n\nVocabulary Name: industry-sector-ov\n\nThe industry sector vocabulary is currently used in the following SDO(s):\n\n● Identity\n\nIndustry sector is an open vocabulary that describes industrial and commercial sectors. It is intended to be holistic; it has been derived from several other lists and is not limited to \"critical infrastructure\" sectors.\n\nVocabulary Summary\n\nagriculture, aerospace, automotive, communications, construction, defence, education, energy, entertainment, financial-services, government-national, government-regional, government-local, government-public-services, healthcare, hospitality-leisure, infrastructure, insurance, manufacturing, mining, non-profit, pharmaceuticals, retail, technology, telecommunications, transportation, utilities\n\nVocabulary Value\n\nDescription\n\nagriculture\n\naerospace\n\nautomotive\n\ncommunications\n\nconstruction\n\ndefence\n\neducation\n\nenergy\n\nentertainment\n\nfinancial-services\n\ngovernment-national\n\ngovernment-regional\n\ngovernment-local\n\ngovernment-public-services\n\nemergency services, sanitation\n\nhealthcare\n\nhospitality-leisure\n\ninfrastructure\n\ninsurance\n\nmanufacturing\n\nmining\n\nnon-profit\n\npharmaceuticals\n\nretail\n\ntechnology\n\ntelecommunications\n\ntransportation\n\nutilities\n\n​6.7​ Malware Label\n\nVocabulary Name: malware-label-ov\n\nThe malware label vocabulary is currently used in the following SDO(s):\n\n● Malware\n\nMalware label is an open vocabulary that represents different types and functions of malware. Malware labels are not mutually exclusive; a malware instance can be both spyware and a screen capture tool.\n\n​\n\n​6.8​ Report Label\n\nVocabulary Name: report-label-ov\n\nThe report label vocabulary is currently used in the following SDO(s):\n\n● Report\n\nReport label is an open vocabulary to describe the primary purpose or subject of a report. For example, a report that contains malware and indicators for that malware should have a report label of malware to capture that the malware is the primary purpose. Report labels are not mutually exclusive: a Report can be both a malware report and a tool report. Just because a report contains objects of a type does not mean that the report should include that label. If the objects are there to simply provide evidence or context for other objects, it is not necessary to include them in the label.\n\n​6.9​ Threat Actor Label\n\nVocabulary Name: threat-actor-label-ov\n\nThe threat actor label vocabulary is currently used in the following SDO(s):\n\n● Threat Actor\n\nThreat actor label is an open vocabulary used to describe what type of threat actor the individual or group is. For example, some threat actors are competitors who try to steal information, while others are activists who act in support of a social or political cause. Actor labels are not mutually exclusive: a threat actor can be both a disgruntled insider and a spy. [Casey 2007])\n\n​6.10​ Threat Actor Role\n\nVocabulary Name: threat-actor-role-ov\n\nThe threat actor role vocabulary is currently used in the following SDO(s):\n\n● Threat Actor\n\nThreat actor role is an open vocabulary that is used to describe the different roles that a threat actor can play. For example, some threat actors author malware or operate botnets while other actors actually carry out attacks directly.\n\nThreat actor roles are not mutually exclusive. For example, an actor can be both a financial backer for attacks and also direct attacks.\n\n​6.11​ Threat Actor Sophistication\n\nVocabulary Name: threat-actor-sophistication-ov\n\nThreat actor sophistication vocabulary is currently used in the following SDO(s):\n\n● Threat Actor\n\nThreat actor sophistication vocabulary captures the skill level of a threat actor. It ranges from \"none\", which describes a complete novice, to \"strategic\", which describes an attacker who is able to influence supply chains to introduce vulnerabilities. This vocabulary is separate from resource level because an innovative, highly-skilled threat actor may have access to very few resources while a minimal-level actor might have the resources of an organized crime ring.\n\n​6.12​ Tool Label\n\nVocabulary Name: tool-label-ov\n\nThe tool label vocabulary is currently used in the following SDO(s):\n\n● Tool\n\nTool labels describe the categories of tools that can be used to perform attacks.\n\nThere are two primary means to customize STIX: Custom Properties, and Custom Objects. Custom Properties provides a mechanism and requirements for adding properties not defined by this specification to existing STIX Objects. Custom Objects, on the other hand, provides a mechanism and requirements to create custom STIX Objects (objects not defined by this specification).\n\nA consumer that receives a STIX document containing Custom Properties or Objects it does not understand MAY refuse to process the document or MAY ignore those properties or objects and continue processing the document.\n\nProducers of STIX documents that contain Custom Properties or Objects should recognize that consumers may not understand them and may ignore them. Producers should define any Custom Properties and Objects they use, along with any rules for processing them, and make these definitions and rules accessible to any potential consumers. This specification does not specify a process for doing this.\n\n​7.1​ Custom Properties\n\nThere will be cases where certain information exchanges can be improved by adding properties that are neither specified nor reserved in this document; these properties are called Custom Properties. This section provides guidance and requirements for how producers can use Custom Properties and how consumers should interpret them in order to extend STIX in an interoperable manner.\n\n​7.1.1​ Requirements\n\n● A STIX Object MAY have any number of Custom Properties.\n\n● Custom Property names MUST be in ASCII and MUST only contain the characters az (lowercase ASCII), 09, and underscore (_).\n\n● Custom Property names SHOULD start with x_ followed by a source unique identifier (such as a domain name with dots replaced by underscores), an underscore and then the name. For example, x_example_com_customfield.\n\n● Custom Property names MUST have a minimum length of 3 ASCII characters.\n\n● Custom Property names MUST be no longer than 250 ASCII characters in length.\n\n● Custom Property names that do not start with x_ may be used in a future version of the specification for a different meaning. If compatibility with future versions of this specification is required, the x_ prefix MUST be used.\n\n● Custom Properties SHOULD only be used when there is no existing properties defined by the STIX specification that fulfils that need.\n\nExamples\n\n{\n\n...,\n\n\"x_acme_org_confidence\": 10,\n\n\"x_acme_org_scoring\": {\n\n\"impact\": \"high\",\n\n\"probability\": \"low\"\n\n},\n\n...\n\n}\n\n​7.2​ Custom Objects\n\nThere will be cases where certain information exchanges can be improved by adding objects that are not specified nor reserved in this document; these objects are called Custom Objects. This section provides guidance and requirements for how producers can use Custom Objects and how consumers should interpret them in order to extend STIX in an interoperable manner.\n\n​7.2.1​ Requirements\n\n● Producers MAY include any number of Custom Objects in STIX documents.\n\n● Custom Objects MUST support the Common Properties as defined in section 3.1.\n\n○ The definitions of these properties are the same as those defined in Common Properties and therefore those properties MUST NOT be used to represent the custom properties in the object.\n\n● The type property in a Custom Object MUST be in ASCII and MUST only contain the characters az (lowercase ASCII), 09, and hyphen (-).\n\n● The type property MUST NOT contain a hyphen (-) character immediately following another hyphen (-) character.\n\n● Custom Object names MUST have a minimum length of 3 ASCII characters.\n\n● Custom Object names MUST be no longer than 250 ASCII characters in length.\n\n● The value of the type property in a Custom Object SHOULD start with x- followed by a source unique identifier (like a domain name with dots replaced by hyphens), a hyphen and then the name. For example, x-example-com-customobject.\n\n● A Custom Object whose name is not prefixed with x- may be used in a future version of the specification with a different meaning. Therefore, if compatibility with future versions of this specification is required, the x- prefix MUST be used.\n\n● The value of the id property in a Custom Object MUST use the same format as the identifier type, namely, [object-type]--[UUIDv4].\n\n● Custom Objects SHOULD only be used when there is no existing STIX Object defined by the STIX specification that fulfils that need.\n\nExamples\n\n{\n\n\"type\": \"bundle\",\n\n\"id\": \"bundle--f37aa79d-f5f5-4af7-874b-734d32c08c10\",\n\n\"spec_version\": \"2.0\",\n\n\"custom_objects\": [\n\n{\n\n\"type\": \"x-example-com-customobject\",\n\n\"id\": \"x-example-com-customobject--4527e5de-8572-446a-a57a-706f15467461\",\n\n\"created\": \"2016-08-01T00:00:00.000Z\",\n\n\"modified\": \"2016-08-01T00:00:00.000Z\",\n\n\"some_custom_stuff\": 14,\n\n\"other_custom_stuff\": \"hello\"\n\n}\n\n]\n\n}​\n\n​8.1​ Producers and Consumers\n\nA \"STIX 2.0 Producer\" is any software that creates STIX 2.0 content and conforms to the following normative requirements:\n\n1. It MUST be able to create content encoded as JSON.\n\n2. All properties marked required in the property table for the STIX Object or type MUST be present in the created content.\n\n3. All properties MUST conform to the data type and normative requirements for that property.\n\n4. It MUST support at least one STIX Object per the Conformance section in STIX Version 2.0. Part 2: STIX Objects.\n\n5. It MUST support all features listed in section 8.2, Mandatory Features.\n\n6. It MAY support any features listed in section 8.3, Optional Features. Software supporting an optional feature MUST comply with the normative requirements of that feature.\n\n7. It MUST support JSON as a serialization format and MAY support serializations other than JSON.\n\nA \"STIX 2.0 Consumer\" is any software that consumes STIX 2.0 content and conforms to the following normative requirements:\n\n1. It MUST support parsing all required properties for the content that it consumes.\n\n2. It MUST support all features listed in section 8.2, Mandatory Features.\n\n3. It MAY support any features listed in section 8.3, Optional Features. Software supporting an optional feature MUST comply with the normative requirements of that feature.\n\n4. It MUST support JSON as a serialization format and MAY support serializations other than JSON.\n\n​8.2​ Mandatory Features\n\n​8.2.1​ Versioning\n\nA STIX 2.0 Producer or STIX 2.0 Consumer MUST support versioning by following the normative requirements listed in section 3.4.\n\n​8.3​ Optional Features\n\n​8.3.1​ Object-Level Data Markings\n\nA STIX 2.0 Producer or STIX 2.0 Consumer MAY support \"Object-Level Data Markings\". Software claiming to support \"Object-Level Data Markings\" MUST follow the normative requirements listed in sections 4.1 and 4.2.\n\n​8.3.2​ Granular Data Markings\n\nA STIX 2.0 Producer or STIX 2.0 Consumer MAY support \"Granular Data Markings\". Software claiming to support \"Granular Data Markings\" MUST follow the normative requirements listed in sections 4.1 and 4.3.\n\n​8.3.3​ Custom Properties\n\nA STIX 2.0 Producer or STIX 2.0 Consumer MAY support \"Custom Properties\". Software claiming to support \"Custom Properties\" MUST follow the normative requirements listed in section 7.1.\n\n​8.3.4​ Custom Objects\n\nA STIX 2.0 Producer or STIX 2.0 Consumer MAY support \"Custom Objects\". Software claiming to support \"Custom Objects\" MUST follow the normative requirements listed in section 7.2.\n\nCAPEC - Common Attack Pattern Enumeration and Classification\n\nConsumer - Any entity that receives STIX content\n\nCTI - Cyber Threat Intelligence\n\nEmbedded Relationship - A link (an \"edge\" in a graph) between one STIX Object and another represented as a property on one object containing the ID of another object\n\nEntity - Anything that has a separately identifiable existence (e.g., organization, person, group, etc.)\n\nIEP - FIRST (Forum of Incident Response and Security Teams) Information Exchange Policy\n\nInstance - A single occurrence of a STIX object version\n\nMTI - Mandatory To Implement\n\nMVP - Minimally Viable Product\n\nObject Creator - The entity that created or updated a STIX object (see section 3.3)\n\nObject Representation - An instance of an object version that is serialized as STIX\n\nProducer - Any entity that distributes STIX content, including object creators as well as those passing along existing content\n\nSDO - STIX Domain Object (a \"node\" in a graph)\n\nSRO - STIX Relationship Object (one mechanism to represent an \"edge\" in a graph)\n\nSTIX - Structured Threat Information Expression\n\nSTIX Content - STIX documents, including STIX Objects, STIX Objects grouped as bundles, etc.\n\nSTIX Object - A STIX Domain Object (SDO) or STIX Relationship Object (SRO)\n\nSTIX Relationship - A link (an \"edge\" in a graph) between two STIX Objects represented by either an SRO or an embedded relationship\n\nTAXII - An application layer protocol for the communication of cyber threat information\n\nTLP - Traffic Light Protocol\n\nTTP - Tactic, technique, or procedure; behaviors and resources that attackers use to carry out their attacks\n\nSTIX Subcommittee Chairs:\n\nSarah Kelley, Center for Internet Security (CIS)\n\nJohn Wunder, MITRE Corporation\n\nCyber Observable Subcommittee Chairs:\n\nTrey Darley, Kingfisher Operations, sprl\n\nIvan Kirillov, MITRE Corporation\n\nSpecial Thanks:\n\nSubstantial contributions to this specification from the following individuals are gratefully acknowledged:\n\nSarah Kelley, Center for Internet Security (CIS)\n\nTerry MacDonald, Cosive\n\nJane Ginn, Cyber Threat Intelligence Network, Inc. (CTIN)\n\nRichard Struse, DHS Office of Cybersecurity and Communications\n\nIain Brown, GDS\n\nJason Keirstead, IBM\n\nTim Casey, Intel\n\nTrey Darley, Kingfisher Operations, sprl\n\nAllan Thomson, LookingGlass Cyber\n\nGreg Back, MITRE Corporation\n\nIvan Kirillov, MITRE Corporation\n\nJon Baker, MITRE Corporation\n\nJohn Wunder, MITRE Corporation\n\nSean Barnum, MITRE Corporation\n\nRichard Piazza, MITRE Corporation\n\nChristian Hunt, New Context Services, Inc.\n\nJohn-Mark Gurney, New Context Services, Inc.\n\nAharon Chernin, Perch\n\nDave Cridland, Surevine\n\nBret Jordan, Symantec Corp.\n\nParticipants:\n\nThe following individuals were members of the OASIS CTI Technical Committee during the creation of this specification and their contributions are gratefully acknowledged:\n\nDavid Crawford, Aetna\n\nMarcos Orallo, Airbus Group SAS\n\nRoman Fiedler, AIT Austrian Institute of Technology\n\nFlorian Skopik, AIT Austrian Institute of Technology\n\nRussell Spitler, AlienVault\n\nRyan Clough, Anomali\n\nNicholas Hayden, Anomali\n\nWei Huang, Anomali\n\nAngela Nichols, Anomali\n\nHugh Njemanze, Anomali\n\nKatie Pelusi, Anomali\n\nDean Thompson, Australia and New Zealand Banking Group (ANZ Bank)\n\nAlexander Foley, Bank of America\n\nSounil Yu, Bank of America\n\nVicky Laurens, Bank of Montreal\n\nHumphrey Christian, Bay Dynamics\n\nRyan Stolte, Bay Dynamics\n\nAlexandre Dulaunoy, CIRCL\n\nAndras Iklody, CIRCL\n\nRaphal Vinot, CIRCL\n\nSarah Kelley, CIS\n\nSyam Appala, Cisco Systems\n\nTed Bedwell, Cisco Systems\n\nDavid McGrew, Cisco Systems\n\nMark-David McLaughlin, Cisco Systems\n\nPavan Reddy, Cisco Systems\n\nOmar Santos, Cisco Systems\n\nJyoti Verma, Cisco Systems\n\nDoug DePeppe, Cyber Threat Intelligence Network, Inc. (CTIN)\n\nJane Ginn, Cyber Threat Intelligence Network, Inc. (CTIN)\n\nBen Othman, Cyber Threat Intelligence Network, Inc. (CTIN)\n\nJeff Odom, Dell\n\nSreejith Padmajadevi, Dell\n\nRavi Sharda, Dell\n\nWill Urbanski, Dell\n\nSean Sobieraj, DHS Office of Cybersecurity and Communications (CS&C)\n\nRichard Struse, DHS Office of Cybersecurity and Communications (CS&C)\n\nMarlon Taylor, DHS Office of Cybersecurity and Communications (CS&C)\n\nJens Aabol, Difi-Agency for Public Management and eGovernment\n\nWouter Bolsterlee, EclecticIQ\n\nMarko Dragoljevic, EclecticIQ\n\nOliver Gheorghe, EclecticIQ\n\nJoep Gommers, EclecticIQ\n\nSergey Polzunov, EclecticIQ\n\nRutger Prins, EclecticIQ\n\nAndrei Srghi, EclecticIQ\n\nRaymon van der Velde, EclecticIQ\n\nBen Sooter, Electric Power Research Institute (EPRI)\n\nChris Ricard, Financial Services Information Sharing and Analysis Center (FS-ISAC)\n\nPhillip Boles, FireEye, Inc.\n\nPrasad Gaikwad, FireEye, Inc.\n\nRajeev Jha, FireEye, Inc.\n\nAnuj Kumar, FireEye, Inc.\n\nShyamal Pandya, FireEye, Inc.\n\nPaul Patrick, FireEye, Inc.\n\nScott Shreve, FireEye, Inc.\n\nJon Warren, FireEye, Inc.\n\nRemko Weterings, FireEye, Inc.\n\nGavin Chow, Fortinet Inc.\n\nSteve Fossen, Fortinet Inc.\n\nKenichi Terashita, Fortinet Inc.\n\nRyusuke Masuoka, Fujitsu Limited\n\nDaisuke Murabayashi, Fujitsu Limited\n\nDerek Northrope, Fujitsu Limited\n\nJonathan Algar, GDS\n\nIain Brown, GDS\n\nAdam Cooper, GDS\n\nMike McLellan, GDS\n\nTyrone Nembhard, GDS\n\nChris O'Brien, GDS\n\nJames Penman, GDS\n\nHoward Staple, GDS\n\nChris Taylor, GDS\n\nLaurie Thomson, GDS\n\nAlastair Treharne, GDS\n\nJulian White, GDS\n\nBethany Yates, GDS\n\nRobert van Engelen, Genivia\n\nEric Burger, Georgetown University\n\nAllison Miller, Google Inc.\n\nMark Risher, Google Inc.\n\nYoshihide Kawada, Hitachi, Ltd.\n\nJun Nakanishi, Hitachi, Ltd.\n\nKazuo Noguchi, Hitachi, Ltd.\n\nAkihito Sawada, Hitachi, Ltd.\n\nYutaka Takami, Hitachi, Ltd.\n\nMasato Terada, Hitachi, Ltd.\n\nPeter Allor, IBM\n\nEldan Ben-Haim, IBM\n\nAllen Hadden, IBM\n\nSandra Hernandez, IBM\n\nJason Keirstead, IBM\n\nJohn Morris, IBM\n\nLaura Rusu, IBM\n\nRon Williams, IBM\n\nPaul Martini, iboss, Inc.\n\nJerome Athias, Individual\n\nPeter Brown, Individual\n\nJoerg Eschweiler, Individual\n\nStefan Hagen, Individual\n\nElysa Jones, Individual\n\nSanjiv Kalkar, Individual\n\nTerry MacDonald, Individual\n\nAlex Pinto, Individual\n\nTim Casey, Intel Corporation\n\nKent Landfield, Intel Corporation\n\nKarin Marr, Johns Hopkins University Applied Physics Laboratory\n\nJulie Modlin, Johns Hopkins University Applied Physics Laboratory\n\nMark Moss, Johns Hopkins University Applied Physics Laboratory\n\nMark Munoz, Johns Hopkins University Applied Physics Laboratory\n\nNathan Reller, Johns Hopkins University Applied Physics Laboratory\n\nPamela Smith, Johns Hopkins University Applied Physics Laboratory\n\nDavid Laurance, JPMorgan Chase Bank, N.A.\n\nRussell Culpepper, Kaiser Permanente\n\nBeth Pumo, Kaiser Permanente\n\nMichael Slavick, Kaiser Permanente\n\nTrey Darley, Kingfisher Operations, sprl\n\nGus Creedon, Logistics Management Institute\n\nWesley Brown, LookingGlass\n\nJamison Day, LookingGlass\n\nKinshuk Pahare, LookingGlass\n\nAllan Thomson, LookingGlass\n\nIan Truslove, LookingGlass\n\nChris Wood, LookingGlass\n\nGreg Back, Mitre Corporation\n\nJonathan Baker, Mitre Corporation\n\nSean Barnum, Mitre Corporation\n\nDesiree Beck, Mitre Corporation\n\nMichael Chisholm, Mitre Corporation\n\nNicole Gong, Mitre Corporation\n\nIvan Kirillov, Mitre Corporation\n\nMichael Kouremetis, Mitre Corporation\n\nChris Lenk, Mitre Corporation\n\nRichard Piazza, Mitre Corporation\n\nLarry Rodrigues, Mitre Corporation\n\nJon Salwen, Mitre Corporation\n\nCharles Schmidt, Mitre Corporation\n\nAlex Tweed, Mitre Corporation\n\nEmmanuelle Vargas-Gonzalez, Mitre Corporation\n\nJohn Wunder, Mitre Corporation\n\nJames Cabral, MTG Management Consultants, LLC.\n\nScott Algeier, National Council of ISACs (NCI)\n\nDenise Anderson, National Council of ISACs (NCI)\n\nJosh Poster, National Council of ISACs (NCI)\n\nMike Boyle, National Security Agency\n\nJoe Brule, National Security Agency\n\nJessica Fitzgerald-McKay, National Security Agency\n\nDavid Kemp, National Security Agency\n\nShaun McCullough, National Security Agency\n\nJohn Anderson, NC4\n\nMichael Butt, NC4\n\nMark Davidson, NC4\n\nDaniel Dye, NC4\n\nAngelo Mendonca, NC4\n\nMichael Pepin, NC4\n\nNatalie Suarez, NC4\n\nBenjamin Yates, NC4\n\nDaichi Hasumi, NEC Corporation\n\nTakahiro Kakumaru, NEC Corporation\n\nLauri Korts-P_rn, NEC Corporation\n\nJohn-Mark Gurney, New Context Services, Inc.\n\nChristian Hunt, New Context Services, Inc.\n\nDaniel Riedel, New Context Services, Inc.\n\nAndrew Storms, New Context Services, Inc.\n\nStephen Banghart, NIST\n\nDavid Darnell, North American Energy Standards Board\n\nCory Casanave, Object Management Group\n\nAharon Chernin, Perch\n\nDave Eilken, Perch\n\nSourabh Satish, Phantom\n\nJosh Larkins, PhishMe Inc.\n\nJohn Tolbert, Queralt Inc.\n\nTed Julian, Resilient Systems, Inc..\n\nIgor Baikalov, Securonix\n\nJoseph Brand, Semper Fortis Solutions\n\nDuncan Sparrell, sFractal Consulting LLC\n\nThomas Schreck, Siemens AG\n\nRob Roel, Southern California Edison\n\nDave Cridland, Surevine Ltd.\n\nBret Jordan, Symantec Corp.\n\nCurtis Kostrosky, Symantec Corp.\n\nJuha Haaga, Synopsys\n\nMasood Nasir, TELUS\n\nGreg Reaume, TELUS\n\nAlan Steer, TELUS\n\nCrystal Hayes, The Boeing Company\n\nWade Baker, ThreatConnect, Inc.\n\nCole Iliff, ThreatConnect, Inc.\n\nAndrew Pendergast, ThreatConnect, Inc.\n\nBen Schmoker, ThreatConnect, Inc.\n\nJason Spies, ThreatConnect, Inc.\n\nRyan Trost, ThreatQuotient, Inc.\n\nPatrick Coughlin, TruSTAR Technology\n\nChris Roblee, TruSTAR Technology\n\nMark Angel, U.S. Bank\n\nBrian Fay, U.S. Bank\n\nJoseph Frazier, U.S. Bank\n\nMark Heidrick, U.S. Bank\n\nMona Magathan, U.S. Bank\n\nYevgen Sautin, U.S. Bank\n\nRichard Shok, U.S. Bank\n\nJames Bohling, US Department of Defense (DoD)\n\nEoghan Casey, US Department of Defense (DoD)\n\nGary Katz, US Department of Defense (DoD)\n\nJeffrey Mates, US Department of Defense (DoD)\n\nEvette Maynard-Noel, US Department of Homeland Security\n\nRobert Coderre, VeriSign\n\nKyle Maxwell, VeriSign\n\nEric Osterweil, VeriSign\n\nPatrick Maroney, Wapack Labs LLC\n\nAnthony Rutkowski, Yanna Technologies LLC"
    }
}