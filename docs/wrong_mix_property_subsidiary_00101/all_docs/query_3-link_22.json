{
    "id": "wrong_mix_property_subsidiary_00101_3",
    "rank": 22,
    "data": {
        "url": "https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors",
        "read_more_link": "",
        "language": "en",
        "title": "What is a stack trace, and how can I use it to debug my application errors?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/zgBsf.jpg?s=64",
            "https://www.gravatar.com/avatar/ffffa52ae8108fdeb2559d804051556e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/MmCNS.jpg?s=64",
            "https://www.gravatar.com/avatar/ffffa52ae8108fdeb2559d804051556e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/D2CgS.png?s=64",
            "https://www.gravatar.com/avatar/646a6ea26055482d9595ac766dad55ea?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/3QZoy.jpg?s=64",
            "https://www.gravatar.com/avatar/fb24c70ec76f0a28e47fc1df1e70dcdf?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/jmGB4.png",
            "https://i.sstatic.net/R7vUD.png",
            "https://i.sstatic.net/39I1E.jpg?s=64",
            "https://i.sstatic.net/T0GGn.jpg?s=64",
            "https://www.gravatar.com/avatar/aab36e75e2a1b09199da99501429f49e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/B57aS.gif",
            "https://i.sstatic.net/gjTaq.png",
            "https://www.gravatar.com/avatar/680c966ed9d351e2e735b35a8f6e692f?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://stackoverflow.com/posts/3988788/ivc/245c?prg=709b7d8d-d7bb-4061-acf7-02535557896d"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-10-21T14:52:24",
        "summary": "",
        "meta_description": "Sometimes when I run my application it gives me an error that looks like:\n\nException in thread \"main\" java.lang.NullPointerException\n        at com.example.myproject.Book.getTitle(Book.java:16)\n   ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/3988788/what-is-a-stack-trace-and-how-can-i-use-it-to-debug-my-application-errors",
        "text": "In simple terms, a stack trace is a list of the method calls that the application was in the middle of when an Exception was thrown.\n\nSimple Example\n\nWith the example given in the question, we can determine exactly where the exception was thrown in the application. Let's have a look at the stack trace:\n\nException in thread \"main\" java.lang.NullPointerException at com.example.myproject.Book.getTitle(Book.java:16) at com.example.myproject.Author.getBookTitles(Author.java:25) at com.example.myproject.Bootstrap.main(Bootstrap.java:14)\n\nThis is a very simple stack trace. If we start at the beginning of the list of \"at ...\", we can tell where our error happened. What we're looking for is the topmost method call that is part of our application. In this case, it's:\n\nat com.example.myproject.Book.getTitle(Book.java:16)\n\nTo debug this, we can open up Book.java and look at line 16, which is:\n\n15 public String getTitle() { 16 System.out.println(title.toString()); 17 return title; 18 }\n\nThis would indicate that something (probably title) is null in the above code.\n\nExample with a chain of exceptions\n\nSometimes applications will catch an Exception and re-throw it as the cause of another Exception. This typically looks like:\n\n34 public void getBookIds(int id) { 35 try { 36 book.getId(id); // this method it throws a NullPointerException on line 22 37 } catch (NullPointerException e) { 38 throw new IllegalStateException(\"A book has a null property\", e) 39 } 40 }\n\nThis might give you a stack trace that looks like:\n\nException in thread \"main\" java.lang.IllegalStateException: A book has a null property at com.example.myproject.Author.getBookIds(Author.java:38) at com.example.myproject.Bootstrap.main(Bootstrap.java:14) Caused by: java.lang.NullPointerException at com.example.myproject.Book.getId(Book.java:22) at com.example.myproject.Author.getBookIds(Author.java:36) ... 1 more\n\nWhat's different about this one is the \"Caused by\". Sometimes exceptions will have multiple \"Caused by\" sections. For these, you typically want to find the \"root cause\", which will be one of the lowest \"Caused by\" sections in the stack trace. In our case, it's:\n\nCaused by: java.lang.NullPointerException <-- root cause at com.example.myproject.Book.getId(Book.java:22) <-- important line\n\nAgain, with this exception we'd want to look at line 22 of Book.java to see what might cause the NullPointerException here.\n\nMore daunting example with library code\n\nUsually stack traces are much more complex than the two examples above. Here's an example (it's a long one, but demonstrates several levels of chained exceptions):\n\njavax.servlet.ServletException: Something bad happened at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:60) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.example.myproject.ExceptionHandlerFilter.doFilter(ExceptionHandlerFilter.java:28) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at com.example.myproject.OutputBufferFilter.doFilter(OutputBufferFilter.java:33) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:326) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:943) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582) Caused by: com.example.myproject.MyProjectServletException at com.example.myproject.MyServlet.doPost(MyServlet.java:169) at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166) at com.example.myproject.OpenSessionInViewFilter.doFilter(OpenSessionInViewFilter.java:30) ... 27 more Caused by: org.hibernate.exception.ConstraintViolationException: could not insert: [com.example.myproject.MyEntity] at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:96) at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66) at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:64) at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2329) at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2822) at org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:71) at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:268) at org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:321) at org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:204) at org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:130) at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:210) at org.hibernate.event.def.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:56) at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:195) at org.hibernate.event.def.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:50) at org.hibernate.event.def.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:93) at org.hibernate.impl.SessionImpl.fireSave(SessionImpl.java:705) at org.hibernate.impl.SessionImpl.save(SessionImpl.java:693) at org.hibernate.impl.SessionImpl.save(SessionImpl.java:689) at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:344) at $Proxy19.save(Unknown Source) at com.example.myproject.MyEntityService.save(MyEntityService.java:59) <-- relevant call (see notes below) at com.example.myproject.MyServlet.doPost(MyServlet.java:164) ... 32 more Caused by: java.sql.SQLException: Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...] at org.hsqldb.jdbc.Util.throwError(Unknown Source) at org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown Source) at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105) at org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:57) ... 54 more\n\nIn this example, there's a lot more. What we're mostly concerned about is looking for methods that are from our code, which would be anything in the com.example.myproject package. From the second example (above), we'd first want to look down for the root cause, which is:\n\nCaused by: java.sql.SQLException\n\nHowever, all the method calls under that are library code. So we'll move up to the \"Caused by\" above it, and in that \"Caused by\" block, look for the first method call originating from our code, which is:\n\nat com.example.myproject.MyEntityService.save(MyEntityService.java:59)\n\nLike in previous examples, we should look at MyEntityService.java on line 59, because that's where this error originated (this one's a bit obvious what went wrong, since the SQLException states the error, but the debugging procedure is what we're after).\n\nWhat is a Stacktrace?\n\nA stacktrace is a very helpful debugging tool. It shows the call stack (meaning, the stack of functions that were called up to that point) at the time an uncaught exception was thrown (or the time the stacktrace was generated manually). This is very useful because it doesn't only show you where the error happened, but also how the program ended up in that place of the code. This leads over to the next question:\n\nWhat is an Exception?\n\nAn Exception is what the runtime environment uses to tell you that an error occurred. Popular examples are NullPointerException, IndexOutOfBoundsException or ArithmeticException. Each of these are caused when you try to do something that is not possible. For example, a NullPointerException will be thrown when you try to dereference a Null-object:\n\nObject a = null; a.toString(); //this line throws a NullPointerException Object[] b = new Object[5]; System.out.println(b[10]); //this line throws an IndexOutOfBoundsException, //because b is only 5 elements long int ia = 5; int ib = 0; ia = ia/ib; //this line throws an ArithmeticException with the //message \"/ by 0\", because you are trying to //divide by 0, which is not possible.\n\nHow should I deal with Stacktraces/Exceptions?\n\nAt first, find out what is causing the Exception. Try googling the name of the exception to find out what the cause of that exception is. Most of the time it will be caused by incorrect code. In the given examples above, all of the exceptions are caused by incorrect code. So for the NullPointerException example you could make sure that a is never null at that time. You could, for example, initialise a or include a check like this one:\n\nif (a!=null) { a.toString(); }\n\nThis way, the offending line is not executed if a==null. Same goes for the other examples.\n\nSometimes you can't make sure that you don't get an exception. For example, if you are using a network connection in your program, you cannot stop the computer from loosing it's internet connection (e.g. you can't stop the user from disconnecting the computer's network connection). In this case the network library will probably throw an exception. Now you should catch the exception and handle it. This means, in the example with the network connection, you should try to reopen the connection or notify the user or something like that. Also, whenever you use catch, always catch only the exception you want to catch, do not use broad catch statements like catch (Exception e) that would catch all exceptions. This is very important, because otherwise you might accidentally catch the wrong exception and react in the wrong way.\n\ntry { Socket x = new Socket(\"1.1.1.1\", 6789); x.getInputStream().read() } catch (IOException e) { System.err.println(\"Connection could not be established, please try again later!\") }\n\nWhy should I not use catch (Exception e)?\n\nLet's use a small example to show why you should not just catch all exceptions:\n\nint mult(Integer a,Integer b) { try { int result = a/b return result; } catch (Exception e) { System.err.println(\"Error: Division by zero!\"); return 0; } }\n\nWhat this code is trying to do is to catch the ArithmeticException caused by a possible division by 0. But it also catches a possible NullPointerException that is thrown if a or b are null. This means, you might get a NullPointerException but you'll treat it as an ArithmeticException and probably do the wrong thing. In the best case you still miss that there was a NullPointerException. Stuff like that makes debugging much harder, so don't do that.\n\nTLDR\n\nFigure out what is the cause of the exception and fix it, so that it doesn't throw the exception at all.\n\nIf 1. is not possible, catch the specific exception and handle it.\n\nNever just add a try/catch and then just ignore the exception! Don't do that!\n\nNever use catch (Exception e), always catch specific Exceptions. That will save you a lot of headaches.\n\nThe other posts describe what a stack trace is, but it can still be hard to work with.\n\nIf you get a stack trace and want to trace the cause of the exception, a good start point in understanding it is to use the Java Stack Trace Console in Eclipse. If you use another IDE there may be a similar feature, but this answer is about Eclipse.\n\nFirst, ensure that you have all of your Java sources accessible in an Eclipse project.\n\nThen in the Java perspective, click on the Console tab (usually at the bottom). If the Console view is not visible, go to the menu option Window -> Show View and select Console.\n\nThen in the console window, click on the following button (on the right)\n\nand then select Java Stack Trace Console from the drop-down list.\n\nPaste your stack trace into the console. It will then provide a list of links into your source code and any other source code available.\n\nFor example, if we had this program:\n\npublic class ExceptionTest { public static void main(String[] args) { int l = trimmedLength(null); System.out.println(\"Trimmed length = \" + l); } private static int trimmedLength(String string) { return string.trim().length(); } }\n\nYou would get this stack trace:\n\nThe most recent method call made (and the one that caused the exception) will be the top of the stack, which is the top line (excluding the error message text). In this case, that is the trimmedLength method. Going down the stack goes back in time. The second line is the method that calls the first line, etc.\n\nIf you are using open-source software, you might need to download and attach to your project the sources if you want to examine. Download the source jars, in your project, open the Referenced Libraries folder to find your jar for your open-source module (the one with the class files) then right click, select Properties and attach the source jar."
    }
}