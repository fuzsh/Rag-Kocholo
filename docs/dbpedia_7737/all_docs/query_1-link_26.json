{
    "id": "dbpedia_7737_1",
    "rank": 26,
    "data": {
        "url": "https://medium.com/%40aserdargun/introduction-to-linux-f20e68de3e59",
        "read_more_link": "",
        "language": "en",
        "title": "Introduction to Linux",
        "top_image": "https://miro.medium.com/v2/resize:fit:823/1*L-CEZlMmwX1sTqoqEa42zQ.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:823/1*L-CEZlMmwX1sTqoqEa42zQ.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*cCj4NXVvURQJjvA6UO8erA.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*cCj4NXVvURQJjvA6UO8erA.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Aserdargun",
            "medium.com"
        ],
        "publish_date": "2024-02-13T17:48:14.019000+00:00",
        "summary": "",
        "meta_description": "Red Hat Enterprise Linux (RHEL) heads the family that includes CentOS, CentOS Stream, Fedora and Oracle Linux. Fedora has a close relationship with RHEL and contains significantly more software then…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@aserdargun/introduction-to-linux-f20e68de3e59",
        "text": "Aserdargun\n\n·\n\nFollow\n\n253 min read\n\n·\n\nFeb 13, 2024\n\n--\n\nChapter 1: The Linux Foundation\n\nRed Hat Family Systems (including CentOS and Fedora)\n\nSUSE Family Systems (including openSUSE)\n\nDebian Family Systems (including Ubuntu and Linux Mint)\n\nFor a rather long list of available distributions, see The LWN.net Linux Distribution List.\n\nThe Red Hat Family\n\nRed Hat Enterprise Linux (RHEL) heads the family that includes CentOS, CentOS Stream, Fedora and Oracle Linux.\n\nFedora has a close relationship with RHEL and contains significantly more software then Red Hat’s enterprise version. One reason for this is that a diverse community is involved in building Fedora, with many contributors who do not work for Red Hat. Furthermore, it is used as a testing platform for future RHEL releases.\n\nWe will use CentOS Stream and CentOS more often for activities, demonstrations, and labs because there is no cost to the end user, and there is a longer release cycle than for Fedora (which releases a new version every six months or so).\n\nThe basic version of CentOS is also virtually identical to RHEL, the most popular Linux distribution in enterprise environments. However, CentOS 8 has no scheduled updates after 2021. The replacement is CentOS 8 Stream. The difference between the two versions is CentOS Stream gets updates before RHEL, while CentOS gets them after. For most purposes this matters very little and not at all for this course. While there are alternatives to CentOS Stream that look more like the older CentOS, for this course we find CentOS 8 Stream works just fine.\n\nKey Facts About the Red Hat Family\n\nSome of the key facts about the Red Hat distribution family are:\n\nFedora serves as an upstream testing platform fro RHEL.\n\nCentOS is a close clone of RHEL; in fact, CentOS has been part of Red Hat since 2014.\n\nA heavily patched version 4.18 kernel is used in RHEL/CentOS 8 Stream, while version 5.14 is used in RHEL/CentOS 9 Stream.\n\nIt supports multiple hardware platforms.\n\nIt uses dnf, the RPM-based package manager (covered in detail later) to install, update, and remove packages in the system.\n\nRHEL is widely used by enterprises which host their own systems.\n\nThe SUSE Family\n\nThe relationship between SUSE (SUSE Linux Enterprise Server, or SLES) and openSUSE is similar to the one described between RHEL, CentOS, and Fedora.\n\nWe use OpenSUSE as the reference distribution for the SUSE family, as it is available to end users at no cost. Because the two products are extremely similar, the material that covers openSUSE can typically be applied to SLES with few problems.\n\nKey Facts About the SUSE Family\n\nSome of the key facts about the SUSE family are listed below:\n\nSUSE Linux Enterprise Server (SLES) is upstream for upenSUSE.\n\nKernel version 5.14 is used in openSUSE Leap 15.4.\n\nIt uses the RPM-based zypper package manager (we cover it in detail later) to install, update, and remove packages in the system.\n\nIt includes the YaST (Yet Another Setup Tool) application for system administration purposes.\n\nSLES is widely used in retail and many other sectors.\n\nThe Debian Family\n\nThe Debian distribution is upstream for several other distributions, including Ubuntu. In turn, Ubuntu is upstream for Linux Mint and a number of other distributions. It is commonly used on both servers and desktop computers. Debian is a pure open source community project (not owned by any corporation) and has a strong focus on stability.\n\nDebian provides by far the largest and most complete software repository to its users of any Linux distribution.\n\nUbuntu aims at providing a good compromise between long term stability and ease of use. Since Ubuntu gets most of its packages from Debian’s stable branch, it also has access to a very large software repository. For those reasons, we will use Ubuntu LTS (Long Term Support) as the reference to Debian family distributions for this course.\n\nKey Facts About the Debian Family\n\nSome key facts about the Debian family are listed below:\n\nThe Debian family is upstream for Ubuntu, and Ubuntu is upstream for Linux Mint and others.\n\nKernel version 5.19 is used in Ubuntu 22.04 LTS.\n\nIt uses the DPKG-based APT package manager (using apt, apt-get, apt-cache, etc., which we cover in detail later) to install, update, and remove packages in the system.\n\nUbuntu has been widely used for cloud deployments.\n\nWhile Ubuntu is built on top of Debian and is GNOME-based under the hood, it differs visually from the interface on standard Debian, as well as other distributions.\n\nChapter Summary\n\nThe Linux Foundation is the umbrella organization for many critical open source projects that power corporations, spanning all industry sectors. Its work today extends far beyond Linux, fostering innovation at every layer of the software stack.\n\nThe Linux Foundation training is for the community and by the community. Linux training is distribution-flexible, technically advanced, and created with the leaders of the Linux development community.\n\nThere are three major distribution families within Linux: Red Hat, SUSE and Debian. In this course, we will work with representative members of all of these families throughout.\n\nChapter 2: Linux Philosophy and Concepts\n\nThe Power of Linux\n\nLinux is an operating system and its core is just a kernel. It talks to the hardware makes the hardware work. It makes it able for you to run programs and do what you want to do. It is the single largest software project in the history of mankind. Linux constantly is improved, constantly is updated in order to handle the changing world.\n\nThree Important Pieces of Context\n\nPlease keep in mind the following:\n\n1.Things change in Linux\n\nNo matter how hard we have worked to stay current, Linux is constantly evolving, both at the technical levvel (including kernel features) and at the distribution and interface level. So, please keep in mind while we have tried to be as up-to-date as possible at the time this course was released, there are likely to be changes and new features we have not discussed. This is unavoidable.\n\n2.We have repeated some things in the class material\n\nIt is just about impossible in a course this comprehensive to never revisit topics that have previously been covered, and short reviews are helpful, so you do not have to go scouring through earlier sections to jog your memory. This is particularly true with system configuration items, like how to sections to use sudo to gain temporary root privileges in as safe a manner as possible. We know we have done this, and , at least in most cases, it is by design, not by accident. If we did not do this, it would take a long time before we would know enough to perform useful tasks and work on lab exercises.\n\n3.We have tried to avoid holy wars\n\nThere are many areas where there are strong preference disagreements in the Linux (and wider open source) community. Examples include the best editor. emcas vs. vi; the best graphical desktop: GNOME vs. KDE, etc. Often, we have chosen a particular alternative to emphasize just to keep thins clean. For example, we talk much more about GNOME than KDE simply because it has a bigger user base and many more students will be using it, not because we are taking a position as to which is superior.\n\nLinux History Overview\n\nLinux is an open source computer operating system, initially developed on and for Intel x86-based personal computers. It has been subsequently ported to an astoundingly long list of other hardware platforms, from tiny embedded appliances to the world’s largest supercomputers.\n\nIn this section, we follow the surprising history of how Linux evolved from a project of one Finnish college student, into a massive effort with an enormous impact on today’s world.\n\nLinus Torvalds was a student in Helsinki, Finland, in 1991, when he started a project: writing his own operating system kernel. He also collected together and/or developed the other essential ingredients required to construct an entire operating system with his kernel at the center. It wasn’t long before this became known as the Linux kernel.\n\nIn 1992, Linux was re-licensed using the General Public License (GPL) by GNU (a project of the Free Software Foundation or FSF, which promotes freely available software), which enabled it to build a worldwide community of developers. By combining the kernel with other system components from the GNU project, numerous other developers created complete systems called Linux Distributions, which first appeared in the mid-90s.\n\nThe Linux distributions created in the mid-90s provided the basis for fully free (in the sense of freedom, not zero cost) computing and became a driving force in the open source software movement. In 1998, major companies like IBM and Oracle announced their support for the Linux platform and began major development efforts as well.\n\nToday, Linux powers more than half of the servers on the Internet, the majority of smartphones (via the Android system, which is built on top of Linux), more than 90 percent of the public cloud workload, and all of the world’s most powerful supercomputers.\n\nLinux Philosophy Overview\n\nEvery successful project or organization needs an implicit or explicit philosophy that frames its objectives and projects its growth path. This section contains a description of the philosophy adopted by the Linux community and how it has impacted Linux’s amazing evolution.\n\nLinux is constantly enhanced and maintained by a network of developers from all over the world collaborating over the Internet, with Linus Torvalds at the head. Technical skills, a desire to contribute, and the ability to collaborate with others are the only qualifications for participating.\n\nLinux borrows heavily from the well-established family of UNIX operating systems. It was written to be a free and open source alternative; at the time, UNIX was designed for computers much more powerful than PCs, and furthermore, it was quite expensive.\n\nFiles are stored in a hierarchical filesystem, with top node of the system being the root or simply “/”. Whenever possible, Linux makes its components available via files or objects that look like files. Processes, devices, and network sockets are all represented by file-like objects and can often be worked with using the same utilities used for regular files. Linux is a fully multitasking (i.e., multiple threads of execution are performed simultaneously), multiuser operating system with built-in networking and service processes known as daemons in the UNIX world.\n\nNOTE: Linux was inspired by UNIX, but it is not UNIX.\n\nLinux Community Overview\n\nSuppose that, as part of your job, you need to configure a Linux file server, and you run into some difficulties. If you are not able to figure out the answer yourself or get help from a co-worker, the Linux community might just save the day!\n\nThere are many ways to engage with the Linux community, even if you are not a developer:\n\nPost queries on relevant discussion forums.\n\nSubscribe to discussion threads.\n\nJoin local Linux groups that meet in your area.\n\nThe Linux kernel along with the GPL license and other gnu components revolutionized the computer industry with very simple yet very important freedoms:\n\nThe freedom to use the software for any purpose.\n\nThe freedom to change the software to suit your needs.\n\nThe freedom to share the software with your friends and neighbors.\n\nThe freedom to share the changes you make.\n\nCompanies built business around Linux. In 1999, Red Hat’s tock tripled as it became the first Linux company to go public. That same year IBM spent a billion dollars to improve and advertise Linux.\n\nEvery three months another version of Linux is released. So where is Linux today?\n\nRunning in 75 % of stock exchanges worldwide, empowering the servers that enable Amazon, Facebook, Twitter, ebay and Google.\n\nYou use Linux literally every time you surf the Internet. It’s in your phone, in your TV, running 95% of supercomputers and in many of the devices that you use every day.\n\nThe Linux community is a far-reaching ecosystem consisting of developers, system administrators, users, and vendors who use many different forums to connect with one another. Among the most popular are:\n\nInternet Relay Chat (IRC) software (such as WeeChat, HexChat, Pidgin, and XChat)\n\nOnline communities and discussion boards including Linux User Groups (both local and online)\n\nMany collaborative projects hosted on services such as GitHub and GitLab\n\nNewsgroups and mailing lists, including the Linux Kernel Mailing List\n\nCommunity events, e.g., Hackathons, Install Fests, Open Source Summits, Embedded Linux Conferences, and many other conferences and get-togethers.\n\nA portal to one of the most powerful online user communities can be found at linux.com. This site is hosted by The Linux Foundation and serves over one million unique visitors every month. It has active sections on:\n\nNews\n\nCommunity discussion threads\n\nFree tutorials and user tips.\n\nWe will refer several times in this course to relevant articles or tutorials on this site.\n\nThere are also many e-learning courses on Linux and other related technologies, such as this course on edX. Many are no or low cost, and there are also more expensive training opportunities with live instructors, either in person or over the Internet. The Linux Foundation Training website offers many such courses in all these categories but is by no means the only place you can look.\n\nBelow are some examples of open source products that you probably encounter on a daily basis:\n\nAndroid: used in the majority of smartphones and other mobile devices worldwide, built on top of the Linux kernel.\n\nApache Web Server (httpd): about half of all web servers are running Apache and its related products.\n\nSocial Media: virtually all social media platforms (Facebook, Twitter, Instagram, etc.) use OSS components throughout.\n\nSearch Engines: Google and other search engines have vast data farms running Linux.\n\nWeather Forecasting: essentially, 100% of the world’s supercomputers run Linux, and forecasting the weather is one of the most intensive uses.\n\nPersonal Fitness Devices: including FitBit.\n\nDVRs: almost all set-top boxes and video recorders run Linux\n\nMedical Devices: a large number of medical devices used routinely every day are running Embedded Linux.\n\n*All these projects make extensive use of OSS tooling, such as gcc, make, glibc, and languages such as Python, Perl, and Ruby.\n\nLinux Terminology Overview\n\nWhen you start exploring Linux, you will soon come across some terms which may be unfamiliar, such as distribution, boot loader, desktop environment, etc. Before we proceed further, let’s stop and take a look at some basic terminology used in Linux to help you get up to speed.\n\nLinux Terminology Examples\n\nKernel, distribution, boot loader, service, filesystem, X Window system, desktop environment, command line\n\nKernel: Glue between hardware and applications. for example: Linux kernel\n\nDistribution: Collection of software making up a Linux-based OS. for example: Red Hat Enterprise Linux, Fedora, Ubuntu and Gentoo\n\nBoot loader: Program that boots the operating system. for example: GRUB and ISOLINUX\n\nService: Program that runs as a background process. for example: httpd ( Web Server), nfsd, ntpd, ftpd (FTP Server) and named (Name Server)\n\nFilesystem: Method for storing and organizing files. for example: ext3, ext4, FAY, XFS, NTFS and Btrfs\n\nXWindow System: Graphical subsystem on nearly all Linux systems\n\nDesktop Environment: Graphical user interface on top of the operating system. for example: GNOME, KDE, XFce and Fluxbox\n\nCommand line: Interface for typing commands on top of the operating system\n\nShell: Command line interpreter that interprets the command line input and instructs the operating system to perform any necessary tasks and commands. for example: bash, tcsh, and zsh\n\nLinux Distributions Overview\n\nIf you are building a product designed to run on Linux, project requirements will surely include making sure the project works properly on the most widely used Linux distributions. To accomplish this, you need to learn about the different components, services, and configurations associated with each distribution. We are about to look at how you would go about doing exactly that.\n\nSo, what is a Linux distribution, and how does it relate to the Linux kernel?\n\nThe Linux kernel is the core of the operating system. A full Linux distribution consists of the kernel plus a number of other software tools for file-related operations, user management, and software package management. Each of these tools provides a part of the complete system. Each tool is often its own separate project, with its own developers working to perfect that piece of the system.\n\nWhile the most recent Linux kernel (and earlier versions) can always be found in the Linux Kernel Archives, Linux distributions may be based on different kernel versions. For example, the very popular RHEL 8 distribution is based on the 4.18 kernel, which is not new, but is extremely stable, while the newer RHEL 9 distribution is based on the much later 5.14 kernel. Other distributions may move more quickly in adopting the latest kernel releases. It is important to note that the kernel is not an all-or-nothing proposition. For example, RHEL/CentOS has incorporated many of the more recent kernel improvements into their customized older versions, as have Ubuntu, openSUSE, Fedora, etc.\n\nExamples of other essential tools and ingredients provided by distributions include the C/C++ and Clang compilers, the gdb debugger, the core system libraries applications need to link with in order to run, the low-level interface for drawing graphics on the screen, as well as the higher-level desktop environment, and the system for installing and updating the various components, including the kernel itself. And all distributions come with a rather complete suite of applications already installed.\n\nServices Associated with Distributions\n\nThe vast variety of Linux distributions are designed to cater to many different audiences and organizations according to their specific needs and tastes. However, large organizations, such as companies and governmental institutions, and other entities, tend to choose the major commercially-supported distributions from Red Hat, SUSE, and Canonical (Ubuntu).\n\nCentOS and CentOS Stream are popular free (as in no cost) alternatives to Red Hat Enterprise Linux (RHEL) and are often used by organizations that are comfortable operating without paid technical support. Note that new versions of CentOS disappeared at the end of 2021 in favor of CentOS Stream. However, at least two new RHEL-derived substitutes, Alma Linux and Rocky Linux, have established a healthy foothold.\n\nThe RHEL variants, such as CentOS and AlmaLinux, are designed to be binary-compatible with RHEL; i.e., in most cases, binary software packages will install properly across the distributions.\n\nUbuntu and Fedora are widely used by developers and are also popular in the educational realm. Many commercial distributors, including Red Hat, Ubuntu, SUSE, and Oracle, provide long-term fee-based support for their distributions, as well as hardware and software certification. All major distributors provide update services for keeping your system primed with the latest security and bug fixes and performance enhancements, as well as provide online support resources.\n\nChapter Summary\n\nLinux borrows heavily from the UNIX operating system, with which its creators were well-versed.\n\nLinux accesses many features and services through files and file-like objects.\n\nLinux is a fully multi-tasking, multi-user operating system, with built-in networking and service processes known as daemons.\n\nLinux is developed by a loose confederation of developers from all over the world, collaborating over the Internet, with Linus Torvalds at the head. Technical skill and a desire to contribute are the only qualifications for participating.\n\nThe Linux community is a far reaching ecosystem of developers, vendors, and users that supports and advances the Linux operating system.\n\nSome of the common terms used in Linux are: kernel, distribution, boot loader, service, filesystem, X Window system, desktop environment, and command line.\n\nA full Linux distribution consists of the kernel plus a number of other software tools for file-related operations, user management, and software package management.\n\nChapter 3: Linux Basics and System Startup\n\nThe Boot Process\n\nThe Linux boot process is the procedure for initializing the system. It consists of everything that happens from when the computer power is first switched on until the user interface is fully operational.\n\nHaving a g ood understanding of the steps in the boot process may help you with troubleshooting problems, as well as with tailoring the computer’s performance to your needs.\n\nOn the other hand, the boot process can be rather technical, and you can start using Linux without knowing all the details.\n\nNote: You may want to combe back and study this section later, if you want to first get a good feel for how to use a Linux system.\n\nBIOS — The First Step\n\nWhile Linux runs on many kinds of hardware, we will concentrate on the x86 family, which is the basis of almost all desktop and laptop PCs. Starting an x86-based Linux system involves a number of steps. When the computer is powered on, the Basic Input/Output System (BIOS) initializes the hardware, including the screen and keyboard, and tests the main memory. This process is also called POST (Power On Self Test).\n\nThe BIOS software is stored on a read-only memort (ROM) chip on the motherboard. After this, the remainder of the boot process is controlled by the operating system (OS).\n\nMaster Boot Record (MBR), EFI Partition, and Boot Loader\n\nOnce the POST is completed, system control passes from the BIOS to the boot loader. The boot loader is usually stored on one of the system’s storage devices, such as a hard disk or SSD drive, either in the boot sector (for traditional BIOS/MBR systems) or the EFI partition (for more recent (Unified) Extensible Firmware Interface or EFI/UEFI systems). Up to this stage, the machine does not access any mass storage media. Then, information on the date, time, and the most important peripherals are loaded from the CMOS values (after a technology used for the battery-powered memory store, which allows the system to keep track of the date and time even when it is powered off).\n\nA number of boot loaders exist for Linux; the most common ones are GRU (fro GRand Unified Boot loader), ISOLINUX (for booting from removable media), and DAS U-Boot (for booting on embedded devices/appliances). Most Linux and even other operating systems that might be installed. When booting Linux, the boot loader is responsible for loading the kernel image and the initial RAM disk or filesystem (which contains some critical files and device drivers needed to start the system) into memory.\n\nBoot Loader in Action\n\nThe boot loader has two distinct stages:\n\nFor systems using the BIOS/MBR method, the boot loader resides at the first sector of the hard disk, also known as the Master Boot Record (MBR). The size of the MBR is just 512 bytes. In this stage, the boot loader examines the partition table and finds a bootable partition. Once it finds a bootable partition, it then searches for the second stage boot loader, for example GRUB, and loads it into RAM (Random Access Memory). For systems using the EFI/UEFI method, UEFI firmware reads it Boot Manager data to determine which UEFI application is to be launched and from where (i.e., from which disk and partition the EFI partition can be found). The firmware then launches the UEFI application, for example GRUB, as defined in the boot entry in the firmware’s boot manager. This procedure is more complicated but more versatile than the older MBR methods.\n\nThe second stage bott loader resides under /boot. A splash screen is displayed, which allows us to choose which operating system (OS) and/or kernel to boot. After the OS and kernel are selected, the boot loader loads the kernel of the operating system into RAM and passes control to it. Kernels are almost always compressed, so the first job they have is to uncompress themself. After this, it will check and analyze the system hardware and initialize any hardware device drivers built into the kernel.\n\nInitial RAM Disk\n\nThe initramfs filesystem image contains programs and binary files that perform all actions needed to mount the proper root filesystem, including providing the kernel functionality required for the specific filesystem that will be used, and loading the device drivers for mass storage controllers, by taking advantage of the udev system (for user device), which is responsible for figuring out which devices are present, locating the device drivers they need to operate properly, and loading them. After the root filesystem has been found, it is checked for errors and mounted.\n\nThe mount program instructs the operating system that a filesystem is ready for use and associates it with a particular point in the overall hierarchy of the filesystem (the mount point). If this is successful, the initramfs is cleared from RAM, and the init program on the root filesystem (/sbin/init) is executed.\n\ninit handles the mounting and pivoting over to the final real root filesystem. If special hardware drivers are needed before the mass storage can be accessed, they must be in the initramfs image.\n\nText-Mode Login\n\nNear the end of the boot process, init starts a number of text-mode login prompts. These enable you to type your username, followed by your password, and to eventually get a command shell. However, if you are running a system with a graphical login interface, you will not see these at first.\n\nAs you will learn in Chapter 7: Command Line Operations, the terminals which run the command shells can be accessed using the ALT key plus a function key. Most distributions start six text terminals and one graphics terminal starting with F1 or F2. Within a graphical environment, switching to a text console requires pressing CTRL-ALT + the appropriate function key (with F7 or F1 leading to the GUI).\n\nUsually, the default command shell is bash (the GNU Bourne Again Shell), but there are a number of other advanced command shells available. The shell prints a text prompt, indicating it is ready to accept commands; after the user types the command and presses Enter, the command is executed, and another prompt is displayed after the command is done.\n\nThe Linux Kernel\n\nThe boot loader loads both the kernel and an initial RAM-based file system (initramfs) into memory, so it can be used directly by the kernel.\n\nWhen the kernel is loaded in RAM, it immediately initializes and configures the computer’s memory and also configures all the hardware attached to the system. This includes all processors, I/O subsystems, storage devices, etc. The kernel also loads some necessary user space applications.\n\n/sbin/init and Services\n\nOnce the kernel has set up all its hardware and mounted the root filesystem, the kernel runs /sbin/init. This then becomes the initial process, which then starts other processes to get the system running. Most other processes on the system trace their origin ultimately to init; exceptions include the so-called kernel processes. These are started by the kernel directly, and their job is to manage internal operating system details.\n\nBesides starting the system, init is responsible for keeping the system running and for shutting it down cleanly. One of its responsibilities is to act when necessary as a manager for all non-kernel processes; it cleans up after them upon completion, and restarts user login services as needed when users log in and out, and does the same for other background system services.\n\nTraditionally, this process startup was done using conventions that date back to the 1980s and the System V variety of UNIX. This serial process (called SysVinit) had the system pass through a sequence of runlevels containing collections of scripts that start and stop services. Each runlevel supported a different mode of running the system. Within each runlevel, individual services could be set to run, or to be shut down if running.\n\nHowever, all major distributions have moved away from this sequential method of system initialization, although they usually can emulate many System V utilites for compatibility purposes. Next, we discuss the new methods, of which systemd has become dominant.\n\nStartup Alternatives\n\nSysVinit viewed things as a serial process, divided into a series of sequential stages. Each stage required completion before the next could proceed. Thus, startup did not easily take advantage of the parallel processing that could be done with the multiple processors or cores found on modern systems.\n\nFurthermore, starting up and rebooting were seen as relatively rare events; exactly how long they took was not considered important. This is no longer true, especially with mobile devices and embedded Linux systems. Some modern methods, such as the use of containers, can require almost instantaneous startup times. Thus, systems now require methods with faster and enhanced capabilities. Finally, the older methods required rather complicated startup scripts, which were difficult to keep universal across distribution versions, kernel versions, architectures, and types of systems. The two main alternatives developed were:\n\nUpstart\n\nDeveloped by Ubuntu and first included in 2006\n\nAdopted in Fedora 9 (in 2008) and in RHEL 6 and its clones\n\nsystemd\n\nAdopted by Fedora first (in 2011)\n\nAdopted by RHEL 7 and SUSE\n\nReplaced Upstart in Ubuntu 16.04\n\nWhile the migration to systemd was rather controversial, it has been adopted by all major distributions, and so we will not discuss the older System V method or Upstart, which has become a dead end. Regardless of how one feels about the controversies or the technical methods of systemd, almost universal adoption has made learning how to work on Linux systems simpler, as there are fewer differences among distributions. We enumerate systemd features next.\n\nsystemd Features\n\nSystems with systemd start up faster than those with earlier init methods. This is largely because it replaces a serialized set of steps with aggressive parallelization techniques, which permits multiple services to be initiated simultaneously.\n\nComplicated startup shell scripts are replaced with simpler configuration files, which enumerate what has to be done before a service is started, how to execute service startup, and what conditions the service should indicate have been accomplished when startup is finished. One thing to note is that /sbin/init now just points to /lib/systemd/systemd; i.e. systemd takes over the init process.\n\nOne systemd command (systemctl) is used for most basic tasks. While we have not yet talked about working at the command line, here is a brief listing of its use:\n\nStarting, stopping, restarting a service (using httpd, the Apache web server, as an example) on a currently running system:\n\n$ sudo systemctl start|stop|restart httpd.service\n\nEnabling or disabling a system service from starting up at system boot:\n\n$ sudo systemctl enable|disable httpd.service\n\nChecking on the status of a service:\n\n$ sudo systemctl status httpd.service\n\nIn most cases, the .service can be omitted. There are many technical differences with older methods that lie beyond the scope of our discussion.\n\nLab 3.1: Apache Web Server Status\n\nCheck the status of the httpd (Apache Web Server) server on your system.\n\nIf it is running, stop it and check again.\n\nStart the service and check the status.\n\nYou probably want to stop it again when you are done.\n\n$ sudo systemctl status httpd\n\n$ sudo systemctl start httpd\n\n$ sudo systemctl status httpd\n\n$ sudo systemctl stop httpd\n\nLinux Filesystems\n\nLibraries separate books and other media into multiple sections; this organization will depend on the subject matter, audience, media type, and frequency of retrieval. The same concept applies to a filesystem, which is the embodiment of a method of storing and organizing arbitrary collections of data in a human-usable form.\n\nDifferent types of filesystems supported by Linux:\n\nConventional disk filesystems: ext3, ext4, XFS, Btrfs, JFS, NTFS, vfat, exfat, etc.\n\nFlash storage filesystems: ubifs, jffs2, yaffs, etc.\n\nDatabase filesystems\n\nSpecial purpose filesystems: procfs, sysfs, tmpfs, squashfs, debugfs, fuse, etc.\n\nThis section will describe the standard filesystem layout shared by most Linux distributions.\n\nPartitions and Filesystems\n\nA partition is a dedicated subsection of physical storage media. Historically this meant a physically contiguous portion of a hard disk; today’s storage devices can be more complicated, but we still think of a partition as a fixed area to be treated as a whole.\n\nA filesystem is just a method of storing and accessing files.\n\nOne can think of a partition as a container in which a filesystem resides. However, in some circumstances, a filesystem can span more than one partition if one uses symbolic links, which we will discuss much later.\n\nThe Filesystem Hierarchy Standard\n\nLinux systems store their important files according to a standard layout called the Filesystem Hierarchy Standard (FHS), which has long been maintained by the Linux Foundation. For more information, take a look at the following document: “Filesystem Hierarchy Standard” created by LSB Workgroup. Having a standard is designed to ensure that users, administrators, and developers can move between distributions without having to re-learn how the system is organized.\n\nLinux uses the ‘/’ character to separate paths (as sis UNIX unlike Windows, which uses ‘\\’) and does not have drive letters. Multiple drives and/or partitions are mounted as directories in the single filesystem. Removable media such as USB drives and CDs, and DVDs will show up as mounted at /run/media/yourusername/disklabel for recent Linux systems or under /media for older distributions. For example, if your username is student, a USB pen drive labeled FEDORA might end up being found at /run/media/student/FEDORA, and a file README.txt on that disc would be at /run/media/student/FEDORA/README.txt.\n\nMore About the Filesystem Hierarchy Standard\n\nAll Linux filesystem names are case-sensitive, so /boot, /Boot, and /BOOT represent three different directories (or folders). Many distributions distinguish between core utilities needed for proper system operation and other programs, and place the latter in directories under /usr (think user). To get a sense for how the other programs are organized, find the /usr directory in the diagram from the previous page and compare the subdirectories with those that exist directly under the system root directory (/).\n\nChoosing a Linux Distribution\n\nDetermining which Linux distribution to deploy requires thoughtful planning. The figure shows some, but not all, choices. Note that many embedded Linux systems use custom-crafted contents rather than Android or Yocto.\n\nQuestions to Ask When Choosing A Distribution\n\nSome questions worth thinking about before deciding on a distribution include:\n\nWhat is the main function of the system (server or desktop)?\n\nWhat types of packages are important to the organization? For example, web server, word processing, etc.\n\nHow much storage space is required, and how much is available? For example, when installing Linux on an embedded device, space is usually constrained.\n\nHow often are packages updated?\n\nHow long is the support cycle for each release? For example, LTS releases have long-term support.\n\nDo you need kernel customization from the vendor or a third party?\n\nWhat hardware are you running on? For example, it might be X86, RISC-V, ARM, PPC, etc.\n\nDo you need long-term stability? Or can you accept (or need) a more volatile cutting-edge system running the latest software versions?\n\nLinux Installation: Planning\n\nThe partition layout is best decided at the time of installation; it can be difficult to change later. While Linux systems handle multiple partitions by mounting them at specific points in the filesystem, and you can always modify the design later, it is always easier to try and get it right to begin with.\n\nNearly all Linux distribution installers provide a reasonable default layout, with either all space dedicated to normal files on one big partition and a smaller swap partition or with separate partitions for some space-sensitive areas like /home and /var. You may need to override the defaults and do something different if you have special needs or if you want to use more than one disk.\n\nLinux Installation: Software Choices\n\nAll installations include the bare minimum software for running a Linux distribution.\n\nDistributions also provide options for adding categories of software. Common applications (such as the Firefox web browser and LibreOffice office suite), developer tools (like the vi and emacs text editors, which we will explore later in this course), and other popular services (such as the Apache web server tools or MySQL database) are usually included. In addition, for any system with a graphical desktop, a chosen desktop (such as GNOME or KDE) is installed by default.\n\nModern distributions tend to do a simple and quick install first and then let you make these choices once the system is running in at least some basic fashion. In earlier times, there were a lot of choices to make during first installation, which could be intimidating and confusing to a new user, and also make the install take a much longer time.\n\nAll installers set up some initial security features on the new system. One basic step consists of setting the password for the superuser (root) and setting up an initial user. In some cases (such as with Fedora and Ubuntu), only an initial user is set up; direct root login is not configured, and root access requires logging in first as a normal user and then using sudo, as we will describe later. Some distributions will also install more advanced security frameworks, such as SELinux or AppArmor. For example, all Red Hat-based systems, including Fedora and CentOS, always use SELinux by default, and Ubuntu comes with AppArmor up and running.\n\nLinux Installation: Install Source\n\nLike other operating systems, Linux distributions are provided on removable media such as USB drives and CDs or DVDs. Most Linux distributions also support booting a small image and downloading the rest of the system over the network. These small images are usable on media, or as network boot images, in which case it is possible to perform an install without using any local media.\n\nMany installers can do an installation completely automatically, using a configuration file to specify installation options. This file is called a Kickstart file for Red Hat-based systems, an AutoYAST profile for SUSE-based systems, and a Preseed file for Debian-based systems.\n\nEach distribution provides its own documentation and tools for creating and managing these files.\n\nLinux Installation: The Process\n\nThe actual installation process is pretty similar for all distributions.\n\nAfter booting from the installation media, the installer starts and asks questions about how the system should be set up. These questions are skipped if an automatic installation file is provided. Then, the installation is performed.\n\nFinally, the computer reboots into the newly-installed system, and additional configuration questions are asked.\n\nMost installers have the option of downloading and installing updates as part of the installation process; this requires Internet access. Otherwise, the system uses its normal update mechanism to retrieve those updates after the installation is done.\n\nNOTE: We will be demonstrating the installation process for two of the three Linux distribution families we cover in this course. You can view a demonstration for the distribution type of your choice.\n\nThe Linux Foundation has a document: “Preparing Your Computer for Linux Training” (see below) that describes alternate methods of installing Linux without overwriting existing data. You may want to consult it, if you need to preserve the information on your hard disk.\n\nThese alternate methods are:\n\nRe-partitioning your hard disk to free up enough room to permit dual boot (side-by-side) installation of Linux, along with your present operating system.\n\nUsing a host machine hypervisor program (such as VMWare’s products or Oracle Virtual Box) to install a client Linux Virtual Machine.\n\nBooting off of and using a Live CD or USB stick and not writing to the hard disk at all.\n\nThe first method is sometimes complicated and should be done when your confidence is high and you understand the steps involved. The second and third methods are quite safe and make it difficult to damage your system.\n\nChapter Summary\n\nA partition is a logical part of the disk.\n\nA filesystem is a method of string/finding files on a hard disk.\n\nBy dividing the hard disk into partitions, data can be grouped and separated as needed. When a failure or mistake occurs, only the data in the affected partition will be damaged, while the data on the other partitions will likely survive.\n\nThe boot process has multiple steps, starting with BIOS, which triggers the boot loader to start up the Linux kernel. From there, the initramfs filesystem is invoked, which triggers the init program to complete the startup process.\n\nDetermining the appropriate distribution to deploy requires that you match your specific system needs to the capabilities of the different distributions.\n\nChapter 4: Graphical Interface\n\nGraphical Desktop\n\nYou can use either a Command Line Interface (CLI) or a Graphical User Interface (GUI) when using Linux. To work at the CLI, you have to remember which programs and commands are used to perform tasks, and how to quickly and accurately obtain more information about their use and options. On the other hand, using the GUI is often quick and easy. It allows you to interact with your system through graphical icons and screens. For repetitive tasks, the CLI is often more efficient, while the GUI is easier to navigate if you do not remember all the details or do something only rarely.\n\nWe will learn how to manage sessions using the GUI for the three Linux distribution families that we cover the most in this course: Red Hat (CentOS, Fedora), SUSE (openSUSE), and Debian (Ubuntu, Mint). Since we are using the GNOME-based variant of openSUSE rather than the KDE-based one, all are actually quite similar. If you are using KDE (or other Linux desktops such as XFCE), your experience will vary somewhat from what is shown, but not in any intrinsically difficult way, as user interfaces have converged to certain well-known behaviors on modern operating systems. In subsequent sections of this course we will concentrate in great detail on the command line interface, which is pretty much the same on all distributions.\n\nX Window System\n\nLoading the graphical desktop is one of the final steps in the boot process of a Linux desktop. Historically, this was known as the X Windows System, often just called X.\n\nA service called the Display Manager keeps track of the displays being provided and loads the X server (so-called, because it provides graphical services to applications, sometimes called X clients). The display manager also handles graphical logins and starts the appropriate desktop environment after a user logs in.\n\nX is rather old software; it dates back to the mid-1980s and, as such, has certain deficiencies on modern systems (for example, with security), as it has been stretched rather far from its original purposes. A newer system, known as Wayland, is gradually superseding it and is the default display system for Fedora, RHEL, and other recent distributions. For the most part, it looks just like X to the user, although under the hood it is quite different.\n\nMore About the Graphical Desktop\n\nA desktop environment consists of a session manager, which starts and maintains the components of the graphical session, and the window manager, which controls the placement and movement of windows, window title-bars, and controls.\n\nAlthough these can be mixed, generally a set of utilities, session manager, and window manager are used together as a unit, and together provide a seamless desktop environment.\n\nIf the display manager is not started by default in the default runlevel, you can start the graphical desktop different way, after logging on to a text-mode console, by running startx from the command line. Or, you can start the display manager (gdm, kdm, xdm, etc.) manually from the command line. This differs from running startx as the display managers will project a sign in screen. We discuss them next.\n\nGUI Startup\n\nWhen you install a desktop environment, the display manager starts at the end of the boot process. It is responsible for starting the graphics system, logging in the user, and starting the user’s desktop environment. You can often select from a choice of desktop environments when logging in to the system.\n\nThe default display manager for GNOME is called gdm. Another popular display manager is kdm, associated with KDE.\n\nGNOME Desktop Environment\n\nGNOME is a popular desktop environment with an easy-to-use graphical user interface. It is bundled as the default desktop environment for most Linux distributions, including Red Hat Enterprise Linux (RHEL), Fedora, CentOS, SUSE Linux Enterprise, Ubuntu, and Debian. GNOME has menu-based navigation and is sometimes an easy transition to accomplish for Windows users. However, the look and feel can be quite different across distributions, even if they are all using GNOME.\n\nAnother common desktop environment very important in the history of Linux and also widely used is KDE, which has often been used in conjunction with SUSE and openSUSE. Other alternatives for a desktop environment include Unity (present on older Ubuntu but still based on GNOME), XFCE, and LXDE. As previously mentioned, most desktop environments follow a similar structure to GNOME, and we will restrict ourselves mostly to it to keep things less complex.\n\nGraphical Desktop Background\n\nEach Linux distribution comes with its own set of desktop backgrounds. You can change the default by choosing a new wallpaper or selecting a custom picture to be set as the desktop background. If you do not want to use an image as the background, you can select a color to be displayed on the desktop instead.\n\nIn addition, you can also change the desktop theme, which changes the look and feel of the Linux system. The theme also defines the appearance of application windows.\n\nCustomizing the Desktop Background\n\nTo change the background, you can right-click anywhere on the desktop and choose Change Background.\n\ngnome-tweaks\n\nMost common settings, both personal and system-wide, are to be found by clicking in the upper right-hand corner, on either a gear or other obvious icon, depending on your Linux distribution.\n\nHowever, there are many settings which many users would like to modify which are not thereby accessible; the default settings utility is unfortunately rather limited in modern GNOME-based distributions. Unfortunately, the quest for simplicity has actually made it difficult to adapt your system to your tastes and needs.\n\nFortunately, there is a standard utility, gnome-tweaks, which exposes many more setting options. It also permits you to easily install extensions by external parties. Not all Linux distributions install this tool by default, but it is always available (older distributions used the name gnome-tweak-tool). You may have to run it by hitting Alt-F2 and then typing in the name. You may want to add it to your Favorites list, as we shall discuss.\n\nAs discussed in the next chapter, some recent distributions have taken most of the functionality out of this tool and placed it in a new one called gnome-extensions-app.\n\nIn the screenshot below, the keyboard mapping is being adjusted so the useless CapsLock key can be used as an additional Ctrl key; this saves users who use Ctrl a lot (such as emacs aficionados) from getting physically damaged by pinkie strain.\n\nChanging the Theme\n\nThe visual appearance of applications (the buttons, scroll bars, widgets, and other graphical components) are controlled by a theme. GNOME comes with a set of different themes which can change the way your applications look.\n\nThe exact method for changing your theme may depend on your distribution. For many GNOME-based distributions, you can simply run gnome-tweaks, as shown in the screenshot from Ubuntu. However, as mentioned earlier, if you don’t find it there, you will need to look at gnome-extensions-app, which can now sometimes configure themes. This requires installing even more software and going to external websites, so it is unlikely to be seen as an improvement by many users.\n\nThere are other options to get additional themes beyond the default selection. You can download and install themes from GNOME’s Wiki website.\n\nLocking the Screen\n\nIt is often a good idea to lock your screen to prevent other people from accessing your session while you are away from your computer.\n\nNOTE: This does not suspend the computer; all your applications and processes continue to run while the screen is locked.\n\nThere are two ways to lock your screen:\n\nUsing the graphical interface\n\nClicking in the upper-right corner of the desktop, and then clicking on the lock icon.\n\nUsing the keyboard shortcut SUPER-L (or SUPER-Escape)\n\n(The SUPER key is also known as the Windows key).\n\nThe keyboard shortcut for locking the screen can be modified by altering keyboard settings, the exact prescription varying by distribution, but not hard to ascertain.\n\nTo re-enter the desktop session you just need to provide your password again.\n\nThe screenshot below shows how to lock the screen for Ubuntu. The details vary little in modern distributions.\n\nSwitching Users\n\nLinux is a true multi-user operating system, which allows more than one user to be simultaneously logged in. If more than one person uses the system, for each person must have their own user account and password. This allows for individualized settings, home directories, and other files and protects against both accidental and malicious corruption. Users can take turns using the machine, while keeping everyone’s sessions alive, or even be logged in simultaneously through the network.\n\nShutting Down and Restarting\n\nBesides normal daily starting and stopping of the computer, a system restart may be required as part of certain major system updates, generally only those involving installing a new Linux kernel.\n\nInitiating the shutdown process from the graphical desktop is rather trivial on all current Linux distributions, with very little variation. We will discuss later how to do this from the command line, using the shutdown command.\n\nIn all cases, you click on either a settings (gear) or a power icon and follow the prompts.\n\nShutting Down and Restarting on GNOME\n\nTo shut down the computer in any recent GNOME-based Linux distribution, perform the following steps:\n\nClick either the Power or the Gear icon in the upper-right corner of the screen.\n\nClick on Power Off, Restart, or Cancel. If you do nothing, the system will shut down in 60 seconds.\n\nShutdown, reboot, and logout operations will ask for confirmation before going ahead. This is because many applications will not save their data properly when terminated this way.\n\nAlways save your documents and data before restarting, shutting down, or logging out.\n\nSuspending\n\nAll modern computers support Suspend (or Sleep) Mode when you want to stop using your computer for a while. Suspend Mode saves the current system state and allows you to resume your session more quickly while remaining on, but uses very little power in the sleeping state. It works by keeping your system’s applications, desktop, and so on, in system RAM, but turning off all of the other hardware. This shortens the time for a full system start-up as well as conserves battery power. One should note that modern Linux distributions actually boot so fast that the amount of time saved is often minor.\n\nSuspending the System\n\no suspend the system, the procedure starts the same as that for shutdown or locking the screen.\n\nThe method is quite simple and universal in most recent GNOME-based distributions. If you click on the Power icon and hold for a short time and release, you will get the double line icon displayed below, which you then click to suspend the system. Some distributions, including Ubuntu, may still show a separate Suspend icon instead of using the above method.\n\nBasic Operations\n\nEven experienced users can forget the precise command that launches an application, or exactly what options and arguments it requires. Fortunately, Linux allows you to quickly open applications using the graphical interface.\n\nApplications are found at different places in Linux (and within GNOME):\n\nFrom the Applications menu in the upper-left corner.\n\nFrom the Activities menu in the upper-left corner.\n\nIn some Ubuntu versions, from the Dash button in the upper-left corner.\n\nFor KDE, and some other environments, applications can be opened from the button in the lower-left corner.\n\nLocating Applications\n\nUnlike other operating systems, the initial install of Linux usually comes with a wide range of applications and software archives that contain thousands of programs that enable you to accomplish a wide variety of tasks with your computer. For most key tasks, a default application is usually already installed. However, you can always install more applications and try different options.\n\nFor example, Firefox is popular as the default browser in many Linux distributions, while Epiphany, Konqueror, and Chromium (the open source base for Google Chrome) are usually available for install from software repositories. Proprietary web browsers, such as Opera and Chrome, are also available.\n\nLocating applications from the GNOME and KDE menus is easy, as they are neatly organized in functional submenus.\n\nDefault Applications\n\nMultiple applications are available to accomplish various tasks and to open a file of a given type. For example, you can click on a web address while reading an email and launch a browser such as Firefox or Chrome.\n\nTo set default applications, enter the Settings menu (on all recent Linux distributions) and then click on either Default Applications or Details > Default Applications. The exact list will vary from what is shown here in the Ubuntu screenshot according to what is actually installed and available on your system.\n\nFile Manager\n\nEach distribution implements the Nautilus (File Manager) utility, which is used to navigate the file system. It can locate files and, when a file is clicked upon, either it will run if it is a program, or an associated application will be launched using the file as data. This behavior is completely familiar to anyone who has used other operating systems.\n\nTo start the file manager you will have to click on its icon (a file cabinet) which is easily found, usually under Favorites or Accessories. It will have the name Files.\n\nThis will open a window with your Home directory displayed. The left panel of the File Manager window holds a list of commonly used directories, such as Desktop, Documents, Downloads and Pictures.\n\nHome Directories\n\nThe File Manager lets you access different locations on your computer and the network, including the Home directory, Desktop, Documents, Pictures, and other Other Locations.\n\nEvery user with an account on the system will have a home directory, usually created under /home, and usually named according to the user, such as /home/student.\n\nBy default, files the user saves will be placed in a directory tree starting there. Account creation, whether during system installation or at a later time, when a new user is added, also induces default directories to be created under the user’s Home directory, such as Documents, Desktop, and Downloads.\n\nIn the screenshot shown for Ubuntu, we have chosen the list format and are also showing hidden files (those starting with a period). See if you can do the same on your distribution.\n\nViewing Files\n\nThe File Manager allows you to view files and directories in more than one way.\n\nYou can switch between the Icons and List formats, either by clicking the familiar icons in the top bar, or you can press CTRL-1 or CTRL-2 respectively.\n\nIn addition, you can also arrange the files and directories by name, size, type, or modification date for further sorting. To do so, click View and select Arrange Items.\n\nAnother useful option is to show hidden files (sometimes imprecisely called system files), which are usually configuration files that are hidden by default and whose name starts with a dot. To show hidden files, select Show Hidden Files from the menu or press CTRL-H.\n\nThe file browser provides multiple ways to customize your window view to facilitate easy drag and drop file operations. You can also alter the size of the icons by selecting Zoom In and Zoom Out under the View menu.\n\nSearching for Files\n\nThe File Manager includes a great search tool inside the file browser window.\n\nClick Search in the toolbar (to bring up a text box).\n\nEnter the keyword in the text box. This causes the system to perform a recursive search from the current directory for any file or directory which contains a part of this keyword.\n\nTo open the File Manager from the command line, on most systems simply type nautilus.\n\nThe shortcut key to get to the search text box is CTRL-F. You can exit the search text box view by clicking the Search button or CTRL-F again.\n\nAnother quick way to access a specific directory is to press CTRL-L, which will give you a Location text box to type in a path to a directory.\n\nMore About Searching for Files\n\nYou can refine your search beyond the initial keyword by providing dropdown menus to further filter the search.\n\nBased on Location or File Type, select additional criteria from the dropdown.\n\nTo regenerate the search, click the Reload button.\n\nTo add multiple search criteria, click the + button and select Additional Search Criteria.\n\nFor example, if you want to find a PDF file containing the word Linux in your home directory, navigate to your Home directory and search for the word “Linux”. You should see that the default search criterion limits the search to your Home directory already. To finish the job, click the + button to add another search criterion, select File Type for the type of criterion, and select PDF under the File Type dropdown.\n\nEditing a File\n\nEditing any text file through the graphical interface is easy in the GNOME desktop environment. Simply double-click the file on the desktop or in the Nautilus file browser window to open the file with the default text editor.\n\nThe default text editor in GNOME is gedit. It is simple yet powerful, ideal for editing documents, making quick notes, and programming. Although gedit is designed as a general-purpose text editor, it offers additional features for spell-checking, highlighting, file listings, and statistics.\n\nRemoving a File\n\nDeleting a file in Nautilus will automatically move the deleted files to the .local/share/Trash/files/ directory (a trash can of sorts) under the user’s home directory. There are several ways to delete files and directories using Nautilus.\n\nSelect all the files and directories that you want to delete.\n\nPress CTRL-Delete on your keyboard, or right-click the file.\n\nSelect Move to Trash.\n\nNote that you may have a Delete Permanently option which bypasses the trash folder, and that this option may be visible all the time or only in list (rather than) icon mode.\n\nMore About Removing a File\n\nTo permanently delete a file:\n\nOn the left panel inside a Nautilus file browser window, right-click on the Trash directory.\n\nSelect Empty Trash.\n\nAlternatively, select the file or directory you want to permanently delete and press Shift-Delete.\n\nAs a precaution, you should never delete your Home directory, as doing so will most likely erase all your GNOME configuration files and possibly prevent you from logging in. Many personal system and program configurations are stored under your home directory.\n\nFind the latest modified file in /var/log.\n\nYou will have to open the file browser window and navigate to the /var/log directory. This will vary somewhat from distribution to distribution. On most recent distributions, you will click on Other Locations > Computer.\n\nNavigate to the /var/log directory. Set the view option to List rather than Icon, and then click on the date.\n\nThe basic operations will be the same here, whether you have a GNOME or KDE desktop, although exact procedures and choices may differ slightly.\n\nCreate a new text file on the desktop named lab.txt, using the graphical file manager.\n\nDelete the file by sending it to Trash.\n\nVerify the file is now in ~/.local/share/Trash, or a subdirectory thereof. NOTE: You will have to get your file browser to show hidden files and directories, those that start with a .).\n\nRecover the file and make sure it is in its original location.\n\nOpen the file manager and navigate to your home directory. Once your user configuration is set up for it, this is as simple as right-clicking in the directory, and selecting Create New > Text File and giving it a name (you may see something other than Text File).\n\nWith the GNOME file manager, there is no such option in the default setup. You must create a file called new in your Templates directory first. The easiest way to do this is to type Alt-F2 and then in the little window that opens up\n\nstudent:/tmp> touch ~/Templates/new\n\nOnce you have done that, you can either right-click in the directory, or somewhere on the right side of the title bar to open up a dialog where there will be an option to create a new file of some type.\n\nWhy this feature is not on by default might be considered a mystery not understood by modern science. However, the logic is that new files are generally not created in a vacuum (at least in GUIs); one expects to make them in an application. Some distributions or versions of GNOME may not need this step.\n\nThis should be pretty obvious, either by dragging and dropping in the Trash folder on the left, or through a right-click on the file.\n\nTo navigate down through your .local directory, you have to make hidden files visible. On GNOME systems, you can either just hit CTRL-H, or you can click on the little down arrow next to the gear icon and toggle showing hidden files on and off.\n\nThe easiest way is to click on the Trash icon and then pick Restore, which will bring it back to its original location which you can easily verify.\n\nNote that the GNOME File Manager does not include a Delete or Permanently Delete option by default. To enable this you have to go into preferences and turn it on. You can enter the preferences menu by starting the File Manager and on the top task bar on the desktop, click on its icon and get into the preference menus.\n\nChapter Summary\n\nYou have completed Chapter 4. Let’s summarize the key concepts covered:\n\nGNOME is a popular desktop environment and graphical user interface that runs on top of the Linux operating system.\n\nThe default display manager for GNOME is called gdm.\n\nThe gdm display manager presents the user with the login screen, which prompts for the login username and password.\n\nLogging out through the desktop environment kills all processes in your current X session and returns to the display manager login screen.\n\nLinux enables users to switch between logged-in sessions.\n\nSuspending puts the computer into sleep mode.\n\nFor each key task, there is generally a default application installed.\n\nEvery user created in the system will have a home directory.\n\nThe Places menu contains entries that allow you to access different parts of the computer and the network.\n\nNautilus gives three formats to view files.\n\nMost text editors are located in the Accessories submenu.\n\nEach Linux distribution comes with its own set of desktop backgrounds.\n\nGNOME comes with a set of different themes which can change the way your applications look.\n\nChapter 5: System Configuration from the Graphical Interface\n\nSystem Settings\n\nThe System Settings panel allows you to control most of the basic configuration options and desktop settings, such as specifying the screen resolution, managing network connections, or changing the date and time of the system.\n\nFor the GNOME Desktop Manager, one clicks on the upper right-hand corner and then selects the tools image (screwdriver crossed with a wrench or a gear). Depending on your distribution, you may find other ways to get into the settings configuration as well. You will also find variation in the menu layout between Linux distributions and versions, so you may have to hunt for the settings you need to examine or modify.\n\nSystem Settings Menus\n\nTo get deeper into device configuration, one can click on the appropriate items on the previous menu in order to configure items like the display, the keyboard, the printers, etc. Clicking on Applications lets you configure the options relevant to many installed programs.\n\nOne can also click on the Users icon (which may be under Details) to set values for system users, such as their login picture, password, etc.\n\ngnome-tweaks\n\nA lot of personalized configuration settings do not appear on the settings menus. Instead, you have to launch a tool called either gnome-tweaks (or gnome-tweak-tool on older Linux distributions). We have not really discussed working at the command line yet, but you can always launch a program such as this by doing Alt-F2 and typing in the command. Some distributions have a link to the tweaks menus in the settings, but for some mysterious reason, many obscure this tool’s existence, and it becomes hard to discover how to modify even rather basic desktop attributes and behavior.\n\nImportant things you can do with this tool include selecting a theme, configuring extensions which you can get from your distribution or download from the Internet, control fonts, modify the keyboard layout, and set which programs start when you login.\n\nThe most recent GNOME versions have removed a lot of the functionality of gnome-tweaks; extensions now have to be configured using a new app called gnome-extensions-app. The reasoning for this is obscure.\n\nThe screenshot here shows running gnome-extensions-app on a Red Hat system with quite a few extensions installed, but not all being used.\n\nDisplay Settings\n\nClicking on Settings > Displays (or Settings > Devices > Displays) will expose the most common settings for changing the desktop appearance. You can also bring this up by right-clicking anywhere on the desktop and selecting Display Settings. These settings function independently of the specific display drivers you are running. The exact appearance will depend enormously on how many monitors you have and other factors, such as Linux distribution and particular version.\n\nIf your system uses a proprietary video card driver (usually from nVidia or AMD), you will probably have a separate configuration program for that driver. This program may give more configuration options, but may also be more complicated, and might require sysadmin (root) access. If possible, you should configure the settings in the Displays panel rather than with the proprietary program.\n\nOn systems utilizing the X Window system, the server which actually provides the GUI, uses /etc/X11/xorg.conf as its configuration file if it exists; In modern Linux distributions, this file is usually present only in unusual circumstances, such as when certain less common graphic drivers are in use. Changing this configuration file directly is usually for more advanced users.\n\nSetting Resolution and Configuring Multiple Screens\n\nWhile your system will usually figure out the best resolution for your screen automatically, it may get this wrong in some cases, or you might want to change the resolution to meet your needs.\n\nYou can accomplish this using the Displays panel. The switch to the new resolution will be effective when you click Apply, and then confirm that the resolution is working. In case the selected resolution fails to work or you are just not happy with the appearance, the system will switch back to the original resolution after a short timeout. Once again, the exact appearance of the configuration screen will vary a lot between distributions and versions, but usually is rather intuitive and easy, once you find the configuration menus.\n\nIn most cases, the configuration for multiple displays is set up automatically as one big screen spanning all monitors, using a reasonable guess for screen layout. If the screen layout is not as desired, a check box can turn on mirrored mode, where the same display is seen on all monitors. Clicking on a particular monitor image lets you configure the resolution of each one, and whether they make one big screen, or mirror the same video, etc.\n\nDate and Time Settings\n\nBy default, Linux always uses Coordinated Universal Time (UTC) for its own internal timekeeping. Displayed or stored time values rely on the system time zone setting to get the proper time. UTC is similar to, but more accurate than, Greenwich Mean Time (GMT).\n\nIf you click on the time displayed on the top panel, you can adjust the format with which the date and time is shown; on some distributions, you can also alter the values.\n\nThe more detailed date and time settings can be selected from the Date & Time window in the System Settings Menu.\n\nNetwork Time Protocol\n\nThe Network Time Protocol (NTP) is the most popular and reliable protocol for setting the local time by consulting established Internet servers. Linux distributions always come with a working NTP setup, which refers to specific time servers run or relied on by the distribution. This means that no setup, beyond “on” or “off”, is generally required for network time synchronization.\n\nGetting and Setting Screen Resolution\n\nFind out the current screen resolution for your desktop.\n\nChange it to something else, and change it back to its original value.\n\nNOTE: You can also ascertain your current resolution by typing at the command line:\n\nstudent:/tmp> $ xdpyinfo | grep dim\n\ndimensions: 3200x1080 pixels (847x286 millimeters)\n\nClick either the gear or tool icon in the top right corner, depending on your distribution, and select System Settings.\n\nClick on either Displays or Devices > Displays. The resolution dropdown should be evident and intuitive to use.\n\nWorking with Time Settings\n\nChange the timezone of your system to London time (or New York time, if you are currently in London time). How does the displayed time change?\n\nAfter noting the time change, change the timezone back to your local timezone.\n\nOn a GNOME desktop, click on System Settings > Date & Time or System Settings > Details > Date & Time, and note the current Location settings.\n\nYou will either have to click on Unlock to give the root password, or will be asked for it when you try to change the timezone, depending on your GNOME version.\n\nUse the Region and City dropdowns to switch the region to Europe and the city to London, or type London into the Location widget and pick the proper location from the list that appears. (You may also just be able to click at the right place on a map of the world.)\n\nLook at the clock, and note that the displayed time has changed. Now, set the timezone back in the same way.\n\nOn KDE desktops, the details are somewhat different, but it is not difficult to figure out how to do this, and it should take you less time to find the configuration methods than it does to describe them.\n\nNetwork Configuration\n\nAll Linux distributions have network configuration files, but file formats and locations can differ from one distribution to another. Hand editing of these files can handle quite complicated setups, but is not very dynamic or easy to learn and use. Network Manager was developed to make things easier and more uniform across distributions. It can list all available networks (both wired and wireless), allow the choice of a wired, wireless, or mobile broadband network, handle passwords, and set up Virtual Private Networks (VPNs). Except for unusual situations, it is generally best to let Network Manager establish your connections and keep track of your settings.\n\nIn this section, you will learn how to manage network connections, including wired and wireless connections, and mobile broadband and VPN connections.\n\nWired and Wireless Connections\n\nWired connections usually do not require complicated or manual configuration. The hardware interface and signal presence are automatically detected, and then Network Manager sets the actual network settings via Dynamic Host Configuration Protocol (DHCP).\n\nFor static configurations that do not use DHCP, manual setup can also be done easily through Network Manager. You can also change the Ethernet Media Access Control (MAC) address if your hardware supports it. The MAC address is a unique hexadecimal number of your network card.\n\nWireless networks are usually not connected by default. You can view the list of available wireless networks and see which one (if any) you are currently connected to by using Network Manager. You can then add, edit, or remove known wireless networks, and also specify which ones you want connected by default when present.\n\nConfiguring Wireless Connections\n\nTo configure a wireless network in any recent GNOME-based distribution:\n\nClick on the upper-right corner of the top panel, which brings up a settings and/or network window. While the exact appearance will depend on Linux distribution and version, it will always be possible to click on a Wi-Fi submenu, as long as the hardware is present. Here is an example from a RHEL 8 system:\n\nSelect the wireless network you wish to connect to. If it is a secure network, the first time it will request that you enter the appropriate password. By default, the password will be saved for subsequent connections.\n\nIf you click on Wi-Fi Settings, you will bring up the third screenshot. If you click on the Gear icon for any connection, you can configure it in more detail.\n\nOther Linux distributions and versions may look different in detail, but the steps and choices are essentially identical, as they are all running Network Manager with perhaps somewhat different clothing.\n\nMobile Broadband and VPN Connections\n\nYou can set up a mobile broadband connection with Network Manager, which will launch a wizard to set up the connection details for each connection.\n\nOnce the configuration is done, the network is configured automatically each time the broadband network is attached.\n\nNetwork Manager can also manage your VPN connections.\n\nIt supports many VPN technologies, such as native IPSec, Cisco OpenConnect (via either the Cisco client or a native open source client), Microsoft PPTP, and OpenVPN.\n\nYou might get support for VPN as a separate package from your distributor. You need to install this package if your preferred VPN is not supported.\n\nGet the current networking configuration for your desktop.\n\nAre you on a wired or a wireless connection? Or both?\n\nIf you have wireless hardware, see what wireless networks are available, if any.\n\nClick the Network Manager icon in the upper right corner of your desktop (appearance can vary by distribution). This should bring up the wired and wireless connection state, and which wireless networks are available.\n\nInstalling and Updating Software\n\nEach package in a Linux distribution provides one piece of the system, such as the Linux kernel, the C compiler, utilities for manipulating text or configuring the network, or for your favorite web browsers and email clients.\n\nPackages often depend on each other. For example, because your email client can communicate using SSL/TLS, it will depend on a package that provides the ability to encrypt and decrypt SSL and TLS communication and will not install unless that package is also installed at the same time.\n\nAll systems have a lower-level utility that handles the details of unpacking a package and putting the pieces in the right places. However, most of the time, you will be working with a higher-level utility that knows how to download and install packages directly from the Internet and can manage dependencies and groups for you.\n\nIn this section, you will learn how to install and update software in Linux using the Debian packaging system (used by systems such as Ubuntu as well) and RPM packaging systems (which are used by both Red Hat and SUSE family systems). These are the main ones in use, although others work well for other distributions which have a smaller user base, such as Archlinux and Gentoo.\n\nDebian Packaging\n\nLet’s look at the package management for the Debian family system.\n\ndpkg is the underlying package manager for these systems. It can install, remove, and build packages. Unlike higher-level package management systems, it does not automatically download and install packages and satisfy their dependencies.\n\nFor Debian-based systems, the higher-level package management system is the Advanced Package Tool (APT) system of utilities. Generally, while each distribution within the Debian family uses APT, it creates its own user interface on top of it (for example, apt and apt-get, synaptic, gnome-software, Ubuntu Software Center, etc). Although apt repositories are generally compatible with each other, the software they contain generally is not. Therefore, most repositories target a particular distribution (like Ubuntu), and often software distributors ship with multiple repositories to support multiple distributions. Demonstrations are shown later in this section.\n\nRed Hat Package Manager (RPM)\n\nRed Hat Package Manager (RPM) is the other package management system popular on Linux distributions. It was developed by Red Hat and adopted by a number of other distributions, including Fedora, CentOS, SUSE/openSUSE, Oracle Linux, and others.\n\nThe higher-level package manager differs between distributions. Red Hat family distributions historically use RHEL/CentOS, and Fedora uses dnf, while SUSE family distributions such as openSUSE also use RPM but use the zypper interface.\n\nopenSUSE’s YaST Software Management\n\nThe Yet another Setup Tool (YaST) software manager is similar to other graphical package managers. It is an RPM-based application. You can add, remove, or update packages using this application very easily. To access the YaST software manager:\n\nClick Activities\n\nIn the Search box, type YaST\n\nClick the YaST icon\n\nClick Software Management\n\nYou can also find YaST by clicking on Applications > Other-YaST, which is a strange place to put it.\n\nopenSUSE’s YaST software management application is similar to the graphical package managers in other distributions. A demonstration of the YaST software manager is shown later in this section.\n\nInstalling and Removing Software Packages\n\nUsing graphical package management tools, find the dump package.\n\nIf it is not installed, install it.\n\nOn any recent GNOME-based system, you can run the gnome-software utility as we have described. You can either run it from some menu location, or from a command line, or by typing it after hitting ALT-F2.\n\nOn Ubuntu, use either the Ubuntu Software Center or synaptic. On any other Debian-based system, you can use synaptic.\n\nOn Red Hat 7-based systems, including CentOS 7, click on Applications in the top menu bar, then System Tools > Software.\n\nOn SUSE-based systems, you can click on the System Settings icon in the upper right corner (the wrench and screwdriver) and then System > YaST.\n\nOn any of these systems, you can then just type dump in the search box and proceed from there.\n\nChapter Summary\n\nYou can control basic configuration options and desktop settings through the System Settings panel.\n\nLinux always uses Coordinated Universal Time (UTC) for its own internal time-keeping. You can set the date and time settings from the System Settings window.\n\nThe Network Time Protocol is the most popular and reliable protocol for setting the local time via Internet servers.\n\nThe Displays panel allows you to change the resolution of your display and configure multiple screens.\n\nNetwork Manager can present available wireless networks, allow the choice of a wireless or mobile broadband network, handle passwords, and set up VPNs.\n\ndpkg and RPM are the most popular package management systems used on Linux distributions.\n\nDebian distributions use dpkg and apt-based utilities for package management.\n\nRPM was developed by Red Hat, and adopted by a number of other distributions, including the openSUSE, Mandriva, CentOS, Oracle Linux, and others.\n\nChapter 6: Common Applications\n\nInternet Applications\n\nThe Internet is a global network that allows users around the world to perform multiple tasks, such as searching for data, communicating through emails and online shopping. Obviously, you need to use network-aware applications to take advantage of the Internet. These include:\n\nWeb browsers\n\nEmail clients\n\nStreaming media applications\n\nInternet Relay Chats\n\nConferencing software\n\nWeb Browsers\n\nAs discussed in the Graphical Interface chapter, Linux offers a wide variety of web browsers, both graphical and text-based, including:\n\nFirefox\n\nGoogle Chrome\n\nChromium\n\nEpiphany (renamed web)\n\nKonqueror\n\nlinx, lynx, w3m\n\nOpera\n\nEmail Applications\n\nEmail applications allow for sending, receiving, and reading messages over the Internet. Linux systems offer a wide number of email clients, both graphical and text-based. In addition, many users simply use their browsers to access their email accounts.\n\nMost email clients use the Internet Message Access Protocol (IMAP) or the older Post Office Protocol (POP) to access emails stored on a remote mail server. Most email applications also display HTML (HyperText Markup Language) formatted emails that display objects, such as pictures and hyperlinks. The features of advanced email applications include the ability of importing address books/contact lists, configuration information, and emails from other email applications.\n\nLinux supports the following types of email applications:\n\nGraphical email clients, such as Thunderbird, Evolution, and Claws Mail.\n\nText mode email clients, such as Mutt and mail.\n\nAll web browser-based clients, such as Gmail, Yahoo Mail, and Office 365.\n\nOther Applications\n\nLinux systems provide many other applications for performing Internet-related tasks. These include:\n\nOffice Applications\n\nMost day-to-day computer systems have productivity applications (sometimes called office suites) available or installed. Each suite is a collection of closely coupled programs used to create and edit different kinds of files such as:\n\nText (articles, books, reports, etc.)\n\nSpreadsheets\n\nPresentations\n\nGraphical objects.\n\nMost Linux distributions offer LibreOffice, an open source office suite that started in 2010 and has evolved from OpenOffice. While other office suites are available, LibreOffice is the most mature, widely used and intensely developed.\n\nIn addition, Linux users have full access to Internet-based office suites such as Google Docs and Microsoft Office 365.\n\nLibreOffice Components\n\nThe component applications included in LibreOffice are:\n\nWriter: Word Processing\n\nCalc: Spreadsheets\n\nImpress: Presentations\n\nDraw: Create and edit graphics and diagrams.\n\nThe LibreOffice applications can read and write non-native document formats, such as those used by Microsoft Office. Usually, fidelity is maintained quite well, but complicated documents might have some imperfect conversions.\n\nDevelopment Applications\n\nLinux distributions come with a complete set of applications and tools that are needed by those developing or maintaining both user applications and the kernel itself.\n\nThese tools are tightly integrated and include:\n\nAdvanced editors customized for programmers’ needs, such as vi and emacs.\n\nCompilers (such as gcc and clang for programs in C and C++) for every computer language that has ever existed, including very popular new ones such as Golang and Rust.\n\nDebuggers such as gdb and various graphical front ends to it and many other debugging tools (such as Valgrind).\n\nPerformance measuring and monitoring programs, some with easy to use graphical interfaces, others more arcane and meant to be used only by serious experienced development engineers.\n\nSource and Revision control systems, such as git (and associated interfaces to it, including GitHub and GitLab) and older systems, such as Apache Subversion.\n\nComplete Integrated Development Environments (IDE’s) such as Eclipse and Visual Studio Code that put all these tools together.\n\nOn other operating systems, these tools have to be obtained and installed separately, often at a high cost, while on Linux they are all available at no cost, either through standard package installation systems or direct downloading from the responsible maintainers and hosts.\n\nSound Players\n\nMultimedia applications are used to listen to music, watch videos, etc., as well as to present and view text and graphics. Linux systems offer a number of sound player applications, including:\n\nOf course, Linux systems can also connect with commercial online music streaming services, such as Pandora and Spotify through web browsers.\n\nMovie Players\n\nMovie (video) players can portray input from many different sources, either local to the machine or on the Internet.\n\nLinux systems offer a number of movie players, including:\n\nVLC\n\nMPlayer\n\nXine\n\nTotem\n\nMovie Editors\n\nMovie editors are used to edit videos or movies. Linux systems offer a number of movie editors, including:\n\nGIMP (GNU Image Manipulation Program)\n\nGraphic editors allow you to create, edit, view, and organize images of various formats, like Joint Photographic Experts Group (JPEG or JPG), Portable Network Graphics (PNG), Graphics Interchange Format (GIF), and Tagged Image File Format (TIFF).\n\nThe GNU Image Manipulation Program (GIMP) is a feature-rich image retouching and editing tool similar to Adobe Photoshop and is available on all Linux distributions. Some features of the GIMP are:\n\nIt can handle any image file format.\n\nIt has many special purpose plugins and filters.\n\nIt provides extensive information about the image, such as layers, channels, and histograms.\n\nGraphic Utilities\n\nIn addition to GIMP, there are other graphics utilities that help perform various image-related tasks, including:\n\nUsing the gnome-software application, examine the list of installed applications on your system.\n\nThe gnome-software application should be available on any recent distribution. Exactly where it is in the menus might vary, but you should be able to find it at Applications > System Tools > Software. You can also launch it by typing gnome-software on a terminal window or hitting Alt-F2 and typing it.\n\nOnce you have the GUI open, you can click on Installed to see the list, which is probably not complete and will vary according to distribution and what you have installed.\n\nMost distributions have other graphical applications that show the full list of installed (and available) packages organized into categories, many of which (but not most) are applications. On Debian-based systems such as Ubuntu, you can run synaptic. On OpenSuse, you can run Yast, etc.\n\nChapter Summary\n\nLinux offers a wide variety of Internet applications, such as web browsers, email clients, online media applications, and others.\n\nWeb browsers supported by Linux can be either graphical or text-based, such as Firefox, Google Chrome, Epiphany, w3m, lynx, and others.\n\nLinux supports graphical email clients, such as Thunderbird, Evolution, and Claws Mail, and text mode email clients, such as Mutt and mail.\n\nLinux systems provide many other applications for performing Internet-related tasks, such as Filezilla, XChat, Pidgin, and others.\n\nMost Linux distributions offer LibreOffice to create and edit different kinds of documents.\n\nLinux systems offer entire suites of development applications and tools, including compilers and debuggers.\n\nLinux systems offer a number of sound players including Amarok, Audacity, Audacious, and Rhythmbox.\n\nLinux systems offer a number of movie players, including VLC, MPlayer, Xine, and Totem.\n\nLinux systems offer a number of movie editors, including Kino, Blender among others.\n\nThe GIMP (GNU Image Manipulation Program) utility is a feature-rich image retouching and editing tool available on all Linux distributions.\n\nOther graphics utilities that help perform various image-related tasks are eog, Inkscape, convert, and Scribus.\n\nChapter 7: Command Line Operations\n\nIntroduction to the Command Line\n\nLinux system administrators spend a significant amount of their time at a command line prompt. They often automate and troubleshoot tasks in this text environment. There is a saying, “graphical user interfaces make easy tasks easier, while command line interfaces make difficult tasks possible”. Linux relies heavily on the abundance of command line tools. The command line interface provides the following advantages:\n\nNo GUI overhead is incurred.\n\nVirtually any and every task can be accomplished while sitting at the command line.\n\nYou can implement scripts for often-used (or easy-to-forget) tasks and series of procedures.\n\nYou can sign into remote machines anywhere on the Internet.\n\nYou can initiate graphical applications directly from the command line instead of hunting through menus.\n\nWhile graphical tools may vary among Linux distributions, the command line interface does not.\n\nUsing a Text Terminal on Graphical Desktop\n\nA terminal emulator program emulates (simulates) a standalone terminal within a window on the desktop. By this, we mean it behaves essentially as if you were logging into the machine at a pure text terminal with no running graphical interface. Most terminal emulator programs support multiple terminal sessions by opening additional tabs or windows.\n\nBy default, on GNOME desktop environments, the gnome-terminal application is used to emulate a text-mode terminal in a window. Other available terminal programs include:\n\nxterm\n\nkonsole (default on KDE)\n\nterminator\n\nLaunching Terminal Windows\n\nTo open a terminal on any system using a recent GNOME desktop click on Applications > System Tools > Terminal or Applications > Utilities > Terminal. If you do not have the Applications menu, you will have to install the appropriate gnome-shell-extension package and turn it on with gnome-tweaks.\n\nOn most GNOME-based distributions, you can always open a terminal by right-clicking anywhere on the desktop background and selecting Open in Terminal. If this does not work, you may need to install and activate the appropriate package, usually called gnome-shell-extension-apps-menu.\n\nYou can also hit Alt-F2 and type gnome-terminal.\n\nBecause distributions have had a history of burying how to open up a command line terminal, and the place in menus may vary in the desktop GUI, It is a good idea to figure out how to “pin” the terminal icon to the panel, which might mean adding it to the Favorites grouping on GNOME systems.\n\nSome Basic Utilities\n\nThere are some basic command line utilities that are used constantly, and it would be impossible to proceed further without using some of them in simple form before we discuss them in more detail. A short list has to include:\n\ncat: used to type out a file (or combine files).\n\nhead: used to show the first few lines of a file.\n\ntail: used to show the last few lines of a file.\n\nman: used to view documentation.\n\nThe screenshot shows elementary uses of these programs. Note the use of the pipe symbol (|) used to have one program take as input the output of another.\n\nFor the most part, we will only use these utilities in screenshots displaying various activities, before we discuss them in detail.\n\nThe Command Line\n\nMost input lines entered at the shell prompt have three basic elements:\n\nCommand\n\nOptions\n\nArguments\n\nThe command is the name of the program or script you are executing. It may be followed by one or more options (or switches) that modify what the command may do. Options usually start with one or two dashes, for example, -p or — print, in order to differentiate them from arguments, which represent what the command operates on.\n\nHowever, plenty of commands have no options, no arguments, or neither. In addition, other elements (such as setting environment variables) can also appear on the command line when launching a task.\n\nsudo\n\nAll the demonstrations created have a user configured with sudo capabilities to provide the user with administrative (admin) privileges when required. sudo allows users to run programs using the security privileges of another user, generally root (superuser).\n\nOn your own systems, you may need to set up and enable sudo to work correctly. To do this, you need to follow some steps that we will discuss but not explain in much detail right now. Many distributions, including Ubuntu, configure sudo for you during installation. On other Linux distributions, you will need to configure sudo to work properly after the initial installation. We will return to discussing the differences and use of both su and sudo later in our security-focused section.\n\nSteps for Setting Up and Running sudo\n\nIf your system does not already have sudo set up and enabled, you need to do the following steps:\n\nYou will need to make modifications as the administrative, or superuser, root. While sudo will become the preferred method of doing this, we do not have it set up yet, so we will need to use su instead. At the command line prompt, type su and press Enter. You will then be prompted for the root password, so enter it and press Enter. You will notice that nothing is printed; this is so others cannot see the password on the screen. You should end up with a different looking prompt, often ending with ‘#’. For example:\n\n$ su Password:\n\n#\n\nNow, you need to create a configuration file to enable your user account to use sudo. Typically, this file is created in the /etc/sudoers.d/ directory with the name of the file the same as your username. For example, for this demo, let’s say your username is student. After doing step 1, you would then create the configuration file for student by doing this:\n\n# echo “student ALL=(ALL) ALL” > /etc/sudoers.d/student\n\nFinally, some Linux distributions will complain if you do not also change permissions on the file by doing:\n\n# chmod 440 /etc/sudoers.d/student\n\nThat should be it. For the rest of this course, if you use sudo you should be properly set up. When using sudo, by default you will be prompted to give a password (your own user password) at least the first time you do it within a specified time interval. It is possible (though very insecure) to configure sudo to not require a password or change the time window in which the password does not have to be repeated with every sudo command.\n\nSwitching Between the GUI and the Command Line\n\nThe customizable nature of Linux allows you to drop the graphical interface (temporarily or permanently) or to start it up after the system has been running.\n\nMost Linux distributions give an option during installation (or have more than one version of the install media) to choose between a desktop or workstation (with a graphical user interface) or server (usually without one).\n\nLinux production servers are usually installed without the GUI, and even if it is installed, usually do not launch it during system startup. Removing the graphical interface from a production server can be very helpful in maintaining a lean system, which can be easier to support and keep secure.\n\nVirtual Terminals\n\nVirtual Terminals (VT) are console sessions that use the entire display and keyboard outside of a graphical environment. Such terminals are considered “virtual” because, although there can be multiple active terminals, only one terminal remains visible at a time. A VT is not the same as a command line terminal window; you can have many of those visible simultaneously on a graphical desktop.\n\nOne virtual terminal (usually VT 1 or VT 7) is reserved for the graphical environment, and text logins are enabled on the unused VTs.\n\nAn example of a situation where using VTs is helpful is when you run into problems with the graphical desktop. In this situation, you can switch to one of the text VTs and troubleshoot.\n\nTo switch between VTs, press CTRL-ALT-function key for the VT. For example, press CTRL-ALT-F6 for VT 6. Actually, you only have to press the ALT-F6 key combination if you are in a VT and want to switch to another VT.\n\nTurning Off the Graphical Desktop\n\nLinux distributions can start and stop the graphical desktop in various ways. The exact method differs among distributions and between versions. For the newer system-based distributions, the display manager is run as a service, and you can stop the GUI desktop with the systemctl utility. In addition, most distributions will also work with the telinit command, as in:\n\n$ sudo systemctl stop gdm (or sudo telinit 3)\n\nand restart it (after logging into the console) with:\n\n$ sudo systemctl start gdm (or sudo telinit 5)\n\nKilling the Graphical User Interface\n\nFrom within a graphical terminal (gnome-terminal, konsole, etc.), kill the current graphical desktop.\n\nYour method will depend on your distribution and your greeter program (i.e., gdm or kdm).\n\nRestart the GUI from the console.\n\nMethods of bringing down the GUI:\n\nstudent:/tmp> sudo systemctl stop gdm\n\nstudent:/tmp> sudo telinit 3\n\nMethods of bringing the GUI back up:\n\nstudent:/tmp> sudo systemctl start gdm\n\nstudent:/tmp> sudo telinit 5\n\nBasic Operations\n\nIn this section, we will discuss how to accomplish basic operations from the command line. These include how to log in and log out from the system, restart or shut down the system, locate applications, access directories, identify absolute and relative paths, and explore the filesystem.\n\nLogging In and Out\n\nAn available text terminal will prompt for a username (with the string login:) and password. When typing your password, nothing is displayed on the terminal (not even a * to indicate that you typed in something), to prevent others from seeing your password. After you have logged into the system, you can perform basic operations.\n\nOnce your session is started (either by logging into a text terminal or via a graphical terminal program), you can also connect and log into remote systems by using Secure SHell (SSH). For example, by typing ssh student@remote-server.com, SSH would connect securely to the remote machine (remote-server.com) and give student a command line terminal window, using either a password (as with regular logins) or cryptographic key to sign in without providing a password to verify the identity.\n\nRebooting and Shutting Down\n\nThe preferred method to shut down or reboot the system is to use the shutdown command. This sends a warning message, and then prevents further users from logging in. The init process will then control shutting down or rebooting the system. It is important to always shut down properly; failure to do so can result in damage to the system and/or loss of data.\n\nThe halt and poweroff commands issue shutdown -h to halt the system; reboot issues shutdown -r and causes the machine to reboot instead of just shutting down. Both rebooting and shutting down from the command line requires superuser (root) access.\n\nWhen administering a multi-user system, you have the option of notifying all users prior to shutdown, as in:\n\n$ sudo shutdown -h 10:00 “Shutting down for scheduled maintenance.”"
    }
}