{
    "id": "dbpedia_86_0",
    "rank": 61,
    "data": {
        "url": "https://github.com/Mason10198/SkywarnPlus",
        "read_more_link": "",
        "language": "en",
        "title": "Mason10198/SkywarnPlus: Empowering Asterisk / app_rpt Nodes with Local Alert Intelligence",
        "top_image": "https://opengraph.githubassets.com/7c44e5f4757010534ef30d9fcbbdcb8f2b041ef22fbba78cc12f93f06a342ad8/Mason10198/SkywarnPlus",
        "meta_img": "https://opengraph.githubassets.com/7c44e5f4757010534ef30d9fcbbdcb8f2b041ef22fbba78cc12f93f06a342ad8/Mason10198/SkywarnPlus",
        "images": [
            "https://raw.githubusercontent.com/Mason10198/SkywarnPlus/main/Logo_SWP.svg",
            "https://camo.githubusercontent.com/f627d177d6de990aa90aae2423c78934a3f6494a024e81db03b139d03f30f92c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f4d61736f6e31303139382f536b797761726e506c75733f6c6162656c3d56657273696f6e26636f6c6f723d663135643234",
            "https://camo.githubusercontent.com/fc6c49ce83997a020700770c034bbcd7111d0853f52f1cde39fa90e4db94ed20/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f4d61736f6e31303139382f536b797761726e506c75733f6c6162656c3d52656c656173656426636f6c6f723d663135643234",
            "https://camo.githubusercontent.com/5e356578498da4f28e492a8c95fb28d3e5a1a43089c88e71e12fba062add1fc3/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246686974732e6477796c2e636f6d2532464d61736f6e3130313938253246536b797761726e506c75732e6a736f6e266c6162656c3d4869747326636f6c6f723d663135643234",
            "https://camo.githubusercontent.com/0ef63e7acb140a677b7eedeb97278decf4c8788254c25d893b19ffcfdf363dd1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f4d61736f6e31303139382f536b797761726e506c75732f746f74616c3f6c6162656c3d446f776e6c6f61647326636f6c6f723d663135643234",
            "https://camo.githubusercontent.com/4664f12f380a30fb88bf26d8317a47713748607be86f60a2e3284297e80f6642/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f4d61736f6e31303139382f536b797761726e506c75733f6c6162656c3d53697a6526636f6c6f723d663135643234",
            "https://raw.githubusercontent.com/stefan-niedermann/paypal-donate-button/master/paypal-donate-button.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Empowering Asterisk / app_rpt Nodes with Local Alert Intelligence - Mason10198/SkywarnPlus",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/Mason10198/SkywarnPlus",
        "text": "SkywarnPlus is an advanced software solution tailored for Asterisk/app_rpt nodes. It is designed to provide important information about local government-issued alerts in the United States, thereby broadening the scope and functionality of your node. By intelligently integrating local alert data, SkywarnPlus brings a new layer of relevance and utility to your existing system. SkywarnPlus works with all major distributions, including AllstarLink, HAMVOIP, myGMRS, GMRS Live, and more.\n\nInstallation\n\nAutomated Installation\n\nConfiguration\n\nTimeType Configuration\n\nTail Messages\n\nCourtesy Tones\n\nConfiguration Overview\n\nconfig.yaml Configuration\n\nrpt.conf Configuration\n\nDynamic Tone Switching\n\nConsistent Filenames\n\nCW / Voice IDs\n\nConfiguration\n\nPushover Integration\n\nSkyControl\n\nUsage\n\nSpoken Feedback\n\nMapping to DTMF Commands\n\nAlertScript\n\nUnderstanding AlertScript\n\nMatching\n\nClearCommands: Responding to Alert Clearance\n\nWhy Caution with Wildcards?\n\nBest Practice:\n\nTransition-Based Commands\n\nActiveCommands\n\nConfiguration Example for ActiveCommands:\n\nInactiveCommands\n\nConfiguration Example for InactiveCommands:\n\nImplementing Transition-Based Commands\n\nThe Power of YOU\n\nSkyDescribe\n\nUsage\n\nIntegration with AlertScript\n\nMapping to DTMF commands\n\nCustomizing the Audio Files\n\nCounty Identifiers\n\nAutomated Setup using CountyIDGen.py\n\nManual Setup\n\nSupermon Integration\n\nAutoSkywarn vs. AUTOSKY\n\nSupermon 6.1 - 7.4\n\nSupermon 2\n\nast_var_update.sh\n\nSkywarnPlus Integration with Supermon 2 Upgraded\n\nManual Installation\n\nTesting\n\nDebugging\n\nMaintenance and Bug Reporting\n\nContributing\n\nFrequently Asked Questions\n\nI just installed SkywarnPlus on my HamVoIP node, why is it giving me errors?\n\nWhy do I see depreciation warnings when installing SkywarnPlus on my HamVoIP node?\n\nCan I change the crontab interval to something other than 60 seconds?\n\nWhat does \"with multiples\" mean?\n\nWhy is SkywarnPlus saying the same thing every 60 seconds?\n\nI just installed SkywarnPlus, why don't I hear anything?\n\nThere is an active alert in my area, but SkywarnPlus isn't doing anything. What gives?\n\nWhy aren't my test alerts working?\n\nCan SkywarnPlus automatically read the full alert description?\n\nLicense\n\nReal-Time Alerts: The software watches the new NWS v1.2 API for real-time alerts for user-defined areas.\n\nAutomatic Announcements: Alerts, including when all warnings have been cleared, are announced automatically on the node.\n\nHuman Speech: Announcements are delivered in a natural, human speech for easier understanding.\n\nUnlimited Area & Node Numbers: Users can define as many areas and local node numbers as desired.\n\nTailmessage Creation: The software generates tailmessages for the node to continuously inform listeners about active alerts after the initial broadcast.\n\nDynamic Changes to Node: Courtesy tones and node CW / voice ID automatically change according to user-defined alerts, optimizing communication during severe weather.\n\nCounty Identification: Dynamically and automatically inform listeners which county or counties an alert is affecting\n\nEfficiency & Speed: SkywarnPlus is optimized for speed and efficiency to provide real-time information without delay.\n\nPreserves Hardware: SkywarnPlus limits I/O to the physical disk, preventing SD card burnout in Raspberry Pi devices.\n\nRemote Control: Functions can be mapped to DTMF commands for remote over-the-air control.\n\nDetailed Alert Descriptions: In addition to standard alert announcements, SkywarnPlus includes SkyDescribe, a feature for announcing detailed NWS provided descriptions of alert details.\n\nHighly Customizable: SkywarnPlus is extremely customizable, offering advanced filtering parameters to block certain alerts or types of alerts from different functions. Users can easily modify the sound effects and audio files used in SkywarnPlus. Users can even map DTMF macros or shell commands to specified weather alerts, infinitely expanding the software's capabilities according to user needs.\n\nPushover Integration: With Pushover integration, SkywarnPlus can send weather alert notifications directly to your phone or other devices.\n\nFault Tolerance: In the event that SkywarnPlus is unable to access the internet for alert updates (during a severe storm), it will continue to function using alert data it has stored from the last successful data update, using the estimated expiration time provided by the NWS to determine when to automatically \"clear\" alerts. There is no need to worry about your node \"locking up\" with stale alerts.\n\nWhether you wish to auto-link to a Skywarn net during severe weather, program your node to control an external device like a siren during a tornado warning, or simply want to stay updated on changing weather conditions, SkywarnPlus offers a comprehensive, efficient, and customizable solution for your weather alert needs.\n\nSkywarnPlus supports all 128 alert types included in the NWS v1.2 API.\n\n911 Telephone Outage Emergency Administrative Message Air Quality Alert Air Stagnation Advisory Arroyo And Small Stream Flood Advisory Ashfall Advisory Ashfall Warning Avalanche Advisory Avalanche Warning Avalanche Watch Beach Hazards Statement Blizzard Warning Blizzard Watch Blowing Dust Advisory Blowing Dust Warning Brisk Wind Advisory Child Abduction Emergency Civil Danger Warning Civil Emergency Message Coastal Flood Advisory Coastal Flood Statement Coastal Flood Warning Coastal Flood Watch Dense Fog Advisory Dense Smoke Advisory Dust Advisory Dust Storm Warning Earthquake Warning Evacuation - Immediate Excessive Heat Warning Excessive Heat Watch Extreme Cold Warning Extreme Cold Watch Extreme Fire Danger Extreme Wind Warning Fire Warning Fire Weather Watch Flash Flood Statement Flash Flood Warning Flash Flood Watch Flood Advisory Flood Statement Flood Warning Flood Watch Freeze Warning Freeze Watch Freezing Fog Advisory Freezing Rain Advisory Freezing Spray Advisory Frost Advisory Gale Warning Gale Watch Hard Freeze Warning Hard Freeze Watch Hazardous Materials Warning Hazardous Seas Warning Hazardous Seas Watch Hazardous Weather Outlook Heat Advisory Heavy Freezing Spray Warning Heavy Freezing Spray Watch High Surf Advisory High Surf Warning High Wind Warning High Wind Watch Hurricane Force Wind Warning Hurricane Force Wind Watch Hurricane Local Statement Hurricane Warning Hurricane Watch Hydrologic Advisory Hydrologic Outlook Ice Storm Warning Lake Effect Snow Advisory Lake Effect Snow Warning Lake Effect Snow Watch Lake Wind Advisory Lakeshore Flood Advisory Lakeshore Flood Statement Lakeshore Flood Warning Lakeshore Flood Watch Law Enforcement Warning Local Area Emergency Low Water Advisory Marine Weather Statement Nuclear Power Plant Warning Radiological Hazard Warning Red Flag Warning Rip Current Statement Severe Thunderstorm Warning Severe Thunderstorm Watch Severe Weather Statement Shelter In Place Warning Short Term Forecast Small Craft Advisory Small Craft Advisory For Hazardous Seas Small Craft Advisory For Rough Bar Small Craft Advisory For Winds Small Stream Flood Advisory Snow Squall Warning Special Marine Warning Special Weather Statement Storm Surge Warning Storm Surge Watch Storm Warning Storm Watch Test Tornado Warning Tornado Watch Tropical Depression Local Statement Tropical Storm Local Statement Tropical Storm Warning Tropical Storm Watch Tsunami Advisory Tsunami Warning Tsunami Watch Typhoon Local Statement Typhoon Warning Typhoon Watch Urban And Small Stream Flood Advisory Volcano Warning Wind Advisory Wind Chill Advisory Wind Chill Warning Wind Chill Watch Winter Storm Warning Winter Storm Watch Winter Weather Advisory\n\nAccess the terminal of your node and execute the following command as root:\n\nbash -c \"$(curl -fsSL https://raw.githubusercontent.com/Mason10198/SkywarnPlus/main/swp-install)\"\n\nContinue with Configuration.\n\nSkywarnPlus was designed with customization in mind, making it possible to fit nearly any usage scenario you can throw at it. However, this can make the configuration seem a bit daunting. Be patient, and when in doubt, read the documentation.\n\nEdit the config.yaml file according to your needs. This is where you will enter your NWS codes, enable/disable specific functions, etc.\n\nnano config.yaml\n\nYou can find your county codes in the CountyCodes.md file included in this repository. Navigate to the file and look for your state and then your specific county to find the associated County Code you'll use in SkywarnPlus to poll for alerts.\n\nAccording to the official NWS API documentation:\n\n\"For large scale or longer lasting events, such as snow storms, fire threat, or heat events, alerts are issued by NWS public forecast zones or fire weather zones. These zones differ in size and can cross county boundaries.\"\n\n\"...county based alerts are not mapped to zones but zone based alerts are mapped to counties. The effect this has is for requests such as:\n\nhttps://api.weather.gov/alerts/active?zone=MDZ013\n\nor\n\nhttps://api.weather.gov/alerts?zone=MDZ013\n\nWill not contain county based products. However requests such as:\n\nhttps://api.weather.gov/alerts?zone=MDC033\n\nor\n\nhttps://api.weather.gov/alerts/active?zone=MDC033\n\nWill contain all county based alerts and all zone based alerts that are associated to the county or counties requested. If there are multiple zones associated with that county, the response from API will include all alerts for those zones.\"\n\nThis information was obtained from this document.\n\nThis means that if you use a County code, you will receive all alerts for both your County AND your Zone - but if you use a Zone code, you will ONLY receive alerts that cover the entire Zone, and none of the alerts specific to your County.\n\nThis setting in SkywarnPlus determines the timing for issuing weather alerts. Users have the option to select between \"onset\" and \"effective\" time types, which influence the alerting strategy as follows:\n\nONSET\n\nWith the ONSET setting, alerts are issued based on the anticipated start time of the weather event. This ensures that alerts are timely and relevant, focusing on imminent events. For instance, consider an Air Quality Alert issued due to a distant wildfire's smoke predicted to affect the area in three days time. While the alert might be issued early by the NWS, SkywarnPlus will only process the alert at the actual onset of the deteriorating air quality, avoiding premature notifications about conditions that are not yet affecting the area. Additionally, if Tailmessages are enabled, then using the ONSET setting prevents unnecessary repeated notifications of an event over an extended period of time.\n\nEFFECTIVE\n\nIn contrast, the EFFECTIVE setting triggers SkywarnPlus to process alerts immediately upon their issuance from the NWS, regardless of the time until the subject matter is considered to be onset. This can result in alerts being announced well in advance of the actual event. Using the same Air Quality Alert scenario, the alert would be processed and announced as soon as it is issued, regardless of the smoke's actual arrival time, potentially leading to early warnings about conditions that are days away from materializing. Additionally, if Tailmessages are enabled, then the Air Quality Alert notifications would be continuously repeated for 3 days prior to the event actually occuring.\n\nThe default ONSET setting is recommended for ensuring that alerts are pertinent and actionable. It helps in maintaining the alert system's credibility by avoiding unnecessary alarms about conditions that are forecasted but not yet imminent, thereby aiding in better preparedness and response when the event actually occurs.\n\nWhen in doubt, you can verity the exact data being provided by the NWS API, and whether an alert is currently EFFECTIVE or ONSET, by visiting the API endpoing in the following format:\n\nSkywarnPlus can automatically create, manage, and remove a tail message whenever certain weather alerts are active to keep listeners informed throught the duration of active alerts. The configuration for this will be based on your rpt.conf file setup. Here's an example:\n\nSkywarnPlus offers the capability to dynamically change node courtesy tones based on the current weather alert status. This feature enhances the responsiveness and informational value of the repeater system by providing auditory signals corresponding to specific weather conditions. Configuration is managed via the config.yaml and rpt.conf files, allowing for precise control over tone behavior.\n\nThe setup process involves specifying your preferences in the config.yaml file and ensuring the rpt.conf file correctly references the managed courtesy tone files.\n\nWithin config.yaml, you can enable the feature, specify the directory for tone files, and define the tones for \"normal\" and \"wx\" (weather alert) modes. Here's an example configuration:\n\nEnsure rpt.conf is set up to reference the courtesy tone files that SkywarnPlus manages. The configuration should match the defined tones in config.yaml. Example:\n\nWhen enabled, SkywarnPlus will automatically switch between \"normal\" and \"wx\" mode tones based on the active weather alerts defined in the CTAlerts section of config.yaml. This change enhances situational awareness through auditory cues.\n\nEnsure that filenames and case sensitivity are consistent across config.yaml and rpt.conf to ensure seamless operation.\n\nAfter initially setting up automatic courtesy tones, the audio files will not refresh until the next time the alert status changes. To refresh immediately, run /usr/local/bin/SkywarnPlus/SkyControl.py changect normal to force the CTs to \"normal\" mode.\n\nSkywarnPlus has a feature that allows it to automatically change the node ID based on the status of certain weather alerts. This requires the creation of custom audio files for the NORMAL and WX ID modes.\n\nThe configuration for this is in the config.yaml file, with additional setup needed in the rpt.conf file. Let's take a look at how it's done.\n\nHere's an example of how the config.yaml file should be configured:\n\nIn this setup, if none of the alerts specified in the IDAlerts list are active, SkywarnPlus replaces the file RPTID.ulaw with a duplicate of NORMALID.ulaw.\n\nHowever, if any of the alerts in the IDAlerts list are currently active, SkywarnPlus will replace RPTID.ulaw with a duplicate of WXID.ulaw.\n\nTo enable these changes, the following setup is required in your rpt.conf file:\n\nIn this case, Asterisk will always use RPTID.ulaw as the node ID. SkywarnPlus effectively changes the contents of the RPTID.ulaw file depending on the weather alert status while Asterisk \"isn't looking\".\n\nNote that filenames are case-sensitive, so be sure they match exactly between rpt.conf and config.yaml.\n\nAfter initially setting up automatic IDs, the audio files will not refresh until the next time the alert status changes. To refresh immediately, run /usr/local/bin/SkywarnPlys/SkyControl.py changeid normal to force the ID to \"normal\" mode.\n\nSkywarnPlus can use the free Pushover API to send WX alert notifications and debug messages directly to your smartphone or other devices.\n\nVisit https://pushover.net/ to sign up for a free account.\n\nFind your UserKey on your main dashboard\n\nScroll down and create an Application/API key for your node\n\nAdd UserKey & API Key to config.yaml\n\nSkywarnPlus comes with a powerful control script (SkyControl.py) that can be used to enable or disable certain SkywarnPlus functions via shell, without manually editing config.yaml. This script is particularly useful when you want to map DTMF control codes to these functions. An added advantage is that the script provides spoken feedback upon execution, making it even more suitable for DTMF control.\n\nTo use the SkyControl.py script, you need to call it with two parameters:\n\nThe name of the setting you want to change (case insensitive).\n\nEnable (Completely enable/disable SkywarnPlus)\n\nSayAlert\n\nSayAllClear\n\nTailMessage\n\nCourtesyTone\n\nIDChange\n\nAlertScript\n\nThe new value for the setting (either 'true' or 'false' or 'toggle').\n\nFor example, to completely disable SkywarnPlus, you would use:\n\nAnd to reenable it, you would use:\n\nAnd to toggle it, you would use:\n\nYou can also use SkyControl.py to manually force the state of Courtesy Tones or IDs:\n\n/usr/local/bin/SkywarnPlus/SkyControl.py changect normal /usr/local/bin/SkywarnPlus/SkyControl.py changect wx /usr/local/bin/SkywarnPlus/SkyControl.py changeid normal /usr/local/bin/SkywarnPlus/SkyControl.py changect wx\n\nUpon the successful execution of a control command, the SkyControl.py script will provide spoken feedback that corresponds to the change made. For instance, if you execute a command to enable the SayAlert function, the script will play an audio message stating that SayAlert has been enabled. This feature enhances user experience and confirms that the desired changes have been effected.\n\nYou can map the SkyControl.py script to DTMF commands in the rpt.conf file of your node. Here is an example of how to do this:\n\nWith this setup, you can control SkywarnPlus' functionality using DTMF commands.\n\nSkywarnPlus's AlertScript feature is an immensely flexible tool that provides the ability to program your node to respond to specific alerts in unique ways. By enabling you to map alerts to DTMF commands or bash scripts, AlertScript offers you the versatility to design your own extensions to SkywarnPlus, modifying its functionalities to perfectly fit your needs.\n\nWith AlertScript, you can outline actions to be executed when specific alerts are activated. For instance, you might want to broadcast a unique sound, deliver a particular message, or initiate any other action your hardware can perform and that can be activated by a DTMF command or bash script.\n\nTo utilize AlertScript, you define the mapping of alerts to either DTMF commands or bash scripts in the config.yaml file under the AlertScript section.\n\nHere are examples of how to map alerts to DTMF commands or bash scripts:\n\nThe Match: parameter tells AlertScript how to handle the triggers. If Match: ANY, then only 1 of the triggers needs to be matched for the command(s) to execute. If Match: ALL, then all of the triggers must be matched for the command(s) to execute. If Match: is not defined, then ANY is used by default.\n\nWith the introduction of ClearCommands, AlertScript now allows you to define actions that should be executed once a specific alert has been cleared. This can be particularly useful for scenarios where you want to notify users that a previously active alert is no longer in effect or to reset certain systems to their default state after an alert ends.\n\nIn the config.yaml file, under each mapping in the AlertScript section, you can specify the ClearCommands that should be executed when the corresponding alert(s) are cleared.\n\nFor example:\n\nIn the above configuration, when the alerts \"Tornado Warning\" AND \"Tornado Watch\" are detected, the DTMF macro *123*456*789 will be executed. However, when there are no longer ANY alerts matching \"Tornado Warning\" OR \"Tornado Watch\", the DTMF macro *987*654*321 will be executed.\n\nWildcards offer broad matching capabilities, activating Commands for a wide range of alerts. However, when it comes to alert clearance (ClearCommands), the broad nature of wildcards can lead to unintended behaviors:\n\nNon-Specific Clearance: Wildcards do not specify a single alert clearance that should trigger ClearCommands, potentially causing them to execute in unintended scenarios.\n\nOverlap and Confusion: In situations with multiple active alerts covered by a single wildcard trigger, identifying the precise moment for ClearCommands execution can become ambiguous and may not function as intended.\n\nIt's recommended to use specific mappings for ClearCommands to ensure precise and predictable behavior upon alert clearance. If using wildcards, be prepared for ClearCommands to potentially execute in broader circumstances than anticipated, and consider the overall context of your alert management strategy.\n\nAlertScript includes the capability to execute specific BASH or DTMF commands based on transitions in overall state of alert activity.\n\nActiveCommands are designed to be executed when the system transitions from a state of having zero active weather alerts to a state where one or more alerts become active. This feature is particularly useful for signaling the onset of weather-related activities or conditions that warrant immediate attention or action.\n\nIn this example, a message is echoed whenever the system detects the first active weather alert after a period of no alerts. This could be adapted to activate lights, sounds, or other notification systems to alert of changing conditions.\n\nConversely, InactiveCommands are triggered when the number of active weather alerts changes from one or more to zero. This transition indicates a return to a state of no immediate weather threats, and commands under this category can be used to deactivate alerts, reset systems, or notify personnel of the all-clear status.\n\nThis example would output a message signaling that all active weather alerts have been cleared. Similar to ActiveCommands, InactiveCommands can be customized to perform a wide range of actions, such as turning off alerting systems or sending an all-clear message through your communication channels.\n\nTo utilize these new command types, simply add ActiveCommands and/or InactiveCommands to your AlertScript configuration in the config.yaml file, following the same format as other AlertScript mappings. This allows for both BASH and DTMF commands to be executed in response to changes in the alert status landscape, providing a dynamic and responsive alert management system.\n\nAlertScript derives its power from its versatility and extensibility. By providing the capacity to directly interface with your node's functionality through DTMF commands or bash scripts, you can effectively program the node to do virtually anything in response to a specific weather alert.\n\nFancy activating a siren when a tornado warning is received? You can do that. Want to send an email notification when there's a severe thunderstorm warning? You can do that too. The only limit is the capability of your node and connected systems.\n\nIn essence, AlertScript unleashes a world of customization possibilities, empowering you to add new capabilities to SkywarnPlus, create your own extensions, and modify your setup to align with your specific requirements and preferences. By giving you the authority to dictate how your system should react to various weather alerts, AlertScript makes SkywarnPlus a truly powerful tool for managing weather alerts on your node.\n\nSkyDescribe is a powerful and flexible tool that works in tandem with SkywarnPlus. It enables the system to provide a spoken detailed description of weather alerts, adding depth and clarity to the basic information broadcasted by default.\n\nThe SkyDescribe.py script works by fetching a specific alert from the stored data (maintained by SkywarnPlus) based on the title or index provided. The script then converts the description to audio using a free text-to-speech service and broadcasts it using Asterisk on the defined nodes.\n\nTo use SkyDescribe.py, you simply execute the script with the title or index of the alert you want to be described. The index of the alert is the place it holds in the alert announcement or tailmessage (depending on blocking sonfiguration).\n\nFor example, if SkywarnPlus announces \"Tornado Warning, Tornado Watch, Severe Thunderstorm Warning\", you could execute the following:\n\nor, you can use the title of the alert instead of the index:\n\nSkyDescribe.py can be seamlessly integrated with AlertScript, enabling automatic detailed description announcements for specific alerts. This can be accomplished by mapping the alerts to a bash command that executes SkyDescribe.py with the alert title as a parameter.\n\nHere's an example of how to achieve this in the config.yaml file:\n\nFor added flexibility, SkyDescribe.py can also be linked to DTMF commands, allowing alert descriptions to be requested over-the-air.\n\nSkywarnPlus comes with a library of audio files that can be replaced with any 8kHz mono PCM16 WAV files you want. These are found in the SOUNDS/ directory by default, along with DICTIONARY.txt which explains audio file assignments. Several customizations can be easily made in config.yaml, but the sound files are always available for you to modify directly as well.\n\nIf you'd like to use IDChange, you must create your own audio files. Follow this guide on how to record/convert audio files for use with Asterisk/app_rpt.\n\nSkywarnPlus features the capability to play county-specific audio files to reference the affected area of alerts. It enhances the user's awareness of the geographic area affected by an event, making the system more informative and valuable to users monitoring systems that provide coverage for multiple counties. By assigning unique audio tags to each county, users can immediately recognize which county is affected by an event as soon as it is detected by SkywarnPlus.\n\nTo simplify the process of setting up county-specific audio tags, SkywarnPlus provides a utility script called CountyIDGen.py. This script is designed to:\n\nGenerate WAV audio files for each county code defined in the config.yaml using the Voice RSS Text-to-Speech API.\n\nSave these generated files in the proper directory.\n\nModify the config.yaml automatically to reference these files.\n\nTo use the script for automated setup, simply make sure you have already set up all of your county codes (Alerting section) and VoiceRSS details (SkyDescribe section) in config.yaml, and then execute the script:\n\n./CountyIDGen.py\n\nManual setup involves creating or otherwise aquire these audio files yourself. The audio files must be located in the root of the SkywarnPlus/SOUNDS/ directory.\n\nThe config.yaml explains how to use the free VoiceRSS API to generate these files using a computer synthesized voice.\n\nHere is an example of how to manually configure the config.yaml to utilize this feature:\n\nThe compatibility between various versions of Supermon and SkywarnPlus, as well as their interactions with the now outdated AutoSkywarn / AUTOSKY, requires clarification due to historical development constraints and system updates. Below is a detailed explanation of the intended functionalities and limitations.\n\nAll of the integration functionality implemented by SkywarnPlus described below are workarounds. They need to be replaced by proper integration from Supermon/Supermon2 developers. Please encourage developers to check the /tmp/SkywarnPlus/data.json for alerts to display so that these 'hacks' can be removed.\n\nThe original AutoSkywarn (KF5VH) was forked and modified to create the very similar AUTOSKY (HamVoIP). For the purposes of this document, they are considered the same.\n\nIn Supermon versions 6.1 - 7.4, the following code segment was added to link.php to ingest plaintext alert titles from a file created by AUTOSKY:\n\nThis code segment in Supermon versions 6.1 - 7.4 simply adds the entire contents of the /tmp/AUTOSKY/warnings.txt text file to the webpage, colors them red, and makes them bold. The contents of /tmp/AUTOSKY/warnings.txt would look like this:\n\nA workaround called SupermonCompat was added to SkywarnPlus so that the alert titles would still be displayed in Supermon. This feature simply adds alert titles to /tmp/AUTOSKY/warnings.txt so that Supermon versions 6.1 - 7.4 can display them.\n\nA completely separate version of Supermon, called Supermon 2, was also written with the intention of ingesting alert titles from AUTOSKY. Supermon 2 operates differently from its predecessors. It reads the Asterisk channel variables for each node and places those variables into the Node Information section. These variables are always empty when Asterisk first starts up. To address this, Supermon 2 includes a script called ast_var_update.sh.\n\nast_var_update.sh\n\nThe ast_var_update.sh script needs to be run periodically to update variables in Allstar, which are used to transfer data to Supermon 2 from local or remote servers. This script updates various pieces of information, including the CPU temperature, uptime, load average, weather, alerts, log file size, and registration status for the nodes displayed in Supermon 2.\n\nPlease note that the ast_var_update.sh script included with Supermon 2 will process the /tmp/AUTOSKY/warnings.txt file in a way that mostly works with, but is not fully compatible with, SkywarnPlus. It will attempt to wrap the alert titles in <a> tags to create a hyperlink to that alert on the NWS website, but it does so by using the AutoSky.ini file, which does not exist unless AUTOSKY is installed. As a result, SkywarnPlus alerts in Supermon 2 have historically hyperlinked to nowhere, simply opening a new Supermon 2 tab. Since SkywarnPlus hinges on the ability to process alerts for several different locations at the same time, there is no good way to hyperlink to the NWS page from an alert title, thus this functionality could not be improved.\n\nHere is the relevant portion of the ast_var_update.sh script included with Supermon 2:\n\nBeginning with SkywarnPlus release v0.8.0 (7/21/24), a function was added to emulate the functionality of ast_var_update.sh in an enhanced way. This allows proper display of alert information from SkywarnPlus in Supermon 2, without broken hyperlinks.\n\nSkywarnPlus is recommended to be installed at the /usr/local/bin/SkywarnPlus location on both Debian and Arch systems.\n\nFollow the steps below to install:\n\nDependencies\n\nInstall the required dependencies using the following commands:\n\nDebian 11 and Older (ASL 1 & ASL 2)\n\n# EXECUTE ONE LINE AT A TIME apt install unzip python3 python3-pip ffmpeg pip3 install ruamel.yaml requests python-dateutil pydub\n\nDebian 12 and Newer (ASL 3+)\n\nBeginning around Debian 12 \"Bookworm\", installing Python packages via pip will have Debian throw a fit about package managers and externally managed virtual environments. Use these commands instead on newer distros.\n\n# EXECUTE ONE LINE AT A TIME apt install unzip python3 python3-pip ffmpeg apt install python3-ruamel.yaml python3-requests python3-dateutil python3-pydub\n\nArch (HAMVOIP)\n\nIt is a good idea to first update your HAMVOIP system using Option 1 in the HAMVOIP menu before installing the dependencies.\n\n# EXECUTE ONE LINE AT A TIME pacman -S ffmpeg wget https://bootstrap.pypa.io/pip/3.5/get-pip.py python get-pip.py pip install requests python-dateutil pydub pip install ruamel.yaml==0.15.100\n\nDownload SkywarnPlus\n\nDownload the latest release of SkywarnPlus from GitHub\n\ncd /usr/local/bin wget https://github.com/Mason10198/SkywarnPlus/releases/latest/download/SkywarnPlus.zip unzip SkywarnPlus.zip rm SkywarnPlus.zip\n\nConfigure Permissions\n\nThe scripts must be made executable. Use the chmod command to change the file permissions:\n\ncd SkywarnPlus chmod +x *.py\n\nCrontab Entry\n\nASL1, ASL2, and HamVoIP\n\nAdd a crontab entry to call SkywarnPlus on an interval as the root user.\n\necho '* * * * * root /usr/local/bin/SkywarnPlus/SkywarnPlus.py' > /etc/cron.d/SkywarnPlus\n\nASL3\n\nAdd a crontab entry to call SkywarnPlus on an interval as the asterisk user\n\necho '* * * * * asterisk /usr/local/bin/SkywarnPlus/SkywarnPlus.py' > /etc/cron.d/SkywarnPlus\n\nThis command will execute SkywarnPlus (poll NWS API for data) every 60 seconds. For slower systems, or systems with several counties and/or advanced configurations, the interval may need to be increased.\n\nSkywarnPlus provides the ability to inject predefined alerts, bypassing the call to the NWS API. This feature is extremely useful for testing SkywarnPlus.\n\nTo enable injection, modify the following settings in the [DEV] section of your config.yaml file:\n\nDebugging is an essential part of diagnosing issues with SkywarnPlus. To facilitate this, SkywarnPlus provides a built-in debugging feature. Here's how to use it:\n\nEnable Debugging: The debugging feature can be enabled in the config.yaml file. Open this file and set the debug option under the [SkywarnPlus] section to true.\n\nThis will allow the program to output detailed information about its operations, which is helpful for identifying any issues or errors.\n\nOpen an Asterisk Console: While debugging SkywarnPlus, it's helpful to have an Asterisk console open in a separate terminal window. This allows you to observe any issues related to Asterisk, such as problems playing audio files.\n\nYou can open an Asterisk console with the following command:\n\nasterisk -rvvv\n\nThis command will launch an Asterisk console with a verbose output level of 3 (vvv), which provides a detailed look at what Asterisk is doing. This can be particularly useful if you're trying to debug issues with audio playback.\n\nAnalyze Debugging Output: With debugging enabled in SkywarnPlus and the Asterisk console open, you can now run SkywarnPlus and observe the detailed output in both terminals. This information can be used to identify and troubleshoot any issues or unexpected behaviors.\n\nRemember, the more detailed your debug output is, the easier it will be to spot any issues. However, please be aware that enabling debug mode can result in large amounts of output, so it should be used judiciously.\n\nIf you encounter any issues that you're unable to resolve, please don't hesitate to submit a detailed bug report on the SkywarnPlus GitHub Repository.\n\nSkywarnPlus is actively maintained by a single individual who dedicates their spare time to improve and manage this project. Despite best efforts, the application may have some bugs or areas for improvement.\n\nIf you encounter any issues with SkywarnPlus, please check back to the SkywarnPlus GitHub Repository to see if there have been any updates or fixes since the last time you downloaded it. New commits are made regularly to enhance the system's performance and rectify any known issues.\n\nBug reporting is greatly appreciated as it helps to improve SkywarnPlus. If you spot a bug, please raise an issue in the GitHub repository detailing the problem. Include as much information as possible, such as error messages, screenshots, and steps to reproduce the issue. This will assist in quickly understanding and resolving the issue.\n\nThank you for your understanding and assistance in making SkywarnPlus a more robust and reliable system for all.\n\nSkywarnPlus is open-source and welcomes contributions. If you'd like to contribute, please fork the repository and use a feature branch. Pull requests are warmly welcome.\n\nIf the spare time I put into the development of SkywarnPlus has helped you, please consider supporting!\n\nHamVoIP uses a very outdated version of Python which can cause some issues that ASL users do not experience. Carefully follow the installation inctructions line-by-line (do not copy/paste all commands at once) and try again.\n\nHamVoIP uses a very outdated version of Python, and Python will display warnings asking you to update it. Unfortunately, Python cannot be upgraded on HamVoIP and these warnings must be ignored.\n\nYes! You can run SkywarnPlus as frequently or infrequently as you wish. Be aware, whatever you set the interval to (X), there will be a delay of \"up to\" X minutes between the time an alert is issued by the NWS, and the time that SWP announces it.\n\nThe \"multiples\" flag informs the listener that there is more than one unique instance of the given alert type in the county/counties you defined in the configuration. For example, a config file with 2x counties defined, and a unique Tornado Warning in each county.\n\nYou probably have the CLEANSLATE developer option enabled in the config.yaml file by accident.\n\nAssuming you installed it correctly, SkywarnPlus will not do anything until it detects alerts provided by the NWS.\n\nIt is very likely that the alert is not technically active yet in your area, and SkywarnPlus is holding off on announcing that alert until it is imminent. Please see the TimeType Configuration section for more information. When in doubt, you can verity the exact data being provided by the NWS API, and whether an alert is currently EFFECTIVE or ONSET, by visiting the API endpoing in the following format:\n\nMake sure you're injecting alerts with the correct format, shown in the Testing section.\n\nYes! You can use AlertScript to automcatially trigger SkyDescribe whenever specific alerts are detected.\n\nSkywarnPlus is open-sourced software licensed under the GPL-3.0 license.\n\nCreated by Mason Nelson (N5LSN/WRKF394)\n\nAudio Library voiced by Rachel Nelson (N5LSN/WRKF394 XYL)\n\nSkywarn® and the Skywarn® logo are registered trademarks of the National Oceanic and Atmospheric Administration, used with permission."
    }
}