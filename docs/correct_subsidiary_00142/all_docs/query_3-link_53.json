{
    "id": "correct_subsidiary_00142_3",
    "rank": 53,
    "data": {
        "url": "https://cwe.mitre.org/data/definitions/798.html",
        "read_more_link": "",
        "language": "en",
        "title": "coded Credentials (4.15)",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://cwe.mitre.org/images/cwe_logo.jpg",
            "https://cwe.mitre.org/images/new_to_cwe/new_to_cwe_click_here.png",
            "https://cwe.mitre.org/images/mihw_logo.svg",
            "https://cwe.mitre.org/images/cwe_top_25_logo_simple.svg",
            "https://cwe.mitre.org/images/x-logo-black.png",
            "https://cwe.mitre.org/images/mastodon-logo.png",
            "https://cwe.mitre.org/images/linkedin_sm.jpg",
            "https://cwe.mitre.org/images/youtube.png",
            "https://cwe.mitre.org/images/out_of_bounds_read_logo.png",
            "https://cwe.mitre.org/images/medium_sm.png",
            "https://cwe.mitre.org/images/layout/close.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/data/images/CWE-798-Diagram.png",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/icons/base.gif",
            "https://cwe.mitre.org/images/icons/class.gif",
            "https://cwe.mitre.org/images/icons/class.gif",
            "https://cwe.mitre.org/images/icons/variant.gif",
            "https://cwe.mitre.org/images/icons/variant.gif",
            "https://cwe.mitre.org/images/icons/base.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_less.gif",
            "https://cwe.mitre.org/images/icons/class.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_less.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_less.gif",
            "https://cwe.mitre.org/images/icons/variant.gif",
            "https://cwe.mitre.org/images/icons/variant.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_less.gif",
            "https://cwe.mitre.org/images/icons/variant.gif",
            "https://cwe.mitre.org/images/icons/variant.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/dictionary.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/icons/category.gif",
            "https://cwe.mitre.org/images/icons/view.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_more.gif",
            "https://cwe.mitre.org/images/head_less.gif",
            "https://cwe.mitre.org/images/mitre_logo.gif",
            "https://cwe.mitre.org/images/x-logo-black.png",
            "https://cwe.mitre.org/images/mastodon-logo.png",
            "https://cwe.mitre.org/images/linkedin_sm.jpg",
            "https://cwe.mitre.org/images/youtube.png",
            "https://cwe.mitre.org/images/out_of_bounds_read_logo.png",
            "https://cwe.mitre.org/images/medium.png",
            "https://cwe.mitre.org/images/hssedi.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Common Weakness Enumeration (CWE) is a list of software weaknesses.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "CWE-798: Use of Hard-coded Credentials\n\nWeakness ID: 798\n\nVulnerability Mapping: ALLOWEDThis CWE ID may be used to map to real-world vulnerabilities\n\nAbstraction: BaseBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.\n\nView customized information:\n\nFor users who are interested in more notional aspects of a weakness. Example: educators, technical writers, and project/program managers. For users who are concerned with the practical application and details about the nature of a weakness and how to prevent it from happening. Example: tool developers, security researchers, pen-testers, incident response analysts. For users who are mapping an issue to CWE/CAPEC IDs, i.e., finding the most appropriate CWE for a specific issue (e.g., a CVE record). Example: tool developers, security researchers. For users who wish to see all available information for the CWE/CAPEC entry. For users who want to customize what details are displayed.\n\nExtended Description\n\nThere are two main variations:\n\nInbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. In this variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. It can also be difficult for the administrator to detect.\n\nOutbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component. This variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password that can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product.\n\nCommon Consequences\n\nThis table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact.\n\nPotential Mitigations\n\nPhase: Architecture and Design\n\nFor outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].\n\nIn Windows environments, the Encrypted File System (EFS) may provide some protection.\n\nPhase: Architecture and Design\n\nFor inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\n\nPhase: Architecture and Design\n\nIf the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.\n\nPhase: Architecture and Design\n\nFor inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.\n\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n\nPhase: Architecture and Design\n\nFor front-end to back-end connections: Three solutions are possible, although none are complete.\n\nThe first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n\nNext, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n\nFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.\n\nThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.\n\nRelevant to the view \"Research Concepts\" (CWE-1000)\n\nNatureTypeIDNameChildOfBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.344Use of Invariant Value in Dynamically Changing ContextChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.671Lack of Administrator Control over SecurityChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.1391Use of Weak CredentialsParentOfVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.259Use of Hard-coded PasswordParentOfVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.321Use of Hard-coded Cryptographic KeyPeerOfBase - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.257Storing Passwords in a Recoverable Format\n\nThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.\n\nRelevant to the view \"Software Development\" (CWE-699)\n\nNatureTypeIDNameMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.255Credentials Management ErrorsMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.320Key Management Errors\n\nThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.\n\nRelevant to the view \"Weaknesses for Simplified Mapping of Published Vulnerabilities\" (CWE-1003)\n\nNatureTypeIDNameChildOfClass - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.287Improper Authentication\n\nThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.\n\nRelevant to the view \"Architectural Concepts\" (CWE-1008)\n\nNatureTypeIDNameMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1010Authenticate Actors\n\nThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.\n\nRelevant to the view \"CISQ Quality Measures (2020)\" (CWE-1305)\n\nNatureTypeIDNameParentOfVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.259Use of Hard-coded PasswordParentOfVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.321Use of Hard-coded Cryptographic Key\n\nThis table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.\n\nRelevant to the view \"CISQ Data Protection Measures\" (CWE-1340)\n\nNatureTypeIDNameParentOfVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.259Use of Hard-coded PasswordParentOfVariant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. More specific than a Base weakness. Variant level weaknesses typically describe issues in terms of 3 to 5 of the following dimensions: behavior, property, technology, language, and resource.321Use of Hard-coded Cryptographic Key\n\nModes Of Introduction\n\nThe different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase.\n\nApplicable Platforms\n\nThis listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.\n\nLanguages\n\nClass: Not Language-Specific (Undetermined Prevalence)\n\nTechnologies\n\nClass: Mobile (Undetermined Prevalence)\n\nClass: ICS/OT (Often Prevalent)\n\nLikelihood Of Exploit\n\nHigh\n\nDemonstrative Examples\n\nExample 1\n\nThe following code uses a hard-coded password to connect to a database:\n\n(bad code)\n\nExample Language: Java\n\n...\n\nDriverManager.getConnection(url, \"scott\", \"tiger\");\n\n...\n\nThis is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:\n\n(attack code)\n\njavap -c ConnMngr.class\n\n22: ldc #36; //String jdbc:mysql://ixne.com/rxsql\n\n24: ldc #38; //String scott\n\n26: ldc #17; //String tiger\n\nExample 2\n\nThe following code is an example of an internal hard-coded password in the back-end:\n\n(bad code)\n\nExample Language: C\n\nint VerifyAdmin(char *password) {\n\nif (strcmp(password, \"Mew!\")) {\n\nprintf(\"Incorrect Password!\\n\");\n\nreturn(0)\n\n}\n\nprintf(\"Entering Diagnostic Mode...\\n\");\n\nreturn(1);\n\n}\n\n(bad code)\n\nExample Language: Java\n\nint VerifyAdmin(String password) {\n\nif (!password.equals(\"Mew!\")) {\n\nreturn(0)\n\n}\n\n//Diagnostic Mode\n\nreturn(1);\n\n}\n\nEvery instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\"\n\nExample 3\n\nThe following code examples attempt to verify a password using a hard-coded cryptographic key.\n\n(bad code)\n\nExample Language: C\n\nint VerifyAdmin(char *password) {\n\nif (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) {\n\nprintf(\"Incorrect Password!\\n\");\n\nreturn(0);\n\n}\n\nprintf(\"Entering Diagnostic Mode...\\n\");\n\nreturn(1);\n\n}\n\n(bad code)\n\nExample Language: Java\n\npublic boolean VerifyAdmin(String password) {\n\nif (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) {\n\nSystem.out.println(\"Entering Diagnostic Mode...\");\n\nreturn true;\n\n}\n\nSystem.out.println(\"Incorrect Password!\");\n\nreturn false;\n\n(bad code)\n\nExample Language: C#\n\nint VerifyAdmin(String password) {\n\nif (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) {\n\nConsole.WriteLine(\"Entering Diagnostic Mode...\");\n\nreturn(1);\n\n}\n\nConsole.WriteLine(\"Incorrect Password!\");\n\nreturn(0);\n\n}\n\nThe cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.\n\nExample 4\n\nThe following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.\n\nThis Java example shows a properties file with a cleartext username / password pair.\n\n(bad code)\n\nExample Language: Java\n\n# Java Web App ResourceBundle properties file\n\n...\n\nwebapp.ldap.username=secretUsername\n\nwebapp.ldap.password=secretPassword\n\n...\n\nThe following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.\n\n(bad code)\n\nExample Language: ASP.NET\n\n...\n\n<connectionStrings>\n\n<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />\n\n</connectionStrings>\n\n...\n\nUsername and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.\n\nExample 5\n\nIn 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.\n\nMultiple vendors used hard-coded credentials in their OT products.\n\nObserved Examples\n\nReferenceDescription\n\nCondition Monitor firmware has a maintenance interface with hard-coded credentials\n\nEngineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation\n\nDistributed Control System (DCS) has hard-coded passwords for local shell access\n\nProgrammable Logic Controller (PLC) has a maintenance service that uses undocumented, hard-coded credentials\n\nFirmware for a Safety Instrumented System (SIS) has hard-coded credentials for access to boot configuration\n\nRemote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used in typical deployments\n\nTelnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]\n\nFirmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port\n\nInstallation script has a hard-coded secret token value, allowing attackers to bypass authentication\n\nSCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm\n\nFTP server library uses hard-coded usernames and passwords for three default accounts\n\nChain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code\n\nServer uses hard-coded authentication key\n\nBackup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface\n\nSecurity appliance uses hard-coded password allowing attackers to gain root access\n\nDrive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs\n\nVoIP product uses hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information\n\nVoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information\n\nBackup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system\n\nWeakness Ordinalities\n\nOrdinalityDescription\n\nPrimary\n\n(where the weakness exists independent of other weaknesses)\n\nDetection Methods\n\nBlack Box\n\nCredential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.\n\nEffectiveness: Moderate\n\nAutomated Static Analysis\n\nAutomated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.\n\nManual Static Analysis\n\nThis weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the product, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.\n\nNote: These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\n\nManual Dynamic Analysis\n\nFor hard-coded credentials in incoming authentication: use monitoring tools that examine the product's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the product was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.\n\nAttach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.\n\nAutomated Static Analysis - Binary or Bytecode\n\nAccording to SOAR, the following detection techniques may be useful:\n\nCost effective for partial coverage:\n\nBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\nBinary Weakness Analysis - including disassembler + source code weakness analysis\n\nEffectiveness: SOAR Partial\n\nManual Static Analysis - Binary or Bytecode\n\nAccording to SOAR, the following detection techniques may be useful:\n\nHighly cost effective:\n\nBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nEffectiveness: High\n\nDynamic Analysis with Manual Results Interpretation\n\nAccording to SOAR, the following detection techniques may be useful:\n\nCost effective for partial coverage:\n\nNetwork Sniffer\n\nForced Path Execution\n\nEffectiveness: SOAR Partial\n\nManual Static Analysis - Source Code\n\nAccording to SOAR, the following detection techniques may be useful:\n\nHighly cost effective:\n\nFocused Manual Spotcheck - Focused manual analysis of source\n\nManual Source Code Review (not inspections)\n\nEffectiveness: High\n\nAutomated Static Analysis - Source Code\n\nAccording to SOAR, the following detection techniques may be useful:\n\nHighly cost effective:\n\nSource code Weakness Analyzer\n\nContext-configured Source Code Weakness Analyzer\n\nEffectiveness: High\n\nAutomated Static Analysis\n\nAccording to SOAR, the following detection techniques may be useful:\n\nCost effective for partial coverage:\n\nConfiguration Checker\n\nEffectiveness: SOAR Partial\n\nArchitecture or Design Review\n\nAccording to SOAR, the following detection techniques may be useful:\n\nHighly cost effective:\n\nInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\nFormal Methods / Correct-By-Construction\n\nEffectiveness: High\n\nThis MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.\n\nNatureTypeIDNameMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.2547PK - Security FeaturesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.724OWASP Top Ten 2004 Category A3 - Broken Authentication and Session ManagementMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.7532009 Top 25 - Porous DefensesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.8032010 Top 25 - Porous DefensesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.812OWASP Top Ten 2010 Category A3 - Broken Authentication and Session ManagementMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.861The CERT Oracle Secure Coding Standard for Java (2011) Chapter 18 - Miscellaneous (MSC)MemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.8662011 Top 25 - Porous DefensesMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).884CWE Cross-sectionMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1131CISQ Quality Measures (2016) - SecurityMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1152SEI CERT Oracle Secure Coding Standard for Java - Guidelines 49. Miscellaneous (MSC)MemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1200Weaknesses in the 2019 CWE Top 25 Most Dangerous Software ErrorsMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1308CISQ Quality Measures - SecurityMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1337Weaknesses in the 2021 CWE Top 25 Most Dangerous Software WeaknessesMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1340CISQ Data Protection MeasuresMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1350Weaknesses in the 2020 CWE Top 25 Most Dangerous Software WeaknessesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1353OWASP Top Ten 2021 Category A07:2021 - Identification and Authentication FailuresMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1387Weaknesses in the 2022 CWE Top 25 Most Dangerous Software WeaknessesMemberOfCategory - a CWE entry that contains a set of other entries that share a common characteristic.1396Comprehensive Categorization: Access ControlMemberOfView - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).1425Weaknesses in the 2023 CWE Top 25 Most Dangerous Software Weaknesses\n\nVulnerability Mapping Notes\n\nUsage: ALLOWED\n\n(this CWE ID could be used to map to real-world vulnerabilities)\n\nReason: Acceptable-Use\n\nRationale:\n\nThis CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n\nComments:\n\nCarefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n\nMaintenance\n\nThe Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\nTaxonomy Mappings\n\nMapped Taxonomy NameNode IDFitMapped Node Name The CERT Oracle Secure Coding Standard for Java (2011)MSC03-JNever hard code sensitive information OMG ASCSMASCSM-CWE-798 ISA/IEC 62443Part 3-3Req SR 1.5 ISA/IEC 62443Part 4-2Req CR 1.5\n\nRelated Attack Patterns\n\nCAPEC-IDAttack Pattern Name CAPEC-191Read Sensitive Constants Within an Executable CAPEC-70Try Common or Default Usernames and Passwords\n\n[REF-7] Michael Howard and David LeBlanc. \"Writing Secure Code\". Chapter 8, \"Key Management Issues\" Page 272. 2nd Edition. Microsoft Press. 2002-12-04. <https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223>.\n\n[REF-729] Johannes Ullrich. \"Top 25 Series - Rank 11 - Hardcoded Credentials\". SANS Software Security Institute. 2010-03-10. <https://www.sans.org/blog/top-25-series-rank-11-hardcoded-credentials/>. URL validated: 2023-04-07.\n\n[REF-172] Chris Wysopal. \"Mobile App Top 10 List\". 2010-12-13. <https://www.veracode.com/blog/2010/12/mobile-app-top-10-list>. URL validated: 2023-04-07.\n\n[REF-962] Object Management Group (OMG). \"Automated Source Code Security Measure (ASCSM)\". ASCSM-CWE-798. 2016-01. <http://www.omg.org/spec/ASCSM/1.0/>.\n\n[REF-1283] Forescout Vedere Labs. \"OT:ICEFALL: The legacy of \"insecure by design\" and its implications for certifications and risk management\". 2022-06-20. <https://www.forescout.com/resources/ot-icefall-report/>.\n\n[REF-1304] ICS-CERT. \"ICS Alert (ICS-ALERT-13-164-01): Medical Devices Hard-Coded Passwords\". 2013-06-13. <https://www.cisa.gov/news-events/ics-alerts/ics-alert-13-164-01>. URL validated: 2023-04-07.\n\nContent History\n\nSubmissionsSubmission DateSubmitterOrganization2010-01-15\n\n(CWE 1.8, 2010-02-16)CWE Content TeamMITREMore abstract entry for hard-coded password and hard-coded cryptographic key. ContributionsContribution DateContributorOrganization2023-01-24\n\n(CWE 4.10, 2023-01-31)\"Mapping CWE to 62443\" Sub-Working GroupCWE-CAPEC ICS/OT SIG Suggested mappings to ISA/IEC 62443.2024-02-29\n\n(CWE 4.15, 2024-07-16)Abhi BalakrishnanProvided diagram to improve CWE usability ModificationsModification DateModifierOrganization2010-04-05CWE Content TeamMITREupdated Related_Attack_Patterns2010-06-21CWE Content TeamMITREupdated Common_Consequences, References2010-09-27CWE Content TeamMITREupdated Potential_Mitigations2010-12-13CWE Content TeamMITREupdated Description2011-06-01CWE Content TeamMITREupdated Common_Consequences, Relationships, Taxonomy_Mappings2011-06-27CWE Content TeamMITREupdated Observed_Examples, Relationships2011-09-13CWE Content TeamMITREupdated Potential_Mitigations, Relationships2012-05-11CWE Content TeamMITREupdated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings2012-10-30CWE Content TeamMITREupdated Demonstrative_Examples, Potential_Mitigations2013-02-21CWE Content TeamMITREupdated Applicable_Platforms, References2014-07-30CWE Content TeamMITREupdated Demonstrative_Examples, Detection_Factors2015-12-07CWE Content TeamMITREupdated Relationships2017-01-19CWE Content TeamMITREupdated Related_Attack_Patterns2017-11-08CWE Content TeamMITREupdated Causal_Nature, Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships2018-03-27CWE Content TeamMITREupdated References2019-01-03CWE Content TeamMITREupdated References, Relationships, Taxonomy_Mappings2019-06-20CWE Content TeamMITREupdated Related_Attack_Patterns, Relationships2019-09-19CWE Content TeamMITREupdated Relationships2020-02-24CWE Content TeamMITREupdated Applicable_Platforms, Relationships2020-08-20CWE Content TeamMITREupdated Relationships2020-12-10CWE Content TeamMITREupdated Relationships2021-03-15CWE Content TeamMITREupdated Demonstrative_Examples2021-07-20CWE Content TeamMITREupdated Relationships2021-10-28CWE Content TeamMITREupdated Relationships2022-06-28CWE Content TeamMITREupdated Relationships2022-10-13CWE Content TeamMITREupdated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships2023-01-31CWE Content TeamMITREupdated Description, Detection_Factors, Maintenance_Notes, Potential_Mitigations, Taxonomy_Mappings2023-04-27CWE Content TeamMITREupdated References, Relationships2023-06-29CWE Content TeamMITREupdated Mapping_Notes, Relationships2024-02-29\n\n(CWE 4.14, 2024-02-29)CWE Content TeamMITREupdated Observed_Examples2024-07-16\n\n(CWE 4.15, 2024-07-16)CWE Content TeamMITREupdated Common_Consequences, Description, Diagram\n\nMore information is available — Please edit the custom filter or select a different filter."
    }
}