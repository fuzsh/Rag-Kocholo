{
    "id": "dbpedia_4292_3",
    "rank": 49,
    "data": {
        "url": "https://help.figshare.com/article/how-to-use-the-figshare-api",
        "read_more_link": "",
        "language": "en",
        "title": "How to use the Figshare API",
        "top_image": "https://cdn.prod.website-files.com/5ec3b476108711763857fe45/668339c07d5c1589254dd7c2_AD_4nXcsR-ojecq11chS7LBpVGnUNnfgVxCUcJzzl0OKcNjaA-TAtThYu5X7P0umLrKVPSHOrZAkfOBepIB1uJl_1esR8rL9BTF-4yT61hyTEXBBCG1s0RN0buBtD4ICasXO8SLVrZIRPHRtN2zG47obw4-ADKj0.png",
        "meta_img": "",
        "images": [
            "https://cdn.prod.website-files.com/5ec3b476108711113b57fe40/5ec3b476108711dc9d57fe95_figshare-help-logo-2x.png",
            "https://cdn.prod.website-files.com/5ec3b476108711763857fe45/668339c07d5c1589254dd7c2_AD_4nXcsR-ojecq11chS7LBpVGnUNnfgVxCUcJzzl0OKcNjaA-TAtThYu5X7P0umLrKVPSHOrZAkfOBepIB1uJl_1esR8rL9BTF-4yT61hyTEXBBCG1s0RN0buBtD4ICasXO8SLVrZIRPHRtN2zG47obw4-ADKj0.png",
            "https://cdn.prod.website-files.com/5ec3b476108711763857fe45/668339c09275379877be4f38_AD_4nXdZQYVU9VYzibkpDkxN2bd8SSPJvU6Px27ZDZn6xH0zNLkXT5h3OhdA9D7Y0EQQb6X0KVa_Om9XmKr2oNgVm7V_dR_MOzZFRRBAC5AO6Z4kcBJkiN7_w4heuNVTomo9yIcoF86BkiaAVzHJMndGGdlS-2Q.png",
            "https://cdn.prod.website-files.com/5ec3b476108711763857fe45/668339c042caf5e1d5ea7095_AD_4nXfkhRGq4X8CEO11mMMQH3OlfxIAQdrGmXdVrGlfVyLvQ8zv_6BUyJ9VDhGjab6sMtM4SsaN9ZzIUL48KUQMQKqvs3n6hoY0GKeR5wL-rHEqUdRUfNg_UrCvUNMDALoWeDdfm97ZzOSfpLJQ9vXYrc5itX0W.png",
            "https://cdn.prod.website-files.com/5ec3b476108711763857fe45/668339c07621926697d52b18_AD_4nXdEABUwNhvc0LmfCCFw-xslizWkCWAhb7vwHjcEzU-zmKZ9xMZjQq5hMwnrruTzNiB_2793YHcJ6R_e_Sr_WtarsEv7e35xu_xYnGL4yw7v9AAcA8Ha40CU24ThCoAv2_kr_Zdip3be9C07aWymZClWmYrb.png",
            "https://cdn.prod.website-files.com/5ec3b476108711763857fe45/668339bf65e583c152f442cf_AD_4nXdvWRNXz_6dn2OaPl_y27r5L84XVcnrUgEmzg_uGiT48ADZw5eC8AiI-MvUY8ZP_GHV55E84q0dl7gHJy9DDTPE6cbvKwRs02iYyF0kv41Idtoo1sMRGT0xWm4S8wGW9WKgxsDBmo2upy243M6ayXA8G7U6.png"
        ],
        "movies": [
            "https://widgets.figshare.com/articles/6396776/embed?show_title=1"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "https://cdn.prod.website-files.com/5ec3b476108711113b57fe40/5ec3b476108711c4a457fe92_spiral-favicon-32.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "This guide is written for those who may be relatively new to APIs and even new to coding. Rather than a comprehensive guide to using the Figshare API, we hope this gives you a feel for how it works and what it is capable of. This is a first step in going beyond the already powerful repository management and reporting tools available in the Figshare user interface.\n\nGeneral Figshare API resources:\n\nAPI Documentation - Information and formatting guidance for on API endpoints\n\nThere are many other GitHub repos for Figshare related workflows or integrations\n\nâ\n\nOn this page:\n\nThe API documentation user interface\n\nThere are three panes on the documentation site:\n\nLeft side: Table of Contents with links to the endpoints and documentation sections\n\nMiddle: Endpoint details including the endpoint syntax, a short description, error information, and some endpoints can be called directly in this pane\n\nRight side: Input and Output examples\n\nIf the endpoint accepts data you will see a âBody Sampleâ and a âBody Schemaâ\n\nIf the endpoint provides data you will see a âResponse Sampleâ and a âResponse Schemaâ\n\nâ\n\nInteracting with the API documentation user interface\n\nHere are several exercises to become familiar with the API endpoints and the formatting required to use them\n\nâ\n\nRetrieve the full metadata for an item\n\nFor this example, we will use a presentation titled âUsing APIs to customise repositories and engage audiencesâ. You can see the file and metadata by visiting this DOI: https://doi.org/10.6084/m9.figshare.5616445.v2. Notice the DOI takes you to this URL: https://figshare.com/articles/presentation/Using_APIs_to_customise_repositories_and_engage_audiences/5616445\n\nWhile you can download the citation metadata directly from the user interface, to download all of the metadata you need to use the API. Visit this URL: https://docs.figshare.com/#article_details. In the article_id field enter the number that is at the very end of the URL above: 5616445. Then click the red âTRYâ button. A pop up should appear with all the metadata.\n\nYou can view this same output in its own browser tab by visiting the API endpoint with the item id appended to it: https://api.figshare.com/v2/articles/5616445\n\nâ\n\nâ\n\nâ\n\nPerform a metadata search\n\nFigshare search will search all metadata fields by default. You can limit to date ranges and order the results in several ways. You can also search within specific metadata fields. In this example, we will search for records that contain the term âfrogâ in the title and will return 5 results in descending order by published date. Enter the following JSON into the parameters âsearchâ box at this endpoint: https://docs.figshare.com/#articles_search\n\nâ\n\nâ\n\nJSON formatted search:\n\n{\n\nÂ Â \"order\": \"published_date\",\n\nÂ Â \"search_for\": \":title: frog\",\n\nÂ Â \"page\": 1,\n\nÂ Â \"page_size\": 5,\n\nÂ Â \"order_direction\": \"desc\"\n\n}\n\nâ\n\nAuthenticate and retrieve metadata from your account\n\nTo retrieve or send information that is not public, you will need to create a token from your account and paste that into the API user interface. Once youâve done that, visit this endpoint: https://docs.figshare.com/#private_articles_list. Paste the token into the upper left field in the API user interface and hit the âTRYâ button. You should see the basic metadata for the private and public items in your account.\n\nâ\n\nâ\n\nâ\n\nBasic coding/scripting examples\n\nRetrieve data\n\nAny public metadata or files can be retrieved through the API without authentication. In the example below, the full metadata record for an item is retrieved. The ITEM_ID is the number at the end of any itemâs URL.\n\nPython:\n\nâ\n\nPartial Output:\n\nâ\n\nAuthenticate\n\nAuthentication is required for any endpoint that retrieves or accepts private or institutional information. A token can be created for any user account and provides access in line with the accountâs privileges. In the example below, a user retrieves 10 basic metadata records from their personal account. These records may include both public and private (draft) records. Note that the results are limited to 10 by using the page and page_size parameters.\n\nPython:\n\nâ\n\nOutput:\n\nâ\n\nSend data\n\nSending information through a POST or PUT endpoint is accomplished by adding a âdataâ variable to the request. The contents of the data variable needs to be formatted as indicated by the documentation for the API endpoint. In the example below, a new record is added to the account that created the token.\n\nPython:\n\nâ\n\nRetrieve information for multiple items\n\nThis section describes how to use multiple API calls to retrieve metadata or files from multiple items. The basic idea is to:\n\nâ\n\nCreate a list of item ids\n\nRetrieve item ids in your account\n\nRetrieve item ids through a search query\n\nLoop through the list and gather the information needed for each item id\n\nFull metadata\n\nViews and Downloads\n\nDownload file(s)\n\nâ\n\nRetrieve item ids in your account\n\nPython:\n\nâ\n\nâ\n\nRetrieve item ids through a search query\n\nThis example searches for records with that use the category âDigital Humanitiesâ or âEnvironmental Humanitiesâ\n\nâ\n\nRetrieve item ids in a group\n\nYou may want to gather all the items in a particular group. The script below does just that. Notes:Â\n\nGroup structures only apply to institutions and these structures may be complex. This script is probably most useful for institution administrators.Â\n\nIt only returns items published in the specific group. It does not return results for subgroups.\n\nRemember that system ids, e.g. group ids and account ids, are different between production and stage.\n\nâ\n\nPython:\n\nâ\n\nNow gather information for item ids\n\nFull metadata\n\nUse one of the methods above to create a list of item ids called item_ids. This code includes an option to add a token in the header in case some of the item ids are for unpublished records.\n\nPython:\n\nâ\n\nViews and Downloads\n\nThe options for views, downloads, and shares are described here: https://docs.figshare.com/#stats. Note that the endpoints for Breakdown and Timeline for institution items require a special administrator authentication that you can request for your institution through https://support.figshare.com.\n\nIn the example below, the total views and downloads for each item id are collected. Note that this script uses the pandas package to create a table of values.\n\nPython:\n\nâ\n\nOutput:\n\nâ\n\nDownload file(s)\n\nThere are several ways to download files through the API. Each file that is part of a record has its own download URL. You can find this URL in the full metadata retrieved through the API or you can enter the item id at this endpoint: https://docs.figshare.com/#article_files. For item https://doi.org/10.6084/m9.figshare.5616409.v3, the download URL for the file is https://figshare.com/ndownloader/files/9778696. Visiting that URL will automatically start the download (File is 219KB).\n\nPython:\n\nâ\n\nOutput: The download script will save files to folders named for the item id the files belong to:\n\nMore Complex Scripting Examples\n\nCreate an author report\n\nThe API can provide information for individual authors. As an example, we created a Jupyter Notebook in Google Colab.\n\nNote: If you want to do this for an account within an institutional repository, you need to adjust the stats urls in the script and will need your institutionâs stats credentials. See the notes in the script and refer to the Statistics Endpoints Examples section at the end of this page.\n\nAnyone can run the Google Colab script, though youâll need to sign into a Google account to do so. Then you must only add an author name or an ORCID. Hereâs a good ORCID to try this with: 0000-0001-7023-9832\n\nThe script produces a table with metadata for the authorâs outputs, views and downloads, and produces a plotly map of views for all the records (stats will only be for records stored in figshare.com accounts).\n\nHere is the order of operations:\n\nImport libraries and set base API URL\n\nPerform search for name or ORCID using this endpoint: https://docs.figshare.com/#articles_search Then create a dataframe\n\nGather views and downloads for each record from this endpoint: https://docs.figshare.com/#stats_totals Then create a dataframe\n\nMerge the metadata and stats dataframes\n\nOptionally collect all the same information for Collections using the collection endpoints\n\nFormat the date information (extract dates from the JSON and add them to the dataframe\n\nGather views by country for each item using this endpoint: https://docs.figshare.com/#stats_breakdown\n\nMap the views\n\nSave the dataframe and you can copy the map images from the browser\n\nâ\n\nCreate records, upload files, and publish\n\nA common use of the API is to create metadata records from existing metadata. For example you may have metadata harvested from somewhere else that you want to include in your repository as metadata only or linked records. Or you may have metadata and files that you want to add to an account or repository. This section will assume you have already formatted the metadata for upload.\n\nCreate a metadata only or linked file record\n\nTo create records using the API, you need to use three endpoints: 1) create a private record, optionally add a link to a file, and then OPTIONALLY, publish the record.\n\nâ\n\nThis Python example will create a linked file record for a paper- effectively it is a metadata only record that points users to the publisherâs DOI.\n\nPython:\n\nUpload files\n\nThe process to upload files may seem complex but this is necessary to handle extremely large files. So whether your file is a few kilobytes or a terabyte, this process will work.\n\nThe overall process to upload files looks like this: 1) create a private record, upload file(s), and then publish the record.\n\nAs described in the upload documentation, there are four steps to uploading: 1) Initiate the upload 2) Receive the number of file parts, 3) Upload the file parts, and 4) Complete the upload. The documentation linked above has a sample script in several languages. A Jupyter Notebook and Python example is downloadable from this Google Colab file and is reproduced below:\n\nPython:\n\nBatch format and upload metadata from a source\n\nThis offers an example of creating linked file records based on harvested metadata. The resulting items clearly indicate the URL or DOI the user can click to find the original record. The example below is for paper metadata, but it can easily work with data metadata too. Macquarie University created a script to create catalog records in their repository from Dryad records.\n\nâ\n\nHere are the steps to format metadata harvested from the Dimensions database and create linked file records:\n\nOpen a json file (in the code below, an example file from Dimensions is manually created)\n\nPull out the relevant fields and give them the proper keys (account for partial dates, author formatting, and missing abstracts)\n\nConvert the json record to a string with double quotes\n\nUpload the record\n\nUpdate the author list of the new record (removes the admin account as an author)\n\nAdd the existing DOI as a linked file\n\nThis can upload to a specific group with specific custom metadata. You can change the api key to upload to different accounts or use impersonation.\n\nâ\n\nBelow is an example Python script. Note: this uploads an existing DOI and so will only work if you have that enabled in your repository. Also, this does not add Categories or Keywords which are required for publishing. You can paste this all into one cell in a Colab notebook, add your token, and run it. Final note, it can take a minute or two for the link to show up in the file link area on the metadata entry page. Try previewing the item to see the link.\n\nPython:\n\nDelete account items\n\nYou may have many draft items in your account, or if you are an admin, perhaps youâve been testing with the Batch Management Tool, and you want to remove items.\n\nImportant Note: You cannot delete public items. For figshare.com users, you must contact Figshare to unpublish an item. For institution admins, this more complex script provides a way to get a list of item ids to unpublish before deleting.\n\nThe following script uses a token from your account to get a list of both public and private/draft items in your account. It then tries to delete everything but Figshare will ignore requests to delete public items. Youâll see the list of those public items after the script finishes running.\n\nâ\n\nYou can paste all the code into one cell in a notebook, add your token, and run it. Beware: it will delete any draft items and you cannot undo that.\n\nPython:\n\nRetrieve metadata for items in review\n\nThere are several API endpoints that provide review/curation information. Reviewers can sort and inspect items in review through the GUI. But maybe youâd like to see a spreadsheet of the metadata for items that have a âpendingâ status for review. This Google Colab notebook does just that. Be sure to use an admin token (not just a reviewer account token).\n\nâ\n\nHere are the steps in that notebook:\n\nRetrieve a list of items with pending status in review\n\nVisit each item and retrieve all the metadata. Also add the owner name and email.\n\nCreate a spreadsheet and do some formatting: dates, authors, add item owner, separate out custom fields.\n\nSave the spreadsheet\n\nWhat if I want to publish those items?\n\nYou may want to bulk publish a group of items but avoid having to review them all. This isnât possible through the API since that would defeat the purpose of review. However, you can use the Admin Batch Management tool to bulk publish items with review (making the assumption you reviewed the metadata in the CSV!). To do this you need to create a CSV with the item ids to publish. You can do this for pending review items that are in the spreadsheet from above. Here are the steps:\n\nSave a copy of the spreadsheet downloaded above as CSV (important: if using Excel, save as CSV rather than CSV UTF-8. The latter sometimes adds additional characters in the file)\n\nDelete all the items (rows) that you donât want to publish\n\nDelete all columns except âidâ\n\nRename the âidâ column to âarticle_idâ and save the file\n\nYou should now have a CSV with only one column of numbers titled âarticle_idâ\n\nLog in to an administrator Figshare account that has review privileges.\n\nNavigate to the Batch Management tool and select your CSV as the source file. Select the option to automatically review items.\n\nImpersonating user accounts\n\nImpersonating accounts is described in this section of the documentation. Adding âimpersonate=account_idâ to either the request URL for GET or in the body of a POST or PUT request will impersonate the account indicated. Here is a brief example that changes the author on an item owned by a user account and then publishes the item:\n\nPython:\n\nCreate a repository dashboard\n\nThis is an example of how one might use the API to create a database for reporting purposes. The script downloads metadata from your repository along with views by item, views by country, and views by month. Eight tables are saved as worksheets within a Google Sheet. This sheet can be regularly updated so that any dashboards built off it will show current information.\n\nNote: You need to have two sets of credentials:\n\nA repository administrator token\n\nThe credentials for the stats API (ask Support if you do not have them yet)\n\nThe Jupyter Notebook is available and you can run it in Colab. Here are the high level steps in the process:\n\nImport libraries\n\nSet variables and metadata API credentials\n\nRetrieve all item ids and pull out only public item ids\n\nRetrieve full metadata and total views for each item id\n\nCreate dataframes for each type of information: items, authors, funding, categories, and tags. Each dataframe includes the item id.\n\nSet variables and credentials for the stats API\n\nUse the stats API to retrieve views by country and over time.\n\nEither create a Google sheet or update an existing one\n\nVisualize the data\n\nYou should be able to use the resulting spreadsheet as a data source for you favorite visualization software. We made a very basic proof of concept Looker Studio dashboard based on data from a live repository.\n\nSearch for records related to your institution\n\nYou can search for your institutionâs name and do a high level analysis of the records out there. As an example, we created a Google Colab Notebook.\n\nAnyone can run this script. One must only add search criteria and run all the cells in sequence. You can also save all the data as a Google sheet in your Google Drive.\n\nHere is the order of operations:\n\nâ\n\nImport libraries and set base API endpoint and institution name\n\nSearch using this endpoint: https://docs.figshare.com/#articles_search and create a dataframe\n\nCollect the full metadata for each item and create separate lists for item metadata, authors, funding, categories, tags, and files.\n\nDo some formatting and make dataframes from all the lists\n\nStart analysis by looking at the main dataframe columns\n\nLook at how many records are from institutions (using the existence of group_id)\n\nItem types with views\n\nLook at licenses\n\nSee a list of linked funders (linked to Dimensions records)\n\nSee grant titles\n\nSee the top 20 tags\n\nSee the top 20 categories\n\nSee top 10 viewed items\n\nExport all the data to a Google sheet that you can then use for visualizations or other analysis\n\nStatistics Endpoints Examples\n\nThe stats endpoints in Figshare provide statistics for items, authors, collections, groups, and projects. Where appropriate, the results can be filtered by category or item_type. Generally, anything from within the institution scope requires authentication. The following information is available:\n\nâ\n\nTop views, downloads, or shares in an optionally sepcified time period. In addition to category and item_type, can also be filtered by referral (e.g. list of top referring sites by views)\n\nTotal views, downloads, or shares in an optionally sepcified time period\n\nTimeline: Views, downloads, or shares over time (by day, month, year or total) and optionally filtered by a start_date and end_date.\n\nGeolocation: Views, downloads, or shares by country and city and optionally filtered by a start_date and end_date.\n\nCount items: Retrieve the number of items from one or more public groups.\n\nIt is important to note that stats from the institution scope require a separate password instead of your administrator token when requesting results from within the institution scope (figshare.com items need no authentication). This is due to a legacy system. Request these credentials through a support request (support@figshare.com).\n\nRetrieve total views for one item\n\nPython:\n\nRetrieve views from an institutionâs group\n\nThis gathers data by month between January 1, 2020 and May 12, 2022. This requires the username and password you received from Support and the credentials must be encoded as base64. In this example, the credentials are uploaded to the script from a text file:\n\nâ\n\nExamples from Institutions\n\nâ\n\nMonash University\n\nMonash University used the API to migrate content, including their theses, into their Figshare repository. Find out more about their migration in the case study below."
    }
}