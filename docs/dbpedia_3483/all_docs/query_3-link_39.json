{
    "id": "dbpedia_3483_3",
    "rank": 39,
    "data": {
        "url": "https://storybook.js.org/docs/essentials/controls",
        "read_more_link": "",
        "language": "en",
        "title": "Storybook",
        "top_image": "https://storybook.js.org/opengraph-image.jpg?841db310ba5a3a1e",
        "meta_img": "https://storybook.js.org/opengraph-image.jpg?841db310ba5a3a1e",
        "images": [
            "https://storybook.js.org/_next/image?url=%2Fbubbles.png&w=1920&q=75 1x, /_next/image?url=%2Fbubbles.png&w=3840&q=75 2x",
            "https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-controls-args-variant-string.png&w=3840&q=75 1x",
            "https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-controls-args-variant-optimized.png&w=3840&q=75 1x",
            "https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-controls-expanded.png&w=3840&q=75 1x"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
        "meta_lang": "en",
        "meta_favicon": "/icon.svg",
        "meta_site_name": "Storybook",
        "canonical_link": "https://storybook.js.org/docs/essentials/controls",
        "text": "Watch a video tutorial\n\nStorybook Controls gives you a graphical UI to interact with a component's arguments dynamically without needing to code. It creates an addon panel next to your component examples (\"stories\"), so you can edit them live.\n\nControls do not require any modification to your components. Stories for controls are:\n\nConvenient. Auto-generate controls based on React/Vue/Angular/etc. components.\n\nPortable. Reuse your interactive stories in documentation, tests, and even in designs.\n\nRich. Customize the controls and interactive data to suit your exact needs.\n\nTo use the Controls addon, you need to write your stories using args. Storybook will automatically generate UI controls based on your args and what it can infer about your component. Still, you can configure the controls further using argTypes, see below.\n\nChoosing the control type\n\nBy default, Storybook will choose a control for each arg based on its initial value. This will work well with specific arg types (e.g., boolean or string). To enable them, add the component annotation to the default export of your story file, and it will be used to infer the controls and auto-generate the matching argTypes for your component using react-docgen, a documentation generator for React components that also includes first-class support for TypeScript.\n\nFor instance, suppose you have a variant arg on your story that should be primary or secondary:\n\nBy default, Storybook will render a free text input for the variant arg:\n\nIt works as long as you type a valid string into the auto-generated text control. Still, it's not the best UI for our scenario, given that the component only accepts primary or secondary as variants. Let’s replace it with Storybook’s radio component.\n\nWe can specify which controls get used by declaring a custom argType for the variant property. ArgTypes encode basic metadata for args, such as name, description, and defaultValue for an arg. These get automatically filled in by Storybook Docs.\n\nArgTypes can also contain arbitrary annotations, which the user can override. Since variant is a property of the component, let's put that annotation on the default export.\n\nThis replaces the input with a radio group for a more intuitive experience.\n\nCustom control type matchers\n\nControls can automatically be inferred from arg's name with regex, but currently only for the color picker and date picker controls. If you've used the Storybook CLI to setup your project, it should have automatically created the following defaults in .storybook/preview.js:\n\nControlDefault regexDescriptioncolor/(background|color)$/iWill display a color picker UI for the args that match itdate/Date$/Will display a date picker UI for the args that match it\n\nIf you haven't used the CLI to set the configuration, or if you want to define your patterns, use the matchers property in the controls parameter:\n\nFully custom args\n\nUntil now, we only used auto-generated controls based on the component for which we're writing stories. If we are writing complex stories, we may want to add controls for args that aren’t part of the component. For example, here's how you could use a footer arg to populate a child component:\n\nBy default, Storybook will add controls for all args that:\n\nIt infers from the component definition if your framework supports it.\n\nAppear in the list of args for your story.\n\nUsing argTypes, you can change the display and behavior of each control.\n\nDealing with complex values\n\nWhen dealing with non-primitive values, you'll notice that you'll run into some limitations. The most obvious issue is that not every value can be represented as part of the args param in the URL, losing the ability to share and deep link to such a state. Beyond that, complex values such as JSX cannot be synchronized between the manager (e.g., Controls addon) and the preview (your story).\n\nOne way to deal with this is to use primitive values (e.g., strings) as arg values and add a custom render function to convert them to their complex counterpart before rendering. It isn't the nicest way to do it (see below), but certainly the most flexible.\n\nUnless you need the flexibility of a function, an easier way to map primitives to complex values before rendering is to define a mapping; additionally, you can specify control.labels to configure custom labels for your checkbox, radio, or select input.\n\nNote that both mapping and control.labels don't have to be exhaustive. If the currently selected option is not listed, it's used verbatim.\n\nCreating and editing stories from controls\n\nThe Controls addon allows you to create or edit stories, directly from the Controls panel.\n\nCreate a new story\n\nOpen the Controls panel for a story and adjust the value of a control. Then save those changes as a new story.\n\nIf you're working on a component that does not yet have any stories, you can click the ➕ button in the sidebar to search for your component and have a basic story created for you.\n\nEdit a story\n\nYou can also update a control's value, then save the changes to the story. The story file's code will be updated for you.\n\nConfiguration\n\nThe Controls addon can be configured in two ways:\n\nIndividual controls can be configured via control annotations.\n\nThe addon's appearance can be configured via parameters.\n\nAnnotation\n\nAs shown above, you can configure individual controls with the “control\" annotation in the argTypes field of either a component or story. Below is a condensed example and table featuring all available controls.\n\nData TypeControlDescriptionbooleanbooleanProvides a toggle for switching between possible states.\n\nargTypes: { active: { control: 'boolean' }}numbernumberProvides a numeric input to include the range of all possible values.\n\nargTypes: { even: { control: { type: 'number', min:1, max:30, step: 2 } }}rangeProvides a range slider component to include all possible values.\n\nargTypes: { odd: { control: { type: 'range', min: 1, max: 30, step: 3 } }}objectobjectProvides a JSON-based editor component to handle the object's values.\n\nAlso allows edition in raw mode.\n\nargTypes: { user: { control: 'object' }}arrayobjectProvides a JSON-based editor component to handle the array's values.\n\nAlso allows edition in raw mode.\n\nargTypes: { odd: { control: 'object' }}fileProvides a file input component that returns an array of URLs.\n\nCan be further customized to accept specific file types.\n\nargTypes: { avatar: { control: { type: 'file', accept: '.png' } }}enumradioProvides a set of radio buttons based on the available options.\n\nargTypes: { contact: { control: 'radio', options: ['email', 'phone', 'mail'] }}inline-radioProvides a set of inlined radio buttons based on the available options.\n\nargTypes: { contact: { control: 'inline-radio', options: ['email', 'phone', 'mail'] }}checkProvides a set of checkbox components for selecting multiple options.\n\nargTypes: { contact: { control: 'check', options: ['email', 'phone', 'mail'] }}inline-checkProvides a set of inlined checkbox components for selecting multiple options.\n\nargTypes: { contact: { control: 'inline-check', options: ['email', 'phone', 'mail'] }}selectProvides a drop-down list component to handle single value selection. argTypes: { age: { control: 'select', options: [20, 30, 40, 50] }}multi-selectProvides a drop-down list that allows multiple selected values. argTypes: { countries: { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }}stringtextProvides a freeform text input.\n\nargTypes: { label: { control: 'text' }}colorProvides a color picker component to handle color values.\n\nCan be additionally configured to include a set of color presets.\n\nargTypes: { color: { control: { type: 'color', presetColors: ['red', 'green']} }}dateProvides a datepicker component to handle date selection. argTypes: { startDate: { control: 'date' }}\n\nParameters\n\nControls supports the following configuration parameters, either globally or on a per-story basis:\n\nShow full documentation for each property\n\nSince Controls is built on the same engine as Storybook Docs, it can also show property documentation alongside your controls using the expanded parameter (defaults to false). This means you embed a complete Controls doc block in the controls panel. The description and default value rendering can be customized like the doc block.\n\nTo enable expanded mode globally, add the following to .storybook/preview.js:\n\nHere's what the resulting UI looks like:\n\nSpecify initial preset color swatches\n\nFor color controls, you can specify an array of presetColors, either on the control in argTypes, or as a parameter under the controls namespace:\n\nColor presets can be defined as an object with color and title or a simple CSS color string. These will then be available as swatches in the color picker. When you hover over the color swatch, you'll be able to see its title. It will default to the nearest CSS color name if none is specified.\n\nFiltering controls\n\nIn specific cases, you may be required to display only a limited number of controls in the controls panel or all except a particular set.\n\nTo make this possible, you can use optional include and exclude configuration fields in the controls parameter, which you can define as an array of strings or a regular expression.\n\nConsider the following story snippets:\n\nSorting controls\n\nBy default, controls are unsorted and use whatever order the args data is processed in (none). Additionally, you can sort them alphabetically by the arg's name (alpha) or with the required args first (requiredFirst).\n\nConsider the following snippet to force required args first:\n\nDisable controls for specific properties\n\nAside from the features already documented here, Controls can also be disabled for individual properties.\n\nSuppose you want to turn off Controls for a property called foo in a component's story. The following example illustrates how:\n\nResulting in the following change in Storybook UI:\n\nThe previous example also removed the prop documentation from the table. In some cases, this is fine. However, sometimes you might want to render the prop documentation without a control. The following example illustrates how:\n\nConditional controls\n\nIn some cases, it's useful to be able to conditionally exclude a control based on the value of another control. Controls supports basic versions of these use cases with the if, which can take a simple query object to determine whether to include the control.\n\nConsider a collection of \"advanced\" settings only visible when the user toggles an \"advanced\" toggle.\n\nOr consider a constraint where if the user sets one control value, it doesn't make sense for the user to be able to set another value.\n\nThe query object must contain either an arg or global target:\n\nfieldtypemeaningargstringThe ID of the arg to test.globalstringThe ID of the global to test.\n\nIt may also contain at most one of the following operators:\n\noperatortypemeaningtruthybooleanIs the target value truthy?existsbooleanIs the target value defined?eqanyIs the target value equal to the provided value?neqanyIs the target value NOT equal to the provided value?\n\nIf no operator is provided, that is equivalent to { truthy: true }.\n\nAPI\n\nParameters\n\nThis addon contributes the following parameters to Storybook, under the controls namespace:\n\ndisable\n\nType: boolean\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering addon-essentials. See the essential addon's docs for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to true at the project level, it could then be re-enabled by setting it to false at the meta (component) or story level.\n\nexclude\n\nType: string[] | RegExp\n\nSpecifies which properties to exclude from the Controls addon panel. Any properties whose names match the regex or are part of the array will be left out. See usage example, above.\n\nexpanded\n\nType: boolean\n\nShow the full documentation for each property in the Controls addon panel, including the description and default value. See usage example, above.\n\ninclude\n\nType: string[] | RegExp\n\nSpecifies which properties to include in the Controls addon panel. Any properties whose names don't match the regex or are not part of the array will be left out. See usage example, above.\n\npresetColors\n\nType: (string | { color: string; title?: string })[]\n\nSpecify preset color swatches for the color picker control. The color value may be any valid CSS color. See usage example, above.\n\nsort\n\nType: 'none' | 'alpha' | 'requiredFirst'\n\nDefault: 'none'\n\nSpecifies how the controls are sorted."
    }
}