{
    "id": "dbpedia_3483_3",
    "rank": 92,
    "data": {
        "url": "https://ghost.org/docs/content-api/",
        "read_more_link": "",
        "language": "en",
        "title": "Ghost Content API Documentation",
        "top_image": "https://ghost.org/images/meta/ghost-docs.png",
        "meta_img": "https://ghost.org/images/meta/ghost-docs.png",
        "images": [
            "https://ghost.org/images/docs/apikey_huc23d3a1fbe859434094a9db94f574d9a_265920_2920x0_resize_q100_h2_box_3.webp",
            "https://ghost.org/images/logos/indie.svg",
            "https://ghost.org/images/logos/opensource.svg",
            "https://ghost.org/images/logos/carbonneutral.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "headless cms",
            "javascript",
            "ghost api"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Ghost's RESTful Content API delivers published content to the world and can be accessed by any client to render a website. Read more on Ghost Docs.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Ghost - The Professional Publishing Platform",
        "canonical_link": "https://ghost.org/docs/content-api/",
        "text": "Ghost’s RESTful Content API delivers published content to the world and can be accessed in a read-only manner by any client to render in a website, app, or other embedded media.\n\nAccess control is managed via an API key, and even the most complex filters are made simple with our SDK. The Content API is designed to be fully cachable, meaning you can fetch data as often as you like without limitation.\n\nAPI Clients\n\nJavaScript Client Library\n\nWe’ve developed an API client for JavaScript that will allow you to quickly and easily interact with the Content API. The client is an advanced wrapper on top of our REST API - everything that can be done with the Content API can be done using the client, with no need to deal with the details of authentication or the request & response format.\n\nURL\n\nhttps://{admin_domain}/ghost/api/content/\n\nYour admin domain can be different to your site domain. Using the correct domain and protocol are critical to getting consistent behaviour, particularly when dealing with CORS in the browser. All Ghost(Pro) blogs have a *.ghost.io domain as their admin domain and require https.\n\nKey\n\n?key={key}\n\nContent API keys are provided via a query parameter in the URL. These keys are safe for use in browsers and other insecure environments, as they only ever provide access to public data. Sites in private mode should consider where they share any keys they create.\n\nObtain the Content API URL and key by creating a new Custom Integration under the Integrations screen in Ghost Admin.\n\nAccept-Version Header\n\nAccept-Version: v{major}.{minor}\n\nUse the Accept-Version header to indicate the minimum version of Ghost’s API to operate with. See API Versioning for more details.\n\nWorking Example\n\nEndpoints\n\nThe Content API provides access to Posts, Pages, Tags, Authors, Tiers, and Settings. All endpoints return JSON and are considered stable.\n\nWorking Example\n\nThe Content API supports two types of request: Browse and Read. Browse endpoints allow you to fetch lists of resources, whereas Read endpoints allow you to fetch a single resource.\n\nResources\n\nThe API will always return valid JSON in the same structure:\n\nresource_type: will always match the resource name in the URL. All resources are returned wrapped in an array, with the exception of /site/ and /settings/.\n\nmeta: contains pagination information for browse requests.\n\nPosts\n\nPosts are the primary resource in a Ghost site. Using the posts endpoint it is possible to get lists of posts filtered by various criteria.\n\nBy default, posts are returned in reverse chronological order by published date when fetching more than one.\n\nThe most common gotcha when fetching posts from the Content API is not using the include parameter to request related data such as tags and authors. By default, the response for a post will not include these:\n\nPosts allow you to include authors and tags using &include=authors,tags, which will add an authors and tags array to the response, as well as both a primary_author and primary_tag object.\n\nWorking Example\n\nReturns:\n\nPages\n\nPages are static resources that are not included in channels or collections on the Ghost front-end. The API will only return pages that were created as resources and will not contain routes created with dynamic routing.\n\nPages are structured identically to posts. The response object will look the same, only the resource key will be pages.\n\nBy default, pages are ordered by title when fetching more than one.\n\nTags are the primary taxonomy within a Ghost site.\n\nBy default, internal tags are always included, use filter=visibility:public to limit the response directly or use the tags helper to handle filtering and outputting the response.\n\nTags that are not associated with a post are not returned. You can supply include=count.posts to retrieve the number of posts associated with a tag.\n\nBy default, tags are ordered by name when fetching more than one.\n\nAuthors\n\nAuthors are a subset of users who have published posts associated with them.\n\nAuthors that are not associated with a post are not returned. You can supply include=count.posts to retrieve the number of posts associated with an author.\n\nSettings\n\nSettings contain the global settings for a site.\n\nThe settings endpoint is a special case. You will receive a single object, rather than an array. This endpoint doesn’t accept any query parameters.\n\nTiers\n\nTiers allow publishers to create multiple options for an audience to become paid subscribers. Each tier can have its own price points, benefits, and content access levels. Ghost connects tiers directly to the publication’s Stripe account.\n\nUsage\n\nThe tiers endpoint returns a list of tiers for the site, filtered by their visibility criteria.\n\nTiers are returned in order of increasing monthly price.\n\nWorking example\n\nreturns:\n\nParameters\n\nQuery parameters provide fine-grained control over responses. All endpoints accept include and fields. Browse endpoints additionally accept filter, limit, page and order.\n\nThe values provided as query parameters MUST be url encoded when used directly. The client libraries will handle this for you.\n\nInclude\n\nTells the API to return additional data related to the resource you have requested. The following includes are available:\n\nPosts & Pages: authors, tags\n\nAuthors: count.posts\n\nTags: count.posts\n\nTiers: monthly_price, yearly_price, benefits\n\nIncludes can be combined with a comma, e.g., &include=authors,tags.\n\nFor posts and pages:\n\n&include=authors will add \"authors\": [{...},] and \"primary_author\": {...}\n\n&include=tags will add \"tags\": [{...},] and \"primary_tag\": {...}\n\nFor authors and tags:\n\n&include=count.posts will add \"count\": {\"posts\": 7} to the response.\n\nFor tiers:\n\n&include=monthly_price,yearly_price,benefits will add monthly price, yearly price, and benefits data.\n\nFields\n\nLimit the fields returned in the response object. Useful for optimizing queries, but does not play well with include.\n\nE.g. for posts &fields=title,url would return:\n\nFormats\n\n(Posts and Pages only)\n\nBy default, only html is returned, however each post and page in Ghost has 2 available formats: html and plaintext.\n\n&formats=html,plaintext will additionally return the plaintext format.\n\nFilter\n\n(Browse requests only)\n\nApply fine-grained filters to target specific data.\n\n&filter=featured:true on posts returns only those marked featured.\n\n&filter=tag:getting-started on posts returns those with the tag slug that matches getting-started.\n\n&filter=visibility:public on tiers returns only those marked as publicly visible.\n\nThe possibilities are extensive! Query strings are explained in detail in the filtering section.\n\nLimit\n\n(Browse requests only)\n\nBy default, only 15 records are returned at once.\n\n&limit=5 would return only 5 records.\n\n&limit=all will return all records - use carefully!\n\nPage\n\n(Browse requests only)\n\nBy default, the first 15 records are returned.\n\n&page=2 will return the second set of 15 records.\n\nOrder\n\n(Browse requests only)\n\nDifferent resources have a different default sort order:\n\nPosts: published_at DESC (newest post first)\n\nPages: title ASC (alphabetically by title)\n\nTags: name ASC (alphabetically by name)\n\nAuthors: name ASC (alphabetically by name)\n\nTiers: monthly_price ASC (from lowest to highest monthly price)\n\nThe syntax for modifying this follows SQL order by syntax:\n\n&order=published_at%20asc would return posts with the newest post last\n\nFiltering\n\nGhost uses a query language called NQL to allow filtering API results. You can filter any field or included field using matches, greater/less than or negation, as well as combining with and/or. NQL doesn’t yet support ’like’ or partial matches.\n\nFilter strings must be URL encoded. The {{get}} helper and client library handle this for you.\n\nAt it’s most simple, filtering works the same as in GMail, GitHub or Slack - you provide a field and a value, separated by a colon.\n\nSyntax Reference\n\nFilter Expressions\n\nA filter expression is a string which provides the property, operator and value in the form property:operatorvalue:\n\nproperty - a path representing the field to filter on\n\n: - separator between property and an operator-value expression\n\noperator (optional) - how to compare values (: on its own is roughly =)\n\nvalue - the value to match against\n\nProperty\n\nMatches: [a-zA-Z_][a-zA-Z0-9_.]\n\ncan contain only alpha-numeric characters and _\n\ncannot contain whitespace\n\nmust start with a letter\n\nsupports . separated paths, E.g. authors.slug or posts.count\n\nis always lowercase, but accepts and converts uppercase\n\nValue\n\nCan be one of the following\n\nnull\n\ntrue\n\nfalse\n\na number (integer)\n\na literal\n\nAny character string which follows these rules:\n\nCannot start with - but may contain it\n\nCannot contain any of these symbols: '\"+,()><=[] unless they are escaped\n\nCannot contain whitespace\n\na string\n\n' string here ' Any character except a single or double quote surrounded by single quotes\n\nSingle or Double quote __MUST __be escaped*\n\nCan contain whitespace\n\nA string can contain a date any format that can be understood by new Date()\n\na relative date\n\nUses the pattern now-30d\n\nMust start with now\n\nCan use - or +\n\nAny integer can be used for the size of the interval\n\nSupports the following intervals: d, w, M, y, h, m, s\n\nOperators\n\n- - not\n\n> - greater than\n\n>= - greater than or equals\n\n< - less than\n\n<= - less than or equals\n\n~ - contains\n\n~^ - starts with\n\n~$ - ends with\n\n[ value, value, &mldr; ] - “in” group, can be negated with -\n\nCombinations\n\n+ - represents and\n\n, - represents or\n\n( filter expression ) - overrides operator precedence\n\nStrings vs Literals\n\nMost of the time, there’s no need to put quotes around strings when building filters in Ghost. If you filter based on slugs, slugs are always compatible with literals. However, in some cases you may need to use a string that contains one of the other characters used in the filter syntax, e.g. dates & times contain:. Use single-quotes for these.\n\nPagination\n\nAll browse endpoints are paginated, returning 15 records by default. You can use the page and limit parameters to move through the pages of records. The response object contains a meta.pagination key with information on the current location within the records:\n\nErrors\n\nThe Content API will generate errors for the following cases:\n\nStatus 400: Badly formed queries e.g. filter parameters that are not correctly encoded\n\nStatus 401: Authentication failures e.g. unrecognised keys\n\nStatus 404: Unknown resources e.g. data which is not public\n\nStatus 500: Server errors e.g. where something has gone\n\nErrors are also formatted in JSON, as an array of error objects. The HTTP status code of the response along with the errorType property indicate the type of error.\n\nThe message field is designed to provide clarity on what exactly has gone wrong.\n\nVersioning"
    }
}