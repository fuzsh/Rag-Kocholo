{
    "id": "dbpedia_4405_0",
    "rank": 69,
    "data": {
        "url": "https://www.atlassian.com/devops/frameworks/team-topologies",
        "read_more_link": "",
        "language": "en",
        "title": "Team Topologies",
        "top_image": "https://wac-cdn.atlassian.com/dam/jcr:6133792f-5ef1-4438-bf11-2536b6b0fb9a/Screen%20Shot%202020-09-24%20at%207.57.21%20AM.png",
        "meta_img": "https://wac-cdn.atlassian.com/dam/jcr:6133792f-5ef1-4438-bf11-2536b6b0fb9a/Screen%20Shot%202020-09-24%20at%207.57.21%20AM.png",
        "images": [
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/AtlassianHeaderLogo.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Confluence.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira-Service-Management.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Trello.svg",
            "https://wac-cdn-bfldr.atlassian.com/K3MHR9G8/at/k5xhw8hpqxghzb55nfktt4/logo-light_Rovo_mark_brand_RGB.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira-Product-Discovery.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Compass.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Guard.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Loom.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Bitbucket.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Compass.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Confluence.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira-Product-Discovery.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira-Service-Management.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Guard.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Confluence.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Trello.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Loom.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira-Align.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Jira.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Confluence.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/prod-icon-Loom.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/nav-software.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/nav-software-hover.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/nav-marketing.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/nav-marketing-hover.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/nav-it.svg",
            "https://wac-cdn.atlassian.com/misc-assets/adg4-nav/nav-it-hover.svg",
            "https://wac-cdn.atlassian.com/dam/jcr:2d524849-45e4-49fc-a3d6-2411e623b1f9/ian%20buchanan_use%20this%20one.png?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:4bc176e7-5211-493f-8846-ed33c94ee2d1/icons-browser-multi-dark-72x58@2x.png?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:b7118dd3-c33c-4bb6-b24a-abb72e09d8eb/icons-object-team-dark.svg?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:2475e01f-52d0-438b-a9d6-f449d4a5cf95/ian-buchanan.png?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:bd9d8b2c-ca36-444f-8595-719cb1990e64/Devops-community.png?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:297108ea-d232-4368-af51-b53af230c4fe/Simulation-workshop.png?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:25f6330a-4191-408f-a4e5-2e24bfba67b4/Maturity-model.png?cdnVersion=2145",
            "https://wac-cdn.atlassian.com/dam/jcr:9c4bf443-5045-4ff9-a48d-36ae466f3ced/logos-atlassian-mini-icon-onecolor-blue.svg?cdnVersion=2145"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Leaders immensely benefit from looking through the lens of Team Topologies. Learn how four fundamental team topologies influence a DevOps transformation.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-16x16.png",
        "meta_site_name": "Atlassian",
        "canonical_link": "https://www.atlassian.com/devops/frameworks/team-topologies",
        "text": "Engineering teams are required to move faster than ever to deliver value to their customers. The rise of cloud, SaaS, and always-on services means that customers expect new features, fewer bugs, and 99.99% (or higher) up-time.\n\nTo keep pace with these demands, organizations adopted agile practices and, more recently, DevOps practices, which promises faster time to market/lead time, improvement deployment frequency, better team culture, and increased collaboration across teams/ departments.\n\nWhile adopting DevOps practices is easier said than done, the book Team Topologies provides insightful ways organizations can build DevOps into their company, including what sort of teams might be most effective. This book provides a starting point for how Atlassian thinks about teams. Rather than reiterate their findings, we want to share our own perspective on the team types.\n\nThe first step toward a DevOps transformation is to identify the organizational structure in place. However, at any given company today, there are many different team types, and in some cases, single teams taking on multiple roles and responsibilities. This sprawl makes it hard for leadership to visualize the full organizational landscape, and answer questions like:\n\nDo we have the right teams in place?\n\nAre we lacking capabilities in some areas that are not being addressed by any team?\n\nDo teams have the necessary balance between autonomy and support from other teams?\n\nDevelopment and operations leaders can better understand if the right teams are in place by looking at their organization through the lens of Team Topologies. We recommend reducing the number of team variations to four fundamental Team Topologies that are easily digestible for both upper management and the actual team members themselves:\n\nStream-aligned team\n\nPlatform team\n\nComplicated-subsystem team\n\nEnabling team\n\nKeep in mind these team types take different forms depending on the size and maturity of the company. In reality, a combination of more than one type of team, or a team transforming into another, is often the best approach.\n\nStream-aligned teams focus on a single, impactful stream of work. It can be a single product or service, a single set of features, a single user journey, or a single user persona. The team is empowered to build and deliver customer or user value as quickly, safely, and independently as possible, without requiring hand-offs to other teams to perform parts of the work.\n\nBecause stream-aligned teams work on the full spectrum of delivery, they are, by necessity, closer to the customer and usually already agile. This team incorporates customer feedback in development cycles, while maintaining software in production.\n\nWhile stream-aligned teams are common at many software companies, other organizations may be more familiar with team structures organized by function (i.e. separate teams for engineering, design, QA), rather than the delivery stream.\n\nSince the stream-aligned team is the most common team type in organizations, the role of other teams is defined relative to stream-aligned teams. Stream-aligned teams should regularly reach out to the following supporting teams (complicated subsystem, enabling, and platform) to continuously improve the speed of delivery and quality of their products and services.\n\nPlatform teams enable stream-aligned teams to deliver work with substantial autonomy. While the stream-aligned team maintains full ownership of building, running, and fixing an application in production, the platform team provides internal services that the stream-aligned team can use.\n\nPlatform teams create capabilities that can be used by numerous stream-aligned teams, with little overhead. By optimizing a product, platform teams minimize resources and cognitive loads of the stream-aligned team. This also benefits end-users too, since platform teams can create a cohesive experience that spans across different user experiences or products.\n\nHere at Atlassian, platform teams build services used by all of our products (like identity management) and are expected to provide documentation, support, and consultation for stream-aligned teams.\n\nA complicated-subsystem team is responsible for building and maintaining a part of the system that depends on specific skills and knowledge. Most team members must be specialists in a particular area of knowledge to understand and make changes to the subsystem.\n\nThe goal of this team is to reduce the load of stream-aligned teams who work on systems that include or use the subsystem. With the complicated-subsystem team’s expertise and capabilities, stream-aligned teams don’t have to build capabilities in areas too complicated for their daily work. Team members from this team may have specialized knowledge in certain microservices (i.e. a billing service), algorithms, or even artificial intelligence.\n\nA common pitfall is to embed specialists in every stream-aligned team who uses the subsystem. While this may seem efficient, it’s ultimately not cost-effective and out of scope for a stream-aligned team.\n\nStream-aligned teams are under constant pressure to deliver and respond to change quickly, making it challenging to find time for researching, learning, and practicing new skills.\n\nAn enabling team composed of specialists in a given technical (or product) domain help bridge this capability gap. These teams focus on research and experimentation to make informed suggestions about tooling, frameworks, and ecosystem choices that affect the tool stack.\n\nThis gives stream-aligned teams time to acquire and evolve capabilities without taking time away from their primary goals. The enabling team seeks to primarily increase the autonomy of stream-aligned teams by growing their capabilities with a focus on problems, rather than solutions.\n\nIf an enabling team does its job well, the team it assists should no longer need help after a few weeks or so. The enabling team should never work on a permanent dependency.\n\nThe following questions should be asked to determine if you have a stream-aligned team:\n\nDoes your team aim to produce a steady flow of features?\n\nMature teams release multiple times per week, and in some cases, multiple times per day. In pursuit of this goal, mature teams should use continuous integration and continuous delivery (CI/CD) to ship features frequently.\n\nIs your team quick to change direction based on feedback (customer or internal) from the latest changes?\n\nIt’s often best to use an experimental approach to product evolution. Mature DevOps processes include automated testing to ensure quality code shipments. Yet experimentation goes beyond simple unit or acceptance tests. You can ensure that your products deliver the most value to customers by using feature flags to automate roll-outs to a subset of users, alpha and beta releases to solicit and measure user feedback and behavior, and qualitative continuous feedback via comments, support tickets, and community forums.\n\nDoes your team have minimal hand-offs of work to other teams?\n\nThis should be true in two ways. Your team should be self-contained and work should happen with immediate teammates to ensure fast delivery. Beyond work scope, minimal hand-offs can also take the form of automated processes. Automating your development cycle ensures that moving things along is a seamless process, regardless if the next step is an action like an automated test or merge to main, or an actual human.\n\nBonus points if….\n\nDoes your team have time to address code quality changes (a.k.a. “tech debt”) to ensure changes are safe and easy?\n\nMature teams rely on trunk-based development and CI/CD practices to maintain their codebase. Capacity planning should include dedicated time to address tech debt. Plus, large-scale projects that address underlying infrastructure or platform issues should receive as much attention as feature development.\n\nIs your team evaluated by the right metrics?\n\nBeyond how fast your team ships, it should also consider team-health and technical quality metrics in their measures of success.\n\nRegarding the last question around measurement, DevOps teams have traditionally considered the four key DevOps Research and Assessment (DORA) metrics in their definition of “success”:\n\nDeployment frequency - How often an organization successfully releases to production\n\nLead time for changes - The amount of time it takes a commit to get into production\n\nChange failure rate - The percentage of deployments that cause a failure in production\n\nTime to restore service - How long it takes an organization to recover from a failure in production\n\nIn addition to these metrics specified by DORA, Atlassian found that high-performing, stream-aligned teams also monitor these attributes:\n\nBalanced team - Your team has a diverse set of skills and perspectives\n\nFull-time owner - A full-time owner ensures that the nuclear team and cross-functional participants know who to ask questions to and how to make decisions related to projects owned by the team\n\nShared understanding - There is a shared understanding of the requirements, along with the definition for values and metrics for success\n\nA focus on value and metrics - Your team has north stars that guide which tasks to tackle in order to move projects to release\n\nProof-of-concept - Having a real artifact to spar and test assumptions with helps a team constantly iterate and improve\n\nManaged dependencies to maintain velocity - Understanding managed dependencies keeps blockers at bay and helps the team maintain velocity"
    }
}