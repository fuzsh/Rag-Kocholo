{
    "id": "dbpedia_109_1",
    "rank": 93,
    "data": {
        "url": "https://apiblueprint.org/documentation/specification.html",
        "read_more_link": "",
        "language": "en",
        "title": "API Blueprint Specification",
        "top_image": "https://apiblueprint.org/images/favicon-10b3ff24.png",
        "meta_img": "https://apiblueprint.org/images/favicon-10b3ff24.png",
        "images": [
            "https://apiblueprint.org/images/stackoverflow-994229fe.svg",
            "https://apiblueprint.org/images/github-893a5b9a.svg",
            "https://apiblueprint.org/images/twitter-2ade0f64.svg",
            "https://apiblueprint.org/images/apiblueprint-footer-81a6c64c.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/images/favicon-10b3ff24.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Author: z@apiary.io Version: 1A9\n\nFormat 1A revision 9\n\nI. API Blueprint Language\n\nIntroduction\n\nAPI Blueprint\n\nAPI Blueprint document\n\nBlueprint section\n\nSection types\n\nSection structure\n\nKeywords\n\nIdentifier\n\nDescription\n\nNested sections\n\nII. Sections Reference\n\nAbstract\n\nNamed section\n\nAsset section\n\nPayload section\n\nSection Basics\n\nMetadata section\n\nAPI name & overview section\n\nResource group section\n\nResource section\n\nResource model section\n\nSchema section\n\nAction section\n\nRequest section\n\nResponse section\n\nURI parameters section\n\nAttributes section\n\nHeaders section\n\nBody section\n\nGoing Further\n\nData Structures section\n\nRelation section\n\nIII. Appendix\n\nURI Templates\n\nI. API Blueprint Language\n\nIntroduction\n\nThis documents is a full specification of the API Blueprint format. For a less formal introduction to API Blueprint visit the API Blueprint Tutorial or check some of the examples.\n\nAPI Blueprint\n\nAPI Blueprint is a documentation-oriented web API description language. The API Blueprint is essentially a set of semantic assumptions laid on top of the Markdown syntax used to describe a web API.\n\nIn addition to the regular Markdown syntax, API Blueprint conforms to the GitHub Flavored Markdown syntax.\n\nAPI Blueprint document\n\nAn API Blueprint document – a blueprint – is a plain text Markdown document describing a Web API in whole or in part. The document is structured into logical sections. Each section has its distinctive meaning, content and position in the document.\n\nGeneral section definition and structure is discussed in detail later in the Blueprint section chapter.\n\nAll of the blueprint sections are optional. However, when present, a section must follow the API Blueprint document structure.\n\nBlueprint document structure\n\n0-1 Metadata section\n\n0-1 API Name & overview section\n\n0+ Resource sections\n\n0-1 URI Parameters section\n\n0-1 Attributes section\n\n0-1 Model section\n\n0-1 Headers section\n\n0-1 Attributes section\n\n0-1 Body section\n\n0-1 Schema section\n\n1+ Action sections\n\n0-1 Relation section\n\n0-1 URI Parameters section\n\n0-1 Attributes section\n\n0+ Request sections\n\n0-1 Headers section\n\n0-1 Attributes section\n\n0-1 Body section\n\n0-1 Schema section\n\n1+ Response sections\n\n0-1 Headers section\n\n0-1 Attributes section\n\n0-1 Body section\n\n0-1 Schema section\n\n0+ Resource Group sections\n\n0+ Resource sections (see above)\n\n0+ Data Structures section\n\nNOTE: The number prior to a section name denotes the allowed number of the section occurrences.\n\nNOTE: Refer to Sections Reference for description of a specific section type.\n\nBlueprint section\n\nA Section represents a logical unit of an API Blueprint. For example: an API overview, a group of resources or a resource definition.\n\nIn general a section is defined using a keyword in a Markdown entity. Depending on the type of section the keyword is written either as a Markdown header entity or in a list item entity.\n\nA section definition may also contain additional variable components such as its identifier and additional modifiers.\n\nNOTE: There are two special sections that are recognized by their position in the document instead of a keyword: The Metadata section and the API Name & Overview section. Refer to the respective section entry for details on its definition.\n\nExample: Header-defined sections\n\nNOTE: While this specification uses \"atx\"-style headers (using #s) you can also use \"Setext\" header syntax interchangeably:\n\n<keyword> ========= ... <keyword> ========= ...\n\nExample: List-defined sections\n\nNOTE: While this specification uses pluses (+) as list markers you can use any Markdown list syntax using asterisks (*), pluses (+) and hyphens (-) interchangeably:\n\n* <keyword> ... - <keyword> ...\n\nSection types\n\nThere are several types of API Blueprint sections. You can find the complete listing of the section types in the Section Reference.\n\nThe Blueprint section chapter discusses the section syntax in general. A specific section type may conform only to some parts of this general syntax. Always refer for respective section reference for details on its syntax.\n\nSection structure\n\nA general structure of an API Blueprint section defined by a keyword includes an identifier (name), section description and nested sections or a specifically formatted content.\n\nExample: Header-defined section structure\n\nExample: List-defined section structure\n\nKeywords\n\nFollowing reserved keywords are used in section definitions:\n\nHeader keywords\n\nGroup\n\nData Structures\n\nHTTP methods (e.g. GET, POST, PUT, DELETE...)\n\nURI templates (e.g. /resource/{id})\n\nCombinations of an HTTP method and URI Template (e.g. GET /resource/{id})\n\nList keywords\n\nRequest\n\nResponse\n\nBody\n\nSchema\n\nModel\n\nHeader & Headers\n\nParameter & Parameters\n\nValues\n\nAttribute & Attributes\n\nRelation\n\nNOTE: Avoid using these keywords in other Markdown headers or lists\n\nNOTE: With the exception of HTTP methods keywords the section keywords are case insensitive.\n\nIdentifier\n\nA section definition may or must include an identifier of the section. An identifier is any non-empty combination of any character except [, ], (, ) and newline characters.\n\nAn identifier must not contain any of the keywords.\n\nExample\n\nDescription\n\nA section description is any arbitrary Markdown-formatted content following the section definition.\n\nIt is possible to use any Markdown header or list item in a section description as long as it does not clash with any of the reserved keywords.\n\nNOTE: It is considered good practice to keep the header level nested under the actual section.\n\nNested sections\n\nA section may contain another nested section(s).\n\nDepending on the nested section type, to nest a section simply increase its header level or its list item indentation. Anything between the section start and the start of following section at the same level is considered to be part of the section.\n\nWhat sections can be nested and where depends upon the section in case, as described in the relevant section's entry.\n\nExample: Nested header-defined section\n\nExample: Nested list-defined section\n\nNOTE: While not necessary it is a good habit to increase the level of a nested section markdown-header.\n\nNOTE: A markdown-list section is always considered to be nested under the preceding markdown-header section.\n\nII. Sections Reference\n\nNOTE: Sections marked as \"Abstract\" serve as a base for other sections and as such they cannot be used directly.\n\nAbstract\n\nNamed section\n\nAbstract\n\nParent sections: vary, see descendants\n\nNested sections: vary, see descendants\n\nMarkdown entity: header, list\n\nInherits from: none\n\nDefinition\n\nDefined by a keyword followed by an optional section name - identifier in a Markdown header or list entity.\n\nDescription\n\nNamed section is the base section for most of the API Blueprint sections. It conforms to the general section and as such it is composed of a section name (identifier), description and nested sections or specific formatted content (see descendants descriptions).\n\nExample\n\nAsset section\n\nAbstract\n\nParent sections: vary, see descendants\n\nNested sections: none\n\nMarkdown entity: list\n\nInherits from: none\n\nDefinition\n\nDefined by a keyword in Markdown list entity.\n\nDescription\n\nThe asset section is the base section for atomic data in API Blueprint. The content of this section is expected to be a pre-formatted code block.\n\nExample\n\nExample: Fenced code blocks\n\nPayload section\n\nAbstract\n\nParent sections: vary, see descendants\n\nNested sections: 0-1 Headers section, 0-1 Attributes section, 0-1 Body section, 0-1 Schema section\n\nMarkdown entity: list\n\nInherits from: Named section\n\nDefinition\n\nDefined by a keyword in Markdown list entity. The keyword may be followed by identifier. The definition may include payload's media-type enclosed in braces.\n\nNOTE: Refer to descendant for the particular section type definition.\n\nDescription\n\nPayload sections represent the information transferred as a payload of an HTTP request or response messages. A Payload consists of optional meta information in the form of HTTP headers and optional content in the form of an HTTP body.\n\nFurthermore, in API Blueprint context, a payload includes its description, description of its message-body attributes and a message-body validation schema.\n\nA payload may have its media type associated. A payload's media type represents the metadata received or sent in the form of a HTTP Content-Type header. When specified a payload should include nested Body section.\n\nThis section should include at least one of the following nested sections:\n\n0-1 Headers section\n\n0-1 Attributes section\n\n0-1 Body section\n\n0-1 Schema section\n\nIf there is no nested section the content of the payload section is considered as content of the Body section.\n\nRelation of Body, Schema and Attributes sections\n\nEach of body, schema and attributes sections describe a message payload's body. These descriptions should be consistent, not violating each other. When multiple body descriptions are provided they should be prioritized as follows:\n\nFor resolving message-body schema\n\nSchema section\n\nAttributes section\n\nBody section\n\nFor resolving message-body example\n\nBody section\n\nAttributes section\n\nSchema section\n\nReferencing\n\nInstead of providing a payload section content, a model payload section can be referenced using the Markdown implicit reference syntax:\n\nExample\n\nExample: Referencing model payload\n\nSection Basics\n\nMetadata section\n\nParent sections: none\n\nNested sections: none\n\nMarkdown entity: special\n\nInherits from: none\n\nDefinition\n\nKey-value pairs. Each key is separated from its value by a colon (:). One pair per line. Starts at the beginning of the document and ends with the first Markdown element that is not recognized as a key-value pair.\n\nDescription\n\nMetadata keys and their values are tool-specific. Refer to relevant tool documentation for the list of supported keys.\n\nExample\n\nAPI name & overview section\n\nParent sections: none\n\nNested sections: none\n\nMarkdown entity: special, header\n\nInherits from: Named section\n\nDefinition\n\nDefined by the first Markdown header in the blueprint document, unless it represents another section definition.\n\nDescription\n\nName and description of the API\n\nExample\n\nResource group section\n\nParent sections: none\n\nNested sections: 0+ Resource section\n\nMarkdown entity: header\n\nInherits from: Named section\n\nDefinition\n\nDefined by the Group keyword followed by group name (identifier):\n\nDescription\n\nThis section represents a group of resources (Resource Sections). May include one or more nested Resource Sections.\n\nExample\n\nResource section\n\nParent sections: none, Resource group section\n\nNested sections: 0-1 Parameters section, 0-1 Attributes section, 0-1 Model section, 1+ Action section\n\nMarkdown entity: header\n\nInherits from: Named section\n\nDefinition\n\nDefined by an URI template:\n\n-- or --\n\nDefined by a resource name (identifier) followed by an URI template enclosed in square brackets [].\n\n-- or --\n\nDefined by an HTTP request method followed by URI template:\n\n-- or --\n\nDefined by a resource name (identifier) followed by an HTTP request method and an URI template enclosed in square brackets []:\n\nNOTE: In the latter two cases the rest of this section represents the Action section including its description and nested sections and follows the rules of the Action section instead.\n\nDescription\n\nAn API resource as specified by its URI or a set of resources (a resource template) matching its URI template.\n\nThis section should include at least one nested Action section and may include following nested sections:\n\n0-1 URI parameters section\n\nURI parameters defined in the scope of a Resource section apply to any and all nested Action sections except when an URI template has been defined for the Action.\n\n0-1 Attributes section\n\nAttributes defined in the scope of a Resource section represent Resource attributes. If the resource is defined with a name these attributes may be referenced in Attributes sections.\n\n0-1 Model section\n\nAdditional Action sections\n\nNOTE: A blueprint document may contain multiple sections for the same resource (or resource set), as long as their HTTP methods differ. However it is considered good practice to group multiple HTTP methods under one resource (resource set).\n\nExample\n\nResource model section\n\nParent sections: Resource section\n\nNested sections: Refer to payload section\n\nMarkdown entity: list\n\nInherits from: Payload section\n\nDefinition\n\nDefined by the Model keyword followed by an optional media type:\n\nDescription\n\nA resource manifestation - one exemplary representation of the resource in the form of a payload.\n\nReferencing\n\nThe payload defined in this section may be referenced in any response or request section in the document using parent section's identifier. You can refer to this payload in any of the following Request or Response payload sections using the Markdown implicit reference syntax.\n\nExample\n\nSchema section\n\nParent sections: Payload section\n\nNested sections: none\n\nMarkdown entity: list\n\nInherits from: Asset section\n\nDefinition\n\nDefined by the Schema keyword in Markdown list entity.\n\nDescription\n\nSpecifies a validation schema for the HTTP message-body of parent payload section.\n\nExample\n\nFollowing example uses Body section to provide an example of an application/json payload, and Schema section to provide a JSON Schema describing all possible valid shapes of the payload.\n\nAction section\n\nParent sections: Resource section\n\nNested sections: 0-1 Relation section, 0-1 URI parameters section, 0-1 Attributes section, 0+ Request section, 1+ Response section\n\nMarkdown entity: header\n\nInherits from: Named section\n\nDefinition\n\nDefined by an HTTP request method:\n\n-- or --\n\nDefined by an action name (identifier) followed by an HTTP request method enclosed in square brackets [].\n\n-- or --\n\nDefined by an action name (identifier) followed by an HTTP request method and URI template enclosed in square brackets [].\n\nDescription\n\nDefinition of at least one complete HTTP transaction as performed with the parent resource section. An action section may consist of multiple HTTP transaction examples for the given HTTP request method.\n\nThis section may include one nested URI parameters section describing any URI parameters specific to the action – URI parameters discussed in the scope of an Action section apply to the respective Action section ONLY.\n\nThis section may include one nested Attributes section defining the input (request) attributes of the section. If present, these attributes should be inherited in every Action's Request section unless specified otherwise.\n\nAction section should include at least one nested Response section and may include additional nested Request and Response sections.\n\nNested Request and Response sections may be ordered into groups where each group represents one transaction example. The first transaction example group starts with the first nested Request or Response section. Subsequent groups start with the first nested Request section following a Response section.\n\nMultiple Request and Response nested sections within one transaction example should have different identifiers.\n\nExample\n\nExample Multiple Transaction Examples\n\nNOTE: The \"Multiple Transaction Examples\" example demonstrates three transaction examples for one given action:\n\n1st example: request A, response 200\n\n2nd example: request B, responses 200 and 500\n\n3rd example: requests C and D, response 200\n\nRequest section\n\nParent sections: Action section\n\nNested sections: Refer to payload section\n\nMarkdown entity: list\n\nInherits from: Payload section\n\nDefinition\n\nDefined by the Request keyword followed by an optional identifier:\n\nDescription\n\nOne HTTP request-message example – payload.\n\nExample\n\nResponse section\n\nParent sections: Action section\n\nNested sections: Refer to payload section\n\nMarkdown entity: list\n\nInherits from: Payload section\n\nDefinition\n\nDefined by the Response keyword. The response section definition should include an HTTP status code as its identifier.\n\nDescription\n\nOne HTTP response-message example – payload.\n\nExample\n\nURI parameters section\n\nParent Sections: Resource section | Action section\n\nNested Sections: none\n\nMarkdown entity: list\n\nInherits from: none, special\n\nDefinition\n\nDefined by the Parameters keyword written in a Markdown list item:\n\nDescription\n\nDiscussion of URI parameters in the scope of the parent section.\n\nThis section must be composed of nested list items only. This section must not contain any other elements. Each list item describes a single URI parameter. The nested list items subsections inherit from the Named section and are subject to additional formatting as follows:\n\nWhere:\n\n<parameter name> is the parameter name as written in Resource Section's URI (e.g. \"id\").\n\n<description> is any optional Markdown-formatted description of the parameter.\n\n<additional description> is any additional optional Markdown-formatted description of the parameter.\n\n<default value> is an optional default value of the parameter – a value that is used when no value is explicitly set (optional parameters only).\n\n<example value> is an optional example value of the parameter (e.g. 1234).\n\n<type> is the optional parameter type as expected by the API (e.g. \"number\", \"string\", \"boolean\"). \"string\" is the default.\n\nMembers is the optional enumeration of possible values. <type> should be surrounded by enum[] if this is present. For example, if enumeration values are present for a parameter whose type is number, then enum[number] should be used instead of number to.\n\n<enumeration value n> represents an element of enumeration type.\n\nrequired is the optional specifier of a required parameter (this is the default)\n\noptional is the optional specifier of an optional parameter.\n\nNOTE: This section should only contain parameters that are specified in the parent's resource URI template, and does not have to list every URI parameter.\n\nExample\n\nAttributes Section\n\nParent sections: Resource section | Action section | Payload section\n\nNested sections: See Markdown Syntax for Object Notation\n\nMarkdown entity: list\n\nInherits from: none\n\nDefinition\n\nDefined by the Attributes keyword followed by an optional MSON Type Definition enclosed in parentheses.\n\n<Type Definition> is the type definition of the data structure being described. If the <Type Definition> is not specified, an object base type is assumed. See MSON Type Definition for details.\n\nExample\n\nDescription\n\nThis section describes a data structure using the Markdown Syntax for Object Notation (MSON). Based on the parent section, the data structure being described is one of the following:\n\nResource data structure attributes (Resource section)\n\nAction request attributes (Action section)\n\nPayload message-body attributes (Payload section)\n\nData structures defined in this section may refer to any arbitrary data structures defined in the Data Structures section as well as to any data structures defined by a named resource attributes description (see below).\n\nResource Attributes description\n\nDescription of the resource data structure.\n\nIf defined in a named Resource section, this data structure may be referenced by other data structures using the resource name.\n\nExample\n\nNOTE: This data structure can be later referred as:\n\n+ Attributes (Blog Post)\n\nAction Attributes description\n\nDescription of the default request message-body data structure.\n\nIf defined, all the Request sections of the respective Action section inherits these attributes unless specified otherwise.\n\nExample\n\nPayload Attributes description\n\nDescription of payload (request, response, model) message-body attributes.\n\nNot every attribute has to be described. However, when an attribute is described, it should appear in the respective Body section example, if a Body section is provided.\n\nIf defined, the Body section may be omitted and the example representation should be generated from the attributes description.\n\nThe description of message-body attributes may be used to describe message-body validation if no Schema section is provided. When a Schema section is provided, the attributes description should conform to the schema.\n\nExample\n\nHeaders section\n\nParent sections: Payload section\n\nNested sections: none\n\nMarkdown entity: list\n\nInherits from: none\n\nDefinition\n\nDefined by the Headers keyword in Markdown list entity.\n\nDescription\n\nSpecifies the HTTP message-headers of the parent payload section. The content this section is expected to be a pre-formatted code block with the following syntax:\n\nOne HTTP header per line.\n\nExample\n\nBody section\n\nParent sections: Payload section\n\nNested sections: none\n\nMarkdown entity: list\n\nInherits from: Asset section\n\nDefinition\n\nDefined by the Body keyword in Markdown list entity.\n\nDescription\n\nSpecifies the HTTP message-body of a payload section.\n\nExample\n\nData Structures section\n\nParent sections: none\n\nNested sections: MSON Named Type definition (see below)\n\nMarkdown entity: header\n\nInherits from: none\n\nDefinition\n\nDefined by the Data Structures keyword.\n\nDescription\n\nThis section holds arbitrary data structures definitions defined in the form of MSON Named Types.\n\nData structures defined in this section may be used in any Attributes section. Similarly, any data structures defined in a Attributes section of a named Resource Section may be used in a data structure definition.\n\nRefer to the MSON specification for full details on how to define an MSON Named type.\n\nExample\n\nExample reusing Data Structure in Resource\n\nExample reusing Resource-defined Data Structure\n\nRelation section\n\nParent sections: Action section\n\nNested Sections: none\n\nMarkdown entity: list\n\nInherits from: none\n\nDefinition\n\nDefined by the Relation keyword written in a Markdown list item followed by a colon (:) and a link relation identifier.\n\nDescription\n\nThis section specifies a link relation type for the given action as specified by RFC 5988.\n\nNOTE: The link relation identifiers should be unique per resource in the blueprint document.\n\nExample\n\nIII. Appendix\n\nURI Templates\n\nThe API Blueprint uses a subset of RFC6570 to define a resource URI Template.\n\nURI Path Segment\n\nAt its simplest form – without any variables – a path segment of an URI Template is identical to an URI path segment:\n\nURI Template Variable\n\nVariable names are case-sensitive. The variable name may consists of following characters only:\n\nASCII alpha numeric characters (a-z, A-Z)\n\nDecimal digits (0-9)\n\n_\n\nPercent-encoded characters\n\n.\n\nMultiple variables are separated by the comma without any leading or trailing spaces. A variable(s) must be enclosed in braces – {} without any additional leading or trailing whitespace.\n\nOperators\n\nThe first variable in the braces might be preceded by an operator. API Blueprint currently supports the following operators:\n\n# – fragment identifier operator\n\n+ – reserved value operator\n\n? – form-style query operator\n\n& – form-style query continuation operator\n\nExamples\n\nNOTE: The explode variable modifier is also supported. Refer to RFC6570 for its description.\n\nVariable Reserved Values\n\nFollowing characters are reserved in variable values:\n\n: / / / ? / # / [ / ] / @ / ! / $ / & / ' / ( / ) / * / + / , / ; / =\n\nPath Segment Variable\n\nSimple path segment component variable is defined without any operator:\n\nWith var := 42 the expansion is /path/to/resources/42.\n\nNOTE: RFC6570 – Level 1\n\nFragment Identifier Variable\n\nURI Template variables for fragment identifiers are defined using the crosshatch (#) operator:\n\nWith var := my_id the expansion is /path/to/resources/42#my_id.\n\nNOTE: RFC6570 – Level 2\n\nVariable with Reserved Characters Values\n\nTo define URI Template variables with reserved URI characters, use the plus (+) operator:\n\nWith var := to/resources the expansion is /path/to/resources/42.\n\nNOTE: RFC6570 – Level 2\n\nForm-style Query Variable\n\nTo define variables for a form-style query use the question mark (?) operator\n\nWith varone := 42 and vartwo = hello the expansion is /path/to/resources/42?vartwo=hello.\n\nTo continue a form-style query use the ampersand (&) operator:\n\nWith varone := 42, vartwo = hello, varthree = 1024 the expansion is /path/to/resources/42?path=test&vartwo=hello&varthree=1024."
    }
}