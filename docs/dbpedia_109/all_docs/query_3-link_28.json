{
    "id": "dbpedia_109_3",
    "rank": 28,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape",
        "read_more_link": "",
        "language": "en",
        "title": "Character escape: \\n, \\u{...} - JavaScript",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-28T23:06:42+00:00",
        "summary": "",
        "meta_description": "A character escape represents a character that may not be able to be conveniently represented in its literal form.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape",
        "text": "The following character escapes are recognized in regular expressions:\n\n\\f, \\n, \\r, \\t, \\v\n\nSame as those in string literals, except \\b, which represents a word boundary in regexes unless in a character class.\n\n\\c followed by a letter from A to Z or a to z\n\nRepresents the control character with value equal to the letter's character value modulo 32. For example, \\cJ represents line break (\\n), because the code point of J is 74, and 74 modulo 32 is 10, which is the code point of line break. Because an uppercase letter and its lowercase form differ by 32, \\cJ and \\cj are equivalent. You can represent control characters from 1 to 26 in this form.\n\n\\0\n\nRepresents the U+0000 NUL character. Cannot be followed by a digit (which makes it a legacy octal escape sequence).\n\n\\^, \\$, \\\\, \\. \\*, \\+, \\?, \\(, \\), \\[, \\], \\{, \\}, \\|, \\/\n\nRepresents the character itself. For example, \\\\ represents a backslash, and \\( represents a left parenthesis. These are syntax characters in regexes (/ is the delimiter of a regex literal), so they require escaping unless in a character class.\n\n\\xHH\n\nRepresents the character with the given hexadecimal Unicode code point. The hexadecimal number must be exactly two digits long.\n\n\\uHHHH\n\nRepresents the character with the given hexadecimal Unicode code point. The hexadecimal number must be exactly four digits long. Two such escape sequences can be used to represent a surrogate pair in Unicode-aware mode. (In Unicode-unaware mode, they are always two separate characters.)\n\n\\u{HHH}\n\n(Unicode-aware mode only) Represents the character with the given hexadecimal Unicode code point. The hexadecimal number can be from 1 to 6 digits long.\n\nIn Unicode-unaware mode, escape sequences that are not one of the above become identity escapes: they represent the character that follows the backslash. For example, \\a represents the character a. This behavior limits the ability to introduce new escape sequences without causing backward compatibility issues, and is therefore forbidden in Unicode-aware mode.\n\nIn Unicode-unaware mode, ], {, and } may appear literally if it's not possible to parse them as the end of a character class or quantifier delimiters. This is a deprecated syntax for web compatibility, and you should not rely on it."
    }
}