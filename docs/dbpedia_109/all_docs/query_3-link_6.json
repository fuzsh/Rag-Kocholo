{
    "id": "dbpedia_109_3",
    "rank": 6,
    "data": {
        "url": "https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap06.html",
        "read_more_link": "",
        "language": "en",
        "title": "Character Set",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://pubs.opengroup.org/onlinepubs/9699919799/images/opt-start.gif",
            "https://pubs.opengroup.org/onlinepubs/9699919799/images/opt-end.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "The Open Group Base Specifications Issue 7, 2018 edition\n\nIEEE Std 1003.1-2017 (Revision of IEEE Std 1003.1-2008)\n\nCopyright © 2001-2018 IEEE and The Open GroupA newer edition of this document exists here\n\n6. Character Set\n\n6.1 Portable Character Set\n\nConforming implementations shall support one or more coded character sets. Each supported locale shall include the portable character set, which is the set of symbolic names for characters in Portable Character Set. This is used to describe characters within the text of POSIX.1-2017. The first eight entries in Portable Character Set and all characters in Non-Portable Control Characters are defined in the ISO/IEC 6429:1992 standard. The rest of the characters in Portable Character Set are defined in the ISO/IEC 10646-1:2000 standard.\n\nTable: Portable Character Set\n\nSymbolic Name(s)\n\nGlyph\n\nUCS\n\nDescription\n\n<NUL>\n\n<U0000>\n\nNULL (NUL)\n\n<alert>, <BEL>\n\n<U0007>\n\nBELL\n\n<backspace>, <BS>\n\n<U0008>\n\nBACKSPACE\n\n<tab>, <HT>\n\n<U0009>\n\nCHARACTER TABULATION\n\n<newline>, <LF>\n\n<U000A>\n\nLINE FEED (LF)\n\n<vertical-tab>, <VT>\n\n<U000B>\n\nLINE TABULATION\n\n<form-feed>, <FF>\n\n<U000C>\n\nFORM FEED (FF)\n\n<carriage-return>, <CR>\n\n<U000D>\n\nCARRIAGE RETURN (CR)\n\n<space>\n\n<U0020>\n\nSPACE\n\n<exclamation-mark>\n\n!\n\n<U0021>\n\nEXCLAMATION MARK\n\n<quotation-mark>\n\n\"\n\n<U0022>\n\nQUOTATION MARK\n\n<number-sign>\n\n#\n\n<U0023>\n\nNUMBER SIGN\n\n<dollar-sign>\n\n$\n\n<U0024>\n\nDOLLAR SIGN\n\n<percent-sign>\n\n%\n\n<U0025>\n\nPERCENT SIGN\n\n<ampersand>\n\n&\n\n<U0026>\n\nAMPERSAND\n\n<apostrophe>\n\n'\n\n<U0027>\n\nAPOSTROPHE\n\n<left-parenthesis>\n\n(\n\n<U0028>\n\nLEFT PARENTHESIS\n\n<right-parenthesis>\n\n)\n\n<U0029>\n\nRIGHT PARENTHESIS\n\n<asterisk>\n\n*\n\n<U002A>\n\nASTERISK\n\n<plus-sign>\n\n+\n\n<U002B>\n\nPLUS SIGN\n\n<comma>\n\n,\n\n<U002C>\n\nCOMMA\n\n<hyphen-minus>, <hyphen>\n\n-\n\n<U002D>\n\nHYPHEN-MINUS\n\n<full-stop>, <period>\n\n.\n\n<U002E>\n\nFULL STOP\n\n<slash>, <solidus>\n\n/\n\n<U002F>\n\nSOLIDUS\n\n<zero>\n\n0\n\n<U0030>\n\nDIGIT ZERO\n\n<one>\n\n1\n\n<U0031>\n\nDIGIT ONE\n\n<two>\n\n2\n\n<U0032>\n\nDIGIT TWO\n\n<three>\n\n3\n\n<U0033>\n\nDIGIT THREE\n\n<four>\n\n4\n\n<U0034>\n\nDIGIT FOUR\n\n<five>\n\n5\n\n<U0035>\n\nDIGIT FIVE\n\n<six>\n\n6\n\n<U0036>\n\nDIGIT SIX\n\n<seven>\n\n7\n\n<U0037>\n\nDIGIT SEVEN\n\n<eight>\n\n8\n\n<U0038>\n\nDIGIT EIGHT\n\n<nine>\n\n9\n\n<U0039>\n\nDIGIT NINE\n\n<colon>\n\n:\n\n<U003A>\n\nCOLON\n\n<semicolon>\n\n;\n\n<U003B>\n\nSEMICOLON\n\n<less-than-sign>\n\n<\n\n<U003C>\n\nLESS-THAN SIGN\n\n<equals-sign>\n\n=\n\n<U003D>\n\nEQUALS SIGN\n\n<greater-than-sign>\n\n>\n\n<U003E>\n\nGREATER-THAN SIGN\n\n<question-mark>\n\n?\n\n<U003F>\n\nQUESTION MARK\n\n<commercial-at>\n\n@\n\n<U0040>\n\nCOMMERCIAL AT\n\n<A>\n\nA\n\n<U0041>\n\nLATIN CAPITAL LETTER A\n\n<B>\n\nB\n\n<U0042>\n\nLATIN CAPITAL LETTER B\n\n<C>\n\nC\n\n<U0043>\n\nLATIN CAPITAL LETTER C\n\n<D>\n\nD\n\n<U0044>\n\nLATIN CAPITAL LETTER D\n\n<E>\n\nE\n\n<U0045>\n\nLATIN CAPITAL LETTER E\n\n<F>\n\nF\n\n<U0046>\n\nLATIN CAPITAL LETTER F\n\n<G>\n\nG\n\n<U0047>\n\nLATIN CAPITAL LETTER G\n\n<H>\n\nH\n\n<U0048>\n\nLATIN CAPITAL LETTER H\n\n<I>\n\nI\n\n<U0049>\n\nLATIN CAPITAL LETTER I\n\n<J>\n\nJ\n\n<U004A>\n\nLATIN CAPITAL LETTER J\n\n<K>\n\nK\n\n<U004B>\n\nLATIN CAPITAL LETTER K\n\n<L>\n\nL\n\n<U004C>\n\nLATIN CAPITAL LETTER L\n\n<M>\n\nM\n\n<U004D>\n\nLATIN CAPITAL LETTER M\n\n<N>\n\nN\n\n<U004E>\n\nLATIN CAPITAL LETTER N\n\n<O>\n\nO\n\n<U004F>\n\nLATIN CAPITAL LETTER O\n\n<P>\n\nP\n\n<U0050>\n\nLATIN CAPITAL LETTER P\n\n<Q>\n\nQ\n\n<U0051>\n\nLATIN CAPITAL LETTER Q\n\n<R>\n\nR\n\n<U0052>\n\nLATIN CAPITAL LETTER R\n\n<S>\n\nS\n\n<U0053>\n\nLATIN CAPITAL LETTER S\n\n<T>\n\nT\n\n<U0054>\n\nLATIN CAPITAL LETTER T\n\n<U>\n\nU\n\n<U0055>\n\nLATIN CAPITAL LETTER U\n\n<V>\n\nV\n\n<U0056>\n\nLATIN CAPITAL LETTER V\n\n<W>\n\nW\n\n<U0057>\n\nLATIN CAPITAL LETTER W\n\n<X>\n\nX\n\n<U0058>\n\nLATIN CAPITAL LETTER X\n\n<Y>\n\nY\n\n<U0059>\n\nLATIN CAPITAL LETTER Y\n\n<Z>\n\nZ\n\n<U005A>\n\nLATIN CAPITAL LETTER Z\n\n<left-square-bracket>\n\n[\n\n<U005B>\n\nLEFT SQUARE BRACKET\n\n<backslash>, <reverse-solidus>\n\n\\\n\n<U005C>\n\nREVERSE SOLIDUS\n\n<right-square-bracket>\n\n]\n\n<U005D>\n\nRIGHT SQUARE BRACKET\n\n<circumflex-accent>, <circumflex>\n\n^\n\n<U005E>\n\nCIRCUMFLEX ACCENT\n\n<low-line>, <underscore>\n\n_\n\n<U005F>\n\nLOW LINE\n\n<grave-accent>\n\n`\n\n<U0060>\n\nGRAVE ACCENT\n\n<a>\n\na\n\n<U0061>\n\nLATIN SMALL LETTER A\n\n<b>\n\nb\n\n<U0062>\n\nLATIN SMALL LETTER B\n\n<c>\n\nc\n\n<U0063>\n\nLATIN SMALL LETTER C\n\n<d>\n\nd\n\n<U0064>\n\nLATIN SMALL LETTER D\n\n<e>\n\ne\n\n<U0065>\n\nLATIN SMALL LETTER E\n\n<f>\n\nf\n\n<U0066>\n\nLATIN SMALL LETTER F\n\n<g>\n\ng\n\n<U0067>\n\nLATIN SMALL LETTER G\n\n<h>\n\nh\n\n<U0068>\n\nLATIN SMALL LETTER H\n\n<i>\n\ni\n\n<U0069>\n\nLATIN SMALL LETTER I\n\n<j>\n\nj\n\n<U006A>\n\nLATIN SMALL LETTER J\n\n<k>\n\nk\n\n<U006B>\n\nLATIN SMALL LETTER K\n\n<l>\n\nl\n\n<U006C>\n\nLATIN SMALL LETTER L\n\n<m>\n\nm\n\n<U006D>\n\nLATIN SMALL LETTER M\n\n<n>\n\nn\n\n<U006E>\n\nLATIN SMALL LETTER N\n\n<o>\n\no\n\n<U006F>\n\nLATIN SMALL LETTER O\n\n<p>\n\np\n\n<U0070>\n\nLATIN SMALL LETTER P\n\n<q>\n\nq\n\n<U0071>\n\nLATIN SMALL LETTER Q\n\n<r>\n\nr\n\n<U0072>\n\nLATIN SMALL LETTER R\n\n<s>\n\ns\n\n<U0073>\n\nLATIN SMALL LETTER S\n\n<t>\n\nt\n\n<U0074>\n\nLATIN SMALL LETTER T\n\n<u>\n\nu\n\n<U0075>\n\nLATIN SMALL LETTER U\n\n<v>\n\nv\n\n<U0076>\n\nLATIN SMALL LETTER V\n\n<w>\n\nw\n\n<U0077>\n\nLATIN SMALL LETTER W\n\n<x>\n\nx\n\n<U0078>\n\nLATIN SMALL LETTER X\n\n<y>\n\ny\n\n<U0079>\n\nLATIN SMALL LETTER Y\n\n<z>\n\nz\n\n<U007A>\n\nLATIN SMALL LETTER Z\n\n<left-brace>, <left-curly-bracket>\n\n{\n\n<U007B>\n\nLEFT CURLY BRACKET\n\n<vertical-line>\n\n|\n\n<U007C>\n\nVERTICAL LINE\n\n<right-brace>, <right-curly-bracket>\n\n}\n\n<U007D>\n\nRIGHT CURLY BRACKET\n\n<tilde>\n\n\n\n<U007E>\n\nTILDE\n\nPOSIX.1-2017 uses character names other than the above, but only in an informative way; for example, in examples to illustrate the use of characters beyond the portable character set with the facilities of POSIX.1-2017.\n\nPortable Character Set defines the characters in the portable character set and the corresponding symbolic character names used to identify each character in a character set description file. Characters defined in Non-Portable Control Characters may also be used in character set description files.\n\nPOSIX.1-2017 places only the following requirements on the encoded values of the characters in the portable character set:\n\nIf the encoded values associated with each member of the portable character set are not invariant across all locales supported by the implementation, if an application uses any pair of locales where the character encodings differ, or accesses data from an application using a locale which has different encodings from the locales used by the application, the results are unspecified.\n\nThe encoded values associated with the digits 0 to 9 shall be such that the value of each character after 0 shall be one greater than the value of the previous character.\n\nA null character, NUL, which has all bits set to zero, shall be in the set of characters.\n\nThe encoded values associated with <period>, <slash>, <newline>, and <carriage-return> shall be invariant across all locales supported by the implementation.\n\nThe encoded values associated with the members of the portable character set are each represented in a single byte. Moreover, if the value is stored in an object of C-language type char, it is guaranteed to be positive (except the NUL, which is always zero).\n\nConforming implementations shall support certain character and character set attributes, as defined in POSIX Locale.\n\n6.2 Character Encoding\n\nThe POSIX locale shall contain 256 single-byte characters including the characters in Portable Character Set and Non-Portable Control Characters, which have the properties listed in LC_CTYPE. It is unspecified whether characters not listed in those two tables are classified as punct or cntrl, or neither. Other locales shall contain the characters in Portable Character Set and may contain any or all of the control characters identified in Non-Portable Control Characters; the presence, meaning, and representation of any additional characters are locale-specific.\n\nIn locales other than the POSIX locale, a character may have a state-dependent encoding. There are two types of these encodings:\n\nA single-shift encoding (where each character not in the initial shift state is preceded by a shift code) can be defined if each shift-code and character sequence is considered a multi-byte character. This is done using the concatenated-constant format in a character set description file, as described in Character Set Description File. If the implementation supports a character encoding of this type, all of the standard utilities in the Shell and Utilities volume of POSIX.1-2017 shall support it. Use of a single-shift encoding with any of the functions in the System Interfaces volume of POSIX.1-2017 that do not specifically mention the effects of state-dependent encoding is implementation-defined.\n\nA locking-shift encoding (where the state of the character is determined by a shift code that may affect more than the single character following it) cannot be defined with the current character set description file format. Use of a locking-shift encoding with any of the standard utilities in the Shell and Utilities volume of POSIX.1-2017 or with any of the functions in the System Interfaces volume of POSIX.1-2017 that do not specifically mention the effects of state-dependent encoding is implementation-defined.\n\nWhile in the initial shift state, all characters in the portable character set shall retain their usual interpretation and shall not alter the shift state. The interpretation for subsequent bytes in the sequence shall be a function of the current shift state. A byte with all bits zero shall be interpreted as the null character independent of shift state. Such a byte shall not occur as part of any other character. Likewise, the byte values used to encode <period>, <slash>, <newline>, and <carriage-return> shall not occur as part of any other character in any locale.\n\nThe maximum allowable number of bytes in a character in the current locale shall be indicated by {MB_CUR_MAX}, defined in the <stdlib.h> header and by the <mb_cur_max> value in a character set description file; see Character Set Description File. The implementation's maximum number of bytes in a character shall be defined by the C-language macro {MB_LEN_MAX}.\n\n6.3 C Language Wide-Character Codes\n\nIn the shell, the standard utilities are written so that the encodings of characters are described by the locale's LC_CTYPE definition (see LC_CTYPE) and there is no differentiation between characters consisting of single octets (8-bit bytes) or multiple bytes. However, in the C language, a differentiation is made. To ease the handling of variable length characters, the C language has introduced the concept of wide-character codes.\n\nAll wide-character codes in a given process consist of an equal number of bits. This is in contrast to characters, which can consist of a variable number of bytes. The byte or byte sequence that represents a character can also be represented as a wide-character code. Wide-character codes thus provide a uniform size for manipulating text data. A wide-character code having all bits zero is the null wide-character code (see Null Wide-Character Code ), and terminates wide-character strings (see Wide-Character Code (C Language)). The wide-character value for each member of the portable character set shall equal its value when used as the lone character in an integer character constant. Wide-character codes for other characters are locale and implementation-defined. State shift bytes shall not have a wide-character code representation. POSIX.1-2017 provides no means of defining a wide-character codeset.\n\n6.4 Character Set Description File\n\nImplementations shall provide a character set description file for at least one coded character set supported by the implementation. These files are referred to elsewhere in POSIX.1-2017 as charmap files. It is implementation-defined whether or not users or applications can provide additional character set description files.\n\nPOSIX.1-2017 does not require that multiple character sets or codesets be supported. Although multiple charmap files are supported, it is the responsibility of the implementation to provide the file or files; if only one is provided, only that one is accessible using the localedef utility's -f option.\n\nEach character set description file, except those that use the ISO/IEC 10646-1:2000 standard position values as the encoding values, shall define characteristics for the coded character set and the encoding for the characters specified in Portable Character Set, and may define encoding for additional characters supported by the implementation. Other information about the coded character set may also be in the file. Coded character set character values shall be defined using symbolic character names followed by character encoding values.\n\nEach symbolic name specified in Portable Character Set shall be included in the file. Each character in Portable Character Set (each row in the table) shall be mapped to a unique coding value. For each character in Non-Portable Control Characters that exists in the character set described by the file, the character's symbolic name(s) from Non-Portable Control Characters and the character's single-byte encoding value shall be included in the file.\n\nTable: Non-Portable Control Characters\n\nSymbolic Name(s)\n\nUCS\n\nDescription\n\n<SOH>\n\n<U0001>\n\nSTART OF HEADING\n\n<STX>\n\n<U0002>\n\nSTART OF TEXT\n\n<ETX>\n\n<U0003>\n\nEND OF TEXT\n\n<EOT>\n\n<U0004>\n\nEND OF TRANSMISSION\n\n<ENQ>\n\n<U0005>\n\nENQUIRY\n\n<ACK>\n\n<U0006>\n\nACKNOWLEDGE\n\n<SO>\n\n<U000E>\n\nSHIFT OUT\n\n<SI>\n\n<U000F>\n\nSHIFT IN\n\n<DLE>\n\n<U0010>\n\nDATA LINK ESCAPE\n\n<DC1>\n\n<U0011>\n\nDEVICE CONTROL ONE\n\n<DC2>\n\n<U0012>\n\nDEVICE CONTROL TWO\n\n<DC3>\n\n<U0013>\n\nDEVICE CONTROL THREE\n\n<DC4>\n\n<U0014>\n\nDEVICE CONTROL FOUR\n\n<NAK>\n\n<U0015>\n\nNEGATIVE ACKNOWLEDGE\n\n<SYN>\n\n<U0016>\n\nSYNCHRONOUS IDLE\n\n<ETB>\n\n<U0017>\n\nEND OF TRANSMISSION BLOCK\n\n<CAN>\n\n<U0018>\n\nCANCEL\n\n<EM>\n\n<U0019>\n\nEND OF MEDIUM\n\n<SUB>\n\n<U001A>\n\nSUBSTITUTE\n\n<ESC>\n\n<U001B>\n\nESCAPE\n\n<IS4>, <FS>\n\n<U001C>\n\nINFORMATION SEPARATOR FOUR\n\n<IS3>, <GS>\n\n<U001D>\n\nINFORMATION SEPARATOR THREE\n\n<IS2>, <RS>\n\n<U001E>\n\nINFORMATION SEPARATOR TWO\n\n<IS1>, <US>\n\n<U001F>\n\nINFORMATION SEPARATOR ONE\n\n<DEL>\n\n<U007F>\n\nDELETE\n\nThe following declarations can precede the character definitions. Each shall consist of the symbol shown in the following list, starting in column 1, including the surrounding brackets, followed by one or more <blank> characters, followed by the value to be assigned to the symbol.\n\n<code_set_name>\n\nThe name of the coded character set for which the character set description file is defined. The characters of the name shall be taken from the set of characters with visible glyphs defined in Portable Character Set.\n\n<mb_cur_max>\n\nThe maximum number of bytes in a multi-byte character. This shall default to 1.\n\n<mb_cur_min>\n\nAn unsigned positive integer value that defines the minimum number of bytes in a character for the encoded character set. [XSI] On XSI-conformant systems, <mb_cur_min> shall always be 1.\n\n<escape_char>\n\nThe character used to indicate that the characters following shall be interpreted in a special way, as defined later in this section. This shall default to <backslash> ( '\\\\' ), which is the character used in all the following text and examples, unless otherwise noted.\n\n<comment_char>\n\nThe character that, when placed in column 1 of a charmap line, is used to indicate that the line shall be ignored. The default character shall be the <number-sign> ( '#' ).\n\nThe character set mapping definitions shall be all the lines immediately following an identifier line containing the string \"CHARMAP\" starting in column 1, and preceding a trailer line containing the string \"END CHARMAP\" starting in column 1. Empty lines and lines containing a <comment_char> in the first column shall be ignored. Each non-comment line of the character set mapping definition (that is, between the \"CHARMAP\" and \"END CHARMAP\" lines of the file) shall be in either of two forms:\n\n\"%s %s %s\\n\", <symbolic-name>, <encoding>, <comments>\n\nor:\n\n\"%s...%s %s %s\\n\", <symbolic-name>, <symbolic-name>, <encoding>, <comments>\n\nIn the first format, the line in the character set mapping definition shall define a single symbolic name and a corresponding encoding. A symbolic name is one or more characters from the set shown with visible glyphs in Portable Character Set, enclosed between angle brackets. A character following an escape character is interpreted as itself; for example, the sequence \"<\\\\\\>>\" represents the symbolic name \"\\>\" enclosed between angle brackets.\n\nIn the second format, the line in the character set mapping definition shall define a range of one or more symbolic names. In this form, the symbolic names shall consist of zero or more non-numeric characters from the set shown with visible glyphs in Portable Character Set, followed by an integer formed by one or more decimal digits. Both integers shall contain the same number of digits. The characters preceding the integer shall be identical in the two symbolic names, and the integer formed by the digits in the second symbolic name shall be equal to or greater than the integer formed by the digits in the first name. This shall be interpreted as a series of symbolic names formed from the common part and each of the integers between the first and the second integer, inclusive. As an example, <j0101>...<j0104> is interpreted as the symbolic names <j0101>, <j0102>, <j0103>, and <j0104>, in that order.\n\nA character set mapping definition line shall exist for all symbolic names specified in Portable Character Set, and shall define the coded character value that corresponds to the character indicated in the table, or the coded character value that corresponds to the control character symbolic name. If the control characters commonly associated with the symbolic names in Non-Portable Control Characters are supported by the implementation, the symbolic name and the corresponding encoding value shall be included in the file. Additional unique symbolic names may be included. A coded character value can be represented by more than one symbolic name.\n\nThe encoding part is expressed as one (for single-byte character values) or more concatenated decimal, octal, or hexadecimal constants in the following formats:\n\n\"%cd%u\", <escape_char>, <decimal byte value> \"%cx%x\", <escape_char>, <hexadecimal byte value> \"%c%o\", <escape_char>, <octal byte value>\n\nDecimal constants shall be represented by two or three decimal digits, preceded by the escape character and the lowercase letter 'd'; for example, \"\\d05\", \"\\d97\", or \"\\d143\". Hexadecimal constants shall be represented by two hexadecimal digits, preceded by the escape character and the lowercase letter 'x'; for example, \"\\x05\", \"\\x61\", or \"\\x8f\". Octal constants shall be represented by two or three octal digits, preceded by the escape character; for example, \"\\05\", \"\\141\", or \"\\217\". In a portable charmap file, each constant represents an 8-bit byte. When constants are concatenated for multi-byte character values, they shall be of the same type, and interpreted in sequence from from first to last with the first byte of the multi-byte character specified by the first byte in the sequence. The manner in which these constants are represented in the character stored in the system is implementation-defined. (This notation was chosen for reasons of portability. There is no requirement that the internal representation in the computer memory be in this same order.) Omitting bytes from a multi-byte character definition produces undefined results.\n\nIn lines defining ranges of symbolic names, the encoded value shall be the value for the first symbolic name in the range (the symbolic name preceding the ellipsis). Subsequent symbolic names defined by the range shall have encoding values in increasing order. Bytes shall be treated as unsigned octets, and carry shall be propagated between the bytes as necessary to represent the range. However, because this causes a null byte in the second or subsequent bytes of a character, such a declaration should not be specified. For example, the line:\n\n<j0101>...<j0104> \\d129\\d254\n\nis interpreted as:\n\n<j0101> \\d129\\d254 <j0102> \\d129\\d255 <j0103> \\d130\\d00 <j0104> \\d130\\d01\n\nThe expanded declaration of the symbol <j0103> in the above example is an invalid specification, because it contains a null byte in the second byte of a character.\n\nThe comment is optional.\n\nPOSIX.1-2017 provides no means of defining a wide-character codeset.\n\nThe following declarations can follow the character set mapping definitions (after the \"END CHARMAP\" statement). Each shall consist of the keyword shown in the following list, starting in column 1, followed by the value(s) to be associated to the keyword, as defined below.\n\nWIDTH\n\nA non-negative integer value defining the column width (see Column Position) for the printable characters in the coded character set specified in Portable Character Set and Non-Portable Control Characters. Coded character set character values shall be defined using symbolic character names followed by column width values. Defining a character with more than one WIDTH produces undefined results. The END WIDTH keyword shall be used to terminate the WIDTH definitions. Specifying the width of a non-printable character in a WIDTH declaration produces undefined results.\n\nWIDTH_DEFAULT\n\nA non-negative integer value defining the default column width for any printable character not listed by one of the WIDTH keywords. If no WIDTH_DEFAULT keyword is included in the charmap, the default character width shall be 1.\n\nThe following sections are informative.\n\nExample\n\nAfter the \"END CHARMAP\" statement, a syntax for a width definition would be:\n\nWIDTH <A> 1 <B> 1 <C>...<Z> 1 ... <foo1>...<foon> 2 ... END WIDTH\n\nIn this example, the numerical code point values represented by the symbols <A> and <B> are assigned a width of 1. The code point values <C> to <Z> inclusive (<C>, <D>, <E>, and so on) are also assigned a width of 1. Using <A>... <Z> would have required fewer lines, but the alternative was shown to demonstrate flexibility. The keyword WIDTH_DEFAULT could have been added as appropriate.\n\nEnd of informative text.\n\n6.4.1 State-Dependent Character Encodings\n\nThis section addresses the use of state-dependent character encodings (that is, those in which the encoding of a character is dependent on one or more shift codes that may precede it).\n\nA single-shift encoding (where each character not in the initial shift state is preceded by a shift code) can be defined in the charmap format if each shift-code/character sequence is considered a multi-byte character, defined using the concatenated-constant format described in Character Set Description File. If the implementation supports a character encoding of this type, all of the standard utilities shall support it. A locking-shift encoding (where the state of the character is determined by a shift code that may affect more than the single character following it) could be defined with an extension to the charmap format described in Character Set Description File.\n\nIf the implementation supports a character encoding of this type, any of the standard utilities that describe character (versus byte) or text-file manipulation shall have the following characteristics:\n\nThe utility shall process the statefully encoded data as a concatenation of state-independent characters. The presence of redundant locking shifts shall not affect the comparison of two statefully encoded strings.\n\nA utility that divides, truncates, or extracts substrings from statefully encoded data shall produce output that contains locking shifts at the beginning or end of the resulting data, if appropriate, to retain correct state information.\n\nreturn to top of page"
    }
}