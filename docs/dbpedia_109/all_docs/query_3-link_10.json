{
    "id": "dbpedia_109_3",
    "rank": 10,
    "data": {
        "url": "https://learn.microsoft.com/en-us/sql/relational-databases/import-export/use-character-format-to-import-or-export-data-sql-server%3Fview%3Dsql-server-ver16",
        "read_more_link": "",
        "language": "en",
        "title": "Use character format to import & export data - SQL Server",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/sql/includes/media/yes-icon.svg?view=sql-server-ver16",
            "https://learn.microsoft.com/en-us/sql/includes/media/yes-icon.svg?view=sql-server-ver16",
            "https://learn.microsoft.com/en-us/sql/includes/media/yes-icon.svg?view=sql-server-ver16",
            "https://learn.microsoft.com/en-us/sql/includes/media/yes-icon.svg?view=sql-server-ver16",
            "https://learn.microsoft.com/en-us/sql/includes/media/yes-icon.svg?view=sql-server-ver16"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-04-04T00:00:00+00:00",
        "summary": "",
        "meta_description": "Character format uses character data format for all columns. This is useful working with other programs or copying to an instance from another database vendor.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/sql/relational-databases/import-export/use-character-format-to-import-or-export-data-sql-server?view=sql-server-ver16",
        "text": "Use character format to import or export data (SQL Server)\n\nApplies to: SQL Server Azure SQL Database Azure SQL Managed Instance Azure Synapse Analytics Analytics Platform System (PDW)\n\nCharacter format is recommended when you bulk export data to a text file that is to be used in another program or when you bulk import data from a text file that is generated by another program.\n\nCharacter format uses the character data format for all columns. Storing information in character format is useful when the data is used with another program, such as a spreadsheet, or when the data needs to be copied into an instance of SQL Server from another database vendor such as Oracle.\n\nIn this Topic: Considerations for Using Character Format Command Options for Character Format Example Test Conditions\n\nâââSample Table\n\nâââSample Non-XML Format File\n\nExamples\n\nâââUsing bcp and Character Format to Export Data\n\nâââUsing bcp and Character Format to Import Data without a Format File\n\nâââUsing bcp and Character Format to Import Data with a Non-XML Format File\n\nâââUsing BULK INSERT and Character Format without a Format File\n\nâââUsing BULK INSERT and Character Format with a Non-XML Format File\n\nâââUsing OPENROWSET and Character Format with a Non-XML Format File Related Tasks\n\nConsiderations for Using Character Format\n\nWhen using character format, consider the following:\n\nBy default, the bcp utility separates the character-data fields with the tab character and terminates the records with the newline character. For information about how to specify alternative terminators, see Specify Field and Row Terminators (SQL Server).\n\nBy default, before the bulk export or import of character-mode data, the following conversions are performed:\n\nDirection of bulk operation Conversion Export Converts data to character representation. If explicitly requested, the data is converted to the requested code page for character columns. If no code page is specified, the character data is converted by using the OEM code page of the client computer. Import Converts character data to native representation, when necessary, and translates the character data from the client's code page to the code page of the target column(s).\n\nTo prevent loss of extended characters during conversion, either use Unicode character format or specify a code page.\n\nAny sql_variant data that is stored in a character-format file is stored without metadata. Each data value is converted to char format, according to the rules of implicit data conversion. When imported into a sql_variant column, the data is imported as char. When imported into a column with a data type other than sql_variant, the data is converted from char by using implicit conversion. For more information about data conversion, see Data Type Conversion (Database Engine).\n\nThe bcp utility exports money values as character-format data files with four digits after the decimal point and without any digit-grouping symbols such as comma separators. For example, a money column that contains the value 1,234,567.123456 is bulk exported to a data file as the character string 1234567.1235.\n\nCommand Options for Character Format\n\nYou can import character format data into a table using bcp, BULK INSERT or INSERT ... SELECT * FROM OPENROWSET(BULK...). For a bcp command or BULK INSERT statement, you can specify the data format in the statement. For an INSERT ... SELECT * FROM OPENROWSET(BULK...) statement, you must specify the data format in a format file.\n\nCharacter format is supported by the following command options:\n\nCommand Option Description bcp -c Causes the bcp utility to use character data.* BULK INSERT DATAFILETYPE ='char' Use character format when bulk importing data. OPENROWSET N/A Must use a format file\n\n*To load character (-c) data to a format compatible with earlier versions of SQL Server clients, use the -V switch. For more information, see Import Native and Character Format Data from Earlier Versions of SQL Server.\n\nExample Test Conditions\n\nThe examples in this topic are based on the table, and format file defined below.\n\nSample Table\n\nThe script below creates a test database, a table named myChar and populates the table with some initial values. Execute the following Transact-SQL in Microsoft SQL Server Management Studio (SSMS):\n\nCREATE DATABASE TestDatabase; GO USE TestDatabase; CREATE TABLE dbo.myChar ( PersonID smallint NOT NULL, FirstName varchar(25) NOT NULL, LastName varchar(30) NOT NULL, BirthDate date, AnnualSalary money ); -- Populate table INSERT TestDatabase.dbo.myChar VALUES (1, 'Anthony', 'Grosse', '1980-02-23', 65000.00), (2, 'Alica', 'Fatnowna', '1963-11-14', 45000.00), (3, 'Stella', 'Rossenhain', '1992-03-02', 120000.00); -- Review Data SELECT * FROM TestDatabase.dbo.myChar;\n\nSample Non-XML Format File\n\nSQL Server support two types of format file: non-XML format and XML format. The non-XML format is the original format that is supported by earlier versions of SQL Server. Please review Non-XML Format Files (SQL Server) for detailed information. The following command will use the bcp utility to generate a non-xml format file, myChar.fmt, based on the schema of myChar. To use a bcp command to create a format file, specify the format argument and use nul instead of a data-file path. The format option also requires the -f option. In addition, for this example, the qualifier c is used to specify character data, and T is used to specify a trusted connection using integrated security. At a command prompt, enter the following command:\n\nbcp TestDatabase.dbo.myChar format nul -f D:\\BCP\\myChar.fmt -T -c REM Review file Notepad D:\\BCP\\myChar.fmt\n\nExamples\n\nThe examples below use the database, and format files created above.\n\nUsing bcp and Character Format to Export Data\n\n-c switch and OUT command. Note: the data file created in this example will be used in all subsequent examples. At a command prompt, enter the following command:\n\nbcp TestDatabase.dbo.myChar OUT D:\\BCP\\myChar.bcp -T -c REM Review results NOTEPAD D:\\BCP\\myChar.bcp\n\nUsing bcp and Character Format to Import Data without a Format File\n\n-c switch and IN command. At a command prompt, enter the following command:\n\nREM Truncate table (for testing) SQLCMD -Q \"TRUNCATE TABLE TestDatabase.dbo.myChar;\" REM Import data bcp TestDatabase.dbo.myChar IN D:\\BCP\\myChar.bcp -T -c REM Review results SQLCMD -Q \"SELECT * FROM TestDatabase.dbo.myChar;\"\n\nUsing bcp and Character Format to Import Data with a Non-XML Format File\n\n-c and -f switches and IN command. At a command prompt, enter the following command:\n\nREM Truncate table (for testing) SQLCMD -Q \"TRUNCATE TABLE TestDatabase.dbo.myChar;\" REM Import data bcp TestDatabase.dbo.myChar IN D:\\BCP\\myChar.bcp -f D:\\BCP\\myChar.fmt -T REM Review results SQLCMD -Q \"SELECT * FROM TestDatabase.dbo.myChar;\"\n\nUsing BULK INSERT and Character Format without a Format File\n\nDATAFILETYPE argument. Execute the following Transact-SQL in Microsoft SQL Server Management Studio (SSMS):\n\nTRUNCATE TABLE TestDatabase.dbo.myChar; -- for testing BULK INSERT TestDatabase.dbo.myChar FROM 'D:\\BCP\\myChar.bcp' WITH ( DATAFILETYPE = 'Char' ); -- review results SELECT * FROM TestDatabase.dbo.myChar;\n\nUsing BULK INSERT and Character Format with a Non-XML Format File\n\nFORMATFILE argument. Execute the following Transact-SQL in Microsoft SQL Server Management Studio (SSMS):\n\nTRUNCATE TABLE TestDatabase.dbo.myChar; -- for testing BULK INSERT TestDatabase.dbo.myChar FROM 'D:\\BCP\\myChar.bcp' WITH ( FORMATFILE = 'D:\\BCP\\myChar.fmt' ); -- review results SELECT * FROM TestDatabase.dbo.myChar;\n\nUsing OPENROWSET and Character Format with a Non-XML Format File\n\nFORMATFILE argument. Execute the following Transact-SQL in Microsoft SQL Server Management Studio (SSMS):\n\nTRUNCATE TABLE TestDatabase.dbo.myChar; -- for testing INSERT INTO TestDatabase.dbo.myChar SELECT * FROM OPENROWSET ( BULK 'D:\\BCP\\myChar.bcp', FORMATFILE = 'D:\\BCP\\myChar.fmt' ) AS t1; -- review results SELECT * FROM TestDatabase.dbo.myChar;\n\nRelated Tasks\n\nTo use data formats for bulk import or bulk export\n\nImport Native and Character Format Data from Earlier Versions of SQL Server\n\nUse Native Format to Import or Export Data (SQL Server)\n\nUse Unicode Character Format to Import or Export Data (SQL Server)\n\nUse Unicode Native Format to Import or Export Data (SQL Server)\n\nSee Also"
    }
}