{
    "id": "dbpedia_109_1",
    "rank": 9,
    "data": {
        "url": "https://stackoverflow.com/questions/1856785/characters-allowed-in-a-url",
        "read_more_link": "",
        "language": "en",
        "title": "Characters allowed in a URL",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/e86b43c4d142d65833634aabab593250?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/b75136316e93a66545dd346297fad09e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/LaYg8.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/559f9b4a76982a9c3e496e2e7686d4b1?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/8a9d0c522461ae0dd46e9f99fbb45724?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Q81vS.jpg?s=64",
            "https://www.gravatar.com/avatar/81cf776adb922e444a0a771a8a4724e5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/af668442ab8ce6408bd051b350d89c01?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/zOCy7yx5.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/9061706d2661cf0fa9f2df0eee56cf9b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/N5nuc.jpg?s=64",
            "https://i.sstatic.net/oixLF.jpg?s=64",
            "https://i.sstatic.net/hXouU.png",
            "https://i.sstatic.net/1V5SP.jpg?s=64",
            "https://stackoverflow.com/posts/1856785/ivc/642f?prg=eab32bd0-5e84-44ef-afd1-cac503efe8ff",
            "https://stackoverflow.com/js-false.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-12-06T22:10:17",
        "summary": "",
        "meta_description": "Does anyone know the full list of characters that can be used within a GET without being encoded? At the moment I am using A-Z a-z and 0-9... but I am looking to find out the full list.\n\nI am also",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/1856785/characters-allowed-in-a-url",
        "text": "I tested it by requesting my website (apache) with all available chars on my german keyboard as URL parameter:\n\nhttp://example.com/?^1234567890ß´qwertzuiopü+asdfghjklöä#<yxcvbnm,.-°!\"§$%&/()=? `QWERTZUIOPÜ*ASDFGHJKLÖÄ\\'>YXCVBNM;:_²³{[]}\\|µ@€~\n\nThese were not encoded:\n\n^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,.-!/()=?`*;:_{}[]\\|~\n\nNot encoded after urlencode():\n\n0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_\n\nNot encoded after rawurlencode():\n\n0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_~\n\nNote: Before PHP 5.3.0 rawurlencode() encoded ~ because of RFC 1738. But this was replaced by RFC 3986 so its safe to use, now. But I do not understand why for example {} are encoded through rawurlencode() because they are not mentioned in RFC 3986.\n\nAn additional test I made was regarding auto-linking in mail texts. I tested Mozilla Thunderbird, aol.com, outlook.com, gmail.com, gmx.de and yahoo.de and they fully linked URLs containing these chars:\n\n0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_~+#,%&=*;:@\n\nOf course the ? was linked, too, but only if it was used once.\n\nSome people would now suggest to use only the rawurlencode() chars, but did you ever hear that someone had problems to open these websites?\n\nAsterisk\n\nhttp://wayback.archive.org/web/*/http://google.com\n\nColon\n\nhttps://en.wikipedia.org/wiki/Wikipedia:About\n\nPlus\n\nhttps://plus.google.com/+google\n\nAt sign, Colon, Comma and Exclamation mark\n\nhttps://www.google.com/maps/place/USA/@36.2218457,...\n\nBecause of that these chars should be usable unencoded without problems. Of course you should not use &; because of encoding sequences like &amp;. The same reason is valid for % as it used to encode chars in general. And = as it assigns a value to a parameter name.\n\nFinally I would say its ok to use these unencoded:\n\n0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_~!+,*:@\n\nBut if you expect randomly generated URLs you should not use punctuation marks like .!, because some mail apps will not auto-link them:\n\nhttp://example.com/?foo=bar! < last char not linked\n\nThis answer discusses characters may be included inside a URL fragment part without being escaped. I'm posting a separate answer since this part is slightly different than (and can be used in conjunction with) other excellent answers here.\n\nThe fragment part is not sent to the server and it is the characters that go after # in this example:\n\nhttps://example.com/#STUFF-HERE\n\nSpecification\n\nThe relevant specifications in RFC 3986 are:\n\nfragment = *( pchar / \"/\" / \"?\" ) pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\" unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\nThis also references rules in RFC 2234\n\nALPHA = %x41-5A / %x61-7A ; A-Z / a-z DIGIT = %x30-39 ; 0-9\n\nResult\n\nSo the full list, excluding escapes (pct-encoded) are:\n\nA-Z a-z 0-9 - . _ ~ ! $ & ' ( ) * + , ; = : @ / ?\n\nFor your convenience here is a PCRE expression that matches a valid, unescaped fragment:\n\n/^[A-Za-z0-9\\-._~!$&'()*+,;=:@\\/?]*$/\n\nEncoding\n\nCounting this up, there are:\n\n26 + 26 + 10 + 19 = 81 code points\n\nYou could use base 81 to efficiently encode data here."
    }
}