{
    "id": "dbpedia_109_3",
    "rank": 16,
    "data": {
        "url": "https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html",
        "read_more_link": "",
        "language": "en",
        "title": "Character (Java Platform SE 8 )",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "java.lang.Character class"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-06-05T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "The Character class wraps a value of the primitive type char in an object. An object of class Character contains a single field whose type is char.\n\nIn addition, this class provides a large number of static methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa.\n\nUnicode Conformance\n\nThe fields and methods of class Character are defined in terms of character information from the Unicode Standard, specifically the UnicodeData file that is part of the Unicode Character Database. This file specifies properties including name and category for every assigned Unicode code point or character range. The file is available from the Unicode Consortium at http://www.unicode.org.\n\nThe Java SE 8 Platform uses character information from version 6.2 of the Unicode Standard, with three extensions. First, in recognition of the fact that new currencies appear frequently, the Java SE 8 Platform allows an implementation of class Character to use the Currency Symbols block from version 10.0 of the Unicode Standard. Second, the Java SE 8 Platform allows an implementation of class Character to use the code points in the range of U+9FCD to U+9FEF from version 11.0 of the Unicode Standard and in the CJK Unified Ideographs Extension E block from version 8.0 of the Unicode Standard, in order for the class to allow the \"Implementation Level 2\" of the Chinese GB18030-2022 standard. Third, the Java SE 8 Platform allows an implementation of class Character to use the Japanese Era code point, U+32FF, from the Unicode Standard version 12.1. Consequently, the behavior of fields and methods of class Character may vary across implementations of the Java SE 8 Platform when processing the aforementioned code points ( outside of version 6.2 ), except for the following methods that define Java identifiers: isJavaIdentifierStart(int), isJavaIdentifierStart(char), isJavaIdentifierPart(int), and isJavaIdentifierPart(char). Code points in Java identifiers must be drawn from version 6.2 of the Unicode Standard.\n\nUnicode Character Representations\n\nThe char data type (and therefore the value that a Character object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal code points is now U+0000 to U+10FFFF, known as Unicode scalar value. (Refer to the definition of the U+n notation in the Unicode Standard.)\n\nThe set of characters from U+0000 to U+FFFF is sometimes referred to as the Basic Multilingual Plane (BMP). Characters whose code points are greater than U+FFFF are called supplementary characters. The Java platform uses the UTF-16 representation in char arrays and in the String and StringBuffer classes. In this representation, supplementary characters are represented as a pair of char values, the first from the high-surrogates range, (\\uD800-\\uDBFF), the second from the low-surrogates range (\\uDC00-\\uDFFF).\n\nA char value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding. An int value represents all Unicode code points, including supplementary code points. The lower (least significant) 21 bits of int are used to represent Unicode code points and the upper (most significant) 11 bits must be zero. Unless otherwise specified, the behavior with respect to supplementary characters and surrogate char values is as follows:\n\nThe methods that only accept a char value cannot support supplementary characters. They treat char values from the surrogate ranges as undefined characters. For example, Character.isLetter('\\uD840') returns false, even though this specific value if followed by any low-surrogate value in a string would represent a letter.\n\nThe methods that accept an int value support all Unicode characters, including supplementary characters. For example, Character.isLetter(0x2F81A) returns true because the code point value represents a letter (a CJK ideograph)."
    }
}