{
    "id": "dbpedia_109_2",
    "rank": 65,
    "data": {
        "url": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/",
        "read_more_link": "",
        "language": "en",
        "title": "Kotlin Programming Language",
        "top_image": "https://kotlinlang.org/assets/images/open-graph/general.png",
        "meta_img": "https://kotlinlang.org/assets/images/open-graph/general.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.svg?&v=8607ff59d5296c7642ecd72bd3daa79b",
        "meta_site_name": "Kotlin",
        "canonical_link": "https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/index.html",
        "text": "String\n\nThe String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are implemented as instances of this class.\n\nConstructors\n\n<init>\n\nThe String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are implemented as instances of this class.\n\n<init>()\n\nProperties\n\nlength\n\nReturns the length of this character sequence.\n\nval length: Int\n\nFunctions\n\ncompareTo\n\nCompares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other.\n\nfun compareTo(other:Â String): Int\n\nequals\n\nIndicates whether some other object is \"equal to\" this one. Implementations must fulfil the following requirements:\n\nfun equals(other:Â Any?): Boolean\n\nget\n\nReturns the character of this string at the specified index.\n\nfun get(index:Â Int): Char\n\nhashCode\n\nReturns a hash code value for the object. The general contract of hashCode is:\n\nfun hashCode(): Int\n\nplus\n\nReturns a string obtained by concatenating this string with the string representation of the given other object.\n\noperator fun plus(other:Â Any?): String\n\nsubSequence\n\nReturns a new character sequence that is a subsequence of this character sequence, starting at the specified startIndex and ending right before the specified endIndex.\n\nfun subSequence(startIndex:Â Int, endIndex:Â Int): CharSequence\n\ntoString\n\nReturns a string representation of the object.\n\nfun toString(): String\n\nExtension Properties\n\ncstr\n\nval String.cstr: CValues<ByteVar>\n\nindices\n\nReturns the range of valid character indices for this char sequence.\n\nval CharSequence.indices: IntRange\n\nlastIndex\n\nReturns the index of the last character in the char sequence or -1 if it is empty.\n\nval CharSequence.lastIndex: Int\n\nutf16\n\nval String.utf16: CValues<UShortVar>\n\nutf32\n\nval String.utf32: CValues<IntVar>\n\nutf8\n\nval String.utf8: CValues<ByteVar>\n\nwcstr\n\nval String.wcstr: CValues<UShortVar>\n\nExtension Functions\n\nall\n\nReturns true if all characters match the given predicate.\n\nfun CharSequence.all(predicate:Â (Char)Â ->Â Boolean): Boolean\n\nany\n\nReturns true if char sequence has at least one character.\n\nfun CharSequence.any(): Boolean\n\nReturns true if at least one character matches the given predicate.\n\nfun CharSequence.any(predicate:Â (Char)Â ->Â Boolean): Boolean\n\nasIterable\n\nCreates an Iterable instance that wraps the original char sequence returning its characters when being iterated.\n\nfun CharSequence.asIterable(): Iterable<Char>\n\nasSequence\n\nCreates a Sequence instance that wraps the original char sequence returning its characters when being iterated.\n\nfun CharSequence.asSequence(): Sequence<Char>\n\nassociate\n\nReturns a Map containing key-value pairs provided by transform function applied to characters of the given char sequence.\n\nfun <K, V> CharSequence.associate(\n\nÂ Â Â Â transform:Â (Char)Â ->Â Pair<K,Â V>\n\n): Map<K,Â V>\n\nassociateBy\n\nReturns a Map containing the characters from the given char sequence indexed by the key returned from keySelector function applied to each character.\n\nfun <K> CharSequence.associateBy(\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K\n\n): Map<K,Â Char>\n\nReturns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to characters of the given char sequence.\n\nfun <K, V> CharSequence.associateBy(\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K,\n\nÂ Â Â Â valueTransform:Â (Char)Â ->Â V\n\n): Map<K,Â V>\n\nassociateByTo\n\nPopulates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each character of the given char sequence and value is the character itself.\n\nfun <K, MÂ :Â MutableMap<inÂ K,Â inÂ Char>> CharSequence.associateByTo(\n\nÂ Â Â Â destination:Â M,\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K\n\n): M\n\nPopulates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to characters of the given char sequence.\n\nfun <K, V, MÂ :Â MutableMap<inÂ K,Â inÂ V>> CharSequence.associateByTo(\n\nÂ Â Â Â destination:Â M,\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K,\n\nÂ Â Â Â valueTransform:Â (Char)Â ->Â V\n\n): M\n\nassociateTo\n\nPopulates and returns the destination mutable map with key-value pairs provided by transform function applied to each character of the given char sequence.\n\nfun <K, V, MÂ :Â MutableMap<inÂ K,Â inÂ V>> CharSequence.associateTo(\n\nÂ Â Â Â destination:Â M,\n\nÂ Â Â Â transform:Â (Char)Â ->Â Pair<K,Â V>\n\n): M\n\nassociateWith\n\nReturns a Map where keys are characters from the given char sequence and values are produced by the valueSelector function applied to each character.\n\nfun <V> CharSequence.associateWith(\n\nÂ Â Â Â valueSelector:Â (Char)Â ->Â V\n\n): Map<Char,Â V>\n\nassociateWithTo\n\nPopulates and returns the destination mutable map with key-value pairs for each character of the given char sequence, where key is the character itself and value is provided by the valueSelector function applied to that key.\n\nfun <V, MÂ :Â MutableMap<inÂ Char,Â inÂ V>> CharSequence.associateWithTo(\n\nÂ Â Â Â destination:Â M,\n\nÂ Â Â Â valueSelector:Â (Char)Â ->Â V\n\n): M\n\nbyteInputStream\n\nCreates a new byte input stream for the string.\n\nfun String.byteInputStream(\n\nÂ Â Â Â charset:Â CharsetÂ =Â Charsets.UTF_8\n\n): ByteArrayInputStream\n\ncapitalize\n\nReturns a copy of this string having its first letter titlecased using the rules of the specified locale, or the original string if it's empty or already starts with a title case letter.\n\nfun String.capitalize(locale:Â Locale): String\n\nchunked\n\nSplits this char sequence into a list of strings each not exceeding the given size.\n\nfun CharSequence.chunked(size:Â Int): List<String>\n\nSplits this char sequence into several char sequences each not exceeding the given size and applies the given transform function to an each.\n\nfun <R> CharSequence.chunked(\n\nÂ Â Â Â size:Â Int,\n\nÂ Â Â Â transform:Â (CharSequence)Â ->Â R\n\n): List<R>\n\nchunkedSequence\n\nSplits this char sequence into a sequence of strings each not exceeding the given size.\n\nfun CharSequence.chunkedSequence(size:Â Int): Sequence<String>\n\nSplits this char sequence into several char sequences each not exceeding the given size and applies the given transform function to an each.\n\nfun <R> CharSequence.chunkedSequence(\n\nÂ Â Â Â size:Â Int,\n\nÂ Â Â Â transform:Â (CharSequence)Â ->Â R\n\n): Sequence<R>\n\ncodePointAt\n\nReturns the character (Unicode code point) at the specified index.\n\nfun String.codePointAt(index:Â Int): Int\n\ncodePointBefore\n\nReturns the character (Unicode code point) before the specified index.\n\nfun String.codePointBefore(index:Â Int): Int\n\ncodePointCount\n\nReturns the number of Unicode code points in the specified text range of this String.\n\nfun String.codePointCount(\n\nÂ Â Â Â beginIndex:Â Int,\n\nÂ Â Â Â endIndex:Â Int\n\n): Int\n\ncoerceAtLeast\n\nEnsures that this value is not less than the specified minimumValue.\n\nfun <TÂ :Â Comparable<T>> T.coerceAtLeast(minimumValue:Â T): T\n\ncoerceAtMost\n\nEnsures that this value is not greater than the specified maximumValue.\n\nfun <TÂ :Â Comparable<T>> T.coerceAtMost(maximumValue:Â T): T\n\ncoerceIn\n\nEnsures that this value lies in the specified range minimumValue..maximumValue.\n\nfun <TÂ :Â Comparable<T>> T.coerceIn(\n\nÂ Â Â Â minimumValue:Â T?,\n\nÂ Â Â Â maximumValue:Â T?\n\n): T\n\nEnsures that this value lies in the specified range.\n\nfun <TÂ :Â Comparable<T>> T.coerceIn(\n\nÂ Â Â Â range:Â ClosedFloatingPointRange<T>\n\n): T\n\nfun <TÂ :Â Comparable<T>> T.coerceIn(range:Â ClosedRange<T>): T\n\ncommonPrefixWith\n\nReturns the longest string prefix such that this char sequence and other char sequence both start with this prefix, taking care not to split surrogate pairs. If this and other have no common prefix, returns the empty string.\n\nfun CharSequence.commonPrefixWith(\n\nÂ Â Â Â other:Â CharSequence,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): String\n\ncommonSuffixWith\n\nReturns the longest string suffix such that this char sequence and other char sequence both end with this suffix, taking care not to split surrogate pairs. If this and other have no common suffix, returns the empty string.\n\nfun CharSequence.commonSuffixWith(\n\nÂ Â Â Â other:Â CharSequence,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): String\n\ncompareTo\n\nCompares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other.\n\ninfix fun <T> Comparable<T>.compareTo(other:Â T): Int\n\nconcat\n\nfun String.concat(str:Â String): String\n\ncontains\n\nReturns true if this char sequence contains the specified other sequence of characters as a substring.\n\noperator fun CharSequence.contains(\n\nÂ Â Â Â other:Â CharSequence,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nReturns true if this char sequence contains the specified character char.\n\noperator fun CharSequence.contains(\n\nÂ Â Â Â char:Â Char,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nReturns true if this char sequence contains at least one match of the specified regular expression regex.\n\noperator fun CharSequence.contains(regex:Â Regex): Boolean\n\ncontentEquals\n\nReturns true if this string is equal to the contents of the specified CharSequence, false otherwise.\n\nfun String.contentEquals(charSequence:Â CharSequence): Boolean\n\nReturns true if this string is equal to the contents of the specified StringBuffer, false otherwise.\n\nfun String.contentEquals(\n\nÂ Â Â Â stringBuilder:Â StringBuffer\n\n): Boolean\n\ncount\n\nReturns the length of this char sequence.\n\nfun CharSequence.count(): Int\n\nReturns the number of characters matching the given predicate.\n\nfun CharSequence.count(predicate:Â (Char)Â ->Â Boolean): Int\n\ndecapitalize\n\nReturns a copy of this string having its first letter lowercased using the rules of the specified locale, or the original string, if it's empty or already starts with a lower case letter.\n\nfun String.decapitalize(locale:Â Locale): String\n\ndrop\n\nReturns a string with the first n characters removed.\n\nfun String.drop(n:Â Int): String\n\ndropLast\n\nReturns a string with the last n characters removed.\n\nfun String.dropLast(n:Â Int): String\n\ndropLastWhile\n\nReturns a string containing all characters except last characters that satisfy the given predicate.\n\nfun String.dropLastWhile(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): String\n\ndropWhile\n\nReturns a string containing all characters except first characters that satisfy the given predicate.\n\nfun String.dropWhile(predicate:Â (Char)Â ->Â Boolean): String\n\nelementAtOrElse\n\nReturns a character at the given index or the result of calling the defaultValue function if the index is out of bounds of this char sequence.\n\nfun CharSequence.elementAtOrElse(\n\nÂ Â Â Â index:Â Int,\n\nÂ Â Â Â defaultValue:Â (Int)Â ->Â Char\n\n): Char\n\nelementAtOrNull\n\nReturns a character at the given index or null if the index is out of bounds of this char sequence.\n\nfun CharSequence.elementAtOrNull(index:Â Int): Char?\n\nendsWith\n\nReturns true if this char sequence ends with the specified character.\n\nfun CharSequence.endsWith(\n\nÂ Â Â Â char:Â Char,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nReturns true if this char sequence ends with the specified suffix.\n\nfun CharSequence.endsWith(\n\nÂ Â Â Â suffix:Â CharSequence,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nfilter\n\nReturns a string containing only those characters from the original string that match the given predicate.\n\nfun String.filter(predicate:Â (Char)Â ->Â Boolean): String\n\nfilterIndexed\n\nReturns a string containing only those characters from the original string that match the given predicate.\n\nfun String.filterIndexed(\n\nÂ Â Â Â predicate:Â (index:Â Int,Â Char)Â ->Â Boolean\n\n): String\n\nfilterIndexedTo\n\nAppends all characters matching the given predicate to the given destination.\n\nfun <CÂ :Â Appendable> CharSequence.filterIndexedTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â predicate:Â (index:Â Int,Â Char)Â ->Â Boolean\n\n): C\n\nfilterNot\n\nReturns a string containing only those characters from the original string that do not match the given predicate.\n\nfun String.filterNot(predicate:Â (Char)Â ->Â Boolean): String\n\nfilterNotTo\n\nAppends all characters not matching the given predicate to the given destination.\n\nfun <CÂ :Â Appendable> CharSequence.filterNotTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): C\n\nfilterTo\n\nAppends all characters matching the given predicate to the given destination.\n\nfun <CÂ :Â Appendable> CharSequence.filterTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): C\n\nfind\n\nReturns the first character matching the given predicate, or null if no such character was found.\n\nfun CharSequence.find(predicate:Â (Char)Â ->Â Boolean): Char?\n\nfindAnyOf\n\nFinds the first occurrence of any of the specified strings in this char sequence, starting from the specified startIndex and optionally ignoring the case.\n\nfun CharSequence.findAnyOf(\n\nÂ Â Â Â strings:Â Collection<String>,\n\nÂ Â Â Â startIndex:Â IntÂ =Â 0,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Pair<Int,Â String>?\n\nfindLast\n\nReturns the last character matching the given predicate, or null if no such character was found.\n\nfun CharSequence.findLast(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Char?\n\nfindLastAnyOf\n\nFinds the last occurrence of any of the specified strings in this char sequence, starting from the specified startIndex and optionally ignoring the case.\n\nfun CharSequence.findLastAnyOf(\n\nÂ Â Â Â strings:Â Collection<String>,\n\nÂ Â Â Â startIndex:Â IntÂ =Â lastIndex,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Pair<Int,Â String>?\n\nfirst\n\nReturns the first character.\n\nfun CharSequence.first(): Char\n\nReturns the first character matching the given predicate.\n\nfun CharSequence.first(predicate:Â (Char)Â ->Â Boolean): Char\n\nfirstNotNullOf\n\nReturns the first non-null value produced by transform function being applied to characters of this char sequence in iteration order, or throws NoSuchElementException if no non-null value was produced.\n\nfun <RÂ :Â Any> CharSequence.firstNotNullOf(\n\nÂ Â Â Â transform:Â (Char)Â ->Â R?\n\n): R\n\nfirstNotNullOfOrNull\n\nReturns the first non-null value produced by transform function being applied to characters of this char sequence in iteration order, or null if no non-null value was produced.\n\nfun <RÂ :Â Any> CharSequence.firstNotNullOfOrNull(\n\nÂ Â Â Â transform:Â (Char)Â ->Â R?\n\n): R?\n\nfirstOrNull\n\nReturns the first character, or null if the char sequence is empty.\n\nfun CharSequence.firstOrNull(): Char?\n\nReturns the first character matching the given predicate, or null if character was not found.\n\nfun CharSequence.firstOrNull(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Char?\n\nflatMap\n\nReturns a single list of all elements yielded from results of transform function being invoked on each character of original char sequence.\n\nfun <R> CharSequence.flatMap(\n\nÂ Â Â Â transform:Â (Char)Â ->Â Iterable<R>\n\n): List<R>\n\nflatMapIndexed\n\nReturns a single list of all elements yielded from results of transform function being invoked on each character and its index in the original char sequence.\n\nfun <R> CharSequence.flatMapIndexed(\n\nÂ Â Â Â transform:Â (index:Â Int,Â Char)Â ->Â Iterable<R>\n\n): List<R>\n\nflatMapIndexedTo\n\nAppends all elements yielded from results of transform function being invoked on each character and its index in the original char sequence, to the given destination.\n\nfun <R, CÂ :Â MutableCollection<inÂ R>> CharSequence.flatMapIndexedTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â transform:Â (index:Â Int,Â Char)Â ->Â Iterable<R>\n\n): C\n\nflatMapTo\n\nAppends all elements yielded from results of transform function being invoked on each character of original char sequence, to the given destination.\n\nfun <R, CÂ :Â MutableCollection<inÂ R>> CharSequence.flatMapTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â transform:Â (Char)Â ->Â Iterable<R>\n\n): C\n\nfold\n\nAccumulates value starting with initial value and applying operation from left to right to current accumulator value and each character.\n\nfun <R> CharSequence.fold(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (acc:Â R,Â Char)Â ->Â R\n\n): R\n\nfoldIndexed\n\nAccumulates value starting with initial value and applying operation from left to right to current accumulator value and each character with its index in the original char sequence.\n\nfun <R> CharSequence.foldIndexed(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (index:Â Int,Â acc:Â R,Â Char)Â ->Â R\n\n): R\n\nfoldRight\n\nAccumulates value starting with initial value and applying operation from right to left to each character and current accumulator value.\n\nfun <R> CharSequence.foldRight(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (Char,Â acc:Â R)Â ->Â R\n\n): R\n\nfoldRightIndexed\n\nAccumulates value starting with initial value and applying operation from right to left to each character with its index in the original char sequence and current accumulator value.\n\nfun <R> CharSequence.foldRightIndexed(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (index:Â Int,Â Char,Â acc:Â R)Â ->Â R\n\n): R\n\nforEach\n\nPerforms the given action on each character.\n\nfun CharSequence.forEach(action:Â (Char)Â ->Â Unit)\n\nforEachIndexed\n\nPerforms the given action on each character, providing sequential index with the character.\n\nfun CharSequence.forEachIndexed(\n\nÂ Â Â Â action:Â (index:Â Int,Â Char)Â ->Â Unit)\n\nformat\n\nUses this string as a format string and returns a string obtained by substituting format specifiers in the format string with the provided arguments, using the default locale.\n\nfun String.format(vararg args:Â Any?): String\n\nUses this string as a format string and returns a string obtained by substituting format specifiers in the format string with the provided arguments, using the specified locale. If locale is null then no localization is applied.\n\nfun String.format(locale:Â Locale?, vararg args:Â Any?): String\n\ngetOrElse\n\nReturns a character at the given index or the result of calling the defaultValue function if the index is out of bounds of this char sequence.\n\nfun CharSequence.getOrElse(\n\nÂ Â Â Â index:Â Int,\n\nÂ Â Â Â defaultValue:Â (Int)Â ->Â Char\n\n): Char\n\ngetOrNull\n\nReturns a character at the given index or null if the index is out of bounds of this char sequence.\n\nfun CharSequence.getOrNull(index:Â Int): Char?\n\ngroupBy\n\nGroups characters of the original char sequence by the key returned by the given keySelector function applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n\nfun <K> CharSequence.groupBy(\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K\n\n): Map<K,Â List<Char>>\n\nGroups values returned by the valueTransform function applied to each character of the original char sequence by the key returned by the given keySelector function applied to the character and returns a map where each group key is associated with a list of corresponding values.\n\nfun <K, V> CharSequence.groupBy(\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K,\n\nÂ Â Â Â valueTransform:Â (Char)Â ->Â V\n\n): Map<K,Â List<V>>\n\ngroupByTo\n\nGroups characters of the original char sequence by the key returned by the given keySelector function applied to each character and puts to the destination map each group key associated with a list of corresponding characters.\n\nfun <K, MÂ :Â MutableMap<inÂ K,Â MutableList<Char>>> CharSequence.groupByTo(\n\nÂ Â Â Â destination:Â M,\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K\n\n): M\n\nGroups values returned by the valueTransform function applied to each character of the original char sequence by the key returned by the given keySelector function applied to the character and puts to the destination map each group key associated with a list of corresponding values.\n\nfun <K, V, MÂ :Â MutableMap<inÂ K,Â MutableList<V>>> CharSequence.groupByTo(\n\nÂ Â Â Â destination:Â M,\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K,\n\nÂ Â Â Â valueTransform:Â (Char)Â ->Â V\n\n): M\n\ngroupingBy\n\nCreates a Grouping source from a char sequence to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each character.\n\nfun <K> CharSequence.groupingBy(\n\nÂ Â Â Â keySelector:Â (Char)Â ->Â K\n\n): Grouping<Char,Â K>\n\nhasSurrogatePairAt\n\nReturns true if this CharSequence has Unicode surrogate pair at the specified index.\n\nfun CharSequence.hasSurrogatePairAt(index:Â Int): Boolean\n\nhexToByte\n\nParses a Byte value from this string using the specified format.\n\nfun String.hexToByte(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): Byte\n\nhexToByteArray\n\nParses bytes from this string using the specified HexFormat.\n\nfun String.hexToByteArray(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): ByteArray\n\nhexToInt\n\nParses an Int value from this string using the specified format.\n\nfun String.hexToInt(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): Int\n\nhexToLong\n\nParses a Long value from this string using the specified format.\n\nfun String.hexToLong(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): Long\n\nhexToShort\n\nParses a Short value from this string using the specified format.\n\nfun String.hexToShort(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): Short\n\nhexToUByte\n\nParses an UByte value from this string using the specified format.\n\nfun String.hexToUByte(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): UByte\n\nhexToUByteArray\n\nParses bytes from this string using the specified HexFormat.\n\nfun String.hexToUByteArray(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): UByteArray\n\nhexToUInt\n\nParses an UInt value from this string using the specified format.\n\nfun String.hexToUInt(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): UInt\n\nhexToULong\n\nParses an ULong value from this string using the specified format.\n\nfun String.hexToULong(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): ULong\n\nhexToUShort\n\nParses an UShort value from this string using the specified format.\n\nfun String.hexToUShort(\n\nÂ Â Â Â format:Â HexFormatÂ =Â HexFormat.Default\n\n): UShort\n\nifBlank\n\nReturns this char sequence if it is not empty and doesn't consist solely of whitespace characters, or the result of calling defaultValue function otherwise.\n\nfun <C, R> C.ifBlank(\n\nÂ Â Â Â defaultValue:Â ()Â ->Â R\n\n): R where CÂ :Â CharSequence, CÂ :Â R\n\nifEmpty\n\nReturns this char sequence if it's not empty or the result of calling defaultValue function if the char sequence is empty.\n\nfun <C, R> C.ifEmpty(\n\nÂ Â Â Â defaultValue:Â ()Â ->Â R\n\n): R where CÂ :Â CharSequence, CÂ :Â R\n\nindexOf\n\nReturns the index within this string of the first occurrence of the specified character, starting from the specified startIndex.\n\nfun CharSequence.indexOf(\n\nÂ Â Â Â char:Â Char,\n\nÂ Â Â Â startIndex:Â IntÂ =Â 0,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nReturns the index within this char sequence of the first occurrence of the specified string, starting from the specified startIndex.\n\nfun CharSequence.indexOf(\n\nÂ Â Â Â string:Â String,\n\nÂ Â Â Â startIndex:Â IntÂ =Â 0,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nindexOfAny\n\nFinds the index of the first occurrence of any of the specified chars in this char sequence, starting from the specified startIndex and optionally ignoring the case.\n\nfun CharSequence.indexOfAny(\n\nÂ Â Â Â chars:Â CharArray,\n\nÂ Â Â Â startIndex:Â IntÂ =Â 0,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nFinds the index of the first occurrence of any of the specified strings in this char sequence, starting from the specified startIndex and optionally ignoring the case.\n\nfun CharSequence.indexOfAny(\n\nÂ Â Â Â strings:Â Collection<String>,\n\nÂ Â Â Â startIndex:Â IntÂ =Â 0,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nindexOfFirst\n\nReturns index of the first character matching the given predicate, or -1 if the char sequence does not contain such character.\n\nfun CharSequence.indexOfFirst(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Int\n\nindexOfLast\n\nReturns index of the last character matching the given predicate, or -1 if the char sequence does not contain such character.\n\nfun CharSequence.indexOfLast(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Int\n\nintern\n\nReturns a canonical representation for this string object.\n\nfun String.intern(): String\n\nisBlank\n\nReturns true if this char sequence is empty or consists solely of whitespace characters according to Char.isWhitespace.\n\nfun CharSequence.isBlank(): Boolean\n\nisEmpty\n\nReturns true if this char sequence is empty (contains no characters).\n\nfun CharSequence.isEmpty(): Boolean\n\nisNotBlank\n\nReturns true if this char sequence is not empty and contains some characters except whitespace characters.\n\nfun CharSequence.isNotBlank(): Boolean\n\nisNotEmpty\n\nReturns true if this char sequence is not empty.\n\nfun CharSequence.isNotEmpty(): Boolean\n\nisNullOrBlank\n\nReturns true if this nullable char sequence is either null or empty or consists solely of whitespace characters.\n\nfun CharSequence?.isNullOrBlank(): Boolean\n\nisNullOrEmpty\n\nReturns true if this nullable char sequence is either null or empty.\n\nfun CharSequence?.isNullOrEmpty(): Boolean\n\niterator\n\nIterator for characters of the given char sequence.\n\noperator fun CharSequence.iterator(): CharIterator\n\nlast\n\nReturns the last character.\n\nfun CharSequence.last(): Char\n\nReturns the last character matching the given predicate.\n\nfun CharSequence.last(predicate:Â (Char)Â ->Â Boolean): Char\n\nlastIndexOf\n\nReturns the index within this char sequence of the last occurrence of the specified character, starting from the specified startIndex.\n\nfun CharSequence.lastIndexOf(\n\nÂ Â Â Â char:Â Char,\n\nÂ Â Â Â startIndex:Â IntÂ =Â lastIndex,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nReturns the index within this char sequence of the last occurrence of the specified string, starting from the specified startIndex.\n\nfun CharSequence.lastIndexOf(\n\nÂ Â Â Â string:Â String,\n\nÂ Â Â Â startIndex:Â IntÂ =Â lastIndex,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nlastIndexOfAny\n\nFinds the index of the last occurrence of any of the specified chars in this char sequence, starting from the specified startIndex and optionally ignoring the case.\n\nfun CharSequence.lastIndexOfAny(\n\nÂ Â Â Â chars:Â CharArray,\n\nÂ Â Â Â startIndex:Â IntÂ =Â lastIndex,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nFinds the index of the last occurrence of any of the specified strings in this char sequence, starting from the specified startIndex and optionally ignoring the case.\n\nfun CharSequence.lastIndexOfAny(\n\nÂ Â Â Â strings:Â Collection<String>,\n\nÂ Â Â Â startIndex:Â IntÂ =Â lastIndex,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Int\n\nlastOrNull\n\nReturns the last character, or null if the char sequence is empty.\n\nfun CharSequence.lastOrNull(): Char?\n\nReturns the last character matching the given predicate, or null if no such character was found.\n\nfun CharSequence.lastOrNull(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Char?\n\nlines\n\nSplits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n\nfun CharSequence.lines(): List<String>\n\nlineSequence\n\nSplits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n\nfun CharSequence.lineSequence(): Sequence<String>\n\nlowercase\n\nReturns a copy of this string converted to lower case using the rules of the specified locale.\n\nfun String.lowercase(locale:Â Locale): String\n\nmap\n\nReturns a list containing the results of applying the given transform function to each character in the original char sequence.\n\nfun <R> CharSequence.map(transform:Â (Char)Â ->Â R): List<R>\n\nmapIndexed\n\nReturns a list containing the results of applying the given transform function to each character and its index in the original char sequence.\n\nfun <R> CharSequence.mapIndexed(\n\nÂ Â Â Â transform:Â (index:Â Int,Â Char)Â ->Â R\n\n): List<R>\n\nmapIndexedNotNull\n\nReturns a list containing only the non-null results of applying the given transform function to each character and its index in the original char sequence.\n\nfun <RÂ :Â Any> CharSequence.mapIndexedNotNull(\n\nÂ Â Â Â transform:Â (index:Â Int,Â Char)Â ->Â R?\n\n): List<R>\n\nmapIndexedNotNullTo\n\nApplies the given transform function to each character and its index in the original char sequence and appends only the non-null results to the given destination.\n\nfun <RÂ :Â Any, CÂ :Â MutableCollection<inÂ R>> CharSequence.mapIndexedNotNullTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â transform:Â (index:Â Int,Â Char)Â ->Â R?\n\n): C\n\nmapIndexedTo\n\nApplies the given transform function to each character and its index in the original char sequence and appends the results to the given destination.\n\nfun <R, CÂ :Â MutableCollection<inÂ R>> CharSequence.mapIndexedTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â transform:Â (index:Â Int,Â Char)Â ->Â R\n\n): C\n\nmapNotNull\n\nReturns a list containing only the non-null results of applying the given transform function to each character in the original char sequence.\n\nfun <RÂ :Â Any> CharSequence.mapNotNull(\n\nÂ Â Â Â transform:Â (Char)Â ->Â R?\n\n): List<R>\n\nmapNotNullTo\n\nApplies the given transform function to each character in the original char sequence and appends only the non-null results to the given destination.\n\nfun <RÂ :Â Any, CÂ :Â MutableCollection<inÂ R>> CharSequence.mapNotNullTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â transform:Â (Char)Â ->Â R?\n\n): C\n\nmapTo\n\nApplies the given transform function to each character of the original char sequence and appends the results to the given destination.\n\nfun <R, CÂ :Â MutableCollection<inÂ R>> CharSequence.mapTo(\n\nÂ Â Â Â destination:Â C,\n\nÂ Â Â Â transform:Â (Char)Â ->Â R\n\n): C\n\nmatch\n\nfun String.match(regex:Â String): Array<String>?\n\nmatches\n\nReturns true if this char sequence matches the given regular expression.\n\ninfix fun CharSequence.matches(regex:Â Regex): Boolean\n\nfun String.matches(regex:Â String): Boolean\n\nmaxByOrNull\n\nReturns the first character yielding the largest value of the given function or null if there are no characters.\n\nfun <RÂ :Â Comparable<R>> CharSequence.maxByOrNull(\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): Char?\n\nmaxOf\n\nReturns the largest value among all values produced by selector function applied to each character in the char sequence.\n\nfun <RÂ :Â Comparable<R>> any_iterable<R>.maxOf(\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R\n\nmaxOfOrNull\n\nReturns the largest value among all values produced by selector function applied to each character in the char sequence or null if there are no characters.\n\nfun <RÂ :Â Comparable<R>> any_iterable<R>.maxOfOrNull(\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R?\n\nmaxOfWith\n\nReturns the largest value according to the provided comparator among all values produced by selector function applied to each character in the char sequence.\n\nfun <R> CharSequence.maxOfWith(\n\nÂ Â Â Â comparator:Â Comparator<inÂ R>,\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R\n\nmaxOfWithOrNull\n\nReturns the largest value according to the provided comparator among all values produced by selector function applied to each character in the char sequence or null if there are no characters.\n\nfun <R> CharSequence.maxOfWithOrNull(\n\nÂ Â Â Â comparator:Â Comparator<inÂ R>,\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R?\n\nmaxOrNull\n\nReturns the largest character or null if there are no characters.\n\nfun CharSequence.maxOrNull(): Char?\n\nmaxWith\n\nReturns the first character having the largest value according to the provided comparator.\n\nfun CharSequence.maxWith(\n\nÂ Â Â Â comparator:Â Comparator<inÂ Char>\n\n): Char\n\nfun CharSequence.maxWith(\n\nÂ Â Â Â comparator:Â Comparator<inÂ Char>\n\n): Char?\n\nmaxWithOrNull\n\nReturns the first character having the largest value according to the provided comparator or null if there are no characters.\n\nfun CharSequence.maxWithOrNull(\n\nÂ Â Â Â comparator:Â Comparator<inÂ Char>\n\n): Char?\n\nminByOrNull\n\nReturns the first character yielding the smallest value of the given function or null if there are no characters.\n\nfun <RÂ :Â Comparable<R>> CharSequence.minByOrNull(\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): Char?\n\nminOf\n\nReturns the smallest value among all values produced by selector function applied to each character in the char sequence.\n\nfun <RÂ :Â Comparable<R>> any_iterable<R>.minOf(\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R\n\nminOfOrNull\n\nReturns the smallest value among all values produced by selector function applied to each character in the char sequence or null if there are no characters.\n\nfun <RÂ :Â Comparable<R>> any_iterable<R>.minOfOrNull(\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R?\n\nminOfWith\n\nReturns the smallest value according to the provided comparator among all values produced by selector function applied to each character in the char sequence.\n\nfun <R> CharSequence.minOfWith(\n\nÂ Â Â Â comparator:Â Comparator<inÂ R>,\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R\n\nminOfWithOrNull\n\nReturns the smallest value according to the provided comparator among all values produced by selector function applied to each character in the char sequence or null if there are no characters.\n\nfun <R> CharSequence.minOfWithOrNull(\n\nÂ Â Â Â comparator:Â Comparator<inÂ R>,\n\nÂ Â Â Â selector:Â (Char)Â ->Â R\n\n): R?\n\nminOrNull\n\nReturns the smallest character or null if there are no characters.\n\nfun CharSequence.minOrNull(): Char?\n\nminWith\n\nReturns the first character having the smallest value according to the provided comparator.\n\nfun CharSequence.minWith(\n\nÂ Â Â Â comparator:Â Comparator<inÂ Char>\n\n): Char\n\nfun CharSequence.minWith(\n\nÂ Â Â Â comparator:Â Comparator<inÂ Char>\n\n): Char?\n\nminWithOrNull\n\nReturns the first character having the smallest value according to the provided comparator or null if there are no characters.\n\nfun CharSequence.minWithOrNull(\n\nÂ Â Â Â comparator:Â Comparator<inÂ Char>\n\n): Char?\n\nnone\n\nReturns true if the char sequence has no characters.\n\nfun CharSequence.none(): Boolean\n\nReturns true if no characters match the given predicate.\n\nfun CharSequence.none(predicate:Â (Char)Â ->Â Boolean): Boolean\n\noffsetByCodePoints\n\nReturns the index within this string that is offset from the given index by codePointOffset code points.\n\nfun String.offsetByCodePoints(\n\nÂ Â Â Â index:Â Int,\n\nÂ Â Â Â codePointOffset:Â Int\n\n): Int\n\nonEach\n\nPerforms the given action on each character and returns the char sequence itself afterwards.\n\nfun <SÂ :Â CharSequence> S.onEach(action:Â (Char)Â ->Â Unit): S\n\nonEachIndexed\n\nPerforms the given action on each character, providing sequential index with the character, and returns the char sequence itself afterwards.\n\nfun <SÂ :Â CharSequence> S.onEachIndexed(\n\nÂ Â Â Â action:Â (index:Â Int,Â Char)Â ->Â Unit\n\n): S\n\norEmpty\n\nReturns the string if it is not null, or the empty string otherwise.\n\nfun String?.orEmpty(): String\n\npadEnd\n\nPads the string to the specified length at the end with the specified character or space.\n\nfun String.padEnd(length:Â Int, padChar:Â CharÂ =Â ' '): String\n\npadStart\n\nPads the string to the specified length at the beginning with the specified character or space.\n\nfun String.padStart(length:Â Int, padChar:Â CharÂ =Â ' '): String\n\npartition\n\nSplits the original string into pair of strings, where first string contains characters for which predicate yielded true, while second string contains characters for which predicate yielded false.\n\nfun String.partition(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Pair<String,Â String>\n\nprependIndent\n\nPrepends indent to every line of the original string.\n\nfun String.prependIndent(indent:Â StringÂ =Â \" \"): String\n\nrandom\n\nReturns a random character from this char sequence.\n\nfun CharSequence.random(): Char\n\nReturns a random character from this char sequence using the specified source of randomness.\n\nfun CharSequence.random(random:Â Random): Char\n\nrandomOrNull\n\nReturns a random character from this char sequence, or null if this char sequence is empty.\n\nfun CharSequence.randomOrNull(): Char?\n\nReturns a random character from this char sequence using the specified source of randomness, or null if this char sequence is empty.\n\nfun CharSequence.randomOrNull(random:Â Random): Char?\n\nrangeTo\n\nCreates a range from this Comparable value to the specified that value.\n\noperator fun <TÂ :Â Comparable<T>> T.rangeTo(\n\nÂ Â Â Â that:Â T\n\n): ClosedRange<T>\n\nrangeUntil\n\nCreates an open-ended range from this Comparable value to the specified that value.\n\noperator fun <TÂ :Â Comparable<T>> T.rangeUntil(\n\nÂ Â Â Â that:Â T\n\n): OpenEndRange<T>\n\nreader\n\nCreates a new reader for the string.\n\nfun String.reader(): StringReader\n\nreduce\n\nAccumulates value starting with the first character and applying operation from left to right to current accumulator value and each character.\n\nfun CharSequence.reduce(\n\nÂ Â Â Â operation:Â (acc:Â Char,Â Char)Â ->Â Char\n\n): Char\n\nreduceIndexed\n\nAccumulates value starting with the first character and applying operation from left to right to current accumulator value and each character with its index in the original char sequence.\n\nfun CharSequence.reduceIndexed(\n\nÂ Â Â Â operation:Â (index:Â Int,Â acc:Â Char,Â Char)Â ->Â Char\n\n): Char\n\nreduceIndexedOrNull\n\nAccumulates value starting with the first character and applying operation from left to right to current accumulator value and each character with its index in the original char sequence.\n\nfun CharSequence.reduceIndexedOrNull(\n\nÂ Â Â Â operation:Â (index:Â Int,Â acc:Â Char,Â Char)Â ->Â Char\n\n): Char?\n\nreduceOrNull\n\nAccumulates value starting with the first character and applying operation from left to right to current accumulator value and each character.\n\nfun CharSequence.reduceOrNull(\n\nÂ Â Â Â operation:Â (acc:Â Char,Â Char)Â ->Â Char\n\n): Char?\n\nreduceRight\n\nAccumulates value starting with the last character and applying operation from right to left to each character and current accumulator value.\n\nfun CharSequence.reduceRight(\n\nÂ Â Â Â operation:Â (Char,Â acc:Â Char)Â ->Â Char\n\n): Char\n\nreduceRightIndexed\n\nAccumulates value starting with the last character and applying operation from right to left to each character with its index in the original char sequence and current accumulator value.\n\nfun CharSequence.reduceRightIndexed(\n\nÂ Â Â Â operation:Â (index:Â Int,Â Char,Â acc:Â Char)Â ->Â Char\n\n): Char\n\nreduceRightIndexedOrNull\n\nAccumulates value starting with the last character and applying operation from right to left to each character with its index in the original char sequence and current accumulator value.\n\nfun CharSequence.reduceRightIndexedOrNull(\n\nÂ Â Â Â operation:Â (index:Â Int,Â Char,Â acc:Â Char)Â ->Â Char\n\n): Char?\n\nreduceRightOrNull\n\nAccumulates value starting with the last character and applying operation from right to left to each character and current accumulator value.\n\nfun CharSequence.reduceRightOrNull(\n\nÂ Â Â Â operation:Â (Char,Â acc:Â Char)Â ->Â Char\n\n): Char?\n\nrefTo\n\nfun String.refTo(index:Â Int): CValuesRef<COpaque>\n\nremovePrefix\n\nIf this string starts with the given prefix, returns a copy of this string with the prefix removed. Otherwise, returns this string.\n\nfun String.removePrefix(prefix:Â CharSequence): String\n\nremoveRange\n\nRemoves the part of a string at a given range.\n\nfun String.removeRange(\n\nÂ Â Â Â startIndex:Â Int,\n\nÂ Â Â Â endIndex:Â Int\n\n): String\n\nRemoves the part of a string at the given range.\n\nfun String.removeRange(range:Â IntRange): String\n\nremoveSuffix\n\nIf this string ends with the given suffix, returns a copy of this string with the suffix removed. Otherwise, returns this string.\n\nfun String.removeSuffix(suffix:Â CharSequence): String\n\nremoveSurrounding\n\nRemoves from a string both the given prefix and suffix if and only if it starts with the prefix and ends with the suffix. Otherwise, returns this string unchanged.\n\nfun String.removeSurrounding(\n\nÂ Â Â Â prefix:Â CharSequence,\n\nÂ Â Â Â suffix:Â CharSequence\n\n): String\n\nRemoves the given delimiter string from both the start and the end of this string if and only if it starts with and ends with the delimiter. Otherwise, returns this string unchanged.\n\nfun String.removeSurrounding(delimiter:Â CharSequence): String\n\nreplace\n\nReturns a new string obtained by replacing each substring of this char sequence that matches the given regular expression with the given replacement.\n\nfun CharSequence.replace(\n\nÂ Â Â Â regex:Â Regex,\n\nÂ Â Â Â replacement:Â String\n\n): String\n\nReturns a new string obtained by replacing each substring of this char sequence that matches the given regular expression with the result of the given function transform that takes MatchResult and returns a string to be used as a replacement for that match.\n\nfun CharSequence.replace(\n\nÂ Â Â Â regex:Â Regex,\n\nÂ Â Â Â transform:Â (MatchResult)Â ->Â CharSequence\n\n): String\n\nreplaceAfter\n\nReplace part of string after the first occurrence of given delimiter with the replacement string. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.replaceAfter(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.replaceAfter(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nreplaceAfterLast\n\nReplace part of string after the last occurrence of given delimiter with the replacement string. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.replaceAfterLast(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.replaceAfterLast(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nreplaceBefore\n\nReplace part of string before the first occurrence of given delimiter with the replacement string. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.replaceBefore(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.replaceBefore(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nreplaceBeforeLast\n\nReplace part of string before the last occurrence of given delimiter with the replacement string. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.replaceBeforeLast(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.replaceBeforeLast(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â replacement:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nreplaceFirst\n\nReplaces the first occurrence of the given regular expression regex in this char sequence with specified replacement expression.\n\nfun CharSequence.replaceFirst(\n\nÂ Â Â Â regex:Â Regex,\n\nÂ Â Â Â replacement:Â String\n\n): String\n\nreplaceFirstChar\n\nReturns a copy of this string having its first character replaced with the result of the specified transform, or the original string if it's empty.\n\nfun String.replaceFirstChar(\n\nÂ Â Â Â transform:Â (Char)Â ->Â Char\n\n): String\n\nfun String.replaceFirstChar(\n\nÂ Â Â Â transform:Â (Char)Â ->Â CharSequence\n\n): String\n\nreplaceIndent\n\nDetects a common minimal indent like it does trimIndent and replaces it with the specified newIndent.\n\nfun String.replaceIndent(newIndent:Â StringÂ =Â \"\"): String\n\nreplaceIndentByMargin\n\nDetects indent by marginPrefix as it does trimMargin and replace it with newIndent.\n\nfun String.replaceIndentByMargin(\n\nÂ Â Â Â newIndent:Â StringÂ =Â \"\",\n\nÂ Â Â Â marginPrefix:Â StringÂ =Â \"|\"\n\n): String\n\nreplaceRange\n\nReplaces the part of the string at the given range with the replacement char sequence.\n\nfun String.replaceRange(\n\nÂ Â Â Â startIndex:Â Int,\n\nÂ Â Â Â endIndex:Â Int,\n\nÂ Â Â Â replacement:Â CharSequence\n\n): String\n\nReplace the part of string at the given range with the replacement string.\n\nfun String.replaceRange(\n\nÂ Â Â Â range:Â IntRange,\n\nÂ Â Â Â replacement:Â CharSequence\n\n): String\n\nreversed\n\nReturns a string with characters in reversed order.\n\nfun String.reversed(): String\n\nrunningFold\n\nReturns a list containing successive accumulation values generated by applying operation from left to right to each character and current accumulator value that starts with initial value.\n\nfun <R> CharSequence.runningFold(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (acc:Â R,Â Char)Â ->Â R\n\n): List<R>\n\nrunningFoldIndexed\n\nReturns a list containing successive accumulation values generated by applying operation from left to right to each character, its index in the original char sequence and current accumulator value that starts with initial value.\n\nfun <R> CharSequence.runningFoldIndexed(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (index:Â Int,Â acc:Â R,Â Char)Â ->Â R\n\n): List<R>\n\nrunningReduce\n\nReturns a list containing successive accumulation values generated by applying operation from left to right to each character and current accumulator value that starts with the first character of this char sequence.\n\nfun CharSequence.runningReduce(\n\nÂ Â Â Â operation:Â (acc:Â Char,Â Char)Â ->Â Char\n\n): List<Char>\n\nrunningReduceIndexed\n\nReturns a list containing successive accumulation values generated by applying operation from left to right to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n\nfun CharSequence.runningReduceIndexed(\n\nÂ Â Â Â operation:Â (index:Â Int,Â acc:Â Char,Â Char)Â ->Â Char\n\n): List<Char>\n\nscan\n\nReturns a list containing successive accumulation values generated by applying operation from left to right to each character and current accumulator value that starts with initial value.\n\nfun <R> CharSequence.scan(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (acc:Â R,Â Char)Â ->Â R\n\n): List<R>\n\nscanIndexed\n\nReturns a list containing successive accumulation values generated by applying operation from left to right to each character, its index in the original char sequence and current accumulator value that starts with initial value.\n\nfun <R> CharSequence.scanIndexed(\n\nÂ Â Â Â initial:Â R,\n\nÂ Â Â Â operation:Â (index:Â Int,Â acc:Â R,Â Char)Â ->Â R\n\n): List<R>\n\nsingle\n\nReturns the single character, or throws an exception if the char sequence is empty or has more than one character.\n\nfun CharSequence.single(): Char\n\nReturns the single character matching the given predicate, or throws exception if there is no or more than one matching character.\n\nfun CharSequence.single(predicate:Â (Char)Â ->Â Boolean): Char\n\nsingleOrNull\n\nReturns single character, or null if the char sequence is empty or has more than one character.\n\nfun CharSequence.singleOrNull(): Char?\n\nReturns the single character matching the given predicate, or null if character was not found or more than one character was found.\n\nfun CharSequence.singleOrNull(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): Char?\n\nslice\n\nReturns a string containing characters of the original string at the specified range of indices.\n\nfun String.slice(indices:Â IntRange): String\n\nReturns a string containing characters of the original string at specified indices.\n\nfun String.slice(indices:Â Iterable<Int>): String\n\nsplit\n\nSplits this char sequence to a list of strings around occurrences of the specified delimiters.\n\nfun CharSequence.split(\n\nÂ Â Â Â vararg delimiters:Â String,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): List<String>\n\nfun CharSequence.split(\n\nÂ Â Â Â vararg delimiters:Â Char,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): List<String>\n\nSplits this char sequence to a list of strings around matches of the given regular expression.\n\nfun CharSequence.split(\n\nÂ Â Â Â regex:Â Regex,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): List<String>\n\nSplits this char sequence around matches of the given regular expression.\n\nfun CharSequence.split(\n\nÂ Â Â Â regex:Â Pattern,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): List<String>\n\nsplitToSequence\n\nSplits this char sequence to a sequence of strings around occurrences of the specified delimiters.\n\nfun CharSequence.splitToSequence(\n\nÂ Â Â Â vararg delimiters:Â String,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): Sequence<String>\n\nfun CharSequence.splitToSequence(\n\nÂ Â Â Â vararg delimiters:Â Char,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): Sequence<String>\n\nSplits this char sequence to a sequence of strings around matches of the given regular expression.\n\nfun CharSequence.splitToSequence(\n\nÂ Â Â Â regex:Â Regex,\n\nÂ Â Â Â limit:Â IntÂ =Â 0\n\n): Sequence<String>\n\nstartsWith\n\nReturns true if this char sequence starts with the specified character.\n\nfun CharSequence.startsWith(\n\nÂ Â Â Â char:Â Char,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nReturns true if this char sequence starts with the specified prefix.\n\nfun CharSequence.startsWith(\n\nÂ Â Â Â prefix:Â CharSequence,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nReturns true if a substring of this char sequence starting at the specified offset startIndex starts with the specified prefix.\n\nfun CharSequence.startsWith(\n\nÂ Â Â Â prefix:Â CharSequence,\n\nÂ Â Â Â startIndex:Â Int,\n\nÂ Â Â Â ignoreCase:Â BooleanÂ =Â false\n\n): Boolean\n\nsubstringAfterLast\n\nReturns a substring after the last occurrence of delimiter. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.substringAfterLast(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.substringAfterLast(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nsubstringBefore\n\nReturns a substring before the first occurrence of delimiter. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.substringBefore(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.substringBefore(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nsubstringBeforeLast\n\nReturns a substring before the last occurrence of delimiter. If the string does not contain the delimiter, returns missingDelimiterValue which defaults to the original string.\n\nfun String.substringBeforeLast(\n\nÂ Â Â Â delimiter:Â Char,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nfun String.substringBeforeLast(\n\nÂ Â Â Â delimiter:Â String,\n\nÂ Â Â Â missingDelimiterValue:Â StringÂ =Â this\n\n): String\n\nsumBy\n\nReturns the sum of all values produced by selector function applied to each character in the char sequence.\n\nfun CharSequence.sumBy(selector:Â (Char)Â ->Â Int): Int\n\nsumByDouble\n\nReturns the sum of all values produced by selector function applied to each character in the char sequence.\n\nfun CharSequence.sumByDouble(\n\nÂ Â Â Â selector:Â (Char)Â ->Â Double\n\n): Double\n\nsumOf\n\nReturns the sum of all values produced by selector function applied to each character in the char sequence.\n\nfun CharSequence.sumOf(selector:Â (Char)Â ->Â Double): Double\n\nfun CharSequence.sumOf(selector:Â (Char)Â ->Â Int): Int\n\nfun CharSequence.sumOf(selector:Â (Char)Â ->Â Long): Long\n\nfun CharSequence.sumOf(selector:Â (Char)Â ->Â UInt): UInt\n\nfun CharSequence.sumOf(selector:Â (Char)Â ->Â ULong): ULong\n\nfun CharSequence.sumOf(\n\nÂ Â Â Â selector:Â (Char)Â ->Â BigDecimal\n\n): BigDecimal\n\nfun CharSequence.sumOf(\n\nÂ Â Â Â selector:Â (Char)Â ->Â BigInteger\n\n): BigInteger\n\ntake\n\nReturns a string containing the first n characters from this string, or the entire string if this string is shorter.\n\nfun String.take(n:Â Int): String\n\ntakeLast\n\nReturns a string containing the last n characters from this string, or the entire string if this string is shorter.\n\nfun String.takeLast(n:Â Int): String\n\ntakeLastWhile\n\nReturns a string containing last characters that satisfy the given predicate.\n\nfun String.takeLastWhile(\n\nÂ Â Â Â predicate:Â (Char)Â ->Â Boolean\n\n): String\n\ntakeWhile\n\nReturns a string containing the first characters that satisfy the given predicate.\n\nfun String.takeWhile(predicate:Â (Char)Â ->Â Boolean): String\n\ntoBigDecimal\n\nParses the string as a java.math.BigDecimal number and returns the result.\n\nfun String.toBigDecimal(): BigDecimal\n\nfun String.toBigDecimal(mathContext:Â MathContext): BigDecimal\n\ntoBigDecimalOrNull\n\nParses the string as a java.math.BigDecimal number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toBigDecimalOrNull(): BigDecimal?\n\nfun String.toBigDecimalOrNull(\n\nÂ Â Â Â mathContext:Â MathContext\n\n): BigDecimal?\n\ntoBigInteger\n\nParses the string as a java.math.BigInteger number and returns the result.\n\nfun String.toBigInteger(): BigInteger\n\nfun String.toBigInteger(radix:Â Int): BigInteger\n\ntoBigIntegerOrNull\n\nParses the string as a java.math.BigInteger number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toBigIntegerOrNull(): BigInteger?\n\nfun String.toBigIntegerOrNull(radix:Â Int): BigInteger?\n\ntoBooleanStrict\n\nReturns true if the content of this string is equal to the word \"true\", false if it is equal to \"false\", and throws an exception otherwise.\n\nfun String.toBooleanStrict(): Boolean\n\ntoBooleanStrictOrNull\n\nReturns true if the content of this string is equal to the word \"true\", false if it is equal to \"false\", and null otherwise.\n\nfun String.toBooleanStrictOrNull(): Boolean?\n\ntoByteArray\n\nEncodes the contents of this string using the specified character set and returns the resulting byte array.\n\nfun String.toByteArray(\n\nÂ Â Â Â charset:Â CharsetÂ =Â Charsets.UTF_8\n\n): ByteArray\n\ntoByteOrNull\n\nParses the string as a signed Byte number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toByteOrNull(): Byte?\n\nfun String.toByteOrNull(radix:Â Int): Byte?\n\ntoCollection\n\nAppends all characters to the given destination collection.\n\nfun <CÂ :Â MutableCollection<inÂ Char>> CharSequence.toCollection(\n\nÂ Â Â Â destination:Â C\n\n): C\n\ntoHashSet\n\nReturns a new HashSet of all characters.\n\nfun CharSequence.toHashSet(): HashSet<Char>\n\ntoIntOrNull\n\nParses the string as an Int number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toIntOrNull(): Int?\n\nfun String.toIntOrNull(radix:Â Int): Int?\n\ntoList\n\nReturns a List containing all characters.\n\nfun CharSequence.toList(): List<Char>\n\ntoLongOrNull\n\nParses the string as a Long number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toLongOrNull(): Long?\n\nfun String.toLongOrNull(radix:Â Int): Long?\n\ntoLowerCase\n\nReturns a copy of this string converted to lower case using the rules of the specified locale.\n\nfun String.toLowerCase(locale:Â Locale): String\n\ntoMutableList\n\nReturns a new MutableList filled with all characters of this char sequence.\n\nfun CharSequence.toMutableList(): MutableList<Char>\n\ntoPattern\n\nConverts the string into a regular expression Pattern optionally with the specified flags from Pattern or'd together so that strings can be split or matched on.\n\nfun String.toPattern(flags:Â IntÂ =Â 0): Pattern\n\ntoRegex\n\nConverts the string into a regular expression Regex with the default options.\n\nfun String.toRegex(): Regex\n\nConverts the string into a regular expression Regex with the specified single option.\n\nfun String.toRegex(option:Â RegexOption): Regex\n\nConverts the string into a regular expression Regex with the specified set of options.\n\nfun String.toRegex(options:Â Set<RegexOption>): Regex\n\ntoSet\n\nReturns a Set of all characters.\n\nfun CharSequence.toSet(): Set<Char>\n\ntoShortOrNull\n\nParses the string as a Short number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toShortOrNull(): Short?\n\nfun String.toShortOrNull(radix:Â Int): Short?\n\ntoSortedSet\n\nReturns a new SortedSet of all characters.\n\nfun CharSequence.toSortedSet(): SortedSet<Char>\n\ntoUByte\n\nParses the string as a signed UByte number and returns the result.\n\nfun String.toUByte(): UByte\n\nfun String.toUByte(radix:Â Int): UByte\n\ntoUByteOrNull\n\nParses the string as an UByte number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toUByteOrNull(): UByte?\n\nfun String.toUByteOrNull(radix:Â Int): UByte?\n\ntoUInt\n\nParses the string as an UInt number and returns the result.\n\nfun String.toUInt(): UInt\n\nfun String.toUInt(radix:Â Int): UInt\n\ntoUIntOrNull\n\nParses the string as an UInt number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toUIntOrNull(): UInt?\n\nfun String.toUIntOrNull(radix:Â Int): UInt?\n\ntoULong\n\nParses the string as a ULong number and returns the result.\n\nfun String.toULong(): ULong\n\nfun String.toULong(radix:Â Int): ULong\n\ntoULongOrNull\n\nParses the string as an ULong number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toULongOrNull(): ULong?\n\nfun String.toULongOrNull(radix:Â Int): ULong?\n\ntoUpperCase\n\nReturns a copy of this string converted to upper case using the rules of the specified locale.\n\nfun String.toUpperCase(locale:Â Locale): String\n\ntoUShort\n\nParses the string as a UShort number and returns the result.\n\nfun String.toUShort(): UShort\n\nfun String.toUShort(radix:Â Int): UShort\n\ntoUShortOrNull\n\nParses the string as an UShort number and returns the result or null if the string is not a valid representation of a number.\n\nfun String.toUShortOrNull(): UShort?\n\nfun String.toUShortOrNull(radix:Â Int): UShort?\n\ntrim\n\nReturns a string having leading and trailing characters matching the predicate removed.\n\nfun String.trim(predicate:Â (Char)Â ->Â Boolean): String\n\nReturns a string having leading and trailing characters from the chars array removed.\n\nfun String.trim(vararg chars:Â Char): String\n\nReturns a string having leading and trailing whitespace removed.\n\nfun String.trim(): String\n\ntrimEnd\n\nReturns a string having trailing characters matching the predicate removed.\n\nfun String.trimEnd(predicate:Â (Char)Â ->Â Boolean): String\n\nReturns a string having trailing characters from the chars array removed.\n\nfun String.trimEnd(vararg chars:Â Char): String\n\nReturns a string having trailing whitespace removed.\n\nfun String.trimEnd(): String\n\ntrimIndent\n\nDetects a common minimal indent of all the input lines, removes it from every line and also removes the first and the last lines if they are blank (notice difference blank vs empty).\n\nfun String.trimIndent(): String\n\ntrimMargin\n\nTrims leading whitespace characters followed by marginPrefix from every line of a source string and removes the first and the last lines if they are blank (notice difference blank vs empty).\n\nfun String.trimMargin(marginPrefix:Â StringÂ =Â \"|\"): String\n\ntrimStart\n\nReturns a string having leading characters matching the predicate removed.\n\nfun String.trimStart(predicate:Â (Char)Â ->Â Boolean): String\n\nReturns a string having leading characters from the chars array removed.\n\nfun String.trimStart(vararg chars:Â Char): String\n\nReturns a string having leading whitespace removed.\n\nfun String.trimStart(): String\n\nuppercase\n\nReturns a copy of this string converted to upper case using the rules of the specified locale.\n\nfun String.uppercase(locale:Â Locale): String\n\nwindowed\n\nReturns a list of snapshots of the window of the given size sliding along this char sequence with the given step, where each snapshot is a string.\n\nfun CharSequence.windowed(\n\nÂ Â Â Â size:Â Int,\n\nÂ Â Â Â step:Â IntÂ =Â 1,\n\nÂ Â Â Â partialWindows:Â BooleanÂ =Â false\n\n): List<String>\n\nReturns a list of results of applying the given transform function to an each char sequence representing a view over the window of the given size sliding along this char sequence with the given step.\n\nfun <R> CharSequence.windowed(\n\nÂ Â Â Â size:Â Int,\n\nÂ Â Â Â step:Â IntÂ =Â 1,\n\nÂ Â Â Â partialWindows:Â BooleanÂ =Â false,\n\nÂ Â Â Â transform:Â (CharSequence)Â ->Â R\n\n): List<R>\n\nwindowedSequence\n\nReturns a sequence of snapshots of the window of the given size sliding along this char sequence with the given step, where each snapshot is a string.\n\nfun CharSequence.windowedSequence(\n\nÂ Â Â Â size:Â Int,\n\nÂ Â Â Â step:Â IntÂ =Â 1,\n\nÂ Â Â Â partialWindows:Â BooleanÂ =Â false\n\n): Sequence<String>\n\nReturns a sequence of results of applying the given transform function to an each char sequence representing a view over the window of the given size sliding along this char sequence with the given step.\n\nfun <R> CharSequence.windowedSequence(\n\nÂ Â Â Â size:Â Int,\n\nÂ Â Â Â step:Â IntÂ =Â 1,\n\nÂ Â Â Â partialWindows:Â BooleanÂ =Â false,\n\nÂ Â Â Â transform:Â (CharSequence)Â ->Â R\n\n): Sequence<R>\n\nwithIndex\n\nReturns a lazy Iterable that wraps each character of the original char sequence into an IndexedValue containing the index of that character and the character itself.\n\nfun CharSequence.withIndex(): Iterable<IndexedValue<Char>>\n\nzip\n\nReturns a list of pairs built from the characters of this and the other char sequences with the same index The returned list has length of the shortest char sequence.\n\ninfix fun CharSequence.zip(\n\nÂ Â Â Â other:Â CharSequence\n\n): List<Pair<Char,Â Char>>\n\nReturns a list of values built from the characters of this and the other char sequences with the same index using the provided transform function applied to each pair of characters. The returned list has length of the shortest char sequence.\n\nfun <V> CharSequence.zip(\n\nÂ Â Â Â other:Â CharSequence,\n\nÂ Â Â Â transform:Â (a:Â Char,Â b:Â Char)Â ->Â V\n\n): List<V>\n\nzipWithNext\n\nReturns a list of pairs of each two adjacent characters in this char sequence.\n\nfun CharSequence.zipWithNext(): List<Pair<Char,Â Char>>\n\nReturns a list containing the results of applying the given transform function to an each pair of two adjacent characters in this char sequence.\n\nfun <R> CharSequence.zipWithNext(\n\nÂ Â Â Â transform:Â (a:Â Char,Â b:Â Char)Â ->Â R\n\n): List<R>\n\nCompanion Object Extension Functions\n\nformat\n\nUses the provided format as a format string and returns a string obtained by substituting format specifiers in the format string with the provided arguments, using the default locale.\n\nfun String.Companion.format(\n\nÂ Â Â Â format:Â String,\n\nÂ Â Â Â vararg args:Â Any?\n\n): String\n\nUses the provided format as a format string and returns a string obtained by substituting format specifiers in the format string with the provided arguments, using the specified locale. If locale is null then no localization is applied.\n\nfun String.Companion.format(\n\nÂ Â Â Â locale:Â Locale?,\n\nÂ Â Â Â format:Â String,\n\nÂ Â Â Â vararg args:Â Any?\n\n): String"
    }
}