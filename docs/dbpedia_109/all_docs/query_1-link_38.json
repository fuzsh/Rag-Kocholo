{
    "id": "dbpedia_109_1",
    "rank": 38,
    "data": {
        "url": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_special_characters%3Fview%3Dpowershell-7.4",
        "read_more_link": "",
        "language": "en",
        "title": "about Special Characters - PowerShell",
        "top_image": "https://learn.microsoft.com/media/logos/logo-powershell-social.png",
        "meta_img": "https://learn.microsoft.com/media/logos/logo-powershell-social.png",
        "images": [
            "https://learn.microsoft.com/media/logos/logo-powershell-core.svg",
            "https://learn.microsoft.com/media/logos/logo-powershell-core.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-06T08:00:00+00:00",
        "summary": "",
        "meta_description": "Describes the special character sequences that control how PowerShell interprets the next characters in the sequence.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_special_characters?view=powershell-7.4",
        "text": "about_Special_Characters\n\nShort description\n\nDescribes the special character sequences that control how PowerShell interprets the next characters in the sequence.\n\nLong description\n\nPowerShell supports a set of special character sequences that are used to represent characters that aren't part of the standard character set. The sequences are commonly known as escape sequences.\n\nEscape sequences begin with the backtick character, known as the grave accent (ASCII 96), and are case-sensitive. The backtick character can also be referred to as the escape character.\n\nEscape sequences are only interpreted when contained in double-quoted (\") strings.\n\nPowerShell recognizes these escape sequences:\n\nSequence Description `0 Null `a Alert `b Backspace `e Escape (added in PowerShell 6) `f Form feed `n New line `r Carriage return `t Horizontal tab `u{x} Unicode escape sequence (added in PowerShell 6) `v Vertical tab\n\nPowerShell also has a special token to mark where you want parsing to stop. All characters that follow this token are used as literal values that aren't interpreted.\n\nSpecial parsing tokens:\n\nSequence Description -- Treat the remaining values as arguments not parameters --% Stop parsing anything that follows ~ Tilde\n\nNull (`0)\n\nThe null (`0) character appears as an empty space in PowerShell output. This functionality allows you to use PowerShell to read and process text files that use null characters, such as string termination or record termination indicators. The null special character isn't equivalent to the $null variable, which stores a null value.\n\nAlert (`a)\n\nThe alert (`a) character sends a beep signal to the computer's speaker. You can use this character to warn a user about an impending action. The following example sends two beep signals to the local computer's speaker.\n\nfor ($i = 0; $i -le 1; $i++){\"`a\"}\n\nBackspace (`b)\n\nThe backspace (`b) character moves the cursor back one character, but it doesn't delete any characters.\n\nThe example writes the word backup and then moves the cursor back twice. Then, at the new position, writes a space followed by the word out.\n\n\"backup`b`b out\"\n\nback out\n\nEscape (`e)\n\nNote\n\nThis special character was added in PowerShell 6.0.\n\nThe escape (`e) character is most commonly used to specify a virtual terminal sequence (ANSI escape sequence) that modifies the color of text and other text attributes such as bolding and underlining. These sequences can also be used for cursor positioning and scrolling. The PowerShell host must support virtual terminal sequences. You can check the boolean value of $Host.UI.SupportsVirtualTerminal to determine if these ANSI sequences are supported.\n\nFor more information about ANSI escape sequences, see the ANSI escape code article in Wikipedia.\n\nThe following example outputs text with a green foreground color.\n\n$fgColor = 32 # green \"`e[${fgColor}mGreen text`e[0m\"\n\nGreen text\n\nForm feed (`f)\n\nThe form feed (`f) character is a print instruction that ejects the current page and continues printing on the next page. The form feed character only affects printed documents. It doesn't affect screen output.\n\nNew line (`n)\n\nThe new line (`n) character inserts a line break immediately after the character.\n\nThis example shows how to use the new line character to create line breaks in a Write-Host command.\n\n\"There are two line breaks to create a blank line`n`nbetween the words.\"\n\nThere are two line breaks to create a blank line between the words.\n\nCarriage return (`r)\n\nThe carriage return (`r) character moves the output cursor to the beginning of the current line and continues writing. Any characters on the current line are overwritten.\n\nIn this example, the text before the carriage return is overwritten.\n\nWrite-Host \"These characters are overwritten.`rI want this text instead \"\n\nNotice that the text before the `r character isn't deleted, it's overwritten.\n\nI want this text instead written.\n\nHorizontal tab (`t)\n\nThe horizontal tab (`t) character advances to the next tab stop and continues writing at that point. By default, the PowerShell console has a tab stop at every eighth space.\n\nThis example inserts two tabs between each column.\n\n\"Column1`t`tColumn2`t`tColumn3\"\n\nColumn1 Column2 Column3\n\nUnicode character (`u{x})\n\nNote\n\nThis special character was added in PowerShell 6.0.\n\nThe Unicode escape sequence (`u{x}) allows you to specify any Unicode character by the hexadecimal representation of its code point. This includes Unicode characters above the Basic Multilingual Plane (> 0xFFFF) which includes emoji characters such as the thumbs up (`u{1F44D}) character. The Unicode escape sequence requires at least one hexadecimal digit and supports up to six hexadecimal digits. The maximum hexadecimal value for the sequence is 10FFFF.\n\nThis example outputs the up down arrow (â) symbol.\n\n\"`u{2195}\"\n\nVertical tab (`v)\n\nThe vertical tab (`v) character advances to the next vertical tab stop and writes the remaining output at that point. The rendering of the vertical tab is device and terminal dependent.\n\nWrite-Host \"There is a vertical tab`vbetween the words.\"\n\nThe following examples show the rendered output of the vertical tab in some common environments.\n\nThe Windows Console host application interprets (`v) as a special character with no extra spacing added.\n\nThere is a vertical tabâbetween the words.\n\nThe Windows Terminal renders the vertical tab character as a carriage return and line feed. The rest of the output is printed at the beginning of the next line.\n\nThere is a vertical tab between the words.\n\nOn printers or in a unix-based consoles, the vertical tab character advances to the next line and writes the remaining output at that point.\n\nThere is a vertical tab between the words.\n\nLine continuation\n\nThe backtick character can also be used at the end of a line as a signal to the PowerShell parser that the command continues on the next line. For more information, see about_Parsing.\n\nThe end-of-parameters token (--)\n\nThe end-of-parameters token (--) indicates that all arguments following it are to be passed in their actual form as though double quotes were placed around them. For example, using -- you can output the string -InputObject without using quotes or having it interpreted as a parameter:\n\nWrite-Output -- -InputObject\n\n-InputObject\n\nThis is a convention specified in the POSIX Shell and Utilities specification.\n\nStop-parsing token (--%)\n\nThe stop-parsing (--%) token prevents PowerShell from interpreting strings as PowerShell commands and expressions. This allows those strings to be passed to other programs for interpretation.\n\nPlace the stop-parsing token after the program name and before program arguments that might cause errors.\n\nIn this example, the Icacls command uses the stop-parsing token.\n\nicacls X:\\VMS --% /grant Dom\\HVAdmin:(CI)(OI)F\n\nPowerShell sends the following string to Icacls.\n\nX:\\VMS /grant Dom\\HVAdmin:(CI)(OI)F\n\nIn this second example, we pass the variable $HOME to the cmd.exe /c echo command twice.\n\ncmd.exe /c echo $HOME --% $HOME\n\nThe output shows that the first instance of $HOME is interpreted by PowerShell so that the value of the variable is passed to cmd. The second instance of $HOME comes after the stop-parsing token, so it is passed as a literal string.\n\nC:\\Users\\username $HOME\n\nFor more information about the stop-parsing token, see about_Parsing.\n\nTilde (~)\n\nThe tilde character (~) has special meaning in PowerShell. When it's used with PowerShell commands at the beginning of a path, PowerShell expands the tilde character to the user's home directory. If you use the tilde character anywhere else in a path, it's treated as a literal character.\n\nFor more information about the stop-parsing token, see about_Parsing.\n\nSee also"
    }
}