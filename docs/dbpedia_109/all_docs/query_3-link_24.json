{
    "id": "dbpedia_109_3",
    "rank": 24,
    "data": {
        "url": "https://www.unicode.org/reports/tr44/",
        "read_more_link": "",
        "language": "en",
        "title": "UAX #44: Unicode Character Database",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.unicode.org/webscripts/logo60s2.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Unicode® Standard Annex #44\n\nUnicode Character Database\n\nVersion Unicode 15.1.0 Editors Ken Whistler (ken@unicode.org) Date 2023-09-06 This Version https://www.unicode.org/reports/tr44/tr44-32.html Previous Version https://www.unicode.org/reports/tr44/tr44-30.html Latest Version https://www.unicode.org/reports/tr44/ Latest Proposed Update https://www.unicode.org/reports/tr44/proposed.html Revision 32\n\nSummary\n\nThis annex provides the core documentation for the Unicode Character Database (UCD). It describes the layout and organization of the Unicode Character Database and how it specifies the formal definitions of the Unicode Character Properties.\n\nStatus\n\nThis document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.\n\nA Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.\n\nPlease submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].\n\nContents\n\n1 Introduction\n\n2 Conformance\n\n2.1 Simple and Derived Properties\n\n2.2 Use of Default Values\n\n2.3 Stability of Releases\n\n3 Documentation\n\n3.1 Character Properties in the Standard\n\n3.2 The Character Property Model\n\n3.3 NamesList.html\n\n3.4 StandardizedVariants.html\n\n3.5 Emoji Variation Sequences\n\n3.6 Unihan and UAX #38\n\n3.7 UTC-Source Ideographs and UAX #45\n\n3.8 Data File Comments\n\n3.9 Obsolete Documentation Files\n\n4 UCD Files\n\n4.1 Directory Structure\n\n4.2 File Format Conventions\n\n4.3 File List\n\n4.4 Zipped Files\n\n4.5 UCD in XML\n\n5 Properties\n\n5.1 Property Index\n\n5.2 About the Property Table\n\n5.3 Property Definitions\n\n5.4 Derived Extracted Properties\n\n5.5 Contributory Properties\n\n5.6 Case and Case Mapping\n\n5.7 Property Value Lists\n\n5.8 Property and Property Value Aliases\n\n5.9 Matching Rules\n\n5.10 Invariants\n\n5.11 Validation\n\n5.12 Deprecation\n\n5.13 Property APIs\n\n5.14 Character Age\n\n6 Test Files\n\n6.1 NormalizationTest.txt\n\n6.2 Segmentation Test Files and Documentation\n\n6.3 Bidirectional Test Files\n\n7 UCD Change History\n\nAcknowledgments\n\nReferences\n\nModifications\n\nNote: the information in this annex is not intended as an exhaustive description of the use and interpretation of Unicode character properties and behavior. It must be used in conjunction with the data in the other files in the Unicode Character Database, and relies on the notation and definitions supplied in The Unicode Standard. All chapter references are to Version 15.1.0 of the standard unless otherwise indicated.\n\n1 Introduction\n\nThe Unicode Standard is far more than a simple encoding of characters. The standard also associates a rich set of semantics with each encoded character—properties that are required for interoperability and correct behavior in implementations, as well as for Unicode conformance. These semantics are cataloged in the Unicode Character Database (UCD), a collection of data files which contain the Unicode character code points and character names. The data files define the Unicode character properties and mappings between Unicode characters (such as case mappings).\n\nThis annex describes the UCD and provides a guide to the various documentation files associated with it. Additional information about character properties and their use is contained in the Unicode Standard and its annexes. In particular, implementers should familiarize themselves with the formal definitions and conformance requirements for properties detailed in Section 3.5, Properties in [Unicode] and with the material in Chapter 4, Character Properties in [Unicode]. Additional discussion about the Unicode character property model can be found in [UTR23].\n\nThe latest version of the UCD is always located on the Unicode website at:\n\nhttps://www.unicode.org/Public/UCD/latest/\n\nThe specific files for the UCD associated with this version of the Unicode Standard (15.1.0) are located at:\n\nhttps://www.unicode.org/Public/15.1.0/\n\nStable, archived versions of the UCD associated with all earlier versions of the Unicode Standard can be accessed from:\n\nhttps://www.unicode.org/ucd/\n\nFor a description of the changes in the UCD for this version and earlier versions, see the UCD Change History.\n\n2 Conformance\n\nThe Unicode Character Database is an integral part of the Unicode Standard.\n\nThe UCD contains normative property and mapping information required for implementation of various Unicode algorithms such as the Unicode Bidirectional Algorithm, Unicode Normalization, and Unicode Casefolding. The data files also contain additional informative and provisional character property information.\n\nEach specification of a Unicode algorithm, whether specified in the text of [Unicode] or in one of the Unicode Standard Annexes, designates which data file(s) in the UCD are needed to provide normative property information required by that algorithm.\n\nFor information on the meaning and application of the terms, normative, informative, contributory, and provisional, see Section 3.5, Properties in [Unicode].\n\nFor information about the applicable terms of use for the UCD, see the Unicode Terms of Use.\n\n2.1 Simple and Derived Properties\n\n2.1.1 Simple Properties\n\nSome character properties in the UCD are simple properties. This status has no bearing on whether or not the properties are normative, but merely indicates that their values are not derived from some combination of other properties.\n\n2.1.2 Derived Properties\n\nOther character properties are derived. This means that their values are derived by rule from some other combination of properties. Generally such rules are stated as set operations, and may or may not include explicit exception lists for individual characters.\n\nCertain simple properties are defined merely to make the statement of the rule defining a derived property more compact or general. Such properties are known as contributory properties. Sometimes these contributory properties are defined to encapsulate the messiness inherent in exception lists. At other times, a contributory property may be defined to help stabilize the definition of an important derived property which is subject to stability guarantees.\n\nDerived character properties are not considered second-class citizens among Unicode character properties. They are defined to make implementation of important algorithms easier to state. Included among the first-class derived properties important for such implementations are: Uppercase, Lowercase, XID_Start, XID_Continue, Math, and Default_Ignorable_Code_Point, all defined in DerivedCoreProperties.txt, as well as derived properties for the optimization of normalization, defined in DerivedNormalizationProps.txt.\n\nImplementations should simply use the derived properties, and should not try to rederive them from lists of simple properties and collections of rules, because of the chances for error and divergence when doing so.\n\nDefinitions of property derivations are provided for information only, typically in comment fields in the data files. Such definitions may be refactored, refined, or corrected over time. These definitions are presented in a modified set notation, expressed as set additions and/or subtractions of various other property values. For example:\n\n# Derived Property: ID_Start # Characters that can start an identifier. # Generated from: # Lu + Ll + Lt + Lm + Lo + Nl # + Other_ID_Start # - Pattern_Syntax # - Pattern_White_Space\n\nWhen interpreting definitions of derived properties of this sort, keep in mind that set subtraction is not a commutative operation. Thus \"Lo + Lm - Pattern_Syntax\" defines a different set than \"Lo - Pattern_Syntax + Lm\". The order of property set operations stated in the definitions affects the composition of the derived set.\n\nIf there are any cases of mismatches between the definition of a derived property as listed in DerivedCoreProperties.txt or similar data files in the UCD, and the definition of a derived property as a set definition rule, the explicit listing in the data file should always be taken as the normative definition of the property. As described in Stability of Releases the property listing in the data files for any given version of the standard will never change for that version.\n\n2.1.3 Properties Dependent on External Specifications\n\nIn limited cases, a Unicode character property defined in the Unicode Character Database may have an external dependency on another specification which is not a part of the Unicode Standard, and whose data is not formally part of the UCD. In such cases, version stability for the UCD is attained by requiring that dependency to be based on a known, published version of the external specification.\n\nStarting with Version 10.0 of the UCD and continuing through Version 12.1, the clear example of such an external dependency was the derivation of some segmentation-related character properties, in part based on emoji properties associated with UTS #51, \"Unicode Emoji\" [UTS51]. The details of the derivation were described in the respective annexes, [UAX14] and [UAX29], as well as in the documentation portions of the associated UCD property files. See [Data14] and [Props]. The version of UTS #51 used for those segmentation properties in each of the relevant versions of the UCD was clearly identified in those annexes and data files. Starting with Version 13.0 of the UCD, however, the emoji properties which the UCD previously depended on have been formally incorporated into the UCD, so that they no longer constitute an external dependency.\n\nAn external dependency may impact either a simple or a derived property.\n\n2.2 Use of Default Values\n\nUnicode character properties have default values. Default values are the value or values that a character property takes for an unassigned code point, or in some instances, for designated subranges of code points, whether assigned or unassigned. For example, the default value of a binary Unicode character property is always \"N\".\n\nFor the formal discussion of default values, see D26 in Section 3.5, Properties in [Unicode]. For conventions related to default values in various data files of the UCD and for documentation regarding the particular default values of individual Unicode character properties, see Default Values.\n\n2.3 Stability of Releases\n\nJust as for the Unicode Standard as a whole, each version of the UCD, once published, is absolutely stable and will never change. Each released version is archived in a directory on the Unicode website, with a directory number associated with that version. URLs pointing to that version's directory are also stable and will be maintained in perpetuity.\n\nAny errors discovered for a released version of the UCD are noted in [Errata], and if appropriate will be corrected in a subsequent version of the UCD.\n\nStability guarantees constraining how Unicode character properties can (or cannot) change between releases of the UCD are documented in the Unicode Consortium Stability Policies [Stability].\n\n2.3.1 Changes to Properties Between Releases\n\nUpdates to character properties in the Unicode Character Database may be required for any of three reasons:\n\nTo cover new characters added to the standard\n\nTo add new character properties to the standard\n\nTo change the assigned values for a property for some characters already in the standard\n\nWhile the Unicode Consortium endeavors to keep the values of all character properties as stable as possible between versions, occasionally circumstances may arise which require changing them. In particular, as less well-documented scripts, such as those for minority languages, or historic scripts are added to the standard, the exact character properties and behavior may not fully be known when the script is first encoded. The properties for some of these characters may change as further information becomes available or as implementations turn up problems in the initial property assignments. As far as possible, any readjustment of property values based on growing implementation experience is made to be compatible with established practice.\n\nAll changes to normative or informative property values, to the status or type of a property, or to property or property value aliases, must be approved by an explicit decision taken by the Unicode Technical Committee. Changes to provisional property values are subject to less stringent oversight.\n\nOccasionally, a character property value is changed to prevent incorrect generalizations about a character's use based on its nominal property values. For example, U+200B ZERO WIDTH SPACE was originally classified as a space character (General_Category=Zs), but it was reclassified as a Format character (General_Category=Cf) to clearly distinguish it from space characters in its function as a format control for line breaking.\n\nThere is no guarantee that a particular value for an enumerated property will actually have characters associated with it. Also, because of changes in property value assignments between versions of the standard, a property value that once had characters associated with it may later have none. Such conditions and changes are rare, but implementations must not assume that all property values are associated with non-null sets of characters. For example, currently the special Script property value Katakana_Or_Hiragana has no characters associated with it.\n\n2.3.2 Obsolete Properties\n\nIn some instances an entire property may become obsolete. For example, the ISO_Comment property was once used to keep track of annotations for characters used in the production of name lists for ISO/IEC 10646 code charts. As of Unicode 5.2.0 that property became obsolete, and its value is now defaulted to the null string for all Unicode code points.\n\nAn obsolete property is never removed from the UCD.\n\n2.3.3 Deprecated Properties\n\nOccasionally an obsolete property may also be formally deprecated. This is an indication that the property is no longer recommended for use, perhaps because its original intent has been replaced by another property or because its specification was somehow defective. See also the general discussion of Deprecation.\n\nA deprecated property is never removed from the UCD.\n\nTable 1 lists the properties that are formally deprecated as of this version of the Unicode Standard.\n\n2.3.4 Stabilized Properties\n\nAnother possibility is that an obsolete property may be declared to be stabilized. Such a determination does not indicate that the property should or should not be used; instead it is a declaration that the UTC (Unicode Technical Committee) will no longer actively maintain the property or extend it for newly encoded characters. The property values of a stabilized property are frozen as of a particular release of the standard.\n\nA stabilized property is never removed from the UCD.\n\nTable 2 lists the properties that are formally stabilized as of this version of the Unicode Standard.\n\n3 Documentation\n\nThis annex provides the core documentation for the UCD, but additional information about character properties is available in other parts of the standard and in additional documentation files contained within the UCD.\n\n3.1 Character Properties in the Standard\n\nThe formal definitions related to character properties used by the Unicode Standard are documented in Section 3.5, Properties in [Unicode]. Understanding those definitions and related terminology is essential to the appropriate use of Unicode character properties.\n\nSee Section 4.1, Unicode Character Database, in [Unicode] for a general discussion of the UCD and its use in defining properties. The rest of Chapter 4 provides important explanations regarding the meaning and use of various normative character properties.\n\n3.2 The Character Property Model\n\nFor a general discussion of the property model which underlies the definitions associated with the UCD, see Unicode Technical Report #23, \"The Unicode Character Property Model\" [UTR23]. That technical report is informative, but over the years various content from it has been incorporated into normative portions of the Unicode Standard, particularly for the definitions in Chapter 3.\n\nUTR #23 presents the important distinction between properties defined for strings (in contrast to properties defined for characters or code points) and character properties that have values that are strings. The latter are referred to as string-valued properties in UTR #23 and in this annex. UTR #23 also discusses string functions and their relation to character properties.\n\n3.3 NamesList.html\n\nNamesList.html formally describes the format of the NamesList.txt data file in BNF. That data file is used to drive the PDF formatting of the Unicode code charts and names list. See also Section 24.1, Character Names List, in [Unicode] for a detailed discussion of the conventions used in the Unicode names list as formatted for the online code charts.\n\n3.4 StandardizedVariants.html\n\nStandardizedVariants.html has been obsoleted as of Version 9.0 of the UCD. This file formerly documented standardized variants, showing a representative glyph for each. It was closely tied to the data file, StandardizedVariants.txt, which defines those sequences normatively.\n\nThe function of StandardizedVariants.html to show representative glyphs for standardized variants has been superseded. There are now better means of illustrating the glyphs. Many standardized variation sequences are shown in the Unicode code charts directly, in summary sections at the ends of the names list for any block which contains them. Glyphs for standardized variants of CJK compatibility ideographs are also shown directly in the Unicode code charts.\n\n3.5 Emoji Variation Sequences\n\nEmoji variation sequences are a special class of variation sequences involving emoji characters. They are divided into two subtypes: an emoji presentation sequence, consisting of an emoji character base followed by the variation selector U+FE0F, and a text presentation sequence, consisting of an emoji character base followed by the variation selector U+FE0E. Such sequences come in pairs: the text presentation sequence shown with a black and white presentation, as seen in the Unicode code charts, and the emoji presentation sequence shown with a colorful icon, as usually seen in implementations on mobile devices and elsewhere.\n\nStarting with Version 9.0.0, the following page in the Unicode emoji subsite area shows appropriate representative glyphs for all emoji variation sequences, with separate columns for text presentation sequences and for emoji presentation sequences:\n\nhttps://www.unicode.org/emoji/charts/emoji-variants.html\n\nThe data file which defines the exact list of emoji variation sequences is emoji-variation-sequences.txt. That file is maintained in the UCD, but emoji variation sequences are documented in Unicode Technical Standard #51, Unicode Emoji [UTS51].\n\n3.6 Unihan and UAX #38\n\nUnicode Standard Annex #38, \"Unicode Han Database (Unihan)\" [UAX38] describes the format and content of the Unihan Database [Unihan], which collects together all property information for CJK unified ideographs. That annex also specifies in detail which of the Unihan character properties are normative, informative, or provisional.\n\nThe Unihan Database contains extensive and detailed mapping information for CJK unified ideographs encoded in the Unicode Standard, but it is aimed only at those ideographs, not at other characters used in the East Asian context in general. In contrast, East Asian legacy character sets, including important commercial and national character set standards, contain many non-CJK characters. As a result, the Unihan Database must be supplemented from other sources to establish mapping tables for those character sets.\n\nThe majority of the content of the Unihan Database is released for each version of the Unicode Standard as a collection of Unihan data files in the UCD. Because of their large size, these data files are released only as a zipped file, Unihan.zip. The details of the particular data files in Unihan.zip and the CJK properties each one contains are provided in [UAX38]. For versions of the UCD prior to Version 5.2.0, all of the CJK properties were listed together in a very large, single file, Unihan.txt.\n\n3.7 UTC-Source Ideographs and UAX #45\n\nUnicode Standard Annex #45, \"U-Source Ideographs\" [UAX45] describes the format of USourceData.txt, which lists all of the information for UTC-Source ideographs.\n\n3.8\n\nIn addition to the specific documentation files for the UCD, individual data files often contain extensive header comments describing their content and any special conventions used in the data.\n\nIn some instances, individual property definition sections also contain comments with information about how the property may be derived. Such comments are informative; while they are intended to convey the intent of the derivation, in case of any mismatch between a statement of a derivation in a comment field and the actual listing of the derived property, the list is considered to be definitive. See Simple and Derived Properties.\n\n3.9 Obsolete Documentation Files\n\nUCD.html was formerly the primary documentation file for the UCD. As of Version 5.2.0, its content has been wholly incorporated into this document.\n\nUnihan.html was formerly the primary documentation file for the Unihan Database. As of Version 5.1.0, its content has been wholly incorporated into [UAX38].\n\nVersions of the Unicode Standard prior to Version 4.0.0 contained small, focused documentation files, UnicodeCharacterDatabase.html, PropList.html, and DerivedProperties.html, which were later consolidated into UCD.html.\n\nStandardizedVariants.html has been obsoleted as of Version 9.0.0. See Section 3.4, StandardizedVariants.html.\n\n4 UCD Files\n\nThe heart of the UCD consists of the data files themselves. This section describes the directory structure for the UCD, the format conventions for the data files, and provides documentation for data files not documented elsewhere in this annex.\n\n4.1 Directory Structure\n\nEach version of the UCD is released in a separate, numbered directory under the Public directory on the Unicode website. The content of that directory is complete for that release. It is also stable—once released, it will be archived permanently in that directory, unchanged, at a stable URL.\n\nThe specific files for the UCD associated with this version of the Unicode Standard (15.1.0) are located at:\n\nhttps://www.unicode.org/Public/15.1.0/\n\nThe latest released version of the UCD is always accessible via the following stable URL:\n\nhttps://www.unicode.org/Public/UCD/latest/\n\nZipped copies of the latest released version of the UCD are always accessible via the following stable URL:\n\nhttps://www.unicode.org/Public/zipped/latest/\n\nPrior to Version 6.3.0, access to the latest released version of the UCD was via the following stable URL:\n\nhttps://www.unicode.org/Public/UNIDATA/\n\nThat \"UNIDATA\" URL will be maintained, but is no longer recommended, because it points to the ucd subdirectory of the latest release, rather than to the parent directory for the release. The \"UNIDATA\" naming convention is also very old, and does not follow the directory naming conventions currently used for other data releases in the Public directory on the Unicode website.\n\n4.1.1 UCD Files Proper\n\nThe UCD proper is located in the ucd subdirectory of the numbered version directory. That directory contains all of the documentation files and most of the data files for the UCD, including some data files for derived properties.\n\nAlthough all UCD data files are version-specific for a release and most contain internal date and version stamps, the file names of the released data files do not differ from version to version. When linking to a version-specific data file, the version will be indicated by the version number of the directory for the release.\n\nAll files for derived extracted properties are in the extracted subdirectory of the ucd subdirectory. See Derived Extracted Properties for documentation regarding those data files and their content.\n\nA number of auxiliary properties are specified in files in the auxiliary subdirectory of the ucd subdirectory. It contains data files specifying properties associated with Unicode Standard Annex #29, \"Unicode Text Segmentation\" [UAX29] and with Unicode Standard Annex #14, \"Unicode Line Breaking Algorithm\" [UAX14], as well as test data for those algorithms. See Segmentation Test Files and Documentation for more information about the test data.\n\nCertain data files associated with emoji properties are maintained in the emoji subdirectory of the ucd subdirectory. Those data files define the simple character properties associated with emoji characters, as well as the emoji variation sequences. Other data files associated with emoji, including those which define the RGI (\"recommended for general interchange\") sets of various types of emoji sequences, as well as emoji test data, are maintained elsewhere, and are not considered formally a part of the UCD. See [UTS51] for documentation regarding those data files and their content.\n\n4.1.2 UCD XML Files\n\nThe XML version of the UCD is located in the ucdxml subdirectory of the numbered version directory. See the UCD in XML for more details.\n\n4.1.3 Charts\n\nThe code charts specific to a version of Unicode are archived as a single large PDF file in the charts subdirectory of the numbered version directory. See the readme.txt in that subdirectory and the general web page explaining the Unicode Code Charts for more details.\n\n4.1.4 Beta Review Considerations\n\nPrior to the formal release of a version of the UCD, draft files are made available for review in a subdirectory named draft, under the /Public directory on the Unicode server. The files in this directory may include temporary files, including documentation of differences between draft versions. The number of reviews is not fixed—a beta review will always take place, but an alpha review is optional.\n\nNotices contained in a ReadMe.txt file in the draft/UCD directory during the beta review period also make it clear that that directory contains preliminary material under review, rather than a final, stable release.\n\n4.1.5 File Directory Differences for Early Releases\n\nThe UCD in XML was introduced in Version 5.1.0, so UCD directories prior to that do not contain the ucdxml subdirectory.\n\nUCD directories prior to Version 13.0.0 do not contain the emoji subdirectory.\n\nUCD directories prior to Version 4.1.0 do not contain the auxiliary subdirectory.\n\nUCD directories prior to Version 3.2.0 do not contain the extracted subdirectory.\n\nThe general structure of the file directory for a released version of the UCD described above applies to Versions 4.1.0 and later. Prior to Version 4.1.0, versions of the UCD were not self-contained, complete sets of data files for that version, but instead only contained any new data files or any data files which had changed since the prior release.\n\nBecause of this, the property files for a given version prior to Version 4.1.0 can be spread over several directories. Consult the component listings at Enumerated Versions to find out which files in which directories comprise a complete set of data files for that version.\n\nThe directory naming conventions and the file naming conventions also differed prior to Version 4.1.0. So, for example, Version 4.0.0 of the UCD is contained in a directory named 4.0-Update, and Version 4.0.1 of the UCD in a directory named 4.0-Update1. Furthermore, for these earlier versions, the data file names do contain explicit version numbers.\n\n4.2 File Format Conventions\n\nFiles in the UCD use the format conventions described in this section, unless otherwise specified.\n\n4.2.1 Data Fields\n\nEach line of data consists of fields separated by semicolons. The fields are numbered starting with zero.\n\nThe first field (0) of each line in the Unicode Character Database files represents a code point or range. The remaining fields (1..n) are properties associated with that code point.\n\nLeading and trailing spaces within a field are not significant. However, no leading or trailing spaces are allowed in any field of UnicodeData.txt. For legacy reasons, no spaces are allowed before or after the semicolon in LineBreak.txt and in EastAsianWidth.txt.\n\nThe Unihan data files [Unihan] in the UCD have a separate format, using tab characters instead of semicolons to separate fields. See [UAX38] for the detailed specification of the format of the Unihan data files. The data files TangutSources.txt and NushuSources.txt also use this format.\n\n4.2.2 Code Points and Sequences\n\nCode points are expressed as hexadecimal numbers with four to six digits. (See Appendix A, Notational Conventions in [Unicode] for a full, formal definition of this convention.) They are written without the \"U+\" prefix in all data files except the Unihan data files. The Unihan data files use the \"U+\" prefix for all Unicode code points, to distinguish them from other decimal and hexadecimal numerical references occurring in their data fields.\n\nWhen a data field contains a sequence of code points, spaces separate the code points.\n\n4.2.3 Code Point Ranges\n\nA range of code points is specified by the form \"X..Y\".\n\nEach code point in a range has the associated property value specified on a data file. For example (from Blocks.txt):\n\n0000..007F; Basic Latin 0080..00FF; Latin-1 Supplement\n\nFor backward compatibility, ranges in the file UnicodeData.txt are specified by entries for the start and end characters of the range, rather than by the form \"X..Y\". The start character is indicated by a range identifier, followed by a comma and the string \"First\", in angle brackets. This entry takes the place of a regular character name in field 1 for that line. The end character is indicated on the next line with the same range identifier, followed by a comma and the string \"Last\", in angle brackets:\n\n4E00;<CJK Ideograph, First>;Lo;0;L;;;;;N;;;;; 9FEF;<CJK Ideograph, Last>;Lo;0;L;;;;;N;;;;;\n\nFor character ranges using this convention, the names of all characters in the range are algorithmically derivable. See Section 4.8, Name in [Unicode] for more information on derivation of character names for such ranges.\n\n4.2.4\n\nU+0023 NUMBER SIGN (\"#\") is used to indicate comments: all characters from the number sign to the end of the line are considered part of the comment, and are disregarded when parsing data.\n\nIn many files, the comments on data lines use a common format, as illustrated here (from Scripts.txt):\n\n09B2 ; Bengali # Lo BENGALI LETTER LA\n\nThe first part of a comment using this common format is the General_Category value, provided for information. This is followed by the character name for the code point in the first field (0).\n\nThe printing of the General_Category value is suppressed in instances where it would be redundant, as for DerivedGeneralCategory.txt, in which the value of the property value in the data field is already the General_Category value.\n\nThe symbol \"L&\" indicates characters of General_Category Lu, Ll, or Lt (uppercase, lowercase, or titlecase letter). For example:\n\n0386 ; Greek # L& GREEK CAPITAL LETTER ALPHA WITH TONOS\n\nL& as used in these comments is an alias for the derived LC value (cased letter) for the General_Category property, as documented in PropertyValueAliases.txt.\n\nWhen the data line contains a range of code points, this common format for a comment also indicates a range of character names, separated by \"..\", as illustrated here (from DerivedNumericType.txt):\n\n00BC..00BE ; Numeric # No [3] VULGAR FRACTION ONE QUARTER..VULGAR FRACTION THREE QUARTERS\n\nNormally, consecutive characters with the same property value would be represented by a single code point range. In data files using this comment convention, such ranges are subdivided so that all characters in a range also have the same General_Category value (or LC). While this convention results in more ranges than are strictly necessary, it makes the contents of the ranges clearer.\n\nWhen a code point range occurs, the number of items in the range is included in the comment (in square brackets), immediately following the General_Category value.\n\nThe comments are purely informational, and may change format or be omitted in the future. They should not be parsed for content. However, see Section 4.2.10 @missing Conventions.\n\n4.2.5 Code Point Labels\n\nSurrogate code points, private-use characters, control codes, noncharacters, and unassigned code points have no names. When such code points are listed in the data files, for example to list their General_Category values, the comments use code point labels instead of character names. For example (from DerivedCoreProperties.txt):\n\n2065 ; Default_Ignorable_Code_Point # Cn <reserved-2065>\n\nAlthough code point labels are not formally character names and are not considered values of the Name property for characters, they are designed to be maintained as unique values within the namespace for Unicode character names. Hence, implementations can safely use them as identifiers for code points without overlap with actual character names.\n\nCode point labels use one of the tags as documented in Section 4.8, Name in [Unicode] and as shown in Table 3, followed by \"-\" and the code point expressed in hexadecimal. The entire label is then enclosed in angle brackets when listed in data files of the UCD.\n\n4.2.6 Multiple Properties in One Data File\n\nWhen a file contains the specification for multiple properties, the second field specifies the name of the property and the third field specifies the property value. For example (from DerivedNormalizationProps.txt):\n\n03D2 ; FC_NFKC; 03C5 # L& GREEK UPSILON WITH HOOK SYMBOL 03D3 ; FC_NFKC; 03CD # L& GREEK UPSILON WITH ACUTE AND HOOK SYMBOL\n\n4.2.7 Binary Property Values\n\nFor binary properties, the second field specifies the name of the applicable property, with the implied value of the property being \"True\". Only the ranges of characters with the binary property value of \"Y\" (= True) are listed. For example (from PropList.txt):\n\n1680 ; White_Space # Zs OGHAM SPACE MARK 2000..200A ; White_Space # Zs [11] EN QUAD..HAIR SPACE\n\n4.2.8 Multiple Values for Properties\n\nWhen a data file defines a property which may take multiple values for a single code point, the multiple values are expressed in a space-delimited list. For example (from ScriptExtensions.txt):\n\n0640 ; Adlm Arab Mand Mani Phlp Rohg Sogd Syrc # Lm ARABIC TATWEEL\n\nIn some cases—but not all—the order of multiple elements in a space-delimited list may be significant. When the order of multiple elements is significant, it is documented along with the property itself. For example (from Unihan_Readings.txt), for the tag kMandarin, when there are two values for a code point, the first value is used to indicate a preferred pronunciation for zh-Hans (CN) and the second a preferred pronunciation for zh-Hant (TW).\n\nFor further discussion, see Section 5.7.6 Properties Whose Values Are Sets of Values.\n\n4.2.9 Default Values\n\nEntries for a code point may be omitted in a data file if the code point has a default value for the property in question.\n\nFor most string-valued properties, including the definition of foldings and mappings, the default value is the code point of the character itself.\n\nFor some string-valued properties which define a property that applies primarily to a small, defined set of code points, the default value is <none>, which is interpreted as no value is defined. (This contrasts with specification of an actual value consisting of an empty string. See Section 4.2.11 Empty Fields.) Current examples include Bidi_Paired_Bracket, as well as some Unihan-related properties.\n\nFor miscellaneous properties which take strings as values, such as the Unicode Name property, the default value is an empty string.\n\nFor binary properties except for Extended_Pictographic, the default value is always \"N\" (= False) and is always omitted.\n\nFor enumerated and catalog properties, the default value is listed in a comment. For example (from Scripts.txt):\n\n# All code points not explicitly listed for Script # have the value Unknown (Zzzz).\n\nA few properties of the enumerated type have multiple default values. In those cases, comments in the file explain the code point ranges for applicable values. See also Table 4.\n\nDefault values are also listed in specially-formatted comment lines, using the keyword \"@missing\". Parsers which extract and process these lines can algorithmically determine the default values for all code points. See @missing Conventions for details about the syntax and use of these lines.\n\nBecause of the legacy format constraints for UnicodeData.txt, that file contains no specific information about default values for properties. The default values for fields in UnicodeData.txt are documented in Table 4 below if they cannot be derived from the general rules about default values for properties.\n\nThe file ArabicShaping.txt is also exceptional, because it omits the listing of many characters whose property value (jt=T) can be derived by rule. Adding an \"@missing\" line to that file would result in the wrong interpretation of Joining_Type values for omitted characters. The full explicit listing of Joining_Type values and the correct \"@missing\" line for the default Joining_Type value (jt=U) can be found in the file DerivedJoiningType.txt instead.\n\nDefault values for common catalog, enumeration, and numeric properties are listed in Table 4, along with the exceptional binary property, Extended_Pictographic. Further explanation is provided below the table, in those cases where the default values are complex, as indicated in the third column.\n\n4.2.9.1 Complex Default Values\n\nComplex default values are those which take multiple values, contingent on code point ranges or other conditions. Complex default values other than those specified in the \"@missing\" line are explicitly listed in the relevant property file, except for instances noted in this section. This means that a parser extracting property values from the UCD should never encounter an ambiguous condition for which the default value of a property for a particular code point is unclear.\n\nBidi_Class:\n\nSee Unicode Standard Annex #9, \"Unicode Bidirectional Algorithm\" [UAX9] and DerivedBidiClass.txt for full details.\n\nEast_Asian_Width:\n\nThis property defaults to Neutral for most code points, but defaults to Wide for unassigned code points in blocks associated with CJK ideographs. See Unicode Standard Annex #11, \"East Asian Width\" [UAX11] and EastAsianWidth.txt for documentation of the default values and DerivedEastAsianWidth.txt for the full listing of values.\n\nLine_Break:\n\nThis property defaults to Unknown for most code points, but defaults to ID for unassigned code points in blocks associated with CJK ideographs, and in blocks in the ranges U+1F000..U+1FAFF and U+1FC00..U+1FFFD. The property defaults to PR for unassigned code points in the Currency Symbols block. See Unicode Standard Annex #14, \"Unicode Line Breaking Algorithm\" [UAX14] and LineBreak.txt for documentation of the default values and DerivedLineBreak.txt for the full listing of values.\n\nExtended_Pictographic:\n\nThis property defaults to N (= False) for most code points, but defaults to Y (= True) for unassigned code points in blocks in the ranges U+1F000..U+1FAFF and U+1FC00..U+1FFFD. Those ranges are correlated with the ranges associated with default values for the Line_Break property, and have the same rationale. They help future-proof the behavior of Unicode segmentation algorithms for code point ranges most likely to be used for future assignment of new emoji characters.\n\nVertical_Orientation:\n\nThis property defaults to Rotated (R) for most code points, but defaults to Upright (U) for unassigned code points in blocks associated with scripts that are themselves predominantly Upright, in blocks for some notational systems, and in blocks predominantly associated with pictographic symbols and emoji. See Unicode Standard Annex #50, \"Unicode Vertical Text Layout\" [UAX50] and VerticalOrientation.txt for full details.\n\n4.2.10 @missing Conventions\n\nSpecially-formatted comment lines with the keyword \"@missing\" are used to define default property values for ranges of code points not explicitly listed in a data file. These lines follow regular conventions that make them machine-readable.\n\nAn @missing line starts with the comment character \"#\", followed by a space, then the \"@missing\" keyword, followed by a colon, another space, a code point range, and a semicolon. Then the line typically continues with a semicolon-delimited list of one or more default property values. For example:\n\n# @missing: 0000..10FFFF; Unknown\n\nIn general, the code point range and semicolon-delimited list follow the same syntactic conventions as the data file in which the @missing line occurs, so that any parser which interprets that data file can easily be adapted to also parse and interpret an @missing line to pick up default property values for code points.\n\n@missing lines are also supplied for many properties in the file PropertyValueAliases.txt. In this case, because there are many @missing lines in that single data file, each @missing line in that file uses the syntactic pattern code_point_range; property_name; default_prop_val.\n\nAn @missing line is never provided for a binary property, because the default value for binary properties is always \"N\" and need not be defined redundantly for each binary property.\n\nBecause of the addition of property names when @missing lines are included in PropertyValueAliases.txt, there are currently two syntactic patterns used for @missing lines, as summarized schematically below:\n\ncode_point_range; default_prop_val\n\ncode_point_range; property_name; default_prop_val\n\nIn this schematic representation, \"default_prop_val\" stands in for either an explicit property value or for a special tag such as <none> or <script>.\n\nPattern #1 is used in most primary and derived UCD files. For example:\n\n# @missing: 0000..10FFFF; <none>\n\nPattern #2 is used in PropertyValueAliases.txt and in DerivedNormalizationProps.txt, both of which contain values associated with many properties. For example:\n\n# @missing: 0000..10FFFF; NFD_QC; Yes\n\nThe special tag values which may occur in the default_prop_val field in an @missing line are interpreted as follows:\n\nStarting with Version 15.0, some data files in the UCD may contain multiple @missing lines defined for the same property. When multiple @missing lines are defined this way, they are to be interpreted as follows: Each successive @missing line specifies an overriding range value for all previous @missing definitions. This convention allows a generic default value to be specified first for the entire Unicode code point range, followed by other specific default values for more constrained, specific sub-ranges. This enables an easy-to-understand and easy-to-maintain way of handling complex default values, as for the Bidi_Class or Line_Break properties. (See Complex Default Values.) The following simple example for East_Asian_Width, extracted from DerivedEastAsianWidth.txt, illustrates this mechanism:\n\n# @missing: 0000..10FFFF; Neutral # @missing: 3400..4DBF; Wide # @missing: 4E00..9FFF; Wide # @missing: F900..FAFF; Wide # @missing: 20000..2FFFD; Wide # @missing: 30000..3FFFD; Wide\n\nImplementation of parsing for multiple @missing lines for a single property is straightforward. Each time an @missing line is encountered, simply assign the given default value to the specified range. With this strategy, each successive @missing line will automatically override any prior assigned values for a given sub-range.\n\n4.2.11 Empty Fields\n\nThe data file UnicodeData.txt defines many property values in each record. When a field in a data line for a code point is empty, that indicates that the property takes the default value for that code point. For example:\n\n0022;QUOTATION MARK;Po;0;ON;;;;;N;;;;;\n\nIn that data line, the empty numeric fields indicate that the value of Numeric_Value for U+0022 is NaN and that the value of Numeric_Type is None. The empty case mapping fields indicate that the value of Simple_Uppercase_Mapping for U+0022 takes the default value, namely the code point itself, and so forth.\n\nThe interpretation of empty fields in other data files of the UCD differs. In the case of data files which define string-valued properties, the omission of an entry for a code point indicates that the property takes the default value for that code point. However, if there is an entry for a code point, but the property value field for that entry is empty, that indicates that the property value is an explicit empty string (\"\"). For example, the derived property NFKC_Casefold may map a code point to a sequence of code points, to a single different code point, to the same single code point, or to no code point at all (an empty string). See the following entries from the data file DerivedNormalizationProps.txt:\n\n00AA ; NFKC_CF; 0061 # Lo FEMININE ORDINAL INDICATOR 00AD ; NFKC_CF; # Cf SOFT HYPHEN 00AF ; NFKC_CF; 0020 0304 # Sk MACRON\n\nThe empty field for U+00AD indicates that the property NFKC_Casefold maps SOFT HYPHEN to an empty string. By contrast, the absence of the entry for U+00AE in the data file indicates that the property NFKC_Casefold maps U+00AE REGISTERED SIGN to itself—the default value.\n\n4.2.12 Text Encoding\n\nThe data files use UTF-8. Unless otherwise noted, non-ASCII characters only appear in comments.\n\nThe Unihan data files [Unihan] in the UCD make extensive use of UTF-8 in data fields. (See [UAX38] for details.)\n\nFor legacy reasons, NamesList.txt was exceptional; it was encoded in Latin-1 prior to Unicode 6.2. For Unicode 6.2 and later, the encoding is UTF-8. See NamesList.html.\n\nSegmentation test data files, such as WordBreakTest.txt, make use of non-ASCII (UTF-8) characters as delimiters for data fields.\n\n4.2.13 Line Termination\n\nAll data files in the UCD use LF line termination (not CRLF line termination). When copied to different systems, these line endings may be automatically changed to use the native line termination conventions for that system. Make sure your editor (or parser) can deal with the line termination style in the local copy of the data files.\n\n4.2.14 Other Conventions\n\nIn some test data files, segments of the test data are distinguished by a line starting with an \"@\" sign. For example (from NormalizationTest.txt):\n\n@Part1 # Character by character test\n\n4.2.15 Other File Formats\n\nThe data format for Unihan data files and for TangutSources.txt and NushuSources.txt in the UCD differs from the standard format. See the discussion of Unihan and UAX #38 earlier in this annex for more information.\n\nThe format for NamesList.txt, which documents the Unicode names list and which is used programmatically to drive the formatting program for Unicode code charts, also differs significantly from regular UCD data files. See NamesList.html\n\nIndex.txt is another exception. It uses a tab-delimited format, with field 0 consisting of an index entry string, and field 1 a code point. Index.txt is used to maintain the Unicode Character Name Index.\n\nThe various segmentation test data files make use of \"#\" to delimit comments, but have distinct conventions for their data fields. See the documentation in their header sections for details of the data field formats for those files.\n\nThe XML version of the UCD has its own file format conventions. In those files, \"#\" is used to stand for the code point in algorithmically derivable character names such as CJK UNIFIED IDEOGRAPH-4E00 or TANGUT IDEOGRAPH-17000, so as to allow for name sharing in more compact representations of the data. See Unicode Standard Annex #42, \"Unicode Character Database in XML\" [UAX42] for details.\n\n4.3 File List\n\nThe exact list of files associated with any particular version of the UCD is available on the Unicode website by referring to the component listings at Enumerated Versions.\n\nThe majority of the data files in the UCD provide specifications of character properties for Unicode characters. Those files and their contents are documented in detail in the Property Definitions section below.\n\nThe data files in the extracted subdirectory constitute reformatted listings of single character properties extracted from UnicodeData.txt or other primary data files. The reformatting is provided to make it easier to see the particular set of characters having certain values for enumerated properties, or to separate the statement of that property from other properties defined together in UnicodeData.txt. These files also include explicit listings of default values for the respective properties. These extracted, derived data files are further documented in the Derived Extracted Properties section below.\n\nThe UCD also contains a number of test data files, whose purpose is to provide standard test cases useful in verifying the implementation of complex Unicode algorithms. See the Test Files section below for more documentation.\n\nThe remaining files in the Unicode Character Database do not directly specify Unicode properties. The important ones and their functions are listed in Table 5. The Status column indicates whether the file (and its content) is considered Normative, Informative, or Provisional.\n\nFile Name Reference Status Description CJKRadicals.txt [UAX38] I List of Unified CJK Ideographs and CJK Radicals that correspond to specific radical numbers used in the CJK radical stroke counts. USourceData.txt [UAX45] N The list of formal references for UTC-Source ideographs, together with data regarding their status and sources. USourceGlyphs.pdf [UAX45] I A table containing a representative glyph for each UTC-Source ideograph. USourceRSChart.pdf [UAX45] I A radical-stroke index of all the UTC-Source ideographs. TangutSources.txt Chapter 18 N Specifies normative source mappings for Tangut ideographs and components. This data file also includes informative radical-stroke values that are used in the preparation of the code charts for the Tangut blocks.\n\nkTGT_MergedSrc: normative source mapping to various Tangut source references\n\nkRSTUnicode: informative radical-stroke value NushuSources.txt Chapter 18 N Specifies normative source mappings for Nushu ideographs. This data file also includes informative readings for Nushu characters.\n\nkSrc_NushuDuben: normative source mapping to the Nushu Duben\n\nkReading: informative example phonetic reading EmojiSources.txt Chapter 22 N Specifies source mappings to SJIS values for emoji symbols in the original implementations of these symbols by Japanese telecommunications companies. Index.txt Chapter 24 I Index to Unicode characters. NamesList.txt Chapter 24 I Names list used for production of the code charts, derived from UnicodeData.txt. It contains additional annotations. NamesList.html Chapter 24 I Documents the format of NamesList.txt. StandardizedVariants.txt Chapter 23 N Lists all the standardized variant sequences that have been defined, plus a textual description of their desired appearance. StandardizedVariants.html Chapter 23 N An obsolete derived documentation file. NamedSequences.txt [UAX34] N Lists the names for all approved named sequences. This is a string-valued property of strings. NamedSequencesProv.txt [UAX34] P Lists the names for all provisional named sequences. This is a (provisional) string-valued property of strings. emoji-variation-sequences.txt [UTS51] N Lists all emoji presentation sequences and text presentation sequences involving currently encoded emoji characters.\n\nFor more information about these files and their use, see the referenced annexes or chapters of Unicode Standard, or, in the case of emoji sequences data, [UTS51].\n\n4.4 Zipped Files\n\nStarting with Version 4.1.0, zipped versions of all of the UCD files, both data files and documentation files, are available under the Public/zipped directory on the Unicode website. Each collection of zipped files is located there in a numbered subdirectory corresponding to that version of the UCD.\n\nTwo different zipped files are provided for each version:\n\nUnihan.zip is the zipped version of the very large Unihan data files\n\nUCD.zip is the zipped version of all of the rest of the UCD data files, excluding the Unihan data files.\n\nThis bifurcation allows for better management of downloading version-specific information, because Unihan.zip contains all the pertinent CJK-related property information, while UCD.zip contains all of the rest of the UCD property information, for those who may not need the voluminous CJK data.\n\nStarting with Version 6.1.0 the main versioned directories for the UCD also contain a copy of UCD.zip, for convenience in access.\n\nIn versions of the UCD prior to Version 4.1.0, zipped copies of the Unihan data files (which for those versions were released as a single large text file, Unihan.txt) are provided in the same directory as the UCD data files. These zipped files are only posted for versions of the UCD in which Unihan.txt was updated.\n\n4.5 UCD in XML\n\nStarting with Version 5.1.0, a set of XML data files are also released with each version of the UCD. Those data files make it possible to import and process the UCD property data using standard XML parsing tools, instead of the specialized parsing required for the various individual data files of the UCD.\n\n4.5.1 UAX #42\n\nUnicode Standard Annex #42, \"Unicode Character Database in XML\" [UAX42] defines an XML schema which is used to incorporate all of the Unicode character property information into the XML version of the UCD. See that annex for details of the schema and conventions regarding the grouping of property values for more compact representations.\n\n4.5.2 XML File List\n\nThe XML version of the UCD is contained in the ucdxml subdirectory of the UCD. The files are all zipped. The list of files is shown in Table 6.\n\nThe \"flat\" file versions simply list all attributes with no particular compression. The \"grouped\" file versions apply the grouping mechanism described in [UAX42] to cut down on the size of the data files.\n\n5 Properties\n\nThis section documents the Unicode character properties, relating them in detail to the particular UCD data files in which they are specified. For enumerated properties in particular, this section also documents the actual values which those properties can have.\n\n5.1 Property Index\n\nTable 7 provides a summary list of the Unicode character properties, excluding most of those specific to the Unihan data files [Unihan]. For a comparable index of CJK character properties, see Unicode Standard Annex #38, \"Unicode Han Database (Unihan)\" [UAX38].\n\nThe properties are roughly organized into groups based on their usage. This grouping is primarily for documentation convenience and except for contributory properties, has no normative implications. Contributory properties are shown in this index with a gray background, to better distinguish them visually from ordinary (simple or derived) properties. Deprecated properties and other properties not recommended for support in public property APIs are also shown with a gray background. The link on each property leads to its description in Table 9, Property Table. Any property marked as deprecated in this index is also automatically considered obsolete.\n\n5.2 About the Property Table\n\nTable 9, Property Table specifies the list of character properties defined in the UCD. That table is divided into separate sections for each data file in the UCD. Data files which define a single property or a small number of properties are listed first, followed by the data files which define a large number of properties: DerivedCoreProperties.txt, DerivedNormalizationProps.txt, PropList.txt, UnicodeData.txt, and emoji-data.txt. In some instances for these files defining many properties, the entries in the property table are grouped by type, for clarity in presentation, rather than being listed alphabetically.\n\nIn Table 9, Property Table each property is described as follows:\n\nFirst Column. This column contains the name of each of the character properties specified in the respective data file. Any special status for a property, such as whether it is obsolete, deprecated, or stabilized, is also indicated in the first column.\n\nSecond Column. This column indicates the type of the property, according to the key in Table 8.\n\nCatalog properties have enumerated values which are expected to be regularly extended in successive versions of the Unicode Standard. This distinguishes them from Enumeration properties.\n\nEnumeration properties have enumerated values which constitute a logical partition space; new values will generally not be added to them in successive versions of the standard.\n\nBinary properties are a special case of Enumeration properties, which have exactly two values: Yes and No (or True and False).\n\nString-valued properties are typically mappings from a Unicode code point to another Unicode code point or sequence of Unicode code points; examples include case mappings and decomposition mappings.\n\nProperties of strings are properties defined for strings; in other words, their domain is a set of strings rather than a set of characters or code points. Properties of strings are sometimes called \"string properties\" for short. For example, the file NamedSequences.txt defines names (which are themselves string values) for a certain set of specific character sequences. Properties of strings are not explicitly listed for the UCD in the Property Table, and hence are given no specific type symbol in the Property Type Key.\n\nNumeric properties specify the actual numeric values for digits and other characters associated with numbers in some way.\n\nMiscellaneous properties are those properties that do not fit neatly into the other property categories; they currently include character names, comments about characters, the Script_Extensions property, and the Unicode_Radical_Stroke property (a combination of numeric values) documented in Unicode Standard Annex #38, \"Unicode Han Database (Unihan)\" [UAX38].\n\nFor a more complete discussion of types of character properties, including formal definitions, see Unicode Technical Report 23, \"The Unicode Character Property Model\" [UTR23].\n\nThird Column. This column indicates the status of the property: Normative or Informative or Contributory or Provisional.\n\nFourth Column. This column provides a description of the property or properties. This includes information on derivation for derived properties, as well as references to locations in the standard where the property is defined or discussed in detail.\n\nIn the section of the table for UnicodeData.txt, the data field numbers are also supplied in parentheses at the start of the description.\n\nFor a few entries in the property table, values specified in the fields in a data file only contribute to a full definition of a Unicode character property. For example, the values in field 1 (Name) in UnicodeData.txt do not provide all the values for the Name property for all code points; Jamo.txt must also be used, and the Name property for CJK unified ideographs, Tangut ideographs, Khitan Small Script ideographs, and Nushu ideographs is derived by rule.\n\nNone of the Unicode character properties should be used simply on the basis of the descriptions in the property table without consulting the relevant discussions in the Unicode Standard. Because of the enormous variety of characters in the repertoire of the Unicode Standard, character properties tend not to be self-evident in application, even when the names of the properties may seem familiar from their usage with much smaller legacy character encodings.\n\n5.3 Property Definitions\n\nThis section contains the table which describes each character property and defines its status, organized by data file in the UCD. Table 9 provides general descriptions of the Unicode character properties, their derivations, and/or their usage, as well as pointers to the respective parts of the standard where formal property definitions or additional information about the properties can be found. The property status column and any formal statement of the derivation of derived properties are definitive; however, Table 9 does not provide formal definitions of the other properties and should not be interpreted as such. For details on the columns and overall organization of the table, see Section 5.2 About the Property Table.\n\nArabicShaping.txt Joining_Type\n\nJoining_Group E N Basic Arabic and Syriac character shaping properties, such as initial, medial and final shapes. See Section 9.2, Arabic in [Unicode]. BidiBrackets.txt Bidi_Paired_Bracket_Type E N Type of a paired bracket, either opening or closing. This property is used in the implementation of parenthesis matching. See Unicode Standard Annex #9, \"Unicode Bidirectional Algorithm\" [UAX9]. Bidi_Paired_Bracket S N For an opening bracket, the code point of the matching closing bracket. For a closing bracket, the code point of the matching opening bracket. This property is used in the implementation of parenthesis matching. See Unicode Standard Annex #9, \"Unicode Bidirectional Algorithm\" [UAX9]. BidiMirroring.txt Bidi_Mirroring_Glyph S I Informative mapping for substituting characters in an implementation of bidirectional mirroring. This maps a subset of characters with the Bidi_Mirrored property to other characters that normally are displayed with the corresponding mirrored glyph. When a character with the Bidi_Mirrored property has the default value for Bidi_Mirroring_Glyph, that means that no other character exists whose glyph is appropriate for character-based glyph mirroring. Implementations must then use other mechanisms to implement mirroring of those characters for the Unicode Bidirectional Algorithm. See Unicode Standard Annex #9, \"Unicode Bidirectional Algorithm\" [UAX9]. Do not confuse this property with the Bidi_Mirrored property itself. Blocks.txt Block C N Blocks.txt specifies the Block property, which consists of the list of block names for ranges of code points. See D10b in Section 3.4, Characters and Encoding, of [Unicode]. See also the code charts in [Unicode]. CompositionExclusions.txt Composition_Exclusion B N A property used in normalization. See Unicode Standard Annex #15, \"Unicode Normalization Forms\" [UAX15]. Unlike other files, CompositionExclusions.txt simply lists the relevant code points. CaseFolding.txt Simple_Case_Folding\n\nCase_Folding S N Mapping from characters to their case-folded forms. This is an informative file containing normative derived properties.\n\nDerived from UnicodeData and SpecialCasing.\n\nNote: The case foldings are omitted in the data file if they are the same as the code point itself.\n\nDerivedAge.txt Age C N A property defining when various code points were designated/assigned in successive versions of the Unicode Standard. For a detailed discussion of the Age property, see Section 5.14, Character Age. EastAsianWidth.txt East_Asian_Width E N A property for determining the choice of wide versus narrow glyphs in East Asian contexts. Property values are described in Unicode Standard Annex #11, \"East Asian Width\" [UAX11].\n\nNote: Some values of the East_Asian_Width property are used in the derivation of Line_Break property values, and hence are pertinent to line breaking behavior. See Unicode Standard Annex #14, \"Unicode Line Breaking Algorithm\" [UAX14].\n\nEquivalentUnifiedIdeograph.txt Equivalent_Unified_Ideograph S I A property which maps most CJK radicals and CJK strokes to the most reasonably equivalent CJK unified ideograph. HangulSyllableType.txt Hangul_Syllable_Type E N The values L, V, T, LV, and LVT used in Chapter 3, Conformance in [Unicode]. IndicPositionalCategory.txt Indic_Positional_Category E I A property informally defining the positional categories for dependent vowels, viramas, combining marks, and other characters used in Indic scripts. General descriptions of the property values are provided in the header section of the data file IndicPositionalCategory.txt. IndicSyllabicCategory.txt Indic_Syllabic_Category E I A property informally defining the structural categories of syllabic components in Indic scripts. General descriptions of the property values are provided in the header section of the data file IndicSyllabicCategory.txt. Jamo.txt Jamo_Short_Name M C The Hangul Syllable names are derived from the Jamo Short Names, as described in Chapter 3, Conformance in [Unicode]. LineBreak.txt Line_Break E N A property for line breaking. For more information, see Unicode Standard Annex #14, \"Unicode Line Breaking Algorithm\" [UAX14]. GraphemeBreakProperty.txt Grapheme_Cluster_Break E I See Unicode Standard Annex #29, \"Unicode Text Segmentation\" [UAX29] SentenceBreakProperty.txt Sentence_Break E I See Unicode Standard Annex #29, \"Unicode Text Segmentation\" [UAX29] WordBreakProperty.txt Word_Break E I See Unicode Standard Annex #29, \"Unicode Text Segmentation\" [UAX29] NameAliases.txt Name_Alias M N Normative formal aliases for characters with erroneous names, for control characters and some format characters, and for character abbreviations, as described in Chapter 4, Character Properties in [Unicode]. Aliases tagged with the type \"correction\", as well as a selection of aliases of other types, are published in the Unicode Standard code charts. NormalizationCorrections.txt used in Decomposition Mappings S N NormalizationCorrections lists code point differences for Normalization Corrigenda. For more information, see Unicode Standard Annex #15, \"Unicode Normalization Forms\" [UAX15]. Scripts.txt Script C I Script values for use in regular expressions and elsewhere. For more information, see Unicode Standard Annex #24, \"Unicode Script Property\" [UAX24]. ScriptExtensions.txt Script_Extensions M I Enumerated sets of Script values for use in regular expressions and elsewhere. For more information, see Unicode Standard Annex #24, \"Unicode Script Property\" [UAX24]. SpecialCasing.txt Uppercase_Mapping\n\nLowercase_Mapping\n\nTitlecase_Mapping\n\nS I Data for producing (in combination with the simple case mappings from UnicodeData.txt) the full case mappings. Unihan data files [Unihan] (for more information, see [UAX38]) Numeric_Type\n\nNumeric_Value E I The characters tagged with either kPrimaryNumeric, kAccountingNumeric, or kOtherNumeric are given the property value Numeric_Type=Numeric, and the Numeric_Value indicated in those tags.\n\nMost characters have these numeric properties based on values from UnicodeData.txt. See Numeric_Type.\n\nUnicode_Radical_Stroke M I The Unicode radical-stroke count, based on the tag kRSUnicode. VerticalOrientation.txt Vertical_Orientation E I A property used to establish a default for the correct orientation of characters when used in vertical text layout, as described in Unicode Standard Annex #50, \"Unicode Vertical Text Layout\" [UAX50]. DerivedCoreProperties.txt Lowercase B I Characters with the Lowercase property. For more information, see Chapter 4, Character Properties in [Unicode].\n\nGenerated from: Ll + Other_Lowercase\n\nUppercase B I Characters with the Uppercase property. For more information, see Chapter 4, Character Properties in [Unicode].\n\nGenerated from: Lu + Other_Uppercase\n\nCased B I Characters which are considered to be either uppercase, lowercase or titlecase characters. This property is not identical to the Changes_When_Casemapped property. For more information, see D135 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: Lowercase + Uppercase + Lt\n\nCase_Ignorable B I Characters which are ignored for casing purposes. For more information, see D136 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: Mn + Me + Cf + Lm + Sk + Word_Break=MidLetter + Word_Break=MidNumLet + Word_Break=Single_Quote\n\nChanges_When_Lowercased B I Characters whose normalized forms are not stable under a toLowercase mapping. For more information, see D139 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: toLowercase(toNFD(X)) != toNFD(X)\n\nChanges_When_Uppercased B I Characters whose normalized forms are not stable under a toUppercase mapping. For more information, see D140 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: toUppercase(toNFD(X)) != toNFD(X)\n\nChanges_When_Titlecased B I Characters whose normalized forms are not stable under a toTitlecase mapping. For more information, see D141 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: toTitlecase(toNFD(X)) != toNFD(X)\n\nChanges_When_Casefolded B I Characters whose normalized forms are not stable under case folding. For more information, see D142 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: toCasefold(toNFD(X)) != toNFD(X)\n\nChanges_When_Casemapped B I Characters which may change when they undergo case mapping. For more information, see D143 in Section 3.13, Default Case Algorithms in [Unicode].\n\nGenerated from: Changes_When_Lowercased(X) or Changes_When_Uppercased(X) or Changes_When_Titlecased(X)\n\nAlphabetic B I Characters with the Alphabetic property. For more information, see Chapter 4, Character Properties in [Unicode].\n\nGenerated from: Lowercase + Uppercase + Lt + Lm + Lo + Nl + Other_Alphabetic\n\nDefault_Ignorable_Code_Point B N For programmatic determination of default ignorable code points. New characters that should be ignored in rendering (unless explicitly supported) will be assigned in these ranges, permitting programs to correctly handle the default rendering of such characters when not otherwise supported. For more information, see the FAQ Display of Unsupported Characters, and Section 5.21, Ignoring Characters in Processing in [Unicode].\n\nGenerated from:\n\nOther_Default_Ignorable_Code_Point\n\n+ Cf (Format characters)\n\n+ Variation_Selector\n\n- White_Space\n\n- FFF9..FFFB (Interlinear annotation format characters)\n\n- 13430..1343F (Egyptian hieroglyph format characters)\n\n- Prepended_Concatenation_Mark (Exceptional format characters that should be visible)\n\nGrapheme_Base B N Property used together with the definition of Standard Korean Syllable Block to define \"Grapheme base\". See D58 in Chapter 3, Conformance in [Unicode].\n\nGenerated from: [0..10FFFF] - Cc - Cf - Cs - Co - Cn - Zl - Zp - Grapheme_Extend\n\nNote: Grapheme_Base is a property of individual characters. That usage contrasts with \"grapheme base\", which is an attribute of Unicode strings; a grapheme base may consist of a Korean syllable which is itself represented by a sequence of conjoining jamos.\n\nGrapheme_Extend B N Property used to define \"Grapheme extender\". See D59 in Chapter 3, Conformance in [Unicode].\n\nGenerated from: Me + Mn + Other_Grapheme_Extend\n\nNote: The set of characters for which Grapheme_Extend=Yes is used in the derivation of the property value Grapheme_Cluster_Break=Extend. Grapheme_Cluster_Break=Extend consists of the set of characters for which Grapheme_Extend=Yes or Emoji_Modifier=Yes. See [UAX29] and [UTS51].\n\nGrapheme_Link (Deprecated as of 5.0.0) B I Formerly proposed for programmatic determination of grapheme cluster boundaries.\n\nGenerated from: Canonical_Combining_Class=Virama\n\nIndic_Conjunct_Break E I This property defines values used in Grapheme Cluster Break algorithm in [UAX29].\n\nGenerated as follows:\n\nDefine the set of applicable scripts. For Unicode 15.1, the set is defined as\n\nS = [\\p{sc=Beng}\\p{sc=Deva}\\p{sc=Gujr}\\p{sc=Mlym}\\p{sc=Orya}\\p{sc=Telu}]\n\nThen for any character C:\n\nInCB = Linker iff C in [S &\\p{Indic_Syllabic_Category=Virama}]\n\nInCB = Consonant iff C in [S &\\p{Indic_Syllabic_Category=Consonant}]\n\nInCB = Extend iff C in\n\n[[\\p{gcb=Extend}-\\p{ccc=0}]\n\n\\p{gcb=ZWJ}\n\n-\\p{Indic_Syllabic_Category=Virama}\n\n-\\p{Indic_Syllabic_Category=Consonant}]\n\nOtherwise, InCB = None (the default value)\n\nMath B I Characters with the Math property. For more information, see Chapter 4, Character Properties in [Unicode].\n\nGenerated from: Sm + Other_Math\n\nID_Start B I Used to determine programming identifiers, as described in Unicode Standard Annex #31, \"Unicode Identifier and Pattern Syntax\" [UAX31]. ID_Continue B I XID_Start B I XID_Continue B I DerivedNormalizationProps.txt Full_Composition_Exclusion B N Characters that are excluded from composition: those listed explicitly in CompositionExclusions.txt, plus the derivable sets of Singleton Decompositions and Non-Starter Decompositions, as documented in that data file. Expands_On_NFC\n\nExpands_On_NFD\n\nExpands_On_NFKC\n\nExpands_On_NFKD\n\n(Deprecated as of 6.0.0) B N Characters that expand to more than one character in the specified normalization form. FC_NFKC_Closure\n\n(Deprecated as of 6.0.0) S N Characters that require extra mappings for closure under Case Folding plus Normalization Form KC.\n\nThe mapping is listed in Field 2.\n\nNFD_Quick_Check\n\nNFKD_Quick_Check\n\nNFC_Quick_Check\n\nNFKC_Quick_Check E N For property values, see Decompositions and Normalization. (Abbreviated names: NFD_QC, NFKD_QC, NFC_QC, NFKC_QC) NFKC_Casefold S I A mapping designed for best behavior when doing caseless matching of strings interpreted as identifiers. (Abbreviated name: NFKC_CF)\n\nFor the definition of the related string transform toNFKC_Casefold() based on this mapping, see Section 3.13, Default Case Algorithms in [Unicode].\n\nThe mapping is listed in Field 2.\n\nChanges_When_NFKC_Casefolded B I Characters which are not identical to their NFKC_Casefold mapping.\n\nGenerated from: (cp != NFKC_CaseFold(cp))\n\nNFKC_Simple_Casefold S I A mapping designed for best behavior when doing simple caseless matching of strings interpreted as identifiers. (Abbreviated name: NFKC_SCF)\n\nThe mapping is listed in Field 2.\n\nPropList.txt ASCII_Hex_Digit B N ASCII characters commonly used for the representation of hexadecimal numbers. Bidi_Control B N Format control characters which have specific functions in the Unicode Bidirectional Algorithm [UAX9]. Dash B I Punctuation characters explicitly called out as dashes in the Unicode Standard, plus their compatibility equivalents. Most of these have the General_Category value Pd, but some have the General_Category value Sm because of their use in mathematics. Deprecated B N For a machine-readable list of deprecated characters. No characters will ever be removed from the standard, but the usage of deprecated characters is strongly discouraged. Diacritic B I Characters that linguistically modify the meaning of another character to which they apply. Some diacritics are not combining characters, and some combining characters are not diacritics. Extender B I Characters whose principal function is to extend the value of a preceding alphabetic character or to extend the shape of adjacent characters. Typical of these are length marks, iteration marks, and the Arabic tatweel. Hex_Digit B I Characters commonly used for the representation of hexadecimal numbers, plus their compatibility equivalents. Hyphen (Stabilized as of 4.0.0; Deprecated as of 6.0.0) B I Dashes which are used to mark connections between pieces of words, plus the Katakana middle dot. The Katakana middle dot functions like a hyphen, but is shaped like a dot rather than a dash. Ideographic B I Characters considered to be CJKV (Chinese, Japanese, Korean, and Vietnamese) or other siniform (Chinese writing-related) ideographs. This property roughly defines the class of \"Chinese characters\" and does not include characters of other logographic scripts such as Cuneiform or Egyptian Hieroglyphs. The Ideographic property is used in the definition of Ideographic Description Sequences. ID_Compat_Math_Start B I Used in mathematical identifier profile in UAX #31. ID_Compat_Math_Continue B I Used in mathematical identifier profile in UAX #31. IDS_Unary_Operator B N Used in Ideographic Description Sequences. IDS_Binary_Operator B N Used in Ideographic Description Sequences. IDS_Trinary_Operator B N Used in Ideographic Description Sequences. Join_Control B N Format control characters which have specific functions for control of cursive joining and ligation. Logical_Order_Exception B N A small number of spacing vowel letters occurring in certain Southeast Asian scripts such as Thai and Lao, which use a visual order display model. These letters are stored in text ahead of syllable-initial consonants, and require special handling for processes such as searching and sorting. Noncharacter_Code_Point B N Code points permanently reserved for internal use. Other_Alphabetic B C Used in deriving the Alphabetic property. Other_Default_Ignorable_Code_Point B C Used in deriving the Default_Ignorable_Code_Point property. Other_Grapheme_Extend B C Used in deriving the Grapheme_Extend property. Other_ID_Continue B C Used to maintain backward compatibility of ID_Continue. Other_ID_Start B C Used to maintain backward compatibility of ID_Start. Other_Lowercase B C Used in deriving the Lowercase property. Other_Math B C Used in deriving the Math property. Other_Uppercase B C Used in deriving the Uppercase property. Pattern_Syntax B N Used for pattern syntax as described in Unicode Standard Annex #31, \"Unicode Identifier and Pattern Syntax\" [UAX31]. Pattern_White_Space B N Prepended_Concatenation_Mark B I A small class of visible format controls, which precede and then span a sequence of other characters, usually digits. These have also been known as \"subtending marks\", because most of them take a form which visually extends underneath the sequence of following digits. Quotation_Mark B I Punctuation characters that function as quotation marks. Radical B N Used in the definition of Ideographic Description Sequences. Regional_Indicator B N Property of the regional indicator characters, U+1F1E6..U+1F1FF. This property is referenced in various segmentation algorithms, to assist in correct breaking around emoji flag sequences. Sentence_Terminal B I Punctuation characters that generally mark the end of sentences. Used in Unicode Standard Annex #29, \"Unicode Text Segmentation\" [UAX29]. Soft_Dotted B N Characters with a \"soft dot\", like i or j. An accent placed on these characters causes the dot to disappear. An explicit dot above can be added where required, such as in Lithuanian. See Section 7.1, Latin in [Unicode]. Terminal_Punctuation B I Punctuation characters that generally mark the end of textual units. Unified_Ideograph B N A property which specifies the exact set of Unified CJK Ideographs in the standard. This set excludes CJK Compatibility Ideographs (which have canonical decompositions to Unified CJK Ideographs), as well as characters from the CJK Symbols and Punctuation block. The class of Unified_Ideograph=Y characters is a proper subset of the class of Ideographic=Y characters. Variation_Selector B N Indicates characters that are Variation Selectors. For details on the behavior of these characters, see Section 23.4, Variation Selectors in [Unicode], and Unicode Technical Standard #37, \"Unicode Ideographic Variation Database\" [UTS37]. White_Space B N Spaces, separator characters and other control characters which should be treated by programming languages as \"white space\" for the purpose of parsing elements. See also Line_Break, Grapheme_Cluster_Break, Sentence_Break, and Word_Break, which classify space characters and related controls somewhat differently for particular text segmentation contexts. UnicodeData.txt Name M N (1) When a string value not enclosed in <angle brackets> occurs in this field, it specifies the character's Name property value, which matches exactly the name published in the code charts. The Name property value for most ideographic characters and for Hangul syllables is derived instead by various rules. See Section 4.8, Name in [Unicode] for a full specification of those rules. Strings enclosed in <angle brackets> in this field either provide label information used in the name derivation rules, or—in the case of characters which have a null string as their Name property value, such as control characters—provide other information about their code point type. General_Category E N (2) This is a useful breakdown into various character types which can be used as a default categorization in implementations. For the property values, see General Category Values. Canonical_Combining_Class N N (3) The classes used for the Canonical Ordering Algorithm in the Unicode Standard. This property could be considered either an enumerated property or a numeric property: the principal use of the property is in terms of the numeric values. For the property value names associated with different numeric values, see DerivedCombiningClass.txt and Canonical Combining Class Values. Bidi_Class E N (4) These are the categories required by the Unicode Bidirectional Algorithm. For the property values, see Bidirectional Class Values. For more information, see Unicode Standard Annex #9, \"Unicode Bidirectional Algorithm\" [UAX9].\n\nThe default property values depend on the code point, and are explained in DerivedBidiClass.txt\n\nDecomposition_Type\n\nDecomposition_Mapping E, S N (5) This field contains both values, with the type in angle brackets. The decomposition mappings exactly match the decomposition mappings published with the character names in the Unicode Standard. For more information, see Character Decomposition Mappings. Numeric_Type\n\nNumeric_Value E, N N (6) If the character has the property value Numeric_Type=Decimal, then the Numeric_Value of that digit is represented with an integer value (limited to the range 0..9) in fields 6, 7, and 8. Characters with the property value Numeric_Type=Decimal are restricted to digits which can be used in a decimal radix positional numeral system and which are encoded in the standard in a contiguous ascending range 0..9. See the discussion of decimal digits in Chapter 4, Character Properties in [Unicode]. E, N N (7) If the character has the property value Numeric_Type=Digit, then the Numeric_Value of that digit is represented with an integer value (limited to the range 0..9) in fields 7 and 8, and field 6 is null. This covers digits that need special handling, such as the compatibility superscript digits.\n\nStarting with Unicode 6.3.0, no newly encoded numeric characters will be given Numeric_Type=Digit, nor will existing characters with Numeric_Type=Numeric be changed to Numeric_Type=Digit. The distinction between those two types is not considered useful.\n\nE, N N (8) If the character has the property value Numeric_Type=Numeric, then the Numeric_Value of that character is represented with a positive or negative integer or rational number in this field, and fields 6 and 7 are null. This includes fractions such as, for example, \"1/5\" for U+2155 VULGAR FRACTION ONE FIFTH.\n\nSome characters have these properties based on values from the Unihan data files. See Numeric_Type, Han.\n\nBidi_Mirrored B N (9) If the character is a \"mirrored\" character in bidirectional text, this field has the value \"Y\"; otherwise \"N\". See Section 4.7, Bidi Mirrored of [Unicode]. Do not confuse this with the Bidi_Mirroring_Glyph property. Unicode_1_Name (Obsolete as of 6.2.0) M I (10) Old name as published in Unicode 1.0 or ISO 6429 names for control functions. This field is empty unless it is significantly different from the current name for the character. No longer used in code chart production. See Name_Alias. (Obsolete as of 5.2.0; Deprecated and Stabilized as of 6.0.0) M I (11) ISO 10646 comment field. It was used for notes that appeared in parentheses in the 10646 names list, or contained an asterisk to mark an Annex P note.\n\nAs of Unicode 5.2.0, this field no longer contains any non-null values.\n\nSimple_Uppercase_Mapping S N (12) Simple uppercase mapping (single character result). If a character is part of an alphabet with case distinctions, and has a simple uppercase equivalent, then the uppercase equivalent is in this field. The simple mappings have a single character result, where the full mappings may have multi-character results. For more information, see Case and Case Mapping. Simple_Lowercase_Mapping S N (13) Simple lowercase mapping (single character result). Simple_Titlecase_Mapping S N (14) Simple titlecase mapping (single character result).\n\nNote: If this field is null, then the Simple_Titlecase_Mapping is the same as the Simple_Uppercase_Mapping for this character.\n\nemoji-data.txt Emoji B N = Yes for characters that are emoji. Emoji_Presentation B N = Yes for characters that have emoji presentation by default. Emoji_Modifier B N = Yes for characters that are emoji modifiers. Currently this includes only the skin tone modifier characters. Emoji_Modifier_Base B N = Yes for characters that can serve as a base for emoji modifiers. Emoji_Component B N = Yes for characters used in emoji sequences that normally do not appear on emoji keyboards as separate choices, such as base characters for emoji keycaps. Also included are Regional_Indicator characters and U+FE0F VARIATION SELECTOR-16.\n\nNote: All characters in emoji sequences are either Emoji=Yes or Emoji_Component=Yes. However, implementations must not assume that all Emoji_Component=Yes characters are also Emoji=Yes. There are some non-emoji characters that are used in various emoji sequences, such as tag characters and ZWJ.\n\nExtended_Pictographic B N = Yes for pictographic symbols, as well as reserved ranges in blocks largely associated with emoji characters. This enables segmentation rules involving emoji to be specified stably, even in cases where an existing non-emoji pictographic symbol later comes to be treated as an emoji.\n\nNote: This property is used in the regex definitions for the Default Grapheme Cluster Boundary Specification and in rule GB11 in UAX #29, Unicode Text Segmentation [UAX29], in rule LB30b in UAX #14, Unicode Line Breaking Algorithm [UAX14], as well as for the definition ED-4 in UTS #51, Unicode Emoji [UTS51].\n\n5.4 Derived Extracted Properties\n\nA number of Unicode character properties have been separated out, reformatted, and listed in range format, one property per file. These files are located under the extracted directory of the UCD. The exact list of derived extracted files and the extracted properties they represent are given in Table 10.\n\nThe derived extracted files are provided primarily as a reformatting of data for properties specified in other data files. For nondefault values of properties, if there is any inadvertent mismatch between the primary data files specifying those properties and these lists of extracted properties, the primary data files are taken as definitive. However, for default values of properties, the extracted data files are definitive. This is particularly true for properties which have multiple default values; those properties are identified with an asterisk in the table. See Section 4.2.9, Default Values.\n\nFor the extraction of Decomposition_Type, characters with canonical decomposition mappings in field 5 of UnicodeData.txt have no tag. For those characters, the extracted value is Decomposition_Type=Canonical. For characters with compatibility decomposition mappings, there are explicit tags in field 5, and the value of Decomposition_Type is equivalent to those tags. The value Decomposition_Type=Canonical is normative. Other values for Decomposition_Type are informative.\n\nThe value of the Name property is extracted based on the actual string value of the data in field 1 of UnicodeData.txt, omitting any code points with the default null string value. Then for code points in the Hangul Syllables block, the Hangul Syllable Name Generation algorithm defined in Section 3.12, Conjoining Jamo Behavior of [Unicode] is applied, to create the explicit formal names of all Hangul syllables. Characters whose names are algorithmically defined based on suffixing the code point to a specific identifying string prefix, such as CJK UNIFIED IDEOGRAPH-4E00, are listed with a compact range convention in DerivedName.txt, using an asterisk \"*\" character as the placeholder for the code point. See Section 4.8, Name of [Unicode] for more information about how the Name property is derived.\n\nNumeric_Value is extracted based on the actual numeric value of the data in field 8 of UnicodeData.txt or the values of the kPrimaryNumeric, kAccountingNumeric, or kOtherNumeric tags, for characters listed in the Unihan data files.\n\nNumeric_Type is extracted as follows. If fields 6, 7, and 8 in UnicodeData.txt are all non-empty, then Numeric_Type=Decimal. Otherwise, if fields 7 and 8 are both non-empty, then Numeric_Type=Digit. Otherwise, if field 8 is non-empty, then Numeric_Type=Numeric. For characters listed in the Unihan data files, Numeric_Type=Numeric for characters that have kPrimaryNumeric, kAccountingNumeric, or kOtherNumeric tags. The default value is Numeric_Type=None.\n\n5.5 Contributory Properties\n\nContributory properties contain sets of exceptions used in the generation of other properties derived from them. The contributory properties specifically concerned with identifiers and casing contribute to the maintenance of stability guarantees for properties and/or to invariance relationships between related properties. Other contributory properties are simply defined as a convenience for property derivation.\n\nMost contributory properties have names using the pattern \"Other_XXX\" and are used to derive the corresponding \"XXX\" property. For example, the Other_Alphabetic property is used in the derivation of the Alphabetic property.\n\nContributory properties are typically defined in PropList.txt and the corresponding derived property is then listed in DerivedCoreProperties.txt.\n\nJamo_Short_Name is an unusual contributory property, both in terms of its name and how it is used. It is defined in its own property file, Jamo.txt, and is used to derive the Name property value for Hangul syllable characters, according to the rules spelled out in Section 3.12, Conjoining Jamo Behavior in [Unicode].\n\nContributory is considered to be a distinct status for a Unicode character property. Contributory properties are neither normative nor informative. This distinct status is marked with the symbol \"C\" in the status column in the property table. For convenience of reference, all contributory properties are also listed in Table 10a, along with the properties whose derivation they contribute to.\n\nContributory properties are incomplete by themselves and are not intended for independent use. For example, an API returning Unicode property values should implement the derived core properties such as Alphabetic or Default_Ignorable_Code_Point, rather than the corresponding contributory properties, Other_Alphabetic or Other_Default_Ignorable_Code_Point.\n\n5.6 Case and Case Mapping\n\nCase for bicameral scripts and case mapping of characters are complicated topics in the Unicode Standard—both because of their inherent algorithmic complexity and because of the number of characters and special edge cases involved.\n\nThis section provides a brief roadmap to discussions about these topics, and specifications and definitions in the standard, as well as explaining which case-related properties are defined in the UCD.\n\nSection 3.13, Default Case Algorithms in [Unicode] provides formal definitions for a number of case-related concepts (cased, case-ignorable, ...), for case conversion (toUppercase(X), ...), and for case detection (isUppercase(X), ...). It also provides the formal definition of caseless matching for the standard, taking normalization into account.\n\nSection 4.2, Case in [Unicode] introduces case and case mapping properties. Table 4-3, Sources for Case Mapping Information in [Unicode] describes the kind of case-related information that is available in various data files of the UCD. Table 11 lists those data files again, giving the explicit list of case-related properties defined in each. The link on each property leads its description in Table 9, Property Table.\n\nFor compatibility with existing parsers, UnicodeData.txt only contains case mappings for characters where they constitute one-to-one mappings; it also omits information about context-sensitive case mappings. Information about these special cases can be found in the separate data file, SpecialCasing.txt, expressed as separate properties.\n\nSection 5.18, Case Mappings, in [Unicode] discusses various implementation issues for handling case, including language-specific case mapping, as for Greek and for Turkish. That section also describes case folding in particular detail.\n\nThe special casing conditions associated with case mapping for Greek, Turkish, and Lithuanian are specified in an additional field in SpecialCasing.txt. For example, the lowercase mapping for sigma in Greek varies according to its position in a word. The condition list does not constitute a formal character property in the UCD, because it is a statement about the context of occurrence of casing behavior for a character or characters, rather than a semantic attribute of those characters. Versions of the UCD from Version 3.2.0 to Version 5.0.0 did list property aliases for Special_Case_Condition (scc), but this was determined to be an error when the UCD was analyzed for representation in XML; consequently, the Special_Case_Condition property aliases were removed as of Version 5.1.0.\n\nCaseless matching is of particular concern for a number of text processing algorithms, so is also discussed at some length in Unicode Standard Annex #31, \"Unicode Identifier and Pattern Syntax\" [UAX31] and in Unicode Technical Standard #10, \"Unicode Collation Algorithm\" [UTS10].\n\nFurther information about locale-specific casing conventions can be found in the Unicode Common Locale Data Repository [CLDR].\n\n5.7 Property Value Lists\n\nThe following subsections give summaries of property values for certain Enumeration properties. Other property values are documented in other, topically-specific annexes; for example, the Line_Break property values are documented in Unicode Standard Annex #14, \"Unicode Line Breaking Algorithm\" [UAX14] and the various segmentation-related property values are documented in Unicode Standard Annex #29, \"Unicode Text Segmentation\" [UAX29].\n\n5.7.1 General Category Values\n\nThe General_Category property of a code point provides for the most general classification of that code point. It is usually determined based on the primary characteristic of the assigned character for that code point. For example, is the character a letter, a mark, a number, punctuation, or a symbol, and if so, of what type? Other General_Category values define the classification of code points which are not assigned to regular graphic characters, including such statuses as private-use, control, surrogate code point, and reserved unassigned.\n\nMany characters have multiple uses, and not all such cases can be captured entirely by the General_Category value. For example, the General_Category value of Latin, Greek, or Hebrew letters does not attempt to cover (or preclude) the numerical use of such letters as Roman numerals or in other numerary systems. Conversely, the General_Category of ASCII digits 0..9 as Nd (decimal digit) neither attempts to cover (or preclude) the occasional use of these digits as letters in various orthographies. The General_Category is simply the first-order, most usual categorization of a character.\n\nFor more information about the General_Category property, see Chapter 4, Character Properties in [Unicode].\n\nThe values in the General_Category field in UnicodeData.txt make use of the short, abbreviated property value aliases for General_Category. For convenience in reference, Table 12 lists all the abbreviated and long value aliases for General_Category values, reproduced from PropertyValueAliases.txt, along with a brief description of each category.\n\nNote that the value gc=Cn does not actually occur in UnicodeData.txt, because that data file does not list unassigned code points.\n\nThe distinctions between some General_Category values are somewhat arbitrary for edge cases, particularly those involving symbols and punctuation. For example, a number of multiple-function ASCII characters, including \"@\", \"#\", \"%\", and \"&\", have long been classified as Other_Punctuation (gc=Po), although they are not among the characters used as punctuation marks in traditional Western typography. Other characters may also be ambiguous between functioning to organize and delimit textual units (punctuation-like) or to represent concepts (symbol-like). Likewise, it may not always be clear whether some symbols are primarily used for mathematics or whether they are general symbols with occasional or even common use in mathematics. For example, many arrow symbols are classed as Other_Symbol, although they are widely used in mathematics. The General_Category values constitute a rough partitioning of characters to make distinctions for algorithmic processing, but do not provide a definitive classification for such overlapping or ambiguous usage of characters.\n\nCharacters with the quotation-related General_Category values Pi or Pf may behave like opening punctuation (gc=Ps) or closing punctuation (gc=Pe), depending on usage and quotation conventions.\n\nGeneral_Category values in the table highlighted in light blue (LC, L, M, N, P, S, Z, C) stand for groupings of related General_Category values. The classes they represent can be derived by unions of the relevant simple values, as shown in the table. The abbreviated and long value aliases for these classes are provided as a convenience for implementations, such as regex, which may wish to match more generic categories, such as \"letter\" or \"number\", rather than the detailed subtypes for General_Category. These aliases for groupings of General_Category values do not occur in UnicodeData.txt, which instead always specifies the enumerated subtype for the General_Category of a character.\n\nThe symbol \"L&\" is a label used to stand for any combination of uppercase, lowercase or titlecase letters (Lu, Ll, or Lt), in the first part of comments in the data files of the UCD. It is equivalent to gc=LC, but is only a label in comments, and is not expected to be used as an identifier for regular expression matching.\n\nThe Unicode Standard does not assign nondefault property values to control characters (gc=Cc), except for certain well-defined exceptions involving the Unicode Bidirectional Algorithm, the Unicode Line Breaking Algorithm, and Unicode Text Segmentation. Also, implementations will usually assign behavior to certain line breaking control characters—most notably U+000D and U+000A (CR and LF)—according to platform conventions. See Section 5.8, Newline Guidelines in [Unicode] for more information.\n\n5.7.2 Bidirectional Class Values\n\nThe values in the Bidi_Class field in UnicodeData.txt make use of the short, abbreviated property value aliases for Bidi_Class. For convenience in reference, Table 13 lists all the abbreviated and long value aliases for Bidi_Class values, reproduced from PropertyValueAliases.txt, along with a brief description of each catego"
    }
}