{
    "id": "dbpedia_109_2",
    "rank": 95,
    "data": {
        "url": "https://stackoverflow.com/questions/1976007/what-characters-are-forbidden-in-windows-and-linux-directory-names",
        "read_more_link": "",
        "language": "en",
        "title": "What characters are forbidden in Windows and Linux directory names?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/RoPPo.jpg?s=64",
            "https://www.gravatar.com/avatar/1ec3a2b75794dfc3985140d2031e6eec?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/XRndu.png?s=64",
            "https://www.gravatar.com/avatar/df6877d3f05e542ca5975b4670600f2e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/9L6sS.jpg?s=64",
            "https://i.sstatic.net/H4s3Z.jpg?s=64",
            "https://i.sstatic.net/55DUG.jpg?s=64",
            "https://i.sstatic.net/WtEI9.png?s=64",
            "https://www.gravatar.com/avatar/85ec023b152222653807d2b5d51c3650?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/1cLxT.png",
            "https://i.sstatic.net/0TMc4HCY.jpg?s=64",
            "https://graph.facebook.com/524298716/picture?type=large",
            "https://www.gravatar.com/avatar/d1345aa0e01584a2fe7e7ae347d60c7a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/3KsHr.png?s=64",
            "https://i.sstatic.net/WmJNSJwX.png?s=64",
            "https://i.sstatic.net/rK9tq.png?s=64",
            "https://www.gravatar.com/avatar/e53334b0e9fb1675ff5fd29ec589f29c?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/k0CJD.png",
            "https://www.gravatar.com/avatar/d1345aa0e01584a2fe7e7ae347d60c7a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://lh5.googleusercontent.com/-PfNwpb82q6k/AAAAAAAAAAI/AAAAAAAAJ2o/zzyo52kYRHM/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/ba87f0a580e6d27d9be196606e8f9e8e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/d1345aa0e01584a2fe7e7ae347d60c7a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/42d5f725d391f8f72b14794cff07ce2d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d1345aa0e01584a2fe7e7ae347d60c7a?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/553432d57e16122344918eed500a3ef0?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/XRndu.png?s=64",
            "https://www.gravatar.com/avatar/8130c734bc00bca82985918a7c4337df?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/C3Phl.jpg?s=64",
            "https://i.sstatic.net/5IEpX.png",
            "https://i.sstatic.net/TN6Nw.png",
            "https://i.sstatic.net/0TMc4HCY.jpg?s=64",
            "https://www.gravatar.com/avatar/9b1131e2dfca319f7b0418c042571be5?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/CSG1T.png?s=64",
            "https://i.sstatic.net/nKt0p.png?s=64",
            "https://i.sstatic.net/piBNb.jpg?s=64",
            "https://i.sstatic.net/0AnuY.png?s=64",
            "https://stackoverflow.com/posts/1976007/ivc/5dda?prg=0ad42a5a-4b87-44a0-834c-6e2a1f6f6429"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-12-29T18:11:36",
        "summary": "",
        "meta_description": "I know that / is illegal in Linux, and * &quot; / \\ &lt; &gt; : | ? are illegal in Windows.\nWhat else am I missing? I need a comprehensive guide that also accounts for double-byte characters.",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/1976007/what-characters-are-forbidden-in-windows-and-linux-directory-names",
        "text": "A “comprehensive guide” of forbidden filename characters is not going to work on Windows because it reserves filenames as well as characters. Yes, characters like * \" ? and others are forbidden, but there are a infinite number of names composed only of valid characters that are forbidden. For example, spaces and dots are valid filename characters, but names composed only of those characters are forbidden.\n\nWindows does not distinguish between upper-case and lower-case characters, so you cannot create a folder named A if one named a already exists. Worse, seemingly-allowed names like PRN and CON, and many others, are reserved and not allowed. Windows also has several length restrictions; a filename valid in one folder may become invalid if moved to another folder. The rules for naming files and folders are on the Microsoft docs.\n\nYou cannot, in general, use user-generated text to create Windows directory names. If you want to allow users to name anything they want, you have to create safe names like A, AB, A2 et al., store user-generated names and their path equivalents in an application data file, and perform path mapping in your application.\n\nIf you absolutely must allow user-generated folder names, the only way to tell if they are invalid is to catch exceptions and assume the name is invalid. Even that is fraught with peril, as the exceptions thrown for denied access, offline drives, and out of drive space overlap with those that can be thrown for invalid names. You are opening up one huge can of hurt.\n\nUnder Linux and other Unix-related systems, there were traditionally only two characters that could not appear in the name of a file or directory, and those are NUL '\\0' and slash '/'. The slash, of course, can appear in a pathname, separating directory components.\n\nRumour1 has it that Steven Bourne (of 'shell' fame) had a directory containing 254 files, one for every single character that can appear in a file name (excluding /, '\\0'; the name . was the current directory, of course). It was used to test the Bourne shell and routinely wrought havoc on unwary programs such as backup programs.\n\nOther people have covered the rules for Windows filenames, with links to Microsoft and Wikipedia on the topic.\n\nNote that MacOS X has a case-insensitive file system. Current versions of it appear to allow colon : in file names, though historically, that was not necessarily always the case:\n\n$ echo a:b > a:b $ ls -l a:b -rw-r--r-- 1 jonathanleffler staff 4 Nov 12 07:38 a:b $\n\nHowever, at least with macOS Big Sur 11.7, the file system does not allow file names that are not valid UTF-8 strings. That means the file name cannot consist of the bytes that are always invalid in UTF-8 (0xC0, 0xC1, 0xF5-0xFF), and you can't use the continuation bytes 0x80..0xBF as the only byte in a file name. The error given is 92 Illegal byte sequence.\n\nPOSIX defines a Portable Filename Character Set consisting of:\n\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 . _ -\n\nSticking with names formed solely from those characters avoids most of the problems, though Windows still adds some complications.\n\n1 It was Kernighan & Pike in ['The Practice of Programming'](https://www.cs.princeton.edu/~bwk/tpop.webpage/) who said as much in Chapter 6, Testing, §6.5 Stress Tests:\n\nWhen Steve Bourne was writing his Unix shell (which came to be known as the Bourne shell), he made a directory of 254 files with one-character names, one for each byte value except '\\0' and slash, the two characters that cannot appear in Unix file names. He used that directory for all manner of tests of pattern-matching and tokenization. (The test directory was, of course, created by a program.) For years afterwards, that directory was the bane of file-tree-walking programs; it tested them to destruction.\n\nNote that the directory must have contained entries . and .., so it was arguably 253 files (and 2 directories), or 255 name entries, rather than 254 files. This doesn't affect the effectiveness of the anecdote, or the careful testing it describes.\n\nTPOP was previously at http://plan9.bell-labs.com/cm/cs/tpop and http://cm.bell-labs.com/cm/cs/tpop but both are now (2021-11-12) broken. See also Wikipedia on TPOP.\n\nInstead of creating a blacklist of characters, you could use a whitelist. All things considered, the range of characters that make sense in a file or directory name context is quite short, and unless you have some very specific naming requirements your users will not hold it against your application if they cannot use the whole ASCII table.\n\nIt does not solve the problem of reserved names in the target file system, but with a whitelist it is easier to mitigate the risks at the source.\n\nIn that spirit, this is a range of characters that can be considered safe:\n\nLetters (a-z A-Z) - Unicode characters as well, if needed\n\nDigits (0-9)\n\nUnderscore (_)\n\nHyphen (-)\n\nSpace\n\nDot (.)\n\nAnd any additional safe characters you wish to allow. Beyond this, you just have to enforce some additional rules regarding spaces and dots. This is usually sufficient:\n\nName must contain at least one letter or number (to avoid only dots/spaces)\n\nName must start with a letter or number (to avoid leading dots/spaces)\n\nName may not end with a dot or space (simply trim those if present, like Explorer does)\n\nThis already allows quite complex and nonsensical names. For example, these names would be possible with these rules, and be valid file names in Windows/Linux:\n\nA...........ext\n\nB -.- .ext\n\nIn essence, even with so few whitelisted characters you should still decide what actually makes sense, and validate/adjust the name accordingly. In one of my applications, I used the same rules as above but stripped any duplicate dots and spaces.\n\nDiscussing different possible approaches\n\nDifficulties with defining, what's legal and not were already addressed and whitelists were suggested. But not only Windows, but also many Unixoid OSes support more-than-8-bit characters such as Unicode. You could here also talk about encodings such as UTF-8. You can consider Jonathan Leffler's comment, where he gives info about modern Linux and describes details for MacOS. Wikipedia states, that (for example) the\n\nmodifier letter colon [(See 7. below) is] sometimes used in Windows filenames as it is identical to the colon in the Segoe UI font used for filenames. The [inherited ASCII] colon itself is not permitted.\n\nTherefore, I want to present a much more liberal approach using Unicode Homoglyph characters to replace the \"illegal\" ones. I found the result in my comparable use-case by far more readable and it's only limited by the used font, which is very broad, 3903 characters for Windows default. Plus, you can even restore the original content from the replacements.\n\nUsing a whole Unicode block such as \"fullwidth\" as replacement\n\nTo keep things organized, I will always give the character, it's name and the hexadecimal number representation. In the comments, i30817 talked about the idea of a reserved range just for 'idiotic OSes that abuse illegal characters' which is basically what Bill Sellers apparently does: \"It is not as pretty but it always works and it is easier to remember.\" Among the candidate blocks, there are the fullwidth, small form variants, combining/modifier/overlay (see 4. below) or halfwidth characters. Consider this table for an overview:\n\nCharacter Name Original Code Original Char Fullwidth Code Fullwidth Char Small Form Variants Small Form Variant Code 1. Asterisk U+2A * U+FF0A ＊ ﹡ U+FE61 2. Full Stop U+2E . U+FF0E ． ﹒ U+FE52 3. Quotation Mark U+22 \" U+FF02 ＂ none 4. Reverse Solidus U+5C \\ U+FF3C ＼ ﹨ U+FE68 5. Solidus U+2F / U+FF0F ／ none 6.1. Left Square Bracket U+5B [ U+FF3B ［ ﹝ (only tortoise) U+FE5D 6.2. Right Square Bracket U+5D ] U+FF3D ］ ﹞ (only tortoise) U+FE5E 7. Colon U+3A : U+FF3A ： ﹕ U+FE55 8. Semicolon U+3B ; U+FF1B ； ﹔ U+FE54 9. Vertical Line U+7C | U+FF5C ｜ none 10. Comma U+2C , U+FF0C ， ﹐ U+FE50 11. Question Mark U+3F ? U+FF1F ？ ﹖ U+FE56 12.1. Greater-than Sign U+3E > U+FF1E ＞ ﹥ U+FE65 12.2. Less-than Sign U+3C < U+FF1C ＜ ﹤ U+FE64 13. Circumflex Accent U+5E ^ U+FF3E ＾ none\n\nSome of the fullwidth characters (1, 6.1, 6.2 and 11) are also included below at \"more possible choices and research notes\".\n\nHow do you type non-standard characters\n\nSay you want to type ⵏ (Tifinagh Letter Yan). To get all of its information, you can always search for this character (ⵏ) on a suited platform such as this Unicode Lookup or that Unicode Table (that only allows to search for the name, in this case \"Tifinagh Letter Yan\"). You should obtain its Unicode number U+2D4F and the HTML-code &#11599; (note that 2D4F is hexadecimal for 11599). With this knowledge, you have several options to produce these special characters including the use of\n\ncode points to unicode converter or again the Unicode Lookup (please add 0x when you search for hex) to reversely convert the numerical representation into the unicode character (remember to set the code point base below to decimal or hexadecimal respectively)\n\na one-liner makro in Autohotkey: :?*:altpipe::{U+2D4F} to type ⵏ instead of the string altpipe - this is the way I input those special characters, my Autohotkey script can be shared if there is common interest\n\nAlt Characters or alt-codes by pressing and holding alt, followed by the decimal number for the desired character (more info for example here, look at a table here or there). For the example, that would be Alt+11599. Be aware, that many programs do not fully support this windows feature for all of unicode (as of time writing). Microsoft Office is an exception where it usually works, some other OSes provide similar functionality. Typing these chars with Alt-combinations into MS Word is also the way Wally Brockway suggests in his already mentioned answer¹⁴ - if you don't want to transfer all the hexadecimal values to their decimal asc, you can find some of them there¹⁴.\n\nin MS Office, you can also use ALT + X as described in this MS article to produce the chars\n\nMost OSes provide a character map accessory, where you can find you special characters, often they also include the option to search by name\n\nif you rarely need it, you can of course still just copy-paste the special character of your choice instead of typing it\n\nMore possible choices and research notes\n\nSo you're not happy with how the wider characters look? There are plenty of alternatives. Note: the hexadecimal number representation is is not case sensitive and leading zeroes can be added or omitted freely, so for example U+002A and u+2a are equivalent. If available, I'll try to point to more info or alternatives - feel free to show me more or better ones.\n\nInstead of * (U+2A * ASTERISK), you can use one of the many listed, for example U+2217 ∗ (ASTERISK OPERATOR) or the Full Width Asterisk U+FF0A ＊. u+20f0 ⃰ combining asterisk above from combining diacritical marks for symbols might also be a valid choice. You can read 4. for more info about the combining characters.\n\nInstead of . (U+2E . full stop), one of these could be a good option, for example ⋅ U+22C5 dot operator.\n\nInstead of \" (U+22 \" quotation mark), you can use “ U+201C english leftdoublequotemark, more alternatives see here. I also included some of the good suggestions of Wally Brockway's answer, in this case u+2036 ‶ reversed double prime and u+2033 ″ double prime - I will from now on denote ideas from that source by ¹⁴.\n\nInstead of / (U+2F / SOLIDUS), you can use ∕ DIVISION SLASH U+2215 (others here) or u+2044 ⁄ fraction slash¹⁴. You could also try ̸ U+0338 COMBINING LONG SOLIDUS OVERLAY or ̷ COMBINING SHORT SOLIDUS OVERLAY U+0337 but be aware about spacing for some characters, including the combining or overlay ones. They have no width on their own and can produce something like --> ̸th̷is which is ̸_th̷_is (underscores added for clarification to these 6 characters). With added spaces you get --> ̸ th ̷ is, which is ̸ _th ̷ _is (plus two spaces, makes 8 chars). The second one (COMBINING SHORT SOLIDUS OVERLAY) looks bad in the stackoverflow-font.\n\nInstead of \\ (U+5C Reverse solidus), you can use ⧵ U+29F5 Reverse solidus operator (more) or u+20E5 ⃥ combining reverse solidus overlay¹⁴.\n\nTo replace [ (U+5B [ Left square bracket) and ] (U+005D ] Right square bracket), you can use for example U+FF3B［ FULLWIDTH LEFT SQUARE BRACKET and U+FF3D ］FULLWIDTH RIGHT SQUARE BRACKET (from here, more possibilities here).\n\nInstead of : (u+3a : colon), you can use U+2236 ∶ RATIO (for mathematical usage) or U+A789 ꞉ MODIFIER LETTER COLON, (see colon (letter), sometimes used in Windows filenames as it is identical to the colon in the Segoe UI font used for filenames. The colon itself is not permitted ... source and more replacements see here). Another alternative is this one: u+1361 ፡ ethiopic wordspace¹⁴.\n\nInstead of ; (u+3b ; semicolon), you can use U+037E ; GREEK QUESTION MARK (see here).\n\nFor | (u+7c | vertical line), there are some good substitutes such as: U+2223 ∣ DIVIDES, U+0964 । DEVANAGARI DANDA, U+01C0 ǀ LATIN LETTER DENTAL CLICK (the last ones from Wikipedia) or U+2D4F ⵏ Tifinagh Letter Yan. Also the box drawing characters contain various other options.\n\nInstead of , (, U+002C COMMA), you can use for example ‚ U+201A SINGLE LOW-9 QUOTATION MARK (see here).\n\nFor ? (U+003F ? QUESTION MARK), these are good candidates: U+FF1F ？ FULLWIDTH QUESTION MARK or U+FE56 ﹖ SMALL QUESTION MARK (from here and here). There are also two more from the Dingbats Block (search for \"question\") and the u+203d ‽ interrobang¹⁴.\n\nWhile my machine seems to accept it unchanged, I still want to include > (u+3e greater-than sign) and < (u+3c less-than sign) for the sake of completeness. The best replacement here is probably also from the quotation block, such as u+203a › single right-pointing angle quotation mark and u+2039 ‹ single left-pointing angle quotation mark respectively. The tifinagh block only contains ⵦ (u+2D66)¹⁴ to replace <. The last notion is ⋖ less-than with dot u+22D6 and ⋗ greater-than with dot u+22D7.\n\nFor even more ideas, you can also look for example into this block. You still want more ideas? You can try to draw your desired character and look at the suggestions here. Please comment if you find something valuable.\n\nThe OP's question has already been fully answered here and here, for instance. Here I am just extending those answers by showing how to fix it on Linux:\n\nIn Linux, find all file and folder names with characters which are forbidden in Windows\n\nIf you're on Linux, and you just want to find all file and folder names with characters which are forbidden in Windows, you can run the following command:\n\n# Find all files and folders with any of these Windows-illegal characters in # their name: \\ : * ? \" < > | find . -name '*[\\\\:\\*?\\\"<\\>|]*'\n\nThis is really useful, for instance, so you can manually clean or \"fix\" a git code repository written on Linux which you now need to clone and use on Windows. If you don't find and clean out and fix all of the Windows-incompatible characters in file and folder names first, the repository will fail to clone on Windows, and you'll see errors like this, for instance:\n\n$ git clone https://github.com/ElectricRCAircraftGuy/eRCaGuy_hello_world.git Cloning into 'eRCaGuy_hello_world'... remote: Enumerating objects: 4342, done. remote: Counting objects: 100% (1184/1184), done. remote: Compressing objects: 100% (366/366), done. remote: Total 4342 (delta 819), reused 1149 (delta 799), pack-reused 3158Receiving objects: 100% (4342/4342), 6.50 Mi Receiving objects: 100% (4342/4342), 7.02 MiB | 6.50 MiB/s, done. Resolving deltas: 100% (2725/2725), done. error: invalid path 'cpp/class_copy_constructor_and_assignment_operator/Link to Copy constructor vs assignment operat or in C++ - GeeksforGeeks%%%%% [see `t2 = t1; -- calls assignment operator, same as \"t2.operator=(t1);\" `].desktop' fatal: unable to checkout working tree warning: Clone succeeded, but checkout failed. You can inspect what was checked out with 'git status' and retry with 'git restore --source=HEAD :/'\n\nAbove, you can see the error: invalid path which made the git clone fail because my filename at path cpp/class_copy_constructor_and_assignment_operator/Link to Copy constructor vs assignment operat or in C++ - GeeksforGeeks%%%%% [see `t2 = t1; -- calls assignment operator, same as \"t2.operator=(t1);\" `].desktop is invalid in Windows, causing the repository to fail to clone on Windows, because it has the double quote (\") character in it. So, I'm going to manually rename that file on Linux, removing the \" chars, and push the changes to my git repository so that I can then clone it on Windows.\n\nKeep Windows file paths <= 259 chars, and folder paths <= 248 chars (git clone error: Filename too long)\n\nEven if you remove the forbidden chars from your folder and filenames by finding them with the find . -name '*[\\\\:\\*?\\\"<\\>|]*' command above, keep in mind that the Windows MAX_PATH limitation is still in place, limiting your total path length to <= 259 chars for a file, or <= 248 chars for a folder. See here: Maximum filename length in NTFS (Windows XP and Windows Vista)?\n\nIf you violate this path limit and then try to git clone a repo on Windows, you'll get this Filename too long error:\n\n$ git clone https://github.com/ElectricRCAircraftGuy/eRCaGuy_hello_world.git Cloning into 'eRCaGuy_hello_world'... remote: Enumerating objects: 4347, done. remote: Counting objects: 100% (1189/1189), done. remote: Compressing objects: 100% (370/370), done. remote: Total 4347 (delta 823), reused 1152 (delta 800), pack-reused 3158 Receiving objects: 100% (4347/4347), 7.03 MiB | 5.82 MiB/s, done. Resolving deltas: 100% (2729/2729), done. error: unable to create file cpp/class_copy_constructor_and_assignment_operator/Link to Copy constructor vs assignmen t operator in C++ - GeeksforGeeks%%%%% [see `t2 = t1; -- calls assignment operator, same as ''t2.operator=(t1);'' `] .desktop: Filename too long Updating files: 100% (596/596), done. Filtering content: 100% (8/8), 2.30 MiB | 2.21 MiB/s, done. fatal: unable to checkout working tree warning: Clone succeeded, but checkout failed. You can inspect what was checked out with 'git status' and retry with 'git restore --source=HEAD :/'\n\nNotice this part, because of my ridiculously-long filename:\n\nerror: unable to create file cpp/class_copy_constructor_and_assignment_operator/Link to Copy constructor vs assignment operator in C++ - GeeksforGeeks%%%%% [see `t2 = t1; -- calls assignment operator, same as ''t2.operator=(t1);'' `].desktop: Filename too long\n\nShorten your long filename to reduce the path length, commit and push the change, and try to clone again.\n\nReferences:\n\nWhile on Windows 10 Pro, I tried to type a \" into a folder name, and I got this popup window error:\n\nI used https://regex101.com/ (see: https://regex101.com/r/lI5Lg9/1), to build and test the [\\\\:\\*?\\\"<\\>|] regular expression to know which characters to escape, by looking in the \"Explanation\" section on the right-hand side:"
    }
}