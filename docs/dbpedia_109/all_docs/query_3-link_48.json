{
    "id": "dbpedia_109_3",
    "rank": 48,
    "data": {
        "url": "https://doc.rust-lang.org/std/primitive.char.html",
        "read_more_link": "",
        "language": "en",
        "title": "char",
        "top_image": "https://doc.rust-lang.org/static.files/favicon-2c020d218678b618.svg",
        "meta_img": "https://doc.rust-lang.org/static.files/favicon-2c020d218678b618.svg",
        "images": [
            "https://doc.rust-lang.org/static.files/rust-logo-151179464ae7ed46.svg",
            "https://doc.rust-lang.org/static.files/rust-logo-151179464ae7ed46.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A character type.",
        "meta_lang": "en",
        "meta_favicon": "../static.files/favicon-32x32-422f7d1d52889060.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "A character type.\n\nThe char type represents a single character. More specifically, since âcharacterâ isnât a well-defined concept in Unicode, char is a âUnicode scalar valueâ.\n\nThis documentation describes a number of methods and trait implementations on the char type. For technical reasons, there is additional, separate documentation in the std::char module as well.\n\nÂ§Validity and Layout\n\nA char is a âUnicode scalar valueâ, which is any âUnicode code pointâ other than a surrogate code point. This has a fixed numerical definition: code points are in the range 0 to 0x10FFFF, inclusive. Surrogate code points, used by UTF-16, are in the range 0xD800 to 0xDFFF.\n\nNo char may be constructed, whether as a literal or at runtime, that is not a Unicode scalar value. Violating this rule causes undefined behavior.\n\nUnicode scalar values are also the exact set of values that may be encoded in UTF-8. Because char values are Unicode scalar values and functions may assume incoming str values are valid UTF-8, it is safe to store any char in a str or read any character from a str as a char.\n\nThe gap in valid char values is understood by the compiler, so in the below example the two ranges are understood to cover the whole range of possible char values and there is no error for a non-exhaustive match.\n\nAll Unicode scalar values are valid char values, but not all of them represent a real character. Many Unicode scalar values are not currently assigned to a character, but may be in the future (âreservedâ); some will never be a character (ânoncharactersâ); and some may be given different meanings by different users (âprivate useâ).\n\nchar is guaranteed to have the same size, alignment, and function call ABI as u32 on all platforms.\n\nÂ§Representation\n\nchar is always four bytes in size. This is a different representation than a given character would have as part of a String. For example:\n\nAs always, remember that a human intuition for âcharacterâ might not map to Unicodeâs definitions. For example, despite looking similar, the âÃ©â character is one Unicode code point while âeÌâ is two Unicode code points:\n\nThis means that the contents of the first string above will fit into a char while the contents of the second string will not. Trying to create a char literal with the contents of the second string gives an error:\n\nerror: character literal may only contain one codepoint: 'eÌ' let c = 'eÌ'; ^^^"
    }
}