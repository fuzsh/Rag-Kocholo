{
    "id": "dbpedia_109_2",
    "rank": 24,
    "data": {
        "url": "https://www.researchgate.net/figure/An-example-of-the-bitmap-image-of-a-character_fig3_262159666",
        "read_more_link": "",
        "language": "en",
        "title": "An example of the bitmap image of a character",
        "top_image": "https://www.researchgate.net/publication/262159666/figure/fig3/AS:667618667155466@1536184102589/An-example-of-the-bitmap-image-of-a-character.png",
        "meta_img": "https://www.researchgate.net/publication/262159666/figure/fig3/AS:667618667155466@1536184102589/An-example-of-the-bitmap-image-of-a-character.png",
        "images": [
            "https://www.researchgate.net/figure/profile/Koji-Nakano-4/publication/262159666/figure/fig3/AS:667618667155466@1536184102589/An-example-of-the-bitmap-image-of-a-character.png",
            "https://www.researchgate.net/figure/profile/Koji-Nakano-4/publication/262159666/figure/fig3/AS:667618667155466@1536184102589/An-example-of-the-bitmap-image-of-a-character_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Koji-Nakano-4/publication/262159666/figure/fig4/AS:667618667155467@1536184102601/The-replacement-map-in-an-affected-region_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Koji-Nakano-4/publication/262159666/figure/fig1/AS:296824503062528@1447779884103/figure-fig1_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Koji-Nakano-4/publication/262159666/figure/fig2/AS:296824503062529@1447779884152/figure-fig2_Q320.jpg",
            "https://c5.rgstatic.net/m/435982309481010/images/template/default/author/author_default_m.jpg",
            "https://c5.rgstatic.net/m/435982309481010/images/template/default/author/author_default_m.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://www.researchgate.net/figure/publication/329599501/figure/tbl1/AS:703199749099520@1544667293153/93-41-58_Q320.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://www.researchgate.net/figure/profile/Ondrej_Guth2/publication/309615346/figure/fig1/AS:423955690463232@1478090321966/Factor-transducer-for-string-acacaa-Example-3125_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Ondrej_Guth2/publication/309615346/figure/fig2/AS:423955694657537@1478090322308/Factor-automaton-for-string-acacaa-Example-3128_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Ondrej_Guth2/publication/309615346/figure/fig3/AS:423955698851840@1478090323043/Transition-diagram-of-deterministic-suffix-automaton-for-string-w-abb-over-alphabet-A_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Ondrej_Guth2/publication/309615346/figure/fig5/AS:423955698851842@1478090323563/Deterministic-2-approximate-trie-like-suffix-automaton-for-string-acacca-and-Hamming_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Ondrej_Guth2/publication/309615346/figure/fig4/AS:423955698851841@1478090323540/Transition-diagram-of-deterministic-1-approximate-suffix-automaton-for-string-w-abcc_Q320.jpg",
            "https://i1.rgstatic.net/ii/profile.image/302931759304705-1449235967543_Q64/Ondrej_Guth2.jpg",
            "https://www.researchgate.net/figure/profile/Yasuaki-Ito-3/publication/300360679/figure/fig1/AS:351081977663492@1460715874713/The-resulting-halftone-images-for-the-ramp-image_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Yasuaki-Ito-3/publication/300360679/figure/fig2/AS:351081977663494@1460715874786/CUDA-hardware-architecture_Q320.jpg",
            "https://www.researchgate.net/figure/profile/Yasuaki-Ito-3/publication/300360679/figure/fig3/AS:667602305183755@1536180201321/Groups-of-blocks_Q320.jpg",
            "https://c5.rgstatic.net/m/435982309481010/images/template/default/author/author_default_m.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://www.researchgate.net/figure/profile/Kazuo-Furuta/publication/316194548/figure/tbl1/AS:671534477766659@1537117704186/shows-that-the-average-absolute-errors-are-larger_Q320.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278673111437321-1443452255498_Q64/Kazuo-Furuta.jpg",
            "https://i1.rgstatic.net/ii/profile.image/11431281093717839-1667261853053_Q64/Shunsuke-Kondo-3.jpg",
            "https://i1.rgstatic.net/ii/profile.image/11431281084701259-1663341384226_Q64/Abid-Sultan-3.jpg",
            "https://i1.rgstatic.net/ii/profile.image/11431281236590627-1713286615240_Q64/Ijist-Jr.jpg",
            "https://i1.rgstatic.net/ii/profile.image/11431281084701259-1663341384226_Q64/Abid-Sultan-3.jpg",
            "https://i1.rgstatic.net/ii/profile.image/808720158187526-1569825319940_Q64/Muhammad-Mushtaq-19.jpg",
            "https://i1.rgstatic.net/ii/profile.image/273667061972998-1442258720975_Q64/Katherine-Isaacs.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/276958723231744-1443043513014_Q64/Jacir-Bordim.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://i1.rgstatic.net/ii/profile.image/278083409072129-1443311659164_Q64/Koji-Nakano-4.jpg",
            "https://c5.rgstatic.net/m/4671872220764/images/template/default/profile/profile_default_m.jpg",
            "https://www.researchgate.net/figure/images/icons/svgicons/researchgate-logo-white.svg",
            "https://i1.rgstatic.net/images/nativeApp/app_store_dark_logo.svg",
            "https://c5.rgstatic.net/m/44490443524024/images/appstore/AndroidCta.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Yuji Takeuchi",
            "Daisuke Takafuji",
            "Yasuaki Ito",
            "Koji Nakano",
            "Michael Vielhaber",
            "Ond≈ôej Guth",
            "Hiroaki Koge",
            "A.D. Rajapakse",
            "Kazuo Furuta",
            "Shunsuke Kondo"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Download scientific diagram | An example of the bitmap image of a character from publication: ASCII art generation using the local exhaustive search on the GPU | An ASCII art is a matrix of characters that reproduces an original gray-scale image. It is commonly used to represent pseudo gray-scale images in text based messages. Since automatic generation of high quality ASCII art images is very hard, they are usually produced by hand.... | GPU, Art and Images | ResearchGate, the professional network for scientists.",
        "meta_lang": "en",
        "meta_favicon": "https://c5.rgstatic.net/m/42199702882742/images/favicon/favicon-32x32.png",
        "meta_site_name": "ResearchGate",
        "canonical_link": "https://www.researchgate.net/figure/An-example-of-the-bitmap-image-of-a-character_fig3_262159666",
        "text": "ASCII (American Standard Code for Information Interchange) art is a fascinating and durable kind of visual expression in the everchanging digital realm. This study delves deeply into the complex craftsmanship associated with converting photos to ASCII characters art, making use of Python's versatility and strength as a programming language. We explore a wide range of methods, libraries, complex algorithms, and many applications related to this fascinating process as we go into a comprehensive investigation. Our main goal is to provide a comprehensive understanding of the image-to-ASCII art conversion by developing a GUI and reveal its deep relevance in modern digital culture. In addition, we analyse the instruments that are at our disposal with great care, meeting the needs of both the creative community and the practical use of this novel medium. We hope to shed light on the subtle nuances and draw attention to the artistic possibilities and useful applications that are there in the field of image-to-ASCII conversion by offering a thorough examination.\n\nWith the passage of time networking field has become much more advanced. Because of this advancement, the communicating parties don't want to rely on the third party for communication because a third party may misuse or share their personal information with someone else. That's why there is a need for such a method at which we can rely on secure communication. In recent years a lot of cryptographic techniques based on ASCII values have been proposed, but selecting an efficient and effective technique from them is a big task. In this paper, we have made a comparison among several techniques based on certain parameters to find out the best one for the ease of the users.\n\nWith the passage of time networking field has become much more advanced. Because of this advancement, the communicating parties don't want to rely on the third party for communication because a third party may misuse or share their personal information with someone else. That's why there is a need for such a method at which we can rely on secure communication. In recent years a lot of cryptographic techniques based on ASCII values have been proposed, but selecting an efficient and effective technique from them is a big task. In this paper, we have made a comparison among several techniques based on certain parameters to find out the best one for the ease of the users.\n\nPackage managers provide ease of access to applications by removing the time-consuming and sometimes completely prohibitive barrier of successfully building, installing, and maintaining the software for a system. A package dependency contains dependencies between all packages required to build and run the target software. Package management system developers, package maintainers, and users may consult the dependency graph when a simple listing is insufficient for their analyses. However, users working in a remote command line environment must disrupt their workflow to visualize dependency graphs in graphical programs, possibly needing to move files between devices or incur forwarding lag. Such is the case for users of Spack, an open source package management system originally developed to ease the complex builds required by supercomputing environments. To preserve the command line workflow of Spack, we develop an interactive ASCII visualization for its dependency graphs. Through interviews with Spack maintainers, we identify user goals and corresponding visual tasks for dependency graphs. We evaluate the use of our visualization through a command line-centered study, comparing it to the system's two existing approaches. We observe that despite the limitations of the ASCII representation, our visualization is preferred by participants when approached from a command line interface workflow.\n\nRow-wise and column-wise prefix-sum computation of a matrix has many applications in the area of image processing such as computation of the summed area table and the Euclidean distance map. It is known that the prefix-sums of a one-dimensional array can be computed efficiently on the GPU. Hence, row-wise prefix-sums of a matrix can also be computed efficiently on the GPU by executing this prefix-sum algorithm for every row in parallel. However, the same approach does not work well for computing column-wise prefix-sums due to inefficient stride memory access to the global memory is performed. The main contribution of this paper is to present an almost optimal column-wise prefix-sum algorithm on the GPU. Quite surprisingly, experimental results using NVIDIA TITAN X show that our column-wise prefix-sum algorithm runs only 2‚Äì6% slower than matrix duplication. Thus, our column-wise prefix-sum algorithm is almost optimal.\n\nThe main contribution of this paper is to present an implementation that performs the exhaustive search to verify the Collatz conjecture using a GPU. Consider the following operation on an arbitrary positive number: if the number is even, divide it by two, and if the number is odd, triple it and add one. The Collatz conjecture asserts that, starting from any positive number m, repeated iteration of the operations eventually produces the value 1. We have implemented it on NVIDIA GeForce GTX TITAN X and evaluated the performance. The experimental results show that, our GPU implementation can verify 1.31√ó1012 64-bit numbers per second. While the sequential CPU implementation on Intel Core i7-4790 can verify 5.25√ó10‚Åπ 64-bit numbers per second. Thus, our implementation on the GPU attains a speed-up factor of 249 over the sequential CPU implementation. Additionally, we accelerated the computation of counting the number of the above operations until a number reaches 1, called delay that is one of the mathematical interests for the Collatz conjecture by the GPU. Using a similar idea, we achieved a speed-up factor of 73.\n\nThe bulk execution of a sequential algorithm is to execute it for many different inputs in turn or at the same time. A sequential algorithm is oblivious if the address accessed at each time unit is independent of the input. It is known that the bulk execution of an oblivious sequential algorithm can be implemented to run on a GPU very efficiently. The main purpose of our work is to implement the bulk execution of a Euclidean algorithm computing the GCD (Greatest Common Divisor) of two large numbers in a GPU. We first present a new efficient Euclidean algorithm that we call the Approximate Euclidean algorithm. The idea of the Approximate Euclidean algorithm is to compute an approximation of quotient by just one 64-bit division and to use it for reducing the number of iterations of the Euclidean algorithm. Unfortunately, the Approximate Euclidean algorithm is not oblivious. To show that the bulk execution of the Approximate Euclidean algorithm can be implemented efficiently in the GPU, we introduce a semi-oblivious sequential algorithms, which is almost oblivious. We show that the Approximate Euclidean algorithm can be implemented as a semi-oblivious algorithm. The experimental results show that our parallel implementation of the Approximate Euclidean algorithm for 1024-bit integers running on GeForce GTX Titan X GPU is 90 times faster than the Intel Xeon CPU implementation.\n\nThe LZW compression is a well known patented lossless compression method used in Unix file compression utility \"compress\" and in GIF and TIFF image formats. It converts an input string of characters (or 8-bit unsigned integers) into a string of codes using a code table (or dictionary) that maps strings into codes. Since the code table is generated by repeatedly adding newly appeared substrings during the conversion, it is very hard to parallelize LZW compression. The main purpose of this paper is to accelerate LZW compression for TIFF images using a CUDA-enabled GPU. Our goal is to implement LZW compression algorithm using several acceleration techniques using CUDA, although it is a very hard task. Suppose that a GPU generates a resulting image generated by a computer graphics or image processing CUDA program and we want to archive it as a LZW-compressed TIFF image in the SSD connected to the host PC. We focused on the following two scenarios. Scenario~1: the resulting image is compressed using a GPU and written in the SSD through the host PC, and Scenario~2: it is transferred to the host PC, and compressed and written in the SSD using a CPU. The experimental results using NVIDIA GeForce GTX 980 and Intel Core i7 4790 show that Scenario 1 using our LZW compression implemented in a GPU is about 3 times faster than Scenario 2. From this fact, we can say that it makes sense to compress images using a GPU to archive them in the SSD."
    }
}