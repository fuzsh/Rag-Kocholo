{
    "id": "dbpedia_3643_2",
    "rank": 66,
    "data": {
        "url": "https://docs.mapbox.com/api/search/geocoding/",
        "read_more_link": "",
        "language": "en",
        "title": "Geocoding API | API Docs",
        "top_image": "https://static-assets.mapbox.com/branding/social/social-1200x630.v4.png",
        "meta_img": "https://static-assets.mapbox.com/branding/social/social-1200x630.v4.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The Mapbox Geocoding API runs forward and reverse geocoding queries.",
        "meta_lang": "en",
        "meta_favicon": "https://static-assets.mapbox.com/branding/favicon/v2/apple-touch-icon.png?v=gAd4JjrGWl",
        "meta_site_name": "Mapbox",
        "canonical_link": "https://docs.mapbox.com/api/search/geocoding/",
        "text": "The Mapbox Geocoding API does two things: forward geocoding and reverse geocoding:\n\nForward geocoding converts location text into geographic coordinates, turning 2 Lincoln Memorial Circle SW into -77.050,38.889.\n\nReverse geocoding turns geographic coordinates into place names, turning -77.050, 38.889 into 2 Lincoln Memorial Circle SW. These location names can vary in specificity, from individual addresses to states and countries that contain the given coordinates.\n\nFor more background information on the Mapbox Geocoding API and how it works, see the How geocoding works guide.\n\nYou may also use one of several wrapper libraries to integrate the Mapbox Geocoding API into an application instead of using it directly.\n\nFor Mapbox Search JS SDK, Geocoding components are available on releases 1.0.0-beta.20 and later.\n\nPLAYGROUND\n\nGeocoding API playground\n\nTry forward, reverse, and batch geocoding queries and see the results on a map.\n\nGeographic Feature Typesâ\n\nVarious types of geographic features are available the Mapbox geocoding. Any type might appear as a top-level response, as context in a top-level response, or as a filtering option using the types parameter. Not all features are available or relevant in all parts of the world. New types are occasionally added as necessary to correctly capture global administrative hierarchies.\n\nThe geographic feature types listed from the largest to the most granular, are:\n\nStoring Geocoding Resultsâ\n\nThe Mapbox Geocoding API offers two types of result storage: Permanent and Temporary.\n\nTemporary results are not allowed to be cached, while Permanent results are allowed to be cached and stored indefinitely.\n\nUsing Permanent storage with the Geocoding API requires that you have a valid credit card on file or an active enterprise contract.\n\nBy default, the Geocoding API will use Temporary geocoding. To use Permanent geocoding, set the optional permanent parameter to true.\n\nForward geocoding with search text inputâ\n\nThe forward geocoding query type allows you to look up a location using a string of search text and returns its standardized address, geographic context, and coordinates.\n\nYou can further refine the results of a forward geocoding query with the following optional parameters:\n\nOptional parametersTypeDescriptionpermanentbooleanSpecify whether you intend to store the results of the query (true) or not (false, default).autocompletebooleanSpecify whether to return autocomplete results (true, default) or not (false). When autocomplete is enabled, results will be included that start with the requested string, rather than responses that match it exactly. For example, a query for India might return both India and Indiana with autocomplete enabled, but only India if itâs disabled.\n\nWhen autocomplete is enabled, each user keystroke counts as one request to the Geocoding API. For example, a search for \"Cali\" would be reflected as four separate Geocoding API requests. To reduce the total requests sent, you can configure your application to only call the Geocoding API after a specific number of characters are typed.bboxnumberLimit results to only those contained within the supplied bounding box. Bounding boxes should be supplied as four numbers separated by commas, in minLon,minLat,maxLon,maxLat order. The bounding box cannot cross the 180th meridian.\n\nYou can use the Location Helper to find a bounding box for use with this API.countrystringLimit results to one or more countries. Permitted values are ISO 3166 alpha 2 country codes separated by commas.formatstringSpecify the desired response format of results (geojson, default) or for backwards compatibility (v5).languagestringSet the language of the text supplied in responses. Also affects result scoring, with results matching the userâs query in the requested language being preferred over results that match in another language. For example, an autocomplete query for things that start with Frank might return Frankfurt as the first result with an English (en) language parameter, but Frankreich (âFranceâ) with a German (de) language parameter.\n\nOptions are IETF language tags comprised of a mandatory ISO 639-1 language code and, optionally, one or more IETF subtags for country or script.\n\nMore than one value can also be specified, separated by commas. The first language in the list will be considered as the primary language and a response will be generated for it. For other languages, translations will be provided, see the translations section.\n\nFor more information on which specific languages are supported, see the language coverage section.limitintegerSpecify the maximum number of results to return. The default is 5 and the maximum supported is 10.proximitystringBias the response to favor results that are closer to this location. Provided as two comma-separated coordinates in longitude,latitude order, or the string ip to bias based on reverse IP lookup.typesstringFilter results to include only a subset (one or more) of the available feature types. Options are country, region, postcode, district, place, locality, neighborhood, street, and address. Multiple options can be comma-separated.\n\nFor more information on the available types, see the geographic feature types section.worldviewstringReturns features that are defined differently by audiences that belong to various regional, cultural, or political groups. Available worldviews are: ar,cn,in,jp,ma,ru,tr,us. If worldview is not set, the us worldview boundaries are returned by default.\n\nFor more information about using the worldview parameter, see the worldviews section.\n\nExample requests: Forward geocoding with search text inputâ\n\nResponse: Forward geocoding with search text inputâ\n\nSee the Geocoding response object section.\n\nForward geocoding with structured inputâ\n\nNew in v6\n\nStructured Input is a type of forward geocoding search that allows you to define the feature type of each element of the search query by type. This can increase the accuracy of results for well-formed datasets. To use Structured Input, the q parameter is dropped in favor of separate parameters for each feature type.\n\nFor best results, each element of the query must be assigned a feature type, and set autocomplete to false.\n\nThe following feature types can be defined in a Structured Input query:\n\nYou can further refine the results of a forward geocoding query with the following optional parameters:\n\nOptional parametersTypeDescriptionpermanentbooleanSpecify whether you intend to store the results of the query (true) or not (false, default).autocompletebooleanSpecify whether to return autocomplete results (true, default) or not (false). When autocomplete is enabled, results will be included that start with the requested string, rather than responses that match it exactly. For example, a query for India might return both India and Indiana with autocomplete enabled, but only India if itâs disabled.\n\nWhen autocomplete is enabled, each user keystroke counts as one request to the Geocoding API. For example, a search for \"Cali\" would be reflected as four separate Geocoding API requests. To reduce the total requests sent, you can configure your application to only call the Geocoding API after a specific number of characters are typed.bboxnumberLimit results to only those contained within the supplied bounding box. Bounding boxes should be supplied as four numbers separated by commas, in minLon,minLat,maxLon,maxLat order. The bounding box cannot cross the 180th meridian.\n\nYou can use the Location Helper to find a bounding box for use with this API.countrystringLimit results to one or more countries. Permitted values are ISO 3166 alpha 2 country codes separated by commas.formatstringSpecify the desired response format of results (geojson, default) or for backwards compatibility (v5).languagestringSet the language of the text supplied in responses. Also affects result scoring, with results matching the userâs query in the requested language being preferred over results that match in another language. For example, an autocomplete query for things that start with Frank might return Frankfurt as the first result with an English (en) language parameter, but Frankreich (âFranceâ) with a German (de) language parameter.\n\nOptions are IETF language tags comprised of a mandatory ISO 639-1 language code and, optionally, one or more IETF subtags for country or script.\n\nMore than one value can also be specified, separated by commas. The first language in the list will be considered as the primary language and a response will be generated for it. For other languages, translations will be provided, see the translations section.\n\nFor more information on which specific languages are supported, see the language coverage section.limitintegerSpecify the maximum number of results to return. The default is 5 and the maximum supported is 10.proximitystringBias the response to favor results that are closer to this location. Provided as two comma-separated coordinates in longitude,latitude order, or the string ip to bias based on reverse IP lookup.typesstringFilter results to include only a subset (one or more) of the available feature types. Options are country, region, postcode, district, place, locality, neighborhood, street, and address. Multiple options can be comma-separated.\n\nFor more information on the available types, see the geographic feature types section.worldviewstringReturns features that are defined differently by audiences that belong to various regional, cultural, or political groups. Available worldviews are: ar,cn,in,jp,ma,ru,tr,us. If worldview is not set, the us worldview boundaries are returned by default.\n\nFor more information about using the worldview parameter, see the worldviews section.\n\nExample request: Forward geocoding with structured inputâ\n\nResponse: Forward geocoding with structured inputâ\n\nSee the Geocoding response object section.\n\nReverse geocodingâ\n\nThe reverse geocoding query type allows you to look up a pair of coordinates and returns the geographic features there, including a standardized address or place and full geographic context.\n\nYou can further refine the results of a reverse geocoding query with the following optional parameters:\n\nExample request: Reverse geocodingâ\n\nResponse: Reverse geocodingâ\n\nThe API response for a reverse geocoding query returns a GeoJSON feature collection in Mapbox Geocoding Response format. For more details on how a response from the Geocoding API is formatted, see the Geocoding response object section.\n\nBatch geocodingâ\n\nImproved in v6\n\npost\n\nhttps://api.mapbox.com /search/geocode/v6/batch\n\nThe batch geocoding query type allows you to request up to 1000 forward or reverse geocoding queries in a single request.\n\nBatch geocoding requests are formatted as a JSON object passed as the BODY of the request, but with multiple search queries one after another. Fields which were defined as query parameters in the URL string will become fields in the JSON object. Fields specifying multiple values (for example types, country, bbox, proximity) can be passed either as a comma-separated strings or as JSON-formatted arrays (for example a types filter value could be represented as \"address,street,place\" or [\"address\", \"street\", \"place\"]).\n\nIn a single batch geocoding request, you can bundle queries of different types, including forward queries, forward Structure Input queries, and reverse queries. Each query can also has parameters defined individually -- for example one query could have IP proximity set to on while the rest have it off.\n\nYou can make a batch geocoding request by using an HTTP POST request with the following body structure:\n\nRequest Body\n\nExample request: Batch geocodingâ\n\nResponse: Batch geocodingâ\n\nThe response from a batch geocoding query is an object with a batch property. The batch property is an array of Geocoding response objects. The order of queries in the request determines the order of corresponding objects in the batch array. If there are no results returned for a particular query within the batch, the features array for that query is empty ( \"features\": [] ).\n\nHere's an example request in which there is a list of three queries. The first two requests are for forward geocoding, and the last one is for reverse.\n\nNotice that in the response, the results are in same the order as the queries in the request, where the second query aslkdjf doesn't return a result but still exists in the second position of the array:\n\nGeocoding response objectâ\n\nThe response to a Geocoding API request is an object that contains the following properties:\n\nThe data powering the Mapbox Geocoding API is constantly being updated and improved. This means that the values of properties in the response object are not guaranteed and may change within the same version of the API. Properties may be added to, but will not be removed from, the response within the same API version.\n\nEach feature object in the features array may have the properties described below:\n\nEach properties object in a feature may have the attributes described below:\n\nThe Context Objectâ\n\nThe context object within properties is a powerful piece of data which breaks out the complete geographical hierarchy for a given address or place. It is both a reliable way to access the named values of each component part of an address, plus contains feature-specific data such as the Wikidata id and 3-letter alpha country code.\n\nEach sub-object in the context always has a mapbox_id and name associated with it. The id can be queried directly via a forward geocoding search to traverse into a different geographical layer. Address features will also include an address sub-object, which additionally contains street_name and address_number properties.\n\nA secondary_address feature will also have a matching sub-object in the context:\n\nExample Context Objectâ\n\nThe following is an example of the context object returned for the address 2595 Lucky John Drive, Park City, Utah 84060, United States:\n\nTranslationsâ\n\nWhen providing more than one language in the context object for the country, region, district, place, neighborhood properties will appear the translations property. This is an object where the key is the language code and the value is an object with language and name properties.\n\nTranslations Exampleâ\n\nExample of the context object when passing the parameter language=en,es.\n\nPoint accuracy for address featuresâ\n\nThe coordinates.accuracy property in a Geocoding response object is a point accuracy metric for the returned address feature. This list is subject to change.\n\nSmart Address Matchâ\n\nNew in v6\n\nThe match_code object in the Geocoding API helps you understand how the resulting address feature aligns with the query submitted. Available only for address-type features, the match_code provides a breakdown of how each element of the result matches with the query, plus a confidence score, based on how well it matches. This can help you make decisions about what results to keep or throw out based on your application's tolerance for fuzzy matching on the query.\n\nSmart Address Match is available for all forward geocoding requests that return an address type feature. It works best when using Structured Input forward queries, as the request components must be typed explicitly.\n\nExample match_codeâ\n\nThis forward geocoding request with structured input includes a valid street address in Park City Utah, USA.\n\nhttps://api.mapbox.com/search/geocode/v6/forward?&address_number=2595&street=lucky john dr&place=park city&region=CO\n\nNote that the region parameter value is CO, and will yield an unmatched status in the match_code in the resulting feature's properties as the matched address is not in the US state of Colorado.\n\nExample response: Forward geocodingâ\n\nWorldviewsâ\n\nUse the optional worldview parameter to identify geographic features whose characteristics are defined differently by audiences belonging to various regional, cultural, or political groups. The Geocoding API only supports worldviews for the country and region data types, but may expand to additional data types in the future.\n\nAvailable worldviewsâ\n\nThe Geocoding API supports the following values for the worldview parameter:\n\nReturned features are not officially approved for use by the above countries' respective governments.\n\nEach query supports a maximum of one worldview. Attempting to query for multiple worldviews in one search will result in an error message. When no worldview is selected, the Geocoding API returns features for the us worldview.\n\nUsing the worldview parameterâ\n\nIn Mapbox services, the worldview data field is used to identify geographic features whose characteristics are defined differently by audiences belonging to various regional, cultural, or political groups. Setting a worldview affects the place values returned for an address that is located in an area of non-unanimous ownership or definition.\n\nFor example, consider an address in the Ilemi Triangle, which borders Eastern Equatoria (South Sudan) and Turkana (Kenya). Depending on the worldview selected, an address in this location will be returned in different country contexts:\n\nIf worldview=cn, Kaaleng, Eastern Equatoria, or South Sudan will be returned.\n\nIf worldview=us, Kaaleng, Turkana, or Kenya will be returned.\n\nThis means that if you use wordlview=cn worldview with the Kenya (ke) country filter, a search for an address in this area will not be successful. Instead, you would need to use worldview=cn in combination with the South Sudan (ss) country filter.\n\nBe cautious when combining worldview with the country parameter, since these indices are only loosely coupled.\n\nFor a visual example of how changing the worldview value impacts the boundaries on a map, see the companion Maps boundary service.\n\nLanguage coverageâ\n\nTranslation availability also varies by language and region. We provide the following tiers of language support:\n\nGlobal coverageâ\n\nThese languages are almost always present for country, region, and prominent place features.\n\nLocal coverageâ\n\nThese languages may lack global coverage but are almost always present for country, region, and prominent place features where they are widely used.\n\nLimited coverageâ\n\nThese languages are sometimes present but coverage tends to be inconsistent or geographically constrained.\n\nFind more details about the format and properties of Geocoding API responses in the Geocoding response object section.\n\nGeocoding API errorsâ\n\nGeocoding restrictions and rate limitsâ\n\nTo protect the Geocoding API and maximize service stability, Mapbox rate limits Geocoding API requests.\n\nThe default Geocoding API rate limit is 1000 requests per minute, but can be adjusted on a per-account basis. Mapbox may automatically adjust customer rate limits to accommodate high traffic applications, or prevent abuse, if deemed appropriate.\n\nAn HTTP error code of 429 will be returned if the rate limit is reached.\n\nIf you require a higher rate limit, contact us.\n\nGeocoding API pricingâ\n\nUsage of the Geocoding API is measured in API requests. Details about the number of requests included in the free tier and the cost per request beyond what is included in the free tier are available on the pricing page. You may only use responses from the Geocoding API in conjunction with a Mapbox map.\n\nAutocomplete and pricingâ\n\nThe Geocoding API's autocomplete parameter is enabled by default. If you are using the API with autocomplete enabled, you will likely accumulate one API request per keystroke. For example, if you have autocomplete turned on and you set up your application to make a Geocoding API request every time a user types a character into a search bar, then a user typing \"Cali\" looking for \"California\" will be making four Geocoding API requests, one for each letter.\n\nTo reduce the number of requests made while autocomplete is enabled, you can wait to begin making API requests until a specific number of characters are entered. The Geocoding API doesn't have a parameter for limiting requests built in, but you can use the Mapbox Search JS SDK to configure the search configuration, or you can write it into your application directly.\n\nBatch geocoding and pricingâ\n\nBatch geocoding allows you to have multiple geocoding queries in a single request. Each individual search in a batch geocoding request counts as one request. For example, a request that contains three searches would count as three requests and be billed as such. These three requests would be reflected on your statistics graph and your bill.\n\nJapan Geocodingâ\n\nThe Geocoding API includes a robust Japan address and place search. To access the new, high-accuracy and high-coverage Japan search, you must set both the language and country parameters:\n\nlanguage=ja\n\ncountry=jp\n\nJapan geocoding responses use the same geographic feature types section as other countries to define a feature's context components (with the addition of a block component, where applicable). These feature types represent the following equivalents of a Japanese address structure:"
    }
}