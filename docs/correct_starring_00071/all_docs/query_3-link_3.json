{
    "id": "correct_starring_00071_3",
    "rank": 3,
    "data": {
        "url": "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph",
        "read_more_link": "",
        "language": "en",
        "title": "Graph: Information Retrieval project.",
        "top_image": "https://opengraph.githubassets.com/28d892577f2ca7a369ab14a289d98cf969da4f94bc06ba45ebed0106e7b3bf39/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph",
        "meta_img": "https://opengraph.githubassets.com/28d892577f2ca7a369ab14a289d98cf969da4f94bc06ba45ebed0106e7b3bf39/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph",
        "images": [
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/KGA1.png",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/KGA2.png",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/out1.png",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/out2.png",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/out3.PNG",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utk1.png",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utk2.png",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utk10.PNG",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utk4.PNG",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utk6.PNG",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utk5.PNG",
            "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph/raw/main/img/utklast.PNG"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Information Retrieval project. Contribute to utkarshaditya01/IR---The-Entertainment-Knowledge-Graph development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/utkarshaditya01/IR---The-Entertainment-Knowledge-Graph",
        "text": "An IR project based on Knowledge Graph Structures for movies and actors/actresses analysis.\n\nAbhinav Talari (S20180010003)\n\nUtkarsh Ajay Aditya (S20180010182)\n\nProject Title: The Entertainment Knowledge Graph\n\nDomain of Project: Entertainment (Movies, television programs and celebrity content\n\nThis project focuses on end-to-end utilization of knowledge graphs and semantics in the field of entertainment. Our entities include movies, tv shows, actors/actresses and all their attributes and relationships. Our project is based on entity ranking, entity linking, entity-based retrieval models, entity recommendation, document filtering and knowledge graph population. The knowledge graph will represent movies and tv shows as well as actors, genres and the complex interrelationships among them, which will help us retrieve more informational value compared to free text.\n\nIndividual Breakdown for each member of the team.\n\nAssociated Files: Scraper_For_Actors.py\n\nThis python code file is used for scraping actor data from Wikipedia and storing it.\n\nScraped Data from Wikipedia by Even going through the underlying links which increased the corpus exhaustively\n\nThe Functions Used :\n\n1. wiki_scrape(page) This Looks for a page on Wikipedia extracts it,parses it and the underlying link and keeps on fetching data from those links.\n\nFor Example for a query as wiki_scrape(\"Robert Downey Jr.\") Made it crawl 800+ links\n\n2. wiki_page(page) This just fetches the data from the very first hit it gets on Wikipedia the query for this function needs to be very precise\n\nFor Example wiki_page(\"The Avengers\") will not fetch the movie synopsis of the MCU's Avengers but just links and names of other movies/entities with the same name or context.\n\nAssociated Files: Knowledge_Graph_for_Actors.py\n\nBased on the data crawled and collected for Actors and Movies , I created a knowledge graph to perform \"Entity-Entity pair based on Relation\" Query.\n\nThe sentences were tokenized and the Entity-Relation-Entity were identified and put into the Knowledge Graph\n\nThe knowledge graph was visualized using Networkx\n\nOutput:Below is the knowledge graph representing top 250 actors along with their extracted entities (subject-object pairs) and the predicates (relation between entities).\n\nThe networkx library was used to create a network from this data frame. The nodes will represent the entities and the edges or connections between the nodes will represent the relations between the nodes.\n\nIt is going to be a directed graph. In other words, the relation between any connected node pair is not two-way, it is only from one node to another. For example, “John eats pasta” The above figure represents a sub-knowledge graph based on the relation \"starred in\" for actors.\n\nAssociated Files: RankedRetrieval_actors.py\n\nBased on the Data Scraped I created a Ranked Retrieval System using tf-idf ranking.\n\nSince the Boolean Model only fetches complete matches, it doesn’t address the problem of the documents being partially matched. The Vector Space Model solves this problem by introducing vectors of index items each assigned with weights. The weights are ranged from positive (if matched completely or to some extent) to negative (if unmatched or completely oppositely matched) if documents are present. Term Frequency - Inverse Document Frequency (tf-idf) is one of the most popular techniques where weights are terms (e.g. words, keywords, phrases etc.) and dimensions is number of words inside corpus. Therefore I created a ranked retrieval based on tf-idf ranking\n\nOutput\n\nBelow is the output showing for the query \"Angelina Jolie\"\n\nAssociated Files: imdb_moviedata_scrape.py\n\nThe above code is used for scraping movie details of over 83,000 movies and storing it in final_dataset.csv The collected fields for a given movie were:\n\nTitle, Date, Run Time, Genre, Rating Score, Description, Director, Stars, VotesGross\n\nAssociated Files: KnowledgeGraph_movies_recommender_system.py\n\nIt works on the basis of final_dataset_imdb.csv.\n\nNOTE : All the graphs would be saved as .pdf file in the code directory. One has to view the pdf file where he can zoom and every node will be visible in HD resolution.\n\nThe above code file defines 3 different types of knowledge graph structures related to movies:\n\nThe above figure shows the detailed view of a given movie name showing all its details like director, cast, release date, etc.\n\nThe above figure shows the comparison between 2 input movie names on basis of genre, languages and director.\n\nThe blue nodes near the edges of the graph represent genres, edges of same color represent same genre movies.\n\nA movie node's color is derived by the combination of its genres color. Therefore movies with similar characteristics would be of same color and in the same color.\n\nProperties of graph :\n\na. There is homogeneity between the movies belonging to the same color. (Represented by same color.)\n\nb. There is heterogeneity among movies from different clusters. (Represented by different colors.)\n\nZoomed pic of a cluster.\n\n​ Here you can see the movies which belong to different colors. Each color represents a color.\n\nSuch a graph provides us insight about what movie an user can like based on few of his judgments.\n\nAssociated Files: KnowledgeGraph_movies_recommender_system.py\n\nGiven a movie name it will return a list of top 10 similar movies along with their matching scores.\n\nIt is based on an empirically derived ranking system which takes into account all the movie details like genres, crew,\n\ndirector, writer, year, other user reviews, etc.\n\nExample : For movie - The Avengers\n\nExample : For movie mission impossible\n\nAssociated Files: KnowledgeGraph_movies_recommender_system.py\n\nEntertainment_domain_spell_correction.py is an autocorrect program file to correct incorrect a) movie name or TV series name b) actors/actresses name c) director/write name\n\nExample For query \"Robept Downez\" and another query \"emmg watsoz\"\n\nImplementation of spell checker\n\nStore Dictionary in Trie\n\nQuery is processed word by word.\n\nIf word is in dictionary, move ahead.\n\nIf word is not in dictionary, display the candidate set.\n\nAlso display the post probable candidate by calculating the posterior probability"
    }
}