{
    "id": "correct_starring_00071_3",
    "rank": 27,
    "data": {
        "url": "https://aws.amazon.com/blogs/machine-learning/part-1-power-recommendation-and-search-using-an-imdb-knowledge-graph/",
        "read_more_link": "",
        "language": "en",
        "title": "Power recommendation and search using an IMDb knowledge graph – Part 1",
        "top_image": "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/20/imdb-knowledge-graph-part-1.jpg",
        "meta_img": "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/20/imdb-knowledge-graph-part-1.jpg",
        "images": [
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-1.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2020/09/23/LaunchStack.jpg",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-2.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-3.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-4.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-5.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-6.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-7.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-8.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/12/07/imdb-blog1-9.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/03/02/Gaurav-Rele.png",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/10/04/Matthew-Rhodes.jpg",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/01/10/Divya-Bhargavi.jpg",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/05/07/Karan-Sindwani.jpg",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2020/09/17/soji-adeshina-100.jpg",
            "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/04/22/Vidya-Sagar-Ravipati.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Gaurav Rele",
            "Soji Adeshina",
            "Divya Bhargavi",
            "Karan Sindwani",
            "Vidya Sagar Ravipati",
            "Matthew Rhodes"
        ],
        "publish_date": "2022-12-20T08:33:33-08:00",
        "summary": "",
        "meta_description": "The IMDb and Box Office Mojo Movies/TV/OTT licensable data package provides a wide range of entertainment metadata, including over 1 billion user ratings; credits for more than 11 million cast and crew members; 9 million movie, TV, and entertainment titles; and global box office reporting data from more than 60 countries. Many AWS media and […]",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/main/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services",
        "canonical_link": "https://aws.amazon.com/blogs/machine-learning/part-1-power-recommendation-and-search-using-an-imdb-knowledge-graph/",
        "text": "The IMDb and Box Office Mojo Movies/TV/OTT licensable data package provides a wide range of entertainment metadata, including over 1 billion user ratings; credits for more than 11 million cast and crew members; 9 million movie, TV, and entertainment titles; and global box office reporting data from more than 60 countries. Many AWS media and entertainment customers license IMDb data through AWS Data Exchange to improve content discovery and increase customer engagement and retention.\n\nIn this three-part series, we demonstrate how to transform and prepare IMDb data to power out-of-catalog search for your media and entertainment use cases. In this post, we discuss how to prepare IMDb data and load the data into Amazon Neptune for querying. In Part 2, we discuss how to use Amazon Neptune ML to train graph neural network (GNN) embeddings from the IMDb graph. In Part 3, we walk through a demo application out-of-catalog search that is powered by the GNN embeddings.\n\nSolution overview\n\nIn this series, we use the IMDb and Box Office Mojo Movies/TV/OTT licensed data package to show how you can built your own applications using graphs.\n\nThis licensable data package consists of JSON files with IMDb metadata for more than 9 million titles (including movies, TV and OTT shows, and video games) and credits for more than 11 million cast, crew, and entertainment professionals. IMDb’s metadata package also includes over 1 billion user ratings, as well as plots, genres, categorized keywords, posters, credits, and more.\n\nIMDb delivers data through AWS Data Exchange, which makes it incredibly simple for you to access data to power your entertainment experiences and seamlessly integrate with other AWS services. IMDb licenses data to a wide range of media and entertainment customers, including pay TV, direct-to-consumer, and streaming operators, to improve content discovery and increase customer engagement and retention. Licensing customers also use IMDb data to enhance in-catalog and out-of-catalog title search and power relevant recommendations.\n\nWe use the following services as part of this solution:\n\nAWS Lambda\n\nAmazon Neptune\n\nAmazon Neptune ML\n\nAmazon OpenSearch Service\n\nAWS Glue\n\nAmazon SageMaker notebooks\n\nAmazon SageMaker Processing\n\nAmazon SageMaker Training\n\nThe following diagram depicts the workflow for part 1 of the 3 part blog series.\n\nIn this post, we walk through the following high-level steps:\n\nProvision Neptune resources with AWS CloudFormation.\n\nAccess the IMDb data from AWS Data Exchange.\n\nClone the GitHub repo.\n\nProcess the data in Neptune Gremlin format.\n\nLoad the data into a Neptune cluster.\n\nQuery the data using Gremlin Query Language.\n\nPrerequisites\n\nThe IMDb data used in this post requires an IMDb content license and paid subscription to the IMDb and Box Office Mojo Movies/TV/OTT licensing package in AWS Data Exchange. To inquire about a license and access sample data, visit developer.imdb.com.\n\nAdditionally, to follow along with this post, you should have an AWS account and familiarity with Neptune, the Gremlin query language, and SageMaker.\n\nProvision Neptune resources with AWS CloudFormation\n\nNow that you’ve seen the structure of the solution, you can deploy it into your account to run an example workflow.\n\nYou can launch the stack in AWS Region us-east-1 on the AWS CloudFormation console by choosing Launch Stack:\n\nTo launch the stack in a different Region, refer to Using the Neptune ML AWS CloudFormation template to get started quickly in a new DB cluster.\n\nThe following screenshot shows the stack parameters to provide.\n\nStack creation takes approximately 20 minutes. You can monitor the progress on the AWS CloudFormation console.\n\nWhen the stack is complete, you’re now ready to process the IMDb data. On the Outputs tab for the stack, note the values for NeptuneExportApiUri and NeptuneLoadFromS3IAMRoleArn. Then proceed to the following steps to gain access to the IMDb dataset.\n\nAccess the IMDb data\n\nIMDb publishes its dataset once a day on AWS Data Exchange. To use the IMDb data, you first subscribe to the data in AWS Data Exchange, then you can export the data to Amazon Simple Storage Service (Amazon S3). Complete the following steps:\n\nOn the AWS Data Exchange console, choose Browse catalog in the navigation pane.\n\nIn the search field, enter IMDb.\n\nSubscribe to either IMDb and Box Office Mojo Movie/TV/OTT Data (SAMPLE) or IMDb and Box Office Mojo Movie/TV/OTT Data.\n\nComplete the steps in the following workshop to export the IMDb data from AWS Data Exchange to Amazon S3.\n\nClone the GitHub repository\n\nComplete the following steps:\n\nOpen the SageMaker instance that you created from the CloudFormation template.\n\nClone the GitHub repository.\n\nProcess IMDb data in Neptune Gremlin format\n\nTo add the data into Amazon Neptune, we process the data in Neptune gremlin format. From the GitHub repository, we run process_imdb_data.py to process the files. The script creates the CSVs to load the data into Neptune. Upload the data to an S3 bucket and note the S3 URI location.\n\nNote that for this post, we filter the dataset to include only movies. You need either an AWS Glue job or Amazon EMR to process the full data.\n\nTo process the IMDb data using AWS Glue, complete the following steps:\n\nOn the AWS Glue console, in the navigation pane, choose Jobs.\n\nOn the Jobs page, choose Spark script editor.\n\nUnder Options, choose Upload and edit existing script and upload the 1_process_imdb_data.py file.\n\nChoose Create.\n\nOn the editor page, choose Job Details.\n\nOn the Job Details page, add the following options:\n\nFor Name, enter imdb-graph-processor.\n\nFor Description, enter processing IMDb dataset and convert to Neptune Gremlin Format.\n\nFor IAM role, use an existing AWS Glue role or create an IAM role for AWS Glue. Make sure you give permission to your Amazon S3 location for the raw data and output data path.\n\nFor Worker type, choose G 2X.\n\nFor Requested number of workers, enter 20.\n\nExpand Advanced properties.\n\nUnder Job Parameters, choose Add new parameter and enter the following key value pair:\n\nFor the key, enter --output_bucket_path.\n\nFor the value, enter the S3 path where you want to save the files. This path is also used to load the data into the Neptune cluster.\n\nTo add another parameter, choose Add new parameter and enter the following key value pair:\n\nFor the key, enter --raw_data_path.\n\nFor the value, enter the S3 path where the raw data is stored.\n\nChoose Save and then choose Run.\n\nThis job takes about 2.5 hours to complete.\n\nThe following table provide details about the nodes for the graph data model.\n\nDescription Label Principal cast members Person Long format movie Movie Genre of movies Genre Keyword descriptions of movies Keyword Shooting locations of movies Place Ratings for movies rating Awards event where movie received an award awards\n\nSimilarly, the following table shows some of the edges included in the graph. There will be in total 24 edge types.\n\nDescription Label From To Movies an actress has acted in casted-by-actress Movie Person Movies an actor has acted in casted-by-actor Movie Person Keywords in a movie by character described-by-character-keyword Movie keyword Genre of a movie is-genre Movie Genre Place where the movie was shot Filmed-at Movie Place Composer of a movie Crewed-by-composer Movie Person award nomination Nominated_for Movie Awards award winner Has_won Movie Awards\n\nLoad the data into a Neptune cluster\n\nIn the repo, navigate to the graph_creation folder and run the 2_load.ipynb. To load the data to Neptune, use the %load command in the notebook, and provide your AWS Identity and Access Management (IAM) role ARN and Amazon S3 location of your processed data.\n\nThe following screen shot shows the output of the command.\n\nNote that the data load takes about 1.5 hours to complete. To check the status of the load, use the following command:\n\nWhen the load is complete, the status displays LOAD_COMPLETED, as shown in the following screenshot.\n\nAll the data is now loaded into graphs, and you can start querying the graph.\n\nFig: Sample Knowledge graph representation of movies in IMDb dataset. Movies “Saving Private Ryan” and “Bridge of Spies” have common connections like actor and director as well as indirect connections through movies like “The Catcher was a Spy” in the graph network.\n\nQuery the data using Gremlin\n\nTo access the graph in Neptune, we use the Gremlin query language. For more information, refer to Querying a Neptune Graph.\n\nThe graph consists of a rich set of information that can be queried directly using Gremlin. In this section, we show a few examples of questions that you can answer with the graph data. In the repo, navigate to the graph_creation folder and run the 3_queries.ipynb notebook. The following section goes over all the queries from the notebook.\n\nWorldwide gross of movies that have been shot in New Zealand, with minimum 7.5 rating\n\nThe following query returns the worldwide gross of movies filmed in New Zealand, with a minimum rating of 7.5:\n\nThe following screenshot shows the query results.\n\nTop 50 movies that belong to action and drama genres and have Oscar-winning actors\n\nIn the following example, we want to find the top 50 movies in two different genres (action and drama) with Oscar-winning actors. We can do this by using three different queries and merging the information using Pandas:\n\nThe following screenshot shows our results.\n\nTop movies that have common keywords “tattoo” and “assassin”\n\nThe following query returns movies with keywords “tattoo” and “assassin”:\n\nThe following screenshot shows our results.\n\nMovies that have common actors\n\nIn the following query, we find movies that have Leonardo DiCaprio and Tom Hanks:\n\nWe get the following results.\n\nConclusion\n\nIn this post, we showed you the power of the IMDb and Box Office Mojo Movies/TV/OTT dataset and how you can use it in various use cases by converting the data into a graph using Gremlin queries. In Part 2 of this series, we show you how to create graph neural network models on this data that can be used for downstream tasks.\n\nFor more information about Neptune and Gremlin, refer to Amazon Neptune Resources for additional blog posts and videos.\n\nAbout the Authors\n\nGaurav Rele is a Data Scientist at the Amazon ML Solution Lab, where he works with AWS customers across different verticals to accelerate their use of machine learning and AWS Cloud services to solve their business challenges.\n\nMatthew Rhodes is a Data Scientist I working in the Amazon ML Solutions Lab. He specializes in building Machine Learning pipelines that involve concepts such as Natural Language Processing and Computer Vision.\n\nDivya Bhargavi is a Data Scientist and Media and Entertainment Vertical Lead at the Amazon ML Solutions Lab, where she solves high-value business problems for AWS customers using Machine Learning. She works on image/video understanding, knowledge graph recommendation systems, predictive advertising use cases.\n\nKaran Sindwani is a Data Scientist at Amazon ML Solutions Lab, where he builds and deploys deep learning models. He specializes in the area of computer vision. In his spare time, he enjoys hiking.\n\nSoji Adeshina is an Applied Scientist at AWS where he develops graph neural network-based models for machine learning on graphs tasks with applications to fraud & abuse, knowledge graphs, recommender systems, and life sciences. In his spare time, he enjoys reading and cooking."
    }
}