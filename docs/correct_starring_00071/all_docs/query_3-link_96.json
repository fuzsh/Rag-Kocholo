{
    "id": "correct_starring_00071_3",
    "rank": 96,
    "data": {
        "url": "https://www.amazon.science/blog/building-product-graphs-automatically",
        "read_more_link": "",
        "language": "en",
        "title": "Building product graphs automatically",
        "top_image": "https://assets.amazon.science/dims4/default/7ee8110/2147483647/strip/true/crop/2500x1313+0+47/resize/1200x630!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fd0%2Fe3%2Fb1bb5656434e827bd014298faac5%2Fautoknow.png",
        "meta_img": "https://assets.amazon.science/dims4/default/7ee8110/2147483647/strip/true/crop/2500x1313+0+47/resize/1200x630!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fd0%2Fe3%2Fb1bb5656434e827bd014298faac5%2Fautoknow.png",
        "images": [
            "https://assets.amazon.science/dims4/default/84daefc/2147483647/strip/true/crop/54x30+0+12/resize/1440x810!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F85%2Fcd%2F36ef075d49dc9ee4f0502f9cc72e%2Fsubscribe-icon.png",
            "https://assets.amazon.science/07/d9/d204ca2242bea8215dbf9ca5c43e/amazon-science-logo.svg",
            "https://assets.amazon.science/dims4/default/84daefc/2147483647/strip/true/crop/54x30+0+12/resize/1440x810!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F85%2Fcd%2F36ef075d49dc9ee4f0502f9cc72e%2Fsubscribe-icon.png",
            "https://assets.amazon.science/dims4/default/cf56646/2147483647/strip/true/crop/200x200+0+0/resize/295x295!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fc7%2F1c%2F9149214992241828c1492cd23847%2Fbuilding-product-graphs-automaticallyqrcode",
            "https://assets.amazon.science/dims4/default/a3887ef/2147483647/strip/true/crop/2500x1407+0+0/resize/1200x675!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fd0%2Fe3%2Fb1bb5656434e827bd014298faac5%2Fautoknow.png",
            "https://assets.amazon.science/dims4/default/450cbb1/2147483647/strip/true/crop/2484x1246+0+0/resize/1200x602!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fcb%2F7d%2Fb5c83e13458baa2c966a851200d6%2Fcleaning-module.png",
            "https://assets.amazon.science/dims4/default/969920a/2147483647/strip/true/crop/1920x1077+0+2/resize/535x300!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fda%2F67%2Faa0861384d4596fff9b59d3c601b%2Fcosmo-framework.png",
            "https://assets.amazon.science/dims4/default/59ef46d/2147483647/strip/true/crop/1834x1028+0+2/resize/535x300!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F15%2F86%2Fdc52a1534021858e2da293055dab%2Fesci-schema.jpg",
            "https://assets.amazon.science/dims4/default/4f0eeea/2147483647/strip/true/crop/7200x4037+0+231/resize/535x300!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F00%2F9b%2Fa95baca14f20a2c78c9d24a8d0ea%2Fgraph-diffusion.png",
            "https://assets.amazon.science/17/83/40ea1c0845b88a6e9f3b42613d82/amazon-science-logo-white.svg",
            "https://assets.amazon.science/dims4/default/29c19bf/2147483647/strip/true/crop/1014x877+4+346/resize/326x282!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F20%2Fc4%2Fc36de9f643dab18e2f27ea071590%2Famazon-science-newsletter-project-kuiper.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/oWsuodsiuAk?enablejsapi=1"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Xin Luna Dong"
        ],
        "publish_date": "2020-08-13T13:00:26.096000+00:00",
        "summary": "",
        "meta_description": "Automated system tripled the number of facts in a product graph.",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "Amazon Science",
        "canonical_link": "https://www.amazon.science/blog/building-product-graphs-automatically",
        "text": "Knowledge graphs are data structures that capture relationships between data in a very flexible manner. They can help make information retrieval more precise, and they can also be used to uncover previously unknown relationships in large data sets.\n\nManually assembling knowledge graphs is extremely time consuming, so researchers in the field have long been investigating techniques for producing them automatically. The approach has been successful for domains such as movie information, which feature relatively few types of relationships and abound in sources of structured data.\n\nAutomatically producing knowledge graphs is much more difficult in the case of retail products, where the types of relationships between data items are essentially unbounded — color for clothes, flavor for candy, wattage for electronics, and so on — and where much useful information is stored in free-form product descriptions, customer reviews, and question-and-answer forums.\n\nThis year, at the Association for Computing Machinery’s annual conference on Knowledge Discovery and Data Mining (KDD), my colleagues and I will present a system we call AutoKnow, a suite of techniques for automatically augmenting product knowledge graphs with both structured data and data extracted from free-form text sources.\n\nWith AutoKnow, we increased the number of facts in Amazon’s consumables product graph (which includes the categories grocery, beauty, baby, and health) by almost 200%, identifying product types with 87.7% accuracy.\n\nWe also compared each of our system’s five modules, which execute tasks such as product type extraction and anomaly detection, to existing systems and found that they improved performance across the board, often quite dramatically (an improvement of more than 300% in the case of product type extraction).\n\nThe AutoKnow framework\n\nKnowledge graphs typically consist of entities — the nodes of the graph, often depicted as circles — and relations between the entities — usually depicted as line segments connecting nodes. The entity “drink”, for example, might be related to the entity “coffee” by the relationship “contains”. The entity “bag of coffee” might be related to the entity “16 ounces” by the relationship “has_volume”.\n\nIn a narrow domain such as movie information, the number of entity types — such as director, actor, and editor — is limited, as are the number of relationships — directed, performed in, edited, and so on. Moreover, movie sources often provide structured data, explicitly listing cast and crew.\n\nIn a retail domain, on the other hand, the number of product types tends to grow as the graph expands. Each product type has its own set of attributes, which may be entirely different from the next product type’s — color and texture, for instance, versus battery type and effective range. And the vital information about a product — that a coffee mug gets too hot to hold, for instance — could be buried in the free-form text of a review or question-and-answer section.\n\nAutoKnow addresses these challenges with five machine-learning-based processing modules, each of which builds on the outputs of the one that precedes it:\n\nTaxonomy enrichment extends the number of entity types in the graph;\n\nRelation discovery identifies attributes of products, those attributes’ range of possible values (different flavors or colors, for instance), and, crucially, which of those attributes are important to customers;\n\nData imputation uses the entity types and relations discovered by the previous modules to determine whether free-form text associated with products contains any information missing from the graph;\n\nData cleaning sorts through existing and newly extracted data to see whether any of it was misclassified in the source texts; and\n\nSynonym finding attempts to identify entity types and attribute values that have the same meaning.\n\nThe ontology suite\n\nThe inputs to AutoKnow include an existing product graph; a catalogue of products that includes some structured information, such as labeled product names, and unstructured product descriptions; free-form product-related information, such as customer reviews and sets of product-related questions and answers; and product query data.\n\nTo identify new products, the taxonomy enrichment module uses a machine learning model that labels substrings of the product titles in the source catalogue. For instance, in the product title “Ben & Jerry’s black cherry cheesecake ice cream”, the model would label the substring “ice cream” as the product type.\n\nThe same model also labels substrings that indicate product attributes, for use during the relation discovery step. In this case, for instance, it would label “black cherry cheesecake” as the flavor attribute. The model is trained on product descriptions whose product types and attributes have already been classified according to a hand-engineered taxonomy.\n\nNext, the taxonomy enrichment module classifies the newly extracted product types according to their hypernyms, or the broader product categories that they fall under. Ice cream, for instance, falls under the hypernym “Ice cream and novelties”, which falls under the hypernym “Frozen”, and so on.\n\nThe hypernym classifier uses data about customer interactions, such as which products customers viewed or purchased after a single query. Again, the machine learning model is trained on product data labeled according to an existing taxonomy.\n\nRelation discovery\n\nThe relation discovery module classifies product attributes according to two criteria. The first is whether the attribute applies to a given product. The attribute flavor, for instance, applies to food but not to clothes.\n\nThe second criterion is how important the attribute is to buyers of a particular product. Brand name, it turns out, is more important to buyers of snack foods than to buyers of produce.\n\nBoth classifiers analyze data provided by providers — product descriptions — and by customers — reviews and Q&As. With both types of input data, the classifiers consider the frequency with which attribute words occur in texts associated with a given product; with the provider data, they also consider how frequently a given word occurs across instances of a particular product type.\n\nThe models were trained on data that had been annotated to indicate whether particular attributes applied to the associated products.\n\nThe data suite\n\nStep three, data imputation, looks for terms in product descriptions that may fit the new product and attribute categories identified in the previous steps, but which have not yet been added to the graph.\n\nThis step uses embeddings, which represent descriptive terms as points in a vector space, where related terms are grouped together. The idea is that, if a number of terms clustered together in the space share the same attribute or product type, the unlabeled terms in the same cluster should, too.\n\nPreviously, my Amazon colleagues and I, together with colleagues at the University of Utah, demonstrated state-of-the-art data imputation results by training a sequence-tagging model, much like the one I described above, which labeled “black cherry cheesecake” as a flavor.\n\nHere, however, we vary that approach by conditioning the sequence-tagging model on the product type: that is, the tagged sequence output by the model depends on the product type, whose embedding we include among the inputs.\n\nThe next step is data cleaning, which uses a machine learning model based on the Transformer architecture. The inputs to the model are a textual product description, an attribute (flavor, volume, color, etc.), and a value for that attribute (chocolate, 16 ounces, blue, etc.). Based on the product description, the model decides whether the attribute value is misassigned.\n\nTo train the model, we collect valid attribute-value pairs that occur across many instances of a single product type (all ice cream types, for instance, have flavors); these constitute the positive examples. We also generate negative examples by replacing the values in valid attribute-value pairs with mismatched values.\n\nFinally, we analyze our product and attribute sets to find synonyms that should be combined in a single node of the product graph. First, we use customer interaction data to identify items that were viewed during the same queries; their product and attribute descriptions are candidate synonyms.\n\nThen we use a combination of techniques to filter the candidate terms. These include edit distance (a measure of the similarity of two strings of characters) and a neural network. In tests, this approach yielded a respectable .83 area under the precision-recall curve.\n\nIn ongoing work, we’re addressing a number of outstanding questions, such as how to handle products with multiple hypernyms (products that have multiple “parents” in the product hierarchy), cleaning data before it’s used to train our models, and using image data as well as textual data to improve our models’ performance."
    }
}