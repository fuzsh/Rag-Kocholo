{
    "id": "wrong_mix_property_subsidiary_00069_0",
    "rank": 71,
    "data": {
        "url": "https://johnolamendy.wordpress.com/tag/ibm-rational-unified-process/",
        "read_more_link": "",
        "language": "en",
        "title": "IBM Rational Unified Process",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://2.gravatar.com/avatar/b4f8f5453644d5f24b929238472aedc5eefdecbb7930c25088031116c844f87c?s=45&d=identicon&r=G",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure1.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure2.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure3.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure4.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure5.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure6.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure7.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure8.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2011/06/figure9.png?w=652",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2012/10/jcolamendy.png?w=78",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2010/11/mvplogo.png?w=63",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2010/11/o_acelogo_clr.gif?w=144",
            "https://johnolamendy.wordpress.com/wp-content/uploads/2010/12/certification.png?w=210",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "JC Olamendy"
        ],
        "publish_date": "2011-06-01T01:27:53+00:00",
        "summary": "",
        "meta_description": "Posts about IBM Rational Unified Process written by JC Olamendy",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "JC Olamendy's Thoughts",
        "canonical_link": "https://johnolamendy.wordpress.com/tag/ibm-rational-unified-process/",
        "text": "SAD\n\nSoftware Architecture Document\n\nfor ContosOnline\n\nPrepared by MyArchitectureTeam\n\nPrepared for Contoso\n\nApproved by Mr. John Doe\n\nVersion: 1.0\n\nDate: 05-23-2011\n\nPage1\n\n———————————————————————————————————————–\n\nDocument Information\n\nDocument:\n\nSoftware Architecture Document\n\nPrepared by:\n\nJuan Carlos Olamendy Turruellas\n\nResponsible:\n\nJuan Carlos Olamendy Turruellas\n\nCreation Date:\n\n05-23-2011\n\nApproved by:\n\nApproved Date:\n\nRevision History\n\nDate Version Description Author 05-23-2011 1.0 Creation of the SAD JCO\n\nPage2\n\n———————————————————————————————————————–\n\nSoftware Architecture Document\n\n1. Introduction\n\n1.1 Purpose\n\nThis document provides a comprehensive architectural overview of the ContosOnline system, using a number of different architectural views to depict different aspects of the system. It is intended to capture and convey the significant architectural decisions which have been made on the system.\n\nIn order to depict the software as accurately as possible, the structure of this document is based on the “4+1” model view of architecture [KRU41].\n\n1.2 Scope\n\nThe scope of this SAD is to depict the software architecture of the Online Store system (ContosOnline) created for the company Contoso. Throughout the document, the software architecture is depicted using different views (following the “4+1” approach) as well as the key business scenario, non-functional requirements, constraints and the implementation strategies.\n\n1.3 Definitions, Acronyms and Abbreviations\n\nTerm\n\nDescription\n\nSAD Software Architecture Document RUP Rational Unified Process UML Unified Modeling Language\n\n1.4 References\n\n[KRU41]: The “4+1” view model of software architecture, Philippe Kruchten, November 1995, http://www3.software.ibm.com/ibmdl/pub/software/rational/web/whitepapers/2003/Pbk4p1.pdf\n\n[RSA]: IBM Rational Software Architect, http://www-306.ibm.com/software/awdtools/architect/swarchitect/index.html\n\n[RUP]:The IBM Rational Unified Process, http://www-306.ibm.com/software/awdtools/rup/index.html\n\n2. Architectural Representation\n\nThis document details the software architecture using different views defined in the “4+1” model [KRU41]. The views used to document the ContosOnline system are:\n\nUse Case view\n\nAudience: All the stakeholders of the system, including the end-users\n\nRelated Artifacts : Use Case diagram\n\nLogical view\n\nAudience: Architects and designers\n\nRelated Artifacts: Layer, Class, Sequence and Activity diagrams\n\nProcess view\n\nAudience: Architects and Integrators\n\nRelated Artifacts: Activity diagram\n\nImplementation view\n\nAudience: Architects and Programmers\n\nRelated Artifacts: Component diagram to describe system components and Package diagram to represent the development view\n\nDeployment view\n\nAudience: Architects and Deployment managers\n\nRelated Artifacts: Deployment diagram\n\nData view (optional)\n\nAudience: Architects, Data specialists and Database administrators\n\nRelated Artifacts: Entity-Relationship diagram\n\n3. Architectural Goals and Constraints\n\nThis section describes the software requirements and objectives that have some significant impact on the architecture.\n\n3.1 Implementation strategy\n\nThe ContosOnline system will be developed following the N-tier architectural style where the application is web-based; and Microsoft.NET related technologies are used as the development and deployment environment (as shown in the following figure).\n\nFigure 4\n\nYou must use the development standards and policies defined by the Architecture Team and Contoso such as referential architecture, coding naming, best practices, auditing policies, etc.\n\nThe ContosOnline system will be deployed onto a developed and deployed using Microsoft.NET platform and related technology:\n\nIIS 7.0\n\nMicrosoft.NET 4.0\n\nVisual Studio.NET 2010\n\nWCF 4.0\n\nAS.NET MVC 2.0\n\nLINQ to SQL as the ORM\n\nOracle 10g database\n\njQuery\n\nExtJS\n\n[We can also include the rationale for the decisions]\n\n3.2 Architectural and design patterns\n\nIn order to develop the ContosOnline system, the main architectural pattern is based on multiple layers and service-oriented architecture. You can also use other styles such as component-based and aspect-oriented architecture.\n\n3.3 Usability\n\nThe solution must follow the latest user experience standards and supporting technologies, in order for the human actors to use easily the system and reduce the learning curve. You can use mockups for the screen analysis and design as well as RIA technologies such as Ajax, jQuery, ExtJS, etc.\n\n3.4 Transaction\n\nThe ContosOnline system is transactional, leveraging the technical platform capabilities. Transaction management model of the Microsoft.NET platform will be reused intensively.\n\n3.5 Security\n\nThe ContosOnline system must be secured, so that a customer can make online payments.\n\nIt must support the following security services:\n\n• Authentication: Login using at least a user name and a password\n\n• Authorization: According to their profile, online customer must be granted or not to perform some specific actions (gold customer, business partners, etc.)\n\nFor internet access, the following requirements are mandatory\n\n• Confidentiality: Sensitive data (credit card payments) must be encrypted using secure channels such as SSL and HTTPS.\n\n• Data integrity: Data sent across the network cannot be modified by a tier\n\n• Auditing: Every sensitive action can be logged\n\n• Non-repudiation: Gives evidence a specific action occurred\n\nSecurity model for Microsoft.NET and Windows infrastructure will be reused.\n\n3.6 Integration\n\nIntegration is the system capacity to exchange messages with external systems. The architectural pattern for the message exchange between systems must follow the service-orientation schema. The implementation strategy is based on Web services and its realization using Windows Communication Foundation (WCF).\n\nFor a correct integration between systems, you need to specify the following items:\n\nInterfaces and the underlying operations\n\nMessage schemas\n\nCommunication protocol and policies.\n\n3.7 Data Migration\n\nWhen an existing application is replaced, there will be a critical need to migrate data (master and transactional) to the new application. We should identify data migration requirements and also provide indicators as to the level of transformation, weeding, and cleansing that will be required to present data in a format that meets the requirements and constraints of the ContosOnline system. The objective being that the ContosOnline system has quality data when it is populated. Another key consideration is to ensure that an enterprise-wide common data definition is established to support the transformation.\n\nIn this case, there is no strategy for data migration for the ContosOnline system.\n\n3.8 Availability\n\nThe ContosOnline system must ensure high availability architecture with failover capabilities. High availability is usually expressed as the percentage of uptime in a given year. This is very important for operational continuity of the customer business and it requires having the system operationally for 24×7.\n\nThe common availability architecture is through redundant elements in the whole system such as redundant power suppliers, cluster of servers, RAID configuration for disks, multiple network interfaces and redundant routers. There are many techniques such as replication, fault tolerance, application clustering, workload balancing and disaster recovery plans.\n\nIn order to provide high availability for ContosOnline system, we need to use RAID for data storage and an Active-Active schema with a workload balancer and two application server nodes and a Real Application Clusters (RAC) solution (provided by Oracle database) for the database (see the figure below).\n\nFigure 5\n\n3.9 Reliability\n\nThe ContosOnline system must be robust and work according to the functional specification. The system cannot fail when executing the functionalities: Display Information for Product and Buy a Product. The remainder functionalities can have a low fail rate.\n\nYou should realize the following rules:\n\nShow friendly messages and log the technical exceptions\n\nDefine messages according to the exception event\n\nAll the exceptions must be caught\n\nThe system must be capable to detect external source of exceptions in order to mitigate the risks\n\n3.10Performance\n\nPerformance is characterized by the amount of useful work accomplished by a computer system compared to the time and resources used. This quality requirement is much related to reliability and high availability.\n\nThe ContosOnline system has a strong performance constraint when executing the functionalities: Display Information for Product and Buy a Product.\n\nIn the case of the functionality Display Information for Product, the response time must be under 5 seconds.\n\nIn the case of the functionality Buy a Product, the response time must be under 60 seconds in the whole process.\n\nThe ContosOnline system must support the following metrics:\n\nShort response time for a given piece of work. Under 10 seconds\n\nHigh throughput (rate of processing work). Capable for processing 100 transactions per second\n\nLow utilization of computing resource(s). Under 1 Gb of RAM\n\nIn order to achieve the performance requirements for the ContosOnline system, we´re going to follow the architecture defined in the Availability section.\n\n3.11Scalability\n\nScalability is the ability of the system to handle growing amounts of work in a graceful manner or its ability to be enlarged with more resource to accommodate that growth.\n\nThere are two methods to add more resources to the system: scale out and scale up.\n\nTo scale horizontally (or scale out) means to add more nodes to a system, such as adding a new computer to a distributed software application. An example might be scaling out from one Web server system to three.\n\nTo scale vertically (or scale up) means to add resources to a single node in a system, typically involving the addition of CPUs or memory to a single computer. Such vertical scaling of existing systems also enables them to use virtualization technology more effectively, as it provides more resources for the hosted set of operating system and application modules to share.\n\nIn order to achieve the scalability requirements for the ContosOnline system, we´re going to follow the scale out method through the architecture defined in the Availability section.\n\n3.12Internationalization (I18N)\n\nThe ContosOnline system must be able to deal with several languages (at least English and Spanish)\n\nSo the presentation layer must be able to support i18n.\n\n3.13Modificability\n\nThe ContosOnline system must follow an architectural style which supports modificability. The N-tier architectural style enables the modificability of the system natively.\n\n3.14Audit trailing and technical logging\n\nThe ContosOnline system must log any technical exception using Log4Net logging framework and the business audit must be through an Audit table recording information about the important entities. You should register the errors in order to find the causes when the system is on production environment. Errors must be logged following the statements log.error() and log.fatal() depending the severity of the error.\n\n4. Use Case View\n\nThe Use Case view presents the perception of the system functionality from the user point of view. The most important business process and its context are described as well as the most critical use cases derived. It lists use cases or scenarios from the use-case model if they represent some significant, central functionality of the final system. They are the base for specifying the system architecture.\n\n4.1 Use Case Realization\n\nThe only use-case with a significant impact on the ContosOnline system architecture is the one related to online buying process (UC03 – Buy a Product).\n\nThe traceability matrix for the use cases is shown below.\n\nLegend:\n\n1) Presentation Layer\n\n2) Service Layer\n\n3) Business Logic Layer\n\n4) Data Access Layer\n\n5) Usability\n\n6) Transaction\n\n7) Security\n\n8) Integration\n\n9) Availability\n\n10) Reliability\n\n11) Performance\n\n12) Scalability\n\n13) Internationalization\n\n14) Audit trailing and technical logging\n\nThe use cases are detailed in the following sub-sections.\n\n4.1.1 UC03- Buy a Product\n\nUse Case: UC03 – Buy a Product\n\nUseCase_ID UC03 – Buy a Product Complexity Medium Principal Actors Online Customer Secondary Actors Pre-conditions The online customer is logged into the ContosOnline system\n\nThe ContosOnline system displays a list of products\n\nMain Flow\n\nSteps\n\nActor\n\nSystem\n\n1 The online customer selects a product from the list 2 The system displays the detail information for the product, the underlying payment method and a button to begin the order process 3 The online customer submit the information (product, payment and shipping information) in order to start the order process 4 The system connects to an external Web service (provided by an online banking system) and validate the payment information 5 The system validates that there is stock in the warehouse for the product 6 The system connects to an external Web service in order to start the shipping process and gets a tracking number 7 The system notifies to the online system that order is done correctly and display a tracking number 8 The online user can see the order verification and tracking number in a message Post-Conditions The shipping process has started (using an external Web service)\n\nThe online customer can track the product shipping\n\nAlternative Flow\n\nSteps\n\nActor\n\nSystem\n\n4.1 The system cannot connect to the banking Web service and displays a message error window 5.1 The system validates that there is no stock for the product and displays a message 6.1 The system cannot connect to the shipping Web service and displays a message error window\n\n[Note: You can also include a high-level screen prototype.]\n\n5. Logical View\n\n5.1 Overview\n\nThis section of the document describes the structural hierarchy of the system in layers, subsystems and packages, and then goes to describe how these artifacts collaborate to provide the most architecturally functionality. For each significant package, decompose them in significant static and dynamic views, if necessary.\n\n5.2 Architecturally significant design packages\n\nThis sub-section describes the overall decomposition of the design model. The ContosOnline system comprises of the following modules to support the business process: Product Management, Online Selling and Reporting modules. In order to implement this module, we need to follow the N-tier architectural style (as shown in the following figure).\n\nFigure 6\n\n5.2.1 Product Management Module\n\nName: Product Management Module Description: This module enables adding new products, updating the underlying information and deleting a product\n\nMost Significant Diagrams\n\nFigure 7\n\n5.2.2 Online Selling Module\n\nName: Online Selling Module Description: This module enables displaying a list of products. You can select a particular product and the underlying information is shown. After, the online customer a product to buy, the selling process starts. A tracking number is sent in order to check the selling status.\n\nMost Significant Diagrams\n\n5.2.3 Reporting Module\n\nName: Reporting Module Description: This module enables showing a lot of consolidated information about the products, its stock and the revenues for the sales.\n\nMost Significant Diagrams\n\n6. Process View\n\n6.1 Overview\n\nThis sub-section depicts the system´s decomposition into light weight processes (single threads of control) and heavy weight processes (group of light weight processes). Describe the main modes of communication between processes.\n\nThe ContosOnline system has no process to describe in this view.\n\n7. Deployment View\n\n7.1 Overview\n\nIn this section, the deployment is described by identifying the infrastructure in which the ContosOnline system is deployed and run. It is specified any deployment constraints and how the ContosOnline system components are distributed over computing nodes.\n\n7.2 Topology (single computer/client-server/distributed N-tier)\n\nThe deployment topology for the ContosOnline system is as shown in the following figure.\n\nFigure 8\n\n7.3 Hardware requirements\n\nAccording to the high availability, reliability and performance requirements.\n\n7.4 Platform requirements\n\nAccording to the platform requirements in the sub-section Implementation Strategy.\n\n8. Implementation View\n\n8.1 Overview\n\nThe implementation view depicts the physical composition of the implementation in terms of implementation artifacts such as source code, data, development frameworks, distributable files and executable files.\n\nThe implementation layer must be aligned and fit the layers defined in the architecture vision and the best practices to support this architecture. The ContosOnline system will be developed using the technologies described in the sub-section 3.1 Implementation Strategy.\n\nThe implementation strategy is to implement each logical layer inside an independent .NET assembly. Inside each assembly, you can find the modules logically separated by namespaces (For further details, see the following table).\n\nNamespaces/Packages\n\nDescription\n\nAssembly\n\nContosOnline.Presentation It´s a Web application developed using ASP.NET MVC technology and contains the artifacts for the correct presentation. It also uses the following JavaScript libraries: jQuery and ExtJS to support the Rich Internet Application approach. ContosOnline.Presentation.dll ContosOnline.Presentation.\n\nProductManagement\n\nIt´s a package (a folder) inside the ContosOnline.Presentation to hold the artifacts for the module ProductManagement ContosOnline.Presentation.dll ContosOnline.Service It´s a Microsoft.NET library developed using C# language and contains the service artifacts. ContosOnline.Service.dll ContosOnline.Service.\n\nContracts\n\nIt´s a package (a folder) inside the ContosOnline.Service to hold the contracts of the service. Inside this package, you should group the contracts by module (similar to the presentation structure). ContosOnline.Service.dll ContosOnline.Service.DTO It´s a package (a folder) inside the ContosOnline.Service to hold the messages of the service. Inside this package, you should group the messages by module (similar to the presentation structure). ContosOnline.Service.dll ContosOnline.BLL It´s a Microsoft.NET library developed using C# language and contains the business logic artifacts. ContosOnline.BLL.dll ContosOnline.BLL.\n\nServiceImplementations\n\nIt´s a package (a folder) inside the ContosOnline.BLL to hold the service implementations. Inside this package, you should group the service implementations by module (similar to the presentation structure). ContosOnline.BLL.dll ContosOnline.BLL.\n\nBusinessObjects\n\nIt´s a package (a folder) inside the ContosOnline.BLL to hold the business objects. Inside this package, you should group the business objects by module (similar to the presentation structure). ContosOnline.BLL.dll ContosOnline.BLL.\n\nMappers\n\nIt´s a package (a folder) inside the ContosOnline.BLL to hold the mappers (transformations from the entities to DTO). Inside this package, you should group the mappers by module (similar to the presentation structure). ContosOnline.BLL.dll ContosOnline.BLL.Workflow It´s a package (a folder) inside the ContosOnline.BLL to hold the workflows. Inside this package, you should group the workflows by module (similar to the presentation structure). ContosOnline.BLL.dll ContosOnline.BLL.\n\nBusinessRules\n\nIt´s a package (a folder) inside the ContosOnline.BLL to hold the business rules. Inside this package, you should group the business rules by module (similar to the presentation structure). ContosOnline.BLL.dll ContosOnline.DAL It´s a Microsoft.NET library developed using C# language and contains the data access artifacts. ContosOnline.DAL.dll ContosOnline.DAL.\n\nEntities\n\nIt´s a package (a folder) inside the ContosOnline.DAL to hold the business entities. Inside this package, you should group the business entities by module (similar to the presentation structure). ContosOnline.DAL.dll ContosOnline.DAL.\n\nDAO\n\nIt´s a package (a folder) inside the ContosOnline.DAL to hold the data access objects. Inside this package, you should group the data access objects by module (similar to the presentation structure). ContosOnline.DAL.dll ContosOnline.DAL.\n\nServiceAgents\n\nIt´s a package (a folder) inside the ContosOnline.DAL to hold the service agents. Inside this package, you should group the service agents by module (similar to the presentation structure). ContosOnline.DAL.dll\n\n8.2 Layers\n\n8.2.1 Presentation Layer\n\nThe Presentation layer contains all the components needed to allow interactions with an end-user. It encompasses the user interface and how to handle the user requests and responses.\n\nThe Presentation layer will be developed using the MVC architectural style and the technology ASP.NET MVC. In order to enrich the user interface, we´re going to use JavaScript libraries such as jQuery and ExtJS (a pack of controls) and latest trends in HTML and CSS for the content presentation. The iconography and graphical styles must be consistent with the corporate colors of Contoso.\n\nIn order to present a common layout in all the pages of the application, we´re going to use the approach Master Page of ASP.NET.\n\n8.2.2 Service Layer\n\nThe Service layer contain all the definitions of the services that are exposed to external systems such as service contracts (operations, message format, message exchange pattern), the communication patterns (REST vs SOAP), url and the behavior of the service. The Service layer will be developed using Windows Communication Foundation (WCF) and the underlying programming model.\n\n8.2.3 Business Logic layer\n\nThe Business Logic layer contains all the components that represent the concepts to support the business process. It contains business objects, entities, rules workflows, and so on. The Business Logic layer will be developed using C# and the underlying technologies provided by Microsoft.NET.\n\n8.2.4 Data Access layer\n\nThe Data Access layer contains all the components that represent the entities mapped to the relational schema and the communication mechanisms with the database engine. It also contains the logic to access other data source as well as the definitions of Web services’ clients (service agents). The Data Access layer will be developed using C# and LINQ as the ORM technology.\n\n9. Data View (optional)\n\nThis view represents the data model and the underlying distribution as well as the persistence and transactional services to access the data.\n\nThe data model for ContosOnline system is shown below:\n\nFigure 9\n\nFor ContosOnline system, there is no distribution at the data level. All the database artifacts reside in the same data base.\n\nThe persistence service used for ContosOnline system is based on LINQ technology (Microsoft proposal for ORM).\n\nAll the execution of use cases in ContosOnline system must be under a transactional context. When starting to execute a use case, you should start a transaction. When finishing the use case, in case of success you should execute a commit transaction command, otherwise you should execute a rollback transaction command.\n\n10. Size and Performance\n\nVolumes:\n\nEstimated online orders : 100 a day, with peaks in the evening\n\nContosOnline system registered individual customer : about 150\n\nContosOnline system corporate online operators : about 100\n\nPerformance:\n\nTime to process and online selling (credit card validation + confirmation) : less that 10 seconds required\n\n11. Quality\n\nThe ContosOnline system is being developed by an internal team. We need a quality control team externally.\n\nPage3\n\n———————————————————————————————————————–"
    }
}