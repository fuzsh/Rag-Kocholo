{
    "id": "dbpedia_108_0",
    "rank": 83,
    "data": {
        "url": "https://learn.microsoft.com/en-us/dotnet/api/system.windows.media.fontfamily%3Fview%3Dwindowsdesktop-8.0",
        "read_more_link": "",
        "language": "en",
        "title": "FontFamily Class (System.Windows.Media)",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/dotnet/media/fonts.png?view=windowsdesktop-8.0",
            "https://learn.microsoft.com/media/logos/logo_net.svg",
            "https://learn.microsoft.com/media/logos/logo_net.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "dotnet-bot"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Represents a family of related fonts.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/dotnet/api/system.windows.media.fontfamily?view=windowsdesktop-8.0",
        "text": "FontFamily Class\n\nDefinition\n\nImportant\n\nSome information relates to prerelease product that may be substantially modified before itâs released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\npublic ref class FontFamily\n\n[System.ComponentModel.TypeConverter(typeof(System.Windows.Media.FontFamilyConverter))] [System.Windows.Localizability(System.Windows.LocalizationCategory.Font)] public class FontFamily\n\n[<System.ComponentModel.TypeConverter(typeof(System.Windows.Media.FontFamilyConverter))>] [<System.Windows.Localizability(System.Windows.LocalizationCategory.Font)>] type FontFamily = class\n\nPublic Class FontFamily\n\nInheritance\n\nFontFamily\n\nAttributes\n\nRemarks\n\nA font family is a set of typefaces that share the same family name, such as \"Times New Roman\", but that differ in features. These feature differences include Style, such as italic, and Weight, such as bold.\n\nExample of typefaces that are members of the \"Times New Roman\" font family\n\nMost user interface (UI) elements, such as Button and TextBlock, provide a FontFamily property that can be used to specify a font for the text content of a control. You define the font by setting that property with a FontFamily value. The following examples show how to reference a font, in Extensible Application Markup Language (XAML) and in code.\n\nmyTextBlock.FontFamily = new FontFamily(\"Comic Sans MS\");\n\nmyTextBlock.FontFamily = New FontFamily(\"Comic Sans MS\")\n\n<TextBlock FontFamily=\"Comic Sans MS\">Hello, world</TextBlock>\n\nIn the preceding example, the font that is referenced, \"Comic Sans MS\", is referred to by its friendly name. Also, in this example the font is assumed to be in the system font collection.\n\nSpecifying Fonts in Alternate Directories\n\nA Windows Presentation Foundation (WPF) application can specify a directory, other than the directory that contains the systems font collection, for resolving font references. The friendly name of the font can specify an absolute uniform resource identifier (URI) value to resolve the font reference, as shown in the following Extensible Application Markup Language (XAML) and code examples.\n\n// Create a new FontFamily object, using an absolute URI reference. myTextBlock.FontFamily = new FontFamily(\"file:///d:/MyFonts/#Pericles Light\");\n\n' Create a new FontFamily object, using an absolute URI reference. myTextBlock.FontFamily = New FontFamily(\"file:///d:/MyFonts/#Pericles Light\")\n\n<TextBlock FontFamily=\"file:///d:/MyFonts/#Pericles Light\"> Aegean Sea </TextBlock>\n\nThe friendly name of the font can also specify a relative URI value, which requires a base URI to resolve the font reference. The BaseUri property of the FontFamily object corresponds to the base URI value. The following code example shows how to create a font reference that is composed of a base URI value and a relative URI value.\n\n// Create a new FontFamily object, using a base URI reference and a relative URI reference. myTextBlock.FontFamily = new FontFamily(new Uri(\"file:///d:/MyFonts/\"), \"./#Pericles Light\");\n\n' Create a new FontFamily object, using a base URI reference and a relative URI reference. myTextBlock.FontFamily = New FontFamily(New Uri(\"file:///d:/MyFonts/\"), \"./#Pericles Light\")\n\nYou can use a base URI value when you reference a font that is packaged as part of the application. For example, the base URI value can be a \"pack://application\" URI, which lets you reference fonts that are packaged as application resources. The following code example shows a font reference that is composed of a base URI value and a relative URI value.\n\n// The font resource reference includes the base URI reference (application directory level), // and a relative URI reference. myTextBlock.FontFamily = new FontFamily(new Uri(\"pack://application:,,,/\"), \"./resources/#Pericles Light\");\n\n' The font resource reference includes the base URI reference (application directory level), ' and a relative URI reference. myTextBlock.FontFamily = New FontFamily(New Uri(\"pack://application:,,,/\"), \"./resources/#Pericles Light\")\n\nWhen a FontFamily is specified as an attribute in markup, the base URI value is always implied - its value is the URI of the XAML page. The implied base URI value is used with the relative URI value in the friendly name string to obtain the location of the font. In the following Extensible Application Markup Language (XAML) example, notice that the relative URI value uses the \"./\" notation, which means \"in the current folder\" of the base URI value.\n\n<TextBlock FontFamily=\"./resources/#Pericles Light\"> Aegean Sea </TextBlock>\n\nA WPF application can package fonts as either a content item, a resource item, or a library resource item. For more information, see Packaging Fonts with Applications.\n\nFont Fallback\n\nFont fallback refers to the automatic substitution of a font other than the font that is selected by the client application. There are two primary reasons why font fallback is invoked:\n\nThe font that is specified by the client application does not exist on the system.\n\nThe font that is specified by the client application does not contain the glyphs that are required to render text.\n\nIn WPF, the font fallback mechanism uses the default fallback font family, \"Global User Interface\", as the substitute font. This font is defined as a composite font, whose file name is \"GlobalUserInterface.CompositeFont\". For more information about composite fonts, see the Composite Fonts section in this topic.\n\nThe WPF font fallback mechanism replaces previous Win32 font substitution technologies.\n\nDefining a Font Fallback Sequence in Code\n\nYou can define a font fallback sequence in your code, which lets you define an alternate font. When you create a FontFamily object, provide multiple font family names, separated by commas, for the String parameter, such as \"Comic Sans MS, Verdana\". In this case, if the glyphs from the \"Comic Sans MS\" typeface are not available, glyphs from the \"Verdana\" typeface are used. If neither \"Comic Sans MS\" nor \"Verdana\" have the required glyphs, the fallback font family of the typeface is used, which is \"Global User Interface\" by default.\n\nThe following examples show how to define a font fallback sequence, in Extensible Application Markup Language (XAML) and in code.\n\nmyTextBlock.FontFamily = new FontFamily(\"Comic Sans MS, Verdana\");\n\nmyTextBlock.FontFamily = New FontFamily(\"Comic Sans MS, Verdana\")\n\n<TextBlock FontFamily=\"Comic Sans MS, Verdana\">Hello, world</TextBlock>\n\nAny one of the fonts in the fallback sequence can specify font locations. In the following examples, \"Pericles Light\" is referenced as an application resource, and \"Verdana\" is referenced as a system font collection member.\n\nmyTextBlock.FontFamily = new FontFamily(new Uri(\"pack://application:,,,/\"), \"./resources/#Pericles Light, Verdana\");\n\nmyTextBlock.FontFamily = New FontFamily(New Uri(\"pack://application:,,,/\"), \"./resources/#Pericles Light, Verdana\")\n\n<TextBlock FontFamily=\"./resources/#Pericles Light, Verdana\">Aegean Sea</TextBlock>\n\nComposite Fonts\n\nThe WPF platform provides a composite font feature to allow the construction of full range multilingual fonts, and to avoid displaying missing glyphs. Composite fonts replace the Win32 font linking, font fallback, font binding, font association, and end-user-defined characters (EUDC) mechanisms.\n\nA composite font family is available to applications through the FontFamily and Typeface constructors just like any other font family. Each composite font family is named, and, as with other fonts, can provide localized variants of its name in multiple languages.\n\nThe following markup example shows how a composite font family can be defined as a disk file. This file can be stored in the default Windows font directory as with any other installed font, or can be referenced in any location by including its URI when referencing the family by name.\n\nThe following example shows the font family markup in a \".CompositeFont\" file.\n\n<FontFamily xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/composite-font\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:System=\"clr-namespace:System;assembly=mscorlib\" Baseline=\"0.9\" LineSpacing=\"1.2\"> <!-- Name mapping --> <FontFamily.FamilyNames> <System:String x:Key=\"en-US\">Global User Interface</System:String> </FontFamily.FamilyNames> <!-- Faces to report in font chooser UI --> <FontFamily.FamilyTypefaces> <FamilyTypeface Weight=\"Normal\" Stretch=\"Normal\" Style=\"Normal\" UnderlinePosition=\"-0.1\" UnderlineThickness=\"0.05\" StrikethroughPosition=\"0.3\" StrikethroughThickness=\"0.05\" CapsHeight=\"0.5\" XHeight=\"0.3\" /> <FamilyTypeface Weight=\"Bold\" Stretch=\"Normal\" Style=\"Normal\" UnderlinePosition=\"-0.1\" UnderlineThickness=\"0.05\" StrikethroughPosition=\"0.3\" StrikethroughThickness=\"0.05\" CapsHeight=\"0.5\" XHeight=\"0.3\" /> </FontFamily.FamilyTypefaces> <!-- Character to family lookups (in lookup order) --> <FontFamily.FamilyMaps> <!-- Basic Latin 0000-007F Latin-1 Supplement 0080-00FF Latin Extended-A 0100-017F Latin Extended-B 0180-024F IPA Extensions 0250-02AF Spacing Modifier Letters 02B0-02FF Combining Diacritics Marks 0300-036F Greek and Coptic 0370-03FF Cyrillic 0400-04FF Cyrillic Supplement 0500-052F Phonetic Extensions 1D00-1D7F Latin Extended Additional 1E00-1EFF Greek Extended 1F00-1FFF Alpha Pres Forms Latin FB00-FB0F --> <!-- CHS --> <FontFamilyMap Unicode=\"0000-052F, 1D00-1FFF, FB00-FB0F\" Language=\"zh-Hans\" Target=\"Times New Roman\" Scale=\"1.0\" /> <!-- CHT --> <FontFamilyMap Unicode=\"0000-052F, 1D00-1FFF, FB00-FB0F\" Language=\"zh-Hant\" Target=\"Times New Roman\" Scale=\"1.0\" /> <!-- Other (include JA and KO) --> <FontFamilyMap Unicode=\"0000-052F, 1D00-1FFF, FB00-FB0F\" Target=\"Comic Sans MS, Verdana\" Scale=\"4.0\" /> <!-- Armenian 0530-058F Georgian 10D0-10FF Alpha Pres Forms Armenian FB10-FB1C --> <FontFamilyMap Unicode=\"0530-058F, 10D0-10FF, FB10-FB1C\" Target=\"Sylfaen\" Scale=\"1.0\" /> <!-- Other FontFamilyMap elements defined ... --> </FontFamily.FamilyMaps> </FontFamily>\n\nThe following four composite fonts appear in the default Windows font directory as part of the WPF installation.\n\nFont Notes GlobalMonospace.CompositeFont Renders text by using a monospace font, for example, \"Courier New\" for Latin characters. GlobalSanSerif.CompositeFont Renders text by using a sans serif font, for example, \"Arial\" for Latin characters. GlobalSerif.CompositeFont Renders text by using a serif font, for example, \"Times New Roman\" for Latin characters. GlobalUserInterface.CompositeFont Renders text by using a default font, for example, \"Times New Roman\" for Latin characters.\n\nXAML Attribute Usage\n\n<object FontFamily=\"fontFamilyName\"/> - or - <object FontFamily=\"fontFamilyNamesList\"/> - or - <object FontFamily=\"fontFamilyFolderReference\"/> - or - <object FontFamily=\"fontFamilyUriReference\"/>\n\nXAML Values\n\nfontFamilyName\n\nA string specifying a font family name. For example, \"Arial\" or \"Century Gothic\".\n\nfontFamilyNamesList\n\nA string specifying multiple font family names, each separated by a comma (any white space following a comma is ignored). The first font family specified serves as the primary font family; subsequent font families serve as fallback families to be used in cases where the primary font family is unavailable or not applicable. For example, \"Arial, Century Gothic\" specifies Arial as the primary font family, with Century Gothic as the fallback font family.\n\nfontFamilyFolderReference\n\nA string specifying a folder containing the font, along with a font family name. The folder and font family name are delimited by a # character. The folder reference may be absolute, or relative. For example, \"Custom Fonts\\#My Custom Font\".\n\nfontFamilyUriReference\n\nA string specifying a uniform resource identifier (URI) for the font, along with a font family name. The URI and font family name are delimited by a # character. For example, \"http://MyFontServer/Fonts/#My Custom Font\".\n\nConstructors\n\nProperties\n\nMethods\n\nApplies to\n\nSee also"
    }
}