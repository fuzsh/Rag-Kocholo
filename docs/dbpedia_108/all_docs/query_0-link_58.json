{
    "id": "dbpedia_108_0",
    "rank": 58,
    "data": {
        "url": "https://doc.qt.io/qt-6/qfont.html",
        "read_more_link": "",
        "language": "en",
        "title": "Qt GUI 6.7.2",
        "top_image": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon-32x32.png",
        "meta_img": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon-32x32.png",
        "images": [
            "https://doc.qt.io/style/qt-logo-documentation.svg",
            "https://doc.qt.io/images/qtgroup.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The QFont class specifies a query for a font used for drawing text.",
        "meta_lang": "en",
        "meta_favicon": "//d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon.ico.gzip",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Detailed Description\n\nQFont can be regarded as a query for one or more fonts on the system.\n\nWhen you create a QFont object you specify various attributes that you want the font to have. Qt will use the font with the specified attributes, or if no matching font exists, Qt will use the closest matching installed font. The attributes of the font that is actually used are retrievable from a QFontInfo object. If the window system provides an exact match exactMatch() returns true. Use QFontMetricsF to get measurements, e.g. the pixel length of a string using QFontMetrics::width().\n\nAttributes which are not specifically set will not affect the font selection algorithm, and default values will be preferred instead.\n\nTo load a specific physical font, typically represented by a single file, use QRawFont instead.\n\nNote that a QGuiApplication instance must exist before a QFont can be used. You can set the application's default font with QGuiApplication::setFont().\n\nIf a chosen font does not include all the characters that need to be displayed, QFont will try to find the characters in the nearest equivalent fonts. When a QPainter draws a character from a font the QFont will report whether or not it has the character; if it does not, QPainter will draw an unfilled square.\n\nCreate QFonts like this:\n\nQFont serifFont(\"Times\", 10, QFont::Bold); QFont sansFont(\"Helvetica [Cronyx]\", 12);\n\nThe attributes set in the constructor can also be set later, e.g. setFamily(), setPointSize(), setPointSizeF(), setWeight() and setItalic(). The remaining attributes must be set after construction, e.g. setBold(), setUnderline(), setOverline(), setStrikeOut() and setFixedPitch(). QFontInfo objects should be created after the font's attributes have been set. A QFontInfo object will not change, even if you change the font's attributes. The corresponding \"get\" functions, e.g. family(), pointSize(), etc., return the values that were set, even though the values used may differ. The actual values are available from a QFontInfo object.\n\nIf the requested font family is unavailable you can influence the font matching algorithm by choosing a particular QFont::StyleHint and QFont::StyleStrategy with setStyleHint(). The default family (corresponding to the current style hint) is returned by defaultFamily().\n\nYou can provide substitutions for font family names using insertSubstitution() and insertSubstitutions(). Substitutions can be removed with removeSubstitutions(). Use substitute() to retrieve a family's first substitute, or the family name itself if it has no substitutes. Use substitutes() to retrieve a list of a family's substitutes (which may be empty). After substituting a font, you must trigger the updating of the font by destroying and re-creating all QFont objects.\n\nEvery QFont has a key() which you can use, for example, as the key in a cache or dictionary. If you want to store a user's font preferences you could use QSettings, writing the font information with toString() and reading it back with fromString(). The operator<<() and operator>>() functions are also available, but they work on a data stream.\n\nIt is possible to set the height of characters shown on the screen to a specified number of pixels with setPixelSize(); however using setPointSize() has a similar effect and provides device independence.\n\nLoading fonts can be expensive, especially on X11. QFont contains extensive optimizations to make the copying of QFont objects fast, and to cache the results of the slow window system functions it depends upon.\n\nThe font matching algorithm works as follows:\n\nThe specified font families (set by setFamilies()) are searched for.\n\nIf not, a replacement font that supports the writing system is selected. The font matching algorithm will try to find the best match for all the properties set in the QFont. How this is done varies from platform to platform.\n\nIf no font exists on the system that can support the text, then special \"missing character\" boxes will be shown in its place.\n\nNote: If the selected font, though supporting the writing system in general, is missing glyphs for one or more specific characters, then Qt will try to find a fallback font for this or these particular characters. This feature can be disabled using QFont::NoFontMerging style strategy.\n\nIn Windows a request for the \"Courier\" font is automatically changed to \"Courier New\", an improved version of Courier that allows for smooth scaling. The older \"Courier\" bitmap font can be selected by setting the PreferBitmap style strategy (see setStyleStrategy()).\n\nOnce a font is found, the remaining attributes are matched in order of priority:\n\nfixedPitch()\n\npointSize() (see below)\n\nweight()\n\nstyle()\n\nIf you have a font which matches on family, even if none of the other attributes match, this font will be chosen in preference to a font which doesn't match on family but which does match on the other attributes. This is because font family is the dominant search criteria.\n\nThe point size is defined to match if it is within 20% of the requested point size. When several fonts match and are only distinguished by point size, the font with the closest point size to the one requested will be chosen.\n\nThe actual family, font size, weight and other font attributes used for drawing text will depend on what's available for the chosen family under the window system. A QFontInfo object can be used to determine the actual values used for drawing the text.\n\nExamples:\n\nQFont f(\"Helvetica\");\n\nIf you had both an Adobe and a Cronyx Helvetica, you might get either.\n\nQFont f(\"Helvetica [Cronyx]\");\n\nYou can specify the foundry you want in the family name. The font f in the above example will be set to \"Helvetica [Cronyx]\".\n\nTo determine the attributes of the font actually used in the window system, use a QFontInfo object, e.g.\n\nQFontInfo info(f1); QString family = info.family();\n\nTo find out font metrics use a QFontMetrics object, e.g.\n\nQFontMetrics fm(f1); int textWidthInPixels = fm.horizontalAdvance(\"How many pixels wide is this text?\"); int textHeightInPixels = fm.height();\n\nFor more general information on fonts, see the comp.fonts FAQ. Information on encodings can be found from the UTR17 page.\n\nMember Function Documentation\n\nConstructs a font object that uses the application's default font.\n\nSee also QGuiApplication::setFont() and QGuiApplication::font().\n\nConstructs a font object with the specified family, pointSize, weight and italic settings.\n\nIf pointSize is zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.\n\nThe family name may optionally also include a foundry name, e.g. \"Helvetica [Cronyx]\". If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.\n\nThis will split the family string on a comma and call setFamilies() with the resulting list. To preserve a font that uses a comma in its name, use the constructor that takes a QStringList.\n\nSee also Weight, setFamily(), setPointSize(), setWeight(), setItalic(), setStyleHint(), setFamilies(), and QGuiApplication::font().\n\nConstructs a font object with the specified families, pointSize, weight and italic settings.\n\nIf pointSize is zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points.\n\nEach family name entry in families may optionally also include a foundry name, e.g. \"Helvetica [Cronyx]\". If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.\n\nSee also Weight, setPointSize(), setWeight(), setItalic(), setStyleHint(), setFamilies(), and QGuiApplication::font().\n\nConstructs a font from font for use on the paint device pd.\n\nConstructs a font that is a copy of font.\n\nDestroys the font object and frees all allocated resources.\n\nReturns true if weight() is a value greater than QFont::Medium; otherwise returns false.\n\nSee also weight(), setBold(), and QFontInfo::bold().\n\nReturns the current capitalization type of the font.\n\nSee also setCapitalization().\n\nClears any previously set features on the QFont.\n\nSee setFeature() for more details on font features.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setFeature(), unsetFeature(), featureTags(), and featureValue().\n\nClears any previously set variable axis values on the QFont.\n\nSee setVariableAxis() for more details on variable axes.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setVariableAxis(), unsetVariableAxis(), isVariableAxisSet(), and variableAxisValue().\n\nReturns the family name that corresponds to the current style hint.\n\nSee also StyleHint, styleHint(), and setStyleHint().\n\nReturns true if a window system font exactly matching the settings of this font is available.\n\nSee also QFontInfo.\n\nReturns the requested font family names, i.e. the names set in the last setFamilies() call or via the constructor. Otherwise it returns an empty list.\n\nSee also setFamily(), setFamilies(), family(), substitutes(), and substitute().\n\nReturns the requested font family name. This will always be the same as the first entry in the families() call.\n\nSee also setFamily(), substitutes(), substitute(), setFamilies(), and families().\n\nReturns a list of tags for all font features currently set on this QFont.\n\nSee setFeature() for more details on font features.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setFeature(), unsetFeature(), isFeatureSet(), and clearFeatures().\n\nReturns the value set for a specific feature tag. If the tag has not been set, 0 will be returned instead.\n\nSee setFeature() for more details on font features.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setFeature(), unsetFeature(), featureTags(), and isFeatureSet().\n\nReturns true if fixed pitch has been set; otherwise returns false.\n\nSee also setFixedPitch() and QFontInfo::fixedPitch().\n\nSets this font to match the description descrip. The description is a comma-separated list of the font attributes, as returned by toString().\n\nSee also toString().\n\nReturns the currently preferred hinting level for glyphs rendered with this font.\n\nSee also setHintingPreference().\n\nInserts substituteName into the substitution table for the family familyName.\n\nAfter substituting a font, trigger the updating of the font by destroying and re-creating all QFont objects.\n\nSee also insertSubstitutions(), removeSubstitutions(), substitutions(), substitute(), and substitutes().\n\nInserts the list of families substituteNames into the substitution list for familyName.\n\nAfter substituting a font, trigger the updating of the font by destroying and re-creating all QFont objects.\n\nSee also insertSubstitution(), removeSubstitutions(), substitutions(), and substitute().\n\nReturns true if this font and f are copies of each other, i.e. one of them was created as a copy of the other and neither has been modified since. This is much stricter than equality.\n\nSee also operator=() and operator==().\n\nReturns true if a value for the feature given by tag has been set on the QFont, otherwise returns false.\n\nSee setFeature() for more details on font features.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setFeature(), unsetFeature(), featureTags(), and featureValue().\n\nReturns true if a value for the variable axis given by tag has been set on the QFont, otherwise returns false.\n\nSee setVariableAxis() for more details on font variable axes.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setVariableAxis(), unsetVariableAxis(), variableAxisValue(), and clearVariableAxes().\n\nReturns true if the style() of the font is not QFont::StyleNormal\n\nSee also setItalic() and style().\n\nReturns true if kerning should be used when drawing text with this font.\n\nSee also setKerning().\n\nReturns the font's key, a textual representation of a font. It is typically used as the key for a cache or dictionary of fonts.\n\nSee also QMap.\n\nReturns the letter spacing for the font.\n\nSee also setLetterSpacing(), letterSpacingType(), and setWordSpacing().\n\nReturns the spacing type used for letter spacing.\n\nSee also letterSpacing(), setLetterSpacing(), and setWordSpacing().\n\nReturns true if overline has been set; otherwise returns false.\n\nSee also setOverline().\n\nReturns the pixel size of the font if it was set with setPixelSize(). Returns -1 if the size was set with setPointSize() or setPointSizeF().\n\nSee also setPixelSize(), pointSize(), QFontInfo::pointSize(), and QFontInfo::pixelSize().\n\nReturns the point size of the font. Returns -1 if the font size was specified in pixels.\n\nSee also setPointSize() and pointSizeF().\n\nReturns the point size of the font. Returns -1 if the font size was specified in pixels.\n\nSee also pointSize(), setPointSizeF(), pixelSize(), QFontInfo::pointSize(), and QFontInfo::pixelSize().\n\nRemoves all the substitutions for familyName.\n\nSee also insertSubstitutions(), insertSubstitution(), substitutions(), and substitute().\n\nReturns a new QFont that has attributes copied from other that have not been previously set on this font.\n\nIf enable is true sets the font's weight to QFont::Bold; otherwise sets the weight to QFont::Normal.\n\nFor finer boldness control use setWeight().\n\nNote: If styleName() is set, this value may be ignored, or if supported on the platform, the font artificially embolded.\n\nSee also bold() and setWeight().\n\nSets the capitalization of the text in this font to caps.\n\nA font's capitalization makes the text appear in the selected capitalization mode.\n\nSee also capitalization().\n\nSets the list of family names for the font. The names are case insensitive and may include a foundry name. The first family in families will be set as the main family for the font.\n\nEach family name entry in families may optionally also include a foundry name, e.g. \"Helvetica [Cronyx]\". If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.\n\nSee also family(), families(), setFamily(), setStyleHint(), and QFontInfo.\n\nSets the family name of the font. The name is case insensitive and may include a foundry name.\n\nThe family name may optionally also include a foundry name, e.g. \"Helvetica [Cronyx]\". If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.\n\nSee also family(), setStyleHint(), setFamilies(), families(), and QFontInfo.\n\nThis is an overloaded function.\n\nApplies an integer value to the typographical feature specified by tag when shaping the text. This provides advanced access to the font shaping process, and can be used to support font features that are otherwise not covered in the API.\n\nThe feature is specified by a tag, which is typically encoded from the four-character feature name in the font feature map.\n\nThis integer value passed along with the tag in most cases represents a boolean value: A zero value means the feature is disabled, and a non-zero value means it is enabled. For certain font features, however, it may have other interpretations. For example, when applied to the salt feature, the value is an index that specifies the stylistic alternative to use.\n\nFor example, the frac font feature will convert diagonal fractions separated with a slash (such as 1/2) with a different representation. Typically this will involve baking the full fraction into a single character width (such as Â½).\n\nIf a font supports the frac feature, then it can be enabled in the shaper by setting features[\"frac\"] = 1 in the font feature map.\n\nNote: By default, Qt will enable and disable certain font features based on other font properties. In particular, the kern feature will be enabled/disabled depending on the kerning() property of the QFont. In addition, all ligature features (liga, clig, dlig, hlig) will be disabled if a letterSpacing() is applied, but only for writing systems where the use of ligature is cosmetic. For writing systems where ligatures are required, the features will remain in their default state. The values set using setFeature() and related functions will override the default behavior. If, for instance, the feature \"kern\" is set to 1, then kerning will always be enabled, regardless of whether the kerning property is set to false. Similarly, if it is set to 0, then it will always be disabled. To reset a font feature to its default behavior, you can unset it using unsetFeature().\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, clearFeatures(), setFeature(), unsetFeature(), and featureTags().\n\nIf enable is true, sets fixed pitch on; otherwise sets fixed pitch off.\n\nSee also fixedPitch() and QFontInfo.\n\nSet the preference for the hinting level of the glyphs to hintingPreference. This is a hint to the underlying font rendering system to use a certain level of hinting, and has varying support across platforms. See the table in the documentation for QFont::HintingPreference for more details.\n\nThe default hinting preference is QFont::PreferDefaultHinting.\n\nSee also hintingPreference().\n\nSets the style() of the font to QFont::StyleItalic if enable is true; otherwise the style is set to QFont::StyleNormal.\n\nNote: If styleName() is set, this value may be ignored, or if supported on the platform, the font may be rendered tilted instead of picking a designed italic font-variant.\n\nSee also italic() and QFontInfo.\n\nEnables kerning for this font if enable is true; otherwise disables it. By default, kerning is enabled.\n\nWhen kerning is enabled, glyph metrics do not add up anymore, even for Latin text. In other words, the assumption that width('a') + width('b') is equal to width(\"ab\") is not necessarily true.\n\nSee also kerning() and QFontMetrics.\n\nSets the letter spacing for the font to spacing and the type of spacing to type.\n\nLetter spacing changes the default spacing between individual letters in the font. The spacing between the letters can be made smaller as well as larger either in percentage of the character width or in pixels, depending on the selected spacing type.\n\nSee also letterSpacing(), letterSpacingType(), and setWordSpacing().\n\nIf enable is true, sets overline on; otherwise sets overline off.\n\nSee also overline() and QFontInfo.\n\nSets the font size to pixelSize pixels, with a maxiumum size of an unsigned 16-bit integer.\n\nUsing this function makes the font device dependent. Use setPointSize() or setPointSizeF() to set the size of the font in a device independent manner.\n\nSee also pixelSize().\n\nSets the point size to pointSize. The point size must be greater than zero.\n\nSee also pointSize() and setPointSizeF().\n\nSets the point size to pointSize. The point size must be greater than zero. The requested precision may not be achieved on all platforms.\n\nSee also pointSizeF(), setPointSize(), and setPixelSize().\n\nSets the stretch factor for the font.\n\nThe stretch factor matches a condensed or expanded version of the font or applies a stretch transform that changes the width of all characters in the font by factor percent. For example, setting factor to 150 results in all characters in the font being 1.5 times (ie. 150%) wider. The minimum stretch factor is 1, and the maximum stretch factor is 4000. The default stretch factor is AnyStretch, which will accept any stretch factor and not apply any transform on the font.\n\nThe stretch factor is only applied to outline fonts. The stretch factor is ignored for bitmap fonts.\n\nNote: When matching a font with a native non-default stretch factor, requesting a stretch of 100 will stretch it back to a medium width font.\n\nSee also stretch() and QFont::Stretch.\n\nIf enable is true, sets strikeout on; otherwise sets strikeout off.\n\nSee also strikeOut() and QFontInfo.\n\nSets the style of the font to style.\n\nSee also style(), italic(), and QFontInfo.\n\nSets the style hint and strategy to hint and strategy, respectively.\n\nIf these aren't set explicitly the style hint will default to AnyStyle and the style strategy to PreferDefault.\n\nQt does not support style hints on X11 since this information is not provided by the window system.\n\nSee also StyleHint, styleHint(), StyleStrategy, styleStrategy(), and QFontInfo.\n\nSets the style name of the font to styleName. When set, other style properties like style() and weight() will be ignored for font matching, though they may be simulated afterwards if supported by the platform's font engine.\n\nDue to the lower quality of artificially simulated styles, and the lack of full cross platform support, it is not recommended to use matching by style name together with matching by style properties\n\nSee also styleName().\n\nSets the style strategy for the font to s.\n\nSee also styleStrategy() and QFont::StyleStrategy.\n\nIf enable is true, sets underline on; otherwise sets underline off.\n\nSee also underline() and QFontInfo.\n\nApplies a value to the variable axis corresponding to tag.\n\nVariable fonts provide a way to store multiple variations (with different weights, widths or styles) in the same font file. The variations are given as floating point values for a pre-defined set of parameters, called \"variable axes\". Specific instances are typically given names by the font designer, and, in Qt, these can be selected using setStyleName() just like traditional sub-families.\n\nIn some cases, it is also useful to provide arbitrary values for the different axes. For instance, if a font has a Regular and Bold sub-family, you may want a weight in-between these. You could then manually request this by supplying a custom value for the \"wght\" axis in the font.\n\nQFont font; font.setVariableAxis(\"wght\", (QFont::Normal + QFont::Bold) / 2.0f);\n\nIf the \"wght\" axis is supported by the font and the given value is within its defined range, a font corresponding to the weight 550.0 will be provided.\n\nThere are a few standard axes than many fonts provide, such as \"wght\" (weight), \"wdth\" (width), \"ital\" (italic) and \"opsz\" (optical size). They each have indivdual ranges defined in the font itself. For instance, \"wght\" may span from 100 to 900 (QFont::Thin to QFont::Black) whereas \"ital\" can span from 0 to 1 (from not italic to fully italic).\n\nA font may also choose to define custom axes; the only limitation is that the name has to meet the requirements for a QFont::Tag (sequence of four latin-1 characters.)\n\nBy default, no variable axes are set.\n\nNote: In order to use variable axes on Windows, the application has to run with either the FreeType or DirectWrite font databases. See the documentation for QGuiApplication::QGuiApplication() for more information on how to select these technologies.\n\nThis function was introduced in Qt 6.7.\n\nSee also unsetVariableAxis.\n\nSets the weight of the font to weight, using the scale defined by QFont::Weight enumeration.\n\nNote: If styleName() is set, this value may be ignored for font selection.\n\nSee also weight() and QFontInfo.\n\nSets the word spacing for the font to spacing.\n\nWord spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.\n\nWord spacing will not apply to writing systems, where indiviaul words are not separated by white space.\n\nSee also wordSpacing() and setLetterSpacing().\n\nReturns the stretch factor for the font.\n\nSee also setStretch().\n\nReturns true if strikeout has been set; otherwise returns false.\n\nSee also setStrikeOut().\n\nReturns the style of the font.\n\nSee also setStyle().\n\nReturns the StyleHint.\n\nThe style hint affects the font matching algorithm. See QFont::StyleHint for the list of available hints.\n\nSee also setStyleHint(), QFont::StyleStrategy, and QFontInfo::styleHint().\n\nReturns the requested font style name. This can be used to match the font with irregular styles (that can't be normalized in other style properties).\n\nSee also setStyleName(), setFamily(), and setStyle().\n\nReturns the StyleStrategy.\n\nThe style strategy affects the font matching algorithm. See QFont::StyleStrategy for the list of available strategies.\n\nSee also setStyleStrategy(), setStyleHint(), and QFont::StyleHint.\n\nReturns the first family name to be used whenever familyName is specified. The lookup is case insensitive.\n\nIf there is no substitution for familyName, familyName is returned.\n\nTo obtain a list of substitutions use substitutes().\n\nSee also setFamily(), insertSubstitutions(), insertSubstitution(), and removeSubstitutions().\n\nReturns a list of family names to be used whenever familyName is specified. The lookup is case insensitive.\n\nIf there is no substitution for familyName, an empty list is returned.\n\nSee also substitute(), insertSubstitutions(), insertSubstitution(), and removeSubstitutions().\n\nReturns a sorted list of substituted family names.\n\nSee also insertSubstitution(), removeSubstitutions(), and substitute().\n\nSwaps this font instance with other. This function is very fast and never fails.\n\nReturns a description of the font. The description is a comma-separated list of the attributes, perfectly suited for use in QSettings, and consists of the following:\n\nFont family\n\nPoint size\n\nPixel size\n\nStyle hint\n\nFont weight\n\nFont style\n\nUnderline\n\nStrike out\n\nFixed pitch\n\nAlways 0\n\nCapitalization\n\nLetter spacing\n\nWord spacing\n\nStretch\n\nStyle strategy\n\nFont style (omitted when unavailable)\n\nSee also fromString().\n\nReturns true if underline has been set; otherwise returns false.\n\nSee also setUnderline().\n\nThis is an overloaded function.\n\nUnsets the tag from the map of explicitly enabled/disabled features.\n\nNote: Even if the feature has not previously been added, this will mark the font features map as modified in this QFont, so that it will take precedence when resolving against other fonts.\n\nUnsetting an existing feature on the QFont reverts behavior to the default.\n\nSee setFeature() for more details on font features.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, clearFeatures(), setFeature(), featureTags(), and featureValue().\n\nUnsets a previously set variable axis value given by tag.\n\nNote: If no value has previously been given for this tag, the QFont will still consider its variable axes as set when resolving against other QFont values.\n\nThis function was introduced in Qt 6.7.\n\nSee also setVariableAxis.\n\nReturns a list of tags for all variable axes currently set on this QFont.\n\nSee setVariableAxis() for more details on variable axes.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setVariableAxis(), unsetVariableAxis(), isVariableAxisSet(), and clearVariableAxes().\n\nReturns the value set for a specific variable axis tag. If the tag has not been set, 0.0 will be returned instead.\n\nSee setVariableAxis() for more details on variable axes.\n\nThis function was introduced in Qt 6.7.\n\nSee also QFont::Tag, setVariableAxis(), unsetVariableAxis(), isVariableAxisSet(), and clearVariableAxes().\n\nReturns the weight of the font, using the same scale as the QFont::Weight enumeration.\n\nSee also setWeight(), Weight, and QFontInfo.\n\nReturns the word spacing for the font.\n\nSee also setWordSpacing() and setLetterSpacing().\n\nReturns the font as a QVariant\n\nReturns true if this font is different from f; otherwise returns false.\n\nTwo QFonts are considered to be different if their font attributes are different.\n\nSee also operator==().\n\nProvides an arbitrary comparison of this font and font f. All that is guaranteed is that the operator returns false if both fonts are equal and that (f1 < f2) == !(f2 < f1) if the fonts are not equal.\n\nThis function is useful in some circumstances, for example if you want to use QFont objects as keys in a QMap.\n\nSee also operator==(), operator!=(), and isCopyOf().\n\nAssigns font to this font and returns a reference to it.\n\nMove-assigns other to this QFont instance.\n\nReturns true if this font is equal to f; otherwise returns false.\n\nTwo QFonts are considered equal if their font attributes are equal.\n\nSee also operator!=() and isCopyOf()."
    }
}