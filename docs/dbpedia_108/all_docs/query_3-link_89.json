{
    "id": "dbpedia_108_3",
    "rank": 89,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search",
        "read_more_link": "",
        "language": "en",
        "title": "<input type=\"search\"> - HTML: HyperText Markup Language",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [
            "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search/chrome-cross-icon.png",
            "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search/firefox-auto-complete.png",
            "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search/firefox-required-message.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-25T21:13:49+00:00",
        "summary": "",
        "meta_description": "<input> elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search",
        "text": "The value attribute contains a string representing the value contained in the search field. You can retrieve this using the HTMLInputElement.value property in JavaScript.\n\njs\n\nsearchTerms = mySearch.value;\n\nIf no validation constraints are in place for the input (see Validation for more details), the value can be any text string or an empty string (\"\").\n\nThe values of the list attribute is the id of a <datalist> element located in the same document. The <datalist> provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the type are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.\n\nThe maximum string length (measured in UTF-16 code units) that the user can enter into the search field. This must be an integer value of 0 or higher. If no maxlength is specified, or an invalid value is specified, the search field has no maximum length. This value must also be greater than or equal to the value of minlength.\n\nThe input will fail constraint validation if the length of the text entered into the field is greater than maxlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user.\n\nThe minimum string length (measured in UTF-16 code units) that the user can enter into the search field. This must be a non-negative integer value smaller than or equal to the value specified by maxlength. If no minlength is specified, or an invalid value is specified, the search input has no minimum length.\n\nThe search field will fail constraint validation if the length of the text entered into the field is fewer than minlength UTF-16 code units long. Constraint validation is only applied when the value is changed by the user.\n\nThe pattern attribute, when specified, is a regular expression that the input's value must match for the value to pass constraint validation. It must be a valid JavaScript regular expression, as used by the RegExp type, and as documented in our guide on regular expressions; the 'u' flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as ASCII. No forward slashes should be specified around the pattern text.\n\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n\nNote: Use the title attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby.\n\nSee the section Specifying a pattern for details and an example.\n\nThe placeholder attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text must not include carriage returns or line feeds.\n\nIf the control's content has one directionality (LTR or RTL) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see How to use Unicode controls for bidi text for more information.\n\nNote: Avoid using the placeholder attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See <input> labels for more information.\n\nThe size attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font (font settings in use).\n\nThis does not set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the maxlength attribute.\n\nspellcheck is a global attribute which is used to indicate whether to enable spell checking for an element. It can be used on any editable content, but here we consider specifics related to the use of spellcheck on <input> elements. The permitted values for spellcheck are:\n\nfalse\n\nDisable spell checking for this element.\n\ntrue\n\nEnable spell checking for this element.\n\n\"\" (empty string) or no value\n\nFollow the element's default behavior for spell checking. This may be based upon a parent's spellcheck setting or other factors.\n\nAn input field can have spell checking enabled if it doesn't have the readonly attribute set and is not disabled.\n\nThe value returned by reading spellcheck may not reflect the actual state of spell checking within a control, if the user agent's preferences override the setting.\n\nThe Boolean attribute incremental is a WebKit and Blink extension (so supported by Safari, Opera, Chrome, etc.) which, if present, tells the user agent to process the input as a live search. As the user edits the value of the field, the user agent sends search events to the HTMLInputElement object representing the search box. This allows your code to update the search results in real time as the user edits the search.\n\nIf incremental is not specified, the search event is only sent when the user explicitly initiates a search (such as by pressing the Enter or Return key while editing the field).\n\nThe search event is rate-limited so that it is not sent more frequently than an implementation-defined interval.\n\nThe results attributeâsupported only by Safariâis a numeric value that lets you override the maximum number of entries to be displayed in the <input> element's natively-provided drop-down menu of previous search queries.\n\nThe value must be a non-negative decimal number. If not provided, or an invalid value is given, the browser's default maximum number of entries is used.\n\nThe main basic differences come in the way browsers handle them. The first thing to note is that some browsers show a cross icon that can be clicked on to remove the search term instantly if desired, in Chrome this action is also triggered when pressing escape. The following screenshot comes from Chrome:\n\nIn addition, modern browsers also tend to automatically store search terms previously entered across domains, which then come up as autocomplete options when subsequent searches are performed in search inputs on that domain. This helps users who tend to do searches on the same or similar search queries over time. This screenshot is from Firefox:\n\nAt this point, let's look at some useful techniques you can apply to your search forms.\n\nYou can provide a useful placeholder inside your search input that could give a hint on what to do using the placeholder attribute. Look at the following example:\n\nhtml\n\n<form> <div> <input type=\"search\" id=\"mySearch\" name=\"q\" placeholder=\"Search the siteâ¦\" /> <button>Search</button> </div> </form>\n\nYou can see how the placeholder is rendered below:\n\nOne problem with search forms is their accessibility; a common design practice is not to provide a label for the search field (although there might be a magnifying glass icon or similar), as the purpose of a search form is normally fairly obvious for sighted users due to placement (this example shows a typical pattern).\n\nThis could, however, cause confusion for screen reader users, since they will not have any verbal indication of what the search input is. One way around this that won't impact on your visual design is to use WAI-ARIA features:\n\nA role attribute of value search on the <form> element will cause screen readers to announce that the form is a search form.\n\nIf that isn't enough, you can use an aria-label attribute on the <input> itself. This should be a descriptive text label that will be read out by the screen reader; it's used as a non-visual equivalent to <label>.\n\nLet's have a look at an example:\n\nhtml\n\n<form role=\"search\"> <div> <input type=\"search\" id=\"mySearch\" name=\"q\" placeholder=\"Search the siteâ¦\" aria-label=\"Search through site content\" /> <button>Search</button> </div> </form>\n\nYou can see how this is rendered below:\n\nThere is no visual difference from the previous example, but screen reader users have way more information available to them.\n\nNote: See Signposts/Landmarks for more information about such accessibility features.\n\nThe physical size of the input box can be controlled using the size attribute. With it, you can specify the number of characters the input box can display at a time. In this example, for instance, the search box is 30 characters wide:\n\nhtml\n\n<form> <div> <input type=\"search\" id=\"mySearch\" name=\"q\" placeholder=\"Search the siteâ¦\" size=\"30\" /> <button>Search</button> </div> </form>\n\nThe result is this wider input box:\n\n<input> elements of type search have the same validation features available to them as regular text inputs. It is less likely that you'd want to use validation features in general for search boxes. In many cases, users should just be allowed to search for anything, but there are a few cases to consider, such as searches against data of a known format.\n\nNote: HTML form validation is not a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database.\n\nThere are useful pseudo-classes available for styling valid/invalid form elements: :valid and :invalid. In this section, we'll use the following CSS, which will place a check (tick) next to inputs containing valid values, and a cross next to inputs containing invalid values.\n\ncss\n\ninput:invalid ~ span::after { content: \"â\"; padding-left: 5px; position: absolute; } input:valid ~ span::after { content: \"â\"; padding-left: 5px; position: absolute; }\n\nThe technique also requires a <span> element to be placed after the form element, which acts as a holder for the icons. This was necessary because some input types on some browsers don't display icons placed directly after them very well.\n\nYou can specify a minimum length, in characters, for the entered value using the minlength attribute; similarly, use maxlength to set the maximum length of the entered value.\n\nThe example below requires that the entered value be 4â8 characters in length.\n\nhtml\n\n<form> <div> <label for=\"mySearch\">Search for user</label> <input type=\"search\" id=\"mySearch\" name=\"q\" placeholder=\"User IDs are 4â8 characters in length\" required size=\"30\" minlength=\"4\" maxlength=\"8\" /> <button>Search</button> <span class=\"validity\"></span> </div> </form>\n\ninput { margin-right: 10px; } input:invalid ~ span::after { content: \"â\"; padding-left: 5px; position: absolute; } input:valid ~ span::after { content: \"â\"; padding-left: 5px; position: absolute; }\n\nThis renders like so:\n\nIf you try to submit the form with less than 4 characters, you'll be given an appropriate error message (which differs between browsers). If you try to go beyond 8 characters in length, the browser won't let you.\n\nYou can use the pattern attribute to specify a regular expression that the inputted value must follow to be considered valid (see Validating against a regular expression for a simple crash course).\n\nLet's look at an example. Say we wanted to provide a product ID search form, and the IDs were all codes of two letters followed by four numbers. The following example covers it:\n\nhtml\n\n<form> <div> <label for=\"mySearch\">Search for product by ID:</label> <input type=\"search\" id=\"mySearch\" name=\"q\" placeholder=\"two letters followed by four numbers\" required size=\"30\" pattern=\"[A-z]{2}[0-9]{4}\" /> <button>Search</button> <span class=\"validity\"></span> </div> </form>\n\ninput { margin-right: 10px; } input:invalid ~ span::after { content: \"â\"; padding-left: 5px; position: absolute; } input:valid ~ span::after { content: \"â\"; padding-left: 5px; position: absolute; }\n\nThis renders like so:"
    }
}