{
    "id": "dbpedia_108_1",
    "rank": 60,
    "data": {
        "url": "https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/",
        "read_more_link": "",
        "language": "en",
        "title": "AsciiDoc Syntax Quick Reference",
        "top_image": "https://docs.asciidoctor.org/_/img/asciidoctor-og.png",
        "meta_img": "https://docs.asciidoctor.org/_/img/asciidoctor-og.png",
        "images": [
            "https://docs.asciidoctor.org/_/img/asciidoctor-logo.svg",
            "https://docs.asciidoctor.org/_/img/octicons-24.svg#view-comment-discussion",
            "https://docs.asciidoctor.org/_/img/octicons-16.svg#view-comment-discussion",
            "https://docs.asciidoctor.org/_/img/octicons-16.svg#view-mail",
            "https://docs.asciidoctor.org/_/img/octicons-16.svg#view-mark-github",
            "https://docs.asciidoctor.org/_/img/octicons-16.svg#view-hash",
            "https://docs.asciidoctor.org/asciidoc/latest/macros/_images/sunset.jpg",
            "https://docs.asciidoctor.org/asciidoc/latest/macros/_images/sunset.jpg",
            "https://docs.asciidoctor.org/asciidoc/latest/macros/_images/sunset.jpg",
            "https://asciidoctor.org/images/octocat.jpg",
            "https://docs.asciidoctor.org/asciidoc/latest/macros/_images/play.png",
            "https://docs.asciidoctor.org/asciidoc/latest/macros/_images/pause.png",
            "https://docs.asciidoctor.org/asciidoc/latest/macros/_images/sunset.jpg",
            "https://docs.asciidoctor.org/_/img/asciidoctor-logo.svg",
            "https://docs.asciidoctor.org/_/img/twitter-logo.svg",
            "https://secure.gravatar.com/avatar/823717a797dbd78ceff7b26aa397f383.png?size=80",
            "https://docs.asciidoctor.org/_/img/zulip-logo.svg",
            "https://docs.asciidoctor.org/_/img/algolia-logo.svg",
            "https://docs.asciidoctor.org/_/img/netlify-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The quick reference for common AsciiDoc document and text formatting markup.",
        "meta_lang": "en",
        "meta_favicon": "../../../_/img/favicon.ico",
        "meta_site_name": "Asciidoctor Docs",
        "canonical_link": "https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/",
        "text": "The examples on this page demonstrate the output produced by the built-in HTML converter. An AsciiDoc converter is expected to produce complementary output when generating other output formats, such as PDF, EPUB, and DocBook.\n\nParagraphs\n\nExample 1. Paragraph\n\nParagraphs don't require special markup in AsciiDoc. A paragraph is defined by one or more consecutive lines of text. Line breaks within a paragraph are not displayed. Leave at least one empty line to begin a new paragraph.\n\nView result of Example 1\n\nParagraphs don’t require special markup in AsciiDoc. A paragraph is defined by one or more consecutive lines of text. Line breaks within a paragraph are not displayed.\n\nLeave at least one empty line to begin a new paragraph.\n\nExample 2. Literal paragraph\n\nA normal paragraph. A literal paragraph. One or more consecutive lines indented by at least one space. The text is shown in a fixed-width (typically monospace) font. The lines are preformatted (i.e., as formatted in the source). Spaces and newlines, like the ones in this sentence, are preserved.\n\nView result of Example 2\n\nA normal paragraph.\n\nA literal paragraph. One or more consecutive lines indented by at least one space.\n\nThe text is shown in a fixed-width (typically monospace) font. The lines are preformatted (i.e., as formatted in the source). Spaces and newlines, like the ones in this sentence, are preserved.\n\nExample 3. Hard line breaks\n\nRoses are red, + violets are blue. [%hardbreaks] A ruby is red. Java is black.\n\nView result of Example 3\n\nRoses are red,\n\nviolets are blue.\n\nA ruby is red.\n\nJava is black.\n\nExample 4. Lead paragraph\n\n[.lead] This text will be styled as a lead paragraph (i.e., larger font). This paragraph will not be.\n\nView result of Example 4\n\nThis text will be styled as a lead paragraph (i.e., larger font).\n\nThis paragraph will not be.\n\nThe default Asciidoctor stylesheet automatically styles the first paragraph of the preamble as a lead paragraph if no role is specified on that paragraph.\n\nText formatting\n\nExample 5. Constrained bold, italic, and monospace\n\nIt has *strong* significance to me. I _cannot_ stress this enough. Type `OK` to accept. That *_really_* has to go. Can't pick one? Let's use them `*_all_*`.\n\nView result of Example 5\n\nIt has strong significance to me.\n\nI cannot stress this enough.\n\nType OK to accept.\n\nThat really has to go.\n\nCan’t pick one? Let’s use them all.\n\nExample 6. Unconstrained bold, italic, and monospace\n\n**C**reate, **R**ead, **U**pdate, and **D**elete (CRUD) That's fan__freakin__tastic! Don't pass generic ``Object``s to methods that accept ``String``s! It was Beatle**__mania__**!\n\nView result of Example 6\n\nCreate, Read, Update, and Delete (CRUD)\n\nThat’s fanfreakintastic!\n\nDon’t pass generic Objects to methods that accept Strings!\n\nIt was Beatlemania!\n\nExample 7. Highlight, underline, strikethrough, and custom role\n\nMark my words, #automation is essential#. ##Mark##up refers to text that contains formatting ##mark##s. Where did all the [.underline]#cores# go? We need [.line-through]#ten# twenty VMs. A [.myrole]#custom role# must be fulfilled by the theme.\n\nView result of Example 7\n\nMark my words, automation is essential.\n\nMarkup refers to text that contains formatting marks.\n\nWhere did all the cores go?\n\nWe need ten twenty VMs.\n\nA custom role must be fulfilled by the theme.\n\nExample 8. Superscript and subscript\n\n^super^script ~sub~script\n\nView result of Example 8\n\nsuperscript\n\nsubscript\n\nExample 9. Smart quotes and apostrophes\n\n\"`double curved quotes`\" '`single curved quotes`' Olaf's desk was a mess. A ``std::vector```'s size is the number of items it contains. All of the werewolves`' desks were a mess. Olaf had been with the company since the `'00s.\n\nView result of Example 9\n\n“double curved quotes”\n\n‘single curved quotes’\n\nOlaf’s desk was a mess.\n\nA std::vector’s size is the number of items it contains.\n\nAll of the werewolves’ desks were a mess.\n\nOlaf had been with the company since the ’00s.\n\nExample 10. Autolinks, URL macro, and mailto macro\n\nhttps://asciidoctor.org - automatic! https://asciidoctor.org[Asciidoctor] devel@discuss.example.org mailto:devel@discuss.example.org[Discuss] mailto:join@discuss.example.org[Subscribe,Subscribe me,I want to join!]\n\nView result of Example 10\n\nasciidoctor.org - automatic!\n\nAsciidoctor\n\ndevel@discuss.example.org\n\nDiscuss\n\nSubscribe\n\nExample 11. URL macros with attributes\n\nhttps://chat.asciidoc.org[Discuss AsciiDoc,role=external,window=_blank] https://chat.asciidoc.org[Discuss AsciiDoc^]\n\nView result of Example 11\n\nDiscuss AsciiDoc\n\nDiscuss AsciiDoc\n\nThe link: macro prefix is not required when the target starts with a URL scheme like https:. The URL scheme acts as an implicit macro prefix.\n\nIf the link text contains a comma and the text is followed by one or more named attributes, you must enclose the text in double quotes. Otherwise, the text will be cut off at the comma (and the remaining text will get pulled into the attribute parsing).\n\nExample 12. URLs with spaces and special characters\n\nlink:++https://example.org/?q=[a b]++[URL with special characters] https://example.org/?q=%5Ba%20b%5D[URL with special characters]\n\nExample 13. Link to relative file\n\nlink:index.html[Docs]\n\nExample 14. Link using a Windows UNC path\n\nlink:\\\\server\\share\\whitepaper.pdf[Whitepaper]\n\nExample 15. Inline anchors\n\n[[bookmark-a]]Inline anchors make arbitrary content referenceable. [#bookmark-b]#Inline anchors can be applied to a phrase like this one.# anchor:bookmark-c[]Use a cross reference to link to this location. [[bookmark-d,last paragraph]]The xreflabel attribute will be used as link text in the cross-reference link.\n\nExample 16. Cross references\n\nSee <<paragraphs>> to learn how to write paragraphs. Learn how to organize the document into <<section-titles,sections>>.\n\nView result of Example 16\n\nSee Paragraphs to learn how to write paragraphs.\n\nLearn how to organize the document into sections.\n\nExample 17. Inter-document cross references\n\nRefer to xref:document-b.adoc#section-b[Section B of Document B] for more information. If you never return from xref:document-b.adoc[Document B], we'll send help.\n\nDocument header\n\nThe document header is optional. The header may not contain any empty lines and must be separated from the content by at least one empty line.\n\nExample 18. Title\n\n= Document Title This document provides...\n\nExample 19. Title and author line\n\n= Document Title Author Name <author@email.org> This document provides...\n\nExample 20. Title, author line, and revision line\n\n= Document Title Author Name <author@email.org>; Another Author <a.author@email.org> v2.0, 2019-03-22 This document provides...\n\nYou cannot have a revision line without an author line.\n\nExample 21. Document header with attribute entries\n\n= Document Title Author Name <author@email.org> v2.0, 2019-03-22 :toc: :homepage: https://example.org This document provides...\n\nSection titles\n\nWhen the document type is article (the default), the document can only have one level 0 section title (=), which is the document title (i.e., doctitle).\n\nExample 22. Article section levels\n\n= Document Title (Level 0) == Level 1 Section Title === Level 2 Section Title ==== Level 3 Section Title ===== Level 4 Section Title ====== Level 5 Section Title == Another Level 1 Section Title\n\nView result of Example 22\n\nDocument Title (Level 0)\n\nLevel 1 Section Title\n\nLevel 2 Section Title\n\nLevel 3 Section Title\n\nLevel 4 Section Title\n\nLevel 5 Section Title\n\nAnother Level 1 Section Title\n\nThe book document type can have additional level 0 section titles, which are interpreted as parts. The presence of at least one part implicitly makes the document a multi-part book.\n\nExample 23. Book section levels\n\n= Document Title (Level 0) == Level 1 Section Title = Level 0 Section Title (Part) == Level 1 Section Title === Level 2 Section Title ==== Level 3 Section Title ===== Level 4 Section Title ====== Level 5 Section Title = Another Level 0 Section Title (Part)\n\nExample 24. Discrete heading (not a section)\n\n[discrete] === I'm an independent heading! This paragraph is its sibling, not its child.\n\nView result of Example 24\n\nI’m an independent heading!\n\nThis paragraph is its sibling, not its child.\n\nAutomatic TOC\n\nExample 25. Activate Table of Contents for a document\n\n= Document Title Doc Writer <doc.writer@email.org> :toc:\n\nThe Table of Contents’ title, displayed section depth, and position can be customized.\n\nIncludes\n\nExample 26. Include document parts\n\n= Reference Documentation Lead Developer This is documentation for project X. include::basics.adoc[] include::installation.adoc[] include::example.adoc[]\n\nExample 27. Include content by tagged regions or lines\n\ninclude::filename.txt[tag=definition] include::filename.txt[lines=5..10]\n\nExample 28. Include content from a URL\n\ninclude::https://raw.githubusercontent.com/asciidoctor/asciidoctor/main/README.adoc[]\n\nIncluding content from a URL is potentially dangerous, so it’s disabled if the safe mode is SECURE or greater. Assuming the safe mode is less than SECURE, you must also set the allow-uri-read attribute to permit the AsciiDoc processor to read content from a URL.\n\nLists\n\nExample 29. Unordered list\n\n* List item ** Nested list item *** Deeper nested list item * List item ** Another nested list item * List item\n\nView result of Example 29\n\nList item\n\nNested list item\n\nDeeper nested list item\n\nList item\n\nAnother nested list item\n\nList item\n\nAn empty line is required before and after a list to separate it from other blocks. You can force two adjacent lists apart by adding an empty attribute list (i.e., []) above the second list or by inserting an empty line followed by a line comment after the first list. If you use a line comment, the convention is to use //- to provide a hint to other authors that it’s serving as a list divider.\n\nExample 30. Unordered list max level nesting\n\n* Level 1 list item ** Level 2 list item *** Level 3 list item **** Level 4 list item ***** Level 5 list item ****** etc. * Level 1 list item\n\nView result of Example 30\n\nLevel 1 list item\n\nLevel 2 list item\n\nLevel 3 list item\n\nLevel 4 list item\n\nLevel 5 list item\n\netc.\n\nLevel 1 list item\n\nThe unordered list marker can be changed using a list style (e.g., square).\n\nExample 31. Ordered list\n\n. Step 1 . Step 2 .. Step 2a .. Step 2b . Step 3\n\nView result of Example 31\n\nStep 1\n\nStep 2\n\nStep 2a\n\nStep 2b\n\nStep 3\n\nExample 32. Ordered list max level nesting\n\n. Level 1 list item .. Level 2 list item ... Level 3 list item .... Level 4 list item ..... Level 5 list item . Level 1 list item\n\nView result of Example 32\n\nLevel 1 list item\n\nLevel 2 list item\n\nLevel 3 list item\n\nLevel 4 list item\n\nLevel 5 list item\n\nLevel 1 list item\n\nOrdered lists support numeration styles such as lowergreek and decimal-leading-zero.\n\nExample 33. Checklist\n\n* [*] checked * [x] also checked * [ ] not checked * normal list item\n\nView result of Example 33\n\nchecked\n\nalso checked\n\nnot checked\n\nnormal list item\n\nExample 34. Description list\n\nFirst term:: The description can be placed on the same line as the term. Second term:: Description of the second term. The description can also start on its own line.\n\nView result of Example 34\n\nFirst term\n\nThe description can be placed on the same line as the term.\n\nSecond term\n\nDescription of the second term. The description can also start on its own line.\n\nExample 35. Question and answer list\n\n[qanda] What is the answer?:: This is the answer. Are cameras allowed?:: Are backpacks allowed?:: No.\n\nView result of Example 35\n\nWhat is the answer?\n\nThis is the answer.\n\nAre cameras allowed?\n\nAre backpacks allowed?\n\nNo.\n\nExample 36. Mixed\n\nOperating Systems:: Linux::: . Fedora * Desktop . Ubuntu * Desktop * Server BSD::: . FreeBSD . NetBSD Cloud Providers:: PaaS::: . OpenShift . CloudBees IaaS::: . Amazon EC2 . Rackspace\n\nView result of Example 36\n\nOperating Systems\n\nLinux\n\nFedora\n\nDesktop\n\nUbuntu\n\nDesktop\n\nServer\n\nBSD\n\nFreeBSD\n\nNetBSD\n\nCloud Providers\n\nPaaS\n\nOpenShift\n\nCloudBees\n\nIaaS\n\nAmazon EC2\n\nRackspace\n\nLists can be indented. Leading whitespace is not significant.\n\nExample 37. Complex content in outline lists\n\n* Every list item has at least one paragraph of content, which may be wrapped, even using a hanging indent. + Additional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks. + list continuation:: a plus sign (`{plus}`) on a line by itself * A literal paragraph does not require a list continuation. $ cd projects/my-book * AsciiDoc lists may contain any complex content. + |=== |Column 1, Header Row |Column 2, Header Row |Column 1, Row 1 |Column 2, Row 1 |===\n\nView result of Example 37\n\nEvery list item has at least one paragraph of content, which may be wrapped, even using a hanging indent.\n\nAdditional paragraphs or blocks are adjoined by putting a list continuation on a line adjacent to both blocks.\n\nlist continuation\n\na plus sign (+) on a line by itself\n\nA literal paragraph does not require a list continuation.\n\n$ cd projects/my-book\n\nAsciiDoc lists may contain any complex content.\n\nColumn 1, Header Row Column 2, Header Row\n\nColumn 1, Row 1\n\nColumn 2, Row 1\n\nImages\n\nYou can use the imagesdir attribute to avoid hard coding the common path to your images in every image macro. The value of this attribute can be an absolute path, relative path, or base URL. If the image target is a relative path, the attribute’s value is prepended (i.e., it’s resolved relative to the value of the imagesdir attribute). If the image target is a URL or absolute path, the attribute’s value is not prepended.\n\nExample 38. Block image macro\n\nimage::sunset.jpg[] image::sunset.jpg[Sunset] .A mountain sunset [#img-sunset,caption=\"Figure 1: \",link=https://www.flickr.com/photos/javh/5448336655] image::macros:sunset.jpg[Sunset,200,100] image::https://asciidoctor.org/images/octocat.jpg[GitHub mascot]\n\nView result of Example 38\n\nFigure 1: A mountain sunset\n\nTwo colons following the image keyword in the macro (i.e., image::) indicates a block image (aka figure), whereas one colon following the image keyword (i.e., image:) indicates an inline image. (All macros follow this pattern). You use an inline image when you need to place the image in a line of text. Otherwise, you should prefer the block form.\n\nExample 39. Inline image macro\n\nClick image:play.png[] to get the party started. Click image:pause.png[title=Pause] when you need a break.\n\nView result of Example 39\n\nClick to get the party started.\n\nClick when you need a break.\n\nExample 40. Inline image macro with positioning role\n\nimage:sunset.jpg[Sunset,150,150,role=right] What a beautiful sunset!\n\nView result of Example 40\n\nWhat a beautiful sunset!\n\nExample 41. Embedded\n\n= Document Title :data-uri:\n\nWhen the data-uri attribute is set, all images in the document—​including admonition icons—​are embedded into the document as data URIs. You can also pass it as a command line argument using -a data-uri.\n\nAudio\n\nExample 42. Block audio macro\n\naudio::ocean-waves.wav[] audio::ocean-waves.wav[start=60,opts=autoplay]\n\nYou can control the audio settings using additional attributes and options on the macro.\n\nVideos\n\nExample 43. Block video macro\n\nvideo::video-file.mp4[] video::video-file.mp4[width=640,start=60,opts=autoplay]\n\nExample 44. Embedded YouTube video\n\nvideo::RvRhUHTV_8k[youtube]\n\nExample 45. Embedded Vimeo video\n\nvideo::67480300[vimeo]\n\nYou can control the video settings using additional attributes and options on the macro.\n\nKeyboard, button, and menu macros\n\nYou must set the experimental attribute in the document header to enable these macros.\n\nExample 46. Keyboard macro\n\n|=== |Shortcut |Purpose |kbd:[F11] |Toggle fullscreen |kbd:[Ctrl+T] |Open a new tab |===\n\nView result of Example 46\n\nShortcut Purpose\n\nF11\n\nToggle fullscreen\n\nCtrl+T\n\nOpen a new tab\n\nExample 47. Menu macro\n\nTo save the file, select menu:File[Save]. Select menu:View[Zoom > Reset] to reset the zoom level to the default setting.\n\nExample 48. Button macro\n\nPress the btn:[OK] button when you are finished. Select a file in the file navigator and click btn:[Open].\n\nLiterals and source code\n\nExample 49. Inline literal monospace\n\nOutput literal monospace text, such as `+{backtick}+` or `+http://localhost:8080+`, by enclosing the text in a pair of pluses surrounded by a pair backticks.\n\nView result of Example 49\n\nOutput literal monospace text, such as {backtick} or http://localhost:8080, by enclosing the text in a pair of pluses surrounded by a pair backticks.\n\nExample 50. Literal paragraph\n\nNormal line. Indent line by one space to create a literal line. Normal line.\n\nView result of Example 50\n\nNormal line.\n\nIndent line by one space to create a literal line.\n\nNormal line.\n\nExample 51. Literal block\n\n.... error: 1954 Forbidden search absolutely fatal: operation lost in the dodecahedron of doom Would you like to try again? y/n ....\n\nView result of Example 51\n\nerror: 1954 Forbidden search absolutely fatal: operation lost in the dodecahedron of doom Would you like to try again? y/n\n\nExample 52. Listing block with title\n\n.Gemfile.lock ---- GEM remote: https://rubygems.org/ specs: asciidoctor (2.0.15) PLATFORMS ruby DEPENDENCIES asciidoctor (~> 2.0.15) ----\n\nView result of Example 52\n\nListing 1. Gemfile.lock\n\nGEM remote: https://rubygems.org/ specs: asciidoctor (2.0.15) PLATFORMS ruby DEPENDENCIES asciidoctor (~> 2.0.15)\n\nExample 53. Source block with title and syntax highlighting\n\n.Some Ruby code [source,ruby] ---- require 'sinatra' get '/hi' do \"Hello World!\" end ----\n\nView result of Example 53\n\nListing 1. Some Ruby code\n\nrequire 'sinatra' get '/hi' do \"Hello World!\" end\n\nExample 54. Source block with callouts\n\n[source,ruby] ---- require 'sinatra' // <1> get '/hi' do // <2> \"Hello World!\" // <3> end ---- <1> Library import <2> URL mapping <3> HTTP response body\n\nView result of Example 54\n\nrequire 'sinatra' (1) get '/hi' do (2) \"Hello World!\" (3) end\n\n1 Library import 2 URL mapping 3 HTTP response body\n\nExample 55. Make callouts non-selectable\n\n---- line of code // <1> line of code # <2> line of code ;; <3> line of code <!--4--> ---- <1> A callout behind a line comment for C-style languages. <2> A callout behind a line comment for Ruby, Python, Perl, etc. <3> A callout behind a line comment for Clojure. <4> A callout behind a line comment for XML or SGML languages like HTML.\n\nView result of Example 55\n\nline of code (1) line of code (2) line of code (3) line of code (4)\n\n1 A callout behind a line comment for C-style languages. 2 A callout behind a line comment for Ruby, Python, Perl, etc. 3 A callout behind a line comment for Clojure. 4 A callout behind a line comment for XML or SGML languages like HTML.\n\nExample 56. Source block content included from a file\n\n[,ruby] ---- include::app.rb[] ----\n\nExample 57. Source block content included from file relative to source directory\n\n:sourcedir: src/main/java [source,java] ---- include::{sourcedir}/org/asciidoctor/Asciidoctor.java[] ----\n\nExample 58. Strip leading indentation from partial file content\n\n[source,ruby] ---- include::lib/app.rb[tag=main,indent=0] ----\n\nExample 59. Source paragraph (no empty lines)\n\n[source,xml] <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> This is normal content.\n\nView result of Example 59\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\nThis is normal content.\n\nAdmonitions\n\nExample 60. Admonition paragraph\n\nNOTE: An admonition draws the reader's attention to auxiliary information. Here are the other built-in admonition types: IMPORTANT: Don't forget the children! TIP: Look for the warp zone under the bridge. CAUTION: Slippery when wet. WARNING: The software you're about to use is untested. IMPORTANT: Sign off before stepping away from your computer.\n\nExample 61. Admonition block\n\n[NOTE] ==== An admonition block may contain complex content. .A list - one - two - three Another paragraph. ====\n\nView result of Example 61\n\nMore delimited blocks\n\nAny block can have a title. A block title is defined using a line of text above the block that starts with a dot. That dot cannot be followed by a space. For block images, the title is displayed below the block. For all other blocks, the title is typically displayed above it.\n\nExample 62. Sidebar block\n\n.Optional Title **** Sidebars are used to visually separate auxiliary bits of content that supplement the main text. ****\n\nView result of Example 62\n\nExample 63. Example block\n\n==== Here's a sample AsciiDoc document: ---- = Title of Document Doc Writer :toc: This guide provides... ---- The document header is useful, but not required. ====\n\nView result of Example 63\n\nExample 64. Blockquotes\n\n[quote,Abraham Lincoln,Address delivered at the dedication of the Cemetery at Gettysburg] ____ Four score and seven years ago our fathers brought forth on this continent a new nation... ____ [quote,Albert Einstein] A person who never made a mistake never tried anything new. ____ A person who never made a mistake never tried anything new. ____ [quote,Charles Lutwidge Dodgson,'Mathematician and author, also known as https://en.wikipedia.org/wiki/Lewis_Carroll[Lewis Carroll]'] ____ If you don't know where you are going, any road will get you there. ____ \"I hold it that a little rebellion now and then is a good thing, and as necessary in the political world as storms in the physical.\" -- Thomas Jefferson, Papers of Thomas Jefferson: Volume 11\n\nView result of Example 64\n\nA person who never made a mistake never tried anything new.\n\n— Albert Einstein\n\nI hold it that a little rebellion now and then is a good thing, and as necessary in the political world as storms in the physical.\n\n— Thomas Jefferson\n\nPapers of Thomas Jefferson: Volume 11\n\nExample 65. Open blocks\n\n-- An open block can be an anonymous container, or it can masquerade as any other block. -- [source] -- puts \"I'm a source block!\" --\n\nView result of Example 65\n\nputs \"I'm a source block!\"\n\nExample 66. Passthrough block\n\n++++ <p> Content in a passthrough block is passed to the output unprocessed. That means you can include raw HTML, like this embedded Gist: </p> <script src=\"https://gist.github.com/mojavelinux/5333524.js\"> </script> ++++\n\nView result of Example 66\n\nContent in a passthrough block is passed to the output unprocessed. That means you can include raw HTML, like this embedded Gist:\n\nExample 67. Customize block substitutions\n\n:release-version: 2.4.3 [source,xml,subs=attributes+] ---- <dependency> <groupId>org.asciidoctor</groupId> <artifactId>asciidoctorj</artifactId> <version>{release-version}</version> </dependency> ----\n\nView result of Example 67\n\n<dependency> <groupId>org.asciidoctor</groupId> <artifactId>asciidoctorj</artifactId> <version>2.4.3</version> </dependency>\n\nTables\n\nExample 68. Table with a title, two columns, a header row, and two rows of content\n\n.Table Title |=== |Column 1, Header Row |Column 2, Header Row (1) (2) |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 1, row 2 |Cell in column 2, row 2 |===\n\n1 Unless the cols attribute is specified, the number of columns is equal to the number of cell separators on the first (non-empty) line. 2 When an empty line immediately follows a non-empty line at the start of the table, the cells in the first line get promoted to the table header.\n\nView result of Example 68\n\nTable 1. Table Title Column 1, Header Row Column 2, Header Row\n\nExample 69. Table with two columns, a header row, and two rows of content\n\n[%header,cols=2*] (1) |=== |Name of Column 1 |Name of Column 2 |Cell in column 1, row 1 |Cell in column 2, row 1 |Cell in column 1, row 2 |Cell in column 2, row 2 |===\n\n1 The * in the cols attribute is the repeat operator. It means repeat the column specification across the remaining columns. In this case, we are repeating the default formatting across 2 columns. When the cells in the header are not defined on a single line, you must use the cols attribute to set the number of columns in the table and the %header option (or options=header attribute) to promote the first row to the table header.\n\nView result of Example 69\n\nName of Column 1 Name of Column 2\n\nExample 70. Table with three columns, a header row, and two rows of content\n\n.Applications [cols=\"1,1,2\"] (1) |=== |Name |Category |Description |Firefox |Browser |Mozilla Firefox is an open source web browser. It's designed for standards compliance, performance, portability. |Arquillian |Testing |An innovative and highly extensible testing platform. Empowers developers to easily create real, automated tests. |===\n\n1 In this example, the cols attribute has two functions. It specifies that this table has three columns, and it sets their relative widths.\n\nView result of Example 70\n\nTable 1. Applications Name Category Description\n\nExample 71. Table with column containing AsciiDoc content\n\n[cols=\"2,2,5a\"] |=== |Firefox |Browser |Mozilla Firefox is an open source web browser. It's designed for: * standards compliance * performance * portability https://getfirefox.com[Get Firefox]! |===\n\nView result of Example 71\n\nExample 72. Table from CSV data using shorthand\n\n,=== Artist,Track,Genre Baauer,Harlem Shake,Hip Hop ,===\n\nView result of Example 72\n\nArtist Track Genre\n\nBaauer\n\nHarlem Shake\n\nHip Hop\n\nExample 73. Table from CSV data\n\n[%header,format=csv] |=== Artist,Track,Genre Baauer,Harlem Shake,Hip Hop The Lumineers,Ho Hey,Folk Rock |===\n\nView result of Example 73\n\nArtist Track Genre\n\nBaauer\n\nHarlem Shake\n\nHip Hop\n\nThe Lumineers\n\nHo Hey\n\nFolk Rock\n\nExample 74. Table from CSV data included from file\n\n,=== include::customers.csv[] ,===\n\nExample 75. Table from DSV data using shorthand\n\n:=== Artist:Track:Genre Robyn:Indestructible:Dance :===\n\nView result of Example 75\n\nArtist Track Genre\n\nRobyn\n\nIndestructible\n\nDance\n\nExample 76. Table with formatted, aligned and merged cells\n\n[cols=\"e,m,^,>s\",width=\"25%\"] |=== |1 >s|2 |3 |4 ^|5 2.2+^.^|6 .3+<.>m|7 ^|8 |9 2+>|10 |===\n\nView result of Example 76\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\nIDs, roles, and options\n\nExample 77. Shorthand method for assigning block ID (anchor) and role\n\n[#goals.incremental] * Goal 1 * Goal 2\n\nExample 78. Formal method for assigning block ID (anchor) and role\n\n[id=\"goals\",role=\"incremental\"] * Goal 1 * Goal 2\n\nExample 79. Explicit section ID (anchor)\n\n[#null-values] == Primitive types and null values\n\nExample 80. Assign ID (anchor) and role to inline formatted text\n\n[#id-name.role-name]`monospace text` [#free-world.goals]*free the world*\n\nExample 81. Shorthand method for assigning block options\n\n[%header%footer%autowidth] |=== |Header A |Header B |Footer A |Footer B |===\n\nExample 82. Formal method for assigning block options\n\n[options=\"header,footer,autowidth\"] |=== |Header A |Header B |Footer A |Footer B |=== // options can be shorted to opts [opts=\"header,footer,autowidth\"] |=== |Header A |Header B |Footer A |Footer B |===\n\nExample 83. Line and block comments\n\n// A single-line comment //// A multi-line comment. Notice it's a delimited block. ////\n\nBreaks\n\nExample 84. Thematic break (aka horizontal rule)\n\nbefore ''' after\n\nView result of Example 84\n\nbefore\n\nafter\n\nExample 85. Page break\n\n<<<\n\nAttributes and substitutions\n\nExample 86. Attribute declaration and usage\n\n:url-home: https://asciidoctor.org :link-docs: https://asciidoctor.org/docs[documentation] :summary: AsciiDoc is a mature, plain-text document format for \\ writing notes, articles, documentation, books, and more. \\ It's also a text processor & toolchain for translating \\ documents into various output formats (i.e., backends), \\ including HTML, DocBook, PDF and ePub. :checkedbox: pass:normal[{startsb}&#10004;{endsb}] Check out {url-home}[Asciidoctor]! {summary} Be sure to read the {link-docs} too! {checkedbox} That's done!\n\nView result of Example 86\n\nTo learn more about the available attributes and substitution groups see:\n\nDocument Attributes Reference\n\nCharacter Replacement Attributes Reference\n\nSubstitution Groups\n\nExample 87. Counter attributes\n\n.Parts{counter2:index:0} |=== |Part Id |Description |PX-{counter:index} |Description of PX-{index} |PX-{counter:index} |Description of PX-{index} |===\n\nView result of Example 87\n\nTable 1. Parts Part Id Description\n\nPX-1\n\nDescription of PX-1\n\nPX-2\n\nDescription of PX-2\n\nText replacements\n\nTextual symbol replacements Name Syntax Unicode Replacement Rendered Notes\n\nAny named, numeric or hexadecimal XML character reference is supported.\n\nEscaping substitutions\n\nExample 88. Backslash\n\nIn /items/\\{id}, the id attribute isn't replaced. The curly braces around it are preserved. \\*Stars* isn't displayed as bold text. The asterisks around it are preserved. \\&sect; appears as an entity reference. It's not converted into the section symbol (&sect;). \\=> The backslash prevents the equals sign followed by a greater than sign from combining to form a double arrow character (=>). \\[[Word]] is not interpreted as an anchor. The double brackets around it are preserved. [\\[[Word]]] is not interpreted as a bibliography anchor. The triple brackets around it are preserved. The URL \\https://example.org isn't converted into an active link.\n\nExample 89. Single and double plus inline passthroughs\n\nA word or phrase between single pluses, such as +/user/{id}+, is not substituted. However, the special characters like +<+ and +>+ are still escaped in the output. An attribute reference within a word, such as dev++{conf}++, is not replaced. A plus passthrough will escape standalone formatting marks, like +``+, or formatting marks within a word, like all-natural++*++.\n\nView result of Example 89\n\nA word or phrase between single pluses, such as /user/{id}, is not substituted. However, the special characters like < and > are still escaped in the output.\n\nAn attribute reference within a word, such as dev{conf}, is not replaced.\n\nA plus passthrough will escape standalone formatting marks, like ``, or formatting marks within a word, like all-natural*.\n\nExample 90. Triple plus inline passthrough and inline pass macro\n\n+++<u>underline me</u>+++ is underlined. pass:[<u>underline me</u>] is also underlined.\n\nView result of Example 90\n\nunderline me is underlined.\n\nunderline me is also underlined.\n\nBibliography\n\nExample 91. Bibliography with inbound references\n\n_The Pragmatic Programmer_ <<pp>> should be required reading for all developers. To learn all about design patterns, refer to the book by the \"`Gang of Four`\" <<gof>>. [bibliography] == References * [[[pp]]] Andy Hunt & Dave Thomas. The Pragmatic Programmer: From Journeyman to Master. Addison-Wesley. 1999. * [[[gof,gang]]] Erich Gamma, Richard Helm, Ralph Johnson & John Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. 1994.\n\nView result of Example 91\n\nView result of Example 92\n\nA statement.\n\nA bold statement!\n\nAnother bold statement.\n\nMarkdown compatibility\n\nMarkdown compatible syntax is an optional feature of the AsciiDoc language and is currently only available when using Asciidoctor.\n\nExample 93. Markdown-style headings\n\n# Document Title (Level 0) ## Section Level 1 ### Section Level 2 #### Section Level 3 ##### Section Level 4 ###### Section Level 5\n\nView result of Example 93\n\nDocument Title (Level 0)\n\nSection Level 1\n\nSection Level 2\n\nSection Level 3\n\nSection Level 4\n\nSection Level 5\n\nExample 94. Fenced code block with syntax highlighting\n\n```ruby require 'sinatra' get '/hi' do \"Hello World!\" end ```\n\nView result of Example 94\n\nrequire 'sinatra' get '/hi' do \"Hello World!\" end\n\nExample 95. Markdown-style blockquote\n\n> I hold it that a little rebellion now and then is a good thing, > and as necessary in the political world as storms in the physical. > -- Thomas Jefferson, Papers of Thomas Jefferson: Volume 11\n\nView result of Example 95\n\nExample 96. Markdown-style blockquote with block content\n\n> > What's new? > > I've got Markdown in my AsciiDoc! > > > Like what? > > * Blockquotes > * Headings > * Fenced code blocks > > > Is there more? > > Yep. AsciiDoc and Markdown share a lot of common syntax already.\n\nView result of Example 96\n\nExample 97. Markdown-style thematic breaks\n\n--- - - - *** * * *\n\nView result of Example 97"
    }
}