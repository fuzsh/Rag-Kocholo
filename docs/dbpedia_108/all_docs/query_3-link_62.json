{
    "id": "dbpedia_108_3",
    "rank": 62,
    "data": {
        "url": "https://support.microsoft.com/en-us/topic/why-does-some-text-display-with-square-boxes-in-some-apps-on-windows-10-b078a35f-9709-1780-44c0-8c27a58205a2",
        "read_more_link": "",
        "language": "en",
        "title": "Why does some text display with square boxes in some apps on Windows 10?",
        "top_image": "https://support.microsoft.com/favicon-32x32.png",
        "meta_img": "https://support.microsoft.com/favicon-32x32.png",
        "images": [
            "https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE1Mu3b?ver=5c31",
            "https://support.microsoft.com/images/Facebook-GrayScale.png",
            "https://support.microsoft.com/images/Linkedin-GrayScale.png",
            "https://support.microsoft.com/images/Mail-GrayScale.png",
            "https://support.content.office.net/en-us/media/f4e85874-2a1a-438d-9c3c-17b069c454c0.png",
            "https://support.content.office.net/en-us/media/a9241eee-a729-4513-97b4-5b87c381c21b.png",
            "https://support.content.office.net/en-us/media/9e557d93-f803-44df-a274-1282d542cf63.png",
            "https://support.content.office.net/en-us/media/fbf6e41b-ddbe-43db-a616-7a8e48d43d18.png",
            "https://support.content.office.net/en-us/media/9255871d-06a6-4de5-9236-5fd7af100c5c.png",
            "https://support.content.office.net/en-us/media/ccb7c2a6-17dd-4cc3-88b7-8da966e59f59.png",
            "https://support.content.office.net/en-us/media/bcd2fdf1-530a-482f-b96d-5f2f2a49ac66.png",
            "https://support.content.office.net/en-us/media/f4e85874-2a1a-438d-9c3c-17b069c454c0.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Certain fonts which were formerly packaged in the Windows image are now downloaded from Features on Demand, resulting in a possible regression from Windows 8.1 that is by design. This article explains this feature change and effects and provides separate guidance for end users, OEMs and system administrators, and app developers.  Keywords: DirectWrite, fonts, characters, East Asian languages",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://support.microsoft.com/en-us/topic/why-does-some-text-display-with-square-boxes-in-some-apps-on-windows-10-b078a35f-9709-1780-44c0-8c27a58205a2",
        "text": "Cause\n\nSome key improvements have been made in Windows 10 that affect fonts; more details on this are provided below. A side effect of these changes is that a small subset of existing apps created for earlier versions of Windows or Windows Phone may be affected.\n\nSome fonts that were included in Windows Phone 8.1 are not included in Windows 10 Mobile.\n\nSome fonts that previously were included in every Windows desktop system have been moved into optional font packages, and so may not be present on all Windows 10 desktop systems.\n\nMore details on these changes are provided below. In certain apps, these changes can lead to the “square box” symptoms when displaying certain international text.\n\nAll Windows 10 editions include fonts that provide broad language support, and the Windows platform includes font fallback mechanisms designed to ensure that text in any language always displays with legible glyphs rather than boxes. But some apps may take direct dependencies on particular fonts for displaying certain Unicode characters and do not utilize the font fallback mechanisms provided by Windows. In some cases, these apps have taken direct dependencies on fonts that are not present by default on all Windows 10 systems. Because the font that the app is trying to use is not present on the system, some other font gets used to display the text instead, and that font may not support all of the characters being displayed. When a character is displayed using a font that doesn’t support that character, a default “not defined” glyph from that font is used. The “not defined” glyph in most fonts has the appearance of a rectangular box, or some variation of that.\n\nOverview of key font improvements in Windows 10\n\nA key, high-level goal for Windows 10 was for Windows to be a family of operating systems for different device categories that are all built around a common OS core and a shared app platform — the Universal Windows Platform (UWP). UWP enables apps that are written and built once and that can run on a wide range of devices, from Hololens to Xbox and Surface Hub. One requirement for this converged app platform is to have a set of fonts that are common across all of these device categories. In past releases, there were different sets of fonts that shipped in Windows Phone, Xbox One and Windows desktop client. In Windows 10, there is now a common set of fonts guaranteed to be present on all Windows 10 devices, across all Windows 10 editions and across all device categories and form factors. In addition, this set of common fonts provides comprehensive Unicode support, accommodating thousands of languages from around the world using a small set of fonts that require only limited disk space.\n\nThe set of common, UWP fonts is given in this article:\n\nWindows 10 font list\n\nThe Windows desktop client is typically used on devices with less stringent storage constraints, and so it can accommodate a larger selection of fonts. However, whereas Windows desktop was traditionally used on devices with very large storage capacities, in recent years we have seen new form factors such as low-cost tablets that have more limited storage. Another key, high-level goal for Windows 10 has been to make the Windows desktop client work better than ever on such lower-cost devices.\n\nAs the international language coverage of Windows continued to grow, this meant that more and more international fonts were present on every system, whether or not the user on a given system had actual need for fonts for other languages. However, this added a large number of choices in font-picker controls and dialogs that would have low relevance for a given user. For instance, a Spanish user would be able to choose from dozens of Thai fonts, even though they might never use Thai. Moreover, this also added hundreds of megabytes to the size of every Windows desktop system. In order to reduce the amount of disk space that Windows requires and to improve the relevance of font choices provided to a given user, many Windows fonts have been moved into optional font features.\n\nThese optional font features are organized by different scripts and have language associations, and will get installed automatically based on those language associations. For example, the “Simplified Chinese Supplemental Fonts” feature has fonts used specifically for Simplified Chinese. If the Simplified Chinese version of Windows 10 is installed, then it will already have this optional font feature pre-installed. If a different language version of Windows 10 is installed but a user enables a Simplified Chinese input method, or if they have a profile associated with their Microsoft account that already includes Simplified Chinese and that profile roams onto the device, then the Simplified Chinese Supplemental Fonts feature will automatically be installed via Windows Update.\n\nBy installing optional font packages to match the set of languages actively used on a system, we are able to achieve the best balance between the number of font choices provided and the disk footprint used. But even without any of these optional font features installed, every Windows 10 desktop system still includes the common UWP fonts, ensuring that Windows still has great support for Unicode and for international text, and ensuring that universal Windows apps can have great text display on desktop devices and every other form factor.\n\nDetails on font changes in Windows 10 Mobile\n\nIn order to define the converged, UWP font set using a limited number of fonts, some fonts that were present in Windows Phone 8.1 have been excluded from Windows 10 Mobile:\n\nDengxian, Dengxian Bold\n\nEstrangelo Edessa\n\nKhmer UI, Khmer UI Bold\n\nLao UI, Lao UI Bold\n\nLeelawadee, Leelawadee Bold\n\nLucida Sans Unicode\n\nMicrosoft MHei, Microsoft MHei Bold\n\nMicrosoft NeoGothic, Microsoft NeoGothic Bold\n\nMicrosoft Uighur\n\nSegoe WP, Segoe WP Light, Segoe WP SemiLight, Segoe WP Semibold, Segoe WP Bold, Segoe WP Black\n\nSegoe WP Emoji\n\nTahoma, Tahoma Bold\n\nUrdu Typesetting, Urdu Typesetting Bold\n\nYu Gothic Bold\n\nIf a Windows Phone app directly depends on one of the fonts listed above for displaying certain Unicode characters and does not make use of font fallback mechanisms provided by Windows, the result would be characters displayed as “square box” glyphs.\n\nDetails on font changes in Windows 10 Desktop\n\nAs mentioned above, a number of fonts that previously would have been included in every Windows desktop client system have in Windows 10 been moved into optional font features.\n\nThe following table gives the complete list of the optional font features and representative language associations. Select fonts that have been moved into these packages are listed; these are fonts that were used as shell user interface fonts in previous Windows versions but have since been superseded by newer Windows fonts.\n\nIf an app depends on one of these fonts for displaying certain Unicode characters and does not make use of font fallback mechanisms provided by Windows, and if the optional font package containing that font is not installed on the system (typically because the system and user profiles are not configured to have the associated language enabled), then the result would be characters displayed as “square box” glyphs.\n\nRecommendations for Windows 10 users\n\nIf you experience these symptoms in some apps on Windows 10 desktop, then you can provide feedback to the app developer suggesting that they update their app for Windows 10. In the meantime, you can also install one or more optional font features that the apps may require to function correctly. The steps to do this are as follows:\n\nIf you know the language of the text that is displaying incorrectly and often use that language:\n\nIf you know the language involved, then you can add that language into your user profile, and any associated optional font feature will be automatically installed. (Note: other language-related optional features, such as text prediction or spell checking, may also be installed.)\n\nFrom the Start menu, open Settings.\n\nSelect Time & language.\n\nSelect Region & language.\n\nSelect Add a language.\n\nSelect the particular language.\n\nEnabling optional font features without changing language settings:\n\nIf you don’t know the specific language, or if know the language of the text that is displaying incorrectly but don’t want to add that language into your user profile, you can install any optional font feature without enabling any additional languages.\n\nFrom the Start menu, open Settings.\n\nSelect System.\n\nSelect Apps & features.\n\nSelect Manage optional features.\n\nSelect Add a feature.\n\nSelect any optional font feature from the list.\n\nIf you experience the symptoms described in some Windows Phone apps, then you may want to contact the app developer suggesting that they update their app using the guidance provided here. Note: Windows 10 Mobile does not support any optional font features.\n\nRecommendations for OEMs and System Administrators\n\nIf you are configuring language packs or international settings in Windows 10 deployment images, then you should use the Deployment Image Servicing and Management tool (DISM) to include optional font packages (and other optional, language-related capabilities) associated with the language packs that you add into your images. The following article provides details regarding the optional font capabilities and the associated Windows 10 language pack languages:\n\nFeatures On Demand\n\nSee also this article for an overview on Windows 10 language packs and all optional, language-related capabilities:\n\nAdd languages to Windows images\n\nIf you are a system administrator and know that your scenarios will require fonts from one or more of these optional font capabilities, even if you are not including associated language packs into your deployment images, you can still add any of the font capabilities into your deployment images using DISM.\n\nRecommendations for developers\n\nYour app may be impacted by changes to fonts in Windows 10 if you have a Windows Phone app that has a dependency on one of the fonts that has been excluded from Windows 10 Mobile, or if you have a Windows desktop app that has a dependency on one of the fonts that has been migrated into optional font packages, and if your app does not make use of font fallback mechanisms provided by Windows. Types of apps and app scenarios most likely to be impacted include:\n\nBrowsers or other apps that do complex layout using lower-level graphics APIs that do not provide font fallback (e.g., DrawGlyphRun, ExtTextOut using ETO_GLYPH_INDEX, ScriptTextOut).\n\nGames or other apps that use third-party graphics libraries.\n\nApp scenarios in which text may be displayed involving languages beyond the app’s or Windows’ display language, or other languages used by the user; e.g., Web browsing, receiving text messages or notifications from other users.\n\nIf your app manifests the symptoms described, particularly in the above scenarios, then you should review the fonts upon which your app relies. Please see the following article for fonts recommended for use by apps on Windows 10:\n\nWindows 10 font list\n\nThe fonts listed in that article are guaranteed to be present on all Windows 10 devices.\n\nIf your app uses DirectWrite, then you may want to consider utilizing font fallback mechanisms provided by DirectWrite. Even if you are using lower-level APIs and wish to implement your own font fallback implementation, DirectWrite has APIs that provide default mappings that you can supplement with your own custom mappings. See the following MSDN articles for key APIs:\n\nIDWriteFontFallback\n\nIDWriteFactory2::GetSystemFontFallback\n\nIDWriteFontFallbackBuilder"
    }
}