{
    "id": "dbpedia_2905_1",
    "rank": 73,
    "data": {
        "url": "https://github.com/yt-dlp/yt-dlp",
        "read_more_link": "",
        "language": "en",
        "title": "line audio/video downloader",
        "top_image": "https://repository-images.githubusercontent.com/307260205/b6a8d716-9c7b-40ec-bc44-6422d8b741a0",
        "meta_img": "https://repository-images.githubusercontent.com/307260205/b6a8d716-9c7b-40ec-bc44-6422d8b741a0",
        "images": [
            "https://raw.githubusercontent.com/yt-dlp/yt-dlp/master/.github/banner.svg",
            "https://camo.githubusercontent.com/5851752e7fb23ab309006a49bebbda36206068ca721319a44387f6e12c74bcc7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f79742d646c702f79742d646c703f636f6c6f723d627269676874677265656e266c6162656c3d446f776e6c6f6164267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/340246e46c5aa50acde0582093d8650c201d5c3ff31432a547ea625f700bad6d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d507950692d626c75652e7376673f6c6f676f3d70797069266c6162656c436f6c6f723d353535353535267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/fcf24de49c5054175719d8b0373032f93c70cade72c419e059d4e7a902c87f40/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5f2d446f6e6174652d7265642e7376673f6c6f676f3d67697468756273706f6e736f7273266c6162656c436f6c6f723d353535353535267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/97b858dc47f13fa36b99c2c739e5c8109a7be83dd5a673ade0e1f9bfdc7c8b28/68747470733a2f2f696d672e736869656c64732e696f2f6d61747269782f79742d646c703a6d61747269782e6f72673f636f6c6f723d627269676874677265656e266c6162656c436f6c6f723d353535353535266c6162656c3d266c6f676f3d656c656d656e74267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/1109988478fde199da61a03371b063696936b54ab74c595904d18e0969126fde/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3830373234353635323037323835373631303f636f6c6f723d626c7565266c6162656c436f6c6f723d353535353535266c6162656c3d266c6f676f3d646973636f7264267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/46d75a2da1213603749b700b751133faaa2f0273f7a244f1f59c03835961bc86/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d537570706f727465645f53697465732d627269676874677265656e2e7376673f7374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/17c29febc0d90d291415c8bf76046f16c9a0719a1d3b050e736de26a04abdcae/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d556e6c6963656e73652d626c75652e7376673f7374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/83f60852b3f0d6ca258e7a007a4676bfaa52116433648a6384ed0f31e711dc3d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f79742d646c702f79742d646c702f636f72652e796d6c3f6272616e63683d6d6173746572266c6162656c3d5465737473267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/58734c900c22a66e5ac1f27f68c35c26d84e75f63b5d0bc127fe070d9bc3e153/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f6d2f79742d646c702f79742d646c703f6c6162656c3d636f6d6d697473267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/db6beeb17fd9c7d2383270c773fccdad1a437766289f03436fb05f4b5d8fa550/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f79742d646c702f79742d646c702f6d61737465723f6c6162656c3d267374796c653d666f722d7468652d626164676526646973706c61795f74696d657374616d703d636f6d6d6974746572",
            "https://camo.githubusercontent.com/63ecf7af12736d0267babf4948229c01dae59c8b841cdc773e839b3bbdf5a3c2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d57696e646f77735f7836342d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d77696e646f7773",
            "https://camo.githubusercontent.com/865dac9151fa9d2008237ec68e065b0f6e1fcb8b8ce70371cfdaa93e2d36fab3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e75782f4253442d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6c696e7578",
            "https://camo.githubusercontent.com/c33c790c79e8f8dba5008c6c64889545e8ceda8498a28c57861e4616f888ae77/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4d61634f532d6c69676874626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6170706c65",
            "https://camo.githubusercontent.com/340246e46c5aa50acde0582093d8650c201d5c3ff31432a547ea625f700bad6d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d507950692d626c75652e7376673f6c6f676f3d70797069266c6162656c436f6c6f723d353535353535267374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/5a7ac5ccd2b6bb48d83961ae30d47499ff71fc4b756f282f69788df2e3955fc9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d536f757263655f7461722d677265656e2e7376673f7374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/e11ec04801418b1dc64e24ad6ca13f5798377cef752ea55bef5b643df91532e7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4f746865722d677265792e7376673f7374796c653d666f722d7468652d6261646765",
            "https://camo.githubusercontent.com/b17a68becc3b701f91c81d791ae7b37795b800d49367bdc308872cc0614c8f0b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d416c6c5f56657273696f6e732d6c69676874677265792e7376673f7374796c653d666f722d7468652d6261646765",
            "https://avatars.githubusercontent.com/u/21150062?s=64&v=4",
            "https://avatars.githubusercontent.com/u/122532503?s=64&v=4",
            "https://avatars.githubusercontent.com/u/44246449?s=64&v=4",
            "https://avatars.githubusercontent.com/u/12186565?s=64&v=4",
            "https://avatars.githubusercontent.com/u/95089531?s=64&v=4",
            "https://avatars.githubusercontent.com/u/169068048?s=64&v=4",
            "https://avatars.githubusercontent.com/u/64910295?s=64&v=4",
            "https://avatars.githubusercontent.com/u/170661179?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1908898?s=64&v=4",
            "https://avatars.githubusercontent.com/u/779568?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6623388?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10879694?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1239727?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1937689?s=64&v=4",
            "https://avatars.githubusercontent.com/u/88596187?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4406639?s=64&v=4",
            "https://avatars.githubusercontent.com/u/53487?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1225294?s=64&v=4",
            "https://avatars.githubusercontent.com/u/27879174?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10355528?s=64&v=4",
            "https://avatars.githubusercontent.com/u/37424085?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4618135?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "yt-dlp"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "A feature-rich command-line audio/video downloader - yt-dlp/yt-dlp",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/yt-dlp/yt-dlp",
        "text": "yt-dlp is a feature-rich command-line audio/video downloader with support for thousands of sites. The project is a fork of youtube-dl based on the now inactive youtube-dlc.\n\nINSTALLATION\n\nDetailed instructions\n\nRelease Files\n\nUpdate\n\nDependencies\n\nCompile\n\nUSAGE AND OPTIONS\n\nGeneral Options\n\nNetwork Options\n\nGeo-restriction\n\nVideo Selection\n\nDownload Options\n\nFilesystem Options\n\nThumbnail Options\n\nInternet Shortcut Options\n\nVerbosity and Simulation Options\n\nWorkarounds\n\nVideo Format Options\n\nSubtitle Options\n\nAuthentication Options\n\nPost-processing Options\n\nSponsorBlock Options\n\nExtractor Options\n\nCONFIGURATION\n\nConfiguration file encoding\n\nAuthentication with netrc\n\nNotes about environment variables\n\nOUTPUT TEMPLATE\n\nOutput template examples\n\nFORMAT SELECTION\n\nFiltering Formats\n\nSorting Formats\n\nFormat Selection examples\n\nMODIFYING METADATA\n\nModifying metadata examples\n\nEXTRACTOR ARGUMENTS\n\nPLUGINS\n\nInstalling Plugins\n\nDeveloping Plugins\n\nEMBEDDING YT-DLP\n\nEmbedding examples\n\nCHANGES FROM YOUTUBE-DL\n\nNew features\n\nDifferences in default behavior\n\nDeprecated options\n\nCONTRIBUTING\n\nOpening an Issue\n\nDeveloper Instructions\n\nWIKI\n\nFAQ\n\nYou can install yt-dlp using the binaries, pip or one using a third-party package manager. See the wiki for detailed instructions\n\nFile Description yt-dlp Platform-independent zipimport binary. Needs Python (recommended for Linux/BSD) yt-dlp.exe Windows (Win7 SP1+) standalone x64 binary (recommended for Windows) yt-dlp_macos Universal MacOS (10.15+) standalone executable (recommended for MacOS)\n\nFile Description yt-dlp_x86.exe Windows (Win7 SP1+) standalone x86 (32-bit) binary yt-dlp_min.exe Windows (Win7 SP1+) standalone x64 binary built with py2exe\n\n(Not recommended) yt-dlp_linux Linux standalone x64 binary yt-dlp_linux_armv7l Linux standalone armv7l (32-bit) binary yt-dlp_linux_aarch64 Linux standalone aarch64 (64-bit) binary yt-dlp_win.zip Unpackaged Windows executable (no auto-update) yt-dlp_macos.zip Unpackaged MacOS (10.15+) executable (no auto-update) yt-dlp_macos_legacy MacOS (10.9+) standalone x64 executable\n\nFile Description yt-dlp.tar.gz Source tarball SHA2-512SUMS GNU-style SHA512 sums SHA2-512SUMS.sig GPG signature file for SHA512 sums SHA2-256SUMS GNU-style SHA256 sums SHA2-256SUMS.sig GPG signature file for SHA256 sums\n\nThe public key that can be used to verify the GPG signatures is available here Example usage:\n\nNote: The manpages, shell completion (autocomplete) files etc. are available inside the source tarball\n\nUPDATE\n\nYou can use yt-dlp -U to update if you are using the release binaries\n\nIf you installed with pip, simply re-run the same command that was used to install the program\n\nFor other third-party package managers, see the wiki or refer to their documentation\n\nThere are currently three release channels for binaries: stable, nightly and master.\n\nstable is the default channel, and many of its changes have been tested by users of the nightly and master channels.\n\nThe nightly channel has releases scheduled to build every day around midnight UTC, for a snapshot of the project's new patches and changes. This is the recommended channel for regular users of yt-dlp. The nightly releases are available from yt-dlp/yt-dlp-nightly-builds or as development releases of the yt-dlp PyPI package (which can be installed with pip's --pre flag).\n\nThe master channel features releases that are built after each push to the master branch, and these will have the very latest fixes and additions, but may also be more prone to regressions. They are available from yt-dlp/yt-dlp-master-builds.\n\nWhen using --update/-U, a release binary will only update to its current channel. --update-to CHANNEL can be used to switch to a different channel when a newer version is available. --update-to [CHANNEL@]TAG can also be used to upgrade or downgrade to specific tags from a channel.\n\nYou may also use --update-to <repository> (<owner>/<repository>) to update to a channel on a completely different repository. Be careful with what repository you are updating to though, there is no verification done for binaries from different repositories.\n\nExample usage:\n\nyt-dlp --update-to master switch to the master channel and update to its latest release\n\nyt-dlp --update-to stable@2023.07.06 upgrade/downgrade to release to stable channel tag 2023.07.06\n\nyt-dlp --update-to 2023.10.07 upgrade/downgrade to tag 2023.10.07 if it exists on the current channel\n\nyt-dlp --update-to example/yt-dlp@2023.09.24 upgrade/downgrade to the release from the example/yt-dlp repository, tag 2023.09.24\n\nImportant: Any user experiencing an issue with the stable release should install or update to the nightly release before submitting a bug report:\n\nPython versions 3.8+ (CPython and PyPy) are supported. Other versions and implementations may or may not work correctly.\n\nWhile all the other dependencies are optional, ffmpeg and ffprobe are highly recommended\n\nffmpeg and ffprobe - Required for merging separate video and audio files, as well as for various post-processing tasks. License depends on the build\n\nThere are bugs in ffmpeg that cause various issues when used alongside yt-dlp. Since ffmpeg is such an important dependency, we provide custom builds with patches for some of these issues at yt-dlp/FFmpeg-Builds. See the readme for details on the specific issues solved by these builds\n\nImportant: What you need is ffmpeg binary, NOT the Python package of the same name\n\ncertifi* - Provides Mozilla's root certificate bundle. Licensed under MPLv2\n\nbrotli* or brotlicffi - Brotli content encoding support. Both licensed under MIT 1 2\n\nwebsockets* - For downloading over websocket. Licensed under BSD-3-Clause\n\nrequests* - HTTP library. For HTTPS proxy and persistent connections support. Licensed under Apache-2.0\n\nThe following provide support for impersonating browser requests. This may be required for some sites that employ TLS fingerprinting.\n\ncurl_cffi (recommended) - Python binding for curl-impersonate. Provides impersonation targets for Chrome, Edge and Safari. Licensed under MIT\n\nCan be installed with the curl-cffi group, e.g. pip install \"yt-dlp[default,curl-cffi]\"\n\nCurrently included in yt-dlp.exe, yt-dlp_linux and yt-dlp_macos builds\n\nmutagen* - For --embed-thumbnail in certain formats. Licensed under GPLv2+\n\nAtomicParsley - For --embed-thumbnail in mp4/m4a files when mutagen/ffmpeg cannot. Licensed under GPLv2+\n\nxattr, pyxattr or setfattr - For writing xattr metadata (--xattr) on Mac and BSD. Licensed under MIT, LGPL2.1 and GPLv2+ respectively\n\npycryptodomex* - For decrypting AES-128 HLS streams and various other data. Licensed under BSD-2-Clause\n\nphantomjs - Used in extractors where javascript needs to be run. Licensed under BSD-3-Clause\n\nsecretstorage* - For --cookies-from-browser to access the Gnome keyring while decrypting cookies of Chromium-based browsers on Linux. Licensed under BSD-3-Clause\n\nAny external downloader that you want to use with --downloader\n\navconv and avprobe - Now deprecated alternative to ffmpeg. License depends on the build\n\nsponskrub - For using the now deprecated sponskrub options. Licensed under GPLv3+\n\nrtmpdump - For downloading rtmp streams. ffmpeg can be used instead with --downloader ffmpeg. Licensed under GPLv2+\n\nmplayer or mpv - For downloading rstp/mms streams. ffmpeg can be used instead with --downloader ffmpeg. Licensed under GPLv2+\n\nTo use or redistribute the dependencies, you must agree to their respective licensing terms.\n\nThe standalone release binaries are built with the Python interpreter and the packages marked with * included.\n\nIf you do not have the necessary dependencies for a task you are attempting, yt-dlp will warn you. All the currently available dependencies are visible at the top of the --verbose output\n\nTo build the standalone executable, you must have Python and pyinstaller (plus any of yt-dlp's optional dependencies if needed). The executable will be built for the same CPU architecture as the Python used.\n\nYou can run the following commands:\n\nOn some systems, you may need to use py or python instead of python3.\n\npython -m bundle.pyinstaller accepts any arguments that can be passed to pyinstaller, such as --onefile/-F or --onedir/-D, which is further documented here.\n\nNote: Pyinstaller versions below 4.4 do not support Python installed from the Windows store without using a virtual environment.\n\nImportant: Running pyinstaller directly instead of using python -m bundle.pyinstaller is not officially supported. This may or may not work correctly.\n\nYou will need the build tools python (3.8+), zip, make (GNU), pandoc* and pytest*.\n\nAfter installing these, simply run make.\n\nYou can also run make yt-dlp instead to compile only the binary without updating any of the additional files. (The build tools marked with * are not needed for this)\n\nWhile we provide the option to build with py2exe, it is recommended to build using PyInstaller instead since the py2exe builds cannot contain pycryptodomex/certifi/requests and need VC++14 on the target computer to run.\n\nIf you wish to build it anyway, install Python (if it is not already installed) and you can run the following commands:\n\nRelated scripts\n\ndevscripts/install_deps.py - Install dependencies for yt-dlp.\n\ndevscripts/update-version.py - Update the version number based on the current date.\n\ndevscripts/set-variant.py - Set the build variant of the executable.\n\ndevscripts/make_changelog.py - Create a markdown changelog using short commit messages and update CONTRIBUTORS file.\n\ndevscripts/make_lazy_extractors.py - Create lazy extractors. Running this before building the binaries (any variant) will improve their startup performance. Set the environment variable YTDLP_NO_LAZY_EXTRACTORS=1 if you wish to forcefully disable lazy extractor loading.\n\nNote: See their --help for more info.\n\nIf you fork the project on GitHub, you can run your fork's build workflow to automatically build the selected version(s) as artifacts. Alternatively, you can run the release workflow or enable the nightly workflow to create full (pre-)releases.\n\nCtrl+F is your friend :D\n\nSponsorBlock Options:\n\nMake chapter entries for, or remove various segments (sponsor, introductions, etc.) from downloaded YouTube videos using the SponsorBlock API\n\nYou can configure yt-dlp by placing any supported command line option to a configuration file. The configuration is loaded from the following locations:\n\nMain Configuration:\n\nThe file given to --config-location\n\nPortable Configuration: (Recommended for portable installations)\n\nIf using a binary, yt-dlp.conf in the same directory as the binary\n\nIf running from source-code, yt-dlp.conf in the parent directory of yt_dlp\n\nHome Configuration:\n\nyt-dlp.conf in the home path given to -P\n\nIf -P is not given, the current directory is searched\n\nUser Configuration:\n\n${XDG_CONFIG_HOME}/yt-dlp.conf\n\n${XDG_CONFIG_HOME}/yt-dlp/config (recommended on Linux/macOS)\n\n${XDG_CONFIG_HOME}/yt-dlp/config.txt\n\n${APPDATA}/yt-dlp.conf\n\n${APPDATA}/yt-dlp/config (recommended on Windows)\n\n${APPDATA}/yt-dlp/config.txt\n\n~/yt-dlp.conf\n\n~/yt-dlp.conf.txt\n\n~/.yt-dlp/config\n\n~/.yt-dlp/config.txt\n\nSee also: Notes about environment variables\n\nSystem Configuration:\n\n/etc/yt-dlp.conf\n\n/etc/yt-dlp/config\n\n/etc/yt-dlp/config.txt\n\nE.g. with the following configuration file, yt-dlp will always extract the audio, not copy the mtime, use a proxy and save all videos under YouTube directory in your home directory:\n\nNote: Options in configuration file are just the same options aka switches used in regular command line calls; thus there must be no whitespace after - or --, e.g. -o or --proxy but not - o or -- proxy. They must also be quoted when necessary, as if it were a UNIX shell.\n\nYou can use --ignore-config if you want to disable all configuration files for a particular yt-dlp run. If --ignore-config is found inside any configuration file, no further configuration will be loaded. For example, having the option in the portable configuration file prevents loading of home, user, and system configurations. Additionally, (for backward compatibility) if --ignore-config is found inside the system configuration file, the user configuration is not loaded.\n\nThe configuration files are decoded according to the UTF BOM if present, and in the encoding from system locale otherwise.\n\nIf you want your file to be decoded differently, add # coding: ENCODING to the beginning of the file (e.g. # coding: shift-jis). There must be no characters before that, even spaces or BOM.\n\nYou may also want to configure automatic credentials storage for extractors that support authentication (by providing login and password with --username and --password) in order not to pass credentials as command line arguments on every yt-dlp execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a .netrc file on a per-extractor basis. For that, you will need to create a .netrc file in --netrc-location and restrict permissions to read/write by only you:\n\nAfter that, you can add credentials for an extractor in the following format, where extractor is the name of the extractor in lowercase:\n\nE.g.\n\nTo activate authentication with the .netrc file you should pass --netrc to yt-dlp or place it in the configuration file.\n\nThe default location of the .netrc file is ~ (see below).\n\nAs an alternative to using the .netrc file, which has the disadvantage of keeping your passwords in a plain text file, you can configure a custom shell command to provide the credentials for an extractor. This is done by providing the --netrc-cmd parameter, it shall output the credentials in the netrc format and return 0 on success, other values will be treated as an error. {} in the command will be replaced by the name of the extractor to make it possible to select the credentials for the right extractor.\n\nE.g. To use an encrypted .netrc file stored as .authinfo.gpg\n\nEnvironment variables are normally specified as ${VARIABLE}/$VARIABLE on UNIX and %VARIABLE% on Windows; but is always shown as ${VARIABLE} in this documentation\n\nyt-dlp also allow using UNIX-style variables on Windows for path-like options; e.g. --output, --config-location\n\nIf unset, ${XDG_CONFIG_HOME} defaults to ~/.config and ${XDG_CACHE_HOME} to ~/.cache\n\nOn Windows, ~ points to ${HOME} if present; or, ${USERPROFILE} or ${HOMEDRIVE}${HOMEPATH} otherwise\n\nOn Windows, ${USERPROFILE} generally points to C:\\Users\\<user name> and ${APPDATA} to ${USERPROFILE}\\AppData\\Roaming\n\nThe -o option is used to indicate a template for the output file names while -P option is used to specify the path each type of file should be saved to.\n\ntl;dr: navigate me to examples.\n\nThe simplest usage of -o is not to set any template arguments when downloading a single file, like in yt-dlp -o funny_video.flv \"https://some/video\" (hard-coding file extension like this is not recommended and could break some post-processing).\n\nIt may however also contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to Python string formatting operations, e.g. %(NAME)s or %(NAME)05d. To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations.\n\nThe field names themselves (the part inside the parenthesis) can also have some special formatting:\n\nObject traversal: The dictionaries and lists available in metadata can be traversed by using a dot . separator; e.g. %(tags.0)s, %(subtitles.en.-1.ext)s. You can do Python slicing with colon :; E.g. %(id.3:7)s, %(id.6:2:-1)s, %(formats.:.format_id)s. Curly braces {} can be used to build dictionaries with only specific keys; e.g. %(formats.:.{format_id,height})#j. An empty field name %()s refers to the entire infodict; e.g. %(.{id,title})s. Note that all the fields that become available using this method are not listed below. Use -j to see such fields\n\nArithmetic: Simple arithmetic can be done on numeric fields using +, - and *. E.g. %(playlist_index+10)03d, %(n_entries+1-playlist_index)d\n\nDate/time Formatting: Date/time fields can be formatted according to strftime formatting by specifying it separated from the field name using a >. E.g. %(duration>%H-%M-%S)s, %(upload_date>%Y-%m-%d)s, %(epoch-3600>%H-%M-%S)s\n\nAlternatives: Alternate fields can be specified separated with a ,. E.g. %(release_date>%Y,upload_date>%Y|Unknown)s\n\nReplacement: A replacement value can be specified using a & separator according to the str.format mini-language. If the field is not empty, this replacement value will be used instead of the actual field content. This is done after alternate fields are considered; thus the replacement is used if any of the alternative fields is not empty. E.g. %(chapters&has chapters|no chapters)s, %(title&TITLE={:>20}|NO TITLE)s\n\nDefault: A literal default value can be specified for when the field is empty using a | separator. This overrides --output-na-placeholder. E.g. %(uploader|Unknown)s\n\nMore Conversions: In addition to the normal format types diouxXeEfFgGcrs, yt-dlp additionally supports converting to B = Bytes, j = json (flag # for pretty-printing, + for Unicode), h = HTML escaping, l = a comma separated list (flag # for \\n newline-separated), q = a string quoted for the terminal (flag # to split a list into different arguments), D = add Decimal suffixes (e.g. 10M) (flag # to use 1024 as factor), and S = Sanitize as filename (flag # for restricted)\n\nUnicode normalization: The format type U can be used for NFC Unicode normalization. The alternate form flag (#) changes the normalization to NFD and the conversion flag + can be used for NFKC/NFKD compatibility equivalence normalization. E.g. %(title)+.100U is NFKC\n\nTo summarize, the general syntax for a field is:\n\nAdditionally, you can set different output templates for the various metadata files separately from the general output template by specifying the type of file followed by the template separated by a colon :. The different file types supported are subtitle, thumbnail, description, annotation (deprecated), infojson, link, pl_thumbnail, pl_description, pl_infojson, chapter, pl_video. E.g. -o \"%(title)s.%(ext)s\" -o \"thumbnail:%(title)s\\%(title)s.%(ext)s\" will put the thumbnails in a folder with the same name as the video. If any of the templates is empty, that type of file will not be written. E.g. --write-thumbnail -o \"thumbnail:\" will write thumbnails only for playlists and not for video.\n\nNote: Due to post-processing (i.e. merging etc.), the actual output filename might differ. Use --print after_move:filepath to get the name after all post-processing is complete.\n\nThe available fields are:\n\nid (string): Video identifier\n\ntitle (string): Video title\n\nfulltitle (string): Video title ignoring live timestamp and generic title\n\next (string): Video filename extension\n\nalt_title (string): A secondary title of the video\n\ndescription (string): The description of the video\n\ndisplay_id (string): An alternative identifier for the video\n\nuploader (string): Full name of the video uploader\n\nuploader_id (string): Nickname or id of the video uploader\n\nuploader_url (string): URL to the video uploader's profile\n\nlicense (string): License name the video is licensed under\n\ncreators (list): The creators of the video\n\ncreator (string): The creators of the video; comma-separated\n\ntimestamp (numeric): UNIX timestamp of the moment the video became available\n\nupload_date (string): Video upload date in UTC (YYYYMMDD)\n\nrelease_timestamp (numeric): UNIX timestamp of the moment the video was released\n\nrelease_date (string): The date (YYYYMMDD) when the video was released in UTC\n\nrelease_year (numeric): Year (YYYY) when the video or album was released\n\nmodified_timestamp (numeric): UNIX timestamp of the moment the video was last modified\n\nmodified_date (string): The date (YYYYMMDD) when the video was last modified in UTC\n\nchannel (string): Full name of the channel the video is uploaded on\n\nchannel_id (string): Id of the channel\n\nchannel_url (string): URL of the channel\n\nchannel_follower_count (numeric): Number of followers of the channel\n\nchannel_is_verified (boolean): Whether the channel is verified on the platform\n\nlocation (string): Physical location where the video was filmed\n\nduration (numeric): Length of the video in seconds\n\nduration_string (string): Length of the video (HH:mm:ss)\n\nview_count (numeric): How many users have watched the video on the platform\n\nconcurrent_view_count (numeric): How many users are currently watching the video on the platform.\n\nlike_count (numeric): Number of positive ratings of the video\n\ndislike_count (numeric): Number of negative ratings of the video\n\nrepost_count (numeric): Number of reposts of the video\n\naverage_rating (numeric): Average rating give by users, the scale used depends on the webpage\n\ncomment_count (numeric): Number of comments on the video (For some extractors, comments are only downloaded at the end, and so this field cannot be used)\n\nage_limit (numeric): Age restriction for the video (years)\n\nlive_status (string): One of \"not_live\", \"is_live\", \"is_upcoming\", \"was_live\", \"post_live\" (was live, but VOD is not yet processed)\n\nis_live (boolean): Whether this video is a live stream or a fixed-length video\n\nwas_live (boolean): Whether this video was originally a live stream\n\nplayable_in_embed (string): Whether this video is allowed to play in embedded players on other sites\n\navailability (string): Whether the video is \"private\", \"premium_only\", \"subscriber_only\", \"needs_auth\", \"unlisted\" or \"public\"\n\nmedia_type (string): The type of media as classified by the site, e.g. \"episode\", \"clip\", \"trailer\"\n\nstart_time (numeric): Time in seconds where the reproduction should start, as specified in the URL\n\nend_time (numeric): Time in seconds where the reproduction should end, as specified in the URL\n\nextractor (string): Name of the extractor\n\nextractor_key (string): Key name of the extractor\n\nepoch (numeric): Unix epoch of when the information extraction was completed\n\nautonumber (numeric): Number that will be increased with each download, starting at --autonumber-start, padded with leading zeros to 5 digits\n\nvideo_autonumber (numeric): Number that will be increased with each video\n\nn_entries (numeric): Total number of extracted items in the playlist\n\nplaylist_id (string): Identifier of the playlist that contains the video\n\nplaylist_title (string): Name of the playlist that contains the video\n\nplaylist (string): playlist_title if available or else playlist_id\n\nplaylist_count (numeric): Total number of items in the playlist. May not be known if entire playlist is not extracted\n\nplaylist_index (numeric): Index of the video in the playlist padded with leading zeros according the final index\n\nplaylist_autonumber (numeric): Position of the video in the playlist download queue padded with leading zeros according to the total length of the playlist\n\nplaylist_uploader (string): Full name of the playlist uploader\n\nplaylist_uploader_id (string): Nickname or id of the playlist uploader\n\nplaylist_channel (string): Display name of the channel that uploaded the playlist\n\nplaylist_channel_id (string): Identifier of the channel that uploaded the playlist\n\nwebpage_url (string): A URL to the video webpage which, if given to yt-dlp, should yield the same result again\n\nwebpage_url_basename (string): The basename of the webpage URL\n\nwebpage_url_domain (string): The domain of the webpage URL\n\noriginal_url (string): The URL given by the user (or same as webpage_url for playlist entries)\n\ncategories (list): List of categories the video belongs to\n\ntags (list): List of tags assigned to the video\n\ncast (list): List of cast members\n\nAll the fields in Filtering Formats can also be used\n\nAvailable for the video that belongs to some logical chapter or section:\n\nchapter (string): Name or title of the chapter the video belongs to\n\nchapter_number (numeric): Number of the chapter the video belongs to\n\nchapter_id (string): Id of the chapter the video belongs to\n\nAvailable for the video that is an episode of some series or program:\n\nseries (string): Title of the series or program the video episode belongs to\n\nseries_id (string): Id of the series or program the video episode belongs to\n\nseason (string): Title of the season the video episode belongs to\n\nseason_number (numeric): Number of the season the video episode belongs to\n\nseason_id (string): Id of the season the video episode belongs to\n\nepisode (string): Title of the video episode\n\nepisode_number (numeric): Number of the video episode within a season\n\nepisode_id (string): Id of the video episode\n\nAvailable for the media that is a track or a part of a music album:\n\ntrack (string): Title of the track\n\ntrack_number (numeric): Number of the track within an album or a disc\n\ntrack_id (string): Id of the track\n\nartists (list): Artist(s) of the track\n\nartist (string): Artist(s) of the track; comma-separated\n\ngenres (list): Genre(s) of the track\n\ngenre (string): Genre(s) of the track; comma-separated\n\ncomposers (list): Composer(s) of the piece\n\ncomposer (string): Composer(s) of the piece; comma-separated\n\nalbum (string): Title of the album the track belongs to\n\nalbum_type (string): Type of the album\n\nalbum_artists (list): All artists appeared on the album\n\nalbum_artist (string): All artists appeared on the album; comma-separated\n\ndisc_number (numeric): Number of the disc or other physical medium the track belongs to\n\nAvailable only when using --download-sections and for chapter: prefix when using --split-chapters for videos with internal chapters:\n\nsection_title (string): Title of the chapter\n\nsection_number (numeric): Number of the chapter within the file\n\nsection_start (numeric): Start time of the chapter in seconds\n\nsection_end (numeric): End time of the chapter in seconds\n\nAvailable only when used in --print:\n\nurls (string): The URLs of all requested formats, one in each line\n\nfilename (string): Name of the video file. Note that the actual filename may differ\n\nformats_table (table): The video format table as printed by --list-formats\n\nthumbnails_table (table): The thumbnail format table as printed by --list-thumbnails\n\nsubtitles_table (table): The subtitle format table as printed by --list-subs\n\nautomatic_captions_table (table): The automatic subtitle format table as printed by --list-subs\n\nAvailable only after the video is downloaded (post_process/after_move):\n\nfilepath: Actual path of downloaded video file\n\nAvailable only in --sponsorblock-chapter-title:\n\nstart_time (numeric): Start time of the chapter in seconds\n\nend_time (numeric): End time of the chapter in seconds\n\ncategories (list): The SponsorBlock categories the chapter belongs to\n\ncategory (string): The smallest SponsorBlock category the chapter belongs to\n\ncategory_names (list): Friendly names of the categories\n\nname (string): Friendly name of the smallest category\n\ntype (string): The SponsorBlock action type of the chapter\n\nEach aforementioned sequence when referenced in an output template will be replaced by the actual value corresponding to the sequence name. E.g. for -o %(title)s-%(id)s.%(ext)s and an mp4 video with title yt-dlp test video and id BaW_jenozKc, this will result in a yt-dlp test video-BaW_jenozKc.mp4 file created in the current directory.\n\nNote: Some of the sequences are not guaranteed to be present, since they depend on the metadata obtained by a particular extractor. Such sequences will be replaced with placeholder value provided with --output-na-placeholder (NA by default).\n\nTip: Look at the -j output to identify which fields are available for the particular URL\n\nFor numeric sequences you can use numeric related formatting; e.g. %(view_count)05d will result in a string with view count padded with zeros up to 5 characters, like in 00042.\n\nOutput templates can also contain arbitrary hierarchical path, e.g. -o \"%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s\" which will result in downloading each video in a directory corresponding to this path template. Any missing directory will be automatically created for you.\n\nTo use percent literals in an output template use %%. To output to stdout use -o -.\n\nThe current default template is %(title)s [%(id)s].%(ext)s.\n\nIn some cases, you don't want special characters such as 中, spaces, or &, such as when transferring the downloaded filename to a Windows system or the filename through an 8bit-unsafe channel. In these cases, add the --restrict-filenames flag to get a shorter title.\n\nBy default, yt-dlp tries to download the best available quality if you don't pass any options. This is generally equivalent to using -f bestvideo*+bestaudio/best. However, if multiple audiostreams is enabled (--audio-multistreams), the default format changes to -f bestvideo+bestaudio/best. Similarly, if ffmpeg is unavailable, or if you use yt-dlp to stream to stdout (-o -), the default becomes -f best/bestvideo+bestaudio.\n\nDeprecation warning: Latest versions of yt-dlp can stream multiple formats to the stdout simultaneously using ffmpeg. So, in future versions, the default for this will be set to -f bv*+ba/b similar to normal downloads. If you want to preserve the -f b/bv+ba setting, it is recommended to explicitly specify it in the configuration options.\n\nThe general syntax for format selection is -f FORMAT (or --format FORMAT) where FORMAT is a selector expression, i.e. an expression that describes format or formats you would like to download.\n\ntl;dr: navigate me to examples.\n\nThe simplest case is requesting a specific format; e.g. with -f 22 you can download the format with format code equal to 22. You can get the list of available format codes for particular video using --list-formats or -F. Note that these format codes are extractor specific.\n\nYou can also use a file extension (currently 3gp, aac, flv, m4a, mp3, mp4, ogg, wav, webm are supported) to download the best quality format of a particular file extension served as a single file, e.g. -f webm will download the best quality format with the webm extension served as a single file.\n\nYou can use -f - to interactively provide the format selector for each video\n\nYou can also use special names to select particular edge case formats:\n\nall: Select all formats separately\n\nmergeall: Select and merge all formats (Must be used with --audio-multistreams, --video-multistreams or both)\n\nb*, best*: Select the best quality format that contains either a video or an audio or both (i.e.; vcodec!=none or acodec!=none)\n\nb, best: Select the best quality format that contains both video and audio. Equivalent to best*[vcodec!=none][acodec!=none]\n\nbv, bestvideo: Select the best quality video-only format. Equivalent to best*[acodec=none]\n\nbv*, bestvideo*: Select the best quality format that contains video. It may also contain audio. Equivalent to best*[vcodec!=none]\n\nba, bestaudio: Select the best quality audio-only format. Equivalent to best*[vcodec=none]\n\nba*, bestaudio*: Select the best quality format that contains audio. It may also contain video. Equivalent to best*[acodec!=none] (Do not use!)\n\nw*, worst*: Select the worst quality format that contains either a video or an audio\n\nw, worst: Select the worst quality format that contains both video and audio. Equivalent to worst*[vcodec!=none][acodec!=none]\n\nwv, worstvideo: Select the worst quality video-only format. Equivalent to worst*[acodec=none]\n\nwv*, worstvideo*: Select the worst quality format that contains video. It may also contain audio. Equivalent to worst*[vcodec!=none]\n\nwa, worstaudio: Select the worst quality audio-only format. Equivalent to worst*[vcodec=none]\n\nwa*, worstaudio*: Select the worst quality format that contains audio. It may also contain video. Equivalent to worst*[acodec!=none]\n\nFor example, to download the worst quality video-only format you can use -f worstvideo. It is, however, recommended not to use worst and related options. When your format selector is worst, the format which is worst in all respects is selected. Most of the time, what you actually want is the video with the smallest filesize instead. So it is generally better to use -S +size or more rigorously, -S +size,+br,+res,+fps instead of -f worst. See Sorting Formats for more details.\n\nYou can select the n'th best format of a type by using best<type>.<n>. For example, best.2 will select the 2nd best combined format. Similarly, bv*.3 will select the 3rd best format that contains a video stream.\n\nIf you want to download multiple videos, and they don't have the same formats available, you can specify the order of preference using slashes. Note that formats on the left hand side are preferred; e.g. -f 22/17/18 will download format 22 if it's available, otherwise it will download format 17 if it's available, otherwise it will download format 18 if it's available, otherwise it will complain that no suitable formats are available for download.\n\nIf you want to download several formats of the same video use a comma as a separator, e.g. -f 22,17,18 will download all these three formats, of course if they are available. Or a more sophisticated example combined with the precedence feature: -f 136/137/mp4/bestvideo,140/m4a/bestaudio.\n\nYou can merge the video and audio of multiple formats into a single file using -f <format1>+<format2>+... (requires ffmpeg installed); e.g. -f bestvideo+bestaudio will download the best video-only format, the best audio-only format and mux them together with ffmpeg.\n\nDeprecation warning: Since the below described behavior is complex and counter-intuitive, this will be removed and multistreams will be enabled by default in the future. A new operator will be instead added to limit formats to single audio/video\n\nUnless --video-multistreams is used, all formats with a video stream except the first one are ignored. Similarly, unless --audio-multistreams is used, all formats with an audio stream except the first one are ignored. E.g. -f bestvideo+best+bestaudio --video-multistreams --audio-multistreams will download and merge all 3 given formats. The resulting file will have 2 video streams and 2 audio streams. But -f bestvideo+best+bestaudio --no-video-multistreams will download and merge only bestvideo and bestaudio. best is ignored since another format containing a video stream (bestvideo) has already been selected. The order of the formats is therefore important. -f best+bestaudio --no-audio-multistreams will download only best while -f bestaudio+best --no-audio-multistreams will ignore best and download only bestaudio.\n\nYou can also filter the video formats by putting a condition in brackets, as in -f \"best[height=720]\" (or -f \"[filesize>10M]\" since filters without a selector are interpreted as best).\n\nThe following numeric meta fields can be used with comparisons <, <=, >, >=, = (equals), != (not equals):\n\nfilesize: The number of bytes, if known in advance\n\nfilesize_approx: An estimate for the number of bytes\n\nwidth: Width of the video, if known\n\nheight: Height of the video, if known\n\naspect_ratio: Aspect ratio of the video, if known\n\ntbr: Average bitrate of audio and video in kbps\n\nabr: Average audio bitrate in kbps\n\nvbr: Average video bitrate in kbps\n\nasr: Audio sampling rate in Hertz\n\nfps: Frame rate\n\naudio_channels: The number of audio channels\n\nstretched_ratio: width:height of the video's pixels, if not square\n\nAlso filtering work for comparisons = (equals), ^= (starts with), $= (ends with), *= (contains), ~= (matches regex) and following string meta fields:\n\nurl: Video URL\n\next: File extension\n\nacodec: Name of the audio codec in use\n\nvcodec: Name of the video codec in use\n\ncontainer: Name of the container format\n\nprotocol: The protocol that will be used for the actual download, lower-case (http, https, rtsp, rtmp, rtmpe, mms, f4m, ism, http_dash_segments, m3u8, or m3u8_native)\n\nlanguage: Language code\n\ndynamic_range: The dynamic range of the video\n\nformat_id: A short description of the format\n\nformat: A human-readable description of the format\n\nformat_note: Additional info about the format\n\nresolution: Textual description of width and height\n\nAny string comparison may be prefixed with negation ! in order to produce an opposite comparison, e.g. !*= (does not contain). The comparand of a string comparison needs to be quoted with either double or single quotes if it contains spaces or special characters other than ._-.\n\nNote: None of the aforementioned meta fields are guaranteed to be present since this solely depends on the metadata obtained by the particular extractor, i.e. the metadata offered by the website. Any other field made available by the extractor can also be used for filtering.\n\nFormats for which the value is not known are excluded unless you put a question mark (?) after the operator. You can combine format filters, so -f \"bv[height<=?720][tbr>500]\" selects up to 720p videos (or videos where the height is not known) with a bitrate of at least 500 kbps. You can also use the filters with all to download all formats that satisfy the filter, e.g. -f \"all[vcodec=none]\" selects all audio-only formats.\n\nFormat selectors can also be grouped using parentheses; e.g. -f \"(mp4,webm)[height<480]\" will download the best pre-merged mp4 and webm formats with a height lower than 480.\n\nYou can change the criteria for being considered the best by using -S (--format-sort). The general format for this is --format-sort field1,field2....\n\nThe available fields are:\n\nhasvid: Gives priority to formats that have a video stream\n\nhasaud: Gives priority to formats that have an audio stream\n\nie_pref: The format preference\n\nlang: The language preference\n\nquality: The quality of the format\n\nsource: The preference of the source\n\nproto: Protocol used for download (https/ftps > http/ftp > m3u8_native/m3u8 > http_dash_segments> websocket_frag > mms/rtsp > f4f/f4m)\n\nvcodec: Video Codec (av01 > vp9.2 > vp9 > h265 > h264 > vp8 > h263 > theora > other)\n\nacodec: Audio Codec (flac/alac > wav/aiff > opus > vorbis > aac > mp4a > mp3 > ac4 > eac3 > ac3 > dts > other)\n\ncodec: Equivalent to vcodec,acodec\n\nvext: Video Extension (mp4 > mov > webm > flv > other). If --prefer-free-formats is used, webm is preferred.\n\naext: Audio Extension (m4a > aac > mp3 > ogg > opus > webm > other). If --prefer-free-formats is used, the order changes to ogg > opus > webm > mp3 > m4a > aac\n\next: Equivalent to vext,aext\n\nfilesize: Exact filesize, if known in advance\n\nfs_approx: Approximate filesize\n\nsize: Exact filesize if available, otherwise approximate filesize\n\nheight: Height of video\n\nwidth: Width of video\n\nres: Video resolution, calculated as the smallest dimension.\n\nfps: Framerate of video\n\nhdr: The dynamic range of the video (DV > HDR12 > HDR10+ > HDR10 > HLG > SDR)\n\nchannels: The number of audio channels\n\ntbr: Total average bitrate in kbps\n\nvbr: Average video bitrate in kbps\n\nabr: Average audio bitrate in kbps\n\nbr: Average bitrate in kbps, tbr/vbr/abr\n\nasr: Audio sample rate in Hz\n\nDeprecation warning: Many of these fields have (currently undocumented) aliases, that may be removed in a future version. It is recommended to use only the documented field names.\n\nAll fields, unless specified otherwise, are sorted in descending order. To reverse this, prefix the field with a +. E.g. +res prefers format with the smallest resolution. Additionally, you can suffix a preferred value for the fields, separated by a :. E.g. res:720 prefers larger videos, but no larger than 720p and the smallest video if there are no videos less than 720p. For codec and ext, you can provide two preferred values, the first for video and the second for audio. E.g. +codec:avc:m4a (equivalent to +vcodec:avc,+acodec:m4a) sets the video codec preference to h264 > h265 > vp9 > vp9.2 > av01 > vp8 > h263 > theora and audio codec preference to mp4a > aac > vorbis > opus > mp3 > ac3 > dts. You can also make the sorting prefer the nearest values to the provided by using ~ as the delimiter. E.g. filesize~1G prefers the format with filesize closest to 1 GiB.\n\nThe fields hasvid and ie_pref are always given highest priority in sorting, irrespective of the user-defined order. This behavior can be changed by using --format-sort-force. Apart from these, the default order used is: lang,quality,res,fps,hdr:12,vcodec:vp9.2,channels,acodec,size,br,asr,proto,ext,hasaud,source,id. The extractors may override this default order, but they cannot override the user-provided order.\n\nNote that the default has vcodec:vp9.2; i.e. av1 is not preferred. Similarly, the default for hdr is hdr:12; i.e. Dolby Vision is not preferred. These choices are made since DV and AV1 formats are not yet fully compatible with most devices. This may be changed in the future as more devices become capable of smoothly playing back these formats.\n\nIf your format selector is worst, the last item is selected after sorting. This means it will select the format that is worst in all respects. Most of the time, what you actually want is the video with the smallest filesize instead. So it is generally better to use -f best -S +size,+br,+res,+fps.\n\nTip: You can use the -v -F to see how the formats have been sorted (worst to best).\n\nThe metadata obtained by the extractors can be modified by using --parse-metadata and --replace-in-metadata\n\n--replace-in-metadata FIELDS REGEX REPLACE is used to replace text in any metadata field using Python regular expression. Backreferences can be used in the replace string for advanced use.\n\nThe general syntax of --parse-metadata FROM:TO is to give the name of a field or an output template to extract data from, and the format to interpret it as, separated by a colon :. Either a Python regular expression with named capture groups, a single field name, or a similar syntax to the output template (only %(field)s formatting is supported) can be used for TO. The option can be used multiple times to parse and modify various fields.\n\nNote that these options preserve their relative order, allowing replacements to be made in parsed fields and viceversa. Also, any field thus created can be used in the output template and will also affect the media file's metadata added when using --embed-metadata.\n\nThis option also has a few special uses:\n\nYou can download an additional URL based on the metadata of the currently downloaded video. To do this, set the field additional_urls to the URL that you want to download. E.g. --parse-metadata \"description:(?P<additional_urls>https?://www\\.vimeo\\.com/\\d+)\" will download the first vimeo video found in the description\n\nYou can use this to change the metadata that is embedded in the media file. To do this, set the value of the corresponding field with a meta_ prefix. For example, any value you set to meta_description field will be added to the description field in the file - you can use this to set a different \"description\" and \"synopsis\". To modify the metadata of individual streams, use the meta<n>_ prefix (e.g. meta1_language). Any value set to the meta_ field will overwrite all default values.\n\nNote: Metadata modification happens before format selection, post-extraction and other post-processing operations. Some fields may be added or changed during these steps, overriding your changes.\n\nFor reference, these are the fields yt-dlp adds by default to the file metadata:\n\nMetadata fields From title track or title date upload_date description, synopsis description purl, comment webpage_url track track_number artist artist, artists, creator, creators, uploader or uploader_id composer composer or composers genre genre or genres album album album_artist album_artist or album_artists disc disc_number show series season_number season_number episode_id episode or episode_id episode_sort episode_number language of each stream the format's language\n\nNote: The file format may not support some of these fields\n\nSome extractors accept additional arguments which can be passed using --extractor-args KEY:ARGS. ARGS is a ; (semicolon) separated string of ARG=VAL1,VAL2. E.g. --extractor-args \"youtube:player-client=mediaconnect,web;formats=incomplete\" --extractor-args \"funimation:version=uncut\"\n\nNote: In CLI, ARG can use - instead of _; e.g. youtube:player-client\" becomes youtube:player_client\"\n\nThe following extractors use this feature:\n\nlang: Prefer translated metadata (title, description etc) of this language code (case-sensitive). By default, the video primary language metadata is preferred, with a fallback to en translated. See youtube.py for list of supported content language codes\n\nskip: One or more of hls, dash or translated_subs to skip extraction of the m3u8 manifests, dash manifests and auto-translated subtitles respectively\n\nplayer_client: Clients to extract video data from. The main clients are web, ios and android, with variants _music and _creator (e.g. ios_creator); and mediaconnect, mweb, android_producer, android_testsuite, android_vr, web_safari, web_embedded, tv and tv_embedded with no variants. By default, ios,web_creator is used, and tv_embedded, web_creator and mediaconnect are added as required for age-gated videos. Similarly, the music variants are added for music.youtube.com urls. Most android clients will be given lowest priority since their formats are broken. You can use all to use all the clients, and default for the default clients.\n\nplayer_skip: Skip some network requests that are generally needed for robust extraction. One or more of configs (skip client configs), webpage (skip initial webpage), js (skip js player). While these options can help reduce the number of requests needed or avoid some rate-limiting, they could cause some issues. See #860 for more details\n\nplayer_params: YouTube player parameters to use for player requests. Will overwrite any default ones set by yt-dlp.\n\ncomment_sort: top or new (default) - choose comment sorting mode (on YouTube's side)\n\nmax_comments: Limit the amount of comments to gather. Comma-separated list of integers representing max-comments,max-parents,max-replies,max-replies-per-thread. Default is all,all,all,all\n\nE.g. all,all,1000,10 will get a maximum of 1000 replies total, with up to 10 replies per thread. 1000,all,100 will get a maximum of 1000 comments, with a maximum of 100 replies total\n\nformats: Change the types of formats to return. dashy (convert HTTP to DASH), duplicate (identical content but different URLs or protocol; includes dashy), incomplete (cannot be downloaded completely - live dash and post-live m3u8)\n\ninnertube_host: Innertube API host to use for all API requests; e.g. studio.youtube.com, youtubei.googleapis.com. Note that cookies exported from one subdomain will not work on others\n\ninnertube_key: Innertube API key to use for all API requests. By default, no API key is used\n\nraise_incomplete_data: Incomplete Data Received raises an error instead of reporting a warning\n\nskip: One or more of webpage (skip initial webpage download), authcheck (allow the download of playlists requiring authentication when no initial webpage is downloaded. This may cause unwanted behavior, see #1122 for more details)\n\napproximate_date: Extract approximate upload_date and timestamp in flat-playlist. This may cause date-based filters to be slightly off\n\nfragment_query: Passthrough any query in mpd/m3u8 manifest URLs to their fragments if no value is provided, or else apply the query string given as fragment_query=VALUE. Note that if the stream has an HLS AES-128 key, then the query parameters will be passed to the key URI as well, unless the key_query extractor-arg is passed, or unless an external key URI is provided via the hls_key extractor-arg. Does not apply to ffmpeg\n\nvariant_query: Passthrough the master m3u8 URL query to its variant playlist URLs if no value is provided, or else apply the query string given as variant_query=VALUE\n\nkey_query: Passthrough the master m3u8 URL query to its HLS AES-128 decryption key URI if no value is provided, or else apply the query string given as key_query=VALUE. Note that this will have no effect if the key URI is provided via the hls_key extractor-arg. Does not apply to ffmpeg\n\nhls_key: An HLS AES-128 key URI or key (as hex), and optionally the IV (as hex), in the form of (URI|KEY)[,IV]; e.g. generic:hls_key=ABCDEF1234567980,0xFEDCBA0987654321. Passing any of these values will force usage of the native HLS downloader and override the corresponding values found in the m3u8 playlist\n\nis_live: Bypass live HLS detection and manually set live_status - a value of false will set not_live, any other value (or no value) will set is_live\n\nlanguage: Audio languages to extract, e.g. funimation:language=english,japanese\n\nversion: The video version to extract - uncut or simulcast\n\nhardsub: One or more hardsub versions to extract (in order of preference), or all (default: None = no hardsubs will be extracted), e.g. crunchyrollbeta:hardsub=en-US,de-DE\n\nvideo_types: Types of videos to download - one or more of episodes, movies, clips, trailers\n\nsegment_duration: Segment duration in milliseconds for HLS-DMC formats. Use it at your own risk since this feature may result in your account termination.\n\ncheck_all: Try to check more at the cost of more requests. One or more of thumbnails, captures\n\ncomment_sort: hot (default), you (cookies needed), top, new - choose comment sorting mode (on GameJolt's side)\n\nres: resolution to ignore - one or more of sd, hd, fhd\n\nvcodec: vcodec to ignore - one or more of h264, h265, dvh265\n\ndr: dynamic range to ignore - one or more of sdr, hdr10, dv\n\nmax_comments: Maximum number of comments to extract - default is 120\n\napi_hostname: Hostname to use for mobile API calls, e.g. api22-normal-c-alisg.tiktokv.com\n\napp_name: Default app name to use with mobile API calls, e.g. trill\n\napp_version: Default app version to use with mobile API calls - should be set along with manifest_app_version, e.g. 34.1.2\n\nmanifest_app_version: Default numeric app version to use with mobile API calls, e.g. 2023401020\n\naid: Default app ID to use with mobile API calls, e.g. 1180\n\napp_info: Enable mobile API extraction with one or more app info strings in the format of <iid>/[app_name]/[app_version]/[manifest_app_version]/[aid], where iid is the unique app install ID. iid is the only required value; all other values and their / separators can be omitted, e.g. tiktok:app_info=1234567890123456789 or tiktok:app_info=123,456/trill///1180,789//34.0.1/340001\n\ndevice_id: Enable mobile API extraction with a genuine device ID to be used with mobile API calls. Default is a random 19-digit string\n\ntab: Which tab to download - one of new, top, videos, podcasts, streams, stacks\n\napi: Select one of graphql (default), legacy or syndication as the API for tweet extraction. Has no effect if logged in\n\ndevice_id: UUID value assigned by the website and used to enforce device limits for paid livestream content. Can be found in browser local storage\n\nclient_id: Client ID value to be sent with GraphQL requests, e.g. twitch:client_id=kimne78kx3ncx6brgo4mv6wki5h1ko\n\narea: Which regional variation to extract. Valid areas are: sapporo, sendai, tokyo, nagoya, osaka, hiroshima, matsuyama, fukuoka. Defaults to tokyo\n\ntype: Type(s) of game replays to extract. Valid types are: full_game, full_game_spanish, condensed_game and all_22. You can use all to extract all available replay types, which is the default\n\nrefresh_token: The refreshToken UUID from browser local storage can be passed to extend the life of your login session when logging in with token as username and the accessToken from browser local storage as password\n\nbitrate: Audio bitrates to request. One or more of 16, 32, 64, 128, 320. Default is 128,320\n\ncdn: One or more CDN IDs to use with the API call for stream URLs, e.g. gcp_cdn, gs_cdn_pc_app, gs_cdn_mobile_web, gs_cdn_pc_web\n\nformats: Formats to request from the API. Requested values should be in the format of {protocol}_{extension} (omitting the bitrate), e.g. hls_opus,http_aac. The * character functions as a wildcard, e.g. *_mp3, and can be passed by itself to request all formats. Known protocols include http, hls and hls-aes; known extensions include aac, opus and mp3. Original download formats are always extracted. Default is http_aac,hls_aac,http_opus,hls_opus,http_mp3,hls_mp3\n\nprefer_segments_playlist: Prefer a playlist of program segments instead of a single complete video when available. If individual segments are desired, use --concat-playlist never --extractor-args \"orfon:prefer_segments_playlist\"\n\nprefer_multi_flv: Prefer extracting flv formats over mp4 for older videos that still provide legacy formats\n\nprefer_combined_hls: Prefer extracting combined/pre-merged video and audio HLS formats. This will exclude 4K/HEVC video and lossless/FLAC audio formats, which are only available as split video/audio HLS formats\n\nNote: These options may be changed/removed in the future without concern for backward compatibility\n\nNote that all plugins are imported even if not invoked, and that there are no checks performed on plugin code. Use plugins at your own risk and only if you trust the code!\n\nPlugins can be of <type>s extractor or postprocessor.\n\nExtractor plugins do not need to be enabled from the CLI and are automatically invoked when the input URL is suitable for it.\n\nExtractor plugins take priority over built-in extractors.\n\nPostprocessor plugins can be invoked using --use-postprocessor NAME.\n\nPlugins are loaded from the namespace packages yt_dlp_plugins.extractor and yt_dlp_plugins.postprocessor.\n\nIn other words, the file structure on the disk looks something like:\n\nyt-dlp looks for these yt_dlp_plugins namespace folders in many locations (see below) and loads in plugins from all of them.\n\nSee the wiki for some known plugins\n\nPlugins can be installed using various methods and locations.\n\nConfiguration directories: Plugin packages (containing a yt_dlp_plugins namespace folder) can be dropped into the following standard configuration locations:\n\nUser Plugins\n\n${XDG_CONFIG_HOME}/yt-dlp/plugins/<package name>/yt_dlp_plugins/ (recommended on Linux/macOS)\n\n${XDG_CONFIG_HOME}/yt-dlp-plugins/<package name>/yt_dlp_plugins/\n\n${APPDATA}/yt-dlp/plugins/<package name>/yt_dlp_plugins/ (recommended on Windows)\n\n${APPDATA}/yt-dlp-plugins/<package name>/yt_dlp_plugins/\n\n~/.yt-dlp/plugins/<package name>/yt_dlp_plugins/\n\n~/yt-dlp-plugins/<package name>/yt_dlp_plugins/\n\nSystem Plugins\n\n/etc/yt-dlp/plugins/<package name>/yt_dlp_plugins/\n\n/etc/yt-dlp-plugins/<package name>/yt_dlp_plugins/\n\nExecutable location: Plugin packages can similarly be installed in a yt-dlp-plugins directory under the executable location (recommended for portable installations):\n\nBinary: where <root-dir>/yt-dlp.exe, <root-dir>/yt-dlp-plugins/<package name>/yt_dlp_plugins/\n\nSource: where <root-dir>/yt_dlp/__main__.py, <root-dir>/yt-dlp-plugins/<package name>/yt_dlp_plugins/\n\npip and other locations in PYTHONPATH\n\nPlugin packages can be installed and managed using pip. See yt-dlp-sample-plugins for an example.\n\nNote: plugin files between plugin packages installed with pip must have unique filenames.\n\nAny path in PYTHONPATH is searched in for the yt_dlp_plugins namespace folder.\n\nNote: This does not apply for Pyinstaller/py2exe builds.\n\n.zip, .egg and .whl archives containing a yt_dlp_plugins namespace folder in their root are also supported as plugin packages.\n\ne.g. ${XDG_CONFIG_HOME}/yt-dlp/plugins/mypluginpkg.zip where mypluginpkg.zip contains yt_dlp_plugins/<type>/myplugin.py\n\nRun yt-dlp with --verbose to check if the plugin has been loaded.\n\nSee the yt-dlp-sample-plugins repo for a template plugin package and the Plugin Development section of the wiki for a plugin development guide.\n\nAll public classes with a name ending in IE/PP are imported from each file for extractors and postprocessors respectively. This respects underscore prefix (e.g. _MyBasePluginIE is private) and __all__. Modules can similarly be excluded by prefixing the module name with an underscore (e.g. _myplugin.py).\n\nTo replace an existing extractor with a subclass of one, set the plugin_name class keyword argument (e.g. class MyPluginIE(ABuiltInIE, plugin_name='myplugin') will replace ABuiltInIE with MyPluginIE). Since the extractor replaces the parent, you should exclude the subclass extractor from being imported separately by making it private using one of the methods described above.\n\nIf you are a plugin author, add yt-dlp-plugins as a topic to your repository for discoverability.\n\nSee the Developer Instructions on how to write and test an extractor.\n\nyt-dlp makes the best effort to be a good command-line program, and thus should be callable from any programming language.\n\nYour program should avoid parsing the normal stdout since they may change in future versions. Instead, they should use options such as -J, --print, --progress-template, --exec etc to create console output that you can reliably reproduce and parse.\n\nFrom a Python program, you can embed yt-dlp in a more powerful fashion, like this:\n\nMost likely, you'll want to use various options. For a list of options available, have a look at yt_dlp/YoutubeDL.py or help(yt_dlp.YoutubeDL) in a Python shell. If you are already familiar with the CLI, you can use devscripts/cli_to_api.py to translate any CLI switches to YoutubeDL params.\n\nTip: If you are porting your code from youtube-dl to yt-dlp, one important point to look out for is that we do not guarantee the return value of YoutubeDL.extract_info to be json serializable, or even be a dictionary. It will be dictionary-like, but if you want to ensure it is a serializable dictionary, pass it through YoutubeDL.sanitize_info as shown in the example below\n\nForked from yt-dlc@f9401f2 and merged with youtube-dl@a08f2b7 (exceptions)\n\nSponsorBlock Integration: You can mark/remove sponsor sections in YouTube videos by utilizing the SponsorBlock API\n\nFormat Sorting: The default format sorting options have been changed so that higher resolution and better codecs will be now preferred instead of simply using larger bitrate. Furthermore, you can now specify the sort order using -S. This allows for much easier format selection than what is possible by simply using --format (examples)\n\nMerged with animelover1984/youtube-dl: You get most of the features and improvements from animelover1984/youtube-dl including --write-comments, BiliBiliSearch, BilibiliChannel, Embedding thumbnail in mp4/ogg/opus, playlist infojson etc. Note that NicoNico livestreams are not available. See #31 for details.\n\nYouTube improvements:\n\nSupports Clips, Stories (ytstories:<channel UCID>), Search (including filters)*, YouTube Music Search, Channel-specific search, Search prefixes (ytsearch:, ytsearchdate:)*, Mixes, and Feeds (:ytfav, :ytwatchlater, :ytsubs, :ythistory, :ytrec, :ytnotif)\n\nFix for n-sig based throttling *\n\nSupports some (but not all) age-gated content without cookies\n\nDownload livestreams from the start using --live-from-start (experimental)\n\nChannel URLs download all uploads of the channel, including shorts and live\n\nCookies from browser: Cookies can be automatically extracted from all major web browsers using --cookies-from-browser BROWSER[+KEYRING][:PROFILE][::CONTAINER]\n\nDownload time range: Videos can be downloaded partially based on either timestamps or chapters using --download-sections\n\nSplit video by chapters: Videos can be split into multiple files based on chapters using --split-chapters\n\nMulti-threaded fragment downloads: Download multiple fragments of m3u8/mpd videos in parallel. Use --concurrent-fragments (-N) option to set the number of threads used\n\nAria2c with HLS/DASH: You can use aria2c as the external downloader for DASH(mpd) and HLS(m3u8) formats\n\nNew and fixed extractors: Many new extractors have been added and a lot of existing ones have been fixed. See the changelog or the list of supported sites\n\nNew MSOs: Philo, Spectrum, SlingTV, Cablevision, RCN etc.\n\nSubtitle extraction from manifests: Subtitles can be extracted from streaming media manifests. See commit/be6202f for details\n\nMultiple paths and output templates: You can give different output templates and download paths for different types of files. You can also set a temporary path where intermediary files are downloaded to using --paths (-P)\n\nPortable Configuration: Configuration files are automatically loaded from the home and root directories. See CONFIGURATION for details\n\nOutput template improvements: Output templates can now have date-time formatting, numeric offsets, object traversal etc. See output template for details. Even more advanced operations can also be done with the help of --parse-metadata and --replace-in-metadata\n\nOther new options: Many new options have been added such as --alias, --print, --concat-playlist, --wait-for-video, --retry-sleep, --sleep-requests, --convert-thumbnails, --force-download-archive, --force-overwrites, --break-match-filter etc\n\nImprovements: Regex and other operators in --format/--match-filter, multiple --postprocessor-args and --downloader-args, faster archive checking, more format selection options, merge multi-video/audio, multiple --config-locations, --exec at different stages, etc\n\nPlugins: Extractors and PostProcessors can be loaded from an external file. See plugins for details\n\nSelf updater: The releases can be updated using yt-dlp -U, and downgraded using --update-to if required\n\nAutomated builds: Nightly/master builds can be used with --update-to nightly and --update-to master\n\nSee changelog or commits for the full list of changes\n\nFeatures marked with a * have been back-ported to youtube-dl\n\nSome of yt-dlp's default options are different from that of youtube-dl and youtube-dlc:\n\nyt-dlp supports only Python 3.8+, and may remove support for more versions as they become EOL; while youtube-dl still supports Python 2.6+ and 3.2+\n\nThe options --auto-number (-A), --title (-t) and --literal (-l), no longer work. See removed options for details\n\navconv is not supported as an alternative to ffmpeg\n\nyt-dlp stores config files in slightly different locations to youtube-dl. See CONFIGURATION for a list of correct locations\n\nThe default output template is %(title)s [%(id)s].%(ext)s. There is no real reason for this change. This was changed before yt-dlp was ever made public and now there are no plans to change it back to %(title)s-%(id)s.%(ext)s. Instead, you may use --compat-options filename\n\nThe default format sorting is different from youtube-dl and prefers higher resolution and better codecs rather than higher bitrates. You can use the --format-sort option to change this to any order you prefer, or use --compat-options format-sort to use youtube-dl's sorting order\n\nThe default format selector is bv*+ba/b. This means that if a combined video + audio format that is better than the best video-only format is found, the former will be preferred. Use -f bv+ba/b or --compat-options format-spec to revert this\n\nUnlike youtube-dlc, yt-dlp does not allow merging multiple audio/video streams into one file by default (since this conflicts with the use of -f bv*+ba). If needed, this feature must be enabled using --audio-multistreams and --video-multistreams. You can also use --compat-options multistreams to enable both\n\n--no-abort-on-error is enabled by default. Use --abort-on-error or --compat-options abort-on-error to abort on errors instead\n\nWhen writing metadata files such as thumbnails, description or infojson, the same information (if available) is also written for playlists. Use --no-write-playlist-metafiles or --compat-options no-playlist-metafiles to not write these files\n\n--add-metadata attaches the infojson to mkv files in addition to writing the metadata when used with --write-info-json. Use --no-embed-info-json or --compat-options no-attach-info-json to revert this\n\nSome metadata are embedded into different fields when using --add-metadata as compared to youtube-dl. Most notably, comment field contains the webpage_url and synopsis contains the description. You can use --parse-metadata to modify this to your liking or use --compat-options embed-metadata to revert this\n\nplaylist_index behaves differently when used with options like --playlist-reverse and --playlist-items. See #302 for details. You can use --compat-options playlist-index if you want to keep the earlier behavior\n\nThe output of -F is listed in a new format. Use --compat-options list-formats to revert this\n\nLive chats (if available) are considered as subtitles. Use --sub-langs all,-live_chat to download all subtitles except live chat. You can also use --compat-options no-live-chat to prevent any live chat/danmaku from downloading\n\nYouTube channel URLs download all uploads of the channel. To download only the videos in a specific tab, pass the tab's URL. If the channel does not show the requested tab, an error will be raised. Also, /live URLs raise an error if there are no live videos instead of silently downloading the entire channel. You may use --compat-options no-youtube-channel-redirect to revert all these redirections\n\nUnavailable videos are also listed for YouTube playlists. Use --compat-options no-youtube-unavailable-videos to remove this\n\nThe upload dates extracted from YouTube are in UTC when available. Use --compat-options no-youtube-prefer-utc-upload-date to prefer the non-UTC upload date.\n\nIf ffmpeg is used as the downloader, the downloading and merging of formats happen in a single step when possible. Use --compat-options no-direct-merge to revert this\n\nThumbnail embedding in mp4 is done with mutagen if possible. Use --compat-options embed-thumbnail-atomicparsley to force the use of AtomicParsley instead\n\nSome internal metadata such as filenames are removed by default from the infojson. Use --no-clean-infojson or --compat-options no-clean-infojson to revert this\n\nWhen --embed-subs and --write-subs are used together, the subtitles are written to disk and also embedded in the media file. You can use just --embed-subs to embed the subs and automatically delete the separate file. See #630 (comment) for more info. --compat-options no-keep-subs can be used to revert this\n\ncertifi will be used for SSL root certificates, if installed. If you want to use system certificates (e.g. self-signed), use --compat-options no-certifi\n\nyt-dlp's sanitization of invalid characters in filenames is different/smarter than in youtube-dl. You can use --compat-options filename-sanitization to revert to youtube-dl's behavior\n\nyt-dlp tries to parse the external downloader outputs into the standard progress output if possible (Currently implemented: aria2c). You can use --compat-options no-external-downloader-progress to get the downloader output as-is\n\nyt-dlp versions between 2021.09.01 and 2023.01.02 applies --match-filter to nested playlists. This was an unintentional side-effect of 8f18ac and is fixed in d7b460. Use --compat-options playlist-match-filter to revert this\n\nyt-dlp versions between 2021.11.10 and 2023.06.21 estimated filesize_approx values for fragmented/manifest formats. This was added for convenience in f2fe69, but was reverted in 0dff8e due to the potentially extreme inaccuracy of the estimated values. Use --compat-options manifest-filesize-approx to keep extracting the estimated values\n\nyt-dlp uses modern http client backends such as requests. Use --compat-options prefer-legacy-http-handler to prefer the legacy http handler (urllib) to be used for standard http requests.\n\nThe sub-modules swfinterp, casefold are removed.\n\nPassing --simulate (or calling extract_info with download=False) no longer alters the default format selection. See #9843 for details.\n\nFor ease of use, a few more compat options are available:\n\n--compat-options all: Use all compat options (Do NOT use this!)\n\n--compat-options youtube-dl: Same as --compat-options all,-multistreams,-playlist-match-filter,-manifest-filesize-approx,-allow-unsafe-ext\n\n--compat-options youtube-dlc: Same as --compat-options all,-no-live-chat,-no-youtube-channel-redirect,-playlist-match-filter,-manifest-filesize-approx,-allow-unsafe-ext\n\n--compat-options 2021: Same as --compat-options 2022,no-certifi,filename-sanitization,no-youtube-prefer-utc-upload-date\n\n--compat-options 2022: Same as --compat-options 2023,playlist-match-filter,no-external-downloader-progress,prefer-legacy-http-handler,manifest-filesize-approx\n\n--compat-options 2023: Currently does nothing. Use this to enable all future compat options\n\nThe following compat options restore vulnerable behavior from before security patches:\n\n--compat-options allow-unsafe-ext: Allow files with any extension (including unsafe ones) to be downloaded (GHSA-79w7-vh3h-8g4j)\n\n⚠️ Only use if a valid file download is rejected because its extension is detected as uncommon\n\nThis option can enable remote code execution! Consider opening an issue instead!\n\nThese are all the deprecated options and the current alternative to achieve the same effect\n\nWhile these options are almost the same as their new counterparts, there are some differences that prevents them being redundant\n\nWhile these options are redundant, they are still expected to be used due to their ease of use\n\nWhile these options still work, their use is not recommended since there are other alternatives to achieve the same\n\nThese options are not intended to be used by the end-user\n\nThese are aliases that are no longer documented for various reasons\n\nSupport for SponSkrub has been deprecated in favor of the --sponsorblock options\n\nThese options may no longer work as intended\n\nThese options were deprecated since 2014 and have now been entirely removed\n\nSee CONTRIBUTING.md for instructions on Opening an Issue and Contributing code to the project"
    }
}