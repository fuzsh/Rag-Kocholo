{
    "id": "dbpedia_2905_1",
    "rank": 35,
    "data": {
        "url": "https://github.com/BKWLD/croppa",
        "read_more_link": "",
        "language": "en",
        "title": "BKWLD/croppa: Image thumbnail creation through specially formatted URLs for Laravel.",
        "top_image": "https://opengraph.githubassets.com/98d34b7c1fca463ea2bfcad1e716ab4c676baa0002fa4fb7618f15fe13e745cd/BKWLD/croppa",
        "meta_img": "https://opengraph.githubassets.com/98d34b7c1fca463ea2bfcad1e716ab4c676baa0002fa4fb7618f15fe13e745cd/BKWLD/croppa",
        "images": [
            "https://camo.githubusercontent.com/90cbeff1c1a3cba0d1d9953ff2a324c0b439dd40af8a5e6dcf70fcbdc0d7c34a/68747470733a2f2f696d672e736869656c64732e696f2f7061636b61676973742f762f626b776c642f63726f7070612e737667"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Image thumbnail creation through specially formatted URLs for Laravel. - BKWLD/croppa",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/BKWLD/croppa",
        "text": "Croppa is a thumbnail generator bundle for Laravel. It follows a different approach from libraries that store your thumbnail dimensions in the model. Instead, the resizing and cropping instructions come from specially formatted URLs.\n\nTo produce a 300x200 thumbnail of this, you would change the path to:\n\nThis file, of course, doesn’t exist yet. Croppa listens for specifically formatted image routes and builds this thumbnail on the fly, outputting the image data (with correct headers) to the browser instead of returning a 404 response.\n\nAt the same time, it saves the newly cropped image to the disk in the same location (the \"…-300x200.png\" path) that you requested. As a result, all future requests get served directly from the disk, bypassing PHP and avoiding unnecessary overhead. In other words, your app does not need to boot up just to serve an image. This is a key differentiator compared to other similar libraries.\n\nSince version 4.0, Croppa allows images to be stored on remote disks such as S3, Dropbox, FTP, and more, thanks to Flysystem integration.\n\ngd\n\nexif - Required if you want to have Croppa auto-rotate images from devices like mobile phones based on exif meta data.\n\nWhen using Nginx HTTP server boilerplate configs, add error_page 404 = /index.php?$query_string; in the location block for Media, located in file h5bp/location/expires.conf.\n\nAdd Croppa to your project: composer require bkwld/croppa\n\nRead the source of the config file for documentation of the config options. Here are some examples of common setups (additional examples can be found here):\n\nYou can publish the config file into your app’s config directory, by running the following command:\n\nphp artisan vendor:publish --tag=croppa-config\n\nThe most common scenario, the src images and their crops are created in the default ”public” Laravel disk.\n\nThus, if you have <img src=\"{{ Croppa::url('file.jpg', 200) }}\">, the returned URL will be /storage/file-200x_.jpg, the source image will be looked for at '/storage/app/public/file.jpg', and the new crop will be created at '/storage/app/public/file-200x_.jpg'. And because the URL generated by Croppa::url() points to the location where the crop was created, the web server (Apache, etc) will directly serve it on the next request (your app won’t boot just to serve an image).\n\nThis is a good solution for a load balanced enviornment. Each app server will end up with it’s own cache of cropped images, so there is some wasted space. But the web server (Apache, etc) can still serve the crops directly on subsequent crop requests.\n\nThus, if you have <img src=\"{{ Croppa::url('file.jpg', 200, 100) }}\">, the returned URL will be /storage/file-200x100.jpg, the source image will be looked for immediately within the S3 bucket that was configured as part of the Flysystem instance, and the new crop will be created at /storage/app/public/file-200x100.jpg.\n\nThe URL schema that Croppa uses is:\n\nSo these are all valid:\n\nTo make preparing the URLs that Croppa expects an easier job, you can use the following view helper:\n\nThese are the arguments that Croppa::url() takes:\n\n$url : The URL of your source image. The path to the image relative to the src_disk will be extracted using the path config regex.\n\n$width : A number or null for wildcard\n\n$height : A number or null for wildcard\n\n$options - An array of key value pairs, where the value is an optional array of arguments for the option. Supported option are:\n\nresize - Make the image fit in the provided width and height through resizing. When omitted, the default is to crop to fit in the bounds (unless one of sides is a wildcard).\n\npad - Pad an image to desired dimensions. Moves the image into the center and fills the rest with given color. If no color is given, it will use white [255,255,255]\n\nquadrant($quadrant) - Crop the remaining overflow of an image using the passed quadrant heading. The supported $quadrant values are: T - Top (good for headshots), B - Bottom, L - Left, R - Right, C - Center (default).\n\ntrim($x1, $y1, $x2, $y2) - Crop the source image to the size defined by the two sets of coordinates ($x1, $y1, ...) BEFORE applying the $width and $height parameters. This is designed to be used with a frontend cropping UI like jcrop so that you can respect a cropping selection that the user has defined but then output thumbnails or sized down versions of that selection with Croppa.\n\ntrim_perc($x1_perc, $y1_perc, $x2_perc, $y2_perc) - Has the same effect as trim() but accepts coordinates as percentages. Thus, the the upper left of the image is \"0\" and the bottom right of the image is \"1\". So if you wanted to trim the image to half the size around the center, you would add an option of trim_perc(0.25,0.25,0.75,0.75)\n\nquality($int) - Set the jpeg compression quality from 0 to 100.\n\ninterlace($bool) - Set to 1 or 0 to turn interlacing on or off\n\nupsize($bool) - Set to 1 or 0 to allow images to be upsized. If falsey and you ask for a size bigger than the source, it will only create an image as big as the original source.\n\nIf you want to create the image programmatically you can pass to this function the url generated by Croppa::url. This will only create the thumbnail and exit.\n\nor\n\nYou can delete a source image and all of its crops by running:\n\nSimilar to Croppa::delete() except the source image is preserved, only the crops are deleted.\n\nDeletes all crops. This works by scanning the crops_disk recursively and matching all files that have the Croppa naming convention where a corresponding src file can be found. Accepts the following options:\n\n--filter - Applies a whitelisting regex filter to the crops. For example: --filter=^01/ matches all crops in the \"./public/uploads/01/\" directory\n\n--dry-run - Ouputs the files that would be deleted to the console, but doesn’t actually remove\n\nA module is included to prepare formatted URLs from JS. This can be helpful when you are creating views from JSON responses from an AJAX request; you don’t need to format the URLs on the server. It can be loaded via Require.js, CJS, or as browser global variable.\n\nWorks just like the PHP Croppa::url except for how options get formatted (since JS doesn’t have associative arrays).\n\nRun php artisan asset:publish bkwld/croppa to have Laravel copy the JS to your public directory. It will go to /public/packages/bkwld/croppa/js by default.\n\nRead the Github project releases for release notes."
    }
}