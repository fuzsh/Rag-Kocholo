{
    "id": "dbpedia_6246_2",
    "rank": 38,
    "data": {
        "url": "https://livebook.manning.com/book/object-design-style-guide/chapter-2/",
        "read_more_link": "",
        "language": "en",
        "title": "Chapter 2. Creating services · Object Design Style Guide",
        "top_image": "https://drek4537l1klr.cloudfront.net/noback/Figures/cover.jpg",
        "meta_img": "https://drek4537l1klr.cloudfront.net/noback/Figures/cover.jpg",
        "images": [
            "https://www.facebook.com/tr?id=1940497162877014&ev=PageView&noscript=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Instantiating service objects · Injecting and validating dependencies and configuration values · Promoting optional constructor arguments to required ones · Making implicit dependencies explicit · Designing services to be immutable",
        "meta_lang": "en",
        "meta_favicon": "https://d19npu3b8zepp3.cloudfront.net/assets/images/favicon.png?v=1",
        "meta_site_name": "",
        "canonical_link": "https://livebook.manning.com/book/object-design-style-guide/chapter-2",
        "text": "Chapter 2. Creating services\n\nThis chapter covers\n\nInstantiating service objects\n\nInjecting and validating dependencies and configuration values\n\nPromoting optional constructor arguments to required ones\n\nMaking implicit dependencies explicit\n\nDesigning services to be immutable\n\nIn the following two chapters, we’ll discuss different types of objects and the guidelines for instantiating them. Roughly speaking, there are two types of objects, and they both come with different rules. In this chapter we’ll consider the first type of objects: services. The creation of other objects will be the topic of chapter 3.\n\n2.1. Two types of objects\n\nIn an application there will typically be two types of objects:\n\nService objects that either perform a task or return a piece of information\n\nObjects that will hold some data, and optionally expose some behavior for manipulating or retrieving that data\n\nObjects of the first type will be created once, and then be used any number of times, but nothing can be changed about them. They have a very simple lifecycle. Once they’ve been created, they can run forever, like little machines with specific tasks. These objects are called services.\n\n2.2. Inject dependencies and configuration values as constructor arguments\n\n2.3. Inject what you need, not where you can get it from\n\n2.4. All constructor arguments should be required\n\n2.5. Only use constructor injection\n\n2.6. There’s no such thing as an optional dependency\n\n2.7. Make all dependencies explicit\n\n2.8. Task-relevant data should be passed as method arguments instead o- of constructor arguments\n\n2.9. Don’t allow the behavior of a service to change after it has been instantiated\n\n2.10. Do nothing inside a constructor, only assign properties\n\n2.11. Throw an exception when an argument is invalid\n\n2.12. Define services as an immutable object graph with only a few entry points"
    }
}