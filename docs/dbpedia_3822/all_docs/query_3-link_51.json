{
    "id": "dbpedia_3822_3",
    "rank": 51,
    "data": {
        "url": "https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html",
        "read_more_link": "",
        "language": "en",
        "title": "Lambda quotas",
        "top_image": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "meta_img": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "images": [
            "https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/warning.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Lambda",
            "AWS Lambda",
            "serverless",
            "serverless applications",
            "cloud computing",
            "max",
            "maximum",
            "limits",
            "quota"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Maximum sizes, limits, and quotas for Lambda functions and API requests.",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html",
        "text": "128 MB to 10,240 MB, in 1-MB increments.\n\nNote: Lambda allocates CPU power in proportion to the amount of memory configured. You can increase or decrease the memory and CPU power allocated to your function using the Memory (MB) setting. At 1,769 MB, a function has the equivalent of one vCPU.\n\n6 MB each for request and response (synchronous)\n\n20 MB for each streamed response (Synchronous. The payload size for streamed responses can be increased from default values. Contact AWS Support to inquire further.)\n\n256 KB (asynchronous)\n\n1 MB for the total combined size of request line and header values\n\nUncapped for the first 6 MB of your function's response\n\nFor responses larger than 6 MB, 2MBps for the remainder of the response\n\nEach instance of your execution environment can serve up to 10 requests per second. In other words, the total invocation limit is 10 times your concurrency limit. See Understanding Lambda function scaling.\n\nEach instance of your execution environment can serve an unlimited number of requests. In other words, the total invocation limit is based only on concurrency available to your function. See Understanding Lambda function scaling."
    }
}