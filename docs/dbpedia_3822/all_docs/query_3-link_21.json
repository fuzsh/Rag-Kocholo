{
    "id": "dbpedia_3822_3",
    "rank": 21,
    "data": {
        "url": "https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html",
        "read_more_link": "",
        "language": "en",
        "title": "Resizing clusters",
        "top_image": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "meta_img": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "images": [
            "https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/warning.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Amazon Redshift",
            "AWS Redshift",
            "Redshift",
            "connecting",
            "cluster",
            "launch cluster",
            "data warehouse",
            "management",
            "cluster management",
            "JDBC",
            "ODBC",
            "connection",
            "security"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn about and walk through the ways to resize Amazon Redshift clusters.",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html",
        "text": "As your data warehousing capacity and performance needs change, you can resize your cluster to make the best use of Amazon Redshift's computing and storage options.\n\nA resize operation comes in two types:\n\nElastic resize\n\nAn elastic resize operation, when you add or remove nodes of the same type, has the following stages:\n\nWhen you use elastic resize to change the node type, it works similarly to when you add or subtract nodes of the same type. First, a snapshot is created. A new target cluster is provisioned with the latest data from the snapshot, and data is transferred to the new cluster in the background. During this period, data is read only. When the resize nears completion, Amazon Redshift updates the endpoint to point to the new cluster and all connections to the source cluster are dropped.\n\nIt's unlikely that an elastic resize would fail. However, in the case of a failure, rollback happens automatically in the majority of cases without needing any manual intervention.\n\nIf you have reserved nodes, for example DC2 reserved nodes, you can upgrade to RA3 reserved nodes when you perform a resize. You can do this when you perform an elastic resize or use the console to restore from a snapshot. The console guides you through this process. For more information about upgrading to RA3 nodes, see Upgrading to RA3 node types.\n\nElastic resize doesn't sort tables or reclaims disk space, so it isn't a substitute for a vacuum operation. For more information, see Vacuuming tables.\n\nElastic resize has the following constraints:\n\nClassic resize\n\nClassic resize handles use cases where the change in cluster size or node type isn't supported by elastic resize. When you perform a classic resize, Amazon Redshift creates a target cluster and migrates your data and metadata to it from the source cluster.\n\nClassic resize to RA3 can provide better availability\n\nClassic resize has been enhanced when the target node type is RA3. It does this by using a backup and restore operation between the source and target cluster. When the resize begins, the source cluster restarts and is unavailable for a few minutes. After that, the cluster is available for read and write operations while the resize continues in the background.\n\nChecking your cluster\n\nTo ensure you have the best performance and results when you perform a classic resize to an RA3 cluster, complete this checklist. When you don't follow the checklist, you may not get some of the benefits of classic resizing with RA3 nodes, such as the ability to do read and write operations.\n\nSorting and distribution operations that result from classic resize to RA3\n\nDuring classic resize to RA3, tables with KEY distribution that are migrated as EVEN distribution are converted back to their original distribution style. The duration of this is dependent on the size of the data and how busy your cluster is. Query workloads are given higher priority to run over data migration. For more information, see Distribution styles. Both reads and writes to the database work during this migration process, but it can take longer for queries to complete. However, concurrency scaling can boost performance during this time by adding resources for query workloads. You can see the progress of data migration by viewing results from the SYS_RESTORE_STATE and SYS_RESTORE_LOG views. More information about monitoring follows.\n\nAfter the cluster is fully resized, the following sort behavior occurs:\n\nFor more information about automatic table vacuum, see Vacuuming tables. For more information about slices in compute nodes, see Data warehouse system architecture.\n\nClassic resize steps when the target cluster is RA3\n\nClassic resize consists of the following steps, when the target cluster type is RA3 and you've met the prerequisites detailed in the previous section.\n\nYou can view the resize progress on the Amazon Redshift console. The time it takes to resize a cluster depends on the amount of data.\n\nMonitoring a classic resize when the target cluster is RA3\n\nTo monitor a classic resize of a provisioned cluster in progress, including KEY distribution, use SYS_RESTORE_STATE. It shows the percentage completed for the table being converted. You must be a super user to access the data.\n\nDrop tables that you don't need when you perform a classic resize. When you do this, existing tables can be distributed more quickly.\n\nClassic resize steps when the target cluster isn't RA3\n\nClassic resize consists of the following, when the target node type is anything other than RA3, like DC2, for instance.\n\nYou can view the resize progress on the Amazon Redshift console. The time it takes to resize a cluster depends on the amount of data.\n\nElastic resize vs classic resize\n\nThe following table compares behavior between the two resize types.\n\nScheduling a resize\n\nYou can schedule resize operations for your cluster to scale up to anticipate high use or to scale down for cost savings. Scheduling works for both elastic resize and classic resize. You can set up a schedule on the Amazon Redshift console. For more information, see Resizing a cluster, under Managing clusters using the console. You can also use AWS CLI or Amazon Redshift API operations to schedule a resize. For more information, see create-scheduled-action in the AWS CLI Command Reference or CreateScheduledAction in the Amazon Redshift API Reference.\n\nSnapshot, restore, and resize\n\nElastic resize is the fastest method to resize an Amazon Redshift cluster. If elastic resize isn't an option for you and you require near-constant write access to your cluster, use the snapshot and restore operations with classic resize as described in the following section. This approach requires that any data that is written to the source cluster after the snapshot is taken must be copied manually to the target cluster after the switch. Depending on how long the copy takes, you might need to repeat this several times until you have the same data in both clusters. Then you can make the switch to the target cluster. This process might have a negative impact on existing queries until the full set of data is available in the target cluster. However, it minimizes the amount of time that you can't write to the database.\n\nThe snapshot, restore, and classic resize approach uses the following process:\n\nAlternatively, you can rename the source and target clusters before reloading data into the target cluster. This approach works if you don't require that any dependent systems and reports be immediately up to date with those for the target cluster. In this case, step 6 moves to the end of the process described preceding.\n\nThe rename process is only required if you want applications to continue using the same endpoint to connect to the cluster. If you don't require this, you can instead update any applications that connect to the cluster to use the endpoint of the target cluster without renaming the cluster.\n\nThere are a couple of benefits to reusing a cluster name. First, you don't need to update application connection strings because the endpoint doesn't change, even though the underlying cluster changes. Second, related items such as Amazon CloudWatch alarms and Amazon Simple Notification Service (Amazon SNS) notifications are tied to the cluster name. This tie means that you can continue using the same alarms and notifications that you set up for the cluster. This continued use is primarily a concern in production environments where you want the flexibility to resize the cluster without reconfiguring related items, such as alarms and notifications."
    }
}