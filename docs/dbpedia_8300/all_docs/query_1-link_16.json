{
    "id": "dbpedia_8300_1",
    "rank": 16,
    "data": {
        "url": "https://www.slideshare.net/slideshow/optimizing-javascript-and-dynamic-languages-on-the-jvm/15462682",
        "read_more_link": "",
        "language": "en",
        "title": "Optimizing JavaScript and Dynamic Languages on the JVM",
        "top_image": "https://cdn.slidesharecdn.com/ss_thumbnails/javaday-lv-lagergren-121203040824-phpapp01-thumbnail.jpg?width=640&height=640&fit=bounds",
        "meta_img": "https://cdn.slidesharecdn.com/ss_thumbnails/javaday-lv-lagergren-121203040824-phpapp01-thumbnail.jpg?width=640&height=640&fit=bounds",
        "images": [
            "https://public.slidesharecdn.com/images/next/svg/logo/slideshare-scribd-company.svg?w=128&q=75 1x, https://public.slidesharecdn.com/images/next/svg/logo/slideshare-scribd-company.svg?w=256&q=75 2x",
            "https://cdn.slidesharecdn.com/profile-photo-lagergren-48x48.jpg?cb=1669157514",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-1-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-1-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-1-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-2-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-2-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-2-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-3-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-3-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-3-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-4-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-4-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-4-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-5-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-5-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-5-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-6-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-6-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-6-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-7-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-7-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-7-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-8-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-8-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-8-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-9-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-9-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-9-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-10-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-10-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-10-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-11-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-11-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-11-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-12-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-12-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-12-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-13-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-13-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-13-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-14-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-14-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-14-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-15-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-15-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-15-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-16-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-16-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-16-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-17-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-17-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-17-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-18-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-18-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-18-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-19-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-19-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-19-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-20-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-20-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-20-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-21-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-21-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-21-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-22-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-22-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-22-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-23-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-23-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-23-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-24-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-24-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-24-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-25-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-25-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-25-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-26-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-26-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-26-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-27-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-27-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-27-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-28-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-28-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-28-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-29-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-29-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-29-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-30-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-30-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-30-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-31-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-31-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-31-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-32-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-32-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-32-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-33-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-33-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-33-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-34-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-34-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-34-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-35-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-35-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-35-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-36-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-36-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-36-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-37-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-37-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-37-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-38-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-38-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-38-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-39-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-39-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-39-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-40-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-40-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-40-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-41-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-41-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-41-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-42-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-42-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-42-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-43-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-43-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-43-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-44-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-44-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-44-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-45-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-45-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-45-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-46-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-46-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-46-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-47-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-47-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-47-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-48-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-48-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-48-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-49-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-49-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-49-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-50-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-50-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-50-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-51-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-51-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-51-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-52-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-52-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-52-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-53-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-53-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-53-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-54-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-54-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-54-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-55-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-55-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-55-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-56-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-56-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-56-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-57-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-57-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-57-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-58-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-58-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-58-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-59-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-59-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-59-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-60-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-60-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-60-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-61-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-61-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-61-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-62-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-62-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-62-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-63-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-63-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-63-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-64-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-64-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-64-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-65-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-65-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-65-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-66-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-66-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-66-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-67-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-67-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-67-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-68-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-68-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-68-2048.jpg 2048w",
            "https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-69-320.jpg 320w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/85/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-69-638.jpg 638w, https://image.slidesharecdn.com/javaday-lv-lagergren-121203040824-phpapp01/75/Optimizing-JavaScript-and-Dynamic-Languages-on-the-JVM-69-2048.jpg 2048w"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-12-03T04:08:24+00:00",
        "summary": "",
        "meta_description": "Optimizing JavaScript and Dynamic Languages on the JVM - Download as a PDF or view online for free",
        "meta_lang": "en",
        "meta_favicon": "https://public.slidesharecdn.com/_next/static/media/favicon.7bc3d920.ico",
        "meta_site_name": "SlideShare",
        "canonical_link": "https://www.slideshare.net/slideshow/optimizing-javascript-and-dynamic-languages-on-the-jvm/15462682",
        "text": "1. Optimizing JavaScript and Dynamic Languages on the JVM Marcus Lagergren “Runtime Futurist” Oracle @lagergren\n\n2. Legal Slide \"THE FOLLOWING IS INTENDED TO OUTLINE OUR GENERAL PRODUCT DIRECTION. IT IS INTENDED FOR INFORMATION PURPOSES ONLY, AND MAY NOT BE INCORPORATED INTO ANY CONTRACT. IT IS NOT A COMMITMENT TO DELIVER ANY MATERIAL, CODE, OR FUNCTIONALITY, AND SHOULD NOT BE RELIED UPON IN MAKING PURCHASING DECISION. THE DEVELOPMENT, RELEASE, AND TIMING OF ANY FEATURES OR FUNCTIONALITY DESCRIBED FOR ORACLE'S PRODUCTS REMAINS AT THE SOLE DISCRETION OF ORACLE.\" 2\n\n3. Who am I? ■ Computer scientist ■ JRockit founder ■ Acquired by BEA, acquired by Oracle. Not likely to be acquired again. ■ Currently in the Java language team ■ Low level guy ■ Compiler architect, virtualization OS hacker, hardware stuff ■ High level guy ■ Tech evangelism, member of various program committees, supervisor of thesis students etc. ■ Should sleep more 3\n\n4. Agenda ■ Background ■ invokedynamic bytecodes and having the JVM do something fast with them ■ Dynamic languages on the JVM ■ How to implement them ■ The Nashorn Project ■ Future directions ■ Follow my struggle on Twitter: @lagergren 4\n\n5. What do I Want? Show you that dynamic languages are indeed feasible to implement on top of the JVM. 5\n\n6. What do I Want? No really, that is all ;-) 6\n\n7. What to take with you from this talk Abstract and main message ■ Sell the JVM as a multi language platform ■ The runtime gets you a lot for free ■ Memory Management ■ Code Optimizations ■ JSR-223 – Java Pluggability ■ Performance ■ “Decent” and rapidly getting better in the near future 7\n\n8. invokedynamic and java.lang.invoke A new bytecode, the libraries around it and its applications 8\n\n9. Invokedynamic Introduction ■ First time a new bytecode was introduced in the history of the JVM speciﬁcation ■ A new type of call ■ Previously: invokestatic, invokevirtual, invoke- interface and invokespecial. ■ But more than that… 9\n\n10. Invokedynamic Introduction ■ Along with its support framework, it may be roughly thought of as a function pointer ■ A way to do a call without the customary Java-language checks ■ Enables completely custom linkage ■ Essential if you want to hotswap method call targets ■ Not something that javac will spit out ■ At least not currently. Lambdas will probably use it. ■ First and foremost something you generate yourself when you weave bytecode for a dynamic language 10\n\n11. invokedynamic bytecode calls Bootstrap Method Bootstrap Method returns java.lang.invoke.CallSite contains Target (java.lang.invoke. MethodHandle) 11\n\n12. Invokedynamic 20: invokedynamic #97,0 java.lang.invoke.CallSite // InvokeDynamic #0:”func”:(Ljava/lang/Object; Ljava/lang/Object;)V ■ The concept of a CallSite public static CallSite bootstrap( ■ One invokedynamic per CallSite final MethodHandles.Lookup lookup, final String name, ■ Returned by the bootstrap call final MethodType type, Object… callsiteSpecificArgs) { ■ The holder for a a MethodHandle MethodHandle target = f( name, ■ The MethodHandle is the target callSiteSpecificArgs); // do stuff ■ Target may be mutable or not CallSite cs = new MutableCallSite(target); // do stuff ■ getTarget / setTarget return cs; } 12\n\n13. Invokedynamic java.lang.invoke.MethodHandle ■ MethodHandle concept: ■ “This is your function pointer” MethodType mt = MethodType.methodType(String.class, char.class, char.class); MethodHandle mh = lookup.findVirtual(String.class, \"replace\", mt); String s = (String)mh.invokeExact(\"daddy\", 'd', 'n'); assert \"nanny\".equals(s) : s; 13\n\n14. Invokedynamic java.lang.invoke.MethodHandle MethodHandle add = MethodHandles.guardWithTest( ■ MethodHandle concept: isInteger, addInt ■ “This is your function pointer” addDouble); ■ Logic may be woven into it ■ Guards: c = if (guard) a(); else b(); ■ Parameter transforms/bindings 14\n\n15. Invokedynamic java.lang.invoke.MethodHandle MethodHandle add = MethodHandles.guardWithTest( ■ MethodHandle concept: isInteger, addInt ■ “This is your function pointer” addDouble); ■ Logic may be woven into it SwitchPoint sp = new SwitchPoint(); MethodHandle add = sp.guardWithTest( ■ Guards: c = if (guard) a(); else b(); addInt, addDouble); ■ Parameter transforms/bindings // do stuff ■ SwitchPoints if (notInts()) { sp.invalidate(); ■ Function of 2 MethodHandles, a and b } ■ Invalidation: rewrite CallSite a to b 15\n\n16. Invokedynamic Performance of invokedynamic on the JVM ■ What about performance? ■ The JVM knows a callsite target and can inline it ■ No strange workaround machinery involved ■ Standard adaptive runtime assumptions, e.g. “guard taken” ■ Superior performance ■ At least in theory ■ If you, for example, change CallSite targets too many times, you will certainly be punished for it by the JVM deoptimizing your code 16\n\n17. Invokedynamic Want to know more? ■ Julien Ponge (@jponge) has just ﬁnished a great technical introduction article to invokedynamic ■ Will be published ASAP ■ Plenty of tutorials on the net ■ Use the ASM framework to play around with invokedynamic 17\n\n18. Implementing Dynamic Languages on the JVM 18\n\n19. Dynamic languages on the JVM Hows and whys? ■ I want to implement a dynamic language on the JVM ■ Bytecode is already platform independent ■ So what’s the problem? 19\n\n20. Dynamic languages on the JVM Hows and whys? ■ I want to implement a dynamic language on the JVM ■ Bytecode is already platform independent ■ So what’s the problem? ■ [don’t get me started on bytecode] 20\n\n21. Dynamic languages on the JVM Hows and whys? ■ I want to implement a dynamic language on the JVM ■ Bytecode is already platform independent ■ So what’s the problem? ■ [don’t get me started on bytecode] ■ Rewriting callsites – changing assumptions 21\n\n22. Dynamic languages on the JVM Hows and whys? ■ I want to implement a dynamic language on the JVM ■ Bytecode is already platform independent ■ So what’s the problem? ■ [don’t get me started on bytecode] ■ Rewriting callsites – changing assumptions ■ But aside from that, the big problem is types! 22\n\n23. Dynamic languages on the JVM The problem with changing assumptions ■ Assumptions may change at runtime to a much larger extent than typically is the case in a Java program ■ What? You deleted a ﬁeld? ■ Then I need to change where this getter goes. ■ And all places who assume the object layout has more ﬁelds need to update 23\n\n24. Dynamic languages on the JVM The problem with changing assumptions ■ Assumptions may change at runtime to a much larger extent than typically is the case in a Java program ■ What? You deleted a ﬁeld? ■ Then I need to change where this getter goes. ■ And all places who assume the object layout has more ﬁelds need to update ■ What? You redeﬁned Math.sin to always return 17? 24\n\n25. Dynamic languages on the JVM The problem with changing assumptions ■ Assumptions may change at runtime to a much larger extent than typically is the case in a Java program ■ What? You deleted a ﬁeld? ■ Then I need to change where this getter goes. ■ And all places who assume the object layout has more ﬁelds need to update ■ What? You redeﬁned Math.sin to always return 17? ■ What? You set func.constructor to 3? You are an idiot, but … OK then… 25\n\n26. Dynamic languages on the JVM The problem with weak types ■ Consider this Java method int sum(int a, int b) { return a + b; } 26\n\n27. Dynamic languages on the JVM The problem with weak types ■ Consider this Java method int sum(int a, int b) { iload_1 return a + b; iload_2 } iadd ireturn ■ In Java, int types are known at compile time ■ If you want to compile a double add, go somewhere else 27\n\n28. Dynamic languages on the JVM The problem with weak types ■ Consider instead this JavaScript function function sum(a, b) { return a + b; } 28\n\n29. Dynamic languages on the JVM The problem with weak types ■ Consider instead this JavaScript function function sum(a, b) { ??? return a + b; ??? } ??? ??? ■ Not sure… a and b are something… that can be added. ■ The + operator does a large number of horrible things. ■ Might even not commute if we are dealing with e.g. Strings here. 29\n\n30. Dynamic languages on the JVM ECMA 262 – The addition operator 30\n\n31. Dynamic languages on the JVM The problem with weak types ■ Let’s break it down a bit ■ In JavaScript, a and b may start out as ints that ﬁt in 32 bits ■ But the addition may overﬂow and turn the result into a long ■ … or a double ■ A JavaScript “number” is a somewhat fuzzy concept to the JVM ■ True for e.g. Ruby as well ■ Type inference at compile time is way too weak 31\n\n32. Dynamic languages on the JVM GAMBLE! ■ Remember the axiom of adaptive runtime behavior: GAMBLE! ■ The bad slow stuff probably doesn’t happen ■ If we were wrong and it does, take the penalty THEN, not now. ■ Pseudo Java – just a thought pattern function sum(a, b) { try { int sum = (Integer)a + (Integer)b; checkIntOverflow(a, b, sum); return sum; } catch (OverFlowException | ClassCastException e) { return sumDoubles(a, b); } } 32\n\n33. Dynamic languages on the JVM GAMBLE! ■ Type specialization is the key ■ The previous example was specialization without involving the Java 7+ mechanisms ■ Even more generic: final MethodHandle sumHandle = MethodHandles.guardWithTest( intsAndNotOverflow, sumInts, sumDoubles); function sum(a, b) { return sumHandle(a, b); } 33\n\n34. Dynamic languages on the JVM GAMBLE! ■ We can use other mechanisms than guards too ■ Rewrite the target MethodHandle on ClassCastException ■ SwitchPoints ■ Approach can be extended to Strings and other objects ■ But the compile time types should be used if they ARE available ■ Let’s ignore integer overﬂows for now ■ Primitive number to object is another common scenario ■ Combine runtime analysis and invalidation with static types from the JavaScript compiler 34\n\n35. Dynamic languages on the JVM Add a pinch of static analysis a = 4711.17; b = 17.4711; res *= sum(a, b); //a, b known doubles //result known double 35\n\n36. Dynamic languages on the JVM Add a pinch of static analysis a = 4711.17; //generic sum b = 17.4711; sum(OO)O: res *= sum(a, b); aload_1 aload_2 //a, b known doubles invokestatic JSRuntime.add(OO) //result known double areturn 36\n\n37. Dynamic languages on the JVM Add a pinch of static analysis a = 4711.17; //generic sum b = 17.4711; sum(OO)O: res *= sum(a, b); aload_1 aload_2 //a, b known doubles invokestatic JSRuntime.add(OO) //result known double areturn ldc 4711.17 invokedynamic sum(OO)O dstore 1 invoke JSRuntime.toDouble(O) ldc 17.4711 dload 3 dstore 2 dmul dload 1 dstore 3 invoke JSRuntime.toObject(O) dload 2 invoke JSRuntime.toObject(O)) 37\n\n38. Dynamic languages on the JVM Specialize the sum function for this callsite ■ Doubles would still run faster than semantically equivalent objects ■ Nice and short – just 4 bytecodes, no calls into the runtime // specialized double sum sum(DD)D: dload_1 dload_2 dadd dreturn 38\n\n39. Dynamic languages on the JVM But what if it’s overwritten? ■ In dynamic languages, anything can happen ■ What if the program does this between callsite executions? sum = function(a, b) { return a + ‘string’ + b; } ) ■ Use a SwitchPoint and generate a revert stub. Doesn’t need to be explicit bytecode ■ The CallSite will now point to the revert stub and not the double specialization 39\n\n40. Dynamic languages on the JVM sum(DD)D: sum_revert(DD)D: //hope this doesn’t happen dload_1 dload_1 dload_2 invokestatic JSRuntime.toObject(D) dadd dload_2 dreturn invokestatic JSRuntime.toObject(D) invokedynamic sum(OO)O invokestatic JSRuntime.toNumber(O) dreturn None of the revert stub needs to be generated as actual explicit bytecode. MethodHandle combinators sufﬁce. 40\n\n41. Dynamic languages on the JVM Result ldc 4711.17 dstore 1 ldc 17.4711 dstore 2 dload 1 invoke JSRuntime.toObject(O) dload 2 invoke JSRuntime.toObject(O) invokedynamic sum(OO)O invoke JSRuntime.toDouble(O) dload 3 dmul dstore 3 41\n\n42. Dynamic languages on the JVM Result ldc 4711.17 ldc 4711.17 dstore 1 dstore 1 ldc 17.4711 ldc 17.4711 dstore 2 dstore 2 dload 1 dload 1 invoke JSRuntime.toObject(O) dload 2 dload 2 invoke JSRuntime.toObject(O) //likely inlined: invokedynamic sum(OO)O invokedynamic sum(DD)D invoke JSRuntime.toDouble(O) dload 3 dload 3 dmul dmul dstore 3 dstore 3 42\n\n43. Dynamic languages on the JVM Field Representation ■ Assume types of variables don’t change. If they do, they converge on a ﬁnal type quickly ■ Internal type representation can be a ﬁeld, several ﬁelds or a “tagged value” ■ Reduce data bandwidth var x; // naïve impl print(x); // getX()O // don’t do this ■ Reduce boxing x = 17; // setX(I) class XObject { ■ Remember undeﬁned print(x); // getX()O int xi; double xd; ■ Representation problems x *= 4711.17; // setX(D) Object xo; print(x); // getX()O } x += “string”; // setX(O) print(x); // getX()OO 43\n\n44. Dynamic languages on the JVM Field Representation – getters on the ﬂy – use SwitchPoints ■ Not actual code – generated by MethodHandles int getXWhenUndefined()I { int getXWhenInt()I { return 0; return xi; } } double getXWhenUndefined()D { double getXWhenInt()D { return NaN; return JSRuntime.toNumber(xi); } } Object getXWhenUndefined()O { Object getXWhenInt()O { return Undefined.UNDEFINED; return JSRuntime.toObject(xi) } }; } } int getXWhenDouble()I { int getXWhenObject()I { return JSRuntime.toInt32(xd); return JSRuntime.toInt32(xo); } } double getXWhenDouble()D { double getXWhenObject()D { return xd; return JSRuntime.toNumber(xo); } } Object getXWhenDouble()O { Object getXWhenObject()O { return JSRuntime.toObj(xd); return xo; } } 44\n\n45. Dynamic languages on the JVM Field Representation – setters ■ Setters to a wider type T trigger all SwitchPoints up to that type void setXWhenInt(int i) { this.xi = i; //we remain an int, wohooo! } void setXWhenInt(double d) { this.xd = d; SwitchPoint.invalidate(xToDouble); //invalidate next switchpoint, now a double; } void setXWhenInt(Object o) { this.xo = o; SwitchPoint.invalidate(xToDouble, xToObject) //invalidate all remaining switchpoints, now an Object forevermore. } } 45\n\n46. Dynamic languages on the JVM Tagged values? ■ One of the worst problems in dynamic languages on the JVM is primitive boxing ■ A primitive value should not have object overhead ■ Allocation / boxing / unboxing ■ The JVM cannot remove all of these ■ Need a way to interleave primitive types with references ■ Doing it for the entire JVM would be extremely disruptive ■ Supply your own implementation to the JVM? ■ Tagged arrays – work in progress 46\n\n47. The Nashorn Project JavaScript using invokedynamic 47\n\n48. The Nashorn Project • A Rhino for 2013 (aiming for open source release in the Java 8 timeframe) • Nashorn is German for Rhino (also sounds cool) 48\n\n49. The Nashorn Project • A Rhino for 2013 (aiming for open source release in the Java 8 timeframe) • Nashorn is German for Rhino (also sounds cool) 49\n\n50. The Nashorn Project Rationale ■ Create a 100% pure Java invokedynamic based POC of a dynamic language implementation on top of the JVM ■ It should be faster than any previous invokedynamic-free implementations ■ Become the ultimate invokedynamic consumer, to make sure this stuff works ■ Performance bottlenecks in the JVM should be cross communicated between teams 50\n\n51. The Nashorn Project Rationale ■ JavaScript was chosen ■ Rhino, the only existing equivalent is slow ■ Rhino codebase contains all deprecated backwards compatibility ever ■ Ripe for replacement ■ JSR-223 – Java to JavaScript, JavaScript to Java ■ Automatic support. Very powerful ■ The JRuby folks are already doing an excellent work with JRuby 51\n\n52. The real reason – Keep up with Atwood’s law: Atwood’s law: “Any application that can be written in JavaScript, will eventually be written in JavaScript” - James Atwood (founder, stackoverﬂow.com) 52\n\n53. The real reason – Keep up with Atwood’s law: 2nd law of Thermodynamics: “In all closed systems, entropy must remain the same or increase” 53\n\n54. 54\n\n55. The Nashorn Project Rationale ■ Do a node.js implementation that works with Nashorn ■ “node.jar” (Async I/O implemented with Grizzly) ■ 4-5 people working fulltime in the langtools group. ■ Nashorn is scheduled for open source release in the Java 8 timeframe ■ Source available before ■ node.jar has no ofﬁcial schedule yet ■ Other things that will go into the JDK ■ Dynalink ■ ASM 55\n\n56. The Nashorn Project Challenge – JavaScript is an awful, horrible language 56\n\n57. The Nashorn Project Challenge – JavaScript is an awful, horrible language ■ ‘4’ - 2 === 2, but ‘4’ + 2 === ’42’ ■ Can I have variable declarations after their usages? Of course you can! ■ The entire with keyword ■ Number(“0xffgarbage”) === 255 ■ Math.min() > Math.max() === true ■ Array.prototype[1] = 17; var a = [,,,]; print(a) : [,17,] ■ So I take this ﬂoating point number and shift it right… ■ a.x looks just like a ﬁeld access ■ May just as easily be a getter with side effects (a too for that matter) ■ [] + {}, {} + [], [] + [], {} + {} ■ I could go on, but anyway, it’s a compiler/runtime writer’s worst nightmare 57\n\n58. Compliance Scene: a rainy fall evening at a pub in Stockholm. Attila (@asz) running the ECMA test suite [1]… ~11,500 tests… [1] http://test262.ecmascript.org 58\n\n59. 100%! WOHOO! 59\n\n60. The Nashorn Project Compliance ■ At the time of writing we have full ECMAScript compliance ■ This is better than ANY existing JavaScript runtime ■ Rhino, somewhat surprisingly, is only at ~94% ■ Shifting focus more and more towards performance… 60\n\n61. The Nashorn Project Performance 7000 6000 5000 4000 3000 rhino opt 9 nashorn 2000 1000 0 crypto deltablue earley-boyer nashorn navierstokes raytrace regexp rhino opt 9 richards splay 61\n\n62. The Nashorn Project So why not V8/Spidermonkey/other native runtime then? ■ Nashorn is not a single threaded C++ monolith ■ Nashorn is a lot smaller in scope as it does not need its own runtime ■ nashorn.jar is just slightly larger than 1MB ■ [including ASM and experimental stuff that will go away] ■ Project Jigsaw will help us even more ■ Multithreading ■ Free portability across hardware platforms ■ Our node.jar implementation is already quite fast and much smaller than node.js 62\n\n63. The Nashorn Project So why not V8/Spidermonkey/other native runtime then? import javax.script.*; ■ JSR-223 Object z = x.get(“y”); ■ Powerful x.put(“y”, z); ■ Java can call JavaScript var random = new java.util.Random(); ■ JavaScript can call Java java.lang.System.out.println(random.nextInt()); ■ Makes things like node.jar signiﬁcantly less complex ■ You WANT this a JavaScript developer var runnable = new java.lang.Runnable({ run: function() { console.log('running'); } }); var executor = java.util.concurrent.Executors. newCachedThreadPool(); executor.submit(runnable); 63\n\n64. The Nashorn Project So why not V8/Spidermonkey/other native runtime then? ■ Killer apps? It is very attractive with a small self contained node.jar in the Java EE cloud as well as in embedded environments ■ We have successfully deployed Nashorn running node.jar on a Raspberri Pi board. ■ How cool is that? ;-) ■ Java Mission Control! ■ The future will bring further Nashorn AND JVM performance improvements. 64\n\n65. The Nashorn Project JVM improvements 65\n\n66. The Nashorn Project JVM improvements ■ Inlining artifacts matter a lot for callsites ■ Need incremental inlining ■ … which begets local escape analysis ■ … which begets boxing removal ■ Being worked on! ■ Permgen removal ■ Classic problem with OOM generating lots of bytecode ■ Stability ■ Java 8 MethodHandle framework rewritten mostly in Java 66\n\n67. The Nashorn Project Nashorn improvements ■ Performance, performance, performance. ■ Look at parallel APIs ■ Library improvements ■ RegExp ■ Possible integration with existing 3rd party solutions ■ TaggedArrays – grope around a bit in the JVM internals ■ Not too much 67\n\n68. The Nashorn Project Open source! ■ The good news:YOU CAN HELP! ■ The Da Vinci Machine Project: http://openjdk.java.net/projects/mlvm/ ■ The open source plan is 1. Ask the community to contribute functionality, testing, performance, performance analysis, bug ﬁxes, library optimizations, test runs with “real” applications, browser simulation frameworks, kick-ass hybrid Java solutions 2. …? 3. Proﬁt! 68"
    }
}