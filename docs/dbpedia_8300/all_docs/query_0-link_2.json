{
    "id": "dbpedia_8300_0",
    "rank": 2,
    "data": {
        "url": "https://rubytalk.org/t/can-we-use-direct-ruby-instaed-of-javascript/62363",
        "read_more_link": "",
        "language": "en",
        "title": "Can we use direct ruby instaed of javascript?",
        "top_image": "https://global.discourse-cdn.com/standard17/uploads/rubytalk/original/2X/b/b23c93119f13a69c44c9bb1757a17db7957e9be3.png",
        "meta_img": "https://global.discourse-cdn.com/standard17/uploads/rubytalk/original/2X/b/b23c93119f13a69c44c9bb1757a17db7957e9be3.png",
        "images": [
            "https://global.discourse-cdn.com/standard17/uploads/rubytalk/original/2X/2/29930ba0aa5b93e5d3e67ff71a17feab3d9712f4.jpeg",
            "https://ruby-talk.trydiscourse.com/images/emoji/twitter/slight_smile.png?v=5",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/slight_smile.png?v=12",
            "https://emoji.discourse-cdn.com/twitter/frowning.png?v=12"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Michal_hramrach_Such (Michal 'hramrach' Suchanek)",
            "Chad_Perrin (Chad Perrin)",
            "Phil (Phil)",
            "Peter_Zotov (Peter Zotov)",
            "Julian_Leviston (Julian Leviston)",
            "Josh_Cheek (Josh Cheek)",
            "John_Morrice (John Morrice)",
            "Sniper_Abandon (Sniper Abandon)",
            "Dhruva_Sagar (Dhruva Sagar)",
            "Mike_Stephens (Mike Stephens)"
        ],
        "publish_date": "2011-04-07T06:44:50+00:00",
        "summary": "",
        "meta_description": "Hi Ninjas, \ni am a ROR Developer . \nI feel happy to develop in ROR over other frameworks because of the \nsimplicity of Ruby Language \nFor browser side code i am using Javascript/ActionScript . \nbut i would like to use Ru&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/standard17/uploads/rubytalk/optimized/2X/7/74f2816b4bec60b2d07c6b5fd37ea8525c0b0bba_2_32x32.png",
        "meta_site_name": "Ruby Mailing List Mirror",
        "canonical_link": "https://rubytalk.org/t/can-we-use-direct-ruby-instaed-of-javascript/62363",
        "text": "Hi Ninjas,\n\ni am a ROR Developer .\n\nI feel happy to develop in ROR over other frameworks because of the\n\nsimplicity of Ruby Language\n\nFor browser side code i am using Javascript/ActionScript .\n\nbut i would like to use Ruby in browser side also (instead of\n\nJavascript/ActionScript)\n\nIs there any way to do this ?\n\nor\n\nIs there any active development /future plan to implement Ruby VM on\n\nbrowser engine (instead of javascript/actionscript engines ) ?\n\nif yes? then i also want to join in that community/dev team .\n\nif not? please some body initiate a plan to develop a Ruby VM for\n\nbrowser engine (so i can join with you)\n\ni know already that prototype/jquery frameworks are there but those are\n\nnot\n\nlooking like pure ruby code\n\nAnyone have an Idea/Suggestion/Intrest ?\n\nplease let me know\n\nby\n\nMokkai @ TLI\n\n···\n\n--\n\nPosted via http://www.ruby-forum.com/.\n\nDo we actually need to have full ruby spec implemented? Don't forget\n\nabout the 20/80 rule of the universe - there are only 20 % of features\n\nthat provide 80% of value.\n\nIt seems that it's impossible in any time soon to create a full-featured\n\nRuby JS. There were lots of project of this kind (HotRuby, RubyJS, Red,\n\n.... google github) and it seems that all of them are dead by now,\n\nalthough some of them got some attention in past.\n\nBut look at the success of CoffeeScript, it doesn't try to solve all\n\nproblems at once, but it eliminates the most annoying problems.\n\nMaybe it would be better do it in the same way? Take the core part, that\n\ncan be easily implemented and leave the rest to the better time?\n\n···\n\n--\n\nPosted via http://www.ruby-forum.com/.\n\nAccidentally went off list for a bit.\n\n>>\n\n>>>\n\n>>> >>\n\n>>> >> > That is incredibly cool! But can you really implement *any*\n\n>>> >> > language?\n\n>>> >> > What\n\n>>> >> > about languages that are completely different from javascript? In\n\n>>> >> > Haskell,\n\n>>> >> > for example, everything happens lazily, data is immutable, there\n\nis\n\n>>> >> > a\n\n>>> >> > complex type system. Can you really map this right to javascript?\n\n>>> >> > (or am\n\n>>> >> > I\n\n>>> >> > misunderstanding OMeta?)\n\n>>> >> >\n\n>>> >>\n\n>>> >> This is incredibly cool but can you really translate any language\n\ninto\n\n>>> >> machine code?\n\n>>> >> What about languages that are completely different from machine\n\ncode?\n\n>>> >> In Haskell, for example, everything happens lazily, data is\n\nimmutable,\n\n>>> >> there is a complex type system. Can you really map this right to\n\n>>> >> machine code? (Or am I misunderstanding your question?)\n\n>>> >>\n\n>>> >> Thanks\n\n>>> >>\n\n>>> >> Michal\n\n>>> >\n\n>>> > Your phraseology is confusing, but yes, I assume you are\n\n>>> > misunderstanding my\n\n>>> > question. In the video, he didn't translate to machine code, he\n\n>>> > translated\n\n>>> > to javascript which he then interpreted (at least that is how I\n\n>>> > understand\n\n>>> > it). Also, I am also pretty confident that Haskell doesn't map\n\nstraight\n\n>>> > into\n\n>>> > machine code, I think it must embed a runtime to manage things like\n\n>>> > thunks\n\n>>> > and garbage collection.\n\n>>> >\n\n>>>\n\n>>> And how is translating to JavaScript different from translating to\n\n>>> machine code?\n\n>>>\n\n>>> Thanks\n\n>>>\n\n>>> Michal\n\n>>\n\n>> First of all, can JS even generate and execute machine code? I'd expect\n\n>> that to require knowledge of the platform and to be handled within the\n\n>> interpreter, not at the language level. IDK, I'll assume we mean\n\nassembly\n\n>> code for the rest of the post.\n\n>>\n\n>> Assembly (x86, anyway, IDK anything at all about any other kinds) is\n\nbased\n\n>> on a certain infrastructure such as a stack, a heap, registers that keep\n\n>> track of where you are at in your code, where you are at on the stack,\n\nand\n\n>> so forth (I'm not positive these registers *must* be used this way, but\n\nat\n\n>> least that is how I've always seen them used). AFAIK, JS doesn't have\n\nthese\n\n>> inherently. You could construct a framework that mimics a computer, and\n\nthen\n\nPresumably OMeta is as complete as x86 assembly. Quite likely it has\n\ndifferent set of primitives (or insctructions) but that does not mean\n\ntranslating to it is any more challenging than to x86 assembly to\n\nwhich all the named languages were translated already.\n\nRuby isn't translated to Assembly, you must interpret it.\n\n>> recreate the assembly instruction set but :\n\n>>\n\n>> (a) that isn't what he did in the video\n\n>>\n\n>> (b) if your language requires a runtime, then it isn't translatable.\n\nMaybe\n\n>> you could embed the runtime into the output program, but does it count\n\nas a\n\n>> translation if you break 1:1 relationship between before and after code?\n\n>> Even compiled languages don't do this, joining libraries is done by the\n\n>> linker, after the code is translated. (I'm not clear on the difference\n\n>> between assemblers and compilers)\n\n>>\n\n>> (c) by mapping into JS, don't you lose all the qualities that the\n\nlanguage\n\n>> has on its own? ie you have the weaknesses of your actual language on\n\ntop of\n\n>> the languages of JS (ie I would expect C to be slower than JS now,\n\nbecause\n\n>> your C is being translated into what appears to be assembly\n\ninstructions,\n\n>> but is actually JS, and your final code is actually a whole series of\n\n>> indirect JS commands) So if this is the case, you have a leaky\n\nabstraction\n\n>> (The Law of Leaky Abstractions – Joel on Software)\n\nI don't see the leak anywhere, nor do I see any reason to translate C to\n\nJS.\n\nThe hypothesis was that you could implement *any* language. C falls within\n\nthat set. The leak is that JavaScript does not have the properties of\n\nassembly. There is a reason you don't write systems level code with\n\ninterpreted languages, because they have very different properties. Wouldn't\n\nimplementing a systems level language in an interpreted language cause the\n\nsystems level language to lose the attributes that make it a viable choice\n\nfor such a domain?\n\n>>\n\n>> Anyway, if you read my post, you'll see I didn't assert that it can't be\n\n>> done, I just asked whether it could. If you think it can and it's\n\nobvious,\n\n>> then how about an explanation of the process. If not, then why do you\n\nkeep\n\n>> asking me these questions? I'm not an expert on the domain, I just\n\nwatched\n\n>> the video.\n\n>\n\n> Also, why are we off list?\n\n>\n\nBecause some three emails back you sent the email only to me, not the list.\n\nHmm, seems to be because you CC'd me in your response to the ML, so when I\n\nhit reply, gmail sent it to you instead of the list. I changed the recipient\n\nof this one, hopefully we're back on list. You might change your client to\n\navoid that, it seems unlikely that I'll be the only one to do this.\n\n···\n\nOn Mon, Apr 11, 2011 at 7:55 AM, Michal Suchanek <hramrach@centrum.cz>wrote:\n\nOn 11 April 2011 14:35, Josh Cheek <josh.cheek@gmail.com> wrote:\n\n> On Mon, Apr 11, 2011 at 7:30 AM, Josh Cheek <josh.cheek@gmail.com> > wrote:\n\n>> On Mon, Apr 11, 2011 at 6:48 AM, Michal Suchanek <hramrach@centrum.cz> > >> wrote:\n\n>>> On 11 April 2011 12:02, Josh Cheek <josh.cheek@gmail.com> wrote:\n\n>>> > On Mon, Apr 11, 2011 at 4:40 AM, Michal Suchanek < > hramrach@centrum.cz> > >>> > wrote:\n\n>>> >> On 8 April 2011 15:03, Josh Cheek <josh.cheek@gmail.com> wrote:\n\nRuby isn't translated to Assembly, you must interpret it.\n\nYARV generates byte code. The byte code is interpreted by the Ruby VM.\n\nThe Ruby VM runs on an operating system. The Operating system runs on\n\nmachine code.\n\nRuby *can* run on machine code, or it wouldn't run at all. The\n\nquestion is how many intermediary steps are needed to get it running,\n\nand at what costs (it's generally easier, it appears, to run a dynamic\n\nlanguage on some sort of interpreter, if only to make an abstraction\n\nonly once).\n\nThe hypothesis was that you could implement *any* language. C falls within\n\nthat set. The leak is that JavaScript does not have the properties of\n\nassembly.\n\nIt doesn't need them. The compiler takes care of that.\n\nSince IE9 was just released to the general public, here's an MSDN\n\narticle on Chakra:\n\nhttp://blogs.msdn.com/b/ie/archive/2010/03/18/the-new-javascript-engine-in-internet-explorer-9.aspx\n\nIE9 is a latecomer to the \"compile JS\" party, too. Google's V8 is one\n\nof the first.\n\nThere is a reason you don't write systems level code with\n\ninterpreted languages, because they have very different properties. Wouldn't\n\nimplementing a systems level language in an interpreted language cause the\n\nsystems level language to lose the attributes that make it a viable choice\n\nfor such a domain?\n\nThat's a question of optimization.\n\nEven GCC has several optimization switches; some more, some less\n\ndangerous to apply to code.\n\nC's whole reason of existence is that it is a higher level language\n\nthan assembly with the compiler taking care of translating the\n\nconstructs of the higher level language into something that a CPU\n\nunderstands.\n\nHmm, seems to be because you CC'd me in your response to the ML, so when I\n\nhit reply, gmail sent it to you instead of the list. I changed the recipient\n\nof this one, hopefully we're back on list. You might change your client to\n\navoid that, it seems unlikely that I'll be the only one to do this.\n\nYup, back on list. Though, IME GMail doesn't change the reply-to\n\nheader (maybe it got borked somewhere).\n\n···\n\nOn Mon, Apr 11, 2011 at 3:17 PM, Josh Cheek <josh.cheek@gmail.com> wrote:\n\n--\n\nPhillip Gawlowski\n\nThough the folk I have met,\n\n(Ah, how soon!) they forget\n\nWhen I've moved on to some other place,\n\nThere may be one or two,\n\nWhen I've played and passed through,\n\nWho'll remember my song or my face.\n\nI think it might be actually quite interesting for the original poster to take some of FONC's work such as OMeta, and then the Rubinius project... and use it to build Ruby in OMeta, which could then be used quite easily to plug this Ruby implementation in OMeta into the JavaScript implementation OMeta which is already existing...\n\nFor an example of SmallTalk already written in OMeta/JS (ie SmallTalk running inside Javascript, through OMeta), please see:\n\nhttp://tinlizzie.org/ometa/ometa-js-old/\n\nGiven that JavaScript is pretty much the *only* fully realised cross-browser cross-platform implemented programming language that we have available to us (ie guaranteed to be on EVERY machine for the last 10 years), and also given that so much work is continually put into making these interpreters fast and small, I think writing things on top of JavaScript is a brilliant idea.\n\nThe other interesting thing about targeting OMeta as an implementation language for a VM in Ruby, while incredibly technically challenging, is that it would be infinitely rewarding, as there are versions of OMeta written in most common programming languages already (which means the target language base of the Ruby implementation in OMeta would grow without any additional effort on the part of the programmers)... people are writing OMeta implementations in various languages, and there are already ones written in:\n\nOMeta itself, C#, SmallTalk, Scheme, Lisp, Python and Ruby (I'm fairly sure there are some written in id.st (or Cola, whatever you want to call it) as well ;-))\n\nJust my two cents.\n\n\"You are now able to program any browser in the world with any language you want\"\n\nJulian.\n\n···\n\n----------------------------------------------\n\nBuy my new album! 16 Sep 2010:\n\nhttp://itunes.apple.com/au/album/erste-zeit/id393326346\n\nOn 08/04/2011, at 12:01 PM, Chad Perrin wrote:\n\nOn Fri, Apr 08, 2011 at 05:37:49AM +0900, Peter Zotov wrote:\n\nOn Fri, 8 Apr 2011 01:48:58 +0900, Chad Perrin wrote:\n\nI don't see any license listed. Did I overlook it?\n\nThe Ruby license, of course. It is implicit.\n\n(Indeed, I just forgot to add it to git. Fixed already.)\n\nI haven't looked closely enough to know which way this goes, but one of\n\ntwo sets of conditions are likely to apply here:\n\n1. It's \"implicit\" because it incorporates Ruby Licensed code in a way\n\nthat requires the Ruby License to be applied to the whole project. In\n\nthis case, you violate the terms of the license if you do not include the\n\nlicense text with the code.\n\n2. It's not \"implicit\", and needs license notification.\n\nI'm not a lawyer, but I spend a lot of time trying to avoid giving\n\nlawyers reason to contact me with bad news.\n\n--\n\nChad Perrin [ original content licensed OWL: http://owl.apotheon.org ]\n\nI don't think my brain would be very fond of this, I like starting with the\n\nthing I know and applying a series of transformations to it via methods to\n\nturn it into the thing I want. I feel like I'd have to keep jumping to the\n\nright to see what I have, and then back to the left to see what I'm doing to\n\nit.\n\njoin of map(&:name) of students\n\njoin of map(&:name) of courses\n\nThey are the same until the very end, so you can't know what you're talking\n\nabout until after you're done talking about it.\n\nBut maybe if I experienced I'd become more familiar some way of thinking\n\nthat fits better with this syntax. Maybe in practice, it would only be used\n\nin situations like `name of student` where it feels natural and the context\n\nis straightforward, and not in situations like `join of array` where join is\n\nan action rather than an attribute.\n\nIDK, I'd try it out if someone went and did it, but I don't think I'd\n\nadvocate that someone put forth the effort to do it otherwise (though it\n\nmight not be very difficult, might just require a handful of lines of yacc\n\nor something)\n\n···\n\nOn Fri, Apr 8, 2011 at 3:34 AM, Julian Leviston <julian@coretech.net.au>wrote:\n\nHi,\n\nConsider this:\n\nsome_data.to_s.split(\"\\n\").each{|item| puts item}\n\nhow about an alternative syntax for the dot operator:\n\neach{|item| puts item} of split(\"\\n\") of to_s of some_data\n\nor, more intelligently:\n\nthis_school.students.addresses.map{|address| a.all_as_one_sentence}\n\nmap{|address| all_as_one_sentence of address} of addresses of students of\n\nthis_school\n\nJust wondering if this is a possibility?\n\njulian.\n\nThat is incredibly cool! But can you really implement *any* language?\n\nWhat about languages that are completely different from javascript?\n\nIn Haskell, for example, everything happens lazily, data is\n\nimmutable, there is a complex type system. Can you really map this\n\nright to javascript? (or am I misunderstanding OMeta?)\n\nMy take here is full of handwaving. I'll admit I've never of O-Meta\n\nbefore.\n\nComp sci point of view:\n\nOMeta is turing complete? If so then by universality it is possible.\n\nFurther, OMeta can run C#, it doesn't take a huge stretch of the\n\nimagine to say it can run C. Haskell can compile to C*. Therefore it can\n\nrun Haskell.\n\nThe best way to do it though would be to port the STG-Machine** into\n\nO-meta. Fun!\n\n* Check the list of GHC features Glasgow Haskell Compiler — The Glasgow Haskell Compiler\n\n** See \"Implementing lazy functional languages on stock hardware: the\n\nSpineless Tagless G-machine\", Simon Peyton Jones 1992. The link on SPJ's\n\nwebsite is dead unforunately\n\nI've been tempted to port STG into ruby before. Or maybe just\n\nG-Machine because it's simpler. It just sounds like a fun little\n\nproject.\n\nSorry for yet another random long interjection on functional\n\nprogramming. SIGH."
    }
}