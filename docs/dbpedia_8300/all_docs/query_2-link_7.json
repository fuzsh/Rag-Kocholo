{
    "id": "dbpedia_8300_2",
    "rank": 7,
    "data": {
        "url": "https://stackoverflow.com/questions/2614747/why-are-the-interpreters-of-all-popular-scripting-languages-written-in-c-if-not",
        "read_more_link": "",
        "language": "en",
        "title": "Why are the interpreters of all popular scripting languages written in C (if not in C at least not in C++)?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/86757d54b3713cb6561d4f0d959139c5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/37b4496dcb5135faf24beb64b4d72b8b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ca5a23ced3d81ee8bfa73b8fdc1677c2?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/b03410a67ad6b9cf3fce7b0bf45084c8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/3979b480285603e0939e4bc37808a84c?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ed181f8c80df53d2b67a4f4fff088ed4?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/1be785d1d788b82929e55fc83a9f0aaa?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/bb55653d537b073681395afbafad706b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0f1316ecb725006d020998e6b8a0740c?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/2614747/ivc/ccf8?prg=d1d49fa9-a74a-4af7-94da-cf46153d1ab1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-04-10T19:59:30",
        "summary": "",
        "meta_description": "I recently asked a question on switching from C++ to C for writing an interpreter for speed and I got a comment from someone asking why on earth I would switch to C for that.\n\nSo I found out that I",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/2614747/why-are-the-interpreters-of-all-popular-scripting-languages-written-in-c-if-not",
        "text": "Ruby dates back to 1995. If you were writing an interpreter in 1995, what were your options? Java was released in the same year. (And was painfully slow in v1.0 and in many ways, not really worth using)\n\nC++ was not yet standardized, and compiler support for it was very sketchy. (it had also not yet made the transition to the \"modern C++\" that we use today. I think the STL was proposed for standardization around this time as well. It didn't actually get added to the standard until years later. And even after it was added, it took several more years for 1) compilers to catch up, and 2) people to get used to this generic programming style. Back then, C++ was an OOP language first and foremost, and in many cases, that style of C++ was quite a bit slower than C. (In modern C++ code, that performance difference is pretty much eliminated, partly through better compilers, and partly through better coding styles, less reliance on OOP constructs and more on templates and generic programming)\n\nPython was started in 1991. Perl is even older (1987)\n\nPHP is from 1995 as well, but additionally, and importantly, was created by a guy who knew virtually nothing of programming. (and yes, of course this has shaped the language in many important ways)\n\nThe languages you mention were started in C because C was the best bet for a portable, future-proof platform back then.\n\nAnd while I haven't looked this up, I'm willing to bet that apart from the PHP case, which is shaped by incompetence more than anything, the language designers of the other languages chose C because they *already knew it. So perhaps the lesson is not \"C is best\", but \"the language you already know is best\"\n\nThere are other reasons why C is often chosen:\n\nexperience and accessibility: C is a simple language that is fairly easy to pick up, lowering the barrier of entry. It's also popular, and there are a lot of experienced C programmers around. One reason why these languages have become popular might just be that it was easy to find programmers to help developing the interpreters. C++ is more complex to learn and use well. Today, that might not be so much of a problem, but 10 or 15 years ago?\n\ninteroperability: Most languages communicate through C interfaces. Since your fancy new language is going to rely on components written in other languages (especially in early versions when the language itself is limited and has few libraries), it's always nice and simple to call a C function.So since we're going to have some C code anyway, it might be tempting to go all the way and just write the whole thing in C.\n\nperformance: C doesn't get in your way much. It doesn't magically make your code fast, but it allows you to achieve good performance. So does C++, of course, or many other languages. But it's true for C as well.\n\nportability: Practically every platform has a C compiler. Until recently, C++ compilers were much more hit and miss.\n\nThese reasons don't mean that C is in fact a superior language for writing interpreters (or for anything else), they simply explain some of the motivations that have caused others to write in C.\n\nWhy are the interpreters of all popular scripting languages written in C and not in C++?\n\nWhat makes you think that they are written in C? In my experience, the majority of implementations for the majority of scripting languages are written in languages other than C.\n\nHere's a couple of examples:\n\nRuby\n\nBlueRuby: written in ABAP\n\nHotRuby: JavaScript\n\nRed Sun: ActionScript\n\nSmallRuby: Smalltalk/X\n\nMagLev: Ruby, GemStone Smalltalk\n\nSmalltalk.rb: Smalltalk\n\nAlumina: Smalltalk\n\nCardinal: PIR, NQP, PGE\n\nRubyGoLightly: Go\n\nYARI: Io\n\nJRuby: Java\n\nXRuby: Java\n\nMicrosoft IronRuby: C#\n\nthe original IronRuby by Wilco Bauwer: C#\n\nRuby.NET: C#\n\nNETRuby: C#\n\nMacRuby: Objective-C\n\nRubinius: Ruby, C++\n\nMetaRuby: Ruby\n\nRubyVM: Ruby\n\nPython\n\nIronPython: C#\n\nJython: Java\n\nPynie: PIR, NQP, PGE\n\nPyPy: Python, RPython\n\nPHP\n\nP8: Java\n\nQuercus: Java\n\nPhalanger: C#\n\nPerl6\n\nRakudo: Perl6, PIR, NQP, PGE\n\nPugs: Haskell\n\nSprixel: JavaScript\n\nv6.pm: Perl5\n\nElf: CommonLisp\n\nJavaScript\n\nNarcissus: JavaScript\n\nEjacs: ELisp\n\nJint: C#\n\nIronJS: F#\n\nRhino: Java\n\nMascara (ECMAScript Harmony Reference Implementation): Python\n\nECMAScript 4 Reference Implementation: Standard ML\n\nThe HotSpot JVM is written in C++, the Animorphic Smalltalk VM (from which HotSpot and V8 are derived) is written in C++, the Self VM (on which the Animorphic Smalltalk VM is based) is written in C++.\n\nInterestingly enough, in many of the above cases, the implementations that are not written in C, are actually faster than the ones written in C.\n\nAs an example of two implementations that are written in C, take Lua and CPython. In both cases, they are actually written in a small subset of a very old version of C. The reason for this is that they want to be highly portable. CPython, for example, runs on platform for which a C++ compiler doesn't even exist. Also, Perl was written in 1989, CPython in 1990, Lua in 1993, SpiderMonkey in 1995. C++ wasn't standardized until 1998.\n\nIf the question is about why C and not C++ the answer comes down to the fact that when you implement a scripting language the C++ object model comes into your way. Its so restricted that you will not be able to use it for your own objects.\n\nSo you can only use this for the internals and they there you usually do not get enough benefits from C++ over the much simpler C language, which makes it easier to port and distribute.\n\nThe only problem when implementing a script language in C are missing coroutine support (you have to switch your stack pointer in some way) and most important there is no way to do exception handling without a lot of overhead (compared to C++)."
    }
}