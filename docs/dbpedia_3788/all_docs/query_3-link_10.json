{
    "id": "dbpedia_3788_3",
    "rank": 10,
    "data": {
        "url": "https://www.mediawiki.org/wiki/Extension:LinkedWiki/lua",
        "read_more_link": "",
        "language": "en",
        "title": "Extension:LinkedWiki/lua",
        "top_image": "https://upload.wikimedia.org/wikipedia/mediawiki/4/46/Linkedwiki_Infobox.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/mediawiki/4/46/Linkedwiki_Infobox.png",
        "images": [
            "https://www.mediawiki.org/static/images/icons/mediawikiwiki.svg",
            "https://www.mediawiki.org/static/images/mobile/copyright/mediawikiwiki-wordmark.svg",
            "https://upload.wikimedia.org/wikipedia/mediawiki/thumb/4/46/Linkedwiki_Infobox.png/200px-Linkedwiki_Infobox.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/OOjs_UI_icon_notice-destructive.svg/18px-OOjs_UI_icon_notice-destructive.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://www.mediawiki.org/static/images/footer/wikimedia-button.svg",
            "https://www.mediawiki.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/mediawiki.png",
        "meta_site_name": "MediaWiki",
        "canonical_link": "https://www.mediawiki.org/wiki/Extension:LinkedWiki/lua",
        "text": "LinkedWiki provides a Lua Scribunto interface that implements functions to access data from RDF databases with SPARQL endpoints. If Scribunto is installed in your wiki, Lua modules and wiki templates can invoke these functions and the Linkedwiki Class.\n\nUsually, the part Lua of LinkedWiki used in infoboxes. Here, you can see an example.\n\nThe objective of this module is to create an infobox that is able to save directly in a RDF database and where data are marked with a red flag when data are different of another RDF database such as Wikidata.\n\n{{#invoke:Pape|infobox | Wikidata ID = Q132845 | Bnf ID = | Titre = Adrien IV | Image = http://commons.wikimedia.org/wiki/Special:FilePath/Pope%20Hadrian%20IV.jpg | Nom de naissance = Nicolas Breakspear | Date de naissance = 1100-1-1 | Naissance précision (années) = 10 | Lieu de naissance = Abbots Langley | Date de décès = 1159-09-1 | Lieu de décès = Anagni | Election au pontificat = 1154-12-4 | Intronisation = 1154-12-5 | Fin du pontificat = 1159-9-1 }}\n\nThe module uses the Extension:Capiunto.\n\nThe first part saves the infobox's parameters. The second part searches the data of Wikidata. The last part builds an infobox and compare data of Wikidata with the parameters.\n\nYou can test your module in the lua console with this code :\n\nYou can also use Lua of LinkedWiki to print in the wiki the result of SPARQL query. Here, you can see an example.\n\nThe objective of this module is to print the list authority notices about an author.\n\n{{#invoke:Authority Notice|section | Wikidata ID = Q666551 }}\n\nDefinition of \"Module:Authority Notice\":\n\nYou can test your module in the lua console with this code :\n\nHere another example with a SPARQL query with the endpoint of the w:BnF.\n\nThe objective of this module is to print the list works about an author with a numeric version available online.\n\n{{#invoke:Author works|section | Bnf ID = 121308651 }}\n\nDefinition of \"Module:Author works\":\n\nYou can test your module in the lua console with this code :\n\nAgain an example with a SPARQL query but with another manner to loop through key/value object of a SPARQL results.\n\nThe objective of this module is to create links to the predecessor and the successor of a pope. (There may be several if the pope has to occupy his post several times)\n\n{{#invoke:Carrousel|pape | Wikidata ID = Q132845 }}\n\nDefinition of \"Module:Carrousel\":\n\nYou can test your module in the lua console with this code :\n\nlinkedwiki.new(subject,config=nil,tagLang=nil,debug=nil)\n\nlinkedwiki.new(subject) uses the configuration by default\n\nlinkedwiki.new(subject,config) uses the configuration of config\n\nlinkedwiki.new(subject,config,tagLang) uses the configuration of config but with the language of tagLang\n\nReturns a LinkedWiki object .\n\nsubject : string\n\nselect the subject of triples\n\nconfig : string : id of endpoint in the file extension.json\n\nselect the configuration in order to read/write or delete the triples of this object in the database.If nil, it uses the configuration by default.\n\ntagLang : string : tag lang for example : fr or en\n\nselect the default language for the function getString and addPropertyString. If nil, it uses the language in the configuration.\n\ndebug : boolean\n\nEnable the debug mode.\n\nExamples :\n\nobj:getConfig()\n\nReturns configuration id (string) used by this instance.(see details about configurations)\n\nobj:setConfig(iriConfiguration)\n\nReturns nil. It changes the configuration of this instance.\n\niriConfiguration : configuration id (see details about configurations)\n\nExample :\n\nobj:getLang()\n\nReturns lang tag (string) used by this instance.\n\nobj:setLang(tagLang)\n\nReturns nil. It changes the lang tag of this instance.\n\ntagLang : lang tag\n\nExample :\n\nobj:getSubject()\n\nReturns subject (iri/string) used by this instance.\n\nobj:setSubject(iriSubject)\n\nReturns nil. It changes the subject of this instance.\n\nExample :\n\nobj:query(query)\n\nReturns a table. For example:\n\n{ [\"result\"] = { [\"variables\"] = { \"s\", \"o1\", \"o2\" }, [\"rows\"] = { { [\"s type\"] = \"uri\", [\"s\"] = \"http://example.org/a\", [\"o1 type\"] = \"uri\", [\"o1\"] = \"http://example.org/b\", [\"o2 type\"] = \"uri\", [\"o2\"] = \"http://example.org/b\" }, { [\"s type\"] = \"uri\", [\"s\"] = \"http://example.org/a\", [\"o1 type\"] = \"uri\", [\"o1\"] = \"http://example.org/b\", [\"o2 type\"] = \"uri\", [\"o2\"] = \"http://example.org/b\" } } } }\n\nExample :\n\nobj:getValue(iriProperty)\n\nReturns the value IRI or literal without language tag of current subject with this property.\n\niriProperty : IRI of the property\n\nExample :\n\nobj:getString(iriProperty, tagLang=nil)\n\nReturns the literal with this language tag in function of current subject with this property.\n\niriProperty : IRI of the property\n\ntagLang : lang tag. If nil, it uses the lang tag by default.\n\nExample :\n\nobj:addPropertyWithIri(iriProperty, iriValue)\n\nReturns the response of the database. It saves one IRI in function of the storage method defined in the configuration.\n\niriProperty : IRI of the property\n\niriValue : IRI of the value\n\nExample :\n\nobj:addProperty(iriProperty, value, type=nil)\n\nReturns the response of the database. It saves one value without a lang tag in function of the storage method defined in the configuration.\n\niriProperty : IRI of the property\n\nvalue : string or number or date or etc.\n\ntype : IRI of type (see type available in XSD in SPARQL). If nil, the database will use the SPARQL standard in order to choose the type. For example, if the value is 7, the database will use xsd:integer but with the value 7.1, it will use xsd:float or xsd:double.\n\nExample without explicit type :\n\nExample with a date :\n\nExample with a double :\n\nobj:addPropertyString(iriProperty, value, tagLang=nil)\n\nReturns the response of the database. It saves one string with a lang tag in function of the storage method defined in the configuration.\n\niriProperty : IRI of the property\n\nvalue : string\n\ntagLang : language tag to use with this text. If nil, the default lang tag in the configuration will be used.\n\nExample :\n\nobj:addPropertyWithLiteral(iriProperty, value, type, tagLang)\n\nReturns the response of the database. It saves one literal with a specific type and tag language tag in function of the storage method defined in the configuration.\n\n..TODO Example :\n\nobj:removeSubject()\n\nReturns the response of the database. It deletes all triples with the current subject of the instance in function of the storage method defined in the configuration.\n\nExample :\n\nobj:checkValue(property, valueInWiki)\n\nReturns wiki text. This function compares the value of this property with the parameter valueInWiki.\n\nobj:checkString(property, valueInWiki, tagLang=nil)\n\nReturns wiki text. This function compares the value of this property with the parameter valueInWiki.\n\ntagLang Lang tag of value with this property. If nil, it uses the lang tag of the current configuration.\n\nobj:checkTitle(property, labelInWiki, tagLang)\n\nReturns wiki text. This function compares the rdfs:label of object linked via property with the parameter labelInWiki.\n\ntagLang Lang tag of label. If nil, it uses the lang tag of the current configuration.\n\nobj:checkLabelOfInternLink(link, propertyOfLabel, labelInWiki, tagLang=nil)\n\nReturns wiki text. This function inserts an intern link.\n\nlink Url of link\n\npropertyOfLabel Property in order to read the label\n\nlabelInWiki label of link\n\ntagLang Lang tag of label. If nil, it uses the lang tag of the current configuration.\n\nobj:checkIriOfExternLink(labelOfExternLink, propertyOfExternLink, externLinkInWiki)\n\nReturns wiki text. This function inserts an external link.\n\nlabelOfExternLink label of link\n\npropertyOfLabel Property in order to read the url of link in the database\n\nexternLinkInWiki Url of link\n\ntagLang Lang tag of label. If nil, it uses the lang tag of the current configuration.\n\nobj:checkUser(property, valueInWiki, tagLang)\n\nReturns wiki text. This function compares the list of users in the database with the parameter valueInWiki. This function creates links to the user's pages and add a link to emails when its exist in the database with the property vcard:email.\n\nobj:checkDate(property, valueInWiki, format)\n\nReturns wiki text. This function compares the date of this property with the parameter valueInWiki.\n\nformat Format in output the date with the parser #Time\n\nobj:checkImage(property, valueInWiki)\n\nReturns wiki text. This function compares the value of this property with the parameter valueInWiki.\n\nWarning: To use this functionality, you need to enable in your localsettings $wgUseInstantCommons = true;, $wgAllowExternalImages = true; and $wgExternalLinkTarget = '_blank';.\n\nHow to set the size of the image and give the caption ?\n\nThe function obj:checkImage returns only the wikitext of an external image to the Capiunto's infobox. You need to specify the css class when you call the Capiunto function infobox:addImage( obj:checkImage(property, valueInWiki), 'my caption', 'infobox' ). To define this class name, here \"infobox\", you can use the page Mediawiki:common.css of your wiki.\n\nFor example, this css code limits the size of images in the div container of Capiunto with the class infobox\n\n.infobox img { max-width: 200px; max-height: 200px; }\n\nobj:checkItem(property, valueInWiki, tagLang)\n\nReturns wiki text. This function compares the list of Wikidata ID in the database with the parameter valueInWiki.\n\nlinkedwiki.getCurrentTitle()\n\nReturns Title of the page\n\nlinkedwiki.getCurrentIRI()\n\nReturns IRI of the page\n\nlinkedwiki.isEmpty(s)\n\nReturns Boolean. Check if s is empty (nil or \"\").\n\nlinkedwiki.explode(div, str)\n\nReturns a list.\n\nExample :\n\nlinkedwiki.concatWithComma(list)\n\nReturns a string.\n\nExample :\n\nFor information in Scribunto, remove the spaces before and after the text.\n\nFor information in Scribunto, read the IRI of an article.\n\nIn version >=3.6.0, the \"check\" functions add different css styles depending on the difference between the value passed in infobox parameter and the value in the DB.\n\nThe module inserts the css style:\n\nmw-ext-linkedwiki-value-equal when the infobox parameter and the value in the DB are equal\n\nmw-ext-linkedwiki-new-value when the infobox parameter and the value in the DB are different\n\nmw-ext-linkedwiki-tooltip when the infobox parameter and the value in the DB are different and the the value in the DB already exists.\n\nThe css styles of \"red flag\" is defined in the file Linkedwiki/lua/css/common.css.\n\nIf you want to restore your database RDF, you can use the feature \"refresh all\" in the special page RDFSave (with user right data).\n\nobj:setDebug(boolDebug)\n\nobj:isDebug()\n\nYou can use setDebug in order to see the errors in the SPARQL queries.\n\nobj:getLastQuery()\n\nWith this function, you can see the last SPARQL query used by the precedent function."
    }
}