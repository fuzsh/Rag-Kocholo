{
    "id": "dbpedia_3788_3",
    "rank": 12,
    "data": {
        "url": "https://wikitech.wikimedia.org/wiki/Help:Toolforge/My_first_Django_OAuth_tool",
        "read_more_link": "",
        "language": "en",
        "title": "Help:Toolforge/My first Django OAuth tool",
        "top_image": "https://wikitech.wikimedia.org/static/favicon/wikitech.ico",
        "meta_img": "https://wikitech.wikimedia.org/static/favicon/wikitech.ico",
        "images": [
            "https://wikitech.wikimedia.org/static/images/icons/wikitech.svg",
            "https://wikitech.wikimedia.org/static/images/mobile/copyright/wikitech-wordmark.svg",
            "https://wikitech.wikimedia.org/static/images/footer/wikimedia-button.svg",
            "https://wikitech.wikimedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/favicon/wikitech.ico",
        "meta_site_name": "",
        "canonical_link": "https://wikitech.wikimedia.org/wiki/Help:Toolforge/My_first_Django_OAuth_tool",
        "text": "Caution: This page may contain inaccuracies. It is currently being edited and redesigned for better readability. For further information, please see: Phab:T245683, Phab:T198508 and Phab:T353593\n\nThis guide will show how to set up a Django app on Toolforge. We will use the python-social-auth library to implement OAuth authentification with Wikipedia, using the Mediawiki OAuth capabilities.\n\nIf you are new to Django you should read through some of the tutorials in the Tutorials section first.\n\nFirst, we will set the project up on your local machine for development.\n\nMost of the setup is not different from the many tutorials that you can find for Django.\n\nFirst you need to create a Python 3 virtual environment:\n\nThen set up a new Django project:\n\nMake sure you change the permissions on your settings.py file so that you don't share your app's secrets unintentionally!\n\nIf you are checking this into source control, you should avoid checking in the settings.py file. If using git, you can use a .gitignore file at the root of your git repo with something like these contents:\n\nNow we have the main app set up and the project folder structure will look like this:\n\nNext we need to add an app for for our actual webpage:\n\nThe structure will then look like this:\n\nThen add this new app to the installed apps in settings.py:\n\nAnd then route the main page from the main app to our new user_profile app. This is done in the urls.py file in the main app:\n\nCreate a urls.py in your user_profile folder as well, and add the following to it:\n\nThe index view is still missing. Create it in views.py:\n\nNow we only need to create the Django template in the folder templates/user_profile/index.dtl (You can also use html as file extension if you don't get syntax highlighting for dtl files).\n\nThe current file structure will look something like this:\n\nNow you can start Django's built in development webserver:\n\nThis will show you the template you just created. Note that we are running on port 8080 because port 8000 is used on some systems. In order to stay consistent we will stick with port 8080 for local development. Because the port is also part of the OAuth callback URL, we will reduce the number of consumers we need to register for development.\n\nStarting with version 1.2 the Python package social-core has a Mediawiki backend that works for any of Wikimedia Foundations wikis, but also for any other Mediawiki installation that has the OAuth Extension enabled.\n\nInstall the package for your virtual environment:\n\nAdd the following in your main app's settings.py:\n\nThen we need to add settings for the OAuth provider. You can register your application, after reading the OAuth for developers documentation.\n\nmeta:Special:OAuthConsumerRegistration/propose is for registering OAuth to production environment\n\nmeta.wikimedia.beta.wmflabs.org/wiki/Special:OAuthConsumerRegistration/propose is for testing environment\n\nWe will register a consumer for development at this moment, so we will use the following settings:\n\nOauth version: OAuth 1.0a consumer\n\nApplication name: use a name that indicates that you are developing locally\n\nLeave \"This consumer is for use only by <your username>\" unchecked\n\nContact email address: Use a valid email where you can be reached.\n\nApplicable project: All is fine\n\nOAuth \"callback\" URL: http://127.0.0.1:8080/\n\nSelect: Allow consumer to specify a callback in requests and use \"callback\" URL above as a required prefix.\n\nTypes of grants being requested: Choose \"User identity verification only, no ability to read pages or act on a user's behalf.\"\n\nPublic RSA key: You can leave this empty at the moment.\n\nYou should get back a response something like:\n\nYour OAuth consumer request has been received. You have been assigned a consumer token of xxxxxxxxxxxxxxxxxxxxxxxx and a secret token of xxxxxxxxxxxxxxxxxxxxxxxx. Be sure not to commit these keys in version control and keep them secret.\n\nThe consumer token is your SOCIAL_AUTH_MEDIAWIKI_KEY, and the secret token is your SOCIAL_AUTH_MEDIAWIKI_SECRET, in settings.py:\n\nN.B. The trailing '/' at the end of the callback is important. Login will silently fail without it.\n\nAfter that, you need to apply the migrations in order to create the user models in the database.\n\nNext we need to up a few things for the profile view and the login. Update your user_profile apps urls.py to say something like this:\n\nIn settings.py we need to add the URL pattern named \"login\" as the LOGIN_URL and the URL pattern \"profile\" for LOGIN_REDIRECT_URL:\n\nCreate two new views for the profile and the login:\n\nThen create the login.dtl file:\n\nAnd the profile.dtl file:\n\nAnd finally update your index.dtl to say:\n\nWhen you now restart the server and click on the \"Profile\" link you will be asked to give permission to your newly created OAuth consumer. After approving the consumer you will be redirected to the user page which will print the Wikimedia user name.\n\nAfter extensive testing you might want to share your new tool with a wider audience. If the tool fulfills the criteria of Toolforge you can host it there.\n\nSee Help:Toolforge/Quickstart for creating Tool account].\n\nYou can create a new tool on the Toolforge admin console.\n\nThere small delay, 15 mins, before tool is actually created after registration.\n\nIn order to make your project work in both environments and keep your secret keys out of source control you can for example define the following variables in venv-my-first-django-oauth-app/bin/activate. That means the keys will be available only if the environment is active:\n\nAnd after reactivating the venv you will be able to access the variables in settings.py\n\nNow you can safely add our project to git. Run this in your project directory:\n\nYou can then also add your requirements to your project:\n\nWe also need to update the allowed hosts (See: Allowed-hosts) in settings.py:\n\nDon't forget to create a .gitignore file that excludes all files that should not be under source control. For example:\n\n*.pyc __pycache__/ *.sqlite3\n\nThen add all the files to git. Make sure that only source files and no temporary files, or parts of your venv are staged. After that, you can make your first commit.\n\nOn Toolforge your Django app will run with UWSGI. In order to have a similar setup on the development machine we will create a similar setup using Nginx. First we need to create an app.ini in our src directory:\n\nYou should be able to start the uwsgi file on its own by using: uwsgi app.ini. If it fails this is often a permission error with the /run/uwsgi directory. The current user needs to be able to create the socket file in this directory.\n\nFor this file we will create a service in /etc/systemd/system/django-oauth.uwsgi.service:\n\nYou can then start this service by running sudo systemctl start django-oauth.uwsgi.service. If that has worked you can continue to configure the webserver. Go to /etc/nginx/nginx.conf and add the following configuration:\n\nAfter that you can either restart or start the nginx server (sudo systemctl start nginx). You can check if everything is working correctly by entering: sudo systemctl status nginx. On an SELinux enabled system you might still need to set the correct target context for the sock file. Now go to 127.0.0.1:8080 and see if your page still loads correctly.\n\nAfter configuring two-factor authentication you can log into Toolforge using:\n\nAfter the successful login you need to switch to your new tool:\n\nYou can use the following commands to control the web server:\n\nCreate the following file structure for the web server config file:\n\n. └── www └── python ├──uwsgi.ini └──src\n\nIn the uwsgi.ini file add the following:\n\nAny files in this static directory will be publicly accessible on the internet.\n\nIn the python directory you can clone your git repository (The dot at the end clones into your current directory instead of creating another subfolder):\n\nYou also have to create a virtual environment on the server using:\n\nThen you are ready to request your production keys (which you need to be even more careful about not committing):\n\nApplication name: use a name that indicates that this is production\n\nContact email address: Use a valid email where you can be reached.\n\nApplicable project: All is fine\n\nOAuth \"callback\" URL: https://YOUR-TOOL-NAME.toolforge.org/\n\nSelect: Allow consumer to specify a callback in requests and use \"callback\" URL above as a required prefix.\n\nTypes of grants being requested: Choose \"User identity verification only, no ability to read pages or act on a user's behalf.\"\n\nPublic RSA key: You can leave this empty at the moment.\n\nMake the virtual environment activate file non-world-readable to ensure that nobody else will be able to access the production keys in it:\n\nThen edit the file to add your production keys to it:\n\nActivate the environment to install the dependencies and apply the migrations, then deactivate it again:\n\nRunning the 'migrate' command will also create the database as a sqlite file. The file with our current settings is at /www/python/src/db.sqlite3. You should take care to back up this file and be confidential with the information that is stored within it.\n\nWith the current setup you also have to create a 2nd app.py in ~/www/python/src where the standard webservice will look for it. It also expects the variable to be named app:\n\nAfter making these configurations you should be able to start the webserver using:\n\nIn case there are any problems with the configuration they will appear in the tools root directory in the file: ~/uwsgi.log.\n\nThe project structure as of now will look like this:\n\nYou can view a working example of the OAuth app at:\n\nhttps://my-first-django-oauth-app.toolforge.org/\n\nIf your tool's database stores a lot of data or if it is meant to be accessed synchronously from various processes it might be wise to use MariaDB as a database instead of SQLite. You can create a user database for this.\n\nTo configure Django to use this database, you first need to install the `mysqlclient` Python package. Installing this package on the Toolforge is a little more complicated than other packages because it uses a native library. First, get inside the virtual environment of your webservice. Once there you can define environment variables as follow, and then install the package:\n\nIn your Django settings.py file, you can then configure the database connection as follows:\n\nSo far the tutorial only used sqlite as a database. This is fine for demo applications, but will quickly result in performance or scaling issues with any operations that require reads or writes to the database. It will also strain the Toolforge servers, which is something we also want to avoid. You can use user databases on the tools.db.svc or create your own database server on Cloud VPS.\n\nHowto query API:Userinfo with Oauth credientials after user has been logged in.\n\nDocumentation: mw:Manual:Pywikibot/OAuth/Wikimedia.\n\nNote Pywikibot supports only OAuth 1.0a. OAuth 2.0 is not supported.\n\nUpdate user_profile/views.py\n\nAnd to user_profile/profile.dtl:\n\nhttps://meta.wikimedia.org/wiki/Special:OAuthConsumerRegistration/propose\n\nmeta.wikimedia.beta.wmflabs.org/wiki/Special:OAuthConsumerRegistration/propose is for testing environment\n\nhttps://tutorial.djangogirls.org\n\nhttps://github.com/tobias47n9e/my-first-django-oauth-app\n\nhttps://github.com/python-social-auth/social-app-django\n\nPull request to social core adding Mediawiki backend\n\nKubernetes Setup for Django\n\nHelp:Toolforge/My first Flask OAuth tool\n\nHelp:Toolforge/My first NodeJS OAuth tool"
    }
}