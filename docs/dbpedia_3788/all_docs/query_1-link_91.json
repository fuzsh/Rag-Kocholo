{
    "id": "dbpedia_3788_1",
    "rank": 91,
    "data": {
        "url": "https://github.com/allinurl/goaccess",
        "read_more_link": "",
        "language": "en",
        "title": "time web log analyzer and interactive viewer that runs in a terminal in *nix systems or through your browser.",
        "top_image": "https://repository-images.githubusercontent.com/11397939/13256b00-8d79-11ea-80b0-e79990000a34",
        "meta_img": "https://repository-images.githubusercontent.com/11397939/13256b00-8d79-11ea-80b0-e79990000a34",
        "images": [
            "https://github.com/allinurl/goaccess/actions/workflows/build-test.yml/badge.svg",
            "https://camo.githubusercontent.com/1d8e1ecaba69287d69883ac3017fc96c6c7cb53260186077acb9ff693fd26dd8/68747470733a2f2f676f6163636573732e696f2f6261646765",
            "https://camo.githubusercontent.com/f25e79b0746bc4a501009b61213e698cf0cb2ce895c727a60f555d3196c4379d/68747470733a2f2f676f6163636573732e696f2f696d616765732f676f6163636573732d7265616c2d74696d652d7465726d2d67682e706e673f32303232303131393031",
            "https://camo.githubusercontent.com/44c8952a4488c9ce3cd05c63c6c35b9be63d4422e9b4e9671bd3b2a5ed03d5be/68747470733a2f2f676f6163636573732e696f2f696d616765732f676f6163636573732d7265616c2d74696d652d68746d6c2d67682e706e673f323032323031313930",
            "https://camo.githubusercontent.com/2a135d6a68d4a5158ea1fc67301c6184aa17a94f1947f03807c6c28b68410667/68747470733a2f2f696e6c616e672e636f6d2f62616467653f75726c3d6769746875622e636f6d2f616c6c696e75726c2f676f616363657373",
            "https://avatars.githubusercontent.com/u/5005367?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6131885?s=64&v=4",
            "https://avatars.githubusercontent.com/u/344493?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10102616?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1102886?s=64&v=4",
            "https://avatars.githubusercontent.com/u/116087?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1118433?s=64&v=4",
            "https://avatars.githubusercontent.com/u/11786225?s=64&v=4",
            "https://avatars.githubusercontent.com/u/30027?s=64&v=4",
            "https://avatars.githubusercontent.com/u/952007?s=64&v=4",
            "https://avatars.githubusercontent.com/u/374612?s=64&v=4",
            "https://avatars.githubusercontent.com/u/21208608?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1237070?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1816880?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "GoAccess is a real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems or through your browser. - allinurl/goaccess",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/allinurl/goaccess",
        "text": "GoAccess is an open source real-time web log analyzer and interactive viewer that runs in a terminal on *nix systems or through your browser. It provides fast and valuable HTTP statistics for system administrators that require a visual server report on the fly. More info at: https://goaccess.io.\n\nGoAccess parses the specified web log file and outputs the data to the X terminal. Features include:\n\nCompletely Real Time\n\nAll panels and metrics are timed to be updated every 200 ms on the terminal output and every second on the HTML output.\n\nMinimal Configuration needed\n\nYou can just run it against your access log file, pick the log format and let GoAccess parse the access log and show you the stats.\n\nTrack Application Response Time\n\nTrack the time taken to serve the request. Extremely useful if you want to track pages that are slowing down your site.\n\nNearly All Web Log Formats\n\nGoAccess allows any custom log format string. Predefined options include, Apache, Nginx, Amazon S3, Elastic Load Balancing, CloudFront, etc.\n\nIncremental Log Processing\n\nNeed data persistence? GoAccess has the ability to process logs incrementally through the on-disk persistence options.\n\nOnly one dependency\n\nGoAccess is written in C. To run it, you only need ncurses as a dependency. That's it. It even features its own Web Socket server â€” http://gwsocket.io/.\n\nVisitors\n\nDetermine the amount of hits, visitors, bandwidth, and metrics for slowest running requests by the hour, or date.\n\nMetrics per Virtual Host\n\nHave multiple Virtual Hosts (Server Blocks)? It features a panel that displays which virtual host is consuming most of the web server resources.\n\nASN (Autonomous System Number mapping)\n\nGreat for detecting malicious traffic patterns and block them accordingly.\n\nColor Scheme Customizable\n\nTailor GoAccess to suit your own color taste/schemes. Either through the terminal, or by simply applying the stylesheet on the HTML output.\n\nSupport for Large Datasets\n\nGoAccess features the ability to parse large logs due to its optimized in-memory hash tables. It has very good memory usage and pretty good performance. This storage has support for on-disk persistence as well.\n\nDocker Support\n\nAbility to build GoAccess' Docker image from upstream. You can still fully configure it, by using Volume mapping and editing goaccess.conf. See Docker section below.\n\nGoAccess allows any custom log format string. Predefined options include, but not limited to:\n\nAmazon CloudFront (Download Distribution).\n\nAmazon Simple Storage Service (S3)\n\nAWS Elastic Load Balancing\n\nCombined Log Format (XLF/ELF) Apache | Nginx\n\nCommon Log Format (CLF) Apache\n\nGoogle Cloud Storage.\n\nApache virtual hosts\n\nSquid Native Format.\n\nW3C format (IIS).\n\nCaddy's JSON Structured format.\n\nTraefik's CLF flavor\n\nGoAccess was designed to be a fast, terminal-based log analyzer. Its core idea is to quickly analyze and view web server statistics in real time without needing to use your browser (great if you want to do a quick analysis of your access log via SSH, or if you simply love working in the terminal).\n\nWhile the terminal output is the default output, it has the capability to generate a complete, self-contained, real-time HTML report, as well as a JSON, and CSV report.\n\nYou can see it more of a monitor command tool than anything else.\n\nGoAccess can be compiled and used on *nix systems.\n\nDownload, extract and compile GoAccess with:\n\nYou can also build the binary for Debian based systems in an isolated container environment to prevent cluttering your local system with the development libraries:\n\nIt is easiest to install GoAccess on GNU+Linux using the preferred package manager of your GNU+Linux distribution. Please note that not all distributions will have the latest version of GoAccess available.\n\nNote: It is likely this will install an outdated version of GoAccess. To make sure that you're running the latest stable version of GoAccess see alternative option below.\n\nNote:\n\n.deb packages in the official repo are available through HTTPS as well. You may need to install apt-transport-https.\n\nGoAccess can be used in Windows through Cygwin. See Cygwin's packages. Or through the GNU+Linux Subsystem on Windows 10.\n\nGoAccess has minimal requirements, it's written in C and requires only ncurses. However, below is a table of some optional dependencies in some distros to build GoAccess from source.\n\nDistro NCurses GeoIP (opt) GeoIP2 (opt) OpenSSL (opt) Ubuntu/Debian libncurses-dev libgeoip-dev libmaxminddb-dev libssl-dev RHEL/CentOS ncurses-devel geoip-devel libmaxminddb-devel openssl-devel Arch ncurses geoip libmaxminddb openssl Gentoo sys-libs/ncurses dev-libs/geoip dev-libs/libmaxminddb dev-libs/openssl Slackware ncurses GeoIP libmaxminddb openssl\n\nNote: You may need to install build tools like gcc, autoconf, gettext, autopoint etc. for compiling/building software from source. e.g., base-devel, build-essential, \"Development Tools\".\n\nA Docker image has been updated, capable of directing output from an access log. If you only want to output a report, you can pipe a log from the external environment to a Docker-based process:\n\nOR real-time\n\nYou can read more about using the docker image in DOCKER.md.\n\nIn-memory storage provides better performance at the cost of limiting the dataset size to the amount of available physical memory. GoAccess uses in-memory hash tables. It has very good memory usage and pretty good performance. This storage has support for on-disk persistence as well.\n\nSee options that can be supplied to the command or specified in the configuration file. If specified in the configuration file, long options need to be used without prepending --.\n\nNote: Piping data into GoAccess won't prompt a log/date/time configuration dialog, you will need to previously define it in your configuration file or in the command line.\n\nTo output to a terminal and generate an interactive report:\n\nTo generate an HTML report:\n\nTo generate a JSON report file:\n\nTo generate a CSV report to stdout:\n\nGoAccess also allows great flexibility for real-time filtering and parsing. For instance, to quickly diagnose issues by monitoring logs since goaccess was started:\n\nAnd even better, to filter while maintaining opened a pipe to preserve real-time analysis, we can make use of tail -f and a matching pattern tool such as grep, awk, sed, etc.:\n\nor to parse from the beginning of the file while maintaining the pipe opened and applying a filter\n\nThere are several ways to parse multiple logs with GoAccess. The simplest is to pass multiple log files to the command line:\n\nIt's even possible to parse files from a pipe while reading regular files:\n\nNote: the single dash is appended to the command line to let GoAccess know that it should read from the pipe.\n\nNow if we want to add more flexibility to GoAccess, we can use zcat --force to read compressed and uncompressed files. For instance, if we would like to process all log files access.log*, we can do:\n\nNote: On Mac OS X, use gunzip -c instead of zcat.\n\nUse --jobs=<count> (or -j) to enable multi-thread parsing. For example:\n\nAnd use --chunk-size=<256-32768> to adjust chunk size, the default chunk size is 1024. For example:\n\nGoAccess has the ability the output real-time data in the HTML report. You can even email the HTML file since it is composed of a single file with no external file dependencies, how neat is that!\n\nThe process of generating a real-time HTML report is very similar to the process of creating a static report. Only --real-time-html is needed to make it real-time.\n\nTo view the report you can navigate to http://your_site/report.html.\n\nBy default, GoAccess will use the host name of the generated report. Optionally, you can specify the URL to which the client's browser will connect to. See FAQ for a more detailed example.\n\nBy default, GoAccess listens on port 7890, to use a different port other than 7890, you can specify it as (make sure the port is opened):\n\nAnd to bind the WebSocket server to a different address other than 0.0.0.0, you can specify it as:\n\nNote: To output real time data over a TLS/SSL connection, you need to use --ssl-cert=<cert.crt> and --ssl-key=<priv.key>.\n\nWorking with dates\n\nAnother useful pipe would be filtering dates out of the web log\n\nThe following will get all HTTP requests starting on 05/Dec/2010 until the end of the file.\n\nor using relative dates such as yesterdays or tomorrows day:\n\nIf we want to parse only a certain time-frame from DATE a to DATE b, we can do:\n\nIf we want to preserve only certain amount of data and recycle storage, we can keep only a certain number of days. For instance to keep & show the last 5 days:\n\nAssuming your log contains the virtual host field. For instance:\n\nAnd you would like to append the virtual host to the request in order to see which virtual host the top urls belong to:\n\nTo do the same, but also use real-time filtering and parsing:\n\nTo exclude a list of virtual hosts you can do the following:\n\nTo parse specific pages, e.g., page views, html, htm, php, etc. within a request:\n\nNote, $7 is the request field for the common and combined log format, (without Virtual Host), if your log includes Virtual Host, then you probably want to use $8 instead. It's best to check which field you are shooting for, e.g.:\n\nOr to parse a specific status code, e.g., 500 (Internal Server Error):\n\nOr multiple status codes, e.g., all 3xx and 5xx:\n\nAnd to get an estimated overview of how many bots (crawlers) are hitting your server:\n\nAlso, it is worth pointing out that if we want to run GoAccess at lower priority, we can run it as:\n\nand if you don't want to install it on your server, you can still run it from your local machine!\n\nNote: SSH requires -n so GoAccess can read from stdin. Also, make sure to use SSH keys for authentication as it won't work if a passphrase is required.\n\nWe receive many questions and issues that have been answered previously.\n\nDate/time matching problems? Check that your log format and the system locale in which you run GoAccess match. See #1571\n\nProblems with pattern matching? Spaces are often a problem, see for instance #136, #1579\n\nOther issues matching log entries: See >200 closed issues regarding log/date/time formats\n\nProblems with log processing? See >111 issues regarding log processing\n\nGoAccess has the ability to process logs incrementally through its internal storage and dump its data to disk. It works in the following way:\n\nA dataset must be persisted first with --persist, then the same dataset can be loaded with.\n\n--restore. If new data is passed (piped or through a log file), it will append it to the original dataset.\n\nGoAccess keeps track of inodes of all the files processed (assuming files will stay on the same partition), in addition, it extracts a snippet of data from the log along with the last line parsed of each file and the timestamp of the last line parsed. e.g., inode:29627417|line:20012|ts:20171231235059\n\nFirst, it compares if the snippet matches the log being parsed, if it does, it assumes the log hasn't changed drastically, e.g., hasn't been truncated. If the inode does not match the current file, it parses all lines. If the current file matches the inode, it then reads the remaining lines and updates the count of lines parsed and the timestamp. As an extra precaution, it won't parse log lines with a timestamp â‰¤ than the one stored.\n\nPiped data works based off the timestamp of the last line read. For instance, it will parse and discard all incoming entries until it finds a timestamp >= than the one stored.\n\nthen, load it with\n\nTo read persisted data only (without parsing new data)\n\nAny help on GoAccess is welcome. The most helpful way is to try it out and give feedback. Feel free to use the GitHub issue tracker and pull requests to discuss and submit code changes.\n\nYou can contribute to our translations by editing the .po files direct on GitHub or using the visual interface inlang.com\n\nEnjoy!"
    }
}