{
    "id": "dbpedia_3788_2",
    "rank": 65,
    "data": {
        "url": "https://github.com/h2non/imaginary",
        "read_more_link": "",
        "language": "en",
        "title": "h2non/imaginary: Fast, simple, scalable, Docker",
        "top_image": "https://opengraph.githubassets.com/ff833433cc2a387cd75f8865adb2852c1cf8d311c704b0cd7131320db6ea9bd2/h2non/imaginary",
        "meta_img": "https://opengraph.githubassets.com/ff833433cc2a387cd75f8865adb2852c1cf8d311c704b0cd7131320db6ea9bd2/h2non/imaginary",
        "images": [
            "https://camo.githubusercontent.com/eab9b6c138693f3bb0d7a182e4ecee814742e82be087818b506c5056b9c785c7/68747470733a2f2f7472617669732d63692e6f72672f68326e6f6e2f696d6167696e6172792e737667",
            "https://camo.githubusercontent.com/2f69cf8b20585e884597fed28fae603ca02e1aefe067b9cb37b431d3b811d6a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f636b65722d68326e6f6e2f696d6167696e6172792d626c75652e737667",
            "https://camo.githubusercontent.com/470d3a9e697b934074a7386809757cb580663e4768aeb904bf4e033a2f7e3b1f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f68326e6f6e2f696d6167696e6172792e737667",
            "https://camo.githubusercontent.com/5bd2729f1484a3233844a658f10cbfd0083f229587dcf9079acb33720589aa4f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465706c6f792d666c792e696f2d626c75652e737667",
            "https://github.com/h2non/imaginary/raw/master/testdata/flyio-button.svg?raw=true",
            "https://camo.githubusercontent.com/5ccc583800f33b02d76d3cf5efb24c6af3ce783558d8554fc4e7f0ef8797221c/68747470733a2f2f6465706c6f792e636c6f75642e72756e2f627574746f6e2e737667",
            "https://camo.githubusercontent.com/97c3814a9b8e22ffc0406b46d617e6d72e10eabc88b05431671f526cabc60d3a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f302f6176617461722e737667",
            "https://camo.githubusercontent.com/02e19af70983781e5075f82cd481be9ae4175ac3a2c6ed7ec8513bac116e3382/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f312f6176617461722e737667",
            "https://camo.githubusercontent.com/cbfb8aee033fe533dd1e80f5e28e0c2572d7574b9c355cbe8e561d53133f2311/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f322f6176617461722e737667",
            "https://camo.githubusercontent.com/851a68b036313578cd36b253be578363dc800b931b323ecb50a3eba4dab1124a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f332f6176617461722e737667",
            "https://camo.githubusercontent.com/f52569144cbbd12e1622507a48bdcc9ebe46fc3180ef15be4bf1f2eb11c1e2f9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f342f6176617461722e737667",
            "https://camo.githubusercontent.com/340c10ac9475d851900490bb0e00890738b5ecdf9dc8e15829f930b5c27b604f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f352f6176617461722e737667",
            "https://camo.githubusercontent.com/60745c4053886fd65c358acbd728bd7b9d6b279a14c8a02c7df86f3760aeb482/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f362f6176617461722e737667",
            "https://camo.githubusercontent.com/2d3c6245ff256194b37db500c8897982c477ff4fc978e3978462a808e1f7ddfe/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f372f6176617461722e737667",
            "https://camo.githubusercontent.com/69214c887d05c43e7b1d0b19c59bc0bd2be64317f8885f7ccb7f68e94b72b34a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f382f6176617461722e737667",
            "https://camo.githubusercontent.com/9ee0d840b6b5e2463cfb7851e722ecc3d78832d6f6e47ab93a87274c130916f7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f392f6176617461722e737667",
            "https://camo.githubusercontent.com/01108244e0389ede0055ea0d0abdac6dc352fe3d9e95dadf5891aa7caea84e74/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31302f6176617461722e737667",
            "https://camo.githubusercontent.com/9ec4e053aad266b67dcdec3b85f3ff8a5affaed62b70aefd1502c27855a283c0/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31312f6176617461722e737667",
            "https://camo.githubusercontent.com/f447f98ef0d8fb24f8a42dc990a52822bee316af5fc6d85ecd147f8fe3539d88/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31322f6176617461722e737667",
            "https://camo.githubusercontent.com/74f7d5ee4692a28dabcb55d0528aa38c69c38fe72985a468feafe8a2f88fce6c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31332f6176617461722e737667",
            "https://camo.githubusercontent.com/f6aadc8bf48dfd1ecf00474f26cd3a09b159a8f578fca1c8e1aa532575c384dc/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31342f6176617461722e737667",
            "https://camo.githubusercontent.com/67ec4849db5965dde05b2528c00702da96954ddab9f10437da45ec5c173208fb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31352f6176617461722e737667",
            "https://camo.githubusercontent.com/ce7598273b60380fff3787c7b79efdd7d3956a597efdc83cf63abe5a8c6e875c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31362f6176617461722e737667",
            "https://camo.githubusercontent.com/62a3870c85f979bff02a9a5ad2655f3308f6a372556502ecae09d68374c9c52d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31372f6176617461722e737667",
            "https://camo.githubusercontent.com/d4d747b12565ac7fa1c5b6f47dffba00e96fc1362abe8debda6196219266481f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31382f6176617461722e737667",
            "https://camo.githubusercontent.com/db4791a455c88604cfc08874e29c18f99593243b13a1e61d7dd30ffcd9f7039c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f31392f6176617461722e737667",
            "https://camo.githubusercontent.com/aa15a9f4432b6712f68c766539f9ff64d5b6fb9dc93aea086461459bbec2ba5a/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32302f6176617461722e737667",
            "https://camo.githubusercontent.com/01ad3b264e4103c1ef659107c57ba4ef0e3969d7d1241db97dab69ec3a15cbd1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32312f6176617461722e737667",
            "https://camo.githubusercontent.com/ba2e1023db3733347376235639187a0e6e8ef85011a2e6d47d69cef0249a1bb1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32322f6176617461722e737667",
            "https://camo.githubusercontent.com/b94bcb972a1badf71b716835cc724122dc17b47a45e8c122c6fc07d8677cb9b2/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32332f6176617461722e737667",
            "https://camo.githubusercontent.com/b66d19345f5d7313426b4029f848a904eb56f64658be326eff85c48b703c7bf8/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32342f6176617461722e737667",
            "https://camo.githubusercontent.com/7fe5fc81bb1cd817e98b7b92dea0a3ab2e5e22faf781e50a75788bcf492485c6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32352f6176617461722e737667",
            "https://camo.githubusercontent.com/ad0863f01bc868f9b23683c32d040a312e1c7f4168e84275211e94dce9d7302d/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32362f6176617461722e737667",
            "https://camo.githubusercontent.com/184c747002f04caf4c5c3feac3b45ab801d5155b853f3e187510dd51b1aaae19/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32372f6176617461722e737667",
            "https://camo.githubusercontent.com/1ca1c9898098a27971d7981d9e9093f7c7739784245f155a5063487d8df75a19/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32382f6176617461722e737667",
            "https://camo.githubusercontent.com/1b2c384572eb3fd670807ae1b9022d8c02889ea5cb97bb2ec14cd3404af85c67/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b65722f32392f6176617461722e737667",
            "https://camo.githubusercontent.com/f430c4a4cfd525cb92b35a82bf13386f2cf14020bc341ba365f1377236daf690/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f6261636b6572732f62616467652e737667",
            "https://camo.githubusercontent.com/56a1f7d09509da3d0c9a71dd8243654ace470ae3bbad3b462acded2a6bbd98be/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f302f6176617461722e737667",
            "https://camo.githubusercontent.com/02def47f3773bbfb01a07675be0711b3209616259eae6845c4511c1d896f9842/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f312f6176617461722e737667",
            "https://camo.githubusercontent.com/81b7f844f1b164aab317eef70aeba72786ee3dbe419e1cacfce678966628637c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f322f6176617461722e737667",
            "https://camo.githubusercontent.com/60d3fa78b95b0a45f4a1cdb3c27bfc52f34df9974a0db134816b3b4bcb7ab750/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f332f6176617461722e737667",
            "https://camo.githubusercontent.com/58dd1d60905620428bbb46dc2e42201d1feb1c6a711d12680422785b75e368f7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f342f6176617461722e737667",
            "https://camo.githubusercontent.com/b30357629e388a6e9549a9f0926982549bf948d700b7ba9aa41633d148a762fb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f352f6176617461722e737667",
            "https://camo.githubusercontent.com/168e149e420e22ef69c5b19986261d8a762ffbf5bb19953549718dfd60d43de9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f362f6176617461722e737667",
            "https://camo.githubusercontent.com/ba0d4ce2ef30b72ce6a4add151deefb236f56aaa6214354db8c508b485a0d489/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f372f6176617461722e737667",
            "https://camo.githubusercontent.com/81eef3acaea8f80c7ab70f58c55b938eed2c3a7017faf42772c9adc1783f9169/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f382f6176617461722e737667",
            "https://camo.githubusercontent.com/15165ace7e902b9b6b453bc4f5262e658f7551d4adb7619c6661951dd9fd40c5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f392f6176617461722e737667",
            "https://camo.githubusercontent.com/1c4bf97a30edb9841cdd3cea80ea1005056a4078894f57613d52ea996acacd99/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31302f6176617461722e737667",
            "https://camo.githubusercontent.com/b1e56d5955334355fde4cd69b21bd9c088db5f70d45bbf2a49809c9dd37075c7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31312f6176617461722e737667",
            "https://camo.githubusercontent.com/db40f8738931197bb09abc0d4902e53c956dd68ece2f5bc79cb6bdeeb1ba75f4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31322f6176617461722e737667",
            "https://camo.githubusercontent.com/c32479b813f110b67523da657344612e3cbcb8feeb159e606e0cd3e3254d5958/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31332f6176617461722e737667",
            "https://camo.githubusercontent.com/da7311c84cfb22bd20c6f6b3f5aaf29217a2d4e92fd6c339a24e8528b6738658/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31342f6176617461722e737667",
            "https://camo.githubusercontent.com/1ab81cdab3ad33fb94061687c2c05b0c791d909473d7e1bedf987f8eac323df1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31352f6176617461722e737667",
            "https://camo.githubusercontent.com/e7d17e26532d08100b56830ad31d0391da732d7001062c62f73cd6cdf9bc1fc1/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31362f6176617461722e737667",
            "https://camo.githubusercontent.com/0c764bf0f900d16b206e73985b2fb3318e5b5498c266222f7307e6fdb33d4cbf/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31372f6176617461722e737667",
            "https://camo.githubusercontent.com/144cedff1fda9bf798e5d26d90448f7cf4270fb3a19a66cf66c4f23792e349b7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31382f6176617461722e737667",
            "https://camo.githubusercontent.com/8759e4b9ab2df98f3a192476ea82a8bc8a966203e54892a270fa3e13515cf2cd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f31392f6176617461722e737667",
            "https://camo.githubusercontent.com/f00624e65cc13aa4fae63ac18b0f487bf0e51799256f38ab23680aad136749a4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32302f6176617461722e737667",
            "https://camo.githubusercontent.com/1cd753283266bda4b2b9d012e5244f51e79ad52d3b844fa32a67ffdfa8022aff/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32312f6176617461722e737667",
            "https://camo.githubusercontent.com/bb2f956da56954cea5e90d0af6a0f942462fea393ce7120d8b59e4ce83534291/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32322f6176617461722e737667",
            "https://camo.githubusercontent.com/bf20c826653c9c67ad1e9f7a211fcd9c08dbb46b9db4193fc4a44ccfd7c81c74/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32332f6176617461722e737667",
            "https://camo.githubusercontent.com/df4053bd747adfd8f056f366d5225f12345916438fb5f72ffc365b1a8026e489/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32342f6176617461722e737667",
            "https://camo.githubusercontent.com/7ac186771a754079051efef513f233e9a170b55c94d0b951893dcefd9a786651/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32352f6176617461722e737667",
            "https://camo.githubusercontent.com/59ee55de917974440f67e5faef0a9bac857b86de82a9d7fe82de1758dbea34d4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32362f6176617461722e737667",
            "https://camo.githubusercontent.com/7b263cbbf280934b58797166ad3b1c398a371863c55db70221c4f34c415eb026/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32372f6176617461722e737667",
            "https://camo.githubusercontent.com/bde8cf8dc24e94292244ac40e3a9874a2b9dc92fa6b05d3597f306bb218ed99f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32382f6176617461722e737667",
            "https://camo.githubusercontent.com/c797be933d27fd152872e01dce8425109aeb768bd80c62d50d5b9ab3e84d7da9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f696d6167696e6172792f73706f6e736f722f32392f6176617461722e737667",
            "https://camo.githubusercontent.com/9e15fc433cfd8632e29cdcedb9ac17898ada534a63ae9fd1d7a7e9378dce14f7/68747470733a2f2f736f7572636567726170682e636f6d2f6170692f7265706f732f6769746875622e636f6d2f68326e6f6e2f696d6167696e6172792f2e636f756e746572732f76696577732e737667",
            "https://github.githubassets.com/assets/open_collective-0a706523753d.svg",
            "https://avatars.githubusercontent.com/u/63402?s=64&v=4",
            "https://avatars.githubusercontent.com/u/39014?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5461056?s=64&v=4",
            "https://avatars.githubusercontent.com/u/146373?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4362252?s=64&v=4",
            "https://avatars.githubusercontent.com/u/15328723?s=64&v=4",
            "https://avatars.githubusercontent.com/u/43508?s=64&v=4",
            "https://avatars.githubusercontent.com/u/64467?s=64&v=4",
            "https://avatars.githubusercontent.com/u/66927?s=64&v=4",
            "https://avatars.githubusercontent.com/u/665029?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1095020?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1391892?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1851804?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1896362?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Fast, simple, scalable, Docker-ready HTTP microservice for high-level image processing - h2non/imaginary",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/h2non/imaginary",
        "text": "Fast HTTP microservice written in Go for high-level image processing backed by bimg and libvips. imaginary can be used as private or public HTTP service for massive image processing with first-class support for Docker & Fly.io. It's almost dependency-free and only uses net/http native package without additional abstractions for better performance.\n\nSupports multiple image operations exposed as a simple HTTP API, with additional optional features such as API token authorization, URL signature protection, HTTP traffic throttle strategy and CORS support for web clients.\n\nimaginary can read images from HTTP POST payloads, server local path or remote HTTP servers, supporting JPEG, PNG, WEBP, HEIF, and optionally TIFF, PDF, GIF and SVG formats if libvips@8.3+ is compiled with proper library bindings.\n\nimaginary is able to output images as JPEG, PNG and WEBP formats, including transparent conversion across them.\n\nimaginary optionally supports image placeholder fallback mechanism in case of image processing error or server error of any nature, hence an image will be always returned by imaginary even in case of error, trying to match the requested image size and format type transparently. The error details will be provided in the response HTTP header Error field serialized as JSON.\n\nimaginary uses internally libvips, a powerful and efficient library written in C for fast image processing which requires a low memory footprint and it's typically 4x faster than using the quickest ImageMagick and GraphicsMagick settings or Go native image package, and in some cases it's even 8x faster processing JPEG images.\n\nTo get started, take a look the installation steps, usage cases and API docs.\n\nSupported image operations\n\nPrerequisites\n\nInstallation\n\nDocker\n\nFly.io\n\nCloud Foundry\n\nGoogle Cloud Run\n\nRecommended resources\n\nProduction notes\n\nScalability\n\nClients\n\nPerformance\n\nBenchmark\n\nCommand-line usage\n\nHTTP API\n\nAuthorization\n\nURL signature\n\nErrors\n\nForm data\n\nParams\n\nEndpoints\n\nLogging\n\nFluentd log ingestion\n\nAuthors\n\nLicense\n\nResize\n\nEnlarge\n\nCrop\n\nSmartCrop (based on libvips built-in algorithm)\n\nRotate (with auto-rotate based on EXIF orientation)\n\nAutoRotate with further image transformations (based on EXIF metadata orientation)\n\nFlip (with auto-flip based on EXIF metadata)\n\nFlop\n\nZoom\n\nThumbnail\n\nFit\n\nPipeline of multiple independent image transformations in a single HTTP request.\n\nConfigurable image area extraction\n\nEmbed/Extend image, supporting multiple modes (white, black, mirror, copy or custom background color)\n\nWatermark (customizable by text)\n\nWatermark image\n\nCustom output color space (RGB, black/white...)\n\nFormat conversion (with additional quality/compression settings)\n\nInfo (image size, format, orientation, alpha...)\n\nReply with default or custom placeholder image in case of error.\n\nBlur\n\nlibvips 8.8+ (8.9+ recommended)\n\nC compatible compiler such as gcc 4.6+ or clang 3.0+\n\nGo 1.12+\n\ngo get -u github.com/h2non/imaginary\n\nAlso, be sure you have the latest version of bimg:\n\ngo get -u github.com/h2non/bimg\n\nRun the following script as sudo (supports OSX, Debian/Ubuntu, Redhat, Fedora, Amazon Linux):\n\nThe install script requires curl and pkg-config\n\nSee Dockerfile for image details.\n\nFetch the image (comes with latest stable Go and libvips versions)\n\nStart the container with optional flags (default listening on port 9000)\n\nStart the container enabling remote URL source image processing via GET requests and url query param.\n\nStart the container enabling local directory image process via GET requests and file query param.\n\nStart the container in debug mode:\n\nEnter to the interactive shell in a running container\n\nStop the container\n\nFor more usage examples, see the command line usage.\n\nAll Docker images tags are available here.\n\nYou can add imaginary to your docker-compose.yml file:\n\nDeploy imaginary in seconds close to your users in Fly.io cloud by clicking on the button below:\n\nFly is a platform for applications that need to run globally. It runs your code close to users and scales compute in cities where your app is busiest. Write your code, package it into a Docker image, deploy it to Fly's platform and let that do all the work to keep your app snappy.\n\nYou can learn more about how Fly.io can reduce latency and provide a better experience by serving traffic close to your users location.\n\nLearn more about how to run a custom deployment of imaginary on the Fly.io cloud.\n\nAssuming you have cloudfoundry account, bluemix or pivotal and command line utility installed.\n\nClone this repository:\n\nPush the application\n\nDefine the library path\n\nStart the application\n\nClick to deploy on Google Cloud Run:\n\nGiven the multithreaded native nature of Go, in terms of CPUs, most cores means more concurrency and therefore, a better performance can be achieved. From the other hand, in terms of memory, 512MB of RAM is usually enough for small services with low concurrency (<5 requests/second). Up to 2GB for high-load HTTP service processing potentially large images or exposed to an eventual high concurrency.\n\nIf you need to expose imaginary as public HTTP server, it's highly recommended to protect the service against DDoS-like attacks. imaginary has built-in support for HTTP concurrency throttle strategy to deal with this in a more convenient way and mitigate possible issues limiting the number of concurrent requests per second and caching the awaiting requests, if necessary.\n\nIn production focused environments it's highly recommended to enable the HTTP concurrency throttle strategy in your imaginary servers.\n\nThe recommended concurrency limit per server to guarantee a good performance is up to 20 requests per second.\n\nYou can enable it simply passing a flag to the binary:\n\nIn case you are experiencing any persistent unreleased memory issues in your deployment, you can try passing this environment variables to imaginary:\n\nWhen you use a cluster, it is necessary to control how the deployment is executed, and it is very useful to finish the containers in a controlled manner.\n\nYou can use the next command:\n\nIf you're looking for a large scale solution for massive image processing, you should scale imaginary horizontally, distributing the HTTP load across a pool of imaginary servers.\n\nAssuming that you want to provide a high availability to deal efficiently with, let's say, 100 concurrent req/sec, a good approach would be using a front end balancer (e.g: HAProxy) to delegate the traffic control flow, ensure the quality of service and distribution the HTTP across a pool of servers:\n\nnode.js\n\nFeel free to send a PR if you created a client for other language.\n\nlibvips is probably the faster open source solution for image processing. Here you can see some performance test comparisons for multiple scenarios:\n\nlibvips speed and memory usage\n\nbimg (Go library with C bindings to libvips)\n\nSee benchmark.sh for more details\n\nEnvironment: Go 1.4.2. libvips-7.42.3. OSX i7 2.7Ghz\n\nimaginary can deal efficiently with up to 20 request per second running in a multicore machine, where it crops a JPEG image of 5MB and spending per each request less than 100 ms\n\nThe most expensive image operation under high concurrency scenarios (> 20 req/sec) is the image enlargement, which requires a considerable amount of math operations to scale the original image. In this kind of operation the required processing time usually grows over the time if you're stressing the server continuously. The advice here is as simple as taking care about the number of concurrent enlarge operations to avoid server performance bottlenecks.\n\nStart the server in a custom port:\n\nimaginary -p 8080\n\nAlso, you can pass the port as environment variable:\n\nPORT=8080 imaginary\n\nEnable HTTP server throttle strategy (max 10 requests/second):\n\nEnable remote URL image fetching (then you can do GET request passing the url=http://server.com/image.jpg query param):\n\nMount local directory (then you can do GET request passing the file=image.jpg query param):\n\nEnable authorization header forwarding to image origin server. X-Forward-Authorization or Authorization (by priority) header value will be forwarded as Authorization header to the target origin server, if one of those headers are present in the incoming HTTP request. Security tip: secure your server from public access to prevent attack vectors when enabling this option:\n\nOr alternatively you can manually define an constant Authorization header value that will be always sent when fetching images from remote image origins. If defined, X-Forward-Authorization or Authorization headers won't be forwarded, and therefore ignored, if present. Note:\n\nSend fixed caching headers in the response. The headers can be set in either \"cache nothing\" or \"cache for N seconds\". By specifying 0 imaginary will send the \"don't cache\" headers, otherwise it sends headers with a TTL. The following example informs the client to cache the result for 1 year:\n\nEnable placeholder image HTTP responses in case of server error/bad request. The placeholder image will be dynamically and transparently resized matching the expected image widthxheight define in the HTTP request params. Also, the placeholder image will be also transparently converted to the desired image type defined in the HTTP request params, so the API contract should be maintained as much better as possible.\n\nThis feature is particularly useful when using imaginary as public HTTP service consumed by Web clients. In case of error, the appropriate HTTP status code will be used to reflect the error, and the error details will be exposed serialized as JSON in the Error response HTTP header, for further inspection and convenience for API clients.\n\nYou can optionally use a custom placeholder image. Since the placeholder image should fit a variety of different sizes, it's recommended to use a large image, such as 1200x1200. Supported custom placeholder image types are: JPEG, PNG and WEBP.\n\nEnable URL signature (URL-safe Base64-encoded HMAC digest).\n\nThis feature is particularly useful to protect against multiple image operations attacks and to verify the requester identity.\n\nIt is recommended to pass key as environment variables:\n\nIncrease libvips threads concurrency (experimental):\n\nEnable debug mode:\n\nOr filter debug output by package:\n\nDisable info logs:\n\nReading a local image (you must pass the -mount=<directory> flag):\n\nFetching the image from a remote server (you must pass the -enable-url-source flag):\n\nCrop behaviour can be influenced with the gravity parameter. You can specify a preference for a certain region (north, south, etc.). To enable Smart Crop you can specify the value \"smart\" to autodetect the most interesting section to consider as center point for the crop operation:\n\nimaginary exposes an ugly HTML form for playground purposes in: http://localhost:8088/form\n\nimaginary can be configured to block all requests for images with a src URL this is not specified in the allowed-origins list. Imaginary will validate that the remote url matches the hostname and path of at least one origin in allowed list. Perhaps the easiest way to show how this works is to show some examples.\n\nallowed-origins setting image url is valid -allowed-origins https://s3.amazonaws.com/some-bucket/ s3.amazonaws.com/some-bucket/images/image.png VALID -allowed-origins https://s3.amazonaws.com/some-bucket/ s3.amazonaws.com/images/image.png NOT VALID (no matching basepath) -allowed-origins https://s3.amazonaws.com/some-* s3.amazonaws.com/some-bucket/images/image.png VALID -allowed-origins https://*.amazonaws.com/some-bucket/ anysubdomain.amazonaws.com/some-bucket/images/image.png VALID -allowed-origins https://*.amazonaws.com anysubdomain.amazonaws.comimages/image.png VALID -allowed-origins https://*.amazonaws.com www.notaws.comimages/image.png NOT VALID (no matching host) -allowed-origins https://*.amazonaws.com, foo.amazonaws.com/some-bucket/ bar.amazonaws.com/some-other-bucket/image.png VALID (matches first condition but not second)\n\nimaginary supports a simple token-based API authorization. To enable it, you should pass the -key flag to the binary.\n\nAPI token can be defined as HTTP header (API-Key) or query param (key).\n\nExample request with API key:\n\nThe URL signature is provided by the sign request parameter.\n\nThe HMAC-SHA256 hash is created by taking the URL path (including the leading /), the request parameters (alphabetically-sorted and concatenated with & into a string). The hash is then base64url-encoded.\n\nHere an example in Go:\n\nimaginary will always reply with the proper HTTP status code and JSON body with error details.\n\nHere an example response error when the payload is empty:\n\nSee all the predefined supported errors here.\n\nIf -enable-placeholder or -placeholder <image path> flags are passed to imaginary, a placeholder image will be used in case of error or invalid request input.\n\nIf -enable-placeholder is passed, the default imaginary placeholder image will be used, however you can customized it via -placeholder flag, loading a custom compatible image from the file system.\n\nSince imaginary has been partially designed to be used as public HTTP service, including web pages, in certain scenarios the response MIME type must be respected, so the server will always reply with a placeholder image in case of error, such as image processing error, read error, payload error, request invalid request or any other.\n\nYou can customize the placeholder image passing the -placeholder <image path> flag when starting imaginary.\n\nIn this scenarios, the error message details will be exposed in the Error response header field as JSON for further inspection from API clients.\n\nIn some edge cases the placeholder image resizing might fail, so a 400 Bad Request will be used as response status and the Content-Type will be application/json with the proper message info. Note that this scenario won't be common.\n\nIf you're pushing images to imaginary as multipart/form-data (you can do it as well as image/*), you must define at least one input field called file with the raw image data in order to be processed properly by imaginary.\n\nComplete list of available params. Take a look to each specific endpoint to see which params are supported. Image measures are always in pixels, unless otherwise indicated.\n\nwidth int - Width of image area to extract/resize\n\nheight int - Height of image area to extract/resize\n\ntop int - Top edge of area to extract. Example: 100\n\nleft int - Left edge of area to extract. Example: 100\n\nareawidth int - Height area to extract. Example: 300\n\nareaheight int - Width area to extract. Example: 300\n\nquality int - JPEG image quality between 1-100. Defaults to 80\n\ncompression int - PNG compression level. Default: 6\n\npalette bool - Enable 8-bit quantisation. Works with only PNG images. Default: false\n\nrotate int - Image rotation angle. Must be multiple of 90. Example: 180\n\nfactor int - Zoom factor level. Example: 2\n\nmargin int - Text area margin for watermark. Example: 50\n\ndpi int - DPI value for watermark. Example: 150\n\ntextwidth int - Text area width for watermark. Example: 200\n\nopacity float - Opacity level for watermark text or watermark image. Default: 0.2\n\nflip bool - Transform the resultant image with flip operation. Default: false\n\nflop bool - Transform the resultant image with flop operation. Default: false\n\nforce bool - Force image transformation size. Default: false\n\nnocrop bool - Disable crop transformation. Defaults depend on the operation\n\nnoreplicate bool - Disable text replication in watermark. Defaults to false\n\nnorotation bool - Disable auto rotation based on EXIF orientation. Defaults to false\n\nnoprofile bool - Disable adding ICC profile metadata. Defaults to false\n\nstripmeta bool - Remove original image metadata, such as EXIF metadata. Defaults to false\n\ntext string - Watermark text content. Example: copyright (c) 2189\n\nfont string - Watermark text font type and format. Example: sans bold 12\n\ncolor string - Watermark text RGB decimal base color. Example: 255,200,150\n\nimage string - Watermark image URL pointing to the remote HTTP server.\n\ntype string - Specify the image format to output. Possible values are: jpeg, png, webp and auto. auto will use the preferred format requested by the client in the HTTP Accept header. A client can provide multiple comma-separated choices in Accept with the best being the one picked.\n\ngravity string - Define the crop operation gravity. Supported values are: north, south, centre, west, east and smart. Defaults to centre.\n\nfile string - Use image from server local file path. In order to use this you must pass the -mount=<dir> flag.\n\nurl string - Fetch the image from a remote HTTP server. In order to use this you must pass the -enable-url-source flag.\n\ncolorspace string - Use a custom color space for the output image. Allowed values are: srgb or bw (black&white)\n\nfield string - Custom image form field name if using multipart/form. Defaults to: file\n\nextend string - Extend represents the image extend mode used when the edges of an image are extended. Defaults to mirror. Allowed values are: black, copy, mirror, white, lastpixel and background. If background value is specified, you can define the desired extend RGB color via background param, such as ?extend=background&background=250,20,10. For more info, see libvips docs.\n\nbackground string - Background RGB decimal base color to use when flattening transparent PNGs. Example: 255,200,150\n\nsigma float - Size of the gaussian mask to use when blurring an image. Example: 15.0\n\nminampl float - Minimum amplitude of the gaussian filter to use when blurring an image. Default: Example: 0.5\n\noperations json - Pipeline of image operation transformations defined as URL safe encoded JSON array. See pipeline endpoints for more details.\n\nsign string - URL signature (URL-safe Base64-encoded HMAC digest)\n\ninterlace bool - Use progressive / interlaced format of the image output. Defaults to false\n\naspectratio string - Apply aspect ratio by giving either image's height or width. Exampe: 16:9\n\nContent-Type: application/json\n\nServes as JSON the current imaginary, bimg and libvips versions.\n\nExample response:\n\nContent-Type: application/json\n\nProvides some useful statistics about the server stats with the following structure:\n\nuptime number - Server process uptime in seconds.\n\nallocatedMemory number - Currently allocated memory in megabytes.\n\ntotalAllocatedMemory number - Total allocated memory over the time in megabytes.\n\ngoroutines number - Number of running goroutines.\n\ncpus number - Number of used CPU cores.\n\nExample response:\n\nContent Type: text/html\n\nServes an ugly HTML form, just for testing/playground purposes\n\nAccepts: image/*, multipart/form-data. Content-Type: application/json\n\nReturns the image metadata as JSON:\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nCrop the image by a given width or height. Image ratio is maintained\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nforce bool\n\nrotate int\n\nembed bool\n\nnorotation bool\n\nnoprofile bool\n\nflip bool\n\nflop bool\n\nstripmeta bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\ngravity string\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nCrop the image by a given width or height using the libvips built-in smart crop algorithm.\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nforce bool\n\nrotate int\n\nembed bool\n\nnorotation bool\n\nnoprofile bool\n\nflip bool\n\nflop bool\n\nstripmeta bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\ngravity string\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nResize an image by width or height. Image aspect ratio is maintained\n\nwidth int required\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnocrop bool - Defaults to true\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nwidth int required\n\nheight int required\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnocrop bool - Defaults to false\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\ntop int required\n\nleft int\n\nareawidth int required\n\nareaheight int\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nfactor number required\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnocrop bool - Defaults to true\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nwidth int required\n\nheight int required\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nResize an image to fit within width and height, without cropping. Image aspect ratio is maintained The width and height specify a maximum bounding box for the image.\n\nwidth int required\n\nheight int required\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nAutomatically rotate the image with no further image transformations based on EXIF orientation metadata.\n\nReturns a new image with the same size and format as the input image.\n\nrotate int required\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\ntype string required\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nThis endpoint allow the user to declare a pipeline of multiple independent image transformation operations all in a single HTTP request.\n\nNote: a maximum of 10 independent operations are current allowed within the same HTTP request.\n\nInternally, it operates pretty much as a sequential reducer pattern chain, where given an input image and a set of operations, for each independent image operation iteration, the output result image will be passed to the next one, as the accumulated result, until finishing all the operations.\n\nIn imperative programming, this would be pretty much analog to the following code:\n\noperations json required - URL safe encoded JSON with a list of operations. See below for interface details.\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nSelf-documented JSON operation schema:\n\ncrop - Same as /crop endpoint.\n\nsmartcrop - Same as /smartcrop endpoint.\n\nresize - Same as /resize endpoint.\n\nenlarge - Same as /enlarge endpoint.\n\nextract - Same as /extract endpoint.\n\nrotate - Same as /rotate endpoint.\n\nautorotate - Same as /autorotate endpoint.\n\nflip - Same as /flip endpoint.\n\nflop - Same as /flop endpoint.\n\nthumbnail - Same as /thumbnail endpoint.\n\nzoom - Same as /zoom endpoint.\n\nconvert - Same as /convert endpoint.\n\nwatermark - Same as /watermark endpoint.\n\nwatermarkImage - Same as /watermarkimage endpoint.\n\nblur - Same as /blur endpoint.\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\ntext string required\n\nmargin int\n\ndpi int\n\ntextwidth int\n\nopacity float\n\nnoreplicate bool\n\nfont string\n\ncolor string\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nimage string required - URL to watermark image, example: ?image=https://logo-server.com/logo.jpg\n\ntop int - Top position of the watermark image\n\nleft int - Left position of the watermark image\n\nopacity float - Opacity value of the watermark image\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nrotate int\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nsigma float\n\nminampl float\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\npalette bool\n\nAccepts: image/*, multipart/form-data. Content-Type: image/*\n\nsigma float required\n\nminampl float\n\nwidth int\n\nheight int\n\nquality int (JPEG-only)\n\ncompression int (PNG-only)\n\ntype string\n\nfile string - Only GET method and if the -mount flag is present\n\nurl string - Only GET method and if the -enable-url-source flag is present\n\nembed bool\n\nforce bool\n\nnorotation bool\n\nnoprofile bool\n\nstripmeta bool\n\nflip bool\n\nflop bool\n\nextend string\n\nbackground string - Example: ?background=250,20,10\n\ncolorspace string\n\nfield string - Only POST and multipart/form payloads\n\ninterlace bool\n\naspectratio string\n\npalette bool\n\nImaginary uses an apache compatible log format.\n\nYou can ingest Imaginary logs with fluentd using the following fluentd config :\n\nIn the end, access records are tagged with *.imaginary.access, and warning / error records are tagged with *.imaginary.error.\n\nSupport us with a monthly donation and help us continue our activities. [Become a backer]\n\nSponsors\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor]\n\nTomás Aparicio - Original author and maintainer.\n\nMIT - Tomas Aparicio"
    }
}