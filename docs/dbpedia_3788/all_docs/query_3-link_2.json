{
    "id": "dbpedia_3788_3",
    "rank": 2,
    "data": {
        "url": "https://commons.wikimedia.org/wiki/Commons:SPARQL_query_service/queries/examples",
        "read_more_link": "",
        "language": "en",
        "title": "Commons:SPARQL query service/queries/examples",
        "top_image": "https://commons.wikimedia.org/static/favicon/commons.ico",
        "meta_img": "https://commons.wikimedia.org/static/favicon/commons.ico",
        "images": [
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://commons.wikimedia.org/static/images/footer/wikimedia-button.svg",
            "https://commons.wikimedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/commons.png",
        "meta_site_name": "",
        "canonical_link": "https://commons.wikimedia.org/wiki/Commons:SPARQL_query_service/queries/examples",
        "text": "This page is parsed by the web interface of the query service to fill the query example dialog. Many of the examples also work in template:Wikidata list template calls parsed by the Listeriabot, which however requires the ?item field variable to be selected.\n\nNOTE: You must be a logged-in user in order to run these Commons SPARQL queries.\n\nNOTE: Alternatively you can use the way faster QLever Wikimedia Commons instance which does not require login but is only updated once in a while. Last update was 2023-05-30.\n\nThese basic queries help to understand SPARQL and the Wikibase RDF format.\n\nTry it!\n\nThe ImageGrid display mode looks for file-URLs of the form used as values by Wikidata properties such as image (P18) to identify files that can be displayed.\n\nThe statement to retrieve an image is ?file schema:url ?image.\n\nTry it!\n\nFiles with digital representation of (P6243) set to David (Q179900)\n\nTry it!\n\nNumber of files with Wikimedia VRTS ticket number (P6305 ) statements\n\nTry it!\n\ndigital representation of (P6243) statements has \"single value constraint\", or in other words each file can be a digital representation of only one Wikidata item, (use depicts (P180) if there are more objects in the image). The query below finds constraint violations.\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nMore random sample: https://w.wiki/55rr\n\nTry it!\n\nTry it!\n\nTry it!\n\nWARNING: The optimizer for Blazegraph has undesirable interactions with federated queries. Therefore, it's recommended that you turn off the optimizer completely or add a hint to run the federated portion first. This can be done with hint:Query hint:optimizer \"None\" or hint:Prior hint:runFirst true. Addtional info can be found at this WikidataCon 2017 presentation.\n\nThis query uses federation to find Wikidata labels for Wikidata items discovered in the first part\n\nTry it!\n\nAnalogous query for depicts (P180) : https://w.wiki/55fF\n\nTry it!\n\nrestricted to humans: tinyurl.com/y53kzn83 ; non-humans: tinyurl.com/y35b5w3l\n\nThis uses federation to WDQS in order to get the labels of the color items the roses depicted on the images have.\n\nTry it!\n\nThis uses federation to WDQS in order to get the items and labels of the subclasses of roses\n\nTry it!\n\nUsing federation to find all Wikidata items that have 'creator' (P170) as Vincent van Gogh (Q5582), then find all media items that depict those paintings and show in a grid.\n\nTry it!\n\nDetecting redundancy of a \"depicted\" concept with something more specific based on Wikidata. Federation is used to retrieve all items that are instances of \"church building\".\n\nTry it!\n\nThis uses federation to find articles published in (P1433) the German magazine 'Die Gartenlaube', together with some information about those articles;\n\nthen, having retrieved that set, finds Commons files with the Commons statements that they were published in (P1433) those articles\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nService wikibase:mwapi provides ability to combine SPARQL queries with Commons categories. Unfortunately only 10,000 files can be returned by that service, however that number can be extended as we can control which 10,000 by adding additional commands like\n\nbd:serviceParam mwapi:gcmsort \"timestamp\" . bd:serviceParam mwapi:gcmdir \"descending\" .\n\nMaintenance category Category:Artworks with structured data with redirected digital representation of property collects files with digital representation of (P6243) statement where Wikidata item linked by that statement is a redirect to a different Wikidata item. The following query will show the filenames, the items linked by P6243 property and the items they redirect to. Be aware that the category is often empty, and even if it is not the redirects might have been already corrected.\n\nTry it!\n\nTry it!\n\nTry it!\n\nSome queries investigating how particular properties are being used\n\nWikidata items with largest number of files on Commons linking to them through digital representation of (P6243) statement.\n\nTry it!\n\nNote -- limited to a sample of 50,000 files, although we (currently) have 225124 files with digital representation of (P6243) statements, as 50,000 seems to be as large a number as can be sent by federation to WDQS for analysis without timeout\n\nTry it!\n\nMore efficient version: https://w.wiki/55rv (with a random sample)\n\nTry it!\n\n(based on a random sample of 10,000 images with such provider statements)\n\nTry it!\n\n(from a non-random sample of 500,000 images)\n\nTry it!\n\nFind all the files which have the same value added twice to the same property. In this example we used depicts (P180) statement, but it can be used with others as well. This query sometimes times out, but removing \"DISTINCT\" from it fixes the problem, but returns multiple rows per file\n\nTry it!\n\nTry it!\n\nwith a more random set of sampled images: tinyurl.com/y35wjrz8 (choice will be different each time the query is modified, or if it is no longer in cache)\n\nTry it!\n\nCenter is defined by the coordinates at d:Q43244#P625\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nTry it!\n\nThis query uses federation to look up the properties' names on Wikidata (a task which is a little more involved for properties than for regular Wikidata items).\n\nA series of named subqueries (i.e. the WITH blocks) are used to force the sequence of execution -- see on Wikidata for a little more about this.\n\nTry it!\n\nA later 5000: tinyurl.com/yyuywxqm\n\nTry it!\n\nTry it!\n\nTry it!\n\nHere is a SPARQL query to search for Met images with a specific depiction statement and to delete those statements using Quickstatements. This method allows one to do mass search and removal, without needing to learn how to code a bot or to program.\n\nRationale: There are some low confidence P180/depiction statements to remove, so search for those statements with a specific qualifier \"stated in\" Met tagging initiative and with a reference statement. Then generate a list of Quickstatement directives we can copy/paste directly into Quickstatements using SPARQL string functions. Example:\n\n-STATEMENT | M58764743$D563143B-0F5C-403E-AE11-4BB744B7E267\n\nHint: When using Quickstatements to operate on Commons, make sure to select \"Create new command batch for: Commons [batch mode only!]\" as by default it works on Wikidata.\n\nUseful reference for string functions can be found at: https://docs.cambridgesemantics.com/anzograph/v2.5/userdoc/string-functions.htm"
    }
}