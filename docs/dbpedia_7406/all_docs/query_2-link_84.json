{
    "id": "dbpedia_7406_2",
    "rank": 84,
    "data": {
        "url": "https://pypi.org/project/ptf/",
        "read_more_link": "",
        "language": "en",
        "title": "ptf",
        "top_image": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "meta_img": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "images": [
            "https://pypi.org/static/images/logo-small.8998e9d1.svg",
            "https://pypi-camo.freetls.fastly.net/0829cfcbfacffe273847e7e61d172c1888d97280/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f61393563336335646537663239623866306533363231613862666433373265373f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/8af3b80a9daa695a095d01ed20cb1723f5732081/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f62373231313935653837396331636361623036613731346639643135623164613f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/0829cfcbfacffe273847e7e61d172c1888d97280/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f61393563336335646537663239623866306533363231613862666433373265373f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/8af3b80a9daa695a095d01ed20cb1723f5732081/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f62373231313935653837396331636361623036613731346639643135623164613f73697a653d3530",
            "https://pypi.org/static/images/blue-cube.572a5bfb.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67",
            "https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67",
            "https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67",
            "https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67",
            "https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67",
            "https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-06-22T17:23:07+00:00",
        "summary": "",
        "meta_description": "The P4 Testing Framework",
        "meta_lang": "en",
        "meta_favicon": "/static/images/favicon.35549fe8.ico",
        "meta_site_name": "PyPI",
        "canonical_link": "https://pypi.org/project/ptf/",
        "text": "PTF Packet Testing Framework\n\nIntroduction\n\nPTF is a Python based dataplane test framework. It is based on unittest, which is included in the standard Python distribution.\n\nThis document is meant to provide an introduction to the framework, discuss the basics of running tests and to provide examples of how to add tests.\n\nMost of the code was taken from the OFTest framework. However, PTF focuses on the dataplane and is independent of OpenFlow. We also added several new features.\n\nContributing\n\nBefore you start pushing new changes to this repository, you should notice that the entire src/ code is automatically formatted with Black. Our GitHub Action pipeline will verify that code is correctly formatted and fail if not.\n\nTwo separate targets in makefile were prepared to make our work easier. If you want to run a check, type make format-check, but if you want to reformat your code, please use make format.\n\nBlack is listed in the requirements-dev.txt. To install it locally, you can use make set-dev or pip install -r requirements-dev.txt. More information about Black, you find at Black's GitHub Page\n\nLonger Start\n\nDependencies\n\nThe following software is required to run PTF:\n\nPython 3.x\n\nScapy 2.4.5 (unless you provide another packet manipulation module)\n\npypcap (optional - VLAN tests will fail without this)\n\ntcpdump (optional - Scapy will complain if it's missing)\n\nRoot/sudo privilege is required on the host, in order to run ptf.\n\nThe default packet manipulator tool for ptf is Scapy. To install it use:\n\npip install scapy==2.4.5\n\nTo enable VLAN tests, you need to install pypcap:\n\npip install pypcap\n\nFor developer purpose, you should install requirements-dev.txt with:\n\npip install -r requirements-dev.txt\n\nThe tcpdump is optional, but to install it use:\n\n# on CentOS yum install tcpdump # on Debian base apt-get install tcpdump\n\nRun PTF\n\nOnce you have written tests and your switch is running, you can run 'ptf'. Use --help to see command line switches.\n\nFor example:\n\nsudo ./ptf --test-dir mytests/ --pypath $PWD \\ --interface 0@veth1 --interface 1@veth3 --interface 2@veth5 \\ --interface 3@veth7 --interface 4@veth9 --interface 5@veth11 \\ --interface 6@veth13 --interface 7@veth15 --interface 8@veth17\n\nThis will run all the tests included in the mytests directory. The --pypath option can be used to easily add directories to the Python PATH. This is useful if you use a Python interface to configure your data plane (as part of your tests). The --interface option (or -i) can be used to specify the interfaces on which to inject packets (along with the corresponding port number).\n\nInstall PTF\n\nPTF can be installed with pip:\n\n# Install the latest version pip install ptf # Install specific version pip installptf==0.9.1\n\nYou can also install a local copy of PTF with pip install ..\n\nWriting tests for your switch\n\nTake a look at the example directory. This is not a working example as it is (the switch is not included), but it will show you how to write tests. This directory contains the following:\n\nrun_client.sh: a wrapper around ptf\n\nswitch_sai_thrift: empty directory, this is where the Python bindings to program the switch's control plane would be copied\n\nmytests/sai_base_test.py: a wrapper Python class around PTF's BaseTest class. It is the base class for all the tests we added to mytests/switch.py\n\nmytests/switch.py: some example tests\n\nRunning the example\n\nIf you want to run the example, you will need to obtain p4factory. For the following, I will assume that you cloned the repository and installed the dependencies. I will assume that environment variable P4FACTORY contains the path to the cloned repository.\n\nFirst, you need to create the required veths:\n\ncd $P4FACTORY/tools/ sudo ./veth_setup.sh\n\nThe next step is to compile the target switch and to run it:\n\ncd $P4FACTORY/targets/switch/ make bm-switchsai sudo ./behavioral-model\n\nFinally, you can run the example tests:\n\ncd <ptf-dir>/example/ sudo ../ptf --test-dir mytests/ \\ --pypath $P4FACTORY/targets/switch/tests/pd_thrift/ --interface 0@veth1 --interface 1@veth3 --interface 2@veth5 \\ --interface 3@veth7 --interface 4@veth9 --interface 5@veth11 \\ --interface 6@veth13 --interface 7@veth15 --interface 8@veth17\n\nNew features\n\nWe added the following features to the base OFTest framework:\n\nFilters\n\nThey can be used to discard some of the packets received from the switch. Take a look at sai_base_test.py for an example. You will see the following code testutils.add_filter(testutils.not_ipv6_filter) which tells PTF to discard received IPv6 packets. You can add your own filters (they have to be callable Python objects which take a Scapy packet as input).\n\nTernary matching\n\nA PTF test -just like an OFTest test- matches the received packets against expected packets. This is an exact match. However, sometimes one does not care about all the fields in the packets. PTF introduces the Mask class which lets you specified some field you do not care about when performing the match. For example:\n\nimport mask m = mask.Mask(expected_pkt) m.set_do_not_care_scapy(IP, 'ttl') verify_packets(<test>, m, <port list>)\n\nTest timeout\n\nA timeout for test cases can be specified using the --test-case-timeout command line option. This timeout must be expressed in seconds. A timeout of 0 is the same as no timeout (the default). If the timeout expires before the test is done executing, an exception will be raised and the test counts as an error. A timeout can also be specified for each individual test case, using the @testtimeout decorator, which needs to be imported from ptf.testutils. This timeout takes precedence over the global timeout passed on the command line.\n\nPluggable packet manipulation module\n\nBy default, ptf uses Scapy as the packet manipulation module, but it can also operate on a different one.\n\nSuch module must define/implement the same symbols, as defined in Scapy implementation of packet. Most of them are just names of most common frame headers (Ether, IP, TCP, UDP, ...).\n\nThe default implementation can be found in file /src/ptf/packet_scapy.py. It can be used as a reference when implementing your own version.\n\nTo use another packet manipulation module, one needs to provide it as argument -pmm or --packet-manipulation-module when running the ptf binary.\n\nsudo ./ptf <other parameters> -pmm foo.packet_foo\n\nPlease make sure that this module is loaded into the runtime before running any tests.\n\nSharding\n\nYou can achieve parallelization by splitting tests into N groups and running them with separate PTF processes. Each PTF instance will run disjoint subset of all selected tests.\n\nFor example to run specific set of tests across 3 PTF instances:\n\n$ ssh mynode0 sudo ./ptf --test-dir mytests --num-shards 3 --shard-id 0 all ^other & $ ssh mynode1 sudo ./ptf --test-dir mytests --num-shards 3 --shard-id 1 all ^other & $ ssh mynode2 sudo ./ptf --test-dir mytests --num-shards 3 --shard-id 2 all ^other &\n\nConfiguring PTF\n\nPlatforms\n\nThe \"platform\" is a configuration file (written in Python) that tells PTF how to send packets to and receive packets from the dataplane of the switch.\n\neth\n\nThe default platform, eth, uses Linux Ethernet interfaces and is configured with the -i option (or --interface). Pass the option as -i ofport@interface, for example -i 1@eth1. If no -i options are given the the default configuration uses vEths.\n\nremote\n\nAnother common platform, remote, provides support for testing of switches on a different host. This can be useful for cases where interfaces are not available on one host (i.e. they're not bound to a Linux interface driver) or where PTF cannot run on the same host (unsupported OS, missing software, etc.).\n\nThis can be enable by modifying the platforms/remote.py file to point to 4 NICs on the host running PTF, like so:\n\nremote_port_map = { (0, 23) : \"eth2\", # port 23 of device 0 is connected to physical port on the server eth2 (0, 24) : \"eth3\", # port 24 of device 0 is connected to physical port on the server eth3 (0, 25) : \"eth4\", (0, 26) : \"eth5\" }\n\nnn\n\nWe introduce a new platform, nn, which uses [nanomsg] (http://nanomsg.org/) to send and receive packet to the switch. We support IPC and TCP nanomsg sockets. When using this platform, you need to make sure that the Python package [nnpy] (https://github.com/nanomsg/nnpy) is installed. With nn, do not use --interface, instead use --device-socket. For each device, you need to provide a list of enabled ports and a nanomsg socket address. For example:\n\n--device-socket 0-{1,2,5-8}@ipc:///tmp/bmv2_packets_1.ipc\n\nThis command will enable ports 1, 2, 5, 6, 7, 8 on device 0. Packets for device 0 will be captured and send on IPC socket ipc:///tmp/bmv2_packets_1.ipc.\n\nPassing Parameters to Tests\n\nThere is a facility for passing test-specific parameters into tests that works as follows. On the command line, give the parameter\n\n--test-params=\"key1=17;key2=True\"\n\nYou can then access these parameters in your tests' Pyhton code using the following code:\n\nimport ptf.testutils as testutils # Returns a dictionary which includes all your parameters test_params = testutils.test_params_get() # Returns the value of the parameter \"param\", or None if not found param_value = testutils.test_param_get(\"param\")\n\nTake a look at sai_base_test.py for an example.\n\nGrouping Tests together\n\nIt is very easy to create groups of tests, using the provided group Python decorator. Simply decorate your test with @group(<name of group>).\n\nTake a look at switch.py for an example.\n\nOne given test can belong to several groups. You can choose to run only the tests belonging to a given group using a command like this one:\n\nsudo ./ptf --test-dir mytests/ --pypath $PWD <name of group>\n\nWe also provide a convenient disabled decorator for tests.\n\nSupport for multidevice tests\n\nThe original OFTest was meant to unit test a single OF-compliant switch. With PTF, we tried to add support for testing a network of several devices. If you do not intend to use this multi-device feature, you do not need to worry about it, it should not impact you. If you want to leverage this feature, here is what you need to do:"
    }
}