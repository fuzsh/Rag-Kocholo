{
    "id": "dbpedia_7406_0",
    "rank": 26,
    "data": {
        "url": "https://packetpushers.net/blog/open-networking-cheat-sheet/",
        "read_more_link": "",
        "language": "en",
        "title": "The Open Networking Cheat Sheet",
        "top_image": "https://packetpushers.net/wp-content/uploads/fbrfg/favicon-32x32.png?v=24",
        "meta_img": "https://packetpushers.net/wp-content/uploads/fbrfg/favicon-32x32.png?v=24",
        "images": [
            "https://packetpushers.net/wp-content/uploads/2023/11/PacketPushersLogo.svg",
            "https://packetpushers.net/wp-content/uploads/2015/09/CheatSheet-1.png",
            "https://secure.gravatar.com/avatar/330673e54cafdbd6b3aaa20ea19cc582?s=96&d=blank&r=g",
            "https://packetpushers.net/wp-content/uploads/2023/11/PacketPushersLogo_White.svg",
            "https://packetpushers.net/wp-content/uploads/2023/11/social-footer-youtube.svg",
            "https://packetpushers.net/wp-content/uploads/2023/11/social-footer-linkedin.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Drew Conry-Murray",
            "Blog > Good to Know"
        ],
        "publish_date": "2015-09-21T19:19:06+00:00",
        "summary": "",
        "meta_description": "A variety of open networking projects are driving innovation, from FRR to OvS & more. This cheat sheet tracks who's doing what at 12 projects.",
        "meta_lang": "en",
        "meta_favicon": "/wp-content/uploads/fbrfg/apple-touch-icon.png?v=24",
        "meta_site_name": "",
        "canonical_link": "https://packetpushers.net/blog/open-networking-cheat-sheet/",
        "text": "There are a multitude of “open” projects aimed at driving innovation in the network, especially in the realm of network virtualization and “software defined” initiatives. I created this cheat sheet to help me keep them organized. I plan to update this document to keep it fresh. The most recent update is March 2018. The previous update was June 2016 (hey, I’ve been busy).\n\nIn addition to the table below, I’ve included details on each project, along with resources for more information. Feel free to make suggestions in the comments section for projects I might have missed.\n\nNOTE: This list doesn’t include open source network operating systems (NOSs). You can find a list of open and proprietary NOSs on our Virtual Toolbox page.\n\nSome Comments On ‘Open’\n\nAs you can see from the list, the word “open” gets thrown around a lot. In some cases the projects listed below are open source, meaning the code is available under a traditional open source license.\n\nIn other cases, the project is ‘open’ in the sense that you can join the project (often for a fee) to access code and contribute to the project’s development.\n\nThe Projects\n\nDPDK (Data Plane Development Kit)\n\nDescription:\n\nDPDK (Data Plane Development Kit) contains libraries and drivers to accelerate packet processing on general-purpose processors. Originally developed by Intel to boost the packet processing capabilities of x86 chips, DPDK is now an open source project under the auspices of the Linux Foundation.\n\nDPDK has also been extended beyond x86 to work with ARM and IBM POWER CPUs.\n\nThe software is available under a BSD license.\n\nWhy It’s Relevant:\n\nMore and more networking functions (switching, firewalling, load balancing, and so on) are being performed in software that runs on commodity servers rather than in purpose-built appliances beefed up with custom ASICs.\n\nDPDK can be used to accelerate network applications to squeeze more performance from those commodity boxes.\n\nResources:\n\nDPDK.org\n\nDPDK Project Moves To The Linux Foundation – Packet Pushers\n\nIntel Network Autobahn: Maximizing Your Traffic Throughput – Network Field Day (Vimeo)\n\nFree Range Routing\n\nDescription:\n\nFree Range Routing (FRR) is an open source IP routing stack for Unix and Linux OSs that includes common routing applications such as BGP, OSPF, and others. FRR is a fork of the Quagga project.\n\nWhile Quagga is a mature and established code base, the fork occurred for several reasons, including a desire to employ more modern development practices and tools such as continuous integration, the use of GitHub, and faster testing.\n\nWhy It’s Relevant:\n\nThe disaggregation of network software and hardware has created new opportunities for organizations of all kinds to mix and match various elements of a network stack to optimize the infrastructure for their needs.\n\nFFR fits this trend by providing a routing stack that can run on a variety of platforms while also being developed independently of other hardware and software.\n\nBackers of FFR include Cumulus Networks, Big Switch Networks, 6Wind, LinkedIn, and others.\n\nResources:\n\nFRRouting.org\n\nFRRouting – GitHub\n\nPQ Show 112: Free Range Routing At IETF 98 – Packet Pushers\n\nFree Range Routing Project Forks Quagga – Packet Pushers\n\nOpenDaylight\n\nDescription:\n\nOpenDaylight is an open-source SDN controller. The project is overseen by the Linux Foundation, and members include Cisco, Brocade, Dell, HP, Arista, and VMware.\n\nOpenDaylight is designed to run in a heterogenous network; the controller can configure switches and other network devices that support OpenFlow. It also supports a variety of other networking protocols, including NetConf, SNMP, BGP, and LACP.\n\nOn the northbound side it exposes a set of REST APIs to allow third-party applications to interact with the controller and request network services.\n\nOpenDaylight also includes an API for Neutron, the networking module in OpenStack.\n\nOpenDaylight is currently on its third release, called Lithium. The OpenDaylight Project anticipates that the controller will be used in as many as 20 commercial products. Several network vendors, including Cisco, Brocade, and Extreme, offer commercial implementations of the OpenDaylight controller.\n\nOpenDaylight is available under the Eclipse Public License.\n\nWhy It’s Relevant:\n\nAs with other open-source efforts, OpenDaylight provides a counterbalance to proprietary software, fosters competition in the marketplace, and gives customers more choice. A robust project such as ODL draws attention from developers to create applications that extend the value of the controller.\n\nPerhaps just as important, when it comes to a new and disruptive idea such as SDN, an open-source controller is a low-cost, low-risk option for organizations to experiment with SDN concepts and technologies.\n\nResources:\n\nSDN Series Part Six: OpenDaylight, the Most Documented Controller – The New Stack\n\n2015 OpenDaylight Summit\n\nShow 148 – Talking With OpenDaylight Leadership – Packet Pushers\n\nOpenFlow\n\nDescription:\n\nOpenFlow is a protocol for configuring the forwarding plane of network devices. When used in conjunction with a centralized controller, OpenFlow can streamline and automate the configuration of network devices. Originally developed as a research project at Stanford University, OpenFlow is now overseen by the Open Networking Foundation (ONF), a non-profit industry consortium. ONF membership is required to access the protocol and contribute to its development, though it’s not required to use the specification.\n\nWhy It’s Relevant:\n\nThe creation of the OpenFlow protocol was an essential step in the development of software-defined networking. By defining a standard mechanism for configuring network devices, the protocol enabled both incumbents and startups to begin testing SDN concepts and to build—and ship—actual products.\n\nResources:\n\nONF Technical Library – Open Networking Foundation\n\nOpenFlow @ Google – Video presentation by Google’s Urs Hoelzle (and slides)\n\nOpenStack\n\nDescription:\n\nOpenStack is an open-source cloud orchestration platform used to build private and public clouds. OpenStack is divided into modules for compute, networking, and both block and object storage. It also includes a management dashboard.\n\nQueens is the most current release of the OpenStack platform as of March 2018. It’s available under an Apache 2.0 license.\n\nWhy It’s Relevant:\n\nMore enterprises want the flexibility and scale of cloud computing, whether to build a private cloud or a hybrid system that links premises systems and a public provider. At the same time, providers are looking to build public clouds to attract new customers. The OpenStack project targets both markets.\n\nAs with OpenDaylight, enterprises can download and experiment with OpenStack without having to make a substantial investment in proprietary software. At the same time, many vendors have released commercial distributions of OpenStack, including HP, Red Hat, Mirantis, Cisco, and IBM, to help organizations that want a more turnkey option and technical support.\n\nResources:\n\nOpenStack.org\n\nOpenStack Wiki\n\nOpenStack Marketplace\n\nLearning OpenStack Networking – James Denton\n\nOpen Compute Project\n\nDescription:\n\nThe Open Compute Project (OCP) shares design specs for data center infrastructure, including servers, storage, networking, and data center racks. OCP originally emphasized hardware designs, but the project has expanded to include software. The goals of the project are to promote energy-efficient designs, leverage commodity components, and reduce capital and operating costs for large data centers.\n\nWhy It’s Relevant:\n\nOCP was launched by Facebook and attracted a variety of participants, including Microsoft and Intel. However, the designs are tailored to the needs of the world’s largest data center operators and verticals such as financial services, rather than the general enterprise.\n\nThat said, the project’s efforts are likely to yield improvements that could make their way to the masses, such as switch designs that might be adopted by white box manufacturers.\n\nResources:\n\nOpen Compute Wiki – Open Compute Project\n\nOpen Compute Summit\n\nFacebook Unveils TOR Switch – Network Computing\n\nOpen Contrail\n\nDescription:\n\nOpen Contrail is open source software for creating a virtual network. Juniper Networks, which acquired Contrail Systems in 2012, launched the open source version in 2013. Open Contrail provides SDN and NFV functions and targets both enterprises and service providers.\n\nOpen Contrail includes a software controller that configures the virtual network, provides management and analytics, and provides REST-based APIs for third-party applications.\n\nAlso included with Open Contrail is vRouter, a virtual router that runs in a hypervisor. The vRouter builds tunnels between virtual machines to provide connectivity. The vRouters communicate with the controller via XMPP.\n\nOpen Contrail supports MPLS over GRE/UDP and VXLAN to enable tunnels for a network overlay. It is also integrated with OpenStack.\n\nOpenContrail is available under an Apache 2 license. Juniper also offers a commercial version of Contrail.\n\nWhy It’s Relevant:\n\nJuniper has two main goals for providing an open source version of its SDN/NFV software. The first is to get it into the hands of users as quickly and easily as possible. Service providers and enterprise customers that want to get their hands dirty in a test lab can pull down the code and start learning right away. In the hyper-competitive SDN space, that’s a win.\n\nAnd for those investigating OpenStack, Open Contrail’s integration with the cloud orchestration platform creates an affinity for organizations that are interested in open-source options.\n\nThe second is to attract developers and build a community. The more developers you can bring to the product, the more likely the community gets code improvements and new applications. A community of active users provides a multiplier effect that amplifies Juniper’s own development efforts.\n\nOn the downside, there are already numerous open source SDN projects in the works, and only so many developers and community members to go around. Juniper needs to make a significant effort to build an active community of contributors and adopters to keep Open Contrail relevant.\n\nResources:\n\nOpen Contrail.org\n\nJuniper Launches Contrail SDN Software, Goes Open Source – Network Computing\n\nShow 243 – Network Virtualization with Juniper QFX & Contrail (Sponsored) – Packet Pushers\n\nJuniper Networks Balancing Engineering Simplicity with Randy Bias (Open Contrail) – Network Field Day (Vimeo)\n\nONIE (Open Network Install Environment)\n\nDescription:\n\nThe Open Network Install Environment (ONIE) is a project within Open Compute. According the site’s home page, ONIE “acts as an enhanced boot loader utilizing facilities in a Linux/BusyBox environment.” In other words, it allows a network operating system to be installed on a bare metal switch.\n\nONIE’s project supporters include Accton, Agema, Big Switch Networks, Broadcom, Cumulus Networks, Dell, Penguin Computing, and Quanta.\n\nWhy It’s Relevant:\n\nONIE enables a key value proposition for white box switching: to allow manufacturers, resellers, and customers to install the switch OS of their choosing.\n\nBy decoupling the hardware from the OS, customers have more options to match specific hardware and software needs. Customers also aren’t tied to a single vendor’s release schedule for OS and hardware upgrades and improvements, as they would be on an integrated product.\n\nA decoupled switch OS also lets customers leverage traditional configuration and operations tools to align switch management with server management.\n\nResources:\n\nONIE – Open Compute Project Wiki\n\nWhat Is ONIE? – Ethan Banks\n\nONOS\n\nDescription:\n\nONOS, or Open Network Operating System, is an open source SDN project aimed at service providers. As with other controller-based systems, it supports OpenFlow (among other protocols) to program network devices, and has APIs to interact with applications. It’s based on a distributed core that can run across multiple instances in a cluster.\n\nONOS uses an intent-based model for application integration; in other words, applications specify high-level outcomes, but leave the low-level implementation details to the controller and the network.\n\nOriginally overseen by the Open Networking Lab (ON.Lab), a non-profit research consortium with ties to Stanford University and UC Berkeley, ONOS became a Collaborative Project at the Linux Foundation as of October 2015.\n\nWhy It’s Relevant:\n\nAt present, ONOS isn’t directly relevant to the enterprise because of its service provider/cloud provider focus. However, the project is being supported by major players, including AT&T, Huawei, Intel, NEC, and others. The emphasis on open source software and rapid innovation may result in code or features that could find their way to the enterprise market.\n\nThis summer at the Open Networking Summit, a proof-of-concept project called CORD (Central Office Re-architected as Data Center) debuted. CORD’s goal is to foster cloud-like agility for service providers through the use of ONOS, OpenStack, and commodity infrastructure such as white-box switches.\n\nONOS is also bundled in Atrium, a distribution of all-open-source SDN software released by the Open Networking Foundation (ONF). Besides ONOS, Atrium also includes Quagga BGP, and OpenFlow 1.3 device drivers.\n\nResources:\n\nONOS.org\n\nIntroducing ONOS – Whitepaper\n\nONOS Overview video – ON.Lab\n\nCORD Presentation – Open Networking Summit\n\nOVS (Open vSwitch)\n\nDescription:\n\nOpen vSwitch is an open source virtual switch that provides forwarding capabilities for virtual machines. It can switch traffic among VMs on a single physical host, and connect VMs to the physical network. Open vSwitch can run on Linux-based hypervisors including KVM and Xen.\n\nIt’s available under an Apache 2.0 license.\n\nWhy It’s Relevant:\n\nIn addition to its networking capabilities in virtual environments, OVS is used in OpenStack, the cloud orchestration platform. More specifically, OVS is a plug-in within Neutron, the networking module within OpenStack. Open vSwitch is also OpenFlow-enabled, so controllers can use the OpenFlow protocol to set flows in OVS.\n\nResources:\n\nOpen vSwitch Under The Hood – Ivan Pepelnjak\n\nIntroduction to Open vSwitch – David Mahler\n\nShow 219 – Open vSwitch Obtains Ludicrous Speed – Packet Pushers\n\nDatanauts 009 – The Silo Series: Designing A vSwitch – Packet Pushers\n\nPQ 138: Inside Open vSwitch – Packet Pushers\n\nP4\n\nDescription:\n\nP4 is an open-source language, released under an Apache 2.0 license, for programming packet-forwarding devices, such as a Broadcom ASIC, a network server adapter, or a software switch.\n\nA blog by Nick McKeown & Jen Rexford, two of the people instrumental in creating the language, describes P4 this way: “P4 gives us a way to tell the switch what it should do, and how it should process packets. P4 lets us define what headers a switch will recognize (or “parse”), how to match on each header, and what actions we would like the switch to perform on each header.”\n\nOriginally developed in conjunction with academics and several large tech companies, P4 is now overseen by the P4 Language Consortium, a non-profit.\n\nWhy It’s Relevant:\n\nBy creating a low-level language to tell network devices how to process packets, P4 puts more control in the hands of network operators; they can add features and capabilities when they need to, such as support for a new protocol, instead of waiting for a chip manufacturer to burn a set of functions into an ASIC.\n\nAnd because it creates a common abstraction layer, P4 should, in theory, enable more interoperability among network devices, including ASIC-driven hardware and virtual switches.\n\nResources:\n\nPQ Show 80: P4 – A Language For Programming Switches – Packet Pushers\n\nClarifying the differences between P4 and OpenFlow – P4 Consortium blog\n\nProgramming Protocol-Independent Packet Processors – Slide presentation by Jennifer Rexford\n\nWhy Does the Internet Need a Programmable Forwarding Plane with Nick McKeown – Tech Field Day (Vimeo)\n\nSAI (Switch Abstraction Interface)\n\nDescription:\n\nSAI, or the Switch Abstraction Interface, was originally developed by Microsoft in 2014 as an API for programming ASICs. It was later accepted into the Open Compute Project.\n\nWhy It’s Relevant:\n\nThe disaggregation that has separated the network OS from the underlying CPU is also happening at the ASIC layer. Similar to P4, the goal of SAI is to provide a common interface to program network ASICs.\n\nThis programmability gives network operators more control over switch functions, enabling greater customization as well as a standard software layer that can be used across a variety of devices.\n\nAs you might imagine, the SAI project aims largely at Web giants, service providers, and telcos that have the use cases and internal resources to customize switch functions all the way down to the ASIC layer.\n\nResources:\n\nSAI – GitHub\n\nSwitch Abstraction Interface (SAI) officially accepted by the Open Compute Project (OCP) – Microsoft Azure Blog"
    }
}