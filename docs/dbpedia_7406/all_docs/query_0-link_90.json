{
    "id": "dbpedia_7406_0",
    "rank": 90,
    "data": {
        "url": "https://logging.apache.org/log4j/2.12.x/log4j-api/apidocs/src-html/org/apache/logging/log4j/Logger.html",
        "read_more_link": "",
        "language": "en",
        "title": "Source code",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "001/* 002 * Licensed to the Apache Software Foundation (ASF) under one or more 003 * contributor license agreements. See the NOTICE file distributed with 004 * this work for additional information regarding copyright ownership. 005 * The ASF licenses this file to You under the Apache license, Version 2.0 006 * (the \"License\"); you may not use this file except in compliance with 007 * the License. You may obtain a copy of the License at 008 * 009 * http://www.apache.org/licenses/LICENSE-2.0 010 * 011 * Unless required by applicable law or agreed to in writing, software 012 * distributed under the License is distributed on an \"AS IS\" BASIS, 013 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 014 * See the license for the specific language governing permissions and 015 * limitations under the license. 016 */ 017package org.apache.logging.log4j; 018 019import org.apache.logging.log4j.message.EntryMessage; 020import org.apache.logging.log4j.message.Message; 021import org.apache.logging.log4j.message.MessageFactory; 022import org.apache.logging.log4j.message.MessageFactory2; 023import org.apache.logging.log4j.util.MessageSupplier; 024import org.apache.logging.log4j.util.Supplier; 025 026/** 027 * This is the central interface in the log4j package. Most logging operations, except configuration, are done through 028 * this interface. 029 * 030 * <p> 031 * The canonical way to obtain a Logger for a class is through {@link LogManager#getLogger()}. Typically, each class 032 * gets its own Logger named after its fully qualified class name (the default Logger name when obtained through the 033 * {@link LogManager#getLogger()} method). Thus, the simplest way to use this would be like so: 034 * </p> 035 * 036 * <pre> 037 * public class MyClass { 038 * private static final Logger LOGGER = LogManager.getLogger(); 039 * // ... 040 * } 041 * </pre> 042 * <p> 043 * For ease of filtering, searching, sorting, etc., it is generally a good idea to create Loggers for each class rather 044 * than sharing Loggers. Instead, {@link Marker Markers} should be used for shared, filterable identification. 045 * </p> 046 * <p> 047 * For service provider implementations, it is recommended to extend the 048 * {@link org.apache.logging.log4j.spi.AbstractLogger} class rather than implementing this interface directly. 049 * </p> 050 * 051 * Since 2.4, methods have been added to the {@code Logger} interface to support lambda expressions. The new methods 052 * allow client code to lazily log messages without explicitly checking if the requested log level is enabled. For 053 * example, previously one would write: 054 * 055 * <pre> 056 * // pre-Java 8 style optimization: explicitly check the log level 057 * // to make sure the expensiveOperation() method is only called if necessary 058 * if (logger.isTraceEnabled()) { 059 * logger.trace(&quot;Some long-running operation returned {}&quot;, expensiveOperation()); 060 * } 061 * </pre> 062 * <p> 063 * With Java 8, the same effect can be achieved with a lambda expression: 064 * 065 * <pre> 066 * // Java-8 style optimization: no need to explicitly check the log level: 067 * // the lambda expression is not evaluated if the TRACE level is not enabled 068 * logger.trace(&quot;Some long-running operation returned {}&quot;, () -&gt; expensiveOperation()); 069 * </pre> 070 * 071 * <p> 072 * Note that although {@link MessageSupplier} is provided, using {@link Supplier Supplier<Message>} works just the 073 * same. MessageSupplier was deprecated in 2.6 and un-deprecated in 2.8.1. Anonymous class usage of these APIs 074 * should prefer using Supplier instead. 075 * </p> 076 */ 077public interface Logger { 078 079 /** 080 * Logs an exception or error that has been caught to a specific logging level. 081 * 082 * @param level The logging Level. 083 * @param t The Throwable. 084 */ 085 void catching(Level level, Throwable t); 086 087 /** 088 * Logs an exception or error that has been caught. Normally, one may wish to provide additional information with an 089 * exception while logging it; in these cases, one would not use this method. In other cases where simply logging 090 * the fact that an exception was swallowed somewhere (e.g., at the top of the stack trace in a {@code main()} 091 * method), this method is ideal for it. 092 * 093 * @param t The Throwable. 094 */ 095 void catching(Throwable t); 096 097 /** 098 * Logs a message with the specific Marker at the {@link Level#DEBUG DEBUG} level. 099 * 100 * @param marker the marker data specific to this log statement 101 * @param msg the message string to be logged 102 */ 103 void debug(Marker marker, Message msg); 104 105 /** 106 * Logs a message with the specific Marker at the {@link Level#DEBUG DEBUG} level. 107 * 108 * @param marker the marker data specific to this log statement 109 * @param msg the message string to be logged 110 * @param t A Throwable or null. 111 */ 112 void debug(Marker marker, Message msg, Throwable t); 113 114 /** 115 * Logs a message which is only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level with 116 * the specified Marker. The {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the 117 * {@code Message}. 118 * 119 * @param marker the marker data specific to this log statement 120 * @param msgSupplier A function, which when called, produces the desired log message. 121 * @since 2.4 122 */ 123 void debug(Marker marker, MessageSupplier msgSupplier); 124 125 /** 126 * Logs a message (only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level) with the 127 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. The 128 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 129 * 130 * @param marker the marker data specific to this log statement 131 * @param msgSupplier A function, which when called, produces the desired log message. 132 * @param t A Throwable or null. 133 * @since 2.4 134 */ 135 void debug(Marker marker, MessageSupplier msgSupplier, Throwable t); 136 137 /** 138 * Logs a message CharSequence with the {@link Level#DEBUG DEBUG} level. 139 * 140 * @param marker the marker data specific to this log statement 141 * @param message the message CharSequence to log. 142 */ 143 void debug(Marker marker, CharSequence message); 144 145 /** 146 * Logs a message CharSequence at the {@link Level#DEBUG DEBUG} level including the stack trace of the 147 * {@link Throwable} <code>t</code> passed as parameter. 148 * 149 * @param marker the marker data specific to this log statement 150 * @param message the message CharSequence to log. 151 * @param t the exception to log, including its stack trace. 152 */ 153 void debug(Marker marker, CharSequence message, Throwable t); 154 155 /** 156 * Logs a message object with the {@link Level#DEBUG DEBUG} level. 157 * 158 * @param marker the marker data specific to this log statement 159 * @param message the message object to log. 160 */ 161 void debug(Marker marker, Object message); 162 163 /** 164 * Logs a message at the {@link Level#DEBUG DEBUG} level including the stack trace of the {@link Throwable} 165 * <code>t</code> passed as parameter. 166 * 167 * @param marker the marker data specific to this log statement 168 * @param message the message to log. 169 * @param t the exception to log, including its stack trace. 170 */ 171 void debug(Marker marker, Object message, Throwable t); 172 173 /** 174 * Logs a message object with the {@link Level#DEBUG DEBUG} level. 175 * 176 * @param marker the marker data specific to this log statement 177 * @param message the message object to log. 178 */ 179 void debug(Marker marker, String message); 180 181 /** 182 * Logs a message with parameters at the {@link Level#DEBUG DEBUG} level. 183 * 184 * @param marker the marker data specific to this log statement 185 * @param message the message to log; the format depends on the message factory. 186 * @param params parameters to the message. 187 * @see #getMessageFactory() 188 */ 189 void debug(Marker marker, String message, Object... params); 190 191 /** 192 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#DEBUG 193 * DEBUG} level. 194 * 195 * @param marker the marker data specific to this log statement 196 * @param message the message to log; the format depends on the message factory. 197 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 198 * @since 2.4 199 */ 200 void debug(Marker marker, String message, Supplier<?>... paramSuppliers); 201 202 /** 203 * Logs a message at the {@link Level#DEBUG DEBUG} level including the stack trace of the {@link Throwable} 204 * <code>t</code> passed as parameter. 205 * 206 * @param marker the marker data specific to this log statement 207 * @param message the message to log. 208 * @param t the exception to log, including its stack trace. 209 */ 210 void debug(Marker marker, String message, Throwable t); 211 212 /** 213 * Logs a message which is only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level with 214 * the specified Marker. 215 * 216 * @param marker the marker data specific to this log statement 217 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 218 * message factory. 219 * @since 2.4 220 */ 221 void debug(Marker marker, Supplier<?> msgSupplier); 222 223 /** 224 * Logs a message (only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level) with the 225 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. 226 * 227 * @param marker the marker data specific to this log statement 228 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 229 * message factory. 230 * @param t A Throwable or null. 231 * @since 2.4 232 */ 233 void debug(Marker marker, Supplier<?> msgSupplier, Throwable t); 234 235 /** 236 * Logs a message with the specific Marker at the {@link Level#DEBUG DEBUG} level. 237 * 238 * @param msg the message string to be logged 239 */ 240 void debug(Message msg); 241 242 /** 243 * Logs a message with the specific Marker at the {@link Level#DEBUG DEBUG} level. 244 * 245 * @param msg the message string to be logged 246 * @param t A Throwable or null. 247 */ 248 void debug(Message msg, Throwable t); 249 250 /** 251 * Logs a message which is only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level. The 252 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 253 * 254 * @param msgSupplier A function, which when called, produces the desired log message. 255 * @since 2.4 256 */ 257 void debug(MessageSupplier msgSupplier); 258 259 /** 260 * Logs a message (only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level) including the 261 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. The {@code MessageSupplier} may or may 262 * not use the {@link MessageFactory} to construct the {@code Message}. 263 * 264 * @param msgSupplier A function, which when called, produces the desired log message. 265 * @param t the exception to log, including its stack trace. 266 * @since 2.4 267 */ 268 void debug(MessageSupplier msgSupplier, Throwable t); 269 270 /** 271 * Logs a message CharSequence with the {@link Level#DEBUG DEBUG} level. 272 * 273 * @param message the message object to log. 274 */ 275 void debug(CharSequence message); 276 277 /** 278 * Logs a CharSequence at the {@link Level#DEBUG DEBUG} level including the stack trace of the {@link Throwable} 279 * <code>t</code> passed as parameter. 280 * 281 * @param message the message CharSequence to log. 282 * @param t the exception to log, including its stack trace. 283 */ 284 void debug(CharSequence message, Throwable t); 285 286 /** 287 * Logs a message object with the {@link Level#DEBUG DEBUG} level. 288 * 289 * @param message the message object to log. 290 */ 291 void debug(Object message); 292 293 /** 294 * Logs a message at the {@link Level#DEBUG DEBUG} level including the stack trace of the {@link Throwable} 295 * <code>t</code> passed as parameter. 296 * 297 * @param message the message to log. 298 * @param t the exception to log, including its stack trace. 299 */ 300 void debug(Object message, Throwable t); 301 302 /** 303 * Logs a message object with the {@link Level#DEBUG DEBUG} level. 304 * 305 * @param message the message string to log. 306 */ 307 void debug(String message); 308 309 /** 310 * Logs a message with parameters at the {@link Level#DEBUG DEBUG} level. 311 * 312 * @param message the message to log; the format depends on the message factory. 313 * @param params parameters to the message. 314 * @see #getMessageFactory() 315 */ 316 void debug(String message, Object... params); 317 318 /** 319 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#DEBUG 320 * DEBUG} level. 321 * 322 * @param message the message to log; the format depends on the message factory. 323 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 324 * @since 2.4 325 */ 326 void debug(String message, Supplier<?>... paramSuppliers); 327 328 /** 329 * Logs a message at the {@link Level#DEBUG DEBUG} level including the stack trace of the {@link Throwable} 330 * <code>t</code> passed as parameter. 331 * 332 * @param message the message to log. 333 * @param t the exception to log, including its stack trace. 334 */ 335 void debug(String message, Throwable t); 336 337 /** 338 * Logs a message which is only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level. 339 * 340 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 341 * message factory. 342 * @since 2.4 343 */ 344 void debug(Supplier<?> msgSupplier); 345 346 /** 347 * Logs a message (only to be constructed if the logging level is the {@link Level#DEBUG DEBUG} level) including the 348 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. 349 * 350 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 351 * message factory. 352 * @param t the exception to log, including its stack trace. 353 * @since 2.4 354 */ 355 void debug(Supplier<?> msgSupplier, Throwable t); 356 357 /** 358 * Logs a message with parameters at debug level. 359 * 360 * @param marker the marker data specific to this log statement 361 * @param message the message to log; the format depends on the message factory. 362 * @param p0 parameter to the message. 363 */ 364 void debug(Marker marker, String message, Object p0); 365 366 /** 367 * Logs a message with parameters at debug level. 368 * 369 * @param marker the marker data specific to this log statement 370 * @param message the message to log; the format depends on the message factory. 371 * @param p0 parameter to the message. 372 * @param p1 parameter to the message. 373 */ 374 void debug(Marker marker, String message, Object p0, Object p1); 375 376 /** 377 * Logs a message with parameters at debug level. 378 * 379 * @param marker the marker data specific to this log statement 380 * @param message the message to log; the format depends on the message factory. 381 * @param p0 parameter to the message. 382 * @param p1 parameter to the message. 383 * @param p2 parameter to the message. 384 */ 385 void debug(Marker marker, String message, Object p0, Object p1, Object p2); 386 387 /** 388 * Logs a message with parameters at debug level. 389 * 390 * @param marker the marker data specific to this log statement 391 * @param message the message to log; the format depends on the message factory. 392 * @param p0 parameter to the message. 393 * @param p1 parameter to the message. 394 * @param p2 parameter to the message. 395 * @param p3 parameter to the message. 396 */ 397 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3); 398 399 /** 400 * Logs a message with parameters at debug level. 401 * 402 * @param marker the marker data specific to this log statement 403 * @param message the message to log; the format depends on the message factory. 404 * @param p0 parameter to the message. 405 * @param p1 parameter to the message. 406 * @param p2 parameter to the message. 407 * @param p3 parameter to the message. 408 * @param p4 parameter to the message. 409 */ 410 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4); 411 412 /** 413 * Logs a message with parameters at debug level. 414 * 415 * @param marker the marker data specific to this log statement 416 * @param message the message to log; the format depends on the message factory. 417 * @param p0 parameter to the message. 418 * @param p1 parameter to the message. 419 * @param p2 parameter to the message. 420 * @param p3 parameter to the message. 421 * @param p4 parameter to the message. 422 * @param p5 parameter to the message. 423 */ 424 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 425 426 /** 427 * Logs a message with parameters at debug level. 428 * 429 * @param marker the marker data specific to this log statement 430 * @param message the message to log; the format depends on the message factory. 431 * @param p0 parameter to the message. 432 * @param p1 parameter to the message. 433 * @param p2 parameter to the message. 434 * @param p3 parameter to the message. 435 * @param p4 parameter to the message. 436 * @param p5 parameter to the message. 437 * @param p6 parameter to the message. 438 */ 439 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, 440 Object p6); 441 442 /** 443 * Logs a message with parameters at debug level. 444 * 445 * @param marker the marker data specific to this log statement 446 * @param message the message to log; the format depends on the message factory. 447 * @param p0 parameter to the message. 448 * @param p1 parameter to the message. 449 * @param p2 parameter to the message. 450 * @param p3 parameter to the message. 451 * @param p4 parameter to the message. 452 * @param p5 parameter to the message. 453 * @param p6 parameter to the message. 454 * @param p7 parameter to the message. 455 */ 456 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 457 Object p7); 458 459 /** 460 * Logs a message with parameters at debug level. 461 * 462 * @param marker the marker data specific to this log statement 463 * @param message the message to log; the format depends on the message factory. 464 * @param p0 parameter to the message. 465 * @param p1 parameter to the message. 466 * @param p2 parameter to the message. 467 * @param p3 parameter to the message. 468 * @param p4 parameter to the message. 469 * @param p5 parameter to the message. 470 * @param p6 parameter to the message. 471 * @param p7 parameter to the message. 472 * @param p8 parameter to the message. 473 */ 474 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 475 Object p7, Object p8); 476 477 /** 478 * Logs a message with parameters at debug level. 479 * 480 * @param marker the marker data specific to this log statement 481 * @param message the message to log; the format depends on the message factory. 482 * @param p0 parameter to the message. 483 * @param p1 parameter to the message. 484 * @param p2 parameter to the message. 485 * @param p3 parameter to the message. 486 * @param p4 parameter to the message. 487 * @param p5 parameter to the message. 488 * @param p6 parameter to the message. 489 * @param p7 parameter to the message. 490 * @param p8 parameter to the message. 491 * @param p9 parameter to the message. 492 */ 493 void debug(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 494 Object p7, Object p8, Object p9); 495 496 /** 497 * Logs a message with parameters at debug level. 498 * 499 * @param message the message to log; the format depends on the message factory. 500 * @param p0 parameter to the message. 501 */ 502 void debug(String message, Object p0); 503 504 /** 505 * Logs a message with parameters at debug level. 506 * 507 * @param message the message to log; the format depends on the message factory. 508 * @param p0 parameter to the message. 509 * @param p1 parameter to the message. 510 */ 511 void debug(String message, Object p0, Object p1); 512 513 /** 514 * Logs a message with parameters at debug level. 515 * 516 * @param message the message to log; the format depends on the message factory. 517 * @param p0 parameter to the message. 518 * @param p1 parameter to the message. 519 * @param p2 parameter to the message. 520 */ 521 void debug(String message, Object p0, Object p1, Object p2); 522 523 /** 524 * Logs a message with parameters at debug level. 525 * 526 * @param message the message to log; the format depends on the message factory. 527 * @param p0 parameter to the message. 528 * @param p1 parameter to the message. 529 * @param p2 parameter to the message. 530 * @param p3 parameter to the message. 531 */ 532 void debug(String message, Object p0, Object p1, Object p2, Object p3); 533 534 /** 535 * Logs a message with parameters at debug level. 536 * 537 * @param message the message to log; the format depends on the message factory. 538 * @param p0 parameter to the message. 539 * @param p1 parameter to the message. 540 * @param p2 parameter to the message. 541 * @param p3 parameter to the message. 542 * @param p4 parameter to the message. 543 */ 544 void debug(String message, Object p0, Object p1, Object p2, Object p3, Object p4); 545 546 /** 547 * Logs a message with parameters at debug level. 548 * 549 * @param message the message to log; the format depends on the message factory. 550 * @param p0 parameter to the message. 551 * @param p1 parameter to the message. 552 * @param p2 parameter to the message. 553 * @param p3 parameter to the message. 554 * @param p4 parameter to the message. 555 * @param p5 parameter to the message. 556 */ 557 void debug(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 558 559 /** 560 * Logs a message with parameters at debug level. 561 * 562 * @param message the message to log; the format depends on the message factory. 563 * @param p0 parameter to the message. 564 * @param p1 parameter to the message. 565 * @param p2 parameter to the message. 566 * @param p3 parameter to the message. 567 * @param p4 parameter to the message. 568 * @param p5 parameter to the message. 569 * @param p6 parameter to the message. 570 */ 571 void debug(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6); 572 573 /** 574 * Logs a message with parameters at debug level. 575 * 576 * @param message the message to log; the format depends on the message factory. 577 * @param p0 parameter to the message. 578 * @param p1 parameter to the message. 579 * @param p2 parameter to the message. 580 * @param p3 parameter to the message. 581 * @param p4 parameter to the message. 582 * @param p5 parameter to the message. 583 * @param p6 parameter to the message. 584 * @param p7 parameter to the message. 585 */ 586 void debug(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7); 587 588 /** 589 * Logs a message with parameters at debug level. 590 * 591 * @param message the message to log; the format depends on the message factory. 592 * @param p0 parameter to the message. 593 * @param p1 parameter to the message. 594 * @param p2 parameter to the message. 595 * @param p3 parameter to the message. 596 * @param p4 parameter to the message. 597 * @param p5 parameter to the message. 598 * @param p6 parameter to the message. 599 * @param p7 parameter to the message. 600 * @param p8 parameter to the message. 601 */ 602 void debug(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 603 Object p8); 604 605 /** 606 * Logs a message with parameters at debug level. 607 * 608 * @param message the message to log; the format depends on the message factory. 609 * @param p0 parameter to the message. 610 * @param p1 parameter to the message. 611 * @param p2 parameter to the message. 612 * @param p3 parameter to the message. 613 * @param p4 parameter to the message. 614 * @param p5 parameter to the message. 615 * @param p6 parameter to the message. 616 * @param p7 parameter to the message. 617 * @param p8 parameter to the message. 618 * @param p9 parameter to the message. 619 */ 620 void debug(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 621 Object p8, Object p9); 622 623 /** 624 * Logs entry to a method. Used when the method in question has no parameters or when the parameters should not be 625 * logged. 626 * @deprecated Use {@link #traceEntry()} instead which performs the same function. 627 */ 628 @Deprecated 629 void entry(); 630 631 /** 632 * Logs entry to a method along with its parameters (consider using one of the {@code traceEntry(...)} methods instead.) 633 * <p> 634 * For example: 635 * </p> 636 * <pre> 637 * public void doSomething(String foo, int bar) { 638 * LOGGER.entry(foo, bar); 639 * // do something 640 * } 641 * </pre> 642 * <p> 643 * The use of methods such as this are more effective when combined with aspect-oriented programming or other 644 * bytecode manipulation tools. It can be rather tedious (and messy) to use this type of method manually. 645 * </p> 646 * 647 * @param params The parameters to the method. 648 * @deprecated Use {@link #traceEntry(String, Object...)} instead which performs the same function. 649 */ 650 @Deprecated 651 void entry(Object... params); 652 653 /** 654 * Logs a message with the specific Marker at the {@link Level#ERROR ERROR} level. 655 * 656 * @param marker the marker data specific to this log statement 657 * @param msg the message string to be logged 658 */ 659 void error(Marker marker, Message msg); 660 661 /** 662 * Logs a message with the specific Marker at the {@link Level#ERROR ERROR} level. 663 * 664 * @param marker the marker data specific to this log statement 665 * @param msg the message string to be logged 666 * @param t A Throwable or null. 667 */ 668 void error(Marker marker, Message msg, Throwable t); 669 670 /** 671 * Logs a message which is only to be constructed if the logging level is the {@link Level#ERROR ERROR} level with 672 * the specified Marker. The {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the 673 * {@code Message}. 674 * 675 * @param marker the marker data specific to this log statement 676 * @param msgSupplier A function, which when called, produces the desired log message. 677 * @since 2.4 678 */ 679 void error(Marker marker, MessageSupplier msgSupplier); 680 681 /** 682 * Logs a message (only to be constructed if the logging level is the {@link Level#ERROR ERROR} level) with the 683 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. The 684 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 685 * 686 * @param marker the marker data specific to this log statement 687 * @param msgSupplier A function, which when called, produces the desired log message. 688 * @param t A Throwable or null. 689 * @since 2.4 690 */ 691 void error(Marker marker, MessageSupplier msgSupplier, Throwable t); 692 693 /** 694 * Logs a message CharSequence with the {@link Level#ERROR ERROR} level. 695 * 696 * @param marker the marker data specific to this log statement. 697 * @param message the message CharSequence to log. 698 */ 699 void error(Marker marker, CharSequence message); 700 701 /** 702 * Logs a CharSequence at the {@link Level#ERROR ERROR} level including the stack trace of the {@link Throwable} 703 * <code>t</code> passed as parameter. 704 * 705 * @param marker the marker data specific to this log statement. 706 * @param message the message CharSequence to log. 707 * @param t the exception to log, including its stack trace. 708 */ 709 void error(Marker marker, CharSequence message, Throwable t); 710 711 /** 712 * Logs a message object with the {@link Level#ERROR ERROR} level. 713 * 714 * @param marker the marker data specific to this log statement. 715 * @param message the message object to log. 716 */ 717 void error(Marker marker, Object message); 718 719 /** 720 * Logs a message at the {@link Level#ERROR ERROR} level including the stack trace of the {@link Throwable} 721 * <code>t</code> passed as parameter. 722 * 723 * @param marker the marker data specific to this log statement. 724 * @param message the message object to log. 725 * @param t the exception to log, including its stack trace. 726 */ 727 void error(Marker marker, Object message, Throwable t); 728 729 /** 730 * Logs a message object with the {@link Level#ERROR ERROR} level. 731 * 732 * @param marker the marker data specific to this log statement. 733 * @param message the message object to log. 734 */ 735 void error(Marker marker, String message); 736 737 /** 738 * Logs a message with parameters at the {@link Level#ERROR ERROR} level. 739 * 740 * @param marker the marker data specific to this log statement. 741 * @param message the message to log; the format depends on the message factory. 742 * @param params parameters to the message. 743 * @see #getMessageFactory() 744 */ 745 void error(Marker marker, String message, Object... params); 746 747 /** 748 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#ERROR 749 * ERROR} level. 750 * 751 * @param marker the marker data specific to this log statement 752 * @param message the message to log; the format depends on the message factory. 753 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 754 * @since 2.4 755 */ 756 void error(Marker marker, String message, Supplier<?>... paramSuppliers); 757 758 /** 759 * Logs a message at the {@link Level#ERROR ERROR} level including the stack trace of the {@link Throwable} 760 * <code>t</code> passed as parameter. 761 * 762 * @param marker the marker data specific to this log statement. 763 * @param message the message object to log. 764 * @param t the exception to log, including its stack trace. 765 */ 766 void error(Marker marker, String message, Throwable t); 767 768 /** 769 * Logs a message which is only to be constructed if the logging level is the {@link Level#ERROR ERROR} level with 770 * the specified Marker. 771 * 772 * @param marker the marker data specific to this log statement 773 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 774 * message factory. 775 * @since 2.4 776 */ 777 void error(Marker marker, Supplier<?> msgSupplier); 778 779 /** 780 * Logs a message (only to be constructed if the logging level is the {@link Level#ERROR ERROR} level) with the 781 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. 782 * 783 * @param marker the marker data specific to this log statement 784 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 785 * message factory. 786 * @param t A Throwable or null. 787 * @since 2.4 788 */ 789 void error(Marker marker, Supplier<?> msgSupplier, Throwable t); 790 791 /** 792 * Logs a message with the specific Marker at the {@link Level#ERROR ERROR} level. 793 * 794 * @param msg the message string to be logged 795 */ 796 void error(Message msg); 797 798 /** 799 * Logs a message with the specific Marker at the {@link Level#ERROR ERROR} level. 800 * 801 * @param msg the message string to be logged 802 * @param t A Throwable or null. 803 */ 804 void error(Message msg, Throwable t); 805 806 /** 807 * Logs a message which is only to be constructed if the logging level is the {@link Level#ERROR ERROR} level. The 808 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 809 * 810 * @param msgSupplier A function, which when called, produces the desired log message. 811 * @since 2.4 812 */ 813 void error(MessageSupplier msgSupplier); 814 815 /** 816 * Logs a message (only to be constructed if the logging level is the {@link Level#ERROR ERROR} level) including the 817 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. The {@code MessageSupplier} may or may 818 * not use the {@link MessageFactory} to construct the {@code Message}. 819 * 820 * @param msgSupplier A function, which when called, produces the desired log message. 821 * @param t the exception to log, including its stack trace. 822 * @since 2.4 823 */ 824 void error(MessageSupplier msgSupplier, Throwable t); 825 826 /** 827 * Logs a message CharSequence with the {@link Level#ERROR ERROR} level. 828 * 829 * @param message the message CharSequence to log. 830 */ 831 void error(CharSequence message); 832 833 /** 834 * Logs a CharSequence at the {@link Level#ERROR ERROR} level including the stack trace of the {@link Throwable} 835 * <code>t</code> passed as parameter. 836 * 837 * @param message the message CharSequence to log. 838 * @param t the exception to log, including its stack trace. 839 */ 840 void error(CharSequence message, Throwable t); 841 842 /** 843 * Logs a message object with the {@link Level#ERROR ERROR} level. 844 * 845 * @param message the message object to log. 846 */ 847 void error(Object message); 848 849 /** 850 * Logs a message at the {@link Level#ERROR ERROR} level including the stack trace of the {@link Throwable} 851 * <code>t</code> passed as parameter. 852 * 853 * @param message the message object to log. 854 * @param t the exception to log, including its stack trace. 855 */ 856 void error(Object message, Throwable t); 857 858 /** 859 * Logs a message object with the {@link Level#ERROR ERROR} level. 860 * 861 * @param message the message string to log. 862 */ 863 void error(String message); 864 865 /** 866 * Logs a message with parameters at the {@link Level#ERROR ERROR} level. 867 * 868 * @param message the message to log; the format depends on the message factory. 869 * @param params parameters to the message. 870 * @see #getMessageFactory() 871 */ 872 void error(String message, Object... params); 873 874 /** 875 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#ERROR 876 * ERROR} level. 877 * 878 * @param message the message to log; the format depends on the message factory. 879 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 880 * @since 2.4 881 */ 882 void error(String message, Supplier<?>... paramSuppliers); 883 884 /** 885 * Logs a message at the {@link Level#ERROR ERROR} level including the stack trace of the {@link Throwable} 886 * <code>t</code> passed as parameter. 887 * 888 * @param message the message object to log. 889 * @param t the exception to log, including its stack trace. 890 */ 891 void error(String message, Throwable t); 892 893 /** 894 * Logs a message which is only to be constructed if the logging level is the {@link Level#ERROR ERROR} level. 895 * 896 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 897 * message factory. 898 * @since 2.4 899 */ 900 void error(Supplier<?> msgSupplier); 901 902 /** 903 * Logs a message (only to be constructed if the logging level is the {@link Level#ERROR ERROR} level) including the 904 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. 905 * 906 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 907 * message factory. 908 * @param t the exception to log, including its stack trace. 909 * @since 2.4 910 */ 911 void error(Supplier<?> msgSupplier, Throwable t); 912 913 /** 914 * Logs a message with parameters at error level. 915 * 916 * @param marker the marker data specific to this log statement 917 * @param message the message to log; the format depends on the message factory. 918 * @param p0 parameter to the message. 919 */ 920 void error(Marker marker, String message, Object p0); 921 922 /** 923 * Logs a message with parameters at error level. 924 * 925 * @param marker the marker data specific to this log statement 926 * @param message the message to log; the format depends on the message factory. 927 * @param p0 parameter to the message. 928 * @param p1 parameter to the message. 929 */ 930 void error(Marker marker, String message, Object p0, Object p1); 931 932 /** 933 * Logs a message with parameters at error level. 934 * 935 * @param marker the marker data specific to this log statement 936 * @param message the message to log; the format depends on the message factory. 937 * @param p0 parameter to the message. 938 * @param p1 parameter to the message. 939 * @param p2 parameter to the message. 940 */ 941 void error(Marker marker, String message, Object p0, Object p1, Object p2); 942 943 /** 944 * Logs a message with parameters at error level. 945 * 946 * @param marker the marker data specific to this log statement 947 * @param message the message to log; the format depends on the message factory. 948 * @param p0 parameter to the message. 949 * @param p1 parameter to the message. 950 * @param p2 parameter to the message. 951 * @param p3 parameter to the message. 952 */ 953 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3); 954 955 /** 956 * Logs a message with parameters at error level. 957 * 958 * @param marker the marker data specific to this log statement 959 * @param message the message to log; the format depends on the message factory. 960 * @param p0 parameter to the message. 961 * @param p1 parameter to the message. 962 * @param p2 parameter to the message. 963 * @param p3 parameter to the message. 964 * @param p4 parameter to the message. 965 */ 966 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4); 967 968 /** 969 * Logs a message with parameters at error level. 970 * 971 * @param marker the marker data specific to this log statement 972 * @param message the message to log; the format depends on the message factory. 973 * @param p0 parameter to the message. 974 * @param p1 parameter to the message. 975 * @param p2 parameter to the message. 976 * @param p3 parameter to the message. 977 * @param p4 parameter to the message. 978 * @param p5 parameter to the message. 979 */ 980 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 981 982 /** 983 * Logs a message with parameters at error level. 984 * 985 * @param marker the marker data specific to this log statement 986 * @param message the message to log; the format depends on the message factory. 987 * @param p0 parameter to the message. 988 * @param p1 parameter to the message. 989 * @param p2 parameter to the message. 990 * @param p3 parameter to the message. 991 * @param p4 parameter to the message. 992 * @param p5 parameter to the message. 993 * @param p6 parameter to the message. 994 */ 995 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, 996 Object p6); 997 998 /** 999 * Logs a message with parameters at error level. 1000 * 1001 * @param marker the marker data specific to this log statement 1002 * @param message the message to log; the format depends on the message factory. 1003 * @param p0 parameter to the message. 1004 * @param p1 parameter to the message. 1005 * @param p2 parameter to the message. 1006 * @param p3 parameter to the message. 1007 * @param p4 parameter to the message. 1008 * @param p5 parameter to the message. 1009 * @param p6 parameter to the message. 1010 * @param p7 parameter to the message. 1011 */ 1012 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 1013 Object p7); 1014 1015 /** 1016 * Logs a message with parameters at error level. 1017 * 1018 * @param marker the marker data specific to this log statement 1019 * @param message the message to log; the format depends on the message factory. 1020 * @param p0 parameter to the message. 1021 * @param p1 parameter to the message. 1022 * @param p2 parameter to the message. 1023 * @param p3 parameter to the message. 1024 * @param p4 parameter to the message. 1025 * @param p5 parameter to the message. 1026 * @param p6 parameter to the message. 1027 * @param p7 parameter to the message. 1028 * @param p8 parameter to the message. 1029 */ 1030 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 1031 Object p7, Object p8); 1032 1033 /** 1034 * Logs a message with parameters at error level. 1035 * 1036 * @param marker the marker data specific to this log statement 1037 * @param message the message to log; the format depends on the message factory. 1038 * @param p0 parameter to the message. 1039 * @param p1 parameter to the message. 1040 * @param p2 parameter to the message. 1041 * @param p3 parameter to the message. 1042 * @param p4 parameter to the message. 1043 * @param p5 parameter to the message. 1044 * @param p6 parameter to the message. 1045 * @param p7 parameter to the message. 1046 * @param p8 parameter to the message. 1047 * @param p9 parameter to the message. 1048 */ 1049 void error(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 1050 Object p7, Object p8, Object p9); 1051 1052 /** 1053 * Logs a message with parameters at error level. 1054 * 1055 * @param message the message to log; the format depends on the message factory. 1056 * @param p0 parameter to the message. 1057 */ 1058 void error(String message, Object p0); 1059 1060 /** 1061 * Logs a message with parameters at error level. 1062 * 1063 * @param message the message to log; the format depends on the message factory. 1064 * @param p0 parameter to the message. 1065 * @param p1 parameter to the message. 1066 */ 1067 void error(String message, Object p0, Object p1); 1068 1069 /** 1070 * Logs a message with parameters at error level. 1071 * 1072 * @param message the message to log; the format depends on the message factory. 1073 * @param p0 parameter to the message. 1074 * @param p1 parameter to the message. 1075 * @param p2 parameter to the message. 1076 */ 1077 void error(String message, Object p0, Object p1, Object p2); 1078 1079 /** 1080 * Logs a message with parameters at error level. 1081 * 1082 * @param message the message to log; the format depends on the message factory. 1083 * @param p0 parameter to the message. 1084 * @param p1 parameter to the message. 1085 * @param p2 parameter to the message. 1086 * @param p3 parameter to the message. 1087 */ 1088 void error(String message, Object p0, Object p1, Object p2, Object p3); 1089 1090 /** 1091 * Logs a message with parameters at error level. 1092 * 1093 * @param message the message to log; the format depends on the message factory. 1094 * @param p0 parameter to the message. 1095 * @param p1 parameter to the message. 1096 * @param p2 parameter to the message. 1097 * @param p3 parameter to the message. 1098 * @param p4 parameter to the message. 1099 */ 1100 void error(String message, Object p0, Object p1, Object p2, Object p3, Object p4); 1101 1102 /** 1103 * Logs a message with parameters at error level. 1104 * 1105 * @param message the message to log; the format depends on the message factory. 1106 * @param p0 parameter to the message. 1107 * @param p1 parameter to the message. 1108 * @param p2 parameter to the message. 1109 * @param p3 parameter to the message. 1110 * @param p4 parameter to the message. 1111 * @param p5 parameter to the message. 1112 */ 1113 void error(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 1114 1115 /** 1116 * Logs a message with parameters at error level. 1117 * 1118 * @param message the message to log; the format depends on the message factory. 1119 * @param p0 parameter to the message. 1120 * @param p1 parameter to the message. 1121 * @param p2 parameter to the message. 1122 * @param p3 parameter to the message. 1123 * @param p4 parameter to the message. 1124 * @param p5 parameter to the message. 1125 * @param p6 parameter to the message. 1126 */ 1127 void error(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6); 1128 1129 /** 1130 * Logs a message with parameters at error level. 1131 * 1132 * @param message the message to log; the format depends on the message factory. 1133 * @param p0 parameter to the message. 1134 * @param p1 parameter to the message. 1135 * @param p2 parameter to the message. 1136 * @param p3 parameter to the message. 1137 * @param p4 parameter to the message. 1138 * @param p5 parameter to the message. 1139 * @param p6 parameter to the message. 1140 * @param p7 parameter to the message. 1141 */ 1142 void error(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7); 1143 1144 /** 1145 * Logs a message with parameters at error level. 1146 * 1147 * @param message the message to log; the format depends on the message factory. 1148 * @param p0 parameter to the message. 1149 * @param p1 parameter to the message. 1150 * @param p2 parameter to the message. 1151 * @param p3 parameter to the message. 1152 * @param p4 parameter to the message. 1153 * @param p5 parameter to the message. 1154 * @param p6 parameter to the message. 1155 * @param p7 parameter to the message. 1156 * @param p8 parameter to the message. 1157 */ 1158 void error(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 1159 Object p8); 1160 1161 /** 1162 * Logs a message with parameters at error level. 1163 * 1164 * @param message the message to log; the format depends on the message factory. 1165 * @param p0 parameter to the message. 1166 * @param p1 parameter to the message. 1167 * @param p2 parameter to the message. 1168 * @param p3 parameter to the message. 1169 * @param p4 parameter to the message. 1170 * @param p5 parameter to the message. 1171 * @param p6 parameter to the message. 1172 * @param p7 parameter to the message. 1173 * @param p8 parameter to the message. 1174 * @param p9 parameter to the message. 1175 */ 1176 void error(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 1177 Object p8, Object p9); 1178 1179 /** 1180 * Logs exit from a method. Used for methods that do not return anything. 1181 * @deprecated Use {@link #traceExit()} instead which performs the same function. 1182 */ 1183 @Deprecated 1184 void exit(); 1185 1186 /** 1187 * Logs exiting from a method with the result. This may be coded as: 1188 * 1189 * <pre> 1190 * return LOGGER.exit(myResult); 1191 * </pre> 1192 * 1193 * @param <R> The type of the parameter and object being returned. 1194 * @param result The result being returned from the method call. 1195 * @return the result. 1196 * @deprecated Use {@link #traceExit(Object)} instead which performs the same function. 1197 */ 1198 @Deprecated 1199 <R> R exit(R result); 1200 1201 /** 1202 * Logs a message with the specific Marker at the {@link Level#FATAL FATAL} level. 1203 * 1204 * @param marker the marker data specific to this log statement 1205 * @param msg the message string to be logged 1206 */ 1207 void fatal(Marker marker, Message msg); 1208 1209 /** 1210 * Logs a message with the specific Marker at the {@link Level#FATAL FATAL} level. 1211 * 1212 * @param marker the marker data specific to this log statement 1213 * @param msg the message string to be logged 1214 * @param t A Throwable or null. 1215 */ 1216 void fatal(Marker marker, Message msg, Throwable t); 1217 1218 /** 1219 * Logs a message which is only to be constructed if the logging level is the {@link Level#FATAL FATAL} level with 1220 * the specified Marker. The {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the 1221 * {@code Message}. 1222 * 1223 * @param marker the marker data specific to this log statement 1224 * @param msgSupplier A function, which when called, produces the desired log message. 1225 * @since 2.4 1226 */ 1227 void fatal(Marker marker, MessageSupplier msgSupplier); 1228 1229 /** 1230 * Logs a message (only to be constructed if the logging level is the {@link Level#FATAL FATAL} level) with the 1231 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. The 1232 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 1233 * 1234 * @param marker the marker data specific to this log statement 1235 * @param msgSupplier A function, which when called, produces the desired log message. 1236 * @param t A Throwable or null. 1237 * @since 2.4 1238 */ 1239 void fatal(Marker marker, MessageSupplier msgSupplier, Throwable t); 1240 1241 /** 1242 * Logs a message CharSequence with the {@link Level#FATAL FATAL} level. 1243 * 1244 * @param marker The marker data specific to this log statement. 1245 * @param message the message CharSequence to log. 1246 */ 1247 void fatal(Marker marker, CharSequence message); 1248 1249 /** 1250 * Logs a CharSequence at the {@link Level#FATAL FATAL} level including the stack trace of the {@link Throwable} 1251 * <code>t</code> passed as parameter. 1252 * 1253 * @param marker The marker data specific to this log statement. 1254 * @param message the message CharSequence to log. 1255 * @param t the exception to log, including its stack trace. 1256 */ 1257 void fatal(Marker marker, CharSequence message, Throwable t); 1258 1259 /** 1260 * Logs a message object with the {@link Level#FATAL FATAL} level. 1261 * 1262 * @param marker The marker data specific to this log statement. 1263 * @param message the message object to log. 1264 */ 1265 void fatal(Marker marker, Object message); 1266 1267 /** 1268 * Logs a message at the {@link Level#FATAL FATAL} level including the stack trace of the {@link Throwable} 1269 * <code>t</code> passed as parameter. 1270 * 1271 * @param marker The marker data specific to this log statement. 1272 * @param message the message object to log. 1273 * @param t the exception to log, including its stack trace. 1274 */ 1275 void fatal(Marker marker, Object message, Throwable t); 1276 1277 /** 1278 * Logs a message object with the {@link Level#FATAL FATAL} level. 1279 * 1280 * @param marker The marker data specific to this log statement. 1281 * @param message the message object to log. 1282 */ 1283 void fatal(Marker marker, String message); 1284 1285 /** 1286 * Logs a message with parameters at the {@link Level#FATAL FATAL} level. 1287 * 1288 * @param marker The marker data specific to this log statement. 1289 * @param message the message to log; the format depends on the message factory. 1290 * @param params parameters to the message. 1291 * @see #getMessageFactory() 1292 */ 1293 void fatal(Marker marker, String message, Object... params); 1294 1295 /** 1296 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#FATAL 1297 * FATAL} level. 1298 * 1299 * @param marker the marker data specific to this log statement 1300 * @param message the message to log; the format depends on the message factory. 1301 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 1302 * @since 2.4 1303 */ 1304 void fatal(Marker marker, String message, Supplier<?>... paramSuppliers); 1305 1306 /** 1307 * Logs a message at the {@link Level#FATAL FATAL} level including the stack trace of the {@link Throwable} 1308 * <code>t</code> passed as parameter. 1309 * 1310 * @param marker The marker data specific to this log statement. 1311 * @param message the message object to log. 1312 * @param t the exception to log, including its stack trace. 1313 */ 1314 void fatal(Marker marker, String message, Throwable t); 1315 1316 /** 1317 * Logs a message which is only to be constructed if the logging level is the {@link Level#FATAL FATAL} level with 1318 * the specified Marker. 1319 * 1320 * @param marker the marker data specific to this log statement 1321 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1322 * message factory. 1323 * @since 2.4 1324 */ 1325 void fatal(Marker marker, Supplier<?> msgSupplier); 1326 1327 /** 1328 * Logs a message (only to be constructed if the logging level is the {@link Level#FATAL FATAL} level) with the 1329 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. 1330 * 1331 * @param marker the marker data specific to this log statement 1332 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1333 * message factory. 1334 * @param t A Throwable or null. 1335 * @since 2.4 1336 */ 1337 void fatal(Marker marker, Supplier<?> msgSupplier, Throwable t); 1338 1339 /** 1340 * Logs a message with the specific Marker at the {@link Level#FATAL FATAL} level. 1341 * 1342 * @param msg the message string to be logged 1343 */ 1344 void fatal(Message msg); 1345 1346 /** 1347 * Logs a message with the specific Marker at the {@link Level#FATAL FATAL} level. 1348 * 1349 * @param msg the message string to be logged 1350 * @param t A Throwable or null. 1351 */ 1352 void fatal(Message msg, Throwable t); 1353 1354 /** 1355 * Logs a message which is only to be constructed if the logging level is the {@link Level#FATAL FATAL} level. The 1356 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 1357 * 1358 * @param msgSupplier A function, which when called, produces the desired log message. 1359 * @since 2.4 1360 */ 1361 void fatal(MessageSupplier msgSupplier); 1362 1363 /** 1364 * Logs a message (only to be constructed if the logging level is the {@link Level#FATAL FATAL} level) including the 1365 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. The {@code MessageSupplier} may or may 1366 * not use the {@link MessageFactory} to construct the {@code Message}. 1367 * 1368 * @param msgSupplier A function, which when called, produces the desired log message. 1369 * @param t the exception to log, including its stack trace. 1370 * @since 2.4 1371 */ 1372 void fatal(MessageSupplier msgSupplier, Throwable t); 1373 1374 /** 1375 * Logs a message CharSequence with the {@link Level#FATAL FATAL} level. 1376 * 1377 * @param message the message CharSequence to log. 1378 */ 1379 void fatal(CharSequence message); 1380 1381 /** 1382 * Logs a CharSequence at the {@link Level#FATAL FATAL} level including the stack trace of the {@link Throwable} 1383 * <code>t</code> passed as parameter. 1384 * 1385 * @param message the message CharSequence to log. 1386 * @param t the exception to log, including its stack trace. 1387 */ 1388 void fatal(CharSequence message, Throwable t); 1389 1390 /** 1391 * Logs a message object with the {@link Level#FATAL FATAL} level. 1392 * 1393 * @param message the message object to log. 1394 */ 1395 void fatal(Object message); 1396 1397 /** 1398 * Logs a message at the {@link Level#FATAL FATAL} level including the stack trace of the {@link Throwable} 1399 * <code>t</code> passed as parameter. 1400 * 1401 * @param message the message object to log. 1402 * @param t the exception to log, including its stack trace. 1403 */ 1404 void fatal(Object message, Throwable t); 1405 1406 /** 1407 * Logs a message object with the {@link Level#FATAL FATAL} level. 1408 * 1409 * @param message the message string to log. 1410 */ 1411 void fatal(String message); 1412 1413 /** 1414 * Logs a message with parameters at the {@link Level#FATAL FATAL} level. 1415 * 1416 * @param message the message to log; the format depends on the message factory. 1417 * @param params parameters to the message. 1418 * @see #getMessageFactory() 1419 */ 1420 void fatal(String message, Object... params); 1421 1422 /** 1423 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#FATAL 1424 * FATAL} level. 1425 * 1426 * @param message the message to log; the format depends on the message factory. 1427 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 1428 * @since 2.4 1429 */ 1430 void fatal(String message, Supplier<?>... paramSuppliers); 1431 1432 /** 1433 * Logs a message at the {@link Level#FATAL FATAL} level including the stack trace of the {@link Throwable} 1434 * <code>t</code> passed as parameter. 1435 * 1436 * @param message the message object to log. 1437 * @param t the exception to log, including its stack trace. 1438 */ 1439 void fatal(String message, Throwable t); 1440 1441 /** 1442 * Logs a message which is only to be constructed if the logging level is the {@link Level#FATAL FATAL} level. 1443 * 1444 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1445 * message factory. 1446 * @since 2.4 1447 */ 1448 void fatal(Supplier<?> msgSupplier); 1449 1450 /** 1451 * Logs a message (only to be constructed if the logging level is the {@link Level#FATAL FATAL} level) including the 1452 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. 1453 * 1454 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1455 * message factory. 1456 * @param t the exception to log, including its stack trace. 1457 * @since 2.4 1458 */ 1459 void fatal(Supplier<?> msgSupplier, Throwable t); 1460 1461 /** 1462 * Logs a message with parameters at fatal level. 1463 * 1464 * @param marker the marker data specific to this log statement 1465 * @param message the message to log; the format depends on the message factory. 1466 * @param p0 parameter to the message. 1467 */ 1468 void fatal(Marker marker, String message, Object p0); 1469 1470 /** 1471 * Logs a message with parameters at fatal level. 1472 * 1473 * @param marker the marker data specific to this log statement 1474 * @param message the message to log; the format depends on the message factory. 1475 * @param p0 parameter to the message. 1476 * @param p1 parameter to the message. 1477 */ 1478 void fatal(Marker marker, String message, Object p0, Object p1); 1479 1480 /** 1481 * Logs a message with parameters at fatal level. 1482 * 1483 * @param marker the marker data specific to this log statement 1484 * @param message the message to log; the format depends on the message factory. 1485 * @param p0 parameter to the message. 1486 * @param p1 parameter to the message. 1487 * @param p2 parameter to the message. 1488 */ 1489 void fatal(Marker marker, String message, Object p0, Object p1, Object p2); 1490 1491 /** 1492 * Logs a message with parameters at fatal level. 1493 * 1494 * @param marker the marker data specific to this log statement 1495 * @param message the message to log; the format depends on the message factory. 1496 * @param p0 parameter to the message. 1497 * @param p1 parameter to the message. 1498 * @param p2 parameter to the message. 1499 * @param p3 parameter to the message. 1500 */ 1501 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3); 1502 1503 /** 1504 * Logs a message with parameters at fatal level. 1505 * 1506 * @param marker the marker data specific to this log statement 1507 * @param message the message to log; the format depends on the message factory. 1508 * @param p0 parameter to the message. 1509 * @param p1 parameter to the message. 1510 * @param p2 parameter to the message. 1511 * @param p3 parameter to the message. 1512 * @param p4 parameter to the message. 1513 */ 1514 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4); 1515 1516 /** 1517 * Logs a message with parameters at fatal level. 1518 * 1519 * @param marker the marker data specific to this log statement 1520 * @param message the message to log; the format depends on the message factory. 1521 * @param p0 parameter to the message. 1522 * @param p1 parameter to the message. 1523 * @param p2 parameter to the message. 1524 * @param p3 parameter to the message. 1525 * @param p4 parameter to the message. 1526 * @param p5 parameter to the message. 1527 */ 1528 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 1529 1530 /** 1531 * Logs a message with parameters at fatal level. 1532 * 1533 * @param marker the marker data specific to this log statement 1534 * @param message the message to log; the format depends on the message factory. 1535 * @param p0 parameter to the message. 1536 * @param p1 parameter to the message. 1537 * @param p2 parameter to the message. 1538 * @param p3 parameter to the message. 1539 * @param p4 parameter to the message. 1540 * @param p5 parameter to the message. 1541 * @param p6 parameter to the message. 1542 */ 1543 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, 1544 Object p6); 1545 1546 /** 1547 * Logs a message with parameters at fatal level. 1548 * 1549 * @param marker the marker data specific to this log statement 1550 * @param message the message to log; the format depends on the message factory. 1551 * @param p0 parameter to the message. 1552 * @param p1 parameter to the message. 1553 * @param p2 parameter to the message. 1554 * @param p3 parameter to the message. 1555 * @param p4 parameter to the message. 1556 * @param p5 parameter to the message. 1557 * @param p6 parameter to the message. 1558 * @param p7 parameter to the message. 1559 */ 1560 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 1561 Object p7); 1562 1563 /** 1564 * Logs a message with parameters at fatal level. 1565 * 1566 * @param marker the marker data specific to this log statement 1567 * @param message the message to log; the format depends on the message factory. 1568 * @param p0 parameter to the message. 1569 * @param p1 parameter to the message. 1570 * @param p2 parameter to the message. 1571 * @param p3 parameter to the message. 1572 * @param p4 parameter to the message. 1573 * @param p5 parameter to the message. 1574 * @param p6 parameter to the message. 1575 * @param p7 parameter to the message. 1576 * @param p8 parameter to the message. 1577 */ 1578 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 1579 Object p7, Object p8); 1580 1581 /** 1582 * Logs a message with parameters at fatal level. 1583 * 1584 * @param marker the marker data specific to this log statement 1585 * @param message the message to log; the format depends on the message factory. 1586 * @param p0 parameter to the message. 1587 * @param p1 parameter to the message. 1588 * @param p2 parameter to the message. 1589 * @param p3 parameter to the message. 1590 * @param p4 parameter to the message. 1591 * @param p5 parameter to the message. 1592 * @param p6 parameter to the message. 1593 * @param p7 parameter to the message. 1594 * @param p8 parameter to the message. 1595 * @param p9 parameter to the message. 1596 */ 1597 void fatal(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 1598 Object p7, Object p8, Object p9); 1599 1600 /** 1601 * Logs a message with parameters at fatal level. 1602 * 1603 * @param message the message to log; the format depends on the message factory. 1604 * @param p0 parameter to the message. 1605 */ 1606 void fatal(String message, Object p0); 1607 1608 /** 1609 * Logs a message with parameters at fatal level. 1610 * 1611 * @param message the message to log; the format depends on the message factory. 1612 * @param p0 parameter to the message. 1613 * @param p1 parameter to the message. 1614 */ 1615 void fatal(String message, Object p0, Object p1); 1616 1617 /** 1618 * Logs a message with parameters at fatal level. 1619 * 1620 * @param message the message to log; the format depends on the message factory. 1621 * @param p0 parameter to the message. 1622 * @param p1 parameter to the message. 1623 * @param p2 parameter to the message. 1624 */ 1625 void fatal(String message, Object p0, Object p1, Object p2); 1626 1627 /** 1628 * Logs a message with parameters at fatal level. 1629 * 1630 * @param message the message to log; the format depends on the message factory. 1631 * @param p0 parameter to the message. 1632 * @param p1 parameter to the message. 1633 * @param p2 parameter to the message. 1634 * @param p3 parameter to the message. 1635 */ 1636 void fatal(String message, Object p0, Object p1, Object p2, Object p3); 1637 1638 /** 1639 * Logs a message with parameters at fatal level. 1640 * 1641 * @param message the message to log; the format depends on the message factory. 1642 * @param p0 parameter to the message. 1643 * @param p1 parameter to the message. 1644 * @param p2 parameter to the message. 1645 * @param p3 parameter to the message. 1646 * @param p4 parameter to the message. 1647 */ 1648 void fatal(String message, Object p0, Object p1, Object p2, Object p3, Object p4); 1649 1650 /** 1651 * Logs a message with parameters at fatal level. 1652 * 1653 * @param message the message to log; the format depends on the message factory. 1654 * @param p0 parameter to the message. 1655 * @param p1 parameter to the message. 1656 * @param p2 parameter to the message. 1657 * @param p3 parameter to the message. 1658 * @param p4 parameter to the message. 1659 * @param p5 parameter to the message. 1660 */ 1661 void fatal(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 1662 1663 /** 1664 * Logs a message with parameters at fatal level. 1665 * 1666 * @param message the message to log; the format depends on the message factory. 1667 * @param p0 parameter to the message. 1668 * @param p1 parameter to the message. 1669 * @param p2 parameter to the message. 1670 * @param p3 parameter to the message. 1671 * @param p4 parameter to the message. 1672 * @param p5 parameter to the message. 1673 * @param p6 parameter to the message. 1674 */ 1675 void fatal(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6); 1676 1677 /** 1678 * Logs a message with parameters at fatal level. 1679 * 1680 * @param message the message to log; the format depends on the message factory. 1681 * @param p0 parameter to the message. 1682 * @param p1 parameter to the message. 1683 * @param p2 parameter to the message. 1684 * @param p3 parameter to the message. 1685 * @param p4 parameter to the message. 1686 * @param p5 parameter to the message. 1687 * @param p6 parameter to the message. 1688 * @param p7 parameter to the message. 1689 */ 1690 void fatal(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7); 1691 1692 /** 1693 * Logs a message with parameters at fatal level. 1694 * 1695 * @param message the message to log; the format depends on the message factory. 1696 * @param p0 parameter to the message. 1697 * @param p1 parameter to the message. 1698 * @param p2 parameter to the message. 1699 * @param p3 parameter to the message. 1700 * @param p4 parameter to the message. 1701 * @param p5 parameter to the message. 1702 * @param p6 parameter to the message. 1703 * @param p7 parameter to the message. 1704 * @param p8 parameter to the message. 1705 */ 1706 void fatal(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 1707 Object p8); 1708 1709 /** 1710 * Logs a message with parameters at fatal level. 1711 * 1712 * @param message the message to log; the format depends on the message factory. 1713 * @param p0 parameter to the message. 1714 * @param p1 parameter to the message. 1715 * @param p2 parameter to the message. 1716 * @param p3 parameter to the message. 1717 * @param p4 parameter to the message. 1718 * @param p5 parameter to the message. 1719 * @param p6 parameter to the message. 1720 * @param p7 parameter to the message. 1721 * @param p8 parameter to the message. 1722 * @param p9 parameter to the message. 1723 */ 1724 void fatal(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 1725 Object p8, Object p9); 1726 1727 /** 1728 * Gets the Level associated with the Logger. 1729 * 1730 * @return the Level associate with the Logger. 1731 */ 1732 Level getLevel(); 1733 1734 /** 1735 * Gets the message factory used to convert message Objects and Strings/CharSequences into actual log Messages. 1736 * 1737 * Since version 2.6, Log4j internally uses message factories that implement the {@link MessageFactory2} interface. 1738 * From version 2.6.2, the return type of this method was changed from {@link MessageFactory} to 1739 * {@code <MF extends MessageFactory> MF}. The returned factory will always implement {@link MessageFactory2}, 1740 * but the return type of this method could not be changed to {@link MessageFactory2} without breaking binary 1741 * compatibility. 1742 * 1743 * @return the message factory, as an instance of {@link MessageFactory2} 1744 */ 1745 <MF extends MessageFactory> MF getMessageFactory(); 1746 1747 /** 1748 * Gets the logger name. 1749 * 1750 * @return the logger name. 1751 */ 1752 String getName(); 1753 1754 /** 1755 * Logs a message with the specific Marker at the {@link Level#INFO INFO} level. 1756 * 1757 * @param marker the marker data specific to this log statement 1758 * @param msg the message string to be logged 1759 */ 1760 void info(Marker marker, Message msg); 1761 1762 /** 1763 * Logs a message with the specific Marker at the {@link Level#INFO INFO} level. 1764 * 1765 * @param marker the marker data specific to this log statement 1766 * @param msg the message string to be logged 1767 * @param t A Throwable or null. 1768 */ 1769 void info(Marker marker, Message msg, Throwable t); 1770 1771 /** 1772 * Logs a message which is only to be constructed if the logging level is the {@link Level#INFO INFO} level with the 1773 * specified Marker. The {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the 1774 * {@code Message}. 1775 * 1776 * @param marker the marker data specific to this log statement 1777 * @param msgSupplier A function, which when called, produces the desired log message. 1778 * @since 2.4 1779 */ 1780 void info(Marker marker, MessageSupplier msgSupplier); 1781 1782 /** 1783 * Logs a message (only to be constructed if the logging level is the {@link Level#INFO INFO} level) with the 1784 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. The 1785 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 1786 * 1787 * @param marker the marker data specific to this log statement 1788 * @param msgSupplier A function, which when called, produces the desired log message. 1789 * @param t A Throwable or null. 1790 * @since 2.4 1791 */ 1792 void info(Marker marker, MessageSupplier msgSupplier, Throwable t); 1793 1794 /** 1795 * Logs a message CharSequence with the {@link Level#INFO INFO} level. 1796 * 1797 * @param marker the marker data specific to this log statement 1798 * @param message the message CharSequence to log. 1799 */ 1800 void info(Marker marker, CharSequence message); 1801 1802 /** 1803 * Logs a CharSequence at the {@link Level#INFO INFO} level including the stack trace of the {@link Throwable} 1804 * <code>t</code> passed as parameter. 1805 * 1806 * @param marker the marker data specific to this log statement 1807 * @param message the message CharSequence to log. 1808 * @param t the exception to log, including its stack trace. 1809 */ 1810 void info(Marker marker, CharSequence message, Throwable t); 1811 1812 /** 1813 * Logs a message object with the {@link Level#INFO INFO} level. 1814 * 1815 * @param marker the marker data specific to this log statement 1816 * @param message the message object to log. 1817 */ 1818 void info(Marker marker, Object message); 1819 1820 /** 1821 * Logs a message at the {@link Level#INFO INFO} level including the stack trace of the {@link Throwable} 1822 * <code>t</code> passed as parameter. 1823 * 1824 * @param marker the marker data specific to this log statement 1825 * @param message the message object to log. 1826 * @param t the exception to log, including its stack trace. 1827 */ 1828 void info(Marker marker, Object message, Throwable t); 1829 1830 /** 1831 * Logs a message object with the {@link Level#INFO INFO} level. 1832 * 1833 * @param marker the marker data specific to this log statement 1834 * @param message the message object to log. 1835 */ 1836 void info(Marker marker, String message); 1837 1838 /** 1839 * Logs a message with parameters at the {@link Level#INFO INFO} level. 1840 * 1841 * @param marker the marker data specific to this log statement 1842 * @param message the message to log; the format depends on the message factory. 1843 * @param params parameters to the message. 1844 * @see #getMessageFactory() 1845 */ 1846 void info(Marker marker, String message, Object... params); 1847 1848 /** 1849 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#INFO 1850 * INFO} level. 1851 * 1852 * @param marker the marker data specific to this log statement 1853 * @param message the message to log; the format depends on the message factory. 1854 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 1855 * @since 2.4 1856 */ 1857 void info(Marker marker, String message, Supplier<?>... paramSuppliers); 1858 1859 /** 1860 * Logs a message at the {@link Level#INFO INFO} level including the stack trace of the {@link Throwable} 1861 * <code>t</code> passed as parameter. 1862 * 1863 * @param marker the marker data specific to this log statement 1864 * @param message the message object to log. 1865 * @param t the exception to log, including its stack trace. 1866 */ 1867 void info(Marker marker, String message, Throwable t); 1868 1869 /** 1870 * Logs a message which is only to be constructed if the logging level is the {@link Level#INFO INFO} level with the 1871 * specified Marker. 1872 * 1873 * @param marker the marker data specific to this log statement 1874 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1875 * message factory. 1876 * @since 2.4 1877 */ 1878 void info(Marker marker, Supplier<?> msgSupplier); 1879 1880 /** 1881 * Logs a message (only to be constructed if the logging level is the {@link Level#INFO INFO} level) with the 1882 * specified Marker and including the stack trace of the {@link Throwable} <code>t</code> passed as parameter. 1883 * 1884 * @param marker the marker data specific to this log statement 1885 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1886 * message factory. 1887 * @param t A Throwable or null. 1888 * @since 2.4 1889 */ 1890 void info(Marker marker, Supplier<?> msgSupplier, Throwable t); 1891 1892 /** 1893 * Logs a message with the specific Marker at the {@link Level#INFO INFO} level. 1894 * 1895 * @param msg the message string to be logged 1896 */ 1897 void info(Message msg); 1898 1899 /** 1900 * Logs a message with the specific Marker at the {@link Level#INFO INFO} level. 1901 * 1902 * @param msg the message string to be logged 1903 * @param t A Throwable or null. 1904 */ 1905 void info(Message msg, Throwable t); 1906 1907 /** 1908 * Logs a message which is only to be constructed if the logging level is the {@link Level#INFO INFO} level. The 1909 * {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the {@code Message}. 1910 * 1911 * @param msgSupplier A function, which when called, produces the desired log message. 1912 * @since 2.4 1913 */ 1914 void info(MessageSupplier msgSupplier); 1915 1916 /** 1917 * Logs a message (only to be constructed if the logging level is the {@link Level#INFO INFO} level) including the 1918 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. The {@code MessageSupplier} may or may 1919 * not use the {@link MessageFactory} to construct the {@code Message}. 1920 * 1921 * @param msgSupplier A function, which when called, produces the desired log message. 1922 * @param t the exception to log, including its stack trace. 1923 * @since 2.4 1924 */ 1925 void info(MessageSupplier msgSupplier, Throwable t); 1926 1927 /** 1928 * Logs a message CharSequence with the {@link Level#INFO INFO} level. 1929 * 1930 * @param message the message CharSequence to log. 1931 */ 1932 void info(CharSequence message); 1933 1934 /** 1935 * Logs a CharSequence at the {@link Level#INFO INFO} level including the stack trace of the {@link Throwable} 1936 * <code>t</code> passed as parameter. 1937 * 1938 * @param message the message CharSequence to log. 1939 * @param t the exception to log, including its stack trace. 1940 */ 1941 void info(CharSequence message, Throwable t); 1942 1943 /** 1944 * Logs a message object with the {@link Level#INFO INFO} level. 1945 * 1946 * @param message the message object to log. 1947 */ 1948 void info(Object message); 1949 1950 /** 1951 * Logs a message at the {@link Level#INFO INFO} level including the stack trace of the {@link Throwable} 1952 * <code>t</code> passed as parameter. 1953 * 1954 * @param message the message object to log. 1955 * @param t the exception to log, including its stack trace. 1956 */ 1957 void info(Object message, Throwable t); 1958 1959 /** 1960 * Logs a message object with the {@link Level#INFO INFO} level. 1961 * 1962 * @param message the message string to log. 1963 */ 1964 void info(String message); 1965 1966 /** 1967 * Logs a message with parameters at the {@link Level#INFO INFO} level. 1968 * 1969 * @param message the message to log; the format depends on the message factory. 1970 * @param params parameters to the message. 1971 * @see #getMessageFactory() 1972 */ 1973 void info(String message, Object... params); 1974 1975 /** 1976 * Logs a message with parameters which are only to be constructed if the logging level is the {@link Level#INFO 1977 * INFO} level. 1978 * 1979 * @param message the message to log; the format depends on the message factory. 1980 * @param paramSuppliers An array of functions, which when called, produce the desired log message parameters. 1981 * @since 2.4 1982 */ 1983 void info(String message, Supplier<?>... paramSuppliers); 1984 1985 /** 1986 * Logs a message at the {@link Level#INFO INFO} level including the stack trace of the {@link Throwable} 1987 * <code>t</code> passed as parameter. 1988 * 1989 * @param message the message object to log. 1990 * @param t the exception to log, including its stack trace. 1991 */ 1992 void info(String message, Throwable t); 1993 1994 /** 1995 * Logs a message which is only to be constructed if the logging level is the {@link Level#INFO INFO} level. 1996 * 1997 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 1998 * message factory. 1999 * @since 2.4 2000 */ 2001 void info(Supplier<?> msgSupplier); 2002 2003 /** 2004 * Logs a message (only to be constructed if the logging level is the {@link Level#INFO INFO} level) including the 2005 * stack trace of the {@link Throwable} <code>t</code> passed as parameter. 2006 * 2007 * @param msgSupplier A function, which when called, produces the desired log message; the format depends on the 2008 * message factory. 2009 * @param t the exception to log, including its stack trace. 2010 * @since 2.4 2011 */ 2012 void info(Supplier<?> msgSupplier, Throwable t); 2013 2014 /** 2015 * Logs a message with parameters at info level. 2016 * 2017 * @param marker the marker data specific to this log statement 2018 * @param message the message to log; the format depends on the message factory. 2019 * @param p0 parameter to the message. 2020 */ 2021 void info(Marker marker, String message, Object p0); 2022 2023 /** 2024 * Logs a message with parameters at info level. 2025 * 2026 * @param marker the marker data specific to this log statement 2027 * @param message the message to log; the format depends on the message factory. 2028 * @param p0 parameter to the message. 2029 * @param p1 parameter to the message. 2030 */ 2031 void info(Marker marker, String message, Object p0, Object p1); 2032 2033 /** 2034 * Logs a message with parameters at info level. 2035 * 2036 * @param marker the marker data specific to this log statement 2037 * @param message the message to log; the format depends on the message factory. 2038 * @param p0 parameter to the message. 2039 * @param p1 parameter to the message. 2040 * @param p2 parameter to the message. 2041 */ 2042 void info(Marker marker, String message, Object p0, Object p1, Object p2); 2043 2044 /** 2045 * Logs a message with parameters at info level. 2046 * 2047 * @param marker the marker data specific to this log statement 2048 * @param message the message to log; the format depends on the message factory. 2049 * @param p0 parameter to the message. 2050 * @param p1 parameter to the message. 2051 * @param p2 parameter to the message. 2052 * @param p3 parameter to the message. 2053 */ 2054 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3); 2055 2056 /** 2057 * Logs a message with parameters at info level. 2058 * 2059 * @param marker the marker data specific to this log statement 2060 * @param message the message to log; the format depends on the message factory. 2061 * @param p0 parameter to the message. 2062 * @param p1 parameter to the message. 2063 * @param p2 parameter to the message. 2064 * @param p3 parameter to the message. 2065 * @param p4 parameter to the message. 2066 */ 2067 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4); 2068 2069 /** 2070 * Logs a message with parameters at info level. 2071 * 2072 * @param marker the marker data specific to this log statement 2073 * @param message the message to log; the format depends on the message factory. 2074 * @param p0 parameter to the message. 2075 * @param p1 parameter to the message. 2076 * @param p2 parameter to the message. 2077 * @param p3 parameter to the message. 2078 * @param p4 parameter to the message. 2079 * @param p5 parameter to the message. 2080 */ 2081 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 2082 2083 /** 2084 * Logs a message with parameters at info level. 2085 * 2086 * @param marker the marker data specific to this log statement 2087 * @param message the message to log; the format depends on the message factory. 2088 * @param p0 parameter to the message. 2089 * @param p1 parameter to the message. 2090 * @param p2 parameter to the message. 2091 * @param p3 parameter to the message. 2092 * @param p4 parameter to the message. 2093 * @param p5 parameter to the message. 2094 * @param p6 parameter to the message. 2095 */ 2096 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, 2097 Object p6); 2098 2099 /** 2100 * Logs a message with parameters at info level. 2101 * 2102 * @param marker the marker data specific to this log statement 2103 * @param message the message to log; the format depends on the message factory. 2104 * @param p0 parameter to the message. 2105 * @param p1 parameter to the message. 2106 * @param p2 parameter to the message. 2107 * @param p3 parameter to the message. 2108 * @param p4 parameter to the message. 2109 * @param p5 parameter to the message. 2110 * @param p6 parameter to the message. 2111 * @param p7 parameter to the message. 2112 */ 2113 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 2114 Object p7); 2115 2116 /** 2117 * Logs a message with parameters at info level. 2118 * 2119 * @param marker the marker data specific to this log statement 2120 * @param message the message to log; the format depends on the message factory. 2121 * @param p0 parameter to the message. 2122 * @param p1 parameter to the message. 2123 * @param p2 parameter to the message. 2124 * @param p3 parameter to the message. 2125 * @param p4 parameter to the message. 2126 * @param p5 parameter to the message. 2127 * @param p6 parameter to the message. 2128 * @param p7 parameter to the message. 2129 * @param p8 parameter to the message. 2130 */ 2131 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 2132 Object p7, Object p8); 2133 2134 /** 2135 * Logs a message with parameters at info level. 2136 * 2137 * @param marker the marker data specific to this log statement 2138 * @param message the message to log; the format depends on the message factory. 2139 * @param p0 parameter to the message. 2140 * @param p1 parameter to the message. 2141 * @param p2 parameter to the message. 2142 * @param p3 parameter to the message. 2143 * @param p4 parameter to the message. 2144 * @param p5 parameter to the message. 2145 * @param p6 parameter to the message. 2146 * @param p7 parameter to the message. 2147 * @param p8 parameter to the message. 2148 * @param p9 parameter to the message. 2149 */ 2150 void info(Marker marker, String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, 2151 Object p7, Object p8, Object p9); 2152 2153 /** 2154 * Logs a message with parameters at info level. 2155 * 2156 * @param message the message to log; the format depends on the message factory. 2157 * @param p0 parameter to the message. 2158 */ 2159 void info(String message, Object p0); 2160 2161 /** 2162 * Logs a message with parameters at info level. 2163 * 2164 * @param message the message to log; the format depends on the message factory. 2165 * @param p0 parameter to the message. 2166 * @param p1 parameter to the message. 2167 */ 2168 void info(String message, Object p0, Object p1); 2169 2170 /** 2171 * Logs a message with parameters at info level. 2172 * 2173 * @param message the message to log; the format depends on the message factory. 2174 * @param p0 parameter to the message. 2175 * @param p1 parameter to the message. 2176 * @param p2 parameter to the message. 2177 */ 2178 void info(String message, Object p0, Object p1, Object p2); 2179 2180 /** 2181 * Logs a message with parameters at info level. 2182 * 2183 * @param message the message to log; the format depends on the message factory. 2184 * @param p0 parameter to the message. 2185 * @param p1 parameter to the message. 2186 * @param p2 parameter to the message. 2187 * @param p3 parameter to the message. 2188 */ 2189 void info(String message, Object p0, Object p1, Object p2, Object p3); 2190 2191 /** 2192 * Logs a message with parameters at info level. 2193 * 2194 * @param message the message to log; the format depends on the message factory. 2195 * @param p0 parameter to the message. 2196 * @param p1 parameter to the message. 2197 * @param p2 parameter to the message. 2198 * @param p3 parameter to the message. 2199 * @param p4 parameter to the message. 2200 */ 2201 void info(String message, Object p0, Object p1, Object p2, Object p3, Object p4); 2202 2203 /** 2204 * Logs a message with parameters at info level. 2205 * 2206 * @param message the message to log; the format depends on the message factory. 2207 * @param p0 parameter to the message. 2208 * @param p1 parameter to the message. 2209 * @param p2 parameter to the message. 2210 * @param p3 parameter to the message. 2211 * @param p4 parameter to the message. 2212 * @param p5 parameter to the message. 2213 */ 2214 void info(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5); 2215 2216 /** 2217 * Logs a message with parameters at info level. 2218 * 2219 * @param message the message to log; the format depends on the message factory. 2220 * @param p0 parameter to the message. 2221 * @param p1 parameter to the message. 2222 * @param p2 parameter to the message. 2223 * @param p3 parameter to the message. 2224 * @param p4 parameter to the message. 2225 * @param p5 parameter to the message. 2226 * @param p6 parameter to the message. 2227 */ 2228 void info(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6); 2229 2230 /** 2231 * Logs a message with parameters at info level. 2232 * 2233 * @param message the message to log; the format depends on the message factory. 2234 * @param p0 parameter to the message. 2235 * @param p1 parameter to the message. 2236 * @param p2 parameter to the message. 2237 * @param p3 parameter to the message. 2238 * @param p4 parameter to the message. 2239 * @param p5 parameter to the message. 2240 * @param p6 parameter to the message. 2241 * @param p7 parameter to the message. 2242 */ 2243 void info(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7); 2244 2245 /** 2246 * Logs a message with parameters at info level. 2247 * 2248 * @param message the message to log; the format depends on the message factory. 2249 * @param p0 parameter to the message. 2250 * @param p1 parameter to the message. 2251 * @param p2 parameter to the message. 2252 * @param p3 parameter to the message. 2253 * @param p4 parameter to the message. 2254 * @param p5 parameter to the message. 2255 * @param p6 parameter to the message. 2256 * @param p7 parameter to the message. 2257 * @param p8 parameter to the message. 2258 */ 2259 void info(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 2260 Object p8); 2261 2262 /** 2263 * Logs a message with parameters at info level. 2264 * 2265 * @param message the message to log; the format depends on the message factory. 2266 * @param p0 parameter to the message. 2267 * @param p1 parameter to the message. 2268 * @param p2 parameter to the message. 2269 * @param p3 parameter to the message. 2270 * @param p4 parameter to the message. 2271 * @param p5 parameter to the message. 2272 * @param p6 parameter to the message. 2273 * @param p7 parameter to the message. 2274 * @param p8 parameter to the message. 2275 * @param p9 parameter to the message. 2276 */ 2277 void info(String message, Object p0, Object p1, Object p2, Object p3, Object p4, Object p5, Object p6, Object p7, 2278 Object p8, Object p9); 2279 2280 /** 2281 * Checks whether this Logger is enabled for the {@link Level#DEBUG DEBUG} Level. 2282 * 2283 * @return boolean - {@code true} if this Logger is enabled for level DEBUG, {@code false} otherwise. 2284 */ 2285 boolean isDebugEnabled(); 2286 2287 /** 2288 * Checks whether this Logger is enabled for the {@link Level#DEBUG DEBUG} Level. 2289 * 2290 * @param marker The Marker to check 2291 * @return boolean - {@code true} if this Logger is enabled for level DEBUG, {@code false} otherwise. 2292 */ 2293 boolean isDebugEnabled(Marker marker); 2294 2295 /** 2296 * Checks whether this Logger is enabled for the given Level. 2297 * <p> 2298 * Note that passing in {@link Level#OFF OFF} always returns {@code true}. 2299 * </p> 2300 * 2301 * @param level the Level to check 2302 * @return boolean - {@code true} if this Logger is enabled for level, {@code false} otherwise. 2303 */ 2304 boolean isEnabled(Level level); 2305 2306 /** 2307 * Checks whether this Logger is enabled for the given Level and Marker. 2308 * 2309 * @param level The Level to check 2310 * @param marker The Marker to check 2311 * @return boolean - {@code true} if this Logger is enabled for level and marker, {@code false} otherwise. 2312 */ 2313 boolean isEnabled(Level level, Marker marker); 2314 2315 /** 2316 * Checks whether this Logger is enabled for the {@link Level#ERROR ERROR} Level. 2317 * 2318 * @return boolean - {@code true} if this Logger is enabled for level {@link Level#ERROR ERROR}, {@code false} 2319 * otherwise. 2320 */ 2321 boolean isErrorEnabled(); 2322 2323 /** 2324 * Checks whether this Logger is enabled for the {@link Level#ERROR ERROR} Level. 2325 * 2326 * @param marker The Marker to check 2327 * @return boolean - {@code true} if this Logger is enabled for level {@link Level#ERROR ERROR}, {@code false} 2328 * otherwise. 2329 */ 2330 boolean isErrorEnabled(Marker marker); 2331 2332 /** 2333 * Checks whether this Logger is enabled for the {@link Level#FATAL FATAL} Level. 2334 * 2335 * @return boolean - {@code true} if this Logger is enabled for level {@link Level#FATAL FATAL}, {@code false} 2336 * otherwise. 2337 */ 2338 boolean isFatalEnabled(); 2339 2340 /** 2341 * Checks whether this Logger is enabled for the {@link Level#FATAL FATAL} Level. 2342 * 2343 * @param marker The Marker to check 2344 * @return boolean - {@code true} if this Logger is enabled for level {@link Level#FATAL FATAL}, {@code false} 2345 * otherwise. 2346 */ 2347 boolean isFatalEnabled(Marker marker); 2348 2349 /** 2350 * Checks whether this Logger is enabled for the {@link Level#INFO INFO} Level. 2351 * 2352 * @return boolean - {@code true} if this Logger is enabled for level INFO, {@code false} otherwise. 2353 */ 2354 boolean isInfoEnabled(); 2355 2356 /** 2357 * Checks whether this Logger is enabled for the {@link Level#INFO INFO} Level. 2358 * 2359 * @param marker The Marker to check 2360 * @return boolean - {@code true} if this Logger is enabled for level INFO, {@code false} otherwise. 2361 */ 2362 boolean isInfoEnabled(Marker marker); 2363 2364 /** 2365 * Checks whether this Logger is enabled for the {@link Level#TRACE TRACE} level. 2366 * 2367 * @return boolean - {@code true} if this Logger is enabled for level TRACE, {@code false} otherwise. 2368 */ 2369 boolean isTraceEnabled(); 2370 2371 /** 2372 * Checks whether this Logger is enabled for the {@link Level#TRACE TRACE} level. 2373 * 2374 * @param marker The Marker to check 2375 * @return boolean - {@code true} if this Logger is enabled for level TRACE, {@code false} otherwise. 2376 */ 2377 boolean isTraceEnabled(Marker marker); 2378 2379 /** 2380 * Checks whether this Logger is enabled for the {@link Level#WARN WARN} Level. 2381 * 2382 * @return boolean - {@code true} if this Logger is enabled for level {@link Level#WARN WARN}, {@code false} 2383 * otherwise. 2384 */ 2385 boolean isWarnEnabled(); 2386 2387 /** 2388 * Checks whether this Logger is enabled for the {@link Level#WARN WARN} Level. 2389 * 2390 * @param marker The Marker to check 2391 * @return boolean - {@code true} if this Logger is enabled for level {@link Level#WARN WARN}, {@code false} 2392 * otherwise. 2393 */ 2394 boolean isWarnEnabled(Marker marker); 2395 2396 /** 2397 * Logs a message with the specific Marker at the given level. 2398 * 2399 * @param level the logging level 2400 * @param marker the marker data specific to this log statement 2401 * @param msg the message string to be logged 2402 */ 2403 void log(Level level, Marker marker, Message msg); 2404 2405 /** 2406 * Logs a message with the specific Marker at the given level. 2407 * 2408 * @param level the logging level 2409 * @param marker the marker data specific to this log statement 2410 * @param msg the message string to be logged 2411 * @param t A Throwable or null. 2412 */ 2413 void log(Level level, Marker marker, Message msg, Throwable t); 2414 2415 /** 2416 * Logs a message which is only to be constructed if the logging level is the specified level with the specified 2417 * Marker. The {@code MessageSupplier} may or may not use the {@link MessageFactory} to construct the 2418 * {@code Message}. 2419 * 2420 * @param level the logging level 2421 * @param marker the marker data specific to this log statement 2422 * @param msgSupplier A function, which when called, produces the desired log message. 2423 * @since 2.4 2424 */ 2425 void log(Level level, Marker marker, MessageSupplier msgSupplier); 2426 2427 /** 2428 * Logs a message (only to be constructed if the logging level is the specified level) with the specified Marker and 2429 * including the stack log of the {@link Throwable} <code>t</code> passed as parameter. The {@code MessageSupplier} 2430 * may or may not use the {@link MessageFactory} to construct the {@code Message}. 2431 * 2432 * @param level the logging level 2433 * @param marker the marker data specific to this log statement 2434 * @param msgSupplier A function, which when called, produces the desired log message. 2435 * @param t A Throwable or null. 2436 * @since 2.4 2437 */ 2438 void log(Level level, Marker marker, MessageSupplier msgSupplier, Throwable t); 2439 2440 /** 2441 * Logs a message CharSequence with the given level. 2442 * 2443 * @param level the logging level 2444 * @param marker the marker data specific to this log statement 2445 * @param message the message CharSequence to log. 2446 */ 2447 void log(Level level, Marker marker, CharSequence message); 2448 2449 /** 2450 * Logs a CharSequence at the given level including the stack trace of the {@link Throwable} <code>t</code> passed as 2451 * parameter. 2452 * 2453 * @param level the logging level 2454 * @param marker the marker data specific to this log statement 2455 * @param message the message CharSequence to log. 2456 * @param t the exception to log, including its stack trace. 2457 */ 2458 void log(Level level, Marker marker, CharSequence message, Throwable t); 2459 2460 /** 2461 * Logs a message object with the given level. 2462 * 2463 * @param level the logging level 2464 * @param marker the marker data specific to this log statement 2465 * @param message the message object to log. 2466 */ 2467 void log(Level level, Marker marker, Object message); 2468 2469 /** 2470 * Logs a message at the given level including the stack trace of the {@link Throwable} <code>t</code> passed as 2471 * parameter. 2472 * 2473 * @param level the logging level 2474 * @param marker the marker data specific to this log statement 2475 * @param message the message to log. 2476 * @param t the exception to log, including its stack trace. 2477 */ 2478 void log(Level level, Marker marker, Object message, Throwable t); 2479 2480 /** 2481 * Logs a message object with the given level. 2482 * 2483 * @param level the logging level 2484 * @param marker the marker data specific to this log statement 2485 * @param message the message object to log. 2486 */ 2487 void log(Level level, Marker marker, String message); 2488 2489 /** 2490 * Logs a message with parameters at the given level. 2491 * 2492 * @param level the logging level 2493 * @param marker the marker data specific to this log statement 2494 * @param message the message to log; the format depends on the message factory. 2495 * @para"
    }
}