{
    "id": "dbpedia_7406_3",
    "rank": 22,
    "data": {
        "url": "https://collaborate.princeton.edu/en/publications/foundational-verification-of-stateful-p4-packet-processing",
        "read_more_link": "",
        "language": "en",
        "title": "Foundational Verification of Stateful P4 Packet Processing",
        "top_image": "https://collaborate.princeton.edu/skin/headerImage/",
        "meta_img": "https://collaborate.princeton.edu/skin/headerImage/",
        "images": [
            "https://collaborate.princeton.edu/skin/headerImage/",
            "https://collaborate.princeton.edu/skin/footerIcon/"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Qinshi Wang",
            "Mengying Pan",
            "Shengyi Wang",
            "Ryan Doenges",
            "Lennart Beringer",
            "Andrew W. Appel"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/skin/favIcon/",
        "meta_site_name": "Princeton University",
        "canonical_link": "https://collaborate.princeton.edu/en/publications/foundational-verification-of-stateful-p4-packet-processing",
        "text": "P4 is a standardized programming language for the network data plane. But P4 is not just for routing anymore. As programmable switches support stateful objects, P4 programs move beyond just stateless forwarders into new stateful applications: network telemetry (heavy hitters, DDoS detection, performance monitoring), middleboxes (firewalls, NAT, load balancers, intrusion detection), and distributed services (in-network caching, lock management, conflict detection). The complexity of stateful programs and their richer specifications are beyond what existing P4 program verifiers can handle. Verifiable P4 is a new interactive verification framework for P4 that (1) allows reasoning about multi-packet properties by specifying the per-packet relation between initial and final states; (2) performs modular verification, especially providing a modular description for stateful objects; (3) is foundational, i.e., with a machine-checked soundness proof with respect to a formal operational semantics of P416 (the current specification of P4) in Coq. In addition, our framework includes a proved-correct reference interpreter. We demonstrate the framework with the specification and verification of a stateful firewall that uses a sliding-window Bloom filter on a Tofino switch to block (most) unsolicited traffic.\n\nTY - GEN\n\nT1 - Foundational Verification of Stateful P4 Packet Processing\n\nAU - Wang, Qinshi\n\nAU - Pan, Mengying\n\nAU - Wang, Shengyi\n\nAU - Doenges, Ryan\n\nAU - Beringer, Lennart\n\nAU - Appel, Andrew W.\n\nN1 - Publisher Copyright: Â© Qinshi Wang, Mengying Pan, Shengyi Wang, Ryan Doenges, Lennart Beringer, and Andrew W. Appel; licensed under Creative Commons License CC-BY 4.0 14th International Conference on Interactive Theorem Proving (ITP 2023)\n\nPY - 2023/7\n\nY1 - 2023/7\n\nN2 - P4 is a standardized programming language for the network data plane. But P4 is not just for routing anymore. As programmable switches support stateful objects, P4 programs move beyond just stateless forwarders into new stateful applications: network telemetry (heavy hitters, DDoS detection, performance monitoring), middleboxes (firewalls, NAT, load balancers, intrusion detection), and distributed services (in-network caching, lock management, conflict detection). The complexity of stateful programs and their richer specifications are beyond what existing P4 program verifiers can handle. Verifiable P4 is a new interactive verification framework for P4 that (1) allows reasoning about multi-packet properties by specifying the per-packet relation between initial and final states; (2) performs modular verification, especially providing a modular description for stateful objects; (3) is foundational, i.e., with a machine-checked soundness proof with respect to a formal operational semantics of P416 (the current specification of P4) in Coq. In addition, our framework includes a proved-correct reference interpreter. We demonstrate the framework with the specification and verification of a stateful firewall that uses a sliding-window Bloom filter on a Tofino switch to block (most) unsolicited traffic.\n\nAB - P4 is a standardized programming language for the network data plane. But P4 is not just for routing anymore. As programmable switches support stateful objects, P4 programs move beyond just stateless forwarders into new stateful applications: network telemetry (heavy hitters, DDoS detection, performance monitoring), middleboxes (firewalls, NAT, load balancers, intrusion detection), and distributed services (in-network caching, lock management, conflict detection). The complexity of stateful programs and their richer specifications are beyond what existing P4 program verifiers can handle. Verifiable P4 is a new interactive verification framework for P4 that (1) allows reasoning about multi-packet properties by specifying the per-packet relation between initial and final states; (2) performs modular verification, especially providing a modular description for stateful objects; (3) is foundational, i.e., with a machine-checked soundness proof with respect to a formal operational semantics of P416 (the current specification of P4) in Coq. In addition, our framework includes a proved-correct reference interpreter. We demonstrate the framework with the specification and verification of a stateful firewall that uses a sliding-window Bloom filter on a Tofino switch to block (most) unsolicited traffic.\n\nKW - Software Defined Networking\n\nKW - Stateful data plane programming\n\nKW - Verifiable P4\n\nUR - http://www.scopus.com/inward/record.url?scp=85168757459&partnerID=8YFLogxK\n\nUR - http://www.scopus.com/inward/citedby.url?scp=85168757459&partnerID=8YFLogxK\n\nU2 - 10.4230/LIPIcs.ITP.2023.32\n\nDO - 10.4230/LIPIcs.ITP.2023.32\n\nM3 - Conference contribution\n\nAN - SCOPUS:85168757459\n\nT3 - Leibniz International Proceedings in Informatics, LIPIcs\n\nBT - 14th International Conference on Interactive Theorem Proving, ITP 2023\n\nA2 - Naumowicz, Adam\n\nA2 - Thiemann, Rene\n\nPB - Schloss Dagstuhl- Leibniz-Zentrum fur Informatik GmbH, Dagstuhl Publishing\n\nT2 - 14th International Conference on Interactive Theorem Proving, ITP 2023\n\nY2 - 31 July 2023 through 4 August 2023\n\nER -"
    }
}