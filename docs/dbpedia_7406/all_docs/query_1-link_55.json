{
    "id": "dbpedia_7406_1",
    "rank": 55,
    "data": {
        "url": "https://gplv3.fsf.org/all-comments/gplv3-draft-3.html",
        "read_more_link": "",
        "language": "en",
        "title": "read GPLv3 comments: in file 'gplv3",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://gplv3.fsf.org/dogear.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I agree that this should be struck or at least extended to something significantly higher (I suggest no less than 24 months). Especially small parties attempting to enforce the GPL against big parties might not want to move too hastily. They will want to evaluate the situation, maybe collect money to pay for a lawyer, find a lawyer and consult that lawyer, before they even send out the notice to the infringer. Especially hobbyist developers will often be hesitant to send a notice to a big company unless they can secure community support first, which may take much more than 60 days.\n\nAn additional problem with the 60 days rule is that the time of the most recent violation is often hard to pin down and you'll often be required to argue that a violation is ongoing, which is not always an easy case to make. For instance, what if a company sold routers containing Linux without providing source, but has stopped doing so 180 days ago. They don't offer firmware images for download but they do have a support crew that repairs the machines, which may or may not include replacing the firmware. Is it an ongoing violation if they don't replace the firmware? IOW, is it an ongoing violation, just because employees regulary touch the machines in question? In any case, how do you prove this without access to inside information about their support? Will you have to sue just to find out in discovery that they don't touch the firmware anymore which makes your lawsuit collapse (with all the costs involved)?\n\nThe 60 day rule hinders practical enforcement, because it encourages weasel arguments and bargaining for days on the part of the infringer (\"You sent the notice to our EMEA branch but that is not the actual licensor of the product. Once the notice had been relayed to our American branch the 60 days had passed. Sorry pal. Better luck next time.\") Sure, you can always sue to get this settled, but who will take the risk of a lawsuit if he can't even be sure he has legally provided the necessary 60 days notice? So the doubts that the 60 days rule introduces put the infringer in a good position to discourage the licensor from enforcing his rights.\n\nAnother argument against the 60 days rule is that it seems to significantly weaken the GPL with respect to one time transactions. For instance if someone creates a work that includes GPLed code specifically for a customer and has that customer sign a restrictive NDA that violates the GPL, he may get off. If a copyright holder does not hear of this within 60 days, then there's nothing he can do against the violator, not even terminate his rights to use that GPLed software in the future. Or would argue that this is an ongoing violation, because the NDA is ongoing? IANAL, but I don't think that this is a case that is easy to make, which brings us back to the paragraph further above. Uncertainty like this discourages enforcement of the GPL by small parties and therefore weakens it.\n\nFinally, the 60 days rule gives licensees a reason to be careless, because it limits their window of exposure to legal consequences. I think that the threat of legal consequences not limited in time is a good deterrent against infringement.\n\nLike many I am a free software programmer (i.e. both licensor and licensee of GPLed works) in my spare time. I'm not a lawyer. I don't have a lawyer and certainly not an IP lawyer. I strongly sympathize with hawk's statement. I too, want to have the feeling that I *understand* the license that I'm licensing my works under. And I don't understand this section. I can live with the WIPO reference if it is really likely that it helps free software developers, but what I can't live with is to have *only* the WIPO reference. I know that being concise is one of the goals of the GPL, but cutting GPL size by incorporating external references is not the way to do it. So at the very least, explain to the uninitiated what this section is about. And I'm not talking about definitions but about purpose. What's the purpose of this section? What uses is it trying to prevent.\n\nYou may think that this section is only targeted at big evil corporate users but you shouldn't be too sure of that. When I was 16 (long time ago :-) I developed copy protection code just for fun, just because I saw it as a challenge to come up with a protection stronger than those trying to crack it. I don't think it's unthinkable that a hobbyist develops some kind of \"effective technological measure\" just for fun and wants to release it under the GPL. He should be able to understand from the GPL alone, without refering to WIPO treaties (which we know this guy won't read) whether that makes sense at all for his program. If he can't do that I see two possibilities, both undesirable:\n\n1.) He releases under the GPL although it doesn't make sense and thereby causes legal complications for himself and corporate users who want to use his code. Enemies of the GPL may use such a case to demonstrate how the free software community and the GPL cannot be relied upon by corporations.\n\n2.) He releases his code under a different license than the GPL (possibly non-copyleft) although it would have made sense to release under the GPL. He thereby deprives the free software world of a contribution.\n\nBTW, I don't think commentary in a rationale or an FAQ entry can help here. Many free software programmers don't read those. They're in the game for the fun and reading legalese isn't fun. You can be happy if they read the GPL at all. On the other hand I do think that referencing the WIPO treaty in the FAQ on the FSF website would be sufficient to achieve the legal goals of having the reference in the license itself. After all, if the reference is not in the license and it ends up in court, it will have to be determined how those parts of the section that are not clear from the license itself are to be interpreted. And since the FSF is the author of the license, its public statements will necessarily be taken into account.\n\nSo my suggestion is: Move the WIPO reference to a rationale document or statement on the FSF website so that lawyers can use it when fighting over this section (which hopefully will never happen) and for the rest of us, include a clear description (even if it is longer than the current section) of what kind of \"technological protection\" a GPLed program can not be used for.\n\nThe preamble is too vague in some of its statements, some of which may appear to be contradicted depending on how you read some of the later sections. For example, the sentence \"the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users\" implies he following:\n\n- That if you receive free GPL software, by any means, you can do anything you want with it, but if you share it with others then it must also be passed on for free and under the GPL. The only time that you may keep any modifications private is if you do not share the software with anyone else. There is a paragraph which says that you *may* charge a fee for distribution (which is supplying a copy of the software on physical media) but only to recover the costs of supplying such media. If it is permitted under certain circumstances to charge a fee for this \"free\" software then it should be made abundantly clear what those circumstances are and what scale of charge can be levied. If it is only permitted to charge a fee to cover legitimate costs and not to make a profit then the GPL should state quite categorically that you can do anything with someone else's free software EXCEPT make a profit. The GPL also states that it is possible to levy a fee for support or warranty protection, but it should be made clear that such a fee should be *optional* and not an excuse to make a profit from someone else's free software.\n\n- The \"user\" of a piece of software is someone who interacts with that software, and this interaction may occur without any regard for the distance which may exist between the user and the device on which the software resides. It does not matter if you are running a copy of the software from your own local hard drive or from a remote server across a network - you are \"running\" the software, therefore you are \"using\" that software. Yet there are some parts of the GPL which infer that some of the conditions and restrictions only exist if the \"user\" of the software is also in possession of a copy of that software (i.e. a copy of that software has been \"conveyed\" or \"distributed\" to that user). Some people may imply that if they keep a copy of some modified software on their own server, but allow others to access (i.e. become \"users\" of) that software over a network then, by virtue of the fact that they have not distributed the software using any physical media they are free from any restrictions regarding what they may charge for granting access to that software. It should be made much clearer what differences, if any, exist between being a \"user\" of a piece of software and being in possession of an actual copy of the software. If it is permitted to charge a fee ONLY to recover the costs of distribution then it should be made clear that if the software is not conveyed or distributed, but simply made accessible to users over a network, then it is not possible to charge a distribution fee (or an other sort of fee) on those users.\n\nI have added further notes concerning these points at http://gplv3.fsf.org/comments/rt/readsay.html?filename=gplv3-draft-3&id=2822\n\nThis section is too harsh as it stands. It is presumably intended to be applicable to situations such as small non-profit organisations enforcing the GPL against large companies that have intentionally seriously breached the GPL to pervert copyleft, but it could just as easily be used by large companies to pervert copyleft by intimidating or destroying small non-profit organisations that have unintentionally breached the GPL in some minor way. It could potentially enable rather than prevent the next SCO.\n\nConsider the sorts of things that can be GPL breaches:\n\nMEPIS maintainer Warren Woodford distributes source code for binary packages he has modified, but not for binary packages that he distributes verbatim. I am sure this was not malicious.\n\nCases where previously unenforced trademarks start being enforced: Linux, RedHat, Mozilla (against Debian). And the DCC (formerly Debian Core Consortium) ran into problems for using the trademark Debian. There are many potential violations here that would not be malicious but could be breaches of the GPLv3. In order to correct these breaches, it may be necessary to change domain names, and redo artwork, etc.\n\nConsider that Linux distributions often involve thousands of packages for several platforms, and sometimes backport fixes to stable packages. It is entirely possible that some author attribution or licensing clause could be accidentally lost. In order to correct these breaches, it may be necessary to permanently take down archives, and entirely cease distribution until a new release is ready.\n\nTwo breaches are required to make GPLv3d3 termination permanent, but this could be two uses of a trademark in artwork, or two downloads of a binary file for which source is not immediately available, or for which attribution is slightly incorrect. Even temporary termination could cause serious damage over a minor breach.\n\nEssentially this clause is the equivalent of the death penalty for parking infringements. In order to protect freedom, it is necessary to adhere to the ideas of \"innocent until proven guilty\", \"first do no harm\" and \"the punishment fits the crime\". The most important thing to keep in mind for this clause is to ensure that it can not be used to deny the freedom that it is supposed to protect.\n\nIt is not (I think) difficult to imagine that a former Linux company bought out or paid off could use this clause to devastating effect. Think of SCO, but whereas it seems that SCO never had a real case, the termination clause might well provide the next SCO with a real case.\n\nMost GPL breaches do not require such a harsh penalty. It would suffice in the majority of cases to simply sue (or threaten to do so) for the breaches themselves, with the license still in place, thus ensuring that the punishment fits the crime. Anyone who thinks this would not be enough ought to be pushing for harsher copyright laws, rather than seeking the harshest possible punishment (termination) for even the smallest possible offence.\n\nThere is only one class of breaches for which it is necessary (or desirable) to charge in with guns blazing, that being when someone brings a lawsuit in breach of the GPL. This is the only type of breach which could cause immediate devastating damage, so it is the only instance in which it is necessary to be able to respond with immediate devastating damage.\n\nBy a happy co-incidence, this is also the only kind of breach which we can reasonably assume to be malicious, and the only kind of breach which we can be reasonably sure there is a quick and easy way for the party in violation to fix (i.e. by dropping the lawsuit or refunding damages).\n\nThat is to say, this is the only kind of breach for which it is necessary to be able to terminate rights in order to prevent the next SCO, and it is also the only kind of breach for which it is reasonably safe to allow termination without risking enabling the next SCO.\n\nFurther, even in instances where it is desirable to bring in the big guns and punish an aggressor by preventing them from benefiting from GPL code, it is both unnecessary and undesirable to also prevent them from offering a public service. And it is perverse to prevent them from fulfilling their GPL obligations. To highlight how absurd the situation is at the moment: Someone can have their license terminated for not providing source code, then be sued for providing source code, or they could have their license terminated for distributing incorrectly attributed works, then be sued for making the corrections. Think about this for a minute: The GPL being used to prevent someone from distributing source code in accordance with, and as required by, the GPL--this is lunacy.\n\nIn the case of a commercial Linux distributor that sues on the grounds of a patent in GPL code, it would make sense to terminate their right to sell their distribution, but not to terminate their right to provide source code for their distribution, or provide a public mirror of the distribution that theirs is based on. (They would have to remove any allegedly patent infringing feature from source code they provided anyway, since conveying GPL works that depend on a patent is disallowed, but they may as well be allowed to provide the source code /without/ that feature, allowing them to mostly fulfill their obligations, even while their right to commercially distribute the work is entirely terminated, with or without the feature.)\n\nTerminating the right to commercial use of the GPL work is all that is needed to hit the aggressor where it hurts (in the pocket). In attempting to pervert copyleft, they are likely to be after a financial gain, so a financial disincentive is appropriate. If this doesn't work (say the aggressor is a software company that doesn't rely on the GPL work), then also terminating their right to offer a public service isn't going to help at all. If it is desirable to make the punishment any harsher than this, then it could be required that they distribute source code (rather than just an offer for it) with every non-commercially distributed binary, and/or that they must offer source code for covered works run on a public server (the AGPL condition that was seen as to restrictive for GPL use might be appropriate in this context).\n\nFinally, the primary goal of the termination clause should be, first and foremost, to prevent damage to innocent parties, or if damage has already been done, to undo it, in so far as is possible. The primary goal should not be to destroy the aggressor, no matter how appealing this may sound. It would actually be better for everyone if they started playing nicely. To this end, it makes sense to allow immediate and automatic reinstatement of the terminated rights as soon as the GPL breaches are corrected, regardless of whether this is after 2 breaches, or a month, or whatever. If the aggressor is ever put in the position where they have no way of escaping termination, then there is no incentive for them to play nice. This will simply ensure that whatever damage they have done will become permanent. It may even force them into making a business model out of suing the users of GPL works, which is exactly what this section should be trying to avoid.\n\nI disagree that \"users\" means \"users of legitimately received copies of GPL software\". A person \"uses\" a program by the act of running it, not by having a copy of it on CD or his hard drive. You may run a program on a local computer or across a network, so the distance between the user and the device on which the software resides is totally irrelevant. Neither does ownership or control of the device on which the software resides have an bearing on being a \"user\" of that software. It would be wrong to say that I am only \"using\" the software if I own or control the device, but if I hand ownership or control of that device to a third party then even though I may still be \"running\" the software I am not \"using\" it.\n\nThe current draft contains the following phrases:\n\n- the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\n\n- you have the freedom to distribute copies of free software (and charge for this service if you wish)\n\n- you can change the software or use pieces of it in new free programs\n\n- if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received\n\n- to \"propagate\" a work means ... except executing it on a computer or making modifications that you do not share\n\n- propagation includes copying, distribution (with or without modification), making available to the public and in some countries other activities as well\n\n- to \"convey\" a work means any kind of propagation that enables other parties to make or receive copies, excluding sublicensing\n\n- interaction with a user through a computer network, with no transfer of a copy, is not conveying\n\n- you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License\n\nIf you put all these together it is clear that you can do ANYTHING with GPL software except make a profit. The only time you are allowed to charge a fee is when you distribute a copy, and that fee may only cover the costs of physical distribution media, plus post and packaging. If the software is downloaded from a network there is no physical media, therefore no fee is allowed. If the software is not physically distributed to users but made available to them over a network (such as a web application) then again there is no physical distribution media therefore no sort of fee is allowed. This means that you are not allowed to charge a fee to allow others to access your software across a network. You may charge a fee to support the software, but you may not charge a fee for the act of using the software, whether across a network or not. That is what \"to make sure the software is free for all its users\" means.\n\nIf I release my software to the world for free under the GPL I automatically allow anyone to do anything they like with my software EXCEPT make a profit. I think that the new GPL should make this point perfectly clear instead of just hinting at it in various places.\n\nActually one aspect of the GPL 3 that has me (a non-US, non-native speaker, non-lawyer) very confused is that to me it seems to suggest that I have the right to run the program even without the GPL. The commentor crosbie suggests the same thing, that copyright law alone already permits me to run the program. But crosbie says \"authorized copy\". How does a copy become an authorized copy if not by virtue of a license? AFAIK, if I obtain a used computer and there is pirated software left on that computer by the previous owner, then I do NOT have the right to run that software, even though I didn't break any laws to obtain it.\n\nI would really like to see this cleared up in the GPL 3. The current wording reads to me like this \"THE GPL DOES ***NOT*** GIVE YOU THE RIGHT TO RUN THE PROGRAM (you already have that right from a mysterious elsewhere)\"\n\nand the sentence in brackets is (figuratively speaking) in really small print. This is very confusing. Obviously the GPL means for me to have that right, but disclaiming the ability/necessity to give me that right is not helpful to communicate that point to laypersons. Besides, have you checked whether this is the same in all jurisdictions? Maybe there's a jurisdiction with tougher copyright laws where someone needs a license for running a program like GNU bash and doesn't have one, because the GPL v3 says it isn't a license permitting the execution of a program.\n\nAdding to the confusion is the exclusion of \"executing it on a computer...\" from the definition of propagate. If execution is something that copyright law says needs permission from the copyright holder, then excluding it from the definition of propagate is confusing, because it means that all the statements in the GPL allowing me to propagate do not apply to execution (or making private modifications), which basically reads to me as if the GPL does NOT allow me to execute the original program, which doesn't make sense.\n\nIf, on the other hand, execution does NOT require a license from the copyright holder, then the \"except executing it...\" part of the definition of propagate is redundant.\n\nWhy not a) strike the \"except executing...or making modifications that you do not share\" part from the definition of propagate. That way the \"Propagation of ... are permitted without conditions\" part of 2.Basic Permissions will include executing the program (including precompiling by the runtime environment which seems to be a modification in the legal sense) and everyone will know that they are allowed to execute the program. This will also simplify the definition of propagate, which is (see my comments there) IMHO very necessary.\n\nb) remove all statements from the GPL that disclaim the GPL's authority to allow running the program or making private modifications (such as in section 9.Acceptance not required for Having Copies).\n\nc) Add a simple statement \"You may execute the program on a computer and make private modifications to it that you do not share.\" If users already have that right from \"elsewhere\" (copyright law?) this statement doesn't hurt but it will help people unacquainted with said \"elsewhere\" understand their rights.\n\nFollowing is a summary of the GPLv3d3 in 2 pages. The numbers in brackets indicate the related sections in the GPLv3d3. Numbers in inner brackets are the corresponding GPLv2 sections. The Preamble, definitions, license revisions, and applying the license sections are not included.\n\nPlease consider this layout for the GPLv3.\n\n1. Receiving Works and Licences\n\n1.1. Grant of License: Upon your receipt of the Program, each contributor grants you a license for the copyrights and patents they hold covering their contributions. [2, 10[6], 11]\n\na. License Acceptance: Use of covered works beyond that allowed in Section 2.1 indicates your acceptance of this License. [9[5]]\n\nb. Warranty: There is no warranty for the Program, unless otherwise agreed to in writing in return for a fee. [15[11,12]]\n\nc. Warranty Additional Restrictions: You must accept contributors' additional liability disclaimers. [7a]\n\nd. Names and Marks Additional Restrictions: You must accept contributors' limitations on the use of trademarks, etc. as permitted by law. [7d]\n\ne. Local Law Additional Restrictions: You must accept contributors' additional terms drafted for compatibility with local law, in so far as they uphold the intent of this License. [7]\n\nf. License Adherence: Other obligations do not excuse you from the conditions of this License. [12[7]]\n\ng. License Termination: Contributors may terminate your right to use their contributions if you violate this License. [8[4]]\n\n1.2. Additional Terms: Additional permissions may have been granted for the Program or parts of it, and you are not bound by purported additional restrictions beyond those allowed by this License. [7]\n\n1.3. Receiving Source Code: You could be entitled to obtain the Program's source code from the party that conveyed you the object code.\n\n2. Basic Permissions.\n\n2.1 Using the Program: You may receive or run the Program without accepting this License, and you are entitled to fair use. [2, 9[5]]\n\n2.2 Making and Using Covered Works: You may make and use covered works. [2]\n\n3. Conveying Source.\n\n3.1. Conveying Verbatim Copies: You may convey verbatim copies of the Program's source code. [4[1]]\n\na. Licensing: You may not sub-license the Program or impose further restrictions on the rights granted by this License, and you are not responsible for enforcing compliance with this License. [2, 10[6]]\n\nb. Patents: You may not initiate patent litigation covering the Program, and if you arrange or knowingly rely on patent licenses, you must protect all recipients of covered works. [10[6], 11]\n\nc. DRM: You waive any legal right to forbid circumvention of technical measures that limit the use of covered works under the License. [3]\n\nd. Notices: You must keep intact license notices and warranty disclaimers, publish a copyright notice on each copy, and give recipients a copy of this License. [4[1]]\n\ne. Transfer of Control: Transfer of control of a covered work is considered to be conveying. [10[6]]\n\n3.2. Conveying Modified Source Versions: You may convey a work based on the Program in source code form. [5[2], 7]\n\na. Above Terms: You must adhere to the terms of Section 3.1. [5[2]]\n\nb. Licensing: You must license the derived work, excluding linked AGPL works, under this License, although you may remove additional permissions, or place additional terms on your contribution as permitted by this License. [5c[2], 7, 13]\n\nc. Notices: The derived work must carry copyright notices, licensing notices, including applicable additional terms, warranty disclaimers, and notices of your modification. [5abd[2], 7]\n\nd. Notices Additional Restrictions: You must adhere to contributors' additional requirements to preserve notices and mark modified versions. [7bc]\n\n4. Conveying Non-Source Forms: You may convey covered works in object code form. [6[3]]\n\na. Above Terms: You must adhere to the terms of Sections 3.1 and 3.2. [6[3]]\n\nb. Source Code: You must provide Corresponding Source. [6[3]]\n\nc. Installation Information: If you convey object code for use in a User Product, you must provide Installation Information for modified versions. [6[3]]\n\nThis term is undefined and IMHO is not self-explaining. Does this include diff-patches for instance?\n\nI think a \"modification\" at least in the ordinary sense (that a non-technie judge/lawyer might apply) is not something tangible that can be conveyed. You may convey instructions to perform a modification, programs that perform a modification, etc. but a \"modification\" is something abstract that cannot be conveyed. Programmers might call a diff-file a \"modification\", but more correctly a diff is a description of a modification that can be used by the patch program to perform said modification.\n\nFurthermore I'm not sure how this interacts with the definition of source code as the preferred form for making modifications. This sentence requires that modifications be in the form of source code, so we're talking about the preferred form of making modifications to a modification. Does that make sense?\n\nAnd is a diff the preferred form for making modifications to a modification? I don't think so. The preferred form is the modified source code that can be generated from applying the diff. Then, I'm not sure if the \"prominent notices\" requirement can be satisfied in a useful way on a diff. At least no diff I've ever seen had such prominent notices. So as I read this, diffs would be disallowed. Is that intended? If it is, do you believe that everyone understands the text that way? Do you believe that anybody cares?\n\nThe only option I see to satisfy this condition is to convey modifications in the form of complete modified source files. If that is indeed the only way to have \"modifications to produce it from the Program, in the form of source code\", then you should simply say so.\n\nIn any case this section needs to be amended to make clear what is a permissible way to convey a modification.\n\nPlease don't take this as nitpicking. The Linux From Scratch project (and many other places) are at this very moment distributing patches to GNU programs, such as this one\n\nhttp://www.linuxfromscratch.org/patches/downloads/tar/tar-1.13.25-y_compat_flag-1.patch\n\nThis is certainly not the preferred form of working on the modified work. It also doesn't carry any \"prominent notices stating that it is released under this License\"\n\nSo as you can see, the question what are and what aren't permissible ways of conveying modified source versions has concrete consequences on everyday life of hobbyist open-source programmers, so it needs to be made clear in the GPL in a way that non-lawyers can understand it right away. And hopefully, you can change the wording to make the common practice of distributing diff-patches legal, because I can tell you, people won't stop doing it.\n\npatent holders' leverage over small free software distributors.\n\nThis provision was drafted to prevent a free software distributor from voluntarily entering into an agreement with a patent holder in order to get a competitive advantage over other distributors. The unintended effect of Paragraphs 3 and 5 taken together, however, may be to take options away from distributors who are threatened or sued by a patent holder. Such distributors - particularly small businesses and individuals who have no intent to split the community - need to have the freedom to negotiate a settlement that removes their liability and preserves their ability to continue to distribute free software.\n\nConsider the situation in which a large software company sues a small free software distributor for patent infringement. The distributor has only four options that are compatible with paragraphs 3 and 5 of this draft:\n\n(1) Fight the patent in court. This option is unlikely to be feasible for a small distributor. Litigating a patent case to a judicial resolution can take years and cost millions of dollars in legal fees. Moreover, patents are presumed valid, and a favorable outcome is never certain, so the distributor risks a significant adverse judgment by proceeding with the lawsuit.\n\n(2) Negotiate a patent license for all downstream recipients. Putting aside the fairness issues involved in forcing the first distributor sued to pay for whole community, this option is not likely to be feasible either. A patent holder who is willing to license the whole free software community on affordable terms probably would not sue a small distributor in the first place.\n\n(3) Negotiate a patent license that does not involve a payment for the extent of the distributor's activity of conveying the work and then make all of the work's source code publicly available free of charge. This option may be feasible in some instances and not in others. The terms of the patent license, of course, are subject to the patent holder's agreement. A patent holder who is willing to accept a small per-unit royalty might demand a prohibitively large lump-sum payment to cover all possible future sales. Thus, not being able to negotiate a license based on the extent of activity severely limits the settlement options available to the distributor.\n\nAnd the safe harbor of the free, public distribution of the work's source code may not always be available to a particular distributor (e.g., if the work was developed under NDA or other conditions of privacy, if the work is used in a classified environment, or if no-cost distribution of the whole work to non-customers would undermine the distributor's business). Moreover, unless the distributor's license is sufficiently broad, the publication of source code could make the distributor liable to the patent holder for indirect infringement.\n\n(4) Pay the patent holder to settle the lawsuit and stop distributing the free software. By default, this is the likely outcome of any patent lawsuit (or even threat of a patent lawsuit) against a small distributor. That means that the patent holder may be able to shut down distributors one by one until the work is not available at all.\n\nWithout paragraphs 3 and 5, the distributor would have the option to negotiate a license (regardless of its opinion of the validity of the patent) that covers itself and its direct customers - thereby staying in business, continuing to distribute free software, and providing a benefit to its customers in the form of protection from a patent lawsuit.\n\nNothing in this draft prohibits a distributor from indemnifying its direct customers against patent infringement or buying insurance for its customers. Why should negotiating a license (whether in response to a lawsuit or otherwise) be any different? And why shouldn't the option of providing protection from patents be available to small distributors?\n\nFurther, if this license makes settling a patent lawsuit infeasible for a small distributor, then indemnification and insurance will also be unaffordable for all but the largest distributors (because the distributor's options for negotiating a patent license for its indemnified customer who is sued for patent infringement will be limited as discussed above). And if indemnification and insurance are less practical, the commercial use of free software may be reduced, as potential customers choose other solutions.\n\nLike it or not, software patents exist and large software companies have them. This license should not do anything to strengthen the patent holders' position. Rather, this license should continue to encourage developers to create and distribute as much free software as possible - and give users the freedom to decide whether or not to use it based on their own assessment of the patent risk.\n\nVery truly yours, Beth Mitchell Counsel CodeSourcery, Inc. 650-331-3385 x703\n\nI noticed this language problem in section 7 b immediately upon publication of GPL V3 DD3 and should have commented earlier but I did not comment quickly because of my preoccupation with researching unrelated challenges to the GPL. I hope I correct for tardiness in commenting by thoroughness in treatment.\n\nThe GPL is about protecting the rights of all software users and not merely software developer/users. \"the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.\"\n\nWhen the an optional requirement in accordance with section 7 b is exercised, DD3, new wording seems as if it may allow removal of specifically required author attributions or reasonable legal notices from an object code mechanism to place them in the source code. The effect of moving information from object code to source code would be to render an attribution or legal notice all but invisible to the vast majority of software users.\n\n1. GPL V3 DD3 SECTION 7 B LANGUAGE.\n\n7 b. \"requiring preservation of specified reasonable legal notices or author attributions in source or object code forms of material added by you to a covered work; or\"\n\nAdding the language \"in source or object code forms\" introduces a problem. While the effect is less obvious than if the problematic wording had been placed earlier, such as \"requiring preservation in source or object code form\", but there is no grammatical difference and the interpretation may be no different. The problematic interpretation might be understood as 'requiring the preservation in source or object code form at the propagator's discretion'.\n\n2. EFFECT OF THIS LANGUAGE.\n\nThis issue may be insufficiently well appreciated by software developers because developers do not generally think of source code as something scary and difficult to understand. However, most users do not think of source code a possible source of anything informative to them. Most users are more likely to think of source code as a scary foreign language which could only be informative to the specially initiated. The idea that valuable information in plain text form may accompany source code is outside the experience of most users and not something users are likely to discover merely with the knowledge that source code is available.\n\nWhy is it important to have an optional requirement for preserving author attributions and reasonable legal notices if we have something similar in the requirement of section 5 d? While author attribution and some legal notices may seem to be covered in section 5 d there is a degree of under inclusion in the section 5 d requirement to have some function in object code form if one had been present to display copyright notices; lack of warranty notice (unless warranty provided); right of conveyance under the GPL; and how to view the GPL.\n\nAn author and an entity holding the copyright of a work are not necessarily the same or even closely related. Author assignment of copyright is an important element for ensuring that a single entity can act decisively to protect the copyright and hence the GPL. An organisation holding copyright may cease to function for all the reasons that happen in the world or may be acquired by another entity without an interest in some particular code leaving a work essentially orphaned. Similarly an individual person holding an assignment may become incapacitated or die.\n\nReasonable legal notices are certainly not limited to a statement of lack of warranty and the license terms. I have no examples to offer as additional legal notices are outside my scope of interest at the present time.\n\n3. AUTHOR ATTRIBUTIONS.\n\n3.1 VALUE OF AUTHOR ATTRIBUTIONS.\n\nRemember that this is about preserving the users' rights including the right to modify the source code. If code were automatically fully self documenting, then we would all have an easier time. However, often even the author may have difficulty remembering how best to make some changes to his own code. Other developers are likely to have a more difficult time making changes which take best advantage of another developer's code. Mere users have the most difficulty determining how best to make changes. If an author wishes to make himself known by including an attribution requirement in object code, the user has the maximum opportunity for learning how to best modify the source code even when the copyright holder no longer exists. An author attribution hidden only in the source code for software which at least has a copyright statement included as part of an object code mechanism will leave most users expecting that only the copyright holding entity may provide any special insight into the code.\n\nAccess to the source code alone makes modification possible. Yet, maximising access to the people who might most easily provide information about how to make successful changes or who might best implement such changes themselves is important for making more free software available than would otherwise be the case.\n\nThe use of an option to require author attribution in object code form so that users are most likely to see the attribution will help provide additional motivation for some authors to create free software. More free software is certainly better for user freedom than less free software.\n\n3.2. AUTHOR ATTRIBUTION DIFFERENCE FROM ORIGINAL BSD ADVERTISING CLAUSE.\n\nIs an optional object code attribution requirement similar to the original BSD license advertising clause? No, an object code attribution requirement only has an effect when invoked upon copies of the object code, and unlike the original BSD license would have no effect on any advertisement.\n\n3.3. PROBLEMATIC STATEMENTS INCLUDED ALONG WITH ATTRIBUTIONS.\n\nSome have identified a risk of statements described as author attributions but which cross the line from mere attribution to something else. Perhaps the problematic phrase in section 7 b is weak attempt to ameliorate the risk. The problematic phrase is absent from the related parts a, c, and d of section 7.\n\nAuthor attribution can be easily understood without any need for formal definition. We all know that author attribution should not be understood to be anything more than an identifying name, functional description for the attributed part of the corresponding source code; along with the author's name; other information for identifying the author, such as affiliation, etc.; and means to contact the author.\n\nAnything more than attribution is better located on the author's website. The URL for the author's website may be included as part of an author attribution in information about how to contact the author. If statements which are more than attributions are improperly designated as author attributions, then they might simply be separated from the actual attribution elements and removed. Extra statements should only survive modification at the discretion of the modifier as a courtesy to the original author.\n\n4. REASONABLE LEGAL NOTICES.\n\nI leave it for others to comment about what reasonable legal notices are important to them as may be found in some other software licenses which will become compatible with GPL V3.\n\n5. ALLOWING REASONABLE OBJECT CODE METHODOLOGY.\n\nThe language of section 7 b itself should allow a document external to GPL V3 which applies the GPL V3 and optional GPL V3 restrictions using methodology similar to GPL V3 section 5 d in the external document for applying optional restrictions of GPL V3. An external document might specify something like the following for modifications in accordance with a corrected 7 b allowing such an application.\n\nIf the work has interactive user interfaces, each must include a convenient feature that displays the [specified author attributions / reasonable legal notices]. Specifically, if the interface presents a list of user commands or options, such as a menu, a command to display this information must be prominent in the list; otherwise, the work must display this information at startup.\n\nNothing within reason should prevent software modification from changing the name of the menu item or command line switch or substituting a different information display function. The important point is that the display function is prominent in any list, irrespective of how the function actually works.\n\nOf course, nothing should prevent removing code which has optional restrictions attached along with all code derived from that code to avoid optional restrictions.\n\n6. POSSIBLE LANGUAGE CORRECTION.\n\n6.1. CHANGING 'OR' TO 'AND'.\n\nIf the wording of section 7 b changed 'or' to 'and' as \"in source and object code forms\" the problem would be mitigated, but would seem to then add an unnecessary requirement. A modifier might interpret a requirement to add the other form if either source or object form had been included but not both for the attribution or notice when the modifier had received a copy of the code.\n\n6.2. DROPPING THE PROBLEMATIC PHRASE.\n\nDropping the problematic phrase from section 7 b altogether would leave the following in conformity with the related parts of section 7.\n\n\"requiring preservation of specified reasonable legal notices or author attributions of material added by you to a covered work; or\"\n\nIf an inappropriate use risk is considered too troublesome even after my answer above, demonstrating the ease of determining what is inappropriate and the ease of removing the inappropriate parts; then a definition of author attribution and/or reasonable legal notices should be given. I offered the elements of a common understanding of author attribution above along with my assertion that a formal definition was unnecessary."
    }
}