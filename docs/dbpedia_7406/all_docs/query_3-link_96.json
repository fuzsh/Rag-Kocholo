{
    "id": "dbpedia_7406_3",
    "rank": 96,
    "data": {
        "url": "https://aws.amazon.com/ec2/faqs/",
        "read_more_link": "",
        "language": "en",
        "title": "Amazon EC2 FAQs – AWS",
        "top_image": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "meta_img": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "images": [
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_01_Product-Features_SqInk.a8d5666758afc5121b4eb818ae18126031c4b61e.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_02_Sign-Up_SqInk.f43d5ddc9c43883eec6187f34c68155402b13312.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_03_Start-Building_SqInk.6a1ef4429a6604cda9b0857084aa13e2ee4eebca.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Find answers to some of the common questions about Amazon EC2.",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services, Inc.",
        "canonical_link": "https://aws.amazon.com/ec2/faqs/",
        "text": "Q: What is Amazon Elastic Compute Cloud (Amazon EC2)?\n\nAmazon EC2 is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale computing easier for developers.\n\nQ: What can I do with Amazon EC2?\n\nJust as Amazon Simple Storage Service (Amazon S3) enables storage in the cloud, Amazon EC2 enables “compute” in the cloud. The Amazon EC2 simple web service interface allows you to obtain and configure capacity with minimal friction. It provides you with complete control of your computing resources and lets you run on Amazon’s proven computing environment. Amazon EC2 reduces the time required to obtain and boot new server instances to minutes, allowing you to quickly scale capacity, both up and down, as your computing requirements change. Amazon EC2 changes the economics of computing by allowing you to pay only for capacity that you actually use.\n\nQ: How can I get started with Amazon EC2?\n\nTo sign up for Amazon EC2, select the “Sign up for This Web Service” button on the Amazon EC2 detail page. You must have an AWS account to access this service; if you do not already have one, you will be prompted to create one when you begin the Amazon EC2 signup process. After signing up, please refer to the Amazon EC2 documentation, which includes our Getting Started Guide.\n\nQ: Why am I asked to verify my phone number when signing up for Amazon EC2?\n\nAmazon EC2 registration requires you to have a valid phone number and email address on file with AWS in case we ever need to contact you. Verifying your phone number takes only a couple of minutes and involves receiving a phone call during the registration process and entering a PIN using the phone key pad.\n\nQ: What can developers now do that they could not before?\n\nUntil now, small developers did not have the capital to acquire massive compute resources and ensure they had the capacity they needed to handle unexpected spikes in load. Amazon EC2 helps developers use Amazon’s own benefits of massive scale with no upfront investment or performance compromises. Developers are now free to innovate knowing that no matter how successful their businesses become, it will be inexpensive and simple to ensure they have the compute capacity they need to meet their business requirements.\n\nThe “Elastic” nature of the service allows developers to instantly scale to meet spikes in traffic or demand. When computing requirements unexpectedly change (up or down), Amazon EC2 can instantly respond, meaning that developers have the ability to control how many resources are in use at any given point in time. In contrast, traditional hosting services generally provide a fixed number of resources for a fixed amount of time, meaning that users have a limited ability to easily respond when their usage is rapidly changing, unpredictable, or is known to experience large peaks at various intervals.\n\nQ: How do I run systems in the Amazon EC2 environment?\n\nOnce you have set up your account and select or create your AMIs, you are ready to boot your instance. You can start your AMI on any number of On-Demand instances by using the RunInstances API call. You simply need to indicate how many instances you wish to launch. If you wish to run more than your On-Demand quota, complete the Amazon EC2 instance request form.\n\nIf Amazon EC2 is able to fulfill your request, RunInstances will return success, and we will start launching your instances. You can check on the status of your instances using the DescribeInstances API call. You can also programmatically terminate any number of your instances using the TerminateInstances API call.\n\nIf you have a running instance using an Amazon EBS boot partition, you can also use the StopInstances API call to release the compute resources but preserve the data on the boot partition. You can use the StartInstances API when you are ready to restart the associated instance with the Amazon EBS boot partition.\n\nIn addition, you have the option to use Spot Instances to reduce your computing costs when you have flexibility in when your applications can run. Read more about Spot Instances for a more detailed explanation on how Spot Instances work.\n\nIf you prefer, you can also perform all these actions from the AWS Management Console or through the command line using our command line tools, which have been implemented with this web service API.\n\nQ: What is the difference between using the local instance store and Amazon Elastic Block Store (Amazon EBS) for the root device?\n\nWhen you launch your Amazon EC2 instances you have the ability to store your root device data on Amazon EBS or the local instance store. By using Amazon EBS, data on the root device will persist independently from the lifetime of the instance. This enables you to stop and restart the instance at a subsequent time, which is similar to shutting down your laptop and restarting it when you need it again.\n\nAlternatively, the local instance store only persists during the life of the instance. This is an inexpensive way to launch instances where data is not stored to the root device. For example, some customers use this option to run large web sites where each instance is a clone to handle web traffic.\n\nQ: How quickly will systems be running?\n\nIt typically takes less than 10 minutes from the issue of the RunInstances call to the point where all requested instances begin their boot sequences. This time depends on a number of factors including: the size of your AMI, the number of instances you are launching, and how recently you have launched that AMI. Images launched for the first time may take slightly longer to boot.\n\nQ: What happens to my data when a system terminates?\n\nThe data stored on a local instance store will persist only as long as that instance is alive. However, data that is stored on an Amazon EBS volume will persist independently of the life of the instance. Therefore, we recommend that you use the local instance store for temporary data and, for data requiring a higher level of durability, we recommend using Amazon EBS volumes or backing up the data to Amazon S3. If you are using an Amazon EBS volume as a root partition, you will need to set the Delete On Terminate flag to \"N\" if you want your Amazon EBS volume to persist outside the life of the instance.\n\nQ: What kind of performance can I expect from Amazon EBS volumes?\n\nAmazon EBS provides four current generation volume types that are divided into two major categories: SSD-backed storage for transactional workloads and HDD-backed storage for throughput intensive workloads. These volume types differ in performance characteristics and price, allowing you to tailor your storage performance and cost to the needs of your applications. For more information, see the Amazon EBS overview. For additional information on performance, see the Amazon EC2 User Guide's EBS Performance section.\n\nQ: What are Throughput Optimized HDD (st1) and Cold HDD (sc1) volume types?\n\nST1 volumes are backed by hard disk drives (HDDs) and are ideal for frequently accessed, throughput intensive workloads with large datasets and large I/O sizes, such as MapReduce, Kafka, log processing, data warehouse, and ETL workloads. These volumes deliver performance in terms of throughput, measured in MB/s, and include the ability to burst up to 250 MB/s per TB, with a baseline throughput of 40 MB/s per TB and a maximum throughput of 500 MB/s per volume. ST1 is designed to deliver the expected throughput performance 99% of the time and has enough I/O credits to support a full-volume scan at the burst rate.\n\nSC1 volumes are backed by HDDs and provide the lowest cost per GB of all EBS volume types. It is ideal for less frequently accessed workloads with large, cold datasets. Similar to st1, sc1 provides a burst model: these volumes can burst up to 80 MB/s per TB, with a baseline throughput of 12 MB/s per TB and a maximum throughput of 250 MB/s per volume. For infrequently accessed data, sc1 provides extremely inexpensive storage. SC1 is designed to deliver the expected throughput performance 99% of the time and has enough I/O credits to support a full-volume scan at the burst rate.\n\nTo maximize the performance of st1 and sc1, we recommend using EBS-optimized EC2 instances.\n\nQ: Which volume type should I choose?\n\nAmazon EBS includes two major categories of storage: SSD-backed storage for transactional workloads (performance depends primarily on IOPS) and HDD-backed storage for throughput workloads (performance depends primarily on throughput, measured in MB/s). SSD-backed volumes are designed for transactional, IOPS-intensive database workloads, boot volumes, and workloads that require high IOPS. SSD-backed volumes include Provisioned IOPS SSD (io1 and io2) and General Purpose SSD (gp2 and gp3). HDD-backed volumes are designed for throughput-intensive and big-data workloads, large I/O sizes, and sequential I/O patterns. HDD-backed volumes include Throughput Optimized HDD (st1) and Cold HDD (sc1). For more information, see the Amazon EBS overview.\n\nQ: Do you support multiple instances accessing a single volume?\n\nYes, you can enable Multi-Attach on an EBS Provisioned IOPS io1 volume to allow a volume to be concurrently attached to up to sixteen Nitro-based EC2 instances within the same Availability Zone. For more information on Amazon EBS Multi-Attach, see the EBS product page.\n\nQ: Will I be able to access my EBS snapshots using the regular Amazon S3 APIs?\n\nNo, EBS snapshots are only available through the Amazon EC2 APIs.\n\nQ: Do volumes need to be un-mounted in order to take a snapshot? Does the snapshot need to complete before the volume can be used again?\n\nNo, snapshots can be done in real time while the volume is attached and in use. However, snapshots only capture data that has been written to your Amazon EBS volume, which might exclude any data that has been locally cached by your application or OS. In order to ensure consistent snapshots on volumes attached to an instance, we recommend cleanly detaching the volume, issuing the snapshot command, and then reattaching the volume. For Amazon EBS volumes that serve as root devices, we recommend shutting down the machine to take a clean snapshot.\n\nQ: Are snapshots versioned? Can I read an older snapshot to do a point-in-time recovery?\n\nEach snapshot is given a unique identifier, and customers can create volumes based on any of their existing snapshots.\n\nQ: What charges apply when using Amazon EBS shared snapshots?\n\nIf you share a snapshot, you won’t be charged when other users make a copy of your snapshot. If you make a copy of another user’s shared volume, you will be charged normal EBS rates.\n\nQ: Can users of my Amazon EBS shared snapshots change any of my data?\n\nUsers who have permission to create volumes based on your shared snapshots will first make a copy of the snapshot into their account. Users can modify their own copies of the data, but the data on your original snapshot and any other volumes created by other users from your original snapshot will remain unmodified.\n\nQ: How can I discover Amazon EBS snapshots that have been shared with me?\n\nYou can find snapshots that have been shared with you by selecting “Private Snapshots” from the viewing dropdown in the Snapshots section of the AWS Management Console. This section will list both snapshots you own and snapshots that have been shared with you.\n\nQ: How can I find what Amazon EBS snapshots are shared globally?\n\nYou can find snapshots that have been shared globally by selecting “Public Snapshots” from the viewing dropdown in the Snapshots section of the AWS Management Console.\n\nQ: Do you offer encryption on Amazon EBS volumes and snapshots?\n\nYes. EBS offers seamless encryption of data volumes and snapshots. EBS encryption better enables you to meet security and encryption compliance requirements.\n\nQ: How can I find a list of Amazon Public Data Sets?\n\nAll information on Public Data Sets is available in our Public Data Sets Resource Center. You can also obtain a listing of Public Data Sets within the AWS Management Console by choosing “Amazon Snapshots” from the viewing dropdown in the Snapshots section.\n\nQ: Where can I learn more about EBS?\n\nSee Amazon EBS FAQ.\n\nQ: Why should I hibernate an instance?\n\nYou can hibernate an instance to get your instance and applications up and running quickly, if they take a long time to bootstrap (e.g. load memory caches). You can start instances, bring them to a desired state and hibernate them. These “pre-warmed” instances can then be resumed to reduce the time it takes for an instance to return to service. Hibernation retains memory state across Stop/Start cycles.\n\nQ: What happens when I hibernate my instance?\n\nWhen you hibernate an instance, data from your EBS root volume and any attached EBS data volumes is persisted. Additionally, contents from the instance’s memory (RAM) are persisted to EBS root volume. When the instance is restarted, it returns to its previous state and reloads the RAM contents.\n\nQ: What is the difference between hibernate and stop?\n\nIn the case of hibernate, your instance gets hibernated and the RAM data persisted. In the case of Stop, your instance gets shut down and RAM is cleared.\n\nIn both the cases, data from your EBS root volume and any attached EBS data volumes is persisted. Your private IP address remains the same, as does your elastic IP address (if applicable). The network layer behavior will be similar to that of EC2 Stop-Start workflow. Stop and hibernate are available for Amazon EBS backed instances only. Local instance storage is not persisted.\n\nQ: How much does it cost to hibernate an instance?\n\nHibernating instances are charged at standard EBS rates for storage. As with a stopped instance, you do not incur instance usage fees while an instance is hibernating.\n\nQ: How can I hibernate an instance?\n\nHibernation needs to be enabled when you launch the instance. Once enabled, you can use the StopInstances API with an additional ‘Hibernate’ parameter to trigger hibernation. You can also do this through the console by selecting your instance, then clicking Actions> Instance State > Stop - Hibernate. For more information on using hibernation, refer to the user guide.\n\nQ: How can I resume a hibernating instance?\n\nYou can resume by calling the StartInstances API as you would for a regular stopped instance. You can also do this through the console by selecting your instance, then clicking Actions > Instance State > Start.\n\nQ: Can I enable hibernation on an existing instance?\n\nNo, you cannot enable hibernation on an existing instance (running or stopped). This needs to be enabled during instance launch.\n\nQ: How can I tell that an instance is hibernated?\n\nYou can tell that an instance is hibernated by looking at the state reason. It should be ‘Client.UserInitiatedHibernate’. This is visible on the console under “Instances - Details” view or in the DescribeInstances API response as the “reason” field.\n\nQ: What is the state of an instance when it is hibernating?\n\nHibernated instances are in ‘Stopped’ state.\n\nQ: What data is saved when I hibernate an instance?\n\nEBS volume storage (boot volume and attached data volumes) and memory (RAM) are saved. Your private IP address remains the same (for VPC), as does your elastic IP address (if applicable). The network layer behavior will be similar to that of EC2 Stop-Start workflow.\n\nQ: Where is my data stored when I hibernate an instance?\n\nAs with the Stop feature, root device and attached device data are stored on the corresponding EBS volumes. Memory (RAM) contents are stored on the EBS root volume.\n\nQ: Is my memory (RAM) data encrypted when it is moved to EBS?\n\nYes, RAM data is always encrypted when it is moved to the EBS root volume. Encryption on the EBS root volume is enforced at instance launch time. This is to ensure protection for any sensitive content that is in memory at the time of hibernation.\n\nQ: How long can I keep my instance hibernated?\n\nWe do not support keeping an instance hibernated for more than 60 days. You need to resume the instance and go through Stop and Start (without hibernation) if you wish to keep the instance around for a longer duration. We are constantly working to keep our platform up-to-date with upgrades and security patches, some of which can conflict with the old hibernated instances. We will notify you for critical updates that require you to resume the hibernated instance to perform a shutdown or a reboot.\n\nQ: What are the prerequisites to hibernate an instance?\n\nTo use hibernation, the root volume must be an encrypted EBS volume. The instance needs to be configured to receive the ACPID signal for hibernation (or use the Amazon published AMIs that are configured for hibernation). Additionally, your instance should have sufficient space available on your EBS root volume to write data from memory.\n\nQ: Which instances and operating systems support hibernation?\n\nFor instances running Amazon Linux, Amazon Linux 2, Ubuntu, and Windows, Hibernation is supported across C3, C4, C5, C5d, I3, M3, M4, M5, M5a, M5ad, M5d, R3, R4, R5, R5a, R5ad, R5d, T2, T3, and T3a instances.\n\nFor instances running CentOS, Fedora, and Red Hat Enterprise Linux, Hibernation is supported across C5, C5d, M5, M5a, M5ad, M5d, R5, R5a, R5ad, R5d, T3, and T3a instances.\n\nFor Windows, Hibernation is supported for instances up to 16 GB of RAM. For other operating systems, Hibernation is supported for instances with less than 150 GB of RAM. To review the list of supported OS versions and instance types, refer to the user guide.\n\nQ: Should I use specific Amazon Machine Image (AMIs) if I want to hibernate my instance?\n\nYou can use any AMI that is configured to support hibernation. You can use AWS published AMIs that support hibernation by default. Alternatively, you can create a custom image from an instance after following the hibernation pre-requisite checklist and configuring your instance appropriately.\n\nQ: What if my EBS root volume is not large enough to store memory state (RAM) for hibernation?\n\nTo enable hibernation, space is allocated on the root volume to store the instance memory (RAM). Make sure that the root volume is large enough to store the RAM contents and accommodate your expected usage, e.g. OS, applications. If the EBS root volume does not have enough space, hibernation will fail and the instance will get shut down instead.\n\nQ: What operating systems are supported?\n\nVM Import/Export currently supports Windows and Linux VMs, including multiple editions of Windows Server, Red Hat Enterprise Linux (RHEL), CentOS, Ubuntu, Debian and others. For more details on VM Import, including supported file formats, architectures, and operating system configurations, please see the VM Import/Export section of the VM Import/Export.\n\nQ: What VM file formats are supported?\n\nYou can import VMware ESX VMDK images, Citrix Xen VHD images, Microsoft Hyper-V VHD images and RAW images as Amazon EC2 instances. You can export EC2 instances to VMware ESX VMDK, VMware ESX OVA, Microsoft Hyper-V VHD or Citrix Xen VHD images. For a full list of supported operating systems, please see What operating systems are supported?\n\nQ: What is VMDK?\n\nVMDK is a file format that specifies a virtual machine hard disk encapsulated within a single file. It is typically used by virtual IT infrastructures such as those sold by VMware, Inc.\n\nQ: How do I prepare a VMDK file for import using the VMware vSphere client?\n\nThe VMDK file can be prepared by calling File-Export-Export to OVF template in VMware vSphere Client. The resulting VMDK file is compressed to reduce the image size and is compatible with VM Import/Export. No special preparation is required if you are using the Amazon EC2 VM Import Connector vApp for VMware vCenter.\n\nQ: What is VHD?\n\nVHD (Virtual Hard Disk) is a file format that specifies a virtual machine hard disk encapsulated within a single file. The VHD image format is used by virtualization platforms such as Microsoft Hyper-V and Citrix Xen.\n\nQ: How do I prepare a VHD file for import from Citrix Xen?\n\nOpen Citrix XenCenter and select the virtual machine you want to export. Under the Tools menu, choose \"Virtual Appliance Tools\" and select \"Export Appliance\" to initiate the export task. When the export completes, you can locate the VHD image file in the destination directory you specified in the export dialog.\n\nQ: How do I prepare a VHD file for import from Microsoft Hyper-V?\n\nOpen the Hyper-V Manager and select the virtual machine you want to export. In the Actions pane for the virtual machine, select \"Export\" to initiate the export task. Once the export completes, you can locate the VHD image file in the destination directory you specified in the export dialog.\n\nQ: Are there any other requirements when importing a VM into Amazon EC2?\n\nThe virtual machine must be in a stopped state before generating the VMDK or VHD image. The VM cannot be in a paused or suspended state. We suggest that you export the virtual machine with only the boot volume attached. You can import additional disks using the ImportVolume command and attach them to the virtual machine using AttachVolume. Additionally, encrypted disks (e.g. Bit Locker) and encrypted image files are not supported. You are also responsible for ensuring that you have all necessary rights and licenses to import into AWS and run any software included in your VM image.\n\nQ: Does the virtual machine need to be configured in any particular manner to enable import to Amazon EC2?\n\nEnsure Remote Desktop (RDP) or Secure Shell (SSH) is enabled for remote access and verify that your host firewall (Windows firewall, iptables, or similar), if configured, allows access to RDP or SSH. Otherwise, you will not be able to access your instance after the import is complete. Please also ensure that Windows VMs are configured to use strong passwords for all users including the administrator and that Linux VMs are configured with a public key for SSH access.\n\nQ: How do I import a virtual machine to an Amazon EC2 instance?\n\nYou can import your VM images using the Amazon EC2 API tools:\n\nImport the VMDK, VHD or RAW file via the ec2-import-instance API. The import instance task captures the parameters necessary to properly configure the Amazon EC2 instance properties (instance size, Availability Zone, and security groups) and uploads the disk image into Amazon S3.\n\nIf ec2-import-instance is interrupted or terminates without completing the upload, use ec2-resume-import to resume the upload. The import task will resume where it left off.\n\nUse the ec2-describe-conversion-tasks command to monitor the import progress and obtain the resulting Amazon EC2 instance ID.\n\nOnce your import task is completed, you can boot the Amazon EC2 instance by specifying its instance ID to the ec2-run-instances API.\n\nFinally, use the ec2-delete-disk-image command line tool to delete your disk image from Amazon S3 as it is no longer needed.\n\nAlternatively, if you use the VMware vSphere virtualization platform, you can import your virtual machine to Amazon EC2 using a graphical user interface provided through AWS Management Portal for vCenter. Please refer to the Getting Started Guide in AWS Management Portal for vCenter. AWS Management Portal for vCenter includes integrated support for VM Import. Once the portal is installed within vCenter, you can right-click on a VM and select “Migrate to EC2” to create an EC2 instance from the VM. The portal will handle exporting the VM from vCenter, uploading it to S3, and converting it into an EC2 instance for you, with no additional work required. You can also track the progress of your VM migrations within the portal.\n\nQ: How do I export an Amazon EC2 instance back to my on-premise virtualization environment?\n\nYou can export your Amazon EC2 instance using the Amazon EC2 CLI tools:\n\nExport the instance using the ec2-create-instance-export-task command. The export command captures the parameters necessary (instance ID, S3 bucket to hold the exported image, name of the exported image, VMDK, OVA or VHD format) to properly export the instance to your chosen format. The exported file is saved in an S3 bucket that you previously created.\n\nUse ec2-describe-export-tasks to monitor the export progress.\n\nUse ec2-cancel-export-task to cancel an export task prior to completion.\n\nQ: Are there any other requirements when exporting an EC2 instance using VM Import/Export?\n\nYou can export running or stopped EC2 instances that you previously imported using VM Import/Export. If the instance is running, it will be momentarily stopped to snapshot the boot volume. EBS data volumes cannot be exported. EC2 instances with more than one network interface cannot be exported.\n\nQ: Can I export Amazon EC2 instances that have one or more EBS data volumes attached?\n\nYes, but VM Import/Export will only export the boot volume of the EC2 instance.\n\nQ: What does it cost to import a virtual machine?\n\nYou will be charged standard Amazon S3 data transfer and storage fees for uploading and storing your VM image file. Once your VM is imported, standard Amazon EC2 instance hour and EBS service fees apply. If you no longer wish to store your VM image file in S3 after the import process completes, use the ec2-delete-disk-image command line tool to delete your disk image from Amazon S3.\n\nQ: What does it cost to export a VM?\n\nYou will be charged standard Amazon S3 storage fees for storing your exported VM image file. You will also be charged standard S3 data transfer charges when you download the exported VM file to your on-premise virtualization environment. Finally, you will be charged standard EBS charges for storing a temporary snapshot of your EC2 instance. To minimize storage charges, delete the VM image file in S3 after downloading it to your virtualization environment.\n\nQ: When I import a VM of Windows Server 2003 or 2008, who is responsible for supplying the operating system license?\n\nWhen you launch an imported VM using Microsoft Windows Server 2003 or 2008, you will be charged standard instance hour rates for Amazon EC2 running the appropriate Windows Server version, which includes the right to utilize that operating system within Amazon EC2. You are responsible for ensuring that all other installed software is properly licensed.\n\nSo then, what happens to my on-premise Microsoft Windows license key when I import a VM of Windows Server 2003 or 2008? Since your on-premise Microsoft Windows license key that was associated with that VM is not used when running your imported VM as an EC2 instance, you can reuse it for another VM within your on-premise environment.\n\nQ: Can I continue to use the AWS provided Microsoft Windows license key after exporting an EC2 instance back to my on-premises virtualization environment?\n\nNo. After an EC2 instance has been exported, the license key utilized in the EC2 instance is no longer available. You will need to reactivate and specify a new license key for the exported VM after it is launched in your on-premises virtualization platform.\n\nQ: When I import a VM with Red Hat Enterprise Linux (RHEL), who is responsible for supplying the operating system license?\n\nWhen you import Red Hat Enterprise Linux (RHEL) VM images, you can use license portability for your RHEL instances. With license portability, you are responsible for maintaining the RHEL licenses for imported instances, which you can do using Cloud Access subscriptions for Red Hat Enterprise Linux. Please contact Red Hat to learn more about Cloud Access and to verify your eligibility.\n\nQ: How long does it take to import a virtual machine?\n\nThe length of time to import a virtual machine depends on the size of the disk image and your network connection speed. As an example, a 10 GB Windows Server 2008 SP2 VMDK image takes approximately 2 hours to import when it’s transferred over a 10 Mbps network connection. If you have a slower network connection or a large disk to upload, your import may take significantly longer.\n\nQ: In which Amazon EC2 Regions can I use VM Import/Export?\n\nVisit the Region Table page to see product service availability by Region.\n\nQ: How many simultaneous import or export tasks can I have?\n\nEach account can have up to five active import tasks and five export tasks per region.\n\nQ: Can I run imported virtual machines in Amazon Virtual Private Cloud (Amazon VPC)?\n\nYes, you can launch imported virtual machines within Amazon VPC.\n\nQ: Can I use the AWS Management Console with VM Import/Export?\n\nNo. VM Import/Export commands are available via EC2 CLI and API. You can also use the AWS Management Portal for vCenter to import VMs into Amazon EC2. Once imported, the resulting instances are available for use via the AWS Management Console.\n\nQ: What is a Convertible RI?\n\nA Convertible RI is a type of Reserved Instance with attributes that can be changed during the term.\n\nQ: When should I purchase a Convertible RI instead of a Standard RI?\n\nThe Convertible RI is useful for customers who can commit to using EC2 instances for a three-year term in exchange for a significant discount on their EC2 usage, are uncertain about their instance needs in the future, or want to benefit from changes in price.\n\nQ: What term length options are available on Convertible RIs?\n\nLike Standard RIs, Convertible RIs are available for purchase for a one-year or three-year term.\n\nQ: Can I exchange my Convertible RI to benefit from a Convertible RI matching a different instance type, operating system, tenancy, or payment option?\n\nYes, you can select a new instance type, operating system, tenancy, or payment option when you exchange your Convertible RIs. You also have the flexibility to exchange a portion of your Convertible RI or merge the value of multiple Convertible RIs in a single exchange.\n\nQ: Can I transfer a Convertible or Standard RI from one region to another?\n\nNo, an RI is associated with a specific region, which is fixed for the duration of the reservation's term.\n\nQ: How do I change the configuration of a Convertible RI?\n\nYou can change the configuration of your Convertible RI using the EC2 Management Console or the GetReservedInstancesExchangeQuote API. You also have the flexibility to exchange a portion of your Convertible RI or merge the value of multiple Convertible RIs in a single exchange. Click here to learn more about exchanging Convertible RIs.\n\nQ: Do I need to pay a fee when I exchange my Convertible RIs?\n\nNo, you do not pay a fee when you exchange your RIs. However you may need to pay a one-time true-up charge that accounts for differences in pricing between the Convertible RIs that you have and the Convertible RIs that you want.\n\nQ: How do Convertible RI exchanges work?\n\nWhen you exchange one Convertible RI for another, EC2 ensures that the total value of the Convertible RIs is maintained through a conversion. So, if you are converting your RI with a total value of $1000 for another RI, you will receive a quantity of Convertible RIs with a value that’s equal to or greater than $1000. You cannot convert your Convertible RI for Convertible RI(s) of a lesser total value.\n\nQ: Can you define total value?\n\nThe total value is the sum of all expected payments that you’d make during the term for the RI.\n\nQ: Can you walk me through how the true-up cost is calculated for a conversion between two All Upfront Convertible RIs?\n\nSure, let’s say you purchased an All Upfront Convertible RI for $1000 upfront, and halfway through the term you decide to change the attributes of the RI. Since you’re halfway through the RI term, you have $500 left of prorated value remaining on the RI. The All Upfront Convertible RI that you want to convert into costs $1,200 upfront today. Since you only have half of the term left on your existing Convertible RI, there is $600 of value remaining on the desired new Convertible RI. The true-up charge that you’ll pay will be the difference in upfront value between original and desired Convertible RIs, or $100 ($600 - $500).\n\nQ: Can you walk me through a conversion between No Upfront Convertible RIs?\n\nUnlike conversions between Convertible RIs with an upfront value, since you’re converting between RIs without an upfront cost, there will not be a true-up charge. However, the amount you pay on an hourly basis before the exchange will need to be greater than or equal to the amount you pay on a total hourly basis after the exchange.\n\nFor example, let’s say you purchased one No Upfront Convertible RI (A) with a $0.10/hr rate, and you decide to exchange Convertible RI A for another RI (B) that costs $0.06/hr. When you convert, you will receive two RIs of B because the amount that you pay on an hourly basis must be greater than or equal to the amount you’re paying for A on an hourly basis.\n\nQ: Can I customize the number of instances that I receive as a result of a Convertible RI exchange?\n\nNo, EC2 uses the value of the Convertible RIs you’re trading in to calculate the minimal number of Convertible RIs you’ll receive while ensuring the result of the exchange gives you Convertible RIs of equal or greater value.\n\nQ: Are there exchange limits for Convertible RIs?\n\nNo, there are no exchange limits for Convertible RIs.\n\nQ: Do I have the freedom to choose any instance type when I exchange my Convertible RIs?\n\nNo, you can only exchange into Convertible RIs that are currently offered by AWS.\n\nQ: Can I upgrade the payment option associated with my Convertible RI?\n\nYes, you can upgrade the payment option associated with your RI. For example, you can exchange your No Upfront RIs for Partial or All Upfront RIs to benefit from better pricing. You cannot change the payment option from All Upfront to No Upfront, and cannot change from Partial Upfront to No Upfront.\n\nQ: Do Convertible RIs allow me to benefit from price reductions when they happen?\n\nYes, you can exchange your RIs to benefit from lower pricing. For example, if the price of new Convertible RIs reduces by 10%, you can exchange your Convertible RIs and benefit from the 10% reduction in price.\n\nAn On-Demand Capacity Reservation is an EC2 offering that you can use to create and manage reserved capacity on EC2. You can create an On-Demand Capacity Reservation by choosing an Availability Zone (AZ) and quantity (number of instances) along with other instance specifications such as instance type and tenancy. Once created, the EC2 capacity is held for you regardless of whether you run the instances or not.\n\nQ: How much do On-Demand Capacity Reservations cost?\n\nWhen the On-Demand Capacity Reservation is active, you will pay equivalent instance charges whether you run the instances or not. If you do not use the reservation, the charge will show up as an unused reservation on your EC2 bill. When you run an instance that matches the attributes of a reservation, you just pay for the instance and nothing for the reservation. There are no upfront or additional charges.\n\nFor example, if you create an On-Demand Capacity Reservation for 20 c5.2xlarge instances and you run 15 c5.2xlarge instances, you will be charged for 15 instances and five unused instances in the reservation (effectively charged for 20 instances).\n\nQ: Can I get a discount for On-Demand Capacity Reservation usage?\n\nYes. Savings Plans or Regional RI (RI scoped to a Region) discounts apply to On-Demand Capacity Reservations. When you are running an instance within your reservation, you are not charged for the reservation. Savings Plans or Regional RIs will apply to this usage as if it were On-Demand usage. When the reservation is not used, AWS Billing will automatically apply your discount when the attributes of the unused On-Demand Capacity Reservation match the attributes of an active Savings Plan or Regional RI.\n\nFor example, if you have a Regional RI for 10 c5.2xlarge instances and an unused On-Demand Capacity Reservation for 10 c5.2xlarge instances in the same Region, the RI discount will apply to all 10 instances on the reservation. Note that we apply Regional RI discounts preferentially to running instance usage before covering unused On-Demand Capacity Reservations. Meaning, if you have any other C5 instances running in the Region, we will apply the Regional RI first to those instances, and then we will apply the remaining discount to the unused On-Demand Capacity Reservation.\n\nNote: A Regional RI is an EC2 RI scoped to an AWS Region. Zonal RIs (RIs scoped to an AZ within a Region) discounts do not apply to On-Demand Capacity Reservations, as Zonal RIs already come with a capacity reservation.\n\nQ: When should I use Savings Plans, EC2 RIs, and On-Demand Capacity Reservations?\n\nUse Savings Plans or Regional RIs to reduce your bill while committing to a one- or three-year term. Savings Plans offer significant savings over On-Demand, just like EC2 RIs, but automatically reduce customers’ bills on compute usage across any AWS Region, even as usage changes. Use On-Demand Capacity Reservations if you need the additional confidence in your ability to launch instances. On-Demand Capacity Reservations can be created for any duration and can be managed independently of your Savings Plans or RIs. If you have Savings Plans or Regional RIs, they will automatically apply to matching On-Demand Capacity Reservations. This gives you the flexibility to selectively add On-Demand Capacity Reservations to a portion of your instance footprint and still reduce your bill for that usage.\n\nQ: I have a Zonal RI (RI scoped to an AZ) that also provides a capacity reservation. How does this compare with an On-Demand Capacity Reservation?\n\nA Zonal RI provides both a discount and a capacity reservation in a specific AZ in return for a one- to three-year commitment. An On-Demand Capacity Reservation allows you to create and manage reserved capacity independently of your RI commitment and term length.\n\nYou can use On-Demand Capacity Reservations with a Savings Plan or a Regional RI to get, at the minimum, all the benefits of a Zonal RI for no additional cost. You also get the enhanced flexibility of a Savings Plan (or Regional RI) and the features of an On-Demand Capacity Reservation: the ability to add or subtract from the reservation at any time, view reservation utilization in real time, and the ability to target an On-Demand Capacity Reservation for specific workloads.\n\nRescoping your Zonal RIs to a Region immediately gives you the AZ and instance-size flexibility in how RI discounts are applied. You can convert your Standard Zonal RIs to a Regional RI by modifying the scope of the RI from a specific AZ to a Region using the EC2 console or the ModifyReservedInstances API.\n\nQ: I created an On-Demand Capacity Reservation. How can I use it?\n\nAn On-Demand Capacity Reservation is tied to a specific AZ and is, by default, automatically used by running instances in that AZ. When you launch new instances that match the reservation attributes, they will automatically match to the reservation.\n\nYou can also target a reservation for specific workloads/instances if you prefer. Refer to Linux or Windows technical documentation to learn more about the targeting option.\n\nQ: How many instances am I allowed to reserve?\n\nThe number of instances that you are allowed to reserve is based on your account's On-Demand instance limit. You can reserve as many instances as that limit allows, minus the number of instances that are already running.\n\nIf you need a higher limit, contact your AWS sales representative or complete the Amazon EC2 instance request form with your use case and your instance increase will be considered. Limit increases are tied to the region they are requested for.\n\nQ: Can I modify an On-Demand Capacity Reservation after it has started?\n\nYes. You can reduce the number of instances that you reserved at any time. You can also increase the number of instances (subject to availability). You can also modify the end time of your reservation. You cannot modify an On-Demand Capacity Reservation that has ended or has been deleted.\n\nQ: Can I end an On-Demand Capacity Reservation after it has started?\n\nYes. You can end an On-Demand Capacity Reservation by canceling it using the console or API/SDK, or by modifying your reservation to specify an end time that makes it expire automatically. Running instances are unaffected by changes to your On-Demand Capacity Reservation, including deletion or expiration of a reservation.\n\nQ: Where can I find more information about using On-Demand Capacity Reservations?\n\nRefer to Linux or Windows technical documentation to learn about creating and using an On-Demand Capacity Reservation.\n\nQ: Can I share an On-Demand Capacity Reservation with another AWS account?\n\nYes, you can share On-Demand Capacity Reservations with other AWS accounts or within your AWS Organization through AWS Resource Access Manager (AWS RAM). You can share EC2 On-Demand Capacity Reservations in three easy steps: Create a Resource Share using AWS RAM, add resources (On-Demand Capacity Reservations) to the Resource Share, and specify the target accounts that you wish to share the resources with.\n\nNote that sharing of an On-Demand Capacity Reservation is not available to new AWS accounts or AWS accounts that have a limited billing history. New accounts that are linked to a qualified primary (payer) account or through an AWS Organization are exempt from this restriction.\n\nQ: What happens when I share an On-Demand Capacity Reservation with another AWS account?\n\nWhen an On-Demand Capacity Reservation is shared with other accounts, those accounts can consume the reserved capacity to run their EC2 instances. The exact behavior depends on the preferences set on the On-Demand Capacity Reservation. By default, On-Demand Capacity Reservations automatically match existing and new instances from other accounts that have shared access to the reservation. You can also target an On-Demand Capacity Reservation for specific workloads/instances. Individual accounts can control which of their instances consume On-Demand Capacity Reservations. Refer to Linux or Windows technical documentation to learn more about the instance matching options.\n\nQ: Is there an additional charge for sharing a reservation?\n\nNo, there is no additional charge for sharing a reservation.\n\nQ: Who gets charged when an On-Demand Capacity Reservation is shared across multiple accounts?\n\nIf multiple accounts are consuming an On-Demand Capacity Reservation, each account gets charged for its own instance usage. Unused reserved capacity, if any, gets charged to the account that owns the On-Demand Capacity Reservation. If there is a consolidated billing arrangement among the accounts that share an On-Demand Capacity Reservation, the primary account gets billed for instance usage across all the linked accounts.\n\nQ: Can I prioritize access to an On-Demand Capacity Reservation among the AWS accounts that have shared access?\n\nNo. Instance spots in an On-Demand Capacity Reservation are available on a first-come, first-served basis to any account that has shared access.\n\nQ: How can I communicate the AZ of an On-Demand Capacity Reservation with another account, given AZ name mappings could be different across AWS accounts?\n\nYou can now use an Availability Zone ID (AZ ID) instead of an AZ name. An AZ ID is a static reference and provides a consistent way of identifying the location of a resource across all your accounts. This makes it easier for you to provision resources centrally in a single account and share them across multiple accounts.\n\nQ: Can I stop sharing my On-Demand Capacity Reservation once I have shared it?\n\nYes, you can stop sharing a reservation after you have shared it. When you stop sharing an On-Demand Capacity Reservation with specific accounts or stop sharing entirely, other accounts lose the ability to launch new instances into the On-Demand Capacity Reservation. Any capacity occupied by instances running from other accounts will be restored to the On-Demand Capacity Reservation for your use (subject to availability).\n\nQ: Where can I find more information about sharing On-Demand Capacity Reservations?\n\nRefer to Linux or Windows technical documentation to learn about sharing On-Demand Capacity Reservations.\n\nQ: Can I get a discount for On-Demand Capacity Reservation usage?\n\nYes. Savings Plans or Regional RI discounts apply to On-Demand Capacity Reservations. AWS Billing automatically applies the discount when the attributes of an On-Demand Capacity Reservation match the attributes of a Savings Plan or Regional RI. When an On-Demand Capacity Reservation is used by an instance, you are only charged for the instance (with Savings Plan or RI discounts applied). Discounts are preferentially applied to instance usage before covering unused On-Demand Capacity Reservations.\n\nNote: A Regional RI is an EC2 RI scoped to an AWS Region. Zonal RI (RIs scoped to an AZ within a Region) discounts do not apply to On-Demand Capacity Reservations, as Zonal RIs already come with a capacity reservation.\n\nQ: What is the Reserved Instance (RI) Marketplace?\n\nThe RI Marketplace is an online marketplace that provides AWS customers the flexibility to sell their Amazon EC2 RIs to other businesses and organizations. Customers can also browse the RI Marketplace to find an even wider selection of RI term lengths and pricing options sold by other AWS customers.\n\nQ: When can I list an RI on the RI Marketplace?\n\nYou can list an RI when:\n\nYou've registered as a seller in the RI Marketplace.\n\nYou've paid for your RI.\n\nYou've owned the RI for longer than 30 days.\n\nQ: Can RIs be transferred?\n\nEC2 Reserved Instances are only transferrable in accordance with the requirements of the RI Marketplace provided in AWS Service Terms and cannot otherwise be transferred.\n\nQ: Can I sell any RI on the EC2 RI Marketplace?\n\nNo, AWS prohibits the resale of RIs purchased as part of a discount program per AWS Service Terms. Any All Upfront, Partial Upfront, or No Unfront RIs that were purchased directly from AWS or from EC2 RI Marketplace that received a discount from AWS (for example, RI Volume Discount or other discount programs) are not eligible for sale on the EC2 RI Marketplace.\n\nQ: How will I register as a seller for the RI Marketplace?\n\nTo register for the RI Marketplace, you can enter the registration workflow by selling an RI from the EC2 Management Console or setting up your profile from the \"Account Settings\" page on the AWS portal. No matter the route, you will need to complete the following steps:\n\nStart by reviewing the overview of the registration process.\n\nLog in to your AWS Account.\n\nEnter in the bank account into which you want us to disburse funds. Once you select \"Continue,\" we will set that bank account as the default disbursement option.\n\nIn the confirmation screen, choose \"Continue to Console to Start Listing.\"\n\nIf you exceed $20,000 in sales of RI, or plan to sell 50 or more RIs, you will need to provide tax information before you can list your RIs. Choose \"Continue with Tax Interview.\" During the tax interview pipeline, you will be prompted to enter your company name, contact name, address, and Tax Identification Number using the TIMS workflow.\n\nAdditionally, if you plan to sell RIs worth more than $50,000 per year you will also need to file a limit increase.\n\nQ: How will I know when I can start selling on the RI Marketplace?\n\nYou can start selling on the RI Marketplace after you have added a bank account through the registration pipeline. Once activation is complete, you will receive a confirmation email. However, it is important to note that you will not be able to receive disbursements until we are able to receive verification from your bank, which may take up to two weeks, depending on the bank you use.\n\nQ: How do I list an RI for sale?\n\nTo list an RI, simply complete these steps in the Amazon EC2 console:\n\nSelect the RIs that you wish to sell, and choose \"Sell Reserved Instances.\" If you have not completed the registration process, you will be prompted to register using the registration pipeline.\n\nFor each RI type, set the number of instances you’d like to sell, and the price for the one-time fee you would like to set. Note that you can set the one-time price to different amounts depending on the amount of time remaining so that you don’t have to keep adjusting your one-time price if your RI doesn’t sell quickly. By default you just need to set the current price and we will automatically decrease the one-time price by the same increment each month.\n\nOnce you have configured your listing, a final confirmation screen will appear. Choose \"Sell Reserved Instance.\"\n\nQ: Which RIs can I list for sale?\n\nYou can list any RIs that have been active for at least 30 days, and for which we have received payment. Typically, this means that you can list your reservations once they are in the active state. It is important to note that if you are an invoice customer, your RI can be in the active state prior to AWS receiving payment. In this case, your RI will not be listed until we have received your payment.\n\nQ: How are listed RIs displayed to buyers?\n\nRIs (both third-party and those offered by AWS) that have been listed on the RI Marketplace can be viewed in the \"Reserved Instances\" section of the Amazon EC2 console. You can also use the DescribeReservedInstancesListings API call.\n\nThe listed RIs are grouped based on the type, term remaining, upfront price, and hourly price. This makes it easier for buyers to find the right RIs to purchase.\n\nQ: How much of my RI term can I list?\n\nYou can sell an RI for the term remaining, rounded down to the nearest month. For example, if you had 9 months and 13 days remaining, you will list it for sale as a 9-month-term RI.\n\nQ: Can I remove my RI after I’ve listed it for sale?\n\nYes, you can remove your RI listings at any point until a sale is pending (meaning a buyer has bought your RI and confirmation of payment is pending).\n\nQ: Which pricing dimensions can I set for the RIs that I want to list?\n\nUsing the RI Marketplace, you can set an upfront price you’d be willing to accept. You cannot set the hourly price (which will remain the same as was set on the original RI), and you will not receive any funds collected from payments associated with the hourly prices.\n\nQ: Can I still use my reservation while it is listed on the RI Marketplace?\n\nYes, you will continue to receive the capacity and billing benefit of your reservation until it is sold. Once sold, any running instance that was being charged at the discounted rate will be charged at the On-Demand rate until and unless you purchase a new reservation, or terminate the instance.\n\nQ: Can I resell an RI that I purchased from the RI Marketplace?\n\nYes, you can resell RIs purchased from the RI Marketplace just like any other RI.\n\nQ. Are there any restrictions when selling RIs?\n\nYes, you must have a US bank account to sell RIs in the RI Marketplace. Support for non-US bank accounts will be coming soon. Also, you may not sell RIs in the US GovCloud Region.\n\nQ: Can I sell RIs purchased from the public volume pricing tiers?\n\nNo, this capability is not yet available.\n\nQ: Is there a charge for selling RIs in the RI Marketplace?\n\nYes, AWS charges a service fee of 12% of the total upfront price of each RI that you sell in the RI Marketplace.\n\nQ: Can AWS sell subsets of my listed RIs?\n\nYes, AWS may potentially sell a subset of the quantity of RIs that you have listed. For example, if you list 100 RIs, we may only have a buyer interested in purchasing 50 of them. We will sell those 50 instances and continue to list your remaining 50 RIs until and unless you decide not to list them any longer.\n\nQ: How do buyers pay for RIs that they've purchased?\n\nPayment for completed RI sales are done via ACH wire transfers to a US bank account.\n\nQ: When will I receive my money?\n\nOnce AWS has received funds from the customer that has bought your reservation, we will disburse funds via wire transfer to the bank account you specified when you registered for the RI Marketplace.\n\nThen, we will send you an email notification letting you know that we’ve wired you the funds. Typically, funds will appear in your account within 3-5 days of when your RI was sold.\n\nQ: If I sell my RI in the RI Marketplace, will I get refunded for the Premium Support I was charged, too?\n\nNo, you will not receive a prorated refund for the upfront portion of the AWS Premium Support Fee.\n\nQ: Will I be notified about RI Marketplace activities?\n\nYes, you will receive a single email once a day that details your RI Marketplace activity whenever you create or cancel RI listings, buyers purchase your listings, or AWS disburses funds to your bank account.\n\nQ: What information is exchanged between the buyer and seller to help with the transaction tax calculation?\n\nThe buyer’s city, state, zip+4, and country information will be provided to the seller via a disbursement report. This information will enable sellers to calculate any necessary transaction taxes they need to remit to the government (e.g., sales tax, value-added tax, etc.). The legal entity name of the seller will also be provided on the purchase invoice.\n\nQ: Are there any restrictions on the customers when purchasing third-party RIs?\n\nYes, you cannot purchase your own listed RIs, including those in any of your linked accounts (via Consolidated Billing).\n\nQ: Do I have to pay for Premium Support when purchasing RIs from the RI Marketplace?\n\nYes, if you are a Premium Support customer, you will be charged for Premium Support when you purchase an RI through the RI Marketplace.\n\nQ. What is a Spot Instance?\n\nSpot Instances are spare EC2 capacity that can save you up to 90% off of On-Demand prices that AWS can interrupt with a 2-minute notification. Spot uses the same underlying EC2 instances as On-Demand and Reserved Instances, and is best suited for fault-tolerant, flexible workloads. Spot Instances provides an additional option for obtaining compute capacity and can be used along with On-Demand and Reserved Instances.\n\nQ. How is a Spot Instance different than an On-Demand instance or Reserved Instance?\n\nWhile running, Spot Instances are exactly the same as On-Demand or Reserved instances. The main differences are that Spot Instances typically offer a significant discount off the On-Demand prices, your instances can be interrupted by Amazon EC2 for capacity requirements with a 2-minute notification, and Spot prices adjust gradually based on long term supply and demand for spare EC2 capacity.\n\nSee here for more details on Spot Instances.\n\nQ. How do I purchase and start up a Spot instance?\n\nSpot instances can be launched using the same tools you use to launch instances today, including AWS Management Console, Auto-Scaling Groups, Run Instances and Spot Fleet. In addition many AWS services support launching Spot instances such as EMR, ECS, Datapipeline, CloudFormation and Batch.\n\nTo start up a Spot Instance, you simply need to choose a Launch Template and the number of instances you would like to request.\n\nSee here for more details on how to request Spot Instances.\n\nQ. How many Spot Instances can I request?\n\nYou can request Spot Instances up to your Spot limit for each region. Note that customers new to AWS might start with a lower limit. To learn more about Spot Instance limits, please refer to the Amazon EC2 User Guide.\n\nIf you would like a higher limit, complete the Amazon EC2 instance request form with your use case and your instance increase will be considered. Limit increases are tied to the region they were requested for.\n\nQ. What price will I pay for a Spot Instance?\n\nYou pay the Spot price that’s in effect at the beginning of each instance-hour for your running instance. If Spot price changes after you launch the instance, the new price is charged against the instance usage for the subsequent hour.\n\nQ. What is a Spot capacity pool?\n\nA Spot capacity pool is a set of unused EC2 instances with the same instance type, operating system, and Availability Zone. Each spot capacity pool can have a different price based on supply and demand.\n\nQ. What are the best practices to use Spot Instances?\n\nWe highly recommend using multiple Spot capacity pools to maximize the amount of Spot capacity available to you. EC2 provides built-in automation to find the most cost-effective capacity across multiple Spot capacity pools using EC2 Auto Scaling, EC2 Fleet or Spot Fleet. For more information, please see Spot Best Practices.\n\nQ. How can I determine the status of my Spot request?\n\nYou can determine the status of your Spot request via Spot Request Status code and message. You can access Spot Request Status information on the Spot Instance page of the EC2 console of the AWS Management Console, API and CLI. For more information, please visit the Amazon EC2 Developer guide.\n\nQ. Are Spot Instances available for all instance families and sizes and in all regions?\n\nSpot Instances are available in all public AWS regions. Spot is available for nearly all EC2 instance families and sizes, including the newest compute-optimized instances, accelerated graphics, and FPGA instance types. A full list of instance types supported in each region is listed here.\n\nQ. Which operating systems are available as Spot Instances?\n\nLinux/UNIX, Windows Server and Red Hat Enterprise Linux (RHEL) are available. Windows Server with SQL Server is not currently available.\n\nQ. Can I use a Spot Instance with a paid AMI for third-party software (such as IBM’s software packages)?\n\nNot at this time.\n\nQ. Can I stop my running Spot Instances?\n\nYes, you can “stop” your running Spot Instances when they are not needed and keep these stopped instances for later use, instead of terminating instances or cancelling the Spot request. Stop is available for persistent Spot requests.\n\nQ. How can I stop the Spot Instances?\n\nYou can stop your Spot Instances by calling the StopInstances API and providing Instance Ids of the Spot Instances similar to stopping your On-Demand Instances. You can also do this through the AWS Management Console by selecting your instance, then clicking Actions > Instance State > Stop.\n\nQ. How can I start the stopped Spot Instances?\n\nYou can start the stopped Spot Instances by calling the StartInstances API and providing Instance Ids of the Spot Instances similar to starting your On-Demand Instances. You can also do this through the AWS Management Console by selecting your instance, then clicking Actions > Instance State > Start.\n\nNote: The Spot Instances will start only if Spot capacity is still available within your maximum price. Spot evaluates capacity availability every time whenever you will start the stopped Spot instances.\n\nQ: How can I tell whether I have stopped my Spot Instance or it has been interrupted?\n\nYou can tell that the Spot Instance has been stopped by you or interrupted by looking at the Spot Request Status code. This is visible as Spot Request Status on the Spot Requests page of the AWS Management Console or in the DescribeSpotInstanceRequests API response as “status-code” field.\n\nIf the Spot request status code is “instance-stopped-by-user”, it means that you have stopped your spot instance.\n\nQ. How will I be charged if my Spot instance is stopped or interrupted?\n\nIf your Spot instance is terminated or stopped by Amazon EC2 in the first instance hour, you will not be charged for that usage. However, if you stop or terminate the Spot instance yourself, you will be charged to the nearest second. If the Spot instance is terminated or stopped by Amazon EC2 in any subsequent hour, you will be charged for your usage to the nearest second. If you are running on Windows or Red Hat Enterprise Linux (RHEL) and you stop or terminate the Spot instance yourself, you will be charged for an entire hour.\n\nQ. When would my Spot Instance get interrupted?\n\nOver the last 3 months, 92% of Spot Instance interruptions were from a customer manually terminating the instance because the application had completed its work.\n\nIn the circumstance EC2 needs to reclaim your Spot Instance it can be for two possible reasons, with the primary one being Amazon EC2 capacity requirements (e.g. On Demand or Reserved Instance usage). Alternatively, if you have chosen to set a “maximum Spot price” and the Spot price rises above this, your instance will be reclaimed with a two-minute notification. This parameter determines the maximum price you would be willing to pay for a Spot instance hour, and by default, is set at the On-Demand price. As before, you continue to pay the Spot market price, not your maximum price, at the time your instance was running, charged in per-second increments.\n\nQ. What happens to my Spot instance when it gets interrupted?\n\nYou can choose to have your Spot instances terminated, stopped or hibernated upon interruption. Stop and hibernate options are available for persistent Spot requests and Spot Fleets with the “maintain” option enabled. By default, your instances are terminated.\n\nRefer to Spot Hibernation to learn more about handling interruptions.\n\nQ. What is the difference between Stop and Hibernate interruption behaviors?\n\nIn the case of Hibernate, your instance gets hibernated and the RAM data persisted. In the case of Stop, your instance gets shut down and RAM is cleared.\n\nIn both the cases, data from your EBS root volume and any attached EBS data volumes is persisted. Your private IP address remains the same, as does your elastic IP address (if applicable). The network layer behavior will be similar to that of EC2 Stop-Start workflow. Stop and Hibernate are available for Amazon EBS backed instances only. Local instance storage is not persisted.\n\nQ. What if my EBS root volume is not large enough to store memory state (RAM) for Hibernate?\n\nYou should have sufficient space available on your EBS root volume to write data from memory. If the EBS root volume does not have enough space, hibernation will fail and the instance will get shut down instead. Ensure that your EBS volume is large enough to persist memory data before choosing the hibernate option.\n\nQ. What is the benefit if Spot hibernates my instance on interruption?\n\nWith hibernate, Spot instances will pause and resume around any interruptions so your workloads can pick up from exactly where they left off. You can use hibernation when your instance(s) need to retain instance state across shutdown-startup cycles, i.e. when your applications running on Spot depend on contextual, business, or session data stored in RAM.\n\nQ. What do I need to do to enable hibernation for my Spot instances?\n\nRefer to Spot Hibernation to learn about enabling hibernation for your Spot instances.\n\nQ. Do I have to pay for hibernating my Spot instance?\n\nThere is no additional charge for hibernating your instance beyond the EBS storage costs and any other EC2 resources you may be using. You are not charged instance usage fees once your instance is hibernated.\n\nQ. Can I resume a hibernated instance?\n\nNo, you will not be able to resume a hibernated instance directly. Hibernate-resume cycle is controlled by Amazon EC2. If an instance is hibernated by Spot, it will be resumed by Amazon EC2 when the capacity becomes available.\n\nQ. Which instances and operating systems support hibernation?\n\nSpot Hibernation is currently supported for Amazon Linux AMIs, Ubuntu and Microsoft Windows operating systems running on any instance type across C3, C4, C5, M4, M5, R3, R4 instances with memory (RAM) size less than 100 GiB.\n\nTo review the list of supported OS versions, refer to Spot Hibernation.\n\nQ. How am I charged if Spot price changes while my instance is running?\n\nYou will pay the price per instance-hour set at the beginning of each instance-hour for the entire hour, billed to the nearest second.\n\nQ. Where can I see my usage history for Spot instances and see how much I was billed?\n\nThe AWS Management Console makes a detailed billing report available which shows Spot instance start and termination/stop times for all instances. Customers can check the billing report against historical Spot prices via the API to verify that the Spot price they were billed is correct.\n\nQ. What is a Spot fleet?\n\nA Spot Fleet allows you to automatically request and manage multiple Spot instances that provide the lowest price per unit of capacity for your cluster or application, like a batch processing job, a Hadoop workflow, or an HPC grid computing job. You can include the instance types that your application can use. You define a target capacity based on your application needs (in units including instances, vCPUs, memory, storage, or network throughput) and update the target capacity after the fleet is launched. Spot fleets enable you to launch and maintain the target capacity, and to automatically request resources to replace any that are disrupted or manually terminated. Learn more about Spot fleets.\n\nQ. Is there any additional charge for making Spot Fleet requests?\n\nNo, there is no additional charge for Spot Fleet requests.\n\nQ. What limits apply to a Spot Fleet request?\n\nVisit the Spot Fleet Limits section of the Amazon EC2 User Guide to learn about the limits that apply to your Spot Fleet request.\n\nQ. What happens if my Spot Fleet request tries to launch Spot instances but exceeds my regional Spot request limit?\n\nIf your Spot Fleet request exceeds your regional Spot instance request limit, individual Spot instance requests will fail with a \"Spot request limit exceeded request status\". Your Spot Fleet request’s history will show any Spot request limit errors that the Fleet request received. Visit the Monitoring Your Spot Fleet section of the Amazon EC2 User Guide to learn how to describe your Spot Fleet request's history.\n\nQ. Are Spot fleet requests guaranteed to be fulfilled?\n\nNo. Spot fleet requests allow you to place multiple Spot Instance requests simultaneously, and are subject to the same availability and prices as a single Spot Instance request. For example, if no resources are available for the instance types listed in your Spot Fleet request, we may be unable to fulfill your request partially or in full. We recommend that you to include all the possible instance types and availability zones that are suitable for your workloads in the Spot Fleet.\n\nQ. Can I submit a multi-Availability Zone Spot Fleet request?\n\nYes, visit the Spot Fleet Examples section of the Amazon EC2 User Guide to learn how to submit a multi-Availability Zone Spot Fleet request.\n\nQ. Can I submit a multi-region Spot Fleet request?\n\nNo, we do not support multi-region Fleet requests.\n\nQ. How does Spot Fleet allocate resources across the various Spot Instance pools specified in the launch specifications?\n\nThe RequestSpotFleet API provides three allocation strategies: capacity-optimized, lowestPrice and diversified. The capacity-optimized allocation strategy attempts to provision Spot Instances from the most available Spot Instance pools by analyzing capacity metrics. This strategy is a good choice for workloads that have a higher cost of interruption such as big data and analytics, image and media rendering, machine learning, and high performance computing.\n\nThe lowestPrice strategy allows you to provision your Spot Fleet resources in instance pools that provide the lowest price per unit of capacity at the time of the request. The diversified strategy allows you to provision your Spot Fleet resources across multiple Spot Instance pools. This enables you to maintain your fleet’s target capacity and increase your application’s availability as Spot capacity fluctuates.\n\nRunning your application’s resources across diverse Spot Instance pools also allows you to further reduce your fleet’s operating costs over time. Visit the Amazon EC2 User Guide to learn more.\n\nQ. Can I tag a Spot Fleet request?\n\nYou can request to launch Spot Instances with tags via Spot Fleet. The Fleet by itself cannot be tagged.\n\nQ. How can I see which Spot fleet owns my Spot Instances?\n\nYou can identify the Spot Instances associated with your Spot Fleet by describing your fleet request. Fleet requests are available for 48 hours after all its Spot Instances have been terminated. See the Amazon EC2 User Guide to learn how to describe your Spot Fleet request.\n\nQ. Can I modify my Spot Fleet request?\n\nYes, you can modify the target capacity of your Spot Fleet request. You may need to cancel the request and submit a new one to change other request configuration parameters.\n\nQ. Can I specify a different AMI for each instance type that I want to use?\n\nYes, simply specify the AMI you’d like to use in each launch specification you provide in your Spot Fleet request.\n\nQ. Can I use Spot Fleet with Elastic Load Balancing, Auto Scaling, or Elastic MapReduce?\n\nYou can use Auto Scaling features with Spot Fleet such as target tracking, health checks, CloudWatch metrics, etc., and can attach instances to your Elastic load balancers (both classic and application load balancers). Elastic MapReduce has a feature named “Instance fleets” that provides capabilities similar to Spot Fleet.\n\nQ. Does a Spot Fleet request terminate Spot Instances when they are no longer running in the lowest priced or capacity-optimized Spot pools and relaunch them?\n\nNo, Spot Fleet requests do not automatically terminate and relaunch instances while they are running. However, if you terminate a Spot Instance, Spot Fleet will replenish it with a new Spot Instance in the new lowest priced pool or capacity-optimized pool based on your allocation strategy.\n\nQ: Can I use stop or Hibernation interruption behaviors with Spot Fleet?\n\nYes, stop-start and hibernate-resume are supported with Spot Fleet with “maintain” fleet option enabled.\n\nQ. What is a Cluster Compute Instance?\n\nCluster Compute Instances combine high compute resources with high performance networking for HPC applications and other demanding network-bound applications. Cluster Compute Instances provide similar functionality to other Amazon EC2 instances but have been specifically engineered to provide high performance networking.\n\nAmazon EC2 cluster placement group functionality allows users to group Cluster Compute Instances in clusters—allowing applications to get the low-latency network performance necessary for tightly coupled node-to-node communication typical of many HPC applications. Cluster Compute Instances also provide significantly increased network throughput both within the Amazon EC2 environment and to the Internet. As a result, these instances are also well suited for customer applications that need to perform network-intensive operations.\n\nLearn more about using this instance type for HPC applications.\n\nQ. What kind of network performance can I expect when I launch instances in a cluster placement group?\n\nThe bandwidth an EC2 instance can utilize in a cluster placement group depends on the instance type and its networking performance specification. Inter-instance traffic within the same region can utilize 5 Gbps for single-flow and up to 25 Gbps for multiflow traffic. When launched in a placement group, select EC2 instances can utilize up to 10 Gbps for single-flow traffic.\n\nQ. What is a Cluster GPU Instance?\n\nCluster GPU Instances provide general-purpose graphics processing units (GPUs) with proportionally high CPU and increased network performance for applications benefiting from highly parallelized processing that can be accelerated by GPUs using the CUDA and OpenCL programming models. Common applications include modeling and simulation, rendering and media processing.\n\nCluster GPU Instances give customers with HPC workloads an option beyond Cluster Compute Instances to further customize their high performance clusters in the cloud for applications that can benefit from the parallel computing power of GPUs.\n\nCluster GPU Instances use the same cluster placement group functionality as Cluster Compute Instances for grouping instances into clusters—allowing applications to get the low-latency, high bandwidth network performance required for tightly coupled node-to-node communication typical of many HPC applications.\n\nLearn more about HPC on AWS.\n\nQ. What is a High Memory Cluster Instance?\n\nHigh Memory Cluster Instances provide customers with large amounts of memory and CPU capabilities per instance in addition to high network capabilities. These instance types are ideal for memory intensive workloads including in-memory analytics systems, graph analysis and many science and engineering applications.\n\nHigh Memory Cluster Instances use the same cluster placement group functionality as Cluster Compute Instances for grouping instances into clusters—allowing applications to get the low-latency, high bandwidth network performance required for tightly coupled node-to-node communication typical of many HPC and other network intensive applications.\n\nQ. Does use of Cluster Compute and Cluster GPU Instances differ from other Amazon EC2 instance types?\n\nCluster Compute and Cluster GPU Instances use differs from other Amazon EC2 instance types in two ways.\n\nFirst, Cluster Compute and Cluster GPU Instances use Hardware Virtual Machine (HVM) based virtualization and run only Amazon Machine Images (AMIs) based on HVM virtualization. Paravirtual Machine (PVM) based AMIs used with other Amazon EC2 instance types cannot be used with Cluster Compute or Cluster GPU Instances.\n\nSecond, in order to fully benefit from the available low latency, full bisection bandwidth between instances, Cluster Compute and Cluster GPU Instances must be launched into a cluster placement group through the Amazon EC2 API or AWS Management Console.\n\nQ. What is a cluster placement group?\n\nA cluster placement group is a logical entity that enables creating a cluster of instances by launching instances as part of a group. The cluster of instances then provides low latency connectivity between instances in the group. Cluster placement groups are created through the Amazon EC2 API or AWS Management Console.\n\nQ. Are all features of Amazon EC2 available for Cluster Compute and Cluster GPU Instances?\n\nCurrently, Amazon DevPay is not available for Cluster Compute or Cluster GPU Instances.\n\nQ. Is there a limit on the number of Cluster Compute or Cluster GPU Instances I can use and/or the size of cluster I can create by launching Cluster Compute Instances or Cluster GPU into a cluster placement group?\n\nThere is no limit specific for Cluster Compute Instances. For Cluster GPU Instances, you can launch 2 Instances on your own. If you need more capacity, please complete the Amazon EC2 instance request form (selecting the appropriate primary instance type).\n\nQ. Are there any ways to optimize the likelihood that I receive the full number of instances I request for my cluster via a cluster placement group?\n\nWe recommend that you launch the minimum number of instances required to participate in a cluster in a single launch. For very large clusters, you should launch multiple placement groups, e.g. two placement groups of 128 instances, and combine them to create a larger, 256 instance cluster.\n\nQ. Can Cluster GPU and Cluster Compute Instances be launched into a single cluster placement group?\n\nWhile it may be possible to launch different cluster instance types into a single placement group, at this time we only support homogenous placement groups.\n\nQ. If an instance in a cluster placement group is stopped then started again, will it maintain its presence in the cluster placement group?\n\nYes. A stopped instance will be started as part of the cluster placement group it was in when it stopped. If capacity is not available for it to start within its cluster placement group, the start will fail.\n\nQ. What is the Nitro Hypervisor?\n\nThe launch of C5 instances introduced a new hypervisor for Amazon EC2, the Nitro Hypervisor. As a component of the Nitro system, the Nitro Hypervisor primarily provides CPU and memory isolation for EC2 instances. VPC networking and EBS storage resources are implemented by dedicated hardware components, Nitro Cards that are part of all current generation EC2 instance families. The Nitro Hypervisor is built on core Linux Kernel-based Virtual Machine (KVM) technology, but does not include general-purpose operating system components.\n\nQ. How does the Nitro Hypervisor benefit customers?\n\nThe Nitro Hypervisor provides consistent performance and increased compute and memory resources for EC2 virtualized instances by removing host system software components. It allows AWS to offer larger instance sizes (like c5.18xlarge) that provide practically all of the resources from the server to customers. Previously, C3 and C4 instances each eliminated software components by moving VPC and EBS functionality to hardware designed and built by AWS. This hardware enables the Nitro Hypervisor to be very small and uninvolved in data processing tasks for networking and storage.\n\nQ. Will all EC2 instances use the Nitro Hypervisor?\n\nEventually all new instance types will use the Nitro Hypervisor, but in the near term, some new instance types will use Xen depending on the requirements of the platform.\n\nQ. Will AWS continue to invest in its Xen-based hypervisor?\n\nYes. As AWS expands its global cloud infrastructure, EC2’s use of its Xen-based hypervisor will also continue to grow. Xen will remain a core component of EC2 instances for the foreseeable future. AWS is a founding member of the Xen Project since its establishment as a Linux Foundation Collaborative Project and remains an active participant on its Advisory Board. As AWS expands its global cloud infrastructure, EC2’s Xen-based hypervisor also continues to grow. Therefore EC2’s investment in Xen continues to grow, not shrink.\n\nQ. How many EBS volumes and Elastic Network Interfaces (ENIs) can be attached to instances running on the Nitro Hypervisor?\n\nInstances running on the Nitro Hypervisor support a maximum of 27 additional PCI devices for EBS volumes and VPC ENIs. Each EBS volume or VPC ENI uses a PCI device. For example, if you attach 3 additional network interfaces to an instance that uses the Nitro Hypervisor, you can attach up to 24 EBS volumes to that instance.\n\nQ. Will the Nitro Hypervisor change the APIs used to interact with EC2 instances?\n\nNo, all the public facing APIs for interacting with EC2 instances that run using the Nitro Hypervisor will remain the same. For example, the “hypervisor” field of the DescribeInstances response will continue to report “xen” for all EC2 instances, even those running under the Nitro Hypervisor. This field may be removed in a future revision of the EC2 API.\n\nQ. Which AMIs are supported on instances that use the Nitro Hypervisor?\n\nEBS backed HVM AMIs with support for ENA networking and booting from NVMe storage can be used with instances that run under the Nitro Hypervisor. The latest Amazon Linux AMI and Windows AMIs provided by Amazon are supported, as are the latest AMI of Ubuntu, Debian, Red Hat Enterprise Linux, SUSE Enterprise Linux, CentOS, and FreeBSD.\n\nQ. Will I notice any difference between instances using Xen hypervisor and those using the Nitro Hypervisor?\n\nYes. For example, instances running under the Nitro Hypervisor boot from EBS volumes using an NVMe interface. Instances running under Xen boot from an emulated IDE hard drive, and switch to the Xen paravirtualized block device drivers.\n\nOperating systems can identify when they are running under a hypervisor. Some software assumes that EC2 instances will run under the Xen hypervisor and rely on this detection. Operating systems will detect they are running under KVM when an instance uses the Nitro Hypervisor, so the process to identify EC2 instances should be used to identify EC2 instances that run under both hypervisors.\n\nAll the features of EC2 such as Instance Metadata Service work the same way on instances running under both Xen and the Nitro Hypervisor. The majority of applications will function the same way under both Xen and the Nitro Hypervisor as long as the operating system has the needed support for ENA networking and NVMe storage.\n\nQ. How are instance reboot and termination EC2 API requests implemented by the Nitro Hypervisor?\n\nThe Nitro Hypervisor signals the operating system running in the instance that it should shut down cleanly by industry standard ACPI methods. For Linux instances, this requires that acpid be installed and functioning correctly. If acpid is not functioning in the instance, termination events will be delayed by multiple minutes and will then execute as a hard reset or power off.\n\nQ. How do EBS volumes behave when accessed by NVMe interfaces?\n\nThere are some important differences in how operating system NVMe drivers behave compared to Xen paravirtual (PV) block drivers.\n\nFirst, the NVMe device names used by Linux based operating systems will be different than the parameters for EBS volume attachment requests and block device mapping entries such as /dev/xvda and /dev/xvdf. NVMe devices are enumerated by the operating system as /dev/nvme0n1, /dev/nvme1n1, and so on. The NVMe device names are not persistent mappings to volumes, therefore other methods like file system UUIDs or labels should be used when configuring the automatic mounting of file systems or other startup activities. When EBS volumes are accessed via the NVMe interface, the EBS volume ID is available via the controller serial number and the device name specified in EC2 API requests is provided by an NVMe vendor extension to the Identify Controller command. This enables backward compatible symbolic links to be created by a utility script. For more information see the EC2 documentation on device naming and NVMe based EBS volumes.\n\nSecond, by default the NVMe drivers included in most operating systems implement an I/O timeout. If an I/O does not complete in an implementation specific amount of time, usually tens of seconds, the driver will attempt to cancel the I/O, retry it, or return an error to the component that issued the I/O. The Xen PV block device interface does not time out I/O, which can result in processes that cannot be terminated if it is waiting for I/O. The Linux NVMe driver behavior can be modified by specifying a higher value for the nvme.io timeout kernel module parameter.\n\nThird, the NVMe interface can transfer much larger amounts of data per I/O, and in some cases may be able to support more outstanding I/O requests, compared to the Xen PV block interface. This can cause higher I/O latency if very large I/Os or a large number of I/O requests are issued to volumes designed to support throughput workloads like EBS Throughput Optimized HDD (st1) and Cold HDD (sc1) volumes. This I/O latency is normal for throughput optimized volumes in these scenarios, but may cause I/O timeouts in NVMe drivers. The I/O timeout can be adjusted in the Linux driver by specifying a larger value for the nvme_core.io_timeout kernel module parameter."
    }
}