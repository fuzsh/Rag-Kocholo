{
    "id": "dbpedia_7406_2",
    "rank": 37,
    "data": {
        "url": "https://pypi.org/project/p4runtime/",
        "read_more_link": "",
        "language": "en",
        "title": "p4runtime",
        "top_image": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "meta_img": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "images": [
            "https://pypi.org/static/images/logo-small.8998e9d1.svg",
            "https://pypi-camo.freetls.fastly.net/0829cfcbfacffe273847e7e61d172c1888d97280/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f61393563336335646537663239623866306533363231613862666433373265373f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/8af3b80a9daa695a095d01ed20cb1723f5732081/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f62373231313935653837396331636361623036613731346639643135623164613f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/650847cb531cd7adf0f60ba932745db447797a1f/68747470733a2f2f6769746875622e636f6d2f70346c616e672f703472756e74696d652f776f726b666c6f77732f6275696c6425323070726f746f627566732f62616467652e737667",
            "https://pypi-camo.freetls.fastly.net/0829cfcbfacffe273847e7e61d172c1888d97280/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f61393563336335646537663239623866306533363231613862666433373265373f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/8af3b80a9daa695a095d01ed20cb1723f5732081/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f62373231313935653837396331636361623036613731346639643135623164613f73697a653d3530",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/blue-cube.572a5bfb.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67",
            "https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67",
            "https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67",
            "https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67",
            "https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67",
            "https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-12-02T08:31:46+00:00",
        "summary": "",
        "meta_description": "The P4 Runtime protocol",
        "meta_lang": "en",
        "meta_favicon": "/static/images/favicon.35549fe8.ico",
        "meta_site_name": "PyPI",
        "canonical_link": "https://pypi.org/project/p4runtime/",
        "text": "P4Runtime Specification\n\nThis directory contains protobuf files, specifications and related artifacts for all versions of the P4Runtime API. Documentation and protobuf definitions are placed into two distinct top-level directories. In each of these directories, files are organized based on the P4Runtime major version number (e.g. v1) as follows:\n\n. ├── docs │ └── v1 # documentation for P4Runtime v1 ├── proto │ └── p4 │ ├── config │ │ └── v1 # p4.config.v1 protobuf package (P4Info message definition) │ └── v1 # p4.v1 protobuf package (P4Runtime service definition)\n\nGit tags are used to mark minor and patch release versions.\n\nReading the latest version of the documentation\n\nThe latest version of the P4Runtime v1 specification is available:\n\nhere in HTML format\n\nhere in PDF format\n\nIt is updated every time a new commit is pushed to the master branch.\n\nOverview\n\nP4 is a language for programming the data plane of network devices. The P4Runtime API is a control plane specification for controlling the data plane elements of a device or program defined by a P4 program. This repository provides a precise definition of the P4Runtime API via protobuf (.proto) files and accompanying documentation. The target audience for this includes system architects and developers who want to write controller applications for P4 devices or switches.\n\nCommunity\n\nMeetings: the P4.org API Working Group meets every other Friday at 9:30AM (Pacific Time). Please see the P4 Working Groups Calendar for meeting details.\n\nEmail: join our mailing list to receive announcements and stay up-to-date with Working Group activities.\n\nSlack: ask to join the P4 Slack Workspace to get (or provide!) interactive help.\n\nCompiling P4Runtime Protobuf files\n\nBuild Using Docker\n\nYou can use Docker to run the protoc compiler on the P4Runtime Protobuf files and generate the Protobuf & gRPC bindings for C++, Python and Go:\n\ndocker build -t p4runtime -f codegen/Dockerfile . docker run -v <OUT>:/out/ -t p4runtime /p4runtime/codegen/compile_protos.sh /out/\n\nThis will generate the bindings in the local <OUT> directory. You need to provide the absolute path for <OUT>. The default Docker user is root, so you may need to change the permissions manually for the generated files after the docker run command exits.\n\nThese commands are the ones used by our CI system to ensure that the Protobuf files stay semantically valid.\n\nBuild Using Bazel\n\nThe protobufs can also be built using Bazel. The Bazel WORKSPACE and BUILD files are located in the proto folder.\n\nTo build, run\n\ncd proto&& bazel build //...\n\nWe run continuous integration to ensure this works with the latest version of Bazel.\n\nFor an example of how to include P4Runtime in your own Bazel project, see bazel/example.\n\nModification Policy\n\nWe use the following processes when making changes to the P4Runtime specification and associated documents. These processes are designed to be lightweight, to encourage active participation by members of the P4.org community, while also ensuring that all proposed changes are properly vetted before they are incorporated into the repository and released to the community.\n\nCore Processes\n\nOnly members of the P4.org community may propose changes to the P4Runtime specification, and all contributed changes will be governed by the Apache-style license specified in the P4.org membership agreement.\n\nWe will use semantic versioning to track changes to the P4Runtime specification: major version numbers track API-incompatible changes; minor version numbers track backward-compatible changes; and patch versions make backward-compatible bug fixes. Generally speaking, the P4Runtime working group co-chairs will typically batch together multiple changes into a single release, as appropriate.\n\nDetailed Processes\n\nWe now identify detailed processes for three classes of changes. The text below refers to key committers, a GitHub team that is authorized to modify the specification according to these processes.\n\nNon-Technical Changes: Changes that do not affect the definition of the API can be incorporated via a simple, lightweight review process: the author creates a pull request against the specification that a key committer must review and approve. The P4Runtime Working Group does not need to be explicitly notified. Such changes include improvements to the wording of the specification document, the addition of examples or figures, typo fixes, and so on.\n\nTechnical Bug Fixes: Any changes that repair an ambiguity or flaw in the current API specification can also be incorporated via the same lightweight review process: the author creates a GitHub issue as well as a pull request against the specification that a key committer must review and approve. The key committer should use their judgment in deciding if the fix should be incorporated without broader discussion or if it should be escalated to the P4Runtime Working Group. In any event, the Working Group should be notified by email.\n\nAPI Changes Any change that substantially modifies the definition of the API, or extends it with new features, must be reviewed by the P4Runtime Working Group, either in an email discussion or a meeting. We imagine that such proposals would go through three stages: (i) a preliminary proposal with text that gives the motivation for the change and examples; (ii) a more detailed proposal with a discussion of relevant issues including the impact on existing programs; (iii) a final proposal accompanied by a design document, a pull request against the specification, and prototype implementation on a branch of p4runtime, and example(s) that illustrate the change. After approval, the author would create a GitHub issue as well as a pull request against the specification that a key committer must review and approve.\n\nWhen updating the Protobuf files in a pull request, you will also need to update the generated Go and Python files, which are hosted in this repository under go/ and py/. This can be done easily by running ./codegen/update.sh, provided docker is installed and your user is part of the \"docker\" group (which means that the docker command can be executed without sudo).\n\nUse generated P4Runtime library\n\nGo\n\nTo include the P4Runtime Go library to your project, you can add this repository url to your go.mod file, for example:\n\nmodule your_module_name go 1.13 require ( github.com/p4lang/p4runtime v1.3.0 )\n\nPython\n\nTo install P4Runtime Python library, use the pip3 command:"
    }
}