{
    "id": "dbpedia_7406_3",
    "rank": 24,
    "data": {
        "url": "https://collaborate.princeton.edu/en/publications/switchlog-a-logic-programming-language-fornetwork-switches",
        "read_more_link": "",
        "language": "en",
        "title": "SwitchLog: A Logic Programming Language for Network Switches — Princeton University",
        "top_image": "https://collaborate.princeton.edu/skin/headerImage/",
        "meta_img": "https://collaborate.princeton.edu/skin/headerImage/",
        "images": [
            "https://collaborate.princeton.edu/skin/headerImage/",
            "https://collaborate.princeton.edu/skin/footerIcon/"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Vaibhav Mehta",
            "Devon Loehr",
            "John Sonchack",
            "David Walker"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/skin/favIcon/",
        "meta_site_name": "Princeton University",
        "canonical_link": "https://collaborate.princeton.edu/en/publications/switchlog-a-logic-programming-language-fornetwork-switches",
        "text": "The development of programmable switches such as the Intel Tofino has allowed network designers to implement a wide range of new in-network applications and network control logic. However, current switch programming languages, like P4, operate at a very low level of abstraction. This paper introduces SwitchLog, a new experimental logic programming language designed to lift the level of abstraction at which network programmers operate, while remaining amenable to efficient implementation on programmable switches. SwitchLog is inspired by previous distributed logic programming languages such as NDLog, in which programmers declare a series of facts, each located at a particular switch in the network. Logic programming rules that operate on facts at different locations implicitly generate network communication, and are updated incrementally, as packets pass through a switch. In order to ensure these updates can be implemented efficiently on switch hardware, SwitchLog imposes several restrictions on the way programmers can craft their rules. We demonstrate that SwitchLog can be used to express a variety of networking applications in a mere handful of lines of code.\n\nTY - GEN\n\nT1 - SwitchLog\n\nT2 - 25th International Symposium on Practical Aspects of Declarative Languages, PADL 2023\n\nAU - Mehta, Vaibhav\n\nAU - Loehr, Devon\n\nAU - Sonchack, John\n\nAU - Walker, David\n\nN1 - Publisher Copyright: © 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.\n\nPY - 2023\n\nY1 - 2023\n\nN2 - The development of programmable switches such as the Intel Tofino has allowed network designers to implement a wide range of new in-network applications and network control logic. However, current switch programming languages, like P4, operate at a very low level of abstraction. This paper introduces SwitchLog, a new experimental logic programming language designed to lift the level of abstraction at which network programmers operate, while remaining amenable to efficient implementation on programmable switches. SwitchLog is inspired by previous distributed logic programming languages such as NDLog, in which programmers declare a series of facts, each located at a particular switch in the network. Logic programming rules that operate on facts at different locations implicitly generate network communication, and are updated incrementally, as packets pass through a switch. In order to ensure these updates can be implemented efficiently on switch hardware, SwitchLog imposes several restrictions on the way programmers can craft their rules. We demonstrate that SwitchLog can be used to express a variety of networking applications in a mere handful of lines of code.\n\nAB - The development of programmable switches such as the Intel Tofino has allowed network designers to implement a wide range of new in-network applications and network control logic. However, current switch programming languages, like P4, operate at a very low level of abstraction. This paper introduces SwitchLog, a new experimental logic programming language designed to lift the level of abstraction at which network programmers operate, while remaining amenable to efficient implementation on programmable switches. SwitchLog is inspired by previous distributed logic programming languages such as NDLog, in which programmers declare a series of facts, each located at a particular switch in the network. Logic programming rules that operate on facts at different locations implicitly generate network communication, and are updated incrementally, as packets pass through a switch. In order to ensure these updates can be implemented efficiently on switch hardware, SwitchLog imposes several restrictions on the way programmers can craft their rules. We demonstrate that SwitchLog can be used to express a variety of networking applications in a mere handful of lines of code.\n\nKW - Data plane programming\n\nKW - Datalog\n\nKW - Logic programming\n\nKW - P4\n\nKW - Programmable networks\n\nUR - http://www.scopus.com/inward/record.url?scp=85148684916&partnerID=8YFLogxK\n\nUR - http://www.scopus.com/inward/citedby.url?scp=85148684916&partnerID=8YFLogxK\n\nU2 - 10.1007/978-3-031-24841-2_12\n\nDO - 10.1007/978-3-031-24841-2_12\n\nM3 - Conference contribution\n\nAN - SCOPUS:85148684916\n\nSN - 9783031248405\n\nT3 - Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)\n\nSP - 180\n\nEP - 196\n\nBT - Practical Aspects of Declarative Languages - 25th International Symposium, PADL 2023, Proceedings\n\nA2 - Hanus, Michael\n\nA2 - Inclezan, Daniela\n\nPB - Springer Science and Business Media Deutschland GmbH\n\nY2 - 16 January 2023 through 17 January 2023\n\nER -"
    }
}