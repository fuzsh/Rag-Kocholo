{
    "id": "correct_subsidiary_00134_2",
    "rank": 42,
    "data": {
        "url": "http://massapi.com/method/cl/clear-12.html",
        "read_more_link": "",
        "language": "en",
        "title": "List of clear() Examples",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "clear()",
            "clear() examples",
            "List of clear() examples"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "List of clear() examples",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Clears this provider so that it no longer contains the properties used to look up facilities implemented by the provider.\n\nFirst, if there is a security manager, its checkSecurityAccess method is called with the string \"clearProviderProperties.\"+name (where name is the provider name) to see if it's ok to clear this provider. If the default implementation of checkSecurityAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a SecurityPermission(\"clearProviderProperties.\"+name) permission. @throws SecurityException if a security manager exists and its {@link java.lang.SecurityManager#checkSecurityAccess} method denies access to clear this provider @since 1.2\n\nVisits all unit (1) elements of the matrix, belonging to the connected object containing the element with the specified coordinates, calls elementVisitor. {@link ConnectedObjectScanner.ElementVisitor#visit visit} method for each element and clears this element ( {@link UpdatableBitArray#clearBit(long)}). Returns the number of visited elements. If the element with the specified coordinates is zero, does nothing and returns 0.\n\nHowever, if forceClearing argument is false, this method may skip actual clearing the visited elements in the scanned matrix, but clear bits in some internal buffer instead. In this case, the {@link #nextUnitBit} method will work as if the bits was actually cleared.This mode is useful if you don't really need to clear bits in the source matrix, but only need to visit all unit elements: this mode can improve performance. If forceClearing argument is true, the behavior is strict: all visited elements will be immediately cleared in the scanned matrix.\n\nThe elementVisitor. {@link ConnectedObjectScanner.ElementVisitor#visit visit} method is called before clearing the element.\n\nThe elementVisitor argument may be null: then this method only clears the elements of the connected object. It may be enough if your only intention is to count the elements of the connected object.\n\nThe order of visiting elements is not specified and depends on concrete implementation of this class.\n\nThis method never modifies the passed coordinates array: it is cloned in the beginning of the method and is not used after this. It can be important in a case of multithread access.\n\n@param context the context of scanning; may be null, then will be ignored.The main purpose of the context in most implementation is to allow interruption of this method via {@link ArrayContext#checkInterruption()} and to allocatework memory via {@link ArrayContext#getMemoryModel()}. This method does not try to update execution progress via the context: its methods {@link ArrayContext#updateProgress} and{@link ArrayContext#checkInterruptionAndUpdateProgress} are not called. @param elementVisitor the visitor, called for every visited element;may be null, then will be ignored. @param coordinates the coordinates of some matrix element, belonging to the connected objectthat should be scanned. @param forceClearing false value allows the method not to perform actual clearingbits in the scanned matrix; true value requires actual clearing. @return the number of matrix elements in the connected objector 0 if the bit with specified coordinates is zero. @throws NullPointerException if coordinates argument is null. @throws IllegalArgumentException if the number of passed coordinates (coordinates.length)is not equal to the number of dimensions of the {@link #matrix() scanned matrix}. @throws IndexOutOfBoundsException if some coordinates are out of the {@link #matrix() scanned matrix}. @throws OutOfMemoryError (low probability) if the form of the object is too complex and there isnot enough memory to allocate necessary data structures."
    }
}