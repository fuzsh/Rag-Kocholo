{
    "id": "correct_subsidiary_00134_3",
    "rank": 53,
    "data": {
        "url": "https://patents.google.com/patent/US8589338B2/en",
        "read_more_link": "",
        "language": "en",
        "title": "US8589338B2 - Service-oriented architecture (SOA) management of data repository - Google Patents",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://patentimages.storage.googleapis.com/a5/ba/70/51f901e3871268/US08589338-20131119-D00000.png",
            "https://patentimages.storage.googleapis.com/4f/23/88/ec330c481f247c/US08589338-20131119-D00001.png",
            "https://patentimages.storage.googleapis.com/fd/f4/bf/0021feca835682/US08589338-20131119-D00002.png",
            "https://patentimages.storage.googleapis.com/a0/23/b8/c868b2ebda5c62/US08589338-20131119-D00003.png",
            "https://patentimages.storage.googleapis.com/cc/19/3a/9c27529996a46e/US08589338-20131119-D00004.png",
            "https://patentimages.storage.googleapis.com/5a/bf/49/fd23610f9fb4ad/US08589338-20131119-D00005.png",
            "https://patentimages.storage.googleapis.com/3e/37/ed/65ac9c2fb2bd54/US08589338-20131119-D00006.png",
            "https://patentimages.storage.googleapis.com/00/30/db/f59a65228aaebb/US08589338-20131119-D00007.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2008-01-24T00:00:00",
        "summary": "",
        "meta_description": "A data repository includes information for multiple data systems, which can each control data in this and a number of other domains. A business process can be launched by one of the data systems to update the target data and any related data in the repository or any other related repository. Any request to update data is intercepted and the business process can launch workflows and apply policies as needed to process the request. Workflows can be associated with the fields being updated or process being executed, such that any update to the target data is also accurately reflected in any other related system. Further, launching a workflow allows processes to be run before the data is updated, such that the data can be modified, added to, rejected, or otherwise processed before being added to the appropriate repositories.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://patents.google.com/patent/US8589338B2/en",
        "text": "CROSS-REFERENCES TO RELATED APPLICATIONS\n\nThis application is related to U.S. patent application Ser. No. 11/926,738, filed Oct. 29, 2007, entitled âSHARED VIEW OF CUSTOMERS ACROSS BUSINESS SUPPORT SYSTEMS (BSS) AND A SERVICE DELIVERY PLATFORM (SDP),â which is hereby incorporated herein by reference.\n\nCOPYRIGHT NOTICE\n\nA portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.\n\nBACKGROUND OF THE INVENTION\n\nThe present invention relates generally to the management of data across domains, an in particular to using workflows to manage data across multiple systems and sources.\n\nAs an ever increasing number of services is being offered by various network providers, there is a corresponding increase in the number of systems, devices, applications, and components that utilize and store data for customers. Data typically is stored in databases as either structured or unstructured data. Directories (e.g., Lightweight Directory Access Protocol (LDAP) directories) can be used to store the data, as well as various schemas. For XML data, for example, the data can be stored in XML-aware databases, and repositories such as are found in XDM servers allow storage and exchange of XML data. All these are particular examples of data repositories.\n\nExisting systems do not provide a view or aggregation of data from other domains, where data manipulation can be accomplished, accompanied by, or conditioned by execution of a policy (i.e., any combination of any condition and any action) that may call other systems to perform tasks that may update or result into updates of the data as needed, and that provide a view of the updated results or that may call other systems to perform tasks as a result of the update. Typically, these other systems are the âmaster controllerâ or âownerâ of the data that is viewed. Data manipulation then is typically done as a request to change data in a system, a security check or identity authentication/validation, and a change of data by the database or repository. Such approaches can lead to problems in that changes made in one system might not align or be consistent with other systems using the same data, or consistent with related data in the same or other systems.\n\nCertain information thus overlaps or is related to other information stored for different services or in different repositories. Unfortunately, it is not practical for most entities to rewrite the schemas or redesign all the systems and services to use a common data model, single repository, single point of access, etc. As such, there typically is no way to treat the various repositories as a single data source that is readily available to applications, users, etc.\n\nA significant problem thus exists in the fact that updating information in one data repository may require corresponding changes or updates in other repositories, with each repository storing information for multiple applications. In order to update data in a repository, the overall system assumes that several applications may have been triggered by the result, or at an intermediate step, and that these applications have executed their own processes may have changed the context or data elsewhere. For example, adding a subscription for a user in a Business Support System (BSS) may also require updating support data and asset data (e.g. in an OSS, Network, or run time environment like SDP), as well as ensuring that some provisioning, activation, fulfillment, and/or billing takes place, etc. If the data is allowed to be updated without following all such flows, data existing elsewhere (e.g. catalog or provisioning flows, new rates, inventories of assets associated to a principal (e.g. subscriber) or support details, etc.) may be dropped (i.e., not appropriately added/updated). Further, other data in the same repository that might need to be modified as a result of the change might not be modified appropriately. For example, an action such as creating a customer record in a customer database for a business such as a telecommunications service provider requires other updates or processes to be run for other systems, such as where a new customer must be added to the billing system in order to ensure that the customer will be billed for the service. The customer information must also be added to a support system so that the customer can receive necessary support, etc. It thus is not enough to simply update the information locally, but all other necessary processes also must be executed in response to the update.\n\nFor example, a telecommunications service provider typically maintains a large set of different repositories that each contain certain information about customers of that provider. A number of systems and components may include Business Support Systems (BSS), a Service Delivery Platform (SDP), Operational Support Systems (OSS), and various other applications, third party content, and services. Each of these systems typically includes at least one repository containing a specific type of information, which generally is not substantially related or available to information in the repositories of the other systems.\n\nFor example, a BSS repository can store customer information from a service provider (business) point of view, such as customer address information, customer billing information, products purchased by the customer, and campaigns to which a customer has responded. A BSS repository also can include subscription information for a customer, such as information for any voice, wireless, data, or roaming plan, as well as number of minutes purchased per month, the terms of the plan, SLA etc. Such information is treated as product information from a BSS (e.g. CRM) point of view, and the BSS repository also will include information as to whether a particular customer is subscribing to that product. If, for example, a customer subscribing to a new subscription may entitled to a new phone or promotion or phone renewal terms or bundling, etc., that information typically will be maintained in the BSS repository. A BSS (e.g. CRM) repository also typically is used to maintain trouble tickets, such as information regarding problems with service or failure to receive a form, status of the ticket etc.\n\nAn OSS repository, on the other hand, can be used for monitoring and administration of the system. An OSS repository can contain subscriber information such as information for the current and active bill for a customer, an inventory of assets, provisioning and activation status (i.e., what is activated, what needs to be activated, etc., such as an order fulfillment status) associated with a customer, types of products or services provided to a customer, etc. A repository at the network level might include current network information for a customer, such as whether the customer is logged onto the network, a location of the customer on the network, whether a customer device is active, presence (one may argue if that is network or service level data, but it does not matter), etc. An application/service level repository (e.g., exposed within a service delivery platform (SDP)) stores subscription information for a customer that is useful in running software services that are exposed to the customer, such as whether a particular customer has requested to receive news updates, and if so, also stores preference information such as which types of news the customer wishes to receive, e.g., international news or news related to a specific topic, as well as a channel in which to receive the news (e.g., SMS or MMS) and format information for the news (e.g., background color and font size). The SDP repository also can include information such as an identity for each customer, customer availability, etc.\n\nAs can be seen, there is certain information that overlaps or is related to other information stored for different services or in different repositories. Unfortunately, it is not practical for most entities to rewrite the schemas or redesign all the systems and services to use a common data model, single repository, single point of access, etc. As such, there typically is no way to treat the various repositories as a single data source that is readily available to applications, users, etc.\n\nIn the case of a service, when an update is to take place it often is difficult to know where information is located, which information needed to be updated, as well as anything else that may need to be updated in order to maintain consistency of the entire system. This can significantly slow access, use, and changes to data such as subscription data. Many initiatives to offer such capabilities either fail or are extremely difficult to implement and/or integrate within a service provider's domain.\n\nFurther, a problem exists in the fact that updating information in one data repository may require corresponding changes or updates in other repositories. If a specific repository includes customer subscription information, there can be multiple applications that write that information in the repository, and update the repository, so that the repository reflects the subscriptions for all services. For a business such as a telecommunications service provider, however, an action such as creating a customer record in a customer database requires other updates or processes to be run for other systems. For example, a new customer must be added to the billing system in order to ensure that the customer will be billed for the service. The customer information must also be added to a support system so that the customer can receive necessary support, etc. It thus is not enough to simply update the information locally, but all other necessary processes also must be executed in response to the update.\n\nEven after a customer record is created in all the appropriate systems, the customer may subscribe to different services or purchase different equipment, which can require updates in any appropriate system. Thus it would be desirable to have a way to ensure that all appropriate processes and updates are launched in response to an update in data of any system or repository across a domain.\n\nBRIEF SUMMARY OF THE INVENTION\n\nSystems and methods in accordance with various embodiments are able to launch business processes when an authorized principal or process (e.g., an administrator, user, or application) attempts to update, create, modify, or delete a data field, whereby related processes, systems, repositories, or data fields can be updated or notified as needed. A checking that the requester of the manipulation is authorized may be part of the function(s) performed by processes resulting from such a request.\n\nA system in accordance with one embodiment provides a common view or access point that provides for the updating of data, as well as the launching or processes that may or may not update data in ways that are tracked in a database, and/or may allow for other contextual impact. Such processing can occur across multiple systems or domains, including any data controlled by a set of business processes or other applications. A repository can be provided that aggregates the data to provide consistency when updated through the repository. The repository can interface with any systems own part of the data to request an update that the repository receives. At least one interface can be used to provide access to any information related to a given customer via a single repository or access point.\n\nIn one embodiment a virtual directory provides the ability to view all the data across various domains through a âvirtualâ view, or aggregated virtual views, of multiple data repositories, as well as any data that the system itself owns. This allows the data to be presented in a shared or common view for the user, but allows the data to remain in the âviewedâ repository. An interface such as a single API can be used to provide access to multiple databases as if those databases were part of a common data source, and allows the information to be viewed as it the information was part of a single âvirtualâ directory. In creating the API, information from the various repositories can be aggregated with information coming from the service delivery platform.\n\nA further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.\n\nBRIEF DESCRIPTION OF THE DRAWINGS\n\nVarious embodiments in accordance with the present invention will be described with reference to the drawings, in which:\n\nFIG. 1 illustrates a service delivery platform-based architecture that can be used with various embodiments of the present invention;\n\nFIG. 2 illustrates a service delivery platform-based architecture that can be in accordance with one embodiment of the present invention;\n\nFIGS. 3( a) and 3(b) illustrate exemplary flows for an update request from an application in accordance with one embodiment of the present invention;\n\nFIG. 4 illustrates an architecture utilizing a unified user profile and virtual directory in accordance with one embodiment of the present invention;\n\nFIG. 5 illustrates an architecture utilizing a presence enabler in accordance with one embodiment of the present invention;\n\nFIG. 6 illustrates an architecture utilizing an adapter layer in accordance with one embodiment of the present invention;\n\nFIG. 7 illustrates components of a computer network that can be used in accordance with one embodiment of the present invention; and\n\nFIG. 8 illustrates components of a computerized device that can be used in accordance with one embodiment of the present invention.\n\nDETAILED DESCRIPTION OF THE INVENTION\n\nSystems and methods in accordance with various embodiments can overcome the aforementioned and other deficiencies in existing systems by launching business processes when an authorized principal or process such as a user or application attempts to update, create, modify, or delete a data field, whereby related processes, systems, repositories, or data fields can be updated or notified as needed.\n\nA system in accordance with one embodiment provides a common view or access point that provides for the updating of data across multiple systems or domains, including not only data owned by a specific repository but any data controlled by a set of business processes or other applications. A repository can be provided that aggregates the data from multiple domains. The data then can be consistent, and can be consistently updated in the domains when updated through the repository. As the repository aggregates the data but at most owns only some of the data in at least one embodiment, the repository can interface with the systems owning any remainder of the data to request the update that the repository receives. At least one interface can thus be provided that allows a user to access any information related to a given customer via a single repository or access point.\n\nOne way in which this is achieved is through the use of a virtual directory, which provides the ability to view all the data across various domains. A virtual directory, or virtual database, exposes a âvirtualâ view, or aggregated virtual views, of multiple data repositories, as well as any data that the system itself owns. This allows the data to be presented in a shared or common view for the user, but allows the data to remain in the âviewedâ repository. In some embodiments, the data may be at least partially cached in the virtual directory to improve the efficiency of the view. The cache itself may be distributed (e.g., using technology such as Oracle Tangosol Coherence available from Oracle Corporation of Redwood Shores, Calif.) or replicated (e.g., using times ten replication such as DB replication even RAC). For most repositories, including virtual repositories, a ânorth boundâ interface is exposed to provision, load, or manage the data, using a Create Read Update Delete (CRUD) approach. In one example this is accomplished using a query language such as SQL applied on the repository or the target of the virtual repository, while any other such interface can be used as well. Another approach is to expose any XDM or LDAP capabilities.\n\nIn one embodiment, an interface such as a single API is used to provide access to multiple databases as if those databases were part of a common data source, and allows the information to be viewed as it the information was part of a single âvirtualâ directory. In some instances, the system itself may own at least part of the data. In creating the API, information from the various repositories can be aggregated with information coming from the service delivery platform (e.g. application context or result of calls to enablers/applications). As it is desirable for certain embodiments to function with existing technologies used by entities such as telecommunications companies, an exemplary implementation takes advantage of a service delivery platform (SDP)-based architecture 100, such as is illustrated in FIGS. 1 and 2, although it should be understood that such an approach is used for purposes of explanation only and that an SDP-based implementation is not required. In the exemplary architecture 100 of FIG. 1, the SDP 102 includes a horizontal, standards-based platform that abstracts the underlying network resources and follows a service-oriented architecture (SOA). Further information about such a service delivery platform is detailed in co-pending U.S. patent application Ser. No. 11/357,653, filed Feb. 16, 2006, entitled âFACTORIZATION OF CONCERNS TO BUILD A SDP (SERVICE DELIVERY PLATFORM),â which is hereby incorporated herein by reference. In one embodiment, the SDP utilizes a horizontal SOA platform based on the Java 2 Platform, Enterprise Edition (J2EE). can include information such as presence or location information for a customer.\n\nIt is likely that the identities used for each of the repositories will be different, even for a common customer. The SDP includes a converged container based on Java Specification Requests JSR 116/289 and JSR 32, which includes SOA SIP AS, OSA AS, and telephony AS as a J2EE converged container. The SDP also exposes mobile, voice, and other communications enablers.\n\nIn FIG. 2, the SDP configuration 200 implements the desired functionality on top of an underlying J2EE core provided by the application server. A basic approach to providing a service delivery platform starts with a standards-based IT platform (e.g., J2EE) and makes the platform carrier grade, and extends beyond HTTP to protocols such as SIP, Diameter, and Parlay. To support the key protocols relevant to Telecommunications, for example, the SDP can provide support for SIP/ISC, Diameter and Parlay CORBA as well as adapters to messaging gateways. A standard approach can be used to build adapters to any other resource or protocol using JCA 1.5, for example. Enablers are provided as reusable components that abstract the network resources and standard northbound interfaces. IT/SOA then can be used to provide services such as revenue generating services, utilizing SOA-based policies and business rules (e.g., from third parties). The platform then can provide for SOA-based integration of OSS, BSS, and SDP. Exposure to third party content and service provider can be achieved by SOA to expose, integrate and enforce policies. SOA also can be used to also support and rationalize policy management and evaluation throughout the service provider environment.\n\nThe SDP can be thought of as a service layer solution that can be deployed on Oracle fusion middleware/OC4J as well as JBOSS, BEA Weblogic, and IBM Websphere, for example. While SIP is described as a first class citizen protocol besides HTTP, other protocols can be supported out of the box using a recipe for JCA 1.5 adapters to Parlay CORBA, Diameter, Messaging protocols etc. The J2EE container is converged (i.e. every object from SIP, HTTP, J2EE object etc can share context and interact with each others, when it makes sense) and carrier grade (details provided after). This includes the use of TimesTen and open source technologies like JGroups, and also can be able to rely on Tangosol Coherence to provide session replication and efficient distributed cache. The enabler framework includes an OSA AS (i.e. Parlay JR 5.1 J2EE local interface and Parlay X 2.1). These are realized on SIP and Parlay JCA and can be realized on others as well. A JSR 116 SIP servlet converged container (SIP AS) can be used for IETF and IMS (ISC) deployments. The SIP servlet container also can include all the necessary components to deploy a vanilla IETF SIP network (i.e. proxy router, edge server, registrar/location, STUN server, support for ENUM server, application dispatcher).\n\nA set of enablers can be provided and implemented on SIP and Parlay. These enablers can include, for example, a presence enabler that follows OMA SIP/SIMPLE Presence, XDM and RLS enabler specifications. It is an out of the box IMS presence server and SIP/SIMPLE presence server. It can also aggregate presence from other networks (e.g. Parlay network presence) and provide northbound parlay X interface for application to use presence without participating to the presence network. Location data can be modeled as a presence attribute using an extensible presence data model. A multi-channel A2P and P2A messaging enabler can allow for sending and receiving messages in channels like SMS, MMS, email, IM (XMPP), SIP and others. Enablers can allow for multimedia and multiparty call control over SIP (internet and IMS) as well as Parlay. Enablers can provide service level charging that exposes online, offline charging balance inquiry and tracking, pre-rated charging etc integrated to Ro/Rf (AAA media gateways), Parlay and Oracle BRM. Others can be similarly integrated via JCA 1.5 adapters to be developed by third parties. A media server control enabler and voice access enablers that are the MRFC functions of MRF are able to control a wide variety of voiceXML servers, IVRs, announcement servers, and media servers (e.g. MSML, MSCML, MSCP, and MGCP). Protocols not available out of the box can be built on SIP AS or using JCA 1.5.\n\nIn one embodiment, the service delivery platform (SDP) is a standards-based horizontal platform that abstracts the underlying network resources, follows a service-oriented architecture, and realizes OSE. The platform can be a SOA platform based on J2EE, which includes a J2EE converged container and exposes various communication enablers. Enablers can include, for example, call control enablers and media server control enablers as discussed elsewhere herein. Further, interfaces can be exposed to applications and other enablers and resources for usage of various functionality. Some or all of the interfaces can be standard or standardizable, as is its behavior, such as may include OMA, Parlay, Parlay X, and WS components. For the purpose of the SDP, these enablers can provide various MVC (Mobile/Voice/Communications) functionality. The applications can be built using one or more enablers, and can add notions like a user interface (UI), user management, and charging, either in the code or via delegation and orchestration.\n\nIt is likely that the identities used for each of the multiple repositories will be different, even for a common customer. An identity management tool is able to federate the identities across the various repositories, identifying different identifiers for a single user and mapping those identities to a unified identifier that allows a user or application to access any of the data in any of the repositories using just the unified identifier, as the identity management tool then can determine the appropriate identifier(s) to use for the necessary system(s). The identity management tool also can pull information for the customer from the various repositories using the unified profile information, and can present that information to the user or application in a virtual directory wherein the data appears to come from a single source.\n\nSince access to the data is provided through a single access point in such a system, the virtual directory can be configured to launch a business process or workflow any time an attempt is made to update, create, or modify data in one of the data repositories from which the directory is gathering data. Such an approach can be policy based, in that a decision can be made through a combination of conditions and actions when to let the requests directly apply to the data and when to pass the flow elsewhere. For efficiency purposes, the changes to the data can sometimes be allows to take place directly when acceptable. This can still trigger policy notifications to data owner, who then still can run their own business processes/flows to ensure consistency and reconciliation, as well as cleansing or other business processes to take place accordingly. For example, if a user attempts to update a customer record with current address information, the virtual directory layer can âinterceptâ the update request and, instead of simply updating the address information in a customer records repository, the virtual directory can launch an appropriate workflow for the data field(s) to be updated. Various fields in the repositories can be associated with appropriate workflows, such that any time an operation is attempted on one of these fields, the appropriate workflow is launched. It also can be the case that an update is done and a flow or process is initiated as a result.\n\nFor the example where a user attempts to update address information for a customer, the user will attempt to update the information in the virtual directory. The virtual directory layer will then launch an âaddress updateâ workflow, or similar process, which can execute the appropriate business services, and notify the appropriate systems or repositories, whereby any system using the customer address, such as a billing system, operations system, or other system, will be updated accordingly. The workflow also then will update the appropriate field(s) in the customer records repository.\n\nIn some cases, the workflow may result in different data being written to the fields than was originally entered by the user or application, in modifying data owned by the system, or in a modifying of other data due to the effect of flows that have kicked in. For example, a customer might enter information for a new subscriber to a particular service. When a ânew subscriberâ workflow is launched, the workflow might detect that information for that customer already exists in a different database, such that the workflow can take any additional information from other repositories and utilize this information when ultimately updating the appropriate subscription database. In the event where a conflict comes up between information of different repositories, the workflow can cause a message to be generated for the user prompting the user to enter instructions for handling the conflict, or can initiate interaction with another application able to address the problem (e.g., starting an interaction with CRM in self service or with assistance of a CSR.\n\nIn an example where an application is attempting to create a new account, instead of simply storing new account information, a ânew accountâ workflow is launched that may launch a customer relationship management (CRM) system and populate the CRM system with the new information, and the business process also will update any appropriate network information, address information, billing information, records information, or other appropriate information in other systems or repositories. Thus, instead of simply doing the intended database update, the system intercepts the request and launches a workflow that ultimately results in the intended change to the database, but also ensures that other appropriate changes are made throughout the system and across the domain(s).\n\nIn one example, when a user enters an instruction to add a record, the adding of the record is not realized by a database SQL operation of adding a record, but instead results in kicking off a workflow associated with that operation. In one embodiment the system kicks off a Business Process Execution Language (BPEL) workflow, which results in the query being modified so that instead of being a query to the database of the form âcreate a new record,â the query essentially becomes a query to the OSS/BSS components to create a new customer. The OSS/BSS components, which can involve one or more complicated applications, essentially go through the logic and the necessary steps involved in creating a new customer. The creating of a new customer then also results in updating other systems, such as a support system and a billing system. Ultimately, the workflow results in creating the account for the customer, whereby the user can actually see that the account of the customer is created, but may not otherwise know that all the appropriate information in other systems also has been updated to reflect the new account.\n\nThe whole platform can be used with identity management services. In one example, a UUP (unified user profile) built on a Virtual Directory offers an identity managed single view of the information about the subscribers (or other principles) from OSS (e.g. assets in inventory), BSS (e.g. bill and subscriptions), network (e.g. HSS via Sh), Dynamic information (e.g. presence or location) and any other service level specific information (e.g. credentials, and application or enabler data).\n\nAs illustrated in the exemplary flow 300 of FIG. 3( a), an application 302 can issue a command to create a new account in a UUP 304. Instead of updating the appropriate repository, however, the UUP component 304 causes a service-oriented architecture (SOA) workflow to be launched which creates a business process which interacts with the OSS/BSS 306 to initiate an update to the OSS/BSS-owned repository (or repositories). Once the OSS/BSS repository is updated, the workflow continues such that the resulting updates in the OSS/BSS repository are reflected in the data hub 308 and UUP 304, and reflected in the virtual directory, in lieu of the updates originally intended for the UUP. The end result seen by the application is the same, but any corresponding actions are taken care of by the workflow. FIG. 3( b) illustrates another exemplary flow 350 wherein the UUP component update the data in a database component with SOA capabilities 352, wherein the database component itself is able to trigger (possibly as result of an update) a workflow that creates a business process which interacts with the OSS/BSS 306.\n\nIt is always possible that an update operation might fail. For example, a user may wish to create an account for a user, and if the system simply used SQL to create the appropriate records then the account would be created. When using a workflow, however, it is possible that the customer information first would be directed to a financial system wherein the customer might fail a credit check, for example, which would cause the customer to not qualify for the selected service. In such a case, the account will not be created in the database.\n\nIn one example, the creation of an account triggers updates in rating and billing information for the account, as well as a list of support data, etc. There also can be an updating of data not seen in the SDP and typically not known by the applications. There may be assets that are not aggregated in the UUP, which can be a valid choice for a particular operator. The new service may result in the shipping of a new phone, modem, or set-top box, for example. The service also can be reflected in another repository, which would not have been updated if the change had been done straight to the repository without the flows. In another example, a user phone or modem must be provisioned and service activated when the subscriber adds a subscription, which is the result of a flow that would not have occurred if the data were simply updated directly. Further detail is contained in U.S. patent Ser. No. 12/019,335, filed Jan. 24, 2008, entitled âIntegrating Operational and Business Support Systems with a Service Delivery Platform,â which is hereby incorporated herein by reference.\n\nThe unified user profile can utilize a UUP Enabler that provides an identity managed virtual view of all data about principals or customers encountered in the SDP. This information can include, for example, credentials, BSS/Subscriptions (including the data hub and subscription management), service specific data, network information (e.g., HSS), dynamic information (e.g., presence and location information), OMA XDM profiles, and OMA GSSM information when available, for subscribers, users, customers, third parties, or any other appropriate parties.\n\nThe data management of the virtual directory or unified repository can be controlled so that an operation on some or all of the data is not performed as a simple data management operation, but instead is converted into a least one request that is passed to another system(s) that will act on the request in ways that should ultimately similarly affect the data, but may affect other data or the context for the data.\n\nThe UUP utilizes the managed identity to provide an identity managed virtual view of all data about principals or customers encountered in the SDP. This information can include, for example, credentials, BSS/Subscriptions (including the data hub and subscription management), service specific data, network information (e.g., HSS), dynamic information (e.g., presence and location information), OMA XDM profiles, and OMA GSSM information when available, for subscribers, users, customers, third parties, or any other appropriate parties.\n\nThe data management of a virtual directory (i.e., one way to implement the aggregated view aspect of the UUP) can be controlled so that an operation on some or all of the data is not performed as a simple data management operation, but instead is converted into a least one request that is passed to another system(s) that will act on the request in ways that should ultimately similarly affect the data, but may affect other data or the context for the data. Information about principals or customers encountered in the SDP can include, for example, credentials, BSS/Subscriptions (including the data hub and subscription management), service specific data, network information (e.g., HSS), dynamic information (e.g., presence and location information), OMA XDM profiles, and OMA GSSM information when available, for subscribers, users, customers, third parties, or any other appropriate parties.\n\nFIG. 4 illustrates an implementation 400 of a unified user profile (UUP) 402 and virtual directory 406, wherein the UUP provides various applications in the SDP with concurrent network access to various directories and repositories/database management systems across the domain. Concurrent access can be provided via various methods, such as by using Identity Management (IdM), Lightweight Directory Access Protocol (LDAP v3), Directory Services Markup Language (DSML v2), and Diameter Sh and Cx. The UUP can include a highly extensible user profile with support for application-specific dynamic user views, and can provide support for Home Subscriber Server (HSS) and Subscription Location Function (SLF) functionality. The user profile data can be managed using any appropriate data management system, such as the Oracle RDBMS server available from Oracle Corporation of Redwood Shores, Calif.\n\nThe UUP 402 also can be unified with a customer data hub in order to provide for all service-specific data, not just BSS information but also information such as privacy and preference information. The UUP also can overlap with dynamic data provided by Home Subscriber Server (HSS) 404 and Subscription Location Function (SLF) services, which can provide information such as presence and location information. By providing a common access point, the virtual directory provided by the UUP tool can also provide access to information such as account and billing information, subscription information, provisioning settings, and identity authorization and security information, for example. Identity management provided for the data hub through the UUP can include functionality such as single sign-on, identity federation, and anonymization. The authorization enabler and BSS can be used to provide for charging, messaging, and other functionality of an enabler framework via the identity management tool.\n\nAn advantage to such an approach is that the common view is not done from a schema or data aggregation point of view. While schemas can certainly be combined and used with various embodiments, there is no need to combine schemas or aggregate data into a single data repository. Embodiments are able to combine views of the various data sources into a common view via the virtual directory, effectively combining information for a user from the various sources across the BSS and runtime of the network without the need to change any schemas or existing data models. The schemas can all be different, but the common view and identity management can hide these differences.\n\nSome telecommunications network providers offer multiple services to customers, including packages where services (e.g., voice, video, data, and wireless services) are bundled together in various combinations, where the customer can receive a single bill for the bundle. A provider also can offer a soft-client for broadband customers that combines presence, click-2-dial functionality, and instant messaging (IM), as well as identity management and cross-network features such as mid-call move.\n\nIn an example where a network provides network-aware presence information, a soft client can aggregate presence information across, for example, a personal computer (PC) and a network-enabled phone. If the user is available on the PC, the user can be sent an instant message, while if the user is available on the phone, a call can be made to the user's mobile phone number. The unified user profile thus can provide a shared view of identity information and present information across different networks, such as a Comcast DSL network for the PC and a Sprint network for the phone, and can update information for both systems using a workflow as described above.\n\nIn an example where a network allows for a mid-call move, a user can join a conference call from a VoIP phone (or soft client) over a broadband connection, for example, and 30 minutes into the call can enter a code such as *70 to transfer the call to the user's mobile. A conference application can automatically call the user cell phone in 30 seconds, and can make an announcement on the conference call that the user will rejoin in 30 seconds. Such functionality is possible due to the shared view and identity across the cable and mobile networks, and the ability to launch a workflow to interact with both. The user identity is managed/federated over the networks, even for different providers, but can allow the bill and preferences to be shared between the providers and networks. The charges also can reflect one service usage instance on the two networks, instead of a separate instance on each network.\n\nIn an example where a network allows for subscription management, a customer is signed up and subscribed to services via BSS, and the SDP/services are provisioned. A new feature is added to an update of the service based on presence of the customer. The service then can derive its behavior with respect to the customer by checking information such as the presence of the customer, HSS information, and the subscription and address information in the customer data hub.\n\nIn an example where a network allows for the maintenance of service specific data, a Content Delivery Suite (CDS) application is built as a set of flows using the SDP. Further information can be obtained by reviewing U.S. patent application Ser. No. 11/138,844, filed May 25, 2005, entitled âPlatform and Service for Management and Multi-Channel Delivery of Multi-Types of Contents,â which is hereby incorporated herein by reference. A content purchase history is stored in the UUP as service-specific information. The service-specific information can be available to many services of the CDS, such as a content management/DAM application for campaign and recommendations, BSS for marketing campaign designs, a third party portal to support reporting and/or auditing, a DRM application to determine if rights can be provided in answer to a request, download/delivery/streaming services to determine if a download is authorized, and a CRM process to analyze credit request or complaints. With managed federated identities (e.g., anonymization) third parties can access data for their own campaigns or recommendations while the service provider maintains the relationship with the subscriber.\n\nIn an example where a network allows for identity management using a UUP, an application can request user attributes, where the request uses an identity known by application per identity management. The request can follow an Identity Governance Framework (IGF) to which the UUP complies, whereby client information can be passed as requests as expected by the IGF.\n\nIn one embodiment, a single virtual data source of user identity includes âNorthboundâ interfaces (e.g., Java, SOAP/HTTP, LDAP, Diameter (Sh/Dh), Diameter (Cx/Dx), OMA GSSM, XCAP (OMA XDM profile enabler)) and âSouthboundâ protocols (e.g., LDAP, XCAP, JDBC, Diameter (Sh/Dh), Diameter (Cx/Dx), HSS, SLS, and FW to adapt to dynamic resources such as enablers, NW resources, and applications). The source can include various IMS profiles (schemas (TS 23.008) and schema extensibility), TMF SID/customer data model support (for both northbound and southbound), subscriber management features (e.g. as applications) including integration with OSS/BSS.\n\nA system in accordance with various embodiments also can meet telecommunications-grade performance requirements, such as a throughput of 750,000 users per node, 30,000,000 users in a cluster, and a user profile size at least 15K to 20K (e.g., base IMS profile). A system also can have a latency in the 99th percentile, with look-up times of less than 5 ms, and high availability with no single point of failure, geographic redundancy, failover, active-active and active-passive topologies, and rolling upgrades. The system also can have local persistency in a distributed architecture. The system also can offer high interoperability, such as support for third party HSS, HLR, AuC with SLF; CSCF (Ericsson, Nokia); SIP A/S (WLSS, OCMS); and BSS/OSS systems/Data hub (e.g., Siebel). Such a system can ensure consistency of data and context instead of having inconsistent data due to data updates that do not otherwise ensure that other necessary data or other processes have been handled as needed.\n\nIn an exemplary application, data about the subscription and account information of a user is managed in the service provider environment through the BSS (Business Support System). The workflows generated can include specific action kick flows such as TeleManagement Forum (TMF) enhanced Telecom Operations Map (eTOM) flows. These flows perform actions that are stored in relevant data hubs regarding bills, subscriptions, accounts, etc. These flows may also kick other flows such as flows for a provisioning of resources, updates of inventories and catalogs, etc. Information updates then can be stored in the respective data hub.\n\nIntegration also can allow for linking with the unified user profile to perform updates via the BSS/OSS systems. As illustrated in the exemplary architecture 500 of FIG. 5, the UUP (built on the virtual directory) is able to aggregate the view of items and delegate functions such as subscription management via calls to the BSS/OSS systems, which can perform the appropriate updates. Such an approach can utilize customizable schema mapping, and customizable distributed caching and pre-fetching. The northbound interfaces also can be wrapped and transformed as needed. Northbound interfaces can include Java, SOAP/HTTP, LDAP, Diameter, OMA GSSM, and XCAP interfaces, for example. Southbound protocols can include LDAP, XCAP, JDBC, Web service, and Diameter protocols, for example. FIG. 6 illustrates an exemplary UUP architecture 600 including an access layer, virtual directory layer, and adapter layer between the interfaces and system components.\n\nSome vendors or operators today deploy subscriber management systems or mechanisms (e.g., architecture, schema, interfaces), such as are specified by standards bodies such as OMA, 3GPP, and TISPAN, specify subscription management mechanisms. These systems typically expose some subscription management to applications written by the service provider, third party developers, or at the level of the network, but none are integrated with various workflows (such as TMF flows). As a result, if an application creates an account or adds a subscription, for example, this information may be reflected in the data repository that may itself be shared with the OSS or BSS. However, flows are not activated to ensure updates are done and processes activated as necessary, and as a result other systems or data may not have been appropriately provisioned. As a result, the account may not have a bill record properly associated therewith. Further, a CRM or support system may not be aware of a user subscription to a service or particular settings and/or preferences, which can cause significant problems in the service provider domain.\n\nFIG. 7 is a block diagram illustrating components of an exemplary operating environment in which various embodiments of the present invention may be implemented. The system 700 can include one or more user computers, computing devices, or processing devices 712, 714, 716, 718, which can be used to operate a client, such as a dedicated application, web browser, etc. The user computers 712, 714, 716, 718 can be general purpose personal computers (including, merely by way of example, personal computers and/or laptop computers running a standard operating system), cell phones or PDAs (running mobile software and being Internet, e-mail, SMS, Blackberry, or other communication protocol enabled), and/or workstation computers running any of a variety of commercially-available UNIX or UNIX-like operating systems (including without limitation, the variety of GNU/Linux operating systems). These user computers 712, 714, 716, 718 may also have any of a variety of applications, including one or more development systems, database client and/or server applications, and Web browser applications. Alternatively, the user computers 712, 714, 716, 718 may be any other electronic device, such as a thin-client computer, Internet-enabled gaming system, and/or personal messaging device, capable of communicating via a network (e.g., the network 710 described below) and/or displaying and navigating Web pages or other types of electronic documents. Although the exemplary system 700 is shown with four user computers, any number of user computers may be supported.\n\nIn most embodiments, the system 700 includes some type of network 710. The network may can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially-available protocols, including without limitation TCP/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, the network 710 can be a local area network (âLANâ), such as an Ethernet network, a Token-Ring network and/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (âVPNâ); the Internet; an intranet; an extranet; a public switched telephone network (âPSTNâ); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, GRPS, GSM, UMTS, EDGE, 2G, 2.5G, 3G, 4G, Wimax, WiFi, CDMA 2000, WCDMA, the Bluetooth protocol known in the art, and/or any other wireless protocol); and/or any combination of these and/or other networks.\n\nThe system may also include one or more server computers 702, 704, 706 which can be general purpose computers, specialized server computers (including, merely by way of example, PC servers, UNIX servers, mid-range servers, mainframe computers rack-mounted servers, etc.), server farms, server clusters, or any other appropriate arrangement and/or combination. One or more of the servers (e.g., 706) may be dedicated to running applications, such as a business application, a Web server, application server, etc. Such servers may be used to process requests from user computers 712, 714, 716, 718. The applications can also include any number of applications for controlling access to resources of the servers 702, 704, 706.\n\nThe Web server can be running an operating system including any of those discussed above, as well as any commercially-available server operating systems. The Web server can also run any of a variety of server applications and/or mid-tier applications, including HTTP servers, FTP servers, CGI servers, database servers, Java servers, business applications, and the like. The server(s) also may be one or more computers which can be capable of executing programs or scripts in response to the user computers 712, 714, 716, 718. As one example, a server may execute one or more Web applications. The Web application may be implemented as one or more scripts or programs written in any programming language, such as JavaÂ®, C, C# or C++, and/or any scripting language, such as Perl, Python, or TCL, as well as combinations of any programming/scripting languages. The server(s) may also include database servers, including without limitation those commercially available from OracleÂ®, MicrosoftÂ®, SybaseÂ®, IBMÂ® and the like, which can process requests from database clients running on a user computer 712, 714, 716, 718.\n\nThe system 700 may also include one or more databases 720. The database(s) 720 may reside in a variety of locations. By way of example, a database 720 may reside on a storage medium local to (and/or resident in) one or more of the computers 702, 704, 706, 712, 714, 716, 718. Alternatively, it may be remote from any or all of the computers 702, 704, 706, 712, 714, 716, 718, and/or in communication (e.g., via the network 710) with one or more of these. In a particular set of embodiments, the database 720 may reside in a storage-area network (âSANâ) familiar to those skilled in the art. Similarly, any necessary files for performing the functions attributed to the computers 702, 704, 706, 712, 714, 716, 718 may be stored locally on the respective computer and/or remotely, as appropriate. In one set of embodiments, the database 720 may be a relational database, such as Oracle 10g, that is adapted to store, update, and retrieve data in response to SQL-formatted commands.\n\nFIG. 8 illustrates an exemplary computer system 800, in which various embodiments of the present invention may be implemented. The system 800 may be used to implement any of the computer systems described above. The computer system 800 is shown comprising hardware elements that may be electrically coupled via a bus 824. The hardware elements may include one or more central processing units (CPUs) 802, one or more input devices 804 (e.g., a mouse, a keyboard, etc.), and one or more output devices 806 (e.g., a display device, a printer, etc.). The computer system 800 may also include one or more storage devices 808. By way of example, the storage device(s) 808 can include devices such as disk drives, optical storage devices, solid-state storage device such as a random access memory (âRAMâ) and/or a read-only memory (âROMâ), which can be programmable, flash-updateable and/or the like.\n\nThe computer system 800 may additionally include a computer-readable storage media reader 812, a communications system 814 (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory 818, which may include RAM and ROM devices as described above. In some embodiments, the computer system 800 may also include a processing acceleration unit 816, which can include a digital signal processor DSP, a special-purpose processor, and/or the like.\n\nThe computer-readable storage media reader 812 can further be connected to a computer-readable storage medium 810, together (and, optionally, in combination with storage device(s) 808) comprehensively representing remote, local, fixed, and/or removable storage devices plus storage media for temporarily and/or more permanently containing, storing, transmitting, and retrieving computer-readable information. The communications system 814 may permit data to be exchanged with the network and/or any other computer described above with respect to the system 800.\n\nThe computer system 800 may also comprise software elements, shown as being currently located within a working memory 818, including an operating system 820 and/or other code 822, such as an application program (which may be a client application, Web browser, mid-tier application, RDBMS, etc.). It should be appreciated that alternate embodiments of a computer system 800 may have numerous variations from that described above. For example, customized hardware might also be used and/or particular elements might be implemented in hardware, software (including portable software, such as applets), or both. Further, connection to other computing devices such as network input/output devices may be employed.\n\nStorage media and computer readable media for containing code, or portions of code, can include any appropriate media known or used in the art, including storage media and communication media, such as but not limited to volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage and/or transmission of information such as computer readable instructions, data structures, program modules, or other data, including RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, data signals, data transmissions, or any other medium which can be used to store or transmit the desired information and which can be accessed by the computer. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the various embodiments.\n\nThe specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."
    }
}