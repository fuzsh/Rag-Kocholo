{
    "id": "dbpedia_2232_3",
    "rank": 34,
    "data": {
        "url": "https://copasi.org/static/API_Documentation/",
        "read_more_link": "",
        "language": "en",
        "title": "COPASI API: COPASI: biochemical network simulator",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://copasi.org/static/API_Documentation/doxygen.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "COPASI is a software application for simulation and analysis of biochemical networks and their dynamics. COPASI is a stand-alone program that supports models in the SBML standard and can simulate their behavior using ODEs or Gillespie's stochastic simulation algorithm; arbitrary discrete events can be included in such simulations.\n\nCOPASI carries out several analyses of the network and its dynamics and has extensive support for parameter estimation and optimization. COPASI provides means to visualize data in customizable plots, histograms and animations of network diagrams. (list of features).\n\nFollow us on Mastodon.\n\nDownload COPASI\n\nPrecompiled versions of COPASI are available for all operating systems on the COPASI Homepage.\n\nBuilding COPASI\n\nCOPASI's sources are available from our github repository. These sources are written in standard C++ and will compile on Linux, OS X and Windows.\n\nDependencies\n\nTo start compiling COPASI we recommend to use the copasi-dependencies package.The dependency package compiles all the dependencies necessary for COPASI, they include clapack, cppunit, expat, raptor libSEDML, libsbml, SBW as well as the Qt libraries QWT, QWT3D and the Qt MML widget. Instructions for building the dependencies are described here:\n\nGeneral Instructions\n\nCompiling COPASI\n\nOnce the dependencies have been built, COPASI is easily compiled using CMake:\n\ngit clone https://github.com/copasi/COPASI mkdir build_copasi cd build_copasi cmake -DBUILD_GUI=OFF -DCMAKE_INSTALL_PREFIX=~/copasi -DCOPASI_DEPENDENCY_DIR=../copasi-dependencies/bin ../COPASI make make install\n\nIn the above ../copasi-dependencies/bin is the location of the build folder of the compiled copasi-dependencies. The option BUILD_GUI=OFF builds only the command line version of COPASI (aka CopasiSE). To build the graphical frontend (aka CopasiUI), and having Qt 4 or 5 installed, the option would need to be BUILD_GUI=ON. In that case you'd additionally provide an option SELECT_QT=Qt5 (or SELECT_QT=Qt4) for COPASI to look for the Qt libraries. (To help finding the Qt version you selected, you should specify the Qt5_DIR=<dir> variable to point to the lib/cmake/Qt5 directory of the Qt5 installation. Alternatively for Qt4 you can set the QT_DIR=<dir> variable to point to your Qt4 installation.)\n\nThe option CMAKE_INSTALL_PREFIX=~/copasi specifies, that COPASI ought to be installed in the current users home directory in a subfolder copasi. The path ../COPASI is the source directory of COPASI that has been created by the git clone command in the first statement.\n\nThere are many more compile options available, options for building the language bindings as well as options to enable some experimental features that are not yet available in the stable builds that are released publicly. To view the complete set of options, start the graphical cmake frontend in the continuing from the above command this would be done with:\n\ncmake-gui ../COPASI\n\nThe correct version number\n\nThe COPASI version number you will see in your application is generated during the build process. For this to work we install git hooks, so it gets updated automatically, by running:\n\n./gitTools/initTools\n\nonce from the COPASI source dir (which will set up the paths to astyle, gawk, dos2unix and wget). This helps us keep commits formatted correctly from different operating systems. Once that is set up, a call to:\n\n./gitTools/UpdateCopasiVersion\n\nwill update the <copasi/CopasiVersion.h> to match that of the selected branch. That\n\nLinking a C++ program against the COPASI API\n\nTo link your own program against the COPASI C++ API you would first build COPASI as described above however, with an additional CMake option -DCOPASI_INSTALL_C_API=ON. Thus the full configure / make / install commands from above would be:\n\ngit clone https://github.com/copasi/COPASI mkdir build_copasi cd build_copasi cmake -DCOPASI_INSTALL_C_API=ON -DBUILD_GUI=OFF -DCMAKE_INSTALL_PREFIX=~/copasi -DCOPASI_DEPENDENCY_DIR=../copasi-dependencies/bin ../COPASI make make install\n\nNow additionally to the COPASI SE executable being built, also all COPASI header files and the COPASI (static) library will be installed into the CMAKE_INSTALL_PREFIX (thus in the example above header files will end up in ~/copasi/include and libraries in ~/copasi/lib). We also export a CMAKE configuration that you can import for your own CMAKE projects. That way you only need to add a line like:\n\nfind_package(libCOPASISE-static CONFIG REQUIRED)\n\nto the CMakeLists.txt file of your project. And later link your project against libCOPASISE-static. This will then automatically link against all the libraries that the COPASISE library was linked against. In order for CMake to find the configuration you would either have to include the lib/cmake folder of your install prefix into your projects CMAKE_PREFIX_PATH variable or specify an option libCOPASISE-static_DIR with the folder of the config file when configuring your project. For the prefix specified above this would be:\n\n-DlibCOPASISE-static_DIR=~/copasi/lib/cmake\n\nThe gist of a complete example CMakeList.txt is also available.\n\nFeedback\n\nTo submit feedback, or bug reports, please use the COPASI Tracker, or our mailing list.\n\nLicense\n\nThe packages available on this page are provided under the Artistic License 2.0, which is an OSI approved license. This license allows non-commercial and commercial use free of charge.\n\nGit maintenance\n\nRelease branches:\n\nNaming: Version-$major.$minor\n\nStart release branch\n\nTo create a new release branch check out the starting branch which is normally develop:\n\ngit checkout develop\n\ngit flow release start <name>\n\ngit push origin\n\nFinish release branch\n\nTo finish a release:\n\ngit checkout release/<name>\n\ngit flow release finish <name>\n\ngit push\n\nTagging snapshots\n\nIn order to tag the latest commit in the current branch as a snapshot execute:\n\ngitTools/UpdateCopasiVersion --registerBuild\n\nThe above command will automatically select the next tag of the format: Build-N and push the tag to the upstream repository.\n\nBuilding API documentation\n\nTo build the API documentation doxygen can be used. here the command line for generating the documentation after a git checkout:\n\nPROJECT_NUMBER=4.40.278 doxygen -x COPASI.doxyfile > Doxyfile && doxygen\n\nThis will fix the version number of the generated files to the one specified in the environment variable and generate a local Doxygen file with which it runs doxygen. The resulting documentation is placed in ./doc/html.\n\nTo update it on the copasi.github.io project you'd run from the copasi.github.io folder:"
    }
}