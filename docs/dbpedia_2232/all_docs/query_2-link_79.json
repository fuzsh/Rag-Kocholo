{
    "id": "dbpedia_2232_2",
    "rank": 79,
    "data": {
        "url": "https://www.biorxiv.org/content/10.1101/239004v2.full",
        "read_more_link": "",
        "language": "en",
        "title": "Tellurium Notebooks - An Environment for Dynamical Model Development, Reproducibility, and Reuse",
        "top_image": "https://www.biorxiv.org/sites/default/files/images/biorxiv_logo_homepage7-5-small.png",
        "meta_img": "https://www.biorxiv.org/sites/default/files/images/biorxiv_logo_homepage7-5-small.png",
        "images": [
            "https://www.biorxiv.org/sites/default/files/biorxiv_article.jpg",
            "https://www.biorxiv.org/sites/all/modules/contrib/panels_ajax_tab/images/loading.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F1.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F1.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F2.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F2.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F3.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F3.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F4.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F4.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F5.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F5.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F6.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F6.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F7.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F7.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F8.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F8.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F9.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F9.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F10.medium.gif",
            "https://www.biorxiv.org/content/biorxiv/early/2017/12/30/239004/F10.medium.gif",
            "https://www.biorxiv.org/sites/all/modules/highwire/highwire/images/twitter.png",
            "https://www.biorxiv.org/sites/all/modules/highwire/highwire/images/fb-blue.png",
            "https://www.biorxiv.org/sites/all/modules/highwire/highwire/images/linkedin-32px.png",
            "https://www.biorxiv.org/sites/all/modules/highwire/highwire/images/mendeley.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "J Kyle Medley",
            "Kiri Choi",
            "Matthias König",
            "Lucian Smith",
            "Stanley Gu",
            "Joseph Hellerstein",
            "Stuart C. Sealfon",
            "Herbert M Sauro"
        ],
        "publish_date": "2017-12-30T00:00:00",
        "summary": "",
        "meta_description": "bioRxiv - the preprint server for biology, operated by Cold Spring Harbor Laboratory, a research and educational institution",
        "meta_lang": "en",
        "meta_favicon": "https://www.biorxiv.org/sites/default/files/images/favicon.ico",
        "meta_site_name": "bioRxiv",
        "canonical_link": "https://www.biorxiv.org/content/10.1101/239004v2",
        "text": "Abstract\n\nThe considerable difficulty encountered in reproducing the results of published dynamical models limits validation, exploration and reuse of this increasingly large biomedical research resource. To address this problem, we have developed Tellurium Notebook, a software system that facilitates building reproducible dynamical models and reusing models by 1) supporting the COMBINE archive format during model development for capturing model information in an exchangeable format and 2) enabling users to easily simulate and edit public COMBINE-compliant models from public repositories to facilitate studying model dynamics, variants and test cases. Tellurium Notebook, a Python–based Jupyter–like environment, is designed to seamlessly inter-operate with these community standards by automating conversion between COMBINE standards formulations and corresponding in–line, human–readable representations. Thus, Tellurium brings to systems biology the strategy used by other literate notebook systems such as Mathematica. These capabilities allow users to edit every aspect of the standards–compliant models and simulations, run the simulations in–line, and re–export to standard formats. We provide several use cases illustrating the advantages of our approach and how it allows development and reuse of models without requiring technical knowledge of standards. Adoption of Tellurium should accelerate model development, reproducibility and reuse.\n\nAuthor summary There is considerable value to systems and synthetic biology in creating reproducible models. An essential element of reproducibility is the use of community standards, an often challenging undertaking for modelers. This article describes Tellurium Notebook, a tool for developing dynamical models that provides an intuitive approach to building and reusing models built with community standards. Tellurium automates embedding human–readable representations of COMBINE archives in literate coding notebooks, bringing to systems biology this strategy central to other literate notebook systems such as Mathematica. We show that the ability to easily edit this human–readable representation enables users to test models under a variety of conditions, thereby providing a way to create, reuse, and modify standard–encoded models and simulations, regardless of the user’s level of technical knowledge of said standards.\n\nIntroduction\n\nMultiscale dynamical modeling requires the ability to build large, comprehensive, and complex models of biological systems. Examples include the Mycoplasma genitalium whole–cell model [1] and the central metabolism of E. coli [2]. These models are often composed of many submodels. Typically, submodels are developed and validated by other research teams. Indeed, without the ability to reuse existing models, constructing larger models becomes impractical.\n\nBeing able to reuse tools and techniques developed by others is a hallmark of science. Poor reproducibility of biomedical experimental studies has been recognized as a major impediment to scientific progress [3,4]. Much of the focus on poor reproducibility has been on wet lab experiments. However, barriers to reproducibility is also a significant problem in computational studies [5–8]. In recognition of this problem, reproducibility has become a central focus of scientific software [9,10]. The general experience of researchers in the field of modeling suggests that a similar problem in poor reproducibility also exists for biomodels. Difficulty in model reproducibility can result from a published model not being deposited in a public repository or from differences in the deposited model and the actual model used for published simulations. In addition, it is difficult for researchers to utilize and modify public models because the standards are not human–readable. This state of affairs imperils continued progress with developing and exploiting biological models.\n\nWe propose that reproducible computational studies must satisfy two requirements. First, they must be transparent; that is, researchers must be able to inspect and understand the details of the model and the computational experiments. With transparency, researchers can check assumptions and explore variations in computational studies. Second, computational studies must be exchangeable; that is, it must be possible for a study done in one computational environment to be done in another computational environment and produce comparable results. For a study to be exchangeable means that other researchers can make use of and build on the published results in their computational environment.\n\nIn order to be transparent and exchangeable, a computational model and any simulation experiments must be encoded in a standard format that separates the reusable part of a model and its simulations (i.e. parameters, processes, and kinetics) from the implementation used to simulate it (i.e. the numerical methods and algorithms used to generate results). Models can be described using the Synthetic Biology Markup Language (SBML) [11] or CellML [12] standards. These standards support models based on ordinary differential equations (ODEs), stochastic master equations, and constraint-based modeling [13]. Simulations can be described using the Simulation Experiment Description Markup Language (SED–ML) [14], which encodes the types of simulations, either time-course simulations or steady state computations, that should be run on a model. SED–ML allows specifying the exact numerical algorithms needed to run a simulation using the KiSAO ontology [15], which includes widely used ODE (e.g. LSODA [16,17], CVODE [18]) and stochastic solvers (e.g. Gillespie direct method [19], Gibson algorithm [20]).\n\nIn order to facilitate exchanging models and simulations between software tools, SED–ML simulations and SBML / CellML models can be packaged together using COMBINE archives [21]. However, few authoring tools exist for SED–ML and COMBINE archives [22,23]. Furthermore, existing resources require technical knowledge of standards, restricting use of these standards by the modeling community at large. Therefore, an authoring tool is needed that allows a wider range of users to create and edit COMBINE archives containing both models and simulations. We propose that the authoring tool should satisfy five requirements:\n\nIt should represent the models or simulation specifications in a human–readable form.\n\nIt should allow the user to easily edit this human–readable representation.\n\nIt should allow the user to provide narrative, annotations, or comments in order to improve transparency.\n\nIt should translate the specifications into an implementation that can be used to run simulations.\n\nIt must be capable of repackaging the model and/or simulation in a standard form that is usable by other tools.\n\nTo address these requirements, we have developed the Tellurium Notebook environment, which extends the literate notebook concept used by tools like Jupyter [24] and Mathematica [25] to support community standards in systems biology. Whereas Jupyter notebooks contain code and narrative cells, Tellurium adds a third cell type for representing models and simulations encoded as standards. Our tool allows modeling studies to be constructed in a notebook environment and exported using community standards. This workflow provides both transparency, through a literate notebook, and exchangeability, through seamless, fluid support for standards.\n\nTellurium supports embedding human–readable representations of SBML [26] and SED–ML [27] directly in cells. These cells can be exported as COMBINE archives which are readable by other tools. We refer to this human–readable representation as inline OMEX (after Open Modeling and EXchange, the encoding standard used by COMBINE archives). Inline OMEX cells operate in much the same way as code cells, i.e. they have syntax highlighting and are executable. Executing an inline OMEX cell runs all SED–ML simulations in the cell, producing any plots or reports declared in the SED–ML. A major advantage of this approach is that it offers a means of authoring transparent, exchangeable modeling studies without requiring technical knowledge of standards.\n\nResults\n\nWe demonstrate the benefits for reproducibility provided by Tellurium Notebook with case studies. In the first case study, we explore the impact of variations in the value of a parameter in a model of yeast. Such explorations are frequently done to determine if a model is applicable to conditions beyond those in the original model, an important consideration for testing model validity. The second case study evaluates if a model implementation produces results that are comparable to those in the original study via a series of tests which cover important dynamical properties of the model.\n\nCase Study 1: Assessing Previously Unexplored Model Parameters\n\nIn order to meet our requirements for reproducibility, it is not sufficient to simply recreate a simulation. Rigorous reproducibility requires the ability to reuse, expand, and test existing models under a variety of circumstances. This first case study shows how Tellurium facilitates conducting new experiments with an existing model, including the packaging of the model and the experiments as a COMBINE archive. The study is based on a model of autonomous metabolic oscillations in yeast and associated numerical studies [28]. The model has a cooperativity parameter m for which no specific justification is provided. We explore a range of values of m to understand how this parameter influences the dynamics in the model.\n\nWhen grown in continuous culture, yeast exhibit oscillations that can be maintained for months and can cause the temporal separation of many cellular functions in a synchronized way [29]. This type of dynamics belongs to a broader class of coupled oscillators that are thought to be highly important in the organization of circadian rhythms and play a role in the regulation of diurnal physiological activity in various species [30,31]. Wolf, et al. [28] developed a model that uses metabolic coupling mediated in part by the H2S pathway, one of the known contributors to respiratory oscillations in yeast [29], to explain experimentally observed synchronized oscillations in yeast cultures.\n\nThe model contains 21 reactions and is available via the BioModels repository as BI0MD0000000090 [32]. The reaction v11a is a key part of the H2S pathway. As shown in Fig 1, standard–encoded SBML for this reaction is difficult to decipher, much less comprehend. As with other authoring tools, Tellurium provides a concise, human–readable abstraction of this encoding. However, unlike other tools, this abstraction covers the entire SBML model and even covers entire COMBINE archives, as we show shortly. We focus on the human readable representation of the reaction v11a, including the reaction kinetics using the Hill coefficient m.\n\nClearly, readability is essential for model transparency. However, readability is essential for model reuse as well. To demonstrate this, we convert this SBML–only model into a COMBINE archive containing both SBML portions describing the model and SED–ML portions describing the simulation. We then show how Tellurium’s human-readable format permits easy modification of the published model and simulations contained in the COMBINE archive.\n\nIn order to create a SED–ML specification for this model, we need to define four steps in the workflow, which correspond to distinct elements in SED–ML: (1) model definition, (2) simulation, (3) task specification, and (4) output generation. For (1), models can be defined in Tellurium’s human–readable format by referencing SBML or CellML files in the same COMBINE archive, with the option of including parameter replacements. For (2), SED–ML simulations can be either timecourse simulations or steady state computation, and can reference a specific algorithm (e.g. LSODA), or a generic implementation using the KiSAO ontology [15]. Tellurium uses predefined keywords such as lsoda (an ODE solver implementation [34]) to refer to popular implementations. In SED–ML, simulations are specified independently from models. This allows model and simulation elements to be reused in different combinations. For (3), SED–ML uses task elements to describe these combinations. Finally, the output elements of (4) can be plots or reports and allow users to access the output of tasks. Tellurium’s human–readable format allows defining a SED–ML model by instantiating the same SBML model with different parameter values (m in this example) using the syntax: mymodel = model “wolf2001” with paraml=value2, param2=value2 … with the param/value pairs being replaced by the corresponding parameter ids and values respectively. We use this syntax to instantiate five copies of the model and explore the values m =1, 2, 4, 8, 16. Since we do not know a priori if the value of m affects the timescale of the dynamics, we also create two simulations using different durations. Finally, we create a task for each model/simulation combination and plot the results on their respective timescales. Fig 2 shows that the value of m drastically affects the dynamical behavior of the system, abolishing the periodicity of the oscillations at m = 8 and ceasing them entirely at m = 16. Smaller values of m also affect the phase and amplitude of the oscillations.\n\nThis case study shows that Tellurium provides an efficient means of converting SBML models into exchangeable COMBINE archives containing simulation components. Furthermore, COMBINE archives can contain important dynamical information about the model, such as the influence of the parameter m that we explored in this study. In order to demonstrate exchangeability of this study, we have exported it to the SED-ML Web Tools [22] (Fig S1) and iBioSim [35] (Fig S2).\n\nCase Study 2: Reproducibility Through In–depth Variational Studies\n\nReproducibility requires that a model implementation produces results consistent with the original study, especially if a different authoring tool is used. In order to provide criteria for judging whether a model reproduction is consistent with the original, a set of testing criteria are required, similar to the concept of unit testing in software. However, researchers seldom perform extensive checks on the dynamics of models before using them. This is due in part to the lack of tool support for easily modifying and producing variants of models and simulations encoded in exchangeable formats. Tellurium’s authoring features enable modelers to encode dynamical unit tests in COMBINE archives, thereby providing a way to verify that a model has been correctly reproduced.\n\nFor this case study, we reproduce a highly–detailed model of syncytial nuclear divisions in the Drosophila embryo [36] through testing the model’s dynamics under different conditions. In many insect species, the embryo enters a period of rapid mitotic division without cytokinesis [37] immediately following fertilization. In Drosophila, 13 of these divisions occur within 3 hours of fertilization [36]. These divisions are regulated by metaphase promoting factor (MPF), a complex between cyclin (specifically the cyclin CycB in this model) and cyclin–dependent kinases (Cdk). CycB subunits tend to be the limiting factor in complex formation, and are thought to regulate mitotic division. CycB availability is controlled by the anaphase promoting complex (APC), which targets CycB for degradation. However, in Drosophila, the levels of CycB appear to remain high during the first 8 mitotic divisions [38]. This observation can be reconciled with known mechanisms by assuming that CycB degradation only occurs in the vicinity of the mitotic spindle [36,39,40], despite the absence of a nuclear envelope during the mitotic divisions. To account for this hypothetical local degradation of CycB, the model artificially separates the cytoplasm into two “compartments,” with a cytoplasmic compartment representing the cell and a nuclear compartment representing the volume in the vicinity of the mitotic spindle.\n\nAs a starting point, we use the COMBINE archive encoding of this model by Scharm and Tourè [41]. This archive contains SBML derived from biomodel BI0MD00000001441, which is intended to reproduce Fig 1 of [36]. However, the archive does not contain more extensive tests of the model’s dynamics, such as whether the model can be used to reproduce several other simulations described in the paper. The initial variant encoded by the COMBINE archive and shown in Fig 3B and C is based on a model with a constant level of the phosphatase String, whereas in reality String levels change over the course of the mitotic cycles. String regulates MPF via a positive feedback loop, and has been shown to peak at the seventh or eighth cycle of the mitotic divisions [36]. To account for this, Calzone et al. [36] posited that String mRNA is degraded by a hypothetical factor “X,” causing the synthesis rate of String to drop over time. Therefore, we have modified the SED–ML of the original COMBINE archive [41] as follows to include the synthesis and degradation of String. We are able to reproduce Fig 3 of [36] by making these modifications to the original COMBINE archive:\n\nEnable synthesis and degradation of String by setting the parameters ksstg=0.02 and kdstg=0.015 respectively.\n\nSet the initial concentration of total String to zero by setting StgPc=0.\n\nCompute the total amount of unphosphorylated String by adding the rule StgT:= (1 – N*E_1)*Stgc + N*E_1*Stgn.\n\nCompute the total amount of String in the cell by adding the rule StringTotal:= StgPT + StgT.\n\nTellurium makes it easy to encode both the original variant, without String synthesis and degradation, and the variant including these terms in a COMBINE archive [43]. Fig 3 shows the results of executing this COMBINE archive in Tellurium. We have thus expanded the dynamical test cases for this model, as it now reproduces two simulations from two different variants described by the original authors (Fig 1 and 3 of [36]), enabling better coverage of the model’s dynamics.\n\nIn order to gain insight into the regulatory mechanism controlling the mitotic divisions, and understand the transitions that control the exact number of these divisions, Calzone et al. performed a one–parameter bifurcation analysis [36]. Bifurcation analyses probes the number and position of steady states and other types of attractors as a function of a parameter. The oscillations shown in Fig 3 are the result of discrete division events, and the behavior shown does not represent a limit cycle. However, the model can be shown to exhibit limit cycle behavior by 1) removing all discrete events and 2) fixing the number of divisions by introducing the variable C as a cycle counter. The number of nuclear compartments is then given by N = 1.95C (1.95 is a scaling factor described in [36]). For a given cycle number C, MPF exhibits limit cycle oscillations, although the amplitude and period of these oscillations changes with the cycle number. At low cycle number, Calzone et al. observed that these oscillations were dominated by the negative feedback effect of cyclin degradation, whereas for large cycle number (C ≥ 12), positive feedback via control of phosphorylated MPF by the kinase Wee and phosphatase String contributes to the oscillations.\n\nSED–ML does not support bifurcation analysis, precluding us from reproducing that part of the study in an exchangeable format. However, it is still possible to test the change in regulatory shift from negative to positive feedback. Instead of a bifurcation diagram, we compare the limit cycle behavior of the original model to a model variant with reduced Wee and String activation and deactivation rates. This slows the timescale of the positive feedback component of the model. Fig 4 compares the behavior of the original model at early and late cycle numbers with the variant containing attenuated positive feedback. Whereas the normal model exhibits stable limit cycle oscillations at both C = 1 and C = 12, the oscillations in the attenuated model are transient at late cycles (C = 12) but not at early cycles (C = 1). This observation suggests that String and Wee dynamics are indeed crucially important for late cycle oscillations, but not for early cycle oscillations, confirming the shift in regulatory mechanism. These simulation thus form a third set of unit tests for the model, encoded as a COMBINE archive [44].\n\nIn summary, using Tellurium’s editing capabilities, we have created an extensive set of unit tests for dynamical behavior this model, which we exported as a COMBINE archive and imported into another tool as shown in Fig S3. Creating these tests required a means of quickly editing and expanding upon both the SBML and SED–ML embedded in the COMBINE archive. Tellurium’s notebook approach allows us to satisfy these requirements, and provides an integrated workflow for testing the dynamical behavior of the model.\n\nInteroperability Concerns & Test Cases\n\nIn order to achieve the exchangeability requirement of reproducibility, broad standards compliance is necessary. A small number of test cases, such as the first two case studies, is not sufficient to ensure interoperability with other software. During Tellurium’s development, we gathered a number of COMBINE archive exemplars from the literature, other software tools, and our own archives. We have provided these archives as a resource to other developers by making them publicly available online. The test archives are structured to separate examples with advanced SED–ML features from those with basic SED–ML usage, enabling tool developers to implement incremental support for the standard. Table S1 lists all test archives and how to obtain them.\n\nAdvanced SED—ML Support\n\nIn order to address the requirement of broad standards compliance, we tested Tellurium against a set of tests provided by the SED–ML Web Tools [22]. These tests utilize advanced features of the SED–ML standard, and are designed to demonstrate the standard’s coverage of different types of analysis. Table S2 lists all files used in this test set, and Fig S6 shows the results of exporting these files to Tellurium and back again.\n\nSBML Test Suite COMBINE Archives\n\nThe SBML Test Suite [45] is a collection of dynamical models along with expected trajectories designed to test software tools for compliance with the SBML standard. Each test case contains a SBML model, simulation parameters encoded in SED–ML, expected trajectories encoded as a common–separated values (CSV) file, and graphical plots for reference. We converted each of these 1196 test cases into COMBINE archives containing the SBML models, SED–ML simulations, and CSV expected results and used these COMBINE archives as a benchmark for Tellurium’s support for standards. The results of this benchmark are shown in Table S3.\n\nDiscussion\n\nIn order for the conclusions of a research study to be valid, the models used in the study must be reliable. Using SED–ML to reproduce the dynamics of a model and compare these dynamics with expected values adds crucial value to the integrity and validity of studies that reuse or expand on the model. As an exchangeable format, SED–ML is confined to the intersection of the most common features available in dynamical modeling tools, which leaves out certain useful types of analysis (e.g. bifurcation analysis). However, we argue that the use case of SED–ML is not to serve as a replacement for current analysis methods. Instead, SED–ML is a tool to test the dynamical behavior of models before using them. For example, while we were not able to reproduce the bifurcation analysis of the mitotic division study [36] in an exchangeable format, we were able to verify the observations regarding the shift in regulatory mechanism, and in doing so gained new insight from this alternative approach. A researcher may also wish to verify that the model reproduces certain expected behaviors. For example, if the model is expected to exhibit switch–like behavior, does this behavior occur at the correct input threshold? For models with feedback, such as integral feedback control [46], does the output exhibit robustness in the presence of perturbations? These types of validation require expert knowledge of the system. While there are tools and resources to help with this, the most important point for conveying this information to other researchers is to encode it as transparently and lucidly as possible, which is achieved using the literate notebook approach described here.\n\nTellurium’s approach of blending standards with literate coding enables researchers to create rich, detailed workflows incorporating community standards. Tellurium allows the models and simulations from these notebooks to be shared with other tools via COMBINE archives. This allows other users to import these models and simulations and reproduce them using independently developed software tools. This is consistent with our original definition of reproducibility, as it enables robust cross–validation of results between tools, as opposed to simply repeating a previous simulation. It also helps ensure that the tools themselves are accurate and free of idiosyncrasies that could affect the analysis results. Model repositories such as BioModels [47,48], JWS Online [49], and the CellML model repository [50] have enabled widespread support for the SBML and CellML standards. We believe that better tool support for SED–ML and COMBINE archives will help create a trend toward better adoption of these formats by repositories.\n\nComparison with Existing Software\n\nMany dynamical modeling tools support exchanging models via the SBML format, including COPASI [51,52], SBW [53], iBioSim [35], PathwayDesigner [54], CellDesigner [55,56], VCell [57-59], CompuCell3D [60], PySCeS [61], BioNetGen [62], and PySB [63]. These tools have diverse feature sets and intended use cases, such as tissue modeling (CompuCell3D), rule–based modeling of molecular complexes (BioNetGen, PySB, VCell), and general modeling and simulation (all others). The tools also have different forms of user interaction, such as graphical user interfaces (COPASI, iBioSim, VCell) and graph–based network editors (CellDesigner, PathwayDesigner). Python–based tools such as PySCeS [61] and PySB [63] can be used with a Jupyter notebook, but do not feature integration of standards with the notebook itself. In general, Tellurium is useful when the user wishes to interactively edit and test standard–encoded models and simulations or produce presentations and PDFs of modeling studies.\n\nTellurium’s Python foundation makes it easy to combine with other Python–based software such as PySCeS, COBRApy [64], and PySB. There are also many specialized Python packages for specific tasks such as moment closure approximation for stochastic models [65], parameter estimation [66], Bayesian inference [67], and estimating rate laws and their parameter values [68].\n\nIn biomedical research, certain tools have been created specifically to facilitate reproducible research. One such tool is Galaxy [69]. Galaxy is a web–based tool which allows users to create workflows describing experiments, e.g. metagenomic studies [70]. A similar tool with a focus on web services and which supports SBML–based workflows is Taverna [71]. Galaxy and Taverna allow users to annotate each step of the workflow, which provides a way for others to follow and understand the chain of reasoning used in the workflow’s construction. This satisfies the requirement of transparency, as it allows users to view the sequence of steps used to produce a result. Although this approach is very different from a literate notebook in terms of the way the user interacts with the system, it shares the goal of allowing the user to see the sequence of steps used to produce a result and interrogate the specific procedure used in each of the steps. Galaxy and Taverna also allow users to share workflows via the web. However, neither tool attempts to directly address the problem of exchangeability with other software tools.\n\nVisTrails [72] is another workflow system based on visual design. VisTrails focuses primarily on generating rich, three–dimensional diagrams and visualizations based on input data and a specific sequence of steps. VisTrails also saves all changes made to a workflow and allows users to view previous versions, a concept termed “retrospective provenance” [73]. However, this approach also lacks exchangeability. Furthermore, while graphical tools may be more accessible because they abstract away the underlying algorithms, it can be difficult to isolate and correct software errors when a step fails due to bad input or an internal error.\n\nMany other research software systems make use of notebooks, and some incorporate special extensions. StochSS [74], the GenePattern Notebook [75], the SAGE math system [76], and the commercial Mathematica software [25] all utilize notebooks which are specially tailored or feature special extensions for each respective application. However, none of these approaches attempt to solve the problem we address: workflow integration with exchangeable standards. Our usage of the literate notebook approach is intended to satisfy two specific requirements, which are distinct from other use cases: 1) to make these standards easy for humans to read, understand, and modify, without requiring expert knowledge of the technical specifications of the standards, and 2) provide an integrated workflow which facilitates exchangeability with other software.\n\nThe notebook approach used by Tellurium also has disadvantages. For example, it is difficult to use notebooks with a version control system in a meaningful way. Furthermore, large or complex analyses can be difficult to orchestrate using notebooks, as interacting with a large notebook with many cells can be cumbersome. Nevertheless, we believe that Tellurium’s approach is highly useful in many crucial use cases, including testing models, experimenting with model variants, and as a final step in producing an analysis for other researchers in a transparent, visual presentation.\n\nConclusion\n\nIn order to build larger, more complete, and more accurate dynamical models of cells and tissues, it will be necessary to reuse models of subsystems. This is currently very difficult due to the time–consuming and laborious process of manually reconstructing models from the literature, or manually verifying third–party SBML models. Tellurium provides support for encapsulating both a model and its dynamics in a community–developed standard format, the COMBINE archive. This archive can contain the model as well as a number of simulations which test various dynamical properties of the model. Tellurium allows users to create COMBINE archives easily from SBML models, or import and modify preexisting COMBINE archives.\n\nTellurium integrates SBML, SED–ML, and COMBINE archives within a notebook environment, making it exceptionally easy for users to work with these standards, and obviating the need for users to understand the technical specifications of the standards. The availability of authoring tools such as Tellurium will make it possible for model repositories to begin implementing support for SED–ML and COMBINE archives. Indeed, the JWS Online repository [49] already has support for exporting COMBINE archives of models and simulations, which can be read by Tellurium. We hope that other databases will follow suit so that it will be possible to automatically extract dynamical information from these repositories.\n\nTellurium’s human–readable representation of COMBINE archives is highly important for facilitating model modification as we describe here. This feature enables researchers to experiment with models using alternate parameterizations in order to test the dynamical behavior of the models under varying conditions. We hope that this will lead to more robust models which lead to biological insight by providing predictions under a wide range of circumstances, as with the case studies presented here.\n\nFuture Work\n\nThere is a clear need to support exchangeability of simulation experiments in order to allow researchers to build larger, better tested, and more comprehensive models. Tellurium’s built-in support for exchangeability comes from the SBML and SED–ML standards. This allows Tellurium to support the widest possible range of software tools, but also prevents exchanging studies not covered by SED–ML’s vocabulary of predefined simulation types. Due to delays associated with standardizing and implementing features, SED–ML tends to lag several years behind other systems which do not rely on standardization. Thus, SED–ML has the advantage of stable support from a wide range of tools, but has the disadvantage of lacking the flexibility to encode custom studies based on recent advancements in model simulation.\n\nIn order to provide a more flexible platform for encoding simulation studies, new solutions are need. One such solution would be to extend SED–ML with generic scripting capabilities. Another solution would be to build an alternative platform for exchanging simulation experiments. For example, the SESSL [77] software tool also provides a means for encoding and exchanging simulations. Whereas SED–ML uses a standardized XML schema to describe simulations, SESSL uses a domain-specific-language implemented using the Scala programming language. This allows users to mix in Scala code to access features not yet available via SESSL’s public interface. However, this approach is not language–agnostic and is tied to Scala and its low–level execution engine. The SED–ML standard, in contrast, does not constrain the low–level operation of its implementations.\n\nIn this paper, we have argued for modelers to construct “unit tests” for dynamical models by including model variants as in the study by Calzone et al. [36]. We have shown that these variants are easy to construct and encode in COMBINE archives using Tellurium, but we have not addressed how to validate these tests in an automated way. Due to simulation algorithm differences between tools and the presence of multiple steady states in some models, performing a direct numeric comparison between steady state values or timecourse traces may be too fragile to be useful.\n\nThe BIOCHAM software tool [42] employs an interesting solution by using temporal logic constructs to make assertions about properties of model timecourse dynamics. Using this approach, it would be possible, for instance, to make semi-quantitative assertions such as “species X exhibits oscillations with a period of 100 ± 50mHz”. These logical constructs could be used in lieu of a direct numerical comparison to validate the dynamics of a model. A practical solution to the problem of validating model timecourse dynamics would likely make use of semi-quantitative assertions such as “Is the number of oscillations of X at least 10,” “Does Y exhibit a peak value of at least 100 nM,” or “Does the response time of the system fall within a certain range?”\n\nHowever, we believe that several important questions remain before such a validation method will be useful in practical contexts, such as what is the minimal set of formal logic expressions sufficient to capture any useful assertions, and what are the best practices for encoding assertions? For example, should the assertions strive to use relative relationships between model quantities, such that reparameterizing the model does not affect the assertions, or should they be valid only for a single given parameterization? In the former case, how should model variations be generated to test assertions? We believe that implementing automated testing of dynamical models requires addressing these questions in a well thought–out way. Until then, we believe that manually comparing results encoded as COMBINE archives as in the studies presented here will provide immediate benefits to reproducibility. For moderate–size models such as the Calzone study, we have shown that this approach is a practical solution.\n\nAvailability\n\nTellurium Notebook is available as a standalone app (tellurium.analogmachine.org) or as a collection of Python packages hosted on the Python Package Index (pypi.python.org) for 64-bit versions of Mac OS X, Windows, and Linux. The Tellurium Python packages support Python 2.7, 3.4, 3.5, and 3.6. The notebook app comes bundled with Python 3.6 and all requisite packages. The source code of Tellurium (github.com/sys-bio/tellurium) is licensed under the Apache license, version 2.0. Tellurium incorporates or makes use of other software, such as nteract, Plotly (http://plot.ly), Python, libSBML, libSEDML, and others, which are licensed under their respective terms. See tellurium.analogmachine.org for links to installation instructions, documentation (tellurium.readthedocs.io), and the source code (github.com/sys-bio/tellurium).\n\nSupporting information\n\nAll COMBINE archives used in this paper can be obtained at https://github.com/0u812/tellurium-combine-archive-test-cases.\n\nWe collected all COMBINE archives used during development of Tellurium in an online repository on GitHub [80]. These archives serve to test Tellurium’s standards compliance, but they may also allow other tool developers to better support COMBINE archives. We have therefore organized the test cases into different categories, from toy examples using progressively more advanced features of SED–ML, to BioModels, and finally advanced SED–ML usage. The test suite draws archives from a wide range of sources: publications [21,81], other tools (e.g. the SED–ML Web Tools [22]), the SBML Test Suite encoded as COMBINE archives, and archives developed by our group. The COMBINE test suite contains archives ranging from basic examples to advanced usage of the SED–ML standard. To verify exchangeability, we have manually tested importing these archives into our software and also into the SED–ML Web Tools. The SBML test cases were too numerous to test in this way, so a subset of archives were tested with the SED–ML Web Tools whereas the full set of archives was tested with Tellurium using a Tellurium notebook [82].\n\nThe SBML test suite was converted into COMBINE archives using the provided notebook https://github.com/0u812/tellurium-combine-archive-test-cases/blob/master/sbml-test-suite/convert-to-combine-arch.ipynb. These SBML test cases are automatically converted into COMBINE archives containing the expected results, which are then converted by Tellurium into inline OMEX and simulated. A “failed” test refers to a case where the numeric simulation results diverge from the expected values. An “unsupported” test refers to a test that uses features not available in our simulator (libroadrunner) or the inline OMEX strings.\n\nThe SBML test suite was converted into COMBINE archives using the provided notebook https://github.com/0u812/tellurium-combine-archive-test-cases/blob/master/sbml-test-suite/convert-to-combine-arch.ipynb. These SBML test cases are automatically converted into COMBINE archives containing the expected results, which are then converted by Tellurium into inline OMEX and simulated. A “failed” test refers to a case where the numeric simulation results diverge from the expected values. An “unsupported” test refers to a test that uses features not available in our simulator (libroadrunner) or the inline OMEX strings.\n\nAcknowledgments\n\nJKM, KC, LS, SG, and HMS were supported by NIH grants GM081070-01, GM123032-01A1, NHLBI U01HL122199-02. JH is supported by the Moore/Sloan Data Science Environments Project at the University of Washington supported by grants from the Gordon and Betty Moore Foundation (Award #3835) and the Alfred P. Sloan Foundation (Award #2013-10-29). MK is supported by the Federal Ministry of Education and Research (BMBF, Germany) within the research network Systems Medicine of the Liver (LiSyM, grant number 031L0054). SG was supported by NIAID Modeling Immunity for Biodefense HHSN266200500021C. SCS was supported by NIH grant U19 AI117873. The content is solely the responsibility of the authors and does not necessarily represent the views of the National Institutes of Health, the Betty Moore Foundation, or the Alfred P. Sloan Foundation. We wish to thank Frank Bergmann and Chris Myers for their help and guidance in diagnosing and fixing interoperability problems.\n\nFootnotes"
    }
}