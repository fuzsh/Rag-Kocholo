{
    "id": "dbpedia_7491_2",
    "rank": 42,
    "data": {
        "url": "https://www.starburst.io/blog/introducing-multilayer-caching/",
        "read_more_link": "",
        "language": "en",
        "title": "Introducing multilayer caching in Starburst Galaxy",
        "top_image": "https://www.starburst.io/wp-content/uploads/2024/02/multilayer-caching-in-galaxy-4.png",
        "meta_img": "https://www.starburst.io/wp-content/uploads/2024/02/multilayer-caching-in-galaxy-4.png",
        "images": [
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/starburst_logo.png",
            "https://www.starburst.io/wp-content/uploads/2022/09/icon_search.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/starburst_logo.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/starburst_logo.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/menu-icon.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/starburst_logo.png",
            "https://www.starburst.io/wp-content/uploads/2022/09/icon_search.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/twitter-icon-bw.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/facebook-icon-bw.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/linkedin-icon-bw.png",
            "https://www.starburst.io/wp-content/uploads/2023/10/Screenshot-2023-10-04-at-1.56.50-PM.png",
            "https://www.starburst.io/wp-content/uploads/2023/09/Screenshot-2023-09-21-at-11.35.32-AM.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/Screenshot-2024-02-05-at-8.50.10-PM.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/twitter-icon-bw.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/facebook-icon-bw.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/linkedin-icon-bw.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/Multi-layered-caching-diagrams-e1707184326877.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/Warp-2.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/result-caching-diagram-e1707181843777.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/result-caching-config.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/subquery-caching-example.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/subquery-caching-example1.png",
            "https://www.starburst.io/wp-content/uploads/2024/02/multilayer-caching-in-galaxy-3-e1707183283365.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/linkedin-social.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/facebook-social.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/twitter-social.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/instagram-social.png",
            "https://www.starburst.io/wp-content/themes/starburst-theme/includes/img/social/youtube-social.png",
            "https://www.g2.com/products/starburst/widgets/stars?color=blue&type=read"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-02-06T01:53:56+00:00",
        "summary": "",
        "meta_description": "Optimize your data lakehouse for cost/performance at scale with new caching strategies in Starburst Galaxy.",
        "meta_lang": "en",
        "meta_favicon": "https://www.starburst.io/wp-content/uploads/2021/01/favicon.ico",
        "meta_site_name": "Starburst",
        "canonical_link": "https://www.starburst.io/blog/introducing-multilayer-caching/",
        "text": "In the realm of data analytics, optimizing query performance proves to be a continuous and intricate challenge, especially on a data lake with high concurrency and extensive data volumes. Data engineers practice a multifaceted approach, using various tools and techniques to streamline query processes. Fine-tuning a flexible cache strategy is an elemental component of query execution and performance, allowing organizations to rapidly serve answers to queries through shared resource consumption.\n\nStarburst Galaxy’s advanced features empower you to navigate complex analytical workloads seamlessly, ensuring fast, warehouse-like capabilities directly on the data lake and adaptability to changing data requirements. With new multilayer caching, plus built-in observability for timely interventions, Galaxy makes it easier to tailor and monitor your query optimization strategies, all within a single platform.\n\nIntroducing multilayer caching in Starburst Galaxy\n\nWithin Starburst Galaxy, caching is customizable to suit your specific requirements. In this blog, we will explore the three types of caching available in Starburst Galaxy.\n\nWarp Speed – Smart indexing and caching\n\nResult caching – now generally available\n\nSubquery caching – now in private preview\n\nWarp Speed: Smart indexing and caching\n\nAt the core of our caching strategy is Warp Speed, our industry-leading indexing technology that autonomously identifies and caches the most used or relevant data based on usage patterns – without the need for manual partitioning strategies. This is particularly valuable for use cases involving multi-dimensional data that need to be filtered across many dimensions. A couple key examples are:\n\nFraud /Anomaly detection\n\nIoT/Telemetry data\n\nGeospatial analytics\n\nClickstream and Customer 360 analytics\n\nLogs analysis/Cyber Security\n\nHow does Warp Speed work?\n\nBelow is an example query demonstrating how Warp Speed analyzes and automatically creates the necessary index and cache elements to enhance performance.\n\nAs you can see, indexes are generated automatically, taking into account query patterns to reduce the need for full table scans. This proves particularly advantageous for workloads with numerous filtering predicates or selective filters in queries yielding a relatively small number of rows.\n\nBehind the scenes, Warp Speed handles index and cache elements on the cluster’s SSDs in a proprietary format. Enabling Warp Speed results in the offloading of the most resource-intensive query operator, ScanFilterProject, to Warp Speed. This action substantially decreases the resources utilized by the operator and the entire query, resulting in quicker query execution times.\n\nWhen to use Warp Speed\n\nWarp Speed is especially useful for speeding up interactive workloads to meet SLAs and for querying more of your data lake at the same latency as current workloads. The acceleration is particularly advantageous when handling queries containing selective filters, as the indexing mechanism allows for direct access to the relevant rows, thereby avoiding the need to scan all or most of the data.\n\nIn practice, Warp Speed has proven to be most valuable in powering interactive data applications with large data volumes and high user concurrencies. It provides administrators with a compromise-free accelerated engine for optimizing price-performance at scale.\n\nHow do I use Warp Speed?\n\nWarp Speed is configured at the cluster level and will index and cache elements automatically for you as soon as you start running queries. When configuring a cluster, simply select “accelerated” as the execution mode to get up and running with Warp Speed. It’s that easy!\n\nResult caching is now generally available\n\nWhere Warp Speed aims to optimize query performance in workloads involving multi-dimensional filters, result cache improves query performance in scenarios with predominantly repeated queries by storing query results in memory. This layer significantly improves query runtime performance, resulting in a more efficient user experience with reduced wait times for results. Particularly for data applications and dashboard users, result caching streamlines the process by minimizing the necessity for query optimization before execution.\n\nRemoving the need to re-run queries where recently computed results already exist\n\nOffloading redundant queries from the cluster\n\nThese advantages become particularly valuable when prioritizing performance, enhancing user experience while being mindful of resource consumption. The key lies in their diverse utility for improving performance across various use cases.\n\nHow does result caching work?\n\nThink of the result cache as a quick-access storage system stored in memory within the Galaxy ecosystem. This enables users to efficiently share query results, especially when multiple users are accessing the same dashboard. In such a scenario, the result cache minimizes compute work, ensuring a faster time to insight for dashboard users.\n\nAs illustrated in the diagram, instances of the result caching service seamlessly integrate into each Trino Cluster region. These instances locally serve results using the Trino protocol while maintaining the robust security measures of the Trino cluster.\n\nUsers can activate result caching on a per-cluster basis, allowing them to fine-tune cache settings based on the unique characteristics of their workloads, providing additional flexibility and customization. Result caching is available for SELECT statements (up to 1 MB).\n\nHow do I use result caching?\n\nCaching is enabled at the cluster level, allowing queries run on a cluster with caching enabled to leverage pre-computed results after their initial execution, regardless of the execution mode (Standard, Fault Tolerant, or Accelerated).\n\nTo enable caching, from the Clusters screen, for either new or existing Clusters, the cache toggle is located under Advanced Settings:\n\nNote: the cache reuse period setting is adjustable from 5 minutes to 12 hours in one-minute increments. This setting allows queries to return cached results if generated within the time specified by the user. These settings can be customized based on preference and session configuration, with the default being 5 minutes.\n\nYou can learn more about result caching by checking out our docs.\n\nSubquery caching is now in private preview\n\nSubqueries often appear more than once in a single query and across multiple, non-identical queries. It’s often hard to manually optimize for those patterns. New subquery caching in Galaxy automatically identifies similar repeated subqueries and caches relevant partial results. By doing so, Galaxy avoids the need to recompute the results of identical subqueries multiple times, significantly reducing the computational overhead and improving overall query performance.\n\nHow does subquery caching work?\n\nGalaxy stores the results of common subquery patterns in memory at the source stages of the query plan for subsequent reuse. The cache entries are very granular (split-level) and are later utilized across queries for data chunks that remain unaltered in the interim. Any new or modified data elements are processed from scratch and re-combined with what was cached earlier, ensuring that the final query results are always 100% accurate and up to date.\n\nLet’s consider the following example. The first query computes two aggregations over a single table. While this query does not contain any subqueries, we will keep the partial results for potential reuse.\n\nWhen the second query comes, we don’t need to recompute the two highlighted subqueries from scratch since they contain exactly the same aggregations present in the previous query.\n\nObviously one could run the queries in different order and obtain the similar effect.\n\nHow do I use Subquery Caching?\n\nSubquery caching is currently in private preview. If you are interested in being a part of the private preview and learning more about our future caching strategies, apply here.\n\nWhat’s next\n\nAs data volumes and user demands increase, there’s a growing need for adaptive and intelligent optimization strategies. Starburst Galaxy’s multilayer caching approach, including Warp Speed, result caching, and subquery caching, marks just the starting point of our caching journey."
    }
}