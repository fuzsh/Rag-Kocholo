{
    "id": "dbpedia_8306_0",
    "rank": 16,
    "data": {
        "url": "http://midgard-project.org/midcom/",
        "read_more_link": "",
        "language": "en",
        "title": "Tightly coupled PHP framework and CMS for Midgard",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://midgard-project.org/images/logos/midcom_white_100.png",
            "http://midgard-project.org/midcom/midcom-ajax-editor.jpg",
            "http://midgard-project.org/images/logo_m.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/images/logos/midcom_favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Ideally, a MidCOM-based web site consists of one or more MidCOM Components only, though Midgard's fundamental design makes it very easy to use MidCOM along with traditional Midgard applications or web sites and even with plain file-based web content.\n\nEvery Component contains a complete application module: It might depend on other Components to work, but it should fulfil a defined task independently. For example, a MidCOM Component could handle the management and display of a certain article type (\"product information\", \"news item\") on a web site. In a web-based application environment, it may contain the whole web frontend of a custom-built CRM system. After all, it is up to the Component author to define how broad or narrow to design its features.\n\nTechnically speaking, MidCOM establishes a Model-View-Controller concept within Midgard. This specification primarily defines the outline of component packaging. A component in this sense is the combination of business logic (what to do), default configuration (default data structure, default operation mode) and default style (default presentation information).\n\nA correctly designed component can be deployed to another Midgard installation by simply installing the component's PEAR package and creating a site-specific style (HTML design) for it. Therefore, the ideal MidCOM Website completely relies on its components having no application-specific logic anywhere else than within the components themselves.\n\nEach component exposes a strictly defined interface to the underlying MidCOM framework and Midgard itself. MidCOM uses Midgard's topic tree to link incoming HTTP requests to their corresponding Components, thus controlling a Component's assignment to a certain area of a web site or a certain type of content object. Using the topic tree instead of the page tree - which has the same role in traditional Midgard environments - gives users much more flexibility for providing advanced features.\n\nThe MidCOM framework passes requests to the Components, provides support for them in several areas (such as building a consistent navigation interface for a complex web site with multiple independent Components) and assembles their data management capabilities into a single administration interface to the user. For example, a secretary managing the news and press sections of her company web site does neither feel nor needs to know that she is working with two different Components as she makes her changes within a consistently designed CMS interface.\n\nOn high-volume sites significant performance improvements can be attained by setting up a reverse proxy in front of the actual Midgard, Squid is a popular choice.\n\nCaveats\n\nObviously since we're aggressively caching stuff it will normally take at least the lifetime of an object before it's refreshed from main server and thus your changes to the content will appear with some delay. Also since we're not sending MidCOMs usual 'must-revalidate' headers, some clients (yes, that would be IE) may cache the pages locally for much longer...\n\nSetup options\n\nThis document covers a single machine proxy and Midgard setup, Squid makes it possible to make clusters of proxies for even higher performance, see Squid documentation on how to do that.\n\nFor our case we have basically two options:\n\nOne (public) IP for Squid and another (public or internal) for Midgard\n\nThis has the advantage of simplifying installation and management as long as the Midgard IP is reachable by the content maintainers.\n\nIt also simplifies Midgard/MidCOM headers debugging\n\nOne (public) IP for Squid and 127.0.0.1 (localhost) for Midgard\n\nIn this case access to the content management becomes troublesome but for staging-live setups this works well.\n\nThe third option of having Midgard and Squid in same IP but different ports has a problem with the fact that a lot of places use MIDCOM_NAV_FULLURL in stead of MIDCOM_NAV_RELATIVEURL (and in some cases they don't really have much of a choice), where the nonstandard port is then added to the constructed URLs everywhere, bypassing the cache from first hit onwards...\n\nMidgard setup changes\n\nSet up apache to bind specifically to the chosen IP (here we use 127.0.0.1), basically comment out all Listen and NameVirtualHost directives you can find and then add new ones to /etc/midgard/apache/httpd.conf\n\nListen 127.0.0.1:80 NameVirtualHost 127.0.0.1:80\n\nThen in each file in /etc/midgard/apache/vhosts change the <VirtualHost *:80> to <VirtualHost 127.0.0.1:80>\n\nSquid setup\n\nInstall normally, make sure Squid can resolve the servers IPs to names (edit /etc/hosts if needed). Then set up as reverse proxy by changing the following settings in /etc/squid/squid.conf.\n\nAcceleration options with Squid 2.5\n\nhttp_port \"public-ip-address\":80 httpd_accel_host \"127.0.0.1\" httpd_accel_port 80 httpd_accel_uses_host_header on\n\nAcceleration options with Squid 2.6\n\nhttp_port \"public-ip-address\":80 vhost vport cache_peer \"public-ip-address\" parent 80 0 originserver default\n\nAccess control options\n\nThen add ACLs for allowing your site to be proxied, here's one example but I recommend reading the Squid documentation on ACLs\n\nacl valid_dst dstdomain .example.com http_access allow valid_dst (Just before deny all!)\n\nMidCOM setup\n\nin code-init of your host(s) add the following settings:\n\n$GLOBALS['midcom_config_local']['cache_module_content_headers_strategy'] = 'public'; $GLOBALS['midcom_config_local']['cache_module_content_default_lifetime'] = 60;\n\nAdjust the default lifetime as you see fit, this is in seconds (in case the document has no expiry set via metadata then the expiry is set to current time plus the default lifetime, lower values significantly reduce the advantages of proxy)\n\nYou can also use 'private' in stead of 'public' in case you need that kind of cache-control, but be aware that currently whenever a user is logged in midcom enters no-cache mode due to uimessages service unconditionally using sessions.\n\nTesting & Troubleshooting\n\nRead Six Things First-Time Squid Administrators Should Know from ONLamp.com.\n\nRemember to restart Squid and Apache after each configuration change, only test one change at a time, keep log of what you changed, where and why.\n\nFirst test a few times with\n\nlynx --dump --head http://www.yoursite.com/\n\nlook for headers indicating cache miss/hit, if you get only misses increase Squid logging and see in the store and squid logs exactly what happens.\n\nIf a page is released immediately from the cache there are a few options:\n\nCache-Control headers are incorrect\n\nUse lynx or telnet to examine the headers you get from Midgard\n\nIf you get Cache-Control: no-store, no-cache, must-revalidate header then MidCOM is in no-cache mode for some reason.\n\nContent-Lenght header is incorrect\n\nFor some reason in some cases there is extra whitespace sent in MidCOM output, for this reason we try to avoid sending Content-Lenght header when headers_strategy indicates caching.\n\nSee Squid debug level log, it should complain about server sending more data than announced.\n\nExpires is now or in the past (remember that the header is in GMT, so what might seem like past at first sight perhaps is not...)\n\nMake sure the document does not have expiry set to past (though normally it shouldn't be then available on the site at all).\n\nMake sure the default_lifetime is sensible.\n\nPerformance testing\n\nGet Siege and create urls.txt with one url per line, this should contain enough urls from your site (dump a sitemap or something), then in one window:\n\ntail -F /var/log/squid/access.log\n\nAnd in another\n\nsiege -c 30 -i -t 5m -f urls.txt\n\nAnd see what happens. Tune Squid as needed, below are some settings I have used:\n\ncache_replacement_policy heap LFUDA memory_replacement_policy heap GDSF cache_dir ufs /usr/local/squid/cache 20000 16 256 cache_mem 500MB maximum_object_size 12000 KB\n\nForcing cache refresh / precaching\n\nYou can use wget to precache your site and/or to force a cache refresh for the whole site with the following command:\n\nwget -t 3 -T 3 --no-cache -q -m www.yoursite.com\n\nFor forcing refresh of single page in the cache, go to the page and 'shift-reload' (or whatever works on your browser for forcing it to reload the full page from server).\n\nWith Midgard1 and above the recommended way is to use MultiLang feature even if the site structure isn't identical among different languages.\n\nIf content hasn't been translated will master language (language 0) be used.\n\nUsing multilang\n\nmgd_set_lang(int language)\n\nLanguages are called with their ID. E.g. mgd_set_lang(38) would set the language to English and mgd_set_lang(183) to Inuktitut.\n\nFor the master language key 0 (zero) is used. Master language isn't fixed to any specific language, so it can be the main language, which other languages will be translated from.\n\nGet the currently used languages\n\nIt is possible to use two languages simultaneously\n\nContent language\n\nInterface language\n\nTo get the content language use\n\n<?php // Get ID (integer) of the content language $content_language = $_MIDCOM->i18n->get_content_language(); ?>\n\nAnd for the currently used interface language (e.g. toolbar) use\n\n<?php // Get ID (integer) of the current interface language $interface_language = $_MIDCOM->i18n->get_current_language(); ?>\n\nUsing parameters as storage location\n\nTo use multilanguage parameters with midcom.helper.datamanager2 it is possible to set the parameter storage location in the following way:\n\n'price' => array ( 'title' => 'price', 'type' => 'text', 'storage' => array ( 'location' => 'parameter', 'multilang' => true, ), 'widget' => 'text', ),\n\nThis will save the parameters\n\nmidcom.helper.datamanager2, price, $value for the master language content\n\nmidcom.helper.datamanager2, price_fi, $value for Finnish language content\n\nUntranslated content\n\nComponent fi.protie.navigation will natively add class untranslated for content which is lacking the translation.\n\nOtherwise untranslated content should be checked with\n\n<?php if ($object->lang !== $_MIDCOM->i18n->get_midgard_language()) ?>\n\nHiding untranslated content\n\nTo hide untranslated content (otherwise master language will be displayed, resulting in displaying mixed language) set the MidCOM configuration parameter\n\n$GLOBALS['midcom_config_local']['i18n_multilang_strict'] = true;\n\nbefore initializing MidCOM in code-init.\n\nLanguage versions for the requested object\n\nTo get a list of the language versions for a requested object do the following\n\nMidCOM component level\n\n<?php // Get the metadata for the requested object $object_metadata = midcom_helper_metadata::retrieve($object); if ( $object_metadata && $object_metadata->id) { $languages = $object_metadata->get_languages(); } // returns an array with the languages ?>\n\nOn layout level\n\n<?php // Get the metadata binded to the object currently viewed // if the component binds the metadata $object_metadata = $_MIDCOM->metadata->get_view_metadata(); if ( $object_metadata && $object_metadata->id) { $languages = $object_metadata->get_languages(); } ?>\n\nMultilang and hosts\n\nIf host record has language other than 0, mgd_set_lang is automatically initialized to set the correct language.\n\nTo fetch a list of all the languages hosts use get an array containing the host objects with\n\n<?php $hosts = $_MIDCOM->i18n->get_language_hosts(); // Returns an array of languages, indexed with the language id as // the array key for each language ?>\n\nMySQL and object level\n\nSeveral objects have two different types of properties: shared and language-dependant. For example table article shares e.g. name and the language content is located in article_i, which contains title, abstract, content and such.\n\nLanguages are located in table midgard_language.\n\nmidgard_query_builder will automatically set language constraint when applicable.\n\nInline variable display\n\nMidgard adds a new language construct to your PHP templates which allows you to include the value of a variable in HTML without using a <? echo $var; ?> construct.\n\nYou can now simply use &(variablename); directly in HTML. Note the absence of the $.\n\nObject variables that would normally be accessed in PHP code as $object->field can be inserted as &(object.field);. Similarly, fields of an associative array can be inserted with &(array['key']);.\n\nStandard formatting modifiers\n\nThe way the value is formatted can be specified by adding a modifier after the variable name: &(variable:modifier);.\n\nIn PHP code the modifiers can be executed using the mgd_format function.\n\nThe standard modifiers are:\n\nh - Encode content as HTML\n\nAdd value as HTML. Escapes & to &, < to < and > to >.\n\nEverything between [< and >] is added verbatim with the [< and >] dropped. PHP code embedded in such a section is executed.\n\nH - Encode content as HTML but keep entities verbatim\n\nAdd value as HTML. Everything is included verbatim.\n\nf - Format plain text to HTML\n\nAdd value as formatted text, the plain text input is formatted as HTML on the fly.\n\nParagraphs delimited by an empty line will be surrounded by <p> and </p>.\n\nEverything between [< and >] is added verbatim with the [< and >] dropped.\n\nNote: PHP code embedded in such a section is executed. If you want to enable safe content input from unsecure users, use the Markdown datatype instead.\n\nF - Format plain text to HTML with headlines\n\nAdd value as formatted text, the plain text input is formatted as HTML on the fly.\n\nParagraphs delimited by an empty line will be surrounded by <p> and </p>.\n\nLines after an empty line with less than 10 words that do not end in a period are formatted as <h2>.\n\nEverything between [< and >] is added verbatim with the [< and >] dropped.\n\nNote: PHP code embedded in such a section is executed. If you want to enable safe content input from unsecure users, use the Markdown datatype instead.\n\np - Execute content as PHP code\n\nExecute a value as PHP. Executes the value of the variable.\n\nu - URL encode content\n\nAdd the value urlencoded. Replaces non-safe URI characters with their %code equivalents.\n\ns - Show content as-is\n\nShow variable unmodified.\n\nCustom formatters\n\nYou can also add custom formatters to your Midgard application. This is a powerful way of extending Midgards formatting engine.\n\nBasically you write a function which gets the text-to-be-formatted as an argument and echos dumps the formatted output to stdout.\n\nYou then register that function using to Midgard's formatting engine using the mgd_register_filter function.\n\nExample:\n\nfunction midgardize_my_content($text) { // Replace all instances of \"CMS\" in content with \"Midgard\" $formatted_text = str_replace('CMS', 'Midgard', $text); echo $formatted_text; } mgd_register_filter('mgd', 'midgardize_my_content'); // Then, in some style element you can do this: &(my_variable:xmgd);\n\nNote: The custom formatters are prefixed with x before the registered name (in this case mgd)\n\nMidCOM allows site developers to add their own error handling.\n\nIn all cases, the basic idea is to have a simple page in the Distribution itself and allow the site developer to add either style or page elements that can override the defaults.\n\nSince Midgard Style Elements evaluate in the scope of the callee, each element will list a number of variables that can be accessed directly without having to global them in as it is required with MidCOM Style-Engine driven pages.\n\nSince the Style Engine does not distinguish between page and style elements during execution, you can add the replacement elements where you like. Be aware though, that it is strongly encouraged to add the element in the Style, not the Page. The required style element names are given in the headings of the various sections.\n\nAuthentication related elements\n\nThe authentication pages are divided in three elements:\n\nLogin Form using the 'form' Authentication Frontend (midcom_services_auth_frontend_form)\n\nThis is the simplest part of it, it will add the actual login form to the generated pages. It is decopuled from the rest, because a) its behavoir is depended on the authentication frontend used and b) it needs to be reusable in the other two elements.\n\nThis tutorial assumes that you use the default 'form' frontend.\n\nCurrently, only the \"form\" authentication frontend is avaialbe, which renders a simple form that can be styled using CSS. Lets look at the default source first:\n\n<form name=\"midcom_services_auth_frontend_form\" action=\"\" method=\"POST\" id=\"midcom_services_auth_frontend_form\"> <label for=\"username\"> <?php echo $_MIDCOM->i18n->get_string('username', 'midcom'); ?>: <input name=\"username\" id=\"username\" /> </label> <label for=\"password\"> <?php echo $_MIDCOM->i18n->get_string('password', 'midcom'); ?>: <input name=\"password\" id=\"password\" type=\"password\" /> </label> <input type=\"submit\" name=\"midcom_services_auth_frontend_form_submit\" id=\"midcom_services_auth_frontend_form_submit\" value=\"<?php echo $_MIDCOM->i18n->get_string('login', 'midcom'); ?>\" /> </form>\n\nAs you can see, you shouldn't have much trouble customizing this form by just generating appropriate CSS rules that are included in the actual error pages generated. If you need to replace this element nevertheless, ensure that the name of the various form elements are not changed in any way.\n\nLogin Page (midcom_services_auth_login_page)\n\nThe login page is shown if there is no authenticated user and either the systemwide login page is called, or some component calls $_MIDCOM->auth->require_valid_user().\n\nIt is similar to the regular error pages with a slightly different formatting not crying out \"ERROR\" as loud. These pages still add an HTTP 403 Forbidden Header to prevent search engines or any cache to interfere with the page.\n\nThe exact HTTP responses delivered by these pages may change in the course of the development of MidCOM 2.6, you might want to keep an eye on this tutorial in this respect therefore.\n\nAgain, lets look at the source of the default page:\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"> <head> <title><?php echo $title; ?></title> <style type=\"text/css\"> body { color: #000000; background-color: #FFFFFF; } address { font-size: smaller; } a:link { color: #0000CC; } #login_warning { color: red; } p.login_message { } form label { margin-left: none; padding-left: none; display: block; } form label input { margin: 0.5ex 0 0 0; display: block; } </form> </style> </head> <body> <h1><?php echo $title; ?></h1> <p class='login_message'><?php echo $_MIDCOM->i18n->get_string('login message - please enter credencials', 'midcom');?></p> <?php echo $login_warning; ?> <?php $_MIDCOM->auth->show_login_form(); ?> <address> <a href=\"/\"><?php echo $_SERVER['SERVER_NAME']; ?></a><br /> <?php echo date('r'); ?><br /> <?php echo $_SERVER['SERVER_SOFTWARE']; ?> </address> </body> </html>\n\nThe important thing here is the fact that you are delivering a full HTML page at this point. It is rendered by the method midcom_services_auth::show_login_page(), which makes the following variables available:\n\n$title: A localized page title generated by looking up the string 'login' in the main MidCOM L10n Database.\n\n$login_warning: This string is populated with a localized warning in case that the (last) login failed. It is automatically enclosed in a\n\nparagraph with the CSS ID login_warning assigned to it. If there was no problem, the string is empty.\n\nTo add the actual login form, call $_MIDCOM->auth->show_login_form(), as shown in the example above. While it is theoretically possible to add the login form manually, this is strongly discouraged, as it breaks the modularity of the MidCOM authentication core.\n\nAccess Denied Page (midcom_services_auth_access_denied)\n\nThis page is shown on all failed permission checks other then $_MIDCOM->auth->require_valid_user() (see above for that one). It delivers a HTTP 403 Forbidden page which also includes the possibility to log in to the system using different credencials.\n\nThis is the default page:\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"> <head> <title><?php echo $title; ?></title> <style type=\"text/css\"> body { color: #000000; background-color: #FFFFFF; } a:link { color: #0000CC; } address { font-size: smaller; } #login_warning { color: red; } form label { margin-left: none; padding-left: none; display: block; } form label input { margin: 0.5ex 0 0 0; display: block; } </form> </style> </head> <body> <h1><?php echo $title; ?></h1> <p><?php echo $message; ?></p> <h2><?php echo $_MIDCOM->i18n->get_string('login', 'midcom');?>:</h2> <?php echo $login_warning; ?> <?php $this->_auth_frontend->show_authentication_form(); ?> <p><strong>Error 403</strong></p> <address> <a href=\"/\"><?php echo $_SERVER['SERVER_NAME']; ?></a><br /> <?php echo date('r'); ?><br /> <?php echo $_SERVER['SERVER_SOFTWARE']; ?> </address> </body> </html>\n\nAs you can see, this is quite similar to the Login page, with the main difference that it is more error-like. Therefore, all of the annotations from the login form and its usage do also count for the Acccess Denied element, with the single addition of another variable:\n\n$message: includes the reason why the access to the page failed. It is localized (at least when coming from the MidCOM ACL core) and outlines the nature of the failed privilege check.\n\nStyling of the other MidCOM Error pages\n\nThese pages are generated by calls to $_MIDCOM->generate_error(). They indicate critical errors which prevent a page from being processed completly.\n\n4xx Standard Error pages (midcom_error_4xx)\n\nCurrently, the framework knows these error conditions in the 4xx cateogory:\n\n404 Not Found: This is the case happening most often, indicating that an element requested by the user could not be found.\n\n401 Unauthorized: This is a legacy error code, that is not in wide use right now. I have not yet decided what to do with it.\n\n403 Forbidden: Normally, 403 errors are now handled by the ACL framework (see above). In the unlikly case however, that the ACL service has not yet started up, the core must deliver the corresponding error message.\n\nAll of the errors mentioned above are delivered using the style element with their appropriate error code appended. So not found will call midcom_error_404.\n\nThe basic error page looks like this:\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"> <head> <title><?echo $title; ?></title> <style type=\"text/css\"> body { color: #000000; background-color: #FFFFFF; } a:link { color: #0000CC; } p, address {margin-left: 3em;} address {font-size: smaller;} </style> </head> <body> <h1><?echo $title; ?></h1> <p> <?echo $message; ?> </p> <h2>Error <?echo $code; ?></h2> <address> <a href=\"/\"><?php echo $_SERVER['SERVER_NAME']; ?></a><br /> <?php echo date('r'); ?><br /> <?php echo $_SERVER['SERVER_SOFTWARE']; ?> </address> </body> </html>\n\nAgain, we have a few variables available at your disposal:\n\n$title: contains the currently not localized clear-text name of the error as it is defined in the HTTP specs.\n\n$message: This is the error message that should be shown to the user. It depends on the calling component whether this string is localized or not.\n\n$code: contains the integer response code sent to the browser.\n\n$header: contains the full HTTP/1.0 response code which has been sent to the browser already. You should normally not need this variable.\n\n500 Internal Server Errors\n\nThis type of error page is not styleable by the site developer, as it is thrown in many places where critical errors occur. Since you can use regular MidCOM functions during rendering a customized error page, the possibility of an error throwing an error is perfectly possible, which is why the HTTP 500 error remains hardcoded (and simple).\n\nActing on errors\n\nFor a long time, MidCOM has been mapping various types of system errors to various HTTP status codes, and has made it possible to create customized templates for displaying them.\n\nError actions, on the other hand, allow other actions to take place. Some examples:\n\nLog all 404 Not Found page URLs into a special log file alongside their referrers\n\nSend all 500 Internal Errors with debug stacktrace to the site developer\n\nTo enable error actions, tweak your MidCOM config in the following way:\n\n$GLOBALS['midcom_config_local']['error_actions'] = array ( 500 => array ( 'action' => 'email', 'email' => 'webmaster@example.net', ), 404 => array ( 'action' => 'log', 'filename' => '/var/log/broken_links.log', ), );\n\nFor a start, please read the PEAR coding standards, they are the basis for the MidCOM conventions, as they are only slightly adapted. If in doubt, you should stick to PEAR.\n\nIndenting and Line Length\n\nYou must set your IDE for a tab with of four spaces and must configure it to replace tabs with spaces.\n\nYou should break lines at around 100-120 characters, use your best judgement here, readable code goes over this wrapping recommendation. Any statement you break over several lines should generally be indented by one tab,you should not increase the indentation to the opening paranthesis, the equal sign or whatever you are in when doing a line break. One noteable exceptions are muli-line if/while constructs, but see below.\n\nCurly braces\n\nYou must use curly braces in all places where they might be optional. This is especially important for if/while/for single-liners, where omitted curly braces can easily lead to strange bugs.\n\nIn addition, to the contrary of what both PEAR and current MidCOM code is suggesting, you have to put the opening curly brace in its own line. While working with the C# coding standards (where this is mandatory), I found out that this greatly improves the readability of the code.\n\nSo it has to look like this:\n\nif (condition) { action1; } else if (condition) { action2; } else { action 3; }\n\nControl structures\n\nThe C language spelling has to be used throughout MidCOM. No Perl-Like constructs or shortcuts like 'elseif' are allowed. Use of the \"ternary\" ('?:') operator is expressly forbidden as is the \"alternative\" control structure syntax.\n\nIf-statements\n\nA complete if statement can be seen above.\n\nMore complex conditions should be wrapped over multiple lines using indenting to mark the various levels of the condition:\n\nif ( $this->_layout[!!'locktimeout'] == 0 || ( is_array($this->_lock) && $this->_ourlock ) || is_null($this->_storage) ) { ... }\n\nSwitch statements\n\nA bit to the contrary of PEAR, switch blocks must use two levels of indentation, to clearly mark the extent of the switch block. Any fall-throughs should get a short comment to let other programmers know that it was on-purpose. The default action must always come last and should also be terminated by a break statement.\n\nswitch (condition) { case 1: action1; break; case 2: action2; // Fall-through case 3: action3; break; default: action4; break; }\n\nLoops\n\nAll loops follow the basic schema of the formatting of simple if-blocks. You may group for statements and conditions together in a similar way too.\n\nWhitespace\n\nRule number one here: Code has to be read by the author, not by the PHP parser. So you should make use of whitespace everywhere to make code more readable.\n\nIn all statements, you must add a space before and after operators. In addition, when calling functions, you must add a space after each comma between the arguments. You should omit the spaces inside parantheses to make the code optically 'coherent'.\n\nStatement blocks that are logically related should be marked by a single, blank line (that has the same indentation as the surrounding ones). You should not use more blank lines, as they tend to rip apart the 'flow' of the code, especially when they are at places where you don't need them (e.g. at the end of a block).\n\n$variable = 4 * (3 + 7); $variable2 = 'string1' . 'string2'; someotheraction1; someotheraction2;\n\nStrings\n\nStrings should always be single-quoted when you do not need any special characters (for example \\n) or any variable interpolation. This will avoid accidential variable expansions. The only drawback here is that you have to mask strings like 'shouldn\\'t' but these short forms should not be used in a UI anyway.\n\nIf you use variable interpolation in double-quoted strings, you must always enclose the interpolated variable in curly braces to clearly mark it against the surrounding text. You should use variable interpolation whenever feasible.\n\n$string1 = 'You should not use terms like \"shouldn\\'t\".'; $string2 = \"This {$color} is in back {$this->bags[$color]['bag name']}.\\n\";\n\nNOTE: Interpolating function/method calls via curly brackets is forbidden, use concatenation (and remember those spaces around the operator).\n\nNaming conventions\n\nDue to tradition, MidCOM naming conventions differ from the PEAR ones:\n\nClasses\n\nClasses must start with their component prefix, and must all be lowercase, for example de_linkm_taviewer_admin. You should use an additional underscore after the component prefix to denote component-private classes, that should not be instantinated from outside, for example net_siriux_photos__photo.\n\nFunctions and methods\n\nAs with classes, they must all be lowercase. Global functions must start with their component prefix, as classes have to. Try to name class methods clearly, use a longer name in favor of saving typework. Prepend any private member functions with an underscor. For example _generate_urlname(). or get_current_leaf().\n\nThe same schema must be used for all public member variables as well.\n\nNote: Some older MidCOM classes, even in the core, do use the CamelCaps syntax instead of the underscore separated. It seems to me (subjectivly) that we have more underscore separated symbol names, instead of CamelCase ones, so I have decided to stick to this one as a recommendation.\n\nSymbol names\n\nFinally, use must clear names for your symbols (Constants, Variables, Functions etc.) always. Do not use stuff like $st (for style) or $tn (for topic name). This makes it hell for other authors to even read your code.\n\nInstead, use clear descriptive names like lock_timeout. You may use CamelCaps style for function-local variables if it serves readability, but you should not do so for private class members for consistency with public ones.\n\nAll of your constants should be all-upper-case to indicate their constant nature. One exception are the values true, false and null, all of which I consider as language constructs and therfore are to be kept lower-case.\n\nPHPDoc blocks\n\nA sample PHPDoc block (as started by me) looks like this, note the empty line at the beginning:\n\n/** * Short symbol introduction * * Exthaustive text, possibly with examples * * @param type name description * @param type name description * @return type description * @access private * @package name * @further_tags like @todo or @global ... */\n\nThe last tags, of course, should only be used where applicable. Important, for example, is that the @package tag is part of a class definition as well as of a file docblock, otherwise PHPDoc doesn't correctly recognize the package assignment. All other file-level blocks don't need @pacakge thoug.\n\nIn addition, each file should contain a DocBlock like this as file-level docblock to get a correct assignment to a package:\n\n/** * @package midcom.baseclasses * @author The Midgard Project, http://www.midgard-project.org * @version $Id: dbobject.php,v 1.3 2005/06/08 15:18:55 torben Exp $ * @copyright The Midgard Project, http://www.midgard-project.org * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License */\n\nThe name of the package is alwas that of the component (de.linkm.taviewer for example).\n\nSee the PHPDoc Manual for further details."
    }
}