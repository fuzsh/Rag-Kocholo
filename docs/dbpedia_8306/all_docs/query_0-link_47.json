{
    "id": "dbpedia_8306_0",
    "rank": 47,
    "data": {
        "url": "https://laradock.io/",
        "read_more_link": "",
        "language": "en",
        "title": "Laradock",
        "top_image": "https://laradock.io/images/favicons/ms-icon-310x310.png",
        "meta_img": "https://laradock.io/images/favicons/ms-icon-310x310.png",
        "images": [
            "https://laradock.io/images/favicons/ms-icon-310x310.png",
            "https://laradock.io/images/laradock-full-logo.jpg",
            "https://badges.gitter.im/Laradock/laradock.svg",
            "https://img.shields.io/badge/Gitpod-ready--to--code-blue",
            "https://github.com/mahmoudz.png?s=150",
            "https://github.com/appleboy.png?s=150",
            "https://github.com/philtrep.png?s=150",
            "https://github.com/mikeerickson.png?s=150",
            "https://github.com/zeroc0d3.png?s=150",
            "https://github.com/thorerik.png?s=150",
            "https://github.com/winfried-van-loon.png?s=150",
            "https://github.com/sixlive.png?s=150",
            "https://github.com/bestlong.png?s=150",
            "https://github.com/urukalo.png?s=150",
            "https://github.com/vwchu.png?s=150",
            "https://github.com/zuohuadong.png?s=150",
            "https://github.com/lanphan.png?s=150",
            "https://github.com/ahkui.png?s=150",
            "https://raw.githubusercontent.com/laradock/laradock/master/.github/home-page-images/join-us.png",
            "https://opencollective.com/laradock/contributors.svg?width=890&button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/awesome-backers.svg?width=890&button=false&isActive=true",
            "https://raw.githubusercontent.com/laradock/laradock/master/.github/home-page-images/custom-sponsors/sista-ai-icon.png",
            "https://raw.githubusercontent.com/laradock/laradock/master/.github/home-page-images/custom-sponsors/apiato.png",
            "https://opencollective.com/laradock/tiers/gold-sponsors/0/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/1/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/2/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/3/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/4/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/5/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/6/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/7/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/8/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/9/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/10/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/11/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/12/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/13/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/14/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/gold-sponsors/15/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/0/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/1/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/2/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/3/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/4/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/5/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/6/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/7/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/8/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/9/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/10/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/11/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/12/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/13/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/14/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/15/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/16/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/17/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/18/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/19/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/20/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/21/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/22/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/23/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/24/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/silver-sponsors/25/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/0/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/1/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/2/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/3/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/4/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/5/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/6/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/7/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/8/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/9/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/10/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/11/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/12/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/13/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/14/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/15/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/16/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/17/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/18/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/19/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/20/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/21/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/22/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/23/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/24/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/25/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/26/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/27/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/28/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/29/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/30/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/31/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/32/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/33/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/34/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/35/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/36/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/37/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/38/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/39/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/40/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/41/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/42/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/43/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/44/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/45/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/46/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/47/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/48/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/49/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/50/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/51/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/52/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/53/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/54/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/55/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/56/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/57/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/58/avatar.svg?button=false&isActive=true",
            "https://opencollective.com/laradock/tiers/bronze-sponsors/59/avatar.svg?button=false&isActive=true",
            "https://badges.gitter.im/Laradock/laradock.svg",
            "https://gitpod.io/button/open-in-gitpod.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Mahmoud Zalt"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Full PHP development environment for Docker.",
        "meta_lang": "",
        "meta_favicon": "https://laradock.io/images/favicons/favicon.ico",
        "meta_site_name": "Laradock",
        "canonical_link": "https://laradock.io/",
        "text": "Introduction\n\nLaradock is a full PHP development environment for Docker.\n\nIt supports a variety of common services, all pre-configured to provide a ready PHP development environment.\n\nUse Docker First - Learn About It Later!\n\nFeatures\n\nEasy switch between PHP versions: 8.1, 8.0, 7.4, 7.3, 7.2, 7.1, 5.6…\n\nChoose your favorite database engine: MySQL, Postgres, MariaDB…\n\nRun your own stack: Memcached, HHVM, RabbitMQ…\n\nEach software runs on its own container: PHP-FPM, NGINX, PHP-CLI…\n\nEasy to customize any container, with simple edits to the Dockerfile.\n\nAll Images extend from an official base Image. (Trusted base Images).\n\nPre-configured NGINX to host any code at your root directory.\n\nCan use Laradock per project, or single Laradock for all projects.\n\nEasy to install/remove software’s in Containers using environment variables.\n\nClean and well-structured Dockerfiles (Dockerfile).\n\nThe Latest version of the Docker Compose file (docker-compose).\n\nEverything is visible and editable.\n\nFast Images Builds.\n\nQuick Overview\n\nLet’s see how easy it is to setup our demo stack PHP, NGINX, MySQL, Redis and Composer:\n\n1 - Clone Laradock inside your PHP project:\n\ngit clone https://github.com/Laradock/laradock.git\n\n2 - Enter the laradock folder and rename .env.example to .env.\n\ncp .env.example .env\n\n3 - Run your containers:\n\ndocker-compose up -d nginx mysql phpmyadmin redis workspace\n\n4 - Open your project’s .env file and set the following:\n\nDB_HOST=mysql REDIS_HOST=redis QUEUE_HOST=beanstalkd\n\n5 - Open your browser and visit localhost: http://localhost.\n\nThat's it! enjoy :)\n\nSupported Services\n\nLaradock, adheres to the ‘separation of concerns’ principle, thus it runs each software on its own Docker Container. You can turn On/Off as many instances as you want without worrying about the configurations.\n\nTo run a chosen container from the list below, run docker-compose up -d {container-name}. The container name {container-name} is the same as its folder name. Example to run the “PHP FPM” container, use the name “php-fpm”.\n\nWeb Servers:\n\nNGINX\n\nApache2\n\nCaddy\n\nLoad Balancers:\n\nHAProxy\n\nTraefik\n\nPHP Compilers:\n\nPHP FPM\n\nHHVM\n\nDatabase Management Systems:\n\nMySQL\n\nPostgreSQL\n\nPostGIS\n\nMariaDB\n\nPercona\n\nMSSQL\n\nMongoDB\n\nMongoDB Web UI\n\nNeo4j\n\nCouchDB\n\nRethinkDB\n\nCassandra\n\nDatabase Management Apps:\n\nPhpMyAdmin\n\nAdminer\n\nPgAdmin\n\nCache Engines:\n\nRedis\n\nRedis Web UI\n\nRedis Cluster\n\nMemcached\n\nAerospike\n\nVarnish\n\nMessage Brokers:\n\nRabbitMQ\n\nRabbitMQ Admin Console\n\nBeanstalkd\n\nBeanstalkd Admin Console\n\nEclipse Mosquitto\n\nPHP Worker\n\nLaravel Horizon\n\nGearman\n\nAmazon Simple Queue Service\n\nMail Servers:\n\nMailu\n\nMailCatcher\n\nMailhog\n\nMailDev\n\nLog Management:\n\nGrayLog\n\nTesting:\n\nSelenium\n\nMonitoring:\n\nGrafana\n\nNetData\n\nSearch Engines:\n\nElasticSearch\n\nApache Solr\n\nManticore Search\n\nIDE’s\n\nICE Coder\n\nTheia\n\nWeb IDE\n\nMiscellaneous:\n\nWorkspace (Laradock container that includes a rich set of pre-configured useful tools)\n\nPHP CLI\n\nComposer\n\nGit\n\nVim\n\nxDebug\n\nLinuxbrew\n\nNode\n\nV8JS\n\nGulp\n\nSQLite\n\nLaravel Envoy\n\nDeployer\n\nYarn\n\nSOAP\n\nDrush\n\nWordpress CLI\n\ndnsutils\n\nApache ZooKeeper (Centralized service for distributed systems to a hierarchical key-value store)\n\nKibana (Visualize your Elasticsearch data and navigate the Elastic Stack)\n\nDejavu (Edit your Elasticsearch data)\n\nLogStash (Server-side data processing pipeline that ingests data from a multitude of sources simultaneously)\n\nJenkins (automation server, that provides plugins to support building, deploying and automating any project)\n\nCertbot (Automatically enable HTTPS on your website)\n\nSwoole (Production-Grade Async programming Framework for PHP)\n\nSonarQube (continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs and more)\n\nGitlab (A single application for the entire software development lifecycle)\n\nPostGIS (Database extender for PostgreSQL. It adds support for geographic objects allowing location queries to be run in SQL)\n\nBlackfire (Empowers all PHP developers and IT/Ops to continuously verify and improve their app’s performance)\n\nLaravel Echo (Bring the power of WebSockets to your Laravel applications)\n\nMercure (Server-sent events)\n\nPhalcon (A PHP web framework based on the model–view–controller pattern)\n\nMinio (Cloud storage server released under Apache License v2, compatible with Amazon S3)\n\nAWS EB CLI (CLI that helps you deploy and manage your AWS Elastic Beanstalk applications and environments)\n\nThumbor (Photo thumbnail service)\n\nIPython (Provides a rich architecture for interactive computing)\n\nJupyter Hub (Jupyter notebook for multiple users)\n\nPortainer (Build and manage your Docker environments with ease)\n\nDocker Registry (The Docker Registry implementation for storing and distributing Docker images)\n\nDocker Web UI (A browser-based solution for browsing and modifying a private Docker registry)\n\nYou can choose, which tools to install in your workspace container and other containers, from the .env file.\n\nIf you modify docker-compose.yml, .env or any dockerfile file, you must re-build your containers, to see those effects in the running instance.\n\nIf you can’t find your Software in the list, build it yourself and submit it. Contributions are welcomed :)\n\nJoin Us\n\nAwesome People\n\nLaradock is an MIT-licensed open source project with its ongoing development made possible entirely by the support of all these smart and generous people, from code contributors to financial contributors. 💜\n\nProject Maintainers\n\nMahmoud Zalt\n\n@mahmoudz\n\nBo-Yi Wu\n\n@appleboy\n\nPhilippe Trépanier\n\n@philtrep\n\nMike Erickson\n\n@mikeerickson\n\nDwi Fahni Denni\n\n@zeroc0d3\n\nThor Erik\n\n@thorerik\n\nWinfried van Loon\n\n@winfried-van-loon\n\nTJ Miller\n\n@sixlive\n\nYu-Lung Shao (Allen)\n\n@bestlong\n\nMilan Urukalo\n\n@urukalo\n\nVince Chu\n\n@vwchu\n\nHuadong Zuo\n\n@zuohuadong\n\nLan Phan\n\n@lanphan\n\nAhkui\n\n@ahkui\n\n< Join Us >\n\n@laradock\n\nCode Contributors\n\nFinancial Contributors\n\nYou can support us using any of the methods below:\n\n1: Open Collective\n\n2: Paypal\n\n3: Github Sponsors\n\n4: Patreon\n\nSponsoring is an act of giving in a different fashion. 🌱\n\nYou can sponsor us using any of the methods below:\n\n1: Sponsor via Open Collective.\n\n2: Email us at [email protected].\n\nSponsors logos are displayed on the github repository page and the documentation website home page.\n\nLicense\n\nMIT © Mahmoud Zalt\n\nGetting Started\n\nRequirements\n\nGit\n\nDocker [ >= 19.03.0 ]\n\nInstallation\n\nChoose the setup the best suits your needs.\n\nA) Setup for Single Project\n\nA.1) Already have a PHP project\n\nA.2) Don’t have a PHP project yet\n\nB) Setup for Multiple Projects\n\nA) Setup for Single Project\n\n(Follow these steps if you want a separate Docker environment for each project)\n\nA.1) Already have a PHP project:\n\n1 - Clone laradock on your project root directory:\n\ngit submodule add https://github.com/Laradock/laradock.git\n\nNote: If you are not using Git yet for your project, you can use git clone instead of git submodule.\n\nTo keep track of your Laradock changes, between your projects and also keep Laradock updated check these docs\n\n2 - Make sure your folder structure should look like this:\n\n* project-a * laradock-a * project-b * laradock-b\n\n(It’s important to rename the laradock folders to unique name in each project, if you want to run laradock per project).\n\n3 - Go to the Usage section.\n\nA.2) Don’t have a PHP project yet:\n\n1 - Clone this repository anywhere on your machine:\n\ngit clone https://github.com/laradock/laradock.git\n\nYour folder structure should look like this:\n\n* laradock * project-z\n\n2 - Edit your web server sites configuration.\n\nWe’ll need to do step 1 of the Usage section now to make this happen.\n\ncp .env.example .env\n\nAt the top, change the APP_CODE_PATH_HOST variable to your project path.\n\nAPP_CODE_PATH_HOST=../project-z/\n\nMake sure to replace project-z with your project folder name.\n\n3 - Go to the Usage section.\n\nB) Setup for Multiple Projects:\n\n(Follow these steps if you want a single Docker environment for all your projects)\n\n1 - Clone this repository anywhere on your machine (similar to Steps A.2. from above):\n\ngit clone https://github.com/laradock/laradock.git\n\nYour folder structure should look like this:\n\n* laradock * project-1 * project-2\n\nMake sure the APP_CODE_PATH_HOST variable points to parent directory.\n\nAPP_CODE_PATH_HOST=../\n\n2 - Go to your web server and create config files to point to different project directory when visiting different domains:\n\nFor Nginx go to nginx/sites, for Apache2 apache2/sites.\n\nLaradock by default includes some sample files for you to copy app.conf.example, laravel.conf.example and symfony.conf.example.\n\n3 - change the default names *.conf:\n\nYou can rename the config files, project folders and domains as you like, just make sure the root in the config files, is pointing to the correct project folder name.\n\n4 - Add the domains to the hosts files.\n\n127.0.0.1 project-1.test 127.0.0.1 project-2.test ...\n\nIf you use Chrome 63 or above for development, don’t use .dev. Why?. Instead use .localhost, .invalid, .test, or .example.\n\n4 - Go to the Usage section.\n\nUsage\n\nRead Before starting:\n\nIf you are using Docker Toolbox (VM), do one of the following:\n\nUpgrade to Docker Desktop for Mac/Windows (Recommended). Check out Upgrading Laradock\n\nUse Laradock v3.*. Visit the Laradock-ToolBox branch. (outdated)\n\nWe recommend using a Docker Engine version which is newer than 19.03.0.\n\nWarning: If you used an older version of Laradock it’s highly recommended to rebuild the containers you need to use see how you rebuild a container in order to prevent as much errors as possible.\n\n1 - Enter the laradock folder and copy .env.example to .env\n\ncp .env.example .env\n\nYou can edit the .env file to choose which software’s you want to be installed in your environment. You can always refer to the docker-compose.yml file to see how those variables are being used.\n\nDepending on the host’s operating system you may need to change the value given to COMPOSE_FILE. When you are running Laradock on Mac OS the correct file separator to use is :. When running Laradock from a Windows environment multiple files must be separated with ;.\n\nBy default the containers that will be created have the current directory name as suffix (e.g. laradock_workspace_1). This can cause mixture of data inside the container volumes if you use laradock in multiple projects. In this case, either read the guide for multiple projects or change the variable COMPOSE_PROJECT_NAME to something unique like your project name.\n\n2 - Build the environment and run it using docker-compose\n\nIn this example we’ll see how to run NGINX (web server) and MySQL (database engine) to host a PHP Web Scripts:\n\ndocker-compose up -d nginx mysql\n\nNote: All the web server containers nginx, apache ..etc depends on php-fpm, which means if you run any of them, they will automatically launch the php-fpm container for you, so no need to explicitly specify it in the up command. If you have to do so, you may need to run them as follows: docker-compose up -d nginx php-fpm mysql.\n\nYou can select your own combination of containers from this list.\n\n(Please note that sometimes we forget to update the docs, so check the docker-compose.yml file to see an updated list of all available containers).\n\n3 - Enter the Workspace container, to execute commands like (Artisan, Composer, PHPUnit, Gulp, …)\n\ndocker-compose exec workspace bash\n\nAlternatively, for Windows PowerShell users: execute the following command to enter any running container:\n\ndocker exec -it {workspace-container-id} bash\n\nNote: You can add --user=laradock to have files created as your host’s user. Example:\n\ndocker-compose exec --user=laradock workspace bash\n\nYou can change the PUID (User id) and PGID (group id) variables from the .env file)\n\n4 - Update your project configuration to use the database host\n\nOpen your PHP project’s .env file or whichever configuration file you are reading from, and set the database host DB_HOST to mysql:\n\nDB_HOST=mysql\n\nYou need to use the Laradock’s default DB credentials which can be found in the .env file (ex: MYSQL_USER=). Or you can change them and rebuild the container.\n\nIf you want to install Laravel as PHP project, see How to Install Laravel in a Docker Container.\n\n5 - Open your browser and visit your localhost address.\n\nMake sure you add use the right port number as provided by your running server.\n\nhttp://localhost\n\nIf you followed the multiple projects setup, you can visit http://project-1.test/ and http://project-2.test/.\n\nDocumentation\n\nList current running Containers\n\ndocker ps\n\nYou can also use the following command if you want to see only this project containers:\n\ndocker-compose ps\n\nClose all running Containers\n\ndocker-compose stop\n\nTo stop single container do:\n\ndocker-compose stop {container-name}\n\nDelete all existing Containers\n\ndocker-compose down\n\nEnter a Container\n\nRun commands in a running Container.\n\n1 - First list the currently running containers with docker ps\n\n2 - Enter any container using:\n\ndocker-compose exec {container-name} bash\n\nExample: enter MySQL container\n\ndocker-compose exec mysql bash\n\nExample: enter to MySQL prompt within MySQL container\n\ndocker-compose exec mysql mysql -udefault -psecret\n\n3 - To exit a container, type exit.\n\nEdit default Container config\n\nOpen the docker-compose.yml and change anything you want.\n\nExamples:\n\nChange MySQL Database Name:\n\nenvironment: MYSQL_DATABASE: laradock ...\n\nChange Redis default port to 1111:\n\nports: - \"1111:6379\" ...\n\nEdit a Docker Image\n\n1 - Find the Dockerfile of the image you want to edit,\n\nexample for mysql it will be mysql/Dockerfile.\n\n2 - Edit the file the way you want.\n\n3 - Re-build the container:\n\ndocker-compose build mysql\n\nMore info on Containers rebuilding here.\n\nBuild/Re-build Containers\n\nIf you do any change to any Dockerfile make sure you run this command, for the changes to take effect:\n\ndocker-compose build\n\nOptionally you can specify which container to rebuild (instead of rebuilding all the containers):\n\ndocker-compose build {container-name}\n\nYou might use the --no-cache option if you want full rebuilding (docker-compose build --no-cache {container-name}).\n\nAdd more Docker Images\n\nTo add an image (software), just edit the docker-compose.yml and add your container details, to do so you need to be familiar with the docker compose file syntax.\n\nView the Log files\n\nThe NGINX Log file is stored in the logs/nginx directory.\n\nHowever to view the logs of all the other containers (MySQL, PHP-FPM,…) you can run this:\n\ndocker-compose logs {container-name}\n\ndocker-compose logs -f {container-name}\n\nMore options\n\nInstall PHP Extensions\n\nYou can set extensions to install in the .env file’s corresponding section (PHP_FPM, WORKSPACE, PHP_WORKER), just change the false to true at the desired extension’s line. After this you have to rebuild the container with the --no-cache option.\n\ndocker build --no-cache {container-name}\n\nChange the (PHP-FPM) Version\n\nBy default, the latest stable PHP version is configured to run.\n\nThe PHP-FPM is responsible for serving your application code, you don’t have to change the PHP-CLI version if you are planning to run your application on different PHP-FPM version.\n\nA) Switch from PHP 7.2 to PHP 5.6\n\n1 - Open the .env.\n\n2 - Search for PHP_VERSION.\n\n3 - Set the desired version number:\n\nPHP_VERSION=5.6\n\n4 - Finally rebuild the image\n\ndocker-compose build php-fpm\n\nFor more details about the PHP base image, visit the official PHP docker images.\n\nChange the PHP-CLI Version\n\nNote: it’s not very essential to edit the PHP-CLI version. The PHP-CLI is only used for the Artisan Commands & Composer. It doesn’t serve your Application code, this is the PHP-FPM job.\n\nThe PHP-CLI is installed in the Workspace container. To change the PHP-CLI version you need to simply change the PHP_VERSION in the .env file as follow:\n\n1 - Open the .env.\n\n2 - Search for PHP_VERSION.\n\n3 - Set the desired version number:\n\nPHP_VERSION=7.2\n\n4 - Finally rebuild the image\n\ndocker-compose build workspace\n\nChange the PHP-CLI Version\n\nInstall xDebug\n\n1 - First install xDebug in the Workspace and the PHP-FPM Containers:\n\na) open the .env file\n\nb) search for the WORKSPACE_INSTALL_XDEBUG argument under the Workspace settings\n\nc) set it to true\n\nd) search for the PHP_FPM_INSTALL_XDEBUG argument under the PHP-FPM settings\n\ne) set it to true\n\n2 - Re-build the containers docker-compose build workspace php-fpm\n\nFor information on how to configure xDebug with your IDE and work it out, check this Repository or follow up on the next section if you use linux and PhpStorm.\n\n########################################################### ################ Containers Customization ################# ########################################################### ### WORKSPACE ############################################# ... WORKSPACE_INSTALL_XDEBUG=true ... ### PHP_FPM ############################################### ... PHP_FPM_INSTALL_XDEBUG=true ...\n\nStart/Stop xDebug:\n\nBy installing xDebug, you are enabling it to run on startup by default.\n\nTo control the behavior of xDebug (in the php-fpm Container), you can run the following commands from the Laradock root folder, (at the same prompt where you run docker-compose):\n\nStop xDebug from running by default: .php-fpm/xdebug stop.\n\nStart xDebug by default: .php-fpm/xdebug start.\n\nSee the status: .php-fpm/xdebug status.\n\nNote: If .php-fpm/xdebug doesn’t execute and gives Permission Denied error the problem can be that file xdebug doesn’t have execution access. This can be fixed by running chmod command with desired access permissions.\n\nInstall pcov\n\n1 - First install pcov in the Workspace and the PHP-FPM Containers:\n\na) open the .env file\n\nb) search for the WORKSPACE_INSTALL_PCOV argument under the Workspace Container\n\nc) set it to true\n\nd) search for the PHP_FPM_INSTALL_PCOV argument under the PHP-FPM Container\n\ne) set it to true\n\n2 - Re-build the containers docker-compose build workspace php-fpm\n\nNote that pcov is only supported on PHP 7.1 or newer. For more information on setting up pcov optimally, check the recommended section of the README\n\nInstall phpdbg\n\nInstall phpdbg in the Workspace and the PHP-FPM Containers:\n\n1 - Open the .env.\n\n2 - Search for WORKSPACE_INSTALL_PHPDBG.\n\n3 - Set value to true\n\n4 - Do the same for PHP_FPM_INSTALL_PHPDBG\n\nWORKSPACE_INSTALL_PHPDBG=true\n\nPHP_FPM_INSTALL_PHPDBG=true\n\nInstall Github Copilot Cli\n\nNote: You must have Github Copilot access to use this feature.\n\nInstall gh-cli in the Workspace Container:\n\n1 - Open the .env.\n\n2 - Search for WORKSPACE_INSTALL_GITHUB_CLI.\n\n3 - Set value to true\n\nWORKSPACE_INSTALL_GITHUB_CLI=true\n\n4 - Re-build the containers docker compose build workspace\n\n5 - start your container docker compose up -d workspace // ..and all your other containers\n\n6 - Enter the Workspace container:\n\ndocker-compose exec workspace bash\n\n7 - Authenticate with your github account and follow the instructions::\n\ngh auth login\n\n8 - Install the copilot cli:\n\ngh extension install github/gh-copilot\n\nInstall ionCube Loader\n\n1 - First install ionCube Loader in the Workspace and the PHP-FPM Containers:\n\na) open the .env file\n\nb) search for the WORKSPACE_INSTALL_IONCUBE argument under the Workspace Container\n\nc) set it to true\n\nd) search for the PHP_FPM_INSTALL_IONCUBE argument under the PHP-FPM Container\n\ne) set it to true\n\n2 - Re-build the containers docker-compose build workspace php-fpm\n\nAlways download the latest version of Loaders for ionCube .\n\nInstall Deployer\n\nA deployment tool for PHP.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_DEPLOYER argument under the Workspace Container\n\n3 - Set it to true\n\n4 - Re-build the containers docker-compose build workspace\n\nDeployer Documentation Here\n\nInstall SonarQube\n\nAn automatic code review tool.\n\nSonarQube® is an automatic code review tool to detect bugs, vulnerabilities and code smells in your code. It can integrate with your existing workflow to enable continuous code inspection across your project branches and pull requests.\n\n1 - Open the .env file\n\n2 - Search for the SONARQUBE_HOSTNAME=sonar.example.com argument\n\n3 - Set it to your-domain sonar.example.com\n\n4 - docker-compose up -d sonarqube\n\n5 - Open your browser: http://localhost:9000/\n\nTroubleshooting:\n\nif you encounter a database error:\n\ndocker-compose exec --user=root postgres source docker-entrypoint-initdb.d/init_sonarqube_db.sh\n\nIf you encounter logs error:\n\ndocker-compose run --user=root --rm sonarqube chown sonarqube:sonarqube /opt/sonarqube/logs\n\nSonarQube Documentation Here\n\nPrepare Laradock for Production\n\nIt’s recommended for production to create a custom docker-compose.yml file, for example, production-docker-compose.yml\n\nIn your new production docker-compose.yml file, you should include only the containers you are planning to run in production (usage example: docker-compose -f production-docker-compose.yml up -d nginx mysql redis ...).\n\nNote: The Database (MySQL/MariaDB/…) ports should not be forwarded on production, because Docker will automatically publish the port on the host unless specifically told not to. Forwarding these ports on production is quite insecure - so make sure to remove these lines:\n\nports: - \"3306:3306\"\n\nTo learn more about how Docker publishes ports, please read this excellent post on the subject.\n\nInstall Laravel from Container\n\n1 - First you need to enter the Workspace Container.\n\n2 - Install Laravel.\n\nExample using Composer\n\ncomposer create-project laravel/laravel my-cool-app \"5.2.*\"\n\nWe recommend using composer create-project instead of the Laravel installer, to install Laravel.\n\nFor more about the Laravel installation click here.\n\n3 - Edit .env to Map the new application path:\n\nBy default, Laradock assumes the Laravel application is living in the parent directory of the laradock folder.\n\nSince the new Laravel application is in the my-cool-app folder, we need to replace ../:/var/www with ../my-cool-app/:/var/www, as follow:\n\nAPP_CODE_PATH_HOST=../my-cool-app/\n\n4 - Go to that folder and start working.\n\ncd my-cool-app\n\n5 - Go back to the Laradock installation steps to see how to edit the .env file.\n\nRun Artisan Commands\n\nYou can run artisan commands and many other Terminal commands from the Workspace container.\n\n1 - Make sure you have the workspace container running.\n\ndocker-compose up -d workspace // ..and all your other containers\n\n2 - Find the Workspace container name:\n\ndocker-compose ps\n\n3 - Enter the Workspace container:\n\ndocker-compose exec workspace bash\n\nNote: Should add --user=laradock (example docker-compose exec --user=laradock workspace bash) to have files created as your host’s user to prevent issue owner of log file will be changed to root then laravel website cannot write on log file if using rotated log and new log file not existed\n\n4 - Run anything you want :)\n\nphp artisan\n\ncomposer update\n\nphpunit\n\nvue serve\n\n(browse the results at http://localhost:[WORKSPACE_VUE_CLI_SERVE_HOST_PORT])\n\nvue ui\n\n(browse the results at http://localhost:[WORKSPACE_VUE_CLI_UI_HOST_PORT])\n\nRun Laravel Queue Worker\n\n1 - Create a suitable configuration file (for example named laravel-worker.conf) for Laravel Queue Worker in php-worker/supervisord.d/ by simply copying from laravel-worker.conf.example\n\n2 - Start everything up\n\ndocker-compose up -d php-worker\n\nRun Laravel Scheduler\n\nLaradock provides 2 ways to run Laravel Scheduler 1. Using cron in workspace container. Most of the time, when you start Laradock, it’ll automatically start workspace container with cron inside, along with setting to run schedule:run command every minute. 2. Using Supervisord in php-worker to run schedule:run. This way is suggested when you don’t want to start workspace in production environment. * Comment out cron setting in workspace container, file workspace/crontab/laradock bash # * * * * * laradock /usr/bin/php /var/www/artisan schedule:run >> /dev/null 2>&1 * Create a suitable configuration file (for ex., named laravel-scheduler.conf) for Laravel Scheduler in php-worker/supervisord.d/ by simply copying from laravel-scheduler.conf.example\n\nStart php-worker container\n\ndocker-compose up -d php-worker\n\nUse Browsersync\n\nUsing Use Browsersync with Laravel Mix.\n\nAdd the following settings to your webpack.mix.js file. Please refer to Browsersync Options page for more options.\n\nconst mix = require('laravel-mix') (...) mix.browserSync({ open: false, proxy: 'nginx' // replace with your web server container })\n\nRun npm run watch within your workspace container.\n\nOpen your browser and visit address http://localhost:[WORKSPACE_BROWSERSYNC_HOST_PORT]. It will refresh the page automatically whenever you edit any source file in your project.\n\nIf you wish to access Browsersync UI for your project, visit address http://localhost:[WORKSPACE_BROWSERSYNC_UI_HOST_PORT].\n\nUse Mailu\n\nYou will need a registered domain.\n\nRequired RECAPTCHA for signup email HERE\n\nModify following environment variable in .env file\n\nMAILU_RECAPTCHA_PUBLIC_KEY=<YOUR_RECAPTCHA_PUBLIC_KEY> MAILU_RECAPTCHA_PRIVATE_KEY=<YOUR_RECAPTCHA_PRIVATE_KEY> MAILU_DOMAIN=laradock.io MAILU_HOSTNAMES=mail.laradock.io\n\nOpen your browser and visit http://YOUR_DOMAIN.\n\nUse NetData\n\nRun the NetData Container (netdata) with the docker-compose up command. Example:\n\ndocker-compose up -d netdata\n\nOpen your browser and visit the localhost on port 19999: http://localhost:19999\n\nUse Metabase\n\nRun the Metabase Container (metabase) with the docker-compose up command. Example: bash docker-compose up -d metabase\n\nOpen your browser and visit the localhost on port 3030: http://localhost:3030\n\nYou can use environment to configure Metabase container. See docs in: Running Metabase on Docker\n\nUse Jenkins\n\n1) Boot the container docker-compose up -d jenkins. To enter the container type docker-compose exec jenkins bash.\n\n2) Go to http://localhost:8090/ (if you didn’t change your default port mapping)\n\n3) Authenticate from the web app.\n\nDefault username is admin.\n\nDefault password is docker-compose exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword.\n\n(To enter container as root type docker-compose exec --user root jenkins bash).\n\n4) Install some plugins.\n\n5) Create your first Admin user, or continue as Admin.\n\nNote: to add user go to http://localhost:8090/securityRealm/addUser and to restart it from the web app visit http://localhost:8090/restart.\n\nYou may wanna change the default security configuration, so go to http://localhost:8090/configureSecurity/ under Authorization and choosing “Anyone can do anything” or “Project-based Matrix Authorization Strategy” or anything else.\n\nUse Redis\n\nFirst make sure you run the Redis Container (redis) with the docker-compose up command.\n\ndocker-compose up -d redis\n\nTo execute redis commands, enter the redis container first docker-compose exec redis bash then enter the redis-cli.\n\nOpen your Laravel’s .env file and set the REDIS_HOST to redis\n\nREDIS_HOST=redis\n\nIf you’re using Laravel, and you don’t find the REDIS_HOST variable in your .env file. Go to the database configuration file config/database.php and replace the default 127.0.0.1 IP with redis for Redis like this:\n\n'redis' => [ 'cluster' => false, 'default' => [ 'host' => 'redis', 'port' => 6379, 'database' => 0, ], ],\n\nTo enable Redis Caching and/or for Sessions Management. Also from the .env file set CACHE_DRIVER and SESSION_DRIVER to redis instead of the default file.\n\nCACHE_DRIVER=redis SESSION_DRIVER=redis\n\nFinally make sure you have the predis/predis package (~1.0) installed via Composer:\n\ncomposer require predis/predis:^1.0\n\nYou can manually test it from Laravel with this code:\n\n\\Cache::store('redis')->put('Laradock', 'Awesome', 10);\n\nUse Redis Cluster\n\nFirst make sure you run the Redis-Cluster Container (redis-cluster) with the docker-compose up command. bash docker-compose up -d redis-cluster\n\nOpen your Laravel’s config/database.php and set the redis cluster configuration. Below is example configuration with phpredis. Read the Laravel official documentation for more details. php 'redis' => [ 'client' => 'phpredis', 'options' => [ 'cluster' => 'redis', ], 'clusters' => [ 'default' => [ [ 'host' => 'redis-cluster', 'password' => null, 'port' => 7000, 'database' => 0, ], ], ], ],\n\nUse Varnish\n\nThe goal was to proxy the request to varnish server using nginx. So only nginx has been configured for Varnish proxy. Nginx is on port 80 or 443. Nginx sends request through varnish server and varnish server sends request back to nginx on port 81 (external port is defined in VARNISH_BACKEND_PORT).\n\nThe idea was taken from this post\n\nThe Varnish configuration was developed and tested for Wordpress only. Probably it works with other systems.\n\nSteps to configure varnish proxy server:\n\nYou have to set domain name for VARNISH_PROXY1_BACKEND_HOST variable.\n\nIf you want to use varnish for different domains, you have to add new configuration section in your env file. VARNISH_PROXY1_CACHE_SIZE=128m VARNISH_PROXY1_BACKEND_HOST=replace_with_your_domain.name VARNISH_PROXY1_SERVER=SERVER1\n\nThen you have to add new config section into docker-compose.yml with related variables: custom_proxy_name: container_name: custom_proxy_name build: ./varnish expose: - ${VARNISH_PORT} environment: - VARNISH_CONFIG=${VARNISH_CONFIG} - CACHE_SIZE=${VARNISH_PROXY2_CACHE_SIZE} - VARNISHD_PARAMS=${VARNISHD_PARAMS} - VARNISH_PORT=${VARNISH_PORT} - BACKEND_HOST=${VARNISH_PROXY2_BACKEND_HOST} - BACKEND_PORT=${VARNISH_BACKEND_PORT} - VARNISH_SERVER=${VARNISH_PROXY2_SERVER} ports: - \"${VARNISH_PORT}:${VARNISH_PORT}\" links: - workspace networks: - frontend\n\nchange your varnish config and add nginx configuration. Example Nginx configuration is here: nginx/sites/laravel_varnish.conf.example.\n\nvarnish/default.vcl is old varnish configuration, which was used in the previous version. Use default_wordpress.vcl instead.\n\nHow to run:\n\nRename default_wordpress.vcl to default.vcl\n\ndocker-compose up -d nginx\n\ndocker-compose up -d proxy\n\nKeep in mind that varnish server must be built after Nginx cause varnish checks domain affordability.\n\nFAQ:\n\nHow to purge cache?\n\nrun from any cli:\n\ncurl -X PURGE https://yourwebsite.com/.\n\nHow to reload varnish?\n\ndocker container exec proxy varnishreload\n\nWhich varnish commands are allowed?\n\nvarnishadm\n\nvarnishd\n\nvarnishhist\n\nvarnishlog\n\nvarnishncsa\n\nvarnishreload\n\nvarnishstat\n\nvarnishtest\n\nvarnishtop\n\nHow to reload Nginx?\n\ndocker exec Nginx nginx -t\n\ndocker exec Nginx nginx -s reload\n\nUse Mongo\n\nFirst install mongo in the Workspace and the PHP-FPM Containers:\n\nopen the .env file\n\nsearch for the WORKSPACE_INSTALL_MONGO argument under the Workspace Container\n\nset it to true\n\nsearch for the PHP_FPM_INSTALL_MONGO argument under the PHP-FPM Container\n\nset it to true\n\nRe-build the containers\n\ndocker-compose build workspace php-fpm\n\nRun the MongoDB Container (mongo) with the docker-compose up command. bash docker-compose up -d mongo\n\nAdd the MongoDB configurations to the config/database.php configuration file:\n\n'connections' => [ 'mongodb' => [ 'driver' => 'mongodb', 'host' => env('DB_HOST', 'localhost'), 'port' => env('DB_PORT', 27017), 'database' => env('DB_DATABASE', 'database'), 'username' => '', 'password' => '', 'options' => [ 'database' => '', ] ], // ... ],\n\n5 - Open your Laravel’s .env file and update the following variables:\n\nset the DB_HOST to your mongo.\n\nset the DB_PORT to 27017.\n\nset the DB_DATABASE to database.\n\n6 - Finally make sure you have the jenssegers/mongodb package installed via Composer and its Service Provider is added.\n\ncomposer require jenssegers/mongodb\n\nMore details about this here.\n\n7 - Test it:\n\nFirst, let your Models extend from the Mongo Eloquent Model. Check the documentation.\n\nEnter the Workspace Container.\n\nMigrate the Database php artisan migrate.\n\nUse PhpMyAdmin\n\nRun the phpMyAdmin Container (phpmyadmin) with the docker-compose up command.\n\n# use with mysql docker-compose up -d mysql phpmyadmin # use with mariadb docker-compose up -d mariadb phpmyadmin\n\nNote: To use with MariaDB, open .env and set PMA_DB_ENGINE=mysql to PMA_DB_ENGINE=mariadb.\n\nOpen your browser and visit the localhost on port 8081: http://localhost:8081, use server: “mysql”, user: “default” and password: “secret for the default mysql setup.\n\nUse Gitlab\n\nRun the Gitlab Container (gitlab) with the docker-compose up command. Example: bash docker-compose up -d gitlab\n\nOpen your browser and visit the localhost on port 8989: http://localhost:8989 Note: You may change GITLAB_DOMAIN_NAME to your own domain name like http://gitlab.example.com default is http://localhost\n\nUse Gitlab Runner\n\nRetrieve the registration token in your gitlab project (Settings > CI / CD > Runners > Set up a specific Runner manually)\n\nOpen the .env file and set the following changes:\n\n# so that gitlab container will pass the correct domain to gitlab-runner container GITLAB_DOMAIN_NAME=http://gitlab GITLAB_RUNNER_REGISTRATION_TOKEN=<value-in-step-1> # so that gitlab-runner container will send POST request for registration to correct domain GITLAB_CI_SERVER_URL=http://gitlab\n\nOpen the docker-compose.yml file and add the following changes:\n\ngitlab-runner: environment: # these values will be used during `gitlab-runner register` - RUNNER_EXECUTOR=docker # change from shell (default) - DOCKER_IMAGE=alpine - DOCKER_NETWORK_MODE=laradock_backend networks: - backend # connect to network where gitlab service is connected\n\nRun the Gitlab-Runner Container (gitlab-runner) with the docker-compose up command. Example:\n\ndocker-compose up -d gitlab-runner\n\nRegister the gitlab-runner to the gitlab container\n\ndocker-compose exec gitlab-runner bash gitlab-runner register\n\nCreate a .gitlab-ci.yml file for your pipeline ```yml before_script:\n\necho Hello!\n\njob1: scripts: - echo job1 ```\n\nPush changes to gitlab\n\nVerify that pipeline is run successful\n\nUse Adminer\n\nRun the Adminer Container (adminer) with the docker-compose up command. Example: bash docker-compose up -d adminer\n\nOpen your browser and visit the localhost on port 8080: http://localhost:8080\n\nAdditional Notes\n\nYou can load plugins in the ADM_PLUGINS variable in the .env file. If a plugin requires parameters to work correctly you will need to add a custom file to the container. Find more info in section ‘Loading plugins’.\n\nYou can choose a design in the ADM_DESIGN variable in the .env file. Find more info in section ‘Choosing a design’.\n\nYou can specify the default host with the ADM_DEFAULT_SERVER variable in the .env file. This is useful if you are connecting to an external server or a docker container named something other than the default mysql.\n\nUse Portainer\n\nRun the Portainer Container (portainer) with the docker-compose up command. Example: bash docker-compose up -d portainer\n\nOpen your browser and visit the localhost on port 9010: http://localhost:9010\n\nUse PgAdmin\n\nRun the pgAdmin Container (pgadmin) with the docker-compose up command. Example: bash docker-compose up -d postgres pgadmin\n\nOpen your browser and visit the localhost on port 5050: http://localhost:5050\n\nAt login page use default credentials: Username : [email protected] Password : admin\n\nUse Beanstalkd\n\nRun the Beanstalkd Container: bash docker-compose up -d beanstalkd\n\nConfigure Laravel to connect to that container by editing the config/queue.php config file.\n\nfirst set beanstalkd as default queue driver\n\nset the queue host to beanstalkd : QUEUE_HOST=beanstalkd beanstalkd is now available on default port 11300.\n\nRequire the dependency package pda/pheanstalk using composer. Optionally you can use the Beanstalkd Console Container to manage your Queues from a web interface.\n\nRun the Beanstalkd Console Container: bash docker-compose up -d beanstalkd-console\n\nOpen your browser and visit http://localhost:2080/ Note: You can customize the port on which beanstalkd console is listening by changing BEANSTALKD_CONSOLE_HOST_PORT in .env. The default value is 2080.\n\nAdd the server\n\nHost: beanstalkd\n\nPort: 11300\n\nDone\n\nUse Confluence\n\nRun the Confluence Container (confluence) with the docker-compose up command. Example: bash docker-compose up -d confluence\n\n2 - Open your browser and visit the localhost on port 8090: http://localhost:8090\n\nNote: Confluence is a licensed application - an evaluation licence can be obtained from Atlassian.\n\nYou can set custom confluence version in CONFLUENCE_VERSION. Find more info in section ‘Versioning’\n\nConfluence usage with Nginx and SSL.\n\nFind an instance configuration file in nginx/sites/confluence.conf.example and replace sample domain with yours.\n\nConfigure ssl keys to your domain.\n\nKeep in mind that Confluence is still accessible on 8090 anyway.\n\nUse ElasticSearch\n\n1 - Run the ElasticSearch Container (elasticsearch) with the docker-compose up command:\n\ndocker-compose up -d elasticsearch\n\n2 - Open your browser and visit the localhost on port 9200: http://localhost:9200\n\nThe default username is elastic and the default password is changeme.\n\nInstall ElasticSearch Plugin\n\nInstall an ElasticSearch plugin. bash docker-compose exec elasticsearch /usr/share/elasticsearch/bin/plugin install {plugin-name}\n\nRestart elasticsearch container bash docker-compose restart elasticsearch\n\nUse MeiliSearch\n\n1 - Run the MeiliSearch Container (meilisearch) with the docker-compose up command. Example:\n\ndocker-compose up -d meilisearch\n\n2 - Open your browser and visit the localhost on port 7700 at the following URL: http://localhost:7700\n\nThe private API key is masterkey\n\nUse Selenium\n\nRun the Selenium Container (selenium) with the docker-compose up command. Example: bash docker-compose up -d selenium\n\nOpen your browser and visit the localhost on port 4444 at the following URL: http://localhost:4444/wd/hub\n\nUse RethinkDB\n\nThe RethinkDB is an open-source Database for Real-time Web (RethinkDB). A package (Laravel RethinkDB) is being developed and was released a version for Laravel 5.2 (experimental).\n\nRun the RethinkDB Container (rethinkdb) with the docker-compose up command.\n\ndocker-compose up -d rethinkdb\n\nAccess the RethinkDB Administration Console http://localhost:8090/#tables for create a database called database.\n\nAdd the RethinkDB configurations to the config/database.php configuration file:\n\n'connections' => [ 'rethinkdb' => [ 'name' => 'rethinkdb', 'driver' => 'rethinkdb', 'host' => env('DB_HOST', 'rethinkdb'), 'port' => env('DB_PORT', 28015), 'database' => env('DB_DATABASE', 'test'), ] // ... ],\n\nOpen your Laravel’s .env file and update the following variables:\n\nset the DB_CONNECTION to your rethinkdb.\n\nset the DB_HOST to rethinkdb.\n\nset the DB_PORT to 28015.\n\nset the DB_DATABASE to database.\n\nAdditional Notes\n\nYou may do backing up of your data using the next reference: backing up your data.\n\nUse Minio\n\nConfigure Minio:\n\nYou can change some settings in the .env file (MINIO_*)\n\nYou can install Minio Client on the workspace container: WORKSPACE_INSTALL_MC=true\n\nRun the Minio Container (minio) with the docker-compose up command. Example:\n\ndocker-compose up -d minio\n\nOpen your browser and visit the localhost on port 9000 at the following URL: http://localhost:9000\n\nCreate a bucket either through the webui or using the Minio Client:\n\nmc mb minio/bucket\n\nWhen configuring your other clients use the following details:\n\nAWS_URL=http://minio:9000 AWS_ACCESS_KEY_ID=access AWS_SECRET_ACCESS_KEY=secretkey AWS_DEFAULT_REGION=us-east-1 AWS_BUCKET=test AWS_USE_PATH_STYLE_ENDPOINT=true\n\nIn filesystems.php you should use the following details (s3):\n\n's3' => [ 'driver' => 's3', 'key' => env('AWS_ACCESS_KEY_ID'), 'secret' => env('AWS_SECRET_ACCESS_KEY'), 'region' => env('AWS_DEFAULT_REGION'), 'bucket' => env('AWS_BUCKET'), 'endpoint' => env('AWS_URL'), 'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false) ],\n\nAWS_USE_PATH_STYLE_ENDPOINT should set to true only for local purpose\n\nUse Thumbor\n\nThumbor is a smart imaging service. It enables on-demand crop, resizing and flipping of images. (Thumbor)\n\n1 - Configure Thumbor: - Checkout all the options under the thumbor settings\n\n2 - Run the Thumbor Container (minio) with the docker-compose up command. Example:\n\ndocker-compose up -d thumbor\n\n3 - Navigate to an example image on http://localhost:8000/unsafe/300x300/i.imgur.com/bvjzPct.jpg\n\nFor more documentation on Thumbor visit the Thumbor documenation page\n\nUse AWS\n\n1 - Configure AWS: - make sure to add your SSH keys in aws-eb-cli/ssh_keys folder\n\n2 - Run the Aws Container (aws) with the docker-compose up command. Example:\n\ndocker-compose up -d aws\n\n3 - Access the aws container with docker-compose exec aws bash\n\n4 - To start using eb cli inside the container, initialize your project first by doing ‘eb init’. Read the aws eb cli docs for more details.\n\nUse Grafana\n\n1 - Configure Grafana: Change Port using GRAFANA_PORT if you wish to. Default is port 3000.\n\n2 - Run the Grafana Container (grafana) with the docker-compose upcommand:\n\ndocker-compose up -d grafana\n\n3 - Open your browser and visit the localhost on port 3000 at the following URL: http://localhost:3000\n\n4 - Login using the credentials User = admin, Password = admin. Change the password in the web interface if you want to.\n\nUse Graylog\n\n1 - Boot the container docker-compose up -d graylog\n\n2 - Open your Laravel’s .env file and set the GRAYLOG_PASSWORD to some passsword, and GRAYLOG_SHA256_PASSWORD to the sha256 representation of your password (GRAYLOG_SHA256_PASSWORD is what matters, GRAYLOG_PASSWORD is just a reminder of your password).\n\nYour password must be at least 16 characters long You can generate sha256 of some password with the following command echo -n somesupersecretpassword | sha256sum\n\nGRAYLOG_PASSWORD=somesupersecretpassword GRAYLOG_SHA256_PASSWORD=b1cb6e31e172577918c9e7806c572b5ed8477d3f57aa737bee4b5b1db3696f09\n\n3 - Go to http://localhost:9000/ (if your port is not changed)\n\n4 - Authenticate from the app.\n\nUsername: admin Password: somesupersecretpassword (if you haven’t changed the password)\n\n5 - Go to the system->inputs and launch new input\n\nUse Traefik\n\nTo use Traefik you need to do some changes in .env and docker-compose.yml.\n\n1 - Open .env and change ACME_DOMAIN to your domain and ACME_EMAIL to your email.\n\n2 - You need to change the docker-compose.yml file to match the Traefik needs. If you want to use Traefik, you must not expose the ports of each container to the internet, but specify some labels.\n\n2.1 For example, let’s try with NGINX. You must have:\n\nnginx: build: context: ./nginx args: - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER} - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT} - CHANGE_SOURCE=${CHANGE_SOURCE} volumes: - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER} - ${NGINX_HOST_LOG_PATH}:/var/log/nginx - ${NGINX_SITES_PATH}:/etc/nginx/sites-available depends_on: - php-fpm networks: - frontend - backend labels: - \"traefik.enable=true\" - \"traefik.http.services.nginx.loadbalancer.server.port=80\" # https router - \"traefik.http.routers.https.rule=Host(`${ACME_DOMAIN}`, `www.${ACME_DOMAIN}`)\" - \"traefik.http.routers.https.entrypoints=https\" - \"traefik.http.routers.https.middlewares=www-redirectregex\" - \"traefik.http.routers.https.service=nginx\" - \"traefik.http.routers.https.tls.certresolver=letsencrypt\" # http router - \"traefik.http.routers.http.rule=Host(`${ACME_DOMAIN}`, `www.${ACME_DOMAIN}`)\" - \"traefik.http.routers.http.entrypoints=http\" - \"traefik.http.routers.http.middlewares=http-redirectscheme\" - \"traefik.http.routers.http.service=nginx\" # middlewares - \"traefik.http.middlewares.www-redirectregex.redirectregex.permanent=true\" - \"traefik.http.middlewares.www-redirectregex.redirectregex.regex=^https://www.(.*)\" - \"traefik.http.middlewares.www-redirectregex.redirectregex.replacement=https://$$1\" - \"traefik.http.middlewares.http-redirectscheme.redirectscheme.permanent=true\" - \"traefik.http.middlewares.http-redirectscheme.redirectscheme.scheme=https\"\n\ninstead of\n\nnginx: build: context: ./nginx args: - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER} - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT} - CHANGE_SOURCE=${CHANGE_SOURCE} volumes: - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER} - ${NGINX_HOST_LOG_PATH}:/var/log/nginx - ${NGINX_SITES_PATH}:/etc/nginx/sites-available - ${NGINX_SSL_PATH}:/etc/nginx/ssl ports: - \"${NGINX_HOST_HTTP_PORT}:80\" - \"${NGINX_HOST_HTTPS_PORT}:443\" depends_on: - php-fpm networks: - frontend - backend\n\nUse Mosquitto (MQTT Broker)\n\n1 - Configure Mosquitto: Change Port using MOSQUITTO_PORT if you wish to. Default is port 9001.\n\n2 - Run the Mosquitto Container (mosquitto) with the docker-compose upcommand:\n\ndocker-compose up -d mosquitto\n\n3 - Open your command line and use a MQTT Client (Eg. https://github.com/mqttjs/MQTT.js) to subscribe a topic and publish a message.\n\n4 - Subscribe: mqtt sub -t 'test' -h localhost -p 9001 -C 'ws' -v\n\n5 - Publish: mqtt pub -t 'test' -h localhost -p 9001 -C 'ws' -m 'Hello!'\n\nUse Tarantool (+ Admin panel)\n\n1 - Configure Tarantool Port and Tarantool Admin Port using environment variables: TARANTOOL_PORT and TARANTOOL_ADMIN_PORT. Default ports are 3301 and 8002.\n\n2 - Run the Tarantool and Tarantool Admin tool using docker-compose upcommand:\n\ndocker-compose up -d tarantool tarantool-admin\n\n3 - You can open admin tool visiting localhost:8002\n\n4 - There you should set Hostname with the value tarantool\n\n5 - After that your tarantool data will be available inside admin panel.\n\n6 - Also you can connect to tarantool server in console mode with this command:\n\ndocker-compose exec tarantool console\n\n7 - There you can operate with tarantool database (official documentation can be helpful).\n\nUse Keycloak\n\nRun the Keycloak Container (keycloak) with the docker-compose up command. Example:\n\ndocker-compose up -d keycloak\n\nOpen your browser and visit the localhost on port 8081: http://localhost:8081\n\nLogin with the following credentials:\n\nUsername: admin\n\nPassword: secret\n\nUse Mailpit\n\nRun the Mailpit Container (mailpit) with the docker-compose up command. Example:\n\ndocker-compose up -d mailpit\n\nOpen your browser and visit the localhost on port 8125: http://localhost:8125\n\nSetup config in your Laravel project’s .env file text MAIL_MAILER=smtp MAIL_HOST=mailpit MAIL_PORT=1125 MAIL_USERNAME=null MAIL_PASSWORD=null\n\nInstall CodeIgniter\n\nTo install CodeIgniter 3 on Laradock all you have to do is the following simple steps:\n\n1 - Open the docker-compose.yml file.\n\n2 - Change CODEIGNITER=false to CODEIGNITER=true.\n\n3 - Re-build your PHP-FPM Container docker-compose build php-fpm.\n\nInstall Powerline\n\n1 - Open the .env file and set WORKSPACE_INSTALL_POWERLINE and WORKSPACE_INSTALL_PYTHON to true.\n\n2 - Run docker-compose build workspace, after the step above.\n\nPowerline is required python\n\nInstall Symfony\n\n1 - Open the .env file and set WORKSPACE_INSTALL_SYMFONY to true.\n\n2 - Run docker-compose build workspace, after the step above.\n\n3 - The NGINX sites include a default config file for your Symfony project symfony.conf.example, so edit it and make sure the root is pointing to your project web directory.\n\n4 - Run docker-compose restart if the container was already running, before the step above.\n\n5 - Visit symfony.test\n\nMiscellaneous\n\nChange the timezone\n\nTo change the timezone for the workspace container, modify the TZ build argument in the Docker Compose file to one in the TZ database.\n\nFor example, if I want the timezone to be New York:\n\nworkspace: build: context: ./workspace args: - TZ=America/New_York ...\n\nWe also recommend setting the timezone in Laravel.\n\nAdd locales to PHP-FPM\n\nTo add locales to the container:\n\n1 - Open the .env file and set PHP_FPM_INSTALL_ADDITIONAL_LOCALES to true.\n\n2 - Add locale codes to PHP_FPM_ADDITIONAL_LOCALES.\n\n3 - Re-build your PHP-FPM Container docker-compose build php-fpm.\n\n4 - Check enabled locales with docker-compose exec php-fpm locale -a\n\nUpdate the locale setting, default is POSIX\n\n1 - Open the .env file and set PHP_FPM_DEFAULT_LOCALE to en_US.UTF8 or other locale you want.\n\n2 - Re-build your PHP-FPM Container docker-compose build php-fpm.\n\n3 - Check the default locale with docker-compose exec php-fpm locale\n\nAdding cron jobs\n\nYou can add your cron jobs to workspace/crontab/laradock after the php artisan line.\n\n* * * * * laradock /usr/bin/php /var/www/artisan schedule:run >> /dev/null 2>&1 # Custom cron * * * * * root echo \"Every Minute\" > /var/log/cron.log 2>&1\n\nMake sure you change the timezone if you don’t want to use the default (UTC).\n\nIf you are on Windows, verify that the line endings for this file are LF only, otherwise the cron jobs will silently fail.\n\nAccess workspace via ssh\n\nYou can access the workspace container through localhost:2222 by setting the INSTALL_WORKSPACE_SSH build argument to true.\n\nTo change the default forwarded port for ssh:\n\nworkspace: ports: - \"2222:22\" # Edit this line ...\n\nThen login using:\n\nssh -o PasswordAuthentication=no \\ -o StrictHostKeyChecking=no \\ -o UserKnownHostsFile=/dev/null \\ -p 2222 \\ -i workspace/insecure_id_rsa \\ laradock@localhost\n\nTo login as root, replace laradock@localhost with root@localhost.\n\nChange the (MySQL) Version\n\nBy default MySQL 8.0 is running.\n\nMySQL 8.0 is a development release. You may prefer to use the latest stable version, or an even older release. If you wish, you can change the MySQL image that is used.\n\nOpen up your .env file and set the MYSQL_VERSION variable to the version you would like to install.\n\nMYSQL_VERSION=5.7\n\nAvailable versions are: 5.5, 5.6, 5.7, 8.0, or latest. See https://store.docker.com/images/mysql for more information.\n\nMySQL root access\n\nThe default username and password for the root MySQL user are root and root.\n\n1 - Enter the MySQL container: docker-compose exec mysql bash.\n\n2 - Enter mysql: mysql -uroot -proot for non root access use mysql -udefault -psecret.\n\n3 - See all users: SELECT User FROM mysql.user;\n\n4 - Run any commands show databases, show tables, select * from......\n\nCreate Multiple Databases\n\nWith MySQL.\n\nCreate createdb.sql from mysql/docker-entrypoint-initdb.d/createdb.sql.example in mysql/docker-entrypoint-initdb.d/* and add your SQL syntax as follow:\n\nCREATE DATABASE IF NOT EXISTS `your_db_1` COLLATE 'utf8_general_ci' ; GRANT ALL ON `your_db_1`.* TO 'mysql_user'@'%' ;\n\nChange MySQL port\n\nModify the mysql/my.cnf file to set your port number, 1234 is used as an example.\n\n[mysqld] port=1234\n\nIf you need MySQL access from your host, do not forget to change the internal port number (\"3306:3306\" -> \"3306:1234\") in the docker-compose configuration file.\n\nUse custom Domain\n\nHow to use a custom domain, instead of the Docker IP.\n\nAssuming your custom domain is laravel.test\n\n1 - Open your /etc/hosts file and map your localhost address 127.0.0.1 to the laravel.test domain, by adding the following:\n\n127.0.0.1 laravel.test\n\n2 - Open your browser and visit {http://laravel.test}\n\nOptionally you can define the server name in the NGINX configuration file, like this:\n\nserver_name laravel.test;\n\nGlobal Composer Build Install\n\nEnabling Global Composer Install during the build for the container allows you to get your composer requirements installed and available in the container after the build is done.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_COMPOSER_GLOBAL_INSTALL argument under the Workspace Container and set it to true\n\n3 - Now add your dependencies to workspace/composer.json\n\n4 - Re-build the Workspace Container docker-compose build workspace\n\nAdd authentication for Magento\n\nAdding authentication credentials for Magento 2.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_COMPOSER_AUTH argument under the Workspace Container and set it to true\n\n3 - Now add your credentials to workspace/auth.json\n\n4 - Re-build the Workspace Container docker-compose build workspace\n\nInstall Prestissimo\n\nPrestissimo is a plugin for composer which enables parallel install functionality.\n\n1 - Enable Running Global Composer Install during the Build:\n\nClick on this Enable Global Composer Build Install and do steps 1 and 2 only then continue here.\n\n2 - Add prestissimo as requirement in Composer:\n\na - Now open the workspace/composer.json file\n\nb - Add \"hirak/prestissimo\": \"^0.3\" as requirement\n\nc - Re-build the Workspace Container docker-compose build workspace\n\nInstall Node + NVM\n\nTo install NVM and NodeJS in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NODE argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nA .npmrc file is included in the workspace folder if you need to utilise this globally. This is copied automatically into the root and laradock user’s folders on build.\n\nInstall PNPM\n\npnpm uses hard links and symlinks to save one version of a module only ever once on a disk. When using npm or Yarn for example, if you have 100 projects using the same version of lodash, you will have 100 copies of lodash on disk. With pnpm, lodash will be saved in a single place on the disk and a hard link will put it into the node_modules where it should be installed.\n\nAs a result, you save gigabytes of space on your disk and you have a lot faster installations! If you’d like more details about the unique node_modules structure that pnpm creates and why it works fine with the Node.js ecosystem. More info here: https://pnpm.js.org/en/motivation\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NODE and WORKSPACE_INSTALL_PNPM argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nInstall Node + YARN\n\nYarn is a new package manager for JavaScript. It is so faster than npm, which you can find here.To install NodeJS and Yarn in the Workspace container:\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NODE and WORKSPACE_INSTALL_YARN argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nInstall NPM GULP toolkit\n\nTo install NPM GULP toolkit in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NPM_GULP argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nInstall NPM BOWER\n\nTo install NPM BOWER package manager in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NPM_BOWER argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nInstall NPM VUE CLI\n\nTo install NPM VUE CLI in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NPM_VUE_CLI argument under the Workspace Container and set it to true\n\n3 - Change vue serve port using WORKSPACE_VUE_CLI_SERVE_HOST_PORT if you wish to (default value is 8080)\n\n4 - Change vue ui port using WORKSPACE_VUE_CLI_UI_HOST_PORT if you wish to (default value is 8001)\n\n5 - Re-build the container docker-compose build workspace\n\nInstall NPM ANGULAR CLI\n\nTo install NPM ANGULAR CLI in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_NPM_ANGULAR_CLI argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nTo install npm-check-updates CLI here in the Workspace container\n\n1 - Open the .env file\n\n2 - Make sure Node is also being installed (WORKSPACE_INSTALL_NODE set to true)\n\n3 - Search for the WORKSPACE_INSTALL_NPM_CHECK_UPDATES_CLI argument under the Workspace Container and set it to true\n\n4 - Re-build the container docker-compose build workspace\n\nInstall poppler-utils (and antiword combined)\n\nPoppler is a PDF rendering library based on Xpdf PDF viewer.\n\nThis package contains command line utilities (based on Poppler) for getting information of PDF documents, convert them to other formats, or manipulate them: * pdfdetach – lists or extracts embedded files (attachments) * pdffonts – font analyzer * pdfimages – image extractor * pdfinfo – document information * pdfseparate – page extraction tool * pdfsig – verifies digital signatures * pdftocairo – PDF to PNG/JPEG/PDF/PS/EPS/SVG converter using Cairo * pdftohtml – PDF to HTML converter * pdftoppm – PDF to PPM/PNG/JPEG image converter * pdftops – PDF to PostScript (PS) converter * pdftotext – text extraction * pdfunite – document merging tool\n\npoppler-utils is often used by popular PDF/DOC parsing packages in combination with antiword, hence both are installed when flags in .env are set.\n\nTo install poppler-utils (more here) in any of the workspace/php-fpm/php-worker/laravel-horizon container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_POPPLER_UTILS argument under the Workspace Container and set it to true\n\n3 - Search for the PHP_FPM_INSTALL_POPPLER_UTILS argument under the Workspace Container and set it to true\n\n4 - Search for the PHP_WORKER_INSTALL_POPPLER_UTILS argument under the Workspace Container and set it to true\n\n5 - Search for the LARAVEL_HORIZON_INSTALL_POPPLER_UTILS argument under the Workspace Container and set it to true\n\n6 - Re-build the container docker-compose build workspace php-fpm php-worker laravel-horizon\n\nInstall Linuxbrew\n\nLinuxbrew is a package manager for Linux. It is the Linux version of MacOS Homebrew and can be found here. To install Linuxbrew in the Workspace container:\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_LINUXBREW argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nInstall FFMPEG\n\nTo install FFMPEG in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_FFMPEG argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\n4 - If you use the php-worker container too, please follow the same steps above especially if you have conversions that have been queued.\n\nPS Don’t forget to install the binary in the php-fpm container too by applying the same steps above to its container, otherwise you’ll get an error when running the php-ffmpeg binary.\n\nInstall BBC Audio Waveform Image Generator\n\naudiowaveform is a C++ command-line application that generates waveform data from either MP3, WAV, FLAC, or Ogg Vorbis format audio files. Waveform data can be used to produce a visual rendering of the audio, similar in appearance to audio editing applications. Waveform data files are saved in either binary format (.dat) or JSON (.json).\n\nTo install BBC Audio Waveform Image Generator in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_AUDIOWAVEFORM argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\n4 - If you use the php-worker or laravel-horizon container too, please follow the same steps above especially if you have processing that have been queued.\n\nPS Don’t forget to install the binary in the php-fpm container too by applying the same steps above to its container, otherwise you’ll get an error when running the audiowaveform binary.\n\nInstall wkhtmltopdf\n\nwkhtmltopdf is a utility for outputting a PDF from HTML\n\nTo install wkhtmltopdf in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_WKHTMLTOPDF argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nPS Don’t forget to install the binary in the php-fpm container too by applying the same steps above to its container, otherwise the you’ll get an error when running the wkhtmltopdf binary.\n\nInstall GNU Parallel\n\nGNU Parallel is a command line tool to run multiple processes in parallel.\n\n(see https://www.gnu.org/software/parallel/parallel_tutorial.html)\n\nTo install GNU Parallel in the Workspace container\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_GNU_PARALLEL argument under the Workspace Container and set it to true\n\n3 - Re-build the container docker-compose build workspace\n\nInstall Supervisor\n\nSupervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.\n\n(see http://supervisord.org/index.html)\n\nTo install Supervisor in the Workspace container\n\n1 - Open the .env file\n\n2 - Set WORKSPACE_INSTALL_SUPERVISOR and WORKSPACE_INSTALL_PYTHON to true.\n\n3 - Create supervisor configuration file (for ex., named laravel-worker.conf) for Laravel Queue Worker in php-worker/supervisord.d/ by simply copy from laravel-worker.conf.example\n\n4 - Re-build the container docker-compose build workspace Or docker-compose up --build -d workspace\n\nCommon Terminal Aliases\n\nWhen you start your docker container, Laradock will copy the aliases.sh file located in the laradock/workspace directory and add sourcing to the container ~/.bashrc file.\n\nYou are free to modify the aliases.sh as you see fit, adding your own aliases (or function macros) to suit your requirements.\n\nInstall Aerospike extension\n\n1 - First install aerospike in the Workspace and the PHP-FPM Containers:\n\na) open the .env file\n\nb) search for the WORKSPACE_INSTALL_AEROSPIKE argument under the Workspace Container\n\nc) set it to true\n\nd) search for the PHP_FPM_INSTALL_AEROSPIKE argument under the PHP-FPM Container\n\ne) set it to true\n\n2 - Re-build the containers docker-compose build workspace php-fpm\n\nInstall Laravel Envoy\n\nA Tasks Runner.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_LARAVEL_ENVOY argument under the Workspace Container\n\n3 - Set it to true\n\n4 - Re-build the containers docker-compose build workspace\n\nLaravel Envoy Documentation Here\n\nInstall php calendar extension\n\n1 - Open the .env file\n\n2 - Search for the PHP_FPM_INSTALL_CALENDAR argument under the PHP-FPM container\n\n3 - Set it to true\n\n4 - Re-build the containers docker-compose build php-fpm\n\nInstall libfaketime in php-fpm\n\nLibfaketime allows you to control the date and time that is returned from the operating system. It can be used by specifying a special string in the PHP_FPM_FAKETIME variable in the .env file. For example: PHP_FPM_FAKETIME=-1d will set the clock back 1 day. See (https://github.com/wolfcw/libfaketime) for more information.\n\n1 - Open the .env file\n\n2 - Search for the PHP_FPM_INSTALL_FAKETIME argument under the PHP-FPM container\n\n3 - Set it to true\n\n4 - Search for the PHP_FPM_FAKETIME argument under the PHP-FPM container\n\n5 - Set it to the desired string\n\n6 - Re-build the containers docker-compose build php-fpm\n\nInstall YAML extension in php-fpm\n\nYAML PHP extension allows you to easily parse and create YAML structured data. I like YAML because it’s well readable for humans. See http://php.net/manual/en/ref.yaml.php and http://yaml.org/ for more info.\n\n1 - Open the .env file\n\n2 - Search for the PHP_FPM_INSTALL_YAML argument under the PHP-FPM container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build php-fpm\n\nInstall RDKAFKA extension in php-fpm\n\n1 - Open the .env file\n\n2 - Search for the PHP_FPM_INSTALL_RDKAFKA argument under the PHP-FPM container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build php-fpm\n\nInstall RDKAFKA extension in workspace\n\nThis is needed for ‘composer install’ if your dependencies require Kafka.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_RDKAFKA argument under the WORKSPACE container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build workspace\n\nInstall AST PHP extension\n\nAST exposes the abstract syntax tree generated by PHP 7+. This extension is required by tools such as Phan, a static analyzer for PHP.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_AST argument under the Workspace Container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build workspace\n\nNote If you need a specific version of AST then search for the WORKSPACE_AST_VERSION argument under the Workspace Container and set it to the desired version and continue step 4.\n\nInstall PHP Decimal extension\n\nThe PHP Decimal extension adds support for correctly-rounded, arbitrary-precision decimal floating point arithmetic. Applications that rely on accurate numbers (ie. money, measurements, or mathematics) can use Decimal instead of float or string to represent numerical values.\n\nFor more information visit the PHP Decimal website.\n\n2 - Search for the WORKSPACE_INSTALL_PHPDECIMAL argument under the Workspace Container\n\n2 - Search for the PHP_FPM_INSTALL_PHPDECIMAL argument under the PHP-FPM container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build workspace php-fpm\n\nInstall Git Bash Prompt\n\nA bash prompt that displays information about the current git repository. In particular the branch name, difference with remote branch, number of files staged, changed, etc.\n\n1 - Open the .env file\n\n2 - Search for the WORKSPACE_INSTALL_GIT_PROMPT argument under the Workspace Container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build workspace\n\nNote You can configure bash-git-prompt by editing the workspace/gitprompt.sh file and re-building the workspace container. For configuration information, visit the bash-git-prompt repository.\n\nInstall Oh My ZSH\n\nInstall Dnsutils\n\n1 - First install dnsutils in the Workspace and the PHP-FPM Containers:\n\na) open the .env file\n\nb) search for the WORKSPACE_INSTALL_DNSUTILS argument under the Workspace Container\n\nc) set it to true\n\nd) search for the PHP_FPM_INSTALL_DNSUTILS argument under the PHP-FPM Container\n\ne) set it to true\n\n2 - Re-build the containers docker-compose build workspace php-fpm\n\nWith the Laravel autocomplete plugin.\n\nZsh is an extended Bourne shell with many improvements, including some features of Bash, ksh, and tcsh.\n\nOh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration.\n\nLaravel autocomplete plugin adds aliases and autocompletion for Laravel Artisan and Bob command-line interfaces.\n\n1 - Open the .env file\n\n2 - Search for the SHELL_OH_MY_ZSH argument under the Workspace Container\n\n3 - Set it to true\n\n4 - Re-build the container docker-compose build workspace\n\n5 - Use it docker-compose exec --user=laradock workspace zsh\n\nNote You can configure Oh My ZSH by editing the /home/laradock/.zshrc in running container.\n\nWith the ZSH autosuggestions plugin.\n\nZSH autosuggestions plugin suggests commands as you type based on history and completions.\n\n1 - Enable ZSH as described previously\n\n2 - Set SHELL_OH_MY_ZSH_AUTOSUGESTIONS to true\n\n3 - Rebuild and use ZSH as described previously\n\nWith bash aliases loaded.\n\nLaradock provides aliases through the aliases.sh file located in the laradock/workspace directory. You can load it into ZSH.\n\n1 - Enable ZSH as described previously\n\n2 - Set SHELL_OH_MY_ZSH_ALIASES to true\n\n3 - Rebuild and enjoy aliases\n\nPHPStorm Debugging Guide\n\nRemote debug Laravel web and phpunit tests.\n\nDebugging Guide Here\n\nSetup Google Cloud\n\nSetting up Google Cloud for the docker registry.\n\ngcloud auth configure-docker\n\nLogin to gcloud for use the registry and auth the permission.\n\ngcloud auth login\n\nTrack your Laradock changes\n\nFork the Laradock repository.\n\nUse that fork as a submodule.\n\nCommit all your changes to your fork.\n\nPull new stuff from the main repository from time to time.\n\nImprove speed on MacOS\n\nDocker on the Mac is slow, at the time of writing. Especially for larger projects, this can be a problem. The problem is older than March 2016 - as it’s a such a long-running issue, we’re including it in the docs here.\n\nSo since sharing code into Docker containers with osxfs have very poor performance compared to Linux. Likely there are some workarounds:\n\nWorkaround A: using dinghy\n\nDinghy creates its own VM using docker-machine, it will not modify your existing docker-machine VMs.\n\nQuick Setup giude, (we recommend you check their docs)\n\n1) brew tap codekitchen/dinghy\n\n2) brew install dinghy\n\n3) dinghy create --provider virtualbox (must have virtualbox installed, but they support other providers if you prefer)\n\n4) after the above command is done it will display some env variables, copy them to the bash profile or zsh or.. (this will instruct docker to use the server running inside the VM)\n\n5) docker-compose up ...\n\nWorkaround B: using d4m-nfs\n\nYou can use the d4m-nfs solution in 2 ways, the first is by using the built-in Laradock integration, and the second is using the tool separately. Below is show case of both methods:\n\nB.1: using the built in d4m-nfs integration\n\nIn simple terms, docker-sync creates a docker container with a copy of all the application files that can be accessed very quickly from the other containers. On the other hand, docker-sync runs a process on the host machine that continuously tracks and updates files changes from the host to this intermediate container.\n\nOut of the box, it comes pre-configured for OS X, but using it on Windows is very easy to set-up by modifying the DOCKER_SYNC_STRATEGY on the .env\n\nUsage\n\nLaradock comes with sync.sh, an optional bash script, that automates installing, running and stopping docker-sync. Note that to run the bash script you may need to change the permissions chmod 755 sync.sh\n\n1) Configure your Laradock environment as you would normally do and test your application to make sure that your sites are running correctly.\n\n2) Make sure to set DOCKER_SYNC_STRATEGY on the .env. Read the syncing strategies for details.\n\n# osx: 'native_osx' (default) # windows: 'unison' # linux: docker-sync not required DOCKER_SYNC_STRATEGY=native_osx\n\n3) set APP_CODE_CONTAINER_FLAG to APP_CODE_CONTAINER_FLAG=:nocopy in the .env file\n\n4) Install the docker-sync gem on the host-machine:\n\n./sync.sh install\n\n5) Start docker-sync and the Laradock environment. Specify the services you want to run, as you would normally do with docker-compose up\n\n./sync.sh up nginx mysql\n\nPlease note that the first time docker-sync runs, it will copy all the files to the intermediate container and that may take a very long time (15min+). 6) To stop the environment and docker-sync do:\n\n./sync.sh down\n\nSetting up Aliases (optional)\n\nYou may create bash profile aliases to avoid having to remember and type these commands for everyday development. Add the following lines to your ~/.bash_profile:\n\nalias devup=\"cd /PATH_TO_LARADOCK/laradock; ./sync.sh up nginx mysql\" #add your services alias devbash=\"cd /PATH_TO_LARADOCK/laradock; ./sync.sh bash\" alias devdown=\"cd /PATH_TO_LARADOCK/laradock; ./sync.sh down\"\n\nNow from any location on your machine, you can simply run devup, devbash and devdown.\n\nAdditional Commands\n\nOpening bash on the workspace container (to run artisan for example):\n\n./sync.sh bash\n\nManually triggering the synchronization of the files:\n\n./sync.sh sync\n\nRemoving and cleaning up the files and the docker-sync container. Use only if you want to rebuild or remove docker-sync completely. The files on the host will be kept untouched.\n\n./sync.sh clean\n\nAdditional Notes\n\nYou may run laradock with or without docker-sync at any time using with the same .env and docker-compose.yml, because the configuration is overridden automatically when docker-sync is used.\n\nYou may inspect the sync.sh script to learn each of the commands and even add custom ones.\n\nIf a container cannot access the files on docker-sync, you may need to set a user on the Dockerfile of that container with an id of 1000 (this is the UID that nginx and php-fpm have configured on laradock). Alternatively, you may change the permissions to 777, but this is not recommended.\n\nVisit the docker-sync documentation for more details.\n\nB.2: using the d4m-nfs tool\n\nD4m-nfs automatically mount NFS volume instead of osxfs one.\n\n1) Update the Docker [File Sharing] preferences:\n\nClick on the Docker Icon > Preferences > (remove everything form the list except /tmp).\n\n2) Restart Docker.\n\n3) Clone the d4m-nfs repository to your home directory.\n\ngit clone https://github.com/IFSight/d4m-nfs ~/d4m-nfs\n\n4) Create (or edit) the file ~/d4m-nfs/etc/d4m-nfs-mounts.txt, and write the following configuration in it:\n\n/Users:/Users\n\n5) Create (or edit) the file /etc/exports, make sure it exists and is empty. (There may be collisions if you come from Vagrant or if you already executed the d4m-nfs.sh script before).\n\n6) Run the d4m-nfs.sh script (might need Sudo):\n\n~/d4m-nfs/d4m-nfs.sh\n\nThat’s it! Run your containers.. Example:\n\ndocker-compose up ...\n\nNote: If you faced any errors, try restarting Docker, and make sure you have no spaces in the d4m-nfs-mounts.txt file, and your /etc/exports file is clear.\n\nca-certificates\n\nTo install your own CA certificates, you can add them to the workspace/ca-certificates folder. This way the certificates will be installed into the system ca store of the workspace container.\n\nUpgrade Laradock\n\nMoving from Docker Toolbox (VirtualBox) to Docker Native (for Mac/Windows). Requires upgrading Laradock from v3.* to v4.*:\n\nStop the docker VM docker-machine stop {default}\n\nInstall Docker for Mac or Windows.\n\nUpgrade Laradock to v4.*.* (git pull origin master)\n\nUse Laradock as you used to do: docker-compose up -d nginx mysql.\n\nNote: If you face any problem with the last step above: rebuild all your containers docker-compose build --no-cache “Warning Containers Data might be lost!”\n\nHelp & Questions\n\nJoin the chat room on Gitter and get help and support from the community.\n\nYou can as well can open an issue on Github (will be labeled as Question) and discuss it with people on Gitter.\n\nCommon Problems\n\nHere’s a list of the common problems you might face, and the possible solutions.\n\nI see a blank (white) page instead of the Laravel ‘Welcome’ page!\n\nRun the following command from the Laravel root directory:\n\nsudo chmod -R 777 storage bootstrap/cache\n\nI see “Welcome to nginx” instead of the Laravel App!\n\nUse http://127.0.0.1 instead of http://localhost in your browser.\n\nI see an error message containing (address already in use) or (port is already allocated)\n\nMake sure the ports for the services that you are trying to run (22, 80, 443, 3306, etc.) are not being used already by other programs on the host, such as a built in apache/httpd service or other development tools you have installed.\n\nI get NGINX error 404 Not Found on Windows.\n\nGo to docker Settings on your Windows machine.\n\nClick on the Shared Drives tab and check the drive that contains your project files.\n\nEnter your windows username and password.\n\nGo to the reset tab and click restart docker.\n\nThe time in my services does not match the current time\n\nMake sure you’ve changed the timezone.\n\nStop and rebuild the containers (docker-compose up -d --build <services>)\n\nI get MySQL connection refused\n\nThis error sometimes happens because your Laravel application isn’t running on the container localhost IP (Which is 127.0.0.1). Steps to fix it:\n\nOption A\n\nCheck your running Laravel application IP by dumping Request::ip() variable using dd(Request::ip()) anywhere on your application. The result is the IP of your Laravel container.\n\nChange the DB_HOST variable on env with the IP that you received from previous step.\n\nOption B\n\nChange the DB_HOST value to the same name as the MySQL docker container. The Laradock docker-compose file currently has this as mysql\n\nI get stuck when building nginx on (fetch mirrors.aliyun.com/alpine/v3.5/main/x86_64/APKINDEX.tar.gz)\n\nAs stated on #749, Already fixed，just set CHANGE_SOURCE to false.\n\nCustom composer repo packagist url and npm registry url\n\nIn China, the origin source of composer and npm is very slow. You can add WORKSPACE_NPM_REGISTRY and WORKSPACE_COMPOSER_REPO_PACKAGIST config in .env to use your custom source.\n\nExample:\n\nWORKSPACE_NPM_REGISTRY=https://registry.npmmirror.com WORKSPACE_COMPOSER_REPO_PACKAGIST=https://packagist.phpcomposer.com\n\nI got (Module build failed: Error: write EPIPE) while compiling react application\n\nWhen you run npm build or yarn dev building a react application using webpack with elixir you may receive an Error: write EPIPE while processing .jpg images.\n\nThis is caused of an outdated library for processing .jpg files in ubuntu 16.04.\n\nTo fix the problem you can follow those steps\n\n1 - Open the .env.\n\n2 - Search for WORKSPACE_INSTALL_LIBPNG or add the key, if missing.\n\n3 - Set the value to true:\n\nWORKSPACE_INSTALL_LIBPNG=true\n\n4 - Finally rebuild the workspace image\n\ndocker-compose build workspace\n\nApache2 container won’t start on mac m1\n\nTo fix the problem you can follow those steps\n\n1 - Open the .env.\n\n2 - Search for APACHE_FOR_MAC_M1 or add the key, if missing.\n\n3 - Set the value to true:\n\nAPACHE_FOR_MAC_M1=true\n\n4 - Finally rebuild the workspace image\n\ndocker-compose build apache2\n\nRelated Projects\n\nLaradock Related Projects\n\nDocker Stacks: A GUI for managing Laradock. (by Subhadip Naskar)\n\nLaradock CLI: A CLI for managing Laradock. (by Lorin Lee)\n\nLaradock CLI: A CLI for managing Laradock. (by Harlan Wilton)\n\nAnsible Laradock Kubernetes: Ansible playbook to setup docker containers for Laravel apps using Laradock. (by Sifat Rahim)\n\nMonitor Laradock: Laradock Monitoring Tools (using Grafana). (by Dwi Fahni Denni)\n\nLaradock Manager: A simple app for managing Laradock containers. Made with wails.app (go & vue.js & vuetify). (by Zámbó Levente)\n\nLaradock Env: A wrapper with commands for managing Laradock. (by BAG Art)\n\nLara Query: Easy Laradock CLI. (by Okita kamegoro)\n\nLaradock CLI: Laradock CLI helper. (by Tony Messias)\n\nLaradock Lite: A Docker based laravel development environment with minimal dependencies. (by Liu Yang)\n\nLaradock Makefile: Makefile with some useful commands for Laradock. (by Dmitry Bazavluk)\n\nLaradock Build: Docker builder & running script for Laradock. (by Docker Framework)\n\nLaravel Laradock PHPStorm: Guide for configuring PHPStorm for remote debugging with Laravel & Laradock. (by Larry Eitel)\n\nLaradock Crudbooster: Docker compose & Kubernetes solution to build apps with crudbooster & Laradock. (by Samuele Chiocca)\n\nLaradock Sample: Install Laravel with Laradock. (by Tadaken3)\n\nStylemix’s Laradock: Alternate laradock for multiproject purpose. (by Stylemix LLC)\n\nInspired by Laradock\n\nDockery: Laradock for Ruby. (by Taufek Johar)\n\nRubyDev Dock: Laradock for Ruby. (by Diogo Scudelletti)\n\nNoDock: Laradock for NodeJS. (by Osedea)\n\nLaradock Multi: Laradock for PHP & NodeJS. (by BAG Art)\n\nWordpress Laradock: Laradock for Wordpress. (by Alexandr Shevchenko)\n\nYii2 Laradock: Laradock for Yii2. (by Yuda Sukmana)\n\nMageDock: Laradock for Magento. (by Ujjwal Ojha)\n\nDocker Codeigniter: Laradock for Codeigniter. (by Sebastian)\n\nKlaradock: A customized Laradock. (by Kim Hsiao)\n\nLaravel Boilerplate: A boilerplate with support for JWT. (by Casiva Agustin)\n\nFeel free to submit a PR for listing your project here.\n\nContributions\n\nHave a Question\n\nIf you have questions about how to use Laradock, please direct your questions to the discussion on Gitter. If you believe your question could help others, then consider opening an Issue (it will be labeled as Question) And you can still seek help on Gitter for it.\n\nFound an Issue\n\nIf you have an issue or you found a typo in the documentation, you can help us by opening an Issue.\n\nSteps to do before opening an Issue:\n\nBefore you submit your issue search the archive, maybe your question was already answered couple hours ago (search in the closed Issues as well).\n\nDecide if the Issue belongs to this project or to Docker itself! or even the tool you are using such as Nginx or MongoDB…\n\nIf your issue appears to be a bug, and hasn’t been reported, then open a new issue.\n\nThis helps us maximize the effort we can spend fixing issues and adding new features, by not reporting duplicate issues.\n\nWant a Feature\n\nYou can request a new feature by submitting an Issue (it will be labeled as Feature Suggestion). If you would like to implement a new feature then consider submitting a Pull Request yourself.\n\nLaradock uses Hugo as website generator tool, with the Material Docs theme. You might need to check their docs quickly.\n\nGo the DOCUMENTATION/content and search for the markdown file you want to edit\n\nNote: Every folder represents a section in the sidebar “Menu”. And every page and sidebar has a weight number to show it’s position in the site.\n\nTo update the sidebar or add a new section to it, you can edit this DOCUMENTATION/config.toml toml file.\n\nThe site will be auto-generated in the docs/ folder by Travis CI.\n\nHost the documentation locally\n\nOption 1: Use Hugo Docker Image:\n\nUpdate the DOCUMENTATION/content.\n\nGo to DOCUMENTATION/.\n\nRun docker run --rm -it -v $PWD:/src -p 1313:1313 -u hugo jguyomard/hugo-builder hugo server -w --bind=0.0.0.0\n\nVisit http://localhost:1313/\n\nOption 2: Install Hugo Locally:\n\nInstall Hugo on your machine.\n\nUpdate the DOCUMENTATION/content.\n\nDelete the /docs folder from the root.\n\nGo to DOCUMENTATION/.\n\nRun the hugo command to generate the HTML docs inside a new /docs folder.\n\nSupport new Software (Add new Container)\n\nFork the repo and clone the code.\n\nCreate folder as the software name (example: mysql - nginx).\n\nAdd your Dockerfile in the folder “you may add additional files as well”.\n\nAdd the software to the docker-compose.yml file.\n\nMake sure you follow the same code/comments style.\n\nAdd the environment variables to the .env.example if you have any.\n\nMOST IMPORTANTLY update the Documentation, add as much information.\n\nSubmit a Pull Request, to the master branch.\n\nEdit supported Software (Edit a Container)\n\nFork the repo and clone the code.\n\nOpen the software (container) folder (example: mysql - nginx).\n\nEdit the files.\n\nMake sure to update the Documentation in case you made any changes.\n\nSubmit a Pull Request, to the master branch.\n\nEdit Base Image\n\nOpen any dockerfile, copy the base image name (example: FROM phusion/baseimage:latest).\n\nSearch for the image in the Docker Hub and find the source..\n\nMost of the image in Laradock are official images, these projects live in other repositories and maintainer by other organizations.\n\nNote: Laradock has two base images for (Workspace and php-fpm, mainly made to speed up the build time on your machine.\n\nFind the dockerfiles, edit them and submit a Pull Request.\n\nWhen updating a Laradock base image (Workspace or php-fpm), ask a project maintainer “Admin” to build a new image after your PR is merged.\n\nNote: after the base image is updated, every dockerfile that uses that image, needs to update his base image tag to get the updated code.\n\nSubmit Pull Request Instructions\n\n1. Before Submitting a Pull Request (PR)\n\nAlways Test everything and make sure its working:\n\nPull the latest updates (or fork of you don’t have permission)\n\nBefore editing anything:\n\nTest building the container (docker-compose build –no-cache container-name) build with no cache first.\n\nTest running the container with some other containers in real app and see of everything is working fine.\n\nNow edit the container (edit section by section and test rebuilding the container after every edited section)\n\nTesting building the container (docker-compose build container-name) with no errors.\n\nTest it in a real App if possible.\n\n2. Submitting a PR\n\nConsider the following guidelines:\n\nSearch GitHub for an open or closed Pull Request that relates to your submission. You don’t want to duplicate efforts.\n\nMake your changes in a new git branch:\n\ngit checkout -b my-fix-branch master\n\nCommit your changes using a descriptive commit message.\n\nPush your branch to GitHub:\n\ngit push origin my-fix-branch\n\nIn GitHub, send a pull request to laradock:master.\n\nIf we suggest changes then:\n\nMake the required updates.\n\nCommit your changes to your branch (e.g. my-fix-branch).\n\nPush the changes to your GitHub repository (this will update your Pull Request).\n\nIf the PR gets too outdated we may ask you to rebase and force push to update the PR:\n\ngit rebase master -i git push origin my-fix-branch -f\n\nWARNING. Squashing or reverting commits and forced push thereafter may remove GitHub comments on code that were previously made by you and others in your commits.\n\n3. After your PR is merged\n\nAfter your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:\n\nDelete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\n\ngit push origin --delete my-fix-branch\n\nCheck out the master branch:\n\ngit checkout master -f\n\nDelete the local branch:\n\ngit branch -D my-fix-branch\n\nUpdate your master with the latest upstream version:\n\ngit pull --ff upstream master\n\nHappy Coding :)"
    }
}