{
    "id": "dbpedia_8306_2",
    "rank": 97,
    "data": {
        "url": "https://online.maryville.edu/online-bachelors-degrees/computer-science/resources/what-programming-languages-should-i-learn/",
        "read_more_link": "",
        "language": "en",
        "title": "What Programming Language Should I Learn?",
        "top_image": "https://online.maryville.edu/wp-content/uploads/sites/97/2023/09/MVU-BSMIS-2020-Q1-Skyscraper-What-Programming-Language-Should-a-Newbie-Learn-header-v2-1000x523-1.jpg",
        "meta_img": "https://online.maryville.edu/wp-content/uploads/sites/97/2023/09/MVU-BSMIS-2020-Q1-Skyscraper-What-Programming-Language-Should-a-Newbie-Learn-header-v2-1000x523-1.jpg",
        "images": [
            "https://whitelabel.2u.com/cdn/v1/d94dd672-cf1c-49f8-91a6-ac8145fd5e8b/marketing/logo-1.png",
            "https://whitelabel.2u.com/cdn/v1/d94dd672-cf1c-49f8-91a6-ac8145fd5e8b/marketing/logo-mobile.png",
            "https://online.maryville.edu/wp-content/uploads/sites/97/2023/09/MVU-BSMIS-2020-Q1-Skyscraper-What-Programming-Language-Should-a-Newbie-Learn-header-v2-1000x523-1.jpg",
            "https://online.maryville.edu/wp-content/uploads/sites/97/2023/09/MVU-BSMIS-2020-Q1-Skyscraper-What-Programming-Language-Should-a-Newbie-Learn-miniIg1-v2-1000x637-1.jpg?w=1000",
            "https://online.maryville.edu/wp-content/uploads/sites/97/2023/09/MVU-BSMIS-2020-Q1-Skyscraper-What-Programming-Language-Should-a-Newbie-Learn-miniIg2-v2-1000x607-1.jpg?w=1000",
            "https://whitelabel.2u.com/cdn/v1/d94dd672-cf1c-49f8-91a6-ac8145fd5e8b/marketing/logo-footer.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-08-14T14:16:39+00:00",
        "summary": "",
        "meta_description": "People considering a career as a software developer or database programmer wonder, What programming language should I learn? This guide helps them find an answer.",
        "meta_lang": "en",
        "meta_favicon": "https://whitelabel.2u.com/cdn/v1/d94dd672-cf1c-49f8-91a6-ac8145fd5e8b/marketing/favicon.ico",
        "meta_site_name": "Maryville University Online",
        "canonical_link": "https://online.maryville.edu/online-bachelors-degrees/computer-science/resources/what-programming-languages-should-i-learn/",
        "text": "Tables of Contents\n\nThe broad range of opportunities in software development can make it challenging for aspiring developers to know which professional path to take. For many, the journey toward a career in this field starts with the question, What programming language should I learn?\n\nThere’s no easy answer, considering there are more than 500 programming languages currently in use. But given the software industry’s strong growth outlook, it’s worth weighing the options.\n\nThe U.S. Bureau of Labor Statistics (BLS) forecasts that jobs for software developers will increase by 21% between 2018 and 2028, and as of May 2018, the median annual salary for application developers was $103,620. Job prospects and salaries are also impressive for database administrators and web developers, two other professions that rely on coding ability.\n\nThis guide provides a wealth of information and resources for students who are looking to develop the programming skills they need to tap into this expanding job market.\n\nA computer program consists of lines of code arranged in a specific syntax, or orderly system, similar to human language made up of words arranged in an order that gives them meaning. The code instructs a computer to perform a specific function, such as adding the numbers in a spreadsheet column, searching a database for a monthly sales total, or displaying the elements of a web page in a specific order.\n\nThose are the programming basics, although few programming operations are as straightforward as these examples. Fortunately, the art of programming has advanced to a point that puts incredible coding power in the hands of everyone.\n\nJust as any of the thousands of human languages can be used to communicate with others, any of the many different programming languages can be used to instruct a computer to perform some action. The only requirement is that the computer be capable of reading the code, understanding the instructions, and carrying out the intended action.\n\nProgramming Language Definition\n\nTechopedia defines a programming language as a computer language designed to create a standard form of commands that can be converted to code that a computer understands. The two basic elements of a programming language are semantics and syntax:\n\nThese are the basic elements of a programming language, as listed by Guru99:\n\nStandard Programming Languages vs. Nonstandard Programming Languages\n\nAll high-level programming languages use a compiler to convert their code to a version of assembly language that the computer’s CPU understands. Assembly languages generate the machine language — the 0s and 1s of binary code — that powers all computers and other digital devices.\n\nHigh-level languages are either standard programming languages based on the American National Standards Institute (ANSI) or International Organization for Standardization (ISO) standard for that language, or nonstandard, which means they use proprietary code that may not be compatible with other versions of the language.\n\nHowever, as Opensource.com explains, not all standards-based languages are considered “open source,” which means their code is readily available for others to access. For example, the OASIS nonprofit consortium differs from national and international standards bodies by developing standards that meet specific “open” criteria:\n\nProgramming languages are categorized by the method they use to instruct the computer to read the code, understand its meaning, and take the desired action. The basic types are interpreted, compiled, procedural, scripting, and markup.\n\nInterpreted: Basic, Lisp, Perl, Python, Ruby\n\nAn interpreted programming language converts a program’s code to a form the computer can process by running the code through an interpreter utility that is built into the language. The interpreter transforms the human-readable code into machine-readable code “on the fly”, as Lifewire explains.\n\nThe advantage of interpreted languages such as Python and Ruby is that the interpreted programs can run on any system that has the required software, including Windows, Linux, and macOS. Interpreted code is also easier to access and alter if necessary than doing so on compiled code, which has to be recompiled and redeployed after every change.\n\nCompiled: C/C++/C#, COBOL, Java, Objective-C, Visual Basic\n\nProgramming languages that use compilers to prepare the code for running on the target machine are able to process the code faster than their interpreted counterparts, which speeds up the computer’s performance. The compiler checks each line of code for errors one at a time rather than checking all the code at once, which facilitates error checking.\n\nA compiled program has to be recompiled for every hardware platform and OS it runs on, however. Also, a program may be compiled successfully but still not run as expected on the target machine, so each application has to be tested separately on each platform it is designed for.\n\nProcedural: Java, C/C++, Pascal, MATLAB, PL/I, RPG\n\nTechopedia defines a procedural programming language as one that uses “a series of well-structured steps and procedures within its programming context” to create a program. They are also called imperative languages. They use a systematic order of predefined statements, functions, and commands to instruct the computer to perform a task.\n\nProcedural languages perform operations by applying procedures and functions to the data and variables. The procedures can be called, or invoked, from anywhere in the program code’s hierarchy, including by other procedures. This is among the most common types of programming language, including Java, C/C++, and Pascal. By contrast, declarative languages, or nonprocedural languages, explicitly state the characteristics of the desired result but not how the result is to be obtained, as Encyclopedia.com explains.\n\nScripting: AppleScript, ColdFusion, JavaScript, PHP, VBScript, Windows PowerShell\n\nA scripting language is a programming language that doesn’t need to be compiled because the code is interpreted directly, as the Python Guru explains. The features that distinguish a scripting language from a compiled language are a reduction in the amount of code required to run a program, automation of the code interpretation by the target machine, and retrieval of information from the data sets included in the program.\n\nMarkup: SGML, HTML, XML, XHTML\n\nMarkup languages differ from programming languages in that rather than instructing the computer to perform some action, markup languages merely embed instructions in the text that tell the computer how to manipulate the text and other elements that appear on a web page. Lifewire explains that markup languages can usually be read by humans because the annotated instructions are separate from the actual text that will be displayed.\n\nOther Types of Languages\n\nBack To Top\n\nApplication programming creates software that creates data. Database programming uses data to create business intelligence. Since the arrival of the modern database about 40 years ago, the Structured Query Language (SQL) has been the principal tool used by database programmers to generate reports by querying business databases. SQL’s popularity is due in part to its availability on many different platforms and systems. Generally speaking, SQL is a programming language. More specifically, SQL is a database query language.\n\nThe two common roles for database programmers are database developer and database administrator, as Discover Data Science describes:\n\nBy contrast, application programmers design, develop, test, and implement software that creates data in the form of text documents, spreadsheets, images, and other types. The BLS describes the typical duties of a software developer:\n\nDatabase Languages\n\nBinary Terms defines database languages as sets of statements used to define and manipulate a database. While SQL remains the most popular database language among developers and administrators, NoSQL continues to gain in popularity, as indicated by a recent poll conducted by ScaleGrid.\n\nHowever, Oracle, the open-source MySQL, Microsoft SQL Server, and the open-source PostgreSQL give SQL the top four positions in DB-Engines’ monthly database ranking.\n\nSQL Command Categories\n\nIn SQL and other relational database management systems (DBMS), there are four types of database languages, as explained on Computerworld:\n\nOther SQL commands cover data administration and transactional control via statements.\n\nThe primary difference between SQL and NoSQL is that SQL relies on establishing relations between the data values stored in its many tables. It does so by using predefined schemas to structure data. The schema allows SQL and other relational DBMSs to store and process large amounts of structured data quickly and efficiently.\n\nBy contrast, NoSQL doesn’t require a fixed schema, so it accommodates a greater variety of data types, such as images, videos, emails, and social media data streams. The four types of NoSQL DBMSs are column oriented, document oriented, graph based, and Key value store, all of which support dynamic schemas for processing unstructured data.\n\nRelational vs. Nonrelational Databases\n\nAs mentioned above, relational databases impose a predefined schema on the databases, which makes the database and relations between data elements more complex as the system grows. When relational DBMSes become too complex, they risk being isolated in such a way that information is no longer shared between systems.\n\nMongoDB, the top-rated nonrelational DBMS on the DB-Engines database ranking, cites several reasons why a nonrelational database is more amenable to modern database applications:\n\nThe current ANSI SQL standard is ISO/IEC 9075:2016. However, the various versions of SQL are incompatible because vendors add nonstandard features to their products. As a result, Microsoft SQL Server, Oracle SQL, and other SQL versions take unique approaches to implementing the language.\n\nThe Benefits of SQL Standardization\n\nDespite the many proprietary extensions to SQL in commercial versions of the database, SQL itself and MySQL are open source, as are PostgreSQL and many other versions of SQL. This means the underlying code and advice on using the language are readily available on popular programmer and developer sites.\n\nAlso, SQL is comparatively easy to learn, and many people who learn SQL as their first experience with programming go on to learn C++, JavaScript, Python, and other programming languages.\n\nThe Advantages Offered by Nonstandard Versions of SQL\n\nBack To Top\n\nBack To Top\n\nThe Hypertext Markup Language (HTML) determines how text, images, and other elements appear and function on a web page. The Mozilla Foundation explains the basic building blocks of HTML:\n\nHTML is not a programming language in that it isn’t used to create applications or program a database. It is correctly called a markup language because it describes how web elements appear on a page.\n\nThe primary difference between markup languages and programming languages is that markup languages describe the appearance and behavior of the various elements that are presented on a web page, while programming languages are used to create applications that perform specific functions, such as a calculator, spreadsheet, or word processor.\n\nWeb Programming Basics\n\nAll web pages are made up of elements identified by tags. For example, a paragraph comprises text and other material enclosed within the tags <p></p>. Elements can be nested by placing tag pairs within other tag pairs:\n\nTwo noteworthy types of elements are block-level elements and inline elements:\n\nAttributes within the HTML tags describe other characteristics of the element enclosed in the tags that won’t appear on the web page. An example is the “href” attribute added to the hyperlink tags <a></a> that indicate the page the link will open when clicked:\n\nModern websites have a great number of dynamic and static elements that would be difficult to manage using HTML alone. Cascading Style Sheets (CSS) describe how web pages are presented on various types of devices and formats, such as mobile devices and oversized computer displays.\n\nHTML vs. Cascading Style Sheets\n\nCSS works with HTML and other markup languages, including the Extensible Markup Language (XML) and XHTML, which is a version of HTML that uses XML syntax. CSS makes it easier to maintain and update site content by allowing global changes via shared style sheets across pages and by environment or content type.\n\nHTML vs. JavaScript\n\nJavaScript is a scripting language for presenting complex elements, such as video and interactive graphics, on a web page. The Mozilla Foundation explains that JavaScript allows elements to be updated dynamically, such as stock tickers and sports scores. The two types of JavaScript are client side and server side:\n\nThe Extensible Hypertext Markup Language (XHTML) reformulates HTML as an application of XML, as TechTarget explains. It is extensible in that it allows new approaches to web content and actions to be implemented without having to wait for the features to be added to the HTML standard.\n\nXHTML enforces rules more strictly than in HTML, requiring that all tags have both opening and closing components, for example. More importantly, it promotes more structure and conception when creating web content, and when combined with CSS, more creative ways of presenting the content.\n\nOther HTML extensions supported by the World Wide Web Consortium (W3C) include CSS Style attributes, the Internationalization Tag Set, and Image Description (longdesc), which links detailed text descriptions to HTML images.\n\nBack To Top\n\nJava is a general-purpose, object-oriented programming language that is similar to C and C++ but intended to be easier to use than those two languages, as JavaWorld explains. Java programming is designed to let developers focus on solving business problems rather than on how to work within the constraints of a programming language.\n\nOther features that set Java apart from other programming languages are its extensive network library for linking to many types of networks, the reliability of the code it generates, and its built-in security features for running Java apps in distributed and networked environments.\n\nBecause Java is object-oriented, the language allows developers to create Java apps to meet a wide range of business needs. Unlike highly structured languages such as C, Java allows objects to be created without having to specify the object’s state or behaviors. For example, an object called “savings account” can be used in Java without having to specify its state, such as the account balance, or its behaviors, such as deposits and withdrawals, as C requires.\n\nArchitecture Neutral\n\nJava applications run relatively unchanged on a variety of hardware platforms and operating systems. Many languages require apps to generate instructions that are designed specifically for individual platforms. By contrast, Java’s bytecode instructions are easy for any platform to interpret via use of the Java Virtual Machine (JVM) and other techniques.\n\nPortability\n\nOne aspect of Java’s architecture neutrality is its ability to create apps that are easy to port to nearly every computer platform. This is in part because of its bytecode instructions. It’s also due to its many libraries that include types linking Java code with platform-specific functions.\n\nHigh Performance, Multithreaded\n\nMuch of Java’s fast performance relates to its interpretation, but the language also features just-in-time compilation to analyze interpreted bytecode instruction sequences. This allows frequently interpreted bytecode instruction sequences to be compiled based on platform-specific instructions, which results in even faster performance.\n\nDynamic Distribution\n\nIn Java, the connections between code and Java libraries are made dynamically at runtime, so developers don’t have to make the connections explicitly. Whenever a program or a library updates, developers need only distribute the updated version rather than recompile and redistribute the entire package. This minimizes the amount of code that must be distributed, but it can lead to version conflicts.\n\nThere are three primary versions of Java, along with a Java platform that includes the Java Virtual Machine (JVM) and an execution environment.\n\nJava Standard Edition (SE), Enterprise Edition (EE), and Micro Edition (ME)\n\nJava Platform for Running Compiled Code\n\nOne distinguishing feature of Java is that it serves as both a programming language and a platform. This allows Java programs to include their own built-in platform for compiling their code. The primary means of achieving this is JVM and the execution environment that allows the JVM to run the program code.\n\nJava Virtual Machine (JVM)\n\nThe JVM includes components for loading, verifying, and executing Java code, such as a just-in-time compiler that compiles the bytecode sequence to the target platform’s native code automatically to speed up the execution of the program.\n\nWhen an application executes, the JVM may be instructed by the bytecode instructions to open a file, display text or images on the screen, or perform some other task that requires interaction with the native platform. The JVM uses the Java Native Interface (JNI) bridge technology to work in conjunction with the native platform to carry out the required task.\n\nBack To Top\n\nThe Python Software Foundation defines Python as an “interpreted, object-oriented, high-level programming language with dynamic semantics.” Python web programming entails choosing a framework such as Django, Flask, or Pyramid, as Full Stack Python explains. Python frameworks make it easy to reuse code and structure projects in a way that is simple for other developers to build and maintain.\n\nZDNet notes that Python is “the hottest programming language on the planet” because it combines ease of use, versatility, and power. Paragyte Technologies lists Python’s strength and weaknesses:\n\nInterpreted, Object-Oriented, High-Level Programming\n\nPython is an interpreted language in that its source code is compiled in bytecode that is subsequently interpreted. It is object-oriented because it models items in the real world, such as a person, in terms of their properties and behaviors in addition to their relations with other entities, or objects. It is a high-level programming language in that its code must be interpreted separately rather than by the local processor directly.\n\nDynamic Semantics\n\nPython is frequently used as part of rapid application development projects. RAD replaces the traditional waterfall model of software development, in which design, testing, deployment, and maintenance are done sequentially, with a virtuous circle, in which all tasks in the development and operations life cycle occur simultaneously.\n\nWeb services firm QBurst lists the reasons why the Django framework for Python web programming is well suited to RAD projects:\n\nDevOps combines application development and operations by applying an agile methodology that prepares and installs updates and fixes to code continuously. Python features several tools designed specifically to support DevOps, as Full Stack Python explains:\n\nBack To Top\n\nTo someone just starting their research into programming careers, the many different programming languages now in use can make it difficult to know which to start with. For many professional software developers and database administrators, learning one language quickly leads to learning a second, a third, and possibly a fourth language in the course of their careers.\n\nLearning any programming language introduces budding computer professionals to concepts and principles that will apply in many other technology contexts. Knowing what programming language will be best to learn first depends on which aspect of software and database development best matches the person’s interests and goals. Consider this decision just the start of a long-lasting relationship with programming technology.\n\nBack To Top\n\nAdditional Sources\n\nKissflow, “Rapid Application Development: Changing How Developers Work”\n\nPackt, “Key Skills Every Database Programmer Should Have”\n\nPlutora (via Medium), “What Is Rapid Application Development? 5 Reasons to Use RAD”\n\nPython, What Is Python? Executive Summary\n\nStack Overflow, Developer Survey Results 2019\n\nTechopedia, Structured Query Language (SQL)\n\nTechTarget, Rapid Application Development (RAD)\n\nTIOBE, TIOBE Index for May 2020\n\nTypesnUses.com, “What Is a Programming Language and Different Types”\n\nU.S. Bureau of Labor Statistics Occupational Outlook Handbook, Computer Programmers\n\nWorld Wide Web Consortium, HTML & CSS\n\nXplenty, “SQL vs NoSQL: 5 Critical Differences”\n\nZDNet, “Microsoft: We Want You to Learn Python Programming Language for Free”"
    }
}