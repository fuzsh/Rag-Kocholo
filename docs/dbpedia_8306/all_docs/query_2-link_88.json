{
    "id": "dbpedia_8306_2",
    "rank": 88,
    "data": {
        "url": "https://guide.wisc.edu/courses/comp_sci/",
        "read_more_link": "",
        "language": "en",
        "title": "Computer Sciences (COMP SCI) < University of Wisconsin",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://guide.wisc.edu/images/uw-crest.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "COMP SCI/​L I S 102 — INTRODUCTION TO COMPUTING\n\n3 credits.\n\nProvides a broad overview of computing at an introductory level, including topics such as security, robotics, and artificial intelligence. Increases understanding of how computers work and how algorithms solve problems. Design and implement creative applications in an introductory coding environment. Provides a broad overview of computing and algorithms without an emphasis on programming.\n\nRequisites: MATH 96 or placement into MATH 141. MATH 118 does not fulfill the prerequisite. Not open to students with credit for COMP SCI 300 or 320\n\nCourse Designation: Gen Ed - Quantitative Reasoning Part A\n\nBreadth - Natural Science\n\nLevel - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Develop a fundamental understanding of the key concepts of computer science in a variety of contexts.\n\nAudience: Undergraduate\n\n2. Create art, music, stories, games and other programs in a visual, introductory programming language\n\nAudience: Undergraduate\n\n3. Understand how computers use algorithms to solve problems and act in intelligent ways.\n\nAudience: Undergraduate\n\n4. Understand how computers utilize large sets of data to provide insight and knowledge.\n\nAudience: Undergraduate\n\n5. Learn how software and hardware make modern computers work\n\nAudience: Undergraduate\n\nCOMP SCI 200 — PROGRAMMING I\n\n3 credits.\n\nLearn the process of incrementally developing small (200-500 lines) programs along with the fundamental Computer Science topics. These topics include: problem abstraction and decomposition, the edit-compile-run cycle, using variables of primitive and more complex data types, conditional and loop-based flow control, basic testing and debugging techniques, how to define and call functions (methods), and IO processing techniques. Also teaches and reinforces good programming practices including the use of a consistent style, and meaningful documentation. Intended for students who have no prior programming experience.\n\nRequisites: Satisfied Quantitative Reasoning (QR) A requirement or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Gen Ed - Quantitative Reasoning Part B\n\nBreadth - Natural Science\n\nLevel - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Design and implement a standalone program that can interact with the user via prompts and or menus, access and edit data stored in an array or list structure, and use and further process the data found in those structures.\n\nAudience: Undergraduate\n\n2. Trace code to determine output or results.\n\nAudience: Undergraduate\n\n3. Implement a given program design and choose correct control structures for implementing algorithms expressed in pseudocode.\n\nAudience: Undergraduate\n\n4. Interpret a variety of diagram types used to express programming concepts and results: truth tables, memory model diagrams, control flow charts (activity diagrams), class diagrams, object diagrams, and use-case diagrams.\n\nAudience: Undergraduate\n\n5. List, describe, use the basic I/O operations for reading and writing text files to and from the computer’s hard drive.\n\nAudience: Undergraduate\n\n6. Manipulate quantitative information to create models, and/or devise solutions to problems using multi-step arguments, based on and supported by quantitative information.\n\nAudience: Undergraduate\n\n7. Evaluate models and arguments using quantitative information.\n\nAudience: Undergraduate\n\n8. Express and interpret in context models, solutions and/or arguments using verbal, numerical, graphical algorithmic, computational or symbolic techniques.\n\nAudience: Undergraduate\n\nCOMP SCI 220 — DATA SCIENCE PROGRAMMING I\n\n4 credits.\n\nIntroduction to Data Science programming using Python. No previous programming experience required. Emphasis on analyzing real datasets in a variety of forms and visual communication.\n\nRequisites: Satisfied Quantitative Reasoning (QR) A requirement or declared in the Professional Capstone Program in Computer Sciences. Not open to students with credit for COMP SCI 301.\n\nCourse Designation: Gen Ed - Quantitative Reasoning Part B\n\nBreadth - Natural Science\n\nLevel - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Integrate foundational concepts and tools from mathematics, computer science and statistics to solve data science problems\n\nAudience: Undergraduate\n\n2. Demonstrate competencies with tools and processes necessary for data management and reproducibility\n\nAudience: Undergraduate\n\n3. Produce meaning from data employing modeling strategies\n\nAudience: Undergraduate\n\n4. Demonstrate critical thinking related to data science concepts and methods\n\nAudience: Undergraduate\n\n5. Demonstrate oral, written and visual communication skills related to data science\n\nAudience: Undergraduate\n\n6. Manipulate quantitative information to create models, and/or devise solutions to problems using multi-step arguments, based on and supported by quantitative information\n\nAudience: Undergraduate\n\nCOMP SCI/​MATH 240 — INTRODUCTION TO DISCRETE MATHEMATICS\n\n3 credits.\n\nBasic concepts of logic, sets, partial order and other relations, and functions. Basic concepts of mathematics (definitions, proofs, sets, functions, and relations) with a focus on discrete structures: integers, bits, strings, trees, and graphs. Propositional logic, Boolean algebra, and predicate logic. Mathematical induction and recursion. Invariants and algorithmic correctness. Recurrences and asymptotic growth analysis. Fundamentals of counting.\n\nRequisites: MATH 217 or 221\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 252 — INTRODUCTION TO COMPUTER ENGINEERING\n\n3 credits.\n\nLogic components built with transistors, rudimentary Boolean algebra, basic combinational logic design, basic synchronous sequential logic design, basic computer organization and design, introductory machine- and assembly-language programming.\n\nRequisites: None\n\nCourse Designation: Level - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Perform basic operations on binary representations for data\n\nAudience: Undergraduate\n\n2. Analyze simple combinational and sequential digital logic and memory systems\n\nAudience: Undergraduate\n\n3. Identify the components and operation of an instruction set processor and write programs using assembly language\n\nAudience: Undergraduate\n\n4. Recognize and analyze ethical and professional responsibilities in engineering contexts\n\nAudience: Undergraduate\n\nCOMP SCI 270 — FUNDAMENTALS OF HUMAN-COMPUTER INTERACTION\n\n3 credits.\n\nUser-centered software design including principles and methods for understanding user needs, designing and prototyping interface solutions, and evaluating their usability covered through lectures and hands-on in-class activities. Meets with COMP SCI 570.\n\nRequisites: Not open to students with credit for COMP SCI 570\n\nCourse Designation: Level - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2018\n\nCOMP SCI 272 — INTRODUCTION TO WEB DEVELOPMENT\n\n3 credits.\n\nIntroduces methods and tools for creating/maintaining secure and interactive web content. Topics include programming fundamentals to support core web concepts, application development essentials, and content management systems. Web best practices - such as accessibility, design, and critical thinking about relevant ethics and organization. Covers practical skills to design and implement websites using popular scripting languages and frameworks, content management systems (CMSs), and related tools.\n\nRequisites: Not open to students with credit for L I S 472.\n\nCourse Designation: Level - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLearning Outcomes: 1. Develop understanding and application of current web scripting languages and development tools and frameworks.\n\nAudience: Undergraduate\n\n2. Install, configure, and customize open source content management systems.\n\nAudience: Undergraduate\n\n3. Understand and apply user experience and accessibility best practices in building accessible web-based systems.\n\nAudience: Undergraduate\n\n4. Design solutions to problems using multi-step scripting, logical operations, and functions.\n\nAudience: Undergraduate\n\n5. Understand ethical issues and concerns related to website development and its related technologies.\n\nAudience: Undergraduate\n\n6. Analyze the management challenges, and ethical considerations inherent in web development projects.\n\nAudience: Undergraduate\n\nCOMP SCI 298 — DIRECTED STUDY IN COMPUTER SCIENCE\n\n1-3 credits.\n\nUndergraduate directed study in computer sciences.\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 300 — PROGRAMMING II\n\n3 credits.\n\nIntroduction to Object-Oriented Programming using classes and objects to solve more complex problems. Introduces array-based and linked data structures: including lists, stacks, and queues. Programming assignments require writing and developing multi-class (file) programs using interfaces, generics, and exception handling to solve challenging real world problems. Topics reviewed include reading/writing data and objects from/to files and exception handling, and command line arguments. Topics introduced: object-oriented design; class vs. object; create and define interfaces and iterators; searching and sorting; abstract data types (List,Stack,Queue,PriorityQueue(Heap),Binary Search Tree); generic interfaces (parametric polymorphism); how to design and write test methods and classes; array based vs. linked node implementations; introduction to complexity analysis; recursion.\n\nRequisites: Satisfied QR-A and (COMP SCI 200, 220, 302, 310, 301, or placement into COMP SCI 300) or (E C E/​COMP SCI 252 and E C E 203); graduate/professional standing; declared in Capstone Certificate in COMP SCI. Not open to students with credit for COMP SCI 367.\n\nCourse Designation: Gen Ed - Quantitative Reasoning Part B\n\nBreadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. List and describe common operations for List, Stack, Queue, Priority Queue, Tree.\n\nAudience: Undergraduate\n\n2. Analyze the time-complexity and compare the Big-Oh O(n) worse case complexity of different ADT implementations, and the complexity for any data structures and algorithms used to implement those operations.\n\nAudience: Undergraduate\n\n3. Identify and properly test all boundary conditions for comprehensive testing of their programs.\n\nAudience: Undergraduate\n\n4. Interpret and create a variety of diagrams: Call Stack trace; Stack, Queue, and Tree Data Structures; Recursive call (list or tree), control flow charts, class diagrams, object diagrams, and use-case diagrams.\n\nAudience: Undergraduate\n\n5. Implement Object-Oriented (multi-class) standalone programs that manage a variety of data storage and retrieval operations (Program development skills and experience).\n\nAudience: Undergraduate\n\n6. Evaluate models and arguments using quantitative information.\n\nAudience: Undergraduate\n\nCOMP SCI 304 — WES-CS GROUP MEETING\n\n0-1 credits.\n\nSmall group meetings for Wisconsin Emerging Scholars - Computer Science (WES-CS) students. Meets in small groups to work together on problems related to the COMP SCI 200 course material. For information about WES-CS membership, contact the computer sciences department.\n\nRequisites: Concurrent enrollment in COMP SCI 200 and member of Wisconsin Emerging Scholars program in Computer Science\n\nCourse Designation: Level - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 310 — PROBLEM SOLVING USING COMPUTERS\n\n3 credits.\n\nGives students an introduction to computer and analytical skills to use in their subsequent course work and professional development. Discusses several methods of using computers to solve problems, including elementary programming techniques, symbolic manipulation languages, and software packages. Techniques will be illustrated using sample problems drawn from elementary engineering. Emphasis is on introduction of algorithms with the use of specific tools to illustrate the methods.\n\nRequisites: MATH 222, graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Elementary\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2022\n\nCOMP SCI 319 — DATA SCIENCE PROGRAMMING I FOR RESEARCH\n\n3 credits.\n\nIntroduction to Data Science programming using Python. In addition to a survey of programming basics (control flow and data structures), web scraping, database queries, and tabular analysis will be introduced. Projects will emphasize analyzing real datasets in a variety of forms and visual communication using plotting tools. Similar to COMP SCI 220 but the pedagogical style of the projects will be adapted to graduate students in fields other than computer science and data science. No previous programming experience required.\n\nCOMP SCI 320 — DATA SCIENCE PROGRAMMING II\n\n4 credits.\n\nIntermediate approach to Data Science programming using Python. Experience with basic tabular analysis in Python is assumed. Learn to implement data structures (e.g., graphs) to efficiently represent datasets. Software-engineering tools such as version control and Python virtual environments will be introduced, with an emphasis on reproducibility of analysis. Tracing and A/B testing will be introduced as techniques for generating meaningful datasets. Introduces basic classification, clustering, optimization, and simulation techniques. Plotting and visual communication will be emphasized throughout the course.\n\nRequisites: COMP SCI 220 (or COMP SCI 301 prior to Spring 2020), COMP SCI 300, 319, graduate/professional standing, or declared in the Computer Sciences for Professionals Capstone Certificate\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. integrate foundational concepts and tools from mathematics, computer science and statistics to solve data science problems\n\nAudience: Undergraduate\n\n2. demonstrate competencies with tools and processes necessary for data management and reproducibility\n\nAudience: Undergraduate\n\n3. produce meaning from data employing modeling strategies\n\nAudience: Undergraduate\n\n4. demonstrate critical thinking related to data science concepts and methods\n\nAudience: Undergraduate\n\n5. conduct data science activities aware of and according to policy, privacy, security and ethical considerations\n\nAudience: Undergraduate\n\n6. demonstrate oral, written and visual communication skills related to data science\n\nAudience: Undergraduate\n\nCOMP SCI/​E C E 352 — DIGITAL SYSTEM FUNDAMENTALS\n\n3 credits.\n\nLogic components, Boolean algebra, combinational logic analysis and synthesis, synchronous and asynchronous sequential logic analysis and design, digital subsystems, computer organization and design.\n\nRequisites: Satisfied Quantitative Reasoning (QR) A requirement and E C E/​COMP SCI 252\n\nCourse Designation: Gen Ed - Quantitative Reasoning Part B\n\nBreadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 354 — MACHINE ORGANIZATION AND PROGRAMMING\n\n3 credits.\n\nAn introduction to fundamental structures of computer systems and the C programming language with a focus on the low-level interrelationships and impacts on performance. Topics include the virtual address space and virtual memory, the heap and dynamic memory management, the memory hierarchy and caching, assembly language and the stack, communication and interrupts/signals, compiling and assemblers/linkers.\n\nRequisites: E C E/​COMP SCI 252 and (COMP SCI 300 or 302) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Gen Ed - Quantitative Reasoning Part B\n\nBreadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 368 — LEARNING A PROGRAMMING LANGUAGE\n\n1 credit.\n\nFor students interested in learning a particular programming language. Focuses on a specific language offered at one of three levels: beginner, intermediate, and advanced. Students may repeat the course if the topic title is different.\n\nRequisites: None\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 400 — PROGRAMMING III\n\n3 credits.\n\nThe third course in our programming fundamentals sequence. It presumes that students understand and use functional and object-oriented design and abstract data types as needed. This course introduces balanced search trees, graphs, graph traversal algorithms, hash tables and sets, and complexity analysis and about classes of problems that require each data type. Students are required to design and implement using high quality professional code, a medium sized program, that demonstrates knowledge and use of latest language features, tools, and conventions. Additional topics introduced will include as needed for projects: inheritance and polymorphism; anonymous inner classes, lambda functions, performance analysis to discover and optimize critical code blocks. Students learn about industry standards for code development. Students will design and implement a medium size project with a more advanced user-interface design, such as a web or mobile application with a GUI and event- driven implementation; use of version-control software.\n\nRequisites: COMP SCI 300, graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 402 — INTRODUCING COMPUTER SCIENCE TO K-12 STUDENTS\n\n2 credits.\n\nWork in teams to lead Computer Science clubs and workshops for K-12 students at sites in the Madison area. Design and lead activities to help K-12 students learn computational thinking and computer programming.\n\nRequisites: COMP SCI 200, 220, 300, 301, 302, 310, 367, placement into COMP SCI 300, or L I S/​COMP SCI 102 (COMP SCI 202 prior to Fall 2023), graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Write programs in the Scratch programming language.\n\nAudience: Undergraduate\n\n2. Design and lead after-school programming clubs for K-12 students.\n\nAudience: Undergraduate\n\n3. Incorporate effective instructional strategies when teaching K-12 students.\n\nAudience: Undergraduate\n\n4. Reflect on and document their teaching.\n\nAudience: Undergraduate\n\nCOMP SCI/​STAT 403 — INTERNSHIP COURSE IN COMP SCI AND DATA SCIENCE\n\n1 credit.\n\nEnables students with outside internships to earn academic credit connected to their work experience related to the Computer Sciences or Data Science programs.\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, for 3 number of completions\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Understand the challenges and opportunities in Computer Sciences and Data Science professions\n\nAudience: Undergraduate\n\n2. Be prepared to find, apply and interview for a job and/or additional education\n\nAudience: Undergraduate\n\n3. Articulate your career goals and long-term trajectory\n\nAudience: Undergraduate\n\nCOMP SCI 407 — FOUNDATIONS OF MOBILE SYSTEMS AND APPLICATIONS\n\n3 credits.\n\nDesign and implementation of applications, systems, and services for mobile platforms with (i) constraints, such as limited processing, memory, energy, interfaces, variable bandwidth, and high mobility, and (ii) features, such as touchscreens, cameras, electronic compasses, GPS, and accelerometers.\n\nRequisites: (COMP SCI 300 or 367), graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Understand the mobile ecosystem.\n\nAudience: Undergraduate\n\n2. Understand basics of mobile system design and constituents, including wireless communication, location services, energy management, use of cloud services, and mobile device interface design.\n\nAudience: Undergraduate\n\n3. Demonstrate the fundamentals of mobile app development: setting up the development environment, creating an app from scratch, and understanding the app lifecycle.\n\nAudience: Undergraduate\n\n4. Understand the various app components, strategies for optimizing app performance, and use of mobile features.\n\nAudience: Undergraduate\n\n5. Construct end-to-end applications that use server backends.\n\nAudience: Undergraduate\n\n6. Demonstrate strong teamwork capabilities including collaborative working, task distribution, and conflict resolution.\n\nAudience: Undergraduate\n\nCOMP SCI 412 — INTRODUCTION TO NUMERICAL METHODS\n\n3 credits.\n\nInterpolation, solution of linear and nonlinear systems of equations, approximate integration and differentiation, numerical solution of ordinary differential equations, Data fitting (such as least squares) by polynomials and splines. Knowledge of matrix algebra recommended, such as MATH 340.\n\nRequisites: MATH 222 and (MATH/​COMP SCI 240 or MATH 234) and (COMP SCI 200, 300, 301, 302, 310, or placement into COMP SCI 300) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI/​I SY E/​MATH 425 — INTRODUCTION TO COMBINATORIAL OPTIMIZATION\n\n3 credits.\n\nFocuses on optimization problems over discrete structures, such as shortest paths, spanning trees, flows, matchings, and the traveling salesman problem. We will investigate structural properties of these problems, and we will study both exact methods for their solution, and approximation algorithms.\n\nRequisites: (MATH 320, 340, 341, or 375) or graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Breadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Identify and use the structural properties of combinatorial optimization problems\n\nAudience: Undergraduate\n\n2. Apply algorithms for the solution -exact or approximate- of a combinatorial optimization problem\n\nAudience: Undergraduate\n\n3. Explain why the algorithms studied are correct and understand their running time\n\nAudience: Undergraduate\n\nCOMP SCI/​E C E/​MATH 435 — INTRODUCTION TO CRYPTOGRAPHY\n\n3 credits.\n\nCryptography is the art and science of transmitting digital information in a secure manner. Provides an introduction to its technical aspects.\n\nRequisites: (MATH 320, 340, 341, or 375) or graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​STAT 471 — INTRODUCTION TO COMPUTATIONAL STATISTICS\n\n3 credits.\n\nClassical statistical procedures arise where closed-form mathematical expressions are available for various inference summaries (e.g. linear regression; analysis of variance). A major emphasis of modern statistics is the development of inference principles in cases where both more complex data structures are involved and where more elaborate computations are required. Topics from numerical linear algebra, optimization, Monte Carlo (including Markov chain Monte Carlo), and graph theory are developed, especially as they relate to statistical inference (e.g., bootstrapping, permutation, Bayesian inference, EM algorithm, multivariate analysis).\n\nRequisites: STAT/​MATH 310 and (STAT 333 or 340), graduate/professional standing, or declared in Statistics VISP\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2020\n\nLearning Outcomes: 1. Use computational tools (alongside mathematical ones) to extract information from (a) the likelihood function, the central object of interest in frequentist statistics, and (b) the posterior distribution, the central object of interest in Bayesian statistics\n\nAudience: Undergraduate\n\n2. Describe, understand the theoretical properties of, and implement basic algorithms for optimizing likelihood functions, including least squares and the IRLS algorithm, and the EM algorithm\n\nAudience: Undergraduate\n\n3. Understand random numbers and pseudorandom numbers and how to distinguish them, and utilize a variety of techniques for generating random variates from a probability distribution\n\nAudience: Undergraduate\n\n4. Use Monte Carlo methodology for such purposes as (a) carrying out a simulation study to study the properties of a statistical method, or (b) performing statistical inference via the bootstrap, or MCMC\n\nAudience: Undergraduate\n\n5. Understand the use of graphical models for representing the structure of complex joint distributions, and be able to use computational tools to extract information from graphical models\n\nAudience: Undergraduate\n\nCOMP SCI/​MATH/​STAT 475 — INTRODUCTION TO COMBINATORICS\n\n3 credits.\n\nProblems of enumeration, distribution, and arrangement. Inclusion-exclusion principle. Generating functions and linear recurrence relations. Combinatorial identities. Graph coloring problems. Finite designs. Systems of distinct representatives and matching problems in graphs. Potential applications in the social, biological, and physical sciences. Puzzles. Problem solving.\n\nRequisites: (MATH 320, 340, 341, or 375) or graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Understand basic counting strategies, such as staged thought-experiments, inclusion/exclusion, generating functions, and recurrence relations, and apply these strategies to solve a wide variety of counting problems.\n\nAudience: Undergraduate\n\n2. Recall basic objects that are used in combinatorics, such as permutations and combinations of sets and multisets, binomial and multinomial coefficients, the Catalan numbers, the Stirling numbers, and the partition numbers.\n\nAudience: Undergraduate\n\n3. Analyze a given combinatorial problem using the standard theorems of combinatorics, such as the pigeonhole principle, the Newton binomial theorem, the multinomial theorem, the Ramsey theorem, the Dilworth theorem, the Burnside theorem, and the Polya counting theorem.\n\nAudience: Undergraduate\n\n4. Construct mathematical arguments related to combinatorial problems using the above definitions, properties, theorems, and counting strategies; including the construction of examples and counterexamples.\n\nAudience: Undergraduate\n\n5. Convey his or her arguments in oral and written form in English, using appropriate mathematical terminology, notation, and grammar.\n\nAudience: Undergraduate\n\nCOMP SCI/​CURRIC 502 — THEORY AND PRACTICE IN COMPUTER SCIENCE EDUCATION\n\n1 credit.\n\nComputer science educational pedagogy and general teaching practices. Practical experience gained through tutoring students. Knowledge of object-oriented programming required.\n\nRequisites: COMP SCI 300 or 302 or declared in Computer Science graduate program\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 506 — SOFTWARE ENGINEERING\n\n3 credits.\n\nIdeas and techniques for designing, developing, and modifying large software systems. Topics include software engineering processes; requirements and specifications; project team organization and management; software architectures; design patterns; testing and debugging; and cost and quality metrics and estimation. Students will work in large teams on a substantial programming project.\n\nRequisites: (COMP SCI 367 or 400) and (COMP SCI 407, 536, 537, 545, 559, 564, 570, 679 or E C E/​COMP SCI 552) or graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​MATH 513 — NUMERICAL LINEAR ALGEBRA\n\n3 credits.\n\nDirect and iterative solution of linear and nonlinear systems and of eigenproblems. LU and symmetric LU factorization. Complexity, stability, and conditioning. Nonlinear systems. Iterative methods for linear systems. QR-factorization and least squares. Eigenproblems: local and global methods.\n\nRequisites: (MATH 340, 341, or 375) and (COMP SCI 200, 300, 301, 302, 310, or placement into COMP SCI 300) or graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) program\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​MATH 514 — NUMERICAL ANALYSIS\n\n3 credits.\n\nPolynomial forms, divided differences. Polynomial interpolation. Polynomial approximation: uniform approximation and Chebyshev polynomials, least-squares approximation and orthogonal polynomials. Numerical differentiation and integration. Splines, B-splines and spline approximation. Numerical methods for solving initial and boundary value problems for ordinary differential equations.\n\nRequisites: (MATH 320, 340, 341, or 375), (MATH 322, 376, 421, or 521), and (COMP SCI 200, 220, 300, 310, or 301 prior to Spring 2020, or placement into COMP SCI 300); grad/professional standing; member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Recall and state the formal definitions of the mathematical objects and their properties used in numerical analysis (e.g., Lagrange polynomials, Gibbs phenomenon, Runge phenomenon, orthogonal polynomials, recurrence relation, Gaussian quadrature points, splines, etc.).\n\nAudience: Both Grad & Undergrad\n\n2. Use different techniques of numerical analysis in their appropriate settings (e.g., polynomial interpolation, least square approximation, discrete Fourier transform, the Golub-Welsch algorithm, fast Fourier transform, trapezoidal rule and Simpson's rule, numerical differentiation, forward and backward Euler's method, etc.).\n\nAudience: Both Grad & Undergrad\n\n3. State the main theoretical results related to the error analysis for different methods (e.g., least square error, numerical integration using a Riemann sum, the trapezoidal rule, Simpson's rule and Gaussian quadratures, (semi-)discrete Fourier transform, forward and backward Euler, etc.), and recall the arguments for these theorems and the underlying logic of their proofs.\n\nAudience: Both Grad & Undergrad\n\n4. Convey arguments in oral and written forms using English and appropriate mathematical terminology, notation and grammar.\n\nAudience: Both Grad & Undergrad\n\n5. Identify applications of course content in current areas of research.\n\nAudience: Graduate\n\nCOMP SCI/​DS/​I SY E 518 — WEARABLE TECHNOLOGY\n\n3 credits.\n\nGives students hands-on experience in building wearable computing platforms. Designed for students who have a background in textiles and apparel design, computer science, engineering or media arts. By the completion of the course students will have fundamental knowledge of electronic circuitry, programming, and \"maker skills\".\n\nRequisites: Sophomore standing\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2022\n\nCOMP SCI 520 — INTRODUCTION TO THEORY OF COMPUTING\n\n3 credits.\n\nBasics about the notion, capabilities, and limitations of computation: elements of finite automata and regular languages, computability theory, and computational complexity theory. Additional topics include context-free grammars and languages, and complexity-theoretic cryptography.\n\nRequisites: (MATH/​COMP SCI 240 or STAT/​COMP SCI/​MATH 475) and (COMP SCI 367 or 400), or graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI/​E C E/​I SY E 524 — INTRODUCTION TO OPTIMIZATION\n\n3 credits.\n\nIntroduction to mathematical optimization from a modeling and solution perspective. Formulation of applications as discrete and continuous optimization problems and equilibrium models. Survey and appropriate usage of basic algorithms, data and software tools, including modeling languages and subroutine libraries.\n\nRequisites: (COMP SCI 200, 220, 300, 301, 302, 310, or placement into COMP SCI 300) and (MATH 320, 340, 341, or 375) or graduate/professional standing\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Engage in topics about \"optimization in practice\".\n\nAudience: Undergraduate\n\n2. Use and analyze the results of state of the art optimization software.\n\nAudience: Undergraduate\n\n3. Use the GAMS modeling system and Jupyter notebooks (in conjunction with elementary Python) or Julia and JUMP.\n\nAudience: Undergraduate\n\n4. Design good models for realistic applications in engineering and the sciences.\n\nAudience: Undergraduate\n\n5. Develop a \"commercial strength\" application of optimization technology.\n\nAudience: Undergraduate\n\nCOMP SCI/​I SY E/​MATH/​STAT 525 — LINEAR OPTIMIZATION\n\n3 credits.\n\nIntroduces optimization problems whose constraints are expressed by linear inequalities. Develops geometric and algebraic insights into the structure of the problem, with an emphasis on formal proofs. Presents the theory behind the simplex method, the main algorithm used to solve linear optimization problems. Explores duality theory and theorems of the alternatives.\n\nRequisites: MATH 320, 340, 341, 375, or 443 or graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Use linear programming to formulate real world decision problems.\n\nAudience: Both Grad & Undergrad\n\n2. Apply algorithms to solve linear programming problems and demonstrate their correctness.\n\nAudience: Both Grad & Undergrad\n\n3. Combine different proving techniques explored in class in an original way to show new results.\n\nAudience: Graduate\n\nCOMP SCI/​I SY E 526 — ADVANCED LINEAR PROGRAMMING\n\n3 credits.\n\nReview of linear programming. Polynomial time methods for linear programming. Quadratic programs and linear complementarity problems and related solution techniques. Solution sets and their continuity properties. Error bounds for linear inequalities and programs. Parallel algorithms for linear and quadratic programs.\n\nRequisites: STAT/​COMP SCI/​I SY E/​MATH 525 and (COMP SCI 200, 220, 300, 301, 302, 310, or placement into COMP SCI 300) or graduate/professional standing\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2020\n\nLearning Outcomes: 1. Use the theory of linear programming to prove general duality results\n\nAudience: Undergraduate\n\n2. Apply the concept of complementarity\n\nAudience: Undergraduate\n\n3. Analyze and develop algorithms for solving optimization and equilibrium problems\n\nAudience: Undergraduate\n\n4. Apply decomposition methods and other advanced algorithms for the solution of optimization and equilibrium problems\n\nAudience: Undergraduate\n\n5. Understand economic concepts and how they relate to optimization and equilibria\n\nAudience: Undergraduate\n\n6. Extend theory of linear programming into the framework of conic programming\n\nAudience: Undergraduate\n\nCOMP SCI/​E C E/​M E 532 — MATRIX METHODS IN MACHINE LEARNING\n\n3 credits.\n\nLinear algebraic foundations of machine learning featuring real-world applications of matrix methods from classification and clustering to denoising and data analysis. Mathematical topics include: linear equations, regression, regularization, the singular value decomposition, and iterative algorithms. Machine learning topics include: the lasso, support vector machines, kernel methods, clustering, dictionary learning, neural networks, and deep learning. Previous exposure to numerical computing (e.g. Matlab, Python, Julia, R) required.\n\nRequisites: (MATH 234, 320, 340, 341, or 375) and (E C E 203, COMP SCI 200, 220, 300, 301, 302, 310, 320, or placement into COMP SCI 300), graduate/professional standing, or declared in Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Use matrices and vectors to formulate classification, prediction and matrix completion problems using techniques such as least squares, regularized least squares, the singular value decomposition, subspace methods, support vector machines, neural networks and kernel methods.\n\nAudience: Both Grad & Undergrad\n\n2. Implement machine learning techniques for classification, prediction and matrix completion problems in software, and validate their performance on datasets using cross validation.\n\nAudience: Undergraduate\n\n3. Apply advanced techniques to formulate and prove optimality of various matrix based techniques in machine learning.\n\nAudience: Graduate\n\nCOMP SCI/​E C E 533 — IMAGE PROCESSING\n\n3 credits.\n\nMathematical representation of continuous and digital images; models of image degradation; picture enhancement, restoration, segmentation, and coding; pattern recognition, tomography.\n\nRequisites: E C E 330 and (MATH 320 or 340), graduate/professional standing, or member of Engineering Guest Students\n\nCourse Designation: Breadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI 534 — COMPUTATIONAL PHOTOGRAPHY\n\n3 credits.\n\nStudy of sensing and computational techniques that enhance or extend the capabilities of digital photography by using methods from computer vision and computer graphics to create new visual representations. Algorithms for analyzing, improving, manipulating, combining, and synthesizing images.\n\nRequisites: (COMP SCI 300 or 367) and (MATH 217 or 221) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2018\n\nCOMP SCI 536 — INTRODUCTION TO PROGRAMMING LANGUAGES AND COMPILERS\n\n3 credits.\n\nIntroduction to the theory and practice of compiler design. Comparison of features of several programming languages and their implications for implementation techniques. Several programming projects required.\n\nRequisites: E C E/​COMP SCI 354 and (COMP SCI 367 or 400) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 537 — INTRODUCTION TO OPERATING SYSTEMS\n\n4 credits.\n\nInput-output hardware, interrupt handling, properties of magnetic tapes, discs and drums, associative memories and virtual address translation techniques. Batch processing, time sharing and real-time systems, scheduling resource allocation, modular software systems, performance measurement and system evaluation.\n\nRequisites: E C E/​COMP SCI 354 and (COMP SCI 367 or 400) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 538 — INTRODUCTION TO THE THEORY AND DESIGN OF PROGRAMMING LANGUAGES\n\n3 credits.\n\nDesign and theory of programming languages: procedural, object-oriented, functional and logic paradigms. Serial and concurrent programming. Execution models and formal specification techniques.\n\nRequisites: E C E/​COMP SCI 354 and (COMP SCI 367 or 400) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E/​M E 539 — INTRODUCTION TO ARTIFICIAL NEURAL NETWORKS\n\n3 credits.\n\nTheory and applications of artificial neural networks: multi-layer perceptron, self-organization mapdeep neural network convolutional neural network, recurrent network, support vector machines genetic algorithm, and evolution computing. Applications to control, pattern recognition, prediction, and object detection and tracking.\n\nRequisites: COMP SCI 200, 220, 300, 301, 302, 310, placement into COMP SCI 300, or graduate/professional standing\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Identify if a given data analysis task is a pattern classification problem or a model approximation problem.\n\nAudience: Undergraduate\n\n2. Apply multi-layer perceptron neural network training algorithm to develop artificial neural network (ANN) based pattern classifiers and data predictors.\n\nAudience: Undergraduate\n\n3. Apply deep learning network for pattern classification\n\nAudience: Undergraduate\n\n4. Apply support vector machine (SVM) to develop pattern classifiers.\n\nAudience: Undergraduate\n\n5. Apply self-organization map and k-means to perform clustering operations of a given data set.\n\nAudience: Undergraduate\n\n6. Apply stochastic optimization methods, including simulated annealing, genetic algorithm and random search to solve a discrete optimization problem.\n\nAudience: Undergraduate\n\nCOMP SCI 540 — INTRODUCTION TO ARTIFICIAL INTELLIGENCE\n\n3 credits.\n\nPrinciples of knowledge-based search techniques, automatic deduction, knowledge representation using predicate logic, machine learning, probabilistic reasoning. Applications in tasks such as problem solving, data mining, game playing, natural language understanding, computer vision, speech recognition, and robotics.\n\nRequisites: (COMP SCI 300, 320 or 367) and (MATH 211, 217, 221, or 275) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. (Uninformed Search Methods) Identify the formulation of search for problem solving tasks. Understand important concepts in uninformed search. Apply the search methods on the formulated search problem.\n\nAudience: Undergraduate\n\n2. (Informed Search Methods) Understand important concepts in informed search. Differentiate from uninformed search. Solve the formulated search problem with the informed search method A*.\n\nAudience: Undergraduate\n\n3. (Local Search Methods) Identify the formulation of search for problem solving tasks. Apply the hill climbing method for local search problems. Identify and summarize the important features of the simulated annealing and genetic algorithms.\n\nAudience: Undergraduate\n\n4. (Game Playing) Recall the concept of games. Perform the minimax game playing method on formulated game tasks. Apply alpha-beta pruning to speed up the minimax method.\n\nAudience: Undergraduate\n\n5. (Unsupervised and Supervised Learning) Identify and summarize important features about supervised learning and unsupervised learning. Differentiate between the two types of tasks.\n\nAudience: Undergraduate\n\n6. (Classic Learning Methods) Apply linear regression, hierarchical agglomerative clustering algorithm, k-means clustering, or K nearest neighbor algorithm on given problem instances. Judge if the method is appropriate for a given task.\n\nAudience: Undergraduate\n\n7. (Neural Networks and Deep Learning) Apply Perceptron learning rule on given problem instances. Implement neural networks using given software packages.\n\nAudience: Undergraduate\n\n8. (Reinforcement Learning) Understand the concepts of reinforcement learning. Identify and summarize its important features. Compute value function and Q function. Apply value iteration and Q learning on given problems.\n\nAudience: Undergraduate\n\nCOMP SCI 541 — THEORY & ALGORITHMS FOR DATA SCIENCE\n\n3 credits.\n\nTheoretical methods for data science. Topics include: review of probability background, concentration inequalities, geometry of high dimensional random variables, parametric and non-parametric estimation, selected topics from optimization (optimality conditions; deterministic and stochastic gradient descent), PAC learning, sample complexity and algorithms for linear classification and regression, and property/distribution testing. Uses Python programming language.\n\nRequisites: (COMP SCI 200, 220, or STAT 340), (MATH 320, 340, 341, or 375), and (STAT 311, 333, 340, MATH/​STAT 309, 431, MATH 331, 531, or I SY E 210), or graduate/professional standing\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLearning Outcomes: 1. Use and explain theoretical concepts in data science, such as concentration inequalities, learning, nonparametric distribution testing, optimization.\n\nAudience: Undergraduate\n\n2. Use properties of high-dimensional random variables to perform tasks such as dimension reduction and separating mixtures of Gaussians\n\nAudience: Undergraduate\n\n3. Use optimization algorithms such as gradient descent and stochastic gradient descent and analyze their computational complexity\n\nAudience: Undergraduate\n\n4. Analyze sample complexity for basic learning tasks such binary linear classification, as well as computational complexity of algorithms for solving them\n\nAudience: Undergraduate\n\n5. Analyze sample complexity of distribution testing tasks, such as testing uniformity and testing equivalence of discrete distributions\n\nAudience: Undergraduate\n\nCOMP SCI 542 — INTRODUCTION TO SOFTWARE SECURITY\n\n3 credits.\n\nTeaches the security considerations that occur during all steps of the software development life cycle: methodologies for designing secure software, programming using secure programming techniques, in-depth vulnerability assessment methodologies, static and dynamic analysis tools for evaluating software security, and system defenses reducing security threats.\n\nRequisites: COMP SCI 400 or 320, graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Think like an attacker, that is to think about software the way that an adversary would.\n\nAudience: Undergraduate\n\n2. Design secure programs based on a structured methodology such as Threat Modeling. Have security in mind before writing the first line of code.\n\nAudience: Undergraduate\n\n3. Program in a secure way by mastering a comprehensive set of techniques for producing code that is more resilient to attack.\n\nAudience: Undergraduate\n\n4. Think like a security analyst, that is how to perform an in-depth software vulnerability assessments using a structured methodology such as First Principles Vulnerability Assessment (FPVA). Acquire the skills of a security analyst.\n\nAudience: Undergraduate\n\n5. Use a variety of automated tools that help statically and dynamically analyze code for security flaws.\n\nAudience: Undergraduate\n\nCOMP SCI 544 — INTRODUCTION TO BIG DATA SYSTEMS\n\n3 credits.\n\nDeploy and use distributed systems to store and analyze large datasets. Unstructured and structured approaches to storage will be covered. Analysis will involve learning new query languages, processing streaming data, and training machine learning models. Most programming will be done in Python.\n\nRequisites: COMP SCI 320, 400, or Graduate/Professional Standing\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Deploy distributed systems for data storage and analytics\n\nAudience: Undergraduate\n\n2. Demonstrate competencies with tools and processes necessary for loading data into distributed storage systems\n\nAudience: Undergraduate\n\n3. Write programs that use distributed platforms to efficiently analyze large datasets\n\nAudience: Undergraduate\n\n4. Produce meaning from large datasets by training machine learning models in parallel or on distributed systems\n\nAudience: Undergraduate\n\n5. Measure resource usage and overall cost of running distributed programs\n\nAudience: Undergraduate\n\n6. Optimize distributed analytics programs to reduce resource consumption and program runtime\n\nAudience: Undergraduate\n\n7. Demonstrate competencies with cloud services designed to store or analyze large datasets\n\nAudience: Undergraduate\n\nCOMP SCI/​E C E 552 — INTRODUCTION TO COMPUTER ARCHITECTURE\n\n3 credits.\n\nThe design of computer systems and components. Processor design, instruction set design, and addressing; control structures and microprogramming; memory management, caches, and memory hierarchies; and interrupts and I/O structures. E C E 551 or knowledge of Verilog is recommended.\n\nRequisites: (E C E/​COMP SCI 352 and E C E/​COMP SCI 354) or graduate/professional standing\n\nCourse Designation: Breadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 561 — PROBABILITY AND INFORMATION THEORY IN MACHINE LEARNING\n\n3 credits.\n\nProbabilistic tools for machine learning and analysis of real-world datasets. Introductory topics include classification, regression, probability theory, decision theory and quantifying information with entropy, relative entropy and mutual information. Additional topics include naive Bayes, probabilistic graphical models, discriminant analysis, logistic regression, expectation maximization, source coding and variational inference.\n\nRequisites: (MATH 320, 340, 341, 375, or M E/​COMP SCI/​E C E 532 or concurrent enrollment) and (E C E 331, STAT/​MATH 309, 431, STAT 311, 324, M E/​STAT 424 or MATH 531) or grad/profsnl standing or declared in Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Identify how ambiguity and noise leads to the need for probabilistic methods in machine learning\n\nAudience: Both Grad & Undergrad\n\n2. Implement classification, prediction and generative algorithms using a variety of techniques based in probability, information theory and machine learning\n\nAudience: Both Grad & Undergrad\n\n3. Prove optimality of a variety of algorithms and demonstrate understanding of sample complexity bounds\n\nAudience: Graduate\n\nCOMP SCI 564 — DATABASE MANAGEMENT SYSTEMS: DESIGN AND IMPLEMENTATION\n\n4 credits.\n\nWhat a database management system is; different data models currently used to structure the logical view of the database: relational, hierarchical, and network. Hands-on experience with relational and network-based database systems. Implementation techniques for database systems. File organization, query processing, concurrency control, rollback and recovery, integrity and consistency, and view implementation.\n\nRequisites: E C E/​COMP SCI 354 and (COMP SCI 367 or 400) or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 565 — INTRODUCTION TO DATA VISUALIZATION\n\n3 credits.\n\nIntroduction to topics such as perception, cognition, communication, design, implementation, applications, tools, and evaluation. Provides a broad survey of the field and covers fundamental concepts, theory, and tools in data visualization with opportunities for hands-on activities. Gain real-world experience in designing and evaluating visualizations.\n\nRequisites: COMP SCI 320, 400, or Graduate/Professional Standing\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Differentiate between visualizations to communicate within situational context.\n\nAudience: Undergraduate\n\n2. Illustrate the types of properties that make visualizations more effective.\n\nAudience: Undergraduate\n\n3. Apply techniques and algorithms for creating effective visualizations based on principles and techniques from graphic design, visual art, perceptual psychology, and cognitive science.\n\nAudience: Undergraduate\n\n4. Utilize visualization creation tools in individual and group assignment\n\nAudience: Undergraduate\n\nCOMP SCI 566 — INTRODUCTION TO COMPUTER VISION\n\n3 credits.\n\nTopics include image formation, feature detection, motion estimation, image mosaics, 3D shape reconstruction, and object recognition. Applications of these techniques include building 3D maps, creating virtual characters, organizing photo and video databases, human computer interaction, video surveillance, and automatic vehicle navigation. Broad overview of various computer vision and machine learning techniques and sensing and imaging technologies used in computer vision applications. This is a project-based course.\n\nRequisites: COMP SCI 400 and (MATH 320, 340, 341 or 375) and (STAT 302, 311, 324, 340, 371, STAT/​MATH 309, 431, MATH 331 or 531) or graduate/professional standing\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLearning Outcomes: 1. Know a broad range of fundamental concepts in 2D and 3D computer vision, including basic image processing, 2D image recognition, 3D sensing and motion recovery.\n\nAudience: Undergraduate\n\n2. Demonstrate an understanding of basic theories, current approaches, key concepts, and common practices in computer vision.\n\nAudience: Undergraduate\n\n3. Design basic statistics and machine learning algorithms for computer vision problems, conduct experiments to evaluate the proposed approaches, and analyze and interpret the results.\n\nAudience: Undergraduate\n\n4. Develop basic computer vision applications and projects in MATLAB.\n\nAudience: Undergraduate\n\n5. Communicate effectively through written reports, oral presentations, and discussions.\n\nAudience: Undergraduate\n\nCOMP SCI/​B M I 567 — MEDICAL IMAGE ANALYSIS\n\n3 credits.\n\nPresent introductory medical image processing and analysis techniques. Topics include medical imaging formats, segmentation, registration, image quantification, classification. Strongly encourage Matlab experience, such as COMP SCI 310 or 368-Matlab.\n\nRequisites: (MATH 320 or 340) and (STAT 511, 541, POP HLTH/​B M I 551, STAT 324, 371, or STAT/​F&W ECOL/​HORT 571) or graduate/professional standing\n\nCourse Designation: Breadth - Biological Sci. Counts toward the Natural Sci req\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Implement the key principles of ideas from probability, statistics and computer vision algorithms used in medical image analysis\n\nAudience: Undergraduate\n\n2. Recognize which image analysis problems will benefit from which modeling approach\n\nAudience: Undergraduate\n\n3. Apply algorithms about image analysis tasks and implement algorithms and pipelines using MATLAB\n\nAudience: Undergraduate\n\n4. Implement the building blocks taught in this course to independently learn and apply new, but related imaging analysis algorithms\n\nAudience: Undergraduate\n\nCOMP SCI 570 — INTRODUCTION TO HUMAN-COMPUTER INTERACTION\n\n4 credits.\n\nUser-centered software design; (1) principles of and methods for understanding user needs, designing and prototyping interface solutions, and evaluating their usability, (2) their applications in designing web-based, mobile,and embodied interfaces through month long group projects. Meets with Comp Sci 270.\n\nRequisites: COMP SCI 200, 300, 301, 302, placement into COMP SCI 300, or L I S/​COMP SCI 102 (COMP SCI 202 prior to Fall 2023); grad/professional standing; declared in the Capstone Cert in Comp Sci for Professionals. Not open to students with credit for COMP SCI 270.\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Understand fundamental concepts and principles of Human-Computer Interaction (HCI).\n\nAudience: Undergraduate\n\n2. Apply user-centered design principles and methods to create effective and usable interfaces.\n\nAudience: Undergraduate\n\n3. Analyze and evaluate user interfaces using appropriate usability evaluation techniques.\n\nAudience: Undergraduate\n\n4. Develop a toolbox of user-centered design techniques that can be applied to new design problems.\n\nAudience: Undergraduate\n\n5. Understand user needs and expectations with the aid of user research methods.\n\nAudience: Undergraduate\n\nCOMP SCI 571 — BUILDING USER INTERFACES\n\n3 credits.\n\nIntroduces software development of user interfaces (UIs). Build competence in implementing UIs using state-of-the-art (1) UI paradigms, such as event-driven interfaces, direct-manipulation interfaces, and dialogue-based interaction; (2) methods for capturing, interpreting, and responding to different forms of user input and states, including pointing, text entry, speech, touch, gestures, user activity, context, and physiological states; and (3) platform-specific UI development APIs, frameworks, and toolkits for multiple platforms including web/mobile/desktop interfaces, natural user interfaces, and voice user interfaces. Learn about the fundamental concepts, technologies, algorithms, and methods in building user interfaces, implement UIs using of state-of-the-art UI development tools, and build a UI development portfolio.\n\nRequisites: COMP SCI 400\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Engage in design thinking around user interface needs and problems, ideate and communicate conceptual design solutions\n\nAudience: Undergraduate\n\n2. Create visual designs, layouts, and navigation structures, and effectively use design languages, color palettes, and platform-specific design elements\n\nAudience: Undergraduate\n\n3. Prototype and develop user interfaces for the Web, mobile, and voice user interfaces (VUIs)\n\nAudience: Undergraduate\n\n4. Program front-end, user-facing software elements using the state-of-the-art programming languages, frameworks, and libraries\n\nAudience: Undergraduate\n\n5. Follow user-centered design principles, heuristics, and methods to iteratively build, assess, and refine design solutions\n\nAudience: Undergraduate\n\nCOMP SCI/​B M I 576 — INTRODUCTION TO BIOINFORMATICS\n\n3 credits.\n\nAlgorithms for computational problems in molecular biology. Studies algorithms for problems such as: genome sequencing and mapping, pairwise and multiple sequence alignment, modeling sequence classes and features, phylogenetic tree construction, and gene-expression data analysis.\n\nRequisites: (COMP SCI 320 or 400) and MATH 222, graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Explain the biology and significance of the most commonly measured molecules in molecular biology.\n\nAudience: Undergraduate\n\n2. Identify the primary computational problems associated with each type of biological data.\n\nAudience: Undergraduate\n\n3. Explain the major algorithms and approaches used to address the computational problems.\n\nAudience: Undergraduate\n\n4. Implement efficient algorithms for bioinformatic tasks through the use of the discussed approaches.\n\nAudience: Undergraduate\n\n5. Apply the discussed algorithms to novel but closely-related tasks.\n\nAudience: Undergraduate\n\n6. Understand the methods covered such that parts of the methods sections of published biological papers are interpretable.\n\nAudience: Undergraduate\n\n7. Begin to gain the qualifications of a bioinformatician.\n\nAudience: Undergraduate\n\nCOMP SCI 577 — INTRODUCTION TO ALGORITHMS\n\n4 credits.\n\nBasic paradigms for the design and analysis of efficient algorithms: greed, divide-and-conquer, dynamic programming, reductions, and the use of randomness. Computational intractability including typical NP-complete problems and ways to deal with them.\n\nRequisites: (MATH/​COMP SCI 240 or STAT/​COMP SCI/​MATH 475) and (COMP SCI 367 or 400), or graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 578 — CONTEST-LEVEL PROGRAMMING\n\n1 credit.\n\nTraining in computer programming for competitions: assessing the coding difficulty and complexity of computational problems, recognizing the applicability of known algorithms, fast coding and testing, team work. COMP SCI 577 is suggested but not required.\n\nRequisites: (COMP SCI 300 or 367), graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Fall 2020\n\nCOMP SCI/​DS 579 — VIRTUAL REALITY\n\n3 credits.\n\nIntroduces students to the field of virtual reality and focuses on creating immersive, interactive virtual experiences. Survey topics include historical perspectives on virtual reality technology, computer graphics and 3D modeling, human perception and psychology, human computer interaction and user interface design. This course is designed for students with backgrounds in Computer Science, Engineering, Art, Architecture and Design. Students will work in interdisciplinary teams on projects, culminating in a final event that will be showcased to the public. While not an official uisite, the class will be technologically motivated; therefore students should be comfortable learning new software. The class will utilize publicly available game design software which provides tools and services for the creation of interactive content. While not necessary, students may find it helpful to have taken classes in programming and computer graphics (such COMP SCI 559: Computer Graphics) or in 3D modeling (such as ART 429: 3D Digital Studio I or DS 242: Visual Communication II).\n\nRequisites: Sophomore standing\n\nCourse Designation: Level - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​L I S 611 — USER EXPERIENCE DESIGN 1\n\n3 credits.\n\nIntroduction to the user experience design including key stages of the design process, design ethics, and the methods and tools involved at each stage of design. Conduct formative research on clients, users, use contexts and tasks. Gain experience with user research methodologies and learn to create intermediate design tools such as personas. Develop and present a design proposal for a chosen project.\n\nRequisites: Declared in Information MS, Design + Innovation MS , or Capstone Certificate in User Experience Design\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Apply fundamental concepts and practices of user experience design\n\nAudience: Graduate\n\n2. Understand the ethics of design including practices of inclusive design and accessibility\n\nAudience: Graduate\n\n3. Conduct formative research to inform design\n\nAudience: Graduate\n\n4. Apply common user data collection methods\n\nAudience: Graduate\n\n5. Analyze and visualize processes across time and interfaces\n\nAudience: Graduate\n\n6. Create and apply common UX design tools such as personas, scenarios and user journey maps\n\nAudience: Graduate\n\n7. Effectively convey the output of user research and initial design through oral and written communication.\n\nAudience: Graduate\n\nCOMP SCI/​L I S 612 — USER EXPERIENCE DESIGN 2\n\n3 credits.\n\nAdvanced study of UX design. Introduces processes of ideation, key concepts of visual design, conceptual and interaction design, low and high-resolution prototyping of design techniques. Applications include drafting designs based on user models and initial testing of prototypes.\n\nRequisites: COMP SCI/​L I S 611 and Declared in Information MS, Design + Innovation MS, or Capstone Certificate in User Experience Design\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Develop design ideas and communicate them through brainstorming, sketching, and modeling;\n\nAudience: Graduate\n\n2. Create designs that follow principles of and best practices in visual and interaction design;\n\nAudience: Graduate\n\n3. Prototype designs using rapid prototyping methods for communication and testing;\n\nAudience: Graduate\n\n4. Understand human perceptual, cognitive, and motor processes involved in interaction;\n\nAudience: Graduate\n\n5. Evaluate designs using expert- and empirical-evaluation methods;\n\nAudience: Graduate\n\n6. Integrate design, prototyping, and evaluation methods and principles into a process toward addressing a design problem\n\nAudience: Graduate\n\n7. Communicate their ideas to others, integrate feedback into their design work, and critique the work of others constructively.\n\nAudience: Graduate\n\nCOMP SCI/​L I S 613 — USER EXPERIENCE DESIGN 3\n\n3 credits.\n\nConduct formal evaluations of the user experience (UX) or usability of a digital system. Gain familiarity with the evaluation and research process including key stages, tasks for each stage, common data collection and analysis methods, and common tools employed in the field. Gain experience with a variety of UX evaluation approaches. Collect pilot data and develop a proposal for further UX testing.\n\nRequisites: COMP SCI/​L I S 612 and Declared in Information MS, Design + Innovation MS, or Capstone Certificate in User Experience Design\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nLearning Outcomes: 1. Demonstrate understanding of a variety of UX testing approaches\n\nAudience: Graduate\n\n2. Plan and implement all phases of testing for a digital system including planning, data collection, analysis and reporting\n\nAudience: Graduate\n\n3. Demonstrate understanding of the relationship among research design, instruments, metrics, and data analysis\n\nAudience: Graduate\n\n4. Implement major testing approaches such as task-based, information architecture and accessibility\n\nAudience: Graduate\n\n5. Have knowledge of contemporary tools used for UX testing\n\nAudience: Graduate\n\n6. Communicate evaluation findings effectively and use data to improve systems design\n\nAudience: Graduate\n\nCOMP SCI/​L I S 614 — USER EXPERIENCE DESIGN CAPSTONE\n\n1 credit.\n\nApplies a design studio critique approach to produce a learning environment of collaborative and interdisciplinary peer critique and learning, in addition to provide expert feedback and suggestions. Present and defend the latest iteration of the user experience design project developed in earlier courses while learning about the professions associated with digital user experience design.\n\nRequisites: COMP SCI/​L I S 613 and declared in Design + Innovation MS, or the Capstone Certificate in User Experience Design\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Summer 2023\n\nCOMP SCI/​I SY E 635 — TOOLS AND ENVIRONMENTS FOR OPTIMIZATION\n\n3 credits.\n\nFormulation and modeling of applications from computer sciences, operations research, business, science and engineering involving optimization and equilibrium models. Survey and appropriate usage of software tools for solving such problems, including modeling language use, automatic differentiation, subroutine libraries and web-based optimization tools and environments.\n\nRequisites: (MATH 320, 340, 341, or 375) and (COMP SCI 200, 300, 301, 302, placement into COMP SCI 300, or L I S/​COMP SCI 102 (COMP SCI 202 prior to Fall 2023)); grad/professional standing; declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Physical Sci. Counts toward the Natural Sci req\n\nLevel - Intermediate\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nGrad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2015\n\nCOMP SCI 638 — UNDERGRADUATE TOPICS IN COMPUTING\n\n1-4 credits.\n\nSelected topics in computing. Each offering of the course will cover a topic selected by the instructor and may cover one or more topics from all of computer science.\n\nRequisites: COMP SCI 200, 300, 301, 302, 310, 367, placement into COMP SCI 300, or L I S/​COMP SCI 102 (COMP SCI 202 prior to Fall 2023), graduate/professional standing, or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Breadth - Natural Science\n\nLevel - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 639 — UNDERGRADUATE ELECTIVE TOPICS IN COMPUTING\n\n3-4 credits.\n\nSelected topics in computing. Each offering of the course will cover a topic selected by the instructor. Offerings of this course will provide sufficient depth into their subject to count as electives to meet CS Major requirements.\n\nRequisites: None\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 640 — INTRODUCTION TO COMPUTER NETWORKS\n\n3 credits.\n\nArchitecture of computer networks and network protocols, protocol layering, reliable transmission, congestion control, flow control, naming and addressing, unicast and multicast routing, network security, network performance widely used protocols such as Ethernet, wireless LANs, IP, TCP, and HTTP.\n\nRequisites: COMP SCI 537 or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 642 — INTRODUCTION TO INFORMATION SECURITY\n\n3 credits.\n\nSenior level undergraduate course covering various topics on information security. Covers a wide range of topics, such as cryptographic primitives, security protocols, system security, and emerging topics. Elementary knowledge of mathematical logic and discrete probability theory needed, such as MATH/​COMP SCI 240.\n\nRequisites: COMP SCI 537 or graduate/professional standing or declared in the Capstone Certificate in Computer Sciences for Professionals\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 681 — SENIOR HONORS THESIS\n\n3 credits.\n\nIndividual study for seniors completing theses for honors in the Computer Sciences major as arranged with a faculty member.\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nHonors - Honors Only Courses (H)\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 682 — SENIOR HONORS THESIS\n\n3 credits.\n\nIndividual study for seniors completing theses for honors in the Computer Sciences major as arranged with a faculty member. Continuation of COMP SCI 681\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nHonors - Honors Only Courses (H)\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 691 — SENIOR THESIS\n\n2-3 credits.\n\nIndividual study for seniors completing theses as arranged with a faculty member.\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Fall 2022\n\nCOMP SCI 692 — SENIOR THESIS\n\n2-3 credits.\n\nIndividual study for seniors completing theses as arranged with a faculty member, continuation of COMP SCI 691\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2023\n\nCOMP SCI 698 — DIRECTED STUDY\n\n1-6 credits.\n\nDirected study projects for juniors and seniors as arranged with a faculty member.\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Fall 2022\n\nCOMP SCI 699 — DIRECTED STUDY\n\n1-6 credits.\n\nDirected study projects for juniors and seniors as arranged with a faculty member.\n\nRequisites: Consent of instructor\n\nCourse Designation: Level - Advanced\n\nL&S Credit - Counts as Liberal Arts and Science credit in L&S\n\nRepeatable for Credit: Yes, unlimited number of completions\n\nLast Taught: Spring 2024\n\nCOMP SCI 701 — CONSTRUCTION OF COMPILERS\n\n3 credits.\n\nPrinciples of the design and implementation of programming languages. Topics include: Principles of compilation, static program analysis, compilation methods to support profiling, and code-generation methods. Knowledge of programming languages and compiler design strongly encouraged, such as COMP SCI 536.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2020\n\nCOMP SCI 702 — GRADUATE COOPERATIVE EDUCATION\n\n1-2 credits.\n\nA full-time cooperative experience (10 or 5 week option) in computer science in a commercial, government, or nonprofit setting, usually in the form of an internship. The work will be monitored by a graduate advisor from the faculty of the Department of Computer Sciences. 10 week option for 2 credits, 5 week option for 1 credit.\n\nRequisites: Consent of instructor\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: Yes, for 2 number of completions\n\nLast Taught: Spring 2024\n\nLearning Outcomes: 1. Understand the nature and demands of a professional career in computer science.\n\nAudience: Graduate\n\n2. Apply knowledge gained in computer science coursework in a professional setting.\n\nAudience: Graduate\n\nCOMP SCI 703 — PROGRAM VERIFICATION AND SYNTHESIS\n\n3 credits.\n\nFormal methods for program verification. Model-checking techniques; linear temporal logic; computational tree logic; logic/automata connection; bisimulations; probabilistic model-checking. Special topics include: program synthesis, verification and synthesis of privacy properties. Knowledge of programming languages and compiler design strongly encouraged, such as COMP SCI 536.\n\nCOMP SCI 704 — PRINCIPLES OF PROGRAMMING LANGUAGES\n\n3 credits.\n\nIntroduction to principles of advanced programming languages and programming-language theory. Topics include: lambda-calculus, functional languages, polymorphic functions, type inference, structural induction, lazy evaluation, operational semantics, denotational semantics, and axiomatic semantics. Students are strongly encouraged to have knowledge of programming languages, such as from COMP SCI 536.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2022\n\nCOMP SCI 706 — ANALYSIS OF SOFTWARE ARTIFACTS\n\n3 credits.\n\nAdvanced course covering various analysis techniques used in software engineering. Covers techniques for analyzing various software artifacts. Some of the topics that will be covered are: model checking, testing, program analysis, requirements analysis, and safety analysis. Students are strongly encouraged to have knowledge of programming languages and compiler design, such as COMP SCI 536, and a basic knowledge of mathematical logic.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2017\n\nCOMP SCI/​E C E 707 — MOBILE AND WIRELESS NETWORKING\n\n3 credits.\n\nDesign and implementation of protocols, systems, and applications for mobile and wireless networking, particularly at the media access control, network, transport, and application layers. Focus is on the unique problems and challenges presented by the properties of wireless transmission, various device constraints such as limited battery power, and node mobility. Knower of computer networking is strongly encouraged, such as from COMP SCI 640 or E C E 537.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 710 — COMPUTATIONAL COMPLEXITY\n\n3 credits.\n\nStudy of the capabilities and limitations of efficient computation. Relationships between models representing capabilities such as parallelism, randomness, quantum effects, and non-uniformity; and models based on the notions of nondeterminism, alternation, and counting, which capture the complexity of important problems. Knowledge of the theory of computation is strongly encouraged, such as COMP SCI 520.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​MATH 714 — METHODS OF COMPUTATIONAL MATHEMATICS I\n\n3 credits.\n\nDevelopment of finite difference methods for hyperbolic, parabolic and elliptic partial differential equations. Analysis of accuracy and stability of difference schemes. Direct and iterative methods for solving linear systems. Introduction to finite volume methods. Applications from science and engineering. Students are strongly encouraged to have programming skills (e.g. COMP SCI 200) and some undergraduate numerical analysis (e.g. MATH/​COMP SCI 514 or COMP SCI 412), analysis and differential equations (e.g. MATH 322 and MATH 521) and linear algebra (e.g. MATH 341).\n\nRequisites: Graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI/​MATH 715 — METHODS OF COMPUTATIONAL MATHEMATICS II\n\n3 credits.\n\nIntroduction to spectral methods (Fourier, Chebyshev, Fast Fourier Transform), finite element methods (Galerkin methods, energy estimates and error analysis), and mesh-free methods (Monte-Carlo, smoothed-particle hydrodynamics) for solving partial differential equations. Applications from science and engineering. Applications from science and engineering. Students are strongly encouraged to have programming skills (e.g. COMP SCI 200), undergraduate numerical analysis (e.g. MATH/​COMP SCI 514 or COMP SCI 412), analysis (MATH 322 and 521) and linear algebra (e.g. MATH 341 or equiv.)\n\nRequisites: Graduate/professional standing or member of the Pre-Masters Mathematics (Visiting International) Program\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​I SY E 719 — STOCHASTIC PROGRAMMING\n\n3 credits.\n\nStochastic programming is concerned with decision making in the presence of uncertainty, where the eventual outcome depends on a future random event. Topics include modeling uncertainty in optimization problems, risk measures, stochastic programming algorithms, approximation and sampling methods, and applications. Students are strongly encouraged to have knowledge of linear programming (e.g., MATH/​COMP SCI/​I SY E/​STAT 525) and probability and statistics (e.g., MATH/​STAT 431). Knowledge of integer optimization (MATH/​COMP SCI/​I SY E 728) is helpful, but not required.\n\nCOMP SCI/​B M I/​E C E/​MED PHYS 722 — COMPUTATIONAL OPTICS AND IMAGING\n\n3 credits.\n\nComputational imaging includes all imaging methods that produce images as a result of computation on collected signals. Learn the tools to design new computational imaging methods to solve specific imaging problems. Provides an understanding of the physics of light propagation and measurement, and the computational tools to model it, including wave propagation, ray tracing, the radon transform, and linear algebra using matrix and integral operators and the computational tools to reconstruct an image, including linear inverse problems, neural networks, convex optimization, and filtered back-projection. Covers a variety of example computational imaging techniques and their applications including coded apertures, structured illumination, digital holography, computed tomography, imaging through scattering media, compressed sensing, and non-line-of-sight imaging.\n\nCOMP SCI/​I SY E 723 — DYNAMIC PROGRAMMING AND ASSOCIATED TOPICS\n\n3 credits.\n\nGeneral and special techniques of dynamic programming developed by means of examples. Shortest-path algorithms. Deterministic equipment replacement models. Resource allocation problem. Traveling-salesman problem. Knapsack problem. Analysis of inventory systems. General stochastic formulations. Markovian decision processes. Students are strongly encouraged to have knowledge of mathematical optimization (e.g., COMP SCI/​I SY E/​MATH/​STAT 525, I SY E 623, COMP SCI/​I SY E/​MATH/​STAT 726), knowledge of analysis (e.g., MATH/​STAT 431 or 521) and programming ability (e.g., COMP SCI 200 or 301)\n\nCOMP SCI/​I SY E/​MATH/​STAT 726 — NONLINEAR OPTIMIZATION I\n\n3 credits.\n\nTheory and algorithms for nonlinear optimization, focusing on unconstrained optimization. Line-search and trust-region methods; quasi-Newton methods; conjugate-gradient and limited-memory methods for large-scale problems; derivative-free optimization; algorithms for least-squares problems and nonlinear equations; gradient projection algorithms for bound-constrained problems; and simple penalty methods for nonlinearly constrained optimization. Students are strongly encouraged to have knowledge of linear algebra and familiarity with basic mathematical analysis.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​I SY E 727 — CONVEX ANALYSIS\n\n3 credits.\n\nConvex sets in finite-dimensional spaces: relative interiors, separation, set operations. Convex functions: conjugacy, subdifferentials and directional derivations, functional operations, Fenchel-Rockafellar duality. Applications to operations research and related areas. Students taking this course are strongly encouraged to have had a course in basic analysis (e.g. MATH 521) and a course in linear algebra (e.g., MATH 340).\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2020\n\nCOMP SCI/​I SY E/​MATH 728 — INTEGER OPTIMIZATION\n\n3 credits.\n\nIntroduces optimization problems over integers, and surveys the theory behind the algorithms used in state-of-the-art methods for solving such problems. Special attention is given to the polyhedral formulations of these problems, and to their algebraic and geometric properties. Applicability of Integer Optimization is highlighted with applications in combinatorial optimization. Key topics include: formulations, relaxations, polyhedral theory, cutting planes, decomposition, enumeration. Students are strongly encouraged to have knowledge of Linear Programming (e.g., MATH/​COMP SCI/​I SY E/​STAT 525), including algorithms, duality and polyhedral theory.\n\nCOMP SCI/​I SY E/​MATH 730 — NONLINEAR OPTIMIZATION II\n\n3 credits.\n\nTheory and algorithms for nonlinearly constrained optimization. Relevant geometric concepts, including tangent and normal cones, theorems of the alternative, and separation results. Constraint qualifications. Geometric and algebraic expression of first-order optimality conditions. Second-order optimality conditions. Duality. Nonlinear programming algorithms: merit functions and filters; interior-point, augmented Lagrangian, and sequential quadratic programming algorithms.\n\nRequisites: STAT/​COMP SCI/​I SY E/​MATH 726\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2022\n\nCOMP SCI 736 — ADVANCED OPERATING SYSTEMS\n\n3 credits.\n\nAdvanced topics in operating systems, including process communication, resource allocation, multiprocess and network operating systems, kernel philosophies, fault-tolerant systems, virtual machines, high-level language systems, verifiability and proof techniques. Comp Sci 537 or cons inst\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2022\n\nCOMP SCI 739 — DISTRIBUTED SYSTEMS\n\n3 credits.\n\nBasic concepts; distributed programming; distributed file systems; atomic actions; fault tolerance, transactions, program and data replication, recovery; distributed machine architectures; security and authentication; load balancing and process migration; distributed debugging; distributed performance measurement; distributed simulation techniques; distributed applications; correctness considerations and proof systems.\n\nRequisites: COMP SCI 736\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2023\n\nCOMP SCI 740 — ADVANCED COMPUTER NETWORKS\n\n3 credits.\n\nAdvanced topics in computer communications networks: congestion and flow control; routing; rate-based protocols; high speed interfaces and technologies: metropolitan area networks; fast packet switching technologies; advanced applications; network services: name service, authentication, resource location. Students are strongly encouraged to have knowledge of computer network design and protocols (e.g., COMP SCI 640)\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2023\n\nCOMP SCI 744 — BIG DATA SYSTEMS\n\n3 credits.\n\nIssues in the design and implementation of big data processing systems, including: an overview of cluster architecture, key design goals (flexibility, performance and fault tolerance), popular execution frameworks, basic abstractions, and applications (e.g., batch analytics, stream processing, graph processing, and machine learning).\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 750 — REAL-TIME COMPUTING SYSTEMS\n\n3 credits.\n\nIntroduction to the unique issues in the design and analysis of computer systems for real-time applications. Hardware and software support for guaranteeing timeliness with and without failures. Resource management, time-constrained communication, scheduling and imprecise computations, real-time kernels and case studies. Students are strongly encouraged to have knowledge of computer architecture (e.g., E C E/​COMP SCI 552) and operating system functions (e.g., COMP SCI 537)\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 752 — ADVANCED COMPUTER ARCHITECTURE I\n\n3 credits.\n\nProcessor design, computer arithmetic, pipelining, multi-operation processors, vector processors, control units, precise interrupts, main memory, cache memories, instruction set design, stack machines, busses and I/O, protection and security. Students are strongly encouraged to have knowledge of computer architecture (e.g., E C E/​COMP SCI 552).\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 755 — VLSI SYSTEMS DESIGN\n\n3 credits.\n\nOverview of MOS devices and circuits; introduction to integrated circuit fabrication; topological design of data flow and control; interactive graphics layout; circuit simulation; system timing; organizational and architectural considerations; alternative implementation approaches; design project. E C E 555 or equivalent experience is strongly recommended.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI/​E C E 756 — COMPUTER-AIDED DESIGN FOR VLSI\n\n3 credits.\n\nBroad introduction to computer-aided design tools for VLSI, emphasizing implementation algorithms and data structures. Topics covered: design styles, layout editors, symbolic compaction, module generators, placement and routing, automatic synthesis, design-rule checking, circuit extraction, simulation and verification. Students are strongly encourage to have programming skills and to have taken a course in Digital System Fundamentals such as E C E/​COMP SCI 352.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI/​E C E 757 — ADVANCED COMPUTER ARCHITECTURE II\n\n3 credits.\n\nParallel algorithms, principles of parallelism detection and vectorizing compilers, interconnection networks, MIMD machines, processor synchronization, data coherence, multis, dataflow machines, special purpose processors. Students are strongly encouraged to have knowledge of computer architecture (e.g., E C E/​COMP SCI 552).\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 758 — ADVANCED TOPICS IN COMPUTER ARCHITECTURE\n\n3 credits.\n\nAdvanced topics in computer architecture that explore the implications to architecture of forthcoming evolutionary and revolutionary changes in application demands, software paradigms, and hardware implementation technologies. Students are strongly encouraged to have knowledge of computer architecture (e.g., E C E/​COMP SCI 552).\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI/​E C E/​E M A/​E P/​M E 759 — HIGH PERFORMANCE COMPUTING FOR APPLICATIONS IN ENGINEERING\n\n3 credits.\n\nAn overview of hardware and software solutions that enable the use of advanced computing in tackling computationally intensive Engineering problems. Hands-on learning promoted through programming assignments that leverage emerging hardware architectures and use parallel computing programming languages. Students are strongly encourage to have completed COMP SCI 367 or COMP SCI 400 or to have equivalent experience.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2023\n\nCOMP SCI/​E C E 760 — MACHINE LEARNING\n\n3 credits.\n\nComputational approaches to learning: including inductive inference, explanation-based learning, analogical learning, connectionism, and formal models. What it means to learn. Algorithms for learning. Comparison and evaluation of learning algorithms. Cognitive modeling and relevant psychological results.\n\nCOMP SCI/​E C E 761 — MATHEMATICAL FOUNDATIONS OF MACHINE LEARNING\n\n3 credits.\n\nMathematical foundations of machine learning theory and algorithms. Probabilistic, algebraic, and geometric models and representations of data, mathematical analysis of state-of-the-art learning algorithms and optimization methods, and applications of machine learning. Knowledge of probability [such as MATH/​STAT 431 or COMP SCI/​E C E 561] and linear algebra [such as MATH 341 or M E/​COMP SCI/​E C E 532] is required.\n\nCOMP SCI 762 — ADVANCED DEEP LEARNING\n\n3 credits.\n\nExplore methods and applications of deep learning. Covers cutting-edge topics, including neural architecture design, robustness and reliability of deep learning, learning with less supervision, lifelong machine learning, deep generative modeling, theoretical understanding of deep learning, and interpretable deep learning.\n\nCOMP SCI 763 — SECURITY AND PRIVACY FOR DATA SCIENCE\n\n3 credits.\n\nSecurity and privacy concerns in data science. Three core subjects will be considered: Differential privacy and algorithmic fairness; Adversarial machine learning; and Applied cryptography, especially with applications to machine learning. In addition, a selection of more advanced topics will be covered. Possible examples include additional notions of privacy, language-based security, robust optimization. A firm grasp of probability/statistics (STAT/​MATH 431) is recommended. Previous exposure to at least one of cryptography (COMP SCI/​E C E/​MATH 435), security (COMP SCI 642), and modern machine learning (COMP SCI/​E C E/​M E 539 or 540) is also recommended.\n\nCOMP SCI 764 — TOPICS IN DATABASE MANAGEMENT SYSTEMS\n\n3 credits.\n\nImplementation of database management systems, the impact of new technology on database management systems, back-end database computers, distributed database management systems, concurrency control, and query execution in both distributed and centralized systems, implementation of multiple user views, roll-back and recovery mechanisms, database translation. Students are strongly encouraged to have knowledge of database design (e.g., COMP SCI 564).\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Spring 2024\n\nCOMP SCI 765 — DATA VISUALIZATION\n\n3 credits.\n\nPrinciples of the visual presentation of data. Survey of Information Visualization, Scientific Visualization, and Visual Analytics. Design and evaluation of visualizations and interactive exploration tools. Introduction to relevant foundations in visual design, human perception, and data analysis. Encodings, layout and interaction. Approaches to large data sets. Visualization of complex data types such as scalar fields, graphs, sets, texts, and multi-variate data. Use of 2D, 3D and motion in data presentations. Implementation issues.\n\nRequisites: Graduate/professional standing\n\nCourse Designation: Grad 50% - Counts toward 50% graduate coursework requirement\n\nRepeatable for Credit: No\n\nLast Taught: Fall 2022\n\nCOMP SCI/​E C E 766 — COMPUTER VISION\n\n3 credits.\n\nFundamentals of image analysis and computer vision; image acquisition and geometry; "
    }
}