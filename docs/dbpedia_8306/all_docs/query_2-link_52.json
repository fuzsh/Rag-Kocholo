{
    "id": "dbpedia_8306_2",
    "rank": 52,
    "data": {
        "url": "https://www.datanovia.com/en/lessons/heatmap-in-r-static-and-interactive-visualization/",
        "read_more_link": "",
        "language": "en",
        "title": "Heatmap in R: Static and Interactive Visualization",
        "top_image": "https://www.datanovia.com/en/wp-content/uploads/2018/10/Couche_de_Soleil_sur_le_Sauveterre.jpg",
        "meta_img": "https://www.datanovia.com/en/wp-content/uploads/2018/10/Couche_de_Soleil_sur_le_Sauveterre.jpg",
        "images": [
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/datanovia-logo.png",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/datanovia-logo@2x.png",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/front_cover_660px_for_pahip-150x150.png",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/machine-learning-essentials-book-cover-150x150.png",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/principal-components-methods-book-cover-150x150.png",
            "https://www.datanovia.com/en/wp-content/plugins/sitepress-multilingual-cms/res/flags/en.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-r-base-heatmap-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-r-base-heatmap-color-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-gplots-heatmap-2-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/images/pheatmap.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/images/interactive-heatmap.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-simple-heatmap-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-dendogram-appearance-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-split-heatmap-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-split-heatmap-multiple-variables-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/figures/006-heatmap-heatmap-annotation-1.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/images/complex-heatmap-annotation.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/images/combine-multiple-heatmaps.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/images/heatmap-gene-expression-data.png",
            "https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/003-hierarchical-clustering-in-r/images/matrix-column-distribution.png",
            "https://secure.gravatar.com/avatar/6a01f967d8cdfab9a5e92506b724f029?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/56cd6b97b71b8ffa28f60d098cc41227?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/6a01f967d8cdfab9a5e92506b724f029?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/05a98d793e4075c2a6df3c48ec8d2065?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/56cd6b97b71b8ffa28f60d098cc41227?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/b5145315d2cc59893fd95d904b1bd29d?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/09824a4cddd8b2c01f602a13390a77ea?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/8191b820eb4c68057f20cea67bdecb5f?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/3763ec4178bd13bbac6c381676214efc?s=81&d=mm&r=g",
            "https://secure.gravatar.com/avatar/66d28139e47e8b35b1cb5fdad03a19be?s=81&d=mm&r=g",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/akassambara.jpg",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/datanovia-logo.png",
            "https://www.datanovia.com/en/wp-content/uploads/2018/09/datanovia-logo@2x.png"
        ],
        "movies": [
            "https://www.google.com/recaptcha/api/fallback?k=6LdNo3EUAAAAAEQybBUhVO50L0BaecKzfRlj7o6q"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-10-18T21:08:01+00:00",
        "summary": "",
        "meta_description": "A heatmap is another way to visualize hierarchical clustering. It's also called a false colored image, where data values are transformed to color scale. Here, we'll demonstrate how to draw and arrange a heatmap in R.",
        "meta_lang": "en",
        "meta_favicon": "https://www.datanovia.com/en/wp-content/uploads/2018/09/datanovia-favicon.png",
        "meta_site_name": "Datanovia",
        "canonical_link": "https://www.datanovia.com/en/lessons/heatmap-in-r-static-and-interactive-visualization/",
        "text": "35 mins\n\nHierarchical Clustering in R: The Essentials\n\nA heatmap (or heat map) is another way to visualize hierarchical clustering. It’s also called a false colored image, where data values are transformed to color scale.\n\nHeat maps allow us to simultaneously visualize clusters of samples and features. First hierarchical clustering is done of both the rows and the columns of the data matrix. The columns/rows of the data matrix are re-ordered according to the hierarchical clustering result, putting similar observations close to each other. The blocks of ‘high’ and ‘low’ values are adjacent in the data matrix. Finally, a color scheme is applied for the visualization and the data matrix is displayed. Visualizing the data matrix in this way can help to find the variables that appear to be characteristic for each sample cluster.\n\nPreviously, we described how to visualize dendrograms. Here, we’ll demonstrate how to draw and arrange a heatmap in R.\n\nContents:\n\nRelated Book\n\nPractical Guide to Cluster Analysis in R\n\nR Packages/functions for drawing heatmaps\n\nThere are a multiple numbers of R packages and functions for drawing interactive and static heatmaps, including:\n\nheatmap() [R base function, stats package]: Draws a simple heatmap\n\nheatmap.2() [gplots R package]: Draws an enhanced heatmap compared to the R base function.\n\npheatmap() [pheatmap R package]: Draws pretty heatmaps and provides more control to change the appearance of heatmaps.\n\nd3heatmap() [d3heatmap R package]: Draws an interactive/clickable heatmap\n\nHeatmap() [ComplexHeatmap R/Bioconductor package]: Draws, annotates and arranges complex heatmaps (very useful for genomic data analysis)\n\nHere, we start by describing the 5 R functions for drawing heatmaps. Next, we’ll focus on the ComplexHeatmap package, which provides a flexible solution to arrange and annotate multiple heatmaps. It allows also to visualize the association between different data from different sources.\n\nData preparation\n\nWe use mtcars data as a demo data set. We start by standardizing the data to make variables comparable:\n\ndf <- scale(mtcars)\n\nR base heatmap: heatmap()\n\nThe built-in R heatmap() function [in stats package] can be used.\n\nA simplified format is:\n\nheatmap(x, scale = \"row\")\n\nx: a numeric matrix\n\nscale: a character indicating if the values should be centered and scaled in either the row direction or the column direction, or none. Allowed values are in c(“row”, “column”, “none”). Default is “row”.\n\n# Default plot heatmap(df, scale = \"none\")\n\nIn the plot above, high values are in red and low values are in yellow.\n\nIt’s possible to specify a color palette using the argument col, which can be defined as follow:\n\nUsing custom colors:\n\ncol<- colorRampPalette(c(\"red\", \"white\", \"blue\"))(256)\n\nOr, using RColorBrewer color palette:\n\nlibrary(\"RColorBrewer\") col <- colorRampPalette(brewer.pal(10, \"RdYlBu\"))(256)\n\nAdditionally, you can use the argument RowSideColors and ColSideColors to annotate rows and columns, respectively.\n\nFor example, in the the R code below will customize the heatmap as follow:\n\nAn RColorBrewer color palette name is used to change the appearance\n\nThe argument RowSideColors and ColSideColors are used to annotate rows and columns respectively. The expected values for these options are a vector containing color names specifying the classes for rows/columns.\n\n# Use RColorBrewer color palette names library(\"RColorBrewer\") col <- colorRampPalette(brewer.pal(10, \"RdYlBu\"))(256) heatmap(df, scale = \"none\", col = col, RowSideColors = rep(c(\"blue\", \"pink\"), each = 16), ColSideColors = c(rep(\"purple\", 5), rep(\"orange\", 6)))\n\nEnhanced heat maps: heatmap.2()\n\nThe function heatmap.2() [in gplots package] provides many extensions to the standard R heatmap() function presented in the previous section.\n\n# install.packages(\"gplots\") library(\"gplots\") heatmap.2(df, scale = \"none\", col = bluered(100), trace = \"none\", density.info = \"none\")\n\nOther arguments can be used including:\n\nlabRow, labCol\n\nhclustfun: hclustfun=function(x) hclust(x, method=“ward”)\n\nIn the R code above, the bluered() function [in gplots package] is used to generate a smoothly varying set of colors. You can also use the following color generator functions:\n\ncolorpanel(n, low, mid, high)\n\nn: Desired number of color elements to be generated\n\nlow, mid, high: Colors to use for the Lowest, middle, and highest values. mid may be omitted.\n\nredgreen(n), greenred(n), bluered(n) and redblue(n)\n\nPretty heat maps: pheatmap()\n\nFirst, install the pheatmap package: install.packages(“pheatmap”); then type this:\n\nlibrary(\"pheatmap\") pheatmap(df, cutree_rows = 4)\n\nArguments are available for changing the default clustering metric (“euclidean”) and method (“complete”). It’s also possible to annotate rows and columns using grouping variables.\n\nInteractive heat maps: d3heatmap()\n\nFirst, install the d3heatmap package: install.packages(“d3heatmap”); then type this:\n\nlibrary(\"d3heatmap\") d3heatmap(scale(mtcars), colors = \"RdYlBu\", k_row = 4, # Number of groups in rows k_col = 2 # Number of groups in columns )\n\nThe d3heamap() function makes it possible to:\n\nPut the mouse on a heatmap cell of interest to view the row and the column names as well as the corresponding value.\n\nSelect an area for zooming. After zooming, click on the heatmap again to go back to the previous display\n\nEnhancing heatmaps using dendextend\n\nThe package dendextend can be used to enhance functions from other packages. The mtcars data is used in the following sections. We’ll start by defining the order and the appearance for rows and columns using dendextend. These results are used in others functions from others packages.\n\nThe order and the appearance for rows and columns can be defined as follow:\n\nlibrary(dendextend) # order for rows Rowv <- mtcars %>% scale %>% dist %>% hclust %>% as.dendrogram %>% set(\"branches_k_color\", k = 3) %>% set(\"branches_lwd\", 1.2) %>% ladderize # Order for columns: We must transpose the data Colv <- mtcars %>% scale %>% t %>% dist %>% hclust %>% as.dendrogram %>% set(\"branches_k_color\", k = 2, value = c(\"orange\", \"blue\")) %>% set(\"branches_lwd\", 1.2) %>% ladderize\n\nThe arguments above can be used in the functions below:\n\nThe standard heatmap() function [in stats package]:\n\nheatmap(scale(mtcars), Rowv = Rowv, Colv = Colv, scale = \"none\")\n\nThe enhanced heatmap.2() function [in gplots package]:\n\nlibrary(gplots) heatmap.2(scale(mtcars), scale = \"none\", col = bluered(100), Rowv = Rowv, Colv = Colv, trace = \"none\", density.info = \"none\")\n\nThe interactive heatmap generator d3heatmap() function [in d3heatmap package]:\n\nlibrary(\"d3heatmap\") d3heatmap(scale(mtcars), colors = \"RdBu\", Rowv = Rowv, Colv = Colv)\n\nComplex heatmap\n\nComplexHeatmap is an R/bioconductor package, developed by Zuguang Gu, which provides a flexible solution to arrange and annotate multiple heatmaps. It allows also to visualize the association between different data from different sources.\n\nIt can be installed as follow:\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\") BiocManager::install(\"ComplexHeatmap\")\n\nSimple heatmap\n\nYou can draw a simple heatmap as follow:\n\nlibrary(ComplexHeatmap) Heatmap(df, name = \"mtcars\", #title of legend column_title = \"Variables\", row_title = \"Samples\", row_names_gp = gpar(fontsize = 7) # Text size for row names )\n\nAdditional arguments:\n\nshow_row_names, show_column_names: whether to show row and column names, respectively. Default value is TRUE\n\nshow_row_hclust, show_column_hclust: logical value; whether to show row and column clusters. Default is TRUE\n\nclustering_distance_rows, clustering_distance_columns: metric for clustering: “euclidean”, “maximum”, “manhattan”, “canberra”, “binary”, “minkowski”, “pearson”, “spearman”, “kendall”)\n\nclustering_method_rows, clustering_method_columns: clustering methods: “ward.D”, “ward.D2”, “single”, “complete”, “average”, … (see ?hclust).\n\nTo specify a custom colors, you must use the the colorRamp2() function [circlize package], as follow:\n\nlibrary(circlize) mycols <- colorRamp2(breaks = c(-2, 0, 2), colors = c(\"green\", \"white\", \"red\")) Heatmap(df, name = \"mtcars\", col = mycols)\n\nIt’s also possible to use RColorBrewer color palettes:\n\nlibrary(\"circlize\") library(\"RColorBrewer\") Heatmap(df, name = \"mtcars\", col = colorRamp2(c(-2, 0, 2), brewer.pal(n=3, name=\"RdBu\")))\n\nWe can also customize the appearance of dendograms using the function color_branches() [dendextend package]:\n\nlibrary(dendextend) row_dend = hclust(dist(df)) # row clustering col_dend = hclust(dist(t(df))) # column clustering Heatmap(df, name = \"mtcars\", row_names_gp = gpar(fontsize = 6.5), cluster_rows = color_branches(row_dend, k = 4), cluster_columns = color_branches(col_dend, k = 2))\n\nSplitting heatmap by rows\n\nYou can split the heatmap using either the k-means algorithm or a grouping variable.\n\nIt’s important to use the set.seed() function when performing k-means so that the results obtained can be reproduced precisely at a later time.\n\nTo split the dendrogram using k-means, type this:\n\n# Divide into 2 groups set.seed(2) Heatmap(df, name = \"mtcars\", k = 2)\n\nTo split by a grouping variable, use the argument split. In the following example we’ll use the levels of the factor variable cyl [in mtcars data set] to split the heatmap by rows. Recall that the column cyl corresponds to the number of cylinders.\n\n# split by a vector specifying rowgroups Heatmap(df, name = \"mtcars\", split = mtcars$cyl, row_names_gp = gpar(fontsize = 7))\n\nNote that, split can be also a data frame in which different combinations of levels split the rows of the heatmap.\n\n# Split by combining multiple variables Heatmap(df, name =\"mtcars\", split = data.frame(cyl = mtcars$cyl, am = mtcars$am), row_names_gp = gpar(fontsize = 7))\n\nIt’s also possible to combine km and split:\n\nHeatmap(df, name =\"mtcars\", col = mycol, km = 2, split = mtcars$cyl)\n\nIf you want to use other partitioning method, rather than k-means, you can easily do it by just assigning the partitioning vector to split. In the R code below, we’ll use pam() function [cluster package]. pam() stands for Partitioning of the data into k clusters “around medoids”, a more robust version of K-means.\n\n# install.packages(\"cluster\") library(\"cluster\") set.seed(2) pa = pam(df, k = 3) Heatmap(df, name = \"mtcars\", col = mycol, split = paste0(\"pam\", pa$clustering))\n\nHeatmap annotation\n\nThe HeatmapAnnotation class is used to define annotation on row or column. A simplified format is:\n\nHeatmapAnnotation(df, name, col, show_legend)\n\ndf: a data.frame with column names\n\nname: the name of the heatmap annotation\n\ncol: a list of colors which contains color mapping to columns in df\n\nFor the example below, we’ll transpose our data to have the observations in columns and the variables in rows.\n\ndf <- t(df)\n\nSimple annotation\n\nA vector, containing discrete or continuous values, is used to annotate rows or columns. We’ll use the qualitative variables cyl (levels = “4”, “5” and “8”) and am (levels = “0” and “1”), and the continuous variable mpg to annotate columns.\n\nFor each of these 3 variables, custom colors are defined as follow:\n\n# Define colors for each levels of qualitative variables # Define gradient color for continuous variable (mpg) col = list(cyl = c(\"4\" = \"green\", \"6\" = \"gray\", \"8\" = \"darkred\"), am = c(\"0\" = \"yellow\", \"1\" = \"orange\"), mpg = circlize::colorRamp2(c(17, 25), c(\"lightblue\", \"purple\")) ) # Create the heatmap annotation ha <- HeatmapAnnotation( cyl = mtcars$cyl, am = mtcars$am, mpg = mtcars$mpg, col = col ) # Combine the heatmap and the annotation Heatmap(df, name = \"mtcars\", top_annotation = ha)\n\nIt’s possible to hide the annotation legend using the argument show_legend = FALSE as follow:\n\nha <- HeatmapAnnotation( cyl = mtcars$cyl, am = mtcars$am, mpg = mtcars$mpg, col = col, show_legend = FALSE ) Heatmap(df, name = \"mtcars\", top_annotation = ha)\n\nComplex annotation\n\nIn this section we’ll see how to combine heatmap and some basic graphs to show the data distribution. For simple annotation graphics, the following functions can be used: anno_points(), anno_barplot(), anno_boxplot(), anno_density() and anno_histogram().\n\nAn example is shown below:\n\n# Define some graphics to display the distribution of columns .hist = anno_histogram(df, gp = gpar(fill = \"lightblue\")) .density = anno_density(df, type = \"line\", gp = gpar(col = \"blue\")) ha_mix_top = HeatmapAnnotation( hist = .hist, density = .density, height = unit(3.8, \"cm\") ) # Define some graphics to display the distribution of rows .violin = anno_density(df, type = \"violin\", gp = gpar(fill = \"lightblue\"), which = \"row\") .boxplot = anno_boxplot(df, which = \"row\") ha_mix_right = HeatmapAnnotation(violin = .violin, bxplt = .boxplot, which = \"row\", width = unit(4, \"cm\")) # Combine annotation with heatmap Heatmap(df, name = \"mtcars\", column_names_gp = gpar(fontsize = 8), top_annotation = ha_mix_top) + ha_mix_right\n\nCombining multiple heatmaps\n\nMultiple heatmaps can be arranged as follow:\n\n# Heatmap 1 ht1 = Heatmap(df, name = \"ht1\", km = 2, column_names_gp = gpar(fontsize = 9)) # Heatmap 2 ht2 = Heatmap(df, name = \"ht2\", col = circlize::colorRamp2(c(-2, 0, 2), c(\"green\", \"white\", \"red\")), column_names_gp = gpar(fontsize = 9)) # Combine the two heatmaps ht1 + ht2\n\nYou can use the option width = unit(3, “cm”)) to control the size of the heatmaps.\n\nNote that when combining multiple heatmaps, the first heatmap is considered as the main heatmap. Some settings of the remaining heatmaps are auto-adjusted according to the setting of the main heatmap. These include: removing row clusters and titles, and adding splitting.\n\nThe draw() function can be used to customize the appearance of the final image:\n\ndraw(ht1 + ht2, row_title = \"Two heatmaps, row title\", row_title_gp = gpar(col = \"red\"), column_title = \"Two heatmaps, column title\", column_title_side = \"bottom\", # Gap between heatmaps gap = unit(0.5, \"cm\"))\n\nLegends can be removed using the arguments show_heatmap_legend = FALSE, show_annotation_legend = FALSE.\n\nApplication to gene expression matrix\n\nIn gene expression data, rows are genes and columns are samples. More information about genes can be attached after the expression heatmap such as gene length and type of genes.\n\nexpr <- readRDS(paste0(system.file(package = \"ComplexHeatmap\"), \"/extdata/gene_expression.rds\")) mat <- as.matrix(expr[, grep(\"cell\", colnames(expr))]) type <- gsub(\"s\\\\d+_\", \"\", colnames(mat)) ha = HeatmapAnnotation( df = data.frame(type = type), annotation_height = unit(4, \"mm\") ) Heatmap(mat, name = \"expression\", km = 5, top_annotation = ha, show_row_names = FALSE, show_column_names = FALSE) + Heatmap(expr$length, name = \"length\", width = unit(5, \"mm\"), col = circlize::colorRamp2(c(0, 100000), c(\"white\", \"orange\"))) + Heatmap(expr$type, name = \"type\", width = unit(5, \"mm\")) + Heatmap(expr$chr, name = \"chr\", width = unit(5, \"mm\"), col = circlize::rand_color(length(unique(expr$chr))))\n\nIt’s also possible to visualize genomic alterations and to integrate different molecular levels (gene expression, DNA methylation, …). Read the vignette, on Bioconductor, for further examples.\n\nVisualizing the distribution of columns in matrix\n\ndensityHeatmap(scale(mtcars))\n\nThe dashed lines on the heatmap correspond to the five quantile numbers. The text for the five quantile levels are added in the right of the heatmap.\n\nSummary\n\nWe described many functions for drawing heatmaps in R (from basic to complex heatmaps). A basic heatmap can be produced using either the R base function heatmap() or the function heatmap.2() [in the gplots package].\n\nThe pheatmap() function, in the package of the same name, creates pretty heatmaps, where ones has better control over some graphical parameters such as cell size.\n\nThe Heatmap() function [in ComplexHeatmap package] allows us to easily, draw, annotate and arrange complex heatmaps. This might be very useful in genomic fields.\n\nBack to Hierarchical Clustering in R: The Essentials\n\nComments ( 10 )"
    }
}