{
    "id": "dbpedia_6504_2",
    "rank": 18,
    "data": {
        "url": "https://geopy.readthedocs.io/",
        "read_more_link": "",
        "language": "en",
        "title": "Welcome to GeoPy’s documentation! — GeoPy 2.4.1 documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://geopy.readthedocs.io/_images/logo-wide.png",
            "https://geopy.readthedocs.io/_images/geopy_and_geocoding_services.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "_static/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Welcome to GeoPy’s documentation!\n\nDocumentation\n\nhttps://geopy.readthedocs.io/\n\nSource Code\n\nhttps://github.com/geopy/geopy\n\nStack Overflow\n\nhttps://stackoverflow.com/questions/tagged/geopy\n\nGIS Stack Exchange\n\nhttps://gis.stackexchange.com/questions/tagged/geopy\n\nDiscussions\n\nhttps://github.com/geopy/geopy/discussions\n\nIssue Tracker\n\nhttps://github.com/geopy/geopy/issues\n\nPyPI\n\nhttps://pypi.org/project/geopy/\n\ngeopy is a Python client for several popular geocoding web services.\n\ngeopy makes it easy for Python developers to locate the coordinates of addresses, cities, countries, and landmarks across the globe using third-party geocoders and other data sources.\n\ngeopy is tested against CPython (versions 3.7, 3.8, 3.9, 3.10, 3.11, 3.12) and PyPy3. geopy 1.x line also supported CPython 2.7, 3.4 and PyPy2.\n\nInstallation\n\npip install geopy\n\nGeocoders\n\nEach geolocation service you might use, such as Google Maps, Bing Maps, or Nominatim, has its own class in geopy.geocoders abstracting the service’s API. Geocoders each define at least a geocode method, for resolving a location from a string, and may define a reverse method, which resolves a pair of coordinates to an address. Each Geocoder accepts any credentials or settings needed to interact with its service, e.g., an API key or locale, during its initialization.\n\nTo geolocate a query to an address and coordinates:\n\n>>> from geopy.geocoders import Nominatim >>> geolocator = Nominatim(user_agent=\"specify_your_app_name_here\") >>> location = geolocator.geocode(\"175 5th Avenue NYC\") >>> print(location.address) Flatiron Building, 175, 5th Avenue, Flatiron, New York, NYC, New York, ... >>> print((location.latitude, location.longitude)) (40.7410861, -73.9896297241625) >>> print(location.raw) {'place_id': '9167009604', 'type': 'attraction', ...}\n\nTo find the address corresponding to a set of coordinates:\n\n>>> from geopy.geocoders import Nominatim >>> geolocator = Nominatim(user_agent=\"specify_your_app_name_here\") >>> location = geolocator.reverse(\"52.509669, 13.376294\") >>> print(location.address) Potsdamer Platz, Mitte, Berlin, 10117, Deutschland, European Union >>> print((location.latitude, location.longitude)) (52.5094982, 13.3765983) >>> print(location.raw) {'place_id': '654513', 'osm_type': 'node', ...}\n\nLocators’ geocode and reverse methods require the argument query, and also accept at least the argument exactly_one, which is True by default. Geocoders may have additional attributes, e.g., Bing accepts user_location, the effect of which is to bias results near that location. geocode and reverse methods may return three types of values:\n\nWhen there are no results found, returns None.\n\nWhen the method’s exactly_one argument is True and at least one result is found, returns a geopy.location.Location object, which can be iterated over as:\n\n(address<String>, (latitude<Float>, longitude<Float>))\n\nOr can be accessed as location.address, location.latitude, location.longitude, location.altitude, and location.raw. The last contains the full geocoder’s response for this result.\n\nWhen exactly_one is False, and there is at least one result, returns a list of geopy.location.Location objects, as above:\n\n[location, [...]]\n\nIf a service is unavailable or otherwise returns a non-OK response, or doesn’t receive a response in the allotted timeout, you will receive one of the Exceptions detailed below.\n\nSpecifying Parameters Once\n\nGeocoding methods accept a lot of different parameters, and you would probably want to specify some of them just once and not care about them later.\n\nThis is easy to achieve with Python’s functools.partial():\n\n>>> from functools import partial >>> from geopy.geocoders import Nominatim >>> geolocator = Nominatim(user_agent=\"specify_your_app_name_here\") >>> geocode = partial(geolocator.geocode, language=\"es\") >>> print(geocode(\"london\")) Londres, Greater London, Inglaterra, SW1A 2DX, Gran Bretaña >>> print(geocode(\"paris\")) París, Isla de Francia, Francia metropolitana, Francia >>> print(geocode(\"paris\", language=\"en\")) Paris, Ile-de-France, Metropolitan France, France >>> reverse = partial(geolocator.reverse, language=\"es\") >>> print(reverse(\"52.509669, 13.376294\")) Steinecke, Potsdamer Platz, Tiergarten, Mitte, 10785, Alemania\n\nIf you need to modify the query, you can also use a one-liner with lambda. For example, if you only need to geocode locations in Cleveland, Ohio, you could do:\n\n>>> geocode = lambda query: geolocator.geocode(\"%s, Cleveland OH\" % query) >>> print(geocode(\"11111 Euclid Ave\")) Thwing Center, Euclid Avenue, Magnolia-Wade Park Historic District, University Circle, Cleveland, Cuyahoga County, Ohio, 44106, United States of America\n\nThat lambda doesn’t accept kwargs. If you need them, you could do:\n\n>>> _geocode = partial(geolocator.geocode, language=\"es\") >>> geocode = lambda query, **kw: _geocode(\"%s, Cleveland OH\" % query, **kw) >>> print(geocode(\"11111 Euclid Ave\")) Thwing Center, Euclid Avenue, Magnolia-Wade Park Historic District, University Circle, Cleveland, Cuyahoga County, Ohio, 44106, Estados Unidos >>> print(geocode(\"11111 Euclid Ave\", language=\"en\")) Thwing Center, Euclid Avenue, Magnolia-Wade Park Historic District, University Circle, Cleveland, Cuyahoga County, Ohio, 44106, United States of America\n\nGeopy Is Not a Service\n\nGeocoding is provided by a number of different services, which are not affiliated with geopy in any way. These services provide APIs, which anyone could implement, and geopy is just a library which provides these implementations for many different services in a single package.\n\nTherefore:\n\nDifferent services have different Terms of Use, quotas, pricing, geodatabases and so on. For example, Nominatim is free, but provides low request limits. If you need to make more queries, consider using another (probably paid) service, such as OpenMapQuest or PickPoint (these two are commercial providers of Nominatim, so they should have the same data and APIs). Or, if you are ready to wait, you can try geopy.extra.rate_limiter.\n\ngeopy cannot be responsible for the geocoding services’ databases. If you have issues with some queries which the service cannot fulfill, it should be directed to that service’s support team.\n\ngeopy cannot be responsible for any networking issues between your computer and the geocoding service.\n\nIf you face any problem with your current geocoding service provider, you can always try a different one.\n\nAsync Mode\n\nBy default geopy geocoders are synchronous (i.e. they use an Adapter based on BaseSyncAdapter).\n\nAll geocoders can be used with asyncio by simply switching to an Adapter based on BaseAsyncAdapter (like AioHTTPAdapter).\n\nExample:\n\nfrom geopy.adapters import AioHTTPAdapter from geopy.geocoders import Nominatim async with Nominatim( user_agent=\"specify_your_app_name_here\", adapter_factory=AioHTTPAdapter, ) as geolocator: location = await geolocator.geocode(\"175 5th Avenue NYC\") print(location.address)\n\nBasically the usage is the same as in synchronous mode, except that all geocoder calls should be used with await, and the geocoder instance should be created by async with. The context manager is optional, however, it is strongly advised to use it to avoid resources leaks.\n\nAccessing Geocoders\n\nThe typical way of retrieving a geocoder class is to make an import from geopy.geocoders package:\n\nfrom geopy.geocoders import Nominatim\n\ngeopy.geocoders.get_geocoder_for_service(service)\n\nFor the service provided, try to return a geocoder class.\n\n>>> from geopy.geocoders import get_geocoder_for_service >>> get_geocoder_for_service(\"nominatim\") geopy.geocoders.nominatim.Nominatim\n\nIf the string given is not recognized, a geopy.exc.GeocoderNotFound exception is raised.\n\nGiven that almost all of the geocoders provide the geocode method it could be used to make basic queries based entirely on user input:\n\nfrom geopy.geocoders import get_geocoder_for_service def geocode(geocoder, config, query): cls = get_geocoder_for_service(geocoder) geolocator = cls(**config) location = geolocator.geocode(query) return location.address >>> geocode(\"nominatim\", dict(user_agent=\"specify_your_app_name_here\"), \"london\") 'London, Greater London, England, SW1A 2DX, United Kingdom' >>> geocode(\"photon\", dict(), \"london\") 'London, SW1A 2DX, London, England, United Kingdom'\n\nDefault Options Object\n\nclassgeopy.geocoders.options\n\nThe options object contains default configuration values for geocoders, e.g. timeout and User-Agent. Instead of passing a custom value to each geocoder individually, you can override a default value in this object.\n\nPlease note that not all geocoders use all attributes of this object. For example, some geocoders don’t respect the default_scheme attribute. Refer to the specific geocoder’s initializer doc for a list of parameters which that geocoder accepts.\n\nExample for overriding default timeout and user_agent:\n\n>>> import geopy.geocoders >>> from geopy.geocoders import Nominatim >>> geopy.geocoders.options.default_user_agent = 'my_app/1' >>> geopy.geocoders.options.default_timeout = 7 >>> geolocator = Nominatim() >>> print(geolocator.headers) {'User-Agent': 'my_app/1'} >>> print(geolocator.timeout) 7\n\nAttributes:\n\ndefault_adapter_factory\n\nA callable which returns a geopy.adapters.BaseAdapter instance. Adapters are different implementations of HTTP clients. See geopy.adapters for more info.\n\nThis callable accepts two keyword args: proxies and ssl_context. A class might be specified as this callable as well.\n\nExample:\n\nimport geopy.geocoders geopy.geocoders.options.default_adapter_factory = geopy.adapters.URLLibAdapter geopy.geocoders.options.default_adapter_factory = ( lambda proxies, ssl_context: MyAdapter( proxies=proxies, ssl_context=ssl_context, my_custom_arg=42 ) )\n\nIf requests package is installed, the default adapter is geopy.adapters.RequestsAdapter. Otherwise it is geopy.adapters.URLLibAdapter.\n\nNew in version 2.0.\n\ndefault_proxies\n\nTunnel requests through HTTP proxy.\n\nBy default the system proxies are respected (e.g. HTTP_PROXY and HTTPS_PROXY env vars or platform-specific proxy settings, such as macOS or Windows native preferences – see urllib.request.getproxies() for more details). The proxies value for using system proxies is None.\n\nTo disable system proxies and issue requests directly, explicitly pass an empty dict as a value for proxies: {}.\n\nTo use a custom HTTP proxy location, pass a string. Valid examples are:\n\n\"192.0.2.0:8080\"\n\n\"john:passw0rd@192.0.2.0:8080\"\n\n\"http://john:passw0rd@192.0.2.0:8080\"\n\nPlease note:\n\nScheme part (http://) of the proxy is ignored.\n\nOnly http proxy is supported. Even if the proxy scheme is https, it will be ignored, and the connection between client and proxy would still be unencrypted. However, https requests via http proxy are still supported (via HTTP CONNECT method).\n\nRaw urllib-style proxies dict might be provided instead of a string:\n\n{\"https\": \"192.0.2.0:8080\"} – means that HTTP proxy would be used only for requests having https scheme. String proxies value is automatically used for both schemes, and is provided as a shorthand for the urllib-style proxies dict.\n\nFor more information, see documentation on urllib.request.getproxies().\n\ndefault_scheme\n\nUse 'https' or 'http' as the API URL’s scheme.\n\ndefault_ssl_context\n\nAn ssl.SSLContext instance with custom TLS verification settings. Pass None to use the interpreter’s defaults (that is to use the system’s trusted CA certificates).\n\nTo use the CA bundle used by requests library:\n\nimport ssl import certifi import geopy.geocoders ctx = ssl.create_default_context(cafile=certifi.where()) geopy.geocoders.options.default_ssl_context = ctx\n\nTo disable TLS certificate verification completely:\n\nimport ssl import geopy.geocoders ctx = ssl.create_default_context() ctx.check_hostname = False ctx.verify_mode = ssl.CERT_NONE geopy.geocoders.options.default_ssl_context = ctx\n\nSee docs for the ssl.SSLContext class for more examples.\n\ndefault_timeout\n\nTime, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Pass None to disable timeout.\n\ndefault_user_agent\n\nUser-Agent header to send with the requests to geocoder API.\n\ndefault_adapter_factory\n\nalias of geopy.adapters.RequestsAdapter\n\ndefault_proxies=None\n\ndefault_scheme='https'\n\ndefault_ssl_context=None\n\ndefault_timeout=1\n\ndefault_user_agent='geopy/2.4.1'\n\nUsage with Pandas\n\nIt is possible to geocode a pandas DataFrame with geopy, however, rate-limiting must be taken into account.\n\nA large number of DataFrame rows might produce a significant amount of geocoding requests to a Geocoding service, which might be throttled by the service (e.g. by returning Too Many Requests 429 HTTP error or timing out).\n\ngeopy.extra.rate_limiter classes provide a convenient wrapper, which can be used to automatically add delays between geocoding calls to reduce the load on the Geocoding service. Also it can retry failed requests and swallow errors for individual rows.\n\nIf you’re having the Too Many Requests error, you may try the following:\n\nUse geopy.extra.rate_limiter with non-zero min_delay_seconds.\n\nTry a different Geocoding service (please consult with their ToS first, as some services prohibit bulk geocoding).\n\nTake a paid plan on the chosen Geocoding service, which provides higher quota.\n\nProvision your own local copy of the Geocoding service (such as Nominatim).\n\nRate Limiter\n\nRateLimiter and AsyncRateLimiter allow to perform bulk operations while gracefully handling error responses and adding delays when needed.\n\nIn the example below a delay of 1 second (min_delay_seconds=1) will be added between each pair of geolocator.geocode calls; all geopy.exc.GeocoderServiceError exceptions will be retried (up to max_retries times):\n\nimport pandas as pd df = pd.DataFrame({'name': ['paris', 'berlin', 'london']}) from geopy.geocoders import Nominatim geolocator = Nominatim(user_agent=\"specify_your_app_name_here\") from geopy.extra.rate_limiter import RateLimiter geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1) df['location'] = df['name'].apply(geocode) df['point'] = df['location'].apply(lambda loc: tuple(loc.point) if loc else None)\n\nThis would produce the following DataFrame:\n\n>>> df name location \\ 0 paris (Paris, Île-de-France, France métropolitaine, ... 1 berlin (Berlin, 10117, Deutschland, (52.5170365, 13.3... 2 london (London, Greater London, England, SW1A 2DU, UK... point 0 (48.8566101, 2.3514992, 0.0) 1 (52.5170365, 13.3888599, 0.0) 2 (51.5073219, -0.1276474, 0.0)\n\nTo pass extra options to the geocode call:\n\nfrom functools import partial df['location'] = df['name'].apply(partial(geocode, language='de'))\n\nTo see a progress bar:\n\nfrom tqdm import tqdm tqdm.pandas() df['location'] = df['name'].progress_apply(geocode)\n\nBefore using rate limiting classes, please consult with the Geocoding service ToS, which might explicitly consider bulk requests (even throttled) a violation.\n\nclassgeopy.extra.rate_limiter.RateLimiter(func, *, min_delay_seconds=0.0, max_retries=2, error_wait_seconds=5.0, swallow_exceptions=True, return_value_on_exception=None)\n\nThis is a Rate Limiter implementation for synchronous functions (like geocoders with the default geopy.adapters.BaseSyncAdapter).\n\nExamples:\n\nfrom geopy.extra.rate_limiter import RateLimiter from geopy.geocoders import Nominatim geolocator = Nominatim(user_agent=\"specify_your_app_name_here\") search = [\"moscow\", \"paris\", \"berlin\", \"tokyo\", \"beijing\"] geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1) locations = [geocode(s) for s in search] search = [ (55.47, 37.32), (48.85, 2.35), (52.51, 13.38), (34.69, 139.40), (39.90, 116.39) ] reverse = RateLimiter(geolocator.reverse, min_delay_seconds=1) locations = [reverse(s) for s in search]\n\nRateLimiter class is thread-safe. If geocoding service’s responses are slower than min_delay_seconds, then you can benefit from parallelizing the work:\n\nimport concurrent.futures geolocator = OpenMapQuest(api_key=\"...\") geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1/20) with concurrent.futures.ThreadPoolExecutor() as e: locations = list(e.map(geocode, search))\n\nChanged in version 2.0: Added thread-safety support.\n\n__init__(func, *, min_delay_seconds=0.0, max_retries=2, error_wait_seconds=5.0, swallow_exceptions=True, return_value_on_exception=None)\n\nParameters\n\nfunc (callable) – A function which should be wrapped by the rate limiter.\n\nmin_delay_seconds (float) – Minimum delay in seconds between the wrapped func calls. To convert RPS rate to min_delay_seconds you need to divide 1 by RPS. For example, if you need to keep the rate at 20 RPS, you can use min_delay_seconds=1/20.\n\nmax_retries (int) – Number of retries on exceptions. Only geopy.exc.GeocoderServiceError exceptions are retried – others are always re-raised. max_retries + 1 requests would be performed at max per query. Set max_retries=0 to disable retries.\n\nerror_wait_seconds (float) – Time to wait between retries after errors. Must be greater or equal to min_delay_seconds.\n\nswallow_exceptions (bool) – Should an exception be swallowed after retries? If not, it will be re-raised. If yes, the return_value_on_exception will be returned.\n\nreturn_value_on_exception – Value to return on failure when swallow_exceptions=True.\n\nclassgeopy.extra.rate_limiter.AsyncRateLimiter(func, *, min_delay_seconds=0.0, max_retries=2, error_wait_seconds=5.0, swallow_exceptions=True, return_value_on_exception=None)\n\nThis is a Rate Limiter implementation for asynchronous functions (like geocoders with geopy.adapters.BaseAsyncAdapter).\n\nExamples:\n\nfrom geopy.adapters import AioHTTPAdapter from geopy.extra.rate_limiter import AsyncRateLimiter from geopy.geocoders import Nominatim async with Nominatim( user_agent=\"specify_your_app_name_here\", adapter_factory=AioHTTPAdapter, ) as geolocator: search = [\"moscow\", \"paris\", \"berlin\", \"tokyo\", \"beijing\"] geocode = AsyncRateLimiter(geolocator.geocode, min_delay_seconds=1) locations = [await geocode(s) for s in search] search = [ (55.47, 37.32), (48.85, 2.35), (52.51, 13.38), (34.69, 139.40), (39.90, 116.39) ] reverse = AsyncRateLimiter(geolocator.reverse, min_delay_seconds=1) locations = [await reverse(s) for s in search]\n\nAsyncRateLimiter class is safe to use across multiple concurrent tasks. If geocoding service’s responses are slower than min_delay_seconds, then you can benefit from parallelizing the work:\n\nimport asyncio async with OpenMapQuest( api_key=\"...\", adapter_factory=AioHTTPAdapter ) as geolocator: geocode = AsyncRateLimiter(geolocator.geocode, min_delay_seconds=1/20) locations = await asyncio.gather(*(geocode(s) for s in search))\n\nNew in version 2.0.\n\n__init__(func, *, min_delay_seconds=0.0, max_retries=2, error_wait_seconds=5.0, swallow_exceptions=True, return_value_on_exception=None)\n\nParameters\n\nfunc (callable) – A function which should be wrapped by the rate limiter.\n\nmin_delay_seconds (float) – Minimum delay in seconds between the wrapped func calls. To convert RPS rate to min_delay_seconds you need to divide 1 by RPS. For example, if you need to keep the rate at 20 RPS, you can use min_delay_seconds=1/20.\n\nmax_retries (int) – Number of retries on exceptions. Only geopy.exc.GeocoderServiceError exceptions are retried – others are always re-raised. max_retries + 1 requests would be performed at max per query. Set max_retries=0 to disable retries.\n\nerror_wait_seconds (float) – Time to wait between retries after errors. Must be greater or equal to min_delay_seconds.\n\nswallow_exceptions (bool) – Should an exception be swallowed after retries? If not, it will be re-raised. If yes, the return_value_on_exception will be returned.\n\nreturn_value_on_exception – Value to return on failure when swallow_exceptions=True.\n\nArcGIS\n\nclassgeopy.geocoders.ArcGIS(username=None, password=None, *, referer=None, token_lifetime=60, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, auth_domain='www.arcgis.com', domain='geocode.arcgis.com')\n\nGeocoder using the ERSI ArcGIS API.\n\nDocumentation at:\n\nhttps://developers.arcgis.com/rest/geocode/api-reference/overview-world-geocoding-service.htm\n\n__init__(username=None, password=None, *, referer=None, token_lifetime=60, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, auth_domain='www.arcgis.com', domain='geocode.arcgis.com')\n\nParameters\n\nusername (str) – ArcGIS username. Required if authenticated mode is desired.\n\npassword (str) – ArcGIS password. Required if authenticated mode is desired.\n\nreferer (str) – Required if authenticated mode is desired. Referer HTTP header to send with each request, e.g., 'http://www.example.com'. This is tied to an issued token, so fielding queries for multiple referrers should be handled by having multiple ArcGIS geocoder instances.\n\ntoken_lifetime (int) – Desired lifetime, in minutes, of an ArcGIS-issued token.\n\nscheme (str) – See geopy.geocoders.options.default_scheme. If authenticated mode is in use, it must be 'https'.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\nauth_domain (str) – Domain where the target ArcGIS auth service is hosted. Used only in authenticated mode (i.e. username, password and referer are set).\n\ndomain (str) – Domain where the target ArcGIS service is hosted.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, out_fields=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nout_fields (str or iterable) – A list of output fields to be returned in the attributes field of the raw data. This can be either a python list/tuple of fields or a comma-separated string. See https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm for a list of supported output fields. If you want to return all supported output fields, set out_fields=\"*\".\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, distance=None)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\ndistance (int) – Distance from the query location, in meters, within which to search. ArcGIS has a default of 100 meters, if not specified.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nAzureMaps\n\nclassgeopy.geocoders.AzureMaps(subscription_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='atlas.microsoft.com')\n\nBases: geopy.geocoders.tomtom.TomTom\n\nAzureMaps geocoder based on TomTom.\n\nDocumentation at:\n\nhttps://docs.microsoft.com/en-us/azure/azure-maps/index\n\n__init__(subscription_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='atlas.microsoft.com')\n\nParameters\n\nsubscription_key (str) – Azure Maps subscription key.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ndomain (str) – Domain where the target Azure Maps service is hosted.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, limit=None, typeahead=False, language=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlimit (int) – Maximum amount of results to return from the service. Unless exactly_one is set to False, limit will always be 1.\n\ntypeahead (bool) – If the “typeahead” flag is set, the query will be interpreted as a partial input and the search will enter predictive mode.\n\nlanguage (str) – Language in which search results should be returned. When data in specified language is not available for a specific field, default language is used. List of supported languages (case-insensitive): https://developer.tomtom.com/online-search/online-search-documentation/supported-languages\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, language=None)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlanguage (str) – Language in which search results should be returned. When data in specified language is not available for a specific field, default language is used. List of supported languages (case-insensitive): https://developer.tomtom.com/online-search/online-search-documentation/supported-languages\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nBaidu\n\nclassgeopy.geocoders.Baidu(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, security_key=None)\n\nGeocoder using the Baidu Maps v2 API.\n\nDocumentation at:\n\nhttp://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding\n\nAttention\n\nNewly registered API keys will not work with v2 API, use BaiduV3 instead.\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, security_key=None)\n\nParameters\n\napi_key (str) – The API key (AK) required by Baidu Map to perform geocoding requests. API keys are managed through the Baidu APIs console (http://lbsyun.baidu.com/apiconsole/key).\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\nsecurity_key (str) – The security key (SK) to calculate the SN parameter in request if authentication setting requires (http://lbsyun.baidu.com/index.php?title=lbscloud/api/appendix).\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available. Baidu’s API will always return at most one result.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nBaiduV3\n\nclassgeopy.geocoders.BaiduV3(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, security_key=None)\n\nBases: geopy.geocoders.baidu.Baidu\n\nGeocoder using the Baidu Maps v3 API.\n\nDocumentation at:\n\nhttp://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, security_key=None)\n\nParameters\n\napi_key (str) – The API key (AK) required by Baidu Map to perform geocoding requests. API keys are managed through the Baidu APIs console (http://lbsyun.baidu.com/apiconsole/key).\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\nsecurity_key (str) – The security key (SK) to calculate the SN parameter in request if authentication setting requires (http://lbsyun.baidu.com/index.php?title=lbscloud/api/appendix).\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available. Baidu’s API will always return at most one result.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nBANFrance\n\nclassgeopy.geocoders.BANFrance(*, domain='api-adresse.data.gouv.fr', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nGeocoder using the Base Adresse Nationale France API.\n\nDocumentation at:\n\nhttps://adresse.data.gouv.fr/api\n\n__init__(*, domain='api-adresse.data.gouv.fr', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\ndomain (str) – Currently it is 'api-adresse.data.gouv.fr', can be changed for testing purposes.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, limit=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nlimit (int) – Defines the maximum number of items in the response structure. If not provided and there are multiple results the BAN API will return 5 results by default. This will be reset to one if exactly_one is True.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nBing\n\nclassgeopy.geocoders.Bing(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='dev.virtualearth.net')\n\nGeocoder using the Bing Maps Locations API.\n\nDocumentation at:\n\nhttps://msdn.microsoft.com/en-us/library/ff701715.aspx\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='dev.virtualearth.net')\n\nParameters\n\napi_key (str) – Should be a valid Bing Maps API key (https://www.microsoft.com/en-us/maps/create-a-bing-maps-key).\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ndomain (str) –\n\nbase api domain\n\nNew in version 2.4.\n\ngeocode(query, *, exactly_one=True, user_location=None, timeout=DEFAULT_SENTINEL, culture=None, include_neighborhood=None, include_country_code=False)\n\nReturn a location point by address.\n\nParameters\n\nquery (str or dict) –\n\nThe address or query you wish to geocode.\n\nFor a structured query, provide a dictionary whose keys are one of: addressLine, locality (city), adminDistrict (state), countryRegion, or postalCode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\nuser_location (geopy.point.Point) – Prioritize results closer to this location.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nculture (str) – Affects the language of the response, must be a two-letter country code.\n\ninclude_neighborhood (bool) – Sets whether to include the neighborhood field in the response.\n\ninclude_country_code (bool) – Sets whether to include the two-letter ISO code of the country in the response (field name ‘countryRegionIso2’).\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, culture=None, include_country_code=False)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nculture (str) – Affects the language of the response, must be a two-letter country code.\n\ninclude_country_code (bool) – Sets whether to include the two-letter ISO code of the country in the response (field name ‘countryRegionIso2’).\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nDataBC\n\nclassgeopy.geocoders.DataBC(*, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='geocoder.api.gov.bc.ca')\n\nGeocoder using the Physical Address Geocoder from DataBC.\n\nDocumentation at:\n\nhttps://github.com/bcgov/ols-geocoder/blob/gh-pages/geocoder-developer-guide.md\n\n__init__(*, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='geocoder.api.gov.bc.ca')\n\nParameters\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ndomain (str) –\n\nbase api domain\n\nNew in version 2.4.\n\ngeocode(query, *, max_results=25, set_back=0, location_descriptor='any', exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nmax_results (int) – The maximum number of resutls to request.\n\nset_back (float) – The distance to move the accessPoint away from the curb (in meters) and towards the interior of the parcel. location_descriptor must be set to accessPoint for set_back to take effect.\n\nlocation_descriptor (str) – The type of point requested. It can be any, accessPoint, frontDoorPoint, parcelPoint, rooftopPoint and routingPoint.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nGeocodeEarth\n\nclassgeopy.geocoders.GeocodeEarth(api_key, *, domain='api.geocode.earth', timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, scheme=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nBases: geopy.geocoders.pelias.Pelias\n\nGeocode Earth, a Pelias-based service provided by the developers of Pelias itself.\n\nDocumentation at:\n\nhttps://geocode.earth/docs\n\nPricing details:\n\nhttps://geocode.earth/#pricing\n\n__init__(api_key, *, domain='api.geocode.earth', timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, scheme=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napi_key (str) – Geocode.earth API key, required.\n\ndomain (str) – Specify a custom domain for Pelias API.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, boundary_rect=None, countries=None, country_bias=None, language=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nboundary_rect (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – Coordinates to restrict search within. Example: [Point(22, 180), Point(-22, -180)].\n\ncountries (list) –\n\nA list of country codes specified in ISO 3166-1 alpha-2 or alpha-3 format, e.g. ['USA', 'CAN']. This is a hard filter.\n\nNew in version 2.3.\n\ncountry_bias (str) –\n\nBias results to this country (ISO alpha-3).\n\nDeprecated since version 2.3: Use countries instead. This option behaves the same way, i.e. it’s not a soft filter as the name suggests. This parameter is scheduled for removal in geopy 3.0.\n\nlanguage (str) – Preferred language in which to return results. Either uses standard RFC2616 accept-language string or a simple comma-separated list of language codes.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, language=None)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlanguage (str) –\n\nPreferred language in which to return results. Either uses standard RFC2616 accept-language string or a simple comma-separated list of language codes.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nGeocodeFarm\n\nChanged in version 2.2: This class has been removed, because the service is too unreliable. See #445.\n\nGeocodio\n\nclassgeopy.geocoders.Geocodio(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain=None)\n\nGeocoder using the Geocod.io API.\n\nDocumentation at:\n\nhttps://www.geocod.io/docs/\n\nPricing details:\n\nhttps://www.geocod.io/pricing/\n\nNew in version 2.2.\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain=None)\n\nParameters\n\napi_key (str) – A valid Geocod.io API key. (https://dash.geocod.io/apikey/create)\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) – See geopy.geocoders.options.default_adapter_factory.\n\ndomain (str) –\n\nbase api domain\n\nNew in version 2.4.\n\ngeocode(query, *, limit=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (dict or str) –\n\nThe address, query or a structured query you wish to geocode.\n\nFor a structured query, provide a dictionary whose keys are one of: street, city, state, postal_code or country.\n\nlimit (int) – The maximum number of matches to return. This will be reset to 1 if exactly_one is True.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, limit=None)\n\nReturn an address by location point.\n\nParameters\n\nquery (str) – The coordinates for which you wish to obtain the closest human-readable addresses\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlimit (int) – The maximum number of matches to return. This will be reset to 1 if exactly_one is True.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nGeokeo\n\nclassgeopy.geocoders.Geokeo(api_key, *, domain='geokeo.com', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nGeocoder using the geokeo API.\n\nDocumentation at:\n\nhttps://geokeo.com/documentation.php\n\nNew in version 2.4.\n\n__init__(api_key, *, domain='geokeo.com', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napi_key (str) – The API key required by Geokeo.com to perform geocoding requests. You can get your key here: https://geokeo.com/\n\ndomain (str) – Domain where the target Geokeo service is hosted.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) – See geopy.geocoders.options.default_adapter_factory.\n\ngeocode(query, *, country=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\ncountry (str) – Restricts the results to the specified country. The country code is a 2 character code as defined by the ISO 3166-1 Alpha 2 standard (e.g. us).\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nGeolake\n\nclassgeopy.geocoders.Geolake(api_key, *, domain='api.geolake.com', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nGeocoder using the Geolake API.\n\nDocumentation at:\n\nhttps://geolake.com/docs/api\n\nTerms of Service at:\n\nhttps://geolake.com/terms-of-use\n\n__init__(api_key, *, domain='api.geolake.com', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napi_key (str) – The API key required by Geolake to perform geocoding requests. You can get your key here: https://geolake.com/\n\ndomain (str) – Currently it is 'api.geolake.com', can be changed for testing purposes.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, country_codes=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str or dict) –\n\nThe address or query you wish to geocode.\n\nFor a structured query, provide a dictionary whose keys are one of: country, state, city, zipcode, street, address, houseNumber or subNumber.\n\ncountry_codes (str or list) – Provides the geocoder with a list of country codes that the query may reside in. This value will limit the geocoder to the supplied countries. The country code is a 2 character code as defined by the ISO-3166-1 alpha-2 standard (e.g. FR). Multiple countries can be specified with a Python list.\n\nexactly_one (bool) – Return one result or a list of one result.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nGeoNames\n\nclassgeopy.geocoders.GeoNames(username, *, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, scheme='http', domain='api.geonames.org')\n\nGeoNames geocoder.\n\nDocumentation at:\n\nhttp://www.geonames.org/export/geonames-search.html\n\nReverse geocoding documentation at:\n\nhttp://www.geonames.org/export/web-services.html#findNearbyPlaceName\n\n__init__(username, *, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, scheme='http', domain='api.geonames.org')\n\nParameters\n\nusername (str) – GeoNames username, required. Sign up here: http://www.geonames.org/login\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\nscheme (str) – See geopy.geocoders.options.default_scheme. Note that at the time of writing GeoNames doesn’t support https, so the default scheme is http. The value of geopy.geocoders.options.default_scheme is not respected. This parameter is present to make it possible to switch to https once GeoNames adds support for it.\n\ndomain (str) –\n\nbase api domain\n\nNew in version 2.4.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, country=None, country_bias=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\ncountry (str or list) – Limit records to the specified countries. Two letter country code ISO-3166 (e.g. FR). Might be a single string or a list of strings.\n\ncountry_bias (str) – Records from the country_bias are listed first. Two letter country code ISO-3166.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, feature_code=None, lang=None, find_nearby_type='findNearbyPlaceName')\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nfeature_code (str) – A GeoNames feature code\n\nlang (str) – language of the returned name element (the pseudo language code ‘local’ will return it in local language) Full list of supported languages can be found here: https://www.geonames.org/countries/\n\nfind_nearby_type (str) – A flag to switch between different GeoNames API endpoints. The default value is findNearbyPlaceName which returns the closest populated place. Another currently implemented option is findNearby which returns the closest toponym for the lat/lng query.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse_timezone(query, *, timeout=DEFAULT_SENTINEL)\n\nFind the timezone for a point in query.\n\nGeoNames always returns a timezone: if the point being queried doesn’t have an assigned Olson timezone id, a pytz.FixedOffset timezone is used to produce the geopy.timezone.Timezone.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as “%(latitude)s, %(longitude)s”) – The coordinates for which you want a timezone.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\ngeopy.timezone.Timezone.\n\nGoogleV3\n\nclassgeopy.geocoders.GoogleV3(api_key=None, *, domain='maps.googleapis.com', scheme=None, client_id=None, secret_key=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, channel='')\n\nGeocoder using the Google Maps v3 API.\n\nDocumentation at:\n\nhttps://developers.google.com/maps/documentation/geocoding/\n\nPricing details:\n\nhttps://developers.google.com/maps/documentation/geocoding/usage-and-billing\n\n__init__(api_key=None, *, domain='maps.googleapis.com', scheme=None, client_id=None, secret_key=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, channel='')\n\nParameters\n\napi_key (str) –\n\nThe API key required by Google to perform geocoding requests, mandatory (unless premier is used, then both client_id and secret_key must be specified instead). API keys are managed through the Google APIs console (https://code.google.com/apis/console). Make sure to have both Geocoding API and Time Zone API services enabled for this API key.\n\nChanged in version 2.1: Previously a warning has been emitted when neither api_key nor premier were specified. Now a geopy.exc.ConfigurationError is raised.\n\ndomain (str) – Should be the localized Google Maps domain to connect to. The default is ‘maps.googleapis.com’, but if you’re geocoding address in the UK (for example), you may want to set it to ‘maps.google.co.uk’ to properly bias results.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\nclient_id (str) – If using premier, the account client id.\n\nsecret_key (str) – If using premier, the account secret key.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\nchannel (str) – If using premier, the channel identifier.\n\ngeocode(query=None, *, exactly_one=True, timeout=DEFAULT_SENTINEL, bounds=None, region=None, components=None, place_id=None, language=None, sensor=False)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) –\n\nThe address or query you wish to geocode. Optional, if components param is set:\n\n>>> g.geocode(components={\"city\": \"Paris\", \"country\": \"FR\"}) Location(France, (46.227638, 2.213749, 0.0))\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nbounds (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – The bounding box of the viewport within which to bias geocode results more prominently. Example: [Point(22, 180), Point(-22, -180)].\n\nregion (str) – The region code, specified as a ccTLD (“top-level domain”) two-character value.\n\ncomponents (dict or list) –\n\nRestricts to an area. Can use any combination of: route, locality, administrative_area, postal_code, country.\n\nPass a list of tuples if you want to specify multiple components of the same type, e.g.:\n\n>>> [('administrative_area', 'VA'), ('administrative_area', 'Arlington')]\n\nplace_id (str) –\n\nRetrieve a Location using a Place ID. Cannot be not used with query or bounds parameters.\n\n>>> g.geocode(place_id='ChIJOcfP0Iq2j4ARDrXUa7ZWs34')\n\nlanguage (str) – The language in which to return results.\n\nsensor (bool) – Whether the geocoding request comes from a device with a location sensor.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, language=None, sensor=False)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlanguage (str) – The language in which to return results.\n\nsensor (bool) – Whether the geocoding request comes from a device with a location sensor.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse_timezone(query, *, at_time=None, timeout=DEFAULT_SENTINEL)\n\nFind the timezone a point in query was in for a specified at_time.\n\nNone will be returned for points without an assigned Olson timezone id (e.g. for Antarctica).\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as “%(latitude)s, %(longitude)s”) – The coordinates for which you want a timezone.\n\nat_time (datetime.datetime or None) – The time at which you want the timezone of this location. This is optional, and defaults to the time that the function is called in UTC. Timezone-aware datetimes are correctly handled and naive datetimes are silently treated as UTC.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone or geopy.timezone.Timezone.\n\nHERE\n\nclassgeopy.geocoders.Here(*, app_id=None, app_code=None, apikey=None, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nGeocoder using the HERE Geocoder API.\n\nDocumentation at:\n\nhttps://developer.here.com/documentation/geocoder/\n\nAttention\n\nThis class uses a v6 API which is in maintenance mode. Consider using the newer HereV7 class.\n\n__init__(*, app_id=None, app_code=None, apikey=None, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napp_id (str) –\n\nShould be a valid HERE Maps APP ID. Will eventually be replaced with APIKEY. See https://developer.here.com/authenticationpage.\n\nAttention\n\nApp ID and App Code are being replaced by API Keys and OAuth 2.0 by HERE. Consider getting an apikey instead of using app_id and app_code.\n\napp_code (str) –\n\nShould be a valid HERE Maps APP CODE. Will eventually be replaced with APIKEY. See https://developer.here.com/authenticationpage.\n\nAttention\n\nApp ID and App Code are being replaced by API Keys and OAuth 2.0 by HERE. Consider getting an apikey instead of using app_id and app_code.\n\napikey (str) – Should be a valid HERE Maps APIKEY. These keys were introduced in December 2019 and will eventually replace the legacy APP CODE/APP ID pairs which are already no longer available for new accounts (but still work for old accounts). More authentication details are available at https://developer.here.com/blog/announcing-two-new-authentication-types. See https://developer.here.com/authenticationpage.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, bbox=None, mapview=None, exactly_one=True, maxresults=None, pageinformation=None, language=None, additional_data=False, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nThis implementation supports only a subset of all available parameters. A list of all parameters of the pure REST API is available here: https://developer.here.com/documentation/geocoder/topics/resource-geocode.html\n\nParameters\n\nquery (str or dict) –\n\nThe address or query you wish to geocode.\n\nFor a structured query, provide a dictionary whose keys are one of: city, county, district, country, state, street, housenumber, or postalcode.\n\nbbox (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – A type of spatial filter, limits the search for any other attributes in the request. Specified by two coordinate (lat/lon) pairs – corners of the box. The bbox search is currently similar to mapview but it is not extended (cited from the REST API docs). Relevant global results are also returned. Example: [Point(22, 180), Point(-22, -180)].\n\nmapview (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – The app’s viewport, given as two coordinate pairs, specified by two lat/lon pairs – corners of the bounding box, respectively. Matches from within the set map view plus an extended area are ranked highest. Relevant global results are also returned. Example: [Point(22, 180), Point(-22, -180)].\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\nmaxresults (int) – Defines the maximum number of items in the response structure. If not provided and there are multiple results the HERE API will return 10 results by default. This will be reset to one if exactly_one is True.\n\npageinformation (int) – A key which identifies the page to be returned when the response is separated into multiple pages. Only useful when maxresults is also provided.\n\nlanguage (str) – Affects the language of the response, must be a RFC 4647 language code, e.g. ‘en-US’.\n\nadditional_data (str) – A string with key-value pairs as described on https://developer.here.com/documentation/geocoder/topics/resource-params-additional.html. These will be added as one query parameter to the URL.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, radius=None, exactly_one=True, maxresults=None, pageinformation=None, language=None, mode='retrieveAddresses', timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nThis implementation supports only a subset of all available parameters. A list of all parameters of the pure REST API is available here: https://developer.here.com/documentation/geocoder/topics/resource-reverse-geocode.html\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nradius (float) – Proximity radius in meters.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\nmaxresults (int) – Defines the maximum number of items in the response structure. If not provided and there are multiple results the HERE API will return 10 results by default. This will be reset to one if exactly_one is True.\n\npageinformation (int) – A key which identifies the page to be returned when the response is separated into multiple pages. Only useful when maxresults is also provided.\n\nlanguage (str) – Affects the language of the response, must be a RFC 4647 language code, e.g. ‘en-US’.\n\nmode (str) – Affects the type of returned response items, must be one of: ‘retrieveAddresses’ (default), ‘retrieveAreas’, ‘retrieveLandmarks’, ‘retrieveAll’, or ‘trackPosition’. See online documentation for more information.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nHEREv7\n\nclassgeopy.geocoders.HereV7(apikey, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='search.hereapi.com')\n\nGeocoder using the HERE Geocoding & Search v7 API.\n\nDocumentation at:\n\nhttps://developer.here.com/documentation/geocoding-search-api/\n\nTerms of Service at:\n\nhttps://legal.here.com/en-gb/terms\n\nNew in version 2.2.\n\n__init__(apikey, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='search.hereapi.com')\n\nParameters\n\napikey (str) – Should be a valid HERE Maps apikey. A project can be created at https://developer.here.com/projects.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) – See geopy.geocoders.options.default_adapter_factory.\n\ndomain (str) –\n\nbase api domain\n\nNew in version 2.4.\n\ngeocode(query=None, *, components=None, at=None, countries=None, language=None, limit=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode. Optional, if components param is set.\n\ncomponents (dict) – A structured query. Can be used along with the free-text query. Should be a dictionary whose keys are one of: country, state, county, city, district, street, houseNumber, postalCode.\n\nat (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The center of the search context.\n\ncountries (list) – A list of country codes specified in ISO 3166-1 alpha-3 format, e.g. ['USA', 'CAN']. This is a hard filter.\n\nlanguage (str) – Affects the language of the response, must be a BCP 47 compliant language code, e.g. en-US.\n\nlimit (int) – Defines the maximum number of items in the response structure. If not provided and there are multiple results the HERE API will return 20 results by default. This will be reset to one if exactly_one is True.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, language=None, limit=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nlanguage (str) – Affects the language of the response, must be a BCP 47 compliant language code, e.g. en-US.\n\nlimit (int) – Maximum number of results to be returned. This will be reset to one if exactly_one is True.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nIGNFrance\n\nclassgeopy.geocoders.IGNFrance(api_key=None, *, username=None, password=None, referer=None, domain='wxs.ign.fr', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nGeocoder using the IGN France GeoCoder OpenLS API.\n\nDocumentation at:\n\nhttps://geoservices.ign.fr/services-web-essentiels\n\n__init__(api_key=None, *, username=None, password=None, referer=None, domain='wxs.ign.fr', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napi_key (str) –\n\nNot used.\n\nDeprecated since version 2.3: IGNFrance geocoding methods no longer accept or require authentication, see https://geoservices.ign.fr/actualites/2021-10-04-evolution-des-modalites-dacces-aux-services-web. This parameter is scheduled for removal in geopy 3.0.\n\nusername (str) –\n\nNot used.\n\nDeprecated since version 2.3: See the api_key deprecation note.\n\npassword (str) –\n\nNot used.\n\nDeprecated since version 2.3: See the api_key deprecation note.\n\nreferer (str) –\n\nNot used.\n\nDeprecated since version 2.3: See the api_key deprecation note.\n\ndomain (str) – Currently it is 'wxs.ign.fr', can be changed for testing purposes for developer API e.g 'gpp3-wxs.ign.fr' at the moment.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, query_type='StreetAddress', maximum_responses=25, is_freeform=False, filtering=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The query string to be geocoded.\n\nquery_type (str) – The type to provide for geocoding. It can be PositionOfInterest, StreetAddress or CadastralParcel. StreetAddress is the default choice if none provided.\n\nmaximum_responses (int) – The maximum number of responses to ask to the API in the query body.\n\nis_freeform (str) – Set if return is structured with freeform structure or a more structured returned. By default, value is False.\n\nfiltering (str) – Provide string that help setting geocoder filter. It contains an XML string. See examples in documentation and ignfrance.py file in directory tests.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, reverse_geocode_preference=('StreetAddress',), maximum_responses=25, filtering='', exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nreverse_geocode_preference (list) – Enable to set expected results type. It can be StreetAddress or PositionOfInterest. Default is set to StreetAddress.\n\nmaximum_responses (int) – The maximum number of responses to ask to the API in the query body.\n\nfiltering (str) – Provide string that help setting geocoder filter. It contains an XML string. See examples in documentation and ignfrance.py file in directory tests.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nMapBox\n\nclassgeopy.geocoders.MapBox(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='api.mapbox.com', referer=None)\n\nGeocoder using the Mapbox API.\n\nDocumentation at:\n\nhttps://www.mapbox.com/api-documentation/\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='api.mapbox.com', referer=None)\n\nParameters\n\napi_key (str) – The API key required by Mapbox to perform geocoding requests. API keys are managed through Mapox’s account page (https://www.mapbox.com/account/access-tokens).\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ndomain (str) – base api domain for mapbox\n\nreferer (str) –\n\nThe URL used to satisfy the URL restriction of mapbox tokens.\n\nNew in version 2.3.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, proximity=None, country=None, language=None, bbox=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nproximity (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – A coordinate to bias local results based on a provided location.\n\ncountry (str or list) – Country to filter result in form of ISO 3166-1 alpha-2 country code (e.g. FR). Might be a Python list of strings.\n\nlanguage (str) –\n\nThis parameter controls the language of the text supplied in responses, and also affects result scoring, with results matching the user’s query in the requested language being preferred over results that match in another language. You can pass two letters country codes (ISO 639-1).\n\nNew in version 2.3.\n\nbbox (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – The bounding box of the viewport within which to bias geocode results more prominently. Example: [Point(22, 180), Point(-22, -180)].\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nMapQuest\n\nclassgeopy.geocoders.MapQuest(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='www.mapquestapi.com')\n\nGeocoder using the MapQuest API based on Licensed data.\n\nDocumentation at:\n\nhttps://developer.mapquest.com/documentation/geocoding-api/\n\nMapQuest provides two Geocoding APIs:\n\ngeopy.geocoders.OpenMapQuest Nominatim-alike API which is based on Open data from OpenStreetMap.\n\ngeopy.geocoders.MapQuest (this class) MapQuest’s own API which is based on Licensed data.\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='www.mapquestapi.com')\n\nParameters\n\napi_key (str) – The API key required by Mapquest to perform geocoding requests. API keys are managed through MapQuest’s “Manage Keys” page (https://developer.mapquest.com/user/me/apps).\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ndomain (str) – base api domain for mapquest\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, limit=None, bounds=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlimit (int) – Limit the maximum number of items in the response. This will be reset to one if exactly_one is True.\n\nbounds (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – The bounding box of the viewport within which to bias geocode results more prominently. Example: [Point(22, 180), Point(-22, -180)].\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nMapTiler\n\nclassgeopy.geocoders.MapTiler(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='api.maptiler.com')\n\nGeocoder using the MapTiler API.\n\nDocumentation at:\n\nhttps://cloud.maptiler.com/geocoding/ (requires sign-up)\n\n__init__(api_key, *, scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None, domain='api.maptiler.com')\n\nParameters\n\napi_key (str) – The API key required by Maptiler to perform geocoding requests. API keys are managed through Maptiler’s account page (https://cloud.maptiler.com/account/keys).\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ndomain (str) – base api domain for Maptiler\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, proximity=None, language=None, bbox=None)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nproximity (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – A coordinate to bias local results based on a provided location.\n\nlanguage (str or list) – Prefer results in specific languages. Accepts a single string like \"en\" or a list like [\"de\", \"en\"].\n\nbbox (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – The bounding box of the viewport within which to bias geocode results more prominently. Example: [Point(22, 180), Point(-22, -180)].\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, language=None)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlanguage (str or list) – Prefer results in specific languages. Accepts a single string like \"en\" or a list like [\"de\", \"en\"].\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nOpenCage\n\nclassgeopy.geocoders.OpenCage(api_key, *, domain='api.opencagedata.com', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nGeocoder using the OpenCageData API.\n\nDocumentation at:\n\nhttps://opencagedata.com/api\n\nChanged in version 2.2: Improved error handling by using the default errors map (e.g. to raise exc.GeocoderQuotaExceeded instead of exc.GeocoderQueryError for HTTP 402 error)\n\n__init__(api_key, *, domain='api.opencagedata.com', scheme=None, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napi_key (str) – The API key required by OpenCageData to perform geocoding requests. You can get your key here: https://opencagedata.com/\n\ndomain (str) – Currently it is 'api.opencagedata.com', can be changed for testing purposes.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, bounds=None, country=None, language=None, annotations=True, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn a location point by address.\n\nParameters\n\nquery (str) – The address or query you wish to geocode.\n\nbounds (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – Provides the geocoder with a hint to the region that the query resides in. This value will help the geocoder but will not restrict the possible results to the supplied region. The bounds parameter should be specified as 2 coordinate points – corners of a bounding box. Example: [Point(22, 180), Point(-22, -180)].\n\ncountry (str or list) – Restricts the results to the specified country or countries. The country code is a 2 character code as defined by the ISO 3166-1 Alpha 2 standard (e.g. fr). Might be a Python list of strings.\n\nlanguage (str) – an IETF format language code (such as es for Spanish or pt-BR for Brazilian Portuguese); if this is omitted a code of en (English) will be assumed by the remote service.\n\nannotations (bool) –\n\nEnable annotations data, which can be accessed via Location.raw. Set to False if you don’t need it to gain a little performance win.\n\nNew in version 2.2.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, language=None, exactly_one=True, timeout=DEFAULT_SENTINEL)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nlanguage (str) – The language in which to return results.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nOpenMapQuest\n\nclassgeopy.geocoders.OpenMapQuest(api_key, *, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, domain='open.mapquestapi.com', scheme=None, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nBases: geopy.geocoders.nominatim.Nominatim\n\nGeocoder using MapQuest Open Platform Web Services.\n\nDocumentation at:\n\nhttps://developer.mapquest.com/documentation/open/\n\nMapQuest provides two Geocoding APIs:\n\ngeopy.geocoders.OpenMapQuest (this class) Nominatim-alike API which is based on Open data from OpenStreetMap.\n\ngeopy.geocoders.MapQuest MapQuest’s own API which is based on Licensed data.\n\n__init__(api_key, *, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, domain='open.mapquestapi.com', scheme=None, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\napi_key (str) – API key provided by MapQuest, required.\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\ndomain (str) – Domain where the target Nominatim service is hosted.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, limit=None, addressdetails=False, language=False, geometry=None, extratags=False, country_codes=None, viewbox=None, bounded=False, featuretype=None, namedetails=False)\n\nReturn a location point by address.\n\nParameters\n\nquery (dict or str) –\n\nThe address, query or a structured query you wish to geocode.\n\nFor a structured query, provide a dictionary whose keys are one of: street, city, county, state, country, or postalcode. For more information, see Nominatim’s documentation for structured requests:\n\nhttps://nominatim.org/release-docs/develop/api/Search\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlimit (int) – Maximum amount of results to return from Nominatim. Unless exactly_one is set to False, limit will always be 1.\n\naddressdetails (bool) – If you want in Location.raw to include address details such as house_number, city_district, postcode, etc (in a structured form) set it to True\n\nlanguage (str) –\n\nPreferred language in which to return results. Either uses standard RFC2616 accept-language string or a simple comma-separated list of language codes.\n\ngeometry (str) – If present, specifies whether the geocoding service should return the result’s geometry in wkt, svg, kml, or geojson formats. This is available via the raw attribute on the returned geopy.location.Location object.\n\nextratags (bool) – Include additional information in the result if available, e.g. wikipedia link, opening hours.\n\ncountry_codes (str or list) – Limit search results to a specific country (or a list of countries). A country_code should be the ISO 3166-1alpha2 code, e.g. gb for the United Kingdom, de for Germany, etc.\n\nviewbox (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – Prefer this area to find search results. By default this is treated as a hint, if you want to restrict results to this area, specify bounded=True as well. Example: [Point(22, 180), Point(-22, -180)].\n\nbounded (bool) – Restrict the results to only items contained within the bounding viewbox.\n\nfeaturetype (str) – If present, restrict results to certain type of features. Allowed values: country, state, city, settlement.\n\nnamedetails (bool) – If you want in Location.raw to include namedetails, set it to True. This will be a list of alternative names, including language variants, etc.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, language=False, addressdetails=True, zoom=None, namedetails=False)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %(longitude)s\".) – The coordinates for which you wish to obtain the closest human-readable addresses.\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlanguage (str) –\n\nPreferred language in which to return results. Either uses standard RFC2616 accept-language string or a simple comma-separated list of language codes.\n\naddressdetails (bool) – Whether or not to include address details, such as city, county, state, etc. in Location.raw\n\nzoom (int) – Level of detail required for the address, an integer in range from 0 (country level) to 18 (building level), default is 18.\n\nnamedetails (bool) –\n\nIf you want in Location.raw to include namedetails, set it to True. This will be a list of alternative names, including language variants, etc.\n\nNew in version 2.3.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nNominatim\n\nclassgeopy.geocoders.Nominatim(*, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, domain='nominatim.openstreetmap.org', scheme=None, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nNominatim geocoder for OpenStreetMap data.\n\nDocumentation at:\n\nhttps://nominatim.org/release-docs/develop/api/Overview/\n\nAttention\n\nUsing Nominatim with the default user_agent is strongly discouraged, as it violates Nominatim’s Usage Policy https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors. Please make sure to specify a custom user_agent with Nominatim(user_agent=\"my-application\") or by overriding the default user_agent: geopy.geocoders.options.default_user_agent = \"my-application\". An exception will be thrown if a custom user_agent is not specified.\n\n__init__(*, timeout=DEFAULT_SENTINEL, proxies=DEFAULT_SENTINEL, domain='nominatim.openstreetmap.org', scheme=None, user_agent=None, ssl_context=DEFAULT_SENTINEL, adapter_factory=None)\n\nParameters\n\ntimeout (int) – See geopy.geocoders.options.default_timeout.\n\nproxies (dict) – See geopy.geocoders.options.default_proxies.\n\ndomain (str) – Domain where the target Nominatim service is hosted.\n\nscheme (str) – See geopy.geocoders.options.default_scheme.\n\nuser_agent (str) – See geopy.geocoders.options.default_user_agent.\n\nssl_context (ssl.SSLContext) – See geopy.geocoders.options.default_ssl_context.\n\nadapter_factory (callable) –\n\nSee geopy.geocoders.options.default_adapter_factory.\n\nNew in version 2.0.\n\ngeocode(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, limit=None, addressdetails=False, language=False, geometry=None, extratags=False, country_codes=None, viewbox=None, bounded=False, featuretype=None, namedetails=False)\n\nReturn a location point by address.\n\nParameters\n\nquery (dict or str) –\n\nThe address, query or a structured query you wish to geocode.\n\nFor a structured query, provide a dictionary whose keys are one of: street, city, county, state, country, or postalcode. For more information, see Nominatim’s documentation for structured requests:\n\nhttps://nominatim.org/release-docs/develop/api/Search\n\nexactly_one (bool) – Return one result or a list of results, if available.\n\ntimeout (int) – Time, in seconds, to wait for the geocoding service to respond before raising a geopy.exc.GeocoderTimedOut exception. Set this only if you wish to override, on this call only, the value set during the geocoder’s initialization.\n\nlimit (int) – Maximum amount of results to return from Nominatim. Unless exactly_one is set to False, limit will always be 1.\n\naddressdetails (bool) – If you want in Location.raw to include address details such as house_number, city_district, postcode, etc (in a structured form) set it to True\n\nlanguage (str) –\n\nPreferred language in which to return results. Either uses standard RFC2616 accept-language string or a simple comma-separated list of language codes.\n\ngeometry (str) – If present, specifies whether the geocoding service should return the result’s geometry in wkt, svg, kml, or geojson formats. This is available via the raw attribute on the returned geopy.location.Location object.\n\nextratags (bool) – Include additional information in the result if available, e.g. wikipedia link, opening hours.\n\ncountry_codes (str or list) – Limit search results to a specific country (or a list of countries). A country_code should be the ISO 3166-1alpha2 code, e.g. gb for the United Kingdom, de for Germany, etc.\n\nviewbox (list or tuple of 2 items of geopy.point.Point or (latitude, longitude) or \"%(latitude)s, %(longitude)s\".) – Prefer this area to find search results. By default this is treated as a hint, if you want to restrict results to this area, specify bounded=True as well. Example: [Point(22, 180), Point(-22, -180)].\n\nbounded (bool) – Restrict the results to only items contained within the bounding viewbox.\n\nfeaturetype (str) – If present, restrict results to certain type of features. Allowed values: country, state, city, settlement.\n\nnamedetails (bool) – If you want in Location.raw to include namedetails, set it to True. This will be a list of alternative names, including language variants, etc.\n\nReturn type\n\nNone, geopy.location.Location or a list of them, if exactly_one=False.\n\nreverse(query, *, exactly_one=True, timeout=DEFAULT_SENTINEL, language=False, addressdetails=True, zoom=None, namedetails=False)\n\nReturn an address by location point.\n\nParameters\n\nquery (geopy.point.Point, list or tuple of (latitude, longitude), or string as \"%(latitude)s, %("
    }
}