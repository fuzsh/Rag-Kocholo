{
    "id": "dbpedia_6504_0",
    "rank": 54,
    "data": {
        "url": "https://stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points",
        "read_more_link": "",
        "language": "en",
        "title": "Haversine formula in Python (bearing and distance between two GPS points)",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/J9LJf.jpg?s=64",
            "https://www.gravatar.com/avatar/49d02a1a779a343ef535e8f56593b9e8?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/cAGdr.png?s=64",
            "https://www.gravatar.com/avatar/e5296db9eb0ed8cdbcee2dd912bb72a6?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/fb530ca79afcb037bb895f2a56c9b8c0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/biWbv.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://lh6.googleusercontent.com/-rtSILs5NgUw/AAAAAAAAAAI/AAAAAAAAAAA/U5RU2EinsEM/photo.jpg?sz=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/5d1b102aaab3bc78c4122a1fef1867cc?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/a5380a2aee73f2115ba5d72c9d03ec0d?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/661pb.jpg?s=64",
            "https://i.sstatic.net/GPILT.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/e978f41b7b54e98bd7b94281884491e0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/bc2e662b5aaf9bf7b3a65887fc9dab73?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/RU0Tx.jpg?s=64",
            "https://i.sstatic.net/sRho9.jpg?s=64",
            "https://www.gravatar.com/avatar/cc039a638c98ade640dbc82b5ecf9d46?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/4913349/ivc/3f58?prg=660cc93c-4709-47ba-bd3a-11276cd91302"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2011-02-06T12:41:45",
        "summary": "",
        "meta_description": "Problem\nI would like to know how to get the distance and bearing between two GPS points.\nI have researched on the haversine distance. Someone told me that I could also find the bearing using the same",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/4913349/haversine-formula-in-python-bearing-and-distance-between-two-gps-points",
        "text": "Considering that your goal is to measure the distance between two points (represented by geographic coordinates), will leave three options below:\n\nHaversine formula\n\nUsing GeoPy geodesic distance\n\nUsing GeoPy great-circle distance\n\nOption 1\n\nThe haversine formula will do the work. However, it is important to note that by doing that one is approximating the Earth as a sphere, and that has an error (see this answer) - as Earth is not a sphere.\n\nIn order to use the haversine formula, first of all, one needs to define the radius of the Earth. This, in itself, may lead to some controversy. Considering the following three sources\n\nNASA's Goddard Space Flight Center: 6371 km\n\nWikipedia: 6371 km (3958.8 mi)\n\nGoogle - 6371 km\n\nI'll be using the value 6371 km as a reference to the radius of the Earth.\n\n# Radius of the Earth r = 6371.0\n\nWe will be leveraging math module.\n\nAfter the radius, one moves to the coordinates, and one starts by converting the coordinated into radians, in order to use math's trigonometric functions. For that one, it imports math.radians(x) and use them as follows:\n\n# Import radians from the 'math' module from math import radians # Latitude and longitude for the first point (let's consider 40.000ยบ and 21.000ยบ) lat1 = radians(40.000) lon1 = radians(21.000) # Latitude and longitude for the second point (let's consider 30.000ยบ and 25.000ยบ) lat2 = radians(30.000) lon2 = radians(25.000)\n\nNow one is ready to apply the haversine formula. First, one subtracts the longitude of point 1 to the longitude of point 2\n\ndlon = lon2 - lon1 dlat = lat2 - lat1\n\nThen, and for here there are a couple of trigonometric functions that one is going to use, more specifically, math.sin(), math.cos(), and math.atan2(). We will also be using math.sqrt()\n\n# Import sin, cos, atan2, and sqrt from the 'math' module from math import sin, cos, atan2, sqrt a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2 c = 2 * atan2(sqrt(a), sqrt(1 - a)) d = r * c\n\nThen one gets the distance by printing d.\n\nAs it may help, let's gather everything in a function (inspired by Michael Dunn's answer)\n\nfrom math import radians, cos, sin, atan2, sqrt def haversine(lon1, lat1, lon2, lat2): \"\"\" Calculate the great-circle distance (in km) between two points using their longitude and latitude (in degrees). \"\"\" # Radius of the Earth r = 6371.0 # Convert degrees to radians # First point lat1 = radians(lat1) lon1 = radians(lon1) # Second point lat2 = radians(lat2) lon2 = radians(lon2) # Haversine formula dlon = lon2 - lon1 dlat = lat2 - lat1 a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2 c = 2 * atan2(sqrt(a), sqrt(1 - a)) return r * c\n\nOption 2\n\nOne is going to use GeoPy's distance, more specifically, the geodesic.\n\nWe can obtain the results both on km, or miles (Source)\n\n# Import Geopy's distance from geopy import distance wellington = (-41.32, 174.81) salamanca = (40.96, -5.50) print(distance.distance(wellington, salamanca).km) # If one wants it in miles, change `km` to `miles` [Out]: 19959.6792674\n\nOption 3\n\nOne is going to use GeoPy's distance, more specifically, the great-circle.\n\nWe can obtain the results both on km, or miles (Source)\n\n# Import Geopy's distance from geopy import distance newport_ri = (41.49008, -71.312796) cleveland_oh = (41.499498, -81.695391) print(distance.great_circle(newport_ri, cleveland_oh).miles) # If one wants it in km, change `miles` to `km` [Out]: 536.997990696\n\nNotes:"
    }
}