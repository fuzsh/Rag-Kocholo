{
    "id": "dbpedia_3873_2",
    "rank": 86,
    "data": {
        "url": "https://forums.opensuse.org/t/how-do-i-eliminate-uuid-dependence/130211",
        "read_more_link": "",
        "language": "en",
        "title": "How do I eliminate UUID dependence?",
        "top_image": "https://forums.opensuse.org/uploads/default/original/2X/4/4c03e012b15abba8f7e7e9fd663073b06047b9fd.png",
        "meta_img": "https://forums.opensuse.org/uploads/default/original/2X/4/4c03e012b15abba8f7e7e9fd663073b06047b9fd.png",
        "images": [
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/paulparker/48/6217_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/paulparker/48/6217_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/paulparker/48/6217_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/paulparker/48/6217_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/deano_ferrari/48/4573_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/deano_ferrari/48/4573_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/deano_ferrari/48/4573_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/mrmazda/48/4825_2.png",
            "https://forums.opensuse.org/letter_avatar_proxy/v4/letter/h/4bbf92/48.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/gogalthorp/48/1391_2.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/gogalthorp/48/1391_2.png",
            "https://forums.opensuse.org/letter_avatar_proxy/v4/letter/r/439d5e/48.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/mrmazda/48/4825_2.png",
            "https://forums.opensuse.org/letter_avatar_proxy/v4/letter/r/439d5e/48.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/karlmistelberger/48/4701_2.png",
            "https://forums.opensuse.org/letter_avatar_proxy/v4/letter/r/439d5e/48.png",
            "https://forums.opensuse.org/user_avatar/forums.opensuse.org/karlmistelberger/48/4701_2.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-02-09T20:43:47+00:00",
        "summary": "",
        "meta_description": "While mounting by UUID has some value for storage that is transient/mobile in nature (e.g., storage attached via USB, firewire, Lightning, perhaps even SCSI, eSATA or FibreChannel) it is IMHO the WORST POSSIBLE way to mo&hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://forums.opensuse.org/uploads/default/optimized/2X/9/9892a3ccc03e4fd9181fc692f05104e34c846a29_2_32x32.png",
        "meta_site_name": "openSUSE Forums",
        "canonical_link": "https://forums.opensuse.org/t/how-do-i-eliminate-uuid-dependence/130211",
        "text": "While mounting by UUID has some value for storage that is transient/mobile in nature (e.g., storage attached via USB, firewire, Lightning, perhaps even SCSI, eSATA or FibreChannel) it is IMHO the WORST POSSIBLE way to mount storage used to boot a system. UUID makes it IMPOSSIBLE to migrate a system and replace the boot drive without jumping through extraordinary hoops.\n\nIf there is ANY reasonable way to eliminate this rabid infatuation of UUID from an openSUSE system, please let me know,\n\nI am particularly interested in eliminating UUID dependence in grub2-mkconfig and mkinitrd(dracut).\n\nEven though i have\n\nGRUB_DISABLE_LINUX_UUID=true\n\nin /etc/default/grub, grub2-mkconfig insists on using UUID to figure out where grub.cfg exists. Which means that grub fails when the system is migrated to a different drive, it goes into a recovery console mode that writes characters temporarily in the middle of the screen before over-writing them with whatever was already being displayed. In effect, it’s useless.\n\nthe grub.cfg file gets loaded with lines like this\n\n# grep uuid /boot/grub2/grub.cfg search --no-floppy --fs-uuid --set=root --hint='lvmid/IAs7dd-2SVj-zCIo-eHYB-7vxV-Mt7H-dq05OR/MMh1yb-2vvI-Xcdf-wT6J-Y7at-6qwd-Xb5vFm' 6de884c2-d5cb-45a4-9e66-1e34ccaa3b19 search --no-floppy --fs-uuid --set=root 6de884c2-d5cb-45a4-9e66-1e34ccaa3b19 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt3 --hint-efi=hd0,gpt3 --hint-baremetal=ahci0,gpt3 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt3 --hint-efi=hd0,gpt3 --hint-baremetal=ahci0,gpt3 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt3 --hint-efi=hd0,gpt3 --hint-baremetal=ahci0,gpt3 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt3 --hint-efi=hd0,gpt3 --hint-baremetal=ahci0,gpt3 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt3 --hint-efi=hd0,gpt3 --hint-baremetal=ahci0,gpt3 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt3 --hint-efi=hd0,gpt3 --hint-baremetal=ahci0,gpt3 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root 14edeeda-cb10-4467-9993-126da8b63626 search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt1 --hint-efi=hd0,gpt1 --hint-baremetal=ahci0,gpt1 7EB1-87B3 search --no-floppy --fs-uuid --set=root 7EB1-87B3\n\nSo I have to boot from a liveCD to edit the file, replacing all instances of --fs-uuid with -l and the uuids of the old drive with the labels of the respective file systems.\n\nWhile that allows grub to function, we’re not home yet. Mkinitrd(dracut) also insists on using uuid, so booting fails after grub passes control to the kernel. The reason is fails is because the uuid of the root filesystem is different on the new drive than on the old drive, so it can’t mount the root filesystem. I could use tune2fs to change the uuid if I was using a drive partition for a singe filesystem, such that formatting .e.g. /dev/sda3 to ext4 yiels a single filesystem. That doesn’t work so well if a single disk partition encompasses multiple logical volumes. The user has no controll over the uuid applied to either a VG nor an LV. The result is entries in the initrd which look like\n\ndrwxr-xr-x 2 root root 0 Jan 21 08:30 etc/systemd/system/dev-disk-by\\\\x2duuid-14edeeda\\\\x2dcb10\\\\x2d4467\\\\x2d9993\\\\x2d126da8b63626.device.d -rw-r--r-- 2 root root 0 Jan 21 08:30 etc/systemd/system/dev-disk-by\\\\x2duuid-14edeeda\\\\x2dcb10\\\\x2d4467\\\\x2d9993\\\\x2d126da8b63626.device.d/timeout.conf drwxr-xr-x 2 root root 0 Jan 21 08:30 etc/systemd/system/dev-disk-by\\\\x2duuid-7EB1\\\\x2d87B3.device.d -rw-r--r-- 2 root root 23 Jan 21 08:30 etc/systemd/system/dev-disk-by\\\\x2duuid-7EB1\\\\x2d87B3.device.d/timeout.conf drwxr-xr-x 2 root root 0 Jan 21 08:30 etc/systemd/system/initrd.target.wants lrwxrwxrwx 1 root root 78 Jan 21 08:30 etc/systemd/system/initrd.target.wants/dev-disk-by\\\\x2duuid-14edeeda\\\\x2dcb10\\\\x2d4467\\\\x2d9993\\\\x2d126da8b63626.device -> ../dev-disk-by\\\\x2duuid-14edeeda\\\\x2dcb10\\\\x2d4467\\\\x2d9993\\\\x2d126da8b63626.device lrwxrwxrwx 1 root root 42 Jan 21 08:30 etc/systemd/system/initrd.target.wants/dev-disk-by\\\\x2duuid-7EB1\\\\x2d87B3.device -> ../dev-disk-by\\\\x2duuid-7EB1\\\\x2d87B3.device\n\nSo the kernel halts at a dracut recovery prompt because it can’t find the root filesystem. Unfortunately, my attempts to mount the real filesystem fail. I’ve been trying\n\nmount -o remount /dev/mapper/<VGname>-<LVname> /\n\nand\n\nmount -o remount /dev/dm-1 /\n\nor\n\nmount -o remount /dev/disk/by-label/<root-volume-label> /\n\nbut they all fail to mount the root filesystem.\n\nI’d really like to get the new drive installed in the system before the old drive fails completely, but UUID is making this VERY difficult. The only way I can see to make the system less flexible and useable would be to apply UUID to the keyboard, mouse, monitor and memory as well as the storage. I wonder when that’s coming. >:)\n\nIf there’s any way out of this UUID-hell, I’d sure appreciate learning about it.\n\nThanks,\n\nron\n\nOn Fri, 09 Feb 2018 20:06:01 +0000, r widell wrote:\n\n> UUID makes it IMPOSSIBLE to migrate a system and replace the boot drive\n\n> without jumping through extraordinary hoops.\n\nI’m actually going through something like this right now as part of my\n\nupgrade from 42.2 to 42.3. Hard drive started showing signs of failure,\n\nso I bought a new one (a bigger one, at that).\n\nHere’s what I’ve done:\n\nUse Clonezilla to copy the partitions to the new drive.\n\nUse gdisk to change the partition table from MBR to GPT (it’s on the\n\nClonezilla live image)\n\nUse Gparted to resize/move the partitions. At this point the device\n\nwas totally unbootable - not even the Windows partition would boot (not\n\nthat I care about that at all - it’s Win7, and just there for firmware\n\nupdates).\n\nRun the openSUSE upgrade. The only thing I had to do differently was\n\n“show all partitions” and then tell it where the home partition actually\n\nwas (because the ID was different).\n\nWait for the upgrade to complete.\n\nLet the system boot up - it failed to mount /home (but / did mount)\n\nEnter emergency shell\n\nRun YaST and enter the partitioner\n\nChange the partition entries for /home and swap to the new drive\n\nReboot\n\nThe only issues I saw after this was done were that the old swap\n\npartition tried to mount (it timed out, and I removed it from fstab when\n\nthe system booted up; I could have done that in the emergency shell as\n\nwell), and the root partition entry in fstab pointed to the old\n\n(disconnected) drive, but the system did actually boot anyways. I\n\nmanually fixed the fstab so it reflected the actual device name instead.\n\nBefore cloning the drive, I could as easily have made those changes to\n\nfstab and the grub device.map - but device.map was fixed during the\n\nupgrade anyways.\n\nJim\n\nJim Henderson\n\nopenSUSE Forums Administrator\n\nForum Use Terms & Conditions at http://tinyurl.com/openSUSE-T-C\n\nOS_PROBER is actually pretty handy (at least for the first run), since this is a multi-boot system.\n\n](GRUB - ArchWiki)\n\nThanks for that link. While most of it is a rehash of info obtained by entering\n\ninfo:grub2\n\ninto the address bar of Konqueror, I discovered some new info by expanded reading and following the links. I now have e.g. a better understanding of the limitations of the rescue console. And I also know why, when I first installed openSUSE (as the first Linux distro) onto this machine, I had to copy /EFI/opensuse/grubx64.efi to /EFI/Boot/bootx64.efi in order to boot into something other than Windows.\n\nActually, specifying the URI man:dracut.conf (again, in the address bar of Konqueror) was the key. It was there that I learned that I needed to look in /usr/lib/dracut/dracut.conf.d/ to find the file with the openSUSE customization which appeared to prevent dracut from creating an initrd that worked.\n\nI had been trying multiple invocations of dracut, always specifying root=LABEL=<root-fs-label>. none of them worked. Moreover, I couldn’t save /run/initramfs/rdsosreport.txt. I couldn’t figure out how to mount a USB thumb drive from within the dracut shell, and it wouldn’t let me mount the /boot partition because it claimed to know nothing about ext4. After editing /usr/lib/dracut/dracut.conf.d/01-dist.conf, I tried dracut once again. Once again it failed to produce a useable initrd. So I tried mkinitrd. That worked. I got a large (~48 MB) initrd image that was using labels, not uuid to search for filesystems. I copied that over to the new drive and sucessfully booted using the new initrd.\n\nI haven’t yet discovered the location where openSUSE tells grub to insist on using uuids, so I’ll probably follow the suggestion by mrmazda:\n\nThat’s something I hadn’t considered, but it sounds like a good idea.\n\nThanks to all for your help,\n\nron\n\nOver the weekend, I did a hard drive replacement/clone with an upgrade to\n\n42.3. Overall, it worked well, other than trying to convert the root\n\npartition to btrfs (that part failed miserably and led to a reinstall of\n\nthe OS).\n\nBut basically, here’s what I did:\n\nUse Clonezilla to copy the partitions to the new drive.\n\nUse gdisk to change the partition table from MBR to GPT (it’s on the\n\nClonezilla live image)\n\nUse Gparted to resize/move the partitions. At this point the device\n\nwas totally unbootable - not even the Windows partition would boot (not\n\nthat I care about that at all - it’s Win7, and just there for firmware\n\nupdates).\n\nRun the openSUSE upgrade. The only thing I had to do differently was\n\n“show all partitions” and then tell it where the home partition actually\n\nwas (because the ID was different).\n\nWait for the upgrade to complete.\n\nLet the system boot up - it failed to mount /home (but / did mount)\n\nEnter emergency shell\n\nRun YaST and enter the partitioner\n\nChange the partition entries for /home and swap to the new drive\n\nReboot\n\nAt that point, there seemed to just be a residual entry that was causing\n\nit to try to mount the old swap partition.\n\nYou can head this off by going into the YaST partitioner and changing\n\neach mount point to “by device” prior to doing the clone, and then switch\n\nit back afterwards (I’d recommend by-id at a minimum - since modern Linux\n\nkernels don’t guarantee device names are consistent from boot to boot).\n\nThe only thing that failed, as mentioned above, was my attempt to convert\n\next4 to btrfs (which isn’t related to the mounting issues). That caused\n\nsystem lockups and some weird corruption in the extents table - and was\n\nprobably just due to my lack of familiarity with doing that “properly”.\n\nIt’s not as simple as booting from the installation media and running\n\n‘btrfs convert’ (which IIRC is what I did) on the partition.\n\nJim\n\n–\n\nJim Henderson\n\nopenSUSE Forums Administrator\n\nForum Use Terms & Conditions at http://tinyurl.com/openSUSE-T-C\n\nI have used Clonezilla multiple times with great success. It’s a real godsend.\n\nI chose to not use it in this instance because the replacement drive was double the size of the old one and I wanted more control over the partition sizes on the new drive. (Actually, I DID use Clonezilla too, to save and restore the partitions used by Windows 10) I also wanted to add an additional LV in the PV and thought it would be easier to create the LVs in the size I wanted, rather the resizing everything after the migration.\n\nMoreover, I’ve gotten in the habit of doing tar backups on any machine using LVM after discovering that one of the downsides of LVM across multiple drives is that it’s VERY difficult to accurately determine exactly which of the drives is failing and restore that drive. Even when using Clonezilla.\n\nI assumed (silly me) that since the original LEAP 42.1 (now 42.2) install had specified by-label for the mount points, that the uuid scourge had been bypassed. Oops.\n\nThanks,\n\nron\n\nClose, but no cigar. You seem to be confusing the various root= definitions in grub2 with the root= definition to mkinitrd(dracut).\n\nThe\n\nset root=\n\ncommand in grub2 sets the environment variable “root” for grub, not linux. In the case of /etc/grub.d/00_header it defines the location of (normally) grub.cfg, in addition to vmlinuz and initrd. Later, when passed as an argument to the linux(16) command root= defines the location of the root-fs to the kernel.\n\nNeither of those have ANY influence on the definition of root in the pre-existing initrd (the one invoked by grub2 with the initrd command). That definition is determined when the initrd is built, and is immutable. Subsequent, more careful reading of the dracut(8) man page leads me to believe that it’s possible to do a temporary override from within the (emergency) dracut shell. Creating a symlink to /dev/root from the REAL root-fs and exiting the dracut shell is supposed to permit the boot process to continue (mount the root-fs as rw, mount the remaining fs as specified in /etc/fstab, remainder of initialization steps). It’s not something I’ve tried yet, as my more brute-force workaround was successful and I have higher priority items to work on.\n\nN.B. man dracut(8) yields\n\nCreate an initramfs <image> for the kernel with the version <kernel version>. If <kernel version> is omitted, then the version of the actual running kernel is used. If <image> is omitted or empty, then the default location /boot/initramfs-<kernel version>.img is used.\n\ndracut creates an initial image used by the kernel for preloading the block device modules (such as IDE, SCSI or RAID) which are needed to access the root filesystem, mounting the root filesystem and booting into the real system.\n\nimplied to me that modules used by the kernel at the time of dracut invocation are included in the initrd created by dracut, since I couldn’t find any configuration file entries which would override the inclusion of said modules. My attempts at invoking dracut directly, and subsequent failure to boot using the resulting initrd, lead me to believe that I’m either not reading that passage correctly or that passage is incorrect. The mkinitrd shell script goes through great pains to ensure that all necessary modules get loaded. And I can boot using initrds created using that script.\n\nRegards,\n\nron\n\nExecutive Summary:\n\nI will confirm that this works.\n\nI need to vigorously reexamine numerous assumptions, especially wrt grub2 tools.\n\nDetailed response:\n\nI tried to replicate the process Karl described.\n\nInstall old, small (80GB), SATA HDD as only drive in a spare computer\n\n3 partitions-- 40 GB (ext4) /, 6 GB (swap) swap, remainder (ext4) /home.\n\nclean install of openSUSE LEAP 42.3.\n\nCreate migration target\n\n64 GB USB thumb drive\n\n3 partitions-- 30 GB (ext4), 6 GB (swap), remainder (ext4) /home.\n\nReboot system from Partition Magic LiveCD\n\nMount root & /home partitions of HDD & USB thumb drive at separate mountpoints.\n\nInvoke “rsync -a --delete” to copy data on HDD-root to USB-root and HDD-home to USB-home filesystems.\n\nReboot from HDD (now running openSUSE LEAP 42.3).\n\nMount root-fs of USB thumb drive and chroot to that mountpoint.\n\nEdit /etc/fstab so UUIDs of /, swap and /home reflect UUIDs of USB thumb drive partitions.\n\nInvoke “grub2-install” to install grub2 to USB thumb drive.\n\ninvoke grub2-mkconfig and watch output stream by.\n\nShutdown, remove HDD & reboot from US thumb drive.\n\nGrub2 launches and presents menu\n\nSelect default option\n\nBoot hangs forever waiting for UUID of HDD to appear.\n\nWell, that didn’t work.\n\nWhy?\n\nA: Because grub2-mkconfig output was not redirected to /boot/grub2/grub.cfg of USB thumb drive.\n\nSo either manually edit /boot/grub2/grub.cfg of USB thumb drive, or reinvoke grub2-mkconfig using -o option to direct output.\n\nI chose the latter:\n\nReinstall HDD and boot from it.\n\nMount rootfs of USB thumb drive and chroot to that mountpoint.\n\n# grub2-mkconfig -o /boot/grub2/grub.cfg\n\nShutdown. And remove HDD\n\nReboot from USB thumb drive.\n\nSUCCESS!!\n\nSubsequent investigation shows that enabling GRUB_DISABLE_LINUX_UUID=true in /etc/default/grub is ineffective. While it does eliminate the uuid= statements, it doesn’t eliminate other means of defining root as uuid. E.g.\n\nset=root <value>\n\nwill also assign the uuid of <value> to root. There are 8 of these statements in the grub.cfg of a machine with both GRUB_DISABLE_LINUX_UUID and GRUB_DISABLE_OS_PROBER set to true.\n\nSo I apologize for my ignorant obstinance. I really thought that I had eliminated all instances of uuid in grub.cfg, so the definition of root=<uuid-value> “HAD” to be defined in the initrd. I was wrong. I will try to do better.\n\nThanks again,\n\nron"
    }
}