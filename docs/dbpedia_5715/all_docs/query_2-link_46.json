{
    "id": "dbpedia_5715_2",
    "rank": 46,
    "data": {
        "url": "https://neo4j.com/docs/cypher-cheat-sheet/5/auradb-enterprise/",
        "read_more_link": "",
        "language": "en",
        "title": "Cypher Cheat Sheet",
        "top_image": "https://dist.neo4j.com/wp-content/uploads/20210423062553/neo4j-social-share-21.png",
        "meta_img": "https://dist.neo4j.com/wp-content/uploads/20210423062553/neo4j-social-share-21.png",
        "images": [
            "https://dist.neo4j.com/wp-content/uploads/20230926084108/Logo_FullColor_RGB_TransBG.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Cypher Cheat Sheet - Neo4j Documentation Cheat Sheet",
        "meta_lang": "en",
        "meta_favicon": "https://neo4j.com/wp-content/themes/neo4jweb/favicon.ico",
        "meta_site_name": "Neo4j Graph Data Platform",
        "canonical_link": "https://neo4j.com/docs/cypher-cheat-sheet/5/",
        "text": "The WITH clause can use:\n\nSubqueries can be made to execute in separate, inner transactions, producing intermediate commits.\n\nTo instruct Neo4j Browser to submit the query as an implicit (auto-commit) transaction, prepend the query with :auto.\n\nThe UNWIND clause expands a list into a sequence of rows.\n\nThere are three different option flags to control the behavior in case of an error occurring in any of the inner transactions:\n\nThe CASE expression can be used in expression positions, for example as part of the WITH or RETURN clauses.\n\nReturn THEN value from the matching WHEN value. The ELSE value is optional, and substituted for null if missing.\n\nCreate a range index with the name index_name on nodes with label Person and property name.\n\nIt is possible to omit the index_name, if not specified the index name will be decided by the DBMS. Best practice is to always specify a sensible name when creating an index.\n\nThe create syntax is CREATE [RANGE|TEXT|POINT|LOOKUP|FULLTEXT|VECTOR] INDEX …​. Defaults to range if not explicitly stated.\n\nCreate a text index on nodes with label Person and property name. Text indexes only solve predicates involving STRING property values.\n\nCreate a node property uniqueness constraint on the label Person and property name. Using the keyword IF NOT EXISTS makes the command idempotent, and no error will be thrown if an attempt is made to create the same constraint twice. If any other node with that label is updated or created with a name that already exists, the write operation will fail.\n\nBest practice is to always specify a sensible name when creating a constraint.\n\nCreate a relationship property uniqueness constraint on the relationship type LIKED and property when. If any other relationship with that relationship type is updated or created with a when property value that already exists, the write operation will fail.\n\nBest practice is to always specify a sensible name when creating a constraint.\n\nCreate a relationship key constraint with the name constraint_name on the relationship type KNOWS and properties since and isFriend. If a relationship with that relationship type is created without both the since and isFriend properties, or if the combination of the two is not unique, the write operation will fail. The write operation will also fail if the since and/or isFriend properties on an existing relationship with the relationship type KNOWS is modified to violate these constraints.\n\nThe non-alphabetic characters dot (.) and dash (-), including numbers, can be used in database names, but must be escaped using backticks (`). Best practice is to always escape when using dots. Deprecated behavior: database names are the only identifier for which dots (.) do not need to be escaped.\n\nGrant LOAD privilege on ALL DATA to allow loading all data to the specified role.\n\nDeny LOAD privilege on CIDR range 127.0.0.1/32 to disallow loading data from sources in that range to the specified role.\n\nGrant TRAVERSE privilege on all graphs and all nodes to the specified role.\n\nTo remove a granted or denied privilege, prepend the privilege query with REVOKE and replace the TO with FROM; (REVOKE GRANT ALL ON GRAPH `database-name FROM role_name`).\n\nGrant ALL DATABASE PRIVILEGES privilege for all databases to the specified role.\n\nNote that the privileges for starting and stopping all databases, and transaction management, are not included.\n\nTo remove a granted or denied privilege, prepend the privilege query with REVOKE and replace the TO with FROM; (REVOKE GRANT ALL ON DATABASE * FROM role_name).\n\nGrant INDEX MANAGEMENT privilege to create, drop, and list indexes for all database to the specified role.\n\nGrant CONSTRAINT MANAGEMENT privilege to create, drop, and list constraints for all database to the specified role.\n\nGrant NAME MANAGEMENT privilege to create new labels, new relationship types, and new property names for all databases to the specified role.\n\nGrant TRANSACTION MANAGEMENT privilege to show and terminate transactions on all users, for all databases, to the specified role.\n\nGrant ALL DBMS PRIVILEGES privilege to perform management for roles, users, databases, aliases, and privileges to the specified role. Also privileges to execute procedures and user defined functions are granted.\n\nTo remove a granted or denied privilege, prepend the privilege query with REVOKE and replace the TO with FROM; (REVOKE GRANT ALL ON DBMS FROM role_name).\n\nGrant ROLE MANAGEMENT privilege to manage roles to the specified role.\n\nGrant USER MANAGEMENT privilege to manage users to the specified role.\n\nGrant ALTER USER privilege to alter users to the specified role.\n\nGrant DATABASE MANAGEMENT privilege to manage databases to the specified role.\n\nGrant all privileges to manage composite databases to the specified role.\n\nGrant ALIAS MANAGEMENT privilege to manage aliases to the specified role.\n\nGrant ROLE MANAGEMENT privilege to manage roles to the specified role.\n\nGrant PRIVILEGE MANAGEMENT privilege to manage privileges for the Neo4j DBMS to the specified role."
    }
}