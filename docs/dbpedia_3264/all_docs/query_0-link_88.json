{
    "id": "dbpedia_3264_0",
    "rank": 88,
    "data": {
        "url": "https://documentation.suse.com/sles/15-SP6/html/SLES-all/cha-network.html",
        "read_more_link": "",
        "language": "en",
        "title": "Administration Guide",
        "top_image": "https://documentation.suse.com/sles/15-SP6/html/SLES-all/https://documentation.suse.com/sles/15-SP6/html/SLES-all/document.jpg",
        "meta_img": "https://documentation.suse.com/sles/15-SP6/html/SLES-all/https://documentation.suse.com/sles/15-SP6/html/SLES-all/document.jpg",
        "images": [
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/logo.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/images/net_basic_osi.png",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/images/net_basic_tcppacket.png",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-important.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-tip.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/images/yast2_net_icard.png",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-tip.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-warning.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-warning.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/images/wicked_scheme.png",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-tip.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-tip.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-tip.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-note.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/images/bond_configuration.png",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-tip.svg",
            "https://documentation.suse.com/sles/15-SP6/html/SLES-all/static/images/icon-important.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "SUSE Product &amp; Solution Documentation Team"
        ],
        "publish_date": "2024-06-26T00:00:00+02:00",
        "summary": "",
        "meta_description": "Linux offers the necessary networking tools and features for integration into all types of network structures. Networâ¦",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://documentation.suse.com/en-us/sles/15-SP6/html/SLES-all/cha-network.html",
        "text": "Linux and other Unix operating systems use the TCP/IP protocol. It is not a single network protocol, but a family of network protocols that offer multiple services. The protocols listed in Several protocols in the TCP/IP protocol family are provided for exchanging data between two machines via TCP/IP. Networks combined by TCP/IP, comprising a worldwide network, are also called âthe Internet.â\n\nRFC stands for Request for Comments. RFCs are documents that describe Internet protocols and implementation procedures for the operating system and its applications. The RFC documents describe the setup of Internet protocols. For more information about RFCs, see https://datatracker.ietf.org/.\n\nAs shown in FigureÂ 23.1, âSimplified layer model for TCP/IPâ, data exchange takes place in different layers. The actual network layer is the insecure data transfer via IP (Internet protocol). On top of IP, TCP (transmission control protocol) guarantees, to a certain extent, security of the data transfer. The IP layer is supported by the underlying hardware-dependent protocol, such as Ethernet.\n\nThe diagram provides one or two examples for each layer. The layers are ordered according to abstraction levels. The lowest layer is close to the hardware. The uppermost layer, however, is almost a complete abstraction from the hardware. Every layer has its own special function. The special functions of each layer are implicit in their description. The data link and physical layers represent the physical network used, such as Ethernet.\n\nAlmost all hardware protocols work on a packet-oriented basis. The data to transmit is collected into packets (it cannot be sent all at once). The maximum size of a TCP/IP packet is approximately 64Â KB. Packets are normally small, as the network hardware can be a limiting factor. The maximum size of a data packet on Ethernet is about fifteen hundred bytes. The size of a TCP/IP packet is limited to this amount when the data is sent over Ethernet. If more data is transferred, more data packets need to be sent by the operating system.\n\nFor the layers to serve their designated functions, additional information regarding each layer must be saved in the data packet. This takes place in the header of the packet. Every layer attaches a small block of data, called the protocol header, to the front of each emerging packet. A sample TCP/IP data packet traveling over an Ethernet cable is illustrated in FigureÂ 23.2, âTCP/IP Ethernet packetâ. The proof sum is located at the end of the packet, not at the beginning. This simplifies things for the network hardware.\n\nWhen an application sends data over the network, the data passes through each layer, all implemented in the Linux kernel except the physical layer. Each layer handles preparing the data so it can be passed to the next layer. The lowest layer is ultimately responsible for sending the data. The entire procedure is reversed when data is received. Like the layers of an onion, in each layer the protocol headers are removed from the transported data. Finally, the transport layer handles making the data available for use by the applications at the destination. In this manner, one layer only communicates with the layer directly above or below it. For applications, it is irrelevant whether data is transmitted via a wireless or wired connection. Likewise, it is irrelevant for the data line which kind of data is transmitted, if packets are in the correct format.\n\n23.1 IP addresses and routing #\n\nThe discussion in this section is limited to IPv4 networks. For information about IPv6 protocol, the successor to IPv4, refer to SectionÂ 23.2, âIPv6âthe next generation Internetâ.\n\n23.1.1 IP addresses #\n\nEvery computer on the Internet has a unique 32-bit address. These 32Â bits (or 4Â bytes) are normally written as illustrated in the second row in ExampleÂ 23.1, âWriting IP addressesâ.\n\nExampleÂ 23.1: Writing IP addresses #\n\nIP Address (binary): 11000000 10101000 00000000 00010100 IP Address (decimal): 192. 168. 0. 20\n\nIn decimal form, the four bytes are written in the decimal number system, separated by periods. The IP address is assigned to a host or a network interface. It can be used only once throughout the world. There are exceptions to this rule, but these are not relevant to the following passages.\n\nThe points in IP addresses indicate the hierarchical system. Until the 1990s, IP addresses were strictly categorized in classes. However, this system proved too inflexible and was discontinued. Now, classless routing (CIDR, classless interdomain routing) is used.\n\n23.1.2 Netmasks and routing #\n\nNetmasks are used to define the address range of a subnet. If two hosts are in the same subnet, they can reach each other directly. If they are not in the same subnet, they need the address of a gateway that handles all the traffic for the subnet. To check if two IP addresses are in the same subnet, simply âANDâ both addresses with the netmask. If the result is identical, both IP addresses are in the same local network. If there are differences, the remote IP address, and thus the remote interface, can only be reached over a gateway.\n\nTo understand how the netmask works, look at ExampleÂ 23.2, âLinking IP addresses to the netmaskâ. The netmask consists of 32Â bits that identify how much of an IP address belongs to the network. All those bits that are 1 mark the corresponding bit in the IP address as belonging to the network. All bits that are 0 mark bits inside the subnet. This means that the more bits are 1, the smaller the subnet is. Because the netmask always consists of several successive 1 bits, it is also possible to count the number of bits in the netmask. In ExampleÂ 23.2, âLinking IP addresses to the netmaskâ the first net with 24Â bits could also be written as 192.168.0.0/24.\n\nExampleÂ 23.2: Linking IP addresses to the netmask #\n\nIP address (192.168.0.20): 11000000 10101000 00000000 00010100 Netmask (255.255.255.0): 11111111 11111111 11111111 00000000 --------------------------------------------------------------- Result of the link: 11000000 10101000 00000000 00000000 In the decimal system: 192. 168. 0. 0 IP address (213.95.15.200): 11010101 10111111 00001111 11001000 Netmask (255.255.255.0): 11111111 11111111 11111111 00000000 --------------------------------------------------------------- Result of the link: 11010101 10111111 00001111 00000000 In the decimal system: 213. 95. 15. 0\n\nTo give another example: all machines connected with the same Ethernet cable are normally located in the same subnet and are directly accessible. Even when the subnet is physically divided by switches or bridges, these hosts can still be reached directly.\n\nIP addresses outside the local subnet can only be reached if a gateway is configured for the target network. In the most common case, there is only one gateway that handles all traffic that is external. However, it is also possible to configure several gateways for different subnets.\n\nIf a gateway has been configured, all external IP packets are sent to the appropriate gateway. This gateway then attempts to forward the packets in the same mannerâfrom host to hostâuntil it reaches the destination host or the packet's TTL (time to live) expires.\n\nBase Network Address\n\nThis is the netmask AND any address in the network, as shown in ExampleÂ 23.2, âLinking IP addresses to the netmaskâ under Result. This address cannot be assigned to any hosts.\n\nBroadcast Address\n\nThis could be paraphrased as: âAccess all hosts in this subnet.â To generate this, the netmask is inverted in binary form and linked to the base network address with a logical OR. The above example therefore results in 192.168.0.255. This address cannot be assigned to any hosts.\n\nLocal Host\n\nThe address 127.0.0.1 is assigned to the âloopback deviceâ on each host. A connection can be set up to your own machine with this address and with all addresses from the complete 127.0.0.0/8 loopback network as defined with IPv4. With IPv6 there is only one loopback address (::1).\n\nBecause IP addresses must be unique all over the world, you cannot select random addresses. There are three address domains to use to set up a private IP-based network. These cannot get any connection from the rest of the Internet, because they cannot be transmitted over the Internet. These address domains are specified in RFCÂ 1597 and listed in TableÂ 23.1, âPrivate IP address domainsâ.\n\nTableÂ 23.1: Private IP address domains #\n\nNetwork/Netmask\n\nDomain\n\n23.2 IPv6âthe next generation Internet #\n\nImportant: IBMÂ Z: IPv6 support\n\nIPv6 is not supported by the CTC and IUCV network connections of the IBMÂ Z hardware.\n\nBecause of the emergence of the World Wide Web (WWW), the Internet has experienced explosive growth, with an increasing number of computers communicating via TCP/IP in the past fifteen years. Since Tim Berners-Lee at CERN (https://public.web.cern.ch) invented the WWW in 1990, the number of Internet hosts has grown from a few thousand to about a hundred million.\n\nAs mentioned, an IPv4 address consists of only 32Â bits. Also, a few IP addresses are lostâthey cannot be used because of the way networks are organized. The number of addresses available in your subnet is two to the power of the number of bits, minus two. A subnet has, for example, 2, 6 or 14Â addresses available. To connect 128 hosts to the Internet, for example, you need a subnet with 256 IP addresses, from which only 254 are usable, because two IP addresses are needed for the structure of the subnet itself: the broadcast and the base network address.\n\nUnder the current IPv4 protocol, DHCP or NAT (network address translation) are the typical mechanisms used to circumvent the potential address shortage. Combined with the convention to keep private and public address spaces separate, these methods can certainly mitigate the shortage. To set up a host in an IPv4 network, you need several address items, such as the host's own IP address, the subnetmask, the gateway address, and maybe a name server address. All these items need to be known and cannot be derived from somewhere else.\n\nWith IPv6, both the address shortage and the complicated configuration should be a thing of the past. The following sections tell more about the improvements and benefits brought by IPv6 and about the transition from the old protocol to the new one.\n\n23.2.1 Advantages #\n\nThe most important and most visible improvement brought by the IPv6 protocol is the enormous expansion of the available address space. An IPv6 address is made up of 128Â bit values instead of the traditional 32Â bits. This provides for as many as several quadrillion IP addresses.\n\nHowever, IPv6 addresses are not only different from their predecessors with regard to their length. They also have a different internal structure that may contain more specific information about the systems and the networks to which they belong. More details about this are found in SectionÂ 23.2.2, âAddress types and structureâ.\n\nThe following is a list of other advantages of the IPv6 protocol:\n\nAutoconfiguration\n\nIPv6 makes the network âplug and playâ capable, which means that a newly configured system integrates into the (local) network without any manual configuration. The new host uses its automatic configuration mechanism to derive its own address from the information made available by the neighboring routers, relying on a protocol called the neighbor discovery (ND) protocol. This method does not require any intervention on the administrator's part and there is no need to maintain a central server for address allocationâan additional advantage over IPv4, where automatic address allocation requires a DHCP server.\n\nNevertheless if a router is connected to a switch, the router should send periodic advertisements with flags telling the hosts of a network how they should interact with each other. For more information, see RFCÂ 2462 and the radvd.conf(5) man page, and RFCÂ 3315.\n\nMobility\n\nIPv6 makes it possible to assign several addresses to one network interface at the same time. This allows users to access several networks easily, something that could be compared with the international roaming services offered by mobile phone companies. When you take your mobile phone abroad, the phone automatically logs in to a foreign service when it enters the corresponding area, so you can be reached under the same number everywhere and can place an outgoing call, as you would in your home area.\n\nSecure communication\n\nWith IPv4, network security is an add-on function. IPv6 includes IPsec as one of its core features, allowing systems to communicate over a secure tunnel to avoid eavesdropping by outsiders on the Internet.\n\nBackward compatibility\n\nRealistically, it would be impossible to switch the entire Internet from IPv4 to IPv6 at one time. Therefore, it is crucial that both protocols can coexist not only on the Internet, but also on one system. This is ensured by compatible addresses (IPv4 addresses can easily be translated into IPv6 addresses) and by using several tunnels. See SectionÂ 23.2.3, âCoexistence of IPv4 and IPv6â. Also, systems can rely on a dual stack IP technique to support both protocols at the same time, meaning that they have two network stacks that are separate, such that there is no interference between the two protocol versions.\n\nCustom tailored services through multicasting\n\nWith IPv4, certain services, such as SMB, need to broadcast their packets to all hosts in the local network. IPv6 allows a much more fine-grained approach by enabling servers to address hosts through multicasting, that is by addressing several hosts as parts of a group. This is different from addressing all hosts through broadcasting or each host individually through unicasting. Which hosts are addressed as a group may depend on the concrete application. There are specific predefined groups to address all name servers (the all name servers multicast group), for example, or all routers (the all routers multicast group).\n\n23.2.2 Address types and structure #\n\nAs mentioned, the current IP protocol has two major limitations: there is an increasing shortage of IP addresses and configuring the network and maintaining the routing tables is becoming a more complex and burdensome task. IPv6 solves the first problem by expanding the address space to 128Â bits. The second one is mitigated by introducing a hierarchical address structure combined with sophisticated techniques to allocate network addresses, and multihoming (the ability to assign several addresses to one device, giving access to several networks).\n\nWhen dealing with IPv6, it is useful to know about three different types of addresses:\n\nUnicast\n\nAddresses of this type are associated with exactly one network interface. Packets with such an address are delivered to only one destination. Accordingly, unicast addresses are used to transfer packets to individual hosts on the local network or the Internet.\n\nMulticast\n\nAddresses of this type relate to a group of network interfaces. Packets with such an address are delivered to all destinations that belong to the group. Multicast addresses are mainly used by certain network services to communicate with certain groups of hosts in a well-directed manner.\n\nAnycast\n\nAddresses of this type are related to a group of interfaces. Packets with such an address are delivered to the member of the group that is closest to the sender, according to the principles of the underlying routing protocol. Anycast addresses are used to make it easier for hosts to find out about servers offering certain services in the given network area. All servers of the same type have the same anycast address. Whenever a host requests a service, it receives a reply from the server with the closest location, as determined by the routing protocol. If this server should fail, the protocol automatically selects the second closest server, then the third one, and so forth.\n\nAn IPv6 address is made up of eight four-digit fields, each representing 16 bits, written in hexadecimal notation. They are separated by colons (:). Any leading zero bytes within a given field may be dropped, but zeros within the field or at its end may not. Another convention is that more than four consecutive zero bytes may be collapsed into a double colon. However, only one such :: is allowed per address. This kind of shorthand notation is shown in ExampleÂ 23.3, âSample IPv6 addressâ, where all three lines represent the same address.\n\nExampleÂ 23.3: Sample IPv6 address #\n\nfe80 : 0000 : 0000 : 0000 : 0000 : 10 : 1000 : 1a4 fe80 : 0 : 0 : 0 : 0 : 10 : 1000 : 1a4 fe80 : : 10 : 1000 : 1a4\n\nEach part of an IPv6 address has a defined function. The first bytes form the prefix and specify the type of address. The center part is the network portion of the address, but it may be unused. The end of the address forms the host part. With IPv6, the netmask is defined by indicating the length of the prefix after a slash at the end of the address. An address, as shown in ExampleÂ 23.4, âIPv6 address specifying the prefix lengthâ, contains the information that the first 64 bits form the network part of the address and the last 64 form its host part. In other words, the 64 means that the netmask is filled with 64 1-bit values from the left. As with IPv4, the IP address is combined with AND with the values from the netmask to determine whether the host is located in the same subnet or in another one.\n\nExampleÂ 23.4: IPv6 address specifying the prefix length #\n\nfe80::10:1000:1a4/64\n\nIPv6 knows about several predefined types of prefixes. Certain are shown in IPv6 prefixes.\n\n00\n\nIPv4 addresses and IPv4 over IPv6 compatibility addresses. These are used to maintain compatibility with IPv4. Their use still requires a router able to translate IPv6 packets into IPv4 packets. Several special addresses, such as the one for the loopback device, have this prefix as well.\n\n2 or 3 as the first digit\n\nAggregatable global unicast addresses. As is the case with IPv4, an interface can be assigned to form part of a certain subnet. Currently, there are the following address spaces: 2001::/16 (production quality address space) and 2002::/16 (6to4 address space).\n\nfe80::/10\n\nLink-local addresses. Addresses with this prefix should not be routed and should therefore only be reachable from within the same subnet.\n\nfec0::/10\n\nSite-local addresses. These may be routed, but only within the network of the organization to which they belong. In effect, they are the IPv6 equivalent of the current private network address space, such as 10.x.x.x.\n\nff\n\nThese are multicast addresses.\n\nA unicast address consists of three basic components:\n\nPublic topology\n\nThe first part (which also contains one of the prefixes mentioned above) is used to route packets through the public Internet. It includes information about the company or institution that provides the Internet access.\n\nSite topology\n\nThe second part contains routing information about the subnet to which to deliver the packet.\n\nInterface ID\n\nThe third part identifies the interface to which to deliver the packet. This also allows for the MAC to form part of the address. Given that the MAC is a globally unique, fixed identifier coded into the device by the hardware maker, the configuration procedure is simplified. In fact, the first 64 address bits are consolidated to form the EUI-64 token, with the last 48 bits taken from the MAC, and the remaining 24 bits containing special information about the token type. This also makes it possible to assign an EUI-64 token to interfaces that do not have a MAC, such as those based on point-to-point protocol (PPP).\n\nOn top of this basic structure, IPv6 distinguishes between five different types of unicast addresses:\n\n:: (unspecified)\n\nThis address is used by the host as its source address when the interface is initialized for the first time (at which point, the address cannot yet be determined by other means).\n\n::1 (loopback)\n\nThe address of the loopback device.\n\nIPv4 compatible addresses\n\nThe IPv6 address is formed by the IPv4 address and a prefix consisting of 96 zero bits. This type of compatibility address is used for tunneling (see SectionÂ 23.2.3, âCoexistence of IPv4 and IPv6â) to allow IPv4 and IPv6 hosts to communicate with others operating in a pure IPv4 environment.\n\nIPv4 addresses mapped to IPv6\n\nThis type of address specifies a pure IPv4 address in IPv6 notation.\n\nLocal addresses\n\nThere are two address types for local use:\n\nlink-local\n\nThis type of address can only be used in the local subnet. Packets with a source or target address of this type should not be routed to the Internet or other subnets. These addresses contain a special prefix (fe80::/10) and the interface ID of the network card, with the middle part consisting of zero bytes. Addresses of this type are used during automatic configuration to communicate with other hosts belonging to the same subnet.\n\nsite-local\n\nPackets with this type of address may be routed to other subnets, but not to the wider Internetâthey must remain inside the organization's own network. Such addresses are used for intranets and are an equivalent of the private address space defined by IPv4. They contain a special prefix (fec0::/10), the interface ID, and a 16-bit field specifying the subnet ID. Again, the rest is filled with zero bytes.\n\nAs a new feature introduced with IPv6, each network interface normally gets several IP addresses, with the advantage that several networks can be accessed through the same interface. One of these networks can be configured automatically using the MAC and a known prefix with the result that all hosts on the local network can be reached when IPv6 is enabled (using the link-local address). With the MAC forming part of it, any IP address used in the world is unique. The only variable parts of the address are those specifying the site topology and the public topology, depending on the actual network in which the host is currently operating.\n\nFor a host to go back and forth between different networks, it needs at least two addresses. One of them, the home address, not only contains the interface ID but also an identifier of the home network to which it normally belongs (and the corresponding prefix). The home address is a static address and, as such, it does not normally change. Still, all packets destined to the mobile host can be delivered to it, regardless of whether it operates in the home network or somewhere outside. This is made possible by new features introduced with IPv6, such as stateless autoconfiguration and neighbor discovery. In addition to its home address, a mobile host gets one or more additional addresses that belong to the foreign networks where it is roaming. These are called care-of addresses. The home network has a facility that forwards any packets destined to the host when it is roaming outside. In an IPv6 environment, this task is performed by the home agent, which takes all packets destined to the home address and relays them through a tunnel. Those packets destined to the care-of address are directly transferred to the mobile host without any special detours.\n\n23.2.3 Coexistence of IPv4 and IPv6 #\n\nThe migration of all hosts connected to the Internet from IPv4 to IPv6 is a gradual process. Both protocols can coexist for a certain time to come. The coexistence on one system is guaranteed where there is a dual stack implementation of both protocols. That still leaves the question of how an IPv6 enabled host should communicate with an IPv4 host and how IPv6 packets should be transported by the current networks, which are predominantly IPv4-based. The best solutions offer tunneling and compatibility addresses (see SectionÂ 23.2.2, âAddress types and structureâ).\n\nIPv6 hosts that are isolated in the (worldwide) IPv4 network can communicate through tunnels: IPv6 packets are encapsulated as IPv4 packets to move them across an IPv4 network. Such a connection between two IPv4 hosts is called a tunnel. To achieve this, packets must include the IPv6 destination address (or the corresponding prefix) and the IPv4 address of the remote host at the receiving end of the tunnel. A basic tunnel can be configured manually according to an agreement between the hosts' administrators. This is also called static tunneling.\n\nHowever, the configuration and maintenance of static tunnels is often too labor-intensive to use them for daily communication needs. Therefore, IPv6 provides for three different methods of dynamic tunneling:\n\n6over4\n\nIPv6 packets are automatically encapsulated as IPv4 packets and sent over an IPv4 network capable of multicasting. IPv6 is tricked into seeing the whole network (Internet) as a local area network (LAN). This makes it possible to determine the receiving end of the IPv4 tunnel automatically. However, this method does not scale well and is also hampered because IP multicasting is far from widespread on the Internet. Therefore, it only provides a solution for smaller corporate or institutional networks where multicasting can be enabled. The specifications for this method are laid down in RFC 2529.\n\n6to4\n\nWith this method, IPv4 addresses are automatically generated from IPv6 addresses, enabling isolated IPv6 hosts to communicate over an IPv4 network. However, several problems have been reported regarding the communication between those isolated IPv6 hosts and the Internet. The method is described in RFC 3056.\n\nIPv6 tunnel broker\n\nThis method relies on special servers that provide dedicated tunnels for IPv6 hosts. It is described in RFC 3053.\n\n23.2.4 Configuring IPv6 #\n\nTo configure IPv6, you normally do not need to make any changes on the individual workstations. IPv6 is enabled by default. To disable or enable IPv6 on an installed system, use the YaST Network Settings module. On the Global Options tab, select or deselect the Enable IPv6 option as necessary. To enable it temporarily until the next reboot, enter modprobe -i ipv6 as root. It is impossible to unload the IPv6 module after it has been loaded.\n\nBecause of the autoconfiguration concept of IPv6, the network card is assigned an address in the link-local network. Normally, no routing table management takes place on a workstation. The network routers can be queried by the workstation, using the router advertisement protocol, for what prefix and gateways should be implemented. The radvd program can be used to set up an IPv6 router. This program informs the workstations which prefix to use for the IPv6 addresses and which routers. Alternatively, use FRR (see https://frrouting.org/) for automatic configuration of both addresses and routing.\n\nFor information about how to set up multiple types of tunnels using the /etc/sysconfig/network files, see the man page of ifcfg-tunnel (man ifcfg-tunnel).\n\n23.2.5 More information #\n\nThe above overview does not cover the topic of IPv6 comprehensively. For a more in-depth look at the newer protocol, refer to the following online documentation and books:\n\nhttps://pulse.internetsociety.org\n\nThe starting point for everything about IPv6.\n\nhttp://www.ipv6day.org\n\nAll information needed to start your own IPv6 network.\n\nhttp://www.ipv6-to-standard.org/\n\nThe list of IPv6-enabled products.\n\nhttps://www.bieringer.de/linux/IPv6/\n\nThe Linux IPv6-HOWTO and many links related to the topic.\n\nRFC 2460\n\nThe fundamental RFC about IPv6, see https://www.rfc-editor.org/rfc/rfc2460.\n\nIPv6 essentials\n\nA book describing all the important aspects of the topic is IPv6 Essentials by Silvia Hagen (ISBN 0-596-00125-8).\n\n23.3 Name resolution #\n\nDNS assists in assigning an IP address to one or more names and assigning a name to an IP address. In Linux, this conversion is normally carried out by a special type of software known as bind. The machine that takes care of this conversion is called a name server. The names make up a hierarchical system in which each name component is separated by a period. The name hierarchy is, however, independent of the IP address hierarchy described above.\n\nConsider a complete name, such as jupiter.example.com, written in the format hostname.domain. A full name, called a fully qualified domain name (FQDN), consists of a host name and a domain name (example.com). The latter also includes the top level domain or TLD (com).\n\nTLD assignment has become confusing for historical reasons. Traditionally, three-letter domain names are used in the USA. In the rest of the world, the two-letter ISO national codes are the standard. Additionally, longer TLDs were introduced in 2000 that represent certain spheres of activity (for example, .info, .name, .museum).\n\nIn the early days of the Internet (before 1990), the file /etc/hosts was used to store the names of all the machines represented over the Internet. This quickly proved to be impractical in the face of the rapidly growing number of computers connected to the Internet. For this reason, a decentralized database was developed to store the host names in a widely distributed manner. This database, similar to the name server, does not have the data pertaining to all hosts in the Internet available, but can dispatch requests to other name servers.\n\nThe top of the hierarchy is occupied by root name servers. These root name servers manage the top level domains and are run by the Network Information Center (NIC). Each root name server knows about the name servers responsible for a given top level domain. Information about top level domain NICs is available at https://www.internic.net.\n\nDNS can do more than resolve host names. The name server also knows which host is receiving e-mails for an entire domainâthe mail exchanger (MX).\n\nFor your machine to resolve an IP address, it must know about at least one name server and its IP address. Easily specify such a name server using YaST. The configuration of name server access with SUSEÂ® Linux Enterprise Server is described in SectionÂ 23.4.1.4, âConfiguring host name and DNSâ. Setting up your own name server is described in ChapterÂ 39, The domain name system.\n\nThe protocol whois is closely related to DNS. With this program, quickly find out who accounts for a given domain.\n\nNote: MDNS and .local domain names\n\nThe .local top level domain is treated as link-local domain by the resolver. DNS requests are sent as multicast DNS requests instead of normal DNS requests. If you already use the .local domain in your name server configuration, you must switch this option off in /etc/host.conf. For more information, see the host.conf man page.\n\nTo switch off MDNS during installation, use nomdns=1 as a boot parameter.\n\nFor more information on multicast DNS, see http://www.multicastdns.org.\n\n23.4 Configuring a network connection with YaST #\n\nThere are many supported networking types on Linux. Most of them use different device names and the configuration files are spread over several locations in the file system. For a detailed overview of the aspects of manual network configuration, see SectionÂ 23.5, âConfiguring a network connection manuallyâ.\n\nAll network interfaces with link up (with a network cable connected) are automatically configured. Additional hardware can be configured any time on the installed system. The following sections describe the network configuration for all types of network connections supported by SUSE Linux Enterprise Server.\n\nTip: IBMÂ Z: hotpluggable network cards\n\nOn IBMÂ Z platforms, hotpluggable network cards are supported, but not their automatic network integration via DHCP (as is the case on the PC). After they have been detected, you need to manually configure the interface.\n\n23.4.1 Configuring the network card with YaST #\n\nTo configure your Ethernet or Wi-Fi/Bluetooth card in YaST, select SystemÂ âºÂ Network Settings. After starting the module, YaST displays the Network Settings dialog with four tabs: Global Options, Overview, Hostname/DNS and Routing.\n\nThe Global Options tab allows you to set general networking options such as the network setup method, IPv6, and general DHCP options. For more information, see SectionÂ 23.4.1.1, âConfiguring global networking optionsâ.\n\nThe Overview tab contains information about installed network interfaces and configurations. Any properly detected network card is listed with its name. You can manually configure new cards, remove or change their configuration in this dialog. To manually configure a card that was not automatically detected, see SectionÂ 23.4.1.3, âConfiguring an undetected network cardâ. To change the configuration of an already configured card, see SectionÂ 23.4.1.2, âChanging the configuration of a network cardâ.\n\nThe Hostname/DNS tab allows to set the host name of the machine and name the servers to be used. For more information, see SectionÂ 23.4.1.4, âConfiguring host name and DNSâ.\n\nThe Routing tab is used for the configuration of routing. See SectionÂ 23.4.1.5, âConfiguring routingâ for more information.\n\nFigureÂ 23.3: Configuring network settings #\n\n23.4.1.1 Configuring global networking options #\n\nThe Global Options tab of the YaST Network Settings module allows you to set important global networking options, such as the use of NetworkManager, IPv6 and DHCP client options. These settings are applicable for all network interfaces.\n\nNote: NetworkManager provided by workstation extension\n\nNetworkManager is now provided by the SUSE Linux Enterprise Workstation Extension. To install NetworkManager, activate the Workstation Extension repository, and select the NetworkManager packages.\n\nIn the Network Setup Method choose the way network connections are managed. If you want a NetworkManager desktop applet to manage connections for all interfaces, choose NetworkManager Service. NetworkManager is well suited for switching between multiple wired and wireless networks. If you do not run a desktop environment, or if your computer is a Xen server, virtual system, or provides network services such as DHCP or DNS in your network, use the Wicked Service method. If NetworkManager is used, nm-applet should be used to configure network options and the Overview, Hostname/DNS and Routing tabs of the Network Settings module are disabled. For more information on NetworkManager, see the SUSE Linux Enterprise Desktop documentation.\n\nIn the IPv6 Protocol Settings choose whether to use the IPv6 protocol. It is possible to use IPv6 together with IPv4. By default, IPv6 is enabled. However, in networks not using IPv6 protocol, response times can be faster with IPv6 protocol disabled. To disable IPv6, deactivate Enable IPv6. If IPv6 is disabled, the kernel no longer loads the IPv6 module automatically. This setting will be applied after reboot.\n\nIn the DHCP Client Options configure options for the DHCP client. The DHCP Client Identifier must be different for each DHCP client on a single network. If left empty, it defaults to the hardware address of the network interface. However, if you are running several virtual machines using the same network interface and, therefore, the same hardware address, specify a unique free-form identifier here.\n\nThe Hostname to Send specifies a string used for the host name option field when the DHCP client sends messages to DHCP server. Some DHCP servers update name server zones (forward and reverse records) according to this host name (Dynamic DNS). Also, some DHCP servers require the Hostname to Send option field to contain a specific string in the DHCP messages from clients. Leave AUTO to send the current host name (that is the one defined in /etc/HOSTNAME). Make the option field empty for not sending any host name.\n\nIf you do not want to change the default route according to the information from DHCP, deactivate Change Default Route via DHCP.\n\n23.4.1.2 Changing the configuration of a network card #\n\nTo change the configuration of a network card, select a card from the list of the detected cards in Network SettingsÂ âºÂ Overview in YaST and click Edit. The Network Card Setup dialog appears in which to adjust the card configuration using the General, Address and Hardware tabs.\n\n23.4.1.2.1 Configuring IP addresses #\n\nYou can set the IP address of the network card or the way its IP address is determined in the Address tab of the Network Card Setup dialog. Both IPv4 and IPv6 addresses are supported. The network card can have No IP Address (which is useful for bonding devices), a Statically Assigned IP Address (IPv4 or IPv6) or a Dynamic Address assigned via DHCP or Zeroconf or both.\n\nIf using Dynamic Address, select whether to use DHCP Version 4 Only (for IPv4), DHCP Version 6 Only (for IPv6) or DHCP Both Version 4 and 6.\n\nIf possible, the first network card with link that is available during the installation is automatically configured to use automatic address setup via DHCP.\n\nNote: IBMÂ Z and DHCP\n\nOn IBMÂ Z platforms, DHCP-based address configuration is only supported with network cards that have a MAC address. This is only the case with OSA and OSA Express cards.\n\nDHCP should also be used if you are using a DSL line but with no static IP assigned by the ISP (Internet Service Provider). If you decide to use DHCP, configure the details in DHCP Client Options in the Global Options tab of the Network Settings dialog of the YaST network card configuration module. If you have a virtual host setup where different hosts communicate through the same interface, an DHCP Client Identifier is necessary to distinguish them.\n\nDHCP is a good choice for client configuration but it is not ideal for server configuration. To set a static IP address, proceed as follows:\n\nSelect a card from the list of detected cards in the Overview tab of the YaST network card configuration module and click Edit.\n\nIn the Address tab, choose Statically Assigned IP Address.\n\nEnter the IP Address. Both IPv4 and IPv6 addresses can be used. Enter the network mask in Subnet Mask. If the IPv6 address is used, use Subnet Mask for prefix length in format /64.\n\nOptionally, you can enter a fully qualified Hostname for this address, which will be written to the /etc/hosts configuration file.\n\nClick Next.\n\nTo activate the configuration, click OK.\n\nNote: Interface activation and link detection\n\nDuring activation of a network interface, wicked checks for a carrier and only applies the IP configuration when a link has been detected. If you need to apply the configuration regardless of the link status (for example, when you want to test a service listening to a certain address), you can skip link detection by adding the variable LINK_REQUIRED=no to the configuration file of the interface in /etc/sysconfig/network/ifcfg.\n\nAdditionally, you can use the variable LINK_READY_WAIT=5 to specify the timeout for waiting for a link in seconds.\n\nFor more information about the ifcfg-* configuration files, refer to SectionÂ 23.5.2.5, â/etc/sysconfig/network/ifcfg-*â and man 5 ifcfg.\n\nIf you use the static address, the name servers and default gateway are not configured automatically. To configure name servers, proceed as described in SectionÂ 23.4.1.4, âConfiguring host name and DNSâ. To configure a gateway, proceed as described in SectionÂ 23.4.1.5, âConfiguring routingâ.\n\n23.4.1.2.2 Configuring multiple addresses #\n\nA single network device can have multiple IP addresses called aliases or labels.\n\nNote: Aliases are a compatibility feature\n\nAliases or labels work with IPv4 only. Using iproute2 network interfaces makes it possible to have one or more addresses.\n\nTo set additional addresses for your network card using YaST, proceed as follows:\n\nSelect a card from the list of detected cards in the Overview tab of the YaST Network Settings dialog and click Edit.\n\nIn the AddressÂ âºÂ Additional Addresses tab, click Add.\n\nEnter IPv4 Address Label, IP Address, and Netmask. Note that IP aliases must be added with the /32 netmask. Do not include the interface name in the alias name.\n\nTo activate the configuration, confirm the settings.\n\n23.4.1.2.3 Changing the device name and udev rules #\n\nIt is possible to change the device name of the network card when it is used. It is also possible to determine whether the network card should be identified by udev via its hardware (MAC) address or via the bus ID. The latter option is preferable in large servers to simplify hotplugging of cards. To set these options with YaST, proceed as follows:\n\nSelect a card from the list of detected cards in the Overview tab of the YaST Network Settings dialog and click Edit.\n\nGo to the General tab. The current device name is shown in Udev Rules. Click Change.\n\nSelect whether udev should identify the card by its MAC Address or Bus ID. The current MAC address and bus ID of the card are shown in the dialog.\n\nTo change the device name, check the Change Device Name option and edit the name.\n\nTo activate the configuration, confirm the settings.\n\n23.4.1.2.4 Changing network card kernel driver #\n\nFor some network cards, several kernel drivers may be available. If the card is already configured, YaST allows you to select a kernel driver to be used from a list of available suitable drivers. It is also possible to specify options for the kernel driver. To set these options with YaST, proceed as follows:\n\nSelect a card from the list of detected cards in the Overview tab of the YaST Network Settings module and click Edit.\n\nGo to the Hardware tab.\n\nSelect the kernel driver to be used in Module Name. Enter any options for the selected driver in Options in the form = =VALUE. If more options are used, they should be space-separated.\n\nTo activate the configuration, confirm the settings.\n\n23.4.1.2.5 Activating the network device #\n\nIf you use the method with wicked, you can configure your device to either start during boot, on cable connection, on card detection, manually, or never. To change device start-up, proceed as follows:\n\nIn YaST select a card from the list of detected cards in SystemÂ âºÂ Network Settings and click Edit.\n\nIn the General tab, select the desired entry from Device Activation.\n\nChoose At Boot Time to start the device during the system boot. With On Cable Connection, the interface is watched for any existing physical connection. With On Hotplug, the interface is set when available. It is similar to the At Boot Time option, and only differs in that no error occurs if the interface is not present at boot time. Choose Manually to control the interface manually with ifup. Choose Never to not start the device. The On NFSroot is similar to At Boot Time, but the interface does not shut down with the systemctl stop network command; the network service also cares about the wicked service if wicked is active. Use this if you use an NFS or iSCSI root file system.\n\nTo activate the configuration, confirm the settings.\n\nTip: NFS as a root file system\n\nOn (diskless) systems where the root partition is mounted via network as an NFS share, you need to be careful when configuring the network device with which the NFS share is accessible.\n\nWhen shutting down or rebooting the system, the default processing order is to turn off network connections, then unmount the root partition. With NFS root, this order causes problems as the root partition cannot be cleanly unmounted as the network connection to the NFS share is already not activated. To prevent the system from deactivating the relevant network device, open the network device configuration tab as described in SectionÂ 23.4.1.2.5, âActivating the network deviceâ and choose On NFSroot in the Device Activation pane.\n\n23.4.1.2.6 Setting up maximum transfer unit size #\n\nYou can set a maximum transmission unit (MTU) for the interface. MTU refers to the largest allowed packet size in bytes. A higher MTU brings higher bandwidth efficiency. However, large packets can block up a slow interface for some time, increasing the lag for further packets.\n\nIn YaST select a card from the list of detected cards in SystemÂ âºÂ Network Settings and click Edit.\n\nIn the General tab, select the desired entry from the Set MTU list.\n\nTo activate the configuration, confirm the settings.\n\n23.4.1.2.7 PCIe multifunction devices #\n\nMultifunction devices that support LAN, iSCSI, and FCoE are supported. The YaST FCoE client (yast2 fcoe-client) shows the private flags in additional columns to allow the user to select the device meant for FCoE. The YaST network module (yast2 lan) excludes âstorage only devicesâ for network configuration.\n\nFor more information about FCoE, see SectionÂ 16.3, âManaging FCoE services with YaSTâ.\n\n23.4.1.2.8 Infiniband configuration for IP-over-InfiniBand (IPoIB) #\n\nIn YaST select the InfiniBand device in SystemÂ âºÂ Network Settings and click Edit.\n\nIn the General tab, select one of the IP-over-InfiniBand (IPoIB) modes: connected (default) or datagram.\n\nTo activate the configuration, confirm the settings.\n\nFor more information about InfiniBand, see /usr/src/linux/Documentation/infiniband/ipoib.txt.\n\n23.4.1.2.9 Configuring the firewall #\n\nWithout having to perform the detailed firewall setup as described in SectionÂ 23.4, âfirewalldâ, you can determine the basic firewall configuration for your device as part of the device setup. Proceed as follows:\n\nOpen the YaST SystemÂ âºÂ Network Settings module. In the Overview tab, select a card from the list of detected cards and click Edit.\n\nEnter the General tab of the Network Settings dialog.\n\nDetermine the Firewall Zone to which your interface should be assigned. The following options are available:\n\nFirewall disabled\n\nThis option is available only if the firewall is disabled and the firewall does not run. Only use this option if your machine is part of a greater network that is protected by an outer firewall.\n\nAutomatically assign zone\n\nThis option is available only if the firewall is enabled. The firewall is running and the interface is automatically assigned to a firewall zone. The zone which contains the keyword any or the external zone will be used for such an interface.\n\nInternal zone (unprotected)\n\nThe firewall is running, but does not enforce any rules to protect this interface. Use this option if your machine is part of a greater network that is protected by an outer firewall. It is also useful for the interfaces connected to the internal network, when the machine has more network interfaces.\n\nDemilitarized zone\n\nA demilitarized zone is an additional line of defense in front of an internal network and the (hostile) Internet. Hosts assigned to this zone can be reached from the internal network and from the Internet, but cannot access the internal network.\n\nExternal zone\n\nThe firewall is running on this interface and fully protects it against otherâpresumably hostileânetwork traffic. This is the default option.\n\nTo activate the configuration, confirm the settings.\n\n23.4.1.3 Configuring an undetected network card #\n\nIf a network card is not detected correctly, the card is not included in the list of detected cards. If you are sure that your system includes a driver for your card, you can configure it manually. You can also configure special network device types, such as bridge, bond, TUN or TAP. To configure an undetected network card (or a special device) proceed as follows:\n\nIn the SystemÂ âºÂ Network SettingsÂ âºÂ Overview dialog in YaST click Add.\n\nIn the Hardware dialog, set the Device Type of the interface from the available options and Configuration Name. If the network card is a USB device, activate the respective check box and exit this dialog with Next. Otherwise, you can define the kernel Module Name to be used for the card and its Options, if necessary.\n\nIn Ethtool Options, you can set ethtool options used by ifup for the interface. For information about available options, see the ethtool manual page.\n\nIf the option string starts with a - (for example, -K INTERFACE_NAME rx on), the second word in the string is replaced with the current interface name. Otherwise (for example, autoneg off speed 10) ifup adds -s INTERFACE_NAME to the beginning.\n\nClick Next.\n\nConfigure any needed options, such as the IP address, device activation or firewall zone for the interface in the General, Address, and Hardware tabs. For more information about the configuration options, see SectionÂ 23.4.1.2, âChanging the configuration of a network cardâ.\n\nIf you selected Wireless as the device type of the interface, configure the wireless connection in the next dialog.\n\nTo activate the new network configuration, confirm the settings.\n\n23.4.1.4 Configuring host name and DNS #\n\nIf you did not change the network configuration during installation and the Ethernet card was already available, a host name was automatically generated for your computer and DHCP was activated. The same applies to the name service information your host needs to integrate into a network environment. If DHCP is used for network address setup, the list of domain name servers is automatically filled with the appropriate data. If a static setup is preferred, set these values manually.\n\nTo change the name of your computer and adjust the name server search list, proceed as follows:\n\nGo to the Network SettingsÂ âºÂ Hostname/DNS tab in the System module in YaST.\n\nEnter the Hostname. Note that the host name is global and applies to all network interfaces.\n\nIf you are using DHCP to get an IP address, the host name of your computer will be automatically set by the DHCP server. You should disable this behavior if you connect to different networks, because they may assign different host names and changing the host name at runtime may confuse the graphical desktop. To disable using DHCP to get an IP address deactivate Change Hostname via DHCP.\n\nIn Modify DNS Configuration, select the way the DNS configuration (name servers, search list, the content of the /run/netconfig/resolv.conf file) is modified.\n\nIf the Use Default Policy option is selected, the configuration is handled by the netconfig script which merges the data defined statically (with YaST or in the configuration files) with data obtained dynamically (from the DHCP client or NetworkManager). This default policy is usually sufficient.\n\nIf the Only Manually option is selected, netconfig is not allowed to modify the /run/netconfig/resolv.conf file. However, this file can be edited manually.\n\nIf the Custom Policy option is selected, a Custom Policy Rule string defining the merge policy should be specified. The string consists of a comma-separated list of interface names to be considered a valid source of settings. Except for complete interface names, basic wild cards to match multiple interfaces are allowed, as well. For example, eth* ppp? will first target all eth and then all ppp0-ppp9 interfaces. There are two special policy values that indicate how to apply the static settings defined in the /etc/sysconfig/network/config file:\n\nSTATIC\n\nThe static settings need to be merged together with the dynamic settings.\n\nSTATIC_FALLBACK\n\nThe static settings are used only when no dynamic configuration is available.\n\nFor more information, see the man page of netconfig(8) (man 8 netconfig).\n\nEnter the Name Servers and fill in the Domain Search list. Name servers must be specified by IP addresses, such as 192.168.1.116, not by host names. Names specified in the Domain Search tab are domain names used for resolving host names without a specified domain. If more than one Domain Search is used, separate domains with commas or white space.\n\nTo activate the configuration, confirm the settings.\n\nIt is also possible to edit the host name using YaST from the command line. The changes made by YaST take effect immediately (which is not the case when editing the /etc/HOSTNAME file manually). To change the host name, use the following command:\n\n# yast dns edit hostname=HOSTNAME\n\nTo change the name servers, use the following commands:\n\n# yast dns edit nameserver1=192.168.1.116 # yast dns edit nameserver2=192.168.1.117 # yast dns edit nameserver3=192.168.1.118\n\n23.4.1.5 Configuring routing #\n\nTo make your machine communicate with other machines and other networks, routing information must be given to make network traffic take the correct path. If DHCP is used, this information is automatically provided. If a static setup is used, this data must be added manually.\n\nIn YaST go to Network SettingsÂ âºÂ Routing.\n\nEnter the IP address of the Default Gateway (IPv4 and IPv6 if necessary). The default gateway matches every possible destination, but if a routing table entry exists that matches the required address, this will be used instead of the default route via the Default Gateway.\n\nMore entries can be entered in the Routing Table. Enter the Destination network IP address, Gateway IP address and the Netmask. Select the Device through which the traffic to the defined network will be routed (the minus sign stands for any device). To omit any of these values, use the minus sign -. To enter a default gateway into the table, use default in the Destination field.\n\nNote: Route prioritization\n\nIf more default routes are used, it is possible to specify the metric option to determine which route has a higher priority. To specify the metric option, enter - metric NUMBER in Options. The lowest possible metric is 0. The route with the lowest metric has the highest priority and is used as default. If the network device is disconnected, its route will be removed and the next one will be used.\n\nIf the system is a router, enable IPv4 Forwarding and IPv6 Forwarding in the Network Settings as needed.\n\nTo activate the configuration, confirm the settings.\n\n23.4.2 IBMÂ Z: configuring network devices #\n\nSUSE Linux Enterprise Server for IBMÂ Z supports several types of network interfaces. YaST can be used to configure all of them.\n\n23.4.2.1 The qeth-hsi device #\n\nTo add a qeth-hsi (HiperSockets) interface to the installed system, start the SystemÂ âºÂ Network Settings module in YaST. Select one of the devices marked Hipersocket to use as the READ device address and click Edit. Enter the device numbers for the read, write and control channels (example device number format: 0.0.0800). Then click next. In the Network Address Setup dialog, specify the IP address and netmask for the new interface and leave the network configuration by clicking Next and OK.\n\n23.4.2.2 The qeth-ethernet device #\n\nTo add a qeth-ethernet (IBM OSA Express Ethernet Card) interface to the installed system, start the SystemÂ âºÂ Network Settings module in YaST. Select one of the devices marked IBM OSA Express Ethernet Card to use as the READ device address and click Edit. Enter a device number for the read, write and control channels (example device number format: 0.0.0700). Enter the needed port name, port number (if applicable) and some additional options, your IP address, and an appropriate netmask. Leave the network configuration with Next and OK.\n\n23.4.2.3 The ctc device #\n\nTo add a ctc (IBM parallel CTC Adapter) interface to the installed system, start the SystemÂ âºÂ Network Settings module in YaST. Select one of the devices marked IBM Parallel CTC Adapter to use as your read channel and click Configure. Choose the Device Settings that fit your devices (usually this would be Compatibility Mode). Specify both your IP address and the IP address of the remote partner. If needed, adjust the MTU size with AdvancedÂ âºÂ Detailed Settings. Leave the network configuration with Next and OK.\n\nWarning: CTC is no longer supported\n\nThe use of this interface is deprecated. This interface will not be supported in future versions of SUSE Linux Enterprise Server.\n\n23.4.2.4 The lcs device #\n\nTo add an lcs (IBM OSA-2 Adapter) interface to the installed system, start the SystemÂ âºÂ Network Settings module in YaST. Select one of the devices marked IBM OSA-2 Adapter and click Configure. Enter the needed port number, some additional options, your IP address and an appropriate netmask. Leave the network configuration with Next and OK.\n\n23.4.2.5 The IUCV device #\n\nTo add an iucv (IUCV) interface to the installed system, start the SystemÂ âºÂ Network Settings module in YaST. Select a device marked IUCV and click Edit. YaST prompts you for the name of your IUCV partner (Peer). Enter the name (this entry is case-sensitive) and select Next. Specify both the IP Address and the Remote IP Address of your partner. If needed, Set MTU size on General tab. Leave the network configuration with Next and OK.\n\nWarning: IUCV is no longer supported\n\nThe use of this interface is deprecated. This interface will not be supported in future versions of SUSE Linux Enterprise Server.\n\n23.5 Configuring a network connection manually #\n\nManual configuration of the network software should be the last alternative. Using YaST is recommended. However, this background information about the network configuration can also assist your work with YaST.\n\n23.5.1 The wicked network configuration #\n\nThe tool and library called wicked provides a new framework for network configuration.\n\nOne of the challenges with traditional network interface management is that different layers of network management get jumbled together into one single script, or at most two different scripts. These scripts interact with each other in a way that is not well defined. This leads to unpredictable issues, obscure constraints and conventions, etc. Several layers of special hacks for a variety of different scenarios increase the maintenance burden. Address configuration protocols are being used that are implemented via daemons like dhcpcd, which interact rather poorly with the rest of the infrastructure. Funky interface naming schemes that require heavy udev support are introduced to achieve persistent identification of interfaces.\n\nThe idea of wicked is to decompose the problem in several ways. None of them is entirely novel, but trying to put ideas from different projects together is hopefully going to create a better solution overall.\n\nOne approach is to use a client/server model. This allows wicked to define standardized facilities for things like address configuration that are well integrated with the overall framework. For example, using a specific address configuration, the administrator may request that an interface should be configured via DHCP or IPv4 zeroconf. In this case, the address configuration service simply obtains the lease from its server and passes it on to the wicked server process that installs the requested addresses and routes.\n\nThe other approach to decomposing the problem is to enforce the layering aspect. For any type of network interface, it is possible to define a dbus service that configures the network interface's device layerâa VLAN, a bridge, a bonding, or a paravirtualized device. Common functionality, such as address configuration, is implemented by joint services that are layered on top of these device specific services without having to implement them specifically.\n\nThe wicked framework implements these two aspects by using a variety of dbus services, which get attached to a network interface depending on its type. Here is a rough overview of the current object hierarchy in wicked.\n\nEach network interface is represented via a child object of /org/opensuse/Network/Interfaces. The name of the child object is given by its ifindex. For example, the loopback interface, which usually gets ifindex 1, is /org/opensuse/Network/Interfaces/1, the first Ethernet interface registered is /org/opensuse/Network/Interfaces/2.\n\nEach network interface has a âclassâ associated with it, which is used to select the dbus interfaces it supports. By default, each network interface is of class netif, and wickedd will automatically attach all interfaces compatible with this class. In the current implementation, this includes the following interfaces:\n\norg.opensuse.Network.Interface\n\nGeneric network interface functions, such as taking the link up or down, assigning an MTU, etc.\n\norg.opensuse.Network.Addrconf.ipv4.dhcp, org.opensuse.Network.Addrconf.ipv6.dhcp, org.opensuse.Network.Addrconf.ipv4.auto\n\nAddress configuration services for DHCP, IPv4 zeroconf, etc.\n\nBeyond this, network interfaces may require or offer special configuration mechanisms. For an Ethernet device, for example, you should be able to control the link speed, offloading of checksumming, etc. To achieve this, Ethernet devices have a class of their own, called netif-ethernet, which is a subclass of netif. As a consequence, the dbus interfaces assigned to an Ethernet interface include all the services listed above, plus the org.opensuse.Network.Ethernet service available only to objects belonging to the netif-ethernet class.\n\nSimilarly, there exist classes for interface types like bridges, VLANs, bonds, or infinibands.\n\nHow do you interact with an interface like VLAN (which is really a virtual network interface that sits on top of an Ethernet device) that needs to be created first? For this, wicked defines factory interfaces, such as org.opensuse.Network.VLAN.Factory. Such a factory interface offers a single function that lets you create an interface of the requested type. These factory interfaces are attached to the /org/opensuse/Network/Interfaces list node.\n\n23.5.1.1 wicked architecture and features #\n\nThe wicked service comprises several parts as depicted in FigureÂ 23.4, âwicked architectureâ.\n\nwicked currently supports the following:\n\nConfiguration file back-ends to parse SUSE style /etc/sysconfig/network files.\n\nAn internal configuration back-end to represent network interface configuration in XML.\n\nBring up and shutdown of ânormalâ network interfaces such as Ethernet or InfiniBand, VLAN, bridge, bonds, tun, tap, dummy, macvlan, macvtap, hsi, qeth, iucv, and wireless (currently limited to one wpa-psk/eap network) devices.\n\nA built-in DHCPv4 client and a built-in DHCPv6 client.\n\nThe nanny daemon (enabled by default) helps to automatically bring up configured interfaces when the device is available (interface hotplugging) and set up the IP configuration when a link (carrier) is detected. See SectionÂ 23.5.1.3, âNannyâ for more information.\n\nwicked was implemented as a group of DBus services that are integrated with systemd. So the usual systemctl commands will apply to wicked.\n\n23.5.1.2 Using wicked #\n\nOn SUSE Linux Enterprise, wicked runs by default. If you want to check what is currently enabled and whether it is running, call:\n\nsystemctl status network\n\nIf wicked is enabled, you will see something along these lines:\n\nwicked.service - wicked managed network interfaces Loaded: loaded (/usr/lib/systemd/system/wicked.service; enabled) ...\n\nIn case something different is running (for example, NetworkManager) and you want to switch to wicked, first stop what is running and then enable wicked:\n\nsystemctl is-active network && \\ systemctl stop network systemctl enable --force wicked\n\nThis enables the wicked services, creates the network.service to wicked.service alias link, and starts the network at the next boot.\n\nStarting the server process:\n\nsystemctl start wickedd\n\nThis starts wickedd (the main server) and associated supplicants:\n\n/usr/lib/wicked/bin/wickedd-auto4 --systemd --foreground /usr/lib/wicked/bin/wickedd-dhcp4 --systemd --foreground /usr/lib/wicked/bin/wickedd-dhcp6 --systemd --foreground /usr/sbin/wickedd --systemd --foreground /usr/sbin/wickedd-nanny --systemd --foreground\n\nThen bringing up the network:\n\nsystemctl start wicked\n\nAlternatively use the network.service alias:\n\nsystemctl start network\n\nThese commands are using the default or system configuration sources as defined in /etc/wicked/client.xml.\n\nTo enable debugging, set WICKED_DEBUG in /etc/sysconfig/network/config, for example:\n\nWICKED_DEBUG=\"all\"\n\nOr, to omit some:\n\nWICKED_DEBUG=\"all,-dbus,-objectmodel,-xpath,-xml\"\n\nUse the client utility to display interface information for all interfaces or the interface specified with IFNAME:\n\nwicked show all wicked show IFNAME\n\nIn XML output:\n\nwicked show-xml all wicked show-xml IFNAME\n\nBringing up one interface:\n\nwicked ifup eth0 wicked ifup wlan0 ...\n\nBecause there is no configuration source specified, the wicked client checks its default sources of configuration defined in /etc/wicked/client.xml:\n\nfirmware: iSCSI Boot Firmware Table (iBFT)\n\ncompat: ifcfg filesâimplemented for compatibility\n\nWhatever wicked gets from those sources for a given interface is applied. The intended order of importance is firmware, then compatâthis may be changed in the future.\n\nFor more information, see the wicked man page.\n\n23.5.1.3 Nanny #\n\nNanny is an event and policy driven daemon that is responsible for asynchronous or unsolicited scenarios such as hotplugging devices. Thus the nanny daemon helps with starting or restarting delayed or temporarily gone devices. Nanny monitors device and link changes, and integrates new devices defined by the current policy set. Nanny continues to set up even if ifup already exited because of specified timeout constraints.\n\nBy default, the nanny daemon is active on the system. It is enabled in the /etc/wicked/common.xml configuration file:\n\n<config> ... <use-nanny>true</use-nanny> </config>\n\nThis setting causes ifup and ifreload to apply a policy with the effective configuration to the nanny daemon; then, nanny configures wickedd and thus ensures hotplug support. It waits in the background for events or changes (such as new devices or carrier on).\n\n23.5.1.4 Bringing up multiple interfaces #\n\nFor bonds and bridges, it may make sense to define the entire device topology in one file (ifcfg-bondX), and bring it up in one go. wicked then can bring up the whole configuration if you specify the top level interface names (of the bridge or bond):\n\nwicked ifup br0\n\nThis command automatically sets up the bridge and its dependencies in the appropriate order without the need to list the dependencies (ports, etc.) separately.\n\nTo bring up multiple interfaces in one command:\n\nwicked ifup bond0 br0 br1 br2\n\nOr also all interfaces:\n\nwicked ifup all\n\n23.5.1.5 Using tunnels with Wicked #\n\nWhen you need to use tunnels with Wicked, the TUNNEL_DEVICE is used for this. It permits to specify an optional device name to bind the tunnel to the device. The tunneled packets will only be routed via this device.\n\nFor more information, refer to man 5 ifcfg-tunnel.\n\n23.5.1.6 Handling incremental changes #\n\nWith wicked, there is no need to actually take down an interface to reconfigure it (unless it is required by the kernel). For example, to add another IP address or route to a statically configured network interface, add the IP address to the interface definition, and do another âifupâ operation. The server will try hard to update only those settings that have changed. This applies to link-level options such as the device MTU or the MAC address, and network-level settings, such as addresses, routes, or even the address configuration mode (for example, when moving from a static configuration to DHCP).\n\nThings get tricky of course with virtual interfaces combining several real devices such as bridges or bonds. For bonded devices, it is not possible to change certain parameters while the device is up. Doing that will result in an error.\n\nHowever, what should still work, is the act of adding or removing the child devices of a bond or bridge, or choosing a bond's primary interface.\n\n23.5.1.7 Wicked extensions: address configuration #\n\nwicked is designed to be extensible with shell scripts. These extensions can be defined in the config.xml file.\n\nCurrently, several classes of extensions are supported:\n\nlink configuration: these are scripts responsible for setting up a device's link layer according to the configuration provided by the client, and for tearing it down again.\n\naddress configuration: these are scripts responsible for managing a device's address configuration. Usually address configuration and DHCP are managed by wicked itself, but can be implemented by means of extensions.\n\nfirewall extension: these scripts can apply firewall rules.\n\nTypically, extensions have a start and a stop command, an optional âpid fileâ, and a set of environment variables that get passed to the script.\n\nTo illustrate how this is supposed to work, look at a firewall extension defined in etc/server.xml:\n\n<dbus-service interface=\"org.opensuse.Network.Firewall\"> <action name=\"firewallUp\" command=\"/etc/wicked/extensions/firewall up\"/> <action name=\"firewallDown\" command=\"/etc/wicked/extensions/firewall down\"/> <!-- default environment for all calls to this extension script --> <putenv name=\"WICKED_OBJECT_PATH\" value=\"$object-path\"/> <putenv name=\"WICKED_INTERFACE_NAME\" value=\"$property:name\"/> <putenv name=\"WICKED_INTERFACE_INDEX\" value=\"$property:index\"/> </dbus-service>\n\nThe extension is attached to the <dbus-service> tag and defines commands to execute for the actions of this interface. Further, the declaration can define and initialize environment variables passed to the actions.\n\n23.5.1.8 Wicked extensions: configuration files #\n\nYou can extend the handling of configuration files with scripts as well. For example, DNS updates from leases are ultimately handled by the extensions/resolver script, with behavior configured in server.xml:\n\n<system-updater name=\"resolver\"> <action name=\"backup\" command=\"/etc/wicked/extensions/resolver backup\"/> <action name=\"restore\" command=\"/etc/wicked/extensions/resolver restore\"/> <action name=\"install\" command=\"/etc/wicked/extensions/resolver install\"/> <action name=\"remove\" command=\"/etc/wicked/extensions/resolver remove\"/> </system-updater>\n\nWhen an update arrives in wickedd, the system updater routines parse the lease and call the appropriate commands (backup, install, etc.) in the resolver script. This in turn configures the DNS settings using /sbin/netconfig, or by manually writing /run/netconfig/resolv.conf as a fallback.\n\n23.5.2 Configuration files #\n\nThis section provides an overview of the network configuration files and explains their purpose and the format used.\n\n23.5.2.1 /etc/wicked/common.xml #\n\nThe /etc/wicked/common.xml file contains common definitions that should be used by all applications. It is sourced/included by the other configuration files in this directory. Although you can use this file to enable debugging across all wicked components, we recommend to use the file /etc/wicked/local.xml for this purpose. After applying maintenance updates you might lose your changes as the /etc/wicked/common.xml might be overwritten. The /etc/wicked/common.xml file includes the /etc/wicked/local.xml in the default installation, thus you typically do not need to modify the /etc/wicked/common.xml.\n\nIn case you want to disable nanny by setting the <use-nanny> to false, restart the wickedd.service and then run the following command to apply all configurations and policies:\n\n> sudo wicked ifup all\n\nNote: Configuration files\n\nThe wickedd, wicked, or nanny programs try to read /etc/wicked/common.xml if their own configuration files do not exist.\n\n23.5.2.2 /etc/wicked/server.xml #\n\nThe file /etc/wicked/server.xml is read by the wickedd server process at start-up. The file stores extensions to the /etc/wicked/common.xml. On top of that this file configures handling of a resolver and receiving information from addrconf supplicants, for example DHCP.\n\nWe recommend to add changes required to this file into a separate file /etc/wicked/server-local.xml, that gets included by /etc/wicked/server.xml. By using a separate file you avoid overwriting of your changes during maintenance updates.\n\n23.5.2.3 /etc/wicked/client.xml #\n\nThe /etc/wicked/client.xml is used by the wicked command. The file specifies the location of a script used when discovering devices managed by ibft and configures locations of network interface configurations.\n\nWe recommend to add changes required to this file into a separate file /etc/wicked/client-local.xml, that gets included by /etc/wicked/server.xml. By using a separate file you avoid overwriting of your changes during maintenance updates.\n\n23.5.2.4 /etc/wicked/nanny.xml #\n\nThe /etc/wicked/nanny.xml configures types of link layers. We recommend to add specific configuration into a separate file: /etc/wicked/nanny-local.xml to avoid losing the changes during maintenance updates.\n\n23.5.2.5 /etc/sysconfig/network/ifcfg-* #\n\nThese files contain the traditional configurations for network interfaces.\n\nNote: wicked and the ifcfg-* files\n\nwicked reads these files if you specify the compat: prefix. According to the SUSE Linux Enterprise Server default configuration in /etc/wicked/client.xml, wicked tries these files before the XML configuration files in /etc/wicked/ifconfig.\n\nThe --ifconfig switch is provided mostly for testing only. If specified, default configuration sources defined in /etc/wicked/ifconfig are not applied.\n\nThe ifcfg-* files include information such as the start mode and the IP address. Possible parameters are described in the manual page of ifup. Additionally, most variables from the dhcp and wireless files can be used in the ifcfg-* files if a general setting should be used for only one interface. However, most of the /etc/sysconfig/network/config variables are global and cannot be overridden in ifcfg files. For example, NETCONFIG_* variables are global.\n\nFor configuring macvlan and macvtab interfaces, see the ifcfg-macvlan and ifcfg-macvtap man pages. For example, for a macvlan interface provide a ifcfg-macvlan0 with settings as follows:\n\nSTARTMODE='auto' MACVLAN_DEVICE='eth0' #MACVLAN_MODE='vepa' #LLADDR=02:03:04:05:06:aa\n\nFor ifcfg.template, see SectionÂ 23.5.2.6, â/etc/sysconfig/network/config, /etc/sysconfig/network/dhcp, and /etc/sysconfig/network/wirelessâ.\n\nIBM Z IBMÂ Z does not support USB. The names of the interface files and network aliases contain IBMÂ Z-specific elements like qeth.\n\n23.5.2.6 /etc/sysconfig/network/config, /etc/sysconfig/network/dhcp, and /etc/sysconfig/network/wireless #\n\nThe file config contains general settings for the behavior of ifup, ifdown and ifstatus. dhcp contains settings for DHCP and wireless for wireless LAN cards. The variables in all three configuration files are commented. Some variables from /etc/sysconfig/network/config can also be used in ifcfg-* files, where they are given a higher priority. The /etc/sysconfig/network/ifcfg.template file lists variables that can be specified in a per interface scope. However, most of the /etc/sysconfig/network/config variables are global and cannot be overridden in ifcfg-files. For example, NETWORKMANAGER or NETCONFIG_* variables are global.\n\nNote: Using DHCPv6\n\nIn SUSE Linux EnterpriseÂ 11, DHCPv6 used to work even on networks where IPv6 Router Advertisements (RAs) were not configured properly. Starting with SUSE Linux EnterpriseÂ 12, DHCPv6 requires that at least one of the routers on the network sends out RAs that indicate that this network is managed by DHCPv6.\n\nFor networks where the router cannot be configured correctly, the ifcfg option allows the user to override this behavior by specifying DHCLIENT6_MODE='managed' in the ifcfg file. You can also activate this workaround with a boot parameter in the installation system:\n\nifcfg=eth0=dhcp6,DHCLIENT6_MODE=managed\n\n23.5.2.7 /etc/sysconfig/network/routes and /etc/sysconfig/network/ifroute-* #\n\nThe static routing of TCP/IP packets is determined by the /etc/sysconfig/network/routes and /etc/sysconfig/network/ifroute-* files. All the static routes required by the various system tasks can be specified in /etc/sysconfig/network/routes: routes to a host, routes to a host via a gateway and routes to a network. For each interface that needs individual routing, define an additional configuration file: /etc/sysconfig/network/ifroute-*. Replace the wild card (*) with the name of the interface. The entries in the routing configuration files look like this:\n\n# Destination Gateway Netmask Interface Options\n\nThe route's destination is in the first column. This column may contain the IP address of a network or host or, in the case of reachable name servers, the fully qualified network or host name. The network should be written in CIDR notation (address with the associated routing prefix-length) such as 10.10.0.0/16 for IPv4 or fc00::/7 for IPv6 routes. The keyword default indicates that the route is the default gateway in the same address family as the gateway. For devices without a gateway use explicit 0.0.0.0/0 or ::/0 destinations.\n\nThe second column contains the default gateway or a gateway through which a host or network can be accessed.\n\nThe third column is deprecated; it used to contain the IPv4 netmask of the destination. For IPv6 routes, the default route, or when using a prefix-length (CIDR notation) in the first column, enter a dash (-) here.\n\nThe fourth column contains the name of the interface. If you leave it empty using a dash (-), it can cause unintended behavior in /etc/sysconfig/network/routes. For more information, see the routes man page.\n\nAn (optional) fifth column can be used to specify special options. For details, see the routes man page.\n\nExampleÂ 23.5: Common network interfaces and some static routes #\n\n# --- IPv4 routes in CIDR prefix notation: # Destination [Gateway] - Interface 127.0.0.0/8 - - lo 204.127.235.0/24 - - eth0 default 204.127.235.41 - eth0 207.68.156.51/32 207.68.145.45 - eth1 192.168.0.0/16 207.68.156.51 - eth1 # --- IPv4 routes in deprecated netmask notation\" # Destination [Dummy/Gateway] Netmask Interface # 127.0.0.0 0.0.0.0 255.255.255.0 lo 204.127.235.0 0.0.0.0 255.255.255.0 eth0 default 204.127.235.41 0.0.0.0 eth0 207.68.156.51 207.68.145.45 255.255.255.255 eth1 192.168.0.0 207.68.156.51 255.255.0.0 eth1 # --- IPv6 routes are always using CIDR notation: # Destination [Gateway] - Interface 2001:DB8:100::/64 - - eth0 2001:DB8:100::/32 fe80::216:3eff:fe6d:c042 - eth0\n\n23.5.2.8 /var/run/netconfig/resolv.conf #\n\nThe domain to which the host belongs is specified in /var/run/netconfig/resolv.conf (keyword search). Up to six domains with a total of 256 characters can be specified with the search option. When resolving a name that is not fully qualified, an attempt is made to generate one by attaching the individual search entries. Up to three name servers can be specified with the nameserver option, each on a line of its own. Comments are preceded by hash mark or semicolon signs (# or ;). As an example, see ExampleÂ 23.6, â/var/run/netconfig/resolv.confâ.\n\nHowever, /etc/resolv.conf should not be edited by hand. It is generated by the netconfig script and is a symbolic link to /run/netconfig/resolv.conf. To define static DNS configuration without using YaST, edit the appropriate variables manually in the /etc/sysconfig/network/config file:\n\nNETCONFIG_DNS_STATIC_SEARCHLIST\n\nlist of DNS domain names used for host name lookup\n\nNETCONFIG_DNS_STATIC_SERVERS\n\nlist of name server IP addresses to use for host name lookup\n\nNETCONFIG_DNS_FORWARDER\n\nthe name of the DNS forwarder that needs to be configured, for example bind or resolver\n\nNETCONFIG_DNS_RESOLVER_OPTIONS\n\narbitrary options that will be written to /var/run/netconfig/resolv.conf, for example:\n\ndebug attempts:1 timeout:10\n\nFor more information, see the resolv.conf man page.\n\nNETCONFIG_DNS_RESOLVER_SORTLIST\n\nlist of up to 10 items, for example:\n\n130.155.160.0/255.255.240.0 130.155.0.0\n\nFor more information, see the resolv.conf man page.\n\nTo disable DNS configuration using netconfig, set NETCONFIG_DNS_POLICY=''. For more information about netconfig, see the netconfig(8) man page (man 8 netconfig).\n\nExampleÂ 23.6: /var/run/netconfig/resolv.conf #\n\n# Our domain search example.com # # We use dns.example.com (192.168.1.116) as nameserver nameserver 192.168.1.116\n\n23.5.2.9 /sbin/netconfig #\n\nnetconfig is a modular tool to manage additional network configuration settings. It merges statically defined settings with settings provided by autoconfiguration mechanisms as DHCP or PPP according to a predefined policy. The required changes are applied to the system by calling the netconfig modules that are responsible for modifying a configuration file and restarting a service or a similar action.\n\nnetconfig recognizes three main actions. The netconfig modify and netconfig remove commands are used by daemons such as DHCP or PPP to provide or remove settings to netconfig. Only the netconfig update command is available for the user:\n\nmodify\n\nThe netconfig modify command modifies the current interface and service specific dynamic settings and updates the network configuration. Netconfig reads settings from standard input or from a file specified with the --lease-file FILENAME option and internally stores them until a system reboot (or the next modify or remove action). Already existing settings for the same interface and service combination are overwritten. The interface is specified by the -i INTERFACE_NAME parameter. The service is specified by the -s SERVICE_NAME parameter.\n\nremove\n\nThe netconfig remove command removes the dynamic settings provided by an editing action for the specified interface and service combination and updates the network configuration. The interface is specified by the -i INTERFACE_NAME parameter. The service is specified by the -s SERVICE_NAME parameter.\n\nupdate\n\nThe netconfig update command updates the network configuration using current settings. This is useful when the policy or the static configuration has changed. Use the -m MODULE_TYPE parameter to update a specified service only (dns, nis, or ntp).\n\nThe netconfig policy and the static configuration settings are defined either manually or using YaST in the /etc/sysconfig/network/config file. The dynamic configuration settings provided by autoconfiguration tools such as DHCP or PPP are delivered directly by these tools with the netconfig modify and netconfig remove actions. When NetworkManager is enabled, netconfig (in policy mode auto) uses only NetworkManager settings, ignoring settings from any other interfaces configured using the traditional ifup method. If NetworkManager does not provide any setting, static settings are used as a fallback. A mixed usage of NetworkManager and the wicked method is not supported.\n\nFor more information about netconfig, see man 8 netconfig.\n\n23.5.2.10 /etc/hosts #\n\nIn this file, shown in ExampleÂ 23.7, â/etc/hostsâ, IP addresses are assigned to host names. If no name server is implemented, all hosts to which an IP connection will be set up must be listed here. For each host, enter a line consisting of the IP address, the fully qualified host name, and the host name into the file. The IP address must be at the beginning of the line and the entries separated by blanks and tabs. Comments are always preceded by the # sign.\n\nExampleÂ 23.7: /etc/hosts #\n\n127.0.0.1 localhost 192.168.2.100 jupiter.example.com jupiter 192.168.2.101 venus.example.com venus\n\n23.5.2.11 /etc/networks #\n\nHere, network names are converted to network addresses. The format is similar to that of the hosts file, except the network names precede the addresses. See ExampleÂ 23.8, â/etc/networksâ.\n\nExampleÂ 23.8: /etc/networks #\n\nloopback 127.0.0.0 localnet 192.168.0.0\n\n23.5.2.12 /etc/host.conf #\n\nName resolutionâthe translation of host and network names via the resolver libraryâis controlled by this file. This file is only used for programs linked to libc4 or libc5. For current glibc programs, refer to the settings in /etc/nsswitch.conf. Each parameter must always be entered on a separate line. Comments are preceded by a # sign. TableÂ 23.2, âParameters for /etc/host.confâ shows the parameters available. A sample /etc/host.conf is shown in ExampleÂ 23.9, â/etc/host.confâ.\n\nTableÂ 23.2: Parameters for /etc/host.conf #\n\nExampleÂ 23.9: /etc/host.conf #\n\n# We have named running order hosts bind # Allow multiple address multi on\n\n23.5.2.13 /etc/nsswitch.conf #\n\nThe introduction of the GNU CÂ Library 2.0 was accompanied by the introduction of the Name Service Switch (NSS). Refer to the nsswitch.conf(5) man page and The GNU C Library Reference Manual for details.\n\nThe order for queries is defined in the file /etc/nsswitch.conf. A sample nsswitch.conf is shown in ExampleÂ 23.10, â/etc/nsswitch.confâ. Comments are preceded by # signs. In this example, the entry under the hosts database means that a request is sent to /etc/hosts (files) via DNS (see ChapterÂ 39, The domain name system).\n\nExampleÂ 23.10: /etc/nsswitch.conf #\n\npasswd: compat group: compat hosts: files dns networks: files dns services: db files protocols: db files rpc: files ethers: files netmasks: files netgroup: files nis publickey: files bootparams: files automount: files nis aliases: files nis shadow: compat\n\nThe âdatabasesâ available over NSS are listed in TableÂ 23.3, âDatabases available via /etc/nsswitch.confâ. The configuration options for NSS databases are listed in TableÂ 23.4, âConfiguration options for NSS âdatabasesââ.\n\nTableÂ 23.3: Databases available via /etc/nsswitch.conf #\n\nTableÂ 23.4: Configuration options for NSS âdatabasesâ #\n\n23.5.2.14 /etc/nscd.conf #\n\nThis file is used to configure nscd (name service cache daemon). See the nscd(8) and nscd.conf(5) man pages. By default, the system entries of passwd, groups and hostsare cached by nscd. This is important for the performance of directory services, like NIS and LDAP, because otherwise the network connection needs to be used for every access to names, groups or hosts.\n\nIf the caching for passwd is activated, it usually takes about fifteen seconds until a newly added local user is recognized. Reduce this waiting time by restarting nscd with:\n\n> sudo systemctl restart nscd\n\n23.5.2.15 /etc/HOSTNAME #\n\n/etc/HOSTNAME contains the fully qualified host name (FQHN). The fully qualified host name is the host name with the domain name attached. This file must contain only one line (in which the host name is set). It is read while the machine is booting.\n\n23.5.3 Testing the configuration #\n\nBefore you write your configuration to the configuration files, you can test it. To set up a test configuration, use the ip command. To test the connection, use the ping command.\n\nThe command ip changes the network configuration directly without saving it in the configuration file. Unless you enter your configuration in the correct configuration files, the changed network configuration is lost on reboot.\n\nNote: ifconfig and route are obsolete\n\nThe ifconfig and route tools are obsolete. Use ip instead. ifconfig, for example, limits interface names to 9Â characters.\n\n23.5.3.1 Configuring a network interface with ip #\n\nip is a tool to show and configure network devices, routing, policy routing, and tunnels.\n\nip is a very complex tool. Its common syntax is ipÂ OPTIONS OBJECT COMMAND. You can work with the following objects:\n\nlink\n\nThis object represents a network device.\n\naddress\n\nThis object represents the IP address of device.\n\nneighbor\n\nThis object represents an ARP or NDISC cache entry.\n\nroute\n\nThis object represents the routing table entry.\n\nrule\n\nThis object represents a rule in the routing policy database.\n\nmaddress\n\nThis object represents a multicast address.\n\nmroute\n\nThis object represents a multicast routing cache entry.\n\ntunnel\n\nThis object represents a tunnel over IP.\n\nIf no command is given, the default command is used (usually list).\n\nChange the state of a device with the command:\n\n> sudo ip link set DEV_NAME\n\nFor example, to deactivate device eth0, enter\n\n> sudo ip link set eth0 down\n\nTo activate it again, use\n\n> sudo ip link set eth0 up\n\nTip: Disconnecting NIC device\n\nIf you deactivate a device with\n\n> sudo ip link set DEV_NAME down\n\nit disables the network interface on a software level.\n\nIf you want to simulate losing the link as if the Ethernet cable is unplugged or the connected switch is turned off, run\n\n> sudo ip link set DEV_NAME carrier off\n\nFor example, while ip link set DEV_NAME down drops all routes using DEV_NAME, ip link set DEV carrier off does not. Be aware that carrier off requires support from the network device driver.\n\nTo connect the device back to the physical network, run\n\n> sudo ip link set DEV_NAME carrier on\n\nAfter activating a device, you can configure it. To set the IP address, use\n\n> sudo ip addr add IP_ADDRESS + dev DEV_NAME\n\nFor example, to set the address of the interface eth0 to 192.168.12.154/30 with standard broadcast (option brd), enter\n\n> sudo ip addr add 192.168.12.154/30 brd + dev eth0\n\nTo have a working connection, you must also configure the default gateway. To set a gateway for your system, enter\n\n> sudo ip route add default via gateway_ip_address\n\nTo display all devices, use\n\n> sudo ip link ls\n\nTo display the running interfaces only, use\n\n> sudo ip link ls up\n\nTo print interface statistics for a device, enter\n\n> sudo ip -s link ls DEV_NAME\n\nTo view additional useful information, specifically about virtual network devices, enter\n\n> sudo ip -d link ls DEV_NAME\n\nMoreover, to view network layer (IPv4, IPv6) addresses of your devices, enter\n\n> sudo ip addr\n\nIn the output, you can find information about MAC addresses of your devices. To show all routes, use\n\n> sudo ip route show\n\nFor more information about using ip, enter ipÂ help or see the man 8 ip manual page. The help option is also available for all ip subcommands, such as:\n\n> sudo ip addr help\n\nFind the ip manual in /usr/share/doc/packages/iproute2/ip-cref.pdf.\n\n23.5.3.2 Testing a connection with ping #\n\nThe ping command is the standard tool for testing whether a TCP/IP connection works. It uses the ICMP protocol to send a small data packet, ECHO_REQUEST datagram, to the destination host, requesting an immediate reply. If this works, ping displays a message to that effect. This indicates that the network link is functioning.\n\nping does more than only test the function of the connection between two computers: it also provides some basic information about the quality of the connection. In ExampleÂ 23.11, âOutput of the command pingâ, you can see an example of the ping output. The second-to-last line contains information about the number of transmitted packets, packet loss, and total time of ping running.\n\nAs the destination, you can use a host name or IP address, for example, pingÂ example.com or pingÂ 192.168.3.100. The program sends packets until you press CtrlâC.\n\nIf you only need to check the functionality of the connection, you can limit the number of the packets with the -c option. For example to limit ping to three packets, enter pingÂ -c 3 example.com.\n\nExampleÂ 23.11: Output of the command ping #\n\nping -c 3 example.com PING example.com (192.168.3.100) 56(84) bytes of data. 64 bytes from example.com (192.168.3.100): icmp_seq=1 ttl=49 time=188 ms 64 bytes from example.com (192.168.3.100): icmp_seq=2 ttl=49 time=184 ms 64 bytes from example.com (192.168.3.100): icmp_seq=3 ttl=49 time=183 ms --- example.com ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2007ms rtt min/avg/max/mdev = 183.417/185.447/188.259/2.052 ms\n\nThe default interval between two packets is one second. To change the interval, ping provides the option -i. For example, to increase the ping interval to ten seconds, enter pingÂ -i 10 example.com.\n\nIn a system with multiple network devices, it is sometimes useful to send the ping through a specific interface address. To do so, use the -I option with the name of the selected device, for example, pingÂ -I wlan1 example.com.\n\nFor more options and information about using ping, enter pingÂ -h or see the ping (8) man page.\n\nTip: Pinging IPv6 addresses\n\nFor IPv6 addresses use the ping6 command. Note, to ping link-local addresses, you must specify the interface with -I. The following command works, if the address is reachable via eth1:\n\nping6 -I eth1 fe80::117:21ff:feda:a425\n\n23.5.4 Unit files and start-up scripts #\n\nApart from the configuration files described above, there are also systemd unit files and various scripts that load the network services while the machine is booting. These are started when the system is switched to the multi-user.target target. Some of these unit files and scripts are described in Some unit files and start-up scripts for network programs. For more information about systemd, see ChapterÂ 19, The systemd daemon and for more information about the systemd targets, see the man page of systemd.special (man systemd.special).\n\nSome unit files and start-up scripts for network programs #\n\nnetwork.target\n\nnetwork.target is the systemd target for networking, but its mean depends on the settings provided by the system administrator.\n\nFor more information, see https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/.\n\nmulti-user.target\n\nmulti-user.target is the systemd target for a multiuser system with all required network services.\n\nrpcbind\n\nStarts the rpcbind utility that converts RPC program numbers to universal addresses. It is needed for RPC services, such as an NFS server.\n\nypserv\n\nStarts the NIS server.\n\nypbind\n\nStarts the NIS client.\n\n/etc/init.d/nfsserver\n\nStarts the NFS server.\n\n/etc/init.d/postfix\n\nControls the postfix process.\n\n23.6 Basic router setup #\n\nA router is a networking device that delivers and receives data (network packets) to or from more than one network back and forth. You often use a router to connect your local network to the remote network (Internet) or to connect local network segments. With SUSE Linux Enterprise Server you can build a router with features such as NAT (Network Address Translation) or advanced firewalling.\n\nThe following are basic steps to turn SUSE Linux Enterprise Server into a router.\n\nEnable forwarding, for example in /etc/sysctl.d/50-router.conf\n\nnet.ipv4.conf.all.forwarding = 1 net.ipv6.conf.all.forwarding = 1\n\nThen provide a static IPv4 and IPv6 IP setup for the interfaces. Enabling forwarding disables several mechanisms, for example IPv6 does not accept an IPv6 RA (router advertisement) anymore, which also prevents the creation of a default route.\n\nIn many situations (for example, when you can reach the same network via more than one interface, or when VPN usually is used and already on ânormal multi-home hostsâ), you must disable the IPv4 reverse path filter (this feature does not currently exist for IPv6):\n\nnet.ipv4.conf.all.rp_filter = 0\n\nYou can also filter with firewall settings instead.\n\nTo accept an IPv6 RA (from the router on an external, uplink, or ISP interface) and create a default (or also a more specific) IPv6 route again, set:\n\nnet.ipv6.conf.${ifname}.accept_ra = 2 net.ipv6.conf.${ifname}.autoconf = 0\n\n(Note: âeth0.42â needs to be written as eth0/42 in a dot-separated sysfs path.)\n\nMore router behavior and forwarding dependencies are described in https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt.\n\nTo provide IPv6 on your internal (DMZ) interfaces, and announce yourself as an IPv6 router and âautoconf networksâ to the clients, install and configure radvd in /etc/radvd.conf, for example:\n\ninterface eth0 { IgnoreIfMissing on; # do not fail if interface missed AdvSendAdvert on; # enable sending RAs AdvManagedFlag on; # IPv6 addresses managed via DHCPv6 AdvOtherConfigFlag on; # DNS, NTP... only via DHCPv6 AdvDefaultLifetime 3600; # client default route lifetime of 1 hour prefix 2001:db8:0:1::/64 # (/64 is default and required for autoconf) { AdvAutonomous off; # Disable address autoconf (DHCPv6 only) AdvValidLifetime 3600; # prefix (autoconf addr) is valid 1 h AdvPreferredLifetime 1800; # prefix (autoconf addr) is preferred 1/2 h } }\n\nConfigure the firewall to masquerade traffic with NAT from the LAN into the WAN and to block inbound traffic on the WAN interface:\n\n> sudo firewall-cmd --permanent --zone=external --change-interface=WAN_INTERFACE > sudo firewall-cmd --permanent --zone=external --add-masquerade > sudo firewall-cmd --permanent --zone=internal --change-interface=LAN_INTERFACE > sudo firewall-cmd --reload\n\n23.7 Setting up bonding devices #\n\nFor some systems, there is a desire to implement network connections that comply to more than the standard data security or availability requirements of a typical Ethernet device. In these cases, several Ethernet devices can be aggregated to a single bonding device.\n\nThe configuration of the bonding device is done by means of bonding module options. The behavior is mainly affected by the mode of the bonding device. By default, this is active-backup which means that a different bond port will become active if the active port fails. The following bonding modes are available:\n\n0 (balance-rr)\n\nPackets are transmitted in round-robin fashion from the first to the last available interface. Provides fault tolerance and load balancing.\n\n1 (active-backup)\n\nOnly one network interface is active. If it fails, a different interface becomes active. This setting is the default for SUSE Linux Enterprise Server. Provides fault tolerance.\n\n2 (balance-xor)\n\nTraffic is split between all available interfaces based on the number of devices included in the bonding. It requires support from the switch. Provides fault tolerance and load balancing.\n\n3 (broadcast)\n\nAll traffic is broadcast on all interfaces. Requires support from the switch. Provides fault tolerance.\n\n4 (802.3ad)\n\nAggregates interfaces into groups that share the same speed and duplex settings. Requires ethtool support in the interface drivers, and a switch that supports and is configured for IEEE 802.3ad Dynamic link aggregation. Provides fault tolerance and load balancing.\n\n5 (balance-tlb)\n\nAdaptive transmit load balancing. Requires ethtool support in the interface drivers but not switch support. Provides fault tolerance and load balancing.\n\n6 (balance-alb)\n\nAdaptive load balancing. Requires ethtool support in the interface drivers but not switch support. Provides fault tolerance and load balancing.\n\nFor a more detailed description of the modes, see https://www.kernel.org/doc/Documentation/networking/bonding.txt.\n\nTip: Bonding and Xen\n\nUsing bonding devices is only of interest for machines where you have multiple real network cards available. In most configurations, this means that you should use the bonding configuration only in Dom0. Only if you have multiple network cards assigned to a VM Guest system it may also be useful to set up the bond in a VM Guest.\n\nNote: IBM POWER: Bonding modes 5 and 6 (balance-tlb / balance-alb) unsupported by ibmveth\n\nThere is a conflict with the tlb/alb bonding configuration and Power firmware. In short, the bonding driver in tlb/alb mode sends Ethernet Loopback packets with both the source and destination MAC addresses listed as the Virtual Ethernet MAC address. These packets are not supported by Power firmware. Therefore bonding modes 5 and 6 are unsupported by ibmveth.\n\nTo configure a bonding device, use the following procedure:\n\nRun YaSTÂ âºÂ SystemÂ âºÂ Network Settings.\n\nUse Add and change the Device Type to Bond. Proceed with Next.\n\nSelect how to assign the IP address to the bonding device. Three methods are at your disposal:\n\nNo IP Address\n\nDynamic Address (with DHCP or Zeroconf)\n\nStatically assigned IP Address\n\nUse the method that is appropriate for your environment.\n\nIn the Bond Ports tab, select the Ethernet devices that should be included into the bond by activating the related check box.\n\nEdit the Bond Driver Options and choose a bonding mode.\n\nMake sure that the parameter miimon=100 is added to the Bond Driver Options. Without this parameter, the data integrity is not checked regularly.\n\nClick Next and leave YaST with OK to create the device.\n\n23.7.1 Hotplugging of bond ports #\n\nIn specific network environments (such as High Availability), there are cases when you need to replace a bond port interface with another one. The reason may be a constant"
    }
}