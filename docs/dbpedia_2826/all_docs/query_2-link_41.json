{
    "id": "dbpedia_2826_2",
    "rank": 41,
    "data": {
        "url": "https://www.mapcore.org/articles/page/2/",
        "read_more_link": "",
        "language": "en",
        "title": "Articles - Page 2",
        "top_image": "https://www.mapcore.org/uploads/monthly_2023_11/Screenshot2023-11-26at19_27_58.png.f9ece2afd21cdfe3dcd1f85368706cd8.png",
        "meta_img": "https://www.mapcore.org/uploads/monthly_2023_11/Screenshot2023-11-26at19_27_58.png.f9ece2afd21cdfe3dcd1f85368706cd8.png",
        "images": [
            "https://www.mapcore.org/uploads/monthly_2023_11/mapcore_logo_dark.png.2e2cbb81fe37c201a5bf5170db9349c8.png",
            "https://www.mapcore.org/uploads/profile/photo-thumb-14288.jpg",
            "https://www.mapcore.org/uploads/monthly_2016_01/Untitled-1.thumb.jpg.eb2dd02ebaacddf4ccf48c15cedb8fc5.jpg",
            "https://www.mapcore.org/uploads/monthly_2016_01/hostage_rescue_thumb.thumb.jpg.6fd4450890939b6c03f06753aa9fa564.jpg",
            "https://www.mapcore.org/uploads/monthly_2016_04/mapcore_contest_square_2.thumb.png.24e8628b29eb0bc923bae417f5f84bb6.png",
            "https://www.mapcore.org/uploads/monthly_2015_09/mapcore_contest_square_2.thumb.png.0534b7c51a05279d63f0c35423ec3b8d.png",
            "https://www.mapcore.org/uploads/monthly_2015_08/thumbnail2.thumb.png.59d2f408f7c5502113f4ebed731ed48d.png",
            "https://www.mapcore.org/uploads/monthly_2015_08/thumbnail.thumb.png.199d0c04bcdca60c5c6f2dfb8e21f4ea.png",
            "https://www.mapcore.org/uploads/monthly_2015_06/thumbnail-agency.thumb.jpg.d32d1e0657ad7fb6a9e9afb186fa05a2.jpg",
            "https://www.mapcore.org/uploads/monthly_2015_06/lead-image-square.thumb.jpg.a00ff09e055d8a6a5f1a53cbe38c1100.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/lead-image.thumb.jpg.33805eaeee7bfb61025149c1e5454feb.jpg",
            "https://www.mapcore.org/uploads/monthly_2018_03/c3f183d503b36523b8e958bfb9440480.thumb.jpg.0f86f0ebb77b4271852e7fa2673b8e3e.jpg",
            "https://www.mapcore.org/uploads/monthly_2018_03/lead-image.thumb.jpg.e489b3c4c30cd8b71b2709ba34c12650.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/b2fc1b0064c24f4442aba729af15a7bf.thumb.jpg.541d4f2fd47dcac4071f3cb6fa93111c.jpg",
            "https://www.mapcore.org/uploads/monthly_2015_05/2d094cadd447bbd13c5d337d71784431.jpg.a10ed576a12aab85930b0d0a7e8fa07c.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/a7a1bd770a1abd1834adcc0cb2ff4969.thumb.png.208a06fa81bebf1d2f63325a54fd91b3.png",
            "https://www.mapcore.org/uploads/monthly_2018_03/d08480574cc82dd57c2ddda453d46046.thumb.jpg.61bd0ca8aac590b23c6d22b22d6d7860.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/16d29dda4e002fbc5dae62a583686d8d.thumb.jpg.adb85a0f20109669aaf37a5ffa42e38e.jpg",
            "https://www.mapcore.org/uploads/monthly_2015_05/1ae7985d9d0f4cdef459ea05801c3295.jpg.74c26c94bbee2a618b4692db4e73da57.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/0e7c5afa53ab9e1c32be92f2c9b30139.thumb.jpg.bd00e5ba4da3ebbc0f6e7ffa7a27da6b.jpg",
            "https://www.mapcore.org/uploads/monthly_2015_05/28824c4f4917586d9a203457d26c9e3f.png.a4837d551e1c82fa7ed79a5054a1cc54.png",
            "https://www.mapcore.org/uploads/monthly_2017_02/5959ee358467cd7c2bea903f5f0f18f7.thumb.jpg.5b00a3d073e4f2daaba56f2d9a6ff894.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/5577eded02c86010c8aa2a085e4afec2.thumb.jpg.d518351251dae395db5ec20d3b4e39b6.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/a6452b9dee67c53fe57733d802f72db9.thumb.jpg.83aa5a012eab991bfd39f556770d4590.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/e2d7f46621967f7fb62bcae0f76070e4.thumb.jpg.c34a0c90a20596c21ffcb45a53109e85.jpg",
            "https://www.mapcore.org/uploads/monthly_2015_05/6c175b16f41d694222ffcf5175ddb08f.jpg.886a134bfade33171aae9fe660623e95.jpg",
            "https://www.mapcore.org/uploads/monthly_2017_02/6d64d270e1845da863b4eab1ff3b9db0.thumb.jpg.78211371576bf130f0ac9bd956a35db5.jpg",
            "https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/72x72/2b50.png",
            "https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/72x72/2b50.png",
            "https://www.mapcore.org/uploads/monthly_2023_04/2955084102_preview_20230404120655_1.jpg.77b7071d4e9db1625414c7ad26720f8f.jpg",
            "https://www.mapcore.org/uploads/reactions/react_thanks.png",
            "https://www.mapcore.org/uploads/reactions/react_like.png",
            "https://www.mapcore.org/uploads/profile/photo-thumb-14288.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2016-01-23T19:03:00+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Mapcore",
        "canonical_link": "https://www.mapcore.org/articles/",
        "text": "This level design article is about the past and the present of the hostage rescue mode in Counter-Strike. Showcasing the inherent issues that accompanied the scenario allowing the bomb/defuse mode to gain traction and popularity. This article will also present what can be done, level design wise, to remedy some of the shortfalls and allow the scenario to be viable.\n\nA historical background\n\nCounter-Strike officially started life in June 1999 with the release of beta 1, and it shipped with four maps, that’s right, four whole maps. They were all hostage rescue maps and the prefix used for these maps was cs_ as opposed to the standard deathmatch maps starting with dm_. This prefix was an abbreviation of the game’s name (Counter-Strike) which hints to this hostage-rescue scenario being the only one in the minds of Gooseman and Cliffe, the creators of CS, at the time of launch.\n\nFast forward a couple of months, beta 4 rolled out in November 1999 bringing to the table a new scenario, bomb defuse. The new maps carried the prefix de_ and while one would think that the hostage rescue maps would be switched to hr_ prefix, they kept the same prefix which started to be referred to as the “Classic Scenario”. Counter-Strike was built on hostage rescue scenario.\n\nI started playing CS in beta 2 in August 1999 (I totally missed beta 1, screw me) and maps like Assault and Siege were all the rage at LAN parties. The nearest LAN/internet café was a 5-minute drive from my place, and LAN parties with friends used to be a blast full of shouting, cursing, bluffing, noob-trashing; the standard menu for a CS session. Good times.\n\nSiege, the oldest CS map (beta 1), and Assault (beta 1.1) were the epitome of the game. You had to dive in as a CT deep into the T stronghold to rescue the hostages and bring them back to safety. These maps were the most played on LANs and embodied the style of early CS gameplay. At the LAN place where I used to wage my virtual battles, Assault equaled CS, literally. A fun fact is that when Dust came out, I started a LAN session with this map and everyone in the room shouted at me: \"What the hell is this? We wanna play CS!\" For my friends, Assault was CS.\n\nHowever, those rosy days for hostage rescue began to turn into grim grey when folks started playing bomb defuse scenario and realized how…fun it was. A map like Dust almost single-handedly pushed the scenario into higher ground with its bright environment/textures, clear/wide paths and its ease of use and noob-friendliness. A year later, around Summer 2000, Counter-Strike was now equivalent to Dust for my friends.\n\nHow did this happen? What went wrong?\n\nInherent flaws of hostage rescue\n\nHostage rescue is a very delicate and tough scenario for law enforcement operators in the real world. It puts the assailing team at a great disadvantage against heavily-armed barricaded hostage-takers who are probably using civilian hostages as human shields and as a bargaining chip for a later escape.\n\nAs you can deduce, transferring this scenario as realistically as possible into the game will not fare well, and this disadvantage will carry on for the CT team. The problem is only exacerbated when you add the more or less “flawed” game mechanics to the scenario. This is exactly what went wrong with hostage rescue scenario in case you are still wondering about the rhetoric questions at the end of the historical background introduction. The popularity of cs_ scenario started dwindling and the rise of the bomb/defuse scenario only made things worse.\n\nAlmost all the early cs_ maps featured a relatively tiny hostage zone/room having one entryway usually sealed with closed doors that the CT must open to get access inside. This room was typically located behind T spawn which made the area a camping ground and made camping that zone an obvious and rewarding tactic for Ts. The doors having to be manually opened with a loudening sound made things worse and negated any surprise or sneaky rush towards the hostages. A classic example is the hostage area and T spawn in cs_assault.\n\nI dare not think of how many Ts are camping behind those doors\n\nAnother equally important camp fest occurred in the hostage rescue zone. Early designs made the rescue zone relatively small with one or two access paths that can be defended from one location. If the CT team manages to reach the hostages and rescue them, the Ts could easily fall back to the rescue zone to camp and patiently wait for the CTs to show up. The hostage rescue zone in cs_italy is a nice example to showcase how one T could camp in the southernmost spot in the zone allowing him to monitor both entryways, from market and from wine cellar, within the same field of view. CT slaughter was almost a guaranteed thing to happen.\n\nA CT will show up any second now; imminent slaughter commencing in ...3, 2, 1\n\nA third flaw was the hostages themselves. They were difficult to escort and protect and were easily stuck or left behind in various parts of the maps between their initial hostage zone and the final rescue zone. I lost count of how many times I rescued the hostages and ran as fast as I could to the rescue zone, reaching it with a big grin on my face only to turn around and find out that only one or two of the four hostages actually followed me; the others were randomly stuck on a ladder, door frame, window ledge, vent, chair, table…I could go on but my blood is starting to boil just thinking of this.\n\nTo add insult to injury, hostages could also be killed or “stolen” for ultimate trolling. When Ts were stacked on money, they could easily kill all the hostages, basically turning the round to a frustrating terrorist hunt for CTs. In early CS versions, a CT teammate could press the “use” key on a hostage that you were already escorting to steal it. This would leave you helplessly wondering where the hell did the 4th hostage go in case you did not catch the teammate performing the action.\n\nLastly, maps themselves contributed to the issues that were piling up against hostage rescue scenario. If you are a CS veteran and you were around the early betas in 1999, you would most certainly remember how quickly hostage rescue maps were pruned from one beta to another; some maps even had a life span of 1 week before being discarded out of the official roster. Most of these early cs maps featured dark, nightly environments that were unfriendly to both newcomers and established players. Other maps had a confusing-as-hell labyrinthine layout that confused even the most great-sense-of-direction players, and made remembering paths nigh impossible. Some of these maps had narrow twisted paths and choke points, vents, and ladders that not only frustrated players (especially CTs) but also made rescuing and escorting the hostages more of wishful thinking. The icing on the cake was the different gimmicks introduced in some maps that made a frustrating gameplay/layout even more annoying: some maps had a machine gun nest in T spawn allowing Ts to master and perfect the art of CT slaughtering while other maps had flammable drums that could be shot and blasted for the ultimate carnage right next to the hostage zone. Good example maps include cs_prison, cs_bunker, cs_iraq, cs_hideout, cs_facility, cs_desert, among many others.\n\nMeanwhile, bomb/defuse scenario was gaining grounds at an increased rate and before too long, hostage rescue was relegated to a distant second place in terms of popularity among players and level designers alike.\n\nAs a small experiment, I tallied the number of custom hostage and defuse maps submitted on Gamebanana for Counter-Strike Source and Global Offensive. For CS:GO, there are 761 de_ maps against 157 hostage maps while for CS:S, the figures are 4060 de_ for 1244 cs_ maps. The disparity is rather meaningful as the ratio in CS:GO is 4.85:1 while for CS:S the number is 3.26:1. This means that for each hostage map in CS:GO there are almost five maps of bomb/defuse whereas this number drops slightly to almost three maps for CS:S. With CS:GO putting extra focus on competitive gameplay, this ratio is bound to further grow widening the rift between bomb/defuse and hostage rescue maps.\n\nThat’s it? Is it done for cs_ maps? Shall we prepare the obituary or is there a magical solution to breathe some fire and life in them?\n\nSolutions for viability\n\nThere is a magical solution that involves you transferring a large sum of cash to my bank account, then my “guys” will contact your “guys” to deliver the “solution”. The drop point will be at the…apparently, there has been a mix-up, this is for another “deal” …nervous chuckle.\n\nSeriously though, while there is no magical solution that will lift hostage rescue onto the rainbow, there are a couple of things that level designers can do to start injecting some momentum to the scenario. Luckily for us, Valve has already paved the way (so these “Volvo pls fix pls” do work after all?). In March 2013, Valve introduced a major CS:GO update that completely overhauled the hostage rescue scenario mechanics and introduced cs_militia as well. The update was a game changer and a much needed tweak towards a better hostage rescue gamemode.\n\nWe now have two hostages instead of four, and the CTs only need to rescue one of them to win the round. Moreover, the hostage does not stupidly follow the CT but instead is carried on the CT’s shoulders. Obviously the movement speed of the CT carrying the hostage is decreased but this “inconvenience” is countered with added bonus round time and the fact that the CT doesn’t have to glance over his shoulders every five seconds to make sure the hostages are still following him (this kind of distraction can prove fatal to the CT escorting the hostages). The hostages’ spawn location is randomized and can be controlled by the level designer. A nice change is that hostages don’t die anymore thus cutting any chance of Ts trolling (you still lose money when you shoot a hostage – shooting a hostage is pretty pointless now akin to shooting yourself in the foot).\n\nThis is all good news if you ask me; hostage rescue is on the right path to become popular and viable again. With Valve doing the first half of the change, level designers have the duty to continue with the second half.\n\nHostage defuse?\n\nAs a first suggested solution, let us start treating hostage rescue as bomb defuse. Let’s be honest, bomb defuse works really well, so why not transfer this “experience” into hostage rescue. What we can do is to have a hostage rescue map’s layout mimic one of bomb defuse – that is have two hostage zones that are similarly placed as two bomb sites. We need to start treating a hostage zone like a bomb site with all accompanying techniques of rushing, pushing, faking, peeking, holding, smoking, flashing, etc. The good thing about this is that whatever knowledge, skill, and layout awareness that players have acquired from defuse scenarios will transfer effortlessly to the hostage rescue scenario; you do not need to learn new tactics and strategies. The roles will be inversed: instead of Ts rushing bomb sites and CTs defending, CTs will push hostage zones and Ts will defend and rotate.\n\nSounds logical, right? Some people might argue that having 2 separate hostage zones is not “realistic” and my answer is Counter-Strike was never about realism (carrying and running around with a 7 kg (15.5 lb), 1.2 m (47.2 inch) AWP sniper rifle with 25x telescopic sight, quickscoping and headshotting opponents is the epitome of “realism”). If you want a realistic hostage rescue scenario, then you are better off playing the original Rainbow Six Rogue Spear and SWAT 3 from 1999, or the more recent ARMA and Insurgency for a realistic military setting. I practice what I preach and I already implemented this technique in my last map “cs_calm”. The map was a remake of my CS 1.5 map from 2003 and obviously I made the “mistake” at that time to follow the trend set by official maps of having one hostage zone right behind T spawn. A playtest on Reddit CS:GO servers back in March 2015 confirmed that this setup won’t work well as Ts will inevitably abuse the hostage zone.\n\nI made some radical layout changes towards T spawn and hostage zone and created two new hostage zones on the upper and lower levels of the map that are connected by a back hallway to allow quick rotations (in addition to the one through T spawn). Obviously, there is no direct line of sight between hostage zones to prevent 1-zone camping. Ts have absolutely no incentive to camp one zone as CTs can reach the other one, rescue the hostage and head back to the rescue zone without being spotted from the other zone. CTs actually have a chance of winning the round by rescuing the hostages.\n\nI like to believe the new layout worked well. Only time and more hostage rescue maps will tell.\n\nLayout of the map \"cs_calm\"\n\nRescue zone anti-camping\n\nWe have remedied the hostage zone camping but we still need to tend to the rescue zone camping issue. A solution to this is to have two rescue zones in a similar setup to what is nicely done in cs_office. While Ts can still camp one zone, they risk a big chance of having CTs reach the other rescue zone. Again, CTs will have a viable option to save the hostages without being shredded by camping Ts. If the layout does not allow or facilitate having two rescue zones, then one big rescue zone with multiple entrances (three is a good number) should work fine. The trick here is to have the entrances not easily covered within the same field of view to prevent camping.\n\nInto the zone\n\nJust as we established that we should treat hostage zones like bomb sites, it goes without saying that each hostage zone should have at least 2 to 3 entry points. It’s pretty pointless to have only one entrance as this totally defeats the purpose of spreading hostages into two zones. The different entryways should also not be covered within the same field of view of one T; if a T decides to camp the zone, then he should be able to cover two entrances from one point leaving the third one more or less at a dead angle and viable for a CT rush or stealth/sneak surprise.\n\nShowcase of Hostage Zone A on the map \"cs_calm\"\n\nThe above screenshot showcases “Hostage Zone A” in cs_calm. A terrorist will typically camp near the hostage covering the two encircled entrances. The third entrance from upper level denoted by the arrow is not in the direct FOV, and is prone to a surprise attack by CTs that could catch the camping T off guard. If possible, try to spread the entrances on different vertical levels to spice things up and keep Ts on their toes.\n\nLastly, it is a good idea to have a connector between hostage zones to allow fast rotations but without having a direct line of sight between hostage zones. We want to make the scenario fairer to CTs but not at the expense of Ts, inadvertently making it unfair for them.\n\nConclusion\n\nHostage rescue is a fun scenario if you ask me. It had many inherited and added flaws that contributed to its waning but it’s nothing that can’t be reversed. We, as level designers, need to push some changes to put the scenario back on track. What I just showcased in this article might not be the only viable solutions but they certainly are a step in the right direction. Level designers are intimidated by players who shun away from cs_ maps, and this turns into a vicious circle where players avoid hostage rescue maps and mappers in return avoid designing them. We need to break this cycle and designers need to bravely embrace the solutions I presented here or come up with their own solutions. The more cs_ maps that come out and get tested, the more we could validate these solutions as viable.\n\nIn either case, we need to get proactive towards hostage rescue scenario; after all, this is the cornerstone that Counter-Strike was built upon.\n\nRead more...\n\n48 comments\n\n27,384 views\n\nThis is the second part of a technical analysis about Source Lighting, if you haven’t read the first part yet, you can find it here.\n\nLast time, we studied the lightmaps, how they are baked and how VRAD handles the light travel through space. We ended the part 1 with an explanation of what the Constant-Linear-Quadratic Falloff system is, with a website that allows you to play with these variables and see how lighting falloff reacts to them. We will now continue with basic examples of things you can do with these variables.\n\nExamples of application\n\nConstant falloff\n\nThe simplest type of falloff is the 100% constant one. Whatever the distance is, the lighting has theoretically the same intensity. This is the kind of (non-)falloff used for the sun lighting, it is so far away from the map area, that light rays are supposed to be parallel and light keep its intensity. Constant falloff is also useful for fake lights, lights with a very low brightness but that are here to brighten up the area.\n\nLinear falloff\n\nAnother type of falloff is the 100% linear one. With this configuration, light seems to be a bit artificial: it loses its intensity but goes way further than the 100% quadratic falloff. It can be very useful on spots, the lighting is smooth and powerful. Here is an example:\n\nQuadratic falloff\n\nThis is the default configuration for any light entity in Hammer, following as we said before the classic Inverse-Square law (100% Quadratic Falloff). It is considered to be the most natural and realistic falloff configuration. The biggest issue is that it boosts the brightness so much on short distances, that you can easily obtain a big white spot. Here is an example, with a light distant of 16 units from a grey wall:\n\nThis can also happen with linear falloff but it is worse with quadratic. Simple solutions exist for that, the most common is not to use a light entity but a light_spot entity that is oriented to the opposite direction from the wall/ceiling the light is fixed to. You can make the opening angle of your light_spot wider, with the inner and outer angle parameters (by default the outer one is 45°, increase that to a value of 85° for example). If needed, you can also add a light with low brightness to light the ceiling/wall a bit.\n\n50% & 0% FallOff\n\nA second light falloff system exists, overriding the constant-linear-quadratic system if used. The concept is much simpler, you have to configure only 2 distances:\n\n50 percent falloff distance: Distance at which light should fall off to 50% from its original intensity 0 percent fall off distance: Distance at which light should end. Well ... almost, it actually fall off to 1/256% from its original intensity, which is negligible. The good thing with this falloff system is that you can see the 2 spheres according to the 2 distances you have configured in Hammer. Just make sure to have this option activated:\n\nModels lighting\n\nAn appropriate section for models lighting is needed, because it differs from brush lighting (but the falloff stays the same). In any current game engine, lightmaps can be used on models, a specific UV unwrap is even made specifically for lightmaps. But on Source Engine 1 (except for Team Fortress 2) you cannot use lightmaps on models.\n\nThe standard lighting method for models is named Per-Vertex Lighting. This time, light won’t be lighting faces but vertices, all of the model’s vertices. For each one of them, VRAD will compute a color and brightness to apply. Finally, Source Engine will make a gradient between the vertices, for each triangle. For example:\n\nIf we take a simple example of a sphere mesh with 2 different light entities next to it, we can see it working.\n\nWith this lighting method, models will therefore be integrated in the environment with an appropriate lighting. The good thing is that, if a part of the model is in a dark area, and another part is in a bright area, the situation will be handled properly. The only requirement for this is that the mesh must have a sufficient level of detail in it; if there is a big plane area without additional vertices on it, the lighting details could be insufficient.\n\nHere is an example of a simple square mesh with few triangles on the left and a lot on the right. With the complex mesh, the lighting is better, but more expensive.\n\nIf you need a complex mesh for your lighting, you don’t want your model to be too expensive, you have to find a balance.\n\nTwo VRAD commands are needed to make the Per-Vertex Lighting work:\n\nStaticPropLighting StaticPropPolys You have to add them here. You can find more information here.\n\nAnother system exists, that is much cheaper and simpler. Instead of focusing on the lighting of all the vertices, the engine will only deal with the model’s origin. The result obtained in-game will be displayed on the whole model, using only what has been computed at the model’s origin location. This can be an issue if the model is big or supposed to be present in an area with lots of contrast in lighting. The best example for that is at the beginning of Half-Life 2 with trains entering and exiting tunnels. We can see the issue: the model is illuminated at the beginning, but when it enters the tunnel it suddenly turns dark. And this moment is when the train’s origin gets in the shadow.\n\nThis cheap lighting method will replace the per-vertex lighting for 3 types of models:\n\nFor prop_dynamic or any kind of dynamic models used in the game (NPCs, weapon models in hand, any animated models...) For prop_physics For ANY MODEL USING A NORMAL MAP (vertex lighting causes issues with normal maps apparently), EVEN IF USED AS A PROP_STATIC\n\nThe big problem with these models is their integration in the map, they won’t show any shadow and their lighting will be very flat and boring (because it’s the same used for the whole model). But hopefully there are 2 good things with this cheap lighting method.\n\nFirst, the orientation from which comes light is taken into account, if blue light comes from one direction, therefore all the faces oriented toward this direction will be colored in blue. And if you have different lighting colorations/intensities coming from different sides of your model, they should appear in game.\n\nHere is an example of a train model using a normal map with 2 lights on both side. If you look closely, you’ll see some blue lighting on the left, on faces that are supposed to be in the shadow of the blue light but are oriented toward the blue light.\n\nThe second good thing is that there is still some kind of dynamic per-vertex lighting, but much simpler: it only works with light and light_spot entities (NOT with light_environment), and it just adds some light to the prop, it cannot cast any shadow (it only takes into account dynamically the distance between the light and the vertex). If we use again the high-poly plane mesh we had before as a prop_dynamic, being parented to a func_rotating that ... rotates. Light is dynamically lighting the vertices of the props. There is a limit of 3 dynamic lights per prop, it can’t handle more at the same time.\n\nAnd if you add a normal-map in your model’s texture, this cheap dynamic lighting works on it:\n\nProjected texture and Cascaded Shadows\n\nFew words to finish the study with dynamic lighting. Projected textures is a technology that appeared with Half-Life 2: Episode Two in 2007, it consists of a point-entity projecting a texture in the chosen direction, with a chosen opening angle (fov). The texture is projected with emissive properties (it can only increase the brightness, not lowering it) and it can generate shadows or not. The great thing with this technology is that it’s fully dynamic, the env_projectedtexture can move and/or aim at moving targets. This technology is used for example on flashlights in Source games. But as usual, there is also a drawback: most of the time you can only use only 1 projected texture at a time, modders can change this value quite easily but on Valve games it is always locked on 1.\n\nThe cascaded shadows system is only used on CS:GO. The concept is quite similar from a projected texture but it doesn’t increase the brightness, it only adds finer shadows. It is used for environment lighting, using much smaller luxels than for the lightmaps and it is fully dynamic. It starts from the tools/toolsskybox textures of the map and cast shadows if it meets any obstacle. Shadows from the lightmap are most of the time low resolution and the transition between a bright and a dark area is blurry and wide. Therefore, the cascaded shadow will be able to draw a clear shadow around the one from the lightmaps.\n\nWhen an object is too small to get a shadow in the lightmap, it will be visible thanks to the cascaded shadows. There are 3 levels of detail for cascaded shadows on Counter-Strike, you can configure the max distance at which the cascaded shadows will work in the env_cascade_light entity at the parameter Max Shadow Distance (by default it’s 400 units). The levels of detail will be distributed within this range, for example:\n\nSince cascaded shadows and projected textures share some technology, you can’t use them both at the same time.\n\nConclusion\n\nI really hope you have found this article interesting and learned at least few things from it. I believe most of these informations are not the easiest to find and it’s always good to know how your tools work, to understand their behavior. Source Engine 1 is old and its technologies might not be used anymore in the future, more powerful and credible technologies are released frequently but it’s always good to know your classics, right?\n\nI would like to thank Thrik and ’RZL for supporting me to write this article, and long live the Core!\n\n// Written by Sylvain \"Leplubodeslapin\" Menguy\n\nAdditional commands for fun\n\nMat_luxels 1 // Allows you to see the lightmaps grids Mat_fullbright 1 // Disables all the lighting (= fullbright). On CS:GO, cascaded shadows stay and you should delete them as well (cf next command) Ent_fire env_cascade_light kill // KILL WITH FIRE the cascade shadows entity Mat_drawgray 1 // Replace all the textures with a monochrome grey texture, useful to work on your lighting Mat_fullbright 2 // Alternative to Mat_drawgray 1 Bonus:\n\nMat_showlowresimage 1 // Minecraft mode\n\nRead more...\n\n11 comments\n\n12,396 views\n\nAfter the announcement of the Reddit + Mapcore mapping contest, the website has welcomed many newcomers. A proof that, even if it is a twelve year old game engine, Source engine attracts map makers, and there are lots of reasons for that. It is common knowledge that technology has moved forward since 2003, and many new game engines have found various techniques and methods to improve their renderings, making the Source Engine older and older. Nevertheless, it still has its very specific visual aspect that makes it appealing. The lighting system in Source is most definitely one of the key aspects to that, and at the end of this article you will know why.\n\nAbout the reality...\n\nLight in the real world is still a subject with a lot of pending questions, we do not know exactly what it is, but we have a good idea of how it behaves. The most common physic model of light element is the photon, symbolized as a single-point particle moving in space. The more photons there are, the more powerful light is. But light is in the same time a wave, depending on the wavelengths light can have all kind of color properties (monochrome or combined colors). Light travels through space without especially needing matter to travel (the space is the best example; even without matter the sun can still light the earth). And when it encounters matter, different kind of things can happen:\n\nLight can bounce and continue its travel to another direction Light can be absorbed by the matter (and the energy can be transformed to heat) Light can go through the matter, for example with air or water, some properties might change but it goes through it And all these things can be combined or happen individually. If you can see any object outside, it is only because a massive amount of photons traveled into space, through the earth’s atmosphere, bounced on all the surfaces of the object you are looking at, and finally came into your eyes.\n\nHow can such a complex physical behavior from nature be simulated and integrated into virtual 3D renderings?\n\nOne of the oldest method is still used today because of its accuracy: the ray-tracing method. Just to be clear, it is NOT used in game engines because it is incredibly expensive, but I believe it is important to know how and why it has been made the way it is, since it probably influenced the way lighting is handled in Source and most videogame engines. Instead of simulating enormous amount of photons traveling from the lights to the eye/camera, it does the exact opposite. If you want a picture with a 1000x1000 resolution, you will only need to simulate the travel of 1 000 000 photons (or “rays”), 1 for each pixel. Each ray is calculated individually until it reaches the light origins, and at the end the result is 1 pixel color integrated in the full picture.\n\nBy using the laws of physics we discovered centuries ago, we can obtain a physically-accurate rendering that looks incredibly realistic. This method is used almost everywhere, from architectural renderings to movies. As an example, you can watch The Third & The Seventh by Alex Roman, one of the most famous CGI videos of all time. And because it is an efficient way to render 3D virtual elements with great lighting, it will influence other methods, such as the lightmap baking method.\n\nLightmap baking\n\nOKAY LET’S FINALLY TALK ABOUT THE SOURCE ENGINE, ALRIGHT!\n\nA “lightmap” is a grid that is added on every single brush face you have on your map. The squares defined by the grid are called Luxels (they are kind of “lighting pixels”). Each luxel get its 2 own properties: a color and a brightness. You can see the lightmap grids in hammer by switching your 3D preview to 3D lightmap grid mode.\n\nYou can also see them in-game with the console command mat_luxels 1 (without and with).\n\nDuring the compilation process, a program named VRAD.exe is used. Its role is to find the color and brightness to apply for every single luxel in your map. Light starts from the light entities and from the sky (from the tools/toolsskybox texture actually, using the parameter values that has been filled in the light_environment entity), travels through space and when it meets a brush face:\n\nIt is partially absorbed in the lightmap grid A less bright ray bounces from the face Here is an animated picture to show how a lightmap grid can be filled with a single light entity:\n\nWhen you compile your map, at first the lightmaps are all full black, but progressively VRAD will compute the lightmaps with all the light entities (one by one) and combine them all at the end. Finally, the lightmaps obtained are applied to the corresponding brush faces, as an additive layer to the texture used on that face. Let us take a look at a wall texture for example.\n\nOn the left, you have the texture as you can see it in hammer. When you compile your map, it generates the lightmaps and at the end you obtain the result on the right in-game. Unfortunately, luxels are much rougher, with a lower resolution, more like this.\n\nOn the left you have a lightmap grid with the default luxel size of 16 units generated my VRAD, a blur filter is applied and you obtain something close to the result on the right in the game.\n\nIn case you did not know, you can change the lightmap grid scale with the “Lightmap Scale” value with the texture tool. It is better to use values that are squares of 2, such as 16, 8, 4 or even 2. Do not go below 2, it might cause issues (with decals for example). Only use lower values than the default 16 if you think it's really useful, because you will drastically increase your map file size and compilation time with precise lightmap grids. Of course, you can also use greater values in order to optimize your map, with values such as 32, 64 or even 128 on very flat areas or surfaces that are far away from the playable areas. You can get more infos about lightmaps on Valve’s Wiki page.\n\nBut as we said before, light also bounces from the surface until it meets another brush, using radiosity algorithms. Because of that, even if a room does not have any light entity in it, rays can bounce on the floor and light the walls/ceiling, therefore it is not full black.\n\nHere’s an example:\n\nThe maximum amount of bounces can be fixed with the VRAD command -bounce X (with X being the maximum amount of bounces allowed). The 100 default value should be more than enough.\n\nAnother thing taken into account by VRAD is the normal direction of each luxel: if the light comes directly against the luxel or brushes against it, it will not behave in the same way. This is what we call the angle of incidence of light.\n\nLet us take the example of a light_spot lighting a cylinder, the light will bright gradually the surface - from fully bright at the bottom to slightly visible at the top.\n\nIn-hammer view on the left, in-game view on the right\n\nLight Falloff laws\n\nOne of the things that made the Source Engine lighting much more realistic than any others in 2004 is the light falloff system. Alright, we saw that light can travel through space until it meets something, but how does it travel through space? At the same brightness, whatever the distance is between the light origin and destination? Maybe sometimes yes… but most of the time no.\n\nImagine a simple situation of a room with 1 single point light inside. The light is turned on, it produces photons that are going in all the directions around it. As you might imagine, photons are all going in their own direction and have absolutely no reason to deviate from their trajectory.\n\nAt one time, let’s picture billions of photons going in all the directions possible around the light, the moment after, they are all a bit further in their own trajectory, and all the photons are still there, in this “wave”. But, as each photon follows its own trajectory, they will all spread apart, making the photon density lower and lower.\n\nAs we said before, the more photons there are, the more powerful light is. And the highest the density, the more intense light is. Intensity of light can be expressed like this:\n\nYou have to keep in mind that all of this happens in 3D, therefore the “waves” of photons aren’t circles but spheres. And the area of a sphere is its surface, expressed like this:\n\n(R is the radius of the sphere)\n\nIf we integrate that surface area in the previous equation:\n\nWith ♥ being a constant number. We can see the Intensity is therefore proportional to the reverse of the square of the distance between the photons and their light origin.\n\nSo, the further light travels, the lower is its intensity. And the falloff is proportional to the inverse of the square of the distance.\n\nConsequently, the corners of our room will get darker, because they are farther away from the light (plus they don’t directly face the light, the angle of incidence is lower than the walls/floor/ceiling).\n\nThis is what we call the Inverse-Square law, it’s a very well-known behavior of the light in the field of photography and cinema. People have to deal with it to make sure to get the best exposure they can get.\n\nThis law is true when light spreads in all possible directions, but you can also focus light in one direction and reduce the spread, with lenses for example. This is why, when Valve decided to integrate a lighting falloff law in their engine, they decided to use a method not only following the inverse-square law but also giving to mapmakers the opportunity to alter the law for each light entity.\n\nConstant, Linear, Quadratic... Wait, what?\n\nIn math, there is a very frequent type of functions, named polynomial functions. The concept is simple, it’s a sum of several terms, like this:\n\nEvery time, there is a constant factor (the “a” thing, a0 being the first one, a1 the second one, a2 the third one...), multiplied with the variable x at a certain degree:\n\nx^0 = 1 : degree 0 x^1 = x : degree 1 x^2 : degree 2 x^3 : degree 3 ... And\n\na0 is the constant named “constant coefficient” (associated to degree 0) a1 is the constant named “linear coefficient” (associated to degree 1) a2 is the constant named “quadratic coefficient” (associated to degree 2) Usually, the function has an end, and we call it by the highest degree of x it uses. For example, a “polynomial of the second degree” is written:\n\nThen, if we take the expression from the inverse-square law, which was:\n\nWith a2 = 1 and D being the variable of distance from the light origin.\n\nIn Source, the constant ♥ is actually the brightness (the value you configure here).\n\nIt is simply an inverse polynomial of the second degree, with a0 and a1 equal to zero. And we could write it like this:\n\nOr...\n\nAnd here you have it! This is approximately the equation used by VRAD to determine the intensity of light for each luxel during the compilation. And you can alter it by changing the values of the 3 variables constant, linear and quadratic, for any of your light / light_spot entity in your level.\n\nActually you set proportions of each variable against the other two, and only a percentage for each variable is saved. For example:\n\nAnother example:\n\nBy default, constant and linear are set to 0 and quadratic to 1, which means a 100%quadratic lighting attenuation. Therefore, by default lights in Source Engine follows the classic Inverse-Square law.\n\nIf you look at the page dedicated to the constant-linear-quadratic falloff system on Valve’s Wiki, it’s explained that the intensity of light is boosted by 100 for the linear part of equation and 10 000 for the quadratic part of equation. This is due to the fact that inverse formulas in equations always drop drastically at the beginning, and therefore a light with a brightness of 200 would only be efficient in a distance of 5 units and therefore completely pointless.\n\nYou would have to boost your brightness a lot in hammer to make the light visible, that's what Valve decided to make automatically.\n\nThe following equation is a personal guess of what could be the one used by VRAD:\n\nWith constant, linear and quadratic being percentage values. The blue part is here to determine the brightness to apply, allowing to boost the value set in hammer if it is as least partially using linear or quadratic falloff. The orange part is the falloff part of equation, making the brightness attenuation depending of the distance the point studied is from the light origin.\n\nThe best way to see how this equation works is to visualize it in a 2D graph:\n\nhttps://www.desmos.com/calculator/1oboly7cl0\n\nThis website provides a great way to see 2D graphics associated to functions. On the left, you can find all the elements needed with at first the inputs (in a folder named “INPUTS”), which are:\n\na0 is the Constant coefficient that you enter in hammer a1 is the Linear coefficient a2 is the Quadratic coefficient B is the Brightness coefficient In another folder are the 3 coefficients constant, linear and quadratic, automatically transformed into a percentage form. And finally, the function I(D) is the Intensity function depending on the distance D. The drawing of the function is visible in the rest of the webpage.\n\nTry to interact with it!\n\nThis concludes the first part, the second part will come in about two weeks. We will see some examples of application of this Constant-Linear-Quadratic Falloff system, and a simpler alternative. We will also see how lighting works on models and dynamic lighting systems integrated in source games.Thank you for reading!\n\nPart Two : link\n\nRead more...\n\n17 comments\n\n15,408 views\n\nWhat is Agency?\n\nJust in case you have never heard of Counter Strike: Global Offensive, it's a hugely popular online FPS, successor to Counter Strike: Source and the original Counter Strike. The original came out in 1999 and the core gameplay has remained almost unchanged. Players are split into two teams and challenge each other in various game modes such as Bomb Defusal (one team has to plant and detonate the bomb while the other tries to stop them) and Hostage Rescue (one team must rescue the hostages whilst the other attempts to prevent that). The Bomb Defusal mode is by far the most popular, with maps designed with such detail that players can predict down to the second when another player is due to arrive in a certain area of the level. It's also the only mode played in competitive events and for huge prize money.\n\nThis leaves the poor Hostage Rescue mode sitting on the sidelines twiddling it's thumbs and feeling a little rejected. In part this is because the Hostage Rescue mode is far more of a roleplaying experience, often with very poor odds of success for the team tasked with doing the rescuing. Often the levels are designed in such a way that the defending team has a large positional advantage, where simply staying-put will give them a good chance of winning.\n\nThat's where we can start talking about Agency. Agency is a Hostage Rescue level, created as a collaboration between level designer Patrick Murphy, and myself doing the art. The basic idea being that Hostage Rescue could be just as precise and exciting as Bomb Defusal. It's been included in three official releases from the games creator, Valve, as part of their community level packs: Operation Bravo, Operation Phoenix and Operation Bloodhound. Phoenix being a community-voted choice, which was especially great to see that players enjoyed the style of gameplay and visuals that Agency brought with it.\n\nIn this article I will go over the process of creating the art, from props to set dressing, texture creation and lighting, while maintaining a visually pleasing aesthetic and serving to enhance the gameplay. This isn't a postmortem but rather a walk-through of the various stages, hopefully to give some ideas to others, with lessons learned both positive and negative.\n\nIteration from Whitebox to Final\n\nStarting out you should always have an idea of what you're going to create, even if it is quite vague, as it'll point you in the right direction for both creating architectural spaces and letting your imagination fill in the blanks as you build the basic shapes of the level. We knew we were going to build an office space, but style was leaning towards an older government building with red bricks and musty wood. As I started to put in some basic textures we decided it felt too bland, and similar to other levels in the game. In order to stand out and create something really interesting and intriguing that would entice players to want to explore the level we decided to modernize the space and use white as the primary colour - this would help players see each other more easily and provide a striking visual setting it apart from other levels.\n\n\"Modern Office\" is not exactly a style that has a single look, if you search for images you'll get back a lot of contrasting designs and ideas, trying to put every single one of those into a level would create a visual mess with no consistency. It's important to choose the right references for what you are building, something that looks cool in a single image or from a specific location might not fit into the theme of the level, and in a worst-case-scenario it might actually start to detract from the level as a whole. Trying to cram in as much content as possible simply makes your level feel less unified and jarring.\n\nUnfortunately when you are presented with so many fantastic designs and ideas it can be hard to pick out what is important. After settling on the location: a modern advertising agency's office, I broke down the needs of the level into a few different categories:\n\nArea Specific General Use Overall Theme The Area Specific content is \"hero assets\" for each location in the level. These are the things that help the player tell different areas apart from each other, a reception desk, a kitchen, a bathroom, etc. Assets that won't be used anywhere else except in their specific location.\n\nExamples of Area Specific Content\n\nThe General Use content is the backbone of the building, it's wall sockets, ventilation tubes, sprinklers, desks and chairs. The things that could be used anywhere and would blend in to the background and not stand out unless you were specifically looking for them.\n\nExamples of General Use Content\n\nThe Overall Theme content is what sells the theme of the level to players, advertising boards, company logos, large art installations and so on. These can be used everywhere but sparingly and should only be used as a subtle reminder to the player of where they are thematically. They shouldn't detract from the Area Specific content but should stand out more than the General Use content. This came in the form of abstract paintings, corporate logos, rotating advertisement panels and so on - things that would subtly tie the level together.\n\nOnce these categories were laid out, searching through reference images became much simpler as you know what you need and only have to find an interesting design or detail that enhances a specific category.\n\nThis isn't to say that everything was completely planned out or that development was flawless. Sticking to a plan only works until you open the editor, and if you try to force something you'll end up frustrated when it consistently fails to work. As an example we originally had the level set on the ground floor of a tall skyscraper. I spent a few weeks working on content for the ground but never really getting it to feel right within the theme of the level: the contrast between a dirty exterior street section and a spotless interior didn't feel right for the level, and felt a little too similar to another Counter Strike level. Patrick played around with some ideas and tried something I was afraid of: simply deleting everything I had done on the outside and adding an epic city vista. Instantly it felt right. The important thing to take away from this is that just because you have worked on something doesn't mean it's the right thing to be working on, and that getting input from other people with different ideas can vastly improve what you are working on.\n\nThe first mockup of Agency's rooftop exterior\n\nThe same space after an art pass\n\nAnother incredibly important thing I realised is making use of modular assets. If you are going to duplicate something in your particular modelling software you should ask yourself: is this efficient? Chances are you're just making things harder to change later and locking yourself into a particular shape; eg: a walkway has a railing around it, you model the entire railing as a single object. Now if you need to change that walkway a month later you're going to have to go back and change your railing model. It's better to create a smaller tiling mesh that can be used multiple times, as often you'll find you can use that model in other areas and in different ways than you had initially intended. You're simply applying the concept of tiling textures to models, and in the process saving yourself a lot of time.\n\nA Believable Clean Art Style\n\nCreating a clean environment can often be more difficult and time consuming than a very dirty and cluttered one, simply because any mistakes are magnified by the lack of other objects to disguise them. A room with a single chair in the middle is going to end up with the focus being on that chair, if you fill that room with a hundred chairs you're going to be less concerned with the details of the chair and more worried about why someone would fill a room with a hundred chairs.\n\nIn the modern office setting of Agency it would have made little sense to fill it with props and clutter, but a large empty space would just feel unfinished. A delicate balance of larger architectural shapes and smaller objects was needed. I like to think of this as functional art: it serves a purpose in the lore of the game world. Window and door frames, electrical sockets, thermostats and card swipes along with the maintenance apparatus of ventilation systems. These are the general use objects mentioned earlier, they fill out space and prevent an empty wall or ceiling from actually looking empty and at the same time they contribute to the believability of the level. It's important to think of the infrastructure of the building when placing these assets - if a wall has an air vent on it then the wall needs to be thick enough to support the ventilation pipes that feed it, Card swiping mechanisms need to be placed near doors at the correct height, electrical sockets should be placed logically in areas where they would be of use to the fictional inhabitants of the level and so on.\n\nSeveral examples of functional art details\n\nOne of the most important things to do right when creating clean environments is to get the most out of the materials. It's not possible to cover every surface in dirt or decals, so the surfaces themselves become your way of showing detail.\n\nFor Agency this was achieved by making liberal use of the phong shading techniques in the Source engine for models, and cubemaps for world textures. Almost all models in the level have some amount of phong shading, and although it doesn't produce a completely physically accurate result it can be used to create materials and surfaces that look relatively accurate. Simply by increasing or decreasing the intensity of the phong amount allowed for a vast majority of the levels surfaces to be rendered accurately. As I didn't need to have a lot of noisy detail in the materials due to the clean style I simply used a small phong texture as a mask for 75% of the models and let the lighting and general shapes of the models do the rest of the work.\n\nSimple phong shading to mimic real world materials\n\nAs most of the surfaces had a single layer of material, ie paint or coloured metal, the phong shading could be completely even without breaking the illusion; however some of the dirtier surfaces such ventilation tubes and water pipes had several layers: a painted metal surface with area peeled away to reveal with metal underneath or a layer of dust. These had specific masks that would enhance the different materials, and showing wear and tear in the background assets added an extra layer of depth without compromising the clean style.\n\nMost of these textures were created with dDo, an excellent tool for quickly creating textures. I generally started with quite a dirty texture preset and toned down the details and noise until they were barely perceptible surface imperfections.\n\nAgency features probably close to 95% custom art, and that's a lot of work for a single person. Using dDo allowed me to make a lot of content relatively quickly, and kept it all visually consistent.\n\nThe process of creating the assets with dDo was quite simple: first I modeled the basic ingame asset, then did a very quick and dirty placement of edge loops that allowed me to smooth the mesh and get a workable high poly. A very rough normal map was baked (along with a more solid ambient occlusion map), this rough normal map would never make it into the game, it was used purely for texturing with dDo. This rough-and-dirty technique was mostly used on the more general purpose assets that nobody would spend a lot of time looking at. For the objects that were in high traffic areas or that required finer detail a more robust normal map was created.\n\nTiling textures used throughout the world were photo-sourced and tiled in Photoshop. A few examples worth pointing out are the plaster wall textures and the marble floors:\n\nThe image above shows the ingame result, the diffuse texture, and the normal map of the standard plaster that is used throughout the level. The normal map was authored at 1024x1024 compared to the diffuse texture which was 512x512. I created several colour variations of the diffuse texture and for a very plain surface using a 1024x1024 diffuse didn't make much sense. The final touch was to add a subtle cubemap effect to bring out the normal map and add interesting coloured reflections in various areas.\n\nAnother example is a marble floor used throughout the level. The normal map is unrealistic in that it portrays an uneven bumpy surface when in fact it is more likely to be uniformly flat. However to break up the reflections and add some visual interest to such a large and empty area I added a subtle bumpy normal map which warps the reflections, but is subtle enough that it doesn't get picked up by the lighting and actually appear like a lumpy mess.\n\nGood shading only gets you part of the way there, however. A poorly scaled model can break immersion instantly, especially when you are trying to create a believable real-world environment. There are tried-and-true metrics for Counter Strike so having a base to work from helped immensely, but these only give you a good starting point or a bounding box for your object. It's important to study real world reference and make sure your object is proportional to the world around it and also to itself. A unit in Hammer is an inch, so having wood that's 2 units thick, or a doorway that is 1.5m wide quickly makes things look wrong.\n\nWorking with Designer Blockouts, and not Destroying Gameplay\n\nAgency was a collaboration, with Patrick doing the design work and me doing the visuals, this meant there was a lot of potential for overlap and working on the same areas, the potential for breaking things was huge.\n\nOften when you create things as an individual you don't have to worry about version control or stepping on someone else's toes, however when you work with other people either for pleasure or business you, as an artist, need to change your mindset. You are not creating a portfolio piece but rather something functional that has to withstand hundreds of hours of real people playing it.\n\nYour first role is to support the designer, and this benefits you as well. By creating the basic structures of the level: doorways, window frames, stairs, railings, cover objects etc, you are allowing them to work with the final assets and tweak gameplay according to those assets. Nothing needs to be finalized instantly, it's better to provide a rough mockup of the intended asset so the designer can play around with it and give feedback on the shape, size and silhouette. Once you are both confident it's going to work they can populate the level with these assets which saves you time in the long run, and once you finalize the model and textures they are going to be updated across the entire level without having to manually replace assets.\n\nIt can be difficult to determine exactly when you should start an art pass, especially when a level is constantly evolving. Rather than sitting idly by whilst Patrick was ironing out the design of the level I started on the creation of a few visual test levels to explore materials, lighting and modular assets. Once the first iterations of Agency were created, with rough shapes for important cover and controlling lines-of-sight. I went in and created an art pass and altered many of these original gameplay ideas, simply experimenting with different shapes and designs for the rooms. We had a constant dialogue and never considered something finalized just because it was finished. Playtests would determine whether an idea was valid or not in a way that speculation can only hope for. The most important lesson learned during this process of constant iteration was that work is very rarely wasted, and it is far more important to stay true to a gameplay ideal than to have an area that looks interesting in a screenshot but utterly fails when players get their hands on it. A box is a box is a box, it is down to you as an artist to imagine how that box can be interpreted within the context of the environment.\n\nInitial art pass ideas for the central area (above) versus the end result (below)\n\nInitial art pass ideas for the reception (above) versus the end result (below)\n\nInitial art pass ideas for a hostage (above) versus the end result (below)\n\nLighting\n\nAn important part of any environment is the lighting. Too contrasted and moody and it becomes hard to identify players, too bright and monotone and it becomes boring and a strain on the eyes. For Agency I used a series of instanced lighting setups: a model to visualise the light source, a spot light to direct the light, and a sprite or light cone to add a visual effect around the light. Each light setup was unique to the type of model used for the actual light source, ie: all spotlights were identical, all fluorescent lights were identical etc. This meant I could change a single light and have the others update automatically, and always get an accurate result.\n\nThen it was just a case of placing these different types of lights where they logically made sense in the environment, and if an area was too dark an appropriate light source was added, and if an area was too bright lights could be moved around or removed entirely. This made it quite easy to light as everything was guided by reality, which has plenty of reference material, and had the side effect of helping to make the environment more believable. By using various colours on the floor and walls I could direct lights towards them and take advantage of the Source engine's excellent radiosity and spread interesting colours to nearby surfaces.\n\nIn many areas the ceiling was opened up to reveal the sky and to let natural sunlight into the interior spaces, this was done to provide contrast to the electrical lights and to get extra radiosity bounces into the environment. Some areas had lights removed or toned down to allow other more important gameplay areas to stand out, for example the image below shows how the corridor here was darkened both by using darker textures and by using restrained lighting to make the room in the distance appear brighter as this is an area that enemy players will appear from.\n\nThis could have been taken even further by possibly using emergency exit signs to add hints of colour to important gameplay areas and chokepoints. A consistent lighting language would have helped guide players during the first few times playing the level. There are some large open spaces that would have benefited from some coloured screens or lighting panels, or possibly making some of the larger glass surfaces tinted, to add a little extra colour and prevent such a monotone look whilst not being over-bearing or detracting from the realistic style of lighting I was aiming for.\n\nFinal thoughts\n\nDuring the course of developing Agency I had a chance to learn a few things and come out the other end a, hopefully, better artist.\n\nSo, what went well?\n\nThe iteration process never had any hiccups, by using modular content and being prepared to discard ideas and art styles that weren't working we ended up with a better level. If we had tried to force the original idea of a ground-level government office we would have ended up with a completely different level, complete with underground parking lots and elevator shafts. Exciting stuff!\n\nThe power of iteration cannot be understated, and understanding that a mockup or a blockout of a level is simply a temporary phase that doesn't represent the end result. Areas changed drastically between versions, sometimes due to design requirements, and sometimes of shifts in art style; but each version was better than the last, more refined and polished.\n\nWhat went less well?\n\nIn direct contrast to the statement above, sometimes the iteration interfered with more important tasks. I got stuck on areas trying to get them to work instead of letting them sit for a while and returning to them later. I tried to force an idea for the exterior part of the level and it never felt right and consumed way too much time, when all it took was getting some outside perspective. Luckily during the process I learnt to trust designers when it comes to art, just because they might not build high poly meshes doesn't mean they aren't artistic.\n\nAnother problem was building too much content completely unique for an area which meant when we inevitably changed things it became time consuming to shift assets around, and makes it less easy for others to re-use that content without creating an almost replica of the area it was designed for. These unique assets helped sell the realism of the level but made them harder to work with.\n\nHopefully this has been interesting and insightful!\n\nRead more...\n\n26 comments\n\n35,187 views\n\nYour objective We'd like you to re-imagine a scene of your choosing from any of the Half-Life games. To be clear, we're not looking for remakes of scenes — we want you to completely reinterpret a scene, approaching it from a fresh perspective. You can, however, use assets from Black Mesa.\n\nHere are some examples of ideas you could develop:\n\nThe Tram ride at the beginning of Half-Life. What if somebody else pushed the cart? Gordon was late, so they got somebody else and the resonance cascade happens when Gordon is still on the tram. It crashed to the ground but leads him to a previously unseen section of Black Mesa. Black Mesa. What if Half-Life's infamous research facility were hidden underneath a city or town rather than out in the desert? Surface Tension. This particular event occurs on the side of a Citadel. Yes, it doesn't fit the story, but that's not important. This is about high cliffs and long falls. Opposing Force. What if Black Mesa were devastated by this game's nuclear bomb quite early on during the story, leaving Adrian Shepherd to navigate a version of the research facility resembling a post-apocalyptic nightmare? Point Insertion. Instead of arriving at a city train station, Gordon finds himself in a deserted and derelict village station, perhaps near enough to Ravenholm, to feel the threat. Being seen by Civil Protection may be the least of his worries. City 17. What if the Combine had chosen the United States, France, or London to be their primary city? The only limitation is your imagination, which we want to see run wild — create the most wonderful interpretation of Half-Life's universe that you can conceive. Whether your project is big or small, you should strive to create something that will delight Half-Life fans.\n\nHow to share your progress Because this is a joint challenge, there are two places for this:\n\nWhere you may discuss the challenge and share progress of your work, which we hope that you will! RunThinkShootLive challenge article\n\nWhere you can do the same. Both will be compiled together for judging and articles after the challenge ends, so you don't need to post in both places (although it's not a problem if you do).\n\nPrizes Prizes are being donated by both MapCore and RunThinkShootLive, in addition to your work being immortalised in our archives for others to enjoy.\n\nFor the winner\n\nA lightly used hardback copy of Valve's rare Half-Life 2 development book, Raising the Bar, kindly donated by Don aka Unq. This book is a must-read for any fan of the game, and particularly those interested in its development process. In addition to being a collectable in its own right, this particular edition is signed by Valve staff, arranged by a friend of Phillip's who works there.\n\nFor the almost-winner\n\nDon't feel bad, you nearly made it. Have a plush companion cube plus a MapCore mug or t-shirt, and know that we love you.\n\n...and for everyone else\n\nAll entries, except the winner and almost-winner, will be entered into a random draw to win Sniper Elite 3.\n\nChallenge dates Begins: Thursday, 19th March, 2015 at 11am GMT\n\nEnds: Tuesday, 28th April, 2015 at 11am GMT\n\nRules You can't have a challenge without rules, right? Here are the requirements:\n\nMaximum one map per mapper per entry. The map must have at least one enemy and one weapon; i.e. playable. The map must be original and not have been released publicly before. The map must run in a system with only Half-Life 2: Episode 2 installed By entering the competition you grant RunThinkShootLive.Com and MapCore.org the right to release the map as part of the RaiseTheBarVille Mod. Maps must not appear for download before the release and for one month after the release of the mod. No assets from retail games other than Half-Life 2, Half-Life 2: Episode 1 or Half-Life 2: Episode 2 are allowed. Other assets are allowed with written permission from their original authors, which must be included in the entry. The organizers' decision is final and no correspondence will be entered into about it. The map must have a proper name. The map must have a proper filename: MapName_rtbv.bsp Each entry should be accompanied by a correctly formatted (vtf) background and chapter image. The name is not important, as it will have to be changed. All entries must be sent to: runthinkshootlive@gmail.com no later than the deadline. Frequently Asked Questions There have been a few questions asked about this challenge, so hopefully this will help you. However, if your question is not here and you have doubts, please don’t hesitate to ask, no matter how small your query.\n\nCan I use assets from Black Mesa Source?\n\nYes, by all means, but you must pack them into your BSP. Yes, we know that may mean redundancy, but the map MUST run in a system that ONLY has Episode Two installed. We don’t want to force players to download BM.\n\nCan an entry be a joint entry?\n\nYes, but there I still only one prize. You’ll have to fight to the death to decide who gets it.\n\nWhich games can I re-imagine?\n\nHalf-Life, Opposing Force, Blue Shift, Half-Life 2, Lost Coast, Episode One, or Episode Two.\n\nCan I use assets from Lost Coast?\n\nYes, pack them into your BSP.\n\nWhat about recreating a scene that was say… cut from one of the main games? Technically a re-imagining of a re-imagining.\n\nNo, but you could use the cut area as inspiration for something that was released in one of the games. What we don’t want people to do is remake a cut section from a game.\n\nCan simply change a location?\n\nWell, yes, but again, there should be some element of “What if…?” in the map. Simply changing a town for a city is only part of what we are looking for. You map should really be the result f some change, however minor, in the story.\n\nHow do you define a scene?\n\nIn the context of this challenge a “Scene” is a part of the game that has some effect on the following game. So, changing one location for another is not really enough. What we are looking for is something that takes the game in a different direction.\n\nCan we submit mini-mods instead of a map?\n\nSorry, no. Your entry must be a self contained map.\n\nCan I submit something artsy?\n\nSure, but it must have at least one enemy, one weapon and a player spawn.\n\nCan we decompile or remake specific locations from Valve maps?\n\nWe think it’s best if we disallow this. Mainly to avoid any potential problems. Please start your map from something new. However, we will allow a very small section if this is just used to “fit into the story”. For example, in Episode One, at the beginning when Alyx and Gordon are thrown into the Citadel. If you map started at the bottom but then things went very differnt from the game, that would be okay.\n\nHow should I start my map?\n\nWe suggest a little text at the beginning to set the scene. Something like…”What if Gordon were late and somebody else push the cart? Let’s find out“. It’s not compulsory but it might help.\n\nWhat’s the limit of changes we can make?\n\nWow, that’s a tough question. Your changes MUST NOT affect maps that may be after yours in the final mod.\n\nMy question is not here, what should I do?\n\nAsk in the RTSL post or MapCore thread. Somebody will respond quickly.\n\nClosing words We really hope that you have fun with this. MapCore has a very long history of facilitating development of levels for Half-Life and its mods, in fact we were founded around that very concept. As such, we're hopeful that the community still has that passion for one of gaming's finest classics, and is keen to apply modern-day skills and technologies to bringing Half-Life's universe to life — because Valve sure isn't doing it any time soon!\n\nRead more...\n\n33 comments\n\n12,191 views\n\nThis is the third article in a three-part series. Part One / Part Two / Part Three\n\nCombat tutorial The entire space for this first combat against humans is built to be an action tutorial. With no elevation changes in the space, and the single red tone of textures, this is the simplest arena one could design, which foreshadows a quick and easy fight. Notice the number of crates and cover objects on the ground, and their geometrical position. Clear “camps” are established on either side. Both NPCs are scripted only to move left and right, never to flank Joel, which leaves players with plenty of time to assess the situation. This space is built to encourage players to flank these NPCS to the left (Tess crouches to the right of the player). Another visual cue used to great effect here are the electricity lines, that circle over the space. They make the space feel tighter, and add a loop that mirrors the path down below.\n\nOne also finds all three distinctive signs of a fight being over in action games: Tess stands and starts walking again (her AI state changes from InCombat to Normal), she starts a conversation with Joel and the combat music ends. In terms of scripting, these three signs are tested against the state of all spawned enemies (in this case, whether they’re alive).\n\nAt the end of the passage under the arch, another instance of the “boost and pull” move, once again the only gate short of an actual door that can be used in this game. Right after this, a typical example of an “S” shaped corridor. Historically found everywhere in FPS games a decade ago, they’re still used in today’s non open-world games as occluders and loading corridors between two heavy areas. And what occludes one way works in multiplayer too, you’ll find them in many MP FPS levels (Counter-Strike, Team Fortress 2, Left 4 Dead, etc.) to break lines of sight and separate large areas to obtain the highest frames per second.\n\nAs a side note, and something you may have noticed all along these levels, the environment artist broke up the monotony of this flat wall by making an entrance to a courtyard, to the left of this corridor. You could for instance find this same addition of depth inside the transition building in part 2 where players first learn how to heal themselves.\n\nAs a side note, one of very few bugs in The Last of Us can be seen here, as the shader for the gameplay helpers is rendered through walls (normal behavior) but also over Joel's head.\n\nAfter dropping through the hole in the fence – another typical Naughty Dog gating mechanism - a new cinematic starts as players enter the combat arena. Enemies are now scripted much more freely, with their back to the player to enforce a stealth approach. The shape of the combat space itself is built to allow NPCs to move in long straight ways. The left hand side’s purpose is actually solely for this NPC to go there and allow for more movement in stealth (added difficulty) over the initial takedown against the infected in part 2. Tess continues to help kill two of the four enemies, as long as players play by the rules of this tutorial. Both signs above the doors to the building are once again not placed here by chance; the green one indicating the ideal path inside, and the red one a sure way to get spotted. And with both signs having these warm colors, the rest of the building wears a very cold blue to make the signs much more noticeable.\n\nThis second combat also introduces dialogues between characters. Beyond their initial role as threat identification and background information, these conversations also serve as cues that NPCs are likely to change their patrol path once done. It’s therefore important to design these dialogues so they are not ambiguous when they stop.\n\nAs with the gate to the previous occluding corridor, this space also features a strong light to indicate the exit. We’ll see the same light used in all four of these combat tutorials each time to direct the player to the exit of the arena. While this doesn’t seem too necessary in these instances, players’ orientation is often confused when leaving nonlinear spaces in which they were dedicating their attention to the action rather than the environment. These help players getting their bearings again. And now that doors are used in combat spaces - wide open not to collide with players or NPCs fighting - , they’re also textured in strong warm colors to be seen better. Doors in exploration spaces in this game never bear these colors.\n\nFor this third and final tutorial combat (once again, magical game design number 3 shows up), Tess stops helping in any way other than shooting if the combat gets to that but a new mechanic is presented that offsets Tess. Joel can now pick up objects to create a diversion, essentially what Tess was doing before although she can’t be seen by NPCs. That’s a great way to progressively increase difficulty while not changing enemy type (all humans). The distance between the safe area players start in and the first threat is made longer to increase difficulty too and the same background info is given by NPCs to locate them with the help of the conveniently placed window. The orientation of the starting piece of cover also indicates the sense of direction of the upcoming fight, and where the exit will be located.\n\nA sign of a space specifically designed for a fight is to open up multiple entry points to each zone. Here this staircase lost its railings to allow players to go over to the second floor. A simpler exploration area would most likely not have this, and in some cases would have been worse for it if it did as player exposition requires certain camera shots. Here the game moves away from being purely about exploration and makes players evolve on a two-floor loop, gated to a coop move with Tess. Many fights in this game are optional, but this isn’t one of them and the space reflects it.\n\nAs a final reward to completing all combat tutorials, Joel is rewarded with finding his very first shiv, while still inside the combat space. The shiv, much like the first aid kit tutorial (see part 2) is forced to the player as its effect is as straightforward as its game mechanics are complex (upgrades, use). Here the elevation, on top of increasing the difficulty of the fight, also serves to create side exploration spaces. Notice the color of the handrails that add a lot of depth to this scene and help players focus on one of the purposes of this tutorial: elevation.\n\nThe final combat is the fourth human encounter, second unassisted combat, and first active choice on the part of the player between “stealth” and “action”. This choice is actually shown on screen and justified by Tess’s dialogue. This fight is simply a summary, taken to the next scale, of every theme explored in combat tutorials seen this far: navigation, object interaction, enemies visibility cone, player noise and elevation (or lack thereof in this case). The choice of color palette reinforces these options, with the cold colors used on the left for a stealthier approach, and the warm yellow tones used with the sun on the right hand side to show danger and action. The right hand side approach also contains more immediate rewards (weapons) for having been bolder.\n\nRobert being another human, there was no reason to turn him into a boss. But as Naughty Dog also needed to carry the scenario forward, it made sense to turn this fight into a chase sequence. For the same reason as Joel and Sarah move away from Joel’s office in the prologue, here the chase sequence allows to introduce Marlene much more dynamically and not have her simply appear in the middle of the previous combat space. That latter solution can usually be seen with less important characters, usually from the same faction, as waves of reinforcement.\n\nThe calm before the storm This marks the end of the tutorial section of the intro levels. A few more mechanics will be introduced all along the game (enemies, weapons, upgrades) but the vast majority of the systems has already been presented by now. The bigger the challenge, the bigger the spoils: right after the cinematic ends, Joel is presented with both bandings and blades – the resources needed to create shivs - in two distinct locations separated by the first vista in the game, itself to be considered a narrative reward for having completed the first chapter, as well as an introduction of the destination ahead.\n\nAs Joel progresses through to Ellie, and the tutorials are now all gone, combat spaces become larger, with much longer lines of sight, introducing the many challenges ahead and giving the game its true scale. The next \"co-op\" take down between Joel and Marlene pushes this type of gameplay another step further by hiding one of the two enemies to kill inside the building, which shows that the gameplay itself will also take place over longer distances, not just the locations.\n\nAnother sign of the hands free design for the rest of the game, the first puzzle players encounter shows no hints at all. After another dialogue corridor designed to present Joel and Ellie’s early relationship, Tess joins them again and the adventure starts. Have fun with the rest of the game!\n\nThank you for reading this detailed level design analysis of the intro section of The Last of Us. For any additional question, or to discuss this further, feel free to contact me through LinkedIn.\n\nThis is the third article in a three-part series. Part One / Part Two / Part Three\n\nRead more...\n\n5 comments\n\n12,228 views\n\nThis is the second article in a three-part series. Part One / Part Two / Part Three\n\nFirst Level The intro cinematic here serves two purposes: Introducing Tess and her relationship with Joel, and giving players a goal for the upcoming level. With that done, it’s not necessary to give players other intermediate goals along the way.\n\nFollow Mission Following an NPC is an excellent, tried and true means to expose players to a completely new world to discover. Tess plays the role of a learning tool, and it’s precisely once players have learned enough about survival in the game that she dies and leaves room for the new relationship between Ellie and Joel to grow. This is an absolute classic process - death aside - used in a great many third person games from Uncharted to Prince of Persia, Enslaved and many others. FPS games also use this technique, but to a lesser degree as following an NPC in first person is often a much more arduous task. Half-Life 2 famously used Alix Vance that way, mostly in non-combat spaces. More recently, BioShock Infinite also followed the same model but made the entire game about that NPC.\n\nOnce outside, players are immediately presented with a good combination of narrative and level design. Tess mentions the curfew that will hit in a few hours, while in the same frame, players can see once again in yellow, the sign that mentions the curfew hours. Attention to small details like that is what will make an entire world more believable. The use of red and white bricks for these buildings adds contrast and depth to this scene, and with Tess going around the corner, helps imagining the path forward.\n\nMessages painted across walls is as fundamental a narrative design technique as any, but great games will make use of them sparingly, and at the very least won’t reuse the same message more than once per section, so as not to destroy the immersion they’re designed to create. It’s the same thing for talking NPCs, designed for very specific situations, so their speech doesn’t get repeated.\n\nDuring this entire level Tess keeps waiting for the player by staying idle on a few of the nodes on her scripted path. This is of course so she can keep being the player’s guide. Notice here however that the implementation of that system is just the bare minimum expected in today’s games. In reality, follow missions are few and far between in this game, as NPCs usually trail behind the player in non-scripted ways. In a game where the NPC is as essential as BioShock Infinite, Elizabeth would have stopped her scripted movement, retraced back her steps to the player (or been teleported behind him) only to resume her script from there. This is a good example of the limitations borne from early creative decisions that dictate the systems developed for the game. It’s entirely normal, but something to be conscious of when creating levels.\n\nFollowing on to the main street, where a scripted camera takes over and introduces the new playable zone. This sort of introduction is a dead giveaway of a Naughty Dog game, and is most useful in locking the player in place while the army vehicle passes left, preventing the player from reaching the far end gate and exiting the playable area. With the camera locked in this way, the vehicle may very well simply disappear once passed.\n\nArriving in a large area is often a good occasion to introduce more exposition scenes, and in this case two well-constructed ones. Right in front of the player as he arrives, the first scene presents survivors waiting for their weekly ration in a line, behind fences. The fences here work great with the theme of a post-apocalyptic world, but the wall they form is absolutely necessary in scenes like this to limit player interaction and bugs. We find the exact same use of containment barriers in the scene that follows, with the extra touch of the military personnel pushing then killing Joel if players venture too far. Inside closed spaces, most games generally use windows, which we’ll see in The Last of Us later.\n\nThe arrival at the checkpoint is a textbook example of how to center player attention with a dynamic element. On this crossroad, the first semi open area in the game, players may very well be tempted to go either way, but the arrival of the armored vehicle against the player’s direction, the closure of the gates, Tess's placement near the checkpoint and the yellow sign above all point the player effortlessly to the left instead. Naughty Dog manages to seemingly open the game much wider, while remaining in a narrow exposition corridor.\n\nAnother textbook example, and a difficult one to achieve, the quick return tutorial. The narrative scene that introduces it is meaningful as it introduces the Fireflies for the first time in the game, but it also pits the player right against a fence in a position of danger. Just like in the combat tutorial, the necessity to move away from this fight makes it ok to block player controls and require a specific command. Players rarely question this.\n\nAs a side note, some of you will have noticed that the main street had not been gated yet in the game, and Naughty Dog made sure it was by adding this little scene of police blocking the street.\n\nWhen addressing player accessibility and teaching, it's important to make the distinction between the two learning models players can be separated in. The first type, Explorative Exposition, describes players who learn by doing; while the second type Experimentation Exposition describes players who by fear of failing expect to have a maximum amount of information given to them before they try. Designing tutorials for these two types of players is very hard, since their learning methods are diametrically opposed.\n\nNaughty Dog chose here to address both types by designing tutorials for either type and alternate between them. The more complex tutorials, those that either require a huge amount of information given, like weapons for instance (see The Shiv in part 3) or would demand a very expensive and convoluted setting (like this health kit) are designed for the second type of players, stopping the game and giving them everything they need to know before experimenting. The intention of showing the time it takes to heal is well convened here. And to make sure the player actually sees this most important item, Tess gives it away instead of having it placed on a nearby table. Perfect introduction of the mechanic and it reinforces their relationship as no one else would ever have given this for free to Joel.\n\nAs much as accessibility is often separated in three stages (exposition as seen above, validation and challenge), players often find these cobbled together. The second stage for instance is largely unnecessary when designing for a core audience that is already very used to these game mechanics and gamepad controls.\n\nFollow a few textbook examples of light placement inside this exposition corridor, with inviting diffused lighting that propel Joel forward. At the end of this sequence, we find the first of many trademark moves by Naughty Dog when Joel jumps down a hole. This kind of transition keeps showing up in Naughty Dog almost invariably to transition into a cinematic mid jump (we’ll see that later in the second combat) or to be used as a loading screen to the next level. It also helps segmenting big levels into smaller pieces where NPCs won’t travel large distances back and forth, limiting bugs.\n\nOn the other end of that tunnel comes the first introduction of the “vault over” move, which will be reintroduced at a later point as well. All move tutorials in Naughty Dog games are introduced a number of times in slightly different combinations so players learn by doing more than once. It’s rare enough in games to notice how good they got at it; in reality this entire level is a mixed sequence of tutorials.\n\nImmediately after this “vault over” move, Joel is presented with his first “safe zone” to pick up his weapons. In the rest of the game, this workbench will allow him to upgrade his weapons. The more interesting part is the left hand side “boost and pull” move, which uses very strong warm colors. Once again the use of the yellow signifies interactivity/where to go. All third person games like Tomb Raider, Uncharted, Prince of Persia, etc. use specific colors on their palette to orient the player, particularly at the start of a platforming sequence. The move itself is gated to players having picked Joel’s backpack on the workbench, and the combination of both tutorials in the same room is not by chance, it’s the only move in Joel’s arsenal that can be disabled given it uses a prop and an NPC.\n\nWe’ve already seen “jumping in a black hole” as a gate, and lifting this door here is just another example of subtle gating mechanisms used to unload the previous part of a level and load the rest dynamically, so as not to require loading screens, or the strict minimum. It’s now so standard that we’ll soon forget it’s a rather recent addition to the arsenal of level designers, created when dynamic loading became possible with PCs and consoles becoming more powerful.\n\nThis leads us into the first puzzle space in the game. Notice the multiple ways to leave this interior space, including the first crouch position to the right. We’ll see the move introduced on the critical path afterwards, but it’s not unusual for Naughty Dog to include such moves before their tutorials are introduced. A few hints give us the direction the player should head in. First the busted up ground is a good tool to shape the ground in the general direction of the gameplay, and make the space visually more interesting (less flat) and more interactive with the player needing to repeat the “vault over” move to get out. Another tool is the direction the crows fly in when leaving the hood of the car. Finally, the red bricks and vines uniformly applied everywhere is a giveaway that the exit is not necessarily straight forward.\n\nNotice the rug over the destroyed wall, accenting the solution to this first puzzle. This tutorial is a great example of puzzle design, where the problem needs to be presented front and center, so that the discovery of the solution leads to a minimal amount of attempts once found. Portal is the most recent game to have perfectly followed that credo. Of course, this is here simplified to its core essence, but the same principle follows in the rest of the \"ladder-based\" puzzles. A sign that you have a great game mechanic on your hands is the ability to design variants of the same puzzle throughout the entire game. It means it's a deep enough mechanic, and not a gimmick.\n\nAfter picking up the ladder, Joel enters the very first exploration space where he will be able to pick up game resources. Seen as this type of loot is what the entire game economy is based on, it makes sense to present them exactly in the opposite way to the narrative elements of the rest of the intro. Meaning shrouded in darkness when important narrative beats were placed in brightly lit areas. The lighting in this area is worked so the cabinets are mysterious, so that adventurous players learn this classic challenge-reward combination.\n\nAfter reaching there and turning around, players can then notice glimmering the very first Firefly Pendant located in the room beyond, with a nice Firefly symbol placed on the wall as a final hint. The placement of that desk in this room is studied to allow that to happen. You can safely assume that this is the easiest of all Firefly Pendants. Having presented the first resources and the first collectible separately is a good move to make sure players understand their different role.\n\nJumping down (once again, a gate), Joel enters the first spore-infected area in the game. Tess is once again used as justification, by stopping Joel and putting her mask on. Players immediately understand the nature of the threat and that they won’t ever have to put the mask on themselves. The change in lighting and visibility also preface the incoming danger, immediately shown in a safe situation moments after hitting the spores. The relationship between the spores and dead body are made perfectly clear, and this example of narrative design through environment art is perfectly paced.\n\nJust like the doors to Joel’s office in the prologue, here is a great example of using interactive objects to place the character in a specific situation and justify the camera transition to a cinematic. The plank, with its forced interaction, is only here to make players notice you can go through the door by squeezing through. In fact, even the dialogue is designed with that n mind. Once in this position, the camera is entirely scripted. One should always expect a narrative element on the other side of that type of sequence, particularly when entering a brand new space. Using this type of contrived cinematic moves has become a main fixture in Sony titles, noticeably in God of War and Uncharted, and in competing titles such as Tomb Raider. BioShock actually was one of the early titles that always tried to justify camera placements. These sequences also sometimes serve to limit the speed of movement of the player, particularly to help loading times in and out of expensive areas. But there are sometimes ways to include these delays in gameplay itself. For instance some of Elizabeth’s lockpick animations were gated to the loading of the area beyond the gate she had to open. In these cases, conversations between her and Booker would also be timed to the necessary delay.\n\nOnce clearing this filing cabinet, a perfect camera takeover to introduce the shooting tutorial. A conveniently placed hurt human (still target) offers the chance for a quick headshot if camera is left untouched. Nearby the ammunition pickup ends this gameplay loop and makes most players come out on top ammo wise. It also offers the game’s first active choice, as are all combats in this game (choice of resources and sometimes tactics). Notice right after this encounter the use of dialogue to justify the next camera takeover and introduce the first combat against infected. The piece of wood falls down just as Tess speaks up, while Joel indicates the need to remain silent. It’s as dynamic an introduction as one can make it and flows superbly.\n\nPlease notice the placement of these infected. Them being tutorials, it’s only logical that they are as scripted as they are. The first one plays to the stealth nature of the combat, reinforced by the action and placement of the two other infected. As you can see above on the first floor, they actually are a landmark for players to orient themselves. Most landmarks are used as large objects in the background of a scene, for instance Half-Life 2’s citadel in City 17’s skyline, and in the case of The Last of Us, the hospital Joel and Ellie reach towards the end of the game plays exactly that role, but in tight corridors and encounters, level designers can reverse engineer an NPC as the landmark, and plan their geometry around. In this case carving up the floor just so the infected can be seen below. Near this location, on the bottom floor and the top floor, two exploration spaces that make good use of this gameplay loop (challenge-reward) offering loot just after clearing the combat.\n\nOnce again outside, this seemingly uninteresting transition area between the combat tutorial and the upcoming puzzle is made interesting by the basketball hoop that provides a clear sense of direction to the immediate space, and the busted up concrete perpendicular to the court adds a layer of depth to an otherwise flat surface. Notice once again the color yellow used in Mel’s Home Hardware store sign, and its placement over the exit.\n\nNext up is the second \"ladder-based\" puzzle space that follows the basic rules of great puzzle design. First the exit is presented to the player in the same frame as the problem, and the solution once found (“aha! moment”) only takes one try to complete. Notice how the blue tarp provides a good visual clue in this tutorial as to where the solution is, just like the rug in the first case.\n\nLeaving the puzzle area that shows that the best game mechanics can be used in multiple variations, the same yellow color is brought by lighting through the window. Around the corner, a little reminder about exploration, with a health pickup dropped on the far end of the ladder.\n\nDown yet another gate and Joel now follows Tess through a back alley. This otherwise uneventful place sees the addition of yet another reminder of the “vault over” tutorial, as another way to require a button press from the player and keep him/her engaged. This however no longer requires the UI indication on screen.\n\nJust around the corner lies the second Firefly Pendant. “Hidden in plain sight” is a good way to introduce a second collectible, after having given the first one essentially for free. This one perched in the trees, and the puzzle before it tease the elevation changes of gameplay taught in the subsequent combats. You’ll notice the LD work that went in creating the blockage under which Joel must crawl, which reveals through its branches the glimmering Firefly Pendant.\n\nForcing the player to continue through a building serves multiple purposes. The first, and smallest is it helps justify the placement of gun ammo on the table, as opposed to having it just lying there on the streets. The second, the door that Joel closes behind him, is yet another gate for the upcoming NPC – heavy survivors camp, which can even be loaded during the third and final purpose, introducing a small child in a narrative sequence with Tess. These windows here give just the right amount of light in and allow the heavy contrast between the two areas to have the animation read a lot better. This room could have been there simply for optimization purposes, but Naughty Dog managed to turn it into a whole lot more.\n\nThe survivors’ camp is another gameplay loop closing in on itself. After the initial exploration and learning came the tension of the spores and the challenges of the first fight and puzzle, the camp is a narrative reward for having made it this far, and a chance to pick up another two collectibles. However as it’s not the end goal of the level, tension should still be a constant theme, hence the more and more violent scenes one after the other, that also introduce the upcoming fight with humans. Notice the little girl playing with her stuffed bear in the far corner. She and the little boy earlier are nice ways to feature children in action games where rules dictate that no human child should ever be killed on screen. Emphasis on human; children that do get hurt are often already dead, possessed or otherwise sick (School bus in Prey, Little Sisters in BioShock, etc.)\n\nThis is the second article in a three-part series. Part One / Part Two / Part Three\n\nRead more...\n\n4 comments\n\n14,038 views\n\nThis is the first article in a three-part series. Part One / Part Two / Part Three\n\nIntro Level 1st scene In typical movie fashion, the game starts with an exposition scene which establishes the bond between Joel and his daughter Sarah. Here the watch plays a type of backward MacGuffin (http://en.wikipedia.org/wiki/MacGuffin), which movie fans will be familiar with. A term made popular by Alfred Hitchcock, this initial narrative element will keep showing up in multiple scenes in the game to move the scenario forward and link back to the initial bond Joel had with his daughter. Many other items in this game, which we’ll see exposed in Sarah’s room play the same role. It’s important to note that this game doesn’t use forward MacGuffins, instead relying on the early experience players have with Joel in the intro levels to help them relate to Joel in the later parts of the game, when he faces adversity from the other main characters in the game. This type of catalyst is sometimes linked to gameplay in some games, but not here. For instance, in a quest, looking to get somewhere or obtain something but never managing to. In BioShock Infinite, Elizabeth keeps trying to go to Paris, but never quite goes there in the main game.\n\nGameplay Sarah goes to bed, only to be woken up by her Uncle Tommy’s phone call. The initial frame of Sarah getting up is a textbook example of player exposition. Using the mirror on the wall, Naughty Dog adds depth to the room, and presents Sarah as a playable character from both front and back. The color of the lamp shade also leaves nothing to chance. Using a warm color near her beloved items reinforces the comfort of her nest (bed) and contrasts heavily with the cold blue of the night in the mirror. These items on the wall, much like the watch earlier, play a narrative role in the rest of the game as tools to drive the scenario forward between Ellie and Joel.\n\nSound wise, Naughty Dog made a classic choice not to add any music and simply build tension with environment sounds in the background. It plays great and helps focus the attention on the initial reveals. In the room, the placement of the birthday card ties the opening scene with this scene the following morning and introduces the “triangle” button as the “hand interaction” one in the game (pick up item, open door, etc).\n\nAt this point in the game, the player still does not quite know what to do, despite having played for a few minutes already. This guidance is given very clearly in a single word, right outside Sarah’s bedroom, as she yells “Dad?”. Perfect example of narrative design coupled with level design, that tells the player his/her immediate goal, and invites him/her to check out every single door, increasing the chances for maximum exposition of every theme in this intro level.\n\nWith the goal now firmly established, the placement of the door straight ahead, too obvious, makes that room a natural space for continued exploration of the game’s themes, as opposed to a significant room. It comes as no surprise to find inside that room just one piece of content. The placement of the only light source in this room, obvi"
    }
}