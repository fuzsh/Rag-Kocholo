{
    "id": "correct_foundationPlace_00140_1",
    "rank": 28,
    "data": {
        "url": "http://www.maxtblog.com/category/active-directory/",
        "read_more_link": "",
        "language": "en",
        "title": "Active Directory – Max Trinidad – The PowerShell Front",
        "top_image": "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression01_2023-03-25_20-44-16.jpg",
        "meta_img": "",
        "images": [
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression01_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression02_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression03_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression04_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression05_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression06_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression07_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression08_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2023/03/CustomExpression09_2023-03-25_20-44-16.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin01_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin02_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin04_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin03_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin06_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin07_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2021/05/PSSqlLogin05_2021-05-20_18-48-04.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2020/01/ADModule_01_2020-01-15_18-46-55.png",
            "http://www.maxtblog.com/wp-content/uploads/2020/01/ADModule_02_2020-01-15_18-46-55.png",
            "http://www.maxtblog.com/wp-content/uploads/2020/01/ADModule_04_2020-01-15_18-46-55.png",
            "http://www.maxtblog.com/wp-content/uploads/2020/01/ADModule_05_2020-01-15_18-46-55.png",
            "http://www.maxtblog.com/wp-content/uploads/2019/02/krb5cmd_01_2019-02-21_10-20-01.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2019/02/psremotieAD_01_2019-02-20_14-32-34.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2019/02/psremotieAD_02_2019-02-20_14-32-34.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2019/02/psremotieAD_03_2019-02-20_14-32-34.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2019/02/psremotieAD_04_2019-02-20_14-32-34.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2016/01/SAPIEN_h_logo.jpg",
            "https://www.sqlshack.com/wp-content/uploads/2018/09/Top-30-2018-400px.png",
            "https://blog-cdn.feedspot.com/wp-content/uploads/2017/04/powershell-50-transparent_216px.png",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/pluralsight.jpg",
            "http://cdn.oreillystatic.com/images/sitewide-headers/logo02.gif",
            "http://www.condusiv.com/images/Condusiv-Technologies-logo.png",
            "http://www.devart.com/images/logo/devart_logo.png",
            "http://www.maxtblog.com/wp-content/uploads/2015/09/PowerShellOrgChapterLogo.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/DownloadVS2015a.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/Channel9a.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/MSVirtualAcada.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/GeekDuck.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-03-26T21:22:53+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Working with PSObjects is essential to anyone using PowerShell. Especially, when there’s a need to extend the object to provide useful information.\n\nRemember, the best way to get familiar with the PowerShell object(‘s)… (AKA PSOBject, .NET Object) is to use the ‘Get-Member’ Cmdlet.\n\nLearn-By-Example\n\nCreating custom properties on an existing PSObject:\n\n1. Add a row property using Custom Expression: @{ label = ‘xxcolnamexx’; expression = { “xxxany code logic here..xxx” }; }\n\n2. Add two new columns using the Add-Member command: “SystemName” and “UserName“ – using existing PowerShell session environment variables: $env:COMPUTERNAME, and $env:USERNAME.\n\nBuilding our Sample PSObject\n\nLet’s create a PSObject using the following *command:\n\n$myWindowsfilesList = Get-ChildItem C:\\Windows -Recurse -ErrorVariable flerr; $myWindowsfilesList.count\n\n*Note: Please ignore the errors and we’ll get back to it later. Errors are saved in the $flerr variable for later viewing.\n\n## – List a small range of rows without the “Row” Property:\n\n$myWindowsfilesList[0..5]\n\n$myWindowsfilesList[1000..1005]\n\nNow, with the help of PowerShell Custom Expressions, we’ll be providing a ‘row’ property to the existing output object. The new ‘Row’ property will be included in the “Select-Object” command and at the end of the process, will be saved as a new PSObject: “$myNewWindowsfilesList”.\n\nRemember to initialize a global variable counter used for the row property.\n\nTo build the Custom Expression for the ‘Row’ property, see the line below:\n\n@{ l = 'row'; e = { \"[\" + $global:row.tostring(\"D\") + \"]\"; ++$global:row }; }\n\nTry the new Code below:\n\n## - ## - To preserve the new 'row' column as part of the PSobject. by saving it as a new object. ## - $myWindowsFilesList = dir c:\\Windows -Recurse -ErrorVariable flerr -ErrorAction SilentlyContinue; $row = 0; $myNewWindowsfilesList = $null; $myNewWindowsfilesList = $myWindowsfilesList ` | Select-Object @{ l = 'row'; e = { \"[\" + $global:row.tostring(\"D\") + \"]\"; ++$global:row }; }, ` name, mode, lastwritetime, length; ## - verify the 'Row' column has been added: $myNewWindowsfilesList | Get-Member -MemberType Properties;\n\n## - List a small range of rows: $myNewWindowsfilesList[1633.. 1645] | Format-Table;\n\nAdd custom property using Add-Member\n\nAdd columns “SystemName” and “UserName“, to an existing new object using the “Add-Member” cmdlet within the ‘foreach{..}’ statement.\n\n## - ## - Using \"Foreach\" command to Add two new columns: \"SystemName\" and \"Username\" ## - to an existing PSObject. ## - [int32]$i = 0 foreach ($r in $myNewWindowsfilesList) { ## - The following Add-member adds a property to an existing PSObject: $r | Add-Member -NotePropertyName \"Systemname\" -NotePropertyValue $env:COMPUTERNAME; $r | Add-Member -NotePropertyName \"username\" -NotePropertyValue $env:UserNAME; ## - Below code will show the progress bar: $percomplete = ($i / $myNewWindowsfilesList.count) * 100 Write-Progress -Activity \"Counting $i times\" -PercentComplete $percomplete; ++$i };\n\nDisplaying member properties and sample data with added columns:\n\n## - verify the 'Row', 'computername', and 'username' columns has been added: $myNewWindowsfilesList | Get-Member -MemberType Properties;\n\n## - List a small range of rows with the new columns: $myNewWindowsfilesList[1633.. 1645] | Format-Table;\n\nHere’s where the PowerShell magic happened, as you would think that the Add-Member command would only affect only the row “$r” variable. The main PSObject “$myNewWindowsfilesList” has been updated. There’s no need to save the PSObject with a different name.\n\nRecap\n\nThe combination of using ‘Custom Expressions’ with the Add-Member cmdlet gives great flexibility for building customized PSObjects. Go ahead and copy/paste this code, make your own properties, extend your PSObjects, and start thinking outside of the box. Make it fun!\n\nBonus\n\nIn the script code you’ll find a few techniques you’ll want to pay attention to:\n\n1. String “.NET formatting” for the ‘row’ column.\n\n2. Use of the “-ErrorVariable” with the “-ErrorAction” parameters – prevents the errors or exceptions to be displayed in the console. For more information, use the command:\n\nGet-Help about_CommonParameters -ShowWindow;\n\n3. Using the “Write-Progress” Cmdlet to display a progress bar while going thru adding the new columns. For more information, use the command:\n\nGet-Help Write-Progress -ShowWindow;\n\n4. “Get-Member” Cmdlet information, use the command:\n\nGet-Help Get-Member -ShowWindow;\n\n5. Displaying the saved errors from the $flerr variable;\n\n## - ## - BONUS - Check how many errors were saved, list a few of the messages ## - $flerr.count $flerr[50 .. 54].exception.message\n\nPowerShell is a powerful scripting language. Enjoy and Keep Learning!\n\nOwn your future!\n\nThis blog post is following “Changing a SQL Server Login name with T-SQL“. Let’s take advantage of the .NET SMO framework assembly object model Namespaces with PowerShell to change a Windows account in a SQL Server Logins.\n\nRemember to download the latest version of PowerShell.\n\nThere’s nothing wrong in using SSMS (SQL Server Management Studio) as our GUI application to manage our SQL Server engine. But soon, you will have the need to use PowerShell scripting for automating some daily tasks. And, Trust me! It will save you time.\n\nBoth Microsoft and the SQL Server Community provide you with some of the Awesome tools, such as the following PowerShell modules: SQLPS, SqlServer, Secretmanagement, and DBATools.\n\nLet’s begin with creating a list all SQL users on our SQL Server using the DBATools module “Get-DBAuser” command:\n\nGet-DBADBUser -SqlInstance 'localhost,1433'\n\nAs you can see, this command returns a lot of information you can export and dissect in many way.\n\nNow, let’s take this a little further using SMO Object Model Namespaces.\n\nDon’t be scare! in order to start using these SMO Classes. To start, all you need to have installed any of the following PowerShell Modules: SQLPS, SQLServer or DBATools, then execute the “import-Module” command:\n\n## This will load SMO assemblies: Import-Module SqlServer\n\nThen all necessary SMO Assemblies are loaded and ready to be consumed during your PowerShell session. You can start building your own PowerShell one-liners or scripts/functions command to interact with the SQL Server engine.\n\nLet’s cut to chase, and create a simple PowerShell function “Get-SqlLogins‘ to simply list all my SQL logins in my SQL Server:\n\n## - function_Get-SqlLogins.ps1: function Get-Sqllogins { param ( [parameter(Mandatory = $true)] [string]$sqlname, [string]$uname, [string]$upwd ) ## - Prepare connection to SQL Server: $SQLSrvConn = ` new-object Microsoft.SqlServer.Management.Common.SqlConnectionInfo($sqlname, $uname, $upwd); $SQLSrvObj = new-object Microsoft.SqlServer.Management.Smo.Server($SQLSrvConn); ## - Get SQL SERVER list of database names: $global:itm = 0 $SQLSrvObj.logins | Select-Object @{ l = 'itm'; e = { $global:itm; ++$global:itm }; }, name, logintype; }; $sqlname = 'localhost,1433'; $uname = 'sa'; $upwd = '$SqlPwd01!'; Get-Sqllogins -sqlname $sqlname -uname $uname -upwd $upwd ## - End-of-File\n\nNote: Save this code as function_Get-Sqllogins.ps1.\n\nYou can edit this file to run one liner at the time and explore the $SQLSrObj PowerShell object.\n\nUse the following GET-Member(alias gm)command to explore the object content:\n\n## - exploring .NET Objects: $SQLSrvObj | gm | Out-GridView\n\nThis is a good way to learn about your PowerShell objects. You’ll be surprised by the ton of information you can find for documentation.\n\nNow, try listing all SQL logins names by typing the following:\n\n## - shorthand to list all values in a object proprety: $SQLSrvObj.logins.name\n\nSo, with a few lines of code, you can quickly get results.\n\nNow, proceeding with looking for the Windows account I want to change the name in the SQL Login.\n\nFor this, I need to add line numbers to the PSObject result. This way I can Isolate the Login ID:\n\n$global:cnt = 0\n\n$SQLSrvObj.logins | Select-Object @{ l = ‘cnt’; e = { $global:cnt; ++$global:cnt }; }, name, logintype\n\nFor the finale: Changing the SQL Login Name. I’m going to manually do this using SMO PowerShell One-liner:\n\nI found that element #5 is the SQL login I need to change:\n\n## - verify before making the changeto the SQL Login object; $SQLSrvObj.logins[5]\n\nSo far we’ve been working with SMO .NET Objects properties. Here’s where we use SMO .NET methods which affect the object (element#5) I have manually selected using “$SQLSrvObj.logins[5]“:\n\nLast steps for updating the SQL Login name:\n\nNote: Keeping in mind, the actual change starts at the Windows Account level.\n\n1. The *.Alter() method sets the object ready to be changed:\n\n$SQLSrvObj.logins[5].alter()\n\n2. followup by the *.rename(**string**) method which will affect the name object.\n\n$SQLSrvObj.logins[5].rename('MXTLPT01\\Dev01')\n\n3. And, finally we use the *.refresh() to update all logins list with the name change.\n\n$SQLSrvObj.logins.refresh()\n\nAS you can see, this open to some automation opportunities that can involve Windows Domain with SQL Server Accounts administration.\n\nDon’t forget! always test your scripts. Practice makes a good scripter, and never be afraid of trying new stuff.\n\nSQL PowerShell! It is the way!\n\nDo you want to use “ActiveDirectory” module in PowerShell 7 RC.1 in Windows 10? For those who haven’t notice yet, seem like one of the recent updates to Windows 10 RTM Build 1909 will includes the latest version of this module.\n\n“ActiveDirectory” module version 1.0.0.0 will not work in PowerShell 7 RC.1. It will give the following error during the import module process:\n\n“ActiveDirectory module imports, but the PSDrive AD: is not created.\n\nSet-Location: Cannot find drive. A drive with the name ‘AD’ does not exist.”\n\nTo correct the issue, you will need to update this module to version 1.0.1.0.\n\nHow to install the updated version?\n\nFirst, make sure you have installed all of the latest Windows updates. Previous ActiveDirectory module will be on version 1.0.0.0.\n\nTo install, look in the “App or remove programs | Optional Features” then look under “Add a feature” for the “RSAT: Active Directory Domain Services and Lightweight Directory Services Tools.”\n\nIt will replace the previous version with the newer one and will work with PowerShell 7 RC.1.\n\nRemember\n\nTo use this module the system need to be a member of a domain, or you’ll get the following error message:\n\n“WARNING: Error initializing default drive: ‘Unable to find a default server with Active Directory Web Services\n\nrunning.’.”\n\nAlso, it’s only available for Windows 10 RTM Build 1909, Windows 10 Insider Edition, and Windows Server 2019.\n\nSometime there’s the need to do PowerShell remoting from Linux to a Windows System. In my lab environment, I was able to install, configure, and established a PowerShell Remote connection from a Linux Ubuntu 18.04 system to *Active Directory joined Windows System.\n\n*Note: Before trying to following steps, if you’re in a corporate domain, consult with your security team. I would recommend that you try this scenario in virtual machine environment.\n\nI’ve been struggling trying to OpenSSH in both Windows 10 (Build 1803) and Windows Server 2019 with no success connecting from Linux. So, I decided to try install Kerberos component on my Ubuntu system and it works! And, with no need to joined my Linux system to my virtual Active Directory domain.\n\nInstall and configuring Kerberos Client\n\nI need to install and configure the Kerberos Client application on my system:\n\n$ sudo apt-get install krb5-user\n\nCustomizing *krb5.conf file settings for my domain:\n\n$ sudo vim /etc/krb5.conf\n\nThe following are my custom settings in the krb5.conf file for “DOMAINNAME” Kerberos:\n\n[libdefaults] default_realm = DOMAINNAME.COM # The following are custom settings for \"DOMAINNAME\" Kerberos: dns_lookup_realm = true dns_lookup_kdc = true default_tgs_enctypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5 default_tkt_enctypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5 permitted_enctypes = arcfour-hmac-md5 des-cbc-crc des-cbc-md5 [realms] TRINITY.COM = { kdc = DOMAINMACHINENAME admin_server = DOMAINMACHINENAME } [domain_realm] .com = DOMAINNAME\n\n*Note: Make a copy of the krb5.conf file before any changes.\n\nOne thing to point out! Both DOMAINNAME and DOMAINMACHINENAME, must be in uppercase.\n\nConfiguring ssh\n\nNext step involves in configuring the ssh for Kerberos negotiation. This is the ssh_config file (not sshd_config).\n\n$ sudo vim /etc/ssh/ssh_config\n\nMake sure the following parameters are set at the end of the *ssh_config file:\n\nSendEnv LANG LC_* HashKnownHosts yes GSSAPIAuthentication yes GSSAPIDelegateCredentials no GSSAPIKeyExchange yes\n\n*Note: If there are missing ones, don’t touch the commented ones. Just copy/paste and set the values.\n\nAfter completing the changes, I would recommend a reboot.\n\nTesting and working Kerberos Client\n\nHere are a few linux commands to work with Kerberos client. If the krb5.conf setting are set correctly, then the following commands should work without any issues.\n\n1. This command will verify user domain, asking for password.\n\n$ kinit username@domainname\n\n2. Shows the list of Kerberos Cached tickets and credential.\n\n$ klist\n\n3. To delete\\clear all Kerberos Cache entries:\n\n$ kdestroy\n\nWhat about setting in Windows Systems?\n\nI’m will cover the whole PowerShell remoting setup. But, I will highlight what’s needed to make Linux connect to a Active Directory Domain system.\n\nEnable PSRemoting\n\nIn PowerShell Conscole, run the “Enable-PSRemoting -force” command line on both client and server. This command will add the firewall rule to allow PowerShell remoting to work.\n\nCheck WinRM Service\n\nCheck the Windows Remote Management service is running. By default, in Windows 10 client, this is set to “Manual”.\n\nOn the server, just verify that the service running.\n\nBefore, connecting Linux to a windows domain system, make sure to test PowerShell remoting between Windows machines. This will guarantee that you got everything working correctly.\n\nName Resolution Tip\n\nI don’t join my Linux system to my AD domain. So, to resolve my name resolution issues, I manually update the hosts file on my systems. This will include the domain ip-address as well as all other systems\n\nhosts file : xxx.xxx.xxx.xxx domainname.com :\n\nTesting connectivity\n\nUbuntu 18.04 Connecting to a domain system final test.\n\n1. In Linux, open PowerShell:\n\n$ pwsh\n\n2. Prepare the domain user:\n\nPS /home/user> kinit domainuser\n\n3. Create a *PowerShell Remote interactive session:\n\nPS /home/user> Enter-PSSession -ComputerName wincomputer -Authentication Negotiate -Credential user@domainname.com\n\n*Note: This remote connection will open Windows PowerShell and not PowerShell Core.\n\nSummary\n\nSo, in Ubuntu 18.04 installing and configuring Kerberos user client only, you can connect your Linus system to a Active Directory Domain systems. But remember, this will connect to a Windows PowerShell session only.\n\nI’m hoping that in the near future we can have the ability to select a PowerShell versions. Wait!! There’s a way to open a PowerShell Core session instead of Windows PowerShell!!\n\nHow To Connect to PowerShell Core\n\nSo, by default you’re going to connect to Windows PowerShell. But, if you use the following parameter ‘-ConfigurationName’ folllowed by either ‘PowerShell.6‘ or ‘PowerShell.6-Preview‘ then you’ll get PowerShell Core session. Also, you can use an specific version ‘PowerShell.6.1.0‘.\n\nEnter-PSSession -ComputerName venus -Authentication Negotiate -Credential max_t@trinity.com -ConfigurationName PowerShell.6\n\nThanks to Steve Lee (Microsoft PowerShell Team) for letting me know this is already available.\n\nReferences\n\nThe following links help figured out the needed components to make my lab environment work.\n\nExercise 1: Set up a kerberos client\n\nLinux: Kerberos authentification against Windows Active Directory"
    }
}