{
    "id": "correct_foundationPlace_00140_1",
    "rank": 57,
    "data": {
        "url": "http://www.maxtblog.com/2010/09/",
        "read_more_link": "",
        "language": "en",
        "title": "September 2010 – Max Trinidad – The PowerShell Front",
        "top_image": "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb.png",
        "meta_img": "",
        "images": [
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb2.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb3.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb4.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb1.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb10.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb13.png",
            "http://www.maxtblog.com/wp-content/uploads/2010/09/image_thumb9.png",
            "http://www.maxtblog.com/wp-content/uploads/2016/01/SAPIEN_h_logo.jpg",
            "https://www.sqlshack.com/wp-content/uploads/2018/09/Top-30-2018-400px.png",
            "https://blog-cdn.feedspot.com/wp-content/uploads/2017/04/powershell-50-transparent_216px.png",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/pluralsight.jpg",
            "http://cdn.oreillystatic.com/images/sitewide-headers/logo02.gif",
            "http://www.condusiv.com/images/Condusiv-Technologies-logo.png",
            "http://www.devart.com/images/logo/devart_logo.png",
            "http://www.maxtblog.com/wp-content/uploads/2015/09/PowerShellOrgChapterLogo.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/DownloadVS2015a.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/Channel9a.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/MSVirtualAcada.jpg",
            "http://www.maxtblog.com/wp-content/uploads/2015/08/GeekDuck.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-09-27T09:08:25+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I was playing around creating a PowerShell script with the intention of add items to a custom PSObject using the Add-Member. Well, I couldn’t get it to work or maybe I was still doing something wrong. But then, I came up with a (kind-of) unorthodox method that I will share with you. Please, don’t tell anyone:\n\nFirst, here’s a PowerShell script function “Get-SPInventory” I found in Technet; (http://technet.microsoft.com/en-us/magazine/2008.12.windowspowershell.aspx?pr=blog). There’s nothing wrong with it and work as expected:\n\nFunction Get-SPInventory {\n\nPROCESS {\n\n$wmi = Get-WmiObject Win32_OperatingSystem –comp $_ | Select CSName,BuildNumber,ServicePackMajorVersion\n\n$obj = New-Object PSObject\n\n$obj | Add-Member NoteProperty BuildNumber ($wmi.BuildNumber)\n\n$obj | Add-Member NoteProperty CSName ($wmi.CSName)\n\n$obj | Add-Member NoteProperty SPVersion ($wmi.ServicePackMajorVersion)\n\n$wmi = Get-WmiObject Win32_BIOS –comp $_ | Select SerialNumber\n\n$obj | Add-Member NoteProperty BIOSSerial ($wmi.SerialNumber)\n\nWrite-Output $obj\n\n}\n\n}\n\nSo, I going to duplicate the same functionality in a different way without creating a new PSObject and not using Add-Member. I’m going to let PowerShell to create the PSObject for me and work a little with the Select-Object. Here’s my version:\n\nFunction Get-SPInventory2 {\n\nProcess{\n\n$wmi1 = Get-WmiObject Win32_OperatingSystem –comp $_ | Select CSName,BuildNumber,ServicePackMajorVersion\n\n$wmi2 = Get-WmiObject Win32_BIOS –comp $_ | select SerialNumber\n\n$results = $wmi1|select csname,BuildNumber,@{Label=”SPVersion”;Expression={$_.ServicePackMajorVersion -as [int]};},@{Label=”SerialNum”;Expression={$wmi2.SerialNumber};}\n\nWrite-Output $results\n\n}\n\n}\n\nNow, I got both functions generating the same results. I’m my script, the “Label=” will create the noteproperty and the “Expression=” will store the value for the $wmi2.SerialNumber.\n\nLet say I want to use SQL Server Management Object (SMO) to collect various information from some SQL Servers on the network. Here’s another sample script: (make sure your SMO assembly is loaded)\n\n$SQLSvr = [Microsoft.SqlServer.Management.Smo.SmoApplication]::EnumAvailableSqlServers($false) | Select name [Array] $SQLinfo = ForEach($SQL in $SQLSvr){\n\n$MySQL = new-object(‘Microsoft.SqlServer.Management.Smo.Server’) $SQL.Name\n\n$MySQL | Select NetName, Product, EngineEdition, Version, Platform, ProductLevel\n\n} $SQLinfo | select Netname, Product, EngineEdition, Version, ProductLevel | ft -auto\n\nIn this script, I’m using the SMO SQL enumerator to collect the SQL Server names so we can use the “foreach” to collect the information from each server into the output array “$SQLinfo”. After building the output variable then you can save the results in different output format such as: CSV, TXT, XML, or event back to a SQL table.\n\nThis is another way to collect information and let PowerShell do the rest for you! PowerShell gives Power to the scripters.\n\nCheck out this other blog about creating objects: http://powershell.com/cs/blogs/tobias/archive/2010/09/22/creating-objects-yourself-and-a-bunch-of-cool-things-you-can-do-with-them.aspx\n\nHappy PowerShelling!!\n\nThanks to a SQL Server college that send me an email about a problem he was having understanding how I was using DTUtil in PowerShell and it was giving him the following error message:\n\nThe term ‘Create-My-New-Table’ is not recognized as the name of a cmdlet, function, script file, or operable program. C\n\nheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\n\nAt line:1 char:117\n\n+ dtutil /FILE “C:\\temp\\Store MySSIS Package\\Create-My-New-Table.dtsx” /DestS MAX-PCWIN1 /copy SQL;Create-My-New-Table\n\n<<<<\n\n+ CategoryInfo : ObjectNotFound: (Create-My-New-Table:String) [], CommandNotFoundException\n\n+ FullyQualifiedErrorId : CommandNotFoundException\n\nI was able to duplicate the error and after a couple of hours I realized that I failed to mention one critical piece of information. In my previous blog series about running the DTutil.exe tool in PowerShell, I forgot to mention that you can’t run DTutil.exe in the PowerShell console. This is one of a few *exe commands that was meant to run under DOS Shell.\n\nThat’s the reason why I came up with a PowerShell script that will call/execute a batch file with passing parameters in order to use the DTUtil.exe tool.\n\nNow, to help clear some of the issues I found when trying to run this command with parameters:\n\n1. As I verfiy, DTutil.exe will need to run in a batch file (*.bat) in order to be able to run in PowerShell. Here’s the sample error message if you try to run DTUtil dos command under the PowerShell Console:\n\n2. Don’t use IP address. In my test it didn’t work and in the Microsoft documentation it is asking for “servername”. So, use the SQL “Servername” or “Servername\\Instance”. My test fail when using my local machine IP address:\n\n3. Then, in the “.. /Copy SQL; ” . Don’t leave a space between the “ SQL; ” and the DTS Package name.\n\n4. And, the DTS Package name doesn’t need the extension “*.dtsx”\n\nHere’s example of a valid DTutil command I use to copy my sample DTS Package file to my local SQL Server:\n\ndtutil /FILE “C:\\temp\\Store MySSIS Package\\Create-My-New-Table.dtsx” /DestS MAX-PCWIN1 /copy SQL;Create-My-New-Table\n\nI hope this will help understanding this issues of running this SQL DOS command in PowerShell and take a look at my older 3 part series about “Deploying SSIS Packages” in PowerShell:\n\nDeploying SSIS Packages using DTUtil.exe with PowerShell – Part 1: http://max-pit.spaces.live.com/blog/cns!A034D6A0DDC4E64E!1075.entry\n\nDeploying SSIS Packages using DTUtil.exe with PowerShell – Part 2: http://max-pit.spaces.live.com/blog/cns!A034D6A0DDC4E64E!1102.entry\n\nDeploying SSIS Packages using DTUtil.exe with PowerShell – Part 3: http://max-pit.spaces.live.com/blog/cns!A034D6A0DDC4E64E!1133.entry\n\nI greatly appreciate the emails and I’m glad to be able help in the IT community.\n\nKeep PowerShelling!!\n\nYou want to get started with Windows PowerShell? The answer is at your fingertips. The truth is, beside all the good books, you got everything you need already included with Windows PowerShell. Have you use the “Help” cmdlet in PowerShell? If not, then you are missing some of the most extensive documentation PowerShell have made available since its release. There’s a LOT of information that can help you get started in understanding and writing PowerShell scripts.\n\nJust type “Help About_*” and press enter:\n\nAs you can see, all this information is available to you. This will help you understand how to write functions, how to use operators, Aliases, Parameters, Hash Tables, and more. Don’t be intimidated by all this information. I recommend you to use “Help” and then you can search on the internet or reading a book for more in depth information.\n\nBy the way, this information can be found online under Microsoft TechNet. Here an example link looking at the Help on “About_Operators”: http://technet.microsoft.com/en-us/library/dd347588.aspx\n\nSo, how many About_* topics can be found under PowerShell V2? To find out type the following command:\n\n(help about_*).count (press enter)\n\nYou will find there’s a total of 95 topics. This is only the “About_*” topics. So, as you can see, this information is available at your fingertips. So, use it and start learning Windows PowerShell.\n\nGo ahead and try it!!!"
    }
}