Reading Time: 10 minutes

I’m very happy to announce the beta version of Studio 7, which not only offers support for the Mule 4 Beta runtime, but also improves the overall user experience for Studio users.

In this blog post, I will walk you through some of the biggest UX improvements and architectural changes that will transform your user experience:

As a quick summary, Studio 7 will offer:

Transparent and easy Maven integration

New Mule palette

Improved visual designs and UX

Support for Mule 4 Beta runtime

A new way to store your application’s custom types

Studio 7 Extreme Makeover!

Let us start with the new Mule palette. When using the Studio 6 palette, finding the right operation was a multi-step process: you had to find the connector, drag it onto the canvas, then search for an operation. To speed up this process, we created a new two-level palette that improves access times, discoverability, and categorization. You can search directly for a connector operation and easily add commonly used operations to your “favorites.”

We also improved the management of the palette works. In Studio 7, you can explicitly add versions of connectors to your project––making the palette specific to your project. As a result, you no longer have to see connectors or modules you aren’t using.

In addition to the new Mule palette, we added a new set of graphic icons for better usability. We kept the component icon and colors of some Mule operations the same, in order to ensure easier and faster identification, and a seamless experience. In order to maintain the need to make every operation easy to locate and identify, we added a watermark text capability that will always display the “Operation Name” when a user changes the default “Display Name” of the operation.

We also added collapsible Flows. In addition, you can now preview the content of the collapsed flow by simply hovering over the region for a second. This allows you to hide and display information that you don’t need to see and, instead, focus on what you are working on.

Lastly, we added a frequently requested feature: quick navigation to XML from the visual view. Simply right click on any component and select ‘Go to XML.’

Dependency Management & Maven Integration

In previous versions of Studio, every Module used to be an Eclipse plugin that needed to be installed through an “update site” mechanism. Now, every Module is simply a project dependency, managed by Maven underneath the covers. This means that you no longer have to deal with huge “update sites,” plugin installations, or plugin versions.

As part of this, we also improved Maven integration for both our new users and power users. We’ve done this by:

Shipping a Maven installation with Studio by default. If desired, you can point Studio to use your own Maven installation from the Preference settings.

Creating a default ‘‘pom.xml’ file for every project. This way, you won’t need to perform any task related to Maven in order to create, run, or debug your Mule application.

Automatically adding Maven dependencies to the ‘pom.xml’ file. Studio keeps track of the Mule modules and versions of the modules used by each project based on the information stored in each project’s ‘pom.xml’ file. If you add things to the POM directly, they will show up in the palette instantly.

Shipping Studio with a set of the most common Maven dependencies used by the Mule Modules. This enables Studio to install these dependencies in your local Maven repository, which helps avoid the download time and speed up all the Maven actions.

If you’re not a Maven expert – don’t worry. You don’t need to know anything about Maven; because of these changes, you will be able to use Maven in an automated and transparent fashion.

Credential Management

We’ve improved how you manage your Anypoint Platform accounts as well, making it easier to publish and consume different assets from within Studio and see which business group you are working with. We enabled this by creating a universal user toolbar that appears in every operation related to the Platform. This toolbar enables you to switch between users and organizations, or even add accounts.

This toolbar also comes with clearer validations and error messages, which is helpful for when your login is expired or invalid.

New Metadata Model

Mule 4 applications now contain an ‘application-types.xml’ file, which is where metadata around your data types is stored. For example, if you create a new CSV type, that metadata will be added to this file. This new file is easy to share, commit, and merge when conflicts arise–enabling users to do more metadata-driven development.

In the future we hope to continue improving this, making it so you reference schemas or sample files, and organize files in your project how you want. For this beta release, the supported custom types include: XML, JSON, CSV, POJO and Simple Types.

Mule 4 and DataWeave

In addition to the aforementioned IDE changes and usability improvements, there are other changes I want to share. Studio 7 Beta comes with support for Mule 4 Beta and all the core Modules that come with it. Studio will generate the Mule configuration file for all the Modules that you can add to your project through the Mule Palette.

Most of the user experience around DataWeave didn’t change from our previous Studio versions; however, Studio 7 has been updated to work with the new Mule Message format, and the DataWeave 2.0 language changes. Also, we added support for the DataWeave Expression language, which means that you will have script auto-completion in every field that supports expressions.

And, finally, we also updated our Mule Debugger to work with Mule 4. You will be able to execute and troubleshoot your application using the same process as previous versions of Studio.