{
    "id": "wrong_mix_range_foundationPlace_00132_2",
    "rank": 58,
    "data": {
        "url": "https://github.com/hexchat/hexchat/blob/master/src/common/servlist.c",
        "read_more_link": "",
        "language": "en",
        "title": "hexchat/src/common/servlist.c at master Â· hexchat/hexchat",
        "top_image": "https://opengraph.githubassets.com/469d2e579ccdd0bd2cf672c40dddf0ee19363d1d52920d4fac65e881ce7eeb84/hexchat/hexchat",
        "meta_img": "https://opengraph.githubassets.com/469d2e579ccdd0bd2cf672c40dddf0ee19363d1d52920d4fac65e881ce7eeb84/hexchat/hexchat",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "GTK+ IRC client. Contribute to hexchat/hexchat development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/hexchat/hexchat/blob/master/src/common/servlist.c",
        "text": "Skip to content\n\nNavigation Menu\n\nSearch code, repositories, users, issues, pull requests...\n\nProvide feedback\n\nWe read every piece of feedback, and take your input very seriously.\n\nInclude my email address so I can be contacted\n\nSaved searches\n\nUse saved searches to filter your results more quickly\n\nName\n\nQuery\n\nTo see all available qualifiers, see our documentation.\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert\n\nThis repository has been archived by the owner on Feb 10, 2024. It is now read-only.\n\nhexchat / hexchat Public archive\n\nNotifications You must be signed in to change notification settings\n\nFork 535\n\nLatest commit\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n\n556\n\n557\n\n558\n\n559\n\n560\n\n561\n\n562\n\n563\n\n564\n\n565\n\n566\n\n567\n\n568\n\n569\n\n570\n\n571\n\n572\n\n573\n\n574\n\n575\n\n576\n\n577\n\n578\n\n579\n\n580\n\n581\n\n582\n\n583\n\n584\n\n585\n\n586\n\n587\n\n588\n\n589\n\n590\n\n591\n\n592\n\n593\n\n594\n\n595\n\n596\n\n597\n\n598\n\n599\n\n600\n\n601\n\n602\n\n603\n\n604\n\n605\n\n606\n\n607\n\n608\n\n609\n\n610\n\n611\n\n612\n\n613\n\n614\n\n615\n\n616\n\n617\n\n618\n\n619\n\n620\n\n621\n\n622\n\n623\n\n624\n\n625\n\n626\n\n627\n\n628\n\n629\n\n630\n\n631\n\n632\n\n633\n\n634\n\n635\n\n636\n\n637\n\n638\n\n639\n\n640\n\n641\n\n642\n\n643\n\n644\n\n645\n\n646\n\n647\n\n648\n\n649\n\n650\n\n651\n\n652\n\n653\n\n654\n\n655\n\n656\n\n657\n\n658\n\n659\n\n660\n\n661\n\n662\n\n663\n\n664\n\n665\n\n666\n\n667\n\n668\n\n669\n\n670\n\n671\n\n672\n\n673\n\n674\n\n675\n\n676\n\n677\n\n678\n\n679\n\n680\n\n681\n\n682\n\n683\n\n684\n\n685\n\n686\n\n687\n\n688\n\n689\n\n690\n\n691\n\n692\n\n693\n\n694\n\n695\n\n696\n\n697\n\n698\n\n699\n\n700\n\n701\n\n702\n\n703\n\n704\n\n705\n\n706\n\n707\n\n708\n\n709\n\n710\n\n711\n\n712\n\n713\n\n714\n\n715\n\n716\n\n717\n\n718\n\n719\n\n720\n\n721\n\n722\n\n723\n\n724\n\n725\n\n726\n\n727\n\n728\n\n729\n\n730\n\n731\n\n732\n\n733\n\n734\n\n735\n\n736\n\n737\n\n738\n\n739\n\n740\n\n741\n\n742\n\n743\n\n744\n\n745\n\n746\n\n747\n\n748\n\n749\n\n750\n\n751\n\n752\n\n753\n\n754\n\n755\n\n756\n\n757\n\n758\n\n759\n\n760\n\n761\n\n762\n\n763\n\n764\n\n765\n\n766\n\n767\n\n768\n\n769\n\n770\n\n771\n\n772\n\n773\n\n774\n\n775\n\n776\n\n777\n\n778\n\n779\n\n780\n\n781\n\n782\n\n783\n\n784\n\n785\n\n786\n\n787\n\n788\n\n789\n\n790\n\n791\n\n792\n\n793\n\n794\n\n795\n\n796\n\n797\n\n798\n\n799\n\n800\n\n801\n\n802\n\n803\n\n804\n\n805\n\n806\n\n807\n\n808\n\n809\n\n810\n\n811\n\n812\n\n813\n\n814\n\n815\n\n816\n\n817\n\n818\n\n819\n\n820\n\n821\n\n822\n\n823\n\n824\n\n825\n\n826\n\n827\n\n828\n\n829\n\n830\n\n831\n\n832\n\n833\n\n834\n\n835\n\n836\n\n837\n\n838\n\n839\n\n840\n\n841\n\n842\n\n843\n\n844\n\n845\n\n846\n\n847\n\n848\n\n849\n\n850\n\n851\n\n852\n\n853\n\n854\n\n855\n\n856\n\n857\n\n858\n\n859\n\n860\n\n861\n\n862\n\n863\n\n864\n\n865\n\n866\n\n867\n\n868\n\n869\n\n870\n\n871\n\n872\n\n873\n\n874\n\n875\n\n876\n\n877\n\n878\n\n879\n\n880\n\n881\n\n882\n\n883\n\n884\n\n885\n\n886\n\n887\n\n888\n\n889\n\n890\n\n891\n\n892\n\n893\n\n894\n\n895\n\n896\n\n897\n\n898\n\n899\n\n900\n\n901\n\n902\n\n903\n\n904\n\n905\n\n906\n\n907\n\n908\n\n909\n\n910\n\n911\n\n912\n\n913\n\n914\n\n915\n\n916\n\n917\n\n918\n\n919\n\n920\n\n921\n\n922\n\n923\n\n924\n\n925\n\n926\n\n927\n\n928\n\n929\n\n930\n\n931\n\n932\n\n933\n\n934\n\n935\n\n936\n\n937\n\n938\n\n939\n\n940\n\n941\n\n942\n\n943\n\n944\n\n945\n\n946\n\n947\n\n948\n\n949\n\n950\n\n951\n\n952\n\n953\n\n954\n\n955\n\n956\n\n957\n\n958\n\n959\n\n960\n\n961\n\n962\n\n963\n\n964\n\n965\n\n966\n\n967\n\n968\n\n969\n\n970\n\n971\n\n972\n\n973\n\n974\n\n975\n\n976\n\n977\n\n978\n\n979\n\n980\n\n981\n\n982\n\n983\n\n984\n\n985\n\n986\n\n987\n\n988\n\n989\n\n990\n\n991\n\n992\n\n993\n\n994\n\n995\n\n996\n\n997\n\n998\n\n999\n\n1000\n\n/* X-Chat\n\n* Copyright (C) 1998 Peter Zelezny.\n\n*\n\n* This program is free software; you can redistribute it and/or modify\n\n* it under the terms of the GNU General Public License as published by\n\n* the Free Software Foundation; either version 2 of the License, or\n\n* (at your option) any later version.\n\n*\n\n* This program is distributed in the hope that it will be useful,\n\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\n* GNU General Public License for more details.\n\n*\n\n* You should have received a copy of the GNU General Public License\n\n* along with this program; if not, write to the Free Software\n\n* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n\n*/\n\n#include <stdlib.h>\n\n#include <stdio.h>\n\n#include <string.h>\n\n#include <sys/types.h>\n\n#include <sys/stat.h>\n\n#ifndef WIN32\n\n#include <unistd.h>\n\n#endif\n\n#include \"hexchat.h\"\n\n#include \"cfgfiles.h\"\n\n#include \"fe.h\"\n\n#include \"server.h\"\n\n#include \"text.h\"\n\n#include \"util.h\" /* token_foreach */\n\n#include \"hexchatc.h\"\n\n#include \"servlist.h\"\n\nstruct defaultserver\n\n{\n\nchar *network;\n\nchar *host;\n\nchar *channel;\n\nchar *charset;\n\nint loginmode; /* default authentication type */\n\nchar *connectcmd; /* default connect command - should only be used for rare login types, paired with LOGIN_CUSTOM */\n\ngboolean ssl;\n\n};\n\nstatic const struct defaultserver def[] =\n\n{\n\n{\"2600net\", 0},\n\n/* Invalid hostname in cert */\n\n{0, \"irc.2600.net\"},\n\n{\"AfterNET\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.afternet.org\"},\n\n{\"Aitvaras\", 0},\n\n#ifdef USE_OPENSSL\n\n{0, \"irc.data.lt/+6668\"},\n\n{0, \"irc.omicron.lt/+6668\"},\n\n{0, \"irc.vub.lt/+6668\"},\n\n#endif\n\n{0, \"irc.data.lt\"},\n\n{0, \"irc.omicron.lt\"},\n\n{0, \"irc.vub.lt\"},\n\n{\"Anthrochat\", 0, 0, 0, 0, 0, TRUE},\n\n{0, \"irc.anthrochat.net\"},\n\n{\"ARCNet\", 0},\n\n{0, \"arcnet-irc.org\"},\n\n{\"AustNet\", 0},\n\n{0, \"irc.austnet.org\"},\n\n{\"AzzurraNet\", 0},\n\n{0, \"irc.azzurra.org\"},\n\n{\"Canternet\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.canternet.org\"},\n\n{\"Chat4all\", 0, 0, 0, 0, 0, TRUE},\n\n{0, \"irc.chat4all.org\"},\n\n{\"ChatJunkies\", 0},\n\n{0, \"irc.chatjunkies.org\"},\n\n{\"chatpat\", 0, 0, \"CP1251\", LOGIN_CUSTOM, \"MSG NS IDENTIFY %p\"},\n\n{0, \"irc.unibg.net\"},\n\n{0, \"irc.chatpat.bg\"},\n\n{\"ChatSpike\", 0, 0, 0, LOGIN_SASL},\n\n{0, \"irc.chatspike.net\"},\n\n{\"DaIRC\", 0},\n\n{0, \"irc.dairc.net\"},\n\n{\"DALnet\", 0, 0, 0, LOGIN_NICKSERV},\n\n/* Self signed */\n\n{0, \"us.dal.net\"},\n\n{\"DarkMyst\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.darkmyst.org\"},\n\n#ifdef USE_OPENSSL\n\n{\"darkscience\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.darkscience.net\"},\n\n{0, \"irc.drk.sc\"},\n\n{0, \"irc.darkscience.ws\"},\n\n#endif\n\n{\"Dark-Tou-Net\", 0},\n\n{0, \"irc.d-t-net.de\"},\n\n{\"DigitalIRC\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.digitalirc.org\"},\n\n#ifdef USE_OPENSSL\n\n{\"DosersNET\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.dosers.net/+6697\"},\n\n#endif\n\n{\"EFnet\", 0},\n\n{0, \"irc.choopa.net\"},\n\n{0, \"efnet.port80.se\"},\n\n{0, \"irc.underworld.no\"},\n\n{0, \"efnet.deic.eu\"},\n\n{\"EnterTheGame\", 0},\n\n{0, \"irc.enterthegame.com\"},\n\n{\"EntropyNet\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.entropynet.net\"},\n\n{\"EsperNet\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.esper.net\"},\n\n{\"EUIrc\", 0},\n\n{0, \"irc.euirc.net\"},\n\n{\"EuropNet\", 0},\n\n/* Self signed */\n\n{0, \"irc.europnet.org\"},\n\n{\"FDFNet\", 0},\n\n/* Self signed */\n\n{0, \"irc.fdfnet.net\"},\n\n{\"GameSurge\", 0},\n\n{0, \"irc.gamesurge.net\"},\n\n{\"GeekShed\", 0, 0, 0, 0, 0, TRUE},\n\n{0, \"irc.geekshed.net\"},\n\n{\"German-Elite\", 0, 0, \"CP1252\"},\n\n{0, \"irc.german-elite.net\"},\n\n{\"GIMPNet\", 0},\n\n/* Invalid hostname in cert */\n\n{0, \"irc.gimp.org\"},\n\n{0, \"irc.gnome.org\"},\n\n{\"GlobalGamers\", 0},\n\n#ifdef USE_OPENSSL\n\n{0, \"irc.globalgamers.net/+6660\"},\n\n#endif\n\n{0, \"irc.globalgamers.net\"},\n\n#ifdef USE_OPENSSL\n\n{\"hackint\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.hackint.org\"},\n\n{0, \"irc.eu.hackint.org\"},\n\n#endif\n\n{\"Hashmark\", 0},\n\n{0, \"irc.hashmark.net\"},\n\n{\"ICQ-Chat\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.icq-chat.com\"},\n\n{\"Interlinked\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.interlinked.me\"},\n\n{\"Irc-Nerds\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.irc-nerds.net\"},\n\n{\"IRC4Fun\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.irc4fun.net\"},\n\n{\"IRCNet\", 0},\n\n{0, \"open.ircnet.net\"},\n\n{\"IRCtoo\", 0},\n\n{0, \"irc.irctoo.net\"},\n\n{\"Keyboard-Failure\", 0},\n\n/* SSL is self-signed */\n\n{0, \"irc.kbfail.net\"},\n\n{\"Libera.Chat\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.libera.chat\"},\n\n#ifdef USE_OPENSSL\n\n{\"LibertaCasa\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.liberta.casa\"},\n\n#endif\n\n{\"LibraIRC\", 0},\n\n/* Self signed */\n\n{0, \"irc.librairc.net\"},\n\n#ifdef USE_OPENSSL\n\n{\"LinkNet\", 0},\n\n{0, \"irc.link-net.org/+7000\"},\n\n#endif\n\n{\"MindForge\", 0, 0, 0, LOGIN_SASL},\n\n{0, \"irc.mindforge.org\"},\n\n{\"MIXXnet\", 0},\n\n{0, \"irc.mixxnet.net\"},\n\n{\"Oceanius\", 0, 0, 0, LOGIN_SASL},\n\n/* Self signed */\n\n{0, \"irc.oceanius.com\"},\n\n{\"OFTC\", 0, 0, 0, 0, 0, TRUE},\n\n{0, \"irc.oftc.net\"},\n\n{\"OtherNet\", 0},\n\n{0, \"irc.othernet.org\"},\n\n{\"OzOrg\", 0},\n\n{0, \"irc.oz.org\"},\n\n{\"PIK\", 0},\n\n{0, \"irc.krstarica.com\"},\n\n{\"pirc.pl\", 0, 0, 0, 0, 0, TRUE},\n\n{0, \"irc.pirc.pl\"},\n\n{\"PTNet\", 0},\n\n{0, \"irc.ptnet.org\"},\n\n{0, \"uevora.ptnet.org\"},\n\n{0, \"claranet.ptnet.org\"},\n\n{0, \"sonaquela.ptnet.org\"},\n\n{0, \"uc.ptnet.org\"},\n\n{0, \"ipg.ptnet.org\"},\n\n{\"QuakeNet\", 0, 0, 0, LOGIN_CHALLENGEAUTH},\n\n{0, \"irc.quakenet.org\"},\n\n{\"Rizon\", 0, 0, 0, 0, 0, TRUE},\n\n{0, \"irc.rizon.net\"},\n\n{\"RusNet\", 0, 0, \"KOI8-R (Cyrillic)\"},\n\n/* Self signed */\n\n{0, \"irc.tomsk.net\"},\n\n{0, \"irc.run.net\"},\n\n{0, \"irc.ru\"},\n\n{0, \"irc.lucky.net\"},\n\n{\"Serenity-IRC\", 0},\n\n{0, \"irc.serenity-irc.net\"},\n\n{\"SimosNap\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.simosnap.com\"},\n\n{\"SlashNET\", 0},\n\n/* Self signed */\n\n{0, \"irc.slashnet.org\"},\n\n{\"Snoonet\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.snoonet.org\"},\n\n{\"Sohbet.Net\", 0, 0, \"CP1254\"},\n\n{0, \"irc.sohbet.net\"},\n\n{\"SorceryNet\", 0, 0, 0, LOGIN_SASL},\n\n/* Self signed */\n\n{0, \"irc.sorcery.net\"},\n\n{\"SpotChat\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.spotchat.org\"},\n\n{\"Station51\", 0},\n\n/* Self signed */\n\n{0, \"irc.station51.net\"},\n\n{\"StormBit\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.stormbit.net\"},\n\n{\"SwiftIRC\", 0},\n\n/* Expired cert */\n\n{0, \"irc.swiftirc.net\"},\n\n{\"synIRC\", 0},\n\n/* Self signed */\n\n{0, \"irc.synirc.net\"},\n\n{\"Techtronix\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.techtronix.net\"},\n\n{\"TechNet\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.technet.chat\"},\n\n{\"tilde.chat\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.tilde.chat\"},\n\n{\"TURLINet\", 0, 0, 0, 0, 0, TRUE},\n\n/* all servers use UTF-8 and valid certs */\n\n{0, \"irc.servx.org\"},\n\n{0, \"i.valware.uk\"},\n\n#ifdef USE_OPENSSL\n\n{\"TripSit\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.tripsit.me\"},\n\n{0, \"newirc.tripsit.me\"},\n\n{0, \"coconut.tripsit.me\"},\n\n{0, \"innsbruck.tripsit.me\"},\n\n#endif\n\n{\"UnderNet\", 0, 0, 0, LOGIN_CUSTOM, \"MSG x@channels.undernet.org login %u %p\"},\n\n{0, \"irc.undernet.org\"},\n\n{\"Xertion\", 0, 0, 0, LOGIN_SASL, 0, TRUE},\n\n{0, \"irc.xertion.org\"},\n\n{0,0}\n\n};\n\nGSList *network_list = 0;\n\nfavchannel *\n\nservlist_favchan_copy (favchannel *fav)\n\n{\n\nfavchannel *newfav;\n\nnewfav = g_new (favchannel, 1);\n\nnewfav->name = g_strdup (fav->name);\n\nnewfav->key = g_strdup (fav->key); /* g_strdup() can handle NULLs so no need to check it */\n\nreturn newfav;\n\n}\n\nvoid\n\nservlist_connect (session *sess, ircnet *net, gboolean join)\n\n{\n\nircserver *ircserv;\n\nGSList *list;\n\nchar *port;\n\nserver *serv;\n\nif (!sess)\n\nsess = new_ircwindow (NULL, NULL, SESS_SERVER, TRUE);\n\nserv = sess->server;\n\n/* connect to the currently selected Server-row */\n\nlist = g_slist_nth (net->servlist, net->selected);\n\nif (!list)\n\nlist = net->servlist;\n\nif (!list)\n\nreturn;\n\nircserv = list->data;\n\n/* in case a protocol switch is added to the servlist gui */\n\nserver_fill_her_up (sess->server);\n\nif (join)\n\n{\n\nsess->willjoinchannel[0] = 0;\n\nif (net->favchanlist)\n\n{\n\nif (serv->favlist)\n\n{\n\ng_slist_free_full (serv->favlist, (GDestroyNotify) servlist_favchan_free);\n\n}\n\nserv->favlist = g_slist_copy_deep (net->favchanlist, (GCopyFunc) servlist_favchan_copy, NULL);\n\n}\n\n}\n\nif (net->logintype)\n\n{\n\nserv->loginmethod = net->logintype;\n\n}\n\nelse\n\n{\n\nserv->loginmethod = LOGIN_DEFAULT_REAL;\n\n}\n\nserv->password[0] = 0;\n\nif (net->pass)\n\n{\n\nsafe_strcpy (serv->password, net->pass, sizeof (serv->password));\n\n}\n\nif (net->flags & FLAG_USE_GLOBAL)\n\n{\n\nstrcpy (serv->nick, prefs.hex_irc_nick1);\n\n}\n\nelse\n\n{\n\nif (net->nick)\n\nstrcpy (serv->nick, net->nick);\n\n}\n\nserv->dont_use_proxy = (net->flags & FLAG_USE_PROXY) ? FALSE : TRUE;\n\n#ifdef USE_OPENSSL\n\nserv->use_ssl = (net->flags & FLAG_USE_SSL) ? TRUE : FALSE;\n\nserv->accept_invalid_cert =\n\n(net->flags & FLAG_ALLOW_INVALID) ? TRUE : FALSE;\n\n#endif\n\nserv->network = net;\n\nport = strrchr (ircserv->hostname, '/');\n\nif (port)\n\n{\n\n*port = 0;\n\n/* support \"+port\" to indicate SSL (like mIRC does) */\n\nif (port[1] == '+')\n\n{\n\n#ifdef USE_OPENSSL\n\nserv->use_ssl = TRUE;\n\n#endif\n\nserv->connect (serv, ircserv->hostname, atoi (port + 2), FALSE);\n\n} else\n\n{\n\nserv->connect (serv, ircserv->hostname, atoi (port + 1), FALSE);\n\n}\n\n*port = '/';\n\n} else\n\nserv->connect (serv, ircserv->hostname, -1, FALSE);\n\nserver_set_encoding (serv, net->encoding);\n\n}\n\nint\n\nservlist_connect_by_netname (session *sess, char *network, gboolean join)\n\n{\n\nircnet *net;\n\nGSList *list = network_list;\n\nwhile (list)\n\n{\n\nnet = list->data;\n\nif (g_ascii_strcasecmp (net->name, network) == 0)\n\n{\n\nservlist_connect (sess, net, join);\n\nreturn 1;\n\n}\n\nlist = list->next;\n\n}\n\nreturn 0;\n\n}\n\nint\n\nservlist_have_auto (void)\n\n{\n\nGSList *list = network_list;\n\nircnet *net;\n\nwhile (list)\n\n{\n\nnet = list->data;\n\nif (net->flags & FLAG_AUTO_CONNECT)\n\nreturn 1;\n\nlist = list->next;\n\n}\n\nreturn 0;\n\n}\n\nint\n\nservlist_auto_connect (session *sess)\n\n{\n\nGSList *list = network_list;\n\nircnet *net;\n\nint ret = 0;\n\nwhile (list)\n\n{\n\nnet = list->data;\n\nif (net->flags & FLAG_AUTO_CONNECT)\n\n{\n\nservlist_connect (sess, net, TRUE);\n\nret = 1;\n\n}\n\nlist = list->next;\n\n}\n\nreturn ret;\n\n}\n\nstatic gint\n\nservlist_cycle_cb (server *serv)\n\n{\n\nif (serv->network)\n\n{\n\nPrintTextf (serv->server_session,\n\n_(\"Cycling to next server in %s...\\n\"), ((ircnet *)serv->network)->name);\n\nservlist_connect (serv->server_session, serv->network, TRUE);\n\n}\n\nreturn 0;\n\n}\n\nint\n\nservlist_cycle (server *serv)\n\n{\n\nircnet *net;\n\nint max, del;\n\nnet = serv->network;\n\nif (net)\n\n{\n\nmax = g_slist_length (net->servlist);\n\nif (max > 0)\n\n{\n\n/* try the next server, if that option is on */\n\nif (net->flags & FLAG_CYCLE)\n\n{\n\nnet->selected++;\n\nif (net->selected >= max)\n\nnet->selected = 0;\n\n}\n\ndel = prefs.hex_net_reconnect_delay * 1000;\n\nif (del < 1000)\n\ndel = 500; /* so it doesn't block the gui */\n\nif (del)\n\nserv->recondelay_tag = fe_timeout_add (del, servlist_cycle_cb, serv);\n\nelse\n\nservlist_connect (serv->server_session, net, TRUE);\n\nreturn TRUE;\n\n}\n\n}\n\nreturn FALSE;\n\n}\n\nircserver *\n\nservlist_server_find (ircnet *net, char *name, int *pos)\n\n{\n\nGSList *list = net->servlist;\n\nircserver *serv;\n\nint i = 0;\n\nwhile (list)\n\n{\n\nserv = list->data;\n\nif (strcmp (serv->hostname, name) == 0)\n\n{\n\nif (pos)\n\n{\n\n*pos = i;\n\n}\n\nreturn serv;\n\n}\n\ni++;\n\nlist = list->next;\n\n}\n\nreturn NULL;\n\n}\n\nfavchannel *\n\nservlist_favchan_find (ircnet *net, char *channel, int *pos)\n\n{\n\nGSList *list;\n\nfavchannel *favchan;\n\nint i = 0;\n\nif (net == NULL)\n\nreturn NULL;\n\nlist = net->favchanlist;\n\nwhile (list)\n\n{\n\nfavchan = list->data;\n\nif (g_ascii_strcasecmp (favchan->name, channel) == 0)\n\n{\n\nif (pos)\n\n{\n\n*pos = i;\n\n}\n\nreturn favchan;\n\n}\n\ni++;\n\nlist = list->next;\n\n}\n\nreturn NULL;\n\n}\n\ncommandentry *\n\nservlist_command_find (ircnet *net, char *cmd, int *pos)\n\n{\n\nGSList *list = net->commandlist;\n\ncommandentry *entry;\n\nint i = 0;\n\nwhile (list)\n\n{\n\nentry = list->data;\n\nif (strcmp (entry->command, cmd) == 0)\n\n{\n\nif (pos)\n\n{\n\n*pos = i;\n\n}\n\nreturn entry;\n\n}\n\ni++;\n\nlist = list->next;\n\n}\n\nreturn NULL;\n\n}\n\n/* find a network (e.g. (ircnet *) to \"FreeNode\") from a hostname\n\n(e.g. \"irc.eu.freenode.net\") */\n\nircnet *\n\nservlist_net_find_from_server (char *server_name)\n\n{\n\nGSList *list = network_list;\n\nGSList *slist;\n\nircnet *net;\n\nircserver *serv;\n\nwhile (list)\n\n{\n\nnet = list->data;\n\nslist = net->servlist;\n\nwhile (slist)\n\n{\n\ngsize hostname_len;\n\nconst char *hostname, *p;\n\nserv = slist->data;\n\nhostname = serv->hostname;\n\n/* Ignore port when comparing */\n\nif ((p = strchr (hostname, '/')))\n\nhostname_len = p - hostname;\n\nelse\n\nhostname_len = strlen (hostname);\n\nif (g_ascii_strncasecmp (hostname, server_name, hostname_len) == 0)\n\nreturn net;\n\nslist = slist->next;\n\n}\n\nlist = list->next;\n\n}\n\nreturn NULL;\n\n}\n\nircnet *\n\nservlist_net_find (char *name, int *pos, int (*cmpfunc) (const char *, const char *))\n\n{\n\nGSList *list = network_list;\n\nircnet *net;\n\nint i = 0;\n\nwhile (list)\n\n{\n\nnet = list->data;\n\nif (cmpfunc (net->name, name) == 0)\n\n{\n\nif (pos)\n\n*pos = i;\n\nreturn net;\n\n}\n\ni++;\n\nlist = list->next;\n\n}\n\nreturn NULL;\n\n}\n\nircserver *\n\nservlist_server_add (ircnet *net, char *name)\n\n{\n\nircserver *serv;\n\nserv = g_new (ircserver, 1);\n\nserv->hostname = g_strdup (name);\n\nnet->servlist = g_slist_append (net->servlist, serv);\n\nreturn serv;\n\n}\n\ncommandentry *\n\nservlist_command_add (ircnet *net, char *cmd)\n\n{\n\ncommandentry *entry;\n\nentry = g_new (commandentry, 1);\n\nentry->command = g_strdup (cmd);\n\nnet->commandlist = g_slist_append (net->commandlist, entry);\n\nreturn entry;\n\n}\n\nGSList *\n\nservlist_favchan_listadd (GSList *chanlist, char *channel, char *key)\n\n{\n\nfavchannel *chan;\n\nchan = g_new (favchannel, 1);\n\nchan->name = g_strdup (channel);\n\nchan->key = g_strdup (key);\n\nchanlist = g_slist_append (chanlist, chan);\n\nreturn chanlist;\n\n}\n\nvoid\n\nservlist_favchan_add (ircnet *net, char *channel)\n\n{\n\nint pos;\n\nchar *name;\n\nchar *key;\n\nif (strchr (channel, ',') != NULL)\n\n{\n\npos = (int) (strchr (channel, ',') - channel);\n\nname = g_strndup (channel, pos);\n\nkey = g_strdup (channel + pos + 1);\n\n}\n\nelse\n\n{\n\nname = g_strdup (channel);\n\nkey = NULL;\n\n}\n\nnet->favchanlist = servlist_favchan_listadd (net->favchanlist, name, key);\n\ng_free (name);\n\ng_free (key);\n\n}\n\nvoid\n\nservlist_server_remove (ircnet *net, ircserver *serv)\n\n{\n\ng_free (serv->hostname);\n\ng_free (serv);\n\nnet->servlist = g_slist_remove (net->servlist, serv);\n\n}\n\nstatic void\n\nservlist_server_remove_all (ircnet *net)\n\n{\n\nircserver *serv;\n\nwhile (net->servlist)\n\n{\n\nserv = net->servlist->data;\n\nservlist_server_remove (net, serv);\n\n}\n\n}\n\nvoid\n\nservlist_command_free (commandentry *entry)\n\n{\n\ng_free (entry->command);\n\ng_free (entry);\n\n}\n\nvoid\n\nservlist_command_remove (ircnet *net, commandentry *entry)\n\n{\n\nservlist_command_free (entry);\n\nnet->commandlist = g_slist_remove (net->commandlist, entry);\n\n}\n\nvoid\n\nservlist_favchan_free (favchannel *channel)\n\n{\n\ng_free (channel->name);\n\ng_free (channel->key);\n\ng_free (channel);\n\n}\n\nvoid\n\nservlist_favchan_remove (ircnet *net, favchannel *channel)\n\n{\n\nservlist_favchan_free (channel);\n\nnet->favchanlist = g_slist_remove (net->favchanlist, channel);\n\n}\n\nstatic void\n\nfree_and_clear (char *str)\n\n{\n\nif (str)\n\n{\n\nchar *orig = str;\n\nwhile (*str)\n\n*str++ = 0;\n\ng_free (orig);\n\n}\n\n}\n\n/* executed on exit: Clear any password strings */\n\nvoid\n\nservlist_cleanup (void)\n\n{\n\nGSList *list;\n\nircnet *net;\n\nfor (list = network_list; list; list = list->next)\n\n{\n\nnet = list->data;\n\nfree_and_clear (net->pass);\n\n}\n\n}\n\nvoid\n\nservlist_net_remove (ircnet *net)\n\n{\n\nGSList *list;\n\nserver *serv;\n\nservlist_server_remove_all (net);\n\nnetwork_list = g_slist_remove (network_list, net);\n\ng_free (net->nick);\n\ng_free (net->nick2);\n\ng_free (net->user);\n\ng_free (net->real);\n\nfree_and_clear (net->pass);\n\nif (net->favchanlist)\n\ng_slist_free_full (net->favchanlist, (GDestroyNotify) servlist_favchan_free);\n\nif (net->commandlist)\n\ng_slist_free_full (net->commandlist, (GDestroyNotify) servlist_command_free);\n\ng_free (net->encoding);\n\ng_free (net->name);\n\ng_free (net);\n\n/* for safety */\n\nlist = serv_list;\n\nwhile (list)\n\n{\n\nserv = list->data;\n\nif (serv->network == net)\n\n{\n\nserv->network = NULL;\n\n}\n\nlist = list->next;\n\n}\n\n}\n\nircnet *\n\nservlist_net_add (char *name, char *comment, int prepend)\n\n{\n\nircnet *net;\n\nnet = g_new0 (ircnet, 1);\n\nnet->name = g_strdup (name);\n\nnet->flags = FLAG_CYCLE | FLAG_USE_GLOBAL | FLAG_USE_PROXY;\n\n#ifdef USE_OPENSSL\n\nnet->flags |= FLAG_USE_SSL;\n\n#endif\n\nif (prepend)\n\nnetwork_list = g_slist_prepend (network_list, net);\n\nelse\n\nnetwork_list = g_slist_append (network_list, net);\n\nreturn net;\n\n}\n\nstatic void\n\nservlist_load_defaults (void)\n\n{\n\nint i = 0, j = 0;\n\nircnet *net = NULL;\n\nguint def_hash = g_str_hash (\"Libera.Chat\");\n\nwhile (1)\n\n{\n\nif (def[i].network)\n\n{\n\nnet = servlist_net_add (def[i].network, def[i].host, FALSE);\n\nif (def[i].channel)\n\n{\n\nservlist_favchan_add (net, def[i].channel);\n\n}\n\nif (def[i].charset)\n\n{\n\nnet->encoding = g_strdup (def[i].charset);\n\n}\n\nelse\n\n{\n\nnet->encoding = g_strdup (IRC_DEFAULT_CHARSET);\n\n}\n\nif (def[i].loginmode)\n\n{\n\nnet->logintype = def[i].loginmode;\n\n}\n\nif (def[i].connectcmd)\n\n{\n\nservlist_command_add (net, def[i].connectcmd);\n\n}\n\nif (def[i].ssl)\n\n{\n\nnet->flags |= FLAG_USE_SSL;\n\n}\n\nif (g_str_hash (def[i].network) == def_hash)\n\n{\n\nprefs.hex_gui_slist_select = j;\n\n}\n\nj++;\n\n}\n\nelse\n\n{\n\nservlist_server_add (net, def[i].host);\n\nif (!def[i+1].host && !def[i+1].network)\n\n{\n\nbreak;\n\n}\n\n}\n\ni++;\n\n}\n\n}\n\nstatic int\n\nservlist_load (void)\n\n{\n\nFILE *fp;\n\nchar buf[2048];\n\nint len;\n\nircnet *net = NULL;\n\n/* simple migration we will keep for a short while */\n\nchar *oldfile = g_build_filename (get_xdir (), \"servlist_.conf\", NULL);\n\nchar *newfile = g_build_filename (get_xdir (), \"servlist.conf\", NULL);\n\nif (g_file_test (oldfile, G_FILE_TEST_EXISTS) && !g_file_test (newfile, G_FILE_TEST_EXISTS))\n\n{\n\ng_rename (oldfile, newfile);\n\n}\n\ng_free (oldfile);\n\ng_free (newfile);\n\nfp = hexchat_fopen_file (\"servlist.conf\", \"r\", 0);\n\nif (!fp)\n\nreturn FALSE;\n\nwhile (fgets (buf, sizeof (buf) - 2, fp))\n\n{\n\nlen = strlen (buf);\n\nif (!len)\n\ncontinue;\n\nbuf[len] = 0;\n\nbuf[len-1] = 0; /* remove the trailing \\n */\n\nif (net)\n\n{\n\nswitch (buf[0])\n\n{\n\ncase 'I':\n\nnet->nick = g_strdup (buf + 2);\n\nbreak;\n\ncase 'i':\n\nnet->nick2 = g_strdup (buf + 2);\n\nbreak;\n\ncase 'U':\n\nnet->user = g_strdup (buf + 2);\n\nbreak;\n\nYou canât perform that action at this time."
    }
}