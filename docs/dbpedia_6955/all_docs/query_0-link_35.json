{
    "id": "dbpedia_6955_0",
    "rank": 35,
    "data": {
        "url": "https://devblogs.microsoft.com/scripting/use-powershell-to-remove-the-gui-on-windows-server-2012/",
        "read_more_link": "",
        "language": "en",
        "title": "Use PowerShell to Remove the GUI on Windows Server 2012",
        "top_image": "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2020/10/dr_scripto.jpg",
        "meta_img": "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2020/10/dr_scripto.jpg",
        "images": [
            "https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE1Mu3b?ver=5c31",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/q-for-powertip.jpg",
            "https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/a-for-powertip.jpg",
            "https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/6874.HSG-1-25-13-01.png",
            "https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/3678.HSG-1-25-13-02.png",
            "https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/7245.HSG-1-25-13-03.png",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/09/dr_scripto-102x150.gif",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/Share.svg",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/light-theme.png",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/dark-theme.png",
            "https://devblogs.microsoft.com/scripting/wp-content/themes/understrap-child-master/images/edit-outline.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Doctor Scripto"
        ],
        "publish_date": "2013-01-25T00:01:00+00:00",
        "summary": "",
        "meta_description": "Summary: A reader needs MCSE help with Microsoft exam 70-410 and wants to know how to use Windows PowerShell to add GUI elements from Windows Server 2012.  Hey, Scripting Guy! I have heard that it is possible to remove the graphical user interface (GUI) in Windows Server 2012 after you install the operating system.",
        "meta_lang": "en",
        "meta_favicon": "https://devblogs.microsoft.com/scripting/wp-content/uploads/sites/29/2018/10/Microsoft-Favicon.png",
        "meta_site_name": "Scripting Blog [archived]",
        "canonical_link": "https://devblogs.microsoft.com/scripting/use-powershell-to-remove-the-gui-on-windows-server-2012/",
        "text": "January 25th, 2013\n\nSummary: A reader needs MCSE help with Microsoft exam 70-410 and wants to know how to use Windows PowerShell to add GUI elements from Windows Server 2012.\n\nHey, Scripting Guy! I have heard that it is possible to remove the graphical user interface (GUI) in Windows Server 2012 after you install the operating system. I have looked around the Internet but not found anything about this. I am concerned, because I am going to be doing my MCSE, and I am studying for my first test, the 70-410 exam, and that just seems like it would make a good question. So, can you help me out here?\n\n—PH\n\nHello PH,\n\nMicrosoft Scripting Guy, Ed Wilson, is here. This morning, I am sipping a cup of Assam Tea and eating a homemade blueberry scone that the Scripting Wife made last night. When it gets cold, Teresa enjoys cooking as a hobby, and sometimes I am fortunate, and she makes things that are my absolute favorites. Of course, she makes things that are her favorites as well, and she even makes things the neighbors enjoy—such as her famous chili—but last night it was scones. And cold it is, 22 degrees Fahrenheit (-5 degrees Celsius) with freezing rain expected this afternoon. Somehow, 22 degrees Fahrenheit seems colder in Charlotte, North Carolina, than it does, for instance, in Seattle, Washington—maybe it is all a matter of expectations.\n\nAnyway, PH, you are in luck, because this week I took (and passed) the Installing and Configuring Windows Server 2012 (70-410) exam, so I applaud your efforts. You are also right—one of the objectives is stated as this: “convert Server Core to/from full GUI” … so, yes, it does look like removing the GUI in Windows would be a great test question.\n\nUse the ServerManager module on Windows Server 2012\n\nOne of the great things about Windows PowerShell on Windows Server 2012 is all the great cmdlets and functions. But these did not spring into being from nothingness—indeed, Windows PowerShell 2.0 on Windows Server 2008 R2 was an extremely powerful solution. One of my favorite features on Windows Server 2008 R2 with Windows PowerShell 2.0 is the ServerManager module, which contains three cmdlets: Add-WindowsFeature, Get-WindowsFeature, and Remove-WindowsFeature.\n\nIn the following code, run from Windows PowerShell 2.0 on Windows Server 2008 R2, I imported the ServerManager module and displayed the commands from the module.\n\nPS C:\\> ipmo servermanager\n\nPS C:\\> gcm -mo servermanager\n\nCommandType Name Definition\n\n———– —- ———-\n\nCmdlet Add-WindowsFeature Add-WindowsFeature [-Name] <Feature[]> [-Include…\n\nCmdlet Get-WindowsFeature Get-WindowsFeature [[-Name] <String[]>] [-LogPat…\n\nCmdlet Remove-WindowsFeature Remove-WindowsFeature [-Name] <Feature[]> [-LogP…\n\nSo, the ServerManager module has been around for a long time. In Windows PowerShell 3.0 on Windows Server 2012 (or on Windows 8 with the RSAT tools installed) two functions and two aliases were added to the ServerManager module. In addition, two of the cmdlets were renamed.\n\nEXAM ALERT In Windows Server 2012 (with Windows PowerShell 3.0) the Add-WindowsFeature cmdlet is renamed Install-WindowsFeature. The Remove-WindowsFeature cmdlet is renamed Uninstall-WindowsFeature. For backwards compatability, Add-WindowsFeature and Remove-WindowsFeature are added as aliases.\n\nThe features exposed by the ServerManager module on Windows Server 2012 are shown here.\n\n12:57 C:\\> ipmo servermanager\n\n12:58 C:\\> gcm -Module servermanager\n\nCommandType Name ModuleName\n\n———– —- ———-\n\nAlias Add-WindowsFeature ServerManager\n\nAlias Remove-WindowsFeature ServerManager\n\nFunction Disable-ServerManagerStandardUserRemoting ServerManager\n\nFunction Enable-ServerManagerStandardUserRemoting ServerManager\n\nCmdlet Get-WindowsFeature ServerManager\n\nCmdlet Install-WindowsFeature ServerManager\n\nCmdlet Uninstall-WindowsFeature ServerManager\n\nFirst find the names of the server GUI features\n\nTo find the name of the graphical elements of the Windows Server 2012 interface, use the Get-WindowsFeature (at least this one was not renamed) cmdlet. Luckily, it has both a –computername parameter as well as a –credential parameter. With the RSAT tools installed on my Windows 8 laptop, I can easily find the graphical components against a remote server. This command is shown here, where I supply administrator credentials to connect to a remote server named Hyperv2.\n\nGet-WindowsFeature -ComputerName hyperv2 -Name *gui* -Credential iammred\\administrator\n\nThe command and its associated output is shown here.\n\nIf I want to remove both the Server Graphical Shell and the Graphical Management Tools and Infrastructure, I can simply pipe the results of Get-WindowsFeature to Uninstall-WindowsFeature (Remove-WindowsFeature is the alias). Because I know the command requires a restart, I use the –restart parameter.\n\nThis command and its associated output is shown here.\n\nIf I use the –Remove switched parameter with the Uninstall-WindowsFeature cmdlet, the command uninstalls the feature and then deletes the feature from the side-by-side store (“$env:windir\\WINSXS”).\n\nBecause I want the option of adding the GUI back in at some point in the future, and because I have not configured a shared WINSXS store, I do not want to remove the bits from the system disk.\n\nFour flavors of Windows Server 2012 interface\n\nThere are actually four different flavors of the Windows Server 2012 interface. These are documented in a great TechNet Library article called Windows Server Installation Options. The four options are shown here.\n\nWindows Server 2012 core edition\n\nOnce I have a Windows Server 2012 core edition server, I can still use Remote Desktop (not much point in it), if I want to. When I do, the old-fashioned command prompt (cmd.exe) appears when logging on. Of course, I can launch Windows PowerShell by typing powershell at the command prompt. It is also possible to edit the registry to cause Windows Server 2012 core edition to automatically boot into Windows PowerShell. The image shown here illustrates Windows Server 2012 in core edition.\n\nHere is a list of commands that takes a full installation of Windows Server 2012 to the four different GUI levels.\n\nServer Core Option\n\nIf the server has a full installation of Windows Server, the following command removes the two features: Server Graphical Shell and Graphical Management Tools and Infrastructure, and the resulting installation is Server Core.\n\nGet-WindowsFeature *gui* | Uninstall-WindowsFeature –Restart\n\nMinimal Server Interface\n\nIf the server has a full installation of Windows Server, and I need to bring the server down to minimal server interface, I only need to remove the Server-GUI-Shell. The command is shown here.\n\nGet-WindowsFeature Server-Gui-Shell | Uninstall-WindowsFeature –Restart\n\nServer with a GUI\n\nIf the Windows Server is installed with “Server with a GUI,” the following two features are installed (and can be verified here).\n\nGet-WindowsFeature Server-Gui-Mgmt-Infra, Server-Gui-Shell\n\nIf the server is in Server Core mode, this command adds the two features and brings the server up to the Server with a GUI level.\n\nGet-WindowsFeature Server-Gui-Mgmt-Infra, Server-Gui-Shell | Install-WindowsFeature –restart\n\nServer with Desktop Experience Added (Windows 8 desktop mode)\n\nIf the server is at “Server with a GUI” mode, then the Desktop-Experience feature is not installed. This command verifies that fact.\n\nGet-WindowsFeature Desktop-Experience\n\nEXAM ALERT The Desktop-Experience feature has a dash in the name. On some web sites, this makes it seem like line continuation because it actually wraps. However, DesktopExperience does NOT return anything via Get-WindowsFeature—no errors, no anything. Desktop-Experience (with a dash in the middle of the name) will let you know if the Desktop-Experience feature is installed or not.\n\nTo install the Desktop-Experience feature on your computer running Windows Server 2012 (now in truth, about the only reason for doing this is IF you are actually running Windows Server 2012 as your desktop—such as if you have installed it on your laptop—please do not do this on a production server unless there is a real-live, honest compelling business reason for doing so).\n\nGet-WindowsFeature Desktop-Experience | Install-WindowsFeature -Restart\n\nPH, that is all there is to using Windows PowerShell to add and remove various features of the Windows GUI on your computer running Windows Server 2012. Join me tomorrow when I will talk about more cool Windows PowerShell stuff.\n\nI invite you to follow me on Twitter and Facebook. If you have any questions, send email to me at scripter@microsoft.com, or post your questions on the Official Scripting Guys Forum. See you tomorrow. Until then, peace."
    }
}