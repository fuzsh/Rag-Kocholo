{
    "id": "yago_31468_2",
    "rank": 10,
    "data": {
        "url": "https://www.tutorialspoint.com/lisp/lisp_overview.htm",
        "read_more_link": "",
        "language": "en",
        "title": "LISP - Overview",
        "top_image": "https://www.tutorialspoint.com/images/tp_logo_436.png",
        "meta_img": "https://www.tutorialspoint.com/images/tp_logo_436.png",
        "images": [
            "https://www.tutorialspoint.com/lisp/images/lisp-mini-logo.jpg",
            "https://www.tutorialspoint.com/static/images/logo-footer.svg",
            "https://www.tutorialspoint.com/static/images/googleplay.svg",
            "https://www.tutorialspoint.com/static/images/appstore.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "LISP - Overview - John McCarthy invented LISP in 1958, shortly after the development of FORTRAN. It was first implemented by Steve Russell on an IBM 704 computer.",
        "meta_lang": "en",
        "meta_favicon": "https://www.tutorialspoint.com/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.tutorialspoint.com/lisp/lisp_overview.htm",
        "text": "John McCarthy invented LISP in 1958, shortly after the development of FORTRAN. It was first implemented by Steve Russell on an IBM 704 computer.\n\nIt is particularly suitable for Artificial Intelligence programs, as it processes symbolic information effectively.\n\nCommon Lisp originated, during the 1980s and 1990s, in an attempt to unify the work of several implementation groups that were successors to Maclisp, like ZetaLisp and NIL (New Implementation of Lisp) etc.\n\nIt serves as a common language, which can be easily extended for specific implementation.\n\nPrograms written in Common LISP do not depend on machine-specific characteristics, such as word length etc.\n\nFeatures of Common LISP\n\nIt is machine-independent\n\nIt uses iterative design methodology, and easy extensibility.\n\nIt allows updating the programs dynamically.\n\nIt provides high level debugging.\n\nIt provides advanced object-oriented programming.\n\nIt provides a convenient macro system.\n\nIt provides wide-ranging data types like, objects, structures, lists, vectors, adjustable arrays, hash-tables, and symbols.\n\nIt is expression-based.\n\nIt provides an object-oriented condition system.\n\nIt provides a complete I/O library.\n\nIt provides extensive control structures.\n\nApplications Built in LISP\n\nLarge successful applications built in Lisp."
    }
}