{
    "id": "yago_31468_2",
    "rank": 77,
    "data": {
        "url": "http://www.pcai.com/web/ai_info/pcai_lisp.html",
        "read_more_link": "",
        "language": "en",
        "title": "LISP Programming Language",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://www.pcai.com/web/images/pcai.gif",
            "http://www.pcai.com/web/buttons/arrow_left.gif",
            "http://www.pcai.com/web/buttons/arrow_right.gif",
            "http://www.pcai.com/web/icons/franz_icon.gif",
            "http://www.pcai.com/web/amazon/amazon_color_logo.gif",
            "http://www.pcai.com/web/buttons/home.gif",
            "http://www.pcai.com/web/buttons/contents.gif",
            "http://www.pcai.com/web/buttons/search.gif",
            "http://www.pcai.com/web/buttons/news.gif",
            "http://www.pcai.com/web/buttons/services.gif",
            "http://www.pcai.com/web/buttons/contact.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Overview: LISP (LISt Processor) is generally regarded as the language for AI. LISP was formulated by AI pioneer John McCarthy in the late 50's. Although LISP doesn't have a built-in inference mechanism, inference processes can be implemented into LISP very easily. LISP's essential data structure is an ordered sequence of elements called a \"list.\" The elements may be irreducible entities called \"atoms\" (functions, names or numbers) or they can be other lists. Lists are essential for AI work because of their flexibility: a programmer need not specify in advance the number or type of elements in a list. Also, lists can be used to represent an almost limitless array of things, from expert rules to computer programs to thought processes to system components. Originally, LISP was built around a small set of simple list-manipulating functions which were building blocks for defining other, more complex functions. Today's LISPs have many functions and features which facilitate development efforts. Among contemporary implementations and dialects, have gained acceptance as a standard. A substantial amount of work has also been done in Scheme, a LISP dialect which has influenced the developers of Common LISP. (Reference: Languages Of AI by Joseph Schmuller, September/October 1991, page 21)\n\nGlossary Link - LISP Programming Language\n\nSUBMIT YOUR SITE"
    }
}