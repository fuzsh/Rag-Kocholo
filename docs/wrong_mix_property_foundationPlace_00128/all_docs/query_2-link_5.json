{
    "id": "wrong_mix_property_foundationPlace_00128_2",
    "rank": 5,
    "data": {
        "url": "https://developer.salesforce.com/docs/commerce/b2c-commerce/guide/b2c-isprint.html",
        "read_more_link": "",
        "language": "en",
        "title": "Development Components",
        "top_image": "https://a.sfdcstatic.com/developer-website/images/favicon.ico",
        "meta_img": "https://a.sfdcstatic.com/developer-website/images/favicon.ico",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "<isprint>",
        "meta_lang": "en",
        "meta_favicon": "https://a.sfdcstatic.com/developer-website/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://developer.salesforce.com/docs/commerce/b2c-commerce/guide/b2c-isprint.html",
        "text": "isprint Element\n\n<isprint> is used to format and encode data for output.\n\nvalue = output\n\nAllowed data type: expression only. String is not allowed\n\noutput is an expression that resolves to the text you want to output.\n\n(style = style_ID) | (formatter = format)\n\nYou must include either style or formatter, but not both:\n\nstyle = style_ID Allowed data type: string style specifies a style identifier. Instead of using the style parameter, you can alternatively define a formatter string with the formatter attribute.\n\nformatter = format Allowed data type: string or expression. formatter defines a formatting string to control how <isprint> outputs expression results. For information on building your own formatter string, refer to Formatting Expression Results (which follows). If formatter is used, style must be omitted.\n\ntimezone = \"SITE\" | \"INSTANCE\" | \"utc\"\n\n- SITE lets you print time zones as specified for your site. Defined through the Business Manager via the Site Preferences module, Time Zone section.\n\nThis is the default. If the attribute or value isn't provided, the value for the site is used.\n\nINSTANCE lets you print time zones as specified for your instance. Defined through the Business Manager via the Global Preferences module, Instance Time Zone Section.\n\nutc lets you print the date values without time zone conversion. In the unique case of customer.birthday, the \"utc\" time zone reflects the time zone free nature of the date value type. User input for the date attribute is now always interpreted as UTC time in the Business Manager. This timezone value ensures that no time zone conversion occurs for date attributes that are supposed to have no time component. If you require time zone conversion, use the existing value type datetime instead.\n\nYou can specify a particular time zone used for printing dates. This attribute enables you to specify whether you want to print dates with the instance time zone, the site time zone or without time zone conversion.\n\nTime zone identifiers are case insensitive.\n\nExample:\n\npadding = padding_constant\n\nAllowed data type: string or expression.\n\npadding_constant is used only with mail templates, which are templates using plain rather than html type, to define field width and other spacing issues. For example, when printing a list of product names using a loop statement, you can define a constant field width for every element of the list. The value for padding can be any positive or negative number. The absolute value of padding_constant defines the field width. A positive value produces left-aligned output; a negative value produces right-aligned output. If the output string is greater than the field size, the output string is truncated at its right end.\n\nencoding = \"on\" | \"off\" | context\n\nDefault value is on. With this attribute, you can explicitly switch automatic encoding on and off. Salesforce B2C Commerce supports encoding in HTML, XML and WML. Even if encoding is turned off, you an use the StringUtil API to encode individual strings.\n\nA ${} script expression embedded directly into the HTML is similar to the <isprint/> tag with encoding on and default styles.\n\nThe context element enables you to encode data to avoid cross-site scripting attacks in areas such as HTML attributes, XML, JavaScript, and JSON. Each value maps to a method in the SecureEncoder Class.\n\ncontext can be one of the following values:\n\nhtmlcontent: encodes a given input for use in a general context.\n\nhtmlsinglequote: encodes a given input for use in an HTML Attribute guarded by a single quote.\n\nhtmldoublequote: encodes a given input for use in an HTML Attribute guarded by a double quote.\n\nhtmlunquote: encodes a given input for use in an HTML Attribute left unguarded.\n\njshtml: encodes a given input for use in JavaScript inside an HTML context.\n\njsattribute: encodes a given input for use in JavaScript inside an HTML attribute.\n\njsblock: encodes a given input for use in JavaScript inside an HTML block.\n\njssource: encodes a given input for use in JavaScript inside a JavaScript source file.\n\njsonvalue: encodes a given input for use in a JSON Object Value to prevent escaping into a trusted context.\n\nuricomponent: encodes a given input for use as a component of a URI.\n\nuristrict: encodes a given input for use as a component of a URI.\n\nxmlcontent: encodes a given input for use in a general XML context.\n\nxmlsinglequote: encodes a given input for use in an XML attribute guarded by a single quote.\n\nxmldoublequote: encodes a given input for use in an XML attribute guarded by a double quote.\n\nxmlcomment: encodes a given input for use in an XML comments.\n\nThese are some examples:\n\nThe <isprint> tag outputs the result of expressions and template variables. Even though it's possible to output expression results without <isprint>, you should always use it because it contributes to optimizing your template code.\n\nThe <isprint> tag also takes care of formatting and encoding output strings.\n\nEncoding is always done after formatting.\n\nIf the result of an expression appears on an HTML page, you should first specify how it should be done. For example, a date can be formatted in different ways depending on the store's locale:\n\n12 March 1999\n\n12.03.1999\n\n03/12/99\n\nAll formatters are additionally customized by regional settings.\n\nObjects of classes other than Money, Date, Quantity and Number are not formatted and the result of formatting these objects isn't standardized.\n\nStyles are pre-defined formatter strings, which are defined in standard formatter classes. You can specify a style via the style attribute of the <isprint> tag.\n\nThis class is used to format the expression results of type Money. The following table shows valid styles.\n\nCurrency symbols are based on the Default Currency, which is set per site, and can be configured in Administration > Sites > Manage Sites > SiteGenesis - General.\n\nValid Style IdentifierDescriptionExampleMONEY_SHORTTwo digits following a decimal separator. No currency symbol.Input: 3333 Formatted string: \"3,333.00\"MONEY_LONGTwo digits following a decimal separator. Leading currency symbol.Input: 3333 Formatted string: \"$3,333.00\"\n\nThis class is used to format expression results of type Number. The following table lists the valid styles.\n\nValid Style IdentifierDescriptionExampleINTEGERNo digits after decimal separator. No decimal separator.Input: 2200.1234 Formatted string: \"2,200\"DECIMALExactly two digits after decimal separator.Input: 2200.1234 Formatted string: \"2,200.12\"\n\nThis class is used to format expression results of type Quantity. The following table lists the valid styles.\n\nValid Style IdentifierDescriptionExampleQUANTITY_SHORT0 to 3 digits after decimal separator. No quantity symbol.\n\nInput: 3333 kg\n\nFormatted string: \"3,333\"\n\nInput: 3333.1 kg\n\nFormatted string: \"3,333.1\"\n\nInput: 3333.1234 kg\n\nFormatted string: \"3,333.123\"\n\nQUANTITY_LONG0 to 3 digits after decimal separator. Following quantity symbol.\n\nInput: 3333 kg\n\nFormatted string: \"3,333 kg\"\n\nInput: 3333.1 kg\n\nFormatted string: \"3,333.1 kg\"\n\nInput: 3333.1234 kg\n\nFormatted string: \"3,333.123 kg\"\n\nDate Formatting\n\nThis class is used to format expression results of type Date. The following table lists the valid styles.\n\nValid Style IdentifierDescriptionExampleDATE_SHORTDate without clock time in short format.Formatted string: \"9/25/99\"DATE_LONGDate without clock time in long format.Formatted string: \"SEP 25, 1999\"DATE_TIMEClock time.Formatted string: \"7:55:55 PM\"\n\nThe default style of a formatter class is used if nothing else has been specified by the user, neither a style, nor a user-defined formatter style. The following table lists the valid styles.\n\nData Formatting TypeDefault StyleMoney FormattingMONEY_LONGNumber FormattingDECIMALQuantity FormattingQUANTITY_SHORTDate FormattingDATE_SHORT\n\nA formatter string is explicitly given by the user via the formatter attribute of <isprint>. For more information about valid placeholders, see the B2C Commerce Script API documentation. The following table provides examples of user-defined formatter strings.\n\nStandard Formatter ClassExampleMoney Formatting\n\nScheme: \"_ #,#00.0#\"\n\nInput: 3\n\nFormatted string: \"$ 03.00\"\n\nInput: 3333.123\n\nFormatted string: \"$ 3,333.12\"\n\nNumber FormattingQuantity Formatting\n\nScheme: \"#,#00.0# _;(-#,#00.0# *)\"\n\nInput: 3\n\nFormatted string: \"03.0 kg\"\n\nInput: 3333.333\n\nFormatted string: \"3,333.33 kg\"\n\nDate Formatting\n\nScheme: \"EEE, MMM d, 'yy\"\n\nFormatted string: \"Wed, July 10, '96\"\n\nScheme: \"h a\"\n\nFormatted string: \"12:08 PM\"\n\nScheme: \"K a, z\"\n\nFormatted string: \"0:00 PM, PST\"\n\nScheme: \"yyyyy.MMMMM.dd GGG hh aaa\"\n\nFormatted string: \"1996.July.10 AD 12:08 PM\"\n\nIn the following example, the number style, INTEGER is used for the value sitecount.\n\nUser-defined formatters let you explicitly specify a format via the <isprint> formatter attribute. You build formatters with placeholders. For example, \"* #,#00.0#\", \"EEE, MMM d\" or \"yy\".\n\nPlaceholderAction\"0\"Defines required placeholder\"#\"Defines option placeholder\"*\"Defines required symbol (for example, currency or weight)\n\nThe following example uses the # placeholder, a page incrementer:\n\nThe following example uses the placeholders \"* #,#00.0#,\" which define how decimal places and commas are handled for a list generated by CustomAmount data.\n\nIt's possible to use national characters, such as Greek or Cyrillic letters, as well as mathematical symbols and any non-ASCII characters in HTML documents. To ensure that a web browser can interpret and show these characters correctly, they must be encoded using HTML representations. To do this, you must replace characters, such as \"<,\" \">,\" or \"&\" with named character entities as defined in the HTML 4.0 standard or XHTML 1.0/1.1.\n\nExpression output is automatically encoded if the expression is embedded directly in the template or used for an HTML attribute. This ensures that the site isn't subject to cross-site scripting attacks. If the expression is used in an ISML tag attribute, no encoding is applied. Use <isprint> for more granular control of the expression output especially if the result of the expression is a string that contains a special character.\n\nSee the example, which shows the exact string returned by <isprint> for a string containing a quote sign. The example assumes that the template variable product stores the value Nokia 447X Pro 17\" Monitor.\n\nISML code in template: <isprint value=\"${Product.name}\">\n\ngenerated HTML code: \"Nokia 447X Pro 17&quot; Monitor\"\n\nshown by the browser: Nokia 447X Pro 17 \" Monitor\n\nThe default is \"on\".\n\nThe first example demonstrates how to use <isprint> to output an expression that returns a string. The returned string is formatted as defined by either the default formatter (first sample), or by using a style (second sample), or by a user-defined formatter string (third sample).\n\nThe next set of examples show the usage of the padding attribute:\n\nstring output: \" 5.00 USD\"\n\nstring output: \"5.00 USD \"\n\nstring output: \"foo\"\n\nThese examples show usage of the encoding attribute:\n\nstring output: \">new<\"\n\nstring output: \">new<\"\n\nThe following example shows a string containing quotation marks, and the corresponding string that is returned by the <isprint> tag (it's assumed that the template variable product has the value Nokia 447X Pro 17\" Monitor):"
    }
}