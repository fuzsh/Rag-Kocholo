{
    "id": "dbpedia_4518_3",
    "rank": 6,
    "data": {
        "url": "https://forum.freecodecamp.org/t/coding-in-other-languages/597287",
        "read_more_link": "",
        "language": "en",
        "title": "Coding in other languages",
        "top_image": "https://global.discourse-cdn.com/freecodecamp/original/3X/2/0/206c254cf9e405bcddf6caea7f882dca146dcd3c.png",
        "meta_img": "https://global.discourse-cdn.com/freecodecamp/original/3X/2/0/206c254cf9e405bcddf6caea7f882dca146dcd3c.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "system Closed"
        ],
        "publish_date": "2023-03-09T17:03:39+00:00",
        "summary": "",
        "meta_description": "I am curious about whether programming languages in non-English speaking countries such as France, Spain, and Japan have the same syntax as English programming languages?",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/freecodecamp/optimized/3X/2/0/206c254cf9e405bcddf6caea7f882dca146dcd3c_2_32x32.png",
        "meta_site_name": "The freeCodeCamp Forum",
        "canonical_link": "https://forum.freecodecamp.org/t/coding-in-other-languages/597287",
        "text": "The syntax of the coding language doesn’t change. A var is a var, no matter where it’s written. Some coding languages look more like English than others. The names of variables, comments, and any text being generated can be anything you like, but very often when you look at code written commercially you’ll see that English is disproportionately used. English is currently the de facto “common language” of code, so when there is the possibility that a software project could be international the bias is toward English.\n\nNo they don’t, they generally use a common vocabualary based on a combination of\n\na constrained set of characters (ASCII) available on all computers\n\nprevious programming languages\n\nmathematical idioms\n\nMost newer languages support utf8 for defining names of things, often specifically so that, for example, Chinese programmers can use Chinese for naming things. But that doesn’t affect the actual syntax.\n\nA programming language is a symbolic language: not as much as in maths, but still, that’s what it is. The fact they all use English words for the most part, that isn’t really anything but an accident of history. Like Greek letters are used all over the place in maths: doesn’t mean maths is Greek (heh), you don’t use a different maths in Germany than you would in Ghana.\n\nOCAML is not based on C, it’s an ML family language, and there’s nothing specifically “French” about it. There’s nothing specifically “Japanese” about Ruby, or “Swedish” about Erlang, or “Brazilian” about Lua or Elixir, or “Dutch” about Python. Or for that matter there’s nothing “Greek” about Geometry, or “Arabic” about algebra.\n\n“ML” stands for “Meta Language” (not “machine learning”), it’s just a general purpose programming language invented in the 1970s, like C. It’s not something designed for artificial intelligence any more than C is.\n\nEdit: ML languages use a type system called Hindley-Milner, that’s their main chacteristic. So Standard ML and OCaml are dialects of ML. F# (which is a direct port of OCaml, but allows interop with other Microsoft languages so isn’t quite just a dialect), Haskell, Elm, Idris are directly influenced by it and can say are ML-family languages. Swift, Kotlin, Scala take many of its ideas (Swift in particular is basically OCaml). C++, C#, Rust are even further away but also absorbed very many of its ideas.\n\nThen C++, Java, C#, Go, Rust are C-type languages (ideas converge). Python very much is, as is PHP. Lots of languages use C-type syntax, like JavaScript, so they look similar even though they work a bit differently (Python looks the same as well except it swaps curly brackets for the whitespace). Etc etc"
    }
}