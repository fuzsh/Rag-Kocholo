{
    "id": "dbpedia_4518_0",
    "rank": 94,
    "data": {
        "url": "https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3",
        "read_more_link": "",
        "language": "en",
        "title": "Bitwise Operators in Javascript",
        "top_image": "https://miro.medium.com/v2/resize:fit:686/1*QhPKjsxw22Hf5a3-cR96fQ.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:686/1*QhPKjsxw22Hf5a3-cR96fQ.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:48:48/1*VqnPxLOxhOlFYlaboLuJag.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:64:64/1*VqnPxLOxhOlFYlaboLuJag.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Joe Cha",
            "medium.com"
        ],
        "publish_date": "2017-09-06T21:50:34.977000+00:00",
        "summary": "",
        "meta_description": "So far the two programming languages we have worked with are Ruby and Javascript. There are many differences between the two, but one thing they have in common is how they deal with logical…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3",
        "text": "So far the two programming languages we have worked with are Ruby and Javascript. There are many differences between the two, but one thing they have in common is how they deal with logical operators. AND is represented by &&, OR is represented with ||, etc. We are accustomed to using double symbol operators like && and ||. Why can’t we use use single symbols? Because the single symbol is reserved for bitwise operators.\n\nWhat are bitwise operators? They are a way to interact with variables at the bit level. Bits are usually translated into floats and integers so it’s easier to digest the information. If we value speed and efficiency, then it will be useful to deal with bits directly and skip that translation into floats/ints. Bits are faster than variables in Javascript, but it seems like it’s more complicated than just skipping a level of translation.\n\nSimple numbers in bits\n\n1 (integer) = 0001 (binary)\n\n2 = 0010\n\n3 = 0011\n\n4 = 0100\n\n5 = 0101\n\n6 = 0110\n\n7 = 0111\n\n8 = 1000\n\nBitwise operators (AND, OR, XOR) behave similarly to normal logic operators, except that they evaluate on a bit level and not the way we normally interpret logic. Here is an example of the difference between a bitwise operator and a normal logic operator.\n\nHow can the result of 3 & 6 possibly equal 2? We see 3 & 6, but it really is\n\nThe result is 2 because the common denominator of those two bits is the second digit.\n\nIt’s clear that bitwise operators work on a different level than what we are accustomed to. Is there any benefit from using bitwise operators? It would be useful to find some practical applications for these operations. Evaluating at the bit level is faster than a normal logic operator, so evaluating or iterating over a large sample would be more efficient in bitwise operations. Another example that is more applicable to web development, is masking. We can do this! I think\n\nMasking is a way to send a very simple string of bits, and allocate different digits to indicate different flags. This is a method to quickly ask a series of yes or no questions. Let’s pretend we have a website and we want to have 4 simple flags follow the user.\n\nFlag A = “Is the user authenticated?” = 1\n\nFlag B = “Is the user in the correct region?” = 2\n\nFlag C = “Can we get ice cream after?” = 4\n\nFlag D = “Is the user a robot?” = 8\n\nThese flags can be passed in a four digit binary string.\n\n0000 = DCBA\n\nBy placing a 1 in the corresponding digit, we can raise the flags we want\n\n1000 (binary) = Flag D = 8 (integer)\n\n0100 (binary) = Flag C = 4 (integer)\n\n0010 (binary)= Flag B = 2 (integer)\n\n0001 (binary)= Flag A = 1 (integer)\n\nThis is a way to raise multiple flags at the same time when all we are passing through is an integer.\n\n1010 (binary) = Flag D and Flag B = 10 (integer)\n\n0111 (binary) = Flag C, B and A = 7 (integer)\n\nLet’s make sure this works.\n\nCool, it worked. Totally expected that. Haha no I didn’t, but it’s great to see that we can pass an integer and raise multiple flags from it."
    }
}