{
    "id": "dbpedia_4518_3",
    "rank": 39,
    "data": {
        "url": "https://google.github.io/styleguide/cppguide.html",
        "read_more_link": "",
        "language": "en",
        "title": "Google C++ Style Guide",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.google.com/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Background\n\nC++ is one of the main development languages used by many of Google's open-source projects. As every C++ programmer knows, the language has many powerful features, but this power brings with it complexity, which in turn can make code more bug-prone and harder to read and maintain.\n\nThe goal of this guide is to manage this complexity by describing in detail the dos and don'ts of writing C++ code. These rules exist to keep the code base manageable while still allowing coders to use C++ language features productively.\n\nStyle, also known as readability, is what we call the conventions that govern our C++ code. The term Style is a bit of a misnomer, since these conventions cover far more than just source file formatting.\n\nMost open-source projects developed by Google conform to the requirements in this guide.\n\nNote that this guide is not a C++ tutorial: we assume that the reader is familiar with the language.\n\nGoals of the Style Guide\n\nWhy do we have this document?\n\nThere are a few core goals that we believe this guide should serve. These are the fundamental whys that underlie all of the individual rules. By bringing these ideas to the fore, we hope to ground discussions and make it clearer to our broader community why the rules are in place and why particular decisions have been made. If you understand what goals each rule is serving, it should be clearer to everyone when a rule may be waived (some can be), and what sort of argument or alternative would be necessary to change a rule in the guide.\n\nThe goals of the style guide as we currently see them are as follows:\n\nStyle rules should pull their weight\n\nThe benefit of a style rule must be large enough to justify asking all of our engineers to remember it. The benefit is measured relative to the codebase we would get without the rule, so a rule against a very harmful practice may still have a small benefit if people are unlikely to do it anyway. This principle mostly explains the rules we don’t have, rather than the rules we do: for example, goto contravenes many of the following principles, but is already vanishingly rare, so the Style Guide doesn’t discuss it.\n\nOptimize for the reader, not the writer\n\nOur codebase (and most individual components submitted to it) is expected to continue for quite some time. As a result, more time will be spent reading most of our code than writing it. We explicitly choose to optimize for the experience of our average software engineer reading, maintaining, and debugging code in our codebase rather than ease when writing said code. \"Leave a trace for the reader\" is a particularly common sub-point of this principle: When something surprising or unusual is happening in a snippet of code (for example, transfer of pointer ownership), leaving textual hints for the reader at the point of use is valuable (std::unique_ptr demonstrates the ownership transfer unambiguously at the call site).\n\nBe consistent with existing code\n\nUsing one style consistently through our codebase lets us focus on other (more important) issues. Consistency also allows for automation: tools that format your code or adjust your #includes only work properly when your code is consistent with the expectations of the tooling. In many cases, rules that are attributed to \"Be Consistent\" boil down to \"Just pick one and stop worrying about it\"; the potential value of allowing flexibility on these points is outweighed by the cost of having people argue over them. However, there are limits to consistency; it is a good tie breaker when there is no clear technical argument, nor a long-term direction. It applies more heavily locally (per file, or for a tightly-related set of interfaces). Consistency should not generally be used as a justification to do things in an old style without considering the benefits of the new style, or the tendency of the codebase to converge on newer styles over time.\n\nBe consistent with the broader C++ community when appropriate\n\nConsistency with the way other organizations use C++ has value for the same reasons as consistency within our code base. If a feature in the C++ standard solves a problem, or if some idiom is widely known and accepted, that's an argument for using it. However, sometimes standard features and idioms are flawed, or were just designed without our codebase's needs in mind. In those cases (as described below) it's appropriate to constrain or ban standard features. In some cases we prefer a homegrown or third-party library over a library defined in the C++ Standard, either out of perceived superiority or insufficient value to transition the codebase to the standard interface.\n\nAvoid surprising or dangerous constructs\n\nC++ has features that are more surprising or dangerous than one might think at a glance. Some style guide restrictions are in place to prevent falling into these pitfalls. There is a high bar for style guide waivers on such restrictions, because waiving such rules often directly risks compromising program correctness.\n\nAvoid constructs that our average C++ programmer would find tricky or hard to maintain\n\nC++ has features that may not be generally appropriate because of the complexity they introduce to the code. In widely used code, it may be more acceptable to use trickier language constructs, because any benefits of more complex implementation are multiplied widely by usage, and the cost in understanding the complexity does not need to be paid again when working with new portions of the codebase. When in doubt, waivers to rules of this type can be sought by asking your project leads. This is specifically important for our codebase because code ownership and team membership changes over time: even if everyone that works with some piece of code currently understands it, such understanding is not guaranteed to hold a few years from now.\n\nBe mindful of our scale\n\nWith a codebase of 100+ million lines and thousands of engineers, some mistakes and simplifications for one engineer can become costly for many. For instance it's particularly important to avoid polluting the global namespace: name collisions across a codebase of hundreds of millions of lines are difficult to work with and hard to avoid if everyone puts things into the global namespace.\n\nConcede to optimization when necessary\n\nPerformance optimizations can sometimes be necessary and appropriate, even when they conflict with the other principles of this document.\n\nThe intent of this document is to provide maximal guidance with reasonable restriction. As always, common sense and good taste should prevail. By this we specifically refer to the established conventions of the entire Google C++ community, not just your personal preferences or those of your team. Be skeptical about and reluctant to use clever or unusual constructs: the absence of a prohibition is not the same as a license to proceed. Use your judgment, and if you are unsure, please don't hesitate to ask your project leads to get additional input.\n\nC++ Version\n\nCurrently, code should target C++20, i.e., should not use C++23 features. The C++ version targeted by this guide will advance (aggressively) over time.\n\nDo not use non-standard extensions.\n\nConsider portability to other environments before using features from C++17 and C++20 in your project.\n\nHeader Files\n\nIn general, every .cc file should have an associated .h file. There are some common exceptions, such as unit tests and small .cc files containing just a main() function.\n\nCorrect use of header files can make a huge difference to the readability, size and performance of your code.\n\nThe following rules will guide you through the various pitfalls of using header files.\n\nSelf-contained Headers\n\nHeader files should be self-contained (compile on their own) and end in .h. Non-header files that are meant for inclusion should end in .inc and be used sparingly.\n\nAll header files should be self-contained. Users and refactoring tools should not have to adhere to special conditions to include the header. Specifically, a header should have header guards and include all other headers it needs.\n\nWhen a header declares inline functions or templates that clients of the header will instantiate, the inline functions and templates must also have definitions in the header, either directly or in files it includes. Do not move these definitions to separately included header (-inl.h) files; this practice was common in the past, but is no longer allowed. When all instantiations of a template occur in one .cc file, either because they're explicit or because the definition is accessible to only the .cc file, the template definition can be kept in that file.\n\nThere are rare cases where a file designed to be included is not self-contained. These are typically intended to be included at unusual locations, such as the middle of another file. They might not use header guards, and might not include their prerequisites. Name such files with the .inc extension. Use sparingly, and prefer self-contained headers when possible.\n\nThe #define Guard\n\nAll header files should have #define guards to prevent multiple inclusion. The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.\n\n#ifndef FOO_BAR_BAZ_H_ #define FOO_BAR_BAZ_H_ ... #endif // FOO_BAR_BAZ_H_\n\nInclude What You Use\n\nIf a source or header file refers to a symbol defined elsewhere, the file should directly include a header file which properly intends to provide a declaration or definition of that symbol. It should not include header files for any other reason.\n\nDo not rely on transitive inclusions. This allows people to remove no-longer-needed #include statements from their headers without breaking clients. This also applies to related headers - foo.cc should include bar.h if it uses a symbol from it even if foo.h includes bar.h.\n\nForward Declarations\n\nAvoid using forward declarations where possible. Instead, include the headers you need.\n\nA \"forward declaration\" is a declaration of an entity without an associated definition.\n\n// In a C++ source file: class B; void FuncInB(); extern int variable_in_b; ABSL_DECLARE_FLAG(flag_in_b);\n\nForward declarations can save compile time, as #includes force the compiler to open more files and process more input.\n\nForward declarations can save on unnecessary recompilation. #includes can force your code to be recompiled more often, due to unrelated changes in the header.\n\nForward declarations can hide a dependency, allowing user code to skip necessary recompilation when headers change.\n\nA forward declaration as opposed to an #include statement makes it difficult for automatic tooling to discover the module defining the symbol.\n\nA forward declaration may be broken by subsequent changes to the library. Forward declarations of functions and templates can prevent the header owners from making otherwise-compatible changes to their APIs, such as widening a parameter type, adding a template parameter with a default value, or migrating to a new namespace.\n\nForward declaring symbols from namespace std:: yields undefined behavior.\n\nIt can be difficult to determine whether a forward declaration or a full #include is needed. Replacing an #include with a forward declaration can silently change the meaning of code:\n\n// b.h: struct B {}; struct D : B {}; // good_user.cc: #include \"b.h\" void f(B*); void f(void*); void test(D* x) { f(x); } // Calls f(B*)\n\nIf the #include was replaced with forward decls for B and D, test() would call f(void*).\n\nForward declaring multiple symbols from a header can be more verbose than simply #includeing the header.\n\nStructuring code to enable forward declarations (e.g., using pointer members instead of object members) can make the code slower and more complex.\n\nTry to avoid forward declarations of entities defined in another project.\n\nInline Functions\n\nDefine functions inline only when they are small, say, 10 lines or fewer.\n\nYou can declare functions in a way that allows the compiler to expand them inline rather than calling them through the usual function call mechanism.\n\nInlining a function can generate more efficient object code, as long as the inlined function is small. Feel free to inline accessors and mutators, and other short, performance-critical functions.\n\nOveruse of inlining can actually make programs slower. Depending on a function's size, inlining it can cause the code size to increase or decrease. Inlining a very small accessor function will usually decrease code size while inlining a very large function can dramatically increase code size. On modern processors smaller code usually runs faster due to better use of the instruction cache.\n\nA decent rule of thumb is to not inline a function if it is more than 10 lines long. Beware of destructors, which are often longer than they appear because of implicit member- and base-destructor calls!\n\nAnother useful rule of thumb: it's typically not cost effective to inline functions with loops or switch statements (unless, in the common case, the loop or switch statement is never executed).\n\nIt is important to know that functions are not always inlined even if they are declared as such; for example, virtual and recursive functions are not normally inlined. Usually recursive functions should not be inline. The main reason for making a virtual function inline is to place its definition in the class, either for convenience or to document its behavior, e.g., for accessors and mutators.\n\nNames and Order of Includes\n\nInclude headers in the following order: Related header, C system headers, C++ standard library headers, other libraries' headers, your project's headers.\n\nAll of a project's header files should be listed as descendants of the project's source directory without use of UNIX directory aliases . (the current directory) or .. (the parent directory). For example, google-awesome-project/src/base/logging.h should be included as:\n\n#include \"base/logging.h\"\n\nHeaders should only be included using an angle-bracketed path if the library requires you to do so. In particular, the following headers require angle brackets:\n\nC and C++ standard library headers (e.g. <stdlib.h> and <string>).\n\nPOSIX, Linux, and Windows system headers (e.g. <unistd.h> and <windows.h>).\n\nIn rare cases, third_party libraries (e.g. <Python.h>).\n\nIn dir/foo.cc or dir/foo_test.cc, whose main purpose is to implement or test the stuff in dir2/foo2.h, order your includes as follows:\n\ndir2/foo2.h.\n\nA blank line\n\nC system headers, and any other headers in angle brackets with the .h extension, e.g., <unistd.h>, <stdlib.h>, <Python.h>.\n\nA blank line\n\nC++ standard library headers (without file extension), e.g., <algorithm>, <cstddef>.\n\nA blank line\n\nOther libraries' .h files.\n\nA blank line\n\nYour project's .h files.\n\nSeparate each non-empty group with one blank line.\n\nWith the preferred ordering, if the related header dir2/foo2.h omits any necessary includes, the build of dir/foo.cc or dir/foo_test.cc will break. Thus, this rule ensures that build breaks show up first for the people working on these files, not for innocent people in other packages.\n\ndir/foo.cc and dir2/foo2.h are usually in the same directory (e.g., base/basictypes_test.cc and base/basictypes.h), but may sometimes be in different directories too.\n\nNote that the C headers such as stddef.h are essentially interchangeable with their C++ counterparts (cstddef). Either style is acceptable, but prefer consistency with existing code.\n\nWithin each section the includes should be ordered alphabetically. Note that older code might not conform to this rule and should be fixed when convenient.\n\nFor example, the includes in google-awesome-project/src/foo/internal/fooserver.cc might look like this:\n\n#include \"foo/server/fooserver.h\" #include <sys/types.h> #include <unistd.h> #include <string> #include <vector> #include \"base/basictypes.h\" #include \"foo/server/bar.h\" #include \"third_party/absl/flags/flag.h\"\n\nException:\n\nSometimes, system-specific code needs conditional includes. Such code can put conditional includes after other includes. Of course, keep your system-specific code small and localized. Example:\n\n#include \"foo/public/fooserver.h\" #include \"base/port.h\" // For LANG_CXX11. #ifdef LANG_CXX11 #include <initializer_list> #endif // LANG_CXX11\n\nScoping\n\nNamespaces\n\nWith few exceptions, place code in a namespace. Namespaces should have unique names based on the project name, and possibly its path. Do not use using-directives (e.g., using namespace foo). Do not use inline namespaces. For unnamed namespaces, see Internal Linkage.\n\nNamespaces subdivide the global scope into distinct, named scopes, and so are useful for preventing name collisions in the global scope.\n\nNamespaces provide a method for preventing name conflicts in large programs while allowing most code to use reasonably short names.\n\nFor example, if two different projects have a class Foo in the global scope, these symbols may collide at compile time or at runtime. If each project places their code in a namespace, project1::Foo and project2::Foo are now distinct symbols that do not collide, and code within each project's namespace can continue to refer to Foo without the prefix.\n\nInline namespaces automatically place their names in the enclosing scope. Consider the following snippet, for example:\n\nnamespace outer { inline namespace inner { void foo(); } // namespace inner } // namespace outer\n\nThe expressions outer::inner::foo() and outer::foo() are interchangeable. Inline namespaces are primarily intended for ABI compatibility across versions.\n\nNamespaces can be confusing, because they complicate the mechanics of figuring out what definition a name refers to.\n\nInline namespaces, in particular, can be confusing because names aren't actually restricted to the namespace where they are declared. They are only useful as part of some larger versioning policy.\n\nIn some contexts, it's necessary to repeatedly refer to symbols by their fully-qualified names. For deeply-nested namespaces, this can add a lot of clutter.\n\nNamespaces should be used as follows:\n\nFollow the rules on Namespace Names.\n\nTerminate multi-line namespaces with comments as shown in the given examples.\n\nNamespaces wrap the entire source file after includes, gflags definitions/declarations and forward declarations of classes from other namespaces.\n\n// In the .h file namespace mynamespace { // All declarations are within the namespace scope. // Notice the lack of indentation. class MyClass { public: ... void Foo(); }; } // namespace mynamespace\n\n// In the .cc file namespace mynamespace { // Definition of functions is within scope of the namespace. void MyClass::Foo() { ... } } // namespace mynamespace\n\nMore complex .cc files might have additional details, like flags or using-declarations.\n\n#include \"a.h\" ABSL_FLAG(bool, someflag, false, \"a flag\"); namespace mynamespace { using ::foo::Bar; ...code for mynamespace... // Code goes against the left margin. } // namespace mynamespace\n\nTo place generated protocol message code in a namespace, use the package specifier in the .proto file. See Protocol Buffer Packages for details.\n\nDo not declare anything in namespace std, including forward declarations of standard library classes. Declaring entities in namespace std is undefined behavior, i.e., not portable. To declare entities from the standard library, include the appropriate header file.\n\nYou may not use a using-directive to make all names from a namespace available.\n\n// Forbidden -- This pollutes the namespace. using namespace foo;\n\nDo not use Namespace aliases at namespace scope in header files except in explicitly marked internal-only namespaces, because anything imported into a namespace in a header file becomes part of the public API exported by that file.\n\n// Shorten access to some commonly used names in .cc files. namespace baz = ::foo::bar::baz;\n\n// Shorten access to some commonly used names (in a .h file). namespace librarian { namespace internal { // Internal, not part of the API. namespace sidetable = ::pipeline_diagnostics::sidetable; } // namespace internal inline void my_inline_function() { // namespace alias local to a function (or method). namespace baz = ::foo::bar::baz; ... } } // namespace librarian\n\nDo not use inline namespaces.\n\nUse namespaces with \"internal\" in the name to document parts of an API that should not be mentioned by users of the API.\n\n// We shouldn't use this internal name in non-absl code. using ::absl::container_internal::ImplementationDetail;\n\nSingle-line nested namespace declarations are preferred in new code, but are not required.\n\nInternal Linkage\n\nWhen definitions in a .cc file do not need to be referenced outside that file, give them internal linkage by placing them in an unnamed namespace or declaring them static. Do not use either of these constructs in .h files.\n\nAll declarations can be given internal linkage by placing them in unnamed namespaces. Functions and variables can also be given internal linkage by declaring them static. This means that anything you're declaring can't be accessed from another file. If a different file declares something with the same name, then the two entities are completely independent.\n\nUse of internal linkage in .cc files is encouraged for all code that does not need to be referenced elsewhere. Do not use internal linkage in .h files.\n\nFormat unnamed namespaces like named namespaces. In the terminating comment, leave the namespace name empty:\n\nnamespace { ... } // namespace\n\nNonmember, Static Member, and Global Functions\n\nPrefer placing nonmember functions in a namespace; use completely global functions rarely. Do not use a class simply to group static members. Static methods of a class should generally be closely related to instances of the class or the class's static data.\n\nNonmember and static member functions can be useful in some situations. Putting nonmember functions in a namespace avoids polluting the global namespace.\n\nNonmember and static member functions may make more sense as members of a new class, especially if they access external resources or have significant dependencies.\n\nSometimes it is useful to define a function not bound to a class instance. Such a function can be either a static member or a nonmember function. Nonmember functions should not depend on external variables, and should nearly always exist in a namespace. Do not create classes only to group static members; this is no different than just giving the names a common prefix, and such grouping is usually unnecessary anyway.\n\nIf you define a nonmember function and it is only needed in its .cc file, use internal linkage to limit its scope.\n\nLocal Variables\n\nPlace a function's variables in the narrowest scope possible, and initialize variables in the declaration.\n\nC++ allows you to declare variables anywhere in a function. We encourage you to declare them in a scope as local as possible, and as close to the first use as possible. This makes it easier for the reader to find the declaration and see what type the variable is and what it was initialized to. In particular, initialization should be used instead of declaration and assignment, e.g.,:\n\nint i; i = f(); // Bad -- initialization separate from declaration.\n\nint i = f(); // Good -- declaration has initialization.\n\nint jobs = NumJobs(); // More code... f(jobs); // Bad -- declaration separate from use.\n\nint jobs = NumJobs(); f(jobs); // Good -- declaration immediately (or closely) followed by use.\n\nstd::vector<int> v; v.push_back(1); // Prefer initializing using brace initialization. v.push_back(2);\n\nstd::vector<int> v = {1, 2}; // Good -- v starts initialized.\n\nVariables needed for if, while and for statements should normally be declared within those statements, so that such variables are confined to those scopes. E.g.:\n\nwhile (const char* p = strchr(str, '/')) str = p + 1;\n\nThere is one caveat: if the variable is an object, its constructor is invoked every time it enters scope and is created, and its destructor is invoked every time it goes out of scope.\n\n// Inefficient implementation: for (int i = 0; i < 1000000; ++i) { Foo f; // My ctor and dtor get called 1000000 times each. f.DoSomething(i); }\n\nIt may be more efficient to declare such a variable used in a loop outside that loop:\n\nFoo f; // My ctor and dtor get called once each. for (int i = 0; i < 1000000; ++i) { f.DoSomething(i); }\n\nStatic and Global Variables\n\nObjects with static storage duration are forbidden unless they are trivially destructible. Informally this means that the destructor does not do anything, even taking member and base destructors into account. More formally it means that the type has no user-defined or virtual destructor and that all bases and non-static members are trivially destructible. Static function-local variables may use dynamic initialization. Use of dynamic initialization for static class member variables or variables at namespace scope is discouraged, but allowed in limited circumstances; see below for details.\n\nAs a rule of thumb: a global variable satisfies these requirements if its declaration, considered in isolation, could be constexpr.\n\nEvery object has a storage duration, which correlates with its lifetime. Objects with static storage duration live from the point of their initialization until the end of the program. Such objects appear as variables at namespace scope (\"global variables\"), as static data members of classes, or as function-local variables that are declared with the static specifier. Function-local static variables are initialized when control first passes through their declaration; all other objects with static storage duration are initialized as part of program start-up. All objects with static storage duration are destroyed at program exit (which happens before unjoined threads are terminated).\n\nInitialization may be dynamic, which means that something non-trivial happens during initialization. (For example, consider a constructor that allocates memory, or a variable that is initialized with the current process ID.) The other kind of initialization is static initialization. The two aren't quite opposites, though: static initialization always happens to objects with static storage duration (initializing the object either to a given constant or to a representation consisting of all bytes set to zero), whereas dynamic initialization happens after that, if required.\n\nGlobal and static variables are very useful for a large number of applications: named constants, auxiliary data structures internal to some translation unit, command-line flags, logging, registration mechanisms, background infrastructure, etc.\n\nGlobal and static variables that use dynamic initialization or have non-trivial destructors create complexity that can easily lead to hard-to-find bugs. Dynamic initialization is not ordered across translation units, and neither is destruction (except that destruction happens in reverse order of initialization). When one initialization refers to another variable with static storage duration, it is possible that this causes an object to be accessed before its lifetime has begun (or after its lifetime has ended). Moreover, when a program starts threads that are not joined at exit, those threads may attempt to access objects after their lifetime has ended if their destructor has already run.\n\nDecision on destruction\n\nWhen destructors are trivial, their execution is not subject to ordering at all (they are effectively not \"run\"); otherwise we are exposed to the risk of accessing objects after the end of their lifetime. Therefore, we only allow objects with static storage duration if they are trivially destructible. Fundamental types (like pointers and int) are trivially destructible, as are arrays of trivially destructible types. Note that variables marked with constexpr are trivially destructible.\n\nconst int kNum = 10; // Allowed struct X { int n; }; const X kX[] = {{1}, {2}, {3}}; // Allowed void foo() { static const char* const kMessages[] = {\"hello\", \"world\"}; // Allowed } // Allowed: constexpr guarantees trivial destructor. constexpr std::array<int, 3> kArray = {1, 2, 3};\n\n// bad: non-trivial destructor const std::string kFoo = \"foo\"; // Bad for the same reason, even though kBar is a reference (the // rule also applies to lifetime-extended temporary objects). const std::string& kBar = StrCat(\"a\", \"b\", \"c\"); void bar() { // Bad: non-trivial destructor. static std::map<int, int> kData = {{1, 0}, {2, 0}, {3, 0}}; }\n\nNote that references are not objects, and thus they are not subject to the constraints on destructibility. The constraint on dynamic initialization still applies, though. In particular, a function-local static reference of the form static T& t = *new T; is allowed.\n\nDecision on initialization\n\nInitialization is a more complex topic. This is because we must not only consider whether class constructors execute, but we must also consider the evaluation of the initializer:\n\nint n = 5; // Fine int m = f(); // ? (Depends on f) Foo x; // ? (Depends on Foo::Foo) Bar y = g(); // ? (Depends on g and on Bar::Bar)\n\nAll but the first statement expose us to indeterminate initialization ordering.\n\nThe concept we are looking for is called constant initialization in the formal language of the C++ standard. It means that the initializing expression is a constant expression, and if the object is initialized by a constructor call, then the constructor must be specified as constexpr, too:\n\nstruct Foo { constexpr Foo(int) {} }; int n = 5; // Fine, 5 is a constant expression. Foo x(2); // Fine, 2 is a constant expression and the chosen constructor is constexpr. Foo a[] = { Foo(1), Foo(2), Foo(3) }; // Fine\n\nConstant initialization is always allowed. Constant initialization of static storage duration variables should be marked with constexpr or constinit. Any non-local static storage duration variable that is not so marked should be presumed to have dynamic initialization, and reviewed very carefully.\n\nBy contrast, the following initializations are problematic:\n\n// Some declarations used below. time_t time(time_t*); // Not constexpr! int f(); // Not constexpr! struct Bar { Bar() {} }; // Problematic initializations. time_t m = time(nullptr); // Initializing expression not a constant expression. Foo y(f()); // Ditto Bar b; // Chosen constructor Bar::Bar() not constexpr.\n\nDynamic initialization of nonlocal variables is discouraged, and in general it is forbidden. However, we do permit it if no aspect of the program depends on the sequencing of this initialization with respect to all other initializations. Under those restrictions, the ordering of the initialization does not make an observable difference. For example:\n\nint p = getpid(); // Allowed, as long as no other static variable // uses p in its own initialization.\n\nDynamic initialization of static local variables is allowed (and common).\n\nCommon patterns\n\nGlobal strings: if you require a named global or static string constant, consider using a constexpr variable of string_view, character array, or character pointer, pointing to a string literal. String literals have static storage duration already and are usually sufficient. See TotW #140.\n\nMaps, sets, and other dynamic containers: if you require a static, fixed collection, such as a set to search against or a lookup table, you cannot use the dynamic containers from the standard library as a static variable, since they have non-trivial destructors. Instead, consider a simple array of trivial types, e.g., an array of arrays of ints (for a \"map from int to int\"), or an array of pairs (e.g., pairs of int and const char*). For small collections, linear search is entirely sufficient (and efficient, due to memory locality); consider using the facilities from absl/algorithm/container.h for the standard operations. If necessary, keep the collection in sorted order and use a binary search algorithm. If you do really prefer a dynamic container from the standard library, consider using a function-local static pointer, as described below .\n\nSmart pointers (std::unique_ptr, std::shared_ptr): smart pointers execute cleanup during destruction and are therefore forbidden. Consider whether your use case fits into one of the other patterns described in this section. One simple solution is to use a plain pointer to a dynamically allocated object and never delete it (see last item).\n\nStatic variables of custom types: if you require static, constant data of a type that you need to define yourself, give the type a trivial destructor and a constexpr constructor.\n\nIf all else fails, you can create an object dynamically and never delete it by using a function-local static pointer or reference (e.g., static const auto& impl = *new T(args...);).\n\nthread_local Variables\n\nthread_local variables that aren't declared inside a function must be initialized with a true compile-time constant, and this must be enforced by using the constinit attribute. Prefer thread_local over other ways of defining thread-local data.\n\nVariables can be declared with the thread_local specifier:\n\nthread_local Foo foo = ...;\n\nSuch a variable is actually a collection of objects, so that when different threads access it, they are actually accessing different objects. thread_local variables are much like static storage duration variables in many respects. For instance, they can be declared at namespace scope, inside functions, or as static class members, but not as ordinary class members.\n\nthread_local variable instances are initialized much like static variables, except that they must be initialized separately for each thread, rather than once at program startup. This means that thread_local variables declared within a function are safe, but other thread_local variables are subject to the same initialization-order issues as static variables (and more besides).\n\nthread_local variables have a subtle destruction-order issue: during thread shutdown, thread_local variables will be destroyed in the opposite order of their initialization (as is generally true in C++). If code triggered by the destructor of any thread_local variable refers to any already-destroyed thread_local on that thread, we will get a particularly hard to diagnose use-after-free.\n\nThread-local data is inherently safe from races (because only one thread can ordinarily access it), which makes thread_local useful for concurrent programming.\n\nthread_local is the only standard-supported way of creating thread-local data.\n\nAccessing a thread_local variable may trigger execution of an unpredictable and uncontrollable amount of other code during thread-start or first use on a given thread.\n\nthread_local variables are effectively global variables, and have all the drawbacks of global variables other than lack of thread-safety.\n\nThe memory consumed by a thread_local variable scales with the number of running threads (in the worst case), which can be quite large in a program.\n\nData members cannot be thread_local unless they are also static.\n\nWe may suffer from use-after-free bugs if thread_local variables have complex destructors. In particular, the destructor of any such variable must not call any code (transitively) that refers to any potentially-destroyed thread_local. This property is hard to enforce.\n\nApproaches for avoiding use-after-free in global/static contexts do not work for thread_locals. Specifically, skipping destructors for globals and static variables is allowable because their lifetimes end at program shutdown. Thus, any \"leak\" is managed immediately by the OS cleaning up our memory and other resources. By contrast, skipping destructors for thread_local variables leads to resource leaks proportional to the total number of threads that terminate during the lifetime of the program.\n\nthread_local variables at class or namespace scope must be initialized with a true compile-time constant (i.e., they must have no dynamic initialization). To enforce this, thread_local variables at class or namespace scope must be annotated with constinit (or constexpr, but that should be rare):\n\nconstinit thread_local Foo foo = ...;\n\nthread_local variables inside a function have no initialization concerns, but still risk use-after-free during thread exit. Note that you can use a function-scope thread_local to simulate a class- or namespace-scope thread_local by defining a function or static method that exposes it:\n\nFoo& MyThreadLocalFoo() { thread_local Foo result = ComplicatedInitialization(); return result; }\n\nNote that thread_local variables will be destroyed whenever a thread exits. If the destructor of any such variable refers to any other (potentially-destroyed) thread_local we will suffer from hard to diagnose use-after-free bugs. Prefer trivial types, or types that provably run no user-provided code at destruction to minimize the potential of accessing any other thread_local.\n\nthread_local should be preferred over other mechanisms for defining thread-local data.\n\nClasses\n\nClasses are the fundamental unit of code in C++. Naturally, we use them extensively. This section lists the main dos and don'ts you should follow when writing a class.\n\nDoing Work in Constructors\n\nAvoid virtual method calls in constructors, and avoid initialization that can fail if you can't signal an error.\n\nIt is possible to perform arbitrary initialization in the body of the constructor.\n\nNo need to worry about whether the class has been initialized or not.\n\nObjects that are fully initialized by constructor call can be const and may also be easier to use with standard containers or algorithms.\n\nIf the work calls virtual functions, these calls will not get dispatched to the subclass implementations. Future modification to your class can quietly introduce this problem even if your class is not currently subclassed, causing much confusion.\n\nThere is no easy way for constructors to signal errors, short of crashing the program (not always appropriate) or using exceptions (which are forbidden).\n\nIf the work fails, we now have an object whose initialization code failed, so it may be an unusual state requiring a bool IsValid() state checking mechanism (or similar) which is easy to forget to call.\n\nYou cannot take the address of a constructor, so whatever work is done in the constructor cannot easily be handed off to, for example, another thread.\n\nConstructors should never call virtual functions. If appropriate for your code , terminating the program may be an appropriate error handling response. Otherwise, consider a factory function or Init() method as described in TotW #42. Avoid Init() methods on objects with no other states that affect which public methods may be called (semi-constructed objects of this form are particularly hard to work with correctly).\n\nImplicit Conversions\n\nDo not define implicit conversions. Use the explicit keyword for conversion operators and single-argument constructors.\n\nImplicit conversions allow an object of one type (called the source type) to be used where a different type (called the destination type) is expected, such as when passing an int argument to a function that takes a double parameter.\n\nIn addition to the implicit conversions defined by the language, users can define their own, by adding appropriate members to the class definition of the source or destination type. An implicit conversion in the source type is defined by a type conversion operator named after the destination type (e.g., operator bool()). An implicit conversion in the destination type is defined by a constructor that can take the source type as its only argument (or only argument with no default value).\n\nThe explicit keyword can be applied to a constructor or a conversion operator, to ensure that it can only be used when the destination type is explicit at the point of use, e.g., with a cast. This applies not only to implicit conversions, but to list initialization syntax:\n\nclass Foo { explicit Foo(int x, double y); ... }; void Func(Foo f);\n\nFunc({42, 3.14}); // Error\n\nThis kind of code isn't technically an implicit conversion, but the language treats it as one as far as explicit is concerned.\n\nImplicit conversions can make a type more usable and expressive by eliminating the need to explicitly name a type when it's obvious.\n\nImplicit conversions can be a simpler alternative to overloading, such as when a single function with a string_view parameter takes the place of separate overloads for std::string and const char*.\n\nList initialization syntax is a concise and expressive way of initializing objects.\n\nImplicit conversions can hide type-mismatch bugs, where the destination type does not match the user's expectation, or the user is unaware that any conversion will take place.\n\nImplicit conversions can make code harder to read, particularly in the presence of overloading, by making it less obvious what code is actually getting called.\n\nConstructors that take a single argument may accidentally be usable as implicit type conversions, even if they are not intended to do so.\n\nWhen a single-argument constructor is not marked explicit, there's no reliable way to tell whether it's intended to define an implicit conversion, or the author simply forgot to mark it.\n\nImplicit conversions can lead to call-site ambiguities, especially when there are bidirectional implicit conversions. This can be caused either by having two types that both provide an implicit conversion, or by a single type that has both an implicit constructor and an implicit type conversion operator.\n\nList initialization can suffer from the same problems if the destination type is implicit, particularly if the list has only a single element.\n\nType conversion operators, and constructors that are callable with a single argument, must be marked explicit in the class definition. As an exception, copy and move constructors should not be explicit, since they do not perform type conversion.\n\nImplicit conversions can sometimes be necessary and appropriate for types that are designed to be interchangeable, for example when objects of two types are just different representations of the same underlying value. In that case, contact your project leads to request a waiver of this rule.\n\nConstructors that cannot be called with a single argument may omit explicit. Constructors that take a single std::initializer_list parameter should also omit explicit, in order to support copy-initialization (e.g., MyType m = {1, 2};).\n\nCopyable and Movable Types\n\nA class's public API must make clear whether the class is copyable, move-only, or neither copyable nor movable. Support copying and/or moving if these operations are clear and meaningful for your type.\n\nA movable type is one that can be initialized and assigned from temporaries.\n\nA copyable type is one that can be initialized or assigned from any other object of the same type (so is also movable by definition), with the stipulation that the value of the source does not change. std::unique_ptr<int> is an example of a movable but not copyable type (since the value of the source std::unique_ptr<int> must be modified during assignment to the destination). int and std::string are examples of movable types that are also copyable. (For int, the move and copy operations are the same; for std::string, there exists a move operation that is less expensive than a copy.)\n\nFor user-defined types, the copy behavior is defined by the copy constructor and the copy-assignment operator. Move behavior is defined by the move constructor and the move-assignment operator, if they exist, or by the copy constructor and the copy-assignment operator otherwise.\n\nThe copy/move constructors can be implicitly invoked by the compiler in some situations, e.g., when passing objects by value.\n\nObjects of copyable and movable types can be passed and returned by value, which makes APIs simpler, safer, and more general. Unlike when passing objects by pointer or reference, there's no risk of confusion over ownership, lifetime, mutability, and similar issues, and no need to specify them in the contract. It also prevents non-local interactions between the client and the implementation, which makes them easier to understand, maintain, and optimize by the compiler. Further, such objects can be used with generic APIs that require pass-by-value, such as most containers, and they allow for additional flexibility in e.g., type composition.\n\nCopy/move constructors and assignment operators are usually easier to define correctly than alternatives like Clone(), CopyFrom() or Swap(), because they can be generated by the compiler, either implicitly or with = default. They are concise, and ensure that all data members are copied. Copy and move constructors are also generally more efficient, because they don't require heap allocation or separate initialization and assignment steps, and they're eligible for optimizations such as copy elision.\n\nMove operations allow the implicit and efficient transfer of resources out of rvalue objects. This allows a plainer coding style in some cases.\n\nSome types do not need to be copyable, and providing copy operations for such types can be confusing, nonsensical, or outright incorrect. Types representing singleton objects (Registerer), objects tied to a specific scope (Cleanup), or closely coupled to object identity (Mutex) cannot be copied meaningfully. Copy operations for base class types that are to be used polymorphically are hazardous, because use of them can lead to object slicing. Defaulted or carelessly-implemented copy operations can be incorrect, and the resulting bugs can be confusing and difficult to diagnose.\n\nCopy constructors are invoked implicitly, which makes the invocation easy to miss. This may cause confusion for programmers used to languages where pass-by-reference is conventional or mandatory. It may also encourage excessive copying, which can cause performance problems.\n\nEvery class's public interface must make clear which copy and move operations the class supports. This should usually take the form of explicitly declaring and/or deleting the appropriate operations in the public section of the declaration.\n\nSpecifically, a copyable class should explicitly declare the copy operations, a move-only class should explicitly declare the move operations, and a non-copyable/movable class should explicitly delete the copy operations. A copyable class may also declare move operations in order to support efficient moves. Explicitly declaring or deleting all four copy/move operations is permitted, but not required. If you provide a copy or move assignment operator, you must also provide the corresponding constructor.\n\nclass Copyable { public: Copyable(const Copyable& other) = default; Copyable& operator=(const Copyable& other) = default; // The implicit move operations are suppressed by the declarations above. // You may explicitly declare move operations to support efficient moves. }; class MoveOnly { public: MoveOnly(MoveOnly&& other) = default; MoveOnly& operator=(MoveOnly&& other) = default; // The copy operations are implicitly deleted, but you can // spell that out explicitly if you want: MoveOnly(const MoveOnly&) = delete; MoveOnly& operator=(const MoveOnly&) = delete; }; class NotCopyableOrMovable { public: // Not copyable or movable NotCopyableOrMovable(const NotCopyableOrMovable&) = delete; NotCopyableOrMovable& operator=(const NotCopyableOrMovable&) = delete; // The move operations are implicitly disabled, but you can // spell that out explicitly if you want: NotCopyableOrMovable(NotCopyableOrMovable&&) = delete; NotCopyableOrMovable& operator=(NotCopyableOrMovable&&) = delete; };\n\nThese declarations/deletions can be omitted only if they are obvious:\n\nIf the class has no private section, like a struct or an interface-only base class, then the copyability/movability can be determined by the copyability/movability of any public data members.\n\nIf a base class clearly isn't copyable or movable, derived classes naturally won't be either. An interface-only base class that leaves these operations implicit is not sufficient to make concrete subclasses clear.\n\nNote that if you explicitly declare or delete either the constructor or assignment operation for copy, the other copy operation is not obvious and must be declared or deleted. Likewise for move operations.\n\nA type should not be copyable/movable if the meaning of copying/moving is unclear to a casual user, or if it incurs unexpected costs. Move operations for copyable types are strictly a performance optimization and are a potential source of bugs and complexity, so avoid defining them unless they are significantly more efficient than the corresponding copy operations. If your type provides copy operations, it is recommended that you design your class so that the default implementation of those operations is correct. Remember to review the correctness of any defaulted operations as you would any other code.\n\nTo eliminate the risk of slicing, prefer to make base classes abstract, by making their constructors protected, by declaring their destructors protected, or by giving them one or more pure virtual member functions. Prefer to avoid deriving from concrete classes.\n\nStructs vs. Classes\n\nUse a struct only for passive objects that carry data; everything else is a class.\n\nThe struct and class keywords behave almost identically in C++. We add our own semantic meanings to each keyword, so you should use the appropriate keyword for the data-type you're defining.\n\nstructs should be used for passive objects that carry data, and may have associated constants. All fields must be public. The struct must not have invariants that imply relationships between different fields, since direct user access to those fields may break those invariants. Constructors, destructors, and helper methods may be present; however, these methods must not require or enforce any invariants.\n\nIf more functionality or invariants are required, or struct has wide visibility and expected to evolve, then a class is more appropriate. If in doubt, make it a class.\n\nFor consistency with STL, you can use struct instead of class for stateless types, such as traits, template metafunctions, and some functors.\n\nNote that member variables in structs and classes have different naming rules.\n\nStructs vs. Pairs and Tuples\n\nPrefer to use a struct instead of a pair or a tuple whenever the elements can have meaningful names.\n\nWhile using pairs and tuples can avoid the need to define a custom type, potentially saving work when writing code, a meaningful field name will almost always be much clearer when reading code than .first, .second, or std::get<X>. While C++14's introduction of std::get<Type> to access a tuple element by type rather than index (when the type is unique) can sometimes partially mitigate this, a field name is usually substantially clearer and more informative than a type.\n\nPairs and tuples may be appropriate in generic code where there are not specific meanings for the elements of the pair or tuple. Their use may also be required in order to interoperate with existing code or APIs.\n\nInheritance\n\nComposition is often more appropriate than inheritance. When using inheritance, make it public.\n\nWhen a sub-class inherits from a base class, it includes the definitions of all the data and operations that the base class defines. \"Interface inheritance\" is inheritance from a pure abstract base class (one with no state or defined methods); all other inheritance is \"implementation inheritance\".\n\nImplementation inheritance reduces code size by re-using the base class code as it specializes an existing type. Because inheritance is a compile-time declaration, you and the compiler can understand the operation and detect errors. Interface inheritance can be used to programmatically enforce that a class expose a particular API. Again, the compiler can detect errors, in this case, when a class does not define a necessary method of the API.\n\nFor implementation inheritance, because the code implementing a sub-class is spread between the base and the sub-class, it can be more difficult to understand an implementation. The sub-class cannot override functions that are not virtual, so the sub-class cannot change implementation.\n\nMultiple inheritance is especially problematic, because it often imposes a higher performance overhead (in fact, the performance drop from single inheritance to multiple inheritance can often be greater than the performance drop from ordinary to virtual dispatch), and because it risks leading to \"diamond\" inheritance patterns, which are prone to ambiguity, confusion, and outright bugs.\n\nAll inheritance should be public. If you want to do private inheritance, you should be including an instance of the base class as a member instead. You may use final on classes when you don't intend to support using them as base classes.\n\nDo not overuse implementation inheritance. Composition is often more appropriate. Try to restrict use of inheritance to the \"is-a\" case: Bar subclasses Foo if it can reasonably be said that Bar \"is a kind of\" Foo.\n\nLimit the use of protected to those member functions that might need to be accessed from subclasses. Note that data members should be private.\n\nExplicitly annotate overrides of virtual functions or virtual destructors with exactly one of an override or (less frequently) final specifier. Do not use virtual when declaring an override. Rationale: A function or destructor marked override or final that is not an override of a base class virtual function will not compile, and this helps catch common errors. The specifiers serve as documentation; if no specifier is present, the reader has to check all ancestors of the class in question to determine if the function or destructor is virtual or not.\n\nMultiple inheritance is permitted, but multiple implementation inheritance is strongly discouraged.\n\nOperator Overloading\n\nOverload operators judiciously. Do not use user-defined literals.\n\nC++ permits user code to declare overloaded versions of the built-in operators using the operator keyword, so long as one of the parameters is a user-defined type. The operator keyword also permits user code to define new kinds of literals using operator\"\", and to define type-conversion functions such as operator bool().\n\nOperator overloading can make code more concise and intuitive by enabling user-defined types to behave the same as built-in types. Overloaded operators are the idiomatic names for certain operations (e.g., ==, <, =, and <<), and adhering to those conventions can make user-defined types more readable and enable them to interoperate with libraries that expect those names.\n\nUser-defined literals are a very concise notation for creating objects of user-defined types.\n\nProviding a correct, consistent, and unsurprising set of operator overloads requires some care, and failure to do so can lead to confusion and bugs.\n\nOveruse of operators can lead to obfuscated code, particularly if the overloaded operator's semantics don't follow convention.\n\nThe hazards of function overloading apply just as much to operator overloading, if not more so.\n\nOperator overloads can fool our intuition into thinking that expensive operations are cheap, built-in operations.\n\nFinding the call sites for overloaded operators may require a search tool that's aware of C++ syntax, rather than e.g., grep.\n\nIf you get the argument type of an overloaded operator wrong, you may get a different overload rather than a compiler error. For example, foo < bar may do one thing, while &foo < &bar does something totally different.\n\nCertain operator overloads are inherently hazardous. Overloading unary & can cause the same code to have different meanings depending on whether the overload declaration is visible. Overloads of &&, ||, and , (comma) cannot match the evaluation-order semantics of the built-in operators.\n\nOperators are often defined outside the class, so there's a risk of different files introducing different definitions of the same operator. If both definitions are linked into the same binary, this results in undefined behavior, which can manifest as subtle run-time bugs.\n\nUser-defined literals (UDLs) allow the creation of new syntactic forms that are unfamiliar even to experienced C++ programmers, such as \"Hello World\"sv as a shorthand for std::string_view(\"Hello World\"). Existing notations are clearer, though less terse.\n\nBecause they can't be namespace-qualified, uses of UDLs also require use of either using-directives (which we ban) or using-declarations (which we ban in header files except when the imported names are part of the interface exposed by the header file in question). Given that header files would have to avoid UDL suffixes, we prefer to avoid having conventions for literals differ between header files and source files.\n\nDefine overloaded operators only if their meaning is obvious, unsurprising, and consistent with the corresponding built-in operators. For example, use | as a bitwise- or logical-or, not as a shell-style pipe.\n\nDefine operators only on your own types. More precisely, define them in the same headers, .cc files, and namespaces as the types they operate on. That way, the operators are available wherever the type is, minimizing the risk of multiple definitions. If possible, avoid defining operators as templates, because they must satisfy this rule for any possible template arguments. If you define an operator, also define any related operators that make sense, and make sure they are defined consistently.\n\nPrefer to define non-modifying binary operators as non-member functions. If a binary operator is defined as a class member, implicit conversions will apply to the right-hand argument, but not the left-hand one. It will confuse your users if a + b compiles but b + a doesn't.\n\nFor a type T whose values can be compared for equality, define a non-member operator== and document when two values of type T are considered equal. If there is a single obvious notion of when a value t1 of type T is less than another such value t2 then you may also define operator<=>, which should be consistent with operator==. Prefer not to overload the other comparison and ordering operators.\n\nDon't go out of your way to avoid defining operator overloads. For example, prefer to define ==, =, and <<, rather than Equals(), CopyFrom(), and PrintTo(). Conversely, don't define operator overloads just because other libraries expect them. For example, if your type doesn't have a natural ordering, but you want to store it in a std::set, use a custom comparator rather than overloading <.\n\nDo not overload &&, ||, , (comma), or unary &. Do not overload operator\"\", i.e., do not introduce user-defined literals. Do not use any such literals provided by others (including the standard library).\n\nType conversion operators are covered in the section on implicit conversions. The = operator is covered in the section on copy constructors. Overloading << for use with streams is covered in the section on streams. See also the rules on function overloading, which apply to operator overloading as well.\n\nAccess Control\n\nMake classes' data members private, unless they are constants. This simplifies reasoning about invariants, at the cost of some easy boilerplate in the form of accessors (usually const) if necessary.\n\nFor technical reasons, we allow data members of a test fixture class defined in a .cc file to be protected when using Google Test. If a test fixture class is defined outside of the .cc file it is used in, for example in a .h file, make data members private.\n\nDeclaration Order\n\nGroup similar declarations together, placing public parts earlier.\n\nA class definition should usually start with a public: section, followed by protected:, then private:. Omit sections that would be empty.\n\nWithin each section, prefer grouping similar kinds of declarations together, and prefer the following order:\n\nTypes and type aliases (typedef, using, enum, nested structs and classes, and friend types)\n\n(Optionally, for structs only) non-static data members\n\nStatic constants\n\nFactory functions\n\nConstructors and assignment operators\n\nDestructor\n\nAll other functions (static and non-static member functions, and friend functions)\n\nAll other data members (static and non-static)\n\nDo not put large method definitions inline in the class definition. Usually, only trivial or performance-critical, and very short, methods may be defined inline. See Inline Functions for more details.\n\nFunctions\n\nInputs and Outputs\n\nThe output of a C++ function is naturally provided via a return value and sometimes via output parameters (or in/out parameters).\n\nPrefer using return values over output parameters: they improve readability, and often provide the same or better performance.\n\nPrefer to return by value or, failing that, return by reference. Avoid returning a raw pointer unless it can be null.\n\nParameters are either inputs to the function, outputs from the function, or both. Non-optional input parameters should usually be values or const references, while non-optional output and input/output parameters should usually be references (which cannot be null). Generally, use std::optional to represent optional by-value inputs, and use a const pointer when the non-optional form would have used a reference. Use non-const pointers to represent optional outputs and optional input/output parameters.\n\nAvoid defining functions that require a reference parameter to outlive the call. In some cases reference parameters can bind to temporaries, leading to lifetime bugs. Instead, find a way to eliminate the lifetime requirement (for example, by copying the parameter), or pass retained parameters by pointer and document the lifetime and non-null requirements.\n\nWhen ordering function parameters, put all input-only parameters before any output parameters. In particular, do not add new parameters to the end of the function just because they are new; place new input-only parameters before the output parameters. This is not a hard-and-fast rule. Parameters that are both input and output muddy the waters, and, as always, consistency with related functions may require you to bend the rule. Variadic functions may also require unusual parameter ordering.\n\nWrite Short Functions\n\nPrefer small and focused functions.\n\nWe recognize that long functions are sometimes appropriate, so no hard limit is placed on functions length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program.\n\nEven if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code. Small functions are also easier to test.\n\nYou could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces.\n\nFunction Overloading\n\nUse overloaded functions (including constructors) only if a reader looking at a call site can get a good idea of what is happening without having to first figure out exactly which overload is being called.\n\nYou may write a function that takes a const std::string& and overload it with another that takes const char*. However, in this case consider std::string_view instead.\n\nclass MyClass { public: void Analyze(const std::string &text); void Analyze(const char *text, size_t textlen); };\n\nOverloading can make code more intuitive by allowing an identically-named function to take different arguments. It may be necessary for templatized code, and it can be convenient for Visitors.\n\nOverloading based on const or ref qualification may make utility code more usable, more efficient, or both. (See TotW 148 for more.)\n\nIf a function is overloaded by the argument types alone, a reader may have to understand C++'s complex matching rules in order to tell what's going on. Also many people are confused by the semantics of inheritance if a derived class overrides only some of the variants of a function.\n\nYou may overload a function when there are no semantic differences between variants. These overloads may vary in types, qualifiers, or argument count. However, a reader of such a call must not need to know which member of the overload set is chosen, only that something from the set is being called. If you can document all entries in the overload set with a single comment in the header, that is a good sign that it is a well-designed overload set.\n\nDefault Arguments\n\nDefault arguments are allowed on non-virtual functions when the default is guaranteed to always have the same value. Follow the same restrictions as for function overloading, and prefer overloaded functions if the readability gained with default arguments doesn't outweigh the downsides below.\n\nOften you have a function that uses default values, but occasionally you want to override the defaults. Default parameters allow an easy way to do this without having to define many functions for the rare exceptions. Compared to overloading the function, default arguments have a cleaner syntax, with less boilerplate and a clearer distinction between 'required' and 'optional' arguments.\n\nDefaulted arguments are another way to achieve the semantics of overloaded functions, so all the reasons not to overload functions apply.\n\nThe defaults for arguments in a virtual function call are determined by the static type of the target object, and there's no guarantee that all overrides of a given function declare the same defaults.\n\nDefault parameters are re-evaluated at each call site, which can bloat the generated code. Readers may also expect the default's value to be fixed at the declaration instead of varying at each call.\n\nFunction pointers are confusing in the presence of default arguments, since the function signature often doesn't match the call signature. Adding function overloads avoids these problems.\n\nDefault arguments are banned on virtual functions, where they don't work properly, and in cases where the specified default might not evaluate to the same value depending on when it was evaluated. (For example, don't write void f(int n = counter++);.)\n\nIn some other cases, default arguments can improve the readability of their function declarations enough to overcome the downsides above, so they are allowed. When in doubt, use overloads.\n\nTrailing Return Type Syntax\n\nUse trailing return types only where using the ordinary syntax (leading return types) is impractical or much less readable.\n\nC++ allows two different forms of function declarations. In the older form, the return type appears before the function name. For example:\n\nint foo(int x);\n\nThe newer form uses the auto keyword before the function name and a trailing return type after the argument list. For example, the declaration above could equivalently be written:\n\nauto foo(int x) -> int;\n\nThe trailing return type is in the function's scope. This doesn't make a difference for a simple case like int but it matters for more complicated cases, like types declared in class scope or types written in terms of the function parameters.\n\nTrailing return types are the only way to explicitly specify the return type of a lambda expression. In some cases the compiler is able to deduce a lambda's return type, but not in all cases. Even when the compiler can deduce it automatically, sometimes specifying it explicitly would be clearer for readers.\n\nSometimes it's easier and more readable to specify a return type after the function's parameter list has already appeared. This is particularly true when the return type depends on template parameters. For example:\n\ntemplate <typename T, typename U> auto add(T t, U u) -> decltype(t + u);\n\nversus\n\ntemplate <typename T, typename U> decltype(declval<T&>() + declval<U&>()) add(T t, U u);\n\nTrailing return type syntax is relatively new and it has no analogue in C++-like languages such as C and Java, so some readers may find it unfamiliar.\n\nExisting code bases have an enormous number of function declarations that aren't going to get changed to use the new syntax, so the realistic choices are using the old syntax only or using a mixture of the two. Using a single version is better for uniformity of style.\n\nIn most cases, continue to use the older style of function declaration where the return type goes before the function name. Use the new trailing-return-type form only in cases where it's required (such as lambdas) or where, by putting the type after the function's parameter list, it allows you to write the type in a much more readable way. The latter case should be rare; it's mostly an issue in fairly complicated template code, which is discouraged in most cases.\n\nGoogle-Specific Magic\n\nThere are various tricks and utilities that we use to make C++ code more robust, and various ways we use C++ that may differ from what you see elsewhere.\n\nOwnership and Smart Pointers\n\nPrefer to have single, fixed owners for dynamically allocated objects. Prefer to transfer ownership with smart pointers.\n\n\"Ownership\" is a bookkeeping technique for managing dynamically allocated memory (and other resources). The owner of a dynamically allocated object is an object or function that is responsible for ensuring that it is deleted when no longer needed. Ownership can sometimes be shared, in which case the last owner is typically responsible for deleting it. Even when ownership is not shared, it can be transferred from one piece of code to another.\n\n\"Smart\" pointers are classes that act like pointers, e.g., by overloading the * and -> operators. Some smart pointer types can be used to automate ownership bookkeeping, to ensure these responsibilities are met. std::unique_ptr is a smart pointer type which expresses exclusive ownership of a dynamically allocated object; the object is deleted when the std::unique_ptr goes out of scope. It cannot be copied, but can be moved to represent ownership transfer. std::shared_ptr is a smart pointer type that expresses shared ownership of a dynamically allocated object. std::shared_ptrs can be copied; ownership of the object is shared among all copies, and the object is deleted when the last std::shared_ptr is destroyed.\n\nIt's virtually impossible to manage dynamically allocated memory without some sort of ownership logic.\n\nTransferring ownership of an object can be cheaper than copying it (if copying it is even possible).\n\nTransferring ownership can be simpler than 'borrowing' a pointer or reference, because it reduces the need to coordinate the lifetime of the object between the two users.\n\nSmart pointers can improve readability by making ownership logic explicit, self-documenting, and unambiguous.\n\nSmart pointers can eliminate manual ownership bookkeeping, simplifying the code and ruling out large classes of errors.\n\nFor const objects, shared ownership can be a simple and efficient alternative to deep copying.\n\nOwnership must be represented and transferred via pointers (whether smart or plain). Pointer semantics are more complicated than value semantics, especially in APIs: you have to worry not just about ownership, but also aliasing, lifetime, and mutability, among other issues.\n\nThe performance costs of value semantics are often overestimated, so the performance benefits of ownership transfer might not justify the readability and complexity costs.\n\nAPIs that transfer ownership force their clients into a single memory management model.\n\nCode using smart pointers is less explicit about where the resource releases take place.\n\nstd::unique_ptr expresses ownership transfer using move semantics, which are relatively new and may confuse some programmers.\n\nShared ownership can be a tempting alternative to careful ownership design, obfuscating the design of a system.\n\nShared ownership requires explicit bookkeeping at run-time, which can be costly.\n\nIn some cases (e.g., cyclic references), objects with shared ownership may never be deleted.\n\nSmart pointers are not perfect substitutes for plain pointers.\n\nIf dynamic allocation is necessary, prefer to keep ownership with the code that allocated it. If other code needs access to the object, consider passing it a copy, or passing a pointer or reference without transferring ownership. Prefer to use std::unique_ptr to make ownership transfer explicit. For example:\n\nstd::unique_ptr<Foo> FooFactory(); void FooConsumer(std::unique_ptr<Foo> ptr);\n\nDo not design your code to use shared ownership without a very good reason. One such reason is to avoid expensive copy operations, but you should only do this if the performance benefits are significant, and the underlying object is immutable (i.e., std::shared_ptr<const Foo>). If you do use shared ownership, prefer to use std::shared_ptr.\n\nNever use std::auto_ptr. Instead, use std::unique_ptr.\n\ncpplint\n\nUse cpplint.py to detect style errors.\n\ncpplint.py is a tool that reads a source file and identifies many style errors. It is not perfect, and has both false positives and false negatives, but it is still a valuable tool.\n\nOther C++ Features\n\nRvalue References\n\nUse rvalue references only in certain special cases listed below.\n\nRvalue references are a type of reference that can only bind to temporary objects. The syntax is similar to traditional reference syntax. For example, void f(std::string&& s); declares a function whose argument is an rvalue reference to a std::string.\n\nWhen the token '&&' is applied to an unqualified template argument in a function parameter, special template argument deduction rules apply. Such a reference is called a forwarding reference.\n\nDefining a move constructor (a constructor taking an rvalue reference to the class type) makes it possible to move a value instead of copying it. If v1 is a std::vector<std::string>, for example, then auto v2(std::move(v1)) will probably just result in some simple pointer manipulation instead of copying a large amount of data. In many cases this can result in a major performance improvement.\n\nRvalue references make it possible to implement types that are movable but not copyable, which can be useful for types that have no sensible definition of copying but where you might still want to pass them as function arguments, put them in containers, etc.\n\nstd::move is necessary to make effective use of some standard-library types, such as std::unique_ptr.\n\nForwarding references which use the rvalue reference token, make it possible to write a generic function wrapper that forwards its arguments to another function, and works whether or not its arguments are temporary objects and/or const. This is called 'perfect forwarding'.\n\nRvalue references are not yet widely understood. Rules like reference collapsing and the special deduction rule for forwarding references are somewhat obscure.\n\nRvalue references are often misused. Using rvalue references is counter-intuitive in signatures where the argument is expected to have a valid specified state after the function call, or where no move operation is performed.\n\nDo not use rvalue references (or apply the && qualifier to methods), except as follows:\n\nYou may use them to define move constructors and move assignment operators (as described in Copyable and Movable Types).\n\nYou may use them to define &&-qualified methods that logically \"consume\" *this, leaving it in an unusable or empty state. Note that this applies only to method qualifiers (which come after the closing parenthesis of the function signature); if you want to \"consume\" an ordinary function parameter, prefer to pass it by value.\n\nYou may use forwarding references in conjunction with std::forward, to support perfect forwarding.\n\nYou may use them to define pairs of overloads, such as one taking Foo&& and the other taking const Foo&. Usually the preferred solution is just to pass by value, but an overloaded pair of functions sometimes yields better performance, for example if the functions sometimes don't consume the input. As always: if you're writing more complicated code for the sake of performance, make sure you have evidence that it actually helps.\n\nFriends\n\nWe allow use of friend classes and functions, within reason.\n\nFriends should usually be defined in the same file so that the reader does not have to look in another file to find uses of the private members of a class. A common use of friend is to have a FooBuilder class be a friend of Foo so that it can construct the inner state of Foo correctly, without exposing this state to the world. In some cases it may be useful to make a unittest class a friend of the class it tests.\n\nFriends extend, but do not break, the encapsulation boundary of a class. In some cases this is better than making a member public when you want to give only one other class access to it. However, most classes should interact with other classes solely through their public members.\n\nExceptions\n\nWe do not use C++ exceptions.\n\nExceptions allow higher levels of an application to decide how to handle \"can't happen\" failures in deeply nested functions, without the obscuring and error-prone bookkeeping of error codes.\n\nExceptions are used by most other modern languages. Using them in C++ would make it more consistent with Python, Java, and the C++ that others are familiar with.\n\nSome third-party C++ libraries use exceptions, and turning them off internally makes it harder to integrate with those libraries.\n\nExceptions are the only way for a constructor to fail. We can simulate this with a factory function or an Init() method, but these require heap allocation or a new \"invalid\" state, respectively.\n\nExceptions are really handy in testing frameworks.\n\nWhen you add a throw statement to an existing function, you must examine all of its transitive callers. Either they must make at least the basic exception safety guarantee, or they must never catch the exception and be happy with the program terminating as a result. For instance, if f() calls g() calls h(), and h throws an exception that f catches, g has to be careful or it may not clean up properly.\n\nMore generally, exceptions make the control flow of programs difficult to evaluate by looking at code: functions may return in places you don't expect. This causes maintainability and debugging difficulties. You can minimize this cost via some rules on how and where exceptions can be used, but at the cost of more that a developer needs to know and understand.\n\nException safety requires both RAII and different coding practices. Lots of supporting machinery is needed to make writing correct exception-safe code easy. Further, to avoid requiring readers to understand the entire call graph, exception-safe code must isolate logic that writes to persistent state into a \"commit\" phase. This will have both benefits and costs (perhaps where you're forced to obfuscate code to isolate the commit). Allowing exceptions would force us to always pay those costs even when they're not worth it.\n\nTurning on exceptions adds data to each binary produced, increasing compile time (probably slightly) and possibly increasing address space pressure.\n\nThe availability of exceptions may encourage developers to throw them when they are not appropriate or recover from them when it's not safe to do so. For example, invalid user input should not cause exceptions to be thrown. We would need to make the style guide even longer to document these restrictions!\n\nOn their face, the benefits of using exceptions outweigh the costs, especially in new projects. However, for existing code, the introduction of exceptions has implications on all dependent code. If exceptions can be propagated beyond a new project, it also becomes problematic to integrate the new project into existing exception-free code. Because most existing C++ code at Google is not prepared to deal with exceptions, it is comparatively difficult to adopt new code that generates exceptions.\n\nGiven that Google's existing code is not exception-tolerant, the costs of using exceptions are somewhat greater than the costs in a new project. The conversion process would be slow and error-prone. We don't believe that the available alternatives to exceptions, such as error codes and assertions, introduce a significant burden.\n\nOur advice against using exceptions is not predicated on philosophical or moral grounds, but practical ones. Because we'd like to use our open-source projects at Google and it's difficult to do so if those projects use exceptions, we need to advise against exceptions in Google open-source projects as well. Things would probably be different if we had to do it all over again from scratch.\n\nThis prohibition also applies to exception handling related features such as std::exception_ptr and std::nested_exception.\n\nThere is an exception to this rule (no pun intended) for Windows code.\n\nnoexcept\n\nSpecify noexcept when it is useful and correct.\n\nThe noexcept specifier is used to specify whether a function will throw exceptions or not. If an exception escapes from a function marked noexcept, the program crashes via std::terminate.\n\nThe noexcept operator performs a compile-time check that returns true if an expression is declared to not throw any exceptions.\n\nSpecifying move constructors as noexcept improves performance in some cases, e.g., std::vector<T>::resize() moves rather than copies the objects if T's move constructor is noexcept.\n\nSpecifying noexcept on a function can trigger compiler optimizations in environments where exceptions are enabled, e.g., compiler does not have to generate extra code for stack-unwinding, if it knows that no exceptions can be thrown due to a noexcept specifier.\n\nIn projects following this guide that have exceptions disabled it is hard to ensure that noexcept specifiers are correct, and hard to define what correctness even means.\n\nIt's hard, if not impossible, to undo noexcept because it eliminates a guarantee that callers may be relying on, in ways that are hard to detect.\n\nYou may use noexcept when it is useful for performance if it accurately reflects the intended semantics of your function, i.e., that if an exception is somehow thrown from within the function body then it represents a fatal error. You can assume that noexcept on move constructors has a meaningful performance benefit. If you think there is significant performance benefit from specifying noexcept on some other function, please discuss it with your project leads.\n\nPrefer unconditional noexcept if exceptions are completely disabled (i.e., most Google C++ environments). Otherwise, use conditional noexcept specifiers with simple conditions, in ways that evaluate false only in the few cases where the function could potentially throw. The tests might include type traits check on whether the involved operation might throw (e.g., std::is_nothrow_move_constructible for move-constructing objects), or on whether allocation can throw (e.g., absl::default_allocator_is_nothrow for standard default allocation). Note in many cases the only possible cause for an exception is allocation failure (we believe move constructors should not throw except due to allocation failure), and there are many applications where it’s appropriate to treat memory exhaustion as a fatal error rather than an exceptional condition that your program should attempt to recover from. Even for other potential failures you should prioritize interface simplicity over supporting all possible exception throwing scenarios: instead of writing a complicated noexcept clause that depends on whether a hash function can throw, for example, simply document that your component doesn’t support hash functions throwing and make it unconditionally noexcept.\n\nRun-Time Type Information (RTTI)\n\nAvoid using run-time type information (RTTI).\n\nRTTI allows a programmer to query the C++ class of an object at run-time. This is done by use of typeid or dynamic_cast.\n\nThe standard alternatives to RTTI (described below) require modification or redesign of the class hierarchy in question. Sometimes such modifications are infeasible or undesirable, particularly in widely-used or mature code.\n\nRTTI can be useful in some unit tests. For example, it is useful in tests of factory classes where the test has to verify that a newly created object has the expected dynamic type. It is also useful in managing the relationship between objects and their mocks.\n\nRTTI is useful when considering multiple abstract objects. Consider\n\nbool Base::Equal(Base* other) = 0; bool Derived::Equal(Base* other) { Derived* that = dynamic_cast<Derived*>(other); if (that == nullptr) return false; ... }\n\nQuerying the type of an object at run-time frequently means a design problem. Needing to know the type of an object at runtime is often an indication that the design of your class hierarchy is flawed.\n\nUndisciplined use of RTTI makes code hard to maintain. It can lead to type-based decision trees or switch statements scattered throughout the code, all of which must be examined when making further changes.\n\nRTTI has legitimate uses but is prone to abuse, so you must be careful when using it. You may use it freely in unittests, but avoid it when possible in other code. In particular, think twice before using RTTI in new code. If you find yourself needing to write code that behaves differently based on the class of an object, consider one of the following alternatives to querying the type:\n\nVirtual methods are the preferred way of executing different code paths depending on a specific subclass type. This puts the work within the object itself.\n\nIf the work belongs outside the object and instead in some processing code, consider a double-dispatch solution, such as the Visitor design pattern. This allows a facility outside the object itself to determine the type of class using the built-in type system.\n\nWhen the logic of a program guarantees that a given instance of a base class is in fact an instance of a particular derived class, then a dynamic_cast may be used freely on the object. Usually one can use a static_cast as an alternative in such situations.\n\nDecision trees based on type are a strong indication that your code is on the wrong track.\n\nif (typeid(*data) == typeid(D1)) { ... } else if (typeid(*data) == typeid(D2)) { ... } else if (typeid(*data) == typeid(D3)) { ...\n\nCode such as this usually breaks when additional subclasses are added to the class hierarchy. Moreover, when properties of a subclass change, it is difficult to find and modify all the affected code segments.\n\nDo not hand-implement an RTTI-like workaround. The arguments against RTTI apply just as much to workarounds like class hierarchies with type tags. Moreover, workarounds disguise your true intent.\n\nCasting\n\nUse C++-style casts like static_cast<float>(double_value), or brace initialization for conversion of arithmetic types like int64_t y = int64_t{1} << 42. Do not use cast formats like (int)x unless the cast is to void. You may use cast formats like T(x) only when T is a class type.\n\nC++ introduced a different cast system from C that distinguishes the types of cast operations.\n\nThe problem with C casts is the ambiguity of the operation; sometimes you are doing a conversion (e.g., (int)3.5) and sometimes you are doing a cast (e.g., (int)\"hello\"). Brace initialization and C++ casts can often help avoid this ambiguity. Additionally, C++ casts are more visible when searching for them.\n\nThe C++-style cast syntax is verbose and cumbersome.\n\nIn general, do not use C-style casts. Instead, use these C++-style casts when explicit type conversion is necessary.\n\nUse brace initialization to convert arithmetic types (e.g., int64_t{x}). This is the safest approach because code will not compile if conversion can result in information loss. The syntax is also concise.\n\nUse absl::implicit_cast to safely cast up a type hierarchy, e.g., casting a Foo* to a SuperclassOfFoo* or casting a Foo* to a const Foo*. C++ usually does this automatically but some situations need an explicit up-cast, such as use of the ?: operator.\n\nUse static_cast as the equivalent of a C-style cast that does value conversion, when you need to explicitly up-cast a pointer from a class to its superclass, or when you need to explicitly cast a pointer from a superclass to a subclass. In this last case, you must be sure your object is actually an instance of the subclass.\n\nUse const_cast to remove the const qualifier (see const).\n\nUse reinterpret_cast to do unsafe conversions of pointer types to and from integer and other pointer types, including void*. Use this only if you know what you are doing and you understand the aliasing issues. Also, consider dereferencing the pointer (without a cast) and using std::bit_cast to cast the resulting value.\n\nUse std::bit_cast to interpret the raw bits of a value using a different type of the same size (a type pun), such as interpreting the bits of a double as int64_t.\n\nSee the RTTI section for guidance on the use of dynamic_cast.\n\nStreams\n\nUse streams where appropriate, and stick to \"simple\" usages. Overload << for streaming only for types representing values, and write only the user-visible value, not any implementation details.\n\nStreams are the standard I/O abstraction in C++, as exemplified by the standard header <iostream>. They are widely used in Google code, mostly for debug logging and test diagnostics.\n\nThe << and >> stream operators provide an API for formatted I/O that is easily learned, portable, reusable, and extensible. printf, by contrast, doesn't even support std::string, to say nothing of user-defined types, and is very difficult to use portably. printf also obliges you to choose among the numerous slightly different versions of that function, and navigate the dozens of conversion specifiers.\n\nStreams provide first-class support for console I/O via std::cin, std::cout, std::cerr, and std::clog. The C APIs do as well, but are hampered by the need to manually buffer the input.\n\nStream formatting can be configured by mutating the state of the stream. Such mutations are persistent, so the behavior of your code can be affected by the entire previous history of the stream, unless you go out of your way to restore it to a known state every time other code might have touched it. User code can not only modify the built-in state, it can add new state variables and behaviors through a registration system.\n\nIt is difficult to precisely control stream output, due to the above issues, the way code and data are mixed in streaming code, and the use of operator overloading (which may select a different overload than you expect).\n\nThe practice of building up output through chains of << operators interferes with internationalization, because it bakes word order into the code, and streams' support for localization is flawed.\n\nThe streams API is subtle and complex, so programmers must develop experience with it in order to use it effectively.\n\nResolving the many overloads of << is extremely costly for the compiler. When used pervasively in a large code base, it can consume as much as 20% of the parsing and semantic analysis time.\n\nUse streams only when they are the best tool for the job. This is typically the case when the I/O is ad-hoc, local, human-readable, and targeted at other developers rather than end-users. Be consistent with the code around you, and with the codebase as a whole; if there's an established tool for your problem, use that tool instead. In particular, logging libraries are usually a better choice than std::cerr or std::clog for diagnostic output, and the libraries in absl/strings or the equivalent are usually a better choice than std::stringstream.\n\nAvoid using streams for I/O that faces external users or handles untrusted data. Instead, find and use the appropriate templating libraries to handle issues like internationalization, localization, and security hardening.\n\nIf you do use streams, avoid the stateful parts of the streams API (other than error state), such as imbue(), xalloc(), and register_callback(). Use explicit formatting functions (such as absl::StreamFormat()) rather than stream manipulators or formatting flags to control formatting details such as number base, precision, or padding.\n\nOverload << as a streaming operator for your type only if your type represents a value, and << writes out a human-readable string representation of that value. Avoid exposing implementation details in the output of <<; if you need to print object internals for debugging, use named functions instead (a method named DebugString() is the most common convention).\n\nPreincrement and Predecrement\n\nUse the prefix form (++i) of the increment and decrement operators unless you need postfix semantics.\n\nWhen a variable is incremented (++i or i++) or decremented (--i or i--) and the value of the expression is not used, one must decide whether to preincrement (decrement) or postincrement (decrement).\n\nA postfix increment/decrement expression evaluates to the value as it was before it was modified. This can result in code that is more compact but harder to read. The prefix form is generally more readable, is never less efficient, and can be more efficient because it doesn't need to make a copy of the value as it was before the operation.\n\nThe tradition developed, in C, of using post-increment, even when the expression value is not used, especially in for loops.\n\nUse prefix increment/decrement, unless the code explicitly needs the result of the postfix increment/decrement expression.\n\nUse of const\n\nIn APIs, use const whenever it makes sense. constexpr is a better choice for some uses of const.\n\nDeclared variables and parameters can be preceded by the keyword const to indicate the variables are not changed (e.g., const int foo). Class functions can have the const qualifier to indicate the function does not change the state of the class member variables (e.g., class Foo { int Bar(char c) const; };).\n\nEasier for people to understand how variables are being used. Allows the compiler to do better type checking, and, conceivably, generate better code. Helps people convince themselves of program correctness because they know the functions they call are limited in how they can modify your variables. Helps people know what functions are safe to use without locks in multi-threaded programs.\n\nconst is viral: if you pass a const variable to a function, that function must have const in its prototype (or the variable will need a const_cast). This can be a particular problem when calling library functions.\n\nWe strongly recommend using const in APIs (i.e., on function parameters, methods, and non-local variables) wherever it is meaningful and accurate. This provides consistent, mostly compiler-verified documentation of what objects an operation can mutate. Having a consistent and reliable way to distinguish reads from writes is critical to writing thread-safe code, and is useful in many other contexts as well. In particular:\n\nIf a function guarantees that it will not modify an argument passed by reference or by pointer, the corresponding function parameter should be a reference-to-const (const T&) or pointer-to-const (const T*), respectively.\n\nFor a function parameter passed by value, const has no effect on the caller, thus is not recommended in function declarations. See TotW #109.\n\nDeclare methods to be const unless they alter the logical state of the object (or enable the user to modify that state, e.g., by returning a non-const reference, but that's rare), or they can't safely be invoked concurrently.\n\nUsing const on local variables is neither encouraged nor discouraged.\n\nAll of a class's const operations should be safe to invoke concurrently with each other. If that's not feasible, the class must be clearly documented as \"thread-unsafe\".\n\nWhere to put the const\n\nSome people favor the form int const *foo to const int* foo. They argue that this is more readable because it's more consistent: it keeps the rule that const always follows the object it's describing. However, this consistency argument doesn't apply in codebases with few deeply-nested pointer expressions since most const expressions have only one const, and it applies to the underlying value. In such cases, there's no consistency to maintain. Putting the const first is arguably more readable, since it follows English in putting the \"adjective\" (const) before the \"noun\" (int).\n\nThat said, while we encourage putting const first, we do not require it. But be consistent with the code around you!\n\nUse of constexpr, constinit, and consteval\n\nUse constexpr to define true constants or to ensure constant initialization. Use constinit to ensure constant initialization for non-constant variables.\n\nSome variables can be declared constexpr to indicate the variables are true constants, i.e., fixed at compilation/link time. Some functions and constructors can be declared constexpr which enables them to be used in defining a constexpr variable. Functions can be declared consteval to restrict their use to compile time.\n\nUse of constexpr enables definition of constants with floating-point expressions rather than just literals; definition of constants of user-defined types; and definition of constants with function calls.\n\nPrematurely marking something as constexpr may cause migration problems if later on it has to be downgraded. Current restrictions on what is allowed in constexpr functions and constructors may invite obscure workarounds in these definitions.\n\nconstexpr definitions enable a more robust specification of the constant parts of an interface. Use constexpr to specify true constants and the functions that support their definitions. consteval may be used for code that must not be invoked at runtime. Avoid complexifying function definitions to enable their use with constexpr. Do not use constexpr or consteval to force inlining.\n\nInteger Types\n\nOf the built-in C++ integer types, the only one used is int. If a program needs an integer type of a different size, use an exact-width integer type from <cstdint>, such as int16_t. If you have a value that could ever be greater than or equal to 2^31, use a 64-bit type such as int64_t. Keep in mind that even if your value won't ever be too large for an int, it may be used in intermediate calculations which may require a larger type. When in doubt, choose a larger type.\n\nC++ does not specify exact sizes for the integer types like int. Common sizes on contemporary architectures are 16 bits for short, 32 bits for int, 32 or 64 bits for long, and 64 bits for long long, but different platforms make different choices, in particular for long.\n\nUniformity of declaration.\n\nThe sizes of integral types in C++ can vary based on compiler and architecture.\n\nThe standard library header <cstdint> defines types like int16_t, uint32_t, int64_t, etc. You should always use those in preference to short, unsigned long long and the like, when you need a guarantee on the size of an integer. Prefer to omit the std:: prefix for these types, as the extra 5 characters do not merit the added clutter. Of the built-in integer types, only int should be used. When appropriate, you are welcome to use standard type aliases like size_t and ptrdiff_t.\n\nWe use int very often, for integers we know are not going to be too big, e.g., loop counters. Use plain old int for such things. You should assume that an int is at least 32 bits, but don't assume that it has more than 32 bits. If you need a 64-bit integer type, use int64_t or uint64_t.\n\nFor integers we know can be \"big\", use int64_t.\n\nYou should not use the u"
    }
}