{
    "id": "dbpedia_4518_3",
    "rank": 69,
    "data": {
        "url": "https://makecode.microbit.org/types/buffer/number-format",
        "read_more_link": "",
        "language": "en",
        "title": "Number format",
        "top_image": "https://pxt.azureedge.net/blob/4de54063603c8d16531078818a83f7c29a3588fa/static/icons/apple-touch-icon.png",
        "meta_img": "https://pxt.azureedge.net/blob/4de54063603c8d16531078818a83f7c29a3588fa/static/icons/apple-touch-icon.png",
        "images": [
            "https://pxt.azureedge.net/blob/d6139e3d0af51f02aa5f8765ecb0985acbd98551/static/logo/Microsoft_logo_rgb_W-white_D.png",
            "https://pxt.azureedge.net/blob/106597ae039a275897661651b96856220c9b0fad/static/logo/Microsoft_logo_rgb_W-white_D-square.png",
            "https://pxt.azureedge.net/blob/6b77415ea54ca5734e224edcc035e72def037edf/static/logo/Microsoft-logo_rgb_c-gray.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Numbers get stored at some place in memory. They have a certain memory size (spaces in memory) and an arrangement for their bytes.",
        "meta_lang": "",
        "meta_favicon": "https://pxt.azureedge.net/blob/4de54063603c8d16531078818a83f7c29a3588fa/static/icons/apple-touch-icon.png",
        "meta_site_name": "Microsoft MakeCode",
        "canonical_link": null,
        "text": "Numbers get stored at some place in memory. They have a certain memory size (spaces in memory) and an arrangement for their bytes.\n\nDigital numbers\n\nThe data stored in memory is just a lot of tiny electronic connections in the circuits of the micro:bit. A number is the most basic type of data and other types of data are made using numbers (number are even used to act as text characters in memory). A number is made with combination of electronic connections that are either on and off. One connection is called a bit and this is used as a single digit for computer numbers. A single bit can mean one of two numbers, 0 or 1. Two bits can mean one of four numbers, 00, 01, 10, or 11. We use decimal numbers normally so we give the decimal names to the computer numbers. So, for the two bit numbers, their decimal names are: 00 = 0, 01 = 1, 10 = 2, and 11 = 3. When you see numbers with ones and zeros, they are called binary numbers.\n\nThe ‘byte’\n\nThe smallest amount of bits normally used to store a number in a computer is a combination of 8 bits. A group of 8 bits is called a byte. A byte looks like 10010010. This binary number, for example, represents the number 162 in decimal.\n\nThe maximum absolute value for a number contained in a byte is 255. You couldn’t store the decimal number of 2552 in one byte, you need to use two bytes together. So, 2552 as a binary number is 00001001 11111000 using two bytes.\n\nNumber formats on the micro:bit\n\nNumbers are stored in memory in different ways. They can use one or more bytes, have a positive or negative value, and have their bytes switched around.\n\nSigned numbers\n\nIf you want a number that can have a positive value or a negative value, then you use a signed number. This means that one bit of all the bits than make up the number value is treated as a plus sign or a minus sign. A bit value of 0 means a plus and a bit value of 1 means minus. Using one of the bits of the number for a sign means that the maximum possible value for a number gets reduced by about half.\n\nAs an example, the decimal numbers of 1 and -1 are 00000001 and 11111111 in binary. You see that the bit on the left of the second binary number is a 1. That bit is used as the minus sign (-) for the -1.\n\nUnsigned numbers\n\nSigned numbers use all of their bits for the value itself and are always positive values.\n\nBig end and little end (endian)\n\nEarlier you saw that the decimal number 2552 needs two bytes in memory. The order in which these two bytes are placed in memory is called endian order or endianness. Funny word, right? This comes from the idea that the byte with the larger part of the value is called the big end and the byte with smaller part of the value is called the little end.\n\nFor 2552 its binary number uses two bytes which are: 00001001 11111000. The two parts (ends) of this number are:\n\nBig end: 00001001\n\nLittle end: 11111000\n\nIf the big end of the number is stored in memory first, before the little end, the number is a big endian number. Then, of course, if the little end of the number is stored in memory first, before the big end, the number is a little endian number.\n\nNumber format types\n\nSometimes you need to have your program tell what type of numbers it will store in memory. This often necessary when you use pin operations with a buffer.\n\nThe formats for numbers stored on the micro:bit are:\n\nInt8LE: one byte, signed, little endian\n\nUInt8LE: one byte, unsigned, little endian\n\nInt8BE: one byte, signed, big endian\n\nUInt8BE: one byte, unsigned, big endian\n\nInt16LE: two bytes, signed, little endian\n\nUInt16LE: two bytes, unsigned, little endian\n\nInt16BE: two bytes, signed, big endian\n\nUInt16BE: two bytes, unsigned, big endian\n\nInt32LE: four bytes, signed, little endian\n\nInt32BE: four bytes, signed, big endian\n\nSee also"
    }
}