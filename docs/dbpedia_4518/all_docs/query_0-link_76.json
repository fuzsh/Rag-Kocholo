{
    "id": "dbpedia_4518_0",
    "rank": 76,
    "data": {
        "url": "https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/",
        "read_more_link": "",
        "language": "en",
        "title": "Bitwise Operators in C",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/cdn-uploads/Operators-In-C.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/bitwise-operator-in-c-and-or-and-xor/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2014-02-21T07:35:45",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/",
        "text": "In C, the following 6 operators are bitwise operators (also known as bit operators as they work at the bit-level). They are used to perform bitwise operations in C.\n\nThe & (bitwise AND) in C takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if both bits are 1.\n\nThe | (bitwise OR) in C takes two numbers as operands and does OR on every bit of two numbers. The result of OR is 1 if any of the two bits is 1.\n\nThe ^ (bitwise XOR) in C takes two numbers as operands and does XOR on every bit of two numbers. The result of XOR is 1 if the two bits are different.\n\nThe << (left shift) in C takes two numbers, the left shifts the bits of the first operand, and the second operand decides the number of places to shift.\n\nThe >> (right shift) in C takes two numbers, right shifts the bits of the first operand, and the second operand decides the number of places to shift.\n\nThe ~ (bitwise NOT) in C takes one number and inverts all bits of it.\n\nLet’s look at the truth table of the bitwise operators.\n\nX\n\nY\n\nX & Y\n\nX | Y\n\nX ^ Y\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n1\n\n0\n\n1\n\n1\n\n1\n\n0\n\n0\n\n1\n\n1\n\n1\n\n1\n\n1\n\n1\n\n0\n\nExample of Bitwise Operators in C\n\nThe following program uses bitwise operators to perform bit operations in C.\n\nC\n\n// C Program to demonstrate use of bitwise operators #include<stdio.h> intmain() { // a = 5 (00000101 in 8-bit binary), b = 9 (00001001 in // 8-bit binary) unsignedinta=5,b=9; // The result is 00000001 printf(\"a = %u, b = %u\\n\",a,b); printf(\"a&b = %u\\n\",a&b); // The result is 00001101 printf(\"a|b = %u\\n\",a|b); // The result is 00001100 printf(\"a^b = %u\\n\",a^b); // The result is 11111111111111111111111111111010 // (assuming 32-bit unsigned int) printf(\"~a = %u\\n\",a=~a); // The result is 00010010 printf(\"b<<1 = %u\\n\",b<<1); // The result is 00000100 printf(\"b>>1 = %u\\n\",b>>1); return0; }\n\nOutput\n\na = 5, b = 9 a&b = 1 a|b = 13 a^b = 12 ~a = 4294967290 b<<1 = 18 b>>1 = 4\n\nTime Complexity: O(1)\n\nAuxiliary Space: O(1)\n\nInteresting Facts About Bitwise Operators\n\n1. The left-shift and right-shift operators should not be used for negative numbers.\n\nIf the second operand(which decides the number of shifts) is a negative number, it results in undefined behavior in C. For example, results of both 1 <<- 1 and 1 >> -1 are undefined. Also, if the number is shifted more than the size of the integer, the behavior is undefined. For example, 1 << 33 is undefined if integers are stored using 32 bits. Another thing is NO shift operation is performed if the additive expression (operand that decides no of shifts) is 0. See this for more details.\n\n2. The bitwise OR of two numbers is simply the sum of those two numbers if there is no carry involved; otherwise, you add their bitwise AND.\n\nLet’s say, we have a=5(101) and b=2(010), since there is no carry involved, their sum is just a|b. Now, if we change ‘b’ to 6 which is 110 in binary, their sum would change to a|b + a&b since there is a carry involved.\n\n3. The bitwise XOR operator is the most useful operator from a technical interview perspective.\n\nIt is used in many problems. A simple example could be “Given a set of numbers where all elements occur an even number of times except one number, find the odd occurring number” This problem can be efficiently solved by doing XOR to all numbers.\n\nExample\n\nBelow program demonstrates the use XOR operator to find odd occcuring elements in an array.\n\nC\n\n// C program to find odd occcuring elements in an array #include<stdio.h> // Function to return the only odd // occurring element intfindOdd(intarr[],intn) { intres=0,i; for(i=0;i<n;i++) res^=arr[i]; returnres; } intmain(void) { intarr[]={12,12,14,90,14,14,14}; intn=sizeof(arr)/sizeof(arr[0]); printf(\"The odd occurring element is %d \", findOdd(arr,n)); return0; }\n\nOutput\n\nThe odd occurring element is 90\n\nTime Complexity: O(n)\n\nAuxiliary Space: O(1)\n\nThe following are many other interesting problems using the XOR operator.\n\nFind the Missing Number\n\nSwap two numbers without using a temporary variable\n\nA Memory-Efficient Doubly Linked List\n\nFind the two non-repeating elements\n\nFind the two numbers with odd occurrences in an unsorted array\n\nAdd two numbers without using arithmetic operators.\n\nSwap bits in a given number\n\nCount the number of bits to be flipped to convert a to b\n\nFind the element that appears once\n\nDetect if two integers have opposite signs\n\n4. The Bitwise operators should not be used in place of logical operators.\n\nThe result of logical operators (&&, || and !) is either 0 or 1, but bitwise operators return an integer value. Also, the logical operators consider any non-zero operand as 1. For example, consider the following program, the results of & & && are different for the same operands.\n\nExample\n\nThe below program demonstrates the difference between & and && operators.\n\nC\n\n// C program to Demonstrate the difference between & and && // operator #include<stdio.h> intmain() { intx=2,y=5; (x&y)?printf(\"True \"):printf(\"False \"); (x&&y)?printf(\"True \"):printf(\"False \"); return0; }\n\nOutput\n\nFalse True\n\nTime Complexity: O(1)\n\nAuxiliary Space: O(1)\n\n5. The left-shift and right-shift operators are equivalent to multiplication and division by 2 respectively.\n\nAs mentioned in point 1, it works only if numbers are positive.\n\nExample:\n\nThe below example demonstrates the use of left-shift and right-shift operators.\n\nC\n\n// program to demonstrate the use of left-shift and // right-shift operators. #include<stdio.h> intmain() { intx=19; printf(\"x << 1 = %d\\n\",x<<1); printf(\"x >> 1 = %d\\n\",x>>1); return0; }\n\nOutput\n\nx << 1 = 38 x >> 1 = 9\n\nTime Complexity: O(1)\n\nAuxiliary Space: O(1)\n\n6. The & operator can be used to quickly check if a number is odd or even.\n\nThe value of the expression (x & 1) would be non-zero only if x is odd, otherwise, the value would be zero.\n\nExample\n\nThe below example demonstrates the use bitwise & operator to find if the given number is even or odd.\n\nC\n\n#include<stdio.h> intmain() { intx=19; (x&1)?printf(\"Odd\"):printf(\"Even\"); return0; }\n\nOutput\n\nOdd\n\nTime Complexity: O(1)\n\nAuxiliary Space: O(1)\n\n7. The ~ operator should be used carefully.\n\nThe result of the ~ operator on a small number can be a big number if the result is stored in an unsigned variable. The result may be a negative number if the result is stored in a signed variable (assuming that the negative numbers are stored in 2’s complement form where the leftmost bit is the sign bit).\n\nExample\n\nThe below example demonstrates the use of bitwise NOT operator.\n\nC\n\n// C program to demonstrate the use of bitwise NOT operator. #include<stdio.h> intmain() { unsignedintx=1; printf(\"Signed Result %d \\n\",~x); printf(\"Unsigned Result %u \\n\",~x); return0; }\n\nOutput\n\nSigned Result -2 Unsigned Result 4294967294\n\nTime Complexity: O(1)\n\nAuxiliary Space: O(1)\n\nNote The output of the above program is compiler dependent\n\nRelated Articles\n\nBits manipulation (Important tactics)\n\nBitwise Hacks for Competitive Programming\n\nBit Tricks for Competitive Programming"
    }
}