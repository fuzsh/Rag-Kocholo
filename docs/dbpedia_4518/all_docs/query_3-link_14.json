{
    "id": "dbpedia_4518_3",
    "rank": 14,
    "data": {
        "url": "https://www.sciencefriday.com/educational-resources/write-your-name-in-binary-code/",
        "read_more_link": "",
        "language": "en",
        "title": "Learn How To Write Your Name In Binary Code",
        "top_image": "https://www.sciencefriday.com/wp-content/uploads/2015/08/kidcoder2.jpg",
        "meta_img": "https://www.sciencefriday.com/wp-content/uploads/2015/08/kidcoder2.jpg",
        "images": [
            "https://www.facebook.com/tr?id=1453812254789467&ev=PageView&noscript=1",
            "https://www.sciencefriday.com/wp-content/themes/sciencefriday/images/bgs/bg-p.gif",
            "https://www.sciencefriday.com/wp-content/uploads/2015/08/hello.png?w=490&h=300&crop=1",
            "http://i.giphy.com/3o85xm153bM61piQV2.gif",
            "http://www.sciencefriday.com/wp-content/uploads/2015/08/UTF8-Table-7802.png",
            "http://www.sciencefriday.com/wp-content/uploads/2015/08/SciFriRulesPeasCarrots-1024x576.jpg",
            "http://i.giphy.com/3o85xtB0UypFjAS5B6.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Christian Skotte",
            "Ariel Zych"
        ],
        "publish_date": "2015-08-26T19:00:22+00:00",
        "summary": "",
        "meta_description": "Want to write like a computer? Here's your chance to get started.",
        "meta_lang": "en",
        "meta_favicon": "https://www.sciencefriday.com/wp-content/themes/sciencefriday/favicon.ico",
        "meta_site_name": "Science Friday",
        "canonical_link": "https://www.sciencefriday.com/educational-resources/write-your-name-in-binary-code/",
        "text": "Facebook\n\nThreads\n\nX\n\nBluesky\n\nLinkedIn\n\nEmail\n\nWrite Your Name In Binary Code\n\nGrade Level\n\n6 - 8\n\nminutes\n\n15 minutes or fewer\n\nsubject\n\nEngineering and Tech\n\n01001000 01100101 01101100 01101100 01101111 00100001\n\nThose ones and zeros might not look like anything to you, but in binary code the numbers are actually saying “Hello!”\n\nAny code that uses just two symbols to represent information is considered binary code. Different versions of binary code have been around for centuries, and have been used in a variety of contexts. For example, Braille uses raised and un-raised bumps to convey information to the blind, Morse code uses long and short signals to transmit information, and the example above uses sets of 0s and 1s to represent letters. Perhaps the most common use for binary nowadays is in computers: binary code is the way that most computers and computerized devices ultimately send, receive, and store information.\n\nTake a look through the key below and try to spell something using UTF-8 binary code. Try your name! Find the 8-bit binary code sequence for each letter of your name, writing it down with a small space between each set of 8 bits. For example, if your name starts with the letter A, your first letter would be 01000001.\n\nIf you’d like a hand keeping track of your work, print out this handy dandy binary text conversion sheet!\n\nWrite Your Name in Binary Code in Lots of Ways\n\nThe 0s and 1s of binary code are somewhat arbitrary. Any symbol, color, or physical object that can exist in two different forms or states—such as a coin (heads and tails), a switch (on and off), color (blue and green), shapes (circle and square)—can be used as a binary code. For example, here are the words “Science Friday Rules!” written in binary using peas and carrots:\n\nWhat else can you think of that could be used to write your name in binary code? Try it!\n\nWhy Is Binary Code Such a Big Deal?\n\nIn computers and other computerized devices (like calculators, printers, coffee makers, and microwaves), bits are usually transmitted electronically. But this electronic information is fleeting. For it to exist for any length of time—and without a power supply—it must be stored physically within the device’s hardware. That means that every piece of binary code in a computer must be converted into a physical object or state. Binary code, as it turns out, is easy to convert from electronic information (e.g., 0s and 1s) to physical information, because only two kinds of physical objects or states are needed.\n\nThe conversion from electrical information to physical information storage is analogous to someone speaking the binary code for “dog” in 0s and 1s while you write them down on a piece of paper. The spoken 0s and 1s can’t be heard indefinitely after they are spoken, but by writing them physically on a piece of paper, you can refer back to them over and over again. In the case of a computer, that binary code might be stored in high and low voltages, in magnetized or demagnetized segments of a metallic disk, or, in super old computers, in punched and unpunched holes in cardstock.\n\nIn the Pulitzer Prize-Winning book The Soul of a New Machine, author Tracy Kidder explains how Data General computers stored information in a binary language:\n\n“Computers, it is often said, manipulate symbols. They don’t deal with numbers directly, but with symbols that can represent not only numbers but also words and pictures. Inside the circuits of the digital computer these symbols exist in electrical form, and there are just two basic symbols – a high voltage and a low voltage. Clearly, this is a marvelous kind of symbolism for a machine; the circuits don’t have to distinguish between nine different shades of gray but only between black and white, or in electrical terms, between high and low voltages.” Copyright © 1981 by John Tracy Kidder. Reprinted by permission of Little, Brown and Company, New York, NY. All rights reserved.\n\nRegardless of the medium, binary code has been the gold standard of physical information storage in computational devices from calculators to super computers.\n\nRelated Segment\n\nThe Ultimate Parallel Processor: Quantum Bits\n\nExtension: Does Bit Number Matter?\n\nArranging and reading bits in ordered groups is what makes binary exceptionally powerful for storing and transmitting huge amounts of information. To understand why, it helps to consider the alternative: what if only one bit was used at a time? Well, you’d only be able to share two types of information—one type represented by 0 and the other by 1. Forget encoding the entire alphabet or punctuation signs—you just get two kinds of information.\n\nBut when you group bits by two, you get four kinds of information:\n\n00, 01, 10, 11\n\nBy increasing from two-bit groups to three-bit groups, you double the amount of information you can encode:\n\n000, 001, 010, 011, 100, 101, 110, 111\n\nWhile eight different kinds of information are still not enough for representing a whole alphabet, perhaps you can see where the pattern is headed.\n\nUsing any binary code representation you’d like, try to figure out how many possible combinations of bits you can make out using bits grouped by four. Then try again using bits grouped by five. How many possible combinations do you think you can get using six bits at a time, or 64? By grouping single bits together in larger and larger groups, computers can use binary code to find, organize, send, and store more and more kinds of information.\n\nKidder drives this point home in The Soul of a New Machine:\n\n“Computer engineers call a single high or low voltage a bit, and it symbolizes one piece of information. One bit can’t symbolize much; it has only two possible states, so it can, for instance, be used to stand for only two integers. Put many bits in a row, however, and the number of things that can be represented increases exponentially.”\n\nAs computer technology has advanced, computer engineers have needed ways of sending and storing greater amounts of information at a time. As a result, the bit-length used by computers has been growing steadily over the course of computer history. If you have a new iPhone, it is using a 64-bit microprocessor, which means that it stores and accesses information in groups of 64 binary digits—which means that it’s capable of storing 264, or more than 18,000,000,000,000,000,000 unique 64-bit combinations of binary integers. Whoa.\n\nThis idea of coding information with more bits at a time to improve the power and efficiency of computers has driven computer engineering from the beginning, and still does. Though this excerpt from The Soul of a New Machine was first published in 1981, the basic principle of encoding information in binary code with increasing complexity is still representative of the progression of computational power today:\n\n“Inside certain crucial parts of a typical modern computer, the bits – the electrical symbols – are handled in packets. Like phone numbers the packets are of a standard size. IBM’s machines have traditionally handled information in packages 32 bits long. Data General’s NOVA and most minicomputers after it, including the Eclipses, deal with packages only 16 bits long. The distinction is inconsequential in theory, since any computer is hypothetically capable of doing what any other computer may do. But the ease and speed with which different computers can be made to perform the same piece of work vary widely, and in general a machine that handles symbols in chunks of 32 bits runs faster, and for some purposes – usually large ones – it is easier to program than a machine that handles only 16 bits at a time.”\n\nFrom the book THE SOUL OF A NEW MACHINE by Tracy Kidder. Copyright © 1981 by John Tracy Kidder. Reprinted by permission of Little, Brown and Company, New York, NY. All rights reserved.\n\nRelated Segment\n\nIs Coding the Language of the Digital Age?\n\nDonate To Science Friday\n\nMake your year-end gift today. Invest in quality science journalism by making a donation to Science Friday.\n\nDonate\n\nEducator's Toolbox\n\nMeet the Writer\n\nAriel Zych\n\nAbout Ariel Zych\n\nAriel Zych is Science Friday’s director of audience. She is a former teacher and scientist who spends her free time making food, watching arthropods, and being outside.\n\nExplore More\n\nDigital Gets Physical\n\nStudents in MIT's Tangible Media Group break down the barriers of graphic interfaces and allow users to touch and manipulate pixels in real life.\n\nWatch Video"
    }
}