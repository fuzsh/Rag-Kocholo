{
    "id": "dbpedia_4518_3",
    "rank": 15,
    "data": {
        "url": "https://medium.com/techie-delight/bit-manipulation-interview-questions-and-practice-problems-27c0e71412e7",
        "read_more_link": "",
        "language": "en",
        "title": "Bit Manipulation: Interview Questions and Practice Problems",
        "top_image": "https://miro.medium.com/v2/resize:fit:440/0*XYGRXgUC9XJaBnF8.jpg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:440/0*XYGRXgUC9XJaBnF8.jpg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*7Zq1bbVsUrYhcxofukly8g.jpeg",
            "https://miro.medium.com/v2/resize:fill:48:48/1*_HA5GLd8szRiedMejq4cSg.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*7Zq1bbVsUrYhcxofukly8g.jpeg",
            "https://miro.medium.com/v2/resize:fill:64:64/1*_HA5GLd8szRiedMejq4cSg.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Vivek Srivastava",
            "medium.com",
            "@vivek-srivastava"
        ],
        "publish_date": "2018-10-14T01:41:17.905000+00:00",
        "summary": "",
        "meta_description": "Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/techie-delight/bit-manipulation-interview-questions-and-practice-problems-27c0e71412e7",
        "text": "Bit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization. For most other tasks, modern programming languages allow the programmer to work directly with abstractions instead of bits that represent those abstractions. Source code that does bit manipulation makes use of the bitwise operations: AND, OR, XOR, NOT, and bit shifts.\n\nBit manipulation, in some cases, can obviate or reduce the need to loop over a data structure and can give many-fold speed-ups, as bit manipulations are processed in parallel, but the code can become more difficult to write and maintain.\n\nIn this post, we will discuss a few such interesting bit manipulation hacks and interview questions:\n\nBit Hacks — Part 1 (Basic)\n\nBit Hacks — Part 2 (Playing with k’th bit)\n\nBit Hacks — Part 3 (Playing with the rightmost set bit of a number)\n\nBit Hacks — Part 4 (Playing with letters of the English alphabet)\n\nBit Hacks — Part 5 (Find the absolute value of an integer without branching)\n\nFind the total number of bits needed to be flipped\n\nBrian Kernighan’s Algorithm to count set bits in an integer\n\nRound up to the next highest power of 2\n\nRound up to the previous power of 2\n\nCompute the parity of a number using a lookup table\n\nCount set bits using a lookup table\n\nMultiply 16-bit integers using an 8-bit multiplier\n\nSwap individual bits at a given position in an integer\n\nCheck if a number is a power of 4 or not\n\nCheck if a number is a power of 8 or not\n\nReverse bits of an integer\n\nSwap two bits at a given position in an integer\n\nPrint binary representation of a number\n\nAdd binary representation of two integers\n\nSwap adjacent bits of a number\n\nCheck if adjacent bits are set in the binary representation of a number\n\nReverse bits of an integer using a lookup table\n\nCircular shift on the binary representation of an integer by `k` positions\n\nFind XOR of two numbers without using the XOR operator\n\nPrint all distinct subsets of a given set\n\nFind the missing number in an array\n\nFind the missing number in an array without using any extra space\n\nFind the odd occurring element in an array in a single traversal\n\nFind two odd occurring elements in an array without using any extra space\n\nFind all odd occurring elements in an array having a limited range of elements\n\nFind the duplicate element in a limited range array\n\nFind two duplicate elements in a limited range array (using XOR)\n\nFind the missing number and duplicate elements in an array\n\nCheck if binary representation of a number is palindrome or not\n\nEfficiently implement power function\n\nFind the odd occurring element in an array in logarithmic time\n\nHuffman Coding Compression Algorithm\n\nXOR Linked List — Overview and Implementation in C/C++\n\nGenerate the power set of a given set\n\nSwap two numbers without using a third variable | 5 methods\n\nFind the square of a number without using the multiplication and division operator\n\nPerform division of two numbers without using division operator\n\nGenerate 0 and 1 with 75% and 25% probability\n\nDetermine if two integers are equal without using comparison and arithmetic operators\n\nCompute modulus division without division and modulo operator\n\nSingle line expressions to swap two integers in Java\n\nFind minimum or maximum of two integers without using branching\n\nConditionally negate a value without branching\n\nSolve a given set of problems without using multiplication or division operators\n\nGenerate binary numbers between 1 to `n` using a queue"
    }
}