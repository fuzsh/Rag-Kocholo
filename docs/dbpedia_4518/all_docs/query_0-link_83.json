{
    "id": "dbpedia_4518_0",
    "rank": 83,
    "data": {
        "url": "https://www.tutorialspoint.com/swap-every-two-bits-in-bytes",
        "read_more_link": "",
        "language": "en",
        "title": "Swap every two bits in bytes",
        "top_image": "https://www.tutorialspoint.com/images/t-logo.png",
        "meta_img": "https://www.tutorialspoint.com/images/t-logo.png",
        "images": [
            "https://www.tutorialspoint.com/images/trending_categories.svg",
            "https://www.tutorialspoint.com/images/Data-Structure.png",
            "https://www.tutorialspoint.com/images/Networking.png",
            "https://www.tutorialspoint.com/images/dbms.png",
            "https://www.tutorialspoint.com/images/Operating-System.png",
            "https://www.tutorialspoint.com/images/java8.png",
            "https://www.tutorialspoint.com/images/excel_icon.png",
            "https://www.tutorialspoint.com/images/ios.png",
            "https://www.tutorialspoint.com/images/html.png",
            "https://www.tutorialspoint.com/images/css.png",
            "https://www.tutorialspoint.com/images/Android.png",
            "https://www.tutorialspoint.com/images/Python.png",
            "https://www.tutorialspoint.com/images/C-programming.png",
            "https://www.tutorialspoint.com/images/C-PLUS.png",
            "https://www.tutorialspoint.com/images/C-hash.png",
            "https://www.tutorialspoint.com/images/mongodb.png",
            "https://www.tutorialspoint.com/images/MySQL.png",
            "https://www.tutorialspoint.com/images/Javascript.png",
            "https://www.tutorialspoint.com/images/php.png",
            "https://www.tutorialspoint.com/images/physics-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/chemistry-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/biology-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/mathematics-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/english-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/economics-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/psychology-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/social-studies-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/fashion-studies-tutorials_icon.svg",
            "https://www.tutorialspoint.com/images/legal-studies-tutorials_icon.svg",
            "https://www.tutorialspoint.com/assets/profiles/637500/profile/60_4109383-1681206430.jpg",
            "https://www.tutorialspoint.com/static/images/library-cta.svg",
            "https://www.tutorialspoint.com/static/images/logo-footer.svg",
            "https://www.tutorialspoint.com/static/images/googleplay.svg",
            "https://www.tutorialspoint.com/static/images/appstore.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Swap every two bits in bytes - In this article, we will discuss the code solution to swap every alternate bit in a given number and return the resultant number. We will use the concept of bit manipulation in order to solve the problem in constant time without using any loops. Problem statement −  We are given a number n, we hav",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.tutorialspoint.com/swap-every-two-bits-in-bytes",
        "text": "In this article, we will discuss the code solution to swap every alternate bit in a given number and return the resultant number. We will use the concept of bit manipulation in order to solve the problem in constant time without using any loops.\n\nProblem statement − We are given a number n, we have to swap the pair of bits that are adjacent to each other.\n\nIn other words, we have to swap every odd placed bit with its adjacent even placed bit.\n\nConstrain: While solving the problem, we have to keep In mind that we cannot use a loop for this problem, we have to execute our code in O(1) time complexity only.\n\nExample\n\nInput − n = 10011110\n\nOutput − After swapping the even position bits with off position bits,\n\nthe binary number obtained is: 01101101\n\nInput − n = 10011110\n\nOutput − After swapping the even position bits with off position bits,\n\nthe binary number obtained is: 01101101\n\nExplanation −\n\nLet us consider the previous example for better understanding.\n\nn = 10011110 Even position bits in n are E – 1 x 0 x 1 x 1 x Odd position bits in n are O – x 0 x 1 x 1 x 0\n\nFor the result, we want the even position bits at the odd position and vice-versa\n\nFor even position bits at odd position,\n\nWe need to right shift the even position by one position.\n\nSo, for even position bits, we just have to E >> 1 to get required position.\n\nSimilarly, we have to left shift the odd position bits by one position to get the desired position of odd bits.\n\nSo, for odd position bits, we just have to O << 1 to get required position.\n\nNow the next problem is to extract the odd and even position bits.\n\nAs we know,\n\n0x55 = 01010101 in which every only odd position bits are set ( non 0 ). 0xAA = 10101010 in position bits are set. which, only odd\n\nHence to extract E from n, we just need to perform\n\nE = n & 0xAA\n\nSimilarly, to extract O from n, we need to perform-\n\nO = n & 0x55\n\nNow, to find the swapped output,\n\nSteps\n\nSteps involved are-\n\nE >> 1\n\nO << 1\n\nNow, we combine E and O using or operation.\n\nHence our result will be – Result = ( E >> 1 | O << 1 )\n\nExample\n\nCode representation for this approach is given below –\n\n#include<bits/stdc++.h> using namespace std; unsigned int swapbits(unsigned int n) { unsigned int E = n & 0xAA ; unsigned int O = n & 0x55 ; unsigned int result = (E >> 1)|(O << 1); return result; } int main() { unsigned int n = 14; cout << \"After swapping the even position bits with off position bits, the binary number obtained is \" << swapbits(n) << endl; return 0; // code is contributed by Vaishnavi tripathi }\n\nOutput\n\nAfter swapping the even position bits with off position bits, the binary number obtained is 13\n\nTime complexity − The time complexity for this approach is O(1).\n\nSpace Complexity − We have not used any additional space. The auxiliary space complexity is O(1)."
    }
}