{
    "id": "dbpedia_5314_0",
    "rank": 59,
    "data": {
        "url": "https://thedailywtf.com/",
        "read_more_link": "",
        "language": "en",
        "title": "The Daily WTF: Curious Perversions in Information Technology",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://thedailywtf.com/Content/Images/wtf-logo.png",
            "https://thedailywtf.com/Content/Images/forums-icon-white.svg",
            "https://thedailywtf.com/Content/Images/forums-icon-black.svg",
            "https://thedailywtf.com/Content/Images/mobile-menu.svg",
            "https://thedailywtf.com/fblast/f6743635167243dea70c91d267fcd43a",
            "https://thedailywtf.com/Content/Images/about-icon.svg",
            "https://thedailywtf.com/Content/Images/contents-icon.svg",
            "https://thedailywtf.com/fblast/90c09b0b3473471d911a5a6dc1d20002",
            "https://thedailywtf.com/Content/Images/wtf-sidebar-icon.svg",
            "https://thedailywtf.com/Content/Images/sponsors-icon.svg",
            "https://thedailywtf.com/Content/Images/Sponsors/inedo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Remy Porter",
            "Lyle Seaman",
            "humans.txt"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "We all know that building SQL queries via string concatenation, and then sending them to the database, is just begging for fragile code and SQL injection attacks. But, what if the bad part is the \"sending them to the database\" part? Has anyone ever thought about that?\n\nKris's predecessor has.\n\nMany years ago, Sam was obeying Remy's Law of Requirements Gathering (\"No matter what your requirements actually say, what your users want is Excel\") and was working on a web-based spreadsheet and form application.\n\nThe code is not good, and involves a great deal of reinvented wheels. It is, for example, Java based, but instead of using any of the standard Java web containers for hosting their code, they wrote their own. It's like Java Servlets, but also is utterly unlike them in important and surprising ways. It supports JSP for views, but also has just enough surprises that it breaks new developers.\n\nOne of the first things anyone learns about object oriented programming is the power of inheritance and overriding functions. Isn't it great that you can extend or modify the implementation of a function in your derived classes? Don't you wish you could just do that for every function? Aash's co-worker certainly does.\n\npublic boolean isEnabled() { if (!super.isEnabled()) { return false; } return true; }\n\nOne of the clients for Rudolf's company was getting furious with them. The dev team was in constant firefighting mode. No new features ever shipped, because the code-base was too fragile to add new features to without breaking something else. What few tests existed were broken. Anyone put on the project burned out and fled in months, sometimes weeks, and rarely after only a few days.\n\nRudolf wasn't too pleased when management parachuted him into the project to save it. But when he pulled the code and started poking around, it looked bad but not unsalvageable. The first thing he noticed is that, when following the instructions in the README, he couldn't build and run the application. Or maybe he wasn't following the instructions in the README, because the README was a confusing and incoherent mess, which included snippets from unresolved merges. Rudolf's first few days on the project were spent just getting it building and running locally, then updating the README. Once that was done, he started in on fixing the broken tests. There was a lot of work to be done, but it was all doable work. Rudolf could lay out a plan of how to get the project back on track and start delivering new features.\n\nDaniel D. humblebrags that he can spell. \"Ordering is easy, but alphabet is hard. Anyway for this developer it was. Can anyone spot which sorting algo they used?\" Next he'll probably rub it in that he can actually read unlike the TDWTF staff. I guess we'll never know.\n\nThere's nothing inherently wrong with the ternary operator. It's just the kind of thing that gets abused.\n\nNow, we all know how it should be used. We frequently would write something like this:\n\n\"Dark Horse\" inherited some PHP code. They had a hundred lines to submit, but only sent in a dozen- which is fine, as the dozen lines tell us what the other hundred look like.\n\n$suite_1_1 = number_format($item -> {'suite_1_1_'.$the_currency}, 2, '.', ''); $suite_1_2 = number_format($item -> {'suite_1_2_'.$the_currency}, 2, '.', ''); $suite_1_3 = number_format($item -> {'suite_1_3_'.$the_currency}, 2, '.', ''); $suite_1_4 = number_format($item -> {'suite_1_4_'.$the_currency}, 2, '.', ''); $suite_2_1 = number_format($item -> {'suite_2_1_'.$the_currency}, 2, '.', ''); $suite_2_2 = number_format($item -> {'suite_2_2_'.$the_currency}, 2, '.', ''); $suite_2_3 = number_format($item -> {'suite_2_3_'.$the_currency}, 2, '.', ''); $suite_2_4 = number_format($item -> {'suite_2_4_'.$the_currency}, 2, '.', ''); $suite_3_1 = number_format($item -> {'suite_3_1_'.$the_currency}, 2, '.', ''); $suite_3_2 = number_format($item -> {'suite_3_2_'.$the_currency}, 2, '.', ''); $suite_3_3 = number_format($item -> {'suite_3_3_'.$the_currency}, 2, '.', ''); $suite_3_4 = number_format($item -> {'suite_3_4_'.$the_currency}, 2, '.', '');\n\nSean was supporting a web application which, as many do, had required form fields for the user to fill out. The team wanted to ensure that the required fields were marked by an \"*\", as you do. Now, there are a lot of ways to potentially accomplish the goal, especially given that the forms are static and the fields are known well ahead of time.\n\nThe obvious answer is just including the asterisk directly in the HTML: <label for=\"myInput\">My Input(*)</label>: <inputâ€¦>. But what if the field requirements change! You'll need to update every field label, potentially. So someone hit upon the \"brillant\" idea of tracking the names of the fields and their validation requirements in the database. That way, they could output that information when they rendered the page."
    }
}