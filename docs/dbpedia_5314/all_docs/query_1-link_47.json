{
    "id": "dbpedia_5314_1",
    "rank": 47,
    "data": {
        "url": "https://zig.news/edyu/zig-package-manager-wtf-is-zon-558e",
        "read_more_link": "",
        "language": "en",
        "title": "Zig Package Manager - WTF is Zon",
        "top_image": "https://zig.news/images/JUOdvPe-QzRnDd4p-Reu4gp0ewlYcAJbs1puQTa4nJA/rs:fill:1000:500/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L2FydGljbGVzL3N4/ODdscTBhNG4waHVr/dWF6a3A2LnBuZw",
        "meta_img": "https://zig.news/images/JUOdvPe-QzRnDd4p-Reu4gp0ewlYcAJbs1puQTa4nJA/rs:fill:1000:500/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L2FydGljbGVzL3N4/ODdscTBhNG4waHVr/dWF6a3A2LnBuZw",
        "images": [
            "https://zig.news/uploads/logos/resized_logo_26OLkrXV7yuJAl7MDaG1.png",
            "https://zig.news/assets/heart-plus-active-9ea3b22f2bc311281db911d416166c5f430636e76b15cd5df6b3b841d830eefa.svg",
            "https://zig.news/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg",
            "https://zig.news/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg",
            "https://zig.news/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg",
            "https://zig.news/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg",
            "https://zig.news/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg",
            "https://zig.news/images/cMbbTUUIGiUbarypjun7kAMtBw6bSYNxWJJEqlmrwGM/rs:fill:1000:420/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L2FydGljbGVzL3N4/ODdscTBhNG4waHVr/dWF6a3A2LnBuZw",
            "https://zig.news/images/KFR5jaThMnaJdGg4eUWZ55rrUssiwlPVdvfWi070m4w/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg",
            "https://zig.news/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg",
            "https://zig.news/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg",
            "https://zig.news/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg",
            "https://zig.news/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg",
            "https://zig.news/images/-tWQ88UTeMt43vz-JxZzaYN6C8VCfVOl191FfAhq1H0/rt:fit/w:800/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWds/YW5nLm9yZy96aWct/bG9nby1kYXJrLnN2/Zw",
            "https://zig.news/images/z9D7TCnk7d8GKENdYUSF_4QOUA4tv5yJa2Lm3ym9QGQ/rt:fit/w:800/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWds/YW5nLm9yZy96ZXJv/LnN2Zw",
            "https://zig.news/images/2WgRPGpLuOYuC2sLJMg1DZv-e_Rc19DcKMG7CIAjlGE/rt:fit/w:256/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L2FydGljbGVzL3pr/YWVtbzNuMDJjYW13/bWwzYXJjLnBuZw",
            "https://zig.news/images/Fn3AqM_hnt75ToMjpX9s86C7kZTjZMMRlFgq7iDUqYg/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xMTE1/LzY5OWMwYjQyLTgy/NTctNGZiNi1iMWEx/LWEzNTUyZWYzMTcy/ZS5wbmc",
            "https://zig.news/images/xj9YgLtk9S5BDkfInnG_4cTu4edwFmhpvAPHuiwm_7E/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xMTE1/LzY5OWMwYjQyLTgy/NTctNGZiNi1iMWEx/LWEzNTUyZWYzMTcy/ZS5wbmc",
            "https://zig.news/images/2JAE5hjkH2xgiZkJ42GL8v7qV4luqtfGoqsQLVZHkc8/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/fE03OsNgC7G5toeml2zlphNjtBsErDchDQUIqOJpBPk/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/KFR5jaThMnaJdGg4eUWZ55rrUssiwlPVdvfWi070m4w/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/XyNcP7wD7Tcm3tLp9GpzzQTmUAcfHLEL6IjDKp3_ojw/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/2JAE5hjkH2xgiZkJ42GL8v7qV4luqtfGoqsQLVZHkc8/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/fE03OsNgC7G5toeml2zlphNjtBsErDchDQUIqOJpBPk/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/KFR5jaThMnaJdGg4eUWZ55rrUssiwlPVdvfWi070m4w/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/XyNcP7wD7Tcm3tLp9GpzzQTmUAcfHLEL6IjDKp3_ojw/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/3UjAcERJUfuioCMQNtdRTUETX3yGX4_vOqNbo3LNUXs/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85ODgv/YzI4MmVkNzEtNjFl/NS00NGM4LTk3Yjkt/M2U5ZWY0MGNlOWY3/LnBuZw",
            "https://zig.news/images/QwcX-tgwEapNkLhrqkkZOTpeQJ_1nl8t1jieyPkHzp4/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85ODgv/YzI4MmVkNzEtNjFl/NS00NGM4LTk3Yjkt/M2U5ZWY0MGNlOWY3/LnBuZw",
            "https://zig.news/images/2JAE5hjkH2xgiZkJ42GL8v7qV4luqtfGoqsQLVZHkc8/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/fE03OsNgC7G5toeml2zlphNjtBsErDchDQUIqOJpBPk/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/2JAE5hjkH2xgiZkJ42GL8v7qV4luqtfGoqsQLVZHkc8/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/fE03OsNgC7G5toeml2zlphNjtBsErDchDQUIqOJpBPk/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/KFR5jaThMnaJdGg4eUWZ55rrUssiwlPVdvfWi070m4w/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/XyNcP7wD7Tcm3tLp9GpzzQTmUAcfHLEL6IjDKp3_ojw/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/2JAE5hjkH2xgiZkJ42GL8v7qV4luqtfGoqsQLVZHkc8/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/fE03OsNgC7G5toeml2zlphNjtBsErDchDQUIqOJpBPk/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS84NTAv/NzI3ZWMyYmMtMTlj/Mi00ODAyLWE4ODMt/N2Q4ODBmNGUwYzUy/LkpQRw",
            "https://zig.news/images/fngyU6hclz_QeHFvzOw7iCuLk7W_jyLdxrz-_hZnWmk/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/qZN1tfGkPlZPjROIsPimRzl323b1h-C-YpYVpsintp8/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/RlxR7cmY9KP7-tJY5QFccr8Z1SsvtG5ZsQvagsWPLNg/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xOTkv/NzdjNWQ1ZmEtYjJj/Mi00ZDFiLWJkYTYt/ODQ0NjU0YzI0YWQ4/LmpwZWc",
            "https://zig.news/images/hMSLLGdAqzClep6RTqAqrXVILkJTKk62FIu6EGXwvFE/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xOTkv/NzdjNWQ1ZmEtYjJj/Mi00ZDFiLWJkYTYt/ODQ0NjU0YzI0YWQ4/LmpwZWc",
            "https://zig.news/images/fngyU6hclz_QeHFvzOw7iCuLk7W_jyLdxrz-_hZnWmk/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/qZN1tfGkPlZPjROIsPimRzl323b1h-C-YpYVpsintp8/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/RlxR7cmY9KP7-tJY5QFccr8Z1SsvtG5ZsQvagsWPLNg/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xOTkv/NzdjNWQ1ZmEtYjJj/Mi00ZDFiLWJkYTYt/ODQ0NjU0YzI0YWQ4/LmpwZWc",
            "https://zig.news/images/hMSLLGdAqzClep6RTqAqrXVILkJTKk62FIu6EGXwvFE/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xOTkv/NzdjNWQ1ZmEtYjJj/Mi00ZDFiLWJkYTYt/ODQ0NjU0YzI0YWQ4/LmpwZWc",
            "https://zig.news/images/fngyU6hclz_QeHFvzOw7iCuLk7W_jyLdxrz-_hZnWmk/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/qZN1tfGkPlZPjROIsPimRzl323b1h-C-YpYVpsintp8/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/RlxR7cmY9KP7-tJY5QFccr8Z1SsvtG5ZsQvagsWPLNg/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xOTkv/NzdjNWQ1ZmEtYjJj/Mi00ZDFiLWJkYTYt/ODQ0NjU0YzI0YWQ4/LmpwZWc",
            "https://zig.news/images/hMSLLGdAqzClep6RTqAqrXVILkJTKk62FIu6EGXwvFE/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xOTkv/NzdjNWQ1ZmEtYjJj/Mi00ZDFiLWJkYTYt/ODQ0NjU0YzI0YWQ4/LmpwZWc",
            "https://zig.news/images/fngyU6hclz_QeHFvzOw7iCuLk7W_jyLdxrz-_hZnWmk/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/qZN1tfGkPlZPjROIsPimRzl323b1h-C-YpYVpsintp8/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS82OTMv/NjNkZjhhNzItNDQ3/OS00YjI3LTljMmYt/ODY1ODBmMTg3NmVm/LnBuZw",
            "https://zig.news/images/KFR5jaThMnaJdGg4eUWZ55rrUssiwlPVdvfWi070m4w/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/XyNcP7wD7Tcm3tLp9GpzzQTmUAcfHLEL6IjDKp3_ojw/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/wx9_qszlG_jlV0w1PrOkg3a77DjgvOfxsoojxjfWV8o/rs:fill:50:50/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xNjQw/LzI2NWZiNDk3LTVj/YTktNGIxZS1iMTAz/LTBmMTNhOWNlZmIw/Yy5qcGVn",
            "https://zig.news/images/kBy2iK3DY2oFntQbvooENFg2lwR4NHFdzjCKIBPTn5A/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xNjQw/LzI2NWZiNDk3LTVj/YTktNGIxZS1iMTAz/LTBmMTNhOWNlZmIw/Yy5qcGVn",
            "https://zig.news/images/V9-d64TyL7lsiZwcmgEHM0ufsz1DDUYZtC9K10E1GS0/rs:fill:100:100/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xMzA1/LzEwYzM2MzI1LTQ0/ZTktNDk4OS05NDc3/LWQxZjAyNzRiNWIy/My5qcGVn",
            "https://zig.news/images/NT_AHTNRSbW_gnbhic40MfC_Vqade2N9Pe611P7rnT0/rs:fill:100:100/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xMzMw/L2M3ZTkyZDUxLTdj/ZmMtNDkwNS1hZGRj/LTJkYjk0YjM2OTYx/NC5qcGVn",
            "https://zig.news/images/S368bupA4gXBvX1ZDR7EIARmZr1GdHdcApU6nQRJRBo/rs:fill:100:100/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8xLzFi/MTE5ZGQwLTYxOTUt/NGMyOC04YzQzLWU1/ZWQ4ZjYzZGQ1Ni5w/bmc",
            "https://zig.news/images/jLOXtZ63HNjhHxsk5gQ1R8vU2alQcWfqvY-OLDv1FLY/rs:fill:100:100/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS8yNTQv/OTg5M2I5ZTMtYzFl/MC00YmQwLWE1NTct/OTY2MTRiNDJlNzFl/LmpwZWc",
            "https://zig.news/images/XyNcP7wD7Tcm3tLp9GpzzQTmUAcfHLEL6IjDKp3_ojw/rs:fill:90:90/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L3VzZXIvcHJvZmls/ZV9pbWFnZS85MDgv/ZjgzMzgyZDEtODY3/NC00ZDc2LWI1ZDIt/YWZjMjZhNWQzYTlm/LmpwZWc",
            "https://zig.news/images/cq49MGnhMqnMkMRMPCoSAIsyt9XAgdUvCHoFsR3TLZQ/rt:fit/w:190/g:sm/q:80/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L2FydGljbGVzL3pr/YWVtbzNuMDJjYW13/bWwzYXJjLnBuZw",
            "https://zig.news/assets/sparkle-heart-5f9bee3767e18deb1bb725290cb151c25234768a0e9a2bd39370c382d02920cf.svg",
            "https://zig.news/assets/multi-unicorn-b44d6f8c23cdd00964192bedc38af3e82463978aa611b4365bd33a0f1f4f3e97.svg",
            "https://zig.news/assets/exploding-head-daceb38d627e6ae9b730f36a1e390fca556a4289d5a41abb2c35068ad3e2c4b5.svg",
            "https://zig.news/assets/raised-hands-74b2099fd66a39f2d7eed9305ee0f4553df0eb7b4f11b01b6b1b499973048fe5.svg",
            "https://zig.news/assets/fire-f60e7a582391810302117f987b22a8ef04a2fe0df7e3258a5f49332df1cec71e.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "learn",
            "packagemanager",
            "build",
            "zon",
            "ziglang",
            "zig"
        ],
        "tags": null,
        "authors": [
            "Ed Yu"
        ],
        "publish_date": "2023-06-27T18:19:17+00:00",
        "summary": "",
        "meta_description": "The power hack and complexity of Package Manager in Zig     Ed Yu (@edyu on Github and @edyu on... Tagged with learn, packagemanager, build, zon.",
        "meta_lang": "en",
        "meta_favicon": "https://zig.news/images/Vg4_Qzp5ZVNPyVuywhHDTVA_FhYBjyX_IZG8iMEeweU/rt:fit/w:32/g:sm/mb:500000/ar:1/aHR0cHM6Ly96aWcu/bmV3cy91cGxvYWRz/L2FydGljbGVzL3pr/YWVtbzNuMDJjYW13/bWwzYXJjLnBuZw",
        "meta_site_name": "Zig NEWS",
        "canonical_link": "https://zig.news/edyu/zig-package-manager-wtf-is-zon-558e",
        "text": "The power hack and complexity of Package Manager in Zig\n\nEd Yu (@edyu on Github and\n\n@edyu on Twitter)\n\nJun.27.2023\n\nIntroduction\n\nZig is a modern system programming language and although it claims to a be a better C, many people who initially didn't need system programming were attracted to it due to the simplicity of its syntax compared to alternatives such as C++ or Rust.\n\nHowever, due to the power of the language, some of the syntaxes are not obvious for those first coming into the language. I was actually one such person.\n\nToday we will take a break from the language itself to talk about one of the most important new features that was introduced recently in Zig -- the package manager. I've read somewhere that all modern languages need to have package manager built in. Although I don't share the same opinion, it's indicative of how important a good package manager is for the underlying language. For example, JavaScript has npm, Haskell has cabal, and Rust has cargo.\n\nDisclaimer\n\nI've added a follow-up article WTF is Zig Package Manager 2. It goes over a better hack to make the package manager to work for my need.\n\nThere is a reason why I changed my typical subtitle of power and complexity to hack and complexity for this particular article because unfortunately the Zig package manager is currently only on the master branch (or edge) and its a work-in-progress until 0.11 is released. As for the hack part, it will make sense after you read through the part of Provide a Package.\n\nThe state of the release 0.11 as of June 2023 is in flux so you will encounter many bugs and problems along the way. I'm not writing this to discourage you from using it but to set the right expectation, so you don't throw away the baby (Zig) with the bath water (package manager).\n\nZig along with its package manager is being constantly improved, and honestly, it's already very useful and usable even in the current state (despite the frustrations along with one of the hackiest things I've done, which I will describe later in the article).\n\nWhen you run zig build, you may see several failures (such as segmentation fault) when it's pulling down packages before it will succeed after several more tries. Although there is indication it's because of TLS but I don't want to give out wrong information that I haven't investigated myself.\n\nPackage Manager\n\nSo, what's the purpose of the package manager? For a developer, the package manager is used to use other people's code easily. For example, say you need to use a new library, it's much easier to use the underlying package manager to add (either download and/or link to the library) the library and then somehow configure something in your project to magically link to the library for you to use it in your code.\n\nZig Package Manager(s)\n\nZig had some other package managers in the past but now we have a built-in official package manager as part of version 0.11 (not released yet as of July, 2023).\n\nInterestingly, there are no additional commands to remember as the package manager is built into the language. Zig also does not have a global repository or a website that hosts the global repository such as npmjs does for Javascript or crates.io for Rust.\n\nSo really, the Zig package manager is just same old zig build that you need to build your project anyways. There is nothing new you really need to use the package manager.\n\nThere is however a new file-type with the extension .zon and a new file called build.zig.zon. zon stands for Zig Object Notation similar to how json stands for JavaScript Object Notation. It's mainly a way to describe hierarchical relationship such as dependencies needed in the project.\n\nIn order to use a Zig package using the package manager, you'll need to do 3 things:\n\nAdd your dependencies in build.zig.zon\n\nIncorporate your dependencies to your build process in build.zig\n\nImport your dependencies in your code using @import\n\nbuild.zig.zon\n\nIf you open up a zon file such as the following, you'll notice, it looks like a json file such as the typical package.json somewhat.\n\nThere are several things of note here in the code above:\n\nThe object looking curly braces are actually anonymous structs, if you don't know what structs are, you can think them as like an object. I briefly talked about structs in my previous article: Zig Union(Enum).\n\nThe . in front of the curly braces are important as it denotes the struct as an anonymous struct.\n\n\"For the purpose of zon, you can think of anonymous struct as a similar data format to json, but instead using Zig's struct literal syntax.\"\n\n-- @Inkryption.\n\nThe . in front of field names are also important because it conforms to the expected structure. In this particular struct, there is an expectation of three top level fields of name, version, and dependencies respectively.\n\ndependencies\n\nTo use a package that's been prepared for the new Zig package manager, you just need to list it in the dependencies section.\n\nIn the previous example, I showed how to add Zap, a webserver, to your project by listing both the url of the release and the hash.\n\nThe url is fairly easy to find as you can normally find it on github directly.\n\nHowever, the hash is difficult to find out because it's not just the md5sum, sha1sum, or even sha256sum of the tarball listed in url. The hash does use sha256 but it's not a direct hash of the tarball so it's not easily calculated by the user of the package.\n\nLuckily the easiest way I found is just to put any hash there initially and then zig build will complain and give you the correct hash. I know it's not ideal until all package author follows what Zap does by listing the hash in the release notes or the README.\n\nThe dependencies section showing 2 packages:\n\nOnce you add your dependencies, zig buid would pull down your dependent packages as part of your project.\n\nBut you may need to add the package in your build step as well. Zig is different in many languages that it minimizes a runtime so often you'll need to build and link your dependencies in your project.\n\nModule\n\nIn order to use the library exposed as a dependency, you have to expose the module of the dependency and add the module to the compile step.\n\nYou can think of a module as the code that are exported by the library so that the caller of the package can import the library into the source code.\n\nIn the next section, the code adds a module using a call to addModule(). The first argument is the name you want to use in your code so you can import the module. The second argument is where the code is located within the module in the dependency. In other words, you are aliasing a namespace (the 2nd argument) to a new name (1st argument).\n\nbuild.zig\n\nHere is an example of the build.zig illustrating how to add the module duck in your project so that you can subsequently use the library by importing const duck = @import(\"duck\");:\n\nWhat the code snippet above does is that it first declares your project as an executable and then pulls in duck as a dependency.\n\nThe build.zig in the duck project already exported itself as the module duck but you are adding it again as a module with the same name duck.\n\nThe linkLibrary call is the actual call to link to the output (Zig calls it artifact) of the duck module.\n\n@import\n\nNow you have everything setup in your build, you need to use the new package in your code.\n\nAll you need to do is to use the @import builtin to import your new library just like how you normally import the standard library @import(std).\n\nProvide a Package\n\nOk, this is for those who would like to understand how the Zig package manager works as a library/package provider.\n\nTo better illustrate things, I'll use a new package duckdb.zig that I wrote.\n\nDuckDb is a column-based SQL database so think it as basically a column-based SQLite.\n\nI will split the project into 3 packages A, B, and C. Basically the idea is that our project will be C that is the actual project that uses DuckDb. The project C will then use the Zig layer provided by package B, which in turn will need the actual DuckDb libraries in package A.\n\nSo in our case, we have the project my-wtf-project, which will call the Zig library provided by duckdb.zig. The duckdb.zig is really a wrapper of libduckdb that provides the dynamic library of release 0.8.1 of DuckDb. To use the A, B, C in the previous paragraph, C is our project my-wtf-project, B is duckdb.zig, and A is libduckdb.\n\nNote: I will talk about the actual process of making a wrapper library in a future article.\n\nA: libduckdb\n\nThe duckdb is written in c++ and the libduckdb-linux-amd64 release from duckdb only provided 3 files: duckdb.h, duckdb.hpp, and libduckdb.so.\n\nI unzipped the package and placed duckdb.h under include directory and libduckdb.so under lib directory.\n\nHere are the first 3 hacks needed:\n\nYou don't need to build anything, but the package manager expects to see a build.zig file in the package so you must provide one.\n\nBecause you provided a build.zig, you need to provide some build artifact even if it's not needed.\n\nThe most important part and the hackiest part is that you need to use the constructs used for header files to install the library.\n\nbuild.zig.zon of A: libduckdb.\n\nThis is probably the simplest build.zig.zon as you don't need any dependencies.\n\nThis should remind people of a very simple .cabal, cargo.toml, or package.json file.\n\nArtifact\n\nYou'll see the word artifact used often in the build process. One way to grasp artifact is to think it as the output of the build. If you are building a shared library, the .so file is the artifact; a static library, the .a file is the artifact; and for an executable, the actual execuable is the artifact.\n\nWhen you have the artifact in the code (build.zig), you can then use the artifact object to pass in to other function calls that can extract parts of the artifact based on their individual need. For example, installLibraryHeaders() would take in the artifact object and install any header files installed as part of the artifact.\n\nIn fact, this is something we will and we have to take advantage of in order to make our hack build work.\n\nIn the code below, the executable .name = \"my-wtf-project tells the build that my-wtf-project is the name of the artifact and the executable is the actual artifact.\n\nbuild.zig of A: libduckdb.\n\nWe are essentially building something we don't really need but we definitely need the installHeader calls because this is how we install the 2 files we need in our artifact: include/duckdb.h and lib/libduckdb.so.\n\nNote that we are building a library without specifying a source code anywhere. We however do need to at least link to something. In this case, we need to link to the libduckdb.so even though we don't need any symbols from it because the build process needs either a source file or a library to link to.\n\nYes, we are using the installHeader to install a dynamic library because there is no alternative.\n\nWe can use installLibFile to install the lib/libduckdb.so but as you'll see in package B, it won't work without using installHeader.\n\nThe call to installHeader requires a source and destination arguments but the destination argument assumes relative path of the target header directory. Therefore, we need to use ../lib/libduckdb.so in order to install libduckdb.so under lib directory instead of the default include.\n\nThe final call to installArtifact is the one that will be utilized by B to grab the 2 files needed as described next. It will in this case, create an artifact libduckdb.a that we don't really need. For us, the artifact contains 3 things, the duckdb.h, libduckdb.so, and libduckdb.a. We only need the first two and libduckdb.a really is a side-effect of the artifact that we can toss away later in B.\n\nYou can say we only need the bath water, not the baby. (Sorry for the bad jokes but I can't help myself. 😊 )\n\nB: duckdb.zig\n\nThe duckdb.zig is a minimal (for now) Zig wrapper to duckdb. The idea is so that any Zig project depending on it doesn't have to deal with the C/C++ API just the Zig equivalent.\n\nWe still need to perpetuate the hack by making sure libduckdb.so is part of the output artifact of duckdb.zig as well.\n\nbuild.zig.zon of B: duckdb.zig\n\nWe do have a dependency now as we need to refer to a release of A: libduckdb.\n\nbuild.zig of B: duckdb.zig\n\nWe now need to refer to the libduckdb (A) package using the name duckdb by making a call to Build.dependency(\"duckdb).\n\nWe then name our module duck and add the module to Build with such name so that the build process can get the module by name if needed.\n\nOur own artifact is now named duck by calling Build.addStaticLibrary() with .name = \"duck\" in the anonymous struct.\n\nAlthough we call linkLibrary(duck_dep.artifact(\"duckdb\")), the empty library created in libduckdb A doesn't actually resolve anything symbols because all the symbols are really in the dynamic library libduckdb.so.\n\nThe most important part of the hack build is to call to installLibraryHeaders() because we want to once again include the output of the libduckdb artifact in our own artifact so that anything that depends on duckdb.zig would have access to both the duckdb.h and libduckdb.so from A.\n\nC: my-wtf-project\n\nNow to create the executable for our project, we need to link to the packages A libduckdb and B duckdb.zig.\n\nbuild.zig.zon of C: my-wtf-project\n\nOur only dependency is the release of B: duckdb.zig.\n\nNotice that we do not need to refer to A (libduckdb) at all because B hides that from us.\n\nbuild.zig of C: my-wtf-project\n\nThis is somewhat similar to the build.zig of B (duckdb.zig).\n\nAlthough we never referred to A (libduckdb) at all in build.zig.zon, we do need to refer to the artifact of \"duck\" and install libduckdb.so from A (libduckdb) using the same hack call installLibraryHeaders(duck.artifact(\"duck\")). However, We now refer to the library header as part of the artifact of B (duckdb.zig), not that of A (libduckdb).\n\nWe also have to link to the library provided by B (duckdb.zig) because it actually includes the Zig wrapper functions we need in our code by calling linkLibrary(duck.artifact(\"duck\")).\n\nIf you look at the code below, you'll notice a curious use of std.fmt.allocPrint() that refers to something called Build.install_prefix. It's just a fancy way to refer to the output directory what typically defaults to zig-out. The reason is that our executable do need to find the symbols exposed by the dynamic library from A (libduckdb) for the linking process.\n\nWe basically tell the build that to add zig-out/lib to find the libraries needed for linking and then link to libduckdb.so by calling linkSystemLibraryName(\"duckdb\").\n\nDue to the latest change in Zig, we also now need to tell the build that libduckdb.so requires the libC by calling linkLibC.\n\nAfterwards, we just install the executable by calling 'Build.installArtifact()', which would install the executable to zig-out/bin just like how Zig normally does. Note that our artifact for our project is called \"my-wtf-project\" because we put that name in .name during our call to Build.addExecutable.\n\nRunning the executable\n\nNote that in order to run our executable, we need to tell it where to find libduckdb.so.\n\nThe easiest way I found is to invoke our exectable like LID_LIBRARY_PATH=zig-out/lib my-wtf-project.\n\nBonus: Cache\n\nWhen the Zig package manager pulls down the packages, it saves them under .cache/zig. What it means is that once you have pulled down a package, you don't need network to pull down the same package again. However, there are times where the Zig package manager doesn't update/work properly, you'll need to delete the cache specific to your package and tell Zig to re-download the package.\n\nThe following command will remove all the packages from your cache:\n\nThe End\n\nThere is a follow-up article WTF is Zig Package Manager 2.\n\nYou can find the code here.\n\nHere are the code for duckdb.zig and libduckdb."
    }
}