{
    "id": "dbpedia_6465_3",
    "rank": 34,
    "data": {
        "url": "https://arxiv.org/html/2403.03489v3/",
        "read_more_link": "",
        "language": "en",
        "title": "Global Geolocated Realtime Data of Interfleet Urban Transit Bus Idling",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://arxiv.org/html/2403.03489v3/extracted/5655316/map.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Global Geolocated Realtime Data of\n\nInterfleet Urban Transit Bus Idling\n\nNicholas Kunz nhk37@cornell.edu\n\nH. Oliver Gao hg55@cornell.edu\n\nSystems Engineering, Cornell University\n\nAbstract\n\nUrban transit bus idling is a contributor to ecological stress, economic inefficiency, and medically hazardous health outcomes due to emissions. The global accumulation of this frequent pattern of undesirable driving behavior is enormous. In order to measure its scale, we propose GRD-TRT-BUF-4I (‚ÄúGround Truth Buffer for Idling‚Äù) an extensible, realtime detection system that records the geolocation and idling duration of urban transit bus fleets internationally. Using live vehicle locations from General Transit Feed Specification (GTFS) Realtime, the system detects approximately 200,000 idling events per day from over 50 cities across North America, Europe, Oceania, and Asia. This realtime data was created to dynamically serve operational decision-making and fleet management to reduce the frequency and duration of idling events as they occur, as well as to capture its accumulative effects. Civil and Transportation Engineers, Urban Planners, Epidemiologists, Policymakers, and other stakeholders might find this useful for emissions modeling, traffic management, route planning, and other urban sustainability efforts at a variety of geographic and temporal scales.\n\n1 Background & Summary\n\nUrban transit buses provide essential transportation services in cities around the world. In Brazil, they are the most common mode of transportation [1]. In India, they are the third most preferred mode of transportation, where the size of their national fleet increased by nearly 30% between 2009 and 2019, from nearly 118,00 vehicles to more than 152,000 [2, 3]. China also increased the size of its national fleet over roughly the same period, totaling nearly 600,000 vehicles in 2021 [4]. In the United States, nearly half of all passenger trips on public transportation were facilitated by urban transit buses, amounting to approximately 6.2 billion trips in 2022, most of which were powered by diesel fuel [5, 6].\n\nData from the American Public Transportation Association (APTA) reported that in 2020, more than 96% of all commuter buses in the United States were diesel-powered [6]. All other fuel types such as compressed natural gas (CNG), liquefied natural gas (LNG), biodiesel, gasoline, propane, hydrogen, hybrid, and battery-electric accounted for less than 4% of all fielded vehicles when combined [6]. Even throughout Europe, where aggressive measures have been taken to transition away from diesel-powered vehicles, the most common type of newly fielded urban transit bus in 2021 was indeed diesel-powered [7]. Although many implications emerge in this regard, engine idling is a concern worldwide.\n\nIdling is when a vehicle‚Äôs engine is in operation, but is geographically stationary [8]. While individual idling events may seem insignificant, the total accumulation of these ephemeral, but repeated events is material. For instance, in 2022 the National Renewable Energy Laboratory (NREL) found that urban transit buses in the United States idled for roughly 40% of their typical 9-hour operational period based on data from 16 vehicles over 19,440 hours (2.22 years) of cumulative driving time [9]. An earlier study from 2010 reported similar findings throughout the United Kingdom, where idling rates were between 30% and 44% [10]. A smaller scale, but more detailed example in South Korea found similar idling rates near 43% [11].\n\nEcological stress, economic inefficiency, and medically hazardous health outcomes - among others - all simultaneously emerge from this frequent and repeated pattern of undesirable driving behavior [12, 13, 14]. A single idling urban transit bus can consume 0.5 gal (1.9 L) of diesel fuel per hour, emitting approximately 11.1 lbs (5 kg) of CO2subscriptCO2\\text{CO}_{2}CO start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT equivalent GHG, 2.7 g of VOC, 2.7 g of THC, 37.4 g of CO, 61.1 g of NOxsubscriptNOùë•\\text{NO}_{x}NO start_POSTSUBSCRIPT italic_x end_POSTSUBSCRIPT, 1.2 g of PM10subscriptPM10\\text{PM}_{10}PM start_POSTSUBSCRIPT 10 end_POSTSUBSCRIPT, and 1.1 g of PM2.5subscriptPM2.5\\text{PM}_{2.5}PM start_POSTSUBSCRIPT 2.5 end_POSTSUBSCRIPT [15, 16]. These pollutants pose serious health risks including asthma, cardiovascular disease, liver and kidney damage [17, 18, 19]. Furthermore, noise from urban transit bus idling is a reported burden loud enough to potentially cause permanent hearing loss at SEL and Lm‚Å¢a‚Å¢xsubscriptùêøùëöùëéùë•L_{max}italic_L start_POSTSUBSCRIPT italic_m italic_a italic_x end_POSTSUBSCRIPT A-weighted decibel levels of 111 dBA and 75 dBA, respectively [13, 14].\n\nWhile the negative impacts of urban transit bus idling are numerous and evident, the magnitude of the problem has begun to emerge as a category of its own concern [20, 21]. Existing studies tend to focus on historical information from selected localities that are limited to a municipal, regional, or national fleet [12, 22, 23]. Few if any comprehensively measure the interfleet phenomena in realtime on an international scale. Well-established developments like the General Transit Feed Specification (GTFS) Realtime have enabled transit agencies to share realtime data on service disruptions, vehicle locations, and arrival times using a standard schema since 2011 [24, 25]. Growing international adoption of GTFS Realtime now affords the possibility to integrate these data sources using a common ingestion method [21], as exhibited here.\n\nThis geolocated realtime data is the first record of urban transit bus idling measured on a global scale. It immediately describes the worldwide phenomena when and where it occurs, giving transit agencies around the world the collective ability to actively intercept idling events, rather than merely measure the problem, only to analyze its negative impact after the fact. This shift would mark a significant advancement in the approach to reducing urban transit bus fleet idling worldwide by moving from reactive policies based on historical trends to preemptive measures based on proactive reduction strategies. The extensibility of this effort also allows easy integration of new GTFS Realtime sources as they become available. Those that fit within this scope are described in the following section Data Sources.\n\n2 Methods\n\n2.1 Data Sources\n\nLive vehicle locations from on-network urban transit bus fleets from over 50 cities were collected using GTFS Realtime. Although there are hundreds of GTFS Realtime sources, those that were selected, satisfied a combination of immediate availability, geographic variety, sufficient fleet size, daily operational length, and active support of each endpoint. Note that transit agencies may not elect to adopt GTFS Realtime for reasons regarding development cost, technical expertise and maintenance, usage of existing systems, lack of political support or priority [26, 27].\n\nTo ensure authenticity and reproducibility, data from GTFS Realtime was collected from publicly accessible Representational State Transfer (REST) Application Programming Interface (API) endpoints provided by the transit agencies directly, rather than relying on private third-party aggregation. All data sources were consumed as Protocol Buffers, sometimes referred to as ‚Äúprotobufs‚Äù [28, 29]. An example of the deserialized protobuf schema is exhibited in Figure 2 and Figure 3.\n\nEach data source was categorized according to its geographic region, where each region contained between 1 to 6 sources depending on the availability and stability of the REST API. Table 2 through Table 12 exhibit each data source and its corresponding region. Some regions were nested within national categories belonging to the same continent. In other cases, few enough data sources were available that the continent directly represented the region, such as Oceania and Asia.\n\nNote that in Table 1, the Greater designation in the Country column indicates the corresponding region contains more than one country. Similarly, the italicized names in the City column in Table 2 through Table 12 include neighboring cities from the broader metropolitan area. For example, Minneapolis includes neighboring St. Paul, San Francisco includes neighboring Oakland, etc. Other cities may also include locations beyond their proper municipal geographic boundary. However, those that are stylized were specified as such because of their immediate availability.\n\n2.2 Buffering Procedure\n\nEach geographic region (US East ‚Ä¢, US West ‚Ä¢, etc.) previously mentioned in Data Sources, represents an asynchronous feed, FeedisubscriptFeedùëñ\\text{Feed}_{i}Feed start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, exhibited in Figure 4. It is constructed from its corresponding GTFS Realtime sources. As FeedisubscriptFeedùëñ\\text{Feed}_{i}Feed start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT enters the buffer, it is stored in memory as disubscriptùëëùëñd_{i}italic_d start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT according to indices d0,d1,d2,subscriptùëë0subscriptùëë1subscriptùëë2d_{0},d_{1},d_{2},italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ,‚Ä¶,dh+1,d_{h+1}, italic_d start_POSTSUBSCRIPT italic_h + 1 end_POSTSUBSCRIPT at time t,t+1,t+2,ùë°ùë°1ùë°2t,t+1,t+2,italic_t , italic_t + 1 , italic_t + 2 ,‚Ä¶,t+h+1,t+h+1, italic_t + italic_h + 1, respectively.\n\nAfter the buffer is populated to length TùëáTitalic_T, the buffering procedure is fully initialized. As new FeedisubscriptFeedùëñ\\text{Feed}_{i}Feed start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT enters the buffer at time tùë°titalic_t once initialized, Feedi+h+2subscriptFeedùëñ‚Ñé2\\text{Feed}_{i+h+2}Feed start_POSTSUBSCRIPT italic_i + italic_h + 2 end_POSTSUBSCRIPT is omitted beyond buffer length TùëáTitalic_T. This step is repeated theoretically to ‚àû\\infty‚àû or practically until the procedure is stopped.\n\nAfter initializing the buffer, as well as when FeedisubscriptFeedùëñ\\text{Feed}_{i}Feed start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT enters it, the index d0subscriptùëë0d_{0}italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT is treated as set Aùê¥Aitalic_A, index dhsubscriptùëë‚Ñéd_{h}italic_d start_POSTSUBSCRIPT italic_h end_POSTSUBSCRIPT treated as set BùêµBitalic_B, and index dh+1subscriptùëë‚Ñé1d_{h+1}italic_d start_POSTSUBSCRIPT italic_h + 1 end_POSTSUBSCRIPT treated as set Cùê∂Citalic_C. In other words, sets A,B,Cùê¥ùêµùê∂A,B,Citalic_A , italic_B , italic_C are equivalent to buffer indices d0,dh,dh+1subscriptùëë0subscriptùëë‚Ñésubscriptùëë‚Ñé1d_{0},d_{h},d_{h+1}italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT italic_h end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT italic_h + 1 end_POSTSUBSCRIPT, respectively. The subsetting procedure is fully initialized with sets A,B,Cùê¥ùêµùê∂A,B,Citalic_A , italic_B , italic_C.\n\nn‚Å¢(A‚à©B)ùëõùê¥ùêµn(A\\cap B)italic_n ( italic_A ‚à© italic_B ) is then computed, such that Ansuperscriptùê¥ùëõA^{n}italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT and BnsuperscriptùêµùëõB^{n}italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT are of length nùëõnitalic_n. ùíúùíú\\mathcal{A}caligraphic_A and ‚Ñ¨‚Ñ¨\\mathcal{B}caligraphic_B are also of length nùëõnitalic_n and are further subsets of Aùê¥Aitalic_A and BùêµBitalic_B, only containing elements xùë•xitalic_x and yùë¶yitalic_y, respectively, subset from attributes jùëójitalic_j. Similarly, elements zùëßzitalic_z in ùíûùíû\\mathcal{C}caligraphic_C are subset from the same attributes jùëójitalic_j. ‚Ñãisubscript‚Ñãùëñ\\mathcal{H}_{i}caligraphic_H start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT is then computed from ùíú‚à©‚Ñ¨ùíú‚Ñ¨\\mathcal{A}\\cap\\mathcal{B}caligraphic_A ‚à© caligraphic_B. Finally, ùí¥=‚Ñã‚à©ùíûùí¥‚Ñãùíû\\mathcal{Y}=\\mathcal{H}\\cap\\mathcal{C}caligraphic_Y = caligraphic_H ‚à© caligraphic_C. The following section Subsetting Procedure provides more detail regarding the time-series set approach.\n\n2.3 Subsetting Procedure\n\nRecall from Buffering Procedure that Aùê¥Aitalic_A is a set, and assume aùëéaitalic_a is a positive integer denoting the tuples whose elements x(i,j)subscriptùë•ùëñùëóx_{(i,j)}italic_x start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT at time tùë°titalic_t belong to Aùê¥Aitalic_A, denoted as Aasuperscriptùê¥ùëéA^{a}italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT, such that:\n\nAa={x(i,j)‚Å¢t:for all‚Å¢x‚ààA}superscriptùê¥ùëéconditional-setsubscriptùë•ùëñùëóùë°for allùë•ùê¥A^{a}=\\{x_{(i,j)\\,t}:\\text{for all}\\,x\\in A\\}italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT = { italic_x start_POSTSUBSCRIPT ( italic_i , italic_j ) italic_t end_POSTSUBSCRIPT : for all italic_x ‚àà italic_A } (1)\n\nwhen expanded by iùëñiitalic_i:\n\nAa={[x(1,j)‚Å¢tx(2,j)‚Å¢t‚ãÆx(a,j)‚Å¢t]:for allx‚ààA}A^{a}=\\Biggl{\\{}\\begin{bmatrix}x_{(1,j)\\,t}\\\\ x_{(2,j)\\,t}\\\\ \\vdots\\\\ x_{(a,j)\\,t}\\end{bmatrix}:\\text{for all}\\,x\\in A\\Biggl{\\}}italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( 1 , italic_j ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( 2 , italic_j ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL ‚ãÆ end_CELL end_ROW start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( italic_a , italic_j ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : for all italic_x ‚àà italic_A } (2)\n\nand further by jùëójitalic_j:\n\nAa={[x(i,j=1,2,‚Ä¶,m)‚Å£t]:for allx‚ààA}A^{a}=\\bigl{\\{}\\begin{bmatrix}x_{(i,j=1,2,\\ldots,m)\\,t}\\\\ \\end{bmatrix}:\\text{for all}\\,x\\in A\\bigl{\\}}italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( italic_i , italic_j = 1 , 2 , ‚Ä¶ , italic_m ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : for all italic_x ‚àà italic_A } (3)\n\nwhere:\n\ni=indexj=attributeùëñindexùëóattribute\\begin{split}i&=\\text{index}\\\\ j&=\\text{attribute}\\\\ \\end{split}start_ROW start_CELL italic_i end_CELL start_CELL = index end_CELL end_ROW start_ROW start_CELL italic_j end_CELL start_CELL = attribute end_CELL end_ROW (4)\n\nand mùëömitalic_m is a positive integer denoting the attribute size.\n\nSimilarly, BùêµBitalic_B is a set, and bùëèbitalic_b is a positive integer denoting the tuples whose elements y(i,j)subscriptùë¶ùëñùëóy_{(i,j)}italic_y start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT at time t+hùë°‚Ñét+hitalic_t + italic_h belong to BùêµBitalic_B, denoted as BbsuperscriptùêµùëèB^{b}italic_B start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT, such that:\n\nBb={y(i,j)‚Å¢t+h:for all‚Å¢y‚ààB}superscriptùêµùëèconditional-setsubscriptùë¶ùëñùëóùë°‚Ñéfor allùë¶ùêµB^{b}=\\{y_{(i,j)\\,t+h}:\\text{for all}\\,y\\in B\\}italic_B start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT = { italic_y start_POSTSUBSCRIPT ( italic_i , italic_j ) italic_t + italic_h end_POSTSUBSCRIPT : for all italic_y ‚àà italic_B } (5)\n\nwhere:\n\nh=time-horizon‚Ñétime-horizon\\begin{split}h&=\\text{time-horizon}\\\\ \\end{split}start_ROW start_CELL italic_h end_CELL start_CELL = time-horizon end_CELL end_ROW (6)\n\nThe intersection of Aasuperscriptùê¥ùëéA^{a}italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT and BbsuperscriptùêµùëèB^{b}italic_B start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT is then computed as:\n\nn‚Å¢(Aa‚à©Bb)=Aa‚à©Bbùëõsuperscriptùê¥ùëésuperscriptùêµùëèsuperscriptùê¥ùëésuperscriptùêµùëèn(A^{a}\\cap B^{b})=A^{a}\\cap B^{b}italic_n ( italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT ‚à© italic_B start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT ) = italic_A start_POSTSUPERSCRIPT italic_a end_POSTSUPERSCRIPT ‚à© italic_B start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT (7)\n\nwhere subsets Ansuperscriptùê¥ùëõA^{n}italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT and BnsuperscriptùêµùëõB^{n}italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT now have have equal cardinality and nùëõnitalic_n denotes the equal index length, such that |An|=|Bn|superscriptùê¥ùëõsuperscriptùêµùëõ|A^{n}|=|B^{n}|| italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT | = | italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT |, where:\n\nAn={x(i,j)‚Å¢t:x‚ààA}Bn={y(i,j)‚Å¢t+h:y‚ààB}superscriptùê¥ùëõabsentconditional-setsubscriptùë•ùëñùëóùë°ùë•ùê¥superscriptùêµùëõabsentconditional-setsubscriptùë¶ùëñùëóùë°‚Ñéùë¶ùêµ\\begin{aligned} A^{n}&=\\{x_{(i,j)\\,t}:x\\in A\\}\\\\ \\end{aligned}\\qquad\\begin{aligned} B^{n}&=\\{y_{(i,j)\\,t+h}:y\\in B\\}\\end{aligned}start_ROW start_CELL italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT end_CELL start_CELL = { italic_x start_POSTSUBSCRIPT ( italic_i , italic_j ) italic_t end_POSTSUBSCRIPT : italic_x ‚àà italic_A } end_CELL end_ROW start_ROW start_CELL italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT end_CELL start_CELL = { italic_y start_POSTSUBSCRIPT ( italic_i , italic_j ) italic_t + italic_h end_POSTSUBSCRIPT : italic_y ‚àà italic_B } end_CELL end_ROW (8)\n\nwhen expanded by the it‚Å¢hsuperscriptùëñùë°‚Ñéi^{th}italic_i start_POSTSUPERSCRIPT italic_t italic_h end_POSTSUPERSCRIPT index:\n\nAn={[x(1,j)‚Å¢tx(2,j)‚Å¢t‚ãÆx(n,j)‚Å¢t]:x‚ààA}Bn={[y(1,j)‚Å¢t+hy(2,j)‚Å¢t+h‚ãÆy(n,j)‚Å¢t+h]:y‚ààB}\\begin{aligned} A^{n}=\\Biggl{\\{}\\begin{bmatrix}x_{(1,j)\\,t}\\\\ x_{(2,j)\\,t}\\\\ \\vdots\\\\ x_{(n,j)\\,t}\\end{bmatrix}:x\\in A\\Biggl{\\}}\\end{aligned}\\qquad\\begin{aligned} B% ^{n}=\\Biggl{\\{}\\begin{bmatrix}y_{(1,j)\\,t+h}\\\\ y_{(2,j)\\,t+h}\\\\ \\vdots\\\\ y_{(n,j)\\,t+h}\\end{bmatrix}:y\\in B\\Biggl{\\}}\\end{aligned}start_ROW start_CELL italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( 1 , italic_j ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( 2 , italic_j ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL ‚ãÆ end_CELL end_ROW start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( italic_n , italic_j ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_x ‚àà italic_A } end_CELL end_ROW start_ROW start_CELL italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_y start_POSTSUBSCRIPT ( 1 , italic_j ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_y start_POSTSUBSCRIPT ( 2 , italic_j ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL ‚ãÆ end_CELL end_ROW start_ROW start_CELL italic_y start_POSTSUBSCRIPT ( italic_n , italic_j ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_y ‚àà italic_B } end_CELL end_ROW (9)\n\nFurther denoting subsets An‚äÜAbsuperscriptùê¥ùëõsuperscriptùê¥ùëèA^{n}\\subseteq A^{b}italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ‚äÜ italic_A start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT and Bn‚äÜBbsuperscriptùêµùëõsuperscriptùêµùëèB^{n}\\subseteq B^{b}italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT ‚äÜ italic_B start_POSTSUPERSCRIPT italic_b end_POSTSUPERSCRIPT, we have:\n\nùíú={[x(i,j=1,‚Ä¶,5)‚Å£t]:x‚ààAn}‚Ñ¨={[y(i,j=1,‚Ä¶,5)‚Å£t+h]:y‚ààBn}\\begin{aligned} \\mathcal{A}&=\\bigl{\\{}\\begin{bmatrix}x_{(i,j=1,\\ldots,5)\\,t}\\\\ \\end{bmatrix}:x\\in A^{n}\\bigl{\\}}\\end{aligned}\\qquad\\begin{aligned} \\mathcal{B% }&=\\bigl{\\{}\\begin{bmatrix}y_{(i,j=1,\\ldots,5)\\,t+h}\\\\ \\end{bmatrix}:y\\in B^{n}\\bigl{\\}}\\end{aligned}start_ROW start_CELL caligraphic_A end_CELL start_CELL = { [ start_ARG start_ROW start_CELL italic_x start_POSTSUBSCRIPT ( italic_i , italic_j = 1 , ‚Ä¶ , 5 ) italic_t end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_x ‚àà italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } end_CELL end_ROW start_ROW start_CELL caligraphic_B end_CELL start_CELL = { [ start_ARG start_ROW start_CELL italic_y start_POSTSUBSCRIPT ( italic_i , italic_j = 1 , ‚Ä¶ , 5 ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_y ‚àà italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT } end_CELL end_ROW (10)\n\nso that attributes j=1,‚Ä¶,5ùëó1‚Ä¶5j=1,\\ldots,5italic_j = 1 , ‚Ä¶ , 5 in subsets Ansuperscriptùê¥ùëõA^{n}italic_A start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT and BnsuperscriptùêµùëõB^{n}italic_B start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT are referred to directly as ùíúùíú\\mathcal{A}caligraphic_A and ‚Ñ¨‚Ñ¨\\mathcal{B}caligraphic_B from tùë°titalic_t to t+hùë°‚Ñét+hitalic_t + italic_h, respectively, and where j=1,‚Ä¶,5ùëó1‚Ä¶5j=1,\\ldots,5italic_j = 1 , ‚Ä¶ , 5 is:\n\n1=vehicle_id2=route_id3=trip_id4=latitude5=longitude1vehicle_id2route_id3trip_id4latitude5longitude\\begin{split}1&=\\texttt{vehicle\\_id}\\\\ 2&=\\texttt{route\\_id}\\\\ 3&=\\texttt{trip\\_id}\\\\ 4&=\\texttt{latitude}\\\\ 5&=\\texttt{longitude}\\end{split}start_ROW start_CELL 1 end_CELL start_CELL = vehicle_id end_CELL end_ROW start_ROW start_CELL 2 end_CELL start_CELL = route_id end_CELL end_ROW start_ROW start_CELL 3 end_CELL start_CELL = trip_id end_CELL end_ROW start_ROW start_CELL 4 end_CELL start_CELL = latitude end_CELL end_ROW start_ROW start_CELL 5 end_CELL start_CELL = longitude end_CELL end_ROW (11)\n\nNext, the subset ‚Ñã‚Ñã\\mathcal{H}caligraphic_H is computed as the intersection of ùíúùíú\\mathcal{A}caligraphic_A and ‚Ñ¨‚Ñ¨\\mathcal{B}caligraphic_B, where ‚Ñã‚äÜùíú‚Ñãùíú\\mathcal{H}\\subseteq\\mathcal{A}caligraphic_H ‚äÜ caligraphic_A and ‚Ñã‚äÜ‚Ñ¨‚Ñã‚Ñ¨\\mathcal{H}\\subseteq\\mathcal{B}caligraphic_H ‚äÜ caligraphic_B, whose elements w(i,j)subscriptùë§ùëñùëów_{(i,j)}italic_w start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT at time t+hùë°‚Ñét+hitalic_t + italic_h belong to ‚Ñã‚Ñã\\mathcal{H}caligraphic_H, such that:\n\n‚Ñã={[w(i;j)‚Å¢t+h]:w‚ààùíú‚à©‚Ñ¨}‚Ñãconditional-setmatrixsubscriptùë§ùëñùëóùë°‚Ñéùë§ùíú‚Ñ¨\\mathcal{H}=\\bigl{\\{}\\begin{bmatrix}w_{(i;j)\\,t+h}\\\\ \\end{bmatrix}:w\\in\\mathcal{A}\\cap\\mathcal{B}\\}caligraphic_H = { [ start_ARG start_ROW start_CELL italic_w start_POSTSUBSCRIPT ( italic_i ; italic_j ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_w ‚àà caligraphic_A ‚à© caligraphic_B } (12)\n\nwhen expanded by both it‚Å¢hsuperscriptùëñùë°‚Ñéi^{th}italic_i start_POSTSUPERSCRIPT italic_t italic_h end_POSTSUPERSCRIPT index and jt‚Å¢hsuperscriptùëóùë°‚Ñéj^{th}italic_j start_POSTSUPERSCRIPT italic_t italic_h end_POSTSUPERSCRIPT attributes:\n\n‚Ñãp={[w(1;j=1,‚Ä¶,5)‚Å£t+hw(2;j=1,‚Ä¶,5)‚Å£t+h‚ãÆw(p;j=1,‚Ä¶,5)‚Å£t+h]:w‚ààùíú‚à©‚Ñ¨}\\mathcal{H}^{p}=\\Biggl{\\{}\\begin{bmatrix}w_{(1;\\,j=1,\\ldots,5)\\,t+h}\\\\ w_{(2;\\,j=1,\\ldots,5)\\,t+h}\\\\ \\vdots\\\\ w_{(p;\\,j=1,\\ldots,5)\\,t+h}\\end{bmatrix}:w\\in\\mathcal{A}\\cap\\mathcal{B}\\Biggl{\\}}caligraphic_H start_POSTSUPERSCRIPT italic_p end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_w start_POSTSUBSCRIPT ( 1 ; italic_j = 1 , ‚Ä¶ , 5 ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_w start_POSTSUBSCRIPT ( 2 ; italic_j = 1 , ‚Ä¶ , 5 ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL ‚ãÆ end_CELL end_ROW start_ROW start_CELL italic_w start_POSTSUBSCRIPT ( italic_p ; italic_j = 1 , ‚Ä¶ , 5 ) italic_t + italic_h end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_w ‚àà caligraphic_A ‚à© caligraphic_B } (13)\n\nIt is important to highlight that the subset ‚Ñã‚Ñã\\mathcal{H}caligraphic_H is treated as a special case whose elements w(i,j)subscriptùë§ùëñùëów_{(i,j)}italic_w start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT can remain in the subset throughout any sequence of time-steps and is appended as ‚Ñãisubscript‚Ñãùëñ\\mathcal{H}_{i}caligraphic_H start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT to length ‚Ñãpsuperscript‚Ñãùëù\\mathcal{H}^{p}caligraphic_H start_POSTSUPERSCRIPT italic_p end_POSTSUPERSCRIPT. This differs from ùíúùíú\\mathcal{A}caligraphic_A and ‚Ñ¨‚Ñ¨\\mathcal{B}caligraphic_B whose elements can change at every time-step.\n\nSimilar to original sets Aùê¥Aitalic_A and BùêµBitalic_B, let Cùê∂Citalic_C be a set, and cùëêcitalic_c be a positive integer denoting the tuples whose elements z(i,j)subscriptùëßùëñùëóz_{(i,j)}italic_z start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT at time t+h+1ùë°‚Ñé1t+h+1italic_t + italic_h + 1 belong to set Cùê∂Citalic_C, denoted as Ccsuperscriptùê∂ùëêC^{c}italic_C start_POSTSUPERSCRIPT italic_c end_POSTSUPERSCRIPT. This differs from the convention that cùëêcitalic_c is the complement, such that:\n\nCc={z(i,j)‚Å¢t+h+1:for all‚Å¢z‚ààC}superscriptùê∂ùëêconditional-setsubscriptùëßùëñùëóùë°‚Ñé1for allùëßùê∂C^{c}=\\{z_{(i,j)\\,t+h+1}:\\text{for all}\\,z\\in C\\}italic_C start_POSTSUPERSCRIPT italic_c end_POSTSUPERSCRIPT = { italic_z start_POSTSUBSCRIPT ( italic_i , italic_j ) italic_t + italic_h + 1 end_POSTSUBSCRIPT : for all italic_z ‚àà italic_C } (14)\n\nwhen expanded by the it‚Å¢hsuperscriptùëñùë°‚Ñéi^{th}italic_i start_POSTSUPERSCRIPT italic_t italic_h end_POSTSUPERSCRIPT index:\n\nCc={[z(1,j)‚Å¢t+h+1z(2,j)‚Å¢t+h+1‚ãÆz(c,j)‚Å¢t+h+1]:for allz‚ààC}C^{c}=\\Biggl{\\{}\\begin{bmatrix}z_{(1,j)\\,t+h+1}\\\\ z_{(2,j)\\,t+h+1}\\\\ \\vdots\\\\ z_{(c,j)\\,t+h+1}\\end{bmatrix}:\\text{for all}\\,z\\in C\\Biggl{\\}}italic_C start_POSTSUPERSCRIPT italic_c end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_z start_POSTSUBSCRIPT ( 1 , italic_j ) italic_t + italic_h + 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUBSCRIPT ( 2 , italic_j ) italic_t + italic_h + 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL ‚ãÆ end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUBSCRIPT ( italic_c , italic_j ) italic_t + italic_h + 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : for all italic_z ‚àà italic_C } (15)\n\nTo match the attributes in set Cùê∂Citalic_C to those found in subsets ùíúùíú\\mathcal{A}caligraphic_A and ‚Ñ¨‚Ñ¨\\mathcal{B}caligraphic_B, let the following be true:\n\nùíûùíû\\displaystyle\\mathcal{C}caligraphic_C ={[(i,j=1,‚Ä¶,5)‚Å£t+h+1]:z‚ààC}\\displaystyle=\\bigl{\\{}\\begin{bmatrix}{}_{(i,j=1,\\ldots,5)\\,t+h+1}\\\\ \\end{bmatrix}:z\\in C\\bigl{\\}}= { [ start_ARG start_ROW start_CELL start_FLOATSUBSCRIPT ( italic_i , italic_j = 1 , ‚Ä¶ , 5 ) italic_t + italic_h + 1 end_FLOATSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_z ‚àà italic_C } (16)\n\nso that attributes j=1,‚Ä¶,5ùëó1‚Ä¶5j=1,\\ldots,5italic_j = 1 , ‚Ä¶ , 5 in set Cùê∂Citalic_C are referred to directly as subset ùíûùíû\\mathcal{C}caligraphic_C at time t+h+1ùë°‚Ñé1t+h+1italic_t + italic_h + 1. Next, the intersection of ùíûùíû\\mathcal{C}caligraphic_C and ‚Ñã‚Ñã\\mathcal{H}caligraphic_H is computed, where:\n\nùí¥=ùíû‚à©‚Ñãùí¥ùíû‚Ñã\\mathcal{Y}=\\mathcal{C}\\cap\\mathcal{H}caligraphic_Y = caligraphic_C ‚à© caligraphic_H (17)\n\nùí¥ùí¥\\mathcal{Y}caligraphic_Y is now a further subset of ùíûùíû\\mathcal{C}caligraphic_C and ‚Ñã‚Ñã\\mathcal{H}caligraphic_H, ùí¥‚äÜùíûùí¥ùíû\\mathcal{Y}\\subseteq\\mathcal{C}caligraphic_Y ‚äÜ caligraphic_C and ùí¥‚äÜ‚Ñãùí¥‚Ñã\\mathcal{Y}\\subseteq\\mathcal{H}caligraphic_Y ‚äÜ caligraphic_H, whose elements v(i,j)subscriptùë£ùëñùëóv_{(i,j)}italic_v start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT at time TùëáTitalic_T belong to ùí¥ùí¥\\mathcal{Y}caligraphic_Y, such that:\n\nùí¥={[v(i;j)‚Å¢T]:v‚ààùíû‚à©‚Ñã}ùí¥conditional-setmatrixsubscriptùë£ùëñùëóùëáùë£ùíû‚Ñã\\mathcal{Y}=\\bigl{\\{}\\begin{bmatrix}v_{(i;j)\\,T}\\\\ \\end{bmatrix}:v\\in\\mathcal{C}\\cap\\mathcal{H}\\}caligraphic_Y = { [ start_ARG start_ROW start_CELL italic_v start_POSTSUBSCRIPT ( italic_i ; italic_j ) italic_T end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_v ‚àà caligraphic_C ‚à© caligraphic_H } (18)\n\nwhen expanded by both it‚Å¢hsuperscriptùëñùë°‚Ñéi^{th}italic_i start_POSTSUPERSCRIPT italic_t italic_h end_POSTSUPERSCRIPT index and jt‚Å¢hsuperscriptùëóùë°‚Ñéj^{th}italic_j start_POSTSUPERSCRIPT italic_t italic_h end_POSTSUPERSCRIPT attributes:\n\nùí¥k={[v(1,j=1,‚Ä¶,5)‚Å£Tv(2,j=1,‚Ä¶,5)‚Å£T‚ãÆv(k,j=1,‚Ä¶,5)‚Å£T]:v‚ààùíû‚à©‚Ñã}\\mathcal{Y}^{k}=\\Biggl{\\{}\\begin{bmatrix}v_{(1,j=1,\\ldots,5)\\,T}\\\\ v_{(2,j=1,\\ldots,5)\\,T}\\\\ \\vdots\\\\ v_{(k,j=1,\\ldots,5)\\,T}\\end{bmatrix}:v\\in\\mathcal{C}\\cap\\mathcal{H}\\Biggl{\\}}caligraphic_Y start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = { [ start_ARG start_ROW start_CELL italic_v start_POSTSUBSCRIPT ( 1 , italic_j = 1 , ‚Ä¶ , 5 ) italic_T end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_v start_POSTSUBSCRIPT ( 2 , italic_j = 1 , ‚Ä¶ , 5 ) italic_T end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL ‚ãÆ end_CELL end_ROW start_ROW start_CELL italic_v start_POSTSUBSCRIPT ( italic_k , italic_j = 1 , ‚Ä¶ , 5 ) italic_T end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] : italic_v ‚àà caligraphic_C ‚à© caligraphic_H } (19)\n\nNote that the subset ùí¥ùí¥\\mathcal{Y}caligraphic_Y is also treated as a special case whose elements v(i,j)subscriptùë£ùëñùëóv_{(i,j)}italic_v start_POSTSUBSCRIPT ( italic_i , italic_j ) end_POSTSUBSCRIPT can remain in the subset throughout any sequence of time-steps. However, it is not appended, as it is the final subset of length ùí¥ksuperscriptùí¥ùëò\\mathcal{Y}^{k}caligraphic_Y start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT. As the final output, ùí¥ùí¥\\mathcal{Y}caligraphic_Y resolves this series of expressions describing the subsetting procedure. The following section Computational Procedure describes its parameters and how it‚Äôs computed.\n\n2.4 Computational Procedure\n\nCombining Buffering Procedure and Subsetting Procedure, Algorithm 1 GRD-TRT-BUF-4I (‚ÄúGround Truth Buffer for Idling\") casts them into step-by-step instructions for computing realtime idling events. There are three parameters:\n\n1.\n\nrùëüritalic_r: the rate at which GTFS Realtime server requests are made (seconds). It is a positive integer. rùëüritalic_r has a default value of 30 seconds and should not exceed the rate limit of any GTFS Realtime server. It is recommended that rùëüritalic_r not take values less than the frequency of vehicle location updates, which are typically updated every 30 seconds.\n\n2.\n\nh‚Ñéhitalic_h: the number of time-steps tùë°titalic_t after an idling event is measured (interval). It is a positive integer. h‚Ñéhitalic_h has a default value of 1. In the case that the default value of rùëüritalic_r remains unchanged, any number of seconds beyond 60 seconds is recorded as an idling event. Alternatively, specifying h‚Ñéhitalic_h as 2 would consider an idling event any number of seconds beyond 90 seconds, all else equal.\n\n3.\n\nmùëömitalic_m: a constant used to bound the length of appended subset ‚Ñã‚Ñã\\mathcal{H}caligraphic_H (iterations). It is a positive integer. mùëömitalic_m has an arbitrary default value of 10. It is the maximum allowable iterations that elements z‚àà‚Ñãùëß‚Ñãz\\in\\mathcal{H}italic_z ‚àà caligraphic_H are stored before being omitted when also not found in set ùíûùíû\\mathcal{C}caligraphic_C. In other words, the elements zùëßzitalic_z are removed from the appended set ‚Ñã‚Ñã\\mathcal{H}caligraphic_H after mùëömitalic_m number of iterations they are not within ‚Ñã‚à©C‚Ñãùê∂\\mathcal{H}\\cap Ccaligraphic_H ‚à© italic_C.\n\nAfter rùëüritalic_r, h‚Ñéhitalic_h, and mùëömitalic_m are specified, an infinite loop is conducted outside the process in which Buffering Procedure and Subsetting Procedure are both initialized and computed. Additional instructions in GRD-TRT-BUF-4I from steps 10 to 22 correspond to the subset ‚Ñã‚Ñã\\mathcal{H}caligraphic_H.\n\nFinally, ùí¥ùí¥\\mathcal{Y}caligraphic_Y is computed as the primary output and is immediately returned and stored on disk. The following section System Architecture & Design broadly outlines a collection of components and their relationships in this regard.\n\n2.5 System Architecture & Design\n\n2.5.1 System Architecture\n\nThe system contains the basic functions of Algorithm 1 GRD-TRT-BUF-4I. It is modeled through the Integration Definition for Process Modeling (IDEF0), exhibited in Figure 5. Each component takes an input (left pointer), yields an output (right pointer), and requires a mechanism (bottom pointer). Those that process intermediate results also take control parameters (top pointer).\n\nFirst, the Serve component inputs ‚ÄúFleet‚Äù - the telemetry data collected from the live location of vehicles in the network of urban transit bus fleets. It outputs ‚ÄúFeedisubscriptFeedùëñ\\text{Feed}_{i}Feed start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT‚Äù, the GTFS Realtime feeds, and requires the open internet or ‚ÄúWeb‚Äù as a mechanism. Note that this process is modeled for architectural context, where no explicit controls are required.\n\nThe Extract component inputs the GTFS Realtime sources, FeedisubscriptFeedùëñ\\text{Feed}_{i}Feed start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT and outputs the extracted data disubscriptùëëùëñd_{i}italic_d start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT, requiring an API key(s) or ‚ÄúKey‚Äù as a mechanism to authorize REST API endpoint(s) access where required. The request rate is controlled by rùëüritalic_r, as previously described in Computational Procedure. The purpose of this component is to asynchronously extract GTFS Realtime data.\n\nThe Buffer component inputs extracted data disubscriptùëëùëñd_{i}italic_d start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT and outputs sets Aùê¥Aitalic_A, BùêµBitalic_B, Cùê∂Citalic_C taken from buffer indicies d0,dh,subscriptùëë0subscriptùëë‚Ñéd_{0},d_{h},italic_d start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT italic_h end_POSTSUBSCRIPT ,‚Ä¶,dh+1,d_{h+1}, italic_d start_POSTSUBSCRIPT italic_h + 1 end_POSTSUBSCRIPT, respectively. It uses RAM or ‚ÄúMemory‚Äù as a mechanism to store the contents and is controlled by h‚Ñéhitalic_h, as previously described in Computational Procedure. The purpose of this component is to roll the extracted data into and out of memory.\n\nThe Subset component inputs sets Aùê¥Aitalic_A, BùêµBitalic_B, Cùê∂Citalic_C and outputs the realtime idling events ùí¥ùí¥\\mathcal{Y}caligraphic_Y. It uses a series of set operations or ‚ÄúOperators‚Äù as a mechanism, and is controlled by mùëömitalic_m, as previously described in Computational Procedure. The purpose of this component is to compute the primary logic of Algorithm 1 GRD-TRT-BUF-4I.\n\nFinally, the Store component inputs the realtime idling events ùí¥ùí¥\\mathcal{Y}caligraphic_Y and outputs them as historical information ‚ÄúData‚Äù. It uses a database or ‚ÄúDisk‚Äù as a mechanism. The purpose of this component is to capture the historical record of realtime idling events so that they can be queried in downstream analyses. No explicit controls are required.\n\n2.5.2 System Design\n\nThe system design implements a more detailed construction of the System Architecture. It casts the IDEF0 architecture into a common Extract, Transform, Load (ETL) microservice design pattern based on geographic region (US East ‚Ä¢, US West ‚Ä¢, etc.), exhibited in Figure 6. The system uses templated ETL pipelines per region, where each microservice corresponds to the ETL phase that it is nested within. Each microservice is then duplicated an arbitrary number of times, increasing redundancy to avoid single points of failure.\n\nFor each geographic region (Region 1, Region 2, ‚Ä¶‚Ä¶...‚Ä¶, Region NùëÅNitalic_N), the Extract phase asynchronously extracts data from the associated GTFS Realtime servers (Server 1, Server 2, ‚Ä¶‚Ä¶...‚Ä¶, Server nùëõnitalic_n), previously outlined in System Architecture. The Transform phase then computes GRD-TRT-BUF-4I from the extracted data, as previously mentioned in Computational Procedure. Finally, the Load phase uses the ‚ÄúWrite‚Äù microservices to insert the realtime idling event data into the Events table within the ‚ÄúStore‚Äù microservice.\n\nModular decoupling of components into microservices allows users to directly access any phase of the ETL pipeline throughout any and all geographic regions. The design not only allows this, but strongly encourages it. To use the realtime idling event data, users access the ‚ÄúSubset‚Äù microservice directly, rather than through ‚ÄúWrite‚Äù or ‚ÄúStore‚Äù. This is achieved through the Subset API‚Äôs and is explained later in Usage Notes.\n\nNote that while casting the IDEF0 architecture into an ETL microservice design, the ‚ÄúBuffer‚Äù components are integrated within the ‚ÄúSubset‚Äù microservices along with parameters r, h, and m as a practical design choice. The ‚ÄúWrite‚Äù microservices are introduced to appropriately decouple their associated function per geographic region, whereas the alternative would require a tightly coupled design with either ‚ÄúSubset‚Äù or ‚ÄúStore‚Äù. In addition, the Agency table is persisted within ‚ÄúStore‚Äù and is explained in the following section Data Records.\n\n3 Data Records\n\nThere are three ways to use the data. The first is through the Realtime Responses. The second is through a historical record of realtime responses in the Relational Database. The third is through the Static Files queried from the Relational Database.\n\n3.1 Realtime Responses\n\nThe realtime responses are JavaScript Object Notation (JSON) objects generated by the Subset microservice. Connecting to any of the Subset API‚Äôs requires access to the region‚Äôs REST API endpoint via Websocket. This is explained later in Usage Notes.\n\nThe JSON response will typically contain an array of key-value pairs. In the rare case that no idling events are detected, an empty response is returned without error. A typical JSON response contains eight keys: iata_id, vehicle_id, route_id, trip_id, latitude, longitude, datetime, and duration.\n\nThe JSON keys are equivalent to the fields found in Events Table. Each field is described in Table 15 in the following section Relational Database. An example of a typical JSON response is exhibited in Figure 7. Recall that this is ùí¥ùí¥\\mathcal{Y}caligraphic_Y from Subsetting Procedure.\n\n3.3 Static Files\n\nThere are three static files that can be downloaded in Comma Separated Value (.csv) format. Each file is a result from a table join between the Agency table and the Events table. Static files contain all fields found in both tables over a 24-hour collection period. The first file test-data-a.csv was collected from December 31, 2023 00:01:30 UTC to January 1, 2024 00:01:30 UTC. The second file test-data-b.csv was collected from January 4, 2024 01:30:30 UTC to January 5, 2024 01:30:30 UTC. The third file test-data-c.csv was collected from January 10, 2024 16:05:30 UTC to January 11, 2024 16:05:30 UTC. They can be downloaded at: https://doi.org/10.6084/m9.figshare.25224224\n\nFigure 9 exhibits the query used to create the first static file from the relational database, previously mentioned in Relational Database. The subsequent files were created using this query corresponding to their respective datetime ranges. Table 17 provides a truncated example of the files. Again, they can be downloaded in .csv format. They are the same .csv files used for evaluating data quality in the following section Technical Validation.\n\n4 Technical Validation\n\nRealtime data quality was assessed using three separate 24-hour validation periods. As previously mentioned in Static Files, the first was conducted from December 31, 2023 00:01:30 UTC to January 1, 2024 00:01:30 UTC using test-data-a.csv. The second from January 4, 2024 01:30:30 UTC to January 5, 2024 01:30:30 UTC using test-data-b.csv. The third from January 10, 2024 16:05:30 UTC to January 11, 2024 16:05:30 UTC using test-data-c.csv.\n\nAll three validation periods were arbitrarily specified and enforced a 72-hour minimum resting period to proxy independence. A battery of 113 individual tests were conducted for each 24-hour validation period to ensure realtime data quality throughout six overlapping categories: Data Types, Duplication, Missingness, Geolocation Error, Temporal Contiguity, and Expected Duration. Each category and its corresponding tests are explained in greater detail below.\n\n4.1 Data Types\n\nAll data type test results were as expected for all validation periods. Exhibited in Table 18, test number 1 found the expected data object. Test numbers 2 to 7 found obvious string types - tests 8 to 10, also string types. Note that vehicle_id, route_id, and trip_id contained numerical values in some cases, but were found to be correctly encoded as string types. Geocoordinates from test numbers 12 and 13 were correctly encoded as float types. Test number 13 for datetime was correctly encoded as an integer type, as well as duration as an integer type in test number 14.\n\n4.2 Duplication\n\nOf the 192,237 observations in test-data-a.csv, 197,411 observations in test-data-b.csv, and 209,329 observations in test-data-c.csv, none of them contained duplicate observations, nor did they contain duplicate fields. Although Data Types previously implied that all validation periods contained the same unique fields, Table 19 exhibits this explicitly from the results of test number 15. In addition to all unique fields, test number 16 found all unique observations.\n\n4.3 Missingness\n\nTwo of thirteen fields contained missing values across all validation periods. In Table 20, test number 24 found that route_id averaged (unweighted) 7.66% missingness. Test number 25 found that trip_id averaged (unweighted) 1.38% missingness. Although both route_id and trip_id contained missing values, when tested together, no missing values were present. Test number 26 found that every observation contained either a route_id or trip_id or both.\n\n4.4 Geolocation Error\n\n4.4.1 General Error\n\nGeneral geolocation tests did not find any value errors across all validation periods. Table 21 and Table 22 exhibit the test results in the latitude and longitude fields, respectively. Tests 31 to 33 corresponding to latitude and tests 34 to 36 corresponding to longitude, did not find any zero values or those outside the projected bounds of the World Geodetic System 1984 (WGS84). Recall tests 11 and 12 in Data Types, and 27 and 28 in Missingness, also did not contain value errors.\n\n4.4.2 Spatial Point Error\n\nIn addition to the value error tests previously mentioned in General Error, each idling event was tested to ensure the recorded geolocation was within a reasonable proximity to the shape of the corresponding route path. The shape of the route paths and their identifiers were collected from the GTFS static data corresponding to the GTFS Realtime source. The shape of the route paths were used as a geographic benchmark to validate the measured geolocation of a given idling event - anticipating the route_id or trip_id should be geographically near the shape of its corresponding route path. Recall test 26 from Missingness found that every observation contained either a route_id, trip_id, or both.\n\nThe notion of reasonable proximity was operationalized as a distance threshold specified with three primary considerations. First, the width of a typical urban arterial street was used as a tolerable margin of error between approximately 15 to 20 meters throughout varying degrees of urban density [81, 82, 83]. Second, Global Positioning System (GPS) location errors were estimated between 5 to 10 meters, especially in the context of urban environments where buildings, infrastructure, etc. can all obstruct reported vehicle locations [84, 85, 86]. Third, a preliminary test was drawn on a series of distance thresholds that combined the first two considerations and specified its midpoint to ensure that 25 meters was flexible enough to afford meaningful results, as exhibited in Figure 10.\n\n001010101020202020303030304040404050505050606060607070707080808080909090901001001001000010101010202020203030303040404040505050506060606070707070808080809090909010010010010025Distance Threshold Dmsubscriptùê∑ùëöD_{m}italic_D start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT (meters)Average Spatial Point Error (%)Figure 10 (a): test-data-a.csvUnweightedWeighted\n\n001010101020202020303030304040404050505050606060607070707080808080909090901001001001000010101010202020203030303040404040505050506060606070707070808080809090909010010010010025Distance Threshold Dmsubscriptùê∑ùëöD_{m}italic_D start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT (meters)Average Spatial Point Error (%)Figure 10 (b): test-data-b.csvUnweightedWeighted\n\nSpatial point error testing begins with the global distance threshold Dmsubscriptùê∑ùëöD_{m}italic_D start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT specified in meters:\n\nDm=25‚Å¢msubscriptùê∑ùëö25mD_{m}=25\\text{m}italic_D start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT = 25 m (20)\n\nDdsubscriptùê∑ùëëD_{d}italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT is then computed from Dmsubscriptùê∑ùëöD_{m}italic_D start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT by converting meters to degrees, using radians:\n\nDd=degrees/m=1/111.32√ó1000√ócos‚Å°(œï√óœÄ180)subscriptùê∑ùëëdegreesm1111.321000italic-œïùúã180D_{d}=\\text{degrees}/\\text{m}=1/111.32\\times 1000\\times\\cos\\left(\\phi\\times% \\frac{\\pi}{180}\\right)italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT = degrees / m = 1 / 111.32 √ó 1000 √ó roman_cos ( italic_œï √ó divide start_ARG italic_œÄ end_ARG start_ARG 180 end_ARG ) (21)\n\nwhere œïitalic-œï\\phiitalic_œï is the average latitude of a given city in degrees:\n\nœï=1n‚Å¢‚àëi=1nlatitudeiitalic-œï1ùëõsubscriptsuperscriptùëõùëñ1subscriptlatitudeùëñ\\phi=\\frac{1}{n}\\sum^{n}_{i=1}\\text{latitude}_{i}italic_œï = divide start_ARG 1 end_ARG start_ARG italic_n end_ARG ‚àë start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT latitude start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT (22)\n\nA k-Dimensional Tree (K-D Tree) [87] is constructed for the shape of each route path sùë†sitalic_s in the set of all route path shapes SùëÜSitalic_S of a given city, composed of a set of geocoordinates {p1,p2,‚Ä¶,pm}subscriptùëù1subscriptùëù2‚Ä¶subscriptùëùùëö\\{p_{1},p_{2},\\ldots,p_{m}\\}{ italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_p start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT , ‚Ä¶ , italic_p start_POSTSUBSCRIPT italic_m end_POSTSUBSCRIPT }, where each geocoordinate pisubscriptùëùùëñp_{i}italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT contains a tuple (latitudei,longitudei)subscriptlatitudeùëñsubscriptlongitudeùëñ(\\text{latitude}_{i},\\text{longitude}_{i})( latitude start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , longitude start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ), such that:\n\n‚àÄ‚Å¢s‚ààS:K-D Trees=K‚Å¢D‚Å¢T‚Å¢r‚Å¢e‚Å¢e‚Å¢({(latitudei,longitudei)‚à£pi‚ààs}):for-allùë†ùëÜsubscriptK-D Treeùë†ùêæùê∑ùëáùëüùëíùëíconditional-setsubscriptlatitudeùëñsubscriptlongitudeùëñsubscriptùëùùëñùë†\\forall\\text{ }s\\in S:\\text{K-D Tree}_{s}=KDTree(\\{(\\text{latitude}_{i},\\text{% longitude}_{i})\\mid p_{i}\\in s\\})‚àÄ italic_s ‚àà italic_S : K-D Tree start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = italic_K italic_D italic_T italic_r italic_e italic_e ( { ( latitude start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , longitude start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) ‚à£ italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ‚àà italic_s } ) (23)\n\nGiven a set of idling events PùëÉPitalic_P, where each idling event Pj‚ààPsubscriptùëÉùëóùëÉP_{j}\\in Pitalic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ‚àà italic_P contains a tuple (latitudej,longitudej)subscriptlatitudeùëósubscriptlongitudeùëó(\\text{latitude}_{j},\\text{longitude}_{j})( latitude start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , longitude start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ), a given PjsubscriptùëÉùëóP_{j}italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT within Ddsubscriptùê∑ùëëD_{d}italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT of sùë†sitalic_s is computed as:\n\nC‚Å¢(Pj,Dd)=‚àës‚ààS1‚Å¢(d‚Å¢i‚Å¢s‚Å¢t‚Å¢(Pj,s)‚â§Dd)ùê∂subscriptùëÉùëósubscriptùê∑ùëësubscriptùë†ùëÜ1ùëëùëñùë†ùë°subscriptùëÉùëóùë†subscriptùê∑ùëëC(P_{j},D_{d})=\\sum_{s\\in S}\\textbf{1}\\left(dist(P_{j},s)\\leq D_{d}\\right)italic_C ( italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT ) = ‚àë start_POSTSUBSCRIPT italic_s ‚àà italic_S end_POSTSUBSCRIPT 1 ( italic_d italic_i italic_s italic_t ( italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_s ) ‚â§ italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT ) (24)\n\nwhere C‚Å¢(Pj,Dd)ùê∂subscriptùëÉùëósubscriptùê∑ùëëC(P_{j},D_{d})italic_C ( italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT ) is a counter of PjsubscriptùëÉùëóP_{j}italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT and Ddsubscriptùê∑ùëëD_{d}italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT, 1 is an indicator function, and d‚Å¢i‚Å¢s‚Å¢t‚Å¢(Pj,s)ùëëùëñùë†ùë°subscriptùëÉùëóùë†dist(P_{j},s)italic_d italic_i italic_s italic_t ( italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_s ) is the distance between PjsubscriptùëÉùëóP_{j}italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT and sùë†sitalic_s using K-D TreessubscriptK-D Treeùë†\\text{K-D Tree}_{s}K-D Tree start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT.\n\nFinally the spatial point error eùëíeitalic_e is computed as the percentage of idling events PjsubscriptùëÉùëóP_{j}italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT that are outside the bounds of the global distance threshold Ddsubscriptùê∑ùëëD_{d}italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT from all route path shapes SùëÜSitalic_S of a given city:\n\ne=1‚àí(‚àëj=1nC‚Å¢(Pj,Dd)n)ùëí1superscriptsubscriptùëó1ùëõùê∂subscriptùëÉùëósubscriptùê∑ùëëùëõe=1-\\left(\\frac{\\sum_{j=1}^{n}C(P_{j},D_{d})}{n}\\right)italic_e = 1 - ( divide start_ARG ‚àë start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT italic_C ( italic_P start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT , italic_D start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT ) end_ARG start_ARG italic_n end_ARG ) (25)\n\nIf eùëíeitalic_e is 0%, all idling events were within the distance threshold corresponding to the shape of the route path. Any eùëíeitalic_e greater than 0% indicates that there were idling events measured outside of it.\n\nTable 23 exhibits the global average spatial point errors for all validation periods. The reported averages are both weighted and unweighted. Weighted averages are weighted by the number of observations per city, whereas the unweighted averages assign equal weight to all cities within the context of how they are reported, globally or regionally. Table 24 to Table 34 exhibit the test results for individual cities and their regional unweighted and weighted averages.\n\nGlobally, test numbers 37 and 38 found the unweighted and weighted average error did not exceed 6.50% and 5.05%, respectively. That is to say, the global average spatial point accuracy of measured idling events was at least 93.50%. Regionally, test number 52 in Table 25 found that 11.06% was the highest unweighted average error. Test number 67 in Table 27 found that 12.29% was the highest weighted average error. In other words, the average spatial point accuracy of measured idling events for any given region was at least 87.71%.\n\nNote that in Table 31, Table 32, and Table 34, cities without results encountered preliminary test errors. In those cases, identity mappings could not be established between route_id or trip_id and the shape of the corresponding route path, either because of unmatched identifiers or the shape of the corresponding route path was unavailable. In successful preliminary tests, the city is indicated along with the GTFS static data source and the geolocation error.\n\n4.5 Temporal Contiguity\n\nContinuous validity and consistency was globally tested throughout all validation periods. Exhibited in Table 35, test numbers 105 and 106 did not find any invalid values in the datetime field. Test number 107 found the average (unweighted) proportion of time that no observations were measured for longer than 1 minute was 2.75%. Test number 108 found the average (unweighted) longest single interval that no observations were measured was 4 minutes, 24 seconds. Also, in test 109, the average (unweighted) elapsed time from the first observation to the last was 23 hours and 58 minutes within the context of a 24-hour maximum time horizon, exhibited in Figure 11.\n\n4.6 Expected Duration\n\nThe global average idling duration was as expected throughout all validation periods. Exhibited in Table 36, test numbers 110 and 111 did not find any invalid values in the duration field. Test number 112 found when the minimum idling duration was adjusted to a commonly used policy definition longer than 5 minutes [8], the proportion of idling time denominated by total operational time was 38.74%. This is broadly consistent and within the 30% to 44% range from existing studies, previously mentioned in Background & Summary. Figure 12 exhibits this comparison, as well as when the minimum idling tolerance was unadjusted according to the parameterized definition h=1‚Ñé1h=1italic_h = 1 minute.\n\nWhen the minimum idling duration in test number 113 was unadjusted according to h=1‚Ñé1h=1italic_h = 1 minute, the average (unweighted) proportion of idling increased to 56.96%. Although approximately 18% of the average proportion of idling increased as the minimum idling tolerance decreased from 5 minutes to 1 minute, it is concluded that the duration field is still reliable and valid, given its combined consistency with existing studies when adjusted to a common policy definition of idling. The material difference between tests 112 and 113 is likely not a measurement error, but rather a unique feature of this data that warrants further investigation in downstream analyses.\n\n5 Usage Notes\n\nIt is highly encouraged that this realtime data is indeed used in realtime applications and analyses, as well as with historical methods. In doing so, requires a functioning version of the software to be deployed. More information can be found below in Code Availability. In addition, updated versions of the Static Files are available at: https://doi.org/10.6084/m9.figshare.25224224\n\n6 Code Availability\n\nThe repository containing the documentation, source code, configurations, and containers used as a part of this study is freely open and available on Github. The software is periodically maintained at the discretion of the authors and is licensed under General Public License Version 3 (GPLv3). It is available at: https://www.github.com/nickkunz/idling\n\n7 Acknowledgements\n\nWe would like to thank the transit agencies for providing public developer support for GTFS and GTFS Realtime and those that accommodated special requests for enhanced permissions and support during testing and development.\n\nThank you Dr. Mengjie Han at MTC (San Francisco), Andrew Lowe and Dante Avery at Swiftly (L.A., Miami, Tampa), NTA (Dublin), and Trafiklab (Stockholm). Also, thank you Dr. Graeme Troxell for your encouragement and preliminary feedback. This study was supported by Gao Labs and Cornell Systems Engineering.\n\n8 Author Contributions\n\n8.1 Authors and Affiliations\n\nSystems Engineering, Cornell University\n\nNicholas Kunz & H. Oliver Gao\n\n8.2 Contributions\n\nNicholas Kunz developed and implemented the methods, software, documentation, testing, and manuscript. H. Oliver Gao initiated and supervised the development of the investigation, manuscript, and resources for data storage and compute. Both authors collaborated equally to the concept. The authors have agreed to the published version of this manuscript.\n\n9 Competing Interests\n\nThe authors declare no competing interests.\n\n10 Additional Information\n\nCorrespondence and requests for materials should be addressed to Nicholas Kunz.\n\nReferences\n\n[1] Instituto Clima e Sociedade (iCS). Mobilidade de Baixas Emiss√µes, Qualidade do Ar e Transi√ß√£o Energ√©tica no Brasil, 2020.\n\n[2] Environment Council on Energy and Water (CEEW). How India Moves: Sustainable Mobility and Citizen Preferences, 2019.\n\n[3] Ministry of Road Transport and Highways (India). Road Transport Year Book (2019-20), 2019.\n\n[4] National Bureau of Statistics of China (NBS of China). China Statistical Yearbook 2021, 2021.\n\n[5] American Public Transportation Association (APTA). Public Transportation Ridership Report: Quarterly and Annual Totals by Mode, 2023.\n\n[6] American Public Transportation Association (APTA). 2022 Public Transportation Fact Book: Appendix A, 2023.\n\n[7] F. Mulholland, E. & Rodr√≠guez. The rapid deployment of zero-emission buses in Europe, 2022.\n\n[8] U.S. Environmental Protection Agency (EPA). Compilation of State, County and Local Anti-Idling Regulations. Office of Transportation and Air Quality, Transportation and Regional Programs Division, 2006. EPA420-B-06-004, April 2006.\n\n[9] Zhang, C., et.al. Heavy-Duty Vehicle Activity Updates for MOVES Using NREL Fleet DNA and CE-CERT Data, 2022. NREL/TP-5400-79509.\n\n[10] Brightman, T., Girnary, S. & Bhardwa, M. Bus Idling and Emissions, 2010. Version Final 1.0, September 2010.\n\n[11] Park, S. & Jeong, M. H. Development of Transit Bus Idling Control Strategies Using Geospatial Information. Sensors and Materials, 31(10):3383‚Äì3395, 2019.\n\n[12] Ziring, E. & Sriraj, P. S. Mitigating Excessive Idling of Transit Buses. Transportation Research Record, 2143(1):142‚Äì149, 2010.\n\n[13] Smit, R. Motor Vehicle Engine Idling in Australia ‚Äì a critical review and initial assessment, 2020.\n\n[14] U.S. Federal Transit Administration (FTA). Transit Noise and Vibration Impact Assessment Manual, 2018. FTA Report No. 0123.\n\n[15] Khan, A. B. M. S., et.al. Idle emissions from heavy-duty diesel vehicles: review and recent data. Journal of the Air and Waste Management Association, 56(10):1404‚Äì1419, 2006.\n\n[16] U.S. Environmental Protection Agency (EPA). Average In-Use Emissions from Urban Buses and School Buses, 2008. EPA420-F-08-026.\n\n[17] Kagawa, J. Health effects of diesel exhaust emissions‚Äîa mixture of air pollutants of worldwide concern. Toxicology, 181-182:349‚Äì53, 2002.\n\n[18] Ito, Y., et.al. Exposure to nanoparticle-rich diesel exhaust may cause liver damage. Japanese Journal of Hygiene, 66(4):638‚Äì642, 2011.\n\n[19] Al Suleimani, et.al. Effect of diesel exhaust particles on renal vascular responses in rats with chronic kidney disease. Environmental Toxicology, 32(2):541‚Äì549, 2017.\n\n[20] Schipper, L. & Fulton, L. Making Urban Transit Systems Sustainable Around the World: Many Birds with One Bus? Transportation Research Record, 1791(1):44‚Äì50, 2002.\n\n[21] Kujala, R., Weckstrom, C., Darst, R.K., Mladenoviƒá, M.N. & Saram√§ki, J. A collection of public transport network data sets for 25 cities. Nature Scientific Data, 5(1):180089, 2018.\n\n[22] Shan, X., Chen, X., Jia, W. & Ye, J. Evaluating Urban Bus Emission Characteristics Based on Localized MOVES Using Sparse GPS Data in Shanghai, China. Sustainability, 11(10):1‚Äì15, 2019.\n\n[23] Sharma, N., Kumar, P., Dhyani, R., Ravisekhar, C. & Ravinder, K. Idling fuel consumption and emissions of air pollutants at selected signalized intersections in Delhi. Journal of Cleaner Production, 212:8‚Äì21, 2019.\n\n[24] Google. Realtime Transit - Revision history. https://developers.google.com/transit/gtfs-realtime/guides/revision-history, (2023). Accessed: March 6, 2024.\n\n[25] Google. Specification Amendment Process - Revision History. https://gtfs.org/realtime/process/#revision-history, (2020). Accessed: March 6, 2024.\n\n[26] Voulgaris, C. T. & Begwani, C. Predictors of Early Adoption of the General Transit Feed Specification. Findings, January 2023.\n\n[27] Frick, K., Kumar, T. & Post, A. Background Paper: The General Transit Feed Specification (GTFS) Makes Trip-Planning Easier‚ÄîEspecially During a Pandemic‚ÄîYet its Use by California Agencies is Uneven, July 2020.\n\n[28] Google. Protocol Buffers Documentation: Overview. https://protobuf.dev/overview/, (2023). Accessed: March 6, 2024.\n\n[29] Google. Protocol Buffers: Releases. https://github.com/protocolbuffers/protobuf/releases, (2023). Accessed: March 6, 2024.\n\n[30] Wikimedia Commons. Blank Map World Secondary Political Divisions. https://commons.wikimedia.org/w/index.php?title=File%3ABlank_Map_World_Secondary_Political_Divisions.svg&amp;dir=prev#file, (2022). Accessed: March 6, 2024.\n\n[31] Metropolitan Transportation Authority (MTA). GTFS Realtime Support. http://bt.mta.info/wiki/Developers/GTFSRt, (2024). Accessed: March 6, 2024.\n\n[32] Southeastern Pennsylvania Transportation Authority (SEPTA). SEPTA Developers (v1.0.2): Realtime Data. https://www3.septa.org/#/, (2024). Accessed: March 6, 2024.\n\n[33] Washington Metropolitan Area Transit Authority (WMATA). GTFS: Bus RT Vehicle Positions. https://developer.wmata.com/docs/services/gtfs/operations/5cdc52139e0b4de98fdfd54a?, (2024). Accessed: March 6, 2024.\n\n[34] Massachusetts Bay Transportation Authority (MBTA). GTFS-realtime. https://www.mbta.com/developers/gtfs-realtime, (2024). Accessed: [January 22 2024].\n\n[35] Pittsburgh Regional Transit (PRT). Web Developer Resources: General Transit Feed Specification Truetime (GTFS-R). https://www.rideprt.org/business-center/developer-resources/, (2024). Accessed: March 6, 2024.\n\n[36] Los Angeles County Metropolitan Transportation Authority (Metro). Real Time APIs. https://developer.metro.net/api/, (2024). Accessed: March 6, 2024.\n\n[37] Metropolitan Transportation Commission (MTC). Transit Data: List of Bulk Data Feeds - GTFS-Realtime Vehicle Positions. https://511.org/open-data/transit, (2024). Accessed: March 6, 2024.\n\n[38] San Diego Metropolitan Transit System (MTS). Real Time Data: GTFS Realtime Endpoints. https://www.sdmts.com/business-center/app-developers/real-time-data, (2024). Accessed: March 6, 2024.\n\n[39] King County Metro (Metro). Mobile and web apps: Developer resources - Real-time feeds. https://kingcounty.gov/en/dept/metro/rider-tools/mobile-and-web-apps, (2024). Accessed: March 6, 2024.\n\n[40] Sacramento Regional Transit District (SacRT). General Transit Feed Specification: SacRT GTFS-Real-Time (GTFSRT). https://www.sacrt.com/schedules/gtfs.aspx, (2024). Accessed: March 6, 2024.\n\n[41] Tri-County Metropolitan Transportation District of Oregon (TriMet). TriMet Developer Resources: TriMet GTFS-realtime Feeds. https://developer.trimet.org/GTFS.shtml, (2024). Accessed: March 6, 2024.\n\n[42] Metropolitan Atlanta Rapid Transit Authority (MARTA). MARTA Mobile Apps: App Developer Resources - MARTA Bus GTFS-Real-time. https://www.itsmarta.com/app-developer-resources.aspx, (2024). Accessed: March 6, 2024.\n\n[43] Miami-Dade Transit (MDT). Transit Open Data Feeds: Swiftly API Key Access. https://www.miamidade.gov/global/transportation/open-data-feeds.page, (2024). Accessed: March 6, 2024.\n\n[44] Hillsborough Area Regional Transit (HART). HART-GTFS-realtimeGenerator. https://github.com/CUTR-at-USF/HART-GTFS-realtimeGenerator, (2024). Accessed: March 6, 2024.\n\n[45] Transit Authority of River City (TARC). Developers: Real-Time Feeds. https://www.ridetarc.org/developers/, (2024). Accessed: March 6, 2024.\n\n[46] Nashville Metropolitan Transit Authority (Nashville MTA). Data Request Submission: Vehicle Positions. https://www.wegotransit.com/contact-us/data-request-submission/, (2024). Accessed: March 6, 2024.\n\n[47] Metro Transit (Minnesota). Schedule and Realtime Data Feeds: GTFS-realtime data. https://svc.metrotransit.org/, (2024). Accessed: March 6, 2024.\n\n[48] Metro Transit (St. Louis). Developer Resources: Metro Transit ‚Äì St. Louis GTFS Real-time Vehicles Data Feed. https://www.metrostlouis.org/developer-resources/, (2024). Accessed: March 6, 2024.\n\n[49] Metro Transit (Madison). Information for Developers: Metro Transit Open Data - GTFS-RT Vehicle Positions. https://www.cityofmadison.com/metro/business/information-for-developers, (2024). Accessed: March 6, 2024.\n\n[50] Central Ohio Transit Authority (COTA). Data: Realtime Feeds - Vehicle Position Feed. https://www.cota.com/data/, (2024). Accessed: March 6, 2024.\n\n[51] Des Moines Area Regional Transit Authority (DART). Developer Resources: GTFS Data - Vehicle Positions. https://www.ridedart.com/developer-resources, (2024). Accessed: March 6, 2024.\n\n[52] Regional Transportation District (RTD). GTFS Realtime Feeds: RTD GTFS-RT DATA FEED LINKS. https://www.rtd-denver.com/open-records/open-spatial-information/real-time-feeds, (2024). Accessed: March 6, 2024.\n\n[53] Valley Metro Regional Public Transportation Authority (Valley Metro). Valley Metro general-transit-feed-specification (GTFS-RT). https://www.phoenixopendata.com/dataset/general-transit-feed-specification, (2024). Accessed: March 6, 2024.\n\n[54] VIA Metropolitan Transit Authority (VIA Metro). Resources for Developers: GTFSRT ‚Äì Vehicle Positions. https://www.viainfo.net/developers-resources/, (2024). Accessed: March 6, 2024.\n\n[55] Capital Metropolitan Transportation Authority (CapMetro). Texas Open Data Portal: CapMetro Vehicle Positions PB File. https://data.texas.gov/Transportation/CapMetro-Vehicle-Positions-PB-File/eiei-9rpf/about_data, (2024). Accessed: March 6, 2024.\n\n[56] Billings Metropolitan Transit (MET). BUS TRACKER: City of Billings MET Transit | Passio Go! https://www.billingsmt.gov/3042/MET, (2024). Accessed: March 6, 2024.\n\n[57] Soci√©t√© de transport de Montr√©al (STM). Developers: OPEN DATA - GTFS - realtime data (real-time bus schedules and locations) and API i3 (m√©tro, bus and elevators service updates). https://www.stm.info/en/about/developers, (2024). Accessed: March 6, 2024.\n\n[58] York Region Transit (YRT). Open Data: YRT GTFS and real-time GTFS data. https://www.yrt.ca/en/about-us/open-data.aspx, (2024). Accessed: March 6, 2024.\n\n[59] Hamilton Street Railway (HSR). HSR Transit Feed: GTFS (real-time). https://open.hamilton.ca/documents/6eeccf172c824c2db0484aea54ed7fe4/about, (2024). Accessed: March 6, 2024.\n\n[60] Halifax Transit. Open Data Downloads: Transit Real-Time Scheduling Data. https://data-hrm.hub.arcgis.com/pages/open-data-downloads, (2024). Accessed: March 6, 2024.\n\n[61] Thunder Bay Transit. Developers - Open Data: GTFS Real-Time Official Source. https://www.thunderbay.ca/en/city-services/developers---open-data.aspx, (2024). Accessed: March 6, 2024.\n\n[62] TransLink (British Columbia). GTFS Realtime. https://www.translink.ca/about-us/doing-business-with-translink/app-developer-resources/gtfs/gtfs-realtime, (2024). Accessed: March 6, 2024.\n\n[63] Calgary Transit. Calgary Transit Realtime Trip Updates GTFS-RT. https://data.calgary.ca/Transportation-Transit/Calgary-Transit-Realtime-Trip-Updates-GTFS-RT/gs4m-mdc2/data, (2024). Accessed: March 6, 2024.\n\n[64] Edmonton Transit Service (ETS). Real Time Vehicle Position GTFS (PB File). https://data.edmonton.ca/Transit/Real-Time-Vehicle-Position-GTFS-PB-File-/uyt2-vrrn/about_data, (2024). Accessed: March 6, 2024.\n\n[65] Saskatoon Transit. Open Data From Saskatoon Transit: Developer Resources - Saskatoon Transit Real Time Data Feed. https://transit.saskatoon.ca/about-us/open-data-saskatoon-transit, (2024). Accessed: March 6, 2024.\n\n[66] Openbaar Vervoer (OV). OVapi: Index of /nl/ - vehiclePositions.pb. https://gtfs.ovapi.nl/nl/, (2024). Accessed: March 6, 2024.\n\n[67] Storstockholms Lokaltrafik (SL). Realtime Data Specification. https://www.trafiklab.se/api/trafiklab-apis/gtfs-regional/realtime-specification/, (2024). Accessed: March 6, 2024.\n\n[68] Helsingin seudun liikenteen (HSL). HSL Developer Documentation: GTFS-RT feeds. https://hsldevcom.github.io/gtfs_rt/, (2024). Accessed: March 6, 2024.\n\n[69] National Transport Authority. APIs: General Transit Feed Specification - GTFS-Realtime. https://developer.nationaltransport.ie/apis, (2024). Accessed: March 6, 2024.\n\n[70] Azienda Tramvie e Autobus del Comune di Roma (ATAC). Technologies: Rome Mobility Centre - Open data and satellite control of public transport (AVM), GTFS (GENERAL TRANSIT FEED SPECIFICATION). https://romamobilita.it/it/tecnologie, (2024). Accessed: March 6, 2024.\n\n[71] Miasto Sto≈Çeczne Warszawa. GTFS Feeds. https://mkuran.pl/gtfs/, (2024). Accessed: March 6, 2024.\n\n[72] ZarzƒÖd Transportu Publicznego w Krakowie (ZTP). Index of / VehiclePositions_T.pb. https://gtfs.ztp.krakow.pl/, (2024). Accessed: March 6, 2024.\n\n[73] ZarzƒÖdu Transportu Miejskiego w Gda≈Ñsku (ZTM). Dane w formacie GTFS-RT. https://ckan.multimediagdansk.pl/dataset/tristar/resource/976e1fd1-73d9-4237-b6ba-3c06004d1105?inner_span=True, (2024). Accessed: March 6, 2024.\n\n[74] Pra≈æsk√° Integrovan√° Doprava (PID). Open PID Data: DATA SETS - Current vehicle positions, route delays. https://pid.cz/o-systemu/opendata/, (2024). Accessed: March 6, 2024.\n\n[75] Transport for New South Wales (Transport for NSW). Public Transport - Realtime Vehicle Positions v2. https://opendata.transport.nsw.gov.au/dataset/public-transport-realtime-vehicle-positions-v2, (2024). Accessed: March 6, 2024.\n\n[76] Translink (Queensland). Translink GTFS Real-Time Feed. https://translink.com.au/about-translink/open-data/gtfs-rt, (2024). Accessed: March 6, 2024.\n\n[77] Adelaide Metro. Adelaide Metro GTFS - Realtime API (v1): gtfsr. https://gtfs.adelaidemetro.com.au/, (2024). Accessed: March 6, 2024.\n\n[78] Auckland Transport (AT). Getting Started with the Realtime API. https://dev-portal.at.govt.nz/realtime-api, (2024). Accessed: March 6, 2024.\n\n[79] Environment Canterbury (ECan). GTFS Realtime Service (v1): Vehicle Positions. https://apidevelopers.metroinfo.co.nz/api-details#api=gtfs-realtime-service&operation=vehicle-positions, (2024). Accessed: March 6, 2024.\n\n[80] Delhi Transport Corporation (DTC). Documentation: General Transit Feed Specification - GTFS. https://otd.delhi.gov.in/documentation/, (2024). Accessed: March 6, 2024.\n\n[81] American Association of State Highway and Transportation Officials. A Policy on Geometric Design of Highways and Streets. American Association of State Highway and Transportation Officials, Washington, D.C., 7th edition, 2018.\n\n[82] National Association of City Transportation Officials. Urban Street Design Guide, 2012.\n\n[83] Southworth, M. & Ben-Joseph, E. Street Standards and the Shaping of Suburbia. Journal of the American Planning Association, 61(1):65‚Äì81, 1995.\n\n[84] Merry, K. & Bettinger, P. Smartphone GPS accuracy study in an urban environment. PLoS ONE, 14(7):e0219890, 2019.\n\n[85] Beekhuizen, J., Kromhout, H., Huss, A. & Vermeulen, R. Performance of GPS-devices for environmental exposure assessment. Journal of Exposure Science and Environmental Epidemiology, 23:498‚Äì505, 2013.\n\n[86] van Diggelen, F. & Enge, P. The World‚Äôs first GPS MOOC and Worldwide Laboratory using Smartphones. In Proceedings of the 28th International Technical Meeting of the Satellite Division of The Institute of Navigation (ION GNSS+ 2015), pages 361‚Äì369, Tampa, Florida, United States, 2015.\n\n[87] Friedman, J.H., Bentley, J.L. & Finkel, R.A. An Algorithm for Finding Best Matches in Logarithmic Expected Time. ACM Transactions on Mathematical Software, 3(3):209‚Äì226, 1977.\n\n[88] Metropolitan Transportation Authority (MTA). Developer resources: Static GTFS data - Buses. https://new.mta.info/developers, (2024). Accessed: March 6, 2024.\n\n[89] Southeastern Pennsylvania Transportation Authority (SEPTA). SEPTA Developers (v1.0.2): Static Data. https://www3.septa.org/#/, (2024). Accessed: [January 222, 2024].\n\n[90] Washington Metropolitan Area Transit Authority (WMATA). GTFS: Bus GTFS Static. https://developer.wmata.com/docs/services/gtfs/operations/bus-gtfs-static, (2024). Accessed: March 6, 2024.\n\n[91] Massachusetts Bay Transportation Authority (MBTA). GTFS. https://www.mbta.com/developers/gtfs, (2024). Accessed: March 6, 2024.\n\n[92] Pittsburgh Regional Transit (PRT). Web Developer Resources: General Transit Feed Specification (GTFS). https://www.rideprt.org/business-center/developer-resources/, (2024). Accessed: March 6, 2024.\n\n[93] Los Angeles County Metropolitan Transportation Authority (Metro). LA Metro Bus GTFS. https://gitlab.com/LACMTA/gtfs_bus, (2024). Accessed: March 6, 2024.\n\n[94] Metropolitan Transportation Commission (MTC). Transit Data: List of Bulk Data Feeds - GTFS Feed Download. https://511.org/open-data/transit, (2024). Accessed: March 6, 2024.\n\n[95] San Diego Metropolitan Transit System (MTS). App Developers: Scheduling Data (static). https://www.sdmts.com/business-center/app-developers, (2024). Accessed: March 6, 2024.\n\n[96] King County Metro (Metro). Mobile and web apps: Developer resources - GTFS Feed. https://kingcounty.gov/en/dept/metro/rider-tools/mobile-and-web-apps, (2024). Accessed: March 6, 2024.\n\n[97] Sacramento Regional Transit District (SacRT). General Transit Feed Specification. https://www.sacrt.com/schedules/gtfs.aspx, (2024). Accessed: March 6, 2024.\n\n[98] Tri-County Metropolitan Transportation District of Oregon (TriMet). TriMet Developer Resources: GENERAL TRANSIT FEED SPECIFICATION. https://developer.trimet.org/GTFS.shtml, (2024). Accessed: March 6, 2024.\n\n[99] Metropolitan Atlanta Rapid Transit Authority (MARTA). MARTA Mobile Apps: App Developer Resources - General Transit Feed Specification. https://www.itsmarta.com/app-developer-resources.aspx, (2024). Accessed: March 6, 2024.\n\n[100] Miami-Dade Transit (MDT). Transit Open Data Feeds: General Transit Feed Specification (GTFS). https://www.miamidade.gov/global/transportation/open-data-feeds.page, (2024). Accessed: March 6, 2024.\n\n[101] Hillsborough Area Regional Transit (HART). HART-GTFS. http://www.gohart.org/google/google_transit.zip, (2024). Accessed: March 6, 2024.\n\n[102] Transit Authority of River City (TARC). Developers: GTFS Files. https://www.ridetarc.org/developers/, (2024). Accessed: March 6, 2024.\n\n[103] Nashville Metropolitan Transit Authority (Nashville MTA). Data Request Submission: GTFS DATA. https://www.wegotransit.com/contact-us/data-request-submission/, (2024). Accessed: March 6, 2024.\n\n[104] Metro Transit (Minnesota). Schedule and Realtime Data Feeds: Static schedule data. https://svc.metrotransit.org/, (2024). Accessed: March 6, 2024.\n\n[105] Metro Transit (St. Louis). Developer Resources: Metro Transit ‚Äì St. Louis GTFS Data Feed. https://www.metrostlouis.org/developer-resources/, (2024). Accessed: March 6, 2024.\n\n[106] Metro Transit (Madison). Information for Developers: Metro Transit Open Data - GTFS Schedule Data. https://www.cityofmadison.com/metro/business/information-for-developers, (2024). Accessed: March 6, 2024.\n\n[107] Central Ohio Transit Authority (COTA). Data: Realtime Feeds - GTFS Static Feed. https://www.cota.com/data/, (2024). Accessed: March 6, 2024.\n\n[108] Des Moines Area Regional Transit Authority (DART). Developer Resources: GTFS Data - Route Data. https://www.ridedart.com/developer-resources, (2024). Accessed: March 6, 2024.\n\n[109] Regional Transportation District (RTD). GTFS Realtime Feeds: GTFS Schedule Dataset. https://www.rtd-denver.com/open-records/open-spatial-information/real-time-feeds, (2024). Accessed: March 6, 2024.\n\n[110] Valley Metro Regional Public Transportation Authority (Valley Metro). Valley Metro Bus Schedule. https://www.phoenixopendata.com/dataset/valley-metro-bus-schedule, (2024). Accessed: March 6, 2024.\n\n[111] VIA Metropolitan Transit Authority (VIA Metro). Resources for Developers: VIA schedule data in GTFS format. https://www.viainfo.net/developers-resources/, (2024). Accessed: March 6, 2024.\n\n[112] Capital Metropolitan Transportation Authority (CapMetro). Texas Open Data Portal: CapMetro GTFS. https://data.texas.gov/See-Category-Tile/CapMetro-GTFS/r4v4-vz24/about_data, (2024). Accessed: March 6, 2024.\n\n[113] Billings Metropolitan Transit (MET). BUS TRACKER: City of Billings MET Transit | Passio Go! - Routes. https://www.billingsmt.gov/3042/MET, (2024). Accessed: March 6, 2024.\n\n[114] Soci√©t√© de transport de Montr√©al (STM). Developers: OPEN DATA - GTFS data (bus schedules and m√©tro frequency). https://www.stm.info/en/about/developers, (2024). Accessed: March 6, 2024.\n\n[115] Hamilton Street Railway (HSR). HSR Transit Feed: GTFS. https://open.hamilton.ca/documents/6eeccf172c824c2db0484aea54ed7fe4/about, (2024). Accessed: March 6, 2024.\n\n[116] Halifax Transit. Open Data Downloads: Transit Static Scheduling Data. https://data-hrm.hub.arcgis.com/pages/open-data-downloads, (2024). Accessed: March 6, 2024.\n\n[117] Thunder Bay Transit. Developers - Open Data: GTFS (Google Transit) Official Source. https://www.thunderbay.ca/en/city-services/developers---open-data.aspx, (2024). Accessed: March 6, 2024.\n\n[118] TransLink (British Columbia). GTFS Static Data. https://www.translink.ca/about-us/doing-business-with-translink/app-developer-resources/gtfs/gtfs-data, (2024). Accessed: March 6, 2024.\n\n[119] Calgary Transit. Calgary Transit Scheduling Data. https://data.calgary.ca/Transportation-Transit/Calgary-Transit-Scheduling-Data/npk7-z3bj/about_data, (2024). Accessed: March 6, 2024.\n\n[120] Edmonton Transit Service (ETS). ETS Bus Schedule GTFS Data Schedules - zipped files. https://data.edmonton.ca/Transit/ETS-Bus-Schedule-GTFS-Data-Schedules-zipped-files/urjq-fvmq/about_data, (2024). Accessed: March 6, 2024.\n\n[121] Saskatoon Transit. Open Data From Saskatoon Transit: Developer Resources - GTFS Data Downloads. https://transit.saskatoon.ca/about-us/open-data-saskatoon-transit, (2024). Accessed: March 6, 2024.\n\n[122] Openbaar Vervoer (OV). OVapi: Index of /nl/ - gtfs-nl.zip. https://gtfs.ovapi.nl/nl/, (2024). Accessed: March 6, 2024.\n\n[123] Helsingin seudun liikenteen (HSL). Open data: Distribution channels - Public transport network and timetables (GTFS). https://www.hsl.fi/en/hsl/open-data, (2024). Accessed: March 6, 2024.\n\n[124] National Transport Authority. Public Transport Data. https://www.transportforireland.ie/transitData/PT_Data.html, (2024). Accessed: March 6, 2024.\n\n[125] Pra≈æsk√° Integrovan√° Doprava (PID). Open PID Data: DATA SETS - PID timetables in GTFS format. https://pid.cz/o-systemu/opendata/, (2024). Accessed: March 6, 2024.\n\n[126] Transport for New South Wales (Transport for NSW). Timetables Complete GTFS. https://opendata.transport.nsw.gov.au/dataset/timetables-complete-gtfs, (2024). Accessed: March 6, 2024.\n\n[127] Queensland Government. Open Data Portal: Translink General transit feed specification (GTFS). https://translink.com.au/about-translink/open-data/gtfs-rt, (2023). Accessed: March 6, 2024.\n\n[128] Adelaide Metro. Adelaide Metro GTFS - Realtime API (v1): gtfs. https://gtfs.adelaidemetro.com.au/, (2024). Accessed: March 6, 2024.\n\n[129] Auckland Transport (AT). General Transit Feed Specification. https://at.govt.nz/about-us/at-data-sources/general-transit-feed-specification, (2024). Accessed: March 6, 2024.\n\n[130] Environment Canterbury (ECan). GTFS Static Service (v1): GTFS. https://apidevelopers.metroinfo.co.nz/api-details#api=gtfs-static-service&operation=gtfs, (2024). Accessed: March 6, 2024."
    }
}