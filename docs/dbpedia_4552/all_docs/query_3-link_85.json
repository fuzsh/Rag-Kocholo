{
    "id": "dbpedia_4552_3",
    "rank": 85,
    "data": {
        "url": "https://softwareengineering.stackexchange.com/questions/176153/how-would-you-react-if-someone-told-you-your-code-is-a-mess",
        "read_more_link": "",
        "language": "en",
        "title": "How would you react if someone told you your code is a mess?",
        "top_image": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "meta_img": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "images": [
            "https://cdn.sstatic.net/Sites/softwareengineering/Img/logo.svg?v=e86f7d5306ae",
            "https://softwareengineering.stackexchange.com/posts/176153/ivc/ccfb?prg=0da11475-ed5a-42a4-a41a-47a476cc146f"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-11-17T01:11:28",
        "summary": "",
        "meta_description": "I am a good programmer, or so I thought before. I always love to program. And I want to learn many things about programming to make me a better programmer. I studied programming for 1 year and now ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/softwareengineering/Img/favicon.ico?v=c4f35a1e3900",
        "meta_site_name": "Software Engineering Stack Exchange",
        "canonical_link": "https://softwareengineering.stackexchange.com/questions/176153/how-would-you-react-if-someone-told-you-your-code-is-a-mess",
        "text": "The truth is that probably in 2 years when you will see your current code you will agree that it was a mess. Learning programming is a never ending process and there will always be someone who is better at it than you.\n\nSo if person who said that your code is a mess is not just mean and it is not another case of \"I would do it better\" disease common among programmers you should ask him/her what exactly is wrong with your code and how can you improve it.\n\nAfter 20+ years I know that some of my own code is still a mess. What it comes down to is making a decision between writing the best possible code versus writing what's required to get the job done. Getting the job done within an agreed timeframe trumps the never-ending quest for technical perfection any day.\n\nThe trick is to learn to accept it. Learn to accept that you could do better. Learn to live with the flaws. Learn to accept that you're not going to get it perfect this time, and probably the next time too, and that it's a deliberate choice because the alternative is not delivering. And that's worse.\n\nDisclaimer: none of this should be read as \"bad code is OK\".\n\nWell, a person saying your code is a mess is not constructive, even if they're right. Did they give you reasons why it's a mess? Like, methods are too long, responsibilities mixed together, too much branching, etc. Honestly, any code I wrote a year ago I would say is complete crap because I've learned a ton since then. So don't feel bad about it. I would be more worried if you still liked reading the code you wrote that long ago.\n\nThe cleaner your code-base is, the less time you spend on fighting the code-base to solve a given problem. A year is a great point to be at because you can feel the pains of any design decisions you made earlier in the project.\n\nOn my current project, we've refactored several times as we got more comfortable with our technology stack. This should be encouraged and you should make note of tasks that take longer than they should because of present code-base.\n\nHave you gone over some of the older parts of the code you wrote? You can probably see things you'd want to do differently now or refactor.\n\nAlso when you mention a lack of testing, this is always something to look at. On our project we had no automated testing and as a result a lot of highly coupled code. Even if you don't write unit/integration/whatever tests regularly, doing it for a little while will get you in the habit of making your code more modular (and consequently, less of a mess).\n\nI feel so sad and hurt. I really love programming and making them say something like that really hurts me. I really want to improve myself.\n\nThat is good. That is a lot better than having a reaction like \"my reviewer has no idea what he is talking about\", \"my reviewer is too picky\" or just \"my reviewer doesn't like me\" and ignoring them. This attitude is a good thing.\n\nBut it seems like I'm not a genius programmer like in the movies.\n\nNot sure what kind of movies you watch, but 90% of the programmers in the movies are so fake I have tears by the end of the sequence.\n\nCan you give me advise on how to be better?\n\nRead and practise. Check out books like Code Complete or The Pragmatic Programmer. Look on Amazon for similar books.\n\nHave you ever experience something criticizing your code and you feel really hurt? What do you do on those events..\n\nWhy do you feel hurt? I feel disappointed in myself for being such a moron in the first place. I use that motivation to clean up my code and make sure I don't make the same mistake again. The last thing I want to do it not learn from it. You have been put down once, don't let it happen again for the same reason.\n\nNo programmer is born perfect, or even close. The more code your write, the more reviews you get and reviews you provide, will make you an all-round better programmer.\n\nOne of the best things to me about being a developer is that every day is a learning process. There will always be someone out there who doesn't know something which you do, and there will always be someone who knows something which you don't. I certainly wouldn't consider myself to be anywhere but at an entry/junior level, but I appreciate any criticism I can get as long as it is both justified and given with respect.\n\nAn analogy that might be fitting relates to a time period in which I was a writing tutor at a university, as well as when I took part in creative writing courses. Writing code, for all intents and purposes, is much like writing a poem, essay, short story, or novel. Each individual has their own way of going about doing it, but at the same time, even the best writers (or, in this case, developers) make mistakes or let things slip through the cracks. We can often fail to notice these things because we become so used to our own voice (or again, in this case, style of code).\n\nMuch like in any field, there are those who are considered to be experts. If those people didn't exist, we wouldn't have anyone to learn from. Assuming this individual in question is truly an expert, I would listen to what he says and ask what he would suggest you do to improve upon your code. Never forget, though, that he is not the only one who can give his assistance; we have the good fortune that a plethora of resources such as SE/SO exist.\n\nThe fact that you're concerned is a good sign. Let's start with that. You mention you love to program, but do you love being a professional programmer? There's a big difference between an enthusiast and a professional. As a professional you will be under constant scrutiny for your work product.\n\nOur team is composed of 5 programmers, and 4 of us are new\n\nThe fact that you've worked two years without any confrontation tells me that you're working in a very laid-back job which, is not so good if you're actually wanting to move forward as a professional. Mind you, some of the best programmers in the world work for the Linux foundation and be rest assured they do not get treated kindly when they make marginal mistakes ... much less 'messy code'.\n\nFor a quick review of some fairly standard coding guidelines, the Linux Community Contributors Standards should give you an idea of the level of responsibility to aspire towards for your product. Refer to GETTING THE CODE RIGHT.\n\nTo further that assertion you should learn to embrace review as most good software is thoroughly reviewed. This supports Linus' Law stating ...\n\n\"If there are enough reviewers, all problems are easy to solve.\"\n\nPersonally, I've seen highly skilled, responsible and dependable developers get the axe for something as simple as forgetting to leave comments ... so if someone tells you your codes a mess then it probably is ... Get over it ... Refactoring. It's part of the gig.\n\nI feel so sad and hurt.\n\nGo make a sadness application to gauge how upset you get when you don't apply yourself.\n\nYou answered your problem ... You Don't Test!\n\nAfter seeing a comment you made stating that your a java developer, I almost got upset. So if I understand you correctly your saying that you and your development team are working in a java shop and don't have a test framework for your applications ...\n\nTherein Lies The Rub\n\n\"We deployed our program to the program without thorough testing.\"\n\nCribbing UML Creator Grady Booch ...\n\nThe amateur software engineer is always in search of magic, some sensational method or tool whose application promises to render software development trivial. It is the mark of the professional software engineer to know that no such panacea exists.\n\nAlistair Cockburn provides a wealth of information on his site on using agile methodologies to increase performance and quality for you and your team.\n\nOne of the most important aspects of programming {and life} is knowing your strengths and weaknesses. If you don't work on your weaknesses you will not have a well-rounded skill-set.\n\nOutro ... Your doing fine - Just don't whine. Move forward in developing your craft and let your passion for programming keep you going. Good Luck :-)\n\nDon't let your emotions get in the way of improving your code. The goal of a code review is to find problems, so you shouldn't be too surprised if there are some. That said, they aren't supposed to be a coder-bashing session either.\n\nThey also shouldn't be just saying 'Ewwww' and leaving it at that. There is always a reason why something is wrong in programming. For instance, it's wrong to leave lots of commented-out code all over the place, but it's wrong because it clutters up the code and makes it harder to read, not because somebody said so in a book.\n\nYour code is not you. Remember that.\n\nI'm going to be the dick here and advise on the basis of.. well, the obvious. Obviously, your code IS a mess or the question you'd be asking is \"WHY is somebody saying my code is a mess?\" But you're not challenging the supposition. You're just acting hurt and quite frankly there might be crying but there's no feeling when it comes down to justifying programming.\n\nBut really, why are you asking? You know your code sucks or you'd be asking a different question. If somebody told me my back-end web code stank, I'd laugh and say \"okay what's wrong with it?\" If they told me my JavaScript stank, I'd give them the social programmer equivalent of a fat lip and I'd never ask for advice on how to react because the little bitches are clearly !@#$ing wrong.\n\nOwn what you're good at. And I really mean take responsibility for it. because it only takes one goof for some twit to second-guess you. Don't ask permission to be good. Just know your stuff. The end.\n\nMost of the time you should say \"Thank You\" to the person that told you this.\n\nChances are that they care about their profession, they care about their work, they care about their team and they care about you.\n\nIt can be hard to take criticism. Don't get mad about it. Think about what they are trying to tell you and don't let your emotions get the better of you.\n\nI've been programming for a long time (30 years) and my style and code is improving all the time (I hope). The only way that I know its improving is when other people tell me or if I go back and review my code.\n\nTry looking at code you wrote at the start of your career. What does it look like to you now? Does it look as good as you thought it did when you wrote it ;)\n\nFirst off someone saying your code is a mess is very vague and subjective. It can mean different things to different people. Here's why; there are two different things that have to be considered.\n\nStructure\n\nThe structure of your code is governed by the language, industry standards, and company standards to name a few. Obviously there are other factors as well.\n\nThese are the types of mistakes that lint, test tools, and similar products are designed to identify. They are well defined and you or your tools can make objective decisions as to their validity/correctness.\n\nStyle\n\nDespite standardized structure/rules for code, every developer has a certain style in the way they write and approach a problem or task. Do code maintenance in any team environment and over time you'll be able to take an educated guess as to who wrote the code based on the style. You'll also develop your own style and it will change as you gain experience and learn your craft.\n\nSo any time that someone says your code is a mess you need to understand if they are talking about the structure or the style. They are two very different things; structure is objective while style is absolutely subjective.\n\nThat being said, any constructive feedback from other programmers can be very valuable to you. It's all up to you and how you take the criticism. Over time you'll learn who's opinion to take to heart versus who's to take with a grain of salt.\n\nAs you progress in your career you'll look back at your own code and see things that you could do differently, better, cleaner, and faster. It's all part of the learning process and seeing your own past mistakes is a true indication that you are honing and improving your craft.\n\nDon't let a bit of criticism dampen your spirits. Take what you can from it and if it's meaningful and valuable add it to your store of knowledge.\n\nFirst of all, you must understand that programming is an iterative process, much like writing an article or a book. First you write a \"rough draft\" of your program, just to get it to work. At this stage, your code will be a mess. So you refactor to make the code clean. Then you profile and see what you need to optimize to make it fast. The trick is to refactor continuously, otherwise the mess will grow. You have to clean your code regularly, just like you have to clean your house.\n\nCode reviews are absolutely essential. You must have your code looked at by at least one other pair of eyes. When you spend countless hours looking at your code, you get used to it, and you can easily miss a bug or a code smell that your coworker might notice instantly.\n\nAlso, the act of explaining your code to someone else is a great way to see if you have missed anything. This is like reading a paper you are writing out loud. Your brain processes audio and visual information in different ways, and you can find flaws in your reasoning by switching modality. Also, if you explain your code to a coworker, and something does not make sense to her, that is a good indication that you should refactor your code.\n\nWhen doing a code review it is very important for both the author and the reviewer to check their egos at the door. The goal is to make the code better. So the reviewer must be respectful, and the author must keep an open mind. Remember, your co-workers are the ones who will have to maintain your code, so it must be clear to them. If the reviewer does not understand what a variable does, rename it. If the reviewer can't understand what a block of code does, refactor it into a function with a descriptive name. Irrespective of what you may think, if your co-workers cannot understand your code, it is not good.\n\nSpeaking of refactoring, you absolutely must have a unit test framework, because without it, you cannot refactor.\n\nFinally, I highly recommend reading \"Clean Code\" by Robert C. Martin. It will tell you why your code is a mess, and what you can do to clean it up.\n\nCan you give me advise on how to be better?\n\nJay's answer which recommends books is a good one, however it sounds like you're at a turning point at work already.\n\nPast:\n\nOur team is composed of 5 programmers, and 4 of us are new, 1 has more than 3 year experience. We've been working for a program for almost a year now and nobody ever review my code and I was given a page to work with.\n\nPresent:\n\nNow it is tight and we need an approval and code review first before we make changes with the code.\n\nIt sounds like your company/team/department is learning as whole, in terms of project and team management as well as programming. Starting to review code is an excellent opportunity to improve in pretty much all areas if it's given proper attention.\n\nUse this as an opportunity; assuming you're doing peer reviews (with the other developers on your team) suggest to them that this process is important and that everyone can learn from it.\n\nAt the base line it will be a quick review with the outcome being \"yeah looks ok\". With a little more focused effort you can bounce ideas off of each other, \"yeah that works, but you could have approached it in this way, which would have made your goal clearer...\". Take notes for future even if the code is deemed ok to deploy.\n\nIf this is going to be successful, you need to get your team and manager on side, which often means explaining the benefits to them. To the other developers this is an opportunity to learn. To your manager this is the opportunity to up-skill the team at little cost, therefore creating outputs a) with more value or b) faster c) with less maintenance cost (usually a big issue!).\n\nThis is a culture change, which you can't force through by yourself, but you can help to nudge things in the right direction!\n\nDon't forget, this is kind of culture change can be hugely beneficial to organisations; good managers will recognise that you're working to make the whole team better, something worth rewarding.\n\nCan you give me advise on how to be better? Have you ever experience something criticizing your code and you feel really hurt? What do you do on those events.\n\nThe answer to this can be found in the new generation companies. I have been to companies like Google and FaceBook and I see that if you follow Agile/Scrum process religiously, then you can write better code and improve it every sprint.\n\nHow to be better?\n\nThe answer is continuous refactoring. The modern development tools like visual studio has lot of tools that helps you in this process. If you follow Scrum software development process, then say for ex, you wrote bad code in sprint cycle 1 and someone pointed out during review it's bad, then in sprint 2, you have the opportunity to refactor the code.\n\nThese issues are occurring in the first place because of lack of good process. So the solution is to come up with a good software development process for your team and practice continuous refactoring.\n\nWhile it is important to recognize when your own code is a mess (very typical feeling among programmers, especially as they become more experienced and their earlier code ages) it is even more important to listen when other people tell you so.\n\nThere are only so many issues you can recognize in your own code, since it was produced in constraints of your current programming knowledge.\n\nCode review is essential learning opportunity because it likely exposes you to new knowledge that you didn't have while working on the code (otherwise you would use it and there would be no mess).\n\nI think there are two parts to processing negative feedback.\n\n1. Determine nature of raised issue(s) and what you should learn from it\n\nWhen I review or have my code reviewed I sort information about code issues in roughly such buckets:\n\nviolates hard technological requirements\n\nplain wrong (does not function or perform to requirements)\n\nwill fail in other circumstances (environment/configuration change)\n\nuses deprecated functionality and will break in foreseeable future\n\nviolates industry best practice, lacking in things such as\n\nusing proven approach to specific problem\n\nperformance\n\nbackwards compatibility\n\nease of maintenance\n\ncoding style\n\ndocumentation\n\nviolates workplace best practice\n\nsame as industry, but more specific to company/colleagues and can differ from industry in details\n\nnot in line with personal expertise\n\ncan be improved in some way, in opinion of person reviewing\n\nNote that this ranges from very objective things (\"this will break when deployed to our production server\") to very subjective things (\"I don't like how you named variables\").\n\n2. Determine which (if any) changes to the code will be made as outcome of review\n\nAfter information is processed there comes decision if it is actionable and if code should be changed. This is not necessarily your decision, your opinion might or might not matter depending on parties involved and specifics of your situation (seniority, etc). But possible outcomes roughly are:\n\naddress issue in full\n\nfix broken\n\nformat to required coding style\n\nand so on\n\ncome to compromise if issue should be addressed at all or partially, since there might be\n\nno resources (such as time or budget)\n\nno need (will only achieve insignificant improvement, compromise stability, etc)\n\ncome to understanding that raised issue is invalid\n\nfeedback (especially from subjective opinion category) can very well be outright harmful and should not be acted on blindly\n\nYou've learned that it feels painful to get negative feedback and it very well might be painful every time in the future. However you have left learn how it is important learning opportunity and how the process helps you to improve professionally and your workplace to achieve better code base.\n\nTL;DR\n\nHow would you react if someone told you your code is a mess?\n\nMy straightforward, \"too long didn't read (all the answers - apologies, I will hopefully find time to later and edit/amend this if necessary)\" answer/tip:\n\nGood old Peer Review. Ask different crews with different collective mentalities, expertise levels and/or levels of aggressiveness to review your code.\n\nJust to elaborate a bit on what I mean by \"different\" peer groups: the StackExchange diaspora is probably the most clued up, professional and esteemed group because of the relative difficulty in becoming part of it compared to, say, Reddit. Reddit tends to be very aggressive in the more popular sub-reddits - but strangely enough the programming subreddits are quite friendly (from what I have experienced).\n\nA good, perhaps the best, example of the aggressive, gangsta type of clique mentality are the XDK Forums crowd, and the worst of the worst trophy I hand to the CyanogenMod for Android forums/IRC channel populace.\n\nThat was a bit longer than I intended; my point was supposed to be - get varied reviews, but focus on getting honest critique from the people that know their trade, and know what constructive criticism is. Oh, and be able to take any form of criticism without letting it get you down. Rule of thumb: if you start to hear similar commentary pertaining to a thing that can be mutual to the comments, then do some more thorough introspection."
    }
}