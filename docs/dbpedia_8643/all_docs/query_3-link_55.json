{
    "id": "dbpedia_8643_3",
    "rank": 55,
    "data": {
        "url": "https://developers.google.com/style/inclusive-documentation",
        "read_more_link": "",
        "language": "en",
        "title": "Write inclusive documentation",
        "top_image": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/opengraph/indigo.png",
        "meta_img": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/opengraph/indigo.png",
        "images": [
            "https://developers.google.com/static/site-assets/developers_64dp.png",
            "https://developers.google.com/static/site-assets/developers_64dp.png",
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/style/inclusive-documentation",
        "text": "Avoid unnecessarily violent language\n\nAvoid graphically violent or harmful terms. For example, avoid using the term STONITH; instead, describe the process used to stop an errant node in context by using more specific terms.\n\nIf it's unavoidable and you must mention a violent or harmful term such as STONITH, mention it once when you first explain the relevant feature, but phrase it in a way that de-emphasizes the term.\n\nRecommended: This might require you to fence failed nodes.\n\nSometimes okay: This might require you to fence failed nodes (sometimes referred to as STONITH).\n\nWhen possible, avoid the use of figurative language that can be interpreted as violent, such as hang and hit. Although there might also be nonviolent interpretations for these terms, avoiding their use prevents unintentional harm that might be caused by the violent interpretations.\n\nAvoid the use of figurative language that relates to the slaughter of animals. For example, avoid using the metaphor of pets versus cattle when comparing on-premises or stateful systems with stateless cloud systems.\n\nWrite about features and users in inclusive ways\n\nAvoid referring to people in divisive ways. For example, instead of referring to people as native speakers or non-native speakers of English, consider whether your document needs to discuss this at all, and revise it to discuss the feature in terms that are relevant to anyone regardless of what languages they know.\n\nAvoid using socially-charged terms for technical concepts where possible. For example, avoid terms such as blacklist, native feature, and first-class citizen, even though these terms might still be widely used. Instead of first-class, consider other terms such as core feature, built-in, or top-level. Choose the best term for your context.\n\nReplace or write around non-inclusive terms\n\nThis section contains guidance about how to replace or write around a non-inclusive term. If a term is well established in the industry and replacing it could cause confusion, see Replace established terms. If a term occurs in code samples or keywords, see Write around non-inclusive code terms.\n\nReplace established terms\n\nMany non-inclusive terms are in wide use in the industry, such as whitelist. If replacing an established term could cause confusion for readers, you can directly refer to the non-inclusive term on the first use, and put it in parentheses. Then use the inclusive, replacement term throughout the rest of the document.\n\nRecommended: To make sure that administrators get the notification, add them to an allowlist (sometimes called a whitelist). Anyone who isn't on the allowlist is blocked ...\n\nRecommended: In this model, a Jenkins controller (master) handles HTTP requests. The Jenkins controller is designed to ...\n\nRecommended: In cloud architecture, servers are treated as commodities (sometimes described by using the metaphor cattle, not pets).\n\nIn many cases, instead of directly replacing a word, you can rewrite to improve the clarity of a sentence. For example, instead of replacing the verb whitelist with allowlist, try rewriting the sentence.\n\nRecommended: You can allow requests from a range of IP addresses by entering a CIDR block instead of a single address in the field.\n\nNot recommended: You can allowlist a range of IP addresses by entering a CIDR block instead of a single address in the field.\n\nWrite around non-inclusive code terms\n\nIn some cases, non-inclusive terms are embedded in code (or similar) as names or keywords, and you can't simply ignore those terms and use different terminology. What you can do, however, is minimize your use of the term (hence avoid propagating it as a term of art), while still providing clear documentation to your readers. Don't use a non-inclusive name or keyword unless it's in code font.\n\nFollowing are scenarios for writing around non-inclusive terms that occur in code and keywords.\n\nOne scenario is if you're documenting an existing system in which an entity is already named by using a non-inclusive term. For example, there might be a configuration file that includes the following cluster name:\n\napiVersion: v1 kind: Config preferences: {} clusters: - cluster: name: master - cluster: name: replica-1\n\nAnother scenario is if your documentation includes a non-inclusive term that's an established keyword, such as the keyword SLAVE in dialects of SQL:\n\nSTART SLAVE UNTIL SQL_AFTER_MTS_GAPS;\n\nThe first time that you refer to a code item that uses a non-inclusive term, you can directly refer to that term, but format it in code font, and put it in parentheses if possible.\n\nRecommended: The configuration file helps you create a parent node (which is named master in the file).\n\nRecommended: Start the replica by using the START SLAVE statement.\n\nIn subsequent mentions, use the preferred term (parent node, replica). If it's necessary to refer to the entity name or keyword, continue doing so only with code formatting."
    }
}