{
    "id": "dbpedia_3157_2",
    "rank": 45,
    "data": {
        "url": "https://github.com/project-chip/connectedhomeip",
        "read_more_link": "",
        "language": "en",
        "title": "chip/connectedhomeip: Matter (formerly Project CHIP) creates more connections between more objects, simplifying development for manufacturers and increasing compatibility for consumers, guided by the ",
        "top_image": "https://opengraph.githubassets.com/09bc659038d94d18eda8065d1916875779dc602b57d0f0033abf72997b4476e8/project-chip/connectedhomeip",
        "meta_img": "https://opengraph.githubassets.com/09bc659038d94d18eda8065d1916875779dc602b57d0f0033abf72997b4476e8/project-chip/connectedhomeip",
        "images": [
            "https://github.com/project-chip/connectedhomeip/workflows/Builds/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Android/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Ameba/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20ASR/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20BouffaloLab/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Darwin/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20TI%20CC13XX_26XX/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20TI%20CC32XX/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20EFR32/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20ESP32/badge.svg",
            "https://github.com/project-chip/connectedhomeip/actions/workflows/examples-infineon.yaml/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20i.MX%20Linux/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20K32W%20with%20SE051/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Linux%20ARM/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Linux%20Standalone/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Linux%20Standalone/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Mbed%20OS/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20MW320/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20nRF%20Connect%20SDK/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Open%20IoT%20SDK/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20QPG/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20stm32/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Telink/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Build%20example%20-%20Tizen/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Unit%20/%20Integration%20Tests/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/Cirque/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/QEMU/badge.svg",
            "https://github.com/project-chip/connectedhomeip/workflows/ZAP/badge.svg",
            "https://github.com/project-chip/connectedhomeip/actions/workflows/docbuild.yaml/badge.svg",
            "https://github.com/project-chip/connectedhomeip/raw/master/docs/images/Matter_Arch_Overview.png",
            "https://github.com/project-chip/connectedhomeip/raw/master/docs/images/Matter_Layered_Arch.png",
            "https://avatars.githubusercontent.com/u/62264689?s=64&v=4",
            "https://avatars.githubusercontent.com/u/65077583?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1832280?s=64&v=4",
            "https://avatars.githubusercontent.com/u/65897387?s=64&v=4",
            "https://avatars.githubusercontent.com/u/54152665?s=64&v=4",
            "https://avatars.githubusercontent.com/u/44623591?s=64&v=4",
            "https://avatars.githubusercontent.com/u/66667989?s=64&v=4",
            "https://avatars.githubusercontent.com/u/12717022?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1850?s=64&v=4",
            "https://avatars.githubusercontent.com/u/7727672?s=64&v=4",
            "https://avatars.githubusercontent.com/u/61470527?s=64&v=4",
            "https://avatars.githubusercontent.com/u/26400791?s=64&v=4",
            "https://avatars.githubusercontent.com/in/29110?s=64&v=4",
            "https://avatars.githubusercontent.com/u/67972863?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "project-chip"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Matter (formerly Project CHIP) creates more connections between more objects, simplifying development for manufacturers and increasing compatibility for consumers, guided by the Connectivity Standards Alliance. - project-chip/connectedhomeip",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/project-chip/connectedhomeip",
        "text": "Builds\n\nTests\n\nTools\n\nDocumentation\n\nMatter SDK documentation page\n\nMatter (formerly Project CHIP) creates more connections between more objects, simplifying development for manufacturers and increasing compatibility for consumers, guided by the Connectivity Standards Alliance.\n\nMatter is a unified, open-source application-layer connectivity standard built to enable developers and device manufacturers to connect and build reliable, and secure ecosystems and increase compatibility among connected home devices. It is built with market-proven technologies using Internet Protocol (IP) and is compatible with Thread and Wi-Fi network transports. Matter was developed by a Working Group within the Connectivity Standards Alliance (Alliance). This Working Group develops and promotes the adoption of the Matter standard, a royalty-free connectivity standard to increase compatibility among smart home products, with security as a fundamental design tenet. The vision that led major industry players to come together to build Matter is that smart connectivity should be simple, reliable, and interoperable.\n\nMatter simplifies development for manufacturers and increases compatibility for consumers.\n\nThe standard was built around a shared belief that smart home devices should be secure, reliable, and seamless to use. By building upon Internet Protocol (IP), Matter enables communication across smart home devices, mobile apps, and cloud services and defines a specific set of IP-based networking technologies for device certification.\n\nThe Matter specification details everything necessary to implement a Matter application and transport layer stack. It is intended to be used by implementers as a complete specification.\n\nThe Alliance officially opened the Matter Working Group on January 17, 2020, and the specification is available for adoption now.\n\nVisit buildwithmatter.com to learn more and read the latest news and updates about the project.\n\nMatter is developed with the following goals and principles in mind:\n\nUnifying: Matter is built with and on top of market-tested, existing technologies.\n\nInteroperable: The specification permits communication between any Matter-certified device, subject to users’ permission.\n\nSecure: The specification leverages modern security practices and protocols.\n\nUser Control: The end user controls authorization for interaction with devices.\n\nFederated: No single entity serves as a throttle or a single point of failure for root of trust.\n\nRobust: The set of protocols specifies a complete lifecycle of a device — starting with the seamless out-of-box experience, through operational protocols, to device and system management specifications required for proper function in the presence of change.\n\nLow Overhead: The protocols are practically implementable on low compute-resource devices, such as MCUs.\n\nPervasive: The protocols are broadly deployable and accessible, by leveraging IP and being implementable on low-capability devices.\n\nEcosystem-Flexible: The protocol is flexible enough to accommodate deployment in ecosystems with differing policies.\n\nEasy to Use: The protocol provides smooth, cohesive, integrated provisioning and out-of-box experience.\n\nOpen: The Project’s design and technical processes are open and transparent to the general public, including non-members wherever possible.\n\nMatter aims to build a universal IPv6-based communication protocol for smart home devices. The protocol defines the application layer that will be deployed on devices and the different link layers to help maintain interoperability. The following diagram illustrates the normal operational mode of the stack:\n\nThe architecture is divided into layers to help separate the different responsibilities and introduce a good level of encapsulation among the various pieces of the protocol stack. The vast majority of interactions flow through the stack captured in the following Figure:\n\nApplication: High-order business logic of a device. For example, an application that is focused on lighting might contain logic to handle turning on/off the bulb as well as its color characteristics.\n\nData Model: The data layer corresponds to the data and verb elements that help support the functionality of the application. The Application operates on these data structures when there is an intent to interact with the device.\n\nInteraction Model: The Interaction Model layer defines a set of interactions that can be performed between a client and server device. For example, reading or writing attributes on a server device would correspond to application behavior on the device. These interactions operate on the elements defined at the data model layer.\n\nAction Framing: Once an action is constructed using the Interaction Model, it is serialized into a prescribed packed binary format to encode for network transmission.\n\nSecurity: An encoded action frame is then sent down to the Security Layer to encrypt and sign the payload to ensure that data is secured and authenticated by both sender and receiver of a packet.\n\nMessage Framing & Routing: With an interaction encrypted and signed, the Message Layer constructs the payload format with required and optional header fields; which specify the message's properties and some routing information.\n\nIP Framing & Transport Management: After the final payload has been constructed, it is sent to the underlying transport protocol for IP management of the data.\n\nMatter’s design and technical processes are intended to be open and transparent to the general public, including to Working Group non-members wherever possible. The availability of this GitHub repository and its source code under an Apache v2 license is an important and demonstrable step to achieving this commitment. Matter endeavors to bring together the best aspects of market-tested technologies and redeploy them as a unified and cohesive whole-system solution. The overall goal of this approach is to bring the benefits of Matter to consumers and manufacturers as quickly as possible. As a result, what you observe in this repository is an implementation-first approach to the technical specification, vetting integrations in practice. The Matter repository is growing and evolving to implement the overall architecture. The repository currently contains the security foundations, message framing and dispatch, and an implementation of the interaction model and data model. The code examples show simple interactions, and are supported on multiple transports -- Wi-Fi and Thread -- starting with resource-constrained (i.e., memory, processing) silicon platforms to help ensure Matter’s scalability.\n\nWe welcome your contributions to Matter. Read our contribution guidelines here.\n\nInstructions about how to build Matter can be found here .\n\nThe Matter repository is structured as follows:\n\nFile/Folder Content build Build system support content and built output directories build_overrides Build system parameter customization for different platforms config Project configurations credentials Development and test credentials docs Documentation, including guides. Visit the Matter SDK documentation page to read it. examples Example firmware applications that demonstrate use of Matter integrations 3rd party integrations scripts Scripts needed to work with the Matter repository src Implementation of Matter third_party 3rd party code used by Matter zzz_generated ZAP generated template code - Revolving around cluster information BUILD.gn Build file for the GN build system CODE_OF_CONDUCT.md Code of conduct for Matter and contribution to it CONTRIBUTING.md Guidelines for contributing to Matter LICENSE Matter license file REVIEWERS.md PR reviewers gn_build.sh Build script for specific projects such as Android, EFR32, etc. README.md This file"
    }
}