{
    "id": "correct_subsidiary_00004_2",
    "rank": 93,
    "data": {
        "url": "https://edwardbetts.com/monograph/Donald_Knuth",
        "read_more_link": "",
        "language": "en",
        "title": "Books: Donald Knuth",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://edwardbetts.com/book_covers/001820.jpg",
            "https://edwardbetts.com/book_covers/000309.jpg",
            "https://edwardbetts.com/book_covers/002152.jpg",
            "https://edwardbetts.com/book_covers/003948.jpg",
            "https://edwardbetts.com/book_covers/000006.jpg",
            "https://edwardbetts.com/book_covers/000437.jpg",
            "https://edwardbetts.com/book_covers/007208.jpg",
            "https://edwardbetts.com/book_covers/002764.jpg",
            "https://edwardbetts.com/book_covers/005096.jpg",
            "https://edwardbetts.com/book_covers/001616.jpg",
            "https://edwardbetts.com/book_covers/000906.jpg",
            "https://edwardbetts.com/book_covers/002440.jpg",
            "https://edwardbetts.com/book_covers/003029.jpg",
            "https://edwardbetts.com/book_covers/003278.jpg",
            "https://edwardbetts.com/book_covers/000068.jpg",
            "https://edwardbetts.com/book_covers/003014.jpg",
            "https://edwardbetts.com/book_covers/007142.jpg",
            "https://edwardbetts.com/book_covers/004621.jpg",
            "https://edwardbetts.com/book_covers/003973.jpg",
            "https://edwardbetts.com/book_covers/000758.jpg",
            "https://edwardbetts.com/book_covers/000896.jpg",
            "https://edwardbetts.com/book_covers/003947.jpg",
            "https://edwardbetts.com/book_covers/001815.jpg",
            "https://edwardbetts.com/book_covers/006301.jpg",
            "https://edwardbetts.com/book_covers/002611.jpg",
            "https://edwardbetts.com/book_covers/005874.jpg",
            "https://edwardbetts.com/book_covers/004743.jpg",
            "https://edwardbetts.com/book_covers/001531.jpg",
            "https://edwardbetts.com/book_covers/007141.jpg",
            "https://edwardbetts.com/book_covers/000415.jpg",
            "https://edwardbetts.com/book_covers/004600.jpg",
            "https://edwardbetts.com/book_covers/000868.jpg",
            "https://edwardbetts.com/book_covers/004889.jpg",
            "https://edwardbetts.com/book_covers/006554.jpg",
            "https://edwardbetts.com/book_covers/006629.jpg",
            "https://edwardbetts.com/book_covers/000360.jpg",
            "https://edwardbetts.com/book_covers/003684.jpg",
            "https://edwardbetts.com/book_covers/000152.jpg",
            "https://edwardbetts.com/book_covers/003968.jpg",
            "https://edwardbetts.com/book_covers/006898.jpg",
            "https://edwardbetts.com/book_covers/005846.jpg",
            "https://edwardbetts.com/book_covers/006049.jpg",
            "https://edwardbetts.com/book_covers/006714.jpg",
            "https://edwardbetts.com/book_covers/003683.jpg",
            "https://edwardbetts.com/book_covers/001714.jpg",
            "https://edwardbetts.com/book_covers/006696.jpg",
            "https://edwardbetts.com/book_covers/003240.jpg",
            "https://edwardbetts.com/book_covers/004352.jpg",
            "https://edwardbetts.com/book_covers/000301.jpg",
            "https://edwardbetts.com/book_covers/002460.jpg",
            "https://edwardbetts.com/book_covers/001699.jpg",
            "https://edwardbetts.com/book_covers/006514.jpg",
            "https://edwardbetts.com/book_covers/002559.jpg",
            "https://edwardbetts.com/book_covers/001886.jpg",
            "https://edwardbetts.com/book_covers/001885.jpg",
            "https://edwardbetts.com/book_covers/000695.jpg",
            "https://edwardbetts.com/book_covers/000005.jpg",
            "https://edwardbetts.com/book_covers/000457.jpg",
            "https://edwardbetts.com/book_covers/005086.jpg",
            "https://edwardbetts.com/book_covers/001551.jpg",
            "https://edwardbetts.com/book_covers/007001.jpg",
            "https://edwardbetts.com/book_covers/002252.jpg",
            "https://edwardbetts.com/book_covers/002549.jpg",
            "https://edwardbetts.com/book_covers/001913.jpg",
            "https://edwardbetts.com/book_covers/002642.jpg",
            "https://edwardbetts.com/book_covers/000926.jpg",
            "https://edwardbetts.com/book_covers/001888.jpg",
            "https://edwardbetts.com/book_covers/004322.jpg",
            "https://edwardbetts.com/book_covers/002040.jpg",
            "https://edwardbetts.com/book_covers/004434.jpg",
            "https://edwardbetts.com/book_covers/000016.jpg",
            "https://edwardbetts.com/book_covers/001615.jpg",
            "https://edwardbetts.com/book_covers/001715.jpg",
            "https://edwardbetts.com/book_covers/003217.jpg",
            "https://edwardbetts.com/book_covers/000787.jpg",
            "https://edwardbetts.com/book_covers/001674.jpg",
            "https://edwardbetts.com/book_covers/003180.jpg",
            "https://edwardbetts.com/book_covers/003201.jpg",
            "https://edwardbetts.com/book_covers/003872.jpg",
            "https://edwardbetts.com/book_covers/003517.jpg",
            "https://edwardbetts.com/book_covers/005085.jpg",
            "https://edwardbetts.com/book_covers/007042.jpg",
            "https://edwardbetts.com/book_covers/001545.jpg",
            "https://edwardbetts.com/book_covers/004110.jpg",
            "https://edwardbetts.com/book_covers/006276.jpg",
            "https://edwardbetts.com/book_covers/006601.jpg",
            "https://edwardbetts.com/book_covers/003675.jpg",
            "https://edwardbetts.com/book_covers/003133.jpg",
            "https://edwardbetts.com/book_covers/003405.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "What Algorithms Want: Imagination in the Age of Computing by Ed Finn\n\nAirbnb, Albert Einstein, algorithmic bias, algorithmic management, algorithmic trading, AlphaGo, Amazon Mechanical Turk, Amazon Web Services, bitcoin, blockchain, business logic, Charles Babbage, Chuck Templeton: OpenTable:, Claude Shannon: information theory, commoditize, Computing Machinery and Intelligence, Credit Default Swap, crowdsourcing, cryptocurrency, data science, DeepMind, disruptive innovation, Donald Knuth, Donald Shoup, Douglas Engelbart, Douglas Engelbart, Elon Musk, Evgeny Morozov, factory automation, fiat currency, Filter Bubble, Flash crash, game design, gamification, Google Glasses, Google X / Alphabet X, Hacker Conference 1984, High speed trading, hiring and firing, Ian Bogost, industrial research laboratory, invisible hand, Isaac Newton, iterative process, Jaron Lanier, Jeff Bezos, job automation, John Conway, John Markoff, Just-in-time delivery, Kickstarter, Kiva Systems, late fees, lifelogging, Loebner Prize, lolcat, Lyft, machine readable, Mother of all demos, Nate Silver, natural language processing, Neal Stephenson, Netflix Prize, new economy, Nicholas Carr, Nick Bostrom, Norbert Wiener, PageRank, peer-to-peer, Peter Thiel, power law, Ray Kurzweil, recommendation engine, Republic of Letters, ride hailing / ride sharing, Satoshi Nakamoto, self-driving car, sharing economy, Silicon Valley, Silicon Valley billionaire, Silicon Valley ideology, Silicon Valley startup, SimCity, Skinner box, Snow Crash, social graph, software studies, speech recognition, statistical model, Steve Jobs, Steven Levy, Stewart Brand, supply-chain management, tacit knowledge, TaskRabbit, technological singularity, technological solutionism, technoutopianism, the Cathedral and the Bazaar, The Coming Technological Singularity, the scientific method, The Signal and the Noise by Nate Silver, The Structural Transformation of the Public Sphere, The Wealth of Nations by Adam Smith, transaction costs, traveling salesman, Turing machine, Turing test, Uber and Lyft, Uber for X, uber lyft, urban planning, Vannevar Bush, Vernor Vinge, wage slave\n\nThat is to say, an algorithm reliably delivers an expected result within a finite amount of time (except, perhaps, for those edge cases that fascinate mathematicians and annoy engineers). Historian Nathan Ensmenger recounts how the academic discipline of computer science coalesced only after its advocates embraced the concept of the algorithm, with one of the field’s founders, Donald Knuth, tracing the field’s origins to al-Khwarizmi in his seminal textbook The Art of Computer Programming.6 The algorithm was an ideal object of study, both easily grasped and endlessly puzzling: By suggesting that the algorithm was as fundamental to the technical activity of computing as Sir Isaac Newton’s laws of motion were to physics, Knuth and his fellow computer scientists could claim full fellowship with the larger community of scientists.7 And yet, as mathematician Yiannis Moschovakis points out, Knuth’s argument about what algorithms actually are is an extremely rare instance where the question is foregrounded.8 For computer scientists the term remains more of an intuitive, unexamined notion than a delineated logical concept grounded in a mathematical theory of computation.\n\n…\n\nThe Huffington Post, March 5, 2015. http://www.huffingtonpost.com/2015/03/05/tip-uber-driver_n_6810296.html. Kline, Ronald R. The Cybernetics Moment: Or Why We Call Our Age the Information Age. Johns Hopkins University Press, 2015. Knack, Ruth Eckdish. “Pay As You Park.” Planning Magazine, May 2005. http://shoup.bol.ucla.edu/PayAsYouPark.htm. Knuth, Donald E. “Ancient Babylonian Algorithms.” Communications of the ACM 15 (7) (July 1972): 671–677. doi:10.1145/361454.361514. Kolbe, Winrich, director. “Evolution.” Star Trek: The Next Generation, September 23, 1989. http://www.imdb.com/title/tt0708710. Kosner, Anthony Wing. “Facebook Is Recycling Your Likes to Promote Stories You’ve Never Seen to All Your Friends.”\n\n…\n\n., 59 Jenkins, Henry, 102 Johansson, Scarlett, 78 Jonze, Spike, 11, 77–79, 84–85 Journalists, 3 automatization and, 38 Bitcoin and, 12 cultural values and, 171–172 Facebook and, 116, 170, 172 gamification and, 116 Gawker Media and, 170–175, 210n35 Google and, 75 Siri and, 58 Thiel and, 170–171 transactional algorithms and, 151 “Trending Topics” widget and, 180 Uber and, 129 Kael, Pauline, 175 Kasparov, Gary, 135–138 Kindle, 195 Kirschenbaum, Matthew, 47–48 Kiva Systems, 134 Kline, Ronald, 31 KnowledgeGraph, 71–73, 75, 94 Knuth, Donald, 17–18 Kurzweil, Ray, 184 Labor, 7, 18, 46, 122 Adam Smith on, 146 affective, 145–148 arbitrage and, 97, 112, 123–145 Bitcoin and, 164, 178 capitalism and, 165 cloud warehouses and, 131–445 culture machines and, 93, 119 deep structures of, 123 faking sincerity and, 146–147 feedback systems and, 145–148 HITs and, 135, 139, 141, 145 identity and, 146–147 intellectual, 12 interface economy and, 123–145 ludic, 120 mandatory smiles and, 146 Marx on, 165 Mechanical Turk and, 135–145 pickers and, 132–134 Taylorism and, 93 worker conditions and, 8, 132–134, 139–140 Lambda calculus, 24 Langlois, Ganaele, 111 Language abstraction and, 2, 24 advertisements and, 178 algorithms and, 24–28, 33–41, 44, 51, 54–55 cognition and, 39 color words and, 4 culture machines and, 39–40 epistemological layers and, 4, 11, 148, 155, 157, 175, 177, 188 ethos of information and, 159 grammar and, 2, 16, 25, 38–41, 62–64, 110–112, 138, 178–179 imagination and, 38, 185, 196 incompleteness and, 24, 40 as intellectual technology, 4 intelligent assistants and, 11, 57, 62, 64–65, 77 machine learning and, 2, 112 many registers of, 1–2 mathematics and, 2, 55 meaning and, 1 metaphor and, 183–184 (see also Metaphor) natural language processing (NLP) and, 62–63 of new media, 112, 122 plasticity and, 38, 191 power of, 1–2, 4–5 procedural, 3–4, 6 reality and, 1 rhetoric and, 6, 16, 22, 30, 45, 89, 96, 101, 104, 110, 112, 123, 127, 136 Siri and, 57–65, 71–84 spoken, 2, 58, 60, 62–63, 67, 84, 185 symbolic, 2, 26, 38–41 tricks and, 3–4 Turing Machine and, 33, 41 universal, 5 vocabulary and, 2, 4, 25, 138, 160, 190 Wiener and, 28 Language of New Media, The (Manovich), 122 Lawsuits, 90, 171, 175 Leibniz, Gottfried Wilhelm, 25–27, 72 Lem, Stanislaw, 184 Levy, Steven, 3 Lewis, Michael, 12, 151, 153, 168 Leyden, Peter, 160 Library Computer Access/Retrieval System (LCARS), 67–68 Life magazine, 31 Literacy, 5, 39, 52, 75, 109, 129, 159, 177 LiveJournal, 209n20 Loebner Prize, 87, 203n50 Logic general substitutability and, 33 Gödel and, 24, 40 halting states and, 41–46 information theory and, 10, 27 invisibly exclusionary, 110 pragmatist approach and, 18–25, 42, 58, 62 process and, 41–46 proofs and, 15, 24–25, 41, 44 rationality and, 38, 40 symbolic, 2, 21, 24, 39, 41, 44, 54–55 “Long Boom, The” (Schwartz and Leyden), 160–161 Lyft, 123, 127–130, 145, 148 Machine learning artificial intelligence (AI) and, 2, 15, 28, 42, 62, 66, 71, 85, 90, 112, 181–186, 191 big data and, 90 computationalist approach and, 183 DeepMind and, 28, 66, 181–182 Google and, 66, 181–186, 191 imagination and, 181–186 language and, 2, 112 Netflix and, 182–183 neural networks and, 28, 31, 39, 182–183, 185 Siri and, 62, 182 (see also Siri) Turing Machine and, 182 (see also Turing Machine) Macy Conferences, 30, 199n42 Madrigal, Alexis, 92, 94–95 Magic agency and, 78 artificial intelligence and, 135–136 cached content and, 159 code as, 1–5, 8, 10, 16, 49–50, 196 computation as, 4, 8, 10, 46, 52, 59–60, 94, 96, 121, 161 constructed reality and, 39 curses and, 1 data cloud and, 131, 134 fantasy and, 121, 124, 126 government currency and, 172 hacker powers as, 3, 51 incantations and, 1, 3–5, 51, 196 invisible sides of system and, 178 machines and, 137–138, 188 Memex and, 188 metaphors for, 32–36 myths and, 1–2, 10, 16 ontology and, 62–65 ratings and, 130 rational language for, 25 shamans and, 1, 3, 5 Siri and, 59–60, 62–65 sourcery and, 3, 10, 17, 21, 33–34 symbolic, 105 Manjoo, Farhad, 75 Manovich, Lev, 112, 122 Market impacts advertisements and, 34 (see also Advertisements) arbitrage and, 152, 161 attention and, 119 automobiles and, 127 Bitcoin and, 163–180 crashes and, 151 cryptocurrency and, 160–180 digital identity and, 159 digital trading and, 152 eliminating vulnerability and, 161–162 encryption and, 153, 162–163 fungible space and, 54 gaming and, 119, 121 gaming the system and, 153 Google and, 66 high frequency trading (HFT) and, 151–158, 168–169, 177 hyperinflation and, 166 international trade and, 12 invisible hand and, 33 labor and, 8 (see also Labor) Mechanical Turk and, 135–145 NASDAQ and, 152 Netflix and, 87, 97, 107–110, 114–115 NYSE and, 152 parallel computing and, 139 pension funds and, 151, 168 Siri and, 59, 75–77 stock market and, 12, 15, 154 transaction fees and, 164–165 transparency and, 160–164, 168, 171, 177–178 virtuous action and, 146 Wall Street and, 16, 66, 109, 151, 153, 171, 185 Marx, Karl, 165 Master Algorithm, The (Domingos), 183 Materiality, 26, 47–49, 53, 133 Mathematics abstract symbolism, 2, 55 algebra, 17 Babylonian, 17 Berlinski and, 9, 181 calculus, 24, 26, 30, 34, 44–45, 98, 148, 186 complexity, 28 computationalist approach and, 23, 183, 185 Conway and, 29–30 culture machines and, 49–50 Descartes and, 26, 69, 75 effective computability and, 40 “extended mind” hypothesis and, 40 Fibonacci sequence, 17 Golden Ratio, 2 Hilbert and, 23 Hindu-Arabic numerals, 17 language and, 2, 55 Leibniz and, 25–26, 72 logic, 2, 10, 24 machine duplication and, 22 materiality and, 26 Moschovakis and, 17 Nakamoto and, 161–162 Netflix Prize and, 87–91 ontology and, 84 perceived reality and, 20 Post and, 9 Pragmatic Chaos and, 90 proofs, 15, 24–25, 41, 44 pure, 47 reality and, 34 Rendell and, 30 Shannon and, 27 Strogatz and, 44, 183 theory of computation and, 18 Turing and, 6–9, 23–30, 33, 39–43, 54, 73, 79–82, 87, 138, 142, 182, 186 Mathesis universalis, 25–26, 28, 72 Matrix, The (film), 3, 36, 109 Maturana, Humberto, 28–29 McClelland, Mac, 132–133 McCloud, Scott, 110, 154–155 McCulloch-Pitts Neuron, 28, 39 Meaning acceleration of epistemological change and, 188–189 algorithms and, 35–36, 38, 44–45, 50, 54–55 belonging and, 122 black boxes and, 7, 15–16, 47–48, 51, 55, 64, 72, 92–93, 96, 136, 138, 146–147, 153, 162, 169–171, 179 Chun on, 35 Cow Clicker and, 116, 118–119 cultural exchange and, 12, 111–112 data mining and, 175 decision-making and, 20, 28, 34, 37, 90 digital culture and, 3, 7, 18, 22, 43, 49, 66, 87, 156, 160, 191, 193–194 endless hunt for, 184 imagination and, 184 (see also Imagination) intimacy and, 75 language and, 1 Mechanical Turk and, 136–140 metaphor and, 183–184 (see also Metaphor) obfuscations and, 7, 55, 64 organization of, 8 PageRank and, 169 Siri and, 65 structures of, 89, 96 value and, 155 vs. information, 9, 9–10 Mechanical Turk Google and, 12, 135–145 history of original, 136–138 meaning and, 136–140 as metaphor, 143 von Kempelen and, 135 worker conditions and, 139–140 Mechanisms (Kirschenbaum), 47–48 Memex, 186–189, 195 Memory computation and, 18, 21, 37, 43–44, 51, 56, 58, 69, 75, 159–160, 176, 185–186, 191–193 culture and, 43 human, 37, 43–44 process and, 21 technical, 51, 192 understanding and, 37 Metaphor, 121 assumption of code and, 43 cathedral of computation and, 6–8, 27, 33, 49, 51 Church-Turing thesis and, 41–42 cloud, 131 for communication, 32–36 computational, 22 cultural, 50, 54 effective computability and, 34 human cognition and, 39 imagination and, 183–184, 189 interfaces and, 25, 60 Mechanical Turk and, 143 Netflix as, 96, 104 obelisk and, 155 reality and, 10, 50 Samantha (Her) and, 84–85 Microsoft, 97, 144, 152 Miners (Bitcoin), 165, 167–168, 171–172, 175–179 Money abstraction and, 153, 159, 161, 165–167, 171–175 algorithmic trading and, 12, 20, 99, 155 arbitrage and, 151–152, 155–163, 169–171, 175–179 Bitcoin and, 160–180 as collective symbol, 165–166 ontology and, 156–159, 178–179 Moore’s Law, 43 Morowitz, Harold, 23 Moschovakis, Yiannis, 17 Moth machine (Wiener), 31–32, 34 Musk, Elon, 191 My Mother Was a Computer (Hayles), 21, 93 Myths ancient, 28 Campbell on, 94 code and, 7–8, 16, 44 cultural space and, 5 culture machine and, 55 fantasy and, 78 government currency and, 172 human-computer interaction and, 36, 51 magic and, 1–2, 10, 16 material reality and, 47 ontology and, 26 origin, 68 personalization and, 106–107 power of language and, 6, 44, 196 Sumerian, 3, 5, 16 unitary simplicity and, 49 Nakamoto, Satoshi, 161–162, 165–167 Nam-shubs, 1, 3–6, 37–40, 56, 135 Nardi, Bonnie, 121 NASDAQ, 152 Natural-Born Cyborgs (Clark), 37 Natural language processing (NLP), 62–63 Natural selection, 44 Negri, Antonio, 145 Netflix, 161 abstraction of aesthetics and, 87–112, 205n36 abundant choices and, 176 arbitrage and, 94, 97, 109–112, 124 art of personalization and, 97–103 Bogost on, 92–95 business model of, 87–88 Cinematch and, 88–90, 95 commissioned shows of, 97–98 computationalist approach and, 90, 104 consumer desire and, 93–96 disruptive technologies and, 124 effective computability and, 93 Facebook and, 91, 110 fan making and, 100–101 FCC and, 90 genre categories of, 94 ghost in the machine and, 55, 95, 183 gutter problem and, 110 Hastings and, 97–98 House of Cards and, 11, 54, 92, 98–112, 192 influence of, 87 interface economy and, 124 Leibniz and, 26 machine learning and, 182–183 market issues and, 87, 97, 107–110, 114–115 metaphor and, 96, 104 ontology and, 92, 94, 96 original content by, 97–98 parsing data and, 182 personalization and, 97–103, 109 Pragmatic Chaos and, 89–90 predictor ensemble and, 89–90 quantum mechanics and, 91–94, 96, 99, 112 recommendation algorithm competition of, 87–91 rejection of big-data approach and, 11 serendipitous glitches and, 55 Spoiler Foiler and, 101–102, 108 streaming and, 90 system behavior and, 16 taggers and, 54, 88, 92–93, 96, 99 techno-utopian rhetoric and, 16 Neural networks, 28, 31, 39, 182–183, 185 New Digital Age, The (Schmidt), 66 Newitz, Annalee, 60 Newton, Isaac, 17, 166 New York Stock Exchange (NYSE), 152 New York Times, 170 Nielsen ratings, 102 Note Book (Nunokawa), 53 @NSA_prismbot, 194–195 Nunokawa, Jeff, 53 Nyby, Christian I., II, 95 Of the Subcontract, Or Principles of Poetic Right (Thurston), 12, 140–145 OK Google, 51 One-way functions, 162–163 Ontology Apple and, 62–63, 65 computationalist approach and, 8 consciousness and, 178 culture machines and, 62–65, 68–69 Google and, 159–160 ideology and, 68 imagination and, 69, 73–74 of information, 8, 63, 69–71 mathematics and, 84 meaning and, 8, 21–22, 26, 39 money and, 156–159, 178–179 Netflix and, 92, 94, 96 Siri and, 62–65, 71–73, 82, 84 work of algorithms and, 122 Open source software, 6, 162, 167 ORION, 19, 47 Orwellian surveillance, 132–134 Page, Larry, 155–156 PageRank, 20, 111, 155–159, 169, 177–178, 189 Pariser, Eli, 46, 50 Parisian Great Exhibition, 80 Pasquale, Frank, 21 Pension funds, 151, 168 Perfect knowledge, 13, 65, 71, 73, 190 Perry Mason (TV series), 95–96 Phaedrus (Plato), 37 Phoenix, Joaquin, 77 Pickers, 132–134 Pitts, Walter, 28 Planned Parenthood, 64 Plato, 4, 31, 37–38, 40, 82 Popova, Maria, 175–176 Post, Emil, 9 Pragmatic Chaos (Netflix), 89–90 Pragmatist approach algorithmic, 2, 18–25, 42 effective computability and, 25–26 experimental humanities and, 193 growing power of computation and, 27 justice and, 146 models of reason and, 47 reframing humanities and, 193 Siri and, 58, 62 Privacy, 49, 62, 75, 90, 160–161, 163, 173 Private keys, 163 Programmability, 16, 178 Programmable culture, 169–175 Programmed Visions (Chun), 33 Project Loon, 66 Proofs, 15, 24–25, 41, 44 Protocol (Galloway), 50 Public keys, 163 Purdy, Jedediah, 146–147 Quantum mechanics Netflix and, 91–94, 96, 99, 112 Wiener and, 26–27 Raley, Rita, 194–195 Ramsey, Stephen, 52 Raymond, Eric, 6 Reading Machines (Ramsey), 52 Religion, 1, 7, 9, 49, 69, 71, 80, 136 Rendell, Paul, 30 Rice, Stephen P., 144–145 Rid, Thomas, 199n42 Riskin, Jessica, 136–137 Robotics, 31, 34, 43–45, 132–134, 188 Rood of Grace, 137 Rotten Tomatoes, 96 RSE encryption, 163 Samantha (Her), 77–85, 154, 181 Sample, Mark, 194–195 Sandvig, Christian, 107, 131 Sarandos, Ted, 98, 100, 104 Schmidt, Eric, 66, 73, 127 Schwartz, Peter, 160–161 Scorsese, Martin, 59 Searle, John, 4 Shannon, Claude, 27 Sharing economy, 54, 123, 127–129, 145, 148 Shoup, Donald, 127 Silicon Valley, 3, 9, 30–31, 49, 54, 87, 100, 124, 182 SimCity (game), 194 Simondon, Gilbert, 40, 42–44, 53, 59, 84, 106, 118 Singhal, Amit, 72, 76 Siri abortion scandal and, 64 abstraction and, 64–65, 82–84 anticipation and, 73–74 as beta release, 57 CALO and, 57–58, 63, 65, 67, 79, 81 cognition and, 57–65, 71–84 computationalist approach and, 65, 77 consciousness and, 57–65, 71–84 conversation and, 57–65, 71–84 DARPA and, 11, 57–58 Easter eggs in, 60, 148 effective computability and, 58, 62, 64, 72–76, 81 emotional work and, 148 Enlightenment and, 71–76, 79–80, 82 gender and, 60–61, 80 interfaces and, 59–60, 63, 75, 77 intimacy and, 11, 75–81 language and, 57–65, 71–84 launch of, 57 machine learning and, 62–65, 182 market issues and, 59, 75–77 meaning and, 65 ontology and, 62–65, 71–73, 82, 84 parsing data and, 182 performing knowledge and, 59–61 quest for knowledge and, 71–75, 82, 84 reading, 58–59 reduced abilities of, 59 speed of, 131 Skinner boxes, 61, 115–116, 119–120, 122 Smith, Adam, 12, 146–147 Smith, Kevin, 88 Sneakers (film), 3 Snow Crash (Stephenson), 1, 3–5, 9, 17, 36, 38, 50 Social behavior, 22, 146 addiction and, 114–119, 121–122 discrimination and, 21, 130 exploitationware and, 115–116 Social gaming, 114, 118, 120–122 Social media, 6 Arab Spring and, 111, 186 changing nature of, 171 digital culture and, 3, 7, 18, 22, 43, 49, 66, 87, 156, 160, 191, 193–194 Enlightenment and, 173 identity formation and, 191 in-person exchanges and, 195 intellectual connection and, 186 newsfeeds and, 116, 177–178 peer review and, 194 raising awareness and, 174 Spoiler Foiler (Netflix) and, 101–102, 108 transaction streams and, 177 Uber and, 148 Software agency and, 6 Apple and, 59, 62 apps and, 6, 8, 9, 15, 59, 83, 91, 94, 102, 113–114, 124, 128, 145, 149 blockchains and, 163–168, 171, 177, 179 cathedrals of computation and, 6–8, 27, 33, 49, 51 Chun on, 33, 42, 104 Church-Turing thesis and, 25 consciousness and, 77 dehumanizing nature of, 116 depersonification of, 6 digital materiality and, 53 experience and, 34 as foundation of computational expression, 47 imagination and, 186, 194 in-house affect and, 59 interfaces and, 124 (see also Interfaces) logic of general substitutability and, 33 Manovich and, 112 material layers and, 48 as metaphor for metaphors, 35 Metaverse, 50 networks vs. individuals and, 118 open source, 6, 162, 167 Pasquale on, 21 reality and, 10 self-modification and, 1, 38 Weizenbaum and, 33–40 Solaris (Lem), 184 Sourcery, 3, 10, 17, 21, 33–34 Space of computation, 2–5, 9, 21, 42, 45, 76, 154, 185 Spacey, Kevin, 98–99, 106–107 Spoiler Foiler (Netflix), 101–102, 108 SRI International, 57, 59, 63, 169 Srinivasan, Balaji, 169 Star Fleet Federation, 67 Star Trek computer anticipation and, 73–74 conversation and, 67 Google and, 11, 65–82, 159, 186 interfaces and, 67–68 LCARS and, 67–68 Memex and, 186–189, 195 public expectations and, 67 Star Trek: The Next Generation (TV series), 67 Stephenson, Neal, 1, 3–5, 9, 17, 36, 38, 50, 51 Stiegler, Bernard, 43–44, 53, 106 Streaming content, 49, 54, 87, 90–92, 97, 99, 101–102, 104, 205n39 Strogatz, Steven, 44, 183 Sumerian myths, 3, 5, 16 SuperPACs, 174 Symbolic logic, 2, 21, 24, 39, 41, 44, 54–55 Symposium (Plato), 82 Tacit negotiation, 20 Taggers, 54, 88, 92–93, 96, 99 Tanz, Jason, 116 TaskRabbit, 124 Taylorism, 93 Teller, Astro, 66 Terminator (film series), 191 Terrorism, 163, 178 Theory of Communicative Action, The (Habermas), 109 Theory of Moral Sentiments (Smith), 12, 146–147 Thiel, Peter, 170–171, 174 Third parties, 59, 114, 125, 132–133, 147, 162, 170–171 Thurston, Nick, 12, 140–145 Tindr, 128 Transaction fees, 164–165 Transcendent Man (Kurzweil), 184 Transparency bazaar model and, 6 cryptocurrency and, 160–164, 168, 171, 177–178 feedback and, 146 freedom and, 9 interfaces and, 189 market issues and, 160–164, 168, 171, 177–178 politics of algorithms and, 18, 20 proprietary platforms and, 9 Traveling salesman problem, 19 “Trending Topic” widget, 180 Turing, Alan, 8, 23, 42, 79–80, 182 Turing Machine, 182 Berlinski and, 9, 24 computability boundary and, 23–24 concept of, 23 effective computability and, 42 finite-time processes and, 42 game of life and, 29–31 language and, 33, 41 McCulloch-Pitts Neuron and, 28 as though experiment, 23–24 as uniting platform, 25 Turing’s Cathedral (Dyson), 6 Turing test, 43, 79–82, 87, 138, 142 Turner, Fred, 3, 46 Twain, Mark, 151 Twitter, 53, 101–102, 173, 177, 179, 194–195, 210n43 Uber, 9, 12, 97, 138 abstraction levels of, 129 African Americans and, 130 business model of, 54, 93–94, 96 feedback system of, 145–148 interface economy and, 123–133, 145, 147 massive infrastructure of, 131 threats to, 129 Ubiquitous computation algorithms and, 3–4, 15, 33, 43, 54, 119, 124–125, 127, 178, 189–190 Bitcoin and, 178 colonization of margins and, 119 gamification and, 124 imagination and, 189–190 interfaces and, 189 Uber and, 125, 127 Unit Operations (Bogost), 118 U.S.S.\n\nDesign Patterns: Elements of Reusable Object-Oriented Software (Joanne Romanovich's Library) by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides\n\nA Pattern Language, Donald Knuth, financial engineering, finite state, Ivan Sutherland, L Peter Deutsch, loose coupling, MVC pattern, yield curve\n\nACM Press. [JZ91] Ralph E. Johnson and Jonathan Zweig. Delegation in C++. Journal of Object-Oriented Programming, 4(11):22-35, November 1991. [Kir92] David Kirk. Graphics Gems III. Harcourt, Brace, Jovanovich, Boston, MA, 1992. [Knu73] Donald E. Knuth. The Art of Computer Programming, Volumes 1, 2, and 3. Addison-Wesley, Reading, MA, 1973. [Knu84] Donald E. Knuth. The TEXbook. Addison-Wesley, Reading, MA, 1984. [Kof93] Thomas Kofler. Robust iterators in ET++. Structured Programming, 14:62-85, March 1993. [KP88] Glenn E. Krasner and Stephen T. Pope. A cookbook for using the model-view controller user interface paradigm in Smalltalk-80.\n\n…\n\n(Judging from this book, we suspect “architecture encyclopedia” will be a more appropriate name than “architecture handbook.”) That first workshop has led to a series of meetings, the most recent of which being the first conference on Pattern Languages of Programs held in August 1994. This has created a community of people interested in documenting software expertise. Of course, others have had this goal as well. Donald Knuth’s The Art of Computer Programming [Knu73] was one of the first attempts to catalog software knowledge, though he focused on describing algorithms. Even so, the task proved too great to finish. The Graphics Gems series [Gla90, Arv91, Kir92] is another catalog of design knowledge, though it too tends to focus on algorithms.\n\n…\n\nA abstract class 15, 16c, 359, 364, 365c abstract coupling, see coupling, abstract in OBSERVER 296 ABSTRACT FACTORY 87 extensibility of 91 in catalog summary 8 Lexi’s use of 51 used to configure a subsystem 193 Abstract Factory participant of ABSTRACT FACTORY 88c, 89 abstract operation, see operation, abstract use to implement ADAPTER 144 abstract syntax tree 244, 251, 331 class structure for 244c, 331c constructing in Smalltalk 250 object structure for 244o AbstractExpression participant of INTERPRETER 245c, 245 Abstraction participant of BRIDGE 153c, 154 AbstractProduct participant of ABSTRACT FACTORY 88c, 89 accumulating state 336 acquaintance 22, 359 C++, defined in 23 compared with aggregation 23 Smalltalk, defined in 23 Action, see COMMAND active iterator, see iterator, active Ada 4, 21 Adaptee participant of ADAPTER 141, 141c ADAPTER 139 compared with BRIDGE 161, 219 compared with DECORATOR 184 compared with PROXY 216 in catalog summary 8 Adapter participant of ADAPTER 141, 141c adapter 140 class adapter 141, 141c object adapter 141, 141c parameterized 145 pluggable, see pluggable adapter two-way 143, 143c adorner 179 Aggregate participant of ITERATOR 259, 259c aggregate object 257 aggregation 22, 359 C++, defined in 23 compared with acquaintance 23 notation for 23 Smalltalk, defined in 23 Alexander, Christopher xiii, 2, 356, 358 algorithm avoiding dependence on 24 defining steps of 326 family of 317 skeleton 327 AlternationExpression 244co, 343 implemented in Smalltalk 249 aluminum alloy 76 Ambassador, see also PROXY C++idiom 208 AnalogClock 303 analysis object model transforming to design object model 353 ancestor class 361, see also class, parent Anderson, Bruce xi, 357 AndExp 253 Andrew Toolkit use of OBSERVER 303 Application 107, 107c, 223o, 224ci, 231, 325, 325c application programs 25 ApplicationWindow 53, 54c, 55c, 157, 233c, 234c ArrayCompositor 42c, 315, 315c, 322 ASCII7Stream 183, 183c aspect of an object 298 AssignmentNode 333c associations, see also acquaintance, aggregation in OMT 364 B BTree 202 base class, see class, parent Beck, Kent xi, 357 Bedrock use of DECORATOR 179, 180 behavioral pattern 10, 221 comparison between class and object scope 221 discussion 345 black-box reuse, see reuse, black-box block, Smalltalk 270 BNF form 247 examples of 243, 248, 251 BombedMazeFactory 93 BombedMazeGame 115 BombedWall 93, 94, 124 Booch Components use of ITERATOR 270 use of STRATEGY 323 Booch, Grady xiii, 260 Booch method 363 Boolean expression 251 variable 254 BooleanExp 252 Border 44, 45c, 46o BorderDecorator 176o, 176c, 180 BRIDGE 151 compared with ADAPTER 219 configured by ABSTRACT FACTORY 155 in catalog summary 8 Lexi’s use of 58 use of delegation in 21 bridge 152 broadcast communication 296 BUILDER 97 compared with ABSTRACT FACTORY 105, 135 compared with PROTOTYPE 135 in catalog summary 8 use in compiler example 189 Builder participant of BUILDER 98, 98c Bureaucrat 232, see also CHAIN OF RESPONSIBILITY Button 50c, 223o, 224ci, 229, 279 C C 4 Calder, Paul 33, 38 callback function 235 Caretaker participant of MEMENTO 285, 285c, 286i Cargill, Tom 308 CHAIN OF RESPONSIBILITY 223 combined with COMPOSITE 166, 232 compared with MEDIATOR 348 compared with OBSERVER 348 defined by parent references 166, 232 in catalog summary 8 use of delegation in 21 ChangeManager 282, 299, 300c Character 38, 38c character represented as object 38, 195–196 Cheshire Cat 155 Choices operating system use of FACADE 192 use of PROXY 209 class 14, 359 abstract, see abstract class adapter, see adapter, class compared with type 16 concrete, see concrete class derived 360 friend, see friend class inability to alter 24 inheritance, see inheritance instance 15 library, see toolkit mixin, see mixin class notation for 15, 363 parent 15, 361 subclass 15 template, see template class diagram 363, 365c, 359 class hierarchy adding operations to 356 connecting parallel 109, 258 explosion 25, 43, 151, 177 minimizing size of 113, 120, 177, 277, 317, 348 visiting multiple 336 class operation 359 alternatives provided by SINGLETON 128 Client participant of ABSTRACT FACTORY 88c, 89 participant of ADAPTER 141, 141c participant of BUILDER 98, 98c, 99i participant of CHAIN OF RESPONSIBILITY 225ci, 226, 348i participant of COMMAND 236, 236c, 237i participant of COMPOSITE 164c, 165 participant of FLYWEIGHT 198c, 199 participant of INTERPRETER 245c, 246 participant of PROTOTYPE 119, 119c client 11 isolating concrete classes from 89 ClockTimer 302 clone operation 117 used in PROTOTYPE 117 implementing 121 cloned object 117 initializing 121 CLOS 4, 260, 338 closure 260, 267 Coad, Peter 357 code structure run-time versus compile-time 23 CodeGenerationVisitor 332c Colleague communicating with Mediator 278, 282 participant of MEDIATOR 276co, 277, 348i COMMAND 233 combined with MEMENTO 239, 287 combined with PROTOTYPE 238 in catalog summary 8 use in Lexi 64 Command 60, 61c, 233, 233c, 239 configured in MenuItem 61 history of 62 participant of COMMAND 236, 236c, 237i, 347i command C++ idiom, see functor copying before execution 238 history, see history list implemented through C++ templates 239, 240 intelligence of 238 common vocabulary 352 communication encapsulated or distributed 346 between Strategy and Context 318 between Visitor and Element 337 compilation dependencies reducing using FACADE 188 Compiler 185, 186c, 191 compiler example in FACADE 185, 186c, 188 implemented using VISITOR 331 Smalltalk, see RTL Smalltalk compiler Component participant of COMPOSITE 164c, 165, 168 participant of DECORATOR 177, 177c COMPOSITE 163 caching children of 169 child management 167 combined with INTERPRETER 255 combined with ITERATOR 262 combined with VISITOR 339 compared with DECORATOR 219–220 compared with INTERPRETER 247 data structure for 169, 170 in catalog summary 8 interface of 167 Lexi’s use of 40 parent references 166 sharing components 166 use in Model/View/Controller 5 Composite participant of COMPOSITE 164c, 165, 165o, 168 CompositeEquipment 171 Composition 41, 42c, 315, 315c, 320 composition, see object composition Compositor 41, 42, 315, 315c, 321 interface 41 CompressingStream 183c, 184 concrete class, 15, 359 avoiding specification of 24 isolating clients from 89 ConcreteAggregate participant of ITERATOR 259, 259c ConcreteBuilder participant of BUILDER 98c, 99, 99i ConcreteCommand participant of COMMAND 236, 236c, 238 ConcreteComponent participant of DECORATOR 177, 177c ConcreteDecorator participant of DECORATOR 177c, 178 ConcreteElement participant of VISITOR 334, 334c, 335i ConcreteFactory participant of ABSTRACT FACTORY 89 ConcreteFlyweight participant of FLYWEIGHT 198co, 199 ConcreteHandler participant of CHAIN OF RESPONSIBILITY 225c, 226 ConcreteImplementor participant of BRIDGE 153c, 154 ConcreteIterator participant of ITERATOR 259, 259c ConcreteObserver participant of OBSERVER 294c, 295, 295i ConcreteProduct participant of ABSTRACT FACTORY 88, 89 participant of FACTORY METHOD 108, 108c ConcretePrototype participant of PROTOTYPE 119, 119c ConcreteState participant of STATE 307, 307c ConcreteStrategy participant of STRATEGY 316c, 316 ConcreteSubject participant of OBSERVER 294c, 295, 295i Concrete Visitor participant 334, 334c, 335i conditional statements avoiding using STATE 307 avoiding using STRATEGY 317 consolidation phase of lifecycle 353 constraint solving 282, 283 see also ThingLab, QOCA ConstraintSolver 283–284, 288 constructor 360 Context 252 participant of INTERPRETER 245c, 246 participant of STATE 306, 306c participant of STRATEGY 316c, 316 control flow encapsulating, see MEDIATOR inversion of 27 Coplien, James 125, 153, 160, 242, 313, 357 copy deep 121 on write 210 shallow 121 CountingMazeBuilder 104 coupling 360 abstract 188, 278, 296, 359 loose 24, 26, 277, 347, see also decoupling reducing 24, 187, 188, 223, 226 tight 24 CreateMaze operation 84 ABSTRACT FACTORY variant (C++) 92 ABSTRACT FACTORY variant (Smalltalk) 94 BUILDER variant 102 FACTORY METHOD variant 114 PROTOTYPE variant (Smalltalk) 123, 125 creational pattern 10, 81 discussion of 135 Creator participant of FACTORY METHOD 108, 108c implementation of 111, 113 Cursor, see ITERATOR cursor, see iterator, cursor D data member 360 DebuggingGlyph 182 DECORATOR 175 compared with ADAPTER 175, 184 compared with COMPOSITE 44, 173, 219–220 compared with PROXY 216, 219–220 compared with STRATEGY 179 in catalog summary 8 Lexi’s use of 45c, 46o, 47 lightweight versus heavyweight 179 Decorator 176, 180 participant of DECORATOR 177, 177c, 180o decorator 175 decoupling, see also coupling, loose interface and implementation 154 senders and receivers 346 deep copy, see copy, deep delegate 20, 144 delegation 20, 278, 360 compared with inheritance 20–21 implementing pluggable adapters with 144 patterns that rely on 21 dependency 293 managing complex 299 Dependents, see OBSERVER derived class, see class, derived design déjà-vu 2 density 358 documenting with patterns 27, 352 for change 23 poetry of 356 for reuse 23 design object model 353 design pattern 360 adjunct to design methodology 353 aspects of design varied by 30 benefits 351 catalog summary 8 catalog template 6 classification 10 compared with frameworks 28 diagram of relationships 12 documenting designs with 27, 352 essential elements 3 finding 355 history of 355 how to use 29 purpose 10 refactoring with 353 scope 10 selection of 28 table of 10 destructor 360 ensuring iterator’s is called 266 Dialog 223, 231 DialogDirector 274o, 275ci, 278 DialogWindow 53, 54c, 55c DigitalClock 302 Director participant of BUILDER 98c, 99, 99i DirectoryBrowser 144, 144c, 145c discretionary glyph 75 dispatch double 338 multiple 339 single 338 Doc 205, see also Lexi Document 107, 107c, 233c, 234, 234c, 325, 325c document color 42, 322 formatting 40 logical structure 40 physical structure 35 documenting design with patterns 27, 352 doesNotUnderstand message used to implement CHAIN OF RESPONSIBILITY 229 used to implement PROXY 212, 215 Domain 192, 192c Door 82c, 83 extensions for PROTOTYPE 123 double-dispatch, see dispatch, double downcast 91 Dylan 4 use of MEMENTO 289 dynamic binding 14, 360 dynamic inheritance 309 dynamic_cast in C++ 91, 168 E e-mail address reaching the authors xii Eiffel 17, 21 Element participant of VISITOR 334, 334c encapsulation 11, 360 breaking with inheritance 19 breaking with VISITOR 337 preserving boundaries of 286 of algorithms, see STRATEGY of complex update semantics, 299, see also ChangeManager of concept that varies 29, 54 of document analysis and traversal 71 of protocol between objects, see MEDIATOR of how objects are created, see ABSTRACT FACTORY, BUILDER, PROTOTYPE of traversal, see ITERATOR of requests 59, see also COMMAND of state-specific behavior, see STATE EnchantedMazeFactory 93 envelope-letter idiom 313 Equipment 170, 340 EquipmentVisitor 341 error accumulation avoiding during undo/redo 239 ET++ use of ABSTRACT FACTORY 95 use of ADAPTER 126, 148 use of BRIDGE 160 use of BUILDER 105 use of CHAIN OF RESPONSIBILITY 232 use of COMPOSITE 172 use of COMMAND 242 use of DECORATOR 182, 183 use of FACADE 192 use of FACTORY METHOD 115 use of FLYWEIGHT 206 use of ITERATOR 261 use of MEDIATOR 281 use of OBSERVER 303 use of PROTOTYPE 120, 125 use of PROXY 216 use of STRATEGY 322–323 ET++SwapsManager use of STRATEGY 323 ETgdb 125 expansion phase of lifecycle 353, 354 explosion, see class hierarchy, explosion ExtendedHandler 228 external iterator, see iterator, external extrinsic state, see state, extrinsic F FACADE 185 compared with MEDIATOR 193, 282 in catalog summary 8 use in Choices 192 Facade participant of FACADE 185c, 187, 187c facade 185 FACTORY METHOD 107 in catalog summary 8 language-specific variants 112 parameterized with product identifier 110 used to implement ABSTRACT FACTORY 90, 91, 110 used to create an iterator 258 FileStream 183, 183c FLYWEIGHT 195 combined with COMPOSITE 167, 200 combined with INTERPRETER 247 combined with STATE 308 in catalog summary 9 Lexi’s use of 39 participant of FLYWEIGHT 198, 198co flyweight 196, 196o managing shared 200 FlyweightFactory 204 participant of FLYWEIGHT 198co, 199 FontDialogDirector 274, 274o, 275ci Foote, Brian 353 forwarding requests 229 framework 26, 360 compared with design patterns 28 documenting with patterns 27 graphical editor 117 see Bedrock see Choices see ET++ see HotDraw see MacApp see NEXTSTEP see NeXT AppKit see RApp see RTL Smalltalk compiler see Unidraw trade-offs associated with 27 Fresco 344 friend class 360 used to grant Iterator privileged access to collection 262 used to support Memento 287 functor 242 future cash flow 323 G gdb 126 generics 21 Glyph 38, 38c, 42c, 43o, 45c, 46o, 50c, 54c, 67c implemented as a flyweight 201–204 interface 39 interface for traversal 66 Glue, see FACADE GlyphArrayIterator 67, 67c GNU gdb 126 grammar 243 maintaining complex 247 Graphic 163c, 208c, 213 GraphicTool 117, 118c guaranteed receipt of request 226 GUIFactory 49, 50c, 51 H Hamlet 1 Handle/Body, see also BRIDGE C++idiom 155, 160 Handler participant of CHAIN OF RESPONSIBILITY 225, 225ci, 348i hardware platform isolating application from 24 help context-sensitive 223 on-line 223 HelpHandler 224, 224c, 227, 229 history list 62–64, 238 copying commands onto 238 Hollywood principle 327 hook operation 326, 328 in ABSTRACT FACTORY 109 in FACTORY METHOD 109 in PROXY 212 in TEMPLATE METHOD 326, 328 HotDraw use of STATE 313 hub of communication 274 hyphenation 64 I IconWindow 53, 54c, 151–152, 151c, 157 Image 207o, 208c, 213 ImageProxy 207o, 208c Implementor participant of BRIDGE 153c, 154 implicit receiver, see receiver, implicit incremental changes 287 inheritance 15, 360 C++, defined in 17 class versus interface 16 combined with polymorphism 18 compared with object composition 18, 178 compared with parameterized types 21 dynamic 309 Eiffel, defined in 17 implementation 17, 360 interface 17, 360 mixin, see mixin class notation for 15, 364, 365c proper use of 18 reuse through 18 Smalltalk, defined in 17 inorder traversal, see traversal, inorder instance, see also class, instance ensuring uniqueness, see SINGLETON variable 15, 360 instantiation 15 abstracting process of 48 notation for 15, 364, 365c integrated circuit 323 interaction diagram 7, 366 in BUILDER 99i in CHAIN OF RESPONSIBILITY 224i, 348i in COMMAND 237i, 347i in MEDIATOR 274i, 348i in MEMENTO 286i in OBSERVER 295i, 347i in VISITOR 335i Lexi’s Visitor 74i interface 13 benefits of programming to 18 bloat 257 conversion, see ADAPTER for iteration 262 inheritance 13, 17 narrow versus wide in MEMENTO 285 specifying in C++ 17 simplifying subsystems, see FACADE internal iterator, see iterator, internal INTERPRETER 243 combined with COMPOSITE 255 combined with VISITOR 247, 255 in catalog summary 9 InterViews use of ABSTRACT FACTORY 95 use of ADAPTER 148 use of COMMAND 242 use of COMPOSITE 172 use of DECORATOR 182 use of FLYWEIGHT 205 use of OBSERVER 303 use of SINGLETON 133 use of STRATEGY 320, 322–323 intrinsic state, see state, intrinsic inversion of control flow 27 invitation 358 Invoker participant of COMMAND 236, 236c, 237i, 347i IRIS Inventor use of VISITOR 344 ITERATOR 257 combined with COMPOSITE 362 combined with VISITOR 339 compared with VISITOR 336 in catalog summary 9 use in Lexi 69 Iterator 67, 67c, 258c, 263, 372 participant of ITERATOR 259, 259c iterator 66, 257, 339 access to aggregate 262 active 260 alternative to in Smalltalk 270 controlling 260 cursor 261 ensuring deletion of 266 external 260, 339, 269 interface to 261, 263 internal 260, 267, 339, see also ListTraverser null 262, see also NullIterator over recursive structures 262 parameterized with an operation 267 passive 260 polymorphic 258, 261, 265 privileged access to Aggregate 262 robust 261 K Kit, see also ABSTRACT FACTORY in InterViews 95 Knuth, Donald 357 L lazy initialization 112 Leaf participant of COMPOSITE 164c, 165, 165o, 168 Lempel-Ziv compression 183 Lexi 33 document structure 35 document traversal and analysis 64 look-and-feel standards 47 multiple window systems 51 user interface 33, 34 user operations 58 libg++ use of BRIDGE 160 lifecycle of software 353, 354 Linton, Mark 344 List 257, 257c, 258c, 263, 369 list box 274 list traversal 257 ListBox 274o, 275ci, 279 ListIterator 67, 257, 257c, 258c, 264, 372 ListTraverser 267 LiteralExpression 244co, 344 implemented in Smalltalk 250 look-and-feel standards 87 support in Lexi 35, 47 M MacApp use of CHAIN OF RESPONSIBILITY 232 use of COMMAND 242 use of DECORATOR 179, 180 use of FACTORY METHOD 113, 115 Macbeth 1 MacFactory 50c Macintosh 48, 52 MacroCommand 235, 235c, 241 magic token 346 Manipulator 109, 110c MapSite 82, 82c Marriage of Convenience 149 Maze 82c, 84 MazeBuider 101 MazeFactory 92 as singleton 133 MazeGame 84, 114 MazePrototypeFactory 122 MEDIATOR 273 combined with OBSERVER 299 compared with CHAIN OF RESPONSIBILITY 348 compared with FACADE 282 compared with OBSERVER 346, 348 in catalog summary 9 use of delegation in 21 Mediator communicating with Colleague 278, 282 participant of MEDIATOR 276co, 277, 348i omitting abstract class of 278 mediator 274 member function 361, see also operation MEMENTO 283 in catalog summary 9 Memento combined with COMMAND 239, 287 participant of MEMENTO 285, 285c, 286i memento 284 costs associated with 286 language support for 287 MemoryStream 183 Menu 50c, 233c menu 233 configuring 60, 234 pull-down 58 MenuItem 59, 61c, 233, 233c metaclass 133, 361 method 361, see also operation Microsoft Windows 52 mixin class 16, 16c, 361 Model/View/Controller 4, 5 use of COMPOSITE 5, 172 use of FACTORY METHOD 115 use of OBSERVER 5, 303 use of STRATEGY 6 MonoGlyph 44, 45c Motif 35, 47, 48, 49, 51, 87 MotifFactory 49, 50c multiple dispatch, see dispatch, multiple multiple inheritance, see also mixin class used to implement class adapter 141 used to implement BRIDGE 156 MVC, see Model/View/Controller Meyer, Bertrand 149 N naming conventions 29, 31 FACTORY METHOD 31, 113 TEMPLATE METHOD 329 VISITOR 337 NeXT AppKit use of ADAPTER 149 use of BRIDGE 160 use of CHAIN OF RESPONSIBILITY 232 use of TEMPLATE METHOD 329 NEXTSTEP use of ADAPTER 145 use of PROXY 208, 212, 216 Node 333c NodeVisitor 332c nonterminal symbol 246 NonTerminalExpression participant of INTERPRETER 245c, 246 notification 294 null iterator, see iterator, null NullIterator 67c, 67–68, 262 NXProxy 208, 212 O object 11, 361 adapter, see adapter, object acquaintance 22 aggregation 22 as argument to request 345 aspect of 298 avoiding dependence on implementation of 24 composition, see object composition finding 11 granularity of 13, see also FLYWEIGHT guts 179 reference 361 shared, see FLYWEIGHT skin 179 specifying implementation of 14 specifying interface to 13 object composition 18, 361 compared with inheritance 18–20 compared with parameterized types 22 reuse through 19 object diagram 364, 361 Objects for States, see STATE Object Modeling Technique 7, 14, 363, 364 Objective C 90, 120, 121, 135, 144 Objectory 363 ObjectWindows use of ITERATOR 270 use of STRATEGY 323 ObjectWorks\\Smalltalk, see also Smalltalk use of ADAPTER 148–149 use of DECORATOR 182 use of FACADE 191 OBSERVER 293 combined with MEDIATOR 278, 282 compared with CHAIN OF RESPONSIBILITY 346, 348 compared with MEDIATOR 346, 348 in Model/View/Controller 5 in catalog summary 8 limiting unexpected updates in 296 Observer 300 combining with Subject 300 participant of OBSERVER 294c, 295, 295i, 300c, 347i OMT, see Object Modeling Technique operation 11, 361 abstract 15, 359 adding to classes 335 avoiding dependence on specific 24 class, see class operation concrete 327 dispatch, see dispatch hook, see hook operation overriding 16 primitive 327, 329 Orbix use of FACTORY METHOD 116 Originator participant of MEMENTO 285, 285c, 286i originator 284 overloading used to implement PROXY 211 used to implement VISITOR 72, 337 P parameterized types 21, 361, see also template compared with inheritance 22 compared with composition 22 parent class, see class, parent parent references defined in COMPOSITE 166 parser 247 part-whole, see recursive composition see also aggregation Pascal 4 passive iterator, see iterator, passive PassivityWrapper 182 path specifying multi-segment shapes 57 pattern language 356 Pattern Languages of Programs 357 pattern matching 243 persistence 209 Picture 163c, 164o PLoP, see Pattern Languages of Programs pluggable adapter 142 implementation of 144–145, 144c, 145c, 148, 149c PMFactory 50c PMIconWindow 151, 151c PMWindow 151, 151c PMWindowImp 152, 152c, 158–159 Point 373 Policy, see STRATEGY polymorphic iteration 258 implementing in C++ 261 polymorphism 14, 361 used with inheritance 18 postorder traversal, see traversal, postorder preorder traversal, see traversal, preorder PreorderIterator 67 member functions 68–69 Presentation Manager 35, 48, 52, 56, 57, 87, 151, 158 PricingVisitor 341 PrintDialog 223o, 224i private inheritance 361, see also inheritance, implementation Product participant of BUILDER 98c, 99 participant of FACTORY METHOD 108, 108c product objects 49 changing at run-time 119 creating in ABSTRACT FACTORY 90 exchanging 89 family of 87 varying representation of 100 protection proxy, see proxy, protection protocol 361 PROTOTYPE 117 compared with ABSTRACT FACTORY 126, 135 combined with COMMAND 238 compared with FACTORY METHOD 116, 120 in catalog summary 9 participant of PROTOTYPE 119, 119c used to implement ABSTRACT FACTORY 90 prototype 117 prototype manager 121 prototyping phase of lifecycle 353 PROXY 207 combined with ITERATOR 262 compared with DECORATOR 220 in catalog summary 9 Proxy participant of PROXY 209co, 209 proxy 207 protection 208, 210 remote 208, 210 virtual 208, 210 pseudocode 16, 16c, 365c Publish-Subscribe, see OBSERVER pull model 298 pull-down menu, see menu, pull-down purpose of design pattern, see design pattern, purpose push model 298 Q QOCA use of ADAPTER 143 use of INTERPRETER 255 use of MEMENTO 291 R RApp use of STRATEGY 323 RealSubject participant of PROXY 209co, 210 Receiver participant of COMMAND 236, 236c, 237i, 238 receiver 361 decoupling from sender 346 implicit 224 Rect 374 Rectangle 20, 20c recursive composition 36, see also COMPOSITE iteration over 262 of document structure 36 of graphic elements 163 of part-whole structures 164 redesign, causes of 24 redo, see undo/redo refactoring 326, 353 reference counting 210 RefinedAbstraction participant of BRIDGE 153c, 154 regular expression 243 representing in Smalltalk 248 RegularExpression 244c remote proxy, see proxy, remote RepetitionExpression 244co, 343 implemented in Smalltalk 249 request 11, 361 automatic forwarding of 229 encapsulation of 59, see also COMMAND guaranteed receipt of 226 representing 227 sequencing 234 Responder 232 reuse black-box 19, 354, 359 by composition 19 by parameterized types 21 by subclassing 19 code 26 designing for 24–25 frameworks 26 internal 25 maximizing 23 of implementation 18 toolkits 26 white-box 19, 354, 362 Rich Text Format 97 robust iterator, see iterator, robust Room 82c, 83 RTF, see Rich Text Format RTFReader 97, 97c RTL Smalltalk compiler use of COMPOSITE 172 use of STRATEGY 323 S scope of design pattern, see design pattern, scope Scrollbar 50c ScrollDecorator 176o, 176c Scroller 45, 46o Self 4, 121, 309 sender decoupling from receiver 346 SequenceExpression 244co, 343 implemented in Smalltalk 249 sequencing requests 234 shallow copy, see copy, shallow Shape 139, 140c, 146 shrinkability 320 signature 13, 361 SimpleCompositor 42, 42c, 315, 315c, 321 single static assignment form, SSA 172 single-dispatch, see dispatch, single SINGLETON 127 C++ implementation 129, 131 in catalog summary 9 registry of 130 subclassing 130 used to implement ABSTRACT FACTORY 90 Singleton participant of SINGLETON 127c, 128 Sketchpad 125 SkipList 258c, 265 skiplist 258 Smalltalk-80, see also ObjectWorks\\Smalltalk, Smalltalk/V use of BUILDER 105 use of COMPOSITE 172 use of FACTORY METHOD 115 use of INTERPRETER 251 use of ITERATOR 270 use of OBSERVER 303 use of SINGLETON 133 use of VISITOR 344 Smalltalk/V use of INTERPRETER 251 use of MEDIATOR 278, 281 smart pointers 209 smart references 209 software platform isolating application from 24 Solitaire, see SINGLETON SolverState 283–284 SPECTalk use of INTERPRETER 255 spelling checking 64 SpellingChecker 71–73 SpellingCheckerVisitor 75 StandardMazeBuilder 103 STATE 305 C++ idiom for, see envelope-letter idiom in catalog summary 9 use of delegation in 21 State participant of STATE 306, 306c state accumulating during traversal 336 avoiding inconsistent 308 extrinsic 196 incremental changes to 287 intrinsic 196 sharing 308, see also FLYWEIGHT state transitions atomic 308 defining 308 table-driven 308 STRATEGY 315 compared with DECORATOR 179 in catalog summary 8 Lexi’s use of 42 use in Choices 193 use in Model/View/Controller 6 use of delegation in 21 Strategy 180o making optional 320 participant of STRATEGY 316c, 316 strategy 315 Stream 183, 183c StreamDecorator 183, 183c stretchability 320 Stroustrup, Bjarne 160 structural pattern 10, 137 comparison between class and object scope 137 discussion of 219 subclass, see class, subclass subclassing extending functionality by 24 Subject 301 avoiding dangling references to 297 combining with Observer 300 participant of OBSERVER 294c, 295, 295i, 300c, 347i participant of PROXY 209co, 210 subject 294 mapping to observers 297 observing more than one 297 subsystem 361 simplifying interface to, see FACADE subtype, see type, subtype successor 224 connecting in chain 227 implementing chain of 225 superclass 361, see also class, parent supertype, see type, supertype Surrogate, see PROXY Sutherland, Ivan 125 swaps 323 T Target participant of ADAPTER 141, 141c TCP protocol 309 TCPConnection 305, 305c, 309 TCPState 305, 305c, 310 template 21, see also parameterized types used to implement COMMAND 239 used to implement FACTORY METHOD 113 used to implement STRATEGY 319, 323 TEMPLATE METHOD 325 calling Factory Methods 116 in catalog summary 9 naming conventions for 329 used to implement ITERATOR 270 template method 326 terminal symbol 246 shared using FLYWEIGHT 247 TerminalExpression participant of INTERPRETER 245c, 246 TEX 42, 97, 316 TeXCompositor 42c, 315, 315c, 322 TextShape 139, 140c, 146, 147 TextView use in ADAPTER 139, 140c, 146 use in DECORATOR 176c, 176o ThingLab 125 THINK use of COMMAND 242 use of OBSERVER 303 Token, see MEMENTO Tool 117, 118c, 313, 313c toolkit 26, 233, 362 see Andrew see Booch Components see Fresco see Interviews see IRIS Inventor see Object Windows see QOCA see THINK Transaction, see COMMAND transaction 236 transparent enclosure 43, see also DECORATOR traversal of aggregate objects, see also ITERATOR across class hierarchies 336 assigning responsibility for in VISITOR 339 inorder, preorder, postorder 262 TreeAccessorDelegate 145, 145c TreeDisplay 142, 144, 144c, 145c two-way adapter, see adapter, two-way type 13 compared with class 16 C++, definition in 17 Eiffel, definition in 17 Smalltalk, definition in 17 subtype 13 supertype 13 type-checking 332 to identify requests at run-time 228 see also dynamic_cast TypeCheckingVisitor 332c U undo/redo 59–60, 62–64, 235, 238, 283, 287 avoiding error accumulation during 239 Unidraw use of ADAPTER 143 use of CHAIN OF RESPONSIBILITY 232 use of COMMAND 232, 242 use of FACTORY METHOD 111 use of ITERATOR 270 use of MEDIATOR 282 use of MEMENTO 289 use of OBSERVER 303 use of PROTOTYPE 126 use of STATE 313 UnsharedConcreteFlyweight participant of FLYWEIGHT 199 updates encapsulating complex 299 limiting unexpected 296 protocol for in OBSERVER 296 triggering 297 V Validator 323 VariableExp 252 VariableRefNode 333c ViewManager 281, 281o Virtual Constructor, see FACTORY METHOD virtual memory framework 192 virtual proxy, see proxy, virtual VISITOR 331 combined with INTERPRETER 247, 255 in catalog summary 9 interaction diagram for Lexi 74 use in Lexi 76 use in compiler example 190, 331 use of delegation in 21 Visitor 75, 337 participant of VISITOR 334, 334c visitor 74, 332 VisualComponent 176, 176c, 180 vocabulary, defining common 352 W Wall 82c, 83 white-box reuse, see reuse, white-box Widget 224c, 230, 275c, 278 widget 48, 87 Glyph hierarchy 50 WidgetFactory 87 Window 20c, 39, 54c, 55c, 152, 156 configuring with WindowImp 57–58 interface 53 window systems 35 support in Lexi 51 WindowImp 55, 55c, 152, 152c, 157 subclasses 55 Windows, see Microsoft Windows WindowSystemFactory 57 Wrapper, see ADAPTER, DECORATOR WYSIWYG 33 X X Window System 52, 56, 57, 151, 158 XIconWindow 151, 151c XWindow 151, 151c XWindowImp 152, 152c, 158 Class Diagram Notation Object Diagram Notation Interaction Diagram Notation Design Pattern Relationships\n\nStructure and Interpretation of Computer Programs, Second Edition by Harold Abelson, Gerald Jay Sussman, Julie Sussman\n\nAndrew Wiles, conceptual framework, Donald Knuth, Douglas Hofstadter, Eratosthenes, functional programming, Gödel, Escher, Bach, higher-order functions, industrial robot, information retrieval, iterative process, Ivan Sutherland, Johannes Kepler, loose coupling, machine translation, Multics, probability theory / Blaise Pascal / Pierre de Fermat, Richard Stallman, Turing machine, wikimedia commons\n\nTHUNKS: A way of compiling procedure statements, with some comments on procedure declarations. Unpublished manuscript. (Also, private communication from Wallace Feurzeig.) Kaldewaij, Anne. 1990. Programming: The Derivation of Algorithms. New York: Prentice-Hall. Knuth, Donald E. 1973. Fundamental Algorithms. Volume 1 of The Art of Computer Programming. 2nd edition. Reading, MA: Addison-Wesley. Knuth, Donald E. 1981. Seminumerical Algorithms. Volume 2 of The Art of Computer Programming. 2nd edition. Reading, MA: Addison-Wesley. Kohlbecker, Eugene Edmund, Jr. 1986. Syntactic extensions in the programming language Lisp. Ph.D. thesis, Indiana University. –› Konopasek, Milos, and Sundaresan Jayaraman. 1984.\n\n…\n\nNext: Exercises, Prev: 5.5, Up: Top [Contents] Next: Figures, Prev: References, Up: Top [Contents] List of Exercises Chapter 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.20 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.30 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.40 1.41 1.42 1.43 1.44 1.45 1.46 Chapter 2 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 2.10 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.20 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.30 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.40 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.50 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.60 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.70 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.80 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.90 2.91 2.92 2.93 2.94 2.95 2.96 2.97 Chapter 3 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.20 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.30 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.40 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.50 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.60 3.61 3.62 3.63 3.64 3.65 3.66 3.67 3.68 3.69 3.70 3.71 3.72 3.73 3.74 3.75 3.76 3.77 3.78 3.79 3.80 3.81 3.82 Chapter 4 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 4.10 4.11 4.12 4.13 4.14 4.15 4.16 4.17 4.18 4.19 4.20 4.21 4.22 4.23 4.24 4.25 4.26 4.27 4.28 4.29 4.30 4.31 4.32 4.33 4.34 4.35 4.36 4.37 4.38 4.39 4.40 4.41 4.42 4.43 4.44 4.45 4.46 4.47 4.48 4.49 4.50 4.51 4.52 4.53 4.54 4.55 4.56 4.57 4.58 4.59 4.60 4.61 4.62 4.63 4.64 4.65 4.66 4.67 4.68 4.69 4.70 4.71 4.72 4.73 4.74 4.75 4.76 4.77 4.78 4.79 Chapter 5 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 5.10 5.11 5.12 5.13 5.14 5.15 5.16 5.17 5.18 5.19 5.20 5.21 5.22 5.23 5.24 5.25 5.26 5.27 5.28 5.29 5.30 5.31 5.32 5.33 5.34 5.35 5.36 5.37 5.38 5.39 5.40 5.41 5.42 5.43 5.44 5.45 5.46 5.47 5.48 5.49 5.50 5.51 5.52 Next: Figures, Prev: References, Up: Top [Contents] Next: Term Index, Prev: Exercises, Up: Top [Contents] List of Figures Chapter 1 1.1 1.2 1.3 1.4 1.5 Chapter 2 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 2.10 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.20 2.21 2.22 2.23 2.24 2.25 2.26 Chapter 3 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 3.10 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.20 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.30 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 Chapter 4 4.1 4.2 4.3 4.4 4.5 4.6 Chapter 5 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 5.10 5.11 5.12 5.13 5.14 5.15 5.16 5.17 5.18 Next: Term Index, Prev: Exercises, Up: Top [Contents] Next: Colophon, Prev: Figures, Up: Top [Contents] Term Index Any inaccuracies in this index may be explained by the fact that it has been prepared with the help of a computer. —Donald E. Knuth, Fundamental Algorithms (Volume 1 of The Art of Computer Programming) Jump to: A B C D E F G H I K L M N O P Q R S T U V W Z Index Entry Section A abstract models: 2.1.3 abstract syntax: 4.1.1 abstraction barriers: Chapter 2 abstraction barriers: 2.1.2 accumulator: 2.2.3 accumulator: 3.1.1 acquired: 3.4.2 action: 5.1.1 additive: 2.4.3 additively: Chapter 2 additively: 2.4 address: 5.3.1 address arithmetic: 5.3.1 agenda: 3.3.4 algebraic specification: 2.1.3 aliasing: 3.1.3 and-gate: 3.3.4 applicative-order: 4.2.1 applicative-order evaluation: 1.1.5 arbiter: 3.4.2 arguments: 1.1.1 assembler: 5.2.1 assertions: 4.4.1 assignment operator: 3.1 atomically: 3.4.2 automatic storage allocation: 5.3 average damping: 1.3.3 B B-trees: 2.3.3 backbone: 3.3.3 backquote: 5.5.2 backtracks: 4.3.1 balanced: 2.2.2 barrier synchronization: 3.4.2 base address: 5.3.1 Bertrand’s hypothesis: 3.5.2 bignum: 5.3.1 bindings: 3.2 binds: 1.1.8 binomial coefficients: 1.2.2 block structure: 1.1.8 bound variable: 1.1.8 box-and-pointer notation: 2.2 breakpoint: 5.2.4 broken heart: 5.3.2 bugs: Chapter 1 C cache-coherence: 3.4.1 call-by-name: 3.5.1 call-by-name: 4.2.2 call-by-name thunks: 3.5.1 call-by-need: 3.5.1 call-by-need: 4.2.2 call-by-need thunks: 3.5.1 capturing: 1.1.8 Carmichael numbers: 1.2.6 case analysis: 1.1.6 cell: 3.4.2 chronological backtracking: 4.3.1 Church numerals: 2.1.3 Church-Turing thesis: 4.1.5 clauses: 1.1.6 closed world assumption: 4.4.3 closure: Chapter 2 closure property: 2.2 code generator: 5.5.1 coerce: 2.5.2 coercion: 2.5.2 combinations: 1.1.1 comments: 2.2.3 compacting: 5.3.2 compilation: 5.5 compile-time environment: 5.5.6 composition: 1.3.4 compound data: Chapter 2 compound data object: Chapter 2 compound procedure: 1.1.4 computability: 4.1.5 computational process: Chapter 1 concurrently: 3.4 congruent modulo: 1.2.6 connectors: 3.3.5 consequent expression: 1.1.6 constraint networks: 3.3.5 constructors: 2.1 continuation procedures: 4.3.3 continued fraction: 1.3.3 control structure: 4.4.3 controller: 5.1 conventional interfaces: Chapter 2 conventional interfaces: 2.2.3 current time: 3.3.4 D data: Chapter 1 data: 2.1.3 data abstraction: Chapter 2 data abstraction: 2.1 data paths: 5.1 data-directed: 2.4 data-directed programming: Chapter 2 data-directed programming: 2.4.3 deadlock: 3.4.2 deadlock-recovery: 3.4.2 debug: Chapter 1 deep binding: 4.1.3 deferred operations: 1.2.1 delayed argument: 3.5.4 delayed evaluation: Chapter 3 delayed evaluation: 3.5 delayed object: 3.5.1 dense: 2.5.3 dependency-directed backtracking: 4.3.1 depth-first search: 4.3.1 deque: 3.3.2 derived expressions: 4.1.2 digital signals: 3.3.4 dispatching on type: 2.4.3 displacement number: 5.5.6 dotted-tail notation: 2.2.1 driver loop: 4.1.4 E empty list: 2.2.1 encapsulated: 3.1.1 enclosing environment: 3.2 entry points: 5.1.1 enumerator: 2.2.3 environment: 1.1.2 environment model: Chapter 3 environments: 3.2 Euclid’s Algorithm: 1.2.5 Euclidean ring: 2.5.3 evaluating: 1.1.1 evaluator: Chapter 4 event-driven simulation: 3.3.4 evlis tail recursion: 5.4.1 execution procedure: 4.1.7 explicit-control evaluator: 5.4 expression: 1.1.1 F failure continuation: 4.3.3 FIFO: 3.3.2 filter: 1.3.1 filter: 2.2.3 first-class: 1.3.4 fixed point: 1.3.3 fixed-length: 2.3.4 forcing: 4.2.2 forwarding address: 5.3.2 frame: 4.4.2 frame coordinate map: 2.2.4 frame number: 5.5.6 framed-stack: 5.4.1 frames: 3.2 free: 1.1.8 free list: 5.3.1 front: 3.3.2 full-adder: 3.3.4 function boxes: 3.3.4 functional programming: 3.1.3 functional programming languages: 3.5.5 G garbage: 5.3.2 garbage collection: 5.3 garbage collection: 5.3.2 garbage collector: 3.3.1 garbage-collected: 4.2.2 generic operations: Chapter 2 generic procedures: 2.3.4 generic procedures: 2.4 glitches: Chapter 1 global: 1.2 global: 3.2 global environment: 1.1.2 golden ratio: 1.2.2 grammar: 4.3.2 H half-adder: 3.3.4 half-interval method: 1.3.3 Halting Theorem: 4.1.5 headed list: 3.3.3 hiding principle: 3.1.1 hierarchical: 2.2 hierarchy of types: 2.5.2 higher-order procedures: 1.3 Horner’s rule: 2.2.3 I imperative programming: 3.1.3 indeterminates: 2.5.3 index: 5.3.1 indexing: 4.4.2 instantiated with: 4.4.1 instruction counting: 5.2.4 instruction execution procedure: 5.2.1 instruction sequence: 5.5.1 instruction tracing: 5.2.4 instructions: Chapter 5 instructions: 5.1.1 integerizing factor: 2.5.3 integers: 1.1 integrator: 3.5.3 interning: 5.3.1 interpreter: Chapter 1 interpreter: Chapter 4 invariant quantity: 1.2.4 inverter: 3.3.4 iterative improvement: 1.3.4 iterative process: 1.2.1 K k-term: 1.3.3 key: 2.3.3 L labels: 5.1.1 lazy evaluation: 4.2.1 lexical address: 5.5.6 lexical addressing: 4.1.3 lexical scoping: 1.1.8 linear iterative process: 1.2.1 linear recursive process: 1.2.1 linkage descriptor: 5.5.1 list: 2.2.1 list: 2.2.1 list: 2.2.1 list structure: 2.2.1 list-structured: 2.1.1 list-structured memory: 5.3 local evolution: 1.2 local state variables: 3.1 location: 5.3.1 logic-programming: Chapter 4 logical and: 3.3.4 logical deductions: 4.4.1 logical or: 3.3.4 M machine language: 5.5 macro: 4.1.2 map: 2.2.3 mark-sweep: 5.3.2 memoization: 1.2.2 Memoization: 3.3.3 memoize: 4.2.2 merge: 3.5.5 message passing: 2.1.3 message passing: 2.4.3 message-passing: 3.1.1 metacircular: 4.1 Metalinguistic abstraction: Chapter 4 Miller-Rabin test: 1.2.6 modular: Chapter 3 modulo: 1.2.6 modulo: 1.2.6 modus ponens: 4.4.3 moments in time: 3.4 Monte Carlo integration: 3.1.2 Monte Carlo simulation: 3.1.2 mutable data objects: 3.3 mutators: 3.3 mutex: 3.4.2 mutual exclusion: 3.4.2 N n-fold smoothed function: 1.3.4 native language: 5.5 needed: 5.5.1 networks: Chapter 4 Newton’s method: 1.3.4 nil: 2.2.1 non-computable: 4.1.5 non-strict: 4.2.1 nondeterministic: 3.4.1 nondeterministic choice point: 4.3.1 nondeterministic computing: Chapter 4 nondeterministic computing: 4.3 normal-order: 4.2.1 normal-order evaluation: 1.1.5 normal-order evaluation: Chapter 4 O obarray: 5.3.1 object program: 5.5 objects: Chapter 3 open-code: 5.5.5 operands: 1.1.1 operator: 1.1.1 operator: 4.1.6 or-gate: 3.3.4 order of growth: 1.2.3 ordinary: 2.5.1 output prompt: 4.1.4 P package: 2.4.3 painter: 2.2.4 pair: 2.1.1 pair: 2.1.1 parse: 4.3.2 Pascal’s triangle: 1.2.2 pattern: 4.4.1 pattern matcher: 4.4.2 pattern matching: 4.4.2 pattern variable: 4.4.1 pipelining: 3.4 pointer: 2.2 poly: 2.5.3 power series: 3.5.2 predicate: 1.1.6 predicate: 1.1.6 prefix: 2.3.4 prefix code: 2.3.4 prefix notation: 1.1.1 pretty-printing: 1.1.1 primitive constraints: 3.3.5 probabilistic algorithms: 1.2.6 procedural abstraction: 1.1.8 procedural epistemology: Preface 1e procedure: 1.2.1 procedure definitions: 1.1.4 procedures: Chapter 1 process: 1.2.1 program: Chapter 1 programming languages: Chapter 1 prompt: 4.1.4 pseudo-random: 3.1.2 pseudodivision: 2.5.3 pseudoremainder: 2.5.3 Q quasiquote: 5.5.2 queries: 4.4 query language: 4.4 queue: 3.3.2 quote: 2.3.1 R Ramanujan numbers: 3.5.3 rational functions: 2.5.3 RC circuit: 3.5.3 read-eval-print loop: 1.1.1 reader macro characters: 4.4.4.7 real numbers: 1.1 rear: 3.3.2 recursion equations: Chapter 1 Recursion theory: 4.1.5 recursive: 1.1.3 recursive: 1.1.8 recursive process: 1.2.1 red-black trees: 2.3.3 referentially transparent: 3.1.3 register machine: Chapter 5 register table: 5.2.1 registers: Chapter 5 released: 3.4.2 remainder of: 1.2.6 resolution principle: 4.4 ripple-carry adder: 3.3.4 robust: 2.2.4 RSA algorithm: 1.2.6 rules: 4.4 rules: 4.4.1 S satisfy: 4.4.1 scope: 1.1.8 selectors: 2.1 semaphore: 3.4.2 separator code: 2.3.4 sequence: 2.2.1 sequence accelerator: 3.5.3 sequences: 1.3.1 serializer: 3.4.2 serializers: 3.4.2 series RLC circuit: 3.5.4 shadow: 3.2 shared: 3.3.1 side-effect bugs: 3.1.3 sieve of Eratosthenes: 3.5.2 smoothing: 1.3.4 source language: 5.5 source program: 5.5 sparse: 2.5.3 special forms: 1.1.3 stack: 1.2.1 stack: 5.1.4 state variables: 1.2.1 state variables: 3.1 statements: 5.5.1 stop-and-copy: 5.3.2 stratified design: 2.2.4 stream processing: 1.1.5 streams: Chapter 3 streams: 3.5 streams: 3.5 strict: 4.2.1 subroutine: 5.1.3 substitution: 1.1.5 substitution model: 1.1.5 subtype: 2.5.2 success continuation: 4.3.3 summation of a series: 1.3.1 summer: 3.5.3 supertype: 2.5.2 symbolic expressions: Chapter 2 syntactic sugar: 1.1.3 syntax: 4.1 systematically search: 4.3.1 systems: Chapter 4 T tableau: 3.5.3 tabulation: 1.2.2 tabulation: 3.3.3 tagged architectures: 5.3.1 tail-recursive: 1.2.1 tail-recursive: 5.4.2 target: 5.5.1 thrashing: UTF thunk: 4.2.2 thunks: 4.2.2 time: 3.4 time segments: 3.3.4 tower: 2.5.2 tree accumulation: 1.1.3 tree recursion: 1.2.2 trees: 2.2.2 truth maintenance: 4.3.1 Turing machine: 4.1.5 type field: 5.3.1 type tag: 2.4.2 type tags: 2.4 type-inferencing: 3.5.4 typed pointers: 5.3.1 U unbound: 3.2 unification: 4.4 unification: 4.4.2 unification: 4.4.2 unification algorithm: 4.4 univariate polynomials: 2.5.3 universal machine: 4.1.5 upward-compatible extension: 4.2.2 V value: 1.1.2 value of a variable: 3.2 values: 2.3.1 variable: 1.1.2 variable-length: 2.3.4 vector: 5.3.1 W width: 2.1.4 wires: 3.3.4 wishful thinking: 2.1.1 Z zero crossings: 3.5.3 Jump to: A B C D E F G H I K L M N O P Q R S T U V W Z Next: Colophon, Prev: Figures, Up: Top [Contents] Prev: Term Index, Up: Top [Contents] Colophon On the cover page is Agostino Ramelli’s bookwheel mechanism from 1588."
    }
}