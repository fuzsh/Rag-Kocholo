{
    "id": "correct_subsidiary_00004_3",
    "rank": 31,
    "data": {
        "url": "https://programmingisterrible.com/post/73023853878/getting-away-with-rewriting-code-from-scratch",
        "read_more_link": "",
        "language": "en",
        "title": "Getting away with rewriting code from scratch.",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://px.srvcs.tumblr.com/impixu?T=1721913849&J=eyJ0eXBlIjoicG9zdCIsInVybCI6Imh0dHA6Ly9wcm9ncmFtbWluZ2lzdGVycmlibGUuY29tL3Bvc3QvNzMwMjM4NTM4NzgvZ2V0dGluZy1hd2F5LXdpdGgtcmV3cml0aW5nLWNvZGUtZnJvbS1zY3JhdGNoIiwicmVxdHlwZSI6MCwicm91dGUiOiIvcG9zdC86aWQvOnN1bW1hcnkiLCJwb3N0cyI6W3sicG9zdGlkIjoiNzMwMjM4NTM4NzgiLCJibG9naWQiOjg3NTkxMjgxLCJzb3VyY2UiOjMzfV0sIm5vc2NyaXB0IjoxfQ==&U=BKDLPHNIBL&K=7e497990327e6c564ef657e9e6916f2449b3ec0e81688542635e5671259e3eb3&R="
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "programmingisterrible"
        ],
        "publish_date": "2014-01-11T23:25:19+00:00",
        "summary": "",
        "meta_description": "Getting away with rewriting code from scratch. Joel Spolsky’s oft cited tribute to the sunk cost fallacy, Things You Should Never Do, Part I, extolls the follies of starting from scratch. With a...",
        "meta_lang": "",
        "meta_favicon": "https://64.media.tumblr.com/avatar_b063f2c2fd26_128.pnj",
        "meta_site_name": "Tumblr",
        "canonical_link": "https://programmingisterrible.com/post/73023853878/getting-away-with-rewriting-code-from-scratch",
        "text": "Joel Spolsky’s oft cited tribute to the sunk cost fallacy, Things You Should Never Do, Part I, extolls the follies of starting from scratch. With a length less than one percent of a Steve Yegge ramble, and with almost as much nuance as a tweet, he warns people about the dangers of starting afresh–\n\nThey did it by making the single worst strategic mistake that any software company can make: They decided to rewrite the code from scratch.\n\nWhen you throw away code and start from scratch, you are throwing away all that knowledge. All those collected bug fixes. Years of programming work.\n\nYou are throwing away your market leadership. You are giving a gift of two or three years to your competitors, and believe me, that is a long time in software years.\n\nThe reality of Netscape’s demise isn’t so simple, as jwz elaborates in the excellent piece Groupware Bad–\n\nSee, there were essentially two things that killed Netscape (and the real answer is book length, so I’m simplifying greatly, but)\n\nThe one that got most of the press was Microsoft’s illegal use of their monopoly in one market (operating systems) to destroy an existing market (web browsers) by driving the market price for browsers to zero, instantaneously eliminating something like 60% of Netscape’s revenue. Which was, you know, bad.\n\nBut the other one is that Netscape 4 was a really crappy product. We had built this really nice entry-level mail reader in Netscape 2.0, and it was a smashing success. Our punishment for that success was that management saw this general-purpose mail reader and said, “since this mail reader is popular with normal people, we must now pimp it out to `The Enterprise’, call it Groupware, and try to compete with Lotus Notes!”\n\nTo do this, they bought a company called Collabra who had tried (and, mostly, failed) to do something similar to what we had accomplished. They bought this company and spliced 4 layers of management in above us. Somehow, Collabra managed to completely take control of Netscape: it was like Netscape had gotten acquired instead of the other way around.\n\nAnd then they went off into the weeds so badly that the Collabra-driven “3.0” release was obviously going to be so mind-blowingly late that “2.1” became “3.0” and “3.0” became “4.0”. (So yeah, 3.0 didn’t just seem like the bugfix patch-release for 2.0: it was.)\n\nIgnoring Microsoft’s sneaky tricks, the root problem Netscape had was abandoning code that worked, not rewriting it. Although for Netscape a rewrite helped in their demise, Microsoft made a similar mistake in letting Internet Explorer languish, while a rewrite (Firefox) gained traction.\n\nYou can rewrite old Code, but the old Code still needs to be maintained, and migrations should be slow and steady. In my short life as a programmer, I’ve managed to rewrite two codebases without destroying the future of the company by following this simple dogma.\n\nThere are good, and bad reasons for rewriting code. jwz’s CADT model aptly sums up the bad, but sometimes rewrites are good because it is too expensive to add a feature to existing code, or the depth of the changes are *highly* invasive. Sometimes it is that the old code is a lovecraftian horror.\n\nThe reason is that they think the old code is a mess. And here is the interesting observation: they are probably wrong.\n\nSometimes, the code is a genuine mess. I replaced a VB6/XSLT horror with something less grotesque in python, with the added benefit that we could now test code before deploying it.\n\nIn another instance, the code relied on amazon web services, and now obsolete unmaintained libraries. The project needed to work outside of amazon, and on a new platform. The code itself was littered with customer specific hacks and fixes which weren’t necessary for the new project. Starting afresh with hindsight allowed us to build a system where we could keep these one-off tweaks contained and separated.\n\nIn both cases, the old code was still maintained, and many years on, the old code is still running in production. However, the new code now does the overwhelming majority of the work. Migrations are done slowly, one at a time, and usually when it breaks in such a way that only the new version can handle it.\n\nTotal rewrites can often be better than rewriting a substantial chunk of your code too. In Interesting bits from “An Analysis of Errors in a Reuse-Oriented Development Environment”, MononcQc (or Fred), neatly sums up some studies on the effectiveness of rewrites–\n\nif you need to rewrite more than 25% of a piece of code, rewriting it from scratch may be as good of an option when it comes to errors and defects.\n\nRewriting your code from scratch could be the single biggest mistake you make, but equally so, not-rewriting your code could lead to the same result. The old saying “There are only two types of software, failures and legacy code” still has some truth in it. Even if you do decide to rewrite things, the old code won’t disappear overnight."
    }
}