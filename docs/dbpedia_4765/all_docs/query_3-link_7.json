{
    "id": "dbpedia_4765_3",
    "rank": 7,
    "data": {
        "url": "http://freeadhocudf.org/documentation_english/dok_eng_check.html",
        "read_more_link": "",
        "language": "en",
        "title": "FreeAdhocUDF checksum functions",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://freeadhocudf.org/images/FreeAdhocUDF.png",
            "http://freeadhocudf.org/images/flag_deutschland.png",
            "http://freeadhocudf.org/images/flag_uk0.png",
            "http://freeadhocudf.org/images/flag_frankreich.png",
            "http://freeadhocudf.org/images/erster.png",
            "http://freeadhocudf.org/images/voriger.png",
            "http://freeadhocudf.org/images/home.png",
            "http://freeadhocudf.org/images/naechster.png",
            "http://freeadhocudf.org/images/letzter.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/mailinglist.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/vorschlag.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/mail.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/drucken.png",
            "http://freeadhocudf.org/images/leer10x10.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/voriger.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/oben.png",
            "http://freeadhocudf.org/images/linie.png",
            "http://freeadhocudf.org/images/naechster.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Christoph Theuring"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../fau.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Checksum functions: common mathematical algorithm Preliminary note from Wikipedia (http://en.wikipedia.org/wiki/Checksum):\n\nA checksum or hash sum is a fixed-size datum computed from an arbitrary block of digital data for the purpose of detecting accidental errors that may have been introduced during its transmissions or storage. The integrity of the data can be checked at any later time by recomputing the checksum and comparing it with the stored one. If the checksums do not match, the data was certainly altered.\n\nChecksum functions are related to hash functions, fingerprints, randomisation functions, and cryptographic hash functions. However, each of those concepts has different applications and therefore different design goals. Check digits and parity bits are special cases of checksums, appropriate for small blocks of data (such as Social Security numbers, bank account numbers, computer words, single bytes, etc.). Some error-correcting codes are based on special checksums that not only detect common errors but also allow the original data to be recovered in certain cases.\n\nF_CROSSSUM function from adhoc Entrypoint crosssum compatible with UTF-8 Input INTEGER\n\nnatural number\n\nOutput INTEGER cross sum from input\n\nThe cross sum is the addition of the digits of a number.\n\ni.e. 12345: 5+4+3+2+1 = 15\n\nTest-SQL\n\nSELECT 15 AS ISCORRECT, F_CROSSSUM(12345) FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_CROSSSUM(NULL) FROM RDB$DATABASE;\n\nF_CROSSDIFF function from adhoc Entrypoint crossdiff compatible with UTF-8 Input INTEGER\n\nnatural number Output INTEGER cross diff from input\n\nThe alternate cross sum (also called cross diff) is to alternate addition and subtraction the digits of a number starting right.\n\ni.e. 12345: 5-4+3-2+1 = 3\n\nTest-SQL\n\nSELECT 3 AS ISCORRECT, F_CROSSDIFF(12345) FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_CROSSDIFF(NULL) FROM RDB$DATABASE;\n\nF_WEIGHTCROSSSUM function from adhoc Entrypoint weightcrosssum compatible with UTF-8 Input INTEGER\n\nnatural number Output INTEGER weighted cross sum from input\n\nThe weighted cross sum is to add all multipled digits of the number with its place value, starting right.\n\ni.e. 12345: 5*1 + 4*2 + 3*3 + 2*4 + 1*5 = 35\n\nTest-SQL\n\nSELECT 35 AS ISCORRECT, F_WEIGHTCROSSSUM(12345) FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_WEIGHTCROSSSUM(NULL) FROM RDB$DATABASE;\n\nF_ITERATECROSSSUM function from adhoc Entrypoint iteratecrosssum compatible with UTF-8 Input INTEGER\n\nnatural number Output INTEGER iterate (or single-digit) cross sum from input\n\nIterate cross sum is to build the cross sum of a number as long as the result is single digit.\n\ni.e. 12345: 5+4+3+2+1 = 15 -> 5+1 = 6\n\nTest-SQL\n\nSELECT 6 AS ISCORRECT, F_ITERATECROSSSUM(12345) FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ITERATECROSSSUM(NULL) FROM RDB$DATABASE;\n\nChecksum functions: employed checksums/checkdigits F_ENCRYPTMD5 compatibility to FreeUDFLibC Entrypoint encryptmd5or compatible with UTF-8 Input CSTRING(128) String to encrypt Output CSTRING(33) String enrypted with MD5 Attention: the md5-hash from a string from an ISO-database IS NOT THE SAME as a md5-hash from the SAME string from an UTF-8 database! Only with md5-hashes from strings with the same character set (i.e. both from one database) are suitable for identity-checks.\n\nThese function never returns <null> because theres is a correct enryption for <null>.\n\nTestSQL\n\nSELECT 'e7d31845480111fdba3316129e166860' AS ISCORRECT, F_ENCRYPTMD5('Pauline') FROM RDB$DATABASE;\n\nSELECT 'd41d8cd98f00b204e9800998ecf8427e' AS ISCORRECT, F_ENCRYPTMD5('') FROM RDB$DATABASE;\n\nPreliminary note to GTIN-Number from Wikipedia (http://en.wikipedia.org/wiki/GTIN):\n\nGlobal Trade Item Number (GTIN) is an identifier for trade items developed by GS1 (comprising the former EAN International and Uniform Code Council). Such identifiers are used to look up product information in a database (often by inputting the number through a bar code scanner pointed at an actual product) which may belong to a retailer, manufacturer, collector, researcher, or other entity. The uniqueness and universality of the identifier is useful in establishing which product in one database corresponds to which product in another database, especially across organizational boundaries.\n\nGTIN is an \"umbrella\" term used to describe the entire family of GS1 data structures for trade items (products and services) identification. GTINs may be 8, 12, 13 or 14 digits long, and can be constructed using any of four numbering structures, depending upon the exact application. GTIN-8s will be encoded in an EAN-8 bar code. GTIN-12s may be shown in UPC-A, ITF-14, or GS1-128 bar codes. GTIN-13s may be encoded in EAN-13, ITF-14 or GS1-128 bar codes, and GTIN-14s may be encoded in ITF-14 or GS1-128 bar codes. The choice of bar code will depend on the application; for example, items to be sold at a retail should be marked with EAN-8, EAN-13, UPC-A or UPC-E bar codes.\n\n- EAN = International Article Number (former European Article Number)\n\n- UCC = Uniform Code Council now GS1\n\n- UPC = Universal Product Code\n\n- EPC = elektronic Product Code\n\n- NVE = Number of transport unit\n\n- GRAI = Global Returnable Asset IDentifier\n\nIdentifier former identifier GTIN-14 â GTIN-13 EANÂ·UCC-13, EAN-13 GTIN-12 EANÂ·UCC-12, UCC-12, UPC GTIN-8 EANÂ·UCC-8, EAN-8\n\nA Check Digit Calculator for GTIN-Numbers http://www.gs1.org/productssolutions/barcodes/support/check_digit_calculator.html\n\nF_GTIN8CHECK function from adhoc Entrypoint gtin8check compatible with UTF-8 F_UPC12CHECK function from adhoc Entrypoint upc12check compatible with UTF-8 F_GTIN13CHECK function from adhoc Entrypoint gtin13check compatible with UTF-8 F_GTIN14CHECK function from adhoc Entrypoint gtin14check compatible with UTF-8 F_NVE18CHECK function from adhoc Entrypoint nve18check compatible with UTF-8 Input CSTRING(250) number to check as string Output INTEGER checkdigit from input\n\nCalculating the checkdigit of a GTIN number. Spaces, hyphens and digits more than max. length are ignored.\n\nTest-SQL\n\nSELECT 0 AS ISCORRECT, F_GTIN8CHECK('1234567') FROM RDB$DATABASE;\n\nSELECT 0 AS ISCORRECT, F_GTIN8CHECK('1-2a3b4c5d6e7fxx999') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_GTIN8CHECK(NULL) FROM RDB$DATABASE;\n\nSELECT 2 AS ISCORRECT, F_UPC12CHECK('12345678901') FROM RDB$DATABASE;\n\nSELECT 7 AS ISCORRECT, F_GTIN13CHECK('762220000460') FROM RDB$DATABASE;\n\nSELECT 8 AS ISCORRECT, F_GTIN14CHECK('0123456789012') FROM RDB$DATABASE;\n\nSELECT 0 AS ISCORRECT, F_NVE18CHECK('01234567890123456') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_GTIN8CHECK(NULL') FROM RDB$DATABASE;\n\nF_GTIN8 function from adhoc Entrypoint gtin8 compatible with UTF-8 F_UPC12 function from adhoc Entrypoint upc12 compatible with UTF-8 F_GTIN13 function from adhoc Entrypoint gtin13 compatible with UTF-8 F_GTIN14 function from adhoc Entrypoint gtin14 compatible with UTF-8 F_NVE18 function from adhoc Entrypoint nve18 compatible with UTF-8 Input CSTRING(250) number to check as string Output CSTRING(8...18) complete number include checkdigit\n\nComplete number include checkdigit. Spaces, hyphens and digits more than max. length are ignored.\n\nTest-SQL\n\nSELECT '12345670' AS ISCORRECT, F_GTIN8('1234567') FROM RDB$DATABASE;\n\nSELECT '123456789012' AS ISCORRECT, F_UPC12('12345678901') FROM RDB$DATABASE;\n\nSELECT '7622200004607' AS ISCORRECT, F_GTIN13('762220000460') FROM RDB$DATABASE;\n\nSELECT '01234567890128' AS ISCORRECT, F_GTIN14('0123456789012') FROM RDB$DATABASE;\n\nSELECT '012345678901234560' AS ISCORRECT, F_NVE18('01234567890123456') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_GTIN8(NULL') FROM RDB$DATABASE;\n\nPreliminary note to ISBN-Number from Wikipedia (http://en.wikipedia.org/wiki/ISBN):\n\nThe International Standard Book Number (ISBN) is a unique, numerical commercial book identifier, based upon the 9-digit Standard Book Numbering (SBN) code created by Gordon Foster, now Emeritus Professor of Statistics at Trinity College, Dublin for the booksellers and stationers W.H. Smith and others in 1966. The 10-digit International Standard Book Number (ISBN) format was developed by the International Organization for Standardization and published as an international standard, ISO 2108, in 1970. (However, the 9-digit SBN code was used in the UK until 1974.) Currently, the ISO TC 46/SC 9 is responsible for the standard.\n\nSince 1 January 2007, International Standard Book Numbers have been of 13 digits, compatible with Bookland EAN-13s.\n\nFor other forms of publications, like periodicals or music there are own number systems:\n\n- ISAN â International Standard Audiovisual Number\n\n- ISMN â Internationale Standard-Music-Number (for printed or digital musical notations)\n\n- ISRC â The International Standard Recording Code\n\n- ISRN â International Standard Technical Report Number\n\n- ISSN â International Standard Serial Number (for periodicals)\n\n- ISWC â International Standard Musical Work Code\n\nPublisher identification code numbers are unlikely to be the same in the \"978\" and \"979\" ISBNs, like-wise, there is no guarantee that language area code numbers will be the same. Moreover, the ten-digit ISBN check digit generally is not the same as the thirteen-digit ISBN check digit. Because the EAN/UCC-13 is part of the Global Trade Item Number (GTIN) system (that includes the EAN/UCC-14, the UPC-12, and the EAN-8), it is expected that ISBN-generating software should accommodate fourteen-digit ISBNs.\n\nF_ISBN10CHECK function from adhoc Entrypoint isbn10check\n\ncompatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output INTEGER checkdigit from input F_ISBN10 function from adhoc Entrypoint isbn10 compatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output CSTRING(13) complete, formated ISBN-10 number include checkdigit Fixed length of 10 characters (with hyphens 13). Allowed characters are 0-9, all other characters and all characters more than length 8 will be taken away.\n\nTest-SQL\n\nSELECT 3 AS ISCORRECT, F_ISBN10CHECK('3-88229-192') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ISBN10CHECK(NULL) FROM RDB$DATABASE;\n\nSELECT '3-88229-192-3' AS ISCORRECT, F_ISBN10('3-88229-192') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ISBN10(NULL) FROM RDB$DATABASE;\n\nF_ISBN13CHECK function from adhoc Entrypoint isbn13check\n\ncompatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output INTEGER checkdigit from input F_ISBN13 function from adhoc Entrypoint isbn13 compatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output CSTRING(17) complete, formated ISBN-13 number include checkdigit Fixed length of 13 characters (with hyphens 17). Allowed characters are 0-9, all other characters and all characters more than length 13 will be taken away.\n\nTest-SQL\n\nSELECT 6 AS ISCORRECT, F_ISBN13CHECK('978-3-88229-192') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ISBN13CHECK(NULL) FROM RDB$DATABASE;\n\nSELECT '978-3-88229-192-6' AS ISCORRECT, F_ISBN13('978-3-88229-192') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ISBN13(NULL) FROM RDB$DATABASE;\n\nF_ISSN8CHECK function from adhoc Entrypoint issn8check\n\ncompatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output INTEGER checkdigit from input F_ISSN8 function from adhoc Entrypoint issn8 compatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output CSTRING(9) complete, formated ISSN-8 number include checkdigit Fixed length of 8 characters (with hyphen 9). Allowed characters are 0-9, all other characters and all characters more than length 8 will be taken away.\n\nTest-SQL\n\nSELECT 9 AS ISCORRECT, F_ISSN8CHECK('0724-867') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ISSN8CHECK(NULL) FROM RDB$DATABASE;\n\nSELECT '0724-8679' AS ISCORRECT, F_ISSN8('0724-867') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_ISSN8(NULL) FROM RDB$DATABASE;\n\nF_UPSTNCHECK function from adhoc Entrypoint upstncheck\n\ncompatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output INTEGER checkdigit from input F_UPSTN function from adhoc Entrypoint upstn compatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output CSTRING(18) complete, formated UPS tracking number include checkdigit UPS Tracking-Nummer.\n\nFixed length of 18 characters. Allowed characters are 0-9 and A-Z, all other characters and all characters more than length 18 will be taken away.\n\nTest-SQL\n\nSELECT 6 AS ISCORRECT, F_UPSTNCHECK('1Z 591580 68 5558773') FROM RDB$DATABASE;\n\nSELECT 6 AS ISCORRECT, F_UPSTNCHECK('591580685558773') FROM RDB$DATABASE;\n\nSELECT 6 AS ISCORRECT, F_UPSTNCHECK('59158068555877311111111') FROM RDB$DATABASE;\n\nSELECT 3 AS ISCORRECT, F_UPSTNCHECK('1Z 0F6915 68 2239322') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_UPSTNCHECK(NULL) FROM RDB$DATABASE;\n\nSELECT '1Z 591580 68 55587736' AS ISCORRECT, F_UPSTN('1Z 591580 68 5558773') FROM RDB$DATABASE\n\nSELECT '1Z 0F6915 68 22393223' AS ISCORRECT, F_UPSTN('1Z 0F6915 68 22393223') FROM RDB$DATABASE\n\nSELECT NULL AS ISCORRECT, F_UPSTN(NULL) FROM RDB$DATABASE;\n\nF_2OF5CHECK function from adhoc Entrypoint twooffivecheck\n\ncompatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output INTEGER checkdigit from input F_2OF5 function from adhoc Entrypoint twooffive compatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string 2 of 5 number.\n\nVariable length. Allowed characters are 0-9, all other characters will be taken away.\n\nCan be used for 2of5 industry and 2of5 interleaved.\n\nTest-SQL\n\nSELECT 5 AS ISCORRECT, F_2OF5CHECK('123456') FROM RDB$DATABASE;\n\nSELECT 5 AS ISCORRECT, F_2OF5CHECK('ABC123456XYZ') FROM RDB$DATABASE;\n\nSELECT 0 AS ISCORRECT, F_2OF5CHECK('1234567') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_2OF5CHECK(NULL) FROM RDB$DATABASE;\n\nSELECT '1234565' AS ISCORRECT, F_2OF5('123456') FROM RDB$DATABASE;\n\nSELECT '12345670' AS ISCORRECT, F_2OF5('1234567') FROM RDB$DATABASE;\n\nSELECT NULL AS ISCORRECT, F_2OF5(NULL) FROM RDB$DATABASE;\n\nF_CODE39CHECK function from adhoc Entrypoint code39check\n\ncompatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output INTEGER checkdigit from input F_CODE39 function from adhoc Entrypoint code39 compatible with UTF-8 Input CSTRING(250)\n\nnumber to check as string Output CSTRING(13) complete code 39 number include checkdigit"
    }
}