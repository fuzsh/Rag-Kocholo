{
    "id": "dbpedia_4765_3",
    "rank": 61,
    "data": {
        "url": "https://keygen.sh/blog/how-to-generate-license-keys/",
        "read_more_link": "",
        "language": "en",
        "title": "How to Generate Secure License Keys in 2024",
        "top_image": "https://keygen.sh/images/how-to-generate-secure-license-keys.jpg",
        "meta_img": "https://keygen.sh/images/how-to-generate-secure-license-keys.jpg",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Software vendors should move away from legacy license key algorithms such as partial key verification to generating secure license keys using modern algorithms like elliptic-curve and RSA cryptography.",
        "meta_lang": "",
        "meta_favicon": "/images/favicon-32x32.png?v=2",
        "meta_site_name": "Keygen",
        "canonical_link": "https://keygen.sh/blog/how-to-generate-license-keys/",
        "text": "Generating and verifying license keys is a common requirement for a lot commercial software these days. From desktop applications such as those built on frameworks like Electron or Qt, to dual-licensed open source packages and libraries like Sidekiq, to a variety of other on-premise software applications and dependencies.\n\nThey all have one common denominator: the need for secure licensing.\n\nBut as an independent software vendor (ISV), you may be asking yourself â \"what technology should I choose for software licensing in 2021?\"\n\nWell, before we get to the answer, we need to understand a bit of history.\n\nThe 2 big attack vectors for licensing\n\nWhen it comes to software licensing, the key generation and verification algorithms vendors choose can make or break a licensing system. After an algorithm has been compromised, a vendor can no longer trust any previously generated license keys, including those belonging to legit end-users.\n\nWhen this happens, there are a couple things we can do:\n\nMove to an online licensing server, where we can check keys against a list of valid keys. If you choose to build an in-house licensing system, this can be incredibly expensive, both up-front and in the long-term. This can also limit our application's license checks to online-only, which may be less than ideal.\n\nMove to a modern license key algorithm. This resolution has the rather unfortunate side-effect of invalidating all previously generated license keys, including those belonging to legit end-users, requiring a migration plan.\n\nBoth of these solutions can come at a huge cost, both in terms of end-user trust, support costs, as well as engineering resources. Suffice it to say, it's a bad situation. And ideally, what we want to do is avoid the situation entirely, by choosing a modern, secure license key algorithm from the get-go.\n\nBut before we cover how, let's take a quick look at a couple of the largest attack vectors for licensing, which may help us understand how to defend against them.\n\nSoftware cracking\n\nSoftware \"cracking\" is the act of directly modifying the source code of a software application to bypass its licensing system entirely. As much as vendors hate to hear it: all applications installed on an end-users device are susceptible to cracking.\n\n(After all, an application is simply made up of bits and bytes, ones and zeroes, stored locally, and those can always be modified no matter how hard a vendor may try.)\n\nSoftware cracks usually only work for a single version of a particular application, since the application code itself is modified to bypass any license checks (meaning a software update often requires an updated crack for the new application code.) Distributing a cracked version of an application falls on the bad actor.\n\nCracks are one of the more common attack vectors for software applications.\n\nSoftware keygens\n\nThe other major attack vector is known as a software \"keygen\", which is much more ominous. As its name may imply, a keygen is a form of software, often a separate program or webpage, that generates valid license keys, i.e. a key-generator, or \"keygen.\"\n\nMost software vendors have some type of license keygen, which they keep secret. For example, after a user submits a successful purchase order, part of the order process calls a key generator, which generates a valid, legitimate license key for the new customer.\n\nBut when it comes to vulnerable, legacy license key algorithms, a bad actor may also be able to accomplish a similar feat â generating valid, albeit illegitimate, license keys, granted they put in some effort to reverse-engineer the algorithm.\n\nDepending on your key generation algorithm, a keygen like this may only be able to generate valid key for a single version of an application. But in the worst case, a bad actor can create a keygen that generates valid license keys that work across all versions of an application, requiring a complete upheaval of the product's licensing system.\n\nIt's also worth mentioning that keygens are much more valuable to bad actors than cracks, because a keygen can be used on the real application, vs the bad actor having to distribute a modified, cracked version of the application.\n\nThe legacy license key algorithm\n\nNow, we've alluded to this legacy algorithm, which is actually still in use to this day by a number of software vendors. It's called Partial Key Verification, and although it may seem like a good-enough system, it is security through obscurity.\n\nWhy? Let's dive in and find out.\n\nPartial key verification\n\nThese days, writing a partial key verification (PKV) algorithm is actually more work than simply doing it the right way. But for the sake of understanding, let's write our own partial key verification system. And then we're going to break it.\n\nA quick definition of PKV\n\nPartial Key Verification is a software license key algorithm that partitions a product key into multiple \"subkeys.\" With each new version of your product, your license key verification algorithm will check a different subset of a license's subkeys.\n\nIt's called partial key verification because the verification algorithm never tests the full license key, it only tests a subset of subkeys. (Or so they say.)\n\nI'd recommend reading the above blog post by Brandon from 2007, with his partial serial number verification system being written in Delphi. But if you're not into Delphi, we'll be porting the partial key verification algorithm to Node.\n\nAn implementation of PKV\n\nThe main components of a PKV key are the seed value and its subkeys (together referred to as the serial), and then a checksum. The subkeys are derived from the unique seed value, accomplished using bit twiddling, and the checksum is to ensure that the serial (seed + subkeys) does not contain a typo. (Yesâ¦ in the olden days, a person actually had to input license keys by-hand.)\n\nWe're not going to get into the specifics on each of these components, e.g. how the checksum works, since Brandon's post covers all of that in detail.\n\nWith that said, let's assume the role of a business that is about to release a new application. We're going to write a keygen that we, the business, can use to generate legitimate keys for our end-users after they purchase our product.\n\nOur PKV keygen should be a tightly kept trade secret, because with it comes the power to craft license keys at-will. But we'll soon realize, much to our demise, keeping a PKV keygen secret is actually not possible.\n\nSo, without further ado â let's begin.\n\nHere's what a PKV keygen looks like:\n\nconstcrypto=require('crypto')\n\n// Format a number to a fixed-length hexadecimal string\n\nfunctiontoFixedHex(num, len) {\n\nreturn num.toString(16).toUpperCase().padStart(len, '0').substring(0, len)\n\n}\n\n// Derive a subkey from the seed (a, b, c being params for bit twiddling)\n\nfunctiongetSubkeyFromSeed(seed, a, b, c) {\n\nif (typeof seed ==='string') {\n\nseed =parseInt(seed, 16)\n\n}\n\na = a %25\n\nb = b %3\n\nlet subkey\n\nif (a %2===0) {\n\nsubkey = ((seed >> a) &0x000000ff) ^ ((seed >> b) | c) &0xff\n\n} else {\n\nsubkey = ((seed >> a) &0x000000ff) ^ ((seed >> b) & c) &0xff\n\n}\n\nreturntoFixedHex(subkey, 2)\n\n}\n\n// Get the checksum for a given serial string\n\nfunctiongetChecksumForSerial(serial) {\n\nlet right =0x00af// 175\n\nlet left =0x0056// 101\n\nfor (var i =0; i < serial.length; i++) {\n\nright += serial.charCodeAt(i)\n\nif (right >0x00ff) {\n\nright -=0x00ff\n\n}\n\nleft += right\n\nif (left >0x00ff) {\n\nleft -=0x00ff\n\n}\n\n}\n\nreturntoFixedHex((left <<8) + right, 4)\n\n}\n\n// Format the key (XXXX-XXXX-XXXX-XXXX-XXXX)\n\nfunctionformatKey(key) {\n\nreturn key.match(/.{4}/g).join('-')\n\n}\n\n// Generate a 4-byte hexadecimal seed value\n\nfunctiongenerateSeed(n) {\n\nconstseed= crypto.randomBytes(4).toString('hex')\n\nreturn seed.toUpperCase()\n\n}\n\n// Generate a (legitimate) license key\n\nfunctiongenerateKey(seed) {\n\n// Build a list of subkeys (bit twiddling params are arbitrary but can never change)\n\nconstsubkeys= [\n\ngetSubkeyFromSeed(seed, 24, 3, 200),\n\ngetSubkeyFromSeed(seed, 10, 0, 56),\n\ngetSubkeyFromSeed(seed, 1, 2, 91),\n\ngetSubkeyFromSeed(seed, 7, 1, 100),\n\n]\n\n// Build the serial (seed + subkeys)\n\nconstserial= seed + subkeys.join('')\n\n// Build the key (serial + checksum)\n\nconstkey= serial +getChecksumForSerial(serial)\n\nreturnformatKey(key)\n\n}\n\nYeah â it's a lot to take in. Most readers won't be comfortable with all of those magic numbers and the nifty bit-twiddling. (And rightly so â it is confusing, even to me, as I port over the Delphi code and write this post.)\n\nBut with that, let's generate our first license key:\n\nconstseed=generateSeed()\n\nconstkey=generateKey(seed)\n\nconsole.log({ key })\n\n// => { key: 'ECE4-4EDB-37E8-7FF9-BC96' }\n\nNext, let's break down this new key, ECE4-4EDB-37E8-7FF9-BC96. Let's recall the components of a key: the seed, its subkeys, and the checksum.\n\nIn this case, we can strip away the dashes and see our components:\n\nSeed: 'ECE44EDB'\n\nSubkeys: '37', 'E8', '7F', 'F9'\n\nChecksum: 'BC96'\n\nNow, a keygen for production-use may have more subkeys, or the subkeys may be arranged or intermingled differently, but the algorithm is still going to be more or less the same. As will the algorithm's vulnerabilities.\n\nSo, how do we verify these license keys?\n\nWell, let's remember, the \"P\" in \"PKV\" stands for \"partial\" â Partial Key Verification. Our license key verification algorithm should only verify one subkey at a time, which we can rotate as-needed, or per version of our app.\n\nHere's what the verification algorithm looks like:\n\nfunctionisKeyFormatValid(key) {\n\nreturn key.length===24&& key.replace(/-/g, '').length===20\n\n}\n\nfunctionisSeedFormatValid(seed) {\n\nreturn seed.match(/[A-F0-9]{8}/) !=null\n\n}\n\nfunctionisSerialChecksumValid(serial, checksum) {\n\nconstc=getChecksumForSerial(serial)\n\nreturn c === checksum\n\n}\n\nfunctionisKeyValid(key) {\n\nif (!isKeyFormatValid(key)) {\n\nreturnfalse\n\n}\n\nconst [, serial, checksum] = key.replace(/-/g, '').match(/(.{16})(.{4})/)\n\nif (!isSerialChecksumValid(serial, checksum)) {\n\nreturnfalse\n\n}\n\nconstseed= serial.substring(0, 8)\n\nif (!isSeedFormatValid(seed)) {\n\nreturnfalse\n\n}\n\n// Verify 0th subkey\n\nconstexpected=getSubkeyFromSeed(seed, 24, 3, 200)\n\nconstactual= serial.substring(8, 10)\n\nif (actual !== expected) {\n\nreturnfalse\n\n}\n\nreturntrue\n\n}\n\nThe gist of the verification algorithm is that we firstly check key formatting, then we'll verify the checksum is valid. Next, we'll verify the format of the seed value, which if we recall is the first 8 characters of the serial.\n\nAnd then we hit the meat and potatoes of PKV: verifying the nth subkey.\n\n// Verify 0th subkey\n\nconstexpected=getSubkeyFromSeed(seed, 24, 3, 200)\n\nconstactual= serial.substring(8, 10)\n\nif (actual !== expected) {\n\nreturnfalse\n\n}\n\nIf you notice, getSubkeyFromSeed(seed, 24, 3, 200) is deriving an expected 0th subkey from the seed value. We then compare the expected 0th subkey to our license key's actual 0th subkey. If the subkeys don't match, the license key is not valid.\n\nBut if we're including the exact 0th subkey parameters, which are used by our secret keygen, in our application code, isn't that bad? Absolutely! This is how we break PKV. And thus comes the moment we've all been waiting for â let's write an 'illegal' keygen.\n\nWriting a keygen\n\nLet's assume the role of a bad actor. And let's review what we know so far:\n\nThe current version of the application verifies the 0th subkey.\n\nThe 0th subkey is located at indices 8 and 9: 0000-0000-XX00-0000-0000.\n\nWe possess the parameters to generate a valid 0th subkey: 24, 3, 200.\n\nLet's write a keygen, using only the operations contained within the verification code, that generates a license key with a valid 0th subkey.\n\nconstseed='00000000'\n\nconstsubkey=getSubkeyFromSeed(seed, 24, 3, 200)\n\nconstserial=`${seed}${subkey}000000`\n\nconstchecksum=getChecksumForSerial(serial)\n\nconstkey=`${serial}${checksum}`.match(/.{4}/g).join('-')\n\nconsole.log({ key })\n\n// => { key: '0000-0000-C800-0000-BBCD' }\n\nThat's a lot of zeroes. Further, the only components that are not zeroed out are the 0th subkey, and the checksum. But this can't possibly be a valid key, right?\n\nisKeyValid('0000-0000-C800-0000-BBCD')\n\n// => true\n\nShoot â that's not good.\n\nWell, actuallyâ¦ it's good for 'us', the bad actor; bad for the business whose application we just wrote a working keygen for. We need only increment the hexadecimal seed value to generate more valid license keys:\n\n-constseed='00000000'\n\n+constseed='00000001'\n\nconstsubkey=getSubkeyFromSeed(seed, 24, 3, 200)\n\nconstserial=`${seed}${subkey}000000`\n\nconstchecksum=getChecksumForSerial(serial)\n\nconstkey=formatKey(`${serial}${checksum}`)\n\nWhich we can then inspect,\n\nconsole.log({ key })\n\n// => { key: '0000-0001-C900-0000-CBCF' }\n\nAnd as expected,\n\nisKeyValid('0000-0001-C900-0000-CBCF')\n\n// => true\n\nWell, that's doubly not good, for them. And as Murphy's Law would predict, this keygen has just been submitted to a popular online message board that the business has no control over. The keygen grows in popularity, sales dip, stakeholders are unhappy.\n\nWhat can be done?\n\nVerifying the next subkey\n\nLet's assume the role of the business once again. We need to fix this. Luckily, our chosen key algorithm lets us go from verifying the 0th subkey, to verifying the 1st subkey. All we have to do is adjust the subkey parameters:\n\n-// Verify 0th subkey\n\n-constexpected=getSubkeyFromSeed(seed, 24, 3, 200)\n\n-constactual= serial.substring(8, 10)\n\n+// Verify 1st subkey\n\n+constexpected=getSubkeyFromSeed(seed, 10, 0, 56)\n\n+constactual= serial.substring(10, 12)\n\nif (actual !== expected) {\n\nreturnfalse\n\n}\n\nLet's quickly make this change and push out a silent update to limit any further damage this bad actor can inflict. Luckily, our app auto-updates so this should be a fast fix.\n\nProblem solved, right?\n\nNot quite.\n\nWriting another keygen\n\nLet's reclaim our role as bad actor. Users of our keygen are claiming that it no longer works, which is weird because it was most definitely working before. They're paying us in cryptocurrency, and even though we're a bad guy, we like to keep our customers happy.\n\nWe note: the first variable that has changed is that the application seems to have updated itself. After poking around the new version, we reassess the situation.\n\nAnd these are the facts:\n\nThe new version of the application no longer verifies the 0th subkey.\n\nThe new version of the application now verifies the 1st subkey.\n\nThe 1st subkey is located at indices 10 and 11: 0000-0000-00XX-0000-0000.\n\nWe possess the parameters to generate a valid 1st subkey: 10, 0, 56.\n\nSee a pattern?\n\nAll 'they' did was move from verifying the 0th subkey to the 1st subkey. Let's adjust our keygen program so that it generates valid product keys once again:\n\nconstseed='00000000'\n\n-constsubkey=getSubkeyFromSeed(seed, 24, 3, 200)\n\n-constserial=`${seed}${subkey}000000`\n\n+constsubkey=getSubkeyFromSeed(seed, 10, 0, 56)\n\n+constserial=`${seed}00${subkey}0000`\n\nconstchecksum=getChecksumForSerial(serial)\n\nconstkey=`${serial}${checksum}`.match(/.{4}/g).join('-')\n\nWhich produces a new license key,\n\nconsole.log({ key })\n\n// => { key: '0000-0000-0038-0000-25BD' }\n\nAnd, once again, as expected,\n\nisKeyValid('0000-0000-0038-0000-25BD')\n\n// => true\n\nWe can do this all day. All we need is some 90s KeyGen music.\n\nAs the business using PKV, we can continue adjusting our nth subkey verification as-needed to combat these keygens as they pop up. We have alerts set up for various indicator keywords and everything.\n\nBut there's a major problem. (It may not be a problem now, but it will be soon.)\n\nDo you see it?\n\nIt's simple: once we start verifying the 2nd subkey, which the bad actor will once again write a keygen for, and then the 3rd subkey, we'll eventually run out of subkeys. Even if we use 100 subkeys, running out is inevitable.\n\nWhat does that mean, to \"run out\"?\n\nIt means that after we've rotated through verifying each of our subkeys, in our clever attempt at combatting the keygens, we'll soon have no more recourse. Sure, we can start blacklisting seed values directly in our application code, but that's a fool's errand when there's something worse than running out of subkeys.\n\nWhat's \"worse\"?\n\nWell, at the end of this scenario, once all subkey parameters have been leaked, the bad actor can fully replicate our secret keygen! (After all, we've literally given them the keys to our castle. It was a slow trickle, but they were patient.)\n\nP0: 24, 3, 200\n\nP1: 10, 0, 56\n\nP2: 1, 2, 91\n\nP3: 7, 1, 100\n\nIt's game over after they get those.\n\nSo, what's the point?\n\nTo be frank, Partial Key Verification is a lot of work, especially for a key algorithm that we will eventually leak in its entirety. PKV is flawed by its very nature. Sure, the more subkeys there are, the longer it will take to leak the entire algorithm. Maybe that's awhile. Or maybe the bad actor isn't sophisticated enough to keep a record of subkey parameters.\n\nBut at the end of the day, we're still leaking our secrets!\n\nThings that are wrong with PKV:\n\nYou leak the license key generation algorithm over time. (I can't stress this enough!)\n\nYou eventually have to maintain a blacklist of leaked/illegitimate keys.\n\nGiven enough legitimate keys, your algorithm can be deduced.\n\nIt's hard to embed data into a key (e.g. max app version).\n\nIt's incredibly complex.\n\nA quick tangent â\n\nMost application licensing boils down to code that looks like this:\n\nif (isKeyValid(key)) {\n\n// â¦ do something\n\n} else {\n\n// â¦ do something else\n\n}\n\nSome applications will have a central point in the bytecode where this check happens, but others harden their system by inlining the license key checks, making the work of a bad actor wanting to crack the software much, much harder. But licensing is all essentially the same: it's a series of conditionals.\n\nWith that in mind, there's no benefit to using PKV, a licensing scheme that will eventually leak its secrets to any bad actor that is looking, vs. modern cryptography. It's not more secure, it's not easier to distribute, and it doesn't protect you from keygens. PKV is, by design, security through obscurity. And it should no longer be used.\n\nSo what's the alternative?\n\nModern license key algorithms\n\nWhen choosing a modern license key algorithm, we have a quite a few solid options. For example, our API supports a variety of cryptographic schemes for license keys, from elliptic-curve signatures, to RSA signatures and even encryption. Today, we'll be covering elliptic-curve and RSA-2048 signatures.\n\nCryptography is a wide space, but we're going to focus on asymmetric, or public-key, cryptography. The way these asymmetric cryptographic schemes work is that they have a private key, and a public key. You take some data and create a signature of it using the private key, which can be verified using the public key. Verification is essentially an authenticity check, \"was this data signed by the private key?\"\n\nAs the names imply, the private key is our secret (i.e. it's never shared), the public key is public. In our case, we're going to embed the public key into our application code.\n\nThere are symmetric schemes, such as AES-128, which forego public and private keys, and instead use a shared secret key. But those aren't useful for license keys because we'd have to embed our secret key into our code to verify license keys, which would give a bad actor the ability to write a keygen (which was the end result of our PKV implementation).\n\nAt the end of today, our cryptographic license keys are going to end up looking like this:\n\n${ENCODED_DATA}.${ENCODED_SIGNATURE}\n\nThe license keys we generate may differ in length, depending on the cryptographic scheme we use, but the format is going to stay the same: some encoded data, a delimiter \".\", and a cryptographic signature of the data. (This is more or less the same format our API uses for cryptographic keys.)\n\nLet's start with asymmetric elliptic-curves.\n\nElliptic-curve cryptography\n\nWe aren't going to be doing a deep-dive into elliptic-curve cryptography (ECC) today, but that link should curb the curious. Within the ECC category, there are a myriad of different algorithms. Today, we'll be exploring Ed25519, a modern implementation of a Schnorr signature system using elliptic-curve groups.\n\nEd25519 provides a 128-bit security level, the same security level as AES-128, NIST P-256, and RSA-3072. (Meaning, yes, it's good.)\n\nAn implementation of ECC\n\nNow, rather than write our own crypto, we're going to be using Node's standard crypto module, which as of Node 12, supports Ed25519.\n\nLet's generate our private and public keys, or more succinctly, our keypair.\n\nconstcrypto=require('crypto')\n\nconst { privateKey, publicKey } = crypto.generateKeyPairSync('ed25519')\n\nconstsigningKey=\n\nprivateKey.export({ type: 'pkcs8', format: 'der' }).toString('hex')\n\nconstverifyKey=\n\npublicKey.export({ type: 'spki', format: 'der' }).toString('hex')\n\nconsole.log({ signingKey, verifyKey })\n\n// => {\n\n// signingKey: '302e020100300506032b657004220420a9466527e2b4dd30f202742abe38e8d75c9756a4f3d22daf1e37a317c22e2197',\n\n// verifyKey: '302a300506032b657003210092f97e92cf06959a8b469d9da95609a4419fa2cc4f03a7009cd3a7c6bc1423e9'\n\n// }\n\nAfter generating our keypair, we're going to want to keep those encoded keys in a safe place. We'll use the private signing key for our keygen, and we'll use the public verify key to verify authenticity of license keys within our application.\n\nLet's write our license keygen. Thankfully, it's a lot simpler than our PKV code:\n\n// Some data we're going to embed into the license key\n\nconstdata='[email protected]'\n\n// Generate a signature of the data\n\nconstsignature= crypto.sign(null, Buffer.from(data), privateKey)\n\n// Encode the signature and the dataset using our signing key\n\nconstencodedSignature= signature.toString('base64')\n\nconstencodedData= Buffer.from(data).toString('base64')\n\n// Combine the encoded data and signature to create a license key\n\nconstlicenseKey=`${encodedData}.${encodedSignature}`\n\nconsole.log({ licenseKey })\n\n// => { licenseKey: 'dXNlckBjdXN0b21lci5leGFtcGxl.kANuXAhc8b7rDNgbFBpoSUsmfkM7msQC0tNkeUed4b5W15xF6zxmoV3AYF54zaWFMHznSNY7M9bLloInknvlDw==' }\n\nOnce again, we can strip away any delimiters and see our components:\n\nDataset: dXNlckBjdXN0b21lci5leGFtcGxl\n\nSignature: kANuXAhc8b7rDNgbFBpoSUsmfkM7msQC0tNkeUed4b5W15xF6zxmoV3AYF54zaWF\n\nMHznSNY7M9bLloInknvlDw==\n\nWhat's great about this license key format is that we can embed any dataset into it that we need. Right now, we're embedding the customer's email, but we could include other information as well, such as order ID, key expiration date, entitlements, and more. (It could even be a JSON object, which is actually the default for our API.)\n\nOne downside is that the more data you embed, the larger the license keys will become. But in the real world, this isn't really an issue, since the majority of users will copy-and-paste their license keys, as opposed to typing them in by hand.\n\nSo, what about verifying the keys? Again, it's pretty simple:\n\n// Split the license key by delimiter\n\nconst [encodedData, encodedSignature] = licenseKey.split('.')\n\n// Decode the embedded data and its signature\n\nconstsignature= Buffer.from(encodedSignature, 'base64')\n\nconstdata= Buffer.from(encodedData, 'base64').toString()\n\n// Verify the data and its signature using our verify key\n\nconstvalid= crypto.verify(null, Buffer.from(data), publicKey, signature)\n\nconsole.log({ valid, data })\n\n// => { valid: true, data: '[email protected]' }\n\nThat's all the code you would need to add to your application to verify license keys (minus implementation details like prompting the user for their license key, etc.)\n\nAnother major downside is that Ed25519 may not be supported in many programming languages, outside of third-party dependencies. Most modern programming languages, given the version is up-to-date should support it. For example, Node introduced support in Node 12; but Ruby, however, still lacks support in the standard library.\n\nSo, what's another alternative?\n\nRSA cryptography\n\nRSA (RivestâShamirâAdleman), is a widely supported cryptography system, and it's one of the oldest systems still in use. Like ECC, it's an asymmetric cryptography system, meaning it uses public-private keypairs to verify and sign data, respectively.\n\nDue to its age, you may find outdated advice online recommending 512-bit keys, or even smaller. A modern use of RSA should utilize 2048-, 3072- or 4096-bit keys. The higher the bit size, the higher the security level. (Though, we should also keep in mind: the higher the bit size, the longer the signatures will be.)\n\nFor our implementation, we're going to use RSA-2048.\n\nAn implementation of RSA\n\nWe're going to be returning to our old friend, Node's crypto module. It has full support for RSA, like most programming languages do. Our RSA license keygen will be very similar to its ECC counterpart.\n\nSo, let's generate an RSA keypair: (Brace yourself.)\n\nconstcrypto=require('crypto')\n\n// Generate a new keypair\n\nconst { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {\n\nmodulusLength: 2048,\n\nprivateKeyEncoding: { type: 'pkcs1', format: 'pem' },\n\npublicKeyEncoding: { type: 'pkcs1', format: 'pem' },\n\n})\n\nconsole.log({ privateKey, publicKey })\n\n// => {\n\n// privateKey: '-----BEGIN RSA PRIVATE KEY-----\\n' +\n\n// 'MIIEpAIBAAKCAQEAqYYo2aSU3EPASo3vAb1pXyU3vdAP1V73qGKcPvWJ1+DlCZJh\\n' +\n\n// 'BTlY/IyBYJCoaHiized1ynjiUNOvC5zbEGUOjRJBnUzX8ep53BeoCyWRfA1wRo5S\\n' +\n\n// 'easxpNyNE9yJKT/Cyv91jCxH4aOpt8jjTTbvZLh1YnqWI1Bc4YCUKVTA1wV63qzp\\n' +\n\n// 'A/ghBCsB6Hhq7Phlngcs+gQYMH4WRkGxwMAeqOJ/UmaK1cMCSZ1yMgN/+Svp1B8a\\n' +\n\n// 'iBZ5FAm/0uqh89TWr6ABihIRu9Q6Lan7nr33vB0Fl36KOlPSpJyonWUlFx4crAdR\\n' +\n\n// 'NnOO+vfmhMCjQnqNLEzltqrmY7sAZNT2gkmTdwIDAQABAoIBAGCKYHUhfwy5IKbU\\n' +\n\n// 'kYoCHiHrBgV4mau/e3ZPQf+wwSFJl+WNkObys7SPJ5agiueD2+M6rx/xG6FAC+2n\\n' +\n\n// 'FDIP+utnvCoies/v4hnu9unyKRnmZUwo/NsBHTJvz3/CFfKBtyL3vC9pgD4FgD+D\\n' +\n\n// 'jb6JTGeljGPav+m4eEyLdtTayT8pmE2ZQ6qelGW1M+Jd9JN7XYNKzmR8kI4rhug0\\n' +\n\n// 'cFf87FGZ7PI8uEXeTWIysS/ZMkxk+dDifaFIpBEFKPdinaotl9raE+pcgeV/+ktQ\\n' +\n\n// 'T7RsjEYstRH1VFA9z8Lf1w7RLwdGNMRzv6y69eac/N+FpUsDgRyfXS+JD+KnS6xV\\n' +\n\n// 'bW9hAeECgYEA2I8VcZDwPu2qRnyrU4ZWH7Dskv05KFTmxw8/E2oUVnhSnYOaBzAY\\n' +\n\n// 'O6DLUNObY3QPFaKzsQv+i5yDL5HHqIDuPEapiZ0g0DDbRQ5+mzxJy92jgP/qouXn\\n' +\n\n// 'yCWIun62VjoZqHU4PKWorPoSYrZRzDUtdiNSB+ulmhlt4sbWvB9fXt8CgYEAyGYb\\n' +\n\n// 'Ss9vxBjvC4MqLaf2J5cWSEkFA4LjEaz+TqGluuSWbAim4Yu/vjEV7l+jguPNZcm0\\n' +\n\n// 'u8+KeyrGtggEDz3z4eTQOtkWwrA0icQaKqT1iBRaoREpYMS4bOFjEoYsVTuAaeEs\\n' +\n\n// 'v8E94VkSmONdH7pQEObtb/T71hSO1qr6FjELlmkCgYBaaGGrZ7bkjpPnmWRtGkga\\n' +\n\n// 'MuKQ+uZB0DAIKnVKxZ53+wOCfs5u8cUsH5TByZW1j148yg/6eedqoYyi71lLH4hV\\n' +\n\n// '4aolqVNplvvzeHmilSi5023PDQgHubNp+0F5mizFErxjd4xixUYF8OB8FWFQv2Kb\\n' +\n\n// 'T2OPqvEXxEX7xscfAnnuQQKBgQDCI7kY9nDuZsFeQ8mexXMA06vwh1zmE+zq+M69\\n' +\n\n// 'Wnh14HGhY5hYNMyi8mausdR0P0CC9a+zqtIblEtBme5k3b3g/4yDFkCoh4++T06S\\n' +\n\n// 'NZDwLdfG5htR9gI86PTTw0w7nhM/f7ecZRcPsv0DRHC5BgP++9jWd11p/iyK5sS0\\n' +\n\n// 'rvrs0QKBgQC8I8nSwZIMu+jIMoMbL22hrwrghQ7g48MeDcxBBxAlnLbBdDl3bDeD\\n' +\n\n// 'FkDlFFTu8EqMz7MslbHH44iHU/WG1HBe7tGZqVEraKKlsQB3ULHkhi/m1pjKmFek\\n' +\n\n// 'QtiGtNPLB5zZk434moQb2/n772N+2OayxGbULkWhVqlw1OGXWVOnkw==\\n' +\n\n// '-----END RSA PRIVATE KEY-----\\n',\n\n// publicKey: '-----BEGIN RSA PUBLIC KEY-----\\n' +\n\n// 'MIIBCgKCAQEAqYYo2aSU3EPASo3vAb1pXyU3vdAP1V73qGKcPvWJ1+DlCZJhBTlY\\n' +\n\n// '/IyBYJCoaHiized1ynjiUNOvC5zbEGUOjRJBnUzX8ep53BeoCyWRfA1wRo5Seasx\\n' +\n\n// 'pNyNE9yJKT/Cyv91jCxH4aOpt8jjTTbvZLh1YnqWI1Bc4YCUKVTA1wV63qzpA/gh\\n' +\n\n// 'BCsB6Hhq7Phlngcs+gQYMH4WRkGxwMAeqOJ/UmaK1cMCSZ1yMgN/+Svp1B8aiBZ5\\n' +\n\n// 'FAm/0uqh89TWr6ABihIRu9Q6Lan7nr33vB0Fl36KOlPSpJyonWUlFx4crAdRNnOO\\n' +\n\n// '+vfmhMCjQnqNLEzltqrmY7sAZNT2gkmTdwIDAQAB\\n' +\n\n// '-----END RSA PUBLIC KEY-----\\n'\n\n// }\n\nRight off the bat, we can see that RSA's keys are much, much larger the Ed25519's. But that's okay, they both get us to our end goal: a cryptographically secure licensing system. Again, you'll want to store these keys in a safe place. As before, and as the names imply, the private key is private, and the public key can be public.\n\n// Some data we're going to embed into the license key\n\nconstdata='[email protected]'\n\n// Create an RSA signer\n\nconstsigner= crypto.createSign('rsa-sha256')\n\nsigner.update(data)\n\n// Encode the original data\n\nconstencoded= Buffer.from(data).toString('base64')\n\n// Generate a signature for the data using our private key\n\nconstsignature= signer.sign(privateKey, 'base64')\n\n// Combine the encoded data and signature to create a license key\n\nconstlicenseKey=`${encoded}.${signature}`\n\nconsole.log({ licenseKey })\n\n// => {\n\n// licenseKey: 'dXNlckBjdXN0b21lci5leGFtcGxl.mEuxvjm1wlrv02ujafM63shjrjZ3edR07adIvR4vQoaJlQ0PSgiCX6DlLFeP6Qzaz1YZDLHvh3hALEujKZCutJlFhrxhuHJ+H2cAGyMHLoxeCNJHrGBwcW4IP3sGeSVxgWFwUl1twEw5Xb9jdEbxadszCP34YQrKrf/NlmHCDLIP/5eEla02nUGnHOkZ0b3HJAM20sJbulZFfrqqKakkYziJDBiQ0DFjvpTp4xwHEDHsNORle128CMrnpN1PcPuteoKoiMFBha3+hLo9zkUyYBa34KaIZ2RKttF+cOj6MqK1zbC1SVQz2znwEletZdC4a9MMGd0UWNEL9jNzdhMAGw=='\n\n// }\n\nAnd as expected, like our keypair, our license keys are also much larger. But they're secure. And remember, most users copy-and-paste, so length doesn't really matter. (You could even wrap license keys in a license.dat file, which makes distribution a breeze. But that's just an implementation detail.)\n\nLet's break down the license key into its dataset and signature components:\n\nDataset: dXNlckBjdXN0b21lci5leGFtcGxl\n\nSignature: mEuxvjm1wlrv02ujafM63shjrjZ3edR07adIvR4vQoaJlQ0PSgiCX6DlLFeP6Qza\n\nz1YZDLHvh3hALEujKZCutJlFhrxhuHJ+H2cAGyMHLoxeCNJHrGBwcW4IP3sGeSVx\n\ngWFwUl1twEw5Xb9jdEbxadszCP34YQrKrf/NlmHCDLIP/5eEla02nUGnHOkZ0b3H\n\nJAM20sJbulZFfrqqKakkYziJDBiQ0DFjvpTp4xwHEDHsNORle128CMrnpN1PcPut\n\neoKoiMFBha3+hLo9zkUyYBa34KaIZ2RKttF+cOj6MqK1zbC1SVQz2znwEletZdC4\n\na9MMGd0UWNEL9jNzdhMAGw==\n\nThat signature, aye? If we were to use a smaller key size, the signature size could be reduced, but we shouldn't sacrifice security for such a thing. RSA-512 can be broken within days, for less than $100 in compute-power. Similarly, even RSA-1024 can be broken, though for a much larger sum. RSA-2048 would take around a billion years to break on modern systems (quantum computing aside.)\n\nSuffice it to say â RSA-2048 is a safe choice in 2021. RSA-3072, even moreso.\n\nBut I digress â\n\nSimilarly to ECC, verifying an RSA license key is a rather painless process:\n\n// Split the license key's data and the signature by delimiter\n\nconst [encoded, signature] = licenseKey.split('.')\n\n// Decode the embedded data\n\nconstdata= Buffer.from(encoded, 'base64').toString()\n\n// Create an RSA verifier\n\nconstverifier= crypto.createVerify('rsa-sha256')\n\nverifier.update(data)\n\n// Verify the signature for the data using our public key\n\nconstvalid= verifier.verify(publicKey, signature, 'base64')\n\nconsole.log({ valid, data })\n\n// => { valid: true, data: '[email protected]' }\n\nOnce again, it takes less than 10 lines of code to verify license keys within your application. Our RSA implementation can be improved by using a more modern non-deterministic padding scheme, PKCS1-PSS (which our API also supports.)\n\nCaveats and summary\n\nWe've learned how legacy licensing systems, such as Partial Key Verification, can be compromised by a bad actor, and how PKV is insecure by-design. We even wrote a PKV keygen ourselves. We then wrote a couple secure licensing systems using modern cryptography, implementing Ed25519 and RSA-2048 signature verification.\n\nOkay, okay â after all we've been through with PKVâ¦\n\nYou may be asking yourself â\n\n\"What about keygens?\"\n\nThe good news is that unless a bad actor can break Ed25519 or RSA-2048, writing a keygen is effectively impossible. Besides, if a bad actor can break Ed25519 or RSA-2048 in 2021, we'll have much bigger things to worry about, anyways.\n\nBut remember, a crack != a keygen, so your application's licensing always runs the risk of being circumvented via code modification. But license keys cannot be forged when you utilize a licensing system built on modern cryptography.\n\n(When it comes to cracking, we can defend against some low-hanging-fruit, but we'll leave that topic for another day.)\n\nNow, where does a licensing server fit in?\n\nGenerating and verifying the authenticity of cryptographically signed license keys like we've covered will work great for a lot of licensing needs. The implementation is straight forward, it's secure, and these types of license keys work especially great for offline-first perpetual licenses (or a timed license with an embedded, immutable expiry).\n\nBut coupled with a modern licensing server, cryptographic keys can be used to implement more complex licensing models, such as these popular ones:\n\nAn entitlement-based model that gates access to certain features or versions of an application by a license's entitlements. For example, Sublime Text 4 allows for a few years of updates, but after a license expires, only the versions within that 3 year window can be accessed, according to the license's entitlements.\n\nA node-locked or floating model where a license is limited to the number of devices it can be used on at one time. For example, Sketch allows you to purchase licenses by seat-count, where a user can activate and deactivate device \"seats.\"\n\nDevice-locked timed trials where a device can sign up for a single trial, without risk of the user signing up for a second, third or fourth trial.\n\nBut rather than build a licensing server in-house, that's where our software licensing API can come in and save your team time and money.\n\nUntil next time."
    }
}