{
    "id": "dbpedia_4765_0",
    "rank": 15,
    "data": {
        "url": "https://arthurdejong.org/python-stdnum/doc/",
        "read_more_link": "",
        "language": "en",
        "title": "stdnum 1.20 documentation",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Validate the number and return a compact, consistent representation of the number or code. If the validation fails, an exception is raised that indicates the type of error.\n\nRaises:\n\nValidationError – When the specified number is invalid\n\nReturns:\n\nstr – A compact (canonical) representation of the number\n\nReturn either True or False depending on whether the passed number is in any supported and valid form and passes all embedded checks of the number. This function should never raise an exception.\n\nReturns:\n\nbool – True if validated, False otherwise\n\nReturn a compact representation of the number or code. This function generally does not do validation but may raise exceptions for wildly invalid numbers.\n\nReturns:\n\nstr – The compacted number\n\nReturn a formatted version of the number in the preferred format. This function generally expects to be passed a valid number or code and may raise exceptions for invalid numbers.\n\nReturns:\n\nstr – A formatted number\n\nCalculate the checksum over the provided number. This is generally a number that can be used to determine whether the provided number is valid. It depends on the algorithm which checksum is considered valid.\n\nReturns:\n\nint – A numeric checksum over the number\n\nCalculate the check digit that should be added to the number to make it valid.\n\nReturns:\n\nstr – A check digit that can be appended\n\nFind the country-specific named module.\n\nSearches the stdnum collection of modules for a number format for a particular country. name may be an aliased name. For example:\n\n>>> from stdnum import get_cc_module >>> mod = get_cc_module('nl', 'vat') >>> mod <module 'stdnum.nl.btw' from '...'> >>> mod.validate('004495445B01') '004495445B01'\n\nWill return None if no module could be found. The generic names that are currently in use:\n\n'vat' for value added tax numbers\n\n'businessid' for generic business identifiers (although some countries may have multiple)\n\n'personalid' for generic personal identifiers (some countries may have multiple, especially for tax purposes)\n\n'postal_code' for address postal codes"
    }
}