{
    "id": "dbpedia_4765_0",
    "rank": 46,
    "data": {
        "url": "https://jdpressman.com/2014/11/03/to-build-a-library-part-one.html",
        "read_more_link": "",
        "language": "en",
        "title": "On Building A Library",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://i.creativecommons.org/p/zero/1.0/88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-11-03T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I was introduced to Issac Asimovâs Foundation series in the summer between my Freshman and Sophomore years of High School. Certain books are so widely agreed to be excellent that youâll have heard of them long before you read them, at least vaguely. Foundation was in this category for me, and what compelled me to read it over anything else I might have done at that time was itâs immediate availability in my local school library. However, it would be a misnomer to say I âchecked outâ the book, as this library has no check out system, no tracking, and no index of what books are available.\n\nTo paint a picture for you, the âlibraryâ is actually a disorganized wall of books stretching around the east wing of the school. There is no Dewey Decimal, no organization by subject or category. To find a book you like you must crouch down and, head tilted sideways, walk along the shelves scanning titles until you come upon something worthwhile. It actually took me a great deal of time to find Second Foundation after somebody misplaced it somewhere in the rows of babel.\n\nIt was for this lack of care that the library largely remained (and remains) unused. Iâd walk by it every day for class and never once did I see anybody peruse its shelves. This bothered me for several reasons. One of which being that I had already found one good book in the shelves and knew that there were probably others. But I didnât want to go through every book just to find the few I would be interested in. Another reason this bothered me was that the school basically had no library besides this to speak of, and in fact there had been whispers of trying to create a library for years.\n\nThe donor(s) of the books presumably donated with the faith that their books would be used. To have them laying around is a betrayal of that. I donât remember quite when the idea first surfaced in my mind, but at some point I started pondering how one might turn these books into a proper library. And it occurred to me that the biggest problem was there was no way of even knowing what we have. A further amount of time was spent pondering how one might catalog the books. Eventually the solution came to me when I sat down during one of my âComputer Appâ periods at a table in the East Wing. I remember naively pulling out a piece of paper and a pen, writing down the title and author of about four books before realizing there would be no way I could do it that way in a reasonable amount of time. Obviously libraries had to have a way of managing this, and I examined the books I had on the table. Inside the cover and on the back I noticed an âISBNâ number, which my intuition told me was probably some kind of unique identifier for the book.\n\nISBN Numbers\n\nMy intuition was correct. International Standard Book Numbers, or âISBNâ for short, are issued by registration agencies around the world and uniquely identify a book or publication. There are also competing standards such as the Library of Congress Card Number. The vast majority of books cataloged in the library have an ISBN, so thatâs what I will discuss.\n\nInternational Standard Book Numbers have ten digits, or thirteen. The 10th or thirteenth digit is a âcheckâ to allow you to verify the integrity of the other digits. Usually the bar code on the back of the book is an encoding of that books ISBN number. The font used to print the number below the barcode is OCR-A, which is optimized for machine recognition programs. In general this means that in 2014 you shouldnât need to catalog the library by hand, as the purchase of a simple barcode scanner hooked to a laptop will relieve you of the burden.\n\nCataloging the library by hand is exactly what I did. Largely why I did this is that I couldnât imagine any better way. I really wish that when Iâd learned about ISBNs Iâd digged a little deeper into their conventions instead of running off to implement a solution. Iâd assumed that the barcodes on the back of a book were just data assigned by the company that sold the book for inclusion in their inventory system, if Iâd known it was the ISBN Iâd have paid fifty bucks for a barcode reader and saved myself the hassle.\n\nInstead what I did was significantly more complicated. I took a picture of the ISBN of every book, then transcribed the numbers from the photos by typing them down.\n\nPhotography\n\nThis was easier said than done. For most of high school I carried a camera and took photos of whatever things struck me as interesting. (You can find some of my photo albums here.) But photographing the back cover of each library book could take a very long time. I started out by taking a table in the project area and dragging a stack of books over to the table so I could photograph them, then carrying the stack of books back to the shelves. This proved to be slow and laborious. Eventually I recruited volunteers all of whom I am deeply thankful for their help and wish I could remember their names so as to thank them properly, and set up a team. One person would retrieve books from the shelf, I would sit at the table and photograph them, and a third person would take the books back to the shelf. In this way the work was sped up considerably but still took a week or two to complete. At times it seemed like we would never finish and between this portion of the project and the transcription I was forced to confront the problem of patience to get the results I wanted.\n\nEventually the entire library had been photographed, and still ambiguous on whether I would transcribe the numbers by hand or use OCR software to try and read them the photos sat on my hard drive untouched. Schoolwork and other concerns intruded. Besides a mental note in my head every time I saw the shelves that I still hadnât finished my work, the project faded from view.\n\nTranscription\n\nBy the time I got around to transcribing the ISBN numbers from the photos, this âLibrary Projectâ had become my Senior Project. In the state of Washington you need to do 40 hours of community service as part of your graduating requirements, what you do for these 40 hours is called your Senior Project. If at this stage youâre wondering why I didnât just use a character recognition program to transcribe the numbers for me, the reason is that transcribing them with OCR seemed like it might be error prone and finicky (I did not know the numbers were OCR optimized), and I needed the time sink anyway. Resolving to transcribe them is one thing, actually doing it is another. Modern windowing systems generally donât seem optimized for a workflow where you are manipulating an application in one window at the same time that youâre manipulating a second application in another window. What this meant in practice was that I had to repetitively go through the same keyboard shortcuts to navigate between windows over and over.\n\nThough I eventually settled on a direct transcription from the photos, I did try experimenting with alternate methods such as recording myself saying the numbers at a steady pace and then typing to keep up with the recording. It turned out in practice to be less effective than just reading the numbers off the photos and typing them. My final setup was:\n\nThe Emacs Text Editor\n\nAn image viewer\n\nXFCE windowing system for Linux\n\nMy workflow would be to open the text editor and âpinâ it in the corner, then I would set it using XFCE so that it would always be the top window. Iâd then open the image viewer to a folder containing all the files. I would use alt-tab to switch between the text editor and the image viewer, flipping the image then switching to emacs so I could transcribe the ISBN number into a text file. Between sessions I would end the text file with a note telling me what image I was on so that I could quickly get back to work at a later time.\n\nFrom a psychological perspective, sitting down and copying stale book number after stale book number is very difficult. It requires a good deal of focus to check and double check that youâre putting the number in correctly. This is in fact one of the things the check digit is supposed to help you with, but I didnât understand that a check digit was available.\n\nChecking My Work\n\nâWell how many of the ISBN numbers you typed in are correct?â\n\nIf your library database has false entries in it youâre going to be sending people on wild goose chases looking for books. The ISBN check digit can seem a little confusing at first, but the mathematics involved are very simple. To start, letâs take a valid ISBN-10 number:\n\nAs itâs namesake would imply ISBN-10 has ten digits in it. The last digit, 7:\n\nIs the checkdigit for this number. Checkdigits can be 0 through 10, with ten being represented by the symbol âXâ. The checkdigit is calculated through an algorithm given the first nine numbers. This is so that if any of the first nine numbers are corrupted the checkdigit will not match up, allowing you to spot the problem. The algorithm for determining the checkdigit is as follows:\n\nGiven the first nine numbers, you multiply them by a descending integer âweightâ, like so:\n\nThe final number is the checkdigit, and itâs an integer between zero and ten such that the sum of all ten digits multiplied by the weights will be a multiple of eleven. (I.e. If you were to divide the result by eleven you would get an even number.)\n\nIn this case our sum is 191 minus our checkdigit. This gets us most of the way there but how do we determine what the checkdigit actually is?\n\nThe short answer is you take 191 modulus our base, in this case eleven, and get four which you then subtract from eleven to get seven which is our checkdigit. If that makes perfect sense to you feel free to safely skip to the next section, otherwise the long explanation follows:\n\nWhen we divide two numbers, say 4 by 2, there are three parts to the division operator:\n\nThese are the Dividend, the Divisor and the Quotient, which are the number to be divided the number we are dividing by and the result respectively.\n\ndividend / divisor = quotient\n\nIn a case like 4 / 2 = 2, two âgoes intoâ four evenly two times, giving us our quotient. However if you consider the case 5 / 2:\n\nTwo does not go into five evenly, we have a number left over which is called the remainder. The operation of finding the remainder given the division of two numbers is called modulo.\n\nSo 191 modulus our base, eleven, would be the remainder left over once eleven has gone into 191 evenly as many times as it can. This happens to be four. What this means in practice is that (mod 191 11) tells us we are four away from the last multiple of eleven, this necessarily means that we are four closer to the next multiple of eleven than we were at the last multiple of eleven. Since you must take eleven steps from 187 (191 - 4 = 187), me know that four of those steps have already been and can therefore subtract them from the eleven we have to go.\n\nHence our checkdigit.\n\nThereâs a different algorithm for ISBN-13âs. The ISBN-13 checkdigit algorithm alternates between multiplying each digit in the ISBN by one and by three such that the final digit is a multiple of ten.\n\nBut Wait, Thereâs More!\n\nKnowing how to do this in theory is one thing, but manually going through every ISBN and applying this algorithm would be tedious, time consuming and impractical. Which is of course why we wonât be doing that, instead weâll write a computer program to do it for us.\n\nPython is great for quick script jobs like this:\n\nIn the course of developing this program it was necessary to have known good test data to work with, this can be obtained by extracting it from the Internet Archiveâs Open Library Dumpâs. The ISBN numbers are under the âEditionsâ collection. As this is a several gigabyte file I have provided a sample of the numbers for the reader to work with here.\n\nBook Identifiers Besides ISBN Numbers\n\nRunning this program on the numbers I transcribed. (Provided Here) Gives eighteen âwrongâ entries:\n\nThirteen are the wrong length to be a ISBN-10 or an ISBN-13. The other five did not pass the checksum algorithm. Before we continue itâs important to elaborate on a few cases where even though theyâre not ISBN-10 or ISBN-13 numbers, these are still the correct identifier for each given book:\n\nItâs a Library of Congress Control number.\n\nItâs a Standard Book Number. (As opposed to an International Standard Book Number)\n\nItâs an Invalid ISBN.\n\nThe Library of Congress Control Number is a standard used by the Library of Congress for their cataloging system, and was at one point the defacto standard for book indexing in the United States. A LCCN is 12 characters long, a full description of the format can be found here. Standard Book Numbers were the system that eventually evolved into the International Standard Book Number, a Standard Book Number is nine characters long and can be converted into a International Standard Book Number by adding a â0â to the front.\n\nThe ISBN check system relies on publishers generating their ISBN numbers according to standard. Sometimes they do not do this, and you get invalid ISBN numbers that are in fact the ISBN number for a given book. I couldnât find a simple way to determine if an âinvalidâ ISBN number is in fact an invalid ISBN number. Presumably you would need a list of all the invalid ISBN numbers and such a list does not seem to be available on the open web.\n\nSo what to do about Standard Book Numbers and LCCNâs? Obviously their existence means our program is incomplete because it doesnât handle them, and ideally we would patch the program to handle both. However LCCNâs are considerably confusing, so instead we can be contented with fixing the program to work with Standard Book Numbers. The patched version is available here and yields five âcorrectedâ entries:\n\nI actually didnât write the check program until Iâd already grabbed the data but obviously one so inclined could either yank these or write another function into the checker for LCCNâs. Iâll go ahead and move on to getting metadata from the ISBNâs.\n\nWhat To Do With The ISBNâs\n\nOf course the numbers arenât all that useful by themselves. In order to get a library catalog worth searching through you need a source of metadata to go with the ISBN numbers. The source I used was isbndb.com. They provide 500 free API requests a day, meaning it takes three days to download the entire libraries worth of metadata. (There is also a paid option for larger volumes of requests.) The original program I used to grab this data was painful to use and involved command line utilties such as curl and writing the output to a file that later had to be (annoyingly) parsed back into python data structures.\n\nPython actually provides native functionality for what those command line utilities did, and through the use of command line arguments a lot of the pain points of the old program can be avoided. For those reasons instead of pasting in the listing for the program I originally used Iâll write a new one from scratch, this time going through it line by line for readers:\n\nThe first thing to do is state what our program does, essentially this program:\n\nTo start we want to import libraries that weâll need to use while writing the program, links to the docs for each library are included, however in actual practice you would only write the part in square brackets:\n\nNext we define the main function and write a docstring:\n\nWe define the command line arguments for our program:\n\nNext we define a function outfile to determine whether or not a previous instance of the output file has already been created by this command, in which case the JSON data is read in from it and appended to before writing back out.\n\nWe define a list âmetadataâ and use that to store our entries in, to initially create it the readprevious function is used so that it is either empty or contains the previous session of metadata:\n\nThe file given on the command line to take ISBN numbers from is assigned to the variable isbns:\n\nFrom this file the number of lines given by the skip option are read, so that you can resume from a previous session by starting from a line other than zero.\n\nThe meat of the program sets the variable âkeyâ to the key supplied on the command line, then makes a request as many times as was specified on the command line with a default of zero, reading a line from the file of ISBN numbers each time then generating the API request from it. urllib returns a document as a series of bytes that need to be decoded to plaintext so that the json library can read the entry as python objects. Finally that json entry is appended to a large list of json entries:\n\nFinally to finish up the output file is opened and the json metadata written to it:\n\nDonât forget to call the main function:\n\nThe final program listing is available here.\n\nSome notes on the use of this program:\n\nThe program checks the -o option to see if an output file has already been generated, if it has been it appends to that file. This makes it easier to work with the data once you need to put the JSON into a database.\n\nWhen specifying how many times to skip on the command line, you want to skip as many requests as you made in your last session.\n\nThe key is the one given with your signup, it is necessary to make requests from the isbndb.com database.\n\nWhat Next?\n\nNow that you have this data, there are many possible methods of turning it into a complete library system. Iâll go over what I did in part two."
    }
}