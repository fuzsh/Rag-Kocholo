{
    "id": "dbpedia_4765_3",
    "rank": 87,
    "data": {
        "url": "https://www.geeksforgeeks.org/hamming-code-in-computer-network/",
        "read_more_link": "",
        "language": "en",
        "title": "Hamming Code in Computer Network",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200424184419/hamming_code.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/array-2.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/array2.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/arra2.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/r2arra.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20220721010459/hamming.jpeg",
            "https://media.geeksforgeeks.org/wp-content/uploads/r8araa.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/norarra.jpg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200122012046/edited2.png",
            "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20210226183723/2226.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20240301094027/Screenshot-from-2024-03-01-09-39-52.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/hamming-code/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2017-12-26T01:35:10",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/hamming-code-in-computer-network/",
        "text": "Last Updated : 26 Jul, 2024\n\nImprove\n\nSummarize\n\nSuggest changes\n\nLike Article\n\nLike\n\nSave\n\nShare\n\nReport\n\nHamming code is an error-correcting code used to ensure data accuracy during transmission or storage. Hamming code detects and corrects the errors that can occur when the data is moved or stored from the sender to the receiver. This simple and effective method helps improve the reliability of communication systems and digital storage. It adds extra bits to the original data, allowing the system to detect and correct single-bit errors. It is a technique developed by Richard Hamming in the 1950s.\n\nWhat is Redundant Bits?\n\nRedundant bits are extra binary bits that are generated and added to the information-carrying bits of data transfer to ensure that no bits were lost during the data transfer. The number of redundant bits can be calculated using the following formula:\n\n2r ≥ m + r + 1\n\nwhere m is the number of bits in input data, and r is the number of redundant bits.\n\nSuppose the number of data bits is 7, then the number of redundant bits can be calculated using: = 24 ≥ 7 + 4 + 1 . Thus, the number of redundant bits is 4.\n\nTypes of Parity Bits\n\nA parity bit is a bit appended to a data of binary bits to ensure that the total number of 1’s in the data is even or odd. Parity bits are used for error detection. There are two types of parity bits:\n\nEven Parity Bit: In the case of even parity, for a given set of bits, the number of 1’s are counted. If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1’s an even number. If the total number of 1’s in a given set of bits is already even, the parity bit’s value is 0.\n\nOdd Parity Bit: In the case of odd parity, for a given set of bits, the number of 1’s are counted. If that count is even, the parity bit value is set to 1, making the total count of occurrences of 1’s an odd number. If the total number of 1’s in a given set of bits is already odd, the parity bit’s value is 0.\n\nAlgorithm of Hamming Code\n\nHamming Code is simply the use of extra parity bits to allow the identification of an error.\n\nStep 1: Write the bit positions starting from 1 in binary form (1, 10, 11, 100, etc).\n\nStep 2: All the bit positions that are a power of 2 are marked as parity bits (1, 2, 4, 8, etc).\n\nStep 3: All the other bit positions are marked as data bits.\n\nStep 4: Each data bit is included in a unique set of parity bits, as determined its bit position in binary form:\n\na. Parity bit 1 covers all the bits positions whose binary representation includes a 1 in the least significant position (1, 3, 5, 7, 9, 11, etc).\n\nb. Parity bit 2 covers all the bits positions whose binary representation includes a 1 in the second position from the least significant bit (2, 3, 6, 7, 10, 11, etc).\n\nc. Parity bit 4 covers all the bits positions whose binary representation includes a 1 in the third position from the least significant bit (4–7, 12–15, 20–23, etc).\n\nd. Parity bit 8 covers all the bits positions whose binary representation includes a 1 in the fourth position from the least significant bit bits (8–15, 24–31, 40–47, etc).\n\ne. In general, each parity bit covers all bits where the bitwise AND of the parity position and the bit position is non-zero.\n\nStep 5: Since we check for even parity set a parity bit to 1 if the total number of ones in the positions it checks is odd. Set a parity bit to 0 if the total number of ones in the positions it checks is even.\n\nDetermining The Position of Redundant Bits\n\nA redundancy bits are placed at positions that correspond to the power of 2. As in the above example:\n\nThe number of data bits = 7\n\nThe number of redundant bits = 4\n\nThe total number of bits = 7+4=>11\n\nThe redundant bits are placed at positions corresponding to power of 2 that is 1, 2, 4, and 8\n\nSuppose the data to be transmitted is 1011001 from sender to receiver, the bits will be placed as follows:\n\nDetermining The Parity Bits According to Even Parity\n\nR1 bit is calculated using parity check at all the bits positions whose binary representation includes a 1 in the least significant position. R1: bits 1, 3, 5, 7, 9, 11\n\nTo find the redundant bit R1, we check for even parity. Since the total number of 1’s in all the bit positions corresponding to R1 is an even number. So, the value of R1 (parity bit’s value) = 0.\n\nR2 bit is calculated using parity check at all the bits positions whose binary representation includes a 1 in the second position from the least significant bit. R2: bits 2,3,6,7,10,11\n\nTo find the redundant bit R2, we check for even parity. Since the total number of 1’s in all the bit positions corresponding to R2 is odd the value of R2(parity bit’s value)=1\n\nR4 bit is calculated using parity check at all the bits positions whose binary representation includes a 1 in the third position from the least significant bit. R4: bits 4, 5, 6, 7\n\nTo find the redundant bit R4, we check for even parity. Since the total number of 1’s in all the bit positions corresponding to R4 is odd so the value of R4(parity bit’s value) = 1\n\nR8 bit is calculated using parity check at all the bits positions whose binary representation includes a 1 in the fourth position from the least significant bit. R8: bit 8,9,10,11\n\nTo find the redundant bit R8, we check for even parity. Since the total number of 1’s in all the bit positions corresponding to R8 is an even number the value of R8(parity bit’s value)=0. Thus, the data transferred is:\n\nError Detection and Correction\n\nSuppose in the above example the 6th bit is changed from 0 to 1 during data transmission, then it gives new parity values in the binary number:\n\nFor all the parity bits we will check the number of 1’s in their respective bit positions.\n\nFor R1: bits 1, 3, 5, 7, 9, 11. We can see that the number of 1’s in these bit positions are 4 and that’s even so we get a 0 for this.\n\nFor R2: bits 2,3,6,7,10,11 . We can see that the number of 1’s in these bit positions are 5 and that’s odd so we get a 1 for this.\n\nFor R4: bits 4, 5, 6, 7 . We can see that the number of 1’s in these bit positions are 3 and that’s odd so we get a 1 for this.\n\nFor R8: bit 8,9,10,11 . We can see that the number of 1’s in these bit positions are 2 and that’s even so we get a 0 for this.\n\nThe bits give the binary number 0110 whose decimal representation is 6. Thus, bit 6 contains an error. To correct the error the 6th bit is changed from 1 to 0.\n\nFeatures of Hamming Code\n\nError Detection and Correction: Hamming code is designed to detect and correct single-bit errors that may occur during the transmission of data. This ensures that the recipient receives the same data that was transmitted by the sender.\n\nRedundancy: Hamming code uses redundant bits to add additional information to the data being transmitted. This redundancy allows the recipient to detect and correct errors that may have occurred during transmission.\n\nEfficiency: Hamming code is a relatively simple and efficient error-correction technique that does not require a lot of computational resources. This makes it ideal for use in low-power and low-bandwidth communication networks.\n\nWidely Used: Hamming code is a widely used error-correction technique and is used in a variety of applications, including telecommunications, computer networks, and data storage systems.\n\nSingle Error Correction: Hamming code is capable of correcting a single-bit error, which makes it ideal for use in applications where errors are likely to occur due to external factors such as electromagnetic interference.\n\nLimited Multiple Error Correction: Hamming code can only correct a limited number of multiple errors. In applications where multiple errors are likely to occur, more advanced error-correction techniques may be required.\n\nFor Implementation you can refer this article.\n\nQuestion on Hamming Code\n\nAssume that 12 bit hamming codeword consist of 8 bit data and 4 check bits is d8d7d6d5c4d4d3d2c3d1c2c1 ,where the data bits and the check bits are given in the following tables: [GATE 2021 ]\n\nWhich one of the following choices gives the correct values of x and y ?\n\n(A) x is 0 and y is 0\n\n(B) x is 0 and y is 1\n\n(C) x is 1 and y is 0\n\n(D) x is 1 and y is 1\n\nAnswer: (A)\n\nWe will first insert our codeword according to hamming code d8d7d6d5c4d4d3d2c3d1c2c1,\n\nNow,calculating hamming code according to first parity bit C1: d7d5d4d2d1c1. 1×0010, To make number of 1 even , for this x must be 0.\n\nSimilarly, lets calculate for y , we will start from c8 and make its even=>110xy here x is already 0 , so y should be 0.\n\nSo the value of x is 0 and y is 0.\n\nFor more details you can refer GATE | GATE CS 2021 | Set 1 | Question 39 published quiz.\n\nAdvantages\n\nHamming code can detect and correct single-bit errors, enhancing data reliability during transmission and storage.\n\nIt adds a minimal number of redundant bits to the original data, maintaining a good balance between data integrity and overhead.The algorithm for generating and checking Hamming code is straightforward and can be easily implemented in both hardware and software.\n\nBy detecting and correcting errors, Hamming code ensures that the received data is accurate, reducing the chances of data corruption.\n\nHamming code is widely used in various fields such as computer memory (RAM), data storage devices, and communication systems.\n\nCompared to more complex error correction codes, Hamming code provides a cost-effective solution for applications where single-bit error correction is sufficient.\n\nDisadvantages\n\nHamming code can only correct single-bit errors. It is unable to correct multiple-bit errors, which limits its effectiveness in environments with high error rates.\n\nWhile it can detect single-bit and some two-bit errors, Hamming code cannot detect all multiple-bit errors. This reduces its reliability in certain applications.\n\nAlthough it uses fewer redundant bits compared to some other error correction methods, the addition of these bits still increases the overall data size, which can be a drawback in bandwidth-constrained environments.\n\nImplementing Hamming code requires additional hardware or software resources for error detection and correction, which can be a limitation in resource-constrained systems.\n\nConclusion\n\nHamming code is a method used for error correction in data transmission. It can detect and correct single-bit errors, ensuring that the data received matches the data sent. This makes communication systems more reliable by reducing the impact of errors.\n\nFrequently Asked Questions on Hamming Code – FAQs\n\nWhat is Hamming code?\n\nHamming code is an error-correcting code used to detect and correct single-bit errors in data transmission or storage.\n\nHow does Hamming code work?\n\nHamming code works by adding redundant bits to the original data bits. These redundant bits help identify and correct any single-bit errors in the data.\n\nHow many redundant bits are needed for Hamming code?\n\nThe number of redundant bits (r) needed depends on the number of data bits (m) and is given by the formula 2r >= m + r + 1.\n\nCan Hamming code correct multiple-bit errors?\n\nHamming code is designed primarily to correct single-bit errors. It can detect but not correct multiple-bit errors.\n\nWhere is Hamming code commonly used?\n\nHamming code is commonly used in computer memory (RAM), data storage systems, and communication systems to ensure data integrity.\n\nWhat is the main advantage of Hamming code?\n\nThe main advantage of Hamming code is its ability to correct single-bit errors, enhancing data reliability without requiring excessive redundant bits.\n\nWhat are the main limitations of Hamming code?\n\nThe main limitation is that it can only correct single-bit errors. It is not effective for detecting or correcting multiple-bit errors.\n\nWhat is the purpose of parity bits in Hamming code?\n\nParity bits in Hamming code are used to ensure that the overall number of 1s in specific positions is even (even parity) or odd (odd parity), which helps in error detection and correction.\n\nPlease Login to comment...\n\nArticle Tags :\n\nComputer Networks\n\nGATE CS"
    }
}