{
    "id": "dbpedia_4765_3",
    "rank": 45,
    "data": {
        "url": "https://www.rfc-editor.org/rfc/rfc9323.html",
        "read_more_link": "",
        "language": "en",
        "title": "RFC 9323: A Profile for RPKI Signed Checklists (RSCs)",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "J. Snijders Fastly",
            "T. Harrison APNIC",
            "B. Maddison Workonline",
            "Job Snijders",
            "Tom Harrison",
            "Ben Maddison"
        ],
        "publish_date": "2022-11-14T00:00:00",
        "summary": "",
        "meta_description": "This document defines a Cryptographic Message Syntax (CMS) protected content type for use with the Resource Public Key Infrastructure (RPKI) to carry a general-purpose listing of checksums (a 'checklist').\n         The objective is to allow for the creation of an attestation, termed an \"RPKI Signed Checklist (RSC)\", which contains one or more checksums of arbitrary digital objects (files) that are signed with a specific set of Internet Number Resources. When validated, an RSC confirms that the respective Internet resource holder produced the RSC.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "1. Introduction\n\nThis document defines a Cryptographic Message Syntax (CMS) [RFC5652] [RFC6268] protected content type for a general-purpose listing of checksums (a 'checklist'), for use with the Resource Public Key Infrastructure (RPKI) [RFC6480]. The CMS protected content type is intended to provide for the creation and validation of an RPKI Signed Checklist (RSC), a checksum listing signed with a specific set of Internet Number Resources. The objective is to allow for the creation of an attestation that, when validated, provides a means to confirm a given Internet resource holder produced the RSC.¶\n\nRPKI Signed Checklists are expected to facilitate inter-domain business use cases that depend on an ability to verify resource holdership. RPKI-based validation processes are expected to become the industry norm for automated Bring Your Own IP (BYOIP) on-boarding or establishment of physical interconnections between Autonomous Systems (ASes).¶\n\nThe RSC concept borrows heavily from Resource Tagged Attestation (RTA) [RPKI-RTA], Manifests [RFC9286], and OpenBSD's signify utility [signify]. The main difference between an RSC and RTA is that the RTA profile allows multiple signers to attest a single digital object through a checksum of its content, while the RSC profile allows a single signer to attest the content of multiple digital objects. A single signer profile is considered a simplification for both implementers and operators.¶\n\n1.1. Requirements Language\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶\n\n4. The RSC eContent\n\nThe content of an RSC indicates that a checklist for arbitrary digital objects has been signed with a specific set of Internet Number Resources. An RSC is formally defined as follows:¶\n\nRpkiSignedChecklist-2022 { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) smime(16) mod(0) id-mod-rpkiSignedChecklist-2022(73) } DEFINITIONS EXPLICIT TAGS ::= BEGIN IMPORTS CONTENT-TYPE, Digest, DigestAlgorithmIdentifier FROM CryptographicMessageSyntax-2010 -- in [RFC6268] { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58) } IPAddressOrRange, ASIdOrRange FROM IPAddrAndASCertExtn -- in [RFC3779] { iso(1) identified-organization(3) dod(6) internet(1) security(5) mechanisms(5) pkix(7) mod(0) id-mod-ip-addr-and-as-ident(30) } ; ct-rpkiSignedChecklist CONTENT-TYPE ::= { TYPE RpkiSignedChecklist IDENTIFIED BY id-ct-signedChecklist } id-ct-signedChecklist OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) id-smime(16) id-ct(1) 48 } RpkiSignedChecklist ::= SEQUENCE { version [0] INTEGER DEFAULT 0, resources ResourceBlock, digestAlgorithm DigestAlgorithmIdentifier, checkList SEQUENCE (SIZE(1..MAX)) OF FileNameAndHash } FileNameAndHash ::= SEQUENCE { fileName PortableFilename OPTIONAL, hash Digest } PortableFilename ::= IA5String (FROM(\"a\"..\"z\" | \"A\"..\"Z\" | \"0\"..\"9\" | \".\" | \"_\" | \"-\")) ResourceBlock ::= SEQUENCE { asID [0] ConstrainedASIdentifiers OPTIONAL, ipAddrBlocks [1] ConstrainedIPAddrBlocks OPTIONAL } -- at least one of asID or ipAddrBlocks MUST be present ( WITH COMPONENTS { ..., asID PRESENT} | WITH COMPONENTS { ..., ipAddrBlocks PRESENT } ) ConstrainedIPAddrBlocks ::= SEQUENCE (SIZE(1..MAX)) OF ConstrainedIPAddressFamily ConstrainedIPAddressFamily ::= SEQUENCE { addressFamily OCTET STRING (SIZE(2)), addressesOrRanges SEQUENCE (SIZE(1..MAX)) OF IPAddressOrRange } ConstrainedASIdentifiers ::= SEQUENCE { asnum [0] SEQUENCE (SIZE(1..MAX)) OF ASIdOrRange } END\n\n¶\n\n4.1. Version\n\nThe version number of the RpkiSignedChecklist MUST be 0.¶\n\n4.2. Resources\n\nThe resources contained here are the resources used to mark the attestation and MUST be a subset of the set of resources listed by the EE certificate carried in the CMS certificates field.¶\n\nIf the asID field is present, it MUST contain an instance of ConstrainedASIdentifiers.¶\n\nIf the ipAddrBlocks field is present, it MUST contain an instance of ConstrainedIPAddrBlocks.¶\n\nAt least one of asID or ipAddrBlocks MUST be present.¶\n\nConstrainedASIdentifiers and ConstrainedIPAddrBlocks are specified such that the resulting DER-encoded data instances are binary compatible with ASIdentifiers and IPAddrBlocks (defined in [RFC3779]), respectively.¶\n\nImplementations encountering decoding errors whilst attempting to read DER-encoded data using this specification should be aware of the possibility that the data may have been encoded using an implementation intended for use with [RFC3779]. Such data may contain elements prohibited by the current specification.¶\n\nAttempting to decode the errored data using the more permissive specification contained in [RFC3779] may enable implementors to gather additional context for use when reporting errors to the user.¶\n\nHowever, implementations MUST NOT ignore errors resulting from the more restrictive definitions contained herein; in particular, such errors MUST cause the validation procedure described in Section 5 to fail.¶\n\n4.2.1. ConstrainedASIdentifiers Type\n\nConstrainedASIdentifiers is a SEQUENCE consisting of a single field, asnum, which in turn contains a SEQUENCE OF one or more ASIdOrRange instances as defined in [RFC3779].¶\n\nConstrainedASIdentifiers is defined such that the resulting DER-encoded data are binary compatible with ASIdentifiers defined in [RFC3779].¶\n\n4.2.2. ConstrainedIPAddrBlocks Type\n\nConstrainedIPAddrBlocks is a SEQUENCE OF one or more instances of ConstrainedIPAddressFamily.¶\n\nThere MUST be only one instance of ConstrainedIPAddressFamily per unique Address Family Identifier (AFI).¶\n\nThe elements of ConstrainedIPAddressFamily MUST be ordered by ascending addressFamily values (treating the octets as unsigned numbers). Thus, when both IPv4 and IPv6 addresses are specified, the IPv4 addresses MUST precede the IPv6 addresses (since the IPv4 AFI of 0001 is less than the IPv6 AFI of 0002).¶\n\nConstrainedIPAddrBlocks is defined such that the resulting DER-encoded data are binary compatible with IPAddrBlocks defined in [RFC3779].¶\n\n4.2.2.1. ConstrainedIPAddressFamily Type\n\n4.2.2.1.1. addressFamily Field\n\nThe addressFamily field is an OCTET STRING containing a 2-octet AFI, in network byte order. Unlike IPAddrBlocks [RFC3779], a third octet containing a Subsequent Address Family Identifier (SAFI) MUST NOT be present. AFIs are specified in the \"Address Family Numbers\" registry [IANA.ADDRESS-FAMILY-NUMBERS] maintained by IANA.¶\n\n4.2.2.1.2. addressesOrRanges Field\n\nThe addressesOrRanges element is a SEQUENCE OF one or more IPAddressOrRange values, as defined in [RFC3779]. The rules for canonicalization and encoding defined in Section 2.2.3.6 of [RFC3779] apply to the value of addressesOrRanges.¶\n\n4.3. digestAlgorithm\n\nThe digest algorithm is used to create the message digest of the attested digital object(s). This algorithm MUST be a hashing algorithm defined in [RFC7935].¶\n\n4.4. checkList\n\nThis field is a SEQUENCE OF one or more FileNameAndHash values. There is one FileNameAndHash entry for each digital object referenced on the RSC.¶\n\n4.4.1. FileNameAndHash\n\nEach FileNameAndHash is an ordered pair of the name of the directory entry containing the digital object and the message digest of the digital object.¶\n\nThe hash field is mandatory. The value of the hash field is the calculated message digest of the digital object. The hashing algorithm is specified in the digestAlgorithm field.¶\n\nThe fileName field is OPTIONAL. This is to allow RSCs to be used in a \"stand-alone\" fashion in which nameless digital objects are addressed directly through their respective message digest rather than through a file system abstraction.¶\n\nIf the fileName field is present, then its value:¶\n\nMUST contain only characters specified in the Portable Filename Character Set as defined in [POSIX].¶\n\nMUST be unique with respect to the other FileNameAndHash elements of checkList for which the fileName field is also present.¶\n\nConversely, if the fileName field is omitted, then the value of the hash field MUST be unique with respect to the other FileNameAndHash elements of checkList for which the fileName field is also omitted.¶\n\n8. Security Considerations\n\nRPs are hereby warned that the data in an RSC is self-asserted. When determining the meaning of any data contained in an RSC, RPs MUST NOT make any assumptions about the signer beyond the fact that it had sufficient control of the issuing CA to create the object. These data have not been verified by the Certificate Authority (CA) that issued the CA certificate to the entity that issued the EE certificate used to validate the RSC.¶\n\nRPKI certificates are not bound to real-world identities; see [RFC9255] for an elaboration. RPs can only associate real-world entities to Internet Number Resources by additionally consulting an exogenous authority. RSCs are a tool to communicate assertions signed with Internet Number Resources and do not communicate any other aspect of the resource holder's business operations, such as the identity of the resource holder itself.¶\n\nRSC objects are not distributed through the RPKI repository system. From this, it follows that third parties who do not have a copy of a given RSC may not be aware of the existence of that RSC. Since RSC objects use EE certificates but all other currently defined types of RPKI object profiles are published in public CA repositories, an observer may infer from discrepancies in the repository that RSC object(s) may exist. For example, if a CA does not use random serial numbers for certificates, an observer could detect gaps between the serial numbers of the published EE certificates. Similarly, if the CA includes a serial number on a Certificate Revocation List (CRL) that does not match any published object, an observer could postulate that an RSC EE certificate was revoked.¶\n\nConversely, a gap in serial numbers does not imply that an RSC exists. Nor does the presence in a CRL of a serial number unknown to the RP imply an RSC object exists: the implicitly referenced object might not be an RSC, it might have never been published, or it may have been revoked before it was visible to RPs. In general, it is not possible to confidently infer the existence or non-existence of RSCs from the repository state without access to a given RSC.¶\n\nWhile a one-time-use EE certificate must only be used to generate and sign a single RSC object, CAs technically are not restricted from generating and signing multiple different RSC objects with a single key pair. Any RSC objects sharing the same EE certificate cannot be revoked individually.¶"
    }
}