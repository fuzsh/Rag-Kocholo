{
    "id": "dbpedia_6156_3",
    "rank": 70,
    "data": {
        "url": "https://learning.lpi.org/en/learning-materials/010-160/1/1.3/1.3_01/",
        "read_more_link": "",
        "language": "en",
        "title": "1.3 Lesson 1",
        "top_image": "https://learning.lpi.org/favicon-32x32.png",
        "meta_img": "https://learning.lpi.org/favicon-32x32.png",
        "images": [
            "https://learning.lpi.org/lpi-learning-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Introduction\n\nWhile the terms free software and open source software are widely used, there are still some misconceptions about their meaning. In particular, the concept of âfreedomâ needs closer examination. Letâs start with the definition of the two terms.\n\nLicenses\n\nUnlike a refrigerator or a car, software is not a physical product, but a digital product. Thus, a company cannot actually transfer ownership of such a product by selling it and changing the physical possessionââârather, it transfers the rights of use to that product, and the user contractually agrees to those rights of use. Which rights of use these are and above all are not is recorded in the software license, and thus it becomes understandable how important the regulations contained therein are.\n\nWhile large vendors of proprietary software, such as Microsoft or SAP, have their own licenses that are precisely tailored to their products, the advocates of free and open source software have from the outset striven for clarity and general validity of their licenses, because after all, every user should understand them and, if necessary, use them himself for his own developments.\n\nHowever, it should not be concealed that this ideal of simplicity can hardly be achieved because too many specific requirements and internationally not always compatible legal understandings stand in the way of this. To give just one example: German and American copyright law are fundamentally different. According to German law there is one person as author (more precisely: Urheber), whose work is his intellectual property. While the author can grant permission to use his work, he can not assign or give up his authorship. The latter is alien to American law. Here, too, there is an author (who, however, can also be a company or an institution), but he only has exploitation rights which he can transfer in part or in full and thus completely detach himself from his work. An internationally valid licence must be interpreted with respect of different legislation.\n\nThe consequences are numerous and sometimes very different FOSS licenses. Worse, still, are different versions of a license, or a mix of licenses (within a project, or even when connecting multiple projects) which can cause confusion or even legal disputes.\n\nBoth the representatives of free software and the advocates of the clearly economically oriented open source movement created their own organizations, which today are decisively responsible for the formulation of software licenses according to their principles and support their members in their enforcement.\n\nCopyleft\n\nThe already mentioned Free Software Foundation (FSF) has formulated the GNU General Public License (GPL) as one of the most important licenses for free software, which is used by many projects, e.g. the Linux kernel. In addition, it has released licenses with case-specific customizations, such as the GNU Lesser General Public License (LGPL), which governs the combination of free software with modifications made to code where the source code for the modifications do not have to be released to the public, the GNU Affero General Public License (AGPL), which covers selling access to hosted software, or the GNU Free Documentation License (FDL), which extends freedom principles to software documentation. In addition, the FSF makes recommendations for or against third-party licenses, and affiliated projects such as GPL-Violations.org investigate suspected violations of free licenses.\n\nThe FSF calls the principle according to which a free license also applies to modified variants of the software copyleftâââin contrast to the principle of restrictive copyright which it rejects. The idea, therefore, is to transfer the liberal principles of a software license as unrestrictedly as possible to future variants of the software in order to prevent subsequent restrictions.\n\nWhat sounds obvious and simple, however, leads to considerable complications in practice, which is why critics often call the copyleft principle âviralâ, since it is transmitted to subsequent versions.\n\nFrom what has been said it follows, for example, that two software components that are licensed under different copyleft licenses might not be combinable with each other, since both licenses cannot be transferred to the subsequent product at the same time. This can even apply to different versions of the same license!\n\nFor this reason, newer licenses or license versions often no longer grasp the copyleft so rigorously. Already the mentioned GNU Lesser General Public License (LGPL) is in this sense a concession to be able to connect free software with ânon-freeâ components, as it is frequently done with so-called libraries. Libraries contain subroutines or routines, which in turn are used by various other programs. This leads to the common situation where proprietary software calls such a subroutine from a free library.\n\nAnother way to avoid license conflicts is dual licensing, where one software is licensed under different licenses, e.g. a free license and a proprietary license. A typical use case is a free version of a software which might only be used when respecting the copyleft restrictions and the alternative offering to obtain the software under a different license which frees the licensee from certain restriction in return for a fee which could be used to fund the development of the software.\n\nIt should therefore become clear that the choice of license for software projects should be made with much caution, since the cooperation with other projects, the combinability with other components and also the future design of the own product depend on it. The copyleft presents developers with special challenges in this respect.\n\nOpen Source Definition and Permissive Licenses\n\nOn the open source side, it is the Open Source Initiative (OSI), founded in 1998 by Eric S. Raymond and Bruce Perens, which is mainly concerned with licensing issues. It has also developed a standardized procedure for checking software licenses for compliance with its Open Source Definition. More than 80 recognized open source licenses can currently be found on the OSI website.\n\nHere they also list licenses as âOSI-approvedâ that explicitly contradict the copyleft principle, especially the BSD licenses group. The Berkeley Software Distribution (BSD) is a variant of the Unix operating system originally developed at the University of Berkeley, which later gave rise to free projects such as NetBSD, FreeBSD and OpenBSD. The licenses underlying these projects are often referred to as permissive. In contrast to copyleft licenses, they do not have the aim of establishing the terms of use of modified variants. Rather, the maximum freedom should help the software to be as widely distributed as possible by leaving the editors of the software alone to decide how to proceed with the editsâââwhether, for example, they also release them or treat them as closed source and distribute them commercially.\n\nThe 2-Clause BSD License, also called Simplified BSD License or FreeBSD License, proves how reduced such a permissive license can be. In addition to the standardized liability clause, which protects developers from liability claims arising from damage caused by the software, the license consists of only the following two rules:\n\nCreative Commons\n\nThe successful development concept of FLOSS and the associated technological progress led to attempts to transfer the open source principle to other, non-technical areas. The preparation and provision of knowledge, as well as the creative cooperation in solving complex tasks, are now regarded as evidence of the extended, content-related open source principle.\n\nThis led to the need to create reliable foundations in these areas as well, according to which work results can be shared and processed. Since the available software licenses were hardly suitable for this, there were numerous attempts to convert the specific requirements from scientific work to digitized works of art âin the spirit of open sourceâ into similarly handy licenses.\n\nBy far the most important initiative of this kind today is Creative Commons (CC), which summarizes its concerns as follows:\n\nCreative Commons is a global nonprofit organization that enables sharing and reuse of creativity and knowledge through the provision of free legal tools.\n\nWith Creative Commons, the focus of rights assignment goes back from the distributor to the author. An example: In traditional publishing, an author usually transfers all publishing rights (printing, translation, etc.) to a publisher, who in turn ensures the best possible distribution of the work. The significantly changed distribution channels of the Internet now put the author in a position to exercise many of these publishing rights herself and to decide for herself how her work may be used. Creative Commons gives the opportunity to determine this simply and legally reliably, but Creative Commons wants more: authors are encouraged to make their works available as a contribution to a general process of exchange and cooperation. Unlike traditional copyright, which gives the author all the rights that they can transfer to others as needed, the Creative Commons approach takes the opposite approach: the author makes her work available to the community, but can choose from a set of features those that need to be considered when using the workâââthe more features she chooses, the more restrictive the license.\n\nAnd so the âChoose a Licenseâ principle of CC asks an author step by step for the individual properties and generates the recommended license, which the author can last assign to the work as text and icon.\n\nFor a better understanding, here is an overview of the six possible combinations and licenses offered by CC:\n\nCC BY (âAttributionâ)\n\nThe free license that allows anyone to edit and distribute the work as long as they name the author.\n\nCC BY-SA (âAttribution-ShareAlikeâ)\n\nAs CC BY, except that the modified work may only be distributed under the same license. The principle reminds of the copyleft, because the license is âinheritedâ here as well.\n\nCC BY-ND (âAttribution-NoDerivativesâ)\n\nLike CC BY, except that the work may only be passed on unmodified.\n\nCC BY-NC (âAttribution-NonCommercialâ)\n\nThe work may be edited and distributed by naming the author, but only under non-commercial conditions.\n\nCC BY-NC-SA (âAttribution-NonCommercial-ShareAlikeâ)\n\nAs BY-NC, except that the work may only be shared under the same conditions (i.e. a copyleft-like license).\n\nCC BY-NC-ND (âAttribution-NonCommercial-NoDerivativesâ)\n\nThe most restrictive license: the distribution is allowed with attribution of the author, but only unchanged and under non-commercial conditions.\n\nBusiness Models in Open Source\n\nIn retrospect, the triumph of FLOSS acts like a grassroots movement of technophile idealists who, independent of economic constraints and free of monetary dependencies, put their work at the service of the general public. At the same time, companies worth billions have been created in the FLOSS environment; to name just one, the US company Red Hat founded in 1993 with annual sales of over 3 billion USD (2018), which was taken over by the IT giant IBM in 2018.\n\nSo letâs take a look at the tension between the free and mostly free-of-charge distribution of high-quality software and the business models for its creators, because one thing should be clear: The countless highly qualified developers of free software must also earn money, and the originally purely non-commercial FLOSS environment must therefore develop sustainable business models in order to preserve its own cosmos.\n\nA common approach, especially for larger projects in the initial phase, is the so-called crowdfunding, i.e. the collection of money donations via a platform like Kickstarter. In return, the donors receive a pre-defined bonus from the developers in the event of success, i.e. if previously defined goals are achieved, be it unlimited access to the product or special features.\n\nAnother approach is dual licensing: free software is offered in parallel under a more restrictive or even proprietary license, which in turn guarantees the customer more extensive services (response times in the event of errors, updates, versions for certain platforms, etc.). One example among many is ownCloud, which is being developed under the GPL and offers business customers a âBusiness Editionâ under a proprietary license.\n\nLet us also take ownCloud as an example of another widespread FLOSS business model: professional services. Many companies lack the necessary in-house technical knowledge to set up and operate complex and critical software reliably and, above all, securely. Thatâs why they buy professional services such as consulting, maintenance or helpdesk directly from the manufacturer. Liability issues also play a role in this decision, as the company transfers the risks of operation to the manufacturer.\n\nIf a software manages to become successful and popular in its field, it is peripheral monetization possibilities such as merchandising or certificates that customers acquire and thus point out its special status when using this software. The learning platform Moodle offers the certification of trainers, who document their knowledge to potential clients, for example, and this is just one example among countless others.\n\nSoftware as a Service (SaaS) is another business model, especially for web-based technologies. Here, a cloud provider runs a software like a Customer Relationship Management (CRM) or a Content Management System (CMS) on their servers and grant their customers access to the installed application. This saves the customer installation and maintenance of the software. In return, the customer pays for the use of the software according to various parameters, for example the number of users. Availability and security play an important role as business-critical factors.\n\nLast but not least, the model of developing customer-specific extensions into free software by order is particularly common in smaller projects. It is then usually up to the customer to decide how to proceed with these extensions, i.e. whether he also releases them or keeps them under lock and key as part of his own business model.\n\nOne thing should have become clear: Although free software is usually available free of charge, numerous business models have been created in their environment, which are constantly modified and extended by countless freelancers and companies worldwide in a very creative form, which ultimately also ensures the continued existence of the entire FLOSS movement.\n\nGuided Exercises\n\nWhat areâââin a nutshellâââthe âfour freedomsâ as defined by Richard Stallman and the Free Software Foundation?\n\nfreedom 0\n\nfreedom 1\n\nfreedom 2\n\nfreedom 3\n\nWhat does the abbreviation FLOSS stand for?\n\nYou have developed free software and want to ensure that the software itself, but also all future works based on it, remain free as well. Which license do you choose?\n\nCC BY\n\nGPL version 3\n\n2-Clause BSD License\n\nLGPL\n\nWhich of the following licenses would you call permissive, which would you call copyleft?\n\nSimplified BSD License\n\nGPL version 3\n\nCC BY\n\nCC BY-SA\n\nYou have written a web application and published it under a free license. How can you earn money with your product? Name three possibilities.\n\nExplorational Exercises\n\nUnder which license (including version) are the following applications available?\n\nApache HTTP Server\n\nMySQL Community Server\n\nWikipedia articles\n\nMozilla Firefox\n\nGIMP\n\nYou want to release your software under the GNU GPL v3. What steps should you follow?\n\nYou have written proprietary software and would like to combine it with free software under the GPL version 3. Are you allowed to do this or what do you have to consider?\n\nWhy did the Free Software Foundation release the GNU Affero General Public License (GNU AGPL) as a supplement to the GNU GPL?\n\nName three examples of free software, which are also offered as âBusiness Editionâ, i.e. in a chargeable version.\n\nSummary\n\nIn this lesson you have learned:\n\nSimilarities and differences between free and open source software (FLOSS)\n\nFLOSS licenses, their importance and problems\n\nCopyleft vs. permissive licences\n\nFLOSS business models\n\nAnswers to Guided Exercises\n\nWhat areâââin a nutshellâââthe âfour freedomsâ as defined by Richard Stallman and the Free Software Foundation?\n\nfreedom 0\n\nrun the software\n\nfreedom 1\n\nstudy and modify the software (source code)\n\nfreedom 2\n\ndistribute the software\n\nfreedom 3\n\ndistribute the modified software\n\nWhat does the abbreviation FLOSS stand for?\n\nFree/Libre Open Source Software\n\nYou have developed free software and want to ensure that the software itself, but also all future results based on it, remain free as well. Which license do you choose?\n\nCC BY\n\nGPL version 3\n\nX\n\n2-Clause BSD License\n\nLGPL\n\nWhich of the following licenses would you call permissive, which would you call copyleft?\n\nSimplified BSD License\n\npermissive\n\nGPL version 3\n\ncopyleft\n\nCC BY\n\npermissive\n\nCC BY-SA\n\ncopyleft\n\nYou have written a web application and published it under a free license. How can you earn money with your product? Name three possibilities.\n\nDual licensing, e.g. by offering a chargeable âBusiness Editionâ\n\nOffering hosting, service, and support\n\nDeveloping proprietary extensions for customers\n\nAnswers to Explorational Exercises\n\nUnder which license (including version) are the following applications available?\n\nApache HTTP Server\n\nApache License 2.0\n\nMySQL Community Server\n\nGPL 2\n\nWikipedia articles (English)\n\nCreative Commons Attribution Share-Alike license (CC-BY-SA)\n\nMozilla Firefox\n\nMozilla Public License 2.0\n\nGIMP\n\nGPL 3\n\nYou want to release your software under the GNU GPL v3. What steps should you follow?\n\nIf necessary, secure yourself against the employer with a copyright waiver, for example, so that you can specify the license.\n\nAdd a copyright notice to each file.\n\nAdd a file called COPYING with the full license text to your software.\n\nAdd a reference to the license in each file.\n\nYou have written proprietary software and would like to combine it with free software under the GPL version 3. Are you allowed to do this or what do you have to consider?\n\nThe FAQs of the Free Software Foundation provide information here: Provided that your proprietary software and the free software remain separate from each other, the combination is possible. However, you have to make sure that this separation is technically guaranteed and recognizable for the users. If you integrate the free software in such a way that it becomes part of your product, you must also publish the product under the GPL according to the copyleft principle.\n\nWhy did the Free Software Foundation release the GNU Affero General Public License (GNU AGPL) as a supplement to the GNU GPL?\n\nThe GNU AGPL closes a license gap that arises especially with free software hosted on a server: If a developer makes changes to the software, he is not obliged under the GPL to make these changes accessible, since he allows access to the program, but does not âredistributeâ on the program in the GPL sense. The GNU AGPL, on the other hand, stipulates that the software must be made available for download with all changes.\n\nName three examples of free software, which are also offered as âBusiness Editionâ, e.g. in a chargeable version.\n\nMySQL, Zammad, Nextcloud"
    }
}