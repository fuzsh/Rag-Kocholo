{
    "id": "dbpedia_6156_3",
    "rank": 60,
    "data": {
        "url": "https://linuxmender.wordpress.com/tag/openbsd/",
        "read_more_link": "",
        "language": "en",
        "title": "Lands of Unix",
        "top_image": "https://s0.wp.com/i/blank.jpg",
        "meta_img": "https://s0.wp.com/i/blank.jpg",
        "images": [
            "https://linuxmender.wordpress.com/wp-content/uploads/2017/08/void_screencap.png?w=800",
            "https://linuxmender.wordpress.com/wp-content/uploads/2017/08/openbsd_screenshot.png?w=800",
            "https://linuxmender.wordpress.com/wp-content/uploads/2017/08/screenfetch_openbsd.png?w=800",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Andy Mender"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Posts about OpenBSD written by Andy Mender",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Lands of Unix",
        "canonical_link": "https://linuxmender.wordpress.com/tag/openbsd/",
        "text": "Recently, I was really into the BSDs and fiddled around with OpenBSD on some of my PCs. I still keep it on one laptop and FreeBSD on my main workstation. The point being that the BSDs are a lot more consistent, reliable and if something works out-of-the-box, it will most likely stay that way for a long while. Changes are incremental and major frameworks are not being reworked for semi-valid reasons, like oh, this looks old. Also, the very clearly superior BSD documentation – cannot go wrong with that!\n\nNowadays, Linux seems to be riddled with Windows-like problems. There is a surprisingly strong emphasis on easy-to-use GUI tools and hype for certain technologies (*cough* *cough* Docker) that are far from production-ready. The main rationale seems to be make it easy to set up. Everywhere I look there is loads of fluff. As Matthew Fuller put it in his discourse at over-yonder.net, we should be improving the back-end and extending it into usable front-ends, not the other way round. I agree, it’s important to enable people to do great things with technology, but if the how is there yet the why is missing, we’re not getting far. In addition, there is a lot of wheel re-inventing going on. People forget (or simply don’t know) that many of the great frameworks and tools were implemented already and can still be used effectively. Then, there is systemd (a case study on bad software engineering) and making Linux things so Linux-centric that portability suffers greatly (see: Docker being in fact Linux + Docker on non-Linux platforms). So there, we need a hero. Otherwise, we’re doomed to drown in self-indulgence.\n\nA rather interesting idea would be to take the Linux kernel (for hardware compatibility reasons) and build a BSD-like operating system on top of it. Forget systemd, NetworkManager and other tools that try hard to do something that has already been done successfully. Leave the kernel + GNU coreutils in a steadily improving base and separate third-party software into package repositories. Also, one needs to start fresh – a clean slate to avoid the pitfalls of existing Linux distributions. In fact, there is already a project that tries to implement some of the BSD concepts in Linux and per my very preliminary impressions looks quite successful. Enter Void Linux!\n\nVoid seems to fill the gap (pun intended) between the Linux and BSD worlds aptly. There is a simple (limited?) init implementation called runit that takes care of starting the system as our favorite PID1, and launching service daemons to get a certain degree of persistence. It’s a typical Unix-like piece of software – does its job and swiftly moves aside to let us do ours. Then, there is the XBPS package manager and ports builder all-in-one framework. Think Arch’s ABS on steroids. Instead of OpenSSL we get OpenBSD’s LibreSSL (huge plus in my book!) and the musl C library alongside (but not on one installation, mind you) the traditional glibc. Speaking of C, all of these tools seem to be quite robust and xbps is perhaps the snappiest package manager I have seen in a while. Although the developer team is small, it’s doing a decent job at maintaining Void Linux. It’s a clear sign that it’s possible to run Linux without unnecessary bells and whistles, yet with all of the standard desktop features one might expect. My generic ASUS S301LA ultrabook handled Void Linux very well and all of its hardware was both supported and configured correctly (Intel WiFi Link 5100, SiS touchpad, AzureWave webcam, Intel HD 4400 graphics, WD-Green SSD, UEFI). Below a screenfetch rundown of the setup:\n\nNow, it is true that finding a solution to 14 problems generates a 15th problem. There are certain aspects of Linux system design that I don’t completely agree with and adding orderly features on top of a Linux distribution mess doesn’t make the final product more organized. However, it’s a very successful step towards restoring some sanity to Linux Land that we lack so much nowadays.\n\nI wrote about OpenBSD a bit in the past. Since then I’ve been distro-hopping plenty like a nervous flea that I am. Eventually, I put Debian 9.1 Stable on some of my machines and that’s what I run at work out of convenience and in case someone needs Linux-related help. I cannot say I don’t like it. To me Debian feels like the FreeBSD of the GNU/Linux side of FOSS. It’s sensible. It’s stable. However, I quickly tire of the systemd hiccups, focus on flashy graphical frameworks and other annoyances. Then, I turn to the BSD world with FreeBSD on my home workstation and OpenBSD on this here VAIO laptop. Admittedly, I was somewhat curious about hardware compatibility in release 6.1. This laptop is more powerful than the Intel M based Dell Latitude E5500 I used for testing OpenBSD previously. Also, the VAIO ran Debian 9.1 well enough that I could do actual work without waiting long minutes for a JavaScript-infested Web page to load. How would it cope with OpenBSD however?\n\nInstalling OpenBSD is fairly straightforward and if someone has ever installed Gentoo or Arch Linux….well, OpenBSD is easier! Out-of-the-box we even get an X11 server called Xenocara together with the xenodm display/login manager (not mandatory). Somewhat unfortunately, the default window manager CWM looks extremely dated and the black-white-grey dotted background would hurt my eyes. Not to worry, though. Openbox was just a pkg_add away. In fact, most of the tools I use every day were also, hence I didn’t really miss anything. It’s FOSS and I guess I shouldn’t be surprised that I can reproduce a fairly standard setup on another OS. The critical point for me was whether I could install all of the Python machine learning modules I use for writing regression tests. pandas, matplotlib and numpy are usually available from software repositories. Granted, not on every single open-source operating system. Luckily, the Python package installer PIP provides fantastic means of interoperability, which I encourage everyone to use. Even with Windows *cough* *cough*. Soon after PIP completed its work I was set up and good to go!\n\nThen there is the usual How to make my system more polished? I got myself a nice OpenBSD wallpaper from the Interwebs (see: image above) and proceeded to reading the official documentation to understand the system better. The login environment is handled by the Korn Shell (the extra crispy OpenBSD variant of the Korn Shell, mind you), From there we add packages with pkg_add and modify them with a slew of other pkg_* tools. If anyone is familiar with former releases of FreeBSD, he or she will know the pkg_* commands. The system (kernel + core utilities) and the Ports Collection source code trees are tracked via AnonCVS, a largely improved CVS fork. It’s quite noticeable that the OpenBSD project strives to tweak and improve existing tools in order to make them more secure. I still need to figure out how to adjust the sound volume efficiently via mixerctl. Perhaps I’ll write a thin GUI client in Java or Python (or port my favourite volumeicon) in case none are available. Or just map a set of keyboard keys to mixerctl calls.\n\nWhen comparing open-source operating systems, especially BSDs vs GNU/Linux distributions, people often consider things like system performance, resource usage, software availability, etc.\n\nIs OpenBSD faster than Debian? Not really. However, on modern PCs any open-source operating system is faster than Windows or MacOS X. This should come as no surprise.\n\nDoes it use less system resources? Perhaps a tiny bit, though many open-source programs are portable and any optimizations are rather accidental. To give you an idea Openbox + WordPress opened in Firefox + mpv playing a jazzy tune amount to ~700 MB RAM in total. Not too shabby, right?\n\nAre programs X, Y and Z available? This largely depends on what tools one requires for work. The typical assortment (LibreOffice, GIMP, Inkscape, etc.) is there for the taking. Also, GUI tools can be replaced with CLI tools with minimal effort (for instance, Irssi/WeeChat instead of HexChat). The only real limitation I noticed so far is programs that are only accessible in binary form or certain device drivers with binary-only blobs (see: nVidia). OpenBSD has a strong policy against closed-source software and unless the company in question has a good reputation of providing quality software consistently, I think full source code disclosure is the right way to go.\n\nIs my hardware well supported? For device drivers see above. Other than that most (if not all) Intel-based hardware works as well as on GNU/Linux distributions. For improved 3D performance AMD is a fine choice, too. Perhaps webcam support is a bit lacking, but many models like the MacBook iSight even are supported.\n\nThe bottom line is this – OpenBSD is a great Unix-like operating system. It’s super secure and has one of the best documentations out there. If that’s your cup of tea, join the crew. If not, at least give it a try. I can assure you it’s worth it. Finally, a screenfetch for the geeks among us:\n\nI feel I have wronged OpenBSD in my earlier entry, while it surely deserves proper attention. My main problem was that it really surprised me with its minimalist approach. However, the more I used the default tools and read the documentation, the more it became clear to me. I especially needed to drop some presumptions I made based on Internet articles addressed to laymen:\n\nOpenBSD has nothing to do with FreeBSD except for selected tools and features (rc.conf, PF firewall, Ports Tree design, etc.). Thereby, the two systems are not comparable to each other at all (except for its common heritage in BSD4.4 Lite). In fact, each BSD system is independent, contrary to the “Distribution” in the BSD acronym.\n\nOpenBSD has very well defined goals (code correctness, security, stability, etc.), which do not require it to cater to the end-user. Therefore, it is not built with desktop users in mind specifically, though many desktop features are of course available thanks to contributions from members of the community.\n\nHaving the above points in mind, I approached OpenBSD as an entirely separate and unique entity. I am glad to say, I was quite happy with what I saw. It’s indeed amazingly documented and understanding it properly is mostly about reading that documentation. Everything needed to run a basic installation is there. The Ports Tree and packages lets the user expand on the already great base. On each operating system I usually install a set of essential tools I need for software development and leisure – vim (with GUI if possible), w3m (for command-line Web browsing), firefox, a file manager (mc, pcmanfm, etc.) and a music player (mplayer, for instance). I’m happy to report that all of those applications are available from the not-so-small OpenBSD repositories. In general, BSDs are not strong on games, though OpenBSD offers a nice selection still. I grabbed OpenTTD and 0ad instantly. Also, since the base contains xenocara, I added Openbox on top of the already provided fvwm, cwm and twm. Openbox is my absolute favorite among the *box window managers and with a small laptop screen, a tiling window manager such as i3 or awesome is not exactly what I would call convenient.\n\nSince then, I’m running OpenBSD as my secondary operating system (FreeBSD being the primary). It’s quite smooth sailing, though I still have a lot to learn regarding setting up network services and rebuilding the kernel. I feel OpenBSD would be more suited for a small, space-limited server than FreeBSD. I didn’t yet have the chance to test it on an ARM device, though I guess there it should also shine.\n\nBecoming more and more security-aware, I was a bit shocked at how lax the default firewall setup in Debian is. Granted, in FreeBSD one has to toggle PF manually and write the first ruleset by hand. Both UFW and PF can of course be configured during install time already and the rules made strict. That’s beside the point though, because there exists an operating system that focuses on security much more – OpenBSD.\n\nI used to read about OpenBSD here and there (mostly good things). Thanks to it we have OpenSSH and the LibreSSL cryptographic protocol. However, last time I booted the liveCD, it was quite daunting. I embraced the command line long ago, though OpenBSD still proved to be more challenging than I had anticipated. It was really a new and alien environment. Nevertheless, I decided to roll out an install on one of my legacy i386 computers – Dell Latitude E5500, sporting the 2.00 GHz Intel M processor. Not the fastest steed in the stable, though a perfect machine to test OpenBSD on!\n\nThe installation was quite uneventful, except for perhaps the weird CLI to fdisk and the overall dated looks. “Vanilla” OpenBSD runs FVWM on top of Xenocara (hardened X11 without 3D acceleration), which can be installed as one of the initial software sets to get a graphical user interface quickly. The XDM display manager was a welcomed addition, too. Surprisingly, OpenBSD is one of the very few operating systems that include a graphical user interface by default. It looks old in 2016, though I still remember the fun I had with Windows 3.11. Alas, there is no rose without thorns as they say…\n\n…I plugged in my USB mouse and it didn’t work out-of-the-box. Quite the surprise, since the trackpad worked without hustle. Even FreeBSD provided me with a functional cursor already in the console. It seems that OpenBSD is a different beast altogether and requires some tinkering. Another surprise came later. OpenBSD has a very limited package management system. There is pkg_add to install software packages and a set of other pkg_* tools to get around the repositories. However, querying seems to be missing. Of course, one could pull in the Ports Tree and do everything there. Eventually, I’ll get to that. Still, the official documentation mentions that “regular” users better use binary packages.\n\nMore on the topic of the Ports Tree, forget everything you’ve learned from Gentoo or FreeBSD. OpenBSD’s system is more akin to CRUX Linux. To get wanted features no magical ncurses menu will help you. Embrace the Makefile. You’d better! Similarly, there is no official “apt dist-upgrade” or “freebsd-update” system update tool. Patches have to be downloaded, extracted and applied manually. Extremely daunting, no? Thankfully, some kind souls from M:Tier provided alternative means of upgrading OpenBSD systems with “openup” (more on it here) In general, there is a noticeable lack of automation many people might take for granted. For me that’s not really a problem, because I am willing to learn and read. Still, the learning curve is very steep indeed!\n\nAll in all, OpenBSD is an interesting operating system. It’s extremely minimal so that even very dated hardware can be used effectively. Also, the manual pages are absolutely unmatched. I learned a lot about windowing and display management just from reading the xdm manpage. On the other hand, OpenBSD is in dire need of extra manpower to make the project more noticeable.\n\nSince FreeBSD 11-RELEASE is almost out, I decided to try the ALPHA and BETA versions to see whether my Intel Haswell bearing ASUS ultrabook is finally supported in the graphics department. As always, I was refreshed by the quality and smoothness of the ncurses CLI installer. Certain positive surprises happened to me, too. Apparently the urtwn kernel module for Realtek wireless adapters no longer requires signing a license agreement with Realtek. Hence, for the first time in Unix history I could do a CLI install of an operating system with a wireless USB dongle out-of-the-box. How amazing is that, eh? GNU/Linux can suck it with its myriad of hackish and confusing networking tools that need additional configuration.\n\nThat in turn brought to my attention the fact that in terms of manpower, the BSDs are almost unmanned when compared to GNU/Linux operating systems. The disproportions are simply huge! Sometimes, I think of BSDs as this antiquated Soviet submarine with a crew full of diehard veterans. What they lack in numbers, they compensate with experience and cunning. Projects such as OpenSSH or LibreSSL don’t have as many programmers as leading GNU/Linux projects, yet they received Microsoft’s recognition. Surprisingly enough, the BSD world is largely a community of doers not talkers. We don’t hear or read about any of the BSDs even in magazines devoted to building server infrastructures or GNU/Linux. The word is not there…\n\n…hence, I think we should seriously start spreading it. We should show the world that BSDs are worth investing (time, effort, money, etc.) in. Do you like FreeBSD, NetBSD or OpenBSD? Do you see opportunities where a BSD operating system would be more suited than other offerings? Do you see resources going to waste? Get the word out!"
    }
}