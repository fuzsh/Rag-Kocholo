{
    "id": "dbpedia_1585_3",
    "rank": 88,
    "data": {
        "url": "https://codefresh.io/learn/ci-cd-pipelines/ci-cd-and-agile-why-ci-cd-promotes-true-agile-development/",
        "read_more_link": "",
        "language": "en",
        "title": "CI/CD and Agile: Why CI/CD Promotes True Agile Development",
        "top_image": "https://codefresh.io/wp-content/uploads/2022/10/CICD-and-Agile-Why-CICD-Promotes-True-Agile-Development-3-1024x535-1.png",
        "meta_img": "https://codefresh.io/wp-content/uploads/2022/10/CICD-and-Agile-Why-CICD-Promotes-True-Agile-Development-3-1024x535-1.png",
        "images": [
            "https://codefresh.io/wp-content/uploads/2023/05/Conquer-DevOps-1.svg",
            "https://codefresh.io/wp-content/uploads/2023/05/Conquer-DevOps-1.svg",
            "https://codefresh.io/wp-content/uploads/2024/02/codefresh-footer-logo.svg",
            "https://codefresh.io/wp-content/uploads/2024/02/codefresh-footer-logo.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/G2-Spring-Users-Love-Us.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/G2-Spring-Users-Love-Us.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/Fastest-Implentation-1.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/Fastest-Implentation-1.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/Leader.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/Leader.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/google-cloud-platform.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/google-cloud-platform.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/AWS-Partner-Network.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/AWS-Partner-Network.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/Argo-Footer.svg",
            "https://codefresh.io/wp-content/uploads/2023/06/Argo-Footer.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/microsoft-azure.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/microsoft-azure.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/soc2.svg",
            "https://codefresh.io/wp-content/uploads/2023/04/soc2.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Codefresh OSS Team"
        ],
        "publish_date": "2022-10-05T17:46:25+00:00",
        "summary": "",
        "meta_description": "Continuous integration and continuous delivery (CI/CD) and agile development go hand in hand. DevOps teams use the CI/CD pipeline to become agile organizations.",
        "meta_lang": "en",
        "meta_favicon": "https://codefresh.io/wp-content/uploads/2023/04/cropped-favicon_codefresh-150x150.webp",
        "meta_site_name": "Codefresh",
        "canonical_link": "https://codefresh.io/learn/ci-cd-pipelines/ci-cd-and-agile-why-ci-cd-promotes-true-agile-development/",
        "text": "What is CI/CD?\n\nContinuous Integration (CI) is a software engineering practice in which team members frequently integrate their work via a central version control system. According to current CI best practices, teams should integrate new code at least every few hours, and ideally should integrate every code commit, approaching truly “continuous” integration.\n\nHistorically, integration was a complex and time consuming activity that was performed towards the end of a development project. CI emphasizes automation tools that enable fast builds and tests, providing fast feedback for developers and promoting code quality. Successful CI reduces the effort of software builds and code integration, allowing teams to identify code quality issues and integration errors quickly, and remediate them early in the development lifecycle.\n\nContinuous Delivery (CD) is the automated packaging and deployment of new releases created via the CI process. Teams implementing CD can build, configure, and package new software versions and orchestrate deployment to enable immediate release to production.\n\nCI together with CD forms the CI/CD pipeline, which allows organizations to push code from initial development to testing, staging, and production environments, fully automatically.\n\nWhat is Agile Software Development?\n\nAgile is a software development approach that promotes creating in rapid iterations to continuously deliver working software.\n\nAgile does not include a set of practices that define software development actions. Instead, the approach offers a way to think about collaboration and workflows. Agile offers a set of values that guide your choices regarding what you make and how you make it.\n\nAgile software development methodologies focus on quickly delivering small pieces of working software to improve customer satisfaction.\n\nAgile methodologies typically use adaptive approaches and teamwork to promote continuous improvement. Agile software development usually consists of small, self-organized teams of business representatives and developers that regularly meet in person during the entire software development lifecycle.\n\nAgile promotes a lightweight approach to documentation, embracing changes at all lifecycle phases.\n\nWhat Are the Agile Manifesto Principles?\n\nAgile revolutionized software development. It has its roots in the Agile manifesto published in 2001, which introduced a new way of managing software projects, dramatically different from the waterfall approach that was prevalent at the time. Today, Agile principles are widely recognized and form the foundation of most software development organizations.\n\nAlthough agile is now mainstream, it is still important for teams to be aware of its principles and ensure they are implementing them correctly. Proper application of agile values and the 12 agile principles can help organizations improve software quality and streamline application delivery.\n\nEven more importantly, when properly implemented, agile practices should improve developer well being and job satisfaction, while improving development efficiency.\n\nCore Values of Agile Development\n\nThe four core values of agile software development can be summarized as:\n\nFocus on individuals and interactions, not processes and tools\n\nFocus on working software, not comprehensive documentation\n\nFocus on cooperation with customers, not contract negotiation\n\nFocus on responding to changing requirements, not following project plans.\n\nThe 12 Agile Principles\n\nThe 12 principles outlined in the Agile Manifesto are:\n\nKeep customers happy by delivering value early and consistently\n\nBreak large tasks into smaller tasks that can be completed quickly\n\nRecognize that self-organizing teams can provide the best results\n\nGive individuals the environment and support they need to get the job done\n\nCreate processes that promote sustainable efforts over time\n\nMaintain a steady rhythm of delivery for completed work\n\nWelcome changing requirements at any point during a project timeline\n\nConvene project team and business owners daily throughout a project\n\nRegularly think about how to improve efficiency and adjust development practices\n\nMeasure progress by the amount of completed, customer-valuable work\n\nContinually pursue excellence\n\nUse change to achieve a competitive edge\n\nThe agile principles do not specify how technology should be used to improve development processes, and do not say anything about automation. But DevOps teams built on these principles have realized that without automating the software delivery process, true agile development would not be possible. This is where CI/CD comes in.\n\nEnabling Agile with CI/CD and DevOps\n\nThe agile principles influenced the DevOps movement that gave birth to CI/CD. Agile’s focus is on the work of development teams, but DevOps has expanded its realm to cover additional downstream processes, including deployment and software release processes.\n\nDevOps emphasizes the importance of breaking down silos and enabling cooperation between teams to achieve a common goal. That goal is to provide users with valuable software and a continuous stream of updates and improvements. The DevOps movement introduced continuous integration, continuous delivery, and continuous deployment as practices designed to accelerate software delivery without compromising quality.\n\nRelated content: Read our guide to the CI/CD pipeline\n\nCI/CD Promotes Iterative Development\n\nThe CI/CD pipeline aims to automate as many steps as possible in the development process, providing rapid feedback and reducing the time it takes to release software to users. Perhaps most importantly, the CI/CD pipeline provided a practical way to break large development projects into small parts, and help test and deliver them to users in an iterative manner.\n\nThe CI/CD pipeline encourages developers to commit code early and often. It automatically tests code changes, provides feedback, and allows changes to pass through the pipeline and be released to production if they meet the required quality. Thus, CI/CD allows teams to rapidly deliver software that works and provides value to customers.\n\nCI/CD Promotes Collaboration\n\nDevOps emphasizes the agile value of collaboration and communication. The initial focus of DevOps was on collaboration between development and operations teams, but it had a greater impact on organizations as a whole.\n\nCI/CD pipelines provide dashboards and notifications that enable visibility into changes made in each build. This allows DevOps teams not only to understand their progress but also to share it with all stakeholders in the organization.\n\nCI/CD Promotes Quality\n\nAt the heart of the CI/CD pipeline are automated tests that provide quick feedback on code changes and enable confidence in build quality. Running automated tests on every commit is an important step to ensure that software is working properly, and is a prerequisite for automated deployment to production.\n\nAn important element of software quality is fast feedback. By automating steps in the release process, teams can deploy changes on a daily or hourly basis, creating a continuous feedback loop. This makes it possible to get fast feedback from customers, in order to continuously improve software and ensure every incremental change truly delivers value to customers.\n\nLearn more in our detailed guide to CI/CD best practices\n\nTaking CI/CD to the Next Level with Codefresh\n\nCodefresh has made it our mission since 2014 to help teams accelerate their pace of innovation. Codefresh combines the best of the open-source with an enterprise-grade runtime allowing you to fully tap the power of Argo Workflows, Events, CD, and Rollouts. It provides teams with a unified GitOps experience to build, test, deploy, and scale their applications."
    }
}