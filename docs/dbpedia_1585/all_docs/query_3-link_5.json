{
    "id": "dbpedia_1585_3",
    "rank": 5,
    "data": {
        "url": "https://www.aha.io/roadmapping/guide/agile/development-methodologies",
        "read_more_link": "",
        "language": "en",
        "title": "12 Agile Methodologies: Pros, Cons, and When To Use Them",
        "top_image": "https://images.ctfassets.net/4zfc07om50my/1fx0taDS5rKiwQaDWqJkDY/e725a921b62a8634d7b5f766de81ab81/Agile_development_methodologies.png?w=756&h=398&q=90&fm=png&bg=transparent",
        "meta_img": "https://images.ctfassets.net/4zfc07om50my/1fx0taDS5rKiwQaDWqJkDY/e725a921b62a8634d7b5f766de81ab81/Agile_development_methodologies.png?w=756&h=398&q=90&fm=png&bg=transparent",
        "images": [
            "https://www.aha.io/static/cf8242d02c6571e4f9a10afe23bb90c3/56879/products.png",
            "https://www.aha.io/static/cf8242d02c6571e4f9a10afe23bb90c3/56879/products.png",
            "https://www.aha.io/static/1a8ac6992026453d78742d290e3d0323/a9f0f/solutions.png",
            "https://www.aha.io/static/1a8ac6992026453d78742d290e3d0323/a9f0f/solutions.png",
            "https://www.aha.io/static/4de8111a8e544ef5ec9ea269c71a3d8f/b0875/resources.png",
            "https://www.aha.io/static/4de8111a8e544ef5ec9ea269c71a3d8f/b0875/resources.png",
            "https://www.aha.io/static/63345e66aff03fcd3cfeeacc0259688f/bdaa4/company.jpg",
            "https://www.aha.io/static/63345e66aff03fcd3cfeeacc0259688f/bdaa4/company.jpg",
            "https://images.ctfassets.net/4zfc07om50my/3hJtmBEBr1OhDDn1x9zS07/442ba81a782deda586c25cc0d7428b87/sprint-retrospective-large?w=750&h=431&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/3hJtmBEBr1OhDDn1x9zS07/442ba81a782deda586c25cc0d7428b87/sprint-retrospective-large?w=750&h=431&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/7bx4KhT43iwPgDW8zDhSr7/911e3628aedcfeadade938fc485df1d5/Guide-Agile-Values.png?w=750&h=590&q=90&fm=png&bg=transparent",
            "https://images.ctfassets.net/4zfc07om50my/7bx4KhT43iwPgDW8zDhSr7/911e3628aedcfeadade938fc485df1d5/Guide-Agile-Values.png?w=750&h=590&q=90&fm=png&bg=transparent"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "agile development methodology",
            "agile development",
            "agile",
            "product management",
            "sprint retrospective template"
        ],
        "tags": null,
        "authors": [
            "Aha!"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Choose the right agile development methodology for your engineering team. Common methodologies include scrum, kanban, lean, extreme programming, dynamic systems, and more.",
        "meta_lang": "",
        "meta_favicon": "/favicon-32x32.png?v=4b9222967840d785d04c63c361279f97",
        "meta_site_name": "",
        "canonical_link": "https://www.aha.io/roadmapping/guide/agile/development-methodologies",
        "text": "Last updated: May 2024\n\nAgile methodologies provide a framework for software development that is centered around collaboration, iteration, learning, and value delivery. Development teams break large efforts into manageable increments and tackle them in time-boxed cycles. The idea is for your team to have a clear, unified approach for how to define and complete work — for more flexibility, faster time to market, and higher quality software.\n\nScrum is indisputably the most popular agile framework used by teams today. According to the most recent findings from one annual report, 87 percent of teams leverage scrum. Notably, this particular survey includes all types of teams — from marketing to IT to engineering. That is… a lot of teams. One reason that scrum is adopted by so many is that it offers a lightweight framework for continuous improvement, from sprint planning to retrospectives.\n\nTop\n\nDifferent types of agile development frameworks\n\nThere are many different agile development methodologies that teams adopt. Some stick to a single methodology, while others opt to use multiple frameworks. And many teams adopt a hybrid approach, combining elements of one methodology with others to meet their needs (for example, \"scrumban\").\n\nEach methodology promotes the elements at the root of agile development — flexibility, collaboration, iteration, short release cycles, and immediate feedback.\n\nCrystal\n\nCrystal focuses on customization. It empowers agile teams to define the most effective way of collaborating, based on details like the number of team members and the specific type of project you are working on. As a developer, you have the autonomy to adjust processes and optimize workflows to fit your needs.\n\nDynamic systems development methodology (DSDM)\n\nDynamic systems development methodology (DSDM) combines the principles of time-boxing and collaboration with an emphasis on goals and business impact. It lays out distinct phases for tackling projects, from evaluating feasibility to creating prototypes to implementation. DSDM is typically selected by larger organizations and governments with the budget to cover overhead and implementation.\n\nExtreme programming (XP)\n\nExtreme programming is all about collaboration and transparency. XP espouses five key values: communication, simplicity, feedback, courage, and respect. Developers typically engage in pair programming — sitting together and writing code on one machine. Small teams that are co-located and close-knit can benefit from using XP.\n\nFeature-driven development (FDD)\n\nFeature-driven development espouses a customer-centric view to software development. By prioritizing user stories, FDD helps teams deliver more features that customers want. Work moves quickly — developers typically build each feature in two weeks. FDD can be useful for companies with a more rigid or hierarchical structure, where lead developers make decisions that impact the rest of the team.\n\nKanban\n\nKanban is a visual method for managing workflows. Teams use a kanban board to quickly see the status of upcoming work. The goal is to reduce lead time by optimizing the flow of work and limiting the amount of work in progress. Kanban is popular with many types of agile development teams, as well as product and project teams.\n\nLarge-scale scrum (LeSS)\n\nLarge-scale scrum defines 10 principles for deploying and maintaining scrum across an entire company. LeSS was created to support organizations with multiple scrum teams. There are two configurations: one for two to eight scrum teams and one for more than eight scrum teams. LeSS co-creators Craig Larman and Bas Vodde co-wrote a book that outlines how teams can adopt the principles.\n\nLean software development (LSD)\n\nLean software development promotes a minimalist approach — eliminating waste, ensuring quality, and delivering quickly. Many growing teams rely on lean practices to help them create more functionality faster.\n\nNexus\n\nThe Nexus framework was created by Ken Schwaber, one of the co-creators of scrum. It is an agile model that is used in tandem with scrum. Nexus adds an integration team composed of a product owner, scrum master, and integration team members. The nexus team is focused on facilitating dependencies and other issues between teams.\n\nRapid application development (RAD)\n\nRapid application development emphasizes speed and flexibility. Developers build prototypes, collect user feedback, and iterate often. RAD is ideal for highly skilled teams that need to develop a product quickly (within a few months) and are able to collaborate with customers during the process.\n\nScaled agile framework (SAFe®)\n\nThe Scaled Agile Framework is a set of principles, guidelines, and prescribed levels for implementing agile and lean principles at scale. SAFe is used by more than 70 of the 100 companies at the top of the Fortune 500 list.\n\nScrum\n\nScrum is the most popular agile development methodology. Teams work in time-boxed sprints of two to four weeks and each person has a clearly delineated role, such as scrum master or product owner. After an initial planning session, teams meet daily and also have retrospectives at the end of each sprint to reflect on how to improve. Scrum is well-suited to small teams that are nimble, cohesive, and willing to pivot often based on stakeholder feedback.\n\nScrumban\n\nScrumban is a hybrid of scrum and kanban. It was initially developed as a way for teams to transition from scrum to kanban or vice versa. But over time it gained traction as a standalone methodology, not just as a stopgap. The scrum part of scrumban gives teams defined guidelines for roles, planning, and how to run sprints effectively. The kanban part of scrumban offers a way to balance work against resources with the pull system — plus visualizations of work in progress.\n\nWhat about DevOps?\n\nIt is also worth mentioning DevOps, an approach to software delivery that grew out of agile philosophy. DevOps emphasizes short development cycles and continuous delivery of high-quality software. The focus is on close working relationships between the development and operations teams. Many principles of DevOps — such as automated testing, short feedback loops, and frequent collaboration — are seen in the agile development methodologies above.\n\nRead next: What is agile transformation?"
    }
}