{
    "id": "dbpedia_1585_0",
    "rank": 50,
    "data": {
        "url": "https://www.techtarget.com/searchcio/definition/Agile-Manifesto",
        "read_more_link": "",
        "language": "en",
        "title": "What Is the Agile Manifesto?",
        "top_image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "meta_img": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "images": [
            "https://cdn.ttgtmedia.com/rms/onlineimages/12_principles_of_agile_development-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineImages/software_quality-agile_software_dev_cycle_mobile.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/ns-agile_projects_to_fail-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/strategy_a101587012_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/books_g1211578623_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/computerweekly/Cliff-Saran-Sep-2022-140x180px.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/3.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/4.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/kN01CK6OU_g?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchcio/definition/Agile-Manifesto&enablejsapi=1&origin=https://www.techtarget.com",
            "https://www.youtube.com/embed/lHmHKh-QVNQ?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchcio/definition/Agile-Manifesto&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Paul Kirvan",
            "Mary K. Pratt",
            "Darcy DeClute",
            "Cliff Saran",
            "Kate Brush"
        ],
        "publish_date": "2023-04-06T00:00:00+00:00",
        "summary": "",
        "meta_description": "The Agile Manifesto outlines the values and principles of the Agile software development methodology. Learn more about it and how it applies today.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "CIO",
        "canonical_link": "https://www.techtarget.com/searchcio/definition/Agile-Manifesto",
        "text": "The Agile Manifesto is a document that identifies four key values and 12 principles that its authors believe software developers should use to guide their work. Formally called the Manifesto for Agile Software Development, it was produced by 17 developers during an outing on Feb. 11-13, 2001, at The Lodge at Snowbird ski resort in Utah.\n\nThe developers called themselves the Agile Alliance. They were seeking an alternative to the existing software development processes that they saw as complicated, unresponsive and too focused on documentation requirements. Among the developers were Kent Beck, Arie van Bennekum, Alistair Cockburn, Andrew Hunt and Jeff Sutherland. Members of the initial alliance were experienced in software development and business entrepreneurship.\n\nAccording to agilemanisfesto.org, the online home of the document, the developers' stated goal was not antimethodology, but rather \"to restore credibility to the word methodology.\"\n\nFurthermore, the developers sought to find a balance between the existing ways of development and the new alternatives. They admitted to accepting modeling and documentation, but only when it had a clear, beneficial use.\n\nThe developers also explained that while planning is important, it's necessary to accept that plans change and flexibility is needed for these modifications. Overall, the manifesto focuses on valuing individuals and interactions over processes and tools.\n\nAgile project management brings together Agile teams of programmers, stakeholders and users to support Agile principles. Team members conduct face-to-face conversations, both in person and remotely, and they communicate regularly as part of the primary measure of progress. This approach supports the key aspect of the Agile process -- developing software in increments with user input along the way, as opposed to a final product with minimal user interaction.\n\nDevelopment of the Agile Manifesto\n\nThe commitment to creating software incrementally, with regular increases and stages, is what defines the Agile approach to software development. The approach offers users new versions, or releases, of software following brief periods of work, often called sprints.\n\nThis Agile process contrasts with the traditional waterfall approach to software development. With that approach, developers compile the needs and requirements of the users and then build the software all at once. The completed project is released at the end of the project cycle. This is similar to the software development lifecycle, which includes evaluating the existing software, planning the new software requirements, designing the proposed software, developing the new software, testing it, putting it into use and monitoring it.\n\nThe Agile Alliance said it was seeking an alternative to the waterfall model's \"documentation-driven, heavyweight software development processes.\"\n\nThe Agile Manifesto's purpose\n\nProponents of Agile methodologies say the four values of the Agile Manifesto promote a software development process that focuses on quality by creating products that meet consumers' needs and expectations.\n\nThe 12 principles are intended to create and support a work environment that's focused on the customer and customer satisfaction, aligns to business objectives, and responds and pivots quickly as user needs and market forces change.\n\n4 values of Agile\n\nThe four core values of Agile software development as stated in the Agile Manifesto are as follows:\n\nIndividuals and interactions over processes and tools.\n\nWorking software over comprehensive documentation.\n\nCustomer collaboration over contract negotiation.\n\nResponding to change over following a project plan.\n\nThe 12 principles\n\nThe Agile Manifesto goes beyond scoping out a software project and then developing and releasing it. Perhaps the most important aspect of the manifesto is the close coordination and regular interactions with those who will be using the new or updated software.\n\nThe following are the 12 principles of the Agile Manifesto:\n\nMeeting end users' needs with early and continuous delivery of work.\n\nBeing open to changes in requirements even late in the project.\n\nDelivering completed work at regular intervals, preferably short ones.\n\nWorking with the project team and business owners daily.\n\nAssembling a motivated team, providing them with the right environment and support, and trusting them.\n\nCommunicating face-to-face regularly.\n\nUsing completed work to measure progress.\n\nCreating processes that promote sustainable efforts and a constant pace of work.\n\nRequiring continuous attention to excellence through good design.\n\nEncouraging simplicity.\n\nRecognizing that the best work emerges from self-organized teams that deliver the best architectures and designs.\n\nReflecting regularly on how the team can be more effective and fine-tuning and adjusting the approach.\n\nAgile vs. Scrum and other methodologies\n\nAgile, as outlined in the Agile Manifesto, is considered a philosophy. Other methodologies and frameworks formalize many or all of the ideas in the manifesto.\n\nOne example is Scrum, a framework for managing and controlling iterative projects. The product owner in a Scrum process works with cross-functional teams to create a list of tasks to be done. This list is known as the product backlog.\n\nOther frameworks and methodologies that draw from the Agile philosophy include Kanban, Crystal, Lean and Extreme Programming.\n\nAgile controversies\n\nAgile has been broadly adopted by software development teams throughout the technology industry, as well as in enterprise IT departments. Moreover, Agile is credited with making the software development process faster, more responsive and better able to meet user, customer and business needs than traditional waterfall methodologies.\n\nHowever, some critics say Agile is overhyped and doesn't work in all situations. The methods, terminology and culture associated with Agile also don't work well within the cultures of some organizations and projects.\n\nSome development teams claim to have an Agile mentality, when in fact, they've simply abandoned some of traditional development approaches without embracing Agile values and principles.\n\nRelevance of Agile today\n\nWith the emergence of many new development tools since the manifesto appeared in 2001, software development is much easier today. More software than ever has been developed and raises the question: Is Agile development still relevant? Tools to create apps can be downloaded on a smartphone, developers exchange ideas using social media and cloud technology is available for all kinds of development activity.\n\nThe personal touch the Agile Manifesto espouses is still relevant, but using communications and flexibility versus a formal plan can present challenges for development teams. This is especially true for teams working on large projects with geographically dispersed employees. Comments via social media can be useful but frustrating. Nonetheless, the value of working closely with users is as important today as it was in 2001.\n\nFind out the difference between being Agile and actually doing the Agile methodology."
    }
}