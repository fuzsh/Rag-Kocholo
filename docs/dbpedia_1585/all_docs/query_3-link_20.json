{
    "id": "dbpedia_1585_3",
    "rank": 20,
    "data": {
        "url": "https://learn.microsoft.com/en-us/devops/plan/what-is-agile-development",
        "read_more_link": "",
        "language": "en",
        "title": "What is Agile Development? - Azure DevOps",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/devops/_img/agile-planning_600x300.png",
            "https://learn.microsoft.com/en-us/devops/_img/continuousintegration_600x300.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-11-28T19:04:00+00:00",
        "summary": "",
        "meta_description": "Learn about Agile development, an iterative approach that shortens development life cycles. Understand backlog refinement, early integration, and technical debt.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/devops/plan/what-is-agile-development",
        "text": "What is Agile development?\n\nAgile development is a term that's used to describe iterative software development. Iterative software development shortens the DevOps life cycle by completing work in short increments, usually called sprints. Sprints are typically one to four weeks long. Agile development is often contrasted with traditional or waterfall development, which plans larger projects up front and completes them according to the plan.\n\nDelivering production quality code every sprint requires the Agile development team to account for an accelerated pace. All coding, testing, and quality verification must be done each and every sprint. Unless a team is properly set up, the results can fall short of expectations. While these disappointments offer great learning opportunities, it's helpful to learn some key lessons before getting started.\n\nThis article lays out a few key success factors for Agile development teams:\n\nDiligent backlog refinement\n\nIntegrating early and often\n\nMinimizing technical debt\n\nDiligent backlog refinement\n\nAn Agile development team works off a backlog of requirements, which are often called user stories. The backlog is prioritized, with the most important user stories at the top. The product owner owns the backlog and adds, changes, and reprioritizes user stories based on the customer's needs.\n\nOne of the biggest drags on an Agile team's productivity is a poorly defined backlog. A team can't be expected to consistently deliver high quality software each sprint unless they have clearly defined requirements.\n\nThe product owner's job is to ensure that every sprint, the engineers have clearly defined user stories to work with. The user stories at the top of the backlog should always be ready for the team to start on. This notion is called backlog refinement. Keeping a backlog ready for an Agile development team requires effort and discipline. Fortunately, it's well worth the investment.\n\nWhen you refine a backlog, remember the following key considerations.\n\nRefining user stories is often a long-lead activity. Elegant user interfaces, beautiful screen designs, and customer-delighting solutions all take time and energy to create. Diligent product owners refine user stories two to three sprints in advance. They account for design iterations and customer reviews. They work to ensure every user story is something the Agile team is proud to deliver to the customer.\n\nA user story isn't refined unless the team says it is. The team needs to review the user story and agree it's ready to work on. If a team doesn't see the user story until day one of a sprint, problems can likely result.\n\nUser stories further down the backlog can remain ambiguous. Don't waste time refining lower-priority items. Focus on the top of the backlog.\n\nIntegrate early and often\n\nContinuous integration and continuous delivery (CI/CD) set up your team for the fast pace of Agile development. As soon as possible, automate the build, test, and deployment pipelines. Set up that automation as one of the first tasks your team tackles when you start a new project.\n\nWith automation, the team avoids slow, error-prone, and time-intensive manual deployment processes. Since teams release every sprint, there isn't time to do these tasks manually.\n\nCI/CD also influences your software architecture. It ensures you deliver buildable and deployable software. When teams implement a difficult-to-deploy feature, they become aware immediately if the build and deployments fail. CI/CD forces a team to fix deployment issues as they occur. The product is then always ready to ship.\n\nThere are some key CI/CD activities that are critically important for effective Agile development.\n\nUnit testing. Unit tests are the first defense against human error. Consider unit tests a part of coding. Check tests in with the code. Make unit testing a part of every build. Failed unit tests mean a failed build.\n\nBuild automation. The build system should automatically pull code and tests directly from source control when builds run.\n\nBranch and build policies. Configure branch and build policies to build automatically as the team checks code in to a specific branch.\n\nDeploy to an environment. Set up a release pipeline that automatically deploys built projects to an environment that mimics production.\n\nMinimize technical debt\n\nWith personal finances, it's easier to stay out of debt than to dig out from under it. The same rule applies with technical debt. Technical debt includes anything that the team must address because of shortcuts that were taken earlier. For instance, if you're on a tight schedule, you might sacrifice quality to meet a deadline. Technical debt is the price you pay later, when you have to refactor code to make up for that lack of quality. Examples include fixes to address poor design, bugs, performance issues, operational issues, accessibility concerns, and other issues.\n\nKeeping on top of technical debt requires courage. There are many pressures to delay reworking code. It feels good to work on features and ignore debt. Unfortunately, somebody must pay off the technical debt sooner or later. Just like financial debt, technical debt becomes harder to pay off the longer it exists. A smart product owner works with their team to ensure there's time to pay off technical debt every sprint. Balancing technical debt reduction with feature development is a difficult task. Fortunately, there are some straightforward techniques for creating productive, customer-focused teams.\n\nAlways be Agile\n\nBeing Agile means learning from experience and continually improving. Agile development provides more learning cycles than traditional project planning due to the tighter process loops. Each sprint provides something new for the team to learn.\n\nFor example:\n\nA team delivers value to the customer, gets feedback, and then modifies their backlog based on that feedback.\n\nThey learn that their automated builds are missing key tests. They include work in their next sprint to address this issue.\n\nThey find that certain features perform poorly in production, so they make plans to improve performance.\n\nSomeone on the team hears of a new practice. The team decides to try it out for a few sprints.\n\nTeams that are just starting with Agile development should expect more learning opportunities. They're an invaluable part of the process because they lead to growth and improvement.\n\nNext steps\n\nThere are many ways to settle on an Agile development process that's right for a team. Azure DevOps provides various process templates. Teams that are looking for different baseline structures to their planning can use these templates as starting points. For information about selecting a process template that best fits a team's culture and goals, see Choose a process flow or process template to work in Azure Boards."
    }
}