{
    "id": "dbpedia_1585_2",
    "rank": 78,
    "data": {
        "url": "https://www.boost.co.nz/blog/2022/05/agile-for-non-software-teams",
        "read_more_link": "",
        "language": "en",
        "title": "Agile for non-software teams: A summary",
        "top_image": "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/05/10152247/agile-for-non-software-teams-700.jpg",
        "meta_img": "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/05/10152247/agile-for-non-software-teams-700.jpg",
        "images": [
            "https://www.boost.co.nz/images/logos/boost/black.svg",
            "https://www.boost.co.nz/images/logos/boost/mark__black.svg",
            "https://www.boost.co.nz/images/icons/shopping-cart__grey.png",
            "https://www.boost.co.nz/images/icons/shopping-cart__grey.png",
            "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/05/10152247/agile-for-non-software-teams-700.jpg",
            "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/05/10122603/agile-for-nonsoftware-teams-at-a-glance.gif",
            "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/05/11115707/satir-change-model-500.jpg",
            "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/04/07103646/agile-assurance-meeting-737x544-1.jpg",
            "https://d2mug8yhikhiqv.cloudfront.net/wp-content/uploads/2022/06/01163332/government-procurement-sean-ruka-737x544-1.jpg",
            "https://www.boost.co.nz/images/icons/social/facebook__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/facebook__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/linkedin__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/linkedin__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/instagram__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/instagram__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/twitter__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/twitter__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/facebook__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/facebook__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/linkedin__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/linkedin__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/instagram__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/instagram__grey-dove.svg",
            "https://www.boost.co.nz/images/icons/social/twitter__grey-tundora.svg",
            "https://www.boost.co.nz/images/icons/social/twitter__grey-dove.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "agile for non-software teams"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Get a summary of Agile for Non-software Teams by Gil Broza, showing you how to tailor your Agile way of working to your team.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.boost.co.nz/blog/2022/05/agile-for-non-software-teams",
        "text": "By Nick Butler\n\nTags: Agile\n\nAgile for Non-software Teams by Gil Broza is a popular guide to the Agile way of working. Unlike most other guides, it’s written for people outside the IT world that gave birth to Agile. This post is an adjunct to the book, not an alternative. It gives you an overview before you dive right in.\n\nAgile for Non-software Teams, Broza says, is “a pathway for considering, designing, starting, growing, and sustaining an Agile way of working.” As the subtitle says, it’s “a practical guide for your journey”. It shows you how you can tailor an Agile way of working to your team and your context.\n\nBuy the book, view a sample chapter and get additional resources\n\nMindset matters most\n\nThe key to Agile for non-software teams is not implementing an Agile framework, but embedding an Agile mindset. It’s best to treat Agile as a philosophy, a set of beliefs, values and principles, not a methodology, process or set of practices.\n\nIt’s about knowing what you want to achieve and intentionally making different choices that will enable this.\n\nThis means you should tackle the change process with an Agile mindset, and based on the Agile values and principles.\n\nThe Agile values, principles and beliefs\n\nThe values and principles that underlie the various Agile frameworks like Scrum, Kanban, XP and Lean were first laid out in the Agile manifesto.\n\nIn Agile for Non-software Teams, Broza restates these so they’re less tightly tied to software development. If you’re reading other guides to Agile, it might help to be familiar with how they’re expressed in the Manifesto as well.\n\nAgile values according to Agile for Non-software Teams\n\nDeliver value early and often\n\nAdaptation\n\nCustomer collaboration\n\nPutting people first\n\nHere’s more detail on these values.\n\nDeliver value early and often\n\nInstead of delivering value to the customer when all the work is complete, deliver portions of value incrementally over time, preferably often.\n\nAdaptation\n\nMake changes easy, cheap and drama-free.\n\nCustomer collaboration\n\nLet the delivery team collaborate with their customers, customer proxies, users, and stakeholders — both internal and external — to determine outcomes and deliverables that move all parties forward.\n\nPutting people first\n\nEnable people to bring their best selves to work in service of the outcomes. Treat customers, staff, and management as you would want to be treated.\n\nBroza contrasts these with non-Agile values common to many organisations, such as:\n\nGetting deliverables right first time.\n\nFollowing industry standards.\n\nDelivering results by a certain timeframe or within a certain budget.\n\nAgile values in the Manifesto\n\nAgile principles according to Agile for Non-software Teams\n\nOrganise people around value creation\n\nCollaborate on a product, service or solution\n\nProduce outcomes of value\n\nAlways work on what’s most important\n\nGet feedback frequently\n\nKeep the cost of change low\n\nConstrain the intake of work\n\nVisualise the work\n\nBreak work down\n\nBounded team autonomy\n\nSelf-organisation\n\nCollaboration\n\nYou can find out more about these principles below.\n\nBroza suggests that you don’t need to follow all the values and principles, but that the full Agile package is more powerful.\n\nAgile principles in the Manifesto\n\nBeliefs\n\nThese principles and values are underpinned by a set of beliefs.\n\nPeople\n\nCompetent, motivated, trusted and supported people will do good work. Teams are stronger than the sum of the individuals.\n\nThe customer\n\nThe customer is what the work is about. You should focus intently on what the customer needs right now, but keep options open for the future.\n\nWork\n\nIf the work is complex or complicated, adaptation is better than detailed upfront planning. Fast feedback drives adaptation. Adaption assumes frequent change, so you need to keep the cost of change low.\n\nThe approach: people-centred change\n\nTreat the process as a collaborative, iterative experiment.\n\nAnswer your team’s concerns\n\nIn Chapter 3, Broza identifies a number of common concerns, and shares possible responses.\n\nFor example:\n\nIsn’t Agile just for IT? How is adopting a way of working that software developers use relevant for us?\n\nIt’s the mindset that matters not the practices and techniques, and the mindset is relevant outside software.\n\nWe are not empowered to make decisions, we always react to others’ requirements.\n\nThat can change especially if you have an influential supporter or show the value of empowerment through little wins.\n\nWhat if it doesn’t work out?\n\nTreat it as an experiment. Make it safe and easy to undo. Don’t change titles, reporting lines and so on.\n\nMake it safe and empowering\n\nChapter 5 of Agile for Non-software Teams looks at how to bring the team along for the ride. They need to be ready, willing and able.\n\nWork collaboratively throughout the process. Start by coming up with a compelling vision for the change you’ll make together. That way you’ll build buy-in along with a shared understanding of what you’re trying to achieve.\n\nTo do this you need:\n\npsychological safety\n\nrespect\n\ntrust\n\ntransparency.\n\nHow teams experience change — the Satir model\n\nBroza introduces Virginia Satir’s model of change.\n\nThe initial status quo is interrupted by a foreign element — the change. This triggers a period of chaos which continues until people take on board a transforming idea, a lightbulb moment. Putting this idea into practice produces ongoing improvement until a new, higher-performing status quo is reached.\n\nBecause you know it’s coming, you can prepare your team, managers and stakeholders for the chaos period.\n\nThe process: an Agile experiment\n\nThis is the change process set out in Agile for Non-software teams:\n\nPick the work you’ll undertake for your first experiment.\n\nPrepare for the experiment.\n\nDesign your initial way of working.\n\nPut your new way of working into practice.\n\nIncrease the effectiveness and scope of your Agile practice.\n\nHere are the details.\n\nPick the work you’ll take on for your first experiment\n\nTo do this you:\n\ninventory all the work you do\n\nnarrow down the list\n\nframe the work\n\ncheck how aligned the results are with the Agile mindset.\n\nInventory all the work you do\n\nAnswer three questions.\n\nWhat products, services, or solutions do you provide?\n\nWhat are your other major responsibilities or activities?\n\nAnd what work goes into 1 and 2?\n\nUnless you’re doing a full Agile transformation, Broza advises that you focus 1 and 2 on areas that have a chance of making it to the first Agile experiment.\n\nAgile is all about delivering value. So, if your work doesn’t deliver value to customers or the business without input from others, try to bring in those other groups. You need a cross-functional team that can turn out finished goods.\n\nNarrow down the list\n\nBroza recommends focusing on those undertakings that need a meaningful chunk of the team’s effort in order to make the experiment real, and to create useful learnings.\n\nBreak your work into these common (overlapping) categories. The examples are for a training team:\n\nDevelopment: e.g. designing a new course\n\nProduction: e.g. printing material for a course\n\nBusiness as usual: e.g. scheduling, filling and teaching a regular course\n\nSupport: e.g. refunding a cancellation\n\nWork with a strong development component is a good candidate for the Agile experiment. It’s simplest if you just focus on one piece of work.\n\nFrame the work\n\nFor this work, answer the following questions:\n\nWho are your customers?\n\nWhom do you serve? Who uses your deliverables? Who pays for them? And who benefits from your work (or loses if you don’t deliver results)? Whose outcomes does your work support?\n\nWhat is the value of the products and deliverables to your customers and the organisation?\n\nHow do they make a difference to the customer groups you’ve identified? Think of the outcomes they enable.\n\nWhat does success look like — for you, your customers, your organisation?\n\nThis makes the previous answer more concrete.\n\nHow are you constrained?\n\nThese constraints will limit and guide your ways of working.\n\nWhich values will maximise the chance of success?\n\nAgile for Non-software Teams offers these other ways of asking this question: As the team works, what should they optimise for? What are the top 3 to 5 values that should guide all choices? What is non-negotiable? And what is critical for success?\n\nDon’t just parrot the company line. Be aspirational.\n\nYou may have to juggle conflicts between values and constraints.\n\nWhat are our beliefs about the work?\n\nWhat are your assumptions about the people, the work, the customers and the business landscape?\n\nYou can elicit beliefs by asking questions like:\n\nWhat are things we take for granted (but maybe shouldn’t)?\n\nWhy do we say we value X?\n\nWhat sort of things do we often say to each other about the work?\n\nWhich issues keep coming up?\n\nWhat kind of changes do we face or get surprised by?\n\nYou can also spot beliefs by listening to your team and management talking about the work. And you can infer them from behaviours.\n\nCheck how aligned the results are with the Agile mindset\n\nCompare the values, constraints and beliefs you’ve identified with the Agile values, principles and beliefs covered earlier.\n\nIf they don’t line up neatly, you may need to go for a hybrid way of working. If they don’t align much at all, Agile is probably not for you.\n\nPrepare for the experiment\n\nChoose a good time to start\n\nYou’ll need people to be available and to have the headspace to engage with the change. So a good time to start is just after a project has finished.\n\nGet your manager and stakeholders on board\n\nThe more involved they are, the better understanding they’ll have. As much as possible, bring them into the collaboration so you can bring them along on the journey too. And they’ll understand the importance of making the process safe to fail.\n\nFor those stakeholders you can’t collaborate with directly, it’s better to over- than under-communicate.\n\nPrepare the team\n\nAgile for Non-software Teams notes some common issues. If you think they might apply to your team, consider how you’ll address them.\n\nMotivation: Those who are doing well in the status quo may be less motivated.\n\nInterest: Pitching Agile as a more enjoyable way of working is probably going to interest people more than talking about processes, methodologies or frameworks.\n\nEmpowerment: If people aren’t currently empowered they may be sceptical this will change.\n\nLanguage: Don’t get stuck on the language of the various frameworks if they don’t resonate with your team.\n\nThe experience of change: People may have heard about the chaos stage, and be wary of going through it themselves.\n\nAssumptions about the right way to proceed: Some people may have preconceived ideas about the framework or process you should follow.\n\nPrepare yourself\n\nTo lead an Agile transformation, you have to lead in an Agile way. The Agile approach to leadership is “empowering and supportive team-level leadership, psychological safety, and true collaboration.” You’ll need to be ready to lead more than manage, to put people first, create a safe environment, help the team develop a compelling vision of the change, be transparent, and be open when you don’t have the answers.\n\nConsider getting outside help. Broza’s process involves making many decisions, and these will be easier with the support of someone who’s been there before.\n\nUnderstand the principles\n\nHere’s what Broza’s Agile principles mean for the journey into Agile for non-software teams.\n\nOrganise people around value creation\n\nIn Agile you want to deliver value early and often, so you organise your team to make this easy. You make sure your team has all the skills needed to give your internal or external customers a valuable product or service.\n\nThis is often a change, as most organisations group people by function, role or speciality. If the people needed to deliver value aren’t part of the same team, you get delays and confusion as work is handed over.\n\nCollaborate on a product, service or solution\n\nRather than delivering one-off projects or deliverables, think of your work as an ongoing collaboration with your customers on a product, service or solution. Work with customers to make sure the solution is just what they need (see Get feedback frequently below).\n\nThis:\n\nlocks the end-users into your processes\n\nmakes the work a transparent partnership not a mistrustful struggle\n\nmotivates the team by letting them see the difference they’re making to the customer\n\nhelps you keep the solution’s lifecycle and the customer’s support needs in mind.\n\nProduce outcomes of value\n\nKeep your focus on outcomes (benefits) not outputs (deliverables).\n\nOutcomes include:\n\naddressing a problem, need or goal of your customers\n\nmitigating a risk\n\nlearning or getting meaningful feedback\n\nletting your organisation grab an opportunity\n\nhelping deliver value later.\n\nAlways work on what’s most important\n\nIdentify the most important or valuable outcome and complete that before you move onto the next most important one.\n\nYou may achieve an outcome through a set of what Broza calls “evolutionary milestones”. Each step is more finished and gets you closer to realising the full value of the work. The stages he suggests for a deliverable are the earliest versions that are:\n\ntestable\n\nusable\n\nlovable.\n\nOnce your solution is delighting customers, you can move onto the next outcome.\n\nGet feedback frequently\n\nThese evolutionary milestones are driven by wanting fast feedback.\n\nYou need to find practical, actionable ways to check that the solution you’re coming up with actually fits the bill. The more uncertain you are about this, the sooner you want to get feedback. This lets you learn fast and change course if the feedback suggests you’re missing the mark.\n\nKeep the cost of change low\n\nGetting fast feedback is a key way to keep the cost of change low. And you’re able to get fast feedback by always aiming for the simplest possible solution.\n\nWhen planning work, consider how hard it would be to change a deliverable.\n\nConstrain the intake of work\n\nThe more work you have on the go, the less you get done. You get delays, quality issues, missed commitments and stress.\n\nTo avoid this you can:\n\nplan and execute in short timeboxes (iterations)\n\nlimit the amount of work you have on the go at any time (work in progress or WIP).\n\nCrucially, you also switch from pushing work on the team, to the team pulling in the work they can complete in the days ahead. This creates a reliable flow, boosting both productivity and predictability.\n\nVisualise the work\n\nVisualise all the work of your current iteration on a visible board (physical or digital). Set up your board to show the different states the work can be in. A simple version might be Ready > In progress > Done.\n\nUpdate the board as each piece of work moves through the states.\n\nThe board:\n\npromotes transparency\n\nhelps you spot omissions and planning mistakes\n\nshows what work would be affected if you reprioritise\n\ngives a sense of control by showing what’s coming up and what’s on the go\n\nshows any bottlenecks.\n\nCreating a Kanban-style project board\n\nBreak work down\n\nBreak each piece of work into the smallest chunk that will deliver value.\n\nThis is key to Agility.\n\nBounded team autonomy\n\nIn Agile, the team decides how it achieves the desired outcomes, but not necessarily the priority of the outcomes themselves. In other words, tactical decisions are made by the people closest to the work. But the team is still bounded by things like organisational culture, policies and strategic choices.\n\nSelf-organisation\n\nThis autonomy includes deciding who does what when, within each iteration. Ideally you do this by consensus.\n\nTo enable this, it helps for people to broaden their skills so they can pick up and complete more types of work.\n\nCollaboration\n\nUnlike solo ownership or passing work from one person to another, collaboration:\n\nsparks fresh ideas\n\nbuilds the social fabric\n\nreduces delays from handoff\n\nincreases the quality of deliverables by getting more people’s input and attention.\n\nYou don’t have to collaborate all day long but you do want a sense of joint ownership of the results.\n\nDesign your initial way of working\n\nHere’s how Agile for Non-software Teams breaks down this phrase:\n\nDesign: Don’t go off the shelf. Consider things like human dynamics, constraints, and culture.\n\nInitial: Expect to evolve and improve. Document your choices but don’t turn them into a standard.\n\nWay of working: To transform how your team works you need to choose the values, principles and strategies before changing your procedures, tools and standards.\n\nThe process below is not linear and may need multiple passes.\n\nDon’t just copy what you’ve seen software teams do.\n\nChoose operating principles\n\nSelect your operating principles from these three sources:\n\nThe Agile principles discussed earlier\n\nAny you wish or need to keep from your current way of working\n\nAny others you think are important\n\nTry and make your set of principles coherent — avoid contradictions like team empowerment and lots of approvals.\n\nDesign the workflow\n\nThe workflow is what people do to get from idea to deliverable.\n\nBroza details 12 steps for designing your workflow. You answer these questions:\n\nWho will manage the list of outcomes, and how?\n\nWho will determine and sequence the deliverables, and how?\n\nHow small can you make work items?\n\nWhat does “Done” mean?\n\nHow will you handle sensitive or confidential work?\n\nWhat should the workflow of a typical item be?\n\nHow will you visualise the work?\n\nHow will you constrain the team’s work intake?\n\nWhich feedback loops should you have for work content?\n\nWhat sort of impediments do you foresee, and what will you do about them?\n\nHow will you get finished deliverables into customers’ hands?\n\nWhich touchpoints will the team have?\n\n1. Who will manage the list of outcomes, and how?\n\nFirst, identify where outcomes come from and when the team first learns about them.\n\nWho will decide the priority of the outcomes? You’re looking for someone who is customer-oriented, available, knowledgeable, confident, a great communicator and truly empowered.\n\nIf you need more than one person to do this, ensure they have a transparent process for making their decisions.\n\nThink too about how often they will revisit the list of outcomes and re-prioritise them. In addition to reprioritising based on feedback, this might include changes that come from your organisation’s planning cycle.\n\n2. Who will determine and sequence the deliverables, and how?\n\nRather than the hierarchy deciding, in Agile you might involve customers, subject matter experts and some or all team members.\n\n3. How small can you make work items?\n\nPeople struggle with this. It takes practice. So consider having a go at some of your existing work.\n\nBroza advises that you avoid making them too small, though analysis by Lean expert Don Reinertsen suggests it’s actually quite hard to go too small.\n\n4. What does “Done” mean?\n\nBroza says that in Agile, finishing is more important than starting. But how do you know you’re finished? You want explicit, transparent criteria. What attributes or qualities should work have to allow the team to move onto the next thing, without having to worry about loose ends?\n\nIn Scrum, this is known as the Definition of Done.\n\n5. How will you handle sensitive or confidential work?\n\nIf your team has such work, plan how you’ll approach it.\n\n6. What should the workflow of a typical piece of work be?\n\nWhat is the sequence of states that work moves through to get from “ready” to “done”?\n\nThe more states, the easier it is to see bottlenecks on your board. But keep it simple.\n\n7. How will you visualise the work?\n\nFor most teams that will be the physical board, described above.\n\n8. How will you constrain the team’s work intake?\n\nAgile for Non-Software Teams says that people are often sceptical about the need to limit WIP. If so, monitor WIP initially, and revisit how you limit it later.\n\n9. Which feedback loops should you have for work content?\n\nHow, when and who will help you validate you’re on the right track. How do you make it safe to get and give feedback? And what will you do with the feedback, including when it invalidates lots of what you’ve done.\n\nThe Scrum review is one way to do this. At the review, you demo the work you’ve completed — and the value you’ve created — this iteration.\n\nApproval is a specific form of feedback. List all your approvals and note which ones delay or demotivate. For these, try replacing approval with:\n\ncollaboration\n\npeer review\n\nearly and frequent feedback from customers\n\nexplicit acceptance criteria detailing what’s needed to satisfy the customer.\n\n10. What sort of impediments do you foresee, and what will you do about them?\n\nBuild the habit of noticing blockers and finding fixes. Talking to people is a good first step to finding a fix.\n\n11. How will you get finished deliverables into customers’ hands?\n\nWhen and in what form will you deliver your solution, and how will customers know it’s ready? How will you know they’ve got it and are benefiting from the results?\n\n12. Which touchpoints will the team have?\n\nWhen will the team get together to plan ahead or to look back in order to identify ways you can improve. Having a cadence or heartbeat can help create good habits.\n\nMany teams have a daily touchpoint or stand-up. This is to plan the day’s work and clear blockers, it’s not a status update for the boss.\n\nAnother useful touchpoint is the retrospective. A regular retro lets you look back at your workflow and teamwork and see where you can do better.\n\nStructure the team\n\nMembership\n\nBroza shares the 10 criteria he uses to assess the likelihood a team will take to Agile:\n\nCommunication\n\nRelationships\n\nEquality\n\nCollaboration\n\nMotivation\n\nLeadership\n\nFinishing\n\nDelays\n\nSystem\n\nChange\n\nHe suggests rating the team as a whole for these criteria, using a scale of 0, 0.5 and 1. If they score below 7, that’s a risk. You could adjust team members, team size and availability to improve the score.\n\nTry to keep the same members throughout the experiment.\n\nRole and responsibilities\n\nList the responsibilities the team needs to work well.\n\nAdd ones you’ve noticed from these 12 steps for designing your initial way of working above, such as:\n\nmanaging intake\n\nproposing solutions\n\nprocessing feedback.\n\nTo this list, add:\n\nlooking after the way of working\n\nlooking after team health\n\nremoving impediments\n\nfacilitating team meetings.\n\nNow decide who will take on these responsibilities. Anyone can do any of them and you can share them.\n\nA standard approach is:\n\nProduct owner: Responsible for managing and prioritising outcomes, clarifying stakeholder requests and giving feedback on deliverables.\n\nTeam leader: Responsible for looking after the way of working, team health, removing impediments, facilitating team meetings. Works as a servant leader or coach.\n\nTeam members: Responsible for the rest.\n\nNote that managers no longer assign tasks or track status: the team does this themselves.\n\nSpace\n\nTry to create a collaborative space. Broza notes that having people push against this setup is a red flag. Talk to people about why they’re reluctant.\n\nPut your new way of working into practice\n\nHere’s how Agile for Non-software Teams suggest you put your plans into action.\n\nStart with a kick-off\n\nMark the start and build a shared understanding with a kick-off meeting.\n\nBroza suggests this agenda:\n\nProvide context.\n\nRestate why you’re moving to a new way of working.\n\nRemind people how the new way was designed\n\nGo over the initial workflow and structure.\n\nRestate that it’s an experiment.\n\nAnswer any questions.\n\nAddress any worries (“What if it doesn’t work”, “What if management don’t like it?”)\n\nGain commitment.\n\nFinish small valuable work together\n\nYou’ll have quite a list of values, beliefs and principles, so you’ll need to remind people of them.\n\nBroza suggests this mantra as a way of distilling them into something memorable:\n\nFinish small valuable work together.\n\nYou can also put the full list up on posters.\n\nMake working agreements\n\nAgree and document how you want to work together. Also known as a team charter, these help make your team culture transparent.\n\nStabilise the system\n\nYou want a good flow of work in your system: a good balance of work in and out. Visualising work helps you spot issues. You can then:\n\nput WIP limits on some or all individual workflow stages\n\nfix chronic waits and blockers\n\nclear temporary congestion in workflow stages\n\ndecide how to handle rush jobs and emergencies (watch out for fake emergencies).\n\nWatch for attitudes and behaviours that hamper agility\n\nBroza describes common issues, including:\n\nreluctance to break down work\n\ngiving work to specialists\n\nteam members handing off work to each other, not collaborating\n\nmanagers overriding planning and prioritisation\n\nmanagers shoulder-tapping team members to do other work.\n\nTo resolve these issues, explain why they stop you delivering value early and often.\n\nReflect and improve frequently\n\nThe book suggests you follow an ORID process in your retrospective meetings. You gather:\n\nObjective data\n\nReflections on or reactions to the data\n\nInsight and interpretations, then make\n\nDecisions based on what you’ve gathered.\n\nLead intentionally\n\nAgile for Non-software Teams lays out 10 ways you can do this:\n\nHave a clear vision of what you’re aiming for.\n\nSupport people through change.\n\nStart and end with outcomes.\n\nDraw and defend clear boundaries.\n\nWatch the work, not the workers.\n\nReduce the load of approvals and reviews.\n\nSet behavioural expectations.\n\nLook to the system, not the people, for explanations for problem behaviours.\n\nNotice how you communicate and act.\n\nSeek allies and support.\n\nAssess how it’s going\n\n1. How well are you following the principles you’ve chosen?\n\nFor each principle, assess how well your tactics implement it.\n\n2. How, and how much, is your team more successful now? What sort of downsides accompany that success?\n\nGauge your success and any costs that come with it. Broza reckons a rough, qualitative assessment is fine.\n\nIncrease the effectiveness and scope of your Agile practice\n\nEffectiveness\n\nWhile Agile for Non-software Teams doesn’t include continuous improvement in its list of Agile principles, it is a fundamental goal.\n\nTo continuously improve your Agile practice, the book recommends you consciously look to:\n\nsimplify\n\neliminate waste\n\ntighten the workflow\n\nmake opportunities for learning\n\nimprove the team space\n\nquestion assumptions.\n\nScope\n\nYou can now apply Agile to more or bigger undertakings. This could include:\n\nthe same team doing more kinds of work\n\ntaking on more of the value stream\n\nmore teams, doing different work\n\nmore teams, doing mutually dependent work.\n\nStarting small\n\nLooking back at this whole process, you might think that Broza is suggesting a bigger chunk of work than is ideal.\n\nIf so, consider following his advice and breaking it down into smaller units of value. What’s the smallest thing you could do to start following the Agile principles and building an Agile mindset?\n\nFor example, you might talk through the Agile values and principles and identify a couple of simple ways you can follow them in your work. Then repeat a few weeks later. This would develop the team’s familiarity with the ideas before you tackle the full-blown transformation.\n\nGood luck and bon voyage on your Agile journey!"
    }
}