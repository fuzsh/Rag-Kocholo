{
    "id": "dbpedia_1585_3",
    "rank": 49,
    "data": {
        "url": "https://www.perforce.com/blog/alm/what-agile-testing-5-examples",
        "read_more_link": "",
        "language": "en",
        "title": "Agile Methodology in Testing — Process, Strategy, and Examples",
        "top_image": "https://www.perforce.com/sites/default/files/styles/social_preview_image/public/image/2018-06/image-social-what-is-agile-testing.jpg?itok=bboRJ1-J",
        "meta_img": "https://www.perforce.com/sites/default/files/styles/social_preview_image/public/image/2018-06/image-social-what-is-agile-testing.jpg?itok=bboRJ1-J",
        "images": [
            "https://www.perforce.com/sites/default/themes/custom/perforce/logo.svg",
            "https://www.perforce.com/sites/default/files/styles/teaser_image/public/image/2024-04/vcs_helix-core_ebook_supercharge-embedded_resource.jpg?itok=doLsK5Bd",
            "https://www.perforce.com/sites/default/files/image/2018-06/image-social-what-is-agile-testing.jpg",
            "https://www.perforce.com/sites/default/files/image/2019-11/image-blog-saftey-critical-does-agile-work.jpg",
            "https://www.perforce.com/sites/default/files/image/2019-08/image-author-gerhard-kruger_1.jpg",
            "https://www.perforce.com/sites/default/themes/custom/perforce/logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Gerhard Krüger",
            "Certified ScrumMaster (CSM)"
        ],
        "publish_date": "2023-03-19T09:05:23-05:00",
        "summary": "",
        "meta_description": "Learn how the Agile methodology in testing transforms the Agile testing process. See examples, benefits, and learn how agile testing supports continuous testing.",
        "meta_lang": "en",
        "meta_favicon": "/sites/default/themes/custom/perforce/images/favicons/favicon.ico",
        "meta_site_name": "Perforce Software",
        "canonical_link": "https://www.perforce.com/blog/alm/what-agile-testing-5-examples",
        "text": "Agile testing is software testing that follows the best practices of the Agile development framework.\n\nAgile development takes an incremental approach to development. Similarly, Agile testing includes an incremental approach to testing. In this type of software testing, features are tested as they are developed.\n\nWhile the Agile methodology is fairly common at this point, many organizations – particularly organizations in regulated industries that require more formal documentation and traceability – still use waterfall or hybrid development frameworks. And some teams are in the process of transitioning to Agile.\n\nRegardless of where you are in your Agile journey, this article will help you better understand the basics of Agile testing and how to easily transition to an Agile testing methodology. And we’ll show you the best way to create and implement an Agile testing strategy.\n\nSEE AGILE TESTING IN ACTION\n\nRead along or skip to the section that interests you most:\n\nIs your organization in a highly regulated industry? Learn how to transition to Agile without losing traceability. Download the white paper: Transitioning to Agile in a Safety-Critical Environment >>\n\nBack to top\n\nWhat is an Agile Testing Methodology?\n\nJust as the Agile development methodology breaks down larger elements of feature development into smaller, more manageable pieces (such as user stories, tasks, and technical requirements), an Agile testing methodology breaks down larger testing elements into smaller, more specific tests with a narrower focus on a specific user story, task, technical requirement, etc.\n\nBy breaking testing down into these “bite-size” blocks, Agile testing allows testing to happen in a more timely and efficient manner.\n\nWant a deep dive on Agile testing? Watch our on-demand webinar on Test Management in an Agile Reality >>\n\nBack to top\n\nAgile Testing Supports Continuous Testing\n\nThe Agile testing methodology supports DevOps and continuous testing. And continuous testing is important to improving product quality.\n\nIn Agile development, testing needs to happen early and often. So, instead of waiting for development to be finished before testing begins, testing happens continuously as features are added. This is also referred to as \"shift left\" testing.\n\nTests are prioritized just like user stories. Testers aim to get through as many tests as they can in an iteration. Adding automated testing tools can help testers get through more of the testing backlog.\n\nHow does Agile testing and continuous testing help improve product quality? For starters, by testing earlier in the development process, issues and bugs can be discovered sooner. So you don’t end up with costly last-minute surprises that can delay your time to market. And it’s easier to fix bugs when they’re still fresh in the developers’ minds.\n\nContinuous testing can also improve test coverage, and better test coverage results in better product quality and product safety.\n\nLearn about using tools to find code vulnerabilities, ensure standards compliance, and reduce time-to-market early in the development process with Perforce's Shift Left 101 >>\n\nBack to top\n\nWhat Does an Agile Tester Do?\n\nTesting and QA is everyone’s responsibility in Agile. So testers and developers working in an Agile environment need to work closely together. Communication and collaboration are key.\n\nAgile development is often driven by tests. Developers use Agile testing methods like test-driven development (TDD) to write the test first. Then they write the code that will be verified by the test. And developers and Agile testers should collaborate before user stories (e.g., requirements) are set.\n\nOnce development and testing are underway, close communication and collaboration remain important. Agile testers should be testing as developers write code. Plus, developers will probably do some testing. And Agile testers will probably do some coding.\n\nUnderstanding the Definition of Done\n\nIn Agile development, the definition of done is a shared, standardized understanding among the team that a particular user story has been completed. The acceptance criteria in a user story are what will help drive the definition of done. If the user story passes the acceptance criteria, it can be considered done. This includes testing or validating the acceptance criteria. So, a test verifies that you’ve completed the user story.\n\nIt’s important that both Agile testers and developers know what has been tested and what defects still need to be resolved. Jump to the \"How to Manage Agile Testing\" section below to learn how to ensure visibility and alignment around testing and the definition of done.\n\nAgile Development Methodologies for Testers\n\nLearn how to transition to Agile testing.\n\nGET THE PAPER\n\nBack to top\n\nAgile Testing Methodology: 5 Examples\n\nTests come first in Agile development. When you create a user story, you need to define the acceptance criteria. This drives testing and validation of the user stories.\n\nIt doesn’t matter which Agile test methodology you use — Scrum, XP, Kanban, or even hybrid Agile. The following testing methods are typically used in Agile testing.\n\nTest-Driven Development (TDD)\n\nTest-driven development (TDD) starts with tests. This type of development begins by discussing what you want to test and then creating a user story. So, you start by writing a unit test. Then you write the user story. Finally, you write the code until the unit test passes.\n\nTest-driven development is typically used on unit and component tests — which can be done with automated testing tools. TDD makes sure the features are working as they should be.\n\nAcceptance Test-Driven Development (ATDD)\n\nAcceptance test-driven development (ATDD) is similar to test-driven development. But acceptance test-driven development starts with customer input on functionality. This type of development begins by discussing how the product will be used. So, you write a user acceptance test (UAT). And then you write the code until it passes the test.\n\nAcceptance test-driven development is typically used for acceptance tests. It verifies that the product functions as users would expect.\n\nBehavior-Driven Development (BDD)\n\nBehavior-driven development (BDD) often stems from test-driven development and acceptance test-driven development. In behavior-driven development, the purpose of development needs to be tied to a business outcome. So you’ll have a user story — but the user story needs to answer why, in business terms, this feature is being developed. And in BDD, tests are included in user stories as scenarios or specifications.\n\nBehavior-driven development is also used for acceptance tests. It verifies that the product functions are necessary for the desired business outcome.\n\nExploratory Testing\n\nExploratory testing is a style of testing that lets testers follow their intuition, rather than a predefined path. It’s typically manual. Testers record what they’re doing and save it as a test. They then figure out what exactly it is that they’re testing as they go.\n\nExploratory testing is typically used to find hidden risks within a product. These would be bugs that are missed in functional tests done in test-driven development.\n\nSession-Based Testing\n\nSession-based testing has some similarities to exploratory testing. But there’s a little more structure in session-based testing. Instead of testers figuring out what they’re testing as you go, they start with a mission in mind.\n\nSession-based testing is also used to find hidden bugs within a project.\n\nLearn how to reduce risk with exploratory testing. Get the white paper >>\n\nBack to top\n\nAgile Testing Strategy\n\nTesting in traditional development typically includes a test plan. But a well-documented test plan is not common in Agile development. Instead, Agile testers need to be flexible and ready to respond to shifts in requirements.\n\nSo there needs to be an Agile test strategy, rather than an Agile test plan.\n\nThere are many ways to outline your Agile test strategy. You may simply outline the strategy in a document. You might create a test matrix. Or, you might use a Kanban board.\n\nNo matter which Agile testing methodology you use, your strategy should include:\n\nPurpose (defined by the user story).\n\nObjectives (test cases).\n\nScope (what needs to be tested).\n\nMethods (how tests will be run).\n\nCreating an Agile test strategy can be tricky. But it's easy when you’re using the right testing tools, such as Helix ALM.\n\nHere’s how you create an Agile test strategy in Helix ALM:\n\nStart with a purpose.\n\nDecide what you want to test.\n\nWrite a user story, including acceptance criteria (your definition of done).\n\nCreate a test case from that user story. This happens automatically in Helix ALM.\n\nGenerate a test run to validate the user story.\n\nWant to see Helix ALM in action? Watch this free 20-minute demo >>\n\nBack to top\n\nBenefits of Agile Testing\n\nAgile testing improves product quality and enables development teams to release software on shorter cycles. And effective test case management helps Agile testers.\n\nYou’ll find and fix errors faster. So you’ll lower the risk of finding a bug at the very end of testing — and missing a release deadline.\n\nYou’ll make customers happy by delivering reliable products and regular, stable releases. And you'll be able to better manage the scope of each release. That helps you prioritize features for each iteration and deliver the most important ones first. All of which will improve customer satisfaction and retention rates.\n\nBack to top\n\nHow to Manage Agile Testing\n\nAs mentioned above, the definition of done is a key element of Agile testing. It’s critical for everyone on your team - Agile testers, developers, project managers and other stakeholders - know the current status of what is complete and what issues or defects still need to be resolved. The best way to achieve this essential visibility and alignment is to use a dedicated test case management tool like Helix ALM.\n\nWith Helix ALM, you can easily create, execute, and track all types of tests in a single tool, for single pane of glass visibility across your entire Agile testing strategy. So everyone on your team will always know how much testing is complete and how much remains. And you can easily report your current test status to stakeholders at any time.\n\nBack to top\n\nTransition to Agile Testing\n\nHelix ALM makes the transition to Agile testing easier. And you can try it out for free. Take advantage of our 30 day trial to see how Helix ALM’s Test Case Management module can help you reap the benefits of Agile testing and achieve a holistic Agile testing strategy.\n\nTry Agile Testing free\n\nEditors Note: This blog first appeared on June 5, 2018. It has been substantially updated with additional content as of March 19, 2023.\n\nMore on Transitioning to Agile and Agile Testing\n\nAgile Requirements and Traceability Basics\n\nTesting in Agile Environments\n\nRequirements Gathering Template: Comparing Agile vs. Waterfall Techniques\n\nWhat is Regression Testing?\n\nAutomated Regression Testing\n\nAutomated Testing vs. Manual Testing vs. Continuous Testing\n\nBack to top"
    }
}