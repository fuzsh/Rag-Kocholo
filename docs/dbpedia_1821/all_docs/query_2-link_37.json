{
    "id": "dbpedia_1821_2",
    "rank": 37,
    "data": {
        "url": "https://nesdoug.com/author/dougfraker/page/2/",
        "read_more_link": "",
        "language": "en",
        "title": "dougfraker",
        "top_image": "https://secure.gravatar.com/avatar/65adcb5284eefaca99abb4f16ebbed5c?s=200&d=identicon&r=g",
        "meta_img": "https://secure.gravatar.com/avatar/65adcb5284eefaca99abb4f16ebbed5c?s=200&d=identicon&r=g",
        "images": [
            "https://nesdoug.com/wp-content/uploads/2021/01/lenna1.png?w=571",
            "https://nesdoug.com/wp-content/uploads/2021/01/lena2.png?w=256",
            "https://nesdoug.com/wp-content/uploads/2021/01/lena1.png?w=256",
            "https://nesdoug.com/wp-content/uploads/2021/01/flowers4.png?w=571",
            "https://nesdoug.com/wp-content/uploads/2021/01/flowers5.png?w=571",
            "https://nesdoug.com/wp-content/uploads/2021/01/flowers6.png?w=256",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_000.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_006.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_001.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_002.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_003.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_004.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snes_12_005.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/super-mario-world-usa_006.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/contra-iii-the-alien-wars-usa_000.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/metroid1.png?w=300",
            "https://nesdoug.com/wp-content/uploads/2020/06/super-mario-world-usa_008.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/legend-of-zelda-the-a-link-to-the-past-usa_000.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/legend-of-zelda-the-a-link-to-the-past-usa_001.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/sparkster-usa_000.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/mortal-kombat-ii-usa_000.png",
            "https://nesdoug.com/wp-content/uploads/2020/04/batman.jpg?w=300",
            "https://nesdoug.com/wp-content/uploads/2020/06/super-mario-world-usa_000.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/super-mario-world-usa_003.png",
            "https://nesdoug.com/wp-content/uploads/2020/04/fzero.gif",
            "https://nesdoug.com/wp-content/uploads/2020/06/no_effect.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/effect1.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/effect2.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/effect3.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/effect4.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/effect5.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snesgss3.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snesgss4.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snesgss.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/snesgss2.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/example09.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/blocks.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/tiled.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/csv.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/byte.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/example09.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/example09b.png",
            "https://nesdoug.com/wp-content/uploads/2020/06/example08.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/grad.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/bg1-1.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/bg3-1.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/priority.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/spez7.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/example7.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/example6b.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/example6d.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/example6f.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/example6c.png",
            "https://nesdoug.com/wp-content/uploads/2020/05/example6e.png",
            "https://1.gravatar.com/avatar/a050a61927ff4349dac6d7ae87014feae50cc60dbfe2213a5715ce18dfcc4610?s=48&d=identicon&r=G",
            "https://0.gravatar.com/avatar/61b45c83fd4103e50a514d5700b13f2cce1734b92e7dea353a9edd2491aff26b?s=48&d=identicon&r=G",
            "https://1.gravatar.com/avatar/a050a61927ff4349dac6d7ae87014feae50cc60dbfe2213a5715ce18dfcc4610?s=48&d=identicon&r=G",
            "https://2.gravatar.com/avatar/2aa40b940a69553c9f34f501446b9dd8a96b2ce4aa0ae57a06628041e4f4f516?s=48&d=identicon&r=G",
            "https://0.gravatar.com/avatar/61b45c83fd4103e50a514d5700b13f2cce1734b92e7dea353a9edd2491aff26b?s=48&d=identicon&r=G",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [
            "https://www.youtube.com/embed/n5eTOGZdnTU?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-01-07T14:23:52+00:00",
        "summary": "",
        "meta_description": "Read all of the posts by dougfraker on nesdoug",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "nesdoug",
        "canonical_link": "http://nesdoug.wordpress.com",
        "text": "I am frequently looking this stuff up, so I decided to just post the lists here. Sources BootGod and Wikipedia.\n\nUS NES games\n\n(minus the prototypes and duplicates)\n\n10-Yard Fight\n\n1942\n\n1943: The Battle of Midway\n\n3-D Battles of Worldrunner, The\n\n6 in 1\n\n720°\n\n8 Eyes\n\nAbadox: The Deadly Inner War\n\nAction 52\n\nAddams Family, The\n\nAddams Family, The: Pugsley’s Scavenger Hunt\n\nAdventure Island\n\nAdventure Island II\n\nAdventure Island III\n\nAdventures in the Magic Kingdom, Disney’s\n\nAdventures of Bayou Billy, The\n\nAdventures of Dino Riki\n\nAdventures of Gilligan’s Island, The\n\nAdventures of Lolo\n\nAdventures of Lolo 2\n\nAdventures of Lolo 3\n\nAdventures of Rad Gravity, The\n\nAdventures of Rocky and Bullwinkle and Friends, The\n\nAdventures of Tom Sawyer\n\nAfter Burner\n\nAir Fortress\n\nAirwolf\n\nAl Unser Jr. Turbo Racing\n\nAlfred Chicken\n\nAlien Syndrome\n\nAlien³\n\nAll-Pro Basketball\n\nAlpha Mission\n\nAmagon\n\nAmerican Gladiators\n\nAnticipation\n\nArch Rivals: A Basketbrawl!\n\nArchon\n\nArkanoid\n\nArkista’s Ring\n\nAstyanax\n\nAthena\n\nAthletic World\n\nAttack of the Killer Tomatoes\n\nBaby Boomer\n\nBack to the Future\n\nBack to the Future II & III\n\nBad Dudes\n\nBad News Baseball\n\nBad Street Brawler\n\nBalloon Fight\n\nBandai Golf: Challenge Pebble Beach\n\nBandit Kings of Ancient China\n\nBarbie (RevA)\n\nBard’s Tale, The: Tales of the Unknown\n\nBarker Bill’s Trick Shooting\n\nBase Wars: Cyber Stadium Series\n\nBaseball\n\nBaseball Simulator 1.000\n\nBaseball Stars\n\nBaseball Stars II\n\nBases Loaded (RevA)\n\nBases Loaded 3, Ryne Sandberg Plays\n\nBases Loaded 4\n\nBases Loaded II: Second Season\n\nBatman\n\nBatman Returns\n\nBatman: Return of the Joker\n\nBattle Chess\n\nBattle of Olympus, The\n\nBattle Tank, Garry Kitchen’s\n\nBattleship\n\nBattletoads\n\nBattletoads & Double Dragon: The Ultimate Team\n\nBee 52\n\nBeetlejuice\n\nBest of the Best: Championship Karate\n\nBible Adventures (Ver1.4)\n\nBible Buffet (Ver6.0)\n\nBig Nose Freaks Out\n\nBig Nose the Caveman\n\nBigfoot\n\nBill & Ted’s Excellent Video Game Adventure\n\nBill Elliott’s NASCAR Challenge\n\nBionic Commando\n\nBlack Bass, The\n\nBlackjack\n\nBlades of Steel\n\nBlaster Master\n\nBlue Marlin, The\n\nBlues Brothers, The\n\nBo Jackson Baseball\n\nBomberman\n\nBomberman II\n\nBonk’s Adventure\n\nBoulder Dash\n\nBoy and His Blob, A: Trouble on Blobolonia, David Crane’s\n\nBram Stoker’s Dracula\n\nBreak Time: The National Pool Tour\n\nBreakThru\n\nBubble Bath Babes\n\nBubble Bobble\n\nBubble Bobble: Part 2\n\nBucky O’Hare\n\nBugs Bunny Birthday Blowout, The\n\nBugs Bunny Crazy Castle, The\n\nBump ‘n’ Jump\n\nBurai Fighter\n\nBurgerTime\n\nCabal\n\nCaesars Palace\n\nCalifornia Games\n\nCapcom’s Gold Medal Challenge ’92\n\nCaptain America and the Avengers\n\nCaptain Comic: The Adventure\n\nCaptain Planet and the Planeteers\n\nCaptain SkyHawk\n\nCasino Kid\n\nCasino Kid II\n\nCastelian\n\nCastle of Deceit\n\nCastle of Dragon\n\nCastlequest\n\nCastlevania\n\nCastlevania II: Simon’s Quest\n\nCastlevania III: Dracula’s Curse\n\nCaveman Games\n\nChallenge of the Dragon\n\nChampionship Bowling\n\nChampionship Pool\n\nChessmaster, The\n\nChiller (CHR-CB55)\n\nChip ‘n Dale Rescue Rangers 2, Disney’s\n\nChip ‘n Dale Rescue Rangers, Disney’s\n\nChubby Cherub\n\nCircus Caper\n\nCity Connection\n\nClash At Demonhead\n\nClassic Concentration\n\nCliffhanger\n\nClu Clu Land\n\nCobra Command\n\nCobra Triangle\n\nCode Name: Viper\n\nColor A Dinosaur\n\nCommando\n\nConan\n\nConflict\n\nConquest of the Crystal Palace\n\nContra\n\nContra Force\n\nCool World\n\nCowboy Kid\n\nCrash ‘n The Boys: Street Challenge\n\nCrystal Mines\n\nCrystalis\n\nCyberball\n\nCybernoid: The Fighting Machine\n\nDance Aerobics\n\nDarkman\n\nDarkwing Duck, Disney’s\n\nDash Galaxy in the Alien Asylum\n\nDay Dreamin’ Davey\n\nDays of Thunder\n\nDeadly Towers\n\nDeath Race\n\nDeathbots\n\nDefender II\n\nDefender of the Crown\n\nDefenders of Dynatron City\n\nDéjà Vu\n\nDemon Sword\n\nDesert Commander\n\nDestination Earthstar\n\nDestiny of an Emperor\n\nDick Tracy\n\nDie Hard\n\nDig Dug II: Trouble in Paradise\n\nDigger T. Rock: The Legend of the Lost City\n\nDirty Harry\n\nDizzy The Adventurer\n\nDonkey Kong (RevA)\n\nDonkey Kong 3\n\nDonkey Kong Classics\n\nDonkey Kong Jr. (RevA)\n\nDonkey Kong Jr. Math\n\nDouble Dare\n\nDouble Dragon\n\nDouble Dragon II: The Revenge (RevA)\n\nDouble Dragon III: The Sacred Stones\n\nDouble Dribble (RevA)\n\nDouble Strike (Ver1.1)\n\nDr. Chaos\n\nDr. Jekyll and Mr. Hyde\n\nDr. Mario\n\nDragon Fighter\n\nDragon Power\n\nDragon Spirit: The New Legend\n\nDragon Warrior (RevA)\n\nDragon Warrior II\n\nDragon Warrior III (Rev0B)\n\nDragon Warrior IV\n\nDragon’s Lair\n\nDragonStrike, Advanced Dungeons & Dragons\n\nDuck Hunt\n\nDuckTales 2, Disney’s\n\nDuckTales, Disney’s\n\nDudes with Attitude\n\nDungeon Magic: Sword of the Elements\n\nDusty Diamond’s All-Star Softball\n\nDynowarz: The Destruction of Spondylus\n\nElevator Action\n\nEliminator Boat Duel\n\nExcitebike\n\nExodus: Journey to the Promised Land (Ver4.0)\n\nF-117a Stealth Fighter\n\nF-15 City War (Ver1.1)\n\nF-15 Strike Eagle\n\nFamily Feud, The All New\n\nFantastic Adventures of Dizzy, The\n\nFantasy Zone\n\nFaria\n\nFaxanadu (RevA)\n\nFelix the Cat\n\nFerrari Grand Prix Challenge\n\nFester’s Quest\n\nFinal Fantasy\n\nFire Hawk\n\nFire’n Ice\n\nFisher-Price: Firehouse Rescue\n\nFisher-Price: I Can Remember\n\nFisher-Price: Perfect Fit\n\nFist of the North Star\n\nFlight of the Intruder\n\nFlintstones, The: The Rescue of Dino & Hoppy\n\nFlintstones, The: The Surprise at Dinosaur Peak!\n\nFlying Dragon: The Secret Scroll\n\nFlying Warriors\n\nFormula One: Built to Win\n\nFox’s Peter Pan & The Pirates: The Revenge of Captain Hook\n\nFrankenstein: The Monster Returns\n\nFreedom Force\n\nFriday the 13th\n\nFun House\n\nG.I. Joe\n\nG.I. Joe: The Atlantis Factor\n\nGalactic Crusader\n\nGalaga: Demons of Death\n\nGalaxy 5000: Racing in the 51st Century\n\nGame Genie (Rev1.5A)\n\nGargoyle’s Quest II\n\nGauntlet\n\nGauntlet II\n\nGemfire\n\nGenghis Khan\n\nGeorge Foreman’s KO Boxing\n\nGhostbusters\n\nGhostbusters II\n\nGhosts ‘n Goblins\n\nGhoul School\n\nGoal!\n\nGoal! Two\n\nGodzilla 2: War of the Monsters\n\nGodzilla: Monster of Monsters!\n\nGolf\n\nGolf Grand Slam\n\nGolgo 13: The Mafat Conspiracy\n\nGolgo 13: Top Secret Episode\n\nGoonies II, The\n\nGotcha! The Sport!\n\nGradius\n\nGreat Waldo Search, The\n\nGreg Norman’s Golf Power\n\nGremlins 2: The New Batch\n\nGuardian Legend, The\n\nGuerrilla War\n\nGumshoe\n\nGun Nac\n\nGun.Smoke\n\nGyromite\n\nGyruss\n\nHarlem Globetrotters\n\nHatris\n\nHeavy Barrel\n\nHeavy Shreddin’\n\nHeroes of the Lance, Advanced Dungeons & Dragons\n\nHigh Speed\n\nHillsfar, Advanced Dungeons & Dragons\n\nHogan’s Alley\n\nHollywood Squares\n\nHome Alone (RevA)\n\nHome Alone 2: Lost in New York\n\nHook\n\nHoops\n\nHudson Hawk\n\nHunt for Red October, The (RevA)\n\nHydlide\n\nIce Climber\n\nIce Hockey\n\nIkari Warriors\n\nIkari Warriors II: Victory Road\n\nIkari Warriors III: The Rescue\n\nImage Fight\n\nImmortal, Will Harvey Presents The\n\nImpossible Mission-II\n\nIncredible Crash Dummies, The\n\nIndiana Jones and The Last Crusade (Taito)\n\nIndiana Jones and The Last Crusade (UBI Soft)\n\nIndiana Jones and the Temple of Doom (Mindscape)\n\nIndiana Jones and the Temple of Doom (Tengen)\n\nIndy Heat, Danny Sullivan’s\n\nInfiltrator\n\nIron Tank: The Invasion of Normandy\n\nIronSword: Wizards & Warriors II\n\nIsolated Warrior\n\nJack Nicklaus’ Greatest 18 Holes of Major Championship Golf\n\nJackal\n\nJackie Chan’s Action Kung Fu\n\nJames Bond Jr.\n\nJaws\n\nJeopardy! (RevA)\n\nJeopardy!: 25th Anniversary Edition\n\nJeopardy!: Junior Edition\n\nJetsons, The: Cogswell’s Caper\n\nJimmy Connors Tennis\n\nJoe & Mac\n\nJohn Elway’s Quarterback\n\nJordan vs. Bird: One on One\n\nJoshua & the Battle of Jericho (Ver6.0)\n\nJourney to Silius\n\nJoust\n\nJungle Book, Disney’s The\n\nJurassic Park\n\nKabuki: Quantum Fighter\n\nKarate Champ (RevA)\n\nKarate Kid, The\n\nKarnov\n\nKick Master\n\nKickle Cubicle\n\nKid Icarus\n\nKid Klown in Night Mayor World\n\nKid Kool and the Quest for the Seven Wonder Herbs\n\nKid Niki: Radical Ninja (RevA)\n\nKing Neptune’s Adventure\n\nKing of Kings, The: The Early Years (Ver1.2)\n\nKing’s Knight\n\nKing’s Quest V\n\nKings of the Beach\n\nKirby’s Adventure (RevA)\n\nKiwi Kraze: A Bird-Brained Adventure!\n\nKlashBall\n\nKlax\n\nKnight Rider\n\nKrazy Kreatures (Ver1.1)\n\nKrion Conquest, The\n\nKrusty’s Fun House\n\nKung Fu\n\nKung-Fu Heroes\n\nL’Empereur\n\nLaser Invasion\n\nLast Action Hero\n\nLast Ninja, The\n\nLast Starfighter, The\n\nLee Trevino’s Fighting Golf\n\nLegacy of the Wizard\n\nLegend of Kage, The\n\nLegend of the Ghost Lion\n\nLegend of Zelda, The (RevA)\n\nLegendary Wings\n\nLegends of the Diamond: The Baseball Championship Game\n\nLemmings\n\nLethal Weapon\n\nLife Force (Rev0A)\n\nLinus Spacehead’s Cosmic Crusade\n\nLittle League Baseball Championship Series\n\nLittle Mermaid, Disney’s The\n\nLittle Nemo: The Dream Master\n\nLittle Ninja Brothers\n\nLittle Samson\n\nLode Runner\n\nLone Ranger, The\n\nLoopz\n\nLow G Man: The Low Gravity Man\n\nLunar Pool\n\nM.C. Kids\n\nM.U.L.E.\n\nM.U.S.C.L.E.: Tag Team Match\n\nMach Rider\n\nMad Max\n\nMagic Darts\n\nMagic Johnson’s Fast Break\n\nMagic of Scheherazade, The\n\nMagician\n\nMagmax\n\nMajor League Baseball (RevA)\n\nManiac Mansion\n\nMappy-Land\n\nMarble Madness\n\nMario Bros.\n\nMario Is Missing!\n\nMario’s Time Machine\n\nMaster Chu and the Drunkard Hu\n\nMaxi 15\n\nMechanized Attack\n\nMega Man\n\nMega Man 2\n\nMega Man 3\n\nMega Man 4 (RevA)\n\nMega Man 5\n\nMega Man 6\n\nMenace Beach\n\nMendel Palace\n\nMermaids of Atlantis: The Riddle of the Magic Bubble\n\nMetal Fighter\n\nMetal Gear\n\nMetal Mech: Man & Machine\n\nMetal Storm\n\nMetroid\n\nMichael Andretti’s World GP\n\nMickey Mousecapade\n\nMickey’s Adventure in Numberland\n\nMickey’s Safari in Letterland\n\nMicro Machines\n\nMIG-29 Soviet Fighter\n\nMight and Magic: Secret of the Inner Sanctum\n\nMighty Bomb Jack\n\nMighty Final Fight\n\nMike Tyson’s Punch-Out!! (RevA)\n\nMillipede\n\nMilon’s Secret Castle\n\nMiracle Piano Teaching System, The\n\nMission Cobra\n\nMission: Impossible\n\nMonopoly\n\nMonster In My Pocket\n\nMonster Party\n\nMonster Truck Rally\n\nMoon Ranger\n\nMotor City Patrol\n\nMs. Pac-Man (Namco)\n\nMs. Pac-Man (Tengen)\n\nMTV’s Remote Control\n\nMuppet Adventure: Chaos at the Carnival\n\nMutant Virus, The: Crisis in a Computer World\n\nMystery Quest\n\nNARC\n\nNES Open Tournament Golf\n\nNES Play Action Football\n\nNFL\n\nNigel Mansell’s World Championship Racing\n\nNightmare on Elm Street, A\n\nNightshade\n\nNinja Crusaders\n\nNinja Gaiden\n\nNinja Gaiden II: The Dark Sword of Chaos\n\nNinja Gaiden III: The Ancient Ship of Doom\n\nNinja Kid\n\nNintendo World Championships 1990\n\nNintendo World Cup\n\nNobunaga’s Ambition\n\nNobunaga’s Ambition II\n\nNorth & South\n\nNTF2 System Cartridge\n\nOperation Secret Storm\n\nOperation Wolf: Take no Prisoners (Rev0A)\n\nOrb 3-D\n\nOthello\n\nOverlord\n\nP’radikus Conflict\n\nP.O.W.: Prisoners of War\n\nPac-Man (Tengen)\n\nPac-Man (Namco)\n\nPac-Mania\n\nPalamedes\n\nPanic Restaurant\n\nPaperboy\n\nPaperboy 2\n\nPesterminator\n\nPhantom Fighter\n\nPictionary\n\nPin-Bot\n\nPinball\n\nPinball Quest\n\nPipe Dream\n\nPirates!\n\nPlatoon (RevA)\n\nPool of Radiance, Advanced Dungeons & Dragons\n\nPopeye (RevA)\n\nPower Blade\n\nPower Blade 2\n\nPower Punch II\n\nPredator\n\nPrince of Persia\n\nPrincess Tomato in the Salad Kingdom\n\nPro Sport Hockey\n\nPro Wrestling (RevA)\n\nPunch-Out!!\n\nPunisher, The\n\nPuss ‘n Boots: Pero’s Great Adventure\n\nPuzzle\n\nPuzznic\n\nPyramid\n\nQ*bert\n\nQix\n\nQuattro Adventure\n\nQuattro Arcade\n\nQuattro Sports\n\nR.B.I. Baseball\n\nR.B.I. Baseball 2\n\nR.B.I. Baseball 3\n\nR.C. Pro-Am (RevA)\n\nR.C. Pro-Am II\n\nRace America, Alex DeMeo’s\n\nRacerMate Challenge II (9.03.128)\n\nRacket Attack\n\nRad Racer\n\nRad Racer II\n\nRad Racket: Deluxe Tennis II\n\nRaid 2020\n\nRaid on Bungeling Bay\n\nRainbow Islands\n\nRally Bike\n\nRambo\n\nRampage\n\nRampart\n\nRen & Stimpy Show, The: Buckeroo$!\n\nRenegade\n\nRescue: The Embassy Mission\n\nRing King\n\nRiver City Ransom\n\nRoad Runner\n\nRoadBlasters\n\nRobin Hood: Prince of Thieves\n\nRobo Warrior\n\nRoboCop\n\nRoboCop 2 (RevA)\n\nRoboCop 3\n\nRobodemons\n\nRock’n’ Ball\n\nRocket Ranger\n\nRocketeer, The\n\nRockin’ Kats\n\nRoger Clemens’ MVP Baseball\n\nRollerball\n\nRollerblade Racer\n\nRollergames\n\nRolling Thunder\n\nRomance of the Three Kingdoms\n\nRomance of the Three Kingdoms II\n\nRoundball: 2-on-2 Challenge\n\nRush’n Attack\n\nRygar (RevA)\n\nS.C.A.T.: Special Cybernetic Attack Team\n\nSecret Scout in the Temple of Demise\n\nSection Z\n\nSeicross\n\nSesame Street 123\n\nSesame Street ABC\n\nSesame Street ABC & 123\n\nSesame Street Countdown\n\nSesame Street: Big Bird’s Hide and Speak\n\nShadow of the Ninja\n\nShadowgate\n\nShatterhand\n\nShingen The Ruler\n\nShinobi\n\nShockwave\n\nShooting Range\n\nShort Order / Eggsplode!\n\nSide Pocket\n\nSilent Assault\n\nSilent Service (RevA)\n\nSilkworm\n\nSilver Surfer\n\nSimpsons, The: Bart vs. The Space Mutants\n\nSimpsons, The: Bart vs. The World\n\nSimpsons, The: Bartman Meets Radioactive Man\n\nSkate or Die 2: The Search for Double Trouble\n\nSkate or Die!\n\nSki or Die\n\nSkull & Crossbones\n\nSky Kid\n\nSky Shark (Rev0A)\n\nSlalom\n\nSmash T.V.\n\nSnake Rattle ‘n Roll\n\nSnake’s Revenge\n\nSnoopy’s Silly Sports Spectacular!\n\nSnow Brothers\n\nSoccer\n\nSolar Jetman: Hunt for the Golden Warpship\n\nSolitaire (Ver1.1)\n\nSolomon’s Key\n\nSolstice: The Quest for the Staff of Demnos\n\nSpace Shuttle Project\n\nSpelunker\n\nSpider-Man: Return of the Sinister Six\n\nSpiritual Warfare (Ver6.1)\n\nSpot\n\nSpy Hunter\n\nSpy vs. Spy\n\nSqoon\n\nStack-Up\n\nStadium Events\n\nStanley: The Search for Dr. Livingston\n\nStar Force\n\nStar Soldier\n\nStar Trek: 25th Anniversary\n\nStar Trek: The Next Generation\n\nStar Voyager\n\nStar Wars\n\nStar Wars: The Empire Strikes Back\n\nStarship Hector\n\nStarTropics\n\nStealth ATF\n\nStinger\n\nStreet Cop\n\nStreet Fighter 2010: The Final Fight\n\nStrider\n\nStunt Kids\n\nSunday Funday: The Ride\n\nSuper C\n\nSuper Cars\n\nSuper Dodge Ball\n\nSuper Glove Ball\n\nSuper Jeopardy!\n\nSuper Mario Bros.\n\nSuper Mario Bros. / Duck Hunt\n\nSuper Mario Bros. / Duck Hunt / World Class Track Meet\n\nSuper Mario Bros. 2 (RevA)\n\nSuper Mario Bros. 3\n\nSuper Off Road, Ivan “Ironman” Stewart’s\n\nSuper Pitfall\n\nSuper Spike V’Ball\n\nSuper Spike V’Ball / Nintendo World Cup\n\nSuper Sprint\n\nSuper Spy Hunter\n\nSuper Team Games\n\nSuperman\n\nSwamp Thing\n\nSword Master\n\nSwords and Serpents\n\nT&C Surf Designs 2: Thrilla’s Surfari\n\nT&C Surf Designs: Wood and Water Rage\n\nT2: Terminator 2: Judgment Day\n\nTaboo: The Sixth Sense\n\nTag Team Wrestling\n\nTagin’ Dragon\n\nTaleSpin, Disney’s\n\nTarget: Renegade\n\nTecmo Baseball\n\nTecmo Bowl\n\nTecmo Cup: Soccer Game\n\nTecmo NBA Basketball\n\nTecmo Super Bowl\n\nTecmo World Wrestling\n\nTeenage Mutant Ninja Turtles\n\nTeenage Mutant Ninja Turtles II: The Arcade Game\n\nTeenage Mutant Ninja Turtles III: The Manhattan Project\n\nTeenage Mutant Ninja Turtles: Tournament Fighters\n\nTennis\n\nTerminator, The\n\nTerra Cresta\n\nTetris (Nintendo)\n\nTetris (Tengen)\n\nTetris 2\n\nThree Stooges, The\n\nThunder & Lightning\n\nThunderbirds\n\nThundercade\n\nTiger-Heli\n\nTiles of Fate\n\nTime Lord\n\nTimes of Lore\n\nTiny Toon Adventures\n\nTiny Toon Adventures 2: Trouble in Wackyland\n\nTiny Toon Adventures: Cartoon Workshop\n\nTo The Earth\n\nToki\n\nTom & Jerry\n\nTombs and Treasure\n\nToobin’\n\nTop Gun\n\nTop Gun: The Second Mission\n\nTop Players’ Tennis, Chris Evert & Ivan Lendl in\n\nTotal Recall\n\nTotally Rad\n\nTouchdown Fever\n\nToxic Crusaders\n\nTrack & Field\n\nTrack & Field II (RevA)\n\nTreasure Master\n\nTrog!\n\nTrojan\n\nTrolls on Treasure Island\n\nTwin Cobra\n\nTwin Eagle\n\nUltima: Exodus\n\nUltima: Quest of the Avatar\n\nUltima: Warriors of Destiny\n\nUltimate Air Combat\n\nUltimate Basketball\n\nUltimate League Soccer\n\nUltimate Stuntman, The\n\nUncanny X-Men, The\n\nUncharted Waters\n\nUninvited\n\nUntouchables, The (RevA)\n\nUrban Champion\n\nVegas Dream\n\nVenice Beach Volleyball\n\nVice: Project Doom\n\nVideomation\n\nVindicators\n\nVolleyball\n\nWacky Races\n\nWall Street Kid\n\nWally Bear and the No! Gang\n\nWario’s Woods\n\nWayne Gretzky Hockey\n\nWayne’s World\n\nWCW World Championship Wrestling\n\nWerewolf: The Last Warrior\n\nWheel of Fortune\n\nWheel of Fortune featuring Vanna White\n\nWheel of Fortune: Family Edition\n\nWheel of Fortune: Junior Edition\n\nWhere in Time is Carmen Sandiego?\n\nWhere’s Waldo?\n\nWho Framed Roger Rabbit\n\nWhomp ‘Em\n\nWidget\n\nWild Gunman\n\nWillow\n\nWin, Lose or Draw\n\nWinter Games (RevA)\n\nWizardry: Knight of Diamonds\n\nWizardry: Proving Grounds of the Mad Overlord\n\nWizards & Warriors\n\nWizards & Warriors III\n\nWolverine\n\nWorld Champ\n\nWorld Class Track Meet\n\nWorld Games\n\nWrath of the Black Manta (RevA)\n\nWrecking Crew\n\nWURM: Journey to the Center of the Earth\n\nWWF King of the Ring\n\nWWF WrestleMania\n\nWWF WrestleMania Challenge\n\nWWF WrestleMania: Steel Cage Challenge\n\nXenophobe\n\nXevious: The Avenger\n\nXexyz\n\nYo! Noid\n\nYoshi\n\nYoshi’s Cookie\n\nYoung Indiana Jones Chronicles, The\n\nZanac\n\nZelda II: The Adventure of Link\n\nZen: Intergalactic Ninja\n\nZoda’s Revenge: StarTropics II\n\nZombie Nation\n\nEuropean PAL Exclusive NES Games\n\nAsterix\n\nAussie Rules Footy\n\nBanana Prince\n\nChampionship Rally\n\nCrackout\n\nDevil World\n\nDisney’s Aladdin\n\nDisney’s Beauty and the Beast\n\nDisney’s The Lion King\n\nDropzone\n\nElite\n\nFormula One Sensation\n\nHammerin’ Harry\n\nInternational Cricket\n\nKick Off\n\nKonami Hyper Soccer\n\nThe Legend of Prince Valiant\n\nLes Chevaliers du Zodiaque : La Légende d’or\n\nMario Bros. (Classic Series)\n\nMr. Gimmick!\n\nNew Ghostbusters II\n\nNoah’s Ark\n\nOver Horizon\n\nParasol Stars: Rainbow Islands II\n\nParodius\n\nRackets & Rivals\n\nRainbow Islands: Bubble Bobble 2\n\nRoad Fighter\n\nRod Land\n\nThe Smurfs\n\nSuper Mario Bros./Tetris/Nintendo World Cup\n\nSuper Turrican\n\nTecmo World Cup Soccer\n\nThe Trolls in Crazyland\n\nUfouria: The Saga\n\nJapanese / Famicom Games\n\nNote: Airwolf, Star Wars, and Tetris are different from the US versions.\n\n’89 Dennou Kyuusei Uranai\n\n10-Yard Fight\n\n1942\n\n1943: The Battle of Valhalla\n\n2010 Street Fighter\n\n4 Nin Uchi Mahjong\n\n8 Eyes\n\nA Ressha de Ikou\n\nA Week of Garfield\n\nAa Yakyu Jinsei Itchokusen\n\nAbadox\n\nAbarenbou Tengu\n\nAces: Iron Eagle III\n\nAdvanced Dungeons & Dragons: Dragons of Flame\n\nAdvanced Dungeons & Dragons: Heroes of the Lance\n\nAdvanced Dungeons & Dragons: Hillsfar\n\nAdvanced Dungeons & Dragons: Pool of Radiance\n\nAdventures of Lolo\n\nAdventures of Lolo 2\n\nAfter Burner\n\nAi Sensei no Oshiete: Watashi no Hoshi\n\nAigiina no Yogen: From the Legend of Balubalouk\n\nAir Fortress\n\nAirwolf\n\nAkagawa Jirou no Yuurei Ressha\n\nAkira\n\nAkuma no Shoutaijou\n\nAkuma-kun: Makai no Wana\n\nAkumajou Densetsu\n\nAkumajou Dracula\n\nAkumajou Special: Boku Dracula Kun\n\nAlien Syndrome\n\nAmerica Daitoryo Senkyo\n\nAmerica Oudan Ultra Quiz: Shijou Saidai no Tatakai\n\nAmerican Dream\n\nAnkoku Shinwa: Yamato Takeru Densetsu\n\nAntarctic Adventure\n\nAoki Ookami to Shiroki Mejika: Genchou Hishi\n\nAoki Ookami to Shiroki Mejika: Genghis Khan\n\nArabian Dream Scheherazade\n\nArctic\n\nArgos no Senshi\n\nArgus\n\nArkanoid\n\nArkanoid II\n\nArmadillo\n\nArtelius\n\nAsmik-kun Land\n\nASO: Armored Scrum Object\n\nAstro Fang: Super Machine\n\nAstro Robo Sasa\n\nAthena\n\nAtlantis no Nazo\n\nAttack Animal Gakuen\n\nB-Wings\n\nBabel no Tou\n\nBaken Hisshou Gaku: Gate In\n\nBakusho! Ai no Gekijo\n\nBakushou!! Jinsei Gekijou\n\nBakushou!! Jinsei Gekijou 2\n\nBakushou!! Jinsei Gekijou 3\n\nBakusho! Star Monomane Shitenno\n\nBallblazer\n\nBalloon Fight\n\nBaltron\n\nBanana\n\nBananan Ouji no Daibouken\n\nBarcode World\n\nBard’s Tale: Tales of the Unknown\n\nThe Bard’s Tale II: The Destiny Knight\n\nBaseball\n\nBaseball Fighter\n\nBaseball Stars: Mezase Sankanou!!\n\nBatman\n\nBats & Terry\n\nBattle Baseball\n\nBattle City\n\nBattle Fleet\n\nBattle Formula\n\nDatach: Battle Rush: Build Up Robot Tournament\n\nBattle Stadium: Senbatsu Pro Yakyuu\n\nBattle Storm\n\nBattletoads\n\nBe-Bop High School: Koukousei Gokuraku Densetsu\n\nBest Keiba: Derby Stallion\n\nBest Play Pro Yakyuu\n\nBest Play Pro Yakyuu II\n\nBest Play Pro Yakyuu ’90\n\nBest Play Pro Yakyuu Shin Data\n\nBest Play Pro Yakyuu Special\n\nBikkuri Nekketsu Shin Kiroku! Harukanaru Kin Medal\n\nBikkuriman World: Gekitou Sei Senshi\n\nBinary Land\n\nBio Miracle Bokutte Upa\n\nBio Senshi Dan: Increaser to no Tatakai\n\nBird Week\n\nThe Black Bass\n\nThe Black Bass 2\n\nBlock Set (Rob the Robot and Stack-Up “Block”)\n\nBlodia Land: Puzzle Quest\n\nBloody Warriors: Shan-Go no Gyakushuu\n\nBlue Marlin, The\n\nBokosuka Wars\n\nBomber King\n\nBomberman\n\nBomberman II\n\nBooby Kids\n\nBoulder Dash\n\nBubble Bobble 2\n\nBucky O’Hare\n\nBuggy Popper\n\nBurai Fighter\n\nBurgerTime\n\nBusiness Wars\n\nCadillac\n\nCapcom Barcelona ’92\n\nCaptain Ed\n\nCaptain Saver\n\nCaptain Silver\n\nCaptain Tsubasa\n\nCaptain Tsubasa Vol. II: Super Striker\n\nCasino Derby & Super Bingo\n\nCastle Excellent\n\nCastle Quest\n\nChack’n Pop\n\nChallenger\n\nChampionship Bowling\n\nChampionship Lode Runner\n\nChaos World\n\nChester Field: Ankoku Shin e no Chosen\n\nChibi Maruko-Chan: Uki Uki Shopping\n\nChiisana Obake: Achhi Sochhi Kocchi\n\nChiki Chiki Machine Mou Race\n\nChip to Dale no Daisakusen\n\nChip to Dale no Daisakusen 2\n\nChitei Senkou Bazolder\n\nChiyonofuji no Oicho\n\nChoplifter\n\nChou-Wakusei Senki MetaFight\n\nChoujikuu Yousai Macross\n\nChojin Sentai Jetman\n\nChoujin Ultra Baseball\n\nChoujinrou Senki Warwolf\n\nChuugoku Janshi Story: Tonpuu\n\nChuugoku Senseijutsu\n\nChuuka Taisen\n\nCircus Charlie\n\nCity Adventure Touch: Mystery of Triangle\n\nCity Connection\n\nClu Clu Land\n\nCobra Command\n\nCocoron\n\nColumbus: Ougon no Yoake\n\nConflict\n\nContra\n\nCosmic Epsilon\n\nCosmic Wars\n\nCosmo Genesis\n\nCosmo Police Galivan\n\nCrayon Shin-Chan: Ora to Poi Poi\n\nCrazy Climber\n\nCrisis Force\n\nCross Fire\n\nCycle Race: Road Man\n\nDai-2-Ji Super Robot Taisen\n\nDaikaijyu Deburasu\n\nDaikoukai Jidai\n\nDaiku no Gen-San\n\nDaiku no Gen-San 2\n\nDai Meiro – Meikyuu no Tatsujin\n\nDaisenryaku\n\nDaiva\n\nDark Lord\n\nDash Yarou\n\nDatach Crayon Shin-Chan: Ora to Poi Poi\n\nDatsugoku\n\nDe-Block\n\nDeep Dungeon III\n\nDeep Dungeon IV\n\nDeja Vu\n\nDengeki Big Bang!\n\nDensetsu no Kishi Elrond\n\nDerby Stallion Zengokuban\n\nDevilman\n\nDevil World\n\nDezaemon\n\nDie Hard\n\nDig Dug\n\nDig Dug II\n\nDigital Devil Monogatari Megami Tensei\n\nDigital Devil Monogatari: Megami Tensei II\n\nDoki! Doki! Yuenchi: Crazy Land Daisakusen\n\nDokuganryu Masamune\n\nDon Doko Don\n\nDon Doko Don 2\n\nDonald Duck\n\nDonald Land\n\nDonkey Kong\n\nDonkey Kong 3\n\nDonkey Kong Jr. Math\n\nDonkey Kong Jr.\n\nDoor Door\n\nDoraemon\n\nDoraemon: Giga Zombie no Gyakushu\n\nDouble Dragon\n\nDouble Dragon II: The Revenge\n\nDouble Dragon III: The Rosetta Stone\n\nDouble Moon Densetsu\n\nDough Boy\n\nDowntown Nekketsu Koushinkyoku: Soreyuke Daiundoukai\n\nDowntown Nekketsu Monogatari\n\nDowntown Special: Kunio-kun no Jidaigeki Dayo Zenin Shuugou!\n\nDr. Mario\n\nDragon Ball 3: Gokuuden\n\nDragon Ball Z\n\nDragon Ball Z Side Story: Plan to Eradicate the Saiyans\n\nDragon Ball Z II: Gekishin Freeza\n\nDragon Ball Z III: Ressen Jinzou Ningen\n\nDatach: Dragon Ball Z: Gekitou Tenkaichi Budokai\n\nDragon Ball: Daimaou Fukkatsu\n\nDragon Ball: Shenron no Nazo\n\nDragon Buster\n\nDragon Buster II\n\nDragon Fighter\n\nDragon Ninja\n\nDragon Quest\n\nDragon Quest II: Gods of the Evil Spirits\n\nDragon Quest III: And thus into Legend…\n\nDragon Quest IV: The Guided Ones\n\nDragon Scroll\n\nDragon Slayer IV: Drasle Family\n\nDragon Slayer Jr.: Romancia\n\nDragon Spirit: Aratanaru Densetsu\n\nDragon Unit\n\nDragon Wars\n\nDragon’s Lair\n\nDream Master\n\nDuck Hunt\n\nDuckTales 2\n\nDungeon Kid\n\nDungeon & Magic: Sword of Element\n\nDynamite Batman\n\nDynamite Bowl\n\nEggerland: Meikyu no Fukkatsu\n\nEgypt\n\nElevator Action\n\nElnark no Zaihou\n\nElysion\n\nEmoyan no 10-bai Pro Yakyuu\n\nErika to Satoru no Yume Boken\n\nEsper Boukentai\n\nEsper Dream 2\n\nExcitebike\n\nExciting Boxing\n\nExciting Rally\n\nExed Exes\n\nExerion\n\nF-1 Hero 2, Nakajima Satoru Kanshuu\n\nF1 Circus\n\nF-1 Sensation\n\nF-1 Race\n\nFamicom Igo Nyuumon\n\nFamicom Jump: Hero Retsuden\n\nFamicom Jump II: The Strongest Seven\n\nFamicom Meijinsen\n\nFamicom Shougi: Ryuu-Ou-Sen\n\nFamicom Top Management\n\nFamicom Wars\n\nFamicom Yakyuuban\n\nFamily Block\n\nFamily Boxing\n\nFamily Circuit\n\nFamily Circuit ’91\n\nFamily Computer Othello\n\nFamily Jockey\n\nFamily Mahjong\n\nFamily Mahjong II: Shanghai he no Michi\n\nFamily Pinball\n\nFamily Quiz\n\nFamily Tennis\n\nFamily Trainer: Aerobics Studio\n\nFamily Trainer: Athletic World\n\nFamily Trainer: Daiundokai\n\nFamily Trainer: Fuuun! Takeshi Shiro 2\n\nFamily Trainer: Jogging Race\n\nFamily Trainer: Manhattan Police\n\nFamily Trainer: Meiro Daisakusen\n\nFamily Trainer: Rai Rai! Kyonshizu: Baby Kyonshi no Amida Daibouken\n\nFamily Trainer: Running Stadium\n\nFamily Trainer: Totsugeki! Fuuun Takeshi Shiro\n\nFamista ’89 Kaimaku Ban!!\n\nFamista ’90\n\nFamista ’91\n\nFamista ’92\n\nFamista ’93\n\nFamista ’94\n\nFantasy Zone\n\nFantasy Zone 2: The Teardrop of Opa-Opa\n\nFaria Fuuin no Tsurugi\n\nFaxanadu\n\nFC Genjin\n\nFerrari\n\nField Combat\n\nFighting Golf\n\nFighting Road\n\nFinal Fantasy\n\nFinal Fantasy I+II\n\nFinal Fantasy II\n\nFinal Fantasy III\n\nFinal Lap\n\nFinal Mission\n\nFire Emblem: Shadow Dragon and the Blade of Light\n\nFire Emblem Gaiden\n\nFlappy\n\nFleet Commander\n\nFlintstones: The Rescue of Dino and Hoppy\n\nFlipull\n\nFlying Hero\n\nFormation Z\n\nFront Line\n\nFudou Myououden\n\nFushigi na Blobby\n\nFushigi no Umi no Nadia\n\nFuzzical Fighter\n\nGalaga\n\nGalaxian\n\nGambler Jiko Chuushinha\n\nGambler Jiko Chuushinha 2\n\nGame Party\n\nGanbare Goemon! Karakuri Dochu\n\nGanbare Goemon 2\n\nGanbare Goemon Gaiden: Kieta Ougon Kiseru\n\nGanbare Goemon Gaiden 2\n\nGanbare Pennant Race!\n\nGanso Saiyuki: Super Monkey Daiboken\n\nGegege no Kitaro: Youkai Daimakyou\n\nGegege no Kitaro 2\n\nGeimos\n\nGekikame Ninja Den (= TMNT)\n\nGekitotsu Shiku Battle\n\nGekitou Pro Wrestling!! Toukon Densetsu\n\nGekitou!! Stadium\n\nGenpei Toma Den\n\nGetsu Fuma Den\n\nGhostbusters\n\nGimme a Break: Shijou Saikyou no Quiz Ou Ketteisen\n\nGimme a Break: Shijou Saikyou no Quiz Ou Ketteisen 2\n\nGimmick!\n\nGinga Eiyuu Densetsu\n\nGinga no Sannin\n\nGoal !!\n\nGod Slayer: Haruka Tenku no Sonata\n\nGojira (Godzilla)\n\nGolf\n\nThe Golf ’92\n\nGolf Club: Birdie Rush\n\nGolf Grand Slam\n\nGolf-kko Open\n\nGolgo 13: Kamigami no Koukon\n\nGolgo 13 II\n\nGomoku Narabe Renju\n\nGoonies\n\nGoonies II: Fratelli Saigo no Chousen\n\nGorby no Pipeline Daisakusen\n\nGorilla Man\n\nGozonji Yajikitatin Douchuu\n\nGradius\n\nGradius II\n\nGrand Master\n\nGreat Battle Cyber\n\nGreat Boxing – Rush Up\n\nGreat Deal\n\nGreat Tank\n\nGremlins 2: The New Batch\n\nGuardic Gaiden\n\nGuevara\n\nGunHed: Aratanaru Tatakai\n\nGun-Nac\n\nGun Sight\n\nGun-Dec\n\nGyro (Gyromite)\n\nGyrodine\n\nHaja No Fuuin: Miracle Warriors\n\nHana no Star Kaidou\n\nHanjuku Hero\n\nHappy Birthday Bugs\n\nHatris\n\nHayauchi Super Igo\n\nHeavy Barrel\n\nHebereke\n\nHector ’87\n\nHeisei Tensai Bakabon\n\nHello Kitty no Hanabatake\n\nHello Kitty World\n\nHeracles no Eikou: Toujin Makyouden\n\nHeracles no Eikou II: Titan no Metsubou\n\nHi no Tori Hououhen: Gaou no Bouken\n\nHigemaru Makaijima – Nanatsu no Shima Daiboken\n\nHighway Star\n\nHirake! Ponkikki\n\nHiryu no Ken\n\nHiryu no Ken II\n\nHiryu no Ken III: 5 Nin no Ryuu Senshi\n\nHiryu no Ken Special: Fighting Wars\n\nHissatsu Doujou Yaburi\n\nHissatsu Shigotojin\n\nHitler no Fukkatsu: Top Secret\n\nHogan’s Alley\n\nHokkaidou Rensa Satsujin: Ohotsuku ni Kiyu\n\nHokuto no Ken\n\nHokuto no Ken 2\n\nHokuto no Ken 3\n\nHokuto no Ken 4\n\nHoly Diver\n\nHome Run Night\n\nHome Run Night ’90\n\nHonmei\n\nHonoo no Doukyuuji: Dodge Danpei\n\nHonoo no Doukyuuji: Dodge Danpei 2\n\nHonshougi: Naitou Kudan Shougi Hiden\n\nHook\n\nHoshi no Kirby: Yume no Izumi no Monogatari\n\nHoshi wo Miru Hito\n\nHostages\n\nHototogisu\n\nHottaman no Chitei Tanken\n\nHouma ga Koku\n\nHudson Hawk\n\nHyakkiyakou\n\nHyaku no Sekai no Monogatari\n\nHydlide Special\n\nHydlide 3\n\nHyokkori Hyoutan Shima: Nazo no Kaizokusen\n\nHyper Olympic\n\nHyper Sports\n\nI Love Softball\n\nIce Climber\n\nIdemitsu – Space College – Kikenbutsu no Yasashii Butsuri to Kagaku[7]\n\nIde Yosuke Meijin no Jissen Mahjong\n\nIde Yosuke Meijin no Jissen Mahjong II\n\nIdol Hakkenden\n\nIgo Meikan\n\nIgo Shinan\n\nIgo Shinan ’91\n\nIgo Shinan ’92\n\nIgo Shinan ’93\n\nIgo Shinan ’94\n\nIgo: Kyu Roban Taikyoku\n\nIkari\n\nIkari II\n\nIkari III\n\nIkeIke! Nekketsu Hockey-bu\n\nIkinari Musician\n\nIkki\n\nImage Fight\n\nInbou no Wakusei: Shankara\n\nIndora no Hikari\n\nInsector X\n\nIshin no Arashi\n\nItadaki Street: Watashi no Oten Niyottete\n\nIzaki Shuugorou no Keiba Hisshougaku\n\nJ-League Fighting Soccer: The King of Ace Strikers\n\nDatach: J. League Super Top Players\n\nJ-League Winning Goal\n\nJackie Chan\n\nJajamaru Gekimaden\n\nJajamaru Ninpou Chou\n\nJaJaMaru no Daibouken\n\nJangou\n\nJarin-Ko Chie\n\nJesus: Kyofu no Bio Monster\n\nThe Jetsons: Cogswell’s Caper!\n\nJigoku Gokuraku Maru\n\nJikuu (Toki) no Tabibito\n\nJikuu Yuten Debias\n\nJongbou\n\nJoust\n\nJoy Mech Fight\n\nJuJu Densetsu\n\nJumbo Ozaki no Hole in One Professional\n\nJumpin’ Kid: Jack to Mame no Ki Monogatari\n\nJust Breed\n\nJuuryoku Soukou Metal Storm\n\nJuvei Quest\n\nJyuouki\n\nKabushiki Doujou\n\nKage\n\nKage no Densetsu\n\nKagerou Densetsu\n\nKaguya Hime Densetsu\n\nKai no Bouken: The Quest of Ki\n\nKaijuu Monogatari\n\nKaiketsu Yancha Maru\n\nKaiketsu Yancha Maru 2: Karakuri Land\n\nKaiketsu Yanchamaru 3: Taiketsu! Zouringen\n\nKakefu Kimi no Jump Tengoku\n\nKame no Ongaeshi\n\nKamen no Ninja Akakage\n\nKamen no Ninja Hamaru\n\nKamen Rider Club\n\nKamen Rider SD\n\nKarakuri Kengoden Musashi Lord: Karakuri Jin Shissouru\n\nKaraoke Studio\n\nKaraoke Studio Senyou Cassette Vol. 1\n\nKaraoke Studio Senyou Cassette Vol. 2\n\nKarateka\n\nKarnov\n\nKatte ni Shirokuma\n\nKawa no Nushi Tsuri\n\nKekkyoku Nankyoku Daibouken\n\nKero Kero Keroppi no Daibouken\n\nKero Kero Keroppi no Daibouken 2\n\nKeroppi to Keroriinu no Splash Bomb\n\nKido Senshi Z-Gundam: Hot Scramble\n\nKing Kong 2: Ikari no Megaton Punch\n\nKing of Kings\n\nKing’s Knight\n\nKinnikuman: Muscle Tag Match\n\nKiteretsu Daihyakka\n\nKitte Rai Da! Gunjin Shougi Nanya Sore?\n\nKlax\n\nKnight Rider\n\nKonami Sports in Seoul\n\nKoufuku o Yobu Game: Dora Dora Dora\n\nKoryu Densetsu Villgust Gaiden\n\nKoshien\n\nKujaku Ou\n\nKujaku Ou II\n\nKunio-Kun no Jidaigeki dayo Zenin Shuugou: Downtown Special\n\nKunio-Kun no Nekketsu Soccer League\n\nKurogane Hiroshi no Yosou Daisuki! Kachiuma Densetsu\n\nKyatto Ninden Teyandee\n\nKyonshis 2\n\nKyorochan Land\n\nKyoryu Sentai Zyuranger\n\nKyouto Hana no Misshitsu Satsujin Jiken – Yamamura Misa Suspense\n\nKyouto Ryuu no Tera Satsujin Jiken – Yamamura Misa Suspense\n\nKyouto Zaiteku Satsujin Jiken Yamamura Misa Suspense\n\nKyuukyoku Harikiri Koshien\n\nKyuukyoku Harikiri Stadium\n\nKyuukyoku Harikiri Stadium ’88\n\nKyuukyoku Harikiri Stadium Heisei Gannenhan\n\nKyuukyoku Harikiri Stadium III\n\nKyuukyoku Tiger\n\nL’Empereur\n\nLabyrinth\n\nLagrange Point\n\nLast Armageddon\n\nLaw of the West\n\nLayla\n\nLittle Magic\n\nLittle Mermaid\n\nLode Runner\n\nLord of King\n\nLost Word of Jenny\n\nLot Lot\n\nLunar Ball\n\nLupin III Sansei: Pandora No Isan\n\nMach Rider\n\nMad City\n\nMagic Candle\n\nMagic Darts\n\nMagic John\n\nMagical Taruruto-Kun: Fantastic World!!\n\nMagical Taruruto-Kun 2: Magical Adventure\n\nMagical Kids Doropi\n\nMagMax\n\nMagnum Kiki Ippatsu: Empire City 1931\n\nMahaRaja\n\nMahjong\n\nMahjong Club Nagatacho: Sousaisen\n\nMahjong Taikai\n\nMahjong Taisen\n\nMahou no Princess Minkiimomo Remember Dream\n\nMaison Ikkoku\n\nMajaventure – Mahjong Senki\n\nMajou Densetsu II: The Maze of Galious\n\nMajor League\n\nMakai-Mura\n\nManiac Mansion\n\nMappy\n\nMappy Kids\n\nMappy-Land\n\nMario Bros.\n\nMario Open Golf\n\nMarusa no Onna\n\nMashin Eiyuden Wataru Gaiden\n\nMashou\n\nMasuzoe Kaname Icchou Made Famicom\n\nMatendo Douji\n\nMatsumoto Akira no Kabushiki Hisshougaku\n\nMatsumoto Akira no Kabushiki Hisshougaku II\n\nMax Warrior\n\nMeiji Ishin\n\nMeikyuu Kumikyoku\n\nMeikyuu Shima\n\nMeimon! Daisan Yakyuubu\n\nMeimon! Tako Nishiouendan\n\nMeitantei Holmes: Kiri no London Satsujin Jiken\n\nMeitantei Holmes: M-Kara no Chousenjou\n\nMelville no Honoo\n\nMetal Flame: Psybuster\n\nMetal Gear\n\nMetal Max\n\nMetal Slader Glory\n\nMetro Cross\n\nMezase! Top Pro: Green ni Kakeru Yume\n\nMickey Mouse\n\nMickey Mouse III: Yume Fuusen\n\nMight and Magic Book One: The Secret of the Inner Sanctum\n\nMighty Bomb Jack\n\nMighty Final Fight\n\nMillipede\n\nMindseeker\n\nMinelvaton Saga: Ragon no Fukkatsu\n\nMini-Putt\n\nMinna no Tabou no Nakayoshi Daisakusen\n\nMiracle Ropitt: 2100-Nen no Daiboken\n\nMirai Senshi Raios\n\nMirai Shinwa Jarvas\n\nMississippi Satsujin Jiken\n\nMitokoumon\n\nMitokoumon II: Sekai Manyuuki\n\nMitsume ga Tooru\n\nMizushima Shinji no Daikoushien\n\nMoai-Kun\n\nMoe-Pro! Saikyou Hen\n\nMoero TwinBee\n\nMoero!! Judo Warriors\n\nMoero!! Junior Basket\n\nMoero!! Pro Soccer\n\nMoero!! Pro Tennis\n\nMoero!! Pro Yakyuu\n\nMoero!! Pro Yakyuu ’88\n\nMoero!! Pro Yakyuu ’90: Kandouhen\n\nMoeru! Oniisan\n\nMokushi Pachi Pro: Pachi Otto-Kun\n\nMomotaro Densetsu\n\nMomotarou Densetsu Gaiden\n\nMomotaro Dentetsu\n\nMoney Game\n\nMoney Game II: Kabutochou no Kiseki\n\nMonopoly\n\nMonster Maker: Nanatsu no Hiho\n\nMoon Crystal\n\nMorita Shougi\n\nMother\n\nMotocross Champion\n\nMottomo Abunai Deka\n\nMouryou Senki Madara\n\nMurder Club\n\nMusashi no Boken\n\nMusashi no Ken – Tadaima Shugyo Chu\n\nMy Life My Love: Boku no Yume: Watashi no Negai\n\nNagagutsu o Haita Neko: Sekai Isshu 80 Nichi Dai Boken\n\nNakajima Satoru: F-1 Hero\n\nNakajima Satoru F-1 Hero 2\n\nNakayo Shito Issho\n\nNamco Classic\n\nNamco Classic II\n\nNamco Mahjong III: Mahjong Tengoku\n\nNantettatte!! Baseball\n\nNantettatte Baseball KO Game Cassette ’91 Kaimakuban\n\nNantettatte Baseball KO Game Set OB All Star Hen\n\nNapoleon Senki\n\nNavy Blue\n\nNekketsu Kakutou Densetsu\n\nNekketsu Kouha Kunio Kun\n\nNekketsu Koukou Dodge Ball Bu\n\nNekketsu Koukou Dodgeball-bu Soccer-hen\n\nNekketsu Street Basket: Ganbare Dunk Heroes\n\nNew Ghostbusters 2\n\nNew York Nyankies\n\nNHK Gakuen – Space School – Sansu 4 Nen (Ge)[8][9][10]\n\nNHK Gakuen – Space School – Sansu 4 Nen (Jou)\n\nNHK Gakuen – Space School – Sansu 5 Nen (Ge)\n\nNHK Gakuen – Space School – Sansu 5 Nen (Jou)\n\nNHK Gakuen – Space School – Sansu 6 Nen (Ge)\n\nNHK Gakuen – Space School – Sansu 6 Nen (Jou)\n\nNichibutsu Mahjong III\n\nNiji no Silkroad\n\nNingen Heiki Dead Fox\n\nNinja Cop Saizou\n\nNinja Crusaders\n\nNinja Hattori-kun\n\nNinja JaJaMaru-kun\n\nNinja Jajamaru: Ginga Daisakusen\n\nNinja Kun\n\nNinja Kun: Ashura no Shou\n\nNinja Ra Hoi!\n\nNinja Ryuukenden\n\nNinja Ryuukenden II\n\nNinja Ryuukenden III\n\nNippon Ichi no Meikantoku\n\nNishimura Kyoutarou Mystery: Blue Train Satsujin Jiken\n\nNishimura Kyoutarou Mystery: Super Express Satsujin Jiken\n\nNobunaga no Yabou: Bushou Fuuunroku\n\nNobunaga no Yabou: Sengouku Gunyuuden\n\nNobunaga no Yabou: Zenkokuban\n\nNorth and South\n\nNuts & Milk\n\nObake no Q Tarou: Wan Wan Panic\n\nObocchamakun\n\nOchinnitoshi Puzzle Tonjan!?\n\nOeka Kids – Anpanman no Hiragana Daisuki\n\nOeka Kids – Anpanman to Oekaki Shiyou\n\nOishinbo: Kyukyoku no Menu 3bon Syoubu\n\nOlympus no Tatakai\n\nOnyanko Town\n\nOperation Wolf\n\nOsomatsu-Kun: Back to Zami no Deppa\n\nOtaku no Seiza\n\nOutlanders\n\nOver Horizon\n\nPaaman\n\nPaaman Part 2\n\nPac-Land\n\nPac-Man\n\nPachicom\n\nPachi-Slot Adventure 2\n\nPachi-Slot Adventure 3: Bitaoshii 7 Kenzan!\n\nPachinko Daisakusen\n\nPachinko Daisakusen 2\n\nPachiokun 2\n\nPachiokun 3\n\nPachiokun 4\n\nPachiokun 5\n\nPalamedes\n\nPalamedes 2\n\nPaperboy\n\nParareru World\n\nParasol Henbee\n\nParis-Dakar Rally Special\n\nParodius Da! -Shinwa kara Owarai e-\n\nPeepar Time\n\nPenguin-Kun Wars\n\nPerfect Bowling\n\nPhoton: The Ultimate Game on Planet Earth\n\nPinball\n\nPinball Quest\n\nPizza Pop\n\nPlasma Ball\n\nPocket Zaurus: Ju Ouken no Nazo\n\nPooyan\n\nPopeye\n\nPopeye no Eigo Asobi\n\nPortopia Renzoku Satsujin Jiken\n\nPower Blazer\n\nPower Soccer\n\nPredator\n\nPresident no Sentaku\n\nPro Yakyuu Family Stadium\n\nPro Yakyuu Family Stadium ’87\n\nPro Yakyuu Family Stadium ’88\n\nPro Yakyuu Satsujin Jiken!\n\nPunch-Out!!\n\nPuyo Puyo\n\nPuzslot\n\nPuzznic\n\nPajama Hero Nemo\n\nPyokotan no Daimeiro\n\nQuarterback Scramble\n\nQuarth\n\nQuinty\n\nQuiz Project Q: Cutie Project & Battle 1000\n\nRacer Mini Yonku: Japan Cup\n\nRadia Senki: Reimeihen\n\nRaf World\n\nRaid on Bungeling Bay\n\nRainbow Island: The Story of Bubble Bobble 2\n\nRambo\n\nRampart\n\nRasaru Ishii no Childs Quest\n\nRecca – Summer Carnival ’92\n\nRed Arremer II\n\nReigen Doushi\n\nRipple Island\n\nRoad Fighter\n\nRobocco Wars\n\nRoboCop\n\nRoboCop 2\n\nRobot Block\n\nRobot Gyro\n\nRockman\n\nRockman 2: Dr. Wily no Nazo\n\nRockman 3: Dr. Wily no Saigo!?\n\nRockman 4: Aratanaru Yabo!!\n\nRockman 5: Blues no Wana!?\n\nRockman 6: Shijo Saidai no Tatakai!!\n\nRokudenashi Blues\n\nRollerball\n\nRolling Thunder\n\nRoute 16 Turbo\n\nRoyal Blood\n\nRPG Jinsei Game\n\nSensha Senryaku: Sabaku no Kitsune\n\nSaikoushi Sedi\n\nSaint Seiya\n\nSaint Seiya 2\n\nSaiyuuki World\n\nSaiyuuki World 2\n\nSakigake!! Otokojuku\n\nSalad no Kuni no Tomato Hime\n\nSalamander\n\nSan Goku Shi\n\nSan Goku Shi II\n\nSan Goku Shi: Chuugen no Hasha\n\nSan Goku Shi II: Haou no Tairiku\n\nSanada Juu Yuushi\n\nSanma no Meitantei\n\nSanrio Carnival\n\nSanrio Carnival 2\n\nSanrio Cup: Pon Pon Volley\n\nSansara Naga\n\nSansu 1-nen: Keisan Game\n\nSansu 2-nen: Keisan Game\n\nSansu 3-nen: Keisan Game\n\nSansu 4-nen: Keisan Game\n\nSansu 5+6-nen: Keisan Game\n\nSatomi Hakkenden\n\nSatsui no Kaisou\n\nSD Battle Oozumou\n\nSD Gundam Gachapon Senshi 2: Capsule Senki\n\nSD Gundam Gachapon Senshi 3: Eiyuu Senki\n\nSD Gundam Gachapon Senshi 4: New Type Story\n\nSD Gundam Gachapon Senshi 5: Battle of Universal Century\n\nSD Gundam Gaiden: Knight Gundam Monogatari\n\nSD Gundam Gaiden: Knight Gundam Monogatari 2: Hikari no Kishi\n\nSD Gundam Gaiden: Knight Gundam Monogatari 3\n\nDatach: SD Gundam: Gundam Wars\n\nSD Hero Soukessen: Taose! Aku no Gundan\n\nSD Keiji Blader\n\nSD Sengoku Bushou Retsuden: Rekka no Gotoku Tenka o Nusure!\n\nSeicross\n\nSeikima II Akuma no Gyakushu!\n\nSeirei Densetsu Lickle\n\nSeirei Gari\n\nSekiryuou\n\nSenjo no Ookami\n\nShadow Brain\n\nShadowgate\n\nShanghai\n\nShanghai II\n\nSherlock Holmes: Hakushaku Reijo Yukai Jiken\n\nShikinjo\n\nShin 4-Jin Uchi Mahjong: Yakuman Tengoku\n\nShin Moero!! Pro Yakyuu\n\nShin Satomi Hakken-Den – Hikari to Yami no Tatakai\n\nShinjinrui\n\nShinsenden\n\nShougi Meikan ’92\n\nShougi Meikan ’93\n\nShogun\n\nShonen Ashibe Nepal Daibouken no Maki\n\nShuffle Fight\n\nShufflepuck Café\n\nSide Pocket\n\nSilva Saga\n\nSky Destroyer\n\nSky Kid\n\nSnow Bros.\n\nSoccer\n\nSoftball Tengoku\n\nSolomon no Kagi\n\nSolomon no Kagi 2\n\nSolstice\n\nSonSon\n\nSoreike! Anapanman Minna de Hiking Game\n\nSpace Harrier\n\nSpace Hunter\n\nSpace Invaders\n\nSpace Shadow\n\nSpartan X\n\nSpartan X 2\n\nSpelunker\n\nSpelunker II: Yusha e no Chosen\n\nSplatterhouse: Wanpaku Graffiti\n\nSpot\n\nSpy vs. Spy\n\nSpy vs. Spy II: Nankoku Shirei!!\n\nSqoon\n\nSquare no Tom Sawyer\n\nStar Force\n\nStar Luster\n\nStar Soldier\n\nStar Wars\n\nStar Wars\n\nStar Wars: Teikoku no Gyakushuu\n\nStargate\n\nSTED: Iseki Wakusei no Yabou\n\nStick Hunter\n\nSugoro Quest: Dice no Senshi Tachi\n\nSuikoden: Tenmei no Chikai\n\nSukeban Deka III\n\nSuper Arabian\n\nSuper Black Onyx\n\nSuper Chinese\n\nSuper Chinese 2\n\nSuper Chinese 3\n\nSuper Contra\n\nSuper Dynamix Badminton\n\nSuper Mario Bros.\n\nSuper Mario Bros. 3\n\nSuper Mario USA\n\nSuper Mogura Tataki!! Pokkun Mogura\n\nSuper Momotaro Dentetsu\n\nSuper Pinball\n\nSuper Pitfall\n\nSuper Real Baseball ’88\n\nSuper Rugby\n\nSuper Sprint\n\nSuper Star Force: Jikureki no Himitsu\n\nSuper Star Pro Wrestling\n\nSuper Xevious: GAMP no Nazo\n\nSuperman\n\nSWAT: Special Weapons and Tactics\n\nSweet Home\n\nSword Master\n\nTag Team Pro Wrestling\n\nTaito Basketball\n\nTaito Chase H.Q.\n\nTaito Grand Prix: Eikou heno License\n\nTaiyou no Shinden Asteka II\n\nTaiyou no Yuusha Firebird\n\nTakahashi Meijin no Boken Jima\n\nTakahashi Meijin no Boken Jima II\n\nTakahashi Meijin no Boken Jima III\n\nMaster Takahashi’s Adventure Island IV\n\nTakahashi Meijin no Bug-tte Honey\n\nTakeda Shingen\n\nTakeda Shingen II\n\nTakeshi no Chosenjo\n\nTakeshi no Sengoku Fuunji\n\nTamura Teruaki no Mahjong Seminar\n\nTanigawa Koji no Shougi Shinan II\n\nTanigawa Koji no Shougi Shinan III\n\nTantei Jinguji Saburo: Yokohamakou Renzoku Satsujin Jiken\n\nTantei Jinguji Saburo: Toki no Sugiyuku Mama Ni\n\nTao\n\nTashiro Masashi no Princess ga Ippai\n\nTatakae! Cho Robot Seimeitai Transformers: Convoy no Nazo\n\nTatakai no Banka\n\nTatake!! Ramen-Man\n\nTecmo Bowl\n\nTecmo Super Bowl\n\nTecmo World Cup Soccer r\n\n(for TMNT 1, see Gekikame Ninja Den)\n\nTeenage Mutant Ninja Turtles: Super Kame Ninja (= TMNT 2)\n\nTeenage Mutant Ninja Turtles 2: The Manhattan Project (= TMNT 3)\n\nTenchi o Kurau\n\nTenchi o Kurau II\n\nTenkaichi Bushi Keru Naguuru\n\nTennis\n\nTerao no Dosukoi Oozumou\n\nTerminator 2\n\nTerra Cresta\n\nTetra Star\n\nTetris\n\nTetris 2 + Bombliss\n\nTetris Flash\n\nTetsudou-Oh\n\nTetsuwan Atom\n\nThexder\n\nThunderbirds\n\nTiger-Heli\n\nTime Zone\n\nTimes of Lore\n\nTiny Toon Adventures\n\nTiny Toon Adventures 2: Montana Land e Yokoso\n\nTitan\n\nTM Network: Live in Power Bowl\n\nTobidase Daisakusen 2: JJ\n\nTokkyu Shirei Solbrain\n\nTokoro-san no Mamoru mo Semeru mo\n\nTokyo Pachi-Slot Adventure\n\nTom & Jerry\n\nTom Sawyer no Bouken\n\nTop Gun\n\nTop Gun: Dual Fighters\n\nTop Rider\n\nTop Striker\n\nTotsuzen! Macho Man\n\nTouch Down Fever: American Football\n\nTouhou Kenbunku\n\nTokaido Gojusan-tsugi\n\nToukon Club\n\nThe Tower of Druaga\n\nThe Triathlon\n\nTsuppari Oozumou\n\nTsuppari Wars\n\nTsurikichi Sanpei\n\nTsuru Pikahage Maru: Mezase! Tsuruseko no Akashi\n\nTwin Eagle: Revenge Joe’s Brother\n\nTwinBee\n\nTwinBee 3\n\nUchuu Keibitai SDF\n\nUchusen: Cosmo Carrier\n\nUltima\n\nUltima: Seisha he no Michi\n\nUltraman Club Kaijuu Dai Kessen!!\n\nDatach: Ultraman Club: Supokon Fight!\n\nUltraman Club 2: Kaettekita Ultraman Club\n\nUltraman Club 3\n\nThe Untouchables\n\nUrban Champion\n\nUrusei Yatsura: Lum’s Wedding Bell\n\nUS Championship V’Ball\n\nUSA Ice Hockey in FC\n\nUshio to Tora: Shin’en no Daiyo\n\nUtsurun Desu.: Kawauso Hawaii e Iku!!!\n\nValkyrie no Boken: Toki no Kagi Densetsu\n\nValis: The Fantasm Soldier\n\nVegas Connection: Casino Kara Ai wo Komete\n\nVenus Senki\n\nViva Las Vegas\n\nVolguard II\n\nWagyan Land\n\nWagyan Land 2\n\nWagyan Land 3\n\nWai Wai World\n\nWai Wai World 2: SOS!! Parsley Jo\n\nWanpaku Duck Yume Bouken\n\nWanpaku Kokkun no Gourmet World\n\nWario no Mori\n\nWarpman\n\nWestern Kids\n\nWhite Lion Densetsu\n\nWild Gunman\n\nWillow\n\nWily & Right no RockBoard: That’s Paradise\n\nWing of Madoola\n\nWinners Cup\n\nWit’s\n\nWizardry: Proving Grounds of the Mad Overlord\n\nWizardry II: Legacy of Llylgamyn – The Third Scenario\n\nWizardry III: Knight of Diamonds – The Second Scenario\n\nWoody Poko\n\nWorld Boxing\n\nWorld Grand-Prix – Pole To Finish\n\nWorld Super Tennis\n\nWrecking Crew\n\nWWF WrestleMania Challenge\n\nXevious\n\nYie Ar Kung Fu\n\nYoshi no Cookie\n\nYoshi no Tamago\n\nYokai Dochuki\n\nYoukai Club\n\nYousei Monogatari RodLand\n\nYs\n\nYs II\n\nYs III: Wanderers from Ys\n\nYume Penguin Monogatari\n\nDatach: YuYu Hakusho: Bakuto Ankoku Bujutsu Kai\n\nZelda no Densetsu 1\n\nZenbei!! Pro Basketball\n\nFamicom Disk System (FDS) Games\n\n19 – Neunzehn\n\nAdian no Tsue\n\nAi Senshi Nicol\n\nAkumajōu Dracula\n\nAkū Senki Raijin\n\nAll Night Nippon Super Mario Bros.\n\nAll One\n\nApple Town Story\n\nThe Miracle of Almana\n\nAspic – Majaō no Noroi\n\nBackgammon\n\nBakutōshi Patton-Kun\n\nBaseball\n\nBig Challenge! Dogfight Spirit\n\nBig Challenge! Go! Go! Bowling\n\nBig Challenge! Gun Fighter\n\nBig Challenge! Judo Senshuken\n\nBio Miracle-I’m Upa\n\nBio Miracle Bokutte Upa\n\nBomberman\n\nBreeder\n\nBubble Bobble\n\nBurgerTime\n\nChitei Tairiku Ordola\n\nCursed Treasure of Cleopatra\n\nClox\n\nClu Clu Land: Welcome to New Clu Clu Land\n\nCocona World\n\nDandy: Zeuon No Fukkatsu\n\nDead Zone\n\nDeep Dungeon\n\nDig Dug\n\nDig Dug II\n\nDirty Pair: Project Eden\n\nDonkey Kong\n\nDonkey Kong Jr.\n\nDoremikko\n\nDr. Chaos\n\nDracula II: Noroi no Fūin\n\nDruid: Kyōfu no Tobira\n\nEggerland\n\nEggerland – Departure to Creation\n\nElectrician\n\nEsper Dream\n\nExciting Baseball\n\nExciting Basketball\n\nExciting Billiard\n\nExciting Soccer: Konami Cup\n\nFairytale\n\nFalsion\n\nFamicom Grand Prix: F-1 Race\n\nFamicom Grand Prix II: 3D Hot Rally\n\nFamicom Detective Club: The Missing Heir (first part)\n\nFamicom Detective Club: The Missing Heir (second part)\n\nFamicom Detective Club Part II: The Girl who Stands Behind (first part)\n\nFamicom Detective Club Part II: The Girl who Stands Behind (second part)\n\nFamily Composer\n\nFamily Computer Othello\n\nFinal Command: The Red Fortress\n\nFire Bam\n\nFire Rock\n\nFūun Shōrin Ken\n\nFūun Shōrin Ken: Ankoku no Maō\n\nGall Force: Eternal Story\n\nGalaga\n\nGalaxian\n\nGerman Tanteidan: Marine-gumi Jaaman Tanteidan: Matonarikumi Jaaman Tanteidan Marine Kumi: Maruhi Jigoma Sousa File\n\nGinga Denshō: Galaxy Odyssey\n\nGokuraku Yūgi: Game Tengoku\n\nGolf\n\nGolf Japan Course\n\nGolf U.S. Course\n\nThe Goonies\n\nGreen Beret\n\nGun.Smoke\n\nGyruss\n\nHalley Wars\n\nHao’s Mysterious Journey\n\nHikari Genji: Roller Panic\n\nHikari Shinwa: Palthena no Kagami\n\nHong Kong\n\nI am a Teacher: Super Mario no Sweater\n\nI am a Teacher: Teami no Kiso\n\nIce Climber\n\nIce Hockey\n\nIgo: Kyū Roban Taikyoku\n\nIshido: The Way of Stones\n\nJanken Disk Jō\n\nJikai Shounen Mettomag\n\nThe Return of Mario Bros.\n\nKamen Rider Black: Taiketsu Shadow Moon\n\nKarate Champ\n\nKattobi! Dōji\n\nKick and Run\n\nKick Challenger: Air Foot\n\nKidō Keisatsu Patlabor\n\nKiki Kaikai: Dotō Hen\n\nKieta Princess\n\nKinnikuman: Kinniku-Sei Ōi Sōdatsusen\n\nKnight Lore\n\nKnight Move\n\nKonami Ice Hockey\n\nKonami Tennis\n\nA Kitten’s Story: The Adventures of Chatran\n\nThe Legend of Zelda\n\nThe Legend of Zelda 2: The Adventure of Link\n\nLutter\n\nMagma Project: Hacker\n\nMahjong\n\nMahjong Kazoku\n\nMärchen Veil\n\nMatō no Hōkai: The Hero of Babel\n\nMeikyū Jiin Dababa\n\nMetroid\n\nMichael English Daibōken\n\nMoero Twinbee: Cinnamon Hakase wo Sukue!\n\nMonitor Puzzle, The: Kineco – Kinetic Connection\n\nMonitor Puzzle, The: Kineco Vol. II – Kinetic Connection\n\nMonty no Doki Doki Daisassō: Monty on the Run\n\nMoonball Magic\n\nMr. Gold: Tōyama no Kinsan in Space\n\nNakayama Miho no Tokimeki High School\n\nNamida no Sōkoban Special\n\nNanking no Adventure\n\nNazo no Kabe: Block Kuzushi\n\nNazo no Murasame Jō\n\nNazoler Land\n\nNazoler Land Dai 2 Gō\n\nNazoler Land Dai 3 Gō\n\nNazoler Land Special\n\nOmoikkiri Tanteidan Haado Gumi: Matenrō no Chōsenjō\n\nOtocky\n\nPac-Man\n\nPachicom\n\nPachinko Grand Prix\n\nPanic Space\n\nPinball\n\nPro Golfer Saru: Kage no Tournament\n\nProfessional Mahjong Goku\n\nPulsar no Hikari: Space Wars Simulation\n\nPro Wrestling: Famicom Wrestling Association\n\nPutt Putt Golf\n\nPuyo Puyo\n\nPuzzle Boys\n\nRadical Bomber!! Jirai Kun\n\nReflect World\n\nRelics: Ankoku Yōsai\n\nReplicart\n\nRisa no Yōsei Densetsu: Risa Tachibana\n\nRoger Rabbit\n\nSamurai Sword\n\nSanta Claus no Takarabako\n\nSD Gundam World: Gachapon Senshi – Scramble Wars\n\nSD Gundam World: Gachapon Senshi – Scramble Wars Map Collection\n\nSection Z\n\nSeiken: Psycho Calibur\n\nShin Onigashima (Disk 1)\n\nShin Onigashima (Disk 2)\n\nSmash Ping Pong\n\nSoccer\n\nSolomon no Kagi\n\nSuishō no Dragon\n\nSuper Boy Allan\n\nSuper Lode Runner\n\nSuper Lode Runner II\n\nSuper Mario Bros.\n\nSuper Mario Bros. 2 (different from US version)\n\nSword of Kalin\n\nSilviana\n\nTama & Friends: Great 3rd Street Adventure\n\nTanigawa Kōji no Shōgi Shinan II\n\nTanigawa Kōji no Shōgi Shinan II – Shinban\n\nTantei Jingūji Saburo: Kiken na Ninin (first part)\n\nTantei Jingūji Saburo: Kiken na Ninin (second part)\n\nTantei Jingūji Saburo: Shinjuku Chūō Kōen Satsujin Jiken\n\nTarot\n\nTennis\n\nTime Twist: Rekishi no Katasumi de… (first part)\n\nTime Twist: Rekishi no Katasumi de… (second part)\n\nTitanic Mystery (Ao no Senritsu)\n\nTobidase Daisakusen\n\nTopple Zip\n\nTransformers: The Headmasters\n\nTwinBee\n\nUltraman: Kaijū Teikoku no Gyakushū\n\nUltraman 2: Shutsugeki Katoku Tai\n\nUltraman Club: Chikyū Dakkan Sakusen\n\nVolleyball\n\nVs. Excitebike\n\nWardner no Mori\n\nWinter Games\n\nWrecking Crew\n\nXevious\n\nYōkai Yashiki\n\nYume Kōjō: Doki Doki Panic\n\nYū Maze\n\nYūshi no Monshō\n\nYūyūki (first part)\n\nYūyūki (second part)\n\nZanac\n\nThere are probably mistakes on this page. Sorry.\n\nThere are so many topics to discuss. It would be very difficult to cover 100%. Let’s briefly mention a few of the things I forgot to mention.\n\nMultiplication and Division\n\nSNES has hardware to perform multiplication and division. Actually, it has 2 ways to do multiplication. You can look at my EasySNES code to find examples of these (link below, search for multiply: and divide:). They are a little slow, so you can’t expect to do this 100x a frame. You have to wait a several cycles before you get a result for the regular multipy and divide functions (see the NOP opcodes, which do nothing but wait).\n\nIf you aren’t using Mode 7, there is a second multiply function (signed) which is much faster. I need to rewrite that function (TODO). But the regular Multiply function works fine.\n\nhttps://github.com/nesdoug/SNES_00/blob/master/easySNES.asm\n\nAny other higher level math will have to be done with LUTs (look up tables), precalculated byte arrays.\n\nDevelopment Cart\n\nI have a Super Everdrive, made by Krikzz, from Ukraine. And, ooh, they even have one that supports the SuperFX chip. I wish I had that one.\n\nhttps://krikzz.com/store/home/54-fxpak-pro.html\n\nWell, this one is over $200 US, but the basic model is less than $100, and it is well worth it. It works great. It uses a MicroSD card to hold the game ROMs.\n\nMode 7\n\nThis is the big enchilada, but I haven’t quite figured out this mode. Especially, setting up a tool chain for editing. Mode 7 can stretch and zoom and rotate. Many of the coolest SNES games use this in some way. It’s just currently above my skill level.\n\nI do plan to work on this in the future. I wrote a tool called M8TE which can import an image to Mode 7 and create mode 7 maps.\n\nIRQ Timers\n\nThis is for timing mid screen events. You should try to use HDMA instead. If all 8 HDMA channels are being used, you could do a 9th thing with IRQ timers.\n\nYou need to enable IRQ timers (probably just the V timer). and CLI to enable IRQs on the CPU. And you need to add code to the IRQ handler. Once set, the counter will trigger an IRQ signal once the PPU reaches a specific scanline. H counter would fire an IRQ signal every scanline, and you probably don’t want that.\n\nEnhancement Chips\n\nAnother thing that is a bit over my head. The SA-1 chip is just a much faster 65816 chip, and that might be the easiest to use.\n\nSome chip names = DSP1, DSP1A, DSP1B, DSP2, DSP3, DSP4, GSU1 (aka MarioChip1 aka SuperFX), GSU2, GSU2-SP1, OBC1, SA-1, S-DD1, S-RTC, SPC7110, ST010, ST011, ST018, CX4.\n\nSome of the functions they do…\n\ndecompression code\n\ntrigonometry functions\n\nimage zooming and rotation\n\nconverting bitmaps to tiles\n\ndrawing vector graphics, triangles\n\nreal time clock\n\nenemy AI functions (probably wouldn’t be useful to you)\n\n.\n\nThe cool chip is the SuperFX chip (GSU). That’s what StarFox used. It would be nice if I could figure it out, and explain it. But, I can not.\n\nOther Modes\n\nHi resolution. Modes 5 and 6 are double horizontal resolution. They can also, optionally, do an interlaced mode which doubles vertical resolution. Very few games used hi resolution.\n\nOffset per tile Modes 2 and 4. I need to investigate these a bit more. I don’t want to put incorrect information here.\n\nSRAM\n\nFor LoROM, SRAM is mapped to banks $70–$7D in the $0000-$7FFF addresses. And also in the $FE-$FF banks in the $0000-$7FFF addresses. (7e and 7f banks are the WRAM, so that couldn’t be used for SRAM). That gives a total possible 512kB SRAM (battery backed save RAM).\n\nHiROM, as usual, is completely different.\n\nhttps://en.wikibooks.org/wiki/Super_NES_Programming/SNES_memory_map\n\nYou will also need to indicate in the header that the ROM is using SRAM. I think that’s mapped to $FFD7, but it’s this line in the header.asm file\n\n.byte $00 ; backup RAM size\n\nThe value is (2^# in kB). 3 is 8kB, 4 is 16kB, 5 is 32kB, 6 is 64kB, 7 is 128 kB, 8 is 256kB, and 9 is 512kB. 0 means 0kB.\n\nOh, and the previous line, mapped to $FFD6, should have the d1 bit (0000 0010) set. To indicate a battery for the SRAM.\n\nOnce you have correctly set this, the emulator should automatically be creating SRAM save files, that persist after power off. You can freely read and write to this anytime, and you can save your game by keeping the progress stored in the SRAM.\n\nSNES main page\n\nSNES programming tutorial. Example 12.\n\nhttps://github.com/nesdoug/SNES_12\n\nWhat is color math? If you’ve ever worked with Photoshop, it would be like blending 2 different layers with the settings on Add or Subtract. In this case the layers are the MAIN screen and the SUB screen. Everything we have done so far deals with the MAIN screen. So let me try to explain the SUB screen.\n\nAll that stuff that the SNES does to produce a picture, putting layers on top of each other, tile priorities, sprite priorities, etc… it does all that TWICE. If you set the settings for the MAIN screen exactly the same as the settings for the SUB screen, it would produce the exact same picture TWICE… with 1 difference. The main screen uses color index zero as the backdrop color (any pixel that is transparent), and the sub screen uses the “fixed color” as the backdrop color (register $2132).\n\nYou would never see the SUB screen, unless you turned on the color math registers, which would then blend the 2 pictures together, using either addition or subtraction. And then there is an optional halving step after that. Each pixel on the screen, the R values are added or subtracted, and the G value, then the B value. That value is clamped to the max and min without overflow. (each RBG value is 0-31)\n\nLet’s say we have it set to ADD. And the main screen pixel is gray 15,15,15, and the sub screen pixel is dark red 10,0,0. The final pixel would be 25,15,15.\n\nIf we added the HALF option, each value would shift right once (rounding down), giving a final pixel of 12,7,7.\n\nIf we set the color math to SUBTRACT (no halving), the final pixel would be 5,15,15. The RGB values of the sub screen are subtracted from the RBG values on the main screen.\n\nIf we added the HALF option, each value would shift right once (rounding down), giving a final pixel of 2,7,7.\n\nNote, any pixel in the sub screen that is transparent will not be halved.\n\nThe main use for Color Math is for transparency effects. You will want Adding and Halving. That would equally blend the main and sub screen.\n\nThe least useful setting is the subtract and halving. That would just produce a very dark picture, and almost no games used this.\n\n.\n\nThere is a completely different kind of color math operation, that uses ONLY the fixed color. That color is applied to the entire MAIN screen, and if halving is set, it will work for the whole screen. If you set the fixed color register to green, and had the color math set to ADD, it would add a green tint to the screen.\n\nThe fixed color register $2132 is weird. The wiki example suggest writing each color separately to it (3 writes for R,B, and G). However, you could set them all to a specific value with 1 write. Such as LDA #$E0, STA $2132 would set all fixed colors to zero.\n\nBefore we dive into the code, here’s a video. You can probably skip most of this video, which goes into too many details about how the 2 different screens are generated.\n\nExample ROM\n\nI put BG1 on the main screen (gray rocks) and BG2 on the sub screen (color bars).\n\nNo effect. Color Math disabled.\n\nJust the Sub screen. (seen by setting the “clipping always to black” bits in the color math logic, and adding the sub screen).\n\nNote, the top left is black (non-zero index). The bottom left is zero index (transparent). The sub screen will show the “fixed color” (register 2132) where there is transparent. Right now the fixed color is black. Color halving will not work for a transparent pixel on the sub screen. If you notice, the bottom left square will not change at all for these examples, even when halving is indicated.\n\nColor Math Adding.\n\nColor Math Adding and Halving.\n\nColor Math Subtracting.\n\nColor Math Subtracting and Halving.\n\nFixed color only (red at 50%), Color Math Adding.\n\nExample Code\n\n$2130 ccmm--sd cc = main screen black if... * --mm---- = prevent color math if... * ------0- = fixed color ------1- = sub screen d is for an unrelated thing * 00 => Never 01 => Outside Color Window only 10 => Inside Color Window only 11 => Always $2131 shbo4321 0------- add 1------- subtract -0------ normal -1------ result is halved b = backdrop, o = sprites, 4321 = layers enabled for color math $2132 (fixed color) bgrccccc b/g/r = Which color plane(s) to set the intensity for. ccccc = Color intensity.\n\nSo let’s go over each examples.\n\n1- no effect, turn off color math\n\nlda #$30 ; = off sta CGWSEL ; $2130 ;and make sure fixed color is black lda #$e0 ; RGB, value = 0 sta COLDATA ; $2132\n\n2- adding\n\nlda #$02 ; color math with subscreen sta CGWSEL ; $2130 ;adding, not half, affect all layers lda #$3f sta CGADSUB ; $2131\n\n3- adding and half, same as last one, just add one bit to the 2131 write\n\n;adding, half, affect all layers lda #$7f sta CGADSUB ; $2131\n\n4- subtracting\n\nlda #$02 ; color math with subscreen sta CGWSEL ; $2130 ;subtracting, not half, affect all layers lda #$bf sta CGADSUB ; $2131\n\n5- subtracting and half. Same as last one, but add one bit to the 2131 write\n\n;subtract, half, affect all layers lda #$ff sta CGADSUB ; $2131\n\n6- fixed color only\n\n;turn on color math, fixed color mode lda #$00 sta CGWSEL ; $2130 ;adding, not half, affect all layers lda #$3f sta CGADSUB ; $2131 ;set the fixed color to red 50% lda #$2f ;red at 50% sta COLDATA ; $2132\n\nWe could have also set half mode.\n\n7- see just the sub screen. We did this by setting the “always clip main screen to black” bits in 2130, and then adding the sub screen to the now completely black main screen.\n\nlda #$c2 ;= clip main always to black sta CGWSEL ; $2130 ;adding, not half, affect all layers lda #$3f sta CGADSUB ; $2131\n\nOther examples\n\nColor math only affects some sprites. Only sprites that use palettes 4-7 are affected by color math. That is why Mario (and the little ghosts) are solid.\n\nWindowing can affect where the color math applies. With HDMA adjusting the window, you can make some cool effects.\n\nTint the whole screen (adding a fixed color)… actually, upon further investigation, this is subtracting, which makes the screen slightly darker than the original. Also, the COLOR MATH is not in fixed color mode, it’s in subscreen mode, but NOTHING is enabled on the subscreen, so the subscreen is filled with the backdrop color (which for the sub screen is the fixed color). I guess that works too.\n\nSmooth Transparencies (add and halving). This is the most common transparency effect on the SNES.\n\nSparkster, the water.\n\nAnd creating shadows (subtracting) Mortal Kombat II. It’s hard to tell, but their shadows are created by color math subtraction. You could also give the appearance of clouds moving overhead by subtracting a cloud shape and having it scroll.\n\nLinks.\n\nhttp://www.romhacking.net/documents/428/\n\nhttps://wiki.superfamicom.org/transparency\n\nSNES main page\n\nSNES programming tutorial. Example 11.\n\nhttps://github.com/nesdoug/SNES_11\n\nHDMA is a way to write to PPU registers while the screen is drawing. You can change values at specific scanlines, to create unique effects.\n\nThe H is for H-Blank. Remember before, when we talked about V-blank (vertical blank), where the PPU isn’t doing anything for a short while after drawing each screen? Well, it also pauses a VERY SHORT time after drawing each horizontal line. Just long enough for the 8 HDMA channels to quickly change a register or send data, before the screen goes to write the next line.\n\nThey work in order, 1,2,3,4,5,6,7,8. They can all write 1 thing (1,2 or 4 bytes) per line. Or you can set them to wait a specific number of lines before changing a value.\n\nHDMA uses the same registers as the DMA registers, and you shouldn’t use both at the same time. You should write zero to HDMA enable ($420c) before performing a DMA. Because the oldest revision of the SNES has a bug where it can crash if they both happen at the same time. Or, just make sure they aren’t used at the same time.\n\nHere’s an interesting video on DMA and HDMA.\n\nExamples\n\nHere’s some things you can do with HDMA.\n\nChanging the BG color with HDMA, to create a color gradient.\n\nChanging the Window (there are 2 windows) with HDMA, to block off portions of the screen. The windows have left and right registers, which need to be written every scanline to create these shapes.\n\nMode 7 parameters. (lots of registers to change hundreds of times a frame).\n\n.\n\nHow HDMA works\n\nhttps://wiki.superfamicom.org/registers\n\n(for this link, scroll down to 43×0)\n\nWhen you look at the HDMA registers, it looks like you need to put MORE values, but you don’t need to write to them all. Let’s go over each register.\n\nFor channel 0.\n\n4300 – yes\n\n4301 – yes\n\n4302-4 – yes\n\n4305-6 – no\n\n4307 – yes, only if using Indirect Mode.\n\n4308-a – no\n\n4300 - Control Register. da---ttt\n\nD=direction, probably want 0, from CPU to PPU.\n\nA=HDMA mode. 0 for direct, 1 for indirect. More on this later.\n\nTTT = transfer mode, which will vary by which register we use.\n\n000 => 1 register write once (1 byte: p) 001 => 2 registers write once (2 bytes: p, p+1) 010 => 1 register write twice (2 bytes: p, p) 011 => 2 registers write twice each (4 bytes: p, p, p+1, p+1) 100 => 4 registers write once (4 bytes: p, p+1, p+2, p+3) 101 => 2 registers write twice alternate (4 bytes: p, p+1, p, p+1) 110 => 1 register write twice (2 bytes: p, p) 111 => 2 registers write twice each (4 bytes: p, p, p+1, p+1)\n\n4301 – the PPU destination register. 21xx. So if you write $22 here, the HDMA will write to the $2122, the CGRAM Data Register.\n\n4302-4 – the address of the HDMA table. 2=low, 3=middle, 4=upper/bank #.\n\n4307 – if using Indirect HDMA, this is the bank # of the Indirect Addresses.\n\nAnything marked “no”, don’t touch them. They are used by the HDMA hardware.\n\nThen you write the channel (bitfield, each bit represents a channel, 1 for ch0, 2 for ch1, 4 for ch2, 8 for ch3, etc) to $420c, the HDMA enable register. Presumably, you would do this step during v-blank or during forced blank. I think it will misbehave for 1 frame if you turn HDMA on mid-frame.\n\n.\n\nOK, so we are pointing the HDMA registers to a table (byte array). For a direct mode, the table would be a scanline count, then (depending on the TTT mode) 1,2, or 4 bytes to be written. Then another scanline count, then more bytes. Scanline count, bytes. Scanline count, bytes. Etc, until it sees a zero in the scanline count slot. From my own examples…\n\nH_TABLE6: .byte 32, $0f .byte 32, $1f .byte 32, $2f .byte 32, $4f .byte 32, $6f .byte 32, $9f .byte 32, $ff .byte 0 ;end\n\nThat reads 32 lines, value $0f. 32 lines, value $1f. 32 lines… etc down to the terminating 0. One interesting thing is that the $0f is written immediately at the very top of the screen. THEN it waits 32 lines.\n\nHere’s another example, when the transfer mode is “1 register write twice”.\n\nH_TABLE2: .byte 10, 0, 0 .byte 10, 1, 0 .byte 10, 2, 0 .byte 10, 3, 0 .byte 10, 4, 0 .byte 10, 5, 0 .byte 10, 6, 0 .byte 10, 7, 0 .byte 10, 8, 0 .byte 10, 9, 0 ...etc... .byte 0 ;end\n\n10 is the scanline count. Then 2 bytes to write. Then 10 scanline count. Then 2 bytes. Etc.\n\nIndirect Mode\n\n43×0 register, we can set it to Indirect. Only with indirect do you need to write to 43×7, the bank of the indirect address. The table will always be sets of 3s. First the scanline count, then an indirect address (ie. pointer) to where our data is. I wrote the HDMA table like this…\n\nH_TABLE5: .byte 8 .addr $1000 .byte 8 .addr $1002 .byte 8 .addr $1004 .byte 8 .addr $1006 .byte 8 .addr $1008 ...etc... .byte 0 ;end\n\nThe .addr directive outputs a 16 bit value, low byte then high byte. I think you could have also used the .word directive. So, 8 is the scanline count, then an indirect address. Our bank byte is $7e, so the first one points to WRAM $7e1000. The second one points to $7e1002. Etc.\n\nOne of the advantages of the indirect system is that you can have a repeated pattern that changes.\n\nI had copied the Indirect Table to $7e1000. It looks like this.\n\nIND_TABLE: .byte 0, 0 .byte 3, 0 .byte 6, 0 .byte 7, 0 .byte 8, 0 .byte 7, 0 .byte 6, 0 .byte 3, 0 .byte 0, 0 .byte $fd, 0 .byte $fa, 0 .byte $f9, 0 .byte $f8, 0 .byte $f9, 0 .byte $fa, 0 .byte $fd, 0 .byte 0,0\n\nAll of these are values to be written with HDMA to a PPU register. In this case, a horizontal scroll register, which is write twice (low then high bytes).\n\nThis is example 3. I am also shuffling these values every 4 frames, which causes the movement of the the sine wave.\n\nExample Code\n\nNo effect. HDMA is turned off by writing zero to $420c.\n\n.\n\n.\n\nExample 1. Changing the BG color.\n\nI’m actually setting up 2 separate HDMA transfers. First to set the CG address to zero. Second to write 2 bytes to change the #0 color. You have to rewrite the address each time, because it auto-increments when writing a color.\n\nstz $4300 ;1 register, write once lda #$21 ; CGRAM Address sta $4301 ;destination ldx #.loword(H_TABLE1) stx $4302 ;address lda #^H_TABLE1 sta $4304 ;address lda #2 sta $4310 ;1 register, write twice lda #$22 ; CGRAM DATA sta $4311 ;destination ldx #.loword(H_TABLE2) stx $4312 ;address lda #^H_TABLE2 sta $4314 ;address lda #3 ;channels 1 and 2 sta HDMAEN ;$420c\n\nAnd we have 2 HDMA tables (see the example code). Each time we are waiting 10 scanlines between changes. Each time, adding a little more red.\n\n.\n\n.\n\nExample 2. Changing window 1 left and right positions.\n\nA window punches a hole in one or more layer. There are 2 windows, but we only need 1 for this example. The only parameters you can set are left and right (and inverse, and combinations with the other window). But with HDMA, you can adjust the window parameters as the screen draws, and draw a shape. Circle shapes are very popular.\n\nIf the left position is > than the right position, the window will not appear. That is what we are doing for the top and the bottom of the screen. You also have to tell it which layers are affected with the $212e (window for main screen) and with the $2123-5 registers.\n\nI’m using 2 HDMA channels, and writing 1 byte to 1 register. To 2126 and 2127.\n\nlda #1 ;windows active on layer 1 on main screen sta TMW ;$212e lda #2 ;window 1 active on layer 1 sta W12SEL ;$2123 stz $4300 ;1 register, write once lda #$26 ;2126 WH0 sta $4301 ;destination ldx #.loword(H_TABLE3) stx $4302 ;address lda #^H_TABLE3 sta $4304 ;address stz $4310 ;1 register, write once lda #$27 ;2127 WH1 sta $4311 ;destination ldx #.loword(H_TABLE4) stx $4312 ;address lda #^H_TABLE4 sta $4314 ;address lda #3 ;channels 1 and 2 sta HDMAEN ;$420c\n\n(This could have been done with 1 channel with a 2 register transfer mode).\n\nNote… If the scanline count is >128 (not including 128), it signals a series of single scanline writes. You can omit the scanline count for a number of lines (ie. subtract 128 from the scanline count number).\n\n.byte 60, $ff ;first we wait 60 scanlines .byte $c0 ;192-128 = 64 lines of single entries .byte $7f ;1st write value .byte $7e ;2nd write value .byte $7d ;3rd write value .byte $7c ;4th write value ...etc...64 lines. .byte 0 ;end\n\nIt waits 1 scanline between each write.\n\nEach line, I am moving the left position and right position further apart, and then closer together, which forms a diamond shape.\n\n.\n\n.\n\nExample 3. Changing BG1 horizontal scrolling position.\n\nThis was already discussed above, in the Indirect Mode section. We are using a sine wave pattern to create a wave in the picture, writing twice to 1 register, the horizontal scroll of BG1.\n\nI wanted to include at least 1 example of indirect mode. I copied the value table to the RAM, so I was able to change the values to make the pattern move. See the Shuffle_f3 function in the HMDA3.asm file. The table of Indirect Addresses points to the RAM where our actual values are stored.\n\nThis example would have been even nicer if we wrote new values every scanline. Currently, we are only changing values every 8 scanlines (to make the table simpler / smaller). Maybe even every 2 scanlines would have been enough.\n\nlda #$42 ;indirect mode = the 0100 0000 bit ($40) sta $4300 ;1 register, write twice lda #$0d ;BG1HOFS horizontal scroll bg1 sta $4301 ;destination ldx #.loword(H_TABLE5) stx $4302 ;address lda #^H_TABLE5 sta $4304 ;address lda #$7e sta $4307 ;indirect address bank lda #1 ;channel 1 sta HDMAEN ;$420c\n\n.\n\n.\n\nExample 4. Changing the Mosaic filter.\n\nThis is the simplest example. A single write to a single register. I haven’t discussed the Mosaic filter before, $2106 . The upper nibble is the mosaic amount (0 = normal, 1 = 2×2, etc up to $f = 16×16), and the lower nibble says which layers are affected. Sprites are never affected.\n\nstz $4300 ;1 register, write once lda #$06 ;mosaic sta $4301 ;destination ldx #.loword(H_TABLE6) stx $4302 ;address lda #^H_TABLE6 sta $4304 ;address lda #1 ;channel 1 sta HDMAEN ;$420c\n\nIt waits 32 lines before increasing the mosaic value. There are bigger squares at the bottom. You probably wouldn’t use this exact HDMA effect in a game, but it is just an example of what is possible. You can change so many settings, even the BG mode $2105, which layers are active, change the location of a tilemap or tileset. I think you can even write new data to the VRAM (a little bit at a time).\n\n.\n\n.\n\nExample 5. Windows with Color Math.\n\n(the next example page will talk more about Color Math registers)\n\nSome of the coolest effects were done with this combination. We are adding a fixed color to tint the picture, and using the windows to shape the color box. If we made the HDMA table for the window more elaborate, it could be a circle, or any simple shape. We could change the table and make it grow or squish. The windows work the same as before, but we just needed to change the settings so that the window affects color math and nothing else.\n\nlda #$20 ;Window 1 active for color, not inverted sta $2125 ;WOBJSEL - window mask for obj and color lda #$10 ;prevent outside color window, clip never, ;add fixed color (not subscreen) sta $2130 ;CGWSEL - color addition select lda #$3f ;color math on all things, add, not half sta $2131 ;CGADSUB - color math designation\n\nWe are setting the color math to use only the fixed color, and not the subscreen. So, we need to set the color of the fixed color register $2132.\n\nlda #$8f ;blue at 50% sta $2132 ;COLDATA set the fixed color\n\nThis register (fixed color) is a bit complicated, I will explain it more on the next page, but the upper bits are the color selectors, and the lower 5 bits are for value. 8 is blue and $0f is for 15 (out of 31), or just above 50%. With color math addition (with the fixed color) turned on, it would color the entire screen blue. But, our HMDA window blocks out the effect for the top, sides, and bottom of the screen, leaving a blue box in the size/shape of the painting.\n\n.\n\n.\n\nHere’s a YouTube video of these examples (video is old, doesn’t include the 5th effect)\n\n.\n\nIMPORTANT NOTE – the top most scanline is never drawn. It’s blank. At the end of that 0th scanline, it sends the first value of the HDMA tables, and then it sets the scanline count. The HDMA table looks like the scanline count is before the value to send, but it does it the opposite… it sends the value and then it waits. That means that the first value effects the very top of the visible screen.\n\nThe HDMA table resets at the end of v-blank. Automatically. Even if it didn’t complete the table because it was longer than the number of scanlines on screen, it jumps back to the 0th item on the HDMA table, and continues the next frame from the top of the table.\n\nAlso, a count of zero terminates the HMDA for the rest of the frame, but it still resets again, at the top of the next frame, and keeps going. If there is a value listed after the zero, it isn’t sent.\n\n.\n\nLinks.\n\nhttps://wiki.superfamicom.org/dma-and-hdma\n\nhttps://wiki.superfamicom.org/grog’s-guide-to-dma-and-hdma-on-the-snes\n\nhttps://sneslab.net/wiki/HDMA\n\n.\n\nSNES main page\n\nThis is a lesson on using SNESGSS to make SNES music.\n\nBefore you read this… I have made improvements to SNESGSS, the newest version has a Q at the end, and it has a different music.asm file. See this link for more info.\n\nSNES Music 2\n\n.\n\nNOTE – If SNESGSS editor stops playing the music correctly (silences some or all the notes), the issue is that there is too many things loaded to fit in the ARAM. This could happen unexpectedly, because adding to the song editor might overflow the available RAM, without warning. Click over to INFO and it will probably say there is no memory left. You will have to shorten the song or remove unused samples.\n\n.\n\nSNES programming tutorial. Example 10.\n\nhttps://github.com/nesdoug/SNES_10\n\nHere’s an interesting video on the SPC700 and SNES audio.\n\nToday, we are going to talk about SNES music. The APU (Sony SPC700) is a different chip entirely, and has its own 64k of RAM. At the beginning of our program, we need to load the APU with our SPC file. It is an audio program that runs automatically.\n\nThe APU is connected to an 8 channel DSP (digital sound processor). The song will direct the DSP to play different sound samples at different rates to make tones. If you are familiar with MIDI, it is similar. The samples can be looped or not. The samples are compressed into a native compression called BRR (bit rate reduction).\n\nBRR samples are very large, and you will probably be only able to fit 10-15 samples. Each will have to be edited (perhaps with Audacity) to less than a second each, and at a reduced sample rate. We are going to work with SNESGSS (written by Shiru).\n\nI originally found it here (you might want to look here to get the sample intruments), but don’t use this .exe because it has a bug.\n\nhttps://github.com/nathancassano/snesgss\n\nI patched out the bug, and also added echo functions. You can get that version here…\n\nhttps://github.com/nesdoug/SNES_00/tree/master/MUSIC\n\nand also grab the music.asm file. You will need it.\n\n.\n\nSNESGSS prefers to have 16-bit MONO WAV samples at sample rate 32000 or 16000. I have tried 8000, but usually the sound quality is too bad at 8000. 8000 might be ok for a bass sample.\n\nThere seems to be a bug in Audacity, when you resample to another rate (Tracks/Resample), it doesn’t actually change the project sample rate, nor will it save the project at that sample rate. What you need to do is Open the WAV file in Audacity, Select All and COPY it. Then Open a NEW PROJECT, and change the project’s sample rate (at the bottom left) to 16000. Then PASTE it. Now it will save at the correct sample rate.\n\nRecording at the desired rate has no problems. 16000 seems to be a nice sweet spot on audio quality and file size.\n\nSNESGSS also suggests tuning the samples to B +21 cents. I did not. I left all my samples at C. They are not in tune with the samples provided with SNESGSS, which I did not use. I think those are tuned to B +21. The reason behind the unusual tuning is to make it easier to make looped samples without clicks. BRR format is forced to be blocks of 16 samples, so a multiple of 16 samples (such as 256 samples per wave cycle) at a sample rate of 32000 (or 16000) samples per second works out to B +21.\n\nBut, feel free to use whatever tuning is easiest for you.\n\nHit the WAV button near the middle of the screen to load your samples. Setting the envelopes similar to this sounds good to me (15, 1, 7, 16). If you managed to loop the sample perfectly, you may prefer to leave the last envelope setting (SR) at 0, for a tone that can continue infinitely.\n\nYou can press the 2x or 4x buttons if you run out of room for files, to downsample by half.\n\nTo loop, click the “On” button and type in the loop start (FROM) and loop end (TO) numbers. Note – BRR sample length needs to be a multiple of 16, and the loop start and end points need to be a multiple of 16. SNESGSS doesn’t tell you that… you will probably have to use a calculator to calculate a multiple of 16 and type exact numbers in.\n\nI wouldn’t mess with the volume or EQ settings. That is something you should have done in Audacity while editing. Just keep in mind that the SNES tends to weaken the upper range and make bright sounds feel dull. You might have to do a treble boost for the lead instruments.\n\nThis tracker will convert our samples to BRR, but not until your final export. Unfortunately, you can’t import BRR samples to it from other sources. And you can’t export BRR samples, although you could export an SPC and use spc_decoder.exe from BRRtools to extract the BRR samples from the SPC.\n\nHere you can check the size of all the files. Obliviously, you can’t have a bigger SPC file than 64k, the size of the APU RAM.\n\nI should note, that we only load 1 song in the APU RAM at a time. Staring a new song will load a new song (over the previous song), so that only one song is loaded at any time. That should give you a little flexibility on overall size.\n\nHere is the main editor. You type Z-M keys for lower octave, Q-P keys for upper octave. You can change the octave by pressing the octave button. So, this is a standard tracker, it goes downward as the song plays.\n\nYou can toggle channels on and off by clicking on the word “channel 1”, etc. You can divide things into sections. Press the spacebar to mark the end of a section. Then you can repeat the previous section with an R00 command.\n\nThe order of things is Note, Instrument, Volume 0-99, and Special effects. The SP column is for song speed (smaller is faster). You can scroll up and down with PgUp and PgDn keys, and also Home and End goes to the next section.\n\nCTRL+End marks the end of the song, and CTRL+Home marks the loop back point.\n\nYou can import Famitracker and MIDI files (notes only), but I haven’t tried.\n\nOn this page, you can mark a song as a “Sound effect”.\n\nOnce the songs are done, you File/Export. And that will produce several files.\n\nspc700.bin is our main SPC file. It holds the program and the samples and the sound effects data.\n\nmusic_1.bin (one file per song) is the song data.\n\nsounds.asm and sounds.h we don’t need. Don’t include them. This was for a different assembler / C compiler. You might want to look at it to find the value of each sound effect.\n\n.define SFX_DING 0\n\n…tells us that the DING sound effect is called with the value zero.\n\n.\n\nhttps://github.com/nesdoug/SNES_10/tree/master/MUSIC\n\nI changed the asm code in mid 2021, make sure you have the latest music.asm so it can handle SPC files larger than 32k. Here’s how we can include the file accross 2 different LoROM banks.\n\n(ca65/ld65 linker specific commands).\n\nIf the SPC file is larger than 32k, you can add arguments to the .incbin command to split the file.\n\n.incbin “MUSIC/spc700.bin”, 0, 32768\n\nand\n\n.incbin “MUSIC/spc700.bin”, 32768\n\nThe top one says copy 32768 bytes starting at 0. The second one (with 1 number) says to include from 32768 to the end of the file. The newest version of SPC_Init can copy the entire thing to the SPC RAM (even across multiple banks).\n\n.\n\nCODE\n\nLet’s go over the music.asm file, which you should have grabbed from one of my example folders. I had to modify the original code to work with ca65.\n\nSPC_Init – should be called at the start of the game, with interrupts off (NMI, IRQ, controllers). With AXY16 you load A with the address of the of SPC file (spc700.bin) and X with the bank of the SPC file, and JSL to SPC_Init.\n\nBy the way, running this function takes a long time. It could take 2 seconds or more.\n\nSPC_Load_Data is an internal function, for loading data to the APU RAM.\n\nSPC_Play_Song loads a song (data) to the APU RAM and then starts playing it. This also should be done with interrupts off. Note that this system only loads one song at a time to the APU RAM. If you have a song in and then load another song, it overwrites the first song.\n\nWith AXY16 load A with the address of the song data (like music_1.bin) and load X with the bank of the song, then JSL to SPC_Play_Song. Once it’s done, it will begin playing the song automatically.\n\nSPC_Command_ASM is an internal function. It’s what sends signals to the APU.\n\nSPC_Stereo is to set mono (default) or stereo audio. Load A (8 or 16) with 0 for mono, 1 for stereo. Audio channels can be panned left or right.\n\nSPC_Global_Volume is to set the max volume, 0-127. It can also be used to fade in or fade out. One of the variables is called speed, and it is the step value, to go from previous volume to the new volume. 255 is the default speed, which is instant change (any value >= 127 would be instant). Speed of 7 seems nice for a fade, and will take 2 seconds to transition. Don’t give it a speed of zero, the volume won’t change.\n\nAXY8 or AXY16, load A with the speed of volume change (1-255), and load X with the new volume (0-127), then jJSL SPC_Global_Volume.\n\nThe SNES has a master volume variable, which affects all channels. That’s what this sets, and doesn’t affect individual channel volumes.\n\nSPC_Channel_Volume sets the max volume for an individual audio channel. AXY8 or AXY16, load A with the channels and load X with the volume (0-127) and the JSL to SPC_Channel_Volume. I’m not sure what circumstances I would use this. Maybe to silence or dim a lead instrument, for a change in dramatic tone.\n\nNote, the channel here is a bitfield, with each bit representing a channel.\n\n0000 0001 = channel 1\n\n0000 0010 = channel 2\n\n0000 0100 = channel 3\n\n0000 1000 = channel 4\n\n0001 0000 = channel 5\n\n0010 0000 = channel 6\n\n0100 0000 = channel 7\n\n1000 0000 = channel 8\n\nFor example, LDA #$42 (0100 0010) would effect channels 2 and 7.\n\nMusic_Stop stops the song. JSL here.\n\nMusic_Pause will pause and unpause the song (and not effect the sound effects that are playing). Load A (8 or 16) with 1 for pause and 0 for unpause, then JSL here.\n\nSound_Stop_All stops all sounds, song and sound effects. JSL here.\n\nSFX_Play_Center plays a sound effect, pan center. With AXY8 or AXY16, load A with the # of the sound effect, load X with the max volume of the sound effect (0-127), and load Y with the channel (0-7), the sound effect should play. Channel needs to be higher than the max channel for the song playing. Therefore, you must reserve some empty channels in the song, if you want sound effects to play with it.\n\nSFX_Play_Left, is the same, but pan left.\n\nSFX_Play_Right, is the same, but pan right.\n\nSFX_Play is an internal function that the 3 above functions call.\n\nStreaming has been removed. See the 13th SNES example page for echo functions.\n\nSNES Music 2\n\nEXAMPLE CODE\n\n;copy the music code and samples to the Audio RAM AXY16 lda #.loword(music_code) ldx #^music_code jsl SPC_Init ;turn on stereo sound AXY16 lda #$0001 jsl SPC_Stereo\n\n…and at the bottom we have\n\n.segment \"RODATA6\" music_code: .incbin \"MUSIC/spc700.bin\" music_code_end:\n\n.\n\nThen I load the song, and start it playing (before I turn on NMI interrupts).\n\nAXY16 lda #.loword(song1) ldx #^song1 jsl SPC_Play_Song\n\nBy the way “.loword()” gets a 16 bit value from a 24 bit label. ^ gets the bank of a label.\n\n.\n\nNow I just need to set up a trigger for the sound effect. We already have that yellow block triggering the screen to go dark, so I just snuck in a little more code there. I didn’t want it re-starting the same sound effect over and over and over each frame, so I added a variable to remember the LAST FRAME, if we were over the yellow block, and skip a trigger in that case.\n\ncmp bright_var2 ;compare to last frame beq Past_Yellow ;skip if last frame is true AXY8 lda #0 ;= ding ldx #127 ;= volume ldy #6 ; = channel jsl SFX_Play_Center\n\nOur song plays from channels 1-4 (ie. 0-3), and our sound effect uses 2 channels, so we could have set this to 4,5, or 6. This function is zero based index, ie. values 0-7. So 6 means it will play on channels 7 and 8. Sorry for flip flopping between zero based and one based numbers. Hope this isn’t too confusing.\n\nHowever, if we loaded X with 0,1,2, or 3. It would not play. If we loaded X with 7, only the first channel of the sound effect would play.\n\nHere’s a picture of the demo again. It looks the same as the previous example.\n\n.\n\nhttps://wiki.superfamicom.org/spc700-reference\n\nhttps://wiki.superfamicom.org/bit-rate-reduction-(brr)\n\n.\n\nThere are other programs for getting music onto a Super Nintendo.\n\nYou could use SNESMOD with OpenMPT. I still need to research this more before I can recommend it. I have heard that a version of SNESMOD by AugustusBlackheart and KungFuFurby is good. Sorry I can’t be more informative here.\n\nAnother program, BRRTools, can convert audio files to BRR. I haven’t used it, but the SNESGSS tool uses the same code. It says you can turn BRR samples into WAV and WAV into BRR. This could be a way to use existing BRR samples in our SNESGSS projects (by using this tool to convert them into WAV files first).\n\nhttps://www.smwcentral.net/?p=section&a=details&id=17670\n\n.\n\nUpdate 2023. After some test, the SNES goes through the decay phase of ADSR much faster than I expected. (much faster than the SNESGSS envelope graph shows). With SL=7, it skips it entirely. SL=6 is still nearly instant. See the results of my own testing.\n\nADSR Tests\n\n.\n\nSNES main page\n\nSNES programming tutorial. Example 9.\n\nhttps://github.com/nesdoug/SNES_09\n\nI made this with SPEZ version 2. Although SPEZ version 3 is out, it has different sprite code (see example in the SPEZ folder).\n\nThis time we are going to make a collision map, and make a sprite collide with the background. The actual graphics are not that important.\n\nI took some pictures of some blocks (and a sketch of a cube with eyes) and resized them in GIMP to 16×16 sized blocks. Then I imported everything into my M1TE tool. From there I made a 3 metatiles, green, red, and yellow. Red will be the collision blocks (1 = wall). This is what it looks like in M1TE.\n\nYou can save the map screen as a image (File/Export Image). That was then loaded into Tiled Map Editor as the tileset.\n\nTiled Map Editor is a free game design tool. The entire purpose of this is to export a .csv file of our collision map… which is that collision array I was talking about.\n\nThe CSV file exported from Tiled.\n\nI added some .byte directives so it can be loaded as a byte array into the asm code. 0 is blank, 1 is red wall, 2 is the yellow square. Now we can .include it into our ASM file.\n\nBut how did I draw the map? Back when I was programming NES games, I had a whole metatile system worked out. I am doing a similar thing here, but I manually typed out each tile needed to construct a block. In metatiles.asm.\n\nMetatiles:\n\n;tile 0\n\n.byte $02, TILE_PAL_0\n\n.byte $03, TILE_PAL_0\n\n.byte $12, TILE_PAL_0\n\n.byte $13, TILE_PAL_0\n\n;tile 1\n\n.byte $04, TILE_PAL_1\n\n.byte $05, TILE_PAL_1\n\n.byte $14, TILE_PAL_1\n\n.byte $15, TILE_PAL_1\n\n;tile 2\n\n.byte $02, TILE_PAL_5\n\n.byte $03, TILE_PAL_5\n\n.byte $12, TILE_PAL_5\n\n.byte $13, TILE_PAL_5\n\nAnd in main, it does a loop, converting each byte of the collision map (HIT_MAP) into 4 screen tiles. And copying them one by one to the VRAM on the map. The key thing is that we again use the HIT_MAP to stop movements of the sprite.\n\nOur code calculates where our guy is on the map, and if we are over a 1, cancel the movement. That makes him collide with the red walls.\n\nHow does it do that? Let’s go over the code. So our byte array has each block 16×16. We need to divide x and y pixel coordinates by 16 (the same as shift right 4x). But we also need to multiply the y by 16 to get to the correct row in our array, which cancels out the divide 16. So the algorithm is (Y & 0xf0) + (X >> 4). If we look at that index in the byte array, it will tell us if a point is in a wall or not. This is the code, with X and Y registers holding the X and Y coordinates…\n\ntya and #$f0 sta temp1 txa lsr a lsr a lsr a lsr a ora temp1 tax lda HIT_MAP, x rts\n\nI handled each direction separately. First do the X move, then see if any of the corners of our sprite are inside a wall. If yes, revert to previous X position. Then do the Y move, see if any of the corners of our sprite are inside a wall. If yes, revert to previous Y position.\n\nThis code would need to be a little more complex if we move more than 1 pixel per frame. If we are moving 2-3 pixels per frame, and the distance to the wall is 1 pixel, we should allow 1 pixel movement toward the wall… and not be stuck 1 pixel away from the wall. So, this code will need to be improved.\n\n.\n\nTouching the yellow square will darken the screen. We are just looking if 1 point (the middle of our guy) is over a 2 in the collision map, and changing the screen brightness variable. Remember that the $2100 register is the screen brightness. I am writing to it every frame, during v-blank. Full brightness is $0f. Half brightness is $07.\n\nIf we were scrolling in a larger world, the collision map would have to be the size of the world. You could have it compressed, and decompress it to the WRAM. You would have to keep track of X and Y movements with 2 byte variables. One thing I would not recommend is trying to read from the VRAM to see what kind of tile you are standing over. The visuals of the level should probably be separate from the collision map.\n\nOne more thing. It wouldn’t be too much trouble to turn this simple example into a platformer. You would just need to add gravity, which is adding a little bit to the Y speed every frame, and then cancelling that if your feet touch the floor. Jumping would be a sudden negative Y speed.\n\nThis is a really cool page that explains collision maps in more detail.\n\nhttp://higherorderfun.com/blog/2012/05/20/the-guide-to-implementing-2d-platformers/\n\n.\n\nTODO – I need to write some code to automate generating metatile tables, or come up with some other kind of BG object system. Especially for a larger world… hand editing data tables will get very tedious.\n\n.\n\nSNES main page\n\nSNES programming tutorial. Example 7.\n\nhttps://github.com/nesdoug/SNES_07\n\nI made a simple Pong demo to show sprite collisions.\n\nI made this with SPEZ version 2. Although SPEZ version 3 is out, it has different sprite code (see example in the SPEZ folder).\n\nWell… I was trying to keep it simple, but I decided to use some of the more complicated code I have previously written. Copied to the library.asm file from some of the EasySNES files. OAM_Spr(copies one sprite to the buffer), OAM_Meta_Spr (copies multiple sprites to the buffer), oam_clear (clears the buffer), Map_Offset (gets an address from a specific x/y coordinate in a map). I did change the return from these functions from RTL to RTS, because all of our code is in the same bank.\n\nI will discuss these functions further below.\n\nCheck_Collision is new. I will discuss that a bit later.\n\nLet’s talk about the process of making this. I made a circle gradient in GIMP for the background, and converted to indexed 4 color (with dithering). Sized 256×192 (it won’t cover the entire screen).\n\nSaved as a PNG. Imported to M1TE.\n\nThen I drew some numbers for BG3, and filled a little on the top and bottom.\n\nClicked the priority checkbox for this map.\n\nSaved all the maps and tiles and palette. Pretty much the same as previous examples of loading a background.\n\nNow I opened SPEZ (my sprite editor) and drew some simple box shapes for the ball and paddle. Saved them as metasprites.asm and saved their tiles (chr) and palette.\n\nEverything is .incbin -ed in the main.asm file. We are loading everything just like the previous examples, with DMAs to the VRAM. One difference is that I wrote a macro for DMAs to the VRAM. This made the code a little easier to read and write. Let’s look at an example…\n\nDMA_VRAM $700, Map1, $6000\n\nThis is the DMA_VRAM macro definition…\n\n.macro DMA_VRAM length, src_addr, dst_addr\n\n;dst is address in the VRAM\n\n;a should be 8 bit, xy should be 16 bit\n\nldx #dst_addr\n\nstx $2116 ; vram address\n\nlda #1\n\nsta $4300 ; transfer mode, 2 registers 1 write\n\n; $2118 and $2119 are a pair Low/High\n\nlda #$18 ; $2118\n\nsta $4301 ; destination, vram data\n\nldx #.loword(src_addr)\n\nstx $4302 ; source\n\nlda #^src_addr\n\nsta $4304 ; bank\n\nldx #length\n\nstx $4305 ; length\n\nlda #1\n\nsta $420b ; start dma, channel 0\n\n.endmacro\n\nSo where it says length, the macro will insert the $700 bytes (not $800, because the screen is only 224 pixels high, so I’m not filling the entire 256 pixel high map). Where it says src_addr, it replaces it with Map1. Where it says dst_addr, it replaces it with VRAM address $6000. All that code could be written in one line.\n\nDMA_VRAM $700, Map1, $6000\n\nDoesn’t this look nicer though? Simple. Elegant. Easy to read. Macros are your friends.\n\nEverything between InfiniteLoop and, somewhere below that, jmp InfiniteLoop is the game loop. Every frame we wait till v-blank. Copy the OAM_BUFFER to the OAM. Print the score to the top of the screen. Read the controllers. Move the paddles if up or down are pressed.\n\nlda pad1 and #KEY_UP beq @not_up @up: A8 lda paddle1_y cmp #$20 ;max up beq @not_up ;too far up bcc @not_up dec paddle1_y dec paddle1_y dec paddle2_y dec paddle2_y @not_up:\n\nThis code is moving both paddles, because this is just example code. You could modify it, so that controller2 moves the paddle on the right. Copy this whole thing, and replace pad1 with pad2, and only move paddle2. Also change the label names, so you don’t have duplicates.\n\nWe are only moving the ball while it is “active”. Press START to make it active, and choose a random direction to go (based on a frame counter).\n\nlda #1\n\nsta ball_active\n\nball_x_speed and ball_y_speed are the directions of the ball. Either 1 or -1 ($ff). Every frame we are adding the speed variable to the position variable. If speed is 1, we add 1 and it moves it to the right 1 pixel.\n\nIf the ball is active, it moves up/down until it reaches the ceiling or floor.\n\n;bounce off ceilings\n\ncmp #$20\n\nbcs @above20\n\n…\n\nlda #1\n\nsta ball_y_speed\n\n;bounce off floor\n\nlda ball_y\n\ncmp #$c7\n\nbcc @ball_done\n\n…\n\nlda #$ff ; -1\n\nsta ball_y_speed\n\nSprite Collisions\n\nIt moves left/right until it reaches the end of the room. But we want it to bounce off the paddles, so we need to check collisions with hitboxes. I wrote this a long time ago (modified slightly). It’s the Check_Collision function in the library.asm file.\n\nSo we need the dimensions and location of the 4 sides of both boxes. That’s 8 numbers, that I copy to these variables…\n\nobj1x, obj1w, obj1y, obj1h\n\nobj2x, obj2w, obj2y, obj2h\n\nx = left side of sprite object\n\nw = width (minus 1), added to x to get the right side\n\ny = top side of the sprite object\n\nh = height (minus 1) , added to y to get the bottom side\n\nI defined some of these with constants at the top of main.asm\n\nBALL_SIZE = 7\n\nPADDLE_W = 7\n\nPADDLE_H = 47\n\nOf course, the x and y values are changing. Those are defined as variables in the zero page (direct page).\n\npaddle1_x, paddle1_y\n\npaddle2_x, paddle2_y,\n\nball_x, ball_y\n\nI copy these to the obj1 obj2 stuff, and then call Check_Collision, which sets the “collision” variable to 0 or 1. If collision is true, we bounce the ball. This collision check is for 8 bit positions only, and assumes that no object goes off the screen at all. The code won’t work right at the very edges of the screen.\n\nHere’s what the collision code is doing, under the hood, in some optimized ASM.\n\nif((obj1_right >= obj2_left) && (obj2_right >= obj1_left) && (obj1_bottom >= obj2_top) && (obj2_bottom >= obj1_top)) return 1; else return 0;\n\n.\n\nPlacing Sprites\n\nEvery frame I DMA the OAM buffer. Then I clear it with Clear_OAM and then rebuild it by writing to either OAM_Spr or OAM_Meta_Spr. The metasprites were made with SPEZ, and exported to the Sprites/metasprites.asm file. It’s a list all the sprites needed to make a metasprite.\n\nThe OAM_Meta_Spr function works like this.\n\nCopy the x position to spr_x, the y position to spr_y, and then load A and X with the address of the metasprite data, and call our function. Remember ^ is for bank number. Like this.\n\nlda paddle1_x\n\nsta spr_x\n\nlda paddle1_y\n\nsta spr_y\n\nA16\n\nlda #.loword(Meta_00) ;left paddle\n\nldx #^Meta_00\n\njsr OAM_Meta_Spr\n\nAnd this will automatically put all the data in the OAM_BUFFER at the correct x and y positions. It also adjusts the high table bit shifting and keeps track of exactly how many sprites have been added (sprid).\n\n*spr_x is 9 bits (uses 2 bytes). If the sprite never leaves the screen, just leave the upper byte of spr_x as zero. If you pass it more than 9 bits, it will ignore the extra bits.\n\nThe ball uses another function, OAM_Spr. This is for putting 1 sprite in the OAM BUFFER. You have to provide all the details of the sprite. Pass the x position to spr_x, the y position to spr_y, the tile # to spr_c, the attributes to spr_a, and set the size with spr_sz. spr_sz needs to be either 0 (small) or 2 (large). Then jsr OAM_Spr.\n\nlda ball_x\n\nsta spr_x\n\nlda ball_y\n\nsta spr_y\n\nlda #2\n\nsta spr_c\n\nlda #SPR_PAL_5|SPR_PRIOR_2\n\nsta spr_a\n\nstz spr_sz ;8×8\n\njsr OAM_Spr\n\nIf you are placing multiple balls on screen, all using the same palette, then you would only need to change the spr_x and spr_y before calling OAM_Spr again.\n\nWriting to the background\n\nThe print_score function always runs during v-blank. It has to, because it is writing to the VRAM. That is why we do it as soon as possible after the jsr Wait_NMI.\n\nI’m using this Map_Offset function (in library.asm) to get the VRAM address of the numbers in at the top of the screen. It wants you to load X with the tile’s x position 0-31 and load Y with the tile’s y position 0-31. If you only have pixel X and Y, just shift right (lsr a) 3 times to get the 0-255 value to 0-31 (tile) for 8×8 tiles.\n\nMap_Offset does some bit shifting to convert that to a VRAM address. It returns A16 = the offset. You add that to the base address (our BG3 map is at $7000).\n\nldx #12\n\nldy #1\n\njsr Map_Offset ; returns a16 = vram address offset\n\nclc\n\nadc #$7000 ;layer 3 map\n\nsta VMADDL ;$2116\n\nand then copying 2 values per number on screen (by writing to $2118-$2119). We are writing with the VRAM increment set to +32. That means that the second write will go below the first one.\n\nlda #V_INC_32\n\nsta VMAIN ;$2115\n\nSome of these values might be hard to understand, like, why are we adding $10 to the points_L? Our tiles for numbers begins at $10.\n\nTry the demo. Press START to get it going.\n\n.\n\nTry to make this into a game by having controller 2 to move the right paddle.\n\nThe ball is a bit slow, though. Moving 2 pixels per frame might be too fast. It would be best to use “fixed point” math, that’s a 16-bit variable for ball speed and position, where the upper byte refers to a pixel position, and the lower byte is a sub-pixel position (and speed). Then we could have 1 1/2 pixel per frame movement.\n\nI wish we had some sound effects too. Maybe a little later for that.\n\nSNES main page\n\nSNES programming tutorial. Example 6.\n\nhttps://github.com/nesdoug/SNES_06\n\n.\n\nWarning – this was made with SPEZ, version 2. Version 3’s default metasprite data breaks the code used in the example because it has 2 extra bytes for flipping the metasprite horizontally and/or vertically. If you use version 3 with the code below, you need to uncheck ‘flip data’. Or, you could use the metasprite code provided with SPEZ v3 in the ‘example’ folder. Or, a third option, you can still download version 2 of SPEZ.\n\nhttps://github.com/nesdoug/SPEZ\n\n.\n\nController reads\n\nThere is a set of registers that can be read like NES registers. Originally, they wanted to make it easy to transition from programming NES games to programming SNES games. They even used the same number $4016 and $4017 (ports 1 and 2). However, you shouldn’t read these. Instead you should turn on the auto-read feature (and also the NMI enable) from register $4200.\n\nWith auto-controller reads set, the CPU be interrupted (soon after the end of each frame) and automatically read all the buttons from both controllers and then store the values at $4218-$421b.\n\n$4218-19 port 1\n\n$421a-1b port 2\n\n(if a multitap for 4 player games installed, 421c-d and 421e-f for controllers 3+4)\n\nThe button order is…\n\nKEY_B = $8000\n\nKEY_Y = $4000\n\nKEY_SELECT = $2000\n\nKEY_START = $1000\n\nKEY_UP = $0800\n\nKEY_DOWN = $0400\n\nKEY_LEFT = $0200\n\nKEY_RIGHT = $0100\n\nKEY_A = $0080\n\nKEY_X = $0040\n\nKEY_L = $0020\n\nKEY_R = $0010\n\nAnd I use these constants as a bit mask (bitwise AND operation) to isolate the buttons.\n\nThe pad_poll function also does some bit twiddling to figure out which buttons have just been pressed this frame.\n\npad1 and pad2 variables tell you which buttons are being pressed.\n\npad1_new and pad2_new tell you which buttons have just been newly pressed this frame.\n\nWe need call pad_poll each frame. How do we know that a new frame has started? That’s where the NMI comes in.\n\nNMI\n\nWhen the screen is on, the PPU spends most of its time drawing pixels to the screen, one horizontal line at a time, one pixel at a time. Starting at the top, it goes left to right and draw a line. Then it jumps down and draws the next line. Etc, etc, until the frame is completed.\n\nWhile it is drawing pixels to the screen, the PPU is busy, you can’t send new data to the VRAM. You can’t send new data to the OAM or the CGRAM (palette) either. After the screen is done drawing, the PPU rests in a vertical blank period for a little bit. During this v-blank period, you CAN access the PPU registers.\n\nIf you turn on NMI interrupts, when the PPU is done drawing to the screen… nearly at the very beginning of v-blank, the PPU sends an NMI signal to the CPU. This happens every frame, which is 60 times a second (50 in Europe). That signal causes the CPU to pause and jump to the NMI vector (an address it finds at $00ffea in the ROM). We have it set to jump to the label called NMI: which is located in the init.asm file. (note, the NMI code needs to be in the 00 bank).\n\nThe NMI code is just this.\n\nbit $4210 *\n\ninc in_nmi\n\nrti\n\n* ; it is required to read this register during NMI\n\n(many game have much more elaborate NMI code than this)\n\nOur main code is waiting for the in_nmi variable to change. When it changes we know that we are in the v-blank period. Now is a good time to write to PPU registers or send data to the VRAM. But, also, we are using this to time our game loop.\n\nwait_nmi: waits until we are in v-blank. We call this at the to"
    }
}