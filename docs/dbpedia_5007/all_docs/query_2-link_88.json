{
    "id": "dbpedia_5007_2",
    "rank": 88,
    "data": {
        "url": "https://docs.huihoo.com/qt/qtcreator/4.2/creator-project-qbs.html",
        "read_more_link": "",
        "language": "en",
        "title": "Setting Up a Qbs Project",
        "top_image": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon-32x32.png",
        "meta_img": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon-32x32.png",
        "images": [
            "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/cookie_small.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/creator-qbs-project.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/creator-qbs-build-app.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/creator-qbs-build-clean.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/run_small.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/qtcreator-options-qbs.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon.ico.gzip",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "To use Qbs to build a project, you must create a .qbs file for the project. You can use Qt Creator to create a C or C++ project that is built with Qbs. For more information about Qbs, see the Qbs Manual.\n\nThe application is built using the default Qbs profile that is associated with the build and run kit. Qt Creator automatically creates a Qbs profile for each kit. You can edit the build profiles by adding new keys and values.\n\nTo check which Qbs version is being used, select Tools > Options > Qbs > Version Info.\n\nBuilding Qbs\n\nIf you build Qt Creator yourself from the Qt Creator Git repository, you also need to fetch the Qbs submodule to get Qbs support:\n\nFetch the Qbs submodule in your Qt Creator git checkout with git submodule update --init.\n\nRun qmake on Qt Creator and build Qt Creator again.\n\nBuilding Applications with Qbs\n\nTo build your application with Qbs:\n\nSelect File > New File or Project > Non-Qt Project > Plain C Project or Plain C++ Project > Choose.\n\nIn the Project Location dialog, specify the name and location for the project and select Next.\n\nIn the Define Build System dialog, select Qbs in the Build system field, and then select Next.\n\nIn the Kit Selection dialog, select a build and run kit for the project, and then select Next.\n\nIn the Project Management dialog, select Finish to create a Qbs project.\n\nEdit the .qbs file for you project. Usually, you must add the Depends item for a Qt application. For examples, see the examples directory in the qbs repository.\n\nSelect Projects to specify Build Settings for the project.\n\nSelect Build Steps > Details to specify build steps:\n\nIn the Build variant field, select Debug to include debug symbols in the build for debugging the application and Release to create the final installation file.\n\nIn the Parallel jobs field, specify the number of parallel jobs to use for building.\n\nSelect the Enable QML debugging check box to debug Qt Quick application projects.\n\nNote: Debugging requires opening a socket at a well-known port, which presents a security risk. Anyone on the Internet could connect to the application that you are debugging and execute any JavaScript functions. Therefore, you must make sure that the port is properly protected by a firewall.\n\nIn the Properties field, specify the properties to pass to the project. Use colons (:) to separate keys from values. For more information, see Modules in the Qbs Manual.\n\nIn the Flags field:\n\nSelect Keep going to continue building when errors occur, if possible.\n\nSelect Show command lines to print actual command lines to the compile output pane instead of high-level descriptions.\n\nSelect Force probes to force re-execution of the configure scripts of Probes.\n\nSelect Install to copy artifacts to their install location after building them. This option is enabled by default.\n\nSelect Clean install root to remove the contents of the install root directory before the build starts.\n\nThe Equivalent command line field displays the build command that is constructed based on the selected options.\n\nSelect Clean Steps > Details to specify flags for the cleaning step.\n\nSelect Dry run to test cleaning without executing commands or making permanent changes to the build graph.\n\nSelect Keep going to continue cleaning when errors occur, if possible.\n\nThe Equivalent command line field displays the clean command that is constructed based on the selected options.\n\nSelect Build > Build Project to build the application.\n\nClick the (Run) button to deploy and run the application.\n\nEditing Build Profiles\n\nYou can modify a build profile that is associated with a build and run kit by editing the values of the keys generated by Qt Creator and by adding new values:\n\nSelect Tools > Options > Qbs.\n\nBy default, Qbs profiles are stored in the qbs directory in the Qt Creator settings directory to ensure that different Qt Creator instances do not overwrite each other's profiles. If you only run one Qt Creator instance, you can store the profiles in the Qbs settings directory instead, by deselecting the Store profiles in Qt Creator settings directory check box.\n\nIn the Kit field, select a build and run kit.\n\nSelect Edit to edit the profile associated with the kit.\n\nSelect Add to add keys and values to the profile or to modify existing values.\n\nIn the Key column, spefify the key to add or modify as: <module_name>.<property_name>.\n\nIn the Value column, specify a value as a JSON literal.\n\nClick OK.\n\nThe values that you have modified are displayed in red in the Profile properties field."
    }
}