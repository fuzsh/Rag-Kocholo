{
    "id": "dbpedia_5007_3",
    "rank": 45,
    "data": {
        "url": "https://visualgdb.com/tutorials/porting/qt/",
        "read_more_link": "",
        "language": "en",
        "title": "Porting a QT Application from Windows to Linux – VisualGDB Tutorials",
        "top_image": "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/01-newprj.png",
        "meta_img": "",
        "images": [
            "https://sysprogs.com/img/logo_b&w.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/01-newprj.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/02-core.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/02-prjsettings.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/03-generated.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/04-build.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/05-run.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/06-newcfg.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/07-linuxcfg.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/08-machine.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/09-source.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/10-includes.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/11-build.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/12-breakpoint.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/13-xming.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/14-button.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/15-slot.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/16-editslots.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/17-addslot.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/18-connected.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/19-updated.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/20-build.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/21-messagebox.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/22-filelist.png",
            "https://visualgdb.com/w/wp-content/uploads/tutorials/porting/qt/23-winflielist.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-02-04T17:39:31-08:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://visualgdb.com/tutorials/porting/qt/",
        "text": "Porting a QT Application from Windows to Linux\n\nThis tutorial shows how to use the QT framework to create a basic application for Windows in Visual Studio and seamlessly port it to Linux. The use of cross-platform QT API ensures that the code written once will run on all platforms supported by QT.\n\nTo follow this tutorial you will need the following tools installed:\n\nMicrosoft Visual Studio\n\nQT Libraries for Visual Studio and the QT Add-in\n\nVisualGDB 4.1 or later\n\nWe will create a basic QT application using the QT wizard, modify the main window, port the application to Linux and demonstrate the use of the cross-platform API provided by QT by listing files in the current directory.\n\nStart Visual Studio. Begin creating a new project using the QT wizard:\n\nThe first page shows the summary about the created project. Press “next” to proceed:\n\nThe second page allows selecting involved QT modules. Keep the default ones and press “Next”:\n\nThe last page allows customizing the generated class names. We will keep the default ones and press “Finish”:\n\nThe wizard has generated a QT project for Windows. It consists of a .pro file containing various project settings, a .ui file describing the main window and some source files. Press Ctrl-Shift-B to build it:\n\nVisual Studio will build the project using its own C++ compiler. Press F5 to start debugging it:\n\nQT framework allows building both Windows and Linux applications from the same source code. To create a new Linux configuration select “Project->Add VisualGDB Configuration->New Linux Configuration”:\n\nOn the first page of the wizard select “qmake” as the build system. This is required to ensure that the QT-specific files, such as .pro and .ui are handled correctly under Linux:\n\nOn the next page select the Linux machine you are targeting. When you build your Linux configuration VisualGDB will transfer the source files to the Linux machine and build them there just like a normal Linux project:\n\nOn the last wizard page you can change the way source files are handled. By default they will be transferred to a subdirectory in /tmp and built there:\n\nPress “Finish” to complete the wizard. VisualGDB will download the QT Include directories from your Linux machine and configure IntelliSense to parse them:\n\nBuild your new Linux configuration by pressing Ctrl-Shift-B. The Output window will show how the files are transferred to the Linux machine and built there using qmake:\n\nSet a breakpoint in the constructor of the main window class and press F5 to start debugging. The debugging experience will be similar to debugging normal Windows apps. Additionally to that you can interact with the underlying GDB debugging using the GDB Session pane:\n\nPress F5 to continue debugging. The program running on the Linux machine will display the main window that will be shown on your Windows machine using the XMing window server. You can also switch to showing the windows on the Linux machine directly via VisualGDB Project Properties:\n\nNow we will add some functionality to our basic app. Double-click on the .ui file to launch QT Designer. Add a button to the main window:\n\nCreating a click handler is a bit more complex than using Windows frameworks like MFC, WTL or WPF and requires two steps. First switch to the signal/slot mode (F4) click on the button and drag the signal connector to the form outside the button:\n\nQT Designer will start creating a new signal/slot connection. A signal is the event produced by the form. A slot is the handler method defined inside your form class:\n\nSelect “clicked()” on the left and click “Edit” on the right to add another slot. Click “+” and type in the new slot name: ButtonClickHandler():\n\nPress OK to finish creating the connection. Verify the results in the Configure Connection window:\n\nThe QT Designer will show the newly created\n\nsignal/slot connection:\n\nSave the .ui file and close QT Designer. Go back to Visual Studio and add the following code inside the declaration of the QtProject1 class:\n\nprotected slots: void ButtonClickHandler();\n\nThen add the body of the method to QtProject1.cpp:\n\n#include <QMessageBox> //... void QtProject1::ButtonClickHandler() { QMessageBox msgBox; msgBox.setText(\"You have pushed the button!\"); msgBox.exec(); }\n\nNote that the method name should match the slot name created in Qt Designer.\n\nBuild your project with the new code:\n\nPress F5 to run the project. Click the button you added to see the message box:\n\nNow we will demonstrate how to use cross-platform QT API. In this tutorial we will list all entries in the current directory and display them in the message box. Include <QtDir> in your .cpp file and replace the body of the button click handler with the following code:\n\nQMessageBox msgBox; QDir currentDir(\".\"); QString fileList = \"Files in \" + currentDir.absolutePath() + \":\\n\"; QStringList entries = currentDir.entryList(); foreach(QString fn, entries) { if(fn != tr(\".\") && fn != tr(\"..\")) { fileList += fn + \"\\n\"; } } msgBox.setText(fileList); msgBox.exec();\n\nNote that foreach is a preprocessor macro defined inside QT to simplify iterating over QT collections.\n\nBuild the project and press F5. You will see the list of files on the Linux machine:\n\nNow simply select “Debug” from the configuration list, build and press F5 again. The same source code will be built for Windows and will show a Windows message box listing files in the Windows directory:\n\nIf you want to add more cross-platform functionality that will work on Windows, Linux and Linux-based systems such as Raspberry PI, simply implement it using QT API that is documented here. The QT framework will abstract out the differences between operating systems and let you write easily portable code."
    }
}