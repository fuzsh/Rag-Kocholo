{
    "id": "dbpedia_5007_3",
    "rank": 18,
    "data": {
        "url": "https://docs.huihoo.com/qt/qtcreator/4.2/creator-project-creating.html",
        "read_more_link": "",
        "language": "en",
        "title": "Creating Projects",
        "top_image": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon-32x32.png",
        "meta_img": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon-32x32.png",
        "images": [
            "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/cookie_small.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/qtcreator-new-qt-quick-project-wizard.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/qtcreator-cpp-class-wizard.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/qtcreator-options-cpp-files.png",
            "https://docs.huihoo.com/qt/qtcreator/4.2/images/qtcreator-new-opengl-file.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://d33sqmjvzgs8hq.cloudfront.net/wp-content/themes/oneqt/assets/images/favicon.ico.gzip",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Creating a project enables you to:\n\nGroup files together\n\nAdd custom build steps\n\nInclude forms and resource files\n\nSpecify settings for running applications\n\nSetting up a new project in Qt Creator is aided by a wizard that guides you step-by-step through the project creation process. The wizards prompt you to enter the settings needed for that particular type of project and create the necessary files for you. You can add your own custom wizards to standardize the way subprojects and classes are added to a project.\n\nMost wizards create projects that use the Qt build tool, qmake. It is a cross-platform system for build automation that helps simplify the build process for development projects across different platforms. qmake automates the generation of build configurations so that only a few lines of information are needed to create each configuration. For more information about qmake, see the qmake Manual. You can modify the build and run settings for qmake projects in the Projects mode.\n\nYou can use wizards also to create plain C or C++ projects that use qmake, Qbs, or CMake, but do not use the Qt library.\n\nIn addition, you can import projects as generic projects that do not use qmake, Qbs, or CMake. This enables you to use Qt Creator as a code editor and to fully control the steps and commands used to build the project.\n\nYou can install tools for mobile devices as part of Qt distributions. The kits and build and run settings for the installed device types are set up automatically. However, you might need to install and configure some additional software on the devices to be able to connect to them from the development PC.\n\nUsing Project Wizards\n\nIn the first step, you select a template for the project. You can filter templates (1) to view only those that apply to a particular target platform.\n\nNext, you select a location for the project and specify settings for it.\n\nWhen you have completed the steps, Qt Creator automatically generates the project with required headers, source files, user interface descriptions and project files, as defined by the wizard.\n\nFor example, if you choose to create a Qt Quick application, Qt Creator generates a QML file that you can modify with the integrated Qt Quick Designer.\n\nSelecting Project Type\n\nYou can use wizards to create following types of projects:\n\nApplications\n\nQt Widgets Application\n\nUse Qt Designer forms to design a Qt widget based user interface for the desktop and C++ to implement the application logic\n\nQt Quick Application\n\nCreate a Qt Quick application that contains both QML and C++ code. The project includes a QQuickView. You can build the application and deploy it to desktop, embedded, and mobile target platforms.\n\nQt Quick Controls Application\n\nCreate a Qt Quick application using Qt Quick Controls 2 (requires Qt 5.7 or later) or Qt Quick Controls.\n\nQt Canvas 3D Application\n\nCreate a Qt Quick application that imports the Qt Canvas 3D module and, optionally, includes three.js.\n\nQt Console Application\n\nUse a single main.cpp file\n\nLibraries\n\nC++ Library\n\nShared or static C++ library based on qmake\n\nQt Quick 1 Extension Plugin\n\nC++ plugin that makes it possible to offer extensions that can be loaded dynamically into Qt Quick 1 applications by using the QDeclarativeEngine class\n\nQt Quick 2 Extension Plugin\n\nC++ plugin that makes it possible to offer extensions that can be loaded dynamically into Qt Quick 2 applications by using the QQmlEngine class\n\nQt Creator Plugin\n\nOther Projects\n\nQt Unit Test\n\nQt unit tests for features or classes\n\nAuto Test Project\n\nProjects with boilerplate code for a Qt or Google test. For more information, see Creating Tests.\n\nQt Quick UI\n\nUse a single QML file that contains the main view. You can review Qt Quick UI projects in a preview tool and you need not build them.\n\nQt Quick Controls UI\n\nLike a Qt Quick UI project, but using Qt Quick Controls\n\nQt Custom Designer Widgets\n\nCustom Qt Designer widget or widget collection\n\nEmpty qmake Project\n\nEmpty qmake project that is based on qmake but does not use any default classes\n\nSubdirs Project\n\nSubprojects that enable you to structure your qmake projects as a tree hierarchy\n\nCode Snippet\n\nCreates a qmake project from a code snippet. When fixing bug reports that contain a code snippet, you can place the code snippet into a project to compile and check it.\n\nNon-Qt Projects\n\nPlain C or C++ Application\n\nPlain C or C++ application that uses qmake, Qbs, or CMake but does not use the Qt library\n\nNim Application (experimental)\n\nNim application that uses qmake or CMake but does not use the Qt library\n\nNote: The Nim Application option becomes visible after you enable the experimental Nim plugin. Select Help > About Plugins > Other Languages > Nim, and then restart Qt Creator.\n\nImport Project\n\nProject from version control\n\nImport a project from a supported version control system. For more information on how version control systems are integrated in Qt Creator, see Using Version Control Systems\n\nImport as qmake Project\n\nImport an existing project that does not use any of the supported build systems: qmake, Qbs, CMake, or Autotools. The wizard creates a qmake .pro file, which enables you to use Qt Creator as a code editor and as a launcher for debugging and analysis tools. However, if you want to build the project, you might need to edit the generated .pro file.\n\nImport Existing Project\n\nImport an existing project that does not use any of the supported build systems: qmake, Qbs, CMake, or Autotools. This enables you to use Qt Creator as a code editor\n\nTo create a new project, select File > New File or Project and select the type of your project. The contents of the wizard dialogs depend on the project type and the kits that you select in the Kit Selection dialog. Follow the instructions of the wizard.\n\nFor examples of creating different types of projects, see Tutorials.\n\nFor more information about creating Qt Quick projects, see Creating Qt Quick Projects.\n\nTo change the location of the project directory, and to specify settings for building and running projects, select Tools > Options > Build & Run > General.\n\nTo specify build and run settings for different target platforms, select Projects.\n\nAdding Files to Projects\n\nYou can use wizards also to add individual files to your projects. You can create the following types of files:\n\nC++\n\nC++ class, source, or header files that you can use to write the application logic in both Qt Quick projects and Qt widget based projects\n\nQt\n\nQt item model source and header files that you can use to create classes derived from QAbstractItemModel, QAbstractTableModel, or QAbstractListModel.\n\nQt Designer forms and Qt Designer form classes, which specify parts of user interfaces in Qt widget based projects\n\nQt resource files, which allow you to store binary files in the application executable\n\nQML files, which specify items in Qt Quick projects. QML File (Qt Quick 2) creates a QML file that imports Qt Quick 2.0 and Qt Quick UI File creates an UI form (.ui.qml) and the corresponding QML file.\n\nJavaScript files that you can use to write the application logic in Qt Quick projects\n\nModels and state charts\n\nUniversal Modeling Language (UML) style models with structured diagrams. However, the model editor uses a variant of UML and provides only a subset of properties for specifying the appearance of model elements. For more information, see Modeling.\n\nState Chart XML (SCXML) files that contain boilerplate code for state machines. You can use the classes in the Qt SCXML module to embed state machines created from the files in Qt applications.\n\nGLSL\n\nGLSL files that define fragment and vertex shaders in both Qt Quick projects and Qt widget based projects\n\nGeneral\n\nText files\n\nScratch buffers that use temporary files. You can create this type of files for temporarily storing information that you do not intend to save\n\nJava\n\nJava class files that you can use to create Java classes.\n\nPython\n\nPython class and source files that you can use to create Python classes and scripts with UTF-8 encoding.\n\nNim (experimental)\n\nNim script files.\n\nNim source files with UTF-8 encoding.\n\nCreating C++ Classes\n\nThe C++ Class Wizard allows you to create a C++ header and source file for a new class that you can add to a C++ project. Specify the class name, base class, and header and source files for the class.\n\nThe wizard supports namespaces. To use a namespace, enter a qualified class name in the Class name field. For example: MyNamespace::MySubNamespace::MyClass.\n\nThe names of the header and source file are based on the class name. To change the default suffix of a file, select Tools > Options > C++ > File Naming.\n\nIn the License template field, you can use predefined wizard variables to specify the path and filename of the license to use in the source and header files.\n\nYou can create your own project and class wizards. For more information, see Adding New Custom Wizards.\n\nCreating OpenGL Fragment and Vertex Shaders\n\nQt provides support for integration with OpenGL implementations on all platforms, which allows you to display hardware accelerated 3D graphics alongside a more conventional user interface. For more information, see Qt GUI.\n\nYou can use the QOpenGLShader class to compile OpenGL shaders written in the OpenGL Shading Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES). QOpenGLShader and QOpenGLShaderProgram shelter you from the details of compiling and linking vertex and fragment shaders.\n\nYou can use Qt Creator code editor to write fragment and vertex shaders in GLSL or GLSL/ES. The code editor provides syntax highlighting and code completion for the files.\n\nDisplaying Additional File Types in Projects Pane\n\nQt Creator determines whether to display files from the project folder in the Projects pane depending on the file type (.pro, .pri, .cpp, .h, .qrc, and so on). To display other types of files, edit the project file. Add filenames as values of the DISTFILES variable. You can also use wildcards.\n\nFor example, the following code specifies that text files are displayed in the Projects pane:\n\nThis also makes the files available in the Locator.\n\nAdding Subprojects to Projects\n\nIn addition to Qt libraries, you can link your application to other libraries, such as system libraries or your own libraries. Further, your own libraries might link to other libraries. To be able to compile your project, you must add the libraries to your project. This also enables code completion and syntax highlighting for the libraries. The procedure of adding a library to a project depends on the build system that you use.\n\nWhen you create a new project, you can add it to another project as a subproject in the Project Management dialog. However, the root project must specify that qmake uses the subdirs template to build the project.\n\nTo create a root project, select File > New File or Project > Other Project > Subdirs Project > Choose.\n\nOn the Summary page, select Finish & Add Subproject to create the root project and to add another project, such as a C++ library.\n\nThe wizard creates a project file (.pro) that defines a subdirs template and the subproject that you add as a value of the SUBDIRS variable. It also adds all the necessary files for the subproject.\n\nTo add more subprojects, right-click the project name in the Projects pane, and select New Subproject in the context menu.\n\nTo remove subprojects, right-click the project name in the Projects pane, and select Remove Subproject in the context menu.\n\nTo specify dependencies, use the Add Library wizard. For more information, see Adding Libraries to Projects.\n\nBinding Keyboard Shortcuts to Wizards\n\nIf you use a wizard regularly, you can bind a custom keyboard shortcut to it. Triggering this keyboard shortcut will directly open the wizard without the need to navigate to File > New File or Project.\n\nKeyboard shortcuts for wizards can be set in Tools > Options > Environment > Keyboard > Wizard. All wizard actions start with Impl there."
    }
}