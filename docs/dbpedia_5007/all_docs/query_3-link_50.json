{
    "id": "dbpedia_5007_3",
    "rank": 50,
    "data": {
        "url": "https://pypi.org/project/Qt.py/",
        "read_more_link": "",
        "language": "en",
        "title": "Qt.py",
        "top_image": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "meta_img": "https://pypi.org/static/images/twitter.abaf4b19.webp",
        "images": [
            "https://pypi.org/static/images/logo-small.8998e9d1.svg",
            "https://pypi-camo.freetls.fastly.net/058fef189fcfd94ee21bffdc6e0154993af787c0/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f31646335663563323061616463373535373763376464333635303232656265373f73697a653d3530",
            "https://pypi-camo.freetls.fastly.net/5c157d1f32f932e6471757bb7c95aa6fb3e3ee46/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6f74746f73736f2f51742e70792f6d61737465722f6c6f676f2e737667",
            "https://pypi-camo.freetls.fastly.net/f78769c3b2f6e64ab74ae3e6de3dcd4d893ddd4a/68747470733a2f2f706570792e746563682f62616467652f71742d7079",
            "https://pypi-camo.freetls.fastly.net/b93c549a7518689afb1b14a9f8ecd255480322bc/68747470733a2f2f6769746875622e636f6d2f6d6f74746f73736f2f51742e70792f616374696f6e732f776f726b666c6f77732f72756e2d74657374732e796d6c2f62616467652e737667",
            "https://pypi-camo.freetls.fastly.net/dfd93eb4d1a29667ae67218a2184ab9be7d2db31/68747470733a2f2f62616467652e667572792e696f2f70792f51742e70792e737667",
            "https://pypi-camo.freetls.fastly.net/9a5afbedcdee536a0e6b465f314f0d9c6d6dcddb/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f71742e70792f6261646765732f76657273696f6e2e737667",
            "https://pypi-camo.freetls.fastly.net/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667",
            "https://pypi-camo.freetls.fastly.net/5483efed53a0b1285534b6eb56260acd3ffd8605/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657669657765645f62792d486f756e642d3845363442302e737667",
            "https://pypi-camo.freetls.fastly.net/13e6b4e55addfb452fd6e29ea68117a6e306dfb2/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f323135323736362f31353635333234382f62356365323938652d323638332d313165362d386330632d6630343165636165323033642e706e67",
            "https://pypi-camo.freetls.fastly.net/bb8f298f50a7ac109c3896a5d207e5aa778c951a/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f323135323736362f31373632313232392f63323434386462322d363038392d313165362d393135662d3036303465356438633765652e706e67",
            "https://pypi-camo.freetls.fastly.net/058fef189fcfd94ee21bffdc6e0154993af787c0/68747470733a2f2f7365637572652e67726176617461722e636f6d2f6176617461722f31646335663563323061616463373535373763376464333635303232656265373f73697a653d3530",
            "https://pypi.org/static/images/blue-cube.572a5bfb.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi.org/static/images/white-cube.2351a86c.svg",
            "https://pypi-camo.freetls.fastly.net/ed7074cadad1a06f56bc520ad9bd3e00d0704c5b/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6177732d77686974652d6c6f676f2d7443615473387a432e706e67",
            "https://pypi-camo.freetls.fastly.net/8855f7c063a3bdb5b0ce8d91bfc50cf851cc5c51/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f64617461646f672d77686974652d6c6f676f2d6668644c4e666c6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/df6fe8829cbff2d7f668d98571df1fd011f36192/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f666173746c792d77686974652d6c6f676f2d65684d3077735f6f2e706e67",
            "https://pypi-camo.freetls.fastly.net/420cc8cf360bac879e24c923b2f50ba7d1314fb0/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f676f6f676c652d77686974652d6c6f676f2d616734424e3774332e706e67",
            "https://pypi-camo.freetls.fastly.net/524d1ce72f7772294ca4c1fe05d21dec8fa3f8ea/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f6d6963726f736f66742d77686974652d6c6f676f2d5a443172685444462e706e67",
            "https://pypi-camo.freetls.fastly.net/d01053c02f3a626b73ffcb06b96367fdbbf9e230/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f70696e67646f6d2d77686974652d6c6f676f2d67355831547546362e706e67",
            "https://pypi-camo.freetls.fastly.net/67af7117035e2345bacb5a82e9aa8b5b3e70701d/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f73656e7472792d77686974652d6c6f676f2d4a2d6b64742d706e2e706e67",
            "https://pypi-camo.freetls.fastly.net/b611884ff90435a0575dbab7d9b0d3e60f136466/68747470733a2f2f73746f726167652e676f6f676c65617069732e636f6d2f707970692d6173736574732f73706f6e736f726c6f676f732f737461747573706167652d77686974652d6c6f676f2d5467476c6a4a2d502e706e67"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-15T06:30:04+00:00",
        "summary": "",
        "meta_description": "Python 2 & 3 compatibility wrapper around all Qt bindings - PySide, PySide2, PyQt4 and PyQt5.",
        "meta_lang": "en",
        "meta_favicon": "/static/images/favicon.35549fe8.ico",
        "meta_site_name": "PyPI",
        "canonical_link": "https://pypi.org/project/Qt.py/",
        "text": "Qt.py enables you to write software that runs on any of the 4 supported bindings - PySide2, PyQt5, PySide and PyQt4.\n\nNews\n\nDate Version Event May 2024 1.4.0 Added support for Qt 6 Jan 2024 1.3.9 Run CI on Github Actions, instead of Travis CI. Sep 2020 1.3.0 Stability improvements and greater ability for QtCompat.wrapInstance to do its job Jun 2019 1.2.1 Bugfixes and additional members Jan 2018 1.1.0 Adds new test suite, new members Mar 2017 1.0.0 Increased safety, backwards incompatible Sep 2016 0.6.9 Stable release Sep 2016 0.5.0 Alpha release of --convert Jun 2016 0.2.6 First release of Qt.py\n\nMore details.\n\nGuides\n\nQt 6 Transition Guide\n\nDeveloping with Qt.py\n\nDealing with Maya 2017 and PySide2\n\nVendoring Qt.py\n\nUdemy Course\n\nPythonBytes #77 (Starts at 5:00)\n\nTable of contents\n\nProject goals\n\nInstall\n\nUsage\n\nDocumentation\n\nEnvironment Variables\n\nSubset\n\nBranch binding-specific code\n\nOverride preferred choice\n\nQtSiteConfig.py\n\nCompile Qt Designer files\n\nLoading Qt Designer files\n\nsip API v2\n\nRules\n\nHow it works\n\nKnown problems\n\nWho's using Qt.py?\n\nProjects using Qt.py\n\nProjects similar to Qt.py\n\nDeveloper guide\n\nQt 6 transition guide\n\nProject goals\n\nWrite once, run in any binding.\n\nQt.py was born in the film and visual effects industry to address the growing need for software capable of running with more than one flavor of the Qt bindings for Python - PySide, PySide2, PyQt4 and PyQt5.\n\nGoal Description Support co-existence Qt.py should not affect other bindings running in same interpreter session. Build for one, run with all Code written with Qt.py should run on any binding. Explicit is better than implicit Differences between bindings should be visible to you.\n\nSee CONTRIBUTING.md for more details.\n\nInstall\n\nQt.py is a single file and can either be copy/pasted into your project, downloaded as-is, cloned as-is or installed via pip or conda.\n\n# From PyPI $ pip install Qt.py\n\n# From Anaconda $ conda config --add channels conda-forge $ conda install qt.py\n\nPro tip: Never use the latest commit for production. Instead, use the latest release. That way, when you read bug reports or make one for yourself you will be able to match a version with the problem without which you will not know which fixes apply to you nor would we be able to help you. Installing via pip or conda as above ensures you are provided the latest stable release. Unstable releases are suffixed with a .b, e.g. 1.1.0.b3.\n\nPro tip: Supports vendoring\n\nUsage\n\nUse Qt.py as you would use PySide2.\n\nimport sys from Qt import QtWidgets app = QtWidgets.QApplication(sys.argv) button = QtWidgets.QPushButton(\"Hello World\") button.show() app.exec_()\n\nAlso see /examples\n\nDocumentation\n\nAll members of Qt stem directly from those available via PySide2, along with these additional members.\n\nAttribute Returns Description __version__ str Version of this project __binding__ str A string reference to binding currently in use __qt_version__ str Reference to version of Qt, such as Qt 5.6.1 __binding_version__ str Reference to version of binding, such as PySide 1.2.6\n\nExample\n\n>>> from Qt import __binding__ >>> __binding__ 'PyQt5'\n\nCompatibility\n\nQt.py also provides compatibility wrappers for critical functionality that differs across bindings, these can be found in the added QtCompat submodule.\n\nAttribute Returns Description loadUi(uifile=str, baseinstance=QWidget) QObject Minimal wrapper of PyQt4.loadUi and PySide equivalent translate(...) function Compatibility wrapper around QCoreApplication.translate wrapInstance(addr=long, type=QObject) QObject Wrapper around shiboken2.wrapInstance and PyQt equivalent getCppPointer(object=QObject) long Wrapper around shiboken2.getCppPointer and PyQt equivalent isValid(object=QObject) bool Wrapper around shiboken2.isValid and PyQt equivalent dataChanged(topLeft=QModelIndex, bottomRight=QModelIndex, roles=[]) None Wrapper around QtCore.QAbstractItemModel.dataChanged.emit\n\nExample\n\n>>> from Qt import QtCompat >>> QtCompat.loadUi\n\nClass specific compatibility objects\n\nBetween Qt4 and Qt5 there have been many classes and class members that are obsolete. Under Qt.QtCompat there are many classes with names matching the classes they provide compatibility functions. These will match the PySide2 naming convention.\n\nfrom Qt import QtCore, QtWidgets, QtCompat header = QtWidgets.QHeaderView(QtCore.Qt.Horizontal) QtCompat.QHeaderView.setSectionsMovable(header, False) movable = QtCompat.QHeaderView.sectionsMovable(header)\n\nThis also covers inconsistencies between bindings. For example PyQt4's QFileDialog matches Qt4's return value of the selected. While all other bindings return the selected filename and the file filter the user used to select the file. Qt.QtCompat.QFileDialog ensures that getOpenFileName(s) and getSaveFileName always return the tuple.\n\nEnvironment Variables\n\nThese are the publicly facing environment variables that in one way or another affect the way Qt.py is run.\n\nVariable Type Description QT_PREFERRED_BINDING_JSON str Override order and content of binding to try. This can apply per Qt.py namespace. QT_PREFERRED_BINDING str Override order and content of binding to try. Used if QT_PREFERRED_BINDING_JSON does not apply. QT_VERBOSE bool Be a little more chatty about what's going on with Qt.py QT_SIP_API_HINT int Sets the preferred SIP api version that will be attempted to set.\n\nSubset (or \"common members\")\n\nMembers of Qt.py is a subset of PySide2. Which means for a member to be made accessible via Qt.py, it will need to (1) be accessible via PySide2 and (2) each of the other supported bindings. This excludes large portions of the Qt framework, including the newly added QtQml and QtQuick modules but guarantees that anything you develop with Qt.py will work identically on any binding - PySide, PySide2, PyQt4 and PyQt5. If you need to use such excluded modules with Qt.py, please see QtSiteConfig.py.\n\nWe call this subset \"common members\" and these can be generated by running the build_membership.sh script. The script will output all modules and members of each binding into individual JSON files. These JSON files are then compared and a common_members.json file is generated. The contents of this file is copy-pasted into the _common_members dictionary of Qt.py. Please note that the script will only use the very latest version of our Docker test suite to generate the common members subset, using the most up-to-date set of VFX Platform-stipulated software versions.\n\n:warning: The version of PySide2 used as reference is the one specified on VFX Platform, currently version is 2.0.x. But unfortunately, the version string of PySide2 is not yet properly maintained and the VFX Platform does not specifiy a explicit commit SHA for PySide2. Therefore, it could be difficult to know exactly which PySide2 is running on your system (unless you built it from source). In layman's terms; as PySide2 is in development and is continuously adding new support for modules, you may see differences between PySide2 built early in the year vs PySide2 built later in the year. The exact commit SHAs of PySide2 used by the Qt.py test suite can be reviewed in DOCKER.md. QtC implemented an alternative way to identify which version of PySide2 you are running. You can read more about that here.\n\nBranch binding-specific code\n\nSome bindings offer features not available in others, you can use __binding__ to capture those.\n\nif \"PySide\" in __binding__: do_pyside_stuff()\n\nOverride preferred choice\n\nIf your system has multiple choices where one or more is preferred, you can override the preference and order in which they are tried with this environment variable.\n\n$setQT_PREFERRED_BINDING=PyQt5# Windows $exportQT_PREFERRED_BINDING=PyQt5# Unix/OSX $ python -c\"import Qt;print(Qt.__binding__)\" PyQt5\n\nConstrain available choices and order of discovery by supplying multiple values.\n\n# Try PyQt4 first and then PySide, but nothing else. $exportQT_PREFERRED_BINDING=PyQt4:PySide\n\nUsing the OS path separator (os.pathsep) which is : on Unix systems and ; on Windows.\n\nIf you need to control the preferred choice of a specific vendored Qt.py you can use the QT_PREFERRED_BINDING_JSON environment variable instead.\n\n{ \"Qt\":[\"PyQt5\"], \"myproject.vendor.Qt\":[\"PyQt5\"], \"default\":[\"PySide2\"] }\n\nThis json data forces any code that uses import Qt or import myproject.vendor.Qt to use PyQt5(from x import Qt etc works too, this is based on __name__ of the Qt.py being imported). Any other imports of a Qt module will use the \"default\" PySide2 only. If \"default\" is not provided or a Qt.py being used does not support QT_PREFERRED_BINDING_JSON, QT_PREFERRED_BINDING will be respected.\n\n# Try PyQt5 first and then PyQt4 for the Qt module name space. $exportQT_PREFERRED_BINDING_JSON=\"{\"Qt\":[\"PyQt5\",\"PyQt4\"]}\" # Use PyQt4 for any other Qt module name spaces. $exportQT_PREFERRED_BINDING=PySide2\n\nQtSiteConfig.py\n\nAdd or remove members from Qt.py at run-time.\n\nExamples\n\nIf you need to expose a module that isn't included in Qt.py by default or wish to remove something from being exposed in Qt.py you can do so by creating a QtSiteConfig.py module and making it available to Python.\n\nCreate a new file QtSiteConfig.py\n\nImplement update_members\n\nExpose to Python\n\n# QtSiteConfig.py def update_members(members): \"\"\"Called by Qt.py at run-time to modify the modules it makes available. Arguments: members (dict): The members considered by Qt.py \"\"\" members.pop(\"QtCore\")\n\nFinally, expose the module to Python.\n\n$setPYTHONPATH=/path/to $ python -c\"import Qt.QtCore\" ImportError: No module named Qt.QtCore\n\nLinux and MacOS users, replace set with export\n\nCompile Qt Designer files\n\nWARNING - ALPHA FUNCTIONALITY\n\nSee #132 for details.\n\n.ui files compiled via pyside2-uic inherently contain traces of PySide2 - e.g. the line from PySide2 import QtGui.\n\nIn order to use these with Qt.py, or any other binding, one must first erase such traces and replace them with cross-compatible code.\n\n$ pyside2-uic my_ui.ui -o my_ui.py $ python -m Qt --convert my_ui.py # Creating \"my_ui_backup.py\".. # Successfully converted \"my_ui.py\"\n\nNow you may use the file as you normally would, with Qt.py\n\nLoading Qt Designer files\n\nThe uic.loadUi function of PyQt4 and PyQt5 as well as the QtUiTools.QUiLoader().load function of PySide/PySide2 are mapped to a convenience function loadUi.\n\nimport sys from Qt import QtCompat app = QtWidgets.QApplication(sys.argv) ui = QtCompat.loadUi(uifile=\"my.ui\") ui.show() app.exec_()\n\nFor PyQt bindings it uses their native implementation, whereas for PySide bindings it uses our custom implementation borrowed from the qtpy project.\n\nloadUi has two arguments as opposed to the multiple that PyQt ships with. See here for details - in a nutshell, those arguments differ between PyQt and PySide in incompatible ways. The second argument is baseinstance which allows a ui to be dynamically loaded onto an existing QWidget instance.\n\nQtCompat.loadUi(uifile=\"my.ui\", baseinstance=QtWidgets.QWidget)\n\nuifile is the string path to the ui file to load.\n\nIf baseinstance is None, the a new instance of the top-level widget will be created. Otherwise, the user interface is created within the given baseinstance. In this case baseinstance must be an instance of the top-level widget class in the UI file to load, or a subclass thereof. In other words, if you've created a QMainWindow interface in the designer, baseinstance must be a QMainWindow or a subclass thereof, too. You cannot load a QMainWindow UI file with a plain QWidget as baseinstance.\n\nloadUi returns baseinstance, if baseinstance is provided. Otherwise it will return the newly created instance of the user interface.\n\nsip API v2\n\nIf you're using PyQt4, sip attempts to set its API to version 2 for the following:\n\nQString\n\nQVariant\n\nQDate\n\nQDateTime\n\nQTextStream\n\nQTime\n\nQUrl\n\nRules\n\nThe PyQt and PySide bindings are similar, but not identical. Where there is ambiguity, there must to be a clear direction on which path to take.\n\nGoverning API\n\nThe official Qt 5 documentation is always right. Where the documentation lacks answers, PySide2 is right.\n\nFor example.\n\n# PyQt5 adheres to PySide2 signals and slots PyQt5.Signal = PyQt5.pyqtSignal PyQt5.Slot = PyQt5.pyqtSlot # PySide2 adheres to the official documentation PySide2.QtCore.QStringListModel = PySide2.QtGui.QStringListModel\n\nCaveats\n\nThere are cases where Qt.py is not handling incompatibility issues. Please see CAVEATS.md for more information.\n\nKnown Problems\n\nSend us a pull-request with known problems here!\n\nMaya and incompatible bindings on PYTHONPATH\n\nWho's using Qt.py?\n\nSend us a pull-request with your studio here.\n\nAtomic Fiction\n\nBläck\n\nBlur Studio\n\nCGRU\n\nColorbleed\n\nDigital Domain\n\nDisney Animation\n\nDreamworks Animation\n\nEpic Games\n\nFido\n\nFramestore\n\nftrack\n\nFutureworks\n\nIndustrial Brothers\n\nIndustriromantik\n\nMackevision\n\nMethod Studios\n\nMikros Image\n\nMoonbot Studios\n\nMPC\n\nOvermind Studios\n\nPsyop\n\nRaynault VFX\n\nRising Sun Pictures\n\nRodeo FX\n\nSony Pictures Imageworks\n\nSpin VFX\n\nWeta Digital\n\nPresented at Siggraph 2016, BOF!\n\nProjects using Qt.py\n\nSend us a pull-request with your project here.\n\nUSD Manager\n\nCosmos\n\nmaya-capture-gui\n\npyblish-lite\n\npyvfx-boilerplate\n\nriffle\n\ncmt\n\nPythonForMayaSamples\n\nKraken\n\nAFANASY\n\nSyncplay\n\nBlenderUpdater\n\nQtPyConvert\n\nPyper\n\nProjects similar to Qt.py\n\nComparison matrix.\n\nProject Audience Reference binding License PEP8 Standalone PyPI Co-existence Qt.py Film PySide2 MIT X X X X jupyter Scientific N/A N/A X QtPy Scientific N/A MIT X X pyqode.qt Scientific PyQt5 MIT X X QtExt Film N/A N/A X python_qt_binding Robotics N/A BSD X X X X\n\nAlso worth mentioning, pyqt4topyqt5; a good starting point for transitioning to Qt.py.\n\nSend us a pull-request with your project here.\n\nDeveloper Guide\n\nTests are performed on each aspect of the shim.\n\nFunctional\n\nCaveats\n\nExamples\n\nEach of these are run under..\n\nPython 2.7\n\nPython 3.4\n\nPython 3.5\n\nPython 3.6\n\n..once for each binding or under a specific binding only.\n\nEach test is run within it's own isolated process, so as to allow an import to occur independently from other tests. Process isolation is handled via nosepipe.\n\nTests that are written at module level are run four times - once per binding - whereas tests written under a specific if-statement are run only for this particular binding.\n\nif binding(\"PyQt4\"): def test_something_related_to_pyqt4(): pass\n\nCode convention\n\nBelow are some of the conventions that used throughout the Qt.py module and tests.\n\nEtiquette: PEP8\n\nAll code is written in PEP8. It is recommended you use a linter as you work, flake8 and pylinter are both good options. Anaconda if using Sublime is another good option.\n\nEtiquette: Double quotes\n\n\" = yes, ' = no.\n\nEtiquette: Napoleon docstrings\n\nAny docstrings are made in Google Napoleon format. See Napoleon for details.\n\nEtiquette: Semantic Versioning\n\nThis project follows semantic versioning.\n\nEtiquette: Underscore means private\n\nAnything prefixed with an underscore means that it is internal to Qt.py and not for public consumption.\n\nRunning tests\n\nDue to the nature of multiple bindings and multiple interpreter support, setting up a development environment in which to properly test your contraptions can be challenging. So here is a guide for how to do just that using Docker.\n\nWith Docker setup, here's what you do. Please note this will pull down a ~1 GB image.\n\ncd Qt.py # Run nosetests (Linux/OSX) docker run --rm -v$(pwd):/Qt.py -ePYTHON=2.7 fredrikaverpil/qt.py:2018 docker run --rm -v$(pwd):/Qt.py -ePYTHON=3.4 fredrikaverpil/qt.py:2018 docker run --rm -v$(pwd):/Qt.py -ePYTHON=3.5 fredrikaverpil/qt.py:2018 docker run --rm -v$(pwd):/Qt.py -ePYTHON=3.6 fredrikaverpil/qt.py:2018 # Run nosetests (Windows) docker run --rm -v %CD%:/Qt.py -ePYTHON=2.7 fredrikaverpil/qt.py:2018 docker run --rm -v %CD%:/Qt.py -ePYTHON=3.4 fredrikaverpil/qt.py:2018 docker run --rm -v %CD%:/Qt.py -ePYTHON=3.5 fredrikaverpil/qt.py:2018 docker run --rm -v %CD%:/Qt.py -ePYTHON=3.6 fredrikaverpil/qt.py:2018 # Doctest: test_caveats.test_1_qtgui_qabstractitemmodel_createindex ... ok # Doctest: test_caveats.test_2_qtgui_qabstractitemmodel_createindex ... ok # Doctest: test_caveats.test_3_qtcore_qitemselection ... ok # ... # # ---------------------------------------------------------------------- # Ran 21 tests in 7.799s # # OK\n\nNow both you and Github Actions are operating on the same assumptions which means that when the tests pass on your machine, they pass on Github Actions. And everybody wins!\n\nFor details on the Docker image for testing, see DOCKER.md.\n\nSee CONTRIBUTING.md for more of the good stuff.\n\nUpload to PyPI\n\nTo make a new release onto PyPI, you'll need to be mottosso and type this.\n\ncd Qt.py python .\\setup.py sdist bdist_wheel python -m twine upload .\\dist\\*\n\nQt 6 Transition Guide\n\nReplace With Notes QFont().setWeight(...) QtCompat.QFont.setWeight(font, ...) QFont().setWeight(QFont().Bold) QFont().setWeight(QFont.Bold) Instance of class doesn't have the enums, apparently QEvent().Resize QEvent.Resize Instance of class doesn't have the enums, seems to apply overall QtCore.Qt.MidButton QtCompat.QtCore.Qt.MidButton QLabel.setPixmap(str) QLabel.setPixmap(QPixmap()) Can't take a string anymore (tested in Maya 2025.0) QModelIndex.child QModel.index This one is apparently from Qt 4 and should not have been in Qt.py to begin with Submit your known issues here!\n\nRemoved Members\n\nMany members were removed from Qt.py due to no longer existing in PySide 6.\n\nIf you find where they went, or think some were removed in error, please submit a pull-request!\n\n\"QtCore\":[ \"QAbstractState\", \"QAbstractTransition\", \"QEventTransition\", \"QFinalState\", \"QSignalTransition\", \"QTextCodec\", \"QTextDecoder\", \"QTextEncoder\", \"QtCriticalMsg\", \"QtDebugMsg\", \"QtFatalMsg\", \"QtSystemMsg\", \"QtWarningMsg\", \"qChecksum\", \"QPictureIO\", ], \"QtMultimedia\":[ \"QAbstractVideoBuffer\", \"QAbstractVideoSurface\", \"QAudio\", \"QAudioDeviceInfo\", \"QAudioFormat\", \"QAudioInput\", \"QAudioOutput\", \"QVideoFrame\", \"QVideoSurfaceFormat\" ], \"QtNetwork\":[ \"QNetworkConfiguration\", \"QNetworkConfigurationManager\", \"QNetworkSession\", ], \"QtOpenGL\":[ \"QGL\", \"QGLContext\", \"QGLFormat\", \"QGLWidget\" ], \"QtSql\":[ \"QSql\", \"QSqlDatabase\", \"QSqlDriver\", \"QSqlDriverCreatorBase\", \"QSqlError\", \"QSqlField\", \"QSqlIndex\", \"QSqlQuery\", \"QSqlQueryModel\", \"QSqlRecord\", \"QSqlRelation\", \"QSqlRelationalDelegate\", \"QSqlRelationalTableModel\", \"QSqlResult\", \"QSqlTableModel\" ], \"QtSvg\":[ \"QSvgGenerator\", \"QSvgRenderer\", ], \"QtWidgets\":[ \"QActionGroup\", \"QDesktopWidget\", \"QDirModel\", \"QKeyEventTransition\", \"QMouseEventTransition\", \"QUndoCommand\", \"QUndoGroup\", \"QUndoStack\", ], \"QtX11Extras\":[ \"QX11Info\" ], \"QtXml\":[ \"QXmlAttributes\", \"QXmlContentHandler\", \"QXmlDTDHandler\", \"QXmlDeclHandler\", \"QXmlDefaultHandler\", \"QXmlEntityResolver\", \"QXmlErrorHandler\", \"QXmlInputSource\", \"QXmlLexicalHandler\", \"QXmlLocator\", \"QXmlNamespaceSupport\", \"QXmlParseException\", \"QXmlReader\", \"QXmlSimpleReader\" ], \"QtXmlPatterns\":[ \"QAbstractMessageHandler\", \"QAbstractUriResolver\", \"QAbstractXmlNodeModel\", \"QAbstractXmlReceiver\", \"QSourceLocation\", \"QXmlFormatter\", \"QXmlItem\", \"QXmlName\", \"QXmlNamePool\", \"QXmlNodeModelIndex\", \"QXmlQuery\", \"QXmlResultItems\", \"QXmlSchema\", \"QXmlSchemaValidator\", \"QXmlSerializer\" ]\n\nStatic Members Missing from Instances\n\nAn overall change is that instances of classes, like QFont() no longer provides access to static members, such as QFont.Bold. So things like:\n\nfont = QFont() font.setWeight(font.Bold)\n\nMust be replaced with:\n\nfont = QFont() font.setWeight(QFont.Bold)\n\nOr:\n\nfont.setWeight(type(font).Bold)\n\nTedious and seemingly unnecessary.. But there you have it!\n\nNotes\n\nQt.py 1.4.0, released in May 2024, added support for Qt 6 whilst preserving compatibility with Qt 4 and 5. That means that in most cases, code you've already written for Qt 4 or 5 will now continue to work with Qt 6, such as Maya 2025.\n\nHowever, some changes between 5 and 6 require up-front work by you the developer to make your codebase run on Qt 6 whilst continuing to run on Qt 4 and 5.\n\nThe above is what we know, please do submit issues and pull-request with what else you find!\n\nhttps://github.com/mottosso/Qt.py/issues/new\n\nSee also\n\nThe official PySide2 to PySide6 transition guide, which is especially helpful since Qt.py is modeled after PySide2."
    }
}