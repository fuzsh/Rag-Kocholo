{
    "id": "dbpedia_5007_2",
    "rank": 83,
    "data": {
        "url": "http://www.robert-puskas.info/2019/06/lod-setting-up-project-with-unit-testing-qt-creator.html",
        "read_more_link": "",
        "language": "en",
        "title": "Lesson of the day - Setting up a project in Qt Creator with unit testing - The easy way",
        "top_image": "http://www.robert-puskas.info/assets/images/Logo3.png",
        "meta_img": "http://www.robert-puskas.info/assets/images/Logo3.png",
        "images": [
            "http://www.robert-puskas.info/assets/images/programming/ProjSetup-ClassToSubfolder.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/Logo3.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "UPDATE: A newer post shows how to create a proper subdirs project with testing. Because of that, the majority of the content in this post is not valid any more.\n\nDear Readers,\n\nIn this post Iâm going to share some of my findings about setting up a project with unit testing in Qt Creator. This might seem a trivial task to do from first glance, but unfortunately it turned out to be a bit more problematic than I thought. Letâs dive right in.\n\nOne of the first things that comes into mind when starting a new project is how to organize different source files. Obviously, based on some logic, the programmer will place them into various folders so that they donât get all mixed up. In Qt Creator however, creating a new folder and putting some source files into that folder is not really straightforward for some reason. Iâm not sure why such a design was chosen, but to place some new source files into a project subfolder, one must first create that subfolder with the help of a file manager, then manually type that folder name in Qt Creatorâs âNew Fileâ dialog right before the source and header file names. An example is depicted below:\n\nAdding new files to a project subfolder in Qt Creator\n\nAs it is clearly seen above, this feature is a bit obscured, as there are no obvious ways to select any directory and there is no hint that typing the folder name will be handled correctly either. Fortunately though, the source and header files will be automatically included into the qmake project file as needed, and the they will appear in their appropriate subfolders in project explorer panel as well.\n\nAfter getting such a triviality out of the way, we can now finally discuss how to create a project with unit tests. Since Qt Creator supports at least two build systems and two unit testing frameworks out of the box, the programmer is given some flexibility how to approach such a task. I will not explore all combinations and possibilities, but will only demonstrate some approaches I tried.\n\nOne of qmakeâs features is that it allows the creation of a âSubdirsâ project, which basically means that there are several subfolders, each containing its own source files and qmake project files, which are then in turn managed by the master .pro file found in the root folder of the entire project. This allows the programmer to establish a more fine-grained control over how sources placed into different subfolders are built, and in fact this feature is actually quite similar (if not identical) to what CMake offers as well (though Iâm not sure if CMake made this a special thing by naming it). From first glance, this might seem like the perfect setup to create a main and a test project, where the aforementioned flexibility can be used to build the different sources according to their purpose. An example file structure for such an arrangement can be seen below.\n\nUnfortunately, despite this setup looking really promising, there was a problem I couldnât fix, namely that qmake treated the entire project as a test project, regardless if only the test project was declared to be a test (.pro file contained âQT += testlibâ and âCONFIG += testcaseâ). This meant that although I was able to compile the sources, the generated executable for the main program didnât start except for the executable of the test. If I removed the tests from the entire project, the main program executable started working again. Iâm not sure what caused the problem, maybe I simply overlooked something. Nevertheless, I was expecting this to work, since the .pro files were mostly auto-generated by Qt Creator and one would assume that such a setup was tested at Qt headquarters for ease of use.\n\nNOTE: a solution to this problem has been found since, please check the link to the the new post at the bottom of the page\n\nAnyway, since the online documentation wasnât overly clear how to make such a setup work, I decided not to spend an excessive amount of time on trying to make this work, especially considering that qmake is in the process of being replaced by something else (qbs). Instead, I came up with an alternate approach that seemed not to compromise too much on the flexibility of the previous one, yet it was still mostly easy to configure. The idea was to create a main project (MyProject) first, then place the tests (ProjTests) into a subfolder of MyProject while it is being managed by a completely separete project file. This way all the sources and tests would be in the same root folder, and with a bit of tweaking of the test project file, both projects would be pointing to the same source files, which in turn allows simultaneous usage and development from whichever project. Hereâs the new project tree:\n\nThis works just fine, because qmake (or CMake for that matter) doesnât treat any folder or file as part of the project unless it is explicitly specified in the .pro file, so having ProjTests as a subfolder of MyProject doesnât pose a problem at all. An astute reader might have already spotted that I chose CMake to manage the test project, and there is a good reason for that: when new files are being added through the main project, the test projectâs config file doesnât get updated automatically. Since CMake doesnât require an explicit mention of the header and .ui files (unlike qmake) in the config file, it is less of a burden to maintain it manually.\n\nApart from the above mentioned manual addition of the to be tested source files, the amount of manipulation one needs to do on CMakeLists.txt is surprisingly minimal: to make the example folder structure above work, one just needs to provide a proper path for the to be tested source files (which can be both an absolute and relative path) and insert it before the source file names in âadd_executable()â. Adding the path to âinclude_directories()â doesnât hurt either. If the user is careful and files are only added when the main project is active in the project explorer pane of Qt Creator, the qmake file doesnât need manual editing at all.\n\nThe following CMake and qmake files show how to work with a file tree presented above, while both Qt and OpenCV frameworks are used by the project as well. Speaking of frameworks, it is really important to remember that since the test and main projects are handled entirely separately, the inclusion of additional frameworks in only one of the project files is not enough to make the compilation work in all cases. Letâs see the files:\n\nMain project config file:\n\nqmake\n\nTest project config file:\n\nCMake\n\nOne last thing that is worth mentioning, is that Qt Creator usually likes to compile files into a folder one level above the source folder, which in the current setup means the that the tests will be placed directly into the MyProject folder along with the other sources. This is obviously not desirable, so a small adjustment of the âBuild directoryâ entry in Qt Creatorâs âProjects Modeâ window will solve such issues.\n\nAs with many things, there are advantages and disadvantages to such a setup. An advantage is that despite the fact that the source and test trees are handled separately, continuous and seamless development is still provided, as the same source files are used in both projects. A disadvantage is that the IDE will automatically add source files into one project file only, the other one needs to be maintained manually when new files are created. As mentioned before, this is not that big of a burden if one uses CMake for the test project (I know, I know, with large projects this still can be a problem, but a clever script might quickly convert this to a no-problem).\n\nAs always, thanks for reading."
    }
}