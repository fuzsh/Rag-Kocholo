{
    "id": "dbpedia_5007_3",
    "rank": 87,
    "data": {
        "url": "https://vitux.com/compiling-your-first-qt-program-in-ubuntu/",
        "read_more_link": "",
        "language": "en",
        "title": "Compiling your first Qt Program in Ubuntu – VITUX",
        "top_image": "https://vitux.com/wp-content/uploads/2019/04/word-image-167.png",
        "meta_img": "",
        "images": [
            "https://vitux.com/wp-content/uploads/2019/05/qt-program-in-ubuntu.jpg",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-167.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-168.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-169.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-170.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-171.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-172.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-173.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-174.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-175.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-176.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-177.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-178.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-179.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-180-1024x583.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-181.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-182.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-183.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-184.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-185.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-186-1024x452.png",
            "https://vitux.com/wp-content/uploads/2019/04/word-image-187.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Karim Buzdar"
        ],
        "publish_date": "2019-05-06T12:48:26+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://vitux.com/compiling-your-first-qt-program-in-ubuntu/",
        "text": "Qt is a free, open source, and cross-platform application development framework for desktop, embedded and mobile. It supports various platforms such as Linux, OS X, Windows, VxWorks, QNX, Android, iOS, BlackBerry, Sailfish OS, and others. More than a programming language. Qt is a framework written in C++. A preprocessor, Meta-Object Compiler is used to extend the C++ language with features like signals and slots. Before the compilation step, the MOC parses the source files written in Qt-extended C++ and generates standard compliant C++ sources from them. Thus the framework itself and applications/libraries using it can be compiled by any standard compliant C++ compiler like Clang, GCC, ICC, MinGW, and MSVC.\n\nIn this article, we will first describe how to install the Qt Creator through the command line. Then, we will explain how to write a simple Qt Hello World program and run it through:\n\nThe Command line\n\nThe Qt Compiler GUI\n\nWe have run the commands and procedures mentioned in this article on a Ubuntu 18.04 LTS system.\n\nInstalling Qt Creator\n\nLet us first start by installing the Build Essential that is a meta package that lets you install and use c++ tools in Ubuntu.\n\nOpen the Ubuntu command line, the Terminal, either through the Application Launcher search bar or the Ctrl+Alt +T shortcut.\n\nThen run the following command as sudo in order to update your local repository index with that of the Internet:\n\n$ sudo apt-get update\n\nThis command lets you install the latest available software packages available on the Internet.\n\nNow, run the following command as sudo in order to install the Build Essential package:\n\n$ sudo apt-get install build-essential\n\nPlease note that only an authorized user can add, remove, update, and configure software on Ubuntu. Please provide your password and enter Y when the system prompts you with a choice to continue the installation.\n\nNext, run the following command as sudo in order to install the Qt Creator package that contains both the UI and command line tools for Qt project creation and execution.\n\n$ sudo apt-get install qtcreator\n\nPlease enter Y when the system prompts you with a choice to continue the installation.\n\nIf you want Qt 5 to be used as the default Qt Creator version, then run the following command:\n\n$ sudo apt install qt5-default\n\nPlease enter Y when the system prompts you with a choice to continue the installation.\n\nFor deploying more complex projects later, you will need to install the Qt documentation and examples. You can do so by running the following command as sudo:\n\n$ sudo apt-get install qt5-doc qtbase5-examples qtbase5-doc-html\n\nqt5-doc: This package contains the Qt 5 API Documentation.\n\nqtbase5-examples: This package contains the Qt Base 5 examples.\n\nqtbase5-doc-html: This package contains the HTML documentation for the Qt 5 Base libraries.\n\nPlease enter Y when the system prompts you with a choice to continue the installation.\n\nYou are now ready to use the Qt Creator command line and UI tools!\n\nYour first Qt Program; Written and compiled from the Terminal\n\nA Terminal-savvy person like me is always on a look out for finding solutions for all the programming problems within the Terminal itself. It is after all, very simple to write and compile Qt programs from the Ubuntu command line. Please follow these steps in order to write and execute a simple program Qt program from the Terminal.\n\nStep 1: Create a Project Directory\n\nLet us first create a working directory that will later serve as a project directory for our Qt project.\n\n$ mkdir SampleProject\n\nYou can, of course, choose project and file names according to your own wishes. Just be consistent and careful with them as you follow the steps of this tutorial.\n\nStep 2: Create a .cpp file in the project directory\n\nMove to the newly created project directory through the following command:\n\n$ cd SampleProject\n\nThen, create a main .cpp file in this directory through the nano editor as follows:\n\n$ nano testmain.cpp\n\nYou can, of course, use any of your favorite text editors for this purpose.\n\nIn the blank file, copy this Qt program whose sole purpose is to print a line of sentence on a window with the title “My First Qt Program”.\n\n#include <QApplication> #include <QLabel> #include <QWidget> int main(int argc, char *argv[ ]) { QApplication app(argc, argv); QLabel hello(\"<center>Welcome to my first Qt program</center>\"); hello.setWindowTitle(\"My First Qt Program\"); hello.resize(400, 400); hello.show(); return app.exec(); }\n\nTip: You can copy this code by selecting it from here, and then paste it in the file by using the Ctrl+Shift +V shortcut. Alternatively, you can paste the selected text by using the Paste option from the right-click menu in the File.\n\nQuit the file by using the Ctrl+X shortcut and then save it by entering Y, and then hitting Enter.\n\nStep 3: Create the Qt project file\n\nAfter saving the file, run the following command in order to create a Qt Project file:\n\n$ qmake -project\n\nRunning the ls command will display that the above command has created a file by the name of SampleProject.pro in the project directory. This project file is the basic skeleton file for Qt projects and it can be edited for complex purposes.\n\nStep 4: A little configuration to the Qt project file\n\nAs we want to compile out project from the command line, we will need to add the following line to our .pro file.\n\nQT += gui widgets\n\nOpen the SampleProject.pro file in the nano editor as follows:\n\n$ nano SampleProject.pro\n\nAdd the above-mentioned line and Save the file by hitting Ctrl+X, and then by entering Y and hitting Enter.\n\nStep 5: Run qmake to make the project platform-specific\n\nTo make the .pro file platform specific, you need to run the following command on the project file:\n\n$ qmake SampleProject.pro\n\nThis will create a file by the name of “Makefile” in the project directory. You can verify this by running the ls command, just as I did.\n\nStep 6: Create and Executable Qt File for the project\n\nThe following make command will help you in compiling the Makefile into an executable program.\n\n$ make\n\nProviding that there are no errors in your project, this command should create an executable program in your working directory. You can verify this by running the ls command, just as I did.\n\nThe SampleProject file, in green color, is my executable Qt file.\n\nStep 7: Run the Executable file\n\nFinally, we are ready to run the executable file we created in the last step through the Terminal. Run the following command to do so:\n\n$ ./SampleProject\n\nHere is the output of the program:\n\nA window with a title and label that we provided in the code!\n\nYour first Qt Program, compiled from the Qt Creator UI\n\nIf you are interested in executing the same program from the Qt Creator UI, please follow this procedure:\n\nLaunch Qt Creator\n\nLaunch the Qt Creator application either through the system Application Launcher search as follows, or directly through the Applications listing.\n\nYou can even launch it by entering the following command in your Terminal:\n\n$ qtcreator\n\nCreate a Qt Project\n\nThe application will open in the following view.\n\nCreate a new project by Clicking on the New Project button in the following Projects view:\n\nThis will open the New File or Project view as follows:\n\nWe will be choosing a template for our project here. Click on the Application option from the Project panel and select Qt Widgets Application as a template. This template creates a Qt application for the desktop. It includes a Qt Designer-based main window. Click on the Choose button after making your selections; this will open the following Qt Widgets Application view:\n\nEnter the name of your Qt project and specify the location where you want to create it. Then click Next; it will open the following view for you to make a Kit Selection:\n\nMake sure that Desktop is selected as the kit, and then click Next. You will then be presented with the Class Information as follows:\n\nYou can, of course, change the class names according to your will but for your first Qt program, we prefer you use the default file names. Click Next and you will be presented with the following Project Management details:\n\nClick the Finish button and you are ready to work on your first Qt project.\n\nYour First Qt Program\n\nThe Qt Creator will open your mainwindow.cpp file by default. Click on the main.cpp file from the Project hierarchy presented in the left-most panel. In the main.cpp file, replace the existing code with the following one:\n\n#include <QApplication> #include <QLabel> #include <QWidget> int main(int argc, char *argv[ ]) { QApplication app(argc, argv); QLabel hello(\"<center>Welcome to my first Qt program</center>\"); hello.setWindowTitle(\"My First Qt Program\"); hello.resize(400, 400); hello.show(); return app.exec(); }\n\nThis is how your project window should look like:\n\nSave the file by using the Ctrl+S shortcut or by selecting Save from the File menu.\n\nRunning the Program\n\nFinally, Run the project by using the Ctrl+R shortcut or by selecting Run from the Build menu.\n\nYour program will be compiled and run, and you will be able to see the following output:\n\nA window with our specified title and label! Do not forget to build the project before running it, the next time you make any changes to the code.\n\nSo, this was all you needed to know in order to write, compile, and run your first Qt program. You can choose if the command line or the UI method suits you more, depending on your project needs and personal preferences."
    }
}