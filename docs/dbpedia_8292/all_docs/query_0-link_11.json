{
    "id": "dbpedia_8292_0",
    "rank": 11,
    "data": {
        "url": "https://danielrosehill.medium.com/how-to-save-a-clonezilla-full-disk-image-to-an-nas-over-ssh-771beb37f08b",
        "read_more_link": "",
        "language": "en",
        "title": "How to save a Clonezilla full disk image to a server/NAS over SSH",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*xiSE_g4rSYKBhDdRCoIavg.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*xiSE_g4rSYKBhDdRCoIavg.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/2*p4YnJUGvmtRcmKBHPfAgmA.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/2*p4YnJUGvmtRcmKBHPfAgmA.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Daniel Rosehill",
            "danielrosehill.medium.com"
        ],
        "publish_date": "2020-06-21T08:13:44.951000+00:00",
        "summary": "",
        "meta_description": "Clonezilla is one of my favorite backup tools (and that has nothing to do with the fact that it is free!). It’s a tiny bootable GNU/Linux utility that is designed to be written to a live USB. And…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://danielrosehill.medium.com/how-to-save-a-clonezilla-full-disk-image-to-an-nas-over-ssh-771beb37f08b",
        "text": "Clonezilla is one of my favorite backup tools (and that has nothing to do with the fact that it is free!).\n\nIt’s a tiny bootable GNU/Linux utility that is designed to be written to a live USB. And once running on the system, it can replicate the system disks onto both local and remote targets (for the latter think AWS S3 buckets — it can directly write to them!).\n\nUnlike most system backup programs, which work by creating comparatively light differential/incremental backups to creative plentiful restore points to roll back the system to, Clonezilla is the kind of tool that you want to have on hand when things go really wrong or when you need to try restore your old operating system on completely new hardware. The only catch is that you need to create backups for those eventualities before you get to that point. And if you want the restores to be as useful to you as possible, you’ll also want to complete the process relatively frequently (just not quite as frequently as your incrementals.)\n\nSo what’s so special about it, then?\n\nFor one, it’s a disk imaging tool which is designed to achieve bare metal backups. That means that it creates an exact replicas of your computer’s storage on another. It captures the whole system so takes ‘full’ backups. But instead of choosing what files and directories you want to include in a backup set, Clonezilla operates at the hardware level: you can back up specific partitions or entire drives (it supports ext4 as well as FAT32 and NFTS and many more … so is OS-agnostic).\n\nUnlike many backup programs, Clonezilla also runs from a cold system: you’ll boot into it with nothing else running and won’t be able to use your desktop/laptop while it’s executing the backup job.\n\nBecause disk imaging tools are designed to back up everything on a system, as we have seen, they aren’t really suitable for creating those frequent restore points that I just mentioned. It would be a needlessly inefficient use of disk space given that much lighter backup methodologies have been developed.\n\nBut as a last resort / Swiss Army Knife for when things go wrong, disk imaging platforms (and Acronis True Image is among the best known commercial alternatives) are still widely used and in a class of their own.\n\nAnd incidentally it’s not all bad news when comparing image replication to lighter backup approaches.\n\nThe fact that it is a full disk backup actually gives it one advantage over lighter differential and incremental backups. Incremental backups form a chain since the first backup and — in many backup systems — a restore is dependent upon all those incremental slices being good (uncorrupted) data, which is not always the case. With a full disk backup — you just restore from one archive and that data chunk is not dependent on any other one.\n\nFor the reasons outlined above, many companies use a combination of incremental backups for day-to-day data protection and less frequent full disk imaging\n\nIn the pre-Synology era, I kept a separate backup SSD on my computer just for holding my Clonezilla images. Alongside Timeshift (rsync-based, incremental) these two backups were my onsite backup sources. When my DS920+ arrived from Synology last week I made it my priority to start backing up onto the NAS rather than internal drives.\n\nAnd here’s how I managed to get Clonezilla backups onto the NAS.\n\nHow To Take a Clonezilla Backup over the LAN\n\n(Images from the Clonezilla website.)\n\n1. Select the backup methodology and enable the right file services\n\nAfter booting into Clonezilla, when you reach the screen asking you where to mount the Clonezilla image directory you want to select ‘SSH server.’\n\nNote:\n\nYou can also create the backup to the Synology NAS over Samba or NFS. However all of these options — including SSH — need to first be enabled on the device via DSM.\n\nIn order to do that, navigate to ‘File Services’ in the Control Panel.\n\nThen you will need to enable the service you wish to use for backing up (or saving) to the device over the Local Area Network (LAN):\n\n2. Create a shared folder for the backup\n\nNext, I recommend creating a shared folder on the network simply called ‘Clonezilla’\n\nAs we will see in the next step, your target needs to be a real directory on the NAS in order for Clonezilla to authenticate with it.\n\n3. Change mount path to the shared folder\n\nFirstly, you’ll need to provide the local IP address of the NAS / server and then provide login credentials.\n\nClonezilla will then need to know where to mount for saving the backup on the target.\n\nBy default this is set to /home/partimag.\n\nThe problem is that this path almost certainly doesn’t exist on your target. So you need to set it to one that does.\n\nAs we just created Clonezilla we can simply change the path to /Clonezilla.\n\nIn other words change the dialog to one leading slash followed by the the volume name. Do not enter the colon.\n\nThe full syntax is :\n\nuser@nas.ip:/[SharedVolume]\n\nThis is very important.\n\nIf you do not do this — and leave the default option unchanged — in many cases Clonezilla will fail to complete its authentication check with the NAS and you won’t be able to run the disk cloning job. It took me about five failed attempts to run this backup before I realized that this was the problem!\n\n4. Approve the backup job\n\nIf you get to a screen like — in which the NAS or server sends the terminal its key fingerprint for acceptance — then you can breathe a sigh of relief. Your computer has just demonstrated that it has interfaced with the server/NAS, read some of its hardware information, and is poised to take the next step in the backup process.\n\nAfter this, make sure that you have your source and target correct, as usual, and proceed to run the backup. Performance might be slightly slower than what you are used to, but the image should saved within the folder name you have created on the NAS/server.\n\nAnd that’s it: you should now be the proud owner of a heavy but useful full disk image clone of your computer’s operating system.\n\nAfter navigating into the Clonezilla shared volume, I was able to find the full backup I head taken.\n\nInside, it looks like this:"
    }
}