{
    "id": "correct_subsidiary_00129_3",
    "rank": 80,
    "data": {
        "url": "https://epdf.pub/role-based-access-control-second-edition.html",
        "read_more_link": "",
        "language": "en",
        "title": "Based Access Control, Second Edition",
        "top_image": "https://epdf.tips/assets/img/epdf_logo.png",
        "meta_img": "https://epdf.tips/assets/img/epdf_logo.png",
        "images": [
            "https://epdf.tips/assets/img/epdf_logo.png",
            "https://epdf.tips/img/300x300/adaptive-control-second-edition_5bf0e4f5b7d7bcfa1f27fd1d.jpg",
            "https://epdf.tips/img/300x300/vehicle-access-control-market_5f3662ea9a3be27b0a8b4e5b.jpg",
            "https://epdf.tips/img/300x300/alison-balters-mastering-access-97-development-pre_5a4ed3a9b7d7bcad2162c9bf.jpg",
            "https://epdf.tips/img/300x300/construction-project-scheduling-and-control-second_5a90ac04b7d7bc5211d7bf1a.jpg",
            "https://epdf.tips/img/300x300/control-of-machines-revised-second-edition_5b39b1a6b7d7bca20468ea92.jpg",
            "https://epdf.tips/img/300x300/mosquitoes-and-their-control-second-edition_5b4b1cc6b7d7bc6848a1d952.jpg",
            "https://epdf.tips/img/300x300/handbook-of-chaos-control-second-edition_5ab2eb0cb7d7bc957368c707.jpg",
            "https://epdf.tips/img/300x300/vehicle-access-control-market-analysis-share-2026_5e7d75169a3be2d12c8b485a.jpg",
            "https://epdf.tips/img/300x300/access-control-in-data-management-systems_5a642526b7d7bcbf647f68e8.jpg",
            "https://epdf.tips/img/300x300/healthcare-hazard-control-and-safety-management-se_5ad00401b7d7bc575ffdc4fd.jpg",
            "https://epdf.tips/img/300x300/computer-numerical-control-of-machine-tools-second_5a84c63eb7d7bcc676a682d4.jpg",
            "https://epdf.tips/img/300x300/theory-of-applied-robotics-kinematics-dynamics-and_5b85dc3cb7d7bcd361b27c56.jpg",
            "https://epdf.tips/img/300x300/media-control-second-edition-the-spectacular-achie_5aef8452b7d7bc5657abc2ec.jpg",
            "https://epdf.tips/img/300x300/access_5c0aab00b7d7bc6615a4b0bc.jpg",
            "https://epdf.tips/img/300x300/automotive-control-systems-for-engine-driveline-an_5a5a9af6b7d7bc075c00f241.jpg",
            "https://epdf.tips/img/300x300/statistical-process-control-the-deming-paradigm-an_5afd02fab7d7bc7569cf447b.jpg",
            "https://epdf.tips/img/300x300/media-control-the-spectacular-achievements-of-prop_5aef844fb7d7bc595740bfbe.jpg",
            "https://epdf.tips/img/300x300/take-control-of-media-on-your-ipad-second-edition_5a92303ab7d7bc1c7631b2f9.jpg",
            "https://epdf.tips/img/300x300/statistical-process-control-the-deming-paradigm-an_5afd03afb7d7bc7569cf447e.jpg",
            "https://epdf.tips/img/300x300/power-system-dynamics-stability-and-control-second_5b9b907ab7d7bcfd12c5c274.jpg",
            "https://epdf.tips/img/300x300/control-theory-2nd-edition_5bfd22f4b7d7bcf41f505d44.jpg",
            "https://epdf.tips/img/300x300/robot-manipulator-control-theory-and-practice-seco_5b3abe02b7d7bccd6b45f0e3.jpg",
            "https://epdf.tips/img/300x300/merger-control-worldwide-second-supplement-to-the-_5b442b8bb7d7bc986b4b85a8.jpg",
            "https://epdf.tips/img/300x300/mathematical-analysis-second-edition_5b39a8b2b7d7bca20468e9fe.jpg",
            "https://epdf.tips/img/300x300/customercentric-selling-second-edition_5ae71d57b7d7bc4013c15bf4.jpg",
            "https://epdf.tips/img/300x300/regression-analysis-second-edition_5b3d923ab7d7bcb149538222.jpg",
            "https://epdf.tips/img/300x300/delphi-cookbook-second-edition_5bb1b28e9a3be2954e8b46f2.jpg",
            "https://epdf.tips/img/300x300/flight-catering-second-edition_5ea7ad3f097c47d2248b52cb.jpg",
            "https://epdf.tips/img/300x300/mycorrhizal-symbiosis-second-edition_5ac6a77fb7d7bc266e21e1a4.jpg",
            "https://epdf.tips/img/300x300/topological-geometry-second-edition_5b3ac05bb7d7bcd06b297284.jpg",
            "https://epdf.tips/img/60x80/adaptive-control-second-edition_5bf0e4f5b7d7bcfa1f27fd1d.jpg",
            "https://epdf.tips/img/60x80/vehicle-access-control-market_5f3662ea9a3be27b0a8b4e5b.jpg",
            "https://epdf.tips/img/60x80/alison-balters-mastering-access-97-development-pre_5a4ed3a9b7d7bcad2162c9bf.jpg",
            "https://epdf.tips/img/60x80/construction-project-scheduling-and-control-second_5a90ac04b7d7bc5211d7bf1a.jpg",
            "https://epdf.tips/img/60x80/control-of-machines-revised-second-edition_5b39b1a6b7d7bca20468ea92.jpg",
            "https://epdf.tips/img/60x80/mosquitoes-and-their-control-second-edition_5b4b1cc6b7d7bc6848a1d952.jpg",
            "https://epdf.tips/img/60x80/handbook-of-chaos-control-second-edition_5ab2eb0cb7d7bc957368c707.jpg",
            "https://epdf.tips/img/60x80/vehicle-access-control-market-analysis-share-2026_5e7d75169a3be2d12c8b485a.jpg",
            "https://epdf.tips/img/60x80/access-control-in-data-management-systems_5a642526b7d7bcbf647f68e8.jpg",
            "https://epdf.tips/img/60x80/healthcare-hazard-control-and-safety-management-se_5ad00401b7d7bc575ffdc4fd.jpg"
        ],
        "movies": [
            "/pdfviewer/web/viewer.html?file=https%3A%2F%2Fepdf.tips%2Fdownload%2Frole-based-access-control-second-edition.html%3Freader%3D1"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Guest"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Role-Based Access Control Second Edition For quite a long time, computer security was a rather narrow field of study ...",
        "meta_lang": "en",
        "meta_favicon": "https://epdf.tips/assets/img/apple-icon-57x57.png",
        "meta_site_name": "epdf.tips",
        "canonical_link": "https://epdf.tips/role-based-access-control-second-edition.html",
        "text": "Role-Based Access Control Second Edition\n\nFor quite a long time, computer security was a rather narrow field of study that was populated mainly by theoretical computer scientists, electrical engineers, and applied mathematicians. With the proliferation of open systems in general, and of the Internet and the World Wide Web (WWW) in particular, this situation has changed fundamentally. Today, computer and network practitioners are equally interested in computer security, since they require technologies and solutions that can be used to secure applications related to electronic commerce. Against this background, the field of computer security has become very broad and includes many topics of interest. The aim of this series is to publish state-of-the-art, high standard technical books on topics related to computer security. Further information about the series can be found on the WWW at the following URL: http://www.esecurity.ch/serieseditor.html Also, if you’d like to contribute to the series by writing a book about a topic related to computer security, feel free to contact either the Commissioning Editor or the Series Editor at Artech House.\n\nRecent Titles in the Artech House Information Security and Privacy Series Rolf Oppliger, Series Editor\n\nPrivacy Protection and Computer Forensics, Second Edition, Michael A. Caloyannides Demystifying the IPsec Puzzle, Sheila Frankel Developing Secure Distributed Systems with CORBA, Ulrich Lang and Rudolf Schreiner Implementing Electronic Card Payment Systems, Cristian Radu Implementing Security for ATM Networks, Thomas Tarman and Edward Witzke Information Hiding Techniques for Steganography and Digital Watermarking, Stefan Katzenbeisser and Fabien A. P. Petitcolas, editors Internet and Intranet Security, Second Edition, Rolf Oppliger Non-repudiation in Electronic Commerce, Jianying Zhou Role-Based Access Control, Second Edition, David F. Ferraiolo, D. Richard Kuhn, and Ramaswamy Chandramouli Secure Messaging with PGP and S/MIME, Rolf Oppliger Security Fundamentals for E-Commerce, Vesna Hassler Security Technologies for the World Wide Web, Second Edition, Rolf Oppliger Software Verification and Validation for Practitioners and Managers, Second Edition, Steven R. Rakitin\n\nRole-Based Access Control Second Edition David F. Ferraiolo D. Richard Kuhn Ramaswamy Chandramouli\n\nartechhouse.com\n\nLibrary of Congress Cataloging-in-Publication Data A catalog record for this book is available from the U.S. Library of Congress.\n\nBritish Library Cataloguing in Publication Data A catalogue record for this book is available from the British Library.\n\nISBN 13: 978-1-59693-113-8 Cover design by Yekaterina Ratner\n\n© 2007 ARTECH HOUSE, INC. 685 Canton Street Norwood, MA 02062 All rights reserved. Printed and bound in the United States of America. No part of this book may be reproduced or utilized in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage and retrieval system, without permission in writing from the publisher. All terms mentioned in this book that are known to be trademarks or service marks have been appropriately capitalized. Artech House cannot attest to the accuracy of this information. Use of a term in this book should not be regarded as affecting the validity of any trademark or service mark.\n\n10 9 8 7 6 5 4 3 2 1\n\nIn memory of my late father, and to my wife, Hildegard, and my sons, Michael and Josef, for the time I spent at my computer instead of with them –DFF To my parents, Richard and Jane Kuhn, and my children, Gary, Christine, and Kevin, with love –DRK To my dear father, late mother, loving wife, Mira, and dear daughters, Dipika and Divya –RC\n\nContents Preface\n\n.\n\n.\n\n.\n\n.\n\n.\n\nAcknowledgments 1\n\nIntroduction .\n\n.\n\n. .\n\n.\n\n. .\n\n.\n\n. .\n\n.\n\n. .\n\n.\n\n. .\n\n.\n\n. .\n\n.\n\n. .\n\n.\n\n. .\n\nxv\n\n. .\n\nxix .\n\n1.1 The purpose and fundamentals of access control\n\n1 2\n\n1.1.1 Authorization versus authentication\n\n3\n\n1.1.2 Users, subjects, objects, operations, and permissions\n\n4\n\n1.1.3 Least privilege\n\n5\n\n1.2 A brief history of access control\n\n6\n\n1.2.1 Access control in the mainframe era\n\n6\n\n1.2.2 Department of Defense standards\n\n8\n\n1.2.3 Clark-Wilson model\n\n9\n\n1.2.4 Origins of RBAC\n\n9\n\n1.3 Comparing RBAC to DAC and MAC\n\n17\n\n1.4 RBAC and the enterprise\n\n18\n\n1.4.1 Economics of RBAC\n\n19\n\n1.4.2 Authorization management and resource provisioning\n\n20\n\nReferences\n\n24\n\n2 Access Control: Properties, Policies, and Models . . . . . . . . . .\n\n.\n\n.\n\n27\n\n2.1 Access control: objectives and enforcement artifacts\n\n27\n\n2.2 Access control: core entities and principles\n\n30\n\nvii\n\nviii\n\nContents 2.2.1 Subjects and objects\n\n30\n\n2.2.2 Principles of secure design\n\n31\n\n2.3 Reference monitor and security kernel\n\n33\n\n2.3.1 Completeness\n\n34\n\n2.3.2 Isolation\n\n35\n\n2.3.3 Verifiability\n\n36\n\n2.3.4 The reference monitor—necessary, but not sufficient\n\n37\n\n2.4 Access control matrix\n\n37\n\n2.5 Access control data structures\n\n42\n\n2.5.1 Capability lists and access control lists (ACLs)\n\n42\n\n2.5.2 Protection bits\n\n44\n\n2.6 Discretionary access control (DAC) policies\n\n44\n\n2.7 MAC policies and models\n\n45\n\n2.7.1 Bell-LaPadula model\n\n46\n\n2.8 Biba’s integrity model\n\n47\n\n2.9 The Clark-Wilson model\n\n48\n\n2.10\n\nThe Chinese wall policy model\n\n50\n\n2.11\n\nThe Brewer-Nash model\n\n51\n\n2.12\n\nDomain-type enforcement (DTE) model\n\n52\n\nReferences\n\n54\n\n3\n\nCore RBAC Features .\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n57\n\n3.1 Roles versus ACL groups\n\n59\n\n3.2 Core RBAC\n\n61\n\n3.2.1 Administrative support\n\n61\n\n3.2.2 Permissions\n\n62\n\n3.2.3 Role activation\n\n64\n\n3.3 Mapping the enterprise view to the system view\n\n4\n\n65\n\n3.3.1 Global users and roles and indirect role privileges\n\n68\n\n3.3.2 Mapping permissions into privileges\n\n69\n\nRole Hierarchies\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n73\n\n4.1 Building role hierarchies from flat roles\n\n74\n\n4.2 Inheritance schemes\n\n75\n\n4.2.1 Direct privilege inheritance\n\n75\n\n4.2.2 Permission and user membership inheritance\n\n76\n\nContents\n\nix 4.2.3 User containment and indirect privilege inheritance\n\n78\n\n4.3 Hierarchy structures and inheritance forms\n\n81\n\n4.3.1 Connector roles\n\n82\n\n4.3.2 Organization chart hierarchies\n\n85\n\n4.3.3 Geographical regions\n\n87\n\n4.4 Accounting for role types\n\n89\n\n4.5 General and limited role hierarchies\n\n90\n\n4.6 Accounting for the Stanford model\n\n93\n\nReferences\n\n5\n\n95\n\nSoD and Constraints in RBAC Systems\n\n.\n\n.\n\n5.1 Types of SoD\n\n97 100\n\n5.1.1 Static SoD\n\n100\n\n5.1.2 Dynamic SoD\n\n104\n\n5.1.3 Operational SoD\n\n105\n\n5.1.4 History and object-based SoD\n\n106\n\n5.2 Using SoD in real systems\n\n107\n\n5.2.1 SoD in role hierarchies\n\n108\n\n5.2.2 Static and dynamic constraints\n\n109\n\n5.2.3 Mutual exclusion\n\n110\n\n5.2.4 Effects of privilege assignment\n\n111\n\n5.2.5 Assigning privileges to roles\n\n113\n\n5.2.6 Assigning roles to users\n\n114\n\n5.3 Temporal constraints in RBAC\n\n118\n\n5.3.1 Need for temporal constraints\n\n118\n\n5.3.2 Taxonomy of temporal constraints\n\n119\n\n5.3.3 Associated requirements for supporting temporal constraints\n\n122\n\nReferences\n\n123\n\n6\n\nRBAC, MAC, and DAC .\n\n.\n\n.\n\n.\n\n.\n\n6.1 Enforcing DAC using RBAC\n\n.\n\n.\n\n127 128\n\n6.1.1 Configuring RBAC for DAC\n\n129\n\n6.1.2 DAC with grant-independent revocation\n\n130\n\n6.1.3 Additional considerations for grant-dependent revocation\n\n131\n\n6.2 Enforcing MAC on RBAC systems 6.2.1 Configuring RBAC for MAC using static constraints\n\n131 132\n\nx\n\nContents 6.2.2 Configuring RBAC for MAC using dynamic constraints\n\n133\n\n6.3 Implementing RBAC on MLS systems\n\n136\n\n6.3.1 Roles and privilege sets\n\n138\n\n6.3.2 Assignment of categories to privilege sets\n\n139\n\n6.3.3 Assignment of categories to roles\n\n140\n\n6.3.4 Example of MLS to RBAC mapping\n\n141\n\n6.4 Running RBAC and MAC simultaneously\n\n143\n\nReferences\n\n7\n\nPrivacy and Regulatory Issues\n\n144\n\n.\n\n.\n\n.\n\n.\n\n7.1 Privacy requirements and access control framework\n\n147 148\n\n7.1.1 Incorporating privacy policies into the policy specification module\n\n148\n\n7.1.2 Enhance RBAC model with privacy-related entities and relationships\n\n151\n\n7.1.3 Justifications for additional entities in the RBAC model\n\n151\n\n7.1.4 Business purpose entity\n\n153\n\n7.1.5 Data usage entity\n\n154\n\n7.1.6 Privacy-aware RBAC model\n\n155\n\n7.2 Integrate privacy policy support in the role engineering process\n\n155\n\n7.2.1 Identifying business purposes and role-business purpose relationship instances\n\n157\n\n7.2.2 Identifying business purpose–task relationship instances\n\n157\n\n7.2.3 Identifying data usage entities and data usage–data object relationship instances\n\n158\n\n7.3 Authorization using privacy-RBAC-ACF\n\n160\n\n7.4 RBAC and regulatory compliance\n\n162\n\n8\n\n7.4.1 Sarbanes-Oxley Act compliance\n\n164\n\n7.4.2 Gramm-Leach-Bliley Act and HIPAA compliance\n\n166\n\n7.4.3 Compliance and the RBAC model\n\n166\n\n7.4.4 Considerations in using RBAC in regulatory compliance\n\n167\n\nReferences\n\n168\n\nRBAC Standards and Profiles .\n\n8.1 The ANSI/INCITS RBAC standard\n\n.\n\n.\n\n.\n\n.\n\n171 171\n\n8.1.1 Overview\n\n171\n\n8.1.2 The RBAC reference model\n\n172\n\n8.1.3 Functional specification overview\n\n173\n\n8.1.4 Functional specification for core RBAC\n\n174\n\nContents\n\nxi 8.1.5 Functional specification for hierarchical RBAC\n\n176\n\n8.1.6 Functional specification for static separation of duty (SSD) relation\n\n179\n\n8.1.7 Functional specification for a DSD relation\n\n180\n\n8.1.8 Options and packaging\n\n181\n\n8.1.9 Other RBAC standards\n\n183\n\n8.2 XACML profile for role-based access control\n\n185\n\nReferences\n\n9\n\n186\n\nRole-Based Administration of RBAC .\n\n.\n\n.\n\n189\n\n9.1 Background and terminology\n\n189\n\n9.2 URA02 and PRA02\n\n192\n\n9.3 Crampton-Loizou administrative model\n\n196\n\n9.3.1 Flexibility of administrative scope\n\n197\n\n9.3.2 Decentralization and autonomy\n\n198\n\n9.3.3 A family of models for hierarchical administration\n\n198\n\n9.4 Role control center\n\n203\n\n9.4.1 Inheritance and the role graph\n\n204\n\n9.4.2 Constraints\n\n206\n\n9.4.3 Role views\n\n206\n\n9.4.4 Delegation of administrative permissions\n\n207\n\n9.4.5 Decentralization and autonomy\n\n210\n\nReferences\n\n212\n\n10\n\nRole Engineering .\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n213\n\n10.1\n\nScenario-driven role-engineering approach\n\n215\n\n10.1.1 Scenarios and roles\n\n216\n\n10.1.2 Steps in the scenario-driven process\n\n217\n\n10.2\n\nGoal driven/hybrid role engineering approach\n\n220\n\n10.3\n\nTools for role discovery and role management\n\n224\n\n10.3.1 Sage DNA\n\n226\n\n10.3.2 Role Miner\n\n227\n\n10.3.3 SmartRoles\n\n228\n\n10.3.4 Contouring Engine\n\n229\n\n10.4\n\nExample RBAC installations\n\n229\n\n10.5\n\nRole engineering: health care example\n\n232\n\n10.5.1 Identify and model usage scenarios\n\n232\n\nxii\n\nContents 10.5.2 Derive permissions from scenarios\n\n234\n\n10.5.3 Identify permission constraints\n\n236\n\n10.5.4 Refine scenario model\n\n236\n\n10.5.5 Additional process activities\n\n237\n\nReferences\n\n237\n\n11 Enterprise Access Control Frameworks Using RBAC and XML Technologies . . . .\n\n239\n\n11.1\n\nConceptual view of EAFs\n\n239\n\n11.2\n\nEnterprise Access Central Model Requirements\n\n242\n\n11.2.1 EAM’s multiple-policy support requirement\n\n243\n\n11.2.2 EAM’s ease of administration requirement\n\n243\n\n11.3\n\nEAM specification and XML schemas\n\n244\n\n11.4\n\nSpecification of the ERBAC model in the XML schema\n\n246\n\n11.4.1 XML schema specifications for ERBAC model elements\n\n247\n\n11.4.2 XML schema specifications for ERBAC model relations\n\n250\n\n11.5\n\nEncoding of enterprise access control data in XML\n\n253\n\n11.6\n\nVerification of the ERBAC model and data specifications\n\n257\n\n11.7 Limitations of XML schemas for ERBAC model constraint representation\n\n258\n\n11.8 Using XML-encoded enterprise access control data for enterprisewide access control implementation\n\n262\n\n11.9\n\nConclusions\n\n268\n\nReferences\n\n268\n\n12 Integrating RBAC with Enterprise IT Infrastructures . . . . . . . . 12.1\n\n12.2\n\n.\n\n.\n\n271\n\nRBAC for WFMSs\n\n272\n\n12.1.1 Workflow concepts and WFMSs\n\n272\n\n12.1.2 WFMS components and access control requirements\n\n273\n\n12.1.3 Access control design requirements\n\n274\n\n12.1.4 RBAC model design and implementation requirements for WFMSs\n\n276\n\n12.1.5 RBAC for workflows—research prototypes\n\n279\n\nRBAC integration in Web environments\n\n280\n\n12.2.1 Implementing RBAC entirely on the Web server\n\n281\n\nContents\n\nxiii\n\n12.3\n\n12.2.2 Implementing RBAC for Web server access using cookies\n\n282\n\n12.2.3 RBAC on the Web using attribute certificates\n\n284\n\nRBAC for UNIX environments\n\n291\n\n12.3.1 RBAC for UNIX administration\n\n291\n\n12.3.2 RBAC implementation within the NFS\n\n296\n\nRBAC in Java\n\n299\n\n12.4.1 Evolution of Java security models\n\n300\n\n12.4.2 JDK 1.2 security model and enhancement\n\n301\n\n12.4.3 Incorporating RBAC into JDK 1.2 security model with JAAS\n\n304\n\nRBAC for FDBSs\n\n306\n\n12.5.1 IRO-DB architecture\n\n307\n\n12.5.2 RBAC model implementation in IRO-DB\n\n308\n\n12.6\n\nRBAC in autonomous security service modules\n\n309\n\n12.7\n\nConclusions\n\n311\n\nReferences\n\n311\n\n12.4\n\n12.5\n\n13 Migrating to RBAC—Case Study: Multiline Insurance Company . . .\n\n.\n\n.\n\n.\n\n315\n\n13.1\n\nBackground\n\n316\n\n13.2\n\nBenefits of using RBAC to manage extranet users\n\n316\n\n13.2.1 Simplifying systems administration and maintenance\n\n318\n\n13.2.2 Enhancing organizational productivity\n\n319\n\nBenefits of using RBAC to manage employees (intranet users)\n\n319\n\n13.3.1 Reduction in new employee downtime\n\n319\n\n13.3.2 Simplified systems administration and maintenance\n\n320\n\nRBAC implementation costs\n\n320\n\n13.4.1 Software and hardware expenses\n\n321\n\n13.4.2 Systems administrators’ labor expenses\n\n321\n\n13.4.3 Role engineering expenses\n\n321\n\nTime series of benefits and costs\n\n322\n\nReference\n\n324\n\n13.3\n\n13.4\n\n13.5\n\n14\n\nRBAC Features in Commercial Products .\n\n325\n\n14.1\n\nRBAC in relational DBMS products\n\n326\n\n14.1.1 Informix Dynamic Server version 9.3 (IBM)\n\n327\n\n14.1.2 Oracle Database 10g Release (10.2) (Oracle Corporation)\n\n329\n\nxiv\n\nContents\n\n14.2\n\n14.3\n\n14.1.3 Sybase Adaptive Server Enterprise 15.0 (Sybase)\n\n333\n\nRBAC in enterprise security administration software\n\n340\n\n14.2.1 CONTROL-SA (BMC software)\n\n342\n\n14.2.2 DirX Identity V7.0 (Siemens)\n\n346\n\n14.2.3 SAM Jupiter (Beta Systems)\n\n351\n\n14.2.4 Tivoli Identity Manager version 1.1 (IBM)\n\n356\n\nConclusions\n\n359\n\nReferences\n\n360\n\nAppendix A: XML Schema for the RBAC Model\n\n361\n\nAppendix B: XML-Encoded Data for RBAC Model . . . . . . . .\n\n.\n\n.\n\n.\n\n365\n\nAbout the Authors\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n369\n\nIndex\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n.\n\n371\n\n.\n\n.\n\n.\n\n.\n\nPreface\n\nR\n\nole-based access control (RBAC) is a technology that is attracting a great deal of attention, particularly for commercial applications, because of its potential for reducing the complexity and cost of security administration in large networked applications. Under RBAC, security administration is greatly simplified by using roles, hierarchies, and constraints to organize privileges. RBAC reduces costs within an organization, because it takes into account that employees change much more frequently than the duties within positions. Under RBAC, if, for example, an employee moves within an organization, only his or her role assignment is changed. Accordingly, it is unnecessary to revoke his or her existing privileges and assign a completely new set of privileges. RBAC can be configured to support a wide variety of access control policies, including traditional discretionary access control (DAC) and mandatory access control (MAC), as well as organization-specific policies. Recently, RBAC has also been found to be a natural access control facility for workflow management systems. The concept and design of RBAC make it perfectly suited to a wide variety of application and system software environments, for both stand-alone and distributed deployments. It provides a safe and effective way to manage access to an organization’s information, while reducing administration costs and minimizing errors. Over the past decade, interest in RBAC has increased dramatically, with most major information technology (IT) vendors offering a product that incorporates some form of role-based access. The profusion of new RBAC products offers many advantages for security administrators and software developers, but sorting out the capabilities of different products can be challenging. Until now, RBAC research has been documented in hundreds of research papers, but not consolidated in book form. This book explains RBAC and its administrative and cost advantages and implementation issues and the migration from conventional access control methods to RBAC.\n\nxv\n\nxvi\n\nPreface\n\nSpecialized topics—including role hierarchies, separation of duties, combining RBAC with military security models, and recent efforts toward standardization—are detailed. To enable system integrators to integrate RBAC into the various IT infrastructures found in an enterprise-like Web applications, such as Java and Federated Database Systems, the book provides an analysis of research ideas and prototypes built so far. The book also describes RBAC implementations in various commercial products and includes a case study documenting a large organization’s migration to a role-based security architecture. The second edition has added new materials and has revised some existing chapters to reflect developments in role engineering, standards, products, and regulatory issues. The two new chapters added to the book are: ◗\n\nPrivacy and Regulatory Issues (Chapter 7)\n\n◗\n\nRole Engineering (Chapter 10)\n\nThe following chapters have undergone major revision: ◗\n\nAccess Control: Properties, Policies, and Models (Chapter 2, renamed)\n\n◗\n\nRBAC Standards and Profiles (Chapter 8)\n\n◗\n\nRBAC Features in Commercial Products (Chapter 14)\n\nPrivacy protection has become an important element of information management due to regulatory requirements. Hence, we have added a new chapter that presents some ideas on how to enhance RBAC models to support privacy policies, and covers the impact of various privacy regulations on RBAC modeling aspects. Role engineering, the process of defining and structuring roles, is often regarded as the missing link in implementing RBAC, but new methodoligies and tools make the job easier. RBAC’s importance in industry has led to standards that contribute to lower costs and greater interoperability. RBAC models implemented in the latest versions of Database Management products and Enterprise Security Administration products (now relabeled as Identity Management products) are certainly more sophisticated than those in earlier versions; descriptions of these RBAC implementations have been added as well.\n\nIntended audience\n\nxvii\n\nIntended audience This book is designed to be useful to three groups of readers: (1) security professionals, technology managers, and users in industry, government, and military organizations, including system administrators responsible for security, policy officials, and technology officers; (2) software developers for database systems, enterprise management, security, and cryptographic products; and (3) computer science and IT students and instructors. The treatment is not excessively formal; mathematical descriptions of RBAC properties are included as sidebars, but the text is understandable without reference to them. Because computer security is such a rapidly changing field, we have included a discussion of research and commercial product documentation through this year.\n\nAcknowledgments\n\nF\n\nirst of all, we want to thank Tim Grance of the National Institute of Standards and Technology (NIST). Much of NIST’s contribution to RBAC research can be traced to Tim’s early persistent and continuing support, leadership, and counsel. We would also like to thank Andrew Marshall of TD Bank in Canada for his detailed review of material in Chapters 3 and 4 and his great insight regarding the application of role hierarchies to commercial business structures, and Leann Micheals for advice and counsel regarding medical applications, functions, and roles that were applied throughout this book. The authors also thank Dr. Martin Kuhlmann and Axel Kern of Beta Systems, Wiley Vasquez and Gary Holland of BMC Software, and Harald Kopper and Rudolf Wildgruber of Siemens AG, Thomas Raeuchle of Prodigen, Ed Zou of Bridgestream, and Ron Rymon of Eurekify for providing technical documentation pertaining to product offerings from their respective organizations. We are grateful to Michael Gallaher, Alan O’Connor, and Brian Kropp of the Research Triangle Institute and Greg Tassey of NIST for their excellent analysis of the economic impact of RBAC. We also thank the many contributors to the RBAC field from the public, academic, and private sectors, such as Gail-Joon Ahn, Vijay Atluri, Elena Ferrari, Arif Ghafoor, James Joshi, Trent Jaeger, Serban Gavrila, Virgil Gligor, Bill Majurski, Tony Cincotta, Wayne Jansen, Janet Cugini, Elisa Bertino, Konstantin Beznosov, Ed Coyne, Mike Davis, Anne Anderson, Richard Fernandez, Ninghui Li, Jonathan Moffett, Jason Crampton, Andreas Schaad, Luigi Giuri, and Pietro Iglio. Finally, we give special thanks to Ravi Sandhu and Sylvia Osborn for their early (through contemporary) efforts that have advanced the theory and practice of role-based access control.\n\nxix\n\nCHAPTER\n\n1 Contents 1.1 The purpose and fundamentals of access control 1.2 A brief history of access control 1.3 Comparing RBAC to DAC and MAC 1.4 RBAC and the enterprise\n\nIntroduction\n\nA\n\nccess control—or authorization, in its broadest sense—has existed as a concept for as long as humans have had assets worth protecting. Guards, gates, and locks have been used since ancient times to limit individuals’ access to valuables. A need for access control in fact prompted the invention of what can be regarded as the world’s first secure computing system. In 1879, a Dayton, Ohio, saloonkeeper named James Ritty invented the “incorruptible cashier,” which later became known as the cash register. Ritty’s invention reduced the common problem of employee pilfering by permitting access to the cash drawer only when a sale was rung up by entering the amount of the sale in full view of the customer. By recording the amount of sales and keeping a running total, the register made it possible for storeowners to ensure that the cash drawer contents matched the total sales made during the day. In today’s information technology, authorization is concerned with the ways in which users can access resources in the computer system, or informally speaking, with “who can do what.” Access control is arguably the most fundamental and most pervasive security mechanism in use today. Access control shows up in virtually all systems and imposes great architectural and administrative challenges at all levels of enterprise computing. From a business perspective, access control has the potential to promote the optimal sharing and exchange of resources, but it also has the potential to frustrate users, impose large administrative costs, and cause the unauthorized disclosure or corruption of valuable information.\n\n1\n\n2\n\nIntroduction\n\nAccess control can take many forms. In addition to determining whether a user has rights to use a resource, the access control system may constrain when and how the resource may be used. For example, a user may have access to a network only during working hours. Some organizations may establish more complex controls, such as requiring that two staff members conduct certain high-risk operations such as opening a vault or launching a missile. The definition and modeling of access control stem from seminal papers of the early 1970s, the early standardization efforts of the 1980s, and the emergence of RBAC that began in the early 1990s, and it continues to this day. This chapter introduces the origins, history, and central concepts of access control, reviews popular forms of access controls in use today, and introduces the basic concepts of RBAC and its advantages for system, application, and network security.\n\n1.1\n\nThe purpose and fundamentals of access control Access control is only one aspect of a comprehensive computer security solution, but it is one of the most visible. Every time a user logs on to a multiuser computer system, access control is enforced. To gain a better understanding of the purpose of access control, it is worth reviewing the risks to information systems. Information security risks can be broadly categorized into the following three types, confidentiality, integrity, and availability, which can be remembered with the convenient mnemonic “CIA.” These categories are described as follows: ◗\n\nConfidentiality refers to the need to keep information secure and private. This category may include anything from state secrets to confidential memoranda, financial information, and security information such as passwords.\n\n◗\n\nIntegrity refers to the concept of protecting information from being improperly altered or modified by unauthorized users. For example, most users want to ensure that bank account numbers used by financial software cannot be changed by anyone else and that only the user or an authorized security administrator can change passwords.\n\n◗\n\nAvailability refers to the notion that information is available for use when needed. Attacks that attempt to overload corporate Web servers, widely reported in the popular press, are attacks on availability.\n\n1.1\n\nThe purpose and fundamentals of access control\n\n3\n\nAccess control is critical to preserving the confidentiality and integrity of information. The condition of confidentiality requires that only authorized users can read information, and the condition of integrity requires that only authorized users can alter information in authorized ways. Access control is less obviously central to preserving availability, but it clearly has an important role: An attacker who gains unauthorized access to a system is likely to have little trouble bringing it down.\n\n1.1.1\n\nAuthorization versus authentication\n\nAuthorization and authentication are fundamental to access control. They are distinct concepts but often confused. Part of the confusion stems from the close relationship between the two; proper authorization in fact is dependent on authentication. Authentication is the process of determining that a user’s claimed identity is legitimate. Every computer user is familiar with passwords, the most common form of authentication. If Alice logs in as alice46 and then provides the correct password for user identification (ID) alice46, she has authenticated herself to the system. Less common forms of authentication include biometrics (e.g., fingerprint readers) and smart cards. Authentication is based on one or more of the following factors: ◗\n\nSomething you know, such as the password, personal identification number (PIN), or lock combination;\n\n◗\n\nSomething you have, such as a smart card, automatic teller machine (ATM) card, or key;\n\n◗\n\nSomething you are, or a physical characteristic, such as a fingerprint or retinal pattern, or a facial characteristic.\n\nClearly, authentication is normally stronger if two or more factors are used. A password can be guessed; a key can be lost; and face-recognition systems have a significant false positive rate, so using only one of these authentication methods may not provide an acceptable level of security. This is why banks require both cards and PINs to access ATMs rather than only a password, or only a key or card. If the card were lost, a thief would have to guess the PIN in only three tries to beat the authentication system. While authentication is a process of determining who you are, authorization determines what you are allowed to do. Authorization refers to a yes or no decision as to whether a user is granted access to a system resource. An information system must maintain some relationship between user IDs\n\n4\n\nIntroduction\n\nand system resources, possibly by attaching a list of authorized users to resources, or by storing a list of accessible resources with each user ID. Note that authorization necessarily depends on proper authentication. If the system cannot be certain of a user’s identity, there is no valid way of determining if the user should be granted access.\n\n1.1.2\n\nUsers, subjects, objects, operations, and permissions\n\nA reasonably consistent terminology has developed over the past 3 decades for describing access control models and systems. Almost any access control model can be stated formally using the notions of users, subjects, objects, operations, and permissions, and the relationships between these entities. It is important to understand these terms, because the reader will encounter them not only in this book but also in most of the literature on access control and computer security. The term user refers to people who interface with the computer system. In many designs, it is possible for a single user to have multiple login IDs, and these IDs may be simultaneously active. Authentication mechanisms make it possible to match the multiple IDs to a single human user, however. An instance of a user’s dialog with a system is called a session. A computer process acting on behalf of a user is referred to as a subject. Note that in reality, all of a user’s actions on a computer system are performed through some program running on the computer. A user may have multiple subjects in operation, even if the user has only one login and one session. For example, an e-mail system may be operating in the background, fetching e-mail from a server periodically, while the user operates a Web browser. Each of the user’s programs is a subject, and each program’s accesses will be checked to ensure that they are permitted for the user who invoked the program. An object can be any resource accessible on a computer system, including files, peripherals such as printers, databases, and fine-grained entities such as individual fields in database records. Objects are traditionally viewed as passive entities that contain or receive information, although even early access control models included the possibility of treating programs, printers, or other active entities as objects [1]. An operation is an active process invoked by a subject. Early access control models that were concerned strictly with information flow (i.e., read-and-write access) applied the term subject to all active processes, but RBAC models require a distinction between subject and operation. For example, when an ATM user enters a card and correct PIN, the control\n\n1.1\n\nThe purpose and fundamentals of access control\n\n5\n\nprogram operating on the user’s behalf is a subject, but the subject can initiate more than one operation—deposit, withdrawal, balance inquiry, or others. Permissions (or privileges) are authorizations to perform some action on the system. As used in this book, and in most computer security literature, the term permission refers to some combination of object and operation. A particular operation used on two different objects represents two distinct permissions, and similarly, two different operations applied to a single object represent two distinct permissions. For example, a bank teller may have permissions to execute debit and credit operations on customer records, through transactions, while an accountant may execute debit and credit operations on the general ledger, which consolidates the bank’s accounting data.\n\n1.1.3\n\nLeast privilege\n\nLeast privilege is the time-honored administrative practice of selectively assigning permission to users such that the user is given no more permission than is necessary to perform his or her job function. The principle of least privilege avoids the problem of an individual having the ability to perform unnecessary and potentially harmful actions merely as a side effect of granting the ability to perform desired functions. The question then becomes how to assign the set of system permissions to the aggregate of functions or duties that correspond to a role of a user or subject acting on behalf of the user. Least privilege provides a rationale for where to install the separation boundaries that are to be provided by the access control mechanism. Ensuring adherence to the principle of least privilege is largely an administrative challenge that requires the identification of job functions, the specification of the set of permissions required to perform each function, and the restriction of the user to a domain with those privileges and nothing more. Strict adherence to least privilege requires an individual to have different levels of permission at different times, depending on the task or function being performed. It must be recognized that in some environments and with some permissions, restricting permission because it is nominally unnecessary may inconvenience the user or place an additional burden on administrators. However, granting of excess privilege that potentially can be exploited to circumvent protection, whether for integrity or confidentiality, should be avoided whenever possible. It is also important that permissions not persist beyond the time that they are required for performance of duties.\n\n6\n\n1.2\n\nIntroduction\n\nA brief history of access control Although security issues had been addressed in some early time-sharing computer systems from the 1960s, the discipline of computer security began to progress rapidly in the early 1970s. At this time large resource-sharing systems were becoming commonplace in government, military, and large commercial organizations. The field developed both in government and military systems, and in the commercial arena where applications such as ATMs required strong security.\n\n1.2.1\n\nAccess control in the mainframe era\n\nThe growth in multiuser computer systems and the increased dependence of defense systems on computers led to efforts by the U.S. Defense Science Board to investigate the vulnerability of government systems in the late 1960s. University researchers also considered the problem. The earliest work in defining a formal, mathematical description of access control is that of Lampson [2], who introduced the formal notions of subject and object and an access matrix that mediated the access of subjects to objects. An access matrix is a simple conceptual representation in which the (i,j) entry in the matrix specifies the rights that subject i has to object j. An example is shown in Figure 1.1. Subjects (processes invoked by users) are allowed to access objects such as files or peripherals according to the rights specified in the matrix. For example, user Bob is allowed read and write access to the payroll file, and read access to the accounts receivable and accounts payable file. A RAND Corporation report from 1970 [3] provided a comprehensive analysis of security for DoD computer systems. Included in the report was the definition of a method to implement multilevel—relating to documents classified by a security level, such as confidential, secret, or top-secret— access control on a resource-sharing system, with separate considerations for local access and remote access where password-based authorization would be required. This document also discussed the basic requirements for\n\nGeneral Payroll ledger Alice Bob Charles Figure 1.1\n\nR,W R,W R\n\nAccess matrix.\n\nAccounts receivable\n\nAccounts payable\n\nR\n\nR\n\nR\n\nR\n\nR\n\nR\n\n1.2\n\nA brief history of access control\n\n7\n\ncontrolling access to information based on a user’s clearance level and the classification level of files stored on the system. Proposals for a multilevel secure system were extended in a U.S. Air Force report [4] that included engineering development plans for such a system along with communications. Bell and LaPadula [5] formalized military access control rules into a mathematical model suitable for defining and evaluating computer security systems. As formulated in this model, multilevel secure systems implement the familiar government document classification rule: Users are only allowed to access information that is classified at or below their own clearance level. Conceptually, this is a very simple policy, readily understood and followed by humans. However, as with much in information technology, implementing this seemingly simple policy on a computer system can be tricky. Unexpected loopholes and nonobvious interactions between different components of the system can leave a computer security system vulnerable. The Bell-LaPadula model was significant because it provided a formal (i.e., mathematical) model of the multilevel security policy, making it possible to analyze properties of the model in detail. Two basic rules are required in the formal model: the simple security rule and the *-property, commonly known as “no read up” and “no write down.” The simple security rule is obvious: A user with a particular clearance level cannot be allowed to read information above that level (e.g., a user with secret clearance cannot read top-secret documents). The *-property, which is essentially the reverse of the simple security rule, is required to maintain system security: A user operating at a particular clearance level can write information only at that level or above. For example, if a user is logged in at secret level, programs or processes operated by that user are not permitted to write information at the confidential level, although it could be written to a higher level, such as top-secret. (Note that this rule makes sense where we are concerned with processes operating on a computer. Obviously, a human being could log in at a high level, then print out or memorize information and re-enter it after logging in at a lower level.) Also included in the Bell-LaPadula model was the notion of categories, which refers to a vertical breakdown of security compartments across levels. In addition to having the proper clearance level, a user is required to be cleared for all of the categories attached to a classified document. For example, a document might be classified [Secret, nuclear, NATO]. To access the document, a user would need a clearance of secret or above and must also be cleared for the two categories—nuclear and NATO. (Chapter 2 provides a more detailed discussion of these rules.) This policy ensures that\n\n8\n\nIntroduction\n\ninformation cannot be downgraded either through unintentional or malicious actions of a process. A 1976 paper by Harrison, Ruzzo, and Ullman showed that safety is inherently undecidable in a conventional access matrix view of security [6]. In other words, it is impossible to know whether a given configuration considered “safe” with respect to some security requirement would remain safe. If the system is started with a set of access rights to objects, it is impossible to know that the system will not eventually grant access rights that are not in the original matrix. Although the proof of this result is somewhat technical, the underlying reason for the undecidability is that users can give away access rights. If the system has no control over what rights are passed from one user to another, there is no way to be sure that an unauthorized user will not eventually receive rights improperly, through some chain of rights delegation.\n\n1.2.2\n\nDepartment of Defense standards\n\nCodification of access control models in standards took a significant step forward in 1983, when the U.S. Department of Defense (DoD) published its Trusted Computer System Evaluation Criteria (TCSEC) [1], commonly known as the “Orange Book,” for its orange cover. This standard defined in detail two important access control modes for military systems: discretionary access control (DAC) and mandatory access control (MAC). As the name suggests, DAC is a mode in which the creators or owners of files assign access rights, and a subject with discretionary access to information can pass that information on to another subject. By itself, DAC is insufficient for implementing the document classification scheme used by the military. Since users in the DAC model of security can give away rights to access objects, the Harrison, Ruzzo, Ullman undecidability result applies to DAC. To provide a truly secure scheme in which a system is guaranteed to remain secure, MAC is required. As usually implemented, MAC controls provide the multilevel security policy as formalized by the Bell-LaPadula model described in Section 1.2.1. (Chapter 2 provides a more detailed treatment of DAC and MAC policies.) The key feature of MAC is that, as its name implies, it is required for the mediation of all accesses of objects on the system. Since the access control system mediates all access to objects using rules imposed externally, users cannot give away permissions for object access. Since users are limited in the actions they can take, the access controls can ensure that the system will remain in a secure state regardless of user actions.\n\n1.2\n\nA brief history of access control\n\n1.2.3\n\n9\n\nClark-Wilson model\n\nOne goal of the TCSEC was to encourage a market for secure operating systems and computer security products. Many writers argued that systems meeting the lower levels of TCSEC requirements would be sufficient for commercial use. The hope was that a uniform market for security products would develop, with the TCSEC providing guidance for both commercial and military security. Despite efforts to promote TCSEC-compliant systems as commercial security solutions, most commercial firms recognized that DAC and MAC were not sufficient for their needs. TCSEC-oriented systems are focused on the information flow and confidentiality of information. In a widely referenced 1987 paper, Clark and Wilson [7] argued that while confidentiality was important to commercial users, their primary concern pertains to integrity (i.e., ensuring that information is modified only in appropriate ways by authorized users). When Clark and Wilson formalized business security practices into a security model, the result was quite different from the military security model formalized by Bell and LaPadula. The two central concepts in the Clark-Wilson model are the well-formed transaction and separation of duty (SoD). Well-formed transactions constrain the user to change data only in authorized ways. For example, a bank teller cannot modify an arbitrary part of a customer record, only those data fields that are incorporated into the particular transaction being run, such as a savings deposit or withdrawal. Complementing the well-formed transaction is the ancient principle of SoD, which ensures the consistency of changes made to critical data. A division manager, for example, can request an expenditure, but another person must approve it, and a third audits the completed transaction to ensure that fraud has not occurred. Implementing these rules in a computer system has been found to be as challenging as implementing information flow policies. One of the motivations of RBAC was to make commercial security policies easier to manage.\n\n1.2.4\n\nOrigins of RBAC\n\nLike the multilevel security policy formalized by Bell and LaPadula, RBAC has its roots in historical practices that predate the formal model, except that RBAC’s features stem primarily from the commercial world. Also like multilevel security, RBAC is conceptually simple: Access to computer system objects is based on a user’s role in an organization. Roles with different privileges and responsibilities have long been recognized in business\n\n10\n\nIntroduction\n\norganizations, and commercial computer applications dating back to at least the 1970s implemented limited forms of access constraints based on the user’s role within the organization. For example, on-line banking applications in that period included both teller and teller supervisor roles that could execute different sets of transactions, while simultaneously users at ATMs were able to execute another set of transactions against the same databases. In the late 1980s and early 1990s researchers began recognizing the virtues of roles as an abstraction for managing privileges within applications and database management systems. A role was seen as a job or position within an organization. A role exists as a structure separate from that of the users who were assigned to the roles. Dobson and McDermid [8] used the term functional roles. Baldwin [9] called these structures named protection domains (NPDs) and stated that they could be related and organized into hierarchies based on NPD permission subsets. Also recognized was the use of roles in support of the principle of least privilege in which a role is created with minimum permissions in specification of duty requirements [10]. The Brewer and Nash model [11] presented a basic theory for use in implementing dynamically changing access permissions. The model is described in terms of a particular commercial security policy, known as the Chinese wall. The model is developed by first defining what a Chinese wall means and then defining a set of rules (SoD requirements) such that no user can ever access data from the wrong side of the wall. Nash and Poland [12] discussed the application of role-based security to cryptographic authentication devices commonly used in the banking industry. These role-based systems were relatively simple and application-specific. That is, there was no general-purpose model defining how access control could be based on roles, and little formal analysis of the security of these systems. The systems were developed by a variety of organizations, with no commonly agreed upon definition or recognition in formal standards. In 1992, NIST initiated a study [13] of both commercial and government organizations, and found that access control needs were not being met by products on the market at the time, many of which implemented only TCSEC-style discretionary controls, considered by many organizations as the “standard of due care.” In many enterprises within industry and civilian government, end users do not “own” the information for which they are allowed access as assumed by DAC. For these organizations, the corporation or agency is the actual “owner” of system objects, and discretionary control on the part of the users may not be appropriate. Conventional MAC, focused on preserving confidentiality, is also inadequate for these organizations. Although enforcing a need-to-know policy is important where classified information is of concern, there existed a general need to support\n\n1.2\n\nA brief history of access control\n\n11\n\nsubject-based security policies, such as access based on competency, the enforcement of conflict-of-interest rules, or access based on a strict concept of least privilege. Supporting such policies requires the ability to restrict access based on a user function or role within the enterprise. A solution to meet these needs was proposed in 1992 by Ferraiolo and Kuhn [14], integrating features of existing application-specific approaches into a generalized RBAC model. This paper described, in a simple formal manner, the sets, relations, and mappings used in defining roles and role hierarchies, subject-role activation, and subject-object mediation, as well as the constraints on user-role membership and role-set activation. Three basic rules were required: 1.\n\nRole assignment: A subject can execute a transaction only if the subject has selected, or been assigned to, a role. The identification and authentication process (e.g., login) is not considered a transaction. All other user activities on the system are conducted through transactions. Thus, all active users are required to have some active role.\n\n2.\n\nRole authorization: A subject’s active role must be authorized for the subject. With rule 1, this rule ensures that users can take on only roles for which they are authorized.\n\n3.\n\nTransaction authorization: A subject can execute a transaction only if the transaction is authorized for the subject’s active role. In concert with rules 1 and 2, this rule ensures that users can execute only transactions for which they are authorized.\n\nThe formal description of the model is given in Figure 1.2. A key feature of this model is that all access is through roles. A role is essentially a collection of permissions, and all users receive permissions only through the roles to which they are assigned, as shown in Figure 1.3. Within an organization, roles are relatively stable, while users and permissions are both numerous and may change rapidly. Controlling all access through roles therefore simplifies the management and review of access controls. The most common method of implementing access control in a computer system is through access control lists (ACLs). All system resources, such as files, printers, and terminals, have a list of authorized users attached. This makes it easy and quick to answer the per object review question: “What users have access to object X?” Much more difficult is the per subject review question: “What objects can user X access?” Answering this question requires scanning all objects on the computer system, which may number in the millions; recording their access control lists; and finally reporting on user\n\n12\n\nIntroduction\n\nOriginal formal description of RBAC For each subject, the active role is the one that the subject is currently using: AR(s : subject) = {the active role for subject s} Each subject may be authorized to perform one or more roles: RA(s : subject) = {authorized roles for subject s} Each role may be authorized to perform one or more transactions: TA(r : role) = {transactions authorized for role r} Subjects may execute transactions. The predicate exec(s,t) is true if and only if subject s can execute transaction t at the current time; otherwise it is false: exec(s:subject,t:tran) = {true iff subject s can execute transaction t} 1. Role assignment: A subject can execute a transaction only if the subject has selected or been assigned a role: ∀s : subject, t : tran ⋅ exec(s,t) ⇒ AR(s) ≠ ∅ 2. Role authorization: A subject’s active role must be authorized for the subject: ∀s : subject ⋅ AR(s) ⊆ RA(s) 3. Transaction authorization: A subject can execute a transaction only if the transaction is authorized for the subject’s active role: ∀s : subject,t : tran ⋅ exec(s,t) ⇒ t ∈ TA(AR(s)) Note that because the conditional in rule 3 is “only if,” this rule allows for the possibility that additional restrictions may be placed on transaction execution. That is, the rule does not gurantee a transaction to be executable just because it is in TA[AR(s)]. The set of transactions potentially executable by the subject’s active role. For example, a trainee for a supervisory role may be assigned the role of supervisor but may have restrictions applied to his or her role that limit accesible transactions to a subset of those normally allowed for the supervisor role.\n\nFigure 1.2\n\nFormal description of RBAC from Ferraiolo and Kuhn [14].\n\nUsers\n\nFigure 1.3\n\nRoles\n\nPermissions\n\nRBAC relationships.\n\nX. Measurements of real systems have shown that this process can take more than a day. A side effect of this scheme is that ACLs make it easy to add permissions to an object but hard to revoke all of a particular user’s\n\n1.2\n\nA brief history of access control\n\n13\n\npermissions. In many systems, users are combined into groups, which are then used as entries in ACLs. Readers familiar with conventional group mechanisms will recognize a superficial similarity between RBAC and groups. As normally implemented, a group is a collection of users, rather than a collection of permissions, and permissions can be associated with both users and the groups to which they belong, as shown in Figure 1.4. Because users may access objects based on either their user or group ID, it is possible for users to retain access permissions that should be revoked when group permission is removed from the object. The permission based on the individual user ID is in effect a loophole in the enforcement of the security policy. The RBAC requirement that all access be through roles helps to strengthen security significantly in real applications by eliminating this loophole. A second important feature of the Ferraiolo-Kuhn model is that roles are hierarchical—roles can inherit permissions from other roles (Figure 1.5) —while groups are normally treated as flat collections of users. Also included in this model was a provision for constraints on role membership, although specific types of constraints were not proposed.\n\nGroups\n\nUsers\n\nFigure 1.4\n\nPermissions\n\nGroup access control relationships.\n\nCardiologist\n\nOncologist\n\nPhysician\n\nResident Figure 1.5\n\nExample of a functional role hierarchy.\n\n14\n\nIntroduction\n\nThe 1992 paper showed that this model subsumes the Clark-Wilson model (i.e., the Clark-Wilson model is included as a special case). A subsequent NIST publication [15] investigated RBAC in more detail, proposing additional functions beyond those included in the 1992 model, and included specific forms for constraints to implement separation-of-duty requirements. George Mason University Professor Ravi Sandhu, a well-known and influential security expert, described the Ferraiolo-Kuhn RBAC model as “an important innovation, which makes RBAC a service to be used by application…. Instead of scattering security in application code, RBAC will consolidate security in a unified service which can be better managed while providing the flexibility and customization required by individual applications” [16]. Dr. Sandhu went on to conduct extensive research and publish numerous papers in the area of RBAC. Several of his students have joined him in this research, and some have produced doctoral theses in areas related to RBAC. In 1994, Nyanchama and Osborn [17] proposed a very generalized form of role organization called a role graph model. The authors showed that roles could be organized based on three role relationships: partial, shared, and augmented privileges. The role graph model is particularly useful in analyzing privilege sharing, which is critical in detecting and preventing conflict of interest relationships between roles. Gligor introduced the notion of “role types,” which allow role administration to be simplified with parameterized types that are instantiated to produce roles. This work became the subject of the first U.S. patent in the area of RBAC [18]. In 1996, Sandhu and colleagues [19] introduced a framework of RBAC models, RBAC96, breaking down RBAC into four conceptual models. Shown in Figure 1.6, this framework specified a base model, RBAC0, that contains the minimal features of a system implementing RBAC. Two advanced models, RBAC1 and RBAC2, include RBAC0, but add (respectively) support for hierarchies and for constraints such as SoD. A fourth component, RBAC3, includes all aspects of the lower-level models. The Sandhu et al. RBAC96 framework established a modular structure for RBAC systems, providing for simplified commercial implementations that could offer basic RBAC0 functionality, or more advanced features as required by customers. Largely due to a series of conferences sponsored by the Association for Computing Machinery (ACM), founded by Professor Sandhu and David Ferraiolo of NIST, a robust RBAC research community had developed, and today commercial implementations are providing ever more sophisticated RBAC systems. RBAC began to see application in a wide variety of areas. Early work by Barkley [20] showed that RBAC has a natural application in\n\n1.2\n\nA brief history of access control\n\n15\n\nRBAC4 (union of 0,1,2)\n\nRBAC1 (adds hierarchies)\n\nRBAC2 (adds constraints)\n\nRBAC0 (basic RBAC)\n\nFigure 1.6\n\nSandhu et al. RBAC96 framework.\n\nhealth care. Workflow management, an economically important field that deals with the automation of business processes, is another area where RBAC seems to be ideally suited to not only provide security, but serve as a framework for workflows as well. Barkley and Cincotta [21] and Bertino, Ferrari, and Atluri [22] introduced RBAC-based workflow systems. In 2000, NIST initiated an effort to establish an international consensus standard for RBAC, publishing a proposal [23] in the ACM RBAC workshop. The proposed standard follows the RBAC96 structure and incorporates features developed out of subsequent discussions and formal comments received from the research and commercial vendor communities. In 2004, the standard was approved as INCITS 359-2004 by the InterNational Committee for Information Technology standards, which is accredited by the American National Standards Institute to develop industry consensus standards for IT. Following INCITS 359-2004, a variety of RBAC standards have been completed or initiated, including the OASIS XACML Profile for RBAC, which is helping to bring role-based access to Web services. See Chapter 8 for more on these and other standards. What is most striking about RBAC’s history is its rapid evolution from a concept to its commercial implementation and deployment. Although this success can be attributed to a variety of factors, recognition of RBAC’s dual policy and productivity advantages have undoubtedly contributed to its present stature. In this respect, RBAC differs from many other security concepts, in that its costs of deployment need not be justified based solely on perceived threats and system vulnerabilities. Although RBAC allows for the enforcement of a wide variety of important access control policies that are either impractical or even impossible to enforce in its absence, RBAC’s\n\n16\n\nIntroduction\n\nproductivity advantages alone are often sufficient in justifying its deployment. When taken together, these dual motivators can lead to a strong business justification. To improve the efficiency of heath care systems, the U.S. Health Insurance Portability and Accountability Act of 1996 (HIPAA) explicitly calls out RBAC requirements [24], and the U.S. Federal Aviation Administration cites RBAC in its specifications for National Airspace System security [25]. RBAC is now being prescribed as a generalized approach to access control. For instance, RBAC was found to be “the most attractive solution for providing security features in multidomain digital government infrastructure” [26] and has shown its great relevance in meeting the complex security needs of Web-based applications [27]. New regulations, including Sarbanes-Oxley and Gramm-Leach-Bailey, are increasingly being addressed using RBAC. Although RBAC can be justified squarely on economics, something else was going on over the last decade. During this period, hundreds of papers were published on topics revolving on the theme of RBAC. As we have discussed, RBAC is a packaging of closely related and dependent access control and management features and ideas. Although the focus of RBAC is clearly on access control, in many respects RBAC can be viewed as a model for regulation and management of user actions and activities within IT environments. Furthermore, these activities have been encapsulated into highly intuitive role structures that appear naturally within most business environments. As it turns out, role structures not only apply to resource provisioning systems and access control and policy management systems, they also fit naturally into workflow, process management, collaborative, and virtual enterprise environments. When RBAC models first appeared, these enterprise applications were not envisioned. However, once published, and thoroughly examined, other researchers quickly began expanding and elaborating on RBAC concepts and structures. The pervasiveness of RBAC’s application within modern day IT infrastructures is significant. Today, RBAC features are included at all levels of enterprise computing, including operating system, database management system, network, and enterprise management levels. RBAC is being incorporated and integrated within infrastructure technologies such as public key infrastructure (PKI), workflow management systems, and directory and Web services. In addition, RBAC is being proposed as an enabling technology in formulating metapolicies within collaborative and virtual enterprise systems.\n\n1.3\n\n1.3\n\nComparing RBAC to DAC and MAC\n\n17\n\nComparing RBAC to DAC and MAC The principle motivations behind RBAC are the ability to specify and enforce enterprise-specific access control policies and to streamline the typically burdensome process of authorization management. RBAC represents a major advancement in flexibility and detail of control from the existing standards of DAC and MAC. As defined in the TCSEC and commonly implemented, DAC is an access control policy and mechanism that permits system users to allow or disallow other users access to the objects under their control. The TCSEC DAC policy is defined as follows [1]: A means of restricting access to objects based on the identity of subjects or groups, or both, to which they belong. The controls are discretionary in the sense that a subject with a certain access permission is capable of passing that permission (perhaps indirectly) on to any other subject (unless restricted by MAC).\n\nDAC, as the name implies, permits the granting and revocation of access permissions to be left to the discretion of the individual users. A DAC mechanism allows users to grant or revoke access to any of the objects under their control without the intercession of a system administrator. For many enterprises within industry and civilian government, end users do not “own” the information to which they are allowed access as is assumed by DAC policies. For these organizations, the corporation or agency is the actual “owner” of system objects, and it may not be appropriate to allow users to give away access rights to the objects. With RBAC, access decisions are based on the roles individual users have as part of an organization. This includes the specification of duties, responsibilities, and qualifications. For example, the roles an individual associated with a hospital can assume include doctor, nurse, clinician, and pharmacist. Roles in a bank include teller, loan officer, and accountant. Roles can also apply to military systems; for example, target analyst, situation analyst, and traffic analyst are common roles in tactical systems. An RBAC policy is based on the functions or the actions that a user is allowed to perform within the context of an organization (referred to as either privileges or permissions). The users cannot normally pass their permissions on to other users at their discretion. For example, a doctor who may posses the permission to prescribe medication should not be able to pass that permission onto a clinician.\n\n18\n\nIntroduction\n\nSecurity policy often supports higher level organizational objectives, such as maintaining and enforcing ethics pertaining to a judge’s chambers, or the laws and respect for privacy associated with the diagnosis of ailments, treatment of disease, and the administering of medication within a hospital. To support such policies, a capability to centrally control and maintain access rights is required. The security administrator, not the users for which the policies apply, must diligently represent the organization in specifying the access policy over organizational resources. As such, RBAC is sometimes described as a form of MAC in the sense that users are unavoidably constrained by and have no influence over the enforcement of the organization’s protection policies. However, RBAC is different from TCSEC MAC. MAC is defined in the TCSEC as follows [1]: A means of restricting access to objects based on the sensitivity (as represented by a label) of the information contained in the objects and the formal authorization (i.e., clearance) of subjects to information of such sensitivity.\n\nAs rationalized in the TCSEC, MAC supports DoD requirements and regulations pertaining to unauthorized access to classified information, and in particular to the protection of the confidentiality (reading or observing) of sensitive information. Systems that support MAC policies are concerned with the unlawful flow of information from a high level to a low level. As such, policy support is with respect to controlling reading and writing. However, control over write operations is only concerned with preventing the indirect unlawful observation of sensitive information, and not with its integrity (unauthorized modification or destruction). With regard to RBAC controls, policies may pertain to issues of confidentiality or integrity, or both: “Who can perform what actions?” To distinguish RBAC from the policy specifics of MAC, RBAC is often characterized as nondiscretionary access control. RBAC allows for the nondiscretionary enforcement of a variety of protection policies that can be tailored on an enterprise-by-enterprise basis. The policies enforced within a stand-alone or distributed system are the net result of the administrative configuration of various components of RBAC.\n\n1.4\n\nRBAC and the enterprise RBAC has emerged as the primary alternative to MAC and DAC because it is much better suited to the needs of commercial users than these earlier models. This section introduces a simple economic model that demonstrates\n\n1.4\n\nRBAC and the enterprise\n\n19\n\nRBAC’s cost effectiveness and then discusses how RBAC fits into a large organization.\n\n1.4.1\n\nEconomics of RBAC\n\nFrom a business perspective RBAC has the potential to offer several benefits. This includes greater administrative productivity in performing common authorization management functions. These administrative functions pertain to assigning permissions for new user access to resources (both new users and new resources), reviewing and selectively removing accesses that are no longer necessary (and potentially harmful) with respect to a user’s change of job assignment, and the completeness and immediacy of the removal of permissions in the event of a user’s separation from the enterprise. These same features have demonstrated their ability to increase user productivity by reducing the downtime between administrative events, where the enterprise would be deprived of productivity during the period when the user is unable to access system resources. There is usually a direct relationship between the cost of administration and the number of associations that must be managed in order to administer an access control policy: The larger the number of associations, the costlier and more error-prone access control administration. In most organizations, the use of RBAC reduces the number of associations that must be managed. A simple economic model can be used to approximate the savings that results from using a role-based approach [28]. Job positions typically are occupied by more than one individual, and most positions require more than one permission in order for an individual in a job position to carry out the responsibilities of that position. One can describe the associations authorizing permissions to individuals who perform the responsibilities of a job position as an ordered pair consisting of a set of individuals and a set of permissions (U, P) where: U = the set of individuals in a job position; P = the set of permissions required to perform that job position. The number of associations required to directly relate the individuals to those permissions is U ⋅ P , where U = the number of individuals in the set U; P = the number of permissions in the set P. In other words, for each individual in U, there is an association for each permission in P.\n\n20\n\nIntroduction\n\nA role can be described as a set of permissions. Thus, the set P can refer to a role, or a job position whose user-role and role-permission associations are represented by the ordered pair (U, P). The number of user-role and role-permission associations required to authorize each user in the set U for each of the permissions in the set P where P represents a role is U + P (i.e., an association with the role P for each individual in U and an association with the role P for each permission in P). For a job position, if U + P < U ⋅ P , then the administrative advantage of RBAC over relating users directly with permissions is realized for that job position. A sufficient condition for U + P < U ⋅ P is U , P > 2, which is typically the case for most job positions in most organizations. If n is the number of job positions within an organization, then the administrative advantage of RBAC is realized organizationwide when\n\n∑\n\nn i =1\n\n(U\n\ni\n\n+ Pi\n\n) < ∑ (U n\n\ni =1\n\ni\n\n⋅ Pi\n\n)\n\n(Note that this is only an approximation, as users may frequently fill more than one role in an organization, and roles may be hierarchically related.) In addition to cost savings due to greater administrative and user productivity, RBAC has the advantage of avoiding future expenses incurred through breaches of security or privacy policies. Because RBAC can map naturally to organizational and business structures, is more configurable then conventional identity-based access control mechanisms, and can be managed at an abstraction above and across the systems and applications for which it controls access, RBAC can enforce a greater number and type of access control policies. Depending on the type of RBAC deployment these policies can include the enforcement of least privilege (the time-honored administrative practice of assigning privileges to users’ that are minimally necessary for the performance of duty), and separation-of-duty policies (thus avoiding situations that can lead to a conflict of interest). RBAC can also increase user productivity by allowing users greater access to more resources and the ability to better delegate administrative responsibility to customers and partners where possible.\n\n1.4.2\n\nAuthorization management and resource provisioning\n\nAt the lowest level, administrators control user access rights through the creation and maintenance of ACLs on a system-by-system basis. ACLs specify, for each protected resource, a list of individual users, or groups composed of individual users, with their respective modes of access (e.g., read or\n\n1.4\n\nRBAC and the enterprise\n\n21\n\nwrite) to the resource. This use of ACLs has proved problematic for a variety of reasons. ACLs are tied to particular resources. ACLs further complicate matters because they are managed on a system-by-system basis. A large number of users, each with many privileges, imply a very large number of user-privilege associations that are spread over potentially large numbers of independently managed platforms and applications. Thus, when a user takes on different responsibilities within the enterprise, administering these changes entails a thorough review, resulting in the selective addition or deletion of the user’s privileges, typically within numerous systems. Authorization management and resource provisioning tools, which typically incorporate RBAC, have been developed to assist administrators in dealing with these challenges. Security administrators who manage users, resources, and privileges on more than one platform must perform many similar tasks on different systems. Because each system has its own proprietary administrative interface, even routine tasks require security administrators to have detailed knowledge of each type of security system. They spend valuable time logging on and off different security systems while performing each task locally. As organizations grow, users typically require access to more and more systems, including one or more applications that the user interacts with on a daily basis, an e-mail server, systems used for occasional transactions such as entering travel reimbursements or managing retirement accounts, and possibly print servers, Web sites, and a host of other systems that require authorization. All of these systems require some form of authentication and access control, and they may be changed and updated independently of one another, making it difficult for users to keep their passwords consistent across all systems. Some organizations may explicitly require that users not use the same passwords for different systems, particularly if the systems vary in sensitivity. Managing authentication and access control across multiple systems is the key problem in authorization management. Maintaining user IDs, role memberships, permissions, and the associations between roles and permissions are all tasks included in authorization management. In most cases, system administrators must deal with these problems on a daily basis, as organizations gain and lose employees, and jobs and permissions change within the organization. Managing permissions for a large number of applications is thus not only a problem for users; it represents an enormous challenge for enterprise system administrators. Although there are many authorization management solutions to this challenge, they all provide a means of centralizing authorization information on a server. Broadly speaking, there are two common ways of dealing\n\n22\n\nIntroduction\n\nwith the problem of centralizing authorization, as shown in Figures 1.7 and 1.8. In the first approach, which has been termed user pull [29], the user is authenticated by the authorization server, obtains some sort of credential to access applications, and then presents the credentials as authorization to the applications. The second approach, termed server pull [29], requires applications to authenticate users, but centralizes information about user privileges on an authorization server. When a user attempts to invoke an application, the application queries the authorization server to determine the user’s permissions.\n\nAuthorization server\n\nApplication 1\n\nUser Application 2\n\nApplication n Figure 1.7\n\nUser-pull authorization architecture.\n\nApplication 1\n\nUser\n\nApplication 2\n\nApplication n Figure 1.8\n\nServer-pull authorization architecture.\n\nAuthorization server\n\n1.4\n\nRBAC and the enterprise\n\n23\n\nBefore users can begin accessing the applications they need to do their jobs, the organization must set up access permissions for them throughout the network. This is the problem of resource provisioning. In addition to thousands of employees, the company may need to establish permissions for contractors, business partners, and customers who access corporate data on the Internet. Equally important is the task of decommissioning permissions held by employees leaving the company. Surveys of corporations have found that current and prior employees are the top two sources of security breaches. Past employees are cited as a security problem nearly as often as current employees, because of the problem of deleting permissions after employees leave [30]. Creating and maintaining proper access permissions in a fast-changing business environment is a complex problem, which has led to the development of sophisticated tools typically costing from $600,000 to $800,000 [31]. Resource provisioning typically requires cooperation among computer systems from the corporate human resources, information systems, and a broad collection of other corporate departments depending on the user’s job. If “Bob Smith” is hired, he must be given permissions for all the resources needed in his job. With conventional access control systems, this would mean assigning his user ID to every resource he will access. The direct linking of user with permission is not only time-consuming; it invariably leads to errors as user assignments change, resulting in users having permissions they should not have. RBAC does not permit users to be directly associated with permissions. With RBAC, permissions are authorized for roles, and roles are authorized for users. The permissions that are authorized for a role may span multiple platforms and applications. Thus, when administering RBAC two different types of associations must be managed (i.e., associations between users and roles and associations between roles and permissions). When a user’s job position changes, only the user-role associations change. If the job position is represented by a single role, then when a user’s job position changes, there are only two user-role associations to change: To implement these changes, it is necessary to remove the association between the user and the user’s current role and to add an association between the user and the user’s new role. Complexities introduced by organizational hierarchies and constraints such as separation-of-duty requirements are hidden by the access control software. This conceptually simple approach is what gives RBAC its power and flexibility.\n\n24\n\nIntroduction\n\nReferences [1] DoD, Trusted Computer System Evaluation Criteria (TCSEC), DoD 5200.28-STD. [2] Lampson, B. W., “Dynamic Protection Structures,” AFIPS Conference Proceedings, 35, 1969, pp. 27–38. [3] Ware, W. H., Security Controls for Computer Systems (U): Report of Defense Science Board Task Force on Computer Security, Santa Monica, CA: The RAND Corporation, February 1970. [4] Anderson, J. P., Computer Security Technology Planning Study Volume II, ESD-TR-73-51, Electronic Systems Division, Air Force Systems Command, Hanscom Field, Bedford, MA, October 1972. [5] Bell, D. E., and L. J. LaPadula, Secure Computer Systems: Mathematical Foundations and Model, Bedford, MA: The Mitre Corporation, 1973. See also D. E. Bell and L. J. LaPadula, Secure Computer System: Unified Exposition and MULTICS Interpretation, MTR-2997 Rev. 1, Bedford, MA: The MITRE Corporation, March 1976, and ESD-TR-75-306, rev. 1, Electronic Systems Division, Air Force Systems Command, Hanscom Field, Bedford, MA. [6] Harrison, M., W. Ruzzo, and J. Ullman, Protection in Operating Systems, CACM 19, No. 8, August 1976, pp. 461–471. [7] Clark, D. D., and D. R. Wilson, “A Comparison of Commercial and Military Computer Security Policies,” IEEE Symposium of Security and Privacy, 1987, pp. 184–194. [8] Dobson, J. E., and J. A. McDermid, “Security Models and Enterprise Models,” in Database Security, II: Status and Prospects, C. E. Landwehr, (ed.), New York: North Holland, 1989, pp. 1–39. [9] Baldwin, R. W., “Naming and Grouping Privileges to Simplify Security Management in Large Database,” Proceedings IEEE Computer Society Symposium on Research in Security and Privacy, April 1990, pp. 184–194. [10] Thomsen, D. J., “Role-Based Application Design and Enforcement,” in Database Security, IV: Status and Prospects, S. Jajodia and C. E. Landwehr, (eds.), New York: North Holland, 1991, pp. 151–168. [11] Brewer, D. F. C., and M. J. Nash, “The Chinese Wall Security Policy,” Proceedings IEEE Computer Society Symposium on Research in Security and Privacy, April 1989, pp. 215–228. [12] Nash, M., and K. Poland, “Some Conundrums Concerning Separation of Duty,” IEEE Symposium on Security and Privacy, Oakland, CA, 1990. [13] Ferraiolo, D., D. Gilbert, and N. Lynch, “An Examination of Federal and Commercial Access Control Policy Needs,” Proceedings of the NIST-NSA National (USA) Computer Security Conference, 1993, pp. 107–116. [14] Ferraiolo, D., and D. R. Kuhn, “Role-Based Access Control,” Proceedings of the NIST-NSA National (USA) Computer Security Conference, 1992, pp. 554–563.\n\n1.4\n\nRBAC and the enterprise\n\n25\n\n[15] Ferraiolo, D. F., J. Cugini, and D. R. Kuhn, “Role-Based Access Control (RBAC): Features and Motivations,” Proceedings of the 11th Annual Computer Security Application Conference, New Orleans, LA, December 11–15, 1995, pp. 241–248. [16] Sandhu, R. S., et al., “Role-Based Access Control: A Multidimensional View,” Proceedings of the 10th Annual Computer Security Applications Conference, December 1994, pp. 54–62. [17] Nyanchama, M., and S. L. Osborn, “Access Rights Administration in Role-Based Security Systems,” Proceedings of the IFIP WG11.3 Working Conference on Database Security, 1994. See also M. Nyanchama and S. L. Osborn, “The Role Graph Model and Conflict of Interest,” ACM Transactions on Information and System Security (TISSEC), Vol. 2, No. 1, February 1999, pp. 3–33. [18] Deinhart, K., et al., “Method and System for Advanced Role-Based Access Control in Distributed and Centralized Computer Systems,” U.S. Patent 5,911,143, June 8, 1999. [19] Sandhu, R., et. al., “Role-Based Access Control Models,” IEEE Computer, Vol. 29, No. 2, February 1996. [20] Barkley, J. F., “Application Engineering in Health Care,” Second Annual CHIN Summit, June 9, 1995. [21] Barkley, J. F., and A. V. Cincotta, “Implementation of Role/Group Permission Association Using Object Access Type,” U.S. Patent 6,202,066, 2002. [22] Bertino, E., E. Ferrari, and V. Atluri, “A Flexible Model for the Specification and Enforcement of Authorizations in Workflow Management Systems,” 2nd ACM Workshop on Role-Based Access Control, November 1997. [23] Sandhu, R., D. Ferraiolo, and R. Kuhn, “The NIST Model for Role-Based Access Control: Towards a Unified Standard,” Proc. 5th ACM Workshop on Role-Based Access Control, July 26–27, 2000. [24] U.S. Health Insurance Portability and Accountability Act of 1996 (HIPAA), http://cms.hhs.gov/hipaa. [25] Federal Aviation Administration, National Airspace System (NAS) Protection Profile Template Supplement, Version 1.0, http://www.faa.gov/aio/common/ documents/NAS_PP_Supp_v1.pdf. [26] Joshi, J., et al., “Digital Government Security Infrastructure Design Challenges,” IEEE Computer, Vol. 33, No. 2, February 2001, pp. 66–72. [27] Joshi, J. B. D., et al., “Security Models for Web-Based Applications,” Communications of the ACM, Vol. 44, No. 2, February 2001, pp. 38–44. [28] Ferraiolo, D. F., J. F. Barkley , and D. R. Kuhn, “A Role-Based Access Control Model and Reference Implementation Within a Corporate Intranet,” ACM Transactions on Information and System Security (TISSEC), Vol. 2, No. 1, February 1999, pp. 34–64.\n\n26\n\nIntroduction [29] Park, J. S., and R. Sandhu, “RBAC on the Web by Smart Certificates,” Proc. ACM Workshop on Role-Based Access Control 1999: 1–9, New York: ACM Press, 1999. [30] Daniels, J., “This Is Not a Game: The Weakest Link,” SANS Institute, August 9, 2001. [31] Messmer, E., “Role-Based Access Control on a Roll,” Network World, July 30, 2001, http://www.nwfusion.com/news/2001/0727burton.html.\n\nCHAPTER\n\n2 Contents 2.1 Access control: objectives and enforcement artifacts 2.2 Access control: core entities and principles 2.3 Reference monitor and security kernel 2.4 Access control matrix 2.5 Access control data structures 2.6 Discretionary access control (DAC) policies 2.7 MAC policies and models 2.8 Biba’s integrity model 2.9 The Clark-Wilson model 2.10 The Chinese wall policy model 2.11 The Brewer-Nash model 2.12 Domain-type enforcement (DTE) model\n\nAccess Control: Properties, Policies, and Models\n\nA\n\nknowledge of access control properties, policies, models, and mechanisms is essential in understanding how RBAC fits into the field of computer security. This chapter introduces these important concepts [1–15].\n\n2.1 Access control: objectives and enforcement artifacts While authentication mechanisms ensure that system users are who they claim to be, these mechanisms say nothing about what operations users should or should not perform within the system. To afford protection to that effect, it is necessary to use access control. Access control is concerned with determining the allowed activities of legitimate users, mediating every attempt by a user to access a resource in the system. A given IT infrastructure can implement access control systems in many places and at different levels. Operating systems use access control to protect files and directories. Database management systems (DBMSs) apply access control to regulate access to tables and views. Most commercially available application systems implement access control, often independent of the operating system or DBMS, or both, on which they may be installed. The objectives of an access control system are often described in terms of protecting system resources against\n\n27\n\n28\n\nAccess Control: Properties, Policies, and Models\n\ninappropriate or undesired user access. From a business perspective, this objective could just as well be described in terms of the optimal sharing of information. After all, the greater objective of IT is to make information available to users and applications. A greater degree of sharing gives rise to increased productivity. Although on the surface, access control appears to gets in the way of this objective, in reality, a well-managed and effective access control system actually facilitates sharing. A sufficiently fine-grained access control mechanism can enable selective sharing of information where in its absence, sharing may be considered too risky altogether. When considering any access control system one considers three abstractions of control: access control policies, access control models, and access control mechanisms. Policies are high-level requirements that specify how access is managed and who, under what circumstances, may access what information. While access control policies may be application-specific and thus taken into consideration by the application vendor, policies are just as likely to pertain to user actions within the context of an organizational unit or across organizational boundaries. For instance, specific policies may pertain to the resources that can be accessed by consultancies or other business partners. Such policies may span multiple computing platforms and applications. Policies may pertain to resource usage within or across organizational units or may be based on need-to-know, competence, authority, obligation, or conflict-of-interest factors. Although there are several well-known access control policies, generating such a list is of limited value, since business objectives, tolerance for risk, corporate culture, and the regulatory responsibilities that influence policy differ from enterprise to enterprise, and even from organizational unit to organizational unit. The access control policies within a hospital may pertain to privacy and competency (e.g., only doctors and nurse practitioners may prescribe medication), and hospital policies will differ greatly from those of a military system or a financial institution. Even within a specific business domain, policy will differ from institution to institution. Furthermore, access control policies are dynamic in nature, in that they are likely to change over time in reflection of ever-evolving business factors, government regulations, and environmental conditions. However, because policy requirements can rarely be completely determined in advance, access control systems are best designed to flexibly accommodate a wide variety of changing policies. At a high level, access control policies are enforced through a mechanism that translates a user’s access request often in terms of a simple table lookup—to grant or deny access. Access control mechanisms come in a wide variety of forms, each with distinct policy advantages and disadvantages. Although no well-accepted standard yet exists for determining their policy\n\n2.1\n\nAccess control: objectives and enforcement artifacts\n\n29\n\nsupport, access control mechanisms can be characterized in a number of different ways, each bearing policy implications. In general, access control mechanisms require that security attributes be kept about users and resources. User security attributes consist of things like user identifiers, groups, and roles to which users belong, or they can include security labels reflecting the level of trust bestowed on the user. Resource attributes can take on a wide variety of forms. For example, they can consist of sensitivity labels, types, or access lists. In determining the user’s ability to perform operations on resources, access control mechanisms compare the user’s security attributes to those of the resource. Access control checks can be determined (evaluated) based on a previously determined set of rules. For example, the security label of the user must be greater than or equal to the security label of the resource for the user to read the contents of the resource. Access control checks can also be determined based on an attribute-matching algorithm. The user may perform a read operation on a resource if the user’s identity, and read operation pair is included in the access control list of the resource. Other characteristics of access control mechanisms include attribute review and management capabilities. For example, can the access control system determine the permissions that are associated with a user or the users that can access a resource, or better yet both? Who can specify permissions? Can permission specification be delegated, and if so, does delegation allow further delegation? From a consumer’s perspective, determining the policy implications of a given access control mechanism is a formidable task. The fact that most enterprises need to deal with a wide variety of access control mechanisms only compounds this problem. To provide greater policy support and control, a number of enterprise management and resource-provisioning vendors offer administrative capabilities over the native access control mechanisms of file management, database management, applications, and host and network operating systems. The result is an access control management system, on top of an access control management system, on top of potentially still another access control system. What are the policy implications of this arrangement? Rather than attempting to evaluate and analyze access control systems exclusively at the mechanism level, security models are usually written to describe the security properties of an access control system. Access control models are written at a level of abstraction to accommodate a wide variety of implementation choices and computing environments, while providing a conceptual framework for reasoning about the policies they support. Access control models are of general interest to both users and vendors. They bridge the rather wide gap in abstraction between policy and mechanism.\n\n30\n\nAccess Control: Properties, Policies, and Models\n\nModels can be promoted for their support of policy, and mechanisms can be designed for their adherence to the properties of the model. Users see an access control model as an unambiguous and precise expression of requirements. Vendors and system developers see access control models as design and implementation requirements. Access control models and mechanisms are often characterized in terms of their policy support. On one extreme an access control model may be rigid in its implementation of a single policy. On the other extreme, a security model will allow for the expression and enforcement of a wide variety of policies and policy classes. From the 1990s to the present, security researchers have sought to develop access control mechanisms and models that are largely independent of the policy for which they can be used. This is generally considered to be a desirable objective in that it allows the use of a common mechanism for a wide variety of purposes.\n\n2.2\n\nAccess control: core entities and principles 2.2.1\n\nSubjects and objects\n\nThere are many access control models and mechanisms, most of which are defined in terms of subjects and objects. A subject is a computer system entity that can initiate requests to perform an operation or series of operations on objects. The subjects may be users, processes, or domains: A domain is a protection environment in which a process executes. At some level of discourse, a subject is considered to be a process or task that operates on behalf of the user within a computing environment. An object is a system entity on which an operation can be performed. Within the context of an operating system, an object might represent a file, while within the context of a DBMS, an object might represent a table or a view. An executable image of a program residing in memory or stored on disk is considered to be an object; however, during its execution it becomes part of a process and, as such, is treated as part of the subject. Access to an object usually implies access to the information it contains, but it may pertain to an exhaustible system resource, such as a device, or to a physical container, such as a door to a protected area or a lock on a cabinet containing physical evidence for a trial. Other examples of objects include buffers, registers, blocks, pages, segments, file directories, programs, processes, and printers. The selection of entities included in the set of objects is a matter of choice determined by the protection requirements of the system or the security objectives of a model. Processes are normally modeled as subjects because processes are active\n\n2.2\n\nAccess control: core entities and principles\n\n31\n\ncomputing entities. However processes must be protected from unauthorized access and as such must be protected. For this reason, processes and subjects in general are often viewed as objects. An object is an abstract concept that is useful for purposes of generically modeling access control approaches and describing access control mechanisms. However, from an enterprise’s perspective, there are two types of objects: resource objects and system objects. Resource objects are the objects of general interest to the system’s users and as such justify the very existence of the system. System objects are those objects that serve the system and that are merely necessary for its correct operation. It is because of the sensitivity of resource objects that system objects are sensitive and need to be protected. In many situations a subject can be thought of as a user, but within a computer system, a subject is more precisely defined as a process or a collection of processes that act on a user’s behalf. Although users can typically be considered human beings, users can also represent other requesting entities such as machines or devices. It is imperative that all subjects have unique identifiers. For instance, subjects acting on behalf of human users may inherit the user’s ID obtained through the identification and authentication process. However, a user may sign onto the system as different subjects depending on which resources and applications the user wishes to access. For instance, a user may have a need to invoke multiple applications. Under these circumstances, two or more subjects would correspond to the same user. Because a subject can invoke or create other subjects, subjects can be represented as objects where the child subjects may be executed across platforms or applications, or both. Essential properties of subjects are that they have exclusive access to their own memory and none to any others, they have potentially different access to objects than other subjects, and that they are semiautonomous. The first two properties are essential for subject isolation, and the latter presents a vulnerability. In addition to issuing user requests, a subject may maliciously (through a Trojan horse), or by system error, issue requests that are independent of, and perhaps unknown to its user.\n\n2.2.2\n\nPrinciples of secure design\n\nSalzer and Schroeder identified several design principles pertaining to protection mechanisms [15]. Although first proposed in 1975, before the rise of networking and the Internet, these design principles continue to hold today. (Some of the principles in fact can be traced to the rules for military ciphers\n\n32\n\nAccess Control: Properties, Policies, and Models\n\nproposed by Auguste Kerchoffs in the nineteenth century.) They promote simplicity, isolation, confinement, and ease of use: 1.\n\nLeast privilege: Every user and process should have the least set of permissions or privileges necessary in conducting the task at hand. The implementation of this principle has the effect of limiting damage that can result from system error or malicious events. When considering a user, permissions should be carefully assigned and periodically reviewed to ensure they minimally fit the user’s functional needs. When considering a process, a minimum subset of the evoking user’s security attributes with associated permissions should be activated during the course of a session.\n\n2.\n\nEconomy of mechanism: The design should be sufficiently small and simple so that it can be evaluated and shown to be correct. Simple means that less can go wrong and when errors do occur, they are easier to identify and fix. The application of this principle usually entails implementing the protection mechanism at the lowest and most protected levels of the system possible, where the higher levels (e.g., applications) are controlled by the lower levels.\n\n3.\n\nFail-safe defaults: Access decisions should be based on inclusion rather than on exclusion. The default should be lack of access. If the protection mechanism should fail, then legitimate access is denied, but illegitimate access is also denied. Note that there may be a trade-off between this rule and the security goal of availability.\n\n4.\n\nComplete mediation: Every request for access by a subject should be checked for authorization. If permissions change, different results are computed. Any caching of results should not be permitted.\n\n5.\n\nOpen design (Kerckhoffs’ law): The premise of security should not depend on the design being secret. If the design is sound the system should be secure. The more eyes the greater the likelihood of success. This principle has traditionally been applied to cryptographic system where the algorithms are subject to public scrutiny.\n\n6.\n\nSeparation of privilege: Where possible, a protection mechanism should depend on multiple conditions being satisfied, such as requiring cooperation from two independent entities, or requiring cosigners.\n\n2.3\n\n2.3\n\nReference monitor and security kernel\n\n33\n\n7.\n\nLeast common mechanism: Minimize the sharing of mechanisms by multiple users. The implementation of this principle includes isolation through physically separate systems (sandboxes) or though logically through virtual machines.\n\n8.\n\nPsychological acceptability: The protection system interface should be easy to use so that users accept the protection mechanism correctly. The complexity of the protection system should be transparent to the user. The user should not have to logoff and back on in performing normal tasks.\n\nReference monitor and security kernel Since its introduction in the Anderson report [1], the reference monitor concept has served the security community in two ways. First, it provides an abstract model of the necessary properties in achieving a high-assurance access control mechanism. Second, it has been used as guidance in the design, development, and implementation and subsequent analyses of secure IT systems. The reference monitor (see Figure 2.1) is an abstract concept, whereby all accesses that subjects make to objects are authorized based on the information contained in an access control database. Conceptually, the reference monitor represents the hardware and software portion of an operating system that is responsible for the enforcement of the security policy of the system. The access control database is the embodiment of this policy in terms of subject and object attributes and access rights. When a subject attempts to perform an operation (e.g., read or write) on an object, the reference monitor must perform a check, comparing the attributes of the subject with that of the object. In addition, the reference monitor, with respect to some security policy, must control the specific checks that are made and all modifications to the access control database. As an abstraction, the reference monitor does not dictate any specific policy to be enforced by the system, nor does it address any particular implementation. Rather, the reference monitor defines an assurance framework that has been used for over three decades in the design, development, and implementation of highly secure IT systems, and it has served as the foundation in evaluation of the relative degrees of trust that can be assigned to a multiuser computing system. The abstract requirements of a reference monitor are comprised of three fundamental implementation principles, described as f"
    }
}