{
    "id": "dbpedia_8592_0",
    "rank": 93,
    "data": {
        "url": "https://opensource-heroes.com/r/DSpace/dspace-angular",
        "read_more_link": "",
        "language": "en",
        "title": "angular Open Source project",
        "top_image": "https://opensource-heroes.com/assets/og/global8-5f6ad5d06d93e16214b5a8835af29db92663bdfa.png",
        "meta_img": "https://opensource-heroes.com/assets/og/global8-5f6ad5d06d93e16214b5a8835af29db92663bdfa.png",
        "images": [
            "https://opensource-heroes.com/assets/logo-73bf46ac97f6e1342a34af7b069727172b3a1034.svg",
            "https://opensource-heroes.com/assets/logo-white-35f6cd5ea1d64625cd6f1e428a30632dfdba2c63.svg",
            "https://opensource-heroes.com/assets/github-logo-86050eddecfe1cfbd92943ca8476fe54d44aec4f.png",
            "https://opensource-heroes.com/assets/github-logo-86050eddecfe1cfbd92943ca8476fe54d44aec4f.png",
            "https://opensource-heroes.com/assets/github-logo-black-29d80d5ce0a1d64ecfae1c5dd8335626d9b2261d.png",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/twitter-white-cf5ddeb01b2262190089c8374ee82611d8a83bc9.svg",
            "https://opensource-heroes.com/assets/linked-in-white-a36c0ee665eb9de62fb54380c7d490db2b46b07a.svg",
            "https://opensource-heroes.com/assets/facebook-white-8e3443638e6d181b5a3bb58ccbd929f600f68e19.png",
            "https://avatars.githubusercontent.com/u/428620?v=4",
            "https://opensource-heroes.com/assets/github-logo-black-29d80d5ce0a1d64ecfae1c5dd8335626d9b2261d.png",
            "https://github.com/DSpace/dspace-angular/workflows/Build/badge.svg?branch=main",
            "https://camo.githubusercontent.com/fddcb2b82c0f8817c693b92936f0bb1f8741bad2f7eda22234fb7845fcb07f27/68747470733a2f2f636f6465636f762e696f2f67682f4453706163652f6473706163652d616e67756c61722f6272616e63682f6d61696e2f67726170682f62616467652e737667",
            "https://camo.githubusercontent.com/c69a147bc2f4482ed82b430e9b9f0868a1ecbad963785e1b2d1b868a6296837f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f756e6976657273616c2d616e67756c6172322d627269676874677265656e2e7376673f7374796c653d666c6174",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg",
            "https://opensource-heroes.com/assets/pixel-star-30f09ab325dab10b6bff4f56b1aaa35c77421cbc.svg",
            "https://opensource-heroes.com/assets/pixel-star-white-6ca0f53bbabea5f454c1fd7a5e173a10ca0c1950.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "DSpace 7.x (and later) User Interface built on Angular.io",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Open Source Heroes",
        "canonical_link": null,
        "text": "dspace-angular\n\nThe DSpace User Interface built on Angular, written in TypeScript and using Angular Universal.\n\nOverview\n\nDSpace open source software is a turnkey repository application used by more than 2,000 organizations and institutions worldwide to provide durable access to digital resources. For more information, visit http://www.dspace.org/\n\nDSpace consists of both a Java-based backend and an Angular-based frontend.\n\nBackend (https://github.com/DSpace/DSpace/) provides a REST API, along with other machine-based interfaces (e.g. OAI-PMH, SWORD, etc)\n\nThe REST Contract is at https://github.com/DSpace/RestContract\n\nFrontend (this codebase) is the User Interface built on the REST API\n\nDownloads\n\nBackend (REST API): https://github.com/DSpace/DSpace/releases\n\nFrontend (User Interface): https://github.com/DSpace/dspace-angular/releases\n\nDocumentation / Installation\n\nDocumentation for each release may be viewed online or downloaded via our Documentation Wiki.\n\nThe latest DSpace Installation instructions are available at: https://wiki.lyrasis.org/display/DSDOC7x/Installing+DSpace\n\nQuick start\n\nEnsure you're running Node v16.x or v18.x, npm >= v5.x and yarn == v1.x\n\n# clone the repo git clone https://github.com/DSpace/dspace-angular.git # change directory to our repo cd dspace-angular # install the local dependencies yarn install # start the server yarn start\n\nThen go to http://localhost:4000 in your browser\n\nNot sure where to start? watch the training videos linked in the Introduction to the technology section below.\n\nTable of Contents\n\nIntroduction to the technology\n\nRequirements\n\nInstalling\n\nConfiguring\n\nRunning the app\n\nRunning in production mode\n\nDeploy\n\nRunning the application with Docker\n\nCleaning\n\nTesting\n\nTest a Pull Request\n\nUnit Tests\n\nE2E Tests\n\nWriting E2E Tests\n\nDocumentation\n\nOther commands\n\nRecommended Editors/IDEs\n\nCollaborating\n\nFile Structure\n\nManaging Dependencies (via yarn)\n\nFrequently asked questions\n\nLicense\n\nIntroduction to the technology\n\nYou can find more information on the technologies used in this project (Angular.io, Angular CLI, Typescript, Angular Universal, RxJS, etc) on the LYRASIS wiki\n\nRequirements\n\nNode.js and yarn\n\nEnsure you're running node v16.x or v18.x and yarn == v1.x\n\nIf you have nvm or nvm-windows installed, which is highly recommended, you can run nvm install --lts && nvm use to install and start using the latest Node LTS.\n\nInstalling\n\nyarn install to install the local dependencies\n\nConfiguring\n\nDefault runtime configuration file is located in config/ folder. These configurations can be changed without rebuilding the distribution.\n\nTo override the default configuration values, create local files that override the parameters you need to change. You can use config.example.yml as a starting point.\n\nCreate a new config.(dev or development).yml file in config/ for a development environment;\n\nCreate a new config.(prod or production).yml file in config/ for a production environment;\n\nThe settings can also be overwritten using an environment file or environment variables.\n\nThis file should be called .env and be placed in the project root.\n\nThe following non-convention settings:\n\nDSPACE_HOST # The host name of the angular application DSPACE_PORT # The port number of the angular application DSPACE_NAMESPACE # The namespace of the angular application DSPACE_SSL # Whether the angular application uses SSL [true/false]\n\nAll other settings can be set using the following convention for naming the environment variables:\n\nreplace all . with _\n\nconvert all characters to upper case\n\nprefix with DSPACE_\n\ne.g.\n\n# The host name of the REST application rest.host => DSPACE_REST_HOST # The port number of the REST application rest.port => DSPACE_REST_PORT # The namespace of the REST application rest.nameSpace => DSPACE_REST_NAMESPACE # Whether the angular REST uses SSL [true/false] rest.ssl => DSPACE_REST_SSL cache.msToLive.default => DSPACE_CACHE_MSTOLIVE_DEFAULT auth.ui.timeUntilIdle => DSPACE_AUTH_UI_TIMEUNTILIDLE\n\nThe equavelant to the non-conventional legacy settings:\n\nDSPACE_UI_HOST => DSPACE_HOST DSPACE_UI_PORT => DSPACE_PORT DSPACE_UI_NAMESPACE => DSPACE_NAMESPACE DSPACE_UI_SSL => DSPACE_SSL\n\nThe same settings can also be overwritten by setting system environment variables instead, E.g.:\n\nexport DSPACE_HOST=demo.dspace.org export DSPACE_UI_PORT=4000\n\nThe priority works as follows: environment variable overrides variable in .env file overrides external config set by DSPACE_APP_CONFIG_PATH overrides config.(prod or dev).yml\n\nThese configuration sources are collected at run time, and written to dist/browser/assets/config.json for production and src/app/assets/config.json for development.\n\nThe configuration file can be externalized by using environment variable DSPACE_APP_CONFIG_PATH.\n\nBuildtime Configuring\n\nBuildtime configuration must defined before build in order to include in transpiled JavaScript. This is primarily for the server. These settings can be found under src/environment/ folder.\n\nTo override the default configuration values for development, create local file that override the build time parameters you need to change.\n\nCreate a new environment.(dev or development).ts file in src/environment/ for a development environment;\n\nIf needing to update default configurations values for production, update local file that override the build time parameters you need to change.\n\nUpdate environment.production.ts file in src/environment/ for a production environment;\n\nThe environment object is provided for use as import in code and is extended with the runtime configuration on bootstrap of the application.\n\nTake caution moving runtime configs into the buildtime configuration. They will be overwritten by what is defined in the runtime config on bootstrap.\n\nUsing environment variables in code\n\nTo use environment variables in a UI component, use:\n\nimport { AppConfig, APP_CONFIG } from 'src/config/app-config.interface'; ... constructor(@Inject(APP_CONFIG) private appConfig: AppConfig) {} ...\n\nor\n\nimport { environment } from '../environment.ts';\n\nRunning the app\n\nAfter you have installed all dependencies you can now run the app. Run yarn run start:dev to start a local server which will watch for changes, rebuild the code, and reload the server for you. You can visit it at http://localhost:4000.\n\nRunning in production mode\n\nWhen building for production we're using Ahead of Time (AoT) compilation. With AoT, the browser downloads a pre-compiled version of the application, so it can render the application immediately, without waiting to compile the app first. The compiler is roughly half the size of Angular itself, so omitting it dramatically reduces the application payload.\n\nTo build the app for production and start the server (in one command) run:\n\nyarn start\n\nThis will run the application in an instance of the Express server, which is included.\n\nIf you only want to build for production, without starting, run:\n\nyarn run build:prod\n\nThis will build the application and put the result in the dist folder. You can copy this folder to wherever you need it for your application server. If you will be using the built-in Express server, you'll also need a copy of the node_modules folder tucked inside your copy of dist.\n\nAfter building the app for production, it can be started by running:\n\nyarn run serve:ssr\n\nRunning the application with Docker\n\nNOTE: At this time, we do not have production-ready Docker images for DSpace. That said, we do have quick-start Docker Compose scripts for development or testing purposes.\n\nSee Docker Runtime Options\n\nCleaning\n\n# clean everything, including node_modules. You'll need to run yarn install again afterwards. yarn run clean # clean files generated by the production build (.ngfactory files, css files, etc) yarn run clean:prod # cleans the distribution directory yarn run clean:dist\n\nTesting\n\nTest a Pull Request\n\nIf you would like to contribute by testing a Pull Request (PR), here's how to do so. Keep in mind, you do not need to have a DSpace backend / REST API installed locally to test a PR. By default, the dspace-angular project points at our demo REST API\n\nPull down the branch that the Pull Request was built from. Easy instructions for doing so can be found on the Pull Request itself.\n\nNext to the \"Merge\" button, you'll see a link that says \"command line instructions\".\n\nClick it, and follow \"Step 1\" of those instructions to checkout the pull down the PR branch.\n\nyarn run clean (This resets your local dependencies to ensure you are up-to-date with this PR)\n\nyarn install (Updates your local dependencies to those in the PR)\n\nyarn start (Rebuilds the project, and deploys to localhost:4000, by default)\n\nAt this point, the code from the PR will be deployed to http://localhost:4000. Test it out, and ensure that it does what is described in the PR (or fixes the bug described in the ticket linked to the PR).\n\nOnce you have tested the Pull Request, please add a comment and/or approval to the PR to let us know whether you found it to be successful (or not). Thanks!\n\nUnit Tests\n\nUnit tests use the Jasmine test framework, and are run via Karma.\n\nYou can find the Karma configuration file at the same level of this README file:./karma.conf.js If you are going to use a remote test environment you need to edit the ./karma.conf.js. Follow the instructions you will find inside it. To executing tests whenever any file changes you can modify the 'autoWatch' option to 'true' and 'singleRun' option to 'false'. A coverage report is also available at: http://localhost:9876/ after you run: yarn run coverage.\n\nThe default browser is Google Chrome.\n\nPlace your tests in the same location of the application source code files that they test, e.g. ending with *.component.spec.ts\n\nand run: yarn test\n\nIf you run into odd test errors, see the Angular guide to debugging tests: https://angular.io/guide/test-debugging\n\nE2E Tests\n\nE2E tests (aka integration tests) use Cypress.io. Configuration for cypress can be found in the cypress.json file in the root directory.\n\nThe test files can be found in the ./cypress/integration/ folder.\n\nBefore you can run e2e tests, two things are REQUIRED:\n\nYou MUST be running the DSpace backend (i.e. REST API) locally. The e2e tests will NOT succeed if run against our demo/sandbox REST API (https://demo.dspace.org/server/ or https://sandbox.dspace.org/server/), as those sites may have content added/removed at any time.\n\nAfter starting up your backend on localhost, make sure either your config.prod.yml or config.dev.yml has its rest settings defined to use that localhost backend.\n\nIf you'd prefer, you may instead use environment variables as described at Configuring. For example:\n\nDSPACE_REST_SSL = false DSPACE_REST_HOST = localhost DSPACE_REST_PORT = 8080\n\nYour backend MUST include our Entities Test Data set. Some tests run against a specific Community/Collection/Item UUID. These UUIDs are all valid for our Entities Test Data set.\n\n(Recommended) The Entities Test Data set may be installed easily via Docker, see https://github.com/DSpace/DSpace/tree/main/dspace/src/main/docker-compose#ingest-option-2-ingest-entities-test-data\n\nAlternatively, the Entities Test Data set may be installed via a simple SQL import (e. g. psql -U dspace < dspace7-entities-data.sql). See instructions in link above.\n\nAfter performing the above setup, you can run the e2e tests using\n\nng e2e\n\nNOTE: By default these tests will run against the REST API backend configured via environment variables or in config.prod.yml. If you'd rather it use config.dev.yml, just set the NODE_ENV environment variable like this:\n\nNODE_ENV=development ng e2e\n\nThe ng e2e command will start Cypress and allow you to select the browser you wish to use, as well as whether you wish to run all tests or an individual test file. Once you click run on test(s), this opens the Cypress Test Runner to run your test(s) and show you the results.\n\nWriting E2E Tests\n\nAll E2E tests must be created under the ./cypress/integration/ folder, and must end in .spec.ts. Subfolders are allowed.\n\nThe easiest way to start creating new tests is by running ng e2e. This builds the app and brings up Cypress.\n\nFrom here, if you are editing an existing test file, you can either open it in your IDE or run it first to see what it already does.\n\nTo create a new test file, click + New Spec File. Choose a meaningful name ending in spec.ts (Please make sure it ends in .ts so that it's a Typescript file, and not plain Javascript)\n\nStart small. Add a basic describe and it which just cy.visit the page you want to test. For example:\n\ndescribe('Community/Collection Browse Page', () => { it('should exist as a page', () => { cy.visit('/community-list'); }); });\n\nRun your test file from the Cypress window. This starts the Cypress Test Runner in a new browser window.\n\nIn the Cypress Test Runner, you'll Cypress automatically visit the page. This first test will succeed, as all you are doing is making sure the page exists.\n\nFrom here, you can use the Selector Playground in the Cypress Test Runner window to determine how to tell Cypress to interact with a specific HTML element on that page.\n\nMost commands start by telling Cypress to get() a specific element, using a CSS or jQuery style selector\n\nIt's generally best not to rely on attributes like class and id in tests, as those are likely to change later on. Instead, you can add a data-test attribute to makes it clear that it's required for a test.\n\nCypress can then do actions like click() an element, or type() text in an input field, etc.\n\nWhen running with server-side rendering enabled, the client first receives HTML without the JS; only once the page is rendered client-side do some elements (e.g. a button that toggles a Bootstrap dropdown) become fully interactive. This can trip up Cypress in some cases as it may try to click or type in an element that's not fully loaded yet, causing tests to fail.\n\nTo work around this issue, define the attributes you use for Cypress selectors as [attr.data-test]=\"'button' | ngBrowserOnly\". This will only show the attribute in CSR HTML, forcing Cypress to wait until CSR is complete before interacting with the element.\n\nCypress can also validate that something occurs, using should() assertions.\n\nAny time you save your test file, the Cypress Test Runner will reload & rerun it. This allows you can see your results quickly as you write the tests & correct any broken tests rapidly.\n\nCypress also has a great guide on writing your first test with much more info. Keep in mind, while the examples in the Cypress docs often involve Javascript files (.js), the same examples will work in our Typescript (.ts) e2e tests.\n\nHint: Creating e2e tests is easiest in an IDE (like Visual Studio), as it can help prompt/autocomplete your Cypress commands.\n\nMore Information: docs.cypress.io has great guides & documentation helping you learn more about writing/debugging e2e tests in Cypress.\n\nLearning how to build tests\n\nSee our DSpace Code Testing Guide for more hints/tips.\n\nDocumentation\n\nOfficial DSpace documentation is available in the DSpace wiki at https://wiki.lyrasis.org/display/DSDOC7x/\n\nSome UI specific configuration documentation is also found in the ./docs folder of this codebase.\n\nBuilding code documentation\n\nTo build the code documentation we use TYPEDOC. TYPEDOC is a documentation generator for TypeScript projects. It extracts information from properly formatted comments that can be written within the code files. Follow the instructions here to know how to make those comments.\n\nRun:yarn run docs to produce the documentation that will be available in the 'doc' folder.\n\nOther commands\n\nThere are many more commands in the scripts section of package.json. Most of these are executed by one of the commands mentioned above.\n\nA command with a name that starts with pre or post will be executed automatically before or after the script with the matching name. e.g. if you type yarn run start the prestart script will run first, then the start script will trigger.\n\nRecommended Editors/IDEs\n\nTo get the most out of TypeScript, you'll need a TypeScript-aware editor. We've had good experiences using these editors:\n\nFree\n\nVisual Studio Code\n\nDebugger for Chrome\n\nPaid\n\nWebstorm or IntelliJ IDEA Ultimate\n\nSublime Text\n\nTypescript-Sublime-Plugin\n\nContributing\n\nSee Contributing documentation\n\nFile Structure\n\ndspace-angular ├── config * │ └── config.yml * Default app config ├── cypress * Folder for Cypress (https://cypress.io/) / e2e tests │ ├── downloads * │ ├── fixtures * Folder for e2e/integration test files │ ├── integration * Folder for any fixtures needed by e2e tests │ ├── plugins * Folder for Cypress plugins (if any) │ ├── support * Folder for global e2e test actions/commands (run for all tests) │ └── tsconfig.json * TypeScript configuration file for e2e tests ├── docker * See docker/README.md for details │ ├── cli.assetstore.yml * │ ├── cli.ingest.yml * │ ├── cli.yml * │ ├── db.entities.yml * │ ├── docker-compose-ci.yml * │ ├── docker-compose-rest.yml * │ ├── docker-compose.yml * │ └── README.md * ├── docs * Folder for documentation │ └── Configuration.md * Configuration documentation ├── scripts * │ ├── merge-i18n-files.ts * │ ├── serve.ts * │ ├── sync-i18n-files.ts * │ └── test-rest.ts * ├── src * The source of the application │ ├── app * The source code of the application, subdivided by module/page. │ ├── assets * Folder for static resources │ │ ├── fonts * Folder for fonts │ │ ├── i18n * Folder for i18n translations │ │ └── images * Folder for images │ ├── backend * Folder containing a mock of the REST API, hosted by the express server │ ├── config * │ ├── environments * │ │ ├── environment.production.ts * Production configuration files │ │ ├── environment.test.ts * Test configuration files │ │ └── environment.ts * Default (development) configuration files │ ├── mirador-viewer * │ ├── modules * │ ├── ngx-translate-loaders * │ ├── styles * Folder containing global styles │ ├── themes * Folder containing available themes │ │ ├── custom * Template folder for creating a custom theme │ │ └── dspace * Default 'dspace' theme │ ├── index.csr.html * The index file for client side rendering fallback │ ├── index.html * The index file │ ├── main.browser.ts * The bootstrap file for the client │ ├── main.server.ts * The express (http://expressjs.com/) config and bootstrap file for the server │ ├── polyfills.ts * │ ├── robots.txt * The robots.txt file │ ├── test.ts * │ └── typings.d.ts * ├── webpack * │ ├── helpers.ts * Webpack helpers │ ├── webpack.browser.ts * Webpack (https://webpack.github.io/) config for browser build │ ├── webpack.common.ts * Webpack (https://webpack.github.io/) common build config │ ├── webpack.mirador.config.ts * Webpack (https://webpack.github.io/) config for mirador config build │ ├── webpack.prod.ts * Webpack (https://webpack.github.io/) config for prod build │ └── webpack.test.ts * Webpack (https://webpack.github.io/) config for test build ├── angular.json * Angular CLI (https://angular.io/cli) configuration ├── cypress.json * Cypress Test (https://www.cypress.io/) configuration ├── Dockerfile * ├── karma.conf.js * Karma configuration file for Unit Test ├── LICENSE * ├── LICENSES_THIRD_PARTY * ├── nodemon.json * Nodemon (https://nodemon.io/) configuration ├── package.json * This file describes the npm package for this project, its dependencies, scripts, etc. ├── postcss.config.js * PostCSS (http://postcss.org/) configuration ├── README.md * This document ├── SECURITY.md * ├── server.ts * Angular Universal Node.js Express server ├── tsconfig.app.json * TypeScript config for browser (app) ├── tsconfig.json * TypeScript common config ├── tsconfig.server.json * TypeScript config for server ├── tsconfig.spec.json * TypeScript config for tests ├── tsconfig.ts-node.json * TypeScript config for using ts-node directly ├── tslint.json * TSLint (https://palantir.github.io/tslint/) configuration ├── typedoc.json * TYPEDOC configuration └── yarn.lock * Yarn lockfile (https://yarnpkg.com/en/docs/yarn-lock)\n\nManaging Dependencies (via yarn)\n\nThis project makes use of yarn to ensure that the exact same dependency versions are used every time you install it.\n\nyarn creates a yarn.lock to track those versions. That file is updated automatically by whenever dependencies are added/updated/removed via yarn.\n\nAdding new dependencies: To install/add a new dependency (third party library), use yarn add. For example: yarn add some-lib.\n\nIf you are adding a new build tool dependency (to devDependencies), use yarn add some-lib --dev\n\nUpgrading existing dependencies: To upgrade existing dependencies, you can use yarn upgrade. For example: yarn upgrade some-lib or yarn upgrade some-lib@version\n\nRemoving dependencies: If a dependency is no longer needed, or replaced, use yarn remove to remove it.\n\nAs you can see above, using yarn commandline tools means that you should never need to modify the package.json manually. We recommend always using yarn to keep dependencies updated / in sync.\n\nAdding Typings for libraries\n\nIf the library does not include typings, you can install them using yarn:\n\nyarn add d3 yarn add @types/d3 --dev\n\nIf the library doesn't have typings available at @types/, you can still use it by manually adding typings for it:\n\nIn src/typings.d.ts, add the following code:\n\ndeclare module 'typeless-package';\n\nThen, in the component or file that uses the library, add the following code:\n\nimport * as typelessPackage from 'typeless-package'; typelessPackage.method();\n\nDone. Note: you might need or find useful to define more typings for the library that you're trying to use.\n\nIf you're importing a module that uses CommonJS you need to import as\n\nimport * as _ from 'lodash';\n\nFrequently asked questions\n\nWhy is my service, aka provider, is not injecting a parameter correctly?\n\nPlease use @Injectable() for your service for typescript to correctly attach the metadata\n\nWhere do I write my tests?\n\nYou can write your tests next to your component files. e.g. for src/app/home/home.component.ts call it src/app/home/home.component.spec.ts\n\nHow do I start the app when I get EACCES and EADDRINUSE errors?\n\nThe EADDRINUSE error means the port 4000 is currently being used and EACCES is lack of permission to build files to ./dist/\n\nWhat are the naming conventions for Angular?\n\nSee the official angular style guide\n\nWhy is the size of my app larger in development?\n\nThe production build uses a whole host of techniques (ahead-of-time compilation, rollup to remove unreachable code, minification, etc.) to reduce the size, that aren't used during development in the intrest of build speed.\n\nnode-pre-gyp ERR in yarn install (Windows)\n\ninstall Python x86 version between 2.5 and 3.0 on windows. See this issue\n\nHow do I handle merge conflicts in yarn.lock?\n\nfirst check out the yarn.lock file from the branch you're merging in to yours: e.g. git checkout --theirs yarn.lock\n\nnow run yarn install again. Yarn will create a new lockfile that contains both sets of changes.\n\nthen run git add yarn.lock to stage the lockfile for commit\n\nand git commit to conclude the merge\n\nGetting Help\n\nDSpace provides public mailing lists where you can post questions or raise topics for discussion. We welcome everyone to participate in these lists:\n\n[email protected] : General discussion about DSpace platform, announcements, sharing of best practices\n\n[email protected] : Technical support mailing list. See also our guide for How to troubleshoot an error.\n\n[email protected] : Developers / Development mailing list\n\nGreat Q&A is also available under the DSpace tag on Stackoverflow\n\nAdditional support options are at https://wiki.lyrasis.org/display/DSPACE/Support\n\nDSpace also has an active service provider network. If you'd rather hire a service provider to install, upgrade, customize or host DSpace, then we recommend getting in touch with one of our Registered Service Providers.\n\nIssue Tracker\n\nDSpace uses GitHub to track issues:\n\nBackend (REST API) issues: https://github.com/DSpace/DSpace/issues\n\nFrontend (User Interface) issues: https://github.com/DSpace/dspace-angular/issues\n\nLicense\n\nDSpace source code is freely available under a standard BSD 3-Clause license. The full license is available in the LICENSE file or online at http://www.dspace.org/license/\n\nDSpace uses third-party libraries which may be distributed under different licenses. Those licenses are listed in the LICENSES_THIRD_PARTY file."
    }
}