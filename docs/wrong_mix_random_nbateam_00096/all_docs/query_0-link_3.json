{
    "id": "wrong_mix_random_nbateam_00096_0",
    "rank": 3,
    "data": {
        "url": "https://www.usenix.org/conference/usenixsecurity22/presentation/scharnowski",
        "read_more_link": "",
        "language": "en",
        "title": "Fuzzware: Using Precise MMIO Modeling for Effective Firmware Fuzzing",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.usenix.org/sites/default/files/styles/neat_conference_menu_logo/public/sec22_wordmark_stacked_white_400x164_rev.png?itok=RqiBGb4U",
            "https://www.usenix.org/modules/file/icons/application-pdf.png",
            "https://www.usenix.org/modules/file/icons/application-pdf.png",
            "https://www.usenix.org/modules/file/icons/application-pdf.png",
            "https://www.usenix.org/sites/default/files/usenix_artifact_evaluation_available_125_update.png",
            "https://www.usenix.org/sites/default/files/usenix_artifact_evaluation_functional_125.png",
            "https://www.usenix.org/sites/default/files/usenix_artifact_evaluation_reproduced_125.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Moritz Schloegel",
            "Eric Gustafson",
            "Marius Muench",
            "Giovanni Vigna",
            "Christopher Kruegel",
            "Thorsten Holz",
            "Ali Abbasi",
            "Tobias Scharnowski",
            "Nils Bars"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.usenix.org/sites/default/files/waves_favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "As embedded devices are becoming more pervasive in our everyday lives, they turn into an attractive target for adversaries. Despite their high value and large attack surface, applying automated testing techniques such as fuzzing is not straightforward for such devices. As fuzz testing firmware on constrained embedded devices is inefficient, state-of-the-art approaches instead opt to run the firmware in an emulator (through a process called re-hosting). However, existing approaches either use coarse-grained static models of hardware behavior or require manual effort to re-host the firmware.\n\nWe propose a novel combination of lightweight program analysis, re-hosting, and fuzz testing to tackle these challenges. We present the design and implementation of Fuzzware, a software-only system to fuzz test unmodified monolithic firmware in a scalable way. By determining how hardware-generated values are actually used by the firmware logic, Fuzzware can automatically generate models that help focusing the fuzzing process on mutating the inputs that matter, which drastically improves its effectiveness.\n\nWe evaluate our approach on synthetic and real-world targets comprising a total of 19 hardware platforms and 77 firmware images. Compared to state-of-the-art work, Fuzzware achieves up to 3.25 times the code coverage and our modeling approach reduces the size of the input space by up to 95.5%. The synthetic samples contain 66 unit tests for various hardware interactions, and we find that our approach is the first generic re-hosting solution to automatically pass all of them. Fuzzware discovered 15 completely new bugs including bugs in targets which were previously analyzed by other works; a total of 12 CVEs were assigned."
    }
}