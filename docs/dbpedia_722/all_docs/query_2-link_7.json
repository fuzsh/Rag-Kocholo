{
    "id": "dbpedia_722_2",
    "rank": 7,
    "data": {
        "url": "https://retrocomputing.stackexchange.com/questions/28372/first-use-of-an-os-in-gaming-consoles",
        "read_more_link": "",
        "language": "en",
        "title": "First use of an OS in gaming consoles?",
        "top_image": "https://cdn.sstatic.net/Sites/retrocomputing/Img/apple-touch-icon@2.png?v=6b27f39a6023",
        "meta_img": "https://cdn.sstatic.net/Sites/retrocomputing/Img/apple-touch-icon@2.png?v=6b27f39a6023",
        "images": [
            "https://i.sstatic.net/acYd0.png?s=64",
            "https://www.gravatar.com/avatar/9f2bfb454da13e7a17d5ec6df6aac25f?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/acYd0.png?s=64",
            "https://lh3.googleusercontent.com/-yspgfz81fFw/AAAAAAAAAAI/AAAAAAAAD5o/7CFgAMaSHSE/photo.jpg?sz=64",
            "https://i.sstatic.net/F7ZHOMVo.jpg?s=64",
            "https://www.gravatar.com/avatar/0ac099ea8419dc079b1c364a64551034?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/e11b58e11decc7b4c352d3ac3b2d0b90?s=64&d=identicon&r=PG",
            "https://retrocomputing.stackexchange.com/posts/28372/ivc/f21e?prg=6e40fbee-ecb7-4fda-8484-e2b33e23552d"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-02-01T07:33:09",
        "summary": "",
        "meta_description": "Early gaming consoles were quite simple machines (from today's point of view). So simple in fact that often the games were the initial &quot;entry point&quot; for the CPU on boot and the games had ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/retrocomputing/Img/favicon.ico?v=9b6f1e4fd156",
        "meta_site_name": "Retrocomputing Stack Exchange",
        "canonical_link": "https://retrocomputing.stackexchange.com/questions/28372/first-use-of-an-os-in-gaming-consoles",
        "text": "TL;DR: For early consoles, having an OS was the norm; lacking one was an exception\n\nEven the very first second-generation consoles - that is, the ones using a micro-processor (*1) - commonly had some kind of monitor system, something that today is usually called an OS (*2). Almost all early systems came with on-board ROM and a good number of them started into those for system setup and management.\n\nWell known examples (by date):\n\n1976\n\nFairchild Channel F/Saba VideoPlay\n\n1977\n\nRCA Studio II (in part)\n\n1978\n\nBally Astrocade\n\nPhilips G7000 / Odyssey 2\n\n1979\n\nMattel Intellivision\n\n1982\n\nColecoVision\n\nAtari's 1977 VCS is something of an outlier among the second-generation consoles by not providing any built-in ROM and no runtime at all. Then again, it was this absolute minimalist design which allowed a very low price point - and ultimately, command of the market by 1980.\n\nDetails\n\nThe list is by no way complete and focuses on more well-known systems.\n\nFairchild Channel F / VES / Saba VideoPlay\n\nIntroduced November 1976.\n\nThis line includes the very first second-generation System - at least the first one that sold in notable numbers. The Channel F is built around the Fairchild F8 CPU (*3), a very unusual design by today's standards, as the ROM chips contained pointer registers including each a PC of its own. Not a bad idea, as it would allow ROMs of indefinite size :) In reality the local PC was 16 Bit, so ROM size was limited to 64 KiB per ROM. The VES had 2 ROMs of 1 KiB each, containing a monitor system and two games. The cartridge slot had 5 ROM-select lines, so up to 322 KiB of ROM ... not bad for the very first one :))\n\nRCA Studio II\n\nIntroduced January 1977.\n\nThe RCA 1802-based Studio II provided 2 KiB of onboard ROM with basic I/O functions and five simple games. It only partially fits this list, as ROM cartridges could disable the internal ROM and most did. Due to this it might in fact also qualify as the first console able to run without OS support :))\n\nBally Astrocade\n\nIntroduced April 1978.\n\nThis Z80-based system featured an 8 KiB ROM, mapped at 0000h. Of this, the first half holds the OS, while the other half contains the 4 applications. ROM cartridges could have up to 8 KiB and were mapped right after the built-in ROM at 2000h. On startup it checks the game ROM, lists its application and after that the built-in ones. Cartridges were hot-pluggable and it seems that they were originally planned to enable the OS to support media change by change of cartridge without reset.\n\nPhilips G700 / Odyssey 2\n\nIntroduced December 1978.\n\nThe G7000 was based on a ROM-programmed 8048 (1 KiB). EA is fixed to ground, so the internal ROM is always enabled and takes control after reset or any interrupt (Timer, Video). The 8048 can only address a maximum of 4 KiB at once, but two port lines allow extending that to 16 KiB of ROM.\n\nMattel Intellivision\n\nIntroduced January 1979.\n\nThe Intellivision uses General Instrument's CP1600 and a 4 KiB 'Exec' which could be classified as an early game engine. Besides basic system setup, it supplied main game loop items and related I/O handling, greatly reducing code in cartridges. Most early games are written as applications for this. The downside was of course management overhead resulting in a 20 Hz frame rate. Later, when ROMs grew large and cheap, more cartridges included their own handlers, pushing up to 60 fps.\n\nColeco ColecoVision\n\nIntroduced August 1982.\n\nColeco's second gen console was Z80-based and featured an 8 KiB monitor system, called BIOS. It sets up the system, displays a copyright notice, and then transfers control to the game cartridge if present. The BIOS is always mapped at 0000h, thus all interrupt handling goes through its code. Cartridges are mapped at 8000h. The BIOS also contains bitmap fonts and various utility routines for games.\n\n*1 - Second Generation is defined as the period between first use of microprocessors in 1976 and the North American video game crash of 1983, making the Vectrex eventually the last second-generation and the NES the first third-generation console. This classification may seem arbitrary in most parts of the worlds as the 'crash' was a strictly North American phenomenon. Still, the classification of console generations is mostly helpful in many ways.\n\n*2 - The term OS is a later term coined in computer science classes. Originally the term Monitor was used - no matter whether it included some (human) command interface or not. The term prevails until today for low level OSes. In that context I would classify the IBM BIOS as OS. After all, we call DOS an OS and all it does is add a file system handler above the BIOS's disk handler.\n\n*3 - Which itself is a licensed version of the German AEG/Olympia CP3-F design.\n\nThis all boils down to what is counted as an OS to begin with.\n\nFirst consoles such (e.g. NES) had no ROM in them and CPU started the execution from cartridge ROM directly.\n\nThe next step is to have a some sort of boot ROM to initialize the system and make sure the ROM is somewhat valid before running it, e.g. Game Boy, but it does not provide any services.\n\nThe next level is a console with ROM BIOS which not only jumps to run valid game code, but stays present and provides services that the game code can utilize.\n\nThere is no limit what such a ROM BIOS can do or provide or manage the hardware, and it is perfectly possible that it could contain a primitive OS of some kind, for example Playstation 1 can show you a boot splash screen and if there is no game disc inserted, it allows you to manage a memory card and play audio CDs. But while it allows the user to operate the system, is it an OS, or just non-OS program or system ROM or bootloader that runs and lets you do things.\n\nThe Playstation 2 is also said to have just system software like this but can it be called an OS is another thing, because it was possible to officially boot up a Linux-based operating system on the PS2.\n\nThe original Xbox [2001] is said to run an OS as the system software, and it is based on modified Windows 2000. However, the OS unloads itself while a game is run to let the game handle all the console resources.\n\nThe PlayStation 3 [2006] runs CellOS/GameOS which is based on FreeBSD and NetBSD.\n\nThe first console to run internal ROM code and providing a system call API could be Mattel Intellivision [1979]."
    }
}