{
    "id": "dbpedia_3206_2",
    "rank": 46,
    "data": {
        "url": "https://dodcio.defense.gov/open-source-software-faq/",
        "read_more_link": "",
        "language": "en",
        "title": "Open Source Software FAQ",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://dodcio.defense.gov/Portals/0/DoD-Icon-simple.png?ver=twX85R9vCzEldBV9NkynlA%3d%3d",
            "https://dodcio.defense.gov/portals/0/Images/OSSFAQ/oss-development-model.png",
            "https://dodcio.defense.gov/DesktopModules/SharedLibrary/Images/VCL 988_Hoz_CMYK.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-10-28T00:00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/Portals/0/DoD-FavIcon-simple.ico?ver=ItQoEOqef-B7S6JnStgMRA%3d%3d",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "DoD Open Source Software FAQ\n\nOffice of the DoD CIO\n\nFrequently Asked Questions regarding Open Source Software (OSS) and the Department of Defense (DoD)\n\nThis page is an educational resource for government employees and government contractors to understand the policies and legal issues relating to the use of open source software (OSS) in the United States Department of Defense (DoD). The information on this page does not constitute legal advice and any legal questions relating to specific situations should be referred to legal counsel. References to specific products or organizations are for information only, and do not constitute an endorsement of the product/company.\n\nDefining Open Source Software (OSS)\n\nQ: What is open source software (OSS)?\n\nPublic Law 115-232 defines OSS defines OSS as “software for which the human-readable source code is available for use, study, re-use, modification, enhancement, and re-distribution by the users of such software”. This definition is essentially identical to what the DoD has been using since publication of the 16 October 2009 memorandum from the DoD CIO, “Clarifying Guidance Regarding Open Source Software (OSS)”.\n\nCareful legal review is required to determine if a given license is really an open source software license. The following organizations examine licenses; licenses should pass at least the first two industry review processes, and preferably all of them, else they have a greatly heightened risk of not being an open source software license:\n\nOpen source software licenses are reviewed and approved as conforming to the Open Source Definition by the Open Source Initiative (OSI). The OSI publishes a list of licenses which have successfully gone through the approval process and comply with the Open Source Definition.\n\nIn practice, an open source software license must also meet the GNU Free Software Definition; the GNU project publishes a list of licenses that meet the Free Software Definition.\n\nFedora reviews licenses and publishes a list of “good” licenses that Fedora has determined are open source software licenses.\n\nDebian-legal also examines licenses (for Debian) to determine if they meet the Debian social contract; the Debian license information lists licenses that are known to pass (or not pass) these criteria.\n\nIn practice, nearly all open source software is released under one of a very few licenses that are known to meet this definition. These licenses include the MIT license, revised BSD license (and its 2-clause variant), the Apache 2.0 license, the GNU Lesser General Public License (LGPL) versions 2.1 or 3, and the GNU General Public License (GPL) versions 2 or 3. Using a standard license simplifies collaboration and eliminates many legal analysis costs.\n\nQ: What are synonyms for open source software?\n\n“Open source software” is also called “Free software”, “libre software”, “Free/open source software (FOSS or F/OSS)”, and “Free/Libre/Open Source Software (FLOSS)”. The term “Free software” predates the term “open source software”, but the term “Free software” has sometimes been misinterpreted as meaning “no cost”, which is not the intended meaning in this context. (“Free” in “Free software” refers to freedom, not price.) The term “open source software” is sometimes hyphenated as “open-source software”.\n\nThe DoD has chosen to use the term “open source software” (OSS) in its official policy documents.\n\nQ: What are antonyms for open source software?\n\nCommercially-available software that is not open source software is typically called proprietary or closed source software.\n\nQ: Is this related to “open source intelligence”?\n\nNo. In the Intelligence Community (IC), the term “open source” typically refers to overt, publicly available sources (as opposed to covert or classified sources). Thus, Open Source Intelligence (OSINT) is form of intelligence collection management that involves finding, selecting, and acquiring information from publicly available sources and analyzing it to produce actionable intelligence.\n\nAs noted above, in software, “Open Source” refers to “software for which the human-readable source code is available for use, study, re-use, modification, enhancement, and re-distribution by the users of such software”.\n\nQ: Is there a name for software whose source code is publicly available, but does not meet the definition of open source software?\n\nAt this time there is no widely-accepted term for software whose source code is available for review but does not meet the definition of open source software (due to restrictions on use, modification, or redistribution). Terms that people have used include “source available software”, “open-box software”, “visible-source software”, and “disclosed-source software”. (Such terms might include open source software, but could also include other software).\n\nOSS and DoD Policy\n\nQ: What policies address the use of open source software (OSS) in the Department of Defense?\n\nThe following policies apply:\n\nThe Federal Source Code Policy, OMB Memo 16-21, establishes policy regarding consideration of acquiring custom-developed code, requiring agencies to consider the value of publishing custom code as OSS, and establishing a OSS Pilot Program to release 20% of all custom-developed code as OSS. The DoD was later directed to implement this program by Section 875 of the National Defense Authorization Act for FY2018.\n\nThe DoD CIO issued a memorandum titled “Clarifying Guidance Regarding Open Source Software (OSS)” on 16 October 2009, which superseded a memo May 2003 memo from John Stenbit. An update to this guidance is in coordination as of July 2021.\n\nThe Department of Navy CIO issued a memorandum with guidance on open source software on 5 Jun 2007. This memorandum only applies to Navy and Marine Corps commands, but may be a useful reference for others. This memo is available at http://www.doncio.navy.mil/contentview.aspx?id=312. The Department of the Navy has also issued SECNAVINST 5230.15, which is focused on ensuring that Commercial Off The Shelf (COTS) Software is supported throughout its fielded lifecycle. This SECNAVINST also applies to OSS.\n\nThe Open Technology Development Roadmap was released by the office of the Deputy Under Secretary of Defense for Advanced Systems and Concepts, on 7 Jun 2006. It is available at http://www.dtic.mil/dtic/tr/fulltext/u2/a450769.pdf .\n\nThe Office of Management and Budget issued a memorandum providing guidance on software acquisition which specifically addressed open source software on 1 Jul 2004. It may be found at http://www.whitehouse.gov/omb/memoranda/fy04/m04-16.html.\n\nUS Army Regulation 25-2, paragraph 4-6.h, provides guidance on software security controls that specifically addresses open source software. This regulation only applies to the US Army, but may be a useful reference for others. The regulation is available at http://www.army.mil/usapa/epubs/pdf/r25_2.pdf .\n\nIn nearly all cases, OSS is commercial software, so the policies regarding commercial software continue to apply to OSS.\n\nQ: Isn’t using open source software (OSS) forbidden by DoD Information Assurance (IA) Policy?\n\nNo. At a high-level, DoD policy requires commercial software (including OSS) to come with either a warranty or source code, so that the software can be maintained when necessary by the supplier or the government. Since OSS provides source code, there is no problem.\n\nSpecifically, the federal government’s IA controls, as documented in NIST SP 800-53 revision 5 includes a control enhancement, CM-7(8). Control enhancement CM-7(8) states that an organization must prohibit “the use of binary or machine-executable code from sources with limited or no warranty or without the provision of source code”. This control enhancement is based in the need for some way to update software to fix problems after they are discovered. For commercial software, such needed fixes could be provided by a software vendor as part of a warranty, or in the case of OSS, by the government (or its contractors).\n\nGeneral information about OSS\n\nQ: Is OSS commercial software? Is it COTS?\n\nAs explained in detail below, nearly all OSS is “commercial computer software” as defined in US law and the Defense Federal Acquisition Regulation Supplement, and if it used unchanged (or with only minor changes), it is almost always COTS.\n\nOpen source software that has at least one non-governmental use, and is licensed to the public, is commercial software. If it is already available to the public and is used unchanged, it is usually COTS.\n\nU.S. law governing federal procurement U.S. Code Title 41, Section 103 defines “commercial product” as including “a product, other than real property, that— (A) is of a type customarily used by the general public or by nongovernmental entities for purposes other than governmental purposes; and (B) has been sold, leased, or licensed, or offered for sale, lease, or license, to the general public…”. Thus, as long as the software has at least one non-governmental use, software licensed (or offered for license) to the public is a commercial product for procurement purposes.\n\nSimilarly, U.S. Code Title 41, Section 104 defines the term “Commercially available off-the-shelf (COTS) item”; software is COTS if it is (a) a “commercial product”, (b) sold in substantial quantities in the commercial marketplace, and (c) is offered to the Federal Government, without modification, in the same form in which it is sold in the commercial marketplace. Thus, OSS available to the public and used unchanged is normally COTS.\n\nThese definitions in U.S. law govern U.S. acquisition regulations, namely the Federal Acquisition Regulation (FAR) and the Defense Federal Acquisition Regulation Supplement (DFARS). 40 CFR, Section 252.227-7014 Rights in Noncommercial Computer Software and Noncommercial Computer Software Documentation defines “Commercial computer software” as “software developed or regularly used for non-governmental purposes which: (i) Has been sold, leased, or licensed to the public; (ii) Has been offered for sale, lease, or license to the public; (iii) Has not been offered, sold, leased, or licensed to the public but will be available for commercial sale, lease, or license in time to satisfy the delivery requirements of this contract; or (iv) Satisfies a criterion expressed in paragraph (a)(1)(i), (ii), or (iii) of this clause and would require only minor modification to meet the requirements of this contract.”\n\nThere are many other reasons to believe nearly all OSS is commercial software:\n\nOSS is increasingly commercially developed and supported.\n\nOSS projects typically seek financial gain in the form of improvements. U.S. Code Title 17, section 101 (part of copyright law) explicitly defines the term “financial gain” as including “receipt, or expectation of receipt, of anything of value, including the receipt of other copyrighted works.”\n\nOSS licenses and projects clearly approve of commercial support\n\nThis is confirmed by “Clarifying Guidance Regarding Open Source Software (OSS)” (2009) and the Department of the Navy “Open Source Software Guidance” (signed June 5, 2007). For more discussion on this topic, see the article Open Source Software Is Commercial.\n\nObviously, software that does not meet the U.S. government’s definition of “commercial computer software” is not considered commercial software by the U.S. government’s acquisition processes. For example, software that is released to the public as OSS is not considered commercial if it is a type of software that is only used for governmental purposes. In contracts where this issue is important, you should examine the contract to find the specific definitions that are being used. But in practice, publicly-released OSS nearly always meets the various government definitions for “commercial computer software” – and thus is nearly always considered commercial software.\n\nQ: Why is it important to understand that open source software is commercial software?\n\nIt is important to understand that open source software is commercial software, because there are many laws, regulations, policies, and so on regarding commercial software. Failing to understand that open source software is commercial software would result in failing to follow the laws, regulations, policies, and so on regarding commercial software.\n\nIn particular, U.S. law (10 USC 2377) requires a preference for commercial products for procurement of supplies or services. 10 USC 2377 requires that the head of an agency shall ensure that procurement officials in that agency, to the maximum extent practicable:\n\n\"acquire commercial services, commercial products, or nondevelopmental items other than commercial products to meet the needs of the agency;\n\nrequire prime contractors and subcontractors at all levels under the agency contracts to incorporate commercial services, commercial products, or nondevelopmental items other than commercial products as components of items supplied to the agency;\n\nmodify requirements in appropriate cases to ensure that the requirements can be met by commercial services or commercial products or, to the extent that commercial products suitable to meet the agency’s needs are not available, nondevelopmental items other than commercial products in response to agency solicitations;\n\nstate specifications in terms that enable and encourage bidders and offerors to supply commercial services or commercial products or, to the extent that commercial products suitable to meet the agency’s needs are not available, nondevelopmental items other than commercial products in response to the agency solicitations;\n\nrevise the agency’s procurement policies, practices, and procedures not required by law to reduce any impediments in those policies, practices, and procedures to the acquisition of commercial products and commercial services; and\n\nrequire training of appropriate personnel in the acquisition of commercial products and commercial services.\"\n\nSimilarly, it requires preliminary market research to determine “whether there are commercial services or commercial products or, to the extent that commercial products suitable to meet the agency’s needs are not available, nondevelopmental items other than commercial items available” that “(A) meet the agency’s requirements; (B) could be modified to meet the agency’s requirements; or (C) could meet the agency’s requirements if those requirements were modified to a reasonable extent.” This market research should occur “before developing new specifications for a procurement by that agency; and before soliciting bids or proposals for a contract in excess of the simplified acquisition threshold.”\n\nAn agency that failed to consider open source software, and instead only considered proprietary software, would fail to comply with these laws, because it would unjustifiably exclude a significant part of the commercial market. This is particularly the case where future modifications by the U.S. government may be necessary, since OSS by definition permits modification.\n\nQ: Are “non-commercial software”, “freeware”, or “shareware” the same thing as open source software?\n\nNo.\n\nDo not mistakenly use the term “non-commercial software” as a synonym for “open source software”. As noted above, in nearly all cases, open source software is considered “commercial software” by U.S. law, the FAR, and the DFARS. DFARS 252.227-7014 specifically defines “commercial computer software” in a way that includes nearly all OSS, and defines “noncommercial computer software” as software that does not qualify as “commercial computer software”. In addition, important open source software is typically supported by one or more commercial firms.\n\nAs of 2021, the terms “freeware” and “shareware”, do not appear to have official definitions used by the United States Government, but historically (for example in the now-superseded DoD Instruction 8500.2) these terms have been used specifically for software distributed without cost where the Government does not have access to the original source code.\n\nQ: How is OSS typically developed?\n\nOSS is typically developed through a collaborative process.\n\nMost OSS projects have a “trusted repository”, that is, some (web) location where people can get the “official” version of the program, as well as related information (documentation, bug report system, mailing lists, etc.). Users can get their software directly from the trusted repository, or get it through distributors who acquire it (and provide additional value such as integration with other components, testing, special configuration, support, and so on).\n\nOnly some developers are allowed to modify the trusted repository directly: the trusted developers. At project start, the project creators (who create the initial trusted repository) are the trusted developers, and they determine who else may become a trusted developer of this initial trusted repository. All other developers can make changes to their local copies, and even post their versions to the Internet (a process made especially easy by distributed software configuration management tools), but they must submit their changes to a trusted developer to get their changes into the trusted repository.\n\nUsers can send bug reports to the distributor or trusted repository, just as they could for a proprietary program. But what is radically different is that a user can actually make a change to the program itself (either directly, or by hiring someone to do it). Since users will want to use the improvements made by others, they have a strong financial incentive to submit their improvements to the trusted repository. That way, their improvements will be merged with the improvements of others, enabling them to use all improvements instead of only their own.\n\nThis can create an avalanche-like “virtuous cycle”. As the program becomes more capable, more users are attracted to using it. A very small percentage of such users determine that they can make a change valuable to them, and contribute it back (to avoid maintenance costs). As more improvements are made, more people can use the product, creating more potential users as developers - like a snowball that gains mass as it rolls downhill.\n\nThis enables cost-sharing between users, as with proprietary development models. However, this cost-sharing is done in a rather different way than in proprietary development. In particular, note that the costs borne by a particular organization are typically only those for whatever improvements or services are used (e.g., installation, configuration, help desk, etc.). In contrast, typical proprietary software costs are per-seat, not per-improvement or service. However, it must be noted that the OSS model is much more reflective of the actual costs borne by development organizations. It costs essentially nothing to download a file. Once software exists, all costs are due to maintenance and support of software. In short, OSS more accurately reflects the economics of software development; some speculate that this is one reason why OSS has become so common.\n\nQ: Isn’t OSS developed primarily by inexperienced students?\n\nNo, OSS is developed by a wide variety of software developers, and the average developer is quite experienced. A Boston Consulting Group study found that the average age of OSS developers was 30 years old, the majority had training in information technology and/or computer science, and on average had 11.8 years of computer programming experience.\n\nQ: Is open source software the same as “open systems/open standards”?\n\nNo, although they work well together, and both are strategies for reducing “vendor lock-in”. Vendor lock-in, aka lock-in, is the situation in which customers are dependent on a single supplier for some product (i.e., a good or service), or products, and cannot move to another vendor without substantial costs and/or inconvenience. Lock-in tends to raise costs substantially, reduces long-term value (including functionality, innovation, and reliability), and can become a serious security problem (since the supplier has little incentive to provide a secure product and to quickly fix problems found later). An “Open System” is a “system that employs modular design, uses widely supported and consensus based standards for its key interfaces, and has been subjected to successful V&V tests to ensure the openness of its key interfaces” (per the DoD Open Systems Joint Task Force). Thus, open systems require standards that are widely-supported and consensus-based; standards that meet these (and possibly some additional conditions) may be termed “open standards”. Open systems and open standards counter dependency on a single supplier, though only if there is a competing marketplace of replaceable components. Indeed, according to Walli, “Standards exist to encourage & enable multiple implementations”. Many governments, not just the U.S., view open systems as critically necessary. DoD Directive 5000.1 states that open systems “shall be employed, where feasible”, and the European Commission identifies open standards as a major policy thrust.\n\nThere are many definitions for the term “open standard”. Fundamentally, a standard is a specification, so an “open standard” is a specification that is “open”. Public definitions include those of the European Interoperability Framework (EIF), the Digistan definition of open standard (based on the EIF), and Bruce Perens’ “Open Standards: Principles and Practice”.\n\nIn the DoD, the GIG Technical Guidance Federation is a useful resource for identifying recommended standards (which tend to be open standards). The GTG-F is a collection of web-based applications supporting the continuing evolution of the Department of Defense (DoD) Information Technology Standards. The DDR&E, Advanced Capabilities Modular Open Systems Approach web page also provides some useful background.\n\nMany DoD capabilities are accessible via web browsers using open standards such as TCP/IP, HTTP, and HTML; in such cases, it is relatively easy to use or switch to open source software implementations (since the platforms used to implement the client or server become less relevant). As noted by the OSJTF definition for open systems, be sure to test such systems with more than one web browser (e.g., Google Chrome, Microsoft Edge and Firefox), to reduce the risk of vendor lock-in.\n\nQ: How does open source software work with open systems/open standards?\n\nOpen standards can aid open source software projects:\n\nOpen standards make it easier for users to (later) adopt an open source software program, because users of open standards aren’t locked into a particular implementation. Instead, users who are careful to use open standards can easily switch to a different implementation, including an OSS implementation.\n\nOpen standards also make it easier for OSS developers to create their projects, because the standard itself helps developers know what to do. Creating any interface is an effort, and having a pre-defined standard helps reduce that effort greatly.\n\nNote that open standards aid proprietary software in exactly the same way.\n\nOSS aids open standards, too:\n\nOSS implementations can help create and keep open standards open. An OSS implementation can be read and modified by anyone; such implementations can quickly become a working reference model (a “sample implementation” or an “executable specification”) that demonstrates what the specification means (clarifying the specification) and demonstrating how to actually implement it. Perhaps more importantly, by forcing there to be an implementation that others can examine in detail, resulting in better specifications that are more likely to be used.\n\nOSS implementations can help rapidly increase adoption/use of the open standard. OSS programs can typically be simply downloaded and tried out, making it much easier for people to try it out and encouraging widespread use. This also pressures proprietary implementations to limit their prices, and such lower prices for proprietary software also encourages use of the standard.\n\nWith practically no exceptions, successful open standards for software have OSS implementations.\n\nSo, while open systems/open standards are different from open source software, they are complementary and can work well together.\n\nQ: How does open source software relate to the Buy American Act?\n\nAs noted by the 16 October 2009 policy memorandum from the DoD CIO, in almost all cases OSS is a commercial item as defined by US Law (Title 41) and regulation (the FAR).\n\nThe Buy American Act does not apply to information technology that is a commercial item, so there is usually no problem for OSS. As stated in FAR 25.103 Exceptions item (e), “The restriction on purchasing foreign end products does not apply to the acquisition of information technology that is a commercial item, when using fiscal year 2004 or subsequent fiscal year funds (Section 535(a) of Division F, Title V, Consolidated Appropriations Act, 2004, and similar sections in subsequent appropriations acts).”\n\nOSS Licenses\n\nQ: What is the legal basis of OSS licenses?\n\nSoftware licenses, including those for open source software, are typically based on copyright law. Under U.S. copyright law, users must have permission (i.e. a license) from the copyright holder(s) before they can obtain a copy of software to run on their system(s). Authors of a creative work, or their employer, normally receive the copyright once the work is in a fixed form (e.g., written/typed). Others can obtain permission to use a copyrighted work by obtaining a license from the copyright holder. Typically, obtaining rights granted by the license can only be obtained when the requestor agrees to certain conditions. For example, users of proprietary software must typically pay for a license to use a copy or copies. Open source software licenses grant more rights than proprietary software licenses, but they are still conditional licenses that require the user to obey certain terms.\n\nSoftware licenses (including OSS licenses) may also involve the laws for patent, trademark, and trade secrets, in addition to copyright.\n\nExport control laws are often not specifically noted in OSS licenses, but nevertheless these laws also govern when and how software may be released.\n\nQ: Are OSS licenses legally enforceable?\n\nYes, in general. For advice about a specific situation, however, consult with legal counsel.\n\nThe U.S. Court of Appeals for the Federal Circuit’s 2008 ruling on Jacobsen v. Katzer made it clear that OSS licenses are enforceable, even if money is not exchanged. It noted that a copyright holder may dedicate a “certain work to free public use and yet enforce an ‘open source’ copyright license to control the future distribution and modification of that work… Open source licensing has become a widely used method of creative collaboration that serves to advance the arts and sciences in a manner and at a pace that few could have imagined just a few decades ago… Traditionally, copyright owners sold their copyrighted material in exchange for money. The lack of money changing hands in open source licensing should not be presumed to mean that there is no economic consideration, however. There are substantial benefits, including economic benefits, to the creation and distribution of copyrighted works under public licenses that range far beyond traditional license royalties… The choice to exact consideration in the form of compliance with the open source requirements of disclosure and explanation of changes, rather than as a dollar-denominated fee, is entitled to no less legal recognition. Indeed, because a calculation of damages is inherently speculative, these types of license restrictions might well be rendered meaningless absent the ability to enforce through injunctive relief.” In short, it determined that the OSS license at issue in the case (the Artistic license) was indeed an enforceable license.\n\nIn 2017, the United States District Court for the Northern District of California, in Artifex Software, Inc. v. Hancom, Inc., issued a ruling confirming the enforceability of the GNU General Public License. The ruling was a denial of a motion for summary judgement, and the parties ultimately settled the claim out-of-court.\n\nIn 2015, a series of decisions regarding the GNU General Public License were issued by the United States District Courts for the Western District of Texas as well as the Northern District of California. These decisions largely held that the GNU General Public License, version 2 was enforceable in a series of five related legal cases loosely referred to as “Versata v. Ameriprise”, although there were related suits against Versata by XimpleWare. These cases were eventually settled by the parties, but not before certain claims regarding the GPLv2 were decided. The cases are too complicated to summarize here, other than to say that the GPLv2 was clearly regarded as enforceable by the courts.\n\n“Enforcing the GNU GPL” by Eben Moglen is a brief essay that argues why the GNU General Public License (GPL), specifically, is enforceable. U.S. courts have determined that the GPL does not violate anti-trust laws. In Wallace vs. FSF, Judge Daniel Tinder stated that “the GPL encourages, rather than discourages, free competition and the distribution of computer operating systems…” and found no anti-trust issues with the GPL. Similarly, in Wallace v. IBM, Red Hat, and Novell, the U.S. Court of Appeals for the Seventh Circuit found in November 2006 that the GNU General Public License (GPL) “and open-source software have nothing to fear from the antitrust laws”. German courts have enforced the GPL.\n\nQ: What are the major types of open source software licenses?\n\nOSS licenses can be grouped into three main categories: Permissive, strongly protective, and weakly protective. Here is an explanation of these categories, along with common licenses used in each category (see The Free-Libre / Open Source Software (FLOSS) License Slide):\n\nPermissive: These licenses permit the software to become proprietary (i.e., not OSS). This includes the MIT license and the revised BSD license. The Apache 2.0 license is also a popular license in this category; note that the Apache 2.0 license is compatible with GPL version 3, but not with GPL version 2.\n\nStrongly Protective (aka strong copyleft): These licenses prevent the software from becoming proprietary, and instead enforce a “share and share alike” approach. In such licenses, if you give someone a binary of the program, you are obligated to give them the source code (perhaps upon request) under the same terms. This includes the most popular OSS license, the GNU General Public License (GPL). There are two versions of the GPL in common use today: the older version 2, and the newer version 3.\n\nWeakly Protective (aka weak copyleft): These licenses are a compromise between permissive and strongly protective licenses. These prevent the software component (often a software library) from becoming proprietary, yet permit it to be part of a larger proprietary program. The GNU Lesser General Public License (LGPL) is the most popular such license, and there are two versions in common use: the older version 2.1 and newer version 3. An alternative approach is to use the GPL plus a GPL linking exception term (such as the “Classpath exception”).\n\nQ: How can you determine if different open source software licenses are compatible?\n\nIn general, legal analysis is required to determine if multiple programs, covered by different OSS licenses, can be legally combined into a single larger work. This legal analysis must determine if it is possible to meet the conditions of all relevant licenses simultaneously. If it is possible to meet the conditions of all relevant licenses simultaneously, then those licenses are compatible.\n\nThankfully, such analyses has already been performed on the common OSS licenses, which tend to be mutually compatible. Many analyses focus on versions of the GNU General Public License (GPL), since this is the most common OSS license, but analyses for other licenses are also available. Resources for further information include:\n\nGPL FAQ (Focuses on compatibility between versions of the GPL and LGPL)\n\nThe Free-Libre / Open Source Software (FLOSS) License Slide\n\nVarious Licenses and Comments about Them\n\nMaintaining Permissive-Licensed Files in a GPL-Licensed Project: Guidelines for Developers (Software Freedom Law Center)\n\nFedora Licensing\n\nIn brief, the MIT and 2-clause BSD license are dominated by the 3-clause BSD license, which are all dominated by the LGPL licenses, which are all dominated by the GPL licenses. By “dominate”, that means that when software is merged which have those pairs of licenses, the dominating license essentially governs the resulting combination because the dominating license essentially includes all the key terms of the other license. This also means that these particular licenses are compatible. The Apache 2.0 license is compatible with the GPL version 3 license, but not the GPL version 2 license. The GPL version 2 and the GPL version 3 are in principle incompatible with each other, but in practice, most released OSS states that it is “GPL version 2 or later” or “GPL version 3 or later”; in these cases, version 3 is a common license and thus such software is compatible.\n\nNote that this sometimes depends on how the program is used or modified. For example, the LGPL permits the covered software (usually a library) to be embedded in a larger work under many different licenses (including proprietary licenses), subject to certain conditions. However, if the covered software/library is itself modified, then additional conditions are imposed.\n\nThis need for legal analysis is one reason why creating new OSS licenses is strongly discouraged: It can be extremely difficult, costly, and time-consuming to analyze the interplay of many different licenses. It is usually far better to stick to licenses that have already gone through legal review and are widely used in the commercial world.\n\nQ: Can OSS licenses and approaches be used for material other than software?\n\nYes. The Creative Commons is a non-profit organization that provides free tools, including a set of licenses, to “let authors, scientists, artists, and educators easily mark their creative work with the freedoms they want it to carry”. A copyright holder who releases creative works under one of the Creative Common licenses that permit commercial use and modifications would be using an OSS-like approach for such works. Wikipedia maintains an encyclopedia using approaches similar to open source software approaches. Note that Creative Commons does not recommend that you use one of their licenses for software; they encourage using one of the existing OSS licenses which “were designed specifically for use with software”.\n\nComputer and electronic hardware that is designed in the same fashion as open source software (OSS) is sometimes termed open source hardware. The term has primarily been used to reflect the free release of information about the hardware design, such as schematics, bill of materials and PCB layout data, or its representation in a hardware description language (HDL), often with the use of open source software to drive the hardware.\n\nSoftware/hardware for which the implementation, proofs of its properties, and all required tools are released under an OSS license are termed open proofs(see the open proofs website for more information).\n\nWhere it is unclear, make it clear what the “source” or “source code” means.\n\n(See GPL FAQ, “Can I use the GPL for something other than software?”.)\n\nQ: Is it more difficult to comply with OSS licenses than proprietary licenses?\n\nNo, complying with OSS licenses is much easier than proprietary licenses if you only use the software in the same way that proprietary software is normally used. By definition, OSS software permits arbitrary use of the software, and allows users to re-distribute the software to others. The terms that apply to usage and redistribution tend to be trivially easy to meet (e.g., you must not remove the license or author credits when re-distributing the software). Thus, complex license management processes to track every installation or use of the software, or who is permitted to use the software, is completely unnecessary. Support for OSS is often sold separately for OSS; in such cases, you must comply with the support terms for those uses to receive support, but these are typically the same kinds of terms that apply to proprietary software (and they tend to be simpler in practice).\n\nIt is only when the OSS is modified that additional OSS terms come into play, depending on the OSS license. Since it is typically not legal to modify proprietary software at all, or it is legal only in very limited ways, it is trivial to determine when these additional terms may apply. The real challenge is one of education - some developers incorrectly believe that just because something is free to download, it can be merged or changed without restriction. This has never been true, and explaining this takes little time.\n\nQ: Who can enforce OSS licenses?\n\nTypically enforcement actions are based on copyright violations, and only copyright holders can raise a copyright claim in U.S. court. In the commercial world, the copyright holders are typically the individuals and organizations that originally developed the software. Under the current DoD contracting regime, the contractor usually retains the copyright for software developed with government funding, so in such cases the contractor (not the government) has the right to sue for copyright violation. In some cases, the government obtains the copyright; in those cases, the government can sue for copyright violation.\n\nHowever, the government can release software as OSS when it has unlimited rights to that software. The government is not the copyright holder in such cases, but the government can still enforce its rights. Although the government cannot directly sue for copyright violation, in such cases it can still sue for breach of license and, presumably, get injunctive relief to stop the breach and money damages to recover royalties obtained by breaching the license (and perhaps other damages as well).\n\nIn addition, a third party who breaches a software license (including for OSS) granted by the government risks losing rights they would normally have due to the “doctrine of unclean hands”. The doctrine of unclean hands, per law.com, is “a legal doctrine which is a defense to a complaint, which states that a party who is asking for a judgment cannot have the help of the court if he/she has done anything unethical in relation to the subject of the lawsuit. Thus, if a defendant can show the plaintiff had ‘unclean hands,’ the plaintiff’s complaint will be dismissed or the plaintiff will be denied judgment.” So if the government releases software as OSS, and a malicious developer performs actions in violation of that license, then the government’s courts might choose to not enforce any of that malicious developer’s intellectual rights to that result. In effect, the malicious developer could lose many or all rights over their license-violating result, even rights they would normally have had! Since OSS licenses are quite generous, the only license-violating actions a developer is likely to try is to release software under a more stringent license… and those will have little effect if they cannot be enforced in court.\n\nSee GPL FAQ, “Who has the power to enforce the GPL?”.\n\nQ: Do “choice of venue” clauses automatically disqualify OSS licences?\n\nNo. A “choice of venue” clause is a clause that states where a dispute is to be resolved (e.g., which court). Many OSS licenses do not have a choice of venue clause, and thus cannot have an issue, although some do.\n\nIf your contract has FAR clause 52.212-4 (which it is normally required to do), then choice of venue clauses in software licenses are undesirable, but the order of precedence clause (in the contract) means that the choice of venue clause (in the license) is superseded by the Contract Disputes Act. Thus, in many cases a “choice of venue” clause is not an insurmountable barrier to acceptance of the software delivery by the government.\n\nFor software delivered under federal contracts, any “choice of venue” clauses in the license generally conflict with the Contract Disputes Act. However, the required FAR Clause 52.212-4(d) establishes that “This contract is subject to the Contract Disputes Act of 1978, as amended (41 U.S.C. 7101-7109).” Furthermore, 52.212-4(s) says: “(s) Order of precedence. Any inconsistencies in this solicitation or contract shall be resolved by giving precedence in the following order: (1) the schedule of supplies/services; (2) the Assignments, Disputes, Payments, Invoice, Other Compliances, and Compliance with Laws Unique to Government Contracts paragraphs of this clause; (3) the clause at 52.212-5; (4) addenda to this solicitation or contract, including any license agreements for computer software; …”\n\nThis clause establishes that the choice of venue clause (category 4) is superseded by the Contract Disputes Act (category 2), and thus the conflict is typically moot. Government lawyers and Contracting Officers are trained to try to negotiate licenses which resolve these ambiguities without having to rely on the less-satisfying “Order of Precedence”, but generally accede when licenses in question are non-negotiable, such as with OSS licenses in many cases. As always, if there are questions, consult your attorney to discuss your specific situation.\n\nOSS and Security/Software Assurance/System Assurance/Supply Chain Risk Management\n\nQ: Does the DoD use OSS for security functions?\n\nYes. The 2003 MITRE study, “Use of Free and Open Source Software (FOSS) in the U.S. Department of Defense”, for analysis purposes, posed the hypothetical question of what would happen if OSS software were banned in the DoD, and found that OSS “plays a far more critical role in the DoD than has been generally recognized… (especially in) Infrastructure Support, Software Development, Security, and Research”. In particular, it found that DoD security “depends on (OSS) applications and strategies”, and that a hypothetic ban “would have immediate, broad, and in some cases strongly negative impacts on the ability of the DoD to analyze and protect its own networks against hostile intrusion. This is in part because such a ban would prevent DoD groups from using the same analysis and network intrusion applications that hostile groups could use to stage cyberattacks. It would also remove the uniquely (OSS) ability to change infrastructure source code rapidly in response to new modes of cyberattack”.\n\nQ: Doesn’t hiding source code automatically make software more secure?\n\nNo. Indeed, vulnerability databases such as CVE make it clear that merely hiding source code does not counter attacks:\n\nDynamic attacks (e.g., generating input patterns to probe for vulnerabilities and then sending that data to the program to execute) don’t need source or binary. Observing the output from inputs is often sufficient for attack.\n\nStatic attacks (e.g., analyzing the code instead of its execution) can use pattern-matches against binaries - source code is not needed for them either.\n\nEven if source code is necessary (e.g., for source code analyzers), adequate source code can often be regenerated by disassemblers and decompilers sufficiently to search for vulnerabilities. Such source code may not be adequate to cost-effectively maintain the software, but attackers need not maintain software.\n\nEven when the original source is necessary for in-depth analysis, making source code available to the public significantly aids defenders and not just attackers. Continuous and broad peer-review, enabled by publicly available source code, improves software reliability and security through the identification and elimination of defects that might otherwise go unrecognized by the core development team. Conversely, where source code is hidden from the public, attackers can attack the software anyway as described above. In addition, an attacker can often acquire the original source code from suppliers anyway (either because the supplier voluntarily provides it, or via attacks against the supplier); in such cases, if only the attacker has the source code, the attacker ends up with another advantage.\n\nHiding source code does inhibit the ability of third parties to respond to vulnerabilities (because changing software is more difficult without the source code), but this is obviously not a security advantage. In general, “Security by Obscurity” is widely denigrated.\n\nThis does not mean that the DoD will reject using proprietary COTS products. There are valid business reasons, unrelated to security, that may lead a commercial company selling proprietary software to choose to hide source code (e.g., to reduce the risk of copyright infringement or the revelation of trade secrets). What it does mean, however, is that the DoD will not reject consideration of a COTS product merely because it is OSS. Some OSS is very secure, while others are not; some proprietary software is very secure, while others are not. Each product must be examined on its own merits.\n\nQ: What are indicators that a specific OSS program will have fewer unintentional vulnerabilities?\n\nAs noted in the Secure Programming for Linux and Unix HOWTO, three conditions reduce the risks from unintentional vulnerabilities in OSS:\n\nDevelopers/reviewers need security knowledge. Knowledge is more important than the licensing scheme.\n\nPeople have to actually review the code.\n\nThis has a reduced likelihood if the program is niche or rarely-used, has few developers, uses a rare computer language, or is not really OSS. Conversely, if it widely-used, has many developers, and so on, the likelihood of review increases. Examine if it is truly community-developed - or if there are only a very few developers.\n\nReview really does happen. Several static tool vendors support analysis of OSS (such as Coverity and Sonatype) as a way to improve their tools and gain market use. There are many general OSS review projects, such as those by OpenBSD and the Debian Security Audit team. And of course, individual OSS projects often have security review processes or methods (such as Mozilla’s bounty system). If there are reviewers from many different backgrounds (e.g., different countries), this can also reduce certain risks. When examining a specific OSS project, look for evidence that review (both by humans and tools) does take place.\n\nProblems must be fixed. It is far better to fix vulnerabilities before deployment - are such efforts occuring? When the software is already deployed, does the project develop and deploy fixes?\n\nQ: Is there a risk of malicious code becoming embedded into OSS?\n\nThe use of any commercially-available software, be it proprietary or OSS, creates the risk of executing malicious code embedded in the software. Even if a commercial program did not originally have vulnerabilities, both proprietary and OSS program binaries can be modified (e.g., with a “hex editor” or virus) so that it includes malicious code. It may be illegal to modify proprietary software, but that will normally not slow an attacker. Thankfully, there are ways to reduce the risk of executing malicious code when using commercial software (both proprietary and OSS). It is impossible to completely eliminate all risks; instead, focus on reducing risks to acceptable levels. The use of software with a proprietary license provides absolutely no guarantee that the software is free of malicious code. Indeed, many people have released proprietary code that is malicious. What’s more, proprietary software release practices make it more difficult to be confident that the software does not include malicious code. Such software does not normally undergo widespread public review, indeed, the source code is typically not provided to the public and there are often license clauses that attempt to inhibit review further (e.g., forbidding reverse engineering and/or forbidding the public disclosure of analysis results). Thus, to reduce the risk of executing malicious code, potential users should consider the reputation of the supplier and the experience of other users, prefer software with a large number of users, and ensure that they get the “real” software and not an imitator. Where it is important, examining the security posture of the supplier (e.g., their processes that reduce risk) and scanning/testing/evaluating the software may also be wise.\n\nSimilarly, OSS (as well as proprietary software) may indeed have malicious code embedded in it. However, such malicious code cannot be directly inserted by “just anyone” into a well-established OSS project. As noted above, OSS projects have a “trusted repository” that only certain developers (the “trusted developers”) can directly modify. In addition, since the source code is publicly released, anyone can review it, including for the possibility of malicious code. The public release also makes it easy to have copies of versions in many places, and to compare those versions, making it easy for many people to review changes. Many perceive this openness as an advantage for OSS, since OSS better meets Saltzer & Schroeder’s “Open design principle” (“the protection mechanism must not depend on attacker ignorance”). This is not merely theoretical; in 2003 the Linux kernel development process resisted an attack. Similarly, SourceForge/Apache (in 2001) and Debian (in 2003) countered external attacks.\n\nAs with proprietary software, to reduce the risk of executing malicious code, potential users should consider the reputation of the supplier (the OSS project) and the experience of other users, prefer software with a large number of users, and ensure that they get the “real” software and not an imitator (e.g., from the main project site or a trusted distributor). Where it is important, examining the security posture of the supplier (the OSS project) and scanning/testing/evaluating the software may also be wise.\n\nThe example of Borland’s InterBase/Firebird is instructive. For at least 7 years, Borland’s Interbase (a proprietary database program) had embedded in it a “back door”; the username “politically”, password “correct”, would immediately give the requestor complete control over the database, a fact unknown to its users. Whether or not this was intentional, it certainly had the same form as a malicious back door. When the program was released as OSS, within 5 months this vulnerability was found and fixed. This shows that proprietary software can include functionality that could be described as malicious, yet remain unfixed - and that at least in some cases OSS is reviewed and fixed.\n\nNote that merely being released by a US firm is no guarantee that there is no malicious embedded code. First of all, being a US firm has little relationship to the citizenship of its developers and its supplier’s developers. Also, US citizens can attempt to embed malicious code into software, and many non-US citizens develop software without embedding malicious code. In practice, commercial software (OSS or not) tends to be developed globally, especially when you consider their developers and supply chains. The good news is that, by definition, OSS provides its source code, enabling a more informed evaluation than is typically available for other kinds of COTS products.\n\nNote also that merely being developed for the government is no guarantee that there is no malicious embedded code. Such developers need not be cleared, for example. Requiring that all developers be cleared first can reduce certain risks (at substantial costs), where necessary, but even then there is no guarantee.\n\nNote that most commercial software is not intended to be used where the impact of any error of any kind is extremely high (e.g., a large number of lives are likely to be immediately lost if even the slightest software error occurs). Software that meets very high reliability/security requirements, aka “high assurance” software, must be specially designed to meet such requirements. Most commercial software (including OSS) is not designed for such purposes.\n\nQ: What is the country of origin for software?\n\nThe Customs and Border Protection (CBP) has said, in an advisory ruling, that the country of origin of software is the place where the software is converted into object code (“Software comes from the place where it’s converted into object code, says CBP”, FierceGovernmentIT), for “purposes of granting waivers of certain ‘Buy American’ restrictions in U.S. law or practice or products offered for sale to the U.S. Government.”\n\nThe CBP ruling points out that 19 U.S.C. § 2518(4)(B) says that, “An article is a product of a country or instrumentality only if (i) it is wholly the growth, product, or manufacture of that country or instrumentality, or (ii) in the case of an article which consists in whole or in part of materials from another country or instrumentality, it has been substantially transformed into a new and different article of commerce with a name, character, or use distinct from that of the article or articles from which it was so transformed.” The CBP also pointed out a ruling (Data General v. United States, 4 CIT 182 (1982)), that programming a PROM performed a substantial transformation. Under the same reasoning, the CBP determined that building an object file from source code performed a substantial transformation into a new article.\n\nUsing OSS in DoD systems\n\nQ: Does the DoD already use open source software?\n\nYes, extensively. The 2003 MITRE study, “Use of Free and Open Source Software (FOSS) in the U.S. Department of Defense”, identified some of many OSS programs that the DoD is already using, and concluded that OSS “plays a more critical role in the [Department of Defense (DoD)] than has generally been recognized”.\n\nIntellipedia is implemented using MediaWiki, the open source software developed to implement Wikipedia. This Open Source Software FAQ was originally developed on Intellipedia, using a variety of web browsers including Mozilla Firefox. Thus, even this FAQ was developed using open source software.\n\nThe DoD is, of course, not the only user of OSS. Gartner Group’s Mark Driver stated in November 2010 that, “Open source is ubiquitous, it’s unavoidable… having a policy against open source is impractical and places you at a competitive disadvantage.”\n\nQ: Is a lot of pre-existing open source software available?\n\nYes. Widely-used programs include the Apache web server, Firefox web browser, Linux kernel, and many other programs. Estimating the Total Development Cost of a Linux Distribution estimates that the Fedora 9 Linux distribution, which contains over 5,000 software packages, represents about $10.8 billion of development effort in 2008 dollars.\n\nQ: Is there an “approved”, “recommended” or “Generally Recognized as Safe/Mature” list of Open Source Software? What programs are already in widespread use?\n\nNo, the DoD does not have an official recommendation for any particular OSS product or set of products, nor a “Generally Recognized as Safe/Mature” list. The 2003 MITRE study, “Use of Free and Open Source Software (FOSS) in the U.S. Department of Defense”, did suggest developing a “Generally Recognized As Safe” (GRAS) list, but such a list has not been developed.\n\nThe United States Air Force operates a service called “Iron Bank”, which is the DoD Enterprise repository of hardened software containers, many of which are based on open source products. On approval, such containers are granted a “Certificate to Field” designation by the Air Force Chief Software Officer.\n\nCommercial software (including OSS) that has widespread use often has lower risk, since there are often good reasons for its widespread use. The MITRE study did identify some of many OSS programs that the DoD is already using, and may prove helpful. Examples of OSS that are in widespread use include:\n\nKubernetes - container orchestration suite\n\nApache HTTP Server - Web server\n\nMozilla Firefox - Web browser\n\nApache OpenOffice - Office document suite\n\nOpenSSH - Secure Shell\n\nOpenSSL - SSL/cryptographic library implementation\n\nbind - DNS server\n\nPostfix, Sendmail - Mail servers\n\ngcc - Compiler suite\n\nGNAT - Ada compiler suite (technically this is part of gcc)\n\nperl, Python, PHP, Ruby - Scripting languages\n\nSamba - Windows - Unix/Linux interoperability\n\nMailman - mailing list manager\n\nMySQL and PostgreSQL - Relational Database Management Systems\n\nGIMP - Bitmap graphics editor\n\nMediaWiki - Wiki engine\n\nThere are many “Linux distributions” which provides suites of such software such as Red Hat Enterprise Linux, Fedora, SUSE, Debian and Ubuntu. Other open source software implementations of Unix interfaces include OpenBSD, NetBSD, FreeBSD, and Darwin\n\nAgain, these are examples, and not official endorsements of any particular product or supplier.\n\nQ: What are some military-specific open source software programs?\n\nSome more military-specific OSS programs created-by or used in the military include:\n\nThe Distributed Data Framework (DDF) - data integration framework developed for the Distributed Common Ground/Surface System (DCGS) Family of Systems\n\nOpen Source Software for Imagery & Mapping (OSSIM) - geospatial image viewing (with classified plugins)\n\nOSSIM Mapping ARchieve System (OMAR) - video indexing\n\nBRL-CAD - solid modeling (Army)\n\nOpticks - Remote sensing platform & MASINT toolset\n\nDelta3D - Game/Simulation engine for modeling and simulation (e.g., for military training/exercises)\n\nOzone Widget Framework / Ozone Platform - framework for composable web applications\n\nREDHAWK SDR - a software-defined radio (SDR) framework\n\nThere are many others.\n\nQ: How can I find open source software that meets my specific needs?\n\nOne approach is to use a general-purpose search engine (such as Google) and type in your key functional requirements. If you know of an existing proprietary product meets your needs, searching for its name plus “open source source” may help.\n\nIf you are looking for an application that has wide use, one of the various lists of “open source alternatives” may help. These include:\n\nOpen Source Alternatives (Ben Balter et al.)\n\nOpen Source as Alternative\n\nIf you are looking for smaller pieces of code to reuse, search engines specifically for code may be helpful. Examples include:\n\nGoogle code search\n\nSearchcode\n\nIf you know of others who have similar needs, ask them for leads.\n\nQ: Is there any quantitative evidence that open source software can be as good as (or better than) proprietary software?\n\nYes; Why Open Source Software / Free Software (OSS/FS, FLOSS, or FOSS)? Look at the Numbers! is a survey paper that “provides quantitative data that, in many cases, using open source software / free software (abbreviated as OSS/FS, FLOSS, or FOSS) is a reasonable or even superior approach to using their proprietary competition according to various measures.. (its) goal is to show that you should consider using OSS/FS when acquiring software”. It points to various studies related to market share, reliability, performance, scalability, security, and total cost of ownership.\n\nThis is in addition to the advantages from OSS because it can be reviewed, modified, and redistributed with few restrictions (inherent in the definition of OSS).\n\nThat said, this does not mean that all OSS is superior to all proprietary software in all cases by all measures. Each government program must determine its needs, and then evaluate its options for meeting those needs.\n\nQ: When a DoD contractor is developing a new system/software as a deliverable in a typical DoD contract, is it possible to include existing open source software?\n\nYes, it’s possible. In nearly all cases, pre-existing OSS are “commercial products”, and thus their use is governed by the rules for including any commercial products in the deliverable. The use of commercial products is generally encouraged, and when there are commercial products, the government expects that it will normally use whatever license is offered to the public. Depending on the contract and its interpretation, contractors may be required to get governmental permission to include commercial components in their deliverables; where this applies, this would be true for OSS components as well as proprietary components. As with all commercial items, organizations must obey the terms of the commercial license, negotiate a different license if necessary, or not use the commercial item.\n\nAn alternative is to not include the OSS component in the deliverable, but simply depend on it, as long as that is acceptable to the government. This is often done when the deliverable is a software application; instead of including commercially-available components such as the operating system or database system as part of the deliverable, the deliverable could simply state what it requires.\n\nQ: When a DoD contractor is developing a new system/software as a deliverable in a typical DoD contract, is it possible to use existing software licensed using the GNU General Public License (GPL)? Can the DoD used GPL-licensed software?\n\nYes. There is no DoD policy forbidding or limiting the use of software licensed under the GNU General Public License (GPL).\n\nThe DoD already uses a wide variety of software licensed under the GPL. A 2003 MITRE study, “Use of Free and Open Source Software (FOSS) in the U.S. Department of Defense”, identified many OSS programs that the DoD is already using that are licensed using the GPL. These included the Linux kernel, the gcc compilation suite (including the GNAT Ada compiler), the OpenOffice.org office suite, the emacs text editor, the Nmap network scanner, OpenSSH and OpenSSH for encryption, and Samba for Unix/Linux/Windows interoperability. This should not be surprising; the DoD uses OSS extensively, and the GPL is the most popular OSS license.\n\nAs with all commercial items, the DoD must comply with the item’s license when using the item. There are two versions of the GPL in widespread use: version 2 and version 3. The key issue with both versions of the GPL is that, unlike most other OSS licenses, the GPL licenses require that a recipient of a binary (executable) must be able to demand and receive the source code of that program, and the recipient must also be able to propogate the work under that license. The Free Software Foundation (FSF) interprets linking a GPL program with another program as creating a derivative work, and thus imposing this license term in such cases.\n\nIn most cases, this GPL license term is not a problem. After all, most proprietary software licenses explicitly forbid modifying (or even reverse-engineering) the program, so the GPL actually provides additional rights not present in most proprietary software. So if the program is being used and not modified (a very common case), this additional term has no impact. Even for many modifications (e.g., bug fixes) this causes no issues because in many cases the DoD has no interest in keeping those changes confidential.\n\nHowever, if the GPL software must be mixed with other proprietary/classified software, the GPL terms must still be followed.\n\nQ: Under what conditions can GPL-licensed software be mixed with proprietary/classified software?\n\nSoftware licensed under the GPL can be mixed with software released under other licenses, and mixed with classified or export-controlled software, but only under conditions that do not violate any license. Such mixing can sometimes only occur when certain kinds of separation are maintained - and thus this can become a design issue.\n\nThe 2003 MITRE study section 1.3.4 outlines several ways to legally mix GPL with proprietary or classified software:\n\nDistribution Mixing – GPL and other software can be stored and transmitted together. Example: GPL software can be stored on the same computer disk as (most kinds of) proprietary software.\n\nExecution Mixing – GPL and other software can run at the same time on the same computer or network. Example: GPL and (unrelated) proprietary applications can be running at the same time on a desktop PC.\n\nApplication Mixing – GPL can rely on other software to provide it with services, provided either that those services are either generic (e.g., operating system services) or have been explicitly exempted by the GPL software designer as non-GPL components. Examples include GPL applications running on proprietary operating systems or wrappers, and GPL applications that use proprietary components explicitly marked as non-GPL. Windows Services for UNIX 3.0 is a good example of commercial use of GPL application mixing.\n\nService Mixing – GPL can provide generic services to other software. These services must be genuinely generic in the sense that the applications that use them must not depend on the detailed design of the GPL software to work. An example is (connecting) a GPL utility to a proprietary software component by using the Unix “pipe” mechanism, which allows one-way flow of data to move between software components. This is the tightest form of mixing possible with GPL and other types of software, but it must be used with care to ensure that the GPL software remains generic and is not tightly bound to any one proprietary software component.\n\nOften such separation can occur by separating information into data and a program that uses it, or by defining distinct layers. As long as a GPL program does not embed GPL software into its outputs, a GPL program can process classified/proprietary information without question. Thus, GPL’ed compilers can compile classified programs (since the compilers treat the classified program as data), and a GPL’ed implementation of a virtual machine (VM) can execute classified software (since the VM implementation runs the software as data). Many development tools covered by the GPL include libraries and runtimes that are not covered by the GPL itself but the GPL with a runtime exception (e.g., the CLASSPATH exception) that specifically permits development of proprietary software. A GPL’ed “engine” program can be controlled by classified data that it reads without issue. A GPL’ed program can run on top of a classified/proprietary platform when the platform is a separate “System Library” (as defined in GPL version 3). Note that enforcing such separation has many other advantages as well.\n\nThe U.S. government can often directly combine GPL and proprietary, classified, or export-controlled software into a single program arbitrarily, as long as the result is never conveyed outside the U.S. government. However, this approach should not be taken lightly. This approach may inhibit later release of the combined result to other parties (e.g., allies), as release to an ally would likely be considered distribution as defined in the GPL. In some cases, export-controlled software may be licensed for export under the condition that the source code not be released; this would prevent release of software that had mixed GPL and export-controlled software. When taking this approach, contractors hired to modify the software must not retain copyright or other rights to the result (else the software would be conveyed outside the U.S. government); see GPL version 3 section 2, paragraph 2 which states this explicitly. Where possible, it may be better to divide such components into smaller components in a way that avoids this issue.\n\nIt can be argued that classified software can be arbitrarily combined with GPL code, beyond the approaches described above. The argument is that the classification rules are simply laws of the land (and not “additional” rules), the classification rules already forbid the release of the resulting binaries to those without proper clearances, and that the GPL only requires that source code be released to those who received a binary. While this argument may be valid, we know of no court decision or legal opinion confirming this. Anyone who is considering this approach should obtain a determination from general counsel first (and please let the FAQ authors know!).\n\nIf a legal method for using the GPL software for a particular application cannot be devised, and a different license cannot be negotiated, then the GPL-licensed component cannot be used for that particular purpose. Note that this also applies to proprietary software, which often have even stricter limits on if/how the software may be changed.\n\nQ: Is the GPL compatible with Government Unlimited Rights contracts, or does the requirement to display the license, etc, violate Government Unlimited Rights contracts?\n\nThe GPL and government “unlimited rights” terms have similar goals, but differ in details. This isn’t usually an issue because of how typical DoD contract clauses work under the DFARS.\n\nThe government normally gets “unlimited rights” in software when that software is created in the performance of a contract with government funds. If such software includes third-party components that were not produced in performace of that contract, the contractor is generally responsible for acquiring those components with acceptable licenses that premit the government to use that software. Thus, the government may receive custom-developed, non-commercial software as a deliverable and receive “unlimited rights” for that new code, but also acquire only commercial rights to the third-party (possibly OSS) components. This is not uncommon.\n\nOnce the government has unlimited rights, it may release that software to the public under any terms it wishes - including by using the GPL. This is not a contradiction; it’s quite common for different organizations to have different rights to the same software. The program available to the public may improve over time, through contributions not paid for by the U.S. government. In that case, the U.S. government might choose to continue to use the version to which it has unlimited rights, or it might use the publicly-available commercial version available to the government through that version’s commercial license (the GPL in this case).\n\nQ: Does the Antideficiency act (ADA) prohibit all use of OSS due to limitations on voluntary services?\n\nNo. Relevant government authorities make it clear that the Antideficiency Act (ADA) does not generally prohibit the use of OSS due to limitations on voluntary services. Instead, the ADA prohibits government employees from accepting services that are not intended or agreed to be gratuitous, but were instead rendered in the hope that Congress will subsequently recognize a moral obligation to pay for the benefits conferred.\n\nPart of the ADA, Pub.L. 97-258, 96 Stat. 923, is in 31 U.S.C. § 1342, Limitation on voluntary services. This statute says that, “An officer or employee of the United States Government or of the District of Columbia government may not accept voluntary services for either government or employ personal services exceeding that authorized by law except for emergencies involving the safety of human life or the protection of property.”\n\nThe US Government Accountability Office (GAO) Office of the General Counsel’s “Principles of Federal Appropriations Law” (aka the “Red Book”) explains federal appropriation law. Volume II of its third edition, section 6.C.3, describes in detail this prohibition on voluntary services. Section 6.C.3.a notes that the voluntary services provision is not new; it first appeared, in almost identical form, back in 1884. The red book explains its purpose; since “an agency cannot directly obligate in excess or advance of its appropriations, it should not be able to accomplish the same thing indirectly by accepting ostensibly ‘voluntary’ services and then presenting Congress with the bill, in the hope that Congress will recognize a ‘moral obligation’ to pay for the benefits conferred…”\n\nThe red book section 6.C.3.b explains this prohibition in more detail. It states that in 1913, the Attorney General developed an opinion (30 Op. Att’y Gen. 51 (1913)) that “has become the leading case construing 31 U.S.C. § 1342… the Attorney General drew a distinction that the Comptroller of the Treasury thereafter adopted, and that GAO and the Justice Department continue to follow to this day—the distinction between ‘voluntary services’ and ‘gratuitous services.’” Some key text from this opinion, as identified by the red book, are:\n\n“[I]t seems plain that the words ‘voluntary service’ were not intended to be synonymous with ‘gratuitous service’ … it is evident that the evil at which Congress was aiming was not appointment or employment for authorized services without compensation, but the acceptance of unauthorized services not intended or agreed to be gratuitous and therefore likely to afford a basis for a future claim upon Congress. . . .”\n\nMore recent decisions, such as the 1982 decision B-204326 by the U.S. Comptroller General, continue to confirm this distinction between “gratuitous” and “voluntary” service.\n\nIn short, the ADA’s limitation on voluntary services does not broadly forbid the government from working with organizations and people who identify themselves as volunteers, including those who develop OSS. Instead, Government employees must ensure that they do not accept services rendered in the hope that Congress will subsequently recognize a moral obligation to pay for the benefits conferred. Services that are intended and agreed to be gratuitous do not conflict with this statute. In most cases, contributors to OSS projects intend for their contributions to be gratuitous, and provide them for all (not just for the Federal government), clearly distinguishing such OSS contributions from the “voluntary services” that the ADA was designed to prevent.\n\nQ: How can I evaluate OSS options?\n\nOSS options should be evaluated in principle the same way you would evaluate any option, considering need, cost, and so on. In some cases, the sources of information for OSS differ.\n\nBe sure to consider total cost of ownership (TCO), not just initial download costs. Even if OSS has no cost to download, there is still a cost for OSS due to installation, support, and so on (whether done in-house or through external organizations). Be sure to consider such costs over a period of time (typically the lifetime of the system including its upgrades), and use the same period when evaluating alternatives; otherwise, one-time costs (such as costs to transition from an existing proprietary system) can lead to erroneous conclusions. Include upgrade/maintenance costs, including indirect costs (such as hardware replacement if necessary to run updated software), in the TCO. By definition, open source software provides more rights to users than proprietary software (at least in terms of use, modification, and distribution). That said, other factors may be more important for a given circumstance.\n\nThe DoD does not have a single required process for evaluating OSS. The following externally-developed evaluation processes or tips may be of use:\n\nHow to Evaluate Open Source Software / Free Software (OSS/FS) Programs\n\nOpenSource Maturity Model (OMM)\n\nCapgemini’s Open Source Maturity Model (OSMM)\n\nTop Tips For Selecting Open Source Software\n\nQSOS\n\nQ: How can I migrate to OSS?\n\nMigrating from an existing system to an OSS approach requires addressing the same issues that any migration involves.\n\nThe IDA Open Source Migration Guidelines recommend:\n\nbefore starting have a clear understanding of the reasons to migrate;\n\nensure that there is active support for the change from IT staff and users;\n\nmake sure that there is a champion for change – the higher up in the organisation the better;\n\nbuild up expertise and relationships with the OSS movement;\n\nstart with non critical systems;\n\nensure that each step in the migration is manageable.\n\nIt also suggests that the following questions need to be addressed:\n\nhow to ensure the interoperability of systems;\n\nhow to support mobile users;\n\nhow to securely identify remote users;\n\nhow to build systems that are manageable.\n\nensure that security is designed in from the start and not tacked on as an after thought.\n\nIt also recommends ensuring “that decisions made now, even if they do not relate directly to a migration, should not further tie an Administration to proprietary file formats and protocols”. It also notes that OSS is a disruptive technology, in particular, that it is “a move away from a product to a service based industry”.\n\nQ: How can I get support for OSS that already exists?\n\nYou can support OSS either through a commercial organization, or you can self-support OSS; in either case, you can use community support as an aid.\n\nCommercial support can either be through companies with specialize in OSS support (in general or for specific products), or through contractors who specialize in supporting customers and provide the OSS support as part of a larger service. Examples of the former include Red Hat, Canonical, HP Enterprise, Oracle, IBM, SourceLabs, OpenLogic, and Carahsoft.\n\nSome have found that community support can be very helpful. The 1997 InfoWorld “Best Technical Support” award was won by the “Linux User Community”. However, you should examine past experience and your intended uses before depending on this as a primary mechanism for support. An Open Source Community can update the codebase, but they cannot patch your servers.\n\nQ: Am I required to have commercial support for OSS?\n\nNo, DoD policy does not require you to have commercial support for OSS, but you must have some plan for support. The 2009 DoD CIO memo on open source software says, in attachment 2, 2(d), “The use of any software without appropriate maintenance and support presents an information assurance risk. Before approving the use of software (including OSS), system/program managers, and ultimately Designated Approving Authorities (DAAs), must ensure that the plan for software support (e.g., commercial or Government program office support) is adequate for mission need.” Note that Government program office support is specifically identified as a possibly-appropriate approach.\n\nAs noted in the article Open Source memo doesn’t mandate a support vendor (by David Perera, FierceGovernmentIT, May 23, 2012), the intent “of the memo was not to issue a blanket requirement that all open source software come bundled with contractor support or else it can’t be used… If a Defense agency is able to sustain the open source software with ‘its own skills and talents’ then that can be enough to satisfy the intent of the memo.” In addition, “How robust the support plan need be can also vary on the nature of the software itself… For command and control software, the degree would have to be greater than for something that’s not so critical to mission execution…”.\n\nCommunity OSS support is never enough by itself to provide this support, because the OSS community cannot patch your servers or workstations for you. However, support from in-house staff, augmented by the OSS community, may be (and often is) sufficient. However, if you’re going to rely on the OSS community, you must make sure that the OSS community for that product is active, and that you have suitably qualified staff to implement the upgrades/enhancements developed by the community.\n\nIf you have concerns about using in-house staff, augmented by the OSS community for those components, then select and pay a commercial organization to provide the necessary support. Many programs and DAAs do choose to use commercial support, and in many cases that is the best approach. However, using a support vendor is not the only approach or the best approach in all cases; system/program managers and DAAs must look at the specific situation to make a determination.\n\nQ: How do GOTS, Proprietary COTS, and OSS COTS compare?\n\nGovernment Off-the-Shelf (GOTS), proprietary commercial off-the-shelf (COTS), and OSS COTS are all methods to enable reuse of software across multiple projects. Thus, they are all strategies for sharing the development and maintenance costs of software, potentially reducing its cost.\n\nGOTS is especially appropriate when the software must not be released to the public (e.g., it is classified) or when licenses forbid more extensive sharing (e.g., the government only has government-purpose rights to the software). GOTS software should not be released when it implements a strategic innovation, i.e. when it implements novel functionality which is not already available to the public, and which significantly improves DoD mission outcomes or business processes. (Note that such software would often be classifed.)\n\nUnlike proprietary COTS, GOTS has the advantage that the government has the right to change the software whenever the government chooses to do so. Unfortunately, the government must pay for all development and maintenance costs of GOTS; since these can be substantial, GOTS runs the risk of becoming obsolete when the government cannot afford those costs. Also, since there are a limited number of users, there is limited opportunity to gain from user innovation - which again can lead to obsolescence. Even where there is GOTS/classified software, such software is typically only a portion of the entire system, with other components implemented through COTS components.\n\nProprietary COTS is especially appropriate when there is an existing proprietary COTS product that meets the need. Proprietary COTS tend to be lower cost than GOTS, since the cost of development and maintenance is typically shared among a larger number of users (who typically pay to receive licenses to use the product). Unfortunately, this typically trades off flexibility; the government does not have the right to modify the software, so it cannot fix serious security problems, add arbitrary improvements, or make the software work on platforms of its choosing. If the supplier attains a monopoly or it is difficult to switch from the supplier, the costs may skyrocket. What is more, the supplier may choose to abandon the product; source-code escrow can reduce these risks somewhat, but in these cases the software becomes GOTS with its attendant costs.\n\nOSS COTS is especially appropriate when there is an existing OSS COTS product that meets the need, or one can be developed and supported by a wide range of users/co-developers. OSS COTS tends to be lower cost than GOTS, in part for the same reasons as proprietary COTS: its costs are shared among more users. It also often has lower total cost-of-ownership than proprietary COTS, since acquiring it initially is often free or low-cost, and all other support activities (training, installation, modification, etc.) can be competed, and the cost of some improvements may be borne by other users of the software. Its flexibility is as high as GOTS, since it can be arbitrarily modified. However, note that the advantages of cost-sharing only applies if there are many users; if no user/co-developer community is built up, then it can be as costly as GOTS.\n\nQ: What are the risks of failing to consider the use of OSS components or approaches?\n\nFor the DoD, the risks of failing to consider the use of OSS where appropriate are of increased cost, increased schedule, and/or reduced performance (including reduced innovation or security) to the DoD due to the failure to use the commercial software that best meets the needs (when that is the case). It also risks reduced flexibility (including against cyberattack), since OSS permits arbitrary later modification by users in ways that some other license approaches do not. In addition, ignoring OSS would not be lawful; U.S. law specifically requires consideration of commercial software (including extant OSS, regardless of exactly which license it uses), and specifically instructs departments to pass this requirement to consider commercial items down to contractors and their suppliers at all tiers.\n\nDoD contractors who always ignore components because they are OSS, or because they have a particular OSS license they don’t prefer, risk losing projects to more competitive bidders. If that competitor’s use of OSS results in an advantage to the DoD (such as lower cost, faster schedule, increased performance, or other factors such as increased flexibility), contractors should expect that the DoD will choose the better bid. This does not mean that existing OSS elements should always be chosen, but it means that they must be considered.\n\nQ: Is there a large risk that widely-used OSS unlawfully includes proprietary software (in violation of copyright)?\n\nNo; this is a low-probability risk for widely-used OSS programs. A primary reason that this is low-probability is the publicity of the OSS source code itself (which almost invariably includes information about those who made specific changes). Any company can easily review OSS to look for proprietary code that should not be there; there are even OSS tools that can find common code. A company that found any of its proprietary software in an OSS project can in most cases quickly determine who unlawfully submitted that code and sue that person for infringement.\n\nIn addition, widely-used licenses and OSS projects often include additional mechanisms to counter this risk. The GPL and LGPL licenses specifically recommend that “You should also get your employer (if you work as a programmer) or school, if any, to sign a ‘copyright disclaimer’ for the program, if necessary.”, and point to additional information. Many projects, particularly the large number of projects managed by the Free Software Foundation (FSF), ask for an employer’s disclaimer from the contributor’s employer in a number of circumstances. The Linux kernel project requires that a person proposing a change add a “Signed-off-by” tag, attesting that the “patch, to the best of his or her knowledge, can legally be merged into the mainline and distributed under the terms of (the license).”\n\nIn practice, OSS projects tend to be remarkably clean of such issues. For example, a Code Analysis of the Linux Wireless Team’s ath5k Driver found no license problems.\n\nWhen considering any software (OSS or proprietary), look for evidence that the risk of unlawful release is low. Factors that greatly reduce this risk include:\n\nWidespread availability and use of the software (which increases the likelihood of detection)\n\nConfiguration management systems that record the identity of individual contributors (which acts as a deterrent)\n\nLicenses or development policies that warn against the unlawful inclusion of material, or require people to specifically assert that they are acting lawfully (which reduce the risk of unintentional infringement)\n\nLack of evidence of infrigement (e.g., an Internet search for project name + “copyright infringement” turns up nothing). Parties are innocent until proven guilty, so if there is such a charge, investigate the charges’ merits instead of presuming guilt.\n\nQ: Is there a large risk to DoD contractors that widely-used OSS violates enforceable software patents?\n\nTypically not, though the risk varies depending on their contract and specific circumstance. Note, however, that this risk has little to do with OSS, but is instead rooted in the risks of U.S. patent infringement for all software, and the patent indemnification clauses in their contract.\n\nIt is difficult for software developers (OSS or not) to be confident that they have avoided software patent infringement in the United States, for a variety of reasons. Software might not infringe on a patent when it was released, yet the same software may later infringe on a patent if the patent was granted after the software’s release. Many software developers find software patents difficult to understand, making it difficult for them to determine if a given patent even applies to a given program. Patent examiners have relatively little time to review each patent, and do not have effective access to most prior art in software, which may lead them to grant patents for previously-published inventions or “obvious” inventions. The U.S. has granted a large number of software patents, making it difficult and costly to examine all of them. Recent rulings have strengthened the requirement for “non-obviousness”, which probably renders unenforceable some already-granted software patents, but at this time it is difficult to determine which ones are affected. As a result, it is difficult to develop software and be confident that it does not violate enforceable patents. The DoD has not expressed a position on whether or not software should be patented, but it is interested in ensuring that software that effectively supports its missions can be developed in a cost-effective, timely, and legal manner.\n\nU.S. government contractors (including those in the DoD) are often indemnified from patent infringement by the U.S. government as part of their contract. This greatly reduces contractors’ risks, enabling them to get work done (given this complex environment). They can obtain this by receiving certain authorization clauses in their contracts. FAR 52.227-1 (Authorization and Consent), as prescribed by FAR 27.201-2(a)(1), inserts the clause that the “Government authorizes and consents to all use and manufacturer… of any invention (covered by) U.S. patent”. The related FAR 52.227-2 (Notice and Assistance Regarding Patent and Copyright Infringement), as prescribed by FAR 27.201-2(b), requires the contractor to report to the Contracting Officer each notice or claim of patent/copyright infrigement in reasonable written detail. Specific patents can also be authorized using clause FAR 52.227-5 or via listed exceptions of FAR 52.227-3. See also DFARS subpart 227.70–infringement claims, licenses, and assignments and 28 USC 1498.\n\nAs noted in FAR 27.201-1, “Pursuant to 28 U.S.C. 1498, the exclusive remedy for patent or copyright infringement by or on behalf of the Government is a suit for monetary damages against the Government in the Court of Federal Claims. There is no injunctive relief available, and there is no direct cause of action against a contractor that is infringing a patent or copyright with the authorization or consent of the Government (e.g., while performing a contract).”\n\nThere are other ways to reduce the risk of software patent infringement (in the U.S.) as well:\n\nSome protocols and formats have been specifically devised and reviewed to avoid patents; using them is more likely to avoid problems.\n\nPrior art invalidates patents. Patents expire after 20 years, so any idea (“invention”) implemented in software publicly available for more than 20 years should not, in theory, be patentable. Once an invention is released to the public, the inventor has only one year to file for a patent, so any new ideas in some software must have a patent filed within one year by that inventor, or (in theory) they cannot be patented. See Prior Art and Its Uses: A Primer, by Theodore C. McCullough\n\nOSS can often be purchased (directly, or as a support contract), and such purchases often include some sort of indemnification.\n\nVarious organizations have been formed to reduce patent risks for OSS. The Open Invention Network (OIN) may in some cases provide some additional protection. OIN purchases patent rights; patents owned by OIN are available royalty-free to any company, institution or individual that agrees not to assert its patents against the “Linux System” (which includes a large set of OSS projects). The Linux Foundations’ Patent Commons forum is a neutral forum where patent pledges and other commitments can be readily accessed and easily understood.\n\nQ: How can I avoid failure to comply with an OSS license? What are good practices for use of OSS in a larger system?\n\nThe following are good practices:\n\nEducate all software developers that they must comply with all valid licenses - including both proprietary and open source software licenses. Explain the basic terms of the most common OSS licenses to them.\n\nBefore including any software in a larger system (be it proprietary or OSS), review its license to ensure that the license will not impede anticipated uses.\n\nWhen including externally-developed software in a larger system (e.g., as a library), make it clearly separable from the other components and easy to update. Commercial software (both proprietary and OSS) is occasionally updated to fix errors (including security vulnerabilities), and your system should be designed so that it is relatively easy to accept these updates.\n\nDocument from where and when any external software was acquired, as well as the license conditions, so that future users and maintainers can easily comply with the license terms.\n\nReleasing software as OSS\n\nQ: Has the U.S. government released OSS projects or improvements?\n\nYes, both entirely new programs and improvements of existing OSS have been developed using U.S. government funds. There are far too many examples to list; a few examples are:\n\nDelta3D - Open Source Gaming and Simulation Engine\n\nSecurity-Enhanced Linux (SELinux) - Security enhancements to Linux-based operating systems\n\nVistA and Hardhats - Implementations of US Veterans Affairs’ enterprise grade health care information system\n\nExpect - Tool for automating interactive applications. Since Expect was developed at the National Institute of Standards and Technology by employees of the Federal Government in the course of their official duties, it is not subject to copyright protection and is in the public domain.\n\nEvergreen - Library Management (by the State of Georgia)\n\nOpenSSL - this improvement was a FIPS 140-2 evaluation (for cryptographic modules)\n\nbind’s implementation of DNS security (DNSSEC) - bind is a widely used Domain Name Server (DNS); the U.S. government funded security enhancements to increase security of the Internet\n\nGNAT Ada compiler\n\nObject-Oriented Data Technology (OODT) - Transparent access to distributed resources (this NASA Jet Propulsion Laboratory (JPL) project became a top level open source Apache Software Foundation project in 2011)\n\nBSD TCP/IP suite - Provided the basis of the Internet\n\nGeographic Resources Analysis Support System (GRASS) - Geographic Information System (GIS) software used for geospatial data management and analysis, image processing, graphics/maps production, spatial modeling, and visualization developed by the Army Corps of Engineers’ Construction Engineering Research Laboratory\n\nOSSIM - geo-spatial image processing for remote sensing, photogrammetry, and Geographic Information Systems (GIS), originally developed by Harris Corporation for the Intelligence Community.\n\nBRL-CAD - cross-platform combinatorial Constructive Solid Geometry (CSG) solid modeling system\n\nParaview - multi-platform data analysis and visualization application, developed by Kitware Inc, for Los Alamos National Laboratory, the DoE, Army Research Labs and Sandia National Labs.\n\nQ: What are the risks of the government releasing software as OSS?\n\nThe key risk is the revelation of information that should not be released to the public. Classified software should already be marked as such, of course. This risk is mitigated by reviewing software (in particular, for classification and export control issues) before public release.\n\nQ: What are the risks of the government not releasing software as OSS?\n\nIf the government modifies existing OSS, but fails to release those improvements back to the main OSS project, it risks:\n\nGreatly increased costs, due to the effort of self-maintaining its own version\n\nInability to use improvements (including security patches and innovations) by others, where it uses a “non-standard” version instead of the version being actively maintained\n\nSimilarly, if the government develops new software but does not release it as OSS, it risks:\n\nGreatly increased cost, due to having to bear the entire burden of development costs\n\nInability to use improvements (including security patches and innovations) by others, since they do not have the opportunity to aid in its development\n\nObsolescence due to the development and release of a competing commercial (e.g., OSS) project. In this case, the government has the unenviable choice of (1) spending possibly large sums to switch to the new project (which would typically have a radically different interface and goals), or (2) continuing to use the government-unique custom solution, which typically becomes obsolete and leaves the U.S. systems far less capable that others’ (including those of U.S. adversaries)\n\nQuestions about why the government - who represents “the people” - is not releasing software (that the people paid for) back to the people.\n\nClearly, classified software cannot be released back to the public as open source software. However, often software can be split into various components, some of which are classified and some of which are not, and it is to these unclassified portions that this text addresses.\n\nQ: When can the U.S. federal government or its contractors publicly release, as OSS, software developed with government funds?\n\n“Clarifying Guidance Regarding Open Source Software (OSS)” states that \"Software items, including code fixes and enhancements, developed for the Government should be released to the public (such as under an open source license) when all of the following conditions are met:\n\nThe project manager, program manager, or other comparable official determines that it is in the Government’s interest to do so, such as through the expectation of future enhancements by others.\n\nThe Government has the rights to reproduce and release the item, and to authorize others to do so. For example, the Government has public release rights when the software is developed by Government personnel, when the Government receives “unlimited rights” in software developed by a contractor at Government expense, or when pre-existing OSS is modified by or for the Government.\n\nThe public release of the item is not restricted by other law or regulation, such as the Export Administration Regulations or the International Traffic in Arms Regulation, and the item qualifies for Distribution Statement A, per DoD Directive 5230.24 (reference (i)).\"\n\nThe government or contractor must determine the answer to these questions:\n\n. What contract applies, what are its terms, and what decisions have been made?\n\n. Do you have the necessary copyright-related rights?\n\n. Do you have the necessary other intellectual rights (e.g., patents)?\n\n. Do you have permission to release to the public (classification, distribution statements, export controls)?\n\n. Do you have the materials (e.g., source code) and are all materials properly marked?\n\nSource: Publicly Releasing Open Source Software Developed for the U.S. Government.\n\nThe following questions discuss some specific cases.\n\nQ: Can government employees develop software as part of their official duties and release it under an open source license?\n\nNot under typical open source software licenses based on copyright, but there is an alternative with the same practical effect.\n\nSoftware developed by US federal government employees (including military personnel) as part of their official duties is not subject to copyright protection in the US (see 17 USC § 105). Software not subject to copyright is often called “public domain” software. Public domain software (in this copyright-related sense) can be used by anyone for any purpose, and cannot by itself be released under a copyright license (including typical open source software licenses).\n\nHowever, software written entirely by "
    }
}