{
    "id": "dbpedia_3206_0",
    "rank": 93,
    "data": {
        "url": "https://wiki.kakupesa.net/index.php/Software_and_Content_Licensing",
        "read_more_link": "",
        "language": "en",
        "title": "Software and Content Licensing â€“ KakuWiki",
        "top_image": "https://wiki.kakupesa.net/favicon.ico",
        "meta_img": "https://wiki.kakupesa.net/favicon.ico",
        "images": [
            "https://wiki.kakupesa.net/resources/assets/poweredby_mediawiki_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "et",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Introduction\n\nWe all use computers. Yet there is a suprisingly low interest and knowledge in the wide public towards legal aspects and different licensing schemes. Several factors tend to contribute to this:\n\nComputers are usually sold with some software preloaded - this will give people the impression that 'it came with the computer' rather than it was bought together with the computer.\n\nAt workplaces, equipping the computers is the task for the employer, so the employees do not need to think about it.\n\nAgressive marketing by software companies to create the impression that 'nothing but them' exist.\n\nEducation being locked to certain providers (in many places - Estonian schools are now required to teach at least two software platforms)\n\nCarelessness of people - fueled by the dissonance between the numerous hysterical 'Catch the pirate!' campaigns and the reality where 'eveyone downloads stuff'.\n\n...\n\nWe will give an overview of the main software licensing models in use today. In addition, the main licenses of online content will be reviewed.\n\nProprietary software\n\nNote: the correct term for the software sold by Microsoft, Adobe and others is 'proprietary' rather than 'commercial' - commercial use is fully possible with other licensing models as well (with very few exceptions). Therefore, Red Hat Enterprise Linux is certainly commercial software (it costs a lot to buy in the box and is mostly addressed to enterprises) while also being free and open-source software (its source code is available, modifications are permitted, new software can be built on it). However, it is not proprietary (except some very small parts - some drivers etc).\n\nProprietary software can be defined as software with restrictions imposed by its proprietor (owner) on its use, copying and modification. Restrictions can be\n\nlegal - mostly defined by the license agreement (the EULA or End-User License Agrement), in addition to the innate copyright from its creation.\n\ntechnical - the most common is binary-only release, keeping the source code which effectively blocks closer studying or modification (closed-source software).\n\nthe combination of these two.\n\nIt is actually interesting to see how the roles of the measures have changed over time. When Bill Gates started to ask money for each copy of his software, he relied on legal means. During the DOS era with simplified copying between the widespread PCs (and no network yet) came the age of technical means - in addition to closed source, it was the heyday of various ingenious solutions in order to make unauthorized copying impossible. It ranged from non-standard diskette formats to special dongles which were inserted into the parallel or serial port in order to allow the software to work.\n\nTypes of proprietary software\n\nProprietary software can be divided into the following categories.\n\nCommercial proprietary software\n\nThe most prominent kind, which is sold commercially by unit (\"boxed\" software; recently sometimes also by authorized download), its license agreement grants its users a very limited set of rights. The license is typically reserved for use in one (sometimes one specific) computer at a time and often to the the specific user. Copying is very limited (often, users can make a single copy for backup; other copying is forbidden), reverse-engineering, closer studying, modifying and deriving new products is prohibited. Formerly, users were typically free to transfer their software from a computer to another, sometimes even allowing simultaneous use (e.g. at home and at work).\n\nOn the other hand, due to the increased pressure from free software in recent years, volume licensing has surfaced as an option. For example, MS Office 2007 Home and Student version allows for three separate installations, MacOS X Family Pack allows five; larger-scale schemes include [http://msdn.microsoft.com/et-ee/academic/default%28en-us%29.aspx MS Academic Alliance and various volume licensing systems in business sector.\n\nShareware\n\nTypically used for smaller software and/or trial versions, this is proprietary software which can be freely copied (typically in its delivery form, e.g. installer), shared with others and also used for a limited period. But like the commercial proprietary solutions, it does not allow modifications and is distributed as closed-source. The free of charge use period is typically from 15 to 90 days, after which it must be registered (typically involving payment). To encourage registration, several measures are used:\n\nsponsor advertisements are shown either at startup or throughout the working time when not registered (adware)\n\na nag screen reminding of registration is displayed for some time at startup (nagware)\n\nsome vital functions (e.g. saving your work) are disabled when not registered (crippleware)\n\nWhile some of the shareware products are fully functional regardless of registration, they become illegal to use after expiration of the trial period (protected by legal means).\n\nProprietary (closed-source) freeware\n\nThis is proprietary software with zero price. Freeware and free software are different terms - not in English but in many other languages as well. Freeware can be typically freely copied and used - however, many products limit the use by purpose, the most common restriction being \"free for home or non-commercial use\" (in this case, commercial users need to purchase a license just as in case of commercial proprietary product). Regardless of use, reverse-engineering, studying and modifying is forbidden, just as developing new products.\n\nSpecial notion 1: public domain\n\nPublic domain, while being one of the most permissive legal categories (essentially meaning giving up copyright), can be used in proprietary context. During the DOS era there were many small utilities available in public domain (some can be found in e.g. Garbo) - but often only as binary, thus cutting away a chance for modification and further development. Second, as there is no requirement for preserving the license, public domain components can be freely used to develop a proprietary product (even some free licenses allow for proprietary derivatives (e.g. BSD, MIT or X11 license). This kind of activity is impossible with free software licenses with \"strong copyleft\" that forbids narrowing the users' rights).\n\nSpecial notion 2: Microsoft Shared Source\n\nSince 2003, Microsoft has run a campaign named Shared Source which is often touted as a counterpart to Open Source by the company. In fact, it is a family of special license agreements with certain partners (countries and large companies) who have been given partial access to some of the proprietary code - however, in most cases, the access has been read-only - quoting Bruce Perens: \"look but don't touch - and we control everything\" (although the project has also spawned some licenses which are considered free - see below). While the concept itself is nothing special (and nothing wrong as such), critics have disliked the (deliberate?) blurring of concepts.\n\nSpecial notion 3: abandonware\n\nThis is a blurry category in proprietary software which are not sold or supported any more. This has remained a grey area in legislation - on one hand, the software is still protected and the owner can enforce his/her rights. On the other hand, most abandonware has been truly abandoned with no interest from owner's side (lots of old DOS games are the best example - many of them cannot even be run on current versions of MS Windows). In this case, fans keeping the venerable software alive enrich the general software scene. There have been multiple calls for putting old proprietary software under free licenses, but due to ineffectiveness and inflexibility of current IP system, there has been almost no success.\n\nFree and open-source software\n\nNote: on practical level, these two terms are more or less overlapping. More or less, all FOSS complies with the following principles:\n\ntheir source code is open and available, giving the technical freedom to change them or to develop new software from them\n\ntheir license allows the activities mentioned above, giving also the legal freedom to do them.\n\nthey do not discriminate on usage, i.e. both non-commercial and commercial use are allowed.\n\nthey usually demand the preservation of moral rights, i.e. the 'family tree' of an application should be preserved when developing new solutions\n\nA word of caution\n\nWhile free licenses do allow users far greater freedom than proprietary licenses, some things must be kept in mind, especially for developers striving to build their products on free software. An often overlooked problem is the compatibility of licenses - many developers with proprietary software background tend to lump all free and open-source software into one big category of 'freeware' and use whatever they want, wherever they want. While there are few restrictions on using free software products on their own, combining them takes careful study and compliance with their corresponding licenses. Especially clear restrictions exist when combining software which have licenses with different grades of copyleft (see below).\n\nDevelopers should remember that license violations can be different - while unsanctioned use (\"piracy\") is hardly a problem with free software, other kinds of violations are possible when combining elements from different sources. Nevertheless, a violation is still a violation.\n\nCopyleft\n\nWhile the term originated as a hackerly pun on 'copyright' (more exactly in the form of 'Copyleft: all rights reversed') it now denotes an important factor in free licenses - whether the license will influence the derived works or not. In general, there are three grades of copyleft:\n\nstrong copyleft - these licenses demand that all the derived works (the software that is made by altering the original) must retain the license of the original. Software with strong copyleft cannot be made proprietary - thus this is the best option for end users, while placing some restrictions on developers. This kind of software is also difficult to integrate into hybrid systems which consist of software with different (also proprietary) licenses. NB! This means software integration, not e.g. using different applications on the same computer. The best example of strong copyleft is the GNU GPL.\n\nweak copyleft - while also requiring the retaining of the license, weak copyleft licenses set some exceptions in order to allow better software integration (linking) with non-free (proprietary) systems. Weak copyleft is especially appropriate in the case of software libraries - collections of code used to create other programs. In these cases, the copyleft of the library will not dictate the licensing of the new software.\n\nno copyleft - these licenses do not limit the licensing of the derivatives. While the software itself remains free as dictated by the license, it is possible to derive propriatary applications out of it. Thus this is option gives the largest freedom to developers while somewhat cutting back on the continuity assurance for end users (however, there is a multitude of free software projects under non-copyleft licenses that have been around for decades).\n\nLicenses with strong copyleft\n\nThe GNU General Public License\n\nDeveloped by Richard Stallman and his colleagues in 1989 and refined in its second version two years later, this license forms the mainstay of free software, being used at approximately 70% of all free software projects.\n\nThe GPL has authorship as its focus, stating the author's right to his/her work as the first thing (therefore the criticisms of being anti-author are unfounded). After this however, the GPL takes a radically different path comparing to proprietary licenses. Instead of exact dictation of conditions of use, it proclaims the rights of the user to\n\nThe freedom to run the program, for any purpose (freedom 0).\n\nThe freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.\n\nThe freedom to redistribute copies so you can help your neighbor (freedom 2).\n\nThe freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.[1]\n\nIn practice, it means that GPL-ed software can be freely copied, changed and redistributed provided that\n\nthe same rights are exercised on derivatives - therefore, it is not possible to use GPL-ed software to develop a proprietary product.\n\nthe source code must be available - usually it is distributed with the work, but the license also permits on-demand distribution. In this case, the software must include clear guidelines how to obtain the source (e.g. by e-mail or web).\n\nSome more remarks:\n\nif a GPL-ed product is changed only for \"in-house\" use, publishing the changes is not mandatory. However, as soon as the derivative will be distributed outside, the source must be made available. This aspect is widely used by Google who has built in-house modifications on Linux.\n\nGPL directly forbids any discrimination on use - this also means that all commercial use is fully legal. Both original and derived software can be sold (done by e.g. Red Hat). However, the most used business model for free software is probably \"free product, commercial know-how\" (support, consulting, warranty).\n\nGPL has a clause about the work being distributed \"as is\", i.e. having no warranty. Many superficial readers have therefore grasped the idea that \"free software has no warranty\" and consequently dismissed it as unsuitable for \"serious business\". Actually, the market for these services is completely open (as opposed to e.g. MS Windows where only certified partners can offer it) - anyone is fully entitled to offer services on free software, including warranty on his/her own terms. Due to this, support contracts are likely more affordable due to open competition (\"you want that much for supporting my server? I will go up the street to David's shop!\").\n\nThe copyleft nature of GPL is very unpleasant to Microsoft and other big players who cannot use free software authors as unpaid labour force for developing their proprietary applications (in fact, Microsoft has been very careful to keep all GPL-ed code far away from its developers - a proved case of GPL-ed code in their proprietary products would have catastrophic consequences for the company!), but is a good guarantee for continuity. Therefore, the opinion \"wait and you will see - they soon ask money for Linux too!\" is incompetent at best. Also, GPL is very resistant to a widespread unethical business practice named Embrace, Extend and Extinguish (the best example of its - fortunately quite unsuccessful - attempt is probably the infamous MS-HTML).\n\nNote: GPL version 3\n\nReleased after a long preparation period in 2007, it solved some incompatibility problems with other free licenses. But its most notable additions have also created the most controversy:\n\nthe anti-patent clauses - essentially, GPL 3 provides some active defense against software patenting. In principle, any user who attempts litigation against others based on software patents will void the license to all GPL 3 licensed software he/she uses. This may be a huge discouragement for patent litigation once the license becomes more widespread.\n\nthe \"tivoization\" clauses - named after the TiVo media player, these clauses prevent further cases of bypassing the rights guaranteed by the license. Namely, TiVo ran on Linux and allowed modifications to its source code as dictated by the license. However, using the modified code on TiVo was impossible due to some countermeasures\n\nThe FSF notes that GPL 3 is incompatible with GPL 2 as such, but as the majority of GPL 2 software is actually licensed \"GPL 2 or newer\" this could solve some of the incompatibility issues.\n\nGPL 3 is slowly gaining traction in software world, but some people oppose it for the same additions described above, feeling that they narrow down the freedom instead of enhancing it. One of the prominent opponent of GPL 3 is Linus Torvalds, who keeps Linux kernel under GPL 2 for now.\n\nThe Affero GPL\n\nThis license is sometimes called 'extra strong copyleft'. The GPL contains what is known as 'ASP loophole' (ASP standing for 'Application Service Provider') - while its strong copyleft demands opening the source code for any derived projects, using the software over the network (the SaaS or 'Software as a Service' model) does not trigger the application of copyleft. This has allowed the use of GPL-ed code in Web applications without having to disclose the source.\n\nAGPL was released in 2002 to close this hole - it regards use over the network as copying, mandating the disclosure of the source for any user of the application. While the AGPL version 1 was based on GPL 2 and the 2007 version 3 on GPL 3, the first version was not compatible with GPL. However, there are ways to make AGPL 3 compatible with GPL 3.[2]\n\nLicenses with weak copyleft\n\nThe GNU Lesser General Public License\n\nThe first 'L' in the LGPL stood earlier for 'Library', denoting it to be designed for software libraries in the first place. However, it has been used also in some large projects, most notably LibreOffice, OpenOffice.org (besides the non-copyleft Apache License) and the Mozilla Application Suite (besides the strong copyleft GPL and weak copyleft MPL).\n\nThe Mozilla Public License\n\nThe MPL was developed by Mozilla Foundation for its software. It allows combining software under it with proprietary components into a 'larger work', while still retaining copyleft on particular free components[3]. From version 2 on, it has been compatible with the GPL[4].\n\nThe European Union Public License\n\nThe EUPL was actually planned as a strong copyleft license, but the attempts in achieving wider grades of compatibility currently allow the software under it to be turned to use weaker copyleft[5]. Thus it can be called to be a variable copyleft license[6].\n\nIts strong points in Europe are the explicit compatibility with GPL 2 (and indirectly also GPL 3), while being designed to be compatible with European legal tradition and EU legislation as well as having official translations in many (in the future, likely all) EU languages. Thus it could be a good choice for European developers (particularly as one license in multi-licensing).\n\nMicrosoft Public License and Reciprocal Public License\n\nInterestingly, Microsoft has released (under its Shared source initiative) two software licenses which have been accepted both by the Free Software Foundation and Open Source Initiative. Both these licenses do qualify as weak copyleft free software licenses. However, neither are considered compatible with the GPL[7] and are probably used rarely outside Microsoft.\n\nNon-copyleft (permissive) licenses\n\nAs mentioned, these licenses provide the biggest freedom to software developers and their use has increased during the recent years[8]. However, they still cannot compete with the market share of licenses with stronger copyleft, especially in some established free software collections like Debian[9]. However, a suggestion that this kind of licensing is better for component-level technology while stronger copylefts suit better for large community efforts[10] seem to have some merit.\n\nThe BSD license\n\nThe BSD license is a non-copyleft license used by the variants of BSD Unix as well as a number of other projects (although lately the MIT and Apache licenses seem to be more popular on non-BSD-related projects). Its proponents stress its suitability for projects with business potential[11], while critics point out the possibility for software companies to 'leech' free projects without contributing back[12].\n\nThe Apache license\n\nThe Apache license is a popular permissive license used by the Apache web server and related projects (recently also including Apache OpenOffice) but also a number of smaller projects (e.g. [VLC media player]. The version 2 is considered compatible with GPL 3[13].\n\nThe MIT (X11) license\n\nThe MIT license is a permissive license originating from the Massachusetts Institute of Technology. It is considered compatiblw with the GPL (all versions) and used by projects like Mono (among other licenses), Lua, Ruby on Rails and perhaps most importantly, the X Window System (hence the parallel name of X11 license).\n\nOnline content licenses\n\nCreative Commons\n\nThe CC licenses are most easily chosen by picking the desired conditions from the website. All CC licenses share a common attribute in authorship (Attribution or BY) - just like free software and GPL, CC grows out from respecting the authors' rights (more in the Continental European sense). The author has full control in CC, thus it is possible to negotiate on changing the license with the author (e.g. the author may permit commercial use as an exception, even if the object is licensed as non-commercial only). After the BY clause, the next steps may differ as follows.\n\nCC Zero (CC0)\n\nThe most liberal option, added to the original licenses later to essentially allow releasing the content into public domain using the CC framework.\n\nCC Attribution (CC BY)\n\nThe most liberal of the original CC licenses, stating only authorship. Both commercial use and modifications are permitted. As it is, it's more liberal than the GNU GPL and FDL, due to not requiring modifications under the same license (being somewhat similar to the BSD license in software).\n\nCC Attribution-ShareAlike (CC BY-SA)\n\nAlso permits commercial use and modifications but the latter must be under the same license (similar to GPL and FDL, but is still not compatible with them). One of the most popular license also used by Wikipedia and related projects.\n\nCC Attribution-NoDerivs (CC BY-ND)\n\nAllows commercial use, but not modifications. Might be suitable for a writer who has created an intricate fantasy world and would not like others to write sequels (J.R.R. Tolkien could have used it, had he lived in our days).\n\nCC Attribution-NonCommercial (CC BY-NC)\n\nAllows modifications but the original object can only be used noncommercially. The NonCommercial clause will extend to the modifications too (although they will not have to use exactly the same license).\n\nCC Attribution-NonCommercial-ShareAlike (CC BY-NC-SA)\n\nA popular CC license - allows noncommercial use and modifications, provided that the license will extend to modifications. This license is often used parallelly with traditional copyright - business use is under copyright, non-profit use (schools, NGOs, nurseries...) is much more free. The key to its popularity is likely in the chance to maximise the spread in the non-market sector (which often works as a perfect advertisement) while retaining full control over commercial use.\n\nCC Attribution-NonCommercial-NoDerivs (CC BY-NC-ND)\n\nThe strictest CC license, forbids both commercial use and modifications, but is still much more free than traditional full copyright.\n\nThe GNU Free Documentation License\n\nThe GNU FDL is a copyleft license developed in 1999 by the Free Software Foundation as the counterpart of GPL for documentation. It was the original license of Wikipedia and is still used by a number of free content projects.\n\nReferences\n\nAdditional Reading"
    }
}