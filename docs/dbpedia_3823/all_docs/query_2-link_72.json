{
    "id": "dbpedia_3823_2",
    "rank": 72,
    "data": {
        "url": "https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html",
        "read_more_link": "",
        "language": "en",
        "title": "DecisionTreeClassifier",
        "top_image": "https://scikit-learn/stable/_images/sphx_glr_plot_release_highlights_1_3_0_thumb.png",
        "meta_img": "https://scikit-learn/stable/_images/sphx_glr_plot_release_highlights_1_3_0_thumb.png",
        "images": [
            "https://scikit-learn.org/stable/_static/scikit-learn-logo-small.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_release_highlights_1_3_0_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_classifier_comparison_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_iris_dtc_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_cost_complexity_pruning_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_unveil_tree_structure_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_adaboost_multiclass_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_voting_decision_regions_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_forest_iris_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_adaboost_twoclass_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_multi_metric_evaluation_thumb.png",
            "https://scikit-learn.org/stable/_images/sphx_glr_plot_multiclass_overview_thumb.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Gallery examples: Release Highlights for scikit-learn 1.3 Classifier comparison Plot the decision surface of decision trees trained on the iris dataset Post pruning decision trees with cost complex...",
        "meta_lang": "en",
        "meta_favicon": "../../_static/favicon.ico",
        "meta_site_name": "scikit-learn",
        "canonical_link": "https://scikit-learn/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html",
        "text": "criterion{“gini”, “entropy”, “log_loss”}, default=”gini”\n\nThe function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “log_loss” and “entropy” both for the Shannon information gain, see Mathematical formulation.\n\nsplitter{“best”, “random”}, default=”best”\n\nThe strategy used to choose the split at each node. Supported strategies are “best” to choose the best split and “random” to choose the best random split.\n\nmax_depthint, default=None\n\nThe maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.\n\nmin_samples_splitint or float, default=2\n\nThe minimum number of samples required to split an internal node:\n\nIf int, then consider min_samples_split as the minimum number.\n\nIf float, then min_samples_split is a fraction and ceil(min_samples_split * n_samples) are the minimum number of samples for each split.\n\nChanged in version 0.18: Added float values for fractions.\n\nmin_samples_leafint or float, default=1\n\nThe minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression.\n\nIf int, then consider min_samples_leaf as the minimum number.\n\nIf float, then min_samples_leaf is a fraction and ceil(min_samples_leaf * n_samples) are the minimum number of samples for each node.\n\nChanged in version 0.18: Added float values for fractions.\n\nmin_weight_fraction_leaffloat, default=0.0\n\nThe minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.\n\nmax_featuresint, float or {“sqrt”, “log2”}, default=None\n\nThe number of features to consider when looking for the best split:\n\nIf int, then consider max_features features at each split.\n\nIf float, then max_features is a fraction and max(1, int(max_features * n_features_in_)) features are considered at each split.\n\nIf “sqrt”, then max_features=sqrt(n_features).\n\nIf “log2”, then max_features=log2(n_features).\n\nIf None, then max_features=n_features.\n\nNote: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than max_features features.\n\nrandom_stateint, RandomState instance or None, default=None\n\nControls the randomness of the estimator. The features are always randomly permuted at each split, even if splitter is set to \"best\". When max_features < n_features, the algorithm will select max_features at random at each split before finding the best split among them. But the best found split may vary across different runs, even if max_features=n_features. That is the case, if the improvement of the criterion is identical for several splits and one split has to be selected at random. To obtain a deterministic behaviour during fitting, random_state has to be fixed to an integer. See Glossary for details.\n\nmax_leaf_nodesint, default=None\n\nGrow a tree with max_leaf_nodes in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.\n\nmin_impurity_decreasefloat, default=0.0\n\nA node will be split if this split induces a decrease of the impurity greater than or equal to this value.\n\nThe weighted impurity decrease equation is the following:\n\nN_t / N * (impurity - N_t_R / N_t * right_impurity - N_t_L / N_t * left_impurity)\n\nwhere N is the total number of samples, N_t is the number of samples at the current node, N_t_L is the number of samples in the left child, and N_t_R is the number of samples in the right child.\n\nN, N_t, N_t_R and N_t_L all refer to the weighted sum, if sample_weight is passed.\n\nAdded in version 0.19.\n\nclass_weightdict, list of dict or “balanced”, default=None\n\nWeights associated with classes in the form {class_label: weight}. If None, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.\n\nNote that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}].\n\nThe “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))\n\nFor multi-output, the weights of each column of y will be multiplied.\n\nNote that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.\n\nccp_alphanon-negative float, default=0.0\n\nComplexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ccp_alpha will be chosen. By default, no pruning is performed. See Minimal Cost-Complexity Pruning for details.\n\nAdded in version 0.22.\n\nmonotonic_cstarray-like of int of shape (n_features), default=None"
    }
}