{
    "id": "dbpedia_2798_2",
    "rank": 7,
    "data": {
        "url": "https://shibboleth.atlassian.net/wiki/spaces/CONCEPT/pages/928645290",
        "read_more_link": "",
        "language": "en",
        "title": "Shibboleth Concepts",
        "top_image": "https://shibboleth.atlassian.net/wiki/s/-37443238/6452/c89d9a868137be6dfcf36ca1202ab4e1afbcd7a8/7/_/favicon-update.ico",
        "meta_img": "https://shibboleth.atlassian.net/wiki/s/-37443238/6452/c89d9a868137be6dfcf36ca1202ab4e1afbcd7a8/7/_/favicon-update.ico",
        "images": [
            "https://shibboleth.atlassian.net/wiki/download/attachments/32773/atl.site.logo?version=2&modificationDate=1625679437670&cacheVersion=1&api=v2",
            "https://shibboleth.atlassian.net/wiki/download/attachments/32773/atl.site.logo?version=2&modificationDate=1625679437670&cacheVersion=1&api=v2",
            "https://shibboleth.atlassian.net/wiki/download/attachments/32773/global.logo?version=1&modificationDate=1625679592127&cacheVersion=1&api=v2"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "/wiki/s/-37443238/6452/c89d9a868137be6dfcf36ca1202ab4e1afbcd7a8/7/_/favicon-update.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "How it All Fits Together\n\nShibboleth has two major halves: an identity provider (IdP), and a service provider (SP). The identity provider supplies information about users to services, and the service provider gathers information about users to protect resources. In the typical use case, a web browser accesses a protected resource, authenticates at their identity provider, and ends up back at the resource logged in.\n\nHow does this actually happen, and how does it fit with IdP and SP configuration? What other pieces are involved?\n\n1. User Accesses Protected Resource\n\nA user tries to access a protected resource, causing the SP to intercept the request. The resource locations to protect can be defined in the web server configuration itself, such as httpd.conf, or in shibboleth2.xml (or a separate file) using the <RequestMap>.\n\n2. SP Determines IdP and Issues Authentication Request\n\nThe SP will select a SessionInitiator to use based on this protection configuration, which in turn is responsible for determining which IdP the user will be referred to and what protocol to use. The providers signal their profile preferences to one another through the exchange of SAML metadata.\n\nThe process of determining the IdP to use is called IdP Discovery and can include a combination of configuration options, various web-based interactions, cookies, and other techniques. A SessionInitiator might supply a text entry box, refer the user to a locally or remotely deployed discovery service (DS), or select a fixed IdP based on the resource requested.\n\nIn some legacy configurations, the SP may use an older-style discovery mechanism called a \"WAYF\" service. In this case, the request for authentication is assumed to be a legacy Shibboleth 1.x request and is issued to the WAYF itself, which then relays the request to the IdP once the selection is made. This approach is limited to SAML 1.x use, does not interoperate with most other SAML implementations, and is not recommended for new installations.\n\n3. User Authenticates to the IdP\n\nAn authentication request is issued by the SP to the IdP as a result of the previous step. The format of this request depends on the protocol and binding/profile selected by the SP. The authentication request is passed through the browser, and the client is redirected (via GET or POST) to an endpoint at the IdP typically called a \"Single Sign-On Service\".\n\nThe IdP examines the request and decides how it would like to authenticate the user based on rules established for the SP in relying-party.xml and authentication in general. The user is redirected to a compatible login flow, authenticates (or tries to) using the method selected, and eventually control passes back to the profile implementation with their username determined.\n\n4. IdP Issues Response to SP\n\nThe IdP now uses the principal's name, the SP, and the protocol and binding/profile selected to decide what information to send the SP and how to package it.\n\nFirst, the IdP gathers a set of attributes for the user using the attribute resolver. It collects user data from all the backend sources, transforms it if necessary, and attaches encoders to each attribute.\n\nThese attributes are passed through the attribute filter, which may pare down the information to be included in the response. The set of attributes released most often depends on the SP and the principal. This protects the user's privacy. The resulting information could be as little as \"someone authenticated successfully\", or reveal any attribute you can imagine.\n\nThe user's information is packaged into a form suitable for the eventual response using the encoders attached earlier, typically in a SAML assertion. This assertion may be signed with the IdP's key and, in the case of a SAML 2.0 assertion, encrypted with the SP's key for security and privacy. The assertion (or a reference to it called an artifact) is placed into a response that is passed through the client browser for delivery back to the SP to an endpoint called an Assertion Consumer Service.\n\n5. Back to the SP\n\nThe browser delivers the response from the IdP to an Assertion Consumer Service endpoint at the SP. The ACS implementation decodes the message, decrypts the assertion if necessary, and performs a variety of security checks. If everything is in order, then the SP will create a new user session after extracting attributes and other information from the message. Attributes are translated into a cacheable form using the SP's AttributeExtractor, passed through an AttributeFilter, and cached in the new session along with other relevant information.\n\nOnce the session is created, the SP determines where to send the browser by examining the \"relay state\" information returned by the IdP, if any.\n\nFinally, having determined a resource location, the SP will redirect the browser to it.\n\n6. Back to the Protected Resource\n\nIn the final step, the browser is redirected to the protected resource accessed in Step 1, but this time the access occurs in the context of a session stored within the SP's SessionCache."
    }
}