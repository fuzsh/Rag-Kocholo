{
    "id": "yago_19690_2",
    "rank": 52,
    "data": {
        "url": "https://esolangs.org/wiki/User:B_jonas/List",
        "read_more_link": "",
        "language": "en",
        "title": "User:B jonas/List",
        "top_image": "https://esolangs.org/favicon.ico",
        "meta_img": "https://esolangs.org/favicon.ico",
        "images": [
            "https://esolangs.org/w/resources/assets/licenses/cc-0.png",
            "https://esolangs.org/w/resources/assets/poweredby_mediawiki_88x31.png",
            "https://esolangs.org/w/images/hosting_bytemark_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://esolangs.org/wiki/User:B_jonas/List",
        "text": "This is a list of some esoteric languages and other pages on this wiki, curated personally by me User:b_jonas, with notes on them for myself. The list is in some semblance of order with similar or related languages sometimes close to each other. I should grow this in the future.\n\nINTERCAL popularized the concept of esoteric languages, has several modern extensions including CLC-INTERCAL.\n\nBefunge the original Fungeoid, i.e. program is two-dimensional grid of instructions on which instruction pointer can move in any direction, by Chris Pressey in 1993 but several moder extensions, fungot is written in it.\n\nNopfunge fungeoid, but the only instructions change the direction of control flow, the only state are the instruction pointer and direction).\n\nConedy: fungeoid where the instructions are at integer coordinates but the instruction pointer can be any rational and it's the only state of the program, by ais523.\n\nRASEL Befunge-like using a stack of big rationals, you can reach deep into the stack, no self-modification.\n\nefghij source code is a real-world stack of common household objects, would be interesting to maintain servers if you programmed in this and had to store production programs in a special environment so they don't accidentally collapse or corrupt.\n\nPoololoop source code is running path measured with a GPS, encodes lambda calculus program.\n\nPiet source code is a paletted bitmap image, stack-based.\n\nChef program looks like cooking recipes\n\nShakespeare program looks like Shakespeare verses\n\nHomespring themed to describe salmon swimming up river.\n\nЮᓂ곧⎔ unimplemented language with unusual for its time syntax, by David Madore in 2004.\n\nWysiScript source code is formatted text, only the formats matter, the value of characters themselves don't.\n\nPerligata source code is mangled latin.\n\nAcme::Bleach source code consists of only space, tab, newline characters.\n\nWhitespace source code consists of only space, tab, newline characters.\n\nThue pure string replacement loop.\n\n1.1 also pure string replacement loop but without the syntax.\n\n/// self-modifying string-replacement loop.\n\nFuun DNA specialized self-modifying string replacement language that has a limited ability to copy parts of the input to make it easier to use, from IOCCC 2007.\n\nSIMPLE text preprocessor with complicated quoting rules by David Madore in 1998.\n\nbrainfuck famous simple language with way too many imitations, invented in 1993 but later found to have been independently invented in 1964 as P''. See also Brainfuck constants.\n\nOok! the earliest trivial brainfuck substitution.\n\nTreehugger brainfuck with the tape being an infinite binary tree.\n\nV (FMota) a more restricted brainfuck-like language on an infinite binary tree.\n\nBrainfuck^ brainfuck with indirect addressing.\n\nBF Joust two-player non-interactive game based on brainfuck.\n\nLambda calculus the original functional programming language, invented before computers.\n\nBinary lambda calculus an encoding of lambda calculus connected to some IO, interpreted in an IOCCC 2012 entry.\n\nReal Fast Nora's Hair Salon 3: Shear Disaster Download also an encoding of lambda calculus, name invented by spam on the esowiki.\n\nSectorlisp tiny implementation for a lisp-like language.\n\nCombinatory logic aka Bird sociology proof that lambda calculus can be programmed without lambda abstraction, you can build any program from application and a few primitive lambda calculus expressions.\n\nPointfree programming general concept of the above.\n\nUnlambda combinatory logic with some powerful extra features, by David Madore in 1999, its description page was what originally introduced me to combinatory logic and Church-encodings of algebraic types way back.\n\nWikiplia functional language by Tom Murphy VII.\n\nBoVeX functional language for typesetting his articles by tom7.\n\nUnderload simple stack-based functional language, has postscript-like parenthisized functions that are a list of instructions to execute, and a combinators to build arbitrary functions like that (though it's still Turing-complete without those), with a detailed wiki article, by ais523 in 2006.\n\n7 similar to underload but it doesn't have parenthisized functions.\n\nWikipedia:FP (programming language) combinatory logic but based on functions with multiple arguments, whereas combinatory logic and lambda calculus are single-argument functions.\n\nAmicus, Amicus Severus another abstractionless language based on multi-argument functions.\n\nHyperamicus uncomputable extension of Amicus.\n\nAmycus I created this uglier language by mistake when misreading a punctuation in the description of Amicus.\n\nℲ multi-argument functional language with abstractions.\n\nFP trivia might be in between an ordinary functional language with named variables and an FP/(0)-like combinator language, as in it has no lambda abstraction, just combinators combined, but function arguments are named instead of numbered, unclear because lack of docs.\n\nGeneral Compute Coprocessor aka GCC functional language, controls ghosts in a Pacman arcade game, competitors write programs for ICFP contest 2014.\n\nGML functional programming language, stack-based plus named true lexical local variables, no mutable state, for defining ray-tracing objects, lights and camera for ICFP contest 2000.\n\nICFP functional programming language for ICFP contest 2024.\n\nLambda: the Gathering interactive two-player programming game for ICFP contest 2011.\n\n(0) family of toy uncomputable languages by David Madore for teaching theory.\n\nFractran disguised counter machine with any number of counters and limited control flow.\n\nStackFlow: multiple stacks of symbols with finite state control, but restricted control flow: popping from a stack forgets the previous instruction pointer and jumps to a state that depends only on which stack was popped and the symbol, by ais523 in 2014.\n\nThe Waterfall Model multiple counters but limited control flow, by ais523.\n\nFlooding Waterfall Model variant of The Waterfall Model, used to prove Magic: the Gathering Turing-complete with players having no meaningful decisions.\n\nRAM0 simple model of RAM machines, Turing-complete.\n\nI/D machine Turing-semi-tarpit operating on an infinite RAM of natural numbers.\n\nThree Star Programmer one-instruction tarpit that is likely Turing-complete, operating on an infinite array of natural numbers.\n\nLast ReSort zero-instruction tarpit, derivative of Three Star Programmer.\n\nSpiral Rise another language used to prove languages Turing-complete.\n\nMy Unreliable Past: multi-counter machine but with a strange starting condition that makes its computational class hard to describe.\n\nMagic-1 16-bit CPU with memory protection, implemented in custom hardware in 2006, with significant amount of software stack including pre-emptive multi-tasking OS and a semi-serious C compiler, accessible on internet in a way that you can run custom programs on it.\n\nBMOW 1 6502-like 8-bit CPU with 8-bit arithmetic but 24-bit address space, implemented in custom built hardware in 2009, full computer with peripherials including video card in custom hardware.\n\nViktor's amazing 4-bit processor toy CPU addressing 256 nibbles, implemented in custom hardware.\n\nApollo Guidance Computer 15-bit computer used in space on the Apollo mission spacecraft.\n\nSKOAL not a language but a strange extension card for the HP 9825T desktop calculator for extending its memory.\n\nGHost CPU aka GHC small 8-bit microcontroller, controls NPC Pacmen in a Pacman arcade game, competitors write programs for ICFP contest 2014.\n\nOrbit virtual machine for simple floating-point numeric computations in guaranteed bounded time, judges wrote program that simulates orbital mechanics of satellites for ICFP contest 2009.\n\n\\BV for simple numerical calculations even even smaller bounded time, competitors must writer programs in ICFP conetst 2013.\n\nY86 aka x86, 16-bit toy processor used in a book to teach x86_16 and DOS programming, implemented in software.\n\nUM-32 simple 32-bit CPU, judges wrote program that contains puzzles for ICFP contest 2006.\n\nIntcode organizer wrote programs for Advent of Code 2019 tasks.\n\nMIX non-esoteric by Donald Knuth for giving example programs in his book the TAOCP.\n\nMMIX modern replacement of MIX, by Donald Knuth for giving example programs in new editions of the TAOCP, may be esoteric.\n\nPL/MIX high level programming language by Donald Knuth, stuck in an unreachable alternate universe.\n\nGb_gates RISC small 16-bit microprocessor that can read ROM but not write it, by Donald Knuth.\n\nBANCStar a low-level language that was only intended as a compilation target, but as the source language wasn't pwoerful enough, people started to program directly in it, and didn't write a proper assembler/compiler.\n\nLegasm non-esoteric low-level with flat 32-bit memory for a game engine, abandonned.\n\nFuun RNA language whose output is full color bitmap graphics, for ICFP contest 2007, program is usually output by Fuun DNA.\n\nSORTA interprets a language, no idea what it can do, but it's decidedly esoteric, by D J Bernstein for IOCCC 1991.\n\nObfuscated Tiny C small subset of C to x86_32 for compiler that can compile itself, can link libc functions, by Fabrice Bellard for IOCCC 2001.\n\nW (Viktor T. Toth) small low-level language with non-cross compiler for x86_16 DOS calculators.\n\nABC (compiler) compiler to x86_16 (but using 32-bit addressing modes) emitting only ASCII printable bytes, such that only instructions made of only ASCII printable bytes will be executed, by tom7.\n\nMov Turing-complete subset of x86 that executes only MOV instructions, nothing else, and no self-modification.\n\nJSFuck universal subset of javascript where source code can use only six different characters.\n\nBlindfolded_Arithmetic add subtract multiply and integer divide on a few bigint registers, no flow control just looping the whole program, documented by ais523 in 2018, but a similar language with fixints was used by Sean Barrett for IOCCC 1992.\n\nAnalytical Engine Programming Cards based on Babbage's plans for the Analytical engine computer, computes with integer 50 digits long, IO statements are specified to be executed by the operators rather than the machine.\n\nForte you assign to an integer, permanently changing its value, by ais523.\n\nEodermdrome rewrites unlabeled undirected graphs, by ais523.\n\nIncident unique hard to program syntax and semantics, by ais523.\n\nThe Subtyping Machine Turing-complete language simulating the subclassing relationship in Java generics.\n\nBut Is It Art? jigsaw puzzle solving nondeterministic, by ais523.\n\nNellephant NL complexity class, I am planning to avenge its arithmetic instructions attract and repel.\n\nCountercall probably not Turing-complete but this is hard to prove, by ais523.\n\nXigxag also probably not Turing-complete but this is hard to prove, by Christ Pressey.\n\nBurlesque golfing language, some people use it for non-golfing toy tasks.\n\nJelly golf language with APL-like features.\n\nBrachylog golf language with prolog semantics.\n\ngoruby a variant of ruby that makes it slightly more like a golf language.\n\nHusk golf language.\n\nInteg toy language with nested expressions evaluating to bigints plus a writable flat memory of bigints, was once ran by an IRC bot.\n\nEgel toy language.\n\nFarnsworth was originally a calculator language for quick computations through an IRC bot, but then inevitably grew.\n\nComun toy language with four separate memory spaces containing different sizes of integers, plus registers containing pointers into these, plus a preprocessor that runs a Comun program at compile time and embeds its output to the source code.\n\nLawrence J. Krakauer's decimal computer toy language for introducing children into programming back in 1965.\n\nMouse sounds like a toy language, except it's from 1969, has single-letter names for variables and functions kind of like dc.\n\nOrca another case where I've no idea what the language does but it's decidedly esoteric and with lots of work put into it.\n\nMcCulloch's second machine, McCulloch's third machine, Sultan's daughter simple languages defined by Raymond Smullyan that have limited computational power but teach how to write a quine.\n\nVon Neumann's 29-state cellular automaton early 2D cellular automaton created specifically to be Turing-complete programmable.\n\nGame of Life famous cellular automaton.\n\nHQ9+ and HQ9++ joke languages that can execute only a very few limited tasks that don't combine well, from 2001 and 2003."
    }
}