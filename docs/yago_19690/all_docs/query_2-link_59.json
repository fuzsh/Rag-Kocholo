{
    "id": "yago_19690_2",
    "rank": 59,
    "data": {
        "url": "https://gcc.gnu.org/gcc-3.1/changes.html",
        "read_more_link": "",
        "language": "en",
        "title": "GCC 3.1 Release Series â€” Changes, New Features, and Fixes",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://gcc.gnu.org/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "SPEC2000 and SPEC95 benchmark suites are now used daily to monitor performance of the generated code.\n\nAccording to the SPECInt2000 results on an AMD Athlon CPU, the code generated by GCC 3.1 is 6% faster on the average (8.2% faster with profile feedback) compared to GCC 3.0. The code produced by GCC 3.0 is about 2.1% faster compared to 2.95.3. Tests were done using the -O2 -march=athlon command-line options.\n\nThe C++ ABI has been changed to correctly handle this code:\n\nstruct A { void operator delete[] (void *, size_t); }; struct B : public A { }; new B[10];\n\nThe amount of storage allocated for the array will be greater than it was in 3.0, in order to store the number of elements in the array, so that the correct size can be passed to operator delete[] when the array is deleted. Previously, the value passed to operator delete[] was unpredictable.\n\nThis change will only affect code that declares a two-argument operator delete[] with a second parameter of type size_t in a base class, and does not override that definition in a derived class.\n\nThe C++ ABI has been changed so that:\n\nstruct A { void operator delete[] (void *, size_t); void operator delete[] (void *); };\n\ndoes not cause unnecessary storage to be allocated when an array of A objects is allocated.\n\nThis change will only affect code that declares both of these forms of operator delete[], and declared the two-argument form before the one-argument form.\n\nG++ now supports the \"named return value optimization\": for code like\n\nA f () { A a; ... return a; }\n\nG++ will allocate a in the return value slot, so that the return becomes a no-op. For this to work, all return statements in the function must return the same variable."
    }
}