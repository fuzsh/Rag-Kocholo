{
    "id": "yago_19690_0",
    "rank": 48,
    "data": {
        "url": "https://deprogrammaticaipsum.com/the-art-of-the-art-of-computer-programming/",
        "read_more_link": "",
        "language": "en",
        "title": "The Art Of \"The Art Of Computer Programming\"",
        "top_image": "https://deprogrammaticaipsum.com/the-art-of-the-art-of-computer-programming/20181210_163414-e1544459922771.jpg",
        "meta_img": "https://deprogrammaticaipsum.com/the-art-of-the-art-of-computer-programming/20181210_163414-e1544459922771.jpg",
        "images": [
            "https://deprogrammaticaipsum.com/img/logo.png",
            "https://deprogrammaticaipsum.com/the-art-of-the-art-of-computer-programming/20181210_163414-e1544459922771.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Graham Lee"
        ],
        "publish_date": "2019-01-07T07:01:33",
        "summary": "",
        "meta_description": "A quote from the cover of Volume One of Professor Donald Knuthâs Magnum Opus, The Art of Computer Programming (3rd edition): If you think youâre a really good â¦",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "De Programmatica Ipsum",
        "canonical_link": "https://deprogrammaticaipsum.com/the-art-of-the-art-of-computer-programming/",
        "text": "A quote from the cover of Volume One of Professor Donald Knuthâs Magnum Opus, The Art of Computer Programming (3rd edition):\n\nIf you think youâre a really good programmerâ¦ read (Knuthâs) Art of Computer Programmingâ¦ You should definitely send me a rÃ©sumÃ© if you can read the whole thing.\n\nâMeâ here refers to the author of the quote, Bill Gates. This book (TAOCP hereafter) is a defining work in our field. The reason Gates would like your rÃ©sumÃ© is that the reason most of us bought our copies in the 1990s was twofold:\n\nWe wanted to look like the sort of people who had read TAOCP; and\n\nThey were handy for raising heavy Cathode Ray Tube monitors on our desks.\n\nGotta Catch âem All\n\nBill Gates has never received a rÃ©sumÃ© from anyone who read all of TAOCP. Thereâs an urban legend (now sadly debunked) that Steve Jobs told Knuth he had âread all of his booksâ, to which Knuth replied âyou are full of crapâ.\n\nWhile that tale is not true, nobody including Steve Jobs can say that they have read all of TAOCP. The reason is simple: it isnât finished yet. I foolishly bought my copy of volumes 1-4A while abroad at Appleâs WorldWide Developer Conference, and had to travel back to the UK with it in my case. There are six fascicles available that comprise volumes 4A-4B. The predicted scope includes more sub-volumes 4, then volumes 5-7.\n\nAs all of volumes 4B-7 are somewhere between partially and completely incomplete, nobody has read all of TAOCP, Donald Ervin Knuth included. Therefore Gates has never received such a rÃ©sumÃ©.\n\nThe Art Of Yak Shaving\n\nSome of the reason it has taken so long to produce the seven volumes is that Knuth is the master, maybe even the patron saint, of yak shaving.\n\nIn the Jargon File, Yak Shaving is a task you complete so that you can complete a task so thatâ¦\n\nWhile reviewing an updated edition of TAOCP, Knuth saw that the pages were decidedly lower quality than the earlier edition. His printers had changed from a hot metal typesetting process to a computerised process to lay out text on the page, and it did not produce good results. Knuth felt that TAOCP needed to look and feel like a higher quality book.\n\nHe stopped working directly on TAOCP to create TeX, a text layout system based on virtual boxes and glue. To make families of related-looking fonts, so that italic text rendered in TeX looks similar to fixed-width typewriter text, roman text and other styles, he created METAFONT, a programming language for generating fonts from descriptions.\n\nMeanwhile, he wanted to be able to describe his programs both for the machine to run, and for people to understand. So Knuth made Web, a Literate Programming tool that could âtangleâ source into a Pascal program for the computer and âweaveâ it into a TeX document for a reader.\n\nSo Web allowed him to make TeX and METAFONT (and the five-volume Computers and Typesetting collection). TeX and METAFONT allowed Knuth to get back to TAOCP.\n\nSir MMIX-a-Lot\n\nMeanwhile, the world of computing had not stood still. The original volumes 1-4A described algorithms implemented in an assembly language called MIXAL, targeting the hypothetical MIX computer. MIX contains features no longer found in popular computer architectures. Memory can be accessed as six-bit bytes, either in binary or decimal. Bytes are grouped into five-byte words, which each has an external sign bit. Dedicated device I/O instructions provide access to paper and magnetic tapes, a card punch, a card reader, and similar technology.\n\nTo reflect more recent advances in computing hardware, Knuth produced the MMIX architecture in collaboration with designers of the MIPS (John L. Hennessy) and Alpha (Richard L. Sites) CPUs. MMIX is a 64-bit RISC architecture with lots of general-purpose registers, and IEEE 754 floating-point arithmetic. MMIX was published in Volume 1 Fascicle 1 of TAOCP in 2005. Most of the rest of the book still uses MIXAL source code. But here we encounter another hairy yak: will Knuth press ahead with writing volumes 4B-7, or will he re-implement the volumes 1-4A algorithms in MMIXAL?\n\nFurther yaks: should Knuth move on to volume 4B or 5, he will find things that should have been in volumes 1-3 but did not exist when they were written. He is one man, trying to capture developments (the state of The Art, even) of a whole industry of commercial practitioners and academics. Like Lewis Carrollâs red queen, he must run in order to stand still.\n\nSo Is It Art?\n\nTAOCP is definitely a work of art. Knuth has taken a great deal of care over the content, its preparation and its presentation. He continues to do so. The descriptions of algorithms in the book are clear: I have re-implemented a few of the algorithms where application performance required it. I found the discussions easy to understand and follow, so that rather than translate the MIXAL into C or some other language I was able to write my own implementation that followed the text.\n\nThere are many books that have been more useful in my career: NeXTâs developer documentation, Larry Wallâs âcamel bookâ, and Aaron Hillegassâs Cocoa Programming for Mac OS X have all taught me more immediately useful knowledge on making software. But TAOCP occupies a special place as a book that is worth reading for the pleasure of reading it, a rare creature in the realm of software documentation.\n\nMy shelf of such books would be fairly small. Alongside TAOCP would be found The Structure and Interpretation of Computer Programs, Numerical Recipes, The Art of the Metaobject Protocol and Object-Oriented Software Construction. Maybe I could identify a handful of others. Perhaps others (including you?) will suggest a few more. I do not believe that I will be stretching Vitsoeâs logistics to find shelving for all of the works of art in computing writing.\n\nAnd Is It Science?\n\nMany would say that TAOCP is indeed a book on science. American Scientist describes it as one of the best monographs on physical science. Knuth has been elected to the National Academy of Sciences and to equivalent bodies in France, the UK, and possibly elsewhere.\n\nIs it sufficient to say âpeople call this book a science monograph, and say the author is a scientist, therefore this book is about scienceâ? Is computer programming a scientific discipline? For that matter, is computer science a science?\n\nThe Origins Of Computer Science\n\nThe phrase âcomputer scienceâ has been used by academics since at least the 1960s (Cambridge Universityâs 1953 program was in âNumerical Analysis and Automatic Computingâ), and was popularised by the Association of Computing Machinery in its curriculum recommendation. In effect this was a political move. âComputer scienceâ can be seen to lend a gravity to the discipline that more abstract words like âInformaticsâ did not imply.\n\nUncharitable readers may note that âpolitical scienceâ and âmanagement scienceâ also seem to attach themselves to the intellectual heft of science. However, in the case of computer science, there is some additional support. Computer science is not so much the science of computers but the science of information. Computers themselves are the products of semiconductor physics and electronic engineering.\n\nBut computers are not about band gaps or voltage levels. When we use a computer, we do not use it so that we can induce free electrons in lumps of silicon. Computers are tools for information processing. Computers thus are the experimental labs in which information science is performed. Leibnizâs binary logic and Booleâs binary algebra give us language and philosophy with which to consider any problem. Computers are tools to let us express and manipulate those problems.\n\nTAOCP is a book about algorithms in binary logic. It is a book about the applications and characteristics of the philosophy and logic to the real-world situations and problems we are modelling. It is very much about science.\n\nImage credit: authorâs own.\n\nContinue reading A Brief History Of Programming Artists or go back to Issue 004: Programming, Art Or Science?. Did you like this article? Consider subscribing to our newsletter or contributing to the sustainability of this magazine. Thanks!"
    }
}