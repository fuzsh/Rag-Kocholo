{
    "id": "yago_19690_1",
    "rank": 70,
    "data": {
        "url": "https://blog.y2kbugger.com/reading-taocp-mmix.html",
        "read_more_link": "",
        "language": "en",
        "title": "Working on TAOCP in RISC",
        "top_image": "https://blog.y2kbugger.com/favicon.ico",
        "meta_img": "https://blog.y2kbugger.com/favicon.ico",
        "images": [
            "https://lh3.googleusercontent.com/pw/ACtC-3dZJEyHJN3-FqVljZiFt0SZ5xelIGeV8Ka7eKH78bwV-mQAm2_NQiqMboKonLEBfBAXn8PrzqoL7iN9vLy6aO6MQsxkDehaCUxfTxm_DgSCn0ek6oZ4aG4OHat6BY51Y7X4eSBsvUbvi787atMXXAZzzw=w400-h160-no?authuser=0",
            "https://blog.y2kbugger.com/theme/feed.svg",
            "https://lh3.googleusercontent.com/pw/ACtC-3fz2RxP2aYWm20KIl9hU_BkQcyTNxSmewF-0TM7KLe2BbVwUsml4DmX7kgHf4E8vARaOSQFJ-d1zou3FMoD4hjaX8q3jSFcKZwty559C8BiomechHmEW7gwmIBd8kJvi0u4Zqx0I6UDlA65QuBUX_CEdQ=w500-h431-no",
            "https://lh3.googleusercontent.com/pw/ACtC-3cmwaXo3THz54nq3bz9bWJ9N3hK5zfHL9o4JAsdri5mZ7AgP4LPpilaSkxatNxccRDbxKgZ65jDB08Akq1UMV1nGGqktUrq8uXJFhs9ODgtUQ1wT6SAapWlK5zTWLP-tliFKDBuARvEVYmHnRilf89CsQ=w572-h85-no",
            "https://lh3.googleusercontent.com/pw/ACtC-3fRUt39VqJiEOQ9LhFcwVrsuth55pRA44lyfN51vxoNG0v0DshXSPqc5SdCtLdAnCWPOfLaP-KS5iDdApF0YKfAM8SBZmgyI61tLobpe8lVmxjGyNFkdrOpxaOD4cpvrJddWkV7lvJAUvmMONAoJF6dtg=w683-h131-no",
            "https://lh3.googleusercontent.com/pw/ACtC-3cuRVuJCUSUugDBBPjEjvV-g4h9rh4NuHipmWhjvJbgS3zKZGBYrkea6kFi6MYL6-gC-mmhqHvCIB6FMcG6fHf_wzLQ3FSggliRMHXReoaJXcB4XEkEYYUFVJ-tzUwnb0Htv9v26hcMSSMf6vrfC46HXQ=w683-h459-no",
            "https://lh3.googleusercontent.com/pw/ACtC-3dsG1EowkXAZFHTN5U6GoiV7aHLiLZj4qS4T-LL4_G7bSkTLQFbru0xIrfOSHiVYxg3UDcSqjI3_DC0HQvAiMNwwaaUBNkcFkEqL0Zx5m11fvY5ctohhCmg8e60Y_SAX8k1jyvou9g_R2JqBcRycjhmbg=w509-h678-no",
            "https://blog.y2kbugger.com/theme/feed.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "zak kohler"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "The Art Of Computer Programming\n\nThe Art of Computer Programming is a legendary multi-volume computer science textbook. It was originally conceived in 1962 as a 12 chapter book documenting a wide range of algorithms. The rapid pace of change in computer science made these chapters a moving target; while Volume 1 was released in 1968, Volume 4 is still in progress as of 2020 .\n\nThe book is notable for being comprehensive and precise as well as for the extreme care given to the exercises and solutions. Because it's known for being a huge undertaking, some people quip that the book is often recommended without actually having been read. I suspect this is because the algorithms are explained using assembly language rather than structured programming which some people deem as impenetrably obscure.\n\nWhy I want to read it\n\nI believe it when Knuth says that you learn something extra about algorithms at the interface of hardware and software. In C for example you may not know what is happening in hardware when you write an if statement, but in assembly this is in-your-face.\n\nHe puts it like this:\n\nOne of the principal goals of my books is to show how high-level constructions are actually implemented in machines, not simply to show how they are applied.\n\nThis aligns with my goal of exploring computers to the lowest levels including operating systems as well as CPUs. The more I can understand the software-hardware interface, the happier I will be. Learning algorithms via TAOCP is the software side of my strategy. On the hardware side I'm exploring TTL logic, CPU design, and simple cases of systems integration using vintage microprocessors such as z80, 6502 and 1802. This has also led me to explore prototyping via FPGAs and one day I hope to design a CPU core and bootstrap up to a self-hosting multitasking development environment.\n\nMIX\n\nIn order to facilitate the teaching of algorithms and how they interact with hardware, Knuth developed a CPU architecture and corresponding assembly language.\n\nMIX is a hypothetical computer used in Donald Knuth's monograph, The Art of Computer Programming (TAOCP). MIX's model number is 1009, which was derived by combining the model numbers and names of several contemporaneous, commercial machines deemed significant by the author. Also, \"MIX\" read as a Roman numeral is 1009.\n\nâ€”Wikipedia\n\nKnuth states that \"MIX is very much like nearly every computer of the 1960s and 1970s except that it is, perhaps, nicer.\"\n\nSubsequent editions, fascicles\n\nSo we've chosen to explore MMIX, the forward looking ISA of TAOCP, now what? The dilemma we face is that the next edition has not been released yet. The most recent edition, V1 3e, has all of the questions and answers still written with MIX.\n\nSo what choice do we have then? Well Donald has kindly release what is known as V1F1 or The Art of Computer Programming, Volume 1, Fasicle 1 -- A RISC Computer for the New Millennium. A fascicle is a \"a separately published installment of a book or other printed work.\" Basically it acts as a patch for V1 3e. Replacing the chapter explaining MIX with the MMIX equivalent. It is available on Amazon. Fun note, these are printed on demand when you place your order.\n\nThat covers the basics of the language, but all of the solutions also needed reworked. Knuth put out a request for people to collaborate on the solutions, a project he called MMIXMasters . The end result of this is known as the MMIX supplement. It's available on the web, http://mmix.cs.hm.edu/supplement/index.html as well as in printed form on Amazon: MMIX Supplement."
    }
}