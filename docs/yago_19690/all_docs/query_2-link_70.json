{
    "id": "yago_19690_2",
    "rank": 70,
    "data": {
        "url": "https://forums.parallax.com/discussion/155332/thoughts-on-propeller-from-arduino-side/p3",
        "read_more_link": "",
        "language": "en",
        "title": "Thoughts on propeller from arduino side - Page 3",
        "top_image": "https://forums.parallax.com/resources/emoji/lol.png",
        "meta_img": "https://forums.parallax.com/resources/emoji/lol.png",
        "images": [
            "https://forums.parallax.com/uploads/220c16115e745d4837398f6458962ff6.png",
            "https://forums.parallax.com/uploads/220c16115e745d4837398f6458962ff6.png",
            "https://forums.parallax.com/uploads/9a0285a64721b365981028a8f0965473.png",
            "https://forums.parallax.com/uploads/userpics/387/nVQNUHBMLQ4KU.jpg",
            "https://forums.parallax.com/resources/emoji/lol.png",
            "https://w1.vanillicon.com/v2/17072ebe529c4bc8ea4dc7c72ee7bda3.svg",
            "https://forums.parallax.com/resources/emoji/lol.png",
            "https://forums.parallax.com/uploads/userpics/387/nVQNUHBMLQ4KU.jpg",
            "https://w1.vanillicon.com/v2/17072ebe529c4bc8ea4dc7c72ee7bda3.svg",
            "https://w2.vanillicon.com/v2/24a4b36a923f4f143f914ea6fd45ed17.svg",
            "https://w1.vanillicon.com/v2/17072ebe529c4bc8ea4dc7c72ee7bda3.svg",
            "https://forums.parallax.com/uploads/userpics/387/nVQNUHBMLQ4KU.jpg",
            "https://w9.vanillicon.com/v2/9d02421f56ebc2772c4eb0e633688c80.svg",
            "https://forums.parallax.com/uploads/userpics/847/n3Q4CKNE6B60L.png",
            "https://forums.parallax.com/resources/emoji/smile.png",
            "https://w2.vanillicon.com/v2/24a4b36a923f4f143f914ea6fd45ed17.svg",
            "https://forums.parallax.com/uploads/userpics/847/n3Q4CKNE6B60L.png",
            "https://w2.vanillicon.com/v2/24a4b36a923f4f143f914ea6fd45ed17.svg",
            "https://forums.parallax.com/uploads/userpics/716/nOW311AS6D84P.jpg",
            "https://w2.vanillicon.com/v2/24a4b36a923f4f143f914ea6fd45ed17.svg",
            "https://forums.parallax.com/uploads/userpics/847/n3Q4CKNE6B60L.png",
            "https://forums.parallax.com/uploads/userpics/847/n3Q4CKNE6B60L.png",
            "https://forums.parallax.com/uploads/userpics/035/nJPU0EF20AFBB.png",
            "https://forums.parallax.com/uploads/userpics/847/n3Q4CKNE6B60L.png",
            "https://forums.parallax.com/uploads/userpics/847/n3Q4CKNE6B60L.png",
            "https://forums.parallax.com/uploads/userpics/069/n43VUZJQK3PUG.jpg",
            "https://forums.parallax.com/uploads/userpics/069/n43VUZJQK3PUG.jpg",
            "https://w1.vanillicon.com/v2/17072ebe529c4bc8ea4dc7c72ee7bda3.svg",
            "https://forums.parallax.com/uploads/userpics/069/n43VUZJQK3PUG.jpg",
            "https://w1.vanillicon.com/v2/17072ebe529c4bc8ea4dc7c72ee7bda3.svg",
            "https://forums.parallax.com/uploads/userpics/069/n43VUZJQK3PUG.jpg",
            "https://forums.parallax.com/resources/emoji/smile.png",
            "https://forums.parallax.com/uploads/userpics/893/nN1UDRLBNVC24.jpg",
            "https://forums.parallax.com/uploads/userpics/025/nC57NMH1BTW54.gif",
            "https://forums.parallax.com/plugins/FileUpload/images/file.png",
            "https://forums.parallax.com/plugins/FileUpload/images/file.png",
            "https://forums.parallax.com/uploads/userpics/069/n43VUZJQK3PUG.jpg",
            "https://forums.parallax.com/uploads/userpics/981/nDK0TDOLYO3O6.jpg",
            "https://w9.vanillicon.com/v2/9d02421f56ebc2772c4eb0e633688c80.svg",
            "https://www.parallax.com/wp-content/uploads/2020/11/p1-hub-ram-interface.gif",
            "https://www.parallax.com/wp-content/uploads/2020/11/p2-hub-ram-interface.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Franklin",
            "Brian Fairchild",
            "David Betz"
        ],
        "publish_date": "2014-04-21T16:03:44",
        "summary": "",
        "meta_description": "Still bugged that I refused to join your PropGCC team then? :lol: Ross.",
        "meta_lang": "en",
        "meta_favicon": "https://forums.parallax.com/uploads/favicon_2156262224cce4561785065776bb1353.ico",
        "meta_site_name": "Parallax Forums",
        "canonical_link": "https://forums.parallax.com/discussion/155332/thoughts-on-propeller-from-arduino-side/p3",
        "text": "Well, I suppose I could be convinced of its utility if there were enough real-world examples, and adding it is fairly easy, so I may do it. But I've looked through all the objects I routinely use, and I can find only two or three (out of dozens) that could possibly be re-coded in C, and even then the result would simply be larger executable sizes and slower objects.\n\nI can't see any actual benefit.\n\nRoss.\n\nOk. I've just written a code generator for Catalina that generates COG mode C - i.e. C code compiled to execute stand-alone within a single cog, including the stack and all variables. Seems to work for simple C code, but obviously it will need more testing.\n\nThis first cut supports only 32 bit integer types. I could add 8 bit types if anyone thought they would be useful, but I doubt I would bother with 16 bit types. Also, there is currently no library or plugin support, so COG mode will really only be useful for writing low-level stand-alone cog objects (such as a driver). Of course, those cog objects can be used by Catalina, but they will not themselves be able to make use of any other Catalina facilities.\n\nI may add this to the next release of Catalina if I get time. Since COG code requires no support from any other part of Catalina, if I do add it I'll arrange to make it possible to spit out the output as a simple binary \"blob\", much the same way the spinc utility currenty does - these \"blobs\" can then be used from any language.\n\nNot sure exactly when the next release of Catalina will be - I'm currently in the middle of re-plumbing Catalina's internals to make it possible to support the P16X32B, and I'm also testing a version of the graphics library that works in ALL memory modes (currently it works only in COMPACT, TINY and SMALL modes - LARGE mode was broken).\n\nRoss.\n\nRamon,\n\nThe merging of propgcc code back to the main line GCC project is not really of any concern or benefit to us the propgcc users at this point. We can just use the propgcc releases or build it ourselves from the source repository.\n\nIt becomes a concern in the long term when we would like to see GCC support the Propeller well into the future, perhaps after all the current propgcc team has moved on to other more interesting things.\n\nI imagine this all depends on the GCC maintainers accepting propgcc changes back into their code base. They may not want even want to unless the Propeller becomes a lot more widely adopted.\n\nI can't imagine the GCC team has any interest in adopting support for a chip that does not exist yet.\n\nI'm confident that a propgcc supporting the P2 will emerge well before the actual P2 goes into production. Especially if Chip can promise to stop messing with the instruction set soon.\n\nThere should be nothing amazing about that.\n\nI'm not saying one is better than the other. I am sharing what impacts me and how I see things. Sometimes why.\n\nSPIN does not require a person to know or track as many things to author programs. Additionally, it's one with PASM. Finally, it's simple nature, lack of type checks, and many nice ways to express data make building projects simple, productive. Yes, one can get into trouble with those things, but hey. One can just get into trouble no matter what. Non issue for me.\n\nI particularly like all of the options SPIN has in the DAT section for how data is represented. It's easy to read, very expressive in that way, and I never did like the whole 0x thing.\n\nIn SPIN we get all kinds of stuff! Just type it in, label it, specify an alignment if desired and go! I really like that. Probably my favorite feature, mostly because I can input data, literals, whatever in basically the form I'm thinking about it in, conversions optional nearly all the time. Second favorite feature is all the nice operators, shifts, assignments, booleans, and so on, making for concise expressions that do a lot, and that do them in mostly the same way one would do them in PASM, though that's not required at all. Can improve speed when well understood and applied.\n\nI have to do extra stuff in C in these areas that I don't have to do in SPIN. And then again, with higher level constructs, there are things one has to do, or just can't do or must hack in SPIN, one can do easily in C. I don't care about these differences. What I do care is that we have the options so that when tasks come up or make sense, people can get tools that they find optimal without having to worry about the politics of it all.\n\nAnd of course SPIN is missing a ton of stuff! Maybe we can add some of those things and improve it for larger projects. Of course, we may also get simple inline PASM too, which will be awesome!\n\nIMHO, it's much better to understand why we are doing what we are doing, and have options for those things. The way I see it, we should maximize SPIN+PASM for the things it does well. And we should maximize C for the things it does well.\n\nFrom there, people do what they do, no worries, until there are. And at that point, people seek better options. There isn't one unified \"best\" and there never will be. so why worry about it at all? Maximize stuff, do things, worry less.\n\nYep.\n\nI think we will see this continue to improve as the tools do. And I say improve because the C tools are good now. I'm happy with the state of things now and will be contributing IN C, SPIN and PASM on the new chip. Looking forward to it.\n\nFor me currently, I have some mentoring in progress that I don't share here, and some projects that do not contain generally sharable things.\n\nOthers have their reasons too.\n\nLook at what Roy might bring to the table, and Ross just added COG code. Not that those two are special, just came to mind on this discussion. SRLM has made some good ones, and you have your own too.\n\nWhen we get to building a PropGCC on the new chip, I'll have some things to do there as well. (thank you for tagging me for contributor access)\n\nThis time around on our language wheel of pain and punishment, I thought just framing it as options makes more sense. There is some history and it's gonna be there, but we can always add options. Maybe just doing that for a while will improve things over all."
    }
}