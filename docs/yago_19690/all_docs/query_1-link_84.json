{
    "id": "yago_19690_1",
    "rank": 84,
    "data": {
        "url": "https://swuecho.fandom.com/wiki/The_Art_of_Computer_Programming",
        "read_more_link": "",
        "language": "en",
        "title": "The Art of Computer Programming",
        "top_image": "https://static.wikia.nocookie.net/ucp-internal-test-starter-commons/images/a/aa/FandomFireLogo.png/revision/latest?cb=20210713142711",
        "meta_img": "https://static.wikia.nocookie.net/ucp-internal-test-starter-commons/images/a/aa/FandomFireLogo.png/revision/latest?cb=20210713142711",
        "images": [
            "https://static.wikia.nocookie.net/ff185fe4-8356-4b6b-ad48-621b95a82a1d",
            "https://static.wikia.nocookie.net/f3fc9271-3d5e-4c73-9afc-e6a9f6154ff1",
            "https://static.wikia.nocookie.net/464fc70a-5090-490b-b47e-0759e89c263f",
            "https://static.wikia.nocookie.net/f7bb9d33-4f9a-4faa-88fe-2a0bd8138668"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Swuecho Wiki"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "The Art of Computer Programming (acronym: TAOCP) is a comprehensive monograph written by Donald Knuth that covers many kinds of programming algorithms and their analysis. Knuth began the project, originally conceived as a single book, in 1962. The first three of what were then expected to be...",
        "meta_lang": "en",
        "meta_favicon": "/skins-ucp/mw139/common/favicon.ico",
        "meta_site_name": "Swuecho Wiki",
        "canonical_link": "https://swuecho.fandom.com/wiki/The_Art_of_Computer_Programming",
        "text": "No Title [[The cover of the third edition of volume 1|250px]]\n\n'\n\nNo Title\n\nNo information\n\nThe Art of Computer Programming (acronym: TAOCP) is a comprehensive monograph written by Donald Knuth that covers many kinds of programming algorithms and their analysis.\n\nKnuth began the project, originally conceived as a single book, in 1962. The first three of what were then expected to be seven volumes were published in rapid succession in 1968, 1969, and 1973. The first installment of Volume 4 (a paperback fascicle) was published in 2005. The hardback volume 4A was published in 2010. Additional fascicle installments are planned for release approximately biannually.\n\nHistory[]\n\nConsidered an expert at writing compilers, Knuth started to write a book about compiler design in 1962, and soon realized that the scope of the book needed to be much larger. In June 1965, Knuth finished the first draft of what was originally planned to be a single volume of twelve chapters. His hand-written first-draft manuscript (completed in 1966) was 3,000 pages long: he had assumed that about five hand-written pages would translate into one printed page, but his publisher said instead that about 1½ hand-written pages translated to one printed page. This meant the book would be approximately 2,000 pages in length. At this point, the plan was changed: the book would be published in seven volumes, each with just one or two chapters. Due to the growth in the material, the plan for Volume 4 has since expanded to include Volumes 4A, 4B, 4C, and possibly more.\n\nIn 1976, Knuth prepared a second edition of Volume 2, requiring it to be typeset again, but the style of type used in the first edition (called hot type) was no longer available. In 1977, he decided to spend a few months working up something more suitable. Eight years later, he returned with TeX, which is currently used for all volumes.\n\nThe famous offer of a reward check worth \"one hexadecimal dollar\" (100HEX base 16 cents, in decimal, is $2.56) for any errors found, and the correction of these errors in subsequent printings, has contributed to the highly polished and still-authoritative nature of the work, long after its first publication. Another characteristic of the volumes is the variation in the difficulty of the exercises. The level of difficulty ranges from \"warm-up\" exercises to unsolved research problems, providing a challenge for any reader. Knuth's dedication is also famous:\n\nThis series of books is affectionately dedicated\n\nto the Type 650 computer once installed at\n\nCase Institute of Technology,\n\nwith whom I have spent many pleasant evenings.[nb 1]\n\nAssembly language in the book[]\n\nAll examples in the books use a language called \"MIX assembly language\", which runs on the hypothetical MIX computer. (Currently, the MIX computer is being replaced by the MMIX computer, which is a RISC version.) Software such as GNU MDK exists to provide emulation of the MIX architecture.\n\nSome readers are put off by the use of assembly language, but Knuth considers this necessary because algorithms need to be in context in order for their speed and memory usage to be judged. This does, however, limit the accessibility of the book for many readers, and limits its usefulness as a \"cookbook\" for practicing programmers, who may not be familiar with assembly, or who may have no particular desire to translate assembly language code into a high-level language. A number of more accessible algorithms textbooks using high-level language examples exist and are popular for precisely these reasons.\n\nCritical response[]\n\nAmerican Scientist has included this work among \"100 or so Books that shaped a Century of Science\", referring to the 20th century,[1] and within the computer science community it is regarded as the first and still the best comprehensive treatment of its subject. Covers of the third edition of Volume 1 quote Bill Gates as saying, \"If you think you're a really good programmer . . . read (Knuth's) Art of Computer Programming . . . You should definitely send me a résumé if you can read the whole thing.\" [nb 2] The New York Times referred to it as \"the profession's defining treatise\".[2]\n\nChapter outline of published and unpublished volumes[]\n\nVolume 1 - Fundamental Algorithms\n\nChapter 1 - Basic concepts\n\nChapter 2 - Information structures\n\nVolume 2 - Seminumerical Algorithms\n\nChapter 3 - Random numbers\n\nChapter 4 - Arithmetic\n\nVolume 3 - Sorting and Searching\n\nChapter 5 - Sorting\n\nChapter 6 - Searching\n\nVolume 4 - Combinatorial Algorithms\n\nVolume 4A - Enumeration and Backtracking\n\nChapter 7 - Combinatorial searching\n\nVolume 4B - Graph and Network Algorithms, in preparation\n\nChapter 7 continued\n\nVolume 4C and possibly 4D - Optimization and Recursion, in preparation\n\nChapter 7 continued\n\nChapter 8 - Recursion\n\nVolume 5 - Syntactic Algorithms, planned (as of 2011, estimated in 2020).\n\nChapter 9 - Lexical scanning\n\nChapter 10 - Parsing techniques (includes also string search and data compression)\n\nVolume 6 - Theory of Context-Free Languages, planned.\n\nVolume 7 - Compiler Techniques, planned.\n\nSubvolume 4A[]\n\n7 - Introduction\n\n7.1 - Zeros and ones\n\n7.1.1 - Boolean basics\n\n7.1.2 - Boolean evaluation\n\n7.1.3 - Bitwise tricks and techniques\n\n7.1.4 - Binary decision diagrams\n\n7.2 - Generating all possibilities\n\n7.2.1 - Generating basic combinatorial patterns\n\n7.2.1.1 - Generating all n-tuples\n\n7.2.1.2 - Generating all permutations\n\n7.2.1.3 - Generating all combinations\n\n7.2.1.4 - Generating all partitions\n\n7.2.1.5 - Generating all set partitions\n\n7.2.1.6 - Generating all trees\n\n7.2.1.7 - History and further references\n\nDetailed outline of unpublished sections[]\n\nSubvolume 4B Graph and Network Algorithms[]\n\n7.2 - Generating all possibilities (Cont)\n\n7.2.2 - Basic backtrack\n\n7.2.3 - Efficient backtracking\n\n7.3 - Shortest paths\n\n7.4 - Graph algorithms\n\n7.4.1 - Components and traversal\n\n7.4.2 - Special classes of graphs\n\n7.4.3 - Expander graphs\n\n7.4.4 - Random graphs\n\n7.5 - Network algorithms\n\n7.5.1 - Distinct representatives\n\n7.5.2 - The assignment problem\n\n7.5.3 - Network flows\n\n7.5.4 - Optimum subtrees\n\n7.5.5 - Optimum matching\n\n7.5.6 - Optimum orderings\n\n7.6 - Independence theory\n\n7.6.1 - Independence structures\n\n7.6.2 - Efficient matroid algorithms\n\nSubvolumes 4C and 4D Optimization and Recursion[]\n\n7.7 - Discrete dynamic programming\n\n7.8 - Branch-and-bound techniques\n\n7.9 - Herculean tasks (aka NP-hard problems)\n\n7.10 - Near-optimization\n\n8 - Recursion\n\nEnglish editions[]\n\nCurrent editions[]\n\nIn order by volume number:\n\nVolume 1: Fundamental Algorithms. Third Edition (Reading, Massachusetts: Addison-Wesley, 1997), xx+650pp. ISBN 0-201-89683-4\n\nVolume 1, Fascicle 1: MMIX -- A RISC Computer for the New Millennium. (Addison-Wesley, February 14, 2005) ISBN 0-201-85392-2 (will be in the fourth edition of volume 1)\n\nVolume 2: Seminumerical Algorithms. Third Edition (Reading, Massachusetts: Addison-Wesley, 1997), xiv+762pp. ISBN 0-201-89684-2\n\nVolume 3: Sorting and Searching. Second Edition (Reading, Massachusetts: Addison-Wesley, 1998), xiv+780pp.+foldout. ISBN 0-201-89685-0\n\nVolume 4A: Combinatorial Algorithms, Part 1. First Edition (Reading, Massachusetts: Addison-Wesley, 2011), xv+883pp. ISBN 0-201-03804-8\n\nPrevious editions[]\n\nIn order by publication date:\n\nVolume 1, first edition, 1968, xxi+634pp, ISBN 0-201-03801-3.\n\nVolume 2, first edition, 1969, xi+624pp, ISBN 0-201-03802-1.\n\nVolume 3, first edition, 1973, xi+723pp+centerfold, ISBN 0-201-03803-X\n\nVolume 1, second edition, 1973, xxi+634pp, ISBN 0-201-03809-9.\n\nVolume 2, second edition, 1981, xiii+ 688pp, ISBN 0-201-03822-6.\n\nVolume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions, (Addison-Wesley Professional, April 28, 2008) vi+240pp, ISBN 0-321-53496-4\n\nVolume 4, Fascicle 1: Bitwise tricks & techniques; Binary Decision Diagrams (Addison-Wesley Professional, March 27, 2009) viii+260pp, ISBN 0-321-58050-8\n\nVolume 4, Fascicle 2: Generating All Tuples and Permutations, (Addison-Wesley, February 14, 2005) v+127pp, ISBN 0-201-85393-0\n\nVolume 4, Fascicle 3: Generating All Combinations and Partitions. (Addison-Wesley, July 26, 2005) vi+150pp, ISBN 0-201-85394-9\n\nVolume 4, Fascicle 4: Generating all Trees – History of Combinatorial Generation, (Addison-Wesley, February 6, 2006) vi+120pp, ISBN 0-321-33570-8\n\nNotes[]\n\n↑ The dedication was worded slightly differently in the first edition.\n\n↑ According to folklore.org, Steve Jobs actually made the incredible claim. [1]\n\n[]\n\nReferences[]\n\n[]\n\nOverview of topics (Knuth's personal homepage)\n\nOral history interview with Donald E. Knuth at Charles Babbage Institute, University of Minnesota, Minneapolis. Knuth discusses software patenting, structured programming, collaboration and his development of TeX. The oral history discusses the writing of The Art of Computer Programming.\n\n\"Robert W Floyd, In Memoriam\", by Donald E. Knuth -(on the influence of Bob Floyd)\n\nWho is Bill Gosper? (on the influence of Bill Gosper on the 2nd Edition of Volume 2.)\n\nTAoCP and its Influence of Computer Science(Softpanorama)"
    }
}