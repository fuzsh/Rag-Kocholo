{
    "id": "yago_3735_1",
    "rank": 82,
    "data": {
        "url": "http://trevorjim.com/lisp-and-c/",
        "read_more_link": "",
        "language": "en",
        "title": "Lisp and C",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "John McCarthy and Dennis Ritchie passed away late last year within a couple of weeks of each other. They created two of my favorite programming languages: Lisp (McCarthy) and C (Ritchie).\n\nLisp is the most historically important programming language. It introduced three revolutionary features: automatic memory management (via garbage collection), the bundling of code and data (via first-class functions), and memory safety (e.g., no buffer overflows). I doubt that any widely-used programming language going forward will be introduced without these three features, and Lisp had them in 1959.\n\nOf the three, automatic memory management is the killer feature; it makes the other two much easier to implement. It is a good example of a technology so far ahead of its time that it was not generally accepted until four decades after its invention (with the emergence of Java). As late as 1988, when I worked at Bell Labs on Standard ML of New Jersey, the folks in the Unix room (Ritchie et al.) thought that a language with garbage collection was a toy at best.\n\nLisp has many incarnations: Java, Python, Ruby, Scala, C#, and so on all have automatic memory management and hence are clearly in the Lisp camp, regardless of their surface syntax. Javascript, now the most widely deployed language in the world, is hardly distinguishable from Lisp at all."
    }
}