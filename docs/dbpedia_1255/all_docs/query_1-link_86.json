{
    "id": "dbpedia_1255_1",
    "rank": 86,
    "data": {
        "url": "https://www.npmjs.com/package/node-media-server",
        "read_more_link": "",
        "language": "en",
        "title": "node-media-server",
        "top_image": "https://static-production.npmjs.com/338e4905a2684ca96e08c7780fc68412.png",
        "meta_img": "https://static-production.npmjs.com/338e4905a2684ca96e08c7780fc68412.png",
        "images": [
            "https://static-production.npmjs.com/6d9930e83bbb43bba93e22eda2871b55.svg",
            "https://camo.githubusercontent.com/b156dbd0f44dbb3ab9f381beb676a0ab39255f67ae847d628aef260fd15b9395/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f6e6f64652d6d656469612d7365727665722e737667",
            "https://camo.githubusercontent.com/1db8e3bd4ba5e11f566e7172734b2fa8866ef6914ebd8456e40490cecd0754ec/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6e6f64652d6d656469612d7365727665722e737667",
            "https://camo.githubusercontent.com/0bd5b451cdfa9d9e40169e12611f05ede0cb881c1b79cfb88e4691acc60b2a24/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f6e6f64652d6d656469612d7365727665722e737667",
            "https://camo.githubusercontent.com/72fa9d14c81fad6bf6128ae0de560948e8536ae043b03e27ddd865ef856c80f0/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f6e6f64652d6d656469612d7365727665722e737667",
            "https://camo.githubusercontent.com/0593985ee597c57c34f92c2a8a94f036101b863aa47c6bcfbc382d10a93a894e/68747470733a2f2f6261646765732e6769747465722e696d2f496c6c75737061732f4e6f64652d4d656469612d5365727665722e737667",
            "https://raw.githubusercontent.com/illuspas/resources/master/img/admin_panel_dashboard.png",
            "https://raw.githubusercontent.com/illuspas/resources/master/img/admin_panel_streams_preview.png",
            "https://raw.githubusercontent.com/illuspas/resources/master/img/admin_panel_fission.png",
            "https://www.npmjs.com/npm-avatar/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdmF0YXJVUkwiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci9jNTcwNjdjYjU5YmFiNTZjNjViNDAzNmFkNDg3MTBhNz9zaXplPTEwMCZkZWZhdWx0PXJldHJvIn0.kEgEXrpEhtaUdG4ez876MUTJIlq-MtMpKzZ_mjYIDoc"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "rtmp",
            "flv",
            "server"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-23T01:45:48.484000+00:00",
        "summary": "",
        "meta_description": "A Node.js implementation of RTMP Server. Latest version: 2.7.0, last published: 3 months ago. Start using node-media-server in your project by running `npm i node-media-server`. There are 10 other projects in the npm registry using node-media-server.",
        "meta_lang": "en",
        "meta_favicon": "https://static-production.npmjs.com/58a19602036db1daee0d7863c94673a4.png",
        "meta_site_name": "npm",
        "canonical_link": "https://www.npmjs.com/package/node-media-server",
        "text": "A Node.js implementation of RTMP/HTTP-FLV/WS-FLV/HLS/DASH Media Server\n\nhttps://www.nodemedia.cn/product/node-media-server/\n\nhttps://github.com/illuspas/Node-Media-Server-Admin\n\nhttp://server_ip:8000/admin\n\nCross platform support Windows/Linux/Unix\n\nSupport H.264/AAC/MP3/SPEEX/NELLYMOSER/G.711\n\nExtension support H.265(flv_id=12)/OPUS(flv_id=13)\n\nSupport GOP cache\n\nSupport remux to LIVE-HTTP/WS-FLV, Support NodePlayer.js playback\n\nSupport remux to HLS/DASH/MP4\n\nSupport xycdn style authentication\n\nSupport event callback\n\nSupport https/wss\n\nSupport Server Monitor\n\nSupport Rtsp/Rtmp relay\n\nSupport api control relay\n\nSupport real-time multi-resolution transcoding\n\nSupport Enhancing RTMP, FLV (HEVC/AV1 encoding using OBS)\n\nnpx node-media-server\n\nnpm i node-media-server -g node-media-server\n\ndocker run --name nms -d -p 1935:1935 -p 8000:8000 -p 8443:8443 illuspas/node-media-server\n\nnode app.js\n\nIf you have a video file with H.264 video and AAC audio:\n\nffmpeg -re -i INPUT_FILE_NAME -c copy -f flv rtmp://localhost/live/STREAM_NAME\n\nOr if you have a video file that is encoded in other audio/video format:\n\nffmpeg -re -i INPUT_FILE_NAME -c:v libx264 -preset veryfast -tune zerolatency -c:a aac -ar 44100 -f flv rtmp://localhost/live/STREAM_NAME\n\nSettings -> Stream\n\nStream Type : Custom Streaming Server\n\nURL : rtmp://localhost/live\n\nStream key : STREAM_NAME?sign=expires-HashValue (sign parameter required only if publish auth is enabled)\n\nrtmp://localhost/live/STREAM_NAME\n\nhttp://localhost:8000/live/STREAM_NAME.flv\n\nws://localhost:8000/live/STREAM_NAME.flv\n\nhttp://localhost:8000/live/STREAM_NAME/index.m3u8\n\nhttp://localhost:8000/live/STREAM_NAME/index.mpd\n\nIt is now possible to modify the logging type which determines which console outputs are shown.\n\nThere are a total of 4 possible options:\n\n0 - Don't log anything\n\n1 - Log errors\n\n2 - Log errors and generic info\n\n3 - Log everything (debug)\n\nModifying the logging type is easy - just add a new value logType in the config and set it to a value between 0 and 4. By default, this is set to show errors and generic info internally (setting 2).\n\nFor custom log handling, see events for log message logMessage, errorMessage, debugMessage, and ffDebugMessage.\n\nThe logger events noted above are fired independently of the log level set by logType\n\nrtmp://hostname:port/appname/stream?sign=expires-HashValue\n\nhttp://hostname:port/appname/stream.flv?sign=expires-HashValue\n\nws://hostname:port/appname/stream.flv?sign=expires-HashValue\n\n1.Publish or play address:\n\nrtmp://192.168.0.10/live/stream\n\n2.Config set auth->secret: 'nodemedia2017privatekey'\n\n3.expiration time: 2017/8/23 11:25:21 ,The calculated expiration timestamp is\n\n1503458721\n\n4.The combination HashValue is:\n\nHashValue = md5(\"/live/stream-1503458721-nodemedia2017privatekeyâ)\n\nHashValue = 80c1d1ad2e0c2ab63eebb50eed64201a\n\n5.Final request address\n\nrtmp://192.168.0.10/live/stream?sign=1503458721-80c1d1ad2e0c2ab63eebb50eed64201a\n\nThe 'sign' keyword can not be modified\n\nPlay:NodeMediaClient-Android and NodeMediaClient-iOS\n\nCommercial Pure JavaScrip live stream player: NodePlayer.js\n\nOpenSource Pure JavaScrip live stream player: pro-flv.js\n\nOBS 29.1+\n\nOBS 29.1+\n\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem\n\nhttps://localhost:8443/live/STREAM_NAME.flv wss://localhost:8443/live/STREAM_NAME.flv\n\nIn the browser environment, Self-signed certificates need to be added with trust before they can be accessed.\n\nconst config = { ....... auth: { api : true, api_user: 'admin', api_pass: 'nms2018', }, ...... }\n\nBased on the basic authï¼Please change your password. The default is not turned on\n\nhttp://localhost:8000/api/server\n\nhttp://localhost:8000/api/streams\n\nRemux to RTMP cannot use the same app name\n\nNodeMediaServer implement RTSP and RTMP relay with ffmpeg.\n\nThe static pull mode is executed at service startup and reconnect after failure. It could be a live stream or a file. In theory, it is not limited to RTSP or RTMP protocol.\n\nrelay: { ffmpeg: '/usr/local/bin/ffmpeg', tasks: [ { app: 'cctv', mode: 'static', edge: 'rtsp://admin:admin888@192.168.0.149:554/ISAPI/streaming/channels/101', name: '0_149_101', rtsp_transport : 'tcp' //['udp', 'tcp', 'udp_multicast', 'http'] }, { app: 'iptv', mode: 'static', edge: 'rtmp://live.hkstv.hk.lxdns.com/live/hks', name: 'hks' }, { app: 'mv', mode: 'static', edge: '/Volumes/ExtData/Movies/Dancing.Queen-SD.mp4', name: 'dq' } ] }\n\nWhen the local server receives a play request. If the stream does not exist, pull the stream from the configured edge server to local. When the stream is not played by the client, it automatically disconnects.\n\nrelay: { ffmpeg: '/usr/local/bin/ffmpeg', tasks: [ { app: 'live', mode: 'pull', edge: 'rtmp://192.168.0.20', } ] }\n\nWhen the local server receives a publish request. Automatically push the stream to the edge server.\n\nrelay: { ffmpeg: '/usr/local/bin/ffmpeg', tasks: [ { app: 'live', mode: 'push', edge: 'rtmp://192.168.0.10', } ] }\n\nReal-time transcoding multi-resolution output\n\nfission: { ffmpeg: '/usr/local/bin/ffmpeg', tasks: [ { rule: \"game/*\", model: [ { ab: \"128k\", vb: \"1500k\", vs: \"1280x720\", vf: \"30\", }, { ab: \"96k\", vb: \"1000k\", vs: \"854x480\", vf: \"24\", }, { ab: \"96k\", vb: \"600k\", vs: \"640x360\", vf: \"20\", }, ] }, { rule: \"show/*\", model: [ { ab: \"128k\", vb: \"1500k\", vs: \"720x1280\", vf: \"30\", }, { ab: \"96k\", vb: \"1000k\", vs: \"480x854\", vf: \"24\", }, { ab: \"64k\", vb: \"600k\", vs: \"360x640\", vf: \"20\", }, ] }, ] }\n\nhttps://play.google.com/store/apps/details?id=cn.nodemedia.qlive\n\nhttps://github.com/NodeMedia/NodeMediaClient-Android\n\nhttps://github.com/NodeMedia/NodeMediaClient-iOS\n\nhttps://github.com/NodeMedia/react-native-nodemediaclient\n\nImplemented with asm.js / wasm\n\nhttp-flv/ws-flv\n\nH.264/H.265 + AAC/Nellymoser/G.711 decoder\n\nUltra low latency\n\nAll modern browsers are supported"
    }
}