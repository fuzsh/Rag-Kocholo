{
    "id": "dbpedia_8288_1",
    "rank": 28,
    "data": {
        "url": "https://www.techtarget.com/searchcloudcomputing/tip/11-cloud-programming-languages-developers-need-to-know",
        "read_more_link": "",
        "language": "en",
        "title": "11 cloud programming languages developers need to know",
        "top_image": "https://cdn.ttgtmedia.com/rms/onlineimages/code_g1195673150.jpg",
        "meta_img": "https://cdn.ttgtmedia.com/rms/onlineimages/code_g1195673150.jpg",
        "images": [
            "https://www.techtarget.com/rms/onlineimages/code_g1195673150_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/contributor_avatar_140X180.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/cloud_computing-cloud_computing_stack_mobile.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/popular_cloud_programming_languages_and_frameworks-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineImages/itops-go_language_snippet_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/whatis-java_features_half_column_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/code_g1289411982_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/doyle_kerry.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/code_g1133924836_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/lawton_george.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/3.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/mckenzie_cameron.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/4.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/mckenzie_cameron.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/mFHaPOblLuY?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchcloudcomputing/tip/11-cloud-programming-languages-developers-need-to-know&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Darcy DeClute",
            "Kerry Doyle",
            "George Lawton",
            "Cameron McKenzie"
        ],
        "publish_date": "2022-06-10T09:54:00+00:00",
        "summary": "",
        "meta_description": "Consider four factors to choose a cloud programming language: clients and services, targeted cloud stack layer, familiarity and risk averseness.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "Cloud Computing",
        "canonical_link": "https://www.techtarget.com/searchcloudcomputing/tip/11-cloud-programming-languages-developers-need-to-know",
        "text": "Language selection criteria\n\nOrganizations should take these four factors into account when choosing a cloud programming language:\n\ncloud clients and services\n\ntargeted cloud stack layer\n\nfamiliarity\n\nrisk averseness\n\nCloud clients and services\n\nThe first step to determine which programming language is right for you is to ask which types of clients you will create and which types of cloud-based services you will access.\n\nFor example, a virtual reality (VR) headset that needs IBM Watson's machine learning (ML) capabilities has different language requirements than a simple iOS app that pulls images out of Alibaba's Object Storage Service.\n\nTargeted cloud stack layer\n\nAnother consideration is whether you need a general, all-purpose programming language that does a variety of things well, or one that targets a specific technology.\n\n\"Choosing the right language to develop your application comes down to where in the stack you are building,\" said Rob Strechay, a senior cloud and infrastructure analyst with ESG, a division of TechTarget.\n\nFor example, Node.js and .NET are all-purpose platforms that enable developers to provision IaaS, develop cloud-native microservices and access AWS, Microsoft Azure or Google Cloud services. But you can't use these languages to enhance the Linux kernel that runs most cloud infrastructures. Nor can you use Node.js or .NET to extend Docker or Kubernetes runtimes. Only C and Go are valid options for those layers of the cloud stack.\n\nFamiliarity\n\nIT and development teams don't always have to leave their comfort zone. Sometimes, it is best to tap into your existing knowledge of a given platform or framework. If you already have strong Java or .NET skills, for example, that is a compelling reason to choose Java or .NET.\n\nAdditionally, avoid the hype around certain programming languages. For example, many developers tout Python as the preferred language for data science and AI, but it's not a requirement. Every cloud-managed AI and ML service, such as Google Cloud AutoML and Oracle Cloud Infrastructure Forecasting, comes with support for a variety of languages.\n\n\"Java, Python, JavaScript and .NET have all evolved to support a common, broad standard,\" said Michael Forrester, an AWS-authorized instructor at Web Age Solutions, an IT training provider, who specializes in DevOps and ML. \"If you started with Java, stick with that. If you started with Python, stick with that.\"\n\nThere's no need to teach Python to an established team of Java developers just to work with AI and ML in the cloud. Use the talents you have.\n\nRisk averseness\n\nLastly, an organization must determine its comfort with risk. For example, Rust is a programming language that developers can use at almost every layer of the cloud stack. However, the Rust for Linux project has not yet integrated any code into an official kernel build, and software development kit (SDK) support from the predominant cloud vendors is not universal. If an enterprise wants to avoid risk, it is a better option to choose a more establish language.\n\nCloud programming languages' features and use cases\n\nWhen choosing a cloud computing programming language, organizations will typically evaluate the following 11 options.\n\nJavaScript\n\nFor the development of rich, HTTP-based clients that need access to a swath of cloud services, such as Azure Blob Storage or secure authentication through Amazon Cognito, client-side JavaScript is the best option.\n\nThe evolution of JavaScript has, in many cases, eliminated the need to implement a complex, RESTful middleware layer, where glue code that runs on an application server provides the client tier with access to back-end resources. JavaScript can interact directly with managed cloud services.\n\nFor many organizations, client-side JavaScript may be the only language they need. Since every browser supports it, developers can render an application written in JavaScript on any laptop, phone, tablet, smart TV or desktop computer. Rich web development frameworks, such as ReactJS and AngularJS, simplify the development of responsive web applications that interact asynchronously with cloud-based resources.\n\nHowever, JavaScript does have its limitations, such as security. A web browser's basic username and password authentication mechanism is not as trusted and secure as the cryptographic key handshake required by a secure shell (SSH) connection.\n\nMost organizations require access keys or SSH connections to provision cloud-based infrastructure programmatically. Client-side JavaScript is a good fit for the consumption of cloud-based resources. For automation and resource provisioning, a server-side language is required.\n\nNode.js\n\nIf developers universally use JavaScript to write browser-based code on the client, why shouldn't they also use JavaScript to write server-hosted code? That was the conundrum the Node.js project decided to address when it ported the Chrome browser's V8 JavaScript engine to the server in 2009. Node.js and the Node package manager (npm) turned JavaScript into a viable cloud programming language.\n\nNode.js is ideal for microservices development and deployment because npm provides a simple mechanism to add RESTful API support, connectors to data-tier resources and utility libraries that simplify commonly performed tasks and functions.\n\nNode.js makes it possible for organizations to unify client-side and server-side cloud tasks under one umbrella. Also, Node.js and its support for JavaScript is a good choice for organizations that want a single language that will work across many use cases.\n\nHowever, code that runs on a VM, like the Chrome V8 engine, will never perform as well as close-to-the-metal languages such as Go, Rust or C. In situations where every megabyte of memory counts, you might find Node.js applications lack the required runtime optimization.\n\nPython\n\nPython is popular with developers because it supports imperative programming. Also known as functional programming, this approach enables developers to write simple, succinct functions that perform complex logic. These functional methods can also interact with external systems, without the ceremony and code verbosity associated with object-oriented programming languages such as Java.\n\nWith Python, developers can quickly write scripts that provision infrastructure with vendor SDKs. The major cloud vendors provide SDKs for Python; when cloud platforms release new features, the Python SDK is prioritized for updates.\n\nPython is also a favorite language among data scientists and AI development teams. For organizations that use AWS AI services or Google's ML tools, it makes sense to use Python-based SDKs to interact with cloud-based services.\n\n\"Python lets me do the data science stuff I want to do,\" Forrester said. \"It's a general-purpose language, and it's really easy to learn.\"\n\nForrester does make the point, however, that languages like R or Julia may be even better suited for a developer who wants to \"get into the weeds of data science.\" Cloud providers do not universally provide SDK support for R and Julia.\n\nC\n\nC is fast and efficient. It interfaces with a CPU kernel directly without the need to move through abstraction layers languages, as with Java. Operating systems, hardware drivers, hypervisors, GPUs that mine bitcoin, load balancers and virtualization tools are most commonly written in C and C++. C is a preferred choice when optimization and efficiency are top priorities.\n\nAll major cloud vendors provide full SDK support for C, although the role of C in the cloud world goes far beyond the ability to invoke IaaS and PaaS APIs. Developers primarily used C to write the behind-the-scenes software that supports the cloud. If you want to develop software for the cloud, C is a language developers need to know.\n\nGo\n\nGo has a syntax similar to C. Like C, it also enables developers to compile it into abstraction-free binaries that communicate directly with a server's CPU or GPU. But Go, also known as GoLang, includes additional features not found in C, such as automatic garbage collection and memory protection.\n\n\"Docker and Kubernetes are written in Go, and that alone is a good reason to learn it,\" Forrester said.\n\nIt is also the language used to create Terraform. Along with AngularJS, Red Hat used it to build its OpenShift Container Platform. Any developer who wishes to contribute to open source projects like Terraform, extend the OpenShift Container Platform or customize their Docker and Kubernetes implementations at the source-code level will need to know Go.\n\nBut Go isn't just for open source projects.\n\n\"GoLang is a common development language within not only the open source community but large companies and startups,\" Strechay said. \"For example, some of the AWS services are written in GoLang under the hood. GoLang is very popular because it is developer-friendly, pretty powerful and still very performant.\"\n\nAll of the major cloud vendors provide a Go SDK to interact with their IaaS APIs, so you can use Go to provision infrastructure and automate cloud-based management tasks. Also, developers can use a JavaScript conversion tool to create browser-based applications in Go.\n\nJava\n\nJava has long been at the top of developers' lists because it is cross-platform and object-oriented. It is a reliable and practical language to create cloud-native microservices. Java frameworks, such as Spring Boot and the Eclipse MicroProfile, have standardized and simplified the development of cloud-native apps.\n\nJava has been actively developed for so long that connectors and drivers exist for every server-side technology, such as a legacy database, mail server, document store or file-system driver. This makes Java the ideal choice to create applications that can glue together different parts of an enterprise architecture.\n\nMany organizations already have a pool of talented Java developers on staff. With Java SDKs available from each major cloud vendor, there's no need to have your staff learn a new language if you want to use Google Cloud or AWS APIs in your automation scripts or continuous delivery pipelines.\n\n.NET\n\nMicrosoft's .NET platform has competed on steady ground against the Java platform for more than 20 years. In terms of cloud, the .NET framework plays the same role as the Java platform, with the key difference being the target user is a Microsoft developer. Since .NET is Microsoft's own development platform, there are over 100 cloud services from Microsoft that natively support .NET.\n\nLike Java, .NET is a well-proven middle-tier framework with connectors to every type of back-end resource. This makes it a great choice for the development of microservices and RESTful APIs that glue together various parts of an organization's infrastructure. In the same way the Java platform supports many alternative languages, including Kotlin, Scala and Groovy, the .NET framework supports several as well, including C#, VB.NET, C++ and F#.\n\nOther languages of note\n\nPHP, Ruby and Perl remain popular for the server-side development of web applications, but they are not as commonly used as Java or Python for the development of microservices or for the provisioning of cloud-based resources.\n\nPerl is not supported through an official SDK by any of the major cloud vendors, and only AWS provides official SDK support for both Ruby and PHP. There is no official Perl, Ruby or PHP SDK on Azure.\n\nIaaS vendors across the board provide a .NET SDK for integration. For organizations that already use .NET, the continued use of .NET in the cloud makes sense.\n\nKotlin\n\nMost handheld devices run Android. For developers interested in the development of Android apps that integrate with cloud-based resources, Kotlin is a good choice.\n\nNone of the major cloud vendors create an SDK specifically for Kotlin. However, it runs on the Java Virtual Machine and can access any Java SDK API. Organizations that create Android apps with Kotlin can use those same development skills to programmatically manage their cloud-based resources.\n\nSwift\n\nFor Apple products, Swift is to iOS as Kotlin is to Android. Not all vendors provide a Swift SDK. IBM Watson provides a Swift SDK for iOS developers, and AWS did an alpha release of its Swift SDK in August 2021.\n\nFor platforms where a Swift SDK does not exist, developers can either call RESTful APIs that provide access to cloud-based resources or write their own code in a supported SDK, like Python or Node, and have their Swift apps call those routines directly.\n\nUnity\n\nUnity is the best fit for developing VR applications that use ML and visual recognition technology to make gameplay in the metaverse lifelike. Being a platform, Unity supports multiple languages, including C#, UnityScript and Boo.\n\nIBM is the only cloud vendor with an SDK dedicated to the Unity platform for Watson, although you can expect more partnerships that link VR, AI, ML and the computational processing power of the cloud together into a single offering in the future.\n\nRust\n\nWhile C has been the core programming language for Linux since the OS project started, many in the Kernel development community think it's time for something new: Rust.\n\nRust is a close-to-the-metal programming language that can match the performance and efficiency of C. Special language constructs make bugs related to memory management less likely to occur, which is a big plus if the goal is to safely enhance the OSes that the cloud runs on.\n\n\"Rust tends to be popular at lower-level development, where speed of execution takes priority over flexibility or ease of use,\" Strechay said.\n\nAmazon, Microsoft, Dropbox and Discord have all experimented with Rust. Google did an Android port of Rust and Amazon released an AWS Rust SDK preview in December of 2021. Other vendors have yet to follow suit, but where vendors have fallen short, open source projects have picked up the slack. While it might not be the best choice for mature organizations with expertise in other languages, the enthusiasm for Rust continues to grow."
    }
}