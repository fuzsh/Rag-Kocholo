{
    "id": "dbpedia_8288_3",
    "rank": 64,
    "data": {
        "url": "https://www.geeksforgeeks.org/c-programming-language/",
        "read_more_link": "",
        "language": "en",
        "title": "C Programming Language Tutorial",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/uploads/20231231112540/C-Programming-Language.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2024-06-10T03:48:16",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/c-programming-language/",
        "text": "In this C Tutorial, you’ll learn all C programming basic to advanced concepts like variables, arrays, pointers, strings, loops, etc. This C Programming Tutorial is designed for both beginners as well as experienced professionals, who’re looking to learn and enhance their knowledge of the C programming language.\n\nWhat is C?\n\nC is a general-purpose, procedural, high-level programming language used in the development of computer software and applications, system programming, games, and more.\n\nC language was developed by Dennis M. Ritchie at the Bell Telephone Laboratories in 1972.\n\nIt is a powerful and flexible language which was first developed for the programming of the UNIX operating System.\n\nC is one of the most widely used programming languages.\n\nC programming language is known for its simplicity and efficiency. It is the best choice to start with programming as it gives you a foundational understanding of programming.\n\nGetting Started With C Tutorial\n\nStart your coding adventure with our free C Tutorial. A perfect C programming tutorial for beginners and advanced coders alike, this tutorial is your key to unlocking the magic of C programming. With clear explanations and fun examples.\n\nC Basics\n\nC Language Introduction\n\nFeatures of C Programming Language\n\nC Programming Language Standard\n\nSetting Up C Development Environment\n\nC Hello World Program\n\nCompiling a C Program: Behind the Scenes\n\nC Comments\n\nTokens in C\n\nC Identifiers\n\nKeywords in C\n\nC Variables and Constants\n\nC Variables\n\nConstants in C\n\nConst Qualifier in C\n\nDifferent Ways to Declare Variable as Constant in C\n\nScope Rules in C\n\nInternal Linkage and External Linkage in C\n\nGlobal Variables in C\n\nC Data Types\n\nData Types in C\n\nData Type Modifiers in C\n\nLiterals in C\n\nEscape Sequence in C\n\nbool in C\n\nInteger Promotions in C\n\nCharacter Arithmetic in C\n\nType Conversion in C\n\nC Input/Output\n\nBasic Input and Output in C\n\nFormat Specifiers in C\n\nprintf in C\n\nscanf in C\n\nScansets in C\n\nFormatted and Unformatted Input and Output Functions\n\nC Operators\n\nOperators in C\n\nArithmetic Operators in C\n\nUnary Operators in C\n\nRelational Operators in C\n\nBitwise Operators in C\n\nLogical Operators in C\n\nAssignment Operators in C\n\nIncrement and Decrement Operators in C\n\nConditional or Ternary Operator (?:) in C\n\nsize of Operator in C\n\nOperator Precedence and Associativity in C\n\nC Control Statements Decision-Making\n\nDecision-Making in C\n\nC if Statement\n\nC if…else Statement\n\nC if-else-if Ladder\n\nSwitch Statement in C\n\nUsing Range in switch case in C\n\nLoops in C\n\nC for Loop\n\nwhile looping in C\n\ndo…while Loop in C\n\nfor versus while Loop\n\ncontinue Statement in C\n\nbreak Statement in C\n\ngoto Statement in C\n\nC Functions\n\nC Functions\n\nUser-Defined Function in C\n\nParameter Passing Techniques in C\n\nImportance of Function Prototype in C\n\nReturn Multiple Values From a Function\n\nmain Function in C\n\nImplicit Return Type int in C\n\nCallbacks in C\n\nNested Functions in C\n\nVariadic functions in C\n\n_Noreturn Function Specifier in C\n\nPredefined Identifier __func__ in C\n\nMaths Functions in C\n\nC Arrays & Strings\n\nC Arrays\n\nProperties of Array in C\n\nMultidimensional Arrays in C\n\nInitialization of Multidimensional Arrays in C\n\nPass Array to Functions in C\n\nPass a 2D Array as a Parameter in C\n\nData Types for Which Array is Not Possible\n\nPass an Array by Value in C\n\nStrings in C\n\nAn Array of Strings in C\n\nDifference Between Single Quoted and Double Quoted Initialization\n\nString Functions in C\n\nC Pointers\n\nC Pointers\n\nPointer Arithmetics in C\n\nPointer to Pointer (Double Pointer) in C\n\nFunction Pointer in C\n\nDeclare Function Pointer in C\n\nPointer to an Array in C\n\nConstant Pointer in C\n\nPointer vs Array in C\n\nDangling, Void, Null and Wild Pointers\n\nNear, Far and Huge Pointers in C\n\nrestrict Keyword in C\n\nC User-Defined Data Types\n\nC Structures\n\ndot (.) Operator in C\n\nC typedef\n\nStructure Member Alignment, Padding and Data Packing\n\nFlexible Array Members in a Structure in C\n\nC Unions\n\nBit Fields in C\n\nDifference Between Structure and Union in C\n\nAnonymous Union and Structure in C\n\nEnumeration (or enum) in C\n\nC Storage Classes\n\nStorage Classes in C\n\nextern Keyword in C\n\nStatic Variables in C\n\nInitialization of Static Variables in C\n\nStatic Functions in C\n\nUnderstanding “volatile” Qualifier in C\n\nUnderstanding the “register” Keyword in C\n\nC Memory Management\n\nMemory Layout of C Programs\n\nDynamic Memory Allocation in C\n\nDifference Between malloc() and calloc()\n\nWhat is a Memory Leak?\n\nDynamic Array in C\n\nDynamically Allocate a 2D Array in C\n\nDynamically Growing Array in C\n\nC Preprocessor\n\nC Preprocessors\n\nC Preprocessor Directives\n\nHow a Preprocessor Works in C?\n\nHeader Files in C\n\nDifference Between Header Files “stdio.h” and “stdlib.h”\n\nWrite Your Own Header File in C\n\nMacros and their Types in C\n\nInteresting Facts About Macros and Preprocessors in C\n\n# and ## Operators in C\n\nPrint a Variable Name in C\n\nMultiline Macros in C\n\nVariable Length Arguments for Macros\n\nBranch Prediction Macros in GCC\n\ntypedef versus #define in C\n\nDifference Between #define and const in C\n\nC File Handling\n\nBasics of File Handling in C\n\nC fopen() Function\n\nEOF, getc() and feof() in C\n\nfgets() and gets() in C\n\nfseek() vs rewind() in C\n\nReturn Type of getchar(), fgetc() and getc()\n\nRead/Write Structure From/to a File in C\n\nC Program to Print Contents of File\n\nC Program to Delete a File\n\nC Program to Merge Contents of Two Files into a Third File\n\nDifference Between printf, sprintf and fprintf\n\nDifference Between getc(), getchar(), getch() and getche()\n\nC Error Handling\n\nError Handling in C\n\nUsing goto for Exception Handling in C\n\nError Handling During File Operations in C\n\nC Program to Handle Divide By Zero and Multiple Exceptions\n\nC Programs\n\nBasic C Programs\n\nControl Flow Programs\n\nPattern Printing Programs\n\nFunctions Programs\n\nArrays Programs\n\nStrings Programs\n\nConversions Programs\n\nPointers Programs\n\nStructures and Unions Programs\n\nFile I/O Programs\n\nDate and Time Programs\n\nMore C Programs\n\nMiscellaneous\n\nDate and Time in C\n\nInput-output system calls in C\n\nSignals in C\n\nProgram Error Signals in C\n\nSocket Programming in C\n\n_Generics Keyword in C\n\nMultithreading in C\n\nC Interview Questions\n\nTop 50 C Programming Interview Questions and Answers\n\nCommonly Asked C Programming Interview Questions | Set 1\n\nCommonly Asked C Programming Interview Questions | Set 2\n\nCommonly Asked C Programming Interview Questions | Set 3\n\nWhy Learn C?\n\nC programming language is one of the most popular programming language. It is a must learn for software engineering students. C is called the mother of all modern programming languages so learning C will help you to learn other languages easily like Java, C++, C#, Python, etc. C language is faster than other programming languages like Java and Python. It can handle low-level programming and we can compile the C code in a variety of computer platforms.\n\nList of some key advantages of C language:\n\nEasy to learn.\n\nVersatile Language, which can be used in both applications and technologies.\n\nMid-Level Programming Language.\n\nStructured Programming Language.\n\nC Compiler\n\nC compiler is a software that translates human-readable C language code into machine code or an intermediate code that can be executed by a computer’s central processing unit (CPU).\n\nThere are many C compilers available in the market, such as GNU Compiler Collection (GCC), Microsoft Visual C++ Compiler, Clang, Intel C++ Compiler, and TinyCC (TCC).\n\nFor this tutorial, we will be using the GNU-based online C compiler provided by GeeksforGeeks which is developed for beginners and is very easy to use compared to other compiler/IDE’s available on the web.\n\nPrint Hello World using C Programming\n\nC\n\n#include<stdio.h> intmain(){ printf(\"Hello World! I Don't Give a Bug\"); return0; }\n\nOutput\n\nHello World! I Don't Give a Bug\n\n“Give this C code a try, and here’s a fun challenge: print ‘Hello World’ along with your name!”\n\nFeatures of C Language\n\nThere are some key features of C language that show the ability and power of C language:\n\nSimplicity and Efficiency: The simple syntax and structured approach make the C language easy to learn.\n\nFast Speed: C is one of the fastest programming language because C is a static programming language, which is faster than dynamic languages like Java and Python. C is also a compiler-based which is the reason for faster code compilation and execution.\n\nPortable: C provides the feature that you write code once and run it anywhere on any computer. It shows the machine-independent nature of the C language.\n\nMemory Management: C provides lower level memory management using pointers and functions like realloc(), free(), etc.\n\nPointers: C comes with pointers. Through pointers, we can directly access or interact with the memory. We can initialize a pointer as an array, variables, etc.\n\nStructured Language: C provides the features of structural programming that allows you to code into different parts using functions which can be stored as libraries for reusability.\n\nApplications of C Language\n\nC was used in programs that were used in making operating systems. C was known as a system development language because the code written in C runs as fast as the code written in assembly language.\n\nThe use of C is given below:\n\nOperating Systems\n\nLanguage Compilers\n\nAssemblers\n\nText Editors\n\nPrint Spoolers\n\nNetwork Drivers\n\nModern Programs\n\nDatabases\n\nLanguage Interpreters\n\nUtilities\n\nFAQs on C Language\n\nQ1. How to learn C easily?\n\nAnswer:\n\nThe first steps towards learning C or any language are to write a hello world program. It gives the understanding of how to write and execute a code. After this, learn the following:\n\nVariables\n\nOperators\n\nConditionals\n\nLoops and Errors\n\nArrays and Strings\n\nPointers and Memory\n\nFunctions\n\nStructures\n\nRecursions\n\nQ2. Difference between C and C++?\n\nAnswer:\n\nC\n\nCPP\n\nQ3. Is C easy to learn for beginners?\n\nAnswer:\n\nWhile C is one of the easy languages, it is still a good first language choice to start with because almost all programming languages are implemented in it. It means that once you learn C language, it’ll be easy to learn more languages like C++, Java, and C#.\n\nQ4. Why should we learn C first rather than C++?\n\nAnswer:\n\nC is a ‘mother of all languages.’ It provides a solid understanding of fundamental programming concepts and is considered easier to grasp. C offers versatile applications, from software development to game programming, making it an excellent choice for building a strong programming foundation."
    }
}