{
    "id": "dbpedia_8288_3",
    "rank": 22,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Comparison_of_programming_languages",
        "read_more_link": "",
        "language": "en",
        "title": "Comparison of programming languages",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/Barplot_language_speeds_%28Benchmarks_Game_Mandelbrot%29.svg/220px-Barplot_language_speeds_%28Benchmarks_Game_Mandelbrot%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/d/db/Symbol_list_class.svg/16px-Symbol_list_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2005-12-13T13:29:10+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Comparison_of_programming_languages",
        "text": "Programming languages are used for controlling the behavior of a machine (often a computer). Like natural languages, programming languages follow rules for syntax and semantics.\n\nThere are thousands of programming languages[1] and new ones are created every year. Few languages ever become sufficiently popular that they are used by more than a few people, but professional programmers may use dozens of languages in a career.\n\nMost programming languages are not standardized by an international (or national) standard, even widely used ones, such as Perl or Standard ML (despite the name). Notable standardized programming languages include ALGOL, C, C++, JavaScript (under the name ECMAScript), Smalltalk, Prolog, Common Lisp, Scheme (IEEE standard), ISLISP, Ada, Fortran, COBOL, SQL, and XQuery.\n\nGeneral comparison\n\n[edit]\n\nThe following table compares general and technical information for a selection of commonly used programming languages. See the individual languages' articles for further information.\n\nLanguage Original purpose Imperative Object-oriented Functional Procedural Generic Reflective Other paradigms Standardized 1C:Enterprise programming language Application, RAD, business, general, web, mobile Yes No Yes Yes Yes Yes Object-based, Prototype-based programming No ActionScript Application, client-side, web Yes Yes Yes Yes No No prototype-based Yes\n\n1999-2003, ActionScript 1.0 with ES3, ActionScript 2.0 with ES3 and partial ES4 draft, ActionScript 3.0 with ES4 draft, ActionScript 3.0 with E4X Ada Application, embedded, realtime, system Yes Yes[2] No Yes[3] Yes[4] No Concurrent,[5] distributed[6] Yes\n\n1983, 2005, 2012, ANSI, ISO, GOST 27831-88[7] Aldor Highly domain-specific, symbolic computing Yes Yes Yes No No No No ALGOL 58 Application Yes No No No No No No ALGOL 60 Application Yes No No Yes Yes No Yes\n\n1960, IFIP WG 2.1, ISO[8] ALGOL 68 Application Yes No Yes Yes Yes No Concurrent Yes\n\n1968, IFIP WG 2.1, GOST 27974-88,[9] Ateji PX Parallel application No Yes No No No No pi calculus No APL Application, data processing Yes Yes Yes Yes Yes Yes Array-oriented, tacit Yes\n\n1989, ISO Assembly language General Yes No No No No No Any, syntax is usually highly specific, related to the target processor Yes\n\n1985 IEEE 694-1985[10] AutoHotkey GUI automation (macros), highly domain-specific Yes Yes\n\n[11] No Yes No No No AutoIt GUI automation (macros), highly domain-specific Yes No No Yes No No No Ballerina Integration, agile, server-side, general Yes Yes Yes Yes No No Concurrent, transactional, statically and strongly typed, diagrammatic–visual De facto\n\nstandard via Ballerina Language Specification[12] Bash Shell, scripting Yes No No Yes No No Optionally\n\nPOSIX.2[13] BASIC Application, education Yes No No Yes No No Yes\n\n1983, ANSI, ISO, ECMA BeanShell Application, scripting Yes Yes Yes No No Yes No\n\nIn progress, JCP[14] BLISS System No No No Yes No No No BlitzMax Application, game Yes Yes No Yes No Yes No Boo Application, game scripting No Yes No No No No No C Application, system,[15] general purpose, low-level operations Yes No No Yes No No Yes\n\n1989, ANSI C89, ISO/IEC C90, ISO/IEC C95, ISO/IEC C99, ISO/IEC C11, ISO/IEC C17, ISO/IEC C2x[16] C++ Application, system Yes Yes Yes Yes Yes No Yes\n\n1998, ISO/IEC C++98, ISO/IEC C++03, ISO/IEC C++11, ISO/IEC C++14, ISO/IEC C++17, ISO/IEC C++20, ISO/IEC C++23[17] C# Application, RAD, business, client-side, general, server-side, web, game programming Yes Yes Yes[18] Yes Yes Yes Structured, concurrent Yes\n\n2000, ECMA, ISO[19] Clarion General, business, web Yes Yes Yes[20] No No No Un­known Clean General No No Yes No Yes No No Clojure General No No Yes No No No Concurrent No CLU General Yes Yes No Yes Yes No No COBOL Application, business Yes Yes No Yes No No Yes\n\n1968 ANSI X3.23, 1974, 1985; ISO/IEC 1989:1985, 2002, 2014, 2023 Cobra Application, business, general, web Yes Yes Yes No Yes Yes No ColdFusion (CFML) Web No Yes No Yes No No No Common Lisp General Yes Yes Yes Yes Yes Yes Extensible syntax, Array-oriented, syntactic macros, multiple dispatch, concurrent Yes\n\n1994, ANSI COMAL 80 Education Yes No No Yes No No No Crystal General purpose Yes Yes[21] Yes Yes Yes[22] No Concurrent[23] No Curry Application No No Yes No Yes No lazy evaluation, non-determinism De facto standard via Curry Language Report Cython Application, general, numerical computing Yes Yes Yes No No Yes Aspect-oriented No D Application, system Yes Yes Yes Yes Yes Yes Generative, concurrent No Dart Application, web, server-side, mobile, IoT Yes Yes Yes Yes Yes No Structured Yes\n\nECMA-408 standard Delphi, Object Pascal General purpose Yes Yes Yes Yes Yes Yes\n\n? Dylan Application No Yes Yes No No No No Eiffel General, application, business, client-side, server-side, web (EWF) Yes Yes Yes[24][25] No Yes Yes Erl-G Distributed SCOOP, Void-safe Yes\n\n2005, ECMA, ISO[26] ELAN Education Yes No No Yes No No Structured, stepwise refinement No Elixir Application, distributed No No Yes No No Yes Concurrent, distributed No Erlang Application, distributed No No Yes No No Yes Concurrent, distributed No Euphoria Application No No No Yes No Yes No Factor General Yes No Can be viewed as No Yes Yes Stack-oriented No FP No No Yes No No No No F# Application Yes Yes Yes Yes Yes Yes No Forth General Yes No Yes Yes No Yes Stack-oriented Yes\n\n1994, ANSI Fortran Application, numerical computing Yes Yes Yes Yes Yes No Array-based, vectorized, concurrent, native distributed/shared-memory parallelism Yes\n\n1966, ANSI 66, ANSI 77, MIL-STD-1753, ISO 90, ISO 95, ISO 2003, ISO/IEC 1539-1:2010 (2008), ISO/IEC JTC1/SC22/WG5 N2145 (2018) FreeBASIC Application, numerical computing Yes Yes No Yes Yes No No Gambas Application Yes Yes No No No No No Game Maker Language Application, game programming Yes Yes No No No No No GLBasic Application, games Yes Yes No Yes No No Simple object-oriented No Go Application, web, server-side Yes Can be viewed as[27] No Yes Yes Yes Concurrent De facto standard via Go Language Specification Gosu Application, general, scripting, web Yes Yes No No Yes Yes No GraphTalk Application No Yes No No No No Logic No Groovy Application, general, scripting, web Yes Yes Yes Yes Yes Yes Meta-programming In progress, JCP[28] Harbour Application, business, data processing, general, web Yes Yes Yes Yes Yes Yes Declarative No Haskell Application No No Yes No Yes No Lazy evaluation Yes\n\n2010, Haskell 2010[29] Haxe Application, general, web Yes Yes Yes No Yes Yes No HyperTalk Application, RAD, general Yes No No Yes No Yes Weakly typed Un­known Io Application, host-driven scripting Yes Yes No No No No No IPL General No No Yes No No No Un­known ISLISP General Yes Yes Yes No Yes No Yes\n\n1997, 2007, ISO J Application, data processing Yes Yes Yes Yes Yes Yes Array-oriented, function-level, tacit, concurrent No JADE Application, distributed Yes Yes No No No No No Java Application, business, client-side, general, mobile development, server-side, web Yes Yes Yes Yes Yes Yes Concurrent De facto standard via Java Language Specification JavaScript Client-side, server-side, web Yes Yes Yes Yes No Yes prototype-based Yes\n\n1997-2022, ECMA-262 Joy Research No No Yes No No No Stack-oriented No jq \"awk for JSON\" No No Yes No No No Tacit, Backtracking, Streaming, PEG No Julia General, technical computing Yes No Yes Yes Yes Yes Multiple dispatch, meta, scalar and array-oriented, parallel, concurrent, distributed (\"cloud\") No K Data processing, business No No No No No No Array-oriented, tacit Un­known Kotlin Application, mobile development, server-side, client-side, web Yes Yes Yes Yes Yes Yes[30] De facto standard via Kotlin Language Specification Ksh Shell, scripting Yes Yes No Yes No No Several variants, custom programmable, dynamic loadable modules Optionally\n\nPOSIX.2[13] LabVIEW (G) Application, industrial instrumentation-automation Yes Yes Yes No No No Dataflow, visual No Lisp General No No Yes No No No Un­known LiveCode Application, RAD, general Yes Yes No Yes No Yes Weakly typed No Logtalk Artificial intelligence, application No Yes No No No Yes Logic No Linden Scripting Language (LSL) Virtual worlds content scripting and animation Yes No No Yes No No Scripts exist in in-world objects De facto reference is the Second Life implementation of LSL.[31] Lua Application, embedded scripting Yes Yes[32] Yes Yes No Yes Aspect-oriented, prototype-based No[33] Maple Symbolic computation, numerical computing Yes Yes Yes Yes No No Distributed No Mathematica Symbolic language Yes Yes Yes Yes Yes Yes Logic, distributed No MATLAB Highly domain-specific, numerical computing Yes Yes No Yes No No No Modula-2 Application, system Yes No No No Yes No Yes\n\n1996, ISO[34] Modula-3 Application Yes Yes No No Yes No No MUMPS (M) General, application, databases Yes Approved for next Standard No Yes Partially Thru Indirection and Xecute Yes Concurrent, multi-user, NoSQL, transaction processing Yes\n\n1977 ANSI, 1995, ISO 2020 Nim Application, general, web, scripting, system Yes Yes Yes Yes Yes Yes Multiple dispatch, concurrent, meta No Oberon Application, system Yes Yes No No No No No Object Pascal Application, general, mobile app, web Yes Yes No Yes Yes Yes Structured No Objective-C Application, general Yes Yes No Yes No Yes Concurrent No OCaml Application, general Yes Yes Yes Yes Yes No No Occam General Yes No No Yes No No Concurrent, process-oriented No Opa Web applications Yes No Yes No Yes No Distributed No OpenLisp General, Embedded Lisp Engine Yes Yes Yes No Yes No Optionally\n\nISLISP Oxygene Application Yes Yes No No Yes No No Oz-Mozart Application, distribution, education Yes Yes Yes No No No Concurrent, logic No Pascal Application, education Yes No No Yes No No Yes\n\n1983, ISO[35] Perl Application, scripting, text processing, Web Yes Yes Yes Yes Yes Yes No PHP Server-side, web application, web Yes Yes[36] Yes[37] Yes No Yes De facto standard via language specification and Requests for Comments (RFCs) PL/I Application Yes Yes No Yes No No Yes\n\n1969, ECMA-50 (1976) Plus Application, system development Yes No No Yes No No No PostScript Graphics, page description Yes No No Yes No No Concatenative, stack-oriented De facto standard via the PostScript Reference Manual[38] PowerShell Administration, application, general, scripting Yes Yes Yes Yes No Yes Pipeline No Prolog Application, artificial intelligence No No Yes Yes No Yes Logic, declarative Yes\n\n1995, ISO/IEC 13211-1:1995, TC1 2007, TC2 2012, TC3 2017 PureBasic Application Yes No No Yes No No No Python Application, general, web, scripting, artificial intelligence, scientific computing Yes Yes Yes Yes Yes Yes Aspect-oriented De facto standard via Python Enhancement Proposals (PEPs) R Application, statistics Yes Yes Yes Yes No Yes No Racket Education, general, scripting Yes Yes Yes Yes No Yes Modular, logic, meta No Raku Scripting, text processing, glue Yes Yes Yes Yes Yes Yes Aspect-oriented, array, lazy evaluation, multiple dispatch, metaprogramming No REALbasic Application No No No Yes No No Un­known Rebol Distributed Yes Yes Yes Yes No Yes Dialected No REXX Scripting Yes Yes (NetRexx and Object REXX dialects) No Yes No No Yes\n\n1996 (ANSI X3.274-1996) RPG Application, system Yes No No Yes No No No Ring Application Yes Yes Yes Yes Yes Yes metaprogramming, declarative, natural-language No Ruby Application, scripting, web Yes Yes Yes No No Yes Aspect-oriented Yes\n\n2011(JIS X 3017), 2012(ISO/IEC 30170) Rust Application, server-side, system, web Yes Yes[39] Yes Yes Yes No[40] Concurrent No S Application, statistics Yes Yes Yes Yes No No No S-Lang Application, numerical, scripting Yes No No Yes No No No Scala Application, general, parallel, distributed, web Yes Yes Yes No Yes Yes Data-oriented programming, metaprogramming De facto standard via Scala Language Specification (SLS) Scheme Education, general Yes No Yes No No No meta, extensible-syntax De facto\n\n1975-2013, R0RS, R1RS, R2RS, R3RS, R4RS, R5RS, R6RS, R7RS Small Edition[41][42] Seed7 Application, general, scripting, web Yes Yes No No Yes Yes Multi-paradigm, extensible, structured No Simula Education, general Yes Yes No No No No discrete event simulation, multi-threaded (quasi-parallel) program execution Yes\n\n1968 Small Basic Application, education, games Yes No No No No No Component-oriented No Smalltalk Application, general, business, artificial intelligence, education, web Yes Yes Yes Yes No Yes Concurrent, declarative Yes\n\n1998, ANSI SNOBOL Text processing No No No No No No Un­known Standard ML Application Yes No Yes No Yes No Yes\n\n1997, SML '97[43] Swift Application, general Yes Yes Yes Yes Yes Yes Concurrent, declarative, protocol-oriented No Tcl Application, scripting, web Yes Yes Yes Yes No Yes No V (Vlang) Application, general, system, game, web, server-side Yes Can be viewed as Can be viewed as Yes Yes Yes Concurrent No Visual Basic Application, RAD, education, business, general, (Includes VBA), office automation Yes Yes No Yes Yes No Component-oriented No Visual Basic .NET Application, RAD, education, web, business, general Yes Yes Yes Yes Yes Yes Structured, concurrent No Visual FoxPro Application Yes Yes No Yes No No Data-centric, logic No Visual Prolog Application Yes Yes Yes No No No Declarative, logic No Wolfram Language Symbolic language Yes Yes Yes Yes Yes Yes Logic, distributed No XL Yes Yes No No No No concept programming No Xojo Application, RAD, general, web Yes Yes No Yes No Yes No XPath/XQuery Databases, data processing, scripting No No Yes No No No Tree-oriented Yes\n\n1999 W3C XPath 1, 2010 W3C XQuery 1, 2014 W3C XPath/XQuery 3.0 Zeek Domain-specific, application Yes No No No No No No Zig Application, general, system Yes No Yes Yes Yes Yes Concurrent No Zsh Shell, scripting Yes No No Yes No No Loadable modules Optionally\n\nPOSIX.2[13]\n\nType systems\n\n[edit]\n\nFailsafe I/O and system calls\n\n[edit]\n\nMost programming languages will print an error message or throw an exception if an input/output operation or other system call (e.g., chmod, kill) fails, unless the programmer has explicitly arranged for different handling of these events. Thus, these languages fail safely in this regard.\n\nSome (mostly older) languages require that programmers explicitly add checks for these kinds of errors. Psychologically, different cognitive biases (e.g., optimism bias) may affect novices and experts alike and lead them to skip these checks. This can lead to erroneous behavior.\n\nFailsafe I/O is a feature of 1C:Enterprise, Ada (exceptions), ALGOL (exceptions or return value depending on function), Ballerina, C#, Common Lisp (\"conditions and restarts\" system), Curry, D (throwing on failure),[44] Erlang, Fortran, Go (unless result explicitly ignored), Gosu, Harbour, Haskell, ISLISP, Java, Julia, Kotlin, LabVIEW, Mathematica, Objective-C (exceptions), OCaml (exceptions), OpenLisp, PHP, Python, Raku, Rebol, Rexx (with optional signal on... trap handling), Ring, Ruby, Rust (unless result explicitly ignored), Scala,[45] Smalltalk, Standard ML [citation needed], Swift ≥ 2.0 (exceptions), Tcl, Visual Basic, Visual Basic .NET, Visual Prolog, Wolfram Language, Xojo, XPath/XQuery (exceptions), and Zeek.\n\nNo Failsafe I/O: AutoHotkey (global ErrorLevel must be explicitly checked), C,[46] COBOL, Eiffel (it actually depends on the library and it is not defined by the language), GLBasic (will generally cause program to crash), RPG, Lua (some functions do not warn or throw exceptions), and Perl.[47]\n\nSome I/O checking is built in C++ (STL iostreams throw on failure but C APIs like stdio or POSIX do not)[46] and Object Pascal, in Bash[48] it is optional.\n\nExpressiveness\n\n[edit]\n\nLanguage Statements ratio[49] Lines ratio[50] C 1 1 C++ 2.5 1 Fortran 2 0.8 Java 2.5 1.5 Perl 6 6 Smalltalk 6 6.25 Python 6 6.5\n\nThe literature on programming languages contains an abundance of informal claims about their relative expressive power, but there is no framework for formalizing such statements nor for deriving interesting consequences.[51] This table provides two measures of expressiveness from two different sources. An additional measure of expressiveness, in GZip bytes, can be found on the Computer Language Benchmarks Game.[52]\n\nBenchmarks\n\n[edit]\n\nBenchmarks are designed to mimic a particular type of workload on a component or system. The computer programs used for compiling some of the benchmark data in this section may not have been fully optimized, and the relevance of the data is disputed. The most accurate benchmarks are those that are customized to your particular situation. Other people's benchmark data may have some value to others, but proper interpretation brings many challenges. The Computer Language Benchmarks Game site warns against over-generalizing from benchmark data, but contains a large number of micro-benchmarks of reader-contributed code snippets, with an interface that generates various charts and tables comparing specific programming languages and types of tests.[55]\n\nTimeline of specific language comparisons\n\n[edit]\n\n1974 – Comparative Notes on Algol 68 and PL/I[56] – S. H. Valentine – November 1974\n\n1976 – Evaluation of ALGOL 68, JOVIAL J3B, Pascal, Simula 67, and TACPOL Versus TINMAN – Requirements for a Common High Order Programming Language.\n\n1977 – A comparison of PASCAL and ALGOL 68[57] – Andrew S. Tanenbaum – June 1977.\n\n1993 – Five Little Languages and How They Grew – BLISS, Pascal, ALGOL 68, BCPL & C – Dennis M. Ritchie – April 1993.\n\n2009 – On Go – oh, go on – How well will Google's Go stand up against Brand X programming language? – David Given – November 2009\n\nSee also\n\n[edit]\n\nTo display all pages, subcategories and images click on the \"►\":\n\nComparison of programming languages (basic instructions)\n\nComparison of programming languages (syntax)\n\nComparison of integrated development environments\n\nComparison of multi-paradigm programming languages\n\nTIOBE index\n\nReferences\n\n[edit]\n\nFurther reading\n\n[edit]"
    }
}