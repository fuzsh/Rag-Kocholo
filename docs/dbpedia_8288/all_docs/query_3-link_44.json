{
    "id": "dbpedia_8288_3",
    "rank": 44,
    "data": {
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_overview",
        "read_more_link": "",
        "language": "en",
        "title": "JavaScript language overview - JavaScript",
        "top_image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "meta_img": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-30T04:48:57+00:00",
        "summary": "",
        "meta_description": "JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods. Its syntax is based on the Java and C languages â many structures from those languages apply to JavaScript as well. JavaScript supports object-oriented programming with object prototypes and classes. It also supports functional programming since functions are first-class objects that can be easily created via expressions and passed around like any other object.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-48x48.cbbd161b.png",
        "meta_site_name": "MDN Web Docs",
        "canonical_link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_overview",
        "text": "JavaScript has two built-in numeric types: Number and BigInt.\n\nThe Number type is a IEEE 754 64-bit double-precision floating point value, which means integers can be safely represented between -(253 â 1) and 253 â 1 without loss of precision, and floating point numbers can be stored all the way up to 1.79 Ã 10308. Within numbers, JavaScript does not distinguish between floating point numbers and integers.\n\njs\n\nconsole.log(3 / 2);\n\nSo an apparent integer is in fact implicitly a float. Because of IEEE 754 encoding, sometimes floating point arithmetic can be imprecise.\n\njs\n\nconsole.log(0.1 + 0.2);\n\nFor operations that expect integers, such as bitwise operations, the number will be converted to a 32-bit integer.\n\nNumber literals can also have prefixes to indicate the base (binary, octal, decimal, or hexadecimal), or an exponent suffix.\n\njs\n\nconsole.log(0b111110111); console.log(0o767); console.log(0x1f7); console.log(5.03e2);\n\nThe BigInt type is an arbitrary length integer. Its behavior is similar to C's integer types (e.g. division truncates to zero), except it can grow indefinitely. BigInts are specified with a number literal and an n suffix.\n\njs\n\nconsole.log(-3n / 2n);\n\nThe standard arithmetic operators are supported, including addition, subtraction, remainder arithmetic, etc. BigInts and numbers cannot be mixed in arithmetic operations.\n\nThe Math object provides standard mathematical functions and constants.\n\njs\n\nMath.sin(3.5); const circumference = 2 * Math.PI * r;\n\nThere are three ways to convert a string to a number:\n\nparseInt(), which parses the string for an integer.\n\nparseFloat(), which parses the string for a floating-point number.\n\nThe Number() function, which parses a string as if it's a number literal and supports many different number representations.\n\nYou can also use the unary plus + as a shorthand for Number().\n\nNumber values also include NaN (short for \"Not a Number\") and Infinity. Many \"invalid math\" operations will return NaN â for example, if attempting to parse a non-numeric string, or using Math.log() on a negative value. Division by zero produces Infinity (positive or negative).\n\nNaN is contagious: if you provide it as an operand to any mathematical operation, the result will also be NaN. NaN is the only value in JavaScript that's not equal to itself (per IEEE 754 specification).\n\nStrings in JavaScript are sequences of Unicode characters. This should be welcome news to anyone who has had to deal with internationalization. More accurately, they are UTF-16 encoded.\n\njs\n\nconsole.log(\"Hello, world\"); console.log(\"ä½ å¥½ï¼ä¸çï¼\");\n\nStrings can be written with either single or double quotes â JavaScript does not have the distinction between characters and strings. If you want to represent a single character, you just use a string consisting of that single character.\n\njs\n\nconsole.log(\"Hello\"[1] === \"e\");\n\nTo find the length of a string (in code units), access its length property.\n\nStrings have utility methods to manipulate the string and access information about the string. Because all primitives are immutable by design, these methods return new strings.\n\nThe + operator is overloaded for strings: when one of the operands is a string, it performs string concatenation instead of number addition. A special template literal syntax allows you to write strings with embedded expressions more succinctly. Unlike Python's f-strings or C#'s interpolated strings, template literals use backticks (not single or double quotes).\n\njs\n\nconst age = 25; console.log(\"I am \" + age + \" years old.\"); console.log(`I am ${age} years old.`);\n\nJavaScript distinguishes between null, which indicates a deliberate non-value (and is only accessible through the null keyword), and undefined, which indicates absence of value. There are many ways to obtain undefined:\n\nA return statement with no value (return;) implicitly returns undefined.\n\nAccessing a nonexistent object property (obj.iDontExist) returns undefined.\n\nA variable declaration without initialization (let x;) will implicitly initialize the variable to undefined.\n\nJavaScript has a Boolean type, with possible values true and false â both of which are keywords. Any value can be converted to a boolean according to the following rules:\n\nfalse, 0, empty strings (\"\"), NaN, null, and undefined all become false.\n\nAll other values become true.\n\nYou can perform this conversion explicitly using the Boolean() function:\n\njs\n\nBoolean(\"\"); Boolean(234);\n\nHowever, this is rarely necessary, as JavaScript will silently perform this conversion when it expects a boolean, such as in an if statement (see Control structures). For this reason, we sometimes speak of \"truthy\" and \"falsy\", meaning values that become true and false, respectively, when used in boolean contexts.\n\nBoolean operations such as && (logical and), || (logical or), and ! (logical not) are supported; see Operators.\n\nThe Symbol type is often used to create unique identifiers. Every symbol created with the Symbol() function is guaranteed to be unique. In addition, there are registered symbols, which are shared constants, and well-known symbols, which are utilized by the language as \"protocols\" for certain operations. You can read more about them in the symbol reference.\n\nVariables in JavaScript are declared using one of three keywords: let, const, or var.\n\nlet allows you to declare block-level variables. The declared variable is available from the block it is enclosed in.\n\njs\n\nlet a; let name = \"Simon\"; for (let myLetVariable = 0; myLetVariable < 5; myLetVariable++) { }\n\nconst allows you to declare variables whose values are never intended to change. The variable is available from the block it is declared in.\n\njs\n\nconst Pi = 3.14; console.log(Pi);\n\nA variable declared with const cannot be reassigned.\n\njs\n\nconst Pi = 3.14; Pi = 1;\n\nconst declarations only prevent reassignments â they don't prevent mutations of the variable's value, if it's an object.\n\njs\n\nconst obj = {}; obj.a = 1; console.log(obj);\n\nvar declarations can have surprising behaviors (for example, they are not block-scoped), and they are discouraged in modern JavaScript code.\n\nIf you declare a variable without assigning any value to it, its value is undefined. You can't declare a const variable without an initializer, because you can't change it later anyway.\n\nlet and const declared variables still occupy the entire scope they are defined in, and are in a region known as the temporal dead zone before the actual line of declaration. This has some interesting interactions with variable shadowing, which don't occur in other languages.\n\njs\n\nfunction foo(x, condition) { if (condition) { console.log(x); const x = 2; console.log(x); } } foo(1, true);\n\nIn most other languages, this would log \"1\" and \"2\", because before the const x = 2 line, x should still refer to the parameter x in the upper scope. In JavaScript, because each declaration occupies the entire scope, this would throw an error on the first console.log: \"Cannot access 'x' before initialization\". For more information, see the reference page of let.\n\nJavaScript is dynamically typed. Types (as described in the previous section) are only associated with values, but not with variables. For let-declared variables, you can always change its type through reassignment.\n\njs\n\nlet a = 1; a = \"foo\";\n\nJavaScript's numeric operators include +, -, *, /, % (remainder), and ** (exponentiation). Values are assigned using =. Each binary operator also has a compound assignment counterpart such as += and -=, which extend out to x = x operator y.\n\njs\n\nx += 5; x = x + 5;\n\nYou can use ++ and -- to increment and decrement respectively. These can be used as a prefix or postfix operators.\n\nThe + operator also does string concatenation:\n\njs\n\n\"hello\" + \" world\";\n\nIf you add a string to a number (or other value) everything is converted into a string first. This might trip you up:\n\njs\n\n\"3\" + 4 + 5; 3 + 4 + \"5\";\n\nAdding an empty string to something is a useful way of converting it to a string itself.\n\nComparisons in JavaScript can be made using <, >, <= and >=, which work for both strings and numbers. For equality, the double-equals operator performs type coercion if you give it different types, with sometimes interesting results. On the other hand, the triple-equals operator does not attempt type coercion, and is usually preferred.\n\njs\n\n123 == \"123\"; 1 == true; 123 === \"123\"; 1 === true;\n\nThe double-equals and triple-equals also have their inequality counterparts: != and !==.\n\nJavaScript also has bitwise operators and logical operators. Notably, logical operators don't work with boolean values only â they work by the \"truthiness\" of the value.\n\njs\n\nconst a = 0 && \"Hello\"; const b = \"Hello\" || \"world\";\n\nThe && and || operators use short-circuit logic, which means whether they will execute their second operand is dependent on the first. This is useful for checking for null objects before accessing their attributes:\n\njs\n\nconst name = o && o.getName();\n\nOr for caching values (when falsy values are invalid):\n\njs\n\nconst name = cachedName || (cachedName = getName());\n\nFor a comprehensive list of operators, see the guide page or reference section. You may be especially interested in the operator precedence.\n\nJavaScript has a similar set of control structures to other languages in the C family. Conditional statements are supported by if and else; you can chain them together:\n\njs\n\nlet name = \"kittens\"; if (name === \"puppies\") { name += \" woof\"; } else if (name === \"kittens\") { name += \" meow\"; } else { name += \"!\"; } name === \"kittens meow\";\n\nJavaScript doesn't have elif, and else if is really just an else branch comprised of a single if statement.\n\nJavaScript has while loops and do...while loops. The first is good for basic looping; the second is for loops where you wish to ensure that the body of the loop is executed at least once:\n\njs\n\nwhile (true) { } let input; do { input = get_input(); } while (inputIsNotValid(input));\n\nJavaScript's for loop is the same as that in C and Java: it lets you provide the control information for your loop on a single line.\n\njs\n\nfor (let i = 0; i < 5; i++) { }\n\nJavaScript also contains two other prominent for loops: for...of, which iterates over iterables, most notably arrays, and for...in, which visits all enumerable properties of an object.\n\njs\n\nfor (const value of array) { } for (const property in object) { }\n\nThe switch statement can be used for multiple branches based on equality checking.\n\njs\n\nswitch (action) { case \"draw\": drawIt(); break; case \"eat\": eatIt(); break; default: doNothing(); }\n\nSimilar to C, case clauses are conceptually the same as labels, so if you don't add a break statement, execution will \"fall through\" to the next level. However, they are not actually jump tables â any expression can be part of the case clause, not just string or number literals, and they would be evaluated one-by-one until one equals the value being matched. Comparison takes place between the two using the === operator.\n\nUnlike some languages like Rust, control-flow structures are statements in JavaScript, meaning you can't assign them to a variable, like const a = if (x) { 1 } else { 2 }.\n\nJavaScript errors are handled using the try...catch statement.\n\njs\n\ntry { buildMySite(\"./website\"); } catch (e) { console.error(\"Building site failed:\", e); }\n\nErrors can be thrown using the throw statement. Many built-in operations may throw as well.\n\njs\n\nfunction buildMySite(siteDirectory) { if (!pathExists(siteDirectory)) { throw new Error(\"Site directory does not exist\"); } }\n\nIn general, you can't tell the type of the error you just caught, because anything can be thrown from a throw statement. However, you can usually assume it's an Error instance, as is the example above. There are some subclasses of Error built-in, like TypeError and RangeError, that you can use to provide extra semantics about the error. There's no conditional catch in JavaScript â if you only want to handle one type of error, you need to catch everything, identify the type of error using instanceof, and then rethrow the other cases.\n\njs\n\ntry { buildMySite(\"./website\"); } catch (e) { if (e instanceof RangeError) { console.error(\"Seems like a parameter is out of range:\", e); console.log(\"Retrying...\"); buildMySite(\"./website\"); } else { throw e; } }\n\nIf an error is uncaught by any try...catch in the call stack, the program will exit.\n\nFor a comprehensive list of control flow statements, see the reference section.\n\nJavaScript objects can be thought of as collections of key-value pairs. As such, they are similar to:\n\nDictionaries in Python.\n\nHashes in Perl and Ruby.\n\nHash tables in C and C++.\n\nHashMaps in Java.\n\nAssociative arrays in PHP.\n\nJavaScript objects are hashes. Unlike objects in statically typed languages, objects in JavaScript do not have fixed shapes â properties can be added, deleted, re-ordered, mutated, or dynamically queried at any time. Object keys are always strings or symbols â even array indices, which are canonically integers, are actually strings under the hood.\n\nObjects are usually created using the literal syntax:\n\njs\n\nconst obj = { name: \"Carrot\", for: \"Max\", details: { color: \"orange\", size: 12, }, };\n\nObject properties can be accessed using dot (.) or square brackets ([]). When using the dot notation, the key must be a valid identifier. Square brackets, on the other hand, allow indexing the object with a dynamic key value.\n\njs\n\nobj.name = \"Simon\"; const name = obj.name; obj[\"name\"] = \"Simon\"; const name = obj[\"name\"]; const userName = prompt(\"what is your key?\"); obj[userName] = prompt(\"what is its value?\");\n\nProperty access can be chained together:\n\njs\n\nobj.details.color; obj[\"details\"][\"size\"];\n\nObjects are always references, so unless something is explicitly copying the object, mutations to an object would be visible to the outside.\n\njs\n\nconst obj = {}; function doSomething(o) { o.x = 1; } doSomething(obj); console.log(obj.x);\n\nThis also means two separately created objects will never be equal (!==), because they are different references. If you hold two references of the same object, mutating one would be observable through the other.\n\njs\n\nconst me = {}; const stillMe = me; me.x = 1; console.log(stillMe.x);\n\nFor more on objects and prototypes, see the Object reference page. For more information on the object initializer syntax, see its reference page.\n\nThis page has omitted all details about object prototypes and inheritance because you can usually achieve inheritance with classes without touching the underlying mechanism (which you may have heard to be abstruse). To learn about them, see Inheritance and the prototype chain.\n\nArrays in JavaScript are actually a special type of object. They work very much like regular objects (numerical properties can naturally be accessed only using [] syntax) but they have one magic property called length. This is always one more than the highest index in the array.\n\nArrays are usually created with array literals:\n\njs\n\nconst a = [\"dog\", \"cat\", \"hen\"]; a.length;\n\nJavaScript arrays are still objects â you can assign any properties to them, including arbitrary number indices. The only \"magic\" is that length will be automatically updated when you set a particular index.\n\njs\n\nconst a = [\"dog\", \"cat\", \"hen\"]; a[100] = \"fox\"; console.log(a.length); console.log(a);\n\nThe array we got above is called a sparse array because there are uninhabited slots in the middle, and will cause the engine to deoptimize it from an array to a hash table. Make sure your array is densely populated!\n\nOut-of-bounds indexing doesn't throw. If you query a non-existent array index, you'll get a value of undefined in return:\n\njs\n\nconst a = [\"dog\", \"cat\", \"hen\"]; console.log(typeof a[90]);\n\nArrays can have any elements and can grow or shrink arbitrarily.\n\njs\n\nconst arr = [1, \"foo\", true]; arr.push({});\n\nArrays can be iterated with the for loop, as you can in other C-like languages:\n\njs\n\nfor (let i = 0; i < a.length; i++) { }\n\nOr, since arrays are iterable, you can use the for...of loop, which is synonymous to C++/Java's for (int x : arr) syntax:\n\njs\n\nfor (const currentValue of a) { }\n\nArrays come with a plethora of array methods. Many of them would iterate the array â for example, map() would apply a callback to every array element, and return a new array:\n\njs\n\nconst babies = [\"dog\", \"cat\", \"hen\"].map((name) => `baby ${name}`);\n\nAlong with objects, functions are the core component in understanding JavaScript. The most basic function declaration looks like this:\n\njs\n\nfunction add(x, y) { const total = x + y; return total; }\n\nA JavaScript function can take 0 or more parameters. The function body can contain as many statements as you like and can declare its own variables which are local to that function. The return statement can be used to return a value at any time, terminating the function. If no return statement is used (or an empty return with no value), JavaScript returns undefined.\n\nFunctions can be called with more or fewer parameters than it specifies. If you call a function without passing the parameters it expects, they will be set to undefined. If you pass more parameters than it expects, the function will ignore the extra parameters.\n\njs\n\nadd(); add(2, 3, 4);\n\nThere are a number of other parameter syntaxes available. For example, the rest parameter syntax allows collecting all the extra parameters passed by the caller into an array, similar to Python's *args. (Since JS doesn't have named parameters on the language level, there's no **kwargs.)\n\njs\n\nfunction avg(...args) { let sum = 0; for (const item of args) { sum += item; } return sum / args.length; } avg(2, 3, 4, 5);\n\nIn the above code, the variable args holds all the values that were passed into the function.\n\nThe rest parameter will store all arguments after where it's declared, but not before. In other words, function avg(firstValue, ...args) will store the first value passed into the function in the firstValue variable and the remaining arguments in args.\n\nIf a function accepts a list of arguments and you already hold them in an array, you can use the spread syntax in the function call to spread the array as a list of elements. For instance: avg(...numbers).\n\nWe mentioned that JavaScript doesn't have named parameters. It's possible, though, to implement them using object destructuring, which allows objects to be conveniently packed and unpacked.\n\njs\n\nfunction area({ width, height }) { return width * height; } console.log(area({ width: 2, height: 3 }));\n\nThere's also the default parameter syntax, which allows omitted parameters (or those passed as undefined) to have a default value.\n\njs\n\nfunction avg(firstValue, secondValue, thirdValue = 0) { return (firstValue + secondValue + thirdValue) / 3; } avg(1, 2);\n\nJavaScript allows you to call functions recursively. This is particularly useful for dealing with tree structures, such as those found in the browser DOM.\n\njs\n\nfunction countChars(elm) { if (elm.nodeType === 3) { return elm.nodeValue.length; } let count = 0; for (let i = 0, child; (child = elm.childNodes[i]); i++) { count += countChars(child); } return count; }\n\nFunction expressions can be named as well, which allows them to be recursive.\n\njs\n\nconst charsInBody = (function counter(elm) { if (elm.nodeType === 3) { return elm.nodeValue.length; } let count = 0; for (let i = 0, child; (child = elm.childNodes[i]); i++) { count += counter(child); } return count; })(document.body);\n\nThe name provided to a function expression as above is only available to the function's own scope. This allows more optimizations to be done by the engine and results in more readable code. The name also shows up in the debugger and some stack traces, which can save you time when debugging.\n\nIf you are used to functional programming, beware of the performance implications of recursion in JavaScript. Although the language specification specifies tail-call optimization, only JavaScriptCore (used by Safari) has implemented it, due to the difficulty of recovering stack traces and debuggability. For deep recursion, consider using iteration instead to avoid stack overflow.\n\nJavaScript function declarations are allowed inside other functions. An important detail of nested functions in JavaScript is that they can access variables in their parent function's scope:\n\njs\n\nfunction parentFunc() { const a = 1; function nestedFunc() { const b = 4; return a + b; } return nestedFunc(); }\n\nThis provides a great deal of utility in writing more maintainable code. If a called function relies on one or two other functions that are not useful to any other part of your code, you can nest those utility functions inside it. This keeps the number of functions that are in the global scope down.\n\nThis is also a great counter to the lure of global variables. When writing complex code, it is often tempting to use global variables to share values between multiple functions, which leads to code that is hard to maintain. Nested functions can share variables in their parent, so you can use that mechanism to couple functions together without polluting your global namespace.\n\nJavaScript offers the class syntax that's very similar to languages like Java.\n\njs\n\nclass Person { constructor(name) { this.name = name; } sayHello() { return `Hello, I'm ${this.name}!`; } } const p = new Person(\"Maria\"); console.log(p.sayHello());\n\nJavaScript classes are just functions that must be instantiated with the new operator. Every time a class is instantiated, it returns an object containing the methods and properties that the class specified. Classes don't enforce any code organization â for example, you can have functions returning classes, or you can have multiple classes per file. Here's an example of how ad hoc the creation of a class can be: it's just an expression returned from an arrow function. This pattern is called a mixin.\n\njs\n\nconst withAuthentication = (cls) => class extends cls { authenticate() { } }; class Admin extends withAuthentication(Person) { }\n\nStatic properties are created by prepending static. Private properties are created by prepending a hash # (not private). The hash is an integral part of the property name. (Think about # as _ in Python.) Unlike most other languages, there's absolutely no way to read a private property outside the class body â not even in derived classes.\n\nFor a detailed guide on various class features, you can read the guide page.\n\nJavaScript is single-threaded by nature. There's no paralleling; only concurrency. Asynchronous programming is powered by an event loop, which allows a set of tasks to be queued and polled for completion.\n\nThere are three idiomatic ways to write asynchronous code in JavaScript:\n\nCallback-based (such as setTimeout())\n\nPromise-based\n\nasync/await, which is a syntactic sugar for Promises\n\nFor example, here's what a file-read operation might look like in JavaScript:\n\njs\n\nfs.readFile(filename, (err, content) => { if (err) { throw err; } console.log(content); }); fs.readFile(filename) .then((content) => { console.log(content); }) .catch((err) => { throw err; }); async function readFile(filename) { const content = await fs.readFile(filename); console.log(content); }\n\nThe core language doesn't specify any asynchronous programming features, but it's crucial when interacting with the external environment â from asking user permissions, to fetching data, to reading files. Keeping the potentially long-running operations async ensures that other processes can still run while this one waits â for example, the browser will not freeze while waiting for the user to click a button to grant permission.\n\nIf you have an async value, it's not possible to get its value synchronously. For example, if you have a promise, you can only access the eventual result via the then() method. Similarly, await can only be used in an async context, which is usually an async function or a module. Promises are never blocking â only the logic depending on the promise's result will be deferred; everything else continues to execute in the meantime. If you are a functional programmer, you may recognize promises as monads which can be mapped with then() (however, they are not proper monads because they auto-flatten; i.e. you can't have a Promise<Promise<T>>).\n\nIn fact, the single-threaded model has made Node.js a popular choice for server-side programming due to its non-blocking IO, making handling a large number of database or file-system requests very performant. However, CPU-bound (computationally intensive) tasks that are pure JavaScript will still block the main thread. To achieve real paralleling, you may need to use workers.\n\nTo learn more about asynchronous programming, you can read about using promises or follow the asynchronous JavaScript tutorial.\n\nJavaScript also specifies a module system supported by most runtimes. A module is usually a file, identified by its file path or URL. You can use the import and export statements to exchange data between modules:\n\njs\n\nimport { foo } from \"./foo.js\"; const b = 2; export const a = 1;\n\nUnlike Haskell, Python, Java, etc., JavaScript module resolution is entirely host-defined â it's usually based on URLs or file paths, so relative file paths \"just work\" and are relative to the current module's path instead of some project root path.\n\nHowever, the JavaScript language doesn't offer standard library modules â all core functionalities are powered by global variables like Math and Intl instead. This is due to the long history of JavaScript lacking a module system, and the fact that opting into the module system involves some changes to the runtime setup.\n\nDifferent runtimes may use different module systems. For example, Node.js uses the package manager npm and is mostly file-system based, while Deno and browsers are fully URL-based and modules can be resolved from HTTP URLs.\n\nFor more information, see the modules guide page.\n\nThroughout this page, we've constantly mentioned that certain features are language-level while others are runtime-level.\n\nJavaScript is a general-purpose scripting language. The core language specification focuses on pure computational logic. It doesn't deal with any input/output â in fact, without extra runtime-level APIs (most notably console.log()), a JavaScript program's behavior is entirely unobservable.\n\nA runtime, or a host, is something that feeds data to the JavaScript engine (the interpreter), provides extra global properties, and provides hooks for the engine to interact with the outside world. Module resolution, reading data, printing messages, sending network requests, etc. are all runtime-level operations. Since its inception, JavaScript has been adopted in various environments, such as browsers (which provide APIs like DOM), Node.js (which provides APIs like file system access), etc. JavaScript has been successfully integrated in web (which was its primary purpose), mobile apps, desktop apps, server-side apps, serverless, embedded systems, and more. While you learn about JavaScript core features, it's also important to understand host-provided features in order to put the knowledge to use. For example, you can read about all web platform APIs, which are implemented by browsers, and sometimes non-browsers."
    }
}