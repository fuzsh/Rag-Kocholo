{
    "id": "dbpedia_8288_1",
    "rank": 10,
    "data": {
        "url": "https://gamedev.stackexchange.com/questions/208684/do-real-game-developers-use-blueprints-or-do-they-always-use-c",
        "read_more_link": "",
        "language": "en",
        "title": "Do real game developers use blueprints, or do they always use C++?",
        "top_image": "https://cdn.sstatic.net/Sites/gamedev/Img/apple-touch-icon@2.png?v=9bca23db2259",
        "meta_img": "https://cdn.sstatic.net/Sites/gamedev/Img/apple-touch-icon@2.png?v=9bca23db2259",
        "images": [
            "https://cdn.sstatic.net/Sites/gamedev/Img/logo.svg?v=c61a0bba5264",
            "https://i.sstatic.net/DjCnH.png?s=64",
            "https://lh3.googleusercontent.com/a/AATXAJyxU--RQ1BnGyvBi8ur_CCcA8AT808vA3r8Wjw=k-s64",
            "https://i.sstatic.net/88SRM.png?s=64",
            "https://www.gravatar.com/avatar/ad78cf42f8c421bc3e532fc3e16f3f9d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/659060fcfde804c6582d87b432dfa497?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/24231f169c1ed55850339ec5d62047c5?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Xx2e3.jpg?s=64",
            "https://www.gravatar.com/avatar/60d02f9a2932480b5e7584ca91e65bd5?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/2b7bef6d6ef7fd583a33a371b668535f?s=64&d=identicon&r=PG",
            "https://gamedev.stackexchange.com/posts/208684/ivc/0d79?prg=667f7511-db66-4a01-8f7f-37c1d024b469"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-01-22T13:49:00",
        "summary": "",
        "meta_description": "I'm starting to learn Unreal Engine 4. Every time I use blueprints, I think &quot;that's not right&quot; and I need to use C++, but there are not as many tutorials with c++ code. So, is it ok to use",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/gamedev/Img/favicon.ico?v=7d1a3cf2e788",
        "meta_site_name": "Game Development Stack Exchange",
        "canonical_link": "https://gamedev.stackexchange.com/questions/208684/do-real-game-developers-use-blueprints-or-do-they-always-use-c",
        "text": "A real game developer is someone who manages to deliver a product.\n\nVisual coding is a tool that can be used to achieve that. Some people use Chat GPT, some people use notepad, some people use blueprints, some use an IDE. Which tool you use boils down to personal preferences and the way you approach a problem.\n\nAs long as your game is running as you envisioned it in the end, the player will never know how you coded it.\n\nProfessional game development teams working in Unreal Engine typically use a mix of blueprint and C++.\n\nOne good strategy is for a designer to attempt to implement a feature in blueprint, then ask a programmer for review their prototype. The programmer can identify things that are inefficient, overcomplicated, or heavily used within the blueprint, and reimplement those in C++ in a reusable and maintainable way. The designer shouldn't hesitate to ask the programmer for C++ features that would make their job easier.\n\nIf you're the only developer on the team, of course, you have to wear both those hats. Use what works for you, as Zibelas suggests in their answer.\n\n\"Real\" game developers always use the right tool for the job.\n\nEven though it is perfectly possible to produce a professional game using only C++ or only blueprint graphs, most professional Unreal Engine projects use a mix of both. They both have their advantages and disadvantages.\n\nOne main advantage of blueprints is that they are very fast to compile, which makes it a lot more convenient to prototype and iterate with them. But C++ solutions are usually(!) much more performant at runtime. So when a feature that was initially prototyped with blueprints turns out to be a performance bottleneck, then redoing it as a C++ class can sometimes help.\n\nAnd depending on what problem in particular you are trying to solve, either one might be easier to create, read and/or maintain. In general, blueprints excel at \"simple\" logic flows (\"when B button is pressed, jump!\"), while C++ is the better medium to convey logic that requires more complex algorithms and data structures (\"when AI agent is idle, pick a job from the master job list using this rating function, break it down into steps using goal-oriented action planning and push them onto the task stack for the agent\"). But there is a large grey area in between where either approach is reasonable.\n\nAnd it's not uncommon either to use a mixed approach of creating a blueprint graph where some of the nodes are custom nodes implemented in C++ specifically for that one graph. This approach is particularly common in teams that contain both programmers and non-programmers who want to be able to tinker with the game mechanics without having to ask a programmer for every little change.\n\nSo the answer to the question \"should I learn blueprints or should I learn c++?\" is \"Yes!\"\n\nIn Unreal Engine - supported by the approach of the Fortnite team - the intended design of Blueprints is that C++ usually exposes functions, logic, events etc, into a blueprint ready for the game designer to make use of in the intended way. In Unreal Fest, this has been a topic raised quite often, and answered in this way.\n\nRegardless - as others have stated - who cares. When the game works, is fun, makes money and is more often than not superceded by the next game... choices like this become a question of maintenance burden rather than anything else.\n\nTo summarise: Expose parts from C++, use in Blueprint, but most importantly, get the game made.\n\nThis answer is applicable to any software development task. As a general principal you should use the highest level language/tool that gets the job done. This will result in the fastest and cheapest development and the easiest maintenance. You should use lower level tools as needed to improve the performance of bottlenecks or to do things that are not supported in the high level tool/language. Do not base your decisions on idiology but let the task dictate the tool.\n\nIn your specific case, use blueprints wherever possible and only use C++ to do something that cannot be done with blueprints (or is more difficult) or where the performance would be unacceptable. And, as always, don't prematurely optimize code - always profile it first.\n\nC++ is one of my favorite languages, but it is usually not the fastest or cheapest (in terms of development time) way to solve a problem with the required performance. This is the metric that should drive any 'professional' developer."
    }
}