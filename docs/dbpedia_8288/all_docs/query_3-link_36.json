{
    "id": "dbpedia_8288_3",
    "rank": 36,
    "data": {
        "url": "https://softwareengineering.stackexchange.com/questions/418779/temporal-logic-as-a-programming-language-paradigm",
        "read_more_link": "",
        "language": "en",
        "title": "Temporal logic as a programming language paradigm?",
        "top_image": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "meta_img": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "images": [
            "https://cdn.sstatic.net/Sites/softwareengineering/Img/logo.svg?v=e86f7d5306ae",
            "https://www.gravatar.com/avatar/264b4a311985ed5801d81be8d3cf0eb8?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/99ea6c53670ee672208131424e15cbc7?s=64&d=identicon&r=PG",
            "https://softwareengineering.stackexchange.com/posts/418779/ivc/0d79?prg=920f4947-11a7-45d5-8a14-809d00d51ec5"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-11-08T23:17:23",
        "summary": "",
        "meta_description": "So I'm aware there's some degree of timing-based logic in existing programming languages, like threads and the sleep() function (and derivatives thereof), as well as events / delegates.\nHowever, I ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/softwareengineering/Img/favicon.ico?v=c4f35a1e3900",
        "meta_site_name": "Software Engineering Stack Exchange",
        "canonical_link": "https://softwareengineering.stackexchange.com/questions/418779/temporal-logic-as-a-programming-language-paradigm",
        "text": "So I'm aware there's some degree of timing-based logic in existing programming languages, like threads and the sleep() function (and derivatives thereof), as well as events / delegates.\n\nHowever, I was curious about the potential of a language, or at least a library / extension of an existing language, that embraces the concepts of temporal logic as a full-fledged methodology for programming?\n\nFor example, a was operator that checks equality for a variable not only in the present moment, but whether it was equal to a value at some previous state in the program too, possibly within a specified period of time before the present moment if the entire history doesn't need to be checked. Or a has been operator that works similarly, but checks to see if the variable has continually held a state for a certain period of time, without changing anywhere in between.\n\nI can already guess the reasons for temporal logic never taking off as a paradigm very likely involve memory, as keeping track of previous program states would likely require a ton of it, to the point of being impractical for anything other than the smallest programs. I would say that could be mitigated by giving the programmer control over which variables get their history tracked (if at all, perhaps through the use of a keyword, like temporal int someValue that explicitly tells the program that its state should be recorded), and even specifying how frequently their state is recorded, which could also improve performance; for example, you could tell a variable to only update every 5 seconds, if you know it doesn't change often and having a high amount of temporal resolution isn't important. Basically, giving the programmmer the power to set certain variables as \"recordable\", how frequently they should save their history (time resolution), and how far back in the past to check when checking for past values."
    }
}