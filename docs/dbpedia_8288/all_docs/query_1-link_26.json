{
    "id": "dbpedia_8288_1",
    "rank": 26,
    "data": {
        "url": "https://kotlinlang.org/docs/native-overview.html",
        "read_more_link": "",
        "language": "en",
        "title": "Kotlin Native | Kotlin",
        "top_image": "https://kotlinlang.org/assets/images/open-graph/docs.png",
        "meta_img": "https://kotlinlang.org/assets/images/open-graph/docs.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://kotlinlang.org/assets/images/favicon.svg?v2",
        "meta_site_name": "Kotlin Help",
        "canonical_link": "https://kotlinlang.org/docs/native-overview.html",
        "text": "Kotlin Native\n\nKotlin/Native is a technology for compiling Kotlin code to native binaries which can run without a virtual machine. Kotlin/Native includes an LLVM-based backend for the Kotlin compiler and a native implementation of the Kotlin standard library.\n\nWhy Kotlin/Native?\n\nKotlin/Native is primarily designed to allow compilation for platforms on which virtual machines are not desirable or possible, such as embedded devices or iOS. It is ideal for situations when a developer needs to produce a self-contained program that does not require an additional runtime or virtual machine.\n\nTarget platforms\n\nKotlin/Native supports the following platforms:\n\nmacOS\n\niOS, tvOS, watchOS\n\nLinux\n\nWindows (MinGW)\n\nAndroid NDK\n\nSee the full list of supported targets.\n\nInteroperability\n\nKotlin/Native supports two-way interoperability with native programming languages for different operating systems. The compiler creates:\n\nan executable for many platforms\n\na static library or dynamic library with C headers for C/C++ projects\n\nan Apple framework for Swift and Objective-C projects\n\nKotlin/Native supports interoperability to use existing libraries directly from Kotlin/Native:\n\nstatic or dynamic C libraries\n\nC, Swift, and Objective-C frameworks\n\nIt is easy to include compiled Kotlin code in existing projects written in C, C++, Swift, Objective-C, and other languages. It is also easy to use existing native code, static or dynamic C libraries, Swift/Objective-C frameworks, graphical engines, and anything else directly from Kotlin/Native.\n\nKotlin/Native libraries help share Kotlin code between projects. POSIX, gzip, OpenGL, Metal, Foundation, and many other popular libraries and Apple frameworks are pre-imported and included as Kotlin/Native libraries in the compiler package.\n\nSharing code between platforms\n\nKotlin Multiplatform helps share common code across multiple platforms, including Android, iOS, JVM, web, and native. Multiplatform libraries provide the necessary APIs for common Kotlin code and allow writing shared parts of projects in Kotlin all in one place.\n\nYou can use the Get started with Kotlin Multiplatform tutorial to create applications and share business logic between iOS and Android. To share UIs among iOS, Android, desktop, and web, try Compose Multiplatform, JetBrains' declarative UI framework based on Kotlin and Jetpack Compose.\n\nHow to get started\n\nNew to Kotlin? Take a look at Getting started with Kotlin.\n\nRecommended documentation:\n\nGet started with Kotlin Multiplatform\n\nInteroperability with C\n\nInteroperability with Swift/Objective-C\n\nRecommended tutorials:\n\nGet started with Kotlin/Native\n\nGet started with Kotlin Multiplatform\n\nMapping primitive data types from C\n\nKotlin/Native as a dynamic Library\n\nKotlin/Native as an Apple framework\n\nLast modified: 27 October 2023"
    }
}