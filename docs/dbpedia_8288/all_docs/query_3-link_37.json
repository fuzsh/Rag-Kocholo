{
    "id": "dbpedia_8288_3",
    "rank": 37,
    "data": {
        "url": "https://docs.godotengine.org/en/stable/getting_started/step_by_step/scripting_languages.html",
        "read_more_link": "",
        "language": "en",
        "title": "Scripting languages ¶",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.godotengine.org/en/stable/_static/docs_logo.svg",
            "https://docs.godotengine.org/en/stable/_images/scripting_camera_shake.gif",
            "https://docs.godotengine.org/en/stable/_images/scripting_gdscript.png",
            "https://docs.godotengine.org/en/stable/_images/scripting_csharp.png",
            "https://docs.godotengine.org/en/stable/_images/scripting_cpp.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "This lesson will give you an overview of the available scripting languages in Godot. You will learn the pros and cons of each option. In the next part, you will write your first script using GDScri...",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Godot Engine documentation",
        "canonical_link": "https://docs.godotengine.org/en/stable/getting_started/step_by_step/scripting_languages.html",
        "text": "Available scripting languages¶\n\nGodot offers four gameplay programming languages: GDScript, C#, and, via its GDExtension technology, C and C++. There are more community-supported languages, but these are the official ones.\n\nYou can use multiple languages in a single project. For instance, in a team, you could code gameplay logic in GDScript as it's fast to write, and use C# or C++ to implement complex algorithms and maximize their performance. Or you can write everything in GDScript or C#. It's your call.\n\nWe provide this flexibility to answer the needs of different game projects and developers.\n\nWhich language should I use?¶\n\nIf you're a beginner, we recommend to start with GDScript. We made this language specifically for Godot and the needs of game developers. It has a lightweight and straightforward syntax and provides the tightest integration with Godot.\n\nFor C#, you will need an external code editor like VSCode or Visual Studio. While C# support is now mature, you will find fewer learning resources for it compared to GDScript. That's why we recommend C# mainly to users who already have experience with the language.\n\nLet's look at each language's features, as well as its pros and cons.\n\nGDScript¶\n\nGDScript is an object-oriented and imperative programming language built for Godot. It's made by and for game developers to save you time coding games. Its features include:\n\nA simple syntax that leads to short files.\n\nBlazing fast compilation and loading times.\n\nTight editor integration, with code completion for nodes, signals, and more information from the scene it's attached to.\n\nBuilt-in vector and transform types, making it efficient for heavy use of linear algebra, a must for games.\n\nSupports multiple threads as efficiently as statically typed languages.\n\nNo garbage collection, as this feature eventually gets in the way when creating games. The engine counts references and manages the memory for you in most cases by default, but you can also control memory if you need to.\n\nGradual typing. Variables have dynamic types by default, but you also can use type hints for strong type checks.\n\nGDScript looks like Python as you structure your code blocks using indentations, but it doesn't work the same way in practice. It's inspired by multiple languages, including Squirrel, Lua, and Python.\n\nNote\n\nWhy don't we use Python or Lua directly?\n\nYears ago, Godot used Python, then Lua. Both languages' integration took a lot of work and had severe limitations. For example, threading support was a big challenge with Python.\n\nDeveloping a dedicated language doesn't take us more work and we can tailor it to game developers' needs. We're now working on performance optimizations and features that would've been difficult to offer with third-party languages.\n\n.NET / C#¶\n\nAs Microsoft's C# is a favorite amongst game developers, we officially support it. C# is a mature and flexible language with tons of libraries written for it. We were able to add support for it thanks to a generous donation from Microsoft.\n\nC# offers a good tradeoff between performance and ease of use, although you should be aware of its garbage collector.\n\nNote\n\nYou must use the .NET edition of the Godot editor to script in C#. You can download it on the Godot website's download page.\n\nSince Godot uses .NET 6, in theory, you can use any third-party .NET library or framework in Godot, as well as any Common Language Infrastructure-compliant programming language, such as F#, Boo, or ClojureCLR. However, C# is the only officially supported .NET option.\n\nNote\n\nGDScript code itself doesn't execute as fast as compiled C# or C++. However, most script code calls functions written with fast algorithms in C++ code inside the engine. In many cases, writing gameplay logic in GDScript, C#, or C++ won't have a significant impact on performance.\n\nAttention\n\nProjects written in C# using Godot 4 currently cannot be exported to the web platform. To use C# on that platform, consider Godot 3 instead. Android and iOS platform support is available as of Godot 4.2, but is experimental and some limitations apply.\n\nSee also\n\nTo learn more about C#, head to the C# basics page.\n\nC++ via GDExtension¶\n\nGDExtension allows you to write game code in C++ without needing to recompile Godot.\n\nYou can use any version of the language or mix compiler brands and versions for the generated shared libraries, thanks to our use of an internal C API Bridge.\n\nGDExtension is the best choice for performance. You don't need to use it throughout an entire game, as you can write other parts in GDScript or C#.\n\nWhen working with GDExtension, the available types, functions, and properties closely resemble Godot's actual C++ API."
    }
}