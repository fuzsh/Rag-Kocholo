{
    "id": "correct_subsidiary_00025_3",
    "rank": 44,
    "data": {
        "url": "https://dreamertalin.medium.com/maxis-and-ea-2002-2007-c07f50f66314",
        "read_more_link": "",
        "language": "en",
        "title": "Maxis and EA: 2002–2007",
        "top_image": "https://miro.medium.com/v2/resize:fit:460/1*nOIwr3ZapkFpARaqrf1itg.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:460/1*nOIwr3ZapkFpARaqrf1itg.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/2*BVH6Hf_V03dmMllfRl_L2g.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/2*BVH6Hf_V03dmMllfRl_L2g.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Talin",
            "dreamertalin.medium.com"
        ],
        "publish_date": "2018-02-03T09:50:11.018000+00:00",
        "summary": "",
        "meta_description": "Back in those days I was into traditional Irish dancing. Just about every Monday, I would ride the BART train from San Francisco over to Berkeley and go to The Starry Plough, a traditional Irish pub…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://dreamertalin.medium.com/maxis-and-ea-2002-2007-c07f50f66314",
        "text": "An unemployed game programmer walks into a bar…\n\nBack in those days I was into traditional Irish dancing. Just about every Monday, I would ride the BART train from San Francisco over to Berkeley and go to The Starry Plough, a traditional Irish pub there. For ten bucks you could get two hours of group dance lessons followed by two hours of dancing to live music.\n\nI had other reasons for going there. For one thing, this was the period where my depression was at its peak. I badly wanted not to be alone, but I was too shy to make friends easily. So I figured I would find some place with lots of friendly people and just hang out, and possibly make some connections that way.\n\nI did make a few friends there, but it was a lot more difficult than you might think. Most of the dancers were U. C. Berkeley students who had their own cliques — I would hover around the edges of conversations, but a lot of it was impenetrable gossip about people I had never met. Also, there wasn’t a lot of time for chit-chat between dance sets. And while a lot of the folks there were the kind of alternate-lifestyle people I like to hang out with, they weren’t geeky in the same way I was. My attempts to connect often went awry.\n\nI vividly remember one instance where one of my emotional crashes happened while I was sitting at a table in the pub.\n\nThese crashes usually manifested as a sudden downward swing where the whole world would suddenly seem bleak and hopeless. This happened every eight to ten days or so, and lasted between a half hour and several hours, after which I would be all right again. There was some evidence that the episodes were blood-sugar related, because eating would often make me feel better.\n\nWhat I remember, though, was that I was sitting at a table in a crowded bar, with tears literally streaming down my face — and no one noticed. Admittedly, the light was dim, and I have a life-long habit of stoically enduring my negative emotions instead of shouting or throwing tantrums.\n\nI was caught between conflicting feelings — on the one side feeling like a freak and being embarrassed about not being able to control my emotions, and on the other side feeling like the whole human race was worthless, and all that talk about compassion and support was just talk. And then there was a third part of my brain which was observing my altered state of consciousness, and thinking “this would be pretty cool if it didn’t hurt so much.”\n\nI was also at this time unemployed.\n\nThe previous five years had been one failed startup after another — Postlinear Entertainment, Transactor Networks, Brodia and Explorati. The last had been particularly painful; at some point I’ll write an account of what happened, but let’s just say that every time I think about what happened, I get angry flashbacks, even fifteen years later.\n\nIn any case, I was there at the Plough just about every week, and at one point I mentioned to one of the fellows there that I was looking for work. He said, “Why don’t you come work for us at Maxis? We are looking for a QA engineer.”\n\nMaxis!\n\nYou have to understand that to me, Maxis, was the shining example of what a game company could be. Games that weren’t just about blowing shit up, but were actually teaching ordinary people about city planning and biological evolution and other cool stuff — making the world a better place. Darn right I wanted to work there.\n\nI had actually visited Maxis a decade earlier, when Robert McNally and I had pitched a “Sim City Jr.” concept to Will Wright and Jeff Braun. It was a stripped down Sim City using isometric, diamond-shaped tiles (this was several years before Sim City 2000 came out, which also ended up using isometric tiles). They didn’t go for the idea, but visiting the company had left a big impression on me.\n\nSo I was very excited about the prospect. On the other hand, I knew that QA engineer was not the right position for me — I don’t have the right temperament for that job.\n\nStill, I figured maybe I could get a “foot in the door” by doing the job interview anyway. Let’s see what happens…\n\nWhen I got there, I was greeted by Billy Hsu, who was the project manager for Sim City 4, and Paul Pedriana, the lead engineer for the project.\n\nOne of the first things that they did was to give me a written programming test. The test was pretty simple — given a sample piece of code, how many bugs could I find? The maximum score was six. Could I find all six bugs?\n\nI decided that I was going to need to impress these guys in a serious way.\n\nSo I found eight bugs.\n\nAdmittedly, for the last one, it required some creative interpretation of what was a bug — it was really more of a code smell.\n\nStill, Billy and Paul were pretty impressed. After a couple of hours of interviewing, Billy looked at me and said, “You’re not really a QA engineer, are you?”\n\n“No, I’m not.” I replied.\n\n“OK. Here’s what we’re going to do. Come back tomorrow, we’re going to start the interview process over.”\n\nAnd that was how I got hired as a software engineer on Sim City 4.\n\nCaveat: In what follows, I mostly talk about the parts of the game that I was personally involved with. However, it was a large complex project with a whole crew of brilliant people working on it, and to try and describe what everyone else did would take a book. The parts I did were a very small piece of a much larger whole.\n\nAs a user-interface programmer, I worked closely with several of the artists on the project. I remember two individuals in particular: Christian Stratton and Ocean Quigley. We had many lunch-time conversations at various restaurants in Walnut Creek.\n\nChristian did a lot of the user interface panel designs, which I had the job of implementing. I remember we spent a lot of time working on the terrain sculpting tools.\n\nOne thing I learned at Maxis is that their games are very “data driven” — new features can be added to the game simply by copying files to the game’s data directory. I was able to apply this philosophy to the UI menus, so that new kinds of terrain sculpting tools could be added to the game without writing any new code.\n\nOne of Ocean Quigley’s particular specialties was particle systems. Our graphics engine guru, Andrew Willmott, had developed a particle system language called Swarm. This language allowed artists to describe, in a few lines of declarative code, fire, smoke, clouds, or other kinds of particle-based effects. You could decide what “shape” the emitter was, the initial velocity distribution of the particles, how they would interact with terrain and objects, and so on.\n\nAs a simple example, when the player plopped down a police station onto the terrain, it would emit dust clouds, almost as if you dropped a book onto a dusty floor.\n\nOne of the coolest features of the system was that it would monitor the Swarm effect files to detect when they changed. This meant that an artist could hit ‘save’ in their text editor and instantly see the result on the game screen, without having to restart the game.\n\nOcean was determined to see how far he could push the limits of the system. He created an alien invasion disaster scenario entirely in Swarm code. This involved a giant robot landing on the city in a flare of rocket jets and wreaking havoc by tossing out explosive projectiles. The robot model was repurposed from an earlier game — it was “Servo”, the robot butler from the original The Sims game, only magnified to five stories tall. And the explosive projectiles? Giant dinner plates, tossed like Frisbees!\n\nAnother piece that I worked on was the traffic visualization system for the follow-on expansion pack, Sim City 4: Rush Hour. The underlying simulation model already had information about all of the traffic routes, but the problem was that the data was so complex that it would be hard for the player to comprehend. The solution we hit on was to allow the user to select an individual building, and then overlay on the map translucent lines representing the routes to and from that building. I spent a lot of time writing the graphics code to render those lines, getting them to look just right.\n\nBy the end of the project, I was performing pretty well. I did a lot of refactoring of the standard Maxis UI toolkit, something that would become important later.\n\nBilly and I were getting along and often went to lunch together. I assisted him with the weekly ‘bug scrub’— we would go through the entire bug database and I would give a technical assessment of each issue so that he could decide how to triage it. This was something the other engineers didn’t like doing, since it took time away from coding.\n\nI want to say a little bit about Will Wright, creator of the original Sim City and The Sims. I only talked with him a few times, but I’ve always been impressed with his vision and way of thinking.\n\nI’ve met a lot of game designers in my career. The vast majority of them are imitators — they take a proven formula, like first-person shooters, and add relatively minor tweaks. Some are a bit more creative in their tweaks, but nothing they create is truly revolutionary.\n\nThere’s another kind of game designer, which I call the domain expert. This is someone who has a lot of knowledge about a particular subject. For example, one of the people we had on Sim City was an expert in city planning.\n\nUnfortunately, most of the domain experts I have met have no idea how to make a game fun. They tend to be obsessed with “realism”, which in my opinion is never desirable in games (as opposed to verisimilitude, the illusion of realism — a subtle distinction). Domain experts should be paired with another kind of game designer.\n\nThe key problem facing designers is what I have often called Talin’s Law of Game Design: “There is no way to determine how much fun a computer game will be until after you have built it.”\n\nDesigning and building games is fun, and it’s easy to confuse the the fun of building a game with the fun of playing it. You can have a lot of fun creating a game that turns out to be miserably boring to play. There’s no way to tell if a game is fun just by looking at the design doc.\n\nThis is why so many games build on top of a known formula — because investing in a revolutionary new game concept is extremely risky. What most successful studios do is build a game engine around a rough concept, and iterate on the design until it’s fun enough. This of course drives engineers nuts, because the coding requirements are constantly changing, but it’s what you have to do.\n\nBut Will Wright takes this to a whole ‘nother level. He creates dozens — hundreds — of small mini-games, quick throwaway prototypes, and then has fun playing them. He designs by becoming the player.\n\nIt doesn’t always work. But when it does, the results are revolutionary.\n\nStill, there were a lot of fun moments. Studio Director Brian Deppiesse was a notorious prankster. One time he arranged to have several large crates of “Nerf Arrows” (those rubber-band powered foam-rubber projectiles) shipped to the office. He then secretly distributed these to all employees as they were entering the company all-hands meeting, and told them to wait for his signal to fire.\n\nWe got to witness the president of the studio on a lit stage being pelted with hundreds of Nerf Arrows. And for months afterwards, no matter where you went in the corporate office you would see Nerf Arrows lying around.\n\nAnother time, one of the execs had gone on vacation, and when she returned she discovered that her entire office — the walls, the floor, the chair, even the computer on the desk — was completely covered in aluminum foil.\n\nI did a couple of pranks as well. When I worked at the Walnut Creek office, there was a pinball machine whose theme was “Terminator: Judgement Day” with a picture of Arnold Schwarzenegger on it. When he got elected governor of California, my manager Wendy Bliss and I changed it to “Terminator: Election Day”.\n\nOne thing EA had in common with Maxis is that they didn’t pinch pennies when it came to printer’s ink. Every floor had a large-format poster printer which any employee could use for any reason. As a result, every conceivable vertical surface in the building was covered in printouts of concept art, test renderings, screenshots, and other exhibitions of team pride— sometimes three layers deep.\n\nDuring my 3 years at EARS I think we went through three different studio heads. There was one particular exec who tended to use a lot of buzzwords — he would get up on stage in the company all-hands and spout out a bunch of marketing speak that I don’t think anyone really understood.\n\nIn response to this, myself and a team of co-conspirators (Wendy Bliss and tech lead David Gregory) decided that we were going to organize a game of “buzzword bingo”. Wendy solicited a list of buzzwords from several folks (I remember contributing a bunch), and she made Jello-shots — the idea was that each time we heard one of the buzzwords on the list, we would have to take a Jello shot. (Although as a non-drinker I was excused from this last requirement.)\n\nHowever, what we did not reckon on was Will Wright.\n\nYou see, Will at that time was working on Spore. The development team was in a remote office away from EARS (this is an indication of how much political clout he wielded within the company.) Will was slated to give a demo of the latest Spore prototype at the very same all-hands where we had planned our “buzzword bingo”.\n\nSomehow, Will and his team got a copy of my list of buzzwords — and then incorporated every one of the buzzwords into their demo script. So for example, when they would stop to examine the graphic detail on a tree, Will would say “It appears that this tree has some ‘low-hanging fruit’.”\n\nWendy, David, and about a dozen others got very drunk that day.\n\nA few months later, I transferred from the Sims 2 team to the EA Central Technology Group. Paul Pedriana, who had been the lead engineer for Sim City 4, was now the engineering lead for CTG. Paul remembered my improvements to the UI toolkit library for Sim City, and suggested that I could be put to better use helping to create a technical infrastructure for all of EA. One of the goals was to develop a common UI toolkit that could be used in all future EA products.\n\nThere were a number of challenges we had to face. The biggest was that EA had a very inconsistent policy towards investing in technology. Most of the time, EA was content to let each individual studio develop its own technology in-house. Because each studio’s tools and libraries were developed independently with completely different design philosophies, there was no easy way to make them work together in a compatible way, and for the most part EA didn’t try.\n\nHowever, EA had just acquired a company, RenderWare, which was in the business of providing game engines and authoring tools. Because EA didn’t want its investment to go to waste, the central office issued a mandate — all future games from all studios had to use RenderWare.\n\nThe problem is that this decree fundamentally misunderstood the needs of the individual studios. RenderWare had it’s own peculiar design philosophy, which was completely at odds with the needs of many of the games. There was a huge pushback from the engineering staff, and many developers simply ignored the company mandate and continued to build games the way they always had.\n\nWe in the CTG group had a similar problem, but we approached it in a different way. We knew that we weren’t going to get every studio to throw out all of their existing code and switch to a new system overnight. Instead, we worked on the problem piecemeal. Our strategy was to get the studios to adopt our technologies one library at a time, by creating modules and frameworks built around a common consensus of all the stakeholders.\n\nThis worked up to a point — we were able to get the studios to incorporate many of the lower-level libraries and standards that we created. But as we moved higher up the stack, into the realm of resource managers and UI toolkits, it got harder to create generic components that met everyone’s needs.\n\nDuring this period, I worked on a bunch of different libraries and tools, including meta-build system that would generate Visual Studio project files, and a UI Designer application that would let artists create game user interfaces interactively.\n\nI also got a chance to mentor some junior engineers, which is something I always have enjoyed. One of my “mentees” was Alex Liberman, with whom (along with Paul) I have continued to maintain a close friendship. Alex later went to work on the Halo series of games.\n\nThe last thing I did while I was at EA was to write a web browser. The idea was that this would be an embeddable component that could be used within a networked game and would use the game graphics drivers for all of it’s rendering, so that it could run on the XBox and PS2 as well as Windows. This component was actually used in Spore, I don’t know if any other games used it.\n\nHowever, the experience of having actually written a browser would mean that I understood web standards (particularly HTML and CSS) in a way that few others at the time did, which would be a big help in my next job.\n\nI‘m not going to talk about the EA Spouse controversy, even though it happened during the time I was employed there, because it didn’t actually affect me personally. I didn’t work long hours at EA, although I did sometimes come in on weekends when there was a deadline to meet.\n\nI was more upset about EA’s lack of commitment to the CTG group.\n\nOne of the things that Maxis had invested in was a “build farm”, a cluster of machines which would compile game code on a regular basis and check for errors, what nowadays is called continuous integration. We could see that the rest of the industry was moving in this direction. But we needed to improve our technology — our system was substantially lagging behind what other companies were doing. Unfortunately, EA refused to spend any money on this, and in fact shut down the Maxis build farm and re-assigned the team members to game projects.\n\nEven the CTG group was not immune; the team was slowly and gradually being downsized and the team members assigned to other projects. EA didn’t really have a commitment to technical excellence, they were more interested in pumping out another sequel to Golden Eye or Godfather.\n\nAfter much soul-searching, I decided I didn’t want to work for a company — or even an industry — that didn’t care about engineering quality and software best practices. I wrote an email to select group of friends, asking “what should I do with my life?”\n\nI got two replies, one from Michael McNally and one from Guido van Rossum, both of which said, in essence, “You should come work at Google.”\n\nHere’s the thing that surprised me the most about all this: At the point I decided to leave EA, all my mental and emotional energy was focused on solving a bunch of difficult problems, which were made harder by the fact that EA didn’t seem to care whether I solved them or not. I assumed that it would be traumatic to have to stop working on those problems and go work for another company.\n\nBut the moment I accepted the offer and gave my notice, it was like a switch had been thrown. All of a sudden, I realized that I really didn’t care in the slightest what happened to my work, or even all of EA.\n\nI was free.\n\nNote on Depression\n\nIf you are someone who suffers from depression, please seek treatment. Don’t go untreated for ten years like I did.\n\nI have tried about ten different antidepressants. Finding the right drug can sometimes take a while depending on your genetic makeup.\n\nSo far, the most effective treatment (for me) has been hormone replacement therapy — boosting my testosterone levels.\n\nSee also\n\nTalin’s Autobiograhical Essays"
    }
}