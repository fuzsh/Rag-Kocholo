{
    "id": "correct_subsidiary_00020_0",
    "rank": 94,
    "data": {
        "url": "https://sii.pl/blog/en/working-with-large-sharepoint-lists/",
        "read_more_link": "",
        "language": "en",
        "title": "Some tips on how to work with large SharePoint lists",
        "top_image": "https://sii.pl/blog/wp-content/uploads/2022/01/Working-with-large-SharePoint-lists.png",
        "meta_img": "https://sii.pl/blog/wp-content/uploads/2022/01/Working-with-large-SharePoint-lists.png",
        "images": [
            "https://sii.pl/wp-content/themes/sii-sage/resources/assets/images/logo-sii-svg.svg",
            "https://sii.pl/wp-content/themes/sii-sage/resources/assets/images/logo-sii-svg.svg",
            "https://sii.pl/blog/wp-content/uploads/2022/01/Working-with-large-SharePoint-lists.png",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2022/02/1-1.png",
            "https://sii.pl/blog/wp-content/uploads/2022/02/2-1.png",
            "https://sii.pl/blog/wp-content/uploads/2022/02/3-1.png",
            "https://sii.pl/blog/wp-content/uploads/2023/07/edetkiewicz_LThumb.jpg",
            "https://sii.pl/blog/wp-content/uploads/2022/07/recruitent-1.svg",
            "https://sii.pl/blog/wp-content/uploads/2022/07/blog-box-1-1.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/05/offer-01-1-1.svg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/resources/images/guest-icon.png",
            "https://sii.pl/blog/wp-content/uploads/2024/05/Hilla-optymalna-integracja-technologii-czyli-Spring-Boot-i-React-w-jednym-miejscu-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/05/Bluetooth-low-energy-basics-–-the-story-of-King-Harald-in-a-nutshell-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/05/Modulowosc-Adobe-Experience-Manager-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/05/Klasy-Bezpieczenstwa-Oprogramowania-a-wymagania-FDA-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/04/Data-pseudonymization-in-Google-Cloud-in-practice--170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/03/Migration-to-go_router — devs-story-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/02/Price-Tracker-–-a-practical-dive-into-serverless-applications-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/01/Using-ChatGPT-for-creating-Spring-framework-applications-no-hand-programming-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2023/12/Server-Side-Events-–-implementation-and-highlights-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/01/Harmony-in-Asynchrony-Leveraging-Awaitility-in-BDD-Tests-with-Cucumber-170x220.jpg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/dist/../resources/images/blogersii_cover_single_green.svg",
            "https://sii.pl/blog/wp-content/uploads/2022/07/recruitent-1.svg",
            "https://sii.pl/blog/wp-content/uploads/2022/07/blog-box-1-1.svg",
            "https://sii.pl/blog/wp-content/uploads/2024/05/offer-01-1-1.svg",
            "https://sii.pl/blog/wp-content/themes/sii-sage/resources/assets/images/nBuczel2.png",
            "https://sii.pl/blog/wp-content/themes/sii-sage/resources/assets/images/PGierczak2.png",
            "https://sii.pl/wp-content/uploads/2021/10/ISO27001-stopka.jpg",
            "https://sii.pl/wp-content/uploads/2022/05/ISO9001-stopka.png",
            "https://sii.pl/wp-content/uploads/2021/10/ISO13485-stopka.jpg",
            "https://sii.pl/wp-content/uploads/2022/08/ISO14001-stopka.png",
            "https://sii.pl/wp-content/uploads/2023/04/ISO27018-stopka.png",
            "https://sii.pl/wp-content/uploads/2020/05/commoncriteria_logo_original.png",
            "https://sii.pl/wp-content/uploads/2021/10/Tisax-stopka.png",
            "https://sii.pl/wp-content/uploads/2024/05/GPTW_40_EN.png",
            "https://sii.pl/wp-content/uploads/2024/05/GPTW_LEGENDS_40_EN.png",
            "https://sii.pl/wp-content/uploads/2024/01/40-1.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "https://sii.pl/blog/en/author/edetkiewiczsii-pl/#author"
        ],
        "publish_date": "2022-02-11T10:00:29+01:00",
        "summary": "",
        "meta_description": "While working with large SharePoint list you had \"The attempted operation is prohibited because it exceeds the list view threshold\" error. Let's fix the problem",
        "meta_lang": "en",
        "meta_favicon": "https://sii.pl/blog/wp-content/uploads/2022/07/cropped-logo-sii-icon-1-270x270-1-150x150.png",
        "meta_site_name": "blogersii",
        "canonical_link": "https://sii.pl/blog/en/working-with-large-sharepoint-lists/",
        "text": "While working with large SharePoint list, you have probably encountered the “The attempted operation is prohibited because it exceeds the list view threshold” error. Let’s take a close look at it and discuss how to go around this issue.\n\nBasic approach\n\nPnPjs documentation claims that getting items from a list is one of the basic actions that most applications require. It’s hard to disagree with this statement.\n\nThe straightforward way of getting elements would be using the /items endpoint with the filter parameter. Either directly through REST API:\n\nOr via PnPjs library:\n\nIt works as expected until the list overgrows, and filtering requires too much processing power.\n\nHow SharePoint does it?\n\nA user can easily filter a large list manually:\n\nIn this case, SharePoint creates a request:\n\nPayload:\n\nWe can use the /RenderListDataAsStream endpoint in our solution as well, but in slightly changed form.\n\nRenderListDataAsStream\n\nFirst of all, we need a query that filters our data. We’re going to use Collaborative Application Markup Language aka CAML. It’s based on XML and slightly resembles SQL. You may see its application in other SharePoint processes.\n\nYou can learn about CAML in another blog post.\n\nOur query would look like this:\n\nLet’s start from the top:\n\n“RowLimit” sets the number of items returned by SharePoint. “Paged” property specifies if we want to get more items page by page. In our case, we will get data in chunks of 100.\n\n“Eq” is one of many comparison operators. It simply means “equal to”. To be exact – we’re looking for items which invoice number (<FieldRef Name=”InvoiceNo”/>) is equal to (<Eq>) “01-2021A” (<Value Type=”Text”>01-2021A</Value>).\n\nMore operators can be found in the official documentation.\n\n“OrderBy” determines how filtered items should be sorted. We’re making sure that our data is ordered by ID and that it goes from smaller to bigger values.\n\nLet’s put it all together.\n\nPayload:\n\nAnd SharePoint’s response:\n\nWe can find an array of filtered items under the “Row” property.\n\nSince we requested our data in chunks, we got first set of items that meet our criteria. The next batch of elements is available under /RenderDataAsStream endpoint with a special href that can be found under “NextHref” property – “?Paged=TRUE&p_ID=2152&PageFirstRow=101&View=00000000-0000-0000-0000-000000000000”.\n\nPayload:\n\nIf the “NextHref” property is missing from the result, all data was already requested and returned.\n\nImportant elements of RenderListDataAsStream approach\n\nIndexing\n\nSharePoint presents an idea of column indexing. It’s a way of increasing the performance of loading list views. Simply put – SharePoint “is aware” of indexed data and doesn’t have to loop through all items to find it. And that exactly what we need!\n\nThis concept can be especially useful if you’re getting data through /RenderListDataAsStream endpoint and still get the threshold error. Try adding indices to columns that you use in your queries. You can do this manually in the List Settings page in the Columns section. Alternatively, you can update the “Indexed” flag on a column via PowerShell script.\n\nSharePoint list can have up to 20 indices. Unfortunately, not all column types can be indexed, including:\n\nmultiple lines of text,\n\nchoice (multi-valued),\n\ncalculated,\n\nhyperlink or picture,\n\ncustom columns,\n\nperson or group (multi-valued),\n\nexternal data.\n\nOther types:\n\nsingle line of text,\n\nchoice (single value),\n\nnumber,\n\ncurrency,\n\ndate and time,\n\nperson or group (single value),\n\nmanaged metadata,\n\nyes/no,\n\nlookup\n\ncan be easily indexed.\n\nMore about indexing can be found in Microsoft resources.\n\nRowLimit\n\nAs mentioned before, “RowLimit” property defines how many items will be returned and whether they’re paged. It’s important too look into this option, especially when you try to retrieve more items than the view threshold. For instance, my list has a default limitation of 5000 elements for a list view.\n\nIf my query filters out more items that that, the threshold error will be returned. If I paged my results:\n\nI can get all the items that meet my criteria, even if there are over 5 000 of them.\n\nScopes\n\nThe scope is a property of the “View” section of the query.\n\nIt defines what kind of items will be included in the result and how deep the query will look in the list structure. If omitted, the option will be set for “Default” – only items in the list root folder will be taken into account. Some other scopes:\n\nAll – looks for items and folders in the root folder,\n\nRecursive – looks for items in the root folder and inside the subfolders,\n\nRecursiveAll – looks for items and folders in the root folder and in the subfolders.\n\nYou should focus on the “scope” setting if you have folders in your lists structure. If the property is not defined correctly, some data may not be included in the results.\n\nUsing existing list views\n\nWe built all filters by ourselves in the examples above. That’s a great practise when our query is dynamically changing. However, when the filter values are constant, we could take another approach. We can use schema of list view that already exists.\n\nTo create a list view, we go to the Views section on the List Settings page. We could define:\n\ncolumns presented on the view,\n\nsorting of the items,\n\nfiltering of the items,\n\nand some more settings.\n\nIn my case, I need a view that filters orders marked as “Sent”. I manually create a view with corresponding settings.\n\nNow, I can use this view’s XML schema in my code.\n\nFirstly, I’ll get the view definition.\n\nAnd then retrieve the data using the view’s schema.\n\nBuilding XMLs with external libraries\n\nBuilding custom view definitions can be tedious. To speed up the process, we could use some external libraires. My personal favorite is CamlJs.\n\nFirstly, we create the builder object:\n\nThen we build the query:\n\nAnd use it as before:\n\nSpecial parameters that we should be aware of\n\nThe definitions of view XML and paging are two of the /RenderListData parameters. The parameters are optional, but you should definitely be aware that they exist. Most of them are self-explanatory:\n\nAddRequiredFields,\n\nAllowMultipleValueFilterForTaxonomyFields,\n\nDatesInUtc,\n\nExpandGroups,\n\nFirstGroupOnly,\n\nFolderServerRelativeUrl,\n\nImageFieldsToTryRewriteToCdnUrls,\n\nOverrideViewXml,\n\nRenderOptions,\n\nReplaceGroup.\n\nFolderServerRelativeUrl\n\nSharePoint will run our quires in the root folder of the list by default. To change that, we can define the FolderServerRelativeUrl parameter. “Server relative” means that the URL should start from the /sites/ part. For instance: “/sites/Test/Lists/Shipping Orders/Europe”. This way API will look for items only in the “Europe” folder.\n\nRenderOptions\n\nBeside the list items, SharePoint can return some other information, for instance: list schema, view metadata, media URLs or some data about files and folders. To define what we need, we should set up the RenderOptions parameter."
    }
}