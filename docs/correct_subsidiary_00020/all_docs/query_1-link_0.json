{
    "id": "correct_subsidiary_00020_1",
    "rank": 0,
    "data": {
        "url": "https://learn.microsoft.com/en-us/sharepoint/dev/solution-guidance/upload-web-parts-in-sharepoint",
        "read_more_link": "",
        "language": "en",
        "title": "Upload web parts in SharePoint",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2022-06-29T08:52:00+00:00",
        "summary": "",
        "meta_description": "Describes how to upload web parts in SharePoint, outlines how to use the Core.AppScriptPart add-in, and provides additional references.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/sharepoint/dev/solution-guidance/upload-web-parts-in-sharepoint",
        "text": "Deploy pre-configured, standard SharePoint web parts for your users.\n\nApplies to: SharePoint 2013 | SharePoint Add-ins | SharePoint Online\n\nYou can upload pre-configured, standard SharePoint web parts for users to add to their SharePoint sites. For example, you can upload a pre-configured:\n\nScript Editor Web Part that uses JavaScript files on the remote web.\n\nContent Search Web Part.\n\nThis article discusses pre-configuring the Script Editor Web Part to use JavaScript files on the remote web to perform UI customization. Use this solution to:\n\nUse script files from the remote web in your web parts rather than referencing scripts from the Site Assets list on the host web.\n\nDeploy pre-configured web parts in your custom site provisioning process. For example, as part of your custom site provisioning process, you might want to display site usage policy information to the user when a new site is created.\n\nAutomatically load filtered content in your web parts for your users. For example, your script file can display local news information read from an external system.\n\nAllow users to add additional functionality to their site by using web parts from the Web Part Gallery.\n\nBefore you begin\n\nTo get started, download the Core.AppScriptPart sample add-in from the Office365 Developer patterns and practices project on GitHub.\n\nUsing the Core.AppScriptPart add-in\n\nWhen you run the code sample and choose Run Scenario:\n\nChoose Back to Site.\n\nChoose PAGE > Edit > INSERT > Web Part.\n\nIn Categories, choose Add-in Script Part, and then choose User profile information.\n\nChoose Add.\n\nIn the drop-down in the upper-right corner of the User profile information Web Part, choose Edit Web Part.\n\nChoose EDIT SNIPPET.\n\nReview the <SCRIPT> element.\n\nNotice that the src attribute links to a JavaScript file on the remote web. The <SCRIPT> element is set by the Content property in the Core.AppScriptPartWeb\\userprofileinformation.webpart, as shown in the following example. The JavaScript file linked to by the src attribute is Core.AppScriptPartWeb\\Scripts\\userprofileinformation.js. Userprofileinformation.js reads the current user's profile information from the user profile service, and then displays this information in the Web Part.\n\nNote\n\nThe code in this article is provided as-is, without warranty of any kind, either express or implied, including any implied warranties of fitness for a particular purpose, merchantability, or non-infringement.\n\n<property name=\"Content\" type=\"string\">&amp;lt;script type=\"text/javascript\" src=\"https://localhost:44361/scripts/userprofileinformation.js\"&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div id=\"UserProfileAboutMe\"&amp;gt;&amp;lt;div&amp;gt; </property>\n\nChoose Cancel.\n\nChoose Save.\n\nNote\n\nIf your user profile image does not display, open your OneDrive for Business site, and then return to the host web.\n\nIn Core.AppScriptPartWeb\\Pages\\Default.aspx, Run Scenario runs btnScenario_Click, which does the following:\n\nGets a reference to the Web Part Gallery folder.\n\nUses FileCreationInformation to create the userprofileinformation.webpart file to upload from the provider-hosted add-in to the Web Part Gallery. The folder.Files.Add method adds the file to the Web Part Gallery.\n\nRetrieves all list items in the Web Part Gallery, and then searches for userprofileinformation.webpart.\n\nWhen userprofileinformation.webpart is found, assigns the Web Part to a custom group named Add-in Script Part.\n\nprotected void btnScenario_Click(object sender, EventArgs e) { var spContext = SharePointContextProvider.Current.GetSharePointContext(Context); using (var clientContext = spContext.CreateUserClientContextForSPHost()) { var folder = clientContext.Web.Lists.GetByTitle(\"Web Part Gallery\").RootFolder; clientContext.Load(folder); clientContext.ExecuteQuery(); // Upload the \"userprofileinformation.webpart\" file. using (var stream = System.IO.File.OpenRead( Server.MapPath(\"~/userprofileinformation.webpart\"))) { FileCreationInformation fileInfo = new FileCreationInformation(); fileInfo.ContentStream = stream; fileInfo.Overwrite = true; fileInfo.Url = \"userprofileinformation.webpart\"; File file = folder.Files.Add(fileInfo); clientContext.ExecuteQuery(); } // Update the group that the Web Part belongs to. Start by getting all list items in the Web Part Gallery, and then find the Web Part that was just uploaded. var list = clientContext.Web.Lists.GetByTitle(\"Web Part Gallery\"); CamlQuery camlQuery = CamlQuery.CreateAllItemsQuery(100); Microsoft.SharePoint.Client.ListItemCollection items = list.GetItems(camlQuery); clientContext.Load(items); clientContext.ExecuteQuery(); foreach (var item in items) { // Create new group. if (item[\"FileLeafRef\"].ToString().ToLowerInvariant() == \"userprofileinformation.webpart\") { item[\"Group\"] = \"add-in Script Part\"; item.Update(); clientContext.ExecuteQuery(); } } lblStatus.Text = string.Format(\"add-in script part has been added to Web Part Gallery. You can find 'User Profile Information' script part under 'App Script Part' group in the <a href='{0}'>host web</a>.\", spContext.SPHostUrl.ToString()); } }\n\nSee also"
    }
}