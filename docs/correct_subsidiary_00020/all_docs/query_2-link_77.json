{
    "id": "correct_subsidiary_00020_2",
    "rank": 77,
    "data": {
        "url": "https://dokumen.pub/sharepoint-2010-web-parts-in-action-pap-pscnbsped-1935182773-9781935182771.html",
        "read_more_link": "",
        "language": "en",
        "title": "SharePoint 2010 Web Parts in Action [Pap/Psc&nbsp;ed.] 1935182773, 9781935182771",
        "top_image": "https://dokumen.pub/img/sharepoint-2010-web-parts-in-action-pap-pscnbsped-1935182773-9781935182771.jpg",
        "meta_img": "https://dokumen.pub/img/sharepoint-2010-web-parts-in-action-pap-pscnbsped-1935182773-9781935182771.jpg",
        "images": [
            "https://dokumen.pub/dokumenpub/assets/img/dokumenpub_logo.png",
            "https://dokumen.pub/img/200x200/sharepoint-2010.jpg",
            "https://dokumen.pub/img/200x200/sharepoint-2010-developpez-en-net-pour-personnaliser-sharepoint-9782746059184-2746059185.jpg",
            "https://dokumen.pub/img/200x200/microsoft-sharepoint-2010-for-dummies-9780470476437.jpg",
            "https://dokumen.pub/img/200x200/microsoft-sharepoint-2010-unleashed-9780672333255-0672333252.jpg",
            "https://dokumen.pub/img/200x200/web-components-in-action-9781617295775.jpg",
            "https://dokumen.pub/img/200x200/microsoft-sharepoint-2010-building-solutions-for-sharepoint-2010-description-based-on-print-version-record-includes-index-9781430228653-1430228652.jpg",
            "https://dokumen.pub/img/200x200/lockmasters-2010-safe-locks-parts-catalog.jpg",
            "https://dokumen.pub/img/200x200/sharepoint-2010-disaster-recovery-guide-2nbsped-1435456459-9781435456457.jpg",
            "https://dokumen.pub/img/200x200/sharepoint-development-with-visual-studio-2010-9780321718310-0321718313.jpg",
            "https://dokumen.pub/img/200x200/sharepoint-2010-how-to-9780672333354-067233335x-9780132487481-0132487489.jpg",
            "https://dokumen.pub/img/200x200/sharepoint-2010-web-parts-in-action-pap-pscnbsped-1935182773-9781935182771.jpg",
            "https://dokumen.pub/dokumenpub/assets/img/dokumenpub_logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "If you look at a SharePoint application you’ll find that most of its active components are Web Parts. SharePoint 2010 in...",
        "meta_lang": "en",
        "meta_favicon": "https://dokumen.pub/dokumenpub/assets/img/apple-icon-57x57.png",
        "meta_site_name": "dokumen.pub",
        "canonical_link": "https://dokumen.pub/sharepoint-2010-web-parts-in-action-pap-pscnbsped-1935182773-9781935182771.html",
        "text": "Citation preview\n\nSharePoint 2010 Web Parts in Action\n\nWICTOR WILÉN\n\nMANNING Greenwich (74° w. long.)\n\nFor online information and ordering of this and other Manning books, please visit www.manning.com. The publisher offers discounts on this book when ordered in quantity. For more information, please contact Special Sales Department Manning Publications Co. 180 Broad Street, Suite 1323 Stamford, CT 06901 Email: [email protected] ©2011 by Manning Publications Co. All rights reserved. No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by means electronic, mechanical, photocopying, or otherwise, without prior written permission of the publisher.\n\nMany of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in the book, and Manning Publications was aware of a trademark claim, the designations have been printed in initial caps or all caps. Recognizing the importance of preserving what has been written, it is Manning’s policy to have the books we publish printed on acid-free paper, and we exert our best efforts to that end. Recognizing also our responsibility to conserve the resources of our planet, Manning books are printed on paper that is at least 15 percent recycled and processed without the use of elemental chlorine.\n\nManning Publications Co. 180 Broad Street, Suite 1323 Stamford, CT 06901\n\nDevelopment editor: Copyeditor: Typesetter: Cover designer:\n\nISBN 9781935182771 Printed in the United States of America 1 2 3 4 5 6 7 8 9 10 – MAL – 16 15 14 13 12 11\n\nSusan Harkins Liz Welch Gordan Salinovic Marija Tudor\n\nbrief contents PART 1\n\nPART 2\n\nINTRODUCING SHAREPOINT 2010 WEB PARTS . ....................1 1\n\n■\n\nIntroducing SharePoint 2010 Web Parts\n\n3\n\n2\n\n■\n\nUsing and configuring Web Parts in SharePoint 2010\n\n24\n\nDEVELOPING SHAREPOINT 2010 WEB PARTS ......................53 3\n\n■\n\nBuilding Web Parts with Visual Studio 2010\n\n4\n\n■\n\nBuilding the user interface\n\n5\n\n■\n\nMaking Web Parts customizable\n\n6\n\n■\n\nWeb Part resources and localization\n\n7\n\n■\n\nPackaging, deployment, and security\n\n8\n\n■\n\nTools for troubleshooting and logging\n\n9\n\n■\n\nProgramming and caching for performance\n\n10\n\n■\n\nDynamic interfaces in Web Parts\n\n11\n\n■\n\nThe Client Object Model and Silverlight Web Parts\n\n12\n\n■\n\nMaking Web Parts mobile 291\n\n13\n\n■\n\nDesign patterns and testability\n\nvii\n\n55\n\n79 110 148 171 201 221\n\n242\n\n309\n\n274\n\nviii\n\nPART 3\n\nBRIEF CONTENTS\n\nDASHBOARDS AND CONNECTIONS .....................................333 14\n\n■\n\nConnecting Web Parts\n\n335\n\n15\n\n■\n\nBuilding pages and dashboards\n\n359\n\ncontents preface xvii acknowledgments xviii about this book xx about the cover illustration about Web Parts xxiv\n\nxxiii\n\nPART 1 INTRODUCING SHAREPOINT 2010 WEB PARTS..........1\n\n1\n\nIntroducing SharePoint 2010 Web Parts 1.1 1.2 1.3\n\n3\n\nWhat is a Web Part? 5 Why use Web Parts? 7 Introducing the Web Part infrastructure\n\n9\n\nWeb Part page 9 Web Part Manager 10 Web Part zones 10 Web Part elements 12 Web Part Gallery 12 ■\n\n■\n\n■\n\n1.4\n\n■\n\nTypes of Web Parts\n\n12\n\nASP.NET 2 Web Parts 13 SharePoint Web Parts 14 Changes in the Web Part infrastructure for SharePoint 2010 ■\n\n1.5 1.6\n\nHello World example 16 SharePoint 2010 pages 17 Application pages 18\n\n1.7\n\n15\n\nSummary\n\n22 ix\n\n■\n\nSite Pages\n\n18\n\n■\n\nMaster pages\n\n22\n\nx\n\nCONTENTS\n\n2\n\nUsing and configuring Web Parts in SharePoint 2010 24 2.1\n\nThe SharePoint 2010 user interface\n\n25\n\nThe new SharePoint user interface and the Ribbon interface improvements 26\n\n2.2\n\nThe Web Part Gallery\n\n25\n\nOther\n\n■\n\n27\n\nWhat is the Web Part Gallery? 28 Uploading or adding new Web Parts to the gallery 29 Editing Web Parts in the gallery 29 Grouping the Web Parts 30 Permissions on Web Parts in the gallery 30 ■\n\n■\n\n■\n\n■\n\n2.3\n\nOut-of-the-box Web Parts\n\n31\n\nSharePoint Foundation 2010\n\n2.4\n\n31\n\n■\n\nSharePoint Server 2010 33\n\nWorking with Web Parts and pages\n\n38\n\nCreating a page using the web interface 38 Adding Web Parts using the web interface 39 Filtering a Web Part using Web Part connections 41 ■\n\n■\n\n2.5\n\nCustomizing and personalizing pages Shared view 43 Personal view 43 Parts 44 Maintenance view 44 ■\n\n■\n\n42\n\nClosing and deleting Web\n\n■\n\n2.6\n\nSharePoint Designer 2010 45 Adding Web Parts to a page 46 Adding a Web Part using SharePoint Designer 2010 47 Configuring Web Parts using SharePoint Designer 2010 47 Adding pages 48 Editing pages and adding zones 48 Import and export of solutions using SharePoint Designer 49 ■\n\n■ ■\n\n■\n\n■\n\n2.7\n\nExporting and importing Web Parts\n\n49\n\nExporting a Web Part 50 Importing a Web Part 50 Prohibiting the export of a Web Part 51 ■\n\n2.8\n\nSummary\n\n51\n\nPART 2 DEVELOPING SHAREPOINT 2010 WEB PARTS .........53\n\n3\n\nBuilding Web Parts with Visual Studio 2010 3.1 3.2 3.3\n\n55\n\nRequirements for your development environment 56 Developing for SharePoint 2010 in Visual Studio 2010 57 Building your first Visual Web Part 59 The Visual Web Part template 60 The SharePoint Customization wizard 61 Explore the SharePoint Project Items 62 Adding functionality to your Visual Web Part 65 Build and deploy the Visual Web Part 67 Take your Web Part for a test drive 69 ■\n\n■\n\n■\n\n■\n\n■\n\nxi\n\nCONTENTS\n\n3.4\n\nTraditional Web Part projects\n\n70\n\nCreate an empty SharePoint project 71 Adding the Web Part to the project 71 Adding controls to the Web Part 73 Adding the buttonclick event manually 74 Testing and debugging your Web Part 74 ■\n\n■\n\n■\n\n■\n\n3.5\n\nUpgrading SharePoint 2007 projects\n\n75\n\nUpgrading from Visual Studio Extension for WSS 1.3 75 Upgrading from other project types 75\n\n3.6 3.7 3.8 3.9\n\n4\n\nSharePoint Project settings in Visual Studio 76 SharePoint Server Explorer in Visual Studio 77 Extensibility in Visual Studio 2010 78 Summary 78\n\nBuilding the user interface 4.1\n\n79\n\nASP.NET and Web Parts\n\n80\n\nAdding controls to the Web Part 80 The event flow for a Web Part 81 Working with view state 85 Using validators 87 Custom controls and user controls 89 ■\n\n■\n\n4.2\n\n■\n\nSharePoint controls\n\n92\n\nDefault SharePoint controls in Visual Studio SharePoint controls 93\n\n4.3\n\nLook and feel of Web Parts\n\n92\n\nStandard\n\n■\n\n97\n\nCSS in SharePoint 97 Custom style sheets 99 SharePoint themes 102 Web compliancy 104 Web Part icons 105 ■\n\n■\n\n■\n\n4.4\n\n■\n\nWeb Part verbs\n\n106\n\nAdding verbs to a Web Part 107 verbs 108\n\n4.5\n\n5\n\nSummary\n\nEvent flow when using Web Part\n\n109\n\nMaking Web Parts customizable 5.1\n\n■\n\nWeb Part properties\n\n110\n\n111\n\nAdding a property 111 Customizing the property 114 Custom categories 115 Default values on properties 116 Properties used in the Web Part class and defined in SharePoint 119 Properties in Visual Web Parts 119 Personalization 120 Storing URLs in Web Part properties 121 Static Web Parts 121 Web Part previews 122 Error handling in Web Part properties 122 ■\n\n■\n\n■\n\n■\n\n■\n\n■\n\n■\n\n■\n\n■\n\n■\n\n5.2\n\nCommon Web Part properties Appearance properties 123 Advanced properties 124\n\n■\n\n123\n\nLayout properties 124\n\nxii\n\nCONTENTS\n\n5.3\n\nCustom Editor Parts\n\n126\n\nCreate a custom Editor Part 127 Add the custom Editor Part to the Web Part 128 Validating properties 130 Property dependencies 131 Visual appearance of the Editor Part interface 133 ■\n\n■\n\n5.4\n\n■\n\nAdvanced properties\n\n135\n\nDefine the property 136 Problems with complex types Create a type converter 137 ■\n\n5.5\n\nRuntime filters\n\n137\n\n140\n\nThe AuthorizationFilter property 140 Create a runtime filter 141 Create the user filter control 143 Register the runtime filter 145 Use the filter 146 Overriding the default Target Audiences filter 147 ■\n\n■\n\n■\n\n5.6\n\n6\n\nSummary\n\n147\n\nWeb Part resources and localization 148 6.1\n\nLinking and embedding resources\n\n149\n\nUsing the SharePoint root folders 149 Using class resources 151 Embedded resources 153 Resources in SharePoint libraries 155 URL Expression Builder in SharePoint 2010 Server 156 ■\n\n■\n\n6.2\n\nLocalization resources in Web Parts\n\n157\n\nLocalization methods 157 Localizing code 159 Localizing Visual Web Part user controls 160 Localizing the Feature 161 Localizing the Web Parts control description file 162 Localizing Web Part properties 163 Localizing using satellite assemblies 165 Localizing style sheets, scripts, and images 167 Other localization considerations 169 ■\n\n■\n\n■\n\n■\n\n■\n\n■\n\n6.3\n\n7\n\nSummary\n\n170\n\nPackaging, deployment, and security 7.1\n\nSolution packages\n\n171\n\n172\n\nWindows SharePoint package files 172 SharePoint Features 173 Safe controls and the RequiresDesignerPermission attribute 178 ■\n\n7.2\n\nDeployment and activation\n\n180\n\nSolution deployment using PowerShell and deactivation 183\n\n7.3\n\nSandboxed solutions\n\n180\n\n■\n\nFeature activation\n\n184\n\nWhat is sandboxing? 185 Configuring the sandbox 186 Deploying and installing sandboxed solutions 187 Full-trust proxies 187 ■\n\n■\n\nxiii\n\nCONTENTS\n\n7.4\n\nWeb application targeted solutions\n\n190\n\nBuilding solutions for web application deployment 190 Code Access Security policies 192 Custom CAS policies 192 ■\n\n■\n\n7.5\n\nUpgrading solutions\n\n194\n\nHow to upgrade 195 Upgrading Features 195 redirection 197 Upgrading Web Parts 198 ■\n\n■\n\nAssembly\n\n■\n\n7.6\n\n8\n\nSummary\n\n200\n\nTools for troubleshooting and logging 201 8.1\n\nLogging and error handling in SharePoint 2010 202 Introducing the correlation id 203 SharePoint trace logs 204 Searching the trace logs 205 Custom logging to trace logs 206 Error handling in sandboxed solutions 207 ■\n\n■\n\n8.2\n\nDebugging Web Parts with Visual Studio 2010 208 Attaching to processes 208 Debugging sandboxed solutions 209 Debugging feature receivers 210 ■\n\n■\n\n8.3\n\nThe Developer Dashboard\n\n210\n\nEnabling the Developer Dashboard 210 Using the Developer Dashboard 211 Using monitored scopes 212 Logging using scoped performance monitors 213 Custom logging to the Developer Dashboard 215 ■\n\n■\n\n■\n\n■\n\n8.4 8.5\n\nCustom error handling 215 Other debugging tools 217 ASP.NET tracing 218 Internet Explorer Developer Tools or Firebug 219 Fiddler web proxy 219 ■\n\n■\n\n8.6\n\n9\n\nSummary\n\n220\n\nProgramming and caching for performance 9.1\n\nProgramming for performance\n\n221\n\n222\n\nComputational performance 222 Object and memory usage 222 Scalability 222 Perceived performance ■\n\n■\n\n9.2\n\n■\n\nProgramming for performance in SharePoint\n\n223\n\n223\n\nProper handling of SharePoint objects 224 Make smarter queries to SharePoint 225 Asynchronous operations 227 Improve performance of resources 230 ■\n\n■\n\n9.3\n\nCaching techniques\n\n■\n\n232\n\nASP.NET caching 233 Caching resources 238\n\n9.4\n\nSummary\n\n241\n\n■\n\nCaching objects and structures 235\n\nxiv\n\nCONTENTS\n\n10\n\nDynamic interfaces in Web Parts 10.1\n\n242\n\nUsing Ajax and JavaScript in Web Parts\n\n243\n\nWorking with Microsoft ASP.NET AJAX Extensions 243 JavaScripts in Web Parts 246 Working with jQuery 248 ■\n\n10.2\n\nUsing the SharePoint dynamic UI features Notification messages and the status bar framework 254\n\n10.3\n\nEnabling a Web Part to use the Ribbon Adding controls to the Ribbon aware 263\n\n10.4\n\n11\n\n251\n\nSummary\n\n258\n\n■\n\n■\n\n251 The dialog\n\n258\n\nMaking a Web Part context\n\n273\n\nThe Client Object Model and Silverlight Web Parts 274 11.1\n\nThe Client Object Model 275 What is the ECMAScript Client Object Model? 275 with the Client Object Model and Web Parts 276\n\n11.2\n\nSilverlight Web Parts\n\n■\n\nWorking\n\n279\n\nSharePoint Silverlight Web Part 279 Building a Silverlight SharePoint application 280 Input parameters to the Silverlight Web Part 283 Packaging the Silverlight Web Part 284 Preconfiguring the Silverlight Web Part 286 Custom Silverlight Web Part 287 Enabling custom Silverlight Web Part interaction with SharePoint 289 ■\n\n■\n\n■\n\n■\n\n■\n\n11.3\n\n12\n\nSummary\n\n290\n\nMaking Web Parts mobile 12.1\n\n291\n\nSharePoint 2010 mobile interface\n\n292\n\nUsing the mobile SharePoint 2010 interface 292 Page, form, and Web Part support 293 Supported mobile Web Parts 294 Supported devices 294 Browser definition files 295 ■\n\n■\n\n■\n\n12.2\n\nMobile Web Part adapters Create a mobile adapter 297\n\n12.3 12.4\n\n13\n\nMobile controls Summary 307\n\nDesign patterns\n\n■\n\nRegister a mobile adapter\n\n305\n\nDesign patterns and testability 13.1\n\n296\n\n309\n\n310\n\nWhat are design patterns? 310 Dependency injection 312\n\n■\n\nLoose coupling\n\n311\n\n299\n\nxv\n\nCONTENTS\n\n13.2\n\nThe Model-View-Presenter pattern\n\n313\n\nThe Passive View pattern 313 The Supervising Controller pattern 315 MVP and Web Parts 315 ■\n\n■\n\n13.3\n\nSharePoint Service Locator 320 Service locators\n\n13.4\n\n321\n\nTesting Web Parts\n\nUse the SharePoint Service Locator 321\n\n■\n\n326\n\nUnit-testing 326 Creating a test project objects 328 Test the Web Part 329 ■\n\n327\n\n■\n\nMock\n\n■\n\n13.5\n\nSummary\n\n332\n\nPART 3 DASHBOARDS AND CONNECTIONS ........................333\n\n14\n\nConnecting Web Parts 14.1 14.2\n\n335\n\nIntroducing Web Part connections Connecting Web Parts 337\n\n336\n\nConnecting using the web interface 337 Connecting using SharePoint Designer 338 Connection permissions 339 ■\n\n■\n\n14.3\n\nCreating connectable Web Parts\n\n340\n\nConnect using custom interfaces 340 Connect using standard connections 346 Ajax and Web Part connections 352 ■\n\n■\n\n14.4\n\nFilter Web Parts\n\n354\n\nDefault filter Web Parts 354 Web Part transformers 355 The ITransformableFilterValues interface 357 ■\n\n14.5\n\n15\n\nSummary\n\n358\n\nBuilding pages and dashboards 15.1\n\nWorking with pages\n\n360\n\nPages and Web Part zones 360\n\n15.2\n\n359\n\nDeploying dashboards\n\n■\n\nThe Web Part Manager 365\n\n367\n\nDeploying using a Feature 367 Deploying using a Feature receiver 370 Static dashboards 372 Dashboards with a sandboxed Web Part 374 Deploying using a site definition 376 ■\n\n■\n\n■\n\n■\n\n15.3 appendix A\n\nSummary\n\n377\n\nOut-of-the-box WebParts in SharePoint 2010 index 409\n\n379\n\npreface I really love working with SharePoint! I’ve been doing it full-time for the last half decade, including lots of late nights and weekends. One area that I’ve found particularly interesting is Web Parts. I like the nature of a Web Part since it can act as a standalone application inside the powerful SharePoint platform—or it can interact both with SharePoint and other Web Parts. A couple of years ago I owned a company that built its own portal software (which integrated with SharePoint, but that’s another story), and that product was based on a similar concept. When we started building our solutions on SharePoint, Web Parts was the way to go since we were used to the approach. One day I came up with an idea for a book about Web Parts. Yes, nearly all SharePoint platform books cover Web Parts, but not as deeply as I wanted to. I felt that there were much more to say about them. This book is the result. As I was working on the outline, SharePoint 2010 was unleashed from Redmond, and I thought that this must be it—perfect timing. After signing a contract with Manning I thought, this can’t be too hard, just start writing. I couldn’t have been more wrong! Writing a book isn’t easy, especially if English isn’t your native language, and writing about a product that isn’t yet production-ready doesn’t make it any easier. But, you do learn a lot in the process, and that is why I decided, in the end, to continue. Nearly every day over the last eight months of writing this book, I learned something new about SharePoint, or about writing, and that’s my reward. Now it’s your turn to learn something new. I hope you enjoy reading this book as much as I enjoyed writing it.\n\nxvii\n\nacknowledgments This is the section I always read in a book, and one I’ve always wanted to write. From reading others’ acknowledgments, I knew that writing a book is never a solo mission; there are many people involved in many ways. And it was no different for my book. I’d like to start with thanking my family—Cecilia, Wilma, and Alicia. Before I embarked on this book project, I made sure that I had a great support system at home. My family helped and encouraged me in every way possible, even though they don’t share my passion for SharePoint. (Not yet!) You are my everything. This book wouldn’t exist without the community that has evolved around SharePoint. All the amazing people who write books, blogs, and freely share information have helped bring SharePoint, and my knowledge of it, to where we are today. Being a part of this community, as well as being awarded MVP for SharePoint while writing this book, makes me very proud. Next, I would like to thank the Manning crew, especially Michael Stephens who believed in the idea for this book and helped turn it into reality. Also, my agent Neil Salkind deserves a thank you for stitching the deal together. But the most important person during the writing process was Susan Harkins, my development editor at Manning. From day one she supported and coached me every step of the way. She has been an amazing teacher. Thank you, Susan! Writing a book on a specialized topic takes a lot of research and review and I had great technical reviewers and experts who gave me inspiration, ideas, and suggestions along the way. Sincere thanks to the following reviewers who read the manuscript at different stages during its development—your input made this a better book: Jonas Bandi,\n\nxviii\n\nACKNOWLEDGMENTS\n\nxix\n\nAmos Bannister, Margriet Bruggeman, Nikander Bruggeman, Berndt Hamboeck, Kunal Mittal, Niclas Goude, and Christina Wheeler. And special thanks to Waldek Mastykarz, Anders Rask, and Tobias Zimmergren for sharing their exceptional expertise with me, and to Tobias again, for a final technical proofread of the manuscript during production.\n\nabout this book This book focuses on Web Part development in SharePoint 2010 using Visual Studio 2010. It takes you on a journey from learning what a Web Part is and how you can use Web Parts, to building your own Web Parts in different and advanced ways. When you have read it, you should be a fairly skilled SharePoint Web Part developer, ready to take on challenging projects.\n\nHow this book is organized This book covers Web Part development from basic to advanced scenarios and is divided into three parts. Each chapter can stand on its own and you can use it as a reference when looking at a particular scenario. The first part, consisting of chapters 1 and 2, is about Web Parts in general—to get you started. These two chapters explain the parts of a Web Part, how a Web Part fits into SharePoint, and how to use Web Parts in the SharePoint user interface, as well as in SharePoint Designer. Part 2 is where the action begins. It consists of 11 chapters that start you off building basic Web Parts using Visual Studio 2010. You will learn how to build configurable and personalizable Web Parts and how to package and deploy them in a maintainable way. Once you have learned the basics, discussion of advanced topics in subsequent chapters, such as building contextual-aware and Silverlight Web Parts, will show you how to take your Web Parts one step further. One of these (chapter 8) is dedicated to troubleshooting; you will learn how to debug Web Parts and how to make troubleshooting easier—or avoid it entirely. New techniques introduced in SharePoint 2010,\n\nxx\n\nABOUT THIS BOOK\n\nxxi\n\nsuch as the Client Object Model, the Sandbox, and PowerShell are also covered. Part 2 ends with a chapter that focuses on design patterns and the latest guidelines released by Microsoft. The third and final part (chapters 14 and 15) covers end-to-end scenarios where you learn how to connect Web Parts so that they interact with each other. In chapter 15 you learn how to deploy solutions of pre-configured site pages with connected Web Parts. Finally, an appendix lists the most commonly used out-of-the-box Web Parts. For each Web Part, the corresponding class, feature, and its connection end-points are documented.\n\nWho should read this book SharePoint 2010 Web Parts in Action is a book for SharePoint developers. Web Parts is one of the core concepts of SharePoint and a requirement when you are building enterprise portal solutions. The book assumes that you have basic knowledge of SharePoint and development in ASP.NET using C#. Even if you’re already a skilled SharePoint developer you will find details that you haven’t seen before or even thought possible.\n\nHow to use this book If you are new to SharePoint 2010 development you should read this book in order, from chapter 1 to the end. The first chapters will give you a good start and a smooth introduction to SharePoint Web Part development and Visual Studio. Experienced SharePoint developers should start with chapter 4. Even though this chapter may contain information that you already know, or think you know, it points out some commonly made mistakes. From there, the chapters will drill deeper and deeper into Web Part development. And you can always refer back to specific chapters when looking for a specific solution.\n\nCode conventions and downloads This book contains a lot of code listings and snippets. All compilable code is written using C# but since this is a SharePoint book you will also see XML snippets. All code is written using a fixed font like this, and if you are reading on an eReader or in PDF format, you will see that the code is color coded. Some code listings and snippets contain annotations to highlight important topics. You can download the source code for many of the samples in this book from the publisher’s website at www.manning.com/SharePoint2010WebPartsinAction.\n\nSoftware requirements To take full advantage of this book you need to have a copy of SharePoint 2010 Foundation and Visual Studio 2010 (not the Express version). Preferably, you should have access to a virtual environment. Chapter 3 has detailed information about software requirements.\n\nxxii\n\nABOUT THIS BOOK\n\nAuthor Online The purchase of SharePoint 2010 Web Parts in Action includes access to a private forum run by Manning Publications where you can make comments about the book, ask technical questions, and receive help from the author and other users. To access and subscribe to the forum, point your browser to www.manning.com/ SharePoint2010WebPartsinAction, and click the Author Online link. This page provides information on how to get on the forum once you are registered, what kind of help is available, and the rules of conduct in the forum. Manning’s commitment to our readers is to provide a venue where a meaningful dialogue between individual readers and between readers and the author can take place. It’s not a commitment to any specific amount of participation on the part of the author, whose contribution to the book’s forum remains voluntary (and unpaid). We suggest you try asking the author some challenging questions, lest his interest stray! The Author Online forum and the archives of previous discussions will be accessible from the publisher’s website as long as the book is in print.\n\nAbout the author Wictor Wilén is a SharePoint Architect at Connecta AB with more than 12 years of experience in the web content management and portal industry. He has worked for consulting companies, founded and sold his own software company, and experienced the beginnings of SharePoint back in 2001. He is an active SharePoint community participant, writer, tutor, and frequent speaker at local and international conferences. In 2010 Wictor was awarded the SharePoint Server MVP title by Microsoft for his community contributions. He can be found online at http://www.wictorwilen.se/. Wictor is based in Stockholm, Sweden.\n\nabout the cover illustration The figure on the cover of SharePoiont 2010 Web Parts in Action is called “The Gentleman.” The illustration is taken from a French travel book, Encyclopédie des Voyages by J. G. St. Saveur, published almost 200 years ago. Travel for pleasure was a relatively new phenomenon at the time and travel guides such as this one were popular, introducing both the tourist as well as the armchair traveler to the inhabitants of other regions of the world, as well as to the regional costumes and uniforms of French soldiers, civil servants, tradesmen, merchants, and peasants. The diversity of the drawings in the Encyclopédie des Voyages speaks vividly of the uniqueness and individuality of the world’s towns and provinces just 200 years ago. Isolated from each other, people spoke different dialects and languages. In the streets or in the countryside, it was easy to identify where they lived and what their trade or station in life was just by what they were wearing. Dress codes have changed since then and the diversity by region, so rich at the time, has faded away. It’s now often hard to tell the inhabitant of one continent from another. Perhaps, trying to view it optimistically, we’ve traded a cultural and visual diversity for a more varied personal life. Or a more varied and interesting intellectual and technical life. We at Manning celebrate the inventiveness, the initiative, and the fun of the computer business with book covers based on the rich diversity of regional life of two centuries ago brought back to life by the pictures from this travel guide.\n\nxxiii\n\nabout Web Parts Before we start our journey into SharePoint 2010 Web Parts, let’s take a look at the history of SharePoint and how Web Parts came to be. Microsoft announced the concept of Web Parts in the middle of 2000, which was before SharePoint existed as a product. It seems like ages ago. The aim of Web Parts was the same then as it is now. At the time, Web Parts was a part of the since longforgotten Digital Dashboard, an ASP, XML, and VBScript-based portal framework. “In Web Parts, we are providing the building blocks for next-generation digital dashboard solutions…,” wrote Bob Muglia in June 2000, later President of Microsoft’s Server and Tools Business. When SharePoint Portal Server 2001, called Tahoe, was released, it was based on the Digital Dashboard and used Web Parts to create the portal. This was the first real step towards the SharePoint of today. SharePoint at the time was not based on Microsoft SQL Server but rather on the Microsoft Exchange Web Storage System (WSS) and its focus was on document management rather than portals. In 2003, Windows SharePoint Services 2.0 and SharePoint Portal Server 2003 were released, based on the relatively new Microsoft .NET Framework, first released in 2002. Web Parts was introduced as a class in the SharePoint API and you had to compile your code into assemblies instead of simply writing a VBScript object. That’s how Web Parts started and with SharePoint 2003 you could build scalable, customizable, and personalizable web portals. Microsoft .NET Framework 2.0 was released in 2005 and by then Microsoft had enhanced and incorporated the Web Part concept into the ASP.NET framework. The\n\nxxiv\n\nABOUT\n\nWEB PARTS\n\nxxv\n\nWeb Part Manager was introduced to manage the Web Parts, which previously had been managed exclusively through zones. This new Web Part infrastructure allowed anyone to create their own Web Part-based site, using their own providers for storing customizations. For further reading on the internals of the ASP.NET 2.0 Web Part infrastructure, I recommend Manning’s ASP.NET Web Parts in Action by Darren Neimke, published in 2006. SharePoint 2007, Windows SharePoint Services 3.0, and Microsoft Office SharePoint Server 2007, was a huge release. SharePoint had finally become a major player in the portal market. It was based on ASP.NET 2.0 and therefore based on the ASP.NET built-in Web Part infrastructure. For backwards compatibility reasons the Web Part class introduced in SharePoint 2003 was kept, and you could use both versions for your Web Parts, both with different abilities. The development tools for SharePoint and Web Parts, compared to other .NET-based projects, were inferior in the beginning and had to rely on the community for improvements. The lack of a visual editor for Web Parts made the Web Part development threshold high. The community around SharePoint has been extremely interesting, professional, and entertaining since the release of SharePoint 2007. The community understood early on the lack of proper development tools and a number of excellent tools were born, such as WSPBuilder by Carsten Keutmann (http://wspbuilder .codeplex.com) and STSDev by Ted Pattison et al. (http://stsdev.codeplex.com). Today, we have SharePoint 2010. It’s based on Microsoft .NET Framework 3.5 Service Pack 1, which is essentially Microsoft .NET Framework 2.0 with a set of extensions. So the baseline is still the same as in SharePoint 2007: we can still use both versions of the Web Part, but a new one has been introduced for the Visual Web Part, which is based on the ASP.NET 2.0 Web Part. SharePoint 2010, together with Visual Studio 2010 will affect the lives of developers: we can now, just as easily as for any other .NET project, design, build, and debug solutions. This is where we are now.\n\nFun Facts SharePoint 2010 is version number 14 while SharePoint 2007 has version number 12. There is no clear answer why Microsoft skipped version 13, but one of the “tales” making the rounds says that number 13 was skipped due to superstition, just as many hotels don’t have a floor numbered 13. SharePoint 2003 did have a version 11, which was chosen to align the version number with Microsoft Office’s versioning. With SharePoint 2010 Microsoft has dropped the name Office from the server product. Microsoft Office SharePoint Server 2007 became Microsoft SharePoint Server 2010. The main reason was to avoid confusion between the SharePoint Server product with the Office client suite; many users believed that you needed to have the Office client to work with SharePoint. The integration works best using the Microsoft Office suite compared to other suites. SharePoint 2010 also comes in a hosted version, called SharePoint Online, which means that you don’t have to invest in hardware for your own SharePoint installation.\n\nxxvi\n\nABOUT\n\nWEB PARTS\n\nYou “rent” a slot in the ready-to-go SharePoint 2010 installations and pay per user, month, and usage, which means that you only have to pay for what you use. Previous versions of SharePoint Online were very limited in custom application development but the new SharePoint Online 2010 allows for third-party applications to run in the hosted environment. The market for Web Parts is an innovative one and there are several successful companies that thrive on making Web Parts. SharePoint 2010 offers a lot of opportunities for you as a developer to make custom solutions for yourself and your clients. Many of those solutions will contain Web Parts, so let’s get started! NOTE SharePoint 2010 comes in many flavors, from SharePoint Foundation 2010 (formerly called Windows SharePoint Services) to SharePoint Server 2010 (Microsoft Office SharePoint Server), and the feature set differs in both versions. For clarity, I’ll use SharePoint 2010 throughout this book and, when applicable, note if a specific task or feature is not available in one of the versions. I’ll use the term SharePoint when talking about SharePoint in general, with no specific version or SKU (Stock Keeping Unit) in mind.\n\nPart 1 Introducing SharePoint 2010 Web Parts\n\nP\n\nart 1 introduces you to the world of SharePoint 2010 Web Parts. You’ll learn what Web Parts are and how you can use them to build solutions using only the web browser and SharePoint Designer 2010. The first chapter explores the Web Part infrastructure and pages in SharePoint. Chapter 2 shows you how to use out-of-thebox Web Parts to build Web Part–based applications. All this is in preparation for part 2, where we’ll dive into the development of SharePoint 2010 Web Parts.\n\nIntroducing SharePoint 2010 Web Parts\n\nThis chapter covers ■\n\nDefining a Web Part\n\n■\n\nUsing Web Parts\n\n■\n\nKnowing the difference between ASP.NET and SharePoint Web Parts\n\nWeb Parts are an essential part of Microsoft SharePoint 2010 and one of the first technologies that a new SharePoint developer starts using. You can describe a Web Part as a self-contained application that’s used in a SharePoint site. SharePoint comes with a wide range of out-of-the-box Web Parts and you can download more from Microsoft.com. You can even buy additional Web Parts from third-party vendors or download the source code for some Web Parts from open-source sites such as CodePlex. Users, developers, IT professionals, and administrators have embraced the SharePoint platform. SharePoint is one of Microsoft’s most important products; it’s their fastest-growing server product. SharePoint is making an impact on all types of organizations, from small businesses to large Fortune 500 companies.\n\n3\n\n4\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nA product like SharePoint is always a challenge to implement. It’s a broad platform, and it’s sometimes difficult to determine what parts to use. Developers have had mixed feelings about SharePoint throughout the years. From the beginning, there was a lack of extensibility and, when that extensibility came, there was a lack of accompanying documentation. Each new version of SharePoint has introduced new challenges for developers, ranging from the developer toolset to the software features. Until recently, skilled SharePoint developers have been rare, probably due to these obstacles, which made the threshold to become a great SharePoint developer quite high. Thanks to excited developers and the strong online community, together with an engaged product team from Microsoft, these obstacles have been addressed with the release of SharePoint 2010. And, this book is a guide to Web Parts development on this new platform. Microsoft SharePoint is a platform for creating portals and websites where the end user can—without programming skills—create and build websites and solutions using a standard web browser. Using lists, users can store data in SharePoint and/or integrate with external line-of-business systems. Lists can be predefined, such as Contacts, Calendars, or Announcements, or users can create their own. Figure 1.1 shows how a SharePoint site might look using several Web Parts. Web Parts are a fundamental component of SharePoint and have been since the beginning of the SharePoint era. Web Parts can be small or standalone applications that you deploy into your SharePoint installation. With Web Parts, you can extend the functionality of your SharePoint investment and create new applications or even integrate with your existing applications to create a gateway from your SharePoint portal. Most of Microsoft’s products, such as Microsoft Dynamics AX and SQL Server Reporting Services, also integrate with SharePoint using Web Parts.\n\nFigure 1.1\n\nAdd Web Parts of different types to build a rich user interface.\n\nWhat is a Web Part?\n\n5\n\nBuilding solutions and applications using Microsoft SharePoint 2010 allows you to keep your focus on the business logic, meet the customer’s requirements, and implement the cool features. You don’t have to worry about implementing security or authentication, building a framework for creating sites and pages, or creating a solution for deploying and distributing your features onto several servers in a controlled manner. The monitoring of your servers, software, and solutions is a task that’s important for large-scale scenarios, and you get this ability with SharePoint. Web Parts won’t always be the best way to extend SharePoint. For instance, you’ll usually create lists, content types, and site definitions in SharePoint projects. In addition, Web Parts aren’t always the best tool for long-running calculations or jobs. In such cases, you might consider timer jobs, which you’ll read about later in this book. You might even consider a custom service application. As a SharePoint developer, you must be able to handle many skills and methods, and Web Part development is just one of those skills. To be a good SharePoint developer, you need to know when to use a Web Part—and when not to. That includes knowing when to use an out-of-the-box Web Part, customize a Web Part, or go in an entirely different direction. By discerning the best solution, you’ll save you and your customer a lot of time and money. In this chapter, I’ll introduce you to the world of Web Parts.\n\n1.1\n\nWhat is a Web Part? Before we dig down deep into developing Web Parts for SharePoint 2010, you should know what a Web Part is. As the name implies, it means parts of a web. Web Parts are the building blocks for building web pages in SharePoint. Web Parts are essentially ASP.NET web controls that inherit the web control base class in ASP.NET but have special abilities compared with ordinary ASP.NET web controls. These special abilities focus on giving the end user or administrator, and not the developer, the possibility to customize, move, and edit the control. Normally, ASP.NET controls are configured and programmed on the server side with no or limited options for the end user to modify its properties. Web Parts, on the other hand, are building blocks that the end user can choose from to build their own web page. For example, the user may decide that a particular Web Part should show the contents of a document library with a specific set of columns, that another Web Part should display a graph generated from a data source, and so on. The most used Web Part in SharePoint is the one that shows a view of a SharePoint list, such as a task list, a calendar, or a document library. All Web Parts have a common set of properties, including the title, size, chrome layout, and other appearance settings. They also share a common set of methods. That way, they’re initialized and rendered so that the web page that contains the Web Part doesn’t have to know exactly which Web Part it’s going to show—just that it’s a Web Part. In a Web 2.0 standard fashion, the Web Part infrastructure also handles personalization of Web Parts and Web Part pages, which means that every end user of the Web Part can have their own configured web page that looks different from the same page for other users.\n\n6\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nAn important part of the Web Part infrastructure is the ability to connect Web Parts. Connected Web Parts can send or retrieve information from one Web Part to another. This concept allows developers to create advanced web pages and dashboards that users can connect to via the web interface. SharePoint provides a special kind of Web Parts called filter Web Parts. They have one purpose: to deliver a filter to other Web Parts so that their content can be filtered. For example, suppose you have a product catalog Web Part. You can set up a filter Web Part that filters the product catalog when users choose a product category in the filter Web Part. All these factors together are what makes Web Parts so interesting and useful when creating custom applications or solutions for SharePoint. You as a developer can create configurable applications that users can adapt to their method of work. The user might also combine the Web Parts by connecting them together and, from that, create their own applications or mashups. A web page or web application built using different external sources or open APIs is often referred to as a mashup. You might consider everything in SharePoint, including Web Parts, Business Connectivity Services (BCS), and InfoPath, as external sources for mashups. NOTE\n\nThe concept of Web Parts isn’t unique to SharePoint. All major vendors and platforms have their version of Web Parts that are more or less evolved. In the Java world you might know them as portlets, Google uses gadgets for their iGoogle site, and so on. Web Parts can also be used to connect portals from different vendors and platforms using, for instance, the Web Services for Remote Portlets (WSRP) standard, which allows you to publish content from one portal to another, or the recently ratified Content Management Interoperability Specification (CMIS) standard. If you’re an ASP.NET developer, you might be familiar with Web Parts, because that infrastructure exists in the ASP.NET 2 Framework. SharePoint is built on top of ASP.NET and has extended the Web Part infrastructure and introduced a number of new and improved features. Using Web Parts instead of building custom ASP.NET applications allows you to take advantage of the SharePoint feature set, including infrastructure, user management, deployment, and scalability. This enables you to focus on the business goals of the application instead of building a new infrastructure. Web Parts are essentially ASP.NET WebControl objects or, to be more exact, ASP.NET Panel objects. Therefore, from a developer perspective, the first thing you need to learn is ASP.NET programming in the language of your choice: C#, Visual Basic, or even F#. SharePoint 2010 is built on the .NET Framework version 3.5 and ASP.NET 2, so anything in those frameworks can be used when developing Web Parts for SharePoint 2010. This book assumes that you’re familiar with ASP.NET 2 development and we’ll highlight only those areas where you have to be extra careful. One of the most important and, very often, underestimated concepts is the ASP.NET page and control life cycle. In the later chapters, you’ll see examples of why this concept is so important. NOTE All code samples throughout the book will use C#. You can download these samples from www.manning.com/wilen or www.sharepointwebpartsinaction.com.\n\nWhy use Web Parts?\n\n1.2\n\n7\n\nWhy use Web Parts? Web Parts are just one but important component of the huge SharePoint product— without Web Parts, you couldn’t enjoy the platform’s flexibility. It’s the Web Parts that make SharePoint as well as other Web Part–based portals interesting for both editors and end users. As mentioned earlier, building a new web page or site can be done without programming skills. Editors create their pages and choose Web Parts from a gallery. Then, they customize a Web Part and save the page—and, all of this is done from the browser. The Web Parts that users can choose are determined by the administrator (and the permissions on the Web Parts). A Web Part’s configuration options are defined by the developer who created the Web Part. One of the reasons Web Parts are easy to use when creating custom applications for SharePoint is that they can be self-contained or grouped together. The business logic and the user interface are based on the .NET and ASP.NET development, which lets you get started right away, if you’re familiar with .NET development. Because Web Parts share a lot of common features and they’re managed in the same way, it’s easy for the end user to get started with a new Web-Part–based application. If users are familiar with SharePoint, they know how to find, add, and edit a page’s Web Part. This makes the adaptation of new features or applications in your SharePoint environment faster and easier. You can deploy a Web Part to the site collections of the SharePoint environment that you want your Web Part to be able to run in, and you can even control who can use the Web Parts through the built-in permissions in SharePoint. SharePoint 2010 comes with a number of Web Parts that you can use—which ones are available depends on which version of SharePoint you’ve installed. Appendix A, “Out-of-the-box Web Parts,” contains references to the most used Web Parts and their corresponding edition. Web Parts come in a couple of different types. The basic Web Part shows user tasks, the contents of a list, or a graph. Then, you have Web Parts that need customization, such as the Content Editor Web Part or Forms Web Part. For more advanced use, there are the new XSLT List View Web Part or the Data Form Web Part; both need to be configured using SharePoint Designer, and you can use them to create more advanced applications than you can using just the web browser. Also available are complete suites or standalone Web Parts that can be downloaded for free or purchased. In many cases, getting one of these off-the-shelf products can solve your problem for a much lower price compared with the cost of developing a Web Part. You can custom-design applications, perhaps, in combination with these standard products and build Web Parts that do exactly what you want. When do you need to create your own Web Parts? The Data Form Web Part is an excellent tool and should be used whenever possible. It’s great for connecting to an external data source or web service and, then, all you have to do is customize the view of the data. SharePoint 2010 also introduces a new way to connect to external data using External Lists in SharePoint. External Lists, in combination with the out-of-thebox Web Parts, can be used to create an interface for your custom database in SharePoint using just configuration techniques.\n\n8\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nNOTE BCS is the evolution of the SharePoint 2007 Business Data Catalog (BDC), which allows you to connect to external data sources such as databases or web services. Data sources can be visualized in an External List, which looks and acts like a standard SharePoint list for the user but the data still resides in the connected system. SharePoint Designer 2010 is the tool to use when creating external entities and mapping them to external data sources. In SharePoint 2007, BDC was an Enterprise feature but, in SharePoint 2010, a part of the BCS is available in the SharePoint 2010 Foundation edition.\n\nCustom Web Part development takes all of these approaches one step further: you have full control of what’s going to be shown and you can create an interface that lets your user interact with the Web Part in a more advanced and sophisticated way than with the standard Web Parts. Using agile development methods, you can even involve the users early in the development process and iterate until you have a satisfied customer. The developer has the power to make the Web Part configurable for the end user. Compare that to the Data Form Web Part, where the administrator configures the Web Part and, then, all the user can do is watch and use the result. Most configuration of the Data Form Web Part has to be done using the SharePoint Designer application—which normal users don’t have access to—or requires skills in eXtensible Stylesheet Language for Transformations (XSLT)—which typical users generally don’t understand. Agile development has become popular in recent years. It’s a set of methodologies focusing on some simple principles, which include an iterative approach and early and continuous delivery. Some of the most popular agile methods are Scrum, test-driven development (TDD), and continuous integration.\n\nNOTE\n\nAs a Web Part developer, you have full control of the user interface. This is especially important when you’re creating Web Parts for publishing sites, where you might need to control the exact output of the Web Part or if you’re using a dynamic Ajax-based interface and you need to run client-side scripts. Building custom Web Parts gives you access to the complete object model of SharePoint and can be used to modify or show content that the user normally wouldn’t have seen using elevated privileges. For example, you might store data in a SharePoint list that’s protected by permissions so that users aren’t allowed to see the list. You can then create a Web Part that uses the System Account context, reads data from the list, presents that data to the user, or lets the user update the data. SharePoint 2010 has been updated to support mobile devices better than its successor—and it’s not just about the way it displays lists and libraries. SharePoint now has support for converting your Web Part pages into mobile views, and you can convert the Web Parts to mobile Web Parts using special mobile adapters. If you compare that to a no-code solution built using custom JavaScript, which relies on a powerful browser and perhaps isn’t adapted to a smaller screen, you’ll find that building Web Parts and mobile adapters will improve your user experience significantly.\n\nIntroducing the Web Part infrastructure\n\n9\n\nAnother interesting aspect of Web Part development is when you have an out-ofthe-box Web Part or third-party product that you’d like to enhance. As long as the Web Part isn’t sealed, you can subclass it to enhance your version and override its default logic. This is a common task, and I’ve seen and used several subclassed versions of the Content Query and the Search Web Parts (which are not sealed in SharePoint 2010). Web Parts can be powerful, which isn’t always a good thing. Because you can run whatever .NET code you like in your Web Part, there’s a risk that malicious or badly written code may cause damage to your applications and data. SharePoint has several mechanisms that help you control those scenarios through policies applied during deployment. With the new sandboxed solutions, you can even allow Web Parts from less trusted sources to run in your SharePoint environment in a special protected process. The sandboxing feature in SharePoint 2010 will be discussed in more detail further in this book.\n\n1.3\n\nIntroducing the Web Part infrastructure Before we go further, let’s explore some basic facts about site pages and Web Parts in SharePoint. If you’ve been working with SharePoint or ASP.NET, this might be old news to you but, nevertheless, it’s always good to refresh your memory. This section examines the various components in the Web Part infrastructure that you’ll encounter when building a page. In addition, you’ll get your first look at a simple Web Part. You’ll learn the different components and their responsibilities. Familiarize yourself with the technical terms because I’ll use them throughout the book.\n\n1.3.1\n\nWeb Part page A Web Part page, which most often is the type of page you use to host Web Parts, is an ASP.NET page that inherits from or uses a specific SharePoint page class, the WebPartPage. This class, in turn, is inherited from the standard ASP.NET Page class. The responsibilities of a Web Part page are: ■ ■ ■ ■ ■\n\nConnecting to the SharePoint context. Performing user authorization. Hosting the Web Part Manager. Hosting the Web Part zones. Hosting the special zones for Web Part properties and the Web Part Gallery.\n\nTo use Web Parts on a web page, that page needs to be equipped with one Web Part Manager and, optionally, Web Part zones. The Web Part Manager in SharePoint is defined in the master page, which makes it available to all pages using that master page. Figure 1.2 shows how the building blocks of a Web Part page are organized. Web Parts can live inside or outside a zone. When a Web Part is outside a zone and managed by the page, that Web Part is called a static Web Part and can’t be customized by the end user using the web user interface. If a Web Part exists in a zone that’s managed by the\n\nIntroducing the Web Part infrastructure\n\n11\n\nWeb Part—as well as for rendering the necessary scripts to make the Web Parts able to react to drag-and-drop actions. A Web Part zone contains a set of properties that defines the layout of the zone. The responsibilities of a zone are: ■ ■\n\n■\n\n■\n\nDefining the areas where Web Parts can be added. Defining the appearance (header, footer, frames, and so on) and the behavior of the zone. Specifying whether the Web Parts within a zone can be customized and/or personalized. Rendering the Web Parts in a zone.\n\nWeb Part zones and the wiki content controls have undergone a major overhaul since the 2007 version. In SharePoint 2010, the wiki content areas and the rich HTML fields for Publishing pages can be used as Web Part zones. Yes, you’ve heard that right! In a wiki (see figure 1.3) or a Publishing page, you can add your Web Parts into the wiki content or rich text between the paragraphs or even in the middle of a word. Internally, SharePoint uses a hidden Web Part zone, with the id wpz, to manage the Web Parts in the wiki content. This Web Part zone is necessary so SharePoint can store its configuration. Each Web Part is marked in the wiki content using hidden DIV elements that reference the unique identifier of each Web Part (in the hidden zone).\n\nNOTE\n\nFigure 1.3 The default SharePoint 2010 Team Web is based on wiki pages. Wiki pages in SharePoint allow you to add Web Parts directly into the wiki content.\n\nTypes of Web Parts\n\n13\n\nrewrote the SharePoint 2003 Web Part implementation and made it inherit from the ASP.NET 2.0 Web Part, which made it compatible with SharePoint 2007. How does this affect the situation for developers? Numerous discussions have taken place about the pros and cons of the different versions; one camp believes that you should use the old SharePoint-based Web Part due to its specific abilities, and another camp claims that the ASP.NET 2 Web Part is better because it’s newer and Microsoft recommends it. In the next few sections, I’ll explain when you should and should not use each version. The choice of implementation is really up to you—you have to evaluate the pros and cons of respective implementations. My recommendation, which also is Microsoft’s recommendation, is that you should always start out with an ASP.NET 2 Web Part and only use a SharePoint Web Part if you need that implementation’s specific features. Both versions are equally supported by SharePoint 2010, but this book will primarily focus on the ASP.NET 2 implementation. (When the SharePoint implementation is used, I’ll point that out.) I’ll highlight the differences and the advantages and disadvantages of the two versions and, finally, take a look at what has changed since the previous versions of SharePoint.\n\n1.4.1\n\nASP.NET 2 Web Parts The ASP.NET 2 Web Part was introduced when Microsoft released .NET Framework 2, together with a framework that allowed you to create your own providers for storing Web Part information, such as customization and zone information. This framework was used for building SharePoint 2007, and it’s almost the same in SharePoint 2010. ASP.NET Web Parts are defined in the System.Web.UI.WebControls.WebParts namespace in the System.Web assembly and are a part of ASP.NET. This means that if you write a Web Part using this implementation, you can start building it for a nonSharePoint environment; an example is a custom portal built with ASP.NET. Once you start adding references to the SharePoint assemblies and namespaces, you’ve lost this benefit and you are stuck with having your Web Part in SharePoint. Later in this book, we’ll discuss various design patterns to use when building Web Parts, and you’ll learn how to work around these issues. ASP.NET Web Parts are the implementation that Microsoft recommends you use when building Web Parts for SharePoint. They’re said to be the future of Web Parts. Nothing has really happened to Web Parts in the .NET Framework since the release of 2, and .NET Framework 4, which was released in early 2010, doesn’t show any changes in the Web Part implementation. SharePoint 2010 and Visual Studio 2010 features a new Web Part project type called Visual Web Parts (which we’ll discuss further in chapter 3), and those Web Parts are based on the ASP.NET Web Part. Essentially, a Visual Web Part is a standard Web Part class that loads a user control (ASCX file), and this control can be edited using the Visual Studio 2010 visual designer. This will make your Web Part development experience more pleasant, and you’ll save a lot of time because you don’t have to manually create the controls and events and add them to the control tree.\n\n14\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nWhat about .NET Framework 4? Although .NET Framework 4 has been released, SharePoint 2010 is still built with .NET Framework 3.5 (Service Pack 1). The reason behind this is that the SharePoint team thought that it was too risky to work with the new framework, because .NET 4 still was in beta. The .NET Framework 4 contains side-by-side execution of different .NET versions, which leads me to believe that we’ll soon be able to run .NET 4 code in SharePoint. When you’re installing Visual Studio 2010, which you’ll do on your development machines, .NET 4 is a prerequisite.\n\nWhen it comes to sandboxing (which means that the code is executed in a controlled and isolated environment), the only supported Web Part implementation is the ASP.NET Web Part. This is due to the sandboxing restrictions that don’t allow you to dynamically load a user control or use the SharePoint Web Part implementation. Here are the main benefits of using ASP.NET Web Parts: ■ ■ ■ ■ ■\n\nThey’re Microsoft’s recommended choice for Web Part implementation. They’re the future of Web Parts. They form the base of Visual Web Parts. They can be used to create non-SharePoint-hosted Web Parts. They support sandboxed deployment, unless standard Visual Web Parts are used.\n\nThe freely downloadable Visual Studio 2010 SharePoint Power Tools contain a Visual Web Part that can be used in sandboxed solutions.\n\nNOTE\n\n1.4.2\n\nSharePoint Web Parts SharePoint Web Parts remain in the SharePoint API due to large investments in these Web Parts since the time of SharePoint 2003 and because SharePoint Web Parts have some interesting features that ASP.NET Web Parts don’t. The Web Part implementation from SharePoint is defined in the Microsoft. SharePoint.WebPartPages namespace and exists in the Microsoft.SharePoint assembly. Once you derive your own Web Part from this class, your Web Part is tied to SharePoint and you can’t reuse it in other ASP.NET-based solutions. The SharePoint Web Part inherits from the ASP.NET Web Part, so everything that you can do with an ASP.NET Web Part you can also do with a SharePoint Web Part. The main reason for using this Web Part implementation is that it has some exclusive features when working with Web Part connections, features that the ASP.NET Web Part doesn’t provide. The SharePoint Web Part can be connected to other Web Parts that either reside on other pages within the site or that don’t exist in any zone (in other words, static Web Parts). The ASP.NET Web Part only accepts connections between Web Parts placed in zones and on the same page. The SharePoint Web Part can also handle client-side connections using the Web Part Page Services Component\n\nTypes of Web Parts\n\n15\n\n(WPSC). This is no longer such a big deal because the new SharePoint 2010 Client Object Model, in combination with JavaScript, can be used to create a similar experience. Another reason for using the SharePoint Web Part is that it has a built-in feature for caching content. Using this implementation might expose you to a risk, if you’re looking for a longlived product. You can’t be sure that this implementation will be supported in upcoming versions of SharePoint. The main benefits of using the SharePoint-based Web Parts are that: ■ ■ ■ ■\n\n■\n\nYou can use cross-page connections. You can connect to static and dynamic Web Parts. These Web Parts offer built-in caching. You can take advantage of client-side connections using the Web Part Page Services Component. You might need SharePoint-based Web Parts for backward compatibility.\n\nThe single most important reason why developers choose the SharePoint Web Part implementation is that it can use connections between Web Parts that don’t exist in Web Part zones or even on other pages. One example is when you have a dashboard page with a couple of zones and you’ve added a filter Web Part on your page but not in a zone, so that each page of this kind will always have that filter and the user can’t remove it. Using the new Client Object Model (described in chapter 10) and JavaScript, you can reproduce a similar behavior if you need it by using the ASP.NET Web Part implementation. Caching is important for high-scalability solutions, and the SharePoint Web Part has a built-in caching mechanism. If you need caching in your Web Part, then the SharePoint implementation might be a good candidate to start with. But the ASP.NET 2 Framework also has built-in support for caching in several ways. Using this ASP.NET caching mechanism, you can easily create your own caching and still be able to use the ASP.NET Web Part implementation. I strongly recommend that you implement caching yourself using the ASP.NET Web Part, and I’ll show you how in chapter 9.\n\n1.4.3\n\nChanges in the Web Part infrastructure for SharePoint 2010 The Web Parts in SharePoint 2010 are derived from both implementations, but most of the new Web Parts derive from the ASP.NET 2 Web Part. This might be an indication of what Microsoft is trying to achieve for future versions of SharePoint. Even though, for the most part, ASP.NET Web Parts are used and SharePoint Web Parts are there for backward compatibility, there have been minor internal changes to the SharePoint Web Part implementation. The SharePoint WebPart class hasn’t changed much and doesn’t offer developers any new features. Some internal changes have been made to the implementation related to the new SharePoint 2010 user interface, such as Ribbon integration. The WebPartZone, SPWebPartManager, and other related classes have had some updates related to the Wiki Web Part zones. The updated SPWebPartManager also\n\n16\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nprovides support for the mobile view of Web Part pages as well as mobile Web Parts. These changes are mostly internal to the assembly but, in later chapters, when we focus on these components, you’ll see how you can use some of these enhancements. One of the most notable changes is that the customization of a Web Part is versioned just as the Publishing Web Part page is versioned, which was not the case in earlier versions of SharePoint. This is an important improvement and it’s crucial for you to be aware of it. If you roll back a page to a previous version, any changes to your Web Part customization will also be rolled back. The upside is that versioning makes it easier for you to experiment with customizations of a Web Part—if you’d like to go back to the original or working state, you just roll back the page. To improve security and to prevent injection of malicious code, the Web Part infrastructure includes cross-site scripting (XSS) protection. We’ll discuss this protection mechanism further in chapter 7.\n\n1.5\n\nHello World example You’ve just read about the basics of Web Parts and their infrastructure. Because this is a book for developers, what would be better than looking at a Web Part using the classic Hello World sample in a Hello World Web Part? This simple Web Part will write the text Figure 1.5 A Hello World Web Part, showing the default Web Part options menu in the right “Hello World” in the Web Part content area. corner The result for the end user should look similar to figure 1.5. The text is written in the content area and the title is automatically generated by Visual Studio. The Web Part options menu shown in the figure is the default menu of any Web Part. The Hello World example in the following listing is quite basic if you’re familiar with ASP.NET development. Using Visual Studio 2010, you first have to create a SharePoint project and then add a Web Part item to that project with the name HelloWorldWebPart. Listing 1.1\n\nHello World Web Part\n\npublic class HelloWorldWebPart : System.Web.UI.WebControls.WebParts.WebPart { public override void CreateChildControls() { Label label = new Label(); label.Text = \"Hello World!\"; this.Controls.Add(label); base.CreateChildControls(); } }\n\nThe Web Part is defined in the HelloWorldWebPart.cs file. The class derives from the ASP.NET Web Part class, which exists in the System.Web.UI.WebControls.WebParts\n\nSharePoint 2010 pages\n\n17\n\nnamespace and System.Web assembly. To add the Label control, you override the CreateChildControls method, and in the overridden method, a new Label control is created and added to the control tree. The Text property of the Label control gets the value of \"Hello World\". Using Visual Studio 2010, you press F5 to build and deploy the Web Part into SharePoint 2010. The Web Part will be added to the Web Part Gallery during the deployment, and all you have to do is edit a page, locate the Web Part in the gallery, and add it to the page. This F5 deployment will be shown in greater detail in chapter 3. As you can see from the sample code, the title and options aren’t specified. The Web Part’s title inherits from the base class and is, by default, the name of the class. Every Web Part has a set of default verbs that are added to the Options menu. Later, I’ll walk you through the steps involved in the creation and deployment of Web Parts using Visual Studio 2010, and I’ll do the same with the Web Part Manager, zones, and connections. In SharePoint, along with the compiled assembly for the Web Part that you deploy to SharePoint, there are a few more files, and we’ll cover them all as well. But, first, let’s continue our look at the Web Part infrastructure.\n\n1.6\n\nSharePoint 2010 pages We’ve gone through all the basics of the Web Part infrastructure in SharePoint 2010. Now, it’s time to take a look at the pages where you use your Web Parts. To understand where you can use the Web Parts you’re developing and where you have to use other approaches, you must have a good grasp of the concept of pages in SharePoint. As previously stated, a page that has a Web Part Manager and, optionally, a zone can be used to host Web Parts, and this is almost the whole truth. SharePoint has two basic page types, application and site pages, and each serves its own purpose. These page types are based on a single ASP.NET master page that allows SharePoint to have a consistent interface framework. First, we’ll share some SharePoint basic knowledge. Pages exist in SharePoint sites. A SharePoint site represents a set of lists, libraries, groups, features, subsites, and so forth. These sites are grouped into site collections. Every site collection has a top-level site, which may have one or more subsites. NOTE The SharePoint API doesn’t use the site collection and site naming conventions but, instead, uses site and web, where the SPSite object represents a site collection and SPWeb represents a site.\n\nSites in SharePoint 2010 have a special library called site pages (/SitePages/), which normally contains the web pages of a site, similar to the Pages library that the Publishing sites use to store the pages. The Site Pages library is new to SharePoint 2010. In SharePoint 2007, you either had to create a library on your own or resort to the more commonly used scenario: put your pages directly into the site. The advantage of a Site Pages library is that you can turn on versioning and/or workflows on all your site pages.\n\n18\n\n1.6.1\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nApplication pages First, we’ll review application pages. Application pages are most often used as configuration pages for features or applications. Application pages can’t host Web Part zones and therefore aren’t dynamic Web Parts. You can use static Web Parts (those living outside a zone) though. A good practice is to use web or user controls instead of Web Parts when building application pages. These pages can’t be controlled or edited by end users and should only be used for custom applications. They behave very much like a standard ASPX page. When you deploy or update application pages, you do so directly to the ASPX file in the file system. This is important; in a SharePoint farm, each server has a copy of these files and any changes and additions must be replicated to all servers (preferably using SharePoint Solution Packages, which is also the recommended way of doing this, as you’ll see later in this book). Application pages are also known as layout pages because they exist in the Internet Information Services (IIS) _layouts virtual directory. The files are stored in the TEMPLATES\\LAYOUTS subfolder of the SharePoint root (see the accompanying note) and virtualized as the _layouts subfolder of each SharePoint site. The SharePoint root is the folder where SharePoint stores its file on the server. It was previously and unofficially called the 12-hive, from version 12 in SharePoint 2007. It is located in c:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\14\\. Rather than writing the whole path I’ll use {SharePoint Root} throughout this book.\n\nNOTE\n\n1.6.2\n\nSite Pages Site pages are the pages in SharePoint that are created while a site is provisioned by the user or by different triggers. Typical site pages are the default or home pages created in a site, the AllItems.aspx list view page and the EditForm.aspx form page used to edit list items. These pages can be customized or modified by the end user using the browser, SharePoint Designer, or using other tools or techniques. There are a few different types of site pages; this book will focus on the Web Part and wiki pages. For publishing sites, there’s a special type of page called the Publishing page that inherits from the Web Part page and is specifically designed to have a flexible layout. You can also create your own types of site pages by inheriting from or customizing any of the existing types. WEB PART PAGES\n\nA Web Part page is the simplest kind of site page. It’s based on the master page, just like all other pages in SharePoint, and is equipped with a set of Web Part zones. The Web Part page is used for all form and view pages for lists and libraries. These pages are limited to changes in the Web Part zone, and in SharePoint 2010 the use of Wiki pages should be considered when creating pages. WIKI PAGES\n\nIn SharePoint 2010, the default page becomes a wiki page, which has several benefits (compared with previous versions, where the default page type was a Web Part page).\n\nSharePoint 2010 pages\n\nFigure 1.6\n\n19\n\nWiki pages in SharePoint 2010 can contain Web Parts within the wiki content.\n\nFirst, all text and content editing is easier and more user friendly with the WYSIWYG interface. Second, the wiki content areas have been hugely improved and now act as Web Part zones. In SharePoint 2007, the wiki content area was just a place where you could have content such as text, links, and images, with very limited editing possibilities. SharePoint 2010 wiki content areas can contain text, links, images, and Web Parts, and you have far better editing tools. The page editor can add and remove Web Parts in the wiki content and drag the Web Parts around and place them in appropriate positions, as shown in figure 1.6. The wiki pages, inheriting from the WikiEditPage class, always contain a hidden Web Part zone that is used for storing the Web Parts that exist in the wiki content areas. In other words, the wiki content areas aren’t Web Part zones. The wiki content contains special tags where Web Parts are placed. When SharePoint finds one of these tags, it locates the Web Part in the hidden zone and renders it into a buffer. Finally, this buffer is flushed out to the page. Wiki is a Hawaiian word that means fast. A wiki typically is a website that allows for easy creation, editing, and linking between wiki pages using a specific syntax or editor. SharePoint 2010 uses a WYSIWYG editor and, using the [[ and ]] symbols, links to pages are created. If no page exists at the link, the editor will be asked to create a page once they click on the link. NOTE\n\nPUBLISHING PAGES\n\nPublishing pages are most often used in enterprise portals or public-facing websites. A Publishing page is a Web Part page that uses specific field controls to render the publishing content. A Publishing page inherits from PublishingLayoutPage, which inherits from the WebPartPage class. In many cases, Publishing pages also contain Web Part\n\n20\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nzones that the page editor can use to add extra information or functionality to the pages. Because SharePoint 2010 now can handle the versioning of a Web Part’s customization and personalization state, usability of Web Parts in Publishing pages and sites is enhanced compared with previous SharePoint releases. This was a problem in previous SharePoint versions: if you reverted to an old version of a Publishing page, the configuration of the Web Part didn’t change. CUSTOM SITE PAGES\n\nSite pages are normally based on one of two classes, both defined in the Microsoft. SharePoint.WebPartPages namespace: ■ ■\n\nWebPartPage —A site page containing Web Part zones. WikiEditPage —A new type of site page introduced in SharePoint 2010, which\n\ncontains the new Wiki field, which can host Web Parts. In SharePoint 2010, these pages are sometimes simply called Page (see figure 1.7). By default, these site pages can’t contain inline server-side code, such as custom logic and events. Assume that you create a new site page in a document library and want to add a submit button that runs some code when clicked. You can’t do this using inline code without changing the security settings of your SharePoint web application. You can lower the security, but I don’t recommend it because that exposes your web application to malicious code. Instead, you have two basic options that work equally well but have different purposes: ■\n\n■\n\nCreate a Web Part—This Web Part will display the button and handle the click event for you. Subclass the site page—Your new class will have the code that handles the click event and the site page ASPX code will define the button.\n\nUsing a Web Part for your custom code is the preferred way because you can reuse the logic much more easily. If you add the Web Part as a static Web Part (outside a zone), you can control on which pages the Web Part is available. The easiest way to achieve\n\nFigure 1.7 You can use the new Silverlight-based Create dialog box to search for and add new items to your site. Notice the option to download new items and templates from Office.com. If you don’t have Silverlight installed, you’ll see an HTML-based interface instead.\n\nSharePoint 2010 pages\n\n21\n\nthis is using SharePoint Designer, but that will customize the page (read more about customization below). If you add a Web Part to the page using the web interface to a zone, the editors of that page can move, customize, or even delete the Web Part, but you’ll allow the page to stay in its original state (if it wasn’t already customized).\n\nAllowing inline server-side code in a Site page To allow inline code in your site page, you have to edit the web.config file of the web application to lower the security. Do so by adding a new PageParserPath element to the PageParserPaths element like this:\n\nWhere VirtualPath is the path to the document library or site where you put your site page. Once you do this, anyone can upload their own code to be executed in the virtual path, so be advised. Enabling inline server-side code isn’t a good practice and you should use this approach only for testing and development purposes.\n\nPAGE CUSTOMIZATION\n\nThe site pages are stored, just like the Web Part customizations, in the content database of your SharePoint instance. Compared with the application pages, you don’t have to care about replicating changes between the SharePoint servers because the file resides in the database. This is true in most cases. SharePoint has a mechanism called page customization, previously referred to as ghosting. This technique allows you to store the template of the site page on the disk (“ghost”) and the database keeps a reference to the file on the disk instead. When you customize the page (“unghost”), data is added to the content database and the reference points to the database instead of the file system. The page customization makes SharePoint perform better because it doesn’t have to keep a copy in the database for all provisioned pages—only the ones that the user explicitly customized. For example, the editform.aspx file for a contacts list uses the version stored on the disk for all contacts lists in the farm (unless the page is customized) and saves you a lot of database space and performance. Any updates to a file in the file system will immediately be visible for all noncustomized contacts list edit forms (for example, when you need to make some changes or when you apply a SharePoint service pack). You shouldn’t modify a site page residing in the file system of the SharePoint frontend web servers because it’s difficult to determine if and where this file has been customized and it will likely be difficult to get support if it breaks. Another disadvantage of editing files directly in the file system is that they might be overwritten when you update or upgrade SharePoint.\n\n22\n\n1.6.3\n\nCHAPTER 1\n\nIntroducing SharePoint 2010 Web Parts\n\nMaster pages A master page is the foundation of any page in SharePoint ASP.NET sites. A master page defines the basic layout, structure, and functionality of pages and contains placeholders where the pages can host their content. Each time a page is requested by a user, the page is created by replacing the placeholders in the master page with the content from the page, which merges the master page with the requested page. SharePoint 2010 mainly uses one master page, called v4.master, compared with the previous SharePoint version, which had a separate master page for application pages. You can edit master pages or provide your own, but that’s a completely different topic. The default master page is located in the SharePoint root under the TEMPLATE\\GLOBAL folder. SharePoint 2010 contains a completely new master page to support the new user interface and web browser compatibility. If you’ve invested heavily in the SharePoint 2007 UI and want to upgrade your site, it’s good to know that the old master pages are still provided with the SharePoint 2010 upgrade and you can at any time select the interface you want to use: the old one or the brand-new one. Note that, once you switch from the 2007 interface to version 2010, you can’t go back. NOTE\n\nAs a Web Part developer, be aware of a couple of things when working with master pages. The default master page delivered with SharePoint 2010 contains the important Web Part Manager object (SPWebPartManager), so there’s no need to define your own in your site or application pages. It’s defined close to the body tag of the page and has an id of m. You can’t add Web Part zones to the master page—only to the pages utilizing the master page, but you can add Web Parts directly to a master page. These Web Parts will be available on all pages using the master page and they’ll be static, because they don’t exist in a zone. This also means that the Web Parts can’t be customized using the user interface, for instance, when editing a page. You have to use SharePoint Designer 2010 to customize the Web Parts.\n\n1.7\n\nSummary This chapter was a brief introduction to the world of Web Parts in SharePoint, and you should now have the basic knowledge to begin building your own Web Parts. SharePoint is a platform that can be used to develop and deploy your custom applications. We walked through the basics of Web Parts in SharePoint 2010, and we introduced the building blocks of pages. Here’s a summary of what you’ve learned so far: ■ ■ ■ ■ ■ ■\n\nWeb Parts are one of the building blocks in SharePoint. Web Parts can act alone or together with other Web Parts. The Web Part infrastructure is defined in ASP.NET 2. Web Parts are managed through a Web Part Manager object. Web Parts exist inside or outside of Web Part zones. Pages in SharePoint host the Web Part zones.\n\nSummary\n\n23\n\nFor a SharePoint Web Part developer, two tools are especially important: Visual Studio 2010 and SharePoint Designer 2010. The first is used for designing and building Web Parts and the latter for configuring Web Parts, pages, and sites. The rest of this book will cover most of the situations you’ll be facing when building Web Parts, and you should have these tools close at hand. Remember that you don’t always have to develop your own Web Parts; there are plenty of configurable Web Parts that you can use to create your solutions. But, there are many situations when you need to develop your own custom Web Part to provide a unique functionality that your customer is requesting or to have full control of your application. Developing Web Parts isn’t just about writing a piece of code that’s injected into a SharePoint environment; you need to know how SharePoint uses the Web Parts and how you leverage SharePoint’s features. We’ll continue to explore Web Parts in SharePoint and how to make your Web Parts utilize the platform in the best possible way.\n\nUsing and configuring Web Parts in SharePoint 2010\n\nThis chapter covers ■\n\nFeatures in the SharePoint 2010 interface\n\n■\n\nThe Web Part Gallery\n\n■\n\nOut-of-the-box Web Parts in SharePoint 2010\n\n■\n\nSharePoint Designer 2010\n\nA key factor in becoming a great developer is a good understanding of how end users work with the tools that SharePoint 2010 provides. As a developer, you may often be asked to build a solution or a Web Part that accomplishes a specific task. Taking advantage of the out-of-the-box features can get you up to speed faster. Sometimes, you may even end up with a solution that requires no programming and no new code. As you learned in the first chapter, the best SharePoint developers know how to leverage the platform and use the tools that SharePoint supplies. You’ll most likely build better Web Parts if you know how your end users will use your Web Parts and how they’ll create their own applications using them. In this chapter, we’ll explore a few of those possibilities. 24\n\nThe SharePoint 2010 user interface\n\n25\n\nOnce you know what users can accomplish using only the web interface and SharePoint Designer, you should use the same techniques. You can use the built-in Web Parts to create mockups and demos to show a concept application or to validate your solution with your customer even before you start programming. The out-of-the-box Web Parts can also be a part of your final solution, in combination with your custom Web Parts and pages.\n\n2.1\n\nThe SharePoint 2010 user interface The first thing you’ll notice in SharePoint 2010—if you’ve worked with SharePoint before—is the new user interface. Menus have been drastically changed and moved around and the interface has a more modern design, but it won’t be long before you find your way around and feel at home. SharePoint hides a lot of functionality to avoid cluttering the interface; for example, the Web Part options menu in the upper-right corner of the Web Part is visible only when you select it or hover over the Web Part with your mouse. SharePoint has several new and improved features such as the Ribbon (you’ll recognize it from Microsoft Office 2007) and Ajax dialog boxes and notifications. These components, which you’ll learn about in the next section, make SharePoint efficient to work with. They also give you, the developer, a whole new way to interact with the users of your Web Parts. TIP If you’re upgrading or have upgraded your SharePoint 2010 site from SharePoint 2007, you’ll notice that the new version retains the SharePoint 2007 interface. This is because of the enhanced SharePoint upgrade procedure that uses the backward-compatible master pages. You can switch over to the new 2010 interface at any time, temporarily or permanently, using the Visual Upgrade option found under Site Settings.\n\n2.1.1\n\nThe new SharePoint user interface and the Ribbon Microsoft Office 2007 introduced a revolutionary and innovative interface, including the now well-known Ribbon interface. The Ribbon is the new combined menu and toolbar and is based on the user’s current context; for example, if the user is editing a table, the table editing commands appear. This context-aware interface has now made it into SharePoint 2010 (see figure 2.1) and is one of the most significant UI changes for end users.\n\nFigure 2.1 SharePoint 2010 includes the Ribbon toolbar, introduced in Office 2007. The Ribbon is context aware, which means it changes its contents depending on what the user is doing.\n\n26\n\nCHAPTER 2\n\nUsing and configuring Web Parts in SharePoint 2010\n\nThe Ribbon consists of a number of tabs that are divided into sections containing controls. These tabs are context aware and appear when needed. For example, when you’re editing a page, the Editing Tools tab containing the Format Text and Insert tabs appears, as you can see in figure 2.1. The tabs and sections are dynamically loaded without any postbacks and screen refreshes, which makes the interface easy and fast to use. Even a Web Part, such as the SharePoint Server Media Web Part, can have its own Ribbon controls. The Ribbon experience is extensible in that you can add and remove tabs, sections, groups, and controls to make a superior end user experience. Chapter 10 will introduce you to the Ribbon objects and show you how to create Ribbon- and contextaware Web Parts. SharePoint has borrowed other features from the Microsoft Office UI, such as Live Previews and Galleries. Live Previews facilitate the editing process and allow you to preview your design changes without saving the information.\n\n2.1.2\n\nOther interface improvements The Ribbon is not the only interface improvement in SharePoint 2010. There are several features that you as a developer can take advantage of and plug into. SharePoint is using Ajax-based dialog boxes and notifications as well as other JavaScript-based features that you can extend. To avoid postbacks and make the web interface faster and more intuitive, SharePoint uses the new Ajax-based Dialog Framework, a JavaScript-based framework for creating modal dialogs. When you click to edit an item in a list, instead of going to a new page, which you did in SharePoint 2007, you’re now presented with an in-browser overlay pop-up window. Another dynamic interface feature is the status bar, which is located under the Ribbon. This bar is used to provide status messages to the user and optionally gives the user the opportunity to take some action without stopping work. The status bar can be used to alert users about configuration errors or that certain actions need to be taken. For example, the status bar is used when you have a save conflict on a Web Part page. In Central Administration (Central Administration is the SharePoint administration website), the status bar notifies administrators when the Health Analyzer has detected issues (see figure 2.2). Notification messages are the small messages that appear below the Ribbon on the right side when, for instance, a page is loading or saving. The difference between the status bar and notification messages is that the status bar is used for more persistent user information whereas notification messages are used for transient information. Chapter 10 will show you how to utilize these new features in your Web Parts. You can use all these features to create just the user experience that you want, and I’ll show you how it’s done in this book.\n\nThe Web Part Gallery\n\n27\n\nFigure 2.2 The Central Administration in SharePoint contains a Health Analyzer that analyzes the current state of the farm. If any critical errors are found, the Health Analyzer uses the status bar to notify administrators.\n\n2.2\n\nThe Web Part Gallery You choose Web Parts from the Web Part Gallery, which you’ll find in the Ribbon menu when editing a page. The gallery is a site collection-based library that contains information and metadata about the Web Parts that are available to end users in that specific site collection. The gallery is used to publish the Web Parts that you build or install so that your users can select the Web Parts they want. Using the gallery or directly importing Web Parts is the only way for users to add Web Parts to a page. Each site collection has its own gallery; you can access a gallery by choosing Site Settings and, under the Galleries section, clicking on Web Parts. SharePoint displays a list of all the available Web Parts in the gallery (see figure 2.3). Not only does the Web Part Gallery host the Web Parts but it also contains metadata about how Web Parts are organized in groups as well as permissions for Web Parts. As a developer, you can deploy your default Web Part configuration into the gallery, and the site collection administrator can, at any time, change the configuration of any Web Part in the gallery. In this section, I’ll walk you through the gallery so that you’ll know where your Web Parts are deployed and how they can be used and configured after deployment.\n\n28\n\nCHAPTER 2\n\nUsing and configuring Web Parts in SharePoint 2010\n\nFigure 2.3 The Web Part Gallery contains all installed Web Parts for the current site collection and is used to locate and add Web Parts to pages.\n\n2.2.1\n\nWhat is the Web Part Gallery? The Web Part Gallery is a special catalog created by SharePoint to host the site collection’s Web Parts. When users are building Web Part pages using either the browser or SharePoint Designer, they pick the Web Parts they need by selecting them from the gallery. The gallery doesn’t contain the compiled Web Part assembly; it’s simply a list of Web Part items with metadata columns and a file attachment that contains a Web Parts control description file. This file contains the default value used by any created instance of the Web Part as well as the reference to the assembly and Web Part class. All Web Parts can also have a group value, which is used for organizing and grouping the Web Parts. The Web Part Gallery contains a set of preconfigured templates for Web Parts that editors can choose from. When you’re adding a Web Part to a page, the Web Part properties are copied from the control description file to the page. If you later go back and edit the Web Part in the gallery, this change won’t affect Web Parts that have already been added. Chapter 3 will show you what the Web Parts control description file looks like and how it works. When I talk about Web Parts in the Web Part Gallery, I’m referring to the definition and configuration of a Web Part. That’s also what end users are referring to when they talk about Web Parts. When a developer talks about a Web Part, they’re most often talking about the Web Part class existing in an assembly. When working with pages programmatically, you don’t have to use only the Web Parts listed in the gallery—you can use any Web Part that you create through code. This topic will be discussed further in chapter 15 when we explore building pages and dashboards. If you’re adding Web Parts to a page, you also have access to a special group called Lists and Libraries. This category contains the XSLT List View Web Parts (see section 2.3.1) configured for all available lists and libraries in the site and shows a view of the selected list.\n\nThe Web Part Gallery\n\n2.2.2\n\n29\n\nUploading or adding new Web Parts to the gallery To add new Web Parts to the gallery using the web interface, you can choose from two basic methods: ■ ■\n\nUpload a Web Parts control description file (.webpart). Populate the gallery with Web Parts discovered in registered assemblies.\n\nThe first approach, uploading a Web Parts control description file, is also used behind the scenes when you install a SharePoint solution package containing Web Parts. You simply click the Upload Document button in the gallery and, when the file is uploaded, you’re prompted to configure the Web Part with a title, description, and so forth, before you save the item. In the second method, which involves discovery of Web Parts in registered assemblies, you click the New Document button in the gallery. SharePoint iterates all assemblies registered as safe in the web.config file and then searches for any classes inheriting from the System.Web.UI.WebControls.WebParts.WebPart class and displays a list of them. When you select one or more of the Web Parts in the list and click Populate Gallery, SharePoint creates the Web Parts control description files for you automatically and adds the Web Parts to the gallery. Using the populate method has a drawback: the Web Part won’t get any default property values, which may result in unexpected behavior. Only use this approach when you have to or when you need to modify and upload a default control description file.\n\n2.2.3\n\nEditing Web Parts in the gallery If you want to edit the metadata and information of a Web Part in the gallery, you first have to go to the Web Part Gallery, which you’ll find in the Site Settings of the site collection. Note that, if you’re in a subsite, you have to navigate to the root site and choose Site Settings. The Web Part Gallery is located under the Galleries section; just click the link to view the gallery. The gallery is just like any SharePoint list and can be sorted and filtered. This is great if you have a lot of Web Parts, especially when you’re using SharePoint Server 2010 and have a number of features activated. When you click on one of the Web Parts listed in the gallery, you’ll see the Web Part Preview page, which shows you the Web Part in preview mode. To edit the Web Part metadata, select the Web Part, click the Documents tab in the Ribbon, and click Edit Properties (or you can click the edit icon that appears directly to the right of the Web Part name). A dialog box appears (as shown in figure 2.4), where you can edit the properties of the Web Part. These aren’t the Web Part properties that are stored in the Web Parts control description file discussed in chapter 5; you’re editing metadata about the Web Part configuration in this site collection. The dialog box lets you change the title, description, grouping, and other properties for the Web Part. Save the information by clicking the Save button in the Ribbon.\n\n30\n\nCHAPTER 2\n\nUsing and configuring Web Parts in SharePoint 2010\n\nFigure 2.4 You can configure, group, export, and manage the permissions for the Web Parts in the Web Part Gallery catalog, accessed from the Site Settings page.\n\nA SharePoint feature is a set of functionalities packaged together to simplifies deployment and installation. A feature is targeted to a scope, such as a site or the entire farm, and can be activated to enable the functionalities defined in the feature and deactivated to remove them.\n\nNOTE\n\n2.2.4\n\nGrouping the Web Parts Web Parts are grouped in the gallery, which helps end users find the relevant Web Part more easily. The groups are defined by the metadata on the Web Part in the gallery and can be changed by users who have appropriate permissions. Custom-developed and imported Web Parts appear in the Custom group unless otherwise specified. In chapter 3, you’ll learn how to define these groups in your custom solution. If you want to change groups or add groups to a Web Part in the gallery, you have to edit the Web Part metadata. You can specify a new group name or use the default ones to group your Web Parts.\n\n2.2.5\n\nPermissions on Web Parts in the gallery Not all users can add Web Parts to the gallery, but, by default, all users with permissions to edit a page can use all the Web Parts in the gallery. Only users with the Design or Full\n\nOut-of-the-box Web Parts\n\n31\n\nControl permission level are allowed to add or edit Web Parts in the gallery. More specifically, you need the Manage Lists list permission to be able to edit the gallery. Normally, there’s no need to prohibit users from using all the Web Parts available in the gallery. Instead, you build Web Parts in such a way that they display a friendly error message if they’re used or viewed by someone who shouldn’t have access. For example, if you create a Web Part that reads information from a restricted content source and displays that data, you should make sure in your Web Part that only the intended users can see that information. Sometimes, it’s necessary to hide Web Parts from the editors so they don’t use them. You can do this by modifying properties on the Web Part and then selecting Manage Permissions. The permissions are, by default, inherited from the gallery, which is, by default, inherited from the site. So you first have to break the permission inheritance and then set the permissions that you want the Web Part to have. This only prevents the editors from using the Web Part when creating a new page and it doesn’t hide any Web Parts currently used on pages or prohibit users from seeing Web Parts.\n\n2.3\n\nOut-of-the-box Web Parts SharePoint 2010 comes with a number of out-of-the-box Web Parts that are available for end users to use when they’re creating pages and dashboards. The Web Parts that are included reflect which version of SharePoint is installed, which site template is used, and which features are enabled on the site collections. Not all Web Parts are available through the gallery. Some, like the Data Form and the XSLT List View Web Parts, need to be added and configured using SharePoint Designer. Some you have to add manually to the gallery. The following sections cover the most important out-of-the-box Web Parts in SharePoint. I’ve separated them into the free version SharePoint Foundation 2010 and the license-based version SharePoint Server 2010 so that you can see the differences. For a full list of Web Parts and more details, see appendix A.\n\nSharePoint edition details The official SharePoint web site contains a detailed edition comparison diagram where you can see what features each edition contains. Compare the features of the SharePoint Foundation, SharePoint Server Standard and Enterprise at http:// sharepoint.microsoft.com/en-us/buy/pages/editions-comparison.aspx.\n\n2.3.1\n\nSharePoint Foundation 2010 SharePoint Foundation 2010, which is the entry-level edition of SharePoint 2010, contains a set of Web Parts. They’re either generic, for information display, or focused on building simple collaboration sites. Table 2.1 lists the Web Parts that you can find in the gallery in a SharePoint Foundation site.\n\n32\n\nCHAPTER 2 Table 2.1\n\nUsing and configuring Web Parts in SharePoint 2010\n\nThe Web Parts of SharePoint Foundation\n\nWeb Part name\n\nDescription\n\nGroup\n\nHTML Form Web Part\n\nConnects simple form controls to other Web Parts.\n\nForms\n\nPicture Library Slideshow Web Part\n\nCreates a slideshow of pictures from a picture gallery.\n\nContent Rollup\n\nXML Viewer\n\nImports an XML source and transforms it using an XSLT document. For example, it can be used to import an RSS feed, which is then transformed using a custom XSLT into displayable content.\n\nContent Rollup\n\nRelevant Documents\n\nDisplays relevant documents for the current user.\n\nDocuments\n\nContent Editor\n\nUsed to add formatted text, tables, and images to a page. Can be used to add JavaScript functions to the page.\n\nMedia and Content\n\nImage Viewer\n\nShows an image.\n\nMedia and Content\n\nPage Viewer\n\nAllows you to frame in another or external page in the page. This Web Part can be used to add framed custom external applications to a site.\n\nMedia and Content\n\nSilverlight Web Part\n\nAdds a custom Silverlight application to the page.\n\nMedia and Content\n\nSite Users\n\nShows the current users and groups of a site.\n\nPeople\n\nUser Tasks\n\nDisplays the current tasks for the user from the site where the Web Part is placed.\n\nPeople\n\nThe generic Web Parts, such as Content Editor, HTML Form, and XML Viewer, can be used to create basic applications. For instance, you can use Content Editor to execute JavaScript code or insert custom HTML into a page. Using HTML Form, you can create an input form that creates a filter for other Web Parts. The Silverlight Web Part—new in SharePoint 2010—allows you to add a Silverlight application to your site by either uploading a Silverlight XAP file to a document library or linking to an external XAP file. Using this Web Part and the Client Object Model (discussed in detail in chapter 11), you can create rich and advanced applications without even touching the server. Silverlight is a convenient way to extend your SharePoint site in situations when you aren’t allowed to add server-side code and can’t use sandboxed solutions. Some of the out-of-the-box Web Parts aren’t accessible from the Web Part Gallery and are often overlooked by developers. These include the Data Form Web Part (known as the Data View Web Part in SharePo"
    }
}