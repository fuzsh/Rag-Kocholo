{
    "id": "correct_subsidiary_00020_0",
    "rank": 82,
    "data": {
        "url": "https://www.linkedin.com/pulse/create-electron-application-interact-sharepoint-using-raman",
        "read_more_link": "",
        "language": "en",
        "title": "Create Electron application to interact with SharePoint using OAuth implicit grant flow",
        "top_image": "https://media.licdn.com/dms/image/C5112AQHksQpoLqYhoQ/article-cover_image-shrink_600_2000/0/1567261183882?e=2147483647&v=beta&t=UwZ6-qrU3CiIaHMvTgdNOUYEJnq6SdFsrQao9WJVkuQ",
        "meta_img": "https://media.licdn.com/dms/image/C5112AQHksQpoLqYhoQ/article-cover_image-shrink_600_2000/0/1567261183882?e=2147483647&v=beta&t=UwZ6-qrU3CiIaHMvTgdNOUYEJnq6SdFsrQao9WJVkuQ",
        "images": [
            "https://media.licdn.com/dms/image/C5112AQHksQpoLqYhoQ/article-cover_image-shrink_600_2000/0/1567261183882?e=2147483647&v=beta&t=UwZ6-qrU3CiIaHMvTgdNOUYEJnq6SdFsrQao9WJVkuQ",
            "https://media.licdn.com/dms/image/C5112AQGLfeo7ejMnrQ/article-inline_image-shrink_1500_2232/0/1567260959542?e=1727308800&v=beta&t=vLs-Bj8rZRJc78kjX7yO3o0UkTdSV8vYjwNQFD2B9fk",
            "https://media.licdn.com/dms/image/C5112AQGM7zCvM7CmqQ/article-inline_image-shrink_1000_1488/0/1567259421302?e=1727308800&v=beta&t=zYWuuEx9Q93r_DLv7HMWA5EU0f7KYqgW5dvoPiladyM",
            "https://media.licdn.com/dms/image/C5112AQGW99L1X6a8KQ/article-inline_image-shrink_1500_2232/0/1567259399139?e=1727308800&v=beta&t=uGh7BFEIzNYK5iRa_7eZeGqhD0FQXUe4DyyiK9ZBOpA",
            "https://media.licdn.com/dms/image/C5112AQE1q__9nZ2p-Q/article-inline_image-shrink_1000_1488/0/1567259383851?e=1727308800&v=beta&t=mPwZneU6rfQ7GRzYQXTMPMhLMF-RTLR61pdEPaxHnqQ",
            "https://media.licdn.com/dms/image/C5112AQFdO6aNv6T0Xg/article-inline_image-shrink_1500_2232/0/1567259330341?e=1727308800&v=beta&t=1bb7ZALXEGG3aHTsnoclHJ8bp8IbdPU8-JYQU4_yzXY"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Ramakrishnan Raman"
        ],
        "publish_date": "2019-08-31T14:24:36+00:00",
        "summary": "",
        "meta_description": "Introduction This article can be used to build cross platform desktop application using electron js to interacts with Office 365 resources. It further explains interaction of the application with SharePoint Online using Oauth implicit flow via graph API.",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/create-electron-application-interact-sharepoint-using-raman",
        "text": "Introduction\n\nThis article can be used to build cross platform desktop application using electron js to interacts with Office 365 resources. It further explains interaction of the application with SharePoint Online using Oauth implicit flow via graph API.\n\nPurpose\n\nPurpose of this article is to explain how OAuth Implicit flow works and how it can be implemented in a Desktop application built using Electron JS to interact with O365 products via . For better explanation, we will build a Employee Registration desktop application which will call graph api to get and add list item in SharePoint.\n\nWhy Electron JS ?\n\nElectron JS is widely used to easily setup a cross platform desktop application. Most of the top used desktop application from Microsoft like Teams & Visual Studio Code is built using Electron. See the list of application build using electron js here\n\nArchitectural Flow\n\nBelow is a pictorial representation of over all process flow that occurs during this application life cycle.\n\nThe over all architectural flow can be divided into three major actions specified below:\n\n1) Application prompts for login credentials and user provides it, the application then request an access token from Microsoft Identity platform.\n\n2) Microsoft Identity Platform verifies the user and handovers the access token.\n\n3) Application make graph api call, passing the access token received to get & add SharePoint list item.\n\nGetting started on building an application using Electron JS\n\nThis section is divided into two sub sections.\n\n1) Create \\ Register an Azure Application and Grant permission the required permission.\n\n2) Build Electron JS application to interact with SharePoint Online.\n\nCreate \\ Register an Azure Application and Grant the required permission.\n\nFollow the steps specified below to register a new application and assign the required permission.\n\n1 ) Sign in to the Azure portal using tenant admin account.\n\nIf the account that is being used has access to more than one tenant, select the particular account in the top right corner, and set portal session to the Azure AD tenant that needs to be used.\n\n2) In the left-hand navigation pane, select the Azure Active Directory service and then select App registrations > New registration.\n\nProvide a name (Here its EmployeeRegisteration) and under Redirect URI enter \"https://login.microsoftonline.com/common/oauth2/nativeclient\"\n\nClick Register.\n\n3) Go to API permission and click on Add permission. Select Microsoft Graph option and then select Delegated Permission. Since we are requesting sign-in credentials from logged in user, we are selecting delegated permission. Select \"Sites.Manage.All\" under Sites category & Click Add permissions.\n\n4) Go to Authentication, select 'Access Tokens' under Advance Settings -> Implicit Grant category & Click 'Save'.\n\nMake note of Client ID & Tenant ID which will be required while building the application.\n\nBuild Electron JS application to interact with SharePoint Online\n\nWe are building a Employee Registration desktop application which will call graph api to get and add list item in SharePoint. Here, we will first create a login window to collect credentials from user and request access token from Microsoft Identity Platform. On receiving of the access token successfully, we will call the graph api to get and add list items.\n\nFollow the below steps to build the application.\n\n1) Git Clone the below repo in any preferred location. (Note : Any boiler plate code can be used).\n\ngit clone https://github.com/alexdevero/electron-react-webpack-boilerplate.git\n\n2) Open the project in Visual Studio Code or any other editor.\n\nAdd a new file in the root directory with the name settings.json. Include the below content and save it. Include the client id and tenant id noted in previous section. Also provide the list id and tenant name.\n\n{ \"tenant\":\"<yourtenant>.sharepoint.com\", \"tenantID\":\"<tenant ID>\", \"ClientID\":\"<client ID>\", \"resource\":\"https://graph.microsoft.com \", \"redirectURL\":\"https://login.microsoftonline.com/common/oauth2/nativeclient \", \"listID\":\"<SharePoint List ID>\" }\n\n3) Inside Main.js, add the below code. Here we are writing a function called loginPrompt.\n\nThe idea is to create a new browser window & redirect the login user to enter credentials to acquire access token from Microsoft Identity Platform.\n\nipcMain.on('loginPrompt', (event, args) => { let authWindow = new BrowserWindow( { alwaysOnTop: true, // keeps this window on top of others modal: true, autoHideMenuBar: true, parent: mainWindow, frame: true, show: false, webPreferences: { nodeIntegration: false, // again, don't need to specify these if Electron v4+ but showing for demo contextIsolation: true // we can isolate this window } } ); authWindow.on('closed', () => { this.authWindow = null; }); authWindow.setMenu(null); let filter = { urls: [settings.redirectURL] }; authWindow.webContents.on('did-finish-load', () => { authWindow.show(); }); authWindow.loadURL(`https://login.microsoftonline.com/` + settings.tenantID + `/oauth2/authorize? client_id=`+ settings.ClientID + ` &response_type=token &scope=openid &redirect_uri=`+settings.redirectURL+` &response_mode=fragment &nonce=678911 &state=12345 &resource=`+ encodeURIComponent(settings.resource)); session.defaultSession.webRequest.onCompleted(filter, (details) => { var url = details.url; let accessToken = url.match(/\\#(?:access_token)\\=([\\S\\s]*?)\\&/)[1]; event.returnValue = accessToken; authWindow.close(); }); });\n\nWe send the accessToken back to the event from where it is called.\n\n3) In App.js located inside src > components add the following code\n\ncomponentDidMount() { accessToken = ipcRenderer.sendSync('loginPrompt', {}); }\n\nOnce our component is mounted, we are calling the loginPrompt function request for user sign in.\n\nMore info on ipcMain & ipcRender below https://electronjs.org/docs/api/ipc-main | https://electronjs.org/docs/api/ipc-renderer\n\nBuilding the UI\n\nTo build the UI, we will use Office UI Fabric for React.\n\n4) To Include Office UI Fabric for react, Include the below command from the terminal of Visual Studio Code.\n\nnpm i office-ui-fabric-react\n\n5) Replace the below code in App.js file.\n\nimport React, { Component } from 'react'; import { TextField, PrimaryButton, DefaultButton } from 'office-ui-fabric-react'; import '../assets/css/App.css'; import * as settings from '../../settings'; const electron = window.require(\"electron\"); const ipcRenderer = electron.ipcRenderer const request = require('request'); let accessToken; class App extends React.Component { constructor(props) { super(props); this.state = { tableContent: null } this.buttonClick = this.buttonClick.bind(this); } buttonClick(e) { e.preventDefault(); this.addEmployee(this.employeeName.value, this.employeeDesignation.value, accessToken).then(() => { this.getAllEmployees().then((htmlContent) => { this.setState({ tableContent: htmlContent }); }); }); } componentDidMount() { accessToken = ipcRenderer.sendSync('loginPrompt', {}); if (accessToken !== undefined) { this.getAllEmployees().then((htmlContent) => { this.setState({ tableContent: htmlContent }); }); } } addEmployee(employeeName, desgination) { return new Promise((resolve, reject) => { const options = { method: 'POST', url: 'https://graph.microsoft.com/v1.0/sites/' + settings.tenant + '/lists/' + settings.listID + '/items', headers: { 'Authorization': 'Bearer ' + accessToken, 'content-type': 'application/json' }, body: JSON.stringify({ \"fields\": { \"Title\": employeeName, \"Designation\": desgination } }) }; request(options, (error, response, body) => { const result = JSON.parse(body); if (response.statusCode == 201) { resolve(result); } else { reject(result); } }); }); } getAllEmployees() { return new Promise((resolve, reject) => { const options = { method: 'GET', url: 'https://graph.microsoft.com/v1.0/sites/' + settings.tenant + '/lists/' + settings.listID + '/items?expand=fields(select=Title,Designation)', headers: { 'Authorization': 'Bearer ' + accessToken, 'content-type': 'application/json' } }; request(options, (error, response, body) => { const result = JSON.parse(body); let htmlContent = []; if (response.statusCode == 200) { Promise.all(result.value.map((eachItem, i) => { htmlContent.push(<div className=\"w3-container w3-border-bottom w3-border-blue ms-Grid-col ms-sm12 ms-md10 ms-lg9\"> <div className=\"ms-Grid-col ms-sm6 ms-md6 ms-lg6\"> {result.value[i].fields.Title} </div> <div className=\"w3-border-blue ms-Grid-col ms-sm6 ms-md6 ms-lg6\"> {result.value[i].fields.Designation} </div> </div>); })).then(() => { resolve(htmlContent); }); } else { reject(result); } }); }); } render() { return <div className=\"ms-Grid center\"> <div className=\"ms-Grid-row\"> <div className=\"ms-Grid-col ms-sm12 ms-md10 ms-lg9\"> <TextField label=\"Employee Name\" componentRef={(ref) => { this.employeeName = ref }} placeholder=\"Enter Name\" /> </div></div> <div className=\"ms-Grid-row\"> <div className=\"ms-Grid-col ms-sm12 ms-md10 ms-lg9\"> <TextField label=\"Designation\" componentRef={(ref) => { this.employeeDesignation = ref }} placeholder=\"Enter Name\" /> </div></div><br /> <div className=\"ms-Grid-row\"> <div className=\"ms-Grid-col ms-sm12 ms-md10 ms-lg6\"> <PrimaryButton onClick ​={this.buttonClick} >Add Employee</PrimaryButton> </div> <div className=\"ms-Grid-col ms-sm12 ms-md10 ms-lg6\"> <DefaultButton>Cancel</DefaultButton> </div> </div> <br /> <br /> <br /> <div className=\"ms-Grid-row\"> <div className=\"w3-container w3-pale-blue w3-leftbar w3-border-blue ms-Grid-col ms-sm12 ms-md10 ms-lg9\"> <div className=\"ms-Grid-col ms-sm6 ms-md6 ms-lg6\"> Employee Name </div> <div className=\"ms-Grid-col ms-sm6 ms-md6 ms-lg6\"> Designation </div> </div> {this.state.tableContent} </div> </div> } } export default App\n\nExplanation\n\nHere we have two function which gets & add item in SharePoint list (Here we have a list with a custom column name \"Designation\"). It calls respective graph api and pass the access token received along with it. Access token is received as soon as the component is mounted. See componentDidMount function.\n\n6) Add the below css rules to App.css located in src -> assets -> App.css\n\n/* Main CSS file */ .w3-border-blue, .w3-hover-border-blue:hover { border-color: skyblue!important; } .w3-border-bottom { border-bottom: 1px solid #ccc!important; } .w3-container, .w3-panel { padding: 0.01em 16px; } *, *:before, *:after { box-sizing: inherit; } div.linebreak::before{ display: block; } .center { margin: auto; width: 60%; padding: 10px; } .w3-border-blue, .w3-hover-border-blue:hover { border-color: #2196F3!important; } .w3-pale-blue, .w3-hover-pale-blue:hover { color: #000!important; background-color: #ddffff!important; } .w3-leftbar { border-left: 6px solid #0466ad!important; } .w3-container, .w3-panel { padding: 0.01em 16px; } body { background-color: #6dbef9; }\n\n7) Package the application for production\n\nRun the below commands\n\nnpm run package npm run prod\n\nThe application exe file will be present inside a newly created build folder. On running the application exe file, login screen will be presented to the user and once the valid credentials are provided, following screen in the shown Glimpse of the desktop application should appear.\n\nSolution can also be downloaded from link provided in download this solution section\n\nGlimpse of the desktop application\n\nConclusion\n\nThus in this article, we saw how to implement OAuth implicit grant flow in a desktop application build using Electron JS.\n\nDownload this solution\n\nThis solution can be downloaded from here\n\nSee Also"
    }
}