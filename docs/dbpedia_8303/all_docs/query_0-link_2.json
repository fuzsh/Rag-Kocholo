{
    "id": "dbpedia_8303_0",
    "rank": 2,
    "data": {
        "url": "https://www.bleachbit.org/forum/question-about-shredding-files-using-python",
        "read_more_link": "",
        "language": "en",
        "title": "A question about Shredding files using Python",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.bleachbit.org/sites/default/files/zen_classic_logo_0.png",
            "https://www.bleachbit.org/images/fb16x16.png",
            "https://www.bleachbit.org/images/twitter16x16.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://www.bleachbit.org/forum/question-about-shredding-files-using-python",
        "text": "What you ask is a complicated problem, so the answer is complicated too. The most important thing to remember is \"secure\" is not black or white (just like driving a car is never completely \"safe\"): there are various levels of security or privacy, and each person should choose the most appropriate level, each with its own cost, considering his specific cirumstances.\n\nTo answer your first question, first there is the behaviour of the particular file system. On Windows, NTFS (and in Linux, ext3 in the most popular default mode) writes files to the same place, so assuming the application (OpenOffice.org, MS Word, GIMP, etc) hasn't moved it since it was first created and later resaved, secure wiping should work as expected. When wiping files or the disk, the swap file is not significant because disk cache is always in physical RAM and not swapped to disk.\n\nThat said, there are limitations. For example, say before BleachBit (or any file cleaner app) sees a file, the application (OpenOffice.org, GIMP, Microsoft Word, etc) cuts it from 3MB to 1MB because the user deleted half the content. When BleachBit (or any other file wiping app) wipes it later as 1MB, it will have no way of knowing where the 2MB was previously stored on the disk. Another thing that can happen when the application wants to save a new version of a document, it may write it to a new file, delete the old version, and rename the new version to the old name: this leaves a sort of shadow copy which not visible to the OS or to the cleaner . These two problems are generally overcome by wiping free disk space (at the cost of a long, long wait).\n\nAnother limitation is slack space: all file systems (NTFS, ext3, reiserfs, etc) store flies in a block size, which is a tiny chunk like 4096 bytes. If a file isn't a multiple of the block size, applications (including BleachBit) won't see the remainder, but a small amount of data from a previous file will remain on the physical hard drive. When shredding individual files, BleachBit writes extra data to clean the slack space, but it doesn't clean slack space when wiping free space on the whole hard drive (this is can be very tricky).\n\nBleachBit tries to wipe traces of old file names after wiping free disk space: when the disk is full, BleachBit creates many empty files until the MFT is full too.\n\nYou can read more about these problems and others (like HPA, or host protected area) under the tag secure delete.\n\nEven in the case of a hypothetical perfect cleaning tool, there are other issues like backups and network data: Google, your ISP, and probably government agencies know what you do online. That said, BleachBit (and most apps like it) provide some privacy from casual observers (family members, most employers, many strangers), but won't protect you against highly-resourced, highly-motivated organizations. To protect against those cases, you would start by wiping the whole hard drive (including operating system and HPA) using a program like DBAN or by physically destroying the hard drive (using a mechanical shredder or degausser). Then, you would want to take some measures online, on disk backups, against hardware loggers, blacking out your windows, etc.\n\nEven if you did all that, a highly-motivated person would probably drug you or commit violence to get information from you.\n\nThanks for such a comprehensive reply, Andrew. However, I don't think my question is as complicated as you've taken it to be :) Your reply goes into great detail, similar to other discussions that I've read from you elsewhere, about what constitutes secure data deletion. That wasn't really my question.\n\nMy question is whether Python's implementation of f.open('fn', wb), doing multiple f.write(4k of blanks) followed by f.flush in BleachBit is guaranteed to actually overwrite anything of the original file data.\n\nI believe you've answered that in part, in that, as you say, NTFS should write to the existing disk locations - although it has to be said that that's provided the file isn't compressed, EFS encrypted or a sparse file. For completeness, I also need to investigate what FAT32 would do with the exact same file operations.\n\nAm I correct in assuming that after opening a file in binary write mode a Python f.write() operation will move the file pointer so that a subsequent write will be at the next location in the file ?\n\nIf so, for me that just leaves the issue that most wiping utilities will do multiple passes and consequently they open the file with the FILE_FLAG_WRITE_THROUGH flag set to write directly to the disk. Otherwise, only the last pattern is likely to actually get written to disk, all others being cached. BleachBit doesn't appear to set that flag, but if the Wiki article is to be believed, only one write of the entire file is necessary, so it doesn't matter if BleachBit's writing gets flushed after all the writes have taken place.\n\nI'm currently converting Mark Russinovich's secure delete utility to Delphi so as to add a GUI front-end and shell context menu deletion options for selected files and folders.\n\nIt might be useful (not just to me) if BleachBit could call a DLL or shell out to a command-line executable for each file it wants to wipe - rather like when chess programs use a different chess engine to the built-in one. That way, users can use BleachBit to decide what to delete, but use their favourite wiping program (whether that's BCWipe, Mark R's SDelete, Eraser or my one etc. etc) to actually do the wipe. Is that something you'd consider implementing ?\n\nWhen all's said and done I'm definately warming to BleachBit for both my deletion requirements: fine control over what to delete and reasonably secure wiping of file contents."
    }
}