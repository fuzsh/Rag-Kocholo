{
    "id": "dbpedia_8303_2",
    "rank": 7,
    "data": {
        "url": "https://stackoverflow.com/questions/14288177/interact-with-other-programs-using-python",
        "read_more_link": "",
        "language": "en",
        "title": "Interact with other programs using Python",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/d73fc2c7bd494149d303a2b87aa5a6d5?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7341c1be104747dfdcfaf1988c1d6000?s=64&amp;d=identicon&amp;r=PG",
            "https://www.gravatar.com/avatar/7e41acaa8f6a0e0f5a7c645e93add55a?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Uok2N.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d92ce60d3a4cbe03598e27c2e8dee69d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/5b9c04999233026354268c2ee4237e04?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/a4lMw.jpg?s=64",
            "https://stackoverflow.com/posts/14288177/ivc/ccf8?prg=bd99eb73-a374-4cbf-a3a5-9e279851a17f"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-01-11T23:13:18",
        "summary": "",
        "meta_description": "I'm having the idea of writing a program using Python which shall find a lyric of a song whose name I provided. I think the whole process should boil down to couple of things below. These are what ...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/14288177/interact-with-other-programs-using-python",
        "text": "If what you're really looking into is a good excuse to teach yourself how to interact with other apps, this may not be the best one. Web browsers are messy, the timing is going to be unpredictable, etc. So, you've taken on a very hard task—and one that would be very easy if you did it the usual way (talk to the server directly, create the text file directly, etc., all without touching any other programs).\n\nBut if you do want to interact with other apps, there are a variety of different approaches, and which is appropriate depends on the kinds of apps you need to deal with.\n\nSome apps are designed to be automated from the outside. On Windows, this nearly always means they a COM interface, usually with an IDispatch interface, for which you can use pywin32's COM wrappers; on Mac, it means an AppleEvent interface, for which you use ScriptingBridge or appscript; on other platforms there is no universal standard. IE (but probably not Chrome) and Word both have such interfaces.\n\nSome apps have a non-GUI interface—whether that's a command line you can drive with popen, or a DLL/SO/DYLIB you can load up through ctypes. Or, ideally, someone else has already written Python bindings for you.\n\nSome apps have nothing but the GUI, and there's no way around doing GUI automation. You can do this at a low level, by crafting WM_ messages to send via pywin32 on Windows, using the accessibility APIs on Mac, etc., or at a somewhat higher level with libraries like pywinauto, or possibly at the very high level of selenium or similar tools built to automate specific apps.\n\nSo, you could do this with anything from selenium for Chrome and COM automation for Word, to crafting all the WM_ messages yourself. If this is meant to be a learning exercise, the question is which of those things you want to learn today.\n\nLet's start with COM automation. Using pywin32, you directly access the application's own scripting interfaces, without having to take control of the GUI from the user, figure out how to navigate menus and dialog boxes, etc. This is the modern version of writing \"Word macros\"—the macros can be external scripts instead of inside Word, and they don't have to be written in VB, but they look pretty similar. The last part of your script would look something like this:\n\nword = win32com.client.dispatch('Word.Application') word.Visible = True doc = word.Documents.Add() doc.Selection.TypeText(my_string) doc.SaveAs(r'C:\\TestFiles\\TestDoc.doc')\n\nIf you look at Microsoft Word Scripts, you can see a bunch of examples. However, you may notice they're written in VBScript. And if you look around for tutorials, they're all written for VBScript (or older VB). And the documentation for most apps is written for VBScript (or VB, .NET, or even low-level COM). And all of the tutorials I know of for using COM automation from Python, like Quick Start to Client Side COM and Python, are written for people who already know about COM automation, and just want to know how to do it from Python. The fact that Microsoft keeps changing the name of everything makes it even harder to search for—how would you guess that googling for OLE automation, ActiveX scripting, Windows Scripting House, etc. would have anything to do with learning about COM automation? So, I'm not sure what to recommend for getting started. I can promise that it's all as simple as it looks from that example above, once you do learn all the nonsense, but I don't know how to get past that initial hurdle.\n\nAnyway, not every application is automatable. And sometimes, even if it is, describing the GUI actions (what a user would click on the screen) is simpler than thinking in terms of the app's object model. \"Select the third paragraph\" is hard to describe in GUI terms, but \"select the whole document\" is easy—just hit control-A, or go to the Edit menu and Select All. GUI automation is much harder than COM automation, because you either have to send the app the same messages that Windows itself sends to represent your user actions (e.g., see \"Menu Notifications\") or, worse, craft mouse messages like \"go (32, 4) pixels from the top-left corner, click, mouse down 16 pixels, click again\" to say \"open the File menu, then click New\".\n\nFortunately, there are tools like pywinauto that wrap up both kinds of GUI automation stuff up to make it a lot simpler. And there are tools like swapy that can help you figure out what commands you want to send. If you're not wedded to Python, there are also tools like AutoIt and Actions that are even easier than using swapy and pywinauto, at least when you're getting started. Going this way, the last part of your script might look like:\n\nword.Activate() word.MenuSelect('File->New') word.KeyStrokes(my_string) word.MenuSelect('File->Save As') word.Dialogs[-1].FindTextField('Filename').Select() word.KeyStrokes(r'C:\\TestFiles\\TestDoc.doc') word.Dialogs[-1].FindButton('OK').Click()\n\nFinally, even with all of these tools, web browsers are very hard to automate, because each web page has its own menus, buttons, etc. that aren't Windows controls, but HTML. Unless you want to go all the way down to the level of \"move the mouse 12 pixels\", it's very hard to deal with these. That's where selenium comes in—it scripts web GUIs the same way that pywinauto scripts Windows GUIs.\n\nIf you really want to open a browser, etc, look at selenium. But that's overkill for your purposes. Selenium is used to simulate button clicks, etc for testing the appearance of websites on various browsers, etc. Mechanize is less of an overkill for this\n\nWhat you really want to do is understand how a browser (or any other program) works under the hood i.e. when you click on the mouse or type on the keyboard or hit Save, what does the program do behind the scenes? It is this behind-the-scenes work that you want your python code to do.\n\nSo, use urllib, urllib2 or requests (or heck, even scrapy) to request a web page (learn how to put together the url to a google search or the php GET request of a lyrics website). Google also has a search API that you can take advantage of, to perform a google search.\n\nOnce you have your results from your page request, parse it with xml, beautifulsoup, lxlml, etc and find the section of the request result that has the information you're after.\n\nNow that you have your lyrics, the simplest thing to do is open a text file and dump the lyrics in there and write to disk. But if you really want to do it with MS Word, then open a doc file in notepad or notepad++ and look at its structure. Now, use python to build a document with similar structure, wherein the content will be the downloaded lyrics.\n\nIf this method fails, you could look into pywinauto or such to automate the pasting of text into an MS Word doc and clicking on Save\n\nCitation: Matteo Italia, g.d.d.c from the comments on the OP"
    }
}