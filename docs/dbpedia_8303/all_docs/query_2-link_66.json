{
    "id": "dbpedia_8303_2",
    "rank": 66,
    "data": {
        "url": "https://opensource.com/resources/python",
        "read_more_link": "",
        "language": "en",
        "title": "What is Python?",
        "top_image": "https://opensource.com/sites/default/files/lead-images/python_snake_file_box.jpg",
        "meta_img": "https://opensource.com/sites/default/files/lead-images/python_snake_file_box.jpg",
        "images": [
            "https://opensource.com/themes/osdc/assets/img/l_supported-by-redhat-white.svg",
            "https://opensource.com/themes/osdc/logo.svg",
            "https://opensource.com/themes/osdc/assets/img/l_supported-by-redhat-white.svg",
            "https://opensource.com/sites/default/files/lead-images/python_snake_file_box.jpg",
            "https://opensource.com/themes/osdc/assets/img/cc-by-sa-4.png",
            "https://opensource.com/themes/osdc/logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Opensource.com"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Python is a popular general-purpose programming language that can be used for a wide variety of applications.",
        "meta_lang": "en",
        "meta_favicon": "/themes/osdc/assets/img/favicons/favicon.ico",
        "meta_site_name": "Opensource.com",
        "canonical_link": "https://opensource.com/resources/python",
        "text": "Python is a popular general-purpose programming language that can be used for a wide variety of applications. It includes high-level data structures, dynamic typing, dynamic binding, and many more features that make it as useful for complex application development as it is for scripting or \"glue code\" that connects components together. It can also be extended to make system calls to almost all operating systems and to run code written in C or C++. Due to its ubiquity and ability to run on nearly every system architecture, Python is a universal language found in a variety of different applications.\n\nPython is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. â€”Python Software Foundation FAQ\n\nThe programming language includes thousands of third-party modules available in the Python Package Index (PyPI). PyPI provides popular standards for different expertise, like Django for web development and NumPy, Pandas, and Mathplotlib for data science.\n\nAbout Python\n\nFirst developed in the late 1980s by Guido van Rossum, Python has advanced as an open source programming language by managing public discussion through Python Enhancement Proposals (PEPs). In 2018, van Rossum stepped down as the language's Benevolent Dictator For Life (BDFL), and, as officially outlined in PEP 13, a steering council was put in place to serve as the leadership of the language.\n\nThe Python Software Foundation (PSF) is a 501(c)(3) non-profit corporation that holds the intellectual property rights behind the Python programming language. This includes Python version 2.1 and later, PyPI, the CPython reference implementation, and infrastructure to maintain the language. The PSF also provides grants for software craftship and runs multiple PyCon conferences a year.\n\nPython is currently on its third major version and is regularly updated.\n\nIs Python open source?\n\nYes, all modern versions of Python are copyrighted under a GPL-compatible license certified by the Open Source Initiative. The Python logo is trademarked but allows for customization (see the full license for details).\n\nYou can download the Python source code here.\n\nWhy use Python?\n\nThere are several reasons why Python is a good choice as a programming language, depending on your perspective and background.\n\nPython for programmers\n\nThose new to programming can benefit from Python's high level of abstraction. It is highly interactive and known for its \"strong opinions\" around specific syntax (including whitespace). Python, like other high-level languages, has a garbage collection process to manage memory or delete unused resources. A user can receive instant feedback from the interpreter by typing python on the command line or by using projects like JupyterLab if they want a browser-based development experience. Many users also appreciate that Python has a strict syntax enforced by the compiler, making it easy to have a single \"right way\" to write a program. That style of development is reinforced through The Zen of Python:\n\nThe Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\n\nRegardless of their experience level, programmers from a number of different backgrounds contribute to the language in significant ways. Python has a mature ecosystem of both free and proprietary tools, including integrated development environments (IDEs), linters, and frameworks. Modules shared through PyPI and Conda have a depth and breadth that will cover nearly every topic. Some of the most popular include:\n\nWeb frameworks such as Django, Pyramid, Flask, and Bottle.\n\nInternet protocol support in the standard library for JSON, HTML, XML, FTP, IMAP, and sockets.\n\nData science and machine learning with SciPy, Pandas, IPython, NumPy, and more.\n\nPython for sysadmins\n\nIf you are a sysadmin, you may be familiar and comfortable with shell scripting for system administration. Bash and other shells are powerful functional languages, but Python is object-oriented, with thousands of libraries that you can use in your own work. In fact, many open source and proprietary IT infrastructure components provide Python libraries so you can automate them, making it a more maintainable language for sysadmins, site reliability engineers (SREs), and IT operators.\n\nThe Python community\n\nPerhaps most importantly, Python has an enormous user community. Python's popularity is both a cause and an effect of its community. It was the #1 programming language in 2018, according to the IEEE Spectrum ranking, and it is the #1 \"Most Wanted\" and #2 \"Most Loved\" language, according to StackOverflow's 2019 Developer Survey. Pythonistas, as members of the community call themselves, meet around the world in thousands at PyCon conferences.\n\nThis means that no matter what problem you're trying to solve, chances are there are already strong people working on a solution. Chances are also good that they have shared code, documentation, tutorials, and examples to help program a solution in Python. There are numerous IDEs and other development tools to choose from, and thousands of open source packages available to extend Python to do just about anything you can think of.\n\n5 surprising things you can do with Python\n\nPython is so versatile that it can be used to power complex applications stacks, simplify infrastructure testing, and do everything in between. Here are a few examples to get you started:\n\nCreate a videogame with Python\n\nAdd methods to libraries retroactively with singledispatch\n\nCreate interactive data science tutorials with Jupyter Notebooks\n\nWrite tests to verify IT infrastructure state\n\nWrite both Python and C with Cython\n\nWho uses Python?\n\nMany organizations are Python users. Some of the most vocal and best-known Python-using companies include:\n\nMozilla, best known for Firefox, says it has over \"230k lines of code\" written in Python.\n\nGoogle shares its internal Python training.\n\nMicrosoft promotes Python development with its IDE, Visual Studio Code.\n\nNetflix shares its extensive use of Python for everything from regional failover monitoring software to data science.\n\nUber says it uses Jupyter Notebook and IPython to share data.\n\nReddit is largely written in Python and shares the source code on GitHub.\n\nDropbox has been a public advocate for Python 3 in its infrastructure.\n\nSlack, Digital Ocean, Lyft, Sauce Labs, and Fastly all mention using Python in an Increment article.\n\nMany financial firms, such as CapitalOne, Bloomberg, and JPMorgan, recruit Python developers.\n\nIn addition, many IT infrastructure technologies are written in Python. It is the primary language used for the massive cloud computing project OpenStack, which is powering private and public clouds in data centers all over the world. Infrastructure automation software Ansible is written in Python as well.\n\nIt's also used to write desktop software, such as Calibre and OpenShot. Blender is among the many applications written in other languages that allow users to script in Python. It's also a popular language for machine learning and scientific, statistical, mathematical, and other types of specialized computing. Even the Raspberry Pi gained its name from the founders' plan to use the platform for teaching Python.\n\nSo, in short, what is Python used for? Nearly everything!\n\nWhere can I learn Python?\n\nThere is an abundance to learn about Python and a lot of resources available to do so. Think about balancing your input from resources and your output of practicing writing the language.\n\nBeginner recommendations\n\nStart by understanding how to install Python and choosing a text editor or IDE to write the code.\n\nCheat sheet: Python 3.7 for beginners\n\nHow to install Python on Linux and Windows\n\nHow to (correctly) run Python on MacOS\n\nTop 3 open source Python IDEs\n\nIntermediate recommendations\n\nChoose a project that inspires you, and begin to master the libraries that will power you to complete your project.\n\n7 essential PyPI libraries and how to use them\n\n8 great Python libraries for side projects\n\nHow to create a 2D game with Python\n\nGetting started with Python for data science\n\nAdvanced recommendations\n\nContinue to hone your expertise through debugging, sharing code, and tests.\n\n7 steps for hunting down Python code bugs\n\nHow to open source your Python library\n\nAutomate your Python code tests\n\nShare with us\n\nNo matter what level of Python expertise you have, share your knowledge by writing for us on Opensource.com. It will help make you and our readers better programmers."
    }
}