{
    "id": "dbpedia_8303_2",
    "rank": 38,
    "data": {
        "url": "https://runestone.academy/ns/books/published/fopp/GeneralIntro/ThePythonProgrammingLanguage.html",
        "read_more_link": "",
        "language": "en",
        "title": "1.3. The Python Programming Language — Foundations of Python Programming",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://runestone.academy/ns/books/published/fopp/_static/img/RAIcon.png",
            "https://runestone.academy/ns/books/published/fopp/_images/interpret.png",
            "https://runestone.academy/ns/books/published/fopp/_images/compile.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/runestone/static/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://runestone.academy/ns/books/published/fopp/GeneralIntro/ThePythonProgrammingLanguage.html",
        "text": "1.3. The Python Programming Language¶\n\nThe programming language you will be learning is Python. Python is an example of a high-level language; other high-level languages you might have heard of are C++, PHP, and Java.\n\nAs you might infer from the name high-level language, there are also low-level languages, sometimes referred to as machine languages or assembly languages. Loosely speaking, computers can only execute programs written in low-level languages. Thus, programs written in a high-level language have to be processed before they can run. This extra processing takes some time, which is a small disadvantage of high-level languages. However, the advantages to high-level languages are enormous.\n\nFirst, it is much easier to program in a high-level language. Programs written in a high-level language take less time to write, they are shorter and easier to read, and they are more likely to be correct. Second, high-level languages are portable, meaning that they can run on different kinds of computers with few or no modifications. Low-level programs can run on only one kind of computer and have to be rewritten to run on another.\n\nDue to these advantages, almost all programs are written in high-level languages. Low-level languages are used only for a few specialized applications.\n\nTwo kinds of programs process high-level languages into low-level languages: interpreters and compilers. An interpreter reads a high-level program and executes it, meaning that it does what the program says. It processes the program a little at a time, alternately reading lines and performing computations.\n\nA compiler reads the program and translates it completely before the program starts running. In this case, the high-level program is called the source code, and the translated program is called the object code or the executable. Once a program is compiled, you can execute it repeatedly without further translation.\n\nMany modern languages use both processes. They are first compiled into a lower level language, called byte code, and then interpreted by a program called a virtual machine. Python uses both processes, but because of the way programmers interact with it, it is usually considered an interpreted language.\n\nFor the core material in this book, you will not need to install or run python natively on your computer. Instead, you’ll be writing simple programs and executing them right in your browser.\n\nAt some point, you will find it useful to have a complete python environment, rather than the limited environment available in this online textbook. To do that, you will either install python on your computer so that it can run natively, or use a remote server that provides either a command line shell or a jupyter notebook environment."
    }
}