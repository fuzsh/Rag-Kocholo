{
    "id": "dbpedia_8303_2",
    "rank": 76,
    "data": {
        "url": "https://realpython.com/python-ides-code-editors-guide/",
        "read_more_link": "",
        "language": "en",
        "title": "Python IDEs and Code Editors (Guide) – Real Python",
        "top_image": "https://files.realpython.com/media/editors_art.ecb35ec44fce.jpg",
        "meta_img": "https://files.realpython.com/media/editors_art.ecb35ec44fce.jpg",
        "images": [
            "https://realpython.com/static/real-python-logo.893c30edea53.svg",
            "https://realpython.com/static/pytrick-dict-merge.4201a0125a5e.png",
            "https://files.realpython.com/media/editors_art.ecb35ec44fce.jpg",
            "https://files.realpython.com/media/VS_Code.95cbd7e1c9a7.png",
            "https://files.realpython.com/media/Eclipse_and_PyDev.fe2a1e745be6.png",
            "https://files.realpython.com/media/Sublime_Text.55c3de3ec99f.png",
            "https://files.realpython.com/media/GNU_Emacs.5bcb5a34387f.png",
            "https://files.realpython.com/media/VIM.0a2d5257f880.png",
            "https://files.realpython.com/media/PyCharm.2e26d23c921c.png",
            "https://files.realpython.com/media/spyder-ide-screenshot.90947590845b.png",
            "https://files.realpython.com/media/Thonny.cd8d2c35f9a3.png",
            "https://realpython.com/static/pytrick-dict-merge.4201a0125a5e.png",
            "https://realpython.com/cdn-cgi/image/width=336,height=336,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg",
            "https://realpython.com/cdn-cgi/image/width=336,height=336,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Running_headshot.b3e2d17c6828.jpg",
            "https://realpython.com/cdn-cgi/image/width=900,height=900,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/acutenco.676e4197c133.jpg",
            "https://realpython.com/cdn-cgi/image/width=1000,height=1000,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/daniel-square.d58bf4388750.jpg",
            "https://realpython.com/cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg",
            "https://realpython.com/cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg",
            "https://realpython.com/cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg",
            "https://realpython.com/cdn-cgi/image/width=456,height=456,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/martin_breuss_python_square.efb2b07faf9f.jpg",
            "https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg",
            "https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg",
            "https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg",
            "https://files.realpython.com/media/Real_Python_Newsletter_square.1e3e64f99300.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Real Python"
        ],
        "publish_date": "2018-03-13T14:00:00+00:00",
        "summary": "",
        "meta_description": "Find your perfect Python development setup with this review of Python IDEs and code editors, including recommendations and screen shots.",
        "meta_lang": "en",
        "meta_favicon": "/static/favicon.68cbf4197b0c.png",
        "meta_site_name": "",
        "canonical_link": "https://realpython.com/python-ides-code-editors-guide/",
        "text": "General Editors and IDEs with Python Support\n\nVisual Studio Code\n\nCategory: Code Editor\n\nWebsite: https://code.visualstudio.com/\n\nPython tools: https://marketplace.visualstudio.com/items?itemName=ms-python.python\n\nVisual Studio Code (also known as VS Code) is a full-featured code editor available for Linux, macOS, and Windows platforms. Small and lightweight, but full-featured, VS Code is open source, extensible, and configurable for almost any task. VS Code is built on Electron, a framework for creating desktop applications using JavaScript, HTML, and CSS.\n\nInstalling Python support in VS Code is very accessible: the Marketplace is a quick button click away. Search for Python, click Install, and restart if necessary. VS Code will recognize your Python installation and libraries automatically.\n\nPros: Thanks to Electron, VS Code is available on every platform, surprisingly full-featured despite having a small footprint, and open source.\n\nCons: Electron means VS Code isn’t a native app. Plus, some people may have principled reasons for not using Microsoft resources.\n\nBe sure to consult the tutorial on using Visual Studio Code for Python development, as well as the follow-up tutorial going more in-depth, to make the most of this setup. If you’re working in Windows, then check out the Setting Up VS Code section in Your Python Coding Environment on Windows: Setup Guide.\n\nEclipse + PyDev\n\nCategory: IDE\n\nWebsite: www.eclipse.org\n\nPython tools: PyDev, www.pydev.org\n\nIf you’ve spent any amount of time in the open-source community, then you’ve probably heard about Eclipse. Available for Linux, Windows, and macOS, Eclipse is the de facto open-source IDE for Java development. It has a rich marketplace of extensions and add-ons, which makes Eclipse useful for a wide range of development activities.\n\nOne such extension is PyDev, which enables Python debugging, code completion, and an interactive Python console. Installing PyDev into Eclipse is straightforward: from Eclipse, select Help then Eclipse Marketplace, and search for PyDev. Click Install and restart Eclipse if necessary.\n\nPros: If you’ve already got Eclipse installed, then adding PyDev will be quicker and easier. PyDev is very accessible for the experienced Eclipse developer.\n\nCons: If you’re just starting out with Python, or with software development in general, Eclipse can be a lot to handle. Remember how IDEs are larger and require more knowledge to use properly? Eclipse is all that and a bag of (micro)chips.\n\nSublime Text\n\nCategory: Code Editor\n\nWebsite: http://www.sublimetext.com\n\nWritten by a Google engineer with a dream for a better text editor, Sublime Text is an extremely popular code editor. Supported on all platforms, Sublime Text has built-in support for Python code editing and a rich set of extensions (called packages) that extend the syntax and editing features.\n\nInstalling additional Python packages can be tricky: all Sublime Text packages are written in Python itself, and installing community packages often requires you to execute Python scripts directly in Sublime Text.\n\nPros: Sublime Text has a great following in the community. As a code editor alone, Sublime Text is fast, small, and well supported.\n\nCons: Sublime Text isn’t free, although you can use the evaluation version for an indefinite period of time. Installing extensions can be tricky, and there’s no direct support for executing or debugging code from within the editor.\n\nTo make the most of your Sublime Text setup, read Real Python’s Python + Sublime Text setup guide and consider the in-depth video course that shows you how to craft an effective Python development setup with Sublime Text 3.\n\nGNU Emacs\n\nCategory: Code Editor\n\nWebsite: https://www.gnu.org/software/emacs/\n\nBack before the iPhone vs Android war, before the Linux vs Windows war, even before the PC vs Mac war, there was the Editor War, with GNU Emacs as one of the combatants. Billed as “the extensible, customizable, self-documenting, real-time display editor,” GNU Emacs has been around almost as long as UNIX and has a fervent following.\n\nAlways free and available on every platform (in one form or another), GNU Emacs uses a form of the powerful Lisp programming language for customization, and various customization scripts exist for Python development.\n\nPros: You know Emacs, you use Emacs, you love Emacs. Lisp is a second language, and you know the power it gives you means you can do anything.\n\nCons: Customization means writing (or copying and pasting) Lisp code into various script files. If a feature isn’t already provided, then you may have to learn Lisp to figure out how to do it.\n\nPlus, you know that Emacs would be a great operating system, if only it had a good text editor…\n\nBe sure to consult the Python + Emacs setup guide to make the most of this setup.\n\nVi / Vim\n\nCategory: Code Editor\n\nWebsite: https://www.vim.org/\n\nOn the other side of the Text Editor War stands Vi (also known as Vim). Included by default on almost every UNIX system and macOS, Vi has an equally fervent following.\n\nVi and Vim are modal editors, separating the viewing of a file from the editing of a file. Vim includes many improvements on the original Vi, including an extensibility model and in-place code building. Vim Scripts are available for various Python development tasks.\n\nPros: You know Vi, you use Vi, you love Vi. Vim Scripts don’t scare you, and you know you can bend Vi to your will.\n\nCons: Like with Emacs, you’re not comfortable finding or writing your own scripts to enable Python development, and you’re not sure how a modal editor is supposed to work.\n\nPlus, you know that Vi would be a great text editor, if only it had a decent operating system.\n\nIf you’re going with this combination, check out the Python + VIM setup guide with tips and plugin recommendations.\n\nVisual Studio\n\nCategory: IDE\n\nWebsite: https://www.visualstudio.com/vs/\n\nPython tools: Python Tools for Visual Studio, aka PTVS\n\nBuilt by Microsoft and not to be confused with Visual Studio Code, Visual Studio is a full-featured IDE, in many ways comparable to Eclipse. Built for Windows and macOS only, VS comes in both free (Community) and paid (Professional and Enterprise) versions. Visual Studio enables development for a variety of platforms and comes with its own marketplace for extensions.\n\nPython Tools for Visual Studio (PTVS) enables Python coding in Visual Studio, as well as Intellisense for Python, debugging, and other tools.\n\nPros: If you already have Visual Studio installed for other development activities, then adding PTVS is quicker and easier.\n\nCons: Visual Studio is a big download for just Python. Plus, if you’re on Linux, you’re out of luck: there’s no Visual Studio install for that platform.\n\nPython-Specific Editors and IDEs\n\nPyCharm\n\nCategory: IDE\n\nWebsite: https://www.jetbrains.com/pycharm/\n\nOne of the best (and only) full-featured, dedicated IDEs for Python is PyCharm. Available in both paid (Professional) and free open-source (Community) editions, PyCharm installs quickly and easily on Windows, macOS, and Linux platforms.\n\nOut of the box, PyCharm supports Python development directly. You can just open a new file and start writing code. You can run and debug Python directly inside PyCharm, and it has support for source control and projects.\n\nPros: It’s the de facto Python IDE environment, with tons of support and a supportive community. It edits, runs, and debugs Python out of the box.\n\nCons: PyCharm can be slow to load, and the default settings may need tweaking for existing projects.\n\nYou can learn more about using this environment in PyCharm for Productive Python Development.\n\nSpyder\n\nCategory: IDE\n\nWebsite: https://www.spyder-ide.org/\n\nSpyder is an open-source Python IDE that’s optimized for data science workflows. Spyder comes included with the Anaconda package manager distribution, so depending on your setup, you may already have it installed on your machine.\n\nWhat’s interesting about Spyder is that its target audience is data scientists using Python. You’ll notice this throughout. For example, Spyder integrates well with common Python data science libraries like SciPy, NumPy, and Matplotlib.\n\nSpyder features most of the common IDE features that you might expect, such as a code editor with robust syntax highlighting, Python code completion, and even an integrated documentation browser.\n\nA special feature that you probably won’t see in other Python editing environments is Spyder’s variable explorer, which allows you to display data using a table-based layout right inside your IDE. You might not have a need for this, but it’s still pretty neat. If you regularly do data science work using Python, then you might fall in love with this unique feature. The IPython/Jupyter integration is nice as well.\n\nOverall, Spyder might feel more basic than other IDEs. You might want to view it more as a special-purpose tool rather than something that you’d use as your primary editing environment every day. What’s nice about this Python IDE is that it’s available for free on Windows, macOS, and Linux, and it’s a fully open-source software.\n\nPros: You’re a data scientist using the Anaconda Python distribution.\n\nCons: More experienced Python developers might find Spyder too basic to work with on a daily basis and instead opt for a more complete IDE or customized editor solution.\n\nThonny\n\nCategory: IDE\n\nWebsite: http://thonny.org/\n\nA more recent addition to the Python IDE family, Thonny is billed as an IDE for beginners. Written and maintained by the Institute of Computer Science at the University of Tartu in Estonia, Thonny is available for all major platforms, with installation instructions on the site.\n\nBy default, Thonny installs with its own bundled version of Python, so you don’t need to install anything else new. More experienced users may need to tweak this setting so that Thonny will find and use libraries that are already installed.\n\nPros: You’re a beginning Python user and want an IDE that’s ready to roll.\n\nCons: More experienced Python developers will find Thonny too basic for most uses, and the built-in interpreter is something to work around, not with.\n\nIf you’re interested in using Thonny as your Python editor, be sure to read Real Python’s dedicated tutorial on Thonny, which goes into more depth and shows you additional features.\n\nFAQs\n\nSo, which code editor is right for you? Only you can decide that, but in this tutorial, you’ve gotten a taste of your options. Before you continue your quest for the perfect development environment, why not check your understanding of what you’ve learned in this tutorial?\n\nBelow, you’ll find some questions that you can use to recap and solidify what you’ve just learned. After each question, you’ll find a brief explanation hidden in a collapsible section. Click the Show/Hide toggle to reveal the answer. Time to dive in!\n\nAn integrated development environment (IDE) is a software application that provides a comprehensive set of features. IDEs integrate several tools specifically designed for software development, including a code editor and tools for building, executing, and debugging programs. It usually includes version control, as well.\n\nOn the other hand, a dedicated code editor doesn’t have as many features, but it’ll typically provide syntax highlighting and code formatting. While code editors might not come with as many features, they can often work with debuggers and source control systems. The plus is that they’re typically smaller and faster than IDEs.\n\nA good Python coding environment should be able to save and reload code files, run code from within the environment, provide debugging support, and offer syntax highlighting. Additionally, it should have automatic code formatting capabilities in line with Python’s syntax. These core features make coding easier and more efficient by providing an integrated environment for development.\n\nSeveral general editors and IDEs support Python development. These include Visual Studio Code, Eclipse with PyDev, Sublime Text, GNU Emacs, Vi/Vim, and Visual Studio with PTVS.\n\nEach of these tools has its own advantages and disadvantages. For instance, Eclipse with PyDev is an open-source IDE that’s very accessible for experienced Eclipse developers, but it can be overwhelming for beginners. Sublime Text is a popular code editor with a great community following, but it’s not free and lacks direct support for executing or debugging code.\n\nFor more on all of these general editors and IDEs, check out the associated sections of this tutorial.\n\nPython-specific editors and IDEs are built exclusively for Python development. PyCharm, Spyder, and Thonny are among the most popular ones.\n\nPyCharm is a full-featured IDE that supports Python development directly, with support for source control and projects. Spyder is an open-source Python IDE optimized for data science workflows, integrating well with Python data science libraries. Thonny is designed specifically for beginners and has a built-in version of Python, so it doesn’t require any extra downloads.\n\nYour choice of a Python IDE or code editor largely depends on your needs and experience level. If you’re a beginner, then you might want to start with something that’s ready to go right out of the box and requires few customizations, as this will be easier to navigate and use. If you’re already using text editors for other tasks or developing other software, then you may find it easier to add Python capabilities to your existing tool kit.\n\nMaybe you need more advanced features and could benefit from the extensive features of a full-fledged IDE like PyCharm or the flexibility of a code editor like Sublime Text or VS Code. Ultimately, your specific needs, preferences, and comfort level should guide your choice.\n\nJoin Now: Click here to join the Real Python Newsletter and you'll never miss another Python tutorial, course update, or post.\n\nSo, what will you pick? Share your thoughts in the comments!"
    }
}