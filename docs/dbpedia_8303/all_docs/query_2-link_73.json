{
    "id": "dbpedia_8303_2",
    "rank": 73,
    "data": {
        "url": "https://www.altcademy.com/blog/what-is-python-written-in/",
        "read_more_link": "",
        "language": "en",
        "title": "What is Python written in",
        "top_image": "https://www.altcademy.com/blog/content/images/2022/07/Red-and-White-Laptop-Mockup-Masterclass-Twitter-Header.png",
        "meta_img": "https://www.altcademy.com/blog/content/images/2022/07/Red-and-White-Laptop-Mockup-Masterclass-Twitter-Header.png",
        "images": [
            "https://www.altcademy.com/blog/content/images/2022/07/for-enterprise--600---72-px--4.png",
            "https://www.altcademy.com/blog/assets/images/forbes-logo-min.png?v=cb7a50b602",
            "https://www.gravatar.com/avatar/5a8fd729d773c26ed96e4d39bdd0bbc6?s=250&r=x&d=mp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Altcademy Team"
        ],
        "publish_date": "2024-02-02T14:20:29+00:00",
        "summary": "",
        "meta_description": "The Building Blocks of Python\n\nWhen you're just starting out in the world of programming, it's natural to wonder about the origins of the tools you're using. Python, with its readable syntax and wide-ranging applicability, is a favorite among beginners. But what is Python itself made of? What language was",
        "meta_lang": "en",
        "meta_favicon": "https://www.altcademy.com/blog/content/images/size/w256h256/2022/07/alt_square.png",
        "meta_site_name": "Altcademy Blog",
        "canonical_link": "https://www.altcademy.com/blog/what-is-python-written-in/",
        "text": "The Building Blocks of Python\n\nWhen you're just starting out in the world of programming, it's natural to wonder about the origins of the tools you're using. Python, with its readable syntax and wide-ranging applicability, is a favorite among beginners. But what is Python itself made of? What language was used to create Python?\n\nPython is written in \"C\". This might be a bit confusing at first—how can a programming language be written in another language? Think of it like this: just as you might write a script for a play in English to be performed by actors, Python was written in C to be 'performed' by computers.\n\nC: The Mother Tongue of Python\n\nC is a high-performance programming language that has been around since the early 1970s. It's known for its efficiency and control, and it's often used to create software that's close to the hardware, like operating systems or game engines.\n\nWhy C?\n\nC was chosen as the language to write Python for several reasons:\n\nSpeed: C is a very fast language because it is compiled. This means that before the code is run, it is transformed into a language that the computer's processor can understand directly.\n\nControl: C gives programmers a lot of control over how the computer's memory is managed. This is important for a programming language like Python, which aims to be efficient and fast.\n\nPortability: Code written in C can be run on many different types of computers. This is why Python, which is written in C, can be used on Windows, macOS, Linux, and many other operating systems.\n\nHow Python Uses C\n\nPython is often referred to as an \"interpreted\" language. This means that when you write Python code, it is not directly converted into computer-readable instructions. Instead, another program reads the Python code and carries out the instructions. This program is called the Python interpreter, and it is written in C.\n\nThe Python Interpreter\n\nThe Python interpreter is like a translator. It takes the Python code you write and translates it into something the computer can understand. Because it's written in C, it can do this very quickly and efficiently.\n\nHere's an analogy: imagine you're at a United Nations meeting, and you only speak English. You're given a speech in French, a language you don't understand. Luckily, there's an interpreter there who can translate the French speech into English for you. The Python interpreter does something similar—it translates Python code into 'computer language'.\n\nA Peek into Python's C Code\n\nNow, let's look at a simple example. Consider the built-in Python function len(), which is used to get the length of an object, like a list or a string. The Python code might look like this:\n\nmy_list = [1, 2, 3, 4, 5] print(len(my_list))\n\nThis would output 5 because there are five items in my_list. But how does the len() function work under the hood? It's actually a wrapper around a C function that does the real work.\n\nThe C code that implements this function is far more complex than the Python code and involves interacting with the core structures of Python, which are also written in C. But you don't need to know this C code to use len() in Python. That's the beauty of Python—it simplifies many of the complexities of programming.\n\nThe Benefits of Python Being Written in C\n\nBeing written in C bestows Python with several advantages:\n\nExtensibility: If you ever find that Python doesn't have a feature you need, you can extend it with C. This means you can write your own C code that Python can use.\n\nLibraries: Many Python libraries, especially those that need to be fast, like NumPy for numerical computations, are also written in C. This allows them to run quickly while still being accessible from Python's simpler syntax.\n\nEmbeddable: Just as C can extend Python, Python can be embedded within C programs. This can be useful if you need to add some scripting capabilities to a C application.\n\nThe Intuition Behind Python and C's Relationship\n\nTo help you understand the relationship between Python and C, consider the following analogy: Imagine Python as a sleek, modern car that's easy to drive, even if you're new to driving. Underneath the hood, C is the powerful engine that makes the car go. You don't need to know how to build or repair the engine to drive the car, but it's reassuring to know that there's a robust and efficient mechanism powering your journey.\n\nConclusion: The Symphony of Languages\n\nIn the orchestra of computer programming, Python is like the conductor—visible, leading the performance, and easy to follow. C, on the other hand, is like the first violin—less conspicuous but vital, playing the complex notes that underpin the symphony. As a beginner, you're invited to direct the orchestra using Python's baton, creating beautiful music without needing to master the intricate techniques of the first violin.\n\nUnderstanding that Python is written in C is like a peek behind the curtain of the programming world. It's a testament to how languages can build upon one another, creating tools that are both powerful and accessible. As you continue your programming journey, remember that each line of Python code you write is backed by decades of computing history and innovation, all made possible by the foundational language of C."
    }
}