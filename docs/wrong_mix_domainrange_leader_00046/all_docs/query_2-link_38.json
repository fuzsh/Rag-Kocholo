{
    "id": "wrong_mix_domainrange_leader_00046_2",
    "rank": 38,
    "data": {
        "url": "https://docs.python.org/3.13/whatsnew/3.13.html",
        "read_more_link": "",
        "language": "en",
        "title": "Whatâs New In Python 3.13",
        "top_image": "https://docs.python.org/3/_static/og-image.png",
        "meta_img": "https://docs.python.org/3/_static/og-image.png",
        "images": [
            "https://docs.python.org/3.13/_static/py.svg",
            "https://docs.python.org/3.13/_static/py.svg",
            "https://docs.python.org/3.13/_static/py.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Editor, Thomas Wouters,. This article explains the new features in Python 3.13, compared to 3.12. For full details, see the changelog. Summary â Release Highlights: Python 3.13 beta is the pre-rele...",
        "meta_lang": "en",
        "meta_favicon": "../_static/py.svg",
        "meta_site_name": "Python documentation",
        "canonical_link": "https://docs.python.org/3/whatsnew/3.13.html",
        "text": "asyncio.loop.create_unix_server() will now automatically remove the Unix socket when the server is closed. (Contributed by Pierre Ossman in gh-111246.)\n\nasyncio.DatagramTransport.sendto() will now send zero-length datagrams if called with an empty bytes object. The transport flow control also now accounts for the datagram header when calculating the buffer size. (Contributed by Jamie Phan in gh-115199.)\n\nAdd asyncio.Server.close_clients() and asyncio.Server.abort_clients() methods which allow to more forcefully close an asyncio server. (Contributed by Pierre Ossman in gh-113538.)\n\nasyncio.as_completed() now returns an object that is both an asynchronous iterator and a plain iterator of awaitables. The awaitables yielded by asynchronous iteration include original task or future objects that were passed in, making it easier to associate results with the tasks being completed. (Contributed by Justin Arthur in gh-77714.)\n\nWhen asyncio.TaskGroup.create_task() is called on an inactive asyncio.TaskGroup, the given coroutine will be closed (which prevents a RuntimeWarning about the given coroutine being never awaited). (Contributed by Arthur Tacca and Jason Zhang in gh-115957.)\n\nImproved behavior of asyncio.TaskGroup when an external cancellation collides with an internal cancellation. For example, when two task groups are nested and both experience an exception in a child task simultaneously, it was possible that the outer task group would hang, because its internal cancellation was swallowed by the inner task group.\n\nIn the case where a task group is cancelled externally and also must raise an ExceptionGroup, it will now call the parent taskâs cancel() method. This ensures that a asyncio.CancelledError will be raised at the next await, so the cancellation is not lost.\n\nAn added benefit of these changes is that task groups now preserve the cancellation count (asyncio.Task.cancelling()).\n\nIn order to handle some corner cases, asyncio.Task.uncancel() may now reset the undocumented _must_cancel flag when the cancellation count reaches zero.\n\n(Inspired by an issue reported by Arthur Tacca in gh-116720.)\n\nAdd asyncio.Queue.shutdown() (along with asyncio.QueueShutDown) for queue termination. (Contributed by Laurie Opperman and Yves Duprat in gh-104228.)\n\nAccept a tuple of separators in asyncio.StreamReader.readuntil(), stopping when one of them is encountered. (Contributed by Bruce Merry in gh-81322.)\n\nargparse: The type, choices, and metavar parameters of argparse.BooleanOptionalAction are deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in gh-92248.)\n\nast: The following features have been deprecated in documentation since Python 3.8, now cause a DeprecationWarning to be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:\n\nast.Num\n\nast.Str\n\nast.Bytes\n\nast.NameConstant\n\nast.Ellipsis\n\nUse ast.Constant instead. (Contributed by Serhiy Storchaka in gh-90953.)\n\ncollections.abc: Deprecated ByteString. Prefer Sequence or Buffer. For use in typing, prefer a union, like bytes | bytearray, or collections.abc.Buffer. (Contributed by Shantanu Jain in gh-91896.)\n\nemail: Deprecated the isdst parameter in email.utils.localtime(). (Contributed by Alan Williams in gh-72346.)\n\nimportlib: __package__ and __cached__ will cease to be set or taken into consideration by the import system (gh-97879).\n\nimportlib.abc deprecated classes:\n\nimportlib.abc.ResourceReader\n\nimportlib.abc.Traversable\n\nimportlib.abc.TraversableResources\n\nUse importlib.resources.abc classes instead:\n\nimportlib.resources.abc.Traversable\n\nimportlib.resources.abc.TraversableResources\n\n(Contributed by Jason R. Coombs and Hugo van Kemenade in gh-93963.)\n\nitertools had undocumented, inefficient, historically buggy, and inconsistent support for copy, deepcopy, and pickle operations. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in gh-101588.)\n\nmultiprocessing: The default start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where 'fork' is currently the default (gh-84559). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use the get_context() or set_start_method() APIs to explicitly specify when your code requires 'fork'. See Contexts and start methods.\n\npathlib: is_relative_to() and relative_to(): passing additional arguments is deprecated.\n\npkgutil: find_loader() and get_loader() now raise DeprecationWarning; use importlib.util.find_spec() instead. (Contributed by Nikita Sobolev in gh-97850.)\n\npty:\n\nmaster_open(): use pty.openpty().\n\nslave_open(): use pty.openpty().\n\nsqlite3:\n\nversion and version_info.\n\nexecute() and executemany() if named placeholders are used and parameters is a sequence instead of a dict.\n\ndate and datetime adapter, date and timestamp converter: see the sqlite3 documentation for suggested replacement recipes.\n\ntypes.CodeType: Accessing co_lnotab was deprecated in PEP 626 since 3.10 and was planned to be removed in 3.12, but it only got a proper DeprecationWarning in 3.12. May be removed in 3.14. (Contributed by Nikita Sobolev in gh-101866.)\n\ntyping: ByteString, deprecated since Python 3.9, now causes a DeprecationWarning to be emitted when it is used.\n\nurllib: urllib.parse.Quoter is deprecated: it was not intended to be a public API. (Contributed by Gregory P. Smith in gh-88168.)\n\nYou no longer have to define the PY_SSIZE_T_CLEAN macro before including Python.h when using # formats in format codes. APIs accepting the format codes always use Py_ssize_t for # formats. (Contributed by Inada Naoki in gh-104922.)\n\nThe keywords parameter of PyArg_ParseTupleAndKeywords() and PyArg_VaParseTupleAndKeywords() now has type char*const* in C and constchar*const* in C++, instead of char**. It makes these functions compatible with arguments of type constchar*const*, constchar** or char*const* in C++ and char*const* in C without an explicit type cast. This can be overridden with the PY_CXX_CONST macro. (Contributed by Serhiy Storchaka in gh-65210.)\n\nAdd PyImport_AddModuleRef(): similar to PyImport_AddModule(), but return a strong reference instead of a borrowed reference. (Contributed by Victor Stinner in gh-105922.)\n\nAdd PyWeakref_GetRef() function: similar to PyWeakref_GetObject() but returns a strong reference, or NULL if the referent is no longer live. (Contributed by Victor Stinner in gh-105927.)\n\nAdd PyObject_GetOptionalAttr() and PyObject_GetOptionalAttrString(), variants of PyObject_GetAttr() and PyObject_GetAttrString() which donât raise AttributeError if the attribute is not found. These variants are more convenient and faster if the missing attribute should not be treated as a failure. (Contributed by Serhiy Storchaka in gh-106521.)\n\nAdd PyMapping_GetOptionalItem() and PyMapping_GetOptionalItemString(): variants of PyObject_GetItem() and PyMapping_GetItemString() which donât raise KeyError if the key is not found. These variants are more convenient and faster if the missing key should not be treated as a failure. (Contributed by Serhiy Storchaka in gh-106307.)\n\nAdd fixed variants of functions which silently ignore errors:\n\nPyObject_HasAttrWithError() replaces PyObject_HasAttr().\n\nPyObject_HasAttrStringWithError() replaces PyObject_HasAttrString().\n\nPyMapping_HasKeyWithError() replaces PyMapping_HasKey().\n\nPyMapping_HasKeyStringWithError() replaces PyMapping_HasKeyString().\n\nNew functions return not only 1 for true and 0 for false, but also -1 for error.\n\n(Contributed by Serhiy Storchaka in gh-108511.)\n\nIf Python is built in debug mode or with assertions, PyTuple_SET_ITEM() and PyList_SET_ITEM() now check the index argument with an assertion. (Contributed by Victor Stinner in gh-106168.)\n\nAdd PyModule_Add() function: similar to PyModule_AddObjectRef() and PyModule_AddObject() but always steals a reference to the value. (Contributed by Serhiy Storchaka in gh-86493.)\n\nAdd PyDict_GetItemRef() and PyDict_GetItemStringRef() functions: similar to PyDict_GetItemWithError() but returning a strong reference instead of a borrowed reference. Moreover, these functions return -1 on error and so checking PyErr_Occurred() is not needed. (Contributed by Victor Stinner in gh-106004.)\n\nAdded PyDict_SetDefaultRef(), which is similar to PyDict_SetDefault() but returns a strong reference instead of a borrowed reference. This function returns -1 on error, 0 on insertion, and 1 if the key was already present in the dictionary. (Contributed by Sam Gross in gh-112066.)\n\nAdd PyDict_ContainsString() function: same as PyDict_Contains(), but key is specified as a constchar* UTF-8 encoded bytes string, rather than a PyObject*. (Contributed by Victor Stinner in gh-108314.)\n\nAdded PyList_GetItemRef() function: similar to PyList_GetItem() but returns a strong reference instead of a borrowed reference.\n\nAdd Py_IsFinalizing() function: check if the main Python interpreter is shutting down. (Contributed by Victor Stinner in gh-108014.)\n\nAdd PyLong_AsInt() function: similar to PyLong_AsLong(), but store the result in a C int instead of a C long. Previously, it was known as the private function _PyLong_AsInt() (with an underscore prefix). (Contributed by Victor Stinner in gh-108014.)\n\nPython built with configure --with-trace-refs (tracing references) now supports the Limited API. (Contributed by Victor Stinner in gh-108634.)\n\nAdd PyObject_VisitManagedDict() and PyObject_ClearManagedDict() functions which must be called by the traverse and clear functions of a type using Py_TPFLAGS_MANAGED_DICT flag. The pythoncapi-compat project can be used to get these functions on Python 3.11 and 3.12. (Contributed by Victor Stinner in gh-107073.)\n\nAdd PyUnicode_EqualToUTF8AndSize() and PyUnicode_EqualToUTF8() functions: compare Unicode object with a constchar* UTF-8 encoded string and return true (1) if they are equal, or false (0) otherwise. These functions do not raise exceptions. (Contributed by Serhiy Storchaka in gh-110289.)\n\nAdd PyThreadState_GetUnchecked() function: similar to PyThreadState_Get(), but donât kill the process with a fatal error if it is NULL. The caller is responsible to check if the result is NULL. Previously, the function was private and known as _PyThreadState_UncheckedGet(). (Contributed by Victor Stinner in gh-108867.)\n\nAdd PySys_AuditTuple() function: similar to PySys_Audit(), but pass event arguments as a Python tuple object. (Contributed by Victor Stinner in gh-85283.)\n\nPyArg_ParseTupleAndKeywords() now supports non-ASCII keyword parameter names. (Contributed by Serhiy Storchaka in gh-110815.)\n\nAdd PyMem_RawMalloc(), PyMem_RawCalloc(), PyMem_RawRealloc() and PyMem_RawFree() to the limited C API (version 3.13). (Contributed by Victor Stinner in gh-85283.)\n\nAdd PySys_Audit() and PySys_AuditTuple() functions to the limited C API. (Contributed by Victor Stinner in gh-85283.)\n\nAdd PyErr_FormatUnraisable() function: similar to PyErr_WriteUnraisable(), but allow customizing the warning message. (Contributed by Serhiy Storchaka in gh-108082.)\n\nAdd PyList_Extend() and PyList_Clear() functions: similar to Python list.extend() and list.clear() methods. (Contributed by Victor Stinner in gh-111138.)\n\nAdd PyDict_Pop() and PyDict_PopString() functions: remove a key from a dictionary and optionally return the removed value. This is similar to dict.pop(), but without the default value and not raising KeyError if the key is missing. (Contributed by Stefan Behnel and Victor Stinner in gh-111262.)\n\nAdd Py_HashPointer() function to hash a pointer. (Contributed by Victor Stinner in gh-111545.)\n\nAdd PyObject_GenericHash() function that implements the default hashing function of a Python object. (Contributed by Serhiy Storchaka in gh-113024.)\n\nAdd PyTime C API:\n\nPyTime_t type.\n\nPyTime_MIN and PyTime_MAX constants.\n\nAdd functions:\n\nPyTime_AsSecondsDouble().\n\nPyTime_Monotonic().\n\nPyTime_MonotonicRaw().\n\nPyTime_PerfCounter().\n\nPyTime_PerfCounterRaw().\n\nPyTime_Time().\n\nPyTime_TimeRaw().\n\n(Contributed by Victor Stinner and Petr Viktorin in gh-110850.)\n\nAdd PyLong_AsNativeBytes(), PyLong_FromNativeBytes() and PyLong_FromUnsignedNativeBytes() functions to simplify converting between native integer types and Python int objects. (Contributed by Steve Dower in gh-111140.)\n\nAdd PyType_GetFullyQualifiedName() function to get the typeâs fully qualified name. Equivalent to f\"{type.__module__}.{type.__qualname__}\", or type.__qualname__ if type.__module__ is not a string or is equal to \"builtins\". (Contributed by Victor Stinner in gh-111696.)\n\nAdd PyType_GetModuleName() function to get the typeâs module name. Equivalent to getting the type.__module__ attribute. (Contributed by Eric Snow and Victor Stinner in gh-111696.)\n\nAdd support for %T, %#T, %N and %#N formats to PyUnicode_FromFormat(): format the fully qualified name of an object type and of a type: call PyType_GetModuleName(). See PEP 737 for more information. (Contributed by Victor Stinner in gh-111696.)\n\nAdd Py_GetConstant() and Py_GetConstantBorrowed() functions to get constants. For example, Py_GetConstant(Py_CONSTANT_ZERO) returns a strong reference to the constant zero. (Contributed by Victor Stinner in gh-115754.)\n\nAdd PyType_GetModuleByDef() to the limited C API (Contributed by Victor Stinner in gh-116936.)\n\nAdd two new functions to the C-API, PyRefTracer_SetTracer() and PyRefTracer_GetTracer(), that allows to track object creation and destruction the same way the tracemalloc module does. (Contributed by Pablo Galindo in gh-93502.)\n\nAdd PyEval_GetFrameBuiltins(), PyEval_GetFrameGlobals(), and PyEval_GetFrameLocals() to the C API. These replacements for PyEval_GetBuiltins(), PyEval_GetGlobals(), and PyEval_GetLocals() return strong references rather than borrowed references. (Added as part of PEP 667.)\n\nAdd PyMutex API, a lightweight mutex that occupies a single byte. The PyMutex_Lock() function will release the GIL (if currently held) if the operation needs to block. (Contributed by Sam Gross in gh-108724.)\n\nPython.h no longer includes the <ieeefp.h> standard header. It was included for the finite() function which is now provided by the <math.h> header. It should now be included explicitly if needed. Remove also the HAVE_IEEEFP_H macro. (Contributed by Victor Stinner in gh-108765.)\n\nPython.h no longer includes these standard header files: <time.h>, <sys/select.h> and <sys/time.h>. If needed, they should now be included explicitly. For example, <time.h> provides the clock() and gmtime() functions, <sys/select.h> provides the select() function, and <sys/time.h> provides the futimes(), gettimeofday() and setitimer() functions. (Contributed by Victor Stinner in gh-108765.)\n\nOn Windows, Python.h no longer includes the <stddef.h> standard header file. If needed, it should now be included explicitly. For example, it provides offsetof() function, and size_t and ptrdiff_t types. Including <stddef.h> explicitly was already needed by all other platforms, the HAVE_STDDEF_H macro is only defined on Windows. (Contributed by Victor Stinner in gh-108765.)\n\nIf the Py_LIMITED_API macro is defined, Py_BUILD_CORE, Py_BUILD_CORE_BUILTIN and Py_BUILD_CORE_MODULE macros are now undefined by <Python.h>. (Contributed by Victor Stinner in gh-85283.)\n\nThe old trashcan macros Py_TRASHCAN_SAFE_BEGIN and Py_TRASHCAN_SAFE_END were removed. They should be replaced by the new macros Py_TRASHCAN_BEGIN and Py_TRASHCAN_END.\n\nA tp_dealloc function that has the old macros, such as:\n\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_SAFE_BEGIN(p); ... Py_TRASHCAN_SAFE_END }\n\nshould migrate to the new macros as follows:\n\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_BEGIN(p, mytype_dealloc) ... Py_TRASHCAN_END }\n\nNote that Py_TRASHCAN_BEGIN has a second argument which should be the deallocation function it is in. The new macros were added in Python 3.8 and the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel in gh-105111.)\n\nFunctions PyDict_GetItem(), PyDict_GetItemString(), PyMapping_HasKey(), PyMapping_HasKeyString(), PyObject_HasAttr(), PyObject_HasAttrString(), and PySys_GetObject(), which clear all errors which occurred when calling them, now report them using sys.unraisablehook(). You may replace them with other functions as recommended in the documentation. (Contributed by Serhiy Storchaka in gh-106672.)\n\nPyCode_GetFirstFree() is an unstable API now and has been renamed to PyUnstable_Code_GetFirstFree(). (Contributed by Bogdan Romanyuk in gh-115781.)"
    }
}