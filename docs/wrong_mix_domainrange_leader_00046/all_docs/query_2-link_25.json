{
    "id": "wrong_mix_domainrange_leader_00046_2",
    "rank": 25,
    "data": {
        "url": "https://docs.python.org/3/whatsnew/3.11.html",
        "read_more_link": "",
        "language": "en",
        "title": "Whatâs New In Python 3.11",
        "top_image": "https://docs.python.org/3/_static/og-image.png",
        "meta_img": "https://docs.python.org/3/_static/og-image.png",
        "images": [
            "https://docs.python.org/3/_static/py.svg",
            "https://docs.python.org/3/_static/py.svg",
            "https://docs.python.org/3/_static/py.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Editor, Pablo Galindo Salgado,. This article explains the new features in Python 3.11, compared to 3.10. Python 3.11 was released on October 24, 2022. For full details, see the changelog. Summary â...",
        "meta_lang": "en",
        "meta_favicon": "../_static/py.svg",
        "meta_site_name": "Python documentation",
        "canonical_link": "https://docs.python.org/3/whatsnew/3.11.html",
        "text": "Renamed EnumMeta to EnumType (EnumMeta kept as an alias).\n\nAdded StrEnum, with members that can be used as (and must be) strings.\n\nAdded ReprEnum, which only modifies the __repr__() of members while returning their literal values (rather than names) for __str__() and __format__() (used by str(), format() and f-strings).\n\nChanged Enum.__format__() (the default for format(), str.format() and f-strings) to always produce the same result as Enum.__str__(): for enums inheriting from ReprEnum it will be the memberâs value; for all other enums it will be the enum and member name (e.g. Color.RED).\n\nAdded a new boundary class parameter to Flag enums and the FlagBoundary enum with its options, to control how to handle out-of-range flag values.\n\nAdded the verify() enum decorator and the EnumCheck enum with its options, to check enum classes against several specific constraints.\n\nAdded the member() and nonmember() decorators, to ensure the decorated object is/is not converted to an enum member.\n\nAdded the property() decorator, which works like property() except for enums. Use this instead of types.DynamicClassAttribute().\n\nAdded the global_enum() enum decorator, which adjusts __repr__() and __str__() to show values as members of their module rather than the enum class. For example, 're.ASCII' for the ASCII member of re.RegexFlag rather than 'RegexFlag.ASCII'.\n\nEnhanced Flag to support len(), iteration and in/not in on its members. For example, the following now works: len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)\n\nChanged Enum and Flag so that members are now defined before __init_subclass__() is called; dir() now includes methods, etc., from mixed-in data types.\n\nChanged Flag to only consider primary values (power of two) canonical while composite values (3, 6, 10, etc.) are considered aliases; inverted flags are coerced to their positive equivalent.\n\nAdd typing.assert_never() and typing.Never. typing.assert_never() is useful for asking a type checker to confirm that a line of code is not reachable. At runtime, it raises an AssertionError. (Contributed by Jelle Zijlstra in gh-90633.)\n\nAdd typing.reveal_type(). This is useful for asking a type checker what type it has inferred for a given expression. At runtime it prints the type of the received value. (Contributed by Jelle Zijlstra in gh-90572.)\n\nAdd typing.assert_type(). This is useful for asking a type checker to confirm that the type it has inferred for a given expression matches the given type. At runtime it simply returns the received value. (Contributed by Jelle Zijlstra in gh-90638.)\n\ntyping.TypedDict types can now be generic. (Contributed by Samodya Abeysiriwardane in gh-89026.)\n\nNamedTuple types can now be generic. (Contributed by Serhiy Storchaka in bpo-43923.)\n\nAllow subclassing of typing.Any. This is useful for avoiding type checker errors related to highly dynamic class, such as mocks. (Contributed by Shantanu Jain in gh-91154.)\n\nThe typing.final() decorator now sets the __final__ attributed on the decorated object. (Contributed by Jelle Zijlstra in gh-90500.)\n\nThe typing.get_overloads() function can be used for introspecting the overloads of a function. typing.clear_overloads() can be used to clear all registered overloads of a function. (Contributed by Jelle Zijlstra in gh-89263.)\n\nThe __init__() method of Protocol subclasses is now preserved. (Contributed by Adrian Garcia Badarasco in gh-88970.)\n\nThe representation of empty tuple types (Tuple[()]) is simplified. This affects introspection, e.g. get_args(Tuple[()]) now evaluates to () instead of ((),). (Contributed by Serhiy Storchaka in gh-91137.)\n\nLoosen runtime requirements for type annotations by removing the callable check in the private typing._type_check function. (Contributed by Gregory Beauregard in gh-90802.)\n\ntyping.get_type_hints() now supports evaluating strings as forward references in PEP 585 generic aliases. (Contributed by Niklas Rosenstein in gh-85542.)\n\ntyping.get_type_hints() no longer adds Optional to parameters with None as a default. (Contributed by Nikita Sobolev in gh-90353.)\n\ntyping.get_type_hints() now supports evaluating bare stringified ClassVar annotations. (Contributed by Gregory Beauregard in gh-90711.)\n\ntyping.no_type_check() no longer modifies external classes and functions. It also now correctly marks classmethods as not to be type checked. (Contributed by Nikita Sobolev in gh-90729.)\n\nThe following have been deprecated in configparser since Python 3.2. Their deprecation warnings have now been updated to note they will be removed in Python 3.12:\n\nthe configparser.SafeConfigParser class\n\nthe configparser.ParsingError.filename property\n\nthe configparser.RawConfigParser.readfp() method\n\n(Contributed by Hugo van Kemenade in bpo-45173.)\n\nconfigparser.LegacyInterpolation has been deprecated in the docstring since Python 3.2, and is not listed in the configparser documentation. It now emits a DeprecationWarning and will be removed in Python 3.13. Use configparser.BasicInterpolation or configparser.ExtendedInterpolation instead. (Contributed by Hugo van Kemenade in bpo-46607.)\n\nThe older set of importlib.resources functions were deprecated in favor of the replacements added in Python 3.9 and will be removed in a future Python version, due to not supporting resources located within package subdirectories:\n\nimportlib.resources.contents()\n\nimportlib.resources.is_resource()\n\nimportlib.resources.open_binary()\n\nimportlib.resources.open_text()\n\nimportlib.resources.read_binary()\n\nimportlib.resources.read_text()\n\nimportlib.resources.path()\n\nThe locale.getdefaultlocale() function is deprecated and will be removed in Python 3.15. Use locale.setlocale(), locale.getpreferredencoding(False) and locale.getlocale() functions instead. (Contributed by Victor Stinner in gh-90817.)\n\nThe locale.resetlocale() function is deprecated and will be removed in Python 3.13. Use locale.setlocale(locale.LC_ALL, \"\") instead. (Contributed by Victor Stinner in gh-90817.)\n\nStricter rules will now be applied for numerical group references and group names in regular expressions. Only sequences of ASCII digits will now be accepted as a numerical reference, and the group name in bytes patterns and replacement strings can only contain ASCII letters, digits and underscores. For now, a deprecation warning is raised for syntax violating these rules. (Contributed by Serhiy Storchaka in gh-91760.)\n\nIn the re module, the re.template() function and the corresponding re.TEMPLATE and re.T flags are deprecated, as they were undocumented and lacked an obvious purpose. They will be removed in Python 3.13. (Contributed by Serhiy Storchaka and Miro HronÄok in gh-92728.)\n\nturtle.settiltangle() has been deprecated since Python 3.1; it now emits a deprecation warning and will be removed in Python 3.13. Use turtle.tiltangle() instead (it was earlier incorrectly marked as deprecated, and its docstring is now corrected). (Contributed by Hugo van Kemenade in bpo-45837.)\n\ntyping.Text, which exists solely to provide compatibility support between Python 2 and Python 3 code, is now deprecated. Its removal is currently unplanned, but users are encouraged to use str instead wherever possible. (Contributed by Alex Waygood in gh-92332.)\n\nThe keyword argument syntax for constructing typing.TypedDict types is now deprecated. Support will be removed in Python 3.13. (Contributed by Jingchen Ye in gh-90224.)\n\nwebbrowser.MacOSX is deprecated and will be removed in Python 3.13. It is untested, undocumented, and not used by webbrowser itself. (Contributed by Donghee Na in bpo-42255.)\n\nThe behavior of returning a value from a TestCase and IsolatedAsyncioTestCase test methods (other than the default None value) is now deprecated.\n\nDeprecated the following not-formally-documented unittest functions, scheduled for removal in Python 3.13:\n\nunittest.findTestCases()\n\nunittest.makeSuite()\n\nunittest.getTestCaseNames()\n\nUse TestLoader methods instead:\n\nunittest.TestLoader.loadTestsFromModule()\n\nunittest.TestLoader.loadTestsFromTestCase()\n\nunittest.TestLoader.getTestCaseNames()\n\n(Contributed by Erlend E. Aasland in bpo-5846.)\n\nunittest.TestProgram.usageExit() is marked deprecated, to be removed in 3.13. (Contributed by Carlos DamÃ¡zio in gh-67048.)\n\nSome macros have been converted to static inline functions to avoid macro pitfalls. The change should be mostly transparent to users, as the replacement functions will cast their arguments to the expected types to avoid compiler warnings due to static type checks. However, when the limited C API is set to >=3.11, these casts are not done, and callers will need to cast arguments to their expected types. See PEP 670 for more details. (Contributed by Victor Stinner and Erlend E. Aasland in gh-89653.)\n\nPyErr_SetExcInfo() no longer uses the type and traceback arguments, the interpreter now derives those values from the exception instance (the value argument). The function still steals references of all three arguments. (Contributed by Irit Katriel in bpo-45711.)\n\nPyErr_GetExcInfo() now derives the type and traceback fields of the result from the exception instance (the value field). (Contributed by Irit Katriel in bpo-45711.)\n\n_frozen has a new is_package field to indicate whether or not the frozen module is a package. Previously, a negative value in the size field was the indicator. Now only non-negative values be used for size. (Contributed by Kumar Aditya in bpo-46608.)\n\n_PyFrameEvalFunction() now takes _PyInterpreterFrame* as its second parameter, instead of PyFrameObject*. See PEP 523 for more details of how to use this function pointer type.\n\nPyCode_New() and PyCode_NewWithPosOnlyArgs() now take an additional exception_table argument. Using these functions should be avoided, if at all possible. To get a custom code object: create a code object using the compiler, then get a modified version with the replace method.\n\nPyCodeObject no longer has the co_code, co_varnames, co_cellvars and co_freevars fields. Instead, use PyCode_GetCode(), PyCode_GetVarnames(), PyCode_GetCellvars() and PyCode_GetFreevars() respectively to access them via the C API. (Contributed by Brandt Bucher in bpo-46841 and Ken Jin in gh-92154 and gh-94936.)\n\nThe old trashcan macros (Py_TRASHCAN_SAFE_BEGIN/Py_TRASHCAN_SAFE_END) are now deprecated. They should be replaced by the new macros Py_TRASHCAN_BEGIN and Py_TRASHCAN_END.\n\nA tp_dealloc function that has the old macros, such as:\n\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_SAFE_BEGIN(p); ... Py_TRASHCAN_SAFE_END }\n\nshould migrate to the new macros as follows:\n\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_BEGIN(p, mytype_dealloc) ... Py_TRASHCAN_END }\n\nNote that Py_TRASHCAN_BEGIN has a second argument which should be the deallocation function it is in.\n\nTo support older Python versions in the same codebase, you can define the following macros and use them throughout the code (credit: these were copied from the mypy codebase):\n\n#if PY_VERSION_HEX >= 0x03080000 # define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc) # define CPy_TRASHCAN_END(op) Py_TRASHCAN_END #else # define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op) # define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op) #endif\n\nThe PyType_Ready() function now raises an error if a type is defined with the Py_TPFLAGS_HAVE_GC flag set but has no traverse function (PyTypeObject.tp_traverse). (Contributed by Victor Stinner in bpo-44263.)\n\nHeap types with the Py_TPFLAGS_IMMUTABLETYPE flag can now inherit the PEP 590 vectorcall protocol. Previously, this was only possible for static types. (Contributed by Erlend E. Aasland in bpo-43908)\n\nSince Py_TYPE() is changed to a inline static function, Py_TYPE(obj) = new_type must be replaced with Py_SET_TYPE(obj, new_type): see the Py_SET_TYPE() function (available since Python 3.9). For backward compatibility, this macro can be used:\n\n#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE) static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type) { ob->ob_type = type; } #define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type) #endif\n\n(Contributed by Victor Stinner in bpo-39573.)\n\nSince Py_SIZE() is changed to a inline static function, Py_SIZE(obj) = new_size must be replaced with Py_SET_SIZE(obj, new_size): see the Py_SET_SIZE() function (available since Python 3.9). For backward compatibility, this macro can be used:\n\n#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE) static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) { ob->ob_size = size; } #define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size) #endif\n\n(Contributed by Victor Stinner in bpo-39573.)\n\n<Python.h> no longer includes the header files <stdlib.h>, <stdio.h>, <errno.h> and <string.h> when the Py_LIMITED_API macro is set to 0x030b0000 (Python 3.11) or higher. C extensions should explicitly include the header files after #include <Python.h>. (Contributed by Victor Stinner in bpo-45434.)\n\nThe non-limited API files cellobject.h, classobject.h, code.h, context.h, funcobject.h, genobject.h and longintrepr.h have been moved to the Include/cpython directory. Moreover, the eval.h header file was removed. These files must not be included directly, as they are already included in Python.h: Include Files. If they have been included directly, consider including Python.h instead. (Contributed by Victor Stinner in bpo-35134.)\n\nThe PyUnicode_CHECK_INTERNED() macro has been excluded from the limited C API. It was never usable there, because it used internal structures which are not available in the limited C API. (Contributed by Victor Stinner in bpo-46007.)\n\nThe following frame functions and type are now directly available with #include <Python.h>, itâs no longer needed to add #include <frameobject.h>:\n\nPyFrame_Check()\n\nPyFrame_GetBack()\n\nPyFrame_GetBuiltins()\n\nPyFrame_GetGenerator()\n\nPyFrame_GetGlobals()\n\nPyFrame_GetLasti()\n\nPyFrame_GetLocals()\n\nPyFrame_Type\n\n(Contributed by Victor Stinner in gh-93937.)\n\nThe PyFrameObject structure members have been removed from the public C API.\n\nWhile the documentation notes that the PyFrameObject fields are subject to change at any time, they have been stable for a long time and were used in several popular extensions.\n\nIn Python 3.11, the frame struct was reorganized to allow performance optimizations. Some fields were removed entirely, as they were details of the old implementation.\n\nPyFrameObject fields:\n\nf_back: use PyFrame_GetBack().\n\nf_blockstack: removed.\n\nf_builtins: use PyFrame_GetBuiltins().\n\nf_code: use PyFrame_GetCode().\n\nf_gen: use PyFrame_GetGenerator().\n\nf_globals: use PyFrame_GetGlobals().\n\nf_iblock: removed.\n\nf_lasti: use PyFrame_GetLasti(). Code using f_lasti with PyCode_Addr2Line() should use PyFrame_GetLineNumber() instead; it may be faster.\n\nf_lineno: use PyFrame_GetLineNumber()\n\nf_locals: use PyFrame_GetLocals().\n\nf_stackdepth: removed.\n\nf_state: no public API (renamed to f_frame.f_state).\n\nf_trace: no public API.\n\nf_trace_lines: use PyObject_GetAttrString((PyObject*)frame, \"f_trace_lines\").\n\nf_trace_opcodes: use PyObject_GetAttrString((PyObject*)frame, \"f_trace_opcodes\").\n\nf_localsplus: no public API (renamed to f_frame.localsplus).\n\nf_valuestack: removed.\n\nThe Python frame object is now created lazily. A side effect is that the f_back member must not be accessed directly, since its value is now also computed lazily. The PyFrame_GetBack() function must be called instead.\n\nDebuggers that accessed the f_locals directly must call PyFrame_GetLocals() instead. They no longer need to call PyFrame_FastToLocalsWithError() or PyFrame_LocalsToFast(), in fact they should not call those functions. The necessary updating of the frame is now managed by the virtual machine.\n\nCode defining PyFrame_GetCode() on Python 3.8 and older:\n\n#if PY_VERSION_HEX < 0x030900B1 static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame) { Py_INCREF(frame->f_code); return frame->f_code; } #endif\n\nCode defining PyFrame_GetBack() on Python 3.8 and older:\n\n#if PY_VERSION_HEX < 0x030900B1 static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame) { Py_XINCREF(frame->f_back); return frame->f_back; } #endif\n\nOr use the pythoncapi_compat project to get these two functions on older Python versions.\n\nChanges of the PyThreadState structure members:\n\nframe: removed, use PyThreadState_GetFrame() (function added to Python 3.9 by bpo-40429). Warning: the function returns a strong reference, need to call Py_XDECREF().\n\ntracing: changed, use PyThreadState_EnterTracing() and PyThreadState_LeaveTracing() (functions added to Python 3.11 by bpo-43760).\n\nrecursion_depth: removed, use (tstate->recursion_limit - tstate->recursion_remaining) instead.\n\nstackcheck_counter: removed.\n\nCode defining PyThreadState_GetFrame() on Python 3.8 and older:\n\n#if PY_VERSION_HEX < 0x030900B1 static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate) { Py_XINCREF(tstate->frame); return tstate->frame; } #endif\n\nCode defining PyThreadState_EnterTracing() and PyThreadState_LeaveTracing() on Python 3.10 and older:\n\n#if PY_VERSION_HEX < 0x030B00A2 static inline void PyThreadState_EnterTracing(PyThreadState *tstate) { tstate->tracing++; #if PY_VERSION_HEX >= 0x030A00A1 tstate->cframe->use_tracing = 0; #else tstate->use_tracing = 0; #endif } static inline void PyThreadState_LeaveTracing(PyThreadState *tstate) { int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL); tstate->tracing--; #if PY_VERSION_HEX >= 0x030A00A1 tstate->cframe->use_tracing = use_tracing; #else tstate->use_tracing = use_tracing; #endif } #endif\n\nOr use the pythoncapi-compat project to get these functions on old Python functions.\n\nDistributors are encouraged to build Python with the optimized Blake2 library libb2.\n\nThe PyConfig.module_search_paths_set field must now be set to 1 for initialization to use PyConfig.module_search_paths to initialize sys.path. Otherwise, initialization will recalculate the path and replace any values added to module_search_paths.\n\nPyConfig_Read() no longer calculates the initial search path, and will not fill any values into PyConfig.module_search_paths. To calculate default paths and then modify them, finish initialization and use PySys_GetObject() to retrieve sys.path as a Python list object and modify it directly."
    }
}