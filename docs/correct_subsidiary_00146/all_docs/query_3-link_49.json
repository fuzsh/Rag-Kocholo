{
    "id": "correct_subsidiary_00146_3",
    "rank": 49,
    "data": {
        "url": "https://aws.amazon.com/compare/the-difference-between-mariadb-vs-mysql/",
        "read_more_link": "",
        "language": "en",
        "title": "Difference Between Open Source Relational Databases",
        "top_image": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "meta_img": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
        "images": [
            "https://d1.awsstatic.com/Free-Tier_64.f14d1a130811a363bbea22de4bb589f9ab801dfb.png",
            "https://d1.awsstatic.com/Database_64.294d32ec830542fdde57a8728ce4360647c1a16d.png",
            "https://d1.awsstatic.com/Learn-More_64.dc6d454a262eb880a9dd0d8cb283dca5bc00cb18.png",
            "https://d1.awsstatic.com/All-Products_64.78a4c2cdfdd82b7abc3fda6b44371491bdf5963e.png",
            "https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/28/bdb1349-image001.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2018/01/16/CloudWatchLogs.jpg",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_03_Start-Building_SqInk.6a1ef4429a6604cda9b0857084aa13e2ee4eebca.png",
            "https://d1.awsstatic.com/webteam/product-pages/Product-Page_Standard-Icons_01_Product-Features_SqInk.a8d5666758afc5121b4eb818ae18126031c4b61e.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "What's the difference between MariaDB vs MySQL? How to use MariaDB and MySQL with AWS.",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services, Inc.",
        "canonical_link": "https://aws.amazon.com/compare/the-difference-between-mariadb-vs-mysql/",
        "text": "MySQL is a relational database management system that was released in 1995. In 2009, developers released MariaDB as a code fork of MySQL 5.1.38.\n\nAs MariaDB forked from MySQL, there are many similarities in the two relational database management systems. For instance, MariaDB has kept MySQL’s structure, naming conventions, and data definition files. Additionally, it supports all MySQL connectors, connections, and ports. Your MySQL client package works unchanged with MariaDB.\n\nNext we give some more similarities.\n\nACID compliance\n\nAtomicity, consistency, isolation, and durability (ACID) are the four core principles that ensure the reliability of database transactions. Both MySQL and MariaDB uphold these principles. By complying with ACID, both databases maintain the accuracy and integrity of data.\n\nSQL compatibility\n\nMySQL and MariaDB are relational databases that organize data into tables. MariaDB and MySQL both use SQL to manage and query data. You can use many of the same commands across these systems.\n\nRead about SQL »\n\nOpen-source software\n\nAs open-source relational database management systems, MySQL and MariaDB are both collaborative efforts that have come out of a community of developers. Their source code is available to the public.\n\nMySQL database has one fully open-source version, released under the General Public License (GPL). It also has one paid enterprise version that comes with additional features and support. MariaDB is fully open source on GitHub.\n\nSecurity\n\nMySQL and MariaDB offer similar base security features. They offer encryption, access control mechanisms, user authentication and authorization, and SSL/TLS support. They also allow fine-grained access control so you can give different permission levels to different users.\n\nSince forking from MySQL, MariaDB has continued to expand its capabilities. Some of these changes have led to core functionality, capability, and performance differences.\n\nHere are the significant differences between MySQL and MariaDB.\n\nJSON data handling\n\nMariaDB and MySQL support the retrieving and storing of JSON data. However, they store JSON reports in different ways. MariaDB stores JSON reports in strings, while MySQL stores them as binary objects.\n\nMySQL and MariaDB also do not both support all JSON functions. MariaDB supports JSON_QUERY and JSON_EXISTS, while MySQL doesn’t. Similarly, MySQL supports the native JSON data type JSON_TABLE that MariaDB does not.\n\nHowever, MariaDB has only supported JSON data types since version 10.2. The JSON data type that MariaDB uses is an alias for LONGTEXT.\n\nFunctionality\n\nSince their development pathways have been different, MariaDB and MySQL now offer slightly different functionality.\n\nFor example, MySQL provides dynamic columns that let you define multiple data values in a single column and modify the column with functions. Dynamic columns allow data masking to protect sensitive information.\n\nIn contrast, MariaDB supports invisible columns in database views. Invisible columns are not listed when a user performs a SELECT statement or asks for a value in an INSERT statement.\n\nUser authentication\n\nMySQL has the validate_password component, which you can use to increase password security.\n\nMariaDB does not have this by default but does offer three validator plugins. You can use these password validator plugins to add more protection around passwords. In version 10.4, MariaDB introduced the ed25519 authentication plugin to replace its previously used SHA-1 authentication. This helps to authenticate users and store passwords securely.\n\nEncryption\n\nMySQL and MariaDB both encrypt data at rest and in transit.\n\nMySQL allows admin users to configure and encrypt redo and undo logs, while it doesn’t encrypt temporary tablespace or binary logs.\n\nOn the other hand, MariaDB supports binary log encryption and temporary table encryption.\n\nThread pooling\n\nThread pooling allows a database to optimize its resources by pairing new connections with pre-existing threads. A high thread pool capacity is vital for applications that want to scale and serve thousands of users in parallel.\n\nMariaDB includes thread pooling in its thread pool plugin, which is part of the community edition. MariaDB offers the ability to manage over 200,000 connections at once.\n\nMySQL has a thread pool plugin on its enterprise version. However, it cannot handle as many connections as once as MariaDB.\n\nMariaDB is more scalable and offers a higher query speed when compared to MySQL. This makes it good for managing large-sized data. You will also find more features in MariaDB that MySQL doesn’t have, like sequence storage engines and virtual columns. You can also use multiple engines in one table.\n\nHowever, MySQL has been around for much longer than MariaDB. Some organizations prefer the enterprise support that MySQL offers.\n\nNext we give some considerations when choosing between both the databases.\n\nStorage engines\n\nIn database management systems, storage engines are a component that helps to retrieve, update, and store data within the database. The storage engine you want to work with might influence your decision.\n\nYou can use multiple storage engines on both MySQL and MariaDB, but MySQL offers fewer options. Some storage engines on MySQL include InnoDB, CSV, Federated, MyISAM, Merge, and Federated.\n\nMariaDB supports some storage engines that MySQL doesn’t, such as XtraDB, Aria, InnoDB, MariaDB ColumnStore, Memory, Cassandra, and Connect.\n\nLicense\n\nMariaDB and MySQL both have General Public License (GPL) versions. MariaDB is completely under GPL authorization, while MySQL has two available licenses—public and private.\n\nThe private MySQL enterprise edition license unlocks additional capabilities, like thread pooling, that accelerate query speed. Companies that want to distribute their MySQL software without distributing the source code under the GPL might prefer MySQL enterprise edition.\n\nOracle database compatibility\n\nOracle database compatibility is the ability of the Oracle database to work with an application built with MariaDB or MySQL databases.\n\nIf your organization already uses Oracle database products, you may prefer MySQL. Oracle database offers a specific compatibility mode for SQL syntax specific to MySQL. However, MySQL does not support PL/SQL, the application-oriented language that Oracle developed.\n\nSince version 10.3, MariaDB has supported PL/SQL. MariaDB also provides an Oracle syntax compatibility mode for running Oracle database applications without change.\n\nSpeed and performance\n\nFor many years, MySQL outperformed MariaDB for several use cases. For example, MySQL 8.0 could handle more queries per second than the 10.3 version of MariaDB. However, MariaDB has made many improvements over recent years.\n\nAt present, MariaDB is faster in terms of performing queries and in replication tasks. You may prefer MariaDB for performance-critical workloads.\n\nYes, you can move from MySQL to MariaDB with minimal effort. MariaDB is designed to be backward compatible with MySQL. This means that applications and scripts written for MySQL should work with MariaDB without any significant changes.\n\nUntil MariaDB 5.5, MariaDB Server followed the MySQL version numbering schema, aiming for drop-in compatibility with the same major version of MySQL. In 2012, to reflect the growing number of features that were not available in MySQL, MariaDB Server’s version numbering diverged. MariaDB released 10.0, while MySQL released 5.6.\n\nMariaDB Server still retains high levels of compatibility with MySQL. Upgrades from old MySQL versions to even the newest MariaDB versions are supported with an in-place upgrade.\n\nSwitching from MySQL to MariaDB follows a standard installation procedure. You run the mysql_upgrade tool to update the MySQL database’s privileges and event tables with MariaDB equivalents.\n\nAmazon Relational Database Service (Amazon RDS) is a collection of fully managed services that make it simple to set up, operate, and scale databases in the cloud.\n\nChoose from seven popular engines, two of which are dedicated to MySQL and MariaDB. Amazon RDS for Maria DB supports MariaDB Server versions 10.3, 10.4, 10.5, and 10.6. Amazon RDS for MySQL supports MySQL Community Edition versions 5.7 and 8.0.\n\nHere are ways you can benefit from using Amazon RDS:\n\nDeploy scalable MariaDB and MySQL cloud databases in minutes with cost-efficient and resizable hardware capacity\n\nUse existing code, applications, and tools without any change\n\nAccess over 50 CPU, memory, file system, and disk I/O metrics for advanced database monitoring\n\nEnjoy enhanced availability and durability to elastically scale out beyond the capacity constraints of a single database instance\n\nGet started with MySQL and MariaDB on AWS by creating an account today."
    }
}