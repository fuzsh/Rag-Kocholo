{
    "id": "dbpedia_42_2",
    "rank": 87,
    "data": {
        "url": "https://community.kde.org/KWin/Wayland",
        "read_more_link": "",
        "language": "en",
        "title": "KDE Community Wiki",
        "top_image": "https://www.kde.org/aether/media/192x192.png",
        "meta_img": "https://www.kde.org/aether/media/192x192.png",
        "images": [
            "https://community.kde.org/images/kde-logo-white-blue-source.svg",
            "https://community.kde.org/images.techbase/thumb/f/f6/Action_todo.svg/40px-Action_todo.svg.png",
            "https://community.kde.org/resources/assets/licenses/gfdlcc.png",
            "https://community.kde.org/resources/assets/poweredby_mediawiki_88x31.png",
            "https://stats.kde.org/piwik.php?idsite=25&rec=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.kde.org/aether/media/180x180.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "What is Wayland?\n\nWayland is a small display server protocol and IPC library which is considered to have the chance to replace X11 as primary windowing system. But Wayland is not a direct successor of X and does not follow the design of X. The display server is directly moved into the Compositor (that is KWin) and clients connect to this server through a Unix socket.\n\nWhy Plasma needs Wayland?\n\nX has some serious issues and is rather old. The protocol is designed for the usecases three decades ago. Over the last years more and more functionality has been moved from X either into the kernel or into the compositors. The X server is more or less only a proxy between kernel, compositor and the X clients.\n\nToday the compositor does everything the X server used to do. There are some remaining features not yet moved into the compositor (e.g. input handling) but those would make most sense in the compositor. The best situation would be to let the compositor directly work together with the kernel for rendering and input handling and manage the clients directly, which means to remove the Proxy. This is what Wayland is about. More reasons for Wayland in the FAQ.\n\nIn Plasma we need Wayland support as we are hitting the limitations of X all the time. Wayland will simplify our architecture and allow us to composite the screen in the way we consider as most useful.\n\nWayland Support in Plasma\n\nWayland support in the KDE Plasma Workspaces is in a tech-preview state. The workspaces have been developed for X11 and much functionality relies on X11. To be able to make proper use of Wayland these bits have to be rewritten.\n\nThe most complex task is to implement Wayland support in KWin, KDE Plasma's Compositor and Window Manager. Since 5.4 KWin is able to manage Wayland clients and this allows to start a Plasma session on Wayland.\n\nWhy not a new Compositor?\n\nGiven that KWin was designed as a X11 Window Manager and later as a X11 compositor the question is valid, why not to implement a new Wayland compositor from scratch. Most parts of KWin are X11 independent. E.g. the Desktop Effect system is able to integrate Wayland clients without any change, the same is true for Window Decorations and other parts.\n\nAnother reason is that the KWin development team does not have the manpower to maintain an independent X11 window manager and a Wayland compositor. Starting a new Wayland compositor would mean to stop the work on the X11 window manager, which would be a bad move as we cannot know yet whether Wayland will succeed and will be supported on all hardware. Also in future KDE will have to provide an X11 window manager.\n\nKWin is known as one of the most feature complete and most stable window managers. More than a decade of development effort has gone into this Window Manager. Reaching feature parity in a new Wayland compositor seems hardly possible if rewritten from scratch.\n\nWriting a new Wayland Compositor would require to rewrite the complete X11 workspace in one go. This includes not only the Window Manager, but also parts of Plasma, Screen Locker and many, many more. This would take a long development time and the transition would not be smooth, very likely buggy and with regressions like the 4.0 introduction. We do not want to break the desktop!\n\nDetermining and setting the window system that KDE applications use\n\nSystem Settings > About this System shows\n\nGraphics Platform: Wayland\n\nif running under Wayland, otherwise \"X11\". Each application's Help > About App name > Components dialog shows either \"The xcb windowing system\" or \"The wayland windowing system\".\n\nForcing KDE apps to run as X11\n\nKWin Wayland supports unmodified X11 applications by implmenting the \"XWayland\" protocol to provide an X11 server. There are various command-line options to /usr/bin/kwin_wayland to enable and configure this. The X11 applications talk to this server and work reasonably well, though utilities such as clipboard managers and screen capture programs will probably have problems. It should start\n\nTo make KDE applications use X11, in a terminal such as Konsole enter\n\nQT_QPA_PLATFORM=xcb /usr/bin/kfontview\n\nreplacing kfontview with the path to the application's binary.\n\nIt is also possible to restart your KDE window system using the other window system.\n\nStarting a nested KWin\n\nSince 5.3 it is possible to start a nested KWin instance under either X11 or Wayland:\n\nexport $(dbus-launch) kwin_wayland --xwayland\n\nYou can use the --socket option when launching from another Wayland session. It is used to define a different socket name than the one used by the current Wayland session.\n\nThe option --xwayland is required to start a nested X server. The id of the created X11 Display may be printed to stdout, e.g.:\n\nX-Server started on display :1\n\nNormally it picks the next free id, e.g. if the system X11 is on display \":0\", it will pick \":1\". To run an X11 client application on the nested KWin X11 server, set the DISPLAY variable and set the qpa platform to xcb, e.g.:\n\nDISPLAY=:1 QT_QPA_PLATFORM=wayland kwrite\n\nThe nested KWin is started on your primary windowing system. E.g. if the DISPLAY environment variable is defined it will start on X11, if the WAYLAND_DISPLAY environment variable is defined it will start on Wayland. It is also possible to explicitly set the system to use by passing command line argument \"--x11-display\" or \"--wayland-display\".\n\nTo run a Qt application as a Wayland client on this KWin instance, as above one just needs to set the qpa platform to wayland, e.g.:\n\nQT_QPA_PLATFORM=wayland kwrite\n\nRunning on a tty\n\nAs an alternative one can also specify which backend to use. On a tty both --drm and --framebuffer are supported, though only --drm provides OpenGL acceleration. If none is specified it will use the DRM backend.\n\nThe option \"--xwayland\" is required to start a nested X server. Normally it picks the next free display id, so if an X Server is running on \":0\" it picks \":1\".\n\nOnce the screen turned black KWin has taken over the display and one can open windows on the Xwayland server. Therefore go to another tty and start an application by passing the correct DISPLAY variable:\n\nDISPLAY=:1 kwrite\n\nNow switching back to the tty KWin is running on should show the started window and allow to interact with it. Support for running KWin on a tty is still in it's early stages. Bugs are to be expected and there are known missing features. Please consider it only as a mode to experiment with.\n\nStart a Plasma session on Wayland\n\nFirst go to a tty (Press Ctrl+Alt+F3 for instance) and log in. Then run the following command:\n\ndbus-run-session startplasma-wayland\n\nReading wayland session logs\n\nIf you started the wayland session from SDDM, logs are located at ~/.local/share/sddm/wayland-session.log :\n\ntail -f ~/.local/share/sddm/wayland-session.log\n\nI found a bug, what should I do?\n\nFill a bug! associated with the wayland keyword.\n\nThen if you have the time open your text editor, fix it and open a review request on phabricator. You can find phabricator and arc documentation at https://community.kde.org/Infrastructure/Phabricator\n\nI want to help\n\nGreat, get in touch with us either through kwin at kde dot org or plasma dash devel at kde dot org or find us in #kwin or #plasma on Libera Chat. There is lots to work on and we can use every helping hand.\n\nMore Information"
    }
}