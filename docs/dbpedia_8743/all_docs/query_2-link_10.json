{
    "id": "dbpedia_8743_2",
    "rank": 10,
    "data": {
        "url": "https://docs.contao.org/manual/en/system/settings/",
        "read_more_link": "",
        "language": "en",
        "title": "Settings :: Contao Manual",
        "top_image": "https://docs.contao.org/manual/images/favicon.png",
        "meta_img": "https://docs.contao.org/manual/images/favicon.png",
        "images": [
            "https://docs.contao.org/manual/images/manual/system/en/security-settings-en.5b920c249cdb1976d3ff7405182ef2cf088c9f5609e819d78551301524202dcd.png?classes=shadow"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://docs.contao.org/manual/images/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Settings\n\nThe system settings slowly but surely leave the backend. Basic system settings influence Contao as an application and therefore there is a chance that a wrong setting will render the system non-functional. If this happens, you will not be able to undo the settings and restore the system because you will not be able to log in anymore. For this reason, most settings are configured outside of Contao via the config.yaml, or can be configured via the Contao Manager in the future.\n\nSettings\n\nGlobal configuration\n\nE-mail address of the system administrator: This is the address to which notifications about e.g. locked accounts or newly registered users are sent. You can also use the following notation to add a name to the email address:\n\nDate and time format: All date and time formats must be entered as used with the PHP date function. Contao processes only numeric formats in the backend, i.e. the letters j, d, m, n, y, Y, g, G, h, H, i and s.\n\nHere are some examples of valid date and time specifications:\n\nInformationExplanationY-m-dYYYY-MM-DD, international ISO-8601, for example 2005-01-28m/d/YMM/DD/YYYY, English format, for example 01/28/2005d.m.YDD.MM.YYYY, German format, for example 28.01.2005y-n-jYY-M-D, without leading zeros, e.g. 05-1-28YmdYYYYMMDD, Unix timestamp, for example 20050128H:i:s24 hours, minutes and seconds, e.g. 20:36:59g:i12 hours without leading zeros and minutes, e.g. 8:36\n\nTime zone: You should set the timezone before you create your website because Contao stores all dates as Unix timestamps and Contao will not adjust these, if the timezone is changed.\n\nBack end configuration\n\nDo not collapse elements: In the “Parent View”, Contao displays the elements in a shortened form for clarity reasons. Individual elements can be unfolded using a navigation icon if needed. Select this option to disable the feature completely.\n\nItems per page: In the Listing Records section, you learned that Contao limits the number of records per page to 30 by default. You can change this value here. Higher values mean a longer loading time.\n\nMaximum items per page: To prevent an inexperienced user from displaying 5000 records at once and thus exceeding the PHP memory limit, you can specify the maximum number of records that can be displayed per page.\n\nAdditional back end settings:\n\nSome additional parameters can be configured via the config/config.yaml.\n\nKeyDescriptionattributesAdds HTML attributes to the <body> tag in the back end. The attribute name must be a valid HTML attribute name - it is automatically prefixed with data-.custom_cssAdds custom style sheets to the back end. The assets must be publicly accessible via URL!custom_jsAdds custom JavaScript files to the back end. The assets must be publicly accessible via URL!badge_titleConfigures the title of the badge in the back end.route_prefixsince 4.13 Configures the path to the Contao back end, e.g., /admin instead of /contao.\n\nThe following config defines some example values:\n\nFront end configuration\n\nEnable folder URLs: Here you can activate folder structures in page aliases. This will add the aliases that exist in the page hierarchy to the alias, e.g. the page “Download” in the page path “Docs > Install” will use the alias docs/install/download.html instead of just download.html.\n\nDo not redirect empty URLs: Allows you to disable the redirect of the “empty URL” to the start page of the browser’s language respective website root when using the legacy routing mode without contao.prepend_locale: true (not recommended).\n\nSecurity settings\n\nDisable request tokens: Here you can activate that the request tokens are not checked when submitting a form (insecure!).\n\nAllowed HTML tags: By default, Contao does not allow HTML tags in forms and removes them automatically when saving. For input fields where the use of HTML is desired, you can specify a list of allowed HTML tags here.\n\nsince 4.11.7, 4.9.18 and 4.4.56 Allowed HTML attributes: You can extend the list of allowed HTML attributes for input fields here. If an HTML attribute is not present in the list, it will be automatically removed when saving. The tag or attribute name * stands for all tags or attributes. For attributes with hyphens, placeholders such as data-* can be used.\n\nPassword hash: By default, Contao uses the defaut of the current PHP version, but you can also set a value. This is necessary if you want to sync the password to another system like LDAP.\n\nThe following configuration defines some example values:\n\nExamples:\n\n<iframe> is not present in the allowed HTML tags, but can easily be inserted under key.\n\nIn order to better recognise the HTML tags added by the user, these should be entered at the beginning of the list.\n\nIn the permitted HTML attributes, the attribute must then also be inserted as a value for this.\n\n<nav> and <input> are, for example, already present in the permitted HTML tags and can thus be easily extended with permitted attributes. Enter nav or input as the key and the desired value as the value - in our example role or type.\n\nIf you trust all backend users 100%, you can also enter * as the key and * as the value. This will allow all attributes for all elements.\n\nFiles and images\n\nDownload file types: Here you can define which file types may be downloaded from your server.\n\nMaximum GD image width: Here you can define the maximum width of images that can still be processed via the GD image process library. Any image exceeding this value will not be processed.\n\nMaximum GD image height: Here you can define the maximum height of images that can still be processed via the GD image process library. Any image exceeding this value will not be processed.\n\nUpload settings\n\nUpload file types: Here you can define which file types can be uploaded to your server.\n\nMaximum upload file size: Here you can define the maximum size of a file that can be uploaded to your server using the file manager. The entry is in bytes (1 MiB = 1024 KiB = 1,048,576 bytes). Larger files will be rejected.\n\nMaximum image width: When uploading images, the file manager automatically checks the width of the image and compares it with the width you set here. If an image exceeds the maximum width, it will be reduced automatically.\n\nMaximum image height: When uploading images, the file manager automatically checks their height and compares it with your default value. If an image exceeds the maximum height, it will be resized automatically.\n\nSearch engine settings\n\nEnable searching: If you select this option, Contao indexes the finished pages of your website and creates a search index from them. With the frontend module “search engine”, you can search this index.\n\nIndex protected pages: Select this option to index protected pages for your search. Use this feature with care and make sure to exclude personalized pages from the search.\n\nCron job settings\n\nDeactivate the command scheduler: Here you can disable the Periodic Command Scheduler and run the route _contao/cron using a real cron job (which you have to set up yourself). Starting with Contao 4.9 you can also use the following command:\n\nphp vendor/bin/contao-console contao:cron\n\nDefault access rights\n\nDefault page owner: Here you can specify the default owner of the pages for which no access rights have been defined. For more information, see the Access Rights section.\n\nDefault page group: Here you can define to which group the pages for which no access rights are defined belong by default. For more information, see the Access Rights section.\n\nDefault access rights: Here you can set the default access rights for the pages for which no special access rights are defined. For more information, see the Access Rights section.\n\nparameters.yaml\n\nIn the Contao Managed Edition, the parameters (e.g. database credentials) are stored in the parameters.yaml file that is generated by the Contao installation tool. This file is usually excluded from the versioning process and can also contain additional entries such as the credentials for sending e-mails via SMTP.\n\nThe file parameters.yaml is located in the folder config/ and is created automatically when you install Contao.\n\nThe parameters.yaml contains the following after installing Contao:\n\nDatabase passwords that consist only of digits must be set in quotation marks.\n\nconfig.yaml\n\nThe bundle configuration belongs in the config.yaml and is located in the folder config/. If the file does not exist yet, it must be created. Contao automatically loads the config_prod.yaml or config_dev.yaml and if not available the config.yaml.\n\nThis allows you to realize different configurations for your test or production environment (dev/prod) (e.g. more logging in debug mode). In addition, you can commit the config.yaml configuration files to your repository, if your project is versioned via Git for example.\n\nYou can access the default configuration for Contao from the command line:\n\nYou can get information about the current configuration this way:\n\nlocalconfig\n\nAs mentioned in the config reference above the configuration key contao.localconfig allows you to set any configuration that is defined via $GLOBALS['TL_CONFIG'], the default values of which can be overwritten via the system/config/localconfig.php. This is where Contao stores any settings that have been customised in the back end, i.e. under System » Settings. This form of storing settings is being phased out step by step. Some of the settings now have a counterpart in the bundle configuration, others are e.g. set in the website root or within the back end user’s settings.\n\nHowever depending on the Contao version you are using there are still settings being used from the localconfig. Thus it can be useful to define them directly in your applications configuration (i.e. the config.yaml) rather than the legacy localconfig.php. Not only because you might need it for your deployment flow, but also because some settings can only be set manually - because they neither have a bundle configuration counterpart, nor is there another mean of setting them via the back end.\n\nThe following example defines the administrator’s e-mail address via an environment variable and increases the undo period to 60 days:\n\nThe following is a comprehensive list of localconfig configurations still in use and their description.\n\nKeyDescriptionadminEmailE-mail address of the system administrator.allowedDownloadDownload file types.allowedAttributesAllowed HTML attributes.allowedTagsAllowed HTML tags.characterSetCharacter set used by Contao. (deprecated) Use the parameter kernel.charset instead. Default: UTF-8dateFormatDate format.datimFormatDate and time format.defaultChmodDefault access rights.defaultGroupDefault page group.defaultUserDefault page owner.disableCronDeactivate the command scheduler.disableInsertTagsAllows you to disable the replacement of insert tags globally.disableRefererCheckAllows you to disable the request token check entirely (deprecated).doNotCollapseDo not collapse elements.doNotRedirectEmptyDo not redirect empty URLs.folderUrlEnable folder URLs.gdMaxImgHeightMaximum GD image height.gdMaxImgWidthMaximum GD image width.imageHeightMaximum image height.imageWidthMaximum image width.installPasswordStores the hashed value of the Contao Install Tool password.licenseAcceptedStores whether the license in the Contao Install Tool has been accepted.logPeriodDuration in seconds for how long entries in the Contao back end system log should be kept. Default: 604800.maxFileSizeMaximum upload file size.maxImageWidthAllows you to define a maximum image width for the front end (deprecated).maxPaginationLinksAllows you define the number links shown in the automatically generated front end paginations. Default: 7.maxResultsPerPageMaximum items per page.minPasswordLengthAllows you to define the minimum password length for front end members and back end users. Default: 8.requestTokenWhitelistAllows you to disable the request token check for requests coming from the the hosts in this array (deprecated).resultsPerPageItems per page.sessionTimeoutDuration in seconds for how long a user session (front and back end) should stay valid. If you increase this value, you also might need to increase PHP’s session timeouts (session.cookie_lifetime and session.gc_maxlifetime). Default: 3600.timeFormatTime format.timeZoneTime zone.undoPeriodDuration in seconds for how long deleted entries can still be restored. Default: 2592000.uploadTypesUpload file types.useAutoItemAllows you to disable the usage of the so called auto item (not recommended).versionPeriodDuration in seconds for how long previous versions of edited entries should be kept. Default: 7776000.\n\nEnvironment variables\n\nEnvironment variables are variables that can be defined at the operating system level, per user or even process. You can learn more about the concept at Wikipedia (https://en.wikipedia.org/wiki/Environment_variable). The big advantage of using environment variables is that an application like Contao is prepared to run inside containers. We will not discuss the operation in containers further at this point. The important thing is that Contao can be operated in this environment. For operation without the possibility to set environment variables, such as on a common shared hosting, Contao provides the possibility to define environment variables in an .env file. Contao then interprets these as if they were real environment variables. This way, Contao combines the best of both worlds: It is prepared for professional operation inside containers with environment variables, but can just as well be operated on a shared hosting platform.\n\nThe variables are defined in the file .env and this file must be located in the root directory of the Contao installation. The usage and name of the following variables are predefined. However, you can also define arbitrary variables and then reference them e.g. in the config.yaml. If an additional .env.local file exists in the same directory, it will be used automatically.\n\nCustom Environment Variable\n\nThe following example shows how to define the system administrator’s e-mail address using a custom environment variable in the .env file and referencing it in the config.yaml file.\n\nAPP_ENV\n\nThe APP_ENV environment variable can contain either prod or dev. By default, the Contao Managed Edition runs in the prod mode, optimizing everything for production. If you want to put your installation in permanent development mode to have additional logging and debugging output, set APP_ENV to dev. Never do this for production sites! If you set the environment manually, you will no longer be able to toggle the debug mode from the back end as a Contao administrator.\n\nAPP_SECRET\n\nThe APP_SECRET environment variable is required e.g. to generate CSRF tokens. This is a string that should be unique to your application and it’s commonly used to add more entropy to security related operations. Its value should be a series of characters, numbers and symbols chosen randomly and the recommended length is around 32 characters. As with any other security-related parameter, it is a good practice to change this value from time to time. However, keep in mind that changing this value will invalidate all signed URIs and Remember Me cookies. That is why, after changing this value, you should regenerate the application cache and log out all the application users. For more information please visit the Symfony documentation.\n\nDATABASE_URL\n\nThe database connection information is stored as an environment variable called DATABASE_URL. It defines the database user name, database password, host name, port and database name that will be used by your Contao system. The format of this variable is the following: DATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name\". It is used by default for the Doctrine configuration: doctrine.dbal.url: '%env(DATABASE_URL)%'.\n\nConvert your database parameters\n\nThe following tool runs in your browser and helps you to convert the variables of the parameters.yaml or the DATABASE_URL. No data will be transmitted.\n\nUsername\n\nPassword\n\nServer (:Port)\n\nDatabase Name\n\nDATABASE_URL\n\nMAILER_DSN\n\nThe mailer connection information is stored as an environment variable called MAILER_DSN. It defines the transport to be used for sending emails, as well as the login credentials, host name and port for an SMTP server for example, if applicable. The format of this variable is the following: MAILER_DSN=smtp://username:password@smtp.example.com:465?encryption=ssl. See the Symfony Mailer Documentation for more information.\n\nConvert your mail parameters\n\nThe following tool runs in your browser and helps you to convert your mail parameters into the MAILER_DSN or the config.yaml-variant. No data will be transmitted.\n\nUsername\n\nPassword\n\nHost\n\nPort\n\nMAILER_DSN\n\nconfig.yaml\n\nCOOKIE_ALLOW_LIST\n\nThis is a special environment variable related to the default caching proxy which is shipped with the Contao Managed Edition by default. Contao disables any HTTP caching as soon as there is either a Cookie or an Authorization header present in the request. That is because these headers can potentially authenticate a user and thus cause personalized content to be generated in which case, we never want to serve any content from the cache. However, unfortunately, the web consists of tons of different cookies. Most of which are completely irrelevant to the application itself and are only used in JavaScript (although there are better alternatives such as LocalStorage, SessionStorage or IndexedDB). You will find that e.g. Google Analytics, Matomo, Facebook etc. all set cookies your application (Contao in this case) is not interested in at all. However, because the HTTP cache has to decide whether to serve a response from the cache or not before the application is even started, there’s no way it can know which cookies are relevant and which ones are not. So, we have to tell it. The Contao Managed Edition ships with a list of irrelevant cookies that are ignored by default to increase the hit rate but if you want to optimize it even more, you can disable the default list by providing an explicit list of cookies you need. These are the cookies you know are relevant to the application and in this case, the cache must be omitted. By default, Contao only uses the PHP session ID cookie to authenticate users and members, the CSRF cookie to protect visitors from CSRF attacks when submitting forms, the trusted devices cookie for two-factor authentication and the remember me cookie to automatically log in users if desired. So in most cases, the following configuration will score the maximum cache hits but you may have to allow additional cookies of extensions you installed:\n\nCOOKIE_ALLOW_LIST=PHPSESSID,csrf_https-contao_csrf_token,csrf_contao_csrf_token,trusted_device,REMEMBERME\n\nCOOKIE_REMOVE_FROM_DENY_LIST\n\nIn case you don’t want to manage the whole COOKIE_ALLOW_LIST because you are unsure what your application needs but you want to disable one or more of the existing entries on the deny list that is managed by Contao, you can specify this using:\n\nCOOKIE_REMOVE_FROM_DENY_LIST=__utm.+,AMP_TOKEN\n\nQUERY_PARAMS_ALLOW_LIST\n\nFor the very same reason we strip irrelevant cookies, we also strip irrelevant query parameters. E.g. you might be familiar with the typical ?utm_*>=<randomtoken> query parameters that are added to links of your website. Because they change the URL every single time, they also generate new cache entries every single time, eventually maybe even flooding your cache.\n\nAs with the irrelevant cookies, Contao also manages a list of irrelevant query parameters which again, you may completely override by providing a list of allowed query parameters if you know all the query parameters your application ever needs. This is highly unlikely which is why there is also QUERY_PARAMS_REMOVE_FROM_DENY_LIST.\n\nQUERY_PARAMS_REMOVE_FROM_DENY_LIST\n\nAs with COOKIE_REMOVE_FROM_DENY_LIST, you can use QUERY_PARAMS_REMOVE_FROM_DENY_LIST to remove an entry from the default deny list shipped with Contao. If you e.g. need the Facebook click identifier (fbclid) in your server side code, you may update your list like so:\n\nQUERY_PARAMS_REMOVE_FROM_DENY_LIST=fbclid\n\nTRUSTED_PROXIES\n\nWhen you deploy your application, you may be behind a load balancer or a reverse proxy (e.g. Varnish for caching). For the most part, this doesn’t cause any problems with the Managed Edition. But, when a request passes through a proxy, certain request information is sent using either the standard Forwarded header or X-Forwarded-* headers. For example, instead of reading the REMOTE_ADDR header (which will now be the IP address of your reverse proxy), the user’s true IP will be stored in a standard Forwarded: for=\"…\" header or a X-Forwarded-For header. If you don’t configure the Managed Edition to look for these headers, you’ll get incorrect information about the client’s IP address, whether or not the client is connecting via HTTPS, the client’s port and the hostname being requested. Let’s say your load balancer runs on IP 192.0.2.1. You can trust that IP by setting TRUSTED_PROXIES to 192.0.2.1. You can also trust a whole IP range if you like to: TRUSTED_PROXIES=192.0.2.0/24. See the Symfony Documentation on Proxies for more information.\n\nTRUSTED_HOSTS\n\nThe same explanation as for TRUSTED_PROXIES and the IP example, also applies to TRUSTED_HOSTS when fetching the originally sent Host HTTP header. You would get the host name of your proxy but if you add your proxy host name to the list of trusted proxies, you will get the host name that was requested in the original request: TRUSTED_HOSTS=my.proxy.com\n\nDNS_MAPPING\n\nWhen creating a website in Contao you define the website’s domain in the website root’s settings - or in each website root respectively in a multi-domain setup. In order to not have to manually change the domain every time you copy the database from or to different hosting environments you can use the DNS_MAPPING environment variable:\n\nThis allows you to - for example - copy the live database to your staging or local environment and then automatically change the domains according to the mapping in the respective environment during contao:migrate.\n\nYou can also migrate the protocol setting to different settings in the respective environment, which might be useful if you haven’t set up an SSL certificate in your local development environment.\n\nThis also works if you do not use a dns name in some of your website roots (although that is not a recommended setup).\n\nInstead of the environment variable, you can also directly set the contao.dns_mapping parameter in your parameters.yaml, if you prefer:\n\nE-Mail sending configuration\n\nTo set up the sending of e-mails via an SMTP server, you need the following information from your host (some of these might be optional, depending on the server):\n\nThe hostname of the SMTP server.\n\nThe user name for the SMTP server.\n\nThe password for the SMTP server.\n\nThe port number of the SMTP server (587 / 465).\n\nThe encryption method for the SMTP server (tls / ssl).\n\nThese credentials can then either be added in the parameters.yaml or configured via the MAILER_DSN environment variable, e.g. via the .env.local of your Contao instance.\n\nAfter that you can test the mail dispatch on the command line.\n\nYou can also omit the parameters. The command will then ask you for each parameter interactively.\n\nDifferent e-mail configurations and sender addresses\n\nIn many cases, SMTP servers do not allow sending from any sender address. Oftentimes the sender address must match the SMTP server credentials. Especially in multi-domain installations of Contao it might be important that the sender address of the emails that Contao sends matches the domain. Or you might want to have different sender addresses for different front end forms created via the Contao form generator.\n\nSince Contao 4.10, it is possible to use multiple email configurations in Contao. These configurations can be selected per website root, per form and per newsletter channel. For each e-mail configuration, you can also set the sender that will be used for each e-mail sent by the selected e-mail configuration.\n\nThe configuration requires two steps. First, the available e-mail sending methods have to be set in the Symfony framework configuration in the config.yaml so-called. One or more SMTP servers can be defined using the so-called “DSN” syntax:\n\nsmtp://<USERNAME>:<PASSWORD>@<HOSTNAME>:<PORT>\n\nReplace the <PLACEHOLDER> with the information of the SMTP server used, or remove them accordingly. See also the information in the official Symfony documentation.\n\nYou can use this Tool to encode your parameters.\n\nIn the second step, the configured transports can be made available in the back end via the Contao framework configuration. In the following example, the transports website1 and website2 are made available:\n\nIf the symfony application cache has been refreshed afterwards, these email configurations will be available for selection in the Contao back end.\n\nOptionally, you can now overwrite the sender address for each transport:\n\nIt is also possible to define translations for the descriptions of the options in the back end:\n\nSend Emails Asynchronously\n\nInstead of letting Contao send emails immediately when a request is processed (e.g. when a form was submitted) the email can be sent asynchronously by the server later. There are several reasons why this can be important:\n\nIt reduces the server response time of such requests (in some cases sending via a defined SMTP server can take several seconds).\n\nIt can reduce the load on the web server on high volume sites that also send a lot of emails.\n\nIt allows you to control the amount of emails in a given unit of time (e.g. if the SMTP server imposes a limit on that).\n\nNo emails will be lost in case the SMTP server happens to be unreachable at the moment.\n\nEmail Spooling via Swiftmailer\n\nYou can use the [Swiftmailer bundle’s spooling feature][SwiftmaielrSpooling] in Contao 4.9. In order to enable spooling the following needs to be configurted in your config/config.yaml:\n\nIn this case we are using the file spool. This means that when Contao sends an email it will be first stored in the given folder, var/spool/ within the Contao installation folder in this case (keep in mind to not lose this folder if you are using deployments, so that no emails get lost).\n\nIn order to actually send the emails the following command can be used:\n\nInstead of manually executing this command a minutely cronjob should be configured on the server. If you want to limit the amount of emails per call you can use the --message-limit option:\n\nWith a minutely cronjob this would mean that at most 600 emails are sent per hour in this case.\n\nAsynchronous Emails with Symfony Mailer\n\nThe Swiftmailer Bundle is not available anymore by default since Contao 4.10. Instead the Symfony Mailer component is used. In order to send emails asynchronously in this case we can make use of the Symfony Messenger component, which must be installed first via Composer:\n\nNow we can define a Messenger transport and routing for email messages. First we need to decide on the type of Messenger transport though. The component already provides different transport types. In this case the Doctrine transport is a good fit since it will save our emails in the database first for later consumption. In order to enable asynchronous emails via Symfony Mailer the following needs to be configured:\n\nIn order to let the Messenger actually send the emails now we can use the following command:\n\nInstead of manually executing this command a minutely cronjob should be configured on the server. If you want to limit the amount of emails per call you can use the --limit option:\n\nWith a minutely cronjob this would mean that at most 600 emails are sent per hour in this case."
    }
}