{
    "id": "dbpedia_8743_2",
    "rank": 48,
    "data": {
        "url": "https://www.acontis.com/en/ethercat-master.html",
        "read_more_link": "",
        "language": "en",
        "title": "EtherCAT Master Stack Software",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.acontis.com/en/assets/images/1/6-ethercat_cable_ec-master_header-3044bdee.png",
            "https://www.acontis.com/en/files/img/acontislogo.png",
            "https://www.acontis.com/en/files/grafiken/ec-master/ec-master-architecture.png",
            "https://www.acontis.com/en/files/partners/linkedIn_small.png",
            "https://www.acontis.com/en/files/partners/youtube_social_squircle_red.png",
            "https://www.acontis.com/en/files/partners/github.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "EtherCAT Master software is a designed and optimized to run on different embedded (real-time) operating systems like Linux, Windows, VxWorks, QNX, FreeRTOS, INtime, Xenomai, On Time RTOS-32, TI-RTOS, T-Kernel and others.",
        "meta_lang": "en",
        "meta_favicon": "/files/grafiken/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.acontis.com/en/ethercat-master.html",
        "text": "EtherCAT® MainDevice Stack for EtherCAT Device Protocol (EDP)\n\nThe EC-Master Stack is designed and optimized to run on different embedded (real time) operating systems. Already existing implementations are available Linux (with and without Real-Time), Microsoft Windows® 10/11, Wind River VxWorks, BlackBerry QNX, IntervalZero RTX64, TenAsys INtime®, Integrity, Xenomai, On Time RTOS-32, RTEMS, FreeRTOS, eCos, TI-RTOS, T-Kernel and more operating systems. The EtherCAT MainDevice stack, formerly Master, can be ported on any other embedded operating systems.\n\nSoftware Architecture\n\nApplication Programming Interface (API): Programming the EtherCAT MainDevice core in C/C++, C# and Python.\n\nEtherCAT MainDevice Core: The key EtherCAT MainDevice functionality in the core layer. All protocol handling, e.g. process data transfer and mailbox protocols (CoE, EoE, FoE, AoE, SoE) are executed here. This is complemented by sophisticated diagnosis features.\n\nReal-time Ethernet Driver: Data exchange between MainDevice and SubordinateDevice (SubDevice), formerly Slave. Zero-copy and/or polling techniques together with the core layer are supported to achieve best real-time performance and minimize CPU load.\n\nMainDevice and Network Configuration: The integrated XML parser supports the EtherCAT Network Information (ENI) file defined in the EtherCAT specification.\n\nOperating System Layer: The only OS specific layer. All operating system calls are executed here. To achieve best performance the most functions can be implemented using simple \"C\"-language macros.\n\nAdvantages\n\nHigh performance and low CPU load to achieve fast update rates.\n\nReady-to-run for many operating systems.\n\nSupporting the CPU architectures x86 (32 Bit und 64 Bit), ARM (32 Bit und 64 Bit) und PowerPC (PPC).\n\nAvailable for many processors from Intel, Texas Instruments, ST, Broadcom, Nvidia, Renesas, NXP, Xilinx and Infineon.\n\nTogether with our services you get professional partnership setting up your custom control system. On request you may get the complete system integration.\n\nReliable and robust implementation. For example, the EC-Master Stack is running in the KUKA Robot Control and in controllers from Yaskawa, Lenze and Omron.\n\nFree Evaluation Request"
    }
}