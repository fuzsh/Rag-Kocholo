{
    "id": "dbpedia_1403_3",
    "rank": 67,
    "data": {
        "url": "https://code.visualstudio.com/docs/remote/ssh",
        "read_more_link": "",
        "language": "en",
        "title": "Developing on Remote Machines using SSH and Visual Studio Code",
        "top_image": "https://code.visualstudio.com/opengraphimg/opengraph-docs.png",
        "meta_img": "https://code.visualstudio.com/opengraphimg/opengraph-docs.png",
        "images": [
            "https://code.visualstudio.com/assets/icons/theme-light.svg",
            "https://code.visualstudio.com/assets/icons/theme-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search-dark.svg",
            "https://code.visualstudio.com/assets/icons/search.svg",
            "https://code.visualstudio.com/assets/docs/remote/ssh/architecture-ssh.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-listen-on-socket.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-user@box.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-select-platform.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-statusbar.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-open-folder.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-explorer-add-new.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-host-input.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-command-input.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-explorer-connect.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-explorer-open-folder.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-installed-remote-indicator.png",
            "https://code.visualstudio.com/assets/docs/remote/common/local-installed-extensions.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-disabled-extensions.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/forward-port-ssh.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/add-new-port.png",
            "https://code.visualstudio.com/assets/docs/remote/common/restore-forwarded-ports.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/change-local-port.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/code-command-in-terminal.png",
            "https://code.visualstudio.com/assets/docs/remote/ssh/ssh-settings.png",
            "https://code.visualstudio.com/assets/icons/x-icon.svg",
            "https://code.visualstudio.com/assets/icons/github-icon.svg",
            "https://code.visualstudio.com/assets/icons/youtube-icon.svg",
            "https://code.visualstudio.com/assets/icons/microsoft.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Microsoft"
        ],
        "publish_date": "2021-11-03T00:00:00",
        "summary": "",
        "meta_description": "Developing on Remote Machines or VMs using Visual Studio Code Remote Development and SSH",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://code.visualstudio.com/docs/remote/ssh",
        "text": "Remote Development using SSH\n\nThe Visual Studio Code Remote - SSH extension allows you to open a remote folder on any remote machine, virtual machine, or container with a running SSH server and take full advantage of VS Code's feature set. Once connected to a server, you can interact with files and folders anywhere on the remote filesystem.\n\nNo source code needs to be on your local machine to gain these benefits since the extension runs commands and other extensions directly on the remote machine.\n\nThis lets VS Code provide a local-quality development experience - including full IntelliSense (completions), code navigation, and debugging - regardless of where your code is hosted.\n\nGetting started\n\nNote: After reviewing this topic, you can get started with the introductory SSH tutorial.\n\nSystem requirements\n\nLocal: A supported OpenSSH compatible SSH client must also be installed.\n\nRemote SSH host: A running SSH server on:\n\nx86_64 Debian 8+, Ubuntu 16.04+, CentOS / RHEL 7+.\n\nARMv7l (AArch32) Raspberry Pi OS (previously called Raspbian) Stretch/9+ (32-bit).\n\nARMv8l (AArch64) Ubuntu 18.04+ (64-bit).\n\nWindows 10 / Server 2016/2019 (1803+) using the official OpenSSH Server.\n\nmacOS 10.14+ (Mojave) SSH hosts with Remote Login enabled.\n\n1 GB RAM is required for remote hosts, but at least 2 GB RAM and a 2-core CPU is recommended.\n\nOther glibc based Linux distributions for x86_64, ARMv7l (AArch32), and ARMv8l (AArch64) should work if they have the needed prerequisites. See the Remote Development with Linux article for information prerequisites and tips for getting community supported distributions up and running.\n\nWhile ARMv7l (AArch32) and ARMv8l (AArch64) support is available, some extensions installed on these devices may not work due to the use of x86 native code in the extension.\n\nInstallation\n\nTo get started, you need to:\n\nInstall an OpenSSH compatible SSH client if one is not already present.\n\nInstall Visual Studio Code or Visual Studio Code Insiders.\n\nInstall the Remote-SSH extension. If you plan to work with other remote extensions in VS Code, you may choose to install the Remote Development extension pack.\n\nSSH host setup\n\nIf you do not have an SSH host set up, follow the directions for Linux, Windows 10 / Server (1803+), or macOS SSH host or create a VM on Azure.\n\nOptional: If your Linux or macOS SSH host will be accessed by multiple users at the same time, consider enabling Remote.SSH: Remote Server Listen On Socket in VS Code User settings for improved security.\n\nIn the Settings editor:\n\nSee the Tips and Tricks article for details.\n\nOptional: While password-based authentication is supported, we recommend setting up key based authentication for your host. See the Tips and Tricks article for details.\n\nConnect to a remote host\n\nTo connect to a remote host for the first time, follow these steps:\n\nVerify you can connect to the SSH host by running the following command from a terminal / PowerShell window replacing user@hostname as appropriate.\n\nssh user@hostname # Or for Windows when using a domain / AAD account ssh user@domain@hostname\n\nIn VS Code, select Remote-SSH: Connect to Host... from the Command Palette (F1, ⇧⌘P (Windows, Linux Ctrl+Shift+P)) and use the same user@hostname as in step 1.\n\nIf VS Code cannot automatically detect the type of server you are connecting to, you will be asked to select the type manually.\n\nOnce you select a platform, it will be stored in VS Code settings under the remote.SSH.remotePlatform property so you can change it at any time.\n\nAfter a moment, VS Code will connect to the SSH server and set itself up. VS Code will keep you up-to-date using a progress notification and you can see a detailed log in the Remote - SSH output channel.\n\nTip: Connection hanging or failing? See troubleshooting tips for information on resolving common problems.\n\nIf you see errors about SSH file permissions, see the section on Fixing SSH file permission errors.\n\nAfter you are connected, you'll be in an empty window. You can always refer to the Status bar to see which host you are connected to.\n\nClicking on the Status bar item will provide a list of remote commands while you are connected.\n\nYou can then open any folder or workspace on the remote machine using File > Open... or File > Open Workspace... just as you would locally!\n\nFrom here, install any extensions you want to use when connected to the host and start editing!\n\nNote: On ARMv7l / ARMv8l glibc SSH hosts, some extensions may not work due to x86 compiled native code inside the extension.\n\nOpen a folder on a remote SSH host in a container\n\nIf you are using a Linux or macOS SSH host, you can use the Remote - SSH and Dev Containers extensions together to open a folder on your remote host inside of a container. You do not even need to have a Docker client installed locally.\n\nTo do so:\n\nFollow the installation steps for installing Docker on your remote host and VS Code and the Dev Containers extension locally.\n\nOptional: Set up SSH key based authentication to the server so you do not need to enter your password multiple times.\n\nFollow the quick start for the Remote - SSH extension to connect to a host and open a folder there.\n\nUse the Dev Containers: Reopen in Container command from the Command Palette (F1, ⇧⌘P (Windows, Linux Ctrl+Shift+P)).\n\nThe rest of the Dev Containers quick start applies as-is. You can learn more about the Dev Containers extension in its documentation. You can also see the Develop on a remote Docker host article for other options if this model does not meet your needs.\n\nDisconnect from a remote host\n\nTo close the connection when you finish editing files on the remote host, choose File > Close Remote Connection to disconnect from the host. The default configuration does not include a keyboard shortcut for this command. You can also simply exit VS Code to close the remote connection.\n\nRemember hosts and advanced settings\n\nIf you have a set of hosts you use frequently or you need to connect to a host using some additional options, you can add them to a local file that follows the SSH config file format.\n\nTo make setup easy, the extension can guide you through adding a host without having to hand edit this file.\n\nStart by selecting Remote-SSH: Add New SSH Host... from the Command Palette (F1, ⇧⌘P (Windows, Linux Ctrl+Shift+P)) or clicking on the Add New icon in the SSH Remote Explorer in the Activity Bar.\n\nYou'll then be asked to enter the SSH connection information. You can either enter a host name:\n\nOr the full ssh command you would use to connect to the host from the command line:\n\nFinally, you'll be asked to pick a config file to use. You can also set the \"remote.SSH.configFile\" property in your User settings.json file if you want to use a different config file than those listed. The extension takes care of the rest!\n\nFor example, entering ssh -i ~/.ssh/id_rsa-remote-ssh yourname@remotehost.yourcompany.com in the input box would generate this entry:\n\nHost remotehost.yourcompany.com User yourname HostName another-host-fqdn-or-ip-goes-here IdentityFile ~/.ssh/id_rsa-remote-ssh\n\nSee Tips and Tricks for details on generating the key shown here. You can manually edit this file with anything the SSH config file format supports, so this is just one example.\n\nFrom this point forward, the host will appear in the list of hosts when you select Remote-SSH: Connect to Host... from the Command Palette (F1, ⇧⌘P (Windows, Linux Ctrl+Shift+P)) or in the SSH Targets section of the Remote Explorer.\n\nThe Remote Explorer allows you to both open a new empty window on the remote host or directly open a folder you previously opened. Expand the host and click on the Open Folder icon next to the folder you want to open on the host.\n\nManaging extensions\n\nVS Code runs extensions in one of two places: locally on the UI / client side, or remotely on the SSH host. While extensions that affect the VS Code UI, like themes and snippets, are installed locally, most extensions will reside on the SSH host. This ensures you have smooth experience and allows you to install any needed extensions for a given workspace on an SSH host from your local machine. This way, you can pick up exactly where you left off, from a different machine complete with your extensions.\n\nIf you install an extension from the Extensions view, it will automatically be installed in the correct location. Once installed, you can tell where an extension is installed based on the category grouping.\n\nThere will be a category for your remote SSH host:\n\nAnd also a Local - Installed category:\n\nNote: If you are an extension author and find that your extension is not working properly or installs in the wrong place, see Supporting Remote Development for details.\n\nLocal extensions that actually need to run remotely will appear dimmed and disabled in the Local - Installed category. Select Install to install an extension on your remote host.\n\nYou can also install all locally installed extensions on the SSH host by going to the Extensions view and selecting Install Local Extensions in SSH: {Hostname} using the cloud button at the right of the Local - Installed title bar. This will display a dropdown where you can select which locally installed extensions to install on your SSH host.\n\n\"Always installed\" extensions\n\nIf there are extensions that you would like to always have installed on any SSH host, you can specify which ones using the remote.SSH.defaultExtensions property in settings.json. For example, if you wanted to install the GitLens and Resource Monitor extensions, specify their extension IDs as follows:\n\n\"remote.SSH.defaultExtensions\": [ \"eamodio.gitlens\", \"mutantdino.resourcemonitor\" ]\n\nAdvanced: Forcing an extension to run locally / remotely\n\nExtensions are typically designed and tested to either run locally or remotely, not both. However, if an extension supports it, you can force it to run in a particular location in your settings.json file.\n\nFor example, the setting below will force the Docker extension to run locally and Remote - SSH: Editing Configuration Files extension to run remotely instead of their defaults:\n\n\"remote.extensionKind\": { \"ms-azuretools.vscode-docker\": [ \"ui\" ], \"ms-vscode-remote.remote-ssh-edit\": [ \"workspace\" ] }\n\nA value of \"ui\" instead of \"workspace\" will force the extension to run on the local UI/client side instead. Typically, this should only be used for testing unless otherwise noted in the extension's documentation since it can break extensions. See the article on Supporting Remote Development for details.\n\nForwarding a port / creating SSH tunnel\n\nSometimes when developing, you may need to access a port on a remote machine that is not publicly exposed. There are two ways to do this using an SSH tunnel that \"forwards\" the desired remote port to your local machine.\n\nTemporarily forwarding a port\n\nOnce you are connected to a host, if you want to temporarily forward a new port for the duration of the session, select Forward a Port from the Command Palette (F1, ⇧⌘P (Windows, Linux Ctrl+Shift+P)) or select the Add Port button in the Ports view. You can see the Ports view in the bottom panel, or by running the command Ports: Focus on Ports View.\n\nYou'll be asked to enter the port you would like to forward and you can give it a name.\n\nA notification will tell you the localhost port you should use to access the remote port. For example, if you forwarded an HTTP server listening on port 3000, the notification may tell you that it was mapped to port 4123 on localhost since 3000 was already in use. You can then connect to this remote HTTP server using http://localhost:4123.\n\nThis same information is available in the Forwarded Ports section of the Remote Explorer if you need to access it later.\n\nIf you would like VS Code to remember any ports you have forwarded, check Remote: Restore Forwarded Ports in the Settings editor (⌘, (Windows, Linux Ctrl+,)) or set \"remote.restoreForwardedPorts\": true in settings.json.\n\nChange local port on tunnel\n\nIf you would like the local port of the tunnel to be different than the remote server's, you can change this via the Forwarded Ports panel.\n\nRight-click the tunnel you want to modify, and select Change Local Address Port in the context menu.\n\nAlways forwarding a port\n\nIf you have ports that you always want to forward, you can use the LocalForward directive in the same SSH config file you use to remember hosts and advanced settings.\n\nFor example, if you wanted to forward ports 3000 and 27017, you could update the file as follows:\n\nHost remote-linux-machine User myuser HostName remote-linux-machine.mydomain LocalForward127.0.0.1:3000127.0.0.1:3000 LocalForward127.0.0.1:27017127.0.0.1:27017\n\nOpening a terminal on a remote host\n\nOpening a terminal on the remote host from VS Code is simple. Once connected, any terminal window you open in VS Code (Terminal > New Terminal) will automatically run on the remote host rather than locally.\n\nYou can also use the code command line from this same terminal window to perform a number of operations such as opening a new file or folder on the remote host. Type code --help to see all the options available from the command line.\n\nDebugging on the SSH host\n\nOnce you are connected to a remote host, you can use VS Code's debugger in the same way you would when running the application locally. For example, if you select a launch configuration in launch.json and start debugging (F5), the application will start on remote host and attach the debugger to it.\n\nSee the debugging documentation for details on configuring VS Code's debugging features in .vscode/launch.json.\n\nSSH host-specific settings\n\nVS Code's local User settings are also reused when you are connected to an SSH host. While this keeps your user experience consistent, you may want to vary some of these settings between your local machine and each host. Fortunately, once you have connected to a host, you can also set host-specific settings by running the Preferences: Open Remote Settings command from the Command Palette (F1, ⇧⌘P (Windows, Linux Ctrl+Shift+P)) or by selecting on the Remote tab in the Settings editor. These will override any User settings you have in place whenever you connect to the host. And Workspace settings will override Remote and User settings.\n\nThe Remote - SSH extension does not provide direct support for sync'ing source code or using local tools with content on a remote host. However, there are two ways to do this using common tools that will work with most Linux hosts. Specifically, you can:\n\nMount the remote filesystem using SSHFS.\n\nSync files to/from the remote host to your local machine using rsync.\n\nSSHFS is the most convenient option and does not require any file sync'ing. However, performance will be significantly slower than working through VS Code, so it is best used for single file edits and uploading/downloading content. If you need to use an application that bulk reads/write to many files at once (like a local source control tool), rsync is a better choice.\n\nKnown limitations\n\nRemote - SSH limitations\n\nUsing key based authentication is recommended. Passwords and other tokens entered for alternate authentication methods are not saved.\n\nAlpine Linux and non-glibc based Linux SSH hosts are not supported.\n\nOlder (community supported) Linux distributions require workarounds to install the needed prerequisites.\n\nPuTTY is not supported on Windows.\n\nIf you clone a Git repository using SSH and your SSH key has a passphrase, VS Code's pull and sync features may hang when running remotely. Either use an SSH key without a passphrase, clone using HTTPS, or run git push from the command line to work around the issue.\n\nLocal proxy settings are not reused on the remote host, which can prevent extensions from working unless the appropriate proxy information is configured on the remote host (for example global HTTP_PROXY or HTTPS_PROXY environment variables with the appropriate proxy information).\n\nSee here for a list of active issues related to SSH.\n\nDocker Extension limitations\n\nIf you are using the Docker or Kubernetes extension in a Remote - SSH window, you will not be able to use the right-click Attach VS Code to Container option. This will only work if you are using it from your local machine.\n\nExtension limitations\n\nMany extensions will work on remote SSH hosts without modification. However, in some cases, certain features may require changes. If you run into an extension issue, there is a summary of common problems and solutions that you can mention to the extension author when reporting the issue.\n\nIn addition, some extensions installed on ARMv7l (AArch32) / ARMv8l (AArch64) devices may not work due to native modules or runtimes in the extension that only support x86_64. In these cases, the extensions would need to opt-in to supporting these platforms by compiling / including binaries for ARMv7l / ARMv8l.\n\nCommon questions\n\nHow do I set up an SSH client on ...?\n\nSee Installing a supported SSH client for details.\n\nHow do I set up an SSH server on ...?\n\nSee Installing a supported SSH server for details on setting up an SSH server for your host.\n\nCan I sign in to my SSH server with another/additional authentication mechanism like a password?\n\nYes, you should be prompted to enter your token or password automatically. However, passwords are not saved, so using key based authentication is typically more convenient.\n\nHow do I fix SSH errors about \"bad permissions\"?\n\nSee Fixing SSH file permission errors for details on resolving these types of errors.\n\nWhat Linux packages / libraries need to be installed on remote SSH hosts?\n\nMost Linux distributions will not require additional dependency installation steps. For SSH, Linux hosts need to have Bash (/bin/bash), tar, and either curl or wget installed and those utilities could be missing from certain stripped down distributions. Remote Development also requires kernel >= 3.10, glibc >=2.17, libstdc++ >= 3.4.18. Only glibc-based distributions are supported currently, so by extension Alpine Linux is not supported.\n\nSee Linux Prerequisites for details.\n\nWhat are the connectivity requirements for the VS Code Server when it is running on a remote machine / VM?\n\nInstallation of VS Code Server requires that your local machine has outbound HTTPS (port 443) connectivity to:\n\nupdate.code.visualstudio.com\n\nvscode.blob.core.windows.net\n\n*.vo.msecnd.net (Azure CDN)\n\nBy default, the Remote - SSH will attempt to download on the remote host, but if you enable remote.SSH.allowLocalServerDownload, the extension will fall back to downloading VS Code Server locally and transferring it remotely once a connection is established.\n\nYou can install extensions manually without an internet connection using the Extensions: Install from VSIX... command, but if you use the extension panel to install extensions, your local machine and VS Code Server server will need outbound HTTPS (port 443) access to:\n\nmarketplace.visualstudio.com\n\n*.vo.msecnd.net (Azure CDN)\n\n*.gallerycdn.vsassets.io (Azure CDN)\n\nFinally, some extensions (like C#) download secondary dependencies from download.microsoft.com or download.visualstudio.microsoft.com. Others (like Visual Studio Live Share) may have additional connectivity requirements. Consult the extension's documentation for details if you run into trouble.\n\nAll other communication between the server and the VS Code client is accomplished through the authenticated, secure SSH tunnel.\n\nYes. Typically this is done using SSHFS or by using rsync to get a copy of the files on your local machine. SSHFS mounts the remote filesystem is ideal for scenarios where you need to edit individual files or browse the source tree and requires no sync step to use. However, it is not ideal for using something like a source control tool that bulk manages files. In this case, the rsync approach is better since you get a complete copy of the remote source code on your local machine. See Tips and Tricks for details.\n\nCan I use VS Code when I only have SFTP/FTP filesystem access to my remote host (no shell access)?\n\nSome cloud platforms only provide remote filesystem access for developers rather than direct shell access. VS Code Remote Development was not designed with this use case in mind since it negates the performance and user experience benefits.\n\nHowever, this use case can typically be handled by combining extensions like SFTP with remote debugging features for Node.js, Python, C#, or others.\n\nAs an extension author, what do I need to do?\n\nThe VS Code extension API abstracts away local/remote details so most extensions will work without modification. However, given extensions can use any node module or runtime they want, there are situations where adjustments may need to be made. We recommend you test your extension to be sure that no updates are required. See Supporting Remote Development for details.\n\nQuestions or feedback"
    }
}