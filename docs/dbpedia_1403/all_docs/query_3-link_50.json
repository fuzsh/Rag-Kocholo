{
    "id": "dbpedia_1403_3",
    "rank": 50,
    "data": {
        "url": "https://developer.android.com/develop/ui/views/notifications",
        "read_more_link": "",
        "language": "en",
        "title": "Notifications overview",
        "top_image": "https://developer.android.com/static/images/android-7.0/notifications-card.png",
        "meta_img": "https://developer.android.com/static/images/android-7.0/notifications-card.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/lockup.svg",
            "https://developer.android.com/static/images/ui/notifications/notification-area_2x.png",
            "https://developer.android.com/static/images/ui/notifications/notification-drawer_2x.png",
            "https://developer.android.com/static/images/ui/notifications/heads-up_2x.png",
            "https://developer.android.com/static/images/ui/notifications/lock-screen_2x.png",
            "https://developer.android.com/static/images/ui/notifications/badges-open_2x.png",
            "https://developer.android.com/static/images/ui/notifications/wear_2x.png",
            "https://developer.android.com/static/images/ui/notifications/notification-callouts_2x.png",
            "https://developer.android.com/static/images/ui/notifications/notification-actions_2x.png",
            "https://developer.android.com/static/images/ui/notifications/notification-expanded_2x.png",
            "https://developer.android.com/static/images/ui/notifications/notification-group_2x.png",
            "https://developer.android.com/static/images/ui/notifications/channel-settings_2x.png",
            "https://developer.android.com/static/images/ui/notifications/channel-alert-levels_2x.png",
            "https://developer.android.com/static/images/ui/notifications/do-not-disturb-filter-settings_2x.png",
            "https://developer.android.com/_static/android/images/logo-x.svg",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png",
            "https://developer.android.com/_static/android/images/logo-linkedin.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/favicon.svg",
        "meta_site_name": "Android Developers",
        "canonical_link": "https://developer.android.com/develop/ui/views/notifications",
        "text": "A notification is a message that Android displays outside your app's UI to provide the user with reminders, communication from other people, or other timely information from your app. Users can tap the notification to open your app or take an action directly from the notification.\n\nThis page provides an overview of where notifications appear and the available features. To start building notifications, read Create a notification.\n\nFor more information about notification design and interaction patterns, see the Notifications design guide.\n\nAppearances on a device\n\nNotifications automatically appear to users in different locations and formats. A notification appears as an icon in the status bar, a more detailed entry in the notification drawer, and a badge on the app's icon. Notifications also appear on paired wearables.\n\nStatus bar and notification drawer\n\nWhen you issue a notification, it first appears as an icon in the status bar.\n\nFigure 1. Notification icons appear on the left side of the status bar.\n\nUsers can swipe down on the status bar to open the notification drawer, where they can view more details and take actions with the notification.\n\nFigure 2. Notifications in the notification drawer.\n\nUsers can drag down on a notification in the drawer to reveal the expanded view, which shows additional content and action buttons, if provided. Starting in Android 13, this expanded view includes a button that lets users stop an app that has ongoing foreground services.\n\nA notification remains visible in the notification drawer until it's dismissed by the app or user.\n\nHeads-up notification\n\nBeginning with Android 5.0, notifications can briefly appear in a floating window called a heads-up notification. This behavior is normally for important notifications that the user needs to know about immediately, and it only appears if the device is unlocked.\n\nFigure 3. A heads-up notification appears in front of the foreground app.\n\nThe heads-up notification appears when your app issues the notification. It disappears after a moment, but it remains visible in the notification drawer as usual.\n\nConditions that might trigger heads-up notifications include the following:\n\nThe user's activity is in fullscreen mode, such as when the app uses fullScreenIntent.\n\nThe notification has high priority and uses ringtones or vibrations on devices running Android 7.1 (API level 25) and lower.\n\nThe notification channel has high importance on devices running Android 8.0 (API level 26) and higher.\n\nLock screen\n\nBeginning with Android 5.0, notifications can appear on the lock screen.\n\nYou can programmatically set whether notifications posted by your app show on a secure lock screen and, if so, the level of detail visible.\n\nUsers can use the system settings to choose the level of detail visible in lock screen notifications or to disable all lock screen notifications. Starting with Android 8.0, users can disable or enable lock screen notifications for each notification channel.\n\nFigure 4. Notifications on the lock screen with sensitive content hidden.\n\nTo learn more, see Set lock screen visibility.\n\nApp icon badge\n\nIn supported launchers on devices running Android 8.0 (API level 26) and higher, app icons indicate new notifications with a colored badge known as a notification dot on the corresponding app launcher icon.\n\nUsers can touch & hold an app icon to see the notifications for that app. Users can dismiss or act on notifications from that menu, similar to the notification drawer.\n\nFigure 5. Notification badges and the touch & hold menu.\n\nTo learn more about how badges work, read Modify a notification badge.\n\nWear OS devices\n\nIf the user has a paired Wear OS device, all your notifications appear there automatically, including expandable detail and action buttons.\n\nYou can enhance the experience by customizing the appearance of your notifications on wearables and by providing different actions, including suggested replies and voice input replies. For more information, see how to add wearable-specific features to your notification.\n\nFigure 6. Notifications automatically appear on a paired Wear OS device.\n\nNotification anatomy\n\nThe design of a notification is determined by system templates, and your app defines the contents for each portion of the template. Some details of the notification appear only in the expanded view.\n\nFigure 7. A notification with basic details.\n\nThe most common parts of a notification are indicated in figure 7, as follows:\n\nSmall icon: required; set using setSmallIcon().\n\nApp name: provided by the system.\n\nTime stamp: provided by the system, but you can override it using setWhen() or hide it using setShowWhen(false).\n\nLarge icon: optional; usually used only for contact photos. Don't use it for your app icon. Set using setLargeIcon().\n\nTitle: optional; set using setContentTitle().\n\nText: optional; set using setContentText().\n\nWe strongly recommend using system templates for proper design compatibility on all devices. If necessary, you can create a custom notification layout.\n\nFor more information about how to create a notification with these features and more, read Create a notification.\n\nNotification actions\n\nAlthough it's not required, it's a good practice for every notification to open an appropriate app activity when it's tapped. In addition to this default notification action, you can add action buttons that complete an app-related task from the notification—often without opening an activity—as shown in figure 8.\n\nFigure 8. A notification with action buttons.\n\nStarting in Android 7.0 (API level 24), you can add an action to reply to messages or enter other text directly from the notification.\n\nStarting in Android 10 (API level 29), the platform can automatically generate action buttons with suggested intent-based actions.\n\nAdding action buttons is explained further in Create a notification.\n\nRequire an unlocked device\n\nUsers might see notification actions on the device's lock screen. If a notification action causes an app to launch an activity or send a direct reply, users must unlock the device before the app can invoke that notification action.\n\nOn Android 12 (API level 31) and higher, you can configure a notification action such that the device must be unlocked for your app to invoke that action, no matter what workflow the action launches. This option adds an extra layer of security to notifications on locked devices.\n\nTo require a device to be unlocked before your app invokes a given notification action, pass true into setAuthenticationRequired() when creating your notification action, as shown in the following code snippet:\n\nExpandable notification\n\nBy default, the notification's text content is truncated to fit on one line. If you want your notification to be longer, you can enable a larger text area that's expandable by applying an additional template, as shown in figure 9.\n\nFigure 9. An expandable notification for large text.\n\nYou can also create an expandable notification with an image, in inbox style, with a chat conversation, or with media playback controls. For more information, read Create an expandable notification.\n\nNotification updates and groups\n\nTo avoid flooding your users with multiple or redundant notifications when you have additional updates, update an existing notification rather than issuing a new one or use the inbox-style notification to show conversation updates.\n\nHowever, if it's necessary to deliver multiple notifications, consider grouping the separate notifications into a group, available on Android 7.0 and higher.\n\nA notification group lets you collapse multiple notifications into one post in the notification drawer with a summary. The user can progressively expand the notification group and each notification within it for more details, as shown in figure 10.\n\nFigure 10. A collapsed and expanded notification group.\n\nTo learn how to add notifications to a group, see Create a group of notifications.\n\nNotification channels\n\nStarting in Android 8.0 (API level 26), all notifications must be assigned to a channel or they don't appear. This lets users disable specific notification channels for your app instead of disabling all your notifications. Users can control the visual and auditory options for each channel from the Android system settings, as shown in figure 11. Users can also touch & hold a notification to change behaviors for the associated channel.\n\nOn devices running Android 7.1 (API level 25) and lower, users can manage notifications on a per-app basis only. Each app effectively has only one channel on Android 7.1 and lower.\n\nFigure 11. Notification settings for the Clock app and one of its channels.\n\nAn app can have separate channels for each type of notification the app issues. An app can also create notification channels in response to choices made by users. For example, you can set up separate notification channels for each conversation group created by a user in a messaging app.\n\nThe channel is also where you specify the importance level for your notifications on Android 8.0 and higher, so all notifications posted to the same notification channel have the same behavior. This is described in the following section.\n\nFor more information, see Create and manage notification channels.\n\nNotification importance\n\nAndroid uses the importance of a notification to determine how much the notification interrupts the user visually and audibly. The higher the importance of a notification, the more interruptive the notification is.\n\nOn Android 7.1 (API level 25) and lower, the importance of a notification is determined by the notification's priority.\n\nOn Android 8.0 (API level 26) and higher, the importance of a notification is determined by the importance of the channel the notification is posted to. Users can change the importance of a notification channel in the system settings, as shown in figure 12.\n\nFigure 12. Users can change the importance of each channel on Android 8.0 and higher.\n\nThe possible importance levels and the associated notification behaviors are the following:\n\nUrgent: makes a sound and appears as a heads-up notification.\n\nHigh: makes a sound.\n\nMedium: makes no sound.\n\nLow: makes no sound and doesn't appear in the status bar.\n\nAll notifications, regardless of importance, appear in non-interruptive system UI locations, such as in the notification drawer and as a badge on the launcher icon. However, you can modify the appearance of the notification badge.\n\nFor more information, read about how to set the importance.\n\nDo Not Disturb mode\n\nStarting in Android 5.0 (API level 21), users can enable Do Not Disturb mode, which silences sound and vibration for all notifications. Notifications still appear in the system UI as normal, unless the user specifies otherwise.\n\nThere are three levels available in Do Not Disturb mode:\n\nTotal silence: blocks all sounds and vibrations, including from alarms, music, videos, and games.\n\nAlarms only: blocks all sounds and vibrations, except from alarms.\n\nPriority only: users can configure which system-wide categories can interrupt them, such as only alarms, reminders, events, calls, or messages. For messages and calls, users can filter based on sender or caller, as shown in figure 13.\n\nFigure 13. Users can can allow notifications through based on system-wide categories (left) and sender or caller (right).\n\nOn Android 8.0 (API level 26) and higher, users can additionally allow notifications through for app-specific categories—also known as channels—by overriding Do Not Disturb on a channel-by-channel basis. For example, a payment app might have channels for notifications related to withdrawals and deposits. The user can allow withdrawal notifications, deposit notifications, or both when in priority mode.\n\nOn devices running Android 7.1 (API level 25) and lower, users can allow notifications through on an app-by-app basis, rather than on a channel-by-channel basis.\n\nTo configure your notifications for these user settings, you must set a system-wide category.\n\nNotifications for foreground services\n\nA notification is required when your app is running a foreground service—a Service running in the background that's long-living and noticeable to the user, such as a media player. This notification can't be dismissed like other notifications. To remove the notification, the service must be stopped or removed from the foreground state.\n\nFor more information, read Foreground services. If you are building a media player, also read Playing media in the background.\n\nPost limits\n\nBeginning with Android 8.1 (API level 27), apps can't make a notification sound more than once per second. If your app posts multiple notifications in one second, they all appear as expected, but only the first notification per second makes a sound.\n\nHowever, Android also applies a rate limit when updating a notification. If you post updates to a single notification too frequently, such as many in less than one second, the system might drop updates.\n\nNotification compatibility\n\nThe Android notification system UI and the notification-related APIs continually evolve. To use the latest notification API features while supporting older devices, use the Support Library notification API, NotificationCompat, and its subclasses, as well as NotificationManagerCompat. This lets you avoid writing conditional code to check API levels, because these APIs handle it.\n\nNotificationCompat is updated as the platform evolves to include the latest methods. However, the availability of a method in NotificationCompat doesn't guarantee that the corresponding feature is provided on older devices. In some cases, calling a newly introduced API results in a no-op on older devices.\n\nThe following is a summary of the most notable behavior changes by API level for Android notifications.\n\nAndroid 5.0, API level 21\n\nIntroduces lock screen and heads-up notifications.\n\nLets the user set the phone to Do Not Disturb mode and configure which notifications are allowed to interrupt them when the device is in priority-only mode.\n\nAdds methods to set whether a notification is displayed on the lock screen, such as setVisibility()), and for specifying a “public” version of the notification text.\n\nAdds setPriority() method, which tells the system how interruptive the notification is. For example, setting the priority to high makes the notification appear as a heads-up notification.\n\nAdds notification stacks support to Android Wear (now called Wear OS) devices. Put notifications into a stack using setGroup(). Notification stacks, later known as a group or bundle, aren't supported on tablets or phones until Android 7.0 (API level 24).\n\nAndroid 7.0, API level 24\n\nRestyles notification templates to put emphasis on the hero image and avatar.\n\nAdds three notification templates: one for messaging apps and the other two for decorating custom content views with the expandable affordance and other system decorations.\n\nAdds support to handheld devices, such as phones and tablets, for notification groups. Uses the same API as the Android Wear (now called Wear OS) notification stacks introduced in Android 5.0 (API level 21).\n\nLets users reply inside a notification using inline reply. They can enter text, which is then routed to the notification's parent app.\n\nAndroid 8.0, API level 26\n\nMakes individual notifications be put in a specific channel.\n\nLets users turn off notifications per channel, instead of turning off all notifications from an app.\n\nMakes apps with active notifications display a notification badge on top of their app icon on the home or launcher screen.\n\nLets users snooze a notification from the drawer. You can set an automatic timeout for a notification.\n\nLets you set the notification's background color.\n\nMoves some APIs regarding notification behaviors from Notification to NotificationChannel. For example, use NotificationChannel.setImportance() instead of NotificationCompat.Builder.setPriority() for Android 8.0 and higher.\n\nAndroid 13.0, API level 33\n\nAdds runtime permission. For your app to send non-exempt notifications, the user must grant this permission to your app.\n\nAndroid 14.0, API level 34\n\nLimits full-screen intent notifications to apps that provide calls and alarms. Use the NotificationManager.canUseFullScreenIntent API to check if your app has permission. If not, your app can use ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT to launch the settings page where users can grant the permission.\n\nChanges the way users experience non-dismissable notifications by allowing users to dismiss notifications action even when the Notification.FLAG_ONGOING_EVENT flag is set. This doesn't apply to CallStyle notifications if the Notification.FLAG_ONGOING_EVENT flag is set or Device policy controller (DPC) and supporting packages for enterprise. This also does not apply when the phone is locked, or if the user selects Clear all."
    }
}