{
    "id": "dbpedia_1403_3",
    "rank": 89,
    "data": {
        "url": "https://developer.android.com/studio/intro/update",
        "read_more_link": "",
        "language": "en",
        "title": "Update the IDE and SDK tools",
        "top_image": "https://developer.android.com/static/images/social/android-developers.png",
        "meta_img": "https://developer.android.com/static/images/social/android-developers.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/lockup.svg",
            "https://developer.android.com/static/studio/images/jetbrains-toolbox_2x.png",
            "https://developer.android.com/static/studio/images/preferences-updates_2x.png",
            "https://developer.android.com/static/studio/images/intro/delete-unused-directories-dialog-2x.png",
            "https://developer.android.com/static/studio/images/buttons/toolbar-sdk-manager.png",
            "https://developer.android.com/static/studio/images/sdk-manager-icon-update_2-0_2x.png",
            "https://developer.android.com/static/images/tools/studio-sdk-dwnld-icon.png",
            "https://developer.android.com/static/images/tools/studio-sdk-removal-icon.png",
            "https://developer.android.com/static/studio/images/sdk-manager-tools_2x.png",
            "https://developer.android.com/static/studio/images/buttons/ic_plus.png",
            "https://developer.android.com/_static/android/images/logo-x.svg",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png",
            "https://developer.android.com/_static/android/images/logo-linkedin.svg",
            "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Once you install Android Studio, it's easy to keep the Android Studio IDE and Android SDK tools up to date with automatic updates and the Android SDK Manager.",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/vc7080045e84cd2ce1faf7f7a3876037748d52d088e5100df2e949d051a784791/android/images/favicon.svg",
        "meta_site_name": "Android Developers",
        "canonical_link": "https://developer.android.com/studio/intro/update",
        "text": "Android Emulator\n\nA QEMU-based device-emulation tool that you can use to debug and test your applications in an actual Android runtime environment. For more details, see the Emulator release notes.\n\nNote: Most API libraries that were previously provided by the Support Repository packages (such as the Android Support Library, Constraint Layout, Google Play services, and Firebase) are now available from Google's Maven repository. Projects created with Android Studio 3.0 and higher automatically include this repository in the build configuration. If you're using an older project, you must manually add Google's Maven repository to your build.gradle or build.gradle.kts file.\n\nIntel or ARM System Images\n\nThe system image is required to run the Android Emulator. Each platform version contains the supported system images. You can also download system images later when creating Android Virtual Devices (AVDs) in the AVD Manager. Select either Intel or ARM based on your development computer's processor.\n\nGoogle Play services\n\nIncludes a set of libraries, Javadocs, and samples to help build your app. If you want to use APIs from Google Play services, you must use either the Google APIs system image or the Google play system image.\n\nThe preceding list is not comprehensive, and you can add other sites to download additional packages from third parties, as described in the following section.\n\nIn some cases, an SDK package might require a specific minimum revision of another tool. If so, the SDK Manager notifies you with a warning and adds the dependencies to your list of downloads.\n\nEdit or add SDK tool sites\n\nUnder the SDK Update Sites tab, you can add and manage other sites that host their own tools, and then download the packages from those sites. Android Studio checks for Android tools and third-party tool updates from the SDK sites you add.\n\nFor example, a mobile carrier or device manufacturer might offer additional API libraries that are supported by their own Android-powered devices. To develop using their libraries, you can install their Android SDK package by adding their SDK tools URL to the SDK Manager in the SDK Update Sites tab.\n\nIf a carrier or device manufacturer has hosted an SDK add-on repository file on their website, follow these steps to add the site to the Android SDK Manager:\n\nClick the SDK Update Sites tab.\n\nClick Add at the top of the window.\n\nEnter the name and URL of the third-party site, then click OK.\n\nMake sure the checkbox is selected in the Enabled column.\n\nClick Apply or OK.\n\nAny SDK packages available from the site now appear in the SDK Platforms or SDK Tools tabs, as appropriate.\n\nAuto-download missing packages with Gradle\n\nWhen you run a build from the command line or Android Studio, Gradle can automatically download missing SDK packages that a project depends on, as long as the corresponding SDK license agreements have already been accepted in the SDK Manager.\n\nWhen you accept the license agreements using the SDK Manager, Android Studio creates a licenses directory inside the SDK home directory. This licenses directory is necessary for Gradle to auto-download missing packages.\n\nIf you have accepted the license agreements on one workstation but want to build your projects on a different one, you can export your licenses by copying over the accepted licenses directory.\n\nTo copy the licenses to another machine, follow these steps:\n\nOn a machine with Android Studio installed, click Tools > SDK Manager. At the top of the window, note the Android SDK Location.\n\nNavigate to that directory and locate the licenses/ directory inside it.\n\nIf you don't see a licenses/ directory, return to Android Studio, update your SDK tools, and accept the license agreements. When you return to the Android SDK home directory, you should see the directory.\n\nCopy the entire licenses/ directory and paste it into the Android SDK home directory on the machine where you want to build your projects.\n\nGradle can now automatically download missing packages your project depends on.\n\nNote that this feature is automatically disabled for builds you run from Android Studio, as the SDK manager handles downloading missing packages for the IDE. To manually disable this feature, set android.builder.sdkDownload=false in the gradle.properties file for your project.\n\nUpdate your tools with the command line\n\nOn systems that don't have a graphical UI, such as CI servers, you can't use the SDK Manager in Android Studio. Instead, use the sdkmanager command-line tool to install and update SDK tools and platforms.\n\nAfter installing SDK tools and platforms using sdkmanager, you might need to accept any missing licenses. This can also be done using sdkmanager:\n\n$ sdkmanager --licenses\n\nThis command scans all of the installed SDK tools and platforms and displays any licenses that have not been accepted. You are prompted to accept each license."
    }
}