{
    "id": "dbpedia_1403_2",
    "rank": 51,
    "data": {
        "url": "https://unboxing-tomorrow.com/programming-atmel-microcontrollers-with-atmel-studio-7/",
        "read_more_link": "",
        "language": "en",
        "title": "Programming AVR Microcontrollers with Atmel Studio 7",
        "top_image": "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AVR-Thumbnail-CSplash-853x480-1.jpg?fit=853%2C480&ssl=1",
        "meta_img": "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AVR-Thumbnail-CSplash-853x480-1.jpg?fit=853%2C480&ssl=1",
        "images": [
            "https://unboxing-tomorrow.com/wp-content/uploads/2019/10/UnboxingTomorrowLogo2019_WordpressLogo272x90.png",
            "https://unboxing-tomorrow.com/wp-content/uploads/2019/10/UnboxingTomorrowLogo2019_WordpressLogo272x90.png",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/06/vxml20230627-pine-phone-with-wikipedia-leds-compress-1280x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/vxml20221225-pine-phone-pine64-packed-720p.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/PinePhone_Beta_Edition-MODIFIED-for-white-background.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/vxml20221226-chat-gpt-thumbnail-packed-853x480-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/08/vxml20220818-pine-phone-beta-color-gamut.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/11/pexels-thisisengineering-3912373.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/05/Kicad-Series-Thumbnail-for-texts-720x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/06/vxml20230627-pine-phone-with-wikipedia-leds-compress-1280x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/05/Kicad-Series-Thumbnail-for-texts-720x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/06/vxml20230627-pine-phone-with-wikipedia-leds-compress-1280x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/05/vxml20230518-pine-phone-200-days-later-thumbnail-1280x720-compressed.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/vxml20221225-pine-phone-pine64-packed-720p.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/PinePhone_Beta_Edition-MODIFIED-for-white-background.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/09/vxml202209234-arduino-leonard-with-mirror-cube-800x480-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AVR-Thumbnail-CSplash-853x480-1.jpg?resize=696%2C392&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML202020708-ATTiny2313.jpg?resize=407%2C228&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200707-SchSimplified.png?resize=696%2C473&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2021/11/TorGuard-black-bg.jpg?fit=752%2C191&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2021/11/20210707060115-T1TT_banner_468x60_3-2.png?fit=468%2C60&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AtmelStudioInstallerOptions.png?resize=696%2C453&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-InstallerExecutable.png?resize=288%2C92&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AtmelStudio7Architecture.png?resize=317%2C423&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ASF-Options.png?resize=311%2C415&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-CheckForFavorableConditions.png?resize=320%2C427&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-InstallationTipForAS7.png?resize=411%2C127&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-PartialInstallation-1.png?resize=428%2C307&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-VisualStudioIsoShell.png?resize=460%2C318&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-InstallationComplete.png?resize=450%2C600&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AtmelStudio7StartPage.png?resize=696%2C395&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AS7-SelectLanguage.png?resize=696%2C354&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-AS7-SelectDevice.png?resize=696%2C320&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-DefaultMainDotC.png?resize=350%2C185&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-SimpliedSchematicAnnotated.png?resize=696%2C363&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-SuccessfulBuildInAS7.png?resize=555%2C55&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ISP-Interconnect.png?resize=696%2C59&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ISP-Vision-Workbench.png?resize=696%2C414&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ISP-Connector-small.jpg?resize=422%2C237&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ISP-Connector-Pin1-Marking.png?resize=473%2C320&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-DeviceDebuggerLocation.png?resize=696%2C428&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-HardwareLevelChecks.png?resize=696%2C568&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ReturningToMainC.png?resize=696%2C540&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-HardwareLevelErrors.png?resize=305%2C105&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-LED-Blink-853x480-2.jpg?resize=696%2C392&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-ApplyReadRead.png?resize=696%2C553&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-LaunchFailed.png?resize=477%2C262&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2020/07/VOXML20200708-DeviceSignatureRetreival.png?resize=696%2C466&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/11/pexels-thisisengineering-3912373.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/05/Kicad-Series-Thumbnail-for-texts-720x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/06/vxml20230627-pine-phone-with-wikipedia-leds-compress-1280x720-1.jpg?resize=218%2C150&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2019/10/VOX-20191005-UnboxingTomorrowSynopsis800x450.jpg?fit=300%2C169&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2021/11/TorGuard_Logo_2.png?fit=300%2C250&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2021/11/Digital-Patreon-Wordmark_WhiteOnFieryCoral-Sm.jpg?fit=1200%2C600&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/08/buymeacoffee-logo.jpg?fit=480%2C480&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2023/06/vxml20230627-pine-phone-with-wikipedia-leds-compress-1280x720-1.jpg?resize=100%2C70&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/vxml20221225-pine-phone-pine64-packed-720p.jpg?resize=100%2C70&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2022/12/PinePhone_Beta_Edition-MODIFIED-for-white-background.jpg?resize=100%2C70&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2019/09/ROK-201909022019-IntelMuseamColorSplash800x560.jpg?resize=100%2C70&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2019/09/ROK-201909021726-DriveWorldConferenceColorSplash800x600.jpg?resize=100%2C70&ssl=1",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2019/09/ROK-20190901-AntiStaticBagV2ColorSplash800x600.jpg?resize=100%2C70&ssl=1",
            "https://unboxing-tomorrow.com/wp-content/uploads/2019/09/UnboxingTomorrowLogo2019_WordpressLogo272x90.png",
            "https://i0.wp.com/unboxing-tomorrow.com/wp-content/uploads/2021/08/VXML20210815-AVR-Coded.jpg?resize=324%2C160&ssl=1"
        ],
        "movies": [
            "https://www.youtube.com/embed/3JjgeZdt3pc?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en-US&autohide=2&wmode=transparent"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2020-07-09T00:32:19+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://unboxing-tomorrow.com/wp-content/uploads/2022/08/VoxidyneLogo_20191129_57x57.png",
        "meta_site_name": "",
        "canonical_link": "https://unboxing-tomorrow.com/programming-atmel-microcontrollers-with-atmel-studio-7/",
        "text": "Inexpensive microcontrollers have seen a resurgence thanks to the internet of things (IoT) and wearable devices. These end-uses depend on parts that have low costs rather than record-breaking speed. Because of this, devices like the Atmel AVR series have enjoyed decades of popularity.\n\nAny software we develop for these devices eventually needs to go from being an abstract idea, to being software stored inside the device’s flash memory. This walkthrough will do exactly that using a program called Atmel Studio 7.\n\nNotice of Non-Affiliation and Disclaimer: As of the publication date, we are not affiliated with, associated with, authorized with, endorsed by, compensated by, or in any way officially connected with Microchip Technology Inc., Arduino, or Microsoft, or their owners, subsidiaries or affiliates.\n\nThe names Microchip Technology Inc., Arduino, and Microsoft, as well as related names, marks, emblems, and images are trademarks of their respective owners.\n\nExternal Links: Links to external web pages have been provided as a convenience and for informational purposes only. Unboxing Tomorrow and Voxidyne Media bear no responsibility for the accuracy, legality or content of the external site or for that of subsequent links. Contact the external site for answers to questions regarding its content.\n\nObjectives\n\nThe circuit board in Figure 1 below is the custom part of a machine vision side-project going on here at Unboxing Tomorrow. On the circuit board is an ATTiny2313-20SU microcontroller. As part of the AVR family, the ATTiny2313 is a low-cost, 8-bit microcontroller unit (MCU) made by the Atmel Corporation and its parent company: Microchip Technology.\n\nBecause the chip arrives in a blank state, we need to download the Atmel Studio 7 application to a laptop, and then write a program in C to blink a test LED on the circuit board. Additionally, we will use a hardware programming device to perform In-System Programming (ISP) on the chip.\n\nFor now, today’s objectives are simple:\n\nDownload Atmel Studio 7\n\nWrite a C program to blink a test LED on the custom circuit board\n\nUse the ISP Programmer to upload the C program from a laptop to the actual chip\n\nThis schematic below is a simplified version of the custom circuit board. Our code will be uploaded through a 6-pin ISP connector, where it will eventually blink an LED attached to port B pin 4 (PB4).\n\nMaterial Requirements\n\nAs usual, I recommend doing any assembly work at an anti-static workstation if you can.\n\nWindows 10 Computer\n\nATTiny2313 (or other AVR microcontroller)\n\nMicrochip/Atmel AVRISP mkII or similar ISP programmer with matching USB cable\n\nISP Programmer Device\n\nThis tutorial will focus on the Atmel/Microchip AVRISP mkII (also called AVRISP “mark 2”). But I should note that this is an older device that is difficult to find as of the year 2020. But you can find newer ISP devices from Microchip that work very much like the AVRISP mkII.\n\nSoftware Requirements\n\nWe will also be installing a program from Microchip called Atmel Studio 7. While there is other software available for programming AVR microcontrollers, Atmel Studio 7 is the official integrated development environment (IDE).\n\n(We will install) Atmel Studio 7\n\n(Recommended) Anti-malware software\n\nBack up your Data\n\nYou should back up any important data on your laptop or desktop before you start.\n\nThe Microcontroller will be Erased\n\nThis procedure will erase and replace any programs or bootloaders already stored on your Atmel AVR microcontroller. Replacing these things is a difficult process.\n\nDo not perform the procedure below if your Atmel microcontroller is part of a development kit such as an Arduino. If you do, you will erase the bootloader and your kit will not work.\n\nIf you bought your Atmel microcontroller from a distributor, it is probably already blank and you should be okay to proceed.\n\nDownloading Atmel Studio\n\nThe first step is to visit Microchip Technology’s official website for the Atmel Studio 7 IDE. As of this writing, the direct link is https://www.microchip.com/mplab/avr-support/atmel-studio-7.\n\nI will download the web installer from the official website…\n\nAs with anything you download off the internet, scan it with your favorite anti-malware software. If it looks okay, run the application.\n\nPrior to installation, you should review the end-user license agreement and the installation directory. After you have reviewed them, click Next.\n\nNext, you will be asked to select among the following architectures:\n\nAVR 8-bit MCU\n\nAVR 32-bit MCU\n\nSMART ARM MCU\n\nThis article only depends on the AVR 8-bit MCU, so at minimum, you should count on installing AVR 8-bit MCU. But I will install all three today…\n\nNext, you will be asked about the Atmel Software Framework (ASF) and example projects. In this tutorial, the ASF is optional, but I will install it anyway.\n\nBefore it attempts to install anything, the installer will check for anything that may interfere. This includes any Windows Updates already in progress. If you see anything other than checkmarks, you will need to resolve the problem before you can proceed. Follow any on-screen instructions on how to do this.\n\nIf things look okay, click Next.\n\nNext, the installer will show any special tips that may help your installation.\n\nClick Next, and the installation will begin. Acknowledge any security alerts from Windows unless they look suspicious.\n\nThe system will automatically transition from installing Atmel Studio to installing the Microsoft Visual Studio isolated shell. But stick around to monitor it in case you are asked to approve anything.\n\nAfter several minutes, the installation should complete. Make sure “Launch Atmel Studio 7.0” is checked (☑) so you can start it immediately.\n\nBuilding a C Program\n\nNow that Atmel Studio 7 is installed, launch it.\n\nCreate a New Project\n\nFirst, create a new project by clicking the New Project label on the Start Page. If the start page isn’t visible, you can instead navigate to File –> New Project.\n\nNext, it is time to select the programming language. This project will use the C coding language, so select GNU Compiler Collection C (GCC C). Select C/C++ in the top-left corner first. Then select “GCC C Executable Project.”\n\nBefore you click “OK,” you may want to rename your project or change the location. Today, I will accept the default name of “GccApplication1.”\n\nI also recommend making sure “Create directory for solution” is checked (☑). When you are ready, click “OK.”\n\nNext, you will be asked to select your specific Atmel device. It’s a long list, so you may want to use the search filter on the top-right corner to enter a portion of the device part number.\n\nI am using the ATtiny2313, so that’s what I will select.\n\nCoding Main.c\n\nAtmel Studio 7 will populate the editor field with a very basic main() function…\n\nNow would be a good time to review the simplified schematic…\n\nOnly 3 things matter for now:\n\nCompiling a test program to blink the LED (named OUTPUT_RUN_ID)\n\nConnecting to the Programming Connector\n\nMaking sure Atmel Studio 7 can communicate with the ATTiny2313\n\nUploading the program\n\nWe’ll start by coding main.c…\n\n#define OUTPUT_RUN_ID (4) // The run-indication LED: 0 = LED off, 1 = LED on #define F_CPU 1000000UL // Clock frequency (as unsigned long) #include <avr/io.h> // Recognizes pins, ports, registers, etc. #include <util/delay.h> // Required for _delay_ms function int main(void) { DDRB = (1<<OUTPUT_RUN_ID); // Set run indication LED to output mode while (1) { PORTB |= (1<<OUTPUT_RUN_ID); // LED on _delay_ms(500); // Hold for approx. 500 ms PORTB &= ~(1<<OUTPUT_RUN_ID); // LED off _delay_ms(500); // Hold for approx. 500 ms } }\n\nCode Explanation\n\nAny text located to the right of a “//” is a comment. Comments are optional, but good for our own documentation.\n\n#define OUTPUT_RUN_ID (4)\n\n…Because the LED is connected to the 4th bit of Port B, this line assigns a constant called “OUTPUT_RUN_ID” a decimal value of 4.\n\n#define F_CPU 1000000UL // Clock frequency (as unsigned long)\n\n…This line defines the clock frequency of the ATTiny2313 in megahertz (MHz). By default, the ATTiny2313 contains an internal 8 MHz clock source. That 8 MHz signal will be internally divided by 8 for a final value of 1 MHz. You can disable the divide-by-8 feature if you want, but I will keep it for now.\n\nThe “UL” part is short for “Unsigned Long” integer.\n\n#include <avr/io.h> // Recognizes pins, ports, registers, etc.\n\n#include <util/delay.h> // Required for _delay_ms() function\n\n…These are precompiler directives that reference header files that are included with Atmel Studio 7.\n\nDDRB = (1<<OUTPUT_RUN_ID); // Set the pin for LED to output mode\n\n… This line of code will set the 4th pin of Port B from being an input to being an output. Here, DDRB is short for “Data Direction Register B.” Because OUTPUT_RUN_ID was set to equal 4 earlier, the “<<” operation causes only the 4th bit of DDRB to be set to 1. If you’re wondering where I got the name “DDRB,” it came from Microchip’s official datasheet for the ATTiny2313.\n\nPORTB |= (1<<OUTPUT_RUN_ID); // LED on\n\n…This command will set pin 4 of Port B to +5V (logic = 1). The “|=” operation does this using a bitwise OR of Port B’s previous state.\n\n_delay_ms(500); // Hold for approx. 500 ms\n\n…This line will pause the program for about 500 milliseconds (ms).\n\nPORTB &= ~(1<<OUTPUT_RUN_ID); // LED off\n\n…This line will clear pin 4 of Port B to 0 volts (logic = 0). The “&=” operation does this using a bitwise AND of Port B’s previous state. The “~” symbol performs a bitwise inversion of the binary value for 4.\n\nBuilding the Code\n\nWe can build the code by navigating to: Build à Build Solution.\n\nConnecting the ATTiny2313 to the ISP Programmer\n\nYou can think of the ISP Programmer as a bridge between the Laptop and the ATTiny2313 microcontroller…\n\nHere is how it all looks on a workbench…\n\nTo upload a program, your ISP Programmer will need 6 wires connected to your ATTiny2313…\n\nVTG (usually this is +2.7 volts to +5 volts)\n\nGND (ground)\n\nMOSI\n\nMISO\n\nSCK\n\nRST\n\nYou can review how these wires are connected to the ATTiny2313 microcontroller in Figure 16 above.\n\nFrom Figure 20 above, you can see I have a 6-pin connector. This is where the ISP Programmer will connect to the ATTiny2313. This 6-pin layout is standard with Atmel’s ISP Programmers. If you have trouble figuring out which pin is #1, Atmel/Microchip will often mark pin #1 on their connectors with a triangle or a red wire.\n\nWith all 6 programming signals connected to the ATTiny2313, all we have to do now is:\n\nConnect the ISP Programmer’s USB port to the laptop/desktop\n\nPower on the custom circuit board (which will power on the ATTiny2313)\n\nUpload our C program using the ISP Programmer\n\nUploading the Application\n\nWith the coding and the wiring done, it is time to upload the program we just made. Connect the ISP Programmer to your computer’s USB port if you haven’t already, and make sure your ATTiny2313 is receiving power.\n\nBack in Atmel Studio 7, access Device and Debugger Toolbar Options. This was a hammer-shaped icon with the default label of “None on.”\n\nClicking this area will launch the Debugger (Programming device) dialog.\n\nFirst, select your device as the “Selected debugger/programmer.” If you don’t see it listed, save your project, restart Atmel Studio 7, and then try to find it again.\n\nSecond, select Interface = ISP.\n\nFinally, try the following settings:\n\nISP Clock = 125 kHz or lower\n\nProgramming settings = Erase entire chip\n\nPreserve EEPROM = Checked ☑\n\nKeep timers running in stop mode = Checked ☑\n\nCache all flash memory except = Checked ☑ and blank\n\nWhen you’re done, click the main.c tab at the top to return to the source code.\n\nFrom here, the easiest way to upload the code is to start debugging by pressing the play button (▶).\n\nWithin a few seconds, your LED should be blinking at 1 Hz!\n\nTroubleshooting your Connection\n\nIf your code is not running, navigate to Tools –> Device Programming. This will launch the Device Programming dialog.\n\nIn the Device Programming window, you should be able to click “Apply,” “Read,” and “Read” again without encountering any errors.\n\nIncorrect wiring (including rotating or mirroring the connector) is a common source of problems here. If you are able to hit the “Apply” button without an error, it means you can at least communicate with the ISP Programmer device, which is half the battle.\n\nAs a side note: Windows Device Manager should show your ISP programmer in the “Microchip tools” category.\n\nFor me, a common mistake is connecting the 6-pin connector backward. Luckily, the AVRISP mkII is forgiving of this sort of mistake and didn’t take any damage. But you should double-check all 6 programming wire connections each time.\n\nIf you can read the device ID after adjusting your wiring, you are ready to retry debugging.\n\nClosing Remarks\n\nThe Atmel microcontrollers—including the AVR family—emerged out of the technology boom of the mid 1990’s. These are 8-bit Reduced Instruction Set Computers (RISC). But more importantly, they were one of the first microcontrollers of the modern age to feature on-board flash memory.\n\nBecause of this and its low cost, the series remains relevant today, which is why I’ve chosen it here in the year 2020. Hobbyists, professionals, and educators use these devices extensively, even after Atmel was acquired by former competitor Microchip Technology. So you can definitely expect to see more devices like here in the future.\n\nImportant Notice: This article and its contents (the “Information”) belong to Unboxing-tomorrow.com and Voxidyne Media LLC. No license is granted for the use of it other than for information purposes. No license of any intellectual property rights is granted. The Information is subject to change without notice. The Information supplied is believed to be accurate, but Voxidyne Media LLC assumes no responsibility for its accuracy or completeness, any error in or omission from it or for any use made of it. Liability for loss or damage resulting from any reliance on the Information or use of it (including liability resulting from negligence or where Voxidyne Media LLC was aware of the possibility of such loss or damage arising) is excluded.\n\nReferences"
    }
}