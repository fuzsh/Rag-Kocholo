{
    "id": "dbpedia_8694_3",
    "rank": 81,
    "data": {
        "url": "https://github.com/neo4j-contrib/training-backend/blob/master/setup.cyp",
        "read_more_link": "",
        "language": "en",
        "title": "training-backend/setup.cyp at master · neo4j-contrib/training-backend",
        "top_image": "https://opengraph.githubassets.com/69d8ea8c7271a801ed32cfdde0c34770c0875651e1c2a12ee8111af32a131cc3/neo4j-contrib/training-backend",
        "meta_img": "https://opengraph.githubassets.com/69d8ea8c7271a801ed32cfdde0c34770c0875651e1c2a12ee8111af32a131cc3/neo4j-contrib/training-backend",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Neo4j Training Backend for Online Course with Versal - training-backend/setup.cyp at master · neo4j-contrib/training-backend",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/neo4j-contrib/training-backend/blob/master/setup.cyp",
        "text": "{\n\n\"message\": \"Task: Create a node named Keanu Reeves\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"create\",\n\n\"failMsg\": \"You should create a node with the CREATE command\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"Keanu\",\n\n\"failMsg\": \"You should create a node with the name \\\"Keanu\\\"\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"test\": \"Reeves\",\n\n\"failMsg\": \"You created a node without the last name \\\"Reeves!\\\"\"\n\n}\n\n]\n\n}\n\ndatabase \"lesson1\"\n\nfor simple intro type queries\n\nCREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})\n\nCREATE (Keanu:Person {name:'Keanu Reeves', born:1964})\n\nCREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})\n\nCREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})\n\nCREATE (Hugo:Person {name:'Hugo Weaving', born:1960})\n\nCREATE (AndyW:Person {name:'Andy Wachowski', born:1967})\n\nCREATE (LanaW:Person {name:'Lana Wachowski', born:1965})\n\nCREATE (JoelS:Person {name:'Joel Silver', born:1952})\n\nCREATE (Emil:Person {name:'Emil Eifrem', born:1974})\n\nCREATE\n\n(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),\n\n(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),\n\n(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),\n\n(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),\n\n(Emil)-[:ACTED_IN {roles:['Emil']}]->(TheMatrix),\n\n(AndyW)-[:DIRECTED]->(TheMatrix),\n\n(LanaW)-[:DIRECTED]->(TheMatrix),\n\n(JoelS)-[:PRODUCED]->(TheMatrix)\n\nCREATE (CloudAtlas:Movie {title:'Cloud Atlas', released:2012, tagline:'Everything is connected'})\n\nCREATE (HalleB:Person {name:'Halle Berry', born:1966})\n\nCREATE (JimB:Person {name:'Jim Broadbent', born:1949})\n\nCREATE (TomT:Person {name:'Tom Tykwer', born:1965})\n\nCREATE (TomH:Person {name:'Tom Hanks', born:1956})\n\nCREATE\n\n(TomH)-[:ACTED_IN {roles:['Zachry', 'Dr. Henry Goose', 'Isaac Sachs', 'Dermot Hoggins']}]->(CloudAtlas),\n\n(Hugo)-[:ACTED_IN {roles:['Bill Smoke', 'Haskell Moore', 'Tadeusz Kesselring', 'Nurse Noakes', 'Boardman Mephi', 'Old Georgie']}]->(CloudAtlas),\n\n(HalleB)-[:ACTED_IN {roles:['Luisa Rey', 'Jocasta Ayrs', 'Ovid', 'Meronym']}]->(CloudAtlas),\n\n(JimB)-[:ACTED_IN {roles:['Vyvyan Ayrs', 'Captain Molyneux', 'Timothy Cavendish']}]->(CloudAtlas),\n\n(TomT)-[:DIRECTED]->(CloudAtlas),\n\n(AndyW)-[:DIRECTED]->(CloudAtlas),\n\n(LanaW)-[:DIRECTED]->(CloudAtlas)\n\nmystic-river = lesson1 +\n\nCREATE (m:Movie {title: 'Mystic River',tagline:'We bury our sins here, Dave. We wash them clean.',released:2003})\n\ntasks\n\n{\n\n\"message\": \"Run the simple queries you've just learned\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"match.+return\",\n\n\"failMsg\": \"Your query should contain at least a MATCH and RETURN clause\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Match the paths between actors and directors in different ways\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN|:DIRECTED\",\n\n\"failMsg\": \"Your paths should contain both, the ACTED_IN and DIRECTED relationships.\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"return\\\\s+([ad]\\\\.name|m\\\\.title)\",\n\n\"failMsg\": \"You should return the actors name, directors name and movie title.\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Assing patterns to paths\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN|:DIRECTED\",\n\n\"failMsg\": \"Your paths should contain both, the ACTED_IN and DIRECTED relationships.\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"p.?\\\\s*=\",\n\n\"failMsg\": \"You should assign the path expression to a path 'p' or 'p1'\"\n\n}\n\n]\n\n}\n\nDatabase: _lab_paths\n\nCREATE (Unforgiven:Movie {title:'Unforgiven', released:1992, tagline:'It is a hell of a thing, killing a man'})\n\nCREATE (RichardH:Person {name:'Richard Harris', born:1930})\n\nCREATE (ClintE:Person {name:'Clint Eastwood', born:1930})\n\nCREATE (Gene:Person {name:'Gene Hackman', born:1930})\n\nCREATE\n\n(RichardH)-[:ACTED_IN {roles:['English Bob']}]->(Unforgiven),\n\n(ClintE)-[:ACTED_IN {roles:['Bill Munny']}]->(Unforgiven),\n\n(Gene)-[:ACTED_IN {roles:['Little Bill Daggett']}]->(Unforgiven),\n\n(ClintE)-[:DIRECTED]->(Unforgiven)\n\nCREATE (TheReplacements:Movie {title:'The Replacements', released:2000, tagline:'Pain heals, Chicks dig scars... Glory lasts forever'})\n\nCREATE (Brooke:Person {name:'Brooke Langton', born:1970})\n\nCREATE (Keanu:Person {name:'Keanu Reeves', born:1964})\n\nCREATE (Orlando:Person {name:'Orlando Jones', born:1968})\n\nCREATE (Howard:Person {name:'Howard Deutch', born:1950})\n\nCREATE\n\n(Keanu)-[:ACTED_IN {roles:['Shane Falco']}]->(TheReplacements),\n\n(Brooke)-[:ACTED_IN {roles:['Annabelle Farrell']}]->(TheReplacements),\n\n(Gene)-[:ACTED_IN {roles:['Jimmy McGinty']}]->(TheReplacements),\n\n(Orlando)-[:ACTED_IN {roles:['Clifford Franklin']}]->(TheReplacements),\n\n(Howard)-[:DIRECTED]->(TheReplacements)\n\nCREATE (TheBirdcage:Movie {title:'The Birdcage', released:1996, tagline:'Come as you are'})\n\nCREATE (MikeN:Person {name:'Mike Nichols', born:1931})\n\nCREATE (Nathan:Person {name:'Nathan Lane', born:1956})\n\nCREATE (Robin:Person {name:'Robin Williams', born:1951})\n\nCREATE\n\n(Robin)-[:ACTED_IN {roles:['Armand Goldman']}]->(TheBirdcage),\n\n(Nathan)-[:ACTED_IN {roles:['Albert Goldman']}]->(TheBirdcage),\n\n(Gene)-[:ACTED_IN {roles:['Sen. Kevin Keeley']}]->(TheBirdcage),\n\n(MikeN)-[:DIRECTED]->(TheBirdcage)\n\n{\n\n\"message\": \"Lab: Find out which directors also acted in their movies, use what you've learned so far\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN|:DIRECTED\",\n\n\"failMsg\": \"Your paths should contain both, the ACTED_IN and DIRECTED relationships.\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"test\": \"Clint Eastwood\",\n\n\"failMsg\": \"We expected someone else.\"\n\n}\n\n]\n\n}\n\nDatabase: full (actually it is only half)\n\nLab-Session 5 busiest actors\n\n{\n\n\"message\": \"Lab: Find the 5 busiest actors in this dataset, use what you've learned\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"count\",\n\n\"failMsg\": \"You probably want to count the ocurrences\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"order by\",\n\n\"failMsg\": \"Ordering the results makes a lot of sense for top n\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"desc\",\n\n\"failMsg\": \"Remember to use the right sort order.\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"limit 5\",\n\n\"failMsg\": \"You're still interested in the top 5, remember how to limit the output?\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"results\": \"Gene Hackman\",\n\n\"failMsg\": \"We expected someone else.\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Lab: All Movies Tom Hanks acted in.\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Person\",\n\n\"failMsg\": \"You'll want to limit your nodes to ones labeled Person\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\.name\",\n\n\"failMsg\": \"You probably want to check the name property\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"Tom Hanks\",\n\n\"failMsg\": \"You wanted to look for Tom Hank's movies\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"results\": \"Cloud Atlas\",\n\n\"failMsg\": \"We expected some other movie.\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Lab: All Movies Keanu Reeves acted in.\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Person\",\n\n\"failMsg\": \"You'll want to limit your nodes to ones labeled Person\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\.name\",\n\n\"failMsg\": \"You probably want to check the name property\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"Keanu Reeves\",\n\n\"failMsg\": \"You wanted to look for Keanu Reeves's movies\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"results\": \"The Matrix\",\n\n\"failMsg\": \"We expected some otherher movie.\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"All the actors who acted with Tom Hanks and are older than him.\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Person\",\n\n\"failMsg\": \"You'll want to limit your nodes to ones labeled Person\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\.name\",\n\n\"failMsg\": \"You probably want to check the name property\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"Tom Hanks\",\n\n\"failMsg\": \"You wanted to look for Tom Hanks's colleagues\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\.born [<>]\",\n\n\"failMsg\": \"Compare the born (year) property\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"results\": \"Jim Broadbent\",\n\n\"failMsg\": \"We expected someone else.\"\n\n}\n\n]\n\n}\n\n##Recommend 3 actors that Keanu Reeves should work with (but hasn’t).##\n\nThis is kind of a *friends-of-a-friend* query, only that we don't have `FRIEND` relationships here but co-acting in a movie (`ACTED_IN`). So it might be a bit verbose in the first place. There are different approaches for the recommendation. So keep in mind that the top 3 most frequently appearing people in that network seem to be good candidates.\n\nAdvanced Lab: Recommendations for Keanu Reeves\n\nMATCH (keanu:Person)-[:ACTED_IN]->()<-[:ACTED_IN]-(colleague),\n\n(co_colleague)-[:ACTED_IN]->()<-[:ACTED_IN]-(colleague)\n\nWHERE keanu.name = \"Keanu Reeves\" AND not(keanu = co_colleague)\n\nAND not (co_colleague)-[:ACTED_IN]->()<-[:ACTED_IN]-(keanu)\n\nRETURN co_colleague, count(*)\n\nORDER BY count(*) DESC\n\nLIMIT 3\n\n{\n\n\"message\": \"Lab: Recommend 3 actors that Keanu Reeves should work with (but hasn't)\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"Keanu Reeves\",\n\n\"failMsg\": \"You should look for Keanu Reeves\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship several times\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"count\",\n\n\"failMsg\": \"You probably want to count the ocurrences\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"order by\",\n\n\"failMsg\": \"Ordering the results makes a lot of sense for top n\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"desc\",\n\n\"failMsg\": \"Remember to use the right sort order.\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"limit 3\",\n\n\"failMsg\": \"You're still interested in the top 3, remember how to limit the output?\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"not\",\n\n\"failMsg\": \"Did you remember to exclude the ones he already worked with?\"\n\n}\n\n]\n\n}\n\n,\n\n{\n\n\"check\": \"results\",\n\n\"results\": \"(Meg Ryan|Val Kilmer)\",\n\n\"failMsg\": \"We expected someone else.\"\n\n}\n\n{\n\n\"message\": \"Lab: All Characters in the Matrix\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Movie\",\n\n\"failMsg\": \"You'll want to limit your nodes to ones labeled Movie\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\.title\",\n\n\"failMsg\": \"You probably want to check the title property\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"The Matrix\",\n\n\"failMsg\": \"You wanted to look for the movie titled 'The Matrix'\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\w+:ACTED_IN\",\n\n\"failMsg\": \"You probably wanted to assign an identifier to your relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\.roles\",\n\n\"failMsg\": \"You wanted to RETURN the roles property of the relationship\"\n\n},\n\n{\n\n\"check\": \"output\",\n\n\"results\": \"Neo\",\n\n\"failMsg\": \"We expected some other characters\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Aggregation\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Person\",\n\n\"failMsg\": \"You'll want to start at nodes labeled Person\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"(collect|count|avg|min|max)\",\n\n\"failMsg\": \"You certainly wanted to use an aggregation function\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Creating Many Relationships\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Person\",\n\n\"failMsg\": \"You'll want to start at nodes labeled Person\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":ACTED_IN\\|DIRECTED\",\n\n\"failMsg\": \"Your paths should use the ACTED_IN and DIRECTED relationships\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"(CREATE UNIQUE|MERGE)\",\n\n\"failMsg\": \"To create things uniquely, use MERGE or CREATE UNIQUE\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":KNOWS\",\n\n\"failMsg\": \"You want to create :KNOWS relationships\"\n\n}\n\n]\n\n}\n\n{\n\n\"message\": \"Delete Emil and his relationships\",\n\n\"tasks\": [\n\n{\n\n\"check\": \"input\",\n\n\"test\": \":Person\",\n\n\"failMsg\": \"You'll want to start at nodes labeled Person\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"name.+Emil Eifrem\",\n\n\"failMsg\": \"You probably want to check the name property for 'Emil Eifrem'\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"OPTIONAL\\\\s+MATCH\",\n\n\"failMsg\": \"Remember not only to delete Emil but also to match his potential relationships and delete them.\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"\\\\[\\\\w+\\\\]\",\n\n\"failMsg\": \"You probably wanted to assign an identifier to your relationship\"\n\n},\n\n{\n\n\"check\": \"input\",\n\n\"test\": \"DELETE\",\n\n\"failMsg\": \"You most probably want to DELETE Emil and his relationships\"\n\n}\n\n]\n\n}\n\nCREATE (TheMatrix:Movie {title:'The Matrix', released:1999, tagline:'Welcome to the Real World'})\n\nCREATE (Keanu:Person {name:'Keanu Reeves', born:1964})\n\nCREATE (Carrie:Person {name:'Carrie-Anne Moss', born:1967})\n\nCREATE (Laurence:Person {name:'Laurence Fishburne', born:1961})\n\nCREATE (Hugo:Person {name:'Hugo Weaving', born:1960})\n\nCREATE (AndyW:Person {name:'Andy Wachowski', born:1967})\n\nCREATE (LanaW:Person {name:'Lana Wachowski', born:1965})\n\nCREATE (JoelS:Person {name:'Joel Silver', born:1952})\n\nCREATE\n\n(Keanu)-[:ACTED_IN {roles:['Neo']}]->(TheMatrix),\n\n(Carrie)-[:ACTED_IN {roles:['Trinity']}]->(TheMatrix),\n\n(Laurence)-[:ACTED_IN {roles:['Morpheus']}]->(TheMatrix),\n\n(Hugo)-[:ACTED_IN {roles:['Agent Smith']}]->(TheMatrix),\n\n(AndyW)-[:DIRECTED]->(TheMatrix),\n\n(LanaW)-[:DIRECTED]->(TheMatrix),\n\n(JoelS)-[:PRODUCED]->(TheMatrix)\n\nCREATE (TopGun:Movie {title:'Top Gun', released:1986, tagline:'I feel the need, the need for speed.'})\n\nCREATE (TomC:Person {name:'Tom Cruise', born:1962})\n\nCREATE (KellyM:Person {name:'Kelly McGillis', born:1957})\n\nCREATE (ValK:Person {name:'Val Kilmer', born:1959})\n\nCREATE (AnthonyE:Person {name:'Anthony Edwards', born:1962})\n\nCREATE (TomS:Person {name:'Tom Skerritt', born:1933})\n\nCREATE (MegR:Person {name:'Meg Ryan', born:1961})\n\nCREATE (TonyS:Person {name:'Tony Scott', born:1944})\n\nCREATE (JimC:Person {name:'Jim Cash', born:1941})\n\nCREATE\n\n(TomC)-[:ACTED_IN {roles:['Maverick']}]->(TopGun),\n\n(KellyM)-[:ACTED_IN {roles:['Charlie']}]->(TopGun),\n\n(ValK)-[:ACTED_IN {roles:['Iceman']}]->(TopGun),\n\n(AnthonyE)-[:ACTED_IN {roles:['Goose']}]->(TopGun),\n\n(TomS)-[:ACTED_IN {roles:['Viper']}]->(TopGun),\n\n(MegR)-[:ACTED_IN {roles:['Carole']}]->(TopGun),\n\n(TonyS)-[:DIRECTED]->(TopGun),\n\n(JimC)-[:WROTE]->(TopGun)\n\nCREATE (JerryMaguire:Movie {title:'Jerry Maguire', released:2000, tagline:'The rest of his life begins now.'})\n\nCREATE (ReneeZ:Person {name:'Renee Zellweger', born:1969})\n\nCREATE (KellyP:Person {name:'Kelly Preston', born:1962})\n\nCREATE (JerryO:Person {name:'Jerry O\\\\'Connell', born:1974})\n\nCREATE (JayM:Person {name:'Jay Mohr', born:1970})\n\nCREATE (BonnieH:Person {name:'Bonnie Hunt', born:1961})\n\nCREATE (ReginaK:Person {name:'Regina King', born:1971})\n\nCREATE (JonathanL:Person {name:'Jonathan Lipnicki', born:1990})\n\nCREATE (CameronC:Person {name:'Cameron Crowe', born:1957})\n\nCREATE (CubaG:Person {name:'Cuba Gooding Jr.', born:1968})\n\nCREATE\n\n(TomC)-[:ACTED_IN {roles:['Jerry Maguire']}]->(JerryMaguire),\n\n(CubaG)-[:ACTED_IN {roles:['Rod Tidwell']}]->(JerryMaguire),\n\n(ReneeZ)-[:ACTED_IN {roles:['Dorothy Boyd']}]->(JerryMaguire),\n\n(KellyP)-[:ACTED_IN {roles:['Avery Bishop']}]->(JerryMaguire),\n\n(JerryO)-[:ACTED_IN {roles:['Frank Cushman']}]->(JerryMaguire),\n\n(JayM)-[:ACTED_IN {roles:['Bob Sugar']}]->(JerryMaguire),\n\n(BonnieH)-[:ACTED_IN {roles:['Laurel Boyd']}]->(JerryMaguire),\n\n(ReginaK)-[:ACTED_IN {roles:['Marcee Tidwell']}]->(JerryMaguire),\n\n(JonathanL)-[:ACTED_IN {roles:['Ray Boyd']}]->(JerryMaguire),\n\n(CameronC)-[:DIRECTED]->(JerryMaguire),\n\n(CameronC)-[:PRODUCED]->(JerryMaguire),\n\n(CameronC)-[:WROTE]->(JerryMaguire)\n\nCREATE (TheReplacements:Movie {title:'The Replacements', released:2000, tagline:'Pain heals, Chicks dig scars... Glory lasts forever'})\n\nCREATE (Brooke:Person {name:'Brooke Langton', born:1970})\n\nCREATE (Gene:Person {name:'Gene Hackman', born:1930})\n\nCREATE (Orlando:Person {name:'Orlando Jones', born:1968})\n\nCREATE (Howard:Person {name:'Howard Deutch', born:1950})\n\nCREATE\n\n(Keanu)-[:ACTED_IN {roles:['Shane Falco']}]->(TheReplacements),\n\n(Brooke)-[:ACTED_IN {roles:['Annabelle Farrell']}]->(TheReplacements),\n\n(Gene)-[:ACTED_IN {roles:['Jimmy McGinty']}]->(TheReplacements),\n\n(Orlando)-[:ACTED_IN {roles:['Clifford Franklin']}]->(TheReplacements),\n\n(Howard)-[:DIRECTED]->(TheReplacements)\n\nCREATE (TheBirdcage:Movie {title:'The Birdcage', released:1996, tagline:'Come as you are'})\n\nCREATE (MikeN:Person {name:'Mike Nichols', born:1931})\n\nCREATE (Nathan:Person {name:'Nathan Lane', born:1956})\n\nCREATE (Robin:Person {name:'Robin Williams', born:1951})\n\nCREATE\n\n(Robin)-[:ACTED_IN {roles:['Armand Goldman']}]->(TheBirdcage),\n\n(Nathan)-[:ACTED_IN {roles:['Albert Goldman']}]->(TheBirdcage),\n\n(Gene)-[:ACTED_IN {roles:['Sen. Kevin Keeley']}]->(TheBirdcage),\n\n(MikeN)-[:DIRECTED]->(TheBirdcage)\n\nCREATE (Unforgiven:Movie {title:'Unforgiven', released:1992, tagline:'it\\\\'s a hell of a thing, killing a man'})\n\nCREATE (RichardH:Person {name:'Richard Harris', born:1930})\n\nCREATE (ClintE:Person {name:'Clint Eastwood', born:1930})\n\nCREATE\n\n(RichardH)-[:ACTED_IN {roles:['English Bob']}]->(Unforgiven),\n\n(ClintE)-[:ACTED_IN {roles:['Bill Munny']}]->(Unforgiven),\n\n(Gene)-[:ACTED_IN {roles:['Little Bill Daggett']}]->(Unforgiven),\n\n(ClintE)-[:DIRECTED]->(Unforgiven)\n\nCREATE (CloudAtlas:Movie {title:'Cloud Atlas', released:2012, tagline:'Everything is connected'})\n\nCREATE (TomH:Person {name:'Tom Hanks', born:1956})\n\nCREATE (HalleB:Person {name:'Halle Berry', born:1966})\n\nCREATE (JimB:Person {name:'Jim Broadbent', born:1949})\n\nCREATE (TomT:Person {name:'Tom Tykwer', born:1965})\n\nCREATE\n\n(TomH)-[:ACTED_IN {roles:['Zachry', 'Dr. Henry Goose', 'Isaac Sachs', 'Dermot Hoggins']}]->(CloudAtlas),\n\n(Hugo)-[:ACTED_IN {roles:['Bill Smoke', 'Haskell Moore', 'Tadeusz Kesselring', 'Nurse Noakes', 'Boardman Mephi', 'Old Georgie']}]->(CloudAtlas),\n\n(HalleB)-[:ACTED_IN {roles:['Luisa Rey', 'Jocasta Ayrs', 'Ovid', 'Meronym']}]->(CloudAtlas),\n\n(JimB)-[:ACTED_IN {roles:['Vyvyan Ayrs', 'Captain Molyneux', 'Timothy Cavendish']}]->(CloudAtlas),\n\n(TomT)-[:DIRECTED]->(CloudAtlas),\n\n(AndyW)-[:DIRECTED]->(CloudAtlas),\n\n(LanaW)-[:DIRECTED]->(CloudAtlas)\n\nCREATE (AFewGoodMen:Movie {title:'A Few Good Men', released:1992, tagline:'In the heart of the nation\\\\'s capital, in a courthouse of the U.S. government, one man will stop at nothing to keep his honor, and one will stop at nothing to find the truth.'})\n\nCREATE (JackN:Person {name:'Jack Nicholson', born:1937})\n\nCREATE (DemiM:Person {name:'Demi Moore', born:1962})\n\nCREATE (KevinB:Person {name:'Kevin Bacon', born:1958})\n\nCREATE (KieferS:Person {name:'Kiefer Sutherland', born:1966})\n\nCREATE (NoahW:Person {name:'Noah Wyle', born:1971})\n\nCREATE (KevinP:Person {name:'Kevin Pollak', born:1957})\n\nCREATE (JTW:Person {name:'J.T. Walsh', born:1943})\n\nCREATE (JamesM:Person {name:'James Marshall', born:1967})\n\nCREATE (ChristopherG:Person {name:'Christopher Guest', born:1948})\n\nCREATE (RobR:Person {name:'Rob Reiner', born:1947})\n\nCREATE (AaronS:Person {name:'Aaron Sorkin', born:1961})\n\nCREATE\n\n(TomC)-[:ACTED_IN {roles:['Lt. Daniel Kaffee']}]->(AFewGoodMen),\n\n(JackN)-[:ACTED_IN {roles:['Col. Nathan R. Jessup']}]->(AFewGoodMen),\n\n(DemiM)-[:ACTED_IN {roles:['Lt. Cdr. JoAnne Galloway']}]->(AFewGoodMen),\n\n(KevinB)-[:ACTED_IN {roles:['Capt. Jack Ross']}]->(AFewGoodMen),\n\n(KieferS)-[:ACTED_IN {roles:['Lt. Jonathan Kendrick']}]->(AFewGoodMen),\n\n(NoahW)-[:ACTED_IN {roles:['Cpl. Jeffrey Barnes']}]->(AFewGoodMen),\n\n(CubaG)-[:ACTED_IN {roles:['Cpl. Carl Hammaker']}]->(AFewGoodMen),\n\n(KevinP)-[:ACTED_IN {roles:['Lt. Sam Weinberg']}]->(AFewGoodMen),\n\n(JTW)-[:ACTED_IN {roles:['Lt. Col. Matthew Andrew Markinson']}]->(AFewGoodMen),\n\n(JamesM)-[:ACTED_IN {roles:['Pfc. Louden Downey']}]->(AFewGoodMen),\n\n(ChristopherG)-[:ACTED_IN {roles:['Dr. Stone']}]->(AFewGoodMen),\n\n(AaronS)-[:ACTED_IN {roles:['Man in Bar']}]->(AFewGoodMen),\n\n(RobR)-[:DIRECTED]->(AFewGoodMen),\n\n(AaronS)-[:WROTE]->(AFewGoodMen)\n\nCREATE (Apollo13:Movie {title:'Apollo 13', released:1995, tagline:'Houston, we have a problem.'})\n\nCREATE (EdH:Person {name:'Ed Harris', born:1950})\n\nCREATE (BillPax:Person {name:'Bill Paxton', born:1955})\n\nCREATE (RonH:Person {name:'Ron Howard', born:1954})\n\nCREATE (GaryS:Person {name:'Gary Sinise', born:1955})\n\nCREATE\n\n(TomH)-[:ACTED_IN {roles:['Jim Lovell']}]->(Apollo13),\n\n(KevinB)-[:ACTED_IN {roles:['Jack Swigert']}]->(Apollo13),\n\n(EdH)-[:ACTED_IN {roles:['Gene Kranz']}]->(Apollo13),\n\n(BillPax)-[:ACTED_IN {roles:['Fred Haise']}]->(Apollo13),\n\n(GaryS)-[:ACTED_IN {roles:['Ken Mattingly']}]->(Apollo13),"
    }
}