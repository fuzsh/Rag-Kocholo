{
    "id": "wrong_mix_property_foundationPlace_00064_2",
    "rank": 52,
    "data": {
        "url": "https://smartbear.com/product/testleft/features/behavior-driven-development/",
        "read_more_link": "",
        "language": "en",
        "title": "BDD Testing",
        "top_image": "https://smartbear.com/smartbear/assets/img/favicon.png",
        "meta_img": "https://smartbear.com/smartbear/assets/img/favicon.png",
        "images": [
            "https://smartbear.com/smartbear/assets/img/nav-icons/Test Frameworks.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Collaboration.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Case-Studies.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Webinars.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Ebooks.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Case-Studies.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Academy.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Community.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Case-Studies.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Company.svg",
            "https://smartbear.com/smartbearbrand/media/images/company/news/sb_ws_news_nav-icon.svg",
            "https://smartbear.com/smartbear/assets/img/nav-icons/Partners.svg",
            "https://smartbear.com/smartbear/assets/img/SB-type.svg",
            "https://smartbear.com/SmartBearBrand/media/Images/logos/icons/TL_Icon-CLR.svg?ext=.svg",
            "https://smartbear.com/SmartBearBrand/media/Images/logos/text/TL_Wordmark-CLR.svg?ext=.svg",
            "https://smartbear.de/SmartBear/media/images/product/TestLeft/SB_TL_Product-Launch-03_5.png?ext=.png",
            "https://smartbear.com/smartbear/assets/img/feature-icons/Application-Works-as-Intended.svg",
            "https://smartbear.com/smartbear/assets/img/feature-icons/Test-Earlier.svg",
            "https://smartbear.com/SmartBear/media/images/product/TestLeft/SB_TL_Product-Launch-03_5.png?ext=.png",
            "https://smartbear.com/LoadNinja/media/Images/Feature%20Icons/LN_FT2_Icon3.svg?ext=.svg",
            "https://smartbear.com/SmartBear/media/images/product/TestLeft/SB_TL_Product-Launch-04.png?ext=.png",
            "https://smartbear.com/smartbear/assets/img/feature-icons/Object-Recognition.svg",
            "https://smartbear.com/smartbear/assets/img/feature-icons/BDD-Scenario.svg",
            "https://smartbear.com/SmartBearBrand/media/Images/logos/full/TL_Full-WT_1.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "What is BDD testing: Quickly translate BDD requirements written in Gherkin to functional tests with TestLeft. With support for popular BDD frameworks, you can build and automate tests sooner, accelerating your shift left movement. BDD software and BDD testing frameworks promises to address the need for automation that agile development shops have, through free and open source frameworks like RSPEC, Cucumber, and Specflow.",
        "meta_lang": "",
        "meta_favicon": "/smartbear/assets/img/favicon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Behavior-driven development (BDD) is a software development process in which teams create simple scenarios on how an application should behave from the end user's perspective. The goal of implementing BDD testing is to improve collaboration between key stakeholders, such as developers, testers, product managers, and business analysts, by writing test scenarios in an easily-decipherable language - Gherkin. The BDD testing framework promises to address the need for automation that many agile development shops have, through free and open source frameworks like RSPEC, Cucumber, and Specflow.\n\nYet behavior driven testing isn't designed as an automated testing tool at all. Instead, Behavior Driven Development describes a collaborative process, and BDD tools help enable the movement. Having the code in something like English makes it easier for customer, tester, and programmer to collectively design the examples that will drive development.\n\nCollaboration\n\nWe've had test automation in one form or another for decades - but it was almost always done by a test-automator alone. When the results of the test did not match what the automator expected, the programmer and tester had to argue about who was \"right\"; then bring in the product manager to have the same conversation again. BDD programming prevents problems by thinking of the behavior as examples, and having (at least) all three roles represented when defining the examples.\n\nHere's how it works: Before any programming begins on a story, everyone gets together to talk about what the customer wants in the next release and how a new set of features will add value to the product. After this, development goes off to make product and occasionally deliver testable bits. If they have time, the product group occasionally checks in on what is being created while working with customers on what they might want next. Usually though, their focus is on the next release.\n\nThat means that for each story (or feature or requirement) a small group gets together to acceptance criteria (some call this \"rejection criteria\", which we'll explain later) for that feature. The flow of work potentially changes from business to development to test to something where the three groups all work together until a feature is shippable.\n\nTestLeft allows you to quickly translate BDD requirements written in Gherkin into actual functional test steps for anyone to understand, automate, and troubleshoot. And, of course, there is the advantage that Behavior Driven Development in the gherkin language looks a lot more like English.\n\nWhat is BDD?\n\nThe classic way to describe tests in BDD workflow is to put then in the form of Given, When, Then. Given describes the current system state or a set of preconditions for a test. BDD automation framework is a behavior test where the behavior or set of test steps that your test will perform. Then is where assertions, or the expected changes from your test, are described. The behavior driven development example of a test is done in something very close to English, which might look like this:\n\nGIVEN I am in a Amazon.com cart with 1 copy of The Shape of Actions WHEN I apply a 10 percent discount code THEN Total = total - (total * 0.10)\n\nThis part of the test would probably be written by a product manager or maybe a non-technical tester. Interpreters can't work with English though, code has to be written to make that set of descriptions useful, so the roles gather to create the code above, which is actually in Gherkin, a programmable language. After the meeting the programmer can write the ruby (or Java, or .net) code that the Gherkin will call.\n\nRather than calling something in this format a test, people that do behaviour driven testing call this a scenario or a specification. Behaviour Driven Development is not a testing technique. Testing is part of a product strategy that can help to discover quality related information that might affect the future of the product. BDD test automation on the other hand, is a development strategy, or maybe a product management strategy if you look at it through the right lens. It acts as a reminder to developers about the value of what they are building and helps them to build the right thing the first time around. (The automated checks that remain after behavioral driven development testing is done can be part of a strong risk management strategy.)\n\nWhat to Keep In Mind When Getting Started with Behavior Driven Testing\n\nEven though behavior driven development framework and BDD testing tools can create a nice middle ground between technical staff and the business units, there are a few things to be aware of. Behavior Driven Development is often used to create a set of acceptance tests. The big gamble is that the product should be releasable as soon as all of these tests pass. Given/When/Then tests check only the \"then\" condition, and assume \"... and nothing else bad happens.\" That can be a big assumption to make.\n\nI like to flip the idea on its side, and think of BDD process as rejection criteria. That is to say, while a failing test guarantees the software is not ready to ship, but a passing test does not mean the product is ready to release.\n\nAlso, keep in mind that behavioral driven development scenarios tend to be dead simple. They begin with a specific system state and then perform simple operations in the same order ever time. Something like navigate to amazon.com, add the book Tacit and Explicit Knowledge to your cart, and then verify that the book is in your cart along with all the appropriate information.\n\nA normal user might do something more along the lines of searching for a book, reading the reviews, adding the book to the cart but accidentally adding 2 copies instead of 1, leaving the cart to browse more before returning to the cart to see that the wrong number was added, and finally changing the quantity so that there is only one copy. Even this is probably a simple example that ignores everything a person does while trying to buy a book on Amazon.\n\nBe careful not to get lulled into a false sense of comfort from reports saying all the checks pass. You will probably want to know more before making important decisions like when to ship. The next step is to try a small experiment with your team to see if this style of development can add value. To see how BDD automation framwework can help your team, try TestLeft free for 30 days"
    }
}