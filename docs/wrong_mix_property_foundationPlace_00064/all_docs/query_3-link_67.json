{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 67,
    "data": {
        "url": "https://www.jetbrains.com/help/rider/Code_Analysis__Configuring_Warnings.html",
        "read_more_link": "",
        "language": "en",
        "title": "Configure code inspection settings",
        "top_image": "https://resources.jetbrains.com/storage/products/rider/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/rider/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/rider/2024.1/code_analysis_target_framework.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/app.general.inspectionsTrafficOff.svg",
            "https://resources.jetbrains.com/help/img/rider/2024.1/inspection_severity_change.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/Inspection_options.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/optionsHighlighting.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/ThemedIcon.Undo.Screen.(Gray).png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "JetBrains Rider Help",
        "canonical_link": "https://www.jetbrains.com/help/rider/Code_Analysis__Configuring_Warnings.html",
        "text": "Configure design-time code inspection\n\nBy default, JetBrains Rider enables design-time code inspection in all files corresponding to the supported languages. If necessary, you can disable it. Regardless of whether or not the design-time code inspection is enabled, you can always run code inspection in specific scope.\n\nYou can quickly adjust inspection settings right from the editor, using the 'Pencils' widget or go for a more detailed configuration in the settings:\n\nPress Ctrl+Alt+S or choose File | Settings (Windows and Linux) or JetBrains Rider | Preferences (macOS) from the menu , then choose Editor | Inspection Settings on the left.\n\nUse the Enable code analysis checkbox to toggle the design-time code inspection.\n\nIf necessary, you can select the Enable solution-wide analysis checkbox to enable the Solution-wide analysis.\n\nUse other options on that settings page to tune the design-time inspection to your liking.\n\nClick Save in the Settings dialog to apply the modifications and let JetBrains Rider choose where to save them, or save the modifications to a specific settings layer by choosing this layer from the Save selector. For more information, see layer-based settings.\n\nSwitch context for multiple target frameworks\n\nResults of code inspection can vary depending on the target .NET Framework because different versions of the framework have different features and capabilities, which can affect the behavior of the code. In most cases, each file belongs to a single project that targets a single .NET Framework, so JetBrains Rider can unambiguously set a specific framework version context for code inspection in that file.\n\nHowever, there are two cases when a file can be compiled with different framework versions:\n\nMultiple framework versions are defined in the project file where the file belongs.\n\nA file belongs to several projects with different framework versions.\n\nIn both cases, the framework version of the current context appears in the editor breadcrumbs, and you can click it to switch the context to another version. In the case of multiple frameworks in the project, the context will be switched for the whole project; otherwise, only the file context will be changed.\n\nIn the example above there are two unresolved calls in the file â Exception() and ArgumentException() â but only the second call is highlighted as error because the first one if filtered out for .NETCoreApp 3.1 with the #IF directive and .NETCoreApp 2.0 is selected for analysis.\n\nExclude files and folders from code inspection\n\nJetBrains Rider allows you to configure the list of files, file masks, and folders that should be excluded from code inspection. The excluded items are ignored by both design-time code inspection and code inspection in specific scope, but they are still indexed by JetBrains Rider, so that you can navigate to or refactor symbols excluded from code inspection.\n\nExclude specific files and folders from code inspection\n\nPress Ctrl+Alt+S or choose File | Settings (Windows and Linux) or JetBrains Rider | Preferences (macOS) from the menu , then choose Editor | Inspection Settings on the left.\n\nIn the left part of the Elements to skip section, you can specify files or folders to be ignored by the code inspection.\n\nIn the right part of this section, you can specify masks (for example *.vb) that will exclude all matching files in the solution from code inspection.\n\nClick Save in the Settings dialog to apply the modifications and let JetBrains Rider choose where to save them, or save the modifications to a specific settings layer by choosing this layer from the Save selector. For more information, see layer-based settings.\n\nYou can also quickly exclude the current file from code inspection so that JetBrains Rider adds this file to the list of excluded files without opening the options.\n\nExclude/include current file from/to code inspection\n\nPress Ctrl+Alt+Shift+8.\n\nYou can recognize files where code inspection is disabled by the indicator in the top right corner of the editor.\n\nPartly disable code inspection for generated code\n\nYou can also configure the list of files, folders, file masks, and regions that contain generated code. For these items, JetBrains Rider runs only those code inspections that check code for compiler errors and warnings. Some file masks and regions, which are typically used for generated code, for example *.designer.cs are included in this list by default, but you can change the default settings if necessary.\n\nIf you use .editorconfig in your solution, you can also mark generated code using the generated_code property. For example:\n\n[*generated.cs] generated_code = true\n\nSpecify files and regions with generated code\n\nOn the Editor | Inspection Settings | Generated Code page of JetBrains Rider settings Ctrl+Alt+S, use the Add button to specify files or folders that contain generated code.\n\nIn the lower left part of the page, use the Add button to specify masks (for example *.Designer.cs) for generated code files.\n\nIn the lower right part of the page, use the Add button to specify names of the regions that contain generated code.\n\nClick Save in the Settings dialog to apply the modifications and let JetBrains Rider choose where to save them, or save the modifications to a specific settings layer by choosing this layer from the Save selector. For more information, see layer-based settings.\n\nThe list of items containing generated code can also be used for disabling code cleanup for generated code.\n\nChange severity levels of code inspections\n\nEach JetBrains Rider's code inspection has its own default severity level, which is set according to potential impact of code issues that it detects. Most of the inspections have configurable severity level, which you can change.\n\nNote that inspections that detect compiler errors and warnings have corresponding severity levels, which cannot be changed. However, with some compiler warnings, you can use #pragma directives to suppress them. Look for the suppress with #pragma action in the action list upon a specific warning.\n\nYou can change severity level of an inspection right from the editor, where a code issue found by this inspection is highlighted.\n\nChange inspection severity from the editor\n\nPlace the caret to a code issue highlighted by a JetBrains Rider's inspection.\n\nPress Alt+Enter or click the action indicator to the left of the caret to open the action list.\n\nIn the action list, choose Inspection [name of inspection] | Configure inspection severity and then select a new severity level:\n\nYour change will be saved using the smart save logic.\n\nIf you need to save the modified severity level in a shared settings layer, click the Configure inspection severity menu item or press Enter when it is selected. In the dialog that appears, choose the desired severity level, click Save To and then choose the desired settings layer.\n\nAnother way to save the modified severity level in a shared settings layer, or modifying severity levels of multiple inspections is using the JetBrains Rider Settings dialog Ctrl+Alt+S as described below.\n\nModify severity levels of code inspections from settings\n\nOn the Editor | Inspection Severity page of JetBrains Rider settings Ctrl+Alt+S, you can view all configurable code inspections and their severity levels. The inspections are grouped by languages and then by categories.\n\nFind and select the inspection whose severity you want to modify.\n\nClick the list to the right of the selected entry, and choose a desired severity level:\n\nIf the default severity level of an inspection is changed, you will see the Reset to default button next to it, which allows you to reset the severity to its default value.\n\nClick Save in the Settings dialog to apply the modifications and let JetBrains Rider choose where to save them, or save the modifications to a specific settings layer by choosing this layer from the Save selector. For more information, see layer-based settings.\n\nDisable/enable specific code inspections\n\nIf some code inspection seems trivial or being of no interest to you, you can disable this inspection so that no relevant issues would be highlighted in the editor or detected when you run code inspection in specific scope. You can enable a disabled code inspection any time later. Some inspections are disabled by default and you can enable them if necessary.\n\nYou can disable any code inspection in one of the following ways:\n\nIf there is a code issue highlighted by this inspection in the editor, place the caret at the highlighted code, press Alt+Enter and then choose Inspection [name of inspection] | Configure inspection severity | Do not show.\n\nOn the Editor | Inspection Severity page of JetBrains Rider settings Ctrl+Alt+S, use the search field to find the inspection you want to disable or enable, and then use the checkbox next to it.\n\nThe disabled/enabled state of inspections is saved in the shared settings layers, exactly the same way as changes to severity levels.\n\nUse EditorConfig to configure code inspections\n\nIf you use EditorConfig to maintain code styles for your project, you can also configure code inspections from .editorconfig files.\n\nTo configure code inspections from EditorConfig, you have to select the Read settings from editorconfig, project settings and rule sets checkbox on the Editor | Inspection Settings page of JetBrains Rider settings Ctrl+Alt+S.\n\nAs EditorConfig convention suggests, JetBrains Rider will apply inspection settings defined in files named .editorconfig in the directory of the current file and in all its parent directories until it reaches the root filepath or finds an EditorConfig file with root=true. File masks specified in .editorconfig files, for example *Test.cs are also taken into account.\n\nInspection settings in .editorconfig files are configured similarly to other properties â by adding the corresponding lines:\n\n[inspection_property]=[error | warning | suggestion | hint | none]\n\nFor example, you can change the severity level of the Possible 'System.NullReferenceException' inspection to Error with the following line:\n\nresharper_possible_null_reference_exception_highlighting=error\n\nor you can disable the Redundant argument with default value inspection with the following line:\n\nresharper_redundant_argument_default_value_highlighting=none\n\nYou can find EditorConfig property for each inspection on pages in the Code inspection index section as well as on the Index of EditorConfig properties page. â just use the browser search to find the property for the desired inspection.\n\nSuppress code inspections in specific scope\n\nOne way to ignore specific code issues is to disable the corresponding code inspection. In this case, all code issues detected by this inspection will be ignored everywhere.\n\nSometimes you may need to suppress a specific inspection in a specific place, while continue to detect other similar issues with this inspection in other places.\n\nFor example, JetBrains Rider considers some code to be 'dead' and you can see that it is true. The inspection is helpful and you do not want to disable it. However, you may want to use this code later and do not want it to be highlighted in the editor or appear in the inspection results. To do so, JetBrains Rider allows you to suppress inspections with comments or with attributes. Comments are more convenient for arbitrary pieces of code, attributes are preferable to suppress inspections in whole methods or types.\n\nSuppress code inspection in specific scope\n\nPlace the caret to a code issue highlighted by a JetBrains Rider's inspection.\n\nPress Alt+Enter or click the action indicator to the left of the caret to open the action list.\n\nIn the action list, choose one of the following:\n\nInspection [name of inspection] | Disable once with comment â this option inserts a single comment ReSharper disable once [inspection id], which only suppresses the inspection for the first occurrence of the corresponding issue.\n\nInspection [name of inspection] | Disable once with comment | Disable in file with comment â this option inserts a single comment - ReSharper disable [inspection id] in the beginning of the file. This comment suppresses the inspection for all corresponding issues in the file.\n\nInspection [name of inspection] | Disable once with comment | Disable and restore with comment â this option inserts a pair of comments before and after the issue - ReSharper disable [inspection id] and ReSharper restore [inspection id]. These comments suppress the inspection for all corresponding issues between them.\n\nYou can then move these comments to other places in the file so that several issues of this type are suppressed. For example, this can be useful to suppress the 'redundant namespace' inspection if you want to keep several unused namespace imports.\n\nInspection [name of inspection] | Disable once with comment | Disable for method â this option adds the following attribute to the method: [SuppressMessage(\"ReSharper\", \"[inspection id]\")]. This attribute suppresses the inspection in the method.\n\nInspection [name of inspection] | Disable once with comment | Disable for class â this option adds the following attribute to the class: [SuppressMessage(\"ReSharper\", \"[inspection id]\")]. This attribute suppresses the inspection in the whole class.\n\nInspection [name of inspection] | Disable once with comment | Disable all inspection in file â this option inserts a single comment ReSharper disable All in the beginning of the file. This comment suppresses all inspections in the file.\n\nIf necessary, you can insert the ReSharper restore All to enable code inspections after a specific line.\n\nTo suppress all inspections in a type or a method, add the following attribute: [SuppressMessage(\"ReSharper\", \"All\")].\n\nLast modified: 26 May 2024"
    }
}