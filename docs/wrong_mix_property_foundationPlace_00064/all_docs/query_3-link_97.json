{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 97,
    "data": {
        "url": "https://www.jetbrains.com/help/rider/Features_Unity.html",
        "read_more_link": "",
        "language": "en",
        "title": "JetBrains Rider Documentation",
        "top_image": "https://resources.jetbrains.com/storage/products/rider/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/rider/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/rider/2024.1/solution_unity_explorer_mode.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_toolbar.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_actions_icon.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_editor_icons.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_colors.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity-props-code-vision.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_frequently_called_method.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_frequently_called_method_code_vision.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_performance_critical_area.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity-generate-event-function.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_events_autocomplete.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_quickdoc.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_layer_warning.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_serialized_field.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_signature.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_comparetag.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_shader_colors.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_shader_completion.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_shader_todo.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_shader_folding.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_shader_hlsl_completion.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_shader_find_everywhere.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_asmdef.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_filetemplates.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_log_window.png",
            "https://resources.jetbrains.com/help/img/rider/2024.1/unity_yaml_merge.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "JetBrainsÂ Rider Help",
        "canonical_link": "https://www.jetbrains.com/help/rider/Features_Unity.html",
        "text": "Features\n\nYou can start with watching this 3-minute video where Matt Ellis gives a short overview of JetBrains Rider features for Unity Development.\n\nUnity Explorer\n\nBy default, when working with a Unity project in Rider, the Explorer window switches to the Unity view showing you all the assets that constitute the project.\n\nPrimarily, the Packages node in the Unity view shows you the contents of the Packages folder in the root of your project. This might well only contain a manifest.json file which you can edit in Rider and when saved, Unity will update your project to include the packages you've added. More importantly, the Packages node will also show all the packages referenced in your project. Unity supports a number of different package types, and Rider will show them all. For more information about Rider and Unity packages, refer to the blog post.\n\nIf you switch to the Solution view, you will see only the Scripts part of the project.\n\nControl over Unity editor\n\nTo reduce the time you spend context switching between Rider and the Unity editor, some of the Unity editor's functionality is exposed directly in Rider on the Unity toolbar located in the top right corner.\n\nThe toolbar allows:\n\nControlling play mode: The Play, Pause, and Step buttons correspond to the same buttons in the Unity editor and work in the exact same way.\n\nAccessing important Unity-related actions using the Unity-related Actions list:\n\nStart Unity: start Unity Editor and open the Unity project that corresponds to the solution opened in Rider.\n\nStart Unity with Coverage: start Unity Editor with enabled code coverage support and open the Unity project that corresponds to the solution opened in Rider.\n\nAttach to Unity Process...: attach to the running Unity instance, for example for debugging or unit testing purposes.\n\nUnity Settings...: quickly open the Rider's Unity Engine settings page.\n\nUnity Log Window...: open the log viewer.\n\nShow Non-Unity Applicable UI: switch between the full Rider UI and the minimized one (all UI elements that are not related to Unity are hidden).\n\nEditor helpers\n\nIf Code Vision is disabled, JetBrains Rider shows the Unity gutter icon for classes, methods, and fields that are implicitly used by Unity:\n\nColors defined via UnityEngine.Color, UnityEngine.Color32, and Color.HSVToRGB are highlighted in the editor. You can also press Alt+Enter on a color usage and choose Pick color from palette to open the color editor and modify the color visually.\n\nFind Usages\n\nIn Unity projects, the Find Usages Alt+F7 feature is extended with data pulled from Unity scenes, assets, and prefabs. If you search for a class or a method used as an event handler, Rider will show where it is used in Unity files, grouped by type, component name, and parent game objects.\n\nCode Vision\n\nCode Vision also supports Unity. When it is enabled, you can see what classes, methods, fields (including field values set in Unity), and even assets are implicitly used. Code Vision provides navigation to the Unity Editor.\n\nPerformance analysis\n\nJetBrains Rider shows you performance sensitive areas: event functions that are called each frame, such as Update, FixedUpdate and LateUpdate, as well as coroutine methods. Inside these frequently called methods, performance indicators will also draw your attention to known expensive operations, like calls to GetComponent, Find or SendMessage, with context actions to move the initialization to Start or Awake.\n\nWhen Code Vision is disabled, performance indicators can be shown on the gutter:\n\nIf it is enabled, the indicators can be shown as Code Vision metrics:\n\nUnity has a number of methods that get called very frequently. These methods are treated as a performance-critical context and are highlighted in the editor gutter:\n\nYou can enable and configure performance analysis on the Languages & Frameworks | Unity Engine page of JetBrains Rider settings Ctrl+Alt+S, under Enable performance analysis in frequently called code.\n\nEvent functions\n\nYou can generate event functions using Unity Event Functions the Generate Code menu Alt+Insert. This action is also available from Alt+Enter everywhere inside a Unity-based class.\n\nAuto-completion will suggest event function names when declaring methods in Unity-based classes, and expand to include method signature. Start typing an event function within a class deriving from a known Unity class, such as MonoBehaviour.\n\nDescriptions for event functions and parameters in Unity based classes are shown in tooltips and Quick Documentation.\n\nInspections and quick-fixes\n\nRider shows warnings for unknown scenes, tags, and layers.\n\nWhen the Solution-wide analysis is enabled, JetBrains Rider understands implicitly used fields and event functions and do not highlight them as not accessed.\n\nEmpty event functions are shown as dead code, with a quick-fix to remove them.\n\nUsing the SyncVarAttribute inside any class other than NetworkBehaviour is treated as an error.\n\nA quick-fix is suggested to create a serialized field from a usage of an unresolved symbol:\n\nJetBrains Rider ensures that all of your event functions have correct signatures: it highlights incorrect signatures and offers a quick-fix to correct them:\n\nJetBrains Rider warns you against using an inefficient string literal comparison with the tag property, and provides a quick-fix to rewrite this as a call to CompareTag.\n\nJetBrains Rider warns you if you try to use the new keyword to create a new instance of a class deriving from MonoBehaviour or ScriptableObject. A quick-fix is suggested to use gameObject.AddComponent<T>() or ScriptableObject.CreateInstance<T>() instead.\n\nThere are also inspections for the [InitializeOnLoad] and [InitializeOnLoadMethod] attributes, ensuring that they have the correct method or constructor signatures, and JetBrains Rider will grey out a redundant [InitializeOnLoad] attribute if the class doesn't have a static constructor, with a quick-fix to either quickly remove the attribute, or create the constructor.\n\nand more...\n\nExternal annotations\n\nA lot of Unity-specific assemblies are annotated with External annotations to improve code inspection when you make use of these assemblies.\n\nTreating code marked with attributes from UnityEngine.dll, UnityEngine.Networking.dll and UnityEditor.dll as implicitly used.\n\nMarking Component.gameObject and Object.name as not-nullable.\n\nDebug.Assert marked as assertion method to help null-value analysis (for example \"value cannot be null\" after Debug.Assert(x != null)).\n\nDebug.AssertFormat, LogFormat, and so on gets string formatting helper functionality.\n\nAssertions.Assert methods marked as assertion methods to help null-value analysis.\n\nEditorTestsWithLogParser.ExpectLogLineRegex gets regular expression helper functionality.\n\nVarious attributes now require the class they are applied to derive from a specific base type. For example, [CustomEditor] requires a base class of Editor.\n\nSupport for Unity 2017.2's modularised UnityEngine assemblies.\n\nLive templates\n\nJetBrains Rider offers a couple of Unity-specific live templates:\n\nsprop: a Unity property with a serialized backing field.\n\nsfield: a Unity serialized field.\n\nFile templates\n\nJetBrains Rider offers a number of file templates for new C# script, tests, and shader files:\n\nUnity logs\n\nWhen Rider is connected to the Unity editor, the Unity tool window becomes available. To open the window, select View | Tool Windows | Unity from the main menu or use the Unity-related Actions list on the Unity toolbar.\n\nThe Log tab of the Unity tool window brings Unity's Console into Rider. The tab shows Unity log entries and is updated as events are logged in Unity.\n\nThe Output part of the window on the right shows the content of the currently selected log entry. Rider makes the content interactive, so that you can navigate to any source file, class, method or property mentioned in the log entry.\n\nNote that log entries can be filtered by event type: events from play or edit mode, warnings, errors, and messages.\n\nUnityYAMLMerge Support\n\nBy default, JetBrains Rider uses the UnityYAMLMerge tool for merging all YAML files in Unity projects. You can set additional UnityYAMLMerge parameters in Rider settings in Languages & Frameworks | Unity Engine | Prefer UnityYamlMerge for merging YAML files | Merge parameters.\n\nLast modified: 26 May 2024"
    }
}