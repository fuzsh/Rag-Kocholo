{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 46,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Dart_(programming_language)",
        "read_more_link": "",
        "language": "en",
        "title": "Dart (programming language)",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Dart_programming_language_logo.svg/121px-Dart_programming_language_logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Octicons-terminal.svg/24px-Octicons-terminal.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Free_and_open-source_software_logo_%282009%29.svg/28px-Free_and_open-source_software_logo_%282009%29.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/d/db/Symbol_list_class.svg/16px-Symbol_list_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/12px-Commons-logo.svg.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Global_thinking.svg/10px-Global_thinking.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/7/72/Symbol_project_class.svg/16px-Symbol_project_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2011-09-09T16:12:49+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Dart_(programming_language)",
        "text": "Programming language\n\nThis article is about a programming language. For the advertising application formerly named Google Dart, see DoubleClick for Publishers by Google. For other uses, see Dart.\n\nDartParadigmMulti-paradigm: functional, imperative, object-oriented, reflective[1]Designed byLars Bak, Kasper LundDeveloperGoogleFirst appearedOctober 10, 2011; 12 years ago ( )[2]Stable release\n\n3.4.4[3] / 13 June 2024; 40 days ago ( )\n\nTyping discipline1.x: Optional\n\n2.x: Inferred[4] (static, strong)PlatformCross-platformOSCross-platformLicenseBSDFilename extensions.dartWebsitedart .devMajor implementationsDart VM, dart2native, dart2js, DDC, FlutterInfluenced byC, C++, C#, Erlang, Java, JavaScript, Ruby, Smalltalk, Strongtalk,[5] TypeScript[6]\n\nDart is a programming language designed by Lars Bak and Kasper Lund and developed by Google.[8] It can be used to develop web and mobile apps as well as server and desktop applications.\n\nDart is an object-oriented, class-based, garbage-collected language with C-style syntax.[9] It can compile to machine code, JavaScript, or WebAssembly. It supports interfaces, mixins, abstract classes, reified generics and type inference.[4]\n\nHistory\n\n[edit]\n\nDart was unveiled at the GOTO conference in Aarhus, Denmark, October 10â€“12, 2011.[10] Lars Bak and Kasper Lund founded the project.[11] Dart 1.0 was released on November 14, 2013.[12]\n\nDart had a mixed reception at first. Some criticized the Dart initiative for fragmenting the web because of plans to include a Dart VM in Chrome. Those plans were dropped in 2015 with the Dart 1.9 release. Focus changed to compiling Dart code to JavaScript.[13]\n\nDart 2.0 was released in August 2018 with language changes including a type system.[14]\n\nDart 2.6 introduced a new extension, dart2native. This extended native compilation to the Linux, macOS, and Windows desktop platforms.[15] Earlier developers could create new tools using only Android or iOS devices. With this extension, developers could deploy a program into self-contained executables. The Dart SDK doesn't need to be installed to run these self-contained executables.[16] The Flutter toolkit integrates Dart, so it can compile on small services like backend support.[17][18]\n\nDart 3.0 was released in May 2023[19] with changes to the type system to require sound null safety. This release included new features like records, patterns,[20] and class modifiers.[21]\n\nDart can compile to WebAssembly since version 3.4.[22]\n\nSpecification\n\n[edit]\n\nDart released the 5th edition of its language specification on April 9, 2021.[23] This covers all syntax through Dart 2.10. A draft of the 6th edition includes all syntax through 2.13.[24] Accepted proposals for the specification and drafts of potential features can be found in the Dart language repository on GitHub.[25]\n\nECMA International formed technical committee, TC52,[26] to standardize Dart. ECMA approved the first edition of the Dart language specification as ECMA-408[27] in July 2014 at its 107th General Assembly.[28] Subsequent editions were approved in December 2014,[29] June 2015, and December 2015.[27]\n\nDeploying apps\n\n[edit]\n\nThe Dart software development kit (SDK) ships with a standalone Dart runtime. This allows Dart code to run in a command-line interface environment. The SDK includes tools to compile and package Dart apps.[30] Dart ships with a complete standard library allowing users to write fully working system apps like custom web servers.[31]\n\nDevelopers can deploy Dart apps in six ways:\n\nDart deployment methods Deployment type Target platform Platform-\n\nspecific Requires\n\nDart VM Compile\n\nspeed Execution\n\nspeed JavaScript Browser No No Slow Fast WebAssembly[22][32] Browser No No Slow Fast Self-contained executable macOS, Windows, Linux Yes No Slow Fast Ahead-of-time module macOS, Windows, Linux Yes No Slow Fast Just-in-time module macOS, Windows, Linux Yes Yes Fast Slow Portable module macOS, Windows, Linux No Yes Fast Slow\n\nDeploying to the web\n\n[edit]\n\nDart 3 can deploy apps to the web as either JavaScript or WebAssembly apps. Dart supports compiling to WebAssembly as of May 2024 .\n\nJavaScript\n\n[edit]\n\nTo run in mainstream web browsers, Dart relies on a source-to-source compiler to JavaScript. This makes Dart apps compatible with all major browsers. Dart optimizes the compiled JavaScript output to avoid expensive checks and operations. This results in JavaScript code that can run faster than equivalent code handwritten in pure JavaScript.[33]\n\nThe first Dart-to-JavaScript compiler was dartc. It was deprecated in Dart 2.0.\n\nThe second Dart-to-JavaScript compiler was frog.[34] Written in Dart, it was introduced in 2013 and deprecated in 2020. This should not be confused with Dart Frog,[35] an open-source Dart framework for building backend systems from Very Good Ventures.\n\nThe third Dart-to-JavaScript compiler is dart2js. Introduced in Dart 2.0,[36] the Dart-based dart2js evolved from earlier compilers. It intended to implement the full Dart language specification and semantics. Developers use this compiler for production builds. It compiles to minified JavaScript.\n\nThe fourth Dart-to-JavaScript compiler is dartdevc.[37] Developers could use this compiler for development builds. It compiles to human-readable JavaScript. On March 28, 2013, the Dart team posted an update on their blog addressing Dart code compiled to JavaScript with the dart2js compiler,[38] stating that it now runs faster than handwritten JavaScript on Chrome's V8 JavaScript engine for the DeltaBlue benchmark.[39]\n\nPrior to Dart 2.18, both dart2js and dartdevc could be called from the command line. Dart 2.18 folded these functions into the Dart SDK. This removed the direct command line wrappers but kept the two compilers. The webdev serve command calls the dartdevc compiler. The webdev build command calls the dart2js compiler.\n\nThe Dart SDK compiles to JavaScript in two ways.\n\nTo debug code, run webdev serve to compile a larger JavaScript file with human-readable code. Dart-generated JavaScript can be debugged using Chrome only.\n\n$cd <dart_app_directory> $ webdev serve[--debug][-o <target.js>]\n\nTo create production apps, run webdev build to compile a minified JavaScript file.\n\n$cd <dart_app_directory> $ webdev build[-o <target.js>]\n\nWebAssembly\n\n[edit]\n\nWith the Dart 3.22 release, Google announced support for compiling Dart code to WebAssembly.[22] Full support for Wasm requires adoption of the WasmGC[40] feature into the Wasm standard. Chrome 119[41] supports WasmGC. Firefox[42] 120 and later could support WasmGC, but a current bug is blocking compatibility.[43] Safari[44] and Microsoft Edge are integrating WasmGC support.\n\nDeploying to native platforms\n\n[edit]\n\nDart can compile to native machine code for macOS, Windows, and Linux as command line tools. Dart can compile apps with user interfaces to the web, iOS, Android, macOS, Windows, and Linux using the Flutter framework.\n\nSelf-contained executable\n\n[edit]\n\nSelf-contained executables include native machine code compiled from the specified Dart code file, its dependencies, and a small Dart runtime. The runtime handles type checking and garbage collection. The compiler produces output specific to the architecture on which the developer compiled it. This file can be distributed as any other native executable.\n\n$ dart compile exe <source.dart> -o <target_app> Generated: <target_app> $ ./<target_app>\n\nAhead-of-time module\n\n[edit]\n\nWhen compiled ahead of time,[45] Dart code produces portable, performant, and platform-specific modules. It includes all dependent libraries and packages the app needs plus a small Dart runtime. This increases its compilation time. The compiler outputs an app specific to the architecture on which it was compiled.\n\n$ dart compile aot-snapshot <source.dart> Generated <target_app.aot> $ dartaotruntime <target_app.aot>\n\nJust-in-time module\n\n[edit]\n\nWhen compiled just in time, Dart code produces performant modules that compile fast. This module needs the Dart VM included with the SDK to run. The compiler loads all parsed classes and compiled code into memory the first time the app runs. This speeds up any subsequent run of the app. The compiler outputs an app specific to the architecture on which it was compiled.\n\n$ dart compile jit-snapshot <source.dart> Compiling <source.dart> to jit-snapshot file <target_app.jit> Hello world! $ dart run <target_app.jit> Hello world!\n\nDart kernel module\n\n[edit]\n\nWhen compiled as a kernel module, Dart code produces a machine-independent format called the Dart Intermediate Representation (Dart IR). The Dart IR bytecode format can work on any architecture that has a Dart VM. This makes this format very portable and quick to compile, but less performant than other compilation outputs.\n\n$ dart compile kernel <source.dart> Compiling <source.dart> to kernel file <target_app>.dill. $ dart run <target_app>.dill\n\nConcurrency\n\n[edit]\n\nTo achieve concurrency, Dart uses isolated, independent workers that do not share memory, but use message passing,[46] similarly to Erlang processes (also see actor model). Every Dart program uses at least one isolate, which is the main isolate. Since Dart 2, the Dart web platform no longer supports isolates, and suggests developers use Web Workers instead.[47]\n\nNull safety\n\n[edit]\n\nStarting with Dart 2.12, Dart introduced sound null safety.[48] This serves as a guarantee that variables cannot return a null value unless it has explicit permission. Null safety prevents the developer from introducing null-pointer exceptions, a common, but difficult to debug, error. With Dart 3.0, all code must follow sound null safety.\n\nData storage\n\n[edit]\n\nSnapshot files, a core part of the Dart VM, store objects and other runtime data.[46]\n\nScript snapshots\n\nDart programs can be compiled into snapshot files containing all of the program code and dependencies preparsed and ready to execute, allowing fast startups.\n\nFull snapshots\n\nThe Dart core libraries can be compiled into a snapshot file that allows fast loading of the libraries. Most standard distributions of the main Dart VM have a prebuilt snapshot for the core libraries that is loaded at runtime.\n\nObject snapshots\n\nDart uses snapshots to serialize messages that it passes between isolates. As a very asynchronous language, Dart uses isolates for concurrency.[49] An object generates a snapshot, transfers it to another isolate, then the isolate deserializes it.\n\nEditors\n\n[edit]\n\nOn November 18, 2011, Google released Dart Editor, an open-source program based on Eclipse components, for macOS, Windows, and Linux-based operating systems.[50] The editor supports syntax highlighting, code completion, JavaScript compiling, running web and server Dart applications, and debugging.\n\nOn August 13, 2012, Google announced the release of an Eclipse plugin for Dart development.[51]\n\nOn April 18, 2015, Google retired the Dart Editor in favor of the JetBrains integrated development environment (IDE).[52] Android Studio, IntelliJ IDEA, PyCharm, PhpStorm and WebStorm support a Dart plugin.[53] This plugin supports many features such as syntax highlighting, code completion, analysis, refactoring, debugging, and more. Other editors include plugins for Dart[54] including Sublime Text,[55] Atom,[56] Emacs,[57] Vim[58] and Visual Studio Code.[59]\n\nChrome Dev Editor\n\n[edit]\n\nIn 2013, the Chromium team began work on an open source, Chrome App-based development environment with a reusable library of GUI widgets, codenamed Spark.[60] The project was later renamed as Chrome Dev Editor.[61] Built in Dart, it contained Spark which is powered by Polymer.[62]\n\nIn June 2015, Google transferred the CDE project to GitHub as a free software project and ceased active investment in CDE.[63] The Chrome Dev Editor project was archived on April 24, 2021.[64]\n\nDartPad\n\n[edit]\n\nTo provide an easier way to start using Dart, the Dart team created DartPad at the start of 2015. This online editor allows developers to experiment with Dart application programming interfaces (APIs) and run Dart code. It provides syntax highlighting, code analysis, code completion, documentation, and HTML and CSS editing.[65]\n\nThe Dart DevTools, written in Dart,[66] include debugging and performance tools.\n\nFlutter\n\n[edit]\n\nGoogle introduced Flutter for native app development. Built using Dart, C, C++ and Skia, Flutter is an open-source, multi-platform app UI framework. Prior to Flutter 2.0, developers could only target Android, iOS and the web. Flutter 2.0 released support for macOS, Linux, and Windows as a beta feature.[67] Flutter 2.10 released with production support for Windows[68] and Flutter 3 released production support for all desktop platforms.[69] It provides a framework, widgets, and tools. This framework gives developers a way to build and deploy mobile, desktop, and web apps.[70] Flutter works with Firebase[71] and supports extending the framework through add-ons called packages. These can be found on their package repository, pub.dev.[72] JetBrains also supports a Flutter plugin.[73]\n\nExample\n\n[edit]\n\nA Hello, World! example:\n\nvoidmain(){ print('Hello, World!'); }\n\nA simple for-loop:[74]\n\nvoidmain(){ for(vari=1;i<=10;i++){ print(i); } }\n\nA function to calculate the nth Fibonacci number:\n\nvoidmain(){ vari=20; print('fibonacci($i) = ${fibonacci(i)}'); } /// Computes the nth Fibonacci number. intfibonacci(intn){ returnn<2?n:(fibonacci(n-1)+fibonacci(n-2)); }\n\nA simple class:\n\n// Import the math library to get access to the sqrt function. // Imported with `math` as name, so accesses need to use `math.` as prefix. import'dart:math'asmath; // Create a class for Point. classPoint{ // Final variables cannot be changed once they are assigned. // Declare two instance variables. finalnumx,y; // A constructor, with syntactic sugar for setting instance variables. // The constructor has two mandatory parameters. Point(this.x,this.y); // A named constructor with an initializer list. Point.origin() :x=0, y=0; // A method. numdistanceTo(Pointother){ vardx=x-other.x; vardy=y-other.y; returnmath.sqrt(dx*dx+dy*dy); } // Example of a \"getter\". // Acts the same as a final variable, but is computed on each access. numgetmagnitude=>math.sqrt(x*x+y*y); // Example of operator overloading Pointoperator+(Pointother)=>Point(x+other.x,y+other.y); // When you instantiate a class such as Point in Dart 2+, new is // an optional word } // All Dart programs start with main(). voidmain(){ // Instantiate point objects. varp1=Point(10,10); print(p1.magnitude); varp2=Point.origin(); vardistance=p1.distanceTo(p2); print(distance); }\n\nInfluences from other languages\n\n[edit]\n\nDart belongs to the ALGOL language family.[75][failed verification] Its members include C, Java, C#, JavaScript, and others.\n\nThe method cascade syntax was adopted from Smalltalk.[76] This syntax provides a shortcut for invoking several methods one after another on the same object.\n\nDart's mixins were influenced by Strongtalk[citation needed][77][78] and Ruby.\n\nDart makes use of isolates as a concurrency and security unit when structuring applications.[79] The Isolate concept builds upon the Actor model implemented in Erlang.[80]\n\nIn 2004, Gilad Bracha (who was a member of the Dart team) and David Ungar first proposed Mirror API for performing controlled and secure reflection in a paper.[81] The concept was first implemented in Self.\n\nSee also\n\n[edit]\n\nComputer programming portal\n\nFree and open-source software portal\n\nGoogle Web Toolkit\n\nTypeScript, a strongly-typed programming language that transpiles to JavaScript\n\nFlutter, an open-source UI software development kit for cross-platform applications\n\nReferences\n\n[edit]\n\nBibliography\n\n[edit]"
    }
}