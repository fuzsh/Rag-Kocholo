{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 51,
    "data": {
        "url": "https://www.jetbrains.com/help/idea/coding-assistance-in-groovy.html",
        "read_more_link": "",
        "language": "en",
        "title": "Work with Groovy code in the editor",
        "top_image": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_code_completion_import.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_inspections.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_live_templates.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_intention_settings.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_intention_edit_settings.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_convert_to_multiline.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_convert_to_single_and_break.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/gstring_to_string.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/set_or_remove_explicit_type.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_add_expl_param.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/Convert_at_CompileStatic.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/intention_convert_at_CompileStatic.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_change_to_dynamic.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.gutter.recursiveMethod.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/recursive_calls_indicator.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_nonNull_annotation.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/groovy_ginq.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "IntelliJÂ IDEA Help",
        "canonical_link": "https://www.jetbrains.com/help/idea/coding-assistance-in-groovy.html",
        "text": "Code completion\n\nWhen you access Basic Completion by pressing Ctrl+Space, you get basic suggestions for variables, types, methods, expressions, for a parameter name you get type suggestions and so on. When you call Basic Completion twice, it shows you more results.\n\nThe Smart Completion feature is aware of the expected type and data flow, and offers the options relevant to the context. To call Smart Completion, press Ctrl+Shift+Space. When you call Smart Completion twice, it shows you more results, including chains.\n\nTo let IntelliJ IDEA complete a statement for you, press Ctrl+Shift+Enter. Statement Completion will automatically add the missing parentheses, brackets, braces and the necessary formatting.\n\nThe Postfix Completion feature lets you transform an already typed expression to another one, based on the postfix you type after a dot.\n\nFor more information, refer to Auto-Completing Code.\n\nRefactoring basics\n\nIntelliJ IDEA offers a comprehensive set of automated code refactorings that lead to significant productivity gains when used correctly. Firstly, don't bother selecting anything before you apply a refactoring. IntelliJ IDEA is smart enough to figure out what statement you're going to refactor, and only asks for confirmation if several choices are possible.\n\nAction\n\nShortcut\n\nRename\n\nShift+F6\n\nExtract variable or type\n\nCtrl+Alt+V\n\nExtract field\n\nCtrl+Alt+F\n\nExtract a constant\n\nCtrl+Alt+C\n\nExtract a method\n\nCtrl+Alt+M\n\nExtract a parameter\n\nCtrl+Alt+P\n\nInline\n\nCtrl+Alt+N\n\nCopy\n\nF5\n\nMove\n\nF6\n\nRefactor this\n\nCtrl+Alt+Shift+T\n\nFor more information, refer to Code refactoring.\n\nGroovy inspections\n\nInspections are built-in static code analysis tools that help you find probable bugs, locate dead code, detect performance issues, and improve the overall code structure.\n\nTo check and configure the available Groovy inspections, go to the Editor | Inspections page of settings Ctrl+Alt+S.\n\nMost inspections not only tell you where a problem is, but also provide quick fixes to deal with it right away. Press Alt+Enter to choose a quick-fix.\n\nInspections that are too complex to be run on-the-fly are available when you perform code analysis for the entire project. You can do this in one of the following two ways: by selecting Code | Running Code Cleanup with profile ''{0}'' from the main menu, or by selecting Code|Analyze Code | Run Inspection by Name to run an inspection by its name.\n\nNote that while inspections provide quick-fixes for code that has potential problems, intentions help you apply automatic changes to code that is correct. To get a list of intentions applicable to the code at the caret, press Alt+Enter.\n\nFor more information, refer to Code inspections."
    }
}