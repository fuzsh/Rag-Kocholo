{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 31,
    "data": {
        "url": "https://softwareengineering.stackexchange.com/questions/21987/how-is-intellij-better-than-eclipse",
        "read_more_link": "",
        "language": "en",
        "title": "How is IntelliJ better than Eclipse?",
        "top_image": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "meta_img": "https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba",
        "images": [
            "https://cdn.sstatic.net/Sites/softwareengineering/Img/logo.svg?v=e86f7d5306ae",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/wWgD6.jpg?s=64",
            "https://www.gravatar.com/avatar/232628cea0e6482f1afb285a92ebe6f7?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/z7FUt.jpg?s=64",
            "https://i.sstatic.net/ERZgz.jpg?s=64",
            "https://i.sstatic.net/rUrgql1k.png?s=64",
            "https://www.gravatar.com/avatar/b27f8daa3a46791e71ae237728381168?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d3273de0781f1661b06b3050d7ea76db?s=64&d=identicon&r=PG",
            "https://softwareengineering.stackexchange.com/posts/21987/ivc/249a?prg=9dabf279-4609-482e-acd5-ff43b4143080"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-11-28T01:25:19",
        "summary": "",
        "meta_description": "I know there have been questions like What is your favorite editor/IDE?, but none of them have answered this question: Why spend the money  on IntelliJ when Eclipse is free?\n\nI'm personally a big",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/softwareengineering/Img/favicon.ico?v=c4f35a1e3900",
        "meta_site_name": "Software Engineering Stack Exchange",
        "canonical_link": "https://softwareengineering.stackexchange.com/questions/21987/how-is-intellij-better-than-eclipse",
        "text": "I work with Intellij (9.0.4 Ultimate) and Eclipse (Helios) every day and Intellij beats Eclipse every time.\n\nHow? Because Intellij indexes the world and everything just works intuitively. I can navigate around my code base much, much faster in Intellij. F3 (type definition) works on everything - Java, JavaScript, XML, XSD, Android, Spring contexts. Refactoring works everywhere and is totally reliable (I've had issues with Eclipse messing up my source in strange ways). CTRL+G (where used) works everywhere. CTRL+T (implementations) keeps track of the most common instances that I use and shows them first.\n\nCode completion and renaming suggestions are so clever that it's only when you go back to Eclipse that you realise how much it was doing for you. For example, consider reading a resource from the classpath by typing getResourceAsStream(\"/ at this point Intellij will be showing you a list of possible files that are currently available on the classpath and you can quickly drill down to the one you want. Eclipse - nope.\n\nThe (out of the box) Spring plugin for Intellij is vastly superior to SpringIDE mainly due to their code inspections. If I've missed out classes or spelled something wrong then I'm getting a red block in the corner and red ink just where the problem lies. Eclipse - a bit, sort of.\n\nOverall, Intellij builds up a lot of knowledge about your application and then uses that knowledge to help you write better code, faster.\n\nDon't get me wrong, I love Eclipse to bits. For the price, there is no substitute and I recommend it to my clients in the absence of Intellij. But once I'd trialled Intellij, it paid for itself within a week so I bought it, and each of the major upgrades since. I've never looked back.\n\nI hear the difference with IntelliJ is that they are much more likely to fix and close bugs that you submit. That could make a big difference if there is some Eclipse bug that is blocking you.\n\nOn the other hand, you cannot look at IDEs in isolation; you need to look at the ecosystem. Here, I think Eclipse has an advantage (similar to Firefox's advantage over Chrome*): There are many more plug-ins available, and developers are much more likely to write an Eclipse plug-in than otherwise.\n\n[Tangent: *For Firefox I'm thinking of Zotero and HTTPS-Everywhere. I use both Chrome and Firefox, but some things Chrome just can't handle. Also, when making handouts, I really do need print preview.]\n\nDisclaimer\n\nThis is limited to Android development only (In Java obviously).\n\nI am coming to this with some limited knowledge of Eclipse and IntelliJ both; however, I have recently had to decide on a development environment for Android. It would seem that the first clear choice would be to use Eclipse since Google supports it with their ADT plugin. Unfortunately, I found it terribly clunky to get around since I am used to Visual Studio (2010, more recently 2012). I have always used ReSharper with Visual Studio so I decided to give IntelliJ a try. After about 10 minutes I realized that I had made the right decision.\n\nIntelliJ, as some have stated, indexes everything. The intellisense was a joy to work with and the intelligence surrounding suggestions was excellent. The debugging experience I found to be a pleasure and quite honestly, I really couldn't live without the code analysis. I know a lot of purists would have a problem with that kind of thing but I don't care. I have to push out projects very quickly for lots of people so sometimes it's just nice to run the code anaylsis and see what the IDE suggests. Whether or not you take those suggestions is another story but I didn't find anything like this in Eclipse.\n\nSome also say that there is no Android designer in the current version of IntelliJ. This is certainly the case but I wouldn't ever use it anyway. I am debugging on a device most of the time so it doesn't matter. I get to see the interface and play with it everytime I run the program. Anyway, from a traditionally \"non-Java\" guy I have to say that Java is particularly nice as compared to Eclipse.\n\nYou need to demonstrate vividly and without doubt that for the tasks you need to do on a daily basis, IntelliJ allows for a substantially amount of time and effort saved as opposed to Eclipse (and NetBeans).\n\nThis will require you to do some research to find out what that might be, and then construct a demonstration showing this to the people who can decide how to work.\n\nMy suspicion is that you will find this a rather hard task to do, as Eclipse these days can do quite a bit, reasonably well. If you find killer points, please share - I'm sure plenty want to know.\n\nGoogle just recently announced that it is moving Android development to IntelliJ.\n\nThere is a reason for this. I have been using Eclipse as an environment to teach courses for the past few years in both C++ and Android/JAVA. I have watched the quality of Eclipse deteriorate to something approaching unusable. In Fall, 2012, I adopted Eclipse Juno for my course and it was an unmitigated disaster. Not only was the program incredibly sluggish and loaded with bugs, it had several user interface changes that were beyond stupid. I now use it as a case study in bad user interface design.\n\nI cannot recommend Eclipse to anyone at this point in time. The bug database has gotten so large that there is no chance they will ever address even a small fraction of them.\n\nI don't know of solid feature-by-feature blows, but one thing that I've discovered with in-and-out use of the IntelliJ environment for about a decade is that the design teams at JetBrains have done a great job of both having the IDE \"index the world\" as well as keep the indexing and autocomplete functions both responsive as well as consistent - I don't typically think about it, but with the responsiveness plus the number of keyboard shortcuts (and the ability to map more), IntelliJ makes it very easy to build \"muscle memory\" when using the editor.\n\nIt's not a small thing when you can write code, autocomplete, compile and test without your fingers leaving the keyboard, and in a way that doesn't feel like a stereotypical sluggish Java app."
    }
}