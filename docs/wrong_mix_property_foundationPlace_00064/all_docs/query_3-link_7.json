{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 7,
    "data": {
        "url": "https://www.jetbrains.com/help/idea/discover-intellij-idea.html",
        "read_more_link": "",
        "language": "en",
        "title": "IntelliJ IDEA overview",
        "top_image": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/idea/2024.1/ij_recent_files.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/recent_locations_popup.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/ij_file_structure.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/ij_find_action.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/basicCodeCompletion.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/smartTypeCompletion.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/refactoring_invoke.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/inspection-fix.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/vcs_operations_popup.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/local_history_restore_code.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "IntelliJÂ IDEA Help",
        "canonical_link": "https://www.jetbrains.com/help/idea/discover-intellij-idea.html",
        "text": "Supported languages\n\nDevelopment of modern applications involves using multiple languages, tools, frameworks, and technologies. IntelliJ IDEA is designed as an IDE for JVM languages but numerous plugins can extend it to provide a polyglot experience.\n\nJVM languages\n\nUse IntelliJ IDEA to develop applications in the following languages that can be compiled into the JVM bytecode, namely:\n\nJava\n\nKotlin\n\nScala\n\nGroovy\n\nOther languages\n\nPlugins add support for some of the most popular languages, namely:\n\nPython (full PyCharm functionality)\n\nRuby (full RubyMine functionality)\n\nPHP (full PhpStorm functionality)\n\nSQL (full DataGrip functionality)\n\nGo (full GoLand functionality)\n\nJavaScript (full WebStorm functionality)\n\nTypeScript (full WebStorm functionality)\n\nThymeleaf\n\nJSON\n\nMarkdown\n\nHTML\n\nXML and XSL\n\nXPath and XSLT\n\nVelocity and FreeMarker\n\nStylesheets (CSS, Less, Sass)\n\nDart\n\nYou can browse JetBrains Marketplace to find an official plugin that adds support for almost any language, framework or technology used today, or for third-party plugins. For more information about managing plugins, refer to Install plugins.\n\nDo I need a language plugin for IntelliJ IDEA or a separate IDE?\n\nIntelliJ IDEA Ultimate is a superset of most IntelliJ platform-based IDEs. If the bundled language plugins are enabled, it includes support for all technologies that are available within our more specific IDEs, such as PyCharm, WebStorm, PhpStorm, and so on.\n\nSo, for example, if your application's codebase is mainly in Java, but it also uses Python scripts, we recommend using IntelliJ IDEA in combination with the bundled Python plugin. If your codebase is mainly in Python, PyCharm is the right IDE for you.\n\nUser Interface\n\nIntelliJ IDEA provides an editor-centric environment. It follows your context and brings up the necessary tools automatically to help you minimize the risk of interrupting the developer's flow.\n\nTake a guided tour around IntelliJ IDEA user interface.\n\nErgonomic design and customizable appearance\n\nOne of the best things about IntelliJ IDEA is its tunability. You can configure virtually anything: the IDE appearance, the layout of tool windows and toolbars, code highlighting, and more. There are also numerous ways you can fine-tune the editor and customize its behavior to speed up navigation and get rid of any extras that distract you from code.\n\nConfigure the colors and fonts for your source code, console output, debugger information, search results, and more. You can choose from a number of predefined color schemes or customize a scheme to create a unique working environment.\n\nLearn how to configure the editor settings, including appearance, font, code formatting, and more.\n\nCustomize menus and toolbars to spare the annoyance of looking for an action among a dozen buttons you never use.\n\nEnable the new UI that was designed to reduce visual complexity, provide easy access to essential features, and progressively disclose complex functionality.\n\nShortcuts for everything\n\nIn IntelliJ IDEA, you have shortcuts for nearly every action, including selection and switching between the editor and various tool windows.\n\nUse the most useful shortcuts to invoke frequent actions without switching your focus from the editor and tune your keymap to assign custom shortcuts for your favorite commands.\n\nWatch this video to learn about some of the most useful shortcuts:\n\nSupport for Chinese, Japanese, and Korean\n\nYou can use IntelliJ IDEA not only in English. By installing a language plugin, you can change the language of the IDE user interface to Chinese, Japanese, or Korean.\n\nTo install a language pack plugin, follow the instructions in Install plugins.\n\nNavigation and search\n\nIntelliJ IDEA provides quick navigation not only inside source code files but also throughout the entire project.\n\nOne of the most useful shortcuts that is worth remembering is double Shift that brings up the Search Everywhere dialog: start typing and IntelliJ IDEA will look for your search string among all files, classes, and symbols that belong to your project, and even among the IDE actions.\n\nHere are some of the most useful navigation shortcuts:\n\nAction\n\nShortcut\n\nSearch everywhere\n\nDouble Shift\n\nGo to file\n\nCtrl+Shift+N\n\nGo to class\n\nCtrl+N\n\nGo to symbol\n\nCtrl+Alt+Shift+N\n\nGo to declaration\n\nCtrl+B\n\nFor more information about navigating through the source code, refer to Source code navigation, and learn the most useful shortcuts that help you quickly switch between the editor and various tool windows, switch focus, jump to the Navigation bar, and so on.\n\nRecent files and locations\n\nNormally, you work with a small subset of files at a time and need to switch between them quickly. The Recent Files action is a real time-saver here. Press Ctrl+E to see a list of last accessed files. Note that you can also use this action to open any tool window:\n\nApart from jumping to a recent file, you can also get quick access to Recent Locations - that is code snippets you last viewed or edited. Press Ctrl+Shift+E and you'll be able to jump to a particular line you modified lately:\n\nFile structure\n\nPress Ctrl+F12 to open the file structure popup that gives you an overview of all elements used in the current file and lets you jump to any of them:\n\nAlternatively, use the Structure tool window Alt+7.\n\nFind action\n\nIf you don't remember the shortcut or the menu path for an action you want to use, press Ctrl+Shift+A and start typing the action name:\n\nCoding assistance\n\nCode completion\n\nIntelliJ IDEA helps you speed up the coding process by providing context-aware code completion.\n\nBasic completion helps you complete the names of classes, methods, fields, and keywords within the visibility scope:\n\nType-Matching completion suggests the most relevant symbols applicable in the current context when IntelliJ IDEA can determine the appropriate type:\n\nFor more information about the different types of code completion available in IntelliJ IDEA with examples and productivity tips, refer to Code completion.\n\nRefactorings\n\nIntelliJ IDEA offers a comprehensive set of automated code refactorings that lead to significant productivity gains. For example, when you rename a class, the IDE will update all references to this class throughout your project.\n\nYou don't even need to bother to select anything before you apply a refactoring. IntelliJ IDEA is smart enough to figure out the statement you're going to refactor. It only asks for confirmation if several choices are possible. Press Ctrl+Alt+Shift+T to open a list of refactorings available in the current context:\n\nFor a full list of available refactorings with usage scenarios and the before and after examples, refer to the Refactoring code section.\n\nLearn some of the most useful refactoring shortcuts:\n\nAction\n\nShortcut\n\nRefactor this\n\nCtrl+Alt+Shift+T\n\nRename\n\nShift+F6\n\nExtract variable\n\nCtrl+Alt+V\n\nExtract field\n\nCtrl+Alt+F\n\nExtract a constant\n\nCtrl+Alt+C\n\nExtract a method\n\nCtrl+Alt+M\n\nExtract a parameter\n\nCtrl+Alt+P\n\nInline\n\nCtrl+Alt+N\n\nCopy\n\nF5\n\nMove\n\nF6\n\nStatic code analysis\n\nIntelliJ IDEA provides a set of inspections that are built-in static code analysis tools. They help you find potential bugs, locate dead code, detect performance issues, and improve the overall code structure.\n\nInspections not only tell you where a problem is but also provide quick fixes that help you deal with it right away. Click the red bulb next to the highlighted code, or press Alt+Enter to choose a fix:\n\nApart from quick-fixes, IntelliJ IDEA also provides intention actions that help you apply automatic changes to code that is correct. For example, you can inject a language, add Java annotations, add JavaDoc, convert HTML or XML tags, and much more. To view a full list of intention actions, in the Settings dialog (Ctrl+Alt+S) , go to Editor | Intentions.\n\nCode generation\n\nIntelliJ IDEA provides multiple ways to generate common code constructs and recurring elements, which helps you increase productivity by delegating routine tasks to the IDE. This includes generating code from predefined or custom code templates, generating wrappers, getters and setters, automatic pairing of characters, and more. Press Alt+Insert to open a popup with the available constructs you can generate from your caret position. For more information, refer to Generate code.\n\nApart from providing smart navigation and coding assistance, IntelliJ IDEA integrates the essential developer tools and lets you debug, analyze, and version the code base of your applications from within the IDE.\n\nDebugger\n\nIntelliJ IDEA provides a built-in JVM debugger. It lets you get and analyze runtime information, which is useful for diagnosing issues and getting a deeper understanding of how a program operates. It enables you to:\n\nSuspend the program execution to examine its behavior using breakpoints. Multiple types of breakpoints, together with conditions and filters, allow you to specify the exact moment when an application needs to be paused.\n\nPlay with the program state by modifying variable values, evaluate expressions, and so on.\n\nExamine variable values, call stacks, thread states, and so on.\n\nControl the step-by-step execution of the program.\n\nSee Tutorial: Debug your first Java application to learn the basics of debugging and play with the debugger features in the IDE.\n\nProfiler\n\nFor CPU and allocation profiling, IntelliJ IDEA provides integration with the following profilers:\n\nJava Flight Recorder Ã¢ÂÂ a standard profiling tool shipped as part of the JDK.\n\nAsync Profiler Ã¢ÂÂ a very accurate profiler that can also collect native call and memory allocation data.\n\nBy default, IntelliJ IDEA runs both profilers in parallel to provide the most accurate results. While it is possible to use the supported profilers separately, the combined configuration that you get out of the box is a better choice for most scenarios. This approach leverages the advantages of both profilers and abstracts you from any setup whatsoever unless you have very specific requirements.\n\nTerminal\n\nIntelliJ IDEA includes a built-in terminal for working with a command-line shell from inside the IDE. For example, if you're used to executing Git commands from the command line, you can run them from the Terminal instead of invoking these actions from the menu.\n\nThe Terminal runs with your default system shell, but it also supports a number of other shells, such as cmd.exe, bash, sh, and so on.\n\nIntelliJ IDEA comes with a fully-functional Gradle and Maven integration that allows you to automate your building process, packaging, running tests, deployment, and other activities.\n\nWhen you open an existing Gradle or Maven project or create a new one, IntelliJ IDEA detects and automatically downloads all the required repositories and plugins, so you virtually don't need to configure anything and can focus solely on the development process. You can edit build.gradle and pom.xml files directly from the editor and configure the IDE to automatically sync all changes to the build configurations.\n\nFor more information about working with Gradle and Maven projects in IntelliJ IDEA, refer to Gradle and Maven."
    }
}