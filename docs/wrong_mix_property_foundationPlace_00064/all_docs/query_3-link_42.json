{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 42,
    "data": {
        "url": "https://developer.android.com/jetpack/androidx/releases/navigation",
        "read_more_link": "",
        "language": "en",
        "title": "Android Developers",
        "top_image": "https://developer.android.com/static/images/social/android-developers.png",
        "meta_img": "https://developer.android.com/static/images/social/android-developers.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/lockup.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/lockup.svg",
            "https://developer.android.com/_static/android/images/logo-x.svg",
            "https://www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png",
            "https://developer.android.com/_static/android/images/logo-linkedin.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/lockup-google-for-developers.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v1698cdd3153b47734bb6d9d8688c4490898207543be76b2c5805f109c27c7695/android/images/favicon.svg",
        "meta_site_name": "Android Developers",
        "canonical_link": "https://developer.android.com/jetpack/androidx/releases/navigation",
        "text": "Stay organized with collections Save and categorize content based on your preferences.\n\nNavigation\n\nNavigation is a framework for navigating between 'destinations' within an Android application that provides a consistent API whether destinations are implemented as Fragments, Activities, or other components.\n\nLatest Update Stable Release Release Candidate Beta Release Alpha Release July 10, 2024 2.7.7 - 2.8.0-beta05 -\n\nDeclaring dependencies\n\nTo add a dependency on Navigation, you must add the Google Maven repository to your project. Read Google's Maven repository for more information.\n\nAdd the dependencies for the artifacts you need in the build.gradle file for your app or module:\n\nGroovy\n\ndependencies { def nav_version = \"2.7.7\" // Java language implementation implementation \"androidx.navigation:navigation-fragment:$nav_version\" implementation \"androidx.navigation:navigation-ui:$nav_version\" // Kotlin implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\" implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\" // Feature module Support implementation \"androidx.navigation:navigation-dynamic-features-fragment:$nav_version\" // Testing Navigation androidTestImplementation \"androidx.navigation:navigation-testing:$nav_version\" // Jetpack Compose Integration implementation \"androidx.navigation:navigation-compose:$nav_version\" }\n\nKotlin\n\ndependencies { val nav_version = \"2.7.7\" // Java language implementation implementation(\"androidx.navigation:navigation-fragment:$nav_version\") implementation(\"androidx.navigation:navigation-ui:$nav_version\") // Kotlin implementation(\"androidx.navigation:navigation-fragment-ktx:$nav_version\") implementation(\"androidx.navigation:navigation-ui-ktx:$nav_version\") // Feature module Support implementation(\"androidx.navigation:navigation-dynamic-features-fragment:$nav_version\") // Testing Navigation androidTestImplementation(\"androidx.navigation:navigation-testing:$nav_version\") // Jetpack Compose Integration implementation(\"androidx.navigation:navigation-compose:$nav_version\") }\n\nSafe Args\n\nTo add Safe Args to your project, include the following classpath in your top level build.gradle file:\n\nGroovy\n\nbuildscript { repositories { google() } dependencies { def nav_version = \"2.7.7\" classpath \"androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version\" } }\n\nKotlin\n\nbuildscript { repositories { google() } dependencies { val nav_version = \"2.7.7\" classpath(\"androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version\") } }\n\nYou must also apply one of two available plugins.\n\nTo generate Java language code suitable for Java or mixed Java and Kotlin modules, add this line to your app or module's build.gradle file:\n\nGroovy\n\nplugins { id 'androidx.navigation.safeargs' }\n\nKotlin\n\nplugins { id(\"androidx.navigation.safeargs\") }\n\nAlternatively, to generate Kotlin code suitable for Kotlin-only modules add:\n\nGroovy\n\nplugins { id 'androidx.navigation.safeargs.kotlin' }\n\nKotlin\n\nplugins { id(\"androidx.navigation.safeargs.kotlin\") }\n\nYou must have android.useAndroidX=true in your gradle.properties file as per Migrating to AndroidX.\n\nFor information on using Kotlin extensions, see the ktx documentation.\n\nFor more information about dependencies, see Add Build Dependencies.\n\nFeedback\n\nYour feedback helps make Jetpack better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues in this library before you create a new one. You can add your vote to an existing issue by clicking the star button.\n\nCreate a new issue\n\nSee the Issue Tracker documentation for more information.\n\nVersion 2.8\n\nVersion 2.8.0-beta05\n\nJuly 10, 2024\n\nandroidx.navigation:navigation-*:2.8.0-beta05 is released. Version 2.8.0-beta05 contains these commits.\n\nBug Fixes\n\nFix singleTop navigation crash when nested NavGraphs share the same startDestination route. (I17b94, b/294408596)\n\nVersion 2.8.0-beta04\n\nJune 26, 2024\n\nandroidx.navigation:navigation-*:2.8.0-beta04 is released. Version 2.8.0-beta04 contains these commits.\n\nBug Fixes\n\nNavigation now supports navigating with empty strings in path arguments. (Ic5dbd, b/339481310)\n\nImprove error message for custom serializers declared directly on class fields via @Serializable(with =...) to clarify that this is currently an unsupported feature. (I052b0, b/341319151)\n\nSavedStateHandleFactory test api can now be used in non-android tests but will require Robolectric to support argument parsing with Bundles. (I76cdc, b/340966212)\n\nFixed crash from restoring state when resuming the app after process death with using Type-Safe Navigation in Compose. (Ia8f38, b/341801005)\n\nFixed an issue in Navigation Compose where after canceling the Predictive Back Gesture, the NavBackStackEntry that the user returns to never returns back to the RESUMED Lifecycle State. This also ensures the returning destination correctly animates back in instead of snapping into place after a fling. (I97a0c, b/346608857)\n\nWhen using Predictive back with Navigation Compose, the destination being popped will now have the proper z-order, correctly animating on top of the incoming destination. (I2077b, b/345993681)\n\nVersion 2.8.0-beta03\n\nJune 12, 2024\n\nandroidx.navigation:navigation-*:2.8.0-beta03 is released. Version 2.8.0-beta03 contains these commits.\n\nAPI Changes\n\nCollectionNavType has a new abstract emptyCollection() method. Override this to handle an empty collection passed in as an argument. (Ie4d84, b/341723133)\n\nBug Fixes\n\nAdded documentation on NavType.serializeAsValue and serializeAsValues to highlight that the final outputs should be Uri encoded. (Ida6bd, b/344943214)\n\nFixed crash when calling toRoute<T> with a null CollectionNavType argument. When navigating with a null CollectionNavType, the output argument will be the default value declared on your Serializable class, or the return value of emptyCollection() if there is no default value. (I84158, Id630f, b/342672856)\n\nVersion 2.8.0-beta02\n\nMay 29, 2024\n\nandroidx.navigation:navigation-*:2.8.0-beta02 is released. Version 2.8.0-beta02 contains these commits.\n\nBug Fixes\n\nFixed ClassCastException crash when using NavBackStackEntry.toRoute with a nullable custom NavType. (I1c29b, b/342239473)\n\nFixed Navigation back stack state restoration issues caused when attempting to restore a back stack entry that is not reachable via id from the current destination. Since routes are backed by ids, destinations built with routes were also affected. This also fixes a crash caused by calling clearBackStack() that had the same underlying issue. (I423c3, b/339908057)\n\nVersion 2.8.0-beta01\n\nMay 14, 2024\n\nandroidx.navigation:navigation-*:2.8.0-beta01 is released. Version 2.8.0-beta01 contains these commits.\n\nAPI Changes\n\nSavedStateHandle.toRoute() now takes in a typeMap parameter for custom argument types. (Ie39fb, b/339026523)\n\nAdded a test API to navigation-testing to to create a SavedStateHandle from a Kotlin Serializable object. (Id4867, b/339080702)\n\nBug Fixes\n\nMissing parameter docs for Navigation Kotlin DSL functions have been added. (I26a36)\n\nVersion 2.8.0-alpha08\n\nMay 1, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha08 is released. Version 2.8.0-alpha08 contains these commits.\n\nSafe Args in Navigation Compose\n\nThe work to support compile time type safety for Navigation Compose and users of the Navigation Kotlin DSL based on Kotlin Serialization has completed and previously experimental APIs are now stable. (Iea94d, I0eb0d, I873b7, I3a64b, I6c3a2, I11f0b, Ic3032, I8d394, I95710, Ice060, Id0e55, I45f8b, Idcdaf, If5380, I08b23, Ia5c59, b/188693139)\n\nThis functionality uses Kotlin Serialization to allow you to define destinations in your navigation graph via type safe objects and data classes:\n\n// Define a home destination that doesn't take any arguments @Serializable object Home // Define a profile destination that takes an ID @Serializable data class Profile(val id: String) // Now define your NavHost using type safe objects NavHost(navController, startDestination = Home) { composable<Home> { HomeScreen(onNavigateToProfile = { id -> navController.navigate(Profile(id)) }) } composable<Profile> { backStackEntry -> val profile: Profile = backStackEntry.toRoute() ProfileScreen(profile) } }\n\nSee the Navigation Compose meet Type Safety blog post for more information.\n\nNew Features\n\nThe navigation-fragment-compose artifact now provides a LocalFragment composition local to composable methods within a ComposableFragment. (If35e5)\n\nNavType now has built-in support for Lists of Int, String, Boolean, Float, and Long. (I4b6dd, Ia914c, b/188693139)\n\nVersion 2.8.0-alpha07\n\nApril 17, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha07 is released. Version 2.8.0-alpha07 contains these commits.\n\nNew Features\n\nAdds a new navigation-fragment-compose artifact that includes a ComposableNavHostFragment alternative to NavHostFragment that allows you to add composable destinations to your Navigation XML files. Each composable destination must be expressed as a top-level, no argument @Composable method whose fully qualified name is used as the android:name attribute on each destination. When navigating to one of these destinations, a containing fragment is created to display the composable content. (I0ef2e, b/265480755)\n\n// In HomeScreen.kt @Composable fun HomeScreen() { // Your Composable content here }\n\n// In your navigation.xml <composable android:id=\"@+id/home_screen\" android:name=\"com.example.HomeScreenKt\\$HomeScreen\" />\n\nAPI Changes\n\nSupport for Safe Args in Navigation Compose using an approach based on Kotlin Serialization continued. These APIs are not finished and are marked with the ExperimentalSafeArgsApi annotation. This annotation will be removed when the entire API surface is complete in a future release. (Iefd95, I409c8, I5b5ac, I7e753, I960f8, I3eabd, I8ed5a, Ied2c9, I9b73c, I554db, Ib3aba, Ia668d, b/188693139)\n\nVersion 2.8.0-alpha06\n\nApril 3, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha06 is released. Version 2.8.0-alpha06 contains these commits.\n\nAPI Changes\n\nSupport for Safe Args in Navigation Compose using an approach based on Kotlin Serialization has begun. These APIs are not finished and are marked with the ExperimentalSafeArgsApi annotation. This annotation will be removed when the entire API surface is complete in a future release. (I644e7, I98896, I2a1c5, I43a51, I836a1, Ic5eec, I39407, I24e41, If9e14, Ibb13e, If44d3, Icb70f, I8972f, I1d432, Icf32b, I20a14, I262aa, I7de99, I35990, I1033d, b/188693139)\n\nBug Fixes\n\nNavHost now used Alignment.TopStart as the default contentAlignment argument. This puts it in line with the default for AnimatedContent and fixes some instances of an unexpected scale from center transition. (I09e72, b/330111602)\n\nWhen flicking the predictive back gesture while using Navigation Compose, the NavHost will now correctly complete the custom transition instead of immediately finishing. (I99017, b/327292110)\n\nVersion 2.8.0-alpha05\n\nMarch 20, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha05 is released. Version 2.8.0-alpha05 contains these commits.\n\nNew Features\n\nYou can now pass arguments to NavGraph's startDestination directly in the startDestination route without relying on defaultValue. This applies to nested NavGraph startDestinations as well. (I0e0b5, b/109505019, b/188693139)\n\nAPI Changes\n\nAdded new abstract CollectionNavType<T> class, a subclass of NavType<T> for collection-based arguments such as list, arrays, maps. (Ic6d63, b/188693139)\n\nAll of the default NavType arrays (IntArrayType, LongArrayType, FloatArrayType, BoolArrayType, and StringArrayType) are now of type CollectionNavType (Idcf79, b/188693139)\n\nNavType now provides a new open valueEquals API that determines if two values of the same type are equal to one another. (I6cb97, b/327229511)\n\nBug Fixes\n\nQuery parameters in deep links now allows values in the form of curly braces around argument name (i.e. {argName}) as valid values for string-based NavTypes. This fixes an issue where such a value would be considered invalid (or absence of value) for all types. (I18302, b/327274038)\n\nNavController functions that support routes such as navigate or popBackStack can now properly match routes filled with arguments of Array NavTypes. (Iea805, b/327229511)\n\nVersion 2.8.0-alpha04\n\nMarch 6, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha04 is released. Version 2.8.0-alpha04 contains these commits.\n\nNew Features\n\nYou can now specify the SizeTranform for your transitions in Navigation Compose by defining them as part of the initialization for the composable and/or navigation functions. (I91062, b/296912651)\n\nBug Fixes\n\nFixed an issue where NavHost in Compose Navigation failed to properly show the transition when using System Back without a gesture. (Iceeae, b/325998468)\n\nVersion 2.8.0-alpha03\n\nFebruary 21, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha03 is released. Version 2.8.0-alpha03 contains these commits.\n\nAPI Changes\n\nNavBackStackEntry.savedStateHandle is now marked as @MainThread as it uses code that is required to be on the main thread anyway. (Ibb988, b/299523245)\n\nBug Fixes\n\nFixed an issue in Navigation that caused NavGraph ViewModels to be DESTROYED too soon because the associated entry’s ViewModel was not part of the saved state. (Ib6bb7, b/317581849)\n\nDependency Update\n\nNavigation Compose now depends on Compose 1.7.0-alpha03.\n\nVersion 2.8.0-alpha02\n\nFebruary 7, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha02 is released. Version 2.8.0-alpha02 contains these commits.\n\nNew Features\n\nNavigation Compose now provides support for Predictive in-app back via the new SeekableTransitionState APIs from compose-animation. This allows you to use the back gesture to see the previous destination with your custom Transition before deciding to either commit the transaction via the completed gesture or cancel. (I8b8e9)\n\nVersion 2.8.0-alpha01\n\nJanuary 24, 2024\n\nandroidx.navigation:navigation-*:2.8.0-alpha01 is released. Version 2.8.0-alpha01 contains these commits.\n\nBug Fixes\n\nFixed BackStackState leak where multiple saveState calls on a destination would result in multiple states to be saved, but only the first one could be restored. (I598b0, b/309559751)\n\nFixed an issue where non-String arguments would not be properly displayed when using the NavigationUI helpers to populate the title of app bars. (#636, b/316676794)\n\nDependency Update\n\nNavigation Compose now depends on Compose 1.7.0-alpha01 fixing an issue that could cause an unexpected scale animation. (b/297258205)\n\nExternal Contribution\n\nThanks SimonMarquis for fixing the display issue for non-String arguments when using the NavigationUI helpers to populate the title of app bars.\n\nVersion 2.7.7\n\nVersion 2.7.7\n\nFebruary 7, 2024\n\nandroidx.navigation:navigation-*:2.7.7 is released. Version 2.7.7 contains these commits.\n\nBug Fixes\n\nBackported from Navigation 2.8.0-alpha01: Fixed BackStackState leak where multiple saveState() calls on a single NavBackStackEntry would result in multiple states being saved, but only the first saved state could be restored. (I598b0, b/309559751)\n\nBackported from Navigation 2.8.0-alpha01: Fixed an issue where non-String arguments would not be properly displayed when using the NavigationUI helpers to populate the title of app bars. (#636, b/316676794)\n\nExternal Contribution\n\nThanks SimonMarquis for fixing the display issue for non-String arguments when using the NavigationUI helpers to populate the title of app bars.\n\nVersion 2.7.6\n\nVersion 2.7.6\n\nDecember 13, 2023\n\nandroidx.navigation:navigation-*:2.7.6 is released. Version 2.7.6 contains these commits.\n\nBug Fixes\n\nThe NavGraph equals() function now correctly considers the nodes of the other graph instead of just the calling one. This will ensure that graphs that have nodes with different ids will no longer be considered equal (I401cb, b/311414915)\n\nVersion 2.7.5\n\nVersion 2.7.5\n\nNovember 1, 2023\n\nandroidx.navigation:navigation-*:2.7.5 is released. Version 2.7.5 contains these commits.\n\nPerformance Improvements\n\nGreatly improved the performance (both in terms of time and number of allocations) of comparing two graphs. This means that calls such as setGraph which internally compare the new graph to the existing one are much faster and result in fewer skipped frames. Thank you Michał Z for the thorough analysis that led to this improvement. (I6ad62)\n\nNavHost will now render the start destination on the first composition pass instead of needing to wait for the second pass to read updated state. (I439a7, b/304852206)\n\nBug Fixes\n\nFixed an issue where your back stack would be popped if you called setGraph more than once with the exact same graph only if there was a destination in your graph that contained an action linking two destinations. (Ieaed7)\n\nDialogs that were navigated to and dismissed in quick succession will no longer leak into the list of NavController.visibleEntries. (I67586, b/287969970)\n\nWhen an entry is popped followed by a configuration change, the entry's ViewModel will now be cleared properly if saveState is false. (Idf242, b/298164648)\n\nFixed an issue where NavController could handle the same deep link more than once if the back stack was entirely empty before a configuration change or call to setGraph only when the incoming Intent had the FLAG_ACTIVITY_NEW_TASK flag set. (I73c7f)\n\nDependency Updates\n\nNavigation with Fragments now depends on Fragment 1.6.2, fixing an issue where the ViewModel instances of nested fragments would not be cleared when calling clearBackStack.\n\nVersion 2.7.4\n\nVersion 2.7.4\n\nOctober 4, 2023\n\nandroidx.navigation:navigation-*:2.7.4 is released. Version 2.7.4 contains these commits.\n\nNew Features\n\nAdded support for popUpTo to use routes with arguments to allow popping back to a specific entry that uses those exact arguments, matching the support found in popBackStack. (I731f4, b/299255572)\n\nBug Fixes\n\nFix issue where interrupting a navigate with another navigate with popUpTo will cause FragmentNavigator to crash. (I3c848, b/301887045)\n\nFixed issue where system back press caused the currentDestination to not be updated correctly to match the displayed Fragment. (Id0d6c, b/289877514)\n\nDialogFragment lifecycle will now properly move to RESUMED state when the dialog above it is dismissed. (I88f0d, b/301811387)\n\nVersion 2.7.3\n\nVersion 2.7.3\n\nSeptember 20, 2023\n\nandroidx.navigation:navigation-*:2.7.3 is released. Version 2.7.3 contains these commits.\n\nBug Fixes\n\nFixed an issue in Navigation with Fragments that caused the visibleEntries list to contain incorrect entries. (I5caa9, b/288520638)\n\nFixed an issue that caused Floating Window destination (i.e. Dialogs, Bottomsheets, etc) to never get a RESUMED Lifecycle callback. (I3b866, b/287505132)\n\nVersion 2.7.2\n\nVersion 2.7.2\n\nSeptember 6, 2023\n\nandroidx.navigation:navigation-*:2.7.2 is released. Version 2.7.2 contains these commits.\n\nBug Fixes\n\nNavigation now depends on Lifecycle 2.6.2, fixing an interaction between rememberSaveable and Navigation Compose’s NavHost that would cause the rememberSaveable state of destinations and any ViewModel owned SavedStateHandle instances from being properly restored after process death and recreation. (b/298059596, b/289436035)\n\nFixed an issue when showing multiple dialogs in Navigation Compose simultaneously where the partially obscured dialogs (e.g., not the topmost dialog) would be in the CREATED Lifecycle state rather than the STARTED state. (aosp/2728520, b/289257213)\n\nFixed an issue when showing multiple dialogs in Navigation Compose simultaneously where dismissing the topmost dialog would cause the new topmost dialog to be stuck in the STARTED Lifecycle state rather than correctly moving to RESUMED. (aosp/2629401, b/286371387)\n\nNavigation Safe Args no longer instantiates its task eagerly if it is not actually being executed. (I0e385, b/260322841)\n\nDependency Update\n\nNavigation Compose now depends on Compose 1.5.1.\n\nVersion 2.7.1\n\nVersion 2.7.1\n\nAugust 23, 2023\n\nandroidx.navigation:navigation-*:2.7.1 is released. Version 2.7.1 contains these commits.\n\nBug Fixes\n\nFixed an issues in Navigation with Compose where when using a Scaffold it was possible to get an error for trying to access a Lifecycle.State.DESTROYED ViewModel. (I1dc11, b/268422136)\n\nVersion 2.7.0\n\nVersion 2.7.0\n\nAugust 9, 2023\n\nandroidx.navigation:navigation-*:2.7.0 is released. Version 2.7.0 contains these commits.\n\nImportant changes since 2.6.0\n\nAnimations from Accompanist\n\nNow that AnimatedContent is stable, we were able to move the code from Accompanist Navigation Animation back into Navigation Compose itself.\n\nThis means all of the support for setting custom transitions that existed in AnimatedNavHost is directly supported in NavHost.\n\nNo additional changes will be made to Accompanist Navigation Animation and we’ll be formally deprecating it soon, along with guidance on how to migrate back to Navigation Compose itself, but it'll be the inverse of the migration guide with no other API changes required if you're already using the latest Accompanist alpha (0.31.2-alpha). (b/197140101)\n\nBug Fixes\n\nNavHost in Navigation Compose now correctly intercepts system back calls even after the Activity has been STOPPED and RESUMED. (Icb6de, b/279118447)\n\nDependency Updates\n\nNavigation now depends on Compose 1.5.0 up from 1.1.0.\n\nVersion 2.7.0-rc01\n\nJuly 26, 2023\n\nandroidx.navigation:navigation-*:2.7.0-rc01 is released. Version 2.7.0-rc01 contains these commits.\n\nBug Fixes\n\nFixed an issue where the EnterTransition and ExitTransition lambdas created as part of the NavHost could potentially remain in memory even after the NavHost is removed from composition. (I893d0)\n\nKnown Issues\n\nThere is an issue from Navigation 2.6.x that when navigating with popUpTo it is possible to cause an IllegalArgumentException. It is possible that this exception can be avoided by restructuring your graph, similar to the advice suggested here. (b/287133013)\n\nVersion 2.7.0-beta02\n\nJune 28, 2023\n\nandroidx.navigation:navigation-*:2.7.0-beta02 is released. Version 2.7.0-beta02 contains these commits.\n\nBug Fixes\n\nNavigation Compose now has the right z-order for custom transitions that use navigate with the popUpTo option.(/Ib1c3a, b/285153947)\n\nVersion 2.7.0-beta01\n\nJune 7, 2023\n\nandroidx.navigation:navigation-*:2.7.0-beta01 is released. Version 2.7.0-beta01 contains these commits.\n\nBug Fixes\n\nNavHost in Navigation Compose now correctly intercepts system back calls even after the Activity has been STOPPED and RESUMED. (Icb6de, b/279118447)\n\nVersion 2.7.0-alpha01\n\nMay 24, 2023\n\nandroidx.navigation:navigation-*:2.7.0-alpha01 is released. Version 2.7.0-alpha01 contains these commits.\n\nAnimations from Accompanist\n\nNow that AnimatedContent is stable, we were able to move the code from Accompanist Navigation Animation back into Navigation Compose itself.\n\nThis means all of the support for setting custom transitions that existed in AnimatedNavHost is directly supported in NavHost.\n\nNo additional changes will be made to Accompanist Navigation Animation and we’ll be formally deprecating it soon, along with guidance on how to migrate back to Navigation Compose itself, but it'll be the inverse of the migration guide with no other API changes required if you're already using the latest Accompanist alpha (0.31.2-alpha). (b/197140101)\n\nBug Fixes\n\nFrom Navigation 2.6.0-rc02: Fixed an issue with Navigation in Fragments where navigating with popUpTo and popping a fragment off the back stack without recreating its view would cause system back to stop working. (Ieb8d4, b/281726455)\n\nDependency Updates\n\nNavigation now depends on Compose 1.5.0-beta01.\n\nVersion 2.6.0\n\nVersion 2.6.0\n\nJune 7, 2023\n\nandroidx.navigation:navigation-*:2.6.0 is released. Version 2.6.0 contains these commits.\n\nImportant changes to Navigation since 2.5.0\n\nNavBackStackEntry's arguments and the arguments passed to an OnDestinationChangedListener are now only a copy of the immutable arguments that were created when you navigated to the destination. This means any changes made to those Bundles will not be reflected in subsequent accesses to the arguments or other OnDestinationChangedListener instances.\n\nNavDeepLink now supports default values for arrays, which allows support for repeated query params that will map to the argument's array type. NavType also now includes a default method which can be overridden to combine two parsed values.\n\nCustom subclasses of NavType can now override serializeAsValue to serialize a value into a String, allowing both serialization and deserialization (via parseValue) to be entirely encapsulated in the NavType class. StringType now overrides this method to call Uri.encode on the given String.\n\nImportant changes to Navigation Compose since 2.5.0\n\nWhen previewing a composable with NavHost, it will now show the NavGraph's startDestination by default.\n\nNavController.popBackStack(route), NavController.getBackStackEntry(route), NavController.clearBackStack(route) now all support routes with arguments partially or fully filled in. Note that the arguments have to be an exact match with the entry's arguments.\n\nAttempting to create an empty NavDeepLink using the navDeepLink Kotlin DSL will now result in a lint warning indicating that a deep link needs an uri, action, and/or mimetype to be valid.\n\nImportant changes to Navigation with Fragments since 2.5.0\n\nNavHostFragment no longer intercepts the system back button itself. This allows the underlying FragmentManager to handle system back. This allows Fragment 1.7.0-alpha01 and higher to provide an In-App Predictive Back animation on Android U devices.\n\nWhen using Navigation with Fragments, attempting to manually do a FragmentTransaction that adds a fragment to the FragmentManager's back stack will now throw an IllegalArgumentException. You should always add fragments via the navigate() API.\n\nWhen using the exact string ${applicationId} as the placeholder in the app:data and app:dataPattern attributes in the activity element of a navigation XML file, the placeholder will be automatically filled in with the packageName of the context upon inflation.\n\nThe FragmentNavigator now uses the transition APIs when navigating and popping NavBackStackEntries. This means that the NavBackStackEntry Lifecycle will now wait for the entering and exiting fragment special effects to complete before moving their final Lifecycle.State.\n\nThe DialogFragmentNavigator now uses the transition APIs when navigating and popping NavBackStackEntries. This means that the NavBackStackEntry Lifecycle will now wait for the DialogFragment Lifecycle to move to DESTROYED before moving to DESTROYED itself.\n\nNavHostFragment now allows you to retrieve the NavController as soon as the NavHostFragment is attached to the FragmentManager, rather than only after onCreate().\n\nNavigation's support for Dynamic Feature Modules now depend on the granular Play Feature Delivery Library.\n\nNavigation Safe Args now depends on Android Gradle Plugin version 7.3.0. This means it is now only compatible with versions 7.3.0+.\n\nImportant changes to NavigationUI since 2.5.0\n\nWhen passing the ID of a navigation graph to AppBarConfiguration (such as via a Menu), NavigationUI now only considers the start destination of that navigation graph as a top level destination, rather than incorrectly marking every destination within the graph as a top level destination. The behavior of passing the ID of an individual destination is unchanged. This same functionality is available to your own code via the new isTopLevelDestination function on AppBarConfiguration.\n\nThe setupWithNavController integrations in NavigationUI for working with the top app bar will now parse R.string values for ReferenceType arguments found in your android:label into their String values instead of outputting the auto-generated resource integer.\n\nNavigationUI now provides logs when it fails to navigate via a selected MenuItem.\n\nVersion 2.6.0-rc02\n\nMay 24, 2023\n\nandroidx.navigation:navigation-*:2.6.0-rc02 is released. Version 2.6.0-rc02 contains these commits.\n\nBug Fixes\n\nFixed an issue with Navigation in Fragments where navigating with popUpTo and popping a fragment off the back stack without recreating its view would cause system back to stop working. (Ieb8d4, b/281726455)\n\nVersion 2.6.0-rc01\n\nMay 10, 2023\n\nandroidx.navigation:navigation-*:2.6.0-rc01 is released. Version 2.6.0-rc01 contains these commits.\n\nBug Fixes\n\nFixed an issue in Navigation with fragments where removing a fragment via navigate with popUpTo in its onResume() lifecycle callback would cause an IllegalStateException. (I21884, b/279644470)\n\nVersion 2.6.0-beta01\n\nApril 19, 2023\n\nandroidx.navigation:navigation-*:2.6.0-beta01 is released. Version 2.6.0-beta01 contains these commits.\n\nNew Features\n\nNavBackStackEntry now provides a custom toString implementation. (Iff00b)\n\nBug Fixes\n\nWhen using Navigation with Fragments, attempting to manually do a FragmentTransaction that adds a fragment to the FragmentManager's back stack will now throw an IllegalArgumentException. You should always add fragments via the navigate() API. (I6d38e)\n\nWhen there is a navigate that adds an entry and a popBackStack that removes it in the same frame, the resulting top entry on the back stack will now consistently make it back to the RESUMED Lifecycle.State. (Id8067, b/276495952)\n\nVersion 2.6.0-alpha09\n\nApril 5, 2023\n\nandroidx.navigation:navigation-*:2.6.0-alpha09 is released. Version 2.6.0-alpha09 contains these commits.\n\nBug Fixes\n\nFixed checks for invalid route such that if a NavDestination contains non-nullable NavArgument, this destination's route must contain placeholders for args named the same as the non-nullable NavArgument. (Ic62bf, b/274697949)\n\nDeeplink navigations based on Action/MimeType will now fail if the navigation operation is missing a non-nullable NavArgument required by the NavDestination that the Action/MimeType matches with. (Ibfa17, b/271777424)\n\nWhen NavController sets a graph with the same route and destinations as the previous graph, it now properly replaces its current graph nodes and its back stack destinations with new instances. This fixes a crash when using onLaunchSingleTop without saving state in Navigation Compose. This also fixes an error where navigating to destinations associated with the root graph builds and incorrect back stack. (I5bc58, b/275258161, b/275407804)\n\nVersion 2.6.0-alpha08\n\nMarch 22, 2023\n\nandroidx.navigation:navigation-*:2.6.0-alpha08 is released. Version 2.6.0-alpha08 contains these commits.\n\nNew Features\n\nNavHostFragment now allows you to retrieve the NavController as soon as the NavHostFragment is attached to the FragmentManager, rather than only after onCreate(). (Ic6382, b/220186282)\n\nBug Fixes\n\nFixed a NullPointerException when popping a nested graph that includes a non-nullable argument. (6b3581, b/249988437)\n\nWhen using system back after doing a navigate with popUpTo, the state of the NavController will pop to the correct entry. (I3a8ec, b/270447657)\n\nFragmentNavigator will now properly pop entries when the back stack is popped via system back or popBackStack() and whether or not the transaction uses effects for the fragment. (I81bdf)\n\nAdding fragments to the FragmentNavigator's FragmentManager without using navigation will no longer cause a crash. (b17204, b/274167493)\n\nDependency Updates\n\nNavigation now depends on Lifecycle 2.6.1. (586fe7)\n\nNavigation now depends on SavedState 1.2.1. (078e4e)\n\nNavigation now depends on ProfileInstaller 1.3.0. (512f0c)\n\nVersion 2.6.0-alpha07\n\nMarch 8, 2023\n\nandroidx.navigation:navigation-*:2.6.0-alpha07 is released. Version 2.6.0-alpha07 contains these commits.\n\nBug Fixes\n\nThe getBackStackEntry, popBackStack, clearBackStack API variants that take routes now take route patterns with nullable arguments and nullable query params (I22294, b/269302500)\n\nFixed an issue where calling clearBackStack() from the NavController would not clear the saved state in the fragment manager associated with the cleared back stack. (Ic1cce, b/271190202)\n\nFixed a regression in 2.6.0-alpha06 that caused the wrong MenuItem in the BottomNavigationView to be highlighted when using System back between tabs. (I634f6, b/270447657)\n\nFixed regression in 2.6.0-alpha06 that caused NavBackStackEntrys not to be moved to the RESUMED state when using Animations. (Ib3589, b/269646882)\n\nVersion 2.6.0-alpha06\n\nFebruary 22, 2023\n\nandroidx.navigation:navigation-*:2.6.0-alpha06 is released. Version 2.6.0-alpha06 contains these commits.\n\nNew features\n\nWhen previewing a composable with NavHost, it will now show the NavGraph's startDestination by default. (I2b89f)\n\nAPI Changes\n\nAll NavController navigate overloads are now annotated with @MainThread to ensure that they are called on the main thread. (I2c0b0, b/263427111)\n\nBug Fixes\n\nFixed a crash when attempting to navigate while using Dynamic Fragment Navigation. (I3ee29, b/268360479)\n\nFixed bug where navigating to another fragment via system back button does not update bottom bar to the correct selected item (If559f, b/269044426)\n\nKnown Issues\n\nWhen using Navigation with Fragments, the NavBackStackEntry's Lifecycle fails to reach RESUMED when using Animation APIs. (b/269646882)\n\nWhen using Navigation with Fragments, and navigating with BottomNavigation, if you attempt to restore a back stack with multiple entries, the BottomMenuItem is not correctly updated. (b/270447657)\n\nWhen using Navigation with Fragments, after restoring the state the NavBackStackEntry Lifecycle does not get DESTROYED when its fragment is DESTROYED . (b/270610768)\n\nVersion 2.6.0-alpha05\n\nFebruary 8, 2023\n\nandroidx.navigation:navigation-*:2.6.0-alpha05 is released. Version 2.6.0-alpha05 contains these commits.\n\nNew Features\n\nNavController.popBackStack(route), NavController.getBackStackEntry(route), NavController.clearBackStack(route) now all support routes with arguments partially or fully filled in. Note that the arguments have to be an exact match with the entry's arguments. (Iebd28, Ic678c, I3b37b, b/257514373)\n\nThe FragmentNavigator now uses the transition APIs when navigating and popping NavBackStackEntries. This means that the NavBackStackEntry Lifecycle will now wait for the entering and exiting fragment special effects to complete before moving their final Lifecycle.State. (I3cb19, b/238686802)\n\nThe DialogFragmentNavigator now uses the transition APIs when navigating and popping NavBackStackEntries. This means that the NavBackStackEntry Lifecycle will now wait for the DialogFragment Lifecycle to move to DESTROYED before moving to DESTROYED itself. (I53ee5, b/261213893)\n\nAPI Changes\n\nNavigatorState now provides the prepareForTransition API to allow Navigators to move NavBackStackEntries to intermediate Lifecycle.States. (I42c21, b/238686802)\n\nYou can now access the back stack associated with a NavGraphNavigator or a ComposeNavigator via a backstack property. ComposeNavigator also now exposes the onTransitionComplete() callback to mark a NavBackStackEntry that has executed a navigate or popBackStack operation as complete. (I02062, I718db, b/257519195)\n\nBug Fixes\n\nNavigator state will now no-op when using the push/popWithTransition APIs and the entry is already being handled. (Iadbfa, b/261213893)\n\nWhen using launchSingleTop with a nested NavGraph all destinations starting from original destination to its startDestination will only be properly added to the top of the backstack. (Id4bea, b/253256629)\n\nNavigation will now properly replace the DialogFragment instance when navigating to the same destination with the launchSingleTop flag set to true. (I45b5a, b/149572817)\n\nNavigation SafeArgs will no longer cause a compilation error when using arguments that are exactly 19 characters long. (Id60bc, b/257110095)\n\nVersion 2.6.0-alpha04\n\nNovember 9, 2022\n\nandroidx.navigation:navigation-*:2.6.0-alpha04 is released. Version 2.6.0-alpha04 contains these commits.\n\nNew Features\n\nCustom subclasses of NavType can now override serializeAsValue to serialize a value into a String, allowing both serialization and deserialization (via parseValue) to be entirely encapsulated in the NavType class. StringType now overrides this method to call Uri.encode on the given String. (Ie5213, b/247637434)\n\nNavigationUI now provides logs when it fails to navigate via a selected MenuItem. (I2af5a, b/247730357)\n\nBug Fixes\n\nNavigation deep links are now parsed lazily instead of on graph initialization which could improve app performance at start up. (Iab0ab)\n\nFixed crash caused by navigating up after deep linking to a destination with null default arguments. (I51c24, b/243183636)\n\nDependency Update\n\nNavigation's support for Dynamic Feature Modules now depend on the granular Play Feature Delivery Library. (Ib4ddc)\n\nNavigation Safe Args now depends on Android Gradle Plugin version 7.3.0. This means it is now only compatible with versions 7.3.0+. (I47e49)\n\nVersion 2.6.0-alpha03\n\nOctober 24, 2022\n\nandroidx.navigation:navigation-*:2.6.0-alpha03 is released. Version 2.6.0-alpha03 contains these commits.\n\nBug Fixes\n\nFrom Navigation 2.5.3: NavHost will no longer cause a NoSuchElementException when there is no destination available for the Crossfade to compose. It will now just skip the composition. (Ieb46e, b/253299416)\n\nFrom Navigation 2.5.3: Fixed an issue where saved Compose state (e.g., usages of rememberSaveable) were not being forgotten and removed when a destination was popped off the back stack. (I64949)\n\nDependency Updates\n\nNavigation now depends on Fragment 1.5.4. (Icd424)\n\nVersion 2.6.0-alpha02\n\nOctober 5, 2022\n\nandroidx.navigation:navigation-*:2.6.0-alpha02 is released. Version 2.6.0-alpha02 contains these commits.\n\nBehavior Changes\n\nWhen passing the ID of a navigation graph to AppBarConfiguration (such as via a Menu), NavigationUI now only considers the start destination of that navigation graph as a top level destination, rather than incorrectly marking every destination within the graph as a top level destination. The behavior of passing the ID of an individual destination is unchanged. This same functionality is available to your own code via the new isTopLevelDestination function on AppBarConfiguration. (Ie936e, b/238496771)\n\nBug Fixes\n\nThe navigation:navigation-fragment component now depends on Fragment version 1.5.2. (I00ba4)\n\nThe selected menu item will no longer be updated when navigating to a FloatingWindow destination such as a dialog. (I4cde8, b/240308330)\n\nVersion 2.6.0-alpha01\n\nSeptember 7, 2022\n\nandroidx.navigation:navigation-*:2.6.0-alpha01 is released. Version 2.6.0-alpha01 contains these commits.\n\nNew Features\n\nThe setupWithNavController integrations in NavigationUI for working with the top app bar will now parse R.string values for ReferenceType arguments found in your android:label into their String values instead of outputting the auto-generated resource integer. (I5f803, b/167959935)\n\nNavDeepLink now supports default values for arrays, which allows support for repeated query params that will map to the argument's array type. NavType also now includes a default method which can be overridden to combine two parsed values. (Id68c3, b/209977108)\n\nWhen using the exact string ${applicationId} as the placeholder in the app:data and app:dataPattern attributes in the activity element of a navigation XML file, the placeholder will be automatically filled in with the packageName of the context upon inflation. (Iaabde, b/234223561)\n\nAttempting to create an empty NavDeepLink using the navDeepLink Kotlin DSL will now result in a lint warning indicating that a deep link needs an uri, action, and/or mimetype to be valid. (I08d2f, b/154038883)\n\nAPI Changes\n\nAdded new NavDestination extension function to parse dynamic labels with arguments in the form of android:label=\"{arg}\" into String. Supports ReferenceType arguments by parsing R.string values into their String values. (I07d89, b/236269380)\n\nBehavior Changes\n\nNavBackStackEntry's arguments and the arguments passed to an OnDestinationChangedListener are now only a copy of the immutable arguments that were created when you navigated to the destination. This means any changes made to those Bundles will not be reflected in subsequent accesses to the arguments or other OnDestinationChangedListener instances. (I676f5)\n\nBug Fixes\n\nFrom Navigation 2.5.2: Dynamic Navigation now properly attempts to install Activity destinations from other modules before navigating to them. (Ia2c16, b/240292838)\n\nFrom Navigation 2.5.2: Navigation will now properly replace the Fragment instance when navigating to the same destination and setting the launchSingleTop flag to true. (I5a2f1, b/237374580)\n\nFrom Navigation 2.5.2: Fixed IllegalStateException caused by navigating to a double nested graph that shares a parent with a new popped start destination. (I9f7cb, b/243778589)\n\nVersion 2.5\n\nVersion 2.5.3\n\nOctober 24, 2022\n\nandroidx.navigation:navigation-*:2.5.3 is released. Version 2.5.3 contains these commits.\n\nBug Fixes\n\nNavHost will no longer cause a NoSuchElementException when there is no destination available for the Crossfade to compose. It will now just skip the composition. (Ieb46e, b/253299416)\n\nFixed an issue where saved Compose state (e.g., usages of rememberSaveable) were not being forgotten and removed when a destination was popped off the back stack. (I64949)\n\nVersion 2.5.2\n\nSeptember 7, 2022\n\nandroidx.navigation:navigation-*:2.5.2 is released. Version 2.5.2 contains these commits.\n\nBug Fixes\n\nDynamic Navigation now properly attempts to install Activity destinations from other modules before navigating to them. (Ia2c16, b/240292838)\n\nNavigation will now properly replace the Fragment instance when navigating to the same destination and setting the launchSingleTop flag to true. (I5a2f1, b/237374580)\n\nFixed IllegalStateException caused by navigating to a double nested graph that shares a parent with a new popped start destination. (I9f7cb, b/243778589)\n\nDependency Update\n\nNavigation 2.5.2 now depends on Fragment 1.5.2. (aosp/2178734)\n\nVersion 2.5.1\n\nJuly 27, 2022\n\nandroidx.navigation:navigation-*:2.5.1 is released. Version 2.5.1 contains these commits.\n\nBug Fixes\n\nNavigation Safe Args will no longer cause deprecation warnings in generated classes when using custom argument types that are saved in a Bundle. (Id86ed, b/237725966)\n\nDependency Updates\n\nThe Navigation library now depends on Lifecycle 2.5.1. (Ib4451)\n\nThe Navigation library now depends on Activity 1.5.1. (I3efe8)\n\nThe Navigation library now depends on Fragment 1.5.1. (I56177)\n\nVersion 2.5.0\n\nJune 29, 2022\n\nandroidx.navigation:navigation-*:2.5.0 is released. Version 2.5.0 contains these commits.\n\nImportant changes since 2.4.0\n\nCreationExtras Integration - Navigation now has the ability to provide a stateless ViewModelProvider.Factory via Lifecycle 2.5.0’s CreationExtras.\n\nNavigation SafeArgs\n\nNavigation Safe Args has upgraded the Android Gradle Plugin dependency to rely on 7.0.4, dropping compatibility for AGP versions before 7.0.\n\nAdded support for the namespace build.gradle attribute to be used instead of applicationId.\n\nOther Changes\n\nThe visibleEntries API is no longer experimental and provides a function to retrieve all of the entries whose destination is currently visible according to the NavController.\n\nVersion 2.5.0-rc02\n\nJune 15, 2022\n\nandroidx.navigation:navigation-*:2.5.0-rc02 is released. Version 2.5.0-rc02 contains these commits.\n\nBug Fixes\n\nFixed a crash caused by fast switching between bottom destinations when using the Navigation Compose NavHost. (I3979a, b/234054916)\n\nNavigation SafeArgs will no longer crash when using an applicationIdSuffix and namespace with either no applicationId present, or when the applicationId and namespace differ. (I754b1, b/233119646)\n\nNavArgument now has a custom toString() function to show the internal values of the argument. (I900a8)\n\nVersion 2.5.0-rc01\n\nMay 11, 2022\n\nandroidx.navigation:navigation-*:2.5.0-rc01 is released. Version 2.5.0-rc01 contains these commits.\n\nNew Features\n\nAdded a new lint rule to warn against placing <deeplink> elements inside <activity> elements in your navigation.xml file.(Ic15a5, b/178403185)\n\nBug Fixes\n\nComposable scopes in NavHost and DialogHost are now disposed in the expected order, i.e. inner composabled are disposed before outer composables. (I157e6)\n\nNavigation SafeArgs now uses PathSensitivity.RELATIVE in the ArgumentsGenerationTask to allow for cache relocatability. This means the cache entry can now be re-used from a CI build to a local build. (I5f67c, b/173420454)\n\nThe UnrememberedGetBackStackEntryDetector lint rule has been updated to ensure that the remember call surrounding the call to getBackStackEntry() also passes in a NavBackStackEntry object as a key.(Ib7081, b/227382831)\n\nVersion 2.5.0-beta01\n\nApril 20, 2022\n\nandroidx.navigation:navigation-*:2.5.0-beta01 is released. Version 2.5.0-beta01 contains these commits.\n\nBug Fixes\n\nDialogNavigator now uses popWithTransition when executing a dismiss() call. This fixes a race condition when using a ViewModel within dialog destination that would cause an IllegalStateException when dismissing the Dialog by either using system back or tapping outside of the dialog to exit. (Id7376, b/226552301)\n\nDependency Updates\n\nNavigation now depends on Lifecycle 2.5.0-beta01, fixing an IllegalStateException when nesting one NavHost within another NavHost in a non-primary bottom navigation tab when using multiple back stacks.\n\nVersion 2.5.0-alpha04\n\nApril 6, 2022\n\nandroidx.navigation:navigation-*:2.5.0-alpha04 is released. Version 2.5.0-alpha04 contains these commits.\n\nAPI Changes\n\nvisibleEntries is no longer experimental. (I4829f, b/225394514)\n\nBug Fixes\n\nNavHost now depend on visibleEntries from the NavController to determine which entries to compose. This means that when using nested NavHost the inner NavHost should now properly animate out. (I4ba2b, b/225394514)\n\nThe visibleEntries StateFlow provided by NavController is now based on the entry max Lifecycle state instead of the current Lifecycle state. This means that even if the host lifecycle of the navController goes below STARTED, the list of visible entires will remain the same. (I9e2a8, b/225394514)\n\nSavedStateViewFactory now supports using CreationExtras even when it was initialized with a SavedStateRegistryOwner. If extras are provided, the initialized arguments are ignored. (I6c43b, b/224844583)\n\nNavDeepLink can now parse Uris with a single query parameter with no value. (I0efe8, b/148905489)\n\nEmpty string are now considered as valid arguments in deep links. (I70a0d, b/217399862)\n\nNavigation Safe Args will no longer crash when using namespaces and no AndroidManifest.xml is present. (I17ccf, b/227229815)\n\nVersion 2.5.0-alpha03\n\nFebruary 23, 2022\n\nandroidx.navigation:navigation-*:2.5.0-alpha03 is released. Version 2.5.0-alpha03 contains these commits.\n\nAPI Changes\n\nYou can now pass in CreationExtras to by navGraphViewModels to create a ViewModel. (I29217, b/217618359)\n\nBug Fixes\n\nNavDeepLinks now properly support encoded new line characters embedded in routes/deep link URIs. (I513d1, b/217815060)\n\nCreationExtras will now work correctly when used with NavBackStackEntries to create ViewModels. (I69161, b/217617710)\n\nNavigation Safe Args now supports using the namespace defined in the build.gradle in place of the package in the AndroidManifest. (I659ef, b/217414933)\n\nVersion 2.5.0-alpha02\n\nFebruary 9, 2022\n\nandroidx.navigation:navigation-*:2.5.0-alpha02 is released. Version 2.5.0-alpha02 contains these commits.\n\nBug Fixes\n\nFrom Navigation 2.4.1: The NavHostFragment will now properly set the OnBackPressedDispatcher when using viewbinding with nested graphs. (Ifbb51, b/214577959)\n\nFrom Navigation 2.4.1: When deep linking through multiple nested NavGraphs the back stack will now properly include intermediate start destinations. (I504c0, b/214383060)\n\nVersion 2.5.0-alpha01\n\nJanuary 26, 2022\n\nandroidx.navigation:navigation-*:2.5.0-alpha01 is released. Version 2.5.0-alpha01 contains these commits.\n\nNew Features\n\nNavBackStackEntry now integrates with ViewModel CreationExtras, introduced as part of Lifecycle 2.5.0-alpha01. (Ib9fe2, b/207012490)\n\nBug Fixes\n\nFixed an issue where accessing a ViewModel created via by navGraphViewModels() from a Fragment's onCreate() would fail with an IllegalStateException. (I8a14d)\n\nNavDeepLinks will no longer unnecessarily decode args twice, meaning that the proper args are now passed to your final destination. (I31b0a, b/210711399)\n\nSafe Args\n\nSafe Args now depends on Android Gradle Plugin version 7.0.4. This means that Navigation Safe Args will no longer be compatible with Android Studio versions prior to 7.0, but is now compatible with Android Gradle Plugin 7.1.0 and higher. (I41c88, b/213086135, b/207670704)\n\nVersion 2.4.2\n\nVersion 2.4.2\n\nApril 6, 2022\n\nandroidx.navigation:navigation-*:2.4.2 is released. Version 2.4.2 contains these commits.\n\nBug Fixes\n\nBackported from Navigation 2.5.0-alpha03: NavDeepLinks now properly support encoded new line characters embedded in routes/deep link URIs. (I513d1, b/217815060)\n\nBackported from Navigation 2.5.0-alpha03: Navigation SafeArgs now supports using the namespace defined in the build.gradle in place of the package in the AndroidManifest. (I659ef, b/217414933)\n\nBackported from Navigation 2.5.0-alpha04: Navigation Safe Args will no longer crash when using namespaces and no AndroidManifest.xml is present. (I17ccf, b/227229815)\n\nBackported from Navigation 2.5.0-alpha04: Empty string are now considered as valid arguments in deep links. (I70a0d, b/217399862)\n\nVersion 2.4.1\n\nVersion 2.4.1\n\nFebruary 9, 2022\n\nandroidx.navigation:navigation-*:2.4.1 is released. Version 2.4.1 contains these commits.\n\nBug Fixes\n\nThe NavHostFragment will now properly set the OnBackPressedDispatcher when using viewbinding with nested graphs. (Ifbb51, b/214577959)\n\nWhen deep linking through multiple nested NavGraphs the back stack will now properly include intermediate start destinations. (I504c0, b/214383060)\n\nBackported from Navigation 2.5.0-alpha01: Fixed an issue where accessing a ViewModel created via by navGraphViewModels() from a Fragment's onCreate() would fail with an IllegalStateException. (I8a14d)\n\nBackported from Navigation 2.5.0-alpha01: NavDeepLinks no longer unnecessarily decode args twice, meaning that the properly decoded args are now passed to your final destination. (I31b0a, b/210711399)\n\nBackported from Navigation 2.5.0-alpha01: Safe Args now depends on Android Gradle Plugin version 7.0.4. This means that Navigation Safe Args will no longer be compatible with Android Studio versions prior to 7.0, but is now compatible with Android Gradle Plugin 7.1.0 and higher. (I41c88, b/213086135, b/207670704)\n\nVersion 2.4.0\n\nVersion 2.4.0\n\nJanuary 26, 2022\n\nandroidx.navigation:navigation-*:2.4.0 is released. Version 2.4.0 contains these commits.\n\nImportant changes since 2.3.0\n\nAll Navigation artifacts have been rewritten in Kotlin. This has improved the nullability of classes using generics (such as NavType subclasses). All Kotlin extension functions that used to be part of the -ktx artifacts have been moved to their respective main artifacts. The -ktx artifacts will continue to be published, but are completely empty.\n\nThe navigation-fragment artifact now contains a prebuilt implementation of a two pane layout via the new AbstractListDetailFragment. This fragment uses a SlidingPaneLayout to manage a list pane (which your subclass provides) and a detail pane, which uses a NavHostFragment as its implementation, as seen in our example implementation.\n\nThe currentBackStackEntryAsFlow() method on NavController provides a Flow that emits whenever the current NavBackStackEntry changes. This flow can be used as an alternative to manually managing an OnDestinationChangedListener.\n\nNavController now offers the ability to retrieve a list of all visible NavBackStackEntry instances as a StateFlow via the experimental visibleEntries property.\n\nIt is now possible to extend the NavType class to create custom NavTypes. Custom types are supported only when building your navigation graph programmatically, such as via the Navigation Graph Kotlin DSL.\n\nNavigation now providesfindStartDestination() and getHierarchy() APIs that can be used to help implement custom NavigationUI. findStartDestination() is an extension function on NavGraph that will locate the actual start destination that will be displayed when you navigate to the graph, even if the startDestination is itself a nested NavGraph. getHierarchy() is a function on NavDestination that can be used to verify if a given destination is within the hierarchy of another.\n\nval matchingRoute: Boolean = destination.hierarchy.any { it.route == routeToFind }\n\nNavigationUI methods that took a BottomNavigationView have been updated to instead take its superclass introduced in Material 1.4.0, NavigationBarView. This allows these methods to be used with the NavigationRailView.\n\nWhen inflating an <action> element via XML, animation attributes can use attributes pulled from your theme using the app:enterAnim=\"?attr/transitionEnter\" syntax.\n\nSafe Args now generates a fromSavedStateHandle() method for each NavArgs class. (#122, b/136967621)\n\nclass HomeViewModel(savedStateHandle: SavedStateHandle) : ViewModel() { // Create a HomeDestinationArgs class with type safe accessors for each argument // defined on your destination private val args = HomeDestinationArgs.fromSavedStateHandle(savedStateHandle) }\n\nNavigation Routes and the Kotlin DSL\n\nPrevious versions of Navigation relied on each destination having a constant integer ID that would uniquely identify it from its sibling destinations and allow you to navigate() to that destination either directly or via an action. While this continues to be valid and useful, particularly in cases where you are defining your navigation graph in XML and can use auto-generated R.id constants or Safe Args (which uses those constants to generate code at build time), this system of unique integers did not capture the semantic meaning and expressiveness needed to support fully dynamic graphs built programmatically at runtime via the Navigation Kotlin DSL.\n\nThis release introduces a new option for uniquely identifying a destination in a navigation graph by its route. A route is a String that defines the unique path to a destination. All Kotlin DSL methods that took a destination ID are now deprecated and replaced with an equivalent API that takes a route.\n\nEach route should be treated as the ‘path’ part of a Uri that defines that destination, e.g., home, profile/{userId}, profile/{userId}/friends, etc. When the identity of a destination is associated with a specific piece of content, those dynamic arguments should be part of the route, following the same rules as implicit deep links.\n\nAll NavController APIs that used to only take an ID now have an overload that takes a route String. This includes navigate(), popBackStack(), popUpTo(), and getBackStackEntry().\n\nThis has had some API implications:\n\nThe popUpTo Kotlin property on the Kotlin DSL has been deprecated in favor of popUpToId.\n\nThe getStartDestination() API has been deprecated in favor of getStartDestinationId().\n\nUnlike when navigating by ID, navigating by route follows the same rules as implicit deep links in that you can directly navigate to any destination in any nested graph, ensuring that these routes are usable in multi-module projects without explicitly adding an externally visible deep link to each destination.\n\nNavigation Compose\n\nThe navigation-compose artifact provides integration between the Navigation Component and Jetpack Compose. It uses @Composable functions as the destinations in your application.\n\nThis release provides:\n\nA NavHost composable that allows you to construct your navigation graph via a Kotlin DSL, using composable and dialog destinations, plus support for optional Navigators such as those from Accompanist Navigation Material.\n\nMandatory support for crossfading between destinations. Accompanist Navigation Animation can be used to control the enter and exit transitions using experimental Compose APIs.\n\nScoping of a Lifecycle to each composable destination. Each destination only reaches the RESUMED state when any entering transitions finish and immediately drops to STARTED when any exiting transitions start, thus allowing you to avoid all IllegalStateException and multi-touch issues by only triggering a navigate call when the Lifecycle is RESUMED.\n\nScoping of ViewModel (via the viewModel() API of Lifecycle ViewModel Compose 2.4.0 or hiltViewModel() of Hilt Navigation Compose 1.0.0 at the destination level, providing a scope that survives configuration changes and being on the back stack (when your Composable content is otherwise disposed) and a signal in the ViewModel’s onCleared() that indicates the permanent disposal and cleaning up of state associated with that NavBackStackEntry.\n\nScoping of rememberSaveable state at a destination level, ensuring that all composable state is saved and restored automatically when you return to a destination.\n\nFull support for saving and restoring the state of the NavController and its destination’s state after process death and recreation.\n\nAutomatic integration with the system back button.\n\nSupport for passing arguments, attaching deep links to destinations, and returning a result to previous destinations.\n\nCompose specific helpers in rememberNavController() and currentBackStackEntryAsState() to allow hoisting state and connecting the NavController to composables outside of the NavHost (such as a bottom navigation bar).\n\nval navController = rememberNavController() Scaffold { innerPadding -> NavHost(navController, \"home\", Modifier.padding(innerPadding)) { composable(\"home\") { // This content fills the area provided to the NavHost HomeScreen() } dialog(\"detail_dialog\") { // This content will be automatically added to a Dialog() composable // and appear above the HomeScreen or other composable destinations DetailDialogContent() } } }\n\nSee the Compose Navigation guide for more information.\n\nMultiple back stacks\n\nThe NavController is responsible for managing the back stack of destinations, adding destinations to the back stack when you navigate() to them and removing them when you call popBackStack() or trigger the system back button. The existing NavOptions class and the integration into <action> elements in the navigation graph XML has been expanded to support saving and restoring the back stack.\n\nAs part of this change, the NavigationUI methods of onNavDestinationSelected(), BottomNavigationView.setupWithNavController() and NavigationView.setupWithNavController() now automatically save and restore the state of popped destinations, enabling support for multiple back stacks without any code changes. When using Navigation with Fragments, this is the recommended way to integrate with multiple back stacks.\n\nThe underlying APIs for saving and restoring the state are exposed via a number of surfaces:\n\nIn Navigation XML, the <action> element can now use the boolean attributes of app:popUpToSaveState and app:restoreState to save the state of any destinations popped via app:popUpTo and restore the state associated with the destination passed as the app:destination:\n\n<action android:id=”@+id/swap_stack” app:destination=”@id/second_stack” app:restoreState=”true” app:popUpTo=”@id/first_stack_start_destination” app:popUpToSaveState=”true” />\n\nIn the navOptions Kotlin DSL, you can add the restoreState boolean property and the saveState boolean property on the popUpTo builder:\n\n// Use the navigate() method that takes a navOptions DSL Builder navController.navigate(selectedBottomNavRoute) { launchSingleTop = true restoreState = true popUpTo(navController.graph.findStartDestination().id) { saveState = true } }\n\nIn manually building a NavOptions object via the NavOptions.Builder, you can use the setRestoreState() and new overload to setPopUpTo() that takes an additional saveState parameter.\n\nNavOptions navOptions = new NavOptions.Builder() .setLaunchSingleTop(true) .setRestoreState(true) .setPopUpTo(NavGraph.findStartDestination(navController.getGraph()).getId(), false, // inclusive true) // saveState .build(); navController.navigate(selectedBottomNavId, null, navOptions);\n\nProgrammatic calls to popBackStack() can now include an additional saveState parameter.\n\nYou can use the clearBackStack() method to clear any state that was saved with popBackStack() or popUpToSaveState.\n\nIn all cases, the NavController will save and restore the state of each NavBackStackEntry, including any navigation destination scoped ViewModel instances. The Navigator APIs have been updated to enable each Navigator to support saving and restoring their own state.\n\nBehavior changes\n\nNavDeepLinkBuilder now adds PendingIntent.FLAG_IMMUTABLE to the PendingIntent returned by createPendingIntent(), ensuring that this API works as expected when targeting Android 12.\n\nNavigation now depends on Lifecycle 2.3.1 and now marks setGraph(), popBackStack(), navigateUp(), and navigate(), the methods that update the NavBackStackEntry Lifecycle, as @MainThread, aligning Navigation with the main thread enforcement introduced in Lifecycle 2.3.0.\n\nDeep links now verify that all required arguments (those without default values) are present in the Uri.\n\nNavDeepLink parsed arguments now consider pound signs in the same way as question marks as a separator between path segments, preventing an argument from spanning across the pound sign.\n\nWhen generating actions, Kotlin code generated from Safe Args now puts arguments without default values before those with default values as parameters.\n\nWhen generating arguments, Safe Args now puts parameters without default values before those with default values.\n\nSafe-Args now depends on Android Gradle Plugin 4.2.0. This means you should no longer get the using applicationIdTextResource warning.\n\nKnown issues\n\nFixed in Navigation 2.5.0-alpha01: accessing a ViewModel created via by navGraphViewModels() from a Fragment's onCreate() will fail with an IllegalStateException. (b/213504272)\n\nFixed in Navigation 2.5.0-alpha01: Safe Args 2.4.0 is incompatible with Android Gradle Plugin 7.1.0 and higher. (b/213086135)\n\nDeep linking with multiple nested nav graphs doesn't correctly create the full backstack. (b/214383060)\n\nVersion 2.4.0-rc01\n\nDecember 15, 2021\n\nandroidx.navigation:navigation-*:2.4.0-rc01 is released. Version 2.4.0-rc01 contains these commits.\n\nBehavior changes\n\nNavDeepLink parsed arguments now consider pound signs in the same way as question marks as a separator between arguments. (I21309, b/180042703)\n\nBug Fixes\n\nDeeplinks will no longer ignore arguments with values that are the same as the name of the placeholder. (If8017, b/207389470)\n\nNavController will no longer crash when popping a nested destination using transitions after the NavController has been restored. (I0f7c9, b/205021623)\n\nThe error message when using an invalid startDestination will now default to the start destination's route if one is available. (I86b9d, b/208041894)\n\nNavigation Compose Bug Fixes\n\nFixed potential crash caused by fast switching between the start destination and another destination using bottom nav menu items. (Ic8976, b/208887901)\n\nDialog destination are now properly restored on top of the screen after config changes or process death. (I4c0dc, b/207386169)\n\nFixed an issue where attempting to retrieve a ViewModel from a dialog’s NavBackStackEntry would fail when the dialog was dismissed. (I6b96d, b/206465487)\n\nFixed an issue when using activity destinations with Navigation Compose's NavHost that would result in infinite recompositions. (I8f64c)\n\nFixed a leak in Navigation Compose where it was holding on to a reference of the old activity after a config change or process death. (I4efcb, b/204905432)\n\nSafe Args Bug Fixes\n\nSafeArgs no longer crashes when attempting to restore custom parcelable arrays after process death. (I618e8, b/207315994)\n\nFixed a bug in safe args that would not allow boolean arrays to have a null value. (I8c396, b/174787525)\n\nVersion 2.4.0-beta02\n\nNovember 3, 2021\n\nandroidx.navigation:navigation-*:2.4.0-beta02 is released. Version 2.4.0-beta02 contains these commits.\n\nAPI Changes\n\nThe handling of both explicit and implicit deep links now automatically adds the saveState flag when navigating to another graph, ensuring that code such as NavigationUI.setupWithNavController and code using multiple back stacks works as expected. (Ic8807)\n\nBehavior Changes\n\nDeep link patterns are now compiled lazily in NavDeepLink instead of during inflation. This should improve the inflation time of navigation graphs that include deep links. (b8d257, b/184149935)\n\nBug Fixes\n\nFixed an issue where NavBackStackEntries were being pushed down to Lifecycle.State.CREATED after moving to Lifecycle.State.STARTED when the NavHost is added directly to the activity's setContent(). (Ia5ac1, b/203536683)\n\nFixed a race condition where popping a DialogFragment destination off of the back stack before the dialog was actually shown would not actually dismiss the dialog, resulting in a crash when the errant dialog was manually dismissed by the user. (I687e5)\n\nFixed an issue where the onNavDestinationSelected API on NavigationUI would return true even if you didn't actually navigate() to that navigation graph. It now uses the same logic used internally by setupWithNavController to only select the MenuItem associated with the current destination using the hierarchy of the destination. (I2b053)\n\nVersion 2.4.0-beta01\n\nOctober 27, 2021\n\nandroidx.navigation:navigation-*:2.4.0-beta01 is released. Version 2.4.0-beta01 contains these commits.\n\nNew Features\n\nYou can now use by navGraphViewModel with a route as an alternative to using an ID so as to better support using the Navigation Kotlin DSL with Fragments. (I901e3, b/201446416)\n\nAPI Changes\n\nThe visibleEntries API is now experimental. (I93f6f)\n\nBug Fixes\n\nViewModels will no longer be destroyed when transitions are interrupted by navigating back and forth between the same screens (Id52d8, b/200817333)\n\nNullable NavDeepLink arguments no longer require a default value when adding deep links to NavDestinations. (I5aad4, b/201320030)\n\nNavBackStackEntries now with different Lifecycles are not longer considered equal. This means NavHost will properly recompose all destinations when doing navigation with singleTop and when reselecting bottom menu items. (I1b351, b/196997433)\n\nFixed an issue with AbstractListDetailFragment that caused the layout_width and layout_weight attributes on the list pane returned by onCreateListPaneView() to be incorrectly handled or ignored. (f5fbf3)\n\nThe visual state of dialog destinations now correctly stays in sync with the DialogFragmentNavigator's state. This means that manually calling the asynchronous dismiss() API for DialogFragment now properly clears all dialog destinations above the now dismissed dialog. This does not affect cases where you use popUpTo or popBackStack() to dismiss your dialog. (I77ba2)\n\nAbstractAppBarOnDestinationChangedListener now has clearer error messaging for onDestinationChanged(). (Ie742d)\n\nVersion 2.4.0-alpha10\n\nSeptember 29, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha10 is released. Version 2.4.0-alpha10 contains these commits.\n\nNew Features\n\nNavController now offers the ability to retrieve a list of all visible NavBackStackEntry instances via the visibleEntries StateFlow (Ia964e)\n\nrememberNavController() now takes a optional set of Navigator instances that will be added to the returned NavController to better support optional Navigators such as those from Accompanist Navigation Material. (I4619e)\n\nBug Fixes\n\nDynamic Navigation will no longer crash when the Activity is recreated. (Ifa6a3, b/197942869)\n\nFixed an issue with the system back button that occurs only after popping back to a composable destination that contains a NavHost. (3ed148, b/195668143)\n\nSafeArgs now generates the arguments for fromBundle() and fromSavedStateHandle() in the proper parameter order. (I824a8, b/200059831)\n\nVersion 2.4.0-alpha09\n\nSeptember 15, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha09 is released. Version 2.4.0-alpha09 contains these commits.\n\nNew Features\n\nYou can now use the clearBackStack() method to clear any state that was saved with popBackStack() or popUpToSaveState. (I80a0f)\n\nYou can now pass in a list of arguments and/or deep links to your nested navigation graph's builder and they will automatically be added to the resulting graph. (I8a470, b/182545357)\n\nAPI Changes\n\nThe navArgument Kotlin DSL function is now part of navigation-common instead of navigation-compose. This will require updating imports to continue to use this function. (I1d095)\n\nBehavior Changes\n\nWhen generating arguments, Safe Args now puts parameters without default values before those with default values. (I89709, b/198493585)\n\nBug Fixes\n\nWhen using Navigation Compose, NavGraphs will only be DESTROYED once all their children are DESTROYED. (I86552, b/198741720)\n\nNullable NavDeepLink arguments no longer require a default value. (Ia14ef, b/198689811)\n\nCalling setGraph() with a new graph will now also clear any saved back stacks in addition to its previous behavior of popping the back stack. (I97f96)\n\nFixed an issue where OnDestinationChangedListener instances and the currentBackStackEntryFlow were not notified when using launchSingleTop. (Iaaebc)\n\nDependency Updates\n\nNavigation Compose now depends on Activity Compose 1.3.1. (I05829)\n\nNavigation Compose now depends on Lifecycle ViewModel Compose 2.4.0-beta01. (Ib86a3)\n\nVersion 2.4.0-alpha08\n\nSeptember 1, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha08 is released. Version 2.4.0-alpha08 contains these commits.\n\nNew Features\n\nIt is now possible to extend the NavType class to create custom NavTypes. Custom types are supported only when building your navigation graph programmatically, such as via the Navigation Graph Kotlin DSL. (I78440, b/196871885)\n\nBehavior Changes\n\nWhen generating actions, Kotlin code generated from Safe Args now puts arguments without default values before those with default values as parameters. (Idb697, b/188855904)\n\nDeep links now verify that all required arguments (those without default values) are present in the Uri. (#204, b/185527157)\n\nBug Fixes\n\nUsing getBackStackEntry and previousBackStackEntry inside composable(), in conjunction with remember(), will no longer cause an exception for no destination being on the back stack. (I75138, b/194313238)\n\nNavigation Compose now properly recomposes when changing back stack arguments and using launchSingleTop=true. (Iebd69, b/186392337)\n\nThere will no longer be an ArrayIndexOutOfBoundsException when calling setGraph with a graph with 13 or 29 destinations. (I1a9f1, b/195171984)\n\nThe SafeArgs java generator should no longer cause lint warnings when generating Args classes. (I1a666, b/185843837)\n\nExternal Contribution\n\nThanks ospixd for ensuring that deep links verify that all required arguments (those without default values) are present in the Uri. (#204, b/185527157)\n\nVersion 2.4.0-alpha07\n\nAugust 18, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha07 is released. Version 2.4.0-alpha07 contains these commits.\n\nBug Fixes\n\nNavigation Compose now properly saves state after configuration changes and when changing graphs while using the multiple back stack feature. (If5a3d, b/195141957)\n\nRe-selecting the same tab when using navigation compose with multiple back stacks will no longer result in a blank screen. (I860dc, b/194925622)\n\nNavHost now observes for changes in the Lifecycle.State of NavBackStackEntrys which means using a NavHost in a fragment now will properly be recomposed as the lifecycle changes instead of resulting in a blank screen. (I4eb85, b/195864489)\n\nFixed an issue where dismissing a DialogFragment would not correctly update the NavController state after recreating your activity (i.e., after a configuration change). (Icd72b)\n\nFixed an issue where popping a dialog destination would not update the NavController's system back button handling, potentially causing the NavController to intercept the back button even though it does not have any back stack to pop. (If3b34)\n\nSafe-args now automatically generates a toSavedStateHandle method for arguments which can be used to test your ViewModel code. (If1e2d, b/193353880)\n\nVersion 2.4.0-alpha06\n\nAugust 4, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha06 is released. Version 2.4.0-alpha06 contains these commits.\n\nAPI Changes\n\nThe requireSlidingPaneLayout() and requireDetailPaneNavHostFragment() methods on AbstractListDetailFragment have been renamed to getSlidingPaneLayout() and getDetailPaneNavHostFragment(), respectively. (I34a08)\n\nBehavior Changes\n\nWhen navigating with animations (like Crossfade), the new destination’s Lifecycle will now only reach the RESUMED when the animation completes. (If0543, b/172112072, b/194301889)\n\nNavigation Compose's NavHost now sets the graph as part of the first composition. (Ieb7be)\n\nBug Fixes\n\nPopping the last destination of a navigation graph no longer throws a ClassCastException. (If0543, b/172112072, b/194301889)\n\nFixed a NullPointerException that would occur when adding a deep link without a Uri and navigating via a route or deep link. (938a0c, b/193805425)\n\nFixed an issue in Navigation Compose where a deep linked NavBackStackEntry would not reach the RESUMED state. (I192c5)\n\nFixed an issue where popping a dialog destination would not update the NavController's system back button handling, potentially causing the NavController to intercept the back button even though it does not have any back stack to pop. (aosp/1782668)\n\nVersion 2.4.0-alpha05\n\nJuly 21, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha05 is released. Version 2.4.0-alpha05 contains these commits.\n\nBehavior Changes\n\nNavigation Compose’s NavHost now always uses Crossfades when navigating through destinations. (I07049, b/172112072)\n\nYou can now make changes to the graph of a NavHost. Graphs with the same startDestination and destinations in the graph will be considered equal and will not clear the NavController back stack. (I0b8db, b/175392262)\n\nBug Fixes\n\nFixed a NoSuchElementException when calling popBackStack() from within a LifecycleObserver attached to a NavBackStackEntry caused by reentrant updates to the NavController's state. (I64621)\n\nAbstractListDetailFragment now allows SlidingPaneLayout to be completely stripped from your APK when AbstractListDetailFragment is not used. (I611ad)\n\nNavGraph and NavDestination now override the equals method so two objects with the same values will be considered equal. (I166eb, b/175392262)\n\nVersion 2.4.0-alpha04\n\nJuly 1, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha04 is released. Version 2.4.0-alpha04 contains these commits.\n\nNew Features\n\nThe navigation-fragment artifact now contains a prebuilt implementation of a two pane layout via the new AbstractListDetailFragment. This fragment uses a SlidingPaneLayout to manage a list pane (which your subclass provides) and a detail pane, which uses a NavHostFragment as its implementation, as seen in our example implementation. (Iac4be, b/191276636)\n\nThe NavHost of the navigation-compose artifact now supports dialog destinations in addition to composable destinations. These dialog destinations will each be shown within a Composable Dialog, floating above the current composable destination. (I011d0)\n\nval navController = rememberNavController() Scaffold { innerPadding -> NavHost(navController, \"home\", Modifier.padding(innerPadding)) { composable(\"home\") { // This content fills the area provided to the NavHost HomeScreen() } dialog(\"detail_dialog\") { // This content will be automatically added to a Dialog() composable // and appear above the HomeScreen or other composable destinations DetailDialogContent() } } }\n\nAPI Changes\n\nThe add function in NavigatorState has been renamed to push. All current calls to add() will need to be changed to push(). (Ie89fc, b/172112072)\n\nCustom Navigator instances can now use the pushWithTransaction and popWithTransition APIs on NavigatorState to push or pop a destination asynchronously. Note that this APIs are not yet used by any of the included navigators. (Ic4d7c, b/172112072)\n\nBehavior Changes\n\nNavDeepLinkBuilder now adds PendingIntent.FLAG_IMMUTABLE to the PendingIntent returned by createPendingIntent(), ensuring that this API works as expected when targeting Android 12. (If8c52)\n\nBug Fixes\n\nFixed an issue with <include-dynamic> where arguments passed to the graph would not be correctly passed to the dynamically included graph. (I3e115)\n\nFixed a NullPointerException when navigating to a destination using a string[] argument with a default value of @null. (I1fbe8)\n\nAdd ProGuard rules for @Navigator.Name, fixing issues when using R8 3.1 full mode. (I2add9, b/191654433)\n\nSafeArgs will no longer fail when building your app with Kotlin versions before 1.5.0. (Icd1ff, b/190739257)\n\nVersion 2.4.0-alpha03\n\nJune 16, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha03 is released. Version 2.4.0-alpha03 contains these commits.\n\nBug Fixes\n\nFixed an issue where two navigate() calls were needed to navigate to an included dynamic graph. (I7785c, b/188859835)\n\nFixed a regression introduced in Navigation 2.4.0-alpha01 where setupActionBarWithNavController() would not properly remove the Up icon when you are on a top level destination. (I5d443, b/189868637)\n\nFixed an IllegalStateException when calling popBackStack() after previously popping the root graph of the NavController. (I2a330, b/190265699)\n\nProGuard rules for by navArgs() now properly apply when using navigation-common or any artifacts that depend on it. (I68800, b/190082521)\n\nAn OnDestinationChangedListener that calls navigate() the first time it receives a callback now properly get a second callback with the destination it navigated to. (Ie5f9e, b/190228815)\n\nSafe Args no longer crashes when using it with dynamic feature modules and AGP 7.0+. (I69518, b/189966576)\n\nKnown Issue\n\nSafe Args will fail with an Unable to find method ‘’java.lang.String kotlin.text.CarsKt.titleCase(char, java.util.Locale)’’ error when using Gradle 6.7.0 due to a dependency on an older version of Kotlin. This can be worked around by updating to use Gradle 7.0. (b/190739257)\n\nVersion 2.4.0-alpha02\n\nJune 2, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha02 is released. Version 2.4.0-alpha02 contains these commits.\n\nNew Features\n\nRoutes are now supported for Activity, Fragment and Dialog destinations, as well as throughout the DynamicNavigation Kotlin DSL. (Ib5544, Ia617b, I22f96, b/188914648, b/188901565)\n\nNavigationUI has temporarily added experimental APIs to allow opting out of saving your state. While always saving the state is the correct behavior, there are still uses of deprecated libraries (i.e. retained fragments), that cannot be supported when saving the state so this gives an opportunity for apps to slowly convert away from any unsupported APIs. (Idf93c)\n\nNavigation now providesfindDestination() and getHierarchy() APIs that can be used to help implement custom NavigationUI. findDestination() is an extension function on NavGraph that will locate a destination within the graph. getHierarchy() is a function on NavDestination that can be used to verify if a given destination is within the hierarchy of another.(I2932f, b/188183365)\n\nval matchingRoute: Boolean = destination.hierarchy.any { it.route == routeToFind }\n\nNavigationUI methods that took a BottomNavigationView have been updated to instead take its superclass introduced in Material 1.4.0, NavigationBarView. This allows these methods to be used with the NavigationRailView. (Ib0b36, b/182938895)\n\nWhen inflating an <action> element via XML, animation attributes can use attributes pulled from your theme using the app:enterAnim=\"?attr/transitionEnter\" syntax. (I07bc1, b/178291654)\n\nAPI Changes\n\nKotlin DSL builders that use an ID have been deprecated and should be replaced with builders that use routes (I85b42, b/188816479) (I9f58f, b/188816479)\n\nBug Fixes\n\nDialogFragmentNavigator now uses the NavigatorState.pop() API to inform the NavController when a dialog is dismissed by hitting the system back button or clicking outside of it, ensuring that the NavController state is always in sync with the Navigator's state. (I2ead9)\n\nNavigation no longer gives a ConcurrentModificationException when using manipulating the list of OnDestinationChangedListeners from with an onDestinationChanged callback. (Ib1707, b/188860458)\n\nSafe Args no longer crashes when attempting to generate direction properties in Kotlin. (Id2416, b/188564435)\n\nThe setId method on NavDestination is now properly annotated with @IdRes, so it only accepts resource ids. (I69b80)\n\nThe int parameter of findNode is now resId instead of resid. (I7711d)\n\nDependency Update\n\nSafe-Args now depends on Android Gradle Plugin 4.2.0. This means you should no longer get the using applicationIdTextResource warning. (I6d67b, b/172824579)\n\nVersion 2.4.0-alpha01\n\nMay 18, 2021\n\nandroidx.navigation:navigation-*:2.4.0-alpha01 is released. Version 2.4.0-alpha01 contains these commits.\n\nNew Features\n\nThe currentBackStackEntryAsFlow() method on NavController provides a Flow that emits whenever the current NavBackStackEntry changes. This flow can be used as an alternative to manually managing an OnDestinationChangedListener. (I19c4a, #89, b/163947280)\n\nMultiple back stacks\n\nThe NavController is responsible for managing the back stack of destinations, adding destinations to the back stack when you navigate() to them and removing them when you call popBackStack() or trigger the system back button. The existing NavOptions class and the integration into <action> entries in the navigation graph XML has been expanded to support saving and restoring the back stack. (b/80029773)\n\nAs part of this change, the NavigationUI methods of onNavDestinationSelected(), BottomNavigationView.setupWithNavController() and NavigationView.setupWithNavController() now automatically save and restore the state of popped destinations, enabling support for multiple back stacks without any code changes. When using Navigation with Fragments, this is the recommended way to integrate with multiple back stacks. (Ie07ca)\n\nThe underlying APIs for saving and restoring the state are exposed via a number of surfaces:\n\nIn Navigation XML, the <action> element can now use the boolean attributes of app:popUpToSaveState and app:restoreState to save the state of any destinations popped via app:popUpTo and restore the state associated with the destination passed as the app:destination:\n\n<action android:id=”@+id/swap_stack” app:destination=”@id/second_stack” app:restoreState=”true” app:popUpTo=”@id/first_stack_start_destination” app:popUpToSaveState=”true” />\n\nIn the navOptions Kotlin DSL, you can add the restoreState boolean property and the saveState boolean property on the popUpTo builder:\n\n// Use the navigate() method that takes a navOptions DSL Builder navController.navigate(selectedBottomNavRoute) { launchSingleTop = true restoreState = true popUpTo(navController.graph.startDestinationId) { saveState = true } }\n\nIn manually building a NavOptions object via the NavOptions.Builder, you can use the setRestoreState() and new overload to setPopUpTo() that takes an additional saveState parameter.\n\nNavOptions navOptions = new NavOptions.Builder() .setLaunchSingleTop(true) .setRestoreState(true) .setPopUpTo(navController.getGraph().getStartDestinationId(), false, // inclusive true) // saveState .build(); navController.navigate(selectedBottomNavId, null, navOptions);\n\nProgrammatic calls to popBackStack() can now include an additional saveState parameter.\n\nIn all cases, the NavController will save and restore the state of each NavBackStackEntry, including any navigation destination scoped ViewModel instances. The Navigator APIs have been updated to enable each Navigator to support saving and restoring their own state.\n\nThe ComposeNavigator used for composable destinations in Navigation Compose and the FragmentNavigator and DynamicFragmentNavigator used for <fragment> destinations in Navigation with Fragments have both been updated to use the new Navigator APIs and support saving and restoring state.\n\nNavigation Routes\n\nA route is a String that uniquely identifies a destination. While previously only used in Navigation Compose, this concept has now graduated to become a part of the core Navigation APIs. This provides an alternative to using integer IDs when constructing your graph through the Navigation Kotlin DSL. (b/172823546)\n\nAll APIs that used to only take an ID now have an overload that takes a route String. This includes navigate(), popBackStack(), popUpTo(), and getBackStackEntry().\n\nThis has had some API implications:\n\nThe popUpTo kotlin property on the Kotlin DSL has been deprecated in favor of popUpToId. (I59c73, b/172823546)\n\nThe getStartDestination() API has been deprecated in favor of getStartDestinationId(). (I0887f, b/172823546)\n\nFor developers upgrading from previous versions of Navigation Compose to Navigation Compose 2.4.0-alpha01, this means that the following imports on extension methods are no longer necessary and should be removed:\n\nimport androidx.navigation.compose.navigation import androidx.navigation.compose.createGraph import androidx.navigation.compose.getBackStackEntry import androidx.navigation.compose.navigate import androidx.navigation.compose.popUpTo\n\nThe KEY_ROUTE argument has been replaced with the route property on NavDestination, allowing you to call navBackStackEntry.destination.route directly.\n\nAPI Changes\n\nAll Navigation artifacts have been rewritten in Kotlin. This has improved the nullability of classes using generics (such as NavType subclasses). All Kotlin extension functions that used to be part of the -ktx artifacts have been moved to their respective main artifacts. The -ktx artifacts will continue to be published, but are completely empty. (b/184292145)\n\nNavDeepLinkBuilder now supports adding multiple distinct destinations to the generated back stack. (I3ee0d, b/147913689)\n\nAdd factory functions for DynamicNavHostFragment (Icd515, b/175222619)\n\nThe unique ID of a NavBackStackEntry is now exposed as part of its public API. (Ie033a)\n\nThe name and argument fields and destructuring functions of NamedNavArgument are now public. (#174, b/181320559)\n\nIntroduced a new NavBackStackEntry#provideToCompositionLocals extension that provides the NavBackStackEntry to the relevant composition locals. (#175, b/187229439)\n\nSafe Args\n\nSafe Args now generates a fromSavedStateHandle() method for each NavArgs class. (#122, b/136967621)\n\nclass HomeViewModel(savedStateHandle: SavedStateHandle) : ViewModel() { // Create a HomeDestinationArgs class with type safe accessors for each argument // defined on your destination private val args = HomeDestinationArgs.fromSavedStateHandle(savedStateHandle) }\n\nUpdated Safe Args to depend on KotlinPoet 1.8.0. (#172, b/183990444)\n\nBehavior Changes\n\nNavigation now depends on Lifecycle 2.3.1 and now marks setGraph(), popBackStack(), navigateUp(), and navigate(), the methods that update the NavBackStackEntry Lifecycle, as @MainThread, aligning Navigation with the main thread enforcement introduced in Lifecycle 2.3.0. (b/171125856)\n\nParsing Enum arguments from deep links is now case insensitive, allowing a deep link like http://www.example.com/red to match a www.example.com/{color} deep link even when the enum has the value of RED. (#152, b/135857840)\n\nCompose Compatibility\n\nandroidx.navigation:navigation-compose:2.4.0-alpha01 is only compatible with Compose version 1.0.0-beta07 and above.\n\nBug Fixes\n\nFixed an issue where trailing argument placeholders would take precedence over deep links that have a matching exact suffix. (#153, b/184072811)\n\nNavHostFragment now supports custom Navigators that use the same @Navigator.Name(\"dialog\") as the default DialogFragmentNavigator. (Ib1c2c, b/175979140)\n\nImproved the behavior of NavigatorProvider#addNavigator to ensure that calling it repeatedly with the same instance does not cause issues. (#176, b/187443146)\n\nExternal Contributions\n\nThanks simonschiller for building support for Safe Args generating a fromSavedStateHandle() method for each NavArgs class. (#122, b/136967621)\n\nThanks Bradleycorn for making parsing Enum arguments from deep links case insensitive. (#152, b/135857840)\n\nThanks osipxd for fixing an issue where trailing argument placeholders would take precedence over deep links that have a matching exact suffix. (#153, b/184072811)\n\nThanks tatocaster for updating Safe Args to depend on KotlinPoet 1.8.0. (#172, b/183990444)\n\nThanks jossiwolf for making the name and argument fields and destructuring functions of NamedNavArgument public. (#174, b/181320559)\n\nThanks jossiwolf for introducing a new NavBackStackEntry#provideToCompositionLocals extension that provides the NavBackStackEntry to the relevant composition locals. (#175, b/187229439)\n\nThanks jossiwolf for improved the behavior of NavigatorProvider#addNavigator to ensure that calling it repeatedly with the same instance does not cause issues. (#176, b/187443146)\n\nNavigation Compose Version 1.0.0\n\nVersion 1.0.0-alpha10\n\nApril 7, 2021\n\nandroidx.navigation:navigation-compose:1.0.0-alpha10 is released. Version 1.0.0-alpha10 contains these commits.\n\nAPI Changes\n\nNavHost now accepts a Modifier, which is passed down to the composable container that wraps the destination composables. (I85aca, b/175125483)\n\nBug Fixes\n\nNavHost now works even when an OnBackPressedDispatcherOwner is not found, such is the case when previewing the NavHost. (I7d8b4)\n\nNavigation Compose now depends on Navigation 2.3.5, fixing an issue when using BackHandler inside a NavHost destination. (I7e63b, b/182284739)\n\nVersion 1.0.0-alpha09\n\nMarch 10, 2021\n\nandroidx.navigation:navigation-compose:1.0.0-alpha09 is released. Version 1.0.0-alpha09 contains these commits.\n\nAPI Changes\n\nLocalViewModelStoreOwner.current now returns a nullable ViewModelStoreOwner to better determine whether a ViewModelStoreOwner is available in the current composition. APIs that require a ViewModelStoreOwner, such as viewModel() and NavHost, still throw an exception if a ViewModelStoreOwner is not set. (Idf39a)\n\nBug Fixes\n\nNavigation Compose now depends on Navigation 2.3.4 which includes the fix for attempting to set the same ViewModelStore object after the graph has been set. (I65c24, b/177825470)\n\nVersion 1.0.0-alpha08\n\nFebruary 24, 2021\n\nandroidx.navigation:navigation-compose:1.0.0-alpha08 is released. Version 1.0.0-alpha08 contains these commits.\n\nNew Features\n\nNavHost now populates the LocalSavedStateRegistryOwner CompositionLocal with that destination’s NavBackStackEntry, ensuring that any state directly saved into the SavedStateRegistry will be saved and restored alongside the destination. (I435d7, b/179469431)\n\nVersion 1.0.0-alpha07\n\nFebruary 10, 2021\n\nandroidx.navigation:navigation-compose:1.0.0-alpha07 is released. Version 1.0.0-alpha07 contains these commits.\n\nDependency Updates\n\nNavigation Compose now depends on Lifecycle ViewModel Compose 1.0.0-alpha01 to provide viewModel() support to composable destinations. (I7a374)\n\nNavHost now uses the new LocalOnBackPressedDispatcherOwner from Activity-Compose 1.3.0-alpha01 to get the OnBackPressedDispatcher that is set on the NavController. (I65b12)\n\nVersion 1.0.0-alpha06\n\nJanuary 28, 2021\n\nandroidx.navigation:navigation-compose:1.0.0-alpha06 is released. Version 1.0.0-alpha06 contains these commits.\n\nAPI Changes\n\nAdded a getBackStackEntry(route: String) extension method on NavController that returns the associated NavBackStackEntry. (If8931)\n\nVersion 1.0.0-alpha05\n\nJanuary 13, 2021\n\nandroidx.navigation:navigation-compose:1.0.0-alpha05 is released. Version 1.0.0-alpha05 contains these commits.\n\nUpdated to depend on Compose 1.0.0-alpha10.\n\nVersion 1.0.0-alpha04\n\nDecember 16, 2020\n\nandroidx.navigation:navigation-compose:1.0.0-alpha04 is released. Version 1.0.0-alpha04 contains these commits.\n\nUpdated for compatibility with Compose 1.0.0-alpha09.\n\nVersion 1.0.0-alpha03\n\nDecember 2, 2020\n\nandroidx.navigation:navigation-compose:1.0.0-alpha03 is released. Version 1.0.0-alpha03 contains these commits.\n\nBug Fixes\n\nFixed an issue where popBackStack() and navigateUp() would not work after a configuration change or process death and recreation. (Icea47, b/173281473)\n\nNavigating to a nested graph within your NavHost now works properly. (I0948d, b/173647694)\n\nVersion 1.0.0-alpha02\n\nNovember 11, 2020\n\nandroidx.navigation:navigation-compose:1.0.0-alpha02 is released. Version 1.0.0-alpha02 contains these commits.\n\nAPI Changes\n\nNavigation compose now support NavOptions for using popUpTo and launchSingleTop operations (If96c3, b/171468994)\n\nAdded a navigation function that takes a route instead of an ID that allows you to construct nested graphs in the Navigation Compose DSL. (I1661d)\n\nstartDestination now comes before the route in the list of a parameters for a NavHost (Ie620e)\n\nYou can now create a graph using the route as a start destination outside of a NavHost composable. (Iceb75)\n\nVersion 1.0.0-alpha01\n\nOctober 28, 2020\n\nandroid.navigation:navigation-compose:1.0.0-alpha01 is released. Version 1.0.0-alpha01 contains these commits.\n\nNew Features\n\nThe navigation-compose artifact provides integration between the Navigation Component and Jetpack Compose. It uses @Composable functions as the destinations in your application.\n\nThis initial release provides:\n\nA NavHost composable that allows you to construct your navigation graph via a Kotlin DSL.\n\nScoping of lifecycle, ViewModel, and remembered state at the destination level.\n\nAutomatic integration with the system back button.\n\nSupport for passing arguments, attaching deep links to destinations, and returning a result to previous destinations.\n\nCompose specific helpers in rememberNavController() and currentBackStackEntryAsState() to allow hoisting state and connecting the NavController to composables outside of the NavHost (such as a bottom navigation bar).\n\nSee the Compose Navigation guide for more information.\n\nVersion 2.3.5\n\nVersion 2.3.5\n\nApril 7, 2021\n\nandroidx.navigation:navigation-*:2.3.5 is released. Version 2.3.5 contains these commits.\n\nNew Features\n\nWhen navigating using a NavDeepLinkRequest or Uri, you can now access the Uri, action, and mime type in the resulting destination by getting the intent from arguments via KEY_DEEP_LINK_INTENT, mirroring the functionality already available for external deep linking. (I975c3, b/181521877)\n\nBug Fixes\n\nOnBackPressedCallbacks added to a dispatcher with the NavBackStackEntry as the LifecycleOwner now properly intercept back after the Activity Lifecycle is STOPPED, then STARTED (Iff94f, b/182284739)\n\nDeep link domain parsing is now case insensitive, ensuring that www.example.com matches both www.example.com and www.Example.com. Note that query parameter names are still case sensitive. (#144, b/153829033)\n\nFixed a NullPointerException that could occur when a destination has multiple non-nullable default arguments and you navigate to that destination while only overriding a subset of those arguments. (aosp/1644827)\n\nDependency Updates\n\nThe Navigation Safe Args Gradle Plugin now depends on Kotlin Gradle Plugin 1.4.31. (aosp/1661058, b/181156413)\n\nExternal Contribution\n\nThanks bentrengrove for the pull request making deep link domain parsing case insensitive. (#144, b/153829033)\n\nVersion 2.3.4\n\nVersion 2.3.4\n\nMarch 10, 2021\n\nandroidx.navigation:navigation-*:2.3.4 is released. Version 2.3.4 contains these commits.\n\nNew Features\n\nReferenceType arguments can now be properly parsed when sent as part of a deeplink URI. This supports both the raw integer value as well as hex values prefixed by 0x. (#127, b/179166693)\n\nThe android:defaultValue for an argument with app:argType=\"float\" now supports integer default values, allowing you to use android:defaultValue=\"0\"rather than requiring the use of 0.0. (#117, b/173766247)\n\nBug Fixes\n\nFix stuck installation progress when using Navigation’s support for dynamic features. (Ib27a7, b/169636207)\n\nCalling setViewModelStore or setLifecycleOwner with the same object that has already been set will now be a no-op (Idf491, b/177825470)\n\nSafe-Args now adds suppress annotations on the proper methods when using java. (I8fbc5, b/179463137)\n\nExternal Contributions\n\nThanks JvmName for the pull request to ensure that ReferenceType arguments can now be properly parsed when sent as part of a deeplink URI. (#127, b/179166693)\n\nThanks tatocaster for the pull request to allow the defaultValue for an argument with app:argType=”float” now supports integer default values. (#117, b/173766247)\n\nVersion 2.3.3\n\nVersion 2.3.3\n\nJanuary 27, 2021\n\nandroidx.navigation:navigation-*:2.3.3 is released. Version 2.3.3 contains these commits.\n\nBug Fixes\n\nThere is no longer a crash when popping a NavBackStackEntry before its Lifecycle is moved to CREATED. (Ie3ba3)\n\nFixed regression caused by b/171364502 where navigating to an activity with an animation resource value of 0 caused a ResourceNotFoundException. (I7aedb, b/176819931)\n\nVersion 2.3.2\n\nVersion 2.3.2\n\nDecember 2, 2020\n\nandroidx.navigation:navigation-*:2.3.2 is released. Version 2.3.2 contains these commits.\n\nBug Fixes\n\nFixed a regression in NavigationUI where using an <activity> destination with onNavDestinationSelected would fail to navigate to the Activity. (I22e34, b/171364502)\n\nFixed an issue where navigation-dynamic-features-fragment would result in navigating to the newly installed destination multiple times. (aosp/1486056, b/169636207)\n\nFixed an issue where default arguments would not be sent to OnDestinationChangedListener instances when using launchSingleTop. (I2c5cb)\n\nFixed an issue where navigating to a nested navigation graph would not create a new graph instance on the back stack. (Ifc831)\n\nFixed an issue where using navigate() with a popUpTo that removed the last destination in a navigation graph would not immediately destroy and remove the navigation graph itself from the back stack. (I910a3)\n\nNavigation SafeArgs now uses KotlinPoet version 1.7.2 which adds support for Kotlin's explicit API mode. (I918b5)\n\nNavHostFragment.findNavController(Fragment) now also checks the root decor view of a DialogFragment in addition to the existing checks of the Fragment hierarchy and Fragment's view hierarchy. This allows you to test dialog fragments that use Navigation with FragmentScenario and Navigation.setViewNavController(). (I69e0d)\n\nVersion 2.3.1\n\nVersion 2.3.1\n\nOctober 14, 2020\n\nandroidx.navigation:navigation-*:2.3.1 is released. Version 2.3.1 contains these commits.\n\nNew Features\n\nDefault Animator resources have been added to Navigation UI and are recommended over the default animation resources. (b/167430145)\n\nNavOptions now overrides the hashcode and equals methods (b/161586466)\n\nNavigation now includes the current destination in the “No destination with ID” IllegalArgumentException, which should improve the developer debugging experience. (b/168311416)\n\nBug Fixes\n\nSafe Args will no longer wrap the return line, even if the generated argument class name is longer than 100 characters. (b/168584987)\n\nDependency Changes\n\nnavigation-ui now depends on DrawerLayout 1.1.1, ensuring that NavigationUI is able to open the drawer even when using LOCK_MODE_LOCKED_CLOSED or LOCK_MODE_LOCKED_OPEN. (b/162253907)\n\nSafe Args now depends on KotlinPoet 1.6.0 (aosp/1435911)\n\nSafe Args now depends on AGP 4.0.1 (aosp/1442337)\n\nVersion 2.3.0\n\nVersion 2.3.0\n\nJune 24, 2020\n\nandroidx.navigation:navigation-*:2.3.0 is released. Version 2.3.0 contains these commits.\n\nMajor changes since 2.2.0\n\nFeature Module integration: The navigation-dyna"
    }
}