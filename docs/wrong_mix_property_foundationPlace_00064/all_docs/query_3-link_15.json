{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 15,
    "data": {
        "url": "https://blog.jetbrains.com/phpstorm/2019/04/locating-dead-code/",
        "read_more_link": "",
        "language": "en",
        "title": "Locating Dead Code",
        "top_image": "https://resources.jetbrains.com/storage/products/phpstorm/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/phpstorm/img/meta/preview.png",
        "images": [
            "https://blog.jetbrains.com/wp-content/uploads/2024/06/JETBRAINS-Blog.svg",
            "https://blog.jetbrains.com/wp-content/uploads/2019/01/PhpStorm-1.svg",
            "https://blog.jetbrains.com/wp-content/uploads/2021/03/anton-200x200.jpg",
            "https://blog.jetbrains.com/wp-content/uploads/2019/04/phpstorm-unused_declaration_editor.png",
            "https://blog.jetbrains.com/wp-content/uploads/2019/04/phpstorm-unused_decaration_run_by_name.png",
            "https://blog.jetbrains.com/wp-content/uploads/2019/04/phpstorm-unused_declaration_results.png",
            "https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg",
            "https://blog.jetbrains.com/wp-content/uploads/2024/04/Featured_Blog_ps_20241_1280x720-2x.png",
            "https://secure.gravatar.com/avatar/7784685c44d745c28d20944b85e965d3?s=50&r=g",
            "https://blog.jetbrains.com/wp-content/uploads/2023/12/Featured_Blog_ps_20233_1280x720-2x.png",
            "https://secure.gravatar.com/avatar/7784685c44d745c28d20944b85e965d3?s=50&r=g",
            "https://blog.jetbrains.com/wp-content/uploads/2023/11/Blog-Featured_php8.3_1280x720-2x.png",
            "https://secure.gravatar.com/avatar/7784685c44d745c28d20944b85e965d3?s=50&r=g",
            "https://blog.jetbrains.com/wp-content/uploads/2023/09/ps-bug-fix-featured_blog_2023.2.2.png",
            "https://secure.gravatar.com/avatar/7784685c44d745c28d20944b85e965d3?s=50&r=g"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Tania Goral"
        ],
        "publish_date": "2024-01-09T14:51:11+01:00",
        "summary": "",
        "meta_description": "When facing legacy code, probably the first thing you want to do is clean it up. PhpStorm 2019.1 can help you with this, particularly by finding and removing dead code with the new Unused Declaration",
        "meta_lang": "en",
        "meta_favicon": "https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/favicons/favicon.ico",
        "meta_site_name": "The JetBrains Blog",
        "canonical_link": "https://blog.jetbrains.com/phpstorm/2019/04/locating-dead-code/",
        "text": "Features Releases\n\nWhen facing legacy code, probably the first thing you want to do is clean it up. PhpStorm 2019.1 can help you with this, particularly by finding and removing dead code with the new Unused Declaration inspection. It will carefully analyze your code and data flow, and highlight the entities that are never used.\n\nTo get started, make sure that the inspection is enabled under Settings/Preferences | Editor | Inspections | PHP | Unused. Now, when you work in the editor, PhpStorm will only highlight unused classes, class members, and functions:\n\nTo locate and view all unreachable declarations (that are present in your code but are never executed at runtime), you need to run the inspection in batch mode. This will build the reachability graph in order to find unused code “clusters” throughout the selected scope. To do this, select either Code | Inspect Code… or Code | Run Inspection by Name… | Unused Declaration.\n\nAs soon as the inspection runs, all of the found issues will be listed in the Inspection results:\n\nFrom here, you can start eliminating dead code by safely removing the affected elements, or commenting them out. If you hit a false positive or otherwise want to keep the element as it is, you’ll have two possible options:\n\nSuppress the inspection, which will add the @noinspection tag for the given statement or the entire file.\n\nAdd the element as an entry point. By default, all code in the global scope as well as tests is treated as reachable. If you know that a method or function is executed, you may add it as an entry point. The code inside the entry point is now executed and reachable, as well.\n\nWhen you add an entry point, your source code files stay unaffected, and the element’s record is stored with the project under .idea\\misc.xml.\n\nWe hope that with this new inspection, you’ll find that modernizing apps becomes a lot easier and less painful! Let us know how it goes and what works or doesn’t work for you!"
    }
}