{
    "id": "wrong_mix_property_foundationPlace_00064_3",
    "rank": 8,
    "data": {
        "url": "https://www.jetbrains.com/help/idea/quick-start-guide-goland.html",
        "read_more_link": "",
        "language": "en",
        "title": "Quick start with Go",
        "top_image": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "meta_img": "https://resources.jetbrains.com/storage/products/intellij-idea/img/meta/preview.png",
        "images": [
            "https://resources.jetbrains.com/help/img/idea/2024.1/go_ij_qst_create_go_file.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/go_ij_QST_lookAroundThumb.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.runConfigurations.testState.run_dark.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.general.tbShown.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.general.tbHidden.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/go_unreachable_code.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.expui.editor.intentionBulb.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/go_intention_action_inject_language.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.toolwindows.toolWindowRun.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/qsg_run_from_gutter.png",
            "https://resources.jetbrains.com/help/img/idea/2024.1/app.toolwindows.toolWindowRun.svg",
            "https://resources.jetbrains.com/help/img/idea/2024.1/qsg_go_debug_application.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://jetbrains.com/apple-touch-icon.png",
        "meta_site_name": "IntelliJ IDEA Help",
        "canonical_link": "https://www.jetbrains.com/help/idea/quick-start-guide-goland.html",
        "text": "Step 2. Explore the user interface\n\nWhen you launch IntelliJ IDEA for the very first time, you see the Welcome to IntelliJ IDEA dialog. From the Welcome to IntelliJ IDEA dialog, you can create and open projects, check out a project from a version control system, view documentation, and configure the IDE.\n\nWhen a project is opened, you see the main window divided into several logical areas.\n\nThe Project tool window, which is on the left side, displays your project files. Tool windows are windows that provide access to project management, search, running and debugging, integration with version control systems, and other tasks. To see a list of all tool windows, navigate to View | Tool Windows.\n\nThe Editor pane is on the right side, where you write your code. It has tabs for easy navigation between open files.\n\nThe navigation bar is above the editor additionally allows you to quickly run and debug your application as well as do basic VCS actions.\n\nThe Gutter is the vertical stripe next to the editor. It shows you the breakpoints and provides a convenient way to navigate to a definition or a declaration. Also, you can use the Run Application icon ( ) to run or to debug your application.\n\nThe Scrollbar, on the right side of the editor. IntelliJ IDEA monitors the quality of your code and shows the results of code inspections: errors, warnings, typos, and other issues. The indicator at the top of the gutter shows the overall status of code inspections for the entire file.\n\nThe status bar indicates the status of your project and the entire IDE and shows you information about a file encoding, line separators, inspection profiles, and other warnings and information messages.\n\nIn the lower left part of the IDE, in the Status bar, you can see or buttons. These buttons toggle the display of the tool window popup. If you hover over this button, the list of the currently available tool windows shows up.\n\nStep 3. Write your code\n\nAs you work in the editor, IntelliJ IDEA analyzes your code, searches for ways to optimize it, and detects potential and actual problems. The following list includes basic features and tools that might be useful for your code writing and increase your productivity:\n\nRefactorings\n\nCode completion\n\nGenerating code\n\nLive templates\n\nInspections\n\nIntention actions\n\nRefactorings\n\nRefactoring is a process of improving your source code without creating a new functionality. Refactoring helps you keep your code solid , dry, and easy to maintain.\n\nIntelliJ IDEA suggests you the following refactoring options:\n\nChange signature changes the method or function name; adds, removes, and reorders parameters; assigns default values to new non-variadic parameters.\n\nExtract refactorings extracts code fragments that can be grouped. You can extract a constant, a variable, a method, and an interface.\n\nInline refactoring moves an extracted code fragment to the calling code. An opposite to the Extract refactoring.\n\nCopy refactoring copies a file, a directory, or a package to a different directory or a package.\n\nMove refactoring moves source code sections to another package or a file. For example, you can use the Move refactoring to move methods to another package.\n\nCode completion\n\nIntelliJ IDEA has two types of code completion:\n\nBasic code completion Ctrl+Space helps you complete names of types, interfaces, methods, and keywords within the visibility scope. When you invoke code completion, IntelliJ IDEA analyzes the context and suggests the choices that are reachable from the current caret position. By default, IntelliJ IDEA displays the code completion popup automatically as you type.\n\nSmart code completion Ctrl+Shift+Space filters the suggestion list and shows only the types applicable to the current context.\n\nThe following animation shows the difference between basic and smart type-matching completion. Notice the number of variants that are suggested for different completion types\n\nGenerating code\n\nIntelliJ IDEA provides multiple ways to generate common code constructs and recurring elements, which helps you increase productivity. These can be either file templates used when creating a new file, custom or predefined live templates that are applied differently based on the context, various wrappers, or automatic pairing of characters.\n\nAdditionally, IntelliJ IDEA provides code completion and Emmet support.\n\nThis topic describes ways to generate standard code constructs specific to Java: constructors, method overrides and implementations, getters and setters, and so on. Go to Code | Generate Alt+Insert to open the popup menu with available constructs that you can generate.\n\nYou can generate getters, setters, constructors, missing methods, and test files.\n\nLive templates\n\nUse live templates to insert common constructs into your code, such as loops, conditions, declarations, or print statements.\n\nTo expand a code snippet, type the corresponding template abbreviation and press Tab. Keep pressing Tab to jump from one variable in the template to the next one. Press Shift+Tab to move to the previous variable.\n\nTo see the list of live templates, open settings Ctrl+Alt+S and navigate to Editor | Live templates.\n\nConsider the following example of the Hello World program that is coded with Live Templates.\n\nInspections\n\nIn IntelliJ IDEA, there is a set of code inspections that detect and correct abnormal code in your project before you compile it. The IDE can find and highlight various problems, locate dead code, find probable bugs, spelling problems, and improve the overall code structure.\n\nInspections can scan your code in all project files or only in specific scopes (for example, only in production code or in modified files).\n\nEvery inspection has a severity level â the extent to which a problem can affect your code. Severities are highlighted differently in the editor so that you can quickly distinguish between critical problems and less important things. IntelliJ IDEA comes with a set of predefined severity levels and enables you to create your own.\n\nTo see the list of inspections, open settings Ctrl+Alt+S and navigate to Editor | Inspections. Disable some of them, or enable others, plus adjust the severity of each inspection. You decide whether it should be considered an error or just a warning.\n\nFor example, the Unreachable code inspection detects parts of code that cannot be executed.\n\nIntention actions\n\nAs you work in the editor, IntelliJ IDEA analyzes your code, searches for ways to optimize it, and detects potential and actual problems.\n\nAs soon as the IDE finds a way to alter your code, it displays a yellow bulb icon in the editor next to the current line. By clicking this icon, you can view the intention actions available in the current context. Intention actions cover a wide range of situations from warnings to optimization suggestions. You can view the full list of intentions and customize them in the Settings dialog Ctrl+Alt+S.\n\nTo see the list of intention actions, open settings Ctrl+Alt+S and navigate to Editor | Intentions.\n\nTo apply an intention action, click the bulb icon (or press Alt+Enter) to open the list of suggestions.\n\nSelect an action from the list and press Enter.\n\nFor example, you can use an intention action to inject another language in your code:"
    }
}