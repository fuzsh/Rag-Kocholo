{
    "id": "dbpedia_7754_3",
    "rank": 31,
    "data": {
        "url": "https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.WABI.2017.4",
        "read_more_link": "",
        "language": "en",
        "title": "Optimal Computation of Overabundant Words",
        "top_image": "https://drops.dagstuhl.de/favicon.ico",
        "meta_img": "https://drops.dagstuhl.de/favicon.ico",
        "images": [
            "https://drops.dagstuhl.de/images/LZI-Logo.jpg",
            "https://drops.dagstuhl.de/images/open-access-logo.png",
            "https://drops.dagstuhl.de/images/cc-by.png",
            "https://drops.dagstuhl.de/storage/00lipics/lipics-vol088-wabi2017/thumbnails/LIPIcs.WABI.2017.4/LIPIcs.WABI.2017.4.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png",
            "https://drops.dagstuhl.de/images/google-scholar.dark.16x16.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Yannis Almirantis",
            "Panagiotis Charalampopoulos",
            "Jia Gao",
            "Costas S. Iliopoulos",
            "Manal Mohamed",
            "Solon P. Pissis",
            "Dimitris Polychronopoulos",
            "Costas S",
            "Solon P"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://drops.dagstuhl.de/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.WABI.2017.4",
        "text": "Cite AsGet BibTex\n\nYannis Almirantis, Panagiotis Charalampopoulos, Jia Gao, Costas S. Iliopoulos, Manal Mohamed, Solon P. Pissis, and Dimitris Polychronopoulos. Optimal Computation of Overabundant Words. In 17th International Workshop on Algorithms in Bioinformatics (WABI 2017). Leibniz International Proceedings in Informatics (LIPIcs), Volume 88, pp. 4:1-4:14, Schloss Dagstuhl – Leibniz-Zentrum für Informatik (2017)\n\nhttps://doi.org/10.4230/LIPIcs.WABI.2017.4\n\nAbstract\n\nThe observed frequency of the longest proper prefix, the longest proper suffix, and the longest infix of a word w in a given sequence x can be used for classifying w as avoided or overabundant. The definitions used for the expectation and deviation of w in this statistical model were described and biologically justified by Brendel et al. (J Biomol Struct Dyn 1986). We have very recently introduced a time-optimal algorithm for computing all avoided words of a given sequence over an integer alphabet (Algorithms Mol Biol 2017). In this article, we extend this study by presenting an O(n)-time and O(n)-space algorithm for computing all overabundant words in a sequence x of length n over an integer alphabet. Our main result is based on a new non-trivial combinatorial property of the suffix tree T of x: the number of distinct factors of x whose longest infix is the label of an explicit node of T is no more than 3n-4. We further show that the presented algorithm is time-optimal by proving that O(n) is a tight upper bound for the number of overabundant words. Finally, we present experimental results, using both synthetic and real data, which justify the effectiveness and efficiency of our approach in practical terms."
    }
}