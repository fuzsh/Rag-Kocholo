{
    "id": "dbpedia_8289_3",
    "rank": 57,
    "data": {
        "url": "https://mindustry-unofficial.fandom.com/wiki/Guide:_Logic_Basics",
        "read_more_link": "",
        "language": "en",
        "title": "Guide: Logic Basics",
        "top_image": "https://static.wikia.nocookie.net/mindustry-unofficial/images/7/7c/Command-jump.png/revision/latest?cb=20230515131217",
        "meta_img": "https://static.wikia.nocookie.net/mindustry-unofficial/images/7/7c/Command-jump.png/revision/latest?cb=20230515131217",
        "images": [
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/e/e6/Site-logo.png/revision/latest?cb=20231130175553",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/b7/Other.png/revision/latest?cb=20240512133934",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/7/7c/Command-jump.png/revision/latest/scale-to-width-down/360?cb=20230515131217",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/d/dc/Command-set-text.png/revision/latest/scale-to-width-down/360?cb=20230515131535",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/2/2b/Command-operation-max.png/revision/latest/scale-to-width-down/360?cb=20230515132419",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/2/2b/Command-operation-max.png/revision/latest/scale-to-width-down/360?cb=20230515132419",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/5/50/Command-lookup-item.png/revision/latest/scale-to-width-down/360?cb=20230515132710",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/5/50/Command-lookup-item.png/revision/latest/scale-to-width-down/360?cb=20230515132710",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/bf/Command-pack-color.png/revision/latest/scale-to-width-down/360?cb=20230515140828",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/bf/Command-pack-color.png/revision/latest/scale-to-width-down/360?cb=20230515140828",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/c/cf/Command-sensor-copper.png/revision/latest/scale-to-width-down/360?cb=20230515135411",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/c/cf/Command-sensor-copper.png/revision/latest/scale-to-width-down/360?cb=20230515135411",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/8/8f/Command-control-enabled.png/revision/latest/scale-to-width-down/360?cb=20230515141150",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/8/8f/Command-control-enabled.png/revision/latest/scale-to-width-down/360?cb=20230515141150",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/1/10/Command-control-config.png/revision/latest/scale-to-width-down/360?cb=20230515141419",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/1/10/Command-control-config.png/revision/latest/scale-to-width-down/360?cb=20230515141419",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/b1/Command-radar-flying.png/revision/latest/scale-to-width-down/360?cb=20230515141626",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/b1/Command-radar-flying.png/revision/latest/scale-to-width-down/360?cb=20230515141626",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/6/64/Command-radar-targeting.png/revision/latest/scale-to-width-down/360?cb=20230515141744",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/6/64/Command-radar-targeting.png/revision/latest/scale-to-width-down/360?cb=20230515141744",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/8/8a/Command-print-flush.png/revision/latest/scale-to-width-down/360?cb=20230515141911",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/8/8a/Command-print-flush.png/revision/latest/scale-to-width-down/360?cb=20230515141911",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/6/6f/Command-draw-flush.png/revision/latest/scale-to-width-down/360?cb=20230515142024",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/6/6f/Command-draw-flush.png/revision/latest/scale-to-width-down/360?cb=20230515142024",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/0/00/Command-getlink.png/revision/latest/scale-to-width-down/360?cb=20230515142215",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/0/00/Command-getlink.png/revision/latest/scale-to-width-down/360?cb=20230515142215",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/d/d5/Command-radar-bind.png/revision/latest/scale-to-width-down/360?cb=20230515142331",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/d/d5/Command-radar-bind.png/revision/latest/scale-to-width-down/360?cb=20230515142331",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/3/36/Command-unit-control.png/revision/latest/scale-to-width-down/360?cb=20230515142805",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/3/36/Command-unit-control.png/revision/latest/scale-to-width-down/360?cb=20230515142805",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/0/08/Command-radar-unitcontrol.png/revision/latest/scale-to-width-down/360?cb=20230515143030",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/0/08/Command-radar-unitcontrol.png/revision/latest/scale-to-width-down/360?cb=20230515143030",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/bb/Command-unit-locate-ore.png/revision/latest/scale-to-width-down/360?cb=20230515143840",
            "https://static.wikia.nocookie.net/mindustry-unofficial/images/b/bb/Command-unit-locate-ore.png/revision/latest/scale-to-width-down/360?cb=20230515143840",
            "https://static.wikia.nocookie.net/6a181c72-e8bf-419b-b4db-18fd56a0eb60",
            "https://static.wikia.nocookie.net/6c42ce6a-b205-41f5-82c6-5011721932e7",
            "https://static.wikia.nocookie.net/464fc70a-5090-490b-b47e-0759e89c263f",
            "https://static.wikia.nocookie.net/f7bb9d33-4f9a-4faa-88fe-2a0bd8138668"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Mindustry Unofficial Wiki"
        ],
        "publish_date": "2024-07-29T22:27:06+00:00",
        "summary": "",
        "meta_description": "Logic is a mechanic introduced in Version 6.0 of Mindustry, which allows you to override the default behaviour of blocks and units through a customised block code programming language called MLog that can be edited in text editors when pasted into one. Logic is run through Processors in...",
        "meta_lang": "en",
        "meta_favicon": "https://static.wikia.nocookie.net/mindustry-unofficial/images/4/4a/Site-favicon.ico/revision/latest?cb=20231130175553",
        "meta_site_name": "Mindustry Unofficial Wiki",
        "canonical_link": "https://mindustry-unofficial.fandom.com/wiki/Guide:_Logic_Basics",
        "text": "Community Exclusive Page\n\nThis page primarily details content that is sourced from the community, such as a guide or a mod, and may not be affiliated with the base game.\n\nLogic is a mechanic introduced in Version 6.0 of Mindustry, which allows you to override the default behaviour of blocks and units through a customised block code programming language called MLog that can be edited in text editors when pasted into one. Logic is run through Processors in conjunction with accessory blocks such as the Memory Cell, Switch and Logic Display. It is recommended to have some form of prior programming experience in order to be familiar with data types.\n\nThe way writing Logic code works is that when editing a Processor, players can enter in commands through adding blocks which do different things. The processor then loops through the commands given one by one starting from the top and returning there after the final command, once the player exits the editing interface.\n\nTypes of Data[]\n\nInteger: Referred to shorthand as ints, this type of data is a whole number.\n\nFloat: Floats are data types which contains decimals.\n\nString: Strings are data types which contain letters, numbers and symbols. They are denoted with quotation marks around them like \"router\".\n\nBool: A True/False value.\n\nnull: A value returned when a command fails to return due to no item matching parameters, such as when the Unit Radar command fails to pick up. Cannot undergo any direct operations.\n\nblock: A type of data containing the information of a set block.\n\nunit: Refers to a single unit instance. Typically used for the @unit built-in variable, but can also be returned from the Radar or Unit Radar functions, or passed to Unit Bind to control a specific unit instead of cycling through all units of a given type.\n\ncontent: Refers to a type of unit, block or other resource. Usually returned by the Lookup function, but can also be obtained by sensing the type of a unit or block with the Sensor function.\n\nBuilt-in Variables[]\n\n@unit: A value returned with the Unit Bind function. Unit Control, Unit Radar and Unit Locate functions use this data type to determine which unit to execute on.\n\n@ipt: Returns the instructions per tick of the processor.\n\n@time: Unix timestamp since January 1st 1970.\n\n@this: refers to the current processor as a block.\n\n@thisx and @thisy: returns the X and Y coordinate values of the processor.\n\nBlocks[]\n\nProcessors[]\n\nMain article: Micro Processor, Logic Processor, Hyper Processor\n\nLogic Processors are the brains of logic, the blocks that run the commands. There are three varieties:\n\nThe Micro Processor is cheap and can be used for small-scale operations such as controlling low numbers of units or managing blocks (i.e Turning a Thorium Reactor off when without Cryofluid) due to its low speed of 120 commands/sec.\n\nThe Logic Processor is more expensive. It is often used to make advanced calculations or to run commands with large numbers of units. It runs at 480 commands/sec.\n\nThe Hyper Processor is the most expensive and runs 1500 commands/sec. It is best used when dealing with constantly updating graphics.\n\nMessages and Displays[]\n\nMain articles: Message, Logic Display, Logic Display\n\nMessages and Logic Displays can show the stored text and visual data within a processor.\n\nIn text form, the command Print adds text to a hidden variable in each processor. The command Print Flush displays the text to a Message block and clears the hidden variable.\n\nLogic Displays work in much the same way, with the Draw and Draw Flush command.\n\nMemory Cells[]\n\nMain articles: Memory Cell, Memory Bank\n\nSwitches[]\n\nMain article: Switch\n\nThe Switch has two states, with the on state (indicated by the dot in the middle being purple) registering as true when sensing whether it is enabled with a Logic Processor. If it is off (indicated by the dot in the middle being grey), it will register as false. Switches can be turned on or off by clicking on them, and can also be forced on or off with a logic processor using the Control command.\n\nSystem Design Considerations and Tips[]\n\nParallelism[]\n\nWhen designing a new system in Sandbox mode, it can be tempting to reach for the largest and fastest processor you can find. However, since Mindustry processors run in parallel, there are many tasks that can be done faster, with fewer resource costs and less coding complexity, by splitting tasks among many small processors (with memory cells to share state between them if needed), instead of one big processor that does everything. For example, you could do all your business logic in a Micro Processor and use a Logic or Hyper processor to draw the results to a graphical display (sort of like a how a real-world PC has both a CPU and a GPU). This comes with the added benefit that the \"CPU\" can still operate if the \"GPU\" and graphical interface are destroyed and can't be rebuilt right away (see below).\n\nDiegetic Interfaces[]\n\nYou can take advantage of existing blocks like Sorters and Unloaders as user interface elements, in addition to Switches. These have the advantage of ensuring that a selected item type is always a valid item, and they're easier to work with than just a numeric counter.\n\nBrute-Force Hacking[]\n\nOne last thing to remember is that all of your logic processing blocks are still blocks within the game world that can be destroyed by outside forces at any time. Ideally, you want to design your systems so that they can still operate without any logic processing at all, or at least fail-safe. When a processor is destroyed, any blocks it was disabling become enabled again, so if, for instance, you're using a processor to keep a Thorium Reactor from exploding, make sure you also unload its fuel and prevent it from receiving new fuel while it's disabled, so that it doesn't start overheating again in case the processor is destroyed. Changing a Sorter or Unloader's config with the Control command will persist if the processor is destroyed, so consider using those as a second layer of security.\n\nList of Commands[]\n\nFlow Control[]\n\nThese commands control the flow of the program.\n\nWait[]\n\nPause execution for a specified number of seconds.\n\nStop[]\n\nHalt execution of this processor.\n\nEnd[]\n\nSignifies the end of the current execution run. Processor will return to the first operation and run again. Equivalent to \"jump 0 always\"\n\nJump[]\n\nJump to a different instruction if the specified condition is met. The in-game editor allows you to choose a line number, but using an external editor allows you to set labels and jump to those labels.\n\nExample (Skips instruction #2, prints \"0\")\n\nExample (Same example, but with labels. The game converts labels to line numbers, so be sure to save your file and only make edits outside of the game)\n\nOperations[]\n\nSet[]\n\nSet a variable to a specific value. This can be a literal value, or another variable.\n\nExample (set \"myVariable\" to the text \"some text\")\n\nExample (set \"myVariable\" to the linked building \"nucleus1\")\n\nOperation[]\n\nSet a variable to a calculated value. This allows basic mathematical operations, as well as a few other mathematical functions. According to the Official Wiki, specific operations can be googled such as: \"<operation name> Java math\".[1]\n\nExample (increase value of myVariable by 1)\n\nExample (set \"myVariable\" to larger of the variables count1 and count2)\n\nLookup[]\n\nGet a reference to a particular type of block, unit, item, or liquid based on it's index (an integer) in the lookup tables. This can be used in sensor and control commands\n\nExample (Store the type of item with index 3 into \"myItem\" - metaglass, then check the quantity of metaglass in the Core)\n\nExample (Store the type of unit with index 21 into \"myUnit\" - mono, then bind one)\n\nPack Color[]\n\nPack RGBA components into a single number for drawing or rule-settings. All values should be decimals between 0 and 1.\n\nExample (Set an illuminator to emit red light)\n\nBlock Control[]\n\nSensor[]\n\nGets a value or property of a building, and stores that information in a variable.\n\nProperties that can be sensed include quantities of specific resources or liquids, as well as a long list of special properties.\n\nExample (how much copper in the core)\n\nExample (health of a wall block)\n\nControl[]\n\nSet a property of a building to a particular value.\n\nSet-able properties include:\n\n\"enabled\" - Whether the block is enabled\n\n\"shoot\" - Shoot at a position\n\n\"shootp\" - Shoot at a unit/building with velocity prediction\n\n\"config\" - Building configuration; possible values and behavior depend on the target block\n\n\"color\" - Illuminator color\n\nExample (Disable one block of a conveyor, resources will not pass through that block)\n\nExample (Set an unloader to unload copper)\n\nRadar[]\n\nDetect a unit within a Turret's range.\n\nYou can specify up to 3 types that a unit must match to be detected. A unit must match ALL the selected types. Available target types:\n\n\"any\" - Any unit\n\n\"enemy\" - Enemy unit\n\n\"ally\" - Ally unit\n\n\"player\" - Unit controlled by a player\n\n\"attacker\" - Unit with a weapon\n\n\"flying\" - Flying unit\n\n\"boss\" - Guardian unit\n\n\"ground\" - Ground unit\n\nIf multiple units meet the criteria, you can control which one is chosen based on \"sort\" and \"order\".\n\nSort can be:\n\n\"distance\"\n\n\"health\"\n\n\"shield\"\n\n\"armor\"\n\n\"maxHealth\"\n\nOrder can be 1 or 0, used to specify whether you want the highest/closest (1) or lowest/farthest (0) of the selected Sort.\n\nData for the detected unit is stored in the return variable, which can be used in other commands.\n\nExample (Find the enemy flying unit within the range of turret1 that has the highest health, and store it in \"myVariable\")\n\nExample (Find the enemy unit within the range of turret1 that has the highest armor, and shoot it)\n\nPrint Flush[]\n\nSends text that has been printed to a particular display block.\n\nExample (Display \"Test!\" on the first linked Message building)\n\nDraw Flush[]\n\nSends drawing data to a particular display block.\n\nExample (Draws a dot on the first linked display)\n\nGet Link[]\n\nGet a linked building/block by its index, regardless of type. The first linked block is 0, the second is 1, and so on.\n\nExample (Stores data for the first linked block in \"myVariable\")\n\nUnit Control[]\n\nUnit Bind[]\n\nBind a particular unit to this processor. The bound unit is automatically the target of unit control and unit radar commands. The bound unit can be referenced by \"@unit\" for use in other commands.\n\nOnly one unit may be bound at a time. Calling \"unit bind\" a second time will unbind the original unit in order to bind the new one.\n\nExample (Bind a Mono unit)\n\nExample (Find the ally within the range of turret1 that has the lowest health, and bind it)\n\nUnit Control[]\n\nIssue commands to the bound unit. Each command has a set of additional parameters. Not all commands are valid for all units.\n\nAvailable commands are:\n\n\"idle\" - Don't move, continue building/mining. The default state\n\n\"stop\" - Stop/cancel all actions (moving, mining, building, etc)\n\n\"move\" - Move to exact position\n\n\"approach\" - Approach a position with a radius\n\n\"boost\" - Start/stop boosting (for certain mechs)\n\n\"target\" - Shoot a position\n\n\"targetp\" - Shoot a target with velocity prediction\n\n\"itemDrop\" - Drop an item\n\n\"itemTake\" - Take an item from a building\n\n\"payDrop\" - Drop current payload\n\n\"payTake\" - Pick up payload at current position\n\n\"payEnter\" - Enter/land on the payload block the unit is on\n\n\"mine\" - Mine (extract resources) at a position\n\n\"flag\" - Numeric unit flag. Readable with Sensor, visible in unit hover info\n\n\"build\" - Build a structure\n\n\"getBlock\" - Fetch a building/floor and type at coordinates. Unit must be in range of position. Solid non-buildings will have the type @solid\n\n\"within\" - Check if unit is near a position\n\n\"unbind\" - Completely disable logic control. Resume standard AI\n\nExample (Pick up 10 coal from the Core)\n\nNote that using any of these commands will bring the currently-bound unit under the processor's control, which can interrupt whatever else it was doing and prevent the player from overriding it. This is true even for the \"within\" command, which doesn't actually do anything but check distances. To passively calculate distance without assuming control, you'll have to use Sensor and Operation commands to calculate the distance manually. Fortunately, this isn't hard to do with the Pythagorean theorem if you're familiar with high school math.\n\nop sub dX unitX targetX op pow dX2 dX 2 op sub dY unitY targetY op pow dY2 dY 2 op add d2 dX2 dY2 op sqrt d d2 d2\n\nUnit Radar[]\n\nDetect another unit within the bound unit's range.\n\nYou can specify up to 3 types that a unit must match to be detected. A unit must match ALL the selected types. Available target types:\n\n\"any\" - Any unit\n\n\"enemy\" - Enemy unit\n\n\"ally\" - Ally unit\n\n\"player\" - Unit controlled by a player\n\n\"attacker\" - Unit with a weapon\n\n\"flying\" - Flying unit\n\n\"boss\" - Guardian unit\n\n\"ground\" - Ground unit\n\nIf multiple units meet the criteria, you can control which one is chosen based on \"sort\" and \"order\".\n\nSort can be:\n\n\"distance\"\n\n\"health\"\n\n\"shield\"\n\n\"armor\"\n\n\"maxHealth\"\n\nOrder can be 1 or 0, used to specify whether you want the highest/closest (1) or lowest/farthest (0) of the selected Sort.\n\nData for the detected unit is stored in the return variable, which can be used in other commands.\n\nExample (Find the enemy flying unit within the range of turret1 that has the highest health, and store it in \"myVariable\")\n\nExample (Find the enemy unit within the range of turret1 that has the highest armor, and shoot it)\n\nUnit Locate[]\n\nUses units to find a block type anywhere on the map.\n\nBlock types that can be located:\n\n\"ore\" - Locate a tile that yields a specific type of resource when mined.\n\n\"building\" - Locate a building of a particular category. Also specify whether located building should be enemy or not. Categories:\n\n\"core\" - Any core\n\n\"storage\" - Storage building, e.g. Vault\n\n\"generator\" - Buildings that generate power\n\n\"turret\" - Any turret\n\n\"factory\" - Buildings that transform resources\n\n\"repair\" - Repair points\n\n\"battery\" - Any battery\n\n\"reactor\" - Impact/Thorium reactor\n\n\"spawn\" - Locate an enemy spawn point. May be a core or position\n\n\"damaged\" - Locate a damaged ally building\n\nExample (Find a tile for mining copper. The coordinates of the tile are stored in \"copperX\" and \"copperY\", and \"copperFound\" will be false if no tile was found)\n\nExample (Find an enemy turret. Store coordinates in \"turretX\" and \"turretY\", boolead success in \"turretFound\", and the building's data in \"turretRef\")\n\nInput & Output[]\n\nRead[]\n\nThe Read command updates a variable which is the value in a position stored in a Memory Cell.\n\nWrite[]\n\nThe Write command updates a value in a position in a Memory Cell. These can only read and write ints or floats.\n\nDraw[]\n\nThe Draw command creates shape/color data to be sent to a Logic Display\n\nClear -- Clears the draw queue and fills it with a rgb color.\n\nStroke -- Sets a line width.\n\nRect -- Fills in a rectangle. X and Y coordinates define it's top left position\n\nPoly -- Fills in a regular polygon. Sides define what shape it is. For example, with 6 lines, it creates a hexagon, AKA the best shape ever.\n\nTriangle -- Fills in a triangle. The coordinates define where the points are. Can be used to make more unique triangles.\n\nColor -- Sets color for objects, for example polies and triangles.\n\nCol -- Equivalent to Color, but packed\n\nLine -- Creates a line. Width can be set using Stroke.\n\nLineRect -- Creates a rectangle outline. Same properties as the rectangle.\n\nLinePoly -- Creates a polygon outline. Same properties as the polygon.\n\nImage -- Creates an image. Defined with @ (e.g. @router or @dagger). Mods can work too, but you need their name and THEN the designator. Invalid images load up an oh no.\n\n[]\n\nThe Print command specifies text to be sent to a Message block.\n\nSee Also[]\n\nLogic Examples"
    }
}