{
    "id": "dbpedia_8289_0",
    "rank": 13,
    "data": {
        "url": "https://www.geeksforgeeks.org/c-plus-plus/",
        "read_more_link": "",
        "language": "en",
        "title": "C++ Programming Language",
        "top_image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "meta_img": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "images": [
            "https://media.geeksforgeeks.org/gfg-gg-logo.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20230703144619/CPP-Language.png",
            "https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/new-premium-rbanner-us.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/gfgFooterLogo.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/googleplay.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/appstore.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png",
            "https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png"
        ],
        "movies": [
            "https://www.geeksforgeeks.org/videos/c-vs-java-vs-python-which-programming-language-is-best-for-dsa/"
        ],
        "keywords": [],
        "meta_keywords": [
            "Data Structures",
            "Algorithms",
            "Python",
            "Java",
            "C",
            "C++",
            "JavaScript",
            "Android Development",
            "SQL",
            "Data Science",
            "Machine Learning",
            "PHP",
            "Web Development",
            "System Design",
            "Tutorial",
            "Technical Blogs",
            "Interview Experience",
            "Interview Preparation",
            "Programming",
            "Competitive Programming",
            "Jobs",
            "Coding Contests",
            "GATE CSE",
            "HTML",
            "CSS",
            "React",
            "NodeJS",
            "Placement",
            "Aptitude",
            "Quiz",
            "Computer Science",
            "Programming Examples",
            "GeeksforGeeks Courses",
            "Puzzles",
            "SSC",
            "Banking",
            "UPSC",
            "Commerce",
            "Finance",
            "CBSE",
            "School",
            "k12",
            "General Knowledge",
            "News",
            "Mathematics",
            "Exams"
        ],
        "tags": null,
        "authors": [
            "GeeksforGeeks"
        ],
        "publish_date": "2024-06-10T03:52:04",
        "summary": "",
        "meta_description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "meta_lang": "en",
        "meta_favicon": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png",
        "meta_site_name": "GeeksforGeeks",
        "canonical_link": "https://www.geeksforgeeks.org/c-plus-plus/",
        "text": "C++ is the most used and most popular programming language developed by Bjarne Stroustrup. C++ is a high-level and object-oriented programming language. This language allows developers to write clean and efficient code for large applications and software development, game development, and operating system programming. It is an expansion of the C programming language to include Object Oriented Programming(OOPs) and is used to develop programs for computers. This C++ Tutorial will cover all the basic to advanced topics of C++ like C++ basics, C++ functions, C++ classes, OOPs and STL concepts.\n\nWhat is C++?\n\nC++ is a most popular cross-platform programming language which is used to create high-performance applications and software like OS, Games, E-commerce software, etc. It was developed by Bjarne Stroustrup, as an extension of C language. C++ give a high level of control over system resources and memory.\n\nWhy Learn C++?\n\nC++ is one of the most used and popular programming languages.\n\nC++ is used in making operating systems, embedded systems, and Graphical User Interfaces.\n\nIt is an object-oriented programming language that implements all the OOPs concepts such as Abstraction, Encapsulation, and Inheritance, which gives a clear structure to programs and allows code to be reused, lowering development costs and providing security.\n\nIt is portable and can be used to create applications that can be adapted to multiple platforms.\n\nC++ is easy to learn so that you can choose it as your first programming language.\n\nIt makes programming easy for programmers to switch to C++ because its syntax is similar to C, Java, and C#.\n\nC++ Tutorial – Table of Content\n\nC++ Overview\n\nIntroduction to C++\n\nFeatures of C++\n\nHistory of C++\n\nInteresting Facts about C++\n\nSetting up C++ Development Environment\n\nSimilarities and Differences between C++ and C\n\nC++ Basics\n\nFirst C++ Program\n\nC++ Basic Syntax\n\nC++ Comments\n\nC++ Tokens\n\nC++ Identifiers\n\nC++ Keywords\n\nDifference between Keyword and Identifier\n\nC++ Variables and Constants\n\nC++ Variables\n\nC++ Constants\n\nScope of C++ Variables\n\nC++ Storage Classes\n\nC++ Static Variables\n\nC++ Data Types and Literals\n\nC++ Data Types\n\nC++ Literals\n\nC++ Derived Data Types\n\nC++ User-Defined Data Types\n\nC++ Data Type Ranges and Their Macros\n\nC++ Type Modifiers\n\nC++ Data Type Conversion\n\nC++ Typecasting Operators\n\nC++ Operators\n\nC++ Operators\n\nC++ Arithmetic Operators\n\nC++ Unary Operators\n\nC++ Bitwise Operators\n\nC++ Relational Operators\n\nC++ Logical Operators\n\nC++ Assignment Operators\n\nC++ Ternary/Conditional Operators\n\nC++ Sizeof Operator\n\nC++ Scope Resolution Operator\n\nC++ Input/Output\n\nC++ Basic Input / Output\n\nC++ Standard Input Stream (cin)\n\nC++ Standard Output Stream (cout)\n\nC++ Standard Error Stream (cerr)\n\nC++ Input / Output Manipulator\n\nC++ Control Statements\n\nC++ Decision Making\n\nC++ if Statement\n\nC++ if-else Statement\n\nC++ if-else-if Ladder\n\nC++ Nested if-else Statement\n\nC++ Switch Statement\n\nC++ Jump Statements\n\nC++ Loops\n\nC++ for Loop\n\nC++ Range-Based for Loop\n\nC++ while Loop\n\nC++ do…while Loop\n\nC++ Functions\n\nC++ Functions\n\nC++ return\n\nC++ Parameter Passing Techniques\n\nDifference between Call by Value and Call by Reference\n\nC++ Default Arguments\n\nC++ Recursion\n\nC++ Inline Functions\n\nC++ Lambda Expression\n\nC++ Pointers and References\n\nC++ Pointers and References\n\nC++ Pointers\n\nC++ Pointer Arithmetic\n\nDangling, Void, Null, and Wild Pointers\n\nApplications of Pointers\n\nC++ nullptr\n\nC++ References\n\nCan references refer to an invalid location in C++?\n\nDifference Between Pointers and References in C++\n\nPassing by pointer Vs Passing by Reference in C++\n\nWhen do we pass arguments by reference or pointer?\n\nC++ Arrays\n\nC++ Arrays\n\nC++ Multidimensional Arrays\n\nC++ Pointer to an Array\n\nSize of Array parameter\n\nPassing Arrays to Functions in C++\n\nWhat is Array Decay in C++? How can it be prevented?\n\nC++ Strings\n\nC++ Strings\n\nC++ std::string Class\n\nC++ Array of Strings\n\nC++ String Functions\n\nC++ String Concatenation\n\nTokenizing a String in C++\n\nC++ Substring\n\nC++ Structures and Unions\n\nC++ Structures, Unions, and Enumerations\n\nC++ Structures\n\nC++ Pointer to Structure\n\nC++ Self-Referential Structures\n\nDifference Between C Structures and C++ Structures\n\nC++ Unions\n\nC++ Bit Fields\n\nC++ Enumeration\n\nC++ typedef\n\nArray of Structures vs Array within a Structure in C/C++\n\nC++ Dynamic Memory Management\n\nC++ Dynamic Memory Management\n\nC++ new and delete Operators\n\nnew vs malloc() and free() vs delete in C++\n\nMemory leak in C++\n\nDifference between Static and Dynamic Memory Allocation in C++\n\nC++ Object-Oriented Programming\n\nC++ Object Oriented Programming (OOPs)\n\nC++ Classes and Objects\n\nC++ Access Modifiers\n\nC++ Friend Class and Function\n\nC++ Constructors\n\nC++ Default Constructors\n\nC++ Copy Constructor\n\nC++ Destructors\n\nC++ Private Destructor\n\nWhen is the Copy Constructor Called?\n\nShallow Copy and Deep Copy in C++\n\nWhen Should We Write Our Own Copy Constructor?\n\nDoes the Compiler Create a Default Constructor When We Write Our Own?\n\nC++ Static Data Members\n\nC++ Static Member Functions\n\nC++ this pointer\n\nC++ Scope Resolution Operator vs this pointer\n\nC++ Local Class\n\nC++ Nested Classes\n\nC++ enum Class\n\nDifference between Structure and Class in C++\n\nWhy C++ is a partially Object Oriented Language?\n\nC++ Encapsulation and Abstraction\n\nC++ Encapsulation\n\nC++ Abstraction\n\nDifference between Abstraction and Encapsulation in C++\n\nC++ Polymorphism\n\nC++ Polymorphism\n\nC++ Function Overriding\n\nC++ Virtual Functions and Runtime Polymorphism\n\nDifference between Compile-time and Run-time Polymorphism in C++\n\nDifference between Inheritance and Polymorphism in C++\n\nC++ Function Overloading\n\nC++ Function Overloading\n\nC++ Constructor Overloading\n\nC++ Functions that Cannot be Overloaded\n\nC++ Function Overloading and const Keyword\n\nC++ Function Overloading and Return Type\n\nC++ Function Overloading and float Data Type\n\nC++ Function Overloading and Default Arguments\n\nCan main() be overloaded?\n\nC++ Function Overloading Vs Function Overriding\n\nAdvantages and Disadvantages of C++ Function Overloading\n\nC++ Operator Overloading\n\nC++ Operator Overloading\n\nTypes of C++ Operator Overloading\n\nC++ Functors\n\nC++ Operators that Cannot be Overloaded\n\nC++ Inheritance\n\nC++ Inheritance\n\nC++ Inheritance Access\n\nC++ Multiple Inheritance\n\nC++ Hierarchical Inheritance\n\nC++ Multilevel Inheritance\n\nC++ Constructor in Multiple Inheritance\n\nC++ Inheritance and Friendship\n\nDoes Function Overloading Work with Inheritance in C++?\n\nDifference Between Inheritance and Polymorphism in C++\n\nC++ Virtual Functions\n\nC++ Virtual Functions\n\nC++ Virtual Functions in Derived Classes\n\nC++ Default Arguments and Virtual Function\n\nC++ Inline Virtual Functions\n\nC++ Virtual Destructor\n\nC++ Virtual Constructor\n\nC++ Virtual Copy Constructor\n\nC++ Pure Virtual Functions and Abstract Class\n\nC++ Pure Virtual Destructor in C++\n\nCan Static Functions be Virtual in C++?\n\nC++ RTTI (Run-Time Type Information)\n\nCan C++ Virtual Functions be Private?\n\nC++ Exception Handling\n\nC++ Exception Handling\n\nC++ Exception Handling using Classes\n\nC++ Stack Unwinding\n\nC++ User-Defined Exceptions\n\nC++ Files and Streams\n\nC++ Files and Streams\n\nC++ I/O Redirection\n\nC++ Templates\n\nC++ Templates\n\nC++ Template Specialization\n\nC++ using Keyword\n\nC++ Standard Template Library (STL)\n\nThe C++ Standard Template Library (STL)\n\nSTL Algorithms\n\nSTL Containers\n\nSTL Vector\n\nSTL Pair\n\nSTL Set\n\nSTL Multiset\n\nSTL Stack\n\nSTL Queue\n\nSTL Priority Queue\n\nSTL Deque\n\nSTL List\n\nSTL Forward List\n\nSTL Map\n\nSTL Multimap\n\nSTL Bitset\n\nSTL Unordered Sets\n\nSTL Unordered Multiset\n\nSTL Unordered Map\n\nSTL Unordered Multimap\n\nC++ Iterators\n\nIntroduction to C++ Iterators\n\nC++ Input Iterators\n\nC++ Output Iterators\n\nC++ Forward Iterators\n\nC++ Bidirectional Iterators\n\nC++ Random Access Iterators\n\nC++ istream_iterator and ostream Iterator\n\nDifference between C++ Iterators and Pointers\n\nC++ Preprocessors\n\nC++ Preprocessor\n\nC++ Preprocessor Directives\n\nC++ #include Directive\n\nC++ #define Directive\n\nC++ Conditional Preprocessors\n\nDifference between C++ Preprocessor Directives and Function Templates\n\nC++ Namespace\n\nC++ Namespaces\n\nExtending C++ Namespace and Unnamed Namespace\n\nAccessing, Creating Header, Nesting, and Aliasing Namespace\n\nC++ Inline Namespaces\n\nAdvanced C++\n\nC++ Multithreading\n\nC++ Smart Pointers\n\nDifferences between Different C++ Smart Pointers\n\nType of ‘this’ Pointer in C++\n\nDelete ‘this’ Pointer in C++\n\nPassing C++ Function as a Parameter\n\nC++ Signal Handling\n\nC++ Generics\n\nC vs C++\n\nDifferences and Similarities between C++ and C\n\nDifference between C++ and Objective C\n\nC programs that won’t compile in C++\n\nProgram that produces different results in C and C++\n\nVoid * in C vs C++\n\nType Difference of Character Literals in C vs C++\n\nDifference between Structures in C and Structures in C++\n\nCin-Cout vs Scanf-Printf\n\nC++ vs Java\n\nDifferences and Similarities between C++ and Java\n\nInheritance in C++ vs Java\n\nStatic keyword in C++ vs Java\n\nDefault Virtual Behavior in C++ vs Java\n\nException Handling in C++ vs Java\n\nForeach loop in C++ vs Java\n\nTemplates in C++ vs Generics in Java\n\nFloating Point Operations & Associativity in C, C++, and Java\n\nCompetitive Programming in C++\n\nCompetitive Programming – A Complete Guide\n\nC++ Tricks for Competitive Programming\n\nWriting C/C++ code efficiently in Competitive Programming\n\nWhy C++ is Best for Competitive Programming?\n\nGenerating Test Cases in C++\n\nFast I/O for Competitive Programming in C++\n\nSetting up Sublime Text for C++ Competitive Programming Environment\n\nSetting up VS Code for C++ Competitive Programming Environment\n\nWhich C++ libraries are useful for competitive programming?\n\nCommon mistakes to be avoided in Competitive Programming in C++\n\nC++ Interview Questions\n\nTop 50 C++ Interview Questions and Answers\n\nTop C++ STL Interview Questions and Answers\n\n30 OOPs Interview Questions and Answers\n\nTop C++ Exception Handling Interview Questions and Answers\n\nApplications of C++\n\nHere are the uses of C++ with real-world applications:\n\n1. Operating Systems\n\nC++ is most widely used programming language and become an ideal choice for developing operating systems. Mac OS X has majority of parts written in C++ and Most of Microsoft’s software like Windows, Microsoft Office, IDE Visual Studio, and Internet Explorer are also written in C++.\n\n2. Games\n\nC++ used for game development and companies use it as their first choice to develop gaming systems because C++ is very close to the machine so It can easily manipulate resources and able to built complex 3D games, multiplayer game, etc. Unreal game engine make games using C++.\n\n3. Web Browsers\n\nMost of the browsers in Computers are developed in C++ for effecting goals and Mozilla Firefox is totally developed by C++ and Google Applications and software like Chrome and Google File System are partly written in C++.\n\n4. Compilers\n\nCompilers of many programming languages are designed in C and C++ and this is because they are moderately lower-level when compared to other higher-level programming languages and C/C++ are closer to the hardware.\n\n5. Embedded Systems\n\nEmbedded systems that need the program closer to the hardware such as smartwatches, medical equipment systems, mobile phones etc., are developed in C++ and It can perform a lot of low-level function calls, unlike different high-level programming languages.\n\nRecent Articles on C++\n\nC++ Programs\n\nC++ Interview Questions\n\nFAQs on C++\n\n1. What is the difference between C++ and C?\n\nAnswer:\n\nC++\n\nC\n\nC++ was developed as an extension of C. C is a developed independent language. C++ supports classes and objects. C does not support OOPs concepts. Namespace is used by C++, to avoid name collisions. The namespace feature is not supported by C.\n\n2. What is the difference between struct and class?\n\nAnswer:\n\nC++ is a structure that is the same as a class except for a few differences like security. The difference between struct and class are given below:\n\nStructure\n\nClass\n\nMembers of the structure are public by default. Members of the class are private by default. When deriving a struct from a class/struct, default access specifiers for base class/struct are public. When deriving a class, default access specifiers are private.\n\n3. What do you mean by abstraction in C++?\n\nAnswer:\n\nAbstraction is the process of showing the necessary information to the user and hiding the details which programmers don’t want to show to the user or hiding the details which are irrelevant to a particular user.\n\n4. What is C++ best for?\n\nAnswer:\n\nC++ is used in developing browsers, operating systems, and applications, as well as in-game programming, software engineering, data structures, etc."
    }
}