{
    "id": "dbpedia_8289_3",
    "rank": 65,
    "data": {
        "url": "http://logic.stanford.edu/epilog/documentation/epilog/vocabulary.php",
        "read_more_link": "",
        "language": "en",
        "title": "Epilog Manual",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://logic.stanford.edu/epilog/images/lp.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Introduction\n\nEpilog is a logic programming language that combines the strengths of view definitions with the power of transition rules for prescribing behavior. This document is a user guide for the predefined functions, the predefined relations, and the operators in Epilog. For information about the syntax and semantics of Epilog, see the description in Logic Programming.\n\nRelations\n\nsame(expression,expression)\n\nThe sentence same(x,y) is true if and only if x and y are identical. For example, same(f(b),f(b)) is true.\n\ndistinct(expression,expression)\n\nThe sentence distinct(x,y) is true if and only if x and y are not identical. For example, distinct(f(a),f(b)) is true.\n\nmutex(expression,...,expression)\n\nThe sentence mutex(x1,...,xk) is true if and only if all of the xi distinct from each other. For example, mutex(f(a),f(b),f(c)) is true.\n\nleq(expression,expression)\n\nThe sentence leq(x1,x2) is true if and only if x1 and x2 are numbers and x1 is less than or equal to x2. For example, leq(2,10) is true, while leq(10,2) is false.\n\nsymleq(expression,expression)\n\nThe sentence symleq(x1,x2) is true if and only if x1 comes lexically before x2. For example, symleq(a,b) is true, while symleq(b,a) is false. Note that symleq(10,2) is true since 10 lexically comes before 2.\n\nevaluate(expression,expression)\n\nThe sentence evaluate(x,y) is true if and only if the value of x is y. For example, evaluate(plus(2,3),5) is true.\n\nmember(expression,list)\n\nThe sentence member(x,l) is true if and only if x is a member of the list l. For example, member(b,[a,b,c]) is true.\n\ntrue(sentence,expression)\n\nThe sentence true(p,d) is true if and only if the sentence p is true in the dataset named d. For example, if the dataset named mydataset contains the sentence p(a,b), then true(p(a,b),mydataset) is true.\n\nMath Functions\n\nabs(number) → number\n\nThe value of abs(x) is the absolute value of x. For example, the value of abs(-8) is 8.\n\nacos(number) → number\n\nThe value of acos(x) is the inverse cosine of x. For example, the value of acos(1) is 0.\n\nacosh(number) → number\n\nThe value of acosh(x) is the inverse hyperbolic cosine of x. For example, the value of acosh(1) is 0.\n\nasin(number) → number\n\nThe value of asin(x) is the inverse sine of x. For example, the value of asin(0) is 0.\n\nasinh(number) → number\n\nThe value of asinh(x) is the inverse hyperbolic sine of x. For example, the value of asinh(0) is 0.\n\natan(number → number\n\nThe value of atan(x) is the inverse tangent of x. For example, the value of atan(0) is 0.\n\natan2(number,number) → number\n\nThe value of atan2(x,y) is the inverse tangent of x/y. For example, the value of atan2(0,1) is 0.\n\natanh(number) → number\n\nThe value of atanh(x) is the inverse hyperbolic tangent of x. For example, the value of atanh(0) is 0.\n\ncbrt(number) → number\n\nThe value of cbrt(x) is the cube root of x. For example, the value of cbrt(8) is 2.\n\nceil(number) → number\n\nThe value of ceil(x) is the smallest integer that is greater than x. For example, the value of ceil(2.2) is 3.\n\nclz32(number) → number\n\nThe value of clz32(x) is the number of leading zeros in the 32-bit representation of x. For example, the value of clz32(2147483647) is 1.\n\ncos(number) → number\n\nThe value of cos(x) is the cosine of x. For example, the value of cos(0) is 1.\n\ncosh(number) → number\n\nThe value of cosh(x) is the hyperbolic cosine of x. For example, the value of cosh(0) is 1.\n\nexp(number) → number\n\nThe value of exp(x) is e to the power of x. For example, the value of exp(1) is ~2.718281828459045.\n\nexpm1(number) → number\n\nThe value of expm1(x) is e to the power of x minus 1. For example, the value of expm1(0) is 1.\n\nfloor(number) → number\n\nThe value of floor(x) is e is the largest integer less than x. For example, the value of floor(1.6) is 1.\n\nfround(number) → number\n\nThe value of fround(x) is the nearest single precision floating point number to x.\n\nhypot(number,...,number) → number\n\nThe value of hypot(x1,...,xk) is square root of the sum of the squares of x1,...,xk. For example, the value of hypot(3,4) is 5.\n\nimul(number,number) → number\n\nThe value of imul(x,y) is the product of x and y as though they were 32 bit signed integers. For example, the value of imul(4294967295,-5) is 5.\n\nlog(number) → number\n\nThe value of log(x) is natural logarithm of x. For example, the value of log(1) is 0.\n\nlog1p(number) → number\n\nThe value of log1p(x) is natural logarithm of x+1. For example, the value of log1p(0) is 0.\n\nlog2(number) → number\n\nThe value of log2(x) is base 2 logarithm of x. For example, the value of log2(8) is 3.\n\nlog10(number) → number\n\nThe value of log10(x) is base 10 logarithm of x. For example, the value of log10(100) is 2.\n\nmax(number,...,number) → number\n\nThe value of max(x1,...,xk) is the maximum of x1,...,xk. For example, the value of max(3,4,1,2) is 4.\n\nmin(number,...,number) → number\n\nThe value of min(x1,...,xk) is the minimum of x1,...,xk. For example, the value of min(3,4,1,2) is 1.\n\nminus(number,...,number) → number\n\nThe value of minus(x1,...,xk) is the difference of x1,..., xk. For example, the value of minus(9,4,3) is 2.\n\nplus(number,...,number) → number\n\nThe value of plus(x1,...,xk) is the sum of x1,..., xk. For example, the value of plus(2,3,4) is 9.\n\npow(number,number) → number\n\nThe value of pow(x,y) is x raised to the power y. For example, the value of pow(2,3) is 8.\n\nquotient(number,...,number) → number\n\nThe value of quotient(x1,...,xk) is the quotient of x1,..., xk. For example, the value of quotient(12,3,2) is 2.\n\nrandom() → number\n\nThe value of random() is a random number between 0 (inclusive) and 1 (exclusive). For example, one possible value of random is 0.23.\n\nround(number) → number\n\nThe value of round(x) is x rounded to the nearest integer. For example, the value of 1.6 is 2.\n\nsin(number) → number\n\nThe value of sin(x) is the sine of x. For example, the value of sin(0) is 0.\n\nsinh(number) → number\n\nThe value of sin(x) is the hyperbolic sine of i>x. For example, the value of sinh(0) is 0.\n\nsqrt(number) → number\n\nThe value of sqrt(x) is the positive square root of x. Works for any non-negative number x. For example, the value of sqrt(4) is 2.\n\ntan(number) → number\n\nThe value of tan(x) is the tangent of x. For example, the value of tan(0) is 0.\n\ntanh(number) → number\n\nThe value of tan(x) is the hyperbolic tangent of x. For example, the value of tanh(0) is 0.\n\ntimes(number,...,number) → number\n\nThe value of times(x1,...,xk) is the product of x1,..., xk. For example, the value of times(2,3,4) is 24.\n\ntrunc(number) → number\n\nThe value of trunc(x) is the integer part of x (removing any fractional component. For example, the value of trunc(2.3) is 2, and the value of trunc(-2.3) is -2.\n\nString Functions\n\nstringappend(string,...,string) → string\n\nThe value of stringappend(s1,...,sk) is the concatenation of s1, ..., sk. For example, the value of stringappend(\"Hello\",\", \",\"World\",\"!\") is \"Hello, World!\".\n\nstringmin(string,...,string) → string\n\nThe value of stringmin(s1,...,sk) is the si that is lexicographically smallest among the specified strings. For example, the value of stringmin(\"def\",\"abc\",\"efg\") is \"abc\".\n\nmatches(string,string) → [string,...]\n\nIf the string str matches the regular expression pat, the value of matches(str,pat) is the list consisting of the substring of str that matches pat and the substrings of str that match the parenthesized components of pat. For example, the value of matches(\"321-1245\",\"(.)-(.)\") is [\"1-1\",\"1\",\"1\"].\n\nsubmatches(string,string) → [string,...,string]\n\nThe value of submatches(str,pat) is the a list of all substrings of str that match the regular expression pat. For example, the value of matches(\"321-1245\",\".2.\") is [\"321\",\"124\"].\n\nList Functions\n\nappend(list,...,list) → list\n\nThe value of append(l1,...,lk) is the concatenation of l1, ..., lk. For example, the value of append([a,b,c],[d,e,f]) is [a,b,c,d,e,f].\n\nrevappend(string,string) → string\n\nThe value of revappend(l1,l2) is the result of concatenating the reverse of x onto y. For example, the value of revappend([a,b,c],[d,e,f]) is [c,b,a,d,e,f].\n\nreverse(list) → list\n\nThe value of reverse([x1,...,xk]) is [xk,...,x1]. For example, the value of reverse([a,b,c]) is [c,b,a].\n\nlength(list) → numbmer\n\nThe value of length(l) is length of l. For example, the value of length([a,b,c]) is 3.\n\nArithmetic List Functions\n\nmaximum([number,...,number]) → number\n\nThe value of maximum([x1,...,xk]) is the maximum element in the specified list. For example, the value of maximum([3,4,1,2]) is 4.\n\nminimum(list) → list\n\nThe value of minimum([x1,...,xk]) is the minimum element in the specified list. For example, the value of minimum([3,4,1,2]) is 1.\n\nsum(list) → number\n\nThe value of sum([x1,...,xk]) is the sum of the elements in the specified list. For example, the value of sum([3,4,1,2]) is 10.\n\nrange(list) → number\n\nThe value of range([x1,...,xk]) is the range of the elements in the specified list, i.e. the difference between the maximum element and the minimum element. For example, the value of range([3,4,2,1]) is 3.\n\nmidrange(list) → number\n\nThe value of range([x1,...,xk]) is the midrange of the elements in the specified list, i.e. one half of the sum of the maximum element and the minimum element. For example, the value of midrange([3,4,2,1]) is 2.5.\n\nmean(list) → number\n\nThe value of mean([x1,...,xk]) is the mean of the elements in the specified list. For example, the value of mean([3,4,2]) is 3.\n\nmedian(list) → number\n\nThe value of median([x1,...,xk]) is the median of the elements in the specified list. For example, the value of median([3,14,2]) is 3.\n\nvariance(list) → number\n\nThe value of variance([x1,...,xk]) is the mean of the elements in the specified list. For example, the value of variance([3,4,2,1]) is 1.25.\n\nstddev(list) → number\n\nThe value of stddev([x1,...,xk]) is the standard deviation of the elements in the specified list. For example, the value of stddev([3,4,2,1]) is ~1.118033988749895.\n\nString List Functions\n\nstringjoin([string,...,string]) → string\n\nThe value of stringjoin([\"x1\",...,\"xk\"]) is the result of appending \"x1\",...,\"xk\" separated by spaces. For example, the value of stringjoin([\"aa\",\"bb\",\"cc\"]) is \"aa bb cc\".\n\nConversion Functions\n\nsymbolize(string) → symbol\n\nThe value of symbolize(str) is the symbol consisting of only the letters, underscores, and digits in str in which all upper case letters have been converted to lower case. For example, the value of symbolize(\"Your name.\") is yourname.\n\nnewsymbolize(string) → newsymbol\n\nThe value of newsymbolize(str) is the symbol consisting of only the letters, underscores, and digits in str in which all upper case letters have been converted to lower case and all spaces have been replaced by underscores. For example, the value of newsymbolize(\"Your name.\") is your_name.\n\nreadstring(string) → expression\n\nThe value of readstring(str) is first expression that can be parsed from the characters in str. For example, the value of readstring(\"p(a) p(b)\") is p(a).\n\nreadstringall(string) → expression\n\nThe value of readstringall(str) is the list of all expressions that can be parsed from the characters in str. For example, the value of readstringall(\"p(a) p(b)\") is [p(a), p(b)].\n\nstringify(expression) → string\n\nThe value of stringify(expression) is string representation of expression. For example, the value of stringify(p(a) & p(b)) is \"p(a) & p(b)\".\n\nstringifyall(expression*) → string\n\nThe value of stringifyall([x1,...,x1]) is string representation of x1,...,x1. For example, the value of stringifyall([p(a), p(b)]) is \"p(a) p(b)\".\n\nlistify(expression) → list\n\nThe value of listify(expression) is the representation of expression as a list. For example, the value of listify(p(a,b)) is [p,a,b].\n\ndelistify(list) → expression\n\nThe value of delistify(l) is the representation of l as an expression. For example, the value of delistify([p,a,b]) is p(a,b).\n\nAggregates\n\nsetofall(expression,sentence) → list\n\nThe value of setofall([x,p]) is the list consisting of all distinct instances of x for which the corresponding instance of p is true. For example, given a dataset containing p(a,b), p(a,c), and p(a,d), the value of setofall(X,p(a,X)) is [b,c,d].\n\ncountofall(expression,sentence) → number\n\nThe value of countofall([x,p]) is the number of distinct instances of x for which the corresponding instance of p is true. For example, given a dataset containing p(a,b), p(a,c), and p(a,d), the value of countofall(X,p(a,X)) is 3.\n\nOperators\n\nnil\n\nThe symbol nil is another representation for the empty list, i.e. nil and [] are synonymous.\n\ncons(expression,list)\n\nThe symbol cons is the primary operator used in Epilog lists. For example, the list [a,b,c] is equivalent to cons(a,cons(b,cons(c,nil))). Note that a!b!c!nil is another way of writing this expression.\n\nnot(sentence)\n\nThe symbol not is the primary operator in negations. For example the ~p(a) is equivalent to not(p(a)).\n\nand(expression,...,expression)\n\nThe symbol and is the primary operator in conjunctions. For example, (p(X) & q(X)) is equivalent to and(p(X),q(X)).\n\nor(expression,...,expression)\n\nThe symbol or is the primary operator in disjunctions. For example, (p(X) | q(X)) is equivalent to or(p(X),q(X)).\n\nrule(expression,...,expression)\n\nThe symbol rule is the primary operator of rules in view definitions. For example, the rule r(X) :- p(X) & q(X) is equivalent to rule(r(X),p(X),q(X)).\n\ndefinition(expression,expression)\n\nThe symbol definition is the primary operator of function definitions. For example, the definition f(X) := g(h(X)) is equivalent to definition(f(X),g(h(X))).\n\ntransition(expression,expression)\n\nThe symbol transition is the primary operator of transition rules. For example, the transition rule p(X) ==> q(X) is equivalent to transition(p(X),q(X)).\n\nif(condition1, expression1, ..., conditionN, expressionN)\n\nThe symbol if is the primary conditional operator in function definitions. The value of if(condition1, expression1, condition2, expression2, ..., conditionN, expressionN) is expression1 is condition1 is true, else expression2 if condition2 is true ... else expressionN if conditionN is true. For example, the value of if(p(a),\"yes\",true,\"no\") if \"yes\" if p(a) is true else \"no\".\n\nThis builtin is a variadic - i.e., the number of arguments is not fixed.\n\nchoose(expression1, sentence)"
    }
}