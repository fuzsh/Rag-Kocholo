{
    "id": "dbpedia_8289_3",
    "rank": 6,
    "data": {
        "url": "https://stackoverflow.com/questions/215742/what-are-the-best-uses-of-logic-programming",
        "read_more_link": "",
        "language": "en",
        "title": "What are the best uses of Logic Programming?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/a09a6fd45370e0d871914d3bc06fc2cc?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/9b148ba202291626ddcd07f2f160c062?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/SWBQt.jpg?s=64",
            "https://www.gravatar.com/avatar/15f2ffaf40ab4f0b1e10f1be1043e3c8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/d9232ece810b29c809219c50a708fb03?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/BcY5m.jpg?s=64",
            "https://www.gravatar.com/avatar/e27f554e9ed800bca61642acaba29452?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/eMKDL.jpg?s=64",
            "https://www.gravatar.com/avatar/c939f58c5869fead24efafcec0056914?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/015c999a9db79ffb3030b3cc207d0be8?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/c637cb32d67a750b0f15b7847bd1ca50?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/215742/ivc/0c39?prg=4271a8f2-41da-4829-90ae-c6ef78c88ba5"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2008-10-18T23:50:45",
        "summary": "",
        "meta_description": "By Logic Programming I mean the a sub-paradigm of declarative programming languages.  Don't confuse this question with \"What problems can you solve with if-then-else?\"\n\nA language like Prolog is very",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/215742/what-are-the-best-uses-of-logic-programming",
        "text": "Prototyping.\n\nProlog is dynamic and has been for 50 years. The compiler is liberal, the syntax minimalist, and \"doing stuff\" is easy, fun and efficient. SWI-Prolog has a built-in tracer (debugger!), and even a graphical tracer. You can change the code on the fly, using make/0, you can dynamically load modules, add a few lines of code without leaving the interpreter, or edit the file you're currently running on the fly with edit(1). Do you think you've found a problem with the foobar/2 predicate?\n\n?- edit(foobar).\n\nAnd as soon as you leave the editor, that thing is going to be re-compiled. Sure, Eclipse does the same thing for Java, but Java isn't exactly a prototyping language.\n\nApart from the pure prototyping stuff, Prolog is incredibly well suited for translating a piece of logic into code. So, automatic provers and that type of stuff can easily be written in Prolog.\n\nThe first Erlang interpreter was written in Prolog - and for a reason, since Prolog is very well suited for parsing, and encoding the logic you find in parse trees. In fact, Prolog comes with a built-in parser! No, not a library, it's in the syntax, namely DCGs.\n\nProlog is used a lot in NLP, particularly in syntax and computational semantics.\n\nBut, Prolog is underused and underappreciated. Unfortunately, it seems to bear an academic or \"unusable for any real purpose\" stigma. But it can be put to very good use in many real-world applications involving facts and the computation of relations between facts. It is not very well suited for number crunching, but CS is not only about number crunching.\n\nConstraint Logic Programming (CLP)\n\nMany very good and well-suited use cases of logic programming have already been mentioned. I would like to complement the existing list with several tasks from an extremely important application area of logic programming:\n\nLogic programming blends seamlessly, more seamlessly than other paradigms, with constraints, resulting in a framework called Constraint Logic Programming.\n\nThis leads to dedicated constraint solvers for different domains, such as:\n\nCLP(FD) for integers\n\nCLP(B) for Booleans\n\nCLP(Q) for rational numbers\n\nCLP(R) for floating point numbers.\n\nThese dedicated constraint solvers lead to several important use cases of logic programming that have not yeen been mentioned, some of which I show below.\n\nWhen choosing a Prolog system, the power and performance of its constraint solvers are often among the deciding factors, especially for commercial users.\n\nCLP(FD) — Reasoning over integers\n\nIn practice, CLP(FD) is one of the most imporant applications of logic programming, and is used to solve tasks from the following areas, among others:\n\nscheduling\n\nresource allocation\n\nplanning\n\ncombinatorial optimization\n\nSee clpfd for more information and several examples.\n\nCLP(B) — Boolean constraints\n\nCLP(B) is often used in connection with:\n\nSAT solving\n\ncircuit verification\n\ncombinatorial counting\n\nSee clpb.\n\nCLP(Q) — Rational numbers\n\nCLP(Q) is used to solve important classes of problems arising in Operations Research:\n\nlinear programming\n\ninteger linear programming\n\nmixed integer linear programming\n\nSee clpq."
    }
}