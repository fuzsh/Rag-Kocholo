{
    "id": "dbpedia_8289_1",
    "rank": 56,
    "data": {
        "url": "https://raygun.com/blog/programming-languages/",
        "read_more_link": "",
        "language": "en",
        "title": "40 most popular programming languages 2023: When and how to use them",
        "top_image": "https://raygun.com/blog/images/programming-languages/feature-2023.webp",
        "meta_img": "https://raygun.com/blog/images/programming-languages/feature-2023.webp",
        "images": [
            "https://raygun.com/blog/images/navigation/dropdown-carrot.svg",
            "https://raygun.com/blog/images/navigation/dd-triangle.svg",
            "https://raygun.com/blog/images/navigation/dropdown-carrot.svg",
            "https://raygun.com/documentation/navigation/dd-triangle.svg",
            "https://raygun.com/blog/images/navigation/dropdown-carrot.svg",
            "https://raygun.com/blog/images/navigation/dd-triangle.svg",
            "https://raygun.com/blog/images/programming-languages/python.webp",
            "https://raygun.com/blog/images/programming-languages/C.webp",
            "https://raygun.com/blog/images/programming-languages/cplus.webp",
            "https://raygun.com/blog/images/programming-languages/java.webp",
            "https://raygun.com/blog/images/programming-languages/csharp.webp",
            "https://raygun.com/blog/images/programming-languages/visual-basic.webp",
            "https://raygun.com/blog/images/programming-languages/javascript.webp",
            "https://raygun.com/blog/images/programming-languages/sql.webp",
            "https://raygun.com/blog/images/programming-languages/asm.webp",
            "https://raygun.com/blog/images/programming-languages/php.webp",
            "https://raygun.com/blog/images/programming-languages/r.webp",
            "https://raygun.com/blog/images/programming-languages/golang.webp",
            "https://raygun.com/blog/images/programming-languages/vb-classic.webp",
            "https://raygun.com/blog/images/programming-languages/matlab.webp",
            "https://raygun.com/blog/images/programming-languages/swift.webp",
            "https://raygun.com/blog/images/programming-languages/delphi.webp",
            "https://raygun.com/blog/images/programming-languages/ruby.webp",
            "https://raygun.com/blog/images/programming-languages/perl.webp",
            "https://raygun.com/blog/images/programming-languages/objective-c.webp",
            "https://raygun.com/blog/images/banners/post-cta-aier-blog.png",
            "https://raygun.com/blog/images/programming-languages/feature-2023.webp",
            "https://raygun.com/blog/images/java-debugging-tools/feature.jpg",
            "https://raygun.com/blog/images/ios-crash-reporting-tools/feature-2022.jpg",
            "https://raygun.com/blog/images/raygun-flag.svg",
            "https://raygun.com/blog/images/rocky-ground.svg",
            "https://raygun.com/blog/images/icon-github.svg",
            "https://raygun.com/blog/images/x-logo.svg",
            "https://raygun.com/blog/images/youtube-logo.svg",
            "https://raygun.com/blog/images/icon-linkedin.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-01-25T00:00:00",
        "summary": "",
        "meta_description": "If you're looking to learn one of the most popular programming languages, this post assesses the pros and cons of the 40 most in-demand programming languages.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico?v=2",
        "meta_site_name": "Raygun Blog",
        "canonical_link": "https://raygun.com/blog/programming-languages/",
        "text": "With the programming languages constantly evolving, it’s essential to keep track of which languages are leading the pack. In this 2-parter, we’ll dive into the top 40 programming languages of 2023 and analyze what makes them stand out. This is part one; stick around for part two at the end of this blog post.\n\nThere are many - maybe too many - programming languages to choose from. One of the most effective ways to assess their popularity is by the number of search queries for each language, across the web. The TIOBE Index is the definitive list of programming languages, ranked in order of search volume popularity as an indication of prominence and public interest. This article lists the top 40 languages on that list, with a brief overview and their pros, cons, and hiring prospects.\n\nIn this post:\n\nPython\n\nC\n\nC++\n\nJava\n\nC#\n\nVisual Basic .NET\n\nJavaScript\n\nSQL\n\nAssembly language\n\nPHP\n\nR\n\nGo\n\nClassic Visual Basic\n\nMATLAB\n\nSwift\n\nDelphi/Object Pascal\n\nRuby\n\nPerl\n\nObjective-C\n\nHereâs our list of the top 40 most in-demand programming languages.\n\n40 top TIOBE programming languages\n\n1. Python\n\nPopularity: Very High\n\nSalary expectations: Typically between USD$89,271 - $105,820 in the US\n\nEase of Learning: Easy to Moderate\n\nUse Cases: General Use and Specialty\n\nWeb Applications\n\nArtificial Intelligence\n\nPython is a relatively new programming language, first introduced in 1989, that has surged in popularity with the emergence of new fields of application. It is an interpreted language that supports automatic memory management and object-oriented programming. It heavily prioritizes developer experience.\n\nPython is very popular for general-purpose programming, including web applications. It has recently become known for specialty use in machine learning applications.\n\nPython jobs are very plentiful, so itâs easy to find a job using Python, and thereâs still plenty of room for growth.\n\nPros\n\nReadability and flexibility make Python suitable for a huge range of applications.\n\nDynamic typing and asynchronous code help to speed up the development process.\n\nCan be learned very quickly by newbie developers.\n\nCons\n\nPythonâs performance isnât as good as some of its peers\n\nExecutes a single thread at a time because of Pythonâs GIL.\n\nNo native compatibility with iOS or Android is a big disadvantage for mobile developers.\n\n2. C\n\nPopularity: Medium\n\nSalary expectations: Typically between USD$71,433 and $95,168\n\nEase of Learning: Moderate\n\nUse Cases: General Use and Specialty\n\nEmbedded systems\n\nHardware drivers\n\nLocal Applications\n\nFirst introduced in 1972, C is well-established and enduring. Until Java was introduced, C was the dominant high-level language. The first versions of Unix, written in Assembly language, were ported to C. It was then used in the development of other early operating systems, including IBM System/370.\n\nC has a long history of development on older systems with slower processors and little memory. Programs written in C had to be very efficient, so C has a reputation for high performance in cases where speed matters.\n\nC is still very popular due to its use in systems development, including operating systems, embedded devices, and as firmware. The C standard library has been ported to many platforms, so it is viable in many use cases. However, the low-level systems programming it is typically used for is a more specialized skill than general application programming. This explains why C tends to have relatively few job openings as compared to other languages in the top 10.\n\nThere is likely to be some overlap in the jobs market with C++ (see the C++ listing below.)\n\nPros\n\nC is the basis for many other popular languages, so knowledge of C will serve you well\n\nHighly portable, readable and maintainable\n\nFairly easy to learn\n\nCons\n\nUsually limited to âbedrockâ code, like systems coding\n\nNo safety nets, for example exception handling, to catch any errors as they are coded\n\n3. C++\n\nPopularity: High\n\nSalary expectations: Typically between USD$70,077 and $82,457\n\nEase of Learning: Difficult\n\nUse Cases: General Use, Specialty\n\nLocal Applications\n\nWeb Services\n\nProprietary Services\n\nC++ extends C with object-oriented features. The âdouble-plusâ comes from the increment operator from C. C++ was developed to bring features from older languages to faster, more powerful platforms.\n\nC++ occupies a similar area in the market to C, including systems programming and low-level hardware development. Over the years, the C++ standard libraries and specifications have been expanded considerably, leading to criticism that it has become overcomplicated and difficult to learn.\n\nPros\n\nTemplating and inheritance make it easy to flexibly reuse design components\n\nA reputation for being very stable\n\nCons\n\nOften accused of being âbloatedâ\n\nC++âs complexity and abundance of features can compromise performance\n\n4. Java\n\nPopularity: Very high\n\nSalary expectations: typically between USD$84,316 - $112,332/yr in the US\n\nEase of Learning: Moderate to Difficult\n\nUse Cases: General Use and Specialty\n\nWeb applications\n\nMobile\n\nEmbedded systems\n\nJava is the leading general-purpose application development language and framework. It was introduced in 1991 by Sun Microsystems as a high-level, compiled, memory-managed language.\n\nJavaâs syntax is similar to C/C++, with curly braces for closures and semicolons to end statements. Automatic memory management is one of the features that made Java so popular after its initial release. Before Java was introduced, languages that required manual memory management, such as C and C++, were dominant. Manual memory allocation is tedious and error-prone, so Java was hailed as a major step forward for application developers.\n\nThe promise of Java, beyond memory management, was its cross-platform capability. This was marketed as âwrite once, run anywhere.â The Java Virtual Machine (JVM) runs Java bytecode, which is compiled from the Java language. JVMs are available for most major operating systems, including Linux, Mac, and Windows. It doesnât always work perfectly, but when it does, a program written in Java can run on any platform with a compatible JVM.\n\nJava is used for business, web, and mobile applications and is the native language for Googleâs Android OS. Java also powers millions of set-top boxes and embedded devices. Java development skills are highly sought after.\n\nIf youâre considering a career in software development, you should strongly consider learning Java.\n\nPros\n\nWrite Once, Run Anywhere: One version of Java code will run on any machine.\n\nBackwards compatibility: the newest versions of Java are still (mostly) compatible with even the oldest, making migrations painless.\n\nBecause Java has been so big for so long, thereâs a huge ecosystem of frameworks, libraries, and community support.\n\nCons\n\nThe backwards compatibility principle is sometimes taken too far, extending the life of outdated and flawed features that should be retired.\n\nGreedy with memory and is a relatively verbose language, especially compared to the modern syntax of competitors like Python.\n\n5. C#\n\nPopularity: High\n\nSalary expectations: typically falls between USD$97,446 and $120,439\n\nEase of Learning: Moderate\n\nUse Cases: General Use\n\nWeb Applications\n\nLocal Applications\n\nServices/Microservices\n\nC# was developed and introduced by Microsoft in 2000, along with the overall .NET framework. Syntactically, C# is very similar to Java and C/C++. It is a compiled, object-oriented language that compiles to .NET Intermediate Language. Originally, C# was used for Microsoft-focused development of Windows Forms and web development with ASP.NET. The .NET ecosystem has evolved recently with the introduction of the .NET Standard and .NET Core. These new frameworks and standards are cross-platform, running on Windows, Linux, and Mac.\n\nC# is popular for local and web application programming, often (but not necessarily) in systems developed primarily based on Microsoft technology. Microsoftâs Xamarin framework allows developers to write Android and iOS applications in C#. It is suitable for systems programming in some cases, and has libraries available for embedded systems.\n\nPros\n\nSimple syntax makes C# more readable than predecessors\n\nCombined with .NET, powerful cross-platform flexibility\n\nMaintained by Microsoft, with strong documentation, updates, and community support\n\nCons\n\nDependent on .NET for cross-platform and performance capabilities\n\nSlow and steep learning curve\n\n6. Visual Basic .NET\n\nPopularity: Low\n\nSalary expectations: approx. USD$84,000 on average\n\nEase of Learning: Easy\n\nUse Cases: General Use\n\nWeb Applications\n\nLocal Applications\n\nVisual Basic.NET (VB.NET) is Microsoft’s implementation of the Visual Basic language that compiles to .NET Intermediate Language. This allows developers to write .NET applications using Visual Basic and is a favorite for beginners. Applications written in VB.NET are just as capable as any. However, VB.NET was never very popular for business applications, with serious application developers preferring C, C++, and C#. Most applications written in VB.NET tend to be older and written for specific purposes, and are likely to be considered to be “legacy” applications destined for decommission or redevelopment.\n\nPros\n\nBeginner-friendly\n\nIdeal for spinning up a quick prototype\n\nCons\n\nBloated syntax\n\nCode written in VB .NET tends to have poor performance\n\n7. JavaScript\n\nPopularity: Very High\n\nSalary expectations: typically between USD$97,858 and $120,182\n\nEase of Learning: Moderate\n\nUse Cases: General Use\n\nLocal Applications\n\nWeb Applications\n\nJavaScript is a high-level, dynamically typed, interpreted language. It uses Java-like syntax, hence the name JavaScript. JavaScript was first introduced in the early days of the public Internet, 1995. JavaScript is used to write code that runs in web browsers, on the client side. If youâve been using the Web long enough to remember the introduction of Google Maps, you witnessed some of the first magic: the âinfinite scrollingâ in Maps is done using JavaScript.\n\nSince its first introduction, JavaScript support has been added to all major web browsers. JavaScript frameworks including React, Angular, and Vue offer a Model-View-Controller application development paradigm, running entirely in the browser. JavaScript now supports the visual, browser-run elements of most modern web applications, which is why most Real User Monitoring tools cater for JavaScript.\n\nJavaScript can also be combined with HTML to make cross-platform mobile applications. NodeJS is a web server that runs JavaScript on the server side. NodeJS applications are written entirely in JavaScript.\n\nGiven all these use cases and support, JavaScript is both popular and in high demand. Itâs not very difficult to learn, though there are advanced programming techniques that take time to master. If youâre more comfortable with object-oriented languages, consider looking into TypeScript. TypeScript âoverlaysâ object-oriented features and syntax, and transpiles to native JavaScript.\n\nPros\n\nEasy to learn and in wide demand\n\nImmense versatility (as evidenced by being so widespread)\n\nRapid development and debugging\n\nCons\n\nJavaScript isnât âstrictâ and wonât enforce good habits, leading to bad code from inexperienced developers\n\nRunning client-side opens landmines in browser interpretation and security vulnerabilities\n\n8. SQL\n\nPopularity: Very High\n\nSalary expectations: typically between USD$81,506 and $101,426\n\nEase of Learning: Easy to Moderate\n\nUse Cases: Specialty\n\nDatabase Queries\n\nSQL stands for Structured Query Language. SQL is used to query and modify data in a Relational Database Management System (RDBMS.) Vendor-specific implementations, such as PL/SQL (Oracle) and T-SQL (Microsoft) offer product-specific features.\n\nSQL isnât a general-purpose language that can be used to write applications. However, it is at least a useful, if not required skill of most developers. The term âfull-stack developerâ refers to a developer with a well-rounded skill set that includes all aspects of an application. This almost always includes accessing and saving data to a database. SQL is not hard to learn initially, though there are advanced use cases in Big Data and data analysis that require significant experience.\n\nSQL is very popular with both developers and Database Administrators, so jobs that require SQL skills are plentiful. However, it is not a complete standalone skill set. SQL experience is a big plus on a resume, but itâs really only one of the skills required for any given job.\n\nPros\n\nConcise syntax and range of functions\n\nInvaluable for enterprise systems\n\nA valuable supplementary skill\n\nCons\n\nReliant on a database engine to run\n\nLimited scope and capabilities\n\n9. Assembly language\n\nPopularity: Low\n\nSalary expectations: typically between USD$70,000 - $98,000\n\nEase of Learning: Difficult\n\nUse Cases: Specialty\n\nSystems Programming\n\nHardware / Firmware development\n\nâAssembly languageâ is a generic term for low-level code that closely represents the native machine instructions for a given microprocessor. Most of the languages on this list are âhigh-levelâ languages that are closer, syntactically, to English. High-level language code must be compiled down to an intermediate bytecode, or directly to machine instructions. Assembly code is assembled, (hence the name) not compiled.\n\nThe intent of a line of code written in C or Ruby is relatively easy to understand, just by reading it. Assembly, by contrast, is very difficult to understand without a careful reading of the entire program. Each operation, including math operations and moving data in and out of registers, is a complete statement. This means that it takes a lot more assembly code than C code to do the same amount of work.\n\nAssembly code is most useful when performance is the most important goal. It is used for very low-level systems programming, or in some cases may be combined with application code for a performance boost. Jobs that require knowledge of assembly will include systems programming and hardware development, but itâs not a common core requirement.\n\nPros\n\nMinimal execution time and memory use\n\nHelps the developer to better understand machine-level computer architecture\n\nCons\n\nVery difficult to read and write\n\nA good supplementary skill, but not a first language\n\n10. PHP\n\nPopularity: High\n\nSalary expectations: typically between USD$77,239 - $102, 413 in the USA\n\nEase of Learning: Easy\n\nUse Cases: General Use\n\nWeb Applications\n\nPHP originally stood for âPersonal Home Pageâ as part of its first name, PHP/FI (Forms Interpreter.) The official acronym is now PHP: Hypertext Processor. Its primary role is as a web application server-side scripting system. It was originally developed to extend a CGI program to support HTML forms and database access. The code of a PHP program is mixed in with the HTML, making it similar to Microsoftâs classic (pre-.NET) Active Server Pages. The interpreter reads the HTML and code, and executes the code portions of the page.\n\nPHP is popular because itâs easy to learn. It is also the basis of popular web-based applications such as WordPress and Joomla. However, PHP also has a mixed reputation relating to software quality. Early versions lacked security controls and features that made it difficult to develop highly-secure applications. Recent developments in PHP frameworks and libraries have made improvements in security.\n\nThere are plenty of PHP jobs available for content-focused web applications like WordPress, and proprietary systems developed in PHP.\n\nPros\n\nA powerful backend language\n\nStable and maintainable\n\nExcellent community support and mature ecosystem\n\nCons\n\nBetter suited for web applications than desktop\n\nSome criticisms that PHP lacks security\n\n11. R\n\nPopularity: Low\n\nSalary expectations: typically between USD$74,619 - $95,401\n\nEase of Learning: Difficult\n\nUse Cases: Specialty\n\nStatistical Computation and Analysis\n\nThe programming language R is primarily used by statisticians and researchers to perform statistical analysis of datasets. Demographers, insurance actuaries, and other jobs focused on statistics use R. Because of these practical fields of application, its code mass is considerable. As with MATLAB, most of the knowledge needed to work with R relates to statistics. R programmers combine statistics knowledge with the essentials of programming and software development.\n\nNot many programmers are proficient in R, and the number of jobs also isn’t huge due to the specialized nature of the work. However, R knowledge can be a big advantage for data analysts doing statistical work. If that work sounds like something you want to look into, you should strongly consider adding R to your toolbox.\n\nPros\n\nPowerful specialized tool for academia and industry\n\nCons\n\nLimited applications\n\n12. Go\n\nPopularity: Low\n\nSalary expectations: approximately USD$102,329 on average\n\nEase of Learning: Moderate\n\nUse Cases: General\n\nWeb Applications\n\nLocal Applications\n\nGo (also known as Golang) is a relatively new kid on the block. It was introduced by two Google engineers in 2009. Go syntax borrows heavily from C and Java. The design goals for Go included cross-platform compatibility, simplicity, and support for modern processors.\n\nGo is relatively easy to learn. It has some of the complexities of C/C++ (such as pointers) but its syntax and conventions are simpler. Thereâs a rapidly growing following in engineering and DevOps circles, and Go is a popular language in growing fields like machine learning. And because knowledge of Go is comparatively rare, roles that require proficiency in Go can be more lucrative.\n\nPros\n\nGrowing in popularity driven by Googleâs endorsement\n\nFast and powerful\n\nExperienced programmers can learn relatively quickly\n\nCons\n\nNot yet as firmly established as its peers\n\n13. Visual Basic\n\nPopularity: Low\n\nSalary expectations: typically between USD$62,403 and $78,169\n\nEase of Learning: Easy\n\nUse Cases: General\n\nLocal Applications\n\nVisual Basic (VB) was introduced by Microsoft as a variant of the BASIC programming language. It is an event-driven language and Integrated Development Environment, primarily used to develop Windows applications. VB was designed to be easy to learn and to rapidly produce usable software. Visual Basic for Applications (VBA) is embedded in older versions of Microsoft Office applications, such as Access. VBA was used to provide programmatic manipulation of Office documents. Access databases used VBA to compose mini-applications.\n\nMicrosoft deprecated Visual Basic 6.0, the last version of Visual Basic, in 2008. While much code remains in the wild, it is no longer supported and jobs that require Visual Basic are dwindling. It is likely that any remaining jobs are focused on maintenance and/or porting to a modern platform.\n\nPros\n\nA good tool for beginners\n\nExtremely accessible and simple\n\nCons\n\nNo longer relevant\n\nMicrosoft-specific\n\n14. MATLAB\n\nPopularity: Medium\n\nSalary expectations: approx. USD$83,000 on average\n\nEase of Learning: Moderate to Difficult\n\nUse Cases: Specialty\n\nMathematical Research\n\nMATLAB is not a programming language per se. Strictly speaking, it’s an application used to calculate and model complex mathematical computations. It is used primarily in research settings, at universities and labs. MATLAB can handle complex matrix manipulations, and supports extensions to use complex mathematical notation. Functions written in C, C#, and FORTRAN can be called from MATLAB.\n\nThe knowledge needed to use MATLAB is more related to mathematical concepts and skills than knowledge of programming. If youâre already an advanced math student, for example working on a PhD in mathematics, MATLAB is relatively easy to learn. MATLAB is a valuable skill for those seeking a job in engineering or mathematics.\n\nPros\n\nIdeal for visualizing and manipulating technical data\n\nMany libraries and functions to sort common use cases\n\nCons\n\nNarrow specialty applications\n\nRequires mathematical background\n\n15. Swift\n\nPopularity: Medium\n\nSalary expectations: Typically between USD$74,406 - $99,129\n\nEase of Learning: Moderate to Difficult\n\nUse Cases: Apple Mobile and Desktop applications\n\nMacBook\n\niPhone\n\niPad\n\nApple introduced Swift in 2014 as a modern alternative to Objective-C. Its goals were to be easier to debug than Objective-C. Swift syntax is easier to read, and requires less code to do the same amount of work. However, poor version compatibility introduced with new versions may have stunted its adoption.\n\nDespite a complicated history, there are a fair number of jobs available for Swift, and it is likely that it’s here to stay. As mentioned in the Objective-C listing below, if you want to develop for the Apple ecosystem, hedge your bets and learn both.\n\nPros\n\nPopularity is stabilizing after a rocky beginning\n\nLess verbose and more readable, fostering better developer experience\n\nCons\n\nLingering backwards compatibility issues\n\n16. Delphi/Object Pascal\n\nPopularity: Low\n\nSalary expectations: typically between USD $80,000 - $150,000\n\nEase of Learning: Moderate\n\nUse Cases: General\n\nLocal ppplications (mobile and desktop)\n\nWeb applications (frontend: transpilation to JS, backend: REST middlewares)\n\nDelphi is a programming language and Integrated Developer Environment (IDE) for the Object Pascal language. Modern Object Pascal is an object-oriented, multi-paradigm derivative of procedurally oriented Pascal. Pascal was originally intended as a teaching tool, appeared in 1970.\n\nThis remains on the TIOBE list despite its age because there’s a lot of software out there written in Object Pascal with Delphi. New code is still being written in the language to this day. If you want to write software as a profession, Delphi and the Modern Object Pascal language is worth considering adding to your toolbelt.\n\nPros\n\nConcepts like OOP and structuring maintainable code are transferable to other languages\n\nSupports multi platform development for mobile, desktop and the web.\n\nEfficient turnaround from idea to product.\n\nModern, fast compilers.\n\nCons\n\nJob market fluctuates and isn’t as robust as distant cousin C#.\n\nThe IDE and compilers are proprietary, which open-source advocates don’t like.\n\n17. Ruby{ruby}\n\nPopularity: High\n\nSalary expectations: typically between USD$71,811- $89,431\n\nEase of Learning: Easy to Moderate\n\nUse Cases: General\n\nWeb Applications\n\nScripting\n\nRuby is an interpreted, dynamically typed, object-oriented language first introduced in the mid-1990s. It was inspired by several other languages, including Lisp, Perl, and Ada. Ruby is very popular for web application development. The Ruby on Rails framework (now known simply as âRailsâ) is a model-view-component server-side framework written in Ruby.\n\nRuby is fairly easy to learn. Its common use in web applications and steady growth makes job opportunities easy to find.\n\nPros\n\nEasy to learn\n\nHealthy job prospects\n\nA leader in the web dev world\n\nCons\n\nNot a high-performance language\n\nDifficulty of debugging\n\n18. Perl\n\nPopularity: High\n\nSalary expectations: typically approx. USD$77,714 on average\n\nEase of Learning: Easy to Moderate\n\nUse Cases: General\n\nLocal Applications\n\nWeb Applications\n\nPerl was introduced in 1987 as a utilitarian scripting language, evolving from CGI scripting. Recent releases of Perl are quite different from early releases.\n\nPerl is fairly easy to learn, but it has its detractors. The development of Perl was somewhat haphazard, leading to criticism that it is not well-organized. This has given Perl a reputation for being less than robust.\n\nA lot of software has been written in Perl, and that continues to this day. Perl jobs are not hard to find. Having said that, it would be a stretch to say that Perl is a âmodernâ language. Perl may be a good language to learn early in a career as a way to get started, but it shouldnât be the only one.\n\nPros\n\nFeatures like dynamic typing are designed to make development easier\n\nA practical and utilitarian language\n\nCons\n\nUse of special characters makes Perl an âuglyâ language\n\nHigh CPU consumption\n\n19. Objective-C\n\nPopularity: High\n\nSalary expectations: typically approx. USD$104,000/yr in the USA\n\nEase of Learning: Difficult\n\nUse Cases: Mobile Applications\n\nApple iOS devices: iPhone, iPad\n\nObjective-C is a general purpose, compiled, object-oriented language. Its syntax is derived from Smalltalk. Until 2014, when Apple introduced Swift, it was the primary language used by Apple to develop applications for MacOS and iOS.\n\nObjective-C is still relatively popular due to the large number of applications available that were written using it. Now that modern MacOS and iOS development is primarily in Swift, it’s likely that this popularity will eventually fall off as the number of supported applications tapers over time. Objective-C is not easy to learn. It uses syntax and language conventions that are not common to other languages, so experience with other languages does not apply well to Objective-C.\n\nIf you want to focus on software development for the Apple ecosystem, itâs a good idea to pick up both Objective-C and Swift. This will give you the ability to work on older applications written in Objective-C, and write new applications in Swift. Between the two, jobs are readily available.\n\nPros\n\nStill indispensable for iOS development\n\nCons\n\nNon-transferrable principles\n\nWill likely eventually be replaced\n\nChallenging to learn"
    }
}