{
    "id": "dbpedia_8289_3",
    "rank": 4,
    "data": {
        "url": "https://www.soundonsound.com/techniques/logic-writing-midi-scripts",
        "read_more_link": "",
        "language": "en",
        "title": "Logic: Writing MIDI Scripts",
        "top_image": "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_02-4qYoLx6lwO_r49QnFETw29z70gnyRmqI.jpg",
        "meta_img": "",
        "images": [
            "https://www.soundonsound.com/sites/all/themes/sound_on_sound/logo.svg",
            "https://www.soundonsound.com/sites/all/themes/sound_on_sound/images/logo-mobile.png",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/news_preview/s3/imagelibrary/L/Logic_Scripting_01-j9QWAtegvua67pvGx0ToRtcYOLXQxBQQ.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_02-4qYoLx6lwO_r49QnFETw29z70gnyRmqI.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_03-KiUiHG2JU3OEAIlHtep7fsQ9fFSwF95D.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_04-fHdpke0AZDWSDP9eUhqX.a1X9s2jsXa6.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/news_preview/s3/imagelibrary/L/Logic_Scripting_05-r72j0M8sUgP9eNa2pZCAL0lBUo3G5bcW.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_06-lGSyHcMJ1skpAjC_vaO3WC3LFKmN8Emq.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_07-LeMHnTqOENKo.pS_N3VffhU0NyvqJFzB.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/L/Logic_Scripting_08-HSiRihWhy814fsEZ10zH3ze15bXfZtDR.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/b3cc511f-e4b8-4123-8db5-fa6186b7f989/introducing-logic-pro-11-course.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/f1f73514-883b-41fa-8a6b-9ec16abce863/logic-mastering-assistant-in-action-course.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/23b38e61-b2dc-469b-bfad-0ce6f65d7dda/logic-10_8-what_s_new-macprovideo-course.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/41964e12-e10a-4133-947c-afa005986a44/logic-pro---designing-trailer-sfx-course.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/1aec8e3a-779c-4860-bdd1-827675c472c0/what-s-new-in-logic-10.7.5-macprovideo-course.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/7e887e69-dc46-406a-8611-2c745a1fb889/logic-406-more-hip-hop-beatmaking.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/f2ec2979-d9e8-471d-a5d7-71cde102837c/logic-405-hip-hop-1.jpg",
            "https://d154hy2b5aa41t.cloudfront.net/course_covers/9dc077a2-6acd-4830-8699-a3efea38bd3b/logic-101.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/300px_wide_plain/s3/media-youtube/Y_vEhgzQtIQ-c8S02j6HmfjrX.ei5k2EPOtCr_T2bZZB.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/300px_wide_plain/s3/media-youtube/U4AbgBHugK8-pciwtR3fustxLK15kqtqPvBVR2BbDMd_.jpg",
            "https://dt7v1i9vyp3mf.cloudfront.net/styles/300px_wide_plain/s3/media-youtube/kVUf1XaGfTk-T120Qcym38bdOHxMDPdGbib5EoIw4PXH.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Logic’s Scripter plug‑in opens the doors to powerful custom MIDI manipulation.",
        "meta_lang": "en",
        "meta_favicon": "https://www.soundonsound.com/sites/default/files/favicon_0.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.soundonsound.com/techniques/logic-writing-midi-scripts",
        "text": "Logic’s Scripter plug‑in opens the doors to powerful custom MIDI manipulation.\n\nOne of the features unique to Logic in the early days of MIDI sequencers was the flexibility of its object‑orientated MIDI programming environment. While many of the sexy developments over the years have focused on audio processing and virtual effect and instrument plug‑ins, the MIDI side has sat quietly under the hood making everything work together. With the introduction of the Scripter MIDI plug‑in, Apple once again opened up real‑time MIDI programming in Logic Pro X, allowing users to create bespoke MIDI processing tools.\n\nScripter uses the JavaScript programming language as its engine. In many ways, coding is easier to learn than human language — there are no irregular verbs, or words that are spelt the same but have widely different meanings. Additionally, the coding crowd are a friendly bunch and the reuse of snippets of code is common amongst programmers, so ‘newbies’ don’t have to reinvent the MIDI wheel to create new Scripter plug‑ins.\n\nHandily, Apple have provided a range of Scripter tutorials that we can explore and utilise as a base for experimentation (see Screen 1). You can’t break anything here — just make sure you save copies of the tutorial files before you edit. Firstly, let’s load up Scripter on a MIDI track, from the MIDI FX pull‑down menu. You’ll see that the plug‑in has a standard preset menu and here, alongside the tutorials, there are many more MIDI plug‑ins that have been created using Scripter (something I didn’t realise before I started to create my own Scripts!).\n\nScripts In The Night\n\nOn loading a preset, two windows will open: the plug‑in itself and a script editor window. The latter is split into two parts; the top is where code is inserted, the lower a ‘Monitor’ section (the Console), where any output or errors generated appear. The default code that is created here is a pass‑through with MIDI monitor (Screen 2).\n\nIt’s important to understand right away that MIDI data are called Events in Scripter. If you play some notes and wiggle some controllers, you’ll see the data passing through Scripter presented in the Console. You should also hear output from any virtual instrument you have inserted on the same track. This simple plug‑in consists of two lines of code and is part of a function — constrained by {wiggly brackets} — that can be called from larger JavaScript projects. A function is a kind of self‑contained utility that can perform some kind of action. The HandleMIDI() function is very important in Scripter as it’s the one that allows you to process MIDI data passing through it.\n\nThe event.trace(); line sends data to the Console, while the event.send(); line passes MIDI through the plug‑in — the closed brackets mean that all data is sent. If you delete the event.send(); line and click on Run Script you’ll now see (and hear!) that no data is passed through Scripter. All JavaScript functions have a similar structure. Note that spelling and the use of letter cases and other characters are vitally important for the code to run correctly — most errors are caused by not following this rule!\n\nNote that spelling and the use of letter cases and other characters are vitally important for the code to run correctly — most errors are caused by not following this rule!\n\nWhile it’s always fun to see MIDI data, it’s even better to process it! Apple have handily provided many Scripter examples that we can explore and reuse as jumping‑off points for our own plug‑ins. If you click on the Factory default pull‑down menu and scroll to the bottom of the list, you’ll see a Tutorial submenu. This contains examples of basic functionality and code we can repurpose. Let’s have a look at the Transpose and Delay Script (Screen 3). Select it and click on Open in Script Editor. Try playing some notes to hear the effect the MIDI processing has on your input.\n\nColour Coding\n\nYou’ll notice that there is some information (‘remarks’) about the plug‑in in green behind the double // parallel lines. These lines say to Scripter “these are comments only!” and are a really useful feature, not only for reminding your future self what the heck you were trying to do with the plug‑in, but also to temporarily disable code when debugging. The other thing to notice is that many of the JavaScript commands are in relatively understandable English and that some bits are in different colours. The Scripter editor will assist you in typing commands and you can usually tell that you’ve done something wrong when your text doesn’t change to the expected colours. Try typing in event.send into a Scripter window and see how the text changes colour.\n\nThis is how the Transpose and Delay script works. Note that the code is ‘enclosed’ in the HandleMIDI(event) function:\n\nevent.send(); makes sure the event is sent through Scripter.\n\nif (event instance of Note) checks to see if the MIDI event is actually a note and not a controller, SysEx or other data. It’s common in programming to check If a condition applies and then do something or, if it does not, do something else!\n\nevent.pitch += 12; transposes the note up 12 semitones (one octave). See Screen 4.\n\nevent.sendAfterMilliseconds (100); sends this transposed data to the instrument after a delay of 100ms.\n\nTry playing around with the delay time and transposition values and audition the results. Also, notice the curly brackets in the code. These define routines and subroutines. There must be an equal number of left‑ and right‑facing brackets for the code to work — the Console will tell you when there’s not!\n\nTo show how these work, open up two instances of Scripter and load the Transpose and Delay Script in one and the Trace Events Script in another. Copy the event.trace(); code to the former script and click on Run Script. Now when you input MIDI data you should see the input notes displayed along with hearing the delay and transpose processing. If you stick event.trace(); in the ‘if’ subroutine, you can get Scripter to only print the inputted MIDI notes (Screen 5). Entering controller data (modulation, sustain) should have no visible effect.\n\nScripter is a fully functional MIDI processing environment within Logic Pro that takes the program’s abilities in this area to new levels...\n\nGetting Graphical\n\nIf you check out some of the Scripter plug‑ins, you’ll see many of these have faders and other simple objects, such as sliders and pull‑down menus. The slider object itself is created using the var (‘variable’) Plug‑inParameters line in Screen 6. You can see there are parameters attached to this, such as the name, “Slider” (in quotes as it’s a text string), whether it’s linear or logarithmic, minimum and maximum values, the default value, how many steps you’ll need and a name for the units displayed. This whole slider is, in effect, a variable and is created outside the function HandleMIDI(event) subroutine as we want to use it for the whole Script. The variable ActualSliderValue stores the value of the position of the slider itself, so that one lies inside the subroutine. Trace(ActualSliderValue); prints the slider value to the Console. If you change the slider and enter a MIDI note, you’ll see the value appear in the Console. And Trace(); is a really useful tool for checking what’s going on in your code.\n\nThere are quite a few other simple GUI objects you can add to your Script, such as menus, radio buttons and tick boxes. Screen 7 shows how these can be created as a variable array — pay particular attention to brackets and commas that help define this array. An array is just like a set of cells in a spreadsheet, so here we are effectively storing these values for the GUI objects so we can access them anywhere in our script.\n\nIf, Then, Else…\n\nNow let’s combine code from different scripts to create a new MIDI processing tool. Open the default Scripter plug‑in, add the code from Screen 6 and save it as ‘My First Transposer’. Next, open the Transpose and Delay script in a new Scripter plug‑in and copy this code into the My First Transposer script window:\n\n// if it’s a note\n\nif (event instanceof Note) {\n\nevent.pitch += 12;\n\n}\n\nNext, change the last line to event.pitch +=ActualSliderValue; (replacing 12 with the variable that contains the slider value). Assuming your code looks like that in Screen 8, adjusting the slider will change the MIDI note played by your keyboard by a value defined by the position of the slider.\n\n{The Bottom line}\n\nScripter is a fully functional MIDI processing environment within Logic Pro that takes the program’s abilities in this area to new levels, albeit without any fancy graphical interface. Further help and information on Scripter is available in the Logic Pro Manual and routines are available at GitHub (https://kabirnagral.github.io/LPXscripts/). Places like Reddit and other forums on the net are also great sources of help and assistance in creating scripts for Logic Pro X."
    }
}