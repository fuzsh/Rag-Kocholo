{
    "id": "dbpedia_8289_3",
    "rank": 98,
    "data": {
        "url": "https://engineering.fb.com/2022/07/27/developer-tools/programming-languages-endorsed-for-server-side-use-at-meta/",
        "read_more_link": "",
        "language": "en",
        "title": "Programming languages endorsed for server-side use at Meta",
        "top_image": "https://engineering.fb.com/wp-content/uploads/2022/07/Eng-Blog-Self-Serve-Hero-Images-DEBUGGING-203-Teale-1.jpg",
        "meta_img": "https://engineering.fb.com/wp-content/uploads/2022/07/Eng-Blog-Self-Serve-Hero-Images-DEBUGGING-203-Teale-1.jpg",
        "images": [
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/logo-meta.svg",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/icon-search.svg",
            "https://engineering.fb.com/wp-content/uploads/2022/07/Eng-Blog-Self-Serve-Hero-Images-DEBUGGING-203-Teale-1.jpg",
            "https://engineering.fb.com/wp-content/uploads/2024/07/AI-Lab-Hero2.png?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2024/06/Meta-Tech-Podcast_-C-Rust.png?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2022/04/Eng-Blog-Self-Serve-Hero-Images-DEBUGGING-203-Blue.jpg?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2024/06/Serverless-Jupyter-Notesbooks-Hero.png?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2024/05/Composable-Data-Management-at-Meta-1.png?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2024/03/Logarithm-hero.png?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2021/04/Rust-Facebook-Hero.jpeg?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2022/04/Eng-Blog-Self-Serve-Hero-Images-ANALYTICS-401-Teale.jpg?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/uploads/2022/04/Eng-Blog-Self-Serve-Hero-Images-DEBUGGING-203-Blue.jpg?w=580&h=326&crop=1",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/meta_logo.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/meta_logo.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/meta_logo.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/meta_logo.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/meta_logo.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/rss.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/android.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/ios.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/web.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/backend.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/hardware.png",
            "https://engineering.fb.com/wp-content/themes/code-fb-com/img/meta_logo_full.svg",
            "https://www.facebook.com/tr?id=660742068067366&ev=PageView&noscript=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Eric Garcia"
        ],
        "publish_date": "2022-07-27T00:00:00",
        "summary": "",
        "meta_description": "We’re sharing our internal programming language guidance that helps our engineers and developers choose the best language for their projects.",
        "meta_lang": "en",
        "meta_favicon": "https://engineering.fb.com/wp-content/themes/code-fb-com/favicon.ico",
        "meta_site_name": "Engineering at Meta",
        "canonical_link": "https://engineering.fb.com/2022/07/27/developer-tools/programming-languages-endorsed-for-server-side-use-at-meta/",
        "text": "Supporting a programming language at Meta is a very careful and deliberate decision.\n\nWe’re sharing our internal programming language guidance that helps our engineers and developers choose the best language for their projects.\n\nRust is the latest addition to Meta’s list of supported server-side languages.\n\nAt Meta, we use many different programming languages for a wide variety of platforms and use cases. Supporting a new language is not a decision we make lightly. It’s important that every language we adopt is the best fit for a particular use case, so we do a high level of diligence whenever we evaluate a language. Language decisions tend to stick once they’re made, so we want to be deliberate from the onset to give our engineers the best tools to work with.\n\nToday, we’re sharing insights into our internal guidance on the various languages that play an important role at Meta — and specifically our server-side programming languages, to which Rust is the latest addition.\n\nWhat is a supported language at Meta?\n\nBefore we get into the individual details, here’s what supported means (and doesn’t mean) within Meta:\n\nIf a language is supported, developers can count on getting a good experience with code editing, debugging, build, and deployment, as well as core libraries and interoperability. Developers can also count on that experience not going away — they won’t be asked to move off a supported language. For most cases, Meta recommends choosing a supported language for new projects and services.\n\nFully supporting a language is a major investment for Meta, so “long tail” languages are community supported. For those languages, there are far fewer guarantees, and teams adopting them will have to take on the maintenance burden. In most cases, teams should avoid using them for new applications, unless a team already has a significant investment in the language.\n\nMeta’s primary supported server-side languages are Hack, C++, Rust, and Python.\n\nFor performance-sensitive back-end services, we encourage C++ and Rust. Rust is a new addition to this list. There’s a rapidly increasing Rust footprint in our products and services, and we’re committing to Rust long-term and welcome early adopters.\n\nFor CLI tools, we recommend Rust. This is a new recommendation for this year.\n\nFor business logic and relatively stateless applications, the Hack ecosystem has the highest level of automation and support at Meta and is the recommended language.\n\nFinally, Meta continues to heavily support our Python developers. For data science, ML applications, and Instagram, Python continues to be the language of choice, and we continue to invest in the experience with this ecosystem.\n\nFor specific use cases, we support other languages, including Java, Erlang, Haskell, and Go. These languages are currently not widely supported outside of specific use cases.\n\nHow did we arrive at our list of supported languages?\n\nLet’s explain why we have a supported language list and why we’re generally reluctant to add languages to that list (although Rust is a new addition). The main reason is that it takes a significant engineering investment to support a programming language at Meta scale, and that cost is broadly distributed — not just borne by its users. Some examples:\n\nSupport for core libraries. There are very few isolated services, and the fewer languages we have, the less burden there is on core libraries.\n\nSecurity and privacy. A fragmented stack raises the complexity of building important security and privacy features into our services.\n\nOperational risk. If some service encounters a critical issue, it will require immediate assistance. We’ve built up incredible amounts of expertise in diagnosing and resolving production issues, and our incident response relies on being able to read, understand, and debug services to help in a major incident. Avoiding fragmentation reduces operational risk.\n\nExpertise. We build and maintain a critical mass of engineers with expertise in each of these languages.\n\nDeveloper experience. Supported languages have teams working on improving areas like IDE support, build speed, debugging experience, and more.\n\nChoosing a suboptimal language for a project can be costly in terms of time, efficiency, and productivity. So, it’s worth putting every language we evaluate under a heavy amount of scrutiny. The examples above demonstrate just how much investment we put into supporting a language.\n\nRust is the latest server-side language at Meta"
    }
}