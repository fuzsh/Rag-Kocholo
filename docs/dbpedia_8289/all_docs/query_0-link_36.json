{
    "id": "dbpedia_8289_0",
    "rank": 36,
    "data": {
        "url": "https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP",
        "read_more_link": "",
        "language": "en",
        "title": "What is Object-Oriented Programming (OOP)?",
        "top_image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "meta_img": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "images": [
            "https://cdn.ttgtmedia.com/rms/onlineimages/whatis-object_oriented_programming_half_column_mobile.png",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/1.jpg",
            "https://cdn.ttgtmedia.com/visuals/WhatIs/Ben Lutkevich.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/container_g1294273513_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/taylor_twain.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/toolGearArrow_g140057613_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/verlaine_muhungu.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/container_g1294273513_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/doyle_kerry.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/6Ff5ls0TXHU?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Alexander S. Gillis",
            "Sarah Lewis",
            "Ben Lutkevich",
            "Twain Taylor",
            "Verlaine Muhungu",
            "Kerry Doyle"
        ],
        "publish_date": "2024-06-14T09:00:00+00:00",
        "summary": "",
        "meta_description": "Learn how OOP organizes software design around data, or objects, rather than functions and logic. Explore its structure, benefits, criticisms and more.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "App Architecture",
        "canonical_link": "https://www.techtarget.com/searchapparchitecture/definition/object-oriented-programming-OOP",
        "text": "Definition\n\nobject-oriented programming (OOP)\n\nBy\n\nAlexander S. Gillis, Technical Writer and Editor\n\nSarah Lewis\n\nWhat is object-oriented programming (OOP)?\n\nObject-oriented programming (OOP) is a computer programming model that organizes software design around data, or objects, rather than functions and logic. An object can be defined as a data field that has unique attributes and behavior.\n\nOOP focuses on the objects that developers want to manipulate rather than the logic required to manipulate them. This approach to programming is well suited for software that is large, complex and actively updated or maintained. This includes programs for manufacturing and design, as well as mobile applications. For example, OOP can be used for manufacturing system simulation software.\n\nThe organization of an object-oriented program also makes the method beneficial for collaborative development, where projects are divided into groups. Additional benefits of OOP include code reusability, scalability and efficiency.\n\nThe first step in OOP is to collect all of the objects a programmer wants to manipulate and identify how they relate to each other -- an exercise known as data modeling.\n\nExamples of an object can range from physical entities, such as a human being who is described by properties like name and address, to small computer programs, such as widgets.\n\nOnce an object is known, it is labeled with a class of objects that defines the kind of data it contains and any logic sequences that can manipulate it. Each distinct logic sequence is known as a method. Objects can communicate with well-defined interfaces called messages.\n\nWhat is the structure of object-oriented programming?\n\nThe structure, or building blocks, of object-oriented programming include the following:\n\nClasses are user-defined data types that act as the blueprint for individual objects, attributes and methods.\n\nObjects are instances of a class created with specifically defined data. Objects can correspond to real-world objects or an abstract entity. When class is defined initially, the description is the only object that is defined.\n\nMethods are functions that objects can perform. They are defined inside a class that describe the behaviors of an object. Each method contained in class definitions starts with a reference to an instance object. Additionally, the subroutines contained in an object are called instance methods. Programmers use methods for reusability or keeping functionality encapsulated inside one object at a time.\n\nAttributes represent the state of an object. In other words, they are the characteristics that distinguish classes. Objects have data stored in the attributes field. Class attributes belong to the class itself and are defined in the class template.\n\nWhat are the main principles of OOP?\n\nObject-oriented programming is based on the following principles:\n\nEncapsulation. The encapsulation principle states that all important information is contained inside an object and only select information is exposed. The implementation and state of each object are privately held inside a defined class. Other objects do not have access to this class or the authority to make changes. They are only able to call a list of public functions or methods. This characteristic of data hiding provides greater program security and avoids unintended data corruption.\n\nAbstraction. Objects only reveal internal mechanisms that are relevant for the use of other objects, hiding any unnecessary implementation code. The derived class can have its functionality extended. This concept can help developers more easily make additional changes or additions over time.\n\nInheritance. Classes can reuse code and properties from other classes. Relationships and subclasses between objects can be assigned, enabling developers to reuse common logic, while still maintaining a unique hierarchy. Inheritance forces more thorough data analysis, reduces development time and ensures a higher level of accuracy.\n\nPolymorphism. Objects are designed to share behaviors, and they can take on more than one form. The program determines which meaning or usage is necessary for each execution of that object from a parent class, reducing the need to duplicate code. A child class is then created, which extends the functionality of the parent class. Polymorphism enables different types of objects to pass through the same interface.\n\nSyntax. This is the set of rules that define how words and punctuation are organized in a programming language.\n\nCoupling. This is the degree to which software elements are connected to one another. For example, if a class has its attributes change, then any other coupled class also changes.\n\nAssociation. This is the connection between one or more classes. Associations can be one to one, many to many, one to many or many to one.\n\nWhat are examples of object-oriented programming languages?\n\nWhile Simula is credited as being the first object-oriented programming language, many other programming languages are used with OOP today. But some programming languages pair with OOP better than others. For example, programming languages that are considered pure OOP languages treat everything as objects. Other programming languages are designed primarily for OOP but with some procedural processes included. Some of the most popular programming languages are designed for, or with, OOP in mind.\n\nFor example, popular pure OOP languages include the following:\n\nRuby.\n\nScala.\n\nJADE.\n\nEmerald.\n\nProgramming languages designed primarily for OOP include the following:\n\nJava.\n\nPython.\n\nC++.\n\nOther programming languages that pair with OOP include the following:\n\nVisual Basic .NET.\n\nPHP.\n\nJavaScript.\n\nWhat are the benefits of OOP?\n\nBenefits of OOP include the following:\n\nModularity. Encapsulation enables objects to be self-contained, making troubleshooting and collaborative development easier.\n\nReusability. Code can be reused through inheritance, meaning a team does not have to write the same code multiple times.\n\nProductivity. Programmers can construct new programs quickly through the use of multiple libraries and reusable code.\n\nEasily upgradable and scalable. Programmers can implement system functionalities independently.\n\nInterface descriptions. Descriptions of external systems are simple, due to message-passing techniques that are used for object communication.\n\nSecurity. Using encapsulation and abstraction, complex code is hidden, software maintenance is easier and internet protocols are protected.\n\nFlexibility. Polymorphism enables a single function to adapt to the class it is placed in. Different objects can also pass through the same interface.\n\nCode maintenance. Parts of a system can be updated and maintained without needing to make significant adjustments.\n\nLower cost. Other benefits, such as its maintenance and reusability, reduce development costs.\n\nCriticism of OOP\n\nDevelopers have criticized the object-oriented programming model for multiple reasons. The largest concern is that OOP overemphasizes the data component of software development and does not focus enough on computation or algorithms. Additionally, OOP code may be more complicated to write and take longer to compile.\n\nOther common criticisms include the fact that inheritance comes with drawbacks, such as fragile base classes. Additionally, objects are sometimes more clear while isolated but are harder to understand when operating in the actual program.\n\nAlternative methods to OOP include the following:\n\nFunctional programming. This includes languages such as Erlang and Scala, which are used for telecommunications and fault-tolerant systems.\n\nStructured or modular programming. This includes languages such as PHP and C#.\n\nImperative programming. This alternative to OOP focuses on function rather than models. Imperative programming languages include C++ and Java.\n\nDeclarative programming. This programming method involves statements on what the task or desired outcome is but not how to achieve it. Declarative programming languages include Prolog and Lisp.\n\nLogical programming. This method, which is based mostly on formal logic and uses languages such as Prolog, contains a set of sentences that express facts or rules about a problem domain. It focuses on tasks that can benefit from rule-based logical queries.\n\nMost advanced programming languages enable developers to combine models because they can be used for different programming methods. For example, JavaScript and Scala can be used for OOP and functional programming.\n\nDevelopers who are working with OOP and microservices can address common microservices issues by applying the principles of OOP.\n\nContinue Reading About object-oriented programming (OOP)\n\nBreaking down the cornerstone components of OOP\n\nObject-oriented vs. functional programming explained\n\nThe SOLID principles of object-oriented design explained\n\nUnderstanding the role of polymorphism in OOP\n\nSoftware Gallery opens at the National Museum of Computing\n\nRelated Terms\n\nWhat is an API (application programming interface)?\n\nAn application programming interface (API) is code that enables two software programs to communicate. See complete definition\n\nWhat is software resilience testing?\n\nSoftware resilience testing is a method of software testing that focuses on ensuring that applications perform well in real-life ... See complete definition\n\nWhat is the software development lifecycle (SDLC)?\n\nThe software development lifecycle (SDLC) is a project management framework that describes the stages and tasks involved in each ... See complete definition\n\nDig Deeper on Application development and design\n\nfunctional programming\n\nBy: Ben Lutkevich\n\nUnderstanding the role of polymorphism in OOP\n\nBy: Twain Taylor\n\nBest practices for network automation with Python\n\nBy: Verlaine Muhungu\n\nBreaking down the cornerstone components of OOP\n\nBy: Kerry Doyle"
    }
}