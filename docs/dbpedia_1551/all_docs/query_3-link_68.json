{
    "id": "dbpedia_1551_3",
    "rank": 68,
    "data": {
        "url": "https://stackoverflow.com/questions/739993/how-do-i-get-a-list-of-locally-installed-python-modules",
        "read_more_link": "",
        "language": "en",
        "title": "How do I get a list of locally installed Python modules?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/RoPPo.jpg?s=64",
            "https://i.sstatic.net/0VZ1V.png?s=64",
            "https://www.gravatar.com/avatar/7129e23c041e21e15caf3ca6317a0dac?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/QG9pG.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/61nk6.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/372fabe5d3962d54b0c9474e35a05359?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/7jZ4g.png?s=64",
            "https://www.gravatar.com/avatar/96d9ed44e0e07aaf2e7f1bef986795b3?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/34fff8661d58254f095f5fdbb6ba76f2?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/db52ae0c6b3aa0a5ce5f35ac86a7bd7e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/al4WE.gif?s=64",
            "https://i.sstatic.net/1BjoO.jpg?s=64",
            "https://i.sstatic.net/YVheF.gif?s=64",
            "https://i.sstatic.net/8oB3Y.jpg?s=64",
            "https://i.sstatic.net/OED7s.jpg?s=64",
            "https://i.sstatic.net/IBHo9.jpg?s=64",
            "https://lh4.googleusercontent.com/-WRNLHm93hTI/AAAAAAAAAAI/AAAAAAAAATA/6LF5hhHs_S8/photo.jpg?sz=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://lh5.googleusercontent.com/-6SAEp1uDi6c/AAAAAAAAAAI/AAAAAAAAAPQ/dShGz5pMXIU/photo.jpg?sz=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/MXPujapB.png?s=64",
            "https://www.gravatar.com/avatar/56c94b39627305d8a2dbf9a7a9c83930?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/acb315d44476c0ffbfb1b6cff24ad51c?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/8d3c0288ded563d831433f98dd89ad94?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a19e0ba67b0815a00fae1a399cd0f700?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/F0Dwz.png?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://www.gravatar.com/avatar/78868740d3e32019eedf72a8b1b8cd04?s=64&d=identicon&r=PG",
            "https://lh3.googleusercontent.com/-Bl41CqZhT5I/AAAAAAAAAAI/AAAAAAAAdzI/ALmG0mBJCSk/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/e925b8fda704e705a4c9007d1346e6b3?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/3a8934bdaec0f8a7a138faf357339a56?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://i.sstatic.net/pBhk3Luf.jpg?s=64",
            "https://i.sstatic.net/9rEqz.png",
            "https://www.gravatar.com/avatar/c76a3f29c105a73c4060b3d1934ccd9a?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/959ccd33301cb3c15953c1a632a36763?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/58f9ad7e897c4bb5e642b9ae6d895c71?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/8e5a880622e118e401915b48f1cc0cf3?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/xCII1.jpg?s=64",
            "https://i.sstatic.net/RIZKi.png?s=64",
            "https://lh6.googleusercontent.com/--nE6VfJONqE/AAAAAAAAAAI/AAAAAAAADaQ/f5DeqiBAz0Q/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/66ca6dc7a8594ffe5f7cd545421ab33d?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/3fe9bb38c367388b57a69dff5cd143bf?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/739993/ivc/914a?prg=0ddc02c0-bcd7-4ca7-9970-defa32a39486"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2009-04-11T12:34:18",
        "summary": "",
        "meta_description": "How do I get a list of Python modules installed on my computer?",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/739993/how-do-i-get-a-list-of-locally-installed-python-modules",
        "text": "Solution\n\nDo not use with pip > 10.0!\n\nMy 50 cents for getting a pip freeze-like list from a Python script:\n\nimport pip installed_packages = pip.get_installed_distributions() installed_packages_list = sorted([\"%s==%s\" % (i.key, i.version) for i in installed_packages]) print(installed_packages_list)\n\nAs a (too long) one liner:\n\nsorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()])\n\nGiving:\n\n['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0', 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', 'werkzeug==0.9.4']\n\nScope\n\nThis solution applies to the system scope or to a virtual environment scope, and covers packages installed by setuptools, pip and (god forbid) easy_install.\n\nMy use case\n\nI added the result of this call to my Flask server, so when I call it with http://example.com/exampleServer/environment I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.\n\nCaveats\n\nI have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a setup.py file, it does not list the package installed by setup.py.\n\nSteps to reproduce:\n\nCreate a virtual environment\n\n$ cd /tmp $ virtualenv test_env New python executable in test_env/bin/python Installing setuptools, pip...done. $ source test_env/bin/activate (test_env) $\n\nClone a Git repository with setup.py\n\n(test_env) $ git clone https://github.com/behave/behave.git Cloning into 'behave'... remote: Reusing existing pack: 4350, done. remote: Total 4350 (delta 0), reused 0 (delta 0) Receiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done. Resolving deltas: 100% (2388/2388), done. Checking connectivity... done.\n\nWe have behave's setup.py in /tmp/behave:\n\n(test_env) $ ls /tmp/behave/setup.py /tmp/behave/setup.py\n\nInstall the Python package from the Git repository\n\n(test_env) $ cd /tmp/behave && pip install . running install ... Installed /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg Finished processing dependencies for behave==1.2.5a1\n\nIf we run the aforementioned solution from /tmp\n\n>>> import pip >>> sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()]) ['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1'] >>> import os >>> os.getcwd() '/private/tmp'\n\nIf we run the aforementioned solution from /tmp/behave\n\n>>> import pip >>> sorted([\"%s==%s\" % (i.key, i.version) for i in pip.get_installed_distributions()]) ['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1'] >>> import os >>> os.getcwd() '/private/tmp/behave'\n\nbehave==1.2.5a1 is missing from the second example, because the working directory contains behave's setup.py file.\n\nI could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.\n\nNow, these methods I tried myself, and I got exactly what was advertised: All the modules.\n\nAlas, really you don't care much about the stdlib. You know what you get with a Python install.\n\nReally, I want the stuff that I installed.\n\nWhat actually, surprisingly, worked just fine was:\n\npip freeze\n\nWhich returned:\n\nFabric==0.9.3 apache-libcloud==0.4.0 bzr==2.3b4 distribute==0.6.14 docutils==0.7 greenlet==0.3.1 ipython==0.10.1 iterpipes==0.4 libxml2-python==2.6.21\n\nI say \"surprisingly\", because the package install tool is the exact place one would expect to find this functionality, although not under the name 'freeze', but Python packaging is so weird that I am flabbergasted that this tool makes sense. Pip 0.8.2 and Python 2.7.\n\nThis solution is primary based on modules importlib and pkgutil and work with CPython 3.4 and CPython 3.5, but has no support for the CPython 2.\n\nExplanation\n\nsys.builtin_module_names - names all built-in modules (look my answer here)\n\npkgutil.iter_modules() - returns an information about all available modules\n\nimportlib.util.find_spec() - returns an information about importing module, if exists\n\nBuiltinImporter - an importer for built-in modules (docs)\n\nSourceFileLoader - an importer for a standard Python module (by default has extension *.py) (docs)\n\nExtensionFileLoader - an importer for modules as shared library (written on the C or C++)\n\nFull code\n\nimport sys import os import shutil import pkgutil import importlib import collections if sys.version_info.major == 2: raise NotImplementedError('CPython 2 is not supported yet') def main(): # Name this file (module) this_module_name = os.path.basename(__file__).rsplit('.')[0] # Dict for loaders with their modules loaders = collections.OrderedDict() # Names's of build-in modules for module_name in sys.builtin_module_names: # Find an information about a module by name module = importlib.util.find_spec(module_name) # Add a key about a loader in the dict, if not exists yet if module.loader not in loaders: loaders[module.loader] = [] # Add a name and a location about imported module in the dict loaders[module.loader].append((module.name, module.origin)) # All available non-build-in modules for module_name in pkgutil.iter_modules(): # Ignore this module if this_module_name == module_name[1]: continue # Find an information about a module by name module = importlib.util.find_spec(module_name[1]) # Add a key about a loader in the dict, if not exists yet loader = type(module.loader) if loader not in loaders: loaders[loader] = [] # Add a name and a location about imported module in the dict loaders[loader].append((module.name, module.origin)) # Pretty print line = '-' * shutil.get_terminal_size().columns for loader, modules in loaders.items(): print('{0}\\n{1}: {2}\\n{0}'.format(line, len(modules), loader)) for module in modules: print('{0:30} | {1}'.format(module[0], module[1])) if __name__ == '__main__': main()\n\nUsage\n\nFor the CPython 3.5 (truncated)\n\npython3.5 python_modules_info.py\n\nOutput:\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 30: <class '_frozen_importlib.BuiltinImporter'> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ _ast | built-in _codecs | built-in _collections | built-in _functools | built-in _imp | None _io | built-in _locale | built-in _operator | built-in _signal | built-in _sre | built-in _stat | built-in _string | built-in _symtable | built-in _thread | built-in (****************************truncated*******************************) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 227: <class '_frozen_importlib_external.SourceFileLoader'> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ __future__ | /usr/local/lib/python3.5/__future__.py _bootlocale | /usr/local/lib/python3.5/_bootlocale.py _collections_abc | /usr/local/lib/python3.5/_collections_abc.py _compat_pickle | /usr/local/lib/python3.5/_compat_pickle.py _compression | /usr/local/lib/python3.5/_compression.py _dummy_thread | /usr/local/lib/python3.5/_dummy_thread.py _markupbase | /usr/local/lib/python3.5/_markupbase.py _osx_support | /usr/local/lib/python3.5/_osx_support.py _pydecimal | /usr/local/lib/python3.5/_pydecimal.py _pyio | /usr/local/lib/python3.5/_pyio.py _sitebuiltins | /usr/local/lib/python3.5/_sitebuiltins.py (****************************truncated*******************************) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 64: <class '_frozen_importlib_external.ExtensionFileLoader'> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ _bisect | /usr/local/lib/python3.5/lib-dynload/_bisect.cpython-35m-x86_64-linux-gnu.so _bz2 | /usr/local/lib/python3.5/lib-dynload/_bz2.cpython-35m-x86_64-linux-gnu.so _codecs_cn | /usr/local/lib/python3.5/lib-dynload/_codecs_cn.cpython-35m-x86_64-linux-gnu.so _codecs_hk | /usr/local/lib/python3.5/lib-dynload/_codecs_hk.cpython-35m-x86_64-linux-gnu.so _codecs_iso2022 | /usr/local/lib/python3.5/lib-dynload/_codecs_iso2022.cpython-35m-x86_64-linux-gnu.so (****************************truncated*******************************)\n\nFor the CPython 3.4 (truncated)\n\npython3.4 python_modules_info.py\n\nOutput:\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 54: <class '_frozen_importlib.BuiltinImporter'> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ _ast | built-in _bisect | built-in _codecs | built-in _collections | built-in _datetime | built-in _elementtree | built-in _functools | built-in _heapq | built-in _imp | None _io | built-in _locale | built-in _md5 | built-in _operator | built-in _pickle | built-in _posixsubprocess | built-in _random | built-in (****************************truncated*******************************) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 246: <class '_frozen_importlib.SourceFileLoader'> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ __future__ | /usr/lib/python3.4/__future__.py _bootlocale | /usr/lib/python3.4/_bootlocale.py _collections_abc | /usr/lib/python3.4/_collections_abc.py _compat_pickle | /usr/lib/python3.4/_compat_pickle.py _dummy_thread | /usr/lib/python3.4/_dummy_thread.py _markupbase | /usr/lib/python3.4/_markupbase.py _osx_support | /usr/lib/python3.4/_osx_support.py _pyio | /usr/lib/python3.4/_pyio.py (****************************truncated*******************************) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 44: <class '_frozen_importlib.ExtensionFileLoader'> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ _bz2 | /usr/lib/python3.4/lib-dynload/_bz2.cpython-34m-x86_64-linux-gnu.so _codecs_cn | /usr/lib/python3.4/lib-dynload/_codecs_cn.cpython-34m-x86_64-linux-gnu.so _codecs_hk | /usr/lib/python3.4/lib-dynload/_codecs_hk.cpython-34m-x86_64-linux-gnu.so _codecs_iso2022 | /usr/lib/python3.4/lib-dynload/_codecs_iso2022.cpython-34m-x86_64-linux-gnu.so _codecs_jp | /usr/lib/python3.4/lib-dynload/_codecs_jp.cpython-34m-x86_64-linux-gnu.so _codecs_kr | /usr/lib/python3.4/lib-dynload/_codecs_kr.cpython-34m-x86_64-linux-gnu.so _codecs_tw | /usr/lib/python3.4/lib-dynload/_codecs_tw.cpython-34m-x86_64-linux-gnu.so _crypt | /usr/lib/python3.4/lib-dynload/_crypt.cpython-34m-x86_64-linux-gnu.so (****************************truncated*******************************)\n\nWarning: Adam Matan discourages this use in pip > 10.0. Also, read @sinoroc's comment below\n\nThis was inspired by Adam Matan's answer (the accepted one):\n\nimport tabulate try: from pip import get_installed_distributions except: from pip._internal.utils.misc import get_installed_distributions tabpackages = [] for _, package in sorted([('%s %s' % (i.location, i.key), i) for i in get_installed_distributions()]): tabpackages.append([package.location, package.key, package.version]) print(tabulate.tabulate(tabpackages))\n\nwhich then prints out a table in the form of\n\ncd ~/python python installed_packages.py\n\nOutput:\n\n------------------------------------------- -------------- ------ /home/pi/.local/lib/python2.7/site-packages enum-compat 0.0.2 /home/pi/.local/lib/python2.7/site-packages enum34 1.1.6 /home/pi/.local/lib/python2.7/site-packages pexpect 4.2.1 /home/pi/.local/lib/python2.7/site-packages ptyprocess 0.5.2 /home/pi/.local/lib/python2.7/site-packages pygatt 3.2.0 /home/pi/.local/lib/python2.7/site-packages pyserial 3.4 /usr/local/lib/python2.7/dist-packages bluepy 1.1.1 /usr/local/lib/python2.7/dist-packages click 6.7 /usr/local/lib/python2.7/dist-packages click-datetime 0.2 /usr/local/lib/python2.7/dist-packages construct 2.8.21 /usr/local/lib/python2.7/dist-packages pyaudio 0.2.11 /usr/local/lib/python2.7/dist-packages tabulate 0.8.2 ------------------------------------------- -------------- ------\n\nwhich lets you then easily discern which packages you installed with and without sudo.\n\nA note aside: I've noticed that when I install a packet once via sudo and once without, one takes precedence so that the other one isn't being listed (only one location is shown). I believe that only the one in the local directory is then listed. This could be improved.\n\nI needed to find the specific version of packages available by default in AWS Lambda. I did so with a mashup of ideas from this page. I'm sharing it for posterity.\n\nimport pkgutil __version__ = '0.1.1' def get_ver(name): try: return str(__import__(name).__version__) except: return None def lambda_handler(event, context): return { 'statusCode': 200, 'body': [{ 'path': m.module_finder.path, 'name': m.name, 'version': get_ver(m.name), } for m in list(pkgutil.iter_modules()) #if m.module_finder.path == \"/var/runtime\" # Uncomment this if you only care about a certain path ], }\n\nWhat I discovered is that the provided boto3 library was way out of date and it wasn't my fault that my code was failing. I just needed to add boto3 and botocore to my project. But without this I would have been banging my head thinking my code was bad.\n\n{ \"statusCode\": 200, \"body\": [ { \"path\": \"/var/task\", \"name\": \"lambda_function\", \"version\": \"0.1.1\" }, { \"path\": \"/var/runtime\", \"name\": \"bootstrap\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"boto3\", \"version\": \"1.9.42\" }, { \"path\": \"/var/runtime\", \"name\": \"botocore\", \"version\": \"1.12.42\" }, { \"path\": \"/var/runtime\", \"name\": \"dateutil\", \"version\": \"2.7.5\" }, { \"path\": \"/var/runtime\", \"name\": \"docutils\", \"version\": \"0.14\" }, { \"path\": \"/var/runtime\", \"name\": \"jmespath\", \"version\": \"0.9.3\" }, { \"path\": \"/var/runtime\", \"name\": \"lambda_runtime_client\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"lambda_runtime_exception\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"lambda_runtime_marshaller\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"s3transfer\", \"version\": \"0.1.13\" }, { \"path\": \"/var/runtime\", \"name\": \"six\", \"version\": \"1.11.0\" }, { \"path\": \"/var/runtime\", \"name\": \"test_bootstrap\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"test_lambda_runtime_client\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"test_lambda_runtime_marshaller\", \"version\": null }, { \"path\": \"/var/runtime\", \"name\": \"urllib3\", \"version\": \"1.24.1\" }, { \"path\": \"/var/lang/lib/python3.7\", \"name\": \"__future__\", \"version\": null }, ...\n\nWhat I discovered was also different from what they officially publish. At the time of writing this:\n\nOperating system – Amazon Linux\n\nAMI – amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2\n\nLinux kernel – 4.14.77-70.59.amzn1.x86_64\n\nAWS SDK for JavaScript – 2.290.0\\\n\nSDK for Python (Boto 3) – 3-1.7.74 botocore-1.10.74"
    }
}