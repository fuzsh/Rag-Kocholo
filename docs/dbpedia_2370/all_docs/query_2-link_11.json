{
    "id": "dbpedia_2370_2",
    "rank": 11,
    "data": {
        "url": "https://medium.com/%40Steiner254/directory-path-traversal-288a6188076",
        "read_more_link": "",
        "language": "en",
        "title": "Directory/Path Traversal",
        "top_image": "https://miro.medium.com/v2/da:true/resize:fit:440/1*Zf_XJOF1N5sEkfpnIhZ1Tg.gif",
        "meta_img": "https://miro.medium.com/v2/da:true/resize:fit:440/1*Zf_XJOF1N5sEkfpnIhZ1Tg.gif",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*WrWKJOzibjROkAF5S5Qn8w.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*WrWKJOzibjROkAF5S5Qn8w.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Steiner254",
            "medium.com"
        ],
        "publish_date": "2022-02-19T15:57:43.943000+00:00",
        "summary": "",
        "meta_description": "~ Hello Hackers :) My name is Steiner254 (Alvin Mwambi). I am a Bug Hunter, Penetration Tester, 24/7 Red Team Player, CTF player, Cyber Security Analyst, Th3 Sh13ld team founder and a Computer…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@Steiner254/directory-path-traversal-288a6188076",
        "text": "~ In this article we will cover:\n\n1) Introduction\n\n2) What is Directory Traversal/Path Traversal?\n\n3) Different names of a Path Traversal/Directory Traversal attack.\n\n4) How does a Directory Traversal attack work?\n\n5) How to test for path traversal vulnerabilities.\n\n6) Reading arbitrary files via Directory Traversal/Path Traversal.\n\n7) Path/Directory Traversal in simple case.\n\n8) Common Obstacles in the exploitation of Path Traversal vulnerabilities.\n\n9) File path traversal, traversal sequences blocked with absolute path bypass\n\n10) File path traversal, traversal sequences stripped non-recursively\n\n11) File path traversal, traversal sequences stripped with superfluous URL-decode\n\n12) File path traversal, validation of start of path\n\n13) Mitigation of Path Traversal/Directory Traversal vulnerabilities\n\n1. Introduction\n\n~ Hello Hackers :) My name is Steiner254 (Alvin Mwambi). I am a Bug Hunter, Penetration Tester, 24/7 Red Team Player, CTF player, Cyber Security Analyst, Th3 Sh13ld team founder and a Computer Science student.\n\n>> Follow me twitter https://twitter.com/steiner254\n\n~ In this section I’ll cover deeply on the Directory/Path Traversal vulnerabilities, therefore grab some coffee and enjoy the walk with me :)\n\n2. What is Directory Traversal/Path Traversal?\n\n~ Directory traversal (also known as file path traversal) is a web security vulnerability that allows an attacker to read arbitrary files on the server that is running an application. This might include application code and data, credentials for back-end systems, and sensitive operating system files. In some cases, an attacker might be able to write to arbitrary files on the server, allowing them to modify application data or behavior, and ultimately take full control of the server.\n\n3. Different names of a Path Traversal/Directory Traversal attack.\n\n~ A directory traversal attack is also commonly referred to as a path traversal, backtracking, or dot dot slash (../) attack because it uses certain special characters. The dot dot slash or “../” tells the browser to move one level back towards the root directory. For instance, the code “x/y/z/../” is equal to “x/y/”, which allows you to find other files from different folders without using the full path.\n\n~ Consider the web directory structure shown below. A relative link can be used from index.html to any folder in the root directory (home_html in this case). To link from hobbies.html to index.html, you must send a request to tell the browser to move up one level from documents to home_html to find the file. The relative link is written as: a href=“../index.html”.\n\n4. How does a Path/Directory Traversal attack work.\n\n~ If there are vulnerabilities in the web application’s code or the server’s configuration, it’s easy to execute a directory traversal attack. For example, let’s examine this PHP code snippet that is prone to directory traversal attacks:\n\n/**\n\n* Get the filename from a GET input\n\n* Example - https://example-website.com/?file=filename.php\n\n*/\n\n$file = $_GET[‘file’];\n\n/**\n\n* Unsafely include the file\n\n* Example: filename.php\n\n*/\n\nfile_get_contents(‘directory/’ . $file);\n\n~ In this case, attackers can use the command https://example-website.com/?file=../../../../etc/passwd and manipulate the web application to reveal hidden information of the /etc/passwd system file.\n\n~ Similar to my example-website.com, attackers can use directory traversal vulnerabilities to access credentials, modify files, or take control of the compromised web server.\n\n5. How to test for path traversal vulnerabilities\n\nSTEPS TO FOLLOW:\n\na. Look out for instances where a request parameter appears to contain the name of a file or directory, such as include=main.inc or template=/en/sidebar.\n\nAny functions whose implementation is likely to involve retrieval of data from a server filesystem such as the displaying of office documents or images.\n\nb. Look for error messages or other anomalous events that are of interest or instances where user-supplied data is being passed to file APIs or as parameters to operating system commands.\n\n“If you have local access to the application (white-box testing) monitor all filesystem interaction that the application performs.”\n\nc. Modify the parameter’s value to insert an arbitrary subdirectory and a single traversal sequence.\n\nFor example: If the application submits this parameter:file=foo/file1.txt\n\ntry submitting:file=foo/bar/../file1.txt\n\nIf the application’s behavior is identical in the two cases, it may be vulnerable. Attempt to access a different file by traversing above the start directory.\n\nd. If the application’s behavior is different in the two cases, it may be blocking, stripping, or sanitizing traversal sequences, resulting in an invalid file path. Examine whether there are any ways to circumvent the application’s validation filters.\n\ne. If you find any instances where submitting traversal sequences without stepping above the starting directory does not affect the application’s behavior, attempt to traverse out of the starting directory and access files from elsewhere on the server filesystem.\n\nf. If the application function you are attacking provides read access to a file,\n\nattempt to access a known world-readable file on the operating system in\n\nquestion. Submit one of the following values as the filename parameter\n\nyou control:\n\n../../../../../../../../../../../../etc/passwd\n\n../../../../../../../../../../../../windows/win.ini\n\nIf successful, your browser displays the contents of the file you have requested.\n\ng. If the function you are attacking provides write access to a file, attempt to write two files one that should be writable by any user, and one that should not be writable even by root or Administrator.For example, on Windows platforms try this:\n\n../../../../../../../../../../../../writetest.txt\n\n../../../../../../../../../../../../windows/system32/config/sam\n\nOn UNIX-based platforms, files that root may not write are version dependent, but attempting to overwrite a directory with a file should always fail, so you can try this:\n\n../../../../../../../../../../../../tmp/writetest.txt\n\n../../../../../../../../../../../../tmp\n\nIf the application’s behavior is different in response to the first and second requests, the application probably is vulnerable.\n\nh. Or to verify a traversal flaw with write access is to try to write a new file within the webroot of the web server and then attempt to retrieve this with a browser. However, this method will work if you know the location of the webroot directory or if the user context in which the file access occurs does not have permission to write there.\n\nTIPS:\n\nØ Submit a large number of traversal sequences when probing for a flaw. It is possible that the starting directory to which your data is appended lies deep within the filesystem, so using an excessive number of sequences helps avoid false negatives.\n\nØ Also, the Windows platform tolerates both forward slashes and backslashes as directory separators, whereas UNIX-based platforms tolerate only the forward slash.\n\nØ Furthermore, some web applications filter one version but not the other. Even if you are certain that the webserver is running a UNIX-based operating system, the application may still be calling out to a Windows-based back-end component. Because of this, it is always advisable to try both versions when probing for traversal flaws.\n\n6. Reading arbitrary files via Directory Traversal/Path Traversal.\n\n~ Consider a shopping application that displays images of items for sale. Images are loaded via some HTML like the following:\n\n<img src=”/loadImage?filename=218.png”>\n\n~ The loadImage URL takes a filename parameter and returns the contents of the specified file. The image files themselves are stored on disk in the location /var/www/images/. To return an image, the application appends the requested filename to this base directory and uses a filesystem API to read the contents of the file. In the above case, the application reads from the following file path:\n\n/var/www/images/218.png\n\n~ The application implements no defenses against directory traversal attacks, so an attacker can request the following URL to retrieve an arbitrary file from the server’s filesystem:\n\nhttps://insecure-website.com/loadImage?filename=../../../etc/passwd\n\n~ This causes the application to read from the following file path:\n\n/var/www/images/../../../etc/passwd\n\n~ The sequence ../ is valid within a file path, and means to step up one level in the directory structure. The three consecutive ../ sequences step up from /var/www/images/ to the filesystem root, and so the file that is actually read is:\n\n/etc/passwd\n\n~ On Unix-based operating systems, this is a standard file containing details of the users that are registered on the server. On Windows, both ../ and ..\\ are valid directory traversal sequences, and an equivalent attack to retrieve a standard operating system file would be:\n\nhttps://insecure-website.com/loadImage?filename=..\\..\\..\\windows\\win.ini\n\n7. Path/Directory Traversal in simple case.\n\n~ In the simple case Path Traversal Vulnerability, modify the filename parameter giving it the value:\n\n../../../etc/passwd\n\n~ Observe that the response contains contents of the /etc/passwd file. BOOM!!! Easy….Report! Now let’s join the big Boys in the technical part of Path Traversal vulnerabilities. Sit tight and grab your coffee.\n\n8. Common Obstacles in the exploitation of Path Traversal vulnerabilities.\n\n~ Many applications that place user input into file paths implement some kind of defense against path traversal attacks, and these can often be circumvented. If an application strips or blocks directory traversal sequences from the user-supplied filename, then it might be possible to bypass the defense using a variety of techniques. You might be able to use an absolute path from the filesystem root, such as filename=/etc/passwd, to directly reference a file without using any traversal sequences.\n\n9. File path traversal, traversal sequences blocked with absolute path bypass\n\n~ If the application blocks traversal sequences but treats the supplied filename as being relative to a default working directory, retrieve the contents by giving the filename parameter the value:\n\n/etc/passwd\n\n~ Assuming that the web application is vulnerable, observe the response containing /etc/passwd file.\n\n10. File path traversal, traversal sequences stripped non-recursively\n\n~ You might be able to use nested traversal sequences, such as ....// or ....\\/, which will revert to simple traversal sequences when the inner sequence is stripped.\n\n~ In this case to obtain the /etc/passwd file, modify the filename parameter giving it the value:\n\n….//….//….//etc/passwd\n\n~ After which observe that the response contains the /etc/passwd file.\n\n11. File path traversal, traversal sequences stripped with superfluous URL-decode\n\n~ In some contexts, such as in a URL path or the filename parameter of a multipart/form-data request, web servers may strip any directory traversal sequences before passing your input to the application. You can sometimes bypass this kind of sanitization by URL encoding, or even double URL encoding, the ../ characters, resulting in %2e%2e%2f or %252e%252e%252f respectively. Various non-standard encodings, such as ..%c0%af or ..%ef%bc%8f, may also do the trick.\n\n~ By using the trick above one could be able to observe the response with /etc/passwd file.\n\n12. File path traversal, validation of start of path\n\n~ If an application requires that the user-supplied filename must end with an expected file extension, such as .png, then it might be possible to use a null byte to effectively terminate the file path before the required extension. For example:\n\nfilename=../../../etc/passwd%00.png\n\n~ Example, one can modify the filename parameter giving it the value: /var/www/images/../../../etc/passwd\n\n~ After which observe that the response contains the contents of the /etc/passwd file.\n\n13. Mitigation of Path Traversal/Directory Traversal vulnerabilities\n\n~ The most effective way to prevent file path traversal vulnerabilities is to avoid passing user-supplied input to filesystem APIs altogether. Many application functions that do this can be rewritten to deliver the same behavior in a safer way. If it is considered unavoidable to pass user-supplied input to filesystem APIs, then two layers of defense should be used together to prevent attacks:\n\nØ The application should validate the user input before processing it. Ideally, the validation should compare against a whitelist of permitted values. If that isn’t possible for the required functionality, then the validation should verify that the input contains only permitted content, such as purely alphanumeric characters.\n\nØ After validating the supplied input, the application should append the input to the base directory and use a platform filesystem API to canonicalize the path. It should verify that the canonicalized path starts with the expected base directory.\n\n~ Below is an example of some simple Java code to validate the canonical path of a file based on user input:\n\nFile file = new File(BASE_DIRECTORY, userInput);\n\nif (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) {\n\n// process file\n\n}\n\nReferences\n\n>> https://infosecwriteups.com/testing-for-directory-or-path-traversal-vulnerabilities-dfbe49fdfe92\n\n>> https://portswigger.net/web-security/file-path-traversal\n\n>> https://www.neuralegion.com/blog/directory-traversal-attack/?utm_content=181514779&utm_medium=social&utm_source=twitter&hss_channel=tw-904376285635465217"
    }
}