{
    "id": "dbpedia_2370_2",
    "rank": 17,
    "data": {
        "url": "https://www.w3.org/TR/epub-33/",
        "read_more_link": "",
        "language": "en",
        "title": "EPUB 3.3",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.w3.org/StyleSheets/TR/2021/logos/W3C",
            "https://www.w3.org/TR/epub-33/images/example_spread_none.svg",
            "https://www.w3.org/TR/epub-33/images/example_spread_landscape.svg",
            "https://www.w3.org/TR/epub-33/images/example_spread_both.svg",
            "https://www.w3.org/TR/epub-33/images/example_spread_both_with_reflowable_intro.svg",
            "https://www.w3.org/TR/epub-33/images/example_spread_page_spread_right.svg",
            "https://www.w3.org/TR/epub-33/images/example_rendering_paginated_single_spine.svg",
            "https://www.w3.org/TR/epub-33/images/example_rendering_paginated_multiple_spine.svg",
            "https://www.w3.org/TR/epub-33/images/example_rendering_scrolled_continuous.svg",
            "https://www.w3.org/TR/epub-33/images/example_rendering_scrolled_doc.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2023-05-25T00:00:00",
        "summary": "",
        "meta_description": "EPUB® 3 defines a distribution and interchange format for digital publications and documents. The EPUB\n\t\t\t\tformat provides a means of representing, packaging, and encoding structured and semantically enhanced\n\t\t\t\tweb content — including HTML, CSS, SVG, and other resources — for distribution in a single-file\n\t\t\t\tcontainer.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://www.w3.org/TR/epub-33/",
        "text": "1.1 Overview\n\nThis section is non-normative.\n\nEPUB 3 has been widely adopted as the format for digital books (ebooks), and this revision continues to increase the format's capabilities to better support a wider range of publication requirements, including complex layouts, rich media and interactivity, and global typography features. The expectation is that publishers will utilize the EPUB 3 format for a broad range of content, including books, magazines, and educational, professional, and scientific publications.\n\nThis specification represents the core of EPUB 3 and includes the conformance requirements for EPUB publications — the product of the standard. The other specifications that comprise EPUB 3 are as follows:\n\nEPUB 3 Reading Systems [epub-rs-33] — defines the processing requirements for EPUB reading systems — the applications that consume EPUB publications and present their content to users.\n\nEPUB Accessibility [epub-a11y-11] — defines accessibility conformance and discovery requirements for EPUB publications.\n\nThese specifications represent the formal list recognized as belonging to EPUB 3 and that contain functionality normatively referenced as part of the standard. The development of extension specifications periodically adds new functionality to EPUB publications. Features and functionality defined outside of core revisions to the standard, while not formally recognized in this specification, are nonetheless available for EPUB creators and reading system developers to use.\n\nThe non-normative EPUB 3 Overview [epub-overview-33] provides a general introduction to EPUB 3. A list of technical changes from the previous version is also available in the change log.\n\n1.2 Organization\n\nThis section is non-normative.\n\nThis section reviews the organization of this specification through the central product it defines: the EPUB publication.\n\nAn EPUB publication is, in its most basic sense, a bundle of resources with instructions on how to render those resources to present the content in a logical order. The types of resources that are allowed in EPUB publication, as well as restrictions on their use, are defined in 3. Publication resources.\n\nA ZIP-based archive with the file extension .epub bundles the EPUB publication's resources for distribution. As conformant ZIP archives, EPUB publications can be unzipped by many software programs, simplifying both their production and consumption.\n\nThe container format not only provides a means of determining that the zipped content represents an EPUB publication (the mimetype file), but also provides a universally named directory of non-normative resources (/META-INF). Key among these resources is the container.xml file, which directs reading systems to the available package documents. Refer to 4. Open Container Format (OCF) for more information about the container format.\n\nAn EPUB publication is typically represented by a single package document. This document includes metadata used by reading systems to present the content to the user, such as the title and author for display in a bookshelf as well as rendering metadata (e.g., whether the content is reflowable or has a fixed layout). It also provides a manifest of resources and includes a spine that lists the default sequence in which to render documents as a user progresses through the content. Refer to 5. Package document for the requirements for the package document.\n\nThe actual content of an EPUB publication — what users are presented with when they begin reading — is built on the Open Web Platform and comes in two flavors: XHTML and SVG. Called EPUB content documents, these documents typically reference many additional resources required for their proper rendering, such as images, audio and video clips, scripts, and style sheets.\n\nRefer to 6. EPUB content documents for detailed information about the rules and requirements to produce EPUB content documents, and [epub-a11y-11] for accessibility requirements.\n\nAn EPUB publication also includes another key file called the EPUB navigation document. This document provides critical navigation capabilities, such as the table of contents, that allow users to navigate the content quickly and easily. The navigation document is a specialized type of XHTML content document which also allows EPUB creators to use it in the content (i.e., avoiding one table of contents for machine processing and another for user consumption). Refer to 7. EPUB navigation document for more information about this document.\n\nEPUB publications by default are intended to reflow to fit the available screen space. It is also possible to create publications that have pixel-precise fixed layouts using images and/or CSS positioning. The metadata to control layouts are defined in 8. Layout rendering control.\n\nMedia overlay documents complement EPUB content documents. They provide declarative markup for synchronizing the text in EPUB content documents with prerecorded audio. The result is the ability to create a read-aloud experience where reading systems highlight the text as it is narrated. Refer to 9. Media overlays for the definition of media overlay documents.\n\nWhile conceptually simple, an EPUB publication is more than just a collection of HTML pages and dependent assets in a ZIP package as presented here. Additional information about the primary features and functionality that EPUB publications provide to enhance the reading experience is available from the referenced specifications, and a more general introduction to the features of EPUB 3 is provided in the non-normative [epub-overview-33].\n\nRefer to [epub-rs-33] for the processing requirements for reading systems. Although it is not necessary that EPUB creators read that document to create EPUB publications, an understanding of how reading systems present the content can help craft publications for optimal presentation to users.\n\n2.1 Conformance checking\n\nThis section is non-normative.\n\nDue to the complexity of this specification and number of technologies used in EPUB publications, EPUB creators are advised to use an EPUB conformance checker to verify the conformance of their content.\n\nEPUBCheck is the de facto EPUB conformance checker used by the publishing industry and has been updated with each new version of EPUB. It is integrated into a number of authoring tools and also available in alternative interfaces and other languages (for more information, refer to its Apps and Tools page).\n\nWhen verifying their EPUB publications, EPUB creators should ensure they do not violate the requirements of this specification (practices identified by the keywords \"MUST\", \"MUST NOT\", and \"REQUIRED\"). These types of issues will often result in EPUB publications not rendering or rendering in inconsistent ways. These issues are typically reported as errors or critical errors.\n\nEPUB creators should also ensure that their EPUB publications do not violate the recommendations of this specification (practices identified by the keywords \"SHOULD\", \"SHOULD NOT\", and \"RECOMMENDED\"). Failure to follow these practices does not result in an invalid EPUB publication but may lead to interoperability problems and other issues that impact the user reading experience. These issues are typically reported as warnings.\n\nNote\n\nVendors, distributors, and other retailers of EPUB publications should consider the importance of recommended practices before basing their acceptance or rejection on a zero-issue outcome from an EPUB conformance checker. There will be legitimate reasons why EPUB creators cannot follow recommended practices in all cases.\n\n3.1 Introduction\n\nThis section is non-normative.\n\nAn EPUB publication is made up of many different categories of resources, not all of which are mutually exclusive. Some resources are publication resources, some are not. Some publication resources are allowed in the spine by default, while all others require fallbacks. Some resources can be used in rendering EPUB content documents, while others can only be used with fallbacks.\n\nTrying to understand these differences by reading the technical definitions of each category of resource can be complex. To make the categorizations easier to understand, this introduction uses the concept of different planes to explain how resources are grouped and referred to.\n\nThe three planes are:\n\nThe manifest plane — The manifest plane holds all the resources of the EPUB publication (namely, publication resources and linked resources).\n\nThe spine plane — The spine plane holds only the resources used in rendering the spine (namely, EPUB content documents and foreign content documents).\n\nThe content plane — The content plane holds only the resources used in the rendering of EPUB and foreign content documents (namely, core media type resources, foreign resources and exempt resources).\n\nThe same resource may exist on more than one plane and will be referred to differently in this specification depending on which plane is being discussed. For example, a core media type resource used in the rendering of an EPUB content document (on the content plane) may also be a foreign content document if it is also listed in the spine (the spine plane).\n\nThe following sections describe these planes in more detail.\n\nNote\n\nRefer to H.1 Resources for a detailed example showing how resources fit into the different planes.\n\n3.1.1 The manifest plane\n\nTo manifest plane defines all the resources of an EPUB publication. It is analogous to the package document manifest, but includes resources not present in that list.\n\nThe primary resources in this group are designated publication resources, which are all the resources used in rendering an EPUB publication to the user. EPUB creators always have to list these resources in the manifest element.\n\nPublication resources are further classified by their use(s) in the spine plane and content plane.\n\nThe manifest plane also contains a set of linked resources. These resources are tangential to the direct rendering. They include, for example, metadata records and links to external content (e.g., where to purchase an EPUB publication).\n\nUnlike publication resources, they are not listed in the package document manifest (i.e., because they are not essential to rendering the EPUB publication). They are instead defined in link elements in the package document metadata. These elements define their nature and purpose similar to how manifest item elements define publication resource. (In this way, they are like an extension of the manifest.)\n\nRefer to 5.5.7 The link element for more information about linked resources.\n\nResources in the manifest plane are also sometimes broken down by where they are located. Although most publication resources have to be located in the EPUB container (called container resources), EPUB 3 allows audio, video, font and script data resources to be hosted outside the container. These exceptions were made to speed up the download and loading of EPUB publications, as these resources are typically quite large, and, in the case of fonts, not essential to the presentation. When remotely hosted, these publication resources are referred to as remote resources.\n\nSince linked resources are not essential to the rendering of an EPUB publication, there are no requirements on where they are located and consequently no special naming of them based on their location. They may be located within the EPUB container or outside it.\n\nNote\n\nHyperlinked content outside the EPUB container (e.g., web pages) are not publication resources, and consequently are not listed in the manifest. Reading systems will normally open these links in a separate browser instance, not as part of the EPUB publication.\n\n3.1.2 The spine plane\n\nThe spine plane defines resources used in the default reading order established by the spine, which includes both linear and non-linear content. The spine instructs reading systems on how to load these resources as the user progresses through the EPUB publication. Although many resources may be bundled in an EPUB container, they are not all allowed by default in the spine.\n\nEPUB 3 defines a special class of resources called EPUB content documents that EPUB creators can use in the spine without any restrictions. EPUB content documents encompass both XHTML content documents and SVG content documents.\n\nTo use any other type of resource in the spine, called a foreign content document, requires including a fallback to an EPUB content document. This extensibility model allows EPUB creators to experiment with formats while ensuring that reading systems are always able to render something for the user to read, as there is no guarantee of support for foreign content documents.\n\nA mechanism called manifest fallbacks allows EPUB creators to provide fallbacks for foreign content documents. In this model, the manifest entry for the foreign content document must include a fallback attribute that points to the next possible resource for reading systems to try when they do not support its format. Although not common, a fallback resource can specify another fallback, thereby making chains many resources deep. The one requirement is that there must be at least one EPUB content document in a manifest fallback chain.\n\nAlthough they are not directly listed in the spine, all of the resources in the fallback chain are considered part of the spine, and by extension part of the spine plane, since any may be used by a reading system.\n\nRefer to 3.5.1 Manifest fallbacks for more information.\n\nCaution\n\nAlthough manifest fallbacks fulfill the technical requirements of EPUB, there is little practical support for them in reading systems. Their use is strongly discouraged as it can lead to unreadable publications.\n\nNote\n\nIt is possible to provide manifest fallbacks for EPUB content documents, but this is not required or common. For example, a scripted content document could have a fallback to an unscripted alternative for reading systems that do not support scripting.\n\n3.1.3 The content plane\n\nThe content plane classifies resources that are used when rendering EPUB content documents and foreign content documents. These types of resources include embedded media, CSS style sheets, scripts, and fonts. These resources fall into three categories based on their reading system support: core media type resources, foreign resources, and exempt resources.\n\nA core media type resource is one that reading systems have to support, so it can be used without restriction in EPUB or foreign content documents. For more information about core media type resources, refer to 3.2 Core media types.\n\nNote\n\nBeing a core media type resource does not mean that reading systems will always render the resource, as not all reading systems support all features of EPUB 3. A reading system without a viewport, for example, will not render visual content such as images.\n\nThe opposite of core media type resources are foreign resources. These are resources that reading systems are not guaranteed to support the rendering of. As a result, similar to how using foreign content documents in the spine requires fallbacks to ensure their rendering, using foreign resources in content documents also requires fallbacks. These fallbacks are provided in one of two ways: using the capabilities of the host format or via manifest fallbacks.\n\nThe preferred method is to use the fallback capabilities of the host format. Many HTML elements, for example, have intrinsic fallback capabilities. One example is the picture element [html], which allows EPUB creators to specify multiple alternative image formats.\n\nIf an intrinsic fallback method is not available, it is also possible to use manifest fallbacks, but this method, as cautioned against in the previous section, is discouraged. For more information about foreign resources, refer to 3.3 Foreign resources.\n\nFalling between core media type resources and foreign resources are exempt resources. These are most closely associated with foreign resources, as there is no guarantee that reading systems will render them. But like core media types, they do not require fallbacks.\n\nExempt resources tend to address specific cases for which there are no core media types defined, but for which providing a fallback would prove cumbersome or unnecessary. These include embedding video, adding accessibility tracks, and linking to resources from the [html] link element.\n\nRefer to 3.4 Exempt resources for more information about these exceptions.\n\nNote\n\nA common point of confusion arising from core media type resources is the listing of XHTML and SVG as core media type resources with the requirement the markup conform to their respective EPUB content document definitions. This allows EPUB creators to embed both XHTML and SVG documents in EPUB content documents while keeping consistent requirements for authoring and reading system support.\n\nIn practice, it means that EPUB creators can put XHTML and SVG core media type resources in the spine without any modification or fallback (they are also conforming XHTML and SVG content documents), but this is a unique case. All other core media type resources become foreign content documents when used in the spine (i.e., foreign content documents include all foreign resources and all core media type resources except for XHTML and SVG).\n\n3.4 Exempt resources\n\nAn exempt resource shares properties with both foreign resources and core media type resources. It is most similar to a foreign resource in that it is not guaranteed reading system support, but, like a core media type resource, does not require a fallback.\n\nThere are only a small set of special cases for exempt resources. Video, for example, are exempt from fallbacks because there is no consensus on a core media type video format at this time (i.e., there is no format to fallback to). Similarly, audio and video tracks are exempt to allow EPUB creators to meet accessibility requirements using whatever format reading systems support best.\n\nThe following list details cases of content-specific exempt resources, including any restrictions on where EPUB creators can use them.\n\nFonts\n\nAll font resources not already covered as font core media types are exempt resources.\n\nThis exemption allows EPUB creators to use any font format without a fallback, regardless of reading system support expectations, as CSS rules will ensure a fallback font in case of no support.\n\nRefer to the reading system support requirements for fonts [epub-rs-33] for more information.\n\nAny resource referenced from the [html] link element that is not already a core media type resource (e.g., CSS style sheets) is an exempt resource.\n\nTracks\n\nAll audio and video tracks (e.g., [webvtt] captions, subtitles and descriptions) referenced from the [html] track element are exempt resources.\n\nVideo\n\nAll video codecs referenced from the [html] video — including any child source elements — are exempt resources.\n\nNote\n\nAlthough reading systems are encouraged to support at least one of the H.264 [h264] and VP8 [rfc6386] video codecs, support for video codecs is not a conformance requirement. EPUB creators must consider factors such as breadth of adoption, playback quality, and technology royalties when deciding which video formats to include.\n\nNote\n\nThe exemptions made above do not apply to the spine. If an exempt resource is used in the spine, and it is not also an EPUB content document, it will require a fallback in that context.\n\nIn addition to the content-specific exemptions, a resource is classified as an exempt resource if:\n\nit is not referenced from a spine itemref element (i.e., used as a foreign content document); and\n\nit is not embedded directly in EPUB content documents (e.g., via [html] embedded content and [svg] image and foreignObject elements).\n\nThis exemption allows EPUB creators to include resources in the EPUB container that are not for use by EPUB reading systems. The primary case for this exemption is to allow data files to travel with an EPUB publication, whether for scripts to use in their constituent EPUB content documents or for external applications to use (e.g., a scientific journal might include a data set with instructions on how to extract it from the EPUB container).\n\nIt also allows EPUB creators to use foreign resources in foreign content documents without reading systems or EPUB conformance checkers having to understand the fallback capabilities of those resources (i.e., the requirement for a fallback for the foreign content document covers any rendering issues within it). As the resource is not referenced from an EPUB content document, it automatically becomes exempt from fallbacks.\n\n4.4 Font obfuscation\n\nCaution\n\nBetter methods of protecting fonts exist. Both [woff] and [woff2] fonts, for example, allow the embedding of licensing information and provide some protection through font table compression. The use of remotely hosted fonts also allows for font subsetting. EPUB creators are advised to use font obfuscation as defined in this section only when no other options are available to them. See also the limitations of obfuscation.\n\n4.4.1 Introduction\n\nThis section is non-normative.\n\nSince an OCF ZIP container is fundamentally a ZIP file, commonly available ZIP tools can be used to extract any unencrypted content stream from the package. Moreover, the nature of ZIP files means that their contents might appear like any other native container on some systems (e.g., a folder).\n\nWhile this simplicity of ZIP files is quite useful, it also poses a problem when ease of extraction of fonts is not a desired side-effect of not encrypting them. An EPUB creator who wishes to include a third-party font, for example, typically does not want that font extracted and re-used by others. More critically, many commercial fonts allow embedding, but embedding a font implies making it an integral part of the EPUB publication, not just providing the original font file along with the content.\n\nSince integrated ZIP support is so ubiquitous in modern operating systems, simply placing a font in the OCF ZIP container is insufficient to signify that the font cannot be reused in other contexts. This uncertainty can undermine the otherwise useful font embedding capability of EPUB publications.\n\nTo discourage reuse of their fonts, some font vendors might only allow their use in EPUB publications if the fonts are bound in some way to the EPUB publication. That is, if the font file cannot be installed directly for use on an operating system with the built-in tools of that computing device, and it cannot be directly used by other EPUB publications.\n\nIt is beyond the scope of this specification to provide a digital rights management or enforcement system for fonts. This section instead defines a method of obfuscation that will require additional work on the part of the final OCF recipient to gain general access to any obfuscated fonts.\n\n4.4.2 Limitations\n\nThis section is non-normative.\n\nThis specification does not claim that obfuscation constitutes encryption, nor does it guarantee that the resource will be secure from copyright infringement. The hope is only that this algorithm will meet the requirements of vendors who require some assurance that their fonts cannot be extracted simply by unzipping the OCF ZIP container and copying the resource.\n\nObfuscation, like any protection scheme, cannot fully protect fonts from being accessed in their deobfuscated state. The mechanism only provides an obstacle for those who are unaware of the license details. It will not prevent a determined user from gaining full access to the font through such alternative means as:\n\napplying the deobfuscation algorithm to extract the raw font file;\n\naccessing the deobfuscated font through a reading system that must dedobfuscate it to render the content (e.g., by accessing the resources through a browser-based reading system); or\n\naccessing the deobfuscated font through authoring tools that provide the visual rendering of the content.\n\nAs a result, whether this method of obfuscation satisfies the requirements of individual font licenses remains a question for the licensor and licensee. EPUB creators are responsible for ensuring their use of obfuscation meets font licensing requirements.\n\nEPUB creators should also be aware that obfuscation may lead to interoperability issues in reading systems as reading systems are not required to deobfuscate fonts. As a result, the visual presentation of their publications may differ from reading system to reading system.\n\nAlso note that the algorithm is restricted to obfuscating fonts. It is not intended as a general-purpose mechanism for obfuscating any resource in the EPUB container.\n\n4.4.3 Obfuscation key\n\nEPUB creators MUST derive the key used in the obfuscation algorithm from the unique identifier.\n\nAll white space characters, as defined in section 2.3 of the XML 1.0 specification [xml], MUST be removed from this identifier — specifically, the Unicode code points U+0020, U+0009, U+000D and U+000A.\n\nEPUB creators MUST generate a SHA-1 digest of the UTF-8 representation of the resulting string as specified by the Secure Hash Standard [fips-180-4]. They can then use this digest as the key for the algorithm.\n\n4.4.4 Obfuscation algorithm\n\nThe algorithm employed to obfuscate fonts consists of modifying the first 1040 bytes (~1KB) of the font file. (In the unlikely event that the font file is less than 1040 bytes, this process will modify the entire file.)\n\nTo obfuscate the original data, store, as the first byte of the embedded font, the result of performing a logical exclusive or (XOR) on the first byte of the raw font file and the first byte of the obfuscation key.\n\nRepeat this process with the next byte of source and key and continue for all bytes in the key. At this point, the process continues starting with the first byte of the key and 21st byte of the source. Once 1040 bytes are encoded in this way (or the end of the source is reached), directly copy any remaining data in the source to the destination.\n\nEPUB creators MUST obfuscate fonts before compressing and adding them to the OCF ZIP container. Note that as obfuscation is not encryption, this requirement is not a violation of the one in 4.2.6.3.2 Encryption file (encryption.xml) to compress fonts before encrypting them.\n\nThe following pseudo-code exemplifies the obfuscation algorithm.\n\nset ocf to OCF ZIP container file\n\nset source to font file\n\nset destination to obfuscated font file\n\nset keyData to key for file\n\nset outer to 0\n\nwhile outer < 52 and not (source at EOF)\n\nset inner to 0\n\nwhile inner < 20 and not (source at EOF)\n\nread 1 byte from source (Assumes read advances file position)\n\nset sourceByte to result of read\n\nset keyByte to byte inner of keyData\n\nset obfuscatedByte to (sourceByte XOR keyByte)\n\nwrite obfuscatedByte to destination\n\nincrement inner\n\nend while\n\nincrement outer\n\nend while\n\nif not (source at EOF) then\n\nread source to EOF\n\nwrite result of read to destination\n\nend if\n\nDeflate destination\n\nstore destination as source in ocf\n\n4.4.5 Specifying obfuscated fonts\n\nAlthough not technically encrypted data, all obfuscated fonts MUST have an entry in the encryption.xml file accompanying the EPUB publication (see 4.2.6.3.2 Encryption file (encryption.xml)).\n\nEPUB creators MUST specify an EncryptedData element for each obfuscated font. Each EncryptedData element MUST contain a child EncryptionMethod element whose Algorithm attribute has the value http://www.idpf.org/2008/embedding. The presence of this attribute signals the use of the algorithm described in this specification.\n\nEPUB creators MUST list the path to the obfuscated font in the CipherReference child of the CipherData element. As the obfuscation algorithm is restricted to fonts, the URI attribute of the CipherReference element MUST reference a Font core media type resource.\n\nTo prevent trivial copying of the embedded font to other EPUB publications, EPUB creators MUST NOT provide the obfuscation key in the encryption.xml file.\n\n5.5 Metadata section\n\n5.5.1 The metadata element\n\nThe metadata element encapsulates meta information.\n\nElement Name:\n\nmetadata\n\nUsage:\n\nREQUIRED first child of package.\n\nAttributes:\n\nNone\n\nContent Model:\n\nIn any order:\n\ndc:identifier [1 or more]\n\ndc:title [1 or more]\n\ndc:language [1 or more]\n\nDublin Core Optional Elements [0 or more]\n\nmeta [1 or more]\n\nOPF2 meta [0 or more] (legacy)\n\nlink [0 or more]\n\nThe package document metadata element has two primary functions:\n\nto provide a minimal set of meta information for reading systems to use to internally catalogue an EPUB publication and make it available to a user (e.g., to present in a bookshelf).\n\nto provide access to all rendering metadata needed to control the layout and display of the content (e.g., fixed-layout properties).\n\nThe package document does not provide complex metadata encoding capabilities. If EPUB creators need to provide more detailed information, they can associate metadata records (e.g., that conform to an international standard such as [onix] or are created for custom purposes) using the link element. This approach allows reading systems to process the metadata in its native form, avoiding the potential problems and information loss caused by translating to use the minimal package document structure.\n\nIn keeping with this philosophy, the package document only has the following minimal metadata requirements: it MUST contain the [dcterms] dc:title, dc:identifier, and dc:language elements together with the [dcterms] dcterms:modified property. All other metadata is OPTIONAL.\n\nThe meta element provides a generic mechanism for including metadata properties from any vocabulary. Although EPUB creators MAY use this mechanism for any metadata purposes, they will typically use it to include rendering metadata defined in EPUB specifications.\n\nNote\n\nSee [epub-a11y-11] for accessibility metadata recommendations.\n\n5.5.2 Metadata values\n\nThe Dublin Core elements [dcterms] and meta element have mandatory child text content [dom]. In the descriptions for these elements, this specification refers to this content as the element's value.\n\nThese elements MUST have non-empty values after leading and trailing ASCII whitespace [infra] is stripped (i.e., they must consist of at least one non-whitespace character).\n\nWhitespace within these element values is not significant. Sequences of one or more whitespace characters are collapsed to a single space [infra] during processing .\n\n5.5.3 Dublin Core required elements\n\n5.5.3.1 The dc:identifier element\n\nThe dc:identifier element [dcterms] contains an identifier such as a UUID, DOI or ISBN.\n\nElement Name:\n\ndc:identifier\n\nNamespace:\n\nhttp://purl.org/dc/elements/1.1/\n\nUsage:\n\nREQUIRED child of metadata. Repeatable.\n\nAttributes:\n\nid [conditionally required]\n\nContent Model:\n\nText\n\nThe EPUB creator MUST provide an identifier that is unique to one and only one EPUB publication — its unique identifier — in an dc:identifier element. This dc:identifier element MUST specify an id attribute whose value is referenced from the package element's unique-identifier attribute.\n\nAlthough not static, EPUB creators should make changes to the unique identifier for an EPUB publication as infrequently as possible. Unique Identifiers should have maximal persistence both for referencing and distribution purposes. EPUB creators should not issue new identifiers when making minor revisions such as updating metadata, fixing errata, or making similar minor changes.\n\nEPUB creators MAY specify additional identifiers. The identifiers should be fully qualified URIs.\n\nEPUB creators MAY use the identifier-type property to indicate that the value of a dc:identifier element conforms to an established system or an issuing authority granted it.\n\n5.5.3.2 The dc:title element\n\nThe dc:title element [dcterms] represents an instance of a name for the EPUB publication.\n\nElement Name:\n\ndc:title\n\nNamespace:\n\nhttp://purl.org/dc/elements/1.1/\n\nUsage:\n\nREQUIRED child of metadata. Repeatable.\n\nAttributes:\n\ndir [optional]\n\nid [optional]\n\nxml:lang [optional]\n\nContent Model:\n\nText\n\nThe first dc:title element in document order is the main title of the EPUB publication (i.e., the primary one reading systems present to users).\n\nEPUB creators should use only a single dc:title element to ensure consistent rendering of the title in reading systems.\n\nNote\n\nAlthough it is possible to include more than one dc:title element for multipart titles, reading system support for additional dc:title elements is inconsistent. Reading systems may ignore the additional segments or combine them in unexpected ways.\n\nFor example, the following example shows a basic multipart title:\n\n<metadata …> <dc:title> THE LORD OF THE RINGS </dc:title> <dc:title> Part One: The Fellowship of the Ring </dc:title> … </metadata>\n\nThe same title could instead be expressed using a single dc:title element as follows:\n\n<metadata …> <dc:title> THE LORD OF THE RINGS, Part One: The Fellowship of the Ring </dc:title> … </metadata>\n\nPrevious versions of this specification recommended using the title-type and display-seq properties to identify and format the segments of multipart titles (see the Great Cookbooks example). It is still possible to add these semantics, but they are also not well supported.\n\n5.5.3.3 The dc:language element\n\nThe dc:language element [dcterms] specifies the language of the content of the EPUB publication.\n\nElement Name:\n\ndc:language\n\nNamespace:\n\nhttp://purl.org/dc/elements/1.1/\n\nUsage:\n\nREQUIRED child of metadata. Repeatable.\n\nAttributes:\n\nid [optional]\n\nContent Model:\n\nText\n\nThe value of each dc:language element MUST be a well-formed language tag [bcp47].\n\nAlthough EPUB creators MAY specify additional dc:language elements for multilingual Publications, reading systems will treat the first dc:language element in document order as the primary language of the EPUB publication.\n\nNote\n\nPublication resources do not inherit their language from the dc:language element(s). EPUB creators must set the language of a resource using the intrinsic methods of the format.\n\n5.5.4 Dublin Core optional elements\n\n5.5.4.1 General definition\n\nAll [dcterms] elements except for dc:identifier, dc:language, and dc:title are designated as OPTIONAL. These elements conform to the following generalized definition:\n\nElement Name:\n\ndc:contributor | dc:coverage | dc:creator | dc:date | dc:description | dc:format | dc:publisher | dc:relation | dc:rights | dc:source | dc:subject | dc:type\n\nNamespace:\n\nhttp://purl.org/dc/elements/1.1/\n\nUsage:\n\nOPTIONAL child of metadata. Repeatable.\n\nAttributes:\n\ndir [optional] – only allowed on dc:contributor, dc:coverage, dc:creator, dc:description, dc:publisher, dc:relation, dc:rights, and dc:subject.\n\nid [optional] – allowed on any element.\n\nxml:lang [optional] – only allowed on dc:contributor, dc:coverage, dc:creator, dc:description, dc:publisher, dc:relation, dc:rights, and dc:subject.\n\nContent Model:\n\nText\n\nThis specification does not modify the [dcterms] element definitions except as noted in the following sections.\n\n5.5.4.2 The dc:contributor element\n\nThe dc:contributor element [dcterms] is used to represent the name of a person, organization, etc. that played a secondary role in the creation of the content.\n\nThe requirements for the dc:contributor element are identical to those for the dc:creator element in all other respects.\n\n5.5.4.3 The dc:creator element\n\nThe dc:creator element [dcterms] represents the name of a person, organization, etc. responsible for the creation of the content. EPUB creators MAY associate a role property with the element to indicate the function the creator played.\n\nThe dc:creator element should contain the name of the creator as EPUB creators intend reading systems to display it to users.\n\nEPUB creators MAY use the file-as property to associate a normalized form of the creator's name, and the alternate-script property to represent the creator's name in another language or script.\n\nIf an EPUB publication has more than one creator, EPUB creators should specify each in a separate dc:creator element.\n\nThe document order of dc:creator elements in the metadata section determines the display priority, where the first dc:creator element encountered is the primary creator.\n\nEPUB creators should represent secondary contributors using the dc:contributor element.\n\n5.5.4.5 The dc:subject element\n\nThe dc:subject element [dcterms] identifies the subject of the EPUB publication. EPUB creators should set the value of the element to the human-readable heading or label, but may use a code value if the subject taxonomy does not provide a separate descriptive label.\n\nEPUB creators MAY identify the system or scheme they drew the element's value from using the authority property.\n\nWhen a scheme is identified, EPUB creators MUST associate a subject code using the term property.\n\nThe term property MUST NOT be associated with a dc:subject element that does not specify a scheme.\n\nThe values of the dc:subject element and term property are case sensitive only when the designated scheme requires.\n\n5.5.4.6 The dc:type element\n\nThe dc:type element [dcterms] is used to indicate that the EPUB publication is of a specialized type (e.g., annotations or a dictionary packaged in EPUB format).\n\nEPUB creators MAY use any text string as a value.\n\nNote\n\nThe former IDPF EPUB 3 Working Group maintained a non-normative registry of specialized EPUB publication types for use with this element. This Working Group no longer maintains the registry and does not anticipate developing new specialized publication types.\n\n5.5.5 The meta element\n\nThe meta element provides a generic means of including package metadata.\n\nEach meta element defines a metadata expression. The property attribute takes a property data type value that defines the statement made in the expression, and the text content of the element represents the assertion. (Refer to D.1 Vocabulary association mechanisms for more information.)\n\nThis specification defines two types of metadata expressions that EPUB creators can define using the meta element:\n\nA primary expression is one in which the expression defined in the meta element establishes some aspect of the EPUB publication. A meta element that omits a refines attribute defines a primary expression.\n\nA subexpression is one in which the expression defined in the meta element is associated with another expression or resource using the refines attribute to enhance its meaning. A subexpression might refine a media clip, for example, by expressing its duration, or refine a creator or contributor expression by defining the role of the person.\n\nEPUB creators MAY use subexpressions to refine the meaning of other subexpressions, thereby creating chains of information.\n\nNote\n\nAll the [dcterms] elements represent primary expressions, and permit refinement by meta element subexpressions.\n\nThe Meta Properties Vocabulary is the default vocabulary for use with the property attribute.\n\nEPUB creators MAY add terms from other vocabularies as defined in D.1 Vocabulary association mechanisms.\n\nThe scheme attribute identifies the system or scheme the EPUB creator obtained the element's value from. The value of the attribute MUST be a property data type value that resolves to the resource that defines the scheme. The scheme attribute does not have a default vocabulary (i.e., all values require a prefix).\n\nEPUB creators MUST express the last modification date in Coordinated Universal Time (UTC) and MUST terminate it with the \"Z\" (Zulu) time zone indicator.\n\nEPUB creators should update the last modified date whenever they make changes to the EPUB publication.\n\nEPUB creators MAY specify additional modified properties in the package document metadata, but they MUST have a different subject (i.e., they require a refines attribute that references an element or resource).\n\nNote\n\nThe requirements for the last modification date are to ensure compatibility with earlier versions of EPUB 3 that defined a release identifier [epubpackages-32] for EPUB publications.\n\n5.5.7 The link element\n\nThe link element associates resources with an EPUB publication, such as metadata records.\n\nElement Name:\n\nlink\n\nUsage:\n\nAs a child of metadata. Repeatable.\n\nAttributes:\n\nhref [required]\n\nhreflang [optional]\n\nid [optional]\n\nmedia-type [conditionally required]\n\nproperties [optional]\n\nrefines [optional]\n\nrel [required]\n\nContent Model:\n\nEmpty\n\nThe metadata element MAY contain zero or more link elements, each of which identifies the location of a publication resource or a linked resource in its REQUIRED href attribute.\n\nResources referenced from the link element are publication resources only when they are:\n\nreferenced from the spine; or\n\nincluded or embedded in an EPUB content document (e.g., a metadata record serialized as RDFa [rdfa-core] or as JSON-LD [json-ld11] embedded in an [html] script element).\n\nIn all other cases (e.g., when linking to standalone [onix] records), the resources referenced are not publication resources (i.e., are not subject to core media type requirements) and EPUB creators MUST NOT list them in the manifest.\n\nEPUB creators MAY locate linked resources within the EPUB container or externally, but should consider that reading systems are not required to retrieve resources outside the EPUB container.\n\nThe media-type attribute is OPTIONAL when a linked resource is located outside the EPUB container, as more than one media type could be served from the same URL [url]. EPUB creators MUST specify the attribute for all linked resources within the EPUB container.\n\nThe OPTIONAL hreflang attribute identifies the language of the linked resource. The value MUST be a well-formed language tag [bcp47].\n\nThe REQUIRED rel attribute takes a space-separated list of property values that establish the relationship the linked resource has with the EPUB publication.\n\nThe value of the media-type attribute is not always sufficient to identify the type of linked resource (e.g., many XML-based record formats use the media type \"application/xml\"). To aid reading systems in the identification of such generic resources, EPUB creators MAY specify a semantic identifier in the properties attribute.\n\nThe Metadata Link Vocabulary is the default vocabulary for the rel and properties attributes.\n\nEPUB creators MAY add relationships and properties from other vocabularies as defined in D.1 Vocabulary association mechanisms.\n\nEPUB creators MAY provide one or more linked metadata records.\n\nNote\n\nDue to the variety of metadata record formats and serializations that an EPUB creator can link to an EPUB publication, and the complexity of comparing metadata properties between them, this specification does not require reading systems to process linked records.\n\nIn addition to full records, EPUB creators MAY also use the link element to identify individual metadata properties available in an alternative format.\n\n7.1 Introduction\n\nThis section is non-normative.\n\nThe EPUB navigation document is a mandatory component of an EPUB publication. It allows EPUB creators to include a human- and machine-readable global navigation layer, thereby ensuring increased usability and accessibility for the user.\n\nThe EPUB navigation document is a special type of XHTML content document that defines the table of contents for reading systems. It may also include other specialized navigation elements, such as a page list and a list of key landmarks. These navigation elements have additional restrictions on their content to facilitate their processing.\n\nThe EPUB navigation document is not exclusively for machine processing, however. There are no restrictions on the structure or content of the EPUB navigation document outside of the specialized navigation elements (i.e., EPUB creators can mark the rest of the document up like any other XHTML content document). As a result, it can also be part of the linear reading order, avoiding the need for duplicate tables of contents. EPUB creators can hide navigation elements that are only for machine processing (e.g., the page list) with the hidden attribute.\n\nNote that reading systems may strip scripting, styling, and HTML formatting as they generate navigational interfaces from information found in the EPUB navigation document, and this may make the result difficult to read. If EPUB creators require such formatting and functionality, then they should also include the EPUB navigation document in the spine. The use of progressive enhancement techniques for scripting and styling of the navigation document will help ensure the content will retain its integrity when rendered in a non-browser context.\n\n7.4 The nav element: types\n\n7.4.1 Introduction\n\nThis section is non-normative.\n\nThe nav elements defined in an EPUB navigation document are distinguished semantically by the value of their epub:type attribute.\n\nThis specification defines three types of navigation aid:\n\ntoc\n\nIdentifies the nav element that contains the table of contents. The toc nav is the only navigation aid that EPUB creators must include in the EPUB navigation document.\n\npage-list\n\nIdentifies the nav element that contains a list of pages for a print or other statically paginated source.\n\nlandmarks\n\nIdentifies the nav element that contains a list of points of interest.\n\nAn EPUB navigation document may contain at most one navigation aid for each of these types.\n\nThe EPUB navigation document may include additional navigation types. See 7.4.5 Other nav elements for more information.\n\n7.4.2 The toc nav element\n\nThe toc nav element defines the primary navigational hierarchy. It conceptually corresponds to a table of contents in a printed work (i.e., it provides navigation to the major structural sections of the publication).\n\nEPUB creators SHOULD order the references in the toc nav element such that they reflect both:\n\nthe order of the referenced EPUB content documents in the spine; and\n\nthe order of the targeted elements within their respective EPUB content documents.\n\n7.4.3 The page-list nav element\n\nThe page-list element provides navigation to static page boundaries in the content. These boundaries may correspond to a statically paginated source such as print or may be defined exclusively for the EPUB publication.\n\nThe page-list nav element is OPTIONAL in EPUB navigation documents and MUST NOT occur more than once.\n\nThe page-list nav element SHOULD contain only a single ol descendant (i.e., no nested sublists).\n\nEPUB creators MAY identify the destinations of the page-list references in their respective EPUB content documents using the pagebreak term [epub-ssv-11].\n\n7.4.4 The landmarks nav element\n\nThe landmarks nav element identifies fundamental structural components in the content to enable reading systems to provide the user efficient access to them (e.g., through a dedicated button in the user interface).\n\nThe landmarks nav element is OPTIONAL in EPUB navigation documents and MUST NOT occur more than once.\n\nThe landmarks nav element SHOULD contain only a single ol descendant (i.e., no nested sublists).\n\nThe epub:type attribute is REQUIRED on a element descendants of the landmarks nav element. The structural semantics of each link target within the landmarks nav element is determined by the value of this attribute.\n\nThe landmarks nav MUST NOT include multiple entries with the same epub:type value that reference the same resource, or fragment thereof.\n\nEPUB creators should limit the number of items they define in the landmarks nav to only items that a reading system is likely to use in its user interface. The element is not meant to repeat the table of contents.\n\nThe following landmarks are recommended to include when available:\n\nbodymatter [epub-ssv-11] — Reading systems often use this landmark to automatically jump users past the front matter when they begin reading.\n\ntoc [epub-ssv-11] — If the table of contents is available in the spine, reading systems may use this landmark to take users to the document containing it.\n\nOther possibilities for inclusion in the landmarks nav are key reference sections such as indexes and glossaries.\n\nAlthough the landmarks nav is intended for reading system use, EPUB creators should still ensure that the labels for the landmarks nav are human readable. Reading systems may expose the links directly to users.\n\n7.4.5 Other nav elements\n\nEPUB navigation documents MAY contain one or more nav elements in addition to the toc, page-list, and landmarks nav elements defined in the preceding sections. If these nav elements are intended for reading system processing, they MUST have an epub:type attribute and are subject to the content model restrictions defined in 7.3 The nav element: restrictions.\n\nThis specification imposes no restrictions on the semantics of any additional nav elements: they MAY represent navigational semantics for any information domain, and they MAY contain link targets with homogeneous or heterogeneous semantics.\n\n7.5 Using in the spine\n\nThis section is non-normative.\n\nAlthough it is possible to reuse the EPUB navigation document in the spine, it is often the case that not all of the navigation structures, or branches within them, are needed. EPUB creators will often want to hide the page list and landmarks navigation elements or trim the branches of the table of contents for books that have many levels of subsections.\n\nWhile the display property [csssnapshot] controls the visual rendering of EPUB navigation documents in reading systems with viewports, reading systems without viewports may not support CSS. To better ensure the proper rendering in these reading systems, EPUB creators should use the [html] hidden attribute to indicate which (if any) portions of the navigation data are excluded from rendering in the content flow.\n\nThe hidden attribute has no effect on how reading systems render the navigation data outside of the content flow (such as in dedicated navigation user interfaces provided by reading systems).\n\nNote\n\nThe hidden attribute can be used together with the display property to maximize interoperability across all reading systems.\n\n9.1 Introduction\n\nThis section is non-normative.\n\nMainstream ebooks, educational tools and ebooks formatted for persons with print disabilities are some examples of works that contain synchronized audio narration. In EPUB 3, EPUB creators can create these types of books using media overlay documents to describe the timing for the pre-recorded audio narration and how it relates to the EPUB content document markup. The specification defines the file format for media overlays as a subset of [smil3], a W3C recommendation for representing synchronized multimedia information in XML.\n\nThe text and audio synchronization enabled by media overlays provides enhanced accessibility for any user who has difficulty following the text of a traditional book. Media overlays also provide a continuous listening experience for readers who are unable to read the text for any reason, something that traditional audio embedding techniques cannot offer. They are even useful for purposes not traditionally considered accessibility concerns (e.g., for language learning).\n\nThe media overlays feature is transparent to EPUB reading systems that do not support the feature. The inclusion of media overlays in an EPUB publication has no impact on the ability of media overlay-unaware reading systems to render the EPUB publication as though the media overlays are not present.\n\nMedia overlays in EPUB are not an equivalent to audiobooks, as audiobooks are primarily audio-based with text occasionally provided as an alternate format. The W3C [audiobooks] recommendation is for building audio publications.\n\nAlthough future versions of this specification might incorporate support for video media (e.g., synchronized text/sign-language books), this version supports only synchronizing audio media with the EPUB content document.\n\n9.3 Creating media overlays\n\n9.3.1 Introduction\n\nThis section is non-normative.\n\nEPUB creators can represent a pre-recorded narration of a publication as a series of audio clips, each corresponding to part of an EPUB content document. A single audio clip, for example, typically represents a single phrase or paragraph, but infers no order relative to the other clips or to the text of a document. Media overlays solve this problem of synchronization by tying the structured audio narration to its corresponding text (or other media) in the EPUB content document using [smil3] markup. Media overlays are, in fact, a simplified subset of SMIL 3.0 that define the playback sequence of these clips.\n\nThe SMIL elements primarily used for structuring media overlays are body (used for the main sequence), seq (sequence) and par (parallel). (Refer to 9.2.2 Media overlay document definition for more information on these and other SMIL elements.)\n\nThe par element is the basic building block of a media overlay and corresponds to a phrase in the EPUB content document. The element provides two key pieces of information for synchronizing content: 1) the audio clip containing the narration for the phrase; and 2) a pointer to the associated EPUB content document fragment. The par element uses two media element children to represent this information: an audio element and a text element. Because par elements' media object children are timed in parallel, reading systems render the audio clip and EPUB content document fragment at the same time, resulting in a synchronized presentation.\n\nThe text element src attribute references the associated phrase, sentence, or other segment of the EPUB content document by its URL [url] reference. The audio element src attribute similarly references the location of the corresponding audio clip and adds the OPTIONAL clipBegin and clipEnd attributes to indicate a specific offset within the clip.\n\nEPUB creators place par elements together sequentially to form a series of phrases or sentences. Not every element of the EPUB content document will have a corresponding par element in a media overlay document, only those relevant to the audio narration.\n\nEPUB creators can also add par elements to seq elements to define more complex structures such as parts and chapters (see 9.3.2.1 Overlay structure).\n\n9.3.2 Relationship to the EPUB content document\n\nNote\n\nIn this section, the EPUB content document is assumed to be an XHTML content document. While EPUB creators may use media overlays with SVG content documents, playback behavior might not be consistent and therefore interoperability is not guaranteed.\n\nEPUB creators should also be aware that reading system support for playback of both reflowable and fixed-layout EPUB content documents is not guaranteed. Differences in reading system pagination strategies mean that some reading systems will only support media overlays in one or the other layout format.\n\n9.3.2.1 Overlay structure\n\nThe body of a media overlay document consists of two elements: the par element and the seq element. The ordering of these elements represents how reading systems render the content in the corresponding EPUB content documents during playback.\n\nThe par element represents a segment of content, such as a word, phrase, sentence, table cell, list item, image, or other identifiable piece of content in the markup. Each element identifies both the content to display (in the text element) and audio to synchronize (in the audio element) during playback.\n\nThe seq element represents sequences — sets of seq and/or par elements that together represent a logical component of the content. EPUB creators can use it to represent nested containers such as sections, asides, headers, tables, lists, and footnotes. It allows EPUB creators to retain the structure inherent in these containers in the media overlay document.\n\nThe seq element MUST contain an epub:textref attribute. As seq elements do not provide synchronization instructions, this attribute allows a reading system to match the fragment to a location in the text.\n\nNote\n\nThe reason for grouping structures like sections, figures, tables, and footnotes in a seq element is so that reading systems can identify their start and end positions during playback. Reading systems can then offer playback options tailored to the layout of the content, such as jumping past a long figure, turning off rendering of page break announcements (see 9.4 Skippability and escapability), or customizing the reading mode to suit structures such as tables.\n\n9.3.2.2 Referencing document fragments\n\nBoth the epub:textref attribute and the text element's src attribute may contain a URL-fragment string that references a specific part (e.g., an element via its ID) of the associated EPUB content document.\n\nFor XHTML and SVG content documents, the URL-fragment string SHOULD be a reference to a specific element via its ID, or an SVG Fragment Identifier [svg], respectively.\n\nEPUB creators MAY use other fragment identifier schemes, but reading systems may not support such identifiers.\n\n9.3.2.3 Overlay granularity\n\nThis section is non-normative.\n\nThe granularity level of the media overlay depends on how EPUB creators mark up the EPUB content document and the type of fragment identifier they use in the text elements' src attributes and the seq elements' epub:textref attrbutes. For example, when referencing [html] elements, if the finest level of markup is at the paragraph level, then that is the finest possible level for media overlay synchronization. Likewise, if sub-paragraph markup is available, such as [html] span element representing phrases or sentences, then finer granularity is possible in the media overlay. Finer granularity gives users more precise results for synchronized playback when navigating by word or phrase and when searching the text but increases the file size of the media overlay documents. Fragment identifier schemes that do not rely on the presence of elements could provide even finer granularity, where supported.\n\n9.3.2.4 Text-to-speech rendering\n\nThis specification allows the use of text-to-speech (TTS) — the rendering of the textual content of an EPUB publication as artificial human speech using a synthesized voice — in addition to pre-recorded audio clips.\n\nWhen a media overlay par element omits its audio element, its text element may be rendered in reading systems via TTS. If the text fragment is not appropriate for TTS rendering (e.g., is not a text element and/or has no text fallback), this may produce unexpected results.\n\nNote\n\nSee EPUB 3 Text-to-Speech Support [epub-tts-10] for more information about using TTS technologies in EPUB publications.\n\n9.3.3 Structural semantics in overlays\n\nTo express structural semantics in media overlay documents, EPUB creators MAY specify the epub:type attribute on par, seq, and body elements.\n\nThe epub:type attribute facilitates reading system behavior appropriate for the semantic type(s) indicated. Examples of these behaviors are skippability and escapability and table reading mode [epub-rs-33].\n\nMedia overlay documents MAY use the applicable vocabulary association mechanisms for the epub:type attribute to define additional semantics.\n\n9.3.4 Associating style information\n\nEPUB creators MAY express visual rendering information for the currently playing EPUB content document element in a CSS Style Sheet using author-defined classes.\n\nWhen used, EPUB creators MUST declare the class names in the package document using the active-class and playback-active-class properties.\n\nEPUB creators MUST define exactly one CSS class name in each property they define. Each property MUST define a valid CSS class name not including any selectors [css2]. This specification does not reserve names for use with these properties.\n\nEPUB creators MAY define any CSS properties for the specified CSS classes but must ensure that each EPUB content document with an associated media overlay document includes a CSS stylesheet (either embedded or linked) containing the class definitions. In the absence of such definitions reading systems might provide their own styling, or no styling at all.\n\nEPUB creators MUST NOT use the active-class and playback-active-class properties in conjunction with a refines attribute as they always apply to the entire EPUB publication.\n\n9.3.5 Media overlays packaging\n\n9.3.5.1 Including media overlays\n\nIf an EPUB content document is wholly or partially referenced by a media overlay document, then its manifest item element MUST specify a media-overlay attribute. The attribute MUST reference the ID [xml] of the manifest item for the corresponding media overlay document.\n\nEPUB creators MUST only specify the media-overlay attribute on manifest item elements that reference EPUB content documents.\n\nManifest items for media overlay documents MUST have the media type application/smil+xml.\n\n9.3.5.2 Overlays package metadata\n\nEPUB creators MUST specify the duration of the entire EPUB publication in the package document using a meta element with the duration property.\n\nIn addition, EPUB creators MUST provide the duration of each media overlay document. EPUB creators MUST use the refines attribute to associate each duration declaration to the corresponding manifest item.\n\nThe sum of the durations for each media overlay document SHOULD equal the total duration plus or minus one second.\n\nNote\n\nAlthough the sum of indivudal durations may not exactly match the total due to rounding the times to nearest fraction of a second, a difference of greater than one second indicates a mismatch arising from other issues.\n\nEPUB creators MAY also specify narrator information in the package document, as well as author-defined CSS class names to apply to the currently playing EPUB content document element.\n\nNote\n\nThe media: prefix is reserved for inclusion of these properties in package metadata.\n\n11.3 Recommendations\n\nAlthough EPUB creators cannot prevent every method of exploiting users, they are ultimately responsible for the secure construction of their content. That means that they need to take precautions to limit the exposure of their EPUB publications to the types of malicious exploits described in the previous section.\n\nSome practical steps include:\n\nEnsuring the use of stable links to remote resources.\n\nAvoiding third-party resources, especially those hosted on servers outside the control of the EPUB creator.\n\nAvoiding links to untrustworthy web sites (e.g., that browsers do not recognize as safe).\n\nUsing secure connections to external sites and resources (i.e., using the HTTPS protocol).\n\nNot using scripts to send or receive data over the network without the consent of the user.\n\nObtaining user consent for the use of Web APIs with privacy implications, such as Geolocation [geolocation] and Push Notifications [push-api].\n\nAvoiding embedding content not provided by reputable organizations or individuals.\n\nAvoiding deprecated features of EPUB due to the potential for undiscovered bugs in implementations.\n\nEPUB creators also need to consider the privacy rights of users and avoid situations where they are intentionally collecting data. Ideally, EPUB creators SHOULD NOT track their users, but this is not realistic for all types of publishing.\n\nWhen EPUB creators have to track users, they SHOULD obtain the approval of the user to collect information prior to opening the EPUB publication (e.g., in educational course work). If this is not possible, they SHOULD obtain permission when users access the EPUB publication for the first time. EPUB creators SHOULD also allow users to opt out of tracking, and provide users the ability to manage and delete any data that is collected about them.\n\nEPUB creators also need to consider the inadvertent collection of information about users. Linking to content on a publisher's web site, or remotely hosting resources on their servers, can lead to profiling users, especially if unique tracking identifiers are added to the URLs.\n\nWhen collecting and storing user information within an EPUB publication (e.g., through the use of cookies and web storage [html]), EPUB creators need to consider to potential for data theft by other EPUB publications on a reading system. Although [epub-rs-33] introduces a unique origin requirement for EPUB publications, which limits the potential for attacks, there is still a risk that reading systems will allow EPUB publications access to shared persistent storage (e.g., older reading systems that have not been updated and non-conforming newer reading systems). Consequently, EPUB creators SHOULD NOT store sensitive user data in persistent storage. If EPUB creators must store sensitive data, they SHOULD encrypt the data to prevent trivial access to it in the case of an exploit.\n\nWhen publishers and vendors must use digital rights management schemes, they should prefer schemes that do not utilize or transmit information about the user or their content to external parties to perform encryption or decryption.\n\nTo maximally reduce security and privacy risks, EPUB creators SHOULD produce their EPUB publications with the goal of long-term preservation. EPUB publications created this way are normally self-contained, not dependent on network access, and not encrypted with digital rights management, removing many of the possible attack vectors. [iso22424] is an example of such a preservation format for EPUB publications. While it is understood that not all EPUB creators can achieve these levels of self-containment, following as many of these practices as possible will still benefit overall user privacy and security.\n\nD.1 Vocabulary association mechanisms\n\nD.1.1 Introduction\n\nThis section is non-normative.\n\nEPUB defines a formal method of referencing terms and properties defined in metadata and semantic vocabularies using the property data type. The epub:type attribute uses this data type in EPUB content documents and media overlay documents to add structural semantics, for example, while the property and rel attributes use the data type to define properties and relationships in the package document.\n\nA property value is like a CURIE [rdfa-core] — it represents a URL [url] in compact form. The expression consists of a prefix and a reference, where the prefix — whether literal or implied — is a shorthand mapping of a URL that typically resolves to a term vocabulary. When a reading system converts the prefix to its URL representation and combines with the reference, the resulting URL normally resolves to a fragment within that vocabulary that contains human- and/or machine-readable information about the term.\n\nTo reduce the complexity for authoring, each attribute that takes a property data type also defines a default vocabulary. Terms and properties referenced from the default vocabularies do not include a prefix as the mapping reading systems use to map to a URL is predefined.\n\nThe power of the property data type lies in its easy extensibility. To incorporate new terms and properties, EPUB creators only need to declare a prefix. In another authoring convenience, this specification also reserves prefixes for many commonly used publishing vocabularies (i.e., their declaration is optional).\n\nThe following sections provide additional details on the property data type and vocabulary association mechanism.\n\nD.1.2 The property data type\n\nThe property data type is a compact means of expressing a URL [url] and consists of an OPTIONAL prefix separated from a reference by a colon.\n\n(EBNF productions ISO/IEC 14977)\n\nAll terminal symbols are in the Unicode Block 'Basic Latin' (U+0000 to U+007F). property = [ prefix , \":\" ] , reference; prefix = ? xsd:NCName ? ; reference = ? path-relative-scheme-less-URL string [url] ? ; /* as defined in [url] */\n\nThis specification derives the property data type from the CURIE data type defined in [rdfa-core]. A property represents a subset of CURIEs.\n\nThere are two key differences from CURIEs, however:\n\nan empty reference does not represent a valid property value even though it is valid to the definition above (i.e., a property value that only consists of a prefix and colon is invalid).\n\nan empty string does not represent a valid property even though it is valid to the definition above.\n\nWhen an EPUB creator omits a prefix from a property value, the expressed reference represents a term from the default vocabulary for that attribute.\n\nD.1.3 Default vocabularies\n\nA default vocabulary is one that EPUB creators do not have to declare a prefix for in order to use its terms and properties where a property value is expected. EPUB creators MUST NOT add a prefix to terms and properties from a default vocabulary.\n\nEPUB creators MUST NOT assign a prefix to the URLs associated with these vocabularies using the prefix attribute.\n\nNote\n\nRefer to the definition of each attribute that takes a property data type for more information about its default vocabulary.\n\nD.1.4 The prefix attribute\n\nThe prefix attribute defines prefix mappings for use in property values.\n\nThe value of the prefix attribute is a white space-separated list of one or more prefix-to-URL mappings of the form:\n\n(EBNF productions ISO/IEC 14977)\n\nAll terminal symbols are in the Unicode Block 'Basic Latin' (U+0000 to U+007F). prefixes = mapping , { whitespace, { whitespace } , mapping } ; mapping = prefix , \":\" , space , { space } , ? xsd:anyURI ? ; prefix = ? xsd:NCName ? ; space = #x20 ; whitespace = (#x20 | #x9 | #xD | #xA) ;\n\nWith the exception of reserved prefixes, EPUB creators MUST declare all prefixes used in a document. EPUB creators MUST only specify the prefix attribute on the root element [xml] of the respective format.\n\nThe attribute is not namespaced when used in the package document.\n\nEPUB creators MUST declare the attribute in the namespace http://www.idpf.org/2007/ops in EPUB content documents and media overlay documents.\n\nNote\n\nAlthough the prefix attribute is modeled on the identically named prefix attribute in [rdfa-core], EPUB creators cannot use the attributes interchangeably. The prefix attribute without a namespace in EPUB content documents is the RDFa attribute.\n\nIt is common for both attributes to appear in EPUB content documents that also specify RDFa expressions.\n\n<html … prefix=\"…\" xmlns:epub=\"http://www.idpf.org/2007/ops\" epub:prefix=\"…\"> … </html>\n\nNote that for embedded SVG, prefixes MUST be declared on the [html] root html element.\n\nTo avoid conflicts, EPUB creators MUST NOT use the prefix attribute to declare a prefix that maps to a default vocabulary.\n\nEPUB creators MUST NOT declare the prefix '_' as this specification reserves this prefix for future compatibility with RDFa [rdfa-core] processing.\n\nFor future compatibility with alternative serializations of the package document, EPUB creators MUST NOT declare a prefix for the Dublin Core /elements/1.1/ namespace [dcterms]. EPUB creators MUST use only the [dcterms] elements allowed in the package document metadata.\n\nD.1.5 Reserved prefixes\n\nCaution\n\nAlthough reserved prefixes are an authoring convenience, EPUB creators should avoid relying on them as they may cause interoperability issues. EPUB conformance checkers will often reject new prefixes until their developers update the tools to the latest version of the specification, for example. EPUB creators should declare all prefixes they use to avoid such issues.\n\nEPUB creators MAY use reserved prefixes in attributes that expect a property value without declaring them in a prefix attribute.\n\nEPUB creators SHOULD NOT override reserved prefixes in the prefix attribute.\n\nThe reserved prefixes an EPUB creators can use depends on the context:\n\nPackage document\n\nEPUB creators MAY use the following prefixes in package document attributes without having to declare them.\n\nPrefix URL a11y http://www.idpf.org/epub/vocab/package/a11y/# dcterms http://purl.org/dc/terms/ marc http://id.loc.gov/vocabulary/ media http://www.idpf.org/epub/vocab/overlays/# onix http://www.editeur.org/ONIX/book/codelists/current.html# rendition http://www.idpf.org/vocab/rendition/# schema http://schema.org/ xsd http://www.w3.org/2001/XMLSchema#\n\nStructural Semantics\n\nEPUB creators MAY use the following reserved prefixes in the epub:type attribute without having to declare them.\n\nPrefix URL msv http://www.idpf.org/epub/vocab/structure/magazine/# prism http://www.prismstandard.org/specifications/3.0/PRISM_CV_Spec_3.0.htm#\n\nH.3 Packaged EPUB\n\nThis example demonstrates the use of the OCF format to contain a signed and encrypted EPUB publication within an OCF ZIP container.\n\nOrdered list of files in the OCF ZIP container:\n\nmimetype META-INF/container.xml META-INF/signatures.xml META-INF/encryption.xml EPUB/As_You_Like_It.opf EPUB/book.html EPUB/nav.html EPUB/images/cover.png\n\nThe contents of the mimetype file\n\napplication/epub+zip\n\nThe contents of the META-INF/container.xml file\n\n<container version=\"1.0\" xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\"> <rootfiles> <rootfile full-path=\"EPUB/As_You_Like_It.opf\" media-type=\"application/oebps-package+xml\"/> </rootfiles> </container>\n\nThe contents of the META-INF/signatures.xml file\n\n<signatures xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\"> <Signature Id=\"AsYouLikeItSignature\" xmlns=\"http://www.w3.org/2000/09/xmldsig#\"> <SignedInfo> <CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> <SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"/> <Reference URI=\"#AsYouLikeIt\"> <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <DigestValue> … </DigestValue> </Reference> </SignedInfo> <SignatureValue> … </SignatureValue> <KeyInfo> <KeyValue> <DSAKeyValue> <P>…</P> <Q>…</Q> <G>…</G> <Y>…</Y> </DSAKeyValue> </KeyValue> </KeyInfo> <Object> <Manifest Id=\"AsYouLikeIt\"> <Reference URI=\"EPUB/As_You_Like_It.opf\"> <Transforms> <Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> </Transforms> <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <DigestValue> </DigestValue> </Reference> <Reference URI=\"EPUB/book.html\"> <Transforms> <Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/> </Transforms> <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <DigestValue> </DigestValue> </Reference> <Reference URI=\"EPUB/images/cover.png\"> <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/> <DigestValue> </DigestValue> </Reference> </Manifest> </Object> </Signature> </signatures>\n\nThe contents of the META-INF/encryption.xml file\n\n<encryption xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\" xmlns:enc=\"http://www.w3.org/2001/04/xmlenc#\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"> <enc:EncryptedKey Id=\"EK\"> <enc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#rsa-1_5\"/> <ds:KeyInfo> <ds:KeyName> John Smith </ds:KeyName> </ds:KeyInfo> <enc:CipherData> <enc:CipherValue> xyzabc… </enc:CipherValue> </enc:CipherData> </enc:EncryptedKey> <enc:EncryptedData Id=\"ED1\"> <enc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#kw-aes128\"/> <ds:KeyInfo> <ds:RetrievalMethod URI=\"#EK\" Type=\"http://www.w3.org/2001/04/xmlenc#EncryptedKey\"/> </ds:KeyInfo> <enc:CipherData> <enc:CipherReference URI=\"EPUB/book.html\"/> </enc:CipherData> </enc:EncryptedData> <enc:EncryptedData Id=\"ED2\"> <enc:EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#kw-aes128\"/> <ds:KeyInfo> <ds:RetrievalMethod URI=\"#EK\" Type=\"http://www.w3.org/2001/04/xmlenc#EncryptedKey\"/> </ds:KeyInfo> <enc:CipherData> <enc:CipherReference URI=\"EPUB/images/cover.png\"/> </enc:CipherData> </enc:EncryptedData> </encryption>\n\nThe contents of the EPUB/As_You_Like_It.opf file\n\n<package version=\"3.0\" xml:lang=\"en\" xmlns=\"http://www.idpf.org/2007/opf\" unique-identifier=\"pub-id\"> <metadata xmlns:dc=\"http://purl.org/dc/elements/1.1/\"> <dc:identifier id=\"pub-id\"> urn:uuid:B9B412F2-CAAD-4A44-B91F-A375068478A0 </dc:identifier> <dc:language> en </dc:language> <dc:title> As You Like It </dc:title> <dc:creator id=\"creator\"> William Shakespeare </dc:creator> <meta property=\"dcterms:modified\"> 2000-03-24T00:00:00Z </meta> <dc:publisher> Project Gutenberg </dc:publisher> <dc:date> 2000-03-24 </dc:date> <meta property=\"dcterms:dateCopyrighted\"> 9999-01-01 </meta> <dc:identifier id=\"isbn13\"> urn:isbn:9780741014559 </dc:identifier> <dc:identifier id=\"isbn10\"> 0-7410-1455-6 </dc:identifier> <link rel=\"xml-signature\" href=\"../META-INF/signatures.xml#AsYouLikeItSignature\"/> </metadata> <manifest> <item id=\"r4915\" href=\"book.html\" media-type=\"application/xhtml+xml\"/> <item id=\"r7184\" href=\"images/cover.png\" media-type=\"image/png\"/> <item id=\"nav\" href=\"nav.html\" media-type=\"application/xhtml+xml\" properties=\"nav\"/> </manifest> <spine> <itemref idref=\"r4915\"/> </spine> </package>"
    }
}