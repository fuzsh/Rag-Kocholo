{
    "id": "dbpedia_2370_2",
    "rank": 52,
    "data": {
        "url": "https://imagekit.io/blog/how-to-upload-files-in-html/",
        "read_more_link": "",
        "language": "en",
        "title": "How to upload files in HTML?",
        "top_image": "https://imagekit.io/blog/content/images/2024/02/How-to-upload-files-in-html.jpeg",
        "meta_img": "https://imagekit.io/blog/content/images/2024/02/How-to-upload-files-in-html.jpeg",
        "images": [
            "https://imagekit.io/blog/content/images/2019/12/imagekit_logo_white_ByShl3Gem-1.png",
            "https://imagekit.io/blog/content/images/size/w100/2019/12/linkedin_3-100x100-2.jpg",
            "https://imagekit.io/blog/content/images/size/w100/2019/12/linkedin_3-100x100-2.jpg",
            "https://ik.imagekit.io/demo/img/share-this-assets/twitter_NVlWn-SXm7.svg",
            "https://ik.imagekit.io/demo/img/share-this-assets/facebook_HNS46FETl.svg",
            "https://ik.imagekit.io/demo/img/share-this-assets/linkedin_2D5N9CsgHm.svg",
            "https://ik.imagekit.io/demo/img/share-this-assets/reddit_lyB-FSIeLD.svg",
            "https://imagekit.io/blog/content/images/2024/02/image-14.png",
            "https://imagekit.io/blog/content/images/2024/02/image-17.png",
            "https://imagekit.io/blog/content/images/2024/02/image-15.png",
            "https://imagekit.io/blog/content/images/2024/02/image-13.png",
            "https://imagekit.io/blog/content/images/size/w300/2024/02/Brand-Recall_PGinGh0DFT.jpg 300w,                    /blog/content/images/size/w600/2024/02/Brand-Recall_PGinGh0DFT.jpg 600w,                    /blog/content/images/size/w700/2024/02/Brand-Recall_PGinGh0DFT.jpg 700w,                    /blog/content/images/size/w1000/2024/02/Brand-Recall_PGinGh0DFT.jpg 1000w,                    /blog/content/images/size/w2000/2024/02/Brand-Recall_PGinGh0DFT.jpg 2000w",
            "https://imagekit.io/blog/content/images/size/w100/2023/12/590c9934-a89a-45b9-8030-d795a7cc56b1-1.JPG",
            "https://imagekit.io/blog/content/images/size/w300/2024/02/Artboard-1-copy@1.5x-100--22-.jpg 300w,                    /blog/content/images/size/w600/2024/02/Artboard-1-copy@1.5x-100--22-.jpg 600w,                    /blog/content/images/size/w700/2024/02/Artboard-1-copy@1.5x-100--22-.jpg 700w,                    /blog/content/images/size/w1000/2024/02/Artboard-1-copy@1.5x-100--22-.jpg 1000w,                    /blog/content/images/size/w2000/2024/02/Artboard-1-copy@1.5x-100--22-.jpg 2000w",
            "https://imagekit.io/blog/content/images/size/w100/2023/12/590c9934-a89a-45b9-8030-d795a7cc56b1-1.JPG"
        ],
        "movies": [
            "https://codepen.io/Manu-Chaudhary-the-encoder/embed/xxBeNgj?default-tab=result",
            "https://codepen.io/Manu-Chaudhary-the-encoder/embed/vYPMqON?default-tab=result",
            "https://codepen.io/Manu-Chaudhary-the-encoder/embed/qBvwzVE?default-tab=result"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Manu Chaudhary"
        ],
        "publish_date": "2024-02-21T11:08:07+00:00",
        "summary": "",
        "meta_description": "Learn how to upload images, videos, and other files in HTML.",
        "meta_lang": "en",
        "meta_favicon": "/blog/favicon.png",
        "meta_site_name": "ImageKit.io Blog",
        "canonical_link": "https://imagekit.io/blog/how-to-upload-files-in-html/",
        "text": "Uploading files is a common task in web development. Whether it's images, documents, or multimedia files, adding file upload functionality to your web application is essential for enhancing user interaction and overall utility.\n\nWe'll start with the basics of the file input element in HTML and progress to more advanced concepts like custom validations, file type limitations, capturing from the camera, and generating previews of selected files.\n\nFile Input Element\n\nThe foundation of file uploading in HTML lies in the <input type=\"file\"> element. This simple yet powerful element creates a button on your webpage, enabling users to securely select files from their device's storage. It serves as the entry point for users to upload images, documents, or any other file type your application requires.\n\nHere's a basic example of how it appears in HTML:\n\nThis code snippet generates a file selection button. When a user clicks the file selection button, their operating system's file picker is invoked, allowing them to choose the file they wish to upload.\n\nSee it in action:\n\nYou can select any file but that's it, upload is not working at this point.\n\nOnce chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API.\n\n<form method=\"post\" enctype=\"multipart/form-data\" action=\"https://imagekit.io/does-not-exists\"> <input type=\"file\" name=\"file\"> <button>Upload</button> </form>\n\nUsing above snippet, if you select a file and click Upload, browser will issue a POST request on https://imagekit.io/does-not-exists and you will see below page.\n\nBut if you do the same with DevTool open, we can see the multi-part form data. Chrome doesn't show the actual binary content. Just this.\n\nIf you click \"view source\", you will see:\n\nhttps://imagekit.io/does-not-exists is not handling the POST request correctly, but you can see how the browser is sending the current request.\n\nLet's talk about various attributes of input.\n\nLimiting accepted file types\n\nTo restrict the types of files users can select, use the accept attribute. This will streamline the file selection process for users, making it easier and more intuitive for users to select the correct file type.\n\nFor example, to allow only images:\n\n<input type=\"file\" name=\"file\" accept=\"image/*\">\n\nClick \"Choose file\" and try to select files.\n\nNotice how only image-type files are selectable, and the rest are disabled.\n\nIn this example, the accept=\"image/*\" attribute limits the file picker to all image file types. This means file formats like JPEG, PNG, GIF, and others will be selectable, while non-image files will be filtered out.\n\nYou can specify multiple types:\n\n<input type=\"file\" name=\"file\" accept=\".pdf, .docx, .xlsx\">\n\nIt's important to note that the accept attribute is a guideline for the file picker and relies on file MIME types. Users can still manually choose to display all file types and select files that don't match the specified criteria. Therefore, while the accept attribute improves user experience and adds a basic filter, it should not be the sole line of defense. Always pair it with robust server-side validation to ensure that the uploaded files are indeed the types that your application expects and can safely handle.\n\nButton customization\n\nWhile the default file input button is functional, it's often not very appealing and may not align with the design aesthetics of your application. To create a more visually appealing and consistent user interface, you can hide the default file input and use a custom-styled label as a proxy button for file selection.\n\nHere's how you can achieve this:\n\nFirst, you set the file input's opacity style to 0, effectively hiding it from the user interface:\n\n<input type=\"file\" id=\"file\" style=\"opacity: 0;\">\n\nNext, you create a label element and associate it with the file input using the for attribute, which should match the id of the input element. You can then style this label as you would any button.\n\n<label for=\"file\" class=\"button\" style=\"background: #0450d5; color: white; line-height: 1.2; padding: 15px; border-radius: 4px; cursor: pointer;\"> + Upload File </label>\n\nHere, clicking the label styled as a button will open the file selection dialog.\n\n+ Upload File\n\nUsing opacity to hide the file input is a more accessible approach compared to using visibility: hidden or display: none. This method ensures that the file input remains functional and interactive, especially for users relying on assistive technologies such as screen readers.\n\nAlong with opacity:0, you can also use position: absolute; z-index: -1; to remove native input element from the normal flow of the document and prevent it from taking up space or blocking other elements, while still keeping it functional.\n\nCapture from camera\n\nThe HTML5 capture attribute is a powerful feature that enhances the file input element for mobile users. It allows you to directly access the camera or other media capture devices on a user's phone.\n\nThis is particularly useful in applications where users need to upload images or videos taken at that moment, like in social media posts, profile picture updates, or document uploads in verification processes.\n\n<input type=\"file\" accept=\"image/*\" capture=\"camera\">\n\nTry on your mobile phone:\n\nGetting information on selected files\n\nWhen a file is selected, you can retrieve its information using JavaScript. This is useful for validation, displaying file names, sizes, or types:\n\n<input type=\"file\" id=\"fileInput\"> <div id=\"fileInfo\"></div> <script> document.getElementById('fileInput').addEventListener('change', function(event) { var file = event.target.files[0]; var fileInfo = ` <p>File Name: ${file.name}</p> <p>File Size: ${file.size} bytes</p> <p>File Type: ${file.type}</p> `; document.getElementById('fileInfo').innerHTML = fileInfo; }); </script>\n\nSee this in action:\n\nSee the Pen Getting Information on Selected Files by Manu Chaudhary (@Manu-Chaudhary-the-encoder) on CodePen.\n\nWhen a user selects files through the HTML <input type=\"file\"> element, these files are accessible via the HTMLInputElement.files property. This property is a FileList object, essentially a collection of File objects. The FileList can be treated similarly to an array, allowing you to use its length property to determine the number of files selected by the user.\n\nEach File object within this list provides several pieces of information about the file:\n\nname: This is a string representing the name of the file.\n\nlastModified: This property returns a long integer, indicating the time the file was last modified, measured in milliseconds since the UNIX epoch (00:00:00 UTC on January 1, 1970).\n\nsize: It provides the size of the file in bytes, useful for validating file size before uploading.\n\ntype: This is a string indicating the MIME type of the file, which can be used to validate the file format.\n\nCreating image preview of selected files\n\nTo provide a more interactive and user-friendly experience, displaying previews of selected image files can be a great addition to your web application.\n\nFor this we will use URL: createObjectURL() method.\n\nURL.createObjectURL(object)\n\nobject can be a File, Blob, or MediaSource object to create an object URL for.\n\nWe already have File on change event.\n\nSo our code looks like:\n\nSee this in action:\n\nSee the Pen Creating image preview by Manu Chaudhary (@Manu-Chaudhary-the-encoder) on CodePen.\n\nCustom validation on file selection\n\nSometimes, you may need custom validations like limiting file size. This can be done using JavaScript by using size property on File object.\n\nSuppose you want to allow users to upload multiple files and show list of files which exceeds 1MB size.\n\nThe example looks like this:\n\nSee the Pen Custom Validation on File Selection by Manu Chaudhary (@Manu-Chaudhary-the-encoder) on CodePen.\n\nConclusion\n\nHandling file uploads in HTML is straightforward but offers plenty of scope for customization and advanced functionality. Whether customizing the file input button, validating file size, or creating image previews, these techniques form the foundation of a modern file upload functionality in your web applications. Always consider the security aspects when handling file uploads to protect your server and users."
    }
}