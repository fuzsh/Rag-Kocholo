{
    "id": "dbpedia_7489_3",
    "rank": 89,
    "data": {
        "url": "https://github.com/nvim-treesitter/nvim-treesitter",
        "read_more_link": "",
        "language": "en",
        "title": "treesitter: Nvim Treesitter configurations and abstraction layer",
        "top_image": "https://opengraph.githubassets.com/5a4a9d244bdb462ec183bdd1960fc74f48c3fc234ac4472913fcf9fea97b16c3/nvim-treesitter/nvim-treesitter",
        "meta_img": "https://opengraph.githubassets.com/5a4a9d244bdb462ec183bdd1960fc74f48c3fc234ac4472913fcf9fea97b16c3/nvim-treesitter/nvim-treesitter",
        "images": [
            "https://camo.githubusercontent.com/954e3fc1a9172d1c08e4e307b5361d27a5a48d45818951fffab09bdc86fa13e9/68747470733a2f2f696d672e736869656c64732e696f2f6d61747269782f6e76696d2d747265657369747465723a6d61747269782e6f7267",
            "https://github.com/nvim-treesitter/nvim-treesitter/workflows/Linting%20and%20style%20checking/badge.svg",
            "https://github.com/nvim-treesitter/nvim-treesitter/workflows/Check%20loading%20of%20syntax%20files/badge.svg",
            "https://github.com/nvim-treesitter/nvim-treesitter/raw/master/assets/logo.png",
            "https://user-images.githubusercontent.com/2361214/202753610-e923bf4e-e88f-494b-bb1e-d22a7688446f.png",
            "https://github.githubassets.com/assets/open_collective-0a706523753d.svg",
            "https://avatars.githubusercontent.com/u/19864447?s=64&v=4",
            "https://avatars.githubusercontent.com/u/7189118?s=64&v=4",
            "https://avatars.githubusercontent.com/u/29718261?s=64&v=4",
            "https://avatars.githubusercontent.com/in/809198?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2361214?s=64&v=4",
            "https://avatars.githubusercontent.com/u/39092278?s=64&v=4",
            "https://avatars.githubusercontent.com/u/24971970?s=64&v=4",
            "https://avatars.githubusercontent.com/u/4975310?s=64&v=4",
            "https://avatars.githubusercontent.com/u/23156099?s=64&v=4",
            "https://avatars.githubusercontent.com/in/15368?s=64&v=4",
            "https://avatars.githubusercontent.com/u/29790821?s=64&v=4",
            "https://avatars.githubusercontent.com/u/55766287?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2062154?s=64&v=4",
            "https://avatars.githubusercontent.com/u/8091245?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "nvim-treesitter"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Nvim Treesitter configurations and abstraction layer - nvim-treesitter/nvim-treesitter",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/nvim-treesitter/nvim-treesitter",
        "text": "The goal of nvim-treesitter is both to provide a simple and easy way to use the interface for tree-sitter in Neovim and to provide some basic functionality such as highlighting based on it:\n\nTraditional highlighting (left) vs Treesitter-based highlighting (right). More examples can be found in our gallery.\n\nWarning: Treesitter and nvim-treesitter highlighting are an experimental feature of Neovim. Please consider the experience with this plug-in as experimental until Tree-Sitter support in Neovim is stable! We recommend using the nightly builds of Neovim if possible. You can find the current roadmap here. The roadmap and all features of this plugin are open to change, and any suggestion will be highly appreciated!\n\nNvim-treesitter is based on three interlocking features: language parsers, queries, and modules, where modules provide features – e.g., highlighting – based on queries for syntax objects extracted from a given buffer by language parsers. Users will generally only need to interact with parsers and modules as explained in the next section. For more detailed information on setting these up, see \"Advanced setup\".\n\nQuickstart\n\nSupported languages\n\nAvailable modules\n\nAdvanced setup\n\nExtra features\n\nTroubleshooting\n\nNeovim 0.9.2 or later (nightly recommended)\n\ntar and curl in your path (or alternatively git)\n\nA C compiler in your path and libstdc++ installed (Windows users please read this!).\n\nYou can install nvim-treesitter with your favorite package manager (or using the native package feature of vim, see :h packages).\n\nNOTE: This plugin is only guaranteed to work with specific versions of language parsers (as specified in the lockfile.json). When upgrading the plugin, you must make sure that all installed parsers are updated to the latest version via :TSUpdate. It is strongly recommended to automate this; e.g., if you are using vim-plug, put this in your init.vim file:\n\nFor other plugin managers such as packer.nvim, see this Installation page from the wiki (Note that this page is community maintained).\n\nTreesitter uses a different parser for every language, which needs to be generated via tree-sitter-cli from a grammar.js file, then compiled to a .so library that needs to be placed in neovim's runtimepath (typically under parser/{language}.so). To simplify this, nvim-treesitter provides commands to automate this process. If the language is already supported by nvim-treesitter, you can install it with\n\nThis command supports tab expansion. You can also get a list of all available languages and their installation status with :TSInstallInfo. Parsers not on this list can be added manually by following the steps described under \"Adding parsers\" below.\n\nTo make sure a parser is at the latest compatible version (as specified in nvim-treesitter's lockfile.json), use :TSUpdate {language}. To update all parsers unconditionally, use :TSUpdate all or just :TSUpdate.\n\nEach module provides a distinct tree-sitter-based feature such as highlighting, indentation, or folding; see :h nvim-treesitter-modules or \"Available modules\" below for a list of modules and their options.\n\nFollowing examples assume that you are configuring neovim with lua. If you are using vimscript, see :h lua-heredoc. All modules are disabled by default and need to be activated explicitly in your init.lua, e.g., via\n\nEach module can also be enabled or disabled interactively through the following commands:\n\nCheck :h nvim-treesitter-commands for a list of all available commands. It may be necessary to reload the buffer (e.g., via :e) after enabling a module interactively.\n\nFor nvim-treesitter to support a specific feature for a specific language requires both a parser for that language and an appropriate language-specific query file for that feature.\n\nThe following is a list of languages for which a parser can be installed through :TSInstall; a checked box means that nvim-treesitter also contains queries at least for the highlight module.\n\nExperimental parsers are parsers that have a maintainer but are not stable enough for daily use yet.\n\nWe are looking for maintainers to add more parsers and to write query files for their languages. Check our tracking issue for open language requests.\n\nada (maintained by @briot)\n\nagda (maintained by @Decodetalkers)\n\nangular (experimental, maintained by @dlvandenberg)\n\napex (maintained by @aheber, @xixiaofinland)\n\narduino (maintained by @ObserverOfTime)\n\nasm (maintained by @RubixDev)\n\nastro (maintained by @virchau13)\n\nauthzed (maintained by @mattpolzin)\n\nawk\n\nbash (maintained by @TravonteD)\n\nbass (maintained by @amaanq)\n\nbeancount (maintained by @polarmutex)\n\nbibtex (maintained by @theHamsta, @clason)\n\nbicep (maintained by @amaanq)\n\nbitbake (maintained by @amaanq)\n\nblueprint (experimental, maintained by @gabmus)\n\nbp (maintained by @ambroisie)\n\nc (maintained by @amaanq)\n\nc_sharp (maintained by @amaanq)\n\ncairo (maintained by @amaanq)\n\ncapnp (maintained by @amaanq)\n\nchatito (maintained by @ObserverOfTime)\n\nclojure (maintained by @NoahTheDuke)\n\ncmake (maintained by @uyha)\n\ncomment (maintained by @stsewd)\n\ncommonlisp (maintained by @theHamsta)\n\ncooklang (maintained by @addcninblue)\n\ncorn (maintained by @jakestanger)\n\ncpon (maintained by @amaanq)\n\ncpp (maintained by @theHamsta)\n\ncss (maintained by @TravonteD)\n\ncsv (maintained by @amaanq)\n\ncuda (maintained by @theHamsta)\n\ncue (maintained by @amaanq)\n\nd (maintained by @amaanq)\n\ndart (maintained by @akinsho)\n\ndevicetree (maintained by @jedrzejboczar)\n\ndhall (maintained by @amaanq)\n\ndiff (maintained by @gbprod)\n\ndisassembly (maintained by @ColinKennedy)\n\ndjot (maintained by @NoahTheDuke)\n\ndockerfile (maintained by @camdencheek)\n\ndot (maintained by @rydesun)\n\ndoxygen (maintained by @amaanq)\n\ndtd (maintained by @ObserverOfTime)\n\nearthfile (maintained by @glehmann)\n\nebnf (experimental, maintained by @RubixDev)\n\neditorconfig (maintained by @ValdezFOmar)\n\neds (maintained by @uyha)\n\neex (maintained by @connorlay)\n\nelixir (maintained by @connorlay)\n\nelm (maintained by @zweimach)\n\nelsa (maintained by @glapa-grossklag, @amaanq)\n\nelvish (maintained by @elves)\n\nembedded_template\n\nerlang (maintained by @filmor)\n\nfacility (maintained by @bryankenote)\n\nfaust (maintained by @khiner)\n\nfennel (maintained by @alexmozaidze)\n\nfidl (maintained by @chaopeng)\n\nfirrtl (maintained by @amaanq)\n\nfish (maintained by @ram02z)\n\nfoam (experimental, maintained by @FoamScience)\n\nforth (maintained by @amaanq)\n\nfortran (maintained by @amaanq)\n\nfsh (maintained by @mgramigna)\n\nfunc (maintained by @amaanq)\n\nfusion (maintained by @jirgn)\n\nGodot (gdscript) (maintained by @PrestonKnopp)\n\ngdshader (maintained by @godofavacyn)\n\ngit_config (maintained by @amaanq)\n\ngit_rebase (maintained by @gbprod)\n\ngitattributes (maintained by @ObserverOfTime)\n\ngitcommit (maintained by @gbprod)\n\ngitignore (maintained by @theHamsta)\n\ngleam (maintained by @amaanq)\n\nGlimmer and Ember (maintained by @NullVoxPopuli)\n\nglsl (maintained by @theHamsta)\n\nGN (Generate Ninja) (maintained by @amaanq)\n\ngnuplot (maintained by @dpezto)\n\ngo (maintained by @theHamsta, @WinWisely268)\n\ngoctl (maintained by @chaozwn)\n\nGodot Resources (gdresource) (maintained by @pierpo)\n\ngomod (maintained by @camdencheek)\n\ngosum (maintained by @amaanq)\n\ngotmpl (maintained by @qvalentin)\n\ngowork (maintained by @omertuc)\n\ngpg (maintained by @ObserverOfTime)\n\ngraphql (maintained by @bkegley)\n\ngroovy (maintained by @murtaza64)\n\ngstlaunch (maintained by @theHamsta)\n\nhack\n\nhare (maintained by @amaanq)\n\nhaskell (maintained by @mrcjkb)\n\nhaskell_persistent (maintained by @lykahb)\n\nhcl (maintained by @MichaHoffmann)\n\nheex (maintained by @connorlay)\n\nhelm (maintained by @qvalentin)\n\nhjson (maintained by @winston0410)\n\nhlsl (maintained by @theHamsta)\n\nhlsplaylist (maintained by @Freed-Wu)\n\nhocon (maintained by @antosha417)\n\nhoon (experimental, maintained by @urbit-pilled)\n\nhtml (maintained by @TravonteD)\n\nhtmldjango (experimental, maintained by @ObserverOfTime)\n\nhttp (maintained by @amaanq, @NTBBloodbath)\n\nhurl (maintained by @pfeiferj)\n\nhyprlang (maintained by @luckasRanarison)\n\nidl (maintained by @cathaysia)\n\nini (experimental, maintained by @theHamsta)\n\ninko (maintained by @yorickpeterse)\n\nispc (maintained by @fab4100)\n\njanet_simple (maintained by @sogaiu)\n\njava (maintained by @p00f)\n\njavascript (maintained by @steelsojka)\n\njq (maintained by @ObserverOfTime)\n\njsdoc (maintained by @steelsojka)\n\njson (maintained by @steelsojka)\n\njson5 (maintained by @Joakker)\n\nJSON with comments (maintained by @WhyNotHugo)\n\njsonnet (maintained by @nawordar)\n\njulia (maintained by @theHamsta)\n\njust (maintained by @Hubro)\n\nkconfig (maintained by @amaanq)\n\nkdl (maintained by @amaanq)\n\nkotlin (maintained by @SalBakraa)\n\nkoto (maintained by @irh)\n\nkusto (maintained by @Willem-J-an)\n\nlalrpop (maintained by @traxys)\n\nlatex (maintained by @theHamsta, @clason)\n\nledger (maintained by @cbarrete)\n\nleo (maintained by @r001)\n\nlinkerscript (maintained by @amaanq)\n\nliquid (maintained by @hankthetank27)\n\nliquidsoap (maintained by @toots)\n\nllvm (maintained by @benwilliamgraham)\n\nlua (maintained by @muniftanjim)\n\nluadoc (maintained by @amaanq)\n\nlua patterns (maintained by @amaanq)\n\nluau (maintained by @amaanq)\n\nm68k (maintained by @grahambates)\n\nmake (maintained by @lewis6991)\n\nmarkdown (basic highlighting) (experimental, maintained by @MDeiml)\n\nmarkdown_inline (needed for full highlighting) (experimental, maintained by @MDeiml)\n\nmatlab (maintained by @acristoffers)\n\nmenhir (maintained by @Kerl13)\n\nmermaid (experimental)\n\nmeson (maintained by @Decodetalkers)\n\nmlir (experimental, maintained by @artagnon)\n\nmuttrc (maintained by @Freed-Wu)\n\nnasm (maintained by @ObserverOfTime)\n\nnginx (maintained by @opa-oz)\n\nnickel\n\nnim (maintained by @aMOPel)\n\nnim_format_string (maintained by @aMOPel)\n\nninja (maintained by @alemuller)\n\nnix (maintained by @leo60228)\n\nnorg (maintained by @JoeyGrajciar, @vhyrro)\n\nnqc (maintained by @amaanq)\n\nobjc (maintained by @amaanq)\n\nobjdump (maintained by @ColinKennedy)\n\nocaml (maintained by @undu)\n\nocaml_interface (maintained by @undu)\n\nocamllex (maintained by @undu)\n\nodin (maintained by @amaanq)\n\norg\n\npascal (maintained by @Isopod)\n\npasswd (maintained by @amaanq)\n\npem (maintained by @ObserverOfTime)\n\nperl (maintained by @RabbiVeesh, @LeoNerd)\n\nphp (maintained by @tk-shirasaka, @calebdw)\n\nphp_only (maintained by @tk-shirasaka, @calebdw)\n\nphpdoc (experimental, maintained by @mikehaertl)\n\npioasm (maintained by @leo60228)\n\npo (maintained by @amaanq)\n\npod (maintained by @RabbiVeesh, @LeoNerd)\n\nPath of Exile item filter (experimental, maintained by @ObserverOfTime)\n\npony (maintained by @amaanq, @mfelsche)\n\npowershell (maintained by @L2jLiga)\n\nprintf (maintained by @ObserverOfTime)\n\nprisma (maintained by @elianiva)\n\nproblog (maintained by @foxyseta)\n\nprolog (maintained by @foxyseta)\n\npromql (maintained by @MichaHoffmann)\n\nproperties (maintained by @ObserverOfTime)\n\nproto (maintained by @treywood)\n\nprql (maintained by @matthias-Q)\n\npsv (maintained by @amaanq)\n\npug (experimental, maintained by @zealot128)\n\npuppet (maintained by @amaanq)\n\npurescript (maintained by @postsolar)\n\nPyPA manifest (maintained by @ObserverOfTime)\n\npython (maintained by @stsewd, @theHamsta)\n\nql (maintained by @pwntester)\n\nqmldir (maintained by @amaanq)\n\nqmljs (maintained by @Decodetalkers)\n\nTree-Sitter query language (maintained by @steelsojka)\n\nr (maintained by @ribru17)\n\nracket\n\nralph (maintained by @tdroxler)\n\nrasi (maintained by @Fymyte)\n\nrbs (maintained by @joker1007)\n\nre2c (maintained by @amaanq)\n\nreadline (maintained by @ribru17)\n\nregex (maintained by @theHamsta)\n\nrego (maintained by @FallenAngel97)\n\npip requirements (maintained by @ObserverOfTime)\n\nrescript (maintained by @ribru17)\n\nrnoweb (maintained by @bamonroe)\n\nrobot (maintained by @Hubro)\n\nrobots (maintained by @opa-oz)\n\nroc (maintained by @nat-418)\n\nron (maintained by @amaanq)\n\nrst (maintained by @stsewd)\n\nruby (maintained by @TravonteD)\n\nrust (maintained by @amaanq)\n\nscala (maintained by @stevanmilic)\n\nscfg (maintained by @WhyNotHugo)\n\nscheme\n\nscss (maintained by @elianiva)\n\nsflog (maintained by @aheber, @xixiaofinland)\n\nslang (experimental, maintained by @theHamsta)\n\nslint (maintained by @hunger)\n\nsmali (maintained by @amaanq)\n\nsmithy (maintained by @amaanq, @keynmol)\n\nsnakemake (experimental)\n\nsolidity (maintained by @amaanq)\n\nsoql (maintained by @aheber, @xixiaofinland)\n\nsosl (maintained by @aheber, @xixiaofinland)\n\nsourcepawn (maintained by @Sarrus1)\n\nsparql (maintained by @GordianDziwis)\n\nsql (maintained by @derekstride)\n\nsquirrel (maintained by @amaanq)\n\nssh_config (maintained by @ObserverOfTime)\n\nstarlark (maintained by @amaanq)\n\nstrace (maintained by @amaanq)\n\nstyled (maintained by @mskelton)\n\nsupercollider (maintained by @madskjeldgaard)\n\nsurface (maintained by @connorlay)\n\nsvelte (maintained by @amaanq)\n\nswift (maintained by @alex-pinkus)\n\nsxhkdrc (maintained by @RaafatTurki)\n\nsystemtap (maintained by @ok-ryoko)\n\nsystemverilog (maintained by @zhangwwpeng)\n\nt32 (maintained by @xasc)\n\ntablegen (maintained by @amaanq)\n\ntact (maintained by @novusnota)\n\ntcl (maintained by @lewis6991)\n\nteal (maintained by @euclidianAce)\n\ntempl (maintained by @vrischmann)\n\nterraform (maintained by @MichaHoffmann)\n\ntextproto (maintained by @Porter)\n\nthrift (maintained by @amaanq, @duskmoon314)\n\ntiger (maintained by @ambroisie)\n\ntlaplus (maintained by @ahelwer, @susliko)\n\ntmux (maintained by @Freed-Wu)\n\ntodotxt (experimental, maintained by @arnarg)\n\ntoml (maintained by @tk-shirasaka)\n\ntsv (maintained by @amaanq)\n\ntsx (maintained by @steelsojka)\n\nturtle (maintained by @GordianDziwis)\n\ntwig (maintained by @gbprod)\n\ntypescript (maintained by @steelsojka)\n\ntypespec (maintained by @happenslol)\n\ntyposcript (maintained by @Teddytrombone)\n\ntypst (maintained by @uben0, @RaafatTurki)\n\nudev (maintained by @ObserverOfTime)\n\nungrammar (maintained by @Philipp-M, @amaanq)\n\nunison (maintained by @tapegram)\n\nusd (maintained by @ColinKennedy)\n\nuxn tal (maintained by @amaanq)\n\nv (maintained by @kkharji, @amaanq)\n\nvala (maintained by @Prince781)\n\nvento (maintained by @wrapperup, @oscarotero)\n\nverilog (maintained by @zegervdv)\n\nvhdl (maintained by @jpt13653903)\n\nvhs (maintained by @caarlos0)\n\nvim (maintained by @clason)\n\nvimdoc (maintained by @clason)\n\nvrl (maintained by @belltoy)\n\nvue (maintained by @WhyNotHugo, @lucario387)\n\nwgsl (maintained by @szebniok)\n\nwgsl_bevy (maintained by @theHamsta)\n\nwing (maintained by @gshpychka, @MarkMcCulloh)\n\nwit (maintained by @liamwh)\n\nxcompose (maintained by @ObserverOfTime)\n\nxml (maintained by @ObserverOfTime)\n\nyaml (maintained by @amaanq)\n\nyang (maintained by @Hubro)\n\nyuck (maintained by @Philipp-M, @amaanq)\n\nzathurarc (maintained by @Freed-Wu)\n\nzig (maintained by @maxxnino)\n\nFor related information on the supported languages, including related plugins, see this wiki page.\n\nModules provide the top-level features of nvim-treesitter. The following is a list of modules included in nvim-treesitter and their configuration via init.lua (where multiple modules can be combined in a single call to setup). Note that not all modules work for all languages (depending on the queries available for them). Additional modules can be provided as external plugins.\n\nConsistent syntax highlighting.\n\nTo customize the syntax highlighting of a capture, simply define or link a highlight group of the same name:\n\nFor a language-specific highlight, append the name of the language:\n\nSee :h treesitter-highlight-groups for details.\n\nIncremental selection based on the named nodes from the grammar.\n\nIndentation based on treesitter for the = operator. NOTE: This is an experimental feature.\n\nTree-sitter based folding (implemented in Neovim itself, see :h vim.treesitter.foldexpr()). To enable it for the current window, set\n\nThis will respect your foldminlines and foldnestmax settings.\n\nIf you want to install the parsers to a custom directory you can specify this directory with parser_install_dir option in that is passed to setup. nvim-treesitter will then install the parser files into this directory.\n\nThis directory must be writeable and must be explicitly prepended to the runtimepath. For example:\n\nIf this option is not included in the setup options, or is explicitly set to nil then the default install directories will be used. If this value is set the default directories will be ignored.\n\nBear in mind that any parser installed into a parser folder on the runtime path will still be considered installed. (For example if \"~/.local/share/nvim/site/parser/c.so\" exists then the \"c\" parser will be considered installed, even though it is not in parser_install_dir)\n\nThe default paths are:\n\nfirst the package folder. Where nvim-treesitter is installed.\n\nsecond the site directory. This is the \"site\" subdirectory of stdpath(\"data\").\n\nIf you have a parser that is not on the list of supported languages (either as a repository on Github or in a local directory), you can add it manually for use by nvim-treesitter as follows:\n\nClone the repository or create a new project in, say, ~/projects/tree-sitter-zimbu. Make sure that the tree-sitter-cli executable is installed and in your path; see https://tree-sitter.github.io/tree-sitter/creating-parsers#installation for installation instructions.\n\nRun tree-sitter generate in this directory (followed by tree-sitter test for good measure).\n\nAdd the following snippet to your init.lua:\n\nIf you wish to set a specific parser for a filetype, you should use vim.treesitter.language.register():\n\nNote this requires Nvim v0.9.\n\nStart nvim and :TSInstall zimbu.\n\nYou can also skip step 2 and use :TSInstallFromGrammar zimbu to install directly from a grammar.js in the top-level directory specified by url. Once the parser is installed, you can update it (from the latest revision of the main branch if url is a Github repository) with :TSUpdate zimbu.\n\nNote that neither :TSInstall nor :TSInstallFromGrammar copy query files from the grammar repository. If you want your installed grammar to be useful, you must manually add query files to your local nvim-treesitter installation. Note also that module functionality is only triggered if your language's filetype is correctly identified. If Neovim does not detect your language's filetype by default, you can use Neovim's vim.filetype.add() to add a custom detection rule.\n\nIf you use a git repository for your parser and want to use a specific version, you can set the revision key in the install_info table for you parser config.\n\nQueries are what nvim-treesitter uses to extract information from the syntax tree; they are located in the queries/{language}/* runtime directories (see :h rtp), like the queries folder of this plugin, e.g. queries/{language}/{locals,highlights,textobjects}.scm. Other modules may require additional queries such as folding.scm. You can find a list of all supported capture names in CONTRIBUTING.md.\n\nThe first query file on runtimepath will be used (see :h treesitter-query). If you want to make a query on the user config extend other queries instead of replacing them, see :h treesitter-query-modeline-extends.\n\nIf you want to completely override a query, you can use :h vim.treesitter.query.set(). For example, to override the injections queries from c with your own:\n\nNote: when using query.set(), all queries in the runtime directories will be ignored.\n\nIf you wish you write your own module, you need to support\n\ntree-sitter language detection support;\n\nattaching and detaching to buffers;\n\nall nvim-treesitter commands.\n\nAt the top level, you can use the define_modules function to define one or more modules or module groups:\n\nwith the following properties:\n\nmodule_path specifies a require path (string) that exports a module with an attach and detach function. This is not required if the functions are on this definition.\n\nenable determines if the module is enabled by default. This is usually overridden by the user.\n\ndisable takes a list of languages that this module is disabled for. This is usually overridden by the user.\n\nis_supported takes a function that takes a language and determines if this module supports that language.\n\nattach takes a function that attaches to a buffer. This is required if module_path is not provided.\n\ndetach takes a function that detaches from a buffer. This is required if module_path is not provided.\n\nYou can get some utility functions with\n\nCheck :h nvim-treesitter-utils for more information.\n\nBefore doing anything, make sure you have the latest version of this plugin and run :checkhealth nvim-treesitter. It can also help to update the parsers via :TSUpdate.\n\nFirst, check the health#nvim_treesitter#check and the health#treesitter#check sections of :checkhealth for any warning. If there is one, it's highly likely that this is the cause of the problem.\n\nNext check the ## Parser/Features subsection of the health#nvim_treesitter#check section of :checkhealth to ensure the desired module is enabled for your language. If not, you might be missing query files; see Adding queries.\n\nFinally, ensure Neovim is correctly identifying your language's filetype using the :echo &filetype command while one of your language's files is open in Neovim. If not, add a short Vimscript file to nvim-treesitter's ftdetect runtime directory following Neovim's documentation on filetype detection. You can also quickly & temporarily set the filetype for a single buffer with the :set filetype=langname command to test whether it fixes the problem.\n\nIf everything is okay, then it might be an actual error. In that case, feel free to open an issue here.\n\nMake sure you have the latest version of Neovim.\n\nThis is probably due to a change in a parser's grammar or its queries. Try updating the parser that you suspect has changed (:TSUpdate {language}) or all of them (:TSUpdate). If the error persists after updating all parsers, please open an issue.\n\nThis could be due a query file outside this plugin using outdated nodes, or due to an outdated parser.\n\nMake sure you have the parsers up to date with :TSUpdate\n\nMake sure you don't have more than one parser runtime directory. You can execute this command :echo nvim_get_runtime_file('parser', v:true) to find all runtime directories. If you get more than one path, remove the ones that are outside this plugin (nvim-treesitter directory), so the correct version of the parser is used.\n\nThis is a well known issue, which arises when the tree and the buffer have gotten out of sync. As this is an upstream issue, we don't have any definite fix. To get around this, you can force reparsing the buffer with\n\nThis will save, restore and enable highlighting for the current buffer.\n\nThis might happen, and is known to happen, with vim-clap. To avoid these kind of errors, please use setlocal instead of set for the respective filetypes.\n\nThis is because of rtp management in nvim, adding packadd nvim-treesitter should fix the issue.\n\nIn your Lua config:\n\nYou can either configure curl to use additional CLI arguments in your Lua config:\n\nor you can configure git via .gitconfig and use git instead of curl\n\nIn your Lua config:\n\nFor example, to use the bash tree-sitter to highlight file with filetype=apkbuild, use:"
    }
}