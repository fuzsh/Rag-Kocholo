{
    "id": "dbpedia_8054_3",
    "rank": 9,
    "data": {
        "url": "http://serpent.vtt.fi/mediawiki/index.php/Input_syntax_manual",
        "read_more_link": "",
        "language": "en",
        "title": "Input syntax manual",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://serpent.vtt.fi/mediawiki/images/3/3d/Hex_lattice_x_index.png",
            "http://serpent.vtt.fi/mediawiki/images/3/37/Hex_lattice_y_index.png",
            "http://serpent.vtt.fi/mediawiki/images/math/f/3/f/f3f51c9bba9801fac95e8b5e239a5585.png",
            "http://serpent.vtt.fi/mediawiki/images/math/a/a/7/aa77439c4b250c3ce17b75f776599c71.png",
            "http://serpent.vtt.fi/mediawiki/images/math/f/3/f/f3f51c9bba9801fac95e8b5e239a5585.png",
            "http://serpent.vtt.fi/mediawiki/images/math/7/b/8/7b8b965ad4bca0e41ab51de7b31363a1.png",
            "http://serpent.vtt.fi/mediawiki/images/math/1/9/9/19906cdb1fb7b5a82f3f6d35716c73b5.png",
            "http://serpent.vtt.fi/mediawiki/images/math/9/d/e/9ded7825070b255e7bc092cdc2c8e98a.png",
            "http://serpent.vtt.fi/mediawiki/images/math/b/8/4/b8449f75f5233e2c215d1d79b6326152.png",
            "http://serpent.vtt.fi/mediawiki/images/math/2/9/1/29162588fb444b04dd161aac50491931.png",
            "http://serpent.vtt.fi/mediawiki/images/math/1/5/2/1526be14a8edd963de3b055e19b38014.png",
            "http://serpent.vtt.fi/mediawiki/images/0/0c/Rect_lattice_index.png",
            "http://serpent.vtt.fi/mediawiki/images/3/3d/Hex_lattice_x_index.png",
            "http://serpent.vtt.fi/mediawiki/images/3/37/Hex_lattice_y_index.png",
            "http://serpent.vtt.fi/mediawiki/images/math/d/5/a/d5aeae65d7d139b7960e6dcb40f5855b.png",
            "http://serpent.vtt.fi/mediawiki/images/math/d/7/8/d788f33de7bfb000afa9ed318e22c47e.png",
            "http://serpent.vtt.fi/mediawiki/images/math/6/5/a/65a72afc476fcbe0a55314fcff1a640d.png",
            "http://serpent.vtt.fi/mediawiki/images/math/8/9/5/895513d3f2c7527abb9ee7688889bfab.png",
            "http://serpent.vtt.fi/mediawiki/images/math/c/b/1/cb17eeba3506e0fb716e734635913611.png",
            "http://serpent.vtt.fi/mediawiki/images/math/2/6/a/26a71e24a3946d25fbde5953f9983bcd.png",
            "http://serpent.vtt.fi/mediawiki/images/math/f/d/6/fd6a5deaa41353934eae06cb217a5091.png",
            "http://serpent.vtt.fi/mediawiki/images/math/3/0/8/308af8dd8ff7d4b93877e0430ce6af95.png",
            "http://serpent.vtt.fi/mediawiki/images/math/2/9/4/29417108adf944ac7dd0b94b1db8c594.png",
            "http://serpent.vtt.fi/mediawiki/images/math/0/1/e/01e95b578338ebea280a53d956f60eb7.png",
            "http://serpent.vtt.fi/mediawiki/images/math/9/1/5/915bbc110a1c89ae51e1e58e0fd91ba3.png",
            "http://serpent.vtt.fi/mediawiki/images/math/5/5/6/556cc5704258097cc26d4a7fd41f99e7.png",
            "http://serpent.vtt.fi/mediawiki/images/math/0/7/0/070f55d85c0b4e07a5e9bd7eafd7d88b.png",
            "http://serpent.vtt.fi/mediawiki/images/math/f/d/b/fdb06cf2a399b265d4622112378c02be.png",
            "http://serpent.vtt.fi/mediawiki/images/math/c/c/5/cc5e423b3c6dc0628f7ff77628be178b.png",
            "http://serpent.vtt.fi/mediawiki/images/math/9/2/5/92555f9439ef4a54fcd65bd62f44f4ee.png",
            "http://serpent.vtt.fi/mediawiki/images/math/3/2/8/32812cc65fc119458fbd930852c545a3.png",
            "http://serpent.vtt.fi/mediawiki/images/math/9/2/9/929b823e4c37e2e01fc387f4a06408c2.png",
            "http://serpent.vtt.fi/mediawiki/images/math/d/8/0/d803c7ef1a0bc19b4de3e3823d354377.png",
            "http://serpent.vtt.fi/mediawiki/images/math/1/4/c/14c10549324a7e1b9ccacd4ac29b9ac2.png",
            "http://serpent.vtt.fi/mediawiki/images/math/9/2/9/929b823e4c37e2e01fc387f4a06408c2.png",
            "http://serpent.vtt.fi/mediawiki/images/math/d/8/0/d803c7ef1a0bc19b4de3e3823d354377.png",
            "http://serpent.vtt.fi/mediawiki/images/math/1/4/c/14c10549324a7e1b9ccacd4ac29b9ac2.png",
            "http://serpent.vtt.fi/mediawiki/images/math/7/d/9/7d977e0d1e5aabb17d709193362d85f0.png",
            "http://serpent.vtt.fi/mediawiki/images/math/d/a/e/dae980163c3a95fe7565e7476be85012.png",
            "http://serpent.vtt.fi/mediawiki/images/math/6/d/9/6d9cd7aafc5c96dd2e33ac44341ec69f.png",
            "http://serpent.vtt.fi/mediawiki/images/math/8/f/a/8fa14cdd754f91cc6554c9e71929cce7.png",
            "http://serpent.vtt.fi/mediawiki/images/math/4/b/4/4b43b0aee35624cd95b910189b3dc231.png",
            "http://serpent.vtt.fi/mediawiki/resources/assets/poweredby_mediawiki_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Serpent has no interactive user interface. All communication between the code and the user is handled through one or several input files and various output files.\n\nThe format of the input file is unrestricted. The file consists of white-space (space, tab or newline) separated words, containing alphanumeric characters(’a-z’, ’A-Z’, ’0-9’, ’.’, ’-’). If special characters or white spaces need to be used within the word (file names, etc.), the entire string must be enclosed within quotes.\n\nThe input file is divided into separate data blocks, denoted as cards. The file is processed one card at a time and there are no restrictions regarding the order in which the cards should be organized. The input cards are listed below. Additional options are followed by key word \"set\". All input cards and options are case-insensitive (note to developers: make it so). Each input card is delimited by the beginning of the next card. It is hence important that none of the parameter strings used within the card coincide with the card identifiers.\n\nThe percent-sign ('%') is used to define a comment line. Anything from this character to the end of the line is omitted when the input file is read. Unlike Serpent 1, hashtag ('#') can no longer be used to mark comment lines in Serpent 2 input. The alternative is to use C-style comment sections beginning with \"/*\" and ending with \"*/\". Everything between these delimiters is omitted, regardless of the number of newlines or special characters.\n\nThis page will contain the whole input syntax of Serpent 2, with links to more detailed descriptions where needed. For reference see also the Serpent 1 input manual[1].\n\nInput cards\n\nNOTE: Serpent command words are in boldface and input parameters entered by the user in CAPITAL ITALIC. Optional input parameters are enclosed in [ square brackets ], and when the number of values is not fixed, the remaining values are marked with three dots (...).\n\nbranch (branch definition)\n\nbranch NAME [ repm MAT1 MAT2 ] [ repu UNI1 UNI2 ] [ stp MAT DENS TEMP THERM1 SABL1 SABH1 THERM2 SABL2 SABH2 ... ] [ tra TGT TRANS ] [ xenon OPT ] [ samarium OPT ] [ norm NSF ] [ gcu UNI2 ] [ reptrc FILE1 FILE2 ] [ var VNAME VAL ] [ incl MODFILE ]\n\nDefines the variations invoked for a branch in the automated burnup sequence. The first parameter:\n\nNAME : branch name\n\nThe remaining parameters are defined by separate key words followed by the input values.\n\nNotes:\n\nThe branch card can be combined with the coef card, hisv card, and casematrix card.\n\nThe branch name identifies the branch BRm,i in the variation matrix defined by the coef card, hisv card, and casematrix card.\n\nThe input parameters consist of a number variations, which are invoked when the branch is applied.\n\nA single branch card may include one or several variations.\n\nFor more information, see detailed description on the automated burnup sequence.\n\nVariation types:\n\nBranch material variation (repm):\n\nMAT1 : name of the replaced material MAT2 : name of the replacing material\n\nNotes:\n\nThe material variation can be used to replace one material with another, for example, to change coolant boron concentration.\n\nThe material replacement works as if MAT1 were created using the mat or mix card of MAT2.\n\nThe name of the material present in the geometry will still be MAT1 after the replacement, but the material specification (composition, density, tmp, moder, rgb, etc.) will correspond to MAT2.\n\nThis means that all other input-cards that are linked to a specific material name such as dm entry in the det card, sm entry in the src card, set trc option and/or set iter nuc option can be linked to the original material (MAT1) and they will automatically apply to whatever material MAT2 replaces MAT1 for the branch calculation.\n\nThe replaced material MAT1 is also replaced inside mixtures.\n\nThis means one can not replace a material with a mixture defined with mix card containing the replaced material (for example replacing pure water defined with mat card by a mixture of boron and water defined with a mix card containing the same pure water material).\n\nThe replacing material MAT2 can not be included in the geometry using other cards than the branch card, from version 2.1.30 and on.\n\nBranch universe variation (repu):\n\nUNI1 : name of the replaced universe UNI2 : name of the replacing universe\n\nNotes:\n\nThe universe variation can be used to replace one universe with another, for example, to replace empty control rod guide tubes with rodded tubes for control rod insertion in 2D geometries.\n\nThe name of the universe present in the geometry will still be UNI1 after the replacement, but the universe contents will correspond to UNI2.\n\nThis means that all other input-cards that are linked to a specific universe name such as du entry in the det card and/or su entry in the src card can be linked to the original universe (UNI1) and they will automatically apply to whatever universe UNI2 replaces UNI1 for the branch calculation.\n\nBranch state variation, density/temperature (stp):\n\nMAT : name of the material for which density and temperature are adjusted DENS : material density after adjustment (positive value = atomic density [in b-1cm-1], negative value = mass density [in g/cm3]) TEMP : material temperature after adjustment [in K] THERMn : n-th thermal scattering data associated with the material SABLn : name of the n-th S(α, β) library for temperature below the given value SABHn : name of the n-th S(α, β) library for temperature above the given value\n\nNotes:\n\nThe state variation can be used to change material density and temperature.\n\nThere is a special entry for the TEMP parameter:\n\n\"-1\": to not adjust temperature\n\nThere are two special entries for the DENS parameter:\n\n\"sum\": to define the material density as the sum of the constituent nuclides densities (not supported from version 2.2.0 and on)\n\n\"original\": to keep unmodified the material density (introduced in version 2.2.1).\n\nThe adjustment is made using the built-in Doppler-broadening preprocessor routine and tabular interpolation for S(α, β) thermal scattering data.\n\nThe last three parameters of the card are provided only if the material has thermal scattering libraries attached to it (see the therm card).\n\nBranch transformation variation (tra):\n\nTGT : target universe, surface or cell TRANS : name of the applied transformation\n\nNotes:\n\nThe transformation variation can be used to move or rotate different parts of the geometry, for example, to adjust the position of control rods in 3D geometries.\n\nThe name of the transformation TRANS refers to the unit (universe, cell or surface) entry in the trans card.\n\nBranch xenon variation (xenon):\n\nOPT : option for setting xenon poison concentrations (0 = set to zero, 1 = use values from restart file)\n\nNotes:\n\nThe xenon variation can be set to enforced the Xe-135 and Xe-135m concentrations and optionally I-135 concentration to zero.\n\nBy default the concentrations are read from the restart file.\n\nEquilibrium xenon (set xenon option).\n\nIf the calculation is \"on\", then the option \"0\" sets I-135, Xe-135 and Xe-135m concentrations to zero.\n\nIf the calculation is \"off\", then the option \"0\" sets only Xe-135 and Xe-135m concentrations to zero.\n\nBranch samarium variation (samarium):\n\nOPT : option for setting samarium poison concentrations (0 = set to zero, 1 = use values from restart file)\n\nNotes:\n\nThe samarium variation can be set to enforce the Sm-149 concentration and possibly Pm-149 concentration to zero.\n\nBy default the concentrations are read from the restart file.\n\nEquilibrium samarium (set samarium option):\n\nIf the calculation is \"on\", then the option \"0\" sets both Pm-149 and Sm-149 concentrations to zero.\n\nIf the calculation is \"off\", then the option \"0\" sets only Sm-149 concentration to zero.\n\nBranch normalization variation (nsf):\n\nNSF : normalization scaling factor\n\nNotes:\n\nThe normalization variation can be used to change the normalization.\n\nThe adjustment is made applying the parameter NSF as a multiplicative scaling factor to the given normalization.\n\nBranch group constant variation (gcu):\n\nUNI2 : name of the replacing universe\n\nNotes:\n\nThe group constant variation can be used to replace the universe for group constant generation.\n\nThe variation is limited to a single-valued GCU-list (see set gcu option).\n\nBranch transport-correction variation (reptrc):\n\nFILE1 : file path of the replaced transport correction curve data FILE2 : file path of the replacing transport correction curve data\n\nNotes:\n\nThe transport-correction variation can be used to replace a transport correction file with another (see set trc option).\n\nBranch variable variation (var):\n\nVNAME : variable name VAL : variable value\n\nNotes:\n\nThe variable variation can be used to pass information into the output file, which may be convenient for the post-processing of the data.\n\nBranch user-defined variation (incl):\n\nMODFILE : file path to an additional/modified input file\n\nNotes:\n\nThe user-defined variation can be used as a multi-purpose option to modify the base-input via the additional input file MODFILE.\n\ncasematrix (casematrix definition)\n\ncasematrix CASE_NAME NHIS [ HIS_BR1 HIS_BR2 ... HIS_BRNHIS ] NBU [ BU1 BU2 ... BUNBU ] NBR1 [ BR1,1 BR1,2 ... BR1,NBR1 ] NBR2 [ BR2,1 BR2,2 ... BR1,NBR2 ] ...\n\nDefines the casematrix for the automated burnup sequence. Input values:\n\nCASE_NAME : name of the casematrix NHIS : number of history variations HIS_BRk : name of the k-th history variation branch NBU : number of burnup points BUn : burnup steps at which the momentary variation branches are invoked (positive value = burnup [in MWd/kg], negative value = time [in d]) NBRm : number branches in the m-th dimension of the burnup matrix BRm,i : name of the i-th branch in the m-th dimension\n\nNotes:\n\nThe casematrix card performs multiple depletions with NHIS (different) historical variations and performs restarts similar as the coef input card.\n\nThe casematrix card creates a multi-dimensional coefficient matrix (of size NBR1 × NBR2 × NBR3 × ... ).\n\nThe automated burnup sequence performs a restart for each of the listed burnup points, and loops over the branch combinations defined by the coefficient matrix.\n\nThis is repeated for each different depletion history.\n\nThe casematrix card is used together with the branch card and -casematrix command line option.\n\nMultiple casematrix cards can be given in a single input file.\n\nFor more information, see detailed description on automated burnup sequence.\n\ncell (cell definition)\n\ncell NAME UNI0 MAT [ SURF1 SURF2 ... ]\n\nDefines a cell. Input values:\n\nNAME : cell name UNI0 : universe where the cell belongs to MAT : material that fills the cell SURFn : surface list\n\nNotes:\n\nThe cell definition is based on the universe-based geometry type in Serpent.\n\nUniverses are implicitly declared, e.g., by using the UNI0 key word on cell cards, as there is no explicit universe input card.\n\nThe surface list defines the boundaries of the cell by listing the surface names (as provided in the surface definition, surf card), together with the operator identifiers (nothing for intersection, \":\" for union, \"-\" for complement and \"#\" for cell complement).\n\nThe general cell definition (so-called \"material cell\") have tailored types, defined by special material entries (replacing MAT):\n\nType Description void region is defined as zero-collision fill UNI1 region is filled by another universe, UNI1 outside region is not part of the actual geometry (\"outside world\")\n\nOutside cells:\n\nWhen the particle enters an outside cell, the boundary conditions are applied (see set bc option). It is important that the geometry model is non-re-entrant (convex) when vacuum boundary conditions are used. Delta-tracking might miss the boundary conditions in a re-entrant (concave) outer surface.\n\nOutside cells are allowed only in the root universe. It is important that all space outside the model is defined.\n\nCells defined without surfaces are treated as infinite, from version 2.1.32 on.\n\nWhen the geometry is set up, the root universe must always be defined. By default the root universe is named \"0\", and it can be changed with the set root option.\n\nFor more information, see detailed description on the universe-based geometry type in Serpent.\n\ncoef (coefficient matrix definition)\n\ncoef NBU [ BU1 BU2 ... ] [ NBR1 BR1,1 BR1,2 ... ] [ NBR2 BR2,1 BR2,2 ... ] ...\n\nDefines the coefficient matrix for the automated burnup sequence. Input values:\n\nNBU : number of burnup points BUn : burnup steps at which the branches are invoked (positive value = burnup [in MWd/kg], negative value = time [in d]) NBRm : number branches in the m-th dimension of the burnup matrix BRm,i : name of the i-th branch in the m-th dimension\n\nNotes:\n\nThe coef card creates a multi-dimensional coefficient matrix (of size NBR1 × NBR2 × NBR3 × ... ).\n\nThe automated burnup sequence performs a restart for each of the listed burnup points, and loops over the branch combinations defined by the coefficient matrix.\n\nThe coef card is used together with the branch card.\n\nFor multiple historical variations or historical conditions defined using a branch card, see the casematrix card.\n\nFor more information, see detailed description on automated burnup sequence.\n\ndatamesh (general data mesh definition)\n\ndatamesh NAME TYPE USELC [ ... ]\n\nDefines a general data mesh to be used for spacial discretisation. Input values:\n\nNAME : mesh name TYPE : mesh type USELC : use lowest level coordinates (1/yes) instead of global coordinates (0/no) for the mesh search\n\nThe remaining parameters are type-dependent.\n\nNotes:\n\nThe general data mesh can be used, e.g., with detectors (dmesh entry in the det card), interfaces (ifc card), sensitivities (opt dmesh entry in the sens card), etc.\n\nWhen Serpent makes the mesh search for a specific collision point, it will save the collision mesh cell temporarily so that the cell search is conducted at most once even when scoring multiple estimators using the same mesh.\n\nThe nested data meshes (type 9) take the coordinates' level from the USELC parameter defined in the nested mesh itself and use it in the subsequent sub-meshes, overriding the USELC parameter defined on those.\n\nThe available general data mesh types are:\n\nType Description 1 regular 3D Cartesian mesh 2 regular 2D cylindrical mesh 4 regular 3D X-type hexagonal mesh 5 regular 3D Y-type hexagonal mesh 6 irregular 3D Cartesian mesh 8 radially irregular 2D cylindrical mesh 9 regular nested mesh\n\nThe syntax of the available types is as follows:\n\ndatamesh NAME 1 USELC NX XMIN XMAX NY YMIN YMAX NZ ZMIN ZMAX\n\nNX : number of cells in the x-direction XMIN : mesh lower x-boundary [in cm] XMAX : mesh higher x-boundary [in cm] NY : number of cells in the y-direction YMIN : mesh lower y-boundary [in cm] YMAX : mesh higher y-boundary [in cm] NZ : number of cells in the z-direction ZMIN : mesh lower z-boundary [in cm] ZMAX : mesh higher z-boundary [in cm]\n\ndatamesh NAME 2 USELC NR RMIN RMAX NPHI\n\nNR : number of cells in the radial direction RMIN : mesh inner radial boundary [in cm] RMAX : mesh outer radial boundary [in cm] NPHI : number of cells in the polar angle direction\n\ndatamesh NAME 4 USELC X0 Y0 PITCH ZMIN ZMAX NX NY NZ\n\nX0 : mesh horizontal origin x-coordinate [in cm] Y0 : mesh horizontal origin y-coordinate [in cm] PITCH : mesh horizontal pitch (equal to cell flat-to-flat width) [in cm] ZMIN : mesh lower z-boundary [in cm] ZMAX : mesh higher z-boundary [in cm] NX : number of cells in the x-direction NY : number of cells in the y-direction NZ : number of cells in the z-direction\n\ndatamesh NAME 5 USELC X0 Y0 PITCH ZMIN ZMAX NX NY NZ\n\nX0 : mesh horizontal origin x-coordinate [in cm] Y0 : mesh horizontal origin y-coordinate [in cm] PITCH : mesh horizontal pitch (equal to cell flat-to-flat width) [in cm] ZMIN : mesh lower z-boundary [in cm] ZMAX : mesh higher z-boundary [in cm] NX : number of cells in the x-direction NY : number of cells in the y-direction NZ : number of cells in the z-direction\n\ndatamesh NAME 6 USELC NX NY NZ X1 ... XNX+1 Y1 ... YNY+1 Z1 ... ZNZ+1\n\nNX : number of cells in the x-direction NY : number of cells in the y-direction NZ : number of cells in the z-direction Xi : NX + 1 mesh boundaries in the x-direction [in cm] Yi : NY + 1 mesh boundaries in the y-direction [in cm] Zi : NZ + 1 mesh boundaries in the z-direction [in cm]\n\ndatamesh NAME 8 USELC NR NPHI R1 ... RNR+1\n\nNR : number of cells in the radial direction NPHI : number of cells in the polar angle direction Ri : NR + 1 mesh boundaries in the radial direction [in cm]\n\ndatamesh NAME 9 USELC NLEVEL MESH1 ... MESHNLEVEL\n\nNLEVEL : number of nested levels in this mesh MESHi : sub mesh to use at level i\n\ndep (depletion history)\n\ndep STYPE [ STEP1 STEP2 ... ]\n\nDefines depletion history with steps and activates depletion calculation mode. Input values:\n\nSTYPE : step type STEPn : depletion step list\n\nThe possible step types are:\n\nType Description Quantity Unit bustep Depletion step Burnup interval MWd/kgHM butot Depletion step Cumulative burnup MWd/kgHM daystep Depletion step Time interval d daytot Depletion step Cumulative time d decstep Decay step Time interval d dectot Decay step Cumulative time d actstep Activation step Time interval d acttot Activation step Cumulative time d\n\nNotes:\n\nMultiple depletion histories with different step types can be specified in the input, and they will be executed in the input order.\n\nDepletion calculations (burnup/activation steps) require normalization.\n\nSee: set power, set powdens, set flux, set genrate, set fissrate, set absrate, set lossrate, set srcrate, set sfrate.\n\nIf multiple depletion histories and normalizations are defined in the input, the first normalization will be used with the first depletion history, the second normalization with the second depletion history and so on.\n\nNote that even though decay calculations (decay steps) disregard the user defined normalization, a normalization has to be defined also for the decay history, if multiple normalizations are defined in the input and there are depletion histories (burnup/activation steps) after the decay calculation.\n\nIf the normalization is set to zero, physical estimates, e.g., detectors will be printed as zero.\n\nAlternatively, use a very small value to enforce a non-zero normalization.\n\nExcept:\n\nRadioactive decay source: source rate normalization is carried out automatically based on the total emission rate.\n\nDecay steps: equivalent, e.g., zero power.\n\nActivation step, \"actstep\" and \"acttot\":\n\nTransport cycle is run only once and transmutation cross sections are not updated.\n\nLimitations:\n\nIt must be preceeded by a burnup step.\n\nIt cannot be used with a burnable material radioactive source.\n\nBurnup is not calculated correctly\n\nDecay step, \"decstep\" and \"dectot\":\n\nTransport cycle is omitted and transmutation cross sections are not calculated.\n\nLimitations:\n\nIt cannot preceed activation steps.\n\nPhysical estimates, e.g., detectors will not be printed for the given step (value zero) due to normalization\n\ndep pro REP_NAME STYPE [ STEP1 STEP2 ... ]\n\nLinks a reprocessor to the depletion calculation. Input values:\n\nREP_NAME : reprocessor name STYPE : step type STEPn : depletion step list\n\nNotes:\n\nThe reprocessing system or reprocessor controller is defined using the rep card.\n\ndep bra PTR_BRANCH\n\ndet (detector definition)\n\ndet NAME [ PART ] [ dr MT MAT ] [ dv VOL ] [ dc CELL ] [ du UNI ] [ dm MAT ] [ dl LAT ] [ dx XMIN XMAX NX ] [ dy YMIN YMAX NY ] [ dz ZMIN ZMAX NZ ] [ dn TYPE MIN1 MAX1 N1 MIN2 MAX2 N2 MIN3 MAX3 N3 ] [ dn TYPE N1 N2 N3 LIM11...LIM1N+1 LIM21...LIM2N+1 LIM31...LIM3N+1 ] [ dh TYPE X0 Y0 PITCH N1 N2 ZMIN ZMAX NZ ] [ dumsh UNI NC CELL0 BIN0 CELL1 BIN1 ... ] [ de EGRID ] [ di TBIN ] [ ds SURF DIR ] [ dir COSX COSY COSZ ] [ dtl SURF ] [ df FILE FRACTION ] [ dt TYPE PARAM ] [ dhis OPT ] [ dfl FLAG OPT ] [ da MAT FLX ] [ dfet TYPE PARAMS ] [ dphb PHB ] [ dmesh MESH ]\n\nDetector definition. The two first parameters:\n\nNAME : detector name PART : particle type (n = neutron, p = photon)\n\nThe remaining parameters are defined by separate key words followed by the input values.\n\nNotes:\n\nThe particle type PART is optional in single particle simulations.\n\nThe detectors estimates are integrated values over the space, angle, energy and time domains.\n\nA detector with an associated discretization in space, angle, energy and/or time turns into multiple bins. Each bin results are correspondingly integrated over the discretization domain.\n\nA single detector card may include one or several detector types. If multiple detectors are defined, the results are correspondingly divided into multiple bins.\n\nDetector types:\n\nDetector response (dr):\n\nMT : response number MAT : response associated material name\n\nNotes:\n\nIf the detector is assigned with multiple responses, the results are divided correspondingly into separate bins.\n\nThe response numbers are ENDF reaction MT's and special reaction types.\n\nPositive response numbers:\n\nThey are associated with microscopic cross sections\n\nThe detector result is independent of the material density.\n\nMaterials associated to microscopic cross sections must consist of a single nuclide.\n\nMicroscopic reactions to ground and isomeric states can be calculated by adding \"g\" or \"m\" at the end of the reaction number.\n\nE.g. 102g and 102m refer to radiative capture to ground and isomeric states, respectively.\n\nThis option is available only for nuclides with branching ratios.\n\nNegative response numbers:\n\nThey are associated with macroscopic cross sections and special types\n\nThe detector result is multiplied by material density\n\nThe response material in the dr entry must not be confused with the material in the dm entry.\n\nThe former defines the material for the response function, while the latter determines the volume of integration.\n\nThere is a special entry for the response associated material:\n\n\"void\": to allow the response not to be pre-assigned with a specific material.\n\nWhen the detector scores in a collision, the cross-section is taken from the material at the collision point.\n\nUse, e.g., to calculate integral reaction rates over regions composed of multiple materials.\n\nIt only can be used with negative response numbers.\n\nBy default, Serpent allows a detector to have at most 10,000,000 bins.\n\nDetector volume (dv):\n\nVOL : volume [in cm3] (3D geometry) or cross-sectional area [in cm2] (2D geometry)\n\nNotes:\n\nThe results are divided by detector bin-volume (default value: 1.0)\n\nIn the case of surface detectors, VOL represents the surface area [in cm2] (3D geometry) or the surface length [in cm] (2D geometry).\n\nDetector cell (dc):\n\nCELL : cell name where the detector is scored\n\nNotes:\n\nIf multiple detector cells are defined, the results are correspondingly divided into multiple bins.\n\nDetector universe (du):\n\nUNI : universe name where the detector is scored\n\nNotes:\n\nIf multiple detector universes are defined, the results are correspondingly divided into multiple bins.\n\nDetector material (dm):\n\nMAT : material name where the detector is scored\n\nNotes:\n\nThere is a special entry for the material name:\n\n\"fiss\": to score only in fissile region(s)\n\nIf multiple detector materials are defined, the results are correspondingly divided into multiple bins.\n\nThe material entry defines the volume of integration, which must not be confused with the response material in the dr entry.\n\nDetector lattice (dl):\n\nLAT : lattice name where the detector is scored\n\nNotes:\n\nThe lattice detector automatically divides the results into multiple bins corresponding to the lattice cells.\n\nDetector evenly-spaced Cartesian mesh (dx, dy and dz):\n\nXMIN : minimum x-coordinate of the detector mesh [in cm] XMAX : maximum x-coordinate of the detector mesh [in cm] NX : number of x-bins YMIN : minimum y-coordinate of the detector mesh [in cm] YMAX : maximum y-coordinate of the detector mesh [in cm] NY : number of y-bins ZMIN : minimum z-coordinate of the detector mesh [in cm] ZMAX : maximum z-coordinate of the detector mesh [in cm] NZ : number of z-bins\n\nNotes:\n\nThe mesh detectors can be used to sub-divide the results into multiple evenly-spaced bins.\n\nFor a Cartesian mesh the division is provided with separate entries in x-, y- and z- locations (dx, dy and dz, respectively).\n\nDetector evenly-spaced curvilinear mesh (dn):\n\nTYPE : type of curvilinear mesh - 1 = cylindrical (dimensions r, θ, z), 2 = spherical (dimensions r, θ, φ) MINn : minimum value of n-coordinate for the mesh division [in cm (r, z), in degrees (θ, φ)]. MAXn : maximum value of n-coordinate for the mesh division [in cm (r, z), in degrees (θ, φ)]. Nn : number of bins in the n-coordinate direction (the radial division will be equal r, not equal volume).\n\nNotes:\n\nAll parameters must be provided, even for one- or two-dimensional curvilinear meshes.\n\nBy default, the curvilinear mesh detectors use the global (universe 0) coordinate system for scoring.\n\nIf the TYPE parameter is given as a negative value (e.g. -1) the lowest level coordinates are used instead.\n\nDetector unevenly-spaced mesh (dn):\n\nTYPE : type of curvilinear mesh - 3 = unevenly-spaced orthogonal (dimensions x, y, z), 4 = unevenly-spaced cylindrical (dimensions r, θ, z) Nn : number of bins in the n-coordinate direction LIMnm : mesh m-boundary in the n-coordinate direction [in cm (r, z), in degrees (θ, φ)].\n\nNotes:\n\nAll parameters must be provided, even for one- or two-dimensional meshes.\n\nBy default, the unevenly-spaced mesh detectors use the global (universe 0) coordinate system for scoring.\n\nIf the TYPE parameter is given as a negative value (e.g. -1) the lowest level coordinates are used instead.\n\nDetector hexagonal mesh (dh):\n\nTYPE : type of hexagonal mesh (2 = flat face perpendicular to x-axis, 3 = flat face perpendicular to y-axis) X0, Y0 : coordinates of mesh center [in cm] PITCH : mesh pitch [in cm] N1, N2 : mesh size ZMIN : minimum z-coordinate of the detector mesh [in cm] ZMAX : maximum z-coordinate of the detector mesh [in cm] NZ : number of z-bins\n\nNotes:\n\nAll parameters must be provided, even for a two-dimensional hexagonal meshes.\n\nDetector unstructured mesh (dumsh):\n\nUNI : universe of the unstructured mesh based geometry NC : number of mesh cell bins included in the output CELLn, BINn : cell-bin index pairs defining the mapping\n\nNotes:\n\nThe polyhedral cells in unstructured mesh based geometries are indexed.\n\nThis detector option allows collecting results from the cells into an arbitrary number of bins.\n\nOne or multiple cells can be mapped into a single bin.\n\nDetector energy binning (de):\n\nEGRID : energy grid name\n\nNotes:\n\nThe results are divided into multiple energy bins based on the grid structure.\n\nEnergy grid structures are defined using the ene card.\n\nPre-defined energy group structures can not be directly used in detectors, they have to be redefined using for example the type \"4\" of ene card.\n\nThe energy boundaries of photon photon pulse-height and photon heat analog detectors are solely defined by the associated energy grid and not limited by the unionized energy grid defining the model.\n\nThat means that analog detectors might collect scores below the physics model minimum energy bound, without a cut-off, if the energy grid sets it.\n\nDetector time binning (di):\n\nTBIN : time bin structure name\n\nNotes:\n\nThe results are divided into multiple time bins.\n\nTime bin structures are defined using the tme card.\n\nTime bin division may require adjusting the average collision distance (set cfe option) to achieve sufficient statistical accuracy.\n\nDetector current / flux surface (ds):\n\nSURF : surface name DIR : direction with respect to surface normal (-2 = flux, -1 = inward current, 1 = outward current, 0 = net current)\n\nNotes:\n\nWith this option the detector calculates the particle flux over or current through a given surface.\n\nFlux mode:\n\nThe surface flux mode is invoked by setting the direction parameter to \"-2\", otherwise this parameter defines the current direction with respect to surface normal.\n\nCurrent mode:\n\nResponses are not allowed with current detectors, and with flux detectors, the material name at the collision point has to be specified (\"void\" is not allowed).\n\nThe use of single-bin mesh and cell detectors is allowed to further define the surface and integration domain of the detector, from version 2.1.32 on.\n\nThe surface is treated separate from the geometry, and its position is always relative to the origin of the root universe.\n\nThis is the case even if the surface is part of the geometry in another universe.\n\nThe results are integrated over the surface area (other detectors integrate over volume).\n\nDetector direction vector (dir):\n\nCOSX : component of the direction vector parallel to x-axis COSY : component of the direction vector parallel to y-axis COSZ : component of the direction vector parallel to z-axis\n\nNotes:\n\nThis option multiplies the detector scores with the scalar product between the particle direction of motion and the given direction vector.\n\nDetector super-imposed track-length (dtl):\n\nSURF : surface inside which the detector is scored\n\nNotes:\n\nThis option can be used to apply the track-length estimator for calculating reaction rates inside regions defined by a single surface (sphere, cylinder, cuboid, etc.)\n\nThe surface is treated separate from the geometry, and its position is always relative to the origin of the root universe.\n\nThis is the case even if the surface is part of the geometry in another universe.\n\nThe purpose of the track-length detector is to provide better statistics for special applications (activation wire measurements, etc.).\n\nFor more information see the detailed description on delta- and surface-tracking and result estimators.\n\nDetector file (df):\n\nFILE : file name where the scored points are written FRAC : fraction of recorded scores and ASCII/binary option (positive value = ASCII, negative value = binary)\n\nNotes:\n\nThis option can be used to write the scored points in a file.\n\nThe fraction parameters gives the probability that the score is written in the file and it can be used to reduce the file size in long simulations.\n\nWhen used with the surface current detector this option can provide surface source distributions for other calculations.\n\nSource files can be read using the sf entry of the src card.\n\nDetector special types (dt):\n\nTYPE : special type (see below) PARAM : additional parameters\n\nThe possible special types are:\n\nType Description Notes -1 cumulative spectrum use with energy binning (de) -2 division by energy width use with energy binning (de) -3 division by lethargy width use with energy binning (de) -4 sum over cell or material bins use with cell and/or material binning (dc, dm) -5 importance weighting - -6 sum over number of scores - 2 multiply result with another detector defined by PARAM bin-compatibility 3 divide result with another detector defined by PARAM bin-compatibility 4 multiply response function by (local) temperature -\n\nNotes:\n\nType \"3 can be used to calculate flux-weighted averages (microscopic and macroscopic cross sections, etc.).\n\nDetector history collection flag (dhis):\n\nOPT : option to switch on (1/yes) or off (0/no) the collection of histories, batch-wise results\n\nNotes:\n\nWhen this option is set, the batch-wise results are printed in the history output file, [input]_stats.m.\n\nThe statistical tests are described in a related report[2].\n\nNote to developers: statistical tests should be documented\n\nDetector score flagging (dfl):\n\nFLAG : flag number (between 1 and 64) OPT : flagging option (0 = reset if scored, 1 = set if scored, -2/2 score if set -3/3 score if not set)\n\nThe possible flagging options are:\n\nFlag Description Notes 0 reset if scored - 1 set if scored - -2/2 score if set 2 (apply OR-type logic), -2 (apply AND-type logic) -3/3 score if not set 3 (apply OR-type logic), -3 (apply AND-type logic)\n\nNotes:\n\nDetector flagging allows limiting detector scores to histories which have already contributed to another score.\n\nScoring logic:\n\nOR-type logic: detector is scored if any of the associated flags is set/unset\n\nAND-type logic: detector is scored if all the associated flags are set/unset\n\nDetector activation (da):\n\nMAT : activated material FLX : flux applied to activation [in 1/cm2s]\n\nNotes:\n\nActivation detector allows performing activation calculation for materials that are not part of the geometry.\n\nFlux applied to activation:\n\nThe flux spectrum applied to neutron irradiation is taken from the detector scores.\n\nThe absolute flux level can be set using the FLX parameter.\n\nThere is a special entry for the FLX parameter:\n\n\"-1\": in this case, the flux magnitude is also taken from the detector scores.\n\nRequires neutron transport simulation and burnup mode.\n\nThe detector associated material must be burnable, and cannot part of the actual geometry.\n\nThe volume of the material, aka detector, must be defined using the dv parameter.\n\nSince the activated material is not part of the physical geometry, this option should be applied only to small samples and other activation calculations in which the isotopic changes do not significantly affect the neutronics.\n\nDetector Functional Expansion Tally, FET (dfet):\n\nTYPE : functional expansion type PARAMS : other options, specific to each functional expansion type TYPE\n\nGeometry PARAMS TYPE Description Functional Series Indexing Cartesian XMIN XMAX XORDER YMIN YMAX YORDER ZMIN ZMAX ZORDER 1 Legendre only Cylindrical RMAX RORDER HMIN HMAX HORDER HORIENTATION 2 .. .. ..\n\nNotes:\n\n\"-1\" can be supplied as an ORDER PARAM to use the built-in default values\n\nIt is not recommended to configure a single FET detector to span multiple different material regions—use individual detectors for each region instead\n\nSpecifics of this implementation:\n\nThe FETs are based on nonseparable expansions, i.e. fully-convolved cross terms are included\n\nFor example, the Legendre-based Cartesian FET uses with as a linear indexer of\n\nDue to the properties of orthogonality, these cross terms can be neglected in post-analyses if only separable terms are desired\n\nA generalization of the Euler formulas for any orthogonal functional series is used\n\nThe generated FET coefficients already have all contributions from the orthonormalization constant pre-included, i.e. from\n\nThus, an FET can be simply reconstructed/sampled from the standard functional series as:\n\nFrom version 2.2.0 and on, FET-based detectors follow the standard normalization set in the calculation. The volume standards for detectors are set as default value for FET-based detectors, meaning detectors are not divided by the physical volume (allowing the use of volume detector dv).\n\nIn version 2.2.0, the relative error evaluation associated with FET-based detectors has been revisited.\n\nDetector pulse-height energy broadening (dphb):\n\nPHB : user-defined (Gaussian) energy broadening for pulse-height detector function name\n\nNotes:\n\nUser-defined Gaussian energy broadening functions for pulse height detector are defined using the phb card.\n\nDetector spatial integration domain and binning based on a generic data mesh (dmesh):\n\nMESH : name of the datamesh to use for defining the spatial integration domain and binning for the detector scores\n\nNotes:\n\nOutput mesh index will be flattened (one dimensional).\n\ndiv (divisor definition)\n\ndiv MAT [ sep LVL ] [ subx NX XMIN XMAX ] [ subx NX X1 X2 ... XN+1 ] [ suby NY YMIN YMAX ] [ suby NY Y1 Y2 ... YN+1 ] [ subz NZ ZMIN ZMAX ] [ subz NZ Z1 Z2 ... ZN+1 ] [ subr NR RMIN RMAX ] [ subr NR R1 R2 ... RN+1 ] [ subs NS S0 ] [ subs NS S1 S2 ... SN+1 ] [ peb PBED NUNI [ UNI1 ... UNIN ] ] [ lims FLAG ]\n\nDivides a material into a number of sub-zones. The first parameter:\n\nMAT : name of the divided material\n\nThe remaining parameters are defined by separate key words followed by the input values.\n\nNotes:\n\nA single div card may include one or several sub-divisions.\n\nAs general rule:\n\nif the number of zones associated with a sub-division is positive, the sub-division is equal volume (see below)\n\nif the number of zones associated with a sub-division is negative, the subdivision is user-defined volume (see below)\n\nIf a material is not divided, all occurrences of it are treated as a single depletion zone (except for depleted materials defined in pin structures: pin-type division).\n\nThe use of automated instead of manual depletion zone division saves memory, which may become significant in very large burnup calculation problems (see set opti).\n\nThe volumes of the divided materials must be set manually (see set mvol option) or automatically, via the Monte Carlo checker-routine (see set mcvol option or -checkvolumes command line option).\n\nFor a more detailed description, check Defining material volumes).\n\nFor more information, see detailed description on automated depletion zone division.\n\nSub-division types:\n\nSub-division geometry level (sep):\n\nLVL : geometry level at which the material-wise division takes place (0 = no division, 1 = last level, 2 = 2nd last level, etc.)\n\nNotes:\n\nThe sub-division criterion is the geometry level.\n\nThe level number is counted backwards from the last one, i.e. level \"1\" is the last level.\n\nUse examples:\n\nto sub-divide the fuel in large LWR core into separate depletion zones on assembly-, instead of pin-basis.\n\nto sub-divide HTGR fuel kernels into depletion zones on compact- or pebble-basis.\n\nSub-division Cartesian mesh, equal volume (subx, suby and subz):\n\nNX : number of x-zones (positive value) XMIN : minimum x-coordinate [in cm] XMAX : maximum x-coordinate [in cm] NY : number of y-zones (positive value) YMIN : minimum y-coordinate [in cm] YMAX : maximum y-coordinate [in cm] NZ : number of z-zones (positive value) ZMIN : minimum z-coordinate [in cm] ZMAX : maximum z-coordinate [in cm]\n\nNotes:\n\nAn equal volume sub-division is performed in the given dimension.\n\nThe value of the parameter Nn which defines the number of zones in the given dimension must be positive.\n\nFor a Cartesian mesh sub-division, a separate entry in x-, y-, z- directions is provided (subx, suby and subz, respectively).\n\nSub-division Cartesian mesh, user-defined volume (subx, suby and subz):\n\nNX : number of x-zones (negative value) Xn : x-coordinate boundaries [in cm] NY : number of y-zones (negative value) Yn : y-coordinate boundaries [in cm] NZ : number of z-zones (negative value) Zn : z-coordinate boundaries [in cm]\n\nNotes:\n\nAn user-defined volume sub-division is performed in the given dimension.\n\nThe value of the parameter Nn which defines the number of zones in the given dimension must be negative.\n\nFor a Cartesian mesh sub-division, a separate entry in x-, y-, z- directions is provided (subx, suby and subz, respectively).\n\nSub-division cylindrical annular mesh, equal volume (subr):\n\nNR : number of radial-zones (positive value) RMIN : minimum radial-coordinate [in cm] RMAX : maximum radial-coordinate [in cm]\n\nNotes:\n\nAn equal volume radial sub-division is performed (annular-type sub-division)\n\nThe value of the parameter NR which defines the number of zones in the given dimension must be positive.\n\nSub-division cylindrical annular mesh, user-defined volume (subr):\n\nNR : number of radial-zones (negative value) Rn : radial-coordinate boundaries [in cm]\n\nNotes:\n\nAn user-defined volume radial sub-division is performed (annular-type sub-division)\n\nThe value of the parameter NR which defines the number of zones in the given dimension must be negative.\n\nSub-division cylindrical sector mesh, equal volume (subs):\n\nNS : number of angular-zones (negative value) S0 : zero position of angular division [in degrees]\n\nNotes:\n\nAn equal volume angular sub-division is performed (sector-type sub-division)\n\nThe value of the parameter NS which defines the number of zones in the angular dimension must be positive.\n\nSub-division cylindrical sector mesh, user-defined volume (subs):\n\nNS : number of angular-zones Sn : angular-sector boundaries [in degrees]\n\nNotes:\n\nAn user-defined volume angular sub-division is performed (sector-type sub-division)\n\nThe value of the parameter NS which defines the number of zones in the angular dimension must be negative.\n\nThe manually-spaced angular-sector boundaries Sn must cover the full/360 degrees angular space.\n\nSub-division pebble-bed structure (peb):\n\nPBED : stochastic particle / pebble-bed structure NUNI : number of universes to link related to the PBED structure (special case: 0 = link to all) UNIN : list of universes to link (non-zero number of universes)\n\nNotes:\n\nThe pebble bed-based sub-division divides each item in a pebble bed universe as its own item.\n\nIt features a speed-up on the depletion zone division indexing process with large number of pebble bed structures.\n\nSub-division limit enforcement (lims):\n\nFLAG : flag for mapping regions outside (material) limits to divide material: on (1/yes) or off (0/no). The default option is \"off\"\n\ndtrans (detector mesh transformation)\n\nDefines detector mesh transformations. Shortcut for \"trans d\".\n\nNotes:\n\nThe parameters associated with the transformation follow the standard transformation cards syntax without trans TYPE identifier.\n\nSee transformations.\n\nene (energy grid definition)\n\nene NAME TYPE [ ... ]\n\nDefines an energy grid structure. Input values:\n\nNAME : energy grid name TYPE : energy grid type\n\nThe remaining parameters are type-dependent.\n\nThe available energy grid structure types are:\n\nType Description 1 arbitrary defined grid 2 equal energy-width bins 3 equal lethargy-width bins 4 pre-defined energy group structure\n\nThe syntax of the available types is as follows:\n\nene NAME 1 E0 E1 ...\n\nEi : bin boundaries [in MeV] in ascending order (Ei+1 > Ei)\n\nene NAME 2 N Emin Emax\n\nN : number of equi-width bins Emin : minimum energy [in MeV] Emax : maximum energy [in MeV]\n\nene NAME 3 N Emin Emax\n\nN : number of equi-width bins Emin : minimum energy [in MeV] Emax : maximum energy [in MeV]\n\nene NAME 4 GRID\n\nGRID : name of the pre-defined energy group structure\n\nNotes:\n\nEnergy grid structures are used for several purposes, e.g. with detectors (de entry in the det card).\n\nftrans (fill transformation)\n\nDefines fill transformations. Shortcut for \"trans f\".\n\nNotes:\n\nThe parameters associated with the transformation follow the standard transformation cards syntax without trans TYPE identifier.\n\nSee transformations.\n\nfun (function definition)\n\nfun NAME TYPE [ ... ]\n\nDefines a function that can be used with detector responses. Input values:\n\nNAME : function name TYPE : function type\n\nThe remaining input values are type-dependent.\n\nNotes:\n\nThe defined function is linked to detector response using MT -100 (syntax: dr -100 NAME).\n\nThe defined function currently is only supported as a flux-based function, aka, flux multiplier.\n\nThe available function types are:\n\nType Description 1 point-wise tabular data\n\nThe syntax for the available types is as follows:\n\nfun NAME 1 INTT X1 F1 X2 F2 ...\n\nINTT : is the interpolation type (1 = histogram, 2 = lin-lin, 3 = lin-log, 4 = log-lin, 5 = log-log) Xi, Fi : are the tabulated variable-value pairs\n\nhisv (history variation matrix definition)\n\nhisv [ BU1 NBR1 BR1,1 BR1,2 ... BR1,NBR1 ] [ BU2 NBR2 BR2,1 BR2,2 ... BR2,NBR2 ] ...\n\nDefines the history variation matrix for the automated burnup sequence. Input values:\n\nBUn : burnup steps at which the branches are invoked (positive value = burnup [in MWd/kg], negative value = time [in d]) NBRn : number branches in the n-th burnup step BRn,i : name of the i-th branch in the n-th burnup step\n\nNotes:\n\nThe automated burnup sequence defined by the hisv card follows the same principle as the coef input card.\n\nThe hisv card performs multiple depletions within a single depletion calculation following the historical variation sequence.\n\nIt performs a restart at each of the listed burnup points, where it applies the variations defined in the listed branches for the given burnup point.\n\nThe hisv card is used together with the branch card.\n\nifc (interface file)\n\nifc FILE [ setinmat NMAT MAT1 MAT2 ... MATNMAT ] [ setoutmat NMAT MAT1 MAT2 ... MATNMAT ]\n\nLinks a multi-physics interface file to be used with the current input. The first parameter:\n\nFILE : path to the multi-physics interface file\n\nThe remaining parameters are defined by separate key words followed by the input values, being optional.\n\nNotes:\n\nSee also Coupled multi-physics calculations.\n\nOptional entries:\n\nInterface input materials (setinmat):\n\nNMAT : number of input materials to link to the interface MATn : name of the n-th input material linked to the interface\n\nNotes:\n\nIt adds the possibility to link multiple input materials to the same interface, i.e. the same interface gives temperatures and densities (density factors) for multiple materials.\n\nIf multiple input materials are linked to the interface using the option, the densities in the interface file must be given as density factors, i.e. relative to the material card density (values between 0 and 1).\n\nIf the interface is not updated, the entry is not eligible.\n\nIf the regular mesh-based interface is used and power is tallied in pin-type objects, the entry is not eligible.\n\nThe option setinmat is referred as setmat up to version 2.1.31.\n\nInterface output materials (setoutmat):\n\nNMAT : number of output materials to link to the interface MATn : name of the n-th output material linked to the interface\n\nNotes:\n\nIt adds the possibility to link multiple output materials to the same interface, i.e. the same interface gives temperatures and densities (density factors) for multiple materials.\n\nIf multiple input materials are linked to the interface using the option, the densities in the interface file must be given as density factors, i.e. relative to the material card density (values between 0 and 1).\n\nIf the interface is not updated, the entry is not eligible.\n\nIf the regular mesh-based interface is used and if power is not tallied on the same mesh, the entry is not eligible.\n\ninclude (read another input file)\n\ninclude FILE\n\nReads another input file. Input values:\n\nFILE : name of the input file\n\nNotes:\n\nThe include card can be used to simplify the structure of complicated inputs.\n\nThe input parser starts reading and processing the new file from the point where the input card is placed.\n\nProcessing of the original file continues after the new file is completed.\n\nThe included file must contain complete input cards and options, it cannot be used to read the values of another card.\n\nNested included file paths must refer to the original base input file or current working directory.\n\nlat (regular lattice definition)\n\nlat UNI TYPE [ ... ]\n\nDefines a regular lattice universe. Input values:\n\nUNI : universe name of the lattice TYPE : lattice type\n\nThe remaining input values are case/type-dependent.\n\nNotes:\n\nSee also Section 3.6 of [1].\n\nThe available lattice definitions and types (condensed in five cases) are:\n\nCase xy-plane description z-direction description Types I finite 2D lattice with square, hexagonal or triangular elements infinite z-direction 1 = square, 2 = X-type hexagonal, 3 = Y-type hexagonal, 14 = X-type triangular II infinite 2D lattice with square or hexagonal elements infinite z-direction 6 = square, 7 = Y-type hexagonal, 8 = X-type hexagonal III finite 2D lattice circular cluster array infinite z-direction 4 = circular cluster array IV infinite xy-plane finite 1D lattice with vertical stack 9 = vertical stack V finite 3D lattice with square or hexagonal elements finite 3D lattice 11 = cuboid, 12 = X-type hexagonal prism, 13 = Y-type hexagonal prism\n\nThe syntax of the available cases is as follows:\n\nCase I: finite 2D lattice in xy-plane with square, X- or Y-type hexagonal, or X-type triangular elements, and infinite in z-direction.\n\nlat UNI TYPE X0 Y0 NX NY PITCH UNI1 UNI2 ...\n\nX0 : x-coordinate of the lattice origin (origin is in the center of the lattice) [in cm]. Y0 : y-coordinate of the lattice origin (origin is in the center of the lattice) [in cm]. NX : number of lattice elements in x-direction NY : number of lattice elements in y-direction PITCH : lattice pitch [in cm] UNIn : list of universes filling the lattice positions\n\nPossible lattice definitions are:\n\nType Description 1 Square lattice 2 X-type hexagonal lattice 3 Y-type hexagonal lattice 14 X-type triangular lattice\n\nNotes:\n\nNumber of listed universes universes must be NX × NY.\n\nFor square lattices the x-coordinate increases from left to right and the y-coordinate increases from top to bottom, so the first NX values in the list of universes create the bottommost (minimum y) row from minimum x to maximum x and the last NX values in the list of universes create the topmost (maximum y) values. Example of the indexing is provided in the attached figure.\n\nThe line breaks usually present in the list of universes are only used to help visualizing the universe order for the user. Serpent ignores them when processing the list of universes.\n\nThe input of X- and Y-type hexagonal lattices is similar to each other, only the directions of the x- and y-axis change. The axis directions can be checked by using the geometry plotter. Examples of the indexing are provided in the attached figures.\n\nCase II: infinite 2D lattice in xy-plane with infinitely repeating square or X- or Y-type hexagonal element, and infinite in z-direction.\n\nlat UNI TYPE X0 Y0 PITCH UNI1\n\nX0 : x-coordinate of the lattice origin [in cm] Y0 : y-coordinate of the lattice origin [in cm] PITCH : lattice pitch [in cm] UNI1 : universe name of the universe filling all lattice positions\n\nPossible lattice types are:\n\nType Description 6 Square lattice 7 Y-type hexagonal lattice 8 X-type hexagonal lattice\n\nNotes:\n\nThe order of X- and Y-type hexagonal lattice type numbers is reversed when compared with finite hexagonal lattices.\n\nCase III: finite 2Dl circular cluster array lattice in xy-plane and infinite in z-direction.\n\nlat UNI TYPE X0 Y0 NR NS,1 RADIUS1 THETA1 UNI1,1 UNI2,1 ... NS,2 RADIUS2 THETA2 UNI1,2 UNI2,2 ... ...\n\nX0 : x-coordinate of the lattice origin [in cm] Y0 : y-coordinate of the lattice origin [in cm] NR : number of rings in the array NS,R : number of sectors in R-th ring RADIUSR : central radius of R-th ring [in cm] THETAR : angle of rotation of R-th ring [in degrees] UNIN,R : list of universes filling the sector positions in R-th ring\n\nPossible lattice type is:\n\nType Description 4 Circular cluster array\n\nNotes:\n\nThe circular cluster array can be used to define fuel assemblies used for example in AGR, CANDU, MAGNOX and RBMK reactors. It can also be used to define fuel rod layout used for example in TRIGA reactors.\n\nCase IV: infinite lattice in xy-plane, and finite 1D vertical stack in z-direction\n\nlat UNI TYPE X0 Y0 NL Z1 UNI1 Z2 UNI2 ...\n\nX0 : x-coordinate of the lattice origin [in cm] Y0 : y-coordinate of the lattice origin [in cm] NL : number of lattice elements in z-direction (number of axial layers) Zn : z-coordinate of the n-th lattice element (lower boundary of the axial layer) [in cm] UNIn : universe name filling the n-th lattice position\n\nPossible lattice types are:\n\nType Description 9 Vertical stack\n\nNotes:\n\nThe z-coordinates must be given in ascending order.\n\nSpace below the lowest z-coordinate is not defined.\n\nThe top layer fills the entire space above the highest z-coordinate.\n\nThe number of Zn-UNIn pairs must be NL.\n\nCase V: finite 3D lattice in xyz-space with cuboidal or X- or Y-type hexagonal prism elements\n\nlat UNI TYPE X0 Y0 Z0 NX NY NZ PITCHX PITCHY PITCHZ UNI1 UNI2 ...\n\nX0 : x-coordinate of the lattice origin [in cm] Y0 : y-coordinate of the lattice origin [in cm] Z0 : z-coordinate of the lattice origin [in cm] NX : number of lattice elements in x-direction NY : number of lattice elements in y-direction NZ : number of lattice elements in z-direction PITCHX : lattice pitch in x-direction [in cm] PITCHY : lattice pitch in y-direction [in cm] PITCHZ : lattice pitch in z-direction [in cm] UNIn : list of universes filling the lattice positions\n\nPossible lattice types are:\n\nType Description 11 Cuboidal lattice 12 X-type hexagonal prism lattice 13 Y-type hexagonal prism lattice\n\nNotes:\n\nNumber of universes in list of universes must be NX × NY × NZ.\n\nFor hexagonal prism lattices the x- and y-direction pitches must be equal.\n\nThe universe indexing is the similar as with lattice types 1-3. The lowermost z-level is given first, and the uppermost z-level is given last.\n\nmat (material definition)\n\nSee Chapter 4 of [1].\n\nmat NAME DENS [ tmp TEMP ] [ tms TEMP ] [ tft TMIN TMAX ] [ rgb R G B ] [ vol VOL ] [ mass MASS ] [ burn NR ] [ fix ID TEMP ] [ moder THNAME ZA ] NUC1 FRAC1 [ NUC2 FRAC2 ] [ ... ]\n\nMaterial definition. The mandatory parameters are:\n\nNAME : name of the material DENS : density of the material (positive value = atomic density [in b-1cm-1], negative value = mass density [in g/cm3]) NUCn : Identifier of n-th nuclide in composition FRACn : fraction of n-th nuclide in composition (positive value = atomic fractions/density, negative values = mass fractions/density)\n\nThe remaining parameters are defined by separate key words followed by the input values, being optional.\n\nNotes:\n\nThere is a special entry for the DENS parameter:\n\n\"sum\": to calculate the density from given nuclide fractions\n\nThe nuclide identifier for nuclides with associated cross-sections corresponds to ZZAAA.ID and, for nuclides without associated cross-sections, e.g., decay nuclides, to ZZAAAI.\n\nThe identifiers include Z, the atomic number; A, the mass number of the nuclide; I, the isomeric state (0 = ground state, 1 = metastable state); and ID, the library identifier.\n\nFor more information, see the detailed description on Definitions.\n\nOptional entries:\n\nMaterial temperature for Doppler-broadening pre-processor (tmp):\n\nTEMP : temperature of the material [in K]\n\nNotes:\n\nIt defines the material temperature for Doppler-preprocessor.\n\nMaterial temperature for on-the-fly temperature treatment (tms):\n\nTEMP : temperature of the material [in K]\n\nNotes:\n\nIt defines the material temperature for on-the-fly TMS temperature treatment.\n\nMaterial temperature for coupled multi-physics calculations (tft):\n\nTMIN : lower limit for material temperature [in K] TMAX : upper limit for material temperature [in K]\n\nNotes:\n\nIt sets the temperature limits for material for coupled multi-physics calculations.\n\nIt is used to define the minimum and maximum temperature for the TMS-treatment directly from the interface files (see ifc card).\n\nFor more information, see the detailed description on the Multi-physics interface.\n\nMaterial RGB-color (rgb):\n\nR : value for the red channel (between 0 and 255) G : value for the green channel (between 0 and 255) B : value for the blue channel (between 0 and 255)\n\nNotes:\n\nIt assigns a dedicated RGB-color to the material for the material representation in geometry plots.\n\nIf the entry is not provided, the material color is sampled randomly.\n\nMaterial volume (vol):\n\nVOL : volume of the material [in cm3] (3D geometry) or cross-sectional area [in cm2] (2D geometry)\n\nNotes:\n\nIt defines the material volume.\n\nAlternatives ways to provide the material volume includes:\n\nset mvol option, used to define the material volumes manually\n\nset mcvol option, used to define the material volumes automatically using the Monte Carlo checker routine at runtime.\n\n-checkvolumes command line option, used to evaluate the material volumes in an independent run.\n\nFor more information, see the detailed description on material volumes definition.\n\nMaterial mass (mass):\n\nMASS : mass of the material [in g]\n\nNotes:\n\nThe material mass can be provided as an alternative to the material volume.\n\nMaterial depletion flag (burn):\n\nNR : option to flag the material as burnable (1/yes) or non-burnable (0/no). The default option is \"non-burnable\"\n\nNotes:\n\nIn order to deplete the material and include it in the burnup calculation, the flag must be set to \"1\"\n\nThe depletion zone division should be done using the div card. However,\n\nif a material is defined within a pin-structure, Serpent, by default if no div card is associated to the material, sub-divides the material in a pin-type level.\n\nin Serpent 1, the \"flag\" is interpreted as the number of annular regions (not recommended)\n\nMaterial library information for nuclides without cross section data and their decay products (fix):\n\nLIB : library ID (e.g. \"09c\") for nuclides without cross section data. TEMP : temperature for nuclides without cross section data [in K]\n\nNotes:\n\nIt defines the library properties: identifier and temperature for the nuclides without cross section data, e.g. decay nuclides, within the material composition.\n\nDecay products from these nuclides may have cross section data and will inherit the library ID and temperature based on this card.\n\nMaterial associated thermal-scattering data (moder):\n\nTHNAME : name of the thermal scattering data library ZA : nuclide ZA of the thermal scatterer (e.g. 1001 for H-1).\n\nNotes:\n\nIt links the thermal-scattering data library for a given nuclide within the material composition.\n\nThe thermal-scattering data library and the associated temperature treatment is defined by the therm card.\n\nA single material can include multiple \"moder\" entries to define thermal-scattering libraries form multiple nuclides, such as H-H20 and D-D20 in semi-heavy water.\n\nmesh (mesh plot definition)\n\nmesh ORI XPIX YPIX [ SYM MIN1 MAX1 MIN2 MAX2 MIN3 MAX3 ]\n\nmesh 8 CMAP DET ORI XPIX YPIX [ SYM MIN1 MAX1 MIN2 MAX2 MIN3 MAX3 ]\n\nmesh 10 ORI XPIX YPIX\n\nProduces a png-format mesh plot of various results. Input values:\n\nORI : orientation with respect to coordinate axes XPIX : horizontal image size [in pixels] YPIX : vertical image size [in pixels] SYM : symmetry option (not used in Serpent 2) MINn MAXn : boundaries of the plotted region [in cm] CMAP : color map used for plotting detector scores (positive entry for linear, negative for log-scale) DET : detector name\n\nNotes:\n\nThe first format produces a mesh plot where fission rate and thermal flux distribution are plotted using hot and cold color schemes, respectively. This type of mesh plot is convenient for illustrating the neutronics of thermal systems. The orientation parameter defines the coordinate axis perpendicular to the plot plane: 1 - x-axis (projection on yz-plane); 2 - y-axis (projection on xz-plane); 3 - z-axis (projection on xy-plane).\n\nThe second format produces a mesh plot of all scores contributing to a detector. The additional input parameters are the detector name and the color map used in the plot.\n\nThe third format generates a mesh-plot of the temperature distribution. This can be a good way to check the temperature distribution, provided by an external solver, during a coupled calculation.\n\nThe color maps are: 1 - hot; 2 - cold; 4 - jet; 5 - black and white; 6 - hsv; 7 - spring; 8 - summer; 9 - autumn; 10 - winter; 11 - green-purple; 12 - purple-orange; 13 - blue-red. Many of these correspond to what is used in Matlab. Logarithmic scale is used if the number is given with a minus sign.\n\nDetector scores are collected in the mesh cells (see the detector card and the list of ENDF reaction MT's and special reaction types for more information). The distribution is scaled according to the minimum and maximum values.\n\nSome special detector types, such as pulse-height detectors and analog photon heating detectors cannot be associated with mesh plots.\n\nThe mesh plot always produces results that are integrated over space. If no boundaries are provided, the integration is carried over the entire geometry.\n\nSetting the orientation parameter of a detector mesh plot to 4 produces a plot in cylindrical coordinates. Instead of Cartesian boundaries the entered values are then the radius and axial coordinate.\n\nThe symmetry option was used in Serpent 1. The parameter must be provided for Serpent 2 as well, even though it is not used. The value can be set to zero.\n\nMesh plot produced by the nth mesh-card is written in file [input]_mesh[n].png.\n\nmflow (material flow definition)\n\nmflow NAME NUC1 λ1 [ NUC2 λ2 ] [ ... ]\n\nDefines the material flow. Input values:\n\nNAME : name of the material flow NUCn : identifier of n-th nuclide in composition λn : reprocessing constant of n-th nuclide in composition [in s-1]\n\nNotes:\n\nThe nuclide ID should follow the ZAI or ISO format (e.g., 922350 or U-235).\n\nThere is a special entry for the nuclide ID:\n\n\"all\": in which case all nuclides are included with the same reprocessing fraction λ.\n\nmix (mixture definition)\n\nmix NAME [ rgb R G B ] [ vol VOL ] [ mass MASS ] MAT1 F1 MAT2 F2 ...\n\nDefines a mixture of two or several materials. Mandatory input values:\n\nMATn : material name Fn : material fraction (positive value = volume fraction, negative value = mass fraction)\n\nThe remaining parameters are defined by separate key words followed by the input values, being optional.\n\nNotes:\n\nMixtures can be used to define complicated material definitions consisting of two or more physical materials mixed homogeneously.\n\nThe mixtures are automatically decomposed into standard materials before running the transport simulation.\n\nAlternatively, the decomposed material compositions can be written into file using the -mix command line option.\n\nInherited properties/cards:\n\nNuclide specific thermal scattering data (see moder entry in the mat card) is automatically brought from component materials to the mixture.\n\nOther input option such as set trc, set iter nuc, sens pert matlist are not automatically inherited by the mixture from the components.\n\nIf they are to be applied to the mixture, they should be directly defined using the mixture material name (opposed to component material names) .\n\nBurnable mixtures are not supported.\n\nOptional entries:\n\nMixture RGB-color (rgb):\n\nR : value for the red channel (between 0 and 255) G : value for the green channel (between 0 and 255) B : value for the blue channel (between 0 and 255)\n\nNotes:\n\nRGB color coding for material representation in geometry plots.\n\nMixture volume (vol):\n\nVOL : volume of the material [in cm3] (3D geometry) or cross-sectional area [in cm2] (2D geometry)\n\nMixture mass (mass):\n\nMASS : mass of the material [in g]\n\nnest (nested universe definition)\n\nnest UNI0 TYPE [ MAT1 R1 ] [ MAT2 R2 ] ... [ MATN ]\n\nnest UNI0 [ MAT1 TYPE1 PARAM11 PARAM12 ... ] [ MAT2 TYPE2 PARAM21 PARAM22 ... ] ... [ MATN ]\n\nDefines a universe consisting of nested regions. Input values:\n\nUNI0 : universe name TYPE : nested surface type (single surface for all regions) MAT1 ... MATN : material regions R1 ... RN-1 : outer radii [in cm] TYPE1 ... TYPEN-1 : nested surface type (different surfaces for each region) PARAMnm ... : surface parameters\n\nNotes:\n\nThe nest card defines an entire universe consisting of nested material regions.\n\nThe boundaries are defined by surfaces nested inside each other.\n\nThe outermost region is infinite.\n\nSpecial MATi entry: the material entries can be replaced by \"fill UNIi\", in which case the region is filled by another universe, UNIi.\n\nThe first format allows defining nests in which all surfaces are of same type and centred at the origin.\n\nOnly surfaces that are characterized by a single outer radius are accepted (cylinders, spheres and some regular prisms).\n\nThe pin and particle definitions are short-hand notations of the nest card.\n\nThe second format allows mixing different surface types. In this case all surface parameters need to be provided after the surface type.\n\nparticle (particle geometry definition)\n\nparticle UNI0 [ MAT1 R1 ] [ MAT2 R2 ] ... [ MATN ]\n\nDefines a particle universe. Input values:\n\nUNI0 : universe name MAT1 ... MATN : material regions R1 ... RN-1 : outer radii [in cm]\n\nNotes:\n\nThe particle card defines an entire universe consisting of nested spherical shells.\n\nThe boundaries are defined by sphere surfaces.\n\nThe outermost region is radially infinite.\n\nSpecial MATi entry: the material entries can be replaced by \"fill UNIi\", in which case the region is filled by another universe, UNIi.\n\nMost typically used for defining TRISO fuel particles.\n\nThe particle card is special case of a nested universe type.\n\nSee also description of explicit stochastic geometry type.\n\npbed (explicit stochastic (pebble bed) geometry definition)\n\npbed UNI0 UNIbg FILE [ OPT ]\n\nDefines a stochastic particle / pebble-bed geometry. Input values:\n\nUNI0 : universe name for the dispersed medium UNIbg : background universe, i.e. universe filling the space between particles / pebbles FILE : input file containing the particle/pebble data OPT : additional options\n\nThe syntax of the file containing the particle/pebble data is:\n\nX1 Y1 Z1 R1 UNI1 X2 Y2 Z2 R2 UNI2 ...\n\nwhere:\n\nXn, Yn, Zn : are the coordinates [in cm] Rn : is the radius [in cm] UNIn : is the universe\n\nThe supported additional options are:\n\nOption Description pow power distribution\n\nNotes:\n\nCreates a universe (UNI0), which is filled with spherical sub-universes for which the coordinates are read from a separate file.\n\nThe coordinates can be defined manually, or using the -disperse command line option which launches the particle disperser routine.\n\nCan be used for modelling stochastic particle / pebble-bed geometries in multiple levels.\n\nIf the \"pow\" (power distribution) option is set, the pebble/particle-wise distribution is written in file [FILE]_pow[bu].m, where \"bu\" is the burnup step, from version 2.2.1 and on (in previous versions, [FILE].out).\n\nSee also HTGR geometry examples.\n\nphb (pulse-height Gaussian energy broadening definition)\n\nphb NAME TYPE [ ... ]\n\nDefines a user-defined (Gaussian) energy broadening function for pulse-height detector (dphb). Input values:\n\nNAME : pulse-height (Gaussian) energy broadening function name TYPE : pulse-height function type\n\nThe remaining input values are type-dependent.\n\nThe pulse-height funtion types are:\n\nType Description 1 energy-resolution interpolation 2 energy-FWHM interpolation 3 energy-resolution fitting 4 energy-FWHM fitting\n\nThe syntax for the available types is as follows:\n\nphb NAME 1 INTT Emax,1 R1 Emax,2 R2 ...\n\nINTT : is the interpolation type (currently only supported type is 2 = lin-lin interpolation data) Emax,i, Ri : are the maximum energy-resolution tabulated pairs [in MeV (energy)]\n\nNotes:\n\nFull width at half maximum is calculated as:\n\nEnergies should be given in ascending order.\n\nphb NAME 2 INTT Emax,1 FWHM1 Emax,2 FWHM2 ...\n\nINTT : is the interpolation type (currently only supported type is 2 = lin-lin interpolation data) Emax,i, FWHMi : are the maximum energy-full width at half maximum pairs [in MeV (energy)]\n\nNotes:\n\nEnergies should be given in ascending order.\n\nphb NAME 3 a b\n\na, b : are the parameters to define the energy resolution fit:\n\nphb NAME 4 a b c\n\na, b, c : are the parameters to define the energy full width at half maximum fit:\n\npin (pin geometry definition)\n\npin UNI0 [ MAT1 R1 ] [ MAT2 R2 ] ... [ MATN ]\n\nDefines a pin universe. Input values:\n\nUNI0 : universe name MAT1 ... MATN : material regions R1 ... RN-1 : outer radii [in cm]\n\nNotes:\n\nThe pin card defines an entire universe consisting of nested annular material regions.\n\nThe boundaries are defined by axially infinite cylindrical surfaces.\n\nThe outermost region is radially infinite.\n\nSpecial MATi entry: the material entries can be replaced by \"fill UNIi\", in which case the region is filled by another universe, UNIi.\n\nMost typically used for defining fuel pins, but can also be applied to guide tubes, control rods, etc.\n\nThe pin card is special case of a nested universe type.\n\nplot (geometry plot definition)\n\nplot TYPE XPIX YPIX [ POS MIN1 MAX1 MIN2 MAX2 ]\n\nplot TYPE Fmin Fmax E XPIX YPIX [ POS MIN1 MAX1 MIN2 MAX2 ]\n\nProduces a png-format geometry plot. Input values:\n\nTYPE : defines the plot type (orientation and plotting of boundaries) XPIX : horizontal image size [in pixels] YPIX : vertical image size [in pixels] POS : position of plot plane [in cm] MIN1 : minimum horizontal coordinate of plotted region [in cm] MAX1 : maximum horizontal coordinate of plotted region [in cm] MIN2 : minimum vertical coordinate of plotted region [in cm] MAX2 : maximum vertical coordinate of plotted region [in cm] Fmin : minimum importance for importance map plots Fmax : maximum importance for importance map plots E : particle energy for importance map plots [in MeV]\n\nNotes:\n\nThe TYPE parameter consists of one ('A') or two concatenated values ('AB'):\n\nThe first value ('A') defines the plot plane (yz-plot = 1, \"x\", xz-plot = 2, \"y\", xy-plot = 3, \"z\").\n\nThe second value ('B') defines which boundaries are plotted (0 = no boundaries, 1 = cell boundaries, 2 = material boundaries, 3 = both cell and material boundaries).\n\nIf the second value ('B') is not provided, default value 2 = material boundaries is used.\n\nThe relative dimensions of image size (XPIX, YPIX) should match that of the plotted region. Otherwise the image gets distorted.\n\nThe position parameter POS defines the location of the plot plane on the axis perpendicular to it (e.g. z-coordinate for xy-type plot).\n\nThe minimum and maximum coordinates: MINn, MAXn, define the boundaries of the plotted region (e.g. minimum and maximum x- and y-coordinates for xy-type plot).\n\nIf the coordinates are not provided, the plot is extended to the maximum dimensions of the geometry.\n\nThe second format allows to plot he importance maps read using the wwin card:\n\nThey can be plotted on top of the geometry by setting the second value ('B') of the type parameter for:\n\nCell importances: 4 (linear color scheme) or 5 (logarithmic color scheme)\n\nSource importances: 6 (linear color scheme) or 7 (logarithmic color scheme)\n\nThe input parameters include the minimum and maximum importance (Fmin, Fmax) and the particle energy, E.\n\nIf importance maps are provided for both neutrons and photons, they can be plotted by entering positive and negative energy values, respectively.\n\nIf both, minimum and maximum importance values are set to \"-1\", Serpent automatically adjusts them based on the weight-window mesh data, from version 2.2.0 and on.\n\nIf the calculation fails on providing those minimum and maximum values due to the weight-window evaluation, the values are set by default to (1E-200, 1E+200).\n\nNote to developers: particle type should be included as an input parameter in importance map plots.\n\nMaterial colors:\n\nEach material plotted with different color.\n\nThe colors are sampled randomly, unless defined using the rgb entry in the material card (see mat) or mixture card (see mix)\n\nSpecial RGB-colors:\n\nRGB value Color Description (0, 0, 0) COLOR Outside cell or void-material (0, 255, 0) COLOR No cell found at coordinates (255, 0, 0) COLOR Overlap of multiple cells found at coordinates (255, 0, 255) COLOR Undefined material density factor at coordinates\n\nGeometry plotter requires compiling the source code with GD Graphics libraries.\n\nCommand line options:\n\n-plot stops the execution after the geometry plots are produced\n\n-qp invokes a quick plot mode, which does not check for overlaps\n\n-noplot skips the geometry plots altogether\n\nSee also detailed description on geometry plotter.\n\nThe geometry plot produced by the n-th plot-card is written in file [input]_geom[n].png.\n\nrep (reprocessor definition)\n\nrep NAME [ rc SRC TGT MFLOW MODE ] [ rm MAT1 MAT2 ] [ ru UNI1 UNI2 ]\n\nDefines the reprocessing controllers. The first parameter:\n\nNAME : name of the reprocessor.\n\nThe remaining parameters are defined by separate key words followed by the input values.\n\nNotes:\n\nThe reprocessor name identifies the reprocessing regime in the depletion calculation dep card. The syntax corresponds to dep pro NAME.\n\nMultiple reprocessing controllers/regimes can be defined within the same reprocessor definition.\n\nReprocessing regime types:\n\nReprocessing continuos regime (rc):\n\nSRC : name of the source material, from which the flow is moved TGT : name of the target material, to which the flow is moved MFLOW : name of the material flow MODE : continuous reprocessing mode\n\nNotes:\n\nThe nuclides identifier of those included in both source SRC and target TGT materials in reprocessors should follow the same format\n\nZA.ID or ISO.ID (for nuclides with cross sections) or ZAI (for nuclides without associated cross sections, and adding the fix entry to the mat card).\n\nFor more information, see the detailed description on Nuclide IDs).\n\nThe continuous reprocessing regime works with materials, not universes. Therefore, define the universes associated with those burnable materials as surface-cell type universes.\n\nThe continuous reprocessing regime can be used to define the material flow between the source and the target materials.\n\nThe material flow is defined using the mflow card.\n\nThe continuous reprocessing MODE defines how to incorporate the material flow into the Bateman equations:\n\nMODE Material source Material target Material flow 0 1 2\n\nMODE 0 : no changes at the source material and adds λN0 from the source material to the target material when solving the Bateman equations (N0 are initial compositions).\n\nMODE 1 : subtracts λN from the source material and adds it to the target material when solving the Bateman equations.\n\nMODE 2 : subtracts λNn from the source material and adds it to the target material when solving the Bateman equations (compositions updated with each burnup step, n).\n\nReprocessing material regime (rm):\n\nMAT1 : name of the replaced material MAT2 : name of the replacing material\n\nNotes:\n\nThe material reprocessing regime replaces one material with another, MAT1 by MAT2.\n\nReprocessing universe regime (ru):\n\nUNI1 : name of the replaced universe UNI2 : name of the replacing universe\n\nNotes:\n\nThe universe reprocessing regime replaces one universe with another, UNI1 by UNI2.\n\nsample (temperature / density data sample definition)\n\nsample NX XMIN XMAX NY YMIN YMAX NZ ZMIN ZMAX\n\nSamples values from the initial material temperatures and densities to a file using a Cartesian grid.\n\nInput values:\n\nNX : number of values to sample in the x-direction. XMIN : minimum coordinate to sample from in the x-direction [in cm] XMAX : maximum coordinate to sample from in the x-direction [in cm] NY : number of values to sample in the y-direction. YMIN : minimum coordinate to sample from in the y-direction [in cm] YMAX : maximum coordinate to sample from in the y-direction [in cm] NZ : number of values to sample in the z-direction. ZMIN : minimum coordinate to sample from in the z-direction [in cm] ZMAX : maximum coordinate to sample from in the z-direction [in cm]\n\nNotes:\n\nThe data from each sample is written in a separate output file:\n\nDefault: [input]_sample[n].m, where \"n\" is the sample number.\n\nCoupled multi-physics calculation: [input]_sample[n]_iter[i].m, where \"i\" is the iteration number.\n\nBurnup calculations: [input]_sample[n]_bstep[bu].m, where \"bu\" is the burnup step index.\n\nCoupled multi-physics calculation: [input]_sample[n]_bstep[bu]_iter[i].m\n\nTime-dependent calculations: [input]_sample[n]_tstep[t].m, where \"t\" is the time step index\n\nCoupled multi-physics calculation: [input]_sample[n]_tstep[t]_iter[i].m\n\nSampling units:\n\nDensity: positive values = atomic densities [in b-1 cm-1], negative value = mass density [in g/cm3].\n\nTemperature: [in K]\n\nMaterials with no temperature specified either in their mat card or through an interface ifc card definition will show a temperature of 0 K.\n\nsens (sensitivity calculation definition)\n\nsens pert\n\nsens resp\n\nsens opt\n\nDefinitions for the perturbations, responses and options for sensitivity calculations.\n\nsolid (irregular 3D geometry definition)\n\nsolid 1 UNI0 BGUNI MESH_SPLIT MESH_DIM SZ1 SZ2 ... SZMESH_DIM POINTS_FILE FACES_FILE OWNER_FILE NEIGHBOUR_FILE MATERIALS_FILE\n\nCreates an unstructured mesh-based geometry universe. Input values are:\n\nUNI0 : universe name for the irregular geometry BGUNI : name of the background universe filling all undefined space MESH_SPLIT : splitting criterion for the adaptive search mesh (maximum number of geometry cells in search mesh cell) MESH_DIM : number of levels in the adaptive search mesh SZi : size of the search mesh at level i POINTS_FILE : path to the unstructured mesh points file FACES_FILE : path to the unstructured mesh faces file OWNER_FILE : path to the unstructured mesh owner file NEIGHBOUR_FILE : path to the unstructured mesh neighbour file MATERIALS_FILE : path to the unstructured mesh materials file\n\nNotes:\n\nFor more information on the unstructured mesh based geometry see Unstructured mesh based input.\n\nFor a practical example: Simple umsh 8 cubes input.\n\nsolid 2 UNI0 BGUNI MESH_SPLIT MESH_DIM SZ1 SZ2 ... SZMESH_DIM MODE R0 body BODY1 CELL1 MAT1 file BODY1 FILE1 SCALE1 X1 Y1 Z1 file BODY1 FILE2 SCALE2 X2 Y2 Z2 ... body BODY2 CELL2 MAT2 file BODY2 FILE3 SCALE3 X3 Y3 Z3 file BODY2 FILE4 SCALE4 X4 Y4 Z4 ...\n\nCreates an STL-based geometry universe. Input values are:\n\nUNI0 : universe name for the irregular geometry BGUNI : name of the background universe filling all undefined space MESH_SPLIT : splitting criterion for the adaptive search mesh (maximum number of geometry cells in search mesh cell) MESH_DIM : number of levels in the adaptive search mesh SZi : Size of the search mesh at level i MODE : mode for handling the triangulated geometry (1 = \"fast\", 2 = \"safe\"). R0 : radius inside which two points of the STL-geometry are joined into one. BODYi : name of solid body i CELLi : name of geometry cell i linked with body i MATi : material filling cell i FILEi : path to a file containing an STL solid model, multiple files can be linked to one body SCALEi : scaling factor for the STL model in FILEi Xi : shift in x-direction to the STL model in FILEi Yi : shift in y-direction to the STL model in FILEi Zi : shift in z-direction to the STL model in FILEi\n\nNotes:\n\nSpecial MATi entry: the material entries can be replaced by \"fill UNIi\", in which case the region is filled by another universe, UNIi.\n\nFor a practical example: Stanford critical bunny.\n\nsolid 3 INTERFACE_FILE\n\nCreates an unstructured mesh-based geometry universe with unstructured mesh-based temperature and/or density distributions. Input values are:\n\nINTERFACE_FILE : path to the interface file containing the rest of the parameters\n\nNotes:\n\nFor more information on the unstructured mesh based geometry see Unstructured mesh based input.\n\nFor a practical example: Simple umsh 8 cubes input.\n\nsrc (source definition)\n\nsrc NAME [ PART ] [ sw WGT ] [ sc CELL ] [ su UNI ] [ sm MAT ] [ sp X Y Z ] [ sx XMIN XMAX ] [ sy YMIN YMAX ] [ sz ZMIN ZMAX ] [ srad RMIN RMAX ] [ ss SURF ] [ sd U V W ] [ sa PHI ] [ se E ] [ sb N INTT E1 WGT1 E2 WGT2 ... ] [ sr NUC MT ] [ st TMIN TMIN ] [ sf FILE TYPE ] [ si N P1 P2 ... ] [ sg MAT MODE ]\n\nSource definition. The two first parameters:\n\nNAME : source name PART : particle type (n = neutron, p = photon)\n\nThe remaining parameters are defined by separate key words followed by the input values.\n\nNotes:\n\nThe particle type PART is optional in single particle simulations.\n\nA single source card may include one or several source types.\n\nSource types:\n\nSource weight (sw):\n\nWGT : relative source weight\n\nNotes:\n\nWhen multiple sources are defined, each definition is sampled with equal probability. This probability can be changed by assigning different weights for each source.\n\nThe weights are automatically normalized before the calculation is started.\n\nSource cell (sc):\n\nCELL : cell inside which the source points are sampled\n\nNotes:\n\nSetting a source cell is one of the options that can be applied to define the spatial distribution of source particles.\n\nThe selection is based on rejection sampling, and if the source cell occupies a small volume of the geometry, the sampling efficiency can be increased by defining a bounding box/(vertical) cylinder around the cell (using the sx, sy and sz or sp, srad and sz options, respectively).\n\nIf no spatial distribution is defined, particles are sampled uniformly over the geometry.\n\nSource universe (su):\n\nUNI : universe inside which the source points are sampled\n\nSource material (sm):\n\nMAT : material inside which the source points are sampled\n\nNotes:\n\nSetting a source material is one of the options that can be applied to define the spatial distribution of source particles.\n\nThe selection is based on rejection sampling, and if the source material occupies a small volume of the geometry, the sampling efficiency can be increased by defining a bounding box/(vertical) cylinder around the cell (using the sx, sy and sz or sp, srad and sz options, respectively).\n\nIf no spatial distribution is defined, particles are sampled uniformly over the geometry.\n\nSource point (sp):\n\nX, Y, Z, : coordinates of the source point [in cm]\n\nNotes:\n\nSetting a point source is one of the options that can be applied to define the spatial distribution of source particles.\n\nIf no spatial distribution is defined, particles are sampled uniformly over the geometry.\n\nSource boundaries (sx, sy, sz and srad):\n\nXMIN, XMAX : boundaries on X-axis [in cm] YMIN, YMAX : boundaries on Y-axis [in cm] ZMIN, ZMAX : boundaries on Z-axis [in cm] RMIN, RMAX : radial boundaries [in cm]\n\nNotes:\n\nSource boundaries are used to define a bounding box/(vertical) cylinder inside which the source particles are sampled.\n\nThe radial boundaries are centered around the point defined by sp and can be used in combination with sz.\n\nCan be used in combination with cell and material sources to increase the sampling efficiency.\n\nIf no bounding box is defined, particles are sampled uniformly over the geometry.\n\nSource surface (ss):\n\nSURF : surface on which the source particles are sampled\n\nNotes:\n\nThe surface source is currently limited to infinite vertical cylinder (cyl) and sphere (sph) surface types.\n\nThe default behavior is that particles are started in the direction of the outward surface normal.\n\nPositive and negative surface entries refer to neutrons being emitted in the direction of the positive and negative surface normal, respectively.\n\nMeaning: positive = outward, negative = inward - same convention as for the surface detectors.\n\nSource direction (sd):\n\nU, V, W, : direction vector of source particles\n\nNotes:\n\nThe source direction option can be set to define a unidirectional source.\n\nIf no directional dependence is defined, the direction of source particles is sampled isotropically.\n\nSource angular-aperture (sa):\n\nPHI : polar angle [in degrees]\n\nNotes\n\nThe source angular-aperture option can be set to define the semi-aperture with respect a direction.\n\nThe option requires the definition of a unidirectional source (sd).\n\nSource energy (se):\n\nE : energy of source particles [in MeV]\n\nNotes:\n\nThe source energy option can be used to define a monoenergetic source.\n\nThe default energy of neutrons and photons is 1 MeV.\n\nThis option can also be used together with the source reaction option (sr).\n\nSource energy bins (sb):\n\nN : number of bins INTT : interpolation (0 = line spectrum, 1 = histogram, 2 = lin-lin, 4 = log-lin) En : upper boundary of the energy bin [in MeV] WGTn : weight of the energy bin\n\nNotes:\n\nThis option allows defining an arbitrary source spectrum in the form of tabular data.\n\nThe bins are entered in the order of ascending energy, and weight of the first bin must be set to zero.\n\nInterpolation is given in a separate parameter from version 2.1.31 on.\n\nHere, a simple test input that demonstrates the source spectrum definition.\n\nSource reaction (sr):\n\nNUC : nuclide name MT : reaction number identifier\n\nNotes:\n\nThe source reaction determines a distribution function for source energy (for example, 235U fission spectrum can be defined as: sr 92235.09c 18).\n\nThe reaction numbers are ENDF reaction MT's, and the data is obtained from standard cross section libraries.\n\nApplies to neutrons only.\n\nWhen the source energy parameter (se) is defined, the value is used as the energy of the incoming neutrons.\n\nSource time (st):\n\nTMIN, TMAX : time boundaries [in s]\n\nNotes:\n\nThis parameter defines a time interval for the sampled source particles. The starting time is sampled uniformly between the given minimum and maximum.\n\nAll source particles are started at time zero by default.\n\nSource file (sf):\n\nFILE : file path to source file TYPE : file type (-1 = binary, 1 = ASCII)\n\nNotes:\n\nSource files allow defining arbitrary distributions by reading the particle coordinates, direction, energy, weight and time from a file: [ x y z u v w E wgt t ] .\n\nSource files can be produced using the df entry of detector cards, or the set csw or set gsw options.\n\nUser-defined source routine (si):\n\nN : number of parameters Pn : parameters passed as arguments into the subroutine\n\nNotes:\n\nThis option allows defining an arbitrary source distributions with a user-defined subroutine.\n\nThe source parameters are passed as arguments into the subroutine, together, with sampled position, direction energy, weight and time.\n\nFor complete description see source file \"usersrc.c\".\n\nThe subroutine may be overwritten with the blank template file when installing updates.\n\nRadioactive decay source (sg):\n\nMAT : material name MODE : sampling mode (1 = analog, 2 = implicit)\n\nNotes:\n\nRadioactive decay source combines material compositions to decay data read from ENDF format[3] libraries and forms the normalized source distribution automatically.\n\nRadioactive material:\n\nMaterial compositions can be defined manually, or read from binary restart files produced by a burnup or activation calculation (see the set rfw and set rfr options).\n\nThere is a special entry for the MAT parameter:\n\n\"-1\": to refer to all radioactive materials in the calculation system\n\nSampling mode:\n\nThe analog sampling mode preserves the average number of particles produced in radioactive decay, but may lead to poor sampling efficiency in geometries with both low and high-active materials.\n\nThe implicit sampling mode preserves the total statistical weight of emitted particles and produces a uniform source distribution over activated materials.\n\nThe radiation types included are discrete line and continuum spectra for photon and neutron reactions.\n\nThe radioactive decay source in version 2.1.28 and earlier is limited to photon line spectra.\n\nThe calculation produces an additional output file [input]_gsrc.m or [input]_nsrc.m that contains the gamma/neutron source spectra, respectively.\n\nSee practical example for more information.\n\nstrans (surface transformation)\n\nDefines surface transformations. Shortcut for \"trans s\".\n\nNotes:\n\nThe parameters associated with the transformation follow the standard transformation cards syntax without trans TYPE identifier.\n\nSee transformations.\n\nsurf (surface definition)\n\nsurf NAME TYPE [ PARAM1 PARAM2 ... ]\n\nDefines a surface. Input values:\n\nNAME : is the surface name TYPE : is the surface type PARAMn : are the surface parameters\n\nNotes:\n\nThe name is used to identify the surface, for example, in the cell card.\n\nSee separate description on surface types.\n\nSurfaces can be moved and rotated using transformations.\n\ntherm and thermstoch (thermal scattering)\n\ntherm NAME LIB\n\ntherm NAME TEMP LIB1 LIB2\n\ntherm NAME 0 LIB1 LIB2 LIB3 ...\n\nthermstoch NAME TEMP LIB1 LIB2\n\nDefines thermal scattering data that can be linked to nuclides using input entry moder in the material cards. Input values:\n\nNAME : name of the thermal scattering data LIBi : thermal scattering data identifiers as defined in the directory file (acelib) TEMP : temperature to which the thermal scattering data is interpolated [in K]\n\nNotes:\n\nOn-the-fly thermal motion sampling (TMS) temperature treatment:\n\nIt requires the third value of the therm card to be set to \"0\"\n\nThe thermal scattering data is automatically interpolated to the local temperature.\n\nThe local temperature is either defined using:\n\nthe tms entry in the material card (see mat card)\n\nthe multi-physics interface (see ifc card), where the temperature limits are defined using the tft entry in the material card (see mat card)\n\nThe thermal scattering libraries LIBi must cover the whole range in which the materials appear in the geometry, i.e. data extrapolation is not supported.\n\nInterpolation:\n\nThermal scattering data is interpolated using the methodology of makxsf code[4].\n\nAlternatively, the interpolation can be performed using the stochastic mixing approach with the thermstoch entry.\n\nThis interpolation mode doesn't support on-the-fly interpolation.\n\nThe continuous S(α, β) formalism:\n\nIt is available from version 2.1.32 on.\n\nThe on-the-fly temperature treatment is available from version 2.2.0 and on.\n\ntme (time binning definition)\n\ntme NAME 1 LIM1 LIM2 ...\n\ntme NAME 2 NB Tmin Tmax\n\ntme NAME 3 NB Tmin Tmax\n\nDefines a time binning structure. The second entry sets the binning type (1 = arbitrary, 2 = uniform, 3 = log-uniform). Remaining values:\n\nNAME : name of the time binning NB : number of bins LIMn : time bin boundaries in arbitrary binning [in s] Tmin : minimum time boundary in uniform or log-uniform binning [in s] Tmax : maximum time boundary in uniform or log-uniform binning [in s]\n\nNotes:\n\nThe first limit in the arbitrary type (type = 1), is the lower bound of the first bin. The second limit is the upper bound of the first bin and so on.\n\nTime binning is used with detectors and dynamic simulation mode.\n\ntrans (transformations)\n\ntrans TYPE UNIT [ IDX ] LVL\n\ntrans TYPE UNIT [ IDX ] X Y Z\n\ntrans TYPE UNIT [ IDX ] X Y Z θx θy θz ORD\n\ntrans TYPE UNIT [ IDX ] X Y Z α1 α2 α3 α4 α5 α6 α7 α8 α9 ORD\n\ntrans TYPE UNIT [ IDX ] rot X0 Y0 Z0 I J K β\n\nDefines surface, universe, fill, lattice, detector mesh or source transformation. Input values:\n\nTYPE : type of transformation (S = surface, F = fill, U = universe, L = lattice, D = detector mesh, SR = source) UNIT : surface, cell, universe, lattice, detector mesh or source name to which the transformation is applied IDX : index number of lattice position to which the lattice transformation (type L) is applied LVL : level number in universe level transformation X,Y,Z : translation vector [in cm] θx θy θz : rotation angles with respect to x-, y- and z-axes [in degrees] α1 ... α9 : coefficients of the rotation matrix ORD : order in which translations and rotations are applied (1 = rotations first, 2 = translations first) X0,Y0,Z0 : origin of vector defining rotation axis [in cm] I,J,K : components of vector defining rotation axis. β : angle around rotation axis defined by a vector [in degrees].\n\nThe possible transformation types are:\n\nType Description Notes s surface f fill It is applied in the universe filling the given cell. u universe Special type: level transformation, in which the coordinates in the given universe are obtained relative to geometry level LVL. l lattice It requires to provide the index number IDX of lattice position to which the transformation is applied. d mesh detector It is associated to mesh detectors (such as dx, dy, dz, dh, dn or dmesh, see det card) sr source It is inverted compared to how surface, universe, etc. are handled\n\nNotes:\n\nTranslations: by providing the translation vector.\n\nBy default translations are applied before rotations, and the order can be switched using the ORD parameter.\n\nRotations:\n\nWith respect x-/y-/z-axes: either by providing the three angles with respect to the three coordinate axes, or by defining the rotation matrix.\n\nIn the second case Serpent applies vector multiplication:\n\nwhere and are the position vectors before and after the operation and coefficients α1 ... α9 define the 3 by 3 matrix .\n\nWith respect a general axes: using the rot keyword and associated syntax.\n\nIn Serpent 2.1.29, a positive value of β corresponds to rotation to the negative mathematical direction and vice versa.\n\nBackwards compatibility:\n\nTo preserve backwards compatibility, input parameters \"strans\", \"utrans\", \"ftrans\" and \"dtrans\" without the following type identifier are also accepted for defining surface, universe, fill and detector mesh transformations, respectively.\n\nTo preserve compatibility with Serpent 1, parameter \"trans\" without type identifier defines a universe transformation.\n\ntransb (burnup transformation)\n\ntransb STEP [ <trans> ]\n\nDefines burnup-dependent surface, universe, fill, lattice, detector mesh or source transformation. Input values:\n\nSTEP : depletion step (positive value = burnup [in MWd/kg], negative value = time [in d]) <trans> : list of parameters associated with the transformation\n\nNotes:\n\nThe parameters associated with the transformation follow the standard transformation cards syntax without trans identifier.\n\nStandard properties applicable to regular or non-time dependent transformations apply.\n\nFor more information, see detailed description on transformations (trans card).\n\nGeometry plots associated with burnup transformations are featured from version 2.2.1 and on.\n\ntransv and transa (velocity and acceleration transformations)\n\ntransv TYPE UNIT [ IDX ] [ tlim T0 T1 TTYPE ] VX VY VZ\n\ntransa TYPE UNIT [ IDX ] [ tlim T0 T1 TTYPE ] AX AY AZ\n\nDefines a time-dependent surface, universe, fill, lattice, detector mesh or source transformation. Input values:\n\nTYPE : type of transformation (S = surface, F = fill, U = universe, L = lattice, D = detector mesh, SR = source) UNIT : surface, cell, universe, lattice, detector mesh or source name to which the transformation is applied IDX : index number of lattice position to which the lattice transformation (type L) is applied T0 : beginning time of the transformation [in s] T1 : end time of the transformation [in s] TTYPE : transformation type after end time (1 = movement stops, 2 = transformation removed, 3 = initial acceleration and velocity removed, but velocity accumulated due to acceleration remains) VX,VY,VZ : initial velocity vector [in cm/s] AX,AY,AZ : initial acceleration vector [in cm/s2]\n\nNotes:\n\nStandard properties applicable to regular or non-time dependent transformations apply.\n\nThe transformation is updated at the simulation time-interval boundaries.\n\nThe time-dependent transformation evaluation method option is defined by the set transtime option.\n\nFor practical examples:\n\nSee UGM 2016 Moving geometry.\n\nSee Rotating Translating STL Bunny.\n\numsh (unstructured mesh-based geometry definition)\n\nUNI BGUNI MESH_SPLIT MESH_DIM SZ1 SZ2 ... SZMESH_DIM POINTS_FILE FACES_FILE OWNER_FILE NEIGHBOUR_FILE MATERIALS_FILE\n\nDefines an unstructured mesh-based geometry. Input values:\n\nUNI : universe name for the unstructured mesh-based geometry BGUNI : name of the background universe filling all undefined space MESH_SPLIT : splitting criterion for the adaptive search mesh (maximum number of geometry cells in search mesh cell) MESH_DIM : number of levels in the adaptive search mesh SZi : size of the search mesh at level i POINTS_FILE : path to the unstructured mesh points file FACES_FILE : path to the unstructured mesh faces file OWNER_FILE : path to the unstructured mesh owner file NEIGHBOUR_FILE : path to the unstructured mesh neighbour file MATERIALS_FILE : path to the unstructured mesh materials file\n\nNotes:\n\nFor more information, see the description of the solid description of how to create a 3D unstructured mesh-based universe geometry (solid card, type 1).\n\nutrans (universe transformation)\n\nDefines universe transformations. Shortcut for \"trans u\".\n\nNotes:\n\nThe parameters associated with the transformation follow the standard transformation cards syntax without trans TYPE identifier.\n\nSee transformations.\n\nvoro (stochastic Voronoi tessellation geometry definition)\n\nvoro UNI0 UNIbg R0 -1 NP UNI1 VF1 [ UNI2 VF2 ... ]\n\nvoro UNI0 UNIbg R0 FILE\n\nDefines a stochastic Voronoi tessellation geometry. Input values:\n\nUNI0 : universe name for the Voronoi medium UNIbg : background universe name filling all undefined space R0 : test radius [in cm] NP : number of seed points UNIm : sub-universe name for the m-th random fragmented polyhedral zone VFm : volume fraction associated to m-th random fragmented polyhedral zone FILE : input file containing the Voronoi data\n\nThe syntax of the file containing the Voronoi seed points data is:\n\nX1 Y1 Z1 UNI1 X2 Y2 Z2 UNI1 ... XN YN ZN UNI1 XN+1 YN+1 ZN+1 UNI2 ...\n\nwhere:\n\nXn, Yn, Zn : seed points coordinates [in cm] UNIm : sub-universe name for the m-th random zone associated to the given seed point\n\nNotes:\n\nThe input consists of a list of seed points and associated sub-universes filling the Voronoi cells Alternatively, the number of seeds points and volume fractions of each zone can be provided, letting Serpent sample the positions randomly.\n\nThe advantage of the first option is that the distribution can be defined explicitly, taking into account, for example, the varying level of fragmentation closer to the boundaries.\n\nThe cell search and surfaces distances are based on search mesh and local short-list of points to reduce the computational effort.\n\nThe search mesh is conditioned by the test radius, which should enclose the Voronoi polyhedral cells.\n\nToo small radius may result in geometry errors as some points are excluded from all the search mesh cells in which they should be.\n\nToo large radius may results in including points in cells that do not actually intersect with the polyhedral boundary.\n\nThe DENS parameter in the mcvol input option can be switched \"on\" to compensate the non-preservation of the volume fractions provided as input due to the randomness of the seed points.\n\nIt applies calculated scaling factors to material densities preserving the original masses (scaling factor = volume MC routine / volume given)\n\nwwgen (response matrix based importance map solver)\n\nwwgen NAME LIM NI MOD ERG MSH MIN1 MAX1 SZ1 MIN2 MAX2 SZ2 MIN3 MAX3 SZ3 DET1 W1 [ DET2 W2 ... ]\n\nwwgen NAME LIM NI MOD ERG MSH SZ1 SZ2 SZ3 LIM11 LIM12 ... LIM21 LIM22 ... LIM31 LIM32 ... DET1 W1 [ DET2 W2 ... ]\n\nwwgen NAME LIM NI MOD ERG MSH X0 Y0 P NX NY MIN3 MAX3 SZ3 DET1 W1 [ DET2 W2 ... ]\n\nDefines the parameters for importance map calculation. Input values:\n\nNAME : a unique name to identify the calculation LIM : convergence criterion (typical value 1E-12) NI : maximum number of iterations MOD : solution mode (1 = single detector, 2 = multiple detectors, 3 = global variance reduction) ERG : energy group structure (or -1 if no energy dependence is included) MSH : mesh type (1 = Cartesian, 2 = Cylindrical, 4 = x-type hexagonal, 5 = y-type hexagonal, 6 = unevenly-spaced xyz, 8 = unevenly spaced cylindrical) MINn : minimum mesh boundary (n-th coordinate) MAXn : maximum mesh boundary (n-th coordinate) SZn : number of mesh cells (n-th coordinate) LIMnm : mesh boundary m-th (n-th coordinate) X0, Y0 : mesh center of hexagonal mesh (currently must be centered at the origin) P : hexagonal cell pitch NX, NY : hexagonal mesh size DETi : detectors used as target response functions Wi : weight factors for detector scores\n\nNotes:\n\nThe solution mode provides various options on how the responses are used for calculating the importances.\n\nThe detector entries can be left out in global variance reduction mode (MOD = 3), in which case the mesh is optimized to uniformly populate the entire geometry.\n\nCartesian and cylindrical mesh are defined by outer mesh boundaries and number of mesh cells.\n\nUnevenly-spaced meshes are defined by providing the mesh cell boundaries separately.\n\nThe coordinate axes 1, 2 and 3 in Cartesian mesh refer to (x,y,z) and in cylindrical mesh to (r,θ,z), with θ given in degrees.\n\nThe hexagonal mesh is defined by mesh center, cell pitch, number of cells in the radial dimensions (similar to the hexagonal lattice) and axial binning.\n\nThe mesh must be defined slightly larger than the geometry (the mesh boundaries should not coincide with the geometry boundaries).\n\nSource points located on mesh cell boundaries cause fatal errors.\n\nMay not work if source distribution is biased with weight.\n\nThe importance mesh is printed in file [input].wwd.\n\nImportance (weight window) meshes are read using the wwin card.\n\nSee also practical examples on Variance reduction.\n\nwwin (weight window mesh definition)\n\nwwin NAME [ wf FILE FMT ] [ wn F X Y Z E ] [ wx C G ] [ wt SB TYPE MIN MAX ] [ wi ITP NI WWG1 DF1 WWG2 DF2 ... ] [ wi I"
    }
}