{
    "id": "dbpedia_5752_3",
    "rank": 68,
    "data": {
        "url": "https://stackoverflow.com/questions/11587782/creating-dummy-variables-in-pandas-for-python",
        "read_more_link": "",
        "language": "en",
        "title": "Creating dummy variables in pandas for python",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/kWBRw.png?s=64",
            "https://www.gravatar.com/avatar/c647ebc9ca71273319f172239aa99ac7?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/wApmM.jpg?s=64",
            "https://i.sstatic.net/5CsFl.jpg?s=64",
            "https://i.sstatic.net/g8HIM.jpg?s=64",
            "https://i.sstatic.net/AzOjF.jpg?s=64",
            "https://www.gravatar.com/avatar/41c3f7fc36d3b4eeeb0eb3d82658161c?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/enZ6Q.jpg?s=64",
            "https://i.sstatic.net/mg2WY.jpg?s=64",
            "https://i.sstatic.net/7Bqza.jpg?s=64",
            "https://www.gravatar.com/avatar/ee16279d76634087b8c5ff925afbb9ae?s=64&d=identicon&r=PG",
            "https://lh6.googleusercontent.com/-AyN3wVZTdFk/AAAAAAAAAAI/AAAAAAAAADs/7VEYA9GSbKU/photo.jpg?sz=64",
            "https://lh4.googleusercontent.com/-Bbwa-jKe3ss/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclJZ3KSlWbMzEOvlaUuKzTXW1_gRQ/s96-c/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/38121c7c328607308f22cca4ba0719fe?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/11587782/ivc/6e2b?prg=4a93d334-bfb5-440a-a9d3-c1035688f318"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-07-20T22:33:29",
        "summary": "",
        "meta_description": "I'm trying to create a series of dummy variables from a categorical variable using pandas in python. I've come across the get_dummies function, but whenever I try to call it I receive an error that...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/11587782/creating-dummy-variables-in-pandas-for-python",
        "text": "When I think of dummy variables I think of using them in the context of OLS regression, and I would do something like this:\n\nimport numpy as np import pandas as pd import statsmodels.api as sm my_data = np.array([[5, 'a', 1], [3, 'b', 3], [1, 'b', 2], [3, 'a', 1], [4, 'b', 2], [7, 'c', 1], [7, 'c', 1]]) df = pd.DataFrame(data=my_data, columns=['y', 'dummy', 'x']) just_dummies = pd.get_dummies(df['dummy']) step_1 = pd.concat([df, just_dummies], axis=1) step_1.drop(['dummy', 'c'], inplace=True, axis=1) # to run the regression we want to get rid of the strings 'a', 'b', 'c' (obviously) # and we want to get rid of one dummy variable to avoid the dummy variable trap # arbitrarily chose \"c\", coefficients on \"a\" an \"b\" would show effect of \"a\" and \"b\" # relative to \"c\" step_1 = step_1.applymap(np.int) result = sm.OLS(step_1['y'], sm.add_constant(step_1[['x', 'a', 'b']])).fit() print result.summary()\n\nIt's hard to infer what you're looking for from the question, but my best guess is as follows.\n\nIf we assume you have a DataFrame where some column is 'Category' and contains integers (or otherwise unique identifiers) for categories, then we can do the following.\n\nCall the DataFrame dfrm, and assume that for each row, dfrm['Category'] is some value in the set of integers from 1 to N. Then,\n\nfor elem in dfrm['Category'].unique(): dfrm[str(elem)] = dfrm['Category'] == elem\n\nNow there will be a new indicator column for each category that is True/False depending on whether the data in that row are in that category.\n\nIf you want to control the category names, you could make a dictionary, such as\n\ncat_names = {1:'Some_Treatment', 2:'Full_Treatment', 3:'Control'} for elem in dfrm['Category'].unique(): dfrm[cat_names[elem]] = dfrm['Category'] == elem\n\nto result in having columns with specified names, rather than just string conversion of the category values. In fact, for some types, str() may not produce anything useful for you.\n\nFor my case, dmatrices in patsy solved my problem. Actually, this function is designed for the generation of dependent and independent variables from a given DataFrame with an R-style formula string. But it can be used for the generation of dummy features from the categorical features. All you need to do would be drop the column 'Intercept' that is generated by dmatrices automatically regardless of your original DataFrame.\n\nimport pandas as pd from patsy import dmatrices df_original = pd.DataFrame({ 'A': ['red', 'green', 'red', 'green'], 'B': ['car', 'car', 'truck', 'truck'], 'C': [10,11,12,13], 'D': ['alice', 'bob', 'charlie', 'alice']}, index=[0, 1, 2, 3]) _, df_dummyfied = dmatrices('A ~ A + B + C + D', data=df_original, return_type='dataframe') df_dummyfied = df_dummyfied.drop('Intercept', axis=1) df_dummyfied.columns Index([u'A[T.red]', u'B[T.truck]', u'D[T.bob]', u'D[T.charlie]', u'C'], dtype='object') df_dummyfied A[T.red] B[T.truck] D[T.bob] D[T.charlie] C 0 1.0 0.0 0.0 0.0 10.0 1 0.0 0.0 1.0 0.0 11.0 2 1.0 1.0 0.0 1.0 12.0 3 0.0 1.0 0.0 0.0 13.0\n\nHandling categorical features scikit-learn expects all features to be numeric. So how do we include a categorical feature in our model?\n\nOrdered categories: transform them to sensible numeric values (example: small=1, medium=2, large=3) Unordered categories: use dummy encoding (0/1) What are the categorical features in our dataset?\n\nOrdered categories: weather (already encoded with sensible numeric values) Unordered categories: season (needs dummy encoding), holiday (already dummy encoded), workingday (already dummy encoded) For season, we can't simply leave the encoding as 1 = spring, 2 = summer, 3 = fall, and 4 = winter, because that would imply an ordered relationship. Instead, we create multiple dummy variables:\n\n# An utility function to create dummy variable `def create_dummies( df, colname ): col_dummies = pd.get_dummies(df[colname], prefix=colname) col_dummies.drop(col_dummies.columns[0], axis=1, inplace=True) df = pd.concat([df, col_dummies], axis=1) df.drop( colname, axis = 1, inplace = True ) return df`"
    }
}