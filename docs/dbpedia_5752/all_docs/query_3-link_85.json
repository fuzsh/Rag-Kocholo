{
    "id": "dbpedia_5752_3",
    "rank": 85,
    "data": {
        "url": "https://www.stata.com/support/faqs/data-management/creating-dummy-variables/",
        "read_more_link": "",
        "language": "en",
        "title": "FAQ: Creating dummy variables",
        "top_image": "http://www.stata.com/includes/images/stata-fb.jpg",
        "meta_img": "http://www.stata.com/includes/images/stata-fb.jpg",
        "images": [
            "https://www.stata.com/includes/ir18/stata18-dvd-case.png",
            "https://www.stata.com/includes/images/stata-logo-blue.svg",
            "https://www.stata.com/includes/images/youtube@2x.png",
            "https://www.stata.com/includes/images/instagram@2x.png",
            "https://www.stata.com/includes/images/linkedin@2x.png",
            "https://www.stata.com/includes/images/x-twitter@2x.png",
            "https://www.stata.com/includes/images/facebook@2x.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "How do I create dummy variables?",
        "meta_lang": "en",
        "meta_favicon": "/favicon-no-number.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "How do I create dummy variables?\n\nTitle Creating dummy variables Author William Gould, StataCorp\n\nA dummy variable is a variable that takes on the values 1 and 0; 1 means something is true (such as age < 25, sex is male, or in the category “very much”).\n\nDummy variables are also called indicator variables.\n\nAs we will see shortly, in most cases, if you use factor-variable notation, you do not need to create dummy variables.\n\nIn cases where factor variables are not the answer, you may use generate to create one dummy variable at a time and tabulate to create a set of dummies at once.\n\nUsing factor variables instead of generating dummy variables\n\nI have a discrete variable, size, that takes on discrete values from 0 to 4\n\n. tabulate size size | Freq. Percent Cum. ------------+----------------------------------- miniature | 19 19.00 19.00 small | 37 37.00 56.00 normal | 30 30.00 86.00 large | 12 12.00 98.00 huge | 2 2.00 100.00 ------------+----------------------------------- Total | 100 100.00\n\nIf I want a dummy for all levels of size except for a comparison group or base level, I do not need to create 4 dummies. Using [U] factor variables, I may type\n\n. summarize i.size\n\nor use an estimator\n\n. regress y x i.size\n\nIf I want to use a dummy that is 1 if size is large (size==3) and 0 otherwise, I type\n\n. regress y x 3.size\n\nIf I want to make the comparison group, or base level, of size be size==3 instead of the default size==0, I type\n\n. regress y x ib3.size\n\nYou can also use factor-variable notation to refer to categorical variables, their interactions, or interactions between categorical and continuous variables.\n\nFor example, I can specify the interaction of each level of size (except the base level) and the continuous variable x by typing\n\n. regress y x i.size#c.x\n\nThe c. instructs Stata that variable x is continuous.\n\nIn all the cases above, you did not need to create a variable.\n\nMoreover, many of Stata's postestimation facilities, including in particular the margins command, are aware of factor variables and will handle them elegantly when making computations.\n\nThere are some instances where creating dummies might be worthwhile. We illustrate these below.\n\nUsing generate to create dummy variables\n\nYou could type\n\n. generate young = 0 . replace young = 1 if age<25\n\nor\n\n. generate young = (age<25)\n\nThis statement does the same thing as the first two statements. age<25 is an expression, and Stata evaluates it; returning 1 if the statement is true and 0 if it is false.\n\nIf you have missing values in your data, it would be better if you type\n\n. generate young = 0 . replace young = 1 if age<25 . replace young = . if missing(age)\n\nor\n\n. generate young = (age<25) if !missing(age)\n\nStata treats a missing value as positive infinity, so the expression age<25 evaluates to 0, not missing, when age is missing. (If the expression were age>25, the expression would evaluate to 1 when age is missing.)\n\nYou do not have to type the parentheses around the expression.\n\n. generate young = age<25 if !missing(age)\n\nis good enough. Here are some more illustrations of generating dummy variables:\n\n. generate male = sex==1 . generate top = answer==\"very much\" . generate eligible = sex==\"male\" & (age>55 | (age>40 & enrolled)) if !missing(age)\n\nIn the above line, enrolled is itself a dummy variable—a variable taking on values zero and one. We could have typed & enrolled==1, but typing & enrolled is good enough.\n\nJust as Stata returns 1 for true and 0 for false, Stata assumes that 1 means true and that 0 means false.\n\nUsing tabulate to create dummy variables\n\ntabulate with the generate() option will generate whole sets of dummy variables.\n\nSay that variable group takes on the values 1, 2, and 3. If you type\n\n. tabulate group\n\nyou will see a frequency table of how many times group takes on each of those values. If you type\n\n. tabulate group, generate(g)\n\nyou will see the table, and tabulate will create variable names g1, g2, and g3 that take on values 1 and 0, g1 being 1 when group==1, g2 being 1 when group==2, and g3 being 1 when group==3. Watch:\n\n. list +-------+ | group | |-------| 1. | 1 | 2. | 3 | 3. | 2 | 4. | 1 | 5. | 2 | |-------| 6. | 2 | +-------+ . tabulate group, generate(g) group | Freq. Percent Cum. ------------+----------------------------------- 1 | 2 33.33 33.33 2 | 3 50.00 83.33 3 | 1 16.67 100.00 ------------+----------------------------------- Total | 6 100.00 . list +----------------------+ | group g1 g2 g3 | |----------------------| 1. | 1 1 0 0 | 2. | 3 0 0 1 | 3. | 2 0 1 0 | 4. | 1 1 0 0 | 5. | 2 0 1 0 | |----------------------| 6. | 2 0 1 0 | +----------------------+\n\nWhat you name the variable is up to you. If we had typed\n\n. tabulate group, generate(res)\n\nthe new variables would have been named res1, res2, and res3.\n\nIt is also not necessary for the variable being tabulated to take sequential values or even be integers. Here is another example:\n\n. list +------+ | x | |------| 1. | -1 | 2. | 3.14 | 3. | 8 | 4. | -1 | 5. | 8 | +------+ . tabulate x, generate(xval) x | Freq. Percent Cum. ------------+----------------------------------- -1 | 2 40.00 40.00 3.14 | 1 20.00 60.00 8 | 2 40.00 100.00 ------------+----------------------------------- Total | 5 100.00 . list +------------------------------+ | x xval1 xval2 xval3 | |------------------------------| 1. | -1 1 0 0 | 2. | 3.14 0 1 0 | 3. | 8 0 0 1 | 4. | -1 1 0 0 | 5. | 8 0 0 1 | +------------------------------+\n\nYou can find out what the values are from describe:\n\n. describe Contains data obs: 5 vars: 4 size: 55 ------------------------------------------------------------------------ storage display value variable name type format label variable label ------------------------------------------------------------------------ x float %9.0g xval1 byte %8.0g x== -1.0000 xval2 byte %8.0g x== 3.1400 xval3 byte %8.0g x== 8.0000 ------------------------------------------------------------------------ Sorted by: Note: dataset has changed since last saved\n\nFinally, tabulate can be used with string variables:"
    }
}