{
    "id": "wrong_mix_domain_foundationPlace_00002_1",
    "rank": 28,
    "data": {
        "url": "https://stdcxx.apache.org/",
        "read_more_link": "",
        "language": "en",
        "title": "Apache C++ Standard Library",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://stdcxx.apache.org/images/stdcxx.png",
            "https://stdcxx.apache.org/images/rc-b-l-15-1body-2menu-3menu.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Apache C++ Standard Library (STDCXX)\n\nWhat is the Apache C++ Standard Library?\n\nThe Apache C++ Standard Library project (code name stdcxx, pronounced \"standard C++ library\", not S-T-D-C-X-X) is a collection of algorithms, containers, iterators, and other fundamental components of every piece of software, implemented as C++ classes, templates, and functions essential for writing C++ programs.\n\nThe goal of the Apache C++ Standard Library is to provide a free implementation of the ISO/IEC 14882 international standard for C++ that enables source code portability and consistent behavior of programs across all major hardware implementations, operating systems, and compilers, open source and commercial alike. An additional goal is to achieve maximum implementation efficiency on each platform by taking advantage of platform-specific high-performance facilities and features which are often unique to the type of hardware, the operating system or the compiler.\n\nAs the starting point for future efforts, in summer 2005 Rogue Wave Software has contributed its commercial implementation of the C++ Standard Library to the Apache stdcxx project, a proven code base that has been shipping for over a decade and is among the most widely used cross-platform implementations of the library.\n\nThe key features of the stdcxx project at the time of submission include:\n\nFull conformance to the C++ standard\n\nComplete implementation of the localization library independent of the underlying operating system, including a large set of locale definition files, character set description files, and utility programs to process these files and generate locale databases\n\nUser control over strict or permissive conformance checking\n\nThread-safe implementation of strings, iostreams, and locales\n\nReference counted basic_string implementation using atomic locking with the ability to switch to a non-reference counted implementation\n\nExcellent runtime performance\n\nOptimized for fast compiles and extremely small executable file sizes\n\nPortable to and fully tested on a large set of operating systems, including AIX, HP-UX, Linux, Solaris, Windows, etc.\n\nPortable to most leading commercial as well as open source compilers\n\nDebugging facilities such as safe iterators, precondition and postcondition checking, and the ability to generate stack traces\n\nFully documented configuration and build infrastructure\n\nThorough, well-maintained documentation\n\nTen years of deployment in the world's most critical enterprise systems\n\nObjectives\n\nThe long-term objectives of the project include:\n\nStandards Conformance. Continue to closely track the C++ Standard, as well as any other relevant standards.\n\nPortablity. Continue to provide support for a broad set of platforms (C++ compilers, operating systems, and hardware architectures).\n\nQuality of Implementation. Maintain the current high quality of implementation, which has come to be expected of all Apache projects. This ranges from high runtime efficiency to high space efficiency, to high portability of data (in areas such as localization and internationalization which are typically not specified by the C++ or C standards), to facilitating the portability of program source code.\n\nProject News\n\n5/1/2008 STDCXX 4.2.1 released.\n\n12/14/2007 STDCXX graduates from the Incubator and becomes a Top Level Project.\n\n11/29/2007 STDCXX community adds a new committer, Travis Vitek.\n\n10/29/2007 With the approval of the Incubator PMC, STDCXX 4.2.0 was released.\n\n10/16/2007 Proposal to graduate STDCXX to a Top Level Project passes the Incubator PMC vote.\n\n9/5/2007 STDCXX community adds two new committers, Eric (Brad) Lemings and Mark Brown.\n\n10/11/2006 STDCXX community adds a new committer, Andrew Black.\n\n8/26/2007 Started tracking project metrics at www.ohloh.net under Apache C++ Standard Library.\n\n6/1/2007 Started tracking site visitation at Google Analytics under stdcxx. Send an email from your Google Mail account to dev to request access to the account.\n\n3/26/2007 Tim Triemstra joins the PPMC.\n\n2/13/2007 Andrew Black and Farid Zaripov join the PPMC.\n\n10/11/2006 STDCXX community adds a new committer, Andrew Black.\n\n8/10/2006 STDCXX community adds a new committer, Farid Zaripov.\n\n1/30/2006 With the approval of the Incubator PMC, STDCXX 4.1.3 was released.\n\n1/13/2006 STDCXX community adds a new committer, Anton Pevtsov.\n\n11/25/2005 Windows configuration and build infarstructure committed to Subversion (stdcxx-5).\n\n9/16/2005 The first snapshot of stdcxx 4.1.2 has been published.\n\n9/5/2005 The test suite driver committed to Subversion (stdcxx-3).\n\n9/1/2005 A proposal to publish the first stdcxx snapshot on the stdcxx Web site has passed the community vote.\n\n8/28/2005 The process of downloading stdcxx files documented on the Download page. (See stdcxx-17).\n\n8/01/2005 The process of reporting bugs in the stdcxx bug tracking database documented and published on the Bugs page. (See stdcxx-9.)\n\n7/19/2005 stdcxx project page committed to Subversion. The project status page committed to Subversion.\n\n7/18/2005 stdcxx sources and documentation committed Subversion.\n\n5/19/2005 stdcxx project accepted for incubation.\n\n5/13/2005 stdcxx project proposal submitted to the Incubator mailing list.\n\nPlatforms\n\nA key stdcxx objective is to facilitate the portability of C++ programs to as many platforms (hardware architectures, operating systems, and compilers) as practical. It is envisaged that the set of platforms will evolve and grow as the project attracts contributors.\n\nThe project sources initially committed to the Subversion repository (revision 219596) are based on Rogue Wave C++ Standard Library version 4.1.0. The list of platforms to which this version of the project was ported (but which is expected to grow as the stdcxx project evolves) is:\n\ncompiler operating system processor/architecture Comeau C++ 4.2.4 or later Solaris 7 or later UltraSPARC Compaq C++ 6.3 or later Tru64 UNIX Alpha EDG eccp 2.45.2 or later Linux, Solaris 7 or later x86, UltraSPARC GNU gcc 2.95.2 or later AIX, Cygwin, HP-UX, Linux, SFU, Solaris HP aC++ 3.33 or later HP-UX 11.00, HP-UX 11i HP-UX 11i v2 PA-RISC HP aC++ 5.50 or later HP-UX 11i v1.5 , HP-UX 11i v1.6 HP-UX 11i v2 IPF IBM VisualAge C++ 5.0 or later AIX 4.3.3 or later PowerPC IBM XL C/C++ 7.0 or later AIX 5.2 or later, Linux PowerPC Intel C++ 7.0 or later Linux, Windows NT or later x86, AMD64 , EM64T, IA64 SGI MIPSpro 7.3 or later SGI IRIX MIPS Visual C++ 6.0 Windows NT or later x86 Visual C++ .NET 2002 (7.0) Windows 2003 or later IA64 Visual C++ 2005 (8.0) Windows 2003 or later IA64 Sun C++ 5.3 or later Solaris 2.6 or later UltraSPARC Sun C++ 5.7 or later Solaris 10 or later x86, AMD64, EM64T\n\nProject Status\n\nStdcxx status reports to the ASF Board of Directors are stored in the status/ subdirectory of the site.\n\nUsers\n\nStdcxx Users are Developers with read-only access, i.e., without Commit Access to the stdcxx Codebase who are using the project.\n\nThe mailing list appropriate for discussions of using the stdcxx project is user@stdcxx.apache.org. This is an archived, moderated mailing list open to all subscribers. You may subscribe by sending a blank email to user-subscribe@stdcxx.apache.org. To obtain additional information about this list send a blank email to user-info@stdcxx.apache.org.\n\nContributors\n\nStdcxx Contributors are Developers without commit (or write) access to the stdcxx codebase who directly or otherwise make improvements to the project codebase, including its Web pages. This includes but is not limited to individuals who respond to questions on the project's mailing lists, review and provide helpful feedback on patches or commits, submit, provide helpful comments on, or triage bug reports, or contribute useful patches of their own. Interested contributors may be voted to become Committers after a period of valuable activity.\n\nBecause Contributors have read but not write access to stdcxx code repository, they can check stdcxx out and make changes to their local copy of stdcxx files but they cannot check them back in. To get their changes committed, they must follow the process for Submitting Patches.\n\nThe stdcxx community welcomes new contributors. If you are interested in getting involved, the first thing to do after reading the project Web pages is to subscribe to the dev mailing list and skimming the archives. If you're looking for ideas for where your help might be needed, browse the bug database or simply ask on the maling list.\n\nCommitters\n\nStdcxx Committers are Developers with commit (or write) access to the stdcxx codebase. For safe changes on trunk all stdcxx committers follow the Commit-Then-Review policy (CTR for short). For potentially unsafe changes or any changes to branches all stdcxx committers follow the Review-Then-Commit policy (RTC for short). Whether a change is safe or not is a judgment call that should be made after careful testing of the change on at least two different platforms with two different compilers. The list of current committers in alphabetical order is below:\n\nuser id name/email affiliation since comment ablack Andrew Black Rogue Wave Software, Inc. Oct 11, 2006 mbrown Mark Brown Sep 5, 2007 hbuelow Heidi Buelow May 19, 2005 Emeritus ldiduck Lance Diduck May 19, 2005 jhollis John Hollis Rogue Wave Software, Inc. May 19, 2005 Emeritus ajindal Amit Jindal Aquevix, Ltd. May 19, 2005 elemings Eric (Brad) Lemings Sep 5, 2007 lnicoara Liviu Nicoara May 19, 2005 rpalepu Ravi Palepu May 19, 2005 Emeritus antonp Anton Pevtsov VDI Jan 3, 2006 sebor Martin Sebor Cisco Systems, Inc. May 19, 2005 ttriemstra Tim Triemstra Apple May 19, 2005 vitek Travis Vitek Rogue Wave Software, Inc. November 29, 2007 faridz Farid Zaripov EPAM Aug 10, 2006\n\nCommitters in italics do not yet have a signed Contributor License Agreement on file. This indicates a transient state after a committer has been voted in but their CLA hasn't been received or processed by the foundation.\n\nAn up-to-date list of all Apache committers (or committers-to-be) is being maintained by Jim Jagielski on this page.\n\nThe mailing list used by stdcxx committers for discussions of the maintenance, development, and porting of the stdcxx project is dev@stdcxx.apache.org. This is an archived, moderated mailing list open to all subscribers. You may subscribe by sending a blank email to dev-subscribe@stdcxx.apache.org.\n\nPMC\n\nCommunication\n\nCommunication about the project and all decisions take place on the project's mailing lists. There are a number good reasons why communicating on mailing lists is preferable to other ways of communicating, including private email or instant messaging. Some of the important ones include:\n\nUnlike communicating in private, mailing lists make it possible for all list subscribers to benefit from the discussion, and provides an opportunity for those who wouldn't be invited to the private discussion to offer their own feedback on the subject.\n\nUnlike Instant Messaging, mailing list make it possible for interested parties to participate asynchronously, regardless of which time zone they are located in.\n\nUnlike private communications, mailing list discussions are archived for future reference, with the archives being easily searchable by anyone interested. Mailing list archives are important not just so that new contributors can learn from past decisions but they are an indispensable tool also for long-time committers when we forget why certain things were done a certain way.\n\nIt is the preferred mode of communicating for all Apache projects. See the Communication section of How the ASF works.\n\nIf you choose to contact one of the project committers in private expect to be directed to the mailing lists.\n\nMailing Lists\n\nThe following table provides a summary of information about stdcxx mailing lists along with a number of interfaces to their archives. All lists are moderated. Only subscribers may post. Subscription to private is by invitation of the PMC only. With one exception, the activity of each list is monitored and can be viewed along with other interesting information on this page maintained by Ken Coar.\n\nReferences\n\nA number of excellent design and programming books describe the C++ Standard Library in an approachable way. In addition, besides the required Class Reference, this implementation of the library also includes an extensive User Guide complete with tutorials and example programs. That being said, the ultimate reference to the C++ Standard Library is, of course, the C++ Standard itself (and to a smaller extent, also the C Standard). An electronic copy of the most recent version of the C++ and C standards can be obtained from the ANSI eStandards store.\n\nINCITS/ISO/IEC 14882-2003 Programming Languages  C++\n\nINCITS/ISO/IEC 9899-1999 Programming Languages  C\n\nThe C++ Standard Library: A Tutorial and Reference by Nicolai M. Josuttis\n\nGeneric Programming and the STL: Using and Extending the C++ Standard Template Library by Matthew H. Austern\n\nStl Tutorial & Reference Guide: C++ Programming With the Standard Template Library by David R. Musser and Atul Saini\n\nThe C++ Standard Template Library by P.J. Plauger, Alexander A. Stepanov, Meng Lee, and David R. Musser\n\nEffective STL: 50 Specific Ways to Improve Your Use of the Standard Template Library by Scott Meyers\n\nStandard C++ IOStreams and Locales: Advanced Programmer's Guide and Reference by Angelika Langer, Klaus Kreft"
    }
}