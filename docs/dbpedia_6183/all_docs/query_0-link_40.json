{
    "id": "dbpedia_6183_0",
    "rank": 40,
    "data": {
        "url": "https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes",
        "read_more_link": "",
        "language": "en",
        "title": "Visual Studio 2022 release notes",
        "top_image": "https://learn.microsoft.com/en-us/visualstudio/productinfo/media/vs-background.jpg",
        "meta_img": "https://learn.microsoft.com/en-us/visualstudio/productinfo/media/vs-background.jpg",
        "images": [
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/2022_logo.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/17.11p1-aios-scoping-menu.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/17.11p3-codelens-timeline-fix.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/17.11p3-pull-request-create-updates.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/17.11p1-view-pull-request-comments.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/remapshortcuts-thumbnail.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/feature-search.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/copilot-symbols.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/ontheflydocscsharp.gif",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/copilot-is-getting-smarter.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/content-exclusion.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/completions-to-inline.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/inline-refreshed.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/inline-to-chat.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/rename-suggestions.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/ai-variable-lookup.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/ai-bp-suggestionscpp.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/asyncexceptionbreak.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/instrumentation-target-persists.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/profiler-source-decompilation.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/blazorwasmdebuggerimprovements.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/default_breakpoint_group.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/editableexp_before.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/editableexp_after.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-conditional-bp-perf.gif",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/private-extension-in-vsconfig-thumbnail2.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/config-file-with-extensions-in-solution.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/receive-updates-from-mu.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/ttk_empty_app.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/ttk_search_me_auth.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/wam.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/endpoints-explorer-restaurantapi.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/npm-packages-in-sol-exp.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-ue-add-class-new.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-ue-add-module.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-ue-add-plugin.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-ue-toolbar.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/resource-explorer-gridview.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-build-insights-qol.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/cpp-cmake-debugger-linux.png",
            "https://learn.microsoft.com/en-us/visualstudio/releases/2022/media/17.11/custom_clang_tidy.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "visualstudio"
        ],
        "tags": null,
        "authors": [
            "DeDiv-VR"
        ],
        "publish_date": "2024-08-13T17:22:00+00:00",
        "summary": "",
        "meta_description": "Learn about the latest features, bug fixes, and support for Visual Studio 2022. Download today.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/visualstudio/releases/2022/release-notes",
        "text": "Version 17.11\n\nReleased August 13th, 2024\n\nThis release focuses on quality-of-life enhancements for all developers and workloads. When you use Visual Studio, you want to feel empowered and productive. That's why quality-of-life features are so important: they make coding a smooth and enjoyable experience, free of unnecessary hassles and headaches. We hope you'll love this update.\n\nProductivity From the community Find the code you're looking for Feedback ticket Fix for CodeLens timeline Feedback ticket Updates to pull request creation More meaningful code reviews Feedback ticket Familiar keyboard shortcuts Feedback ticket\n\nGitHub Copilot From the community Refer to your methods in GitHub Copilot Understand your symbols with GitHub Copilot Feedback ticket GitHub Copilot is getting smarter GitHub Copilot is even more secure Refine your GitHub Copilot suggestions Naming things made easy AI smart variable inspecetion AI-generated breakpoint expressions\n\nDebugging & diagnostics From the community Easier to fix async exceptions Feedback ticket Profile faster and more consistently Profile external code with ease Feedback ticket Improved debugging on Arm64 Blazor WebAssembly debugging Auto-add breakpoints to the default group Feedback ticket Expressive IEnumerable Visualizer Faster C++ breakpoints\n\nIDE From the community Never miss installing a component Feedback ticket Stay updated and secure Feedback ticket New Teams Toolkit templates Improved user authentication\n\nWeb From the community Discover dynamic Web API routes Feedback ticket NPM packages in Solution Explorer\n\nGaming From the community Unreal Engine Add Class Templates Feedback ticket Unreal Engine Add Module Feedback ticket Unreal Engine Add Plugin Unreal Engine Toolbar\n\n.NET From the community Revamped Resource Explorer Feedback ticket\n\nC++ From the community Build Insights QoL Update Debug your CMake projects on Linux Feedback ticket Custom Clang-Tidy Executable\n\nTop bug fixes From the community TS1109 (TS) Expression expected error in Razor file Feedback ticket Rich copy/paste of C# source code into Office fails Feedback ticket Incorrect error with in-class pointer to member variable Feedback ticket MSVC v19.37+ incorrect code gen for arithmetic expressions Feedback ticket C4506 (no definition for inline function) incorrectly reported for template spec... Feedback ticket Missing integral types overload for cmath functions Feedback ticket GitHub Copilot has a 'References' button that is mistranslated Feedback ticket After updating to VS 17.10 the size of .ilk files has increased considerably Feedback ticket Visual Studio jump list doesn't add recently opened solutions any more Feedback ticket\n\nProductivity\n\nFind the code you're looking for\n\nNarrow down a code search from the entire solution to the current document or current project.\n\nDo you ever feel like you're seeing too many results in code search? Narrow down your focus with the newly added scoping options in Code Search.\n\nFor the default code search experience and each filter, you can now set the scope to Entire solution, Current project, or Current document and toggle inclusion of external files.\n\nYou can set different scopes for different filters. For example, the default experience can be set to look through Entire solution and members can be set to look through only current document. Your selections will be preserved past the current session.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nFix for CodeLens timeline\n\nFix to respect configuration of your CodeLens timeline to show the correct information.\n\nCodeLens timeline now respects the configuration of your timeline to show the correct information. This fix addresses an issue where the timeline was not honoring the months set in the file changes hover preview.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nContinual improvements to the pull request creation experience.\n\nWe've improved on the create a pull request experience with target branch selection, commit counts, and other stabilization fixes. Additionally, we now automatically create links to work items that have been mentioned in commits that are part of the pull request.\n\nView your Azure DevOps and GitHub pull request comments directly in your working file.\n\nWe've made it easier to view your GitHub and Azure DevOps pull request comments directly in your working file in Visual Studio. You can now stay in your context, make necessary code changes, and interact with your colleagues' suggestions without switching contexts to the browser.\n\nNew Improvements\n\nEnable the feature flag, Pull Request Comments, checkout any branch with an active pull request branch, and click on Show comments in files in the InfoBar.\n\nThe latest improvements include better support for @ mentions and work item references, visual improvements to the attention dot and comment margin, the addition of avatars, better sync with the server, and an additional entry point in the Git changes window.\n\nð£ See feature ticket to share your feedback and continue the conversation. And take this survey to help make the feature even better.\n\nFamiliar keyboard shortcuts\n\nSome common keyboard shortcuts now match those in other popular IDEs.\n\nWhen moving between different IDEs and editors, it can be frustrating to have to relearn keyboard shortcuts. We've made some changes to some default keyboard shortcuts to make them more familiar and to preserve your muscle memory.\n\nYou've been able to toggle line comments in Visual Studio for a long time, but the default keyboard shortcut was Ctrl+K, Ctrl+/. We've now added Ctrl+/ as an alternative shortcut, which is the default in many other IDEs and editors.\n\nOpen Command Palette\n\nOr Feature Search as it's called in Visual Studio. The default keyboard shortcut for this feature is now Ctrl+Shift+P, which should be familiar to VS Code users for opening the Command Palette.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nGitHub Copilot\n\nRefer to your methods in GitHub Copilot\n\nGitHub Copilot Chat now allows you to refer to your methods, classes, and functions inline. This feature helps you to provide more context to GitHub Copilot, which in turn helps it to provide more accurate responses with GitHub Copilot having an even deeper understanding of your solution.\n\nBy referring to methods, classes, and functions directly within the chat, you can provide specific context that helps GitHub Copilot better comprehend their code and the problem at hand. This feature empowers you to provide richer context to GitHub Copilot, enabling it to deliver more precise responses by gaining a deeper understanding of your codebase.\n\nHow to refer to your symbols in GitHub Copilot Chat\n\nTo refer to your symbols, simply use the # symbol followed by the name of the method, class, or function you want to reference.\n\nTry asking GitHub Copilot Chat\n\nTry asking GitHub Copilot Chat questions like:\n\nI have a test method named #methodName. How can I ensure that it's being executed correctly?\n\nCould you help me understand the differences between the #methodName1 and #methodName2 functions?\n\nWhere is the output of the #methodName function used in my code, and what purpose does it serve?\n\n/explain #methodName\n\nUnderstand your symbols with GitHub Copilot\n\nGitHub Copilot assists you in understanding symbols at different invocations without your code base.\n\nGitHub Copilot is now integrated into the tooltip on hover over symbols to provide AI-generated summaries of the selected symbol. This is available for both C# and C++ developers. This feature assists developers in understanding descriptions of various symbols at different invocations within their codebase. By hovering over a symbol and selecting the Tell me more option in the hover tooltip, GitHub Copilot can generate documentation for the selected symbol.\n\nLeveraging LLMs, GitHub Copilot enhances existing or lacking code documentation by providing insightful explanations and context within hover tooltips.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nGitHub Copilot is getting smarter\n\nGitHub Copilot now includes context from your entire repository & can search the web.\n\nGitHub Copilot Enterprise subscribers in Visual Studio can now use GitHub Copilot Chat to get answers enriched with context from their entire repository and Bing search results.\n\nGet answers from across your entire codebase\n\nGitHub Copilot Chat can now answer questions with understanding of your full repository, not just the tabs you have open. Index your repository on GitHub.com, and then ask a question mentioning @github. You can ask questions like @github where is rate limiting implemented?\n\nSearch with the context of the web\n\nGitHub Copilot chat can also search Bing to find information outside of its general knowledge or your codebase. When you mention @github, GitHub Copilot will intelligently decide when to use Bing. You can ask questions like @github what is the latest LTS version of Node.js?\n\nBing search is only available if enabled by an administrator - for more details, see Enabling GitHub Copilot Enterprise features or read the docs.\n\nGitHub Copilot is even more secure\n\nGitHub Copilot Business customers to prevent specified files or repositories from being used to inform code completion suggestions made by GitHub Copilot.\n\nGitHub Copilot Content Exclusion is available for GitHub Copilot Business, and GitHub Copilot Enterprise customers to prevent specified files or repositories from being used to inform code completion suggestions made by GitHub Copilot.\n\nKeep your code secure\n\nGitHub Copilot will now exclude the content of the affected files. This will be available for Completions, Inline, Chat, and all other GitHub Copilot experiences in Visual Studio.\n\nConfigure Content Exclusions\n\nFor repository administrators and organization owners, content exclusion will be configurable for files, folders, file types, and more. Learn more about Configuring Content Exclusions for GitHub Copilot in the GitHub Copilot documentation.\n\nRefine your GitHub Copilot suggestions\n\nWith the integration of GitHub Copilot into Visual Studio, we are enhancing experiences across completions and chat. This enhancement aims to streamline your workflow, making it easier for you to refine completion suggestions and transition conversations across different interfaces.\n\nWith the integration of GitHub Copilot into Visual Studio, we are enhancing experiences across Completions and Chat. This enhancement aims to streamline your workflow, making it easier for you to refine Completions suggestions and transition conversations across different interfaces.\n\nRefine for GitHub Copilot Completions with Inline chat\n\nYou now have more control over the suggestions provided by GitHub Copilot. Instead of merely accepting or ignoring a suggestion, you can now retry! This feature allows you to modify and curate the proactive suggestions given by GitHub Copilot, by adding context or tweaking the completion.\n\nStart by modifying your Completions:\n\nRefine your prompt with Inline Chat:\n\nPromote Inline Chat to the Chat Window for more context\n\nPreserve the history of your Inline Chat by promoting it to the Chat Window. This feature enables you to maintain a record of the conversation and continue the Chat Window at your convenience on a larger screen.\n\nSelect Continue in chat window...\n\nNaming things made easy\n\nYou can use GitHub Copilot to generate naming suggestions for your identifiers in C++.\n\nGitHub Copilot can now generate naming suggestions for your identifiers (variables, methods, or classes) based on how your identifier is being used and the style of your code.\n\nTo try it out, you'll need an active GitHub Copilot subscription. Navigate to any variable you wish to rename, right-click -> Rename (Keyboard: Ctrl+R, Ctrl+R). You'll notice a GitHub Copilot sparkle icon that you can click or toggle to generate naming suggestions.\n\nThis feature is available for C#, C++, and more languages.\n\nAI smart variable inspecetion\n\nOptimize your debugging workflow with Integrated AI variable inspection.\n\nInspecting and analyzing values from Locals, Autos, and DataTips has never been easier with Ask GitHub Copilot in Visual Studio. Simply right-click on any value to get detailed AI-driven insights on errors, unexpected outcomes, or anomalies - all without ever leaving your IDE.\n\nThis feature will significantly enhance your troubleshooting speed by analyzing variables in real-time within your IDE whenever unexpected values arise.\n\nAI-generated breakpoint expressions\n\nUse AI-generated expressions to insert conditional breakpoints or tracepoints in C++.\n\nAI-generated expressions for conditional breakpoints and tracepoints are now supported in C++. GitHub Copilot analyzes your code and offers insightful breakpoint expressions, streamlining your debugging process.\n\nWhen you position the cursor within the condition text for a conditional breakpoint/tracepoint in the breakpoint settings window, GitHub Copilot will promptly offer AI-generated expression suggestions based on your codebase. You have the flexibility to select the condition that best fits your requirements for placing the conditional breakpoint/tracepoint.\n\nDebugging & diagnostics\n\nEasier to fix async exceptions\n\nThe debugger now breaks on async method exceptions caught by framework code.\n\nDebugging asynchronous code, especially in frameworks like ASP.NET, can be tricky due to the potential for exceptions to be thrown across asynchronous boundaries.\n\nNow, with Visual Studio Debugger it automatically breaks when an async Task method throws an exception back to framework code.\n\nThis will allow you to easily identify and diagnose issues in your ASP.NET applications, leading to faster debugging cycles and improved productivity.\n\nPlease note that this is for .NET 9 and newer projects only.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nProfile faster and more consistently\n\nThe instrumentation tool in the profiler now remembers your target selection between runs.\n\nThe instrumentation tool now persists the target selection between runs offering a significant benefit by enhancing the continuity of profiling sessions.\n\nWith this improvement, you can maintain your specified target across multiple instrumentation runs, eliminating the need for repetitive selection tasks.\n\nProfile external code with ease\n\nThe profiler supports auto-decompilation for .NET libraries, enabling effortless profiling of external code.\n\nVisual Studio profiler now offers auto-decompilation for .NET libraries in scenarios where source code is unavailable. By automatically decompiling code during source lookup, even without loaded symbols or exact file locations, you can gain insights into the code's structure and performance issues.\n\nThis feature is particularly advantageous when dealing with non-user external code, empowering you to analyze and optimize your application's performance effectively, thus enhancing your development workflow.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nImproved debugging on Arm64\n\nThe Visual Studio debugger supports AnyCPU applications manifested to run as arm64.\n\nVisual Studio natively supports building and debugging Arm64 apps on Arm-based processors. Unfortunately, applications built with the AnyCPU setting running on an Arm64 machine, will default to using x64 emulation. While the capabilities of the x64 emulator have expanded, the most efficient Arm CPU scenarios are supported when applications are running natively.\n\nTo better support the intended native behavior the Windows 24H2 update introduces a new <supportedArchitectures> setting for your App manifest files. .NET developers can include a list of supported architectures (amd64 or arm64), explicitly signaling that an application built with the AnyCPU setting should run natively using the Arm64 CLR on Arm64 devices.\n\nWith this release Visual Studio can read these new manifest entries when the application launches, allowing debugging to be initiated based on the correct architecture.\n\nBlazor WebAssembly debugging\n\nA preview of the improved debugging experience for Blazor WebAssembly apps targeting .NET 9 or later.\n\nVisual Studio now offers a preview of an improved debugging experience for Blazor WebAssembly apps targeting .NET 9 or later:\n\nData types shown in the debugger now match the expected .NET data types.\n\nType members and member visibility use expected icons.\n\nThe displayed call stack is cleaned up to only shows the .NET call stack and correctly honors the Just My Code setting.\n\nThe modules window is now supported.\n\nExpression evaluation support in the Immediate window and for watches and conditional breakpoints is expanded and improved.\n\nTo enable the new preview debugging experience:\n\nEnable the Enable New .NET 9+ Mono Debugger setting.\n\nInstall the latest .NET 9 SDK.\n\nUpdate your Blazor app to target .NET 9.\n\nKnown limitations:\n\nHot reload while debugging is not yet fully functional. This will be addressed in a future update.\n\nAuto-add breakpoints to the default group\n\nOrganize breakpoints for swift troubleshooting with default breakpoint groups in Visual Studio.\n\nYou can now mark the selected breakpoint group as the default, ensuring all newly added breakpoints are automatically included in that group.\n\nThis enhancement simplifies the management and organization of breakpoints, providing seamless debugging when investigating multiple issues.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nExpressive IEnumerable Visualizer\n\nThe editable expression feature in the IEnumerable visualizer allows direct editing and visualization of LINQ expression in the Visual Studio debugger.\n\nThe Visual Studio debugger now offers an editable expression feature in the IEnumerable visualizer, a powerful enhancement for developers working with collections.\n\nOverview\n\nWith this new feature, while visualizing a collection or dataset, you can directly modify the expressions textbox on the top of the dialog with your desired LINQ expressions. The visualizer updates in real-time, reflecting the data change resulting from your query.\n\nPotential Applications\n\nThe editable expression feature facilitates debugging of dense datasets and complex collection manipulations. You can easily apply different filters or sort orders to your collections based on your needs. By experimenting with data transformations and filters directly within the Visual Studio debugger, you can streamline your development workflow and achieve more efficient debugging. Here is an example to try out on your own:\n\nFaster C++ breakpoints\n\nOptimize your debugging with enhanced conditional breakpoints performance in C++.\n\nWe have significantly enhanced the performance of conditional breakpoints in C++ through a reworked implementation.\n\nOur initial assessment indicates a performance improvement of at least 35% in version 17.10 and 70% in version 17.11 P2, reducing execution time from 80 seconds to 21 seconds over 80,000 iterations.\n\nAs shown in the video, the left side shows the conditional breakpoints performance in version 17.9, while the right side shows the performance in version 17.10 onwards.\n\nIDE\n\nNever miss installing a component\n\nBy using *.vsconfig files, you can ensure that your team has all the necessary components and extensions installed that your solution requires.\n\nMany teams use *.vsconfig files to standardize their teams' Visual Studio installations. The *.vsconfig files can be placed in a repo or a project's solution directory, and Visual Studio will automatically detect if components specified in the *.vsconfig file are missing.\n\nIf any are missing, then a notification such as the one pictured below will appear.\n\nWe've made two improvements to this experience in Visual Studio 2022 version 17.11 Preview 1.\n\nFirst, Visual Studio can now detect if any local or network hosted extensions are missing from the installation, and if so, it'll prompt you to install them. Previously, with respect to extensions, Visual Studio was only able to recognize if marketplace extensions were missing.\n\nSecondly, Visual Studio will now re-prompt the notification in certain situations, such as if the *.vsconfig file has changed because new components or extensions get added to it. Previously, the notification would only pop until you acted upon it, at which point it would be suppressed forever.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nKeep Visual Studio updated and secure by enrolling in Microsoft Updates.\n\nKeeping your software updated on a regular cadence is a security best practice that we highly recommend.\n\nStarting in August 2024, Visual Studio security updates will be available to Community SKU users through the Microsoft Update channel, which is part of the Windows Update system. Community SKU users that enroll in this update channel will automatically receive and install Visual Studio monthly security updates silently and in the background when the machine is idle, which makes it super easy to stay updated and secure. Further information can be found in this blog post.\n\nThis functionality is an extension of our Administrator updates solution, which was designed to help organizations stay secure. Many enterprises, including Microsoft, have been using this solution to automatically deploy hundreds of thousands of security updates each month.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nNew Teams Toolkit templates\n\nTeams Toolkit added new Teams app templates for a better Teams development experience.\n\nTeams Toolkit now offers an empty Teams template for you to connect with your existing projects or use it as a starting point for new Teams apps.\n\nStart with this empty template to create any Teams app.\n\nIf you want to add Teams capability to your existing project, add Empty Teams App to your project and then connect two projects by making simple edits follow https://aka.ms/Config-Teams-app.\n\nTeams Toolkit supports authentications for Search Results from API Message Extensions app.\n\nImproved user authentication\n\nVisual Studio now uses the Windows authentication broker otherwise known as WAM as the default authentication mechanism.\n\nVisual Studio now uses the Web Account Manager (WAM) as its main authentication mechanism. This integration not only streamlines the authentication experience for Visual Studio, but it also enhances the security of your credentials.\n\nHere's how the new WAM experience looks like:\n\nHow does this impact your experience?\n\nUsing WAM as the default authentication experience has many benefits, including:\n\nWindows integration: In addition to reducing the overall number of authentication prompts, you can now select existing Windows accounts instead of repeatedly entering credentials.\n\nBetter token protection: Refresh tokens are better secured as they are now device bound.\n\nSupport for the latest security features:\n\nLeverage rich OS capabilities such as Windows Hello & FIDO keys.\n\nAccess the latest and greatest Microsoft Entra ID capabilities and conditional access policies.\n\nWeb\n\nDiscover dynamic Web API routes\n\nThe Endpoints Explorer has been updated to discover endpoints at runtime.\n\nWhen working with ASP.NET Core Web APIs you can use the Endpoints Explorer to view and interact with the endpoints.\n\nThe Endpoints Explorer discovers endpoints statically to show the initial set of endpoints. There are some endpoints which cannot be statically discovered. For example, any endpoint defined in a class library project is one example. There are other ways to register endpoints which cannot be discovered statically.\n\nWhen you run or debug your Web API, Visual Studio will also discover routes at runtime and add those to the Endpoints Explorer.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nNPM packages in Solution Explorer\n\nSee your NPM packages show up under the Dependencies node in Solution Explorer.\n\nWe unified the NPM experiences you get in ASP.NET and JavaScript and TypeScript projects. You will therefore now also see your NPM packages listed in Solution Explorer for JavaScript and TypeScript projects.\n\nThis is the same experience you get for NuGet, but now for NPM as well.\n\nGaming\n\nUnreal Engine Add Class Templates\n\nAdd common Unreal Engine class templates to your project with the new Add Class.\n\nYou can now add additional common Unreal Engine class templates to your project with the new Add Class dialog. This dialog provides a list of common Unreal Engine class templates that you can add to your project. You can also now add your class to a module of your choosing.\n\nTo get started, right click on the project in Solution Explorer and select Add > Unreal Engine Item. In the Add New Item dialog, select Unreal Engine Common Classes to open the Add Class dialog.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nUnreal Engine Add Module\n\nAdd Unreal Engine modules to your project with the new Add Module.\n\nYou can now add Unreal Engine modules to your project with the new Add Module dialog.\n\nTo get started, right click on the project in Solution Explorer and select Add > Unreal Engine Items. In the Add New Item dialog, select Empty Unreal Engine Module to open the Add Module dialog.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nUnreal Engine Add Plugin\n\nAdd Unreal Engine plugins to your project with the new Add Plugin.\n\nYou can now add Unreal Engine plugins to your project with the new Add Plugin dialog.\n\nTo get started, right click on the project in Solution Explorer and select Add > Unreal Engine Item. In the Add New Item dialog, select Unreal Engine Plugins to open the Add Unreal Engine Plugin dialog.\n\nUnreal Engine Toolbar\n\nQuickly access Unreal Engine related actions via a dedicated toolbar.\n\nThe new Unreal Engine toolbar provides quick access to Unreal Engine related actions. The toolbar is available when you have an Unreal Engine project loaded in Visual Studio. The toolbar includes the following actions:\n\nQuicky attach to Unreal Engine processes\n\nRescan Blueprints Cache\n\nQuick Access to Unreal Engine Log\n\nQuick Access Unreal Engine Configuration Page for Visual Studio\n\n.NET\n\nRevamped Resource Explorer\n\nThe brand new Resource Explorer makes it easier than ever to manage your .resx files in .NET.\n\nIn this version of Visual Studio, we're introducing a revamped Resource Explorer UI to better accommodate the needs of the modern .NET developer.\n\nIn this update we made the following improvements:\n\nMulti-resource view: You can now load multiple files and view all localizations at once within the same view.\n\nSearch and filter: We have added search to make finding resources in large solutions a breeze.\n\nComments: Each translation of a resource now has its own comment, all visible at once in the data grid. Look for the small triangle icon in the corner of each cell with a comment.\n\nWarnings: Placeholder validation and missing translation warnings.\n\nAccessibility and UI: We have improved the compatibility with screen readers and assistive technology, added zoom functionality to the data grid, and now allow VS Theming for the editor (including dark mode).\n\nð£ See feature ticket to share your feedback and continue the conversation. And take this survey to help make the feature even better.\n\nC++\n\nBuild Insights QoL Update\n\nAdds various quality of life improvements to C++ Build Insights.\n\nIn this update, we added quality of life changes to C++ Build Insights integration. You can now filter your Build Insight trace results by project. For results in each row, you will now see the relative path and file name instead of the full path. We have also improved the grouping of results in the Included Files view.\n\nDebug your CMake projects on Linux\n\nDebug your CMake scripts for projects targeting Linux using WSL and SSH.\n\nWe have added support for the CMake debugger in CMake projects targeting Linux via WSL or SSH. The CMake debugger allows you to debug your CMake scripts and CMakeLists.txt files through the Visual Studio debugger.\n\nTo start a CMake debugging session, set a breakpoint in your CMakeLists.txt file and then navigate to Project > Configure Cache with CMake Debugging.\n\nð£ See feature ticket to share your feedback and continue the conversation.\n\nCustom Clang-Tidy Executable\n\nIntegrate your custom clang-tidy tool into all projects.\n\nYou can now use a custom clang-tidy executable for all your projects. This lets you run clang tidy on individual projects with your own custom rules, without relying on the default clang-tidy executable.\n\nThis global setting allows you to integrate your custom clang-tidy rules seamlessly, without the need to overwrite the existing clang-tidy executable.\n\nTo activate this feature, navigate to Configuration Properties > Code Analysis > Clang-Tidy and input its path directly or use the Browse option in the Clang-Tidy Tool Directory property. Save the changes and recompile your app for the new executable to take effect.\n\nFrom all of us on the team, thank you for choosing Visual Studio. If you have any questions, please reach us on Twitter or Developer Community."
    }
}