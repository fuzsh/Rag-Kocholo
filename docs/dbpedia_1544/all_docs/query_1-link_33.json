{
    "id": "dbpedia_1544_1",
    "rank": 33,
    "data": {
        "url": "https://www.redhat.com/en/blog/designing-golden-paths",
        "read_more_link": "",
        "language": "en",
        "title": "Designing Golden Paths",
        "top_image": "https://www.redhat.com/rhdc/managed-files/ohc/Designing%20Golden%20Paths-1.png",
        "meta_img": "https://www.redhat.com/rhdc/managed-files/ohc/Designing%20Golden%20Paths-1.png",
        "images": [
            "https://www.redhat.com/rhdc/managed-files/cloud-providers-2x.png",
            "https://static.redhat.com/libs/redhat/rh-iconfont/latest/svg/web-icon-close.svg",
            "https://www.redhat.com/themes/custom/rh_base_ui/dist/img/talk-bubble.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-globe.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-user.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-search.svg",
            "https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_full_width/private/ohc/Designing%20Golden%20Paths.png.webp?itok=bh6ihRjQ",
            "https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_full_width/private/ohc/Designing%20Golden%20Paths-1.png.webp?itok=tL89hYqg",
            "https://www.redhat.com/rhdc/managed-files/styles/media_thumbnail/private/1516279988178%20-%20Raffaele%20Spazzoli.jpeg?itok=iNKqsAkG",
            "https://www.redhat.com/cms/managed-files/automation.svg",
            "https://www.redhat.com/cms/managed-files/AI.svg",
            "https://www.redhat.com/cms/managed-files/open-hybrid-cloud.svg",
            "https://www.redhat.com/cms/managed-files/security.svg",
            "https://www.redhat.com/cms/managed-files/edge_2.svg",
            "https://www.redhat.com/cms/managed-files/infrastructure.svg",
            "https://www.redhat.com/cms/managed-files/application-development.svg",
            "https://www.redhat.com/cms/managed-files/original-series.svg",
            "https://static.redhat.com/libs/redhat/brand-assets/2/corp/logo--on-dark.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-globe.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Raffaele Spazzoli"
        ],
        "publish_date": "2022-08-31T13:00:00+00:00",
        "summary": "",
        "meta_description": "Golden Paths are a fundamental ingredient of well architected Internal Development Platforms (IDP). Spotify uses the term “Golden Path”, but that concept has other monikers. For example Netflix calls the same idea “Paved Road”.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.redhat.com/en/blog/designing-golden-paths",
        "text": "Introduction\n\nGolden Paths are a fundamental ingredient of well architected Internal Developer Platforms (IDP). Spotify uses the term “Golden Path”, but that concept has other monikers. For example Netflix calls the same idea “Paved Road.”\n\nThe general notion behind this concept is that the platform offers some form of pre-architected and supported approaches to building and deploying a particular piece of software. If a team can “stay” in the path (because the requirements of what they are building allow them to), then they get a supported road to production without having to learn all the details of the technology used to create that road.\n\nThis approach accelerates typical application development use cases (onboarding of a new team member, onboarding of a new application), and at the same time, injects the best practices that have been learned in the past. The more sophisticated Golden Paths are, the more they will be adopted, providing, as a result, more uniformity of configuration and behavior across the application portfolio.\n\nGolden Paths\n\nSo, what is in a Golden Path? It depends on what is being deployed. In the case of an internally developed application, a Golden Path will have at a minimum, the following ingredients:\n\nA repository template to get started with. This could be a simple hello world application, but with the key resources and the configurations that allows any developer to get started quickly with the company IDEs and all the settings that embodies the best practices for code development.\n\nA pipeline that can take the aforementioned repository, build it, and push the resulting artifacts all the way to production. The pipeline will have all of the steps that are deemed necessary for the organization to trust that code being deployed to production.\n\nA set of manifests to allow for deploying the application. These could be Helm charts or kustomize configurations in the Kubernetes world, or other forms configuration descriptions, if not using Kubernetes.\n\nObservability capability baked in. Observability (logs, traces, metrics and alerts) is a foundational capability that should be provided by the platform. Exactly what to observe in a specific application has to be defined as part of the deployment manifest. A Golden Path should provide reasonable defaults for observability settings.\n\nGolden paths should have the following characteristics:\n\nThey are optional. Golden Paths should not be the only way things are done in an IDP. There should be room for walking outside of the beaten paths. That is necessary to allow and foster innovation. IDP teams should take the responsibility of observing the cases where Golden Paths are not used, to identify situations where new Golden Paths might be necessary (for example, because multiple teams are starting to use and deploy a different technology or leverage different approaches).\n\nGolden Paths’ abstractions should be transparent. Golden paths create an abstraction that allows for varying approaches without having to learn the underlying technology. A UI can be placed in front of the Golden Path to make the user experience for developers pleasant by reducing the “getting started” use case to only a few clicks (Backstage is a popular tool for this purpose). But, Golden Paths’ abstractions should be transparent and if a developer wanted to understand what happens behind the curtains, it should not only be possible for them to do so, it should also be easy. In a shift-left scenario where developer teams are responsible for the end-to-end processes behind the code they produce (you build it, you run it), this approach inspires trust in the platform.\n\nGolden paths should be extensible. Of course, Golden Paths are configurable as they are essentially a set of templates with parameters. But, can they also be extended? There should be flexibility to allow for this type of situation. For example, let’s consider the pipeline. Any Golden Path will contain a pipeline that describes the process for pushing code to production. But, can a developer team add additional capabilities, such as another pipeline for handling some ancillary automation? Things like: backup/restore of databases, reload/refresh of test data, general cleanups, launching very specific tests that don’t have to run all the time? A Golden Path should not preclude these use cases. Similarly for the deployment manifests, it should be possible to augment them with additional manifests. Extensibility, however, should be used with caution. The way a Golden Path is augmented should not conflict with the Golden Path itself, otherwise the team maintaining the Golden Path cannot provide support.\n\nGolden Path Maturity Model\n\nIn my experience working with customers, I find that three levels of maturity for Golden Paths exist:\n\nNo Golden Path\n\nClone and forget\n\nGolden paths as products.\n\nNo Golden Path\n\nAt this level of maturity, the platform is architected enough to be able to build and run applications, but no Golden Path exists. This is not a trivial level given that the actual ability to build and run applications is not a simple feat and it represents a prerequisite to then start creating Golden Paths. At this level, the platform should have the following capabilities:\n\nA method for onboarding teams and applications. The more automated the better. We should strive to minimize the number of additional processes (tickets in many cases) that are necessary to be onboarded. In theory, there should be only one form to submit.\n\nA way to create and run a CI pipeline. A pipeline tool has been installed and developers are empowered to write and run their own pipelines.\n\nA way to deploy the application (CD). Ideally this would use a GitOps based approach. Again, developers are empowered to create their own manifests and the platform offers some ability to consume and reconcile them.\n\nA way to provision credentials for all required integrations. Typical integration for a CI/CD pipeline include: Version Control System, image registry, static code analysis tool, vulnerability scanning tool, etc.\n\nTypical integration needs for applications include: databases, messaging, caches, invocations of remote services, etc.\n\nAt this level of maturity, every development team will have to figure out how to write the pipeline and the deployment manifests. Duplication of efforts and snowflaking are inevitable, but helps establish patterns that can be identified and used later in the process.\n\nClone and forget\n\nAt this level of maturity, templates exist for all of the artifacts of a Golden Path. Typical examples include a repository template, a pipeline template and templated manifests. At onboarding time, the developer clones and runs the templates with the specific parameters of the application they are onboarding, and obtains a ready to use set of artifacts. From then on, the developer team is the owner of those artifacts. This creates a bifurcation between the evolution of the Golden Path templates and the evolution of that particular instance. As the drift becomes wider, it gets increasingly harder to take updates from the Golden Path templates (typically teams have to do manual merge operations). Ironically, this situation hurts the early adopters of the platform more because they experience the largest drifts.\n\nGolden Path as Product\n\nAt this maturity level, Golden paths are treated as products. Golden Paths will have releases with new features and bug fixes. Unavoidably backward-incompatible releases will happen (such as when a new pipeline step is introduced which requires specific files to be present within the code repository). Developer teams that are using a particular Golden Path will have an opportunity to take the new release when they can afford to do so. One or more Platform teams may be dedicated to maintaining the Golden Paths and treating them as products. This includes, as said, cutting releases, but also creating documentation, release notes, and helping developer teams adopt the Golden Paths. Golden Paths exist to help and serve developers, so it’s important to establish feedback loops with the developer community and make sure that they evolve based upon ongoing requirements.\n\nAn Example\n\nHere is an example of how to build a simple Golden Path. To make this example concrete, we have to ground in some technology choice. In other words, we need to have some assumption on what the platform does for us (and it must be at the “No Golden Path” maturity level at least).\n\nFor the sake of this example, let’s assume we have the following set up:\n\nWe have three Kubernetes clusters dedicated to running the pipelines (build), QA validations (Preprod) and production (Prod). We adopt GitOps and each cluster is configured via Argo CD. Tekton for running pipelines is installed in the build cluster. A GitOps repository exists for each tenant. A folder convention exists such that when tenants create files in the GitOps repository, it’s understood in which cluster resources will be created (the exact convention is outside the scope of this article).\n\nEach tenant gets some namespace in each of the clusters at onboarding and the Argo CD instances are configured to deploy manifests only in those namespaces (out of the tenant GitOps repository). Credentials and secrets are available in each tenant namespace, based on what the namespace is supposed to do.\n\nNow, let’s assume that we onboard an application using a Golden Path. Here is what it might look like:\n\nA new code repository for the new application is generated starting from a code repository template. A pipeline and application wrapper charts are deployed to the tenant GitOps repository. These charts are essentially empty, but they refer to the golden charts using the helm dependency management feature. Here is relevant section for configuring a dependency in a Chart.yaml file:\n\ndependencies:\n\n- name: app-golden-chart\n\nversion: \"0.1.15\"\n\nrepository: https://myorg.github.io/golden-charts\n\nWhen all is in place, the Tekton manifests will be deployed from the tenant GitOps repository and it will start building the application code. The application manifest will also be deployed and when the application image is ready, it will start running in the namespaces where it’s promoted to.\n\nIt’s important to note that the golden chart will evolve over time and that with this approach, the application team can take updates as they see fit, simply by incrementing the version of the imported golden chart in the wrapper chart.\n\nOther technologies may have features to allow referencing a reusable, centrally managed artifacts, for example GitHub actions uses reusable workflows and GitLab ci/cd uses the include directive.\n\nOnce one has a development platform and Golden Paths in place, a UI can be set up in front of them, to improve the user experience for the developers. Tools like Backstage.\n\nConclusion\n\nIn this post, we discussed some of the main characteristics that a Golden Path should have. We introduced a simple maturity model for Golden Paths and we show an example of how to implement one. Designing good Golden Paths is a prerequisite to being successful with an IDP implementation. Although the IDP concept is still in its early days, the best practice seems to be to get a Golden Path right (i.e. good enough that developer teams will want to adopt it), before starting to build other Golden Paths. Getting started with your first Golden Path is the first step and with the approaches described in this article, it is the hope that they can be used to help increase the likelihood for success."
    }
}