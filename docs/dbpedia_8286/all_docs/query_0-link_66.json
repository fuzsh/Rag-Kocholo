{
    "id": "dbpedia_8286_0",
    "rank": 66,
    "data": {
        "url": "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/how-to-azure-ad",
        "read_more_link": "",
        "language": "en",
        "title": "Set up Microsoft Entra authentication - Azure Database for MySQL - Flexible Server",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/en-us/azure/mysql/media/applies-to/yes.png",
            "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/media/how-to-azure-ad/azure-ad-configuration.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-14T17:44:00+00:00",
        "summary": "",
        "meta_description": "Learn how to set up Microsoft Entra authentication for Azure Database for MySQL - Flexible Server.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/azure/mysql/flexible-server/how-to-azure-ad",
        "text": "Set up Microsoft Entra authentication for Azure Database for MySQL - Flexible Server\n\nAPPLIES TO: Azure Database for MySQL - Flexible Server\n\nThis tutorial shows you how to set up Microsoft Entra authentication for Azure Database for MySQL flexible server.\n\nIn this tutorial, you learn how to:\n\nConfigure the Microsoft Entra Admin.\n\nConnect to Azure Database for MySQL flexible server using Microsoft Entra ID.\n\nPrerequisites\n\nAn Azure account with an active subscription.\n\nIf you don't have an Azure subscription, create an Azure free account before you begin.\n\nNote\n\nWith an Azure free account, you can now try Azure Database for MySQL flexible server for free for 12 months. For more information, see Try Azure Database for MySQL flexible server for free.\n\nInstall or upgrade Azure CLI to the latest version. See Install Azure CLI.\n\nConfigure the Microsoft Entra Admin\n\nTo create a Microsoft Entra Admin user, follow the following steps.\n\nIn the Azure portal, select the instance of Azure Database for MySQL flexible server that you want to enable for Microsoft Entra ID.\n\nUnder the Security pane, select Authentication:\n\nThere are three types of authentication available:\n\nMySQL authentication only â By default, MySQL uses the built-in mysql_native_password authentication plugin, which performs authentication using the native password hashing method\n\nMicrosoft Entra authentication only â Only allows authentication with a Microsoft Entra account. Disables mysql_native_password authentication and turns ON the server parameter aad_auth_only\n\nMySQL and Microsoft Entra authentication â Allows authentication using a native MySQL password or a Microsoft Entra account. Turns OFF the server parameter aad_auth_only\n\nSelect Identity â Select/Add User assigned managed identity. The following permissions are required to allow the UMI to read from Microsoft Graph as the server identity. Alternatively, give the UMI the Directory Readers role.\n\nUser.Read.All: Allows access to Microsoft Entra user information.\n\nGroupMember.Read.All: Allows access to Microsoft Entra group information.\n\nApplication.Read.ALL: Allows access to Microsoft Entra service principal (application) information.\n\nSelect a valid Microsoft Entra user or a Microsoft Entra group in the customer tenant to be Microsoft Entra administrator. Once Microsoft Entra authentication support has been enabled, Microsoft Entra Admins can be added as security principals with permission to add Microsoft Entra users to the MySQL server.\n\nNote\n\nOnly one Microsoft Entra admin can be created per MySQL server, and selecting another overwrites the existing Microsoft Entra admin configured for the server.\n\nGrant permissions to User assigned managed identity\n\nThe following sample PowerShell script grants the necessary permissions for a UMI. This sample assigns permissions to the UMI umiservertest.\n\nTo run the script, you must sign in as a user with a Global Administrator or Privileged Role Administrator role.\n\nThe script grants the User.Read.All, GroupMember.Read.All, and Application.Read.ALL permissions to a UMI to access Microsoft Graph.\n\n# Script to assign permissions to the UMI \"umiservertest\" import-module AzureAD $tenantId = '<tenantId>' # Your Azure AD tenant ID Connect-AzureAD -TenantID $tenantId # Log in as a user with a \"Global Administrator\" or \"Privileged Role Administrator\" role # Script to assign permissions to an existing UMI # The following Microsoft Graph permissions are required: # User.Read.All # GroupMember.Read.All # Application.Read.ALL # Search for Microsoft Graph $AAD_SP = Get-AzureADServicePrincipal -SearchString \"Microsoft Graph\"; $AAD_SP # Use Microsoft Graph; in this example, this is the first element $AAD_SP[0] #Output #ObjectId AppId DisplayName #-------- ----- ----------- #47d73278-e43c-4cc2-a606-c500b66883ef 00000003-0000-0000-c000-000000000000 Microsoft Graph #44e2d3f6-97c3-4bc7-9ccd-e26746638b6d 0bf30f3b-4a52-48df-9a82-234910c4a086 Microsoft Graph #Change $MSIName = \"<managedIdentity>\"; # Name of your user-assigned $MSI = Get-AzureADServicePrincipal -SearchString $MSIName if($MSI.Count -gt 1) { Write-Output \"More than 1 principal found, please find your principal and copy the right object ID. Now use the syntax $MSI = Get-AzureADServicePrincipal -ObjectId <your_object_id>\" # Choose the right UMI Exit } # If you have more UMIs with similar names, you have to use the proper $MSI[ ]array number # Assign the app roles $AAD_AppRole = $AAD_SP.AppRoles | Where-Object {$_.Value -eq \"User.Read.All\"} New-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -PrincipalId $MSI.ObjectId -ResourceId $AAD_SP.ObjectId -Id $AAD_AppRole.Id $AAD_AppRole = $AAD_SP.AppRoles | Where-Object {$_.Value -eq \"GroupMember.Read.All\"} New-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -PrincipalId $MSI.ObjectId -ResourceId $AAD_SP.ObjectId -Id $AAD_AppRole.Id $AAD_AppRole = $AAD_SP.AppRoles | Where-Object {$_.Value -eq \"Application.Read.All\"} New-AzureADServiceAppRoleAssignment -ObjectId $MSI.ObjectId -PrincipalId $MSI.ObjectId -ResourceId $AAD_SP.ObjectId -Id $AAD_AppRole.Id\n\nIn the final steps of the script, if you have more UMIs with similar names, you have to use the proper $MSI[ ]array number. An example is $AAD_SP.ObjectId[0].\n\nCheck permissions for user-assigned managed identity\n\nTo check permissions for a UMI, go to the Azure portal. In the Microsoft Entra ID resource, go to Enterprise applications. Select All Applications for Application type, and search for the UMI that was created.\n\nSelect the UMI, and go to the Permissions settings under Security.\n\nAfter you grant the permissions to the UMI, they're enabled for all servers created with the UMI assigned as a server identity.\n\nConnect to Azure Database for MySQL flexible server using Microsoft Entra ID\n\n1 - Authenticate with Microsoft Entra ID\n\nStart by authenticating with Microsoft Entra ID using the Azure CLI tool.\n\n(This step isn't required in Azure Cloud Shell.)\n\nSign in to Azure account using az login command. Note the ID property, which refers to the Subscription ID for your Azure account:\n\naz login\n\nThe command launches a browser window to the Microsoft Entra authentication page. It requires you to give your Microsoft Entra user ID and password.\n\nIf you have multiple subscriptions, choose the appropriate subscription using the az account set command:\n\naz account set --subscription \\<subscription id\\>\n\n2 - Retrieve Microsoft Entra access token\n\nInvoke the Azure CLI tool to acquire an access token for the Microsoft Entra authenticated user from step 1 to access Azure Database for MySQL flexible server.\n\nExample (for Public Cloud):\n\naz account get-access-token --resource https://ossrdbms-aad.database.windows.net\n\nThe above resource value must be specified exactly as shown. For other clouds, the resource value can be looked up using the following:\n\naz cloud show\n\nFor Azure CLI version 2.0.71 and later, the command can be specified in the following more convenient version for all clouds:\n\naz account get-access-token --resource-type oss-rdbms\n\nUsing PowerShell, you can use the following command to acquire access token:\n\n$accessToken = Get-AzAccessToken -ResourceUrl https://ossrdbms-aad.database.windows.net $accessToken.Token | out-file C:\\temp\\MySQLAccessToken.txt\n\nAfter authentication is successful, Microsoft Entra ID returns an access token:\n\n{ \"accessToken\": \"TOKEN\", \"expiresOn\": \"...\", \"subscription\": \"...\", \"tenant\": \"...\", \"tokenType\": \"Bearer\" }\n\nThe token is a Base 64 string that encodes all the information about the authenticated user and is targeted to the Azure Database for MySQL service.\n\nThe access token validity is anywhere between 5 minutes to 60 minutes. We recommend you get the access token before initiating the sign-in to Azure Database for MySQL flexible server.\n\nYou can use the following PowerShell command to see the token validity.\n\n$accessToken.ExpiresOn.DateTime\n\n3 - Use a token as a password for logging in with MySQL\n\nYou need to use the access token as the MySQL user password when connecting. You can use the method described above to retrieve the token using GUI clients such as MySQL workbench.\n\nConnect to Azure Database for MySQL flexible server using MySQL CLI\n\nWhen using the CLI, you can use this shorthand to connect:\n\nExample (Linux/macOS):\n\nmysql -h mydb.mysql.database.azure.com \\ --user user@tenant.onmicrosoft.com \\ --enable-cleartext-plugin \\ --password=`az account get-access-token --resource-type oss-rdbms --output tsv --query accessToken`\n\nExample (PowerShell):\n\nmysql -h mydb.mysql.database.azure.com \\ --user user@tenant.onmicrosoft.com \\ --enable-cleartext-plugin \\ --password=$(az account get-access-token --resource-type oss-rdbms --output tsv --query accessToken) mysql -h mydb.mysql.database.azure.com \\ --user user@tenant.onmicrosoft.com \\ --enable-cleartext-plugin \\ --password=$((Get-AzAccessToken -ResourceUrl https://ossrdbms-aad.database.windows.net).Token)\n\nConnect to Azure Database for MySQL flexible server using MySQL Workbench\n\nLaunch MySQL Workbench and Select the Database option, then select Connect to database.\n\nIn the hostname field, enter the MySQL FQDN for example, mysql.database.azure.com.\n\nIn the username field, enter the MySQL Microsoft Entra administrator name. For example, user@tenant.onmicrosoft.com.\n\nIn the password field, select Store in Vault and paste in the access token from the file for example, C:\\temp\\MySQLAccessToken.txt.\n\nSelect the advanced tab and ensure that you check Enable Cleartext Authentication Plugin.\n\nSelect OK to connect to the database.\n\nImportant considerations when connecting\n\nuser@tenant.onmicrosoft.com is the name of the Microsoft Entra user or group you're trying to connect as\n\nMake sure to use the exact way the Microsoft Entra user or group name is spelled\n\nMicrosoft Entra user and group names are case sensitive\n\nWhen connecting as a group, use only the group name (for example, GroupName)\n\nIf the name contains spaces, use \\ before each space to escape it\n\nNote\n\nThe âenable-cleartext-pluginâ setting â you need to use a similar configuration with other clients to make sure the token gets sent to the server without being hashed.\n\nYou're now authenticated to your MySQL flexible server using Microsoft Entra authentication.\n\nOther Microsoft Entra admin commands\n\nManage server Active Directory administrator\n\naz mysql flexible-server ad-admin\n\nCreate an Active Directory administrator\n\naz mysql flexible-server ad-admin create\n\nExample: Create Active Directory administrator with user 'john@contoso.com', administrator ID '00000000-0000-0000-0000-000000000000' and identity 'test-identity'\n\naz mysql flexible-server ad-admin create -g testgroup -s testsvr -u john@contoso.com -i 00000000-0000-0000-0000-000000000000 --identity test-identity\n\nDelete an Active Directory administrator\n\naz mysql flexible-server ad-admin delete\n\nExample: Delete Active Directory administrator\n\naz mysql flexible-server ad-admin delete -g testgroup -s testsvr\n\nList all Active Directory administrators\n\naz mysql flexible-server ad-admin list\n\nExample: List Active Directory administrators\n\naz mysql flexible-server ad-admin list -g testgroup -s testsvr\n\nGet an Active Directory administrator\n\naz mysql flexible-server ad-admin show\n\nExample: Get Active Directory administrator\n\naz mysql flexible-server ad-admin show -g testgroup -s testsvr\n\nWait for the Active Directory administrator to satisfy certain conditions\n\naz mysql flexible-server ad-admin wait\n\nExamples:\n\nWait until the Active Directory administrator exists\n\naz mysql flexible-server ad-admin wait -g testgroup -s testsvr --exists\n\nWait for the Active Directory administrator to be deleted\n\naz mysql flexible-server ad-admin wait -g testgroup -s testsvr âdeleted\n\nCreate Microsoft Entra users in Azure Database for MySQL\n\nTo add a Microsoft Entra user to your Azure Database for MySQL database, perform the following steps after connecting:\n\nFirst ensure that the Microsoft Entra user <user>@yourtenant.onmicrosoft.com is a valid user in Microsoft Entra tenant.\n\nSign in to your Azure Database for MySQL instance as the Microsoft Entra Admin user.\n\nCreate user <user>@yourtenant.onmicrosoft.com in Azure Database for MySQL.\n\nExample:\n\nCREATE AADUSER 'user1@yourtenant.onmicrosoft.com';\n\nFor user names that exceed 32 characters, it's recommended you use an alias instead, to be used when connecting:\n\nExample:\n\nCREATE AADUSER 'userWithLongName@yourtenant.onmicrosoft.com' as 'userDefinedShortName';\n\nCreate Microsoft Entra groups in Azure Database for MySQL\n\nTo enable a Microsoft Entra group for access to your database, use the exact mechanism as for users, but instead specify the group name:\n\nExample:\n\nCREATE AADUSER 'Prod_DB_Readonly';\n\nWhen logging in, group members use their personal access tokens but sign in with the group name specified as the username.\n\nCompatibility with application drivers\n\nMost drivers are supported; however, make sure to use the settings for sending the password in clear text, so the token gets sent without modification.\n\nC/C++\n\nlibmysqlclient: Supported\n\nmysql-connector-c++: Supported\n\nJava\n\nConnector/J (mysql-connector-java): Supported, must utilize useSSL setting\n\nPython\n\nConnector/Python: Supported\n\nRuby\n\nmysql2: Supported\n\n.NET\n\nmysql-connector-net: Supported, need to add plugin for mysql_clear_password\n\nmysql-net/MySqlConnector: Supported\n\nNode.js\n\nmysqljs: Not supported (doesn't send the token in cleartext without patch)\n\nnode-mysql2: Supported\n\nPerl\n\nDBD::mysql: Supported\n\nNet::MySQL: Not supported\n\nGo\n\ngo-sql-driver: Supported, add ?tls=true&allowCleartextPasswords=true to connection string\n\nPHP\n\nmysqli extension: Supported\n\nPDO_MYSQL driver: Supported\n\nNext steps"
    }
}