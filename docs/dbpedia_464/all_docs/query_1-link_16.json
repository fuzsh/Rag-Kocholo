{
    "id": "dbpedia_464_1",
    "rank": 16,
    "data": {
        "url": "https://www.zdnet.com/article/programming-languages-rust-is-coming-to-chromium-and-heres-why/",
        "read_more_link": "",
        "language": "en",
        "title": "Programming languages: Rust is coming to Chromium and here's why",
        "top_image": "https://www.zdnet.com/a/img/resize/8ce2a33f7ad88434f760612695eee00727832e48/2022/05/25/804c627f-3bc7-4639-87a0-c7ed008688b3/two-computer-programmers.jpg?auto=webp&fit=crop&height=675&width=1200",
        "meta_img": "https://www.zdnet.com/a/img/resize/8ce2a33f7ad88434f760612695eee00727832e48/2022/05/25/804c627f-3bc7-4639-87a0-c7ed008688b3/two-computer-programmers.jpg?auto=webp&fit=crop&height=675&width=1200",
        "images": [
            "https://www.zdnet.com/a/img/resize/29c962da89e5ff926d96ab17da4b507aff9b4410/2022/09/02/7cb2d998-5981-4249-93fc-8b3a7f80f09a/liam-tung.jpg?auto=webp&fit=crop&frame=1&height=192&width=192",
            "https://www.zdnet.com/a/img/resize/cfff86af939beef4bde6849965fccde43cca16de/2022/05/25/804c627f-3bc7-4639-87a0-c7ed008688b3/two-computer-programmers.jpg?auto=webp&width=1280"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Liam Tung"
        ],
        "publish_date": "2023-01-13T11:49:12+00:00",
        "summary": "",
        "meta_description": "Google's Chrome security team is exploring how Rust could be supported in Chromium's C++ codebase.",
        "meta_lang": "en",
        "meta_favicon": "https://www.zdnet.com/a/fly/bundles/zdnetcore/images/logos/zdnet-logo-yellow.png",
        "meta_site_name": "ZDNET",
        "canonical_link": "https://www.zdnet.com/article/programming-languages-rust-is-coming-to-chromium-and-heres-why/",
        "text": "Chromium, the open-source project behind Google Chrome, is enabling new support for Rust in its otherwise C++ codebase, if only in a limited fashion for now.\n\nChromium, the project underpinning Microsoft Edge, Opera, Vivaldi, and dozens more browsers, will support the use of third-party Rust libraries from C++. The team is putting in place the tools to enable Rust code in the Chrome binary within the next year, according to Dana Jansens of the Chrome security team.\n\n\"We are now actively pursuing adding a production Rust toolchain to our build system,\" writes Jansens.\n\nAllowing Rust for third-party libraries in Chromium is a significant move towards a modern, memory safe language, but it's far more limited than the Android Open Source Project (AOSP), which brought Rust in as a new platform language in April 2021 on top of C and C++.\n\nAlso: Programming languages: Why this old favorite is on the rise again\n\nAOSP allows Rust for the development of native OS components and now accounts for 21% of new code in AOSP. The shift has coincided with a fall in memory safety vulnerabilities from 76% to 35% of Android's total vulnerabilities.\n\nAOSP, AWS, the Linux kernel project, Meta, Microsoft and many more are adopting Rust in systems programming for its memory safety guarantees. Broadly, Rust can help reduce memory-related vulnerabilities -- that make up the vast majority of software security issues -- introduced by code written in memory-unsafe C and C++, which allow programmers to easily break memory safety rules. Apple in October detailed how it was addressing memory safety in XNU, the kernel used for the iPhone, iPad, and Mac.\n\nThe Chrome security team last year said it had considered Rust as a platform language but opted to maintain C++ as its primary language for the foreseeable future while it attempts to bring memory safety to C++ through projects like its MicraclePtr C++ smart pointers.\n\nJansens, however, suggests the Chrome security team hasn't completely canned the idea of bringing Rust into Chromium and details how it continues to explore how Rust could fit in over time.\n\nFor now, the Chromium project has put several constraints on Rust for these libraries. For example, it will allow Rust for Chromium third-party libraries if there is a \"business need\", such as meaningfully reducing the risk of memory bugs, crashes, and other issues \"when compared to the existing third-party library and related C++ code required to use the library\".\n\n\"We're starting slow and setting clear expectations on what libraries we will consider once we're ready,\" notes Jansens.\n\nShe says her team has been exploring \"the implications of incrementally moving to writing Rust instead of C++, even in the middle of our software stack\" and understanding \"what the limits of safe, simple, and reliable interoperability might be.\"\n\nAlso: Low-code is not a cure for overworked IT departments just yet\n\nBesides limiting Rust support to third-party libraries, the team has opted to support only one-way interoperability -- from C++ to Rust -- to control the shape of the dependency tree.\n\n\"Rust can not depend on C++ so it cannot know about C++ types and functions, except through dependency injection. In this way, Rust can not land in arbitrary C++ code, only in functions passed through the API from C++,\" notes Jansens.\n\nJansens explains it's too risky to allow full cross-language C/C++ and Rust interoperability. The team looked at the implications of building Rust components against Chrome's \"really wide C++ APIs\".\n\n\"At a high level what we found was that because C++ and Rust play by different rules, things can go sideways very easily,\" she notes.\n\nThere's also currently a lack of interoperability (interop) tools providing support from the compiler and type system of each language. She points to the problem of concepts in one language not existing in another.\n\nGoogle is working on a C++/Rust bidirectional interoperability tool called Crubit. However, Google describes it as an \"extremely experimental\" tool at this stage and advises against using it.\n\n\"Without interop tools providing support via the compiler and the type system, developers would need to understand all of the assumptions being made by Rust compiler, in order to not violate them from C++,\" she notes."
    }
}