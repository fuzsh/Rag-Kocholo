{
    "id": "dbpedia_464_1",
    "rank": 63,
    "data": {
        "url": "https://forums.swift.org/t/swiftui-for-non-apple-platforms-like-android-web-windows/25455/117",
        "read_more_link": "",
        "language": "en",
        "title": "SwiftUI for non-Apple platforms (like Android, Web, Windows)",
        "top_image": "https://global.discourse-cdn.com/swift/original/1X/0a90dde98a223f5841eeca49d89dc9f57592e8d6.png",
        "meta_img": "https://global.discourse-cdn.com/swift/original/1X/0a90dde98a223f5841eeca49d89dc9f57592e8d6.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "windows",
            "android",
            "linux",
            "swiftui",
            "web"
        ],
        "tags": null,
        "authors": [
            "Fabio_Kaminski (Fabio Kaminski)"
        ],
        "publish_date": "2020-07-22T21:47:13+00:00",
        "summary": "",
        "meta_description": "I know that SwiftUI isn&#39;t part of the Open Source Swift Project and therefore can&#39;t be really influenced by the Swift community, but during the related WWDC sessions I couldn&#39;t stop thinking that the new declarative and &hellip;",
        "meta_lang": "en",
        "meta_favicon": "https://global.discourse-cdn.com/swift/optimized/2X/6/610ef4c64700c53fad713dda8c9563c461d82e41_2_32x32.ico",
        "meta_site_name": "Swift Forums",
        "canonical_link": "https://forums.swift.org/t/swiftui-for-non-apple-platforms-like-android-web-windows/25455?page=6",
        "text": "Im about to launch a platform for application development, that is multi-process and multi-os based on a heavily modified Chrome engine.\n\nThe primary application SDK is for Swift, that will have direct access to the web layer and even the compositor layers that are gpu accelerated (the ones that the web layer actually uses).\n\nI bet it will be a perfect match for a SwiftUI kind of layer as it can directly draw to the accelerated compositor layers through the Canvas API for instance.\n\nYou wont have to worry in binding to many graphics apis because the platform will have this covered for you.\n\nI was trying to keep this to myself until the launch phase (a couple of months from now), but giving i think this will be a perfect target to this, i couldn't hold it.\n\nThis platform will be a mix of a browser and a application platform like the ones you see in phones, with the difference that for each app there's an application process running as a service and handler of a RPC service(you can think of it as a application server process) distributed with the application and a application UI process for each UI launched (much like the renderer process in Chrome)\n\nI think it will fit perfectly for this kind of project, and i'm real glad that i've chosen Swift instead of Rust back then as my primary/first application language. (I have a good C layer here that would actually turn it feasible to port it to other languages)\n\nI hope that with things like this, we can fill the gaps that Apple would not be really interested in doing."
    }
}