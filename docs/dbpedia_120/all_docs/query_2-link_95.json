{
    "id": "dbpedia_120_2",
    "rank": 95,
    "data": {
        "url": "https://openbooks.library.umass.edu/p132-lab-manual/chapter/introduction-to-mc/",
        "read_more_link": "",
        "language": "en",
        "title": "Introduction to Monte Carlo Methods – Physics 132 Lab Manual",
        "top_image": "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/themes/pressbooks-book/dist/images/favicon-32x32.png",
        "meta_img": "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/themes/pressbooks-book/dist/images/favicon-32x32.png",
        "images": [
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/2018/10/cropped-UMass_Libraries_horiz-mRev-lrg-1.jpg",
            "https://upload.wikimedia.org/wikipedia/commons/2/2f/Monaco_Monte_Carlo_1.jpg",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-ed7678864de5d2f3ff6739ada3fd00e9_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-square-300x290.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-circle-inside-square-300x289.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-3a1dcb1dcc2399d64a2e326add57024e_l3.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-133c02981be415295f7b852004fd10a4_l3.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-e6d580b30a0399bba4b2b5fabc162aa8_l3.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-4b23d71912016f804efc0b9eccb36d25_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-first-dart-300x290.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-second-dart-300x290.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-6429b1cb844ca914ee8e34027cf29725_l3.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-ed7678864de5d2f3ff6739ada3fd00e9_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/Pi_30K.gif",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-ed7678864de5d2f3ff6739ada3fd00e9_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/Calculate-pi-MC-flowchart.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-5d6f08499b372a76c81d56c231cb3468_l3.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-6429b1cb844ca914ee8e34027cf29725_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-protein-1-300x50.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-protein-2-300x71.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-protein-3-300x96.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-cd1b4e031b1d40a7aac9bad1fd8b5b36_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/local-vs-global-minima-300x180.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-protein-4-300x122.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/ql-cache/quicklatex.com-cd1b4e031b1d40a7aac9bad1fd8b5b36_l3.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-protein-3-300x96.png",
            "http://openbooks.library.umass.edu/p132-lab-manual/wp-content/uploads/sites/26/2020/08/MC-protein-method.png",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/themes/pressbooks-book/packages/buckram/assets/images/cc-by-sa.svg",
            "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/themes/pressbooks-book/assets/images/yt_icon_mono_dark.png"
        ],
        "movies": [
            "https://www.youtube.com/embed/feeYe0NRXVo?feature=oembed&rel=0",
            "https://www.youtube.com/embed/FNymVr6FWIs?feature=oembed&rel=0"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Brokk Toggerson",
            "Aidan Philbin"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://openbooks.library.umass.edu/p132-lab-manual/wp-content/themes/pressbooks-book/dist/images/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://openbooks.library.umass.edu/p132-lab-manual/chapter/introduction-to-mc/",
        "text": "Introduction to Monte Carlo Methods\n\nMotivation and a bit of history\n\nThere are some problems in science that are so complicated that they just can’t be analyzed by formulas that you can write down on a piece of paper. This is particularly true in biology and health sciences because the problems are so complex. One example is the folding and shape of proteins. This is famously a very difficult problem. How do you solve such problems? Well, one technique is to use probability, random numbers, and computation. These methods are known as Monte Carlo methods. They are named after the town of Monte Carlo in the country of Monaco, which is a tiny little country on the coast of France which is famous for its casinos, hence the name. These methods rely on computers to simulate the results and these were first really used in the Manhattan project in a serious way. Now, however, they are used in all fields: understand systems like:\n\nUnderstanding systems: cost overruns or time overruns.\n\nFinance: predicting if a commodity price is going to go up or down.\n\nResource exploration: oil and other minerals\n\nAll of these different fields use Monte Carlo methods to gain a deeper understanding of complex problems.\n\nA first example – calculating π\n\nAs a first example of how Monte Carlo methods work, we’re going to do something maybe a little silly and calculate . To see how we can do this using Monte Carlo:\n\nConsider a square that’s one meter on a side. Call the horizontal direction x and the vertical direction y.\n\nInside the square, let’s put a circle. Since the circle is 1 m in diameter, it has a radius of half a meter.\n\nNow, the area of the circle divided by the area of the square is\n\nIn our case, the radius is 0.5m and the side is 1m, so the ratio of areas is\n\nWhich, when you simplify it is\n\nNow, we throw a dart (or in a computer, we choose a random x and y value each between 0 and 1). Let’s say that for this first dart, we get a very large x and a very small y, so the dart lands in the outer corner. We then check to see is the dart inside the circle. Obviously, if you’re doing physical darts you can actually see, but if you’re doing calculation well you would check to see if\n\nIf that is the case, then the dart is inside the circle. We now have one dart thrown and none inside the circle.\n\nDarts thrown Darts inside circle 1 0\n\nNow, throw another dart and repeat the process. Let’s say this dart lands inside the circle. As a result, we now have two darts thrown and one inside.\n\nDarts thrown Darts inside circle 2 1\n\nIf you do a bunch of darts, the number of darts inside divided by the number outside will be the area of the circle divided by the area of the square. Think about it in terms of probability: you’re throwing darts at random\n\nthe number of darts that landed in the circle divided by the number of darts that land in the square is going to be the ratio of their areas. As we have already seen, this ratio is . If you do this for a bunch of darts, a bunch of dots in a computer, once you get to a couple hundred thousand you start to get a relatively reasonable approximation for .\n\nA biologically authentic example – protein folding\n\nFolding proteins, is as described earlier, a famously difficult problem. Now, we will go through how you can use Monte Carlo methods to solve protein folding. The example I’m going to go through here is a simplified version of the method described in Earl et al. .\n\nTo start, you correctly connect your atoms in some random guessed shape. A straight line will even work, but if you can make a better guess, the computation will take less time.\n\nChoose a random atom and move it a small step in a random direction. In our case, I’m going to move the second green atom just up and to the right just a little bit.\n\nNow go and calculate the energy in this configuration.\n\nIs the new energy lower than the energy you started with?\n\nIf the answer is yes (and let’s assume it is), leave the green atom where it is and start over choosing a different atom.\n\nNow we’re going to go back to step 2 and choose a different random atom, say the the first blue atom, and move it a small random distance in a random direction: let’s say down and to the right.\n\nNow go and calculate the energy in this configuration.\n\nIs the new energy lower than the energy you started with?\n\nIf the answer is no (and let’s assume it is), calculate the percent change in energy: . Note this number will be between 0 and 1 because our steps are so small.\n\nChoose a random number between 0 and 1.\n\nIf the random number is less than the percent change in energy (which let’s assume is the case), keep the move anyway. The reason for keeping small increases in energy are local minima: we are looking for the smallest possible energy configuration. However, there may be configurations that represent smaller energy configurations, but not the overall smallest. For a graphical depiction consider the graph below, the first dip is a local minimum, but we want to find the smallest minimum which is the second one. Keeping slightly larger changes in energy, helps us avoid getting stuck in these smaller, but not smallest, energy configurations.\n\nGo back to step 2. This time, we will randomly choose the the last yellow atom to move a random amount in a random direction, in this case is down and to the left.\n\nNow go and calculate the energy in this configuration.\n\nIs the new energy lower than the energy you started with?\n\nIf the answer is no (and let’s assume it is), calculate the percent change in energy: . Note this number will be between 0 and 1 because our steps are so small.\n\nChoose a random number between 0 and 1.\n\nThis time, let’s say the random number is larger than the percent change. In this case, reject the move and put the yellow atom back.\n\nRepeat this hundreds and hundreds and hundreds and hundreds of times and, it may seem weird but, you actually can end up with the correct answer!\n\nBelow, you can see this method in action. You can see that this is a Monte Carlo simulation of a polypeptide chain and the author starts with all the atoms in basically a straight line and then runs the simulation. You can see they’re jiggling around at random. As each atom randomly moves, the computer is calculating the energy and leaving the atoms if the energy is lower and sometimes even if it is higher. Run this run for hundreds of thousands of computations and ultimately it settles down into what is actually the correct answer for this polypeptide chain!\n\nSummary"
    }
}