{
    "id": "dbpedia_120_3",
    "rank": 85,
    "data": {
        "url": "https://www.intechopen.com/chapters/43523",
        "read_more_link": "",
        "language": "en",
        "title": "Variance Reduction of Monte Carlo Simulation in Nuclear Engineering Field",
        "top_image": "https://cdnintech.com/books/3250/1718270533-1031829038/web-cover.jpg",
        "meta_img": "https://cdnintech.com/books/3250/1718270533-1031829038/web-cover.jpg",
        "images": [
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/logo.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/journals/OpenAccessLock.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-share.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-copy.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-checkmark-circle-checked.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-share.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-copy.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-checkmark-circle-checked.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/logoSmall_red.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/eye-icon.png",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/bookmark_red.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/quotation_red.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/institutions/dimension-trimmed.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/institutions/crossref.svg",
            "https://cdnintech.com/media/chapter/43523/1512345123/media/image1.png",
            "https://cdnintech.com/media/chapter/43523/1512345123/media/image2.png",
            "https://cdnintech.com/media/chapter/43523/1512345123/media/image3.png",
            "https://cdnintech.com/media/chapter/43523/1512345123/media/image4.png",
            "https://cdnintech.com/media/chapter/43523/1512345123/media/image6.png",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-share.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-copy.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-checkmark-circle-checked.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-open-book.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/logoSmall_red.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-share.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-copy.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/series/icons/ic-checkmark-circle-checked.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/x.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/facebook.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/linkedin.svg",
            "https://cdnintech.com/web/frontend/www/assets/45.87/svg/instagram.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Pooneh Saidi",
            "Mahdi Sadeghi",
            "Claudio Tenreiro"
        ],
        "publish_date": "2013-03-06T00:00:00",
        "summary": "",
        "meta_description": "Open access peer-reviewed chapter",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": "https://www.intechopen.com/chapters/43523",
        "text": "1. Introduction\n\nThe Monte Carlo method is a numerical technique that using random numbers and probability to solve problems. It represents an attempt to model nature through direct simulation for any possible results, by substituting a range of values (a probability distribution) for any factor that has inherent uncertainty. The method is named after the city in the Monaco principality, because of roulette, a simple random number generator. The name and the systematic development of Monte Carlo method dates from about 1944.The name “Monte Carlo” refers to the Monte Carlo Casino in Monaco because of the similarity of statistical simulation to games of chance and was coined by Metropolis during the Manhattan Project of World War II, ‎[1].\n\nMonte Carlo is now used routinely in many fields, such as radiation transport in the Nuclear Engineering, Dosimetry in Medical Physics field, Risk Analysis, Economics… in all the applications the physical process of the solution is simulated directly based on the major components of a Monte Carlo algorithm that must be available during the simulations. The primary components of a Monte Carlo simulation are:\n\nProbability density functions (pdf’s) the physical system must be described by a set of pdf’s;\n\nRandom number generator: a source of random numbers uniformly distributed on the unit interval must be available;\n\nSampling rule, a prescription for sampling from the specified pdf’s;\n\nScoring: the outcomes must be accumulated into overall tallies or scores for the quantities of interest;\n\nError estimation: an estimate of the statistical error (variance) as a function of the number of trials and other quantities must be determined;\n\nVariance reduction techniques: methods for reducing the variance in the estimated solution to reduce the computational time for Monte Carlo simulation;\n\nParallelization and vectorization algorithms to allow.\n\nIn the field of nuclear engineering, deterministic and stochastic (Monte Carlo) methods are used to solve radiation transport problems. Deterministic methods solve the transport equation for the average particle behavior and also contain uncertainties associated with the discretization of the independent variables such as space, energy and angle of the transport equation and can admit solutions that exhibit non-physical features. Although the physics of photon and electron interactions in matter is well understood, in general it is impossible to develop an analytic expression to describe particle transport in a medium. This is because the electrons can create both photons (e.g., as bremsstrahlung) and secondary or knock-on electrons (δ-rays) and conversely, photons can produce both electrons and positrons.‎[2] The Monte Carlo (MC) method obtains results by simulating individual particles and recording some aspects of their average behavior. The average behavior of particles in the physical system is then inferred from the average behavior of the simulated particles.‎[3] This method also enables detailed, explicit geometric, energy, and angular representations and hence is considered the most accurate method presently available for solving complex radiation transport problems. For example the most important role of Monte Carlo in radiotherapy is to obtain the dosimetric parameters with high spatial resolution.‎[4] As the cost of computing in the last decades continues to decrease, applications of Monte Carlo radiation transport techniques have proliferated dramatically. On the other hand, Monte Carlo techniques have become widely used because of the availability of powerful code such as BEAM, EGSnrc, PENELOPE and ETRAN/ITS/MCNP on personal computers. These codes able to accommodate complex 3-D geometries, inclusion of flexible physics models that provide coupled electron-photon and neutron-photon transport, and the availability of extensive continuous-energy cross section libraries derived from evaluated nuclear data files.‎[5]\n\nIt should be noted that these codes are general purpose, and are therefore not optimized for any particular application and are strongly depended on the solution subject. One of the difficulties associated with Monte Carlo calculations is the amount of computer time required to generate sufficient precision in the simulations. Despite substantial advancements in computational hardware performance and widespread availability of parallel computers, the computer time required for analog MC is still considered exorbitant and prohibitive for the design and analysis of many relevant real-world nuclear applications especially for the problems with complex and large geometry. But there are many ways (other than increasing simulation time) in the Monte Carlo method that users can improve the precision of the calculations. These ways known as Variance Reduction techniques and are required enabling the Monte Carlo calculation of the quantities of interest with the desired statistical uncertainty. Without the use of variance reduction techniques in complex problems, Monte Carlo code should run the problem continuously for weeks and still not obtain statistically significant reliable results. The goal of Variance Reduction techniques is to produce more accurate and precise estimate of the expected value than could be obtained in analog calculation with the same computational efforts. Variance reduction parameters are vary with problem types so iterative steps must be repeated to determine VR parameters for different problems.‎[6]\n\nAdvertisement\n\n2. Conceptual role of the Monte Carlo simulation\n\nThe conceptual role of the Monte Carlo simulations is to create a model similar to the real system based on known probabilities of occurrence with random sampling of the PDFs.\n\nThis method is used to evaluate the average or expected behavior of a system by simulating a large number of events responsible for its behavior and observing the outcomes. Based on our experience concerning the distribution of events that occur in the system; almost any complex system can be modeled. Increasing the number of individual events (histories) improve the reported average behavior of the system.\n\nIn many applications of Monte Carlo the physical process is simulated directly and there is no need to even write down the differential equations that describe the behavior of the system. The only requirement is that the physical or mathematical system be described by probability density functions (PDF). Once the probability density functions are known the Monte Carlo simulation can proceed by random sampling from the probability density functions. Many simulations are then performed multiple trials or histories and the desired result is taken as an average over the number of observations. In many practical applications one can predict the statistical error the variance in this average result and hence an estimate of the number of Monte Carlo trials that are needed to achieve a given error\n\nAdvertisement\n\n3. Accuracy, precision and relative error in Monte Carlo simulation\n\nThe first component of a Monte Carlo calculation is the numerical sampling of random variables with specified PDFs. Each random variable defines as a real number that is assigned to an event. It is random because the event is random and also is variable because the assignment of the value varies over the real values. In principle, a random number is simply a particular value taken on by a random variable.\n\nWhen the random number generator is used on a computer, random number sequence is not totally random. Real random numbers are hard to obtain. A logarithm function made the random number and the function repeats itself over time. When the sequence walked through, it will start from the beginning. The typical production of random numbers is in the range between 0 and 1.\n\nA sequence of real random numbers is unpredictable and therefore un-reproducible. A random physical process, for example radioactive decay, cosmic ray arrival times, nuclear interactions, and etc, can only generate these kinds of sequences. If such a physical process is used to generate the random numbers for a Monte Carlo calculation, there is no theoretical problem. The randomness of the sequence is therefore not totally random; this phenomenon is called pseudorandom. [7] Pseudo Random numbers look nearly random however when algorithm is not known and may be good enough for our purposes. Pesudo random numbers are generated according to a strict mathematical formula and therefore reproducible and not at all random in the mathematical sense but are supposed to be indistinguishable from a sequence generated truly randomly. That is, someone who does not know the formula is not supposed to be able to tell that a formula was used rather than a physical process. When using Monte Carlo simulation, it is desirable to have any variable depending on a uniform distributed variable, ρ. The probability, P, that a random number is smaller for a certain value, s, should be equal for both distributions. ‎[8]\n\nP x < ρ = P ( y < s ) E1\n\nThe probability is in the range between 0 and 1, can be rewritten as a cumulative distribution:\n\n∫ - ∞ ρ g x d x = ∫ - ∞ s f y d y = ρ E2\n\nThe left side of equation (2) is the uniform distribution between 0 and 1 and f(y) is the distribution needed. In this way any distribution can be made with a uniform distribution.\n\nMonte Carlo results are obtained by simulating particle histories and assigning a score xi to each particle history. The particle histories typically produce a range of score depending on the selected tally. By considering the f(x) as the probability density function (pdf) for selecting a particle history that scores x to the estimated tally being, the true answer (or mean) is the expected value of x, where:‎[3]\n\nE X = ∫ x f x d x = t r u e m e a n E3\n\nBy assuming a scalar value for each Monte Carlo simulation output, the Monte Carlo sample mean of the first n simulation runs is defined as follow:\n\nx - = 1 n ∑ i = 1 n x i E4\n\nWhere xi is the value of x selected from probability density function, f(x), for the ith history and n is the total number of the histories which are calculated in the problem. The sample mean x - , is the average value of the xi for all the histories used in the problem. But generally it does not give an accurate estimate, on the other hand there is no idea how much confidence can be considered in the estimate. So to evaluate the quantity of confidence in the estimation the sample variance can be used. Sample variance provides an estimate of how much the individual samples are spread around the mean value and is obtained as follow:\n\nδ 2 = ∫ x - E X 2 f x d x = E x 2 - ( E ( x ) ) 2 E5\n\nWhere δ 2 is the sample variance, E(X) is true mean and f(x) is the probability density function (pdf).\n\nThe standard deviation of scores has been obtained by the square root of the variance ( δ 2 ) , which is estimated via Monte Carlo method as s.\n\nThe standard deviation is obtained by the following equation:\n\ns 2 = 1 n - 1 ∑ i = 1 n ( x i - x - ) 2 ~ x 2 - - x i 2 E6\n\nWhere\n\nx 2 - = 1 n ∑ i = 1 n x i 2 E7\n\nTo define the confidence interval in Monte Carlo estimation two statistical theorems are used: the law of large number and the central limit theorem.\n\nThe law of large number provides an estimate of the uncertainty in the estimate without any idea concerning the quantity of n that must be consider in calculation in practice.\n\nTo define confidence interval for the precision of a Monte Carlo result, the Central Limit Theorem of probability is used as follow:‎[9]\n\nlim n → ∞ ⁡ Prob ⁡ E x + α δ n < x - < E X + β δ n = 1 2 π ∫ α β e - t 2 2 d t E8\n\nWhere α and β can be any arbitrary values and n is the number of histories in the simulation. According to Eq. (6), as the uncertainty is proportional to 1 n , by increasing the number of histories by quadrupled the uncertainty in the estimation will half, which is an inherent drawback of the Monte Carlo method. So for large n, in terms of the sample standard deviation, s x - , the Eq. (6) can be rewritten as:\n\nProb ⁡ α < x - - E X σ n < β ~ 1 2 π ∫ α β e - t 2 2 d t E9\n\nAnd for large n Eq.7 can be written as:\n\nP r o b [ x - - λ s x - n ≤ E X ≤ x - + λ s x - n ] ~ 1 2 π ∫ - λ λ e - t 2 / 2 d t E10\n\nλ is the number of standard deviation, from the mean, over which the unit normal is integrated to obtain the confidence coefficient. Results for various values of λ are shown in Table1. So to have confidence level the estimation for x is generally obtained as:\n\nx ¯ ± λ s x n E11\n\nFor example for λ=1, the interval, [ x ¯ - λ s x n , x ¯ + λ s x n ] has a 68% chance of containing the true mean.\n\nλ 0.25 0.50 1.00 1.5 2.00 3.00 4.00 Nominal Confidence Limit 20% 38% 68% 87% 95% 99% 99.99%\n\nEq. (8) shows that the deviation of the sample mean from the true mean approaches zero as n → ∞ , and the quantity of δ n present a measured of the deviation of the sample mean from the population mean by using n samples.\n\nTo construct a confidence interval for sample mean, x , ¯ that has a specified probability of the containing the true unknown mean, the sample standard deviation s(x),is used to approximate the population standard deviation, δ(x). But this required that E(x) and δ2 be finite and exist.\n\nThe sample variance of x - is then given by:\n\ns x - 2 = s 2 n E12\n\nIt should be noted that the confidence intervals are valid only if the physical phase space is adequately sampled by the Monte Carlo calculation. The uncertainty of the Monte Carlo sampled physical phase space represents the precision of the simulation. There are several factors that can affect the precision such as tally type, variance reduction techniques and the number of histories simulated. Generally uncertainty or error caused by the statistical fluctuations of the xi, refers to the precision of the results and not to the accuracy. Accuracy is a measure of how close the sample mean, x - , is to the true mean. (Figure 1)\n\nOn the other hand the difference between the true mean and the sample mean is called the systematic error. To estimate the relative error at the 1δ level which represents the statistical precision Eq. (10) is used. ‎[10]\n\nR = s x - x - E13\n\nIn terms of Central Limit Theorem, the estimated relative error squared R2 should be proportional to 1 n . So as each history will take on average, the same amount of computer time and the used computer time, T, in a Monte Carlo calculation should be directly proportional to n (the number of histories); therefore R2T should be approximately constant. Thus, the metric of efficiency for a given tally, called the figure-of-merit (FOM), includes computer time as well and define as:‎[11]\n\nF O M = 1 R 2 T E14\n\nWhere R is the relative error for the sample mean, and T is the total computer time taken to simulate n histories.‎[12], ‎[13]\n\nThe FOM is also a tally reliability indicator in the sense that if the tally is well behaved, the FOM should be approximately constant (with the possible exception of statistical fluctuations early in the problem), and is thus an important and useful parameter to assess the quality (statistical behavior) of a tally bin. If the FOM is not approximately constant, the confidence intervals may not include the expected score value E(x) the expected fraction of the time.\n\nConsidering the following form of the previous relation can show the significant of the actual value of the FOM. ‎[14]\n\nThe above expression shows a direct relationship between computer time and the value of the FOM. Increasing the FOM for a given tally will subsequently reduce the amount of computer time required to reach a desired level of precision. Thus the FOM can be used to measure the efficiency when the variance reduction techniques have been used. The ratio of FOMs before and after using the variance reduction techniques, gives the factor of improvement.\n\nAnother use of FOM is to investigate the improvement of the new version of a Monte Carlo code.\n\nThe ratio of the FOMs for identical sample problems gives the factor of improvement. When the FOM is not a constant as a function of n, means that the result is not statistically stable; that is, no matter how many histories have been run, the important particles are showing up infrequently and have not yet been sampled enough.[3,9]\n\nAnother additional use of the FOM is to estimate the required computer time to reach a desired precision by considering: T~1/(R2 x FOM).\n\nAdvertisement\n\n4. Variance reduction\n\nThe uncertainty of Monte Carlo simulation can be decreased by implementing some accurate physical models but this leads to longer calculation times. On the other hand, the accuracy of Monte Carlo dose calculation ‎[15] is mainly restricted by the statistical noise, because the influence of Monte Carlo method approximations should be much smaller. This statistical noise can be decreased by a larger number of histories leading to longer calculation times as well. However, there are a variety of techniques to decrease the statistical fluctuations of Monte Carlo calculations without increasing the number of particle histories. These techniques are known as variance reduction.‎[16] Variance Reduction techniques are often possible to substantially decrease the relative error, R, by either producing or destroying particles, or both.\n\nDecreasing the standard deviation, δ, and increasing the number of particle histories, n, for a given amount of computer time conflict with each other. Because decreasing δ requires more computer time per history and increasing n, results in less time per history ‎[17] In general not all techniques are appropriate for all applications, also in some case some techniques tend to interfere with each other so choosing the Variance Reduction technique strongly depend on the solution.\n\nThe main goal of all the variance reduction techniques is to increase precision and decrease the relative error. The precision of the calculation is increased by increasing the number of particle histories but needs a large amount of computer running time so to accelerate the Monte Carlo simulation and reduce the computing time these techniques are applied.[16-17]\n\nMonte Carlo variance reduction techniques can be divided into four classes:\n\nThe truncation method like geometry truncation, time and energy cut off;\n\nThe population control method like Russian roulette, geometry splitting and weight windows;\n\nThe modified sampling method (source biasing); and\n\nThe partially deterministic method like point detectors.\n\nAdvertisement\n\n5. Popular variance reduction techniques\n\nSeveral of the more widely used variance reduction techniques are summarized as follow:\n\n5.1. Splitting/Roulette\n\nGeometric Splitting/Russian roulette is one of the oldest and most widely used variance reduction techniques, and when used properly, can significantly reduce the computational time of a Monte Carlo calculation.\n\nApproximately 50% of CPU time is consumed to track secondary and higher-order photons and the electrons they set in motion. It is possible to remove a part of these photons by Russian roulette. ‎[18]\n\nGenerally when particles move from a region of importance Ii to a more important region Ij, (Ii < Ij ), the particle is split into n = Ij=Ii identical particles of weight w=n (if n is not an integer, splitting is done in a probabilistic manner so that the expected number of splits is equal to the importance ratio) it means that the number of particles is increased to provide better sampling and the weight of the particle is halved. Figure 2 shows a schematic diagram of geometry splitting, when a particle moves from a lower importance region to a region with higher importance. Splitting increases the calculation time and decreases the variance whereas Russian roulette does the complete opposite.‎[19]\n\nIn case of moving to a less important region Russian roulette is played and the particle is killed with probability 1 - (Ij=Ii), or followed further with probability Ij=Ii and weight w × Ii=Ij.\n\nIt means that the particles are killed to prevent wasting time on them.(Figure 3)\n\nThe objective of these techniques is to spend more time sampling important spatial cells and less time sampling unimportant spatial cells. This is done by dividing the problem geometry into cells and assigning each cell i, an importance Ii.\n\nEnergy splitting/roulette are similar to geometric splitting/roulette except that energy splitting/roulette is performed on the energy domain rather that on the spatial domain.\n\nRussian roulette can be shown that the weights of all particle tracks are the same in a cell no matter which geometrical path the tracks have taken to get to the cell, assuming that no other biasing techniques, e.g. implicit capture, are used. In the simulations if a track's energy drops through a prescribed energy level, the roulette game (based on the input value of the survival probability) is played. If the game is won, the track's history is continued, but its weight is increased by the reciprocal of the survival probability to conserve weight.‎[20] Russian roulette is frequently, if not always, used in radiation transport problems and can be applied at any time during the life of a particle, usually after an interaction has taken place. Russian roulette always increases variance since it cuts off histories that could still contribute to the detector, but it also always reduces the simulation time in compare with an implicit capture (which will explained later) scheme without weight thresholds.\n\nGenerally, in a deep penetration shielding problem the number of particles diminishes to almost nothing in an analog simulation, but splitting helps keep the numbers built up. To have accurate and precise results it is recommended to keep the population of tracks traveling in the desired direction more or less constant that is, approximately equal to the number of particles started from the source. Particles are killed immediately upon entering a zero importance cell, acting as a geometry cutoff. Geometry splitting/Russian roulette works well only in problems without any extreme angular dependence.‎[21] In the extreme case, if no particles ever enter an important cell where the particles can be split, the Splitting/Russian roulette is useless. Energy splitting and roulette typically are used together. Energy Splitting/roulette is independent of spatial cell. If the problem has space-energy dependence, the space-energy dependent weight window is normally a better choice.\n\nSplitting and roulette are very common techniques in Monte Carlo simulation; not only because of their simplicity but also since they only deal with variance reduction via population control and do not modify pdfs, they can be used in addition to most other techniques to have more effect.\n\n5.2. Energy cut off\n\nA Monte Carlo simulation can be made much faster, by stopping a particle once its energy drops below certain threshold energy (cutoff energy). According to the particle energy and the material that the particle is travelling through, the travelling path length of the particle can estimate. If this path length is below the required spatial resolution, particles are terminated and assume their energy is absorbed locally. This can be done by energy cut off that terminate tracks and thus decrease the time per history. ‎[22] Because low-energy particles can produce high energy particles, the energy cutoff can be used only when it is known that low-energy particles are either of zero or almost zero importance at the specific region (low energy particles have zero importance in some regions and high importance in others).‎[23] In the Monte Carlo simulations Ecut is the photon energy cut-off parameter. It means, if a scattered photon is created with energy less than Ecut the photon will not be transported and the energy deposited locally. According to the above explanation seems the smaller Ecut the more accurate are the results but there are two criteria that should be considered in the simulations for selecting Ecut: (a) the mean free path (MFP) of photons with energy equal or less than Ecut should be small in compared with the voxel sizes or (b) the energy fraction carried by photons with energy less than Ecut is negligible compared with the energy fraction deposited. In terms of efficiency selecting the higher Ecut results in decreasing the CPU time, but on the other hand, selecting a higher value for Ecut can makes it a source of additional statistical fluctuations if it becomes comparable or even bigger than the average energy deposited by electrons. In this case the answer will be biased (low) if the energy cutoff is killing particles that might otherwise have contributed in the process even if N →∞. ‎[9]\n\n5.3. Time cutoff\n\nA time cutoff is like a Russian roulette, with zero survival probability. The time cutoff terminates tracks and thus decreases the computer time per history. Particles are terminated when their time exceeds the time cutoff. The time cutoff can only be used in time-dependent problems where the last time bin will be earlier than the cutoff. The energy cutoff and time cutoffs are similar; but more caution must be considered with the energy cutoff because low energy particles can produce high-energy particles, whereas a late time particle cannot produce an early time particle. ‎[10]\n\nAdvertisement\n\n6. Weight window technique/weight window generator\n\nThe weight window technique administers the splitting and rouletting of particles based on space and energy dependent importance. This technique is one of the most used and effective variance reduction methods that deals with both the direct decrease of variance via a large number of samples (through splitting) and the decrease of simulation time via Russian roulette, and is therefore a very effective variance reduction technique. On the other hand this technique combines Russian roulette and splitting.\n\nTo apply this variance reduction technique a lower weight bound and the width of the weight window for each energy interval of each spatial cell should be considered.\n\nIf a particle's weight is below the lower weight bound, Russian roulette is performed, and the particle's weight is either increased to be within the weight window or the particle is terminated. On the other hand, if the particle's weight is above the upper weight bound, the particle is split such that the split particles all have weights within the weight window. If the particle's weight falls within the weight window, no adjustment is performed.‎[24]\n\nAs shown in Figure 4, if a particle has a weight equal to wini, which is lower than wL, Russian roulette will play with survival weight equal to ws which is also provided by the user. It should be noted that the ws has to be between the windows define by wu and wL. If wini is greater than wu, the particle is split into a predefine number of particles until all the particles are within the defined window. If wini is within the window the particle continues with the same weight.\n\nOne problem that may arise when using weight windows is that over-splitting might occur when a particle enters a region or it is generate in a region with higher weight than the upper limit of the weight window in that region. This can usually be solved by modifying some of the weight window parameters. ‎[21]\n\nThe weight windows generator is used to determine weight windows for the simulations. When generating weight windows, it is easy to generate unwanted zeros. Zero weight windows in a region are either due to particles not entering that region or due to particles that did enter the region but did not add to the tally score. To increase the number of particles that enter or generate in a region of the system, a uniformly distributed volumetric photon source that covers the whole system is used.‎[25]\n\nThe weight window generator calculates the importance of each cell in the problem. This is done by noting that the importance of a particle at a point in phase space is equal to the expected score a unit weight particle would generate. Thus, the cell's importance can be estimated as follow:\n\nI m p o r t a n c e = t o t a l s c o r e d u e t o p a r t i c l e s e n t e r i n g t h e c e l l t o t a l w e i g h t e n t e r i n g t h e c e l l E15\n\nAs both the weight window and geometry splitting use the Russian roulette, there is a question concerning the difference between these two methods. The main differences are:\n\nThe weight windows are space–energy dependent whereas geometry splitting is only dependent on space;\n\nThe geometry splitting, splits the particles despite the weight of the particle but the weight window works completely in opposite way, it means before roulette is played and the particles split, the weight of the particle is checked against the weight window;\n\nThe geometry splitting is only applied at surfaces, but the weight window method is applied at surfaces and collision sites or both;\n\nThe geometry splitting method is based on the ration of importances across the surface but weight windows utilizes absolute weights;\n\nAs the geometry splitting is weight independent, will preserve any weight fluctuation but weight window can control weight fluctuation by other variance reduction techniques to force all particles in a cell to have a weight within a weight window.\n\nThe weight windows can be generated via the weight window generator but it requires considerable user understanding and intervention to work correctly and effectively.\n\nAdvertisement\n\n7. Implicit capture\n\nImplicit capture, survival biasing, and absorption by weight reduction are synonymous. Implicit capture is a very popular variance reduction technique in radiation transport MC simulations. The implicit capture technique involves launching and tracing packets of particles instead of one by one. At launch, each packet is assigned an initial weight W0. The packet is traced with a step length distribution determined by the total attenuation coefficient, δ. Implicit capture is a variance reduction technique that ensures that a particle always survives a collision (i.e., the particle is never absorbed).\n\nAll of the variance reduction techniques vary the physical laws of radiation transport to sample more particles in regions of the phase-space that contribute to the objective.\n\nTo compensate for this departure from the physical laws of radiation transport, the concept of particle weight, w, is introduced, where the weight can be considered as the number of particles being transported. When a variance reduction technique is applied, the weight of the particle is adjusted using the following “conservation” formula: [20]\n\nw(biasedprobabilitydensityfunction)=w0(unbiasedprobabilitydensityfunction)E16\n\nWhere w0 is the weight before the variance reduction technique is applied. In the implicit capture technique, a particle always survives a collision, but the particle emerges from the collision with a weight that has been reduced by a factor of δs / δ, which is the probability of scattering. Thus, the total particle weight is conserved.\n\nIf W0 is the initial weight of the particle and the weight w that the particle will have after a collision, the relationship between them can be describe as follow:\n\nw 0 → p = δ s δ i f W ' = W p * = 1 - p i f W ' = 0 → W ' ¯ = p W 0 + p * × 0 = δ s δ W 0 E17\n\nWhere p is the probability of the particle being scattered after a collision, δ s , is the scattering macroscopic cross-section, δ is the total macroscopic cross-section and W ' ¯ is the expected outcome of the weight. For the implicit capture the particle always survives a collision with weight:\n\nW ' = δ s δ W 0 E18\n\nWhen implicit capture is used rather than sampling for absorption with probability δs=δ, the particle always survives the collision and is followed with a new weight. Implicit capture can be assumed as a splitting process in which the particle is split into absorbed weight and surviving weight. ‎[10] The main advantage of implicit capture is that a particle that has reached the vicinity of the tally region is not absorbed just before a score is made. In general Implicit capture always reduces the variance, but the total figure-of-merit may not improve, as the simulation time is increased because of the longer particle histories. It is, however, widely used because of its simplicity and ease of implementation.\n\nAdvertisement\n\n8. Forced collisions\n\nThe forced collision method is a variance reduction scheme that increases sampling of collisions in specified regions.\n\nIf the number of mean-free paths (MFP) to the next photon interaction be larger than the simulated phantom thickness, the photon will leave the region of interest without any interacting or depositing energy. Prediction of this event is not possible and to have precision results the photon behaviour must be traced through the interest region until it escapes from the region. In this case the computing time spent on the transport of escaping photons is then wasted and if the fraction of escaping photons is very large, the simulation will be very inefficient. The forced collision technique improves the efficiency by considering only the fraction of photons that interact in the phantom.\n\nAs shown in Figure 5, when a specified particle enters a region defined as the forced collision region, the incident particle splits into un-collided and collided particles. The un-collided particle passes through the current cell without collision and is stored in the bank until later when its track is continued at the cell boundary. The collided particle is forced to collide within the specified cell.\n\nIt means that the “passing-through case” and the “collision case” are analysed due to a single incident particle simulation. These split particles are weighted by the following Equation:\n\nW u n c o l l = W 0 e - δ d W c o l l = W 0 ( 1 - e - δ d ) E19\n\nWhere W0 is the initial weight of the particle, Wuncoll is the un-collided particle’s weight and Wcoll is the weight of collided particle. d is the distance to region surface in the particle’s direction, and δ is the macroscopic total cross section of the region material. ‎[26]\n\nThe probability of colliding within a distance x is given by:\n\nP r o b = 1 - e - δ x E20\n\nThe particle’s weight is then reduced appropriately and Russian roulette is used to ensure that the calculation time is not increased significantly by the technique. ‎[27]\n\nAdvertisement\n\n9. Exponential transformation\n\nThe exponential transform also called path length stretching is a variance reduction technique designed to enhance efficiency for deep penetration problems (e.g. shielding calculations) or surface problems (e.g. build-up in photon beams). It is often used for neutron Monte Carlo simulation and is directly applicable to photons as well.\n\nIn applying the exponential transformation a stretching parameter is used to increase distances travelled in directions of interest, while in the use of Russian roulette and splitting other parameters are introduced to increase the death probabilities in regions of low importance and the number of independent particles found in regions of high importance. ‎[7]\n\nExponential transformation samples the distance to collision from a non-analog probability density function. Specifically, it involves stretching the distance between collisions in the direction of interest and reducing the distance between collisions in directions of little interest by modifying the total macroscopic cross section as follow:\n\nδ * = δ ( 1 - p μ ) E21\n\nWhere δ * is the modified total cross section, δ is the true total cross section, p is the exponential transform parameter used to vary the degree of biasing, p < 1, and μ is the cosine of the angle between the preferred direction and the particle’s direction.\n\nIt should be mentioned that the exponential transformation technique can produce large weight fluctuations and subsequently produce unreliable mean and variance estimates. Exponential transformation generally decreases the variance but increases the time per history.‎[28]\n\nAlso it should be noted that due to the large weight fluctuations that can be produced by the exponential transform the exponential transform should be used accompanied by weight control.\n\nAdvertisement\n\n10. Conclusion\n\nIn this chapter we discussed the accuracy, precision, relative error & figure of merit in the Monte Carlo simulation, the Monte Carlo method is considered to be the most accurate method presently available for solving radiation transport problems in nuclear engineering field but it is extremely expensive computationally, because this method should simulate individual particles and simulating the average behaviour of the particles in the system. Also for complex problems that the probability is small that a particle will contribute to the interest region, some form of variance reduction must be applied to reduce the required computer time to obtain the results with sufficient precision.\n\nThe disadvantage associated with Monte Carlo codes is that they require long calculation times to obtain well converged results, especially when dealing with complex systems. Computation time constitutes an important and a problematic parameter in Monte Carlo simulations, which is inversely proportional to the statistical errors so there comes the idea to use the variance reduction techniques.\n\nIn other word to shorten the calculation time and to decrease the error of the results obtained with Monte Carlo methods, i.e. to improve the efficiency of a Monte Carlo calculation, variance reduction techniques must be used so in this chapter we also discussed various variance reduction techniques. These techniques play an important role in reducing uncertainties and improving the statistical results. As already mentioned, it is possible to reduce the estimated variance of a sample for a given number of histories using techniques which increase the positive sampling efficiency and reduce the intrinsic dispersion of the contributions to the response, biasing the natural occurrence of more important paths and reducing the natural occurrence of less important, and especially ‘nearly zero’ importance paths.\n\nIn this chapter, several variance reduction strategies have been described with the aim of reducing CPU time.\n\nIn general assign the variance reduction techniques results in several factors that should be noted in the simulations:\n\nHighly reliable systems\n\nFinancial engineering/quantitative finance\n\nSimulation optimization\n\nLots of alternatives\n\nNoisy gradient estimates\n\nMetamodeling/mapping\n\nReal-time control using simulation\n\nThe usage of variance reduction methods in Monte Carlo simulations is not straightforward. There is a problem that these methods may be used as a black box leading to results not being analysed correctly. Note, all of the variance reduction techniques have a certain amount of over-head associated with their use, and in many situations the cost of this over-head outweighs the advantages of the technique."
    }
}