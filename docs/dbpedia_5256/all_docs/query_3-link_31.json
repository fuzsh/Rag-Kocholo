{
    "id": "dbpedia_5256_3",
    "rank": 31,
    "data": {
        "url": "https://medium.com/verotel/dont-do-code-review-try-mob-instead-82149ef035df",
        "read_more_link": "",
        "language": "en",
        "title": "Don’t do Code Review, try Mob instead",
        "top_image": "https://miro.medium.com/v2/resize:fit:700/1*9Y7R2yFJsAmG1JrV0Jj98Q.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:700/1*9Y7R2yFJsAmG1JrV0Jj98Q.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*hO-CBqMGS2aSh3aqR3hv7w.png",
            "https://miro.medium.com/v2/resize:fill:48:48/1*h6r2AER5C6l2Lk-_0hKcQQ.png",
            "https://miro.medium.com/v2/resize:fill:144:144/1*hO-CBqMGS2aSh3aqR3hv7w.png",
            "https://miro.medium.com/v2/resize:fill:64:64/1*h6r2AER5C6l2Lk-_0hKcQQ.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Svaťa Šimara",
            "svatasimara.medium.com"
        ],
        "publish_date": "2022-01-28T13:48:06.908000+00:00",
        "summary": "",
        "meta_description": "The most significant problem of a code review is asynchronous ping-pong of quite difficult questions/answers. This is inefficient, but also makes people frustrated. Another approach is to do code…",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/verotel/dont-do-code-review-try-mob-instead-82149ef035df",
        "text": "Code review disadvantages\n\nLong feedback loop\n\nWaiting\n\nMultiple unfinished tasks\n\nWritten communication takes time, a lots of time\n\nA typical day of programming meant for me “write code -> send to review”. What now? Eh… another task. The task was easy, let’s start a third one. Then urge the need for a review, then wait for a while, do a review by myself…\n\nFinally — a review of the second task! No, I disagree, have to answer properly…. Another hour later I finish summarizing argumentation, and next day my colleague just answers OK. What? Just OK?!\n\nThe most significant problem of a code review is asynchronous ping-pong of quite difficult questions/answers. This is inefficient, but also makes people frustrated.\n\nAnother approach is to do code review as fast as possible. When I apply this approach, I end up doing code review all week long. And that’s not an exaggeration. The more code review I do, the more I receive requests for them. This leads again to frustration.\n\nThe goal of code review\n\nWhat are benefits of a code review?\n\nSharing knowledge\n\nSharing responsibility\n\nImproving code structure\n\nLearning\n\nA good code review covers all those aspects. But code review is just a tool, if we can find a better tool, we can throw code review away.\n\nMob programming\n\nMob programming means all team members are present in the same time in front of one screen. Or work remotely on a shared screen — that is my case.\n\nI work in team of 4 people, and we work ~5–6 hours in day in the Mob style. At first we decide for the task, and when possible we rotate in driving sessions.\n\nA session means there is a one driver — one who types/clicks, and one navigator — navigator tells the driver what to do. The 2 other team members keeps attention, and only when the navigator goes in a wrong direction, then interrupts. Navigator navigates for 3 minutes — really, just 3 minutes, and then rotate.\n\nRotation means that driver now navigates — should know next step, navigator takes a rest, and one of the 2 mobs drives. And after 3 minutes another rotation, and again, …\n\nThis rotation style is intense. You have to keep attention all the time, otherwise You’ll have to navigate in couple of minutes, and You’ll have no idea how to navigate.\n\nTo stay in shape we do regular breaks for bathroom/coffee, and of course a long break for a lunch.\n\nGoals of code view are fulfilled\n\nSharing knowledge is instant — every team member follows the mental process, and knows why was what done.\n\nSharing responsibility in my opinion full — I take responsibility for everything that we produce as I can anytime say “I disagree” or “I have a better idea”.\n\nCode structure is agreed by all team members, therefore is consistent and the best team members can do.\n\nLearning… is again instant, and intense. If the navigator is good, they’ll not only call what to do, but also how to do it efficiently. I learn daily better software architecture, better testing strategies, how to use IDE efficiently, … just because navigators know (and share) pieces I’m missing.\n\nAll in all, Mob is in my opinion superior to code review in every aspect. And code review ping-pong frustration.\n\nMob must be inefficient\n\nFor first couple of weeks I thought that Mob is inefficient.\n\nAnd that is definitely true when the team is settling or when team members aren’t yet experienced with languages and tools. In that period, Mob is extremely about learning.\n\nBut once the team passes these initial weeks, it becomes very different.\n\nAlmost everyday I experience a problem that would take me at least an hour (or hours) to solve when I would be alone. But there are 4 of us, and usually someone else have an idea how to solve it within minutes. My colleagues confirms that they experience the same — they have no idea what to do, and someone else knows it immediately.\n\nEvery team member is also better/expert in a different discipline. One is good in DBs, one in the framework we use, one is eg. good in decision making. So when the navigator is stuck, this one “expert” helps to overcome obstacles. And that happens instantly.\n\nMob requirements\n\nMob programming isn’t for everyone.\n\nAt first if You cannot be in the same time together (remote is ok), then it doesn’t work.\n\nMob requires good communication skills. There is no space for passive-aggressiveness; or arrogance. If You want to show You are better than Your colleagues, You aren’t a candidate for Mob.\n\nMob requires patience and respect — everyone isn’t always in the best shape and condition. If You like to rush solution, and You aren’t interested in leading/teaching colleagues, the Mob won’t work. Your colleagues won’t get better and the team won’t improve.\n\nThat’s all. If You can be in the same time (even remotely) together, You are patient, interested in new approaches, and Your colleagues have similar point of view, go for it. Mob is the way!\n\nMob vs Code Review\n\nIf I compare Mob vs code review, I have to laugh.\n\nIn code review style, I would struggle to solve an issue for hours, then I would send solution to code review, then I would wait, then the reviewer would suggest changes, I would argue for my solution or change the code. After 2–5 days I would have a code ready to be merged, but then I would have to solve merge conflicts!\n\nThere is no such thing in Mob programming.\n\nStruggle is limited by team members experiences\n\nNo waiting\n\nInstant argumentation/code change\n\nLess merge conflicts\n\nMob has much more benefits, the most important for me is improving relation between me and my colleagues. Even programmers are social creatures, and Mob helps a lot.\n\nI’d like to summarize that Mob programming dramatically shortens the feedback loop, and it has awesome consequences."
    }
}