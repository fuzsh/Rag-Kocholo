{
    "id": "dbpedia_4764_1",
    "rank": 33,
    "data": {
        "url": "https://github.com/go-playground/validator",
        "read_more_link": "",
        "language": "en",
        "title": "playground/validator: :100:Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving",
        "top_image": "https://opengraph.githubassets.com/0eb5b846f1a43ed33283886d88b20e249fa1a7cfc59ee7e932b9c1ce8c39b90e/go-playground/validator",
        "meta_img": "https://opengraph.githubassets.com/0eb5b846f1a43ed33283886d88b20e249fa1a7cfc59ee7e932b9c1ce8c39b90e/go-playground/validator",
        "images": [
            "https://github.com/go-playground/validator/raw/master/logo.png",
            "https://camo.githubusercontent.com/2da7039d862cabe847953554272000b86e80b158a0723c9a832720b935df3f43/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667",
            "https://camo.githubusercontent.com/9fe30fcedb2a5cd28e0234982f49304888ddc42f8ff09736b5eacce02839daa9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d31302e32322e302d677265656e2e737667",
            "https://camo.githubusercontent.com/1382960458f70eed721cf4224b84de29b12a82b978d1a27bd3188e784fc0450e/68747470733a2f2f7472617669732d63692e6f72672f676f2d706c617967726f756e642f76616c696461746f722e7376673f6272616e63683d6d6173746572",
            "https://camo.githubusercontent.com/f05f90a4596c6b639123a5a19c895e4774702b7696756a22253cef6e9957eb06/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f676f2d706c617967726f756e642f76616c696461746f722f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562",
            "https://camo.githubusercontent.com/d7f9e7d536033031228d1d70f388832b7f70c61cf822f0a964e4b7fbcfa0053f/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f676f2d706c617967726f756e642f76616c696461746f72",
            "https://camo.githubusercontent.com/9c2bc5115917ff87604f03d5bbee7b578399ea5e53b188ca00fd0b2ad2f0f067/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f2d706c617967726f756e642f76616c696461746f723f7374617475732e737667",
            "https://camo.githubusercontent.com/3b61ee47c4ddab2f7fd8cc10e06555f395db43d9829a5770f08fe8378c29e3de/68747470733a2f2f696d672e736869656c64732e696f2f6475622f6c2f766962652d642e737667",
            "https://avatars.githubusercontent.com/u/8068371?s=64&v=4",
            "https://avatars.githubusercontent.com/u/16839831?s=64&v=4",
            "https://avatars.githubusercontent.com/u/254979?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3634530?s=64&v=4",
            "https://avatars.githubusercontent.com/u/105169551?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2449351?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1803915?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6795248?s=64&v=4",
            "https://avatars.githubusercontent.com/u/18912?s=64&v=4",
            "https://avatars.githubusercontent.com/u/120051?s=64&v=4",
            "https://avatars.githubusercontent.com/u/177138?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2011705?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3513897?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5120459?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "go-playground"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": ":100:Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving - go-playground/validator",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/go-playground/validator",
        "text": "Package validator implements value validations for structs and individual fields based on tags.\n\nIt has the following unique features:\n\nCross Field and Cross Struct validations by using validation tags or custom validators.\n\nSlice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated.\n\nAbility to dive into both map keys and values for validation\n\nHandles type interface by determining it's underlying type prior to validation.\n\nHandles custom field types such as sql driver Valuer see Valuer\n\nAlias validation tags, which allows for mapping of several validations to a single tag for easier defining of validations on structs\n\nExtraction of custom defined Field Name e.g. can specify to extract the JSON name while validating and have it available in the resulting FieldError\n\nCustomizable i18n aware error messages.\n\nDefault validator for the gin web framework; upgrading from v8 to v9 in gin see here\n\nUse go get.\n\nThen import the validator package into your own code.\n\nValidation functions return type error\n\nThey return type error to avoid the issue discussed in the following, where err is always != nil:\n\nhttp://stackoverflow.com/a/29138676/3158232\n\n#134\n\nValidator returns only InvalidValidationError for bad validation input, nil or ValidationErrors as type error; so, in your code all you need to do is check if the error returned is not nil, and if it's not check if error is InvalidValidationError ( if necessary, most of the time it isn't ) type cast it to type ValidationErrors like so:\n\nPlease see https://pkg.go.dev/github.com/go-playground/validator/v10 for detailed usage docs.\n\nSimple\n\nCustom Field Types\n\nStruct Level\n\nTranslations & Custom Errors\n\nGin upgrade and/or override validator\n\nwash - an example application putting it all together\n\nIf new to using validator it is highly recommended to initialize it using the WithRequiredStructEnabled option which is opt-in to new behaviour that will become the default behaviour in v11+. See documentation for more details.\n\nTag Description eqcsfield Field Equals Another Field (relative) eqfield Field Equals Another Field fieldcontains Check the indicated characters are present in the Field fieldexcludes Check the indicated characters are not present in the field gtcsfield Field Greater Than Another Relative Field gtecsfield Field Greater Than or Equal To Another Relative Field gtefield Field Greater Than or Equal To Another Field gtfield Field Greater Than Another Field ltcsfield Less Than Another Relative Field ltecsfield Less Than or Equal To Another Relative Field ltefield Less Than or Equal To Another Field ltfield Less Than Another Field necsfield Field Does Not Equal Another Field (relative) nefield Field Does Not Equal Another Field\n\nTag Description cidr Classless Inter-Domain Routing CIDR cidrv4 Classless Inter-Domain Routing CIDRv4 cidrv6 Classless Inter-Domain Routing CIDRv6 datauri Data URL fqdn Full Qualified Domain Name (FQDN) hostname Hostname RFC 952 hostname_port HostPort hostname_rfc1123 Hostname RFC 1123 ip Internet Protocol Address IP ip4_addr Internet Protocol Address IPv4 ip6_addr Internet Protocol Address IPv6 ip_addr Internet Protocol Address IP ipv4 Internet Protocol Address IPv4 ipv6 Internet Protocol Address IPv6 mac Media Access Control Address MAC tcp4_addr Transmission Control Protocol Address TCPv4 tcp6_addr Transmission Control Protocol Address TCPv6 tcp_addr Transmission Control Protocol Address TCP udp4_addr User Datagram Protocol Address UDPv4 udp6_addr User Datagram Protocol Address UDPv6 udp_addr User Datagram Protocol Address UDP unix_addr Unix domain socket end point Address uri URI String url URL String http_url HTTP URL String url_encoded URL Encoded urn_rfc2141 Urn RFC 2141 String\n\nTag Description alpha Alpha Only alphanum Alphanumeric alphanumunicode Alphanumeric Unicode alphaunicode Alpha Unicode ascii ASCII boolean Boolean contains Contains containsany Contains Any containsrune Contains Rune endsnotwith Ends Not With endswith Ends With excludes Excludes excludesall Excludes All excludesrune Excludes Rune lowercase Lowercase multibyte Multi-Byte Characters number Number numeric Numeric printascii Printable ASCII startsnotwith Starts Not With startswith Starts With uppercase Uppercase\n\nTag Description base64 Base64 String base64url Base64URL String base64rawurl Base64RawURL String bic Business Identifier Code (ISO 9362) bcp47_language_tag Language tag (BCP 47) btc_addr Bitcoin Address btc_addr_bech32 Bitcoin Bech32 Address (segwit) credit_card Credit Card Number mongodb MongoDB ObjectID mongodb_connection_string MongoDB Connection String cron Cron spicedb SpiceDb ObjectID/Permission/Type datetime Datetime e164 e164 formatted phone number email E-mail String eth_addr Ethereum Address hexadecimal Hexadecimal String hexcolor Hexcolor String hsl HSL String hsla HSLA String html HTML Tags html_encoded HTML Encoded isbn International Standard Book Number isbn10 International Standard Book Number 10 isbn13 International Standard Book Number 13 issn International Standard Serial Number iso3166_1_alpha2 Two-letter country code (ISO 3166-1 alpha-2) iso3166_1_alpha3 Three-letter country code (ISO 3166-1 alpha-3) iso3166_1_alpha_numeric Numeric country code (ISO 3166-1 numeric) iso3166_2 Country subdivision code (ISO 3166-2) iso4217 Currency code (ISO 4217) json JSON jwt JSON Web Token (JWT) latitude Latitude longitude Longitude luhn_checksum Luhn Algorithm Checksum (for strings and (u)int) postcode_iso3166_alpha2 Postcode postcode_iso3166_alpha2_field Postcode rgb RGB String rgba RGBA String ssn Social Security Number SSN timezone Timezone uuid Universally Unique Identifier UUID uuid3 Universally Unique Identifier UUID v3 uuid3_rfc4122 Universally Unique Identifier UUID v3 RFC4122 uuid4 Universally Unique Identifier UUID v4 uuid4_rfc4122 Universally Unique Identifier UUID v4 RFC4122 uuid5 Universally Unique Identifier UUID v5 uuid5_rfc4122 Universally Unique Identifier UUID v5 RFC4122 uuid_rfc4122 Universally Unique Identifier UUID RFC4122 md4 MD4 hash md5 MD5 hash sha256 SHA256 hash sha384 SHA384 hash sha512 SHA512 hash ripemd128 RIPEMD-128 hash ripemd128 RIPEMD-160 hash tiger128 TIGER128 hash tiger160 TIGER160 hash tiger192 TIGER192 hash semver Semantic Versioning 2.0.0 ulid Universally Unique Lexicographically Sortable Identifier ULID cve Common Vulnerabilities and Exposures Identifier (CVE id)\n\nTag Description eq Equals eq_ignore_case Equals ignoring case gt Greater than gte Greater than or equal lt Less Than lte Less Than or Equal ne Not Equal ne_ignore_case Not Equal ignoring case\n\nTag Description dir Existing Directory dirpath Directory Path file Existing File filepath File Path image Image isdefault Is Default len Length max Maximum min Minimum oneof One Of required Required required_if Required If required_unless Required Unless required_with Required With required_with_all Required With All required_without Required Without required_without_all Required Without All excluded_if Excluded If excluded_unless Excluded Unless excluded_with Excluded With excluded_with_all Excluded With All excluded_without Excluded Without excluded_without_all Excluded Without All unique Unique\n\nTag Description iscolor hexcolor|rgb|rgba|hsl|hsla country_code iso3166_1_alpha2|iso3166_1_alpha3|iso3166_1_alpha_numeric\n\nHere is a list of software that complements using this library either pre or post validation.\n\nform - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.\n\nmold - A general library to help modify or set data within data structures and other objects\n\nMake a pull request...\n\nDistributed under MIT License, please see license file within the code for more details."
    }
}