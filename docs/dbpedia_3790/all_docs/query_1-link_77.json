{
    "id": "dbpedia_3790_1",
    "rank": 77,
    "data": {
        "url": "https://getstream.io/glossary/real-time-app/",
        "read_more_link": "",
        "language": "en",
        "title": "time app? Read the definition plus examples here.",
        "top_image": "https://getstream.io/images/icons/android-icon-192x192.png",
        "meta_img": "https://getstream.io/images/icons/android-icon-192x192.png",
        "images": [
            "https://stream-blog-v2.imgix.net/blog/wp-content/uploads/5e6bc04d4b0a0aa40dcb873b40f3f00b/stream-logo.png?auto=compress%2Cformat&ixlib=php-3.3.0"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Real-time apps are all around us in the digital world. But what counts as âreal-time,â and how are these apps moving data around the internet in such a small timespan?",
        "meta_lang": "en",
        "meta_favicon": "/images/icons/android-icon-192x192.png",
        "meta_site_name": "",
        "canonical_link": "https://getstream.io/glossary/real-time-app/",
        "text": "Messaging with a friend on the other side of the world. Video-chatting with family like they are sitting next to you. Playing an online racing game against a grid of other players on your continent. These are all examples of the transformative power of real-time apps. They bridge distances, foster connections, and create experiences that were once the stuff of science fiction.\n\nWhether for work, play, or keeping in touch, real-time applications have reshaped our expectations of immediacy in communication and collaboration and have become an indispensable part of modern life. But what counts as a \"real-time app\" and how do they work their magic under the hood?\n\nWhat Is a Real-Time App?\n\nA real-time app is designed to function within a time frame that is effectively immediate for the user. The processing response happens so swiftly that any interaction seems to be occurring in real-time.\n\nSome common characteristics of real-time apps are:\n\n1. Low Latency: Latency refers to the time it takes for a signal sent from a source to reach its destination. Low latency means this duration is extremely short, typically measured in milliseconds. For real-time apps to feel \"real-time,\" the lag or delay between an action and its result should be virtually imperceptible to the user. Whether it's a gamer needing immediate feedback in a virtual world or a trader executing a stock buy, delays can compromise user experience or even have financial implications.\n\n2. Synchronous Interaction: Synchronous interactions in real-time apps refer to the continuous and active two-way exchange of information, where both parties can send and receive data almost simultaneously. This characteristic mirrors face-to-face conversations where there's an ongoing exchange without significant pauses. In a real-time app, such as a video call, any delay can make the conversation feel unnatural or disjointed.\n\n3. Push Mechanism: Instead of waiting for the client to request data, in a push mechanism, the server sends data to the client proactively whenever there's new or updated information. The push mechanism ensures users receive timely updates without manual intervention. This is vital in scenarios like receiving instant messages or real-time notifications, where waiting for the user to request updates would defeat the purpose of \"real-time\" communication.\n\nOther characteristics will depend on the specific type of real-time app. For instance, statefulness is important in real-time apps like chat or online games, as these need to maintain a user's state to function effectively. This could be the user's current position in a game or the last message they received in a chat. Whereas fault tolerance is more important in real-time apps like video conferencing, where any disruption can be immediately noticeable. Thus, these apps must be designed to handle and recover from unexpected issues.\n\nHow Do Real-Time Apps Work?\n\nReal-time applications are an intersection of software design, infrastructure, and specific protocols to achieve the immediacy of interaction.\n\nFirstly, they require specific protocols that are different from the main web-based traffic. The main protocol is WebSockets. This is a protocol that provides full-duplex communication over a single, long-lived connection. Traditional HTTP requests involve a client asking for data and a server responding. With WebSockets, once the connection is established, the server can push data to the client anytime, and vice versa. This is often used in chat apps and live sports score updates.\n\nReal-time apps also require specific backend infrastructure:\n\nEvent-driven Architecture: Real-time apps often rely on an event-driven approach where specific actions or inputs (events) trigger specific responses. Node.js, with its non-blocking I/O, is a popular choice for this kind of architecture.\n\nPublish/Subscribe Pattern (Pub/Sub): Systems like Redis or MQTT use this pattern. Here, publishers send messages without knowing who (if anyone) is receiving them. Subscribers, on the other hand, express interest in certain topics and receive messages that relate to those topics.\n\nMessage Brokers:Tools like RabbitMQ or Kafka act as intermediaries that handle the distribution of messages in real-time systems. They can ensure that messages get to the right place and help scale systems by distributing the workload.\n\nOn the frontend real-time libraries and SDKs simplify the development of real-time interactions. The frontend may also use client-side polling, a basic technique where the client-side application periodically sends requests to the server to check for new data. Though it's not as efficient as other methods, it's simple and can be suitable for applications where real-time isn't strictly required.\n\nAs the move towards real-time was facilitated by the expansion of mobile internet, there are also specific considerations for mobile, such as the use of push services like Apple Push Notification Service (APNS) or Firebase Cloud Messaging (FCM) that can notify mobile app users in real-time.\n\nMobile devices might experience frequent disconnections or switch between different network types. Real-time apps need to handle these scenarios gracefully, possibly with auto-reconnect logic or caching mechanisms.\n\nWhat Are Some Examples of Real-Time Apps?\n\nAlmost everyone will have used a real-time app at some point.\n\nIn particular, within the world of communication. Instant messaging apps like WhatsApp, Telegram, or Slack send and receive their messages in real-time so you can converse with family, friends, and coworkers and video conferencing tools like Zoom, Meet, or Skype let you see and hear each other in real-time.\n\nElsewhere, online gaming is a great example of a real-time app where players interact in a virtual environment against other real players and the actions and reactions of each occur immediately. Other examples are:\n\nVideo Streaming platforms such as Netflix, YouTube, or Twitch. In each of these, users expect the video to be delivered in real-time and to play smoothly. In most cases, the video will be pre-recorded, but live events also occur on these platforms that need to be in real-time.\n\nCollaborative Editing Tools such as Google Docs or Microsoft Office 365 that allow multiple users to edit documents simultaneously. While changes are typically reflected in real-time, there might be slight delays or synchronization issues at times.\n\nNavigation and Mapping Software such as Google Maps, Apple Maps, or Waze that provide real-time traffic updates and route adjustments.\n\nSocial Media Feeds such as X's live feed or Facebook's real-time updates where updates and posts are shown in real-time or near real-time.\n\nThe above are all example of soft real-time systems. Soft real-time systems have timing constraints where failure to meet a deadline is undesirable but doesn't result in catastrophic outcomes. Delays are tolerable to a certain extent, but can degrade system performance or user experience.\n\nIn contrast, hard real-time systems have strict timing constraints. Failure to meet these constraints, even by a few milliseconds, can result in catastrophic outcomes. These are never web-based. Instead, you can find hard real-time systems in the flight control systems in airplanes, automotive safety systems, and industrial control systems.\n\nFrequently Asked Questions"
    }
}