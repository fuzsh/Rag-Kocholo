{
    "id": "dbpedia_2419_3",
    "rank": 77,
    "data": {
        "url": "https://flax.readthedocs.io/en/latest/philosophy.html",
        "read_more_link": "",
        "language": "en",
        "title": "The Flax philosophy",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://flax.readthedocs.io/en/latest/_static/flax.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "_static/flax.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Design principles#\n\nFlax is a neural network library built on JAX that has been adopted by a growing set of users, most notably in the JAX submissions for the MLPerf 0.7 benchmark. Our experience over the last year (and many conversations with users and JAX core devs) has guided a redesign of the API called Linen (flax.linen) in response to the following basic design questions.\n\nHow does one interoperate with purely functional JAX code?#\n\nTo be broadly useful to the JAX ecosystem, users shouldn’t need to heavily refactor their code in order to add “trainability” for a given numerical task. “The library should not get in the way.” Utilizing purely functional code from within Linen is trivial: Module implementations are just JAX code with named variables. Using Linen Modules inside otherwise purely functional code can be as simple as using a single top-level Module transformation to allow initialization and pure application of any JAX program that might contain various trainable sections."
    }
}