{
    "id": "dbpedia_224_0",
    "rank": 81,
    "data": {
        "url": "https://wiki.python.org/moin/PythonTestingToolsTaxonomy",
        "read_more_link": "",
        "language": "en",
        "title": "PythonTestingToolsTaxonomy",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://wiki.python.org/wiki/europython/img/python-logo.gif",
            "https://wiki.python.org/wiki/europython/img/idea.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Join the Testing In Python (TIP) mailing list for Python testing tools discussions!\n\nThis wiki page is originated from PyCheeseCake and it was originally created by Grig Gheorghiu\n\nThe following tools are not currently being developed or maintained as far as we can see. They are here for completeness, with last activity date and an indication of what documentation there is. If you know better, please edit.\n\nSee also here for a side-by-side syntax comparison between some of the more popular tools in this space.\n\nAccording to Wikipedia, \"fuzz testing\" (or \"fuzzing\") is a software testing technique whose basic idea is to attach the inputs of a program to a source of random data (\"fuzz\"). If the program fails (for example, by crashing, or by failing built-in code assertions), then there are defects to correct. The great advantage of fuzz testing is that the test design is extremely simple, and free of preconceptions about system behavior.\n\nFirst, let's define some categories of Web testing tools:\n\nBrowser simulation tools: simulate browsers by implementing the HTTP request/response protocol and by parsing the resulting HTML\n\nBrowser automation tools: automate browsers by driving them for example via COM calls in the case of Internet Explorer, or XPCOM in the case of Mozilla\n\nIn-process or unit-test-type tools: call an application in the same process, instead of generating an HTTP request; so an exception in the application would go all the way up to the command runner (py.test, unittest, etc).\n\nThe following tools were being actively developed and maintained when this page was last edited, and have usable documentation.\n\nThe following tools are not currently being developed or maintained as far as we can see. They are here for completeness, with last activity date and an indication of what documentation there is. If you know better, please edit.\n\nAlthough not properly a part of testing tools, continuous integration tools are nevertheless an important addition to a tester's arsenal.\n\nAutomatic Test Runners\n\nTools that run tests automatically on file changes. Provides continuous feedback during development before continuous integration tools act on commits.\n\nTest Fixtures"
    }
}