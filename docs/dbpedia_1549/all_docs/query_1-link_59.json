{
    "id": "dbpedia_1549_1",
    "rank": 59,
    "data": {
        "url": "https://github.com/ytdl-org/youtube-dl",
        "read_more_link": "",
        "language": "en",
        "title": "line program to download videos from YouTube.com and other video sites",
        "top_image": "https://opengraph.githubassets.com/a4ec0abacd559816191342294d6bc866e08c7b77ae04e4e9e760888108e303f5/ytdl-org/youtube-dl",
        "meta_img": "https://opengraph.githubassets.com/a4ec0abacd559816191342294d6bc866e08c7b77ae04e4e9e760888108e303f5/ytdl-org/youtube-dl",
        "images": [
            "https://github.com/ytdl-org/youtube-dl/workflows/CI/badge.svg",
            "https://avatars.githubusercontent.com/u/1908898?s=64&v=4",
            "https://avatars.githubusercontent.com/u/779568?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10879694?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1239727?s=64&v=4",
            "https://avatars.githubusercontent.com/u/53487?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1222880?s=64&v=4",
            "https://avatars.githubusercontent.com/u/1225294?s=64&v=4",
            "https://avatars.githubusercontent.com/u/45254364?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10004135?s=64&v=4",
            "https://avatars.githubusercontent.com/u/212145?s=64&v=4",
            "https://avatars.githubusercontent.com/u/184983?s=64&v=4",
            "https://avatars.githubusercontent.com/u/3696393?s=64&v=4",
            "https://avatars.githubusercontent.com/u/79476?s=64&v=4",
            "https://avatars.githubusercontent.com/u/358293?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "ytdl-org"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Command-line program to download videos from YouTube.com and other video sites - ytdl-org/youtube-dl",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/ytdl-org/youtube-dl",
        "text": "youtube-dl - download videos from youtube.com or other video platforms\n\nINSTALLATION\n\nDESCRIPTION\n\nOPTIONS\n\nCONFIGURATION\n\nOUTPUT TEMPLATE\n\nFORMAT SELECTION\n\nVIDEO SELECTION\n\nFAQ\n\nDEVELOPER INSTRUCTIONS\n\nEMBEDDING YOUTUBE-DL\n\nBUGS\n\nCOPYRIGHT\n\nTo install it right away for all UNIX users (Linux, macOS, etc.), type:\n\nIf you do not have curl, you can alternatively use a recent wget:\n\nWindows users can download an .exe file and place it in any location on their PATH except for %SYSTEMROOT%\\System32 (e.g. do not put in C:\\Windows\\System32).\n\nYou can also use pip:\n\nThis command will update youtube-dl if you have already installed it. See the pypi page for more information.\n\nmacOS users can install youtube-dl with Homebrew:\n\nOr with MacPorts:\n\nAlternatively, refer to the developer instructions for how to check out and work with the git repository. For further options, including PGP signatures, see the youtube-dl Download Page.\n\nyoutube-dl is a command-line program to download videos from YouTube.com and a few more sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform specific. It should work on your Unix box, on Windows or on macOS. It is released to the public domain, which means you can modify it, redistribute it or use it however you like.\n\nYou can configure youtube-dl by placing any supported command line option to a configuration file. On Linux and macOS, the system wide configuration file is located at /etc/youtube-dl.conf and the user wide configuration file at ~/.config/youtube-dl/config. On Windows, the user wide configuration file locations are %APPDATA%\\youtube-dl\\config.txt or C:\\Users\\<user name>\\youtube-dl.conf. Note that by default configuration file may not exist so you may need to create it yourself.\n\nFor example, with the following configuration file youtube-dl will always extract the audio, not copy the mtime, use a proxy and save all videos under Movies directory in your home directory:\n\nNote that options in configuration file are just the same options aka switches used in regular command line calls thus there must be no whitespace after - or --, e.g. -o or --proxy but not - o or -- proxy.\n\nYou can use --ignore-config if you want to disable the configuration file for a particular youtube-dl run.\n\nYou can also use --config-location if you want to use custom configuration file for a particular youtube-dl run.\n\nYou may also want to configure automatic credentials storage for extractors that support authentication (by providing login and password with --username and --password) in order not to pass credentials as command line arguments on every youtube-dl execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a .netrc file on a per extractor basis. For that you will need to create a .netrc file in your $HOME and restrict permissions to read/write by only you:\n\nAfter that you can add credentials for an extractor in the following format, where extractor is the name of the extractor in lowercase:\n\nFor example:\n\nTo activate authentication with the .netrc file you should pass --netrc to youtube-dl or place it in the configuration file.\n\nOn Windows you may also need to setup the %HOME% environment variable manually. For example:\n\nThe -o option allows users to indicate a template for the output file names.\n\ntl;dr: navigate me to examples.\n\nThe basic usage is not to set any template arguments when downloading a single file, like in youtube-dl -o funny_video.flv \"https://some/video\". However, it may contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to python string formatting operations. For example, %(NAME)s or %(NAME)05d. To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations. Allowed names along with sequence type are:\n\nid (string): Video identifier\n\ntitle (string): Video title\n\nurl (string): Video URL\n\next (string): Video filename extension\n\nalt_title (string): A secondary title of the video\n\ndisplay_id (string): An alternative identifier for the video\n\nuploader (string): Full name of the video uploader\n\nlicense (string): License name the video is licensed under\n\ncreator (string): The creator of the video\n\nrelease_date (string): The date (YYYYMMDD) when the video was released\n\ntimestamp (numeric): UNIX timestamp of the moment the video became available\n\nupload_date (string): Video upload date (YYYYMMDD)\n\nuploader_id (string): Nickname or id of the video uploader\n\nchannel (string): Full name of the channel the video is uploaded on\n\nchannel_id (string): Id of the channel\n\nlocation (string): Physical location where the video was filmed\n\nduration (numeric): Length of the video in seconds\n\nview_count (numeric): How many users have watched the video on the platform\n\nlike_count (numeric): Number of positive ratings of the video\n\ndislike_count (numeric): Number of negative ratings of the video\n\nrepost_count (numeric): Number of reposts of the video\n\naverage_rating (numeric): Average rating give by users, the scale used depends on the webpage\n\ncomment_count (numeric): Number of comments on the video\n\nage_limit (numeric): Age restriction for the video (years)\n\nis_live (boolean): Whether this video is a live stream or a fixed-length video\n\nstart_time (numeric): Time in seconds where the reproduction should start, as specified in the URL\n\nend_time (numeric): Time in seconds where the reproduction should end, as specified in the URL\n\nformat (string): A human-readable description of the format\n\nformat_id (string): Format code specified by --format\n\nformat_note (string): Additional info about the format\n\nwidth (numeric): Width of the video\n\nheight (numeric): Height of the video\n\nresolution (string): Textual description of width and height\n\ntbr (numeric): Average bitrate of audio and video in KBit/s\n\nabr (numeric): Average audio bitrate in KBit/s\n\nacodec (string): Name of the audio codec in use\n\nasr (numeric): Audio sampling rate in Hertz\n\nvbr (numeric): Average video bitrate in KBit/s\n\nfps (numeric): Frame rate\n\nvcodec (string): Name of the video codec in use\n\ncontainer (string): Name of the container format\n\nfilesize (numeric): The number of bytes, if known in advance\n\nfilesize_approx (numeric): An estimate for the number of bytes\n\nprotocol (string): The protocol that will be used for the actual download\n\nextractor (string): Name of the extractor\n\nextractor_key (string): Key name of the extractor\n\nepoch (numeric): Unix epoch when creating the file\n\nautonumber (numeric): Number that will be increased with each download, starting at --autonumber-start\n\nplaylist (string): Name or id of the playlist that contains the video\n\nplaylist_index (numeric): Index of the video in the playlist padded with leading zeros according to the total length of the playlist\n\nplaylist_id (string): Playlist identifier\n\nplaylist_title (string): Playlist title\n\nplaylist_uploader (string): Full name of the playlist uploader\n\nplaylist_uploader_id (string): Nickname or id of the playlist uploader\n\nAvailable for the video that belongs to some logical chapter or section:\n\nchapter (string): Name or title of the chapter the video belongs to\n\nchapter_number (numeric): Number of the chapter the video belongs to\n\nchapter_id (string): Id of the chapter the video belongs to\n\nAvailable for the video that is an episode of some series or programme:\n\nseries (string): Title of the series or programme the video episode belongs to\n\nseason (string): Title of the season the video episode belongs to\n\nseason_number (numeric): Number of the season the video episode belongs to\n\nseason_id (string): Id of the season the video episode belongs to\n\nepisode (string): Title of the video episode\n\nepisode_number (numeric): Number of the video episode within a season\n\nepisode_id (string): Id of the video episode\n\nAvailable for the media that is a track or a part of a music album:\n\ntrack (string): Title of the track\n\ntrack_number (numeric): Number of the track within an album or a disc\n\ntrack_id (string): Id of the track\n\nartist (string): Artist(s) of the track\n\ngenre (string): Genre(s) of the track\n\nalbum (string): Title of the album the track belongs to\n\nalbum_type (string): Type of the album\n\nalbum_artist (string): List of all artists appeared on the album\n\ndisc_number (numeric): Number of the disc or other physical medium the track belongs to\n\nrelease_year (numeric): Year (YYYY) when the album was released\n\nEach aforementioned sequence when referenced in an output template will be replaced by the actual value corresponding to the sequence name. Note that some of the sequences are not guaranteed to be present since they depend on the metadata obtained by a particular extractor. Such sequences will be replaced with placeholder value provided with --output-na-placeholder (NA by default).\n\nFor example for -o %(title)s-%(id)s.%(ext)s and an mp4 video with title youtube-dl test video and id BaW_jenozKcj, this will result in a youtube-dl test video-BaW_jenozKcj.mp4 file created in the current directory.\n\nFor numeric sequences you can use numeric related formatting, for example, %(view_count)05d will result in a string with view count padded with zeros up to 5 characters, like in 00042.\n\nOutput templates can also contain arbitrary hierarchical path, e.g. -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' which will result in downloading each video in a directory corresponding to this path template. Any missing directory will be automatically created for you.\n\nTo use percent literals in an output template use %%. To output to stdout use -o -.\n\nThe current default template is %(title)s-%(id)s.%(ext)s.\n\nIn some cases, you don't want special characters such as 中, spaces, or &, such as when transferring the downloaded filename to a Windows system or the filename through an 8bit-unsafe channel. In these cases, add the --restrict-filenames flag to get a shorter title.\n\nIf you are using an output template inside a Windows batch file then you must escape plain percent characters (%) by doubling, so that -o \"%(title)s-%(id)s.%(ext)s\" should become -o \"%%(title)s-%%(id)s.%%(ext)s\". However you should not touch %'s that are not plain characters, e.g. environment variables for expansion should stay intact: -o \"C:\\%HOMEPATH%\\Desktop\\%%(title)s.%%(ext)s\".\n\nNote that on Windows you may need to use double quotes instead of single.\n\nBy default youtube-dl tries to download the best available quality, i.e. if you want the best quality you don't need to pass any special options, youtube-dl will guess it for you by default.\n\nBut sometimes you may want to download in a different format, for example when you are on a slow or intermittent connection. The key mechanism for achieving this is so-called format selection based on which you can explicitly specify desired format, select formats based on some criterion or criteria, setup precedence and much more.\n\nThe general syntax for format selection is --format FORMAT or shorter -f FORMAT where FORMAT is a selector expression, i.e. an expression that describes format or formats you would like to download.\n\ntl;dr: navigate me to examples.\n\nThe simplest case is requesting a specific format, for example with -f 22 you can download the format with format code equal to 22. You can get the list of available format codes for particular video using --list-formats or -F. Note that these format codes are extractor specific.\n\nYou can also use a file extension (currently 3gp, aac, flv, m4a, mp3, mp4, ogg, wav, webm are supported) to download the best quality format of a particular file extension served as a single file, e.g. -f webm will download the best quality format with the webm extension served as a single file.\n\nYou can also use special names to select particular edge case formats:\n\nbest: Select the best quality format represented by a single file with video and audio.\n\nworst: Select the worst quality format represented by a single file with video and audio.\n\nbestvideo: Select the best quality video-only format (e.g. DASH video). May not be available.\n\nworstvideo: Select the worst quality video-only format. May not be available.\n\nbestaudio: Select the best quality audio only-format. May not be available.\n\nworstaudio: Select the worst quality audio only-format. May not be available.\n\nFor example, to download the worst quality video-only format you can use -f worstvideo.\n\nIf you want to download multiple videos and they don't have the same formats available, you can specify the order of preference using slashes. Note that slash is left-associative, i.e. formats on the left hand side are preferred, for example -f 22/17/18 will download format 22 if it's available, otherwise it will download format 17 if it's available, otherwise it will download format 18 if it's available, otherwise it will complain that no suitable formats are available for download.\n\nIf you want to download several formats of the same video use a comma as a separator, e.g. -f 22,17,18 will download all these three formats, of course if they are available. Or a more sophisticated example combined with the precedence feature: -f 136/137/mp4/bestvideo,140/m4a/bestaudio.\n\nYou can also filter the video formats by putting a condition in brackets, as in -f \"best[height=720]\" (or -f \"[filesize>10M]\").\n\nThe following numeric meta fields can be used with comparisons <, <=, >, >=, = (equals), != (not equals):\n\nfilesize: The number of bytes, if known in advance\n\nwidth: Width of the video, if known\n\nheight: Height of the video, if known\n\ntbr: Average bitrate of audio and video in KBit/s\n\nabr: Average audio bitrate in KBit/s\n\nvbr: Average video bitrate in KBit/s\n\nasr: Audio sampling rate in Hertz\n\nfps: Frame rate\n\nAlso filtering work for comparisons = (equals), ^= (starts with), $= (ends with), *= (contains) and following string meta fields:\n\next: File extension\n\nacodec: Name of the audio codec in use\n\nvcodec: Name of the video codec in use\n\ncontainer: Name of the container format\n\nprotocol: The protocol that will be used for the actual download, lower-case (http, https, rtsp, rtmp, rtmpe, mms, f4m, ism, http_dash_segments, m3u8, or m3u8_native)\n\nformat_id: A short description of the format\n\nlanguage: Language code\n\nAny string comparison may be prefixed with negation ! in order to produce an opposite comparison, e.g. !*= (does not contain).\n\nNote that none of the aforementioned meta fields are guaranteed to be present since this solely depends on the metadata obtained by particular extractor, i.e. the metadata offered by the video hoster.\n\nFormats for which the value is not known are excluded unless you put a question mark (?) after the operator. You can combine format filters, so -f \"[height <=? 720][tbr>500]\" selects up to 720p videos (or videos where the height is not known) with a bitrate of at least 500 KBit/s.\n\nYou can merge the video and audio of two formats into a single file using -f <video-format>+<audio-format> (requires ffmpeg or avconv installed), for example -f bestvideo+bestaudio will download the best video-only format, the best audio-only format and mux them together with ffmpeg/avconv.\n\nFormat selectors can also be grouped using parentheses, for example if you want to download the best mp4 and webm formats with a height lower than 480 you can use -f '(mp4,webm)[height<480]'.\n\nSince the end of April 2015 and version 2015.04.26, youtube-dl uses -f bestvideo+bestaudio/best as the default format selection (see #5447, #5456). If ffmpeg or avconv are installed this results in downloading bestvideo and bestaudio separately and muxing them together into a single file giving the best overall quality available. Otherwise it falls back to best and results in downloading the best available quality served as a single file. best is also needed for videos that don't come from YouTube because they don't provide the audio and video in two different files. If you want to only download some DASH formats (for example if you are not interested in getting videos with a resolution higher than 1080p), you can add -f bestvideo[height<=?1080]+bestaudio/best to your configuration file. Note that if you use youtube-dl to stream to stdout (and most likely to pipe it to your media player then), i.e. you explicitly specify output template as -o -, youtube-dl still uses -f best format selection in order to start content delivery immediately to your player and not to wait until bestvideo and bestaudio are downloaded and muxed.\n\nIf you want to preserve the old format selection behavior (prior to youtube-dl 2015.04.26), i.e. you want to download the best available quality media served as a single file, you should explicitly specify your choice with -f best. You may want to add it to the configuration file in order not to type it every time you run youtube-dl.\n\nNote that on Windows you may need to use double quotes instead of single.\n\nNote that in the last example, an output template is recommended as bestvideo and bestaudio may have the same file name.\n\nVideos can be filtered by their upload date using the options --date, --datebefore or --dateafter. They accept dates in two formats:\n\nAbsolute dates: Dates in the format YYYYMMDD.\n\nRelative dates: Dates in the format (now|today)[+-][0-9](day|week|month|year)(s)?\n\nExamples:\n\nHow do I update youtube-dl?\n\nIf you've followed our manual installation instructions, you can simply run youtube-dl -U (or, on Linux, sudo youtube-dl -U).\n\nIf you have used pip, a simple sudo pip install -U youtube-dl is sufficient to update.\n\nIf you have installed youtube-dl using a package manager like apt-get or yum, use the standard system update mechanism to update. Note that distribution packages are often outdated. As a rule of thumb, youtube-dl releases at least once a month, and often weekly or even daily. Simply go to https://yt-dl.org to find out the current version. Unfortunately, there is nothing we youtube-dl developers can do if your distribution serves a really outdated version. You can (and should) complain to your distribution in their bugtracker or support forum.\n\nAs a last resort, you can also uninstall the version installed by your package manager and follow our manual installation instructions. For that, remove the distribution's package, with a line like\n\nAfterwards, simply follow our manual installation instructions:\n\nAgain, from then on you'll be able to update with sudo youtube-dl -U.\n\nAdd a file exclusion for youtube-dl.exe in Windows Defender settings.\n\nYouTube changed their playlist format in March 2014 and later on, so you'll need at least youtube-dl 2014.07.25 to download all YouTube videos.\n\nIf you have installed youtube-dl with a package manager, pip, setup.py or a tarball, please use that to update. Note that Ubuntu packages do not seem to get updated anymore. Since we are not affiliated with Ubuntu, there is little we can do. Feel free to report bugs to the Ubuntu packaging people - all they have to do is update the package to a somewhat recent version. See above for a way to update.\n\nMake sure you are not using -o with any of these options -t, --title, --id, -A or --auto-number set in command line or in a configuration file. Remove the latter if any.\n\nBy default, youtube-dl intends to have the best options (incidentally, if you have a convincing case that these should be different, please file an issue where you explain that). Therefore, it is unnecessary and sometimes harmful to copy long option strings from webpages. In particular, the only option out of -citw that is regularly useful is -i.\n\nMost people asking this question are not aware that youtube-dl now defaults to downloading the highest available quality as reported by YouTube, which will be 1080p or 720p in some cases, so you no longer need the -b option. For some specific videos, maybe YouTube does not report them to be available in a specific high quality format you're interested in. In that case, simply request it with the -f option and youtube-dl will try to download it.\n\nApparently YouTube requires you to pass a CAPTCHA test if you download too much. We're considering to provide a way to let you solve the CAPTCHA, but at the moment, your best course of action is pointing a web browser to the youtube URL, solving the CAPTCHA, and restart youtube-dl.\n\nyoutube-dl works fine on its own on most sites. However, if you want to convert video/audio, you'll need avconv or ffmpeg. On some sites - most notably YouTube - videos can be retrieved in a higher quality format without sound. youtube-dl will detect whether avconv/ffmpeg is present and automatically pick the best option.\n\nVideos or video formats streamed via RTMP protocol can only be downloaded when rtmpdump is installed. Downloading MMS and RTSP videos requires either mplayer or mpv to be installed.\n\nOnce the video is fully downloaded, use any video player, such as mpv, vlc or mplayer.\n\nIt depends a lot on the service. In many cases, requests for the video (to download/play it) must come from the same IP address and with the same cookies and/or HTTP headers. Use the --cookies option to write the required cookies into a file, and advise your downloader to read cookies from that file. Some sites also require a common user agent to be used, use --dump-user-agent to see the one in use by youtube-dl. You can also get necessary cookies and HTTP headers from JSON output obtained with --dump-json.\n\nIt may be beneficial to use IPv6; in some cases, the restrictions are only applied to IPv4. Some services (sometimes only for a subset of videos) do not restrict the video URL by IP address, cookie, or user-agent, but these are the exception rather than the rule.\n\nPlease bear in mind that some URL protocols are not supported by browsers out of the box, including RTMP. If you are using -g, your own downloader must support these as well.\n\nIf you want to play the video on a machine that is not running youtube-dl, you can relay the video content from the machine that runs youtube-dl. You can use -o - to let youtube-dl stream a video to stdout, or simply allow the player to download the files written by youtube-dl in turn.\n\nYouTube has switched to a new video info format in July 2011 which is not supported by old versions of youtube-dl. See above for how to update youtube-dl.\n\nYouTube requires an additional signature since September 2012 which is not supported by old versions of youtube-dl. See above for how to update youtube-dl.\n\nThat's actually the output from your shell. Since ampersand is one of the special shell characters it's interpreted by the shell preventing you from passing the whole URL to youtube-dl. To disable your shell from interpreting the ampersands (or any other special characters) you have to either put the whole URL in quotes or escape them with a backslash (which approach will work depends on your shell).\n\nFor example if your URL is https://www.youtube.com/watch?t=4&v=BaW_jenozKc you should end up with following command:\n\nyoutube-dl 'https://www.youtube.com/watch?t=4&v=BaW_jenozKc'\n\nor\n\nyoutube-dl https://www.youtube.com/watch?t=4\\&v=BaW_jenozKc\n\nFor Windows you have to use the double quotes:\n\nyoutube-dl \"https://www.youtube.com/watch?t=4&v=BaW_jenozKc\"\n\nIn February 2015, the new YouTube player contained a character sequence in a string that was misinterpreted by old versions of youtube-dl. See above for how to update youtube-dl.\n\nThese two error codes indicate that the service is blocking your IP address because of overuse. Usually this is a soft block meaning that you can gain access again after solving CAPTCHA. Just open a browser and solve a CAPTCHA the service suggests you and after that pass cookies to youtube-dl. Note that if your machine has multiple external IPs then you should also pass exactly the same IP you've used for solving CAPTCHA with --source-address. Also you may need to pass a User-Agent HTTP header of your browser with --user-agent.\n\nIf this is not the case (no CAPTCHA suggested to solve by the service) then you can contact the service and ask them to unblock your IP address, or - if you have acquired a whitelisted IP address already - use the --proxy or --source-address options to select another IP address.\n\nThe error\n\nmeans you're using an outdated version of Python. Please update to Python 2.6 or 2.7.\n\nSince June 2012 (#342) youtube-dl is packed as an executable zipfile, simply unzip it (might need renaming to youtube-dl.zip first on some systems) or clone the git repository, as laid out above. If you modify the code, you can run it by executing the __main__.py file. To recompile the executable, run make youtube-dl.\n\nTo run the exe you need to install first the Microsoft Visual C++ 2010 Service Pack 1 Redistributable Package (x86).\n\nIf you put youtube-dl and ffmpeg in the same directory that you're running the command from, it will work, but that's rather cumbersome.\n\nTo make a different directory work - either for ffmpeg, or for youtube-dl, or for both - simply create the directory (say, C:\\bin, or C:\\Users\\<User name>\\bin), put all the executables directly in there, and then set your PATH environment variable to include that directory.\n\nFrom then on, after restarting your shell, you will be able to access both youtube-dl and ffmpeg (and youtube-dl will be able to find ffmpeg) by simply typing youtube-dl or ffmpeg, no matter what directory you're in.\n\nUse the -o to specify an output template, for example -o \"/home/user/videos/%(title)s-%(id)s.%(ext)s\". If you want this for all of your downloads, put the option into your configuration file.\n\nEither prepend https://www.youtube.com/watch?v= or separate the ID from the options with --:\n\nUse the --cookies option, for example --cookies /path/to/cookies/file.txt.\n\nIn order to extract cookies from browser use any conforming browser extension for exporting cookies. For example, Get cookies.txt LOCALLY (for Chrome) or cookies.txt (for Firefox).\n\nNote that the cookies file must be in Mozilla/Netscape format and the first line of the cookies file must be either # HTTP Cookie File or # Netscape HTTP Cookie File. Make sure you have correct newline format in the cookies file and convert newlines if necessary to correspond with your OS, namely CRLF (\\r\\n) for Windows and LF (\\n) for Unix and Unix-like systems (Linux, macOS, etc.). HTTP Error 400: Bad Request when using --cookies is a good sign of invalid newline format.\n\nPassing cookies to youtube-dl is a good way to workaround login when a particular extractor does not implement it explicitly. Another use case is working around CAPTCHA some websites require you to solve in particular cases in order to get access (e.g. YouTube, CloudFlare).\n\nYou will first need to tell youtube-dl to stream media to stdout with -o -, and also tell your media player to read from stdin (it must be capable of this for streaming) and then pipe former to latter. For example, streaming to vlc can be achieved with:\n\nUse download-archive feature. With this feature you should initially download the complete playlist with --download-archive /path/to/download/archive/file.txt that will record identifiers of all the videos in a special file. Each subsequent run with the same --download-archive will download only new videos and skip all videos that have been downloaded before. Note that only successful downloads are recorded in the file.\n\nFor example, at first,\n\nwill download the complete PLwiyx1dc3P2JR9N8gQaQN_BCvlSlap7re playlist and create a file archive.txt. Each subsequent run will only download new videos if any:\n\nWhen youtube-dl detects an HLS video, it can download it either with the built-in downloader or ffmpeg. Since many HLS streams are slightly invalid and ffmpeg/youtube-dl each handle some invalid cases better than the other, there is an option to switch the downloader if needed.\n\nWhen youtube-dl knows that one particular downloader works better for a given website, that downloader will be picked. Otherwise, youtube-dl will pick the best downloader for general compatibility, which at the moment happens to be ffmpeg. This choice may change in future versions of youtube-dl, with improvements of the built-in downloader and/or ffmpeg.\n\nIn particular, the generic extractor (used when your website is not in the list of supported sites by youtube-dl cannot mandate one specific downloader.\n\nIf you put either --hls-prefer-native or --hls-prefer-ffmpeg into your configuration, a different subset of videos will fail to download correctly. Instead, it is much better to file an issue or a pull request which details why the native or the ffmpeg HLS downloader is a better choice for your use case.\n\nAs a matter of policy (as well as legality), youtube-dl does not include support for services that specialize in infringing copyright. As a rule of thumb, if you cannot easily find a video that the service is quite obviously allowed to distribute (i.e. that has been uploaded by the creator, the creator's distributor, or is published under a free license), the service is probably unfit for inclusion to youtube-dl.\n\nA note on the service that they don't host the infringing content, but just link to those who do, is evidence that the service should not be included into youtube-dl. The same goes for any DMCA note when the whole front page of the service is filled with videos they are not allowed to distribute. A \"fair use\" note is equally unconvincing if the service shows copyright-protected videos in full without authorization.\n\nSupport requests for services that do purchase the rights to distribute their content are perfectly fine though. If in doubt, you can simply include a source that mentions the legitimate purchase of content.\n\n(Also known as: Help, my important issue not being solved!) The youtube-dl core developer team is quite small. While we do our best to solve as many issues as possible, sometimes that can take quite a while. To speed up your issue, here's what you can do:\n\nFirst of all, please do report the issue at our issue tracker. That allows us to coordinate all efforts by users and developers, and serves as a unified point. Unfortunately, the youtube-dl project has grown too large to use personal email as an effective communication channel.\n\nPlease read the bug reporting instructions below. A lot of bugs lack all the necessary information. If you can, offer proxy, VPN, or shell access to the youtube-dl developers. If you are able to, test the issue from multiple computers in multiple countries to exclude local censorship or misconfiguration issues.\n\nIf nobody is interested in solving your issue, you are welcome to take matters into your own hands and submit a pull request (or coerce/pay somebody else to do so).\n\nFeel free to bump the issue from time to time by writing a small comment (\"Issue is still present in youtube-dl version ...from France, but fixed from Belgium\"), but please not more than once a month. Please do not declare your issue as important or urgent.\n\nFor one, have a look at the list of supported sites. Note that it can sometimes happen that the site changes its URL scheme (say, from https://example.com/video/1234567 to https://example.com/v/1234567 ) and youtube-dl reports an URL of a service in that list as unsupported. In that case, simply report a bug.\n\nIt is not possible to detect whether a URL is supported or not. That's because youtube-dl contains a generic extractor which matches all URLs. You may be tempted to disable, exclude, or remove the generic extractor, but the generic extractor not only allows users to extract videos from lots of websites that embed a video from another service, but may also be used to extract video from a service that it's hosting itself. Therefore, we neither recommend nor support disabling, excluding, or removing the generic extractor.\n\nIf you want to find out whether a given URL is supported, simply call youtube-dl with it. If you get no videos back, chances are the URL is either not referring to a video or unsupported. You can find out which by examining the output (if you run youtube-dl on the console) or catching an UnsupportedError exception if you run it from a Python program.\n\nBefore we had the issue template, despite our extensive bug reporting instructions, about 80% of the issue reports we got were useless, for instance because people used ancient versions hundreds of releases old, because of simple syntactic errors (not in youtube-dl but in general shell usage), because the problem was already reported multiple times before, because people did not actually read an error message, even if it said \"please install ffmpeg\", because people did not mention the URL they were trying to download and many more simple, easy-to-avoid problems, many of whom were totally unrelated to youtube-dl.\n\nyoutube-dl is an open-source project manned by too few volunteers, so we'd rather spend time fixing bugs where we are certain none of those simple problems apply, and where we can be reasonably confident to be able to reproduce the issue without asking the reporter repeatedly. As such, the output of youtube-dl -v YOUR_URL_HERE is really all that's required to file an issue. The issue template also guides you through some basic steps you can do, such as checking that your version of youtube-dl is current.\n\nMost users do not need to build youtube-dl and can download the builds or get them from their distribution.\n\nTo run youtube-dl as a developer, you don't need to build anything either. Simply execute\n\nTo run the test, simply invoke your favorite test runner, or execute a test file directly; any of the following work:\n\nFor Python versions 3.6 and later, you can use pynose to implement nosetests. The original nose has not been upgraded for 3.10 and later.\n\nSee item 6 of new extractor tutorial for how to run extractor specific test cases.\n\nIf you want to create a build of youtube-dl yourself, you'll need\n\npython\n\nmake (only GNU make is supported)\n\npandoc\n\nzip\n\nnosetests\n\nIf you want to add support for a new site, first of all make sure this site is not dedicated to copyright infringement. youtube-dl does not support such sites thus pull requests adding support for them will be rejected.\n\nAfter you have ensured this site is distributing its content legally, you can follow this quick list (assuming your service is called yourextractor):\n\nFork this repository\n\nCheck out the source code with:\n\ngit clone git@github.com:YOUR_GITHUB_USERNAME/youtube-dl.git\n\nStart a new git branch with\n\ncd youtube-dl git checkout -b yourextractor\n\nStart with this simple template and save it to youtube_dl/extractor/yourextractor.py:\n\n# coding: utf-8 from __future__ import unicode_literals from .common import InfoExtractor class YourExtractorIE(InfoExtractor): _VALID_URL = r'https?://(?:www\\.)?yourextractor\\.com/watch/(?P<id>[0-9]+)' _TEST = { 'url': 'https://yourextractor.com/watch/42', 'md5': 'TODO: md5 sum of the first 10241 bytes of the video file (use --test)', 'info_dict': { 'id': '42', 'ext': 'mp4', 'title': 'Video title goes here', 'thumbnail': r're:^https?://.*\\.jpg$', # TODO more properties, either as: # * A value # * MD5 checksum; start the string with md5: # * A regular expression; start the string with re: # * Any Python type (for example int or float) } } def _real_extract(self, url): video_id = self._match_id(url) webpage = self._download_webpage(url, video_id) # TODO more code goes here, for example ... title = self._html_search_regex(r'<h1>(.+?)</h1>', webpage, 'title') return { 'id': video_id, 'title': title, 'description': self._og_search_description(webpage), 'uploader': self._search_regex(r'<div[^>]+id=\"uploader\"[^>]*>([^<]+)<', webpage, 'uploader', fatal=False), # TODO more properties (see youtube_dl/extractor/common.py) }\n\nAdd an import in youtube_dl/extractor/extractors.py.\n\nRun python test/test_download.py TestDownload.test_YourExtractor. This should fail at first, but you can continually re-run it until you're done. If you decide to add more than one test (actually, test case) then rename _TEST to _TESTS and make it into a list of dictionaries. The tests will then be named TestDownload.test_YourExtractor, TestDownload.test_YourExtractor_1, TestDownload.test_YourExtractor_2, etc. Note:\n\nthe test names use the extractor class name without the trailing IE\n\ntests with only_matching key in test's dict are not counted.\n\nHave a look at youtube_dl/extractor/common.py for possible helper methods and a detailed description of what your extractor should and may return. Add tests and code for as many as you want.\n\nMake sure your code follows youtube-dl coding conventions and check the code with flake8:\n\n$ flake8 youtube_dl/extractor/yourextractor.py\n\nMake sure your code works under all Python versions claimed supported by youtube-dl, namely 2.6, 2.7, and 3.2+.\n\nWhen the tests pass, add the new files and commit them and push the result, like this:\n\n$ git add youtube_dl/extractor/extractors.py $ git add youtube_dl/extractor/yourextractor.py $ git commit -m '[yourextractor] Add new extractor' $ git push origin yourextractor\n\nFinally, create a pull request. We'll then review and merge it.\n\nIn any case, thank you very much for your contributions!\n\nThis section introduces guidelines for writing idiomatic, robust and future-proof extractor code.\n\nExtractors are very fragile by nature since they depend on the layout of the source data provided by 3rd party media hosters out of your control and this layout tends to change. As an extractor implementer your task is not only to write code that will extract media links and metadata correctly but also to minimize dependency on the source's layout and even to make the code foresee potential future changes and be ready for that. This is important because it will allow the extractor not to break on minor layout changes thus keeping old youtube-dl versions working. Even though this breakage issue is easily fixed by emitting a new version of youtube-dl with a fix incorporated, all the previous versions become broken in all repositories and distros' packages that may not be so prompt in fetching the update from us. Needless to say, some non rolling release distros may never receive an update at all.\n\nFor extraction to work youtube-dl relies on metadata your extractor extracts and provides to youtube-dl expressed by an information dictionary or simply info dict. Only the following meta fields in the info dict are considered mandatory for a successful extraction process by youtube-dl:\n\nid (media identifier)\n\ntitle (media title)\n\nurl (media download URL) or formats\n\nIn fact only the last option is technically mandatory (i.e. if you can't figure out the download location of the media the extraction does not make any sense). But by convention youtube-dl also treats id and title as mandatory. Thus the aforementioned metafields are the critical data that the extraction does not make any sense without and if any of them fail to be extracted then the extractor is considered completely broken.\n\nAny field apart from the aforementioned ones are considered optional. That means that extraction should be tolerant to situations when sources for these fields can potentially be unavailable (even if they are always available at the moment) and future-proof in order not to break the extraction of general purpose mandatory fields.\n\nSay you have some source dictionary meta that you've fetched as JSON with HTTP request and it has a key summary:\n\nAssume at this point meta's layout is:\n\nAssume you want to extract summary and put it into the resulting info dict as description. Since description is an optional meta field you should be ready that this key may be missing from the meta dict, so that you should extract it like:\n\nand not like:\n\nThe latter will break extraction process with KeyError if summary disappears from meta at some later time but with the former approach extraction will just go ahead with description set to None which is perfectly fine (remember None is equivalent to the absence of data).\n\nSimilarly, you should pass fatal=False when extracting optional data from a webpage with _search_regex, _html_search_regex or similar methods, for instance:\n\nWith fatal set to False if _search_regex fails to extract description it will emit a warning and continue extraction.\n\nYou can also pass default=<some fallback value>, for example:\n\nOn failure this code will silently continue the extraction with description set to None. That is useful for metafields that may or may not be present.\n\nWhen extracting metadata try to do so from multiple sources. For example if title is present in several places, try extracting from at least some of them. This makes it more future-proof in case some of the sources become unavailable.\n\nSay meta from the previous example has a title and you are about to extract it. Since title is a mandatory meta field you should end up with something like:\n\nIf title disappears from meta in future due to some changes on the hoster's side the extraction would fail since title is mandatory. That's expected.\n\nAssume that you have some another source you can extract title from, for example og:title HTML meta of a webpage. In this case you can provide a fallback scenario:\n\nThis code will try to extract from meta first and if it fails it will try extracting og:title from a webpage.\n\nCapturing group must be an indication that it's used somewhere in the code. Any group that is not used must be non capturing.\n\nDon't capture id attribute name here since you can't use it for anything anyway.\n\nCorrect:\n\nIncorrect:\n\nWhen using regular expressions try to write them fuzzy, relaxed and flexible, skipping insignificant parts that are more likely to change, allowing both single and double quotes for quoted values and so on.\n\nSay you need to extract title from the following HTML code:\n\nThe code for that task should look similar to:\n\nOr even better:\n\nNote how you tolerate potential changes in the style attribute's value or switch from using double quotes to single for class attribute:\n\nThe code definitely should not look like:\n\nThere is a soft limit to keep lines of code under 80 characters long. This means it should be respected if possible and if it does not make readability and code maintenance worse.\n\nFor example, you should never split long string literals like URLs or some other often copied entities over multiple lines to fit this limit:\n\nCorrect:\n\nIncorrect:\n\nExtracting variables is acceptable for reducing code duplication and improving readability of complex expressions. However, you should avoid extracting variables used only once and moving them to opposite parts of the extractor file, which makes reading the linear flow difficult.\n\nCorrect:\n\nIncorrect:\n\nMultiple fallback values can quickly become unwieldy. Collapse multiple fallback values into a single expression via a list of patterns.\n\nGood:\n\nUnwieldy:\n\nMethods supporting list of patterns are: _search_regex, _html_search_regex, _og_search_property, _html_search_meta.\n\nAlways move trailing parentheses after the last argument.\n\nCorrect:\n\nIncorrect:\n\nWrap all extracted numeric data into safe functions from youtube_dl/utils.py: int_or_none, float_or_none. Use them for string to number conversions as well.\n\nUse url_or_none for safe URL processing.\n\nUse traverse_obj for safe metadata extraction from parsed JSON.\n\nUse unified_strdate for uniform upload_date or any YYYYMMDD meta field extraction, unified_timestamp for uniform timestamp extraction, parse_filesize for filesize extraction, parse_count for count meta fields extraction, parse_resolution, parse_duration for duration extraction, parse_age_limit for age_limit extraction.\n\nExplore youtube_dl/utils.py for more useful convenience functions.\n\nWhen processing complex JSON, as often returned by site API requests or stashed in web pages for \"hydration\", you can use the traverse_obj() utility function to handle multiple fallback values and to ensure the expected type of metadata items. The function's docstring defines how the function works: also review usage in the codebase for more examples.\n\nIn this example, a text description, or None, is pulled from the .result.video[0].summary member of the parsed JSON response, if available.\n\nT(...) is a shorthand for a set literal; if you hate people who still run Python 2.6, T(type_or_transformation) could be written as a set literal {type_or_transformation}.\n\nSome extractors use the older and less capable try_get() function in the same way.\n\nIn this example, various optional metadata values are extracted from the .result.video[0] member of the parsed JSON response, which is expected to be a JS object, parsed into a dict, with no crash if that isn't so, or if any of the target values are missing or invalid.\n\nSuppose you've extracted JSON like this into a Python data structure named media_json using, say, the _download_json() or _parse_json() methods of InfoExtractor:\n\nThen extractor code like this can collect the various fields of the JSON:\n\nThe extractor raises an exception rather than random crashes if the JSON structure changes so that no formats are found.\n\nyoutube-dl makes the best effort to be a good command-line program, and thus should be callable from any programming language. If you encounter any problems parsing its output, feel free to create a report.\n\nFrom a Python program, you can embed youtube-dl in a more powerful fashion, like this:\n\nMost likely, you'll want to use various options. For a list of options available, have a look at youtube_dl/YoutubeDL.py. For a start, if you want to intercept youtube-dl's output, set a logger object.\n\nHere's a more complete example of a program that outputs only errors (and a short message after the download is finished), and downloads/converts the video to an mp3 file:\n\nBugs and suggestions should be reported in the issue tracker: https://github.com/ytdl-org/youtube-dl/issues (https://yt-dl.org/bug is an alias for this). Unless you were prompted to or there is another pertinent reason (e.g. GitHub fails to accept the bug report), please do not send bug reports via personal email. For discussions, join us in the IRC channel #youtube-dl on freenode (webchat).\n\nBe sure to follow instructions provided below and in the issue tracker. Complete the appropriate issue template fully. Consider whether your problem is covered by an existing issue: if so, follow the discussion there. Avoid commenting on existing duplicate issues as such comments do not add to the discussion of the issue and are liable to be treated as spam.\n\nPlease include the full output of youtube-dl when run with -v, i.e. add -v flag to your command line, copy the whole output and post it in the issue body wrapped in ``` for better formatting. It should look similar to this:\n\nDo not post screenshots of verbose logs; only plain text is acceptable.\n\nThe output (including the first lines) contains important debugging information. Issues without the full output are often not reproducible and therefore do not get solved in short order, if ever.\n\nFinally please review your issue to avoid various common mistakes (you can and should use this as a checklist) listed below.\n\nWe often get issue reports that are hard to understand. To avoid subsequent clarifications, and to assist participants who are not native English speakers, please elaborate on what feature you are requesting, or what bug you want to be fixed.\n\nMake sure that it's obvious\n\nWhat the problem is\n\nHow it could be fixed\n\nHow your proposed solution would look\n\nIf your report is shorter than two lines, it is almost certainly missing some of these, which makes it hard for us to respond to it. We're often too polite to close the issue outright, but the missing info makes misinterpretation likely. As a committer myself, I often get frustrated by these issues, since the only possible way for me to move forward on them is to ask for clarification over and over.\n\nFor bug reports, this means that your report should contain the complete output of youtube-dl when called with the -v flag. The error message you get for (most) bugs even says so, but you would not believe how many of our bug reports do not contain this information.\n\nIf your server has multiple IPs or you suspect censorship, adding --call-home may be a good idea to get more diagnostics. If the error is ERROR: Unable to extract ... and you cannot reproduce it from multiple countries, add --dump-pages (warning: this will yield a rather large output, redirect it to the file log.txt by adding >log.txt 2>&1 to your command-line) or upload the .dump files you get when you add --write-pages somewhere.\n\nSite support requests must contain an example URL. An example URL is a URL you might want to download, like https://www.youtube.com/watch?v=BaW_jenozKc. There should be an obvious video present. Except under very special circumstances, the main page of a video service (e.g. https://www.youtube.com/) is not an example URL.\n\nMake sure that someone has not already opened the issue you're trying to open. Search at the top of the window or browse the GitHub Issues of this repository. Initially, at least, use the search term -label:duplicate to focus on active issues. If there is an issue, feel free to write something along the lines of \"This affects me as well, with version 2015.01.01. Here is some more information on the issue: ...\". While some issues may be old, a new post into them often spurs rapid activity.\n\nBefore reporting any issue, type youtube-dl -U. This should report that you're up-to-date. About 20% of the reports we receive are already fixed, but people are using outdated versions. This goes for feature requests as well.\n\nBefore requesting a new feature, please have a quick peek at the list of supported options. Many feature requests are for features that actually exist already! Please, absolutely do show off your work in the issue report and detail how the existing similar options do not solve your problem.\n\nPeople want to solve problems, and often think they do us a favor by breaking down their larger problems (e.g. wanting to skip already downloaded files) to a specific request (e.g. requesting us to look whether the file exists before downloading the info page). However, what often happens is that they break down the problem into two steps: One simple, and one impossible (or extremely complicated one).\n\nWe are then presented with a very complicated request when the original problem could be solved far easier, e.g. by recording the downloaded video IDs in a separate file. To avoid this, you must include the greater context where it is non-obvious. In particular, every feature request that does not consist of adding support for a new site should contain a use case scenario that explains in what situation the missing feature would be useful.\n\nSome of our users seem to think there is a limit of issues they can or should open. There is no limit of issues they can or should open. While it may seem appealing to be able to dump all your issues into one ticket, that means that someone who solves one of your issues cannot mark the issue as closed. Typically, reporting a bunch of issues leads to the ticket lingering since nobody wants to attack that behemoth, until someone mercifully splits the issue into multiple ones.\n\nIn particular, every site support request issue should only pertain to services at one site (generally under a common domain, but always using the same backend technology). Do not request support for vimeo user videos, White house podcasts, and Google Plus pages in the same issue. Also, make sure that you don't post bug reports alongside feature requests. As a rule of thumb, a feature request does not include outputs of youtube-dl that are not immediately related to the feature at hand. Do not post reports of a network error alongside the request for a new video service.\n\nOnly post features that you (or an incapacitated friend you can personally talk to) require. Do not post features because they seem like a good idea. If they are really useful, they will be requested by someone who requires them.\n\nIt may sound strange, but some bug reports we receive are completely unrelated to youtube-dl and relate to a different, or even the reporter's own, application. Please make sure that you are actually using youtube-dl. If you are using a UI for youtube-dl, report the bug to the maintainer of the actual application providing the UI. On the other hand, if your UI for youtube-dl fails in some way you believe is related to youtube-dl, by all means, go ahead and report the bug.\n\nyoutube-dl is released into the public domain by the copyright holders."
    }
}