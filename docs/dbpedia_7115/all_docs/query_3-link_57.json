{
    "id": "dbpedia_7115_3",
    "rank": 57,
    "data": {
        "url": "https://github.blog/news-insights/teaching-efficient-collaboration-at-the-hasso-plattner-institute/",
        "read_more_link": "",
        "language": "en",
        "title": "Teaching efficient collaboration at the Hasso Plattner Institute",
        "top_image": "https://github.blog/wp-content/uploads/2017/10/31904730-ee0e73f4-b7e0-11e7-9db3-9d33a29820b9.jpg?fit=1354%2C700",
        "meta_img": "https://github.blog/wp-content/uploads/2017/10/31904730-ee0e73f4-b7e0-11e7-9db3-9d33a29820b9.jpg?fit=1354%2C700",
        "images": [
            "https://github.blog/wp-content/uploads/2024/06/AI-DarkMode-4.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/05/Enterprise-DarkMode-3.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.42.45 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.43.47 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.44.23 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.46.23 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2024/07/Screenshot-2024-07-23-at-8.47.04 AM.png?resize=800%2C425",
            "https://github.blog/wp-content/uploads/2017/10/31904730-ee0e73f4-b7e0-11e7-9db3-9d33a29820b9.jpg?resize=1354%2C700",
            "https://github.blog/wp-content/uploads/2017/10/31841152-18a27b10-b59d-11e7-8135-3950a1a6b985.jpg?resize=1400%2C933",
            "https://github.blog/wp-content/uploads/2017/10/30919154-9f032362-a36e-11e7-9e4a-2292ce358ed1.png?resize=864%2C852",
            "https://github.blog/wp-content/uploads/2017/10/30919155-9f07b968-a36e-11e7-997c-711cff4f3935.png?resize=1820%2C600",
            "https://github.blog/wp-content/uploads/2017/10/31900185-8472c548-b7d2-11e7-9c7d-4045f4aaa1fd.jpg?resize=3506%2C2298",
            "https://avatars0.githubusercontent.com/u/1874003?v=4&s=200",
            "https://github.blog/wp-content/uploads/2024/08/Enterprise-LightMode-3-1.png?resize=400%2C212",
            "https://github.blog/wp-content/uploads/2024/08/image1.png?resize=400%2C212",
            "https://github.blog/wp-content/uploads/2024/07/github-models-header.png?resize=400%2C212",
            "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
            "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
            "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
            "https://github.blog/wp-content/uploads/2024/04/Icon.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Vanessa Gennarelli",
            "Jakub Oleksy",
            "Mike Hanley",
            "Thomas Dohmke"
        ],
        "publish_date": "2017-10-24T00:57:53+00:00",
        "summary": "",
        "meta_description": "If you’re looking for a real-world approach to computer science education in Germany, you can find it at the Hasso Plattner Institute (HPI) in Potsdam, which offers a practical and…",
        "meta_lang": "en",
        "meta_favicon": "https://github.githubassets.com/favicon.ico",
        "meta_site_name": "The GitHub Blog",
        "canonical_link": "https://github.blog/news-insights/teaching-efficient-collaboration-at-the-hasso-plattner-institute/",
        "text": "If you’re looking for a real-world approach to computer science education in Germany, you can find it at the Hasso Plattner Institute (HPI) in Potsdam, which offers a practical and engineering-oriented alternative to conventional computer science programs.\n\nIn one of HPI’s undergraduate software engineering courses, researchers Arian Treffer and Christoph Matthies encourage their students to make mistakes, assess where they get stuck, and reflect on their software development process. This way students learn how to deliver the best possible results when working together.\n\nThe final year undergraduate course “Software Engineering II” features a real-world software development challenge: 20-30 participants jointly develop a single system. Students form small development teams and coordinate within as well as with the other student’s teams. Tutoring, lectures and an introductory exercise are offered alongside the project. All code is published on GitHub under an open source license. Christoph says:\n\nWhen you leave here, you should have an idea of how to develop software in a team. It’s likely that you’ll work with others on some outdated legacy system in your later work life. As long as people have the ability to reflect on how their process, they are more likely to succeed in whatever they want to do.\n\nArian adds, “If you don’t practice good communication and you work in a setting with multiple teams, frustration is inevitable. The first time your code is thrown away because someone else has already completed your ticket is an important learning experience.”\n\nFocusing on communication and self-organization shapes how students start coding: commit often, write clear commit messages, and learn from your mistakes. But first, students learn the basic tools and processes needed in an introductory exercise. However, managing these exercises for many students—and checking them manually—can get tedious.\n\nIntroducing Professor CI\n\nProfessor CI introduces students to technical tools using GitHub’s continuous integration services.\n\nParticipants work on their own repositories in Github and receive feedback and new challenges from the CI server when they push their code.\n\nArian is quick to note that using CI to help students fix their problems isn’t completely novel. The innovation, he says, is in how they use Professor CI with GitHub.\n\nWhat is novel is using GitHub issues to motivate people and basically get them into the habit of tackling issues, writing tests and fixing bugs. If an Issue is done, you’re automatically sent another one that progresses the exercise—this is the new part. Prof. CI simulates a customer requesting new features, changes and bugfixes.\n\nSummary of time from acceptance to completion of student tasks via Professor CI. For more details on the design and implementation, see the corresponding paper.\n\nWith Professor CI, students can work on their local machines, using their local development tools, and get the benefit of quick feedback from instructors. In turn, instructors have insight into students’ processes and code.\n\nChristoph adds, “Automation is great for standardized exercises, but in the actual development project that follows, we rely heavily on human interaction.”\n\nSpot the real requirement\n\nBuilding software in teams requires talking to real humans, so the next step in the course is gathering clear and concrete requirements from a stakeholder. As anyone who builds software knows, that’s easier said than done.\n\nInstead of giving students clear requirements for their final project, Treffer and Matthies assign a co-worker the role of the customer, whose primary job is to—well—be a customer.\n\nHe throws ridiculous requirements at the students, and changes his mind constantly. Then the students have to get out of the customer what to build. They don’t get requirements. And the development process and all of its artifacts, they have to manage on their own.\n\nThis approach ensures that budding engineers get the close-to-real-world experience that the HPI hopes to instill. They develop real skills in listening, negotiating, and communicating that will help them code solid products and reduce wasted effort, wherever their degree takes them.\n\nTreffer notes that students often think that development is chugging along better than it is, because they don’t yet have the experience required to identify problems as they arise. Milestones serve as natural points of reflection at which the group can work together to make processes better. They also closely monitor students, both with tutors and using GitHub tools to make sure they don’t deviate too much from development best practices.\n\nReflect, then reflect on your reflection\n\nTreffer and Matthies use a variety of exercises that help students find out what worked, what didn’t, and how to make next time better. The Sailboat is an exercise that students use to reflect on the development process.\n\nIn this exercise, the sun is what went right and the wind is what pushed the team in the right direction. The anchor represents what slowed the team down, and the rocks, of course, are potential future problems. Marking each feature of the boat scene allows the group to candidly diagnose how they work together.\n\nReflection exercises allow the students to get closer to one another and their professors to more intimately understand their students. Being able to collectively analyze and discuss what went right and what went wrong allows for some resolution to what might have been a rough sail. It also helps students learn how to collectively develop a process that will, ultimately, create better software and more efficient development time with minimal waste.\n\nFor further reading:"
    }
}