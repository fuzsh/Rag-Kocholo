{
    "id": "dbpedia_4507_1",
    "rank": 10,
    "data": {
        "url": "https://stackoverflow.com/questions/24961127/how-to-create-a-video-from-images-with-ffmpeg",
        "read_more_link": "",
        "language": "en",
        "title": "How to create a video from images with FFmpeg?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/abf5f762bfd43c63dbdc3163e42b0963?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/HDcAB.gif",
            "https://i.sstatic.net/qc2n1.gif",
            "https://i.sstatic.net/SzUlh.gif",
            "https://i.sstatic.net/b5gCg.gif",
            "https://i.sstatic.net/5Powi.jpg?s=64",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/f97df3d3f5c16f0f7705799f12cae4f0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/6e6e22d81a1f4f394f62301be40c2e20?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7942993142e526d02dd8da4cf0e40aa7?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a04b2ed1e58afeca68ba505448b79f3f?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/eDE58.gif?s=64",
            "https://i.sstatic.net/XGoCO.png?s=64",
            "https://www.gravatar.com/avatar/aa314b32901f83499172a16a0324995d?s=64&d=identicon&r=PG",
            "https://lh5.googleusercontent.com/-nfSJe7FQVNs/AAAAAAAAAAI/AAAAAAAAAKQ/YyV5uLofafE/photo.jpg?sz=64",
            "https://stackoverflow.com/posts/24961127/ivc/f9f9?prg=68d12aec-cdb3-4fd1-afbf-64d2d509f81c"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-07-25T17:18:21",
        "summary": "",
        "meta_description": "ffmpeg -r 1/5 -start_number 2 -i img%03d.png -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4\r\nThis line worked fine but I want to create a video file from images in another folder.\nImage names in my fo...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/24961127/how-to-create-a-video-from-images-with-ffmpeg",
        "text": "-pattern_type glob\n\nThis great option makes it easier to select the images in many cases.\n\nNormal speed video with one image per frame at 30 FPS\n\nffmpeg -framerate 30 -pattern_type glob -i '*.png' \\ -c:v libx264 -pix_fmt yuv420p out.mp4\n\nHere's what it looks like:\n\nGIF generated with: https://askubuntu.com/questions/648603/how-to-create-an-animated-gif-from-mp4-video-via-command-line/837574#837574\n\nAdd some audio to it:\n\nffmpeg -framerate 30 -pattern_type glob -i '*.png' \\ -i audio.ogg -c:a copy -shortest -c:v libx264 -pix_fmt yuv420p out.mp4\n\nResult: https://www.youtube.com/watch?v=HG7c7lldhM4\n\nThese are the test media I've used:\n\nwget -O opengl-rotating-triangle.zip https://github.com/cirosantilli/media/blob/master/opengl-rotating-triangle.zip?raw=true unzip opengl-rotating-triangle.zip cd opengl-rotating-triangle wget -O audio.ogg https://upload.wikimedia.org/wikipedia/commons/7/74/Alnitaque_%26_Moon_Shot_-_EURO_%28Extended_Mix%29.ogg\n\nImages generated with: How to use GLUT/OpenGL to render to a file?\n\nIt is cool to observe how much the video compresses the image sequence way better than ZIP as it is able to compress across frames with specialized algorithms:\n\nopengl-rotating-triangle.mp4: 340K\n\nopengl-rotating-triangle.zip: 7.3M\n\nConvert one music file to a video with a fixed image for YouTube upload\n\nAnswered at: https://superuser.com/questions/700419/how-to-convert-mp3-to-youtube-allowed-video-format/1472572#1472572\n\nSlideshow video with one image per second\n\nffmpeg -framerate 1 -pattern_type glob -i '*.png' \\ -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4\n\nAdd some music to it, cutoff when the presumably longer audio when the images end:\n\nffmpeg -framerate 1 -pattern_type glob -i '*.png' -i audio.ogg \\ -c:a copy -shortest -c:v libx264 -r 30 -pix_fmt yuv420p out.mp4\n\nHere are two demos on YouTube:\n\nhttps://www.youtube.com/watch?v=grV64VE1U6c\n\nhttps://www.youtube.com/watch?v=_6D05gCWh_I\n\nBe a hippie and use the Theora patent-unencumbered video format in an OGG container:\n\nffmpeg -framerate 1 -pattern_type glob -i '*.png' -i audio.ogg \\ -c:a copy -shortest -c:v libtheora -r 30 -pix_fmt yuv420p out.ogv\n\nYour images should of course be sorted alphabetically, typically as:\n\n0001-first-thing.jpg 0002-second-thing.jpg 0003-and-third.jpg\n\nand so on.\n\nI would also first ensure that all images to be used have the same aspect ratio, possibly by cropping them with imagemagick or nomacs beforehand, so that ffmpeg will not have to make hard decisions. In particular, the width has to be divisible by 2, otherwise conversion fails with: \"width not divisible by 2\".\n\nFull realistic slideshow case study setup step by step\n\nThere's a bit more to creating slideshows than running a single ffmpeg command, so here goes a more interesting detailed example inspired by this timeline.\n\nGet the input media:\n\nmkdir -p orig cd orig wget -O 1.png https://upload.wikimedia.org/wikipedia/commons/2/22/Australopithecus_afarensis.png wget -O 2.jpg https://upload.wikimedia.org/wikipedia/commons/6/61/Homo_habilis-2.JPG wget -O 3.jpg https://upload.wikimedia.org/wikipedia/commons/c/cb/Homo_erectus_new.JPG wget -O 4.png https://upload.wikimedia.org/wikipedia/commons/1/1f/Homo_heidelbergensis_-_forensic_facial_reconstruction-crop.png wget -O 5.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Sabaa_Nissan_Militiaman.jpg/450px-Sabaa_Nissan_Militiaman.jpg wget -O audio.ogg https://upload.wikimedia.org/wikipedia/commons/7/74/Alnitaque_%26_Moon_Shot_-_EURO_%28Extended_Mix%29.ogg cd .. # Convert all to PNG for consistency. # https://unix.stackexchange.com/questions/29869/converting-multiple-image-files-from-jpeg-to-pdf-format # Hardlink the ones that are already PNG. mkdir -p png mogrify -format png -path png orig/*.jpg ln -P orig/*.png png\n\nNow we have a quick look at all image sizes to decide on the final aspect ratio:\n\nidentify png/*\n\nwhich outputs:\n\npng/1.png PNG 557x495 557x495+0+0 8-bit sRGB 653KB 0.000u 0:00.000 png/2.png PNG 664x800 664x800+0+0 8-bit sRGB 853KB 0.000u 0:00.000 png/3.png PNG 544x680 544x680+0+0 8-bit sRGB 442KB 0.000u 0:00.000 png/4.png PNG 207x238 207x238+0+0 8-bit sRGB 76.8KB 0.000u 0:00.000 png/5.png PNG 450x600 450x600+0+0 8-bit sRGB 627KB 0.000u 0:00.000\n\nso the classic 480p (640x480 == 4/3) aspect ratio seems appropriate.\n\nDo one conversion with minimal resizing to make widths even (TODO automate for any width, here I just manually looked at identify output and reduced width and height by one):\n\nmkdir -p raw convert png/1.png -resize 556x494 raw/1.png ln -P png/2.png png/3.png png/4.png png/5.png raw ffmpeg -framerate 1 -pattern_type glob -i 'raw/*.png' -i orig/audio.ogg -c:v libx264 -c:a copy -shortest -r 30 -pix_fmt yuv420p raw.mp4\n\nThis produces terrible output, because as seen from:\n\nffprobe raw.mp4\n\nffmpeg just takes the size of the first image, 556x494, and then converts all others to that exact size, breaking their aspect ratio.\n\nNow let's convert the images to the target 480p aspect ratio automatically by cropping as per ImageMagick: how to minimally crop an image to a certain aspect ratio?\n\nmkdir -p auto mogrify -path auto -geometry 640x480^ -gravity center -crop 640x480+0+0 png/*.png ffmpeg -framerate 1 -pattern_type glob -i 'auto/*.png' -i orig/audio.ogg -c:v libx264 -c:a copy -shortest -r 30 -pix_fmt yuv420p auto.mp4\n\nSo now, the aspect ratio is good, but inevitably some cropping had to be done, which kind of cut up interesting parts of the images.\n\nThe other option is to pad with black background to have the same aspect ratio as shown at: Resize to fit in a box and set background to black on \"empty\" part\n\nmkdir -p black mogrify -path black -thumbnail 640x480 -background black -gravity center -extent 640x480 png/*.png ffmpeg -framerate 1 -pattern_type glob -i 'black/*.png' -i orig/audio.ogg -c:v libx264 -c:a copy -shortest -r 30 -pix_fmt yuv420p black.mp4\n\nGenerally speaking though, you will ideally be able to select images with the same or similar aspect ratios to avoid those problems in the first place.\n\nAbout the CLI options\n\nNote however that despite the name, -glob this is not as general as shell Glob patters, e.g.: -i '*' fails: https://trac.ffmpeg.org/ticket/3620 (apparently because filetype is deduced from extension).\n\n-r 30 makes the -framerate 1 video 30 FPS to overcome bugs in players like VLC for low framerates: VLC freezes for low 1 FPS video created from images with ffmpeg Therefore it repeats each frame 30 times to keep the desired 1 image per second effect.\n\nNext steps\n\nYou will also want to:\n\ncut up the part of the audio that you want before joining it: Cutting the videos based on start and end time using ffmpeg\n\nffmpeg -i in.mp3 -ss 03:10 -to 03:30 -c copy out.mp3\n\nAlternatively, you can also cut it directly in the conversion command by adding the -ss just before the audio -i:\n\nffmpeg -framerate 1 -pattern_type glob -i 'raw/*.png' -ss 0:36 -i orig/audio.ogg -c:v libx264 -c:a copy -shortest -r 30 -pix_fmt yuv420p raw.mp4\n\nTODO: learn to cut and concatenate multiple audio files into the video without intermediate files, I'm pretty sure it's possible:\n\nffmpeg cut and concat single command line\n\nhttps://video.stackexchange.com/questions/21315/concatenating-split-media-files-using-concat-protocol\n\nhttps://superuser.com/questions/587511/concatenate-multiple-wav-files-using-single-command-without-extra-file\n\nDifferent duration for each image\n\nhttps://video.stackexchange.com/questions/23530/use-ffmpeg-to-create-a-video-from-a-few-images gives a solution.\n\nYou create a file in.txt like:\n\nfile png/1.png outpoint 5 file png/2.png outpoint 2 file png/3.png outpoint 7\n\nand outpoint sets the duration of the previous image in seconds.\n\nThen we just remove -framerate from the previous conversion commands:\n\nffmpeg -f concat -i in.txt -framerate 1 -i orig/audio.ogg -c:v libx264 -c:a copy -shortest -r 30 -pix_fmt yuv420p black.mp4\n\nI also like that that approach with file names in a file is nicer than having to rename the input files to have the correct order, which makes it easier to quickly reorder images on a text editor (multiple -i did not work). Having two lines per input file makes that a bit more annoying, I didn't manage to combine the file and outpoint into a single line, but still, good to know.\n\nThis approach is also convenient if you are just going to convert a subset of your images. Then, to save time on the ImageMagick, you can reuse that in.txt file to loop over only the images you care about:\n\ngrep -E '^file ' in.txt | sed -E 's/^file //; s/\\..*//' | while read f; do echo $f convert -thumbnail 1280x720 -background black -gravity center -extent 1280x720 \"$(command ls -1 ../$f.* | grep -v .xcf | head -n1)\" \"out/$f.jpg\" done\n\nTested on\n\nffmpeg 3.4.4, vlc 3.0.3, Ubuntu 18.04.\n\nBibliography"
    }
}