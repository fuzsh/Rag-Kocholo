{
    "id": "dbpedia_6131_1",
    "rank": 34,
    "data": {
        "url": "https://finale3d.com/documentation/galaxis-gs2-script-file-format/",
        "read_more_link": "",
        "language": "en",
        "title": "Galaxis",
        "top_image": "https://finale3d.com/wp-content/uploads/2019/01/galaxis_hero-300x225.jpg",
        "meta_img": "https://finale3d.com/wp-content/uploads/2019/01/galaxis_hero-300x225.jpg",
        "images": [
            "https://finale3d.com/wp-content/uploads/2024/06/finale3d-logo-main-black.svg",
            "https://finale3d.com/wp-content/uploads/2019/01/galaxis_hero-300x225.jpg",
            "https://finale3d.com/wp-content/uploads/2019/03/2020-06-16-21_42_03-galaxis-splitter-boxes2-286x300.png",
            "https://finale3d.com/wp-content/uploads/2019/09/Firework_2D_68x69-compressor.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2019-01-13T06:11:25+00:00",
        "summary": "",
        "meta_description": "Finale 3D can import and export show files in the GS2 format, which is the interchange format for Galaxis firing systems. You can design shows in Finale 3D",
        "meta_lang": "",
        "meta_favicon": "https://finale3d.com/wp-content/uploads/2024/06/cropped-firework-mono-gold-sq-32x32.png",
        "meta_site_name": "Finale 3D",
        "canonical_link": "https://finale3d.com/documentation/galaxis-gs2-script-file-format/",
        "text": "Finale 3D can import and export show files in the GS2 format, which is the interchange format for Galaxis firing systems. You can design shows in Finale 3D, export them in GS2, and then transfer the firing data to the Galaxis controllers using the Pyrotec Composer software available from Galaxis, or you can design shows in Pyrotec Composer and import the GS2 files into Finale 3D to make simulation videos. The recent Version 2.6 of the GS2 format includes the device allocation tables in the specifications, removing the need to construct the table manually when importing into Pyrotec Composer, as discussed more fully below.\n\nTo create and export a script for the Galaxis firing system, please follow these steps:\n\nSet module type. Choose one module type for the full show in “Show > Set show information…” or in “Addressing > Addres show…”, or choose different module types per-position by right clicking positions and doing “Edit position properties” from the context menu.\n\nConfigure show for flames (if using G-Flame). If you are designing a show with G-Flames, each G-Flame device is represented as a separate position exclusively for that device (no pyro from the same position!). Please (a) add the flame positions for your G-Flame units, and (b) set the positions’ module types to the correct G-Flame module type, and (c) set their “Start Module” to a distinct module number for each flame position. Choose module numbers for your flame positions that will not conflict with the module numbers used by the pyro positions. See Flame systems basic instructions and Exporting a firing system script for flame systems and Galaxis G-Flame for further instructions.\n\nAddress show. Use the menu item “Addressing > Address show…” or any of the other addressing methods (see Addressing basic instructions).\n\nExport script. Export the script as a GS2 (“File > Export > Export firing scripts…“). Choose at the time of exporting whether you want Finale 3D to implement steppers or not, in the export options described in Table 3 (you can add steppers in the Pyrotec Composer software if you prefer to do it there).\n\nDownload script. Open the GS2 file in Pyrotec Composer and download to your your hardware.\n\nStep 5 creates the script file, which is a text file with a “GS2” extension. The format of the file is difficult for a human to read, so Finale 3D provides the function “File > Tools > Open firing system script as generic table…” to view the contents of the GS2 file in a table window. You can select all in the table window (control-A), then copy (control-C), then paste into an Excel file in order to change the column widths and inspect the data. You can also open the GS2 file directly in Pyrotec Composer.\n\nFigure 1 – Galaxis firing system\n\nTable 1 – File format and encoding\n\nThe GS2 script is a text file that you can inspect and edit in a text editor, but it is in a format that is difficult to read. The format consists of three header fields, followed by a script table of firing rows with 70 fields for each row, serialized. All fields are separated by carriage return and linefeed but there’s no end-of-line delimiter, which makes the script quite long in a text editor. Finale 3D has the function, “File > Tools > Open firing system script as generic table…” which reads the GS2 file into a table format in a window that you can read more easily, or copy/paste into Excel to examine.\n\nPrior to December 2018 the up-to-date version of GS2 was Version 2.4. This file format contained the header and script table, followed by other optional data that was internal to the Pyrotec Composer software. The optional data wasn’t necessary for reading the GS2 into Composer, but if the optional data was not present in the file you would need to rebuild your device allocation tables in Composer before downloading to your devices, which was a significant manual effort for large shows.\n\nIn December 2018 Galaxis came out with Version 2.6 of GS2, which Finale 3D also supports. Version 2.6 incorporates the device allocation table information in the defined specification of the format, which allows Finale 3D and other software programs to import and export the device allocation table information along with the script table, eliminating the need for you to rebuild it manually in Composer. Loosely speaking, if you design and address a show in Finale 3D you will have specified what module device IDs and what types of modules or G-Flame units go at every position, and what hazard classes are associated with the devices referenced in the rows. Thus by designing a show in Finale 3D you have already created all the information in the Galaxis device allocation tables, so being able to export a Version 2.6 GS2 file format that incorporates this information and doesn’t require you to rebuild it manually is a big time savings. The minimum version number of Pyrotec Composer that supports Version 2.6 of GS2 is V2.3.0.253.\n\nTaking into consideration Version 2.4 and Version 2.6 of the GS2 file format, we can say that the format consists of a header, followed by a script table, then either (a) followed by optional Galaxis internal information for the Version 2.4 format, or (b) followed by device allocation tables and then followed by exactly 18775 Galaxis internal information fields for the Version 2.6 format. The Finale 3D function, “File > Tools > Open firing system script as generic table…” will show you all the data of all the defined tables in Version 2.4 and Version 2.6, and will add a header and remove and count the unused rows to make the tables easily readable in glance.\n\nTable 2 – Special characteristics\n\nThe script table consists of N * 70 fields concatenated together, where N is the number of rows, each field terminated with the end-of-field delimiter. Version 2.4 may include up to 10,000 rows and nothing more, or exactly 10,000 rows followed by optional internal Pyrotec Composer information. Version 2.6 includes exactly 15,000 rows, followed by device tables, followed by optional internal Pyrotec Composer information. GS2 scripts exported by Finale 3D will contain valid values for the following fields, shown with field numbers counting from 0 (i.e., 0-69). The remaining fields will be empty.\n\nFigure 2 – This Galaxis split-matrix board displays the absolute pin numbers that the box is configured for.\n\nWhile slat-based addresses in Finale 3D are displayed as three part addresses (Module-Slat-Pin) with the pin relative to the slat, your Galaxis split-matrix boards display absolute pin numbers relative to the module instead of relative to the slat, as shown in Figure 2. To avoid doing the conversion from slat-relative to module-relative pin numbers in the field, you may want to create custom labels in Finale 3D using the “Pin Absolute” field or the “Module/Pin Address” field, as described in Labels basic instructions.\n\nTable 4 – Specifications of script fields\n\nField name Description Field #0, Cue (int or blank) A counting number, beginning with one, of unique event times. Multiple rows with the same event time will have the same count. Often referred to as a “Cue” or “Cue number.” Finale 3D writes this field but ignores it when importing GS2 shows. Field #1, Dt (int or blank) Time delta between events, represented as an integer in hundredths of a second. Finale 3D writes this field but ignores it when importing GS2 shows. Field #2, Event Time (int or blank) The ignition time, represented in Galaxis integer time representation. Finale 3D writes this field and reads it when importing GS2 shows. Field #3, Effect Time (int or blank) The visual effect time, represented in Galaxis integer time representation. Finale 3D writes this field and reads it when importing GS2 shows. Field #4, Delay (comma-radix float) The time delay between the Event Time and Effect Time, represented in the format 0,00. The time delay equals the item’s prefire time plus any external delay such as a fuse delay. Finale 3D writes this field but ignores it when importing GS2 shows, because it is redundant with the Event Time and Effect Time. Field #5, Duration (comma-radix float) The duration of the effect or chain, in the format 0,00. If the effect is a chain, the duration is the time from first to last shot in the chain. Field #8, Step Cue (int or blank) A parameter for triggering a sequence of events (see “Steppers”, above). Finale 3D writes this field but ignores it when importing GS2 shows. Field #9, Step Delay (int or blank) A parameter for triggering a sequence of events, represented as an integer in hundredths of a second. Finale 3D writes this field but ignores it when importing GS2 shows. Field #10, Category (string up to 80 characters) A user-defined type. Finale 3D writes the effect’s Type from the Finale script, e.g., shell, comet, mine, etc. Finale ignores this field when importing. NOTE: since Finale ignores this field when importing, please include the type of the effect in the description field (Field #12) if you are going to import the GS2 file into Finale, so it has enough information to create a simulation. For example, the description needs to be “Crackling Comet”, not just “Crackling”, even if the Category is “Comet”. Field #11, Name (string up to 80 characters) The name of the effect as you would read it on the label or on a price list or in reports. Finale 3D reads and writes this field, which may be in a non-English language. When importing, Finale 3D constructs the simulation from the Description field (Field #12) unless it is blank, in which case Finale 3D constructs the simulation based on the Name, as a fallback. Field #12, Description (string up to 80 characters) A description of the effect for the purpose of creating a simulation. Finale 3D reads and writes this field into VDL field of the script, and when importing constructs the simulation on the basis of this field, along with the Size (Field #13), Duration (Field #5), Event Time and Effect Time to calculate lift time (Field #2 and #3), the Angle (Field #23), and in the case of chains the Devices field (Field #21) for the chain count. The Category (Field #10) does not affect the constructed simulation, so the description must indicate what the type of effect is. For example, the description needs to be “Crackling Comet”, not just “Crackling”, even if the Category is “Comet”. The description can be in any language, though when importing Finale 3D constructs accurate simulations most reliably from English descriptions. Field #13, Size (string up to 80 characters) The size of the effect in inches or millimeters. Finale 3D reads and writes this field. Finale 3D writes the effect size string with units, e.g., 100mm or 4″, and constructs accurate simulations most reliably when importing if the field includes the units designation, so Finale 3D doesn’t have to guess whether it is inches or millimeters. Field #21, Quantity (int) The number of devices represented by the row (e.g., number of shells), except for chains, in which case either (a) the number of chains each counting as one unit (in which case it must be “1”), or (b) the number of devices in the chain. When importing into Finale 3D, the user specifies whether “Chains count as one unit” in a configuration dialog to disambiguate (a) versus (b). When exporting, Finale 3D always writes the device count, meaning (b). Field #22, Position (string up to 80 characters) The name of the launch position from which the effect is fired. Finale 3D reads and writes this field. Field #23, Angle (string up to 80 characters) The angle of the trajectory for all devices represented by this row. A chain or flight of shells in a fan must be split into multiple rows so that each can have an independent angle represented in this field. Finale 3D reads and writes this field in degrees, followed by symbol font arrow characters that indicate left versus right: dG (up), dF (left), and dH (right), e.g., up = 0dG. Field #28, Device Number (int from 1 to 999) Finale 3D reads and writes the module number from the rail address into this field. Shows addressed in Finale 3D for split-matrix boards use virtual slats to identify and separate the ranges of outputs for the split-matrix boards . For 10×10 split-matrix boards , the rail address in the Finale 3D script for each board will be of the form 1-A, where the digit is the module number and the letter (A-J) identifies the split-matrix boards.. In the Finale 3D script, the pins of each split-matrix board are 1-10, but when exported to the GS2 file, the rail address and pin address are combined and converted into the device number and output number of the parent device. For example, pin 1 of split-matrix board 2-D would be device number 2, output number 41. Field #29, Output Number (int from 1 to 999) Finale 3D reads and writes the pin number into this field. For G-Flame units, shots are represented by unique pin numbers (output numbers) beginning with 1 and increasing sequentially. Field #30, SC-ID (int) An internal GS2 row identifier. Finale 3D writes this field when exporting but ignores it when importing. See explanation below. Field #42, Part Number (string up to 80 characters) Finale 3D reads and writes this field.\n\nLike the script table, the device allocation tables in the Version 2.6 GS2 format consist of N * M fields concatenated together, where N is the number of rows in each table and M is the number of fields per row, each field terminated with the end-of-field delimiter. The tables are all fixed-size tables, with default values for unused fields.\n\nTable 5 – Specifications of device allocation tables\n\nTable Description Position Names (1000 strings; default value = blank) An array of the position names referenced by the script rows Device IDs At Positions (10000 ints; default value = 0) A table of 1000 rows corresponding to the 1000 entries in the Position Names table; each row of this table consisting of 10 fields, each field being the integer value of a device ID used at that position; or 0 for unused entries. Device IDs can be used at multiple positions, as is the case for split-matrix boards at multiple positions connected to the same parent device. Device Types Corresponding To IDs At Positions (10000 ints; default value = 0) A table of 1000 rows corresponding to the 1000 entries in the Position Names table; each row of this table consisting of 10 fields; each field representing the device type (“device name”) of the corresponding device ID in the Device IDs At Positions table; or 0 for unused entries. Integer field values correspond to the following enumerated device types:\n\n6 = PFE Advanced – 10 Outputs\n\n7 = PFE Advanced – 50 Outputs\n\n8 = PFE Advanced – 100 Outputs\n\n9 = G-Flame\n\n12 = PFE Advanced Mini – 5 Outputs\n\n16 = PFE Advanced – 20 Outputs\n\nIn Finale 3D, the module type selected in the addressing configuration dialog or position properties dialog and shown in the script’s Module Or Slat Type column will determine the device type in the exported GS2 file. When importing GS2 files into Finale 3D, the Module Or Slat Type Column will be determined by the device type values in this device allocation table.\n\nHazard Zone Of Each Device ID (1000 single letter fields A-P; default value = blank) An array of hazard zones corresponding to Device IDs 1 to 1000 (i.e., the first entry in the table is Device ID 1) Position Angle In Degrees (1000 ints or blanks; default value = blank) An array of ints corresponding to the heading angle around the Up-axis of the positions in the Position Names table, in degrees. Blank is also a valid entry and is the same as 0. An angle of 0 is facing the audience, such that a right-angled effect trajectory shot from a 0-angle position will be angled right from the audience perspective. Position X Coordinates In Millimeters (1000 ints or blanks; default value = blank) An array of ints corresponding to the X-coordinates (the axis aiming right from audience perspective) of the positions in the Position Names table, in millimeters. Blank is also a valid entry and is the same as 0. Position Y Coordinates In Millimeters (1000 ints or blanks; default value = blank) An array of ints corresponding to the Y-coordinates (the axis aiming up) of the positions in the Position Names table, in millimeters. Blank is also a valid entry and is the same as 0. Position Z Coordinates In Millimeters (1000 ints or blanks; default value = blank) An array of ints corresponding to the Z-coordinates (the axis aiming forward toward the audience) of the positions in the Position Names table, in millimeters. Blank is also a valid entry and is the same as 0.\n\nAn example script is shown below in Version 2.6 format. The script contains only three actual shots, but Finale 3D automatically adds a “Start Show” row at the start to initiate the firing hardware, bringing the total number of rows in the script table to four.\n\nIn the actual GS2 file these tables are fixed length, but to make them readable each table as shown below is truncated to the number of used rows, with a comment in braces indicating the number of used rows. The comments in brackets, including the header row, are not part of the saved file. Also as shown below, the field delimiters 0x0D0A have been changed to vertical bars to make the text more readable.\n\nYou can see the array of three positions, Pos-01, Pos-02, Pos-03 following the script rows. After the comment you can see the Device IDs At Positions table, then the Device Types Corresponding To IDs At Positions, and so on.\n\n{Event Time Count|Dt|Event Time|Effect Time|Delay|Duration|6|7|Step Cue|Step Delay|Category|Name|Description|Size|14|15|16|17|18|19|20|Quantity|Position|Angle|24|25|26|27|Device Number|Output Number|SC-ID|31|32|33|34|35|36|37|38|39|40|41|Part Number|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67|68|69} 1|276|0|0|0,00|0,00||||||Start Show|||||||||||||||||||10000 2|10|276|500|2,24|1,02|||||shell|Red Chrysanthemum|Red Chrysanthemum|2\"||||||||1|Pos-01|45dF|||||1|1|10001||||||||||||G2SH1000 3|10|286|510|2,24|1,02|||||shell|Red Chrysanthemum|Red Chrysanthemum|2\"||||||||1|Pos-02||||||2|1|10002||||||||||||G2SH1000 4||296|520|2,24|1,02|||||shell|Red Chrysanthemum|Red Chrysanthemum|2\"||||||||1|Pos-03|45dH|||||3|1|10003||||||||||||G2SH1000 {Script rows : 4} Pos-01 Pos-02 Pos-03 {Position rows : 3} 1|0|0|0|0|0|0|0|0|0 2|0|0|0|0|0|0|0|0|0 3|0|0|0|0|0|0|0|0|0 {Device IDs at position rows : 3} 7|0|0|0|0|0|0|0|0|0 7|0|0|0|0|0|0|0|0|0 8|0|0|0|0|0|0|0|0|0 {Device names at position rows : 3} A B C {Hazard zone per device rows : 3} 0 0 0 {Position rotation angle rows : 3} -50000 -37500 -25000 {Position X rows : 3} 0 0 0 {Position Y rows : 3} -8000 -8000 -8000 {Position Z rows : 3} {Remaining characters in file : 18775}\n\nFigure 3 – Example Galaxis GS2 Version 2.6 script (with comments in braces)"
    }
}