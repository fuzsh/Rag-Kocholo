{
    "id": "correct_subsidiary_00000_2",
    "rank": 71,
    "data": {
        "url": "https://www.techtarget.com/searchapparchitecture/definition/software",
        "read_more_link": "",
        "language": "en",
        "title": "Definition from TechTarget",
        "top_image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "meta_img": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
        "images": [
            "https://cdn.ttgtmedia.com/rms/onlineimages/itops-software_stack-h_half_column_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/whatis-system_software_vs_app_software-f_mobile.png",
            "https://cdn.ttgtmedia.com/rms/onlineimages/app_arch-software_dev_lifecycle-f_mobile.png",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/1.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/2.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/awati_rahul.jpg",
            "https://cdn.ttgtmedia.com/visuals/digdeeper/3.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/bigelow_stephen.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineimages/container_g1074391400_searchsitetablet_520X173.jpg",
            "https://cdn.ttgtmedia.com/rms/onlineImages/grasberger_matthew.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/XgzwUrGi_nY?autoplay=0&modestbranding=1&rel=0&widget_referrer=https://www.techtarget.com/searchapparchitecture/definition/software&enablejsapi=1&origin=https://www.techtarget.com"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Cameron Hashemi-Pour",
            "TechTarget Contributor",
            "Rahul Awati",
            "Stephen Bigelow",
            "Matthew Grasberger"
        ],
        "publish_date": "2024-06-06T11:31:00+00:00",
        "summary": "",
        "meta_description": "Learn about the different types of software, what they do and how they function. Also take an in-depth look at software design, best practices and history.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "App Architecture",
        "canonical_link": "https://www.techtarget.com/searchapparchitecture/definition/software",
        "text": "Definition\n\nsoftware\n\nBy\n\nCameron Hashemi-Pour, Site Editor\n\nTechTarget Contributor\n\nWhat is software?\n\nSoftware is a set of instructions, data or programs used to operate computers and execute specific tasks. It is the opposite of hardware, which describes the physical aspects of a computer. Software is a generic term used to refer to applications, scripts and programs that run on a device. It can be thought of as the variable part of a computer, while hardware is the invariable part.\n\nThe two main categories of software are application software and system software. An application is software that fulfills a specific need or performs tasks. System software is designed to run a computer's hardware and provides a platform for applications to run on top of.\n\nOther types of software include the following:\n\nProgramming software, which provides the programming tools software developers need.\n\nMiddleware, which sits between system software and applications.\n\nDriver software, which operates computer devices and peripherals.\n\nEarly software was written for specific computers and sold with the hardware it ran on. In the 1980s, software began to be sold on floppy disks and, later, CDs and DVDs. Today, most software is purchased and directly downloaded over the internet. Software can be found on vendor and application service provider websites.\n\nExamples and types of software\n\nAmong the various categories of software, the most common types include the following:\n\nApplication software. The most frequently used software is application software, which is a computer software package that performs a specific function for a user or, in some cases, for another application. An application can be self-contained, or it can be a group of programs that run the application for the user. Examples of modern applications include office suites, graphics software, databases, database management programs, web browsers, word processors, software development tools, image editors and communication platforms.\n\nSystem software. These software programs are designed to run a computer's application programs and hardware. System software coordinates the activities and functions of the hardware and software. In addition, it controls the operations of the computer hardware and provides an environment or platform for all the other types of software to work in. An operating system (OS) is the best example of system software; it manages all the other computer programs. Other examples of system software include firmware, computer language translators and system utilities.\n\nDriver software. Also known as device drivers, this software is often considered a type of system software. Device drivers control the devices and peripherals connected to a computer, helping them perform their specific tasks. Every device that's connected to a computer needs at least one device driver to function. Examples include software that comes with any nonstandard hardware, including special game controllers, as well as the software that enables standard hardware, such as USB storage devices, keyboards, headphones and printers.\n\nMiddleware. The term middleware describes software that mediates between application and system software or between two different kinds of application software. For example, middleware lets Microsoft Windows talk to Excel and Word. It's used to send a remote work request from an application in a computer that has one kind of OS to an application in a computer with a different OS. It also lets newer applications work with legacy ones.\n\nProgramming software. Computer programmers use programming software to write code. Programming software and programming languages, such as Java or Python, let developers develop, write, test and debug other software programs. Examples of programming software include assemblers, compilers, debuggers and interpreters.\n\nHow does software work?\n\nAll software provides the directions and data computers need to work and meet users' needs. However, the two different types -- application software and system software -- work in distinctly different ways.\n\nApplication software\n\nApplication software consists of many programs that perform specific functions for end users, such as writing reports and navigating websites. Applications also perform tasks for other applications. Applications on a computer can't run on their own; they require a computer's OS along with other supporting system software programs to work.\n\nThese desktop applications are installed on a user's computer and use the computer memory to carry out tasks. They take up space on the computer's hard drive and don't need an internet connection to work. However, desktop applications must adhere to the requirements of the hardware devices they run on.\n\nWeb applications, on the other hand, do require internet access to work, but they don't rely on the hardware and system software to run. Consequently, users can launch web applications from devices that have a web browser. Since the components responsible for the application functionality are on the server, users can launch the app from Windows, Mac, Linux or any other OS.\n\nSystem software\n\nSystem software sits between the computer hardware and the application software. Users don't interact directly with system software as it runs in the background, handling the basic functions of the computer. This software coordinates a system's hardware and software so users can run high-level application software to perform specific actions. System software executes when a computer system boots up and continues running as long as the system is on.\n\nDesign and implementation of software\n\nThe software development lifecycle is a framework that project managers use to describe the stages and tasks associated with designing software. The first steps in the design lifecycle are planning the effort, then analyzing the needs of the individuals who will use the software and creating detailed requirements. After the initial requirements analysis, the design phase aims to specify how to fulfill those user requirements.\n\nThe next is step is implementation, where development work is completed, and then software testing happens. The maintenance phase involves any tasks required to keep the system running.\n\nSoftware design includes a description of the structure of the software that will be implemented, data models, interfaces between system components and potentially the algorithms the software engineer will use.\n\nThe software design process transforms user requirements into a form that computer programmers can use to do the software coding and implementation. Software engineers develop the software design iteratively, adding detail and correcting the design as they develop it.\n\nThe different types of software design include the following:\n\nArchitectural design. This is the foundational design, which identifies the overall structure of the system, its main components and their relationships with one another using architectural design tools.\n\nHigh-level design. This is the second layer of design that focuses on how the system, along with all its components, can be implemented in forms of modules supported by a software stack. A high-level design describes the relationships between data flow and the various modules and functions of the system.\n\nDetailed design. This third layer of design focuses on all the implementation details necessary for the specified architecture.\n\nHow to maintain software quality\n\nSoftware quality measures if the software meets both its functional and nonfunctional requirements.\n\nFunctional requirements identify what the software should do. They include technical details, data manipulation and processing, calculations and any other function that specifies what an application aims to accomplish.\n\nNonfunctional requirements, also known as quality attributes, determine how the system should work. Nonfunctional requirements include portability, disaster recovery, security, privacy and usability.\n\nSoftware testing detects and solves technical issues in the software source code and assesses the overall usability, performance, security and compatibility of the product to ensure it meets its requirements.\n\nThe dimensions of software quality include the following characteristics:\n\nAccessibility. This is the degree to which a diverse group of people, including individuals who require adaptive technologies such as voice recognition and screen magnifiers, can comfortably use the software.\n\nCompatibility. This is the suitability of the software for use in a variety of environments. Software compatibility is important for different OSes, devices and browsers.\n\nEfficiency. This is the ability of the software to perform well without wasting energy, resources, effort, time or money.\n\nFunctionality. This is software's ability to carry out its specified functions.\n\nInstallation. This is the ability of the software to be installed in a specified environment.\n\nLocalization. For software to function correctly, it needs localization, which entails the various languages, time zones and other features a software program can works in.\n\nMaintainability. This is how easily the software can be modified to add and improve features and fix bugs.\n\nPerformance. This is how fast the software performs under a specific load.\n\nPortability. This is the ease with which the software can be transferred from one location to another.\n\nReliability. This is the software's ability to perform a required function under specific conditions and for a defined period without any errors.\n\nScalability. A software's ability to increase or decrease performance in response to changes in its processing demands is its scalability.\n\nSecurity. This is the software's ability to protect against unauthorized access, invasion of privacy, theft, data loss and malicious software.\n\nTestability. This is how easy it is to test the software.\n\nUsability. This is how easy it is to use the software.\n\nTo maintain software quality once it's deployed, developers must constantly adapt it to meet new customer requirements and handle problems customers identify. This includes improving functionality, fixing bugs and adjusting software code to prevent issues. How long a product lasts on the market depends on developers' ability to keep up with these maintenance requirements.\n\nWhen it comes to maintenance approaches, there are four types of changes developers can make, including the following:\n\nCorrective. Users often identify and report bugs that developers must fix, including coding errors and other problems that keep the software from meeting its requirements.\n\nAdaptive. Developers must regularly make changes to their software to ensure it's compatible with changing hardware and software environments, such as when a new version of the OS comes out.\n\nPerfective. These are changes that improve system functionality, such as improving the user interface or adjusting software code to enhance performance.\n\nPreventive. These changes keep software from failing and include tasks such as restructuring and optimizing code.\n\nModern software development\n\nDevOps is an organizational approach that brings together software development and IT operations teams. It promotes communication and collaboration between these two groups. The term also describes the use of iterative software development practices that use automation and programmable infrastructure. Get the full picture in our ultimate guide to DevOps.\n\nSoftware licensing and patents\n\nA software license is a legally binding document that restricts the use and distribution of software.\n\nTypically, software licenses provide users with the right to one or more copies of the software without violating copyright. The license outlines the responsibilities of the parties that enter into the agreement and might place restrictions on how the software is used.\n\nSoftware licensing terms and conditions generally include fair use of the software, the limitations of liability, warranties, disclaimers and protections if the software or its use infringes on the intellectual property rights of others.\n\nLicenses typically are for proprietary software, which remains the property of the organization, group or individual that created it. They are also used for free software, where users can run, study, change and distribute the software. Open source is a type of software that's developed collaboratively, and the source code is freely available. With open source software licenses, users can run, copy, share and change the software similar to free software.\n\nOver the last two decades, software vendors have moved away from selling software licenses on a one-time basis. Instead, they offer a software as a service (SaaS) subscription model. Software vendors host the software in the cloud and make it available to customers, who pay a subscription fee and access the software over the internet.\n\nAlthough copyright can prevent others from copying a developer's code, a copyright can't stop them from developing the same software independently without copying. However, a patent stops another person from using the functional aspects of the software a developer claims in a patent, even if that second person developed the software independently.\n\nIn general, the more technical software is, the more likely it can be patented. For example, a software product could be granted a patent if it creates a new kind of database structure or enhances the overall performance and function of a computer.\n\nThe history of software\n\nThe term software wasn't used until the late 1950s. During this time, although different types of programming software were being created, they weren't typically commercially available. Consequently, users -- mostly computer science experts and large enterprises -- often had to write their own software.\n\nThe following is a brief timeline of the history of software:\n\nJune 21, 1948. Tom Kilburn, a computer scientist, writes the world's first piece of software for the Manchester Baby computer at the University of Manchester in England.\n\nEarly 1950s. General Motors creates the first OS, for the IBM 701 Electronic Data Processing Machine. It is called General Motors Operating System, or GM OS.\n\n1958. Statistician John Tukey coins the word software in an article about computer programming.\n\nLate 1960s. Floppy disks are introduced and used through the 1990s to distribute software.\n\nNov. 3, 1971. AT&T releases the first edition of the Unix OS.\n\n1977. Apple releases the Apple II and consumer software takes off.\n\n1979. VisiCorp releases VisiCalc for the Apple II, the first spreadsheet software for personal computers.\n\n1981. Microsoft releases MS-DOS, the OS on which many of the early IBM computers ran. IBM begins selling software, and commercial software becomes available to the average consumer.\n\n1980s. Hard drives become standard on PCs, and manufacturers start bundling software in computers.\n\n1983. The free software movement is launched with Richard Stallman's GNU -- GNU is not Unix -- Linux project to create a Unix-like OS with source code that can be freely copied, modified and distributed.\n\n1984. Mac OS is released to run Apple's Macintosh line.\n\nMid-1980s. Key software applications, including AutoDesk AutoCAD, Microsoft Word and Microsoft Excel, are released.\n\n1985. Microsoft Windows 1.0 is released.\n\n1989. CD-ROMs become standard and hold much more data than floppy disks. Large software programs can be distributed quickly, easily and relatively inexpensively.\n\n1991. The Linux kernel, the basis for the open source Linux OS, is released.\n\n1997. DVDs are introduced and can hold more data than CDs, making it possible to put bundles of programs, such as Microsoft Office Suite, onto one disk.\n\n1999. Salesforce.com uses cloud computing to pioneer software delivery over the internet.\n\n2000. SaaS technology starts to be used.\n\n2007. The iPhone is launched and mobile applications emerge.\n\n2010s. DVDs become obsolete as users buy and download software from the internet and the cloud. Vendors move to subscription-based SaaS models.\n\n2020s. Generative artificial intelligence as well as other AI and machine learning capabilities are increasingly added to software platforms.\n\nFuture of software\n\nThe future of software development and applications will be a continuation of current trends. The focus will be on tools to simplify application development and make software user-friendly for nontechnical consumers, accessible from any device and able to process large data volumes. Some of the technologies involved include the following:\n\nAI and machine learning. This will provide software users with new capabilities, like generating original text and images through generative AI, analyzing and visualizing data spreadsheets, and automating workflows.\n\nSustainable development. This will increase in importance as more attention is brought to the environmental impact of compute-intensive resources. Software developers will for ways to reduce electricity use, for instance.\n\nQuantum computing. Though not yet available to the generally available, quantum computing processes vast quantities of data faster than traditional computers and will expand into software.\n\nLow- and no-code. This technology will expand to help users with little or no technical experience to customize their own apps and software functionalities.\n\nCybersecurity. As hackers become more sophisticated in their techniques, developers will need to be equipped with deep knowledge of cybersecurity knowledge to counter them.\n\nMicroservices. Developers miniaturized microservices services to make software more efficient. Microservices are created as part of a containers during development but are presented to users as separate microservices.\n\nEven the most sophisticated software products and services require consistent updates. Delve into the reasons why software updates are important.\n\nContinue Reading About software\n\nThe promises and risks of AI in software development\n\nMaking software development greener\n\nNetwork engineer vs. software engineer: What's the difference?\n\nThe emerging usability of ChatGPT in software development\n\nThe need to demystify software testing for developers\n\nRelated Terms\n\ncross-browser testing\n\nCross-browser testing, also called browser testing, is a quality assurance (QA) process that checks whether a web-based ... See complete definition\n\nRemote Procedure Call (RPC)\n\nA Remote Procedure Call (RPC) is a software communication protocol that one program uses to request a service from another ... See complete definition\n\ntest-driven development (TDD)\n\nTest-driven development (TDD), also called test-driven design, is a software programming method that interlaces unit testing, ... See complete definition\n\nDig Deeper on Application management tools and practices\n\nGNOME (GNU Network Object Model Environment)\n\nBy: TechTarget Contributor\n\nguest operating system (guest OS)\n\nBy: Rahul Awati\n\nplatform\n\nBy: Stephen Bigelow\n\nContainers vs. VMs: Is the VM all that bad?\n\nBy: Matthew Grasberger"
    }
}