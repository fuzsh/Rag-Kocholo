{
    "id": "yago_31618_2",
    "rank": 63,
    "data": {
        "url": "https://nhigham.com/2015/09/22/programming-languages-an-applied-mathematics-view/",
        "read_more_link": "",
        "language": "en",
        "title": "Programming Languages: An Applied Mathematics View",
        "top_image": "https://nhigham.com/wp-content/uploads/2015/09/wpid-prog-langs.jpg",
        "meta_img": "https://nhigham.com/wp-content/uploads/2015/09/wpid-prog-langs.jpg",
        "images": [
            "https://nhigham.com/wp-content/uploads/2021/01/logo-blue-on-white_narrower.jpg?w=480",
            "https://nhigham.com/wp-content/uploads/2015/09/wpid-prog-langs.jpg?w=365&h=319",
            "https://s0.wp.com/latex.php?latex=%5Clceil+4.3+%5Crceil+%3D+5&bg=ffffff&fg=222222&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=%5Clfloor+4.3+%5Crfloor+%3D+4&bg=ffffff&fg=222222&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=AB%5E%7B-1%7D&bg=ffffff&fg=222222&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=B%5E%7B-1%7DA&bg=ffffff&fg=222222&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=A%2FB&bg=ffffff&fg=222222&s=0&c=20201002",
            "https://s0.wp.com/latex.php?latex=B%5Cbackslash+A&bg=ffffff&fg=222222&s=0&c=20201002",
            "https://1.gravatar.com/avatar/da0aef6c689f21e654bf2c666ab8afc804e3fdc785dd963b067dc65368967190?s=48&d=identicon&r=G",
            "https://nhigham.com/wp-content/uploads/2020/12/cropped-200302-1351-14_9943_2979_rot_square_1600px.jpg?w=50",
            "https://nhigham.com/wp-content/uploads/2020/12/cropped-200302-1351-14_9943_2979_rot_square_1600px.jpg?w=50",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Nick Higham"
        ],
        "publish_date": "2015-09-22T00:00:00",
        "summary": "",
        "meta_description": "A lot of applied mathematics relies on computation, whether symbolic or numeric, so many applied mathematicians need to program as part of their work. It was therefore natural to include an article on programming languages in The Princeton Companion to Applied Mathematics. The article, which I wrote, has two main purposes. The first is to…",
        "meta_lang": "en",
        "meta_favicon": "https://nhigham.com/wp-content/uploads/2020/12/cropped-200302-1351-14_9943_2979_rot_square_1600px.jpg?w=32",
        "meta_site_name": "Nick Higham",
        "canonical_link": "https://nhigham.com/2015/09/22/programming-languages-an-applied-mathematics-view/",
        "text": "A lot of applied mathematics relies on computation, whether symbolic or numeric, so many applied mathematicians need to program as part of their work. It was therefore natural to include an article on programming languages in The Princeton Companion to Applied Mathematics.\n\nThe article, which I wrote, has two main purposes. The first is to give a history of those programming languages relevant to applied mathematics. The first such language, and indeed the first high-level programming language, was Fortran (1957). The language was standardized in 1966 and it is still going strong, with the most recent standard published in 2008. Developments in programming languages show no sign of abating, with the introduction in recent years of new languages such as Scala (2003), Clojure (2007, a dialect of Lisp), and Julia (2012), as well as new standards for older languages such as C (2011) and C++ (2011).\n\nThe second purpose of the article is to discuss mathematical aspects of programming, including\n\nnotation (infix, prefix, reverse-Polish)\n\nimplementation of complex arithmetic\n\nfloating-point semantics\n\nhigh-precision computations\n\ntypes\n\ncomplexity analysis of codes\n\nstructured programming\n\nliterate programming\n\ndomain-specific languages\n\nOne issue that I discuss is the mutually beneficial influences that mathematics and programming languages have had on each other. For example, the notation for the ceiling and floor functions that map a real number to the next larger or smaller integer, respectively, illustrated by and , was first introduced in the programming language APL. The colon notation for array subscripting, A(i:j,r:s), used in Algol 68 and MATLAB, is now routinely used in linear algebra, in both equations and in pseudocode.\n\nOn the other hand, mathematics has influenced, or anticipated, syntax in programming languages. In the 1800s Cayley proposed two different notations to distinguish between the products and in the context of groups, but both were ungainly and difficult to typeset. In 1928, Hensel suggested the notation and . Although his suggestion appears to have attracted little or no attention, it was was reinvented by Cleve Moler for MATLAB and is now a notation familiar to anyone who works in numerical linear algebra.\n\nAt the start of the article I include a figure containing the first program written for a stored-program computer, namely the highest factor routine that ran on the Manchester “Baby” on June 21, 1948. The program was by Tom Kilburn and is taken from Geoff Tootill‘s notebook. Tootill is still alive (aged 93), and he kindly gave permission for me to reproduce the image."
    }
}