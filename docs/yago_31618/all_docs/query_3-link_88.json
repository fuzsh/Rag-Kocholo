{
    "id": "yago_31618_3",
    "rank": 88,
    "data": {
        "url": "https://www.linkedin.com/pulse/pre-1995-matlab-nature-modern-andrea-patrucco",
        "read_more_link": "",
        "language": "en",
        "title": "Pre-1995 Matlab, or about the nature of modern Matlab",
        "top_image": "https://media.licdn.com/dms/image/v2/C5612AQH_A02b6KWSDA/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1587744494822?e=2147483647&v=beta&t=6Qr-Dcsx5wjM6hMT0EczouQnObWcBNsr7PU4Yat_xpo",
        "meta_img": "https://media.licdn.com/dms/image/v2/C5612AQH_A02b6KWSDA/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1587744494822?e=2147483647&v=beta&t=6Qr-Dcsx5wjM6hMT0EczouQnObWcBNsr7PU4Yat_xpo",
        "images": [
            "https://media.licdn.com/dms/image/v2/C5612AQH_A02b6KWSDA/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1587744494822?e=2147483647&v=beta&t=6Qr-Dcsx5wjM6hMT0EczouQnObWcBNsr7PU4Yat_xpo",
            "https://media.licdn.com/dms/image/v2/C5612AQFqWva_xYXeEA/article-inline_image-shrink_1000_1488/article-inline_image-shrink_1000_1488/0/1587744555265?e=1729728000&v=beta&t=BPfwGm6hNhJ3KyzFC8yAoLr0J_Z6_ejUugmNZHw27_I"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Andrea Patrucco"
        ],
        "publish_date": "2020-04-24T16:19:49+00:00",
        "summary": "",
        "meta_description": "As a retrocomputing enthusiast, I often like tinkering around with older versions of software I normally use, just for the curiosity of saying “How harder could it be to do this, like, 30 years ago?”. This has brought some surprises in the past years, such as older versions of Excel and Word.",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/pulse/pre-1995-matlab-nature-modern-andrea-patrucco",
        "text": "As a retrocomputing enthusiast, I often like tinkering around with older versions of software I normally use, just for the curiosity of saying “How harder could it be to do this, like, 30 years ago?”. This has brought some surprises in the past years, such as older versions of Excel and Word. There is hardly any reason, wasn’t it for the new *x file format, to choose Excel 2017 over 97, for what I do with Excel daily. Yes, there’s a 65535 row limit, and some potential limitations in case memory usage exceeds some gigabytes, but honestly, how often would one really need either of those not to apply? Most of the time Excel97 does just what Excel 2017 does, with 1/100 of RAM usage and without the counter-intuitive “ribbon” interface plaguing every Office suite made in the last 15 years.\n\nSo I was expecting the same conclusions when I tried Matlab 4.0 for Windows. I rarely need most fancy features of the latest Matlab versions, and, at least for non-graphical, non-interactive, plain scripting, I thought a mid 90s, or even late 80s version of the software could fulfil most of my needs. Well, it couldn’t.\n\nMatlab 4.0 (1994) for Windows 3.1 comes with most of the mathematic functions I use today, except perhaps for solvers (which are still there, but in a much more primitive form). It features a command window and a plotting library that, at least at a first glance, behaves in a quite similar way to its current incarnation. No GUI developing capability (somehow expected), no editor (annoying, but alternatives exist), a simpler interface (which I prefer).\n\nYet the main disadvantage, which should prevent anyone from trying to do anything serious on that suite, is the confusion, or rather absence, of data types. Everything is handled as a real number. You can still declare, display and to some extent manipulate character arrays, but that’s the only exception. No struct, no cells, no tables, which means that, for example, if you need to read data from a csv file you have to manually write a parser and vector variables (or try to read it into a matrix), and it’s extremely likely you’ll need a different code the next time.\n\nIt is still useful to perform linear algebra calculation and solve some simple optimization problems, but, apart from that, it completely lacks the flexibility which makes Matlab so appealing now.\n\nMatlab 1.0 (1987) for DOS is even worse. You cannot define your own functions, which means you are limited to the built-in ones, and those are not many. For example, the “zeros” function does not exist. There is no “mean”, “var” or “std” function, and yes, they’re quite easy to implement, but basically you’re forced to re-write them into any script you are going to develop.\n\nComing to scripts, the language leaves much to be desired: for loops, for example, must be defined into a single row, separing instruction with a comma. There still is a “plot” function accepting a modern syntax, but it simply displays the current function placing characters around the screen in plain text mode (40x25): funny to watch, hardly useful. Still, it does linear algebra calculations quite well; the problem is, those calculations are useless.\n\nWhich makes an obvious question arise: “How was this thing commercially viable back then?”\n\nIn the Mathworks’ website, an article by Cleve Moler explains some of the steps which brought to the creation of Matlab as we know today, stating that Jack Little, a Stanford graduate, first had the idea of a commercial software, based on a pre-existing Matlab program, for the PC platform in the early ‘80s. He manually ported the Fortan code to C, giving birth to the first “Commercial Matlab”: the “1.0 Version” nightmare I tried.\n\nThe basic use-case for Matlab at the time was, “I need to perform some matrix calculations which are too complex to be done by hand”, but also “Those calculations can be performed by an interpreted language with reasonable speed”, as realistically, given the limited power of a PC of the time, one was forced to revert to Fortran for serious number crunching.\n\nI mean, in 1987 Matlab was a good choice for, say, a calculation on 10x10 matrices, but not for 3x3 ones, and neither for 100x100 ones.\n\nHow narrow is that use-case? Would anyone support financially somebody who wants to develop such software?\n\nNowadays, Matlab addresses almost directly many different aspects of scientific and technical computing, offering a wide, modular range of tools that anyone with a basic knowledge of the language can get productive with in a matter of days. Its expandability is a key to its success, much more than its linear algebra-inspired syntax.\n\nI’ve often thought Matlab was a good calculator tool exploiting a de-facto monopoly in university teaching to keep prices high: testing its “good calculator only” versions, turns out that’s a bit simplistic.\n\nAt some point during the ‘90s, the Matlab development team must have envisioned the advantages of a common platform any engineer could use instead of learning separate programs. How many calculator-like programs there existed in 1995? How many had the same long-mindedness?\n\nAnyone complaining for their monopoly should at least credit to them for this vision, and its realization. Their dominance may be bad, but it was rightfully conquered."
    }
}