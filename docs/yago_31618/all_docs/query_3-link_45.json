{
    "id": "yago_31618_3",
    "rank": 45,
    "data": {
        "url": "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/",
        "read_more_link": "",
        "language": "en",
        "title": "Computers in Geology, Fall 2011, Lecture 8",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/images/matlab_GUI.png",
            "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/images/matlab_editor.png",
            "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/images/km2deg_lat.png",
            "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/images/workspace1.png",
            "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/images/plot1.png",
            "http://arrowsmith410-598.asu.edu/2011/Lectures/Lecture8/images/plot2.png"
        ],
        "movies": [
            "http://www.youtube.com/embed/bqkkUlJQaj8",
            "http://www.youtube.com/embed/Ad18Oqqc_m8",
            "http://www.youtube.com/embed/3-5h1MYlPpc",
            "http://www.youtube.com/embed/8ANLuJSZwMo"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "GLG410--Computers in Earth and Space Exploration\n\nAnnouncements Syllabus Schedule Weekly lecture notes Assignments Links\n\nMatlab Introduction\n\nMatlab is a program that has been developed for the general solution of mathematical equations, data processing, and data display. MATLAB is an acronym for MATrix LABoratory and it is a highly optimized numerical computation and matrix manipulation package. It is an excellent tool for developing numerical models of problems, performing mathematical operations on large data sets, displaying data in one, two, three, or four dimensions, and solving simultaneous equations. In general, Matlab has been developed as a numerical tool and so best works on real numbers, rather than symbolic operations.\n\nMatlab is a product of The Mathworks. Cleve Moler is the inventor of Matlab and a founder of Matlab.\n\nIn short, if you can write an equation that you think represents a relationship between two or more variables and need to graph your results, Matlab is the tool to use. First, we will go through a short introduction on Matlab concepts, entry formats, graphics, M-files, and functions.\n\nGetting started\n\nCopy and paste this into the Matlab command line: playbackdemo('GettingStartedwithMATLAB', 'toolbox/matlab/demos/html')\n\nStartup Matlab Through \"My Apps\"\n\nMatlab startup instructions (slightly old, but still basically works). Any of the various versions of Matlab will work for our purposes. You will want to \"Run app now.\"\n\nVideo demonstration:\n\nMatlab GUI Overview\n\nEach version of Matlab (Mac/Windows/Linux) has a similar layout. There are only 3 elements in this window I use on a regular basis:\n\nthe Command Window\n\nthe Workspace window\n\nthe Current Directory line\n\nthe Editor window.\n\nBasic Math Functions (Matlab as a fancy calculator)\n\nMatlab can be used to perform the very simplest of calculations. Functions used to do basic math are quite intuitive and so I won't dwell on this topic for long. But these functions do form the basis for all of your problems that you will solve within the Matlab environment.\n\nNOTE: For multiplication, division, and exponents, remember to use the dot (.) BEFORE the math symbol. This is not necessarily needed all the time, but is good practice to use it anyway to avoid problems with vector and matrix operations in the future.\n\nAddition (+)\n\n>> 4 + 7 ans = 11\n\nSubtraction (-)\n\n>> 48 - 8.2 ans = 39.8\n\nMultiplication (.*)\n\n>> 4.53 .* 6 ans = 27.18\n\nDivision (./)\n\n>> 200 ./ 50 ans = 4\n\nExponents (.^)\n\n>> 4.1 .^ 3 ans = 68.921\n\nTrig Functions in Radians (sin, cos, tan, sec, cot, csc)\n\n>> sin(0.8) ans = 0.71736\n\nTrig Function in Degrees (sind, cosd, tand, secd, cotd, cscd)\n\n>> sind(90) ans = 1\n\nInverse Trig Functions in Radians (asin, acos, atan, atan2, asec, acot, acsc)\n\n>> acos(0.567) ans = 0.96794\n\nInverse Trig Functions in Degrees (asind, acosd, atand, asecd, acotd, acscd)\n\n>> acosd(0.5) ans = 60\n\nSquare Roots\n\n>> sqrt(16) ans = 4\n\nExponentials\n\n>> exp(2.3) ans = 9.9742\n\nNatural Logarithms\n\n>> log(456384) ans = 13.031\n\nBase 10 Logarithms (this is special)\n\n>> log10(10000) ans = 4\n\nAbsolute Value\n\n>> abs(-31.45) ans = 31.45\n\nThere are a few special numbers that are important to know. Some you will use all the time, some not so much.\n\nPi\n\n>> pi ans = 3.1416\n\nImaginary (Complex) Numbers\n\n>> i ans = 0 + 1i\n\nNot-a-Number (this acts like a place holder for a value, except it has no value)\n\n>> NaN ans = NaN\n\nInfinity\n\n>> inf ans = Inf\n\nSmallest incremental number (the precision of the computer)\n\n>> eps ans = 2.2204e-16\n\nCombining operations - using parenthesis ()\n\nThe next thing we need to do is start combining these operations within one line.\n\n>> 2 .* pi ./ 360 .* 6371 .* sind(90 - 43.8) ans = 80.256\n\nREMEMBER YOUR \"ORDER OF OPERATIONS\"!! I recommend using parenthesis for EVERY separate operation to organize your equations. A common source of error is either forgetting to close parenthesis (easily corrected), or putting parenthesis in the wrong place (hard to find and correct!).\n\nHere is how I would re-type the above equation:\n\n>> (2 .* pi ./ 360 .* 6371 .* sind(90 - 43.8) ??? (2 .* pi ./ 360 .* 6371 .* sind(90 - 43.8) | Error: Expression or statement is incorrect--possibly unbalanced (, {, or [.\n\nOops! I forgot to close a parenthesis. Let's try it again.\n\nIf you type in a complex expression and make an error, you can edit the previous expression by pressing the Up arrow on your keyboard to recall the last line. Press the Up Arrow or Down Arrow several times to recall other recent command lines. Use the Left and Right Arrow to move through the command and insert numbers or text or you may also delete something.\n\n>> ((2 .* pi) ./ 360) .* (6371 .* sind(90 - 43.8)) ans = 80.256\n\nThis time I grouped the parts of the equation that make sense. For full disclosure, this particular equation is for converting degrees of Longitude to kilometers around a given line of Latitude.\n\nVariables\n\nAll answers up to this point have been output by Matlab as:\n\nans = 80.256\n\nMatlab is assigning your answer to a default variable called ans. Everytime you do a calculation in Matlab, ans is replaced in the Workspace window.\n\nVariables allow you to store information within the Matlab environment to use it at a later time. Here is how you can assign something to a variable:\n\n>> kilometers = ((2 .* pi) ./ 360) .* (6371 .* sind(90 - 43.8))\n\nYou will notice that Matlab has been echoing your output by saying:\n\nkilometers = 80.256\n\nNow we can use this variable in another equation. Lets just say we want to convert the kilometers to miles.\n\n>> miles = kilometers .* 0.62137 miles = 49.869\n\nSEMICOLONS\n\nIf you do not wish to see a confirmation of your assignment, include a semicolon after the operation. This rule holds for all assignments or operations-- if you do not want to see the result of the operation, but simply wish to store it in another variable, use a semicolon:\n\n>> kilometers = ((2 .* pi) ./ 360) .* (6371 .* sind(90 - 43.8));\n\nNaming Conventions/Suggests (Any Programming Language)\n\nHAS TO start with a letter (438km = 80.256 - illegal!)\n\nCAN use numbers WITHIN the name (km438 = 80.256 - ok, but not recommended)\n\nCANNOT have punctuation in a name. Periods have another use. (43.8km = 80.256 - doubley illegal!)\n\nDO NOT use function names or operation names as variable names (i, sin, pi, nan - all BAD choices)\n\nChoose a convention that works for you, and STICK WITH IT\n\nHere are some of my rules:\n\nBe Descriptive (Radius = 6371;)\n\nUse Mixed Case (NewVp = 9.7;)\n\nAvoid Underscores (New_Vp = 9.7;)\n\nMore to come as we get into programming\n\nScalars, Vectors, Matrices (Arrays)\n\nAn advantage of Matlab is its ability to handle vectors and matrices in an intuitive way. Until now, we have dealt only with scalars. You can create vectors and matrices and assign them to variables. Here is how:\n\nRow Vector\n\n>> RowVector = [1 2 3 4 5 6 7 8 9 10]; >> RowVector RowVector = 1 2 3 4 5 6 7 8 9 10\n\nColumn Vector\n\n>> ColumnVector = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]; >> ColumnVector ColumnVector = 1 2 3 4 5 6 7 8 9 10\n\nMatrix (2 x 5)\n\n>> Matrix = [1 2; 3 4; 5 6; 7 8; 9 10]; >> Matrix Matrix = 1 2 3 4 5 6 7 8 9 10\n\nArray Operations\n\n>> Matrix = Matrix .* 2; >> Matrix Matrix = 2 4 6 8 10 12 14 16 18 20\n\nVideo demonstration of simple matrix math:\n\nframeborder=\"0\" allowFullScreen>\n\nVideo demonstration of how to build a vector with elements separated by a constant increment:\n\nframeborder=\"0\" allowFullScreen>\n\nArray Indexing (any kind of vector - 1 row or 1 column)\n\n>> RowVector(3) ans = 3 >> ColumnVector(4) ans = 4\n\nArray Indexing (matrices)\n\n>> Matrix(3,2) ans = 6\n\nNOTE: Rows are referenced first, then columns.\n\nArray Indexing (entire row or column)\n\n>> Matrix(3,:) ans = 5 6\n\nRules to Remeber\n\nALL scalars, vectors, and matrices are considered arrays of different sizes.\n\nscalars: 1 row, 1 column\n\nvectors: 1 row, mutliple columns OR multiple rows, 1 column\n\nmatrices: multiple rows, multiple columns\n\nBrackets, [], used on either end to denote an array\n\nSeparate columns with \"white space\"\n\nSeparate rows with semicolon, ;\n\nRows before Columns\n\nColon, :, used to reference entire row or column\n\nText and Character Arrays\n\nYou can assign text to a variable as well as numeric data. Each character, including white space, occupies one place in the character array (it is like a vector). Use single quotes, ' to denote text.\n\n>> Name = 'My name is Kevin'; >> Name Name = My name is Kevin\n\nThis is a 16-element array.\n\nBringing Data Into Matlab\n\nLets introduce this concept by using real data. Here is daily water discharge (cubic feet per second) for the Salt River at Priest Dr. near Phoenix, AZ for all of 2008.\n\nSave the file from the browser to the local hard disk as \"SRDischarge.txt\".\n\nCreate a directory on MyFiles called \"glg410_matlab\".\n\nMove file from local hard disk to this directory on the MyFiles.\n\nVideo demonstration:\n\nLoading Text Files\n\n>> load('SRDischarge2008.txt','-ascii');\n\nThe first argument in the load function is the filename. The second argument is the file type. In the case of a text file, it is always '-ascii'.\n\nThe file has 2 columns of data. It loads into Matlab as a 366 x 2 matrix with the name of the file as the new variable name. (NOTE: This only works if the text file has ONLY numeric data! No headers.)\n\nColumn 1: days of the year (1-366 for 2008)\n\nColumn 2: discharge (cubic feet per second)\n\nBasic Statistics and Information Gathering\n\nWe can easily find out some statistical information on our data matrix, such as the minimum and maximum values, average value, etc. Here are some examples:\n\nMinimum Value (2nd column - discharge)\n\n>> min(SRDischarge2008(:,2)) ans = 0\n\nMaximum Value (2nd column - discharge)\n\n>> max(SRDischarge2008(:,2)) ans = 5900\n\nAverage or Mean Value (2nd column - discharge)\n\n>> mean(SRDischarge2008(:,2)) ans = 5900\n\nBasic Plotting Functions\n\nThe next thing we need to be able to do is plot the information in a graph. The most basic function you will use is the plot command. Lets see what this does:\n\n>> plot(SRDischarge2008(:,1),SRDischarge2008(:,2));\n\nThe first argument is the x-axis values. The second argument is the y-axis values. (NOTE: These MUST BE the same length!)\n\nThis plot isn't very interesting though. (1) There is no title, so you don't know what information it is trying to convey. (2) The axes are not labeled, so you have no idea what the numbers are telling you. (3) Points are connected by a line. Is this the best way to show the data?\n\nA few more useful commands AFTER you have plotted your data can really give the graph a boost. Here are some examples:\n\nPlot Title\n\n>> title('Salt River Discharge at Priest Dr. - 2008');\n\nX-Axis Label\n\n>> xlabel('Day of Year');\n\nY-Axis Label\n\n>> ylabel('Daily Discharge (cfs)');\n\nNow what do we have.\n\nNOTE: You can also play around with the plot using buttons and functions within the Figure Window.\n\nSaving a graph to a JPEG is very helpful for placing this graph in the context of a report (or maybe your homework). To save a figure, you will use the print function. Here is how to do it:\n\n>> print('discharge.jpg','-djpeg');\n\nThe first argument is the filename of the JPEG image. The second argument ('-djpeg') tells Matlab that you are saving it in JPEG format.\n\nSaving and Loading Workspace\n\nYou will eventually want to save the work that you have done in Matlab. You can save an entire Workspace into a MAT-file (which is just a binary file that is formatted especially for the use of Matlab). You do this by using the save function.\n\n>> save\n\nThe default filename for your saved workspace is \"matlab.mat\". If you want to save it under a different name, you add that name as an argument to the function.\n\n>> save('lecture3.mat');\n\nNOTE: This will ONLY save the variables in your workspace. It DOES NOT save figures or plots that you have made.\n\nTo load in a saved MAT-file, you will use the load function, similar to what we did with the text files.\n\n>> load('lecture3.mat','-mat');\n\nThe first argument in the filename. The second argument is the format of the file you are wanting to load. For MAT-files, this is always '-mat'. (NOTE: In this case, the second argument is optional because '-mat' is the default choice.)\n\nGLG410/598 Computers in Earth and Space Exploration\n\nLast modified: September 22, 2011"
    }
}