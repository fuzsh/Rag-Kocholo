{
    "id": "dbpedia_2924_3",
    "rank": 92,
    "data": {
        "url": "https://reactrouter.com/en/main/start/tutorial",
        "read_more_link": "",
        "language": "en",
        "title": "Tutorial v6.26.0",
        "top_image": "https://reactrouter.com/ogimage.png",
        "meta_img": "https://reactrouter.com/ogimage.png",
        "images": [
            "https://reactrouter.com/assets/icons-DB4BwhXz.svg",
            "https://reactrouter.com/_docs/tutorial/15.webp",
            "https://reactrouter.com/_docs/tutorial/01.webp",
            "https://reactrouter.com/_docs/tutorial/02.webp",
            "https://reactrouter.com/_docs/tutorial/03.webp",
            "https://reactrouter.com/_docs/tutorial/04.webp",
            "https://reactrouter.com/_docs/tutorial/05.webp",
            "https://reactrouter.com/_docs/tutorial/06.webp",
            "https://reactrouter.com/_docs/tutorial/07.webp",
            "https://reactrouter.com/_docs/tutorial/08.webp",
            "https://reactrouter.com/_docs/tutorial/09.webp",
            "https://reactrouter.com/_docs/tutorial/10.webp",
            "https://reactrouter.com/_docs/tutorial/11.webp",
            "https://reactrouter.com/_docs/tutorial/12.webp",
            "https://reactrouter.com/_docs/tutorial/13.webp",
            "https://reactrouter.com/_docs/tutorial/14.webp",
            "https://reactrouter.com/_docs/tutorial/15.webp",
            "https://reactrouter.com/_docs/tutorial/16.webp",
            "https://reactrouter.com/_docs/tutorial/17.webp",
            "https://reactrouter.com/_docs/tutorial/18.webp",
            "https://reactrouter.com/_docs/tutorial/19.webp",
            "https://reactrouter.com/_docs/tutorial/20.webp",
            "https://reactrouter.com/_docs/tutorial/21.webp",
            "https://reactrouter.com/_docs/tutorial/21.webp",
            "https://reactrouter.com/_docs/tutorial/22.webp",
            "https://reactrouter.com/_docs/tutorial/23.webp",
            "https://reactrouter.com/_docs/tutorial/24.webp",
            "https://reactrouter.com/_docs/tutorial/25.webp",
            "https://reactrouter.com/_docs/tutorial/27.webp",
            "https://reactrouter.com/_docs/tutorial/26.webp"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon-light.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Tutorial\n\nWelcome to the tutorial! We'll be building a small, but feature-rich app that lets you keep track of your contacts. We expect it to take between 30-60m if you're following along.\n\n👉 Every time you see this it means you need to do something in the app!\n\nThe rest is just there for your information and deeper understanding. Let's get to it.\n\nSetup\n\nIf you're not going to follow along in your own app, you can skip this section\n\nWe'll be using Vite for our bundler and dev server for this tutorial. You'll need Node.js installed for the npm command line tool.\n\n👉️ Open up your terminal and bootstrap a new React app with Vite:\n\nnpm create vite@latest name-of-your-project -- --template react # follow prompts cd <your new project directory> npm install react-router-dom # always need this! npm install localforage match-sorter sort-by # only for this tutorial. npm run dev\n\nYou should be able to visit the URL printed in the terminal:\n\nVITE v3.0.7 ready in 175 ms ➜ Local: http://127.0.0.1:5173/ ➜ Network: use --host to expose\n\nWe've got some pre-written CSS for this tutorial so we can stay focused on React Router. Feel free to judge it harshly or write your own 😅 (We did things we normally wouldn't in CSS so that the markup in this tutorial could stay as minimal as possible.)\n\n👉 Copy/Paste the tutorial CSS found here into src/index.css\n\nThis tutorial will be creating, reading, searching, updating, and deleting data. A typical web app would probably be talking to an API on your web server, but we're going to use browser storage and fake some network latency to keep this focused. None of this code is relevant to React Router, so just go ahead and copy/paste it all.\n\n👉 Copy/Paste the tutorial data module found here into src/contacts.js\n\nAll you need in the src folder are contacts.js, main.jsx, and index.css. You can delete anything else (like App.js and assets, etc.).\n\n👉 Delete unused files in src/ so all you have left are these:\n\nsrc ├── contacts.js ├── index.css └── main.jsx\n\nIf your app is running, it might blow up momentarily, just keep going 😋. And with that, we're ready to get started!\n\nAdding a Router\n\nFirst thing to do is create a Browser Router and configure our first route. This will enable client side routing for our web app.\n\nThe main.jsx file is the entry point. Open it up and we'll put React Router on the page.\n\n👉 Create and render a browser router in main.jsx\n\nThis first route is what we often call the \"root route\" since the rest of our routes will render inside of it. It will serve as the root layout of the UI, we'll have nested layouts as we get farther along.\n\nThe Root Route\n\nLet's add the global layout for this app.\n\n👉 Create src/routes and src/routes/root.jsx\n\nmkdir src/routes touch src/routes/root.jsx\n\n(If you don't want to be a command line nerd, use your editor instead of those commands 🤓)\n\n👉 Create the root layout component\n\nNothing React Router specific yet, so feel free to copy/paste all of that.\n\n👉 Set <Root> as the root route's element\n\nThe app should look something like this now. It sure is nice having a designer who can also write the CSS, isn't it? (Thank you Jim 🙏).\n\nHandling Not Found Errors\n\nIt's always a good idea to know how your app responds to errors early in the project because we all write far more bugs than features when building a new app! Not only will your users get a good experience when this happens, but it helps you during development as well.\n\nWe added some links to this app, let's see what happens when we click them?\n\n👉 Click one of the sidebar names\n\nGross! This is the default error screen in React Router, made worse by our flex box styles on the root element in this app 😂.\n\nAnytime your app throws an error while rendering, loading data, or performing data mutations, React Router will catch it and render an error screen. Let's make our own error page.\n\n👉 Create an error page component\n\ntouch src/error-page.jsx\n\n👉 Set the <ErrorPage> as the errorElement on the root route\n\nThe error page should now look like this:\n\n(Well, that's not much better. Maybe somebody forgot to ask the designer to make an error page. Maybe everybody forgets to ask the designer to make an error page and then blames the designer for not thinking of it 😆)\n\nNote that useRouteError provides the error that was thrown. When the user navigates to routes that don't exist you'll get an error response with a \"Not Found\" statusText. We'll see some other errors later in the tutorial and discuss them more.\n\nFor now, it's enough to know that pretty much all of your errors will now be handled by this page instead of infinite spinners, unresponsive pages, or blank screens 🙌\n\nInstead of a 404 \"Not Found\" page, we want to actually render something at the URLs we've linked to. For that, we need to make a new route.\n\n👉 Create the contact route module\n\ntouch src/routes/contact.jsx\n\n👉 Add the contact component UI\n\nIt's just a bunch of elements, feel free to copy/paste.\n\nNow that we've got a component, let's hook it up to a new route.\n\n👉 Import the contact component and create a new route\n\nNow if we click one of the links or visit /contacts/1 we get our new component!\n\nHowever, it's not inside of our root layout 😠\n\nNested Routes\n\nWe want the contact component to render inside of the <Root> layout like this.\n\nWe do it by making the contact route a child of the root route.\n\n👉 Move the contacts route to be a child of the root route\n\nYou'll now see the root layout again but a blank page on the right. We need to tell the root route where we want it to render its child routes. We do that with <Outlet>.\n\nFind the <div id=\"detail\"> and put an outlet inside\n\n👉 Render an <Outlet>\n\nClient Side Routing\n\nYou may or may not have noticed, but when we click the links in the sidebar, the browser is doing a full document request for the next URL instead of using React Router.\n\nClient side routing allows our app to update the URL without requesting another document from the server. Instead, the app can immediately render new UI. Let's make it happen with <Link>.\n\n👉 Change the sidebar <a href> to <Link to>\n\nYou can open the network tab in the browser devtools to see that it's not requesting documents anymore.\n\nLoading Data\n\nURL segments, layouts, and data are more often than not coupled (tripled?) together. We can see it in this app already:\n\nURL Segment Component Data / <Root> list of contacts contacts/:id <Contact> individual contact\n\nBecause of this natural coupling, React Router has data conventions to get data into your route components easily.\n\nThere are two APIs we'll be using to load data, loader and useLoaderData. First we'll create and export a loader function in the root module, then we'll hook it up to the route. Finally, we'll access and render the data.\n\n👉 Export a loader from root.jsx\n\n👉 Configure the loader on the route\n\n👉 Access and render the data\n\nThat's it! React Router will now automatically keep that data in sync with your UI. We don't have any data yet, so you're probably getting a blank list like this:\n\nData Writes + HTML Forms\n\nWe'll create our first contact in a second, but first let's talk about HTML.\n\nReact Router emulates HTML Form navigation as the data mutation primitive, according to web development before the JavaScript cambrian explosion. It gives you the UX capabilities of client rendered apps with the simplicity of the \"old school\" web model.\n\nWhile unfamiliar to some web developers, HTML forms actually cause a navigation in the browser, just like clicking a link. The only difference is in the request: links can only change the URL while forms can also change the request method (GET vs POST) and the request body (POST form data).\n\nWithout client side routing, the browser will serialize the form's data automatically and send it to the server as the request body for POST, and as URLSearchParams for GET. React Router does the same thing, except instead of sending the request to the server, it uses client side routing and sends it to a route action.\n\nWe can test this out by clicking the \"New\" button in our app. The app should blow up because the Vite server isn't configured to handle a POST request (it sends a 404, though it should probably be a 405 🤷).\n\nInstead of sending that POST to the Vite server to create a new contact, let's use client side routing instead.\n\nWe'll create new contacts by exporting an action in our root route, wiring it up to the route config, and changing our <form> to a React Router <Form>.\n\n👉 Create the action and change <form> to <Form>\n\n👉 Import and set the action on the route\n\nThat's it! Go ahead and click the \"New\" button and you should see a new record pop into the list 🥳\n\nThe createContact method just creates an empty contact with no name or data or anything. But it does still create a record, promise!\n\n🧐 Wait a sec ... How did the sidebar update? Where did we call the action? Where's the code to refetch the data? Where are useState, onSubmit and useEffect?!\n\nThis is where the \"old school web\" programming model shows up. As we discussed earlier, <Form> prevents the browser from sending the request to the server and sends it to your route action instead. In web semantics, a POST usually means some data is changing. By convention, React Router uses this as a hint to automatically revalidate the data on the page after the action finishes. That means all of your useLoaderData hooks update and the UI stays in sync with your data automatically! Pretty cool.\n\nURL Params in Loaders\n\n👉 Click on the No Name record\n\nWe should be seeing our old static contact page again, with one difference: the URL now has a real ID for the record.\n\nReviewing the route config, the route looks like this:\n\nNote the :contactId URL segment. The colon (:) has special meaning, turning it into a \"dynamic segment\". Dynamic segments will match dynamic (changing) values in that position of the URL, like the contact ID. We call these values in the URL \"URL Params\", or just \"params\" for short.\n\nThese params are passed to the loader with keys that match the dynamic segment. For example, our segment is named :contactId so the value will be passed as params.contactId.\n\nThese params are most often used to find a record by ID. Let's try it out.\n\n👉 Add a loader to the contact page and access data with useLoaderData\n\n👉 Configure the loader on the route\n\nUpdating Data\n\nJust like creating data, you update data with <Form>. Let's make a new route at contacts/:contactId/edit. Again, we'll start with the component and then wire it up to the route config.\n\n👉 Create the edit component\n\ntouch src/routes/edit.jsx\n\n👉 Add the edit page UI\n\nNothing we haven't seen before, feel free to copy/paste:\n\n👉 Add the new edit route\n\nWe want it to be rendered in the root route's outlet, so we made it a sibling to the existing child route.\n\n(You might note we reused the contactLoader for this route. This is only because we're being lazy in the tutorial. There is no reason to attempt to share loaders among routes, they usually have their own.)\n\nAlright, clicking the \"Edit\" button gives us this new UI:\n\nThe edit route we just created already renders a form. All we need to do to update the record is wire up an action to the route. The form will post to the action and the data will be automatically revalidated.\n\n👉 Add an action to the edit module\n\n👉 Wire the action up to the route\n\nFill out the form, hit save, and you should see something like this! (Except easier on the eyes and maybe less hairy.)\n\nMutation Discussion\n\n😑 It worked, but I have no idea what is going on here...\n\nLet's dig in a bit...\n\nOpen up src/routes/edit.jsx and look at the form elements. Notice how they each have a name:\n\nWithout JavaScript, when a form is submitted, the browser will create FormData and set it as the body of the request when it sends it to the server. As mentioned before, React Router prevents that and sends the request to your action instead, including the FormData.\n\nEach field in the form is accessible with formData.get(name). For example, given the input field from above, you could access the first and last names like this:\n\nSince we have a handful of form fields, we used Object.fromEntries to collect them all into an object, which is exactly what our updateContact function wants.\n\nAside from action, none of these APIs we're discussing are provided by React Router: request, request.formData, Object.fromEntries are all provided by the web platform.\n\nAfter we finished the action, note the redirect at the end:\n\nLoaders and actions can both return a Response (makes sense, since they received a Request!). The redirect helper just makes it easier to return a response that tells the app to change locations.\n\nWithout client side routing, if a server redirected after a POST request, the new page would fetch the latest data and render. As we learned before, React Router emulates this model and automatically revalidates the data on the page after the action. That's why the sidebar automatically updates when we save the form. The extra revalidation code doesn't exist without client side routing, so it doesn't need to exist with client side routing either!\n\nRedirecting new records to the edit page\n\nNow that we know how to redirect, let's update the action that creates new contacts to redirect to the edit page:\n\n👉 Redirect to the new record's edit page\n\nNow when we click \"New\", we should end up on the edit page:\n\n👉 Add a handful of records\n\nI'm going to use the stellar lineup of speakers from the first Remix Conference 😁\n\nActive Link Styling\n\nNow that we have a bunch of records, it's not clear which one we're looking at in the sidebar. We can use NavLink to fix this.\n\n👉 Use a NavLink in the sidebar\n\nNote that we are passing a function to className. When the user is at the URL in the NavLink, then isActive will be true. When it's about to be active (the data is still loading) then isPending will be true. This allows us to easily indicate where the user is, as well as provide immediate feedback on links that have been clicked but we're still waiting for data to load.\n\nGlobal Pending UI\n\nAs the user navigates the app, React Router will leave the old page up as data is loading for the next page. You may have noticed the app feels a little unresponsive as you click between the list. Let's provide the user with some feedback so the app doesn't feel unresponsive.\n\nReact Router is managing all of the state behind the scenes and reveals the pieces of it you need to build dynamic web apps. In this case, we'll use the useNavigation hook.\n\n👉 useNavigation to add global pending UI\n\nuseNavigation returns the current navigation state: it can be one of \"idle\" | \"submitting\" | \"loading\".\n\nIn our case, we add a \"loading\" class to the main part of the app if we're not idle. The CSS then adds a nice fade after a short delay (to avoid flickering the UI for fast loads). You could do anything you want though, like show a spinner or loading bar across the top.\n\nNote that our data model (src/contacts.js) has a clientside cache, so navigating to the same contact is fast the second time. This behavior is not React Router, it will re-load data for changing routes no matter if you've been there before or not. It does, however, avoid calling the loaders for unchanging routes (like the list) during a navigation.\n\nDeleting Records\n\nIf we review code in the contact route, we can find the delete button looks like this:\n\nNote the action points to \"destroy\". Like <Link to>, <Form action> can take a relative value. Since the form is rendered in contact/:contactId, then a relative action with destroy will submit the form to contact/:contactId/destroy when clicked.\n\nAt this point you should know everything you need to know to make the delete button work. Maybe give it a shot before moving on? You'll need:\n\nA new route\n\nAn action at that route\n\ndeleteContact from src/contacts.js\n\n👉 Create the \"destroy\" route module\n\ntouch src/routes/destroy.jsx\n\n👉 Add the destroy action\n\n👉 Add the destroy route to the route config\n\nAlright, navigate to a record and click the \"Delete\" button. It works!\n\n😅 I'm still confused why this all works\n\nWhen the user clicks the submit button:\n\n<Form> prevents the default browser behavior of sending a new POST request to the server, but instead emulates the browser by creating a POST request with client side routing\n\nThe <Form action=\"destroy\"> matches the new route at \"contacts/:contactId/destroy\" and sends it the request\n\nAfter the action redirects, React Router calls all of the loaders for the data on the page to get the latest values (this is \"revalidation\"). useLoaderData returns new values and causes the components to update!\n\nAdd a form, add an action, React Router does the rest.\n\nContextual Errors\n\nJust for kicks, throw an error in the destroy action:\n\nRecognize that screen? It's our errorElement from before. The user, however, can't really do anything to recover from this screen except to hit refresh.\n\nLet's create a contextual error message for the destroy route:\n\nNow try it again:\n\nOur user now has more options than slamming refresh, they can continue to interact with the parts of the page that aren't having trouble 🙌\n\nBecause the destroy route has its own errorElement and is a child of the root route, the error will render there instead of the root. As you probably noticed, these errors bubble up to the nearest errorElement. Add as many or as few as you like, as long as you've got one at the root.\n\nIndex Routes\n\nWhen we load up the app, you'll notice a big blank page on the right side of our list.\n\nWhen a route has children, and you're at the parent route's path, the <Outlet> has nothing to render because no children match. You can think of index routes as the default child route to fill in that space.\n\n👉 Create the index route module\n\ntouch src/routes/index.jsx\n\n👉 Fill in the index component's elements\n\nFeel free to copy paste, nothing special here.\n\n👉 Configure the index route\n\nNote the { index:true } instead of { path: \"\" }. That tells the router to match and render this route when the user is at the parent route's exact path, so there are no other child routes to render in the <Outlet>.\n\nVoila! No more blank space. It's common to put dashboards, stats, feeds, etc. at index routes. They can participate in data loading as well.\n\nCancel Button\n\nOn the edit page we've got a cancel button that doesn't do anything yet. We'd like it to do the same thing as the browser's back button.\n\nWe'll need a click handler on the button as well as useNavigate from React Router.\n\n👉 Add the cancel button click handler with useNavigate\n\nNow when the user clicks \"Cancel\", they'll be sent back one entry in the browser's history.\n\n🧐 Why is there no event.preventDefault on the button?\n\nA <button type=\"button\">, while seemingly redundant, is the HTML way of preventing a button from submitting its form.\n\nTwo more features to go. We're on the home stretch!\n\nURL Search Params and GET Submissions\n\nAll of our interactive UI so far have been either links that change the URL or forms that post data to actions. The search field is interesting because it's a mix of both: it's a form but it only changes the URL, it doesn't change data.\n\nRight now it's just a normal HTML <form>, not a React Router <Form>. Let's see what the browser does with it by default:\n\n👉 Type a name into the search field and hit the enter key\n\nNote the browser's URL now contains your query in the URL as URLSearchParams:\n\nhttp://127.0.0.1:5173/?q=ryan\n\nIf we review the search form, it looks like this:\n\nAs we've seen before, browsers can serialize forms by the name attribute of its input elements. The name of this input is q, that's why the URL has ?q=. If we named it search the URL would be ?search=.\n\nNote that this form is different from the others we've used, it does not have <form method=\"post\">. The default method is \"get\". That means when the browser creates the request for the next document, it doesn't put the form data into the request POST body, but into the URLSearchParams of a GET request.\n\nGET Submissions with Client Side Routing\n\nLet's use client side routing to submit this form and filter the list in our existing loader.\n\n👉 Change <form> to <Form>\n\n👉 Filter the list if there are URLSearchParams\n\nBecause this is a GET, not a POST, React Router does not call the action. Submitting a GET form is the same as clicking a link: only the URL changes. That's why the code we added for filtering is in the loader, not the action of this route.\n\nThis also means it's a normal page navigation. You can click the back button to get back to where you were.\n\nSynchronizing URLs to Form State\n\nThere are a couple of UX issues here that we can take care of quickly.\n\nIf you click back after a search, the form field still has the value you entered even though the list is no longer filtered.\n\nIf you refresh the page after searching, the form field no longer has the value in it, even though the list is filtered\n\nIn other words, the URL and our form state are out of sync.\n\n👉 Return q from your loader and set it as the search field default value\n\nThat solves problem (2). If you refresh the page now, the input field will show the query.\n\nNow for problem (1), clicking the back button and updating the input. We can bring in useEffect from React to manipulate the form's state in the DOM directly.\n\n👉 Synchronize input value with the URL Search Params\n\n🤔 Shouldn't you use a controlled component and React State for this?\n\nYou could certainly do this as a controlled component, but you'll end up with more complexity for the same behavior. You don't control the URL, the user does with the back/forward buttons. There would be more synchronization points with a controlled component.\n\nIf you're still concerned, expand this to see what it would look like\n\nNotice how controlling the input requires three points of synchronization now instead of just one. The behavior is identical but the code is more complex.\n\nimport { useEffect, useState } from \"react\"; // existing code export async function loader({ request }) { const url = new URL(request.url); const q = url.searchParams.get(\"q\") || \"\"; const contacts = await getContacts(q); return { contacts, q }; } // existing code export default function Root() { const { contacts, q } = useLoaderData(); const [query, setQuery] = useState(q); const navigation = useNavigation(); useEffect(() => { setQuery(q); }, [q]); return ( <> <div id=\"sidebar\"> <h1>React Router Contacts</h1> <div> <Form id=\"search-form\" role=\"search\"> <input id=\"q\" aria-label=\"Search contacts\" placeholder=\"Search\" type=\"search\" name=\"q\" value={query} onChange={(e) => { setQuery(e.target.value); }} /> {/* existing code */} </Form> {/* existing code */} </div> {/* existing code */} </div> </> ); }\n\nSubmitting Forms onChange\n\nWe've got a product decision to make here. For this UI, we'd probably rather have the filtering happen on every key stroke instead of when the form is explicitly submitted.\n\nWe've seen useNavigate already, we'll use its cousin, useSubmit, for this.\n\nNow as you type, the form is submitted automatically!\n\nNote the argument to submit. We're passing in event.currentTarget.form. The currentTarget is the DOM node the event is attached to, and the currentTarget.form is the input's parent form node. The submit function will serialize and submit any form you pass to it.\n\nAdding Search Spinner\n\nIn a production app, it's likely this search will be looking for records in a database that is too large to send all at once and filter client side. That's why this demo has some faked network latency.\n\nWithout any loading indicator, the search feels kinda sluggish. Even if we could make our database faster, we'll always have the user's network latency in the way and out of our control. For a better UX, let's add some immediate UI feedback for the search. For this we'll use useNavigation again.\n\n👉 Add the search spinner\n\nThe navigation.location will show up when the app is navigating to a new URL and loading the data for it. It then goes away when there is no pending navigation anymore.\n\nManaging the History Stack\n\nNow that the form is submitted for every key stroke, if we type the characters \"seba\" and then delete them with backspace, we end up with 7 new entries in the stack 😂. We definitely don't want this\n\nWe can avoid this by replacing the current entry in the history stack with the next page, instead of pushing into it.\n\n👉 Use replace in submit\n\nWe only want to replace search results, not the page before we started searching, so we do a quick check if this is the first search or not and then decide to replace.\n\nEach key stroke no longer creates new entries, so the user can click back out of the search results without having to click it 7 times 😅.\n\nMutations Without Navigation\n\nSo far all of our mutations (the times we change data) have used forms that navigate, creating new entries in the history stack. While these user flows are common, it's equally as common to want to change data without causing a navigation.\n\nFor these cases, we have the useFetcher hook. It allows us to communicate with loaders and actions without causing a navigation.\n\nThe ★ button on the contact page makes sense for this. We aren't creating or deleting a new record, we don't want to change pages, we simply want to change the data on the page we're looking at.\n\n👉 Change the <Favorite> form to a fetcher form\n\nMight want to take a look at that form while we're here. As always, our form has fields with a name prop. This form will send formData with a favorite key that's either \"true\" | \"false\". Since it's got method=\"post\" it will call the action. Since there is no <fetcher.Form action=\"...\"> prop, it will post to the route where the form is rendered.\n\n👉 Create the action\n\nPretty simple. Pull the form data off the request and send it to the data model.\n\n👉 Configure the route's new action\n\nAlright, we're ready to click the star next to the user's name!\n\nCheck that out, both stars automatically update. Our new <fetcher.Form method=\"post\"> works almost exactly like the <Form> we've been using: it calls the action and then all data is revalidated automatically--even your errors will be caught the same way.\n\nThere is one key difference though, it's not a navigation--the URL doesn't change, the history stack is unaffected.\n\nOptimistic UI\n\nYou probably noticed the app felt kind of unresponsive when we clicked the favorite button from the last section. Once again, we added some network latency because you're going to have it in the real world!\n\nTo give the user some feedback, we could put the star into a loading state with fetcher.state (a lot like navigation.state from before), but we can do something even better this time. We can use a strategy called \"optimistic UI\"\n\nThe fetcher knows the form data being submitted to the action, so it's available to you on fetcher.formData. We'll use that to immediately update the star's state, even though the network hasn't finished. If the update eventually fails, the UI will revert to the real data.\n\n👉 Read the optimistic value from fetcher.formData\n\nIf you click the button now you should see the star immediately change to the new state. Instead of always rendering the actual data, we check if the fetcher has any formData being submitted, if so, we'll use that instead. When the action is done, the fetcher.formData will no longer exist and we're back to using the actual data. So even if you write bugs in your optimistic UI code, it'll eventually go back to the correct state 🥹\n\nNot Found Data\n\nWhat happens if the contact we're trying to load doesn't exist?\n\nOur root errorElement is catching this unexpected error as we try to render a null contact. Nice the error was properly handled, but we can do better!\n\nWhenever you have an expected error case in a loader or action–like the data not existing–you can throw. The call stack will break, React Router will catch it, and the error path is rendered instead. We won't even try to render a null contact.\n\n👉 Throw a 404 response in the loader\n\nInstead of hitting a render error with Cannot read properties of null, we avoid the component completely and render the error path instead, telling the user something more specific.\n\nThis keeps your happy paths, happy. Your route elements don't need to concern themselves with error and loading states.\n\nPathless Routes\n\nOne last thing. The last error page we saw would be better if it rendered inside the root outlet, instead of the whole page. In fact, every error in all of our child routes would be better in the outlet, then the user has more options than hitting refresh.\n\nWe'd like it to look like this:\n\nWe could add the error element to every one of the child routes but, since it's all the same error page, this isn't recommended.\n\nThere's a cleaner way. Routes can be used without a path, which lets them participate in the UI layout without requiring new path segments in the URL. Check it out:\n\n👉 Wrap the child routes in a pathless route\n\nWhen any errors are thrown in the child routes, our new pathless route will catch it and render, preserving the root route's UI!\n\nJSX Routes\n\nAnd for our final trick, many folks prefer to configure their routes with JSX. You can do that with createRoutesFromElements. There is no functional difference between JSX or objects when configuring your routes, it's simply a stylistic preference.\n\nThat's it! Thanks for giving React Router a shot. We hope this tutorial gives you a solid start to build great user experiences. There's a lot more you can do with React Router, so make sure to check out all the APIs 😀"
    }
}