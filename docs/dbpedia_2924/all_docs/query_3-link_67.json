{
    "id": "dbpedia_2924_3",
    "rank": 67,
    "data": {
        "url": "https://docs.cypress.io/guides/continuous-integration/github-actions",
        "read_more_link": "",
        "language": "en",
        "title": "Cypress Documentation",
        "top_image": "https://docs.cypress.io/img/logo/cypress-logo-circle-dark.png",
        "meta_img": "https://docs.cypress.io/img/logo/cypress-logo-circle-dark.png",
        "images": [
            "https://docs.cypress.io/img/logo/cypress-logo-light.svg",
            "https://docs.cypress.io/img/logo/cypress-logo-dark.svg",
            "https://docs.cypress.io/img/guides/github-actions/rwa-run-matrix.png"
        ],
        "movies": [
            "https://youtube.com/embed/videoseries?list=PL8GlT7H3xOcLJMIPhxlZ8W9kgbeMqW7cH",
            "https://youtube.com/embed/N0TOFWy1Xvg",
            "https://youtube.com/embed/vVr7DXDdUks",
            "https://youtube.com/embed/96Yn_IiQUJI",
            "https://youtube.com/embed/Oqq-_QZWzhg"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-06-25T19:40:52+00:00",
        "summary": "",
        "meta_description": "What you'll learn",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.cypress.io/guides/continuous-integration/github-actions",
        "text": "GitHub Actions\n\nGitHub offers developers Actions that provide a way to automate, customize, and execute your software development workflows within your GitHub repository. Detailed documentation is available in the GitHub Action Documentation.\n\nWorkflows can be packaged and shared as GitHub Actions. GitHub maintains many, such as the checkout and Upload/Download Artifact Actions actions used below.\n\nThe official Cypress GitHub Action is maintained by Cypress and our community to help ease the setup of Cypress in a GitHub Action. The action provides dependency installation (via npm, yarn, or pnpm), built-in caching of Node dependencies, and additional configuration options for advanced workflows.\n\nFor Example:\n\nAlternatively, as a mitigation strategy for unforeseen breaks, bind to a specific release version tag, for example cypress-io/[email protected]. Read the Cypress GitHub Action documentation for more information.\n\nThe example below is a basic CI setup and job using the Cypress GitHub Action to run Cypress tests within the Electron browser. This GitHub Action configuration is placed within .github/workflows/main.yml.\n\nHow this action works:\n\nOn push to this repository, this job will provision and start a GitHub-hosted Ubuntu Linux instance to run the outlined steps for the declared cypress-run job within the jobs section of the configuration.\n\nThe GitHub checkout Action is used to check out our code from our GitHub repository.\n\nFinally, our Cypress GitHub Action will:\n\nInstall npm dependencies\n\nBuild the project (npm run build)\n\nStart the project web server (npm start)\n\nRun the Cypress tests within our GitHub repository within Electron.\n\nGitHub-hosted runners offer images with pre-installed browsers to use for testing. The ubuntu and windows runners each include Google Chrome, Mozilla Firefox, and Microsoft Edge pre-installed. The macos runners additionally include Apple Safari. Refer to GitHub Actions Runner Images for current details.\n\nUse the action's browser parameter to select the desired browser. To change the above example to select Chrome instead of the default browser Electron, add browser: chrome as follows.\n\nFor more examples, see the action's Browser section.\n\nGitHub Actions provides the option to specify a container image for the job. Cypress offers various Docker Images for running Cypress locally and in CI.\n\nBelow we extend the previous example by adding the container attribute using a Cypress Docker Image built with the version of Google Chrome embedded in the tag name of the Docker image shown as chrome-xxx. Specifying a browser version allows our tests to execute without any influence from browser version changes in the GitHub runner image.\n\nWhen working with actions that have multiple jobs, it is recommended to have an initial \"install\" job that will download any dependencies and build your app, and then cache these assets for use later by subsequent jobs.\n\nThe Cypress GitHub Action will automatically cache and restore your Node dependencies for you.\n\nFor build assets, you will need to cache and restore them manually.\n\nThe install job below uses the upload-artifact action and saves the state of the build directory for the cypress-run worker job.\n\nThe download-artifact action retrieves the build directory saved in the install job, as seen below in the cypress-run worker job.\n\nView GitHub's guide on Storing workflow data as artifacts for more info.\n\nCypress Cloud offers the ability to parallelize and group test runs along with additional insights and analytics for Cypress tests.\n\nUsing parallelization with the Cypress GitHub Action requires setting up recording to Cypress Cloud.\n\nGitHub Actions offers a matrix strategy for declaring different job configurations for a single job definition. Jobs declared within a matrix strategy can run in parallel, which enables us to run multiples instances of Cypress at the same time, as we will see later in this section.\n\nBefore diving into an example of a parallelization setup, it is important to understand the two different types of GitHub Action jobs that we will declare:\n\nInstall Job: A job that installs and caches dependencies that will be used by subsequent jobs later in the GitHub Action workflow.\n\nWorker Job: A job that handles the execution of Cypress tests and depends on the install job.\n\nThe separation of installation from test running is necessary when running parallel jobs. It allows for the reuse of various build steps aided by caching.\n\nFirst, we'll define the install step that will be used by the worker jobs defined in the matrix strategy.\n\nFor the steps, notice that we pass runTests: false to the Cypress GitHub Action to instruct it only to install and cache Cypress and npm dependencies without running the tests.\n\nThe upload-artifact action will save the state of the build directory for the worker jobs.\n\nNext, we define the worker job named \"cypress-run\" that will run Cypress tests as part of a parallelized matrix strategy.\n\nThe download-artifact action will retrieve the dist directory saved in the install job.\n\nTo set up multiple containers to run in parallel, the matrix option of the strategy configuration can be set to containers: [1, 2, 3, 4, 5], where the number of items defined in the containers array will be how many instances of the job will start up.\n\nFor instance, containers: [1, 2, 3, 4, 5] will provision five worker instances to run in parallel. For our purposes, the array's values are arbitrary and aren't used in the steps.\n\nIf you specify a browser in parallel mode, we recommend using a Cypress Docker image to pin the browser version used.\n\nWhen GitHub updates the browsers in their runner images, not all runners get the new version simultaneously. Your test run might fail if Cypress Cloud detects differences in the runners between parallel jobs. The Docker image helps ensure the browser is consistent during an image upgrade.\n\nIn the GitHub Actions configuration, we have defined in the previous section, we are leveraging three useful features of Cypress Cloud:\n\nRecording test results with the record: true option to Cypress Cloud:\n\nIn-depth and shareable test reports.\n\nVisibility into test failures via quick access to Test Replay, error messages, stack traces, screenshots, videos, and contextual details.\n\nIntegrating testing with the pull-request (PR) process via commit status check guards and convenient test report comments.\n\nDetecting flaky tests and surfacing them via Slack alerts or GitHub PR status checks.\n\nParallelizing test runs and optimizing their execution via intelligent load-balancing of test specs across CI machines with the parallel: true option.\n\nOrganizing and consolidating multiple cypress run calls by labeled groups into a single report within Cypress Cloud. In the example above, we use the group: \"UI-Chrome\" option to organize all UI tests for the Chrome browser into a group labeled \"UI - Chrome\" in the Cypress Cloud report.\n\nA complete CI workflow against multiple browsers, viewports, and operating systems is available in the Cypress Real World App.\n\nClone the Real World App (RWA) and refer to the .github/workflows/main.yml file.\n\nWe recommend passing the GITHUB_TOKEN secret (created by the GH Action automatically) as an environment variable. This will allow the accurate identification of each build to avoid confusion when re-running a build.\n\nYou can overwrite the commit message sent to Cypress Cloud by setting an environment variable. See Issue #124 for more details."
    }
}