{
    "id": "dbpedia_2924_3",
    "rank": 58,
    "data": {
        "url": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/managing_networking_infrastructure_services/assembly_setting-up-and-configuring-a-bind-dns-server_networking-infrastructure-services",
        "read_more_link": "",
        "language": "en",
        "title": "Chapter 1. Setting up and configuring a BIND DNS server",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.redhat.com/Logo-Red_Hat-Documentation-A-Reverse-RGB.svg",
            "https://docs.redhat.com/Logo-Red_Hat-Documentation-A-Reverse-RGB.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Chapter 1. Setting up and configuring a BIND DNS server | Red Hat Documentation",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/managing_networking_infrastructure_services/assembly_setting-up-and-configuring-a-bind-dns-server_networking-infrastructure-services",
        "text": "download PDF\n\nBIND is a feature-rich DNS server that is fully compliant with the Internet Engineering Task Force (IETF) DNS standards and draft standards. For example, administrators frequently use BIND as:\n\nCaching DNS server in the local network\n\nAuthoritative DNS server for zones\n\nSecondary server to provide high availability for zones\n\n1.1. Considerations about protecting BIND with SELinux or running it in a change-root environment\n\nTo secure a BIND installation, you can:\n\nRun the named service without a change-root environment. In this case, SELinux in enforcing mode prevents exploitation of known BIND security vulnerabilities. By default, Red Hat Enterprise Linux uses SELinux in enforcing mode.\n\nImportant\n\nRunning BIND on RHEL with SELinux in enforcing mode is more secure than running BIND in a change-root environment.\n\nRun the named-chroot service in a change-root environment.\n\nUsing the change-root feature, administrators can define that the root directory of a process and its sub-processes is different to the / directory. When you start the named-chroot service, BIND switches its root directory to /var/named/chroot/. As a consequence, the service uses mount --bind commands to make the files and directories listed in /etc/named-chroot.files available in /var/named/chroot/, and the process has no access to files outside of /var/named/chroot/.\n\nIf you decide to use BIND:\n\nIn normal mode, use the named service.\n\nIn a change-root environment, use the named-chroot service. This requires that you install, additionally, the named-chroot package.\n\n1.2. Configuring BIND as a caching DNS server\n\nBy default, the BIND DNS server resolves and caches successful and failed lookups. The service then answers requests to the same records from its cache. This significantly improves the speed of DNS lookups.\n\nPrerequisites\n\nThe IP address of the server is static.\n\nProcedure\n\nInstall the bind and bind-utils packages:\n\n# dnf install bind bind-utils\n\nIf you want to run BIND in a change-root environment install the bind-chroot package:\n\n# dnf install bind-chroot\n\nNote that running BIND on a host with SELinux in enforcing mode, which is default, is more secure.\n\nEdit the /etc/named.conf file, and make the following changes in the options statement:\n\nUpdate the listen-on and listen-on-v6 statements to specify on which IPv4 and IPv6 interfaces BIND should listen:\n\nlisten-on port 53 { 127.0.0.1; 192.0.2.1; }; listen-on-v6 port 53 { ::1; 2001:db8:1::1; };\n\nUpdate the allow-query statement to configure from which IP addresses and ranges clients can query this DNS server:\n\nallow-query { localhost; 192.0.2.0/24; 2001:db8:1::/64; };\n\nAdd an allow-recursion statement to define from which IP addresses and ranges BIND accepts recursive queries:\n\nallow-recursion { localhost; 192.0.2.0/24; 2001:db8:1::/64; };\n\nWarning\n\nDo not allow recursion on public IP addresses of the server. Otherwise, the server can become part of large-scale DNS amplification attacks.\n\nBy default, BIND resolves queries by recursively querying from the root servers to an authoritative DNS server. Alternatively, you can configure BIND to forward queries to other DNS servers, such as the ones of your provider. In this case, add a forwarders statement with the list of IP addresses of the DNS servers that BIND should forward queries to:\n\nforwarders { 198.51.100.1; 203.0.113.5; };\n\nAs a fall-back behavior, BIND resolves queries recursively if the forwarder servers do not respond. To disable this behavior, add a forward only; statement.\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nUpdate the firewalld rules to allow incoming DNS traffic:\n\n# firewall-cmd --permanent --add-service=dns # firewall-cmd --reload\n\nStart and enable BIND:\n\n# systemctl enable --now named\n\nIf you want to run BIND in a change-root environment, use the systemctl enable --now named-chroot command to enable and start the service.\n\nVerification\n\nUse the newly set up DNS server to resolve a domain:\n\n# dig @localhost www.example.org ... www.example.org. 86400 IN A 198.51.100.34 ;; Query time: 917 msec ...\n\nThis example assumes that BIND runs on the same host and responds to queries on the localhost interface.\n\nAfter querying a record for the first time, BIND adds the entry to its cache.\n\nNext steps\n\nConfigure the clients in your network to use this DNS server. If a DHCP server provides the DNS server setting to the clients, update the DHCP server’s configuration accordingly.\n\nAdditional resources\n\nConsiderations about protecting BIND with SELinux or running it in a change-root environment\n\nnamed.conf(5) man page\n\n/usr/share/doc/bind/sample/etc/named.conf\n\n1.3. Configuring logging on a BIND DNS server\n\nThe configuration in the default /etc/named.conf file, as provided by the bind package, uses the default_debug channel and logs messages to the /var/named/data/named.run file. The default_debug channel only logs entries when the server’s debug level is non-zero.\n\nUsing different channels and categories, you can configure BIND to write different events with a defined severity to separate files.\n\nPrerequisites\n\nBIND is already configured, for example, as a caching name server.\n\nThe named or named-chroot service is running.\n\nProcedure\n\nEdit the /etc/named.conf file, and add category and channel phrases to the logging statement, for example:\n\nlogging { ... category notify { zone_transfer_log; }; category xfer-in { zone_transfer_log; }; category xfer-out { zone_transfer_log; }; channel zone_transfer_log { file \"/var/named/log/transfer.log\" versions 10 size 50m; print-time yes; print-category yes; print-severity yes; severity info; }; ... };\n\nWith this example configuration, BIND logs messages related to zone transfers to /var/named/log/transfer.log. BIND creates up to 10 versions of the log file and rotates them if they reach a maximum size of 50 MB.\n\nThe category phrase defines to which channels BIND sends messages of a category.\n\nThe channel phrase defines the destination of log messages including the number of versions, the maximum file size, and the severity level BIND should log to a channel. Additional settings, such as enabling logging the time stamp, category, and severity of an event are optional, but useful for debugging purposes.\n\nCreate the log directory if it does not exist, and grant write permissions to the named user on this directory:\n\n# mkdir /var/named/log/ # chown named:named /var/named/log/ # chmod 700 /var/named/log/\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nRestart BIND:\n\n# systemctl restart named\n\nIf you run BIND in a change-root environment, use the systemctl restart named-chroot command to restart the service.\n\nVerification\n\nDisplay the content of the log file:\n\n# cat /var/named/log/transfer.log ... 06-Jul-2022 15:08:51.261 xfer-out: info: client @0x7fecbc0b0700 192.0.2.2#36121/key example-transfer-key (example.com): transfer of 'example.com/IN': AXFR started: TSIG example-transfer-key (serial 2022070603) 06-Jul-2022 15:08:51.261 xfer-out: info: client @0x7fecbc0b0700 192.0.2.2#36121/key example-transfer-key (example.com): transfer of 'example.com/IN': AXFR ended\n\nAdditional resources\n\nnamed.conf(5) man page\n\n1.4. Writing BIND ACLs\n\nControlling access to certain features of BIND can prevent unauthorized access and attacks, such as denial of service (DoS). BIND access control list (acl) statements are lists of IP addresses and ranges. Each ACL has a nickname that you can use in several statements, such as allow-query, to refer to the specified IP addresses and ranges.\n\nWarning\n\nBIND uses only the first matching entry in an ACL. For example, if you define an ACL { 192.0.2/24; !192.0.2.1; } and the host with IP address 192.0.2.1 connects, access is granted even if the second entry excludes this address.\n\nBIND has the following built-in ACLs:\n\nnone: Matches no hosts.\n\nany: Matches all hosts.\n\nlocalhost: Matches the loopback addresses 127.0.0.1 and ::1, as well as the IP addresses of all interfaces on the server that runs BIND.\n\nlocalnets: Matches the loopback addresses 127.0.0.1 and ::1, as well as all subnets the server that runs BIND is directly connected to.\n\nPrerequisites\n\nBIND is already configured, for example, as a caching name server.\n\nThe named or named-chroot service is running.\n\nProcedure\n\nEdit the /etc/named.conf file and make the following changes:\n\nAdd acl statements to the file. For example, to create an ACL named internal-networks for 127.0.0.1, 192.0.2.0/24, and 2001:db8:1::/64, enter:\n\nacl internal-networks { 127.0.0.1; 192.0.2.0/24; 2001:db8:1::/64; }; acl dmz-networks { 198.51.100.0/24; 2001:db8:2::/64; };\n\nUse the ACL’s nickname in statements that support them, for example:\n\nallow-query { internal-networks; dmz-networks; }; allow-recursion { internal-networks; };\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nVerification\n\nExecute an action that triggers a feature which uses the configured ACL. For example, the ACL in this procedure allows only recursive queries from the defined IP addresses. In this case, enter the following command on a host that is not within the ACL’s definition to attempt resolving an external domain:\n\n# dig +short @192.0.2.1 www.example.com\n\nIf the command returns no output, BIND denied access, and the ACL works. For a verbose output on the client, use the command without +short option:\n\n# dig @192.0.2.1 www.example.com ... ;; WARNING: recursion requested but not available ...\n\n1.5. Configuring zones on a BIND DNS server\n\nA DNS zone is a database with resource records for a specific sub-tree in the domain space. For example, if you are responsible for the example.com domain, you can set up a zone for it in BIND. As a result, clients can, resolve www.example.com to the IP address configured in this zone.\n\n1.5.1. The SOA record in zone files\n\nThe start of authority (SOA) record is a required record in a DNS zone. This record is important, for example, if multiple DNS servers are authoritative for a zone but also to DNS resolvers.\n\nA SOA record in BIND has the following syntax:\n\nname class type mname rname serial refresh retry expire minimum\n\nFor better readability, administrators typically split the record in zone files into multiple lines with comments that start with a semicolon (;). Note that, if you split a SOA record, parentheses keep the record together:\n\n@ IN SOA ns1.example.com. hostmaster.example.com. ( 2022070601 ; serial number 1d ; refresh period 3h ; retry period 3d ; expire time 3h ) ; minimum TTL\n\nImportant\n\nNote the trailing dot at the end of the fully-qualified domain names (FQDNs). FQDNs consist of multiple domain labels, separated by dots. Because the DNS root has an empty label, FQDNs end with a dot. Therefore, BIND appends the zone name to names without a trailing dot. A hostname without a trailing dot, for example, ns1.example.com would be expanded to ns1.example.com.example.com., which is not the correct address of the primary name server.\n\nThese are the fields in a SOA record:\n\nname: The name of the zone, the so-called origin. If you set this field to @, BIND expands it to the zone name defined in /etc/named.conf.\n\nclass: In SOA records, you must set this field always to Internet (IN).\n\ntype: In SOA records, you must set this field always to SOA.\n\nmname (master name): The hostname of the primary name server of this zone.\n\nrname (responsible name): The email address of who is responsible for this zone. Note that the format is different. You must replace the at sign (@) with a dot (.).\n\nserial: The version number of this zone file. Secondary name servers only update their copies of the zone if the serial number on the primary server is higher.\n\nThe format can be any numeric value. A commonly-used format is <year><month><day><two-digit-number>. With this format, you can, theoretically, change the zone file up to a hundred times per day.\n\nrefresh: The amount of time secondary servers should wait before checking the primary server if the zone was updated.\n\nretry: The amount of time after that a secondary server retries to query the primary server after a failed attempt.\n\nexpire: The amount of time after that a secondary server stops querying the primary server, if all previous attempts failed.\n\nminimum: RFC 2308 changed the meaning of this field to the negative caching time. Compliant resolvers use it to determine how long to cache NXDOMAIN name errors.\n\nNote\n\nA numeric value in the refresh, retry, expire, and minimum fields define a time in seconds. However, for better readability, use time suffixes, such as m for minute, h for hours, and d for days. For example, 3h stands for 3 hours.\n\nAdditional resources\n\nRFC 1035: Domain names - implementation and specification\n\nRFC 1034: Domain names - concepts and facilities\n\nRFC 2308: Negative caching of DNS queries (DNS cache)\n\n1.5.2. Setting up a forward zone on a BIND primary server\n\nForward zones map names to IP addresses and other information. For example, if you are responsible for the domain example.com, you can set up a forward zone in BIND to resolve names, such as www.example.com.\n\nPrerequisites\n\nBIND is already configured, for example, as a caching name server.\n\nThe named or named-chroot service is running.\n\nProcedure\n\nAdd a zone definition to the /etc/named.conf file:\n\nzone \"example.com\" { type master; file \"example.com.zone\"; allow-query { any; }; allow-transfer { none; }; };\n\nThese settings define:\n\nThis server as the primary server (type master) for the example.com zone.\n\nThe /var/named/example.com.zone file is the zone file. If you set a relative path, as in this example, this path is relative to the directory you set in directory in the options statement.\n\nAny host can query this zone. Alternatively, specify IP ranges or BIND access control list (ACL) nicknames to limit the access.\n\nNo host can transfer the zone. Allow zone transfers only when you set up secondary servers and only for the IP addresses of the secondary servers.\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nCreate the /var/named/example.com.zone file, for example, with the following content:\n\n$TTL 8h @ IN SOA ns1.example.com. hostmaster.example.com. ( 2022070601 ; serial number 1d ; refresh period 3h ; retry period 3d ; expire time 3h ) ; minimum TTL IN NS ns1.example.com. IN MX 10 mail.example.com. www IN A 192.0.2.30 www IN AAAA 2001:db8:1::30 ns1 IN A 192.0.2.1 ns1 IN AAAA 2001:db8:1::1 mail IN A 192.0.2.20 mail IN AAAA 2001:db8:1::20\n\nThis zone file:\n\nSets the default time-to-live (TTL) value for resource records to 8 hours. Without a time suffix, such as h for hour, BIND interprets the value as seconds.\n\nContains the required SOA resource record with details about the zone.\n\nSets ns1.example.com as an authoritative DNS server for this zone. To be functional, a zone requires at least one name server (NS) record. However, to be compliant with RFC 1912, you require at least two name servers.\n\nSets mail.example.com as the mail exchanger (MX) of the example.com domain. The numeric value in front of the host name is the priority of the record. Entries with a lower value have a higher priority.\n\nSets the IPv4 and IPv6 addresses of www.example.com, mail.example.com, and ns1.example.com.\n\nSet secure permissions on the zone file that allow only the named group to read it:\n\n# chown root:named /var/named/example.com.zone # chmod 640 /var/named/example.com.zone\n\nVerify the syntax of the /var/named/example.com.zone file:\n\n# named-checkzone example.com /var/named/example.com.zone zone example.com/IN: loaded serial 2022070601 OK\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nVerification\n\nQuery different records from the example.com zone, and verify that the output matches the records you have configured in the zone file:\n\n# dig +short @localhost AAAA www.example.com 2001:db8:1::30 # dig +short @localhost NS example.com ns1.example.com. # dig +short @localhost A ns1.example.com 192.0.2.1\n\nThis example assumes that BIND runs on the same host and responds to queries on the localhost interface.\n\nAdditional resources\n\nThe SOA record in zone files\n\nWriting BIND ACLs\n\nRFC 1912 - Common DNS operational and configuration errors\n\n1.5.3. Setting up a reverse zone on a BIND primary server\n\nReverse zones map IP addresses to names. For example, if you are responsible for IP range 192.0.2.0/24, you can set up a reverse zone in BIND to resolve IP addresses from this range to hostnames.\n\nNote\n\nIf you create a reverse zone for whole classful networks, name the zone accordingly. For example, for the class C network 192.0.2.0/24, the name of the zone is 2.0.192.in-addr.arpa. If you want to create a reverse zone for a different network size, for example 192.0.2.0/28, the name of the zone is 28-2.0.192.in-addr.arpa.\n\nPrerequisites\n\nBIND is already configured, for example, as a caching name server.\n\nThe named or named-chroot service is running.\n\nProcedure\n\nAdd a zone definition to the /etc/named.conf file:\n\nzone \"2.0.192.in-addr.arpa\" { type master; file \"2.0.192.in-addr.arpa.zone\"; allow-query { any; }; allow-transfer { none; }; };\n\nThese settings define:\n\nThis server as the primary server (type master) for the 2.0.192.in-addr.arpa reverse zone.\n\nThe /var/named/2.0.192.in-addr.arpa.zone file is the zone file. If you set a relative path, as in this example, this path is relative to the directory you set in directory in the options statement.\n\nAny host can query this zone. Alternatively, specify IP ranges or BIND access control list (ACL) nicknames to limit the access.\n\nNo host can transfer the zone. Allow zone transfers only when you set up secondary servers and only for the IP addresses of the secondary servers.\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nCreate the /var/named/2.0.192.in-addr.arpa.zone file, for example, with the following content:\n\n$TTL 8h @ IN SOA ns1.example.com. hostmaster.example.com. ( 2022070601 ; serial number 1d ; refresh period 3h ; retry period 3d ; expire time 3h ) ; minimum TTL IN NS ns1.example.com. 1 IN PTR ns1.example.com. 30 IN PTR www.example.com.\n\nThis zone file:\n\nSets the default time-to-live (TTL) value for resource records to 8 hours. Without a time suffix, such as h for hour, BIND interprets the value as seconds.\n\nContains the required SOA resource record with details about the zone.\n\nSets ns1.example.com as an authoritative DNS server for this reverse zone. To be functional, a zone requires at least one name server (NS) record. However, to be compliant with RFC 1912, you require at least two name servers.\n\nSets the pointer (PTR) record for the 192.0.2.1 and 192.0.2.30 addresses.\n\nSet secure permissions on the zone file that only allow the named group to read it:\n\n# chown root:named /var/named/2.0.192.in-addr.arpa.zone # chmod 640 /var/named/2.0.192.in-addr.arpa.zone\n\nVerify the syntax of the /var/named/2.0.192.in-addr.arpa.zone file:\n\n# named-checkzone 2.0.192.in-addr.arpa /var/named/2.0.192.in-addr.arpa.zone zone 2.0.192.in-addr.arpa/IN: loaded serial 2022070601 OK\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nVerification\n\nQuery different records from the reverse zone, and verify that the output matches the records you have configured in the zone file:\n\n# dig +short @localhost -x 192.0.2.1 ns1.example.com. # dig +short @localhost -x 192.0.2.30 www.example.com.\n\nThis example assumes that BIND runs on the same host and responds to queries on the localhost interface.\n\nAdditional resources\n\nThe SOA record in zone files\n\nWriting BIND ACLs\n\nRFC 1912 - Common DNS operational and configuration errors\n\n1.5.4. Updating a BIND zone file\n\nIn certain situations, for example if an IP address of a server changes, you must update a zone file. If multiple DNS servers are responsible for a zone, perform this procedure only on the primary server. Other DNS servers that store a copy of the zone will receive the update through a zone transfer.\n\nPrerequisites\n\nThe zone is configured.\n\nThe named or named-chroot service is running.\n\nProcedure\n\nOptional: Identify the path to the zone file in the /etc/named.conf file:\n\noptions { ... directory \"/var/named\"; } zone \"example.com\" { ... file \"example.com.zone\"; };\n\nYou find the path to the zone file in the file statement in the zone’s definition. A relative path is relative to the directory set in directory in the options statement.\n\nEdit the zone file:\n\nMake the required changes.\n\nIncrement the serial number in the start of authority (SOA) record.\n\nImportant\n\nIf the serial number is equal to or lower than the previous value, secondary servers will not update their copy of the zone.\n\nVerify the syntax of the zone file:\n\n# named-checkzone example.com /var/named/example.com.zone zone example.com/IN: loaded serial 2022062802 OK\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nVerification\n\nQuery the record you have added, modified, or removed, for example:\n\n# dig +short @localhost A ns2.example.com 192.0.2.2\n\nThis example assumes that BIND runs on the same host and responds to queries on the localhost interface.\n\nAdditional resources\n\nThe SOA record in zone files\n\nSetting up a forward zone on a BIND primary server\n\nSetting up a reverse zone on a BIND primary server\n\n1.5.5. DNSSEC zone signing using the automated key generation and zone maintenance features\n\nYou can sign zones with domain name system security extensions (DNSSEC) to ensure authentication and data integrity. Such zones contain additional resource records. Clients can use them to verify the authenticity of the zone information.\n\nIf you enable the DNSSEC policy feature for a zone, BIND performs the following actions automatically:\n\nCreates the keys\n\nSigns the zone\n\nMaintains the zone, including re-signing and periodically replacing the keys.\n\nImportant\n\nTo enable external DNS servers to verify the authenticity of a zone, you must add the public key of the zone to the parent zone. Contact your domain provider or registry for further details on how to accomplish this.\n\nThis procedure uses the built-in default DNSSEC policy in BIND. This policy uses single ECDSAP256SHA key signatures. Alternatively, create your own policy to use custom keys, algorithms, and timings.\n\nPrerequisites\n\nThe zone for which you want to enable DNSSEC is configured.\n\nThe named or named-chroot service is running.\n\nThe server synchronizes the time with a time server. An accurate system time is important for DNSSEC validation.\n\nProcedure\n\nEdit the /etc/named.conf file, and add dnssec-policy default; to the zone for which you want to enable DNSSEC:\n\nzone \"example.com\" { ... dnssec-policy default; };\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nBIND stores the public key in the /var/named/K<zone_name>.+<algorithm>+<key_ID>.key file. Use this file to display the public key of the zone in the format that the parent zone requires:\n\nDS record format:\n\n# dnssec-dsfromkey /var/named/Kexample.com.+013+61141.key example.com. IN DS 61141 13 2 3E184188CF6D2521EDFDC3F07CFEE8D0195AACBD85E68BAE0620F638B4B1B027\n\nDNSKEY format:\n\n# grep DNSKEY /var/named/Kexample.com.+013+61141.key example.com. 3600 IN DNSKEY 257 3 13 sjzT3jNEp120aSO4mPEHHSkReHUf7AABNnT8hNRTzD5cKMQSjDJin2I3 5CaKVcWO1pm+HltxUEt+X9dfp8OZkg==\n\nRequest to add the public key of the zone to the parent zone. Contact your domain provider or registry for further details on how to accomplish this.\n\nVerification\n\nQuery your own DNS server for a record from the zone for which you enabled DNSSEC signing:\n\n# dig +dnssec +short @localhost A www.example.com 192.0.2.30 A 13 3 28800 20220718081258 20220705120353 61141 example.com. e7Cfh6GuOBMAWsgsHSVTPh+JJSOI/Y6zctzIuqIU1JqEgOOAfL/Qz474 M0sgi54m1Kmnr2ANBKJN9uvOs5eXYw==\n\nThis example assumes that BIND runs on the same host and responds to queries on the localhost interface.\n\nAfter the public key has been added to the parent zone and propagated to other servers, verify that the server sets the authenticated data (ad) flag on queries to the signed zone:\n\n# dig @localhost example.com +dnssec ... ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1 ...\n\nAdditional resources\n\nSetting up a forward zone on a BIND primary server\n\nSetting up a reverse zone on a BIND primary server\n\n1.6. Configuring zone transfers among BIND DNS servers\n\nZone transfers ensure that all DNS servers that have a copy of the zone use up-to-date data.\n\nPrerequisites\n\nOn the future primary server, the zone for which you want to set up zone transfers is already configured.\n\nOn the future secondary server, BIND is already configured, for example, as a caching name server.\n\nOn both servers, the named or named-chroot service is running.\n\nProcedure\n\nOn the existing primary server:\n\nCreate a shared key, and append it to the /etc/named.conf file:\n\n# tsig-keygen example-transfer-key | tee -a /etc/named.conf key \"example-transfer-key\" { algorithm hmac-sha256; secret \"q7ANbnyliDMuvWgnKOxMLi313JGcTZB5ydMW5CyUGXQ=\"; };\n\nThis command displays the output of the tsig-keygen command and automatically appends it to /etc/named.conf.\n\nYou will require the output of the command later on the secondary server as well.\n\nEdit the zone definition in the /etc/named.conf file:\n\nIn the allow-transfer statement, define that servers must provide the key specified in the example-transfer-key statement to transfer a zone:\n\nzone \"example.com\" { ... allow-transfer { key example-transfer-key; }; };\n\nAlternatively, use BIND access control list (ACL) nicknames in the allow-transfer statement.\n\nBy default, after a zone has been updated, BIND notifies all name servers which have a name server (NS) record in this zone. If you do not plan to add an NS record for the secondary server to the zone, you can, configure that BIND notifies this server anyway. For that, add the also-notify statement with the IP addresses of this secondary server to the zone:\n\nzone \"example.com\" { ... also-notify { 192.0.2.2; 2001:db8:1::2; }; };\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nOn the future secondary server:\n\nEdit the /etc/named.conf file as follows:\n\nAdd the same key definition as on the primary server:\n\nkey \"example-transfer-key\" { algorithm hmac-sha256; secret \"q7ANbnyliDMuvWgnKOxMLi313JGcTZB5ydMW5CyUGXQ=\"; };\n\nAdd the zone definition to the /etc/named.conf file:\n\nzone \"example.com\" { type slave; file \"slaves/example.com.zone\"; allow-query { any; }; allow-transfer { none; }; masters { 192.0.2.1 key example-transfer-key; 2001:db8:1::1 key example-transfer-key; }; };\n\nThese settings state:\n\nThis server is a secondary server (type slave) for the example.com zone.\n\nThe /var/named/slaves/example.com.zone file is the zone file. If you set a relative path, as in this example, this path is relative to the directory you set in directory in the options statement. To separate zone files for which this server is secondary from primary ones, you can store them, for example, in the /var/named/slaves/ directory.\n\nAny host can query this zone. Alternatively, specify IP ranges or ACL nicknames to limit the access.\n\nNo host can transfer the zone from this server.\n\nThe IP addresses of the primary server of this zone are 192.0.2.1 and 2001:db8:1::2. Alternatively, you can specify ACL nicknames. This secondary server will use the key named example-transfer-key to authenticate to the primary server.\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nOptional: Modify the zone file on the primary server and add an NS record for the new secondary server.\n\nVerification\n\nOn the secondary server:\n\nDisplay the systemd journal entries of the named service:\n\n# journalctl -u named ... Jul 06 15:08:51 ns2.example.com named[2024]: zone example.com/IN: Transfer started. Jul 06 15:08:51 ns2.example.com named[2024]: transfer of 'example.com/IN' from 192.0.2.1#53: connected using 192.0.2.2#45803 Jul 06 15:08:51 ns2.example.com named[2024]: zone example.com/IN: transferred serial 2022070101 Jul 06 15:08:51 ns2.example.com named[2024]: transfer of 'example.com/IN' from 192.0.2.1#53: Transfer status: success Jul 06 15:08:51 ns2.example.com named[2024]: transfer of 'example.com/IN' from 192.0.2.1#53: Transfer completed: 1 messages, 29 records, 2002 bytes, 0.003 secs (667333 bytes/sec)\n\nIf you run BIND in a change-root environment, use the journalctl -u named-chroot command to display the journal entries.\n\nVerify that BIND created the zone file:\n\n# ls -l /var/named/slaves/ total 4 -rw-r--r--. 1 named named 2736 Jul 6 15:08 example.com.zone\n\nNote that, by default, secondary servers store zone files in a binary raw format.\n\nQuery a record of the transferred zone from the secondary server:\n\n# dig +short @192.0.2.2 AAAA www.example.com 2001:db8:1::30\n\nThis example assumes that the secondary server you set up in this procedure listens on IP address 192.0.2.2.\n\nAdditional resources\n\nSetting up a forward zone on a BIND primary server\n\nSetting up a reverse zone on a BIND primary server\n\nWriting BIND ACLs\n\nUpdating a BIND zone file\n\n1.7. Configuring response policy zones in BIND to override DNS records\n\nUsing DNS blocking and filtering, administrators can rewrite a DNS response to block access to certain domains or hosts. In BIND, response policy zones (RPZs) provide this feature. You can configure different actions for blocked entries, such as returning an NXDOMAIN error or not responding to the query.\n\nIf you have multiple DNS servers in your environment, use this procedure to configure the RPZ on the primary server, and later configure zone transfers to make the RPZ available on your secondary servers.\n\nPrerequisites\n\nBIND is already configured, for example, as a caching name server.\n\nThe named or named-chroot service is running.\n\nProcedure\n\nEdit the /etc/named.conf file, and make the following changes:\n\nAdd a response-policy definition to the options statement:\n\noptions { ... response-policy { zone \"rpz.local\"; }; ... }\n\nYou can set a custom name for the RPZ in the zone statement in response-policy. However, you must use the same name in the zone definition in the next step.\n\nAdd a zone definition for the RPZ you set in the previous step:\n\nzone \"rpz.local\" { type master; file \"rpz.local\"; allow-query { localhost; 192.0.2.0/24; 2001:db8:1::/64; }; allow-transfer { none; }; };\n\nThese settings state:\n\nThis server is the primary server (type master) for the RPZ named rpz.local.\n\nThe /var/named/rpz.local file is the zone file. If you set a relative path, as in this example, this path is relative to the directory you set in directory in the options statement.\n\nAny hosts defined in allow-query can query this RPZ. Alternatively, specify IP ranges or BIND access control list (ACL) nicknames to limit the access.\n\nNo host can transfer the zone. Allow zone transfers only when you set up secondary servers and only for the IP addresses of the secondary servers.\n\nVerify the syntax of the /etc/named.conf file:\n\n# named-checkconf\n\nIf the command displays no output, the syntax is correct.\n\nCreate the /var/named/rpz.local file, for example, with the following content:\n\n$TTL 10m @ IN SOA ns1.example.com. hostmaster.example.com. ( 2022070601 ; serial number 1h ; refresh period 1m ; retry period 3d ; expire time 1m ) ; minimum TTL IN NS ns1.example.com. example.org IN CNAME . *.example.org IN CNAME . example.net IN CNAME rpz-drop. *.example.net IN CNAME rpz-drop.\n\nThis zone file:\n\nSets the default time-to-live (TTL) value for resource records to 10 minutes. Without a time suffix, such as h for hour, BIND interprets the value as seconds.\n\nContains the required start of authority (SOA) resource record with details about the zone.\n\nSets ns1.example.com as an authoritative DNS server for this zone. To be functional, a zone requires at least one name server (NS) record. However, to be compliant with RFC 1912, you require at least two name servers.\n\nReturn an NXDOMAIN error for queries to example.org and hosts in this domain.\n\nDrop queries to example.net and hosts in this domain.\n\nFor a full list of actions and examples, see IETF draft: DNS Response Policy Zones (RPZ).\n\nVerify the syntax of the /var/named/rpz.local file:\n\n# named-checkzone rpz.local /var/named/rpz.local zone rpz.local/IN: loaded serial 2022070601 OK\n\nReload BIND:\n\n# systemctl reload named\n\nIf you run BIND in a change-root environment, use the systemctl reload named-chroot command to reload the service.\n\nVerification\n\nAttempt to resolve a host in example.org, that is configured in the RPZ to return an NXDOMAIN error:\n\n# dig @localhost www.example.org ... ;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 30286 ...\n\nThis example assumes that BIND runs on the same host and responds to queries on the localhost interface.\n\nAttempt to resolve a host in the example.net domain, that is configured in the RPZ to drop queries:\n\n# dig @localhost www.example.net ... ;; connection timed out; no servers could be reached ...\n\nAdditional resources\n\nIETF draft: DNS Response Policy Zones (RPZ)\n\n1.8. Recording DNS queries by using dnstap\n\nAs a network administrator, you can record Domain Name System (DNS) details to analyze DNS traffic patterns, monitor DNS server performance, and troubleshoot DNS issues. If you want an advanced way to monitor and log details of incoming name queries, use the dnstap interface that records sent messages from the named service. You can capture and record DNS queries to collect information about websites or IP addresses.\n\nPrerequisites\n\nThe bind-9.16.15-3 package or a later version is installed.\n\nWarning\n\nIf you already have a BIND version installed and running, adding a new version of BIND will overwrite the existing version.\n\nProcedure\n\nEnable dnstap and the target file by editing the /etc/named.conf file in the options block:\n\noptions { # ... dnstap { all; }; # Configure filter dnstap-output file \"/var/named/data/dnstap.bin\"; versions 2; # ... }; # end of options\n\nTo specify which types of DNS traffic you want to log, add dnstap filters to the dnstap block in the /etc/named.conf file. You can use the following filters:\n\nauth - Authoritative zone response or answer.\n\nclient - Internal client query or answer.\n\nforwarder - Forwarded query or response from it.\n\nresolver - Iterative resolution query or response.\n\nupdate - Dynamic zone update requests.\n\nall - Any from the above options.\n\nquery or response - If you do not specify a query or a response keyword, dnstap records both.\n\nNote\n\nThe dnstap filter contains multiple definitions delimited by a ; in the dnstap {} block with the following syntax: dnstap { ( all | auth | client | forwarder | resolver | update ) [ ( query | response ) ]; …​ };\n\nTo customize the behavior of the dnstap utility on the recorded packets, modify the dnstap-output option by providing additional parameters, as follows:\n\nsize (unlimited | <size>) - Enable automatic rolling over of the dnstap file when its size reaches the specified limit.\n\nversions (unlimited | <integer>) - Specify the number of automatically rolled files to keep.\n\nsuffix (increment | timestamp ) - Choose the naming convention for rolled out files. By default, the increment starts with .0. Alternatively, you can use the UNIX timestamp by setting the timestamp value.\n\nThe following example requests auth responses only, client queries, and both queries and responses of dynamic updates:\n\nExample: dnstap {auth response; client query; update;};\n\nTo apply your changes, restart the named service:\n\n# systemctl restart named.service\n\nConfigure a periodic rollout for active logs\n\nIn the following example, the cron scheduler runs the content of the user-edited script once a day. The roll option with the value 3 specifies that dnstap can create up to three backup log files. The value 3 overrides the version parameter of the dnstap-output variable, and limits the number of backup log files to three. Additionally, the binary log file is moved to another directory and renamed, and it never reaches the .2 suffix, even if three backup log files already exist. You can skip this step if automatic rolling of binary logs based on size limit is sufficient.\n\nExample: sudoedit /etc/cron.daily/dnstap #!/bin/sh rndc dnstap -roll 3 mv /var/named/data/dnstap.bin.1 /var/log/named/dnstap/dnstap-$(date -I).bin # use dnstap-read to analyze saved logs sudo chmod a+x /etc/cron.daily/dnstap\n\nHandle and analyze logs in a human-readable format by using the dnstap-read utility:\n\nIn the following example, the dnstap-read utility prints the output in the YAML file format.\n\nExample: dnstap-read -y [file-name]"
    }
}