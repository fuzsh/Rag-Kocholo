{
    "id": "yago_17423_3",
    "rank": 35,
    "data": {
        "url": "https://www.usna.edu/Users/cs/fknoll/SD211/lab/l08/",
        "read_more_link": "",
        "language": "en",
        "title": "SD211: Netflix Lab",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.usna.edu/Users/cs/fknoll/SD211/lab/l08/netflixrainbow.jpg",
            "https://www.usna.edu/Users/cs/fknoll/SD211/lab/l08/rec.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Lab 8: Netflix Recommender\n\nToday's lab writes two programs. It builds a basic Netflix query tool, and then a show/movie recommendation system based on the user's favorite shows. The data about Netflix shows comes in two different files, and the information is linked between them through unique identifiers. This is a common data challenge when you have information scattered across different sources. IDs link the pieces across the data files. We'll practice using Lists and Functions to accomplish our goals.\n\nIn today's lab, you will perform ... Data Processing.\n\nStep 0: Folder and Files\n\nCreate a new folder lab08 inside your SD211 folder for this lab. Create an initial Python program called netflix.py.\n\nDownload two files: titles.csv and credits.csv\n\nOpen the files and make sure you understand how they're organized. Note that each show title has an ID which appears in the credits file with the actors. Think about it: how would I find all actors for a show like \"Stranger Things\"?\n\nAPI: Utility Functions (50%)\n\nCreate a program called netflix.py and copy this starter code into it. This will be your Netflix function library. We wrote the initial function definitions for you. You now fill them in as described below. When finished, run the program and pass its tests.\n\nAfter writing these functions, run netflix.py and make sure you pass all the tests!\n\nProgram 1: A Netflix Lookup Program (75%)\n\nCreate a blank program lookup.py. Import your above library into it:\n\nimport netflix\n\nNow write your lookup program to allow the user to ask about shows and actors, mimicking the interaction shown here, and using your functions where appropriate. You must use these functions. You will not receive full credit if you open files directly in this lookup.py program.\n\n> python3 lookup.py Welcome to the Netflix lookup! Query? actors stranger things <-- search \"stranger things\" Winona Ryder David Harbour Millie Bobby Brown Finn Wolfhard Gaten Matarazzo Caleb McLaughlin Noah Schnapp Sadie Sink Natalia Dyer Charlie Heaton Joe Keery Maya Hawke Brett Gelman Priah Ferguson Matthew Modine Paul Reiser Jamie Campbell Bower Query? shows winona ryder \"Girl <-- got cut off by the comma in the title; you can ignore Little Women Stranger Things Destination Wedding Sarah Cooper: Everything's Fine Query? actors destination wedding Winona Ryder Keanu Reeves DJ Dallenbach Ted Dubost D. Rosh Wright Greg Lucey Curt Dubost Donna Lynn Jones Victor Levin Query? done\n\nProgram 2: Netflix Recommendations (100%)\n\nStart a blank program called recommend.py. Import your functions from netflix.py.\n\nYour program will make show recommendations based on the user's favorite shows. Below is how your program should appear to the user, and we describe its details after that. The interaction should look just like this:\n\n> python3 recommend.py List some of your favorite movies and shows on Netflix... Title: breaking bad Title: ozark Title: done I recommend the following shows! Breaking Bad Ozark A Farewell to Ozark El Camino: A Breaking Bad Movie The Road to El Camino: Behind the Scenes of El Camino: A Breaking Bad Movie Better Call Saul Total Recall Time Share Thunder Force The Sweetest Thing\n\nYou will use your netflix API to help with this. Again, you will not receive full credit if you open a file directly in this program. Let me step you through the process, although perhaps you can pause and think about it yourself first!\n\nYour program first asks the user for a list of Netflix shows that they like. Loop until \"done\". You'll save them in a list. For instance:\n\n[ 'breaking bad', 'ozark' ]\n\nYou'll then create one big list of all actors in each of their entered shows. It's ok to have repeat names in your list, for instance, if the same actor was in several of the user's favorites. No repeats in our example here, though:\n\n['Bryan Cranston', 'Aaron Paul', 'Anna Gunn', 'Dean Norris', 'Jonathan Banks', 'Bob Odenkirk', 'Betsy Brandt', 'RJ Mitte', 'Jason Bateman', 'Laura Linney', 'Sofia Hublitz', 'Skylar Gaertner', 'Julia Garner', 'Charlie Tahan']\n\nOnce you have these actors, you'll then lookup all shows for each actor in the list, creating yet another list of all shows for all actors. Again, repeats are ok! In fact, you want repeats so you can see which shows have more of their actors.\n\n['Breaking Bad', 'Argo', 'Contagion', 'Total Recall', 'Kung Fu Panda 3', 'El Camino: A Breaking Bad Movie', 'Animal', 'Breaking Bad', 'BoJack Horseman', 'BoJack Horseman Christmas Special', 'El Camino: A Breaking Bad Movie', 'The Road to El Camino: Behind the Scenes of El Camino: A Breaking Bad Movie', 'Breaking Bad', 'Starship Troopers', 'Gattaca', 'Breaking Bad', 'How Do You Know', 'Linewatch', 'The Frozen Ground', 'Beirut', 'The Book of Henry', 'Girlboss', 'Scary Stories to Tell in the Dark', 'Breaking Bad', 'Better Call Saul', 'Term Life', 'Skylanders Academy', 'Mudbound', 'El Camino: A Breaking Bad Movie', 'The Road to El Camino: Behind the Scenes of El Camino: A Breaking Bad Movie', 'A Tale Dark & Grimm', 'Breaking Bad', 'Better Call Saul', 'W/ Bob & David', \"Girlfriend's Day\", 'Dolemite Is My Name', 'Breaking Bad', 'Straight Up', 'Breaking Bad', 'Time Share', 'Not a Game', 'Arrested Development', 'Hancock', 'The Sweetest Thing', 'Starsky & Hutch', 'The Gift', 'Ozark', 'Thunder Force', 'A Farewell to Ozark', 'Love Actually', 'Arthur Christmas', 'Nocturnal Animals', 'Ozark', 'Tales of the City', 'A Farewell to Ozark', 'Ozark', 'A Farewell to Ozark', 'Ozark', 'A Farewell to Ozark', 'Ozark', 'Inventing Anna', 'A Farewell to Ozark', 'I Am Legend', 'Blue Jasmine', 'Ozark', 'The Land of Steady Habits', 'Poms', 'A Farewell to Ozark']\n\nYou now have a big list of shows! You want to sort these by relevance. Which are repeated? If a show appears many times, then the user will probably like it. We provided you a function in your netflix.py starter code called sort_list_by_frequency(list) that does this for you. It returns a new list of strings, sorted by which occurred the most:\n\nimport netflix sortedlist = netflix.sort_list_by_frequency(yourlist)\n\nPrint the first TEN shows in the returned sorted list. If there are less than ten, don't crash your program!\n\n(optional) Change that final Top 10 print loop so it doesn't print the user's original show inputs, but still prints 10 shows total. This is actually slightly tricky.\n\nYour program should match EXACTLY the output example above, as well as work on other examples!\n\n(optional, extra credit) Use Dictionaries\n\nThis lab intentionally avoided dictionaries so you would focus on functions and multi-file programs. You may have noticed that each function in our Netflix API is opening a file every time you call it. That's very inefficient. You really just want to open the files once, and save the information you need in memory. The functions then access what was previously read.\n\nIn this section, copy your netflix.py to netflix-dict.py and make changes to netflix-dict.py so that you only open the credits.csv and titles.csv files once. Read their data into dictionaries (actor names as keys, IDs as values, and vice versa). Change the functions so that they use the dictionaries instead of opening files.\n\nWhat to turn in\n\nYour three programs (netflix.py, lookup.py, and recommend.py).\n\nsubmit -c=sd211 -p=lab08 netflix.py lookup.py recommend.py"
    }
}