{
    "id": "correct_foundationPlace_00068_3",
    "rank": 87,
    "data": {
        "url": "https://owasp.org/www-project-api-security/",
        "read_more_link": "",
        "language": "en",
        "title": "OWASP API Security Project",
        "top_image": "https://owasp.org/www--site-theme/favicon.ico",
        "meta_img": "https://owasp.org/www--site-theme/favicon.ico",
        "images": [
            "https://owasp.org/assets/images/logo.png",
            "https://owasp.org/assets/images/logo.png",
            "https://owasp.org/www-project-api-security/assets/images/sponsors/cequence-security.png",
            "https://owasp.org/www-project-api-security/assets/images/sponsors/checkmarx.png",
            "https://owasp.org/www-project-api-security/assets/images/sponsors/equixly.png",
            "https://owasp.org/www-project-api-security/assets/images/sponsors/impart.png",
            "https://owasp.org/www-project-api-security/assets/images/sponsors/salt.png",
            "https://owasp.org/www-project-api-security/assets/images/sponsors/traceable.png",
            "https://owasp.org/www-project-api-security/assets/images/roadmap.png",
            "https://raw.githubusercontent.com/OWASP/www--site-theme/master/assets/images/common/owasp_documentation_project.svg?sanitize=true",
            "https://owasp.org/www-project-api-security/assets/images/by-sa.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "OWASP API Security Project on the main website for The OWASP Foundation. OWASP is a nonprofit foundation that works to improve the security of software.",
        "meta_lang": "en",
        "meta_favicon": "https://owasp.org/www--site-theme/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://owasp.org/www-project-api-security/",
        "text": "What is API Security?\n\nA foundational element of innovation in today’s app-driven world is the API. From banks, retail and transportation to IoT, autonomous vehicles and smart cities, APIs are a critical part of modern mobile, SaaS and web applications and can be found in customer-facing, partner-facing and internal applications. By nature, APIs expose application logic and sensitive data such as Personally Identifiable Information (PII) and because of this have increasingly become a target for attackers. Without secure APIs, rapid innovation would be impossible.\n\nAPI Security focuses on strategies and solutions to understand and mitigate the unique vulnerabilities and security risks of Application Programming Interfaces (APIs).\n\nAPI Security Top 10 2023\n\nHere is a sneak peek of the 2023 version:\n\nAPI1:2023 - Broken Object Level Authorization\n\nAPIs tend to expose endpoints that handle object identifiers, creating a wide attack surface of Object Level Access Control issues. Object level authorization checks should be considered in every function that accesses a data source using an ID from the user. Continue reading.\n\nAPI2:2023 - Broken Authentication\n\nAuthentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user’s identities temporarily or permanently. Compromising a system’s ability to identify the client/user, compromises API security overall. Continue reading.\n\nAPI3:2023 - Broken Object Property Level Authorization\n\nThis category combines API3:2019 Excessive Data Exposure and API6:2019 - Mass Assignment, focusing on the root cause: the lack of or improper authorization validation at the object property level. This leads to information exposure or manipulation by unauthorized parties. Continue reading.\n\nAPI4:2023 - Unrestricted Resource Consumption\n\nSatisfying API requests requires resources such as network bandwidth, CPU, memory, and storage. Other resources such as emails/SMS/phone calls or biometrics validation are made available by service providers via API integrations, and paid for per request. Successful attacks can lead to Denial of Service or an increase of operational costs. Continue reading.\n\nAPI5:2023 - Broken Function Level Authorization\n\nComplex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers can gain access to other users’ resources and/or administrative functions. Continue reading.\n\nAPI6:2023 - Unrestricted Access to Sensitive Business Flows\n\nAPIs vulnerable to this risk expose a business flow - such as buying a ticket, or posting a comment - without compensating for how the functionality could harm the business if used excessively in an automated manner. This doesn’t necessarily come from implementation bugs. Continue reading.\n\nAPI7:2023 - Server Side Request Forgery\n\nServer-Side Request Forgery (SSRF) flaws can occur when an API is fetching a remote resource without validating the user-supplied URI. This enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN. Continue reading.\n\nAPI8:2023 - Security Misconfiguration\n\nAPIs and the systems supporting them typically contain complex configurations, meant to make the APIs more customizable. Software and DevOps engineers can miss these configurations, or don’t follow security best practices when it comes to configuration, opening the door for different types of attacks. Continue reading.\n\nAPI9:2023 - Improper Inventory Management\n\nAPIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. A proper inventory of hosts and deployed API versions also are important to mitigate issues such as deprecated API versions and exposed debug endpoints. Continue reading.\n\nAPI10:2023 - Unsafe Consumption of APIs\n\nDevelopers tend to trust data received from third-party APIs more than user input, and so tend to adopt weaker security standards. In order to compromise APIs, attackers go after integrated third-party services instead of trying to compromise the target API directly. Continue reading.\n\nLicensing\n\nThe OWASP API Security Project documents are free to use!"
    }
}