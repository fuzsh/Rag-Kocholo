{
    "id": "wrong_mix_random_award_00146_2",
    "rank": 55,
    "data": {
        "url": "https://cloud.google.com/chronicle/docs/event-processing/data-enrichment",
        "read_more_link": "",
        "language": "en",
        "title": "How Google Security Operations enriches event and entity data",
        "top_image": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "meta_img": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v85aee14ad439a087d9e958f223735d57cdfda16a7f6497504c9ce4a10dce0396/cloud/images/cloud-logo.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v85aee14ad439a087d9e958f223735d57cdfda16a7f6497504c9ce4a10dce0396/cloud/images/cloud-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v85aee14ad439a087d9e958f223735d57cdfda16a7f6497504c9ce4a10dce0396/cloud/images/favicons/onecloud/favicon.ico",
        "meta_site_name": "Google Cloud",
        "canonical_link": "https://cloud.google.com/chronicle/docs/event-processing/data-enrichment",
        "text": "This document describes how Google Security Operations enriches data and the Unified Data Model (UDM) fields where data is stored.\n\nTo enable a security investigation, Google Security Operations ingests contextual data from different sources, performs analysis on the data, and provides additional context about artifacts in a customer environment. Analysts can use contextually enriched data in Detection Engine rules, investigative searches, or reports.\n\nGoogle Security Operations performs the following types of enrichment:\n\nEnriches entities by using the entity graph and merging.\n\nCalculates and enriches each entity with a prevalence statistic that indicates its popularity in the environment.\n\nCalculates the first time certain entity types were seen in the environment or the most recent time.\n\nEnriches entities with information from Safe Browsing threat lists.\n\nEnriches events with geolocation data.\n\nEnriches entities with WHOIS data.\n\nEnriches events with VirusTotal file metadata.\n\nEnriches entities with VirusTotal relationship data.\n\nIngest and store Google Cloud Threat Intelligence data.\n\nEnriched data from WHOIS, Safe Browsing, GCTI Threat Intelligence, VirusTotal metadata, and VirusTotal relationship are identified by event_type, product_name, and vendor_name. When creating a rule that uses this enriched data, we recommend that you include a filter in the rule that identifies the specific enrichment type to include. This filter helps improve performance of the rule. For example, include the following filter fields in the events section of the rule that joins WHOIS data.\n\n$enrichment.graph.metadata.entity_type = \"DOMAIN_NAME\" $enrichment.graph.metadata.product_name = \"WHOISXMLAPI Simple Whois\" $enrichment.graph.metadata.vendor_name = \"WHOIS\"\n\nEnrich entities by using the entity graph and merging\n\nThe entity graph identifies relationships between entities and resources in your environment. When entities from different sources are ingested into Google Security Operations, the entity graph maintains an adjacency list based on the relationship between the entities. The entity graph performs context enrichment by performing deduplication and merging.\n\nDuring deduplication, redundant data is eliminated and intervals are formed to create a common entity. For example, consider two entities e1 and e2 with timestamps t1 and t2 respectively. The entities e1 and e2 are deduplicated and the timestamps that are different are not used during deduplication. The following fields are not used during deduplication:\n\ncollected_timestamp\n\ncreation_timestamp\n\ninterval\n\nDuring merging, relationships between entities are formed for a time interval of one day. For example, consider an entity record of user A who has access to a Cloud Storage bucket. There is another entity record of user A who owns a device. After merging, these two entities result in a single entity user A that has two relations. One relation is that user A has access to the Cloud Storage bucket and the other relation is that user A owns the device. Google Security Operations performs a five-day lookback when it creates entity context data. This handles late arriving data and creates an implicit time to live on entity context data.\n\nGoogle Security Operations uses aliasing to enrich the telemetry data and uses entity graphs to enrich the entities. The detection engine rules join the merged entities against the enriched telemetry data to provide context-aware analytics.\n\nAn event that contains an entity noun is considered as an entity. Here are some event types and their corresponding entity types:\n\nASSET_CONTEXT corresponds to ASSET.\n\nRESOURCE_CONTEXT corresponds to RESOURCE.\n\nUSER_CONTEXT corresponds to USER.\n\nGROUP_CONTEXT corresponds to GROUP.\n\nThe entity graph distinguishes between contextual data and indicators of compromise (IOC) using the threat information.\n\nWhen you use contextually enriched data, consider the following entity graph behavior:\n\nDon't add intervals in the entity, and instead let the entity graph create intervals. This is because intervals are generated during deduplication unless otherwise specified.\n\nIf the intervals are specified, only the same events are deduplicated, and the most recent entity is retained.\n\nTo ensure that live rules and retrohunts work as expected, entities must be ingested at least once daily.\n\nIf entities are not ingested daily and ingested only once in two or more days, live rules might work as expected, however, retrohunts might lose context of the event.\n\nIf entities are ingested more than once daily, then the entity is deduplicated to a single entity.\n\nIf the event data is missing for a day, the data of the past day is used temporarily to ensure that live rules work fine.\n\nThe entity graph also merges events having similar identifiers to get a consolidated view of the data. This merging happens based on the following list of identifiers:\n\nAsset\n\nentity.asset.product_object_id\n\nentity.asset.hostname\n\nentity.asset.asset_id\n\nentity.asset.mac\n\nUser\n\nentity.user.product_object_id\n\nentity.user.userid\n\nentity.user.windows_sid\n\nentity.user.email_addresses\n\nentity.user.employee_id\n\nResource\n\nentity.resource.product_object_id\n\nentity.resource.name\n\nGroup\n\nentity.group.product_object_id\n\nentity.group.email_addresses\n\nentity.group.windows_sid\n\nCalculate prevalence statistics\n\nGoogle Security Operations performs statistical analysis on existing and incoming data and enriches entity context records with prevalence-related metrics.\n\nPrevalence is a numeric value which indicates how popular an entity is. Popularity is defined by the number of assets accessing an artifact, such as a domain, file hash or IP address. The larger the number, the more popular the entity. For example, google.com has high prevalence values because it is accessed frequently. If a domain is accessed infrequently, it will have lower prevalence values. More popular entities are usually less likely to be malicious.\n\nThese enriched values are supported for domain, IP, and file (hash). The values are calculated and stored in the following fields.\n\nPrevalence statistics for each entity are updated each day. Values are stored in a separate entity context that can be used by Detection Engine, but is not shown in Google Security Operations investigative views and UDM search.\n\nThe following fields can be used when creating Detection Engine rules.\n\nEntity type UDM fields Domain entity.domain.prevalence.day_count\n\nentity.domain.prevalence.day_max\n\nentity.domain.prevalence.day_max_sub_domains\n\nentity.domain.prevalence.rolling_max\n\nentity.domain.prevalence.rolling_max_sub_domains File (Hash) entity.file.prevalence.day_count\n\nentity.file.prevalence.day_max\n\nentity.file.prevalence.rolling_max IP address entity.artifact.prevalence.day_count\n\nentity.artifact.prevalence.day_max\n\nentity.artifact.prevalence.rolling_max\n\nThe day_max and rolling_max values are calculated differently. The fields are calculated as follows:\n\nday_max is calculated as the maximum prevalence score for the artifact during the day, where a day is defined as 12:00:00 AM - 11:59:59 PM UTC.\n\nrolling_max is calculated as the maximum per day prevalence score (i.e. day_max) for the artifact over the previous 10 day window.\n\nday_count is used to calculate rolling_max and is always the value 10.\n\nWhen calculated for a domain, the difference between day_max versus day_max_sub_domains (and rolling_max versus rolling_max_sub_domains) is as follows:\n\nrolling_max and day_max represent the number of daily unique internal IP addresses accessing a given domain (excluding subdomains).\n\nrolling_max_sub_domains and day_max_sub_domains represent the number of unique internal IP addresses accessing a given domain (including subdomains).\n\nPrevalence statistics are calculated on newly ingested entity data. Calculations are not performed retroactively on previously ingested data. It takes approximately 36 hours for the statistics to be calculated and stored.\n\nCalculate the first-seen and last-seen time of entities\n\nGoogle Security Operations performs statistical analysis on incoming data and enriches entity context records with the first-seen and last-seen times of an entity. The first_seen_time field stores the date and time when the entity was first seen in the customer environment. The last_seen_time field stores the date and time of the most recent observation.\n\nBecause multiple indicators (UDM fields) can identify an asset or a user, the first-seen time is the first time any of the indicators that identify the user or asset was seen in the customer environment.\n\nAll UDM fields that describe an asset are the following:\n\nentity.asset.hostname\n\nentity.asset.ip\n\nentity.asset.mac\n\nentity.asset.asset_id\n\nentity.asset.product_object_id\n\nAll UDM fields that describe a user are the following:\n\nentity.user.windows_sid\n\nentity.user.product_object_id\n\nentity.user.userid\n\nentity.user.employee_id\n\nentity.user.email_addresses\n\nThe first-seen time and last-seen time enable an analyst to correlate certain activity that occurred after a domain, file (hash), asset, user, or IP address was first seen or that stopped occurring after the domain, file (hash), or IP address was last seen.\n\nThe first_seen_time and last_seen_time fields are populated with entities that describe a domain, IP address, and file (hash). For entities that describe a user or asset, only the first_seen_time field is populated. These values are not calculated for entities that describe other types, such as a group or resource.\n\nThe statistics are calculated for each entity across all namespaces. Google Security Operations does not calculate the statistics for each entity within individual namespaces. These statistics are not currently exported to theGoogle Security Operations events schema in BigQuery.\n\nThe enriched values are calculated and stored in the following UDM fields:\n\nEntity type UDM fields Domain entity.domain.first_seen_time\n\nentity.domain.last_seen_time File (hash) entity.file.first_seen_time\n\nentity.file.last_seen_time IP address entity.artifact.first_seen_time\n\nentity.artifact.last_seen_time Asset entity.asset.first_seen_time User entity.user.first_seen_time\n\nEnrich events with geolocation data\n\nIncoming log data can include external IP addresses without corresponding location information. This is common when an event is logging information about device activity that is not in an enterprise network. For example, a login event to a cloud service would contain a source or client IP address based on the external IP address of a device returned by the carrier NAT.\n\nGoogle Security Operations provides geolocation-enriched data for external IP addresses to enable more powerful rule detections and greater context for investigations. For example, Google Security Operations might use an external IP address to enrich the event with information about the country (such as the United States), a specific state (such as Alaska), and the network the IP address is in (such as the ASN and carrier name).\n\nGoogle Security Operations uses location data supplied by Google to provide an approximate geographic location and network information for an IP address. You can write Detection Engine rules against these fields in the events. The enriched event data is also exported to BigQuery where it can be used in Google Security Operations dashboards and reporting.\n\nThe following IP addresses are not enriched:\n\nRFC 1918 private IP address spaces because they are internal to the enterprise network.\n\nRFC 5771 multicast IP address space because multicast addresses do not belong to a single location.\n\nIPv6 Unique Local addresses.\n\nGoogle Cloud service IP addresses. Exceptions are Google Cloud Compute Engine external IP addresses, which are enriched.\n\nGoogle Security Operations enriches the following UDM fields with geolocation data:\n\nprincipal\n\ntarget\n\nsrc\n\nobserver\n\nType of data UDM field Location (for example, United States) ( principal | target | src | observer ).ip_geo_artifact.location.country_or_region State (for example, New York) ( principal | target | src | observer ).ip_geo_artifact.location.state Longitude ( principal | target | src | observer ).ip_geo_artifact.location.region_coordinates.longitude Latitude ( principal | target | src | observer ).ip_geo_artifact.location.region_coordinates.latitude ASN (autonomous system number) ( principal | target | src | observer ).ip_geo_artifact.network.asn Carrier name ( principal | target | src | observer ).ip_geo_artifact.network.carrier_name DNS domain ( principal | target | src | observer ).ip_geo_artifact.network.dns_domain Organization name ( principal | target | src | observer ).ip_geo_artifact.network.organization_name\n\nThe following example shows the type of geographic information that would be added to a UDM event with an IP address tagged to the Netherlands:\n\nUDM field Value principal.ip_geo_artifact.location.country_or_region Netherlands principal.ip_geo_artifact.location.region_coordinates.latitude 52.132633 principal.ip_geo_artifact.location.region_coordinates.longitude 5.291266 principal.ip_geo_artifact.network.asn 8455 principal.ip_geo_artifact.network.carrier_name schuberg philis\n\nInconsistencies\n\nGoogle proprietary IP geolocation technology uses a combination of networking data and other inputs and methods to provide IP address location and network resolution for our users. Other organizations may use different signals or methods, which might occasionally lead to different results.\n\nIf cases arise in which you experience an inconsistency in IP geolocation results that Google provides, please open a customer support case, so that we can investigate and, if appropriate, correct our records moving forward.\n\nEnrich entities with information from Safe Browsing threat lists\n\nGoogle Security Operations ingests data from Safe Browsing related to file hashes. The data for each file is stored as an entity and provides additional context about the file. Analysts can create Detection Engine rules that query against this entity context data to build context-aware analytics.\n\nThe following information is stored with the entity context record.\n\nUDM field Description entity.metadata.product_entity_id A unique identifier for the entity. entity.metadata.entity_type This value is FILE, indicating that the entity describes a file. entity.metadata.collected_timestamp The date and time that the entity was observed or the event occurred. entity.metadata.interval Stores the start time and end time that this data is valid. Because threat list content changes over time, the start_time and end_time reflects the time interval during which the data about the entity is valid. For example, a file hash was observed to be malicious or suspicious between start_time and end_time. entity.metadata.threat.category This is the Google Security Operations SecurityCategory. This is set to one or more of the following values:\n\nSOFTWARE_MALICIOUS: indicates that the threat is related to malware.\n\nSOFTWARE_PUA: indicates that the threat is related to unwanted software.\n\nentity.metadata.threat.severity This is the Google Security Operations ProductSeverity. If the value is CRITICAL, this indicates the artifact appears malicious. If the value is not specified, there is not enough confidence to indicate that the artifact is malicious. entity.metadata.product_name Stores the value Google Safe Browsing. entity.file.sha256 The SHA256 hash value for the file.\n\nEnrich entities with WHOIS data\n\nGoogle Security Operations ingests WHOIS data daily. During the ingestion of incoming customer device data, Google Security Operations evaluates domains in customer data against the WHOIS data. When there is a match, Google Security Operations stores the related WHOIS data with the entity record for the domain. For each entity, where entity.metadata.entity_type = DOMAIN_NAME, Google Security Operations enriches the entity with information from WHOIS.\n\nGoogle Security Operations populates enriched WHOIS data into the following fields in the entity record:\n\nentity.domain.admin.attribute.labels\n\nentity.domain.audit_update_time\n\nentity.domain.billing.attribute.labels\n\nentity.domain.billing.office_address.country_or_region\n\nentity.domain.contact_email\n\nentity.domain.creation_time\n\nentity.domain.expiration_time\n\nentity.domain.iana_registrar_id\n\nentity.domain.name_server\n\nentity.domain.private_registration\n\nentity.domain.registrant.company_name\n\nentity.domain.registrant.office_address.state\n\nentity.domain.registrant.office_address.country_or_region\n\nentity.domain.registrant.email_addresses\n\nentity.domain.registrant.user_display_name\n\nentity.domain.registrar\n\nentity.domain.registry_data_raw_text\n\nentity.domain.status\n\nentity.domain.tech.attribute.labels\n\nentity.domain.update_time\n\nentity.domain.whois_record_raw_text\n\nentity.domain.whois_server\n\nentity.domain.zone\n\nFor a description of these fields, see the Unified Data Model field list document.\n\nIngest and store Google Cloud Threat Intelligence data\n\nGoogle Security Operations ingests data from Google Cloud Threat Intelligence (GCTI) data sources that provide you with contextual information you can use when investigating activity in your environment. You can query the following data sources:\n\nGCTI Tor Exit Nodes: IP addresses that are known Tor exit nodes.\n\nGCTI Benign Binaries: files that are either part of the operating system original distribution or were updated by an official operating system patch. Some official operating system binaries that have been abused by an adversary through activity common in living-off-the-land attacks are excluded from this data source, such as those focused on initial entry vectors.\n\nGCTI Remote Access Tools: files that have frequently been used by malicious actors. These tools are generally legitimate applications that are sometimes abused to remotely connect to compromised systems.\n\nThis contextual data is stored globally as entities. You can query the data using detection engine rules. Include the following UDM fields and values in the rule to query these global entities:\n\ngraph.metadata.vendor_name = Google Cloud Threat Intelligence\n\ngraph.metadata.product_name = GCTI Feed\n\nIn this document, the placeholder <variable_name> represents the unique variable name used in a rule to identify a UDM record.\n\nTimed versus timeless Google Cloud Threat Intelligence data sources\n\nGoogle Cloud Threat Intelligence data sources are either timed or timeless.\n\nTimed data sources have a time range associated with each entry. This means that if a detection is generated on day 1, on any day in the future the same detection is expected to be generated for day 1 during a retro-hunt.\n\nTimeless data sources have no time range associated with them. This is because only the latest set of data is what should be considered. Timeless data sources are frequently used for data such as file hashes that are not expected to change. If no detection is generated on day 1, on day 2 a detection might be generated for day 1 during a retro-hunt because a new entry was added.\n\nData about Tor exit node IP addresses\n\nGoogle Security Operations ingests and stores IP addresses that are known Tor exit nodes. Tor exit nodes are points at which traffic exits the Tor network. Information ingested from this data source is stored in the following UDM fields. Data in this source is timed.\n\nUDM field Description <variable_name>.graph.metadata.vendor_name Stores the value Google Cloud Threat Intelligence. <variable_name>.graph.metadata.product_name Stores the value GCTI Feed. <variable_name>.graph.metadata.threat.threat_feed_name Stores the value Tor Exit Nodes. <variable_name>.graph.entity.artifact.ip Stores the IP address ingested from the GCTI data source.\n\nData about benign operating system files\n\nGoogle Security Operations ingests and stores file hashes from the GCTI Benign Binaries data source. Information ingested from this data source is stored in the following UDM fields. Data in this source is timeless.\n\nUDM field Description <variable_name>.graph.metadata.vendor_name Stores the value Google Cloud Threat Intelligence. <variable_name>.graph.metadata.product_name Stores the value GCTI Feed. <variable_name>.graph.metadata.threat.threat_feed_name Stores the value Benign Binaries. <variable_name>.graph.entity.file.sha256 Stores the SHA256 hash value of the file. <variable_name>.graph.entity.file.sha1 Stores the SHA1 hash value of the file. <variable_name>.graph.entity.file.md5 Stores the MD5 hash value of the file.\n\nRemote access tools include file hashes for known remote access tools such as VNC clients that have frequently been used by malicious actors. These tools are generally legitimate applications that are sometimes abused to remotely connect to compromised systems. Information ingested from this data source is stored in the following UDM fields. Data in this source is timeless.\n\nUDM field Description .graph.metadata.vendor_name Stores the value Google Cloud Threat Intelligence. .graph.metadata.product_name Stores the value GCTI Feed. .graph.metadata.threat.threat_feed_name Stores the value Remote Access Tools. .graph.entity.file.sha256 Stores the SHA256 hash value of the file. .graph.entity.file.sha1 Stores the SHA1 hash value of the file. .graph.entity.file.md5 Stores the MD5 hash value of the file.\n\nEnrich events with VirusTotal file metadata\n\nGoogle Security Operations enriches file hashes into UDM events and provides additional context during an investigation. UDM events are enriched through hash aliasing in a customer environment. Hash aliasing combines all types of file hashes and provides information about a file hash during a search.\n\nThe integration of VirusTotal file metadata and relationship enrichment with Google SecOps can be used to identify patterns of malicious activity and to track malware movements across a network.\n\nA raw log provides limited information about the file. VirusTotal enriches the event with file metadata to provide a dump of bad hashes along with metadata about the bad file. The metadata includes information such as filenames, types, imported functions, and tags. You can use this information in the UDM search and detection engine with YARA-L to understand bad file events and in general during threat hunting. An example use case is to detect any modifications to the original file which would, in turn, import the file metadata for threat detection."
    }
}