{
    "id": "dbpedia_4811_3",
    "rank": 35,
    "data": {
        "url": "https://docs.gandi.net/en/web_hosting/tutorials/wikijs.html",
        "read_more_link": "",
        "language": "en",
        "title": "Gandi Documentation — Gandi Documentation documentation",
        "top_image": "https://docs.gandi.net/en/_static/img/favicon/favicon_hires.png",
        "meta_img": "https://docs.gandi.net/en/_static/img/favicon/favicon_hires.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Deploy Wiki.js on Web Hosting: Step-by-Step Guide â¤ Find documentation on all the products and services provided on Gandi Doc â Gandi.net: Domain Names, Web Hosting, SSL Certificates",
        "meta_lang": "en",
        "meta_favicon": "../../_static/img/favicon/favicon_hires.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "How to Deploy Wiki.js on Web HostingÂ¶\n\nThis tutorial will show you how to deploy wiki.js on a Node.js Web Hosting web hosting.\n\nWhat is Wiki.js ?Â¶\n\nWiki.js is an open source Wiki-like CMS written in javascript running with nodeJs.\n\nYou can find more information on their official website and in their documentation.\n\nPrerequisitesÂ¶\n\nYou will need the following to complete this tutorial.\n\nA web hosting using Node.js and PostgreSQL\n\nA domain name where you will host your web hosting\n\nA command-line terminal with git and ssh installed\n\nThe wiki.js source files\n\nCreate a NodeJS / PostgreSQL Web HostingÂ¶\n\nFirst, create a web hosting that uses NodeJS and PostgreSQL.\n\nAfter logging in, click âWeb Hostingâ in the left navigation menu.\n\nClick âCreateâ.\n\nChoose âCustom Language & DBâ for the top option.\n\nUnder âLanguageâ, choose âNode.jsâ.\n\nUnder âDatabaseâ, choose âPostgreSQLâ.\n\nThe rest of the options can be anything you choose.\n\nAt the bottom of the screen, click âAdd to Shopping Cartâ the complete the checkout process.\n\nYou can find a more detailed description of how to create a web hosting on our page How to Create a New Gandi Web Hosting.\n\nCreate a Website on Your Web HostingÂ¶\n\nThis mandatory step will set up the web server and the reverse proxy.\n\nGo to your Web Hosting menu.\n\nClick on the name of the web hosting you plan to use. This would be the web hosting you created in the previous step, or one you already created with the necessary configuration.\n\nClick on the âSitesâ tab then click on âStartâ or âCreate a Siteâ.\n\nWrite the URL of the website you want to create. For example, you could use something like âwiki.mydomain.comâ.\n\nAttention\n\nBe sure to write this address correctly, a typo will make your site unreachable\n\nYou can find a more detailed description of how to create a web hosting on our page How to Link Your Domain to Your Web Hosting.\n\nCreate a DatabaseÂ¶\n\nNext you will create a database on your site.\n\nOpen the phpPgAdmin interface by following these steps:\n\nGo to your Web Hosting menu.\n\nClick on the name of the web hosting you plan to use then click on the âAdiminstrationâ tab.\n\nClick âGo to phpPgAdminâ near the bottom of the page.\n\nEnter the username and password for the web hosting.\n\nThe phpPgAdmin interface URL will follow the pattern https://xxxx.admin.yy.gpaas.net, where xxxx is your hosting user and yy its location.\n\nAfter entering the phpPgAdmin interface, click on âPostgreSQLâ on the left panel. When prompted, use the username hosting-db and leave the password space blank. These are the default root username and database password values used when creating a web hosting. If you have changed your root username or database password you can find it in the âAdministrationâ tab of your web hosting.\n\nNext, create a new user.\n\nClick on the âRolesâ tab, then click âCreate roleâ.\n\nWrite the username, and the wanted password.\n\nCheck the option âcan login?â, then click on the âCreateâ button below.\n\nNow, create a new database.\n\nClick on the âDatabasesâ tab, then click âCreate databaseâ.\n\nGive your database a name, leaving the other options empty, then click âCreateâ.\n\nFind your new database and click the corresponding âPrivilegesâ button.\n\nClick âGrantâ.\n\nSelect your user in the top menu, then check âALL PRIVILEGESâ in the âPrivilegesâ section.\n\nClick âGrantâ at the bottom of the form.\n\nAdapt your Configuration FileÂ¶\n\nNext, open the config.yml file, and change the following lines. Replace âUSERâ, âPASSWORDâ, and âDATABASEâ with the username, password, and database you just created.\n\n# --------------------------------------------------------------------- # Port the server should listen to # --------------------------------------------------------------------- port: 8080 # --------------------------------------------------------------------- # Database # --------------------------------------------------------------------- db: type: postgres # PostgreSQL / MySQL / MariaDB / MS SQL Server only: host: localhost port: 5432 user: USER pass: PASSWORD db: DATABASE ssl: false\n\nThen, save your changes.\n\nFinalize the InstallÂ¶\n\nRestart Node:Â¶\n\nOpen the control panel for your web hosting. The link to your control panel can be found on the âAdministrationâ tab of your web hosting.\n\nIn the âNode.jsâ section, click âReload applicationâ.\n\nRun the Web Installer :Â¶\n\nOpen your website in a browser and follow the installation process, filling in the information asked for.\n\nNote\n\nIf the page displays a 500 error, relaunch node from your admin panel again, as described in the previous step, then connect again to your websiteâs URL.\n\nCongratulations, your brand new wiki is online! You can find instructions on where to go from here in the official Wiki.js documentation."
    }
}