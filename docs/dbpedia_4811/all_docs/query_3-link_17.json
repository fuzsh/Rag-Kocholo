{
    "id": "dbpedia_4811_3",
    "rank": 17,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Wildcard_DNS_record",
        "read_more_link": "",
        "language": "en",
        "title": "Wildcard DNS record",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2003-09-17T09:58:19+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Wildcard_DNS_record",
        "text": "Type of domain name record\n\nA wildcard DNS record is a record in a DNS zone that will match requests for non-existent domain names. A wildcard DNS record is specified by using a * as the leftmost label (part) of a domain name, e.g. *.example.com. The exact rules for when a wildcard will match are specified in RFC 1034, but the rules are neither intuitive nor clearly specified. This has resulted in incompatible implementations and unexpected results when they are used.\n\nA wildcard DNS record in a zone file looks similar to this example:\n\n*.example.com.3600INMX10host1.example.com.\n\nThis wildcard DNS record will cause DNS lookups on domain names ending in example.com that do not exist to have MX records synthesized for them. So, a lookup for the MX record for somerandomname.example.com would return an MX record pointing to host1.example.com.\n\nWildcards in the DNS are much more limited than other wildcard characters used in other computer systems. Wildcard DNS records have a single * (asterisk) as the leftmost DNS label, such as *.example.com. Asterisks at other places in the domain will not work as a wildcard, so neither *abc.example.com nor abc.*.example.com work as wildcard DNS records. Moreover, the wildcard is matched only when a domain does not exist, not just when there are no matching records of the type that has been queried for. Even the definition of \"does not exist\" as defined in the search algorithm of RFC 1034 section 4.3.3 can result in the wildcard not matching cases that one might expect with other types of wildcards.\n\nThe original definition of how a DNS wildcard behaves is specified in RFC 1034 sections 4.3.2 and 4.3.3, but only indirectly by certain steps in a search algorithm and as a result, the rules are neither intuitive nor clearly specified. As a result, 20 years later, RFC 4592, \"The Role of Wildcards in the Domain Name System\" was written to help clarify the rules.\n\nTo quote RFC 1912, \"A common mistake is thinking that a wildcard MX for a zone will apply to all hosts in the zone. A wildcard MX will apply only to names in the zone which aren't listed in the DNS at all.\" That is, if there is a wildcard MX for *.example.com, and an A record (but no MX record) for www.example.com, the correct response (as per RFC 1034) to an MX request for www.example.com is \"no error, but no data\"; this is in contrast to the possibly expected response of the MX record attached to *.example.com.\n\nThe following example is from RFC 4592 section 2.2.1 and is useful in clarifying how wildcards work.\n\nSay there is a DNS zone with the following resource records:\n\n$ORIGINexample. example.3600INSOA<SOARDATA> example.3600NSns.example.com. example.3600NSns.example.net. *.example.3600TXT\"this is a wildcard\" *.example.3600MX10host1.example. sub.*.example.3600TXT\"this is not a wildcard\" host1.example.3600A192.0.2.1 _ssh._tcp.host1.example.3600SRV<SRVRDATA> _ssh._tcp.host2.example.3600SRV<SRVRDATA> subdel.example.3600NSns.example.com. subdel.example.3600NSns.example.net.\n\nA look at the domain names in a tree structure is helpful:\n\nexample ├─ * │ └─ sub ├─ host1 │ └─ _tcp │ └─ _ssh ├─ host2 │ └─ _tcp │ └─ _ssh └─ subdel\n\nThe following responses would be synthesized from one of the wildcards in the zone:\n\nQueried domain Queried RR type Results host3.example. MX The answer will be a \"host3.example. IN MX ...\" host3.example. A The answer will reflect \"no error, but no data\" because there is no \"A\" resource record (RR) set at *.example. foo.bar.example. TXT The answer will be \"foo.bar.example. IN TXT ...\" because bar.example. does not exist, but the wildcard does.\n\nThe following responses would not be synthesized from any of the wildcards in the zone:\n\nQueried domain Queried RR type Results host1.example. MX No wildcard will match because host1.example. exists. Instead you will get an answer of \"no error, but no data\". The wildcard MX record does not provide MX records for domains that otherwise exist. sub.*.example. MX No wildcard will match because sub.*.example. exists. The domain sub.*.example. will never act as a wildcard, even though it has an asterisk in it. _telnet._tcp.host1.example. SRV No wildcard will match because _tcp.host1.example. exists (without data). host.subdel.example. A No wildcard will match because subdel.example. exists and is a zone cut, putting host.subdel.example. into a different DNS zone. Even if host.subdel.example. does not exist in the other zone, a wildcard will not be used from the parent zone. ghost.*.example. MX No wildcard will match because *.example. exists, it is a wildcard domain, but it still exists.\n\nThe final example highlights one common misconception about wildcards. A wildcard \"blocks itself\" in the sense that a wildcard does not match its own subdomains. That is, *.example. does not match all names in the example. zone; it fails to match the names below *.example.. To cover names under *.example., another wildcard domain name is needed—*.*.example.—which covers all but its own subdomains.\n\nTo quote from RFC 4592, many DNS implementations diverge, in different ways, from the original definition of wildcards. Some of the variations include:\n\nWith djbdns, in addition to checking for wildcards at the current level, the server checks for wildcards in all enclosing superdomains, all of the way up to the root.[citation needed] In the examples listed above, the query for _telnet._tcp.host1.example for an MX record would match a wildcard despite the domain _tcp.host1.example existing.\n\nMicrosoft's DNS server (if configured to do so[1]) and MaraDNS (by default) have wildcards also match all requests for empty resource record sets; i.e., domain names for which there are no records of the desired type. In the examples listed above, the query for sub.*.example for an MX record would match *.example, despite sub.*.example explicitly existing with only a TXT Record.\n\nWildcard domains are widely used by blogging websites that allow users to create sub-domains upon demand; e.g., sites such as WordPress or Blogspot. Another popular use is by Free Dynamic DNS websites that allow users to create a DNS name that changes to match their host IP as the IP address is changed periodically by their ISP's DHCP server.\n\nNew gTLDs are prohibited from publishing wildcards (or using equivalent name server mechanisms) by specification 6 of the ICANN New gTLD Base Registry agreement. However, ICANN's Name Collision Occurrence Management Framework (PDF), explicitly requires new gTLDs to publish (for at least 90 days) special MX, SRV, TXT, and 127.0.53.53 A record wildcards that warn of potential name collisions due to use of relative domain names with domain search paths.\n\nSeveral domain name registrars have, at various times, deployed wildcard records for the top-level domains to provide a platform for advertising, most notably VeriSign for .com and .net with its (now removed) Site Finder system. The .museum TLD also had a wildcard record which has now been removed. As of March 2018 , top-level domains using a wildcard A record (other than 127.0.53.53) are .fm, .la, .ph, .pw, .vg and .ws. The internationalized TLDs .中国 (.xn--fiqs8s or .xn--fiqz9s for \"China\") and .გე (.xn--node for the Georgian letters for the Georgian country code \"GE\") also have wildcard A records. The *.中国 wildcard resolves to ibaidu.com (flagged by Chrome as unsafe), and the *.გე wildcard resolves to a website of the .ge TLD.\n\nIt has also become common for ISPs to synthesize address records for typos, for the same person, a practice called \"catchall\" typosquatting, but these aren't true wildcards, but rather modified caching name servers.[2]\n\nThe Internet Software Consortium produced a version of the BIND DNS software that can be configured to filter out wildcard DNS records from specific domains. Various developers have produced software patches for BIND and for djbdns.\n\nOther DNS server programs have followed suit, providing the ability to ignore wildcard DNS records as configured."
    }
}