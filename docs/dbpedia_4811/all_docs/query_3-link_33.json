{
    "id": "dbpedia_4811_3",
    "rank": 33,
    "data": {
        "url": "https://www.mediawiki.org/wiki/Manual:Security",
        "read_more_link": "",
        "language": "en",
        "title": "Manual:Security",
        "top_image": "https://www.mediawiki.org/static/favicon/mediawiki.ico",
        "meta_img": "https://www.mediawiki.org/static/favicon/mediawiki.ico",
        "images": [
            "https://www.mediawiki.org/static/images/icons/mediawikiwiki.svg",
            "https://www.mediawiki.org/static/images/mobile/copyright/mediawikiwiki-wordmark.svg",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://www.mediawiki.org/static/images/footer/wikimedia-button.svg",
            "https://www.mediawiki.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/mediawiki.png",
        "meta_site_name": "MediaWiki",
        "canonical_link": "https://www.mediawiki.org/wiki/Manual:Security",
        "text": "If you believe you have found a security problem in MediaWiki or in one of Wikimedia's web sites, see Security for contact information so we can prepare a bug fix release.\n\nThe most important security step you can take is to keep your software up to date. Both MediaWiki and the software it depends on will occasionally produce new versions correcting newly-discovered security vulnerabilities which may affect you.\n\nThe MediaWiki developers strongly recommend that anyone running MediaWiki subscribe to the mediawiki-announce mailing list. This is a low-traffic list that sends out only new version announcements.\n\nIn accordance with MediaWiki's version lifecycle, each release will receive security updates for one year. Older releases may contain known-but-unpatched security holes.\n\nDon't forget to also keep up with updates to Apache, PHP, MySQL/MariaDB, and any other software running on your servers â€“ both the operating system and other web applications.\n\nSeveral people's MediaWiki 1.3.x installations were affected in Fall 2004 by a worm attacking a flaw in phpBB; once it had gotten in through other customers' unpatched phpBB sites it added a \"you are hacked\" message to other writable .php files on the system, including the compiled templates that MediaWiki 1.3 used.\n\nBe careful about which extensions you use\n\nThere are a wide variety of extensions available for MediaWiki. Unfortunately these extensions are also of a wide variety of quality levels. Using a low quality extension with MediaWiki is one of the most common causes of security issues for MediaWiki.\n\nBefore deciding to use an extension, you should do basic research on the extension. Extensions made by prominent members of the MediaWiki development community are usually quite safe. Similarly any extension used on a wiki run by the Wikimedia Foundation has probably been looked at carefully, and is probably safe (There are of course no guarantees). However if you find an extension floating around github that hasn't been touched in many years and was developed by someone with little experience in web development, it is probably pretty high risk.\n\nAt the end of the day, you should evaluate the security risk of installing an extension the same way you would evaluate the security risk of installing any other piece of software.\n\nExtensions also need to be kept up to date like any other piece of software. Extensions bundled with MediaWiki have security announcements made to mediawiki-announce mailing list, but other extensions do not. Some, but definitely not all extensions announce security issues on mediawiki-l mailing list.\n\nFile permissions\n\nAnother very important thing you should do to secure your MediaWiki installation: Make sure the user running php does not have write access to any web-accessible file or directory that php is enabled to run on.\n\nOn Debian-based systems this means the www-data user should not own the php files.\n\nOn unix-like systems, you can do this by ensuring that the mediawiki directory/files are owned by someone other than your web server user (www-data) or mysql server user. Depending on how you installed MediaWiki this may already be the case, but if not can be accomplished by doing chown -R <usernamehere> /path/to/MediaWiki/ where username is a user other than the webserver or mysql user (commonly you would use your own username provided mysql and php are not running as your username). After doing that step, you may however need to change the owner of the image directory back to the php user, as uploaded files need to go there, so MediaWiki needs to be able to write there (e.g. chown -R www-data /path/to/MediaWiki/images). Next you run chmod -R go-w /path/to/MediaWiki to remove write access from all other users besides the file owners. After doing that step you may need to re-enable write access to the images directory.\n\nDirectories that MediaWiki needs write access to (such as $wgCacheDirectory if that feature is enabled) should be located outside of the web root. The exception being the images directory, which must be in the web root. However, it is important to disable php in the images directory. The details on how to do this varies with webserver, but on apache it can sometimes be accomplished by using php_flag engine off in a .htaccess file. If you do accomplish this via a config file in the images directory itself, you should ensure the config file is not writable by the webserver. See the section below on upload security for more details.\n\nYour LocalSettings.php file must be readable by the php user, however it should not be world readable, to prevent other processes from discovering your database password and other sensitive information. Like all MediaWiki files, the php user should not be able to write to LocalSettings.php.\n\nTo protect against firesheep style attacks and general privacy leaks, it is recommended to host your site using TLS (HTTPS). A guide for setting up TLS is out of the scope of this document, however it should be noted that this is much cheaper now that letsencrypt.org provides free certificates.\n\nIf you do setup TLS, it is important to test your site with ssllabs.com/ssltest/ to ensure that it is setup properly, as it is easy to accidentally misconfigure TLS.\n\nIf you enable TLS, you may also want to configure your webserver to send the strict-transport-security header. This will improve the security of your website against eavesdroppers quite a bit, but at the drawback that it means you cannot decide to stop using TLS for a set period of time.\n\nGeneral PHP recommendations\n\nPlease refer to the OWASP PHP Security Cheat Sheet\n\nThese bits of advice go for pretty much any PHP environment, and are not necessarily specific to MediaWiki.\n\nPHP configuration recommendations, for php.ini or set otherwise:\n\nUnless you require it specifically, disable allow_url_fopen.\n\nRemote PHP code execution vulnerabilities may depend on being able to inject a URL into a include() or require(). If you don't require the use of remote file loading, turning this off can prevent attacks of this kind on vulnerable code.\n\nMediaWiki may require this setting to be on for the Lucene search extension, the OAI harvester extension, the TitleBlacklist extension, and certain uses of Special:Import in 1.5. It should not however be required in a typical installation.\n\nMediaWiki should be safe even if this is on; turning this off is a precaution against the possibility of unknown vulnerability.\n\nSet session.use_trans_sid off.\n\nIf this is on, session IDs may be added to URLs sometimes if cookies aren't doing their thing. That can leak login session data to third-party sites through referrer data or cut-and-paste of links.\n\nYou should always turn this off if it's on.\n\nFor instance if you see this line in php.ini:\n\nallow_url_fopen = On\n\nChange it to:\n\nallow_url_fopen = Off\n\nAlternatively, you could add this apache directive to turn off allow_url_fopen on a per-directory basis:\n\nphp_flag allow_url_fopen off\n\nThen restart Apache to reload the changes by apachectl reload or rcapache2 reload (SuSE).\n\nOn a multiuser system with PHP installed as an Apache module, all users' scripts will run under the same reduced-privilege user account. This may give other users access to read your configuration files (including database passwords), read and modify your login session data, or write files into your upload directory (if enabled).\n\nFor multiuser security, consider using a CGI/FastCGI configuration in which each user's scripts run under their own account.\n\nGeneral MySQL and MariaDB recommendations\n\nIn general, you should keep access to your MySQL or MariaDB database to a minimum. If it will only be used from the single machine it's running on, consider disabling networking support, or enabling local networking access only (via the loopback device, see below), so the server can only communicate with local clients over Unix domain sockets.\n\nIf it will be used over a network with a limited number of client machines, consider setting the IP firewall rules to accept access to TCP port 3306 (MySQL/MariaDB's port) only from those machines or only from your local subnet, and reject all accesses from the larger internet. This can help prevent accidentally opening access to your server due to some unknown flaw in the database server, a mistakenly set overly broad GRANT, or a leaked password.\n\nIf you create a new MySQL/MariaDB user for MediaWiki through MediaWiki's installer, somewhat liberal access is granted to it to ensure that it will work from a second server as well as a local one. You might consider manually narrowing this or establishing the user account yourself with custom permissions from just the places you need. The database user only needs to have SELECT, INSERT, UPDATE and DELETE permissions for the database.\n\nIn particular, the FILE privilege is a common cause of security issues. You should ensure that the MySQL/MariaDB user does not have this privilege or any of the \"server administration\" privileges.\n\nNote that the user table in MediaWiki's database contains hashed user passwords and may contain user email addresses, and should generally be considered private data.\n\nMaintenance scripts\n\nFor the maintenance scripts, you might want to create a DB-admin-user with more rights. For this, set the following variables with the database credentials of that account:\n\nManual:$wgDBadminuser\n\nManual:$wgDBadminpassword\n\nSee Manual:Maintenance scripts#Configuration for details on the needed MySQL/MariaDB rights.\n\nUpgrade of MediaWiki\n\nDuring upgrade, more MySQL/MariaDB rights might be needed.\n\nMore about MySQL and MariaDB\n\nmysql command-line options --skip-networking.\n\nSetting bind-address=127.0.0.1 in your my.ini (under section [mysqld]) will cause MySQL/MariaDB to only listen on the loopback interface. This is the default in the EasyPHP install for Windows. (If you are using MySQL/MariaDB on a Unix machine, the setting may be skip-networking instead in the my.cnf file.)\n\nGRANT and REVOKE syntax\n\nIf the MySQL or MariaDB database has leaked\n\nIf the database has leaked to the public, in LocalSettings.php:\n\nChange $wgDBpassword if that leaked too\n\nChange some letters in $wgSecretKey\n\nReset the user_token column in your user table so that it can't be used to impersonate your users\n\nIf LocalSettings.php has leaked\n\nIf LocalSettings.php has leaked to the public, reprotect it and:\n\nChange $wgDBpassword\n\nReplace $wgSecretKey with a different random string of letters and numbers\n\nMake a different $wgSpamRegex (optional)\n\nReset the user_token column in your user table so that it can't be used to impersonate any users\n\nDatabase passwords\n\nSee Manual:Securing database passwords for some precautions you may wish to take to reduce the risk of MySQL/MariaDB passwords being presented to the web.\n\nAlternate file layout\n\nMediaWiki is designed to run in-place after being extracted from the distribution archive. This approach is convenient, but can result in reduced security or unnecessarily duplicated files.\n\nYou avoid duplicates in a mass installation or to keep sensitive files out of the web root for safety by manually relocating or consolidating various files.\n\nMoving the main includes and skin files may require carefully picking and choosing and altering the include_path set in your LocalSettings.php. Experiment with this as desired.\n\nIf working to improve security, keep in mind that WebStart.php uses the current directory as a base. This means that only setting your include_path may not help to improve the security of your installation.\n\nMove sensitive information\n\nConsider moving the database password or other potentially sensitive data from LocalSettings.php to another file located outside of the web document root, and including that file from LocalSettings.php (through include()). This can help to ensure that your database password will not be compromised if a web server configuration error disables PHP execution and reveals the file's source text.\n\nSimilarly, editing LocalSettings.php with some text editors will leave a backup file in the same directory with an altered file extension, causing the copy to be served as plain text if someone requests, for example, LocalSettings.php~. If you use such an editor, be sure to disable backup generation or move sensitive data outside the web root.\n\nA MediaWiki debug logfile as it is used for debugging also contains sensitive data. Make sure to always disallow access for non authorized persons and the public as explained, delete remains of such logfiles when they are not needed, and comment or clear the logfile lines in your LocalSettings.php.\n\nA more secure option for the Apache Web Server is to set the DocumentRoot to an empty or non-existent directory, and then use Alias directives in the Apache configuration to expose only the scripts and directories that need to be web-accessible.\n\nLoader scripts\n\nA PHP-only solution that will work with any web server is to write a series of scripts that explicitly chdir() to a specific directory and then require one or more source files. For example:\n\nUser security\n\nAnyone able to edit the user-interface system messages in the MediaWiki: namespace can introduce arbitrary HTML and JavaScript code into page output. This includes wiki users who have the editinterface permission, as well as anyone with direct write access to the text table in the database.\n\nHTML is disabled on many system messages, particularly those displayed at the login screen, so the risk of password-snarfing JavaScript should be minimal. Malicious code could still attempt to exploit browser vulnerabilities (install spyware, etc.), though, so, you should make sure that only trusted people can modify system messages.\n\nUpload security\n\nSee also: Manual:Configuring file uploads\n\nThe main concern is: How do we prevent users from uploading malicious files?\n\nFile uploads are an optional feature of MediaWiki and are disabled by default. If you enable them, you also need to provide a directory in the web root which is writable by the web server user.\n\nThis has several implications for security:\n\nThe directory may have to be world-writable, or else owned by the web server's limited user account. On a multiuser system it may be possible for other local users to slip malicious files into your upload directory (see multiuser notes above). If at all possible, make the directory writable only by the web server's account, don't make the directory world-writable.\n\nWhile PHP's configuration sets a file size limit on individual uploads, MediaWiki doesn't set any limit on total uploads. A malicious (or overzealous) visitor could fill up a disk partition by uploading a lot of files.\n\nGenerated thumbnails and uploaded files held for overwrite confirmation may be kept in images/thumb and images/tmp without visible notice in the MediaWiki web interface. Keep an eye on their sizes as well.\n\nThe default configuration makes an attempt to limit the types of files which can be uploaded for safety:\n\nBy default, file extensions .png, .gif, .jpg, .jpeg and webp are white listed ($wgFileExtensions ).\n\nVarious executable and script extensions are explicitly prohibited ($wgProhibitedFileExtensions ) even if you allow users to override the allowlist ($wgStrictFileExtensions ).\n\nSeveral known image file extensions have their types verified using PHP's getimagesize() function.\n\nUploaded files are checked to see if they could trip file type detection bugs in Internet Explorer and Safari which might cause them to display as HTML. (It has been proposed to remove this check, see T309787).\n\nAs a precaution, you should explicitly disable server-side execution of PHP scripts (and any other scripting types you may have) in the uploads directory (by default, images). You should also instruct browsers to not \"sniff\" files by setting a X-Content-Type-Options: nosniff header.\n\nFor instance, an Apache .conf file fragment to do this if your MediaWiki instance is in /Library/MediaWiki/web might look something like:\n\nIf you don't have access to apache configuration files, but you can use .htaccess files to override configuration settings on specific directories, you can put an .htaccess file on the upload directory that looks like this:\n\nYour exact configuration may vary. In particular, the use of open_basedir options may complicate handling of uploads.\n\nIf you use any of the above solution, you can check whether it's really working with this simple test.\n\nCreate a 'test.php' file in the upload directory.\n\nPut <?php phpinfo(); in the file.\n\nVisit the file path in a web browser. If you see just the text of the file you are good, otherwise something is wrong somewhere.\n\nDisable PHP solution for Nginx: http://serverfault.com/a/585559/162909\n\nFor best security, you should also consider using a separate domain for uploaded files. For full security it is best to have uploads served from an entirely separate domain, not a subdomain, but even a subdomain will provide additional security. This is especially important if you allow uploading SVG files since that file format is so similar to HTML. MediaWiki checks SVG uploads for security, but it is best to have multiple layers of defense. See $wgUploadPath for configuring a different domain to serve media files.\n\nExternal programs\n\n/usr/bin/diff3 may be executed for edit conflict merging.\n\nIf ImageMagick support for thumbnails or SVG images is enabled, convert may be run on uploaded files.\n\nIf enabled, Math extension will call texvc executable, which calls latex, dvips, and convert (which calls gs).\n\nSee also"
    }
}