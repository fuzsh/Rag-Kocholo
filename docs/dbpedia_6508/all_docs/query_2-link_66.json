{
    "id": "dbpedia_6508_2",
    "rank": 66,
    "data": {
        "url": "https://developers.google.com/maps/documentation/javascript/reference/coordinates",
        "read_more_link": "",
        "language": "en",
        "title": "Google for Developers",
        "top_image": "https://developers.google.com/static/maps/images/google-maps-platform-1200x675.png",
        "meta_img": "https://developers.google.com/static/maps/images/google-maps-platform-1200x675.png",
        "images": [
            "https://developers.google.com/static/maps/images/maps-icon.svg",
            "https://developers.google.com/static/maps/images/maps-icon.svg",
            "https://developers.google.com/static/site-assets/logo-stack-overflow.svg",
            "https://developers.google.com/static/site-assets/logo-github.svg",
            "https://developers.google.com/static/maps/images/discord-color.png",
            "https://developers.google.com/static/site-assets/developers_64dp.png",
            "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/lockup-google-for-developers.svg"
        ],
        "movies": [
            "https://developers.google.com/frame/maps/documentation/javascript/reference/coordinates_63110f1b96827569c559a708666dbfdad5f5e23c6f318d9973de46490295e3d0.frame"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v20ab951cf37b43fc7a428ae75ce91d8269f391204ca16525bc8a5ececea0ab56/developers/images/favicon-new.png",
        "meta_site_name": "Google for Developers",
        "canonical_link": "https://developers.google.com/maps/documentation/javascript/reference/coordinates",
        "text": "Coordinates\n\nStay organized with collections Save and categorize content based on your preferences.\n\nLatLng class\n\ngoogle.maps.LatLng class\n\nA LatLng is a point in geographical coordinates: latitude and longitude.\n\nLatitude ranges between -90 and 90 degrees, inclusive. Values above or below this range will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.\n\nLongitude ranges between -180 and 180 degrees, inclusive. Values above or below this range will be wrapped so that they fall within the range. For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.\n\nAlthough the default map projection associates longitude with the x-coordinate of the map, and latitude with the y-coordinate, the latitude coordinate is always written first, followed by the longitude.\n\nNotice that you cannot modify the coordinates of a LatLng. If you want to compute another point, you have to create a new one.\n\nMost methods that accept LatLng objects also accept a LatLngLiteral object, so that the following are equivalent:\n\nmap.setCenter(new google.maps.LatLng(-34, 151));\n\nmap.setCenter({lat: -34, lng: 151});\n\nThe constructor also accepts LatLngLiteral and LatLng objects. If a LatLng instance is passed to the constructor, a copy is created.\n\nThe possible calls to the constructor are below:\n\nnew google.maps.LatLng(-34, 151);\n\nnew google.maps.LatLng(-34, 151, true);\n\nnew google.maps.LatLng({lat: -34, lng: 151});\n\nnew google.maps.LatLng({lat: -34, lng: 151}, true);\n\nnew google.maps.LatLng(new google.maps.LatLng(-34, 151));\n\nnew google.maps.LatLng(new google.maps.LatLng(-34, 151), true);\n\nAccess by calling const {LatLng} = await google.maps.importLibrary(\"core\"). See Libraries in the Maps JavaScript API.\n\nConstructor\n\nLatLng\n\nLatLng(latOrLatLngOrLatLngLiteral[, lngOrNoClampNoWrap, noClampNoWrap])\n\nParameters:\n\nlatOrLatLngOrLatLngLiteral: number|LatLngLiteral|LatLng\n\nlngOrNoClampNoWrap: number|boolean optional\n\nnoClampNoWrap: boolean optional\n\nCreates a LatLng object representing a geographic point. Latitude is specified in degrees within the range [-90, 90]. Longitude is specified in degrees within the range [-180, 180). Set noClampNoWrap to true to enable values outside of this range. Note the ordering of latitude and longitude.\n\nMethods\n\nequals\n\nequals(other)\n\nParameters:\n\nother: LatLng\n\nReturn Value: boolean\n\nComparison function.\n\nlat\n\nlat()\n\nParameters: None\n\nReturn Value: number\n\nReturns the latitude in degrees.\n\nlng\n\nlng()\n\nParameters: None\n\nReturn Value: number\n\nReturns the longitude in degrees.\n\ntoJSON\n\ntoJSON()\n\nParameters: None\n\nReturn Value: LatLngLiteral\n\nConverts to JSON representation. This function is intended to be used via JSON.stringify.\n\ntoString\n\ntoString()\n\nParameters: None\n\nReturn Value: string\n\nConverts to string representation.\n\ntoUrlValue\n\ntoUrlValue([precision])\n\nParameters:\n\nprecision: number optional\n\nReturn Value: string\n\nReturns a string of the form \"lat,lng\" for this LatLng. We round the lat/lng values to 6 decimal places by default.\n\nLatLngBoundsLiteral interface\n\ngoogle.maps.LatLngBoundsLiteral interface\n\nObject literals are accepted in place of LatLngBounds objects throughout the API. These are automatically converted to LatLngBounds objects. All south, west, north and east must be set, otherwise an exception is thrown.\n\nProperties\n\neast\n\nType: number\n\nEast longitude in degrees. Values outside the range [-180, 180] will be wrapped to the range [-180, 180). For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.\n\nnorth\n\nType: number\n\nNorth latitude in degrees. Values will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.\n\nsouth\n\nType: number\n\nSouth latitude in degrees. Values will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.\n\nwest\n\nType: number\n\nWest longitude in degrees. Values outside the range [-180, 180] will be wrapped to the range [-180, 180). For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.\n\nLatLngAltitude class\n\ngoogle.maps.LatLngAltitude class\n\nA LatLngAltitude is a 3D point in geographical coordinates: latitude, longitude, and altitude.\n\nLatitude ranges between -90 and 90 degrees, inclusive. Values above or below this range will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.\n\nLongitude ranges between -180 and 180 degrees, inclusive. Values above or below this range will be wrapped so that they fall within the range. For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.\n\nAltitude is measured in meters. Positive values denote heights above ground level, and negative values denote heights underneath the ground surface.\n\nThis class implements LatLngAltitudeLiteral.\n\nThis class implements LatLngLiteral.\n\nAccess by calling const {LatLngAltitude} = await google.maps.importLibrary(\"core\"). See Libraries in the Maps JavaScript API.\n\nConstructor\n\nLatLngAltitude\n\nLatLngAltitude(value[, noClampNoWrap])\n\nParameters:\n\nvalue: LatLngAltitude|LatLngAltitudeLiteral|LatLng|LatLngLiteral The initializing value.\n\nnoClampNoWrap: boolean optional Whether to preserve the initialization values, even if they may not necessarily be valid latitude values in the range of [-90, 90] or valid longitude values in the range of [-180, 180]. The default is false which enables latitude clamping and longitude wrapping.\n\nProperties\n\naltitude\n\nType: number\n\nReturns the altitude.\n\nlat\n\nType: number\n\nReturns the latitude.\n\nlng\n\nType: number\n\nReturns the longitude.\n\nMethods\n\nequals\n\nequals(other)\n\nParameters:\n\nother: LatLngAltitude optional Another LatLngAltitude object.\n\nReturn Value: boolean Whether the two objects are equal.\n\nComparison function.\n\ntoJSON\n\ntoJSON()\n\nParameters: None\n\nReturn Value: LatLngAltitudeLiteral A JSON representation of this object.\n\nLatLngAltitudeLiteral interface\n\ngoogle.maps.LatLngAltitudeLiteral interface\n\nObject literals are accepted in place of LatLngAltitude objects, as a convenience, in many places. These are converted to LatLngAltitude objects when the Maps API encounters them.\n\nThis interface extends LatLngLiteral.\n\nProperties\n\naltitude\n\nType: number\n\nDefault: 0\n\nDistance (in meters) above the ground surface. Negative value means underneath the ground surface.\n\nlat\n\nType: number\n\nLatitude in degrees. Values will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.\n\nlng\n\nType: number\n\nLongitude in degrees. Values outside the range [-180, 180] will be wrapped so that they fall within the range. For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.\n\nPoint class\n\ngoogle.maps.Point class\n\nAccess by calling const {Point} = await google.maps.importLibrary(\"core\"). See Libraries in the Maps JavaScript API.\n\nConstructor\n\nPoint\n\nPoint(x, y)\n\nParameters:\n\nx: number\n\ny: number\n\nA point on a two-dimensional plane.\n\nProperties\n\nx\n\nType: number\n\nThe X coordinate\n\ny\n\nType: number\n\nThe Y coordinate\n\nMethods\n\nequals\n\nequals(other)\n\nParameters:\n\nother: Point\n\nReturn Value: boolean\n\nCompares two Points\n\ntoString\n\ntoString()\n\nParameters: None\n\nReturn Value: string\n\nReturns a string representation of this Point.\n\nSize class\n\ngoogle.maps.Size class\n\nAccess by calling const {Size} = await google.maps.importLibrary(\"core\"). See Libraries in the Maps JavaScript API.\n\nConstructor\n\nSize\n\nSize(width, height[, widthUnit, heightUnit])\n\nParameters:\n\nwidth: number\n\nheight: number\n\nwidthUnit: string optional\n\nheightUnit: string optional\n\nTwo-dimensional size, where width is the distance on the x-axis, and height is the distance on the y-axis.\n\nProperties\n\nheight\n\nType: number\n\nThe height along the y-axis, in pixels.\n\nwidth\n\nType: number\n\nThe width along the x-axis, in pixels.\n\nMethods\n\nequals\n\nequals(other)\n\nParameters:\n\nother: Size\n\nReturn Value: boolean\n\nCompares two Sizes.\n\ntoString\n\ntoString()\n\nParameters: None\n\nReturn Value: string\n\nReturns a string representation of this Size.\n\nPadding interface\n\ngoogle.maps.Padding interface\n\nProperties\n\nbottom optional\n\nType: number optional\n\nPadding for the bottom, in pixels.\n\nleft optional\n\nType: number optional\n\nPadding for the left, in pixels.\n\nright optional\n\nType: number optional\n\nPadding for the right, in pixels.\n\ntop optional\n\nType: number optional\n\nPadding for the top, in pixels.\n\nCircleLiteral interface\n\ngoogle.maps.CircleLiteral interface\n\nObject literal which represents a circle.\n\nThis interface extends CircleOptions.\n\nProperties\n\ncenter\n\nType: LatLng|LatLngLiteral\n\nThe center of the Circle.\n\nradius\n\nType: number\n\nThe radius in meters on the Earth's surface.\n\nInherited: clickable, draggable, editable, fillColor, fillOpacity, map, strokeColor, strokeOpacity, strokePosition, strokeWeight, visible, zIndex"
    }
}