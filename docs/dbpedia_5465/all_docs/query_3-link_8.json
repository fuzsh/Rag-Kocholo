{
    "id": "dbpedia_5465_3",
    "rank": 8,
    "data": {
        "url": "https://docs.python.org/3/whatsnew/3.10.html",
        "read_more_link": "",
        "language": "en",
        "title": "Whatâs New In Python 3.10",
        "top_image": "https://docs.python.org/3/_static/og-image.png",
        "meta_img": "https://docs.python.org/3/_static/og-image.png",
        "images": [
            "https://docs.python.org/3/_static/py.svg",
            "https://docs.python.org/3/_static/py.svg",
            "https://docs.python.org/3/_static/py.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Editor, Pablo Galindo Salgado,. This article explains the new features in Python 3.10, compared to 3.9. Python 3.10 was released on October 4, 2021. For full details, see the changelog. Summary â R...",
        "meta_lang": "en",
        "meta_favicon": "../_static/py.svg",
        "meta_site_name": "Python documentation",
        "canonical_link": "https://docs.python.org/3/whatsnew/3.10.html",
        "text": "Improved ModulesÂ¶\n\nasyncioÂ¶\n\nAdd missing connect_accepted_socket() method. (Contributed by Alex GrÃ¶nholm in bpo-41332.)\n\nargparseÂ¶\n\nMisleading phrase âoptional argumentsâ was replaced with âoptionsâ in argparse help. Some tests might require adaptation if they rely on exact output match. (Contributed by Raymond Hettinger in bpo-9694.)\n\narrayÂ¶\n\nThe index() method of array.array now has optional start and stop parameters. (Contributed by Anders Lorentsen and Zackery Spytz in bpo-31956.)\n\nasynchat, asyncore, smtpdÂ¶\n\nThese modules have been marked as deprecated in their module documentation since Python 3.6. An import-time DeprecationWarning has now been added to all three of these modules.\n\nbase64Â¶\n\nAdd base64.b32hexencode() and base64.b32hexdecode() to support the Base32 Encoding with Extended Hex Alphabet.\n\nbdbÂ¶\n\nAdd clearBreakpoints() to reset all set breakpoints. (Contributed by Irit Katriel in bpo-24160.)\n\nbisectÂ¶\n\nAdded the possibility of providing a key function to the APIs in the bisect module. (Contributed by Raymond Hettinger in bpo-4356.)\n\ncodecsÂ¶\n\nAdd a codecs.unregister() function to unregister a codec search function. (Contributed by Hai Shi in bpo-41842.)\n\ncollections.abcÂ¶\n\nThe __args__ of the parameterized generic for collections.abc.Callable are now consistent with typing.Callable. collections.abc.Callable generic now flattens type parameters, similar to what typing.Callable currently does. This means that collections.abc.Callable[[int, str], str] will have __args__ of (int, str, str); previously this was ([int, str], str). To allow this change, types.GenericAlias can now be subclassed, and a subclass will be returned when subscripting the collections.abc.Callable type. Note that a TypeError may be raised for invalid forms of parameterizing collections.abc.Callable which may have passed silently in Python 3.9. (Contributed by Ken Jin in bpo-42195.)\n\ncursesÂ¶\n\nThe extended color functions added in ncurses 6.1 will be used transparently by curses.color_content(), curses.init_color(), curses.init_pair(), and curses.pair_content(). A new function, curses.has_extended_color_support(), indicates whether extended color support is provided by the underlying ncurses library. (Contributed by Jeffrey Kintscher and Hans Petter Jansson in bpo-36982.)\n\nThe BUTTON5_* constants are now exposed in the curses module if they are provided by the underlying curses library. (Contributed by Zackery Spytz in bpo-39273.)\n\ndataclassesÂ¶\n\n__slots__Â¶\n\nAdded slots parameter in dataclasses.dataclass() decorator. (Contributed by Yurii Karabas in bpo-42269)\n\nKeyword-only fieldsÂ¶\n\ndataclasses now supports fields that are keyword-only in the generated __init__ method. There are a number of ways of specifying keyword-only fields.\n\nYou can say that every field is keyword-only:\n\nfrom dataclasses import dataclass @dataclass(kw_only=True) class Birthday: name: str birthday: datetime.date\n\nBoth name and birthday are keyword-only parameters to the generated __init__ method.\n\nYou can specify keyword-only on a per-field basis:\n\nfrom dataclasses import dataclass, field @dataclass class Birthday: name: str birthday: datetime.date = field(kw_only=True)\n\nHere only birthday is keyword-only. If you set kw_only on individual fields, be aware that there are rules about re-ordering fields due to keyword-only fields needing to follow non-keyword-only fields. See the full dataclasses documentation for details.\n\nYou can also specify that all fields following a KW_ONLY marker are keyword-only. This will probably be the most common usage:\n\nfrom dataclasses import dataclass, KW_ONLY @dataclass class Point: x: float y: float _: KW_ONLY z: float = 0.0 t: float = 0.0\n\nHere, z and t are keyword-only parameters, while x and y are not. (Contributed by Eric V. Smith in bpo-43532.)\n\ndistutilsÂ¶\n\nThe entire distutils package is deprecated, to be removed in Python 3.12. Its functionality for specifying package builds has already been completely replaced by third-party packages setuptools and packaging, and most other commonly used APIs are available elsewhere in the standard library (such as platform, shutil, subprocess or sysconfig). There are no plans to migrate any other functionality from distutils, and applications that are using other functions should plan to make private copies of the code. Refer to PEP 632 for discussion.\n\nThe bdist_wininst command deprecated in Python 3.8 has been removed. The bdist_wheel command is now recommended to distribute binary packages on Windows. (Contributed by Victor Stinner in bpo-42802.)\n\ndoctestÂ¶\n\nWhen a module does not define __loader__, fall back to __spec__.loader. (Contributed by Brett Cannon in bpo-42133.)\n\nencodingsÂ¶\n\nencodings.normalize_encoding() now ignores non-ASCII characters. (Contributed by Hai Shi in bpo-39337.)\n\nenumÂ¶\n\nEnum __repr__() now returns enum_name.member_name and __str__() now returns member_name. Stdlib enums available as module constants have a repr() of module_name.member_name. (Contributed by Ethan Furman in bpo-40066.)\n\nAdd enum.StrEnum for enums where all members are strings. (Contributed by Ethan Furman in bpo-41816.)\n\nfileinputÂ¶\n\nAdd encoding and errors parameters in fileinput.input() and fileinput.FileInput. (Contributed by Inada Naoki in bpo-43712.)\n\nfileinput.hook_compressed() now returns TextIOWrapper object when mode is ârâ and file is compressed, like uncompressed files. (Contributed by Inada Naoki in bpo-5758.)\n\nfaulthandlerÂ¶\n\nThe faulthandler module now detects if a fatal error occurs during a garbage collector collection. (Contributed by Victor Stinner in bpo-44466.)\n\ngcÂ¶\n\nAdd audit hooks for gc.get_objects(), gc.get_referrers() and gc.get_referents(). (Contributed by Pablo Galindo in bpo-43439.)\n\nglobÂ¶\n\nAdd the root_dir and dir_fd parameters in glob() and iglob() which allow to specify the root directory for searching. (Contributed by Serhiy Storchaka in bpo-38144.)\n\nhashlibÂ¶\n\nThe hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by Christian Heimes in PEP 644 and bpo-43669.)\n\nThe hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed by Christian Heimes in bpo-38820 and other issues.)\n\nThe pure-Python fallback of pbkdf2_hmac() is deprecated. In the future PBKDF2-HMAC will only be available when Python has been built with OpenSSL support. (Contributed by Christian Heimes in bpo-43880.)\n\nhmacÂ¶\n\nThe hmac module now uses OpenSSLâs HMAC implementation internally. (Contributed by Christian Heimes in bpo-40645.)\n\nIDLE and idlelibÂ¶\n\nMake IDLE invoke sys.excepthook() (when started without â-nâ). User hooks were previously ignored. (Contributed by Ken Hilton in bpo-43008.)\n\nRearrange the settings dialog. Split the General tab into Windows and Shell/Ed tabs. Move help sources, which extend the Help menu, to the Extensions tab. Make space for new options and shorten the dialog. The latter makes the dialog better fit small screens. (Contributed by Terry Jan Reedy in bpo-40468.) Move the indent space setting from the Font tab to the new Windows tab. (Contributed by Mark Roseman and Terry Jan Reedy in bpo-33962.)\n\nThe changes above were backported to a 3.9 maintenance release.\n\nAdd a Shell sidebar. Move the primary prompt (â>>>â) to the sidebar. Add secondary prompts (ââ¦â) to the sidebar. Left click and optional drag selects one or more lines of text, as with the editor line number sidebar. Right click after selecting text lines displays a context menu with âcopy with promptsâ. This zips together prompts from the sidebar with lines from the selected text. This option also appears on the context menu for the text. (Contributed by Tal Einat in bpo-37903.)\n\nUse spaces instead of tabs to indent interactive code. This makes interactive code entries âlook rightâ. Making this feasible was a major motivation for adding the shell sidebar. (Contributed by Terry Jan Reedy in bpo-37892.)\n\nHighlight the new soft keywords match, case, and _ in pattern-matching statements. However, this highlighting is not perfect and will be incorrect in some rare cases, including some _-s in case patterns. (Contributed by Tal Einat in bpo-44010.)\n\nNew in 3.10 maintenance releases.\n\nApply syntax highlighting to .pyi files. (Contributed by Alex Waygood and Terry Jan Reedy in bpo-45447.)\n\nInclude prompts when saving Shell with inputs and outputs. (Contributed by Terry Jan Reedy in gh-95191.)\n\nimportlib.metadataÂ¶\n\nFeature parity with importlib_metadata 4.6 (history).\n\nimportlib.metadata entry points now provide a nicer experience for selecting entry points by group and name through a new importlib.metadata.EntryPoints class. See the Compatibility Note in the docs for more info on the deprecation and usage.\n\nAdded importlib.metadata.packages_distributions() for resolving top-level Python modules and packages to their importlib.metadata.Distribution.\n\ninspectÂ¶\n\nWhen a module does not define __loader__, fall back to __spec__.loader. (Contributed by Brett Cannon in bpo-42133.)\n\nAdd inspect.get_annotations(), which safely computes the annotations defined on an object. It works around the quirks of accessing the annotations on various types of objects, and makes very few assumptions about the object it examines. inspect.get_annotations() can also correctly un-stringize stringized annotations. inspect.get_annotations() is now considered best practice for accessing the annotations dict defined on any Python object; for more information on best practices for working with annotations, please see Annotations Best Practices. Relatedly, inspect.signature(), inspect.Signature.from_callable(), and inspect.Signature.from_function() now call inspect.get_annotations() to retrieve annotations. This means inspect.signature() and inspect.Signature.from_callable() can also now un-stringize stringized annotations. (Contributed by Larry Hastings in bpo-43817.)\n\nlinecacheÂ¶\n\nWhen a module does not define __loader__, fall back to __spec__.loader. (Contributed by Brett Cannon in bpo-42133.)\n\nosÂ¶\n\nAdd os.cpu_count() support for VxWorks RTOS. (Contributed by Peixing Xin in bpo-41440.)\n\nAdd a new function os.eventfd() and related helpers to wrap the eventfd2 syscall on Linux. (Contributed by Christian Heimes in bpo-41001.)\n\nAdd os.splice() that allows to move data between two file descriptors without copying between kernel address space and user address space, where one of the file descriptors must refer to a pipe. (Contributed by Pablo Galindo in bpo-41625.)\n\nAdd O_EVTONLY, O_FSYNC, O_SYMLINK and O_NOFOLLOW_ANY for macOS. (Contributed by Donghee Na in bpo-43106.)\n\nos.pathÂ¶\n\nos.path.realpath() now accepts a strict keyword-only argument. When set to True, OSError is raised if a path doesnât exist or a symlink loop is encountered. (Contributed by Barney Gale in bpo-43757.)\n\npathlibÂ¶\n\nAdd slice support to PurePath.parents. (Contributed by Joshua Cannon in bpo-35498.)\n\nAdd negative indexing support to PurePath.parents. (Contributed by Yaroslav Pankovych in bpo-21041.)\n\nAdd Path.hardlink_to method that supersedes link_to(). The new method has the same argument order as symlink_to(). (Contributed by Barney Gale in bpo-39950.)\n\npathlib.Path.stat() and chmod() now accept a follow_symlinks keyword-only argument for consistency with corresponding functions in the os module. (Contributed by Barney Gale in bpo-39906.)\n\nplatformÂ¶\n\nAdd platform.freedesktop_os_release() to retrieve operation system identification from freedesktop.org os-release standard file. (Contributed by Christian Heimes in bpo-28468.)\n\npprintÂ¶\n\npprint.pprint() now accepts a new underscore_numbers keyword argument. (Contributed by sblondon in bpo-42914.)\n\npprint can now pretty-print dataclasses.dataclass instances. (Contributed by Lewis Gaul in bpo-43080.)\n\npy_compileÂ¶\n\nAdd --quiet option to command-line interface of py_compile. (Contributed by Gregory Schevchenko in bpo-38731.)\n\npyclbrÂ¶\n\nAdd an end_lineno attribute to the Function and Class objects in the tree returned by pyclbr.readmodule() and pyclbr.readmodule_ex(). It matches the existing (start) lineno. (Contributed by Aviral Srivastava in bpo-38307.)\n\nshelveÂ¶\n\nThe shelve module now uses pickle.DEFAULT_PROTOCOL by default instead of pickle protocol 3 when creating shelves. (Contributed by Zackery Spytz in bpo-34204.)\n\nstatisticsÂ¶\n\nAdd covariance(), Pearsonâs correlation(), and simple linear_regression() functions. (Contributed by Tymoteusz WoÅodÅºko in bpo-38490.)\n\nsiteÂ¶\n\nWhen a module does not define __loader__, fall back to __spec__.loader. (Contributed by Brett Cannon in bpo-42133.)\n\nsocketÂ¶\n\nThe exception socket.timeout is now an alias of TimeoutError. (Contributed by Christian Heimes in bpo-42413.)\n\nAdd option to create MPTCP sockets with IPPROTO_MPTCP (Contributed by Rui Cunha in bpo-43571.)\n\nAdd IP_RECVTOS option to receive the type of service (ToS) or DSCP/ECN fields (Contributed by Georg Sauthoff in bpo-44077.)\n\nsslÂ¶\n\nThe ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian Heimes in PEP 644 and bpo-43669.)\n\nThe ssl module has preliminary support for OpenSSL 3.0.0 and new option OP_IGNORE_UNEXPECTED_EOF. (Contributed by Christian Heimes in bpo-38820, bpo-43794, bpo-43788, bpo-43791, bpo-43799, bpo-43920, bpo-43789, and bpo-43811.)\n\nDeprecated function and use of deprecated constants now result in a DeprecationWarning. ssl.SSLContext.options has OP_NO_SSLv2 and OP_NO_SSLv3 set by default and therefore cannot warn about setting the flag again. The deprecation section has a list of deprecated features. (Contributed by Christian Heimes in bpo-43880.)\n\nThe ssl module now has more secure default settings. Ciphers without forward secrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits weak RSA, DH, and ECC keys with less than 112 bits of security. SSLContext defaults to minimum protocol version TLS 1.2. Settings are based on Hynek Schlawackâs research. (Contributed by Christian Heimes in bpo-43998.)\n\nThe deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer officially supported. Python does not block them actively. However OpenSSL build options, distro configurations, vendor patches, and cipher suites may prevent a successful handshake.\n\nAdd a timeout parameter to the ssl.get_server_certificate() function. (Contributed by Zackery Spytz in bpo-31870.)\n\nThe ssl module uses heap-types and multi-phase initialization. (Contributed by Christian Heimes in bpo-42333.)\n\nA new verify flag VERIFY_X509_PARTIAL_CHAIN has been added. (Contributed by l0x in bpo-40849.)\n\nsqlite3Â¶\n\nAdd audit events for connect/handle(), enable_load_extension(), and load_extension(). (Contributed by Erlend E. Aasland in bpo-43762.)\n\nsysÂ¶\n\nAdd sys.orig_argv attribute: the list of the original command line arguments passed to the Python executable. (Contributed by Victor Stinner in bpo-23427.)\n\nAdd sys.stdlib_module_names, containing the list of the standard library module names. (Contributed by Victor Stinner in bpo-42955.)\n\n_threadÂ¶\n\n_thread.interrupt_main() now takes an optional signal number to simulate (the default is still signal.SIGINT). (Contributed by Antoine Pitrou in bpo-43356.)\n\nthreadingÂ¶\n\nAdd threading.gettrace() and threading.getprofile() to retrieve the functions set by threading.settrace() and threading.setprofile() respectively. (Contributed by Mario Corchero in bpo-42251.)\n\nAdd threading.__excepthook__ to allow retrieving the original value of threading.excepthook() in case it is set to a broken or a different value. (Contributed by Mario Corchero in bpo-42308.)\n\ntracebackÂ¶\n\nThe format_exception(), format_exception_only(), and print_exception() functions can now take an exception object as a positional-only argument. (Contributed by Zackery Spytz and Matthias Bussonnier in bpo-26389.)\n\ntypesÂ¶\n\nReintroduce the types.EllipsisType, types.NoneType and types.NotImplementedType classes, providing a new set of types readily interpretable by type checkers. (Contributed by Bas van Beek in bpo-41810.)\n\ntypingÂ¶\n\nFor major changes, see New Features Related to Type Hints.\n\nThe behavior of typing.Literal was changed to conform with PEP 586 and to match the behavior of static type checkers specified in the PEP.\n\nLiteral now de-duplicates parameters.\n\nEquality comparisons between Literal objects are now order independent.\n\nLiteral comparisons now respect types. For example, Literal[0] == Literal[False] previously evaluated to True. It is now False. To support this change, the internally used type cache now supports differentiating types.\n\nLiteral objects will now raise a TypeError exception during equality comparisons if any of their parameters are not hashable. Note that declaring Literal with unhashable parameters will not throw an error:\n\n>>> from typing import Literal >>> Literal[{0}] >>> Literal[{0}] == Literal[{False}] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unhashable type: 'set'\n\n(Contributed by Yurii Karabas in bpo-42345.)\n\nAdd new function typing.is_typeddict() to introspect if an annotation is a typing.TypedDict. (Contributed by Patrick Reader in bpo-41792.)\n\nSubclasses of typing.Protocol which only have data variables declared will now raise a TypeError when checked with isinstance unless they are decorated with runtime_checkable(). Previously, these checks passed silently. Users should decorate their subclasses with the runtime_checkable() decorator if they want runtime protocols. (Contributed by Yurii Karabas in bpo-38908.)\n\nImporting from the typing.io and typing.re submodules will now emit DeprecationWarning. These submodules have been deprecated since Python 3.8 and will be removed in a future version of Python. Anything belonging to those submodules should be imported directly from typing instead. (Contributed by Sebastian Rittau in bpo-38291.)\n\nunittestÂ¶\n\nAdd new method assertNoLogs() to complement the existing assertLogs(). (Contributed by Kit Yan Choi in bpo-39385.)\n\nurllib.parseÂ¶\n\nPython versions earlier than Python 3.10 allowed using both ; and & as query parameter separators in urllib.parse.parse_qs() and urllib.parse.parse_qsl(). Due to security concerns, and to conform with newer W3C recommendations, this has been changed to allow only a single separator key, with & as the default. This change also affects cgi.parse() and cgi.parse_multipart() as they use the affected functions internally. For more details, please see their respective documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in bpo-42967.)\n\nThe presence of newline or tab characters in parts of a URL allows for some forms of attacks. Following the WHATWG specification that updates RFC 3986, ASCII newline \\n, \\r and tab \\t characters are stripped from the URL by the parser in urllib.parse preventing such attacks. The removal characters are controlled by a new module level variable urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE. (See gh-88048)\n\nxmlÂ¶\n\nAdd a LexicalHandler class to the xml.sax.handler module. (Contributed by Jonathan Gossage and Zackery Spytz in bpo-35018.)"
    }
}