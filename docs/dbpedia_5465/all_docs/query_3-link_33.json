{
    "id": "dbpedia_5465_3",
    "rank": 33,
    "data": {
        "url": "https://cucumber.io/docs/gherkin/reference/",
        "read_more_link": "",
        "language": "en",
        "title": "Cucumber Documentation",
        "top_image": "https://cucumber.io/img/favicon.png",
        "meta_img": "https://cucumber.io/img/favicon.png",
        "images": [
            "https://cucumber.io/smartbear/assets/img/nav-icons/Case-Studies.svg",
            "https://cucumber.io/smartbear/assets/img/nav-icons/Webinars.svg",
            "https://cucumber.io/smartbear/assets/img/nav-icons/Ebooks.svg",
            "https://cucumber.io/smartbear/assets/img/nav-icons/Case-Studies.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "/img/favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://cucumber.io/docs/gherkin/reference/",
        "text": "Gherkin uses a set of special keywords to give structure and meaning to executable specifications. Each keyword is translated to many spoken languages; in this reference we’ll use English.\n\nMost lines in a Gherkin document start with one of the keywords.\n\nComments are only permitted at the start of a new line, anywhere in the feature file. They begin with zero or more spaces, followed by a hash sign (#) and some text.\n\nBlock comments are currently not supported by Gherkin.\n\nEither spaces or tabs may be used for indentation. The recommended indentation level is two spaces. Here is an example:\n\nFeature: Guess the word # The first example has two steps Scenario: Maker starts a game When the Maker starts a game Then the Maker waits for a Breaker to join # The second example has three steps Scenario: Breaker joins a game Given the Maker has started a game with the word \"silky\" When the Breaker joins the Maker's game Then the Breaker must guess a word with 5 characters\n\nThe trailing portion (after the keyword) of each step is matched to a code block, called a step definition.\n\nPlease note that some keywords are followed by a colon (:) and some are not. If you add a colon after a keyword that should not be followed by one, your test(s) will be ignored.\n\nKeywords\n\nEach line that isn’t a blank line has to start with a Gherkin keyword, followed by any text you like. The only exceptions are the free-form descriptions placed underneath Example/Scenario, Background, Scenario Outline and Rule lines.\n\nThe primary keywords are:\n\nFeature\n\nRule (as of Gherkin 6)\n\nExample (or Scenario)\n\nGiven, When, Then, And, But for steps (or *)\n\nBackground\n\nScenario Outline (or Scenario Template)\n\nExamples (or Scenarios)\n\nThere are a few secondary keywords as well:\n\n\"\"\" (Doc Strings)\n\n| (Data Tables)\n\n@ (Tags)\n\n# (Comments)\n\nLocalisation\n\nGherkin is localised for many spoken languages; each has their own localised equivalent of these keywords.\n\nFeature\n\nThe purpose of the Feature keyword is to provide a high-level description of a software feature, and to group related scenarios.\n\nThe first primary keyword in a Gherkin document must always be Feature, followed by a : and a short text that describes the feature.\n\nYou can add free-form text underneath Feature to add more description.\n\nThese description lines are ignored by Cucumber at runtime, but are available for reporting (they are included by reporting tools like the official HTML formatter).\n\nFeature: Guess the word The word guess game is a turn-based game for two players. The Maker makes a word for the Breaker to guess. The game is over when the Breaker guesses the Maker's word. Example: Maker starts a game\n\nThe name and the optional description have no special meaning to Cucumber. Their purpose is to provide a place for you to document important aspects of the feature, such as a brief explanation and a list of business rules (general acceptance criteria).\n\nThe free format description for Feature ends when you start a line with the keyword Background, Rule, Example or Scenario Outline (or their alias keywords).\n\nYou can place tags above Feature to group related features, independent of your file and directory structure.\n\nYou can only have a single Feature in a .feature file.\n\nDescriptions\n\nFree-form descriptions (as described above for Feature) can also be placed underneath Example/Scenario, Background, Scenario Outline and Rule.\n\nYou can write anything you like, as long as no line starts with a keyword.\n\nDescriptions can be in the form of Markdown - formatters including the official HTML formatter support this.\n\nRule\n\nThe (optional) Rule keyword has been part of Gherkin since v6.\n\nCucumber Support for Rule\n\nThe Rule keyword is still pretty new. It has been ported in a lot of Cucumber implementation already. Yet if you encounter issues, check the documentation of your Cucumber implementation to make sure it supports it.\n\nThe purpose of the Rule keyword is to represent one business rule that should be implemented. It provides additional information for a feature. A Rule is used to group together several scenarios that belong to this business rule. A Rule should contain one or more scenarios that illustrate the particular rule.\n\nFor example:\n\n# -- FILE: features/gherkin.rule_example.feature Feature: Highlander Rule: There can be only One Example: Only One -- More than one alive Given there are 3 ninjas And there are more than one ninja alive When 2 ninjas meet, they will fight Then one ninja dies (but not me) And there is one ninja less alive Example: Only One -- One alive Given there is only 1 ninja alive Then he (or she) will live forever ;-) Rule: There can be Two (in some cases) Example: Two -- Dead and Reborn as Phoenix ...\n\nExample\n\nThis is a concrete example that illustrates a business rule. It consists of a list of steps.\n\nThe keyword Scenario is a synonym of the keyword Example.\n\nYou can have as many steps as you like, but we recommend 3-5 steps per example. Having too many steps will cause the example to lose its expressive power as a specification and documentation.\n\nIn addition to being a specification and documentation, an example is also a test. As a whole, your examples are an executable specification of the system.\n\nExamples follow this same pattern:\n\nDescribe an initial context (Given steps)\n\nDescribe an event (When steps)\n\nDescribe an expected outcome (Then steps)\n\nSteps\n\nEach step starts with Given, When, Then, And, or But.\n\nCucumber executes each step in a scenario one at a time, in the sequence you’ve written them in. When Cucumber tries to execute a step, it looks for a matching step definition to execute.\n\nKeywords are not taken into account when looking for a step definition. This means you cannot have a Given, When, Then, And or But step with the same text as another step.\n\nCucumber considers the following steps duplicates:\n\nGiven there is money in my account Then there is money in my account\n\nThis might seem like a limitation, but it forces you to come up with a less ambiguous, more clear domain language:\n\nGiven my account has a balance of £430 Then my account should have a balance of £430\n\nGiven\n\nGiven steps are used to describe the initial context of the system - the scene of the scenario. It is typically something that happened in the past.\n\nWhen Cucumber executes a Given step, it will configure the system to be in a well-defined state, such as creating and configuring objects or adding data to a test database.\n\nThe purpose of Given steps is to put the system in a known state before the user (or external system) starts interacting with the system (in the When steps). Avoid talking about user interaction in Given’s. If you were creating use cases, Given’s would be your preconditions.\n\nIt’s okay to have several Given steps (use And or But for number 2 and upwards to make it more readable).\n\nExamples:\n\nMickey and Minnie have started a game\n\nI am logged in\n\nJoe has a balance of £42\n\nWhen\n\nWhen steps are used to describe an event, or an action. This can be a person interacting with the system, or it can be an event triggered by another system.\n\nExamples:\n\nGuess a word\n\nInvite a friend\n\nWithdraw money\n\nImagine it's 1922\n\nMost software does something people could do manually (just not as efficiently).\n\nTry hard to come up with examples that don’t make any assumptions about technology or user interface. Imagine it’s 1922, when there were no computers.\n\nImplementation details should be hidden in the step definitions.\n\nThen\n\nThen steps are used to describe an expected outcome, or result.\n\nThe step definition of a Then step should use an assertion to compare the actual outcome (what the system actually does) to the expected outcome (what the step says the system is supposed to do).\n\nAn outcome should be on an observable output. That is, something that comes out of the system (report, user interface, message), and not a behaviour deeply buried inside the system (like a record in a database).\n\nExamples:\n\nSee that the guessed word was wrong\n\nReceive an invitation\n\nCard should be swallowed\n\nWhile it might be tempting to implement Then steps to look in the database - resist that temptation!\n\nYou should only verify an outcome that is observable for the user (or external system), and changes to a database are usually not.\n\nAnd, But\n\nIf you have successive Given’s or Then’s, you could write:\n\nExample: Multiple Givens Given one thing Given another thing Given yet another thing When I open my eyes Then I should see something Then I shouldn't see something else\n\nOr, you could make the example more fluidly structured by replacing the successive Given’s or Then’s with And’s and But’s:\n\nExample: Multiple Givens Given one thing And another thing And yet another thing When I open my eyes Then I should see something But I shouldn't see something else\n\n*\n\nGherkin also supports using an asterisk (*) in place of any of the normal step keywords. This can be helpful when you have some steps that are effectively a list of things, so you can express it more like bullet points where otherwise the natural language of And etc might not read so elegantly.\n\nFor example:\n\nScenario: All done Given I am out shopping And I have eggs And I have milk And I have butter When I check my list Then I don't need anything\n\nCould be expressed as:\n\nScenario: All done Given I am out shopping * I have eggs * I have milk * I have butter When I check my list Then I don't need anything\n\nBackground\n\nOccasionally you’ll find yourself repeating the same Given steps in all of the scenarios in a Feature.\n\nSince it is repeated in every scenario, this is an indication that those steps are not essential to describe the scenarios; they are incidental details. You can literally move such Given steps to the background, by grouping them under a Background section.\n\nA Background allows you to add some context to the scenarios that follow it. It can contain one or more Given steps, which are run before each scenario, but after any Before hooks.\n\nA Background is placed before the first Scenario/Example, at the same level of indentation.\n\nFor example:\n\nFeature: Multiple site support Only blog owners can post to a blog, except administrators, who can post to all blogs. Background: Given a global administrator named \"Greg\" And a blog named \"Greg's anti-tax rants\" And a customer named \"Dr. Bill\" And a blog named \"Expensive Therapy\" owned by \"Dr. Bill\" Scenario: Dr. Bill posts to his own blog Given I am logged in as Dr. Bill When I try to post to \"Expensive Therapy\" Then I should see \"Your article was published.\" Scenario: Dr. Bill tries to post to somebody else's blog, and fails Given I am logged in as Dr. Bill When I try to post to \"Greg's anti-tax rants\" Then I should see \"Hey! That's not your blog!\" Scenario: Greg posts to a client's blog Given I am logged in as Greg When I try to post to \"Expensive Therapy\" Then I should see \"Your article was published.\"\n\nBackground is also supported at the Rule level, for example:\n\nFeature: Overdue tasks Let users know when tasks are overdue, even when using other features of the app Rule: Users are notified about overdue tasks on first use of the day Background: Given I have overdue tasks Example: First use of the day Given I last used the app yesterday When I use the app Then I am notified about overdue tasks Example: Already used today Given I last used the app earlier today When I use the app Then I am not notified about overdue tasks ...\n\nYou can only have one set of Background steps per Feature or Rule. If you need different Background steps for different scenarios, consider breaking up your set of scenarios into more Rules or more Features.\n\nFor a less explicit alternative to Background, check out conditional hooks.\n\nTips for using Background\n\nDon’t use Background to set up complicated states, unless that state is actually something the client needs to know.\n\nFor example, if the user and site names don’t matter to the client, use a higher-level step such as Given I am logged in as a site owner.\n\nKeep your Background section short.\n\nThe client needs to actually remember this stuff when reading the scenarios. If the Background is more than 4 lines long, consider moving some of the irrelevant details into higher-level steps.\n\nMake your Background section vivid.\n\nUse colourful names, and try to tell a story. The human brain keeps track of stories much better than it keeps track of names like \"User A\", \"User B\", \"Site 1\", and so on.\n\nKeep your scenarios short, and don’t have too many.\n\nIf the Background section has scrolled off the screen, the reader no longer has a full overview of what’s happening. Think about using higher-level steps, or splitting the *.feature file.\n\nScenario Outline\n\nThe Scenario Outline keyword can be used to run the same Scenario multiple times, with different combinations of values.\n\nThe keyword Scenario Template is a synonym of the keyword Scenario Outline.\n\nCopying and pasting scenarios to use different values quickly becomes tedious and repetitive:\n\nScenario: eat 5 out of 12 Given there are 12 cucumbers When I eat 5 cucumbers Then I should have 7 cucumbers Scenario: eat 5 out of 20 Given there are 20 cucumbers When I eat 5 cucumbers Then I should have 15 cucumbers\n\nWe can collapse these two similar scenarios into a Scenario Outline.\n\nScenario outlines allow us to more concisely express these scenarios through the use of a template with < >-delimited parameters:\n\nScenario Outline: eating Given there are <start> cucumbers When I eat <eat> cucumbers Then I should have <left> cucumbers Examples: | start | eat | left | | 12 | 5 | 7 | | 20 | 5 | 15 |\n\nExamples\n\nA Scenario Outline must contain one or more Examples (or Scenarios) section(s). Its steps are interpreted as a template which is never directly run. Instead, the Scenario Outline is run once for each row in the Examples section beneath it (not counting the first header row).\n\nThe steps can use <> delimited parameters that reference headers in the examples table. Cucumber will replace these parameters with values from the table before it tries to match the step against a step definition.\n\nYou can also use parameters in multiline step arguments.\n\nStep Arguments\n\nIn some cases you might want to pass more data to a step than fits on a single line. For this purpose Gherkin has Doc Strings and Data Tables.\n\nDoc Strings\n\nDoc Strings are handy for passing a larger piece of text to a step definition.\n\nThe text should be offset by delimiters consisting of three double-quote marks on lines of their own:\n\nGiven a blog post named \"Random\" with Markdown body \"\"\" Some Title, Eh? =============== Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet, consectetur adipiscing elit. \"\"\"\n\nIn your step definition, there’s no need to find this text and match it in your pattern. It will automatically be passed as the last argument in the step definition.\n\nIndentation of the opening \"\"\" is unimportant, although common practice is two spaces in from the enclosing step. The indentation inside the triple quotes, however, is significant. Each line of the Doc String will be dedented according to the opening \"\"\". Indentation beyond the column of the opening \"\"\" will therefore be preserved.\n\nDoc strings also support using three backticks as the delimiter:\n\nGiven a blog post named \"Random\" with Markdown body ``` Some Title, Eh? =============== Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet, consectetur adipiscing elit. ```\n\nThis might be familiar for those used to writing with Markdown.\n\nTool support for backticks\n\nWhilst all current versions of Cucumber support backticks as the delimiter, many tools like text editors don’t (yet).\n\nIt’s possible to annotate the DocString with the type of content it contains. You specify the content type after the triple quote, as follows:\n\nGiven a blog post named \"Random\" with Markdown body \"\"\"markdown Some Title, Eh? =============== Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet, consectetur adipiscing elit. \"\"\"\n\nTool support for content types\n\nWhilst all current versions of Cucumber support content types as the delimiter, many tools like text editors don’t (yet).\n\nData Tables\n\nData Tables are handy for passing a list of values to a step definition:\n\nGiven the following users exist: | name | email | twitter | | Aslak | aslak@cucumber.io | @aslak_hellesoy | | Julien | julien@cucumber.io | @jbpros | | Matt | matt@cucumber.io | @mattwynne |\n\nJust like Doc Strings, Data Tables will be passed to the step definition as the last argument.\n\nTable Cell Escaping\n\nIf you want to use a newline character in a table cell, you can write this as \\n. If you need a | as part of the cell, you can escape it as \\|. And finally, if you need a \\, you can escape that with \\\\.\n\nData Table API\n\nCucumber provides a rich API for manipulating tables from within step definitions. See the Data Table API reference reference for more details.\n\nSpoken Languages\n\nThe language you choose for Gherkin should be the same language your users and domain experts use when they talk about the domain. Translating between two languages should be avoided.\n\nThis is why Gherkin has been translated to over 70 languages .\n\nHere is a Gherkin scenario written in Norwegian:\n\n# language: no Funksjonalitet: Gjett et ord Eksempel: Ordmaker starter et spill Når Ordmaker starter et spill Så må Ordmaker vente på at Gjetter blir med Eksempel: Gjetter blir med Gitt at Ordmaker har startet et spill med ordet \"bløtt\" Når Gjetter blir med på Ordmakers spill Så må Gjetter gjette et ord på 5 bokstaver\n\nA # language: header on the first line of a feature file tells Cucumber what spoken language to use - for example # language: fr for French. If you omit this header, Cucumber will default to English (en)."
    }
}