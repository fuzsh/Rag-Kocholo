{
    "id": "dbpedia_5465_3",
    "rank": 35,
    "data": {
        "url": "https://circleci.com/docs/contexts/",
        "read_more_link": "",
        "language": "en",
        "title": "Using contexts",
        "top_image": "https://circleci.com/docs/assets/meta/open-graph-cci-docs.jpg",
        "meta_img": "https://circleci.com/docs/assets/meta/open-graph-cci-docs.jpg",
        "images": [
            "https://circleci.com/docs/assets/img/icons/sidebar/circle-logo.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/continue.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/changelog.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/pipeline.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/builds.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/build-agent.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/passed.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/getting-started-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/release.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/sparkle.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/insights-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/orb.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/avatar.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/key.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/lock.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/webhook.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/code.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/admin-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/admin-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/admin-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/admin-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/admin-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/admin-new.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/plans-outline.svg",
            "https://circleci.com/docs/assets/img/icons/sidebar/changelog.svg",
            "https://circleci.com/docs/assets/img/docs/contexts_cloud.png",
            "https://circleci.com/docs/assets/img/docs/org-settings-contexts-v2.png",
            "https://circleci.com/docs/assets/img/docs/org-id.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Secured, cross-project resources",
        "meta_lang": "en",
        "meta_favicon": "/docs/assets/meta/favicon.png",
        "meta_site_name": "",
        "canonical_link": "https://circleci.com/docs/contexts/",
        "text": "yesterday16 min read\n\nCloud\n\nServer v4.x\n\nServer v3.x\n\nContexts provide a mechanism for securing and sharing environment variables across projects. The environment variables are defined as name/value pairs and are injected at runtime. This document describes creating and using contexts in CircleCI.\n\nIf you have existing contexts (or environment variables) and you would like to rename your organization or repository, follow the Rename organizations and repositories guide to make sure you do not lose access to contexts or environment variables in the process.\n\nOverview\n\nManage contexts on the Organization Settings page of the CircleCI web app, or via the API. You must be an organization member to view, create, or edit contexts.\n\nCreate a context and then add environment variables to it. You can use the context key in the workflows section of a project’s .circleci/config.yml file to give any job(s) access to the environment variables associated with the context, as shown in the image below.\n\nTo use environment variables set within a context, the person running the workflow must be a member of the organization for which the context is set.\n\nContext names must be unique for each VCS organization. The default name for a context is org-global. Contexts created with the initial default name of org-global will continue to work.\n\nQuickstart: Create and use a context\n\nUsing the CircleCI web app, select Organization Settings Contexts on the left side navigation.\n\nBe aware that organization members can create contexts, but only organization administrators can restrict them using security groups. The one exception to this case is Bitbucket organizations, which require a user to have the create repositories workspace permission, regardless of their other permissions on the workspace or the repositories it contains.\n\nSelect Create Context, add a unique name for your context and select Create Context in the modal to finalize. The new context will appear in a list with security set to All members to show that anyone in your organization can access this context at runtime.\n\nYou can now select any context created in your list to add environment variables. Once you have a context selected, select Add Environment Variable to enter the variable name and value. Select Add Environment Variable in the modal to finalize.\n\nTo allow a job to access the environment variables stored in a context, add a context key to that job’s entry in the workflows section of the .circleci/config.yml file. For example, in the following example, the run-tests job has access to the environment variables set in the org-global and my-context contexts.\n\nversion: 2.1 workflows: my-workflow: jobs: - run-tests: context: - org-global - my-context jobs: run-tests: docker: - image: cimg/base:2020.01 steps: - checkout - run: name: \"echo environment variables from org-global context\" command: echo $MY_ENV_VAR\n\nIf you move your repository to a new organization, you must also have the context with that unique name set in the new organization.\n\nContexts and environment variable constraints\n\nWhen creating contexts and environment variables, note the following:\n\nThe context name must be:\n\n200 or fewer characters\n\nMust contain at least one non-whitespace character\n\nMust not contain leading, trailing, or vertical whitespace\n\nThe environment variable name must be:\n\n300 or fewer characters\n\nBegin with an alpha (a-z, A-Z) or _ as the first character, and use alphanumeric or _ for the remaining characters\n\nAn environment variable value must have 32k or fewer characters.\n\nAn empty environment variable is considered valid.\n\nEach context is limited to 100 environment variables.\n\nEach organization is limited to 500 contexts.\n\nContext naming for CircleCI server\n\nFor any VCS enterprise installation that includes multiple organizations, the context names across those organizations must be unique. For example, if your GitHub Enterprise installation is named Kiwi and includes two organizations, you cannot add a context called deploy to both organizations. That is, the deploy context name cannot be duplicated in two organizations that exist in the same GitHub Enterprise installation for the Kiwi account. Duplicate contexts within an account will fail with an error.\n\nCombine contexts\n\nYou can combine several contexts for a single job by adding them to the context list. Contexts are applied in order, so in the case of overlaps, later contexts override earlier ones. This way, you can scope contexts to be as small and granular as you like.\n\nRestrict a context\n\nBitbucket repositories do not provide an API that allows CircleCI contexts to be restricted, only GitHub OAuth app accounts support security group restrictions. To find out which GitHub account type you have, refer to the GitHub OAuth integration page.\n\nCircleCI enables you to restrict contexts at run time in the following ways:\n\nUsing security groups\n\nUsing project restrictions\n\nUsing expression restrictions\n\nOnly organization administrators may add restrictions to new or existing contexts.\n\nSecurity groups are your organization’s VCS teams. After a security group is added to a context, only members of that security group who are also CircleCI users may access the context and use the associated environment variables. The default security group is All members, and enables any member of the organization who uses CircleCI to use the context.\n\nOrganization administrators have read/write access to all projects and have unrestricted access to all contexts.\n\nRun workflows with a restricted context\n\nTo invoke a job that uses a restricted context, a user must be a member of one of the security groups or projects assigned to the context, or the expressions assigned to the context must be true. If the user running the workflow does not have access to the context or an expression evaluates to false, the workflow will fail with the Unauthorized status.\n\nApprove jobs that use restricted contexts\n\nAdding an approval job to a workflow gives the option to require manual approval of the use of a restricted context. To restrict running of jobs that are downstream from an approval job, add a restricted context to those downstream jobs, as shown in the example below:\n\nversion: 2.1 # Jobs declaration for build, test and deploy not displayed workflows: jobs: build-test-deploy: - build - test: context: my-restricted-context requires: - build - hold: type: approval # presents manual approval button in the UI requires: - build - deploy: context: deploy-key-restricted-context requires: - build - hold - test\n\nIn this example, the jobs test and deploy are restricted, and deploy will only run if the user who approves the hold job is a member of the security group assigned to the context and deploy-key-restricted-context. When the workflow build-test-deploy runs, the jobs build and test will run, then the hold job will run, which will present a manual approval button in the CircleCI application. This approval job may be approved by any member of the project, but the deploy job will fail as unauthorized if the approver is not part of the restricted context security group.\n\nDelete a context\n\nIf the context is restricted with a group other than All members, you must be a member of that security group to complete this task. To delete a context, follow the steps below:\n\nNavigate to the Organization Settings Contexts in the CircleCI web app.\n\nSelect the X icon in the row of the context you want to delete. A confirmation dialog box will appear.\n\nType \"DELETE\" in the field and then select Delete Context. The context and all associated environment variables will be deleted.\n\nIf a deleted context is used in a job, the job will fail and show an error.\n\nSecurity group restrictions\n\nRestrict a context to a security group or groups\n\nYou must be an organization administrator to complete the following task.\n\nRestricting a context to a security group is supported for orgs integrated through the GitHub OAuth app and not supported for orgs that integrate with CircleCI’s GitHub App, GitLab, or Bitbucket.\n\nNavigate to Organization Settings Contexts in the CircleCI web app to see the list of contexts. The default security group is All members, and allows all users in the organization to invoke jobs with that context.\n\nSelect Create Context if you wish to use a new context, or select the name of an existing context (if using an existing context, you will need to remove the All members security group before adding a new one).\n\nSelect Add Security Group button to view the dialog box.\n\nMake your choices in the dialog box and then select the Add Security Group or Add Project Restriction button to finalize. Contexts will now be restricted to the selections you have made.\n\nSelect Add Environment Variables to add environment variables to the context if none exist, fill out your desired name and value in the dialogue box, then select the Add Environment Variables button to finalize. Use of the environment variables for this context is now limited to members of the security groups.\n\nNavigate back to Organization Settings Contexts in the CircleCI app. The security groups appear in the Security column for the context.\n\nOnly members of the selected groups may now use the context in their workflows or add or remove environment variables for the context.\n\nMake changes to security group context restrictions\n\nChanges to security group restrictions for contexts might not take effect immediately due to caching. To make sure settings are applied immediately, it is best practice for the organization administrator to refresh permissions once the change has been made. The Refresh Permissions button can be found on the Account Integrations page.\n\nAdministrators of CircleCI server installations can find the Refresh Permissions button at <circleci-hostname>/account.\n\nRemove groups from contexts\n\nTo make a context available only to the administrators of the organization, you may remove all of the groups associated with a context. All other users will lose access to that context.\n\nAdd and remove users from teams and groups\n\nGitHub OAuth app users: CircleCI syncs GitHub team and LDAP groups every few hours. If a user is added or removed from a GitHub team or LDAP group, it can take up to a few hours to update the CircleCI records and remove access to the context.\n\nProject restrictions\n\nCircleCI enables you to restrict secret environment variables by adding project restrictions to contexts. Only organization admins may add or remove project restrictions to a new or existing context. After a project restriction is added to a context, only workflows associated with the specified project(s) will have access to the context and its environment variables.\n\nAPI support for project restricted contexts is coming soon.\n\nOrganization Admins have read/write access to all projects, and have unrestricted access to all contexts.\n\nRun workflows with a project restricted context\n\nTo invoke a workflow that uses a restricted context, the workflow must be part of the project the context is restricted to. If the workflow does not have access to the context, the workflow will fail with the Unauthorized status.\n\nRestrict a context to a project\n\nYou must be an organization admin to restrict a context though the method detailed below.\n\nNavigate to the Organization Settings Contexts page of your organization in the CircleCI web app. The list of contexts will be visible.\n\nSelect the name of an existing context, or select Create Context if you want to use a new context.\n\nSelect Add Project Restriction to view the dialog box.\n\nSelect the project name to add to the context, and select Add. Use of the context is now limited to the specified project. Currently, multiple projects must be added individually.\n\nYou should now see a list of the defined project restrictions on the context page.\n\nIf you have environment variables, they should appear on the page. If there are none, you can select Add Environment Variables to add them to the context. Then select Add to finish. Use of the environment variables for this context is now limited to the specified projects.\n\nOnly workflows under the specified projects may now use the context and its environment variables.\n\nRemove project restrictions from contexts\n\nYou must be an organization admin to remove projects from contexts though the method detailed below.\n\nNavigate to Organization Settings Contexts page in the CircleCI web app. The list of contexts will be visible.\n\nSelect the name of the existing context for which you would like to modify restrictions.\n\nSelect X next to the project restriction you would like to remove. The project restriction will be removed for the context.\n\nIf there are no longer any project restrictions for the context, the context and its environment variables are now effectively unrestricted.\n\nExpression restrictions\n\nRestrict contexts by setting up expression restrictions. Expression restrictions are rules that pipeline values must match. Using expression restrictions allows you to create arbitrary constraints on the circumstances in which a context is available for use. For example, you may have a context containing credentials that should only be used for deploying your code from your protected main branch:\n\npipeline.git.branch == \"main\" and not job.ssh.enabled and not (pipeline.config_source starts-with \"api\"\")\n\nTabs and new lines are considered whitespace so can be used to break long lines, but have no other significance. For example, the snippet above could also be written:\n\npipeline.git.branch == \"main\" and not job.ssh.enabled and not (pipeline.config_source starts-with \"api\")\n\nYou can set up expression restrictions using the context restriction API, or via the Context page (Organization Settings Contexts Expression Restrictions) in the CircleCI web app.\n\nRules are expressed in a small language that supports equality checks, numeric comparisons, and boolean and, or, and not operators.\n\nSet an expression restriction\n\nYou must be an organization administrator to set an expression restriction.\n\nFollow these steps to set an expression restriction on a context:\n\nNavigate to the Organization Settings Contexts page of your organization in the CircleCI web app\n\nSelect the context you want to add an expression restriction to\n\nSelect Add Expression Restriction\n\nEnter your expression in the text box and select Add Expression Restriction again to confirm\n\nSet up your API authentication. Steps are available in the API developers guide.\n\nYou are going to need your organization ID. In the CircleCI web app select Organization Settings in the sidebar and copy your \"Organization ID\" somewhere safe.\n\nTo get the ID for your context, list your contexts, as follows, substituting your organization ID:\n\ncurl --request GET \\ --url 'https://circleci.com/api/v2/context?owner-id=<your-org-ID>&page-token=NEXT_PAGE_TOKEN' \\ --header \"Circle-Token: ${CIRCLE_TOKEN}\" \\ --header \"Accept: application/json\" \\ --header \"Content-Type: application/json\" | jq\n\nCopy the ID for your context from the previous API response\n\nCreate your context expression restriction, as follows, substituting your context ID and expression restriction:\n\ncurl --request POST \\ --url https://circleci.com/api/v2/context/<your-context-ID>/restrictions \\ --header \"Circle-Token: ${CIRCLE_TOKEN}\" \\ --header 'content-type: application/json' \\ --data '{\"restriction_type\":\"expression\",\"restriction_value\":\"<your-expression-restriction>\"}'\n\nVariables\n\nPipeline values can be used as variables in an expression restriction. The exception to this is that pipeline.trigger_parameters.* pipeline values cannot be used. Pipeline parameters cannot be used in expression restrictions.\n\nJob-specific variables are also available to use in expressions, as follows:\n\nnametypedescription\n\nIf an expression references a variable that has no value set in the pipeline, the expression will fail closed and prevent use of the context.\n\nErrors\n\nAny errors evaluating an expression will fail closed and prevent use of the context. Errors include the following:\n\nUsing a variable that does not exist\n\nUsing a non-numeric value as an operand to the numeric comparison operators\n\nUsing a non-string value as an operand to the starts-with operator\n\nOperators\n\nThe operators you can use are described in the following table. You can also group sub-expressions with parentheses (, ). as in the example above.\n\nOperator typeOperatorsDescription\n\nPrecedence\n\nThe following table shows operator precedence table, from weakest to strongest binding.\n\nAll operators are left associative. In practice, you should avoid operator chaining for anything other than and or or. This is because evaluation may cause type mismatches for other operators (see Evaluation).\n\nOperatorAssociativity\n\nor\n\nleft\n\nand\n\nleft\n\n== !=\n\nleft\n\nstarts-with\n\n>= > ⇐ <\n\nleft\n\nnot !\n\nEvaluation\n\nAn expression is evaluated to produce a single boolean true or false value.\n\nOther than the boolean value false, all values ultimately evaluate as true.\n\nA variable evaluates to the variable’s value. If the variable does not exist then the expression is immediately considered to have evaluated as false. In other words, expression evaluation will fail closed when it encounters an unknown variable.\n\nAs an expression is evaluated, the result of an operator is effectively embedded \"in place\" as the evaluation continues. For example, to evaluate the following:\n\npipeline.git.branch == \"main\" and not job.ssh.enabled and not (pipeline.config_source starts-with \"api\")\n\nwhere the values are:\n\npipeline.git.branch is \"main\"\n\njob.ssh.enabled is false\n\npipeline.config_source is \"api\"\n\nVariable lookup: replace pipeline.git.branch with its value:\n\n\"main\" == \"main\" and not job.ssh.enabled and not (pipeline.config_source starts-with \"api\")\n\nEvaluate \"main\" == \"main\":\n\ntrue and not job.ssh.enabled and not (pipeline.config_source starts-with \"api\")\n\nVariable lookup: replace job.ssh.enabled with its value:\n\ntrue and not false and not (pipeline.config_source starts-with \"api\")\n\nEvaluate not false:\n\ntrue and true and not (pipeline.config_source starts-with \"api\")\n\nEvaluate true and true:\n\ntrue and not (pipeline.config_source starts-with \"api\")\n\nVariable lookup: replace pipeline.config_source with its value:\n\ntrue and not (\"api\" starts-with \"api\")\n\nEvaluate (\"api\" starts-with \"api\")\n\ntrue and not true\n\nEvaluate not true:\n\ntrue and false\n\nEvaluate true and false:\n\nfalse\n\nThe result is false\n\nContext management with the CLI\n\nBefore using the CLI ensure you have configured the CLI with a token.\n\nYou can use the CircleCI CLI to manage contexts, as an alternative to the web app and the API. With the CLI, you can execute several context-oriented commands.\n\ncreate - Create a new context\n\ndelete - Delete a named context\n\nlist - List all contexts\n\nremove-secret - Remove an environment variable from the named context\n\nshow - Show a context\n\nstore-secret - Store a new environment variable in the named context\n\nThe above list are \"sub-commands\" in the CLI, which would be executed like so:\n\ncircleci context create --org-id <org-id> <context-name> [flags]\n\nRefer to the CLI docs for full details for each command. Many commands require that you include additional information as indicated by parameters delimited by < >. For example, when running circleci context create, you will need to provide a name for the context and your org ID.\n\nEnvironment variable usage\n\nEnvironment variables are used according to a specific precedence order, as follows:\n\nEnvironment variables declared inside a shell command in a run step, for example FOO=bar make install.\n\nEnvironment variables declared with the environment key for a run step\n\nEnvironment variables set with the environment key for a job.\n\nSpecial CircleCI environment variables defined on the Project values and variables page.\n\nContext environment variables (assuming the user has access to the context).\n\nProject-level environment variables set on the Project Settings page in the web app.\n\nEnvironment variables declared inside a shell command run step, for example FOO=bar make install, will override environment variables declared with the environment and contexts keys. Environment variables added on the contexts page will take precedence over variables added on the Project Settings page.\n\nAdd an environment variable to a context\n\nRemove an environment variable from a context\n\nRemoving an environment variable from a context deletes the environment variable from your account.\n\nRotate environment variables with the CLI or API\n\nRotation refers to the process of updating a secret’s value without deleting it or changing its name.\n\nBecause environment variables can be shared, passed around between employees and teams, and exposed inadvertently, it is good practice to periodically rotate secrets. You can automate this process, for example, running a script when an employee leaves the company, or when a secret may have been compromised.\n\nContext environment variables can be rotated using CircleCI’s CLI or API.\n\nSecrets masking\n\nEnvironment variables and contexts may hold project secrets or keys that perform crucial functions for your applications. Secrets masking provides added security within CircleCI by obscuring environment variables in the job output when echo or print is used.\n\nSecrets masking is applied to environment variables set within Project Settings or Contexts in the web app.\n\nThe value of the environment variable or context will not be masked in the job output if:\n\nthe value of the environment variable is less than 4 characters\n\nthe value of the environment variable is equal to one of true, True, false, or False\n\nSecrets masking will only prevent values from appearing in your job output. Invoking a bash shell with the -x or -o xtrace options may inadvertently log unmasked secrets (refer to Using shell scripts). If your secrets appear elsewhere, such as test results or artifacts, they will not be masked. Additionally, values are still accessible to users debugging builds with SSH.\n\nThe secrets masking feature exists as a preventative measure to catch unintentional display of secrets at the output. Best practice is to avoid printing secrets to the output. The are many ways that secrets masking could be bypassed, either accidentally or maliciously. For example, any process that reformats the output of a command or script could remove secrets masking.\n\nSee also\n\nIntroduction to environment variables\n\nUsing workflows to orchestrate jobs"
    }
}