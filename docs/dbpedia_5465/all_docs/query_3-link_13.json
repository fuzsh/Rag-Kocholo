{
    "id": "dbpedia_5465_3",
    "rank": 13,
    "data": {
        "url": "https://www.typescriptlang.org/docs/handbook/2/everyday-types.html",
        "read_more_link": "",
        "language": "en",
        "title": "TypeScript: Documentation",
        "top_image": "https://www.typescriptlang.org/favicon-32x32.png?v=8944a05a8b601855de116c8a56d3b3ae",
        "meta_img": "https://www.typescriptlang.org/favicon-32x32.png?v=8944a05a8b601855de116c8a56d3b3ae",
        "images": [
            "https://gravatar.com/avatar/2484d99c8a58bc51ae587e07a05ba6e2?s=32&&d=blank",
            "https://avatars.githubusercontent.com/u/49038?s=100&u=0b9ac5bf42a8ea2543a05191e150e0213456744e&v=4",
            "https://gravatar.com/avatar/c232fb5cf00305df477f035a89b9f1a4?s=32&&d=blank",
            "https://gravatar.com/avatar/71d2fed56905b0ea9daf87357af10333?s=32&&d=blank",
            "https://gravatar.com/avatar/cd1cc3769958ccc22b86d6a87badfe31?s=32&&d=blank"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "The language primitives.",
        "meta_lang": "en",
        "meta_favicon": "/favicon-32x32.png?v=8944a05a8b601855de116c8a56d3b3ae",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "In this chapter, we’ll cover some of the most common types of values you’ll find in JavaScript code, and explain the corresponding ways to describe those types in TypeScript. This isn’t an exhaustive list, and future chapters will describe more ways to name and use other types.\n\nTypes can also appear in many more places than just type annotations. As we learn about the types themselves, we’ll also learn about the places where we can refer to these types to form new constructs.\n\nWe’ll start by reviewing the most basic and common types you might encounter when writing JavaScript or TypeScript code. These will later form the core building blocks of more complex types.\n\nThe primitives: string, number, and boolean\n\nJavaScript has three very commonly used primitives: string, number, and boolean. Each has a corresponding type in TypeScript. As you might expect, these are the same names you’d see if you used the JavaScript typeof operator on a value of those types:\n\nstring represents string values like \"Hello, world\"\n\nnumber is for numbers like 42. JavaScript does not have a special runtime value for integers, so there’s no equivalent to int or float - everything is simply number\n\nboolean is for the two values true and false\n\nThe type names String, Number, and Boolean (starting with capital letters) are legal, but refer to some special built-in types that will very rarely appear in your code. Always use string, number, or boolean for types.\n\nArrays\n\nTo specify the type of an array like [1, 2, 3], you can use the syntax number[]; this syntax works for any type (e.g. string[] is an array of strings, and so on). You may also see this written as Array<number>, which means the same thing. We’ll learn more about the syntax T<U> when we cover generics.\n\nNote that [number] is a different thing; refer to the section on Tuples.\n\nany\n\nTypeScript also has a special type, any, that you can use whenever you don’t want a particular value to cause typechecking errors.\n\nWhen a value is of type any, you can access any properties of it (which will in turn be of type any), call it like a function, assign it to (or from) a value of any type, or pretty much anything else that’s syntactically legal:\n\nts\n\nletobj: any = { x:0 };\n\n// None of the following lines of code will throw compiler errors.\n\n// Using `any` disables all further type checking, and it is assumed\n\n// you know the environment better than TypeScript.\n\nobj.foo();\n\nobj();\n\nobj.bar = 100;\n\nobj = \"hello\";\n\nconstn: number = obj;\n\nTry\n\nThe any type is useful when you don’t want to write out a long type just to convince TypeScript that a particular line of code is okay.\n\nnoImplicitAny\n\nWhen you don’t specify a type, and TypeScript can’t infer it from context, the compiler will typically default to any.\n\nYou usually want to avoid this, though, because any isn’t type-checked. Use the compiler flag noImplicitAny to flag any implicit any as an error.\n\nType Annotations on Variables\n\nWhen you declare a variable using const, var, or let, you can optionally add a type annotation to explicitly specify the type of the variable:\n\nts\n\nletmyName: string = \"Alice\";\n\nTry\n\nTypeScript doesn’t use “types on the left”-style declarations like int x = 0; Type annotations will always go after the thing being typed.\n\nIn most cases, though, this isn’t needed. Wherever possible, TypeScript tries to automatically infer the types in your code. For example, the type of a variable is inferred based on the type of its initializer:\n\nts\n\n// No type annotation needed -- 'myName' inferred as type 'string'\n\nletmyName = \"Alice\";\n\nTry\n\nFor the most part you don’t need to explicitly learn the rules of inference. If you’re starting out, try using fewer type annotations than you think - you might be surprised how few you need for TypeScript to fully understand what’s going on.\n\nFunctions\n\nFunctions are the primary means of passing data around in JavaScript. TypeScript allows you to specify the types of both the input and output values of functions.\n\nParameter Type Annotations\n\nWhen you declare a function, you can add type annotations after each parameter to declare what types of parameters the function accepts. Parameter type annotations go after the parameter name:\n\nts\n\n// Parameter type annotation\n\nfunctiongreet(name: string) {\n\nconsole.log(\"Hello, \" + name.toUpperCase() + \"!!\");\n\n}\n\nTry\n\nWhen a parameter has a type annotation, arguments to that function will be checked:\n\nts\n\n// Would be a runtime error if executed!\n\ngreet(42);\n\nArgument of type 'number' is not assignable to parameter of type 'string'.2345Argument of type 'number' is not assignable to parameter of type 'string'.Try\n\nEven if you don’t have type annotations on your parameters, TypeScript will still check that you passed the right number of arguments.\n\nReturn Type Annotations\n\nYou can also add return type annotations. Return type annotations appear after the parameter list:\n\nts\n\nfunctiongetFavoriteNumber(): number {\n\nreturn26;\n\n}\n\nTry\n\nMuch like variable type annotations, you usually don’t need a return type annotation because TypeScript will infer the function’s return type based on its return statements. The type annotation in the above example doesn’t change anything. Some codebases will explicitly specify a return type for documentation purposes, to prevent accidental changes, or just for personal preference.\n\nFunctions Which Return Promises\n\nIf you want to annotate the return type of a function which returns a promise, you should use the Promise type:\n\nts\n\nasyncfunctiongetFavoriteNumber(): Promise<number> {\n\nreturn26;\n\n}\n\nTry\n\nAnonymous Functions\n\nAnonymous functions are a little bit different from function declarations. When a function appears in a place where TypeScript can determine how it’s going to be called, the parameters of that function are automatically given types.\n\nHere’s an example:\n\nts\n\nconstnames = [\"Alice\", \"Bob\", \"Eve\"];\n\n// Contextual typing for function - parameter s inferred to have type string\n\nnames.forEach(function (s) {\n\nconsole.log(s.toUpperCase());\n\n});\n\n// Contextual typing also applies to arrow functions\n\nnames.forEach((s) => {\n\nconsole.log(s.toUpperCase());\n\n});\n\nTry\n\nEven though the parameter s didn’t have a type annotation, TypeScript used the types of the forEach function, along with the inferred type of the array, to determine the type s will have.\n\nThis process is called contextual typing because the context that the function occurred within informs what type it should have.\n\nSimilar to the inference rules, you don’t need to explicitly learn how this happens, but understanding that it does happen can help you notice when type annotations aren’t needed. Later, we’ll see more examples of how the context that a value occurs in can affect its type.\n\nObject Types\n\nApart from primitives, the most common sort of type you’ll encounter is an object type. This refers to any JavaScript value with properties, which is almost all of them! To define an object type, we simply list its properties and their types.\n\nFor example, here’s a function that takes a point-like object:\n\nts\n\n// The parameter's type annotation is an object type\n\nfunctionprintCoord(pt: { x: number; y: number }) {\n\nconsole.log(\"The coordinate's x value is \" + pt.x);\n\nconsole.log(\"The coordinate's y value is \" + pt.y);\n\n}\n\nprintCoord({ x:3, y:7 });\n\nTry\n\nHere, we annotated the parameter with a type with two properties - x and y - which are both of type number. You can use , or ; to separate the properties, and the last separator is optional either way.\n\nThe type part of each property is also optional. If you don’t specify a type, it will be assumed to be any.\n\nOptional Properties\n\nObject types can also specify that some or all of their properties are optional. To do this, add a ? after the property name:\n\nts\n\nfunctionprintName(obj: { first: string; last?: string }) {\n\n// ...\n\n}\n\n// Both OK\n\nprintName({ first:\"Bob\" });\n\nprintName({ first:\"Alice\", last:\"Alisson\" });\n\nTry\n\nIn JavaScript, if you access a property that doesn’t exist, you’ll get the value undefined rather than a runtime error. Because of this, when you read from an optional property, you’ll have to check for undefined before using it.\n\nts\n\nfunctionprintName(obj: { first: string; last?: string }) {\n\n// Error - might crash if 'obj.last' wasn't provided!\n\nconsole.log(obj.last.toUpperCase());\n\n'obj.last' is possibly 'undefined'.18048'obj.last' is possibly 'undefined'.\n\nif (obj.last !== undefined) {\n\n// OK\n\nconsole.log(obj.last.toUpperCase());\n\n}\n\n// A safe alternative using modern JavaScript syntax:\n\nconsole.log(obj.last?.toUpperCase());\n\n}\n\nTry\n\nUnion Types\n\nTypeScript’s type system allows you to build new types out of existing ones using a large variety of operators. Now that we know how to write a few types, it’s time to start combining them in interesting ways.\n\nDefining a Union Type\n\nThe first way to combine types you might see is a union type. A union type is a type formed from two or more other types, representing values that may be any one of those types. We refer to each of these types as the union’s members.\n\nLet’s write a function that can operate on strings or numbers:\n\nts\n\nfunctionprintId(id: number | string) {\n\nconsole.log(\"Your ID is: \" + id);\n\n}\n\n// OK\n\nprintId(101);\n\n// OK\n\nprintId(\"202\");\n\n// Error\n\nprintId({ myID:22342 });\n\nArgument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.2345Argument of type '{ myID: number; }' is not assignable to parameter of type 'string | number'.Try\n\nWorking with Union Types\n\nIt’s easy to provide a value matching a union type - simply provide a type matching any of the union’s members. If you have a value of a union type, how do you work with it?\n\nTypeScript will only allow an operation if it is valid for every member of the union. For example, if you have the union string | number, you can’t use methods that are only available on string:\n\nts\n\nfunctionprintId(id: number | string) {\n\nconsole.log(id.toUpperCase());\n\nProperty 'toUpperCase' does not exist on type 'string | number'. Property 'toUpperCase' does not exist on type 'number'.2339Property 'toUpperCase' does not exist on type 'string | number'. Property 'toUpperCase' does not exist on type 'number'.\n\n}\n\nTry\n\nThe solution is to narrow the union with code, the same as you would in JavaScript without type annotations. Narrowing occurs when TypeScript can deduce a more specific type for a value based on the structure of the code.\n\nFor example, TypeScript knows that only a string value will have a typeof value \"string\":\n\nts\n\nfunctionprintId(id: number | string) {\n\nif (typeofid === \"string\") {\n\n// In this branch, id is of type 'string'\n\nconsole.log(id.toUpperCase());\n\n} else {\n\n// Here, id is of type 'number'\n\nconsole.log(id);\n\n}\n\n}\n\nTry\n\nAnother example is to use a function like Array.isArray:\n\nts\n\nfunctionwelcomePeople(x: string[] | string) {\n\nif (Array.isArray(x)) {\n\n// Here: 'x' is 'string[]'\n\nconsole.log(\"Hello, \" + x.join(\" and \"));\n\n} else {\n\n// Here: 'x' is 'string'\n\nconsole.log(\"Welcome lone traveler \" + x);\n\n}\n\n}\n\nTry\n\nNotice that in the else branch, we don’t need to do anything special - if x wasn’t a string[], then it must have been a string.\n\nSometimes you’ll have a union where all the members have something in common. For example, both arrays and strings have a slice method. If every member in a union has a property in common, you can use that property without narrowing:\n\nts\n\n// Return type is inferred as number[] | string\n\nfunctiongetFirstThree(x: number[] | string) {\n\nreturnx.slice(0, 3);\n\n}\n\nTry\n\nIt might be confusing that a union of types appears to have the intersection of those types’ properties. This is not an accident - the name union comes from type theory. The union number | string is composed by taking the union of the values from each type. Notice that given two sets with corresponding facts about each set, only the intersection of those facts applies to the union of the sets themselves. For example, if we had a room of tall people wearing hats, and another room of Spanish speakers wearing hats, after combining those rooms, the only thing we know about every person is that they must be wearing a hat.\n\nType Aliases\n\nWe’ve been using object types and union types by writing them directly in type annotations. This is convenient, but it’s common to want to use the same type more than once and refer to it by a single name.\n\nA type alias is exactly that - a name for any type. The syntax for a type alias is:\n\nts\n\ntypePoint = {\n\nx: number;\n\ny: number;\n\n};\n\n// Exactly the same as the earlier example\n\nfunctionprintCoord(pt: Point) {\n\nconsole.log(\"The coordinate's x value is \" + pt.x);\n\nconsole.log(\"The coordinate's y value is \" + pt.y);\n\n}\n\nprintCoord({ x:100, y:100 });\n\nTry\n\nYou can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type:\n\nts\n\ntypeID = number | string;\n\nTry\n\nNote that aliases are only aliases - you cannot use type aliases to create different/distinct “versions” of the same type. When you use the alias, it’s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type:\n\nts\n\ntypeUserInputSanitizedString = string;\n\nfunctionsanitizeInput(str: string): UserInputSanitizedString {\n\nreturnsanitize(str);\n\n}\n\n// Create a sanitized input\n\nletuserInput = sanitizeInput(getInput());\n\n// Can still be re-assigned with a string though\n\nuserInput = \"new input\";\n\nTry\n\nInterfaces\n\nAn interface declaration is another way to name an object type:\n\nts\n\ninterfacePoint {\n\nx: number;\n\ny: number;\n\n}\n\nfunctionprintCoord(pt: Point) {\n\nconsole.log(\"The coordinate's x value is \" + pt.x);\n\nconsole.log(\"The coordinate's y value is \" + pt.y);\n\n}\n\nprintCoord({ x:100, y:100 });\n\nTry\n\nJust like when we used a type alias above, the example works just as if we had used an anonymous object type. TypeScript is only concerned with the structure of the value we passed to printCoord - it only cares that it has the expected properties. Being concerned only with the structure and capabilities of types is why we call TypeScript a structurally typed type system.\n\nDifferences Between Type Aliases and Interfaces\n\nType aliases and interfaces are very similar, and in many cases you can choose between them freely. Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.\n\nYou’ll learn more about these concepts in later chapters, so don’t worry if you don’t understand all of these right away.\n\nPrior to TypeScript version 4.2, type alias names may appear in error messages, sometimes in place of the equivalent anonymous type (which may or may not be desirable). Interfaces will always be named in error messages.\n\nType aliases may not participate in declaration merging, but interfaces can.\n\nInterfaces may only be used to declare the shapes of objects, not rename primitives.\n\nInterface names will always appear in their original form in error messages, but only when they are used by name.\n\nUsing interfaces with extends can often be more performant for the compiler than type aliases with intersections\n\nFor the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration. If you would like a heuristic, use interface until you need to use features from type.\n\nType Assertions\n\nSometimes you will have information about the type of a value that TypeScript can’t know about.\n\nFor example, if you’re using document.getElementById, TypeScript only knows that this will return some kind of HTMLElement, but you might know that your page will always have an HTMLCanvasElement with a given ID.\n\nIn this situation, you can use a type assertion to specify a more specific type:\n\nts\n\nconstmyCanvas = document.getElementById(\"main_canvas\") asHTMLCanvasElement;\n\nTry\n\nLike a type annotation, type assertions are removed by the compiler and won’t affect the runtime behavior of your code.\n\nYou can also use the angle-bracket syntax (except if the code is in a .tsx file), which is equivalent:\n\nts\n\nconstmyCanvas = <HTMLCanvasElement>document.getElementById(\"main_canvas\");\n\nTry\n\nReminder: Because type assertions are removed at compile-time, there is no runtime checking associated with a type assertion. There won’t be an exception or null generated if the type assertion is wrong.\n\nTypeScript only allows type assertions which convert to a more specific or less specific version of a type. This rule prevents “impossible” coercions like:\n\nts\n\nconstx = \"hello\"asnumber;\n\nConversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.2352Conversion of type 'string' to type 'number' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.Try\n\nSometimes this rule can be too conservative and will disallow more complex coercions that might be valid. If this happens, you can use two assertions, first to any (or unknown, which we’ll introduce later), then to the desired type:\n\nts\n\nconsta = exprasanyasT;\n\nTry\n\nLiteral Types\n\nIn addition to the general types string and number, we can refer to specific strings and numbers in type positions.\n\nOne way to think about this is to consider how JavaScript comes with different ways to declare a variable. Both var and let allow for changing what is held inside the variable, and const does not. This is reflected in how TypeScript creates types for literals.\n\nts\n\nletchangingString = \"Hello World\";\n\nchangingString = \"Olá Mundo\";\n\n// Because `changingString` can represent any possible string, that\n\n// is how TypeScript describes it in the type system\n\nchangingString;\n\nlet changingString: string\n\nconstconstantString = \"Hello World\";\n\n// Because `constantString` can only represent 1 possible string, it\n\n// has a literal type representation\n\nconstantString;\n\nconst constantString: \"Hello World\"\n\nTry\n\nBy themselves, literal types aren’t very valuable:\n\nts\n\nletx: \"hello\" = \"hello\";\n\n// OK\n\nx = \"hello\";\n\n// ...\n\nx = \"howdy\";\n\nType '\"howdy\"' is not assignable to type '\"hello\"'.2322Type '\"howdy\"' is not assignable to type '\"hello\"'.Try\n\nIt’s not much use to have a variable that can only have one value!\n\nBut by combining literals into unions, you can express a much more useful concept - for example, functions that only accept a certain set of known values:\n\nts\n\nfunctionprintText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n\n// ...\n\n}\n\nprintText(\"Hello, world\", \"left\");\n\nprintText(\"G'day, mate\", \"centre\");\n\nArgument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.2345Argument of type '\"centre\"' is not assignable to parameter of type '\"left\" | \"right\" | \"center\"'.Try\n\nNumeric literal types work the same way:\n\nts\n\nfunctioncompare(a: string, b: string): -1 | 0 | 1 {\n\nreturna === b ? 0 : a > b ? 1 : -1;\n\n}\n\nTry\n\nOf course, you can combine these with non-literal types:\n\nts\n\ninterfaceOptions {\n\nwidth: number;\n\n}\n\nfunctionconfigure(x: Options | \"auto\") {\n\n// ...\n\n}\n\nconfigure({ width:100 });\n\nconfigure(\"auto\");\n\nconfigure(\"automatic\");\n\nArgument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.2345Argument of type '\"automatic\"' is not assignable to parameter of type 'Options | \"auto\"'.Try\n\nThere’s one more kind of literal type: boolean literals. There are only two boolean literal types, and as you might guess, they are the types true and false. The type boolean itself is actually just an alias for the union true | false.\n\nLiteral Inference\n\nWhen you initialize a variable with an object, TypeScript assumes that the properties of that object might change values later. For example, if you wrote code like this:\n\nts\n\nconstobj = { counter:0 };\n\nif (someCondition) {\n\nobj.counter = 1;\n\n}\n\nTry\n\nTypeScript doesn’t assume the assignment of 1 to a field which previously had 0 is an error. Another way of saying this is that obj.counter must have the type number, not 0, because types are used to determine both reading and writing behavior.\n\nThe same applies to strings:\n\nts\n\ndeclarefunctionhandleRequest(url: string, method: \"GET\" | \"POST\"): void;\n\nconstreq = { url:\"https://example.com\", method:\"GET\" };\n\nhandleRequest(req.url, req.method);\n\nArgument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.2345Argument of type 'string' is not assignable to parameter of type '\"GET\" | \"POST\"'.Try\n\nIn the above example req.method is inferred to be string, not \"GET\". Because code can be evaluated between the creation of req and the call of handleRequest which could assign a new string like \"GUESS\" to req.method, TypeScript considers this code to have an error.\n\nThere are two ways to work around this.\n\nYou can change the inference by adding a type assertion in either location:\n\nts\n\n// Change 1:\n\nconstreq = { url:\"https://example.com\", method:\"GET\"as\"GET\" };\n\n// Change 2\n\nhandleRequest(req.url, req.methodas\"GET\");\n\nTry\n\nChange 1 means “I intend for req.method to always have the literal type \"GET\"”, preventing the possible assignment of \"GUESS\" to that field after. Change 2 means “I know for other reasons that req.method has the value \"GET\"“.\n\nYou can use as const to convert the entire object to be type literals:\n\nts\n\nconstreq = { url:\"https://example.com\", method:\"GET\" } asconst;\n\nhandleRequest(req.url, req.method);\n\nTry\n\nThe as const suffix acts like const but for the type system, ensuring that all properties are assigned the literal type instead of a more general version like string or number.\n\nnull and undefined\n\nJavaScript has two primitive values used to signal absent or uninitialized value: null and undefined.\n\nTypeScript has two corresponding types by the same names. How these types behave depends on whether you have the strictNullChecks option on.\n\nstrictNullChecks off\n\nWith strictNullChecks off, values that might be null or undefined can still be accessed normally, and the values null and undefined can be assigned to a property of any type. This is similar to how languages without null checks (e.g. C#, Java) behave. The lack of checking for these values tends to be a major source of bugs; we always recommend people turn strictNullChecks on if it’s practical to do so in their codebase.\n\nstrictNullChecks on\n\nWith strictNullChecks on, when a value is null or undefined, you will need to test for those values before using methods or properties on that value. Just like checking for undefined before using an optional property, we can use narrowing to check for values that might be null:\n\nts\n\nfunctiondoSomething(x: string | null) {\n\nif (x === null) {\n\n// do nothing\n\n} else {\n\nconsole.log(\"Hello, \" + x.toUpperCase());\n\n}\n\n}\n\nTry\n\nNon-null Assertion Operator (Postfix !)\n\nTypeScript also has a special syntax for removing null and undefined from a type without doing any explicit checking. Writing ! after any expression is effectively a type assertion that the value isn’t null or undefined:\n\nts\n\nfunctionliveDangerously(x?: number | null) {\n\n// No error\n\nconsole.log(x!.toFixed());\n\n}\n\nTry\n\nJust like other type assertions, this doesn’t change the runtime behavior of your code, so it’s important to only use ! when you know that the value can’t be null or undefined.\n\nEnums\n\nEnums are a feature added to JavaScript by TypeScript which allows for describing a value which could be one of a set of possible named constants. Unlike most TypeScript features, this is not a type-level addition to JavaScript but something added to the language and runtime. Because of this, it’s a feature which you should know exists, but maybe hold off on using unless you are sure. You can read more about enums in the Enum reference page.\n\nLess Common Primitives\n\nIt’s worth mentioning the rest of the primitives in JavaScript which are represented in the type system. Though we will not go into depth here.\n\nbigint\n\nFrom ES2020 onwards, there is a primitive in JavaScript used for very large integers, BigInt:\n\nts\n\n// Creating a bigint via the BigInt function\n\nconstoneHundred: bigint = BigInt(100);\n\n// Creating a BigInt via the literal syntax\n\nconstanotherHundred: bigint = 100n;\n\nTry\n\nYou can learn more about BigInt in the TypeScript 3.2 release notes.\n\nsymbol\n\nThere is a primitive in JavaScript used to create a globally unique reference via the function Symbol():\n\nts\n\nconstfirstName = Symbol(\"name\");\n\nconstsecondName = Symbol(\"name\");\n\nif (firstName === secondName) {\n\nThis comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.2367This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.\n\n// Can't ever happen\n\n}\n\nTry"
    }
}