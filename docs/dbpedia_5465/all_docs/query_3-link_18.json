{
    "id": "dbpedia_5465_3",
    "rank": 18,
    "data": {
        "url": "https://docs.github.com/en/get-started/using-git/about-git",
        "read_more_link": "",
        "language": "en",
        "title": "GitHub Docs",
        "top_image": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
        "meta_img": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Fundamentals",
            "Git"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn about the version control system, Git, and how it works with GitHub.",
        "meta_lang": "en",
        "meta_favicon": "/assets/cb-345/images/site/favicon.png",
        "meta_site_name": "GitHub Docs",
        "canonical_link": "https://docs.github.com/en/get-started/using-git/about-git",
        "text": "About version control and Git\n\nA version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As developers make changes to the project, any earlier version of the project can be recovered at any time.\n\nDevelopers can review project history to find out:\n\nWhich changes were made?\n\nWho made the changes?\n\nWhen were the changes made?\n\nWhy were changes needed?\n\nVCSs give each contributor a unified and consistent view of a project, surfacing work that's already in progress. Seeing a transparent history of changes, who made them, and how they contribute to the development of a project helps team members stay aligned while working independently.\n\nIn a distributed version control system, every developer has a full copy of the project and project history. Unlike once popular centralized version control systems, DVCSs don't need a constant connection to a central repository. Git is the most popular distributed version control system. Git is commonly used for both open source and commercial software development, with significant benefits for individuals, teams and businesses.\n\nGit lets developers see the entire timeline of their changes, decisions, and progression of any project in one place. From the moment they access the history of a project, the developer has all the context they need to understand it and start contributing.\n\nDevelopers work in every time zone. With a DVCS like Git, collaboration can happen any time while maintaining source code integrity. Using branches, developers can safely propose changes to production code.\n\nBusinesses using Git can break down communication barriers between teams and keep them focused on doing their best work. Plus, Git makes it possible to align experts across a business to collaborate on major projects.\n\nAbout repositories\n\nA repository, or Git project, encompasses the entire collection of files and folders associated with a project, along with each file's revision history. The file history appears as snapshots in time called commits. The commits can be organized into multiple lines of development called branches. Because Git is a DVCS, repositories are self-contained units and anyone who has a copy of the repository can access the entire codebase and its history. Using the command line or other ease-of-use interfaces, a Git repository also allows for: interaction with the history, cloning the repository, creating branches, committing, merging, comparing changes across versions of code, and more.\n\nThrough platforms like GitHub, Git also provides more opportunities for project transparency and collaboration. Public repositories help teams work together to build the best possible final product.\n\nHow GitHub works\n\nGitHub hosts Git repositories and provides developers with tools to ship better code through command line features, issues (threaded discussions), pull requests, code review, or the use of a collection of free and for-purchase apps in the GitHub Marketplace. With collaboration layers like the GitHub flow, a community of 100 million developers, and an ecosystem with hundreds of integrations, GitHub changes the way software is built.\n\nGitHub builds collaboration directly into the development process. Work is organized into repositories where developers can outline requirements or direction and set expectations for team members. Then, using the GitHub flow, developers simply create a branch to work on updates, commit changes to save them, open a pull request to propose and discuss changes, and merge pull requests once everyone is on the same page. For more information, see \"GitHub flow.\"\n\nFor GitHub plans and costs, see GitHub Pricing. For information on how GitHub Enterprise compares to other options, see Comparing GitHub to other DevOps solutions.\n\nGitHub and the command line\n\nBasic Git commands\n\nTo use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like GitHub Desktop. Here are some common commands for using Git:\n\ngit init initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.\n\ngit clone creates a local copy of a project that already exists remotely. The clone includes all the project's files, history, and branches.\n\ngit add stages a change. Git tracks changes to a developer's codebase, but it's necessary to stage and take a snapshot of the changes to include them in the project's history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project's history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.\n\ngit commit saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that's been staged with git add will become a part of the snapshot with git commit.\n\ngit status shows the status of changes as untracked, modified, or staged.\n\ngit branch shows the branches being worked on locally.\n\ngit merge merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.\n\ngit pull updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.\n\ngit push updates the remote repository with any commits made locally to a branch.\n\nFor more information, see the full reference guide to Git commands.\n\nExample: Contribute to an existing repository\n\ngit clone https://github.com/owner/repo.git cd repo git branch my-branch git checkout my-branch git add file1.md file2.md git commit -m \"my snapshot\" git push --set-upstream origin my-branch\n\nExample: Start a new repository and publish it to GitHub\n\nFirst, you will need to create a new repository on GitHub. For more information, see \"Hello World.\" Do not initialize the repository with a README, .gitignore or License file. This empty repository will await your code.\n\ngit init my-repo cd my-repo touch README.md git add README.md git commit -m \"add README to initial commit\" git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-NAME.git git push --set-upstream origin main\n\nExample: contribute to an existing branch on GitHub\n\nThis example assumes that you already have a project called repo on the machine and that a new branch has been pushed to GitHub since the last time changes were made locally.\n\ncd repo git pull git checkout feature-a git add file1.md git commit -m \"edit file1\" git push\n\nModels for collaborative development\n\nThere are two primary ways people collaborate on GitHub:\n\nShared repository\n\nFork and pull\n\nWith a shared repository, individuals and teams are explicitly designated as contributors with read, write, or administrator access. This simple permission structure, combined with features like protected branches, helps teams progress quickly when they adopt GitHub."
    }
}