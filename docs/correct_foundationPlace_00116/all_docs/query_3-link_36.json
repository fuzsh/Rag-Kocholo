{
    "id": "correct_foundationPlace_00116_3",
    "rank": 36,
    "data": {
        "url": "https://www.slideshare.net/slideshow/application-lifecycle-management-8907995/8907995",
        "read_more_link": "",
        "language": "en",
        "title": "Application Lifecycle Management",
        "top_image": "https://cdn.slidesharecdn.com/ss_thumbnails/applicationlifecyclemgmt-110818154943-phpapp01-thumbnail.jpg?width=640&height=640&fit=bounds",
        "meta_img": "https://cdn.slidesharecdn.com/ss_thumbnails/applicationlifecyclemgmt-110818154943-phpapp01-thumbnail.jpg?width=640&height=640&fit=bounds",
        "images": [
            "https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=128&q=75 1x, https://public.slidesharecdn.com/images/next/logo-slideshare-scribd-company.svg?w=256&q=75 2x",
            "https://cdn.slidesharecdn.com/profile-photo-TechExcel-48x48.jpg?cb=1523124535",
            "https://image.slidesharecdn.com/applicationlifecyclemgmt-110818154943-phpapp01/85/Application-Lifecycle-Management-1-320.jpg 320w, https://image.slidesharecdn.com/applicationlifecyclemgmt-110818154943-phpapp01/85/Application-Lifecycle-Management-1-638.jpg 638w, https://image.slidesharecdn.com/applicationlifecyclemgmt-110818154943-phpapp01/75/Application-Lifecycle-Management-1-2048.jpg 2048w"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2011-08-18T15:49:40+00:00",
        "summary": "",
        "meta_description": "Application Lifecycle Management - Download as a PDF or view online for free",
        "meta_lang": "en",
        "meta_favicon": "https://public.slidesharecdn.com/_next/static/media/favicon.7bc3d920.ico",
        "meta_site_name": "SlideShare",
        "canonical_link": "https://www.slideshare.net/slideshow/application-lifecycle-management-8907995/8907995",
        "text": "1. Te c h E x c e l White Paper DevSuite Knowledge-Centric Application Lifecycle Management Introduction The Challenge of Modern While application development conjures up many thoughts, Software Development the fundamental core lies in the knowledge gained and used throughout the development process. From informal ideas and As global demand for software continues to grow, and feature requests, to formal specifications, design documents, competition becomes more and more intense, development development plans, test cases, release notes, and user teams are under continuous pressure to deliver high quality documentation, Application Lifecycle Management (ALM) is a products in rapidly shrinking time horizons. In order to knowledge-centric process. Historically, however, development survive and thrive, teams must be agile, strategic, and most teams have managed these vast repositories of knowledge in important, adaptive with their methods. This has lead software virtual silos, with each functional group building their own companies to globalize their development resources, streamline knowledge isolated from the team as a whole. In today’s their development methods, and impose rigorous quality competitive software development environment, the silo-based standards. Organizations must rely on superior design, elegant models will no longer support the ever-changing demands of implementation, and fast time to market. Achieving this goal large distributed organizations. is difficult, however, because seamless collaboration between project management and product development has become To truly optimize the management and development processes, increasingly challenging with today’s globally-distributed teams. distributed teams require a more knowledge-centric ALM approach that will bridge the gaps between teams and smooth TechExcel’s DevSuite enables large development organizations the transitions during each phase of the development lifecycle. to realize the benefits of an integrated multi-process approach TechExcel’s DevSuite was designed with this concept in mind. to the Application Development Lifecycle which, in turn, Every team within a development organization should interact helps enterprises produce better products more quickly than with, and contribute to the ALM knowledge cycle. The end ever before. DevSuite brings the strategic and tactical worlds result is a collaborative environment that saves significant together by allowing proven, management and planning time and resources and enables the enterprise to bring better processes to co-exist seamlessly with prescribed task-driven products to market faster. development processes. 1 DevSuite - Knowledge-centric Application Lifecycle Management\n\n2. Te c h E x c e l White Paper The Development Lifecycle and directly linked to all related and supporting knowledge, scheduled and prioritized within the overall project plan, and finally assigned to the TechExcel DevSuite appropriate resources for implementation. The development team then begins programming work based on the project plan, with each developer TechExcel DevSuite is designed to achieve the objective of balancing having direct access to all associated knowledge using the links created in effective management processes and repeatable low-level development the planning process. processes. The diagram below illustrates the six phases of a typical Application Lifecycle and is divided into the management and The Development phase continues this knowledge cycle by creating development processes, with the primary DevSuite product specified for source code, development notes, use case documents, QA test cases each phase. and testing files, release notes, user documentation, and other types of knowledge items. Unifying the entire development lifecycle with a central Management knowledgebase enables team members to have seamless access to all Management processes always involve strategic decision making; for knowledge related to their work. The resulting benefit is significant because example answering critical questions about an upcoming product not only does overall efficiency improve, but the development team has development project. By their nature, these processes must be flexible and complete confidence that the final released product exactly matches the to a large extent informal. Generally, management processes fall into three product designed by the management team. categories: The diagram on the next page illustrates the ALM Knowledge Cycle within ■ Concept: What could we do? the overall Management and Development business processes. As can be ■ Strategy: What will we do? seen, each process, from concept all the way through validation, contains ■ Planning: How will we do it? specific knowledge that is essential to current development projects but that can also be used and leveraged for future projects. Moreover, this TechExcel DevSuite fully supports these management processes with central repository of knowledge is critical to ensuring that historical records KnowledgeWise, DevSpec, and DevPlan, each of which is easily adaptable are easily obtained for compliance purposes. to any methodology chosen by the management team. Development By contrast, Development processes focus on the efficient execution of the decisions made by the management team: ■ Implementation: Architecture Design, Programming, etc. ■ Validation: Functional Testing, Usability Testing, Bug Fixing, etc. ■ Delivery: Release Management, Documentation, etc. These processes are driven by tight schedules, rigid requirements, limited resources, and strict quality standards. Moreover, they are more formal and structured than Management processes. TechExcel DevSuite fully supports these Development phases with DevTrack and DevTest, each of which is completely configurable to meet any methodology chosen by the development team. The ALM Knowledge Cycle While the Management and Development phases described above represent business processes, there is an underlying knowledge cycle that will always remain the core of any enterprise. The ALM Knowledge Cycle begins with informal product concepts and ideas that are then refined and formalized into product feature specifications. Each feature is then 2 DevSuite - Knowledge-centric Application Lifecycle Management\n\n3. Te c h E x c e l White Paper TechExcel DevSuite and the an effective and flexible process for creating, documenting, and communicating the Fully Designed Product, the subsequent development Application Lifecycle project will have little chance of success. The TechExcel DevSuite has been specifically designed to manage all phases But the Fully Designed Product is never 100% final. It is the rare exception of the Application Lifecycle. We will discuss each of these phases in more that a development project results in exactly what was defined at the detail and review the individual DevSuite product designed to manage that start, which should be expected and, in fact, encouraged. Customer phase below. requirements change, corporate priorities change, competition changes, technology changes, resources and budgets change. This means that Concept (What could we do?) - KnowledgeWise the strategic product definition process must use a dynamic and flexible All development projects begin with ideas. Ideas could include system to accommodate, and take advantage of this constantly changing enhancement requests from customers, feature requests from Product environment. Marketing, design improvements from the development team, or even new product ideas from any employee within your company. This collection of By systematically linking each DevSpec Feature to all of its related knowledge/ideas is the genesis of the final delivered product. knowledge and then linking these Features to the appropriate DevPlan schedules, DevTrack issues, and DevTest test cases, organizations now KnowledgeWise enables the easy and efficient collection and organization have a fully integrated and dynamic system for a knowledge-centric of these informal ideas, gathered from a wide variety of sources using the Application Development Lifecycle. For example, if a Feature is updated built-in Knowledge Portal. Some of these ideas will be discarded, many in DevSpec, including modifying any linked knowledge items, each of the will be consolidated and improved, and others will be accepted as is, but linked records in DevPlan, DevTrack, and DevTest will automatically be this collection, organization, and refinement of knowledge is vital to the flagged with a status such as “Requires Review” and the appropriate team ultimate success of any development project. members notified by email. In fact, organizations can configure the system to prevent the completion of any planning, development, or testing work as long as the record remains in a “Requires Review” status. This ensures that Strategy (What will we do?) - DevSpec every change to every feature specification will be reviewed by all affected Good product ideas may or may not be implemented - these are strategic groups, and that the related items will be updated. decision made by the product management team by balancing priorities, resources, and schedules. The strategic process of compiling conceptual knowledge (ideas) into formalized feature specifications is managed by Planning (How will we do it?): DevPlan DevSpec. More than just the refinement of ideas this formal process results As the Strategy phase nears completion within DevSpec, the project in a commitment by the product management team to what features they planning phase begins with DevPlan. The core framework of DevPlan is will deliver in a final product release. the Development Sub-Project Tree. This can seamlessly share the existing functional tree structure created in DevSpec or remain independent by In DevSpec, a Feature is the primary element that’s managed. The product creating its own work breakdown subproject structure. In either case, management team creates a multi-layered functional tree within DevSpec, the Development Tree leaf will always be a DevSpec Feature with all of with each Feature being a leaf in the appropriate functional branch. A its associated linked knowledge, allowing the planning, scheduling, and DevSpec Feature consists of a definable set of field-level data, including a resource allocation to be managed at the feature level, not necessarily at the set of system fields such as the feature’s current owner, status, and due date. detailed task level. The Feature also includes links to all relevant KnowledgeWise items that represent the collection of ideas from which the feature was generated, While each feature has a set of linked knowledge defined in DevSpec, each as well as all other related documentation, standards, attachments, or subproject within DevPlan’s Development Tree has its own set of related reference items; further leveraging the knowledge-centric design process. knowledge, globally appropriate for all features contained within that Finally, each Feature includes a set of Events, or activity records, to formally hierarchy of the tree. This knowledge could be a variety of items such as manage the review and approval process. general implementation guidelines, performance requirements, industry standards, and Product Marketing documents. The combination of The result is a Fully Designed Product which is the complete collection feature-specific knowledge, and more general subproject-related knowledge of features, and all related and supporting knowledge, that represents fully defines the implementation of each feature. management’s commitment for the final released product. Without 3 DevSuite - Knowledge-centric Application Lifecycle Management\n\n4. Te c h E x c e l White Paper The Development Subproject Tree can be displayed in a standard Gantt chart view for easily defining each feature’s timeline, dependencies, assigned DevTrack always shares the Development Subproject Tree with DevPlan, resources, progress status, percent complete, and other project planning seamlessly integrating Management and Development. While DevPlan related attributes. manages the planning-related attributes of each subproject and feature, DevTrack has a completely independent interface and process definition DevPlan also facilitates the collaboration and communication within focused solely on implementation management. The linked knowledge, the project management team throughout the entire planning process. however, is always shared. The clear benefit is that each developer has Each Development Tree subproject is assigned a primary owner who is direct access and visibility to all knowledge related to the features that responsible for assigning secondary resources as needed and managing have been assigned to him for implementation, including the higher- the overall subproject timeline. Another feature in DevPlan, subproject level subproject knowledge created in DevPlan. All of this related and Events, allows the sub-project team to easily manage all planning-related supporting knowledge is directly available to the developer within the activities such as meetings, brainstorming sessions, discussions, reviews, feature implementation record without the need to change views or focus. and approvals - easily tracked in a calendar view. This increases the visibility of critical tasks and planning milestones and allows for seamless By itself, DevTrack is a very powerful, high-end, enterprise development communication between project management and the implementation management tool, flexible enough to handle both traditional waterfall team. processes as well as the newer agile methodologies. These processes can be easily modeled into any DevTrack project. In fact different teams within Implementation: DevTrack the same DevTrack system can even adopt different process models as At this phase of the development lifecycle, the project has clearly defined needed. Regardless of the process model used, the work itself is organized deliverables (DevSpec) and milestones (DevPlan). These are now handed and managed within the Development Tree structure established in the off to the development team for implementation that is managed by planning phase. DevTrack. DevTrack work is managed with a completely configurable set of tracking data, team members, workflow control and automation, notification, escalation, routing, version control integration, activity tracking, QA Testing, multi-release management, and much more. To manage a single feature implementation, the development team may create many DevTrack issues, assigned to a variety of different team members, for detailed design, incremental coding work, QA Testing, and documentation. Each issue may have a set of issue-specific knowledge associated with it, including development notes, screen mach-ups, detailed design diagrams, QA test cases, and documentation files, further expanding the integrated ALM Knowledge Cycle. In addition, because of the shared Development Subproject Tree, senior- level managers can track the current status of the project as a whole and each feature individually using DevPlan, and even view the entire list of related DevTrack issues within each subproject or feature within the Gantt Chart planning view. This data can then be used to adjust timeframes, resources, and even reallocate features to different releases as needed. Validation: DevTest While ad-hoc testing and unit testing is typically managed within DevTrack’s development framework, functional regression testing, performance testing, and usability testing are all managed with DevTest. As with the other DevSuite products, DevTest uses a tree structure to 4 DevSuite - Knowledge-centric Application Lifecycle Management"
    }
}