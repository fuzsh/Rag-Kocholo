{
    "id": "dbpedia_1609_1",
    "rank": 76,
    "data": {
        "url": "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html",
        "read_more_link": "",
        "language": "en",
        "title": "Amazon RDS for Microsoft SQL Server",
        "top_image": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "meta_img": "https://docs.aws.amazon.com/assets/images/favicon.ico",
        "images": [
            "https://d1ge0kk1l5kms0.cloudfront.net/images/G/01/webservices/console/warning.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Amazon Relational Database Service",
            "RDS",
            "DB Instance"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Use Microsoft SQL Server on Amazon RDS, with the different features available.",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html",
        "text": "Amazon RDS supports several versions and editions of Microsoft SQL Server. The following table shows the most recent supported minor version of each major version. For the full list of supported versions, editions, and RDS engine versions, see Microsoft SQL Server versions on Amazon RDS.\n\nFor information about licensing for SQL Server, see Licensing Microsoft SQL Server on Amazon RDS. For information about SQL Server builds, see this Microsoft support article about Where to find information about the latest SQL Server builds.\n\nWith Amazon RDS, you can create DB instances and DB snapshots, point-in-time restores, and automated or manual backups. DB instances running SQL Server can be used inside a VPC. You can also use Secure Sockets Layer (SSL) to connect to a DB instance running SQL Server, and you can use transparent data encryption (TDE) to encrypt data at rest. Amazon RDS currently supports Multi-AZ deployments for SQL Server using SQL Server Database Mirroring (DBM) or Always On Availability Groups (AGs) as a high-availability, failover solution.\n\nTo deliver a managed service experience, Amazon RDS does not provide shell access to DB instances, and it restricts access to certain system procedures and tables that require advanced privileges. Amazon RDS supports access to databases on a DB instance using any standard SQL client application such as Microsoft SQL Server Management Studio. Amazon RDS does not allow direct host access to a DB instance via Telnet, Secure Shell (SSH), or Windows Remote Desktop Connection. When you create a DB instance, the master user is assigned to the db_owner role for all user databases on that instance, and has all database-level permissions except for those that are used for backups. Amazon RDS manages backups for you.\n\nBefore creating your first DB instance, you should complete the steps in the setting up section of this guide. For more information, see Setting up for Amazon RDS.\n\nCommon management tasks for Microsoft SQL Server on Amazon RDS\n\nThe following are the common management tasks you perform with an Amazon RDS for SQL Server DB instance, with links to relevant documentation for each task.\n\nThere are also advanced administrative tasks for working with SQL Server DB instances. For more information, see the following documentation:\n\nLimitations for Microsoft SQL Server DB instances\n\nThe Amazon RDS implementation of Microsoft SQL Server on a DB instance has some limitations that you should be aware of:\n\nDB instance class support for Microsoft SQL Server\n\nThe computation and memory capacity of a DB instance is determined by its DB instance class. The DB instance class you need depends on your processing power and memory requirements. For more information, see DB instance classes.\n\nThe following list of DB instance classes supported for Microsoft SQL Server is provided here for your convenience. For the most current list, see the RDS console: https://console.aws.amazon.com/rds/.\n\nNot all DB instance classes are available on all supported SQL Server minor versions. For example, some newer DB instance classes such as db.r6i aren't available on older minor versions. You can use the describe-orderable-db-instance-options AWS CLI command to find out which DB instance classes are available for your SQL Server edition and version.\n\nMicrosoft SQL Server security\n\nThe Microsoft SQL Server database engine uses role-based security. The master user name that you specify when you create a DB instance is a SQL Server Authentication login that is a member of the processadmin, public, and setupadmin fixed server roles.\n\nAny user who creates a database is assigned to the db_owner role for that database and has all database-level permissions except for those that are used for backups. Amazon RDS manages backups for you.\n\nThe following server-level roles aren't available in Amazon RDS for SQL Server:\n\nThe following server-level permissions aren't available on RDS for SQL Server DB instances:\n\nCompliance program support for Microsoft SQL Server DB instances\n\nAWS Services in scope have been fully assessed by a third-party auditor and result in a certification, attestation of compliance, or Authority to Operate (ATO). For more information, see AWS services in scope by compliance program.\n\nHIPAA support for Microsoft SQL Server DB instances\n\nYou can use Amazon RDS for Microsoft SQL Server databases to build HIPAA-compliant applications. You can store healthcare-related information, including protected health information (PHI), under a Business Associate Agreement (BAA) with AWS. For more information, see HIPAA compliance.\n\nAmazon RDS for SQL Server supports HIPAA for the following versions and editions:\n\nTo enable HIPAA support on your DB instance, set up the following three components.\n\nSSL support for Microsoft SQL Server DB instances\n\nYou can use SSL to encrypt connections between your applications and your Amazon RDS DB instances running Microsoft SQL Server. You can also force all connections to your DB instance to use SSL. If you force connections to use SSL, it happens transparently to the client, and the client doesn't have to do any work to use SSL.\n\nSSL is supported in all AWS Regions and for all supported SQL Server editions. For more information, see Using SSL with a Microsoft SQL Server DB instance.\n\nMicrosoft SQL Server versions on Amazon RDS\n\nYou can specify any currently supported Microsoft SQL Server version when creating a new DB instance. You can specify the Microsoft SQL Server major version (such as Microsoft SQL Server 14.00), and any supported minor version for the specified major version. If no version is specified, Amazon RDS defaults to a supported version, typically the most recent version. If a major version is specified but a minor version is not, Amazon RDS defaults to a recent release of the major version you have specified.\n\nThe following table shows the supported versions for all editions and all AWS Regions, except where noted. You can also use the describe-db-engine-versions AWS CLI command to see a list of supported versions, as well as defaults for newly created DB instances. The following table shows the SQL Server versions supported in RDS:\n\nVersion management in Amazon RDS\n\nAmazon RDS includes flexible version management that enables you to control when and how your DB instance is patched or upgraded. This enables you to do the following for your DB engine:\n\nMicrosoft SQL Server engine patching in Amazon RDS\n\nAmazon RDS periodically aggregates official Microsoft SQL Server database patches into a DB instance engine version that's specific to Amazon RDS. For more information about the Microsoft SQL Server patches in each engine version, see Version and feature support on Amazon RDS.\n\nCurrently, you manually perform all engine upgrades on your DB instance. For more information, see Upgrading the Microsoft SQL Server DB engine.\n\nDeprecation schedule for major engine versions of Microsoft SQL Server on Amazon RDS\n\nThe following table displays the planned schedule of deprecations for major engine versions of Microsoft SQL Server.\n\nMicrosoft SQL Server features on Amazon RDS\n\nThe supported SQL Server versions on Amazon RDS include the following features. In general, a version also includes features from the previous versions, unless otherwise noted in the Microsoft documentation.\n\nMicrosoft SQL Server 2022 features\n\nSQL Server 2022 includes many new features, such as the following:\n\nFor the full list of SQL Server 2022 features, see What's new in SQL Server 2022 (16.x) in the Microsoft documentation.\n\nFor a list of unsupported features, see Features not supported and features with limited support.\n\nMicrosoft SQL Server 2019 features\n\nSQL Server 2019 includes many new features, such as the following:\n\nFor the full list of SQL Server 2019 features, see What's new in SQL Server 2019 (15.x) in the Microsoft documentation.\n\nFor a list of unsupported features, see Features not supported and features with limited support.\n\nMicrosoft SQL Server 2017 features\n\nSQL Server 2017 includes many new features, such as the following:\n\nFor the full list of SQL Server 2017 features, see What's new in SQL Server 2017 in the Microsoft documentation.\n\nFor a list of unsupported features, see Features not supported and features with limited support.\n\nMicrosoft SQL Server 2016 features\n\nAmazon RDS supports the following features of SQL Server 2016:\n\nFor the full list of SQL Server 2016 features, see What's new in SQL Server 2016 in the Microsoft documentation.\n\nMicrosoft SQL Server 2014 end of support on Amazon RDS\n\nSQL Server 2014 has reached its end of support on Amazon RDS.\n\nRDS is upgrading all existing DB instances that are still using SQL Server 2014 to the latest minor version of SQL Server 2016. For more information, see Version management in Amazon RDS.\n\nMicrosoft SQL Server 2012 end of support on Amazon RDS\n\nSQL Server 2012 has reached its end of support on Amazon RDS.\n\nRDS is upgrading all existing DB instances that are still using SQL Server 2012 to the latest minor version of SQL Server 2016. For more information, see Version management in Amazon RDS.\n\nMicrosoft SQL Server 2008 R2 end of support on Amazon RDS\n\nSQL Server 2008 R2 has reached its end of support on Amazon RDS.\n\nRDS is upgrading all existing DB instances that are still using SQL Server 2008 R2 to the latest minor version of SQL Server 2012. For more information, see Version management in Amazon RDS.\n\nChange data capture support for Microsoft SQL Server DB instances\n\nAmazon RDS supports change data capture (CDC) for your DB instances running Microsoft SQL Server. CDC captures changes that are made to the data in your tables, and stores metadata about each change that you can access later. For more information, see Change data capture in the Microsoft documentation.\n\nAmazon RDS supports CDC for the following SQL Server editions and versions:\n\nTo use CDC with your Amazon RDS DB instances, first enable or disable CDC at the database level by using RDS-provided stored procedures. After that, any user that has the db_owner role for that database can use the native Microsoft stored procedures to control CDC on that database. For more information, see Using change data capture.\n\nYou can use CDC and AWS Database Migration Service to enable ongoing replication from SQL Server DB instances.\n\nFeatures not supported and features with limited support\n\nThe following Microsoft SQL Server features aren't supported on Amazon RDS:\n\nThe following Microsoft SQL Server features have limited support on Amazon RDS:\n\nThe following features aren't supported on Amazon RDS with SQL Server 2022:\n\nMulti-AZ deployments using Microsoft SQL Server Database Mirroring or Always On availability groups\n\nAmazon RDS supports Multi-AZ deployments for DB instances running Microsoft SQL Server by using SQL Server Database Mirroring (DBM) or Always On Availability Groups (AGs). Multi-AZ deployments provide increased availability, data durability, and fault tolerance for DB instances. In the event of planned database maintenance or unplanned service disruption, Amazon RDS automatically fails over to the up-to-date secondary replica so database operations can resume quickly without manual intervention. The primary and secondary instances use the same endpoint, whose physical network address transitions to the passive secondary replica as part of the failover process. You don't have to reconfigure your application when a failover occurs.\n\nAmazon RDS manages failover by actively monitoring your Multi-AZ deployment and initiating a failover when a problem with your primary occurs. Failover doesn't occur unless the standby and primary are fully in sync. Amazon RDS actively maintains your Multi-AZ deployment by automatically repairing unhealthy DB instances and re-establishing synchronous replication. You don't have to manage anything. Amazon RDS handles the primary, the witness, and the standby instance for you. When you set up SQL Server Multi-AZ, RDS configures passive secondary instances for all of the databases on the instance.\n\nFor more information, see Multi-AZ deployments for Amazon RDS for Microsoft SQL Server.\n\nUsing Transparent Data Encryption to encrypt data at rest\n\nAmazon RDS supports Microsoft SQL Server Transparent Data Encryption (TDE), which transparently encrypts stored data. Amazon RDS uses option groups to enable and configure these features. For more information about the TDE option, see Support for Transparent Data Encryption in SQL Server.\n\nFunctions and stored procedures for Amazon RDS for Microsoft SQL Server\n\nFollowing, you can find a list of the Amazon RDS functions and stored procedures that help automate SQL Server tasks.\n\nLocal time zone for Microsoft SQL Server DB instances\n\nThe time zone of an Amazon RDS DB instance running Microsoft SQL Server is set by default. The current default is Coordinated Universal Time (UTC). You can set the time zone of your DB instance to a local time zone instead, to match the time zone of your applications.\n\nYou set the time zone when you first create your DB instance. You can create your DB instance by using the AWS Management Console, the Amazon RDS API CreateDBInstance action, or the AWS CLI create-db-instance command.\n\nIf your DB instance is part of a Multi-AZ deployment (using SQL Server DBM or AGs), then when you fail over, your time zone remains the local time zone that you set. For more information, see Multi-AZ deployments using Microsoft SQL Server Database Mirroring or Always On availability groups.\n\nWhen you request a point-in-time restore, you specify the time to restore to. The time is shown in your local time zone. For more information, see Restoring a DB instance to a specified time.\n\nThe following are limitations to setting the local time zone on your DB instance:\n\nSupported time zones\n\nYou can set your local time zone to one of the values listed in the following table."
    }
}