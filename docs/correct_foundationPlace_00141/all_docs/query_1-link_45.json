{
    "id": "correct_foundationPlace_00141_1",
    "rank": 45,
    "data": {
        "url": "https://www.gnu.org/software/emacs/manual/html_mono/modus-themes.html",
        "read_more_link": "",
        "language": "en",
        "title": "Modus themes for GNU Emacs",
        "top_image": "https://www.gnu.org/graphics/gnu-head-mini.png",
        "meta_img": "https://www.gnu.org/graphics/gnu-head-mini.png",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "Modus themes for GNU Emacs"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Modus themes for GNU Emacs",
        "meta_lang": "",
        "meta_favicon": "/graphics/gnu-head-mini.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "4 Customization Options\n\nThe Modus themes are highly configurable, though they should work well without any further tweaks. By default, all customization options are set to nil, unless otherwise noted in this manual.\n\nRemember that all customization options must be evaluated before loading a theme (Enable and load). If the theme is already active, it must be reloaded for changes in user options to come into force.\n\nBelow is a summary of what you will learn in the subsequent sections of this manual.\n\n(setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-mixed-fonts nil modus-themes-subtle-line-numbers nil modus-themes-intense-mouseovers nil modus-themes-deuteranopia t modus-themes-tabs-accented t modus-themes-variable-pitch-ui nil modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related modus-themes-fringes nil ; {nil,'subtle,'intense} ;; Options for `modus-themes-lang-checkers' are either nil (the ;; default), or a list of properties that may include any of those ;; symbols: `straight-underline', `text-also', `background', ;; `intense' OR `faint'. modus-themes-lang-checkers nil ;; Options for `modus-themes-mode-line' are either nil, or a list ;; that can combine any of `3d' OR `moody', `borderless', ;; `accented', a natural number for extra padding (or a cons cell ;; of padding and NATNUM), and a floating point for the height of ;; the text relative to the base font size (or a cons cell of ;; height and FLOAT) modus-themes-mode-line '(accented borderless (padding . 4) (height . 0.9)) ;; Same as above: ;; modus-themes-mode-line '(accented borderless 4 0.9) ;; Options for `modus-themes-markup' are either nil, or a list ;; that can combine any of `bold', `italic', `background', ;; `intense'. modus-themes-markup '(background italic) ;; Options for `modus-themes-syntax' are either nil (the default), ;; or a list of properties that may include any of those symbols: ;; `faint', `yellow-comments', `green-strings', `alt-syntax' modus-themes-syntax nil ;; Options for `modus-themes-hl-line' are either nil (the default), ;; or a list of properties that may include any of those symbols: ;; `accented', `underline', `intense' modus-themes-hl-line '(underline accented) ;; Options for `modus-themes-paren-match' are either nil (the ;; default), or a list of properties that may include any of those ;; symbols: `bold', `intense', `underline' modus-themes-paren-match '(bold intense) ;; Options for `modus-themes-links' are either nil (the default), ;; or a list of properties that may include any of those symbols: ;; `neutral-underline' OR `no-underline', `faint' OR `no-color', ;; `bold', `italic', `background' modus-themes-links '(neutral-underline background) ;; Options for `modus-themes-box-buttons' are either nil (the ;; default), or a list that can combine any of `flat', `accented', ;; `faint', `variable-pitch', `underline', `all-buttons', the ;; symbol of any font weight as listed in `modus-themes-weights', ;; and a floating point number (e.g. 0.9) for the height of the ;; button's text. modus-themes-box-buttons '(variable-pitch flat faint 0.9) ;; Options for `modus-themes-prompts' are either nil (the ;; default), or a list of properties that may include any of those ;; symbols: `background', `bold', `gray', `intense', `italic' modus-themes-prompts '(intense bold) ;; The `modus-themes-completions' is an alist that reads three ;; keys: `matches', `selection', `popup'. Each accepts a nil ;; value (or empty list) or a list of properties that can include ;; any of the following (for WEIGHT read further below): ;; ;; `matches' - `background', `intense', `underline', `italic', WEIGHT ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT ;; `popup' - same as `selected' ;; `t' - applies to any key not explicitly referenced (check docs) ;; ;; WEIGHT is a symbol such as `semibold', `light', or anything ;; covered in `modus-themes-weights'. Bold is used in the absence ;; of an explicit WEIGHT. modus-themes-completions '((matches . (extrabold)) (selection . (semibold accented)) (popup . (accented intense))) modus-themes-mail-citations nil ; {nil,'intense,'faint,'monochrome} ;; Options for `modus-themes-region' are either nil (the default), ;; or a list of properties that may include any of those symbols: ;; `no-extend', `bg-only', `accented' modus-themes-region '(bg-only no-extend) ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only modus-themes-diffs 'desaturated modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background} modus-themes-org-agenda ; this is an alist: read the manual or its doc string '((header-block . (variable-pitch 1.3)) (header-date . (grayscale workaholic bold-today 1.1)) (event . (accented varied)) (scheduled . uniform) (habit . traffic-light)) modus-themes-headings ; this is an alist: read the manual or its doc string '((1 . (overline background variable-pitch 1.3)) (2 . (rainbow overline 1.1)) (t . (semibold))))\n\nOption for inhibiting theme reload\n\nOption for red-green color deficiency or deuteranopia\n\nOption for more bold constructs\n\nOption for more italic constructs\n\nOption for syntax highlighting\n\nOption for font mixing\n\nOption for links\n\nOption for box buttons\n\nOption for command prompt styles\n\nOption for mode line presentation\n\nOption for accented background in tab interfaces\n\nOption for completion framework aesthetics\n\nOption for mail citations\n\nOption for fringe visibility\n\nOption for language checkers\n\nOption for line highlighting\n\nOption for line numbers\n\nOption for mouseover effects\n\nOption for markup style in Org and others\n\nOption for parenthesis matching\n\nOption for active region\n\nOption for diff buffer looks\n\nOption for org-mode block styles\n\nOption for Org agenda constructs\n\nOption for the headings’ overall style\n\nOption for variable-pitch font in UI elements\n\n4.1 Option for inhibiting theme reload\n\nBrief: Toggle reloading of the active theme when an option is changed through the Customize UI.\n\nSymbol: modus-themes-inhibit-reload (‘boolean’ type)\n\nPossible values:\n\nnil\n\nt (default)\n\nBy default, customizing a theme-related user option through the Custom interfaces or with M-x customize-set-variable will not reload the currently active Modus theme.\n\nEnable this behavior by setting this variable to nil.\n\nRegardless of this option, the active theme must be reloaded for changes to user options to take effect (Enable and load).\n\n4.2 Option for red-green color deficiency or deuteranopia\n\nBrief: When non-nil use red/blue color-coding instead of red/green, where appropriate.\n\nSymbol: modus-themes-deuteranopia (‘boolean’ type)\n\nPossible values:\n\nnil (default)\n\nt\n\nThis is to account for red-green color deficiency, also know as deuteranopia and variants. It applies to all contexts where there can be a color-coded distinction between failure or success, a to-do or done state, a mark for deletion versus a mark for selection (e.g. in Dired), current and lazily highlighted search matches, removed lines in diffs as opposed to added ones, and so on.\n\nNote that this does not change all colors throughout the active theme, but only applies to cases that have color-coding significance. For example, regular code syntax highlighting is not affected. There is no such need because of the themes’ overarching commitment to the highest legibility standard, which ensures that text is readable regardless of hue, as well as the predominance of colors on the blue-cyan-magenta-purple side of the spectrum.\n\nWhy are colors mostly variants of blue, magenta, cyan?.\n\n4.3 Option for more bold constructs\n\nBrief: Use bold for code syntax highlighting and related.\n\nSymbol: modus-themes-bold-constructs (‘boolean’ type)\n\nPossible values:\n\nnil (default)\n\nt\n\nThe default is to use a bold typographic weight only when it is required.\n\nWith a non-nil value (t) display several syntactic constructs in bold weight. This concerns keywords and other important aspects of code syntax. It also affects certain mode line indicators and command-line prompts.\n\nAdvanced users may also want to configure the exact attributes of the bold face.\n\nConfigure bold and italic faces.\n\n4.4 Option for more italic constructs\n\nBrief: Use italics for code syntax highlighting and related.\n\nSymbol: modus-themes-italic-constructs (‘boolean’ type)\n\nPossible values:\n\nnil (default)\n\nt\n\nThe default is to not use slanted text forms (italics) unless it is absolutely necessary.\n\nWith a non-nil value (t) choose to render more faces in italics. This typically affects documentation strings and code comments.\n\nAdvanced users may also want to configure the exact attributes of the italic face.\n\nConfigure bold and italic faces.\n\n4.5 Option for syntax highlighting\n\nBrief: Set the overall style of code syntax highlighting.\n\nSymbol: modus-themes-syntax (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nfaint\n\nyellow-comments\n\ngreen-strings\n\nalt-syntax\n\nThe default (a nil value or an empty list) is to use a balanced combination of colors on the cyan-blue-magenta side of the spectrum. There is little to no use of greens, yellows, and reds. Comments are gray, strings are blue colored, doc strings are a shade of cyan, while color combinations are designed to avoid exaggerations.\n\nThe property faint fades the saturation of all applicable colors, where that is possible or appropriate.\n\nThe property yellow-comments applies a yellow color to comments.\n\nThe property green-strings applies a green color to strings and a green tint to doc strings.\n\nThe property alt-syntax changes the combination of colors beyond strings and comments, so that the effective palette is broadened to provide greater variety relative to the default.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(faint) (green-strings yellow-comments) (alt-syntax green-strings yellow-comments) (faint alt-syntax green-strings yellow-comments)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-syntax '(faint alt-syntax))\n\nIndependent of this variable, users may also control the use of a bold weight or italic text: modus-themes-bold-constructs and modus-themes-italic-constructs.\n\nOption for more bold constructs.\n\nOption for more italic constructs.\n\n4.6 Option for font mixing\n\nBrief: Toggle the use of monospaced fonts for spacing-sensitive constructs (affects font families).\n\nSymbol: modus-themes-mixed-fonts (‘boolean’ type)\n\nPossible values:\n\nnil (default)\n\nt\n\nWhen set to non-nil (t), configure some spacing-sensitive faces like Org tables and code blocks to always inherit from the fixed-pitch face. This is to ensure that certain constructs like code blocks and tables remain monospaced even when users opt for a mode that remaps typeface families, such as the built-in M-x variable-pitch-mode. Otherwise the layout would appear broken, due to how spacing is done.\n\nFor a consistent experience, user may need to specify the font family of the fixed-pitch face.\n\nFont configurations for Org and others.\n\nFurthermore, users may prefer to use another package for handling mixed typeface configurations, rather than letting the theme do it, perhaps because a purpose-specific package has extra functionality. Two possible options are org-variable-pitch and mixed-pitch.\n\n4.7 Option for links\n\nBrief: Control the style of links to web pages, files, buffers…\n\nSymbol: modus-themes-links (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nUnderline style:\n\nneutral-underline\n\nno-underline\n\nText coloration:\n\nfaint\n\nno-color\n\nbold\n\nitalic\n\nbackground\n\nThe default (a nil value or an empty list) is a prominent text color, typically blue, with an underline of the same color.\n\nFor the style of the underline, a neutral-underline property turns the color of the line into a subtle gray, while the no-underline property removes the line altogether. If both of those are set, the latter takes precedence.\n\nFor text coloration, a faint property desaturates the color of the text and the underline, unless the underline is affected by the aforementioned properties. While a no-color property removes the color from the text. If both of those are set, the latter takes precedence.\n\nA bold property applies a heavy typographic weight to the text of the link.\n\nAn italic property adds a slant to the link’s text (italic or oblique forms, depending on the typeface).\n\nA background property applies a subtle tinted background color.\n\nIn case both no-underline and no-color are set, then a subtle gray background is applied to all links. This can still be combined with the bold and italic properties.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(faint) (no-underline faint) (no-color no-underline bold) (italic bold background no-color no-underline)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-links '(neutral-underline background))\n\nThe placement of the underline, meaning its proximity to the text, is controlled by x-use-underline-position-properties, x-underline-at-descent-line, underline-minimum-offset. Please refer to their documentation strings.\n\n4.8 Option for box buttons\n\nBrief: Control the style of buttons in the Custom UI and related.\n\nSymbol: modus-themes-box-buttons (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nflat\n\naccented\n\nfaint\n\nvariable-pitch\n\nunderline\n\nA font weight, which must be supported by the underlying typeface:\n\nthin\n\nultralight\n\nextralight\n\nlight\n\nsemilight\n\nregular\n\nmedium\n\nsemibold\n\nbold\n\nheavy\n\nextrabold\n\nultrabold\n\nA floating point as a height multiple of the default or a cons cell in the form of ‘(height . FLOAT)’\n\nall-buttons\n\nThe default (a nil value or an empty list) is a gray background combined with a pseudo three-dimensional effect.\n\nThe flat property makes the button two dimensional.\n\nThe accented property changes the background from gray to an accent color.\n\nThe faint property reduces the overall coloration.\n\nThe variable-pitch property applies a proportionately spaced typeface to the button~s text.\n\nFont configurations for Org and others.\n\nThe underline property draws a line below the affected text and removes whatever box effect. This is optimal when Emacs runs inside a terminal emulator (More accurate colors in terminal emulators). If flat and underline are defined together, the latter takes precedence.\n\nThe symbol of a weight attribute adjusts the font of the button accordingly, such as light, semibold, etc. Valid symbols are defined in the variable modus-themes-weights.\n\nConfigure bold and italic faces.\n\nA number, expressed as a floating point (e.g. ‘0.9’), adjusts the height of the button’s text to that many times the base font size. The default height is the same as ‘1.0’, though it need not be explicitly stated. Instead of a floating point, an acceptable value can be in the form of a cons cell like ‘(height . FLOAT)’ or ‘(height FLOAT)’, where FLOAT is the given number.\n\nThe all-buttons property extends the box button effect (or the aforementioned properties) to the faces of the generic widget library. By default, those do not look like the buttons of the Custom UI as they are ordinary text wrapped in square brackets.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(flat) (variable-pitch flat) (variable-pitch flat semibold 0.9) (variable-pitch flat semibold (height 0.9)) ; same as above (variable-pitch flat semibold (height . 0.9)) ; same as above\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-box-buttons '(variable-pitch flat 0.9))\n\n4.9 Option for command prompt styles\n\nBrief: Control the style of command prompts (e.g. minibuffer, shell, IRC clients).\n\nSymbol: modus-themes-prompts (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nbackground\n\nbold\n\ngray\n\nintense\n\nitalic\n\nThe default (a nil value or an empty list) means to only use a subtle accented foreground color.\n\nThe property background applies a background color to the prompt’s text. By default, this is a subtle accented value.\n\nThe property intense makes the foreground color more prominent. If the background property is also set, it amplifies the value of the background as well.\n\nThe property gray changes the prompt’s colors to grayscale. This affects the foreground and, if the background property is also set, the background. Its effect is subtle, unless it is combined with the intense property.\n\nThe property bold makes the text use a bold typographic weight. Similarly, italic adds a slant to the font’s forms (italic or oblique forms, depending on the typeface).\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(intense) (bold intense) (intense bold gray) (intense background gray bold)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-prompts '(background gray))\n\n4.10 Option for mode line presentation\n\nBrief: Control the style of the mode lines.\n\nSymbol: modus-themes-mode-line (‘choice’ type, list of properties)\n\nPossible values, which can be expressed as a list of combinations of box effect, color, and border visibility:\n\nOverall style:\n\n3d\n\nmoody\n\naccented\n\nborderless\n\nA natural number > 1 for extra padding or a cons cell in the form of (padding . NATNUM).\n\nA floating point to set the height of the mode line’s text. It can also be a cons cell in the form of (height . FLOAT).\n\nThe default (a nil value or an empty list) is a two-dimensional rectangle with a border around it. The active and the inactive mode lines use different shades of grayscale values for the background, foreground, border.\n\nThe 3d property applies a three-dimensional effect to the active mode line. The inactive mode lines remain two-dimensional and are toned down a bit, relative to the default style.\n\nThe moody property optimizes the mode line for use with the library of the same name (hereinafter referred to as ’Moody’). In practice, it removes the box effect and replaces it with underline and overline properties. It also tones down the inactive mode lines. Despite its intended purpose, this option can also be used without the Moody library (please consult the themes’ manual on this point for more details). If both 3d and moody properties are set, the latter takes precedence.\n\nThe borderless property removes the color of the borders. It does not actually remove the borders, but only makes their color the same as the background, effectively creating some padding.\n\nThe accented property ensures that the active mode line uses a colored background instead of the standard shade of gray.\n\nA positive integer (natural number or natnum) applies a padding effect of NATNUM pixels at the boundaries of the mode lines. The default value is 1 and does not need to be specified explicitly. The padding has no effect when the moody property is also used, because Moody already applies its own tweaks. To ensure that the underline is placed at the bottom of the mode line, set x-underline-at-descent-line to non-nil (this is not needed when the borderless property is also set). For users on Emacs 29, the x-use-underline-position-properties variable must also be set to nil.\n\nThe padding can also be expressed as a cons cell in the form of ‘(padding . NATNUM)’ or ‘(padding NATNUM)’ where the key is constant and NATNUM is the desired natural number.\n\nA floating point applies an adjusted height to the mode line’s text as a multiple of the main font size. The default rate is 1.0 and does not need to be specified. Apart from a floating point, the height may also be expressed as a cons cell in the form of ‘(height . FLOAT)’ or ‘(height FLOAT)’ where the key is constant and the FLOAT is the desired number.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(accented) (borderless 3d) (moody accented borderless)\n\nSame as above, using the padding and height as an example (these all yield the same result):\n\n(accented borderless 4 0.9) (accented borderless (padding . 4) (height . 0.9)) (accented borderless (padding 4) (height 0.9))\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-mode-line '(borderless accented))\n\nNote that Moody does not expose any faces that the themes could style directly. Instead it re-purposes existing ones to render its tabs and ribbons. As such, there may be cases where the contrast ratio falls below the 7:1 target that the themes conform with (WCAG AAA). To hedge against this, we configure a fallback foreground for the moody property, which will come into effect when the background of the mode line changes to something less accessible, such as Moody ribbons (read the doc string of set-face-attribute, specifically :distant-foreground). This fallback is activated when Emacs determines that the background and foreground of the given construct are too close to each other in terms of color distance. In practice, users will need to experiment with the variable face-near-same-color-threshold to trigger the effect. We find that a value of ‘45000’ shall suffice, contrary to the default ‘30000’. Though for the combinations that involve the accented and moody properties, as mentioned above, that should be raised up to ‘70000’. Do not set it too high, because it has the adverse effect of always overriding the default colors (which have been carefully designed to be highly accessible).\n\nFurthermore, because Moody expects an underline and overline instead of a box style, it is strongly advised to set x-underline-at-descent-line to a non-nil value.\n\nFinally, note that various packages which heavily modify the mode line, such as ‘doom-modeline’, ‘nano-modeline’, ‘powerline’, ‘spaceline’ may not look as intended with all possible combinations of this user option.\n\n4.11 Option for accented background in tab interfaces\n\nBrief: Toggle accent colors for tabbed interfaces.\n\nSymbol: modus-themes-tabs-accented (‘boolean’ type)\n\nPossible values:\n\nnil (default)\n\nt\n\nBy default, all tab interfaces use backgrounds which are shades of gray. When this option is set to non-nil, the backgrounds become colorful.\n\nThis affects the built-in tab-bar-mode and tab-line-mode, as well as the Centaur tabs package.\n\n4.12 Option for completion framework aesthetics\n\nBrief: Set the overall style of completion framework interfaces.\n\nSymbol: modus-themes-completions (‘alist’ type properties)\n\nThis affects Company, Corfu, Flx, Helm, Icomplete/Fido, Ido, Ivy, Orderless, Selectrum, Vertico. The value is an alist that takes the form of a ‘(KEY . PROPERTIES)’ combination. ‘KEY’ is a symbol, while ‘PROPERTIES’ is a list. Here is a sample, followed by a description of the particularities:\n\n(setq modus-themes-completions '((matches . (extrabold background intense)) (selection . (semibold accented intense)) (popup . (accented))))\n\nThe matches key refers to the highlighted characters that correspond to the user’s input. When its properties are nil or an empty list, matching characters in the user interface will have a bold weight and a colored foreground. The list of properties may include any of the following symbols regardless of the order they may appear in:\n\nbackground to add a background color;\n\nintense to increase the overall coloration (also amplifies the background, if present);\n\nunderline to draw a line below the characters;\n\nitalic to use a slanted font (italic or oblique forms);\n\nThe symbol of a font weight attribute such as light, semibold, et cetera. Valid symbols are defined in the modus-themes-weights variable. The absence of a weight means that bold will be used.\n\nThe selection key applies to the current line or currently matched candidate, depending on the specifics of the user interface. When its properties are nil or an empty list, it has a subtle gray background, a bold weight, and the base foreground value for the text. The list of properties it accepts is as follows (order is not significant):\n\naccented to make the background colorful instead of gray;\n\ntext-also to apply extra color to the text of the selected line;\n\nintense to increase the overall coloration;\n\nunderline to draw a line below the characters;\n\nitalic to use a slanted font (italic or oblique forms);\n\nThe symbol of a font weight attribute such as light, semibold, et cetera. Valid symbols are defined in the modus-themes-weights variable. The absence of a weight means that bold will be used.\n\nThe popup key takes the same values as selection. The only difference is that it applies specifically to user interfaces that display an inline popup and thus have slightly different styling requirements than the minibuffer. The two prominent packages are ‘company’ and ‘corfu’.\n\nApart from specifying each key separately, a fallback list is accepted. This is only useful when the desired aesthetic is the same across all keys that are not explicitly referenced. For example, this:\n\n(setq modus-themes-completions '((t . (extrabold intense))))\n\nIs the same as:\n\n(setq modus-themes-completions '((matches . (extrabold intense)) (selection . (extrabold intense)) (popup . (extrabold intense))))\n\nIn the case of the fallback, any property that does not apply to the corresponding key is simply ignored (matches does not have accented and text-also, while selection and popup do not have background).\n\nConfigure bold and italic faces.\n\nAlso refer to the documentation of the orderless package for its intersection with company (if you choose to use those in tandem).\n\n4.13 Option for mail citations\n\nBrief: Set the overall style of citations/quotes when composing emails.\n\nSymbol: modus-themes-mail-citations (‘choice’ type)\n\nPossible values:\n\nnil (default)\n\nintense\n\nfaint\n\nmonochrome\n\nBy default (a nil value) citations are styled with contrasting hues to denote their depth. Colors are easy to tell apart because they complement each other, but they otherwise are not very prominent.\n\nOption intense is similar to the default in terms of using contrasting and complementary hues, but applies more saturated colors.\n\nOption faint maintains the same color-based distinction between citation levels though the colors it uses have subtle differences between them.\n\nOption monochrome turns all quotes into a shade of gray.\n\nWhatever the value assigned to this variable, citations in emails are controlled by typographic elements or indentation, which the themes do not touch.\n\n4.14 Option for fringe visibility\n\nBrief: Control the overall coloration of the fringes.\n\nSymbol: modus-themes-fringes (‘choice’ type)\n\nPossible values:\n\nnil\n\nsubtle\n\nintense\n\nWhen the value is nil, do not apply a distinct background color.\n\nWith a value of subtle use a gray background color that is visible yet close to the main background color.\n\nWith intense use a more pronounced gray background color.\n\n4.15 Option for language checkers\n\nBrief: Control the style of in-buffer warnings and errors produced by spell checkers, code linters, and the like.\n\nSymbol: modus-themes-lang-checkers (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nstraight-underline\n\ntext-also\n\nbackground\n\nOverall coloration:\n\nintense\n\nfaint\n\nThe default (a nil value or an empty list) applies a color-coded underline to the affected text, while it leaves the original foreground intact. If the display spec of Emacs has support for it, the underline’s style is that of a wave, otherwise it is a straight line.\n\nThe property straight-underline ensures that the underline under the affected text is always drawn as a straight line.\n\nThe property text-also applies the same color of the underline to the affected text.\n\nThe property background adds a color-coded background.\n\nThe property intense amplifies the applicable colors if background and/or text-also are set. If intense is set on its own, then it implies text-also.\n\nThe property faint uses nuanced colors for the underline and for the foreground when text-also is included. If both faint and intense are specified, the former takes precedence.\n\nCombinations of any of those properties can be expressed in a list, as in those examples:\n\n(background) (straight-underline intense) (background text-also straight-underline)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-lang-checkers '(text-also background))\n\nNOTE: The placement of the straight underline, though not the wave style, is controlled by the built-in variables underline-minimum-offset, x-underline-at-descent-line, x-use-underline-position-properties.\n\nTo disable fringe indicators for Flymake or Flycheck, refer to variables flymake-fringe-indicator-position and flycheck-indication-mode, respectively.\n\n4.16 Option for line highlighting\n\nBrief: Control the style of the current line of hl-line-mode.\n\nSymbol: modus-themes-hl-line (‘choice’ type, list of properties)\n\nThe value is a list of properties, each designated by a symbol. With a nil value, or an empty list, the style is a subtle gray background color.\n\nPossible properties are the following symbols:\n\naccented\n\nintense\n\nunderline\n\nThe property accented changes the background to a colored variant.\n\nAn underline property draws a line below the highlighted area. Its color is similar to the background, so gray by default or an accent color when accented is also set.\n\nAn intense property amplifies the colors in use, which may be both the background and the underline.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(intense) (underline intense) (accented intense underline)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-hl-line '(underline accented))\n\nSet x-underline-at-descent-line to a non-nil value so that the placement of the underline coincides with the lower boundary of the colored background.\n\nThis style affects several packages that enable hl-line-mode, such as ‘elfeed’, ‘notmuch’, and ‘mu4e’.\n\n[ Also check the ‘lin’ package on GNU ELPA (by the author of the modus-themes) for a stylistic enhancement to hl-line-mode. ]\n\n4.17 Option for line numbers\n\nBrief: Toggle subtle line numbers.\n\nSymbol: modus-themes-subtle-line-numbers (‘boolean’ type)\n\nPossible value:\n\nnil (default)\n\nt\n\nThe default style for display-line-numbers-mode and its global variant is to apply a subtle gray background to the line numbers. The current line has a more pronounced background and foreground combination to bring more attention to itself.\n\nSimilarly, the faces for display-line-numbers-major-tick and its counterpart display-line-numbers-minor-tick use appropriate styles that involve a bespoke background and foreground combination.\n\nWith a non-nil value (t), line numbers have no background of their own. Instead they retain the primary background of the theme, blending with the rest of the buffer. Foreground values for all relevant faces are updated to accommodate this aesthetic.\n\n4.18 Option for mouseover effects\n\nBrief: Toggle intense mouse hover effects.\n\nSymbol: modus-themes-intense-mouseovers (‘boolean’ type)\n\nPossible value:\n\nnil (default)\n\nt\n\nBy default all mouseover effects apply a highlight with a subtle colored background. When non-nil, these have a more pronounced effect.\n\nNote that this affects the generic highlight which, strictly speaking, is not limited to mouse usage.\n\n4.19 Option for markup style in Org and others\n\nBrief: Choose style of markup in Org, Markdown, and others (affects constructs such as Org’s ‘=verbatim=’ and ‘~code~’).\n\nSymbol: modus-themes-markup (‘boolean’ type)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nbold\n\nitalic\n\nbackground\n\nintense\n\nThe italic property applies a typographic slant (italics).\n\nThe bold property applies a heavier typographic weight.\n\nConfigure bold and italic faces.\n\nThe background property adds a background color. The background is a shade of gray, unless the intense property is also set.\n\nThe intense property amplifies the existing coloration. When background is used, the background color is enhanced as well and becomes tinted instead of being gray.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(bold) (bold italic) (bold italic intense) (bold italic intense background)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-markup '(bold italic))\n\nAlso check the variables org-hide-emphasis-markers, org-hide-macro-markers.\n\n4.20 Option for parenthesis matching\n\nBrief: Control the style of matching delimiters produced by show-paren-mode.\n\nSymbol: modus-themes-paren-match (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nbold\n\nintense\n\nunderline\n\nThe default (a nil value or an empty list) is a subtle background color.\n\nThe bold property adds a bold weight to the characters of the matching delimiters.\n\nThe intense property applies a more prominent background color to the delimiters.\n\nThe underline property draws a straight line under the affected text.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(bold) (underline intense) (bold intense underline)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-paren-match '(bold intense))\n\nThis customization variable affects the built-in show-paren-mode and the ‘smartparens’ package.\n\n4.21 Option for active region\n\nBrief: Control the style of the region.\n\nSymbol: modus-themes-region (‘choice’ type, list of properties)\n\nPossible values are expressed as a list of properties (default is nil or an empty list). The list can include any of the following symbols:\n\nno-extend\n\nbg-only\n\naccented\n\nThe default (a nil value or an empty list) is a prominent gray background that overrides all foreground colors in the area it encompasses. Its reach extends to the edge of the window.\n\nThe no-extend property limits the region to the end of the line, so that it does not reach the edge of the window.\n\nThe bg-only property makes the region’s background color more subtle to allow the underlying text to retain its foreground colors.\n\nThe accented property applies a more colorful background to the region.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(no-extend) (bg-only accented) (accented bg-only no-extend)\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-region '(bg-only no-extend))\n\n4.22 Option for diff buffer looks\n\nBrief: Set the overall style of diffs.\n\nSymbol: modus-themes-diffs (‘choice’ type)\n\nPossible values:\n\nnil (default)\n\ndesaturated\n\nbg-only\n\nThe default (nil) uses fairly intense color combinations for diffs, by applying prominently colored backgrounds, with appropriately tinted foregrounds.\n\nOption desaturated follows the same principles as with the default (nil), though it tones down all relevant colors.\n\nOption bg-only applies a background but does not override the text’s foreground. This makes it suitable for a non-nil value passed to diff-font-lock-syntax (note: Magit does not support syntax highlighting in diffs—last checked on 2021-12-02).\n\nWhen the user option modus-themes-deuteranopia is non-nil, all diffs will use a red/blue color-coding system instead of the standard red/green. Other stylistic changes are made in the interest of optimizing for such a use-case.\n\nOption for red-green color deficiency or deuteranopia.\n\nIn versions before ‘2.0.0’ there was an option for foreground-only diffs. This is no longer supported at the theme level because there are cases where the perceived contrast and overall contextuality were not good enough although the applied colors were technically above the 7:1 contrast threshold.\n\nDiffs with only the foreground.\n\nEdiff without diff color-coding.\n\n4.23 Option for org-mode block styles\n\nBrief: Set the overall style of Org code blocks, quotes, and the like.\n\nSymbol: modus-themes-org-blocks (‘choice’ type)\n\nPossible values:\n\nnil (default)\n\ngray-background (value grayscale exists for backward compatibility)\n\ntinted-background (value rainbow exists for backward compatibility)\n\nNil (the default) means that the block has no background of its own: it uses the one that applies to the rest of the buffer. In this case, the delimiter lines have a gray color for their text, making them look exactly like all other Org properties.\n\nOption gray-background applies a subtle gray background to the block’s contents. It also affects the begin and end lines of the block as they get another shade of gray as their background, which differentiates them from the contents of the block. All background colors extend to the edge of the window, giving the area a rectangular, “blocky” presentation.\n\nOption tinted-background uses a slightly colored background for the contents of the block. The exact color will depend on the programming language and is controlled by the variable org-src-block-faces (refer to the theme’s source code for the current association list). For this to take effect, the Org buffer needs to be restarted with org-mode-restart. In this scenario, it may be better to inhibit the extension of the delimiter lines’ background to the edge of the window because Org does not provide a mechanism to update their colors depending on the contents of the block. Disable the extension of such backgrounds by setting org-fontify-whole-block-delimiter-line to nil.\n\nCode blocks use their major mode’s colors only when the variable org-src-fontify-natively is non-nil. While quote/verse blocks require setting org-fontify-quote-and-verse-blocks to a non-nil value.\n\nUpdate Org block delimiter fontification.\n\nOlder versions of the themes provided options grayscale (or greyscale) and rainbow. Those will continue to work as they are aliases for gray-background and tinted-background, respectively.\n\n4.24 Option for Org agenda constructs\n\nBrief: Control the style of the Org agenda. Multiple parameters are available, each with its own options.\n\nSymbol: modus-themes-org-agenda (‘alist’ type, multiple styles)\n\nThis is an alist that accepts a ‘(key . value)’ combination. Some values are specified as a list. Here is a sample, followed by a description of all possible combinations:\n\n(setq modus-themes-org-agenda '((header-block . (variable-pitch 1.5)) (header-date . (grayscale workaholic bold-today 1.2)) (event . (accented italic varied)) (scheduled . uniform) (habit . traffic-light)))\n\nA header-block key applies to elements that concern the headings which demarcate blocks in the structure of the agenda. By default (a nil value) those are rendered in a bold typographic weight, plus a height that is slightly taller than the default font size. Acceptable values come in the form of a list that can include either or both of those properties:\n\nvariable-pitch to use a proportionately spaced typeface;\n\nA number as a floating point (e.g. 1.5) to set the height of the text to that many times the default font height. A float of 1.0 or the symbol no-scale have the same effect of making the font the same height as the rest of the buffer. When neither a number nor ‘no-scale’ are present, the default is a small increase in height (a value of 1.15).\n\nInstead of a floating point, an acceptable value can be in the form of a cons cell like ‘(height . FLOAT)’ or ‘(height FLOAT)’, where FLOAT is the given number.\n\nThe symbol of a weight attribute adjusts the font of the heading accordingly, such as light, semibold, etc. Valid symbols are defined in the variable modus-themes-weights. The absence of a weight means that bold will be used by virtue of inheriting the bold face.\n\nConfigure bold and italic faces.\n\nIn case both a number and no-scale are in the list, the latter takes precedence. If two numbers are specified, the first one is applied.\n\nExample usage:\n\n(header-block . nil) (header-block . (1.5)) (header-block . (no-scale)) (header-block . (variable-pitch 1.5)) (header-block . (variable-pitch 1.5 semibold))\n\nA header-date key covers date headings. Dates use only a foreground color by default (a nil value), with weekdays and weekends having a slight difference in hueness. The current date has an added gray background. This key accepts a list of values that can include any of the following properties:\n\ngrayscale to make weekdays use the main foreground color and weekends a more subtle gray;\n\nworkaholic to make weekdays and weekends look the same in terms of color;\n\nbold-today to apply a bold typographic weight to the current date;\n\nbold-all to render all date headings in a bold weight;\n\nunderline-today applies an underline to the current date while removing the background it has by default;\n\nA number as a floating point (e.g. 1.2) to set the height of the text to that many times the default font height. The default is the same as the base font height (the equivalent of 1.0). Instead of a floating point, an acceptable value can be in the form of a cons cell like ‘(height . FLOAT)’ or ‘(height FLOAT)’, where FLOAT is the given number.\n\nFor example:\n\n(header-date . nil) (header-date . (workaholic)) (header-date . (grayscale bold-all)) (header-date . (grayscale workaholic)) (header-date . (grayscale workaholic bold-today)) (header-date . (grayscale workaholic bold-today scale-heading))\n\nAn event key covers (i) headings with a plain time stamp that are shown on the agenda, also known as events, (ii) entries imported from the diary, and (iii) other items that derive from a symbolic expression or sexp (phases of the moon, holidays, etc.). By default all those look the same and have a subtle foreground color (the default is a nil value or an empty list). This key accepts a list of properties. Those are:\n\naccented applies an accent value to the event’s foreground, replacing the original gray. It makes all entries stand out more.\n\nitalic adds a slant to the font’s forms (italic or oblique forms, depending on the typeface).\n\nvaried differentiates between events with a plain time stamp and entries that are generated from either the diary or a symbolic expression. It generally puts more emphasis on events. When varied is combined with accented, it makes only events use an accent color, while diary/sexp entries retain their original subtle foreground. When varied is used in tandem with italic, it applies a slant only to diary and sexp entries, not events. And when varied is the sole property passed to the event key, it has the same meaning as the list (italic varied). The combination of varied, accented, italic covers all of the aforementioned cases.\n\nFor example:\n\n(event . nil) (event . (italic)) (event . (accented italic)) (event . (accented italic varied))\n\nA scheduled key applies to tasks with a scheduled date. By default (a nil value), those use varying shades of yellow to denote (i) a past or current date and (ii) a future date. Valid values are symbols:\n\nnil (default);\n\nuniform to make all scheduled dates the same color;\n\nrainbow to use contrasting colors for past, present, future scheduled dates.\n\nFor example:\n\n(scheduled . nil) (scheduled . uniform) (scheduled . rainbow)\n\nA habit key applies to the org-habit graph. All possible value are passed as a symbol. Those are:\n\nThe default (nil) is meant to conform with the original aesthetic of org-habit. It employs all four color codes that correspond to the org-habit states—clear, ready, alert, and overdue—while distinguishing between their present and future variants. This results in a total of eight colors in use: red, yellow, green, blue, in tinted and shaded versions. They cover the full set of information provided by the org-habit consistency graph.\n\nsimplified is like the default except that it removes the dichotomy between current and future variants by applying uniform color-coded values. It applies a total of four colors: red, yellow, green, blue. They produce a simplified consistency graph that is more legible (or less busy) than the default. The intent is to shift focus towards the distinction between the four states of a habit task, rather than each state’s present/future outlook.\n\ntraffic-light further reduces the available colors to red, yellow, and green. As in simplified, present and future variants appear uniformly, but differently from it, the clear state is rendered in a green hue, instead of the original blue. This is meant to capture the use-case where a habit task being too early is less important than it being too late. The difference between ready and clear states is attenuated by painting both of them using shades of green. This option thus highlights the alert and overdue states.\n\nWhen modus-themes-deuteranopia is non-nil the exact style of the habit graph adapts to the needs of users with red-green color deficiency by substituting every instance of green with blue or cyan (depending on the specifics).\n\nOption for red-green color deficiency or deuteranopia.\n\nFor example:\n\n(habit . nil) (habit . simplified) (habit . traffic-light)\n\nPutting it all together, the alist can look like this:\n\n'((header-block . (1.5 variable-pitch)) (header-date . (grayscale workaholic bold-today)) (event . (accented varied)) (scheduled . uniform) (habit . traffic-light)) ;; Or else: (setq modus-themes-org-agenda '((header-block . (1.5 variable-pitch)) (header-date . (grayscale workaholic bold-today)) (event . (accented varied)) (scheduled . uniform) (habit . traffic-light)))\n\n4.25 Option for the headings’ overall style\n\nBrief: Heading styles with optional list of values for levels 0-8.\n\nSymbol: modus-themes-headings (‘alist’ type, multiple properties)\n\nThis is an alist that accepts a ‘(key . list-of-values)’ combination. The key is either a number, representing the heading’s level (0-8) or t, which pertains to the fallback style.\n\nLevel 0 is a special heading: it is used for what counts as a document title or equivalent, such as the ‘#+title’ construct we find in Org files. Levels 1-8 are regular headings.\n\nThe list of values covers symbols that refer to properties, as described below. Here is a complete sample, followed by a presentation of all available properties:\n\n(setq modus-themes-headings '((1 . (background overline variable-pitch 1.5)) (2 . (overline rainbow 1.3)) (3 . (overline 1.1)) (t . (monochrome))))\n\nProperties:\n\nrainbow\n\noverline\n\nbackground\n\nmonochrome\n\nA font weight, which must be supported by the underlying typeface:\n\nthin\n\nultralight\n\nextralight\n\nlight\n\nsemilight\n\nregular\n\nmedium\n\nsemibold\n\nbold\n\nheavy\n\nextrabold\n\nultrabold\n\nno-bold (deprecated alias of a regular weight)\n\nA floating point as a height multiple of the default or a cons cell in the form of ‘(height . FLOAT)’.\n\nBy default (a nil value for this variable), all headings have a bold typographic weight and use a desaturated text color.\n\nA rainbow property makes the text color more saturated.\n\nAn overline property draws a line above the area of the heading.\n\nA background property adds a subtle tinted color to the background of the heading.\n\nA monochrome property makes the heading the same as the base color, which is that of the default face’s foreground. When background is also set, monochrome changes its color to gray. If both monochrome and rainbow are set, the former takes precedence.\n\nA variable-pitch property changes the font family of the heading to that of the variable-pitch face (normally a proportionately spaced typeface).\n\nThe symbol of a weight attribute adjusts the font of the heading accordingly, such as light, semibold, etc. Valid symbols are defined in the variable modus-themes-weights. The absence of a weight means that bold will be used by virtue of inheriting the bold face. For backward compatibility, the no-bold value is accepted, though users are encouraged to specify a regular weight instead.\n\nConfigure bold and italic faces.\n\nA number, expressed as a floating point (e.g. 1.5), adjusts the height of the heading to that many times the base font size. The default height is the same as 1.0, though it need not be explicitly stated. Instead of a floating point, an acceptable value can be in the form of a cons cell like ‘(height . FLOAT)’ or ‘(height FLOAT)’, where FLOAT is the given number.\n\nCombinations of any of those properties are expressed as a list, like in these examples:\n\n(semibold) (rainbow background) (overline monochrome semibold 1.3) (overline monochrome semibold (height 1.3)) ; same as above (overline monochrome semibold (height . 1.3)) ; same as above\n\nThe order in which the properties are set is not significant.\n\nIn user configuration files the form may look like this:\n\n(setq modus-themes-headings '((1 . (background overline rainbow 1.5)) (2 . (background overline 1.3)) (t . (overline semibold))))\n\nWhen defining the styles per heading level, it is possible to pass a non-nil value (t) instead of a list of properties. This will retain the original aesthetic for that level. For example:\n\n(setq modus-themes-headings '((1 . t) ; keep the default style (2 . (background overline)) (t . (rainbow)))) ; style for all other headings (setq modus-themes-headings '((1 . (background overline)) (2 . (rainbow semibold)) (t . t))) ; default style for all other levels\n\nFor Org users, the extent of the heading depends on the variable org-fontify-whole-heading-line. This affects the overline and background properties. Depending on the version of Org, there may be others, such as org-fontify-done-headline.\n\n4.26 Option for variable-pitch font in UI elements\n\nBrief: Toggle the use of proportionately spaced (variable-pitch) fonts in the User Interface.\n\nSymbol: modus-themes-variable-pitch-ui (‘boolean’ type)\n\nPossible values:\n\nnil (default)\n\nt\n\nThis option concerns User Interface elements that are under the direct control of Emacs. In particular: the mode line, header line, tab bar, and tab line.\n\nThe default is to use the same font as the rest of Emacs, which usually is a monospaced family.\n\nWith a non-nil value (t) apply a proportionately spaced typeface. This is done by assigning the variable-pitch face to the relevant items.\n\nFont configurations for Org and others.\n\n5 Advanced customization\n\nUnlike the predefined customization options which follow a clear pattern of allowing the user to quickly specify their preference, the themes also provide a more flexible, albeit difficult, mechanism to control things with precision (Customization Options).\n\nThis section is of interest only to users who are prepared to maintain their own local tweaks and who are willing to deal with any possible incompatibilities between versioned releases of the themes. As such, they are labeled as “do-it-yourself” or “DIY”.\n\nMore accurate colors in terminal emulators\n\nRange of color with terminal emulators\n\nVisualize the active Modus theme’s palette\n\nPer-theme customization settings\n\nCase-by-case face specs using the themes’ palette\n\nFace specs at scale using the themes’ palette\n\nRemap face with local value\n\nCycle through arbitrary colors\n\nOverride colors\n\nOverride color saturation\n\nOverride colors through blending\n\nOverride colors completely\n\nFont configurations for Org and others\n\nConfigure bold and italic faces\n\nCustom Org todo keyword and priority faces\n\nCustom Org emphasis faces\n\nUpdate Org block delimiter fontification\n\nMeasure color contrast\n\nLoad theme depending on time of day\n\nBackdrop for pdf-tools\n\nDecrease mode line height\n\nToggle themes without reloading them\n\nA theme-agnostic hook for theme loading\n\nDiffs with only the foreground\n\nEdiff without diff color-coding\n\nNear-monochrome syntax highlighting\n\nCustom hl-todo colors\n\nAdd support for solaire-mode\n\n5.1 More accurate colors in terminal emulators\n\n[ This is based on partial information. Please help verify and/or expand these findings. ]\n\nThe graphical version of Emacs can reproduce color values accurately. Whereas things get more tricky when Emacs is used in a terminal emulator, because the terminals’ own capabilities determine the number of colors that may be displayed: the Modus themes don’t look as good in that case.\n\nThere is, however, a way to instruct supported terminal emulators to use more accurate colors. In a shell prompt type ‘toe -a | grep direct’ to get a list of relevant terminfo entries. There should be items such as ‘xterm-direct’, ‘alacritty-direct’, ‘kitty-direct’. Once you find the one that corresponds to your terminal, call Emacs with an environment variable like ‘TERM=xterm-direct’. Example that can be adapted to shell aliases:\n\nTERM=xterm-direct emacsclient -nw\n\nAnother example that can be bound to a key:\n\nTERM=xterm-direct uxterm -e emacsclient -nw\n\n5.2 Range of color with terminal emulators\n\n[ This is based on partial information. Please help verify and/or expand these findings. ]\n\nWhen Emacs runs in a non-windowed session its color reproduction capacity is framed or determined by the underlying terminal emulator (More accurate colors in terminal emulators). Emacs cannot produce a color that lies outside the range of what the terminal’s color palette renders possible.\n\nThis is immediately noticeable when the terminal’s first 16 codes do not include a pure black value for the ‘termcol0’ entry and a pure white for ‘termcol15’. Emacs cannot set the correct background (white for modus-operandi; black for modus-vivendi) or foreground (inverse of the background). It thus falls back to the closest approximation, which seldom is appropriate for the purposes of the Modus themes.\n\nIn such a case, the user is expected to update their terminal’s color palette such as by adapting these resources:\n\n! Theme: modus-operandi ! Description: XTerm port of modus-operandi (Modus themes for GNU Emacs) ! Author: Protesilaos Stavrou, <https://protesilaos.com> xterm*background: #ffffff xterm*foreground: #000000 xterm*color0: #000000 xterm*color1: #a60000 xterm*color2: #005e00 xterm*color3: #813e00 xterm*color4: #0031a9 xterm*color5: #721045 xterm*color6: #00538b xterm*color7: #bfbfbf xterm*color8: #595959 xterm*color9: #972500 xterm*color10: #315b00 xterm*color11: #70480f xterm*color12: #2544bb xterm*color13: #5317ac xterm*color14: #005a5f xterm*color15: #ffffff ! Theme: modus-vivendi ! Description: XTerm port of modus-vivendi (Modus themes for GNU Emacs) ! Author: Protesilaos Stavrou, <https://protesilaos.com> xterm*background: #000000 xterm*foreground: #ffffff xterm*color0: #000000 xterm*color1: #ff8059 xterm*color2: #44bc44 xterm*color3: #d0bc00 xterm*color4: #2fafff xterm*color5: #feacd0 xterm*color6: #00d3d0 xterm*color7: #bfbfbf xterm*color8: #595959 xterm*color9: #ef8b50 xterm*color10: #70b900 xterm*color11: #c0c530 xterm*color12: #79a8ff xterm*color13: #b6a0ff xterm*color14: #6ae4b9 xterm*color15: #ffffff\n\n5.3 Visualize the active Modus theme’s palette\n\nThe command modus-themes-list-colors prompts for a choice between ‘modus-operandi’ and ‘modus-vivendi’ to produce a help buffer that shows a preview of each variable in the given theme’s color palette. The command modus-themes-list-colors-current skips the prompt, using the current Modus theme.\n\nEach row shows a foreground and background coloration using the underlying value it references. For example a line with ‘#a60000’ (a shade of red) will show red text followed by a stripe with that same color as a backdrop.\n\nThe name of the buffer describes the given Modus theme. It is thus called ‘*modus-operandi-list-colors*’ or ‘*modus-vivendi-list-colors*’.\n\n5.4 Per-theme customization settings\n\nIf you prefer to maintain different customization options between the two themes, it is best you write your own functions that first set those options and then load the relevant theme. The following code does exactly that by simply differentiating the two themes on the choice of bold constructs in code syntax (enabled for one, disabled for the other).\n\n(defun my-demo-modus-operandi () (interactive) (setq modus-themes-bold-constructs t) ; ENABLE bold (modus-themes-load-operandi)) (defun my-demo-modus-vivendi () (interactive) (setq modus-themes-bold-constructs nil) ; DISABLE bold (modus-themes-load-vivendi)) (defun my-demo-modus-themes-toggle () (if (eq (car custom-enabled-themes) 'modus-operandi) (my-demo-modus-vivendi) (my-demo-modus-operandi)))\n\nThen assign my-demo-modus-themes-toggle to a key instead of the equivalent the themes provide.\n\nFor a more elaborate design, it is better to inspect the source code of modus-themes-toggle and relevant functions.\n\n5.5 Case-by-case face specs using the themes’ palette\n\nThis section is about tweaking individual faces. If you plan to do things at scale, consult the next section: Set multiple faces.\n\nWe already covered in previous sections how to toggle between the themes and how to configure options prior to loading. We also explained that some of the functions made available to users will fire up a hook that can be used to pass tweaks in the post-theme-load phase.\n\nNow assume you wish to change a single face, say, the cursor. And you would like to get the standard “blue” color value of the active Modus theme, whether it is Modus Operandi or Modus Vivendi. To do that, you can use the modus-themes-color function. It accepts a symbol that is associated with a color in modus-themes-operandi-colors and modus-themes-vivendi-colors. Like this:\n\n(modus-themes-color 'blue)\n\nThe function always extracts the color value of the active Modus theme.\n\n(progn (load-theme 'modus-operandi t) (modus-themes-color 'blue)) ; \"#0031a9\" for `modus-operandi' (progn (load-theme 'modus-vivendi t) (modus-themes-color 'blue)) ; \"#2fafff\" for `modus-vivendi'\n\nDo C-h v on the aforementioned variables to check all the available symbols that can be passed to this function. Or simply invoke the command modus-themes-list-colors to produce a buffer with a preview of each entry in the palette.\n\nVisualize the active Modus theme’s palette.\n\nWith that granted, let us expand the example to actually change the cursor face’s background property. We employ the built-in function of set-face-attribute:\n\n(set-face-attribute 'cursor nil :background (modus-themes-color 'blue))\n\nIf you evaluate this form, your cursor will become blue. But if you change themes, such as with modus-themes-toggle, your edits will be lost, because the newly loaded theme will override the :background attribute you had assigned to that face.\n\nFor such changes to persist, we need to make them after loading the theme. So we rely on modus-themes-after-load-theme-hook, which gets called from modus-themes-load-operandi, modus-themes-load-vivendi, as well as the command modus-themes-toggle. Here is a sample function that tweaks two faces and then gets added to the hook:\n\n(defun my-modus-themes-custom-faces () (set-face-attribute 'cursor nil :background (modus-themes-color 'blue)) (set-face-attribute 'font-lock-type-face nil :foreground (modus-themes-color 'magenta-alt))) (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)\n\nA theme-agnostic hook for theme loading.\n\nUsing this principle, it is possible to override the styles of faces without having to find color values for each case.\n\nAnother application is to control the precise weight for bold constructs. This is particularly useful if your typeface has several variants such as “heavy”, “extrabold”, “semibold”. All you have to do is edit the bold face. For example:\n\n(set-face-attribute 'bold nil :weight 'semibold)\n\nRemember to use the custom function and hook combo we demonstrated above. Because the themes do not hard-wire a specific weight, this simple form is enough to change the weight of all bold constructs throughout the interface.\n\nFinally, there are cases where you want to tweak colors though wish to apply different ones to each theme, say, a blue hue for Modus Operandi and a shade of red for Modus Vivendi. To this end, we provide modus-themes-color-alts as a convenience function to save you from the trouble of writing separate wrappers for each theme. It still returns a single value by querying either of modus-themes-operandi-colors and modus-themes-vivendi-colors, only here you pass the two keys you want, first for modus-operandi then modus-vivendi.\n\nTake the previous example with the cursor face:\n\n;; Blue for `modus-operandi' and red for `modus-vivendi' (set-face-attribute 'cursor nil :background (modus-themes-color-alts 'blue 'red))\n\n5.6 Face specs at scale using the themes’ palette\n\nThe examples here are for large scale operations. For simple, one-off tweaks, you may prefer the approach documented in the previous section (Case-by-case face specs using the themes’ palette).\n\nThe modus-themes-with-colors macro lets you retrieve multiple color values by employing the backquote/backtick and comma notation. The values are stored in the alists modus-themes-operandi-colors and modus-themes-vivendi-colors, while the macro always queries that of the active Modus theme (preview the current palette with the command modus-themes-list-colors).\n\nVisualize the active Modus theme’s palette.\n\nHere is an abstract example that just returns a list of color values while modus-operandi is enabled:\n\n(modus-themes-with-colors (list fg-main blue-faint magenta magenta-alt-other cyan-alt-other fg-special-cold blue-alt magenta-faint cyan fg-main green-faint red-alt-faint blue-alt-faint fg-special-warm cyan-alt blue)) ;; => ;; (\"#000000\" \"#002f88\" \"#721045\" \"#5317ac\" ;; \"#005a5f\" \"#093060\" \"#2544bb\" \"#752f50\" ;; \"#00538b\" \"#000000\" \"#104410\" \"#702f00\" ;; \"#003f78\" \"#5d3026\" \"#30517f\" \"#0031a9\")\n\nGetting a list of colors may have its applications, though what you are most likely interested in is how to use those variables to configure several faces at once. To do so we can rely on the built-in custom-set-faces function, which sets face specifications for the special user theme. That “theme” gets applied on top of regular themes like modus-operandi and modus-vivendi.\n\nThis is how it works:\n\n(modus-themes-with-colors (custom-set-faces `(cursor ((,class :background ,blue))) `(mode-line ((,class :background ,yellow-nuanced-bg :foreground ,yellow-nuanced-fg))) `(mode-line-inactive ((,class :background ,blue-nuanced-bg :foreground ,blue-nuanced-fg)))))\n\nThe above snippet will immediately refashion the faces it names once it is evaluated. However, if you switch between the Modus themes, say, from modus-operandi to modus-vivendi, the colors will not get updated to match those of the new theme. To make things work across the themes, we need to employ the same technique we discussed in the previous section, namely, to pass our changes at the post-theme-load phase via a hook.\n\nThe themes provide the modus-themes-after-load-theme-hook, which gets called from modus-themes-load-operandi, modus-themes-load-vivendi, as well as the command modus-themes-toggle. With this knowledge, you can wrap the macro in a function and then assign that function to the hook. Thus:\n\n(defun my-modus-themes-custom-faces () (modus-themes-with-colors (custom-set-faces `(cursor ((,class :background ,blue))) `(mode-line ((,class :background ,yellow-nuanced-bg :foreground ,yellow-nuanced-fg))) `(mode-line-inactive ((,class :background ,blue-nuanced-bg :foreground ,blue-nuanced-fg)))))) (add-hook 'modus-themes-after-load-theme-hook #'my-modus-themes-custom-faces)\n\nA theme-agnostic hook for theme loading.\n\nTo discover the faces defined by all loaded libraries, you may do M-x list-faces-display. Be warned that when you :inherit a face you are introducing an implicit dependency, so try to avoid doing so for libraries other than the built-in faces.el (or at least understand that things may break if you inherit from a yet-to-be-loaded face).\n\nAlso bear in mind that these examples are meant to work with the Modus themes. If you are cycling between multiple themes you may encounter unforeseen issues, such as the colors of the Modus themes being applied to a non-Modus item.\n\nFinally, note that you can still use other functions where those make sense. For example, the modus-themes-color-alts that was discussed in the previous section. Adapt the above example like this:\n\n... (modus-themes-with-colors (custom-set-faces `(cursor ((,class :background ,(modus-themes-color-alts 'blue 'green)))) ...))\n\n5.7 Remap face with local value\n\nThere are cases where we need to change the buffer-local attributes of a face. This might be because we have our own minor mode that re-uses a face for a particular purpose, such as a line selection tool that activates hl-line-mode, but we wish to keep it distinct from other buffers. This is where face-remap-add-relative can be applied and may be combined with modus-themes-with-colors to deliver consistent results.\n\nFace specs at scale using the themes’ palette.\n\nIn this example we will write a simple interactive function that adjusts the background color of the region face. This is the sample code:\n\n(defvar my-rainbow-region-colors (modus-themes-with-colors `((red . ,red-subtle-bg) (green . ,green-subtle-bg) (yellow . ,yellow-subtle-bg) (blue . ,blue-subtle-bg) (magenta . ,magenta-subtle-bg) (cyan . ,cyan-subtle-bg))) \"Sample list of color values for `my-rainbow-region'.\") (defun my-rainbow-region (color) \"Remap buffer-local attribute of `region' using COLOR.\" (interactive (list (completing-read \"Pick a color: \" my-rainbow-region-colors))) (face-remap-add-relative 'region `( :background ,(alist-get (intern color) my-rainbow-region-colors) :foreground ,(face-attribute 'default :foreground))))\n\nWhen my-rainbow-region is called interactively, it prompts for a color to use. The list of candidates is drawn from the car of each association in my-rainbow-region-colors (so “red”, “green”, etc.).\n\nTo extend this principle, we may write wrapper functions that pass a color directly. Those can be useful in tandem with hooks. Consider this example:\n\n(defun my-rainbow-region-magenta () (my-rainbow-region 'magenta)) (add-hook 'diff-mode-hook #'my-rainbow-region-magenta)\n\nWhenever we enter a diff-mode buffer, we now get a magenta-colored region.\n\nPerhaps you may wish to generalize those findings in to a set of functions that also accept an arbitrary face. We shall leave the experimentation up to you.\n\n5.8 Cycle through arbitrary colors\n\nUsers may opt to customize individual faces of the themes to accommodate their particular needs. One such case is with the color intensity of comments, specifically the foreground of font-lock-comment-face. The Modus themes set that to a readable value, in accordance with their accessibility objective, though users may prefer to lower the overall contrast on an on-demand basis.\n\nOne way to achieve this is to design a command that cycles through three distinct levels of intensity, though the following can be adapted to any kind of cyclic behavior, such as to switch between red, green, and blue.\n\nIn the following example, we employ the modus-themes-color function which reads a symbol that represents an entry in the active theme’s color palette (Case-by-case face specs using the themes’ palette). Those are stored in my-modus-themes-comment-colors.\n\n(defvar my-modus-themes-comment-colors ;; We are abusing the palette here, as those colors have their own ;; purpose in the palette, so please ignore the semantics of their ;; names. '((low . bg-region) (medium . bg-tab-inactive-alt) (high . fg-alt)) \"Alist of levels of intensity mapped to color palette entries. The entries are found in `modus-themes-operandi-colors' or `modus-themes-vivendi-colors'.\") (defvar my-modus-themes--adjust-comment-color-state nil \"The cyclic state of `my-modus-themes-adjust-comment-color'. For internal use.\") (defun my-modus-themes--comment-foreground (degree state) \"Set `font-lock-comment-face' foreground. Use `my-modus-themes-comment-colors' to extract the color value for each level of intensity. This is complementary to `my-modus-themes-adjust-comment-color'.\" (let ((palette-colors my-modus-themes-comment-colors)) (set-face-foreground 'font-lock-comment-face (modus-themes-color (alist-get degree palette-colors))) (setq my-modus-themes--adjust-comment-color-state state) (message \"Comments are set to %s contrast\" degree))) (defun my-modus-themes-adjust-comment-color () \"Cycle through levels of intensity for comments. The levels are determined by `my-modus-themes-comment-colors'.\" (interactive) (pcase my-modus-themes--adjust-comment-color-state ('nil (my-modus-themes--comment-foreground 'low 1)) (1 (my-modus-themes--comment-foreground 'medium 2)) (_ (my-modus-themes--comment-foreground 'high nil))))\n\nWith the above, M-x my-modus-themes-adjust-comment-color will cycle through the three levels of intensity that have been specified.\n\nAnother approach is to not read from the active theme’s color palette and instead provide explicit color values, either in hexadecimal RGB notation (like ‘#123456’) or as the names that are displayed in the output of M-x list-colors-display. In this case, the alist with the colors will have to account for the active theme, so as to set the appropriate colors. While this introduces a bit more complexity, it ultimately offers greater flexibility on the choice of colors for such a niche functionality (so there is no need to abuse the palette of the active Modus theme):\n\n(defvar my-modus-themes-comment-colors '((light . ((low . \"gray75\") (medium . \"gray50\") (high . \"#505050\"))) ; the default for `modus-operandi' (dark . ((low . \"gray25\") (medium . \"gray50\") (high . \"#a8a8a8\")))) ; the default for `modus-vivendi' \"Alist of levels of intensity mapped to color values. For such colors, consult the command `list-colors-display'. Pass the name of a color or its hex value.\") (defvar my-modus-themes--adjust-comment-color-state nil \"The cyclic state of `my-modus-themes-adjust-comment-color'. For internal use.\") (defun my-modus-themes--comment-foreground (degree state) \"Set `font-lock-comment-face' foreground. Use `my-modus-themes-comment-colors' to extract the color value for each level of intensity. This is complementary to `my-modus-themes-adjust-comment-color'.\" (let* ((colors my-modus-themes-comment-colors) (levels (pcase (car custom-enabled-themes) ('modus-operandi (alist-get 'light colors)) ('modus-vivendi (alist-get 'dark colors))))) (set-face-foreground 'font-lock-comment-face (alist-get degree levels)) (setq my-modus-themes--adjust-comment-color-state state) (message \"Comments are set to %s contrast\" degree))) (defun my-modus-themes-adjust-comment-color () \"Cycle through levels of intensity for comments. The levels are determined by `my-modus-themes-comment-colors'.\" (interactive) (pcase my-modus-themes--adjust-comment-color-state ('nil (my-modus-themes--comment-foreground 'low 1)) (1 (my-modus-themes--comment-foreground 'medium 2)) (_ (my-modus-themes--comment-foreground 'high nil))))\n\nThe effect of the above configurations on font-lock-comment-face is global. To make it buffer-local, one must tweak the code to employ the function face-remap-add-relative (Remap face with local value).\n\nSo this form in my-modus-themes--comment-foreground:\n\n;; example 1 (... (set-face-foreground 'font-lock-comment-face (modus-themes-color (alist-get degree palette-colors))) ...) ;; example 2 (... (set-face-foreground 'font-lock-comment-face (alist-get degree levels)) ...)\n\nMust become this:\n\n;; example 1 (... (face-remap-add-relative 'font-lock-comment-face `(:foreground ,(modus-themes-color (alist-get degree palette-colors)))) ...) ;; example 2 (... (face-remap-add-relative 'font-lock-comment-face `(:foreground ,(alist-get degree levels))) ...)\n\n5.9 Override colors\n\nThe themes provide a mechanism for overriding their color values. This is controlled by the variables modus-themes-operandi-color-overrides and modus-themes-vivendi-color-overrides, which are alists that should mirror a subset of the associations in modus-themes-operandi-colors and modus-themes-vivendi-colors respectively. As with all customizations, overriding must be done before loading the affected theme.\n\nVisualize the active Modus theme’s palette.\n\nLet us approach the present topic one step at a time. Here is a simplified excerpt of the default palette for Modus Operandi with some basic background values that apply to buffers and the mode line (remember to inspect the actual value to find out all the associations that can be overridden):\n\n(defconst modus-themes-operandi-colors '((bg-main . \"#ffffff\") (bg-dim . \"#f8f8f8\") (bg-alt . \"#f0f0f0\") (bg-active . \"#d7d7d7\") (bg-inactive . \"#efefef\")))\n\nAs one can tell, we bind a key to a hexadecimal RGB color value. Now say we wish to override those specific values and have our changes propagate to all faces that use those keys. We could write something like this, which adds a subtle ocher tint:\n\n(setq modus-themes-operandi-color-overrides '((bg-main . \"#fefcf4\") (bg-dim . \"#faf6ef\") (bg-alt . \"#f7efe5\") (bg-active . \"#e8dfd1\") (bg-inactive . \"#f6ece5\")))\n\nOnce this is evaluated, any subsequent loading of modus-operandi will use those values instead of the defaults. No further intervention is required.\n\nTo reset the changes, we apply this and reload the theme:\n\n(setq modus-themes-operandi-color-overrides nil)\n\nUsers who wish to leverage such a mechanism can opt to implement it on-demand by means of a global minor mode. The following snippet covers both themes and expands to some more associations in the palette:\n\n(define-minor-mode my-modus-themes-tinted \"Tweak some Modus themes colors.\" :init-value nil :global t (if my-modus-themes-tinted (setq modus-themes-operandi-color-overrides '((bg-main . \"#fefcf4\") (bg-dim . \"#faf6ef\") (bg-alt . \"#f7efe5\") (bg-hl-line . \"#f4f0e3\") (bg-active . \"#e8dfd1\") (bg-inactive . \"#f6ece5\") (bg-region . \"#c6bab1\") (bg-header . \"#ede3e0\") (bg-tab-active . \"#fdf6eb\") (bg-tab-inactive . \"#c8bab8\")) modus-themes-vivendi-color-overrides '((bg-main . \"#100b17\") (bg-dim . \"#161129\") (bg-alt . \"#181732\") (bg-hl-line . \"#191628\") (bg-active . \"#282e46\") (bg-inactive . \"#1a1e39\") (bg-region . \"#393a53\") (bg-header . \"#202037\") (bg-tab-active . \"#120f18\") (bg-tab-inactive . \"#3a3a5a\"))) (setq modus-themes-operandi-color-overrides nil modus-themes-vivendi-color-overrides nil)))\n\nA more neutral style for modus-themes-operandi-color-overrides can look like this:\n\n'((bg-main . \"#f7f7f7\") (bg-dim . \"#f2f2f2\") (bg-alt . \"#e8e8e8\") (bg-hl-line . \"#eaeaef\") (bg-active . \"#e0e0e0\") (bg-inactive . \"#e6e6e6\") (bg-region . \"#b5b5b5\") (bg-header . \"#e4e4e4\") (bg-tab-active . \"#f5f5f5\") (bg-tab-inactive . \"#c0c0c0\"))\n\nWith those in place, one can use M-x my-modus-themes-tinted and then load the Modus theme of their choice. The new palette subset will come into effect: subtle ocher tints (or shades of gray) for Modus Operandi and night sky blue shades for Modus Vivendi. Switching between the two themes, such as with M-x modus-themes-toggle will also use the overrides.\n\nGiven that this is a user-level customization, one is free to implement whatever color values they desire, even if the possible combinations fall below the minimum 7:1 contrast ratio that governs the design of the themes (the WCAG AAA legibility standard). Alternatively, this can also be done programmatically (Override color saturation).\n\nThe above are expanded into a fully fledged derivative elsewhere in this document (Override colors completely).\n\nFor manual interventions it is advised to inspect the source code of modus-themes-operandi-colors and modus-themes-vivendi-colors for the inline commentary: it explains what the intended use of each palette subset is.\n\nFurthermore, users may benefit from the modus-themes-contrast function that we provide: test color combinations. It measures the contrast ratio between two color values, so it can help in overriding the palette (or a subset thereof) without making the end result inaccessible.\n\n5.10 Override color saturation\n\nIn the previous section we documented how one can override color values manually (Override colors). Here we use a programmatic approach which leverages the built-in color-saturate-name function to adjust the saturation of all color values used by the active Modus theme. Our goal is to prepare a counterpart of the active theme’s palette that holds modified color values, adjusted for a percent change in saturation. A positive number amplifies the effect, while a negative one will move towards a grayscale spectrum.\n\nWe start with a function that can be either called from Lisp or invoked interactively. In the former scenario, we pass to it the rate of change we want. While in the latter, a minibuffer prompt asks for a number to apply the desired effect. In either case, we intend to assign anew the value of modus-themes-operandi-color-overrides (light theme) and the same for modus-themes-vivendi-color-overrides (dark theme).\n\n(defun my-modus-themes-saturate (percent) \"Saturate current Modus theme palette overrides by PERCENT.\" (interactive (list (read-number \"Saturation by percent: \"))) (let* ((theme (modus-themes--current-theme)) (palette (pcase theme ('modus-operandi modus-themes-operandi-colors) ('modus-vivendi modus-themes-vivendi-colors) (_ (error \"No Modus theme is active\")))) (overrides (pcase theme ('modus-operandi 'modus-themes-operandi-color-overrides) ('modus-vivendi 'modus-themes-vivendi-color-overrides) (_ (error \"No Modus theme is active\"))))) (let (name cons colors) (dolist (cons palette) (setq name (color-saturate-name (cdr cons) percent)) (setq name (format \"%s\" name)) (setq cons `(,(car cons) . ,name)) (push cons colors)) (set overrides colors)) (pcase theme ('modus-operandi (modus-themes-load-operandi)) ('modus-vivendi (modus-themes-load-vivendi))))) ;; sample Elisp calls (or call `my-modus-themes-saturate' interactively) (my-modus-themes-saturate 50) (my-modus-themes-saturate -75)\n\nUsing the above has an immediate effect, as it reloads the active Modus theme.\n\nThe ‘my-modus-themes-saturate’ function stores new color values in the variables modus-themes-operandi-color-overrides and modus-themes-vivendi-color-overrides, meaning that it undoes changes implemented by the user on individual colors. To have both automatic saturation adjustment across the board and retain per-case edits to the palette, some tweaks to the above function are required. For example:\n\n(defvar my-modus-themes-vivendi-extra-color-overrides '((fg-main . \"#ead0c0\") (bg-main . \"#050515\")) \"My bespoke colors for `modus-vivendi'.\") (defvar my-modus-themes-operandi-extra-color-overrides '((fg-main . \"#1a1a1a\") (bg-main . \"#fefcf4\")) \"My bespoke colors for `modus-operandi'.\") (defun my-modus-themes-saturate (percent) \"Saturate current Modus theme palette overrides by PERCENT. Preserve the color values stored in `my-modus-themes-operandi-extra-color-overrides', `my-modus-themes-vivendi-extra-color-overrides'.\" (interactive (list (read-number \"Saturation by percent: \"))) (let* ((theme (modus-themes--current-theme)) (palette (pcase theme ('modus-operandi modus-themes-operandi-colors) ('modus-vivendi modus-themes-vivendi-colors) (_ (error \"No Modus theme is active\")))) (overrides (pcase theme ('modus-operandi 'modus-themes-operandi-color-overrides) ('modus-vivendi 'modus-themes-vivendi-color-overrides) (_ (error \"No Modus theme is active\")))) (extra-overrides (pcase theme ('modus-operandi my-modus-themes-operandi-extra-color-overrides) ('modus-vivendi my-modus-themes-vivendi-extra-color-overrides) (_ (error \"No Modus theme is active\"))))) (let (name cons colors) (dolist (cons palette) (setq name (color-saturate-name (cdr cons) percent)) (setq name (format \"%s\" name)) (setq cons `(,(car cons) . ,name)) (push cons colors)) (set overrides (append extra-overrides colors))) (pcase theme ('modus-operandi (modus-themes-load-operandi)) ('modus-vivendi (modus-themes-load-vivendi)))))\n\nTo disable the effect, one must reset the aforementioned variables of the themes to nil. Or specify a command for it, such as by taking inspiration from the modus-themes-toggle we already provide:\n\n(defun my-modus-themes-revert-overrides () \"Reset palette overrides and reload active Modus theme.\" (interactive) (setq modus-themes-operandi-color-overrides nil modus-themes-vivendi-color-overrides nil) (pcase (modus-themes--current-theme) ('modus-operandi (modus-themes-load-operandi)) ('modus-vivendi (modus-themes-load-vivendi))))\n\n5.11 Override colors through blending\n\nThis is yet another method of overriding color values.\n\nOverride colors.\n\nOverride color saturation.\n\nBuilding on ideas and concepts from the previous sections, this method blends the entire palette at once with the chosen colors. The function my-modus-themes-interpolate blends two colors, taking a value from the themes and mixing it with a user-defined color to arrive at a midpoint. This scales to all background and foreground colors with the help of the my-modus-themes-tint-palette function.\n\n(setq my-modus-operandi-bg-blend \"#fbf1c7\" my-modus-operandi-fg-blend \"#3a6084\" my-modus-vivendi-bg-blend \"#3a4042\" my-modus-vivendi-fg-blend \"#d7b765\") ;; Adapted from the `kurecolor-interpolate' function of kurecolor.el (defun my-modus-themes-interpolate (color1 color2) (cl-destructuring-bind (r g b) (mapcar #'(lambda (n) (* (/ n 2) 255.0)) (cl-mapcar '+ (color-name-to-rgb color1) (color-name-to-rgb color2))) (format \"#%02X%02X%02X\" r g b))) (defun my-modus-themes-tint-palette (palette bg-blend fg-blend) \"Modify Modus PALETTE programmatically and return a new palette. Blend background colors with BG-BLEND and foreground colors with FG-BLEND.\" (let (name cons colors) (dolist (cons palette) (let ((blend (if (string-match \"bg\" (symbol-name (car cons))) bg-blend fg-blend))) (setq name (my-modus-themes-interpolate (cdr cons) blend))) (setq name (format \"%s\" name)) (setq cons `(,(car cons) . ,name)) (push cons colors)) colors)) (define-minor-mode modus-themes-tinted-mode \"Tweak some Modus themes colors.\" :init-value nil :global t (if modus-themes-tinted-mode (setq modus-themes-operandi-color-overrides (my-modus-themes-tint-palette modus-themes-operandi-colors my-modus-operandi-bg-blend my-modus-operandi-fg-blend) modus-themes-vivendi-color-overrides (my-modus-themes-tint-palette modus-themes-vivendi-colors my-modus-vivendi-bg-blend my-modus-vivendi-fg-blend)) (setq modus-themes-operandi-color-overrides nil modus-themes-vivendi-color-overrides nil))) (modus-themes-tinted-mode 1)\n\n5.12 Override colors completely\n\nBased on the ideas we have already covered in these sections, the following code block provides a complete, bespoke pair of color palettes which override the defaults. They are implemented as a minor mode, as explained before (Override colors). We call them “Summertime” for convenience.\n\n;; Read the relevant blog post: ;; <https://protesilaos.com/codelog/2022-07-26-modus-themes-color-override-demo/> (define-minor-mode modus-themes-summertime \"Refashion the Modus themes by overriding their colors. This is a complete technology demonstration to show how to manually override the colors of the Modus themes. I have taken good care of those overrides to make them work as a fully fledged color scheme that is compatible with all user options of the Modus themes. These overrides are usable by those who (i) like something more fancy than the comparatively austere looks of the Modus themes, and (ii) can cope with a lower contrast ratio. The overrides are set up as a minor mode, so that the user can activate the effect on demand. Those who want to load the overrides at all times can either add them directly to their configuration or enable `modus-themes-summertime' BEFORE loading either of the Modus themes (if the overrides are evaluated after the theme, the theme must be reloaded). Remember that all changes to theme-related variables require a reload of the theme to take effect (the Modus themes have lots of user options, apart from those overrides). The `modus-themes-summertime' IS NOT an official extension to the Modus themes and DOES NOT comply with its lofty accessibility standards. It is included in the official manual as guidance for those who want to make use of the color overriding facility we provide.\" :init-value nil :global t (if modus-themes-summertime (setq modus-themes-operandi-color-overrides '((bg-main . \"#fff0f2\") (bg-dim . \"#fbe6ef\") (bg-alt . \"#f5dae6\") (bg-hl-line . \"#fad8e3\") (bg-active . \"#efcadf\") (bg-inactive . \"#f3ddef\") (bg-active-accent . \"#ffbbef\") (bg-region . \"#dfc5d1\") (bg-region-accent . \"#efbfef\") (bg-region-accent-subtle . \"#ffd6ef\") (bg-header . \"#edd3e0\") (bg-tab-active . \"#ffeff2\") (bg-tab-inactive . \"#f8d3ef\") (bg-tab-inactive-accent . \"#ffd9f5\") (bg-tab-inactive-alt . \"#e5c0d5\") (bg-tab-inactive-alt-accent . \"#f3cce0\") (fg-main . \"#543f78\") (fg-dim . \"#5f476f\") (fg-alt . \"#7f6f99\") (fg-unfocused . \"#8f6f9f\") (fg-active . \"#563068\") (fg-inactive . \"#8a5698\") (fg-docstring . \"#5f5fa7\") (fg-comment-yellow . \"#a9534f\") (fg-escape-char-construct . \"#8b207f\") (fg-escape-char-backslash . \"#a06d00\") (bg-special-cold . \"#d3e0f4\") (bg-special-faint-cold . \"#e0efff\") (bg-special-mild . \"#c4ede0\") (bg-special-faint-mild . \"#e0f0ea\") (bg-special-warm . \"#efd0c4\") (bg-special-faint-warm . \"#ffe4da\") (bg-special-calm . \"#f0d3ea\") (bg-special-faint-calm . \"#fadff9\") (fg-special-cold . \"#405fb8\") (fg-special-mild . \"#407f74\") (fg-special-warm . \"#9d6f4f\") (fg-special-calm . \"#af509f\") (bg-completion . \"#ffc5e5\") (bg-completion-subtle . \"#f7cfef\") (red . \"#ed2f44\") (red-alt . \"#e0403d\") (red-alt-other . \"#e04059\") (red-faint . \"#ed4f44\") (red-alt-faint . \"#e0603d\") (red-alt-other-faint . \"#e06059\") (green . \"#217a3c\") (green-alt . \"#417a1c\") (green-alt-other . \"#006f3c\") (green-faint . \"#318a4c\") (green-alt-faint . \"#518a2c\") (green-alt-other-faint . \"#20885c\") (yellow . \"#b06202\") (yellow-alt . \"#a95642\") (yellow-alt-other . \"#a06f42\") (yellow-faint . \"#b07232\") (yellow-alt-faint . \"#a96642\") (yellow-alt-other-faint . \"#a08042\") (blue . \"#275ccf\") (blue-alt . \"#475cc0\") (blue-alt-other . \"#3340ef\") (blue-faint . \"#476ce0\") (blue-alt-faint . \"#575ccf\") (blue-alt-other-faint . \"#3f60d7\") (magenta . \"#bf317f\") (magenta-alt . \"#d033c0\") (magenta-alt-other . \"#844fe4\") (magenta-faint . \"#bf517f\") (magenta-alt-faint . \"#d053c0\") (magenta-alt-other-faint . \"#846fe4\") (cyan . \"#007a9f\") (cyan-alt . \"#3f709f\") (cyan-alt-other . \"#107f7f\") (cyan-faint . \"#108aaf\") (cyan-alt-faint . \"#3f80af\") (cyan-alt-other-faint . \"#3088af\") (red-active . \"#cd2f44\") (green-active . \"#116a6c\") (yellow-active . \"#993602\") (blue-active . \"#475ccf\") (magenta-active . \"#7f2ccf\") (cyan-active . \"#007a8f\") (red-nuanced-bg . \"#ffdbd0\") (red-nuanced-fg . \"#ed6f74\") (green-nuanced-bg . \"#dcf0dd\") (green-nuanced-fg . \"#3f9a4c\") (yellow-nuanced-bg . \"#fff3aa\") (yellow-nuanced-fg . \"#b47232\") (blue-nuanced-bg . \"#e3e3ff\") (blue-nuanced-fg . \"#201f6f\") (magenta-nuanced-bg . \"#fdd0ff\") (magenta-nuanced-fg . \"#c0527f\") (cyan-nuanced-bg . \"#dbefff\") (cyan-nuanced-fg . \"#0f3f60\") (bg-diff-heading . \"#b7cfe0\") (fg-diff-heading . \"#041645\") (bg-diff-added . \"#d6f0d6\") (fg-diff-added . \"#004520\") (bg-diff-changed . \"#fcefcf\") (fg-diff-changed . \"#524200\") (bg-diff-removed . \"#ffe0ef\") (fg-diff-removed . \"#891626\") (bg-diff-refine-added . \"#84cfa4\") (fg-diff-refine-added . \"#002a00\") (bg-diff-refine-changed . \"#cccf8f\") (fg-diff-refine-changed . \"#302010\") (bg-diff-refine-removed . \"#da92b0\") (fg-diff-refine-removed . \"#500010\") (bg-diff-focus-added . \"#a6e5c6\") (fg-diff-focus-added . \"#002c00\") (bg-diff-focus-changed . \"#ecdfbf\") (fg-diff-focus-changed . \"#392900\") (bg-diff-focus-removed . \"#efbbcf\") (fg-diff-focus-removed . \"#5a0010\")) modus-themes-vivendi-color-overrides '((bg-main . \"#25152a\") (bg-dim . \"#2a1930\") (bg-alt . \"#382443\") (bg-hl-line . \"#332650\") (bg-active . \"#463358\") (bg-inactive . \"#2d1f3a\") (bg-active-accent . \"#50308f\") (bg-region . \"#5d4a67\") (bg-region-accent . \"#60509f\") (bg-region-accent-subtle . \"#3f285f\") (bg-header . \"#3a2543\") (bg-tab-active . \"#26162f\") (bg-tab-inactive . \"#362647\") (bg-tab-inactive-accent . \"#36265a\") (bg-tab-inactive-alt . \"#3e2f5a\") (bg-tab-inactive-alt-accent . \"#3e2f6f\") (fg-main . \"#debfe0\") (fg-dim . \"#d0b0da\") (fg-alt . \"#ae85af\") (fg-unfocused . \"#8e7f9f\") (fg-active . \"#cfbfef\") (fg-inactive . \"#b0a0c0\") (fg-docstring . \"#c8d9f7\") (fg-comment-yellow . \"#cf9a70\") (fg-escape-char-construct . \"#ff75aa\") (fg-escape-char-backslash . \"#dbab40\") (bg-special-cold . \"#2a3f58\") (bg-special-faint-cold . \"#1e283f\") (bg-special-mild . \"#0f3f31\") (bg-special-faint-mild . \"#0f281f\") (bg-special-warm . \"#44331f\") (bg-special-faint-warm . \"#372213\") (bg-special-calm . \"#4a314f\") (bg-special-faint-calm . \"#3a223f\") (fg-special-cold . \"#c0b0ff\") (fg-special-mild . \"#bfe0cf\") (fg-special-warm . \"#edc0a6\") (fg-special-calm . \"#ff9fdf\") (bg-completion . \"#502d70\") (bg-completion-subtle . \"#451d65\") (red . \"#ff5f6f\") (red-alt . \"#ff8f6d\") (red-alt-other . \"#ff6f9d\") (red-faint . \"#ffa0a0\") (red-alt-faint . \"#f5aa80\") (red-alt-other-faint . \"#ff9fbf\") (green . \"#51ca5c\") (green-alt . \"#71ca3c\") (green-alt-other . \"#51ca9c\") (green-faint . \"#78bf78\") (green-alt-faint . \"#99b56f\") (green-alt-other-faint . \"#88bf99\") (yellow . \"#f0b262\") (yellow-alt . \"#f0e242\") (yellow-alt-other . \"#d0a272\") (yellow-faint . \"#d2b580\") (yellow-alt-faint . \"#cabf77\") (yellow-alt-other-faint . \"#d0ba95\") (blue . \"#778cff\") (blue-alt . \"#8f90ff\") (blue-alt-other . \"#8380ff\") (blue-faint . \"#82b0ec\") (blue-alt-faint . \"#a0acef\") (blue-alt-other-faint . \"#80b2f0\") (magenta . \"#ff70cf\") (magenta-alt . \"#ff77f0\") (magenta-alt-other . \"#ca7fff\") (magenta-faint . \"#e0b2d6\") (magenta-alt-faint . \"#ef9fe4\") (magenta-alt-other-faint . \"#cfa6ff\") (cyan . \"#30cacf\") (cyan-alt . \"#60caff\") (cyan-alt-other . \"#40b79f\") (cyan-faint . \"#90c4ed\") (cyan-alt-faint . \"#a0bfdf\") (cyan-alt-other-faint . \"#a4d0bb\") (red-active . \"#ff6059\") (green-active . \"#64dc64\") (yellow-active . \"#ffac80\") (blue-active . \"#4fafff\") (magenta-active . \"#cf88ff\") (cyan-active . \"#50d3d0\") (red-nuanced-bg . \"#440a1f\") (red-nuanced-fg . \"#ffcccc\") (green-nuanced-bg . \"#002904\") (green-nuanced-fg . \"#b8e2b8\") (yellow-nuanced-bg . \"#422000\") (yellow-nuanced-fg . \"#dfdfb0\") (blue-nuanced-bg . \"#1f1f5f\") (blue-nuanced-fg . \"#bfd9ff\") (magenta-nuanced-bg . \"#431641\") (magenta-nuanced-fg . \"#e5cfef\") (cyan-nuanced-bg . \"#042f49\") (cyan-nuanced-fg . \"#a8e5e5\") (bg-diff-heading . \"#304466\") (fg-diff-heading . \"#dae7ff\") (bg-diff-added . \"#0a383a\") (fg-diff-added . \"#94ba94\") (bg-diff-changed . \"#2a2000\") (fg-diff-changed . \"#b0ba9f\") (bg-diff-removed . \"#50163f\") (fg-diff-removed . \"#c6adaa\") (bg-diff-refine-added . \"#006a46\") (fg-diff-refine-added . \"#e0f6e0\") (bg-diff-refine-changed . \"#585800\") (fg-diff-refine-changed . \"#ffffcc\") (bg-diff-refine-removed . \"#952838\") (fg-diff-refine-removed . \"#ffd9eb\") (bg-diff-focus-added . \"#1d4c3f\") (fg-diff-focus-added . \"#b4dfb4\") (bg-diff-focus-changed . \"#424200\") (fg-diff-focus-changed . \"#d0daaf\") (bg-diff-focus-removed . \"#6f0f39\") (fg-diff-focus-removed . \"#eebdba\"))) (setq modus-themes-operandi-color-overrides nil modus-themes-vivendi-color-overrides nil)))\n\n5.13 Font configurations for Org and others\n\nThe themes are designed to optionally cope well with mixed font configurations. This mostly concerns org-mode and markdown-mode, though expect to find it elsewhere like in Info-mode.\n\nOption for font mixing.\n\nIn practice it means that the user can safely opt for a more prose-friendly proportionately spaced typeface as their default, while spacing-sensitive elements like tables and inline code always use a monospaced font, by inheriting from the fixed-pitch face.\n\nUsers can try the built-in M-x variable-pitch-mode to see the effect in action.\n\nTo make everything use your desired font families, you need to configure the variable-pitch (proportional spacing) and fixed-pitch (monospaced) faces respectively. It may also be convenient to set your main typeface by configuring the default face the same way.\n\n[ The ‘fontaine’ package on GNU ELPA (by the author of the modus-themes) is designed to handle this case. ]\n\nPut something like this in your initialization file (also consider reading the doc string of set-face-attribute):\n\n;; Main typeface (set-face-attribute 'default nil :family \"DejaVu Sans Mono\" :height 110) ;; Proportionately spaced typeface (set-face-attribute 'variable-pitch nil :family \"DejaVu Serif\" :height 1.0) ;; Monospaced typeface (set-face-attribute 'fixed-pitch nil :family \"DejaVu Sans Mono\" :height 1.5)\n\nOr employ the face-attribute function to read an existing value, such as if you want to make fixed-pitch use the font family of the default face:\n\n(set-face-attribute 'fixed-pitch nil :family (face-attribute 'default :family))\n\nThe next section shows how to make those work in a more elaborate setup that is robust to changes between the Modus themes.\n\nConfigure bold and italic faces.\n\nNote the differences in the :height property. The default face must specify an absolute value, which is the point size Ã 10. So if you want to use a font at point size ‘11’, you set the height to ‘110’.1 Whereas every other face must either not specify a height or have a value that is relative to the default, represented as a floating point. If you use an integer, then that means an absolute height. This is of paramount importance: it ensures that all fonts can scale gracefully when using something like the text-scale-adjust command which only operates on the base font size (i.e. the default face’s absolute height).\n\nNote for EWW and Elfeed fonts.\n\n5.14 Configure bold and italic faces\n\nThe Modus themes do not hardcode a :weight or :slant attribute in the thousands of faces they cover. Instead, they configure the generic faces called bold and italic to use the appropriate styles and then instruct all relevant faces that require emphasis to inherit from them.\n\nThis practically means that users can change the particularities of what it means for a construct to be bold/italic, by tweaking the bold and italic faces. Cases where that can be useful include:\n\nThe default typeface does not have a variant with slanted glyphs (e.g. Fira Mono/Code as of this writing on 2021-07-07), so the user wants to add another family for the italics, such as Hack.\n\nThe typeface of choice provides a multitude of weights and the user prefers the light one by default. To prevent the bold weight from being too heavy compared to the light one, they opt to make bold use a semibold weight.\n\nThe typeface distinguishes between oblique and italic forms by providing different font variants (the former are just slanted versions of the upright forms, while the latter have distinguishing features as well). In this case, the user wants to specify the font that applies to the italic face.\n\nTo achieve those effects, one must first be sure that the fonts they use have support for those features. It then is a matter of following the instructions for all typeface tweaks.\n\nFont configurations for Org and others.\n\nIn this example, we set the default font family to Fira Code, while we choose to render italics in the Hack typeface (obviously you need to pick fonts that work well together):\n\n(set-face-attribute 'default nil :family \"Fira Code\" :height 110) (set-face-attribute 'italic nil :family \"Hack\")\n\nAnd here we play with different weights, using Source Code Pro:\n\n(set-face-attribute 'default nil :family \"Source Code Pro\" :height 110 :weight 'light) (set-face-attribute 'bold nil :weight 'semibold)\n\nTo reset the font family, one can use this:\n\n(set-face-attribute 'italic nil :family 'unspecified)\n\nTo ensure that the effects persist after switching between the Modus themes (such as with M-x modus-themes-toggle), the user needs to write their configurations to a function and pass it to the modus-themes-after-load-theme-hook. This is necessary because themes set the styles of faces upon activation, overriding prior values where conflicts occur between the previous and the current states (otherwise changing themes would not be possible).\n\nA theme-agnostic hook for theme loading.\n\nThis is a minimal setup to preserve font configurations across theme load phases. For a more permanent setup, it is better to rely on the custom-set-faces function: set-face-attribute works just fine, though it probably is better suited for quick previews or for smaller scale operations (custom-set-faces follows the format used in the source code of the themes, which can make it easier to redefine faces in bulk).\n\n;; our generic function (defun my-modes-themes-bold-italic-faces () (set-face-attribute 'default nil :family \"Source Code Pro\" :height 110) (set-face-attribute 'bold nil :weight 'semibold)) ;; or use this if you configure a lot of face and attributes and ;; especially if you plan to use `modus-themes-with-colors', as shown ;; elsewhere in the manual (defun my-modes-themes-bold-italic-faces () (custom-set-faces '(default ((t :family \"Source Code Pro\" :height 110))) '(bold ((t :weight semibold))))) ;; and here is the hook (add-hook 'modus-themes-after-load-theme-hook #'my-modes-themes-bold-italic-faces)\n\nFace specs at scale using the themes’ palette.\n\n5.15 Custom Org todo keyword and priority faces\n\nUsers of org-mode have the option to configure various keywords and priority cookies to better match their workflow. User options are org-todo-keyword-faces and org-priority-faces.\n\nAs those are meant to be custom faces, it is futile to have the themes guess what each user wants to use, which keywords to target, and so on. Instead, we can provide guidelines on how to customize things to one’s liking with the intent of retaining the overall aesthetic of the themes.\n\nPlease bear in mind that the end result of those is not controlled by the active Modus theme but by how Org maps faces to its constructs. Editing those while org-mode is active requires re-initialization of the mode with M-x org-mode-restart for changes to take effect.\n\nLet us assume you wish to visually differentiate your keywords. You have something like this:\n\n(setq org-todo-keywords '((sequence \"TODO(t)\" \"|\" \"DONE(D)\" \"CANCEL(C)\") (sequence \"MEET(m)\" \"|\" \"MET(M)\") (sequence \"STUDY(s)\" \"|\" \"STUDIED(S)\") (sequence \"WRITE(w)\" \"|\" \"WROTE(W)\")))\n\nYou could then use a variant of the following to inherit from a face that uses the styles you want and also to preserve the properties applied by the org-todo face (in case there is a difference between the two):\n\n(setq org-todo-keyword-faces '((\"MEET\" . '(bold org-todo)) (\"STUDY\" . '(warning org-todo)) (\"WRITE\" . '(shadow org-todo))))\n\nThis will refashion the keywords you specify, while letting the other items in org-todo-keywords use their original styles (which are defined in the org-todo and org-done faces).\n\nIf you want back the defaults, try specifying just the org-todo face:\n\n(setq org-todo-keyword-"
    }
}