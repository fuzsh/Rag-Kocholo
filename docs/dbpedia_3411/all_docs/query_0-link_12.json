{
    "id": "dbpedia_3411_0",
    "rank": 12,
    "data": {
        "url": "https://www.seomastering.com/wiki/Lisaac",
        "read_more_link": "",
        "language": "en",
        "title": "Lisaac",
        "top_image": "https://www.seomastering.com/favicon.ico",
        "meta_img": "https://www.seomastering.com/favicon.ico",
        "images": [
            "https://mc.yandex.ru/watch/87013101",
            "https://www.seomastering.com/w/resources/assets/poweredby_mediawiki_88x31.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "LisaacFile:Lisaac logo.pngParadigm object-oriented prototype-basedAppeared in 2003Designed by Benoît SonntagDeveloper Benoît Sonntag & Jérôme BoutetStable release 0.13.1 (Specification) (February 17, 2008)Typing discipline static typingMajor implementations LisaacInfluenced by Smalltalk, Self, EiffelWebsite www.lisaac.org\n\nLisaac is the first compiled object-oriented programming language based on prototype concepts, with system programming facilities and design by contract.\n\nLisaac's developers admired both Self's flexibility and dynamic inheritance, and Eiffel's static typing and design by contract features. Seeking to combine these two apparently contradictory feature sets, Lisaac was created.\n\nLisaac was designed as the language in which the Isaac operating system would be programmed.\n\nThe Lisaac compiler produces optimized ANSI C code, which can then be compiled on every architecture with an appropriate C compiler which makes Lisaac a real multi-platform language. Compiling results show that it is possible to obtain executables from a high-level prototype-based language that are as fast as C programs[1][2].\n\nDespite being strongly typed, there is no difference between code and data.\n\nFeatures\n\nCommunication protection mechanisms\n\nHardware facilities\n\nSystem interrupt support\n\nDriver memory mapping\n\nDespite being compiled, all objects retain their dynamic abilities\n\nBasic syntax\n\nLisaac is case sensitive. Keywords are capitalized (Section, Header, Public, …), type identifiers are written in upper case letters (INTEGER, BOOLEAN, OBJECT, …), and identifiers denoting variables and slots are written in lower case letters. Objects are composed of slots, which can be data or code. The ':' symbol is used to declare types. Slot names are prefixed with a '+' or '-' symbol to indicate whether the slot is local to an object or shared between objects.\n\nParentheses are used to delimit lists of semicolon separated statements. Statement lists may have zero, one or more return values. The ':=' symbol is used to bind a slot to a statement or statement list that is executed at the loading/initialization of an object. The '<-' symbol is used to bind a slot to a statement list that is executed on the call of the slot.\n\nDynamic inheritance\n\nThe parent of each object is just a slot that can be assigned as required in the code, for instance:\n\nSection Header - name := DECOD_MPEG2_TO_SCREEN; Section Inherit - videoparent : OBJECT <- ( + result : OBJECT; typ .when 1 then { result := WINDOW;} .when 2 then { result := VIDEO_VGA;} .when 3 then { result := VIDEO_TVOUT;}; result ) Section Public - typ : INTEGER; - decode_stream <- ( putimage decode_to_bitmap; )\n\nOperator redefining\n\nIn Lisaac, an operator is a slot and can be redefined. For example overloading the + operator for a NUMERIC object:\n\n- '+' Left 80 other:SELF :SELF <- Self - -other;\n\nOr for a matrix:\n\n- '+' Left 80 other:SELF :SELF <- ( + result : SELF; result := SELF.create count; 1.to tab.count do { i : INTEGER; result.put (item i+other.item i) to i; }; result )\n\nGenericity\n\nGeneric objects are supported, for instance:\n\nARRAY(E), DICTIONARY(KEY,VALUE)\n\nContract programming\n\nContract programming using Z notation is provided.\n\nOfficial website\n\nWiki (mostly in French)\n\nLisaac on GNA (moved to Alioth)\n\nLisaac on Alioth\n\nNotes and references"
    }
}