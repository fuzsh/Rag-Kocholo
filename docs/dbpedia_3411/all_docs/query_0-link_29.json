{
    "id": "dbpedia_3411_0",
    "rank": 29,
    "data": {
        "url": "http://lambda-the-ultimate.org/classic/message8855.html",
        "read_more_link": "",
        "language": "en",
        "title": "LtU Classic Archives",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://lambda-the-ultimate.org/classic/folder2.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif",
            "http://lambda-the-ultimate.org/classic/leftArrow.gif",
            "http://lambda-the-ultimate.org/classic/skull.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Looks really weak to me. Let me elaborate.\n\n1. eachof\n\nThe author proposes things like\n\nfor (Object o = eachof c) .... while ((Object o = eachof c) != null) ....\n\nMakes you think that \"eachof\" is an operator of its own, hm? Ok, now what if I write :\n\nreturn (eachof c);\n\nEither this is refused (=> not orthogonal) or \"eachof c\" has a type like \"Iterator<Object>\". Now the assignment implied by the proposed syntax looks broken.\n\n2. Generics\n\n\"* It leverages and generalizes existing constructs. The programmer's existing understanding of type casts aids the understanding of this syntax.\"\n\n\"(Number) Collection\" should mean to cast Collection into Number then? Damn! I always tought that \"Collection\" was more like a function type applied \"Number\".\n\n\"*It is more readable than angle-bracket type parameters. This is a matter of taste, of course, and your taste may differ from mine.\"\n\nWell, I don't like it. Let's call it even?\n\n\"*It doesn't result in type parameters and variable parameters becoming \"stacked up.\"\"\n\nDon't they? A polymorphic method declaration (with type parameters to the method) would sure look great.\n\n\"*It reflects what actually happens in a generic system based on type erasure, such as Generic Java.\"\n\nSo does the proposed syntax.\n\n\"*It starts to unify generic collection syntax with existing array syntax.\"\n\nOk. Granted.\n\n\"*It maps simply to the standard Generic Java syntax, making it easy to modify existing tools.\"\n\nSo does the proposed syntax. Even more simply! :))\n\nTo sum up, not really better.\n\n3. Variance\n\nThe syntax \"Object..Number\" makes you believe that you can write \"A..B\" for any classes. Which you can't, even when B inherits A. (The current system does allow not arbitary bounds) Furthermore, how to you write invariant types? Maybe \"Number..Number\"? Argh! The pain!\n\nWhat's the point of an alternative that is arguably only slightly better than the intial proposal? As a conclusion, let's repepat that syntax is way too much discussed. (as this post demonstrates :). I'm sorry, I could not resist this.\n\nI'm creating an extension of BeyondJS for Rhino. Since Rhino is an ECMA compliant implementation, the library ported without a hitch. What I'm doing now is adding some custom functionality that will leverage an extend Rhino's ability for letting JavaScript interact with Java. Some of this is relevant for this discussion, in particular eachOf et al.\n\nI've extended JavaScript Array to implement java.util.Enumeration, java.util.Iterator, java.util.ListIterator, java.util.Collection and java.util.List. Actually this is done via wrapper objects provided by Rhino. For example:\n\njs> a = [1,2,3];\n\n1,2,3\n\njs> java.util.Collections.shuffle(a.list());\n\njs> a\n\n2,3,1\n\nAlso, I've provided wrappers that transform Java iterator, lists, etc to BeyondJS lazy lists. This means you can apply list comprehensions to them, e.g.\n\njs> var a = new java.util.ArrayList();\n\njs> a.add(1);\n\ntrue\n\njs> a.add(2);\n\ntrue\n\njs> a.add(3);\n\ntrue\n\njs> Beyond.list(a).foreach(alert);\n\n1\n\n2\n\n3\n\nCombining the two:\n\njs> var a = [1,2,3];\n\njs> var b = new java.util.ArrayList(a.collection());\n\njs> Beyond.list(b).foreach(alert);\n\n1\n\n2\n\n3\n\nforeach on top of JVM 1.4.1 (with a little help ;-)\n\nBTW, most of the work went into making sure that JavaScript values are transformed to the appropriate Java types and vise versa."
    }
}