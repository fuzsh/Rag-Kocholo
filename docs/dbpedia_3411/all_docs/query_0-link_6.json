{
    "id": "dbpedia_3411_0",
    "rank": 6,
    "data": {
        "url": "https://launchpad.net/ubuntu/jammy/%2Bpackage/lisaac",
        "read_more_link": "",
        "language": "en",
        "title": "lisaac : Jammy (22.04) : Ubuntu",
        "top_image": "https://launchpad.net/@@/launchpad-og-image.png",
        "meta_img": "https://launchpad.net/@@/launchpad-og-image.png",
        "images": [
            "https://launchpadlibrarian.net/606381979/CoF%2064px.png",
            "https://launchpad.net/@@/launchpad-footer-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Lisaac is a small prototype-based programming language. The ideas in\n Lisaac are mostly inspired by Smalltalk (all values are objects), Self\n (prototype-based) and Eiffel (design by contract). It has the following\n features:\n .\n  * pure object language\n  * very fast (like C code)\n  * dynamic and multiple inheritance\n  * dynamic definition slots\n  * static typing (invariant)\n  * generic types\n  * auto-cast type system\n  * programming by contract\n  * interrupt manager\n  * include C code facili...",
        "meta_lang": "en",
        "meta_favicon": "/@@/apple-touch-icon.png?v=2022",
        "meta_site_name": "Launchpad",
        "canonical_link": "https://launchpad.net/ubuntu/jammy/+package/lisaac/+index",
        "text": "Object-oriented language based on prototype\n\nLisaac is a small prototype-based programming language. The ideas in\n\nLisaac are mostly inspired by Smalltalk (all values are objects), Self\n\n(prototype-based) and Eiffel (design by contract). It has the following\n\nfeatures:\n\n.\n\n* pure object language\n\n* very fast (like C code)\n\n* dynamic and multiple inheritance\n\n* dynamic definition slots\n\n* static typing (invariant)\n\n* generic types\n\n* auto-cast type system\n\n* programming by contract\n\n* interrupt manager\n\n* include C code facilities"
    }
}