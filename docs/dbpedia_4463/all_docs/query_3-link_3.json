{
    "id": "dbpedia_4463_3",
    "rank": 3,
    "data": {
        "url": "https://pro.arcgis.com/en/pro-app/latest/help/mapping/text/specify-text-for-labels.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Specify text for labelsâ€”ArcGIS Pro",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://pro.arcgis.com/en/pro-app/latest/help/mapping/text/GUID-1CCEDA16-7D57-46C6-8BB9-934DA1870233-web.png",
            "https://pro.arcgis.com/en/pro-app/latest/help/mapping/text/GUID-EC92D60C-3729-4294-A7C9-11A1722EA03E-web.png",
            "https://pro.arcgis.com/en/pro-app/latest/help/mapping/text/GUID-A3161ED0-0CD3-4BFA-8E48-52E5EA8B35CE-web.png",
            "https://pro.arcgis.com/en/pro-app/latest/help/mapping/text/GUID-FA660FA8-9ADA-4A4E-82C9-5F123525536C-web.png",
            "https://pro.arcgis.com/en/pro-app/latest/help/mapping/text/GUID-736F6A96-6A49-48FA-934A-2BA17BC31816-web.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-04-08T00:00:00",
        "summary": "",
        "meta_description": "You can use label expressions to adjust the formatting of your labels. In addition to inserting characters and scripting functions, you can use ArcGIS Pro formatting tags in label expressions.",
        "meta_lang": "en",
        "meta_favicon": "/assets/img/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Label text strings are derived from one or more feature attributes. Labels are dynamic, so if feature attribute values change, the labels also change. When you turn on labeling, features are initially labeled based on one field; for example, on a meteorological map, you might label weather stations with daily precipitation. This single field-based label is set on the Labeling tab.\n\nThis label field defaults to the first field of string type that contains the text Name in its name (not case sensitive). If no field with that text in its name exists, it defaults to the first field of string type, then the first field of integer type, then the first field of any type.\n\nYou can add attribute fields to your labels. For example, you might label your weather stations with both daily precipitation and maximum wind speed. Whether your labels are based on one attribute field or many fields, the statement that determines your label text is called the label expression. Each label class has its own label expression.\n\nLearn more about creating label expressions\n\nYou can insert your own text in the label expression to have it appear with your labels on the map. For example, on your weather map, you could add abbreviated measurement units to each label (for example, in for inches and MPH for miles per hour). You can also use Arcade, Python, VBScript, or JScript in your label expression to change how the text is displayed. For instance, you could insert a function to make precipitation values appear on one line of text and wind speed values appear on a second line. Both of these examples are shown in the following image:\n\nYou can further control how text appears on the map using ArcGIS Pro text formatting tags. Using text formatting tags, you can specify different text display properties for different portions of your label text. For example, you can show precipitation values with italicized, blue text and wind speed values in regular, black text as shown in the following image:\n\nLabel expressions\n\nUsing an advanced label expression, you can add any Arcade, Python, VBScript, or JScript logic to your label expressions, including conditional logic and looping. For example, you could produce labels that have only the first letter of each word capitalized, regardless of how the text strings are stored in the attribute fields. You can also use label expressions to adjust the formatting of your labels using ArcGIS Pro formatting tags. These are special characters for changing the appearance of all or part of your labels. For example, you might use the bold formatting tag to make the first line bold in a stacked, multiline label.\n\nTip:\n\nArcade expressions are used throughout ArcGIS. The Labeling profile is used for label expressions. Arcade expressions work in Runtime, ArcGIS Pro, and ArcGIS Runtime SDKs, while other languages do not.\n\nA label expression can either be a simple single-line expression, or a more complex expression spanning multiple lines of code and making use of the parser's programming logic. Arcade enables complex expressions by default. When using Python, VBScript, or JScript, the Advanced check box must be checked and the code must be wrapped in a function to enable multiline expressions.\n\nIf you have coded value descriptions in your data, you can use the Use coded value descriptions option to display those descriptions in the label instead of the code.\n\nField values are automatically cast to text strings. Therefore, if you want to use a numeric value in an arithmetic operation or when making a comparison, you must cast it back to a numeric data type.\n\nNULL values are not cast to text strings. They are passed to the expression as NULL.\n\nWhen using Arcade, the field values maintain their data type.\n\nThe following examples add two integer fields:\n\nArcade\n\n$feature.FIELD1 + $feature.FIELD2\n\nPython\n\nint([FIELD1]) + int([FIELD2])\n\nVBScript\n\ncint([FIELD1]) + cint([FIELD2])\n\nJScript\n\nparseInt([FIELD1]) + parseInt([FIELD2])\n\nAdditional Maplex Label Engine options\n\nThe Maplex Label Engine provides you the additional ability to control the white space used in your label.\n\nThe Remove extra spaces option removes additional space characters from the label text. These extra spaces include all preceding, succeeding, and interior space characters. If the option is disabled, the spaces are used for formatting, for example, allowing you to indent text in a stacked label.\n\nThe Remove extra line breaks option removes additional line breaks from the label text. If the option is disabled, multiline spacing is possible in a stacked label.\n\nExpression examples\n\nThe following are examples of label expressions:\n\nConcatenate a string to a field value\n\nConcatenate a string to the value in a field; for example, this expression creates a label where the value of the PARCELNO field is preceded by the text \"Parcel no:\":\n\nArcade\n\n\"Parcel no: \" + $feature.PARCELNO\n\nPython\n\n\"Parcel no: \" + [PARCELNO]\n\nVBScript\n\n\"Parcel no: \" & [PARCELNO]\n\nJScript\n\n\"Parcel no: \" + [PARCELNO]\n\nRound a decimal number\n\nRound a decimal number to a set number of decimals; for example, this expression displays an AREA field rounded to one decimal place:\n\nArcade\n\nround(number($feature.AREA), 1)\n\nPython\n\nround(float([AREA]), 1)\n\nVBScript\n\nRound ([AREA], 1)\n\nJScript\n\nfunction FindLabel ( [AREA] ) { var ss; var num= parseFloat([AREA]); ss = num.toFixed(1); return (ss); }\n\nConvert to uppercase and lowercase\n\nConvert your text labels to all uppercase or lowercase; for example, this expression makes a NAME field all lowercase:\n\nArcade\n\nlower($feature.NAME)\n\nPython\n\ndef FindLabel ( [NAME] ): S = [NAME] S = S.lower() return S\n\nVBScript\n\nLCase ([NAME])\n\nJScript\n\n[NAME].toLowerCase()\n\nConvert to proper case\n\nConvert your text labels to proper case; for example, this expression takes a NAME field that is uppercase and makes it proper case:\n\nArcade\n\nProper($feature.NAME, 'firstword')\n\nPython\n\ndef FindLabel ( [NAME] ): S = [NAME] S = S.title() return S\n\nVBScript\n\nFunction FindLabel ( [NAME] ) FindLabel = UCase(Left([NAME],1)) & LCase(Right([NAME], Len([NAME]) -1)) End Function\n\nJScript\n\nfunction FindLabel ( [NAME] ) { var str = [NAME]; var iLen = String(str).length; var upper = (str.substring(0,1)).toUpperCase(); var lower = (str.substring(1, iLen)).toLowerCase() return upper + lower; }\n\nStack text from multiple fields\n\nCreate stacked text; for example, this expression creates a label with the NAME field and the ADDRESS field on separate lines:\n\nArcade\n\n$feature.NAME + TextFormatting.NewLine + $feature.ADDRESS\n\nPython\n\n[NAME] + '\\n' + [ADDRESS]\n\nVBScript\n\n[NAME] & vbCrLf& [ADDRESS]\n\nJScript\n\n[NAME] + \"\\r\" + [ADDRESS]\n\nStack text from one field\n\nCreate stacked text based on text from one field; for example, this expression uses the comma to specify where the stack occurs:\n\nArcade\n\nreplace($feature.LABELFIELD, ', ', '\\n')\n\nPython\n\ndef FindLabel ( [LABELFIELD] ): S = [LABELFIELD] S = S.replace(', ', '\\n') return S\n\nVBScript\n\nFunction FindLabel ( [LABELFIELD] ) FindLabel = replace([LABELFIELD], \", \", vbnewline) End Function\n\nJScript\n\nfunction FindLabel ( [LABELFIELD] ) { var r, re; var str = [LABELFIELD]; re = /,/g; r = str.replace(re, \"\\r\"); return r; }\n\nFormat labels\n\nFormat the labels; for example, this expression displays the label as currency:\n\nArcade\n\n\"Occupancy Revenue: $\" + round($feature.MAXIMUM_OC * $feature.RATE, 2)\n\nPython\n\ndef FindLabel ( [MAXIMUM_OC], [RATE] ): import locale locale.setlocale(locale.LC_ALL, '') S = locale.currency(float([MAXIMUM_OC]) * float([RATE])) return S\n\nVBScript\n\n\"Occupancy Revenue: \" & FormatCurrency ([MAXIMUM_OC] * [RATE])\n\nJScript\n\nfunction FindLabel ( [MAXIMUM_OC], [RATE] ) { var ss; var num1 = parseFloat([MAXIMUM_OC]); var num2 = parseFloat([RATE]); var num3 = num1 * num2 ss = num3.toFixed(2); return (\"$\" + ss); }\n\nLabel with part of the string\n\nUse only part of the field as the label; for example, this expression displays the third through fifth characters:\n\nArcade\n\nmid($feature.LABELFIELD, 2, 3)\n\nPython\n\ndef FindLabel ( [LABELFIELD] ): S = [LABELFIELD] return S[2:5]\n\nVBScript\n\nMid([LABELFIELD], 3, 3)\n\nJScript\n\nfunction FindLabel ( [LABELFIELD] ) { var S; var str = [LABELFIELD]; S = str.substring(2, 5); return S; }\n\nCreate a conditional if-else statement\n\nSpecify a conditional if-else statement. These functions label cities with their name in a large, red font if their population is equal to or exceeds 250,000 and in the default label font if the population is less than 250,000:\n\nArcade\n\nif ($feature.POPULATION >=250000) { return \"<CLR red='255'><FNT size = '14'>\" + $feature.NAME + \"</FNT></CLR>\" } else { return $feature.NAME }\n\nPython\n\ndef FindLabel ( [NAME], [POPULATION] ): if int([POPULATION]) >= 250000: return \"<CLR red='255'><FNT size = '14'>\" + [NAME] + \"</FNT></CLR>\" else: return [NAME]\n\nVBScript\n\nFunction FindLabel ([NAME], [POPULATION]) if (cLng([POPULATION]) >= 250000) then FindLabel = \"<CLR red='255'><FNT size = '14'>\" + [NAME] + \"</FNT></CLR>\" else FindLabel = [NAME] end if End Function\n\nJScript\n\nfunction FindLabel ( [NAME], [POPULATION] ) { if (parseFloat([POPULATION]) >= 250000){ return (\"<CLR red='255'><FNT size = '14'>\" + [NAME] + \"</FNT></CLR>\"); } else return ([NAME]); }\n\nTo label a subset of features based on a field value, create the SQL query in the label class instead of through the label expression.\n\nAdditional resources\n\nArcade Language Reference\n\nPython Language Reference\n\nMicrosoft VBScript Language Reference\n\nMicrosoft JScript Language Reference\n\n(Some information is stored on web pages not created, owned, or maintained by Esri. Esri cannot guarantee the availability of these pages and is not responsible for the content found on them.)"
    }
}