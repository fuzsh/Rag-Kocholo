{
    "id": "dbpedia_4463_3",
    "rank": 90,
    "data": {
        "url": "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/index.html",
        "read_more_link": "",
        "language": "en",
        "title": "Instance GPU User Guide :: NVIDIA Data Center GPU Driver Documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/gpu-mig-overview.jpg",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex1.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex2.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex3.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex4.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex5.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex6.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/mig-partitioning-ex7.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/canonical-mig-device-naming.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/a30-profiles-v2.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/a100-profiles-v4.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/h100-profiles-v1.png",
            "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/graphics/h200-profiles-v1.png",
            "http://docs.nvidia.com/datacenter/tesla/common/formatting/NVIDIA-LogoBlack.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "NVIDIA Multi-Instance GPU"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "User guide for Multi-Instance GPU on the NVIDIAÂ® GPUs.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "http://docs.nvidia.com/datacenter/tesla/mig-user-guide/index.html",
        "text": "Using the concepts introduced above, this section provides an overview of how the user can create various partitions on the GPU. For illustration purposes, the document will use the A100-40GB as an example, but the process is similar for other GPUs that support MIG.\n\nGPU Instance\n\nPartitioning of the GPU happens using memory slices, so the A100-40GB GPU can be thought of having 8x5GB memory slices and 7 SM slices as shown in the diagram below.\n\nFigure 2. Available Slices on A100\n\nAs explained above, then to create a GPU Instance (GI) requires combining some number of memory slices with some number of compute slices. In the diagram below, a 5GB memory slice is combined with 1 compute slice to create a 1g.5gb GI profile:\n\nFigure 3. Combining Memory and Compute Slices\n\nSimilarly, 4x5GB memory slices can be combined with 4x1 compute slices to create the 4g.5gb GI profile:\n\nFigure 4. Combining Memory and Compute Slices\n\nCompute Instance\n\nThe compute slices of a GPU Instance can be further subdivided into multiple Compute Instances (CI), with the CIs sharing the engines and memory of the parent GI, but each CI has dedicated SM resources.\n\nUsing the same 4g.20gb example above, a CI may be created to consume only the first compute slice as shown below:\n\nFigure 5. Combining Memory and Compute Slices\n\nIn this case, 4 different CIs can be created by choosing any of the compute slices. Two compute slices can also be combined together to create a 2c.4g.20gb profile:\n\nFigure 6. Combining Memory and Compute Slices\n\nIn this example, 3 compute slices can also be combined to create a 3c.4g.20gb profile or all 4 can be combined to create a 4c.4g.20gb profile. When all 4 compute slices are combined, the profile is simply referred to as the 4g.20gb profile.\n\nRefer to the sections on the canonical naming scheme and the CUDA device terminology.\n\nProfile Placement\n\nThe number of slices that a GI can be created with is not arbitrary. The NVIDIA driver APIs provide a number of âGPU Instance Profilesâ and users can create GIs by specifying one of these profiles.\n\nOn a given GPU, multiple GIs can be created from a mix and match of these profiles, so long as enough slices are available to satisfy the request.\n\nNote:\n\nThe table below shows the profile names on the A100-SXM4-40GB product. For A100-SXM4-80GB, the profile names will change according to the memory proportion - for example, 1g.10gb, 2g.20gb, 3g.40gb, 4g.40gb, 7g.80gb respectively.\n\nFor a list of all supported combinations of profiles on MIG-enabled GPUs, refer to the section on supported profiles.\n\nTable 2. GPU Instance Profiles on A100 Profile Name Fraction of Memory Fraction of SMs Hardware Units L2 Cache Size Copy Engines Number of Instances Available MIG 1g.5gb 1/8 1/7 0 NVDECs /0 JPEG /0 OFA 1/8 1 7 MIG 1g.5gb+me 1/8 1/7 1 NVDEC /1 JPEG /1 OFA 1/8 1 1 (A single 1g profile can include media extensions) MIG 1g.10gb 1/8 1/7 1 NVDECs /0 JPEG /0 OFA 1/8 1 4 MIG 2g.10gb 2/8 2/7 1 NVDECs /0 JPEG /0 OFA 2/8 2 3 MIG 3g.20gb 4/8 3/7 2 NVDECs /0 JPEG /0 OFA 4/8 3 2 MIG 4g.20gb 4/8 4/7 2 NVDECs /0 JPEG /0 OFA 4/8 4 1 MIG 7g.40gb Full 7/7 5 NVDECs /1 JPEG /1 OFA Full 7 1\n\nThe diagram below shows a pictorial representation of how to build all valid combinations of GPU instances.\n\nFigure 7. MIG Profiles on A100\n\nIn this diagram, a valid combination can be built by starting with an instance profile on the left and combining it with other instance profiles as you move to the right, such that no two profiles overlap vertically. For a list of all supported combinations and placements of profiles on A100 and A30, refer to the section on supported profiles.\n\nNote that prior to NVIDIA driver release R510, the combination of a (4 memory, 4 compute) and a (4 memory, 3 compute) profile was not supported. This restriction no longer applies on newer drivers.\n\nFigure 8. Profile Placements on A100\n\nNote that the diagram represents the physical layout of where the GPU Instances will exist once they are instantiated on the GPU. As GPU Instances are created and destroyed at different locations, fragmentation can occur, and the physical position of one GPU Instance will play a role in which other GPU Instances can be instantiated next to it.\n\nBefore starting to use MIG, the user needs to create GPU instances using the -cgi option. One of three options can be used to specify the instance profiles to be created:\n\nProfile ID (e.g. 9, 14, 5)\n\nShort name of the profile (e.g. 3g.20gb\n\nFull profile name of the instance (e.g. MIG 3g.20gb)\n\nOnce the GPU instances are created, one needs to create the corresponding Compute Instances (CI). By using the -C option, nvidia-smi creates these instances.\n\nNote:\n\nWithout creating GPU instances (and corresponding compute instances), CUDA workloads cannot be run on the GPU. In other words, simply enabling MIG mode on the GPU is not sufficient. Also note that, the created MIG devices are not persistent across system reboots. Thus, the user or system administrator needs to recreate the desired MIG configurations if the GPU or system is reset. For automated tooling support for this purpose, refer to the NVIDIA MIG Partition Editor (or mig-parted) tool, including creating a systemd service that could recreate the MIG geometry at system startup.\n\nThe following example shows how the user can create GPU instances (and corresponding compute instances). In this example, the user can create two GPU instances (of type 3g.20gb), with each GPU instance having half of the available compute and memory capacity. In this example, we purposefully use profile ID and short profile name to showcase how either option can be used:\n\n$ sudo nvidia-smi mig -cgi 9,3g.20gb -C Successfully created GPU instance ID 2 on GPU 0 using profile MIG 3g.20gb (ID 9) Successfully created compute instance ID 0 on GPU 0 GPU instance ID 2 using profile MIG 3g.20gb (ID 2) Successfully created GPU instance ID 1 on GPU 0 using profile MIG 3g.20gb (ID 9) Successfully created compute instance ID 0 on GPU 0 GPU instance ID 1 using profile MIG 3g.20gb (ID 2)\n\nNow list the available GPU instances:\n\n$ sudo nvidia-smi mig -lgi +----------------------------------------------------+ | GPU instances: | | GPU Name Profile Instance Placement | | ID ID Start:Size | |====================================================| | 0 MIG 3g.20gb 9 1 4:4 | +----------------------------------------------------+ | 0 MIG 3g.20gb 9 2 0:4 | +----------------------------------------------------+\n\nNow verify that the GIs and corresponding CIs are created:\n\n$ nvidia-smi +-----------------------------------------------------------------------------+ | MIG devices: | +------------------+----------------------+-----------+-----------------------+ | GPU GI CI MIG | Memory-Usage | Vol| Shared | | ID ID Dev | | SM Unc| CE ENC DEC OFA JPG| | | | ECC| | |==================+======================+===========+=======================| | 0 1 0 0 | 11MiB / 20224MiB | 42 0 | 3 0 2 0 0 | +------------------+----------------------+-----------+-----------------------+ | 0 2 0 1 | 11MiB / 20096MiB | 42 0 | 3 0 2 0 0 | +------------------+----------------------+-----------+-----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+\n\nInstance Geometry\n\nAs described in the section on Partitioning, the NVIDIA driver APIs provide a number of available GPU Instance profiles that can be chosen by the user.\n\nIf a mixed geometry of the profiles is specified by the user, then the NVIDIA driver chooses the placement of the various profiles. This can be seen in the following examples.\n\nExample 1: Creation of a 4-2-1 geometry. After the instances are created, the placement of the profiles can be observed:\n\n$ sudo nvidia-smi mig -cgi 19,14,5 Successfully created GPU instance ID 13 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 5 on GPU 0 using profile MIG 2g.10gb (ID 14) Successfully created GPU instance ID 1 on GPU 0 using profile MIG 4g.20gb (ID 5) $ sudo nvidia-smi mig -lgi +----------------------------------------------------+ | GPU instances: | | GPU Name Profile Instance Placement | | ID ID Start:Size | |====================================================| | 0 MIG 1g.5gb 19 13 6:1 | +----------------------------------------------------+ | 0 MIG 2g.10gb 14 5 4:2 | +----------------------------------------------------+ | 0 MIG 4g.20gb 5 1 0:4 | +----------------------------------------------------+\n\nExample 2: Creation of a 3-2-1-1 geometry.\n\nNote:\n\nDue to a known issue with the APIs, the profile ID 9 or 3g.20gb must be specified first in order. Not doing so, will result in the following error.\n\n$ sudo nvidia-smi mig -cgi 19,19,14,9 Successfully created GPU instance ID 13 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 11 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 3 on GPU 0 using profile MIG 2g.10gb (ID 14) Unable to create a GPU instance on GPU 0 using profile 9: Insufficient Resources Failed to create GPU instances: Insufficient Resources\n\nSpecify the correct order for the 3g.20gb profile. The remaining combinations of the profiles do not have this requirement.\n\n$ sudo nvidia-smi mig -cgi 9,19,14,19 Successfully created GPU instance ID 2 on GPU 0 using profile MIG 3g.20gb (ID 9) Successfully created GPU instance ID 7 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 4 on GPU 0 using profile MIG 2g.10gb (ID 14) Successfully created GPU instance ID 8 on GPU 0 using profile MIG 1g.5gb (ID 19) $ sudo nvidia-smi mig -lgi +----------------------------------------------------+ | GPU instances: | | GPU Name Profile Instance Placement | | ID ID Start:Size | |====================================================| | 0 MIG 1g.5gb 19 7 0:1 | +----------------------------------------------------+ | 0 MIG 1g.5gb 19 8 1:1 | +----------------------------------------------------+ | 0 MIG 2g.10gb 14 4 2:2 | +----------------------------------------------------+ | 0 MIG 3g.20gb 9 2 4:4 | +----------------------------------------------------+\n\nExample 3: Creation of a 2-1-1-1-1-1 geometry:\n\n$ sudo nvidia-smi mig -cgi 14,19,19,19,19,19 Successfully created GPU instance ID 5 on GPU 0 using profile MIG 2g.10gb (ID 14) Successfully created GPU instance ID 13 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 7 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 8 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 9 on GPU 0 using profile MIG 1g.5gb (ID 19) Successfully created GPU instance ID 10 on GPU 0 using profile MIG 1g.5gb (ID 19) $ sudo nvidia-smi mig -lgi +----------------------------------------------------+ | GPU instances: | | GPU Name Profile Instance Placement | | ID ID Start:Size | |====================================================| | 0 MIG 1g.5gb 19 7 0:1 | +----------------------------------------------------+ | 0 MIG 1g.5gb 19 8 1:1 | +----------------------------------------------------+ | 0 MIG 1g.5gb 19 9 2:1 | +----------------------------------------------------+ | 0 MIG 1g.5gb 19 10 3:1 | +----------------------------------------------------+ | 0 MIG 1g.5gb 19 13 6:1 | +----------------------------------------------------+ | 0 MIG 2g.10gb 14 5 4:2 | +----------------------------------------------------+\n\nThe system level interface for interacting with /dev based capabilities is actually through a combination of /proc and /dev.\n\nFirst, a new major device is now associated with nvidia-caps and can be read from the standard /proc/devices file.\n\n$ cat /proc/devices | grep nvidia-caps 508 nvidia-caps\n\nSecond, the exact same set of files exist under /proc/driver/nvidia/capabilities. These files no longer control access to the capability directly and instead, the contents of these files point at a device node under /dev, through which cgroups can be used to control access to the capability.\n\nThis can be seen in the example below:\n\n$ cat /proc/driver/nvidia/capabilities/mig/config DeviceFileMinor: 1 DeviceFileMode: 256 DeviceFileModify: 1\n\nThe combination of the device major for nvidia-caps and the value of DeviceFileMinor in this file indicate that the mig-config capability (which allows a user to create and destroy MIG devices) is controlled by the device node with a major:minor of 238:1. As such, one will need to use cgroups to grant a process read access to this device in order to configure MIG devices. The purpose of the DeviceFileMode and DeviceFileModify fields in this file are explained later on in this section.\n\nThe standard location for these device nodes is under /dev/nvidia-caps as seen in the example below:\n\n$ ls -l /dev/nvidia-caps total 0 cr-------- 1 root root 508, 1 Nov 21 17:16 nvidia-cap1 cr--r--r-- 1 root root 508, 2 Nov 21 17:16 nvidia-cap2 ...\n\nUnfortunately, these device nodes cannot be automatically created/deleted by the NVIDIA driver at the same time it creates/deletes files underneath /proc/driver/nvidia/capabilities (due to GPL compliance issues). Instead, a user-level program called nvidia-modprobe is provided, that can be invoked from user-space in order to do this. For example:\n\n$ nvidia-modprobe \\ -f /proc/driver/nvidia/capabilities/mig/config \\ -f /proc/driver/nvidia/capabilities/mig/monitor $ ls -l /dev/nvidia-caps total 0 cr-------- 1 root root 508, 1 Nov 21 17:16 nvidia-cap1 cr--r--r-- 1 root root 508, 2 Nov 21 17:16 nvidia-cap2\n\nnvidia-modprobe looks at the DeviceFileMode in each capability file and creates the device node with the permissions indicated (e.g. +ur from a value of 256 (o400) from our example for mig-config).\n\nPrograms such as nvidia-smi will automatically invoke nvidia-modprobe (when available) to create these device nodes on your behalf. In other scenarios it is not necessarily required to use nvidia-modprobe to create these device nodes, but it does make the process simpler.\n\nIf you actually want to prevent nvidia-modprobe from ever creating a particular device node on your behalf, you can do the following:\n\n# Give a user write permissions to the capability file under /proc $ chmod +uw /proc/driver/nvidia/capabilities/mig/config # Update the file with a âDeviceFileModifyâ setting of 0 $ echo \"DeviceFileModify: 0\" > /proc/driver/nvidia/capabilities/mig/config\n\nYou will then be responsible for managing creation of the device node referenced by /proc/driver/nvidia/capabilities/mig/config going forward. If you want to change that in the future, simply reset it to a value of \"DeviceFileModify: 1\" with the same command sequence.\n\nThis is important in the context of containers because we may want to give a container access to a certain capability even if it doesn't exist in the /proc hierarchy yet.\n\nFor example, granting a container the mig-config capability implies that we should also grant it capabilities to access all possible gis and cis that could be created for any GPU on the system. Otherwise the container will have no way of working with those gis and cis once they have actually been created.\n\nOne final thing to note about /dev based capabilities is that the minor numbers for all possible capabilities are predetermined and can be queried under various files of the form:\n\n/proc/driver/nvidia-caps/*-minors\n\nFor example, all capabilities related to MIG can be looked up as:\n\n$ cat /proc/driver/nvidia-caps/mig-minors config 1 monitor 2 gpu0/gi0/access 3 gpu0/gi0/ci0/access 4 gpu0/gi0/ci1/access 5 gpu0/gi0/ci2/access 6 ... gpu31/gi14/ci6/access 4321 gpu31/gi14/ci7/access 4322\n\nThe format of the content follows: GPU<deviceMinor>/gi<GPU instance ID>/ci<compute instance ID>\n\nNote that the GPU device minor number can be obtained by using either of these mechanisms:\n\nThe NVML API nvmlDeviceGetMinorNumber() so it returns the device minor number\n\nOr use the PCI BDF available under /proc/driver/nvidia/gpus/domain:bus:device:function/information. This file contains a \"Device Minor\" field.\n\nNote:\n\nThe NVML device numbering (e.g. through nvidia-smi) is not the device minor number.\n\nFor example, if the MIG geometry was created as below:\n\n+-----------------------------------------------------------------------------+ | MIG devices: | +------------------+----------------------+-----------+-----------------------+ | GPU GI CI MIG | Memory-Usage | Vol| Shared | | ID ID Dev | BAR1-Usage | SM Unc| CE ENC DEC OFA JPG| | | | ECC| | |==================+======================+===========+=======================| | 0 1 0 0 | 19MiB / 40192MiB | 14 0 | 3 0 3 0 3 | | | 0MiB / 65535MiB | | | +------------------+ +-----------+-----------------------+ | 0 1 1 1 | | 14 0 | 3 0 3 0 3 | | | | | | +------------------+ +-----------+-----------------------+ | 0 1 2 2 | | 14 0 | 3 0 3 0 3 | | | | | | +------------------+----------------------+-----------+-----------------------+\n\nThen the corresponding device nodes: /dev/nvidia-cap12, /dev/nvidia-cap13 and /dev/nvidia-cap14 and /dev/nvidia-cap15 would be created.\n\nThe system level interface for interacting with /proc based nvidia-capabilities is rooted at /proc/driver/nvidia/capabilities. Files underneath this hierarchy are used to represent each capability, with read access to these files controlling whether a user has a given capability or not. These files have no content and only exist to represent a given capability.\n\nFor example, the mig-config capability (which allows a user to create and destroy MIG devices) is represented as follows:\n\n/proc/driver/nvidia/capabilities âââ mig âââ config\n\nLikewise, the capabilities required to run workloads on a MIG device once it has been created are represented as follows (namely as access to the GPU Instance and Compute Instance that comprise the MIG device):\n\n/proc/driver/nvidia/capabilities âââ gpu0 âââ mig âââ gi0 â âââ access â âââ ci0 â âââ access âââ gi1 â âââ access â âââ ci0 â âââ access âââ gi2 âââ access âââ ci0 âââ access\n\nAnd the corresponding file system layout is shown below with read permissions:\n\n$ ls -l /proc/driver/nvidia/capabilities/gpu0/mig/gi* /proc/driver/nvidia/capabilities/gpu0/mig/gi1: total 0 -r--r--r-- 1 root root 0 May 24 17:38 access dr-xr-xr-x 2 root root 0 May 24 17:38 ci0 /proc/driver/nvidia/capabilities/gpu0/mig/gi2: total 0 -r--r--r-- 1 root root 0 May 24 17:38 access dr-xr-xr-x 2 root root 0 May 24 17:38 ci0\n\nFor a CUDA process to be able to run on top of MIG, it needs access to the Compute Instance capability and its parent GPU Instance. Thus a MIG device is identified by the following format:\n\nMIG-<GPU-UUID>/<GPU instance ID>/<compute instance ID>\n\nAs an example, having read access to the following paths would allow one to run workloads on the MIG device represented by <gpu0, gi0, ci0>:\n\n/proc/driver/nvidia/capabilities/gpu0/mig/gi0/access /proc/driver/nvidia/capabilities/gpu0/mig/gi0/ci0/access\n\nNote, that there is no access file representing a capability to run workloads on gpu0 (only on gi0 and ci0 that sit underneath gpu0). This is because the traditional mechanism of using cgroups to control access to top level GPU devices (and any required meta devices) is still required. As shown earlier in the document, the cgroups mechanism applies to:\n\n/dev/nvidia0 /dev/nvidiactl /dev/nvidiactl-uvm ...\n\nIn the context of containers, a new mount namespace should be overlaid on top of the path for /proc/driver/nvidia/capabilities, and only those capabilities a user wishes to grant to a container should be bind-mounted in. Since the hostâs user/group information is retained across the bind-mount, it must be ensured that the correct user permissions are set for these capabilities on the host before injecting them into a container.\n\nNotice\n\nThis document is provided for information purposes only and shall not be regarded as a warranty of a certain functionality, condition, or quality of a product. NVIDIA Corporation (âNVIDIAâ) makes no representations or warranties, expressed or implied, as to the accuracy or completeness of the information contained in this document and assumes no responsibility for any errors contained herein. NVIDIA shall have no liability for the consequences or use of such information or for any infringement of patents or other rights of third parties that may result from its use. This document is not a commitment to develop, release, or deliver any Material (defined below), code, or functionality.\n\nNVIDIA reserves the right to make corrections, modifications, enhancements, improvements, and any other changes to this document, at any time without notice.\n\nCustomer should obtain the latest relevant information before placing orders and should verify that such information is current and complete.\n\nNVIDIA products are sold subject to the NVIDIA standard terms and conditions of sale supplied at the time of order acknowledgement, unless otherwise agreed in an individual sales agreement signed by authorized representatives of NVIDIA and customer (âTerms of Saleâ). NVIDIA hereby expressly objects to applying any customer general terms and conditions with regards to the purchase of the NVIDIA product referenced in this document. No contractual obligations are formed either directly or indirectly by this document.\n\nNVIDIA products are not designed, authorized, or warranted to be suitable for use in medical, military, aircraft, space, or life support equipment, nor in applications where failure or malfunction of the NVIDIA product can reasonably be expected to result in personal injury, death, or property or environmental damage. NVIDIA accepts no liability for inclusion and/or use of NVIDIA products in such equipment or applications and therefore such inclusion and/or use is at customerâs own risk.\n\nNVIDIA makes no representation or warranty that products based on this document will be suitable for any specified use. Testing of all parameters of each product is not necessarily performed by NVIDIA. It is customerâs sole responsibility to evaluate and determine the applicability of any information contained in this document, ensure the product is suitable and fit for the application planned by customer, and perform the necessary testing for the application in order to avoid a default of the application or the product. Weaknesses in customerâs product designs may affect the quality and reliability of the NVIDIA product and may result in additional or different conditions and/or requirements beyond those contained in this document. NVIDIA accepts no liability related to any default, damage, costs, or problem which may be based on or attributable to: (i) the use of the NVIDIA product in any manner that is contrary to this document or (ii) customer product designs.\n\nNo license, either expressed or implied, is granted under any NVIDIA patent right, copyright, or other NVIDIA intellectual property right under this document. Information published by NVIDIA regarding third-party products or services does not constitute a license from NVIDIA to use such products or services or a warranty or endorsement thereof. Use of such information may require a license from a third party under the patents or other intellectual property rights of the third party, or a license from NVIDIA under the patents or other intellectual property rights of NVIDIA.\n\nReproduction of information in this document is permissible only if approved in advance by NVIDIA in writing, reproduced without alteration and in full compliance with all applicable export laws and regulations, and accompanied by all associated conditions, limitations, and notices.\n\nTHIS DOCUMENT AND ALL NVIDIA DESIGN SPECIFICATIONS, REFERENCE BOARDS, FILES, DRAWINGS, DIAGNOSTICS, LISTS, AND OTHER DOCUMENTS (TOGETHER AND SEPARATELY, âMATERIALSâ) ARE BEING PROVIDED âAS IS.â NVIDIA MAKES NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE. TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL NVIDIA BE LIABLE FOR ANY DAMAGES, INCLUDING WITHOUT LIMITATION ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE, OR CONSEQUENTIAL DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF ANY USE OF THIS DOCUMENT, EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Notwithstanding any damages that customer might incur for any reason whatsoever, NVIDIAâs aggregate and cumulative liability towards customer for the products described herein shall be limited in accordance with the Terms of Sale for the product."
    }
}