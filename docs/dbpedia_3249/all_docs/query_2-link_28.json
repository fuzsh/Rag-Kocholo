{
    "id": "dbpedia_3249_2",
    "rank": 28,
    "data": {
        "url": "https://sourceforge.net/p/sagetv-addons/wiki-sdepg/UsersGuide/",
        "read_more_link": "",
        "language": "en",
        "title": "sdepg / UsersGuide",
        "top_image": "https://a.fsdn.com/con/img/sandiego/logo-180x180.png",
        "meta_img": "https://a.fsdn.com/con/img/sandiego/logo-180x180.png",
        "images": [
            "https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg",
            "https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg",
            "https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg",
            "https://a.fsdn.com/con/images/sandiego/github-sync.png",
            "https://a.fsdn.com/con/images/sandiego/icons/default-avatar.png",
            "http://sagetv-addons.sourceforge.net/docs/imgs/install.jpg",
            "http://sagetv-addons.sourceforge.net/docs/imgs/video_srcs.jpg",
            "http://sagetv-addons.sourceforge.net/docs/imgs/opts.jpg",
            "http://sagetv-addons.sourceforge.net/docs/imgs/reconfig_video.jpg",
            "http://sagetv-addons.sourceforge.net/docs/imgs/video_srcs.jpg",
            "http://sagetv-addons.sourceforge.net/docs/imgs/installed_plugins.jpg",
            "https://a.fsdn.com/con/images/sandiego/sf-logo-full.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://a.fsdn.com/con/img/sandiego/logo-180x180.png",
        "meta_site_name": "",
        "canonical_link": "https://sourceforge.net/p/sagetv-addons/wiki-sdepg/UsersGuide/",
        "text": "Introduction\n\nThe Schedules Direct EPG (sdepg) plugin for SageTV 7 provides an alternative to the Sage EPG data service. There are some advantages and disadvantages to this plugin, all of which will be discussed throughout this user guide.\n\nEventually, the Sage EPG data service will no longer be available and when that happens this is one of your alternatives for getting listings data into your SageTV EPG.\n\nThough this is a native SageTV plugin, there are some special installation and uninstallation instructions that must be followed so please read those sections carefully.\n\nFeatures\n\nNew features and enhancements vs. the Sage EPG service\n\nContinued access to EPG data after SageTV discontinues its EPG data service\n\nSupport for multiple lineups\n\nAdvanced filtering and preprocessing of EPG data prior to it being added to the EPG through the use of Groovy scripting\n\nAbility to pull in additional EPG data from other sources to supplement or correct/update the available EPG data through the use of Groovy scripting\n\nAbility to trigger on demand updates of the EPG data through the SageTV STV\n\nIncomplete or unstable Sage EPG features\n\nTeam roles are applied to shows in some instances where it may not necessarily make sense Fixed as of v0.0.6.0\n\nMissing Sage EPG features: Not available\n\nAn actor's character details are not available (i.e. Michael C. Hall as Dexter Morgan is not available, but, of course, Michael C. Hall is listed as an actor in the show). These details will remain available for those series that are already in your wiz.bin prior to switching EPG sources; new shows starting after you switch data sources will not have this data available.\n\nChannel logos not available. (Note: There are other plugins available that provide channel logos) Channel logos available for import as of v0.0.5.2\n\nKnown Issues\n\nThe Schedules Direct show ID received may have zeros prefixed to the ID number, which will confuse Sage into thinking it hasn't recorded some episodes even though it has. For example, using the Sage EPG service, the show ID for \"Family Guy\" is EP296001nnnn, but using Schedules Direct, the show ID is EP00296001nnnn. Notice that Schedules Direct is prefixing the leading zeros after the EP? I have to investigate if it's safe to simply remove the prefixed zeros always or if I should just leave it. For now, I'm just leaving it. This will require users to manually remark airings as watched to prevent duplicate recordings of such episodes. Update (26 Apr 2014): It has been determined that SageTV incorrectly modifies the unique show ids it receives from Tribune. Therefore, it is the policy of this plugin to not munge the ids received from Tribune and so the issue discussed here will never be addressed.\n\nSystem Requirements\n\nTo use this plugin, you need:\n\nSageTV v7.1.9 server (nothing older nor nothing newer will work)\n\nWindows and Linux servers supported\n\nJava 7 (Java 8 untested, probably will work, but no promises)\n\nAll of these prerequisites are enforced by the SageTV plugin manager.\n\nPlugin PRE-Installation\n\nSTOP!! Before beginning installation you must check the following:\n\nIf you have the mc2xml EPG plugin installed, you MUST uninstall it NOW! That plugin cannot be installed simultaneously with this plugin.\n\nCheck your current version of HttpClient plugin. If the version installed is v4.0.x then you must manually uninstall and upgrade the HttpClient and HttpCore plugins to v4.2.1. This manual removal is required only due to a packaging error in the older versions of the plugin. I apologize in advance, but there's nothing I can do about this. This is a one time only situation; the newest version of these plugins are packaged properly and will be able to be properly upgraded in the future. Follow these directions to remove and upgrade the two plugins.\n\nPlugin Installation\n\nGo to the list of available SageTV plugins in your Sage STV and choose to install the Schedules Direct EPG plugin.\n\nIMPORTANT: If Sage says you must restart SageTV DO NOT perform the restart at this time. Click \"Restart Later\" and continue on with the steps below. Restarting now is not catastrophic, but it just means you'll have to do a second restart later on.\n\nRemove Video Sources\n\nNow it's time to cut ties with the SageTV EPG service. You must reconfigure all your video sources within SageTV, there is no choice.\n\nFrom the standard STV, go to Setup > Setup Video Sources, which will bring you to the following screen:\n\nClick on each video source you have configured and on the next screen for each, click \"Remove Source\" on the left hand side. Once you have removed all video sources then continue on to the next step.\n\nConfigure Plugin\n\nIt's now time to configure the EPG plugin. Using the standard STV, select Setup > SageTV Plugins > Installed Plugins.\n\nScroll down and click on the Schedules Direct EPG Plugin item then click on Configure Plugin. NOTE: If the Configure Plugin option is not available then you must restart SageTV at this point then come back and load the plugin configuration screen. In this case, you won't be able to avoid the multiple restarts.\n\n{TODO: Describe each config option}\n\n{TODO: Describe that SD id/pwd MUST be set at this stage, before reconfig of video sources}\n\nConfigure Your Schedules Direct JSON Service Settings\n\nBefore you restart SageTV, you need to register all the lineups you wish to access within Sage. The lineups you have configured at the Schedules Direct web site are NOT used by the JSON service. You must register lineups separately for the JSON service.\n\nThis must be done using the JSON service API. If you have the web UI plugin installed then the sdepg plugin includes modules that add web based configuration tools to the web ui. Simply visit the home page (or any page) in your web ui after installing the sdepg plugin. You will see a new menu item called Schedules Direct. Be sure that you've already configured the plugin with your Schedules Direct credentials before loading any of these web pages. Click on Configure Lineups. Use the search box to locate your lineups and add them to your account. Be sure the lineups you've added show up at the top of the page under Configured Headends. Once you see them there then they are registered and you may continue. Use the Status web page to view the current status of your account and the Schedules Direct service.\n\nNOTE: If you do not use the web ui plugin then you must configure your Schedules Direct account using the bundled command line tool. See this page for those details.\n\nRestart SageTV\n\nYou must now restart SageTV, even if you haven't been told it's necessary. It is necessary to restart SageTV at this time in order for the EPG plugin hook to be properly configured.\n\nReconfigure Video Sources\n\nReconfigure each of your video sources. Now when you select your EPG lineups, you should be presented with the lineups configured in your Schedules Direct account.\n\nNOTE: Be patient when configuring lineups as a complete EPG download and update must be performed on each configured lineup before your channels are presented. Depending on the number of channels, your internet speed, and your hardware, this can be very slow - up to 20 minutes. Be patient and if after 20 minutes the screen is stuck here:\n\nThen check the sagetv_0.txt log file for errors or the \\SageTV\\plugins\\sdepg\\logs\\*.log files for errors.\n\nOnce the EPG update is complete, you can select your channels, etc. From this point forward, you complete your lineup configurations just like using the SageTV EPG service.\n\nAfter an initial setup of this plugin, you may notice that your EPG is empty. Do the following after you've configured all the channels on all your lineups:\n\n+ Go to the plugin settings screen\n\n+ Click on Force Refresh\n\nYou will need to do these same steps anytime you add new channels to a lineup. If you don't, then those new channels will have no data until the next pull of new data from the Schedules Direct server.\n\nUpgrading the Plugin\n\nUpgrading the plugin is rather straightforward, simply apply the plugin updates when you're alerted about them.\n\nPlease apply updates when they're made available, especially during the v0.x betas. Unlike most plugins, if you're using this one then it's providing a rather critical service to your SageTV system and running the latest version available will be critical to proper EPG data being inserted into your wiz.bin.\n\nUninstalling Plugin\n\nBefore uninstalling\n\nIf you decide to stop using the sdepg plugin please be aware that when you switch back to the Sage EPG service that you might end up recording shows that you've already recorded. This is because some shows use a zero padded show ID with sdepg and those leading zeros are stripped by the Sage EPG service. Since the show IDs aren't identical, Sage will not consider those airings recorded when you switch EPG services. This is more inconvenient than anything, but it is something to be aware of.\n\nFollow the steps below to uninstall this plugin.\n\nRemove video sources\n\nFirst you must remove all your video sources and reconfigure them after completely removing the EPG plugin.\n\nGo to Setup > Video Sources\n\nRemove each video source.\n\nGo to Setup > SageTV Plugins > Installed Plugins\n\nSelect and uninstall the Schedules Direct EPG plugin.\n\nNOTE: If Sage asks you to restart SageTV then say NO and do it later. You need to modify the Sage.properties file before restarting so don't bother doing a restart right now.\n\nStop SageTV\n\nAt this point, stop the SageTV server. Do NOT restart it at this time.\n\nRemove EPG plugin property\n\nEdit your Sage.properties file and look for a line that starts with epg/epg_import_plugin\n\nThe line should actually read:\n\nepg/epg_import_plugin=sagex.epg.schedulesdirect.EPGImportPluginSchedulesDirect\n\nChange it so it reads:\n\nepg/epg_import_plugin=\n\nMaking this edit is what actually removes the EPG plugin from your system.\n\nRestart SageTV\n\nNow you can restart your SageTV server.\n\nReconfigure video sources with Sage/alternate EPG service\n\nWhen you connect to the server for the first time you should be taken back to the video source configuration wizard, which will allow you to reconfigure your video sources. At this stage, you just reconfigure your video sources as normal.\n\nAdvanced Features\n\nProgram & Airing Filters\n\nBy using filters, you can massage the details of programs and airings before they're inserted into the Sage wiz.bin database. This provides some very interesting use cases and can help correct EPG errors from the source.\n\nFilter Script Locations\n\nAll filters are Groovy scripts and must be inserted into \\plugins\\sdepg\\airing_filters\\ or \\plugins\\sdepg\\program_filters\\.\n\nObject Insertion\n\nThe filters are provided two variables: _src_ and it is an sdjson Airing object if it's an airing filter or a SageProgram object if it's a program filter.\n\nThe other object is called _log_ and it is a preconfigured instance of a log4j Logger object that allows you to log output from your script to a private file. The file sits along side the location of the script. So if your script is called program_filters\\filter1.groovy then anything you log via this object will be written to program_filters\\filter1.log. NOTE: All log files are cleared at the start of each EPG update. This means the log files created always represent the output of the latest run only. If you want to log differently then you can create and configure your own Logger instance as log4j is on the classpath of all Groovy scripts executed.\n\nObject Modification\n\nYour filter script is free to modify the _src_ object's properties, but you cannot reassign the object itself. If you do reassign the object then your changes to the object will not be processed. In other words, think of the _src_ variable as a final variable, even though that can't be enforced.\n\nSo just remember not to modify the _src_ reference itself, just modify the object's properties as desired.\n\nExecution Order\n\nEvery program in the json input is passed to every filter in the program_filters directory before it is inserted into the wiz.bin. Note, however, that in the case of programs, a program is only processed once per EPG update even though a Program appears multiple times in the json input. Filters are executed in alphabetical order and the _src_ object received in a filter contains the modifications of the filters executed before it. In other words, the filters are chained together to produce the final filtered result of an object.\n\nThe airing filters work exactly the same way except that since every airing in the json input is unique, the filters are run on every single airing in the json input.\n\nScript Classpath\n\nThe filter scripts use the same classpath as SageTV so anything in the Sage classpath is in your script's classpath. In addition, the directory that the script is running from is also in the classpath. If you needed to add jars or .class files for a filter script, you can use the filter directory as a classpath root.\n\nExecution Time Considerations\n\nRemember that these filter scripts are all executed during an EPG update. Filters should be relatively fast and well tested. A filter that throws an exception will not halt your EPG update, but will usually slow down the EPG update significantly.\n\nYou can do complicated/relatively slow things in your filters, but just be aware that doing so means your EPG updates will take that much longer.\n\nExample: Fix for Fox HD Flag\n\nSo for me, the HD flag of some Fox shows is not properly set. When it's not set then Sage considers the airing to be SD and in this case Sage tends to choose other SD channels to record the shows from instead of preferring to record the HD airing. Before this, I would simply restrict the favourite to the Fox HD channels, which is fine, but can produce conflicts unnecessarily. In other words, I want to record the HD airing, but if I can't because of conflicts then I want it to be able to consider the SD airings of the show as well.\n\nThe fix is simple: Filter the Fox HD airings and ensure the HD flag is set to true for all airings on the channels. With an airing filter, this is real easy:\n\nThis filter ensures that every airing on my Fox channels between 6pm and 3am daily has the HD flag set to true. I do this because one HD channel (287) is from the east and the other is from the west (291) and the prime time schedule on 291 is 11pm-2am for me.\n\nSo the filter simply examines the start time of the received Airing object. If it falls in the given time frame then I inspect the channel of the airing and if it's a Fox channel then I set the hdtv property to true. That's it. Just like that, I've corrected the EPG errors I've been receiving for years. Now the Sage scheduler can properly consider HD vs. SD airings of Fox shows. Just drop the above script into the airing_filers directory and the filter will be applied on each and every EPG update. Now the HD flag is properly set for my Fox HD channels.\n\nChannel Generators\n\nIf your lineup(s) are missing channels, you can use a channel generator to add additional channels to your lineup. Be aware that channels you add will not have any EPG data unless you create the EPG data with program and airing generators.\n\nScript Location\n\nAll channel generator scripts must be placed in the SageTV\\plugins\\sdepg\\channel_generators\\ directory.\n\nRuntime Environment\n\nAll scripts must be Groovy scripts and must return a value of type Collection<Channel>.\n\nAll channel generators receive a log4j Logger object named _log_ and another variable named _chans_. The _chans_ variable is a List<Channel> that contains all of the channels created for the lineup currently being processed.\n\nWhen a script returns a collection, all of those Channel objects will be added to the wiz.bin as valid channels.\n\nStation ID for Generated Channels\n\nWhen generating new channels, you must ensure that the station id you generate for each channel does not conflict with any id that may be included with the channels from your downloaded lineups. All ids must be positive integers. I suggest starting at a number close to 232 since these numbers are less likely to be used by Schedules Direct channels.\n\nExample: Add Missing NFL Sunday Ticket HD Channels\n\nSo for my lineup, sometimes my provider adds additional HD channels for NFL on Sundays and these channels don't get added to my linup upstream in time. Not a problem now, since I can just ensure they're always in my lineup.\n\nSo this generator only generates the channel if it doesn't already exist. Also notice that my channel IDs start at 2,000,000,000.\n\nLineup Editors\n\nLineup editors allow you to add additional channels to a Schedules Direct lineup. Usually you'd do this when you created new channels with a channel generator and want to add those channels to one or more of your lineups.\n\nScript Location\n\nAll lineup editor scripts must be placed in the plugins\\sdepg\\lineup_editors\\<lineup_id>\\ directory of the lineup you wish to add it to and it must be named channels.groovy. Each lineup can have only one lineup editor script. The lineup_id value is the Schedules Direct unique lineup id for the lineup. You can find this id via your online Schedules Direct account.\n\nRuntime Envrionment\n\nThe lineup editor is injected with a variable _lineup_, which is a Map<Integer, String[]> and is the mapping of channels to channel numbers of the lineup currently being processed. You may or may not want to use this information in your editor script.\n\nRequired Return Value\n\nThe channels.groovy script must return a value of type Map<Integer, String[]>. The key is the station id of the channel to be added to the lineup and the value is a string array of channel numbers that channel is located at on this lineup.\n\nExample: Add Missing NFL Sunday Ticket HD Channels\n\nSo this example completes the channel generator example above. In that example, I added missing Sunday Ticket HD channels. Now I'm going to map those channels to my lineup.\n\nSo in this example, I'm mapping station id 2000000000 to channel 436, id 2,000,000,001 to channel 437, etc.\n\nThen I remove channels from the map that don't exist. This would happen in the case where the NFLHDx channel was already in my providers lineup. In this case, I don't want to use a self generated channel, so I wouldn't and need to remove the mapping here.\n\nProgram Generators\n\nYou can use show generators to modify or add shows to your EPG. All program generators are Groovy scripts.\n\nTo be inserted into the EPG, a script must return an object of type Collection<GeneratedProgram>. When a script returns a collection, each entry of that collection is added to the EPG database. Once programs are added, you must use airing generators to create airings of the shows in the EPG. Without airings, the shows you create with these generators will never show up in your EPG listings.\n\nGenerators are independent of each other and their execution order is not guaranteed. Last one to insert wins, the others are lost and since the order of generator execution is unknown, you need to make sure that your generators aren't overwriting each other unexpectedly.\n\nScript Location\n\nAll show generators must be located in SageTV\\plugins\\sdepg\\program_generators\\. Every .groovy file found in this directory will be executed.\n\nRuntime Environment\n\nGenerators use the same runtime environment as filters, so read up on that section for more details. There is one difference: Generators do not have any variables injected into the script (except for the logger: _log_. Remember, generators are to generate programs so you need to build the collection so there's no need to pass any variables to generator scripts.\n\nWarning: External IDs for Generated Shows\n\nBe careful when generating your own program objects. If you generate a program with an external ID that is the same as one received from Schedules Direct then you will overwrite that program object in the wiz.bin. It is assumed that users who execute program generators know what they're doing and so no sanity checks, etc. are performed prior to inserting the results of the generators into wiz.bin. If you start to see weird results in your EPG then you may want to disable your program generators.\n\nExample: Basic Show Collection Generator\n\nI'm personally not using program generators in my environment yet, so I'll just provide a simple Groovy script that generates a new program object. If you added this generator to your installation then this show object would be added into your wiz.bin on every EPG update.\n\nBasic generator script... of note, again, be aware that the external id you generate should be unique from anything received from Schedules Direct. If not, then you're going to end up overwriting the show objects received from Schedules Direct.\n\nAiring Generators\n\nYou can use airing generators to modify or add airings to your EPG. All airing generators are Groovy scripts.\n\nTo be inserted into the EPG, a script must return an object of type Collection<SageAiring>. When a script does, the airings are then inserted into the Sage EPG. Generator scripts are independent of each other and the order in which they are run is not guaranteed. Furthermore, if two or more generators create an airing for the same channel at the same or overlapping times then the results are undefined. In other words, the Sage EPG does not allow more than one airing on a channel at the same time and enforces this by removing older airings. Last one to insert wins, the others are lost and since the order of generator execution is unknown, you need to make sure that your generators aren't overwriting each other.\n\nScript Location\n\nAll airing generator scripts must be located in SageTV\\plugins\\sdepg\\airing_generators\\. Every .groovy file found in this directory will be executed.\n\nRuntime Environment\n\nGenerators use the same runtime environment as filters, so read up on that section for more details. There is one difference: Generators do not have any variables injected into the script, except for the logger, _log_. Remember, generators are to generate airings so you need to build the collection so there's no need to pass any variables to generator scripts.\n\nExample: Fix NFL Sunday Ticket Listings\n\nFor my lineup, the NFL Sunday Ticket SD channels are properly filled in with game data, but the HD channels aren't - they all say \"No Data\". Because of this, if my Dolphins game is only available on NFLST on a given week then Sage will only find it in SD. Until now, I've simply created manual recordings to grab the games off of the HD channels. This is ok, but it requires I remember to set the manual recording then I also have to go and remember to create an override for SRE to monitor the game as well. Instead, I simply modify the EPG to fill in the game data for the HD channels. A slightly modified version of the script I'm using is provided below. It's modified to aid in explaining a few things.\n\nSo this generator script parses the XML at the top of the file and for each record in the XML, it creates an airing on the given channel. This particular script will only create the airing if it finds the SD airing of the game. This ensures that Sage doesn't try to record the game more than once. So in this case, the script is adding the HD airing of the Panthers/Falcons game to channel \"NFLHD1\" on Oct 16 at 13:00. I'd obviously have a lot of additional records in the XML for all the HD channels, but I stripped it down to one to make the example as small as possible. So for this particular generator, I have to modify the XML each week to update the HD channel listings for football. Not perfect, but not bad either. A better version of this script might download the HD listings data from their provider's web site, parse it out, and then fill in the HD channel listings. That would be much more automated an approach, but also makes the script much more complicated for a generator example for this user guide. :)\n\nYou can force an EPG update at any time from the SageTV STV by simply loading the plugin configuration screen for this plugin and selecting the Force EPG button on that screen. This button will delete all locally cached EPG data and force a complete download of all data from the Schedules Direct servers. The force EPG link on the web UI will not do this. That link will only force a reload of the cached data, unless the cache is stale then, and only then, would a download from Schedules Direct be forced."
    }
}