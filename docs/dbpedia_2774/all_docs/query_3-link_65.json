{
    "id": "dbpedia_2774_3",
    "rank": 65,
    "data": {
        "url": "https://jsonlint.com/",
        "read_more_link": "",
        "language": "en",
        "title": "JSON Online Validator and Formatter",
        "top_image": "https://jsonlint.com/images/favicon-32x32.png",
        "meta_img": "https://jsonlint.com/images/favicon-32x32.png",
        "images": [
            "https://jsonlint.com/images/chrome.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "JSONLint is the free online validator, json formatter, and json beautifier tool for JSON, a lightweight data-interchange format. You can format json, validate json, with a quick and easy copy+paste.",
        "meta_lang": "",
        "meta_favicon": "/images/apple-touch-icon.png",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "About the JSONLint Editor\n\nJSONLint is a validator and reformatter for JSON, a lightweight data-interchange format. Copy and paste, directly type, or input a URL in the editor above and let JSONLint tidy and validate your messy JSON code.\n\nWhat Is JSON?\n\nJSON (pronounced as Jason), stands for \"JavaScript Object Notation,\" is a human-readable and compact solution to represent a complex data structure and facilitate data interchange between systems. It's a widespread data format with a diverse range of applications enabled by its simplicity and semblance to readable text. As such, it's used by most but not all systems for communicating data.\n\nWhy Use JSON?\n\nThere are several reasons why you should consider using JSON, the key reason being that JSON is independent of your system's programming language, despite being derived from JavaScript. Not only is JSON language-independent, but it also represents data that speaks common elements of many programming languages, effectively making it into a universal data representation understood by all systems.\n\nOther reasons include:\n\nReadability – JSON is human-readable, given proper formatting.\n\nCompactness – JSON data format doesn't use a complete markup structure, unlike XML.\n\nIt's easy to analyze into logical syntactic components, especially in JavaScript.\n\nCountless JSON libraries are available for most programming languages.\n\nProper JSON Format\n\nUsing JSON doesn't require any JavaScript knowledge, though having such would only improve your understanding of JSON. And though the knowledge of JavaScript isn't necessary, following specific rules is:\n\nData is in name/value pairs\n\nData is separated by commas\n\nObjects are encapsulated within the opening and closing curly brackets\n\nAn empty object can be represented by {}\n\nArrays are encapsulated within opening and closing square brackets\n\nAn empty array can be represented by []\n\nA member is represented by a key-value pair, contained in double quotes\n\nEach member should have a unique key within an object structure\n\nThe value of a member must be contained in double quotes, if it's a string\n\nBoolean values are represented using the true or false literals in lower case\n\nNumber values are represented using double-precision floating-point format and shouldn't have leading zeroes\n\n\"Offensive\" characters in a string need to be escaped using the backslash character \\\n\nNull values are represented by the null literal in lower case\n\nDates, and similar object types, aren't adequately supported and should be converted to strings\n\nEach member of an object or array value must be followed by a comma, except for the last one\n\nThe standard extension for the JSON file is '.json'\n\nThe mime type for JSON files is 'application/json'\n\nYou can achieve proper JSON formatting by following these simple rules. However, if you're unsure about your code, we suggest using this JSONLint Validator and formatter.\n\nWhy Use JSONLint Validator and Formatter?\n\nProgramming can be challenging, as it requires enormous attention and excellent knowledge of the programming language, even as simple as JSON. Still, writing codeis tricky, and finding an error in JSON code can be a challenging and time-consuming task.\n\nThe best way to find and correct errors while simultaneously saving time is to use an online tool such as JSONLint. JSONLint will check the validity of your JSON code, detect and point out line numbers of the code containing errors. It's an excellent way to correct errors without wasting hours finding a missing coma somewhere inside your code.\n\nHow Does A JSONLint Validator Work?\n\nJSONLint is an online editor, validator, and formatting tool for JSON, which allows you to directly type your code, copy and paste it, or input a URL containing your code. It will validate your JSON content according to JS standards, informing you of every human-made error, which happens for a multitude of reasons – one of them being the lack of focus.\n\nUsing JSONLint, you can quickly find any errors that might've occurred, allowing you to focus more on the rest of your code than on a tiny error itself.\n\nTips & Tricks\n\nYou can use a URL and JSONLint will scrape it for JSON and parse it. Just structure the link like this, for example: https://jsonlint.com /?url= https://jsonlint.com /datasets/programming-languages.json\n\nYou can provide JSON to lint in the URL if you link to JSONLint with the 'json' parameter. For example: https://jsonlint.com /?json=%7B%22hello%22:%20%22world%22%7D.\n\nJSONLint can also be used as a JSON compressor/minifier. Just click on the \"Compress\" button above.\n\nCommon Errors\n\nExpecting 'STRING' - You probably have an extra comma at the end of your collection. Something like { \"a\": \"b\", }\n\nExpecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[' - You probably have an extra comma at the end of your list. Something like: [\"a\", \"b\", ]\n\nEnclosing your collection keys in quotes. Proper format for a collection is { \"key\": \"value\" }\n\nMake sure you follow JSON's syntax properly. For example, always use double quotes, always quotify your keys, and remove all callback functions.\n\nDifferent Results\n\nIf you use a Windows computer you may end up with different results. This is possibly due to the way Windows handles newlines. Essentially, if you have just newline characters (\\n) in your JSON and paste it into JSONLint from a Windows computer, it may validate it as valid erroneously since Windows may need a carriage return (\\r) as well to detect newlines properly. As a solution, either use direct URL input, or make sure your content's newlines match the architecture your system expects!\n\nCredits"
    }
}