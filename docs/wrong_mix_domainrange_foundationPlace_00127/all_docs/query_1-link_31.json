{
    "id": "wrong_mix_domainrange_foundationPlace_00127_1",
    "rank": 31,
    "data": {
        "url": "https://www.redhat.com/en/blog/red-hat-contributes-cri-o-cloud-native-computing-foundation",
        "read_more_link": "",
        "language": "en",
        "title": "Red Hat contributes CRI-O to the Cloud Native Computing Foundation",
        "top_image": "https://www.redhat.com/themes/custom/rhdc/img/red-hat-social-share.jpg",
        "meta_img": "https://www.redhat.com/themes/custom/rhdc/img/red-hat-social-share.jpg",
        "images": [
            "https://www.redhat.com/rhdc/managed-files/cloud-providers-2x.png",
            "https://static.redhat.com/libs/redhat/rh-iconfont/latest/svg/web-icon-close.svg",
            "https://www.redhat.com/themes/custom/rh_base_ui/dist/img/talk-bubble.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-globe.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-user.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-search.svg",
            "https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_full_width/private/crio-logo.png?itok=BCdhBPDU",
            "https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_full_width/private/CRI-O%20architecture.png?itok=UItCm_Zf",
            "https://www.redhat.com/themes/custom/rhdc/img/author-default-img.svg",
            "https://www.redhat.com/cms/managed-files/automation.svg",
            "https://www.redhat.com/cms/managed-files/AI.svg",
            "https://www.redhat.com/cms/managed-files/open-hybrid-cloud.svg",
            "https://www.redhat.com/cms/managed-files/security.svg",
            "https://www.redhat.com/cms/managed-files/edge_2.svg",
            "https://www.redhat.com/cms/managed-files/infrastructure.svg",
            "https://www.redhat.com/cms/managed-files/application-development.svg",
            "https://www.redhat.com/cms/managed-files/original-series.svg",
            "https://static.redhat.com/libs/redhat/brand-assets/2/corp/logo--on-dark.svg",
            "https://static.redhat.com/libs/redhat/rh-iconfont/4/svg/web-icon-globe.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Vincent Batts"
        ],
        "publish_date": "2019-04-05T00:21:39+00:00",
        "summary": "",
        "meta_description": "CRI-O, a project started at Red Hat in 2016 to be an Open Container Initiative-based implementation of the Kubernetes Container Runtime Interface, is being contributed to the Cloud Native Computing Foundation (CNCF).",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.redhat.com/en/blog/red-hat-contributes-cri-o-cloud-native-computing-foundation",
        "text": "The kubelet talks to CRI-O using the CRI gRPC API. The CRI has an image service and a runtime service. The image service is responsible for pulling down images on the node as needed to run containers in a pod. CRI-O uses the containers/image library to pull images to the node. The runtime service is responsible for running the containers. The runtime service uses the containers/storage library to create Copy-On-Write based root filesystems for the containers.\n\nIn our development of the coming OpenShift 4, it configures CRI-O with overlayfs as the Copy-On-Write storage driver. CRI-O uses the runtime-tools OCI-generated library to create an OCI configuration that runc can understand. Finally, it launches the containers using runc or any OCI-compatible runtime like kata containers along with a monitoring process called conmon. conmon is a small monitoring process for containers. It is responsible for monitoring a container to record its exit code, writing logs, handling tty for the containers, service attach clients, reaping processes as well as reporting Out of Memory (OOM) conditions. CRI-O utilizes the container networking interface (CNI) for setting up networking for the containers so CNI plugins such as flannel, Cilium, weave or OpenShift-SDN are supported.\n\nCRI-O for Kubernetes users\n\nCRI-O provides a lightweight runtime for Kubernetes. It is focused on managing and running containers in Kubernetes. This supports the security principle of separation of concerns.\n\nCRI-O aims to be Kubernetes first and CRI-O releases follow Kubernetes in lock-step. Each Pull Request to CRI-O has to pass the Kubernetes e2e test before it is merged. CRI-O releases packages for various Linux distributions, supported by tools such as minikube and kubeadm to setup Kubernetes clusters using CRI-O as the runtime. CRI-O releases support all the Kubernetes supported versions, matching their most recent three minor releases.\n\nThe same unmodified CRI-O is supported in Red Hat OpenShift as well. It has been offered as an option to customers since OpenShift 3.9 and is planned as an option in the upcoming OpenShift 4 releases.\n\nDifferences between CRI-O and other runtimes\n\nCRI-O limits its scope to that of Kubernetes and focuses on only adding features that are needed by Kubernetes and nothing more. This narrow focus drives stability, performance and security features down the stack, allowing the cloud native ecosystem to reliably focus at the Kubernetes layer and above.\n\nThere are other projects such as containerd, Docker daemon, Pouch Container, or Singularity that can provide a CRI socket, but they also accommodate additional use-cases. For example, the docker daemon differs from CRI-O in that it is one large tool that is used for many purposes and by many roles. The docker daemon is used to build containers, manage containers, run containers, and inspect containers. While a developer needs to do all these tasks while developing a containerized application on their laptop, security principles of least privilege are better achieved in production environments by using different tools for different purposes.\n\nCRI-O does include some trouble shooting capabilities, but intentionally does not include container build APIs, instead relying on the Kubernetes CRI-API. For interacting with CRI-O (and similar runtimes) there are tools like the Kubernetes-SIGs `crictl`.\n\nGet involved\n\n. The maintainers are active on #crio on kubernetes.slack.com as well as #cri-o on IRC. All users and contributors are welcome to get involved in CRI-O development. Maintainers are happy to debug issues as well as guide new contributors to CRI-O or with integration CRI-O in other projects."
    }
}