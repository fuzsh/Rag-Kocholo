{
    "id": "dbpedia_7738_3",
    "rank": 95,
    "data": {
        "url": "https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp/php-useful-functions-disable_functions-open_basedir-bypass",
        "read_more_link": "",
        "language": "en",
        "title": "PHP - Useful Functions & disable_functions/open_basedir bypass",
        "top_image": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmuMguNrsRx2mNyNqEox4%2Fsocialpreview%2FNtYxX5Um1Ml0KhPq6gZR%2Ffondo.png?alt=media&token=257c330a-9e87-4c69-bb95-c0b54588ea79",
        "meta_img": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmuMguNrsRx2mNyNqEox4%2Fsocialpreview%2FNtYxX5Um1Ml0KhPq6gZR%2Ffondo.png?alt=media&token=257c330a-9e87-4c69-bb95-c0b54588ea79",
        "images": [
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F2783428383-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252FmuMguNrsRx2mNyNqEox4%252Ficon%252F1qCJ0VIDlWcvGSecYCDq%252Ffondo.png%3Falt%3Dmedia%26token%3D1e721267-450f-43f3-861b-6c4f93278e93&width=32&dpr=4&quality=100&sign=61472716&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F2783428383-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252FmuMguNrsRx2mNyNqEox4%252Ficon%252F1qCJ0VIDlWcvGSecYCDq%252Ffondo.png%3Falt%3Dmedia%26token%3D1e721267-450f-43f3-861b-6c4f93278e93&width=32&dpr=4&quality=100&sign=61472716&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F0xrick.github.io%2Fimages%2Fhackthebox%2Fkryptos%2F17.png&width=768&dpr=4&quality=100&sign=aa689cb6&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-legacy-files%2Fo%2Fassets%252F-L_2uGJGU7AVNRcqRvEi%252F-MM32bWolnpofBeB-oND%252F-MM6LMFn0MR0O-18VP6m%252Fimage.png%3Falt%3Dmedia%26token%3D20623c66-5f52-493f-92df-24ca89ee68dd&width=768&dpr=4&quality=100&sign=debe88f7&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-legacy-files%2Fo%2Fassets%252F-L_2uGJGU7AVNRcqRvEi%252F-MM32bWolnpofBeB-oND%252F-MM6KiFxpNRJWeO1Jkt_%252Fimage.png%3Falt%3Dmedia%26token%3D6fca4faf-a907-4555-abd5-5589dc190d72&width=768&dpr=4&quality=100&sign=30534247&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-legacy-files%2Fo%2Fassets%252F-L_2uGJGU7AVNRcqRvEi%252F-MLx_YFauWZ8aBDKePYm%252F-MM2vdMtnCKnjWp_w-cc%252Fimage.png%3Falt%3Dmedia%26token%3Dacbf8cce-3fce-48f6-9c80-8d4610cb1cf0&width=768&dpr=4&quality=100&sign=101f20a6&sv=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-19T09:08:21.575000+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/collections%2FmuMguNrsRx2mNyNqEox4%2Ficon%2F1qCJ0VIDlWcvGSecYCDq%2Ffondo.png?alt=media&token=1e721267-450f-43f3-861b-6c4f93278e93",
        "meta_site_name": "",
        "canonical_link": "https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp/php-useful-functions-disable_functions-open_basedir-bypass",
        "text": "PHP Command & Code Execution\n\nPHP Command Execution\n\nNote: A p0wny-shell php webshell can automatically check and bypass the following function if some of them be disabled.\n\nexec - Returns last line of commands output\n\npassthru - Passes commands output directly to the browser\n\nsystem - Passes commands output directly to the browser and returns last line\n\nshell_exec - Returns commands output\n\n`` (backticks) - Same as shell_exec()\n\npopen - Opens read or write pipe to process of a command\n\nproc_open - Similar to popen() but greater degree of control\n\npreg_replace\n\npcntl_exec - Executes a program (by default in modern and not so modern PHP you need to load the pcntl.so module to use this function)\n\nmail / mb_send_mail - This function is used to send mails, but it can also be abused to inject arbitrary commands inside the $options parameter. This is because php mail function usually call sendmail binary inside the system and it allows you to put extra options. However, you won't be able to see the output of the executed command, so it's recommended to create shell script that writes the output to a file, execute it using mail, and print the output:\n\ndl - This function can be used to dynamically load a PHP extension. This function won't be present always, so you should check if it's available before trying to exploit it. Read this page to learn how to exploit this function.\n\nPHP Code Execution\n\nApart from eval there are other ways to execute PHP code: include/require can be used for remote code execution in the form of Local File Include and Remote File Include vulnerabilities.\n\ndisable_functions & open_basedir\n\nDisabled functions is the setting that can be configured in .ini files in PHP that will forbid the use of the indicated functions. Open basedir is the setting that indicates to PHP the folder that it can access. The PHP setting sue to be configured in the path /etc/php7/conf.d or similar.\n\nBoth configuration can be seen in the output of phpinfo():\n\nopen_basedir Bypass\n\nopen_basedir will configure the folders that PHP can access, you won't be able to to write/read/execute any file outside those folders, but also you won't even be able to list other directories. However, if somehow you are able to execute arbitrary PHP code you can try the following chunk of codes to try to bypass the restriction.\n\nListing dirs with glob:// bypass\n\nIn this first example the glob:// protocol with some path bypass is used:\n\nNote1: In the path you can also use /e??/* to list /etc/* and any other folder. Note2: It looks like part of the code is duplicated, but that's actually necessary! Note3: This example is only useful to list folders not to read files\n\nFull open_basedir bypass abusing FastCGI\n\nIf you want to learn more about PHP-FPM and FastCGI you can read the first section of this page. If php-fpm is configured you can abuse it to completely bypass open_basedir:\n\nNote that the first thing you need to do is find where is the unix socket of php-fpm. It use to be under /var/run so you can use the previous code to list the directory and find it. Code from here.\n\nThis scripts will communicate with unix socket of php-fpm (usually located in /var/run if fpm is used) to execute arbitrary code. The open_basedir settings will be overwritten by the PHP_VALUE attribute that is sent. Note how eval is used to execute the PHP code you send inside the cmd parameter. Also note the commented line 324, you can uncomment it and the payload will automatically connect to the given URL and execute the PHP code contained there. Just access http://vulnerable.com:1337/l.php?cmd=echo file_get_contents('/etc/passwd'); to get the content of the /etc/passwd file.\n\ndisable_functions Bypass\n\nIf you manage have PHP code executing inside a machine you probably want to go to the next level and execute arbitrary system commands. In this situation is usual to discover that most or all the PHP functions that allow to execute system commands have been disabled in disable_functions. So, lets see how you can bypass this restriction (if you can)\n\nAutomatic bypass discovery\n\nYou can use the tool https://github.com/teambi0s/dfunc-bypasser and it will indicate you which function (if any) you can use to bypass disable_functions.\n\nBypassing using other system functions\n\nJust return to the beginning of this page and check if any of the command executing functions isn't disabled and available in the environment. If you find just 1 of them, you will be able to use it to execute arbitrary system commands.\n\nLD_PRELOAD bypass\n\nIt's well known that some functions in PHP like mail()are going to execute binaries inside the system. Therefore, you can abuse them using the environment variable LD_PRELOAD to make them load an arbitrary library that can execute anything.\n\nFunctions that can be used to bypass disable_functions with LD_PRELOAD\n\nmail\n\nmb_send_mail: Effective when the php-mbstring module is installed.\n\nimap_mail: Works if php-imap module is present.\n\nlibvirt_connect: Requires the php-libvirt-php module.\n\ngnupg_init: Utilizable with the php-gnupg module installed.\n\nnew imagick(): This class can be abused to bypass restrictions. Detailed exploitation techniques can be found in a comprehensive writeup here.\n\nYou can find here the fuzzing script that was used to find those functions.\n\nHere is a library you can compile to abuse the LD_PRELOAD env variable:\n\nBypass using Chankro\n\nIn order to abuse this misconfiguration you can Chankro. This is a tool that will generate a PHP exploit that you need to upload to the vulnerable server and execute it (access it via web). Chankro will write inside the victims disc the library and the reverse shell you want to execute and will use the**LD_PRELOAD trick + PHP mail()** function to execute the reverse shell.\n\nNote that in order to use Chankro, mail and putenv cannot appear inside the disable_functions list. In the following example you can see how to create a chankro exploit for arch 64, that will execute whoami and save the out in /tmp/chankro_shell.out, chankro will write the library and the payload in /tmp and the final exploit is going to be called bicho.php (that's the file you need to upload to the victims server):\n\nIf you find that mail function is blocked by disabled functions, you may still be able to use the function mb_send_mail. More information about this technique and Chankro here: https://www.tarlogic.com/en/blog/how-to-bypass-disable_functions-and-open_basedir/\n\n\"Bypass\" using PHP capabilities\n\nNote that using PHP you can read and write files, create directories and change permissions. You can even dump databases. Maybe using PHP to enumerate the box you can find a way to escalate privileges/execute commands (for example reading some private ssh key).\n\nI have created a webshell that makes very easy to perform this actions (note that most webshells will offer you this options also): https://github.com/carlospolop/phpwebshelllimited\n\nModules/Version dependent bypasses\n\nThere are several ways to bypass disable_functions if some specific module is being used or exploit some specific PHP version:\n\nFastCGI/PHP-FPM (FastCGI Process Manager)\n\nBypass with FFI - Foreign Function Interface enabled\n\nBypass via mem\n\nmod_cgi\n\nPHP Perl Extension Safe_mode\n\ndl function\n\nThis exploit\n\n5.* - exploitable with minor changes to the PoC\n\n7.0 - all versions to date\n\n7.1 - all versions to date\n\n7.2 - all versions to date\n\n7.3 - all versions to date\n\n7.4 - all versions to date\n\n8.0 - all versions to date\n\nFrom 7.0 to 8.0 exploit (Unix only)\n\nPHP 7.0=7.4 (*nix)\n\nImagick 3.3.0 PHP >= 5.4\n\nPHP 5.x Shellsock\n\nPHP 5.2.4 ionCube\n\nPHP <= 5.2.9 Windows\n\nPHP 5.2.4/5.2.5 cURL\n\nPHP 5.2.3 -Win32std\n\nPHP 5.2 FOpen exploit\n\nPHP 4 >= 4.2.-, PHP 5 pcntl_exec\n\nAutomatic Tool\n\nThe following script tries some of the methods commented here: https://github.com/l3m0n/Bypass_Disable_functions_Shell/blob/master/shell.php\n\nOther Interesting PHP functions\n\nList of functions which accept callbacks\n\nThese functions accept a string parameter which could be used to call a function of the attacker's choice. Depending on the function the attacker may or may not have the ability to pass a parameter. In that case an Information Disclosure function like phpinfo() could be used.\n\nCallbacks / Callables\n\nFollowing lists from here\n\nInformation Disclosure\n\nMost of these function calls are not sinks. But rather it maybe a vulnerability if any of the data returned is viewable to an attacker. If an attacker can see phpinfo() it is definitely a vulnerability.\n\nOther\n\nFilesystem Functions\n\nAccording to RATS all filesystem functions in php are nasty. Some of these don't seem very useful to the attacker. Others are more useful than you might think. For instance if allow_url_fopen=On then a url can be used as a file path, so a call to copy($_GET['s'], $_GET['d']); can be used to upload a PHP script anywhere on the system. Also if a site is vulnerable to a request send via GET everyone of those file system functions can be abused to channel and attack to another host through your server.\n\nOpen filesystem handler\n\nWrite to filesystem (partially in combination with reading)"
    }
}