{
    "id": "dbpedia_7738_3",
    "rank": 73,
    "data": {
        "url": "https://www.packetfence.org/doc/PacketFence_Installation_Guide.html",
        "read_more_link": "",
        "language": "en",
        "title": "Installation Guide",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.packetfence.org/doc/images/inverse-logo.jpg",
            "https://www.packetfence.org/doc/images/getting-started.png",
            "https://www.packetfence.org/doc/images/radius-workflow.png",
            "https://www.packetfence.org/doc/images/PushACLs-role.png",
            "https://www.packetfence.org/doc/images/PushACLs-Cisco-WLC.png",
            "https://www.packetfence.org/doc/images/diagram-trap-interaction.png",
            "https://www.packetfence.org/doc/images/domain-add.png",
            "https://www.packetfence.org/doc/images/domain-default-realm.png",
            "https://www.packetfence.org/doc/images/domain-add-realm.png",
            "https://www.packetfence.org/doc/images/domain-realms-index.png",
            "https://www.packetfence.org/doc/images/internal-eduroam-authentication.png",
            "https://www.packetfence.org/doc/images/inbound-eduroam-authentication.png",
            "https://www.packetfence.org/doc/images/saml-packetfence-config.png",
            "https://www.packetfence.org/doc/images/azure_saml_ent_app.png",
            "https://www.packetfence.org/doc/images/azure_saml_custom_app.png",
            "https://www.packetfence.org/doc/images/azure_saml_app_name.png",
            "https://www.packetfence.org/doc/images/azure_saml_sso.png",
            "https://www.packetfence.org/doc/images/azure_saml_sso_method.png",
            "https://www.packetfence.org/doc/images/azure_saml_sso_details.png",
            "https://www.packetfence.org/doc/images/azure_saml_sso_users_and_groups.png",
            "https://www.packetfence.org/doc/images/azure_saml_source.png",
            "https://www.packetfence.org/doc/images/billing/paypal-access-sandbox-profile.png",
            "https://www.packetfence.org/doc/images/billing/paypal-change-password.png",
            "https://www.packetfence.org/doc/images/billing/paypal-website-payment.png",
            "https://www.packetfence.org/doc/images/billing/paypal-website-payment2.png",
            "https://www.packetfence.org/doc/images/billing/paypal-website-payment3.png",
            "https://www.packetfence.org/doc/images/billing/paypal-encrypted-payment.png",
            "https://www.packetfence.org/doc/images/billing/paypal-packetfence-configuration.png",
            "https://www.packetfence.org/doc/images/billing/stripe-api-keys.png",
            "https://www.packetfence.org/doc/images/billing/stripe-packetfence-configuration.png",
            "https://www.packetfence.org/doc/images/billing/billing-tier.png",
            "https://www.packetfence.org/doc/images/billing/stripe-plan.png",
            "https://www.packetfence.org/doc/images/billing/stripe-product-detail.png",
            "https://www.packetfence.org/doc/images/billing/stripe-add-endpoint.png",
            "https://www.packetfence.org/doc/images/billing/stripe-webhook.png",
            "https://www.packetfence.org/doc/images/Intune_SCEP_machine.png",
            "https://www.packetfence.org/doc/images/Azure_Group_membership.png",
            "https://www.packetfence.org/doc/images/portal-modules/prompt_fields.png",
            "https://www.packetfence.org/doc/images/portal-modules/sms.png",
            "https://www.packetfence.org/doc/images/portal-modules/chained_oauth_sms.png",
            "https://www.packetfence.org/doc/images/portal-modules/login_or_boarding.png",
            "https://www.packetfence.org/doc/images/portal-modules/hello_world.png",
            "https://www.packetfence.org/doc/images/portal-modules/hello_world-my_first_root_module.png",
            "https://www.packetfence.org/doc/images/portal-modules/token_system.png",
            "https://www.packetfence.org/doc/images/survey-portal-module.png",
            "https://www.packetfence.org/doc/images/survey-root-portal-module.png",
            "https://www.packetfence.org/doc/images/ACME1.png",
            "https://www.packetfence.org/doc/images/acme.com.png",
            "https://www.packetfence.org/doc/images/doc-barracuda-cfg_sso_pf.png",
            "https://www.packetfence.org/doc/images/doc-checkpoint-accounting_settings.png",
            "https://www.packetfence.org/doc/images/doc-checkpoint-ldap_groups.png",
            "https://www.packetfence.org/doc/images/doc-checkpoint-cfg_sso_pf.png",
            "https://www.packetfence.org/doc/images/doc-ise-pic-syslog-template.png",
            "https://www.packetfence.org/doc/images/doc-ise-pic-syslog-provider.png",
            "https://www.packetfence.org/doc/images/doc-ise-pic-syslog-header.png",
            "https://www.packetfence.org/doc/images/doc-ise-pic-pf-configuration.png",
            "https://www.packetfence.org/doc/images/doc-fortigate-SSO_Role.png",
            "https://www.packetfence.org/doc/images/doc-fortigate-SSO_accounting.png",
            "https://www.packetfence.org/doc/images/doc-fortigate-cfg_sso_pf.png",
            "https://www.packetfence.org/doc/images/doc-jsonrpc-cfg_sso_pf.png",
            "https://www.packetfence.org/doc/images/doc-paloalto-SSO_Role.png",
            "https://www.packetfence.org/doc/images/doc-paloalto-create_xml_user.png",
            "https://www.packetfence.org/doc/images/doc-paloalto-cfg_sso_pf.png",
            "https://www.packetfence.org/doc/images/doc-paloalto-syslog-parse.png",
            "https://www.packetfence.org/doc/images/doc-paloalto-syslog-user-identification.png",
            "https://www.packetfence.org/doc/images/openvas/alert.png",
            "https://www.packetfence.org/doc/images/openvas/alert-id.png",
            "https://www.packetfence.org/doc/images/openvas/scan-config-id.png",
            "https://www.packetfence.org/doc/images/openvas/report-format-id.png",
            "https://www.packetfence.org/doc/images/scan_type.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-user-create-1.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-user-create-2.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-user-create-3.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-user-create-4.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-pf.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-connection-profile.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-node-tab.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-syslog.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-syslog-parser.png",
            "https://www.packetfence.org/doc/images/rapid7/rapid7-violation-trigger.png",
            "https://www.packetfence.org/doc/images/scep-ms-pki-eaptls-example.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-eaptls-sign-example.png",
            "https://www.packetfence.org/doc/images/mobile-iron-mdm-profile-config.png",
            "https://www.packetfence.org/doc/images/mobile-iron-go-to-add-user.png",
            "https://www.packetfence.org/doc/images/mobile-iron-create-user.png",
            "https://www.packetfence.org/doc/images/mobile-iron-go-to-assign-space.png",
            "https://www.packetfence.org/doc/images/mobile-iron-boarding.png",
            "https://www.packetfence.org/doc/images/mobile-iron-pf-config.png",
            "https://www.packetfence.org/doc/images/mobile-iron-portal.png",
            "https://www.packetfence.org/doc/images/mobile-iron-passthroughs.png",
            "https://www.packetfence.org/doc/images/sentinelone-agent-download.png",
            "https://www.packetfence.org/doc/images/sentinelone-user.png",
            "https://www.packetfence.org/doc/images/sentinelone-packetfence.png",
            "https://www.packetfence.org/doc/images/Azure_Application_1.png",
            "https://www.packetfence.org/doc/images/Azure_Application_2.png",
            "https://www.packetfence.org/doc/images/Azure_Application_3.png",
            "https://www.packetfence.org/doc/images/Azure_Application_4.png",
            "https://www.packetfence.org/doc/images/intune-pf-config.png",
            "https://www.packetfence.org/doc/images/intune-portal.png",
            "https://www.packetfence.org/doc/images/google-workspace-chromebook-config.png",
            "https://www.packetfence.org/doc/images/scep-ms-pki-en-key-usage.png",
            "https://www.packetfence.org/doc/images/scep-ms-pki-key-usage.png",
            "https://www.packetfence.org/doc/images/scep-ms-pki-provider.png",
            "https://www.packetfence.org/doc/images/scep-ms-pki-eaptls-example.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-eaptls-sign-example.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-ca_menu.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-ca_creation.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-ca_created.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-template_menu.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-template_creation.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-template_password_email.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-scep.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-certificate_menu.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-certificate_creation.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-certificate_download.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-revoked_certificate.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-pki-provider_menu.png",
            "https://www.packetfence.org/doc/images/packetfence-pki-pki-provider_creation.png",
            "https://www.packetfence.org/doc/images/Intune-1-App-Registration.png",
            "https://www.packetfence.org/doc/images/Intune-2-Register-Application.png",
            "https://www.packetfence.org/doc/images/Intune-3-App-Detail.png",
            "https://www.packetfence.org/doc/images/Intune-4-App-Certificates-Secrets.png",
            "https://www.packetfence.org/doc/images/Intune-5-Add-Client-Secret.png",
            "https://www.packetfence.org/doc/images/Intune-6-Copy-Client-Secret.png",
            "https://www.packetfence.org/doc/images/Intune-7-API-Permissions.png",
            "https://www.packetfence.org/doc/images/Intune-8-Grant-Admin.png",
            "https://www.packetfence.org/doc/images/Intune_KSP.png",
            "https://www.packetfence.org/doc/images/Intune-9-PacketFence-Intune.png",
            "https://www.packetfence.org/doc/images/Intune-10-PacketFence-SCEP.png",
            "https://www.packetfence.org/doc/images/airwatch-certificate-auhority.png",
            "https://www.packetfence.org/doc/images/airwatch-certificate-template.png",
            "https://www.packetfence.org/doc/images/airwatch-wifi2.png",
            "https://www.packetfence.org/doc/images/airwatch-wifi3.png",
            "https://www.packetfence.org/doc/images/airwatch-credentials1.png",
            "https://www.packetfence.org/doc/images/airwatch-credentials2.png",
            "https://www.packetfence.org/doc/images/airwatch-scep.png",
            "https://www.packetfence.org/doc/images/airwatch-wifi1.png",
            "https://www.packetfence.org/doc/images/akamai_mfa_config.png",
            "https://www.packetfence.org/doc/images/TOTP_mfa_config.png",
            "https://www.packetfence.org/doc/images/mfa_rule.png",
            "https://www.packetfence.org/doc/images/domain-nt-key-cache.jpg",
            "https://www.packetfence.org/doc/images/domain-windows-account-policy.png",
            "https://www.packetfence.org/doc/images/domain-nt-key-cache-task-scheduler.jpg",
            "https://www.packetfence.org/doc/images/domain-nt-key-cache-task-scheduler-triggers.jpg",
            "https://www.packetfence.org/doc/images/domain-nt-key-cache-task-scheduler-actions.jpg",
            "https://www.packetfence.org/doc/images/domain-windows-events-viewer.png",
            "https://www.packetfence.org/doc/images/domain-event-trigger-in-task-scheduler.png",
            "https://www.packetfence.org/doc/images/domain-ntlm-cache.png",
            "https://www.packetfence.org/doc/images/diagram-routed-net.png",
            "https://www.packetfence.org/doc/images/certificate/14-HTTP-CSR.png",
            "https://www.packetfence.org/doc/images/certificate/16-CSR.png",
            "https://www.packetfence.org/doc/images/certificate/18-Choice.png",
            "https://www.packetfence.org/doc/images/certificate/1-HTTP.png",
            "https://www.packetfence.org/doc/images/certificate/2-HTTP-Certificate.png",
            "https://www.packetfence.org/doc/images/certificate/4-HTTP-intermediate-chain.png",
            "https://www.packetfence.org/doc/images/certificate/5-Services.png",
            "https://www.packetfence.org/doc/images/certificate/7-Radius-edit.png",
            "https://www.packetfence.org/doc/images/certificate/8-Radius-certificate.png",
            "https://www.packetfence.org/doc/images/certificate/13-Radius-intermediate-chain.png",
            "https://www.packetfence.org/doc/images/certificate/11-Services.png",
            "https://www.packetfence.org/doc/images/certificate/3-HTTP-Private-key.png",
            "https://www.packetfence.org/doc/images/certificate/9-Radius-key.png",
            "https://www.packetfence.org/doc/images/linode_firewall.png",
            "https://www.packetfence.org/doc/images/linode_lb.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\".\n\nPacketFence is a fully supported, trusted, Free and Open Source network access control (NAC) system. Boosting an impressive feature set including a captive portal for registration and remediation, centralized wired and wireless management, 802.1X support, layer-2 isolation of problematic devices, integration with IDS, vulnerability scanners and firewalls; PacketFence can be used to effectively secure networks - from small to very large heterogeneous networks. For a more detailed presentation on PacketFence please visit https://packetfence.org.\n\nThis section will guide you through the installation of PacketFence from the Zero Effort NAC (ZEN) appliance and from the standard repository of packages we provide - which can be used to install PacketFence on top of a vanilla GNU/Linux installation.\n\n4.3. Installing PacketFence on existing Linux\n\nPacketFence provides packages repository for RHEL 8 as well as packages repository fo Debian.\n\nThese repositories contain all required dependencies to install PacketFence. This provides numerous advantages. Among them, there are:\n\neasy installation\n\neverything is packaged as RPM and Debian packages\n\neasy upgrade\n\nFirst install your supported distribution with minimal installation and no additional packages. Then:\n\nOn Red Hat-based systems\n\nDisable firewall\n\nDisable SELinux\n\nOn Debian\n\nDisable AppArmor\n\nDisable resolvconf\n\nNOTE: If running UEFI mode, make sure secureboot is disabled.\n\nMake sure your system is up to date and your yum or apt-get database is updated. On a RHEL-based system, do:\n\nyum update\n\nOn a Debian system, do:\n\napt-get update apt-get upgrade\n\nRegarding SELinux or AppArmor, even if they may be wanted by some organizations, PacketFence will not work properly if SELinux or AppArmor are enabled. You will need to explicitly disable SELinux from the /etc/selinux/config file and reboot the machine. For AppArmor, you need to follow instructions on Debian wiki.\n\nRegarding resolvconf, you can remove the symlink to that file and simply create the /etc/resolv.conf file with the content you want.\n\n4.3.1. RHEL-based systems\n\nInstall kernel development package:\n\nyum install kernel-devel-$(uname -r)\n\nEnsure runc and podman are uninstalled (PacketFence uses docker+containerd.io)\n\nyum remove runc podman\n\nMake sure you are actually running the latest kernel prior to installing the kernel development package. Reboot prior to installing this package if unsure.\n\nRHEL 8.x\n\nYou need to have a valid subscription to be able to install PacketFence dependencies.\n\n4.3.2. Debian-based systems\n\nInstall kernel development package:\n\napt install linux-headers-$(uname -r)\n\nMake sure you are actually running the latest kernel prior to installing the kernel development package. Reboot prior to installing this package if unsure.\n\nThis section will guide you through configuring PacketFence as a simple RADIUS server. PacketFence will provide 802.1X support through Microsoft Active Directory and a Cisco 2960 access switch will be configured to integrate with PacketFence. The 802.1X client will be a Microsoft Windows 7 computer, connected of course on the wired network in the Cisco 2960 access switch. The following architecture diagram shows the interconnection of all components for our example:\n\n5.2. Connecting PacketFence to Microsoft Active Directory\n\nNext, we join the PacketFence server to your existing Microsoft Active Directory domain controller. From PacketFence’s web admin interface, go in Configuration → Policies and Access Control → Domains → Active Directory Domain and click on the New domain button. Provide the required fields. You will need an Active Directory administrative username and password (member of the domain admins) to join the PacketFence server to your domain. Once all the information has been provided, click on the Create & Join button.\n\nOnce the domain join succeeds, click on the REALMS tab. Click on the Default realm and set the domain to the Active Directory domain you have just created. That will instruct PacketFence to use that newly created Active Directory for the default authentication realm. Next, do the same thing for the 'NULL' realm.\n\nNext, we add the Microsoft Active Directory domain controller as an authentication source in PacketFence. To do so, from Configuration → Policies and Access Control → Authentication Sources, click on New internal source → AD. Specify all the required fields. If you need help identifying fields relevant to your Active Directory environment, please use the Active Directory Explorer (AD Explorer) or AdsiEdit.mmc tools from your Active Directory server.\n\nIn this new 'Authentication Source', add an 'Authentication Rules' with name 'catchall' with no condition and with the following actions:\n\nRole - default\n\nAccess duration - 5 days\n\nMake sure the information you provided are valid. Click on the Test button to validate the provided information. If you see the message 'Success! LDAP connect, bind and search successful' - you have properly configured your Microsoft Active Directory authentication source. Save your new authentication source by clicking on the Save button.\n\n5.4. Adding the Switch to PacketFence\n\nPacketFence must be aware of the equipment it manages. From Configuration → Policies and Access Control → Network Devices → Switches, click on New Switch → default. Enter your switch IP address (172.21.2.3 in our example). As a switch type, select Cisco Catalyst 2960 and select Production as the Mode. From the 'Roles' tab, make sure 'Role by VLAN ID' is checked and that the VLAN ID associated to the default role is set to your normal VLAN currently in use on your network. In our example, it will be VLAN 20. That means that once a 802.1X authentication is allowed by PacketFence, access will be properly granted in the default role in VLAN 20.\n\nFrom the 'RADIUS' tab, specify the 'Secret Passphrase' to use - in our example, it is 'useStrongerSecret'. It is very important to correctly set the RADIUS secret passphrase otherwise PacketFence will prevent the switch from communicating to itself.\n\nFinally, from the 'SNMP' tab, provide the correct 'Community Read' and 'Community Write' values.\n\n5.7. Testing\n\nNow, we are ready to do some testing. First make sure you restart the 'radiusd' service. That is required since we added a new Active Directory domain controller. From Status → Services, click on the Restart button for the 'radiusd' service. PacketFence will take care of restarting that service and the 'radiusd-acct' and 'radiusd-auth' sub-services.\n\nConnect the Microsoft Windows 7 endpoint on port no. 10 from the Cisco Catalyst 2960 switch. From Microsoft Windows, a popup should appear prompting you for a username and password. Enter a valid username and password from your Microsoft Active Directory domain - this should trigger 802.1X (EAP-PEAP) authentication.\n\nTo see what’s going on from PacketFence, click on the Auditing tab from PacketFence’s admin interface. You should see an entry for the MAC address of your Microsoft Windows 7 endpoint. Click on the line with the right MAC address to see the RADIUS exchanges. If the 802.1X authentication is successful, you should have 'Accept' as an 'Auth Status'.\n\nIn the previous section, we have succesfully configured 802.1X using PacketFence, Microsoft Active Directory and a Cisco Catalyst 2960 switch. While this demonstrates the fundamental role and capabilities of a NAC solution, most organizations are also looking at providing access to guests for example. One way of handling guests on a network is showing them a captive portal and let them register their own devices. This section will guide you in achieving this with PacketFence.\n\nFor our example, we will use Web Authentication, as it is supported by the Cisco Catalyst 2960. For more information on various enforcement modes, please refer to the 'Supported Enforcement Modes' sections of this document.\n\n6.6. Testing\n\nFirst make sure that the Microsoft Windows 7 endpoint is unplugged from the Cisco Catalyst 2960 switch. Then, make sure the endpoint is unregistered from PacketFence. To do this, from the Nodes configuration module, locate its MAC address and click on it. From the node property window, change the 'Status' to 'unregistered'.\n\nNext, we need to disable 802.1X from the network configuration card from the Microsoft Windows 7 endpoint. We want to simulate here an authentication by MAC address, so we have to disable 802.1X to do this. From Windows' Network Connection connection panel, ask for the properties of the LAN interface you will use for testing. From the authentication tab, make sure 'Enable IEEE 802.1X authentication' is unchecked. Save all changes.\n\nNext, connect the endpoint in the Cisco Catalyst 2960 switch. After a few second, open a web browser and try to open any website - say http://packetfence.org. You should now see the captive portal. You should only need to accept the terms and conditions for gaining network access.\n\nand many others. Moreover, PacketFence can also authenticate users defined in its own internal SQL database. Authentication sources can be created from PacketFence administrative GUI - from the Configuration → Policies and Access Control → Authentication Sources section. Authentication sources, rules, conditions and actions are stored in the /usr/local/pf/conf/authentication.conf configuration file.\n\nMultiple authentication sources can be defined, and will be tested in the order specified (note that they can be reordered from the GUI by dragging them around). Each source can have multiple rules, which will also be tested in the order specified. Rules can also be reordered, just like sources. Finally, conditions can be defined for a rule to match certain criteria. If the criteria match (one or more), actions are then applied and rules testing stop, across all sources as this is a \"first match wins\" operation.\n\nWhen no condition is defined, the rule will be considered as a catch-all. When a catch-all is defined, all actions will be applied for any users that match in the authentication source. Once a source is defined, it can be used from Configuration → Policies and Access Control → Connection Profiles. Each connection profile has a list of authentication sources to use.\n\nOne important key concept from NAC solutions is for seggretating network accesses. For example, an employee from the finance department might not have the same network access level as an other employee from the marketing department. Guests should also not have the same access level as normal employees within an organization. PacketFence uses roles internally to identify and differentiate users. For seggretating network access, PacketFence can use one or all of the following techniques:\n\nThe techniques to use depends on the wired/WiFi equipment itself. A role in PacketFence will be eventually mapped to a VLAN, an ACL or an external role. You must define the roles to use in your organization for network access.\n\nIn our previous configuration examples, we made use of two roles that come by default in PacketFence: default and guest. We will now add two new roles - one for consultants and one used to authenticate machines on the network.\n\n8.1. Adding Roles\n\nRoles in PacketFence can be created from Configuration → Policies and Access Control → Roles. From this interface, you can also limit the number of devices users belonging to certain roles can register.\n\nRoles are dynamically computed by PacketFence, based on the rules (ie., a set of conditions and actions) from authentication sources, using a first-match wins algorithm. Roles are then matched to VLAN or VLAN pool or internal roles or ACL on equipment from the Configuration → Policies and Access Control → Switches module. For a VLAN pool instead of defining a VLAN identifier, you can set a value like that: 20..23,27..30 - which means that the VLAN returned by PacketFence can be 20 to 23 and 27 to 30 (inclusively). There are three algorithms: one based on a hash of the username (default one), another one based on a round-robin (last registered device +1) and one that selects a VLAN randomly in the pool.\n\nConfiguration → Policies and Access Control → Roles, click on New Role. Provide the following information:\n\nName: employee\n\nDescription: Role used for employees\n\nMax nodes per user: 2\n\nRedo the operation of the other role:\n\nName: corporate_machine\n\nDescription: Corporate owned machines\n\nMax nodes per user: 1\n\nLet’s say we have two roles: employee and corporate_machine (defined above).\n\nNow, we want to assign roles to employees and their corporate machines using Active Directory (over LDAP), both using PacketFence’s captive portal.\n\nPrior configuring PacketFence, you must chose an appropriate enforcement mode to be used by PacketFence with your networking equipment. The enforcement mode is the technique used to enforce registration and any subsequent access of devices on your network. PacketFence supports the following enforcement modes:\n\nIt is also possible to combine enforcement modes. For example, you could use the out-of-band mode on your wired switches, while using the inline mode on your old WiFi access points.\n\n10.1. Introduction\n\nThe inline enforcement is a very convenient method for performing access control on older network equipment that is not capable of doing VLAN enforcement or that is not supported by PacketFence.\n\nAn important configuration parameter to have in mind when configuring inline enforcement is that the DNS reached by these users should be your actual production DNS server - which shouldn’t be in the same broadcast domain as your inline users. The next section shows you how to configure the proper inline interface and it is in this section that you should refer to the proper production DNS.\n\nInline enforcement uses ipset to mark nodes as registered, unregistered and isolated. It is also now possible to use multiple inline interfaces. A node registered on the first inline interface is marked with an IP:MAC tuple (for L2, only ip for L3), so when the node tries to register on an other inline interface, PacketFence detects that the node is already registered on the first inline network. It is also possible to enable inline.should_reauth_on_vlan_change to force users to reauthenticate when they change inline network - you can change this from 'Configuration→Network Configuration→Inline' - by checking or not the 'Reauthenticate node' checkbox.\n\nBy default the inline traffic is forwarded through the management network interface but it is possible to specify another one by adding in pf.conf the option interfaceSNAT in inline section of the pf.conf configuration file. Alternatively, you can change this from 'Configuration→Network Configuration→Inline' in the 'SNAT Interface' section. It is a comma delimited list of network interfaces like eth0,eth1.2. It’s also possible to specify a network that will be routed instead of using NAT by adding in conf/networks.conf an option nat=no under one or more network sections (take care of the routing table of the PacketFence server).\n\n10.3. Adding Inline Interface\n\nPacketFence can be configured right from the start using the PacketFence configurator for inline enforcement. In this example, we will continue building on top of our initial deployment by adding a new inline interface to our PacketFence installation.\n\nThe first step is to add a dedicated Network Interface Card (NIC) to your current PacketFence installation. In our example, our new NIC will be named ens192. The PacketFence web interface will list all currently installed network interfaces on the system. An IP and a netmask will be visible if the network interface is configured (either by DHCP or already manually configured). You can edit those ones, create/delete VLANs on physical interfaces and enable/disable interfaces. Note that these changes are effective immediately. Persistence will be written only for enabled interfaces. Which means that if you change your management IP address, to pursue the configurator, you will need to go on this new IP address you just set. At all time, you will need to set a Management interface. That means that the required interface types for inline enforcement are:\n\nManagement\n\nInline layer 2\n\nNote that PacketFence will provide these services on its inline interface:\n\nPacketFence provides its own DHCP service. It will take care of IP address distribution in our Inline network. PacketFence will not provide DHCP services on the management network - this is the responsibility of your own infrastructure.\n\nPacketFence provides its own DNS service. However, for the inline mode, you will also need to provide access to the DNS server of your infrastructure.\n\nFrom 'Configuration→Network Configuration→Interfaces', click on the ens192 logical name. Provide the following information:\n\nIP Address: 192.168.2.1\n\nNetmask: 255.255.255.0\n\nType: Inline Layer 2\n\nAdditionnal listening daemon(s): portal\n\nDNS Servers: 10.0.0.10\n\nClick on 'Save' and toggle the new interface to 'On'.\n\nOnce done, your PacketFence server should have the following network layout:\n\nPlease refer to the following table for IP and subnet information :\n\nNetwork Card Name Subnet Gateway PacketFence Address\n\nens160\n\nManagement\n\n172.20.100.0/16\n\n172.20.0.1\n\n172.20.100.2\n\nens192\n\nInline\n\n192.168.2.0/24\n\n192.168.2.1\n\n192.168.2.1\n\nFinally, from Status→Services, restart the haproxy-portal, pfdhcp, iptables, pfdhcplistener, pfdns services.\n\n10.4. Network Devices\n\nIn an inline configuration, the required configurations for network devices (desktops, tablets, printers, etc.) will be to make sure they can all communicate with PacketFence. In other words for a switch you will need to configure every ports on which devices will be connected using the access mode with all of them in the same inline network. Access point will be connected as device to be in the inline subnetwork.\n\nExample with a Cisco switch:\n\nYou should be in mode '#conf-t' if not execute 'configuration terminal' in your CLI.\n\ninterface range [port-range]\n\nswitchport mode access vlan 1\n\nno shutdown\n\ninterface [packetfence_ens192]\n\nswitchport mode access vlan 1\n\nno shutdown\n\nend\n\ncopy running-configuration startup-configuration\n\nNow you can connect any devices that you want to be in the inline network in any of the port you have just configured.\n\n11.2. Adding the Registration, Isolation and Other Interface\n\nFirst of all, make sure you add a new NIC to your PacketFence server and you set the switch port where that NIC is connected in trunk. If you prefer, you can also set your management interface as trunk and set the PVID to your management VLAN on the switch port where that management is connected.\n\nWe will create three interfaces VLAN for registration, isolation and normal using the management interface.\n\nThe required interface types for VLAN enforcement are:\n\nManagement\n\nRegistration\n\nIsolation\n\nOther\n\nNote that you can only set one (1) management interface.\n\nIn our example, we will create three new VLANs on the wired interface on our new trunk interface (ens224) To do so, click the 'Add VLAN' button besides the wired interface for each of the needed VLAN:\n\nHere’s a sample configuration for both of them:\n\nRegistration\n\nVirtual LAN ID: 102\n\nIP Address: 192.168.102.1\n\nNetmask: 255.255.255.0\n\nIsolation\n\nVirtual LAN ID: 103\n\nIP Address: 192.168.103.1\n\nNetmask: 255.255.255.0\n\nNormal\n\nVirtual LAN ID: 104\n\nIgnore the High-Availability options for now. If you are interested in a PacketFence cluster, please refer to the PacketFence Clustering Guide.\n\nAccording to our example, we’ll associate the correct type the each interfaces.\n\nens160: Management\n\nens224 VLAN 102: Registration\n\nens224 VLAN 103: Isolation\n\nens224 VLAN 104: Other\n\nMake sure that those three interfaces are in an enabled state for the persistence to occur. We also need to set the Default Gateway which will generally be the gateway of the management network.\n\nFinally, from Status→Services, restart the haproxy-portal, pfdhcp, iptables, pfdhcplistener, pfdns services.\n\n12.3. RADIUS Debugging\n\nFirst, check the FreeRADIUS logs. The file is located at /usr/local/pf/logs/radius.log.\n\nIf this didn’t help, run FreeRADIUS in debug mode. To do so, start it using the following commands.\n\nFor the authentication radius process:\n\nradiusd -X -d /usr/local/pf/raddb -n auth\n\nFor the accounting radius process:\n\nradiusd -X -d /usr/local/pf/raddb -n acct\n\nAdditionally there is a raddebug tool that can extract debug logs from a running FreeRADIUS daemon. PacketFence’s FreeRADIUS is pre-configured with such support.\n\nIn order to have an output from raddebug, you need to either:\n\nMake sure user pf has a shell in /etc/passwd, add /usr/sbin to PATH (export PATH=/usr/sbin:$PATH) and execute raddebug as pf\n\nRun raddebug as root (less secure!)\n\nNow you can run raddebug easily:\n\nraddebug -t 300 -f /usr/local/pf/var/run/radiusd.sock\n\nThe above will output FreeRADIUS' authentication debug logs for 5 minutes.\n\nUse the following to debug radius accounting:\n\nraddebug -t 300 -f /usr/local/pf/var/run/radiusd-acct.sock\n\nSee man raddebug for all the options.\n\nThis section details most of the authentication mechanisms supported by PacketFence. It walks you through the required steps to properly use an authentication mechanism on your captive portal, for example. For Public Key Infrastructure (PKI) integration, please refer to the PKI Integration section from this document.\n\n13.2. OAuth2 Authentication\n\nOAuth2 authentication does not work with Webauth enforcement\n\nOAuth2 authentication will fail by design when previewed through \"Connection Profiles\"\n\nThe captive portal of PacketFence allows a guest/user to register using his Google, Facebook, LinkedIn, Windows Live, OpenID Connect or Github account.\n\nFor each providers, we maintain an allowed domain list to punch holes into the firewall so the user can hit the provider login page. This list is available in each OAuth2 authentication source.\n\nYou must enable the passthrough option in your PacketFence configuration (fencing.passthrough in pf.conf).\n\n13.2.1. Google\n\nIn order to use Google as a OAuth2 provider, you need to get an API key to access their services. Sign up here : http://code.google.com/apis/console. In the Google APIs Console, go into 'Credentials → Create Credentials → OAuth client ID → Web Application', then enter a name and make sure you use this URI for the \"Authorized redirect URIs\" field : https://YOUR_PORTAL_HOSTNAME/oauth2/callback. Of course, replace the hostname with the values from general.hostname and general.domain. Save to get the Client ID and Client secret.\n\nYou can keep the default configuration, modify the App ID & App Secret (Given by Google on the developer platform) and Portal URL (https://YOUR_PORTAL_HOSTNAME/oauth2/callback).\n\nAlso, add the following Authorized domains : *.google.com, *.google.ca, *.google.fr, *.gstatic.com,googleapis.com,accounts.youtube.com (Make sure that you have the google domain from your country like Canada ⇒ *.google.ca, France ⇒ *.google.fr, etc…​)\n\nOnce you have your client id, and API key, you need to configure the OAuth2 provider. This can be done by adding a Google OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nMoreover, don’t forget to add Google as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\nTo use Facebook as an authentication source, you also need an API code and a secret key. To get one, go here: https://developers.facebook.com/apps. When you create your App, make sure you specify the following as the Website URL: https://YOUR_PORTAL_HOSTNAME/oauth2/callback Of course, replace the hostname with the values from general.hostname and general.domain.\n\nTo find the secret, go in your newly created app, and click on 'Settings → Basic'.\n\nWhile in 'Settings → Basic', add YOUR_PORTAL_HOSTNAME in the App Domains field. Next, you will need to add the product Facebook Login. Click on Set up, and choose Web platform. Go through the 5 steps, then on the left side of the screen, go in Settings under Facebook Login. For Valid OAuth Redirect URIs, enter https://YOUR_PORTAL_HOSTNAME/oauth2/callback and then save changes.\n\nAlso, add the following Authorized domains : *.facebook.com, *.fbcdn.net, *.akamaihd.net, *.akamaiedge.net, *.edgekey.net, *.akamai.net (May change)\n\nOnce you have your information, you need to configure the OAuth2 provider. This can be done by adding a Facebook OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nYou can keep the default configuration, modify the App ID & App Secret (Given by Facebook on the developer platform) and Portal URL (https://YOUR_PORTAL_HOSTNAME/oauth2/callback).\n\nMoreover, don’t forget to add Facebook as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\nBy allowing OAuth through Facebook, you will give Facebook access to the users while they are sitting in the registration VLAN.\n\n13.2.3. Github\n\nTo use Github, you also need an API code and a secret key. To get one, you need to create an App here: https://github.com/settings/applications/new. When you create your App, make sure you specify the following as the Callback URL https://YOUR_PORTAL_HOSTNAME/oauth2/callback\n\nOf course, replace the hostname with the values from general.hostname and general.domain.\n\nOnce you have your information, you need to configure the OAuth2 provider. This can be done by adding a GitHub OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nMoreover, don’t forget to add GitHub as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\n13.2.4. Kickbox\n\nTo use Kickbox, you need a API key. To get one, first create an account on https://kickbox.io, then navigate to https://app.kickbox.com/settings/keys. Click on 'API Keys → Create Key'. Pick a name and choose 'Production' mode and 'Single' verification.\n\nOnce you have your API key, you need to configure the OAuth2 provider. This can be done by adding a Kickbox authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nMoreover, don’t forget to add Kickbox as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\n13.2.5. LinkedIn\n\nTo use LinkedIn, you also need an API code and a secret key. To get one, you need to create an App here: https://developer.linkedin.com/. When you create your App, make sure you specify the following as the Callback URL https://YOUR_PORTAL_HOSTNAME/oauth2/callback\n\nYou can get more details about how to configure your LinkedIn application inside Microsoft documentation.\n\nOf course, replace the hostname with the values from general.hostname and general.domain.\n\nOnce you have your information, you need to configure the OAuth2 provider. This can be done by adding a LinkedIn OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nMoreover, don’t forget to add LinkedIn as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\nWhen testing LinkedIn OAuth2, use a different LinkedIn account to setup the application and to test the Source in the captive portal.\n\n13.2.6. OpenID Connect\n\nUsing OpenID Connect is a bit different than other OAuth2 sources. The reason behind that is because you will setup your own OpenID Connect source or depend on a provider for it. Configuration like token path, authorize path or API URL are specific to your setup. For more information on how to create your own or get a host please visit: http://openid.net/connect/.\n\nWhen you create your App, make sure you specify the following as the Callback URL, https://YOUR_PORTAL_HOSTNAME/oauth2/callback.\n\nOf course, replace the hostname with the values from general.hostname and general.domain.\n\nOpenID connect have different ways to be configured, make sure to create a client ID and a client secret to work with PacketFence.\n\nOnce you have your information, you need to configure the OAuth2 provider. This can be done by adding an OpenID OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nMoreover, don’t forget to add OpenID as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\n13.2.7. Twilio\n\nTo use Twilio, first create an account on https://www.twilio.com. From the console (dashboard) https://www.twilio.com/console create a 3rd Party Integration. Note the Account SID and Auth Token for later use. From the Phone Manager https://www.twilio.com/console/phone-numbers/incoming click the \"+\" button to Buy a number with SMS capability - no payment is needed to start using this phone number right away.\n\nOnce you have your information, you need to configure the OAuth2 provider. This can be done by adding a Twilio OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Enter your 'Account SID', 'Auth Token' and 'Phone Number (From)' from above. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nMoreover, don’t forget to add Twilio as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\n13.2.8. Windows Live\n\nTo use Windows live, you also need an API code and a secret key. To get one, you need to create an App here: .https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade When you create your App, make sure you specify the following as the Callback URL https://YOUR_PORTAL_HOSTNAME/oauth2/callback replacing the hostname with the values from general.hostname and general.domain.\n\nOnce you have your information, you need to configure the OAuth2 provider. This can be done by adding a WindowsLive OAuth2 authentication source from Configuration → Policies and Access Control → Authentication Sources. Remember to add the Authentication Rules with at least two Actions (example: Role and Access duration).\n\nThe App ID in PacketFence will be Application (client) ID in the Azure portal.\n\nThe App secret must be a client secret created in the Certificates & secrets section of your app on Azure AD. Note that Azure AD secrets do expire so make sure you set a reminder to update your secret before it expires.\n\nMoreover, don’t forget to add WindowsLive as a Source from your connection profile definition, available from Configuration → Policies and Access Control → Connection Profiles.\n\n13.5. Billing Engine\n\nPacketFence integrates the ability to use a payment gateway to bill users to gain access to the network. When configured, the user who wants to access the network / Internet is prompted by a page asking for it’s personal information as well as it’s credit card information.\n\nPacketFence currently supports two payment gateways: Authorize.net, Paypal and Stripe.\n\nIn order to activate the billing, you will need to configure the following components :\n\nBilling source(s)\n\nBilling tier(s)\n\n13.5.1. Configuring a billing source\n\nFirst select a billing provider and follow the instructions below.\n\nPaypal\n\nThis provider requires that your PacketFence server is accessible on the public domain. For this your PacketFence portal should be available on a public IP using the DNS server name configured in PacketFence.\n\nIf you have a business account and do not want to configure a test environment, you can skip the next section.\n\nSandbox account\n\nTo configure a sandbox paypal account for use in PacketFence, head to https://developer.paypal.com/ and either sign up or login into your existing account.\n\nThen in the Sandbox menu, click Accounts\n\nCreate an account that has the type Personal and one that has the type Business.\n\nAfterwards, go back into accounts, and expand the business account, then click Profile\n\nNow click the 'Change password' link and change the password and note it.\n\nDo the same thing with the personal account you created\n\nConfiguring the merchant account\n\nLogin into the Paypal business account that you created at https://www.sandbox.paypal.com/ if you are using a sandbox account or on https://www.paypal.com/ if you are using a real account.\n\nNext go in Account_Settings on the top right bellow your user account.\n\nNext in the Account Settings you will need to select Website Payment → Website preferences\n\nConfigure the settings so they match the screenshot below.\n\nYou should turn on Auto Return, set the return URL to https://YOUR_PORTAL_HOSTNAME/billing/paypal/verify.\n\nEnable Payment data transfert and you should see the Identity Token appear, note it as it will be required in the PacketFence configuration.\n\nNext go back in Account_Settings on the top right bellow your user account, select Website Payment → Encrypted payment settings\n\nNow on this page you will need to submit the certificate used by PacketFence to Paypal (/usr/local/pf/conf/ssl/server.crt by default).\n\nOnce you have submitted it, note it’s associated Cert ID as you will need to configure it in PacketFence.\n\nStill on that page, click the Download link to download the Paypal public certificate and put it on the PacketFence server under path : /usr/local/pf/conf/ssl/paypal.pem\n\nThe certificate will NOT be the same if you use a sandbox account or a real account.\n\nConfiguring PacketFence\n\nNow, in the PacketFence administration interface, go in Configuration → Policies and Access Control → Sources and create a new source of type 'Billing → Paypal'.\n\nWhere :\n\nIdentity token is the one you noted when on the 'Website Payment Preferences' page.\n\nCert ID is the one you noted when on the 'Encrypted Payment Settings'.\n\nPayment type is whether the access is donation based (not mandatory to pay for it).\n\nEmail address is the email address of the merchant paypal account.\n\nCert file is the path to the PacketFence certificate (/usr/local/pf/conf/ssl/server.crt by default).\n\nKey file is the path to the PacketFence certificate (/usr/local/pf/conf/ssl/server.key by default).\n\nPaypal cert file is the path to the Paypal certificate (/usr/local/pf/conf/ssl/paypal.pem in this example).\n\nCurrency is the currency that will be used in the transactions.\n\nTest mode should be activated if you are using a sandbox account.\n\nIf they aren’t already enabled, you will need to enable passthroughs so that users can reach the domains of this provider. Refer to the Passthroughs section of this document for details\n\nStripe\n\nStripe account\n\nFirst go on https://dashboard.stripe.com, create an account and login.\n\nNext on the top right click Your account then Account settings.\n\nNavigate to the API keys tab and note your key and secret. The test key should be used when testing the configuration and the live key when putting the source in production.\n\nConfiguring PacketFence\n\nNow, in the PacketFence administration interface, go in Configuration → Policies and Access Control → Sources and create a new source of type Billing → Stripe\n\nWhere :\n\nSecret key is the secret key you got from your Stripe account.\n\nPublishable key is the publishable key you got from your Stripe account.\n\nStyle is whether you are doing a one-time charge or subscription based billing (recurring). See section Subscription based registration below for details on how to configure it.\n\nCurrency is the currency that will be used in the transactions.\n\nTest mode should be activated if you are using the test key and secret account.\n\nIf they aren’t already enabled, you will need to enable passthroughs so that users can reach the domains of this provider. Refer to the Passthroughs section of this document for details.\n\nStripe customer portal\n\nPacketFence supports integrating with the Stripe customer portal and will handle subscription cancelations by default using webhooks. Additional hooks can be supported by extending lib/pf/billing/custom_hook.pm.\n\nIn order to enable the customer portal in Stripe, go in Settings → Product settings → Billing → Customer portal. Next, enable the options you want for the customer portal.\n\nPacketFence supports the following options:\n\nAllow customers to view their invoice history\n\nAllow customers to update their billing information\n\nAllow customers to update their payment method\n\nAllow customers to cancel subscriptions\n\nOptionally, once this is configured, you need to make sure your captive portal is accessible publicly for Stripe to send it webhooks if you want to support subscription cancellations. Once its accessible publicly, configure a webhook to receive the event customer.subscription.deleted on https://PF_DOMAIN_NAME/hook/billing/STRIPE_SOURCE_ID. Replace STRIPE_SOURCE_ID by the identifier (name) of your Stripe source in your PacketFence configuration.\n\nNext, in PacketFence, go in your Stripe source (Configuration → Policies and Access Control → Authentication Sources) and enable the option Customer portal in your Stripe source.\n\nNow when your users will visit the status page (https://PF_DOMAIN_NAME/status), they will have the option to manage their subscriptions and visit the Stripe customer portal.\n\n13.5.2. Adding billing tiers\n\nOnce you have configured one or more billing source, you need to define billing tiers which will define the price and target authentication rules for the user.\n\nIn the PacketFence administration interface, go in Configuration → Advanced Access Configuration → Billing tiers\n\nThen click Add billing tier and configure it.\n\nWhere :\n\nBilling tier is the unique identifier of the billing tier.\n\nName is the friendly name of the billing tier.\n\nDescription is an extended description of the billing tier.\n\nPrice is the amount that will be charged to the user.\n\nAccess duration is the amount of time the user will be granted access to your network.\n\nRole is the target role the user should be in.\n\nUse time balance defines if the access duration should be computed on real-time access duration meaning if the user buys 24 hours of access he can use the network for 24 hours in different time blocks. This requires a valid RADIUS accounting configuration.\n\nIf don’t want to use all the billing tiers that are defined, you can specify the ones that should be active in the Connection profile.\n\n13.5.3. Subscription based registration\n\nPacketFence supports subscription based billing using Stripe as a billing provider.\n\nStripe configuration\n\nIn your Stripe dashboard, you should go in Products → Add product.\n\nThen create a new product.\n\nWhere :\n\nPrice is the price of the plan. It is important that this matches the price of the billing tier in PacketFence.\n\nCurrency is the currency that will be used in the transactions. It is important that this matches the currency of the Stripe source in PacketFence.\n\nBilling period is the interval at which the customer should be billed. In the case of this example, it is monthly.\n\nSave it and edit the product to see details information\n\nWhere :\n\nAPI ID is the billing tier identifier. It is important that this matches the ID of the billing tier in PacketFence.\n\nNow, following the same procedure, create the advance plan.\n\nBilling tier\n\nWhen using subscription based billing, it is advised to configure the billing tier so it has an almost infinite access duration (e.g. 20 years) as the billing provider will be contacting the PacketFence server when the subscription is canceled.\n\nYou should configure a billing tier for each subscription plan you want to have. This example will use the plan base and advance configured using the following parameters. In this case price_1KW0jVIHkusDcikdVCGcvCii and price_1HFl6mIHkusDcikdZfIh5Bcj are the API ID copied from the 2 products.\n\n[price_1KW0jVIHkusDcikdVCGcvCii]\n\nname=Base access\n\ndescription=Click here if you are poor\n\nprice=3.99\n\nrole=guest\n\naccess_duration=10Y\n\nuse_time_balance=disabled\n\n[price_1HFl6mIHkusDcikdZfIh5Bcj]\n\nname=Advanced network access\n\ndescription=Click here if you are poor\n\nprice=9.99\n\nrole=advanced_guest\n\naccess_duration=10Y\n\nuse_time_balance=disabled\n\nAs the subscription can be cancelled by a user, you need to setup your PacketFence installation to receive updates from Stripe.\n\nUpdates are sent using HTTP requests on a public IP.\n\nYou need to make sure that your PacketFence server is available through a public IP on port 80 and that your PacketFence server hostname resolves on the public domain.\n\nThen, in Stripe, configure a Webhook so Stripe informs PacketFence of any event that happens in this Stripe merchant account.\n\nIn order to do so go in Your Account → Developers → Webhooks and click Add an endpoint.\n\nWhere :\n\nURL is the URL to the PacketFence server. This should be http://YOUR_PORTAL_HOSTNAME/hook/billing/stripe\n\nSelect events to listen to Select all the events\n\nNow every time a user unsubscribes from a plan, PacketFence will be notified and will unregister that device from your network.\n\n13.5.4. Extending access before it ends\n\nPacketFence allows users to extend their access before it has ended. In order to do so, you need to enable Allow access to registration portal when registered accessible via the Captive Portal tab of the Connection Profiles. Once this is activated, the users can reach https://YOUR_PORTAL_IP/status and select Extend your access in order to be able to access the billing section after they have registered.\n\n14.3. Self Service - Device Registration\n\nOnce a user is registered they can self-register any device on the Portal by entering a MAC address that is matched with an authorized device list through Fingerbank. The device is registered to the user and can be assigned into a specific category.\n\nThe user can access the portal within the network, or in any VLAN that can reach PacketFence on a portal interface (see below) at: https://YOUR_PORTAL_HOSTNAME/device-registration.\n\nDevice registration page is disabled by default. In order to enable it, you need to configure a self service policy and assign it to a connection profile.\n\nA self-service portal policy can be configured in Configuration → Advanced Access Configuration → Self Service Portal. Define the behavior by either modifying the default policy, or creating a new policy. If the \"Role to assign\" is left empty, the role of the user that is registering the device will be reused. Optionally select one or more \"Allowed OS\" to restrict which operating systems can be registered - as it may be useful to only allow gaming devices.\n\nIn Configuration → Policies and Access Control → Connection Profiles, assign the \"Self service policy\", then click Save.\n\nThe portal listening daemon may need to be added to the management interface for the \"self service portal\" to be accessible.\n\n14.4. Self Service - Status Page\n\nOnce a user is registered they can self-service and manage all their own devices on the Portal. Devices can be unregistered, reported as stolen (trigger a \"LOST of Stolen\" Security Event). Local users which are defined in the PacketFence database can manage their password.\n\nThe user can access the portal within the network at https://YOUR_PORTAL_HOSTNAME/status.\n\nBy default all users can manage all their own devices through the self-service portal. In Configuration → Advanced Access Configuration → Self Service Portal, choose a Self Service Portal, specify the \"Self Service Portal → Allowed roles\", then click Save.\n\nStatus page is available by default, even if you don’t configure a self service policy. Optionally, it can be disabled in all but the PacketFence management network (registration, isolation, inline) by enabling Status URI only on management interface in Configuration → Advanced Access Configuration → Captive Portal.\n\nIn Configuration → Policies and Access Control → Connection Profiles, assign the \"Self service policy\", then click Save.\n\nThe portal listening daemon may need to be added to the management interface for the \"self service portal\" to be accessible.\n\n14.7. Parking Devices\n\nIdle devices (ex: unregistered students) consume resources and generate unnecessary load on the Captive Portal and registration DHCP server.\n\nIn large registration networks Parking can be used to provide a longer lease and provide a lightweight Captive Portal that minimizes resource consumption. When a device is parked the Captive Portal provides a message to the user explaining the device is unregistered and has exceeded the parking threshold, and a button to unpark the device.\n\nIn Configuration → Network Configuration → Networks → Device Parking, set the \"Parking Threshold\" (seconds). A value of 21600 / 6 hours is suggested. If a device is idle in the registration network for more than 6 hours, Security Event 1300003 (see below) will be triggered and the device will be parked.\n\nOptionally the lease length (seconds) can also be set in \"Parking lease length\". If the device is parked with a \"Parking lease length\" of 1 hour, then immediately unparked, the next detection will occur in 1 hour, even if the \"Parking threshold\" is a lower value.\n\nParking is detected when a device requests DHCP and only works if PacketFence is the DHCP server for the registration network.\n\n14.7.1. Security Event 1300003\n\nIn Configuration → Compliance → Security Events, choose Security Event 1300003, configure how the event is handled when a device is parked:\n\nIn \"Event Actions\" add actions with the predefined ones (ex: 'Email administrator' or 'Execute script').\n\nIn \"Event Actions → Isolate → Role while isolated\" set the destination role (VLAN) of the user. Leave as registration unless a dedicated role is needed for parking.\n\nIn \"Event Actions → Isolate → Template to use\" set the template used in the registration Portal, not the template used for parking. To use the non-parking portal disable \"Show parking portal\" in Configuration → Network Configuration → Networks → Device Parking.\n\nIn \"Grace\" set the amount of grace time between two parking security events. Once a device is unparked, wait at least this amount of time for the user to register before re-triggering the Security Event.\n\n15.1. Connection Profiles\n\nPacketFence provides a default connection profile. The follow parameters are important to configure whether the default connection profile is used or a new one is created:\n\nRedirect URL under Configuration → Policies and Access Control → Connection Profile → Profile Name\n\nFor some browsers, it is preferable to redirect the user to a specific URL instead of the URL the user originally intended to visit. For these browsers, the URL defined in redirecturl will be where the user is redirected. Affected browsers are Firefox 3 and later.\n\nIP under Configuration → Advanced Access Configuration → Captive portal.\n\nThis IP is used as the web server that hosts the common/network-access-detection.gif which is a pixel-gif used to detect network access. The IP cannot be a domain name since it is used during Registration and Isolation where DNS is black-holed. It is recommended to allow users to reach the PacketFence server with the PacketFence LAN IP.\n\nIn some cases, a different captive portal may be presented (see below for the available customizations) according to the SSID, the VLAN, the switch IP/MAC or the URI the client connects to. To do so, PacketFence uses the concept of connection profiles to provide this possibility.\n\nWhen configured, connection profiles will override default values. When no values are configured in the profile, PacketFence will use the values from the \"default\" connection profile.\n\nBelow the different configuration parameters for each connection profile are provided. The only mandatory parameter is \"filter\", otherwise, PacketFence will not be able to correctly apply the connection profile. The parameters are set in /usr/local/pf/conf/profiles.conf:\n\nConnection profiles should be managed from PacketFence’s Web administration GUI - from the Configuration → Policies and Access Control → Connection Profiles section. Adding a new connection profile will make a copy of the default templates - which can then be modified as desired.\n\nFilters under Configuration → Policies and Access Control → Connection Profile → Profile Name → Filters\n\nPacketFence offers the following filters:\n\nConnection Type\n\nNetwork\n\nNode Role\n\nPort\n\nRealm\n\nSSID\n\nSwitch\n\nSwitch Port\n\nURI\n\nVLAN\n\nTime period\n\nExample with common filters:\n\nSSID: Guest-SSID\n\nVLAN: 100\n\nTime period: wd {Mon Tue} hr {1pm-3pm} — See http://search.cpan.org/~pryan/Period-1.20/Period.pm\n\nSwitch Port: <SwitchId>-<Port>\n\nNetwork: IP address or Network CIDR\n\nNode role is only used with 802.1X connections and VLAN filters.\n\nAdvanced filter under Configuration → Policies and Access Control → Connection Profile → Profile Name → Advanced Filter\n\nThis section defines how to create an advanced filter to match specific attributes.\n\nThe following attributes are supported:\n\nUsing a previous connection (database, profiling):\n\nautoreg\n\nstatus\n\nbypass_vlan\n\nbandwidth_balance\n\nregdate\n\nbypass_role\n\ndevice_class\n\ndevice_type\n\ndevice_version\n\ndevice_score\n\npid\n\nmachine_account\n\ncategory\n\nmac\n\nlast_arp\n\nlast_dhcp\n\nuser_agent\n\ncomputername\n\ndhcp_fingerprint\n\ndetect_date\n\nvoip\n\nnotes\n\ntime_balance\n\nsessionid\n\ndhcp_vendor\n\nunregdate\n\nfingerbank_info.device_name\n\nfingerbank_info.device_fq\n\nfingerbank_info.device_hierarchy_names\n\nfingerbank_info.device_hierarchy_ids\n\nfingerbank_info.score\n\nfingerbank_info.version\n\nfingerbank_info.mobile\n\nradius_request.User-Name\n\nradius_request.NAS-IP-Address\n\nradius_request.NAS-Port-Id\n\nUsing the current connection:\n\nconnection_sub_type\n\nconnection_type\n\nswitch\n\nport\n\nvlan\n\nssid\n\ndot1x_username\n\nrealm\n\nmachine_account\n\nOperators:\n\n&& and\n\n|| or\n\n!= is not equal\n\n== equal\n\n() group precedence\n\nSpecial values:\n\n__NULL__ the value is NULL in the database\n\n15.1.1. Examples\n\nMatch machine authentication on secure wireless ssid:\n\nmachine_account != \"\" && connection_type == Wireless-802.11-EAP\n\nMatch machine authentication from a previous connection and is connected on a secure ssid:\n\nmachine_account != \"\" && ssid == Secure\n\nMatch user authentication and machine authentication on a secure ssid:\n\nlast_connection_type == \"Wireless-802.11-EAP\" && machine_account != \"\" && last_dot1x_username !~ \"^host/\"\n\nMatch user authentication without machine authentication on a secure ssid:\n\nlast_connection_type == \"Wireless-802.11-EAP\" && ( machine_account == \"\" || machine_account == \\\\__NULL__ ) && last_dot1x_username !~ \"^host/\"\n\nMatch without machine authentication (BYOD):\n\nmachine_account == \\\\__NULL__\n\nExample of attributes that can be filtered:\n\nPacketFence uses Apache for its captive portal, administration interface and Web services. The PacketFence Apache configuration is located in /usr/local/pf/conf/httpd.conf.d/.\n\nIn this directory the following important files are used for different purposes:\n\nhttpd.admin: used to manage PacketFence admin interface\n\nhttpd.portal: used to manage PacketFence captive portal interface\n\nhttpd.webservices: used to manage PacketFence webservices interface\n\nhttpd.aaa: used to manage incoming RADIUS requests\n\nThese files are dynamically generated with Perl and services are only activated on the network interfaces needed for each purpose.\n\nThe other files in this directory are managed by PacketFence using templates, so it is easy to modify these files based on the configuration. SSL is enabled by default to secure access.\n\nDuring installation self-signed certificates will be created in /usr/local/pf/conf/ssl/ (server.key and server.crt). The certificates can be replaced anytime by either a 3rd-party or existing wildcard certificate without issue. Please note that the CN (Common Name) needs to be the same as the one defined in the PacketFence configuration file /usr/local/pf/conf/pf.conf.\n\n15.1.2. Reuse 802.1X credentials\n\nIn certain circumstances - for example to show an AUP after a successful 802.1X connection - \"SSO emulation\" may be used so that the user does not need to re-enter their credentials on the portal after having entered them during 802.1X EAP. The connection profile option 'Reuse 802.1X credentials' can be enabled for this purpose. The username used during the 802.1X connection will be reused with the different authentication sources to recompute the role from the portal.\n\nAs a security precaution, this option will only reuse 802.1X credentials if there is an authentication source matching the provided realm. This means, if users use 802.1X credentials with a domain part (username@domain, domain\\username), the domain part needs to be configured as a realm under the RADIUS section and an authentication source needs to be configured for that realm. If users do not use 802.1X credentials with a domain part, only the NULL realm will be matched IF an authentication source is configured for it.\n\n15.3. VLAN Filters\n\nFilters can be defined directly in the portion of code that re-evaluates the VLAN or performs API calls when a RADIUS request is received. These filters can be defined in Configuration → Advanced Access Configuration → Filter engines.\n\nThese rules are available in different scopes:\n\nIsolationRole\n\nRegistrationRole\n\nRegisteredRole\n\nInlineRole\n\nAutoRegister\n\nNodeInfoForAutoReg\n\nAnd can be defined using different criteria:\n\nnode_info.attribute (like node_info.status)\n\nswitch\n\nifIndex\n\nmac\n\nconnection_type\n\nusername\n\nssid\n\ntime\n\nowner.attribute (like owner.pid)\n\nradius_request.attribute (like radius_request.Calling-Station-Id)\n\nDefault VLAN filters are defined in the configuration that can be used to achieve the following goals:\n\nEXAMPLE_Reject_between_11am_2pm\n\nprevent a registered device from connecting when its role is default, the SSID is SECURE, the current time is between 11am and 2pm, from Monday to Friday.\n\nEXAMPLE_Trigger_event_if_user\n\ncreate a security event if the SSID is OPEN and the owner is igmout (the security event needs to have a custom trigger with the value 12345).\n\nEXAMPLE_Autoregister_if_user\n\nautoregister the device and assign the role staff to each device if the username is igmout.\n\nEXAMPLE_Autoregister_windows_devices\n\nautoregister all Windows devices and assign them the default role.\n\nEXAMPLE_Reject_specific_MAC\n\nfilter a MAC address and reject it by assigning the REJECT role.\n\nEXAMPLE_Detect_VOIP\n\nset Avaya and Polycom as phones by matching vendor MAC and set to default role.\n\nEXAMPLE_Reject_User_Unless_Machine\n\nrefuse user authentication without prior machine authentication.\n\nEXAMPLE_Autoregister_Printer_Scanner\n\nautoregister printers and scanners and add a note.\n\nSeveral examples on how to use and define filters are included in /usr/local/pf/conf/vlan_filters.conf.defaults.\n\n15.4. RADIUS Filters\n\nFilters can be defined directly in the portion of code that returns RADIUS attributes or performs API calls when a RADIUS request is received. These filters can be defined in Configuration → Advanced Access Configuration → Filter engines.\n\nWe added the ability to specify filters directly in the portion of code that return RADIUS attributes or do a call to the API. These filters can be defined in Configuration → Advanced Access Configuration → Filter engines.\n\nThese rules are available in thoses scopes:\n\nreturnRadiusAccessAccept: return the answer for a device's access\n\nreturnAuthorizeRead: return the answer for the switch read login access\n\nreturnAuthorizeWrite: return the answer for the switch write login access\n\nreturnAuthorizeVoip: return the answer for a VoIP device\n\npreProcess: manipulate the RADIUS context (example: add custom attributes to the request)\n\npacketfence.authorize: call the RADIUS filter in the packetfence authorize section\n\npacketfence.authenticate: call the RADIUS filter in the packetfence authenticate section\n\npacketfence.pre-proxy: call the RADIUS filter in the packetfence pre-proxy section\n\npacketfence.post-proxy: call the RADIUS filter in the packetfence post-proxy section\n\npacketfence-tunnel.authorize: call the RADIUS filter in the packetfence-tunnel authorize section\n\npacketfence.preacct: call the RADIUS filter in the packetfence preacct section\n\npacketfence.accounting: call the RADIUS filter in the packetfence accounting section\n\neduroam.authorize: call the RADIUS filter in the eduroam accounting section\n\neduroam.pre-proxy: call the RADIUS filter in the pre-proxy accounting section\n\neduroam.post-proxy: call the RADIUS filter in the post-proxy accounting section\n\neduroam.preacct: call the RADIUS filter in the eduroam preacct section\n\nAll the packetfence. and eduroam. scopes are explained in /user/local/pf/conf/radius_filters.conf.\n\nAnd can be defined using different criteria like:\n\nnode_info.attribute (like node_info.$attribute)\n\nswitch\n\nifIndex\n\nmac\n\nconnection_type\n\nusername\n\nssid\n\ntime\n\nowner.attribute (like owner.$attribute)\n\nradius_request.attribute (like radius_request.$attribute)\n\nsecurity_event\n\nuser_role\n\nvlan\n\nDefault RADIUS filters are defined in the configuration that can be used to achieve the following goals:\n\nEXAMPLE_Ethernet-EAP-Accept\n\nreturns Access-Accept (with Cisco-AVPair attribute) when the connection is Ethernet-EAP and no security event exists.\n\nEXAMPLE_Session-timeout_Idle-Timeout_Terminate_action\n\nfilter on the switch IP addresses and add the Session-Timeout (with a value between 10620 and 12600), the Idle-Timeout and Terminate-Action RADIUS attributes.\n\nEXAMPLE_ipad_by_name\n\nuse Fingerbank to target specific devices (Apple iPad) and add Cisco ACL(s) to them.\n\nEXAMPLE_eap-tls-preProcess\n\ncreate RADIUS attributes that will be used internally (like authentication rules). Add the TLS-Stripped-UserName RADIUS attribute in the request which can be used in the authentication/administrations rules.\n\nSeveral examples on how to use and define filters are included in /usr/local/pf/conf/radius_filters.conf.defaults.\n\nThis section presents the FreeRADIUS configuration steps. In some occasions, a RADIUS server is mandatory in order to give access to the network. For example, the usage of WPA2-Enterprise (Wireless 802.1X), MAC authentication and Wired 802.1X all require a RADIUS server to authenticate the users and the devices, and then to push the proper roles or VLAN attributes to the network equipment.\n\n16.9. RADIUS Proxy\n\nRADIUS Proxy is a way to proxy authentication and accounting requests to other radius server(s) based on the realm. Let’s say you want to authenticate users on an Active Directory where there is a NPS server running and you don’t want to join the PacketFence’s server to this domain or in the case you want to integrate PacketFence in a Passpoint setup then this section is for you.\n\nTo do that in PacketFence you need first to define the target RADIUS server(s) in Configuration → Policies and Access Control → Authentication Sources, and create the RADIUS source(s) (ACME1 ACME2). In the Source configuration, fill the mandatory fields and add the options to define the home_server in FreeRADIUS. (https://github.com/FreeRADIUS/freeradius-server/blob/v3.0.x/raddb/proxy.conf)\n\nPer example for the RADIUS Source ACME1:\n\n$src_ip is a way to dynamically use the correct source ip address of the system in case of multiples network interfaces.\n\nNext go in Configuration → Policies and Access Control → REALMS, and add a new realm.\n\n(type definition can be found here https://wiki.freeradius.org/features/Proxy)\n\nAuthorize from PacketFence will send the request to PacketFence to compute the role and access duration of the device.\n\nIn this case the easiest way to achieve that is to create a Authorization source (with rules), assign this source to a connection profile where you enabled \"Automatically register devices\" and where you defined a filter like Realm = acme.com .\n\nClick on Save and restart radiusd service.\n\n/usr/local/pf/bin/pfcmd service radiusd restart\n\nNow when a device connect with the username bob@acme.com then the authentication and accounting requests will be forwarded to one of the ACME RADIUS servers.\n\n16.9.1. RADIUS Proxy Advanced\n\nIn this section we will explain how to proxy RADIUS requests based on an advanced criteria.\n\nFirst you have to create RADIUS authentication source like above and create for example two realms \"to_NPS\" and \"to_ISE\" (associate the RADIUS sources in the REALMs)\n\nNext you have to enable the RADIUS filters in the packetfence.authorize and packetfence.post-proxy scope, to do that you have to go in _Configuration → System Configuration → RADIUS → General , and enable \"Use RADIUS filters in packetfence authorize\" and \"Use RADIUS filters in packetfence post-proxy\".\n\nAfter this step restart the packetfence-radiusd-auth service (systemctl restart packetfence-radiusd-auth.service).\n\nHere are some examples of what you can do with the RADIUS filters (the content of the radius_filters.conf file):\n\nProxy the RADIUS request to the to_NPS realm if the Calling-Station-Id or Colubris-AVPair attribute matches the regex ACME$\n\n[NPS]\n\nscopes=packetfence.authorize\n\ndescription=to_NPS\n\ncondition=radius_request.Called-Station-Id =~ \"ACME$\" || radius_request.Colubris-AVPair =~ \"ACME$\"\n\nstatus=disabled\n\nmerge_answer=yes\n\nanswer.0=control:Proxy-To-Realm = to_NPS\n\nProxy the RADIUS request the to_ISE realm if the Calling-Station-Id or Colubris-AVPair attribute contains ACME_Admin$ and add the attribute Realm with the value to_ISE in the RADIUS request (can be for example used as a filter in a connection profile)\n\n[ISE]\n\nmerge_answer=yes\n\nstatus=disabled\n\ncondition=contains(radius_request.Called-Station-Id, \"ACME_Admin\") || contains(radius_request.Colubris-AVPair, \"ACME_Admin\")\n\nscopes=packetfence.authorize,packetfence.post-proxy\n\ndescription=to_ISE\n\nanswer.0=control:Proxy-To-Realm = to_ISE\n\nanswer.1=request:Realm = to_ISE\n\nProxy the RADIUS request to the NULL realm if the Calling-Station-Id or Colubris-AVPair attribute matches the regex Guest$\n\n[NULL]\n\nscopes=packetfence.authorize\n\ndescription=to_null\n\nstatus=enabled\n\nmerge_answer=yes\n\ncondition=radius_request.Called-Station-Id =~ \"Guest$\" || radius_request.Colubris-AVPair =~ \"Guest$\"\n\nanswer.0=control:Proxy-To-Realm = NULL\n\nProxy the RADIUS request to the to_ISE realm if the Calling-Station-Id attribute matches the regex ACME$\n\n[NO_REALM]\n\nmerge_answer=no\n\nscopes=packetfence.authorize\n\nstatus=enabled\n\ncondition=radius_request.Called-Station-Id =~ \"ACME$\" && not_contains(radius_request.User-Name, \"@\") && not_contains(radius_request.User-Name, \"\\\\\")\n\ndescription=NO_REALM\n\nanswer.0=control:Proxy-To-Realm = to_ISE\n\nProxy the RADIUS request to the to_ISE realm if the device role is Employe and the status is registered\n\n[Employe]\n\nmerge_answer=no\n\nscopes=packetfence.authorize\n\nstatus=enabled\n\ncondition=node_info.category == \"Employe\" && node_info.status == \"reg\"\n\ndescription=Employe\n\nanswer.0=control:Proxy-To-Realm = to_ISE\n\nThose examples can be added in /usr/local/pf/conf/radius_filters.conf and after, perform a /usr/local/pf/bin/pfcmd configreload hard\n\n16.10. RADIUS EAP Profiles\n\nRADIUS EAP Profiles allow you to select a specific EAP profile in PacketFence based on the realm of the user.\n\nIn this EAP profile you can define: Certificates configuration. OCSP configuration EAP-Fast configuration TLS Configuration\n\nAnd link all these configuration together.\n\nFor example the realm ACME.COM needs to use the CA certificate from ACME CA and the other realms need to use the default one.\n\nTo do that go in Configuration → System Configuration → RADIUS → SSL Certificates and create a new profile. Next go in Configuration → System Configuration → RADIUS → TLS Profiles and create a new TLS profile and select the Certificate profile created just before. Then create the EAP profile in Configuration → System Configuration → RADIUS → EAP Profiles and create a new EAP profile and select the TLS profile created before (PEAP Profile for exemple)\n\nThe last thing to do is to link the EAP profile with your realm configuration, to achieve that go in Configuration → Policies and Access Control → Domains → REALMS and edit the ACME.COM realm (create it if it’s not already the case) then choose the EAP profile you created before in the EAP configuration parameter.\n\nRestart packetfence-radiusd-auth.service to generate the new RADIUS configuration. (systemctl restart packetfence-radiusd-auth.service)\n\nThe core of that integration resides in the ability for a PacketFence system, to interact with the Fingerbank upstream project, which then allow a daily basis fingerprints database update, sharing unknown data so that more complex algorithms can process that new data to integrate it in the global database, querying the global upstream database in the case of an unknown match and much more.\n\nSince the Fingerbank integration is now the \"de facto\" device profiling tool of PacketFence, it was a requirement to make it as simple as possible to configure and to use. From the moment a working PacketFence system is in place, Fingerbank is also ready to be used, but only in a \"local\" mode, which means, no interaction with the upstream Fingerbank project.\n\nStarting with version 10, PacketFence integrates network devices anomaly detection capabilities. This means that PacketFence can detect abnormal network activies from devices - that is, if they are talking to a compromised host, if they are deviating from their pristine network profile and more. These capabilities come from the integration of the Fingerbank technology. That is, the Fingerbank Cloud API is responsible for producing pristine network device profiles while the Fingerbank Collector, included in PacketFence, does consume the pristine profiles and does anomaly detection based on its templating engine.\n\n18.2. Integration with Security Events\n\nAfter creating a network behavior policy, you can use it from the Security Events module of PacketFence. From Configuration → Compliance → Security Events, click on New Security Event.\n\nYou can use your policy by first adding a new trigger. The network behavior policy can be selected after defining an internal event on the following attributes:\n\nfingerbank_blacklisted_ips_threshold_too_high - Fingerbank Collector detected traffic to blacklisted IPs\n\nfingerbank_blacklisted_ports - Fingerbank Collector detected traffic to blacklisted ports\n\nfingerbank_diff_score_too_low - Fingerbank Collector detected a network behavior that doesn’t match the known profile\n\nOnce done, the appropriate policy can be selected. If you want your entire network policy to be checked in the Security Events module, you must create three triggers - one with each of the attribute listed above together with your appropriate policy selected. You can look at the default security events Fingerbank profile anomaly (1300007) and Fingerbank detected blacklisted communication (1300008) for some examples on how to create customized security events to fulfill your requirements.\n\n19.4. Security Onion 2.3.10\n\nThis documentation is based on Security Onion v2.3. You can review its documentation at: https://docs.securityonion.net/en/2.3\n\nAll commands are done through the SSH CLI.\n\n19.4.1. Suricata configuration on SO\n\nFirst we need to modify the Suricata configuration to output the alerts into a fast.log file.\n\nsudo vim /opt/so/saltstack/default/salt/suricata/defaults.yaml\n\nLocate the outputs section and modify the fast options as follow:\n\noutputs:\n\n- fast:\n\nenabled: \"yes\"\n\nfilename: /nsm/fast.log\n\nappend: \"yes\"\n\n- eve-log:\n\nenabled: \"yes\"\n\nfiletype: regular\n\nfilename: /nsm/eve-%Y-%m-%d-%H:%M.json\n\nrotate-interval: hour\n\n#prefix: \"@cee: \"\n\n#identity: \"suricata\"\n\n#facility: local5\n\n#level: Info\n\n#redis:\n\n# server: 127.0.0.1\n\nReload the configuration on all minions with (it will take few minutes to apply):\n\nsudo salt '*' state.highstate\n\nYou can verify the configuration done under:\n\nsudo vim /opt/so/conf/suricata/suricata.yaml\n\nIf you want to disable some rules in suricata, you can use so-rule:\n\nso-rule disabled add 're:STUN'\n\nso-rule disabled add 2101411\n\nYou can also check this video to understand how to manage suricata rules:\n\nhttps://www.youtube.com/watch?v=1jEkFIEUCuI\n\n19.4.2. Rsyslog configuration on SO\n\nNow we need to send the alerts from the /nsm/fast.log to PacketFence.\n\nsudo vim /etc/rsyslog.d/SO.conf\n\nReplace the PACKETFENCE_MGMT_IP with your PacketFence management IP interface.\n\n$ModLoad imfile\n\n$InputFileName /nsm/suricata/fast.log\n\n$InputFileTag suricata\n\n$InputFileStateFile stat-suricata\n\n$InputFileSeverity error\n\n$InputFileFacility local3\n\n$InputRunFileMonitor\n\nlocal3.* @PACKETFENCE_MGMT_IP:514\n\nRestart Rsyslog:\n\nsudo systemctl restart rsyslog\n\n19.4.3. Configure PacketFence to process the syslog traffic\n\nOn the PacketFence server:\n\nModify rsyslog configuration to allow incoming UDP packets by uncommenting the following two lines in /etc/rsyslog.conf:\n\n$ModLoad imudp\n\n$UDPServerRun 514\n\nConfigure /etc/rsyslog.d/securityonion_ids.conf so it contains the following which will redirect Security Onion sguild log entries and stop further processing of current matched message:\n\nif $programname == 'suricata' then /usr/local/pf/var/securityonion_ids\n\n& ~\n\nMake sure the receiving alert pipe (FIFO) exists\n\nmkfifo /usr/local/pf/var/securityonion_ids\n\nRestart the rsyslog daemon\n\nservice rsyslog restart\n\nAt this point, Security Onion should be able to send detected alerts log entries to PacketFence.\n\nA configuration of a new 'syslog parser' as well as some security events are the only remaining steps to make full usage of the Security Onion IDS integration.\n\nConfiguration of a new 'syslog parser' should use the followings:\n\nType: suricata\n\nAlert pipe: the previously created alert pipe (FIFO) which is, in this case, /usr/local/pf/var/securityonion_ids\n\nConfiguration of a new security event can use the following trigger types:\n\nType: detect\n\nTriggers ID: The IDS triggered rule ID\n\nType: suricata_event\n\nTrigger ID: The rule class of the triggered IDS alert\n\n19.5. ERSPAN\n\nERSPAN permits to mirror a local port traffic (low bandwidth) to a remote IP, E.G: your Security Onion already deployed box. ERSPAN encapsulates port traffic into ERSPAN then GRE and send that traffic to one/multiple destination(s). ERSPAN is a Cisco technology which is available only on some platforms, including: Catalyst 6500, 7600, Nexus, and ASR 1000.\n\nOne way of accessing encapsulated traffic at the destination host is through a software called RCDCAP, which is a daemon that creates a virtual interface if not existing, on which both GRE and ERSPAN headers are decapsulated prior to the traffic being injected to the previous interface. Security Onion can then feed on that interface like it would on any other, and if the RCDCAP daemon dies, continue to listen to that interface even though decapsulated traffic won’t be available anymore.\n\nAssumptions for the example: The switch is at IP 172.16.0.1, the monitored switch port is GigabitEthernet0/10 and the Security Onion monitoring destination IP is 10.10.10.10 on eth2, eth2 ideally being a dedicated interface.\n\nOn Security Onion:\n\nEnable Inverse repository for Security Onion:\n\nsudo bash -c 'cat << EOL >/etc/apt/sources.list.d/securityonion-inverse.list deb http://inverse.ca/downloads/PacketFence/securityonion trusty trusty EOL' gpg --keyserver keyserver.ubuntu.com --recv 19CDA6A9810273C4 gpg --export --armor 19CDA6A9810273C4 | sudo apt-key add -\n\nInstall RCDCAP\n\nsudo apt-get update sudo apt-get install rcdcap\n\nModify network file (/etc/network/inferfaces) so that eth2 has an IP and a proper MTU. Decapsulated traffic will be injected on mon1. Make sure that the configuration is similar to the following:\n\nRerun Security Onion wizard and make sure to skip network configuration step. Make sure that mon1 is selected for monitoring purposes, note that eth2 doesn’t need to.\n\nsudo sosetup\n\nOn the Switch:\n\nmonitor session 10 type erspan-source\n\ndescription ERSPAN to 10.10.10.10\n\nsource interface GigabitEthernet0/10\n\ndestination\n\nerspan-id 10\n\nip address 10.10.10.10\n\norigin ip address 172.16.0.1\n\nno shutdown ! Default is shutdown\n\nPacketFence is able to update some firewall based on device information, like the IP address, the username connected on it. Look below for integration guides to see how you can configure your firewall with PacketFence. By default PacketFence uses the DHCP traffic to trigger an update on the firewall but it’s also possible to do it with the RADIUS accounting traffic.\n\nYou can use both methods at the same time but this will result in duplicate SSO requests if you receive the DHCP and accounting of the same device which can cause unexpected load on your firewall.\n\nPacketFence supports either Nessus and OpenVAS as a scanning engine for compliance checks. Since PacketFence v5.1 you are now able to create multiples scan engines configuration and assign them on specific captive portals. It mean per example that you are now able to active a scan for specific Operating System only on a specific SSID.\n\n22.1. PacketFence Apple, Android and Windows Wireless Provisioning\n\nProvisioners allow devices to automatically configure themselves to connect to the proper SSID (if applicable), use the proper authentication method (e.g. EAP-TLS) and trust the CA certificate and any certificate signed by it.\n\nApple devices such as iPhones, iPads, iPods and Mac OS X (10.7+) support wireless profile importation using a special XML file format (mobileconfig). Android is also able to support this feature by importing the wireless profile with the Android PacketFence Agent. In fact, installing such file on your Apple device will automatically configure the wireless settings for a given SSID. This feature is often used when the SSID is hidden, and you want to ease the configuration steps on the mobile device (because it is often painful to configure manually). In PacketFence, we are going further, we generate the profile according to the administrator’s preference and we pre-populate the file with the user’s credentials (without the password). The user simply needs to install its generated file and he will be able to use the new SSID.\n\nThe Windows agent will import and apply the provisioned profile so that the user only needs to enter his username and password.\n\n22.1.1. Configure the feature\n\nIf EAP-TLS provisioning is desired, you have to configure a PKI before going any further. Two sections exists to assist you: PacketFence PKI, which covers PacketFence’s implementation, or PacketFence MSPKI which covers Microsoft’s.\n\nFirst of all, you need to configure the SSID that your devices will use after they go through the authentication process.\n\nIn the administration interface, go in Configuration → Advanced Access Configuration → Provisioners. Then select 'android' / 'ios' / 'Windows' provisioner. Enter the SSID information and roles for which the provisioner applies. Repeat for all desired provisioners. Note that the default RADIUS certificate path is /usr/local/pf/raddb/certs/server.crt.\n\nAfter, you simply need to add the 'Android', 'iOS' and 'Windows' provisioners to your 'Connection Profile' configuration. If no connection profile is defined, configure the 'default' connection profile to use the provisioners created.\n\nIf you use two different connection profiles for the open and secure networks, make sure you configure the provisioners on both profiles.\n\nTo add a new provisioner for another class of devices to be supported, click on the Add Provisioner button, and fill out the form, choosing a different Provisioning ID per provisioner.\n\nRoles: this field defines which devices will be affected by the provisioning item. If empty, all devices for this class will be affected.\n\nSSID: this field defines which SSID will be configured on the device using the authentication profile.\n\nEAP-Type: this field defines the authentication method supported and should be set to EAP-TLS to integrate with the PacketFence PKI.\n\nSecurity type: this field should be set to WPA2-Entreprise to integrate with the PacketFence PKI.\n\nPKI Provider: this field should match the provider you configured in the PKI provider section.\n\nWe also advise you to configure a SSID for provisioning, for instance: OnBoarding-PF, open with MAC Authentication, pointing to PacketFence. Create a New Portal Profile, add a filter SSID with this SSID name, add the source you want the users to authenticate from and add your provisioners to this Portal Profile. From there, users who logged in will have to follow the captive portal instruction to get provided their certificate.\n\nAndroid specifications\n\nFor Android provisioning support, you must activate and adjust the passthroughs. You might need to adapt them depending on your geolocality.\n\nPlease refer to the 'Passthroughs' section of this guide if needed.\n\nIn the administation inferface, go in Configuration → Network Configuration → Networks → Fencing. Activate 'Passthrough' and make sure the following passthroughs domains are present:\n\n*.ggpht.com,*.googleusercontent.com,android.clients.google.com,*.googleapis.com,*.android.clients.google.com,*.gvt1.com,*.l.google.com,play.google.com,*.gstatic.com\n\nThen run the following commands so that passthroughs become effective:\n\n/usr/local/pf/bin/pfcmd configreload hard\n\n/usr/local/pf/bin/pfcmd service iptables restart\n\n/usr/local/pf/bin/pfcmd service pfdns restart\n\nNext, make sure you are using a valid SSL certificate on your captive portal since Android devices will only be able to be provisioned on a captive portal that uses valid HTTPS\n\nSome Android devices may use their cellular connection when running the PacketFence agent during the onboarding process. If that is the case, enable the airplane mode on the Android device and then only enable WiFi during the onboarding process.\n\niOS specifications\n\nMac OS X/iOS require the provisioning profile to be signed if you want to remove the untrusted warning when installing the profile. For more information, please refer to the PKI guides referred earlier in 'Configure the feature' above.\n\nOther Corporate Devices\n\nLet’s say that you now need to add some 'Linux computers' as 'corporate' devices.\n\nThose devices cannot be authenticated via Machine Authentication, so we will need to use EAP-TLS and provide those devices with a certificate.\n\nFirst of all make sure that your RADIUS certificate from the PacketFence server and the certificates that you will be provided are delivered from the same CA, else your authentication will not work. To enable EAP-TLS you will need to reconfigure the new RADIUS server certificate in the file conf/radiusd/eap.conf.\n\nWhile creating the RADIUS server certifcate make sure to have the Extended key usage: servAuth.\n\nUnder the section tls-config tls-common, search for `private_key_file', `certificate_file' and `ca_file'. Those should contain respectively the path of:\n\nthe private key for your PacketFence server,\n\nthe server certificate issued by your CA for your PacketFence server,\n\nthe public key of your CA.\n\nIf you have an OCSP capable PKI you can configure it in the section OCSP in the eap.conf file.\n\nLastely you will need to restart RADIUS to ensure the use of the new configuration and certificates. Please do the following:\n\n/usr/local/pf/bin/pfcmd configreload hard\n\n/usr/local/pf/bin/pfcmd service radiusd restart\n\nMake sure everything happens without errors.\n\nNow that your RADIUS is ready to handle EAP-TLS, configure your SSID connection profile on the corporate device using this method. Generate a client certificate for your device and install it on.\n\nPlease configure an EAPTLS source which can be found while adding a new sources under Configuration → Policies and Access Control → Authentication Sources New internal Source → EAPTLS, simply give it a name, a description and a catch-all rule. This will allow you to validate the authentication via EAP-TLS.\n\nYou can now create a new Portal Profile for EAP-TLS. Under the tab configuration, section Configuration → Policies and Access Control → Connection Profiles, New Connexion Profile and select as a filter the Sub Connection Type as EAP-TLS, add your source EAP-TLS. Check the box \"Automatically register devices\".\n\nYou now have a full flow working for your corporate devices.\n\nThe following is an example on how to configure an EAP-TLS connection for Windows/Android/Mac OS X/iOS\n\nMac OS X/iOS require the provisioning profile to be signed if you want to remove the untrusted warning when installing the profile. You need to sign it with a Certification Authority already trusted by the device such as e.g. VeriSign. Configuring this has to be done in the 'Signing' tab in the \"Apple devices\".\n\n22.1.2. Profile generation\n\nUpon registration, instead of showing the default release page, the user will be showing another version of the page saying that the wireless profile has been generated with a clickable link on it. To install the profile, Apple user owner simply need to click on that link, and follow the instructions on their device. Android user owner simply click to the link and will be forwarded to Google Play to install PacketFence agent. Simply launch the application and click to configure will create the secure SSID profile. It is that simple.\n\n25.3. Large Registration Network\n\nWhen using the inline or VLAN enforcement mode in large environments, you may have ARP table overflows. This happens when a lot of devices are on the same layer 2 segment. The symptoms are dhcpd not handing out IP addresses as it should or failing pings in the registration or quarantine VLANs. To identify if you have this problem look into your dmesg log and if you see Neighbour table overflow messages.\n\nIn order to mitigate the problem, you need to tweak kernel settings. In order to enlarge the ARP cache table on a live system, change the following in sysctl.conf :\n\nnet.ipv4.neigh.default.gc_thresh1 = 2048\n\nnet.ipv4.neigh.default.gc_thresh2 = 4096\n\nnet.ipv4.neigh.default.gc_thresh3 = 8192\n\nThen run the following as root to enable the changes:\n\n# sysctl -p\n\nThis means that the layer 2 garbage collection will kick in at 2048 MAC addresses exposed to the server with the most aggressive collection kicking in at 8192. This should be large enough for most but feel free to increase if necessary (at the cost of more kernel memory consumed). Another approach to solve this problem is to do more segmentation of your layer 2 networks.\n\n25.4. Active Directory fail-over\n\nThe authentication and authorization layer of PacketFence relies on 2 different components to connect to your Active Directory when doing 802.1x. For authentication, winbindd is used to perform NTLM authentication when doing EAP-PEAP MSCHAPv2. For authorization, LDAP connections are used to compute the role of the user. When using the captive portal or 802.1x authentication that doesn’t rely on NTLM authentication (EAP-TLS, EAP-TTLS, etc), then only LDAP is used.\n\nIf you have multiple Active Directory servers, you will want to apply the following set of best practices to your installation so that PacketFence is able to efficiently detect a failure of one of your AD server and switch to the next one. This is even more important if your PacketFence deployment points to Active Directory servers located in 2 different availability zones (i.e. 2 different datacenters).\n\n25.4.1. Authentication layer\n\nIn order to ensure the authentication layer will be able to fail-over efficiently, you will want to ensure that the 'Sticky DC' parameter of your domain configuration is set to *. Additionally, you will want to specify more than one DNS servers in that configuration. If you have more than one availability zone, then you will want to alternate the order of the servers. For example, if you have the following DNS servers in the first availability zone: 10.0.1.100,10.0.1.101 and the following in the second availability zone: 10.0.2.100,10.0.2.101, then the DNS servers list should be: 10.0.1.100,10.0.2.100,10.0.1.101,10.0.2.101 which will ensure the second DNS server to be queried is part of a different availability zone than the first one when winbindd queries DNS to find an available Active Directory domain controller.\n\nAdditional safety using monit\n\nSome versions of samba/winbindd may not failover correctly when one of the DC fails, even with the best practices above. For this reason, it is suggested to enable monit on your installation. This will automatically activate an additional check that will restart winbindd if authentication fails to the current DC. Upon restart, a new DC will be found and authentication will resume. To enable this mecanism, enable monit as described in this section of the document and it be added automatically.\n\n25.4.2. Authorization layer\n\nThe authorization layer of PacketFence uses the DNS servers setup on the operating system to resolve names. With that in mind, you will need to ensure that the servers in /etc/resolv.conf allow for proper fail-over should one of them fail. Similarly to the authentication layer, you will want to alternate the order of the servers based on the different availability zones you have. You will also want to have aggressive settings for fail-over to the next DNS server. For example, if you have the following DNS servers in the first availability zone: 10.0.1.100,10.0.1.101 and the following in the second availability zone: 10.0.2.100,10.0.2.101, then the resulting /etc/resolv.conf should be:\n\nsearch example.com options timeout:1 options retries:1 nameserver 10.0.1.100 nameserver 10.0.2.100 nameserver 10.0.1.101 nameserver 10.0.2.101\n\nOnce the DNS servers of the OS are setup to fail-over efficiently, you will need to review the configuration of the different Active Directory sources you have in PacketFence ('Configuration→Policies and access control→Authentication Sources'). In these sources, you will need to ensure that you are either using a DNS name that resolves to multiple servers of your Active Directory domain or that multiple IP addresses are specified to connect. If you are not sure about the robustness of your DNS layer, use multiple IP addresses.\n\n26.2. NTLM Authentication Caching\n\nThis section assumes that you already have an Active Directory domain configuration both in Configuration → Policies and Access Control → Domains → Active Directory Domains and Configuration → Policies and Access Control → Authentication Sources. If you don’t, you need to first configure those. Refer to the appropriate sections of this guide for details on how to configure those two components.\n\nThe cache requires minimally Windows Server 2008. Older versions will not work.\n\nWhen using NTLM authentication against an Active Directory for 802.1X EAP-PEAP connections, this can become a bottleneck when handling dozens of authentications per seconds.\n\nTo overcome this limitation, it is possible to use a Redis driven cache inside PacketFence to reduce the amount of authentications requiring an external NTLM authentication call. Should a user be in the cache, PacketFence will attempt to compare the 802.1X credentials with those. In the even that the validation fails, a call to ntlm_auth is made. In the event of a cache miss, an ntlm_auth call is made as well. This ensures that even if a user changes his password, his new password is immediately valid for 802.1X EAP-PEAP connections even if the cache contains the outdated entry.\n\nThe NTLM cache doesn’t cache clear text passwords, it caches the NT hash of the user password.\n\n26.2.1. PacketFence Configuration\n\nFirst of all, you will need to enable the NTLM caching globally by enabling 'NTLM Redis cache' in Configuration → System Configuration → Radius → General. You then need to restart radiusd-auth service.\n\nOnce that is done, you need to configure PacketFence to start caching the credentials. In order to do so, go in Configuration → Policies and Access Control → Domains → Active Directory Domains and select the domain you want to cache the credentials for.\n\nNext, go in the NTLM cache tab and:\n\nEnable 'NTLM cache'\n\nSelect the Active Directory authentication source that is tied to this domain.\n\nAdjust the 'Expiration'\n\nOnce done, click on Save to commit your changes.\n\nAfter that, you will need to enable the redis_ntlm_cache service which is used by PacketFence to store the cached credentials. In order to do so, go in Configuration → System Configuration → Main Configuration → Services and enable 'redis_ntlm_cache' and save the changes.\n\nNext, start the service via pfcmd:\n\n/usr/local/pf/bin/pfcmd service redis_ntlm_cache start\n\n26.2.2. Active Directory configuration\n\nIn order for PacketFence to be able to fetch the NTLM credentials from your Active Directory, it will need a user who has replication rights. The user to which you have to grant the rights, is the one that is configured in the authentication source that you associated in the 'NTLM cache' section of your domain.\n\nPlease refer to the following Microsoft KB entry to configure the replication rights (Replicating Directory Changes and Replicating Directory Changes All): https://support.microsoft.com/en-us/kb/303972\n\n26.3. SNMP Traps Limit\n\nPacketFence mainly rely on SNMP traps to communicate with equipment. Due to the fact that traps coming in from approved (configured) devices are all processed by the daemon, it is possible for someone who want to generate a certain load on the PacketFence server to force the generation of non-legitimate SNMP traps or a switch can randomly generate a high quantity of traps sent to PacketFence for an unknown reason.\n\nBecause of that, it is possible to limit the number of SNMP traps coming in from a single switch port and take action if that limit is reached. For example, if over 100 traps are received by PacketFence from the same switch port in a minute, the switch port will be shut and a notification email will be sent.\n\nHere’s the default config for the SNMP traps limit feature. As you can see, by default, PacketFence will log the abnormal activity after 100 traps from the same switch port in a minute. These configurations are in the conf/pf.conf file:\n\n[snmp_traps]\n\ntrap_limit = enabled\n\ntrap_limit_threshold = 100\n\ntrap_limit_action =\n\nAlternatively, you can configure these parameters from the PacketFence Web administrative GUI, in the Configuration → Network Configuration → SNMP section.\n\n27.1. Floating Network Devices\n\nPacketFence supports floating network devices. A Floating network device is a device for which PacketFence has a different behavior compared to a non-floating (regular) network device. This functionality was originally added to support mobile Access Points.\n\nCurrently only Cisco and Nortel switches configured with port-security are supported.\n\nA regular device is placed in the VLAN corresponding to its status (Registration, Isolation or Production VLAN) and is authorized on the port (port-security). This is not managed the same way as a floating network device.\n\nWhen a floating network device is connected, PacketFence will let/allow all the MAC addresses are connected to this device or appear on the port. If necessary the port is configured as multi-vlan (trunk) the PVID is set and VLANs are tagged on the port.\n\nWhen a floating network device is disconnected, PacketFence will reconfigure the port to what it was before the device connected.\n\n27.1.1. How it works\n\nConfiguration:\n\nfloating network devices have to be identified using their MAC address.\n\nlinkup/linkdown traps are not enabled on the switches, only port-security traps are enabled.\n\nWhen a port-security trap is received for a floating network device, the port configuration is changed with:\n\ndisable port-security\n\nset the PVID\n\neventually set the port as multi-vlan (trunk) and set the tagged VLANs\n\nenable linkdown traps\n\nWhen a linkdown trap is received on a port in which a floating network device was connected, the port configuration is changed with:\n\nenable port-security\n\ndisable linkdown traps\n\n27.1.2. Identification\n\nEach floating network device has to be identified. There are two ways to do this:\n\nby editing /usr/local/pf/conf/floating_network_device.conf\n\nthrough the Web GUI, in Configuration → Network Configuration → Floating Device\n\nAvailable settings:\n\nMAC Address\n\nMAC address of the floating device.\n\nIP Address\n\nIP address of the floating device (not required, informational only).\n\ntrunkPort\n\nShould the port be configured as a multi-vlan port (yes/no)?\n\npvid\n\nPort VLAN.\n\ntaggedVlan\n\nComma separated list of VLANs. If the port is a multi-vlan, these are the VLANs that are tagged on the port.\n\n27.3. Routed Networks\n\nPacketFence will need to be configured if the Isolation and Registration networks are not reachable locally (at layer 2) on the network, but instead routed to the PacketFence server. PacketFence is able to provide DHCP and DNS in these routed networks.\n\nFor dhcpd, ensure the clients DHCP requests are being forwarded correctly (IP Helpers in the remote routers) to the PacketFence server.\n\nConsidering the network architecture illustrated above, /usr/local/pf/conf/pf.conf will include the local Registration and Isolation interfaces only.\n\n[interface eth0.2]\n\nenforcement=vlan\n\nip=192.168.2.1\n\ntype=internal\n\nmask=255.255.255.0\n\n[interface eth0.3]\n\nenforcement=vlan\n\nip=192.168.3.1\n\ntype=internal\n\nmask=255.255.255.0\n\nPacketFence will not start unless at least one 'internal' interface is detected, thus local Registration and Isolation VLANs will need to be created even if they are not needed. The dhcpd daemon only listens on the 'internal' interfaces, therefore the remote Registration and Isolation subnets need to point their DHCP helper-address to those particular IP addresses.\n\nProvide the routed networks to PacketFence through the GUI in Configuration → Network Configuration → Networks or manually in /usr/local/pf/conf/networks.conf.\n\nExample /usr/local/pf/conf/networks.conf:\n\n[192.168.2.0]\n\nnetmask=255.255.255.0\n\ngateway=192.168.2.1\n\nnext_hop=\n\ndomain-name=registration.example.com\n\ndns=192.168.2.1\n\ndhcp_start=192.168.2.10\n\ndhcp_end=192.168.2.200\n\ndhcp_default_lease_time=300\n\ndhcp_max_lease_time=600\n\ntype=vlan-registration\n\nnamed=enabled\n\ndhcpd=enabled\n\n[192.168.3.0]\n\nnetmask=255.255.255.0\n\ngateway=192.168.3.1\n\nnext_hop=\n\ndomain-name=isolation.example.com\n\ndns=192.168.3.1\n\ndhcp_start=192.168.3.10\n\ndhcp_end=192.168.3.200\n\ndhcp_default_lease_time=300\n\ndhcp_max_lease_time=600\n\ntype=vlan-isolation\n\nnamed=enabled\n\ndhcpd=enabled\n\n[192.168.20.0]\n\nnetmask=255.255.255.0\n\ngateway=192.168.20.254\n\nnext_hop=192.168.2.254\n\ndomain-name=registration.example.com\n\ndns=192.168.2.1\n\ndhcp_start=192.168.20.10\n\ndhcp_end=192.168.20.200\n\ndhcp_default_lease_time=300\n\ndhcp_max_lease_time=600\n\ntype=vlan-registration\n\nnamed=enabled\n\ndhcpd=enabled\n\n[192.168.30.0]\n\nnetmask=255.255.255.0\n\ngateway=192.168.30.254\n\nnext_hop=192.168.3.254\n\ndomain-name=isolation.example.com\n\ndns=192.168.3.1\n\ndhcp_start=192.168.30.10\n\ndhcp_end=192.168.30.200\n\ndhcp_default_lease_time=300\n\ndhcp_max_lease_time=600\n\ntype=vlan-isolation\n\nnamed=enabled\n\ndhcpd=enabled\n\nRestart packetfence-keepalived to apply the changes:\n\n/usr/local/pf/bin/pfcmd service keepalived restart\n\nDHCP clients on the Registration and Isolation networks receive the PacketFence server IP as their DNS server in their lease, then DNS responses are spoofed to force clients via the portal. However, clients could manually configure their DNS settings to escape the portal. To prevent this, apply an ACL on the access router nearest to the clients, permitting access only to the PacketFence server and local DHCP broadcast traffic.\n\nExample for VLAN 20 remote Registration network:\n\nip access-list extended PF_REGISTRATION\n\npermit ip any host 192.168.2.1\n\npermit udp any any eq 67\n\ndeny ip any any log\n\ninterface vlan 20\n\nip address 192.168.20.254 255.255.255.0\n\nip helper-address 192.168.2.1\n\nip access-group PF_REGISTRATION in\n\nIf the edge switches support 'vlan-isolation' the ACL can also be applied there. This has the advantage of preventing machines in Isolation from attacking each other.\n\n28.5. Monit\n\nmonit manages and monitors processes, files, directories and filesystems on a Unix system. Monit conducts automatic maintenance and repair, and can execute meaningful causal-actions in error situations. E.g. Monit can start a process if it stops running, restart a process if it does not respond and stop a process if it uses too much resources.\n\nFor further reference the monit documentation is available at: https://mmonit.com/monit/documentation/monit.html\n\nThe monit configuration path is different between EL and Debian systems:\n\nEL based systems:\n\nMONIT_PATH=/etc/monit.d\n\nDebian based systems:\n\nMONIT_PATH=/etc/monit/conf.d\n\nTo simplify further documentation, $MONIT_PATH will be used as a reference to these paths herein.\n\nStarting from PacketFence 11.1, the Monit configuration is directly managed by PacketFence.\n\nTo enable Monit, configure the following settings in Configuration → System Configuration → Main Configuration → Monit:\n\nStatus: enabled\n\nAlert Email To: The email address(es) to send the alerts. If left empty, the default email addresses defined in Configuration → System Configuration → Main Configuration → Alerting will be used.\n\nConfiguration: Enter the configurations for monit to use. If left empty, the defaults should be fine unless port-security enforcement or active/passive cluster is used.\n\nMailserver: Specify the mailserver to use. This can only be used for unauthenticated relaying. If using localhost, ensure postfix is installed and properly configured. If left empty, the SMTP server settings in Configuration → System Configuration → Main Configuration → Alerting are used. Note that monit doesn’t support StartTLS so 'none' or 'ssl' must be configured for SMTP encryption in the alerting configuration. If StartTLS is required, configure postfix for relaying and use 'localhost' as the Mailserver in the monit configuration.\n\nRestart the monit service:\n\nsystemctl restart monit\n\n28.5.1. Monitoring scripts\n\nDigitally signed scripts are included in the monit configuration which are fetched from http://inverse.ca/downloads/PacketFence/monitoring-scripts/v1/. These scripts will be updated and run at regular intervals to ensure the environment follows the best practices defined by Inverse and to email alerts of any important changes that may need to be performed.\n\nRun manually to help with troubleshooting:\n\n/usr/local/pf/addons/monit/monitoring-scripts/update.sh /usr/local/pf/addons/monit/monitoring-scripts/run-all.sh\n\nIgnoring some checks\n\nTo ignore one of the checks that are being performed, add its script name in $MONIT_PATH/packetfence/local-ignores.\n\nFor example, to ignore the script that generated the following output add /usr/local/pf/var/monitoring-scripts/.chec"
    }
}