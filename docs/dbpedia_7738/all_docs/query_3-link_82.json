{
    "id": "dbpedia_7738_3",
    "rank": 82,
    "data": {
        "url": "https://0xdf.gitlab.io/",
        "read_more_link": "",
        "language": "en",
        "title": "0xdf hacks stuff",
        "top_image": "https://0xdf.gitlab.io/assets/icons/favicon-32x32.png",
        "meta_img": "https://0xdf.gitlab.io/assets/icons/favicon-32x32.png",
        "images": [
            "https://0xdf.gitlab.io/icons/youtube.png",
            "https://0xdf.gitlab.io/icons/gitlab.png",
            "https://0xdf.gitlab.io/icons/rss.png",
            "https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg",
            "https://0xdf.gitlab.io/img/formulax-cover.png",
            "https://0xdf.gitlab.io/img/usage-cover.png",
            "https://0xdf.gitlab.io/img/iclean-cover.png",
            "https://0xdf.gitlab.io/img/wifinetictwo-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-campfire-2.png",
            "https://0xdf.gitlab.io/icons/sherlock-tracer.png",
            "https://0xdf.gitlab.io/img/headless-cover.png",
            "https://0xdf.gitlab.io/img/corporate-cover.png",
            "https://0xdf.gitlab.io/img/perfection-cover.png",
            "https://0xdf.gitlab.io/img/jab-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-campfire-1.png",
            "https://0xdf.gitlab.io/img/office-cover.png",
            "https://0xdf.gitlab.io/img/crafty-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-noted.png",
            "https://0xdf.gitlab.io/img/pov-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-constellation.png",
            "https://0xdf.gitlab.io/img/analysis-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-nubilum-1.png",
            "https://0xdf.gitlab.io/img/bizness-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-bumblebee.png",
            "https://0xdf.gitlab.io/img/ouija-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-logjammer.png",
            "https://0xdf.gitlab.io/img/monitored-cover.png",
            "https://0xdf.gitlab.io/img/einladen-malware-cover.png",
            "https://0xdf.gitlab.io/img/gftrace-cover.png",
            "https://0xdf.gitlab.io/img/napper-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-einladen.png",
            "https://0xdf.gitlab.io/img/devvortex-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-meerkat.png",
            "https://0xdf.gitlab.io/img/surveillance-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-subatomic.png",
            "https://0xdf.gitlab.io/icons/sherlock-bft.png",
            "https://0xdf.gitlab.io/img/hospital-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-unit42.png",
            "https://0xdf.gitlab.io/icons/sherlock-brutus.png",
            "https://0xdf.gitlab.io/img/codify-cover.png",
            "https://0xdf.gitlab.io/img/rebound-cover.png",
            "https://0xdf.gitlab.io/img/analytics-cover.png",
            "https://0xdf.gitlab.io/img/smb_cheat-cover.png",
            "https://0xdf.gitlab.io/img/manager-cover.png",
            "https://0xdf.gitlab.io/img/appsanity-cover.png",
            "https://0xdf.gitlab.io/img/cozyhosting-cover.png",
            "https://0xdf.gitlab.io/img/visual-cover.png",
            "https://0xdf.gitlab.io/img/drive-cover.png",
            "https://0xdf.gitlab.io/img/builder-cover.png",
            "https://0xdf.gitlab.io/img/keeper-cover.png",
            "https://0xdf.gitlab.io/img/registrytwo-cover.png",
            "https://0xdf.gitlab.io/img/clicker-cover.png",
            "https://0xdf.gitlab.io/img/bookworm-cover.png",
            "https://0xdf.gitlab.io/img/zipping-cover.png",
            "https://0xdf.gitlab.io/img/sau-cover.png",
            "https://0xdf.gitlab.io/img/hh23-cover.png",
            "https://0xdf.gitlab.io/img/hackvent2023-easy-cover.png",
            "https://0xdf.gitlab.io/img/hackvent2023-medium-cover.png",
            "https://0xdf.gitlab.io/img/hackvent2023-hard-cover.png",
            "https://0xdf.gitlab.io/img/hackvent2023-leet-cover.png",
            "https://0xdf.gitlab.io/img/coder-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-tick-tock.png",
            "https://0xdf.gitlab.io/img/authority-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-knock-knock.png",
            "https://0xdf.gitlab.io/img/cybermonday-cover.png",
            "https://0xdf.gitlab.io/img/pilgrimage-cover.png",
            "https://0xdf.gitlab.io/img/sandworm-cover.png",
            "https://0xdf.gitlab.io/icons/sherlock-i-like-to.png",
            "https://0xdf.gitlab.io/img/download-cover.png",
            "https://0xdf.gitlab.io/img/broker-cover.png",
            "https://0xdf.gitlab.io/img/topology-cover.png",
            "https://0xdf.gitlab.io/img/gofer-cover.png",
            "https://0xdf.gitlab.io/img/jupiter-cover.png",
            "https://0xdf.gitlab.io/img/intentions-cover.png",
            "https://0xdf.gitlab.io/img/looney-tunables-cover.png",
            "https://0xdf.gitlab.io/img/pc-cover.png",
            "https://0xdf.gitlab.io/img/format-cover.png",
            "https://0xdf.gitlab.io/img/aero-cover.png",
            "https://0xdf.gitlab.io/img/snoopy-cover.png",
            "https://0xdf.gitlab.io/img/wifinetic-cover.png",
            "https://0xdf.gitlab.io/img/pikatwoo-cover.png",
            "https://0xdf.gitlab.io/img/monitorstwo-cover.png",
            "https://0xdf.gitlab.io/img/onlyforyou-cover.png",
            "https://0xdf.gitlab.io/img/mailroom-cover.png",
            "https://0xdf.gitlab.io/img/busqueda-cover.png",
            "https://0xdf.gitlab.io/img/agile-cover.png",
            "https://0xdf.gitlab.io/img/cerberus-cover.png",
            "https://0xdf.gitlab.io/img/derailed-cover.png",
            "https://0xdf.gitlab.io/img/socket-cover.png",
            "https://0xdf.gitlab.io/img/inject-cover.png",
            "https://0xdf.gitlab.io/img/pollution-cover.png",
            "https://0xdf.gitlab.io/img/stocker-cover.png",
            "https://0xdf.gitlab.io/img/escape-cover.png",
            "https://0xdf.gitlab.io/img/soccer-cover.png",
            "https://0xdf.gitlab.io/img/twomillion-cover.png",
            "https://0xdf.gitlab.io/img/bagel-cover.png",
            "https://0xdf.gitlab.io/img/absolute-cover.png",
            "https://0xdf.gitlab.io/img/precious-cover.png",
            "https://0xdf.gitlab.io/img/interface-cover.png",
            "https://0xdf.gitlab.io/img/flight-cover.png",
            "https://0xdf.gitlab.io/img/metatwo-cover.png",
            "https://0xdf.gitlab.io/img/investigation-cover.png",
            "https://0xdf.gitlab.io/img/encoding-cover.png",
            "https://0xdf.gitlab.io/img/broscience-cover.png",
            "https://0xdf.gitlab.io/img/sekhmet-cover.png",
            "https://0xdfimages.gitlab.io/img/vessel-cover.png",
            "https://0xdfimages.gitlab.io/img/extension-cover.png",
            "https://0xdfimages.gitlab.io/img/mentor-cover.png",
            "https://0xdfimages.gitlab.io/img/forgot-cover.png",
            "https://0xdfimages.gitlab.io/img/awkward-cover.png",
            "https://0xdfimages.gitlab.io/img/rainyday-cover.png",
            "https://0xdfimages.gitlab.io/img/photobomb-cover.png",
            "https://0xdfimages.gitlab.io/img/response-cover.png",
            "https://0xdfimages.gitlab.io/img/ambassador-cover.png",
            "https://0xdfimages.gitlab.io/img/updown-cover.png",
            "https://0xdfimages.gitlab.io/img/shoppy-cover.png",
            "https://0xdfimages.gitlab.io/img/health-cover.png",
            "https://0xdfimages.gitlab.io/img/hh22-cover.png",
            "https://0xdfimages.gitlab.io/img/hv22-hard-cover.png",
            "https://0xdfimages.gitlab.io/img/hv22-med-cover.png",
            "https://0xdfimages.gitlab.io/img/hv22-easy-cover.png",
            "https://0xdfimages.gitlab.io/img/support-cover.png",
            "https://0xdfimages.gitlab.io/img/outdated-cover.png",
            "https://0xdfimages.gitlab.io/img/carpediem-cover.png",
            "https://0xdfimages.gitlab.io/img/redpanda-cover.png",
            "https://0xdfimages.gitlab.io/img/squashed-cover.png",
            "https://0xdfimages.gitlab.io/img/hathor-cover.png",
            "https://0xdfimages.gitlab.io/img/shared-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-notnamed-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-nurgetraumt-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-encryptor-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-backdoor-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-anode-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-alamode-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-t8-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-darnmice-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-magic8ball-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-pixelpoker-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2022-flaredle-cover.png",
            "https://0xdfimages.gitlab.io/img/moderators-cover.png",
            "https://0xdfimages.gitlab.io/img/trick-cover.png",
            "https://0xdfimages.gitlab.io/img/faculty-cover.png",
            "https://0xdfimages.gitlab.io/img/perspective-cover.png",
            "https://0xdfimages.gitlab.io/img/opensource-cover.png",
            "https://0xdfimages.gitlab.io/img/scrambled-cover.png",
            "https://0xdfimages.gitlab.io/img/noter-unintended-cover.png",
            "https://0xdfimages.gitlab.io/img/seventeen-cover.png",
            "https://0xdfimages.gitlab.io/img/streamio-cover.png",
            "https://0xdfimages.gitlab.io/img/scanned-cover.png",
            "https://0xdfimages.gitlab.io/img/noter-cover.png",
            "https://0xdfimages.gitlab.io/img/talkative-cover.png",
            "https://0xdfimages.gitlab.io/img/timelapse-cover.png",
            "https://0xdfimages.gitlab.io/img/retired-cover.png",
            "https://0xdfimages.gitlab.io/img/overgraph-cover.png",
            "https://0xdfimages.gitlab.io/img/late-cover.png",
            "https://0xdfimages.gitlab.io/img/catch-cover.png",
            "https://0xdfimages.gitlab.io/img/acute-cover.png",
            "https://0xdfimages.gitlab.io/img/routerspace-cover.png",
            "https://0xdfimages.gitlab.io/img/undetected-cover.png",
            "https://0xdfimages.gitlab.io/img/phoenix-cover.png",
            "https://0xdfimages.gitlab.io/img/paper-cover.png",
            "https://0xdfimages.gitlab.io/img/meta-cover.png",
            "https://0xdfimages.gitlab.io/img/timing-cover.png",
            "https://0xdfimages.gitlab.io/img/setuid-rabbit-cover.png",
            "https://0xdfimages.gitlab.io/img/admirertoo-cover.png",
            "https://0xdfimages.gitlab.io/img/jail-cover.png",
            "https://0xdfimages.gitlab.io/img/pandora-cover.png",
            "https://0xdfimages.gitlab.io/img/mirai-cover.png",
            "https://0xdfimages.gitlab.io/img/brainfuck-cover.png",
            "https://0xdfimages.gitlab.io/img/fingerprint-cover.png",
            "https://0xdfimages.gitlab.io/img/fulcrum-cover.png",
            "https://0xdfimages.gitlab.io/img/unicode-cover.png",
            "https://0xdfimages.gitlab.io/img/return-cover.png",
            "https://0xdfimages.gitlab.io/img/antique-cover.png",
            "https://0xdfimages.gitlab.io/img/backendtwo-cover.png",
            "https://0xdfimages.gitlab.io/img/search-cover.png",
            "https://0xdfimages.gitlab.io/img/rabbit-cover.png",
            "https://0xdfimages.gitlab.io/img/fighter-cover.png",
            "https://0xdfimages.gitlab.io/img/backdoor-scripts-cover.png",
            "https://0xdfimages.gitlab.io/img/backdoor-cover.png",
            "https://0xdfimages.gitlab.io/img/ariekei-cover.png",
            "https://0xdfimages.gitlab.io/img/toby-cover.png",
            "https://0xdfimages.gitlab.io/img/jeeves-cover.png",
            "https://0xdfimages.gitlab.io/img/backend-cover.png",
            "https://0xdfimages.gitlab.io/img/tally-cover.png",
            "https://0xdfimages.gitlab.io/img/overflow-cover.png",
            "https://0xdfimages.gitlab.io/img/minion-cover.png",
            "https://0xdfimages.gitlab.io/img/inception-cover.png",
            "https://0xdfimages.gitlab.io/img/shibboleth-cover.png",
            "https://0xdfimages.gitlab.io/img/altered-cover.png",
            "https://0xdfimages.gitlab.io/img/secret-cover.png",
            "https://0xdfimages.gitlab.io/img/stacked-cover.png",
            "https://0xdfimages.gitlab.io/img/ransom-cover.png",
            "https://0xdfimages.gitlab.io/img/devzat-cover.png",
            "https://0xdfimages.gitlab.io/img/epsilon-cover.png",
            "https://0xdfimages.gitlab.io/img/hancliffe-cover.png",
            "https://0xdfimages.gitlab.io/img/object-cover.png",
            "https://0xdfimages.gitlab.io/img/driver-cover.png",
            "https://0xdfimages.gitlab.io/img/goodgames-cover.png",
            "https://0xdfimages.gitlab.io/img/bolt-cover.png",
            "https://0xdfimages.gitlab.io/img/steamcloud-cover.png",
            "https://0xdfimages.gitlab.io/img/earlyaccess-cover.png",
            "https://0xdfimages.gitlab.io/img/flustered-cover.png",
            "https://0xdfimages.gitlab.io/img/cactuscon-ctf-2022-cover.png",
            "https://0xdfimages.gitlab.io/img/horizontall-cover.png",
            "https://0xdfimages.gitlab.io/img/pressed-cover.png",
            "https://0xdfimages.gitlab.io/img/anubis-cover.png",
            "https://0xdfimages.gitlab.io/img/forge-cover.png",
            "https://0xdfimages.gitlab.io/img/developer-cover.png",
            "https://0xdfimages.gitlab.io/img/nodeblog-cover.png",
            "https://0xdfimages.gitlab.io/img/previse-cover.png",
            "https://0xdfimages.gitlab.io/img/hh21-cover.png",
            "https://0xdfimages.gitlab.io/img/hv21-cover.png",
            "https://0xdfimages.gitlab.io/img/logforge-cover.png",
            "https://0xdfimages.gitlab.io/img/static-cover.png",
            "https://0xdfimages.gitlab.io/img/writer-cover.png",
            "https://0xdfimages.gitlab.io/img/pikaboo-cover.png",
            "https://0xdfimages.gitlab.io/img/intelligence-cover.png",
            "https://0xdfimages.gitlab.io/img/union-cover.png",
            "https://0xdfimages.gitlab.io/img/bountyhunter-cover.png",
            "https://0xdfimages.gitlab.io/img/runcode.png",
            "https://0xdfimages.gitlab.io/img/seal-cover.png",
            "https://0xdfimages.gitlab.io/img/pivotapi-more-cover.png",
            "https://0xdfimages.gitlab.io/img/pivotapi-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-petthekitty-cover.png",
            "https://0xdfimages.gitlab.io/img/nunchucks-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-known-cover.png",
            "https://0xdfimages.gitlab.io/img/explore-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-myaquaticlife-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-beelogin-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-flarelinuxvm-cover.png",
            "https://0xdfimages.gitlab.io/img/spooktrol-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-spel-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-antioch-cover.png",
            "https://0xdfimages.gitlab.io/img/spider-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-wizardcult-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2021-credchecker-cover.png",
            "https://0xdfimages.gitlab.io/img/dynstr-cover.png",
            "https://0xdfimages.gitlab.io/img/monitors-cover.png",
            "https://0xdfimages.gitlab.io/img/cap-cover.png",
            "https://0xdfimages.gitlab.io/img/jarmis-cover.png",
            "https://0xdfimages.gitlab.io/img/pit-cover.png",
            "https://0xdfimages.gitlab.io/img/sink-cover.png",
            "https://0xdfimages.gitlab.io/img/validation-cover.png",
            "https://0xdfimages.gitlab.io/img/schooled-cover.png",
            "https://0xdfimages.gitlab.io/img/unobtainium-cover.png",
            "https://0xdfimages.gitlab.io/img/gobox-cover.png",
            "https://0xdfimages.gitlab.io/img/knife-cover.png",
            "https://0xdfimages.gitlab.io/img/image-20210827040428323.png",
            "https://0xdfimages.gitlab.io/img/proper-cover.png",
            "https://0xdfimages.gitlab.io/img/crossfittwo-cover.png",
            "https://0xdfimages.gitlab.io/img/love-cover.png",
            "https://0xdfimages.gitlab.io/img/thenotebook-cover.png",
            "https://0xdfimages.gitlab.io/img/armageddon-cover.png",
            "https://0xdfimages.gitlab.io/img/breadcrumbs-cover.png",
            "https://0xdfimages.gitlab.io/img/atom-cover.png",
            "https://0xdfimages.gitlab.io/img/printnightmare-cover.png",
            "https://0xdfimages.gitlab.io/img/ophiuchi-cover.png",
            "https://0xdfimages.gitlab.io/img/spectra-cover.png",
            "https://0xdfimages.gitlab.io/img/tentacle-cover.png",
            "https://0xdfimages.gitlab.io/img/enterprise-cover.png",
            "https://0xdfimages.gitlab.io/img/tenet-cover.png",
            "https://0xdfimages.gitlab.io/img/node-cover.png",
            "https://0xdfimages.gitlab.io/img/scriptkiddie-cover.png",
            "https://0xdfimages.gitlab.io/img/cereal-unintended-cover.png",
            "https://0xdfimages.gitlab.io/img/cereal-cover.png",
            "https://0xdfimages.gitlab.io/img/shocker-cover.png",
            "https://0xdfimages.gitlab.io/img/delivery-cover.png",
            "https://0xdfimages.gitlab.io/img/kotarak-cover.png",
            "https://0xdfimages.gitlab.io/img/ready-cgroups-cover.png",
            "https://0xdfimages.gitlab.io/img/ready-cover.png",
            "https://0xdfimages.gitlab.io/img/blue-cover.png",
            "https://0xdfimages.gitlab.io/img/attended-cover.png",
            "https://0xdfimages.gitlab.io/img/vms-cover.png",
            "https://0xdfimages.gitlab.io/img/bucket-more-cover.png",
            "https://0xdfimages.gitlab.io/img/sharp-cover.png",
            "https://0xdfimages.gitlab.io/img/toolbox-cover.png",
            "https://0xdfimages.gitlab.io/img/bucket-cover.png",
            "https://0xdfimages.gitlab.io/img/laboratory-cover.png",
            "https://0xdfimages.gitlab.io/img/apt-cover.png",
            "https://0xdfimages.gitlab.io/img/time-cover.png",
            "https://0xdfimages.gitlab.io/img/luanne-cover.png",
            "https://0xdfimages.gitlab.io/img/crossfit-cover.png",
            "https://0xdfimages.gitlab.io/img/optimum-cover.png",
            "https://0xdfimages.gitlab.io/img/reel2-more-cover.png",
            "https://0xdfimages.gitlab.io/img/reel2-cover.png",
            "https://0xdfimages.gitlab.io/img/sense-cover.png",
            "https://0xdfimages.gitlab.io/img/passage-cover.png",
            "https://0xdfimages.gitlab.io/img/sneaky-cover.png",
            "https://0xdfimages.gitlab.io/img/academy-cover.png",
            "https://0xdfimages.gitlab.io/img/beep-cover.png",
            "https://0xdfimages.gitlab.io/img/feline-cover.png",
            "https://0xdfimages.gitlab.io/img/charon-cover.png",
            "https://0xdfimages.gitlab.io/img/jewel-cover.png",
            "https://0xdfimages.gitlab.io/img/apocalyst-cover.png",
            "https://0xdfimages.gitlab.io/img/doctor-cover.png",
            "https://0xdfimages.gitlab.io/img/europa-cover.png",
            "https://0xdfimages.gitlab.io/img/worker-cover.png",
            "https://0xdfimages.gitlab.io/img/compromised-cover.png",
            "https://0xdfimages.gitlab.io/img/ropetwo-cover.png",
            "https://0xdfimages.gitlab.io/img/hh20-cover.png",
            "https://0xdfimages.gitlab.io/img/omni-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2020-leet-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2020-hard-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2020-medium-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2020-easy-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-25-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-24-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-23-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-22-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-21-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-20-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-19-cover.png",
            "https://0xdfimages.gitlab.io/img/laser-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-18-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-17-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-16-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-15-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-14-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-13-cover.png",
            "https://0xdfimages.gitlab.io/img/openkeys-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-12-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-11-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-10-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-9-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-8-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-7-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-6-cover.png",
            "https://0xdfimages.gitlab.io/img/unbalanced-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-5-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-4-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-3-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-2-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2020-1-cover.png",
            "https://0xdfimages.gitlab.io/img/sneakymailer-cover.png",
            "https://0xdfimages.gitlab.io/img/buff-cover.png",
            "https://0xdfimages.gitlab.io/img/intense-cover.png",
            "https://0xdfimages.gitlab.io/img/tabby-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-break-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-crackinstaller-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-aardvark-cover.png",
            "https://0xdfimages.gitlab.io/img/fuse-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-recrowd-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-codeit-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-tkapp-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-report-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-wednesday-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-garbage-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2020-fidler-cover.png",
            "https://0xdfimages.gitlab.io/img/dyplesher-cover.png",
            "https://0xdfimages.gitlab.io/img/blunder-cover.png",
            "https://0xdfimages.gitlab.io/img/cache-cover.png",
            "https://0xdfimages.gitlab.io/img/blackfield-cover.png",
            "https://0xdfimages.gitlab.io/img/admirer-cover.png",
            "https://0xdfimages.gitlab.io/img/multimaster-cover.png",
            "https://0xdfimages.gitlab.io/img/zero-cover.png",
            "https://0xdfimages.gitlab.io/img/travel-cover.png",
            "https://0xdfimages.gitlab.io/img/haircut-cover.png",
            "https://0xdfimages.gitlab.io/img/roguepotato-remote-cover.png",
            "https://0xdfimages.gitlab.io/img/remote-cover.png",
            "https://0xdfimages.gitlab.io/img/mantis-cover.png",
            "https://0xdfimages.gitlab.io/img/quick-cover.png",
            "https://0xdfimages.gitlab.io/img/calamity-cover.png",
            "https://0xdfimages.gitlab.io/img/magic-cover.png",
            "https://0xdfimages.gitlab.io/img/traceback-cover.png",
            "https://0xdfimages.gitlab.io/img/joker-cover.png",
            "https://0xdfimages.gitlab.io/img/pipes-cover.png",
            "https://0xdfimages.gitlab.io/img/fatty-cover.png",
            "https://0xdfimages.gitlab.io/img/jar-cover.png",
            "https://0xdfimages.gitlab.io/img/pwnbox-cover.png",
            "https://0xdfimages.gitlab.io/img/oouch-cover.png",
            "https://0xdfimages.gitlab.io/img/lazy-cover.png",
            "https://0xdfimages.gitlab.io/img/cascade-cover.png",
            "https://0xdfimages.gitlab.io/img/shrek-cover.png",
            "https://0xdfimages.gitlab.io/img/sauna-cover.png",
            "https://0xdfimages.gitlab.io/img/tenten-cover.png",
            "https://0xdfimages.gitlab.io/img/book-cover.png",
            "https://0xdfimages.gitlab.io/img/bank-cover.png",
            "https://0xdfimages.gitlab.io/img/forwardslash-cover.png",
            "https://0xdfimages.gitlab.io/img/blocky-cover.png",
            "https://0xdfimages.gitlab.io/img/playertwo-cover.png",
            "https://0xdfimages.gitlab.io/img/popcorn-cover.png",
            "https://0xdfimages.gitlab.io/img/servmon-cover.png",
            "https://0xdfimages.gitlab.io/img/endgame-xen-cover.png",
            "https://0xdfimages.gitlab.io/img/monteverde-cover.jpg",
            "https://0xdfimages.gitlab.io/img/endgame-poo-cover.png",
            "https://0xdfimages.gitlab.io/img/nest-cover.png",
            "https://0xdfimages.gitlab.io/img/resolute-br-cover.png",
            "https://0xdfimages.gitlab.io/img/resolute-cover.png",
            "https://0xdfimages.gitlab.io/img/grandpa-cover.png",
            "https://0xdfimages.gitlab.io/img/rope-cover.png",
            "https://0xdfimages.gitlab.io/img/arctic-cover.png",
            "https://0xdfimages.gitlab.io/img/patents-cover.png",
            "https://0xdfimages.gitlab.io/img/ngrok-cover.png",
            "https://0xdfimages.gitlab.io/img/obscurity-cover.jpg",
            "https://0xdfimages.gitlab.io/img/covid19ctf-cover.png",
            "https://0xdfimages.gitlab.io/img/openadmin-cover.png",
            "https://0xdfimages.gitlab.io/img/solidstate-cover.png",
            "https://0xdfimages.gitlab.io/img/control-cover.png",
            "https://0xdfimages.gitlab.io/img/nineveh-cover.png",
            "https://0xdfimages.gitlab.io/img/mango-cover.png",
            "https://0xdfimages.gitlab.io/img/cronos-cover.png",
            "https://0xdfimages.gitlab.io/img/traverxec-cover.png",
            "https://0xdfimages.gitlab.io/img/sniper-br-cover.png",
            "https://0xdfimages.gitlab.io/img/lame-more-cover.png",
            "https://0xdfimages.gitlab.io/img/lame-cover.png",
            "https://0xdfimages.gitlab.io/img/registry-cover.png",
            "https://0xdfimages.gitlab.io/img/sniper-cover.png",
            "https://0xdf.gitlab.io/icons/Linux.png",
            "https://0xdfimages.gitlab.io/img/forest-cover.png",
            "https://0xdfimages.gitlab.io/img/postman-cover.png",
            "https://0xdfimages.gitlab.io/img/bankrobber-cover.png",
            "https://0xdfimages.gitlab.io/img/scavenger-cover.png",
            "https://0xdfimages.gitlab.io/img/zetta-cover.png",
            "https://0xdfimages.gitlab.io/img/json-cover.png",
            "https://0xdfimages.gitlab.io/img/re-cover.png",
            "https://0xdfimages.gitlab.io/img/nest-unintended-cover.png",
            "https://0xdfimages.gitlab.io/img/ai-cover.png",
            "https://0xdfimages.gitlab.io/img/player-cover.png",
            "https://0xdfimages.gitlab.io/img/hh19-cover.png",
            "https://0xdfimages.gitlab.io/img/bitlab-cover.png",
            "https://0xdfimages.gitlab.io/img/craft-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2019-leet-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2019-hard-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2019-medium-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2019-easy-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-14-cover.png",
            "https://0xdfimages.gitlab.io/img/smasher2-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-13-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-12-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-11-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-10-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-9-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-8-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-7-cover.png",
            "https://0xdfimages.gitlab.io/img/wall-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-6-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-5-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-4-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-3-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-2-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2019-1-cover.png",
            "https://0xdfimages.gitlab.io/img/heist-cover.png",
            "https://0xdfimages.gitlab.io/img/chainsaw-rootkit-cover.png",
            "https://0xdfimages.gitlab.io/img/chainsaw-cover.png",
            "https://0xdfimages.gitlab.io/img/networked-cover.png",
            "https://0xdfimages.gitlab.io/img/jarvis-cover.png",
            "https://0xdfimages.gitlab.io/img/haystack-cover.png",
            "https://0xdfimages.gitlab.io/img/safe-cover.png",
            "https://0xdfimages.gitlab.io/img/ellingson-cover.png",
            "https://0xdfimages.gitlab.io/img/writeup-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-7-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-6-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-5-cover.png",
            "https://0xdfimages.gitlab.io/img/ghoul-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-4-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-3-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-2-cover.png",
            "https://0xdfimages.gitlab.io/img/swagshop-cover.png",
            "https://0xdfimages.gitlab.io/img/flare2019-1-cover.png",
            "https://0xdfimages.gitlab.io/img/kryptos-cover.png",
            "https://0xdfimages.gitlab.io/img/luke-cover.png",
            "https://0xdfimages.gitlab.io/img/holiday-cover.png",
            "https://0xdfimages.gitlab.io/img/bastion-cover.png",
            "https://0xdfimages.gitlab.io/img/onetwoseven-cover.png",
            "https://0xdfimages.gitlab.io/img/unattended-cover.png",
            "https://0xdfimages.gitlab.io/img/helpline-cover.png",
            "https://0xdfimages.gitlab.io/img/arkham-cover.png",
            "https://0xdfimages.gitlab.io/img/fortune-cover.png",
            "https://0xdfimages.gitlab.io/img/chankro-cover.png",
            "https://0xdfimages.gitlab.io/img/lacasadepapel-cover.png",
            "https://0xdfimages.gitlab.io/img/ctf-cover.png",
            "https://0xdfimages.gitlab.io/img/friendzone-cover.png",
            "https://0xdfimages.gitlab.io/img/hackback-cover.png",
            "https://0xdfimages.gitlab.io/img/darling-cover.png",
            "https://0xdfimages.gitlab.io/img/netmon-cover.png",
            "https://0xdfimages.gitlab.io/img/querier-cover.png",
            "https://0xdfimages.gitlab.io/img/flujab-cover.png",
            "https://0xdfimages.gitlab.io/img/help-cover.png",
            "https://0xdfimages.gitlab.io/img/sizzle-cover.png",
            "https://0xdfimages.gitlab.io/img/chaos-cover.png",
            "https://0xdfimages.gitlab.io/img/emotet0-pivot-cover.png",
            "https://0xdfimages.gitlab.io/img/emotet-20190521-cover.png",
            "https://0xdfimages.gitlab.io/img/conceal-cover.png",
            "https://0xdfimages.gitlab.io/img/lightweight-cover.png",
            "https://0xdfimages.gitlab.io/img/bighead-cover.png",
            "https://0xdfimages.gitlab.io/img/bighead-bof-cover.png",
            "https://0xdfimages.gitlab.io/img/irked-cover.png",
            "https://0xdfimages.gitlab.io/img/teacher-cover.png",
            "https://0xdfimages.gitlab.io/img/commando-lessons-cover.png",
            "https://0xdfimages.gitlab.io/img/redcross-cover.png",
            "https://0xdfimages.gitlab.io/img/commando-overview-cover.png",
            "https://0xdfimages.gitlab.io/img/commando-install-cover.png",
            "https://0xdfimages.gitlab.io/img/vault-cover.png",
            "https://0xdfimages.gitlab.io/img/wl-devlife-cover.png",
            "https://0xdfimages.gitlab.io/img/curling-cover.png",
            "https://0xdfimages.gitlab.io/img/yara-cover.png",
            "https://0xdfimages.gitlab.io/img/october-cover.png",
            "https://0xdfimages.gitlab.io/img/frolic-cover.png",
            "https://0xdfimages.gitlab.io/img/carrier-cover.png",
            "https://0xdfimages.gitlab.io/img/ethereal-cor-cover.png",
            "https://0xdfimages.gitlab.io/img/bastard-cover.png",
            "https://0xdfimages.gitlab.io/img/ethereal-cover.png",
            "https://0xdfimages.gitlab.io/img/ethereal-pbox-cover.png",
            "https://0xdfimages.gitlab.io/img/ethereal-shell-cover.png",
            "https://0xdfimages.gitlab.io/img/granny-cover.png",
            "https://0xdfimages.gitlab.io/img/devel-cover.png",
            "https://0xdfimages.gitlab.io/img/access-cover.png",
            "https://0xdfimages.gitlab.io/img/jenkins-exploit-cover.jpg",
            "https://0xdfimages.gitlab.io/img/zipper-cover.png",
            "https://0xdfimages.gitlab.io/img/wl-dummy-cover.png",
            "https://0xdfimages.gitlab.io/img/legacy-cover.png",
            "https://0xdfimages.gitlab.io/img/giddy-cover.png",
            "https://0xdfimages.gitlab.io/img/dirtysock-cover.png",
            "https://0xdfimages.gitlab.io/img/ypuffy-cover.gif",
            "https://0xdfimages.gitlab.io/img/dab-cover.png",
            "https://0xdfimages.gitlab.io/img/tunneling-cover.jpg",
            "https://0xdfimages.gitlab.io/img/reddish-cover.png",
            "https://0xdfimages.gitlab.io/img/secnotes-cover.png",
            "https://0xdfimages.gitlab.io/img/hh18-cover.png",
            "https://0xdfimages.gitlab.io/img/responder-cover.png",
            "https://0xdfimages.gitlab.io/img/oz-cover.png",
            "https://0xdfimages.gitlab.io/img/mischief-cover.png",
            "https://0xdfimages.gitlab.io/img/hackvent2018-cover.png",
            "https://0xdfimages.gitlab.io/img/jq-cover.png",
            "https://0xdfimages.gitlab.io/img/waldo-cover.png",
            "https://0xdfimages.gitlab.io/img/aoc2018-cover.png",
            "https://0xdfimages.gitlab.io/img/active-cover.png",
            "https://0xdfimages.gitlab.io/img/hawk-cover.png",
            "https://0xdfimages.gitlab.io/img/smasher-cover.png",
            "https://0xdfimages.gitlab.io/img/smasher-bof-cover.jpg",
            "https://0xdfimages.gitlab.io/img/jerry-cover.png",
            "https://0xdfimages.gitlab.io/img/reel-malware-cover.png",
            "https://0xdfimages.gitlab.io/img/reel-cover.png",
            "https://0xdfimages.gitlab.io/img/Parachute-win.png",
            "https://0xdfimages.gitlab.io/img/bounty-cover.png",
            "https://0xdfimages.gitlab.io/img/tartar-cover.png",
            "https://0xdfimages.gitlab.io/img/devoops-cover.png",
            "https://0xdf.gitlab.io/assets/icons/htb-favicon.png",
            "https://0xdf.gitlab.io/assets/icons/mastodon.svg",
            "https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "CTF solutions, malware analysis, home lab development",
        "meta_lang": "en",
        "meta_favicon": "/assets/icons/favicon-32x32.png",
        "meta_site_name": "0xdf hacks stuff",
        "canonical_link": "https://0xdf.gitlab.io/",
        "text": "HTB: FormulaX\n\nhtb-formulax hackthebox ctf nmap ubuntu express nodejs python socket-io xss simple-git git cve-2022-24433 cve-2022-24066 cve-2022-25912 cve-2022-25860 command-injection librenms mongo hashcat bcrypt snmp-trap libreoffice apache-uno file-read formula-injection\n\nFormulaX is a long box with some interesting challenges. I’ll start with a XSS to read from a SocketIO instance to get the administrator’s chat history. That reveals new subdomain to investigate, where I’ll find a site using simple-git to generate reports on repositories. I’ll exploit a command injection CVE in simple-git to get a foothold. I’ll find creds for the next user by cracking a hash in the Mongo database. I’ll pivot to the next user by exploiting an SNMP trap vulnerability that leads to XSS in LibreNMS, and then to the next user abusing a shared password in the LibreNMS configuration. For root, I’ll abuse the LibreOffice Calc API to execute commands. In Beyond Root I’ll show some unintended paths, first using a weird permissions setting on the LibreNMS directory to skip the SNMP trap exploitation, and then using the LibreOffice Calc API to write formulas into a worksheet that read files from the file system, which I’ll turn into a nice Python script to get arbitrary file read.\n\nHTB: Usage\n\nhtb-usage ctf hackthebox nmap ubuntu ffuf subdomain laravel sqli sqlmap blindsql hashcat laravel-admin cve-2023-24249 webshell monit wildcard 7z\n\nUsage starts with a blind SQL injection in a password reset form that I can use to dump the database and find the admin login. The admin panel is made with Laravel-Admin, which has a vulnerability in it that allows uploading a PHP webshell as a profile picture by changing the file extension after client-side validation. I’ll find a password in a monit config, and then abuse a wildcard vulnerability in 7z to get file read as root.\n\nHTB: IClean\n\nhackthebox htb-iclean ctf nmap ubuntu flask feroxbuster burp burp-repeater xss ssti crackstation qpdf file-read pdf-parser pdf youtube\n\nIClean starts out with a simple cross-site scripting cookie theft, followed by exploiting a server-side template injection in an admin workflow. I’ll abuse that to get a shell on the box, and pivot to the next user by getting their hash from the website DB and cracking it. For root, the user can run the a command-line PDF software as root. I’ll use that to attach files to PDF documents for file read as well. In Beyond Root, I’ll go through the structure of the PDF documents and use tools to pull the attachments out without opening the document.\n\nHTB: WifineticTwo\n\nhackthebox htb-wifinetictwo ctf nmap ubuntu openplc c flask flask-unsign cve-2021-31630 c-reverse-shell wifi oneshot pixie-dust wpa wps open-wrt chisel tunnel\n\nWifineticTwo is another Wifi-themed box. I’ll start with a host running OpenPLC. I’ll log into the web interface using default creds and exploit it by writing a C reverse shell into the hardware code. From there, I’ll identify a wireless interface that isn’t connected to anything. I’ll scan for access points, and perform a Pixie Dust attack on the AP to get it’s password. Then I can connect to the network and find an Open-WRT router. The root account has no password, so I can get access to the web interface and run cron jobs, add SSH keys, or just SSH in as root with no password.\n\nHTB Sherlock: Campfire-2\n\nforensics sherlock-campfire-2 ctf hackthebox dfir eventlogs evtx-dump win-event-4769 win-event-4768 win-event-5140 as-rep-roasting jq\n\nThe second in the Campfire Sherlock series about active directory attacks is about AS-REP-Roasting, an attack against users configured to not require preauthentication when interaction with Kerberos. I’ll examine the event logs to show which user account was compromised in the attack, as well as the workstation that was compromised to perform the attack.\n\nHTB Sherlock: Tracer\n\nsherlock-tracer forensics ctf hackthebox dfir psexec prefetch ntfs-journal pecmd evtxecmd mftecmd event-logs win-event-7045 named-pipe win-event-17 win-event-11\n\nTracer is all about a forensics investigation where the attacker used PSExec to move onto a machine. I’ll show how PSExec creates a service on the machine, creates named pipes to communicate over, and eventually drops a .key file. I’ll identify the machine that sourced the attack as well.\n\nHTB: Headless\n\nctf hackthebox htb-headless nmap debian flask python burp burp-repeater xss feroxbuster ffuf filter cookies command-injection bash cyberchef\n\nHeadless is a nice introduction to cross site scripting, command injection, and understanding Linux and Bash. I’ll start with a simple website with a contact form. When I put any HTML tags into the message, there’s an alert saying that my request headers have been forwarded for analysis. I’ll embed a XSS payload into request headers and steal a cookie from the admin. As an admin user, I get access to the dashboard, where a simple form has command injection. To escalate, I’ll abuse a system check script that tries to run another script with a relative path. In Beyond Root, I’ll look at understanding and attacking the cookie used by the site, and some odd status codes I noticed during the solution.\n\nHTB: Corporate\n\nhtb-corporate hackthebox ctf nmap ffuf subdomain sso csp content-security-policy csp-evaluator feroxbuster html-injection xss meta-redirect jwt python-jwt openvpn vpn idor burp burp-repeater brute-force default-creds debian ubuntu netexec docker docker-sock sssd linux-ldap autofs nfs firefox firefox-history bitwarden firefox-bitwarden bitwarden-pin-brute-force snappy rust cargo moz-idb-edit jq gitea jwt-forge docker-image-upload proxmox pve\n\nCorporate is an epic box, with a lot of really neat technologies along the way. I’ll start with a very complicated XSS attack that must utilize two HTML injections and an injection into dynamic JavaScript to bypass a content security policy and steal a a cookie. With that cookie, I’ll enumerate users and abuse an insecure direct object reference vulnerability to get access to a welcome PDF that contains a default password syntax that includes the user’s birthday. I’ll brute force through the user’s profiles, collecting their email and birthday, and checking for any users that still use the default password. Each user also has an OpenVPN connection config. I’ll connect and find a remote VM that I can SSH into as these users. On that host, I’ll find a dynamic home directory system that mounts NFS shares on login as different users. I’ll find a Bitwarden Firefox extension in one user’s home directory, and extract that to get their time-based one time password to the local Gitea instance. This instance has the source to the websites, and I’ll find the JWT secret in an old commit, which allows me to generate tokens as any user and reset passwords without knowing the old one. I’ll use that to get access to the VM as an user with access to the Docker socket, and escalate to root on that VM. I’ll target sysadmin users and find an SSH key that works to get onto the main host. From there, I’ll abuse a Proxmox backup to generate a cookie and use the API to reset the root user’s password.\n\nHTB: Perfection\n\nhtb-perfection hackthebox ctf ubuntu nmap ruby ruby-sinatra ruby-webrick ssti ssti-ruby feroxbuster newline-injection filter burp burp-repeater ffuf erb hashcat hashcat-mask\n\nPerfection starts with a simple website designed to calculate weighted averages of grades. There is a filter checking input, which I’ll bypass using a newline injection. Then I can exploit a Ruby server-side template injection to get execution. I’ll find a database of hashes and a hint as to the password format used internally, and use hashcat rules to crack them to get root access. In Beyond Root, I’ll look at the Ruby webserver and the SSTI vulnerability.\n\nHTB: Jab\n\nhackthebox ctf htb-jab windows nmap jabber xmpp openfire netexec pidgin xmpp-console as-rep-roast hashcat bloodhound bloodhound-py dcom-execution dcom dcomexec.py openfire-plugin\n\nJab starts with getting access to a Jabber / XMPP server. I’ll use Pidgin to enumerate other users, and find over two thousand! I’ll AS-REP-Roast these users and find three that have the disable preauth bit set, and one with a crackable password. Logging into the chat server as that user, I’ll find a private chat discussing a pentest, and creds for another account. That account has DCOM access. I’ll abuse that to get a shell on the box. From there, I’ll access the Openfire admin panel and upload a malicious plugin to get execution as system.\n\nHTB Sherlock: Campfire-1\n\nctf dfir hackthebox forensics sherlock-campfire-1 eventlogs prefetch evtx-dump pecmd win-event-4769 kerberoasting jq win-event-4104 powerview\n\nCampfire-1 is the first in a series of Sherlocks looking at identifying critical active directory vulnerabilities. This challenge requires looking at event log and prefetch data to see an attack run PowerView and the Rubeus to perform a Kerberoasting attack.\n\nHTB: Office\n\nhtb-office ctf hackthebox nmap windows netexec joomla feroxbuster cve-2023-23752 kerbrute pcap wireshark hashcat joomla-webshell runascs libreoffice chisel phishing macros cve-2023-2255 cmd-key saved-credentials dpapi mimikatz gpo sharp-gpo-abuse\n\nOffice starts with a Joomla instance that leaks a password. I’ll brute force usernames over Kerberos and then password spray to find where the password is reused. that use has access to an SMB share where I find a PCAP that includes a Kerberos authentication exchange. I’ll build a hash from that and crack it to get another password. This one also works for the Joomla admin account. I’ll add a webshell to a template and get a foothold on the box. There’s an internal site that takes resume submissions. I’ll abuse LibreOffice two ways, first by a CVE and then by editing the registry to enable macros. The next user has saved credentials, which I’ll decrypt with Mimikatz. Finally, I’ll abuse GPO access to get administrative access.\n\nHTB: Crafty\n\nhtb-crafty hackthebox ctf windows minecraft feroxbuster nmap wireshark log4shell log4j minecraft-client cve-2021-44228 java jd-gui virus-total runascs web.config\n\nCrafty is all about exploiting a Minecraft server. Minecraft was notoriously vulnerable to Log4Shell due to its use of the Java Log4J package. I’ll use a free Minecraft command line client to connect and send a Log4Shell payload to get a shell on the box. From there, I’ll find a plugin for the Minecraft server and reverse it to find the administrator password. In Beyond Root, I’ll examine and understand the web.config file for the static website.\n\nHTB Sherlock: Noted\n\nforensics sherlock-noted dfir ctf hackthebox notepad++ sherlock-cat-dfir\n\nNoted is a quick Sherlock analysing the AppData directory associated with Notepad++. I’ll use the artifacts to recover the contents of two files, including a Java script used to collect files from the host for exfil. I’ll get the password for the pastes site containing the attacker information and some idea of the timeline over which the activity occurred.\n\nHTB: Pov\n\nctf htb-pov hackthebox subdomain ffuf aspx feroxbuster viewstate file-read directory-traversal deserialization ysoserial.net powershell-credential clixml certutil runascs sedebugprivilege metasploit meterpreter psgetsys chisel evil-winrm\n\nPov offers only a web port. I’ll abuse a file read and directory traversal in the web page to read the ASP.NET secrets used for VIEWSTATE, and then use ysoserial.net to make a malicious serlialized .NET payload to get execution. I’ll pivot on a PowerShell credential, and then abuse SeDebugPrivilege through both Metasploit and via a PowerShell script, psgetsys.ps1.\n\nHTB Sherlock: Constellation\n\nforensics sherlock-constellation hackthebox dfir ctf sherlock-cat-threat-intelligence unfurl url-forensics exiftool osint linkedin url-discord url-google\n\nConstellation is a fun Sherlock challenge largely focuced on forensics against URLs. Two URLs, from Discord and Google are shared, and I’ll use Unfurl to pull timestamps and other information from them to make a timeline of an insider threat interaction.\n\nHTB: Analysis\n\nctf htb-analysis hackthebox nmap windows netexec ffuf subdomain feroxbuster upload webshell hta ldap ldap-injection python python-async python-httpx autologon-credentials web-logs evil-winrm snort snort-dynamic-preprocessor msfvenon\n\nAnalysis starts with a PHP site that uses LDAP to query a user from active directory. I’ll use LDAP injection to brute-force users, and then to read the description field of a shared account, which has the password. That grants access to the admin panel, where I’ll abuse an upload feature two ways - writing a webshell and getting execution via an HTA file. I’ll find credentials for the next user in autologon registry values and in web logs. To get administrator, I’ll abuse the Snort dynamic preprocessor feature writing a malicious DLL to where Snort will load it.\n\nHTB Sherlock: Nubilum-1\n\ndfir ctf hackthebox sherlock-nubilum-1 sherlock-cat-cloud forensics cloud aws cloudtrail catscale youtube container docker python s3 ec2 splunk poshc2\n\nNublium-1 is all about cloud forensics, specifically a compromised AWS account that leads to multiple EC2 VM instances, including one acting as a PoshC2 server. I’ll work through the CloudTrail logs in a Splunk instance (run via Docker with video on setup), as well as CatScale logs and other forensic collection to show where the threat actor got credentials for the account, what they did in the cloud, and even identify a victim machine.\n\nHTB: Bizness\n\nhtb-bizness ctf hackthebox nmap debian ofbiz feroxbuster cve-2023-49070 ysoserial java hashcat ij derby dbeaver cyberchef\n\nBizness is all about an Apache OFBiz server that is vulnerable to CVE-2023-49070. I’ll exploit this pre-authentication remote code execution CVE to get a shell. To esclate, I’ll find the Apache Derby database and exfil it to my machine. I’ll show how to enumerate it using the ij command line too, as well as DBeaver. Once I find the hash, I’ll need to reformat it to something hashcat can process, crack it, and get root.\n\nHTB Sherlock: Bumblebee\n\nforensics dfir ctf sherlock-bumblebee sherlock-cat-dfir hackthebox sqlite phpbb access-log credential-theft\n\nBumblebee is a fun introductory level Sherlock. All the data needed to solve the challenge is in a sqlite database for a phpBB instance and an access log file. No fancy tools, just SQLite and Bash commands. I’ll show how a user created a malicious post and got the admin to send their credentials to the attacker. Then they used the creds to log in as admin, give their own account administrator privileges, and export the database.\n\nHTB: Ouija\n\nhackthebox ctf htb-ouija nmap feroxbuster burp burp-proxy subdomain gitea haproxy cve-2021-40346 request-smuggling integer-overflow burp-repeater file-read proc hash-extender hash-extension youtube python reverse-engineering php-module gdb peda ghidra bof arbitrary-write\n\nOuija starts with a requests smuggling vulnerability that allows me to read from a dev site that’s meant to be blocked by HA Proxy. Access to the dev site leaks information about the API, enough that I can do a hash extension attack to get a working admin key for the API and abuse it to read files from the system. I’ll read an SSH key and get a foothold. From there, I’ll abuse a custom PHP module written in C and compiled into a .so file. There’s an integer overflow vulnerability which I’ll abuse to overwrite variables on the stack, providing arbitrary write as root on the system.\n\nHTB Sherlock: Logjammer\n\nctf sherlock-logjammer sherlock-cat-dfir forensics dfir hackthebox evtxecmd windows event-logs win-event-4624 jq win-event-2004 win-event-2005 win-event-2006 win-event-2010 win-event-2033 win-event-2051 win-event-4719 win-event-4698 win-event-1116 win-event-1117 win-event-4103 win-event-4104 win-event-1102 win-event-104\n\nLogjammer is a neat look at some Windows event log analysis. I’ll start with five event logs, security, system, Defender, firewall, and PowerShell, and use EvtxECmd.exe to convert them to JSON. Then I’ll slice them using JQ and some Bash to answer 12 questions about a malicious user on the box, showing their logon, uploading Sharphound, modifying the firewall, creating a scheduled task, running a PowerShell script, and clearing some event logs.\n\nHTB: Monitored\n\nhackthebox htb-monitored ctf nmap nagios nagiosxi ldapsearch snmpwalk nagios-api api-fuzz feroxbuster burp burp-repeater cve-2023-40931 sqli sqlmap symbolic-link\n\nMonitored is all about a Nagios XI monitoring system. I’ll abuse it over and over to slowly escalate privileges ending up at root. I’ll find initial creds from SNMP, but the account is disabled. I’ll abuse the API to get a token that provides authentication to the site. From there I’ll exploit a SQL injection to get the administrator’s API key. With that key, I’ll add a new admin user, and get admin access to the site. From there, I’ll create a command that runs on the host to get a shell. To escalate to root, I’ll show two ways to abuse sudo privileges that Nagios gives the nagios user.\n\nEinladen mso.dll Reverse Engineering\n\nsherlock-einladen hackthebox ctf forensics dfir malware decoy-document dll-side-loading authenticode virus-total zulip-chat youtube ghidra python\n\nIn the Einladen Sherlock, there’s an HTA file that drops a Microsoft signed legit executable, two DLLs, and a PDF. I’m able to use the PCAP and Procmon data to figure out where to go next, without reverse-engineering the malware. In the embedded YouTube video, I’ll dive into the DLL side-load, how the binary loads winint.dll secretly, decrypts stack strings, and contacts the C2, with a summary of the analysis in this post.\n\nGo Binary Analysis with gftrace\n\nhtb-napper go gftrace elastic reverse-engineering hook source-code\n\ngftrace is a command line Windows tool that will run a Go binary and log all the Windows API calls made as it runs. Having just finished solving Napper from HackTheBox a few days before learning of this tool, it seems obvious to try to apply it to the Go binary from that box. I’ll also give a brief overview of how it works, walking through the source code from GitHub. Overall, the tool is a bit raw, but a useful on to keep in my toolbox and something to keep an eye on.\n\nHTB: Napper\n\nhtb-napper ctf hackthebox nmap windows iis subdomain ffuf hugo feroxbuster burp burp-repeater naplistener-malware malware csharp dotnet dotnet-reverse-shell mcs laps elasticsearch chisel tunnel smbserver ghidra go youtube uac runascs scheduled-tasks dotpeek htb-haystack\n\nNapper presents two interesting coding challenges wrapping in a story of real malware and a custom LAPS alternative. I’ll start by finding a username and password in a blog post, and using it to get access to an internal blog. This blog talks about a real IIS backdoor, Naplistener, and mentions running it locally. I’ll find it on Napper, and write a custom .NET binary that will run when passed to the backdoor to get a shell. On the box, I’ll find a draft blog post about a new internally developed solution to replace LAPS, which stores the password in a local Elastic Search DB. I’ll write a Go program to fetch the seed and the encrypted blob, generate the key from the seed, and use the key to decrypt the blob, resulting in the password for a user with admin access. I’ll use RunasCs.exe to bypass UAC and get a shell with administrator privileges. In Beyond Root, I’ll explore the automations for the box, including the both how the password is rotated every 5 minutes, and what changes are made to the real malware for HTB.\n\nHTB Sherlock: Einladen\n\nsherlock-einladen sherlock-cat-dfir hackthebox ctf forensics dfir malware phishing html hta decoy-document dll-side-loading authenticode virus-total wireshark pcap tshark zulip-chat aws procmon javascript polyglot batch any-run sandbox youtube lolbas dotpeek dotnet aes cyberchef dnspy pbkdf2 anti-debug scheduled-task\n\nEinladen starts with a ton of artifacts. I’ll work through a phishing HTML page that downloads a Zip with an HTA that creates three executables and a PDF, then runs one of the executables. The one it runs is a legit Microsoft binary, but the DLLs are malware, side-loaded by the legit binary. That binary connects to a chat service as C2. There’s also a JavaScript / bat polyglot that presumably is downloaded and run by the malware that starts another infection chain, this time running another RAT that is written in .NET. I’ll figure out how to decrypt it’s settings (both dynamically and with some really fun CyberChef foo), and understand how it works.\n\nHTB: DevVortex\n\nhackthebox ctf htb-devvortex nmap ubuntu ffuf subdomain joomla cve-2023-23752 mass-assignment information-disclosure joomla-webshell joomla-plugin joomla-template youtube apport-cli apport cve-2023-1326 pager-exploit less htb-sau\n\nDevVortex starts with a Joomla server vulnerable to an information disclosure vulnerability. I’ll leak the users list as well as the database connection password, and use that to get access to the admin panel. Inside the admin panel, I’ll show how to get execution both by modifying a template and by writing a webshell plugin. I’ll pivot to the next user after cracking their hash from the DB. For root, I’ll abuse a pager vulnerability in apport-cli that allows escaping to a root shell when run with sudo.\n\nHTB Sherlock: Meerkat\n\nhackthebox ctf dfir forensics sherlock-meerkat sherlock-cat-soc pcap wireshark suricata bonitasoft cve-2022-25237 tshark credential-stuffing pastes-io jd-gui jq\n\nIn Meerkat, I’ll look at some Suricata alert data and a PCAP and see how an actor performs a credential stuffing attack against a Bonitasoft BPM server. Once authenticated, they exploit a CVE to get access as a privileged user and upload a malicious extension to run commands on the host opterating system. Using that access, they download a Bash script from a pastes site and run it, downloading a public key and putting it into a user’s authorized keys file to backdoor the system. In Beyond Root, I’ll find the script the actor was using, and do some basic reverse engineering on the Java plugin.\n\nHTB: Surveillance\n\nhackthebox ctf htb-surveillance nmap ubuntu feroxbuster craftcms cve-2023-41892 arbitrary-object-instantiation image-magick hashcat zoneminder cve-2023-26035 command-injection zmupdate zmdc htb-intentions htb-clicker\n\nSurveillance is one of those challenges that has gotten significantly easier since it’s initial release. It features vulnerabilities that had descriptions but not public POCs at the time it was created, which made for an interesting challenge. It starts with an instance of Craft CMS. I’ll exploit an arbitrary object injection vulnerability to get RCE and a shell. I’ll find a password hash for another user in a database backup and crack it. That user can log into a ZoneMinder instance running on localhost, and I’ll exploit a vulnerability in it to get access as the zoneminder user. For root, I’ll show two ways to abuse the zoneminder user’s sudo privileges - through the ZoneMinder LD_PRELOAD option, and via command injection in one of their scripts.\n\nHTB Sherlock: Subatomic\n\nctf hackthebox forensics sherlock-subatomic sherlock-cat-malware-analysis malware dfir nullsoft electron nsis authenticode imphash python-pefile virus-total 7z nsi asar npm nodejs vscode nodejs-debug deobfuscation duvet discord browser htb-atom htb-unobtainium\n\nSubatomic looks at a real piece of malware written in Electron, designed as a fake game installer that will hijack the system’s Discord installation as well as exfil data about the machine, and Discord tokens, and tons of browser data. I’ll take apart the malware to see what it does and answer the questions for the challenge.\n\nHTB Sherlock: BFT\n\nctf dfir forensics sherlock-bft sherlock-cat-dfir hackthebox mft mftecmd timeline-explorer alternative-data-streams zone-identifier malware bat python\n\nBFT is all about analysis of a Master File Table (MFT). I’ll use Zimmerman tools MFTECmd and Timeline Explorer to find where a Zip archive was downloaded from Google Drive. It is then unzipped to get another zip, which is unzipped to get another zip. That final zip has a Windows Bat file in it. Because the Bat file is small, I’m able to recover the full file from the MFT and see that it uses a PowerShell cradle to download and run PowerShell from a malicious C2.\n\nHTB: Hospital\n\nctf htb-hospital hackthebox nmap windows ubuntu netexec roundcube upload feroxbuster ffuf burp burp-repeater php webshell php-disable-functions dfunc-bypasser p0wny-shell weevely vm htb-moderators hashcat gameoverlay cve-2023-2640 cve-2023-32629 youtube cve-2023-35001 shadow phishing ghostscript cve-2023-3664 xampp htb-rebound qwinsta meterpreter metasploit msfvenom espia meterpreter-screenshot meterpreter-key-sniff htb-updown\n\nHospital is a Windows box with an Ubuntu VM running the company webserver. I’ll bypass upload filters and disable functions to get a PHP webshell in the VM and execution. I’ll escalate using kernel exploits, showing both CVE-2023-35001 and GameOver(lay). As root on the webserver, I’ll crack the password hashes for a user, and get credentials that are also good on the Windows host and the RoundCube webmail. In the mail, I’ll reply to another user who is waiting for a EPS file to exploit a vulnerability in Ghostscript and get execution. To escalate, I’ll show four ways, including the intended path which involves using a keylogger to get the user typing the admin password into RoundCube. In Beyond Root, I’ll look at the automations for the Ghostscript phishing step.\n\nHTB Sherlock: Unit42\n\nctf dfir forensics sherlock-unit42 sherlock-cat-dfir hackthebox event-logs sysmon jq malware time-stomping evtxecmd\n\nUnit42 is based off a real malware campaign noted by Unit 42.I’ll work with Sysmon logs to see how the malware was downloaded through Firefox from Dropbox, run by the user, and proceeded to install itself using Windows tools. It makes network connections including DNS queries and connection to a probably malicious IP before killing itself.\n\nHTB Sherlock: Brutus\n\nctf dfir forensics sherlock-brutus sherlock-cat-dfir hackthebox auth-log wtmp btmp utmp utmpdump ssh-brute-force\n\nBrutus is an entry-level DFIR challenge that provides a auth.log file and a wtmp file. I’ll use these two artifacts to identify where an attacker performed an SSH brute force attack, eventually getting success with a password for the root user. I’ll see how the user comes back in manually and connects, creating a new user and adding that user to the sudo group. Finally, that user connects and runs a couple commands using sudo.\n\nHTB: Codify\n\nctf hackthebox htb-codify nmap ubuntu nodejs express js-vm2 cve-2023-37903 cve-2023-37466 cve-2023-32314 cve-2023-30547 sqlite hashcat bash bash-glob python brute-force\n\nThe website on Codify offers a JavaScript playground using the vm2 sandbox. I’ll abuse four different CVEs in vm2 to escape and run command on the host system, using that to get a reverse shell. Then I’ll find a hash in a sqlite database and crack it to get the next user. For root, I’ll abuse a script responsible for backup of the database. I’ll show two ways to exploit this script by abusing a Bash glob in an unquoted variable compare.\n\nHTB: Rebound\n\nctf htb-rebound hackthebox nmap windows active-directory domain-controller netexec rid-cycle lookupsid kerberoast kerberoast-without-auth hashcat password-spray bloodhound powerview powerview-py windows-acl bloodyad shadow-credential certipy qwinsta cross-session remotepotato0 krbrelay gmsa gmsapasswordreader delegation constrained-delegation rbcd kerberos s4u2self s4u2proxy secretsdump htb-absolute htb-outdated\n\nRebound is a monster Active Directory / Kerberos box. I’ll start off with a RID-cycle attack to get a list of users, and combine AS-REP-Roasting with Kerberoasting to get an crackable hash for a service account. That password is shared by a domain user, and I’ll find a bad ACL that allows that user control over an important group. With access to that group, I can change the password of or get a shadow credential for another user with WinRM access. I’ll perform a cross-session relay attack with both RemotePotato0 and KrbRelay to get a hash for the next user, who can read the GMSA password for another service account. This account has a constrained delegation, and I’ll need to abuse both that delegation as well as RBCD to get a ticket as the DC machine account, and dump hashes for the domain. This one is heavey into Active Directory and Kerberos!\n\nHTB: Analytics\n\nctf htb-analytics hackthebox nmap ffuf subdomain feroxbuster metabase cve-2023-38646 burp burp-repeater docker env gameoverlay cve-2023-2640 cve-2023-32629 youtube\n\nAnalytics starts with a webserver hosting an instance of Metabase. There’s a pre-auth RCE exploit that involves leaking a setup token and using it to start the server setup, injecting into the configuration to get code execution. Inside the Metabase container, I’ll find creds in environment variables, and use them to get access to the host. From there I’ll exploit the GameOver(lay) vulnerability to get a shell as root, and include a video explaining the exploit.\n\nSMB Enumeration Cheatsheet\n\npwk hackthebox smb oscp methodology cheat-sheet netexec smbclient impacket nmap manspider htb-manager\n\nSMB enumeration is a key part of a Windows assessment, and it can be tricky and finicky. When I was doing OSCP back in 2018, I wrote myself an SMB enumeration checklist. Five years later, this is the updated version with newer tools and how I approach SMB today. It’s also worth noting that this list is for a Linux attack box.\n\nHTB: Manager\n\nctf htb-manager hackthebox nmap windows ffuf iis feroxbuster netexec lookupsid rid-cycle ldapsearch ldapdomaindump kerbrute password-spray mssql mssqlclient xp-dirtree certipy adcs esc7 evil-winrm\n\nManager starts with a RID cycle or Kerberos brute force to find users on the domain, and then a password spray using each user’s username as their password. When the operator account hits, I’ll get access to the MSSQL database instance, and use the xp_dirtree feature to explore the file system. I’ll find a backup archive of the webserver, including an old config file with creds for a user. As that user, I’ll get access to the ADCS instance and exploit the ESC7 misconfiguration to get access as administrator.\n\nHTB: Appsanity\n\nhackthebox ctf htb-appsanity nmap tls ffuf vhosts subdomain windows aspx dotnet feroxbuster hidden-input cookies shared-cookie jwt ssrf filter upload burp burp-repeater ssrf-fuzz aspx webshell dotpeek reverse-engineering ghidra x64dbg procmon\n\nAppsanity starts with two websites that share a JWT secret, and thus I can get a cookie from one and use it on the other. On the first, I’ll register an account, and abuse a hidden input vulnerability to get evelated privilieges as a doctor role. Then I’ll use that cookie on the other site to get access, where I find a serverside request forgery, as well as a way to upload PDFs. I’ll bypass a filter to upload a webshell, and use the SSRF to reach the internal management page and trigger a reverse shell. From there, I’ll find the location of credentials in a .NET application, and extract a password from the registry to get another shell. Finally, I’ll reverse a C++ binary using ProcMon, Ghidra, and x64dbg to figure out a location where I could write a DLL and trigger it’s being loaded, giving shell as administrator.\n\nHTB: CozyHosting\n\nhackthebox ctf htb-cozyhosting nmap ubuntu java spring-boot spring-boot-actuator feroxbuster command-injection bash-ifs bash-brace-expansion whitespace-filter burp burp-repeater postgresql jar jd-gui hashcat gtfobins ssh-proxycommand\n\nCozyHosting is a web hosting company with a website running on Java Spring Boot. I’ll find a Spring Boot Actuator path that leaks the session id of a logged in user, and use that to get access to the site. Once there, I’ll find command injection in a admin feature to get a foothold. I’ll pull database creds from the Java Jar file and use them to get the admin’s hash on the website from Postgres, which is also the user’s password on the box. From there, I’ll abuse sudo ssh with the ProxyCommand option to get root.\n\nHTB: Visual\n\nhackthebox htb-visual ctf nmap windows php xampp feroxbuster visual-studio csharp gitea docker dotnet dotnet-linux php-webshell webshell fullpowers seimpersonate godpotato htb-keeper\n\nVisual is all about abusing a Visual Studio build process. There’s a website that takes a hosted Git URL and loads a Visual Studio project from the URL and compiles it. I’ll stand up a Gitea server in a container and host a project with a pre-build action that runs a command and gets a shell. From there, I’ll drop a webshell into the XAMPP web root to get a shell as local service. This service is running without SeImpersonate privileges, but I’ll use the FullPower executable to recover this, and then GodPotato to get System.\n\nHTB: Drive\n\nhackthebox htb-drive ctf ubuntu nmap django idor feroxbuster ffuf gitea sqlite sqli sqlite-injection sqlite-rce hashcat ghidra reverse-engineering format-string canary bof pwntools filter gdb peda ropper\n\nDrive has a website that provides cloud storage. I’ll abuse an IDOR vulnerability to get access to the administrator’s files and leak some creds providing SSH access. From there I’ll access a Gitea instance and use the creds to get access to a backup script and the password for site backups. In these backups, I’ll find hashes for another use and crack them to get their password. For root, there’s a command line client binary that has a buffer overflow. I’ll show that, as well as two ways to get RCE via an unintended SQL injection.\n\nHTB: Builder\n\nctf hackthebox htb-builder cve-2024-23897 file-read jenkins jenkins-cli youtube hashcat bcrypt jenkins-credentials jenkins-sshagent jenkins-pipeline htb-jeeves htb-object\n\nBuilder is a neat box focused on a recent Jenkins vulnerability, CVE-2024-23897. It allows for partial file read and can lead to remote code execution. I’ll show how to exploit the vulnerability, explore methods to get the most of a file possible, find a password hash for the admin user and crack it to get access to Jenkins. From in Jenkins, I’ll find a saved SSH key and show three paths to recover it. First, dumping an encrypted version from the admin panel. Second, using it to SSH into the host and finding a copy there. And third by having the pipeline leak the key back to me.\n\nHTB: Keeper\n\nhtb-keeper hackthebox ctf nmap request-tracker default-creds keepass cve-2022-32784 dotnet dotnet-linux docker chatgpt kpcli putty puttygen\n\nKeeper is a relatively simple box focused on a helpdesk running Request Tracker and with an admin using KeePass. I’ll use default creds to get into the RT instance and find creds for a user in their profile. That user is troubleshooting a KeePass issue with a memory dump. I’ll exploit CVE-2022-32784 to get the master password from the dump, which provides access to a root SSH key in Putty format. I’ll convert it to OpenSSH format and get root access.\n\nHTB: RegistryTwo\n\nhtb-registrytwo ctf hackthebox nmap ubuntu ffuf vhosts nginx java war feroxbuster docker docker-registry youtube dockerregistrygrabber catalina tomcat jd-gui reverse-enginering rmi java-rmi breaking-parser-logic tomcat-examples tomcat-session file-read mass-assignment null-byte update-alternatives docker-host-network idea-ide java-jar pspy recaf python clamav ipv6 htb-registry\n\nRegistryTwo is a very difficult machine focusing on exploiting Java applications. At the start, there’s a Docker Registry and auth server that I’ll use to get an image and find a Java War file that runs the webserver. Enumeration and reversing show multiple vulnerabilities including nginx/Tomcat issues, mass assignment, and session manipulation. I’ll chain those together to get a foothold in the production container. From there, I’ll create a rogue Java RMI client to get file list and read on the host, where I find creds to get a shell. To escalate to root, I’ll wait for the RMI server to restart, and start a rogue server to listen on the port before it can. My server will abuse a process for scanning files with ClamAV and get file read and eventually a shell. In Beyond Root, I’ll go over some unintended paths, and look at the nginx configuration that allows for dynamic creation of different website virtual hosts.\n\nHTB: Clicker\n\nhtb-clicker hackthebox ctf nmap ubuntu ffuf php feroxbuster nfs source-code mass-assignment newline-injection sqli burp burp-proxy burp-repeater webshell directory-traversal reverse-engineering ghidra perl-debug ld-preload http-proxy environment-variables sudo-setenv xxe\n\nClicker has a website that presents a game that is a silly version of Universal Paperclips. I’ll find an mass assignment vulnerability that allows me to change my role to admin after bypassing a filter two different ways (newline injection and SQLI). Then I’ll exploit a file write vulnerability to get a webshell and execution on the box. To escalate, I’ll find a SetUID binary for the next user and abuse it to read their SSH key. To get root, I’ll exploit a script the user can run with sudo, showing three different ways (playing with Perl environment variables, setting myself as the proxy and adding an XXE attack, and abusing LD_PRELOAD).\n\nHTB: Bookworm\n\nctf htb-bookworm hackthebox nmap ubuntu nodejs express xss idor javascript python feroxbuster csp content-security-policy insecure-upload flask directory-traversal file-read netexec calibre-ebook-convert symlink sqli postscript postscript-injection arbitrary-write ps2pdf express-query-strings\n\nBookworm starts with a gnarly exploit chain combining cross-site scripting, insecure upload, and insecure direct object reference vulnerabilities to identify an HTTP endpoint that allows for file download. In this endpoint, I’ll find that if multiple files are requested, one can attack a directory traversal to return arbitrary files in the returned Zip archive. I’ll use that to leak database creds that also work for SSH on the box. The next user is running a dev webserver that manages ebook format conversion. I’ll abuse this with symlinks to get arbitrary write, and write an SSH public key and get access. For root, I’ll abuse a SQL injection in a label creating script to do PostScript injection to read and write files as root. In Beyond Root, I’ll look at the Express webserver from the foothold and how it was vulnerable and where it wasn’t.\n\nHTB: Zipping\n\nctf htb-zipping hackthebox nmap ubuntu php feroxbuster zip file-read symlink youtube python python-zipfile filter php-regex sqli sqli-union sqli-file lfi shared-object null-byte 7z phar htb-broker\n\nZipping has a website with a function to upload resumes as PDF documents in a Zip archive. I’ll abuse this by putting symlinks into the zip and reading back files from the host file system. I’ll get the source for the site and find a filter bypass that allows SQL injection in another part of the site. I’ll use that injection to write a webshell, and include it exploiting a LFI vulnerability to get execution. For root, I’ll abuse a custom binary with a malicious shared object. In Beyond Root, I’ll show two unintended foothold paths. The first arises from the differences between how PHP and 7z handle a file in a zip with a null byte in its name. The second uses the PHAR PHP filter to bypass the file_exists check and execute a webshell from an archive.\n\nHTB: Sau\n\nctf hackthebox htb-sau nmap request-baskets feroxbuster cve-2023-27163 ssrf mailtrail command-injection systemctl less pager-exploit\n\nSau is an easy box from HackTheBox. I’ll find and exploit an SSRF vulnerability in a website, and use it to exploit a command injection in an internal Mailtrack website. From there, I’ll abuse how the Less pager works with systemctl to get shell as root.\n\n2023 SANS Holiday Hack Challenge: A Holiday Odyssey | Featuring 6: Geese A-Lei'ing!\n\nctf sans-holiday-hack\n\nThe 2023 challenge, A Holiday Odyssey, Featuring 6: Geese A-Lei’ing!, takes place in the Geese Islands, where Santa has moved his operation on the advice of his new AI, ChatNPT. I’ll work through a series of technical (and physical) challenges to find that it’s Jack Frost behind the AI, working from space, trying to destroy Christmas. In the end, I’ll hack into his space system and redirect his missile away from Earth into the sun. The SANS Holiday Hack is something I look forward to each year, and 2023 did not disappoint.\n\nHackvent 2023 - Easy\n\nctf hackvent qrcode python flask geek-code grille-cipher ghidra reverse-engineering kdenlive deepskystacker video-noise volatility stegnaography stegsolve transfer-encoding\n\nHackvent 2023 was a ton of fun, and this year I made it through 22 of the 24 challenges (25 of 27 counting hidden challenge), only running out of time on two of the final three. The first seven plus a hidden challenge had QRcodes, Geek Codes, a Grille Cipher, a very simple RE challenge, image editing, memory analysis, steg, and a flag hidden in HTTP chunk metadata.\n\nHackvent 2023 - Medium\n\nctf hackvent bash bash-glob python bruteforce pcap wireshark tshark jinja2 ssti python flask regex steganography python-pil cryptography mersenne-twister randcrack mersenne-twiters-seed-recover hashing firmware gdb core-dump ghidra reverse-enginnering nettle cyberchef pwntools htb-spider\n\nThe seven medium challenges presented challenges across the Web Security, Fun, Network Security, Forensic, Crypto, and Reverse Engineering categories. While I’m not always a fan of cryptography challenges, both day 13 and 14 were fantastic, the former having me abuse a weak hash algorithm to bypass signing requirements, and the latter having me recover an encrypted file and key from a core dump. There’s also a Bash webserver with an unquoted variable, a PCAP with a flag in the TCP source ports, Jinja2 (Flask) template injection, steganography, and recovering the seed used for Python’s random function.\n\nHackvent 2023 - Hard\n\nctf hackvent linux-forensics backdoor dpkg dpkg-verify virus-total ghidra reverse-engineering docker gdb debugging bof python pwntools format-string libc ropgadget rsa exiftool python-pil arduino atmel-avr minecraft log4j log4shell cve-2021-44228 setuid setresuid dotnet dotpeek bruteforce csharp visual-studio\n\nThe hard challenges really took it up a level. My favorite was a .NET web application where I have to crack a licence key. There’s also finding and reversing a backdoored passwd binary, some binary exploitation where I have to crash the server to preserve the flag and read it from the dump, RSA via an image, USB forensics, and exploiting a Minecraft server with Log4Shell.\n\nHackvent 2023 - Leet\n\nctf hackvent crypto sagemath rsa bruteforce\n\nI only got to solve one of the three leet challenges. It was a cryptography challenge where I can brute force two parameters known to be between 0 and 1000 and then work backwards to figure out q based on a hint leaked in the output. From there, it’s simple RSA.\n\nHTB: Coder\n\nctf htb-coder hackthebox nmap windows smb netexec smbclient adcs teamcity reverse-engineering dotnet dotpeek youtube visual-studio keepass kpcli authenticate 2fa totp source-code javascript cicd git-diff evil-winrm bloodhound bloodhound-python CVE-2022-26923 secretsdump\n\nCoder starts with an SMB server that has a DotNet executable used to encrypt things, and an encrypted file. I’ll reverse engineer the executable and find a flaw that allows me to decrypt the file, providing a KeePass DB and file. I’ll use the file as a key to get in, and find the domain, creds, and a 2FA backup to a TeamCity server. I’ll reverse the Chrome plugin to understand how the backup works, and brute force the password to recover the TOTP seed. With that and the creds, I can log into the server and upload a diff that gets executed as part of a CI/CD pipeline. I’ll find Windows encrypted creds for the next user in a diff files stored with the TeamCity files. For root, I’ll abuse CVE-2022-26923 by registering a fake computer with a malicious DNS hostname to trick ADCS into thinking it’s the DC. From there, I can dump the hashes for the domain and get a shell as administrator.\n\nHTB Sherlock: Tick Tock\n\nctf dfir forensics sherlock-tick-tock sherlock-cat-dfir hackthebox kape teamviewer event-logs evtxecmd time-stomping merlin-c2 defender mft mftecmd\n\nA new employee gets a call from the “IT department”, who is actually a malicious actor. They get a TeamViewer connection and launch a Merlin C2 agent. I’ll see through the logs the processes it runs, where Defender catches it, and how it tries to mess with forensics by constantly changing the system time.\n\nHTB: Authority\n\nctf htb-authority hackthebox nmap windows iis smb netexec smbclient dig dns feroxbuster pwm ansible ansible-vault ansible2john hashcat wireshark responder evil-winrm adcs certipy esc1 ms-ds-machineaccountquota powerview addcomputer-py pass-the-cert silver-ticket htb-absolute htb-escape htb-support\n\nAuthority is a Windows domain controller. I’ll access open shares over SMB to find some Ansible playbooks. I’ll crack some encrypted fields to get credentials for a PWM instance. The PWM instance is in configuration mode, and I’ll use that to have it try to authenticate to my box over LDAP with plain text credentials. With those creds, I’ll enumerate active directory certificate services to find they are vulnerable to ESC1, with a twist. Rather than any user being able to enroll with the template, it’s any domain computer. I’ll add a fake computer to the domain and use that to get a certificate for the DC. That certificate doesn’t work directly, but I can use a pass-the-cert attack to dump hashes and get access as administrator.\n\nHTB Sherlock: Knock Knock\n\nctf dfir forensics sherlock-knock-knock sherlock-cat-dfir hackthebox pcap zeek pcap-nmap pcap-password-spray port-knocking knockd pcap-port-knocking ansible gonnacry\n\nKnock Knock is a Sherlock from HackTheBox that provides a PCAP for a ransomware incident. I’ll find where the attacker uses a password spray to compromise a publicly facing FTP server. In there, the attacker finds a configuration file for a port-knocking setup, and uses that to get access to an internal FTP server. On that server, they find lots of documents, including a reference to secrets on the company GitHub page. In that repo, the attacker found SSH creds, and used an SSH session to download GonnaCry ransomware using wget.\n\nHTB: CyberMonday\n\nhtb-cybermonday ctf hackthebox nmap debian php laravel feroxbuster off-by-slash nginx ffuf gitdumper source-code mass-assignment burp burp-repeater api jwt jwks python-jwt jwt-tool jwt-algorithm-confusion jwt-asymmetric ssrf ssrf-redis redis crlf-injection laravel-deserialization deserialization redis-migrate redis-blind laravel-decrypt phpggc docker container escape pivot chisel docker-registry snyk directory-traversal file-read docker-compose docker-capabilities docker-apparmor docker-shocker shocker youtube htb-pikaboo htb-seal htb-monitors htb-talkative\n\nCyberMonday is a crazy difficult box, most of it front-loaded before the user flag. I’ll start with a website, and abuse an off-by-slash nginx misconfiguration to read a .env file and the Git source repo. I’ll find a mass assignment vulnerability in the site allowing me to get admin access, which provides a new subdomain for a webhooks API. I’ll enumerate that API to find it uses JWTs and asymmetric crypto. I’ll abuse that to forge a token and get admin access to the API, where I can create webhooks. One of webhooks allows me to get the server to issue web requests, like an SSRF. I’ll abuse that, with a CRLF injection to interact with the Redis database that’s caching the Laravel session data. I’ll abuse that to get code execution in the web container. From there, I’ll find a Docker Registry container, and pull the API container image. Source code review shows additional API endpoints with an additional header required. I’ll abuse those to get file read on the API container, and leak the password of a user that works for SSH. To get to root, I’ll abuse a script designed to allow a user to run docker compose in a safe way. I’ll show a couple ways to do this, most of which center around giving the container privileges. In Beyond Root, I look at where the Python JWT library prevented me from forging a JWT, and edit it to allow me. I’ll also look at the off-by-slash vulnerability in the nginx config.\n\nHTB: Pilgrimage\n\nhtb-pilgrimage ctf hackthebox nmap debian git gitdumper feroxbuster cve-2022-44268 image-magick pngcrush sqlite inotifywait binwalk cve-2022-4510 file-read htb-scriptkiddie\n\nPilgrimage starts with a website that reduces image size. I’ll find an exposed Git repo on the site, and use it to see it’s using a version of Image Magick to do the image reduction that has a file read vulnerability. I’ll use that to enumerate the host and pull the SQLite database. That database gives a plaintext password that works for SSH. There’s a script run by root that’s monitor file uploads using inotifywait. When there’s a file, it runs binwalk on the file to look for executables. I’ll abuse a vulnerability in binwalk to get execution as root.\n\nHTB: Sandworm\n\nhtb-sandworm ctf hackthebox nmap ubuntu gpg pgp feroxbuster python flask ssti crypto firejail httpie cargo rust source-code cve-2022-31214 htb-cerberus\n\nSandworm offers the website for a secret intelligence agency. The website takes PGP-encrypted messages, and there’s a demo site that allows people to test their encrypting, decrypting, and signing. There’s a server-side template injection vulnerability in the verification demo, and I’ll abuse that to get a foothold on Sandworm. That access runs inside a Firejail jail. I’ll find creds for the next user in a httpie config. Then I’ll modify a Rust program running on a cron as the first user to get back to that user, this time outside the jail. With that access, I can exploit CVE-2022-31214 in Firejail to get root access. In Beyond Root, I’ll look at the Flask webserver and how works, and the Firejail config.\n\nHTB Sherlock: i-like-to\n\nctf dfir forensics sherlock-cat-dfir sherlock-i-like-to hackthebox moveit cve-2023-34362 sqli deserialization metasploit source-code kape memory-dump iis-logs powershell-history event-logs sql-dump webshell awen-webshell asp aspx mftexplorer mftecmd mft evtxecmd jq win-event-4624 win-event-4724\n\ni-like-to is the first Sherlock to retire on HackTheBox. It’s a forensics investigation into a compromised MOVEit Transfer server. I start with a memory dump and some collection from the file system, and I’ll use IIS logs, the master file table (MFT), PowerShell History logs, Windows event logs, a database dump, and strings from the memory dump to show that the threat actor exploited the SQL injection several times using the Metasploit exploit to run commands via deserialization, changing the password of the moveitsvc user and connecting over remote desktop, and then again to upload a webshell. The first attempt to upload the webshell was quarantined by Defender, but a different copy of the awen webshell was successful.\n\nHTB: Download\n\nctf hackthebox htb-download nmap ubuntu express cookies crypto hamc sha1 signature feroxbuster file-read burp burp-repeater prisma orm orm-injection npm cyberchef bruteforce python hashcat systemd psql postgresql pspy tty-pushback ioctl ioctl-tiocsti\n\nDownload starts off with a cloud file storage solution. I’ll find a subtle file read vulnerability that allows me to read the site’s source. With that source, I’ll identify an ORM injection that allows me to access other user’s files, and to brute force items from the database. With a password hash that is crackable, I’ll get SSH on the box. From there, I’ll identify a root cron that’s dropping to the postgres user to make database queries. I’ll exploit TTY pushback to get execution as root. In Beyond Root, I’ll dig more into the TTY pushback, and look at the file read vuln.\n\nHTB: Broker\n\nctf hackthebox htb-broker ubuntu nmap activemq cve-2023-46604 deserialization java nginx shared-object ldpreload sudo-nginx\n\nBroken is another box released by HackTheBox directly into the non-competitive queue to highlight a big deal vulnerability that’s happening right now. ActiveMQ is a Java-based message queue broker that is very common, and CVE-2023-46604 is an unauthenticated remote code execution vulnerability in ActiveMQ that got the rare 10.0 CVSS imact rating. I’ll exploit this vulnerability to get a foothold, and then escalate to root abusing the right to run nginx as root. I’ll stand up a rogue server to get file read. Then I’ll add PUT capabilities and write an SSH key for root. I’ll also show a method that was used to exploit a similar Zimbra miconfiguration (CVE-2022-41347). In this case, I’ll poison the LD preload file by running nginx with its error logs pointing at that file, and then load a malicious shared object.\n\nHTB: Topology\n\nhtb-topology ctf hackthebox nmap ubuntu feroxbuster ffuf subdomain latex pdftex file-read htaccess htpasswd hashcat gnuplot filter bypass htb-chaos\n\nTopology starts with a website for a Math department at a university with multiple virtual hosts. One has a utility for turning LaTeX text into an image. I’ll exploit an injection to get file read, and get the .htpassword file for a dev site, which has a shared password with a user on the box. To get to root, I’ll exploit a cron running gnuplot. In Beyond Root, I’ll look at an unintended filter bypass that allows for getting a shell as www-data by writing a webshell using LaTeX, as well as how one of the images that gnuplot is creating got broken and how to fix it.\n\nHTB: Gofer\n\nctf hackthebox htb-gofer nmap debian samba netexec smbclient smtp ffuf feroxbuster subdomain burp burp-proxy burp-repeater ssrf filter smtp-over-gopher gopher phishing odt libreoffice macros tcpdump sniffing heap binary-exploitation path-hijack youtube ghidra htb-travel htb-laser htb-jarmis htb-attended htb-re htb-rabbit\n\nGofer starts with a proxy that requires auth. I’ll bypass this using different HTTP verbs, and get access to the proxy that allows for gopher protocol. I’ll use that to interact with an internal SMTP server and send a phishing email to one of the users with a LibreOffice Writer (like Word) attachment. With a shell, I’ll use tcpdump to sniff traffic and catch the next user logging into the proxy. That password is shared on the system. This user has access to a simple notes program running as root. I’ll identify and exploit a use after free vulnerability and a path hijack just by playing with it. Then in Beyond Root, I’ll open it with Ghidra and see what it is doing, and take a look at the filter rules on the proxy.\n\nHTB: Jupiter\n\nctf htb-jupiter hackthebox nmap ffuf feroxbuster grafana postgresql cve-2019-9193 burp burp-repeater pspy shadow-simulation jupyter-notebook sattrack arftracksat\n\nJupiter starts with a Grafana dashboard. I’ll find an endpoint in Grafana that allows me to send raw SQL queries that are executed by the PostgreSQL database, and use that to get code execution on the host. Then I’ll exploit a cron running Shadow Simulator to pivot to the next user. Then, I’ll get access to a Jupyter Notebook, and use it to pivot again. To get a shell as root, I’ll exploit a satellite tracking program.\n\nHTB: Intentions\n\nhtb-intentions ctf hackthebox nmap ubuntu php laravel feroxbuster image-magick sqli second-order second-order-sqli sqli-union sqli-no-spaces sqlmap sqlmap-second-order ssrf arbitrary-object-instantiation msl scheme webshell upload git capabilities bruteforce python youtube file-read htb-extension htb-earlyaccess htb-nightmare\n\nIntentions starts with a website where I’ll find and exploit a second order SQL injection to leak admin hashes. I’ll find a version of the login form that hashes client-side and send the hash to get access as admin. As admin, I have access to new features to modify images. I’ll identify this is using ImageMagick, and abuse arbitrary object instantiation to write a webshell. With a foothold, I’ll find credentials in an old Git commit, and pivot to the next user. This user can run a hashing program as root to look for copywritten material. I’ll abuse it’s ability to specify a length to give myself file read as root by brute-forcing one byte at a time. In Beyond Root, I’ll look at some oddities of the file scanner.\n\n[HTB Blog] Exploiting Looney Tunables\n\nhackthebox htb-twomillion cve-2023-4911 looney-tunables glibc gnu-loader glibc-tunables syslog\n\nI wrote a blog post for the HackTheBox blog, Exploiting the Looney Tunables Vulnerability on HTB (CVE-2023-4911). In the post, I’ll give an overview of the vulnerability and how exploitation works (at a high level), and then show how to run one of the proof of concept (POC) exploits against the HackTheBox TwoMillion machine. I’ll also look at how to detect Looney Tunables exploitation in Linux log files.\n\nHTB: PC\n\nctf htb-pc hackthebox nmap ubuntu grpc grpcurl sqlite sqli sqlite-injection pyload cve-2023-0297 youtube\n\nPC starts with only SSH and TCP port 50051 open. I’ll poke at 50051 until I can figure out that it’s GRPC, and then use grpcurl to enumerate the service. I’ll find an SQL injection in the SQLite database and get some creds that I can use over SSH. To escalate, I’ll find an instance of pyLoad running as root and exploit a 2023 CVE to get execution. In Beyond Root, a video exploring the Python GRPC application to see how it works.\n\nHTB: Format\n\nhtb-format hackthebox ctf nmap ffuf subdomain debian feroxbuster gitea source-code php file-read arbitrary-write webshell burp burp-repeater nginx redis proxy-pass password-reuse python ssti wfuzz\n\nFormat hosts a primitive opensource microblogging site. I’ll abuse post creation to get arbitrary read and write on the host, and use that along with a proxy_pass bug to poison Redis, giving my account “pro” status. With the upgraded status, I can access a writable directory that I can drop a webshell into and get a foothold on the box. To pivot to the user, I’ll get shared credentials out of the Redis database. To get to root, I’ll exploit a template injection in a Python script to leak the secret. In Beyond Root, I’ll look at two unintended solutions that were patched (mostly) ten days after release.\n\nHTB: Aero\n\nctf hackthebox htb-aero nmap windows windows11 iis-arr feroxbuster themebleed cve-2023-38146 msstyles dll youtube visual-studio cpp cff-explorer dll-reverse-shell cve-2023-28252 nokoyawa filesystemwatcher htb-helpline\n\nThe Aero box is a non-competitive release from HackTheBox meant to showcase two hot CVEs right now, ThemeBleed (CVE-2023-38146) and a Windows kernel exploit being used by the Nokoyawa ransomware group (CVE-2023-28252). To exploit these, I’ll have to build a reverse shell DLL other steps in Visual Studio. In Beyond Root, I’ll look at a neat automation technique I hadn’t seen before using FileSystemWatcher to run an action on file creation.\n\nHTB: Snoopy\n\nctf hackthebox htb-snoopy ubuntu linux nmap bind dns feroxbuster ffuf subdomain mattermost password-reset zone-transfer directory-traversal file-read filter youtube python python-zipfile php tsig-dns python-aiosmtpd quoted-printable-encoding ssh-honeypot cowrie git git-apply cve-2023-23946 git-diff clamav clamscan cve-2023-20052 dmg xxe binary-edit htb-encoding\n\nSnoopy starts off with a website that has a file read / directory traversal vulnerability. I’ll use that to read a bind DNS configuration, and leak the keys necessary to make changes to the configuration. Once that’s updated, I can direct password reset emails for accounts on snoopy.htb to my server, and get access to a MatterMost instance. In there, I’ll abuse a slash command intended to provisions servers to have it connect to my SSH honeypot, and use those creds to get on the box. The next two steps both involve CVEs that didn’t have public exploits or even much documentation at the time Snoopy released. First I’ll exploit a CVE in git for how the apply command allows overwriting arbitrary files. Then I’ll exploit an XXE vulnerability in ClamAV’s clamscan utility to read root’s SSH key. In Beyond Root, I’ll reconfigure the box back before a patch from HackTheBox and show two unintended exploits that no longer work.\n\nHTB: Wifinetic\n\nhackthebox ctf htb-wifinetic nmap openwrt wpa reaver wps wps-bruteforce wash\n\nWifinetic is a realitively simple box, but based on some cool tech Felemos did to virtualize a wireless network. I’ll start with anonymous access to an FTP server that contains a backup file with a WPA wireless config. That config has a pre-shared key (password) in it, that also works over SSH. On the box, I’ll find a few wireless interfaces configured, and the reaver WPA WPS pin crackign tool. This tool allows me to brute force leak the pre-shared key for the wireless network, which happens to be the root password. In Beyond Root, I’ll look at the wash command, and why it doesn’t work well on this box despite being in almost all of the reaver tutorials.\n\nHTB: PikaTwoo\n\nhtb-pikatwoo hackthebox ctf nmap debian express feroxbuster modsecurity waf apisix uri-blocker-apisix openstack openstack-swift openstack-keystone android cve-2021-38155 ffuf apktool apk flutter flutter-obfuscate genymotion adb burp burp-proxy burp-repeater certificate-pinning frida sqli chat-gpt rsa cve-2021-43557 bypass api swagger nginx cve-2021-35368 youtube nginx-temp-files kubernetes minikube kubectl podman cve-2022-24112 cr8escape cve-2022-0811 crio kernel-parameters crashdump htb-dyplesher htb-canape htb-pikaboo htb-routerspace htb-encoding htb-pollution htb-vessel\n\nPikaTwoo is an absolute monster of an insane box. I’ll start by abusing a vulnerability in OpenStack’s KeyStone to leak a username. With that username, I’ll find an Android application file in the OpenStack Swift object storage. The application is a Flutter application built with the obfuscate option, making it very difficult to reverse. I’ll set up an emulator to proxy the application traffic, using Frida to bypass certificate pinning. I’ll find an SQL injection in the API, and leak an email address. I’ll exploit another vulenrability in the APISIX uri-block WAF to get access to private documents for another API. There, I’ll reset the password for the leaked email, and get authenticated access. I’ll exploit a vulnerability in the modsecurity core rule set to bypass the WAF and get local file include in that API. From there, I’ll abuse nginx temporary files to get a reverse shell in the API pod. I’ll leak an APISIX secret from the Kubernetes secrets store, and use that with another vulnerability to get execution in the APISIX pod. I’ll find creds for a user in a config file and use them to SSH into the host. From there, I’ll abuse the Cr8Escape vulnerability to get execution as root.\n\nHTB: MonitorsTwo\n\nhtb-monitorstwo hackthebox ctf nmap ubuntu cacti cve-2022-46169 command-injection metasploit wfuzz burp-repeater burp docker john cve-2021-41091 cve-2021-41103 htb-monitors\n\nMonitorsTwo starts with a Cacti website (just like Monitors). There’s a command injection vuln that has a bunch of POCs that don’t work as of the time of MonitorsTwo’s release. I’ll show why, and exploit it manually to get a shell in a container. I’ll pivot to the database container and crack a hash to get a foothold on the box. For root, I’ll exploit a couple of Docker CVEs that allow for creating a SetUID binary inside the container that I can then run as root on the host.\n\nHTB: OnlyForYou\n\nhackthebox htb-onlyforyou ctf nmap ffuf subdomain flask ubuntu source-code file-read directory-traversal burp burp-repeater python-re command-injection filter chisel foxyproxy gogs neo4j cypher-injection cypher crackstation pip setup-py htb-opensource\n\nOnlyForYou is about exploiting Python and Neo4J. I’ll start by exploiting a Flask website file disclosure vulnerability due to a misunderstanding of the os.path.join function to get the source for another site. In that source, I’ll identify a command injection vulnerability, and figure out how bypass the filtering with a misunderstanding of the re.match function. Exploiting this returns a shell. I’ll pivot to the next user by abusing a Cypher Injection in Neo4J, and then escalate to root by exploiting an unsafe sudo rule with pip.\n\nHTB: Mailroom\n\nhtb-mailroom hackthebox ctf nmap ubuntu debian feroxbuster wfuzz gitea subdomain execute-after-redirect xss nosql-injection nosql-injection-over-xss xsrf command-injection filter keepass strace trace ptrace-scope youtube htb-retired htb-fingerprint htb-previse\n\nMailroom has a contact us form that I can use to get cross site sripting against an admin user. I’ll use this XSS to exploit a NoSQL injection vulnerability in a private site, brute forcing the user’s password and exfiling it back to myself. From this foothold, I’ll exploit into the container running the site and find more credentials, pivoting to another user. This user is opening their KeePass database, and I’ll use strace to watch them type their password into KeePass CLI, which I can use to recover the root password. In Beyond Root, a quick dive into how the KeePass password was automated.\n\nHTB: Busqueda\n\nhackthebox htb-busqueda ctf nmap flask ubuntu searchor feroxbuster python-eval command-injection burp burp-repeater password-reuse gitea htb-forgot\n\nBusqueda presents a website that gives links to various sites based on user input. Under the hood, it is using the Python Searchor command line tool, and I’ll find an unsafe eval vulnerability and exploit that to get code execution. On the host, the user can run sudo to run a Python script, but I can’t see the script. I’ll find a virtualhost with Gitea, and use that along with different creds to eventually find the source for the script, and identify how to run it to get arbitrary execution as root.\n\nHTB: Agile\n\nctf hackthebox htb-agile nmap ubuntu flask python feroxbuster file-read werkzeug werkzeug-debug flask-debug-pin youtube python-venv pytest selenium chrome chrome-debug sudoedit cve-2023-22809 idor flask-cookie htb-bagel htb-opensource htb-rainyday htb-noter\n\nAgile is a box hosting a password manager solution. There’s a file read vulnerability in the application, and the Flask server is running in debug mode. I’ll use those to get execution on the box, which turns out to be a bit trickier than expected. From there, I’ll dump a user’s password out of the database and get an SSH shell. There’s a testing version of the app running as well, and I’ll abuse Chrome debug to get credentials from the testing Chrome instance to pivot to the next user. This user can use sudoedit to modify files related to the test server. I’ll abuse CVE-2023-22809 to write into the virtual environment that root is sourcing to get root. In Beyond Root, I’ll show two unintended vulnerabilities in the web application that got patched about a week after release.\n\nHTB: Cerberus\n\nctf htb-cerberus hackthebox nmap ttl wireshark dig ffuf icinga github cve-2022-24716 cve-2022-24715 file-read arbitrary-write icinga-module firejail cve-2022-31214 sssd hashcat chisel evil-winrm manageengine adselfservice cve-2022-47966 metasploit saml saml-decoder\n\nCerberus is unique in that it’s one of the few boxes on HTB (or any CTF) that has Windows hosting a Linux VM. To start, I can only access an IcingaWeb2 instance running in the VM. I’ll exploit two CVEs in Icinga, first with file read to get credentials, and then a file write to write a fake module and get execution. Inside the VM, I’ll exploit Firejail to get root. I’ll also get creds for a user on the host from SSSD, and then tunnel through the VM to get WinRM access to the host. To get SYSTEM on the host, I’ll exploit a SAML vulnerability in ManageEngine’s ADSelfService Plus.\n\nHTB: Derailed\n\nctf hackthebox htb-derailed nmap ruby rails debian ffuf idor xss wasm webassembly javascript bof wasm-bof pattern-create command-injection cors chatgpt python file-read open-injection open-injection-ruby openmediavault sqlite git hashcat chisel deb deb-package youtube htb-investigation htb-pikaboo htb-onetwoseven\n\nDerailed starts with a Ruby on Rails web notes application. I’m able to create notes, and to flag notes for review by an admin. The general user input is relatively locked down as far as cross site scripting, but I’ll find a buffer overflow in the webassembly that puts the username on the page and use that to get a XSS payload overwriting the unfiltered date string. From there, I’ll use the administrator’s browser session to read an admin page with a file read vulnerability where I can get the page source, and abuse an open injection in Ruby (just like in Perl) to get execution. I’ll pivot uses using creds from the database. To get root, I’ll exploit openmediavault’s RPC, showing three different ways - adding an SSH key for root, creating a cron, and installing a Debian package. In Beyond Root, I’ll debug the webassembly in Chromium dev tools.\n\nHTB: Socket\n\nctf hackthebox htb-socket nmap ffuf qrcode python ubuntu flask websocket python-websockets pyinstaller burp burp-proxy burp-repeater burp-repeater-websocket websocket-sqli username-anarchy crackmapexec pyinstaller-spec pyinstxtractor pycdc htb-forgot htb-absolute\n\nSocket has a web application for a company that makes a QRcode encoding / decoding software. I’ll download both the Linux and Windows application, and through dynamic analysis, see web socket connections to the box. I’ll find a SQLite injection over the websocket and leak a password and username that can be used for SSH. That user is able to run the PyInstaller build process as root, and I’ll abuse that to read files, and get a shell. In Beyond Root, I’ll look at pulling the Python source code from the application, even though I didn’t need that to solve the box.\n\nHTB: Inject\n\nctf htb-inject hackthebox nmap ubuntu file-read directory-traversal tomcat feroxbuster burp-repeater burp spring-cloud-function-spel-injection java java-sprint maven snyk spring-cloud-function-web cve-2022-22963 command-injection brace-expansion ansible pspy ansible-playbook\n\nInject has a website with a file read vulnerability that allows me to read the source code for the site. The source leaks that it’s using SpringBoot, and have a vulnerable library in use that allows me to get remote code execution. I’ll show how to identify this vulnerability both manually and using Snyk. The root step is about abusing a cron that’s running the Ansible automation framework.\n\nHTB: Pollution\n\nhtb-pollution ctf hackthebox debian nmap redis redis-cli feroxbuster ffuf subdomain mybb burp burp-history-export xxe htpasswd hashcat source-code php lfi php-filter-injection php-fpm fastcgi express nodejs snyk prototype-pollution htb-updown htb-encoding\n\nPollution starts off with a website where I can find a token in a forum post that has a Burp history export attached. With that token, I can escalate my account to admin, and get access to an endpoint vulnerable to XML external entity (XXE) injection. With that, I’ll read files, including the source code for the site to get access to redis, where I’ll modify my state to get access to the developers site. That site has a PHP local file include (LFI) that I can exploit with filter injection to get code execution. This filter injection technique has become popular, but was relatively unknown at the time of Pollution’s release. I’ll pivot to the next user by exploiting PHP’s FastCGI Process Manager (PHP-FPM), where I’ll get access to the source code for a NodeJS / Express API in development. That API has a prototpye pollution vulnerability, which I can exploit to get execution and a shell as root. In beyond root, I take a quick look at the max length of a URL encountered during the XXE exploit.\n\nHTB: Stocker\n\nhackthebox ctf htb-stocker nmap ubuntu ffuf subdomain feroxbuster burp burp-repeater chatgpt express nodejs nosql nosql-auth-bypass nosql-injection xss serverside-xss pdf file-read\n\nStocker starts out with a NoSQL injection allowing me to bypass login on the dev website. From there, I’ll exploit purchase order generation via a serverside cross site scripting in the PDF generation that allows me to read files from the host. I’ll get the application source and use a password it contains to get a shell on the box. The user can run some NodeJS scripts as root, but the sudo rule is misconfiguration that allows me to run arbirtray JavaScript, and get a shell as root.\n\nHTB: Escape\n\nctf htb-escape hackthebox nmap crackmapexec windows smbclient mssql mssqlclient xp-cmdshell responder net-ntlmv2 hashcat winrm evil-winrm certify adcs rubeus certipy esc1 silver-ticket pass-the-hash xp-dirtree htb-querier htb-hackback htb-proper openssl\n\nEscape is a very Windows-centeric box focusing on MSSQL Server and Active Directory Certificate Services (ADCS). I’ll start by finding some MSSQL creds on an open file share. With those, I’ll use xp_dirtree to get a Net-NTLMv2 challenge/response and crack that to get the sql_svc password. That user has access to logs that contain the next user’s creds. To get administrator, I’ll attack active directory certificate services, showing both certify and certipy. In Beyond Root, I’ll show an alternative vector using a silver ticket attack from the first user to get file read as administrator through MSSQL.\n\nHTB: Soccer\n\nhackthebox ctf htb-soccer nmap ffuf subdomain ferobuster express ubuntu tiny-file-manager default-creds upload webshell php websocket burp sqli websocket-sqli boolean-based-sqli sqlmap doas dstat\n\nSoccer starts with a website that is managed over Tiny File Manager. On finding the default credentials, I’ll use that to upload a webshell and get a shell on the box. With this foothold, I’ll identify a second virtual host with a new site. That site uses websockets to do a validation task. I’ll exploit an SQL injection over the websocket to leak a password and get a shell over SSH. The user is able to run dstat as root using doas, which I’ll exploit by crafting a malicious plugin.\n\nHTB: TwoMillion\n\nctf htb-twomillion hackthebox nmap ffuf feroxbuster php ubuntu javascript burp burp-repeater api command-injection cve-2023-0386 htb-invite-challenge cyberchef youtube\n\nTwoMillion is a special release from HackTheBox to celebrate 2,000,000 HackTheBox members. It released directly to retired, so no points and no bloods, just for run. It features a website that looks like the original HackTheBox platform, including the original invite code challenge that needed to be solved in order to register. Once registered, I’ll enumerate the API to find an endpoint that allows me to become an administrator, and then find a command injection in another admin endpoint. I’ll use database creds to pivot to the next user, and a kernel exploit to get to root. In Beyond Root, I’ll look at another easter egg challenge with a thank you message, and a YouTube video exploring the webserver and it’s vulnerabilities.\n\nHTB: Bagel\n\nctf htb-bagel hackthebox nmap python flask source-code file-read dotnet websocket ffuf source-code reverse-engineering proc wscat dnspy json json-deserialization dotnet-deserialization json.net\n\nBagel is centered around two web apps. The first is a Flask server. I’ll exploit a file read vulnerability to locate and retrieve the source. In that source, I see how it connects to the other .NET server over web sockets. I’ll abuse the first file read to get the DLL for that server. On reversing that DLL, I’ll find a JSON derserialization issue, and exploit it to get file read and the user’s SSH key. I’ll pivot to the next user using creds from the DLL. To get root, I’ll exploit a sudo rule that let’s the user run dotnet as root.\n\nHTB: Absolute\n\nhtb-absolute hackthebox ctf windows iis crackmapexec ldapsearch dnsenum feroxbuster exiftool username-anarchy kerbrute as-rep-roast hashcat kerberos kinit klist bloodhound bloudhound-python rpc dynamic-reversing wireshark shadow-credentials certipy krbrelay visual-studio runascs krbrelayup rubeus dcsync htb-outdated\n\nAbsolute is a much easier box to solve today than it was when it first released in September 2022. At that time, many of the tools necessary to solve the box didn’t support Kerberos authentication, forcing the place to figure out ways to make things work. Still, even today, it’s a maze of Windows enumeration and exploitation that starts with some full names in the metadata of images. I’ll figure out the username format for the domain, and AS-REP-Roast to get creds. LDAP enumeration leads to the next set of creds. Access to a share provides a Nim binary, where some dynamic analysis provides yet another set of creds. This user is able to modify a group and from there modify a user to add a shadow credential and finally get a shell on the box. To get administrator access, I’ll abuse relaying Kerberos, showing both KrbRelay to add a user to the administrators group, and KrbRelayUp to get the machine account hash and do a DC sync attack.\n\nHTB: Precious\n\nctf hackthebox htb-precious nmap subdomain ffuf ruby phusion passenger nginx exiftool pdfkit feroxbuster cve-2022-25765 command-injection bundler yaml-deserialization youtube\n\nPrecious is on the easier side of boxes found on HackTheBox. It starts with a simple web page that takes a URL and generates a PDF. I’ll use the metadata from the resulting PDF to identify the technology in use, and find a command injection exploit to get a foothold on the box. Then I’ll find creds in a Ruby Bundler configuration file to get to user. To get to root, I’ll exploit a yaml deserialization vulnerability in a script meant to manage dependencies. In Beyond Root, I’ll explore the Ruby web application, how it’s hosted, and fix the bug that doesn’t allow me to fetch a PDF of the page itself.\n\nHTB: Interface\n\nhtb-interface hackthebox ctf nmap ubuntu next-js feroxbuster subdomain api ffuf dompdf php cve-2022-28368 webshell upload pspy arithmetic-expression-injection quoted-expressinion-injection exiftool symbolic-link htb-rope htb-wall\n\nInterface starts with a site and an API that, after some fuzzing / enumeration, can be found to offer an endpoint to upload HTML and get back a PDF, converted by DomPDF. I’ll exploit a vulnerability in DomPDF to get a font file into a predictable location, and poison that binary file with a PHP webshell. To escalate, I’ll abuse a cleanup script with Arithmetic Expression Injection, which abuses the [[ \"$VAR\" -eq \"something\" ]] syntax in Bash scripts. In Beyond Root, I’ll look at an unintended abuse of another cleanup script and how symbolic links could (before the box was patched) be used to overwrite and change the ownership of arbitrary files.\n\nHTB: Flight\n\nhtb-flight hackthebox ctf nmap subdomain crackmapexec windows php apache feroxbuster file-read directory-traversal responder net-ntlmv2 password-spray lookupsid rpc ntlm-theft runascs iis webshell aspx rubeus machine-account dcsync secretsdump psexec\n\nFlight is a Windows-centered box that puts a unique twist by showing both a Apache and PHP website as well as an internal IIS / ASPX website. I’ll get the PHP site to connect back to my server on SMB, leaking a Net NTLMv2, and crack that to get a plaintext password. I’ll get a list of domain users over RPC, and password spray that password to find another user using the same password. That user has write access to a share, where I’ll drop files designed to provoke another auth back to my server to catch another Net NTLMv2. That user has access to the new IIS site, and can write an ASPX webshell to get a shell as the IIS account. As a service account, it will authenticate over the network as the machine account. I’ll abuse that to get the administrator’s hash and from there a shell.\n\nHTB: MetaTwo\n\nhtb-metatwo ctf hackthebox nmap wfuzz php wordpress bookingpress cve-2022-0739 sqli sqlmap john xxe cve-2021-29447 credentials passpie pgp gpg\n\nMetaTwo starts with a simple WordPress blog using the BookingPress plugin to manage booking events. I’ll find an unauthenticated SQL injection in that plugin and use it to get access to the WP admin panel as an account that can manage media uploads. I’ll exploit an XML external entity (XXE) injection to read files from the host, reading the WP configuration, and getting the creds for the FTP server. On the FTP server I’ll find a script that is sending emails, and use the creds from that to get a shell on the host. The user has a Passpie instance that stores the root password. I’ll crack the PGP key protecting the password and get a shell as root.\n\nHTB: Investigation\n\nctf hackthebox htb-investigation nmap php exiftool feroxbuster cve-2022-23935 command-injection youtube perl open-injection open-injection-perl event-logs msgconvert mutt mbox evtx-dump jq ghidra reverse-engineering race-condition htb-pikaboo htb-meta\n\nInvestigation starts with a website that accepts user uploaded images and runs Exiftool on them. This version has a command injection. I’ll dig into that vulnerability, and then exploit it to get a foothold. Then I find a set of Windows event logs, and analyze them to extract a password. Finally, I find a piece of malware that runs as root and understand it to get execution.\n\nHTB: Encoding\n\nhackthebox htb-encoding ctf nmap php file-read lfi feroxbuster wfuzz subdomain ssrf filter php-filter-injection youtube source-code git git-manual gitdumper python flask proxy uri-structure burp burp-repeater git-hooks systemd service chatgpt parse_url\n\nEncoding centered around a web application where I’ll first identify a file read vulnerability, and leverage that to exfil a git repo from a site that I can’t directly access. With that repo, I’ll identify a new web URL that has a local file include vulnerability, and leverage a server-side request forgery to hit that and get execution using php filter injection. To get to the next user I’ll install a malicious git hook. That user is able to create and start services, which I’ll abuse to get root. In Beyond root, I’ll look at an SSRF that worked for IppSec but not me, and show how we troubleshot it to find some unexpected behavior from the PHP parse_url function.\n\nHTB: BroScience\n\nhackthebox ctf htb-broscience nmap php feroxbuster file-read directory-traversal filter wfuzz dotdotpwn psql postgresql php-deserialization deserialization hashcat command-injection openssl\n\nHacking BroScience involves using a directory traversal / file read vulnerability (minus points to anyone who calls it an LFI) to get the PHP source for a website. First I’ll use that code to forge an activation token allowing me to register my account. Then, the source gives the information necessary to exploit a deserialization vulnerability by building a malicious PHP serialized object, encoding it, and sending it as my cookie. This provides a webshell and a shell on the box. I’ll find some hashes in the database that can be cracked, leading to the next user. The wrinkle here is to include the site-wide salt. For root, there’s a command injection in a script that’s checking for certificate expiration. I’ll craft a malicious certificate that performs the injection to get execution as root.\n\nHTB: Sekhmet\n\nhackthebox htb-sekhmet ctf nmap ffuf subdomain nodejs express feroxbuster deserialization json-deserialization modsecurity waf filter bypass sssd kerberos zipcrypto bkcrack known-plaintext crypto hashcat kinit klist ksu tunnel smbclient proxychains command-injection watch tmux ldapsearch ldap password-spray kerbrute winrm evil-winrm dpapi mimikatz pypykatz edge-saved-passwords applocker applocker-bypass sharp-chromium sharp-collection htb-hathor htb-anubis htb-celestial htb-nodeblog htb-ransom htb-access\n\nSekhmet has Windows and Linux exploitation, and a lot of Kerberos. I’ll start exploiting a ExpressJS website vulnable to a JSON deserialization attack. To get execution, I’ll have to bypass a ModSecurity web application firewall. This lands me in a Linux VM. In the VM, I’ll find a backup archive and break the encryption using a known plaintext attack on ZipCrypto to get another user’s domain hash. On cracking that, I’m able to get root on the VM. As the domain user, I’ll access a share, and figure that there’s a text file being updated based on the mobile attribute for four users in the AD environment. There’s a command injection in the script that’s updating, and I’ll use that to get a hash for the user running the script. After password spraying that password to find another user, I’ll get access to the host and find DPAPI protected creds in the user’s Edge instance. On cracking those, I get domain admin credentials.\n\nHTB: Vessel\n\nctf htb-vessel hackthebox nmap ffuf nodejs express feroxbuster git gitdumper express-escape-functions escape-functions mysqljs mysqljs-escape-functions CVE-2022-24637 source-code github mass-assignment log-poisoning webshell php python pyinstaller pyinstxtractor uncompyle6 python-pyside2 python-qt pdfcrack cve-2022-0811 virus-total pinns crio kernel-parameters crashdump youtube htb-updown\n\nVessel is a really clever box with some nice design. Several of the bugs are publicly disclosed, but at the time of release didn’t have public exploit, so they required digging into the tech to figure out how to abuse them. I’ll start by pulling a git repo from the website, and find an unsafe call to MySQL from Express. This bug is surprising, as the code looks good, and I’ll dig into it more in Beyond Root. After abusing the type confusion to get SQL injection and a hash, I’ll log in and find a link to a new subdomain hosting an instance of Open Web Analytics. I’ll abuse an information discloser vulnerability to get admin access to OWA, and then a mass assignment vuln to move a log into a web-accessible directory and poison that log to get execution and a shell. I’ll reverse a PyInstaller-generated exe to recover a password to pivot to the next user. From there, I’ll abuse a SetUID binary that’s part of CRI-O to change kernel parameters and get a shell as root.\n\nHTB: Extension\n\nhackthebox htb-extension ctf nmap subdomain password-reset laravel feroxbuster roundcube gitea burp burp-repeater laravel-csrf wfuzz api hashcat idor firefox-extension xss filter firefox-dev-tools gitea-api password-reuse hash-extension hash-extender command-injection deepce docker docker-escape docker-sock htb-altered htb-backend htb-backendtwo htb-ransom htb-intense htb-feline\n\nExtension has multiple really creative attack vectors with some unique features. I’ll start by leaking usernames and hashes, getting access to the site and to the email box for a few users. Abusing an IDOR vulnerability I’ll identify the user that I need to get access as next. I’ll enumerate the password reset functionality, and notice that only the last few characters of the token sent each time are changing. I’m not able to brute force a single token, but I can submit hundreds of resets set the odds such that I can guess a valid on in only a few guesses. With this access, I get creds for a Gitea instance, where I’ll find a custom Firefox extension. I’ll abuse that extension, bypassing the cross site scripting filters to hit the Gitea API and pull down a backup file from another user. That backup gives SSH access to the host, and some password reuse pivots to the next user. With this access, I’ll identify a hash extension vulnerability in the web application, and abuse that to access a command injection and get RCE in the website container. The Docker socket inside the container is writable, allowing for a simple container breakout.\n\nHTB: Mentor\n\nhtb-mentor hackthebox ctf nmap youtube snmp fastapi flask feroxbuster snmp-brute onesixtyone snmpwalk snmpbulkwalk command-injection postgresql chisel psql crackstation password-reuse htb-forgot htb-sneaky\n\nMentor focuses on abusing a FastAPI API and SNMP enumeration. I’ll brute force a second community string that gives more access than the default “public” string. With that, I’ll get access to the running process command lines, and recover a password. With that password, I can get a valid auth token to the API, and find a backup endpoint that has a command injection vulnerability, which I’ll exploit to get a shell. From inside the web container, I’ll find creds for the database and dump the users table. On cracking the hash for one user, I can get SSH access to the host. For root, I’ll find a password in the SNMP configuration.\n\nHTB: Forgot\n\nhackthebox htb-forgot ctf nmap flask burp burp-proxy varnish cache cache-abuse web-cache-deception feroxbuster ffuf host-header-injection htb-response tensorflow cve-2022-29216 command-injection\n\nForgot starts with a host-header injection that allows me to reset a users password and have the link sent to them be to my webserver. From there, I’ll abuse some wildcard routes and a Varnish cache to get a cached version of the admin page, which leaks SSH creds. To get to root, I’ll abuse an unsafe eval in TensorFlow in a script designed to check for XSS.\n\nHTB: Awkward\n\nhackthebox ctf htb-awkward nmap webpack vuejs wfuzz auth-bypass jwt jwt-io burp burp-repeater hashcat ssrf express api express-api awk awk-injection file-read hashcat-jwt python-jwt youtube python-requests xpad pspy mail gtfobins pm2 command-injection\n\nAwkward involves abusing a NodeJS API over and over again. I’ll start by bypassing the auth check, and using that to find an API where I can dump user hashes. I’ll find another API where I can get it to do a SSRF, and read internal documentation about the API. In that documentation, I’ll spot an awk injection that leads to a file disclosure vulnerability. With that, I’ll locate a backup archive and get a password from a config file that allows for SSH access. To pivot to root, I’ll abuse the website again with symlinks to have it write to a file that I can’t modify, which triggers an email being sent. I’ll write a command injection payload to get execution as root. In Beyond Root, I’ll show two unintended ways that involved getting a shell as www-data. One was patched two days after release, so I’ll show how I make the machine vulnerable again. The other is a sed parameter injection.\n\nHTB: RainyDay\n\nhackthebox ctf htb-rainyday nmap ffuf subdomain docker container feroxbuster idor john chisel foxyproxy socks proxychains api flask flask-cookie python python-requests youtube flask-unsign jail python-use-after-free unicode emoji john-rules htb-scanned\n\nRainyDay is a different kind of machine from HackTheBox. It’s got a lot of enumerating and fuzzing to find next steps and a fair amount of programming required to solve. I’ll start by exploiting an IDOR vulnerability to leak hashes, cracking one and getting access to a website that manages containers. From inside a container, I can reach a dev instance and an API that effectively let’s me apply a given regex to a file on the filesystem, which I’ll turn into a file read exploit with some Python scripting. From there I can leak the flask secret key and get into another user’s account, where I’ll find a misconfiguration that allows me to escape the container’s jail and read the user’s private SSH key. From the host, I’ll first exploit Python itself to get execution as the next user. Then I’ll abuse unicode characters to slip more characters than allowed into a hashing program, and use that to brute force a secret salt, allowing me to crash the root hash. In Beyond Root, I’ll look at a mistake that allowed for skipping a large part of this box.\n\nHTB: Photobomb\n\nhtb-photobomb ctf hackthebox bash bash-test nmap feroxbuster image-magick command-injection injection burp burp-repeater path-hijack bash-builtins sudo-setenv\n\nPhotobomb was on the easy end of HackTheBox weekly machines. I’ll find credentials in a JavaScript file, and use those to get access to an image manipulation panel. There’s a command injection vulnerability in the panel, which I’ll use to get execution and a shell. For privesc, the user can run a script as root, and there are two ways to get execution from this. The first is a find command that is called without the full path. The second is abusing the disabled Bash builtin [.\n\nHTB: Response\n\nhackthebox ctf htb-response nmap linux ffuf subdomain feroxbuster burp burp-repeater burp-proxy hmac oracle foxy-proxy python youtube proxy ssrf socket-io ldap docker ldif ldapadd ldappasswd chatgpt wireshark forensics cross-protocol-request-forgery cprf xp-ssrf javascript htb-luke ftp directory-traversal python-https certificate openssl dns smtp python-smptd virus-total meterpreter crypto mettle bulk-extractor openssh partial-ssh-key rsa rsactftool htb-proper htb-crossfittwo\n\nResponse truly lived up to the insane rating, and was quite masterfully crafted. To start, I’ll construct a HTTP proxy that can abuse an SSRF vulnerability and a HMAC digest oracle to proxy traffic into the inner network and a chat application. With access as guest, I’ll find bob is eager to talk to the admin. I’ll redirect the LDAP auth to my host, where my LDAP server will grant access as admin, and I can talk to bob. bob speaks of an FTP server and gives creds, but I can’t access it. I’ll write a JavaScript payload that will above a cross protocol request forgery via a link sent to bob to read credentials off the FTP server. Next I’ll add my host as a computer to get scanned by a scanning program, and exploit a directory traversal in the state name of my TLS certificate to read the next user’s SSH key. Finally, I’ll find a PCAP and a core dump from a meterpreter process. I’ll write a decoder for the traffic, and, after pulling the AES key from the core dump memory, decrypt the traffic and pull a copy of a zip file that was exfiled from root’s home directory. Inside that zip is a screenshot which includes just the bottom of the user’s private key, as well as the authorized_keys file with their public key. I’ll manually parse the two files to get all I need to reconstruct the full private key and get a shell as root.\n\nHTB: Ambassador\n\nhtb-ambassador hackthebox ctf nmap feroxbuster grafana searchsploit file-read directory-traversal consul msfconsole tunnel\n\nAmbassador starts off with a Grafana instance. I’ll exploit a directory traversal / file read vulnerability to read the config and get the password for the admin. From the Grafana admin panel, I’ll get creds to the MySQL instance. Logging into that leaks credentials for a developer and I can get a shell with SSH. This developer has access to a git repo that leaks a token used for Consul in an old commit. I’ll use that to interact with Consul and get execution as root. I’ll show doing it both manually as well as using Metasploit.\n\nHTB: UpDown\n\nhtb-updown hackthebox ctf nmap ssrf feroxbuster wfuzz subdomain git gitdumper source-code php phar upload php-disable-functions php-proc_open python2-input python easy-install htb-crimestopper php-filter-injection youtube htb-crimestoppers dfunc-bypasser\n\nUpDown presents a website designed to check the status of other webpages. The obvious attack path is an server-side request forgery, but nothing interesting comes from it. There is a dev subdomain, and I’ll find the git repo associated with it. Using that, I’ll figure out how to bypass the Apache filtering, and find a code execution vulnerability out of an LFI using the PHP Archive (or PHAR) format. With a shell, I’ll exploit a legacy Python script using input, and then get root by abusing easy_install.\n\nHTB: Shoppy\n\nhackthebox ctf htb-shoppy nmap feroxbuster nosql-injection mattermost nosql-auth-bypass burp burp-repeater nodejs mongodb crackstation reverse-engineering sudo ghidra docker docker-group youtube htb-mango htb-nodeblog htb-goodgames\n\nShoppy was one of the easier HackTheBox weekly machines to exploit, though identifying the exploits for the initial foothold could be a bit tricky. I’ll start by finding a website and use a NoSQL injection to bypass the admin login page, and another to dump users and hashes. With a cracked hash, I’ll log into a Mattermost server where I’ll find creds to the box that work for SSH. From there, I’ll need the lighest of reverse enginnering to get a static password from a binary, which gets me to the next user. This user is in the docker group, so I’ll load an image mounting the host file system, and get full disk access. I’ll show two ways to get a shell from that. In Beyond Root, a video walkthrough of the vulnerable web-server code, showing how the injections worked, and fixing them.\n\nHTB: Health\n\nctf htb-health hackthebox nmap feroxbuster laravel redirect hook gogs ssrf python flask sqli sqli-union sqlite sqli-sqlite hashcat sha256 chatgpt htb-ransom\n\nHealth originally released as easy, but was bumped up to Medium three days later. That’s because there’s a tricky SQL injection that you have to exploit via a redirect, which eliminates things like sqlmap. After using the SSRF into redirect to exploit Gogs and leak the user table, I’ll crack the hash and get SSH access to the box. For root, I’ll exploit a cron that runs through the website by generating tasks directly in the database, bypassing the filtering on the website.\n\n2022 SANS Holiday Hack Challenge, featuring KringleCon V: Golden Rings\n\nctf sans-holiday-hack\n\nThe 2022 SANS Holiday Hack Challenge is a battle to recover the five golden rings stolen from Santa by Grinchum. This all takes place at the North Pole where Santa is hosting the 5th annual KringleCon, including talks from 11 leaders in the information security community. In addition to the talks, there are six objectives to solve, each consisting of multiple terminals and/or challenges. In solving all of these, I’ll recover the five rings, and in the process clear the magic that’s created Grinchum, turning him back into Smilegol. As usual, the challenges were interesting and set up in such a way that it was very beginner friendly, with lots of hints and talks to ensure that you learned something while solving.\n\nHackvent 2022 - Hard\n\nctf hackvent physical radio universal-radio-hacker nrz nrz-s python python-pil python-pyzbar pulse-view sigrok serial uart 7z john hashcat john-mask hashcat-mask aes aes-ecb heap pwntools unicod\n\nDays fifteen through twentyone were the hard challenges. There were some really great coding challenges. I loved day sixteen, where I’ll have to check tons of QRcodes to find the flag. And day twenty, where I’ll abuse a unicode bug to brute force padding on an AES encryption. There were couple signals analysis challenges, including a radio wave and serial line decode. There was also a neat trick abusing how zip archives handle long passwords, and a nice relateively beginner-friendly heap exploitation.\n\nHackvent 2022 - Medium\n\nctf hackvent social-media osint ghidra virus-total text4shell cve-2022-42889 ssti tcpdump sqli postgresql burp burp-repeater idor aws imds aws-secretsmanager gtfobin prototype-pollution xss reflective-xss youtube\n\nThe medium 2022 Hackvent challenges covered days eight through fourteen, and included one more hidden challenge. They get a bit more into exploitation, with SQL injection, AWS / cloud, prototype pollution, some OSINT, and a really interesting reflective XSS attack.\n\nHackvent 2022 - Easy\n\nctf hackvent qrcode python python-pil zbarimg python-null-bytes javascript pcap gcode wireshark blockchain solidity youtube metamask remix python-web3 micro-qr\n\nHackvent is one of the three holiday CTFs I try to play every December. This year I made it through 20 of the first 21 days before life got too busy. The first seven challenges (eight if you count the hidden challenge) were rated easy, and included some interesting programming challenges, some blockchain, and lots of QR codes.\n\nHTB: Support\n\nhackthebox ctf htb-support nmap ldapsearch crackmapexec smbclient dotnet wires"
    }
}