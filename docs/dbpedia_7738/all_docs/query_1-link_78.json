{
    "id": "dbpedia_7738_1",
    "rank": 78,
    "data": {
        "url": "https://pve.proxmox.com/pve-docs/pve-firewall.8.html",
        "read_more_link": "",
        "language": "en",
        "title": "firewall(8)",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Proxmox Server Solutions GmbH"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Simulate firewall rules. This does not simulates the kernel routing table, but simply assumes that routing from source zone to destination zone is possible.\n\nProxmox VE Firewall provides an easy way to protect your IT infrastructure. You can setup firewall rules for all hosts inside a cluster, or define rules for virtual machines and containers. Features like firewall macros, security groups, IP sets and aliases help to make that task easier.\n\nWhile all configuration is stored on the cluster file system, the iptables-based firewall service runs on each cluster node, and thus provides full isolation between virtual machines. The distributed nature of this system also provides much higher bandwidth than a central firewall solution.\n\nThe firewall has full support for IPv4 and IPv6. IPv6 support is fully transparent, and we filter traffic for both protocols by default. So there is no need to maintain a different set of rules for IPv6.\n\nFor each zone, you can define firewall rules for incoming and/or outgoing traffic.\n\nAll firewall related configuration is stored on the proxmox cluster file system. So those files are automatically distributed to all cluster nodes, and the pve-firewall service updates the underlying iptables rules automatically on changes.\n\nYou can configure anything using the GUI (i.e. Datacenter → Firewall, or on a Node → Firewall), or you can edit the configuration files directly using your preferred editor.\n\nFirewall configuration files contain sections of key-value pairs. Lines beginning with a # and blank lines are considered comments. Sections start with a header line containing the section name enclosed in [ and ].\n\nFirewall rules consists of a direction (IN or OUT) and an action (ACCEPT, DENY, REJECT). You can also specify a macro name. Macros contain predefined sets of rules and options. Rules can be disabled by prefixing them with |.\n\nThe following options can be used to refine rule matches.\n\nA security group is a collection of rules, defined at cluster level, which can be used in all VMs' rules. For example you can define a group named “webserver” with rules to open the http and https ports.\n\nThen, you can add this group to a VM’s firewall\n\nIP Aliases allow you to associate IP addresses of networks with a name. You can then refer to those names:\n\nIP sets can be used to define groups of networks and hosts. You can refer to them with ‘+name` in the firewall rules’ source and dest properties.\n\nThe following example allows HTTP traffic from the management IP set.\n\nThere is also a CLI command named pve-firewall, which can be used to start and stop the firewall service:\n\nThe above command reads and compiles all firewall rules, so you will see warnings if your firewall configuration contains any errors.\n\nIf you want to see the generated iptables rules you can use:\n\nDatacenter incoming/outgoing DROP/REJECT\n\nIf the input or output policy for the firewall is set to DROP or REJECT, the following traffic is still allowed for all Proxmox VE hosts in the cluster:\n\ntraffic over the loopback interface\n\nalready established connections\n\ntraffic using the IGMP protocol\n\nTCP traffic from management hosts to port 8006 in order to allow access to the web interface\n\nTCP traffic from management hosts to the port range 5900 to 5999 allowing traffic for the VNC web console\n\nTCP traffic from management hosts to port 3128 for connections to the SPICE proxy\n\nTCP traffic from management hosts to port 22 to allow ssh access\n\nUDP traffic in the cluster network to ports 5405-5412 for corosync\n\nUDP multicast traffic in the cluster network\n\nICMP traffic type 3 (Destination Unreachable), 4 (congestion control) or 11 (Time Exceeded)\n\nThe following traffic is dropped, but not logged even with logging enabled:\n\nTCP connections with invalid connection state\n\nBroadcast, multicast and anycast traffic not related to corosync, i.e., not coming through ports 5405-5412\n\nTCP traffic to port 43\n\nUDP traffic to ports 135 and 445\n\nUDP traffic to the port range 137 to 139\n\nUDP traffic form source port 137 to port range 1024 to 65535\n\nUDP traffic to port 1900\n\nTCP traffic to port 135, 139 and 445\n\nUDP traffic originating from source port 53\n\nThe rest of the traffic is dropped or rejected, respectively, and also logged. This may vary depending on the additional options enabled in Firewall → Options, such as NDP, SMURFS and TCP flag filtering.\n\nPlease inspect the output of the\n\n# iptables-save\n\nsystem command to see the firewall chains and rules active on your system. This output is also included in a System Report, accessible over a node’s subscription tab in the web GUI, or through the pvereport command-line tool.\n\nBy default, all logging of traffic filtered by the firewall rules is disabled. To enable logging, the loglevel for incoming and/or outgoing traffic has to be set in Firewall → Options. This can be done for the host as well as for the VM/CT firewall individually. By this, logging of Proxmox VE’s standard firewall rules is enabled and the output can be observed in Firewall → Log. Further, only some dropped or rejected packets are logged for the standard rules (see default firewall rules).\n\nloglevel does not affect how much of the filtered traffic is logged. It changes a LOGID appended as prefix to the log output for easier filtering and post-processing.\n\nIn case of the host firewall, VMID is equal to 0.\n\nLogging of user defined firewall rules\n\nIn order to log packets filtered by user-defined firewall rules, it is possible to set a log-level parameter for each rule individually. This allows to log in a fine grained manner and independent of the log-level defined for the standard rules in Firewall → Options.\n\nWhile the loglevel for each individual rule can be defined or changed easily in the web UI during creation or modification of the rule, it is possible to set this also via the corresponding pvesh API calls.\n\nFurther, the log-level can also be set via the firewall configuration file by appending a -log <loglevel> to the selected rule (see possible log-levels).\n\nFor example, the following two are identical:\n\nIN REJECT -p icmp -log nolog IN REJECT -p icmp\n\nwhereas\n\nIN REJECT -p icmp -log debug\n\nproduces a log output flagged with the debug level.\n\nThe firewall contains a few IPv6 specific options. One thing to note is that IPv6 does not use the ARP protocol anymore, and instead uses NDP (Neighbor Discovery Protocol) which works on IP level and thus needs IP addresses to succeed. For this purpose link-local addresses derived from the interface’s MAC address are used. By default the NDP option is enabled on both host and VM level to allow neighbor discovery (NDP) packets to be sent and received.\n\nBeside neighbor discovery NDP is also used for a couple of other things, like auto-configuration and advertising routers.\n\nBy default VMs are allowed to send out router solicitation messages (to query for a router), and to receive router advertisement packets. This allows them to use stateless auto configuration. On the other hand VMs cannot advertise themselves as routers unless the “Allow Router Advertisement” (radv: 1) option is set.\n\nAs for the link local addresses required for NDP, there’s also an “IP Filter” (ipfilter: 1) option which can be enabled which has the same effect as adding an ipfilter-net* ipset for each of the VM’s network interfaces containing the corresponding link local addresses. (See the Standard IP set ipfilter-net* section for details.)\n\nAs an alternative to pve-firewall we offer proxmox-firewall, which is an implementation of the Proxmox VE firewall based on the newer nftables rather than iptables.\n\nThis implementation uses the same configuration files and configuration format, so you can use your old configuration when switching. It provides the exact same functionality with a few exceptions:\n\nInstallation and Usage\n\nInstall the proxmox-firewall package:\n\napt install proxmox-firewall\n\nEnable the nftables backend via the Web UI on your hosts (Host > Firewall > Options > nftables), or by enabling it in the configuration file for your hosts (/etc/pve/nodes/<node_name>/host.fw):\n\n[OPTIONS] nftables: 1\n\nAfter enabling/disabling proxmox-firewall, all running VMs and containers need to be restarted for the old/new firewall to work properly.\n\nAfter setting the nftables configuration key, the new proxmox-firewall service will take over. You can check if the new service is working by checking the systemctl status of proxmox-firewall:\n\nsystemctl status proxmox-firewall\n\nYou can also examine the generated ruleset. You can find more information about this in the section Helpful Commands. You should also check whether pve-firewall is no longer generating iptables rules, you can find the respective commands in the Services and Commands section.\n\nSwitching back to the old firewall can be done by simply setting the configuration value back to 0 / No.\n\nUsage\n\nproxmox-firewall will create two tables that are managed by the proxmox-firewall service: proxmox-firewall and proxmox-firewall-guests. If you want to create custom rules that live outside the Proxmox VE firewall configuration you can create your own tables to manage your custom firewall rules. proxmox-firewall will only touch the tables it generates, so you can easily extend and modify the behavior of the proxmox-firewall by adding your own tables.\n\nInstead of using the pve-firewall command, the nftables-based firewall uses proxmox-firewall. It is a systemd service, so you can start and stop it via systemctl:\n\nsystemctl start proxmox-firewall systemctl stop proxmox-firewall\n\nStopping the firewall service will remove all generated rules.\n\nTo query the status of the firewall, you can query the status of the systemctl service:\n\nsystemctl status proxmox-firewall\n\nHelpful Commands\n\nYou can check the generated ruleset via the following command:\n\nnft list ruleset\n\nIf you want to debug proxmox-firewall you can simply run the daemon in foreground with the RUST_LOG environment variable set to trace. This should provide you with detailed debugging output:\n\nRUST_LOG=trace /usr/libexec/proxmox/proxmox-firewall\n\nYou can also edit the systemctl service if you want to have detailed output for your firewall daemon:\n\nsystemctl edit proxmox-firewall\n\nThen you need to add the override for the RUST_LOG environment variable:\n\n[Service] Environment=\"RUST_LOG=trace\"\n\nThis will generate a large amount of logs very quickly, so only use this for debugging purposes. Other, less verbose, log levels are info and debug.\n\nRunning in foreground writes the log output to STDERR, so you can redirect it with the following command (e.g. for submitting logs to the community forum):\n\nRUST_LOG=trace /usr/libexec/proxmox/proxmox-firewall 2> firewall_log_$(hostname).txt\n\nIt can be helpful to trace packet flow through the different chains in order to debug firewall rules. This can be achieved by setting nftrace to 1 for packets that you want to track. It is advisable that you do not set this flag for all packets, in the example below we only examine ICMP packets.\n\n#!/usr/sbin/nft -f table bridge tracebridge delete table bridge tracebridge table bridge tracebridge { chain trace { meta l4proto icmp meta nftrace set 1 } chain prerouting { type filter hook prerouting priority -350; policy accept; jump trace } chain postrouting { type filter hook postrouting priority -350; policy accept; jump trace } }\n\nSaving this file, making it executable, and then running it once will create the respective tracing chains. You can then inspect the tracing output via the Proxmox VE Web UI (Firewall > Log) or via nft monitor trace.\n\nThe above example traces traffic on all bridges, which is usually where guest traffic flows through. If you want to examine host traffic, create those chains in the inet table instead of the bridge table.\n\nBe aware that this can generate a lot of log spam and slow down the performance of your networking stack significantly.\n\nYou can remove the tracing rules via running the following command:\n\nnft delete table bridge tracebridge\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License along with this program. If not, see https://www.gnu.org/licenses/"
    }
}