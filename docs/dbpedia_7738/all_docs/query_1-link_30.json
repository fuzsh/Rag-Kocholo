{
    "id": "dbpedia_7738_1",
    "rank": 30,
    "data": {
        "url": "https://redmine.openinfosecfoundation.org/issues/511",
        "read_more_link": "",
        "language": "en",
        "title": "Feature #511: Port indepedent protocol identification (nDPI)",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "issue",
            "bug",
            "tracker"
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Redmine",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico?1709582103",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I'll try to put and add more information about different protocol inspection projects, for now:\n\nlibprotoident\n\nnDPI\n\nGeneralities (contact page, main development site, etc etc)¶\n\nlibprotoident¶\n\nDescription:¶\n\n(from the project page)\n\nLibprotoident is a library that performs application layer protocol identification for flows. Unlike many techniques that require capturing the entire packet payload, only the first four bytes of payload sent in each direction, the size of the first payload-bearing packet in each direction and the TCP or UDP port numbers for the flow are used by libprotoident.\n\nproject page: http://research.wand.net.nz/software/libprotoident.php\n\nsource code: https://github.com/wanduow/libprotoident\n\nblog and news: https://secure.wand.net.nz/projects/details/libprotoident\n\nwiki: https://secure.wand.net.nz/trac/libprotoident/\n\nnDPI¶\n\nDescription¶\n\n(from the project page):\n\nnDPI is a ntop-maintained superset of the popular OpenDPI library. Released under the LGPL license, its goal is to extend the original library by adding new protocols that are otherwise available only on the paid version of OpenDPI. In addition to Unix platforms, we also support Windows, in order to provide you a cross-platform DPI experience. Furthermore, we have modified nDPI do be more suitable for traffic monitoring applications, by disabling specific features that slow down the DPI engine while being them un-necessary for network traffic monitoring.\n\nproject page: http://www.ntop.org/products/deep-packet-inspection/ndpi/\n\nsource code: https://github.com/ntop/nDPI\n\nblog and news: http://ntop.org\n\nSpecificities¶\n\nlibprotoident¶\n\nLanguage: C++\n\nDependencies: wand libtrace, from http://research.wand.net.nz/software/libtrace.php\n\nProtocol Identification:\n\nPayload Matches (mostly), pattern matching on the first four bytes of the payload on each direction of the traffic\n\nPayload Size\n\nPort Number, used in case of ambiguity and only for well known ports\n\nIP Matching, very few cases\n\nprotocols are checked in order depending on the confidence the author have on the rules and the popularity of the protocol\n\nMulti thread support: no, but can be added in the user application\n\nFlow-aware: no, but can use the wand libflowmanager, from http://research.wand.net.nz/software/libflowmanager.php. Only needed for building the tools\n\nTest Pcap: none\n\nnDPI¶\n\nLanguage: C\n\nDependencies: none except for the build environment\n\nProtocol Identification:\n\nPayload Matches\n\nPayload Size\n\nPort Number\n\nIP Matching\n\nability to specify custom ports for protocol in specific environment through a configuration file\n\nMulti thread support: yes\n\nFlow-aware: yes (embedded)\n\nTest Pcap: few in the code base\n\nCommunity support¶\n\nlibprotoident\n\nThe source code is openly available on GitHub, at the moment there is only one author active.\n\nnDPI\n\nThe source code is openly available on GitHub.\n\nLicence¶\n\nlibprotoident\n\nGPLv2.\n\nnDPI\n\nLGPLv3. This is an issue if you want to include its source into suricat, according to http://www.gnu.org/licenses/gpl-faq.html#AllCompatibility\n\nSupported Protocols¶\n\nlibprotoident\n\nA list is here (updated?) : https://secure.wand.net.nz/trac/libprotoident/wiki/SupportedProtocols\n\nnDPI\n\nA list is present on the main project page: http://www.ntop.org/products/deep-packet-inspection/ndpi/\n\nInteresting Papers¶\n\nT. Bujlow et al, Jan. 2014 - Extended Independent Comparison of Popular Deep Packet Inspection (DPI) Tools for Traffic Classification (http://www.ac.upc.edu/app/research-reports/html/RR/2014/1.pdf)\n\nVery long (more than 400 pages) comparison of the most popular and public available DPI engine. A shorter article version from the same author also exists (Nov. 2014, http://tomasz.bujlow.com/publications/2014_journal_elsevier_comnet_independent_comparison.pdf)\n\nThe libprotoident comes out with a few examples, in the tools folder of the code. From the README https://github.com/wanduow/libprotoident\n\nlpi_protoident\n\nDescription:\n\nThis tool attempts to identify each individual flow within the provided\n\ntrace. Identification only occurs when the flow has concluded or\n\nexpired, so it is not very effective for real-time applications.\n\nlpi_live (DEPRECATED)\n\nDescription:\n\nThis tool reports byte and packet counts (both inbound and outbound)\n\nfor each identified protocol in real-time. Identification of a flow\n\noccurs as soon as possible, so that the statistics reported are as\n\nup-to-date as possible.\n\nlpi_live has been deprecated and will not be built by default. The code\n\nis still available in our git repository, but we will not update or\n\nsupport this tool anymore. Instead, please use the lpicollector\n\n(https://github.com/wanduow/lpicollector) for real-time flow analysis\n\nwith libprotoident.\n\nIn combination with the included lpi.py example client, lpicollector\n\ncan produce output similar to that produced by lpi_live.\n\nLibprotoident calls (to external libs) and mappings to suricata's (tentative)¶\n\nfrom libtrace:¶\n\ntypes\n\nlibtrace_t | NOT NEEDED\n\nlibtrace_tcp_t | combination of PKT_IS_TCP(p) && (p)->tcph\n\nlibtrace_udp_t | combination of PKT_IS_UDP(p) && (p)->udph\n\nlibtrace_packet_t | analogous to the Packet struct\n\nlibtrace_filter_t | use the suricata's buildin BPF code\n\ncalls\n\ntrace_get_layer3 | IP_GET_IPPROTO(p)\n\ntrace_get_direction | FlowGetPacketDirection(f, p) == TOSERVER ? 1 : 0; NOTE: they are reversed\n\ntrace_get_payload | (Packet *)p->payload\n\ntrace_get_payload_length | (Packet *)p->payload_len\n\ntrace_read_packet | NOT NEEDED, use suricata source modules\n\ntrace_get_seconds | XXX\n\ntrace_create | NOT NEEDED, use suricata source modules\n\ntrace_destroy | NOT NEEDED, use suricata source modules\n\ntrace_create_filter | use suricata's BPF filtering\n\ntrace_perror | NOT NEEDED\n\ntrace_is_err | NOT NEEDED\n\nfrom libflowmanager¶\n\nNEEDED | lfm_match_packet_to_flow | FlowReference(&p->flow, f);\n\nNEEDED | lfm_update_flow_expiry_timeout | this is done via the flow-timeouts values\n\nNOT NEEDED | lfm_expire_next_flow\n\nNOT NEEDED | lfm_set_config_option\n\nDo we have any progress with this feature?\n\nIt seems that the GitHub repository of libprotoident is updated frequently (at least in the last months) and this would make Suricata another step ahead of Snort :)"
    }
}