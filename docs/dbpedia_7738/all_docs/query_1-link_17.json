{
    "id": "dbpedia_7738_1",
    "rank": 17,
    "data": {
        "url": "https://www.wolfssl.com/blog/page/62/",
        "read_more_link": "",
        "language": "en",
        "title": "Blog",
        "top_image": "https://www.wolfssl.com/wordpress/wp-content/uploads/2017/07/cropped-wolf-square-32x32.png",
        "meta_img": "https://www.wolfssl.com/wordpress/wp-content/uploads/2017/07/cropped-wolf-square-32x32.png",
        "images": [
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2017/11/japan-site.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2020/12/cropped-wolfssl_logo_300px.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2018/08/TLS13-now-avail.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2023/08/x.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2018/06/facebook-icon.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2018/06/github-icon.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2020/12/linkedin_50_50.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2018/06/flickr-icon.png",
            "https://www.wolfssl.com/wordpress/wp-content/uploads/2020/12/madeInUsa_100px.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "iot tls"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2021-07-14T11:45:55-06:00",
        "summary": "",
        "meta_description": "RECENT BLOG NEWS\n\nSo, what’s new at wolfSSL? Take a look below to check out the most recent news, or sign up to receive weekly email notifications containing the latest news from wolfSSL. wolfSSL also has a support-specific blog page dedicated to answering some of the more commonly received su",
        "meta_lang": "en",
        "meta_favicon": "https://www.wolfssl.com/wordpress/wp-content/uploads/2017/07/cropped-wolf-square-32x32.png",
        "meta_site_name": "",
        "canonical_link": "https://www.wolfssl.com/blog/",
        "text": "Pseudo Random Number Generator (PRNG)\n\nSoftware-generated random numbers only are pseudorandom. They are not truly random because the computer uses an algorithm based on a distribution, and are not secure because they rely on deterministic, predictable algorithms. Since a seed number can be set to replicate the “random” numbers generated, it is possible to predict the numbers if the seed is known. Pseudorandom number generation in everyday tools such as Python and Excel are based on the Mersenne Twister algorithm.\n\nAn example use of PRNGs is in key stream generation. Stream ciphers, such as Chacha, encrypt plaintext messages by applying an encryption algorithm with a pseudorandom cipher digit stream (keystream). Keystreams of some block cipher modes, such as AES CTR (counter) mode, act as a stream cipher and can also be regarded as pseudorandom number generation.\n\nTrue Random Number Generator (TRNG)\n\nFor truly random numbers, the computer must use some external physical variable that is unpredictable, such as radioactive decay of isotopes or airwave static, rather than by an algorithm. At the quantum level, subatomic particles have completely random behavior, making them ideal variables of an unpredictable system. Most higher end microcontrollers have TRNG sources, which wolfSSL can use as a direct random source or as a seed for our PRNG. Intel RDRAND, a silicon-based TRNG, is supported by wolfSSL.\n\nAdditionally, wolfSSL supports the following hardware systems involving TRNGs:\n\nEspressif ESP32-WROOM-32\n\nIntel SGX\n\nMicrochip ATECC608\n\nMicrochip PIC32MZ\n\nNordic nRF5x\n\nNXP i.MX6 CAAM\n\nNXP i.MX RT1060\n\nNXP Kinetis and KSDK\n\nRenesas TSIP\n\nSilicon Labs SE\n\nSTM32\n\nTelit M2MB\n\nWhitewood Quantum RNG\n\nWindows CryptGenRandom\n\nYou can find the full list of all hardware acceleration/cryptography platforms currently supported by wolfSSL here: Hardware Cryptography Support\n\nRNGs in cryptography\n\nHowever, true RNGs on their own are often not cost efficient, and can be subject to gradual decline. Thus, there is still some reliance on post-processing algorithms (that are deterministic and vulnerable) to further improve randomness, as the quality of their entropy source is not consistent. The combination of a TRNG and a PRNG can limit the negative effects of this decline. For example, in NXP i.MX RT1060, the TRNG present in the core can be used as an entropy source to determine the seed of a Deterministic Random Bit Generator (DRBG), which on its own is a PRNG, but in combination with the TRNG results in a good approximation of randomness, without weakness over time.\n\nwolfSSL uses the SHA2-256 (Secure Hash Algorithm) Hash_DRBG described in NIST’s SP 800-90A (the specification for three allegedly cryptographically secure pseudorandom number generators for use in cryptography). Additionally, wolfRand, wolfSSL’s FIPS module which includes a hardware entropy source, is conformant to NIST’s SP 800-90B (the design principles and requirements for the entropy sources used by random-bit generators, and the tests for the validation of entropy sources).\n\nFor cryptographic purposes, a more secure approximation of a true random number can be achieved with a combination of algorithms, rather than just relying on one. In the update from TLS 1.1 to TLS 1.2, the MD5/SHA-1 combination in the pseudorandom function (PRF) was replaced with cipher-suite-specified PRFs, which continue to be used in TLS 1.3 with SHA2-256 and SHA2-384.\n\nMD5/SHA-1 (Message Digest/Secure Hash Algorithm) combined two Message Authentication Code (MAC) algorithms to provide a balance between speed and security. Meanwhile, a cipher suite is a set of cryptographic instructions or algorithms that helps secure network connections through Transport Layer Security(TLS)/Secure Socket Layer (SSL). During the SSL handshake between the web server and the client, the two parties agree on a cipher suite, which is then used to secure the HTTPS connection. A typical cipher suite contains 1 key exchange, 1 bulk encryption, 1 authentication, and 1 MAC algorithm.\n\nFor more information on cipher suites and their uses, visit “What is a Cipher Suite?”\n\nConclusion\n\nTruly random numbers are difficult to generate because they are not cost-efficient and subject to decline over time. However, random number generation can be made more effective by using multiple random processes in combination, either with a TRNG/PRNG combination, or an ensemble of algorithms in a cipher suite.\n\nFor more information on wolfRand or general inquiries about wolfSSL, contact us at facts@wolfssl.com!\n\nwolfTPM is the leading TPM library for embedded and baremetal applications. It is widely used in aerospace, military, and medical systems because the wolfSSL TPM 2.0 library is designed specifically for embedded systems. wolfTPM offers a low memory footprint and supports all of the TPM 2.0 commands and operations; as well as provids examples of: attestation, NVRAM usage, secure storage, and sealing.\n\nToday, we have expanded on the new TPM 2.0 feature called Extra GPIO, by adding support for the newest variant of NPCT75x modules by Nuvoton.\n\nIt is now possible to protect and control GPIO by using TPM 2.0 authorization. This way, extra GPIO on the TPM chip becomes a great tool for signaling of critical events across subsystems.\n\nSince, wolfTPM already offers support for extra GPIO for ST33 modules from STMicroelectronics. Here is a brief comparison of the GPIO capabilities between ST33 and NPCT75x :\n\nManufacturer Model Extra GPIO availability GPIO modes Nuvoton NPCT75x 2 GPIO for SPI & I2C 3 output modes STMicroelectronics ST33 2 GPIO for SPI 4 GPIO for I2C 6 modes in total\n\nIn safety-critical systems, extra GPIO control through the TPM 2.0 module provides signaling for security events and important changes of the system state. Such use cases are observed in the rising railway IoT automation and in modern automotive systems.\n\nWe want to thank the team at Nuvoton led by Mr. Oren and the amazing field application engineer Ms. Dana for collaborating on this project.\n\nIf you want to use TPM 2.0 and secure GPIO signaling in your next project please contact us at facts@wolfssl.com\n\nThe QSslSocket class in Qt makes it easy to add encryption to your application. wolfSSL makes it secure!\n\nThe wolfSSL embedded SSL/TLS library is a lightweight SSL/TLS library written in ANSI C and targeted for embedded, RTOS, and resource-constrained environments – primarily because of its small size, speed, and feature set. It is commonly used in standard operating environments as well because of its royalty-free pricing and excellent cross-platform support. wolfSSL supports industry standards up to the current TLS 1.3 and DTLS 1.2 levels, is up to 20 times smaller than OpenSSL, supports FIPS, and has critical interfaces like TPM 2.0 and PKCS#11.\n\nQt has traditionally used OpenSSL as the provider for SSL/TLS in Qt Network for secure network communications. wolfSSL 4.4.0 adds support for building Qt 5.12 and 5.13 against the wolfSSL embedded SSL/TLS library instead of the default OpenSSL backend! The wolfSSL integration with Qt provides a performance-minded alternative, ideal for Qt developers who are looking for a lightweight, progressive, and well-tested SSL/TLS implementation.\n\nUsing wolfSSL as a TLS provider in Qt can have many advantages, depending on application and industry. Some of these may include:\n\nProgressive SSL/TLS protocol support (up to TLS 1.3)\n\nSmaller footprint size (up to 20 times smaller than OpenSSL)\n\nExtensive testing to reduce bugs and vulnerabilities (currently the best-tested SSL/TLS implementation available)\n\nCertifications (FIPS 140-2, DO-178C)\n\nPortability (supports over 30 operating systems)\n\nHardware cryptography support\n\nCommercial support\n\nConsulting services and training available\n\nTo learn more about the advantages of using wolfSSL, visit our page on “wolfSSL vs. OpenSSL”. For more insight into building Qt with wolfSSL, the advantages it brings to Qt developers when used in place of OpenSSL, and the current state of SSL/TLS and the cryptography algorithms used, watch this recorded talk by our Engineering Manager, Chris Conlon.\n\nFor instructions on how to compile Qt with the wolfSSL patch, please visit Building Qt with wolfSSL.\n\nQuestions? Reach out to our support team at support@wolfssl.com!"
    }
}