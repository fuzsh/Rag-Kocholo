{
    "id": "wrong_mix_domain_subsidiary_00148_2",
    "rank": 35,
    "data": {
        "url": "https://manpages.opensuse.org/Tumbleweed/perl-DBIx-Class/DBIx::Class::Storage::DBI::Sybase::ASE.3pm.en.html",
        "read_more_link": "",
        "language": "en",
        "title": "DBIx::Class::Storage::DBI::Sybase::ASE(3pm) â perl",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://static.opensuse.org/favicon.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "NAMEÂ¶\n\nDBIx::Class::Storage::DBI::Sybase::ASE - Sybase ASE SQL Server support for DBIx::Class\n\nSYNOPSISÂ¶\n\nThis subclass supports DBD::Sybase for real (non-Microsoft) Sybase databases.\n\nDESCRIPTIONÂ¶\n\nIf your version of Sybase does not support placeholders, then your storage will be reblessed to DBIx::Class::Storage::DBI::Sybase::ASE::NoBindVars. You can also enable that driver explicitly, see the documentation for more details.\n\nWith this driver there is unfortunately no way to get the \"last_insert_id\" without doing a \"SELECT MAX(col)\". This is done safely in a transaction (locking the table.) See \"INSERTS WITH PLACEHOLDERS\".\n\nA recommended connect_info setting:\n\non_connect_call => [['datetime_setup'], ['blob_setup', log_on_update => 0]]\n\nMETHODSÂ¶\n\nconnect_call_blob_setupÂ¶\n\nUsed as:\n\non_connect_call => [ [ 'blob_setup', log_on_update => 0 ] ]\n\nDoes \"$dbh->{syb_binary_images} = 1;\" to return \"IMAGE\" data as raw binary instead of as a hex string.\n\nRecommended.\n\nAlso sets the \"log_on_update\" value for blob write operations. The default is 1, but 0 is better if your database is configured for it.\n\nSee \"Handling IMAGE/TEXT data with syb_ct_get_data()/syb_ct_send_data()\" in DBD::Sybase.\n\nUsed as:\n\non_connect_call => 'datetime_setup'\n\nIn connect_info to set:\n\n$dbh->syb_date_fmt('ISO_strict'); # output fmt: 2004-08-21T14:36:48.080Z $dbh->do('set dateformat mdy'); # input fmt: 08/13/1979 18:08:55.080\n\nThis works for both \"DATETIME\" and \"SMALLDATETIME\" columns, note that \"SMALLDATETIME\" columns only have minute precision.\n\nSchema::Loader SupportÂ¶\n\nAs of version 0.05000, DBIx::Class::Schema::Loader should work well with most versions of Sybase ASE.\n\nFreeTDSÂ¶\n\nThis driver supports DBD::Sybase compiled against FreeTDS (<http://www.freetds.org/>) to the best of our ability, however it is recommended that you recompile DBD::Sybase against the Sybase Open Client libraries. They are a part of the Sybase ASE distribution:\n\nThe Open Client FAQ is here: <http://www.isug.com/Sybase_FAQ/ASE/section7.html>.\n\nSybase ASE for Linux (which comes with the Open Client libraries) may be downloaded here: <http://response.sybase.com/forms/ASE_Linux_Download>.\n\nTo see if you're using FreeTDS run:\n\nperl -MDBI -le 'my $dbh = DBI->connect($dsn, $user, $pass); print $dbh->{syb_oc_version}'\n\nIt is recommended to set \"tds version\" for your ASE server to 5.0 in \"/etc/freetds/freetds.conf\".\n\nSome versions or configurations of the libraries involved will not support placeholders, in which case the storage will be reblessed to DBIx::Class::Storage::DBI::Sybase::ASE::NoBindVars.\n\nIn some configurations, placeholders will work but will throw implicit type conversion errors for anything that's not expecting a string. In such a case, the \"auto_cast\" option from DBIx::Class::Storage::DBI::AutoCast is automatically set, which you may enable on connection with connect_call_set_auto_cast. The type info for the \"CAST\"s is taken from the \"data_type\" in DBIx::Class::ResultSource definitions in your Result classes, and are mapped to a Sybase type (if it isn't already) using a mapping based on SQL::Translator.\n\nIn other configurations, placeholders will work just as they do with the Sybase Open Client libraries.\n\nInserts or updates of TEXT/IMAGE columns will NOT work with FreeTDS.\n\nINSERTS WITH PLACEHOLDERSÂ¶\n\nWith placeholders enabled, inserts are done in a transaction so that there are no concurrency issues with getting the inserted identity value using \"SELECT MAX(col)\", which is the only way to get the \"IDENTITY\" value in this mode.\n\nIn addition, they are done on a separate connection so that it's possible to have active cursors when doing an insert.\n\nWhen using \"DBIx::Class::Storage::DBI::Sybase::ASE::NoBindVars\" transactions are unnecessary and not used, as there are no concurrency issues with SELECT @@IDENTITY which is a session variable.\n\nTRANSACTIONSÂ¶\n\nDue to limitations of the TDS protocol and DBD::Sybase, you cannot begin a transaction while there are active cursors, nor can you use multiple active cursors within a transaction. An active cursor is, for example, a ResultSet that has been executed using \"next\" or \"first\" but has not been exhausted or reset.\n\nFor example, this will not work:\n\n$schema->txn_do(sub { my $rs = $schema->resultset('Book'); while (my $result = $rs->next) { $schema->resultset('MetaData')->create({ book_id => $result->id, ... }); } });\n\nThis won't either:\n\nmy $first_row = $large_rs->first; $schema->txn_do(sub { ... });\n\nTransactions done for inserts in \"AutoCommit\" mode when placeholders are in use are not affected, as they are done on an extra database handle.\n\nSome workarounds:\n\nuse DBIx::Class::Storage::DBI::Replicated\n\nconnect another Schema\n\nload the data from your cursor with \"all\" in DBIx::Class::ResultSet\n\nMAXIMUM CONNECTIONSÂ¶\n\nThe TDS protocol makes separate connections to the server for active statements in the background. By default the number of such connections is limited to 25, on both the client side and the server side.\n\nThis is a bit too low for a complex DBIx::Class application, so on connection the client side setting is set to 256 (see \"maxConnect\" in DBD::Sybase.) You can override it to whatever setting you like in the DSN.\n\nSee <http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.sag1/html/sag1/sag1272.htm> for information on changing the setting on the server side.\n\nSee \"connect_call_datetime_setup\" to setup date formats for DBIx::Class::InflateColumn::DateTime.\n\nLIMITED QUERIESÂ¶\n\nBecause ASE does not have a good way to limit results in SQL that works for all types of queries, the limit dialect is set to GenericSubQ.\n\nFortunately, ASE and DBD::Sybase support cursors properly, so when GenericSubQ is too slow you can use the software_limit DBIx::Class::ResultSet attribute to simulate limited queries by skipping over records.\n\nTEXT/IMAGE COLUMNSÂ¶\n\nDBD::Sybase compiled with FreeTDS will NOT allow you to insert or update \"TEXT/IMAGE\" columns.\n\nSetting \"$dbh->{LongReadLen}\" will also not work with FreeTDS use either:\n\n$schema->storage->dbh->do(\"SET TEXTSIZE $bytes\");\n\nor\n\n$schema->storage->set_textsize($bytes);\n\ninstead.\n\nHowever, the \"LongReadLen\" you pass in connect_info is used to execute the equivalent \"SET TEXTSIZE\" command on connection.\n\nSee \"connect_call_blob_setup\" for a connect_info setting you need to work with \"IMAGE\" columns.\n\nBULK APIÂ¶\n\nThe experimental DBD::Sybase Bulk API support is used for populate in void context, in a transaction on a separate connection.\n\nTo use this feature effectively, use a large number of rows for each populate call, eg.:\n\nwhile (my $rows = $data_source->get_100_rows()) { $rs->populate($rows); }\n\nNOTE: the add_columns calls in your \"Result\" classes must list columns in database order for this to work. Also, you may have to unset the \"LANG\" environment variable before loading your app, as \"BCP -Y\" is not yet supported in DBD::Sybase .\n\nWhen inserting IMAGE columns using this method, you'll need to use \"connect_call_blob_setup\" as well.\n\nCOMPUTED COLUMNSÂ¶\n\nIf you have columns such as:\n\ncreated_dtm AS getdate()\n\nrepresent them in your Result classes as:\n\ncreated_dtm => { data_type => undef, default_value => \\'getdate()', is_nullable => 0, inflate_datetime => 1, }\n\nThe \"data_type\" must exist and must be \"undef\". Then empty inserts will work on tables with such columns.\n\n\"timestamp\" columns in Sybase ASE are not really timestamps, see: <http://dba.fyicenter.com/Interview-Questions/SYBASE/The_timestamp_datatype_in_Sybase_.html>.\n\nThey should be defined in your Result classes as:\n\nts => { data_type => 'timestamp', is_nullable => 0, inflate_datetime => 0, }\n\nThe \"<inflate_datetime =\" 0>> is necessary if you use DBIx::Class::InflateColumn::DateTime, and most people do, and still want to be able to read these values.\n\nThe values will come back as hexadecimal.\n\nTODOÂ¶\n\nTransitions to AutoCommit=0 (starting a transaction) mode by exhausting any active cursors, using eager cursors.\n\nReal limits and limited counts using stored procedures deployed on startup.\n\nBlob update with a LIKE query on a blob, without invalidating the WHERE condition.\n\nbulk_insert using prepare_cached (see comments.)"
    }
}