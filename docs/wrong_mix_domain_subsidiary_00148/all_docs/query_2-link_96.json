{
    "id": "wrong_mix_domain_subsidiary_00148_2",
    "rank": 96,
    "data": {
        "url": "https://book.hacktricks.xyz/pentesting-web/sql-injection",
        "read_more_link": "",
        "language": "en",
        "title": "SQL Injection",
        "top_image": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmuMguNrsRx2mNyNqEox4%2Fsocialpreview%2FNtYxX5Um1Ml0KhPq6gZR%2Ffondo.png?alt=media&token=257c330a-9e87-4c69-bb95-c0b54588ea79",
        "meta_img": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FmuMguNrsRx2mNyNqEox4%2Fsocialpreview%2FNtYxX5Um1Ml0KhPq6gZR%2Ffondo.png?alt=media&token=257c330a-9e87-4c69-bb95-c0b54588ea79",
        "images": [
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F2783428383-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252FmuMguNrsRx2mNyNqEox4%252Ficon%252F1qCJ0VIDlWcvGSecYCDq%252Ffondo.png%3Falt%3Dmedia%26token%3D1e721267-450f-43f3-861b-6c4f93278e93&width=32&dpr=4&quality=100&sign=61472716&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F2783428383-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fcollections%252FmuMguNrsRx2mNyNqEox4%252Ficon%252F1qCJ0VIDlWcvGSecYCDq%252Ffondo.png%3Falt%3Dmedia%26token%3D1e721267-450f-43f3-861b-6c4f93278e93&width=32&dpr=4&quality=100&sign=61472716&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252FelPCTwoecVdnsfjxCZtN%252Fimage.png%3Falt%3Dmedia%26token%3D9ee4ff3e-92dc-471c-abfe-1c25e446a6ed&width=768&dpr=4&quality=100&sign=9c8fe74f&sv=1",
            "https://www.rootedcon.com/img/favicons/apple-touch-icon-180x180.png",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252FelPCTwoecVdnsfjxCZtN%252Fimage.png%3Falt%3Dmedia%26token%3D9ee4ff3e-92dc-471c-abfe-1c25e446a6ed&width=768&dpr=4&quality=100&sign=9c8fe74f&sv=1",
            "https://www.rootedcon.com/img/favicons/apple-touch-icon-180x180.png",
            "https://www.rootedcon.com/img/favicons/apple-touch-icon-180x180.png",
            "https://github.com/fluidicon.png",
            "https://github.com/fluidicon.png",
            "https://www.rootedcon.com/img/favicons/apple-touch-icon-180x180.png",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252FelPCTwoecVdnsfjxCZtN%252Fimage.png%3Falt%3Dmedia%26token%3D9ee4ff3e-92dc-471c-abfe-1c25e446a6ed&width=768&dpr=4&quality=100&sign=9c8fe74f&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252FelPCTwoecVdnsfjxCZtN%252Fimage.png%3Falt%3Dmedia%26token%3D9ee4ff3e-92dc-471c-abfe-1c25e446a6ed&width=768&dpr=4&quality=100&sign=9c8fe74f&sv=1",
            "https://portswigger.net/content/images/logos/favicon.ico",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-ce8af1068db7be4ad9003f8ddb02fea8f943f1a4%252Farte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=f338524c&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1",
            "https://book.hacktricks.xyz/~gitbook/image?url=https%3A%2F%2F129538173-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252F-L_2uGJGU7AVNRcqRvEi%252Fuploads%252Fgit-blob-54ee1fb931f39d1e6f50150361b6aa1927f4ee88%252Fgrte.png%3Falt%3Dmedia&width=40&dpr=4&quality=100&sign=248ef1d0&sv=1"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-07-18T23:16:12.236000+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://2783428383-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/collections%2FmuMguNrsRx2mNyNqEox4%2Ficon%2F1qCJ0VIDlWcvGSecYCDq%2Ffondo.png?alt=media&token=1e721267-450f-43f3-861b-6c4f93278e93",
        "meta_site_name": "",
        "canonical_link": "https://book.hacktricks.xyz/pentesting-web/sql-injection",
        "text": "​​​​RootedCON is the most relevant cybersecurity event in Spain and one of the most important in Europe. With the mission of promoting technical knowledge, this congress is a boiling meeting point for technology and cybersecurity professionals in every discipline.\n\nWhat is SQL injection?\n\nAn SQL injection is a security flaw that allows attackers to interfere with database queries of an application. This vulnerability can enable attackers to view, modify, or delete data they shouldn't access, including information of other users or any data the application can access. Such actions may result in permanent changes to the application's functionality or content or even compromision of the server or denial of service.\n\nEntry point detection\n\nWhen a site appears to be vulnerable to SQL injection (SQLi) due to unusual server responses to SQLi-related inputs, the first step is to understand how to inject data into the query without disrupting it. This requires identifying the method to escape from the current context effectively. These are some useful examples:\n\nThen, you need to know how to fix the query so there isn't errors. In order to fix the query you can input data so the previous query accept the new data, or you can just input your data and add a comment symbol add the end.\n\nNote that if you can see error messages or you can spot differences when a query is working and when it's not this phase will be more easy.\n\nConfirming with logical operations\n\nA reliable method to confirm an SQL injection vulnerability involves executing a logical operation and observing the expected outcomes. For instance, a GET parameter such as ?username=Peter yielding identical content when modified to ?username=Peter' or '1'='1 indicates a SQL injection vulnerability.\n\nSimilarly, the application of mathematical operations serves as an effective confirmation technique. For example, if accessing ?id=1 and ?id=2-1 produce the same result, it's indicative of SQL injection.\n\nExamples demonstrating logical operation confirmation:\n\nThis word-list was created to try to confirm SQLinjections in the proposed way:\n\nConfirming with Timing\n\nIn some cases you won't notice any change on the page you are testing. Therefore, a good way to discover blind SQL injections is making the DB perform actions and will have an impact on the time the page need to load. Therefore, the we are going to concat in the SQL query an operation that will take a lot of time to complete:\n\nIn some cases the sleep functions won't be allowed. Then, instead of using those functions you could make the query perform complex operations that will take several seconds. Examples of these techniques are going to be commented separately on each technology (if any).\n\nIdentifying Back-end\n\nThe best way to identify the back-end is trying to execute functions of the different back-ends. You could use the sleep functions of the previous section or these ones (table from payloadsallthethings:\n\nAlso, if you have access to the output of the query, you could make it print the version of the database.\n\nIdentifying with PortSwigger\n\nExploiting Union Based\n\nDetecting number of columns\n\nIf you can see the output of the query this is the best way to exploit it. First of all, wee need to find out the number of columns the initial request is returning. This is because both queries must return the same number of columns. Two methods are typically used for this purpose:\n\nOrder/Group by\n\nTo determine the number of columns in a query, incrementally adjust the number used in ORDER BY or GROUP BY clauses until a false response is received. Despite the distinct functionalities of GROUP BY and ORDER BY within SQL, both can be utilized identically for ascertaining the query's column count.\n\nUNION SELECT\n\nSelect more and more null values until the query is correct:\n\nYou should use nullvalues as in some cases the type of the columns of both sides of the query must be the same and null is valid in every case.\n\nExtract database names, table names and column names\n\nOn the next examples we are going to retrieve the name of all the databases, the table name of a database, the column names of the table:\n\nThere is a different way to discover this data on every different database, but it's always the same methodology.\n\nExploiting Hidden Union Based\n\nWhen the output of a query is visible, but a union-based injection seems unachievable, it signifies the presence of a hidden union-based injection. This scenario often leads to a blind injection situation. To transform a blind injection into a union-based one, the execution query on the backend needs to be discerned.\n\nThis can be accomplished through the use of blind injection techniques alongside the default tables specific to your target Database Management System (DBMS). For understanding these default tables, consulting the documentation of the target DBMS is advised.\n\nOnce the query has been extracted, it's necessary to tailor your payload to safely close the original query. Subsequently, a union query is appended to your payload, facilitating the exploitation of the newly accessible union-based injection.\n\nFor more comprehensive insights, refer to the complete article available at Healing Blind Injections.\n\nExploiting Error based\n\nIf for some reason you cannot see the output of the query but you can see the error messages, you can make this error messages to ex-filtrate data from the database. Following a similar flow as in the Union Based exploitation you could manage to dump the DB.\n\nExploiting Blind SQLi\n\nIn this case you cannot see the results of the query or the errors, but you can distinguished when the query return a true or a false response because there are different contents on the page. In this case, you can abuse that behaviour to dump the database char by char:\n\nExploiting Error Blind SQLi\n\nThis is the same case as before but instead of distinguish between a true/false response from the query you can distinguish between an error in the SQL query or not (maybe because the HTTP server crashes). Therefore, in this case you can force an SQLerror each time you guess correctly the char:\n\nExploiting Time Based SQLi\n\nIn this case there isn't any way to distinguish the response of the query based on the context of the page. But, you can make the page take longer to load if the guessed character is correct. We have already saw this technique in use before in order to confirm a SQLi vuln.\n\nStacked Queries\n\nYou can use stacked queries to execute multiple queries in succession. Note that while the subsequent queries are executed, the results are not returned to the application. Hence this technique is primarily of use in relation to blind vulnerabilities where you can use a second query to trigger a DNS lookup, conditional error, or time delay.\n\nOracle doesn't support stacked queries. MySQL, Microsoft and PostgreSQL support them: QUERY-1-HERE; QUERY-2-HERE\n\nOut of band Exploitation\n\nIf no-other exploitation method worked, you may try to make the database ex-filtrate the info to an external host controlled by you. For example, via DNS queries:\n\nOut of band data exfiltration via XXE\n\nAutomated Exploitation\n\nCheck the SQLMap Cheetsheat to exploit a SQLi vulnerability with sqlmap.\n\nTech specific info\n\nWe have already discussed all the ways to exploit a SQL Injection vulnerability. Find some more tricks database technology dependant in this book:\n\nMS Access\n\nMSSQL\n\nMySQL\n\nOracle\n\nPostgreSQL\n\nOr you will find a lot of tricks regarding: MySQL, PostgreSQL, Oracle, MSSQL, SQLite and HQL in https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection\n\n​​​​​RootedCON is the most relevant cybersecurity event in Spain and one of the most important in Europe. With the mission of promoting technical knowledge, this congress is a boiling meeting point for technology and cybersecurity professionals in every discipline.\n\nAuthentication bypass\n\nList to try to bypass the login functionality:\n\nLogin bypass List\n\nRaw hash authentication Bypass\n\nThis query showcases a vulnerability when MD5 is used with true for raw output in authentication checks, making the system susceptible to SQL injection. Attackers can exploit this by crafting inputs that, when hashed, produce unexpected SQL command parts, leading to unauthorized access.\n\nInjected hash authentication Bypass\n\nRecommended list:\n\nYou should use as username each line of the list and as password always: Pass1234. (This payloads are also included in the big list mentioned at the beginning of this section)\n\nGBK Authentication Bypass\n\nIF ' is being scaped you can use %A8%27, and when ' gets scaped it will be created: 0xA80x5c0x27 (╘')\n\nPython script:\n\nPolyglot injection (multicontext)\n\nInsert Statement\n\nModify password of existing object/user\n\nTo do so you should try to create a new object named as the \"master object\" (probably admin in case of users) modifying something:\n\nCreate user named: AdMIn (uppercase & lowercase letters)\n\nCreate a user named: admin=\n\nSQL Truncation Attack (when there is some kind of length limit in the username or email) --> Create user with name: admin [a lot of spaces] a\n\nSQL Truncation Attack\n\nIf the database is vulnerable and the max number of chars for username is for example 30 and you want to impersonate the user admin, try to create a username called: \"admin [30 spaces] a\" and any password.\n\nThe database will check if the introduced username exists inside the database. If not, it will cut the username to the max allowed number of characters (in this case to: \"admin [25 spaces]\") and the it will automatically remove all the spaces at the end updating inside the database the user \"admin\" with the new password (some error could appear but it doesn't means that this hasn't worked).\n\nMore info: https://blog.lucideus.com/2018/03/sql-truncation-attack-2018-lucideus.html & https://resources.infosecinstitute.com/sql-truncation-attack/#gref\n\nNote: This attack will no longer work as described above in latest MySQL installations. While comparisons still ignore trailing whitespace by default, attempting to insert a string that is longer than the length of a field will result in an error, and the insertion will fail. For more information about about this check: https://heinosass.gitbook.io/leet-sheet/web-app-hacking/exploitation/interesting-outdated-attacks/sql-truncation\n\nMySQL Insert time based checking\n\nAdd as much ','','' as you consider to exit the VALUES statement. If delay is executed, you have a SQLInjection.\n\nThe ON DUPLICATE KEY UPDATE clause in MySQL is utilized to specify actions for the database to take when an attempt is made to insert a row that would result in a duplicate value in a UNIQUE index or PRIMARY KEY. The following example demonstrates how this feature can be exploited to modify the password of an administrator account:\n\nExample Payload Injection:\n\nAn injection payload might be crafted as follows, where two rows are attempted to be inserted into the users table. The first row is a decoy, and the second row targets an existing administrator's email with the intention of updating the password:\n\nHere's how it works:\n\nThe query attempts to insert two rows: one for generic_user@example.com and another for admin_generic@example.com.\n\nIf the row for admin_generic@example.com already exists, the ON DUPLICATE KEY UPDATE clause triggers, instructing MySQL to update the password field of the existing row to \"bcrypt_hash_of_newpassword\".\n\nConsequently, authentication can then be attempted using admin_generic@example.com with the password corresponding to the bcrypt hash (\"bcrypt_hash_of_newpassword\" represents the new password's bcrypt hash, which should be replaced with the actual hash of the desired password).\n\nExtract information\n\nCreating 2 accounts at the same time\n\nWhen trying to create a new user and username, password and email are needed:\n\nUsing decimal or hexadecimal\n\nWith this technique you can extract information creating only 1 account. It is important to note that you don't need to comment anything.\n\nUsing hex2dec and substr:\n\nTo get the text you can use:\n\nUsing hex and replace (and substr):\n\n​\n\n​​​​​​RootedCON is the most relevant cybersecurity event in Spain and one of the most important in Europe. With the mission of promoting technical knowledge, this congress is a boiling meeting point for technology and cybersecurity professionals in every discipline.\n\nRouted SQL injection\n\nRouted SQL injection is a situation where the injectable query is not the one which gives output but the output of injectable query goes to the query which gives output. (From Paper)\n\nExample:\n\nWAF Bypass\n\nInitial bypasses from here\n\nNo spaces bypass\n\nNo Space (%20) - bypass using whitespace alternatives\n\nNo Whitespace - bypass using comments\n\nNo Whitespace - bypass using parenthesis\n\nNo commas bypass\n\nNo Comma - bypass using OFFSET, FROM and JOIN\n\nGeneric Bypasses\n\nBlacklist using keywords - bypass using uppercase/lowercase\n\nBlacklist using keywords case insensitive - bypass using an equivalent operator\n\nScientific Notation WAF bypass\n\nYou can find a more in depth explaination of this trick in gosecure blog. Basically you can use the scientific notation in unexpected ways for the WAF to bypass it:\n\nBypass Column Names Restriction\n\nFirst of all, notice that if the original query and the table where you want to extract the flag from have the same amount of columns you might just do: 0 UNION SELECT * FROM flag\n\nIt’s possible to access the third column of a table without using its name using a query like the following: SELECT F.3 FROM (SELECT 1, 2, 3 UNION SELECT * FROM demo)F;, so in an sqlinjection this would looks like:\n\nOr using a comma bypass:\n\nThis trick was taken from https://secgroup.github.io/2017/01/03/33c3ctf-writeup-shia/\n\nOther Guides\n\nhttps://sqlwiki.netspi.com/\n\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection\n\nBrute-Force Detection List\n\n​"
    }
}