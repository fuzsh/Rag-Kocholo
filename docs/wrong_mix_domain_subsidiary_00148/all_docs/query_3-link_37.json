{
    "id": "wrong_mix_domain_subsidiary_00148_3",
    "rank": 37,
    "data": {
        "url": "https://aws.amazon.com/blogs/database/migrate-your-sybase-ase-database-to-amazon-rds-for-sql-server-in-near-real-time/",
        "read_more_link": "",
        "language": "en",
        "title": "Migrate your Sybase ASE database to Amazon RDS for SQL Server in near-real time",
        "top_image": "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/05/DBBLOG-2378-featured-images.jpg",
        "meta_img": "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/05/DBBLOG-2378-featured-images.jpg",
        "images": [
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image001.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image003.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image005.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image007.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image009.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image011.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image013.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image015.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image017.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image019.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image021.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image023.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image025.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image027.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image029.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image031.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image033.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image035.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/01/DBBLOG-2378-image037.png",
            "https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2022/08/03/rajib-s.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Rajib Sadhu"
        ],
        "publish_date": "2022-08-05T05:47:13-07:00",
        "summary": "",
        "meta_description": "Customers running their business-critical workloads on SAP Adaptive Server Enterprise (Sybase ASE) databases can modernize them by migrating to Amazon Relational Database Service (Amazon RDS) for SQL Server and be able to keep Transact-SQL (T-SQL) as their preferred database programming language and Tabular Data Stream (TDS) as their communication protocol, which accelerates the migration and […]",
        "meta_lang": "en",
        "meta_favicon": "https://a0.awsstatic.com/main/images/site/fav/favicon.ico",
        "meta_site_name": "Amazon Web Services",
        "canonical_link": "https://aws.amazon.com/blogs/database/migrate-your-sybase-ase-database-to-amazon-rds-for-sql-server-in-near-real-time/",
        "text": "Customers running their business-critical workloads on SAP Adaptive Server Enterprise (Sybase ASE) databases can modernize them by migrating to Amazon Relational Database Service (Amazon RDS) for SQL Server and be able to keep Transact-SQL (T-SQL) as their preferred database programming language and Tabular Data Stream (TDS) as their communication protocol, which accelerates the migration and helps reduce costs. Amazon RDS for SQL Server makes it simple to set up and operate SQL Server deployments in the cloud by managing time-consuming database administration tasks, including provisioning, backups, software patching, monitoring, and hardware scaling.\n\nIn the post Migrate your SAP ASE (Sybase ASE) database to Amazon RDS for SQL Server, I presented a solution to migrate your Sybase ASE database schema and data to Amazon RDS for SQL Server using SQL Server Migration Assistant (SSMA) for Sybase, which is a free tool from Microsoft.\n\nAs of this writing, SSMA for Sybase supports one-time migration of the data and doesn’t support continuous replication.\n\nCustomers with business-critical applications and stringent Recovery Time Objective (RTO) requirements can’t afford long outages often required by the SSMA tool for large databases. Our customers have asked how to migrate their large databases in near-real time.\n\nIn this post, we examine a use case in which you migrate your Sybase ASE database schema using SSMA for Sybase and data to Amazon RDS for SQL Server using AWS Database Migration Service (AWS DMS) in near-real time.\n\nSolution overview\n\nThe SSMA and AWS DMS-based migration solution has the following major components:\n\nSQL Server Migration Assistant (SSMA) for Sybase – SSMA is a free tool from Microsoft, used to migrate schema objects from Sybase ASE to Amazon RDS for SQL Server\n\nAmazon Elastic Compute Cloud (Amazon EC2) – A Microsoft Windows Server 2016 Base AMI is used to support the SSMA tool\n\nAWS Direct Connect – Direct Connect is recommended to establish a dedicated network connection between your on-premises data centers and AWS\n\nAWS Database Migration Service (AWS DMS) – AWS DMS is used to continuously replicate data with low latency from the Sybase ASE source to Amazon RDS for SQL Server target\n\nThe following diagram illustrates the solution architecture.\n\nFor our use case, our Sybase ASE database is running on Amazon EC2, and we continuously replicate data from Sybase ASE to Amazon RDS for SQL Server using AWS DMS. The following diagram illustrates our architecture.\n\nThis solution has the following characteristics:\n\nSybase ASE is installed and configured to run on an Amazon EC2 server, which we refer to as the source database\n\nAn AWS DMS replication instance is created, which we refer to as the replication instance\n\nAmazon RDS for SQL Server is our target database\n\nTo perform the full load and set up continuous replication from Sybase ASE to Amazon RDS for SQL Server, you must complete the following high-level steps:\n\nCheck Replication Agent configuration\n\nOptionally, disable the RepAgent thread\n\nEstablish a Log Transfer Manager (LTM) truncation point\n\nEnable replication\n\nCreate a replication instance\n\nCreate a source endpoint\n\nCreate a target endpoint\n\nCreate a database migration task\n\nStart the migration task\n\nPrerequisites\n\nTo test this scenario, you must have the following prerequisites:\n\nAn AWS account\n\nAn EC2 instance with Sybase ASE installed and a user database (pubs2) created with tables and procedures\n\nThe Sybase ASE account, which we use to replicate the data, created and granted the required permissions\n\nAn RDS for SQL Server instance created\n\nAs outlined in Migrate your SAP ASE (Sybase ASE) database to Amazon RDS for SQL Server, only the schema is migrated using SSMA for Sybase (refer to the Migrate the schema section)\n\nDBeaver or a similar tool installed to connect to the Sybase ASE server\n\nSource database, replication instance, and target database created in the same VPC\n\nCheck Replication Agent configuration\n\nFind out if your database is configured to use Replication Agent by running the following command:\n\nexec sp_config_rep_agent\n\nIf your database isn’t configured to use Replication Agent, you can skip to the Establish an LTM truncation point step.\n\n(Optional) Disable the RepAgent thread\n\nDisabling the RepAgent thread allows the Mirror Replication Agent to reserve the logscan context in the primary database. Complete the following steps:\n\nConnect to the Sybase ASE server, open a new query window, and run the following command to stop the RepAgent thread:\n\nuse pubs2 exec sp_stop_rep_agent pubs2\n\nTo disable the RepAgent thread in the source database, run the following command:\n\nsp_config_rep_agent pubs2, 'disable', 'preserve secondary truncpt'\n\nEstablish an LTM truncation point\n\nTo establish an LTM truncation point, connect to the Sybase ASE server, open a new query window, and run the following command:\n\ndbcc settrunc('ltm', 'valid')\n\nEnable replication\n\nTo enable replication, complete the following steps:\n\nTo display the replication status for all the tables in the source database, run the following command:\n\nsp_setreptable\n\nTo enable replication on all the tables in the source database, run the output of the following command:\n\nselect 'sp_setreptable ' + name + ', ''true''' + ';' from sysobjects o where type = 'U' order by name;\n\nFor example:\n\nsp_setreptable au_pix, 'true'; sp_setreptable authors, 'true'; sp_setreptable blurbs, 'true'; sp_setreptable discounts, 'true'; sp_setreptable publishers, 'true'; sp_setreptable roysched, 'true'; sp_setreptable sales, 'true'; sp_setreptable salesdetail, 'true'; sp_setreptable stores, 'true'; sp_setreptable titleauthor, 'true'; sp_setreptable titles, 'true';\n\nTo validate replication is enabled, run the following command:\n\nsp_setreptable\n\nCreate a replication instance\n\nTo set up continuous replication, create an AWS DMS replication instance following these steps:\n\nOn the AWS DMS console, choose Replication instances in the navigation pane.\n\nChoose Create replication instance.\n\nEnter a name and description.\n\nChoose an instance class.\n\nFor Engine version, we recommend choosing the latest AWS DMS engine version.\n\nThe default setting for Allocated storage is 50 GB; you can change it as needed.\n\nFor VPC, choose your VPC.\n\nFor Multi AZ, choose between a production workload (Multi-AZ) and dev or test workload (Single-AZ) setup based on your requirement.\n\nReview the settings for Advanced security and network configuration, Maintenance, and Tags.\n\nChoose Create.\n\nCreate a source endpoint\n\nNext, you need to create the source endpoint and test the connection using the replication instance you created in the previous step.\n\nOn the AWS DMS console, choose Endpoints in the navigation pane.\n\nChoose Create endpoint.\n\nFor Endpoint type, choose Source endpoint.\n\nFor Endpoint identifier, enter a name for your endpoint.\n\nFor Source engine, choose SAP Sybase ASE.\n\nFor Access to endpoint database options, select Provide access information manually.\n\nFor Server name, enter the source database server name.\n\nEnter the port, user name, password, and database name for the source database server.\n\nChoose Create endpoint.\n\nAfter you create the endpoint, select it and on the Actions menu, choose Test Connection to make sure it’s successful.\n\nCreate a target endpoint\n\nNext, you create the target endpoint and test the connection using the replication instance you created in the previous step.\n\nOn the AWS DMS console, choose Endpoints in the navigation pane.\n\nChoose Create endpoint.\n\nFor Endpoint type, select Target endpoint.\n\nSelect RDS DB instance and choose the RDS for SQL Server instance.\n\nFor Endpoint identifier, enter a name for your endpoint.\n\nFor Target engine, choose Microsoft SQL Server.\n\nFor Access to endpoint database, select Provide access information manually or AWS Secrets Manager depending on your preference.\n\nFor Server name, enter the target database server name.\n\nEnter the port, user name, password, and database name for the target database server.\n\nChoose Create endpoint.\n\nAfter you create the endpoint, select it, and on the Actions menu, choose Test Connection to make sure it’s successful.\n\nCreate a database migration task\n\nTo create the database migration task using the replication instance and source and target endpoints, complete the following steps:\n\nOn the AWS DMS console, choose Database migration tasks in the navigation pane.\n\nChoose Create task.\n\nFor Task identifier, enter a unique name.\n\nChoose your replication instance, source database endpoint, and target database endpoint.\n\nFor Migration type, choose Migrate existing data and replicate ongoing changes.\n\nFor Target table preparation mode, select Do nothing.\n\nFor Stop task after full load completes, select Don’t stop.\n\nFor Include LOB columns in replication, select Limited LOB mode.\n\nFind out the maximum LOB size (KB) using the Best practices section later in this post.\n\nSkip the Enable validation option because it’s not supported (as of this writing) for the Sybase endpoint.\n\nSelect Enable CloudWatch logs to gain insights during the migration process from Amazon CloudWatch.\n\nReview the Advanced task settings options and enter values as needed.\n\nIn the Table mappings section, under Selection rule, choose Add new selection rule.\n\nEnter % for Schema name and Table name to include all the schemas and tables from the source database.\n\nFor Start migration task, select Manually later.\n\nChoose Create task.\n\nStart the migration task\n\nBefore you start the migration task, make sure you have disabled the foreign key constraints and triggers at the target database migrated using SSMA for Sybase.\n\nFor a database with a large number of triggers, you can run the output of the following commands from SQL Server Management Studio (SSMS):\n\nuse pubs2 go select 'DISABLE TRIGGER ' + name + ' ON ' + object_name(parent_id) + ';' from sys.triggers\n\nFor a database with a large number of foreign keys, you can run the output of the following commands from SSMS:\n\nuse pubs2 go SELECT 'ALTER TABLE ' + sc.name + '.' + o.name + ' NOCHECK CONSTRAINT ' + fk.name FROM sys.foreign_keys AS fk INNER JOIN sys.objects AS o ON fk.parent_object_id = o.object_id inner join sys.schemas sc ON sc.schema_id = o.schema_id\n\nTo start the migration task, complete the following steps:\n\nOn the AWS DMS console, choose Database migration tasks in the navigation pane.\n\nSelect the task you created.\n\nOn the Actions menu, choose Restart/Resume.\n\nValidate the migration\n\nTo validate the schema migration, follow the instructions in Testing Migrated Database Objects (SybaseToSQL).\n\nOn the AWS DMS console, choose Database migration tasks in the navigation pane.\n\nChoose the database migration task.\n\nOn the Table statistics tab, review the Full load rows, Inserts, Updates, and Deletes columns.\n\nTo view the CloudWatch logs, choose View logs.\n\nOn the CloudWatch Logs console, you can download the logs in CSV format from the Actions menu.\n\nPerform the cutover\n\nTo complete the cutover, follow these steps:\n\nFind and download the latest Microsoft ODBC and Microsoft JDBC drivers to use in the application.\n\nFind an approved outage window for the application and stop the application.\n\nVerify the target database is in sync with the source database.\n\nOn the AWS DMS console, choose Database migration tasks in the navigation pane.\n\nSelect the migration task and on the Actions menu, choose Stop.\n\nEnable the triggers at the target database.For a database with a large number of triggers, you can run the output of the following commands from SSMS:\n\nuse pubs2 go select 'ENABLE TRIGGER ' + name + ' ON ' + object_name(parent_id) + ';' from sys.triggers\n\nEnable the foreign keys at the target database.\n\nFor a database with a large number of foreign keys, you can run the output of the following commands from SSMS:\n\nuse pubs2 go SELECT 'ALTER TABLE ' + sc.name + '.' + o.name + ' WITH CHECK CHECK CONSTRAINT ' + fk.name FROM sys.foreign_keys AS fk INNER JOIN sys.objects AS o ON fk.parent_object_id = o.object_id inner join sys.schemas sc ON sc.schema_id = o.schema_id\n\nDeploy application changes related to this migration.\n\nStart the application.\n\nBest practices\n\nThe following best practices are recommended:\n\nCreate the AWS DMS replication instance in the same AWS Region and Availability Zone as Amazon RDS for SQL Server to have minimum network latency between them.\n\nRight-size the AWS DMS replication instance in terms of CPU, memory, and storage based on your database size and data types in the database.\n\nConsider changing the default values via the AWS DMS Database migration tasks page when creating the task to optimize the full load.\n\nIdentify the tables with LOB data to improve the speed of an AWS DMS task using the following code:\n\nselect o.name as table_name, c.name as column_name, t.name as data_type from sysobjects o inner join syscolumns c on o.id=c.id inner join systypes t on t.type = c.type where o.type='U' and c.type in (34,35,174);\n\nIdentify the maximum LOB size by running the output of the following code:\n\nselect 'select max(datalength(',c.name, ')) from dbo.', o.name,';' from sysobjects o, syscolumns c where o.type = 'U' and o.id = c.id and c.type in (34,35,174);\n\nIdentify large tables using the following code:\n\nselect top 10 convert(varchar(30),o.name) AS table_name, row_count(db_id(), o.id) AS row_count, data_pages(db_id(), o.id, 0) AS pages, data_pages(db_id(), o.id, 0) * (@@maxpagesize/1024) AS kbs from sysobjects o where type = 'U' order by kbs DESC, table_name ASC;\n\nChoose the right Amazon RDS for SQL Server collation by identifying the character set of the source Sybase ASE database using the following code:\n\nexec sp_default_charset\n\nClean up\n\nTo remove all the components created by this solution and avoid future charges, complete the following steps:\n\nSign in to the AWS Management Console\n\nChoose the Region where your EC2 instance, RDS for SQL Server instance, and AWS DMS replication instance reside\n\nOn the Amazon RDS console, choose Databases\n\nSelect the RDS for SQL Server instance and on the Actions menu, choose Delete\n\nOn the Amazon EC2 console, choose Instances\n\nSelect the EC2 instances used as source data and SSMA host\n\nOn the Instance state menu, choose Terminate instance\n\nOn the AWS DMS console, choose Database migration tasks\n\nSelect the migration task and on the Actions menu, choose Stop\n\nWait for the task to stop, then choose Delete\n\nOn the AWS DMS console, choose Endpoints\n\nSelect the source and target endpoints and on the Actions menu, choose Delete\n\nOn the AWS DMS console, choose Replication instances\n\nSelect the replication instance and on the Actions menu, choose Delete\n\nLimitations\n\nThis solution has the following limitations:\n\nAWS DMS doesn’t support clusters or using MSA (Multi-Site Availability) or warm standby as a source.\n\nYou can run only one AWS DMS task with ongoing replication or change data capture (CDC) for each SAP ASE database. For more information, see Limitations on using SAP ASE as a source for AWS DMS.\n\nReview Limitations on using SQL Server as a target for AWS Database Migration Service.\n\nSummary\n\nIn this post, we demonstrated how to create an AWS DMS replication instance, endpoints, and database migration tasks followed by data migration (continuous replication) from Sybase ASE to Amazon RDS for SQL Server using AWS DMS. Try out Amazon RDS for SQL Server and migrate your Sybase ASE database workload to AWS in near-real time.\n\nIf you have any comments or feedback, leave them in the comments section.\n\nAbout the author\n\nRajib Sadhu is Senior Database Specialist Solutions Architect with over 15 years of experience in Microsoft SQL Server and other database technologies. He helps customers architect and migrate their database solutions to AWS. Prior to joining AWS, he supported production and mission-critical database implementation across the financial and travel and hospitality industry segments."
    }
}