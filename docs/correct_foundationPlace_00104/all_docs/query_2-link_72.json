{
    "id": "correct_foundationPlace_00104_2",
    "rank": 72,
    "data": {
        "url": "https://www.dataversity.net/modeling-modern-knowledge-graphs/",
        "read_more_link": "",
        "language": "en",
        "title": "Modeling Modern Knowledge Graphs",
        "top_image": "https://d3an9kf42ylj3p.cloudfront.net/uploads/2018/01/Thomas-Frisendal_300x224.png",
        "meta_img": "https://d3an9kf42ylj3p.cloudfront.net/uploads/2018/01/Thomas-Frisendal_300x224.png",
        "images": [
            "https://www.dataversity.net/wp-content/themes/dataversity/inc/images/dv-logo.png",
            "https://www.dataversity.net/wp-content/themes/dataversity/inc/images/dv-logo.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2018/01/Thomas-Frisendal_300x224.png 300w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2018/01/Thomas-Frisendal_300x224-260x194.png 260w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2018/01/Thomas-Frisendal_300x224.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2024/01/1x1.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2024/01/1x1.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/theDisconnections-1024x592.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/theDisconnections-1024x592.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic1.png 678w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic1-300x212.png 300w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic1.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic2.png 923w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic2-300x122.png 300w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic2-768x312.png 768w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic2.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic3.png 670w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic3-300x209.png 300w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic3.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic4.png 828w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic4-300x228.png 300w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic4-768x582.png 768w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic4.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic5.png 767w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic5-300x175.png 300w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic5.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic6.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic6.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic7.png 835w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic7-300x205.png 300w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic7-768x524.png 768w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic7.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic8.png 242w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic8-156x300.png 156w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic8.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic9.png 489w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic9-241x300.png 241w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic9.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic10.png 550w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic10-267x300.png 267w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic10.png",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic11.png 469w, https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic11-300x244.png 300w",
            "https://d3an9kf42ylj3p.cloudfront.net/uploads/2023/05/051423_pic11.png",
            "https://www.dataversity.net/wp-content/themes/dataversity/inc/images/dv-logo.png",
            "https://www.dataversity.net/wp-content/themes/dataversity/inc/images/dv-logo.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Twitter_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Twitter_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Linkedin_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Linkedin_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Youtube_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Youtube_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Flipboard_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Flipboard_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Facebook_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2022/03/Facebook_white.png",
            "https://dv-website.s3.amazonaws.com/uploads/2018/12/Screen-Shot-2018-12-26-at-2.44.26-PM.png",
            "https://dv-website.s3.amazonaws.com/uploads/2018/12/Screen-Shot-2018-12-26-at-2.44.26-PM.png",
            "https://dv-website.s3.amazonaws.com/uploads/2018/12/Screen-Shot-2018-12-26-at-2.44.16-PM.png",
            "https://dv-website.s3.amazonaws.com/uploads/2018/12/Screen-Shot-2018-12-26-at-2.44.16-PM.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Thomas Frisendal"
        ],
        "publish_date": "2023-05-15T07:25:00+00:00",
        "summary": "",
        "meta_description": "In the buzzing world of data architectures, one term seems to unite some previously contending buzzy paradigms: knowledge graphs.",
        "meta_lang": "en",
        "meta_favicon": "/wp-content/uploads/2015/10/DV-R-1025-Transparent.png?x38402",
        "meta_site_name": "DATAVERSITY",
        "canonical_link": "https://www.dataversity.net/modeling-modern-knowledge-graphs/",
        "text": "In the buzzing world of data architectures, one term seems to unite some previously contending buzzy paradigms. That term is “knowledge graphs.”\n\nIn this post, we will dive into the scope of knowledge graphs, which is maturing as we speak.\n\nFirst, let us look back. “Knowledge graph” is not a new term; see for yourself in this clipping from Wikipedia (accessed April 26, 2023):\n\nThe term was coined as early as 1972 by the Austrian linguist Edgar W. Schneider, in a discussion of how to build modular instructional systems for courses. In the late 1980s, University of Groningen and University of Twente jointly began a project called Knowledge Graphs, focusing on the design of semantic networks with edges restricted to a limited set of relations, to facilitate algebras on the graph. In subsequent decades, the distinction between semantic networks and knowledge graphs was blurred.\n\nSo, it is a European idea. But it took many years for it to get a real breakthrough. And that happened in the U.S.: In 2012, Google posted this on its blog:\n\nGoogle’s knowledge graph was, initially, partially built on top of DBPedia and Freebase and was amended by impressive amounts of information from many other sources. Most tech companies joined the movement, including Facebook, LinkedIn, Airbnb, Microsoft, Amazon, Uber, and eBay, to mention a few.\n\nGoogle’s adoption of the knowledge graph paradigm really changed the public interest. Here is an “Interest over time” curve from Google Trends (drawn in early April 2023):\n\nAnd the interest is steadily growing in our time.\n\nHere is Google’s introductory explanation in the 2012 blog post:\n\nKnowledge management technologies came out of the semantic web community based on concepts such as RDF (Resource Definition Framework, a stack for defining semantic databases, taxonomies, and ontologies), open world assumptions, linked open data (on the web), and semantics with inferencing. That movement started in 1999, but the semantic industry struggled to get market attention. Many of the supporters said that “we need a killer application!” Well, knowledge graphs are just that. Congratulations!\n\nKnowledge Graphs in the Contemporary Buzzword Soup\n\nAs it happened, 2012 was also in the period when the Apache Foundation (with the Tinkerpop specification) as well as Neo4j (out of Sweden) got sizable market attention on their so-called “property graph” approaches to graph modeling.\n\nGoogle started to collect data on “Interest over time” for very many search terms in 2004. I have collected a little collection of buzzwords related to, or in contradiction of, knowledge graphs. Reduced to yearly numbers (Google Trends uses months), I am proud to present a “Buzzword Pixie from the Data Jungle”:\n\nLooking for trending buzzwords, I notice: data engineer, data catalog, data lakehouse, data modeling (admittedly modest numbers), data observability, data vault, graph database, machine learning, property graph, knowledge graph, semantic networks, and semantic layer. So, the combined list of goodies found in those paradigms is what is moving forward. To build a modern knowledge graph, you must look toward those requirements.\n\nIs Knowledge Graph a Technology Battle?\n\nI did not include RDF in my interest-over-time Pixie book above. Here is the reason (again from Google Trends):\n\nCompared with some of the contemporary buzzwords, RDF is not a winner. However, it qualifies to become part of the not-so-charming category of legacy databases. The data world is full of useful taxonomies and ontologies, which many organizations cannot live without. From a data perspective, property graph databases buzz a lot stronger.\n\nCan you build semantic networks in property graphs? Yes, you can! Look up, for example, Neo4j’s Neosemantics, and you will see that interoperability is indeed very real:\n\nneosemantics (n10s) is a plugin that enables the use of RDF and its associated vocabularies like (OWL,RDFS,SKOS and others) in Neo4j. RDF is a W3C standard model for data interchange. You can use n10s to build integrations with RDF-generating / RDF-consuming components. You can also use it to validate your graph against constraints expressed in SHACL or to run basic inferencing.\n\nAdd to that leading DBMS providers include both sides of the graph DBMS technologies into their product. Here is a quick survey by the undersigned:\n\nMicrosoft Azure Cosmos DB\n\nNoSQL, MongoDB, Cassandra, Gremlin, Table, PostgreSQL\n\nMicrosoft Azure SQL / SQL Server, SQL, Property graph\n\nAmazon Neptune\n\nopenCypher, Gremlin, SPARQL (RDF)\n\nOracle\n\nSQL, SQL PGQ, RDF, XML\n\nREDIS\n\nopenCypher, key-value\n\nIBM DB2\n\nSQL, RDF\n\nMariaDB\n\nSQL, OQGraph\n\nTeradata\n\nSQL, SQL-GR\n\nSAP HANA\n\nSQL, openCypher\n\nDatastax/Cassandra\n\nCQL, Gremlin\n\nProperty graphs have an easy learning curve, whereas RDF stores have a steep learning curve. In my opinion, 80% of ordinary, daily knowledge graph activities are easily (i.e., quickly) solved in property graph – with good quality. Querying property graphs is also considerably easier and the choice of really nice graph browsers is overwhelming. Finally, property graphs are highly performant in highly connected graphs with many nodes and even more relationships. We need that, as you will see further down in this post.\n\nSo: The name of the game is to combine the best of the two worlds.\n\nFortunately, the integration is easier because of existing paradigm parallelisms, which are already in place.\n\nUniting by Way of Decomposition\n\nThe secret sauce is that both RDF and property graphs are, well, graphs. And graphs have been handled by a small army of mathematicians over a couple of hundred years. There is a solid theoretical background to take advantage of. One of the challenges is “isomorphism” of graphs. Pretty nifty mathematics designed to answer the question of whether two graphs are comparable. One of the easier ways of looking at this is called defining a canonical form of the graphs – sometimes called graph normal form. This starts at the most basic structural building block of graphs:\n\nThis is found in many contexts: The ISO 24707 Common Logic standard with its conceptual graphs built from concepts and relations, “fact statements” (conceptual modeling and object-role modeling, ORM), triples (RDF, semantics, ontologies, etc.), relationships/edges (various kinds of property graphs), and functional dependencies (between and inside) relations in relational theory.\n\nHere is an example of a canonical graph representation – call it graph normal form, if you like:\n\nThis representation is almost a collection of subject-predicate-object occurrences. In RDF they are called “triples” and they are the basic building blocks of triple stores (RDF databases). There are some extensions on top of this, but they can be handled.\n\nIf we want to build a property graph representation of this webshop example, note that property graphs can be seen as materializations (logical or physical) of the decomposed graph normal form representations of some semantic data models. Some properties are aggregated to become attributes of different node/vertex types, and/or also on different edge/relationship types. Properties on relationships are not shown in this sample diagram:\n\nSo, if we want to build knowledge graphs that share information from RDF stores (ontologies for example) and property graphs (operational data for example) we need to have the canonical form at hand – making mappings and so forth practicably available.\n\nThe canonical form is clearly the top level of metadata, which brings us to the next observation.\n\nThe Metadata and the Content Are Related\n\nGraphs (both RDF and most property graphs) are based on the so-called open world assumption, which leads to benefits such as:\n\nOne of the most popular capabilities of leading property graph database products is “schema-less” development. Meaning that no schema is necessary for loading data.\n\nInspections, using graph queries, of the data contents lead to – over some iterations, probably, a better understanding of the data model, sort of a prototyping approach to data modeling.\n\nThe structures of the graph data model might be iteratively changed (no schema to change).\n\nA canonical form of the inner graph structure is easy to derive (inside your head) from the graph elements, including edges/relationships and the structures they represent. The canonical form can remain the same, even after structural changes such as rearranging the allocation of properties to nodes and edges/relationships are performed.\n\nThis is in contrast to the relational/SQL model, where a canonical form is not that easy to visualize just by looking at the structure (not all dependencies need to be explicit). And, if the SQL data model undergoes deeper normalization, denormalization or combinations of both, keeping mentally up with an intuitive understanding of the semantics will grow more and more complex.\n\nIt is all about the distance between the logical data model and a corresponding conceptual data model – which in graph models is easy to grasp, even without visualization. This makes graph data models more robust and flexible.\n\nThe Metadata and the Content Evolve – Together!\n\nIn my earlier blog post 2023: Mitigating Data Debt by Knowing or by Guessing? I introduced a little concerns dependencies model, which can be summarized like this:\n\nIt is rather obvious that the metadata and the content evolve, together! And in our times these changes are blindingly fast. If you must keep up without costly re-reengineering efforts, you must deal with changes in metadata and in business data, as they occur. You are streaming in facts, which are morphing as you look. Obviously, you must deal with:\n\nDynamics are value-driven\n\nImpact analytics after the fact\n\nIntegrations and lineages\n\nDiscovery (the graph way)\n\nDependencies not linear\n\nOutcomes and usages\n\nThe web is a graph\n\nYour mesh (web) is a graph\n\nKnow your space(s)!\n\nSo, changes occur daily, i.e., you must keep track of them in your knowledge graph!\n\nThe combination of contextualization, federated semantics, and accountability dictates that you should (and could) build a knowledge graph in 2023.\n\nYou can do that by:\n\nLeveraging APIs to semantic media such as Google, Apple, Microsoft, etc. and/or\n\nTake advantage of open semantic sources such as\n\nWikidata\n\nIndustry standard ontologies\n\nInternational and national standard ontologies\n\nOther more or less open sources such as Opencorporates and more\n\nYou can build it in property graph technology, which has an easier learning curve than RDF.\n\nYou can use your own knowledge graph as an important part of the data contract with the business (make requirements machine-readable).\n\nYou can use your knowledge graph to make completeness tests as well as look for accountability features, missing information, (lack of) temporality information, and so forth.\n\nYou can use a graph prototype as a test and verification platform for the businesspeople.\n\nWhat Does My Knowledge Graph Look Like?\n\nWell, we must build something that:\n\nCombines data and metadata\n\nHas a canonical concept model in its core\n\nCan work with ontologies etc. from the RDF world\n\nHandles various kinds of graph models\n\nHandles recordkeeping, including\n\ntimeline-based versioning\n\nretention and archival\n\nusage consents\n\nHandles mappings and observations about data quality, lineage, sources, interfaces, etc.\n\nAnd, oops, I almost forgot:\n\nHas fresh operational and historical data as graphs, maybe also property graph views on top of SQL databases\n\nHere is a work-in-progress architecture of a modern, mature knowledge graph:\n\nThis is a work-in-progress, and I will return to it in later blog posts; for now, just a few comments.\n\nThere are three purpose-oriented “subgraphs”:\n\nThe semantic layer – model-oriented metadata, the schema information graph\n\nTechnical metadata describing data characteristics such as mappings, lineage, and physical stores, as well as data quality issues\n\nBusiness graph instances – the real, operational data included in the knowledge graph; be it physically or via mappings (such as SQL-PGQ) to external databases.\n\nOne thing that is immediately obvious is that the combination of metadata and data creates a complex, highly connected graph. In other words, you need a property graph for dealing with it, and you all the help that you can get for maintaining the semantics and the relationships on the fly. Generative AI (though it must be curated) is certainly on the roadmap for assistance with data modeling, and data models as code are also a necessity.\n\nAlso note that “ontologies” is meant in a broad sense; you might want to include information available via APIs from external knowledge graphs or search interfaces maintained by Google, Apple, Microsoft, Wikidata, or even the EU Knowledge Graph – not to mention generative AI services.\n\nAnother obvious observation is that the canonical concept models serve as anchorpoints/placeholders for almost all other metadata in knowledge graph. Here is an example outlining how timeline-based versioning could be defined:\n\nThe canonical concept model is in the lower half, whereas the blue labels in the upper half are recordkeeping metadata establishing three named timelines (and their associated graph property concepts):\n\nAvailability (in the business)\n\nValidity (for the business)\n\nIdentity – uniqueness handling over time\n\nThe dotted lines are meta graph relationships linking the recordkeeping metadata with the canonical model.\n\nSimilarly, the canonical model is “owner” of the ontology metadata entries as well as of the graph model metadata on the semantic level; and it also “owns” the technical metadata mappings, lineage, and observations. The sum of all those subgraphs is a large, highly connected knowledge graph!\n\nThe real game-changer is to look at metadata and data together and handle them together as daily incoming flows of changing metadata and data. Changes do occur frequently, and a robust recordkeeping approach is a necessity.\n\n© Thomas Frisendal, 2023, CC BY-SA 4.0"
    }
}