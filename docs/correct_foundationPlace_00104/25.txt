What is a knowledge graph?

Obviously, this is a pretty straight-forward question - What is a knowledge graph? Believe it or not, the industry, to this day, does not have a standard, united, simple definition of a knowledge graph. Knowledge graphs in the form we know them today have been around for approximately 50 years - give or take. However, as you might have guessed, or as you already knew, knowledge graphs are based on graph theory, the foundations of which were laid by Leonhard Euler's response to the issue of Seven Bridges of KÃ¶nigsberg; in 1736! Not so recent now, is it? Anyways, in very simple terms, the great-grandpa of knowledge graphs is the issue of Seven Bridges: Once upon a time, there was a city - KÃ¶nigsberg, lying on both banks of the river Pregel. There were two islands on the river, and these islands were connected to both banks and each other by seven bridges.

The Issue of Seven Bridges in KÃ¶nigsberg was worded by Carl Ehler, who wanted to find a path, if you will, that would cross every bridge but would cross it only once. Quite a pickle, isn't it? Well, yes. A huge pickle. It's impossible. Leonhard Euler claimed it to be impossible and found that to create such a - Eulerian - path that would cross each bridge only once, it is possible only in one of two scenarios:

When there are exactly two nodes - the starting and the finish point - connected via an even number of bridges.

When all the nodes (islands) are of an even degree - each being connected to another by an even number of bridges. In this case, the path starts and ends at the same place. Such a path is also called a Eulerian circuit.

That was a bit of background. Now, let's go back to the picture of our islands and bridges connecting them. Simplifying the picture, we get a bunch of circles connected by lines. This is basically a graph. Knowledge graphs are composed of nodes and relationships among them, both of which can have different attributes. For example, a node can be a person node, with attributes such as age, gender, address, phone number, etc. Now, two nodes can be connected with a relationship - for example, a person node can be connected to a movie node with an "ACTED IN" relationship. In the pictures below, you can see that Tom Cruise acted in Top Gun, as well as attributes of Tom Cruise (such as his name and the year he was born), and of the "ACTED IN" relationship (the role he played).

The possibility of having different kinds, and different numbers of attributes on both nodes and relationships is one of the advantages of graph databases over traditional ones. This has to do with their lack of a fixed schema. We will explore different databases and their characteristics later in the series.

If you'd like to get more technical, the next step would be to look into the two perspectives from which one can approach knowledge graphs - resource description framework (RDF) and labeled property graph (LPG). My colleague Giuseppe explored these perspectives in depth in his article Knowledge Graph Perspectives: building bridges from RDF to LPG.

So let's bring it all together with the definition of knowledge graphs used by Deloitte:

A Knowledge Graph is a close-to-reality model that represents a company's business logic and serves as its central knowledge platform. You could say it is the brain of a company, as its architecture is very similar to that of our brains - unlike traditional databases and data lakes. Both connect objects directly with each other rather than storing data in different tables and then connecting them via JOIN-tables.

Knowledge graphs are everywhere.

The second very essential thing to know about KGs is that they are commonly used. While knowledge graphs have a vast number of use cases, they serve some areas better than others, or at least they are more commonly used in certain areas.

Search

One of the most commonly cited examples of graph use cases is (optimized) search. Each time you type a search query into a search engine like Google or Yahoo!, the engine has to comb through what is for me an unimaginable amount of data before providing search results. And this needs to be done within milliseconds. To do so, search engines use knowledge graphs.

This use case clearly illustrates that knowledge graphs are great for dealing with vast amounts of data and speedy in recovering the information one is looking for (this is thanks to the way graph databases are structured and how they retrieve information). Furthermore, this example also points to one other use case for which KGs are ideal - natural language processing (NLP). While this is another chapter, the important thing to understand is that knowledge graphs and their algorithms, especially in combination with machine learning, can process natural language, look for patterns, assess similarities, identify keywords, group content together, and more - all of which enhances and improves search.

Recommendation engines

Another common use case for knowledge graphs are recommendation engines. The sections of the websites reading "You may also like" and "People also bought" are the most common examples, however, social networks like Facebook or LinkedIn also use knowledge graphs to provide friend recommendations. These can be based on your activity like where you went to school, where do you work, where do you live and so on, and/or they can be based on your friends and who their friends are - knowledge graphs are ideal for providing these kinds of recommendations.