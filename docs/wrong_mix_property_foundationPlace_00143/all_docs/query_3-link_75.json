{
    "id": "wrong_mix_property_foundationPlace_00143_3",
    "rank": 75,
    "data": {
        "url": "https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later",
        "read_more_link": "",
        "language": "en",
        "title": "Amazon’s DynamoDB — 10 years later",
        "top_image": "https://assets.amazon.science/dims4/default/4c34b56/2147483647/strip/true/crop/1440x756+0+27/resize/1200x630!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F51%2F26%2Ffe7cc5734be29b46667d0c753ede%2Fswami-werner-dynamo-db.jpg",
        "meta_img": "https://assets.amazon.science/dims4/default/4c34b56/2147483647/strip/true/crop/1440x756+0+27/resize/1200x630!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F51%2F26%2Ffe7cc5734be29b46667d0c753ede%2Fswami-werner-dynamo-db.jpg",
        "images": [
            "https://assets.amazon.science/dims4/default/84daefc/2147483647/strip/true/crop/54x30+0+12/resize/1440x810!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F85%2Fcd%2F36ef075d49dc9ee4f0502f9cc72e%2Fsubscribe-icon.png",
            "https://assets.amazon.science/07/d9/d204ca2242bea8215dbf9ca5c43e/amazon-science-logo.svg",
            "https://assets.amazon.science/dims4/default/84daefc/2147483647/strip/true/crop/54x30+0+12/resize/1440x810!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F85%2Fcd%2F36ef075d49dc9ee4f0502f9cc72e%2Fsubscribe-icon.png",
            "https://assets.amazon.science/dims4/default/a594624/2147483647/strip/true/crop/1440x810+0+0/resize/1440x810!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F51%2F26%2Ffe7cc5734be29b46667d0c753ede%2Fswami-werner-dynamo-db.jpg 1x,https://assets.amazon.science/dims4/default/a880c95/2147483647/strip/true/crop/1440x810+0+0/resize/2880x1620!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F51%2F26%2Ffe7cc5734be29b46667d0c753ede%2Fswami-werner-dynamo-db.jpg 2x",
            "https://assets.amazon.science/dims4/default/dcfdc0b/2147483647/strip/true/crop/200x200+0+0/resize/295x295!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Ff0%2F77%2Fc3f20396d4039232f1b25e238350%2Famazons-dynamodb-10-years-laterqrcode",
            "https://assets.amazon.science/dims4/default/733cf2a/2147483647/strip/true/crop/1000x975+0+0/resize/1200x1170!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fac%2F48%2F46a1ebe44c45aef162eda50eadd8%2Fdynamo-db-werner-announcement.jpg",
            "https://assets.amazon.science/dims4/default/908fc8f/2147483647/strip/true/crop/1508x845+0+12/resize/535x300!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fa2%2F7f%2Fc0888d404c8c973469b40df41582%2Fmix-1728x1080.jpg",
            "https://assets.amazon.science/dims4/default/e2dd6e2/2147483647/strip/true/crop/1920x1077+0+2/resize/535x300!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F8d%2F85%2F3fffacb04d7e8cc45c756e379bea%2Femissions-free-paper-mill-amazon-science-4.png",
            "https://assets.amazon.science/dims4/default/9aad29d/2147483647/strip/true/crop/900x505+0+1/resize/535x300!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Fc5%2F93%2Fd2e1eb814927bc12b7da13fa9e19%2Famaozn-science-project-p.I.gif",
            "https://assets.amazon.science/17/83/40ea1c0845b88a6e9f3b42613d82/amazon-science-logo-white.svg",
            "https://assets.amazon.science/dims4/default/29c19bf/2147483647/strip/true/crop/1014x877+4+346/resize/326x282!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2F20%2Fc4%2Fc36de9f643dab18e2f27ea071590%2Famazon-science-newsletter-project-kuiper.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/CvFFCHAEBPM?enablejsapi=1"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Staff"
        ],
        "publish_date": "2022-01-18T19:47:10.021000+00:00",
        "summary": "",
        "meta_description": "Amazon DynamoDB was introduced 10 years ago today; one of its key contributors reflects on its origins, and discusses the 'never-ending journey' to make DynamoDB more secure, more available and more performant.",
        "meta_lang": "en",
        "meta_favicon": "/apple-touch-icon.png",
        "meta_site_name": "Amazon Science",
        "canonical_link": "https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later",
        "text": "A.\n\nTo get to 2007, I have to start with 2004, 2005. Even as I was working on my PhD [Sivasubramanian earned his PhD in computer science in 2006 from Vrije Universiteit Amsterdam] I was contemplating where I would work. Ultimately what convinced me to join Amazon as a research engineer intern [2005] was seeing how Amazon was pushing the boundaries of scale.\n\nI admit I was a little bit of a skeptic as an outsider. At that time, AWS didn’t even exist. But when I joined, I soon had an ‘a ha moment’ that, yes, Amazon was an e-commerce company, but actually it was a technology company that also did e-commerce. It was an interesting revelation for me seeing how Amazon had to invent so many new technologies to even support its e-commerce workload.\n\nAs an intern, I was working as an engineer on amazon.com and during our peak holiday traffic time we experienced a serious scaling failure due to a database transaction deadlocking issue. The problem was caused by the relational database from a commercial vendor that we were using at the time. A bunch of engineers got together and wrote what we call a COE, a correction of errors document in which we say what happened, what we learned, how we fixed the issue, and how we would avoid a recurrence.\n\nI don't know if it was me being naive or just being confident in the way only a 20 something intern can be, but I asked the question ‘Why are we using a relational database for this? These workloads don't need the SQL level of complexity and transactional guarantees.’\n\nPeter Vosshall presents Dynamo at 2007 ACM Symposium on Operating System Principles (SOSP).\n\nThis led us to start rethinking how we architected our underlying data stores altogether. At the time there wasn’t a scalable non-relational database. This is what led us to build the original Dynamo, and which led us to write the paper. Dynamo was not the only thing we were rethinking about our architecture at this time. We realized we also needed a scalable storage system, which led us to build S3, and we also realized that we needed a more managed relational database with the ability to do automated replication, failover, and backups/restore, which led us to build Amazon RDS.\n\nOne rule we had related to writing the original Dynamo paper was not to publish when we developed the original design, but first let Dynamo run in production supporting several Amazon.com services, so that the Dynamo paper would be an end-to-end experience paper. Werner and I felt very strongly about this because we didn't want it to be just another academic paper. That’s why I was very proud when 10 years later that paper was awarded a test of time award.\n\nA.\n\nThe idea behind DynamoDB developed from discussions with customers like Don MacAskill, the CEO of SmugMug and Flickr. More and more companies like Don’s were web-based companies, and the number of users online was exploding. The traditional relational database model of storing all the data in a single box was not scaling well. It forced the complexity back on the users to shard their relational databases and then manage all the partitioning and re-partitioning and so forth.\n\nThis wasn’t new to us; these challenges are why we built the original Dynamo, but it wasn’t yet a service. It was a software system that Amazon engineers had to operate. At some point in one of our customer advisory board meetings, Don said, ‘You all started Dynamo and showed what is possible with a scalable non-relational database system. Why can't we have that as an external service?’\n\nAll senior AWS executives were there, and honestly it was a question we were asking ourselves at the time. Don wasn’t the only customer asking for it, more and more customers wanted that kind of scalable database where they didn't have to deal with partitioning and re-partitioning, and they also wanted extreme availability. This led to the genesis of our thinking about what it would take to build a scalable cloud database that wasn’t constrained by the SQL API.\n\nDynamoDB was different from the original Dynamo because it actually exposed several of the original Dynamo components via very easy-to-use cloud controls. Our customers didn’t have to provision clusters anymore. They could just create a table and seamlessly scale it up and down; they didn’t have to deal with any of the operations, or even install a single library to operate a database. This evolution of Dynamo to DynamoDB was important because we truly embraced the cloud, and its elasticity and scalability in an unprecedented manner.\n\nWe launched it on January 18th, 2012 and it was a hit right out of the gate. Don’s company and several others started using it. Right from the launch, not just elasticity, but single-digit latency performance was something that resonated really well with customers. We had innovated quite a bit, all the way from the protocol layer, to the underlying storage layer for SSD storage, and other capabilities that we enabled.\n\nOne of the first production projects was a customer with an interesting use case; they were doing a Super Bowl advertisement. Because DynamoDB was extremely elastic it could seamlessly scale up to 100,000 writes a second, and then scale down after the Super Bowl was over so they wouldn’t incur costs anymore. This was a big deal; it wasn’t considered possible at that time. It seems super obvious now, but at that time databases were not that elastic and scalable.\n\nIt was a bold vision. But DynamoDB’s built-for-the-cloud architecture made all of these scale-out use cases possible, and that is one of the reasons why DynamoDB now powers multiple high-traffic Amazon sites and systems including Alexa, Amazon.com, and all Amazon fulfillment centers. Last year, over the course of our 66-hour Prime Day, these sources made trillions of API calls and DynamoDB maintained high availability with single-digit millisecond performance, peaking at 89.2 million requests per second.\n\nAnd since 2012, we have added so many innovations, not just for its underlying availability, durability, security and scale, but ease-of-use features as well.\n\nSwami Sivasubramanian, AWS | CUBE Conversation, January 2022\n\nWe’ve gone beyond key value store and now support not just a hash-based partition but also range-based partitioning, and we’ve added support for secondary indexes to enable more complex query capabilities —without compromising on scale or availability.\n\nWe also now support scalable change data capture through Amazon Kinesis Data Steams for DynamoDB. One of the things I strongly believe with any database is that it should not be an island; it can’t be a dead end. It should generate streams of what data changed and then use that to bridge it to your analytics applications, or other data stores.\n\nWe have continued innovating across the board on features like backup and restore. For a large-scale database system like DynamoDB with millions of partitions, doing backup and restore isn’t easy, and a lot of great innovations went into making this experience easy for customers.\n\nWe have also added the ability to do global tables so customers can operate across multiple regions. And then we added the ability to do transactions with DynamoDB, all with an eye on how do you continue to keep DynamoDB’s mission around availability and scalability?\n\nRecently we also launched the ability to reduce the cost of storage with the Amazon DynamoDB Standard Infrequent Access table class. Customers often need to store data long term, and while this older data may be accessed infrequently, it must remain highly available. For example, end users of social media apps rarely access older posts and uploaded images, but the app must ensure that these artifacts are immediately accessible when requested. This infrequently accessed data can represent significant storage expense for customers due to their growing volume and the relatively high cost of storing this data, so customers optimize costs in these cases by writing code to move older, less frequently accessed data from DynamoDB to lower cost storage alternatives like Amazon S3. So at the most recent re:Invent we launched Amazon DynamoDB Standard-Infrequent Access table class, a new cost-efficient table class to store infrequently accessed data, yet maintain the high availability and performance of DynamoDB.\n\nWe are on this journey of maintaining the original vision of DynamoDB as the guiding light, but continue to innovate to help customers with use cases around ease of querying, the ability to do complex, global transaction replication, while also continuing to manage costs."
    }
}