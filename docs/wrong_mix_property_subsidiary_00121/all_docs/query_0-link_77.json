{
    "id": "wrong_mix_property_subsidiary_00121_0",
    "rank": 77,
    "data": {
        "url": "https://snyk.io/advisor/python/copyparty",
        "read_more_link": "",
        "language": "en",
        "title": "copyparty - Python Package Health Analysis",
        "top_image": "https://res.cloudinary.com/hl8zoliad/raw/upload/python/copyparty.png",
        "meta_img": "https://res.cloudinary.com/hl8zoliad/raw/upload/python/copyparty.png",
        "images": [
            "https://snyk.io/advisor/images/snyk-icon-pypi.svg",
            "https://snyk.io/advisor/images/snyk-icon-npm.svg",
            "https://snyk.io/advisor/images/snyk-icon-pypi.svg",
            "https://snyk.io/advisor/images/snyk-icon-golang.svg",
            "https://snyk.io/advisor/images/snyk-icon-docker.svg",
            "https://res.cloudinary.com/hl8zoliad/image/upload/w_80,f_auto/python_80.png",
            "https://res.cloudinary.com/hl8zoliad/image/upload/w_80,f_auto/github_80.png",
            "https://snyk.io/advisor/images/arrow.svg",
            "https://snyk.io/advisor/images/snyk-poweredby.svg",
            "https://snyk.io/advisor/images/snyk-icon-external.svg",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F241032%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F76759714%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F58706956%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F6733106%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F6081828%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F53786253%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F28214667%3Fv%3D4",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/w_160,f_auto/https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F424032%3Fv%3D4",
            "https://snyk.io/advisor/images/snyk-badge-copy.svg",
            "https://snyk.io/advisor/images/snyk-badge-copy.svg",
            "https://snyk.io/advisor/images/snyk-icon-scan-reversed.svg",
            "https://snyk.io/advisor/images/snyk-icon-arrow.svg",
            "https://snyk.io/advisor/images/snyk-icon-intellij.svg",
            "https://snyk.io/advisor/images/snyk-icon-external.svg",
            "https://snyk.io/advisor/images/snyk-icon-arrow.svg",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F192042695-522b3ec7-6845-494a-abdb-d1c0d0e23801.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F129636211-abd20fa2-a953-4366-9423-1c88ebb96ba9.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F129635374-e5136e01-470a-49b1-a762-848e8a4c9cdc.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F129635371-48fc54ca-fa91-48e3-9b1d-ba413e4b68cb.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F129635361-c79286f0-b8f1-440e-aaf4-6e929428fac9.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F129635368-3afa6634-c20f-418c-90dc-ec411f3b3897.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F128434204-eb136680-3c07-4ec7-92e0-ae86af20c241.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F115978057-66419080-a57d-11eb-8539-d2be843991aa.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F129635365-c0ff2a9f-0ee5-4fc3-8bb6-006033cf67b8.png",
            "https://user-images.githubusercontent.com/241032/165867551-fceb35dd-38f0-42bb-bef3-25ba651ca69b.png",
            "https://user-images.githubusercontent.com/241032/168644404-8e1a2fdc-6e59-4c41-905e-ba5399ed686f.png",
            "https://user-images.githubusercontent.com/241032/165867560-aa834aef-58dc-4abe-baef-7e562b647945.png",
            "https://user-images.githubusercontent.com/241032/165867555-080b73b6-6d85-41bb-a7c6-ad277c608365.png",
            "https://user-images.githubusercontent.com/241032/168645280-f0662b3c-9764-4875-a2e2-d91cc8199b23.png",
            "https://user-images.githubusercontent.com/241032/165867562-f3003d45-dd2a-4564-8aae-fed44c1ae064.png",
            "https://res.cloudinary.com/hl8zoliad/image/fetch/f_auto/https%3A%2F%2Fuser-images.githubusercontent.com%2F241032%2F118192791-fb31fe00-b446-11eb-9647-898ea8efc1f7.png",
            "https://snyk.io/advisor/images/snyk-icon-todo-complete.svg",
            "https://snyk.io/advisor/images/snyk-icon-todo.svg",
            "https://snyk.io/advisor/images/snyk-icon-todo.svg",
            "https://snyk.io/advisor/images/snyk-icon-todo.svg",
            "https://snyk.io/advisor/images/footer-twitter-icon.svg",
            "https://snyk.io/advisor/images/footer-youtube-icon.svg",
            "https://snyk.io/advisor/images/footer-facebook-icon.svg",
            "https://snyk.io/advisor/images/footer-linkedin-icon.svg",
            "https://snyk.io/advisor/images/footer-github-icon.svg",
            "https://snyk.io/advisor/images/footer-npm-icon.svg",
            "https://snyk.io/advisor/images/footer-community-banner.svg",
            "https://snyk.io/advisor/images/snyk-wordmark.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Learn more about copyparty: package health score, popularity, security, maintenance, versions and more.",
        "meta_lang": "en",
        "meta_favicon": "https://snyk.io/favicon.png",
        "meta_site_name": "Snyk Advisor",
        "canonical_link": "https://snyk.io/advisor/python/copyparty",
        "text": "💾🎉 copyparty\n\nturn almost any device into a file server with resumable uploads/downloads using any web browser\n\nserver only needs Python (2 or 3), all dependencies optional\n\n🔌 protocols: http // webdav // ftp // tftp // smb/cifs\n\n📱 android app // iPhone shortcuts\n\n👉 Get started! or visit the read-only demo server 👀 running from a basement in finland\n\n📷 screenshots: browser // upload // unpost // thumbnails // search // fsearch // zip-DL // md-viewer\n\n🎬 videos: upload // cli-upload // race-the-beam\n\nreadme toc\n\ntop\n\nquickstart - just run copyparty-sfx.py -- that's it! 🎉\n\nat home - make it accessible over the internet\n\non servers - you may also want these, especially on servers\n\nfeatures - also see comparison to similar software\n\ntestimonials - small collection of user feedback\n\nmotivations - project goals / philosophy\n\nnotes - general notes\n\nbugs - roughly sorted by chance of encounter\n\nnot my bugs - same order here too\n\nbreaking changes - upgrade notes\n\nFAQ - \"frequently\" asked questions\n\naccounts and volumes - per-folder, per-user permissions\n\nshadowing - hiding specific subfolders\n\ndotfiles - unix-style hidden files/folders\n\nthe browser - accessing a copyparty server using a web-browser\n\ntabs - the main tabs in the ui\n\nhotkeys - the browser has the following hotkeys\n\nnavpane - switching between breadcrumbs or navpane\n\nthumbnails - press g or 田 to toggle grid-view instead of the file listing\n\nzip downloads - download folders (or file selections) as zip or tar files\n\nuploading - drag files/folders into the web-browser to upload\n\nfile-search - dropping files into the browser also lets you see if they exist on the server\n\nunpost - undo/delete accidental uploads\n\nself-destruct - uploads can be given a lifetime\n\nrace the beam - download files while they're still uploading (demo video)\n\nfile manager - cut/paste, rename, and delete files/folders (if you have permission)\n\nbatch rename - select some files and press F2 to bring up the rename UI\n\nmedia player - plays almost every audio format there is\n\naudio equalizer - and dynamic range compressor\n\nfix unreliable playback on android - due to phone / app settings\n\nmarkdown viewer - and there are two editors\n\nmarkdown vars - dynamic docs with serverside variable expansion\n\nother tricks\n\nsearching - search by size, date, path/name, mp3-tags, ...\n\nserver config - using arguments or config files, or a mix of both\n\nzeroconf - announce enabled services on the LAN (pic)\n\nmdns - LAN domain-name and feature announcer\n\nssdp - windows-explorer announcer\n\nqr-code - print a qr-code (screenshot) for quick access\n\nftp server - an FTP server can be started using --ftp 3921\n\nwebdav server - with read-write support\n\nconnecting to webdav from windows - using the GUI\n\ntftp server - a TFTP server (read/write) can be started using --tftp 3969\n\nsmb server - unsafe, slow, not recommended for wan\n\nbrowser ux - tweaking the ui\n\nopengraph - discord and social-media embeds\n\nfile indexing - enables dedup and music search ++\n\nexclude-patterns - to save some time\n\nfilesystem guards - avoid traversing into other filesystems\n\nperiodic rescan - filesystem monitoring\n\nupload rules - set upload rules using volflags\n\ncompress uploads - files can be autocompressed on upload\n\nother flags\n\ndatabase location - in-volume (.hist/up2k.db, default) or somewhere else\n\nmetadata from audio files - set -e2t to index tags on upload\n\nfile parser plugins - provide custom parsers to index additional tags\n\nevent hooks - trigger a program on uploads, renames etc (examples)\n\nupload events - the older, more powerful approach (examples)\n\nhandlers - redefine behavior with plugins (examples)\n\nidentity providers - replace copyparty passwords with oauth and such\n\nusing the cloud as storage - connecting to an aws s3 bucket and similar\n\nhiding from google - tell search engines you dont wanna be indexed\n\nthemes\n\ncomplete examples\n\nreverse-proxy - running copyparty next to other websites\n\nreal-ip - teaching copyparty how to see client IPs\n\nprometheus - metrics/stats can be enabled\n\nother extremely specific features - you'll never find a use for these\n\ncustom mimetypes - change the association of a file extension\n\npackages - the party might be closer than you think\n\narch package - now available on aur maintained by @icxes\n\nfedora package - does not exist yet\n\nnix package - nix profile install github:9001/copyparty\n\nnixos module\n\nbrowser support - TLDR: yes\n\nclient examples - interact with copyparty using non-browser clients\n\nfolder sync - sync folders to/from copyparty\n\nmount as drive - a remote copyparty server as a local filesystem\n\nandroid app - upload to copyparty with one tap\n\niOS shortcuts - there is no iPhone app, but\n\nperformance - defaults are usually fine - expect 8 GiB/s download, 1 GiB/s upload\n\nclient-side - when uploading files\n\nsecurity - there is a discord server\n\ngotchas - behavior that might be unexpected\n\ncors - cross-site request config\n\nfilekeys - prevent filename bruteforcing\n\ndirkeys - share specific folders in a volume\n\npassword hashing - you can hash passwords\n\nhttps - both HTTP and HTTPS are accepted\n\nrecovering from crashes\n\nclient crashes\n\nfrefox wsod - firefox 87 can crash during uploads\n\nHTTP API - see devnotes\n\ndependencies - mandatory deps\n\noptional dependencies - install these to enable bonus features\n\noptional gpl stuff\n\nsfx - the self-contained \"binary\" (recommended!)\n\ncopyparty.exe - download copyparty.exe (win8+) or copyparty32.exe (win7+)\n\nzipapp - another emergency alternative, copyparty.pyz\n\ninstall on android\n\nreporting bugs - ideas for context to include, and where to submit them\n\ndevnotes - for build instructions etc, see ./docs/devnotes.md\n\nquickstart\n\njust run copyparty-sfx.py -- that's it! 🎉\n\nor install through pypi: python3 -m pip install --user -U copyparty\n\nor if you cannot install python, you can use copyparty.exe instead\n\nor install on arch ╱ on NixOS ╱ through nix\n\nor if you are on android, install copyparty in termux\n\nor if your computer is messed up and nothing else works, try the pyz\n\nor if you prefer to use docker 🐋 you can do that too\n\ndocker has all deps built-in, so skip this step:\n\nenable thumbnails (images/audio/video), media indexing, and audio transcoding by installing some recommended deps:\n\nAlpine: apk add py3-pillow ffmpeg\n\nDebian: apt install --no-install-recommends python3-pil ffmpeg\n\nFedora: rpmfusion + dnf install python3-pillow ffmpeg --allowerasing\n\nFreeBSD: pkg install py39-sqlite3 py39-pillow ffmpeg\n\nMacOS: port install py-Pillow ffmpeg\n\nMacOS (alternative): brew install pillow ffmpeg\n\nWindows: python -m pip install --user -U Pillow\n\ninstall python and ffmpeg manually; do not use winget or Microsoft Store (it breaks $PATH)\n\ncopyparty.exe comes with Pillow and only needs ffmpeg\n\nsee optional dependencies to enable even more features\n\nrunning copyparty without arguments (for example doubleclicking it on Windows) will give everyone read/write access to the current folder; you may want accounts and volumes\n\nor see some usage examples for inspiration, or the complete windows example\n\nsome recommended options:\n\n-e2dsa enables general file indexing\n\n-e2ts enables audio metadata indexing (needs either FFprobe or Mutagen)\n\n-v /mnt/music:/music:r:rw,foo -a foo:bar shares /mnt/music as /music, readable by anyone, and read-write for user foo, password bar\n\nreplace :r:rw,foo with :r,foo to only make the folder readable by foo and nobody else\n\nsee accounts and volumes (or --help-accounts) for the syntax and other permissions\n\nat home\n\nmake it accessible over the internet by starting a cloudflare quicktunnel like so:\n\nfirst download cloudflared and then start the tunnel with cloudflared tunnel --url http://127.0.0.1:3923\n\nas the tunnel starts, it will show a URL which you can share to let anyone browse your stash or upload files to you\n\nsince people will be connecting through cloudflare, run copyparty with --xff-hdr cf-connecting-ip to detect client IPs correctly\n\non servers\n\nyou may also want these, especially on servers:\n\ncontrib/systemd/copyparty.service to run copyparty as a systemd service (see guide inside)\n\ncontrib/systemd/prisonparty.service to run it in a chroot (for extra security)\n\ncontrib/openrc/copyparty to run copyparty on Alpine / Gentoo\n\ncontrib/rc/copyparty to run copyparty on FreeBSD\n\nnixos module to run copyparty on NixOS hosts\n\ncontrib/nginx/copyparty.conf to reverse-proxy behind nginx (for better https)\n\nand remember to open the ports you want; here's a complete example including every feature copyparty has to offer:\n\nfirewall-cmd --permanent --add-port={80,443,3921,3923,3945,3990}/tcp # --zone=libvirt firewall-cmd --permanent --add-port=12000-12099/tcp # --zone=libvirt firewall-cmd --permanent --add-port={69,1900,3969,5353}/udp # --zone=libvirt firewall-cmd --reload\n\n(69:tftp, 1900:ssdp, 3921:ftp, 3923:http/https, 3945:smb, 3969:tftp, 3990:ftps, 5353:mdns, 12000:passive-ftp)\n\nfeatures\n\nalso see comparison to similar software\n\nbackend stuff\n\n☑ IPv6\n\n☑ multiprocessing (actual multithreading)\n\n☑ volumes (mountpoints)\n\n☑ accounts\n\n☑ ftp server\n\n☑ tftp server\n\n☑ webdav server\n\n☑ smb/cifs server\n\n☑ qr-code for quick access\n\n☑ upnp / zeroconf / mdns / ssdp\n\n☑ event hooks / script runner\n\n☑ reverse-proxy support\n\nupload\n\n☑ basic: plain multipart, ie6 support\n\n☑ up2k: js, resumable, multithreaded\n\nno filesize limit! ...unless you use Cloudflare, then it's 383.9 GiB\n\n☑ stash: simple PUT filedropper\n\n☑ filename randomizer\n\n☑ write-only folders\n\n☑ unpost: undo/delete accidental uploads\n\n☑ self-destruct (specified server-side or client-side)\n\n☑ race the beam (almost like peer-to-peer)\n\n☑ symlink/discard duplicates (content-matching)\n\ndownload\n\n☑ single files in browser\n\n☑ folders as zip / tar files\n\n☑ FUSE client (read-only)\n\nbrowser\n\n☑ navpane (directory tree sidebar)\n\n☑ file manager (cut/paste, delete, batch-rename)\n\n☑ audio player (with OS media controls and opus/mp3 transcoding)\n\n☑ play video files as audio (converted on server)\n\n☑ image gallery with webm player\n\n☑ textfile browser with syntax hilighting\n\n☑ thumbnails\n\n☑ ...of images using Pillow, pyvips, or FFmpeg\n\n☑ ...of videos using FFmpeg\n\n☑ ...of audio (spectrograms) using FFmpeg\n\n☑ cache eviction (max-age; maybe max-size eventually)\n\n☑ multilingual UI (english, norwegian, add your own))\n\n☑ SPA (browse while uploading)\n\nserver indexing\n\n☑ locate files by contents\n\n☑ search by name/path/date/size\n\n☑ search by ID3-tags etc.\n\nclient support\n\n☑ folder sync\n\n☑ curl-friendly\n\n☑ opengraph (discord embeds)\n\nmarkdown\n\n☑ viewer\n\n☑ editor (sure why not)\n\n☑ variables\n\nPS: something missing? post any crazy ideas you've got as a feature request or discussion 🤙\n\ntestimonials\n\nsmall collection of user feedback\n\ngood enough, surprisingly correct, certified good software, just works, why, wow this is better than nextcloud\n\nmotivations\n\nproject goals / philosophy\n\ninverse linux philosophy -- do all the things, and do an okay job\n\nquick drop-in service to get a lot of features in a pinch\n\nsome of the alternatives might be a better fit for you\n\nrun anywhere, support everything\n\nas many web-browsers and python versions as possible\n\nevery browser should at least be able to browse, download, upload files\n\nbe a good emergency solution for transferring stuff between ancient boxes\n\nminimal dependencies\n\nbut optional dependencies adding bonus-features are ok\n\neverything being plaintext makes it possible to proofread for malicious code\n\nno preparations / setup necessary, just run the sfx (which is also plaintext)\n\nadaptable, malleable, hackable\n\nno build steps; modify the js/python without needing node.js or anything like that\n\nnotes\n\ngeneral notes:\n\npaper-printing is affected by dark/light-mode! use lightmode for color, darkmode for grayscale\n\nbecause no browsers currently implement the media-query to do this properly orz\n\nbrowser-specific:\n\niPhone/iPad: use Firefox to download files\n\nAndroid-Chrome: increase \"parallel uploads\" for higher speed (android bug)\n\nAndroid-Firefox: takes a while to select files (their fix for ☝️)\n\nDesktop-Firefox: may use gigabytes of RAM if your files are massive seems to be OK now\n\nDesktop-Firefox: may stop you from unplugging USB flashdrives until you visit about:memory and click Minimize memory usage\n\nserver-os-specific:\n\nRHEL8 / Rocky8: you can run copyparty using /usr/libexec/platform-python\n\nserver notes:\n\npypy is supported but regular cpython is faster if you enable the database\n\nbugs\n\nroughly sorted by chance of encounter\n\ngeneral:\n\n--th-ff-jpg may fix video thumbnails on some FFmpeg versions (macos, some linux)\n\n--th-ff-swr may fix audio thumbnails on some FFmpeg versions\n\nif the up2k.db (filesystem index) is on a samba-share or network disk, you'll get unpredictable behavior if the share is disconnected for a bit\n\nuse --hist or the hist volflag (-v [...]:c,hist=/tmp/foo) to place the db on a local disk instead\n\nall volumes must exist / be available on startup; up2k (mtp especially) gets funky otherwise\n\nprobably more, pls let me know\n\npython 3.4 and older (including 2.7):\n\nmany rare and exciting edge-cases because python didn't handle EINTR yet\n\ndownloads from copyparty may suddenly fail, but uploads should be fine\n\npython 2.7 on Windows:\n\ncannot index non-ascii filenames with -e2d\n\ncannot handle filenames with mojibake\n\nif you have a new exciting bug to share, see reporting bugs\n\nnot my bugs\n\nsame order here too\n\nChrome issue 1317069 -- if you try to upload a folder which contains symlinks by dragging it into the browser, the symlinked files will not get uploaded\n\nChrome issue 1352210 -- plaintext http may be faster at filehashing than https (but also extremely CPU-intensive)\n\nFirefox issue 1790500 -- entire browser can crash after uploading ~4000 small files\n\nAndroid: music playback randomly stops due to battery usage settings\n\niPhones: the volume control doesn't work because apple doesn't want it to\n\nAudioContext will probably never be a viable workaround as apple introduces new issues faster than they fix current ones\n\niPhones: the preload feature (in the media-player-options tab) can cause a tiny audio glitch 20sec before the end of each song, but disabling it may cause worse iOS bugs to appear instead\n\njust a hunch, but disabling preloading may cause playback to stop entirely, or possibly mess with bluetooth speakers\n\ntried to add a tooltip regarding this but looks like apple broke my tooltips\n\nWindows: folders cannot be accessed if the name ends with .\n\npython or windows bug\n\nWindows: msys2-python 3.8.6 occasionally throws RuntimeError: release unlocked lock when leaving a scoped mutex in up2k\n\nthis is an msys2 bug, the regular windows edition of python is fine\n\nVirtualBox: sqlite throws Disk I/O Error when running in a VM and the up2k database is in a vboxsf\n\nuse --hist or the hist volflag (-v [...]:c,hist=/tmp/foo) to place the db inside the vm instead\n\nalso happens on mergerfs, so put the db elsewhere\n\nUbuntu: dragging files from certain folders into firefox or chrome is impossible\n\ndue to snap security policies -- see snap connections firefox for the allowlist, removable-media permits all of /mnt and /media apparently\n\nbreaking changes\n\nupgrade notes\n\n1.9.16 (2023-11-04):\n\n--stats/prometheus: cpp_bans renamed to cpp_active_bans, and that + cpp_uptime are gauges\n\n1.6.0 (2023-01-29):\n\nhttp-api: delete/move is now POST instead of GET\n\neverything other than GET and HEAD must pass cors validation\n\n1.5.0 (2022-12-03): new chunksize formula for files larger than 128 GiB\n\nusers: upgrade to the latest cli uploader if you use that\n\ndevs: update third-party up2k clients (if those even exist)\n\nFAQ\n\n\"frequently\" asked questions\n\nis it possible to block read-access to folders unless you know the exact URL for a particular file inside?\n\nyes, using the g permission, see the examples there\n\nyou can also do this with linux filesystem permissions; chmod 111 music will make it possible to access files and folders inside the music folder but not list the immediate contents -- also works with other software, not just copyparty\n\ncan I link someone to a password-protected volume/file by including the password in the URL?\n\nyes, by adding ?pw=hunter2 to the end; replace ? with &amp; if there are parameters in the URL already, meaning it contains a ? near the end\n\nhow do I stop .hist folders from appearing everywhere on my HDD?\n\nby default, a .hist folder is created inside each volume for the filesystem index, thumbnails, audio transcodes, and markdown document history. Use the --hist global-option or the hist volflag to move it somewhere else; see database location\n\ncan I make copyparty download a file to my server if I give it a URL?\n\nyes, using hooks\n\nfirefox refuses to connect over https, saying \"Secure Connection Failed\" or \"SEC_ERROR_BAD_SIGNATURE\", but the usual button to \"Accept the Risk and Continue\" is not shown\n\nfirefox has corrupted its certstore; fix this by exiting firefox, then find and delete the file named cert9.db somewhere in your firefox profile folder\n\nthe server keeps saying thank you for playing when I try to access the website\n\nyou've gotten banned for malicious traffic! if this happens by mistake, and you're running a reverse-proxy and/or something like cloudflare, see real-ip on how to fix this\n\ncopyparty seems to think I am using http, even though the URL is https\n\nyour reverse-proxy is not sending the X-Forwarded-Proto: https header; this could be because your reverse-proxy itself is confused. Ensure that none of the intermediates (such as cloudflare) are terminating https before the traffic hits your entrypoint\n\ni want to learn python and/or programming and am considering looking at the copyparty source code in that occasion\n\n_| _ __ _ _|_ (_| (_) | | (_) |_\n\naccounts and volumes\n\nper-folder, per-user permissions - if your setup is getting complex, consider making a config file instead of using arguments\n\nmuch easier to manage, and you can modify the config at runtime with systemctl reload copyparty or more conveniently using the [reload cfg] button in the control-panel (if the user has a/admin in any volume)\n\nchanges to the [global] config section requires a restart to take effect\n\na quick summary can be seen using --help-accounts\n\nconfiguring accounts/volumes with arguments:\n\n-a usr:pwd adds account usr with password pwd\n\n-v .::r adds current-folder . as the webroot, readable by anyone\n\nthe syntax is -v src:dst:perm:perm:... so local-path, url-path, and one or more permissions to set\n\ngranting the same permissions to multiple accounts:\n\n-v .::r,usr1,usr2:rw,usr3,usr4 = usr1/2 read-only, 3/4 read-write\n\npermissions:\n\nr (read): browse folder contents, download files, download as zip/tar, see filekeys/dirkeys\n\nw (write): upload files, move files into this folder\n\nm (move): move files/folders from this folder\n\nd (delete): delete files/folders\n\n. (dots): user can ask to show dotfiles in directory listings\n\ng (get): only download files, cannot see folder contents or zip/tar\n\nG (upget): same as g except uploaders get to see their own filekeys (see fk in examples below)\n\nh (html): same as g except folders return their index.html, and filekeys are not necessary for index.html\n\na (admin): can see upload time, uploader IPs, config-reload\n\nA (\"all\"): same as rwmda. (read/write/move/delete/admin/dotfiles)\n\nexamples:\n\nadd accounts named u1, u2, u3 with passwords p1, p2, p3: -a u1:p1 -a u2:p2 -a u3:p3\n\nmake folder /srv the root of the filesystem, read-only by anyone: -v /srv::r\n\nmake folder /mnt/music available at /music, read-only for u1 and u2, read-write for u3: -v /mnt/music:music:r,u1,u2:rw,u3\n\nunauthorized users accessing the webroot can see that the music folder exists, but cannot open it\n\nmake folder /mnt/incoming available at /inc, write-only for u1, read-move for u2: -v /mnt/incoming:inc:w,u1:rm,u2\n\nunauthorized users accessing the webroot can see that the inc folder exists, but cannot open it\n\nu1 can open the inc folder, but cannot see the contents, only upload new files to it\n\nu2 can browse it and move files from /inc into any folder where u2 has write-access\n\nmake folder /mnt/ss available at /i, read-write for u1, get-only for everyone else, and enable filekeys: -v /mnt/ss:i:rw,u1:g:c,fk=4\n\nc,fk=4 sets the fk (filekey) volflag to 4, meaning each file gets a 4-character accesskey\n\nu1 can upload files, browse the folder, and see the generated filekeys\n\nother users cannot browse the folder, but can access the files if they have the full file URL with the filekey\n\nreplacing the g permission with wg would let anonymous users upload files, but not see the required filekey to access it\n\nreplacing the g permission with wG would let anonymous users upload files, receiving a working direct link in return\n\nanyone trying to bruteforce a password gets banned according to --ban-pw; default is 24h ban for 9 failed attempts in 1 hour\n\nshadowing\n\nhiding specific subfolders by mounting another volume on top of them\n\nfor example -v /mnt::r -v /var/empty:web/certs:r mounts the server folder /mnt as the webroot, but another volume is mounted at /web/certs -- so visitors can only see the contents of /mnt and /mnt/web (at URLs / and /web), but not /mnt/web/certs because URL /web/certs is mapped to /var/empty\n\ndotfiles\n\nunix-style hidden files/folders by starting the name with a dot\n\nanyone can access these if they know the name, but they normally don't appear in directory listings\n\na client can request to see dotfiles in directory listings if global option -ed is specified, or the volume has volflag dots, or the user has permission .\n\ndotfiles do not appear in search results unless one of the above is true, and the global option / volflag dotsrch is set\n\nthe browser\n\naccessing a copyparty server using a web-browser\n\ntabs\n\nthe main tabs in the ui\n\n[🔎] search by size, date, path/name, mp3-tags ...\n\n[🧯] unpost: undo/delete accidental uploads\n\n[🚀] and [🎈] are the uploaders\n\n[📂] mkdir: create directories\n\n[📝] new-md: create a new markdown document\n\n[📟] send-msg: either to server-log or into textfiles if --urlform save\n\n[🎺] audio-player config options\n\n[⚙️] general client config options\n\nhotkeys\n\nthe browser has the following hotkeys (always qwerty)\n\n? show hotkeys help\n\nB toggle breadcrumbs / navpane\n\nI/K prev/next folder\n\nM parent folder (or unexpand current)\n\nV toggle folders / textfiles in the navpane\n\nG toggle list / grid view -- same as 田 bottom-right\n\nT toggle thumbnails / icons\n\nESC close various things\n\nctrl-K delete selected files/folders\n\nctrl-X cut selected files/folders\n\nctrl-V paste\n\nY download selected files\n\nF2 rename selected file/folder\n\nwhen a file/folder is selected (in not-grid-view):\n\nUp/Down move cursor\n\nshift+Up/Down select and move cursor\n\nctrl+Up/Down move cursor and scroll viewport\n\nSpace toggle file selection\n\nCtrl-A toggle select all\n\nwhen a textfile is open:\n\nI/K prev/next textfile\n\nS toggle selection of open file\n\nM close textfile\n\nwhen playing audio:\n\nJ/L prev/next song\n\nU/O skip 10sec back/forward\n\n0..9 jump to 0%..90%\n\nP play/pause (also starts playing the folder)\n\nY download file\n\nwhen viewing images / playing videos:\n\nJ/L, Left/Right prev/next file\n\nHome/End first/last file\n\nF toggle fullscreen\n\nS toggle selection\n\nR rotate clockwise (shift=ccw)\n\nY download file\n\nEsc close viewer\n\nvideos:\n\nU/O skip 10sec back/forward\n\n0..9 jump to 0%..90%\n\nP/K/Space play/pause\n\nM mute\n\nC continue playing next video\n\nV loop entire file\n\n[ loop range (start)\n\n] loop range (end)\n\nwhen the navpane is open:\n\nA/D adjust tree width\n\nin the grid view:\n\nS toggle multiselect\n\nshift+A/D zoom\n\nin the markdown editor:\n\n^s save\n\n^h header\n\n^k autoformat table\n\n^u jump to next unicode character\n\n^e toggle editor / preview\n\n^up, ^down jump paragraphs\n\nnavpane\n\nswitching between breadcrumbs or navpane\n\nclick the 🌲 or pressing the B hotkey to toggle between breadcrumbs path (default), or a navpane (tree-browser sidebar thing)\n\n[+] and [-] (or hotkeys A/D) adjust the size\n\n[🎯] jumps to the currently open folder\n\n[📃] toggles between showing folders and textfiles\n\n[📌] shows the name of all parent folders in a docked panel\n\n[a] toggles automatic widening as you go deeper\n\n[↵] toggles wordwrap\n\n[👀] show full name on hover (if wordwrap is off)\n\nthumbnails\n\npress g or 田 to toggle grid-view instead of the file listing and t toggles icons / thumbnails\n\ncan be made default globally with --grid or per-volume with volflag grid\n\nit does static images with Pillow / pyvips / FFmpeg, and uses FFmpeg for video files, so you may want to --no-thumb or maybe just --no-vthumb depending on how dangerous your users are\n\npyvips is 3x faster than Pillow, Pillow is 3x faster than FFmpeg\n\ndisable thumbnails for specific volumes with volflag dthumb for all, or dvthumb / dathumb / dithumb for video/audio/images only\n\naudio files are covnerted into spectrograms using FFmpeg unless you --no-athumb (and some FFmpeg builds may need --th-ff-swr)\n\nimages with the following names (see --th-covers) become the thumbnail of the folder they're in: folder.png, folder.jpg, cover.png, cover.jpg\n\nthe order is significant, so if both cover.png and folder.jpg exist in a folder, it will pick the first matching --th-covers entry (folder.jpg)\n\nand, if you enable file indexing, it will also try those names as dotfiles (.folder.jpg and so), and then fallback on the first picture in the folder (if it has any pictures at all)\n\nin the grid/thumbnail view, if the audio player panel is open, songs will start playing when clicked\n\nindicated by the audio files having the ▶ icon instead of 💾\n\nenabling multiselect lets you click files to select them, and then shift-click another file for range-select\n\nmultiselect is mostly intended for phones/tablets, but the sel option in the [⚙️] settings tab is better suited for desktop use, allowing selection by CTRL-clicking and range-selection with SHIFT-click, all without affecting regular clicking\n\nthe sel option can be made default globally with --gsel or per-volume with volflag gsel\n\nzip downloads\n\ndownload folders (or file selections) as zip or tar files\n\nselect which type of archive you want in the [⚙️] config tab:\n\nname url-suffix description tar ?tar plain gnutar, works great with curl | tar -xv pax ?tar=pax pax-format tar, futureproof, not as fast tgz ?tar=gz gzip compressed gnu-tar (slow), for curl | tar -xvz txz ?tar=xz gnu-tar with xz / lzma compression (v.slow) zip ?zip=utf8 works everywhere, glitchy filenames on win7 and older zip_dos ?zip traditional cp437 (no unicode) to fix glitchy filenames zip_crc ?zip=crc cp437 with crc32 computed early for truly ancient software\n\ngzip default level is 3 (0=fast, 9=best), change with ?tar=gz:9\n\nxz default level is 1 (0=fast, 9=best), change with ?tar=xz:9\n\nbz2 default level is 2 (1=fast, 9=best), change with ?tar=bz2:9\n\nhidden files (dotfiles) are excluded unless account is allowed to list them\n\nup2k.db and dir.txt is always excluded\n\nbsdtar supports streaming unzipping: curl foo?zip=utf8 | bsdtar -xv\n\ngood, because copyparty's zip is faster than tar on small files\n\nzip_crc will take longer to download since the server has to read each file twice\n\nthis is only to support MS-DOS PKZIP v2.04g (october 1993) and older\n\nhow are you accessing copyparty actually\n\nyou can also zip a selection of files or folders by clicking them in the browser, that brings up a selection editor and zip button in the bottom right\n\ncool trick: download a folder by appending url-params ?tar&amp;opus or ?tar&amp;mp3 to transcode all audio files (except aac|m4a|mp3|ogg|opus|wma) to opus/mp3 before they're added to the archive\n\nsuper useful if you're 5 minutes away from takeoff and realize you don't have any music on your phone but your server only has flac files and downloading those will burn through all your data + there wouldn't be enough time anyways\n\nand url-params &amp;j / &amp;w produce jpeg/webm thumbnails/spectrograms instead of the original audio/video/images (&amp;p for audio waveforms)\n\ncan also be used to pregenerate thumbnails; combine with --th-maxage=9999999 or --th-clean=0\n\nuploading\n\ndrag files/folders into the web-browser to upload\n\ndragdrop is the recommended way, but you may also:\n\nselect some files (not folders) in your file explorer and press CTRL-V inside the browser window\n\nuse the command-line uploader\n\nupload using curl or sharex\n\nwhen uploading files through dragdrop or CTRL-V, this initiates an upload using up2k; there are two browser-based uploaders available:\n\n[🎈] bup, the basic uploader, supports almost every browser since netscape 4.0\n\n[🚀] up2k, the good / fancy one\n\nNB: you can undo/delete your own uploads with [🧯] unpost (and this is also where you abort unfinished uploads, but you have to refresh the page first)\n\nup2k has several advantages:\n\nyou can drop folders into the browser (files are added recursively)\n\nfiles are processed in chunks, and each chunk is checksummed\n\nuploads autoresume if they are interrupted by network issues\n\nuploads resume if you reboot your browser or pc, just upload the same files again\n\nserver detects any corruption; the client reuploads affected chunks\n\nthe client doesn't upload anything that already exists on the server\n\nno filesize limit unless imposed by a proxy, for example Cloudflare, which blocks uploads over 383.9 GiB\n\nmuch higher speeds than ftp/scp/tarpipe on some internet connections (mainly american ones) thanks to parallel connections\n\nthe last-modified timestamp of the file is preserved\n\n> it is perfectly safe to restart / upgrade copyparty while someone is uploading to it!\n\n> all known up2k clients will resume just fine 💪\n\nsee up2k for details on how it works, or watch a demo video\n\nprotip: you can avoid scaring away users with contrib/plugins/minimal-up2k.js which makes it look much simpler\n\nprotip: if you enable favicon in the [⚙️] settings tab (by typing something into the textbox), the icon in the browser tab will indicate upload progress -- also, the [🔔] and/or [🔊] switches enable visible and/or audible notifications on upload completion\n\nthe up2k UI is the epitome of polished inutitive experiences:\n\n\"parallel uploads\" specifies how many chunks to upload at the same time\n\n[🏃] analysis of other files should continue while one is uploading\n\n[🥔] shows a simpler UI for faster uploads from slow devices\n\n[🎲] generate random filenames during upload\n\n[📅] preserve last-modified timestamps; server times will match yours\n\n[🔎] switch between upload and file-search mode\n\nignore [🔎] if you add files by dragging them into the browser\n\nand then theres the tabs below it,\n\n[ok] is the files which completed successfully\n\n[ng] is the ones that failed / got rejected (already exists, ...)\n\n[done] shows a combined list of [ok] and [ng], chronological order\n\n[busy] files which are currently hashing, pending-upload, or uploading\n\nplus up to 3 entries each from [done] and [que] for context\n\n[que] is all the files that are still queued\n\nnote that since up2k has to read each file twice, [🎈] bup can theoretically be up to 2x faster in some extreme cases (files bigger than your ram, combined with an internet connection faster than the read-speed of your HDD, or if you're uploading from a cuo2duo)\n\nif you are resuming a massive upload and want to skip hashing the files which already finished, you can enable turbo in the [⚙️] config tab, but please read the tooltip on that button\n\nfile-search\n\ndropping files into the browser also lets you see if they exist on the server\n\nwhen you drag/drop files into the browser, you will see two dropzones: Upload and Search\n\n> on a phone? toggle the [🔎] switch green before tapping the big yellow Search button to select your files\n\nthe files will be hashed on the client-side, and each hash is sent to the server, which checks if that file exists somewhere\n\nfiles go into [ok] if they exist (and you get a link to where it is), otherwise they land in [ng]\n\nthe main reason filesearch is combined with the uploader is cause the code was too spaghetti to separate it out somewhere else, this is no longer the case but now i've warmed up to the idea too much\n\nunpost\n\nundo/delete accidental uploads\n\nyou can unpost even if you don't have regular move/delete access, however only for files uploaded within the past --unpost seconds (default 12 hours) and the server must be running with -e2d\n\nself-destruct\n\nuploads can be given a lifetime, afer which they expire / self-destruct\n\nthe feature must be enabled per-volume with the lifetime upload rule which sets the upper limit for how long a file gets to stay on the server\n\nclients can specify a shorter expiration time using the up2k ui -- the relevant options become visible upon navigating into a folder with lifetimes enabled -- or by using the life upload modifier\n\nspecifying a custom expiration time client-side will affect the timespan in which unposts are permitted, so keep an eye on the estimates in the up2k ui\n\nrace the beam\n\ndownload files while they're still uploading (demo video) -- it's almost like peer-to-peer\n\nrequires the file to be uploaded using up2k (which is the default drag-and-drop uploader), alternatively the command-line program\n\nfile manager\n\ncut/paste, rename, and delete files/folders (if you have permission)\n\nfile selection: click somewhere on the line (not the link itsef), then:\n\nspace to toggle\n\nup/down to move\n\nshift-up/down to move-and-select\n\nctrl-shift-up/down to also scroll\n\nshift-click another line for range-select\n\ncut: select some files and ctrl-x\n\npaste: ctrl-v in another folder\n\nrename: F2\n\nyou can move files across browser tabs (cut in one tab, paste in another)\n\nbatch rename\n\nselect some files and press F2 to bring up the rename UI\n\nquick explanation of the buttons,\n\n[✅ apply rename] confirms and begins renaming\n\n[❌ cancel] aborts and closes the rename window\n\n[↺ reset] reverts any filename changes back to the original name\n\n[decode] does a URL-decode on the filename, fixing stuff like &amp; and %20\n\n[advanced] toggles advanced mode\n\nadvanced mode: rename files based on rules to decide the new names, based on the original name (regex), or based on the tags collected from the file (artist/title/...), or a mix of both\n\nin advanced mode,\n\n[case] toggles case-sensitive regex\n\nregex is the regex pattern to apply to the original filename; any files which don't match will be skipped\n\nformat is the new filename, taking values from regex capturing groups and/or from file tags\n\nvery loosely based on foobar2000 syntax\n\npresets lets you save rename rules for later\n\navailable functions:\n\n$lpad(text, length, pad_char)\n\n$rpad(text, length, pad_char)\n\nso,\n\nsay you have a file named meganeko - Eclipse - 07 Sirius A.mp3 (absolutely fantastic album btw) and the tags are: Album:Eclipse, Artist:meganeko, Title:Sirius A, tn:7\n\nyou could use just regex to rename it:\n\nregex = (.*) - (.*) - ([0-9]{2}) (.*)\n\nformat = (3). (1) - (4)\n\noutput = 07. meganeko - Sirius A.mp3\n\nor you could use just tags:\n\nformat = $lpad((tn),2,0). (artist) - (title).(ext)\n\noutput = 7. meganeko - Sirius A.mp3\n\nor a mix of both:\n\nregex = - ([0-9]{2})\n\nformat = (1). (artist) - (title).(ext)\n\noutput = 07. meganeko - Sirius A.mp3\n\nthe metadata keys you can use in the format field are the ones in the file-browser table header (whatever is collected with -mte and -mtp)\n\nmedia player\n\nplays almost every audio format there is (if the server has FFmpeg installed for on-demand transcoding)\n\nthe following audio formats are usually always playable, even without FFmpeg: aac|flac|m4a|mp3|ogg|opus|wav\n\nsome hilights:\n\nOS integration; control playback from your phone's lockscreen (windows // iOS // android)\n\nshows the audio waveform in the seekbar\n\nnot perfectly gapless but can get really close (see settings + eq below); good enough to enjoy gapless albums as intended\n\nvideos can be played as audio, without wasting bandwidth on the video\n\nclick the play link next to an audio file, or copy the link target to share it (optionally with a timestamp to start playing from, like that example does)\n\nopen the [🎺] media-player-settings tab to configure it,\n\n\"switches\":\n\n[🔀] shuffles the files inside each folder\n\n[preload] starts loading the next track when it's about to end, reduces the silence between songs\n\n[full] does a full preload by downloading the entire next file; good for unreliable connections, bad for slow connections\n\n[~s] toggles the seekbar waveform display\n\n[/np] enables buttons to copy the now-playing info as an irc message\n\n[os-ctl] makes it possible to control audio playback from the lockscreen of your device (enables mediasession)\n\n[seek] allows seeking with lockscreen controls (buggy on some devices)\n\n[art] shows album art on the lockscreen\n\n[🎯] keeps the playing song scrolled into view (good when using the player as a taskbar dock)\n\n[⟎] shrinks the playback controls\n\n\"buttons\":\n\n[uncache] may fix songs that won't play correctly due to bad files in browser cache\n\n\"at end of folder\":\n\n[loop] keeps looping the folder\n\n[next] plays into the next folder\n\n\"transcode\":\n\n[flac] converts flac and wav files into opus (if supported by browser) or mp3\n\n[aac] converts aac and m4a files into opus (if supported by browser) or mp3\n\n[oth] converts all other known formats into opus (if supported by browser) or mp3\n\naac|ac3|aif|aiff|alac|alaw|amr|ape|au|dfpwm|dts|flac|gsm|it|m4a|mo3|mod|mp2|mp3|mpc|mptm|mt2|mulaw|ogg|okt|opus|ra|s3m|tak|tta|ulaw|wav|wma|wv|xm|xpk\n\n\"tint\" reduces the contrast of the playback bar\n\naudio equalizer\n\nand dynamic range compressor\n\ncan also boost the volume in general, or increase/decrease stereo width (like crossfeed just worse)\n\nhas the convenient side-effect of reducing the pause between songs, so gapless albums play better with the eq enabled (just make it flat)\n\nnot available on iPhones / iPads because AudioContext currently breaks background audio playback on iOS (15.7.8)\n\nfix unreliable playback on android\n\ndue to phone / app settings, android phones may randomly stop playing music when the power saver kicks in, especially at the end of an album -- you can fix it by disabling power saving in the app settings of the browser you use for music streaming (preferably a dedicated one)\n\nmarkdown viewer\n\nand there are two editors\n\nthere is a built-in extension for inline clickable thumbnails;\n\nenable it by adding `` somewhere in the doc\n\nadd thumbnails with !th[l](your.jpg) where l means left-align (r = right-align)\n\na single line with --- clears the float / inlining\n\nin the case of README.md being displayed below a file listing, thumbnails will open in the gallery viewer\n\nother notes,\n\nthe document preview has a max-width which is the same as an A4 paper when printed\n\nmarkdown vars\n\ndynamic docs with serverside variable expansion to replace stuff like {{self.ip}} with the client's IP, or {{srv.htime}} with the current time on the server\n\nsee ./srv/expand/ for usage and examples\n\nother tricks\n\nyou can link a particular timestamp in an audio file by adding it to the URL, such as &amp;20 / &amp;20s / &amp;1m20 / &amp;t=1:20 after the .../#af-c8960dab\n\nenabling the audio equalizer can help make gapless albums fully gapless in some browsers (chrome), so consider leaving it on with all the values at zero\n\nget a plaintext file listing by adding ?ls=t to a URL, or a compact colored one with ?ls=v (for unix terminals)\n\nif you are using media hotkeys to switch songs and are getting tired of seeing the OSD popup which Windows doesn't let you disable, consider ./contrib/media-osd-bgone.ps1\n\nclick the bottom-left π to open a javascript prompt for debugging\n\nfiles named .prologue.html / .epilogue.html will be rendered before/after directory listings unless --no-logues\n\nfiles named descript.ion / DESCRIPT.ION are parsed and displayed in the file listing, or as the epilogue if nonstandard\n\nfiles named README.md / readme.md will be rendered after directory listings unless --no-readme (but .epilogue.html takes precedence)\n\nREADME.md and *logue.html can contain placeholder values which are replaced server-side before embedding into directory listings; see --help-exp\n\nsearching\n\nsearch by size, date, path/name, mp3-tags, ...\n\nwhen started with -e2dsa copyparty will scan/index all your files. This avoids duplicates on upload, and also makes the volumes searchable through the web-ui:\n\nmake search queries by size/date/directory-path/filename, or...\n\ndrag/drop a local file to see if the same contents exist somewhere on the server, see file-search\n\npath/name queries are space-separated, AND'ed together, and words are negated with a - prefix, so for example:\n\npath: shibayan -bossa finds all files where one of the folders contain shibayan but filters out any results where bossa exists somewhere in the path\n\nname: demetori styx gives you good stuff\n\nthe raw field allows for more complex stuff such as ( tags like *nhato* or tags like *taishi* ) and ( not tags like *nhato* or not tags like *taishi* ) which finds all songs by either nhato or taishi, excluding collabs (terrible example, why would you do that)\n\nfor the above example to work, add the commandline argument -e2ts to also scan/index tags from music files, which brings us over to:\n\nserver config\n\nusing arguments or config files, or a mix of both:\n\nconfig files (-c some.conf) can set additional commandline arguments; see ./docs/example.conf and ./docs/example2.conf\n\nkill -s USR1 (same as systemctl reload copyparty) to reload accounts and volumes from config files without restarting\n\nor click the [reload cfg] button in the control-panel if the user has a/admin in any volume\n\nchanges to the [global] config section requires a restart to take effect\n\nNB: as humongous as this readme is, there is also a lot of undocumented features. Run copyparty with --help to see all available global options; all of those can be used in the [global] section of config files, and everything listed in --help-flags can be used in volumes as volflags.\n\nif running in docker/podman, try this: docker run --rm -it copyparty/ac --help\n\nor see this (probably outdated): https://ocv.me/copyparty/helptext.html\n\nor if you prefer plaintext, https://ocv.me/copyparty/helptext.txt\n\nzeroconf\n\nannounce enabled services on the LAN (pic) -- -z enables both mdns and ssdp\n\n--z-on / --z-off' limits the feature to certain networks\n\nmdns\n\nLAN domain-name and feature announcer\n\nuses multicast dns to give copyparty a domain which any machine on the LAN can use to access it\n\nall enabled services (webdav, ftp, smb) will appear in mDNS-aware file managers (KDE, gnome, macOS, ...)\n\nthe domain will be http://partybox.local if the machine's hostname is partybox unless --name specifies soemthing else\n\nssdp\n\nwindows-explorer announcer\n\nuses ssdp to make copyparty appear in the windows file explorer on all machines on the LAN\n\ndoubleclicking the icon opens the \"connect\" page which explains how to mount copyparty as a local filesystem\n\nif copyparty does not appear in windows explorer, use --zsv to see why:\n\nmaybe the discovery multicast was sent from an IP which does not intersect with the server subnets\n\nqr-code\n\nprint a qr-code (screenshot) for quick access, great between phones on android hotspots which keep changing the subnet\n\n--qr enables it\n\n--qrs does https instead of http\n\n--qrl lootbox/?pw=hunter2 appends to the url, linking to the lootbox folder with password hunter2\n\n--qrz 1 forces 1x zoom instead of autoscaling to fit the terminal size\n\n1x may render incorrectly on some terminals/fonts, but 2x should always work\n\nit uses the server hostname if mdns is enbled, otherwise it'll use your external ip (default route) unless --qri specifies a specific ip-prefix or domain\n\nftp server\n\nan FTP server can be started using --ftp 3921, and/or --ftps for explicit TLS (ftpes)\n\nbased on pyftpdlib\n\nneeds a dedicated port (cannot share with the HTTP/HTTPS API)\n\nuploads are not resumable -- delete and restart if necessary\n\nruns in active mode by default, you probably want --ftp-pr 12000-13000\n\nif you enable both ftp and ftps, the port-range will be divided in half\n\nsome older software (filezilla on debian-stable) cannot passive-mode with TLS\n\nlogin with any username + your password, or put your password in the username field\n\nsome recommended FTP / FTPS clients; wark = example password:\n\nhttps://winscp.net/eng/download.php\n\nhttps://filezilla-project.org/ struggles a bit with ftps in active-mode, but is fine otherwise\n\nhttps://rclone.org/ does FTPS with tls=false explicit_tls=true\n\nlftp -u k,wark -p 3921 127.0.0.1 -e ls\n\nlftp -u k,wark -p 3990 127.0.0.1 -e 'set ssl:verify-certificate no; ls'\n\nwebdav server\n\nwith read-write support, supports winXP and later, macos, nautilus/gvfs ... a greay way to access copyparty straight from the file explorer in your OS\n\nclick the connect button in the control-panel to see connection instructions for windows, linux, macos\n\ngeneral usage:\n\nlogin with any username + your password, or put your password in the username field (password field can be empty/whatever)\n\non macos, connect from finder:\n\n[Go] -> [Connect to Server...] -> http://192.168.123.1:3923/\n\nin order to grant full write-access to webdav clients, the volflag daw must be set and the account must also have delete-access (otherwise the client won't be allowed to replace the contents of existing files, which is how webdav works)\n\nconnecting to webdav from windows\n\nusing the GUI (winXP or later):\n\nrightclick [my computer] -> [map network drive] -> Folder: http://192.168.123.1:3923/\n\non winXP only, click the Sign up for online storage hyperlink instead and put the URL there\n\nproviding your password as the username is recommended; the password field can be anything or empty\n\nknown client bugs:\n\nwin7+ doesn't actually send the password to the server when reauthenticating after a reboot unless you first try to login with an incorrect password and then switch to the correct password\n\nor just type your password into the username field instead to get around it entirely\n\nconnecting to a folder which allows anonymous read will make writing impossible, as windows has decided it doesn't need to login\n\nworkaround: connect twice; first to a folder which requires auth, then to the folder you actually want, and leave both of those mounted\n\nwin7+ may open a new tcp connection for every file and sometimes forgets to close them, eventually needing a reboot\n\nmaybe NIC-related (??), happens with win10-ltsc on e1000e but not virtio\n\nwindows cannot access folders which contain filenames with invalid unicode or forbidden characters (&lt;&gt;:\"/\\|?*), or names ending with .\n\nwinxp cannot show unicode characters outside of some range\n\nlatin-1 is fine, hiragana is not (not even as shift-jis on japanese xp)\n\ntftp server\n\na TFTP server (read/write) can be started using --tftp 3969 (you probably want ftp instead unless you are actually communicating with hardware from the 90s (in which case we should definitely hang some time))\n\n> that makes this the first RTX DECT Base that has been updated using copyparty 🎉\n\nbased on partftpy\n\nno accounts; read from world-readable folders, write to world-writable, overwrite in world-deletable\n\nneeds a dedicated port (cannot share with the HTTP/HTTPS API)\n\nrun as root (or see below) to use the spec-recommended port 69 (nice)\n\ncan reply from a predefined portrange (good for firewalls)\n\nonly supports the binary/octet/image transfer mode (no netascii)\n\nRFC 7440 is not supported, so will be extremely slow over WAN\n\nassuming default blksize (512), expect 1100 KiB/s over 100BASE-T, 400-500 KiB/s over wifi, 200 on bad wifi\n\nmost clients expect to find TFTP on port 69, but on linux and macos you need to be root to listen on that. Alternatively, listen on 3969 and use NAT on the server to forward 69 to that port;\n\non linux: iptables -t nat -A PREROUTING -i eth0 -p udp --dport 69 -j REDIRECT --to-port 3969\n\nsome recommended TFTP clients:\n\ncurl (cross-platform, read/write)\n\nget: curl --tftp-blksize 1428 tftp://127.0.0.1:3969/firmware.bin\n\nput: curl --tftp-blksize 1428 -T firmware.bin tftp://127.0.0.1:3969/\n\nwindows: tftp.exe (you probably already have it)\n\ntftp -i 127.0.0.1 put firmware.bin\n\nlinux: tftp-hpa, atftp\n\natftp --option \"blksize 1428\" 127.0.0.1 3969 -p -l firmware.bin -r firmware.bin\n\ntftp -v -m binary 127.0.0.1 3969 -c put firmware.bin\n\nsmb server\n\nunsafe, slow, not recommended for wan, enable with --smb for read-only or --smbw for read-write\n\nclick the connect button in the control-panel to see connection instructions for windows, linux, macos\n\ndependencies: python3 -m pip install --user -U impacket==0.11.0\n\nnewer versions of impacket will hopefully work just fine but there is monkeypatching so maybe not\n\nsome BIG WARNINGS specific to SMB/CIFS, in decreasing importance:\n\nnot entirely confident that read-only is read-only\n\nthe smb backend is not fully integrated with vfs, meaning there could be security issues (path traversal). Please use --smb-port (see below) and prisonparty\n\naccount passwords work per-volume as expected, and so does account permissions (read/write/move/delete), but --smbw must be given to allow write-access from smb\n\nshadowing probably works as expected but no guarantees\n\nand some minor issues,\n\nclients only see the first ~400 files in big folders; impacket#1433\n\nhot-reload of server config (/?reload=cfg) does not include the [global] section (commandline args)\n\nlistens on the first IPv4 -i interface only (default = :: = 0.0.0.0 = all)\n\nlogin doesn't work on winxp, but anonymous access is ok -- remove all accounts from copyparty config for that to work\n\nwin10 onwards does not allow connecting anonymously / without accounts\n\non windows, creating a new file through rightclick --> new --> textfile throws an error due to impacket limitations -- hit OK and F5 to get your file\n\npython3 only\n\nslow (the builtin webdav support in windows is 5x faster, and rclone-webdav is 30x faster)\n\nknown client bugs:\n\non win7 only, --smb1 is much faster than smb2 (default) because it keeps rescanning folders on smb2\n\nhowever smb1 is buggy and is not enabled by default on win10 onwards\n\nwindows cannot access folders which contain filenames with invalid unicode or forbidden characters (&lt;&gt;:\"/\\|?*), or names ending with .\n\nthe smb protocol listens on TCP port 445, which is a privileged port on linux and macos, which would require running copyparty as root. However, this can be avoided by listening on another port using --smb-port 3945 and then using NAT on the server to forward the traffic from 445 to there;\n\non linux: iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 445 -j REDIRECT --to-port 3945\n\nauthenticate with one of the following:\n\nusername $username, password $password\n\nusername $password, password k\n\nbrowser ux\n\ntweaking the ui\n\nset default sort order globally with --sort or per-volume with the sort volflag; specify one or more comma-separated columns to sort by, and prefix the column name with - for reverse sort\n\nthe column names you can use are visible as tooltips when hovering over the column headers in the directory listing, for example href ext sz ts tags/.up_at tags/Cirle tags/.tn tags/Artist tags/Title\n\nto sort in music order (album, track, artist, title) with filename as fallback, you could --sort tags/Cirle,tags/.tn,tags/Artist,tags/Title,href\n\nto sort by upload date, first enable showing the upload date in the listing with -e2d -mte +.up_at and then --sort tags/.up_at\n\nsee ./docs/rice for more, including how to add stuff (css//...) to the html tag, or to add your own translation\n\nopengraph\n\ndiscord and social-media embeds\n\ncan be enabled globally with --og or per-volume with volflag og\n\nnote that this disables hotlinking because the opengraph spec demands it; to sneak past this intentional limitation, you can enable opengraph selectively by user-agent, for example --og-ua '(Discord|Twitter|Slack)bot' (or volflag og_ua)\n\nyou can also hotlink files regardless by appending ?raw to the url\n\nNOTE: because discord (and maybe others) strip query args such as ?raw in opengraph tags, any links which require a filekey or dirkey will not work\n\nif you want to entirely replace the copyparty response with your own jinja2 template, give the template filepath to --og-tpl or volflag og_tpl (all members of HttpCli are available through the this object)\n\nfile indexing\n\nenables dedup and music search ++\n\nfile indexing relies on two database tables, the up2k filetree (-e2d) and the metadata tags (-e2t), stored in .hist/up2k.db. Configuration can be done through arguments, volflags, or a mix of both.\n\nthrough arguments:\n\n-e2d enables file indexing on upload\n\n-e2ds also scans writable folders for new files on startup\n\n-e2dsa also scans all mounted volumes (including readonly ones)\n\n-e2t enables metadata indexing on upload\n\n-e2ts also scans for tags in all files that don't have tags yet\n\n-e2tsr also deletes all existing tags, doing a full reindex\n\n-e2v verfies file integrity at startup, comparing hashes from the db\n\n-e2vu patches the database with the new hashes from the filesystem\n\n-e2vp panics and kills copyparty instead\n\n--xlink enables deduplication across volumes\n\nthe same arguments can be set as volflags, in addition to d2d, d2ds, d2t, d2ts, d2v for disabling:\n\n-v ~/music::r:c,e2ds,e2tsr does a full reindex of everything on startup\n\n-v ~/music::r:c,d2d disables all indexing, even if any -e2* are on\n\n-v ~/music::r:c,d2t disables all -e2t* (tags), does not affect -e2d*\n\n-v ~/music::r:c,d2ds disables on-boot scans; only index new uploads\n\n-v ~/music::r:c,d2ts same except only affecting tags\n\nnote:\n\nupload-times can be displayed in the file listing by enabling the .up_at metadata key, either globally with -e2d -mte +.up_at or per-volume with volflags e2d,mte=+.up_at (will have a ~17% performance impact on directory listings)\n\ne2tsr is probably always overkill, since e2ds/e2dsa would pick up any file modifications and e2ts would then reindex those, unless there is a new copyparty version with new parsers and the release note says otherwise\n\nthe rescan button in the admin panel has no effect unless the volume has -e2ds or higher\n\ndeduplication is possible on windows if you run copyparty as administrator (not saying you should!)\n\nexclude-patterns\n\nto save some time, you can provide a regex pattern for filepaths to only index by filename/path/size/last-modified (and not the hash of the file contents) by setting --no-hash \\.iso$ or the volflag :c,nohash=\\.iso$, this has the following consequences:\n\ninitial indexing is way faster, especially when the volume is on a network disk\n\nmakes it impossible to file-search\n\nif someone uploads the same file contents, the upload will not be detected as a dupe, so it will not get symlinked or rejected\n\nsimilarly, you can fully ignore files/folders using --no-idx [...] and :c,noidx=\\.iso$\n\nwhen running on macos, all the usual apple metadata files are excluded by default\n\nif you set --no-hash [...] globally, you can enable hashing for specific volumes using flag :c,nohash=\n\nfilesystem guards\n\navoid traversing into other filesystems using --xdev / volflag :c,xdev, skipping any symlinks or bind-mounts to another HDD for example\n\nand/or you can --xvol / :c,xvol to ignore all symlinks leaving the volume's top directory, but still allow bind-mounts pointing elsewhere\n\nsymlinks are permitted with xvol if they point into another volume where the user has the same level of access\n\nthese options will reduce performance; unlikely worst-case estimates are 14% reduction for directory listings, 35% for download-as-tar\n\nas of copyparty v1.7.0 these options also prevent file access at runtime -- in previous versions it was just hints for the indexer\n\nperiodic rescan\n\nfilesystem monitoring; if copyparty is not the only software doing stuff on your filesystem, you may want to enable periodic rescans to keep the index up to date\n\nargument --re-maxage 60 will rescan all volumes every 60 sec, same as volflag :c,scan=60 to specify it per-volume\n\nuploads are disabled while a rescan is happening, so rescans will be delayed by --db-act (default 10 sec) when there is write-activity going on (uploads, renames, ...)\n\nupload rules\n\nset upload rules using volflags, some examples:\n\n:c,sz=1k-3m sets allowed filesize between 1 KiB and 3 MiB inclusive (suffixes: b, k, m, g)\n\n:c,df=4g block uploads if there would be less than 4 GiB free disk space afterwards\n\n:c,vmaxb=1g block uploads if total volume size would exceed 1 GiB afterwards\n\n:c,vmaxn=4k block uploads if volume would contain more than 4096 files afterwards\n\n:c,nosub disallow uploading into subdirectories; goes well with rotn and rotf:\n\n:c,rotn=1000,2 moves uploads into subfolders, up to 1000 files in each folder before making a new one, two levels deep (must be at least 1)\n\n:c,rotf=%Y/%m/%d/%H enforces files to be uploaded into a structure of subfolders according to that date format\n\nif someone uploads to /foo/bar the path would be rewritten to /foo/bar/2021/08/06/23 for example\n\nbut the actual value is not verified, just the structure, so the uploader can choose any values which conform to the format string\n\njust to avoid additional complexity in up2k which is enough of a mess already\n\n:c,lifetime=300 delete uploaded files when they become 5 minutes old\n\nyou can also set transaction limits which apply per-IP and per-volume, but these assume -j 1 (default) otherwise the limits will be off, for example -j 4 would allow anywhere between 1x and 4x the limits you set depending on which processing node the client gets routed to\n\n:c,maxn=250,3600 allows 250 files over 1 hour from each IP (tracked per-volume)\n\n:c,maxb=1g,300 allows 1 GiB total over 5 minutes from each IP (tracked per-volume)\n\nnotes:\n\nvmaxb and vmaxn requires either the e2ds volflag or -e2dsa global-option\n\ncompress uploads\n\nfiles can be autocompressed on upload, either on user-request (if config allows) or forced by server-config\n\nvolflag gz allows gz compression\n\nvolflag xz allows lzma compression\n\nvolflag pk forces compression on all files\n\nurl parameter pk requests compression with server-default algorithm\n\nurl parameter gz or xz requests compression with a specific algorithm\n\nurl parameter xz requests xz compression\n\nthings to note,\n\nthe gz and xz arguments take a single optional argument, the compression level (range 0 to 9)\n\nthe pk volflag takes the optional argument ALGORITHM,LEVEL which will then be forced for all uploads, for example gz,9 or xz,0\n\ndefault compression is gzip level 9\n\nall upload methods except up2k are supported\n\nthe files will be indexed after compression, so dupe-detection and file-search will not work as expected\n\nsome examples,\n\n-v inc:inc:w:c,pk=xz,0\n\nfolder named inc, shared at inc, write-only for everyone, forces xz compression at level 0\n\n-v inc:inc:w:c,pk\n\nsame write-only inc, but forces gz compression (default) instead of xz\n\n-v inc:inc:w:c,gz\n\nallows (but does not force) gz compression if client uploads to /inc?pk or /inc?gz or /inc?gz=4\n\nother flags\n\n:c,magic enables filetype detection for nameless uploads, same as --magic\n\nneeds https://pypi.org/project/python-magic/ python3 -m pip install --user -U python-magic\n\non windows grab this instead python3 -m pip install --user -U python-magic-bin\n\ndatabase location\n\nin-volume (.hist/up2k.db, default) or somewhere else\n\ncopyparty creates a subfolder named .hist inside each volume where it stores the database, thumbnails, and some other stuff\n\nthis can instead be kept in a single place using the --hist argument, or the hist= volflag, or a mix of both:\n\n--hist ~/.cache/copyparty -v ~/music::r:c,hist=- sets ~/.cache/copyparty as the default place to put volume info, but ~/music gets the regular .hist subfolder (- restores default behavior)\n\nnote:\n\nmarkdown edits are always stored in a local .hist subdirectory\n\non windows the volflag path is cyglike, so /c/temp means C:\\temp but use regular paths for --hist\n\nyou can use cygpaths for volumes too, -v C:\\Users::r and -v /c/users::r both work\n\nmetadata from audio files\n\nset -e2t to index tags on upload\n\n-mte decides which tags to index and display in the browser (and also the display order), this can be changed per-volume:\n\n-v ~/music::r:c,mte=title,artist indexes and displays title followed by artist\n\nif you add/remove a tag from mte you will need to run with -e2tsr once to rebuild the database, otherwise only new files will be affected\n\nbut instead of using -mte, -mth is a better way to hide tags in the browser: these tags will not be displayed by default, but they still get indexed and become searchable, and users can choose to unhide them in the [⚙️] config pane\n\n-mtm can be used to add or redefine a metadata mapping, say you have media files with foo and bar tags and you want them to display as qux in the browser (preferring foo if both are present), then do -mtm qux=foo,bar and now you can -mte artist,title,qux\n\ntags that start with a . such as .bpm and .dur(ation) indicate numeric value\n\nsee the beautiful mess of a dictionary in mtag.py for the default mappings (should cover mp3,opus,flac,m4a,wav,aif,)\n\n--no-mutagen disables Mutagen and uses FFprobe instead, which...\n\nis about 20x slower than Mutagen\n\ncatches a few tags that Mutagen doesn't\n\nmelodic key, video resolution, framerate, pixfmt\n\navoids pulling any GPL code into copyparty\n\nmore importantly runs FFprobe on incoming files which is bad if your FFmpeg has a cve\n\n--mtag-to sets the tag-scan timeout; very high default (60 sec) to cater for zfs and other randomly-freezing filesystems. Lower values like 10 are usually safe, allowing for faster processing of tricky files\n\nfile parser plugins\n\nprovide custom parsers to index additional tags, also see ./bin/mtag/README.md\n\ncopyparty can invoke external programs to collect additional metadata for files using mtp (either as argument or volflag), there is a default timeout of 60sec, and only files which contain audio get analyzed by default (see ay/an/ad below)\n\n-mtp .bpm=~/bin/audio-bpm.py will execute ~/bin/audio-bpm.py with the audio file as argument 1 to provide the .bpm tag, if that does not exist in the audio metadata\n\n-mtp key=f,t5,~/bin/audio-key.py uses ~/bin/audio-key.py to get the key tag, replacing any existing metadata tag (f,), aborting if it takes longer than 5sec (t5,)\n\n-v ~/music::r:c,mtp=.bpm=~/bin/audio-bpm.py:c,mtp=key=f,t5,~/bin/audio-key.py both as a per-volume config wow this is getting ugly\n\nbut wait, there's more! -mtp can be used for non-audio files as well using the a flag: ay only do audio files (default), an only do non-audio files, or ad do all files (d as in dontcare)\n\n\"audio file\" also means videos btw, as long as there is an audio stream\n\n-mtp ext=an,~/bin/file-ext.py runs ~/bin/file-ext.py to get the ext tag only if file is not audio (an)\n\n-mtp arch,built,ver,orig=an,eexe,edll,~/bin/exe.py runs ~/bin/exe.py to get properties about windows-binaries only if file is not audio (an) and file extension is exe or dll\n\nif you want to daisychain parsers, use the p flag to set processing order\n\n-mtp foo=p1,~/a.py runs before -mtp foo=p2,~/b.py and will forward all the tags detected so far as json to the stdin of b.py\n\noption c0 disables capturing of stdout/stderr, so copyparty will not receive any tags from the process at all -- instead the invoked program is free to print whatever to the console, just using copyparty as a launcher\n\nc1 captures stdout only, c2 only stderr, and c3 (default) captures both\n\nyou can control how the parser is killed if it times out with option kt killing the entire process tree (default), km just the main process, or kn let it continue running until copyparty is terminated\n\nif something doesn't work, try --mtag-v for verbose error messages\n\nevent hooks\n\ntrigger a program on uploads, renames etc (examples)\n\nyou can set hooks before and/or after an event happens, and currently you can hook uploads, moves/renames, and deletes\n\nthere's a bunch of flags and stuff, see --help-hooks\n\nupload events\n\nthe older, more powerful approach (examples):\n\n-v /mnt/inc:inc:w:c,mte=+x1:c,mtp=x1=ad,kn,/usr/bin/notify-send\n\nso filesystem location /mnt/inc shared at /inc, write-only for everyone, appending x1 to the list of tags to index (mte), and using /usr/bin/notify-send to \"provide\" tag x1 for any filetype (ad) with kill-on-timeout disabled (kn)\n\nthat'll run the command notify-send with the path to the uploaded file as the first and only argument (so on linux it'll show a notification on-screen)\n\nnote that this is way more complicated than the new event hooks but this approach has the following advantages:\n\nnon-blocking and multithreaded; doesn't hold other uploads back\n\nyou get access to tags from FFmpeg and other mtp parsers\n\nonly trigger on new unique files, not dupes\n\nnote that it will occupy the parsing threads, so fork anything expensive (or set kn to have copyparty fork it for you) -- otoh if you want to intentionally queue/singlethread you can combine it with --mtag-mt 1\n\nhandlers\n\nredefine behavior with plugins (examples)\n\nreplace 404 and 403 errors with something completely different (that's it for now)\n\nidentity providers\n\nreplace copyparty passwords with oauth and such\n\nyou can disable the built-in password-based login sysem, and instead replace it with a separate piece of software (an identity provider) which will then handle authenticating / authorizing of users; this makes it possible to login with passkeys / fido2 / webauthn / yubikey / ldap / active directory / oauth / many other single-sign-on contraptions\n\na popular choice is Authelia (config-file based), another one is authentik (GUI-based, more complex)\n\nthere is a docker-compose example which is hopefully a good starting point (alternatively see ./docs/idp.md if you're the DIY type)\n\na more complete example of the copyparty configuration options look like this\n\nusing the cloud as storage\n\nconnecting to an aws s3 bucket and similar\n\nthere is no built-in support for this, but you can use FUSE-software such as rclone / geesefs / JuiceFS to first mount your cloud storage as a local disk, and then let copyparty use (a folder in) that disk as a volume\n\nyou may experience poor upload performance this way, but that can sometimes be fixed by specifying the volflag sparse to force the use of sparse files; this has improved the upload speeds from 1.5 MiB/s to over 80 MiB/s in one case, but note that you are also more likely to discover funny bugs in your FUSE software this way, so buckle up\n\nsomeone has also tested geesefs in combination with gocryptfs with surprisingly good results, getting 60 MiB/s upload speeds on a gbit line, but JuiceFS won with 80 MiB/s using its built-in encryption\n\nyou may improve performance by specifying larger values for --iobuf / --s-rd-sz / --s-wr-sz\n\nhiding from google\n\ntell search engines you dont wanna be indexed, either using the good old robots.txt or through copyparty settings:\n\n--no-robots adds HTTP (X-Robots-Tag) and HTML (``) headers with noindex, nofollow globally\n\nvolflag [...]:c,norobots does the same thing for that single volume\n\nvolflag [...]:c,robots ALLOWS search-engine crawling for that volume, even if --no-robots is set globally\n\nalso, --force-js disables the plain HTML folder listing, making things harder to parse for search engines\n\nthemes\n\nyou can change the default theme with --theme 2, and add your own themes by modifying browser.css or providing your own css to --css-browser, then telling copyparty they exist by increasing --themes\n\n0. classic dark 2. flat pm-monokai 4. vice 1. classic light 3. flat light 5. hotdog stand\n\nthe classname of the HTML tag is set according to the selected theme, which is used to set colors as css variables ++\n\neach theme generally has a dark theme (even numbers) and a light theme (odd numbers), showing in pairs\n\nthe first theme (theme 0 and 1) is html.a, second theme (2 and 3) is html.b\n\nif a light theme is selected, html.y is set, otherwise html.z is\n\nso if the dark edition of the 2nd theme is selected, you use any of html.b, html.z, html.bz to specify rules\n\nsee the top of ./copyparty/web/browser.css where the color variables are set, and there's layout-specific stuff near the bottom\n\nif you want to change the fonts, see ./docs/rice/\n\ncomplete examples\n\nsee running on windows for a fancy windows setup\n\nor use any of the examples below, just replace python copyparty-sfx.py with copyparty.exe if you're using the exe edition\n\nallow anyone to download or upload files into the current folder:\n\npython copyparty-sfx.py\n\nenable searching and music indexing with -e2dsa -e2ts\n\nstart an FTP server on port 3921 with --ftp 3921\n\nannounce it on your LAN with -z so it appears in windows/Linux file managers\n\nanyone can upload, but nobody can see any files (even the uploader):\n\npython copyparty-sfx.py -e2dsa -v .::w\n\nblock uploads if there's less than 4 GiB free disk space with --df 4\n\nshow a popup on new uploads with --xau bin/hooks/notify.py\n\nanyone can upload, and receive \"secret\" links for each upload they do:\n\npython copyparty-sfx.py -e2dsa -v .::wG:c,fk=8\n\nanyone can browse (r), only kevin (password okgo) can upload/move/delete (A) files:\n\npython copyparty-sfx.py -e2dsa -a kevin:okgo -v .::r:A,kevin\n\nread-only music server:\n\npython copyparty-sfx.py -v /mnt/nas/music:/music:r -e2dsa -e2ts --no-robots --force-js --theme 2\n\n...with bpm and key scanning\n\n-mtp .bpm=f,audio-bpm.py -mtp key=f,audio-key.py\n\n...with a read-write folder for kevin whose password is okgo\n\n-a kevin:okgo -v /mnt/nas/inc:/inc:rw,kevin\n\n...with logging to disk\n\n-lo log/cpp-%Y-%m%d-%H%M%S.txt.xz\n\nreverse-proxy\n\nrunning copyparty next to other websites hosted on an existing webserver such as nginx, caddy, or apache\n\nyou can either:\n\ngive copyparty its own domain or subdomain (recommended)\n\nor do location-based proxying, using --rp-loc=/stuff to tell copyparty where it is mounted -- has a slight performance cost and higher chance of bugs\n\nif copyparty says incorrect --rp-loc or webserver config; expected vpath starting with [...] it's likely because the webserver is stripping away the proxy location from the request URLs -- see the ProxyPass in the apache example below\n\nsome reverse proxies (such as Caddy) can automatically obtain a valid https/tls certificate for you, and some support HTTP/2 and QUIC which could be a nice speed boost, depending on a lot of factors\n\nwarning: nginx-QUIC (HTTP/3) is still experimental and can make uploads much slower, so HTTP/1.1 is recommended for now\n\ndepending on server/client, HTTP/1.1 can also be 5x faster than HTTP/2\n\nexample webserver configs:\n\nnginx config -- entire domain/subdomain\n\napache2 config -- location-based\n\nreal-ip\n\nteaching copyparty how to see client IPs when running behind a reverse-proxy, or a WAF, or another protection service such as cloudflare\n\nif you (and maybe everybody else) keep getting a message that says thank you for playing, then you've gotten banned for malicious traffic. This ban applies to the IP address that copyparty thinks identifies the shady client -- so, depending on your setup, you might have to tell copyparty where to find the correct IP\n\nfor most common setups, there should be a helpful message in the server-log explaining what to do, but see docs/xff.md if you want to learn more, including a quick hack to just make it work (which is not recommended, but hey...)\n\nprometheus\n\nmetrics/stats can be enabled at URL /.cpr/metrics for grafana / prometheus / etc (openmetrics 1.0.0)\n\nmust be enabled with --stats since it reduces startup time a tiny bit, and you probably want -e2dsa too\n\nthe endpoint is only accessible by admin accounts, meaning the a in rwmda in the following example commandline: python3 -m copyparty -a ed:wark -v /mnt/nas::rwmda,ed --stats -e2dsa\n\nfollow a guide for setting up node_exporter except have it read from copyparty instead; example /etc/prometheus/prometheus.yml below\n\nscrape_configs: - job_name: copyparty metrics_path: /.cpr/metrics basic_auth: password: wark static_configs: - targets: ['192.168.123.1:3923']\n\ncurrently the following metrics are available,\n\ncpp_uptime_seconds time since last copyparty restart\n\ncpp_boot_unixtime_seconds same but as an absolute timestamp\n\ncpp_http_conns number of open http(s) connections\n\ncpp_http_reqs number of http(s) requests handled\n\ncpp_sus_reqs number of 403/422/malicious requests\n\ncpp_active_bans number of currently banned IPs\n\ncpp_total_bans number of IPs banned since last restart\n\nthese are available unless --nos-vst is specified:\n\ncpp_db_idle_seconds time since last database activity (upload/rename/delete)\n\ncpp_db_act_seconds same but as an absolute timestamp\n\ncpp_idle_vols number of volumes which are idle / ready\n\ncpp_busy_vols number of volumes which are busy / indexing\n\ncpp_offline_vols number of volumes which are offline / unavailable\n\ncpp_hashing_files number of files queued for hashing / indexing\n\ncpp_tagq_files number of files queued for metadata scanning\n\ncpp_mtpq_files number of files queued for plugin-based analysis\n\nand these are available per-volume only:\n\ncpp_disk_size_bytes total HDD size\n\ncpp_disk_free_bytes free HDD space\n\nand these are per-volume and total:\n\ncpp_vol_bytes size of all files in volume\n\ncpp_vol_files number of files\n\ncpp_dupe_bytes disk space presumably saved by deduplication\n\ncpp_dupe_files number of dupe files\n\ncpp_unf_bytes currently unfinished / incoming uploads\n\nsome of the metrics have additional requirements to function correctly,\n\ncpp_vol_* requires either the e2ds volflag or -e2dsa global-option\n\nthe following options are available to disable some of the metrics:\n\n--nos-hdd disables cpp_disk_* which can prevent spinning up HDDs\n\n--nos-vol disables cpp_vol_* which reduces server startup time\n\n--nos-vst disables volume state, reducing the worst-case prometheus query time by 0.5 sec\n\n--nos-dup disables cpp_dupe_* which reduces the server load caused by prometheus queries\n\n--nos-unf disables cpp_unf_* for no particular purpose\n\nnote: the following metrics are counted incorrectly if multiprocessing is enabled with -j: cpp_http_conns, cpp_http_reqs, cpp_sus_reqs, cpp_active_bans, cpp_total_bans\n\nother extremely specific features\n\nyou'll never find a use for these:\n\ncustom mimetypes\n\nchange the association of a file extension\n\nusing commandline args, you can do something like --mime gif=image/jif and --mime ts=text/x.typescript (can be specified multiple times)\n\nin a config-file, this is the same as:\n\n[global] mime: gif=image/jif mime: ts=text/x.typescript\n\nrun copyparty with --mimes to list all the default mappings\n\npackages\n\nthe party might be closer than you think\n\nif your distro/OS is not mentioned below, there might be some hints in the «on servers» section\n\narch package\n\nnow available on aur maintained by @icxes\n\nit comes with a systemd service and expects to find one or more config files in /etc/copyparty.d/\n\nfedora package\n\ndoes not exist yet; using the copr-pypi builds is NOT recommended because updates can be delayed by several months\n\nnix package\n\nnix profile install github:9001/copyparty\n\nrequires a flake-enabled installation of nix\n\nsome recommended dependencies are enabled by default; override the package if you want to add/remove some features/deps\n\nffmpeg-full was chosen over ffmpeg-headless mainly because we need withWebp (and withOpenmpt is also nice) and being able to use a cached build felt more important than optimizing for size at the time -- PRs welcome if you disagree 👍\n\nnixos module\n\nfor this setup, you will need a flake-enabled installation of NixOS.\n\n{ inputs.copyparty.url = \"github:9001/copyparty\"; outputs = { self, nixpkgs, copyparty }: { nixosConfigurations.yourHostName = nixpkgs.lib.nixosSystem { modules = [ copyparty.nixosModules.default ({ pkgs, ... }: { nixpkgs.overlays = [ copyparty.overlays.default ]; environment.systemPackages = [ pkgs.copyparty ]; services.copyparty.enable = true; }) ]; }; }; }\n\ncopyparty on NixOS is configured via services.copyparty options, for example:\n\nservices.copyparty = { enable = true; settings = { i = \"0.0.0.0\"; p = [ 3210 3211 ]; no-reload = true; ignored-flag = false; }; accounts = { ed = { passwordFile = \"/run/keys/copyparty/ed_password\"; }; k.passwordFile = \"/run/keys/copyparty/k_password\"; }; volumes = { \"/\" = { path = \"/srv/copyparty\"; access = { r = \"*\"; rw = [ \"ed\" \"k\" ]; }; flags = { fk = 4; scan = 60; e2d = true; d2t = true; nohash = \"\\.iso$\"; }; }; }; openFilesLimit = 8192; };\n\nthe passwordFile at /run/keys/copyparty/ could for example be generated by agenix, or you could just dump it in the nix store instead if that's acceptable\n\nbrowser support\n\nTLDR: yes\n\nie = internet-explorer, ff = firefox, c = chrome, iOS = iPhone/iPad, Andr = Android\n\nfeature ie6 ie9 ie10 ie11 ff 52 c 49 iOS Andr browse files yep yep yep yep yep yep yep yep thumbnail view - yep yep yep yep yep yep yep basic uploader yep yep yep yep yep yep yep yep up2k - - *1 *1 yep yep yep yep make directory yep yep yep yep yep yep yep yep send message yep yep yep yep yep yep yep yep set sort order - yep yep yep yep yep yep yep zip selection - yep yep yep yep yep yep yep file rename - yep yep yep yep yep yep yep file cut/paste - yep yep yep yep yep yep yep navpane - yep yep yep yep yep yep yep image viewer - yep yep yep yep yep yep yep video player - yep yep yep yep yep yep yep markdown editor - - *2 *2 yep yep yep yep markdown viewer - *2 *2 *2 yep yep yep yep play mp3/m4a - yep yep yep yep yep yep yep play ogg/opus - - - - yep yep *3 yep = feature = ie6 ie9 ie10 ie11 ff 52 c 49 iOS Andr\n\ninternet explorer 6 through 8 behave the same\n\nfirefox 52 and chrome 49 are the final winxp versions\n\n*1 yes, but extremely slow (ie10: 1 MiB/s, ie11: 270 KiB/s)\n\n*2 only able to do plaintext documents (no markdown rendering)\n\n*3 iOS 11 and newer, opus only, and requires FFmpeg on the server\n\nquick summary of more eccentric web-browsers trying to view a directory index:\n\nbrowser will it blend links (2.21/macports) can browse, login, upload/mkdir/msg lynx (2.8.9/macports) can browse, login, upload/mkdir/msg w3m (0.5.3/macports) can browse, login, upload at 100kB/s, mkdir/msg netsurf (3.10/arch) is basically ie6 with much better css (javascript has almost no effect) opera (11.60/winxp) OK: thumbnails, image-viewer, zip-selection, rename/cut/paste. NG: up2k, navpane, markdown, audio ie4 and netscape 4.0 can browse, upload with ?b=u, auth with &amp;pw=wark ncsa mosaic 2.7 does not get a pass, pic1 - pic2 SerenityOS (7e98457) hits a page fault, works with ?b=u, file upload not-impl\n\nclient examples\n\ninteract with copyparty using non-browser clients\n\njavascript: dump some state into a file (two separate examples)\n\nawait fetch('//127.0.0.1:3923/', {method:\"PUT\", body: JSON.stringify(foo)});\n\nvar xhr = new XMLHttpRequest(); xhr.open('POST', '//127.0.0.1:3923/msgs?raw'); xhr.send('foo');\n\ncurl/wget: upload some files (post=file, chunk=stdin)\n\npost(){ curl -F f=@\"$1\" http://127.0.0.1:3923/?pw=wark;}\n\npost movie.mkv (gives HTML in return)\n\npost(){ curl -F f=@\"$1\" 'http://127.0.0.1:3923/?want=url&amp;pw=wark';}\n\npost movie.mkv (gives hotlink in return)\n\npost(){ curl -H pw:wark -H rand:8 -T \"$1\" http://127.0.0.1:3923/;}\n\npost movie.mkv (randomized filename)\n\npost(){ wget --header='pw: wark' --post-file=\"$1\" -O- http://127.0.0.1:3923/?raw;}\n\npost movie.mkv\n\nchunk(){ curl -H pw:wark -T- http://127.0.0.1:3923/;}\n\nchunk /dev/tcp/127.0.0.1/3923\n\npython: u2c.py is a command-line up2k client (webm)\n\nfile uploads, file-search, folder sync, autoresume of aborted/broken uploads\n\ncan be downloaded from copyparty: controlpanel -> connect -> u2c.py\n\nsee ./bin/README.md#u2cpy\n\nFUSE: mount a copyparty server as a local filesystem\n\ncross-platform python client available in ./bin/\n\ncan be downloaded from copyparty: controlpanel -> connect -> partyfuse.py\n\nrclone as client can give ~5x performance, see ./docs/rclone.md\n\nsharex (screenshot utility): see ./contrib/sharex.sxcu\n\ncontextlet (web browser integration); see contrib contextlet\n\nigloo irc: Method: post Host: https://you.com/up/?want=url&amp;pw=hunter2 Multipart: yes File parameter: f\n\ncopyparty returns a truncated sha512sum of your PUT/POST as base64; you can generate the same checksum locally to verify uplaods:\n\nb512(){ printf \"$((sha512sum||shasum -a512)|sed -E 's/ .*//;s/(..)/\\\\x\\1/g')\"|base64|tr '+/' '-_'|head -c44;} b512 <img height=\"50\" alt=\"Get it on F-Droid\" src=\"https://ocv.me/fdroid.png\"> '' <img alt=\"f-droid version info\" src=\"https://img.shields.io/f-droid/v/me.ocv.partyup.svg\"> '' <a href=\"https://github.com/9001/party-up\"><img alt=\"github version info\" src=\"https://img.shields.io/github/release/9001/party-up.svg?logo=github\"></a>\n\nthe app is NOT the full copyparty server! just a basic upload client, nothing fancy yet\n\nif you want to run the copyparty server on your android device, see install on android\n\niOS shortcuts\n\nthere is no iPhone app, but the following shortcuts are almost as good:\n\nupload to copyparty (offline) (png) based on the original by Daedren (thx!)\n\ncan strip exif, upload files, pics, vids, links, clipboard\n\ncan download links and rehost the target file on copyparty (see first comment inside the shortcut)\n\npics become lowres if you share from gallery to shortcut, so better to launch the shortcut and pick stuff from there\n\nperformance\n\ndefaults are usually fine - expect 8 GiB/s download, 1 GiB/s upload\n\nbelow are some tweaks roughly ordered by usefulness:\n\ndisabling HTTP/2 and HTTP/3 can make uploads 5x faster, depending on server/client software\n\n-q disables logging and can help a bunch, even when combined with -lo to redirect logs to file\n\n--hist pointing to a fast location (ssd) will make directory listings and searches faster when -e2d or -e2t is set\n\nand also makes thumbnails load faster, regardless of e2d/e2t\n\n--no-hash . when indexing a network-disk if you don't care about the actual filehashes and only want the names/tags searchable\n\nif your volumes are on a network-disk such as NFS / SMB / s3, specifying larger values for --iobuf and/or --s-rd-sz and/or --s-wr-sz may help; try setting all of them to 524288 or 1048576 or 4194304\n\n--no-htp --hash-mt=0 --mtag-mt=1 --th-mt=1 minimizes the number of threads; can help in some eccentric environments (like the vscode debugger)\n\n-j0 enables multiprocessing (actual multithreading), can reduce latency to 20+80/numCores percent and generally improve performance in cpu-intensive workloads, for example:\n\nlots of connections (many users or heavy clients)\n\nsimultaneous downloads and uploads saturating a 20gbps connection\n\nif -e2d is enabled, -j2 gives 4x performance for directory listings; -j4 gives 16x\n\n...however it also increases the server/filesystem/HDD load during uploads, and adds an overhead to internal communication, so it is usually a better idea to don't\n\nusing pypy instead of cpython can be 70% faster for some workloads, but slower for many others\n\nand pypy can sometimes crash on startup with -j0 (TODO make issue)\n\nclient-side\n\nwhen uploading files,\n\nchrome is recommended (unfortunately), at least compared to firefox:\n\nup to 90% faster when hashing, especially on SSDs\n\nup to 40% faster when uploading over extremely fast internets\n\nbut u2c.py can be 40% faster than chrome again\n\nif you're cpu-bottlenecked, or the browser is maxing a cpu core:\n\nup to 30% faster uploads if you hide the upload status list by switching away from the [🚀] up2k ui-tab (or closing it)\n\noptionally you can switch to the lightweight potato ui by clicking the [🥔]\n\nswitching to another browser-tab also works, the favicon will update every 10 seconds in that case\n\nunlikely to be a problem, but can happen when uploding many small files, or your internet is too fast, or PC too slow\n\nsecurity\n\nthere is a discord server with an @everyone for all important updates (at the lack of better ideas)\n\nsome notes on hardening\n\nset --rproxy 0 if your copyparty is directly facing the internet (not through a reverse-proxy)\n\ncors doesn't work right otherwise\n\nif you allow anonymous uploads or otherwise don't trust the contents of a volume, you can prevent XSS with volflag nohtml\n\nthis returns html documents as plaintext, and also disables markdown rendering\n\nsafety profiles:"
    }
}