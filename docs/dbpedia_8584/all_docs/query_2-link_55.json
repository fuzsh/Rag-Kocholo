{
    "id": "dbpedia_8584_2",
    "rank": 55,
    "data": {
        "url": "https://docs.unity3d.com/Manual/upm-errors.html",
        "read_more_link": "",
        "language": "en",
        "title": "Manual: Troubleshooting",
        "top_image": "https://unity3d.com/files/images/ogimg.jpg",
        "meta_img": "https://unity3d.com/files/images/ogimg.jpg",
        "images": [
            "https://docs.unity3d.com/uploads/Main/upm-ui-errors.png",
            "https://docs.unity3d.com/uploads/Main/upm-ui-unityid.png",
            "https://docs.unity3d.com/uploads/Main/iconError.png",
            "https://docs.unity3d.com/uploads/Main/upm-ui-errormsg.png",
            "https://docs.unity3d.com/uploads/Main/upm-errors-reset.png",
            "https://docs.unity3d.com/uploads/Main/upm-giturl-locate.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Unity Technologies"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://unity.com/themes/contrib/unity_base/images/favicons/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Troubleshooting\n\nThis section provides information on the following issues:\n\nType of error: Error message: General startup issues - Error messages in the Package Manager window\n\n- Package Manager missing or window doesn’t open\n\n- Problems after upgrading Unity to new version\n\n- Resetting your project’s package configuration Package installation issues - Package installation fails\n\n- Unable to add package from Git URL\n\n- Insufficient drive space Package signature issues - Package version has no signature\n\n- Package version doesn’t have a valid signature Problems installing git dependencies - No ‘git’ executable was found\n\n- git-lfs: command not found\n\n- Repository not found\n\n- Could not read Username: terminal prompts disabled\n\n- Can’t update Git version Asset packagesA collection of files and data from Unity projects, or elements of projects, which are compressed and stored in one file, similar to Zip files, with the .unitypackage extension. Asset packages are a handy way of sharing and re-using Unity projects and collections of assets. More info\n\nSee in Glossary from Asset StoreA growing library of free and commercial assets created by Unity and members of the community. Offers a wide variety of assets, from textures, models and animations to whole project examples, tutorials and Editor extensions. More info\n\nSee in Glossary (My Assets) - ‘Failed to parse Http response’ in My Assets context Scoped registries - Missing ‘My Registries’ in the Package Manager window Issues when building packages - Missing MonoBehaviour errors\n\n- Loading error for hostfxr.dll on Windows\n\nYou can also run the Unity Package Manager Diagnostics tool if you are experiencing problems that might be network-related. For more information, refer to Diagnose network issues.\n\nError messages in the Package Manager window\n\nThe Package Manager displays error indicators in the Package Manager window when it encounters problems.\n\nSystem-wide issues\n\nNetwork connection issues\n\nError messages appear in the status bar when the Package Manager has detected an issue that isn’t related to a specific package. For example, if the Package Manager can’t access the package registry server, it displays this message in the status bar:\n\nError refreshing assets (or Error refreshing packages)\n\nIf your network can’t reach the package registry server, it’s probably because there is a connection problem with the network. When you or your system administrator diagnose and fix the network error, the status bar clears.\n\nIf your network connection is working, but you aren’t signed into your Unity account, the Package Manager doesn’t display any Asset Store packages. When you try to use the My Assets context, the Package Manager displays an error in the status bar:\n\nClick the Sign in button inside the list view to sign into your Unity account through the Unity Hub.\n\nPackage-specific issues\n\nIf a specific package has a problem when loading or installing (for example, when determining which package versions to load), the error icon ( ) appears in the package list next to the compromised package (A). To find out what the problem is, check the compromised package’s details view to view the detailed error message (B):\n\nPackage Manager missing or window doesn’t open\n\nThe Package Manager window might get moved offscreen or hidden by another window. When this happens, it looks like the Package Manager window failed to open. In this case, you can try to reset the window layout (Window > Layouts > Default) and reopen the Package Manager window again.\n\nIf the Package Manager window still doesn’t appear, check your Unity Console windowA Unity Editor window that shows errors, warnings and other messages generated by Unity, or your own scripts. More info\n\nSee in Glossary:\n\nFailed to resolve packages: The file [<project-path>/Packages/manifest.json] is not valid JSON: Unexpected token '}' at 44:1 }\n\nThis error message indicates that your manifest.json file is malformed. It also tells you the line number where the Package Manager failed to parse the file, so you can fix the JSON. There are a number of online validators that you can use to try to correct the problem. Once you save the corrected file, Unity reloads the Package Manager window.\n\nIf you upgraded from an early version of the Unity Editor, there may be other problems with your package manifestEach package has a manifest, which provides information about the package to the Package Manager. The manifest contains information such as the name of the package, its version, a description for users, dependencies on other packages (if any), and other details. More info\n\nSee in Glossary file:\n\nAs of 2019.3, your manifest.json file should not contain any references to the com.unity.package-manager-ui package. You can either reset your project’s package configuration or remove the following line from the manifest’s dependencies list:\n\n\"com.unity.package-manager-ui\": \"2.1.1\",\n\nCheck if your project manifestEach Unity project has a project manifest, which acts as an entry point for the Package Manager. This file must be available in the <project>/Packages directory. The Package Manager uses it to configure many things, including a list of dependencies for that project, as well as any package repository to query for packages. More info\n\nSee in Glossary uses “exclude” as a package version. This is an obsolete value for the dependencies property. If you find any lines like these, remove the entire line. Package Manager only installs packages that are explicitly included as a dependency in your project, so once you remove that entry, Package Manager ignores the package and doesn’t install it.\n\nIf the Package Manager still fails to load, follow the procedure under Resetting your project’s package configuration.\n\nProblems after upgrading Unity to new version\n\nWhen you upgrade a project to a newer Unity version, the Package Manager automatically updates incompatible packages to newer compatible versions. However, if your package doesn’t compile, the Package Manager displays error messages in the Console.\n\nTo correct these messages, read the error messages and fix any problems you can. For example, a package might be missing a dependency on another package or version. In that case, you can try and install the package yourself.\n\nYou can also try the following sequence of solutions until you find something that works:\n\nBack up and then delete the Packages folder under your project.\n\nBack up and then delete the package sources in your project’s Packages folder, leaving only the manifest.json file. Then try to reload the project.\n\nCreate a new empty project. If the Package Manager window loads successfully, replace the Library/PackageCache/com.unity.package-manager-ui@<version> folder in the failing project with the same folder from the newly created project.\n\nAs a last resort, you can reset your project to the default packageUnity automatically pre-installs a select number of default packages (for example, the Analytics Library, Unity Timeline, etc.) when you create a new project. This differs from a bundled package because you don’t need to install it and it differs from a built-in package because it extends Unity’s features rather than being able to enable or disable them.\n\nSee in Glossary configuration and add back packages one at a time until it works.\n\nResetting your project’s package configuration\n\nIf a project has too many package issues, you can reset your project back to the default package configuration for the Editor’s version of Unity. This operation resets all packages in your project. This might not fix the source of the problem, but it can help you figure out what the problem is.\n\nNote: You can’t undo resetting your package configuration, so make sure you back up the manifest.json file first or make sure your project is under source control. You can also take extra precautions by cloning your project and testing out the operation on the clone before proceeding.\n\nTo return to the default package configuration, select Reset Packages to defaults from the Help menu.\n\nResetting a clone of your project\n\nYou can also test the return to the default packages before you perform the final change:\n\nClone your project by copy-pasting your project folder and renaming it so that it is easy to find (for example, if your project is called MyProject then you could use something like clone_MyProject).\n\nLoad your newly cloned project.\n\nFrom the Help menu, select Reset Packages to defaults.\n\nDepending on the size of your project, this might take a few minutes.\n\nCheck that it successfully reset the packages. If so, you can perform the operation safely on the original project.\n\nPackage installation fails\n\nIf you are trying to install a new package from the registry and it is not working, it might be due to permission problems.\n\nYou must have full permissions on the cache folder:\n\nWindows: C:\\Users\\yourname\\AppData\\Local\\Unity\\cache\n\nmacOS: ~/Library/Unity/cache\n\nLinux: ~/.config/unity3d/cache\n\nIt might be a problem with the network. Check your firewall and proxy settings.\n\nSometimes institutional environments, such as schools, government offices, or network-protected workplaces set up proxy servers to control traffic between the network and the Internet, and use their own server certificates which are not recognized by Unity or the Package Manager. Talk to your network administrator.\n\nUnable to add package from Git URL\n\nRefer to Repository not found.\n\nInsufficient drive space\n\nIf your installation drive is out of space or low on space, consider changing the location of the package caches:\n\nTo change the global cache, refer to Customize the global cache location.\n\nTo change the asset package cache, refer to Customize the asset package cache location.\n\nPackage version has no signature\n\nThis message can appear when you fetch a Unity package from a scoped registry. Unity signs packages that it creates, except for older packages, which aren’t necessarily re-signed in later releases. If you copy an unsigned Unity package from a scoped registry to another registry, Package Manager can’t determine if the package content is safe and identical to the original package.\n\nIf you encounter this message, try these solutions:\n\nUse another version of the package.\n\nFetch the Unity package from the Unity Registry.\n\nIf you own the scoped registry, make sure you copy the newest version of the package from the Unity Registry.\n\nPackage version doesn’t have a valid signature\n\nPackages have a signature to ensure that the content wasn’t changed before or during transit. An invalid signature typically occurs in the following situations:\n\nSomeone published the package with modifications on their own registry.\n\nAn error occurred while transferring the file to the end user.\n\nIn both cases, Package Manager considers the package to be potentially malicious.\n\nWhen you encounter an invalid signature, you can try to install a different version of the package. You should also avoid using Unity packages from a registry other than the Unity Registry.\n\nIf you are sharing a Unity package that contains a fix, consider using a Git URL or embedding the package in your project.\n\nNo ‘git’ executable was found\n\nIf you try to install a package from a git URL, a message similar to this appears:\n\nCannot perform upm operation: Unable to add package [https://github.example.com/myuser/myrepository.git]: No 'git' executable was found. Please install Git on your system and restart Unity [NotFound] UnityEditor.EditorApplication:Internal_CallUpdateFunctions()\n\ngit-lfs: command not found\n\nIf you are trying to download a package that uses Git LFS (Large File Storage), you might see this error message:\n\nError when executing git command. git-lfs filter-process: command not found.\n\nThis indicates that Git LFS is probably not installed on your computer. To make sure, you could test it on the command line:\n\ngit lfs --version\n\nIf you see something like this, Git LFS is installed:\n\ngit-lfs/2.8.0 (GitHub; darwin amd64; go 1.12.7)\n\nOtherwise, you can install it by following the Bitbucket GitHub instructions.\n\nRepository not found\n\nIf the Package Manager can’t locate the repository you specified, the Unity Console displays an error message:\n\nCannot perform upm operation: Unable to add package [https://mycompany.github.com/gitproject/com.mycompany.mypackage.git]: Error when executing git command. fatal: repository 'https://mycompany.github.com/gitproject/com.mycompany.mypackage.git/' not found [NotFound] UnityEditor.EditorApplication:Internal_CallUpdateFunctions() (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorApplication.cs:310)\n\nCheck your spelling. To make sure you are using the correct URL, go to the repository’s page and copy the URL from the Clone button:\n\nClick the button to the right of the URL on GitHub (A) or GitLab (B) to copy the URL to your clipboard.\n\nIf the location of the repository is correct, there might be another problem with the URL:\n\nIf you are targeting a specific revision, make sure your revision comes last. For example:\n\nhttps://github.example.com/myuser/myrepository1.git#revision\n\nIf you are targeting a revision and the package is not at the root, make sure the path query parameter precedes the revision anchor. For example:\n\nhttps://github.example.com/myuser/myrepository.git?path=/example/folder#v1.2.3\n\nIf the location of the repository and URL are correct, check your PATH system environment variable. Make sure the PATH variable includes entries for the Git cmd directory (Windows) and the Git bin directory (Windows, macOS). Package Manager processes require these entries in the PATH variable.\n\nCould not read Username: terminal prompts disabled\n\nIf you are trying to install a package from a private repository that requires authentication, a message similar to this one appears in the Unity Console:\n\nCannot perform upm operation: Unable to add package [https://mycompany.github.com/gitproject/com.mycompany.mypackage.git]: Error when executing git command. fatal: could not read Username for 'https://mycompany.github.com': terminal prompts disabled [NotFound] UnityEditor.EditorApplication:Internal_CallUpdateFunctions() (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorApplication.cs:310)\n\nThis message is likely due to the fact that Package Manager does not provide an interactive terminal or dialog where you can enter your username and password for HTTP, or your passphrase to unlock your SSH key:\n\nWith HTTP(S), every time you log onto BitBucket, GitHub, or GitLab you need to enter your username and password in a terminal or a dialog box. However, the Package Manager does not provide an interactive terminal or dialog where you can enter your username and password for HTTP(S).\n\nTo bypass this, use one of the workarounds suggested in Solutions for HTTPS.\n\nSSH uses a pair of public and private SSH keys. You can add your public SSH key to Bitbucket, GitHub, or GitLab and then access repositories without having to enter a username and password.\n\nHowever, if you have set up a passphrase to keep your SSH key safe, you still have to enter that passphrase in a terminal or a dialog box in order to authorize your key. In that case, you can use an SSH agent that can unlock your SSH key to authenticate with the Package Manager on your behalf.\n\nSolutions for HTTPS\n\nThe Package Manager does not provide an interactive terminal or dialog where you can enter your HTTP(S) username and password. To bypass this, use one of these workarounds:\n\nUse a credential manager (Git Credential Manager for Windows or OSXKeyChain). Credential managers handle sending the password without having to use a terminal or a command prompt.\n\nUse git-credentials from a terminal or command prompt, then launch the Hub from the same terminal so that Unity has access to the cached or stored credentials.\n\nUse SSH to authenticate instead. If you set up your SSH key without a passphrase, the Package Manager doesn’t have to decrypt it to authenticate with the Git server. If you decide to use a passphrase for added security, you can use the ssh-agent on either macOS or Windows to get around the authentication problem.\n\nSolutions for SSH\n\nIf you use the SSH protocol to install a package by Git URL, you might get an authentication error from Git. This typically happens when you set up a private SSH key on your local computer that is protected by a passphrase.\n\nThe solution to this problem is to set up an SSH agent that can unlock your SSH key to authenticate with the Package Manager on your behalf. Follow the instructions in the section that corresponds to your operating system:\n\nSetting up OpenSSH for Windows\n\nAdding SSH keys to your SSH Agent for macOS\n\nSetting up OpenSSH for Windows\n\nThe native Windows OpenSSH version of the ssh-agent works better than the version available by default with Git for Windows. This procedure explains how to set up the OpenSSH client and add your key to its ssh-agent. If you are using Git for Windows, you can also prioritize the native Windows OpenSSH over the Git for Windows SSH agent:\n\nMake sure the OpenSSH Client is installed. To do this, search for it in the Windows Settings Optional features window (Start > Settings, then search for “Optional features”). This applies to Windows 10+.\n\nCheck your %PATH% environment variable to make sure the native Windows OpenSSH location appears (for example, C:\\WINDOWS\\System32\\OpenSSH\\).\n\nNote: If you’re already using Git for Windows, make sure the native Windows OpenSSH location appears before the Git for Windows SSH location in your %PATH% variable. This ensures that Windows uses the native Windows OpenSSH agent over the Git for Windows SSH agent.\n\nIn a PowerShell terminal, start the ssh-agent process and make sure it starts automatically:\n\n# Set the ssh-agent service to start automatically and manually start it now Get-Service ssh-agent | Set-Service -StartupType Automatic # Run the ssh-agent process to start the ssh-agent service ssh-agent\n\nImport your key into the ssh-agent. To do this, run ssh-add on the command line and then follow the instructions. By default, the agent adds the %USERPROFILE%\\.ssh\\id_rsa key and prompts you for the password.\n\n# Import the key ssh-add\n\nTo use a different key, you can specify it as an argument:\n\n# Set the ssh-agent service to start automatically and manually start it now ssh-add <your-secure-ssh-key-name>\n\nIf you can’t remember the name of your key, use the following command to list your keys:\n\nssh-add -l\n\nIf you installed Git for Windows, reset the %GIT-SSH% environment variable to make sure that Git always uses the native Windows OpenSSH version of the ssh-agent:\n\n[Environment]::SetEnvironmentVariable(\"GIT_SSH\", \"$((Get-Command ssh).Source)\", [System.EnvironmentVariableTarget]::User)\n\nAdding SSH keys to your SSH Agent for macOS\n\nUse the ssh-add command to add your SSH keys to the ssh-agent running on your macOS system. The command parameter you use depends on your version of macOS:\n\nPrior to macOS 12, use:\n\nssh-add -K ~/.ssh/<your-secure-ssh-key-name>\n\nStarting with macOS 12, use:\n\nssh-add --apple-use-keychain ~/.ssh/<your-secure-ssh-key-name>\n\nAfter you run this command, the terminal asks for the password to unlock your SSH key and then adds it to the macOS keychain. However, once you restart your system, every key stored in the ssh-agent is reset.\n\nTo make sure you don’t need to re-enter your password after you restart your system, open the ~/.ssh/config file (or create one if you don’t find it), and add the following:\n\nHost * UseKeychain yes AddKeysToAgent yes IdentityFile ~/.ssh/<your-secure-ssh-key-name>\n\nRestart your computer to apply these changes.\n\nCan’t update Git version\n\nIf you are trying to update your Git dependencyThe Package Manager retrieves Git dependencies from a Git repository directly rather than from a package registry. Git dependencies use a Git URL reference instead of a version, and there’s no guarantee about the package quality, stability, validity, or even whether the version stated in its package.json file respects Semantic Versioning rules with regards to officially published releases of this package. More info\n\nSee in Glossary to a newer version from the repository, but it’s not working, it’s probably because your Git dependency is locked. If you want to update your Git dependency to a newer version from the repository, use the Add package from git URL button and enter a Git URL. For more information, refer to Locked Git dependencies.\n\n‘Failed to parse http response’ in My Assets context\n\nIf you get the following message in the Console window when you try to download an asset package from the Asset Store, there might be a problem with your asset package cache:\n\n[PackageManager] Error Failed to parse response. UnityEditor.AsyncHTTPClient![:D](https://forum.unity.com/styles/default/xenforo/clear.png)one(State, Int32)\n\nTo solve this problem, delete all downloaded assets from the Location of downloaded asset package files and then try to download the assets again.\n\nWarning: If your project contains a lot of asset data, it might take a lot of time and bandwidth to re-download everything.\n\nMissing ‘My Registries’ in the Package Manager window\n\nNot all registry providers are compatible with Unity’s Package Manager. If the package registry server you added does not implement the /-/v1/search or /-/all endpoints, your scoped registry is not compatible with Unity’s Package Manager, and doesn’t appear in the My Registries context in the Package Manager window.\n\nMissing MonoBehaviour errors\n\nWhile building, if there are a lot of errors about Missing Behavior, the UnityLinker might be mistakenly stripping out a component that it thinks is unreferenced. It often does this because the stripping level is too aggressive. For example, if you have a prefabAn asset type that allows you to store a GameObject complete with components and properties. The prefab acts as a template from which you can create new object instances in the scene. More info\n\nSee in Glossary in an AssetBundle that references the SpriteShape component in the 2D SpriteShape package, the object might be missing and might generate compiler warnings.\n\nTo fix this, you can either lower the stripping level for the UnityLinker or declare the package’s assemblies inside the link.xml file in order to preserve them from being stripped:\n\n<linker> <assembly fullname=\"Unity.2D.SpriteShape.Runtime\" preserve=\"all\"/> <assembly fullname=\"Unity.2D.Common.Runtime\" preserve=\"all\"/> </linker>\n\nFor more information on stripping levels and the UnityLinker, refer to Managed code stripping.\n\nLoading error for hostfxr.dll on Windows"
    }
}