{
    "id": "dbpedia_8584_2",
    "rank": 74,
    "data": {
        "url": "https://honk.sigxcpu.org/con/tags/planetdebian/",
        "read_more_link": "",
        "language": "en",
        "title": "Colors of Noise: Entries Tagged planetdebian",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/style-refresh.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/phosh-swipe.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/phosh-plugin.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/phosh-plugin-prefs.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/stf-prefs.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/fbd-prefs.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/phoshi.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/phosh-ticket.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/phosh-tickets.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/prizren.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/confy.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/puremaps.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/ambient-sunlight.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/pdfpc-talk.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/pdfpc-mobile.png",
            "https://honk.sigxcpu.org/con/images/overview2.png",
            "https://honk.sigxcpu.org/con/images/lockscreen.png",
            "https://honk.sigxcpu.org/con/images/overview.png",
            "https://honk.sigxcpu.org/con/images/session.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/krb5-auth-dialog-header-bar.png",
            "https://honk.sigxcpu.org/con/tags/planetdebian/images/krb5-auth-dialog-no-header-bar.png",
            "https://honk.sigxcpu.org/con/images/7th-dgm.jpg",
            "https://honk.sigxcpu.org/con/images/6th-dgm.jpg",
            "https://honk.sigxcpu.org/con/images/gtk3default.png",
            "https://honk.sigxcpu.org/con/images/gtk3touch.png",
            "https://honk.sigxcpu.org/con/images/osk.png",
            "https://honk.sigxcpu.org/con/images/nm-iodine-config.png",
            "https://honk.sigxcpu.org/con/images/ppm-topup.png",
            "https://honk.sigxcpu.org/con/images/ppm-icon.png",
            "https://honk.sigxcpu.org/con/images/ppm.png",
            "https://honk.sigxcpu.org/con/xml.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "I wanted to look back at what changed in phosh in 2022 and figured I could share it with you. I'll be focusing on things very close to the mobile shell, for a broader overview see Evangelos upcoming FOSDEM talk.\n\nSome numbers\n\nWe're usually aiming for a phosh release at the end of each month. In 2022 We did 10 releases like that, 7 major releases (bumping the middle version number) and three betas. We skipped the April and November releases. We also did one bug fix relesae out of line (bumping the last bit of the version number). I hope we can keep that cadence in 2023 as it allows us to get changes to users in a timely fashion (thus closing usability gaps as early as possible) as well as giving distributions a way to plan ahead. Ideally we'd not skip any release but sometimes real life just interferes.\n\nThose releases contain code contributions from about 20 different people and translations from about 30 translators. These numbers are roughly the same as 2021 which is great. Thanks everyone!\n\nIn phosh's git repository we had a bit over 730 non-merge commits (roughly 2 per day), which is about 10% less than in 2021. Looking closer this is easily compensated by commits to phoc (which needed quite some work for the gestures) and phosh-mobile-settings which didn't exist in 2021.\n\nUser visible features\n\nMost notable new features are likely the swipe gestures for top and bottom bar, the possibility to use the quick settings on the lock screen as well as the style refresh driven by Sam Hewitt that e.g. touched the modal dialogs (but also sliders, dialpads, etc):\n\nWe also added the possibility to have custom widgets via loadable plugins on the lock screen so the user can decide which information should be available. We currently ship plugins to show\n\ninformation on upcoming calendar events\n\nemergency contact information\n\nPDFs like bus or train tickets\n\nthe current month (as hello world like plugin to get started)\n\nThese are maintained within phosh's source tree although out of tree plugins should be doable too.\n\nThere's a settings application (the above mentioned phosh-mobile-settings) to enable these. It also allows those plugins to have individual preferences:\n\nSpeaking of configurability: Scale-to-fit settings (to work around applications that don't fit the screen) and haptic/led feedback are now configurable without resorting to the command line:\n\nWe can also have device specific settings which helps to temporarily accumulate special workaround without affecting other phones.\n\nOther user visible features include the ability to shuffle the digits on the lockscreen's keypad, a VPN quick settings, improved screenshot support and automatic high contrast theme switching when in bright sunlight (based on ambient sensor readings) as shown here.\n\nAs mentioned above Evangelos will talk at FOSDEM 2023 about the broader ecosystem improvements including GNOME, GTK, wlroots, phoc, feedbackd, ModemManager, mmsd, NetworkManager and many others without phosh wouldn't be possible.\n\nWhat else\n\nAs I wanted a T-shirt for Debconf 2022 in Prizren so I created a logo heavily inspired by those cute tiger images you often see in Southeast Asia. Based on that I also made a first batch of stickers mostly distributed at FrOSCon 2022:\n\nThat's it for 2022. If you want to get involved into phosh testing, development or documentation then just drop by in the matrix room.\n\nSince people are sometimes slightly surprised that you can go onto a multi week trip with a smartphone running free sofware so only I wanted to share some impressions from my recent trip to Prizren/Kosovo to attend Debconf 22 using a Librem 5. It's a mix of things that happend and bits that got improved to hopefully make things more fun to use. And, yes, there won't be any big surprises like being stranded without the ability to do phone calls in this read because there weren't and there shouldn't be.\n\nAfter two online versions Debconf 22 (the annual Debian Conference) took place in Prizren / Kosovo this year and I sure wanted to go. Looking for options I settled for a train trip to Vienna, to meet there with friends and continue the trip via bus to Zagreb, then switching to a final 11h direct bus to Prizren.\n\nWhen preparing for the trip and making sure my Librem 5 phone has all the needed documents I noticed that there will be quite some PDFs to show until I arrive in Kosovo: train ticket, bus ticket, hotel reservation, and so on. While that works by tapping unlocking the phone, opening the file browser, navigating to the folder with the PDFs and showing it via evince this looked like a lot of steps to repeat. Can't we have that information on the Phone Shell's lockscreen?\n\nThis was a good opportunity to see if the upcoming plugin infrastructure for the lock screen (initially meant to allow for a plugin to show upcoming events) was flexible enough, so I used some leisure time on the train to poke at this and just before I reached Vienna I was able to use it for the first time. It was the very last check of that ticket, it also was a bit of cheating since I didn't present the ticket on the phone itself but from phosh (the phones graphical shell) running on my laptop but still.\n\nThis was possible since phosh is written in GTK and so I could just leverage evince's EvView. Unfortunately the hotel check in didn't want to see any documents â¹.\n\nFor the next day I moved the code over to the Librem 5 and (being a bit nervous as the queue to get on the bus was quite long) could happily check into the Flixbus by presenting the barcode to the barcode reader via the Librem 5's lockscreen.\n\nWhen switching to the bus to Prizren I didn't get to use that feature again as we bought the tickets at a counter but we got a nice krem banana after entering the bus - they're not filled with jelly, but krem - a real Kosovo must eat!).\n\nAlthough it was a rather long trip we had frequent breaks and I'd certainly take the same route again. Here's a photo of Prizren taken on the Librem 5 without any additional postprocessing:\n\nWhat about seeing the conference schedule on the phone? Confy(a conferences schedule viewer using GTK and libhandy) to the rescue:\n\nSince Debian's confy maintainer was around too, confy saw a bunch of improvements over the conference.\n\nFor getting around Puremaps(an application to display maps and show routing instructions) was very helpful, here geolocating me in Prizren via GPS:\n\nPuremaps currently isn't packaged in Debian but there's work onging to fix that (I used the flatpak for the moment).\n\nWe got ourselves sim cards for the local phone network. For some reason mine wouldn't work (other sim cards from the same operator worked in my phone but this one just wouldn't). So we went to the sim card shop and the guy there was perfectly able to operate the Librem 5 without further explanation (including making calls, sending USSD codes to query balance, â¦). The sim card problem turned out to be a problem on the operator side and after a couple of days they got it working.\n\nWe had nice, sunny weather about all the time. That made me switch between high contrast mode (to read things in bright sunlight) and normal mode (e.g. in conference rooms) on the phone quite often. Thankfully we have a ambient light sensor in the phone so we can make that automatic.\n\nSee here for a video.\n\nJathan kicked off a DebianOnMobile sprint during the conference where we were able to improve several aspects of mobile support in Debian and on Friday I had the chance to give a talk about the state of Debian on smartphones. pdf-presenter-console is a great tool for this as it can display the current slide together with additional notes. I needed some hacks to make it fit the phone screen but hopefully we figure out a way to have this by default.\n\nI had two great weeks in Prizren. Many thanks to the organizers of Debconf 22 - I really enjoyed the conference.\n\nFor a slightly more up to date version see here\n\nphosh is graphical shell for mobile, touch based devices like smart phones. It's the default graphical shell on Purism's Librem 5 (and that's where it came to life) but projects like postmarketOS, Mobian and Debian have picked it up putting it into use on other devices as well and contributing patches.\n\nThis post is meant as a short overview how things are tied together so further posts can provide more details.\n\nA PHone SHell\n\nAs mobile shell phosh provides the interface components commonly found on mobile devices to\n\nlaunch applications\n\nswitch between running applications and close them\n\nlock and unlock the screen\n\ndisplay status information (e.g. network connectivity, battery level)\n\nprovide quick access to things like torch or Bluetooth\n\nshow notifications\n\nIt uses GObject object system and GTK to build up the user interface components. Mobile specific patterns are brought in via libhandy.\n\nSince phosh is meant to blend into GNOME as seamlessly as possible it uses the common interfaces present there via D-Bus like org.gnome.Screensaver or org.gnome.keyring.SystemPrompter and retrieves user configuration like keybindings via GSettings from preexisting schema.\n\nThe components of a running graphical session roughly look like this:\n\nThe blue boxes are the very same found on GNOME desktop sessions while the white ones are currently only found on phones.\n\nfeedbackd is explained quickly: It's used for providing haptic or visual user feedback and makes your phone rumble and blink when applications (or the shell) want to notify the user about certain events like incoming phone calls or new messages. What about phoc and squeekboard?\n\nphoc and squeekboard\n\nAlthough some stacks combine the graphical shell with the display server (the component responsible for drawing applications and handling user input) this isn't the case for phosh. phosh relies on a Wayland compositor to be present for that. Keeping shell and compositor apart has some advantages like being able to restart the shell without affecting other applications but also adds the need for some additional communication between compositor and shell. This additional communication is implemented via Wayland protocols. The Wayland compositor used with phosh is called phoc for PHone Compositor.\n\nOne of these additional protocols is wlr-layer-shell. It allows the shell to reserve space on the screen that is not used by other applications and allows it to draw things like the top and bottom bar or lock screen. Other protocols used by phosh (and hence implemented by phoc) are wlr-output-management to get information on and control properties of monitors or wlr-foreign-toplevel-management to get information about other windows on the display. The later is used to allow to switch between running applications.\n\nHowever these (and other) Wayland protocols are not implemented in phoc from scratch. phoc leverages the wlroots library for that. The library also handles many other compositor parts like interacting with the video and input hardware.\n\nThe details on how phoc actually puts things up on the screen deserves a separate post. For the moment it's sufficient to note that phosh requires a Wayland compositor like phoc.\n\nWe've not talked about entering text without a physical keyboard yet - phosh itself does not handle that either. squeekboard is the on screen keyboard for text (and emoji) input. It again uses Wayland protocols to talk to the Wayland compositor and it's (like phosh) a component that wants exclusive access to some areas of the screen (where the keyboard is drawn) and hence leverages the layer-shell protocol. Very roughly speaking it turns touch input in that area into text and sends that back to the compositor that then passes it back to the application that currently gets the text input. squeekboard's main author dcz has some more details here.\n\nThe session\n\nSo how does the graphical session in the picture above come into existence? As this is meant to be close to a regular GNOME session it's done via gnome-session that is invoked somewhat like:\n\nphoc -E 'gnome-session --session=phosh'\n\nSo the compositor phoc is started up, launches gnome-session which then looks at phosh.session for the session's components. These are phosh, squeekboard and gnome-settings-daemon. These then either connect to already running services via D-Bus (e.g. NetworkManager, ModemManager, ...) or spawn them via D-Bus activation when required (e.g. feedbackd).\n\nCalling conventions\n\nSo when talking about phosh it's good to keep several things apart:\n\nphosh - the graphical shell\n\nphoc - the compositor\n\nsqueekboard - the on screen keyboard\n\nphosh.session: The session that ties these and GNOME together\n\nOn top of that people sometimes refer to 'Phosh' as the software collection consisting of the above plus more components from GNOME (Settings, Contacs, Clocks, Weather, Evince, ...) and components that currently aren't part of GNOME but adapt to small screen sizes, use the same technologies and are needed to make a phone fun to use e.g. Geary for email, Calls for making phone calls and Chats for SMS handling.\n\nSince just overloading the term Phosh is confusing GNOME/Phosh Mobile Environment or Phosh Mobile Environment have been used to describe the above collection of software and I've contacted GNOME on how to name this properly, to not infringe on the GNOME trademark but also give proper credit and hopefully being able to move things upstream that can live upstream.\n\nThat's it for a start. phosh's development documentation can be browsed here but is also available in the source code.\n\nBesides the projects mentioned above credits go to Purism for allowing me and others to work on the above and other parts related to moving Free Software on mobile Linux forward.\n\ntl;dr: If you want to be sure your application will be displayed with the correct icon under different Wayland compositors make sure that your GApplication (or GtkApplication) uses\n\ng_set_prgname(your_g_application_id);\n\non GTK+3. On GTK+4 this is handled for you.\n\nDetails: While working on touch based window switching for the Librem5 I noticed that lots of the GNOME application did not end up with a proper icon when using g_desktop_app_info_new (desktop_id). The desktop_id is determined from the Wayland xdg surface's app_id as specified by in Wayland's xdg-shell protocol.\n\nThe protocol says:\n\nThe compositor shell will try to group application surfaces together by their app ID. As a best practice, it is suggested to select app ID's that match the basename of the application's .desktop file. For example, \"org.freedesktop.FooViewer\" where the .desktop file is \"org.freedesktop.FooViewer.desktop\".\n\nIt's even more explicit about the relation of the app_id to the D-Bus service name:\n\nFor D-Bus activatable applications, the app ID is used as the D-Bus service name.\n\nSo why does this currently fail? It's because GTK+3 historically uses g_get_prgname() to set the app_id and this defaults to application's basename. But what we rather want is\n\ng_application_id == D-Bus service name == $(basename desktop_file_path .desktop) == xdg app_id\n\nThere were patches by Jonas Ã dahl to fix this but those were partially reverted since it broke existing applications. Now with GTK+4 around the corner we can fix this. See the migration docs.\n\nThis will also allow us to get rid of all the rename-desktop-file in the flatpak manifests too.\n\n(The reason why this currently works in gnome-shell is because there's a private protocoll between GTK+ and GNOME Shell that (among other things) works around this).\n\nUpdate: to check what app_id Wayland is seeing use:\n\nWAYLAND_DEBUG=1 your_program |& grep 'xdg_toplevel@[0-9]\\+\\.set_app_id'\n\nMore sandboxing\n\nWhen working on untrusted code or data it's impossible to predict what happens when one does a:\n\nbundle install --path=vendor\n\nor\n\nnpm install\n\nDoes this phone out your private SSH and GPG keys? Does a\n\nevince Downloads/justdownloaded.pdf\n\ntry to exploit the PDF viewer? While you can run stuff in separate virtual machines this can get cumbersome. libvirt-sandbox to the rescue! It allows to sandbox applications using libvirt's virtualization drivers. It took us a couple of years (The ITP is from 2012) but we finally have it in Debian's NEW queue. When libvirt-sandbox creates a sandbox it uses your root filesystem mounted read only by default so you have access to all installed programs (this can be changed with the --root option though). It can use either libvirt's QEMU or LXC drivers. We're using the later in the examples below:\n\nSo in order to make sure the above bundler call has no access to your $HOME you can use:\n\nsudo virt-sandbox \\ -m ram:/tmp=10M \\ -m ram:$HOME=10M \\ -m ram:/var/run/screen=1M \\ -m host-bind:/path/to/your/ruby-stuff=/path/to/your/ruby-stuff \\ -c lxc:/// \\ -S $USER \\ -n rubydev-sandbox \\ -N dhcp,source=default \\ /bin/bash\n\nThis will make your $HOME unaccessible by mounting a tmpfs over it and using separate network, ipc, mount, pid and utc namespaces allowing you to invoke bundler with less worries. /path/to/your/ruby-stuff is bind mounted read-write into the sandbox so you can change files there. Bundler can fetch new gems using libvirt's default network connection.\n\nAnd for the PDF case:\n\nsudo virt-sandbox \\ -m ram:$HOME=10M \\ -m ram:/dev/shm=10M \\ -m host-bind:$HOME/Downloads=$HOME/Downloads \\ -c lxc:/// \\ -S $USER \\ -n evince-sandbox \\ --env=\"DISPLAY=:0\" \\ --env=\"XAUTHORITY=$XAUTHORITY\" \\ /usr/bin/evince Downloads/justdownloaded.pdf\n\nNote that the above example shares /tmp with the sandbox in order to give it access to the X11 socket. A better isolation can probably be achieved using xpra or xvnc but I haven't looked into this yet.\n\nBesides the command line program virt-sandbox there's also the library libvirt-sandbox which makes it simpler to build new sandboxing applications. We're not yet shipping virt-sandbox-service (a tool to provision sandboxed system services) in the Debian packages since it's RPM distro specific. Help on porting this to Debian is greatly appreciated.\n\nOne of the replies to the post about Debian's last groupware meeting was from Patrick Ohly of syncevolution fame pointing out that syncevolution already implements calendar autodetection for CalDAV calendars as described in draft-daboo-srv-caldav-10.\n\nWhile looking at the code I noticed that there's a backend for the N900s calendar by Ove KÃ¥ven as well.\n\nWhen I tried Ove's latest package on my N900 it lead to an immediate crash when doing a:\n\nsyncevolution --print-items target-config@webdav calendar\n\nAccording to Patrick the bug was supposed to be fixed in recent versions so I set up scratchbox and built a newer git snapshot for maemo (sources). This wouldn't crash but didn't show up any items either. It turned out to be a minor bug in calypso returning no content type for REPORT queries which resulted in libneon discarding the whole reply (now already fixed in calypso upstream).\n\nWith this out of the way setting up synchronisation is quiet simple:\n\n# Configuration CALDAV_SERVER=192.168.0.10 syncevolution --configure username=<username> password=<password> \\ calendar/backend=caldav calendar/database=https://${CALDAV_SERVER}:5233/private/my_calendar \\ target-config@webdav calendar syncevolution --configure --template SyncEvolution_Client sync=none syncURL=local://@webdav username= password= webdav syncevolution --configure sync=two-way backend=calendar webdav calendar\n\nYou should then be able to print the items on the local (N900) and from the remote (CalDAV server) end:\n\n# This lists the current calendar items on the server syncevolution --print-items target-config@webdav calendar # This lists the current calendar items on the N900 syncevolution --print-items @default calendar\n\nAnd from there on sync away:\n\n# initial slow sync syncevolution --sync slow webdav # from there on syncevolution webdav\n\nThe syncevolution source code has great documentation about debugging problems (e.g. src/backends/webdav/README). So check that in case you run into problems. The tl;dr version is\n\nSYNCEVOLUTION_DEBUG=1 src/syncevolution loglevel=10 --print-items target-config@webdav calendar\n\nto debug CalDAV related problems. In case you need to run syncevoluton from source be sure to set these beforehand:\n\nexport SYNCEVOLUTION_TEMPLATE_DIR=$PWD/src/templates/ export SYNCEVOLUTION_XML_CONFIG_DIR=$PWD/src/syncevo/configs/\n\nOn the CalDAV side I used current Calypso git which (with some additional minor fixes) now also interoperates nicely with Iceowl/Icowl-Extension aka Sunbird/Lightning on the desktop side. There's also an ITP for it. So it'll hopefully end up in Debian soon.\n\nUpdate: in order to do ssl verification with syncevolution/libneon you have to put the CAs certificate to /etc/ssl/certs on the N900 and do a\n\nc_rehash /etc/ssl/certs\n\notherwise syncevolution won't ve able to verify the server's certificate.\n\nDebian's libvirt in unstable finally passes the Technology Compatibility Kit (libvirt-tck) for qemu:///system:\n\nFiles=59, Tests=1579, 315 wallclock secs ( 0.77 usr 1.02 sys + 31.40 cusr 10.14 csys = 43.33 CPU) Result: PASS\n\nWe're running libvirt's internal test suite since 0.9.0 but this doesn't launch any real virtual machines to check things like suspend, resume, snapshotting, migration and it doesn't create storage pools and volumes or networks. This means a lot of testing was done manually with each release.\n\nlibvirt-tck provides a framework to perform these kinds of integration testing between libvirt and it's drivers, comes with hundreds of testcases already and it's easy to set up since it's available in experimental:\n\napt-get install -t experimental libvirt-tck\n\nEdit /etc/libvirt-tck/default.cfg if you don't want to use the default connection URI. Then just run libvirt-tck:\n\nlibvirt-tck\n\nSince this is supposed to stress libvirtd and the hypervisor and since it creates and deletes storage pools, networks and virtual machines it's recommended to run this on a dedicated system to make sure the tests don't blow away any precious config.\n\nIf a test fails one can debug that single test using:\n\nLIBVIRT_TCK_CONFIG=/etc/libvirt-tck/default.cfg prove --verbose /usr/share/libvirt-tck/tests/hooks/051-daemon-hook.t\n\nThis already revealed errors in our package like a missing parted build dependency breaking the creation of disk based storage pools, bugs in libvirt, crashes in QEMU and minor errors in the test suite itself. We're currently cheating a bit since the tests for hooks and nwfilter are currently disabled due to license problems with the used Perl modules.\n\nlibvirt-tck can easily be integrated into Jenkins since it can now use libtap-formatter-junit-perl to generate JUnit XML. To do so simply configure a free-style software project to execute these commands:\n\nrm -f libvirt-tck.xml sudo libvirt-tck --timer --format junit --force > libvirt-tck.xml\n\nallow Jenkins to run libvirt-tck as root\n\njenkins ALL=(ALL) NOPASSWD: /usr/bin/libvirt-tck --timer --format junit --force\n\nand configure it to publish a JUnit test result report.\n\nCurrently I'm only running the tests for qemu:///system so any help running and debugging this for LXC, VirtualBox or XEN is very welcome.\n\nMany thanks go to Salvatore Bonaccorso for packaging the missing Perl modules needed by libvirt-tck."
    }
}