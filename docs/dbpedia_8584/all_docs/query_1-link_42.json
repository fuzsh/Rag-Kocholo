{
    "id": "dbpedia_8584_1",
    "rank": 42,
    "data": {
        "url": "https://irwinkwan.com/projects/",
        "read_more_link": "",
        "language": "en",
        "title": "Projects",
        "top_image": "https://irwinkwan.com/wp-content/uploads/2021/12/coder_toolstrip_small.png",
        "meta_img": "https://irwinkwan.com/wp-content/uploads/2021/12/coder_toolstrip_small.png",
        "images": [
            "https://irwinkwan.com/wp-content/uploads/2021/12/roll_code_persp.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/coder_toolstrip_small.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/roll_code_persp.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/embedded-coder-software-500x500-1.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/code_mapping_inports_sc.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/xxrtwecintro_report.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/matlab-coder.jpg",
            "https://irwinkwan.com/wp-content/uploads/2021/12/euclidean_define_input_types_varsize.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/euclidean_generate_dialog.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/euclidean_generate_code_success.png",
            "https://irwinkwan.com/wp-content/uploads/2021/12/coder-report.png",
            "https://irwinkwan.com/wp-content/uploads/2013/04/gidgetscreenshot.png?w=300",
            "https://irwinkwan.com/wp-content/uploads/2013/04/ideagarden-tooltips.png?w=300",
            "https://irwinkwan.com/wp-content/uploads/2013/04/a569bfc8c7f318c32c0196d90dba29d4.jpg?w=298",
            "https://irwinkwan.com/wp-content/uploads/2013/04/frontcover.jpg?w=300",
            "https://irwinkwan.com/wp-content/uploads/2013/08/irwin-picture2.jpg",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://s2.wp.com/i/logo/wpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [
            "https://www.youtube.com/embed/truuj8qnnWs?version=3&rel=1&showsearch=0&showinfo=1&iv_load_policy=1&fs=1&hl=en&autohide=2&wmode=transparent"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2013-04-29T21:34:57+00:00",
        "summary": "",
        "meta_description": "Industry Projects Embedded Coder®: Generate C/C++ code from Simulink, visual block diagram language Embedded Coder® generates readable, compact, and fast C and C++ code for embedded processors used in mass production. It extends MATLAB Coder™ and Simulink Coder™ with advanced optimizations for precise control of the generated functions, files, and data. (mathworks.com) I've been working…",
        "meta_lang": "en",
        "meta_favicon": "https://s1.wp.com/i/favicon.ico",
        "meta_site_name": "Irwin Kwan",
        "canonical_link": "https://irwinkwan.com/projects/",
        "text": "Industry Projects\n\nEmbedded Coder®: Generate C/C++ code from Simulink, visual block diagram language\n\nEmbedded Coder® generates readable, compact, and fast C and C++ code for embedded processors used in mass production. It extends MATLAB Coder™ and Simulink Coder™ with advanced optimizations for precise control of the generated functions, files, and data. (mathworks.com)\n\nI’ve been working with the Embedded Coder in Simulink for years, incorporating usability features and capabilities including the Embedded Coder Toolstrip and the Embedded Coder Dictionary. Embedded Coder requires me to present advanced software engineering concepts in a simple and usable way while still enabling them to gain the scalability and performance they need.\n\nTechniques applied\n\nWorkflow analysis and diagramming\n\nContextual interviewing\n\nCase study research\n\nModeling enterprise processes\n\nOrganization research\n\nIterative design sessions\n\nPrototyping (using Axure RP)\n\nMATLAB Coder™: Generate C/C++ code that can be used in embedded systems from MATLAB\n\nMATLAB Coder™ generates C and C++ code from MATLAB® code for a variety of hardware platforms, from desktop systems to embedded hardware. It supports most of the MATLAB language and a wide range of toolboxes. (mathworks.com)\n\nMATLAB Coder users want their code to convert seamlessly from MATLAB to C and C++. I’ve worked on making the workflow simple and easy while also giving users transparency and flexibility into how their code works. I’ve worked on the MATLAB Coder Code Generation Report, on their automated fixed-point conversion tools, and on improvements to both GUI and command-line features.\n\nTechniques Used\n\nWorkflow analysis and diagramming\n\nContextual interviewing\n\nLightweight journey mapping\n\nIterative design sessions\n\nBraindrawing\n\nPrototyping (using Axure RP and Figma)\n\nOne-Click Testing\n\nUsability testing\n\nTechniques I use for user research and design include:\n\nContextual interviewing\n\nQuestionnaires and surveys\n\nWorkflow analysis\n\nLightweight journey mapping\n\nCase study research\n\nOrganizational structure and social network analysis\n\nDesign workshops\n\nThe tools for researching, understanding, and documenting user workflows and user-facing designs are Axure RP and Figma. I also enjoy using PowerPoint and pencil/paper.\n\nAxure RP allows the user to test and demonstrate prototypes with a surprisingly high amount of interactivity, which helps development teams understand what designs look like and how they affect user workflows. I also perform user testing with lightweight Axure RP mockups.\n\nFigma enables very rapid drawing of all kinds of applications through the use of layouts, components, and variants, which lets me rapidly iterate on ideas. I have used Figma for designing and evaluating projects for Embedded Coder and MATLAB Coder.\n\nResearch Projects\n\nGidget\n\nGidget is a debugging game designed to be provided to teenagers. It is a game where you control a robot using an imperative programming language and help the robot rescue animals and clean up toxic waste. I have been helping Andy Ko and Michael Lee with development behind Gidget. Information has been posted at the University of Washington and some information in the game is available in academic publications.\n\nGidget and the Idea Garden\n\nAs part of our involvement in Gidget, we are implementing Idea Garden features into Gidget. The Idea Garden subscribes to a philosophy of “helping end users help themselves” by trying to help them overcome barriers by instilling them with curiosity and the desire to experiment rather than trying to help them overcome barriers by sweeping them under the rug.\n\nThe Idea Garden generally takes the form of tooltips that appear in the context of a person completing a task and provides encouragement, strategy information, and ways to learn. It differs from other intelligent tutoring systems in that the Idea Garden is meant not to be used only in the context of course exercises, but also in the context of someone doing a task without the explicit intention to learn.\n\nInformation Foraging in Software Engineering\n\nWe investigate how software developers build software using an HCI theory, Information Foraging Theory. The theory is a theory of human behaviour that describes how people forage for information. They are predicted to forage in a way to provide maximum benefit for minimum value and to make decisions based on input from the environment that affects this cost/benefit ratio. This theory is applicable to software engineering because software engineering is a very information-seeking intensive activity. People spend a lot of time looking for things—whether it’s “What does this variable do?” down to, “Where can I start investigating this problem?”\n\nBy using this lens, we can investigate how developers identify what information they seek to answer certain questions, how they seek this information, and how to arrange development environments to help developers find the information that they need when they need it.\n\nPersonal Programming Projects\n\nThe Painter’s Cat (Ludum Dare Page; Github)\n\nA personal project. The Painter’s Cat is a 2D video game that I made in a real-time period of 48 hours. I’ve written about the experience here, here, and here.\n\nYou’re a cat in a dream, and you’re able to paint black, Mondrian lines against a backdrop of musical notes. Avoid the colored squares and try to “bound” the colors to score points.\n\nThis was my first experience using PyGame and the first time I’ve “finished” writing a game. As I did the entire game in a weekend, the source code is really dirty and the controls and difficulty are a little off.\n\nDevelopment Environment\n\nI work primarily on Mac OS X using a combination of TextMate and the command line. However, after doing Ludum Dare 26 and coding a lot in a very short period of time, I’m becoming a little unhappy because it doesn’t have a lot of programming support for Python (no interactive syntax checking, no tooltips for APIs, indentation issues, no auto-reformatting, the Run Task box stays alive after I quit so I end up with a thousand Run Task windows, etc). I’m thinking of migrating to something else.\n\nProgramming Languages\n\nI’ve learned a lot of programming languages, mostly in the imperative style. Here’s what I’ve been using recently.\n\nPython\n\nJavascript, though I’m still not entirely comfortable with it yet. I could use with looking at a lot more examples of clean Javascript code.\n\nR (a Matlab-like environment for statistics)\n\nRuby\n\nI probably enjoy using Ruby the most out of these languages, but I tend to use Python a lot because its third-party module support is a little more mature.\n\nMusic Projects"
    }
}