{
    "id": "dbpedia_8584_1",
    "rank": 98,
    "data": {
        "url": "https://www.kali.org/tools/gnuradio/",
        "read_more_link": "",
        "language": "en",
        "title": "Kali Linux Tools",
        "top_image": "https://www.kali.org/images/kali-logo.svg",
        "meta_img": "https://www.kali.org/images/kali-logo.svg",
        "images": [
            "https://www.kali.org/images/kali-tools-icon-missing.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "kali",
            "linux",
            "kalilinux",
            "Penetration",
            "Testing",
            "Penetration Testing",
            "Distribution",
            "Advanced"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-05-28T00:00:00+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.kali.org/images/favicon.png",
        "meta_site_name": "Kali Linux",
        "canonical_link": "https://www.kali.org/tools/gnuradio/",
        "text": "gnuradio\n\nGNU Radio provides signal processing blocks to implement software radios. It can be used with readily-available low-cost external RF hardware to create software-defined radios, or without hardware in a simulation-like environment. It is widely used in hobbyist, academic and commercial environments to support both wireless communications research and real-world radio systems.\n\nGNU Radio applications are primarily written using the Python programming language, while the supplied performance-critical signal processing path is implemented in C++ using processor floating-point extensions, where available. Thus, the developer is able to implement real-time, high-throughput radio systems in a simple-to-use, rapid-application-development environment.\n\nWhile not primarily a simulation tool, GNU Radio does support development of signal processing algorithms using pre-recorded or generated data, avoiding the need for actual RF hardware.\n\nThis package contains the gnuradio-companion, a graphical tool for creating signal flow graphs and generating flow-graph source code. Also included are a variety of tools and utility programs.\n\nInstalled size: 22.27 MB\n\nHow to install: sudo apt install gnuradio\n\nDependencies:\n\ngnome-terminal | x-terminal-emulator\n\nlibboost-program-options1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgmp10\n\nlibgnuradio-analog3.10.10\n\nlibgnuradio-audio3.10.10\n\nlibgnuradio-blocks3.10.10\n\nlibgnuradio-channels3.10.10\n\nlibgnuradio-digital3.10.10\n\nlibgnuradio-dtv3.10.10\n\nlibgnuradio-fec3.10.10\n\nlibgnuradio-fft3.10.10\n\nlibgnuradio-filter3.10.10\n\nlibgnuradio-iio3.10.10\n\nlibgnuradio-network3.10.10\n\nlibgnuradio-pdu3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-qtgui3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibgnuradio-soapy3.10.10\n\nlibgnuradio-trellis3.10.10\n\nlibgnuradio-uhd3.10.10\n\nlibgnuradio-video-sdl3.10.10\n\nlibgnuradio-vocoder3.10.10\n\nlibgnuradio-wavelet3.10.10\n\nlibgnuradio-zeromq3.10.10\n\nlibjs-mathjax\n\nlibqt5core5t64\n\nlibqt5widgets5t64\n\nlibsoapysdr0.8\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibuhd4.6.0t64\n\nlibvolk-bin\n\nlibvolk3.1t64\n\npython3\n\npython3\n\npython3-click\n\npython3-click-plugins\n\npython3-gi\n\npython3-gi-cairo\n\npython3-jsonschema\n\npython3-lxml\n\npython3-mako\n\npython3-numpy\n\npython3-numpy-abi9\n\npython3-opengl\n\npython3-packaging\n\npython3-pygccxml\n\npython3-pyqt5\n\npython3-pyqtgraph\n\npython3-schema\n\npython3-thrift\n\npython3-yaml\n\npython3-zmq\n\ndial_tone\n\nDial tone example\n\nroot@kali:~# man dial_tone DIAL_TONE(1) User Commands DIAL_TONE(1) NAME dial_tone - dial tone example DESCRIPTION GnuRadio Dial Tone example OPTIONS None Play a Dial Tone on the sound card output device. SEE ALSO The c++ gnuradio example programs are in /usr/bin. There are also many Python and GnuRadio Companion examples in /usr/share/gnuradio/exam- ples/... tags_demo(1) uhd_rx_cfile(1) uhd_rx_nogui(1) uhd_siggen(1) uhd_siggen_gui(1) DIAL_TONE 3.10.10.0 2024-04-22 DIAL_TONE(1)\n\ndisplay_qt\n\nA Gnu Radio Example gr-qtgui\n\nroot@kali:~# man display_qt DISPLAY_QT(1) User Commands DISPLAY_QT(1) NAME display_qt - a Gnu Radio Example gr-qtgui DESCRIPTION Display a GUI using QT of a sine wave in noise. Example program instantiates a GNU Radio flow graph using a sine wave source, a noise source, and gr-qtgui blocks. This new (in version 3.7.10) example shows how to build a C++ only QT based application. SEE ALSO http://gnuradio.squarespace.com/examples/tag/qt display_qt 3.10.10.0 2024-04-22 DISPLAY_QT(1)\n\ngnuradio-companion\n\nGNU Radio Companion (GRC) is a graphical tool for creating GNU Radio signal flowgraphs.\n\nroot@kali:~# gnuradio-companion -h usage: gnuradio-companion [-h] [--log {debug,info,warning,error,critical}] [--qt | --gtk] [flow_graphs ...] GNU Radio Companion (3.10.10.0) - This program is part of GNU Radio. GRC comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it. positional arguments: flow_graphs options: -h, --help show this help message and exit --log {debug,info,warning,error,critical} Framework: --qt GNU Radio Companion (QT) --gtk GNU Radio Companion (GTK)\n\ngnuradio-config-info\n\nShow details on installed GNU radio\n\nroot@kali:~# gnuradio-config-info -h Program options: gnuradio-config-info [options]: -h [ --help ] print help message --print-all print all information --prefix print GNU Radio installation prefix --sysconfdir print GNU Radio system configuration directory --prefsdir print GNU Radio preferences directory --userprefsdir print GNU Radio user preferences directory --prefs print GNU Radio preferences --builddate print GNU Radio build date (RFC2822 format) --enabled-components print GNU Radio build time enabled components --cc print GNU Radio C compiler version --cxx print GNU Radio C++ compiler version --cflags print GNU Radio CFLAGS -v [ --version ] print GNU Radio version --pybind print pybind11 version used in this build\n\ngr-ctrlport-monitor\n\nGnuradio control port gui\n\nroot@kali:~# gr-ctrlport-monitor -h usage: gr-ctrlport-monitor [-h] [host] port GNU Radio Control Port Monitor positional arguments: host host name or IP port port options: -h, --help show this help message and exit\n\ngr-perf-monitorx\n\nGnuradio control port gui\n\nroot@kali:~# gr-perf-monitorx -h usage: gr-perf-monitorx [-h] [host] port GNU Radio Performance Monitor positional arguments: host host name or IP port port options: -h, --help show this help message and exit\n\ngr_filter_design\n\nGUI for creating filters for GNU Radio\n\nroot@kali:~# gr_filter_design -h Usage: gr_filter_design: [options] (input_filename) Options: -h, --help show this help message and exit\n\ngr_modtool\n\nThe swiss army knife of module editing\n\nroot@kali:~# gr_modtool --help Usage: gr_modtool [OPTIONS] COMMAND [ARGS]... A tool for editing GNU Radio out-of-tree modules. Options: --help Show this message and exit. Commands: add Adds a block to the out-of-tree module. bind Generate Python bindings for GR block disable Disable selected block in module. info Return information about a given module makeyaml Generate YAML files for GRC block bindings. newmod Create new empty module, use add to add blocks. rename Rename a block inside a module. rm Remove a block from a module. update Update the grc bindings for a block Manipulate with GNU Radio modules source code tree. Call it without options to run specified command interactively\n\ngr_plot\n\nDisplay time series of samples from a file\n\nroot@kali:~# gr_plot -h usage: gr_plot [-h] [-d {complex64,float32,uint32,int32,uint16,int16,uint8,int8}] [-B BLOCK] [-s START] [-R SAMPLE_RATE] FILE [FILE ...] Takes a GNU Radio binary file and displays the samples versus time. You can set the block size to specify how many points to read in at a time and the start position in the file. By default, the system assumes a sample rate of 1, so in time, each sample is plotted versus the sample number. To set a true time axis, set the sample rate (-R or --sample-rate) to the sample rate used when capturing the samples. positional arguments: FILE Input file with samples options: -h, --help show this help message and exit -d {complex64,float32,uint32,int32,uint16,int16,uint8,int8}, --data-type {complex64,float32,uint32,int32,uint16,int16,uint8,int8} Specify the data type [default='complex64'] -B BLOCK, --block BLOCK Specify the block size [default=1000] -s START, --start START Specify where to start in the file [default=0] -R SAMPLE_RATE, --sample-rate SAMPLE_RATE Set the sampler rate of the data [default=1.0]\n\ngr_plot_const\n\nConstellation plot of I&Q data using GNU Radio\n\nroot@kali:~# gr_plot_const -h usage: gr_plot_const [-h] [-B BLOCK] [-s START] [-R SAMPLE_RATE] FILE Takes a GNU Radio complex binary file and displays the I&Q data versus time and the constellation plot (I vs. Q). You can set the block size to specify how many points to read in at a time and the start position in the file. By default, the system assumes a sample rate of 1, so in time, each sample is plotted versus the sample number. To set a true time axis, set the sample rate (-R or --sample-rate) to the sample rate used when capturing the samples. positional arguments: FILE Input file with complex samples options: -h, --help show this help message and exit -B BLOCK, --block BLOCK Specify the block size [default=1000] -s START, --start START Specify where to start in the file [default=0] -R SAMPLE_RATE, --sample-rate SAMPLE_RATE Set the sampler rate of the data [default=1.0]\n\ngr_plot_fft\n\nFrequency domain GNU Radio plotting\n\nroot@kali:~# gr_plot_fft -h usage: gr_plot_fft [-h] [-d {complex64,float32,uint32,int32,uint16,int16,uint8,int8}] [-B BLOCK] [-s START] [-R SAMPLE_RATE] FILE Takes a GNU Radio complex binary file and displays the I&Q data versus time as well as the frequency domain (FFT) plot. The y-axis values are plotted assuming volts as the amplitude of the I&Q streams and converted into dBm in the frequency domain (the 1/N power adjustment out of the FFT is performed internally). The script plots a certain block of data at a time, specified on the command line as -B or --block. This value defaults to 1000. The start position in the file can be set by specifying -s or --start and defaults to 0 (the start of the file). By default, the system assumes a sample rate of 1, so in time, each sample is plotted versus the sample number. To set a true time and frequency axis, set the sample rate (-R or --sample-rate) to the sample rate used when capturing the samples. positional arguments: FILE Input file with samples options: -h, --help show this help message and exit -d {complex64,float32,uint32,int32,uint16,int16,uint8,int8}, --data-type {complex64,float32,uint32,int32,uint16,int16,uint8,int8} Specify the data type [default='complex64'] -B BLOCK, --block BLOCK Specify the block size [default=1000] -s START, --start START Specify where to start in the file [default=0] -R SAMPLE_RATE, --sample-rate SAMPLE_RATE Set the sampler rate of the data [default=1.0]\n\ngr_plot_iq\n\nPlot complex binary I&Q data versus time using GNU Radio\n\nroot@kali:~# gr_plot_iq -h usage: gr_plot_iq [-h] [-B BLOCK] [-s START] [-R SAMPLE_RATE] FILE Takes a GNU Radio complex binary file and displays the I&Q data versus time. You can set the block size to specify how many points to read in at a time and the start position in the file. By default, the system assumes a sample rate of 1, so in time, each sample is plotted versus the sample number. To set a true time axis, set the sample rate (-R or --sample-rate) to the sample rate used when capturing the samples. positional arguments: FILE Input file with complex samples options: -h, --help show this help message and exit -B BLOCK, --block BLOCK Specify the block size [default=1000] -s START, --start START Specify where to start in the file [default=0] -R SAMPLE_RATE, --sample-rate SAMPLE_RATE Set the sampler rate of the data [default=1.0]\n\ngr_plot_psd\n\nGNU Radio power spectrum plotting\n\nroot@kali:~# gr_plot_psd -h usage: gr_plot_psd [-h] [-d {complex64,float32,int32,uint32,int16,uint16,int8,uint8}] [-B BLOCK] [-s START] [-R SAMPLE_RATE] [--psd-size PSD_SIZE] [--spec-size SPEC_SIZE] [-S] FILE Takes a GNU Radio binary file (with specified data type using --data-type) and displays the I&Q data versus time as well as the power spectral density (PSD) plot. The y-axis values are plotted assuming volts as the amplitude of the I&Q streams and converted into dBm in the frequency domain (the 1/N power adjustment out of the FFT is performed internally). The script plots a certain block of data at a time, specified on the command line as -B or --block. The start position in the file can be set by specifying -s or --start and defaults to 0 (the start of the file). By default, the system assumes a sample rate of 1, so in time, each sample is plotted versus the sample number. To set a true time and frequency axis, set the sample rate (-R or --sample-rate) to the sample rate used when capturing the samples. Finally, the size of the FFT to use for the PSD and spectrogram plots can be set independently with --psd-size and --spec-size, respectively. The spectrogram plot does not display by default and is turned on with -S or --enable-spec. positional arguments: FILE Input file with samples options: -h, --help show this help message and exit -d {complex64,float32,int32,uint32,int16,uint16,int8,uint8}, --data-type {complex64,float32,int32,uint32,int16,uint16,int8,uint8} Specify the data type [default='complex64'] -B BLOCK, --block BLOCK Specify the block size [default=8192] -s START, --start START Specify where to start in the file [default=0] -R SAMPLE_RATE, --sample-rate SAMPLE_RATE Set the sampler rate of the data [default=1.0] --psd-size PSD_SIZE Set the size of the PSD FFT [default=1024] --spec-size SPEC_SIZE Set the size of the spectrogram FFT [default=256] -S, --enable-spec Turn on plotting the spectrogram [default=False]\n\ngr_plot_qt\n\nPlot data using Qt graphics and GNU Radio\n\nroot@kali:~# man gr_plot_qt GR_PLOT_QT(1) User Commands GR_PLOT_QT(1) NAME gr_plot_qt - plot data using Qt graphics and GNU Radio DESCRIPTION Fancy plot display. SEE ALSO gr_plot_char(1) gr_plot_const(1) gr_plot_fft_c(1) gr_plot_fft_f(1) gr_plot_float(1) gr_plot_int(1) gr_plot_iq(1) gr_plot_psd_c(1) gr_plot_psd_f(1) gr_plot_qt(1) gr_plot_short(1) gr_plot_qt 3.10.10.0 2024-04-22 GR_PLOT_QT(1)\n\ngr_read_file_metadata\n\nA Gnu Radio Utility\n\nroot@kali:~# gr_read_file_metadata -h usage: gr_read_file_metadata [-h] [-D] FILE Read in a GNU Radio file with meta data, extracts the header and prints it. positional arguments: FILE Input file options: -h, --help show this help message and exit -D, --detached Used if header is detached.\n\ngrcc\n\nGnu Radio Companion Compiler\n\nroot@kali:~# grcc -h usage: grcc [-h] [-o DIR] [-u] [-r] GRC_FILE [GRC_FILE ...] Compile a GRC file (.grc) into a GNU Radio Python program and run it. positional arguments: GRC_FILE .grc file to compile options: -h, --help show this help message and exit -o DIR, --output DIR Output directory for compiled program [default=.] -u, --user-lib-dir Output to default hier_block library (overwrites -o) -r, --run Run the program after compiling [default=False]\n\npolar_channel_construction\n\nGnu Radio Polar Configurator\n\nroot@kali:~# polar_channel_construction -h POLAR code channel constructor commandline tool usage: polar_channel_construction [-h] [-c {BEC,AWGN}] [-b BLOCK_SIZE] [-s DESIGN_SNR] [-k MU] options: -h, --help show this help message and exit -c {BEC,AWGN}, --channel {BEC,AWGN} specify channel, currently BEC or AWGN (default='BEC') -b BLOCK_SIZE, --blocksize BLOCK_SIZE specify block size of polar code (default=16) -s DESIGN_SNR, --design-snr DESIGN_SNR specify design SNR of polar code (default=0.0) -k MU, --mu MU specify block size of polar code (default=2)\n\nGNURadio and UHD tags example\n\nroot@kali:~# tags_demo --help UHD Tags Demo Allowed options: --help help message --addr arg the device address in string format --rate arg (=1000000) the sample rate in samples per second --freq arg (=10000000) the center frequency in Hz --burst arg (=0.10000000000000001) the duration of each burst in seconds --idle arg (=0.050000000000000003) idle time between bursts in seconds --length_tag arg the length tag key name The tags sink demo block will print USRP source time stamps. The tags source demo block will send bursts to the USRP sink. Look at the USRP output on a scope to see the timed bursts.\n\nuhd_fft\n\nDisplay spectrum from UHD receiver\n\nroot@kali:~# uhd_fft -h usage: uhd_fft [-h] [-a ARGS] [--spec SPEC] [-A ANTENNA] [-s SAMP_RATE] [-g GAIN] [-p POWER] -f FREQ [--lo-offset LO_OFFSET] [-c CHANNELS] [--lo-export LO_EXPORT] [--lo-source LO_SOURCE] [--otw-format {sc16,sc12,sc8}] [--stream-args STREAM_ARGS] [-v] [--show-async-msg] [--sync {default,pps,auto}] [--clock-source CLOCK_SOURCE] [--time-source TIME_SOURCE] [--fft-size FFT_SIZE] [--fft-average {off,low,medium,high}] [--avg-alpha AVG_ALPHA] [--update-rate UPDATE_RATE] [--phase-relations] UHD FFT options: -h, --help show this help message and exit USRP Arguments: -a ARGS, --args ARGS UHD device address args --spec SPEC Subdevice(s) of UHD device where appropriate. Use a comma-separated list to set different boards to different specs. -A ANTENNA, --antenna ANTENNA Select Rx antenna(s) where appropriate -s SAMP_RATE, --samp-rate SAMP_RATE Sample rate -g GAIN, --gain GAIN Gain (default is midpoint) -p POWER, --power POWER (Reference) power level (in dBm). Not supported by all devices (see UHD manual). Will fail if not supported. Precludes --gain. Behaviour may differ between applications. -f FREQ, --freq FREQ Set carrier frequency to FREQ --lo-offset LO_OFFSET Set daughterboard LO offset to OFFSET [default=hw default] -c CHANNELS, --channels CHANNELS Select Rx Channels --lo-export LO_EXPORT Set TwinRX LO export {None, True, False} for each channel with a comma-separated list. None skips a channel. --lo-source LO_SOURCE Set TwinRX LO source {None, internal, companion, external} for each channel with a comma-separated list. None skips this channel. --otw-format {sc16,sc12,sc8} Choose over-the-wire data format --stream-args STREAM_ARGS Set additional stream arguments -v, --verbose Use verbose console output --show-async-msg Show asynchronous message notifications from UHD --sync {default,pps,auto} Set to 'pps' to sync devices to PPS --clock-source CLOCK_SOURCE Set the clock source; typically 'internal', 'external' or 'gpsdo' --time-source TIME_SOURCE Set the time source UHD FFT Arguments: --fft-size FFT_SIZE Set number of FFT bins --fft-average {off,low,medium,high} Set FFT averaging --avg-alpha AVG_ALPHA Specify FFT average alpha (overrides --fft-average) --update-rate UPDATE_RATE Set GUI widget update period in seconds --phase-relations Plot relative phases between multiple channels\n\nuhd_rx_cfile\n\nSave UHD received data\n\nroot@kali:~# uhd_rx_cfile -h Usage: uhd_rx_cfile: [options] output_filename Options: -h, --help show this help message and exit -a ARGS, --args=ARGS UHD device address args , [default=] --spec=SPEC Subdevice of UHD device where appropriate -c CHANNELS, --channels=CHANNELS Select receive channels -A ANTENNA, --antenna=ANTENNA Select Rx Antenna(s) where appropriate. Use a comma- delimited list if different channels have different antenna ports. -r SAMP_RATE, --samp-rate=SAMP_RATE Set sample rate (bandwidth) [default=1000000.0] -f FREQ, --freq=FREQ Set frequency to FREQ --lo-offset=LO_OFFSET Set daughterboard LO offset to OFFSET [default=hw default] -g GAIN, --gain=GAIN Set gain in dB (default is midpoint) --normalized-gain Specify gain as normalized value (in [0, 1]) -m, --metafile output metadata to file [default=False] -s, --output-shorts Output interleaved shorts instead of complex floats -N NSAMPLES, --nsamples=NSAMPLES Number of samples to collect [default=+inf] -v, --verbose verbose output --wire-format=WIRE_FORMAT Set wire format from USRP [default=sc16 --stream-args=STREAM_ARGS Set additional stream arguments --show-async-msg Show asynchronous message notifications from UHD [default=False] --sync=SYNC Set to 'pps' to sync devices to PPS instead of internal.\n\nuhd_rx_nogui\n\nGNU Radio receiver\n\nroot@kali:~# uhd_rx_nogui -h usage: uhd_rx_nogui [-h] [-a ARGS] [--spec SPEC] [-A ANTENNA] [-f Hz] [-c Hz] [-g dB] [-m TYPE] [-o RATE] [-r dB] [-p FREQ] [-O AUDIO_OUTPUT] [--show-async-msg] options: -h, --help show this help message and exit -a ARGS, --args ARGS UHD device address args --spec SPEC Subdevice of UHD device where appropriate -A ANTENNA, --antenna ANTENNA select Rx Antenna where appropriate -f Hz, --frequency Hz set receive frequency to Hz -c Hz, --calibration Hz set frequency offset to Hz -g dB, --gain dB set RF gain [default is midpoint] -m TYPE, --modulation TYPE set modulation type (AM,FM,WFM) -o RATE, --output-rate RATE set audio output rate to RATE -r dB, --rf-squelch dB set RF squelch to dB [default=-50.0] -p FREQ, --ctcss FREQ set CTCSS squelch to FREQ -O AUDIO_OUTPUT, --audio-output AUDIO_OUTPUT pcm device name. E.g., hw:0,0 or surround51 or /dev/dsp --show-async-msg Show asynchronous message notifications from UHD\n\nuhd_siggen\n\nSignal Generator using UHD hardware\n\nroot@kali:~# uhd_siggen -h usage: uhd_siggen [-h] [-a ARGS] [--spec SPEC] [-A ANTENNA] [-s SAMP_RATE] [-g GAIN] [-p POWER] -f FREQ [--lo-offset LO_OFFSET] [-c CHANNELS] [--lo-export LO_EXPORT] [--lo-source LO_SOURCE] [--otw-format {sc16,sc12,sc8}] [--stream-args STREAM_ARGS] [-v] [--show-async-msg] [--sync {default,pps,auto}] [--clock-source CLOCK_SOURCE] [--time-source TIME_SOURCE] [-m AMPL] [-x WAVEFORM_FREQ] [-y WAVEFORM2_FREQ] [--sine] [--const] [--offset OFFSET] [--gaussian] [--uniform] [--2tone] [--sweep] USRP Signal Generator. options: -h, --help show this help message and exit USRP Arguments: -a ARGS, --args ARGS UHD device address args --spec SPEC Subdevice(s) of UHD device where appropriate. Use a comma-separated list to set different boards to different specs. -A ANTENNA, --antenna ANTENNA Select Tx antenna(s) where appropriate -s SAMP_RATE, --samp-rate SAMP_RATE Sample rate -g GAIN, --gain GAIN Gain (default is midpoint) -p POWER, --power POWER (Reference) power level (in dBm). Not supported by all devices (see UHD manual). Will fail if not supported. Precludes --gain. Behaviour may differ between applications. -f FREQ, --freq FREQ Set carrier frequency to FREQ --lo-offset LO_OFFSET Set daughterboard LO offset to OFFSET [default=hw default] -c CHANNELS, --channels CHANNELS Select Tx Channels --lo-export LO_EXPORT Set TwinRX LO export {None, True, False} for each channel with a comma-separated list. None skips a channel. --lo-source LO_SOURCE Set TwinRX LO source {None, internal, companion, external} for each channel with a comma-separated list. None skips this channel. --otw-format {sc16,sc12,sc8} Choose over-the-wire data format --stream-args STREAM_ARGS Set additional stream arguments -v, --verbose Use verbose console output --show-async-msg Show asynchronous message notifications from UHD --sync {default,pps,auto} Set to 'pps' to sync devices to PPS --clock-source CLOCK_SOURCE Set the clock source; typically 'internal', 'external' or 'gpsdo' --time-source TIME_SOURCE Set the time source Siggen Arguments: -m AMPL, --amplitude AMPL Set output amplitude to AMPL (0.0-1.0). Note that if --power is given, UHD will attempt to match the output power regardless of the amplitude. -x WAVEFORM_FREQ, --waveform-freq WAVEFORM_FREQ Set baseband waveform frequency to FREQ -y WAVEFORM2_FREQ, --waveform2-freq WAVEFORM2_FREQ Set 2nd waveform frequency to FREQ --sine Generate a carrier modulated by a complex sine wave --const Generate a constant carrier --offset OFFSET Set waveform phase offset to OFFSET --gaussian Generate Gaussian random output --uniform Generate Uniform random output --2tone Generate Two Tone signal for IMD testing --sweep Generate a swept sine wave\n\nuhd_siggen_gui\n\nGNU Radio signal generator using UHD hardware\n\nroot@kali:~# uhd_siggen_gui -h usage: uhd_siggen_gui [-h] [-a ARGS] [--spec SPEC] [-A ANTENNA] [-s SAMP_RATE] [-g GAIN] [-p POWER] -f FREQ [--lo-offset LO_OFFSET] [-c CHANNELS] [--lo-export LO_EXPORT] [--lo-source LO_SOURCE] [--otw-format {sc16,sc12,sc8}] [--stream-args STREAM_ARGS] [-v] [--show-async-msg] [--sync {default,pps,auto}] [--clock-source CLOCK_SOURCE] [--time-source TIME_SOURCE] [-m AMPL] [-x WAVEFORM_FREQ] [-y WAVEFORM2_FREQ] [--sine] [--const] [--offset OFFSET] [--gaussian] [--uniform] [--2tone] [--sweep] [-q] USRP Signal Generator. options: -h, --help show this help message and exit USRP Arguments: -a ARGS, --args ARGS UHD device address args --spec SPEC Subdevice(s) of UHD device where appropriate. Use a comma-separated list to set different boards to different specs. -A ANTENNA, --antenna ANTENNA Select Tx antenna(s) where appropriate -s SAMP_RATE, --samp-rate SAMP_RATE Sample rate -g GAIN, --gain GAIN Gain (default is midpoint) -p POWER, --power POWER (Reference) power level (in dBm). Not supported by all devices (see UHD manual). Will fail if not supported. Precludes --gain. Behaviour may differ between applications. -f FREQ, --freq FREQ Set carrier frequency to FREQ --lo-offset LO_OFFSET Set daughterboard LO offset to OFFSET [default=hw default] -c CHANNELS, --channels CHANNELS Select Tx Channels --lo-export LO_EXPORT Set TwinRX LO export {None, True, False} for each channel with a comma-separated list. None skips a channel. --lo-source LO_SOURCE Set TwinRX LO source {None, internal, companion, external} for each channel with a comma-separated list. None skips this channel. --otw-format {sc16,sc12,sc8} Choose over-the-wire data format --stream-args STREAM_ARGS Set additional stream arguments -v, --verbose Use verbose console output --show-async-msg Show asynchronous message notifications from UHD --sync {default,pps,auto} Set to 'pps' to sync devices to PPS --clock-source CLOCK_SOURCE Set the clock source; typically 'internal', 'external' or 'gpsdo' --time-source TIME_SOURCE Set the time source Siggen Arguments: -m AMPL, --amplitude AMPL Set output amplitude to AMPL (0.0-1.0). Note that if --power is given, UHD will attempt to match the output power regardless of the amplitude. -x WAVEFORM_FREQ, --waveform-freq WAVEFORM_FREQ Set baseband waveform frequency to FREQ -y WAVEFORM2_FREQ, --waveform2-freq WAVEFORM2_FREQ Set 2nd waveform frequency to FREQ --sine Generate a carrier modulated by a complex sine wave --const Generate a constant carrier --offset OFFSET Set waveform phase offset to OFFSET --gaussian Generate Gaussian random output --uniform Generate Uniform random output --2tone Generate Two Tone signal for IMD testing --sweep Generate a swept sine wave GUI Arguments: -q, --show-freq-sink Show QT Frequency Widget\n\ngnuradio-dev\n\nHeader files for the GNU Radio software defined radio system. Since GNU Radio is a framework for development of SDR applications, you are likely to need this installed.\n\nPart of the main gnuradio build.\n\nInstalled size: 2.58 MB\n\nHow to install: sudo apt install gnuradio-dev\n\nDependencies:\n\ngnuradio\n\nlibboost-date-time1.83-dev\n\nlibboost-filesystem1.83-dev\n\nlibboost-program-options1.83-dev\n\nlibboost-regex1.83-dev\n\nlibboost-system1.83-dev\n\nlibboost-test1.83-dev\n\nlibboost-thread1.83-dev\n\nlibcppunit-dev\n\nlibfftw3-dev\n\nlibgmp-dev\n\nlibgsm1-dev\n\nlibspdlog-dev\n\nlibthrift-dev\n\nlibvolk-dev\n\npybind11-dev\n\npython3-dev\n\ngnuradio-doc\n\nDocumentation for the GNU Radio software defined radio system in html and PDF form.\n\nHTML docs start file:///usr/share/doc/gnuradio-doc/html/index.html\n\nPDF docs in file:///usr/share/doc/gnuradio-doc/refman.pdf.gz\n\nPart of the main gnuradio build.\n\nInstalled size: 300.83 MB\n\nHow to install: sudo apt install gnuradio-doc\n\nDependencies:\n\nlibjs-mathjax\n\nlibgnuradio-analog3.10.10\n\nLibrary for handling analog signal processing functions. These functions are also in gnuradio-core. Part of the main gnuradio build.\n\nInstalled size: 666 KB\n\nHow to install: sudo apt install libgnuradio-analog3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-blocks3.10.10\n\nlibgnuradio-fft3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-audio3.10.10\n\nThis is the gr-audio library, used to connect to audio sources (mic-in) and sinks (speaker-out) ports on a computer. The underlying hardware driver is system and OS dependent and this module should automatically discover the correct one to use. Part of the main gnuradio build.\n\nInstalled size: 590 KB\n\nHow to install: sudo apt install libgnuradio-audio3.10.10\n\nDependencies:\n\nlibasound2t64\n\nlibboost-thread1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibjack-jackd2-0 | libjack-0.125\n\nlibportaudio2\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-blocks3.10.10\n\nSome non-signal processing blocks. These functions are also in gnuradio-core. Part of the main gnuradio build.\n\nInstalled size: 3.11 MB\n\nHow to install: sudo apt install libgnuradio-blocks3.10.10\n\nDependencies:\n\nlibboost-thread1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibsndfile1\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-channels3.10.10\n\nSome channel oriented processing blocks. These functions are also in gnuradio-core. Part of the main gnuradio build.\n\nInstalled size: 478 KB\n\nHow to install: sudo apt install libgnuradio-channels3.10.10\n\nDependencies:\n\nlibc6\n\nlibgcc-s1\n\nlibgnuradio-analog3.10.10\n\nlibgnuradio-blocks3.10.10\n\nlibgnuradio-filter3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-digital3.10.10\n\nAll the functions for doing digital modulation and demodulation, including bpsk, qpsk, gmsk and ofdm signals. Part of the main gnuradio build.\n\nInstalled size: 1.79 MB\n\nHow to install: sudo apt install libgnuradio-digital3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-analog3.10.10\n\nlibgnuradio-blocks3.10.10\n\nlibgnuradio-filter3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-dtv3.10.10\n\nATSC support, gr-atsc ported to a new framework, as well as DVB-S2, DVB-T, DVB-T2 digital video broadcast standards. Part of the main gnuradio build.\n\nInstalled size: 1.41 MB\n\nHow to install: sudo apt install libgnuradio-dtv3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-fec3.10.10\n\nlibgnuradio-fft3.10.10\n\nlibgnuradio-filter3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-fec3.10.10\n\nHandle forward error correction processing in gnuradio. Implements the GNU Radio FEC API, supporting encoders and decoders for no-op dummmy, repetition, and convolutional classes. Part of the main gnuradio build.\n\nInstalled size: 971 KB\n\nHow to install: sudo apt install libgnuradio-fec3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-blocks3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibgsl27\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-fft3.10.10\n\nLibrary for Fourier transform techniques used in gnuradio. Uses single precision FFT from libfftw3-single3. Part of the main gnuradio build.\n\nInstalled size: 326 KB\n\nHow to install: sudo apt install libgnuradio-fft3.10.10\n\nDependencies:\n\nlibc6\n\nlibfftw3-single3\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-filter3.10.10\n\nLibrary of filter blocks used in gnuradio. Implements FIR, IIR and FFT filters, as well as Polyphase filterbank and PFB arbitrary resampler methods. Part of the main gnuradio build.\n\nInstalled size: 1.04 MB\n\nHow to install: sudo apt install libgnuradio-filter3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-fft3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-iio3.10.10\n\nLibiio is a library that has been conceived to ease the development of applications interfacing Industrial Input/Output (IIO) devices through the IIO subsystem of the Linux kernel.\n\nThe IIO blocks for GnuRadio can be used to create flowgraphs that interface IIO devices through libiio.\n\nPart of the main gnuradio build.\n\nInstalled size: 578 KB\n\nHow to install: sudo apt install libgnuradio-iio3.10.10\n\nDependencies:\n\nlibad9361-0\n\nlibboost-thread1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibiio0\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-network3.10.10\n\nLibrary of blocks that implement UDP and TCP source and sink blocks supporting both IPv4 and IPv6. Part of the main gnuradio build.\n\nInstalled size: 662 KB\n\nHow to install: sudo apt install libgnuradio-network3.10.10\n\nDependencies:\n\nlibboost-thread1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-pdu3.10.10\n\nProtocol Data Units library provides signal processing blocks that operate on Protocol Data Unit format messages. Many such blocks are analogs of streaming API functionality. Part of the main gnuradio build.\n\nInstalled size: 674 KB\n\nHow to install: sudo apt install libgnuradio-pdu3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-pmt3.10.10\n\nPolymorphic Types are opaque data types that are designed as generic containers of data that can be safely passed around between blocks and threads in GNU Radio. Part of the main gnuradio build.\n\nInstalled size: 422 KB\n\nHow to install: sudo apt install libgnuradio-pmt3.10.10\n\nDependencies:\n\nlibc6\n\nlibgcc-s1\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-qtgui3.10.10\n\nQT-based graphical sinks for gnuradio applications. Implements opengl, raster and native plotting methods, and supports a QT Style Sheet (QSS) file to adjust the look. Part of the main gnuradio build.\n\nInstalled size: 1.90 MB\n\nHow to install: sudo apt install libgnuradio-qtgui3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-fft3.10.10\n\nlibgnuradio-filter3.10.10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibqt5core5t64\n\nlibqt5gui5t64 | libqt5gui5-gles\n\nlibqt5widgets5t64\n\nlibqwt-qt5-6\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibvolk3.1t64\n\nlibgnuradio-runtime3.10.10\n\nTop level component library. Defines core blocks. Handles settings for logging, performance counters, and control port. Part of the main gnuradio build.\n\nInstalled size: 2.10 MB\n\nHow to install: sudo apt install libgnuradio-runtime3.10.10\n\nDependencies:\n\nlibboost-program-options1.83.0\n\nlibboost-thread1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgmp10\n\nlibgnuradio-pmt3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibthrift-0.19.0t64\n\nlibunwind8\n\nlibvolk3.1t64\n\nlibgnuradio-soapy3.10.10\n\nSoapy hardware drivers using the SoapySDR driver framework. Part of the main gnuradio build.\n\nInstalled size: 462 KB\n\nHow to install: sudo apt install libgnuradio-soapy3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgmp10\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibsoapysdr0.8\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-trellis3.10.10\n\nLibrary for trellis coding modulation, including the Viterbi Algorithm, Concatenated Coding and Turbo Decoding based upon finite state machine (FSM) class. Part of the main gnuradio build.\n\nInstalled size: 1.00 MB\n\nHow to install: sudo apt install libgnuradio-trellis3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-uhd3.10.10\n\nThe gnuradio interface to the UHD library to connect to and send and receive data between to the Ettus Research, LLC product line - including the USRP family of software radio peripheral devices. Part of the main gnuradio build.\n\nInstalled size: 786 KB\n\nHow to install: sudo apt install libgnuradio-uhd3.10.10\n\nDependencies:\n\nlibboost-thread1.83.0\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibuhd4.6.0t64\n\nlibvolk3.1t64\n\nlibgnuradio-video-sdl3.10.10\n\nLibrary for handling SDL (Simple DirectMedia Layer) video data. Implements input and output blocks. Part of the main gnuradio build.\n\nInstalled size: 242 KB\n\nHow to install: sudo apt install libgnuradio-video-sdl3.10.10\n\nDependencies:\n\nlibc6\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibsdl1.2debian\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-vocoder3.10.10\n\nLibrary of vocoder blocks, including ulaw, alaw, gsm and codec2. Debian uses external libraries for gsm and codec2.\n\nPart of the main gnuradio build.\n\nInstalled size: 322 KB\n\nHow to install: sudo apt install libgnuradio-vocoder3.10.10\n\nDependencies:\n\nlibc6\n\nlibcodec2-1.2\n\nlibfmt9\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibgsm1\n\nlibspdlog1.12-fmt9\n\nlibstdc++6\n\nlibgnuradio-wavelet3.10.10\n\nLibrary of Daubechies wavelet function blocks. wvps computes the Wavelet Power Spectrum from a set of wavelet coefficients.\n\nPart of the main gnuradio build.\n\nInstalled size: 110 KB\n\nHow to install: sudo apt install libgnuradio-wavelet3.10.10\n\nDependencies:\n\nlibc6\n\nlibgcc-s1\n\nlibgnuradio-pmt3.10.10\n\nlibgnuradio-runtime3.10.10\n\nlibgsl27\n\nlibstdc++6\n\nlibgnuradio-zeromq3.10.10\n\n0MQ messaging library support. Provide network socket endpoints for gnuradio data and message streams. PUB/SUB, PUSH/PULL, REP/REQ models supported.\n\nPart of the main gnuradio build.\n\nInstalled size: 426 KB\n\nHow to install: sudo apt install libgnuradio-zeromq3.10.10"
    }
}