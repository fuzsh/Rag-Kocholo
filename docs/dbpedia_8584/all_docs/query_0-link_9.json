{
    "id": "dbpedia_8584_0",
    "rank": 9,
    "data": {
        "url": "https://github.com/coapp/coapp.org/blob/master/src/dynamic/tutorials/building-a-package.html.md",
        "read_more_link": "",
        "language": "en",
        "title": "coapp.org/src/dynamic/tutorials/building-a-package.html.md at master Â· coapp/coapp.org",
        "top_image": "https://opengraph.githubassets.com/89fd9a6899c4f3d99c16761dbbab1ba90968753a9300c62d686285de05d4ff4a/coapp/coapp.org",
        "meta_img": "https://opengraph.githubassets.com/89fd9a6899c4f3d99c16761dbbab1ba90968753a9300c62d686285de05d4ff4a/coapp/coapp.org",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Website. Contribute to coapp/coapp.org development by creating an account on GitHub.",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/coapp/coapp.org/blob/master/src/dynamic/tutorials/building-a-package.html.md",
        "text": "layout title version\n\narticle\n\nHow to Build a Package\n\n1.0\n\nThis tutorial tells you how to set up a CoApp build environment and how to create NuGet packages for your libraries and other software components.\n\nThe requirements to produce native NuGet packages using CoApp are as follows:\n\nWindows Vista, Windows 7, or Windows 8\n\nYou need these or later versions of Windows because you need Visual Studio 2012 and PowerShell 3.0\n\nVisual Studio 2012 or 2010\n\nPowerShell 3.0\n\nWindows 8 - Installed by default\n\nWindows 7 or Windows Vista - Install from http://www.microsoft.com/en-us/download/details.aspx?id=34595\n\nNuGet 2.5 or later\n\n2.5 Release Candidate : https://nuget.codeplex.com/releases/view/104451\n\nInstall the Visual Studio Integration component (V6)\n\nCoApp PowerShell Tools\n\nBeta : http://downloads.coapp.org/files/CoApp.Tools.Powershell.msi\n\nOptional:\n\nNotepad++ : http://notepad-plus-plus.org/download/v6.3.2.html\n\nLanguage File : http://downloads.coapp.org/files/autopackage.xml\n\nAutoPackage is the CoApp tool you use to create native NuGet packages. You get AutoPackage when you install the \"CoApp PowerShell Tools\" described above in Requirements. AutoPackage is a PowerShell module. It contains Powershell cmdlets that you can use from either the command line or batch files. The primary cmdlet used in this tutorial is:\n\nInstallation is simple -- as long as you have PowerShell 3.0 installed, just download and run the CoApp PowerShell tools MSI installer.\n\nThen, close that PowerShell Window, and open a new one.\n\nThis step is not needed on updates.\n\nUpdating the tools to the latest version\n\nOnce you have the CoApp PowerShell tools installed, you can update to the latest stable version:\n\nOr update to the latest beta version:\n\nInput to Write-NuGetPackage is an AutoPackage script that you must provide. AutoPackage scripts are written in a 'PropertySheet' domain-specific language similar to Cascading Style Sheets. Refer to the AutoPackage Script Format in the Reference tab of CoApp.org for a complete description of AutoPackage scripts.\n\nTogether, AutoPackage and AutoPackage scripts greatly simplify the package creation process by handling most of the complexity involved. The package creation process using AutoPackage is developer friendly and requires no XML file editing.\n\nThe C++ REST SDK provides a good example to demonstate the packaging process using CoApp. First step is to download and unpack the source code for the SDK, which you can find at\n\nhttp://downloads.coapp.org/files/CPP_Rest_SDK_Example.zip\n\nWhen you've finished the unpacking process, you'll see that the SDK comes in three variants one each for Visual Studio 2010, Visual Studio 2012 and the Windows Store Apps.\n\nTraverse down any of the variants and you'll find large numbers of header and library files. AutoPackage's reason for being is to manage all of these components for you during the packaging process.\n\nThe first thing we need to do is create the AutoPackage script. Use your editor and begin with two simple nodes. First the nuget node. This is our high-level node that defines everything we put into our NuGet package. The second is the nuspec node. Nuspec is the designation that the NuGet project uses to specify all of the metadata needed to build and manage a package.\n\nNow, let's begin filling in the metadata we need to define for the project. First we need to include basic information including identification (name, version), links (project, license, etc), description, summary, icon, and so on.\n\nA few things are worth noting in this early version of the AutoPackage script. First, quotes around strings are not necessary unless the string contains a comma or a semicolon. So, the following assignment is a valid alternative to the one in the example:\n\nSecond If you need to write a string the extends more than a single line, use the @\" .... \"; string literal. And finally, make sure you identify your package as native code as opposed to managed code. You do this by including \"native\" in the tag node definition as shown in the example. Making this designation helps users find your libraries more easily.\n\nNow that we've defined all of the basic metadata needed for the project, let's look at the complexity that is inherent in creating native packages. Almost all C/C++ libraries have many flavors depending on a large set of factors, such as the platforms you intend to target, whether you're building a debug or production release, what toolset you're targeting and so on. The following list shows some of the variables, that we refer to as pivots.\n\n* Platform : x86, x64, Arm ... * Configuration : Debug, Release * Toolset: VC11, VC10, VC9, ... VC6 * Linkage: dynamic, static, LTCG, SxS * Calling Convention: cdecl, stdcall * Application Type: Win8, Win8 phone, Desktop ... * Character Set : UTF8, UTF16, Unicode ...\n\nLet's look at a few of these pivots more closely. Linkage, for example: you can specify whether you want your output library to be a dynamic link type, which is a popular format, static, which is useful for some things, Link-Time Compiler Generated (LTCG), which is useful for improving performance using Profile-Guided Optimization, or Side-by-Side (SxS). Calling conventions are used less commonly now, but sometimes libraries are packaged using cdecl, stdcall or both. Application types include Windows 8 Server, Windows 8 Phone, and a variety of desktops. The point is, you can define as many pivots as you need to provide the widest usefulness of your packages.\n\nThe list of pivots is not a finite set, so AutoPackage is designed to let you define however many nodes you need to cover all the pivots of your particular packages. Just define all the nodes you need, specify the conditions for each build (i.e., what combination of pivot values to use), and AutoPackage handles everything else.\n\nYou can see the commonly handled configurations in the AutoPackage reference\n\nThe files node is what lets you specify the contents of your packages. So let's take a look at the AutoPackage script to see where the files node fits in the scheme of things.\n\nYou can see that it resides at the same level as the nuspec node. Where nuspec specifies the metadata for the NuGet packages, the files node specifies the contents. Now let's fill in the build variables we want to use to create our C++ REST SDK packages.\n\nThe files node is what lets you make sure all of your files are placed in the correct location, for example, all of your header files, all of your binaries, they all need to go into the correct location at the time of build and deployment.\n\nFirst, we'll define some location macros that will make the script more readable and easier to work with. With these macros, we're identifying that we want to create packages for the three SDKs supported by C++. Remember, these are the Windows Store App, the Visual Studio 2010 and the Visual Studio 2012 SDKs.\n\nNow let's gather all of the include files we need to conduct our builds. With some investigation, you'll see that the include files for all three SDKs are the same, so we only need to specify one of them.\n\nIn this case, all of the header files are located in the include directory itself. If they had been organized in folders underneath the include directory, you would need to specify this using '**' as shown in the following example:\n\nIf your project uses header files from multiple locations, you can also specify this in the include node as follows:\n\nHowever, for this tutorial, none of these additional designations is neccessary.\n\nNow, let's add a node to specify what documentation to include with the release:\n\nNext, we need to define the specific conditions for which we want to build. Here's where we return to the concept of pivots. For this example, let's start to build our packages to be deployed on x64 platforms, using the Visual Studio 2010 toolset and let's make our output a \"debug\" release for the project. These three conditions are the pivots for our first package. The following code example shows how to do this. Note that the variables $(Platform), $(PlatfromToolset), $(Configuration) shown in the initial comment correspond to environment variables used by Visual Studio and are not used directly in this script.\n\nIn the above segment, the conditional statement is defined by the line:\n\nFor this particular configuration, you can then set the locations for where to store the library, symbols and binary files for the package you're creating. In this example, we're instructing AutoPackage to ensure that the library file ${SDK_2010}lib\\x64\\Debug\\casablanca100.lib is stored in the proper lib directory. The same is true for the symbols file, which can later by uploaded to a symbols server, and the binary DLL file.\n\nLet go ahead now and specify all the remaining configurations for the Visual Studio 2010 family of packages. This means creating pivots for all the combinations of platforms and releases that can be built by Visual Studio 2010.\n\nNow let's do the same thing for all of the Visual Studio 2012 builds. Note in these examples that we've added the desktop pivot value which is for desktop (i.e., non-Windows RT) applications. The difference here is that under Visual Studio 2010, building for Windows RT isn't an option. The compilations are by default for the desktop. With Visual Studio 2012, you now have the choice of building for either the desktop or for Windows RT.\n\nNow that we've covered all of the desktop builds we can do the same for Windows RT, as you can see in the following script segment.\n\nSo now we've covered all of the variants we can handle for the set of pivot points: platform, toolset, configuration and target application type.\n\nThe final piece we want to add to the file is a targets node. For now that only includes a definition that can be used later to help software pick up what it actually needs. This will be covered in a later tutorial, so just include this node for now.\n\nThis completes creation of the AutoPackage script for the C++ REST SDK packages.\n\n####Producing the Outputs\n\nIn the process we're following for this tutorial, three packages get generated.\n\nMain package - contains source files, headers, binaries and is used by developers\n\nRedist package - contains binaries and are used by developers and those who are installing packages\n\nSymbols package - contains symbol information and is used by developers for debugging\n\nTo produce the package use the command from a PowerShell prompt:\n\nwhere cpprestssdk.autopkg is the script you've just written. The resulting output follows:\n\nThese .nupkg files are all just zip file that you can uncompress to see their contents.\n\n####Consuming NuGet Packages\n\nConsuming NuGet packages from Visual Studio is straightforward:\n\nClick on \"Manage NuGet References\"\n\nChoose the packages you want to consume\n\nStart coding\n\nLet's go through the steps together and create a Win32 console application. Begin by starting a new project in Visual Studio and call it \"TestApp.\" Now, go to your Solution Explorer on the right-hand side of your screen and open \"Manage NuGet References.\" You'll only see this if you're running NuGet 2.5 or later as stated in the Requirements section of this document.\n\n@Menu Item\n\nGo to the online section and have it search different packages sources. Choose the C++ REST SDK package. On the right-hand side of your screen, you'll see all of the text we added to the AutoPackage script.\n\n@C++ Rest SDK Package\n\nInclude the package into your project. You'll see that NuGet handles any dependencies you'll need, in this case the redist package. Close that window, which will take you back to your coding window. Next drop the following code into you workspace. It's the source from one of the examples from the SDK itself.\n\nNotice that Visual C++ is not complaining about missing references like http_client. Such references are resolved automatically through external dependencies. Click on the external dependencies link on the right-hand side of your screen and you see all of the references that have been included from the C++ REST SDK package that we created. We didn't have to set up anything manually it was all set up by the package itself and it set it up for the conditions under which we are compiling, namely, Win32 and debug. If you have a special set of includes that only works for one set of conditions, they will be there.\n\nNow select Build. Once your build is complete, cd to the output directory and look at the files.\n\n@Menu Item\n\nYou can see the file TestApp.exe and the library casablanca110.dll. This means that the package did the \"right thing\" and made sure the appropriage DLL was in our build directory. That happened because the following line in our AutoPackage script made sure this version of the DLL was properly stored:\n\nAnd the next line from our AutoPackage script made sure we linked against the correct library.\n\nNow, let's test the program. Enter the command:\n\nThis tells TestApp to search for the term \"coapp\" and store the result in the file Test.html.\n\nFinally, run the command:\n\nShow search results\n\nYou see that the search results returned by TestApp represent a valid search output that includes CoApp.org and other references to coapp and that the display is being pulled from the file we told TestApp to create, namely Test.html.\n\nThis demonstrates that we were able to build, compile, link and run a program all without ever having to look at the Visual Studio project files and without having to modify any of the properties by hand including not having to specify a source directory, library files, or include directories. All we relied on was the contents of the package and everything worked.\n\n####Looking Under the Covers\n\nIf you're curious you can see how the process works. Go back to the TestApp directory and cd to the packages directory. Show its contents, then drill down through the build directory to the native directory.\n\nUse your editor to look at cpprestsdk.0.6.0.7.targets to see the complexity that AutoPackage has managed for you.\n\nThis is a Visual Studio properties file and you can see that AutoPackage has taken care of a lot of detail you never need to worry about. All you need to do is use it.\n\n####What's Next?\n\nLook for additional tutorials soon covering:"
    }
}