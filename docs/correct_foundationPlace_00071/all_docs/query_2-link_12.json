{
    "id": "correct_foundationPlace_00071_2",
    "rank": 12,
    "data": {
        "url": "https://developers.arcgis.com/python/guide/part4-find-closest-facilities/",
        "read_more_link": "",
        "language": "en",
        "title": "Guide to Network Analysis (Part 4 - Find Closest Facilities)",
        "top_image": "https://developers.arcgis.com/python/static/thumbnail-45d6d823fb8081dc961cbf6e338407af.png",
        "meta_img": "https://developers.arcgis.com/python/static/thumbnail-45d6d823fb8081dc961cbf6e338407af.png",
        "images": [
            "https://developers.arcgis.com/python/guide/base64-images/part4_find_closest_facilities-g940e71e3-95ee-89f5-f22a-14f432d656a1.png",
            "https://developers.arcgis.com/python/guide/base64-images/part4_find_closest_facilities-g96b962f0-7f1c-7b2d-9d59-09025a6d13e5.png",
            "https://geosaurus.maps.arcgis.com/home/js/jsapi/esri/css/images/item_type_icons/featureshosted16.png",
            "https://developers.arcgis.com/python/guide/base64-images/part4_find_closest_facilities-gc38baaaf-7550-fdde-f9fd-67249219fdad.png",
            "https://developers.arcgis.com/python/guide/base64-images/part4_find_closest_facilities-gf95892b2-8a27-c9b7-725a-f1cafaa1957f.png",
            "https://datascienceqa.esri.com/portal/portalimages/desktopapp.png",
            "https://datascienceqa.esri.com/portal/home/js/jsapi/esri/css/images/item_type_icons/maps16.png",
            "http://static.arcgis.com/images/desktopapp.png",
            "https://geosaurus.maps.arcgis.com/home/js/jsapi/esri/css/images/item_type_icons/featureshosted16.png",
            "https://developers.arcgis.com/python/guide/base64-images/part4_find_closest_facilities-gca7465cc-7c98-1b32-837f-0e5f8d7f71f5.png",
            "https://developers.arcgis.com/python/guide/base64-images/part4_find_closest_facilities-g502c521d-030e-9cb8-569e-0ab26987163c.png",
            "https://datascienceqa.esri.com/portal/portalimages/desktopapp.png",
            "https://datascienceqa.esri.com/portal/home/js/jsapi/esri/css/images/item_type_icons/maps16.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "ArcGIS API for Python documentation.",
        "meta_lang": "en",
        "meta_favicon": "/python/favicon-32x32.png?v=cc73a1016b830b97008ac5ee12a80774",
        "meta_site_name": "ArcGIS API for Python",
        "canonical_link": "https://developers.arcgis.com/python/guide/part4-find-closest-facilities/",
        "text": "Introduction\n\nWe have learned about Network Datasets and Network Analysis services in Part 1, how to find routes from one point to another, and among multiple points in Part 2, and how to generate service area in Part 3, let's move onto the fourth topic - how to find the closest facility. Please refer to the road map below if you want to revisit the previous topics or jump to the next topic -\n\nNetwork Dataset and Network Analysis services (Part 1)\n\nFind Routes (Part 2)\n\nGenerate Service Area (Part 3)\n\nFind Closest Facility (You are here!)\n\nGenerate Origin Destination Cost Matrix (Part 5)\n\nSolve Location Allocation (Part 6)\n\nVehicle Routing Problem Service (Part 7)\n\nThe API of Finding Closest Facility is useful when you need to find out individual locations near a source feature (in this guide, we call it incidents layer) in a sense that the API can calculate the actual distance between each location in the incidents layer and the closest source (in the facilities layer). For instance, if you want to know the distance of some eagle nests from a river and what's the closest point (1).\n\nOr you can also have the API find the distance between each location (in the incidents layer) and several source features (in the facilities layer), which can be interpreted as (2):\n\nIf you want to see which areas are near more than one source and which areas are near only one. For instance, a fast food chain might need to see which areas have many customers near several restaurants.\n\nIf you need to know the second or third closest source for each location. For instance, a patient might need to know the nearest and the second nearest hospitals to his/her home address.\n\nIf you want to compare distance to other factors. For example, customer's distance from the store would need to be weighted against the number of store visits.\n\nFig 1. When a criminal incident happens, police patrol system needs to figure out which patrol vehicles are closest to the incident, in order to send the police officers over to the scene (2).\n\nThis part of guide to Networking Analysis will help you measure the cost of traveling between incidents and facilities, specify how many to find and whether the direction of travel is toward or away from them, and determine which are nearest to one another, and at the end display the best routes between incidents and facilities, report their travel costs, and return driving directions (2). In this part of guide, you'll be introduced to the workflow to find the closest hospital to an accident.\n\nNow that we have learned why finding closest facility is needed, and the basis of measuring the nearness, it is time to make your hands dirty with some real implementations!\n\nProblem statement\n\nThe goal of this page is to determine which facilities are closest to an incident. For this, let us assume the following scenario:\n\nJim is an operator working for Medical Emergency Response Office, and needs to schedule for emergency response vehicles to pick up patients from the location of incidents and transport to the nearest hospitals. Now given the three incidents reported in Redlands and Loma Linda, can Jim find the nearest hospitals for each of these incidents, and also provide them routes and directions?\n\nNow that Jim's objectives are defined, we can go onto break down the problem:\n\nData: where to access the input datasets\n\nMethods: what tools can be used to build the network model and perform closest facility analysis\n\nTables and maps: deliverables in which directions and routes are visualized.\n\nLet's first access and/or explore the input datasets (in this case, the incidents and facilities feature class).\n\nData\n\nThe first step to everything is always importing all required modules and establishing a GIS connection to ArcGIS Online organization or your enterprise for ArcGIS.\n\nIf you have already set up a profile to connect to your ArcGIS Online organization, execute the cell below to load the profile and create the GIS class object. If not, use a traditional username/password log-in e.g. my_gis = GIS('https://www.arcgis.com', 'username', 'password', verify_cert=False, set_active=True)\n\nDefine Incidents and Facilities Layer\n\nFinding a closest facility can be associated with a local network dataset or a network service hosted in ArcGIS Online or ArcGIS Enterprise. Here, we will be using an existing feature layer that contains hospitals derived from various sources (refer SOURCE field) from the Homeland Infrastructure Foundation-Level Data (HIFLD) database (https://gii.dhs.gov/HIFLD), which can be accessed from esri_livingatlas.\n\nIf you do not have access to the hospital layer provided by Esri_livingatlas as referenced in the cell below, an alternative approach is for you to download the hospital listing of San Bernadino County from this source and publish the csv to the organization before proceeding forward.\n\nFrom the Feature Layer item, we will get the first Feature Layer which we will use for the rest of this notebook.\n\nNow we have the facilities layer ready. It has 33 hospitals as features. We can go onto define the incidents layer. Here, we randomly picked three locations in Redlands, CA.\n\nLet's have the two layers visualized in the map view.\n\nMethods\n\nThe ArcGIS API for Python provides three ways to find closest facilities, which are namely, ClosestFacilityLayer.solve, find_closest_facilities, and find_nearest.\n\nOperationnetwork.analysisfeatures.use_proximityRoutefind_routesplan_routesServiceAreagenerate_service_areascreate_drive_time_areasClosestFacilityfind_closest_facilitiesfind_nearest\n\nThese three methods are defined in different modules of the arcgis package, and will make distinct REST calls in the back end. A key distinction between ClosestFacilityLayer.solve and network.analysis.find_closest_facilities, features.use_proximity.find_nearest is, the former is meant for custom or advanced closest facilities finding workflows where you need to publish your own Network Analysis layers. The latter tools work against closest facilities finding services hosted on ArcGIS Online or available on your Enterprise via proxy services and will cost you credits.\n\nIn this part of guide, we will walk through the workflows of using network.analysis.find_closest_facilities() and features.use_proximity.find_nearest() in solving the same problem - finding the closest facilities (defined as hospitals here) to the incidents, and further explore the differences in the process.\n\nMethod 1 - using arcgis.network.analysis.find_closest_facilities\n\nFinds one or more facilities that are closest from an incident based on travel time or travel distance and outputs the best routes, driving directions between the incidents and the chosen facilities, and a copy of the chosen facilities. You can use the tool, for example, to find the closest hospital to an accident, the closest police cars to a crime scene, or the closest store to a customerâs address. When finding closest facilities, you can specify how many to find and whether the direction of travel is toward or away from them. You can also specify the time of day to account for travel times based on live or predictive traffic conditions for that time and date. For instance, you can use the tool to search for hospitals within a 15-minute drive time of the site of an accident at a given time of day. Any hospitals that take longer than 15 minutes to reach based on the traffic conditions will not be included in the results. Parameters for the solver include:\n\nincidents: Incidents (FeatureSet). Required parameter. Specify one or more incidents (up to 1,000). These are the locations from which the tool searches for the nearby locations.\n\nfacilities: Facilities (FeatureSet). Required parameter. Specify one or more facilities (up to 1,000). These are the locations that are searched for when finding the closest location.\n\nnumber_of_facilities_to_find: Number of Facilities to Find (int). Optional parameter. Specify the number of closest facilities to find per incident\n\ncutoff: Cutoff (float). Optional parameter. Specify the travel time or travel distance value at which to stop searching for facilities for a given incident.\n\nSet save_output_network_analysis_layer to True if you want to output the resulting NA layer as Layer file.\n\nPlease refer to the API ref doc for more information.\n\nNow, check if the tool is run successfully, and what are types of the elements in the returned result set, and also get the output network analysis layer's url.\n\nThe output result1 is of type arcgis.geoprocessing._support.ToolOutput and the containing FeatureSets can be parsed individually for tabularizing and mapping the results. Also, the network analysis layer is present in the output_network_analysis_layer component.\n\nTabularizing the response from find_closest_facilities\n\nWe can read the output_routes component of the returned object as DataFrame, and the 4 closest facilities (from a list of 33 possible facilities) to each of the 3 incidents. With StartTime and EndTime converted to DateTime type, and specific columns selected, the table now lists only valid information:\n\nThe table above shows the routes from each incident location to 4 of the facilities closest to it. It also prints the time and distance to each of these facilities.\n\nVisualizing the routes to the closest facilities\n\nLet us extract the closest facility to each of the incident from the routing result.\n\nNow let us highlight the shortest routes. We can do that by redrawing the shortest route with a thicker and translucent symbol on the original map with all routes.\n\nNext, we can save the map as a Web Map item for use later.\n\nWe have been using the find_closest_facilities tool in the network.analysis module up to this point. From now on, let's use a different method - find_nearest - defined in the features.use_proximity module, to achieve a workflow driven, Feature Service to Feature Service user experience.\n\nMethod 2 - using arcgis.features.use_proximity.find_nearest\n\nThe find_nearest method measures the straight-line distance, driving distance, or driving time from features in the analysis layer to features in the near layer, and copies the nearest features in the near layer to a new layer. Connecting lines showing the measured path are returned as well. find_nearest also reports the measurement and relative rank of each nearest feature. There are options to limit the number of nearest features to find or the search range in which to find them. The results from this method can help you answer the following kinds of questions:\n\nWhat is the nearest park from here?\n\nWhich hospital can I reach in the shortest drive time? And how long would the trip take on a Tuesday at 5:30 p.m. during rush hour?\n\nWhat are the road distances between major European cities?\n\nWhich of these patients reside within two miles of these chemical plants?\n\nGetting incidents and facilities FeatureCollection ready\n\nLet us inspect the ClosestFacilityLater to get supported travel modes.\n\nLet us get the Driving Time, which we will call as the car_mode.\n\nWith output_name specified\n\nWhen output_name is specified, Find Nearest returns a layer containing the nearest features and a line layer that links the start locations to their nearest locations. The connecting line layer contains information about the start and nearest locations and the distances between.\n\nThe first sublayer of result2 is the nearest facilities, and the second sublayer is the route.\n\nAs seen above, 12 routes are listed as routing options to closest facilities from these three incidents.\n\nNot only can we tabularize the result, but we can also render the output Feature Service on to the map widget (as below).\n\nNow we have seen how a Feature Service (input) to Feature service (output) works, let's explore a more traditional way of solving/parsing/tabularizing/drawing user experience.\n\nWithout output_name specified\n\nWhen you have not specified the output_name in the input parameters, the returned value from find_nearest is a dict of two FeatureCollection objects, and detailed parsing needs to be done in order to get the information on demand.\n\nTabularizing the response from find_nearest\n\nWe can create a DataFrame out of the features contained in the returned FeatureCollection object as in connecting_lines_layer component.\n\nVisualizing the response from find_nearest\n\nFirst create the map view, then customize the symbology for the incidents and the facilities, and finally render the routes and stops.\n\nIn the last section of this guide, we have adopted a different method - arcgis.features.use_proximity.find_nearest - in finding closest facilities from incidents. In doing so, we also explored the two scenarios with output_name specified (which forms a Feature Service to Feature Service user experience), and a more traditional compute/parse/draw approach when output_name is not present.\n\nWhat's next?\n\nPart 4 has introduced arcgis.network.analysis.find_closest_facilities and arcgis.features.use_proximity.find_nearest as solvers to the closest facility problem, how to prepare for data required as input arguments by these solvers, and ways to tabularize, map, and the save the output from solvers.\n\nNow that we have mastered techniques in finding closest facilities, let's proceed to the next topic - generating OD (origin-destination) Matrix with network.analysis and features.use_proximity modules in Part 5\n\nReferences\n\n[1] Andy Mitchell, \"The ESRI Guide to GIS Analysis, Volume 1: Geographic patterns & relationships\", Esri Press, August 1999\n\n[2] \"Closest Facility Analysis\", https://desktop.arcgis.com/en/arcmap/latest/extensions/network-analyst/closest-facility.htm, accessed on 09/16/2019"
    }
}