{
    "id": "dbpedia_4810_1",
    "rank": 64,
    "data": {
        "url": "https://www.siteground.com/tutorials/ssh/searching/",
        "read_more_link": "",
        "language": "en",
        "title": "How to Search for Files and Folders via SSH",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "SiteGround Web Hosting"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "In this tutorial, we'll learn the two SSH commands that will allow you to locate a given file or to search for a certain text in all files under a directory",
        "meta_lang": "en",
        "meta_favicon": "/img/favicon.ico",
        "meta_site_name": "SiteGround",
        "canonical_link": "https://www.siteground.com/tutorials/ssh/searching/",
        "text": "In some cases, you would need to find the location of a given file or to search for a certain text in all files under a directory. SSH provides two different commands, which can be used to accomplish this. In order to search for a file location, you can use the find command. Find is a very powerful tool and accepts various arguments allowing you to specify the exact search term (i.e search by name, by type or even by modified time).\n\nFor example, to search for a file called myFile.txt under the current folder (and all subfolders), you would need to use the following command:\n\nfind . -name myFile.txt\n\nIf you are uncertain about the file name or would like to match a part of the name, you can use a wildcard pattern:\n\nfind . -name \"myFile*\"\n\nIf you would like to list only directories and leave all files out of the result:\n\nfind . -type d\n\nOr if you want to filter only files modified in the last 2 days, you would need to use:\n\nfind . -mtime -2\n\nYou can also search for a given text in the content of the files as well. The command you should be using, in this case, is grep. Grep is a very powerful tool and accepts various command line arguments. For a full list it is recommended to check the manual pages by typing man grep.\n\nAn example of using grep to find a certain text can be found below:\n\ngrep \"database\" configuration.php\n\nThe above command instructs grep to look for the string “database” in the configuration.php file and display the containing line. If you don’t know which file contains the text, you can use:\n\ngrep -r -H \"database\" *\n\nThis will make grep look recursively (-r option) and provide the result in a human-readable format (-H option) for the string “database” in all (*) files under the current working directory.\n\nTo only list the file names containing the string you are searching but omit the line containing it, you can use the -l argument:\n\ngrep -l \"database\" *\n\nThis will display the filenames containing the word “database”, but will not actually list the line containing it.\n\nGrep can also be used to filter the results from other commands. For example, the line below will only output configuration.php result:\n\nls -la | grep configuration.php\n\nIn some rare cases, find and grep may prove not useful. For example, to find a certain file in the whole server, it would be best to use an alternative command – whereis or which:\n\nwhereis perl\n\nor\n\nwhich perl\n\nThe execution of the above commands will locate the perl binary and display the full path(s) to it."
    }
}