{
    "id": "dbpedia_4810_1",
    "rank": 80,
    "data": {
        "url": "https://www.drush.org/12.x/site-aliases/",
        "read_more_link": "",
        "language": "en",
        "title": "Site aliases ¶",
        "top_image": "https://raw.githubusercontent.com/drush-ops/drush/10.x/drush_logo-black.png",
        "meta_img": "https://raw.githubusercontent.com/drush-ops/drush/10.x/drush_logo-black.png",
        "images": [
            "https://www.drush.org/12.x/drush_logo-black.png",
            "https://www.drush.org/12.x/drush_logo-black.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Moshe Weitzman"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "A command line shell and Unix scripting interface for Drupal",
        "meta_lang": "en",
        "meta_favicon": "../img/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.drush.org/latest/latest/site-aliases/",
        "text": "Site aliases¶\n\nBasic usage¶\n\nIn its most basic form, the Drush site alias feature provides a way for teams to share short names that refer to the live and staging sites (usually remote) for a given Drupal site.\n\nAdd an alias file called $PROJECT/drush/sites/self.site.yml, where $PROJECT is the project root (location of composer.json file). The site alias file should be named self.site.yml because this name is special, and is used to define the different environments (usually remote) of the current Drupal site.\n\nThe contents of the alias file should look something like the example below:\n\nThe top-level element names (live and stage in the example above) are used to identify the different environments available for this site. These may be used on the command line to select a different target environment to operate on by prepending an @ character, e.g. @live or @stage.\n\nFollowing these steps, a cache:rebuild on the live environment would be:\n\nAll of the available aliases for a site's environments may be listed via:\n\nThe elements of a site alias are:\n\nhost: The fully-qualified domain name of the remote system hosting the Drupal instance. The host option must be omitted for local sites, as this option controls various operations, such as whether or not rsync parameters are for local or remote machines, and so on.\n\nuser: The username to log in as when using ssh or docker. If each user has to use own username, you can create an environment variable which holds the value, and reference via ${env.PROJECT_SSH_USER} (for example). Or you may omit the user item and specify a user in the ~/.ssh/config file.\n\nroot: The Drupal root; must not be specified as a relative path.\n\nuri: The value of --uri should always be the same as when the site is being accessed from a web browser (e.g. http://example.com)\n\nDrush typically uses ssh to run commands on remote systems; all team members should install ssh keys on the target servers (e.g. via ssh-add).\n\nAdvanced usage¶\n\nIt is also possible to create site alias files that reference other sites on the same local system. Site alias files for other local sites are usually stored in the directory ~/.drush/sites; however, Drush does not search this location for alias files by default. To use this location, you must add the path in your Drush configuration file. For example, to re-add both of the default user alias path from Drush 8, put the following in your ~/.drush/drush.yml configuration file:\n\nA canonical alias named example that points to a local Drupal site named at http://example.com like this:\n\nNote that the first part of the filename (in this case example defines the name of the site alias, and the top-level key dev defines the name of the environment.\n\nWith these definitions in place, it is possible to run commands targeting the dev environment of the target site via:\n\nThis command is equivalent to the longer form: See Additional Site Alias Options for more information.\n\nAltering aliases:¶\n\nSee examples/Commands/SiteAliasAlterCommands.php) for an example.\n\nSite specifications:¶\n\nWhen a site alias name is provided on the command line, a site specification may be used instead. A site specification is a site alias that is not saved on the filesystem but instead is provided directly e.g. drush user@server/path/to/drupal#uri core:status. See example site specifications.\n\nEnvironment variables¶\n\nSite aliases may reference environment variables, just like any Drush config file. For example, ${env.PROJECT_SSH_USER} will be replaced by the value of the PROJECT_SSH_USER environment value.\n\nSSH site aliases may set environment variables via the env-vars key. See below.\n\nAdditional Site Alias Options¶\n\nAliases are commonly used to define short names for local or remote Drupal installations; however, an alias is really nothing more than a collection of options.\n\ndocker: When specified, Drush executes via docker-compose exec rather than ssh.\n\nservice: the name of the container to run on.\n\nexec:\n\noptions: Options for the exec subcommand.\n\nkubectl When specified, Drush executes via kubectl exec rather than ssh.\n\nnamespace The namespace to execute the command in.\n\nresource The k8s object to execute the command on.\n\ncontainer The container in the resource to execute the command on.\n\nos: The operating system of the remote server. Valid values are Windows and Linux. Set this value for all remote aliases where the remote's OS differs from the local. This is especially relevant for the sql:sync command.\n\nssh: Contains settings used to control how ssh commands are generated when running remote commands.\n\noptions: Contains additional commandline options for the ssh command itself, e.g. -p 100\n\ntty: Usually, Drush will decide whether or not to create a tty (via the ssh --t option) based on whether the local Drush command is running interactively or not. To force Drush to always or never create a tty, set the ssh.tty option to true or false, respectively.\n\npaths: An array of aliases for common rsync targets. Relative aliases are always taken from the Drupal root.\n\nfiles: Path to files directory. This will be looked up if not specified.\n\ndrush-script: Path to the remote Drush command.\n\ncommand: These options will only be set if the alias is used with the specified command. In the advanced example below, the option --no-dump will be selected whenever the @stage alias is used in any of the following ways:\n\ndrush @stage sql-sync @self @live\n\ndrush sql-sync @stage @live\n\ndrush sql-sync @live @stage\n\nenv-vars: An array of key / value pairs that will be set as environment variables.\n\nComplex example:\n\nSite Alias Files for Service Providers¶\n\nThere are a number of service providers that manage Drupal sites as a service. Drush allows service providers to create collections of site alias files to reference all of the sites available to a single user. In order to do this, a new location must be defined in your Drush configuration file:\n\nSite aliases stored in this directory may then be referenced by its full alias name, including its location, e.g.:\n\nSuch alias files may still be referenced by their shorter name, e.g. @example.dev. Note that it is necessary to individually list every location where site alias files may be stored; Drush never does recursive (deep) directory searches for alias files.\n\nThe site:alias command may also be used to list all of the sites and environments in a given location, e.g.:\n\nAdd the option --format=list to show only the names of each site and environment without also showing the values in each alias record.\n\nWildcard Aliases for Service Providers¶\n\nSome service providers that manage Drupal sites allow customers to create multiple \"environments\" for a site. It is common for these providers to also have a feature to automatically create Drush aliases for all of a user's sites. Rather than write one record for every environment in that site, it is also possible to write a single wildcard alias that represents all possible environments. This is possible if the contents of each environment alias are identical save for the name of the environment in one or more values. The variable ${env-name} will be substituted with the environment name wherever it appears.\n\nExample wildcard record:\n\nWith a wildcard record, any environment name may be used, and will always match. This is not desirable in instances where the specified environment does not exist (e.g. if the user made a typo). An alias alter hook in a policy file may be used to catch these mistakes and report an error. See SiteAliasAlterCommands for an example on how to do this.\n\nDocker Compose¶\n\nThe example below shows drush calling into a Docker hosted site. See the https://github.com/consolidation/site-alias and https://github.com/consolidation/site-process projects for more developer information about transports.\n\nAn example appears below. Edit to suit:\n\nKubernetes¶\n\nDrush provides transport for running drush commands on your Kubernetes cluster via kubectl. See an example and options below.\n\nKey options¶\n\nnamespace: The namespace where your Drupal deployment resides.\n\nresource: Kubernetes resource type (usually 'pods').\n\ncontainer: The specific container within the pod where Drupal runs.\n\nkubeconfig: The kubeconfig file to use for authentication.\n\nentrypoint: The command to use as the container entrypoint.\n\nExample of rsync with exclude-paths¶\n\nNote that most options typically passed to rsync via drush rsync are \"passthrough options\", which is to say they appear after the -- separator on the command line. Passthrough options are actually arguments, and it is not possible to set default arguments in an alias record. The drush rsync command does support two options, --mode and --exclude-paths, which are interpreted directly by Drush. Default values for these options may be specified in an alias record, as shown below."
    }
}