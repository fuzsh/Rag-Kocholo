{
    "id": "dbpedia_6181_2",
    "rank": 92,
    "data": {
        "url": "https://docs.nextcloud.com/server/latest/admin_manual/installation/nginx.html",
        "read_more_link": "",
        "language": "en",
        "title": "NGINX configuration â€” Nextcloud latest Administration Manual latest documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.nextcloud.com/server/latest/admin_manual/_static/logo-white.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "upstreamphp-handler{ server127.0.0.1:9000; #server unix:/run/php/php8.2-fpm.sock; } # Set the `immutable` cache control options only for assets with a cache busting `v` argument map$arg_v$asset_immutable{ \"\"\"\"; default\",immutable\"; } server{ listen80; listen[::]:80; server_namecloud.example.com; # Prevent nginx HTTP Server Detection server_tokensoff; # Enforce HTTPS return301https://$server_name$request_uri; } server{ listen443sslhttp2; listen[::]:443sslhttp2; server_namecloud.example.com; # Path to the root of your installation root/var/www/nextcloud; # Use Mozilla's guidelines for SSL/TLS settings # https://mozilla.github.io/server-side-tls/ssl-config-generator/ ssl_certificate/etc/ssl/nginx/cloud.example.com.crt; ssl_certificate_key/etc/ssl/nginx/cloud.example.com.key; # Prevent nginx HTTP Server Detection server_tokensoff; # HSTS settings # WARNING: Only add the preload option once you read about # the consequences in https://hstspreload.org/. This option # will add the domain to a hardcoded list that is shipped # in all major browsers and getting removed from this list # could take several months. #add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" always; # set max upload size and increase upload timeout: client_max_body_size512M; client_body_timeout300s; fastcgi_buffers644K; # Enable gzip but do not remove ETag headers gzipon; gzip_varyon; gzip_comp_level4; gzip_min_length256; gzip_proxiedexpiredno-cacheno-storeprivateno_last_modifiedno_etagauth; gzip_typesapplication/atom+xmltext/javascriptapplication/javascriptapplication/jsonapplication/ld+jsonapplication/manifest+jsonapplication/rss+xmlapplication/vnd.geo+jsonapplication/vnd.ms-fontobjectapplication/wasmapplication/x-font-ttfapplication/x-web-app-manifest+jsonapplication/xhtml+xmlapplication/xmlfont/opentypeimage/bmpimage/svg+xmlimage/x-icontext/cache-manifesttext/csstext/plaintext/vcardtext/vnd.rim.location.xloctext/vtttext/x-componenttext/x-cross-domain-policy; # Pagespeed is not supported by Nextcloud, so if your server is built # with the `ngx_pagespeed` module, uncomment this line to disable it. #pagespeed off; # The settings allows you to optimize the HTTP2 bandwidth. # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/ # for tuning hints client_body_buffer_size512k; # HTTP response headers borrowed from Nextcloud `.htaccess` add_headerReferrer-Policy\"no-referrer\"always; add_headerX-Content-Type-Options\"nosniff\"always; add_headerX-Frame-Options\"SAMEORIGIN\"always; add_headerX-Permitted-Cross-Domain-Policies\"none\"always; add_headerX-Robots-Tag\"noindex,nofollow\"always; add_headerX-XSS-Protection\"1;mode=block\"always; # Remove X-Powered-By, which is an information leak fastcgi_hide_headerX-Powered-By; # Set .mjs and .wasm MIME types # Either include it in the default mime.types list # and include that list explicitly or add the file extension # only for Nextcloud like below: includemime.types; types{ text/javascriptmjs; application/wasmwasm; } # Specify how to handle directories -- specifying `/index.php$request_uri` # here as the fallback means that Nginx always exhibits the desired behaviour # when a client requests a path that corresponds to a directory that exists # on the server. In particular, if that directory contains an index.php file, # that file is correctly served; if it doesn't, then the request is passed to # the front-end controller. This consistent behaviour means that we don't need # to specify custom rules for certain paths (e.g. images and other assets, # `/updater`, `/ocs-provider`), and thus # `try_files $uri $uri/ /index.php$request_uri` # always provides the desired behaviour. indexindex.phpindex.html/index.php$request_uri; # Rule borrowed from `.htaccess` to handle Microsoft DAV clients location=/{ if($http_user_agent~^DavClnt){ return302/remote.php/webdav/$is_args$args; } } location=/robots.txt{ allowall; log_not_foundoff; access_logoff; } # Make a regex exception for `/.well-known` so that clients can still # access it despite the existence of the regex rule # `location ~ /(\\.|autotest|...)` which would otherwise handle requests # for `/.well-known`. location^~/.well-known{ # The rules in this block are an adaptation of the rules # in `.htaccess` that concern `/.well-known`. location=/.well-known/carddav{return301/remote.php/dav/;} location=/.well-known/caldav{return301/remote.php/dav/;} location/.well-known/acme-challenge{try_files$uri$uri/=404;} location/.well-known/pki-validation{try_files$uri$uri/=404;} # Let Nextcloud's API for `/.well-known` URIs handle all other # requests by passing them to the front-end controller. return301/index.php$request_uri; } # Rules borrowed from `.htaccess` to hide certain paths from clients location~^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/){return404;} location~^/(?:\\.|autotest|occ|issue|indie|db_|console){return404;} # Ensure this block, which passes PHP files to the PHP process, is above the blocks # which handle static assets (as seen below). If this block is not declared first, # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php` # to the URI, resulting in a HTTP 500 error response. location~\\.php(?:$|/){ # Required for legacy support rewrite^/(?!index|remote|public|cron|core\\/ajax\\/update|status|ocs\\/v[12]|updater\\/.+|ocs-provider\\/.+|.+\\/richdocumentscode(_arm64)?\\/proxy)/index.php$request_uri; fastcgi_split_path_info^(.+?\\.php)(/.*)$; set$path_info$fastcgi_path_info; try_files$fastcgi_script_name=404; includefastcgi_params; fastcgi_paramSCRIPT_FILENAME$document_root$fastcgi_script_name; fastcgi_paramPATH_INFO$path_info; fastcgi_paramHTTPSon; fastcgi_parammodHeadersAvailabletrue;# Avoid sending the security headers twice fastcgi_paramfront_controller_activetrue;# Enable pretty urls fastcgi_passphp-handler; fastcgi_intercept_errorson; fastcgi_request_bufferingoff; fastcgi_max_temp_file_size0; } # Serve static files location~\\.(?:css|js|mjs|svg|gif|ico|jpg|png|webp|wasm|tflite|map|ogg|flac)${ try_files$uri/index.php$request_uri; # HTTP response headers borrowed from Nextcloud `.htaccess` add_headerCache-Control\"public,max-age=15778463$asset_immutable\"; add_headerReferrer-Policy\"no-referrer\"always; add_headerX-Content-Type-Options\"nosniff\"always; add_headerX-Frame-Options\"SAMEORIGIN\"always; add_headerX-Permitted-Cross-Domain-Policies\"none\"always; add_headerX-Robots-Tag\"noindex,nofollow\"always; add_headerX-XSS-Protection\"1;mode=block\"always; access_logoff;# Optional: Don't log access to assets } location~\\.woff2?${ try_files$uri/index.php$request_uri; expires7d;# Cache-Control policy borrowed from `.htaccess` access_logoff;# Optional: Don't log access to assets } # Rule borrowed from `.htaccess` location/remote{ return301/remote.php$request_uri; } location/{ try_files$uri$uri//index.php$request_uri; } }\n\nupstreamphp-handler{ server127.0.0.1:9000; #server unix:/run/php/php8.2-fpm.sock; } # Set the `immutable` cache control options only for assets with a cache busting `v` argument map$arg_v$asset_immutable{ \"\"\"\"; default\",immutable\"; } server{ listen80; listen[::]:80; server_namecloud.example.com; # Prevent nginx HTTP Server Detection server_tokensoff; # Enforce HTTPS just for `/nextcloud` location/nextcloud{ return301https://$server_name$request_uri; } } server{ listen443sslhttp2; listen[::]:443sslhttp2; server_namecloud.example.com; # Path to the root of the domain root/var/www; # Use Mozilla's guidelines for SSL/TLS settings # https://mozilla.github.io/server-side-tls/ssl-config-generator/ ssl_certificate/etc/ssl/nginx/cloud.example.com.crt; ssl_certificate_key/etc/ssl/nginx/cloud.example.com.key; # Prevent nginx HTTP Server Detection server_tokensoff; # Set .mjs and .wasm MIME types # Either include it in the default mime.types list # and include that list explicitly or add the file extension # only for Nextcloud like below: includemime.types; types{ text/javascriptmjs; application/wasmwasm; } location=/robots.txt{ allowall; log_not_foundoff; access_logoff; } location^~/.well-known{ # The rules in this block are an adaptation of the rules # in the Nextcloud `.htaccess` that concern `/.well-known`. location=/.well-known/carddav{return301/nextcloud/remote.php/dav/;} location=/.well-known/caldav{return301/nextcloud/remote.php/dav/;} location/.well-known/acme-challenge{try_files$uri$uri/=404;} location/.well-known/pki-validation{try_files$uri$uri/=404;} # Let Nextcloud's API for `/.well-known` URIs handle all other # requests by passing them to the front-end controller. return301/nextcloud/index.php$request_uri; } location^~/nextcloud{ # set max upload size and increase upload timeout: client_max_body_size512M; client_body_timeout300s; fastcgi_buffers644K; # Enable gzip but do not remove ETag headers gzipon; gzip_varyon; gzip_comp_level4; gzip_min_length256; gzip_proxiedexpiredno-cacheno-storeprivateno_last_modifiedno_etagauth; gzip_typesapplication/atom+xmltext/javascriptapplication/javascriptapplication/jsonapplication/ld+jsonapplication/manifest+jsonapplication/rss+xmlapplication/vnd.geo+jsonapplication/vnd.ms-fontobjectapplication/wasmapplication/x-font-ttfapplication/x-web-app-manifest+jsonapplication/xhtml+xmlapplication/xmlfont/opentypeimage/bmpimage/svg+xmlimage/x-icontext/cache-manifesttext/csstext/plaintext/vcardtext/vnd.rim.location.xloctext/vtttext/x-componenttext/x-cross-domain-policy; # Pagespeed is not supported by Nextcloud, so if your server is built # with the `ngx_pagespeed` module, uncomment this line to disable it. #pagespeed off; # The settings allows you to optimize the HTTP2 bandwidth. # See https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/ # for tuning hints client_body_buffer_size512k; # HSTS settings # WARNING: Only add the preload option once you read about # the consequences in https://hstspreload.org/. This option # will add the domain to a hardcoded list that is shipped # in all major browsers and getting removed from this list # could take several months. #add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\" always; # HTTP response headers borrowed from Nextcloud `.htaccess` add_headerReferrer-Policy\"no-referrer\"always; add_headerX-Content-Type-Options\"nosniff\"always; add_headerX-Frame-Options\"SAMEORIGIN\"always; add_headerX-Permitted-Cross-Domain-Policies\"none\"always; add_headerX-Robots-Tag\"noindex,nofollow\"always; add_headerX-XSS-Protection\"1;mode=block\"always; # Remove X-Powered-By, which is an information leak fastcgi_hide_headerX-Powered-By; # Specify how to handle directories -- specifying `/nextcloud/index.php$request_uri` # here as the fallback means that Nginx always exhibits the desired behaviour # when a client requests a path that corresponds to a directory that exists # on the server. In particular, if that directory contains an index.php file, # that file is correctly served; if it doesn't, then the request is passed to # the front-end controller. This consistent behaviour means that we don't need # to specify custom rules for certain paths (e.g. images and other assets, # `/updater`, `/ocs-provider`), and thus # `try_files $uri $uri/ /nextcloud/index.php$request_uri` # always provides the desired behaviour. indexindex.phpindex.html/nextcloud/index.php$request_uri; # Rule borrowed from `.htaccess` to handle Microsoft DAV clients location=/nextcloud{ if($http_user_agent~^DavClnt){ return302/nextcloud/remote.php/webdav/$is_args$args; } } # Rules borrowed from `.htaccess` to hide certain paths from clients location~^/nextcloud/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/){return404;} location~^/nextcloud/(?:\\.|autotest|occ|issue|indie|db_|console){return404;} # Ensure this block, which passes PHP files to the PHP process, is above the blocks # which handle static assets (as seen below). If this block is not declared first, # then Nginx will encounter an infinite rewriting loop when it prepends # `/nextcloud/index.php` to the URI, resulting in a HTTP 500 error response. location~\\.php(?:$|/){ # Required for legacy support rewrite^/nextcloud/(?!index|remote|public|cron|core\\/ajax\\/update|status|ocs\\/v[12]|updater\\/.+|ocs-provider\\/.+|.+\\/richdocumentscode(_arm64)?\\/proxy)/nextcloud/index.php$request_uri; fastcgi_split_path_info^(.+?\\.php)(/.*)$; set$path_info$fastcgi_path_info; try_files$fastcgi_script_name=404; includefastcgi_params; fastcgi_paramSCRIPT_FILENAME$document_root$fastcgi_script_name; fastcgi_paramPATH_INFO$path_info; fastcgi_paramHTTPSon; fastcgi_parammodHeadersAvailabletrue;# Avoid sending the security headers twice fastcgi_paramfront_controller_activetrue;# Enable pretty urls fastcgi_passphp-handler; fastcgi_intercept_errorson; fastcgi_request_bufferingoff; fastcgi_max_temp_file_size0; } # Serve static files location~\\.(?:css|js|mjs|svg|gif|ico|jpg|png|webp|wasm|tflite|map|ogg|flac)${ try_files$uri/nextcloud/index.php$request_uri; # HTTP response headers borrowed from Nextcloud `.htaccess` add_headerCache-Control\"public,max-age=15778463$asset_immutable\"; add_headerReferrer-Policy\"no-referrer\"always; add_headerX-Content-Type-Options\"nosniff\"always; add_headerX-Frame-Options\"SAMEORIGIN\"always; add_headerX-Permitted-Cross-Domain-Policies\"none\"always; add_headerX-Robots-Tag\"noindex,nofollow\"always; add_headerX-XSS-Protection\"1;mode=block\"always; access_logoff;# Optional: Don't log access to assets } location~\\.woff2?${ try_files$uri/nextcloud/index.php$request_uri; expires7d;# Cache-Control policy borrowed from `.htaccess` access_logoff;# Optional: Don't log access to assets } # Rule borrowed from `.htaccess` location/nextcloud/remote{ return301/nextcloud/remote.php$request_uri; } location/nextcloud{ try_files$uri$uri//nextcloud/index.php$request_uri; } } }"
    }
}