{
    "id": "dbpedia_4417_3",
    "rank": 59,
    "data": {
        "url": "https://coreos.github.io/ignition/getting-started/",
        "read_more_link": "",
        "language": "en",
        "title": "Getting Started",
        "top_image": "https://coreos.github.io/ignition/favicon.ico",
        "meta_img": "https://coreos.github.io/ignition/favicon.ico",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Ignition documentation",
        "meta_lang": "en",
        "meta_favicon": "/ignition/favicon.ico",
        "meta_site_name": "Ignition",
        "canonical_link": "https://coreos.github.io/ignition/getting-started/",
        "text": "Providing a Config\n\nConfig Validation\n\nTroubleshooting\n\nGathering Logs\n\nIncreasing Verbosity\n\nValidating the Configuration\n\nEnabling systemd Services\n\nIgnition is a low-level system configuration utility. The Ignition executable is part of the temporary initial root filesystem, the initramfs. When Ignition runs on the first boot, it finds configuration data in a named location for a given environment, such as a file or URL, and applies it to the machine before switch_root is called to pivot to the machine’s root filesystem.\n\nIgnition uses a JSON configuration file to represent the set of changes to be made. The format of this config is detailed in the specification and the MIME type is registered with IANA. One of the most important parts of this config is the version number. This must match the version number accepted by Ignition. If the config version isn’t accepted by Ignition, Ignition will fail to run and the machine will not boot. This can be seen by inspecting the console output of the failed machine. For more information, check out the troubleshooting section.\n\nProviding a Config\n\nIgnition will choose where to look for configuration based on the underlying platform. A list of supported platforms and metadata sources is provided for reference.\n\nThe configuration must be passed to Ignition through the designated data source. Please refer to Ignition config examples to learn about writing config files.\n\nThis data source can be overridden by specifying a configuration URL via the kernel command-line options.\n\nThe Linux distro may provide a base config which specifies default configuration, such as a default user. This data source is merged with this base config before it is applied. See the operator notes for more information on config merging.\n\nConfig Validation\n\nTo validate a config for Ignition there are binaries for a cli tool called ignition-validate available on the releases page. There is also an ignition-validate container: quay.io/coreos/ignition-validate.\n\nExample:\n\nTroubleshooting\n\nGathering Logs\n\nThe single most useful piece of information needed when troubleshooting is the log from Ignition. Ignition runs in multiple stages so it’s easiest to filter by the syslog identifier: ignition. When using systemd, this can be accomplished with the following command:\n\nIn the event that this doesn’t yield any results, running as root may help. There are circumstances where the journal isn’t owned by the systemd-journal group or the current user is not a part of that group.\n\nIncreasing Verbosity\n\nIn cases where the machine fails to boot, it’s sometimes helpful to ask journald to log more information to the console. This makes it easy to access the Ignition logs in environments where no interactive console is available. The following kernel parameter will increase the console’s log output, making all of Ignition’s logs visible:\n\nValidating the Configuration\n\nOne common cause for Ignition failures is a malformed configuration (e.g. a misspelled section or incorrect hierarchy). Ignition will log errors, warnings, and other notes about the configuration that it parsed, so this can be used to debug issues with the configuration provided. See also the Config Validation section.\n\nEnabling systemd Services\n\nWhen Ignition enables systemd services, it doesn’t directly create the symlinks necessary for systemd; it leverages systemd presets. Presets are only evaluated on first boot, which can result in confusion if Ignition is forced to run more than once. Any systemd services which have been enabled in the configuration after the first boot won’t actually be enabled after the next invocation of Ignition. systemctl preset-all will need to be manually invoked to create the necessary symlinks, enabling the services.\n\nIgnition is not typically run more than once during a machine’s lifetime in a given role, so this situation requiring manual systemd intervention does not commonly arise."
    }
}