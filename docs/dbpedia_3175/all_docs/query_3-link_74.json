{
    "id": "dbpedia_3175_3",
    "rank": 74,
    "data": {
        "url": "https://stackoverflow.com/questions/427083/are-functional-languages-and-programming-models-like-mvc-just-the-next-big-fad",
        "read_more_link": "",
        "language": "en",
        "title": "Are functional languages and programming models like MVC just the next big fad?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://www.gravatar.com/avatar/d2bba3700fd3a3e8cc12888edd980525?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/9bdc85000e09c0fb6c07e1572c1c301c?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/CrVFH.png?s=64",
            "https://www.gravatar.com/avatar/7dd45a27a5616b8a5608b84007e4e08f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/a007be5a61f6aa8f3e85ae2fc18dd66e?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/4ca890b0b9208820a569977d9ae5d1a2?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/0b3bc28f454da3c40c41b842a5b670e6?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/WgFo2.png?s=64",
            "https://www.gravatar.com/avatar/8f41595db400be30176f6f04630c2842?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/94066dfa49c2feb14706cb081848fda7?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/344c1438420ce1831763358a68c6f27f?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/bba462f9ff611dceeb4dfeb74f1d1ae1?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/3891f38e5165127cac92a4e9e4aba688?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/427083/ivc/5f09?prg=f02d314e-e550-42c4-9e3e-64c2c5940701"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Shea Kauffman Shea Kauffman"
        ],
        "publish_date": "2009-01-09T04:40:43",
        "summary": "",
        "meta_description": "Of late, I've been hearing many good things about functional programming languages such as F#.  Additionally [and unrelated], I'm also noticing MVC is starting to get a lot of exposure - perhaps si...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/427083/are-functional-languages-and-programming-models-like-mvc-just-the-next-big-fad",
        "text": "Neither is a fad, and neither is going away any time soon, but in reality I only expect to see one of those two in regular usage by most .NET devs...\n\nThere's a big difference between F# and ASP.NET MVC; F# is a functional language - this has a number of advantages in a few scenarios, but for most line of business programming a general purpose language such as C# is generally more usable. There is, however, lots to be gained from knowing about the functional style of programming (especially re immutability). I looked at F#, and I hope it improves my C# even if I never write any production code in F#. Fortunately, thanks to delegates and lambdas, C# can be used in a functional way, even if it isn't formally FP.\n\nASP.NET MVC, however, is a very different beast; MVC (more generally) is a known, established and trusted pattern that:\n\nvastly improves the testability of the presentation tier\n\nmakes a logical separation of concerns at the UI tier\n\nprovides more direct access to the underlying html of the page\n\nand a lot of other things (model binding, etc)\n\nOr another way: to a lot of people, it makes ASP.NET finally make sense; I fully expect to make a lot of use of ASP.NET MVC in the coming year.\n\nI find it very strange to lump functional programming and MVC in one question; I find them in no way related, other than that both are over 30 years old and very well established in their communities. Since I know something about functional programming I will speak to that.\n\nFunctional programming is almost 50 years old and is here to stay, although it is not clear if it will ever become mainstream. What is clear is that functional languages have acted as incubators and then proving grounds for features which eventually find their way into maintstream languages. Some examples:\n\nGarbage collection\n\nFirst-class function closures (added to Perl in 1995, in all scripting languages since then; present in Smalltalk-80; emulated in various ways in Java and C#)\n\nParametric polymorphism (templates in C++)\n\nIn the long run having functional techniques in your toolbox will make you a better programmer. Or as Eric Raymond says, learn Lisp. (Both Lisp and Haskell are loaded with powerful new ideas that will make your head explode in different, incomparable, but useful ways. F# is more of a consolidation of the very best proven ideas from functional languages, married to the .NET framework. In early 2009, it appears to have the best chance of becoming mainstream.)\n\nI've been seeing a lot of this sort of thing on SO these days. (See here, here, and here for a few examples.)\n\nAccording to Wikipedia, Lisp is the second oldest programming language still in common use today (beaten out by Fortran). Functional programming is no more a fad than the transistor, the mouse, the computer monitor, the hard drive, or, indeed, the very notion of a personal computer, none of which were present at Lisp's inception in 1958. It is true that functional programming may not be particularly useful in a typical business environment, but its waxing and waning levels of popularity do not make it a fad, nor do they make it a toy. Programmers with a keen appreciation of computing science understand that functional programming isn't so much an invention as it is a discovery--a deep insight into the fundamental nature of computation.\n\nMore to the point of your question, if programming is your day job (as opposed to a true passion), is F# a waste of your time? It probably is, in the sense that it is not likely to ever become popular enough to warrant including on your resume. It's also worth noting that if you do invest the time to learn F#, but none of your colleagues can understand your work, you may be doing more harm than good by choosing it as a development tool. That still doesn't make it a \"fad.\" :)\n\nAs for MVC, that's been around for a long time now--probably over a decade, but I haven't been keeping track. It's not a silver bullet, nor is it difficult to grasp; it's just another development pattern. It's also worth paying attention to the fact that MVC is not a standard or even a very well specified tech. There are many different ways to interpret MVC, and I would even venture to say that there is more than one right way to do it.\n\nMVC happens to be particularly useful for web development because web applications tend to have very messy front-end code (supporting all of those different browsers is a royal pain) and the last thing you want is to have your business logic mired in with the front-end unnecessarily. Unlike F#, learning MVC is not a waste of time even if programming is strictly just a day job for you, because if you ever find yourself working on a web application, adherence to MVC (even simply loose adherence to it) can save your ass from professional embarrassment.\n\nAs to MVC, it was introduced in 1979. I remember implementing it for the first time in my career in Aldus Persuasion for Windows (a one-time competitor to Powerpoint) in the 1988/89 time frame. MVC frameworks are all the rage in RIA applications such as Adobe Flex-based web programming (Cairngorm, Mate, PureMVC, etc.).\n\nIn my company our first Flex app was not done as MVC, yet we had multiple views into the model. It got to be a mess. We refactored to MVC and life got way better for the developers.\n\nAs far as I can tell it's only the folks that try to implement MVC on the server-side via any of the various web frameworks, that are the ones the complain about MVC. The Fallacies of Distributed Computing would have informed them that it was a bad idea to do MVC where the presentation rendering layer is separated by the gulf of a network connection. Distributed MVC is just as bad as distributed objects.\n\nWith RIA web apps, such as those based on Flex, MVC is done purely on the client side - just as it was introduced in Smalltalk graphical workstations back in '79. RIA clients then only use async service calls and/or messaging to communicate with the server-side.\n\nFor an app that did nothing but throw up a single CRUD form, then yeah, MVC might be overkill. But for rich GUI apps that have a fair amount of complexity going on, MVC can remain a very sensible pattern to adopt.\n\nIm sure C# and VB will be there forever... but there will also be a lot of people going in the edge with new technologies. They will be able to do more with less code and you will be able to do more with the code you already have. So dont worry it will be a fair fight.\n\nEven tho... learning more stuff makes you better programming so... its up to you!\n\nwhat im saying is that theres a lot of fuzz on how learning more languages is great to know what each language is capable of and then use all that information to make better code. But if you spend that same time dominating a language, your gona be fine."
    }
}