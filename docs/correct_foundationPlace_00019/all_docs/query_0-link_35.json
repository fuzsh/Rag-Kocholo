{
    "id": "correct_foundationPlace_00019_0",
    "rank": 35,
    "data": {
        "url": "https://herbsutter.com/2020/02/15/trip-report-winter-iso-c-standards-meeting-prague/",
        "read_more_link": "",
        "language": "en",
        "title": "Trip report: Winter ISO C++ standards meeting (Prague)",
        "top_image": "https://herbsutter.com/wp-content/uploads/2020/02/wg21-prague-social.jpg",
        "meta_img": "https://herbsutter.com/wp-content/uploads/2020/02/wg21-prague-social.jpg",
        "images": [
            "https://herbsutter.com/wp-content/uploads/2020/02/wg21-prague-social.jpg?w=1024",
            "https://0.gravatar.com/avatar/928f5830f12d8977791539452bfc25c92912322476f0725253697ee1c45ce036?s=80&d=identicon&r=G",
            "https://1.gravatar.com/avatar/70eae15ae7d4b84b7c6365603056d303224d6263144ecdc0874abfc2970564cb?s=48&d=identicon&r=G",
            "https://2.gravatar.com/avatar/bc57a442cadd61f94d468ecf54dbda7c9b3e9ea35d06307f858dce96a90231e4?s=48&d=identicon&r=G",
            "https://2.gravatar.com/avatar/e69a5b9cac67a40b41bf1155f42e5b2f48304ee5fd7e343eaa19d4991a22ab8f?s=48&d=identicon&r=G",
            "https://1.gravatar.com/avatar/40856543359d408ad05ceae49cb34f7624a2cc02cf0a2acee52bbdc787dfc3f5?s=48&d=identicon&r=G",
            "https://0.gravatar.com/avatar/928f5830f12d8977791539452bfc25c92912322476f0725253697ee1c45ce036?s=48&d=identicon&r=G",
            "https://0.gravatar.com/avatar/6b31d10a0c1417b243a2bb65f698a1c5dfeae4f82011d703c4349f9ca028dd8f?s=48&d=identicon&r=G",
            "https://0.gravatar.com/avatar/f9d9c684e61738e5d8970ef974fd225c9b739fe46563529994e49c20cc1ef474?s=48&d=identicon&r=G",
            "https://herbsutter.files.wordpress.com/2024/03/herb-cppcon-2021.jpg?w=300",
            "https://secure.gravatar.com/blavatar/fe7f5b0b83dba894afe26c42bcab33fe2d1246d9730ef182c72c0bff0dc26acb?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://secure.gravatar.com/blavatar/fe7f5b0b83dba894afe26c42bcab33fe2d1246d9730ef182c72c0bff0dc26acb?s=50&d=https%3A%2F%2Fs2.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png",
            "https://pixel.wp.com/b.gif?v=noscript"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Herb Sutter"
        ],
        "publish_date": "2020-02-15T00:00:00",
        "summary": "",
        "meta_description": "A few minutes ago, the ISO C++ committee completed its final meeting of C++20 in Prague, Czech Republic. Our host, Avast Software, arranged for spacious and high-quality facilities for our six-day meeting from Monday through Saturday. The extra space was welcome, because we had a new record of 252 attendees. We currently have 23 active…",
        "meta_lang": "en",
        "meta_favicon": "https://secure.gravatar.com/blavatar/fe7f5b0b83dba894afe26c42bcab33fe2d1246d9730ef182c72c0bff0dc26acb?s=32",
        "meta_site_name": "Sutter’s Mill",
        "canonical_link": "https://herbsutter.com/2020/02/15/trip-report-winter-iso-c-standards-meeting-prague/",
        "text": "A few minutes ago, the ISO C++ committee completed its final meeting of C++20 in Prague, Czech Republic. Our host, Avast Software, arranged for spacious and high-quality facilities for our six-day meeting from Monday through Saturday. The extra space was welcome, because we had a new record of 252 attendees. We currently have 23 active subgroups, and met in nine parallel tracks all week long; some groups ran all week, and others ran for a few days or a part of a day, depending on their workloads.\n\nSee also the Reddit trip report, which was collaboratively edited by many committee members and has lots of excellent detail. You can find a brief summary of ISO procedures here.\n\nC++20 is done!\n\nPer our published C++20 schedule, we finished technical work on C++20 at this meeting. No features were added or removed, we just handled fit-and-finish issues including addressing all of the 378 national body comments we received in last summer’s international comment ballot (Committee Draft, or CD). The next step is that the final document will be sent out for its international approval ballot (Draft International Standard, or DIS) and will be published later this year.\n\nIn addition to C++20 work, we also had time to make progress on a number of post-C++20 proposals, including continued work on contracts, networking, executors, reflection, compile-time programming, pattern matching, and much more. We also discussed ABI stability and took polls that said we are definitely not willing to guarantee pure ABI stability forever, and we are ready to consider proposals (especially ones that enable performance improvements) even if they may require an ABI break or migration on some platforms for affected types and functions, but that we aren’t ready to take a broad ABI break across the entire standard library. This is an important and meaningful decision, and an engraved invitation for proposal authors to bring proposals (and to bring back previously rejected ones) for their “wish lists” of such potentially-affected features, as soon as our next meeting this June. I’m looking forward very much to seeing how this can spur further C++ standard library innovation for C++23.\n\nSpeaking of C++23…\n\nC++23 schedule and priorities\n\nFor the first time, we formally adopted a schedule and a planned set of feature priorities for the next round of standardization, C++23, right at its outset.\n\nThe schedule for C++23 reaffirms that we’ll use the same meeting and feature-freeze deadline schedule that we used for C++20. Note that this means we are “only” two years away from the feature freeze of the next standard! Two years has a way of going by really quickly – “warning: objects in the schedule are closer than they appear.”\n\nThe priorities for C++23’s feature set are to focus our work on the following, emphasizing upgrades to the standard library:\n\n“Finishing C++20” with standard library modules and library support for coroutines. This will let programmers use the standard library via modules, and easily use coroutines with futures and other common types right “out of the box” (today some additional coding or a helper library is required).\n\nAdding executors and the networking library that relies on executors.\n\nOn the language side, we will prioritize progressing the following as quickly as possible, for C++23 “if possible” but we’ll know better in a year or two whether they are likely to make it for 23 or not:\n\nReflection, including introspection to query the program, compile-time programming to manipulate the results, and generation to inject new entities into the program.[1]\n\nPattern matching, which also progressed at this meeting with continued feedback on proposals.\n\nContracts, which we spent another half-day on in SG21 on Friday afternoon.\n\nAs a second priority, the wording groups will also prioritize bug fixing higher than in the past, to pay down technical debt faster.\n\nThere will also be plenty of work on other features, so do expect C++23 to contain other work too. The purpose of setting these priorities is to mainly to say that at any given meeting we are not going to spend a lot of time working on other proposals until we have made as much progress as possible on the above ones first, that’s all. This way at each meeting we will give these proposals’ authors the maximum help and direction we can, so they can get as much further work done in the gap until the next meeting.\n\nFinally, note that “priorities” doesn’t mean “commitments.” Prioritizing these features is not a commitment that they’ll all be done in time for C++23, though we hope that most of them may likely be. Watch the next two years’ trip reports and you’ll get a good sense of how we’re making progress against these priorities.\n\nWrapping up\n\nThank you again to the 252 experts who attended this final meeting of C++20, and the many more who participate in standardization through their national bodies!\n\nBut we’re not slowing down… in less than four months we’ll be meeting again in Varna, Bulgaria, for the first meeting to start adopting features for C++23. I look forward to seeing many of you there. Thank you again to them and to everyone reading this for your interest and support for C++ and its standardization.\n\nNotes\n\n[1] For those who are interested in my metaclasses proposal, this is ~98% of metaclasses – as soon as this reflection work lands, the only thing that will be left for me to propose to complete metaclasses is to add a declaration syntax like class(M) as “just” a minor syntactic sugar for invoking a consteval function that takes a meta::info reflection of the class body as input."
    }
}