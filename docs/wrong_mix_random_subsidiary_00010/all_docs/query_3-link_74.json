{
    "id": "wrong_mix_random_subsidiary_00010_3",
    "rank": 74,
    "data": {
        "url": "https://archive.org/stream/Custom_TRS-80_and_Other_Mysteries_1982_Dennis_Bathory_Kitsz/Custom_TRS-80_and_Other_Mysteries_1982_Dennis_Bathory_Kitsz_djvu.txt",
        "read_more_link": "",
        "language": "en",
        "title": "Full text of \"The custom TRS",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://archive.org/services/img/etree",
            "https://archive.org/services/img/librivoxaudio",
            "https://archive.org/services/img/metropolitanmuseumofart-gallery",
            "https://archive.org/services/img/clevelandart",
            "https://archive.org/services/img/internetarcade",
            "https://archive.org/services/img/consolelivingroom",
            "https://archive.org/images/book-lend.png",
            "https://archive.org/images/widgetOL.png",
            "https://archive.org/services/img/tv",
            "https://archive.org/services/img/911",
            "https://analytics.archive.org/0.gif?kind=track_js&track_js_case=control&cache_bust=1828715904",
            "https://analytics.archive.org/0.gif?kind=track_js&track_js_case=disabled&cache_bust=1803726711"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://archive.org/images/glogo.jpg",
        "meta_site_name": "",
        "canonical_link": "https://archive.org/details/Custom_TRS-80_and_Other_Mysteries_1982_Dennis_Bathory_Kitsz",
        "text": "Full text of \"The custom TRS-80 & other mysteries\"\n\nSee other formats\n\nTKS-80 INFORMATION ftrRir* VOI.tlMF II ih'iiuis liathortj it its- THE CUSTOM THS-80 & OTHER /MYSTERIES 4 *< \\ % oj* ■w^y- > y %>> M 3/J ' £3 ftv\\\\^,x ■. r,; ■. . H. ^ ii -vr- ^e guide to c 0s/0/ ^ TRS-80 INFORMATION SERIES - VOLUME III Dennis HaihoryHitsz THE CUSTOM TR&80 «$? OTHER MYSTERIES David Moore — Editor Thomas Nelson — Artistic Direction and Backup Vocals Steve Rick and Charles Trapp — Graphics and Figures H. C. Pennington — Cover Design First Edition First Printing February 1982 Printed in the United States of America. Copyright © 1982 by Dennis Bathory Kitsz ISBN 936200 02 2 All rights reserved. No Part of this book may be reproduced by any means without the express written permission of the publisher. Example programs are for personal use only. Every reasonable effort has been made to ensure accuracy throughout this book, but neither the author or publisher can assume responsibility for any errors or omissions. No liability is assumed for any direct, or indirect, damages resulting from the use of information contained herein. Published by IJG Inc 1260 West Foothill Blvd., Upland, CA 91786, USA 714 - 946 5805 Radio Shack and TRS-80 are registered trademarks of the Tandy Corporation. Supple- ments to Chapters in this book have appeared in part in The Alternate Source, 1806 Ada Street, Lansing, Michigan 48910. IMPORTANT Read This Notice Any warranty that may exist on any TRS- 80 computer hardware product that has been modified, altered, or has the seal broken is VOID. Any software or computer hardware modi- fications are done at your own risk. Neither the PUBLISHER nor the AUTHOR assumes any responsibility or liability for loss or damages caused or alleged to be caused directly or indirectly by applying any modification or alteration to software or hardware described in this book, including but not limited to any interruption of service, loss of business, anticipatory profits or consequential damages resulting from the use or opera- tion of such modified or altered computer hardware or software. Also, no patent liability is assumed with respect to the use of the information contained herein. While every precaution has been taken in the preparation of this book, the PUBLISHER and the AUTHOR assume no responsibility for errors or omissions. The reader is the sole judge of his or her own skill and ability to perform the modi- fications and/ or alterations contained in this book. The below statement is the apparent policy of the TANDY CORP. and its subsidiary RADIO SHACK as under- stood by the publisher. The following statement is not endorsed by the TANDY CORP., but is presented for the reader's information and as a warning regarding the consequences of modifying or altering the TRS-80 computer hardware in any way. IJG, Inc., assumes no responsibility for the accuracy of the following statement The reader is warned that it is the apparent policy of the TANDY CORP. and its subsidiary RADIO SHACK to refuse re- pair service on any TRS-80 computer product that has been modified or altered in any way whatsoever. However, a Radio Shack Computer Service Center, at the discretion of the individual Service Center, may repair an altered or modified TRS-80 computer upon the customer's prior agreement to pay any additional charges that may be incurred to remove or repair any and all alterations or modifications that may exist and thereby return the computer hardware to factory specifications. 2 Editor's Note ABOUT THE AUTHOR Dennis Bathory Kitsz is a composer and active defender of the contemporary arts. However, this approach to life has resulted in pecuniary disaster which could only be ameliorated by working occasionally as a librarian, book editor, printing press operator, truck driver, newspaper editor, laborer, secretary, graphics designer, electronics technician, and typist. He is currently the director of the Dashuki Music Theatre, the president of Green Mountain Micro, and a regular columnist for several microcomputing magazines. He lives in Roxbury, Vermont with his wife Claire Manfredonia, as well as Aida, Mehitabel and Smokimoto (the cats), Fritz (the dog), and Fred and Ethel (the finches). Yd like to say a word of thanks to Dennis Kitsz for helping us through the entire range of Murphy's laws that were proven, over and over again, in the preparation of this book. . . Fd also like to thank: Jim Perry, for teaching me to swim the old-fashioned way; Jim Murphy of Bishop Graphics, for his typing ability; Thomas Scott Nelson, for wandering through at a good time; Nancy DeDiemar, for the kind of help you don't find anymore; H.C. Pennington, for lending a hand with the impossible parts; Bruce Stuart, for lending a hand with Harv; and Charles Trapp for sticking with me to the end . . . which kept refusing to arrive. And for those of you who have waited so long for this book, we believe you'll find the wait was worthwhile. There have been many updates of information that couldn't have been included a year ago, and several extras — including an additional chapter providing 111 cures for the common crash. David E. Moore Febuary 1982 Contents Contents Preface 6 Acknowledgments 7 Introduction: The Tools You Will Need 8 Building a Power Supply 13 Chapter 1: Getting Inside 19 What You See 19 Hesitation 20 So Open It Already! 21 Put It Back 23 The Hidden Insides 23 Supplement to Chapter 1: Power-Up Routines of the TRS-80 25 Chapter 2: Copacetic Comprehension 31 Number Systems 31 Box / Converting Binary to Decimal .... 32 Box / Reading the Pins 33 Digital Logic Devices 34 Into Machine Language 36 What's in the Memory Map? 38 Setting MEMORY SIZE? 40 Level I vs Level II vs Level III 40 Important Hardware Areas 42 Peripheral Addressing 51 Box / Wire- Wrapping Technique 51 Box / Soldering Technique 52 Supplement to Chapter 2: On the Keyboard Scan 53 Chapter 3: Software Modifications 57 Sophisticated Debouncing 58 Upper/Lower Case Driver 59 Box / Using the Editor/Assembler 60 Patching the BASIC Interpreter 62 Box / Creating BASIC Tokens 63 Packing BASIC with Machine Code 66 Sound and Sound-Effects Generation ... 70 What's in a List? 70 Auto-Execution of BASIC Programs .... 71 Machine Language Monitor 72 Undoing NEW 73 Resetting MEMORY SIZE? 74 Peek That Keyboard 75 The Make-'Em-Sweat Memory Test 77 Supplement to Chapter 3: On Cassette Input/Output 78 Voice I/O 83 Chapter 4: Simple Hardware Modifications 85 Expanding the Memory 86 Box / Keep It Clean! 86 Box / Opening and Closing the Case .... 87 Box / Handling Integrated Circuits 89 Rescuing the Reset 91 Up-Front Reset 92 Working by the Woodstove 93 Box / Making It Look Manufactured .... 96 Working by the Woodstove - II 96 Hexadecimal Keypad 98 Reversing the Video 103 Box / Clumsy? Me Too Do This First 105 The Custom TRS-80 Contents Lower Case with Upper 106 One by One (Individual Reverse Video) . . . 106 Box / Carpentry Considerations II 107 Stepping on the Accelerator 110 Level I and Level II Together 112 Supplement to Chapter 4: On Relocatable Code 115 Chapter 5: How the System Expands 121 Radio Shack's Expansion Interface .... 121 The Expansion Box Ground Problem .... 123 Expandingto32Kand48KMemory 124 Speeding Up Newer Expansion Boxes . . . . 126 LNW and Microtek Expansion Boxes .... 126 Box / Using Those 4K Leftovers 127 Special Section: Two Other 80s 129 Supplement to Chapter 5: About Interrupts 134 Chapter 6: More Hardware Modifications 141 Making HALT Work 141 Fixing the Stuck Relay 142 High- Resolution Graphics 143 BASIC ROMs Replaced by EPROMs .... 152 Powering Up to a Monitor on the Side 153 Box / How Interpreters Work 154 Supplement to Chapter 6: The CLOAD Problem 156 Chapter 7: Controlling the World 161 Controlling Electrical Appliances 162 Analog-to- Digital, Digital-to- Analog .... 164 Making Music and Sound Effects 166 Chapter 8: Adding to the System 175 Parallel Printer Interface 175 Talking With the World — The Computer as Boss 177 Real-Time Clock/Calendars 182 Box/ Edge Card Connectors: What's Up? ... 187 Bank Selecting Machine Code in ROM ... 189 Box / The Romplus Board 198 The Micro Front Panel Monitor 199 Chapter 9: Keeping It Safe: Mass Storage 203 Disk Drives 204 A Pictorial Tour of A Disk Drive 205 A Heavy Dose of DOSes 209 Box / A Garden Full of Varieties 209 Exatron Stringy-Floppy 210 Pictorial Tour of the Stringy- Floppy 210 Fastload and Other Systems 211 High Speed Cassette Loading 213 A Paper Tape Reader 214 An 8-Track Mass Storage System 217 Chapter 10: And Now It's Broken 229 Box / Replacing the Keyboard Cable ... 229 Home and Business Environments 231 When the Memory Crashes 232 Box / Cleaning the Edge Connectors . . . 233 Box / Using an Oscilloscope 234 Aligning the Video 235 Routine Maintenance 235 Care of Peripherals 235 Machine Language Diagnosis Loops .... 236 Chapter 11: 111 Cures for the Common Crash Common Problems and Their Cures .... 241 I. SOFTWARE 241 II POWER 242 in. EDGE CONNECTORS 243 W. MEMORY 244 V. FIRMWARE 245 VI. RS-232 246 VIL DISK 246 VIE. TAPE 249 LX HARDWARE 250 X. KEYBOARD 253 XL VIDEO 253 XH. RFI 255 XLLI HEAT 255 XIV. PRINTER 255 XV. USER PROCEDURE 255 Last Thoughts 257 Index 259 Appendix I: Parts Suppliers 267 Appendix II: Bibliography 268 Appendix III: ASCII Codes and Conversion Tables ... 271 Appendix IV: KEEPIT 3.2 277 Appendix V: Chip Pinouts 283 Appendix VI: Glossary 313 Appendix VII: Parts lists & PC Boards 323 The Custom TRS-8 5 Preface Preface A few years ago, when CB was king, a company riding high with those 10-4's hesitantly announced a very expensive new product. A few typed sheets with hand drawings were all store sales personnel had to explain this small 'home and business computer'. Neither Tandy nor we few first customers had any idea that the TRS-80 would become the first true home computer, the Model T of the microprocessor age. There's no question that the 'Trash-80' carries the burden of some weak engineering and corner-cutting decisions made at the time of the CB decline, when this personal computer could have been Radio Shack's Waterloo instead of its new Wunderkind. But, like Rabelais's Gargantua, the new child soon outgrew its expectations - as well as its clothes. And so everyone from the inner sanctum of the Tandy Corporation to the cluttered backrooms of a thousand hobbyists began the attempt to keep this new child content and amused. Thus was born the custom TRS-80. From the very beginning, and from seemingly nowhere, came forth educated hordes who would prod, poke, paint, primp, and prime this humble computer into becoming more than itself - a five-hundred-dollar supercomputer. The machine couldn't always do it. Tandy took the rap, but also took the cash. Bruised and broken 80's littered the electronic landscape, yet also unrecognizably modified TRS-things took on tasks as diverse as business accounting, industrial control, and music making. In this book, pathways to creating your own customized TRS-80 will be explored. The machine will be added to, opened and altered, its software patched, its uses expanded, and its breakdowns cured. If you expect that your personal computer can do more than a fancy game of video violence, then I hope you will join me in these explorations. As this book was completed, Tandy announced that the TRS-80 - now called the Model I - is history. Production has ended, and that's a good thing. The pressure is now off; there is no more Trash-80 to defend, but there still is a TRS-80 to put to use. This book has been put together to please everyone. Of course it will not. Although I can't expect to help lead each of you through the intricacies of a TRS-80, 1 hope that, whether your wish is to jump right in and solder every wire or to learn slowly and deliberately the theory and practice of the machine, you can gain some insight from this volume. Chapters have been arranged with basic theory and concepts toward the front. Special sections discussing the computer's software have been included to add some dimension to the concepts, and some of my own opinions, thoughts and tirades have been boxed throughout the text. I have seen and used nearly all the commercial products presented in this book; comments, therefore, are based on first-hand knowledge, unless otherwise noted. I have attempted in the appendices to present lists of those suppliers, publishers, terms, etc., that every TRS-80 user might want to know and not know how to find. As the TRS-80 joins the computer museum along with the ENIAC, UNIVAC, IBM 370, and others, it still holds a more special place than many of those - with possibly half of million of its kin in use in the United States, Canada, Great Britain, Australia, Germany, and other countries. With that in mind, this book may need an occasional update. I would appreciate receiving updated information, corrections, suggestions and criticism. Though I cannot promise a personal answer, those suggestions will be reflected in future printings of this book. Dennis Bathory Kitsz Roxbury, Vermont February 1981 6 The Custom TRS-80 Acknowledgments Acknowledgments Someday the interdependence i\\nd cooperation among authors and program- mers in this infant field will be chronicled. I can think of a hundred books or programs or articles or newsletters, each one of which gave me an essential part of the insight needed to create this volume, and without any single one of which that creation would have been impossible. Among the programmers, authors, and friends . . . Philip K. Hooper the Codesmith, for teaching me the simplicity and elegance of machine code; Ron Gillen of Lab Service, Inc., for keeping me awash in new information; Nick \"Spike\" Maggio of the Philadelphia/Castor Avenue Radio Shack, for risking life, limb and manager- ship on Tandy's red tape battlefield, and for teaching me ventriloquism; Roger Fuller of Fuller Software and Bryan Mumford of Mumford Micro Systems, for two reference books I couldn't do without; Jim Perry, for his entrepreneurial acumen and refreshing lack of humility; Michael Comendul of 80 Microcomputing, for pointing out that English is a difficult second language for most programmers; Debra Marshall of the same publication, for pointing out that it doesn't have to be that way; Dave Moore and Thomas Scott Nelson of IJG, for saving this book from disaster; Charley Butler and Joni Kosloski of The Alternate Source, for my author's carte blanche; Dave Beetle of the pioneer- ing On-Line, for really starting it all; Harv Pennington for jollies; and for many and varied favors: Bill Johnson (Cleveland Users Group), Vaughn Jupe, Ron Troxell (Personal Micro Computers), Don Stoner (The Peripheral People), Lee Perryman (The Associated Press), Wayne Green (himself), Eric Maloney (Kilobaud), Jack Decker, Mike Barton (MSB Electronics), Leo Waltz, Jerry Sabin, Fred Blechman, Don Stevens, Walt Auch HI, Vince Schulz, Bill Archbold (Archbold Electronics), Al Abrahamson (Norwalk Users Group), Bill Barden, Don Valentine (Tecmark Associates), Harold J. Matts, Stan Ockers, Thomas Frederick (ABS Suppliers), Les Logan (TCS Newsletter), Brian Harron (Ottawa Users Group), John Bilotta, Gregg Shadel, Don C. Tatum (Barre-Montpelier Radio Shack), Andrew hav/,the many manufacturers represented herein, and the usual coterie of others forgotten and maligned Special thanks to the anonymous author of the TRS-80 Technical Reference Manual for a job well done. This book is dedicated to my wife, Claire Manfredonia, because she'll do most any- thing for a good gag. One day she walked into a serious meeting at an engineering company and hit me in the face with a blueberry pie. I won't tell you about the marshmallow fluff. d.b.k. March 1982 The Custom TRS-80 The Tools You Will Need Introduction The Tools You Will Need Your basic TRS-80, with some attachments and software, is a thousand-dollar item. So I'll not encourage you to use dime-store tools. Buy the best you can afford, keep them clean, and reserve them just for use on the '80. Don't double up tools with the family auto. You may not need them all, but here is my customizer's toolbox: A medium-sized flat-blade screwdriver and Phillips blade screwdriver (a reversible combination is ideal). With these you open cases and remove cabinets. A jeweler's set of flat and Phillips blade screwdrivers; hex nut drivers are optional. These drivers can be used to align tape heads, help make delicate wire bends, adjust trimmer controls and even repair watches. One very thin screwdriver for lifting integrated circuits out of sockets. This will be its only purpose, but the first time you break the pins off a $10 jumper cable, you'll wish you'd used it! Small scissor-type cutters (manicuring types are excellent). These will be used for snipping leads in tight spots. Small diagonal wire cutters and/or front- cutting 'nippers'. Your general purpose cutters. They are fast and easy to use, but not to be used for heavy wire around the house. Needlenose pliers (two pairs, normal and 90-degree types). You'll need these for bending leads, also extracting bits and pieces you've dropped into a nest of wiring. An X-acto type knife, with a strong blade and handle you feel comfortable with. Since this will be used to cut delicate solder traces, you should be able to handle it deftly. I use a single edged razor blade, but have leather fingers! A scalpel, if you can get one. For very delicate trimming and scraping; a dental pick for pulling off solder balls or lifting parts off a board (get this item from an obliging dentist — they are often discarded when worn); tweezers and needlepoint hooks. The latter come in handy for tracing incorrect wire-wrapped connections. Rat-tail, triangular, and flat files. These are only for sprucing up the cosmetics, so if you don't care how it looks, save a few bucks. A wire-wrapping tool. The decision on this can be tough. If you can afford it, get one of the electrically operated slit-and- wrap types. Stay away from 'just wrap' tools, since they depend on the sharpness and quality of the sockets; also they are useless for wrapping capacitors or resistors. I use a simple double-ended tool sold by Radio Shack for about $5. It wears out after a thousand or so connections, but it fits my hand well, and is not clumsy like some electric units. A soldering iron. The decision is not easy. Should you spend top dollar and get an expensive one or buy a cheap unit that can be discarded when it wears out? I use a $5 8 Introduction The Tools You Will Need To help you prepare for each project, the following graphic symbols have been used as a key to the tools needed for each project: Phillips screwdriver Flat-blade screwdriver Sockets JCS Thin lifting tool Scissors type cutters Solder Wire cutters Needlenose pliers soldering iron which can be junked when it gets beat, but my editor uses the best he can get (a $30 temperature-controlled one). I file a set of $1 tips to my satisfaction, and lubricate the threads with white heat sink grease. This way I have a few different tips at my disposal; with plated bits you never file the tips. A Multimeter. The voltage regulators in your TRS-80 are very good, so any problems will usually show up as gross errors. This offers you a way out of buying an expensive multimeter; for most of these projects, the $10 pocket variety will suffice. However, for lots of repair work a better meter is in order; I use a $40 type (not digital!) for my work. An oscilloscope. For the projects, no. But for repairs, yes. Don't panic thinking of a thousand dollars for a digital scope, because an old color television scope will do perfectly well; they can be found in the bargain bins for $50 to $100. If it saves you Various files Wire wrapping tool Soldering iron X-acto knife or blade Solder wick Multimeter Oscilloscope Drill a $100 repair bill, you've paid for it. Mine is an old RCA type WO-90Q, built for early color TV, and just fine for the bulk of TRS- 80 work. You will also need supplies in the tool box. Among these are: Solder. Get the best you can afford. There's nothing so unpleasant as a great glob of the stuff between two traces on a board. Order the multicore rosin flux type, and stay away from most the off-the-shelf stuff. Remember, multicore rosin type only, and the finer the gauge the better. Never use acid flux solder, as used by plumbers and electricians. Soldering wick. Marketed under the names Spirig, Solder Up and Solder Wick, it's a copper braid impregnated with soldering flux. When heated with the soldering iron it absorbs Solder off the board, thus freeing components. Don't do without this stuff unless you like fried circuit boards and burnt fingers. The Custom TRS-80 9 Schematics Wirewrap wire. Also called by the trade name Kynar, this is 28- or 30-gauge single- strand wire used to interconnect the pins of wire wrap sockets. It comes in an assortment of colors; get them all, so you can keep data, address, power and ground lines separate. Multiconductor cable. The more flexible wire is easier on the coordination, but also the most expensive. Best buy is Spectra Twist, and its kin, from surplus houses. If you need jumper cables, buy them; Making a two-ended, 40-pin jumper cable can be three hours of maddening work. Bus wire. This is solid, uninsulated stuff. A small roll will do for a lifetime. I use it for wiring, securing bulky capacitors to circuit boards, holding bundles of things together and for making special tools. Miscellaneous. Sockets, perforated board, mounting hardware, and such will always be needed. Details about supplies needed for each project in this book will be presented with the project. Except for integrated circuits, most of the items are available right off the shelf at a local Radio Shack or other electronics supply house. Schematics Schematic drawings of electronic circuits are identical to maps. They show routes, direction, junctions, relative importance and functions of locales, two-way and one-way streets, traffic flow and congestion and so forth. At first, the symbols may seem like the mysterious hieroglyphics of a secret society, but their symbolism can soon become as familiar as a roadmap. Even strange places can be assessed from afar. First, the symbols. A line is a wire running from some point in the circuit to another. Consider the sketches below: The first drawing is a simple wire. The electrical path moves from one point to another, in either direction. By following the path of a wire through a circuit, the pattern of connections can be discovered. When wires are forced to cross one another, but not to connect with each other, it must be made clear. On a roadmap, non-intersecting roads are shown either by a break in one of the intersecting lines, or in showing interstate highways, merely by crossing one 'below' the other in a different color. Sketches b, c and d are the three ways of drawing wires which do not connect to each other. The first, simply crossing them, is the most common. The second method places a semicircular bump in the crossing path, and is used by Sams Publications in this country and commonly in Europe. Occasionally the broken path crossing shown in sketch d is used. When wires connect, a dot is used to clarify that a connection is to be made. Occasionally, you may come across earlier schematics which use the 'bump' method of showing unconnected wires. On these schematics, the lack of a bump indicates wires are connected. The wires (or patterns of copper etched on circuit boards) connect electronic components. Some of them are: RESISTOR CAPACITORS _L+_L r POLARIZED DIODE FET TRANSISTOR B«- C9- s\\ 0©- E«- Since this is a lesson in reading schematics and not electronic theory, I recommend that you turn to an excellent book by Forrest Mims, 'Engineer's Notebook', sold by Radio Shack, for an introduction to what each of these parts does. Briefly, the symbol for a resistor has the flavor of a long wire being compressed, meaning the electrical flow is somehow being resisted. The innards of a capacitor generally consist of metal foil separated by a non-conducting paper or plastic, and the capacitor's schematic symbol is fairly representative, with two plates facing each other but not joining. 10 Introduction Schematics Some capacitors are designed to fit into a circuit in only one direction; the positive (+) sign identifies that direction. These capacitors are identified on their bodies by a positive or negative sign. Another one direction (polarized) device is the diode. It consists of an arrowhead striking a barrier, implying that current may flow in the direction of the arrowhead, but not back across the plate. The body of a diode may have the diode symbol imprinted on it, or a band to indicate the 'barrier' end. The transistor usually has three connections (such connections are called 'leads' on small parts such as these). These leads are identified as collector, base and emitter or source, gate and drain, depending on the transistor type. This will be shown on the diagram, and the transistor will be imprinted with the information, or it will be provided on the package in which the transistor is sold. A few other symbols are: TRANSFORMER -y4sr- VARIABLE RESISTORS y -^AAr- 'D' CRYSTAL VARIABLE CAPACITORS The first is a transformer, whose job it is to take current fed into one coil and induce that current into a second coil. An iron or ferrite center (the parallel lines in the symbol) aids in efficient transfer of that current. The next three symbols look like resistors and capacitors, which they are. The added arrows show that their values may be varied; hence, they are called variable resistors and variable capacitors. The variable resistor is best known as the volume control on a television, and the variable capacitor is found as the tuning control on a table radio. The last symbol is a crystal, a piece of cut quartz capable of vibrating (resonating) under certain electrical conditions. Because a crystal is a very accurate, fixed, molecular device, it is capable of resonating (also called oscillating) at precise intervals. It is used for the master control of all pulses in the TRS-80. A few directional symbols are now in order: GROUNDS EARTH CHASSIS COMMON POWER +5 T PAD The first are known as grounds, and they are used to indicate a potential of zero or neutral voltage. The first of the trio is an earth ground, commonly used in radio, television and hi-fi schematics, but purists use it only to describe an actual connection to a ground spike or cold water pipe. The second is a chassis ground, indicating an electrical connection to the metal case which encloses the circuit. It is often (though incorrectly) interchanged with the earth ground. The last of the three grounds is a 'common' or neutral ground, and the one which is used to indicate the zero voltage line in the computer. All other voltages within the computer system are described in terms of their relation to this ground. The next quartet of symbols indicate power. The up arrow generally points to an actual voltage value (such as +5 or +12).The horizontal line indicates merely a 'high' level, that is, a connection is made to the normal positive power supply for the circuits in the system (+5 volts in the TRS-80). Non-positive voltages have no standard symbols. Negative (or below ground) voltages can have either a horizontal arrow or a down arrow, pointing to the voltage desired at that point. The schematics tells you that a connection is made to the voltage level shown! Another use of a horizontal arrow is to point to important connections to be made elsewhere on the schematic or on other sheets of the schematic. In the former case, the arrow is used because actually drawing the wire may clutter the schematic, making it illegible. When you see an arrow, be sure to find the other end of the connection described (indicating words such as 'clock', 'mem' or 'port FF' may be used as guides to where the connection is made). The Custom TRS-80 11 Be Tolerant Another useful symbol is the last of the group above, the pad. It indicates a significant connection, usually to another device or circuit board. Using this symbol makes it clear that the connection is to be made somewhere off the board on which you are working. In this book, I have not used these symbols where indicating a connection to the TRS-80; instead, the cable to the TRS-80 is shown with the connecting wires striking a wide vertical band marked 'TRS-80 Edge Connector'. Other types of off-board connections, however, are shown with the pads. The most common families of parts found in computer circuits, however, are shown below: o- €> AND OR C^ o NAND BUFFER (a) NOR lb) P~ INVERTER These symbols represent integrated circuits, those multiple lead, buglike packages that handle the bulk of the work in the computer. Briefly, these are logical building blocks. Sometimes there are several blocks in one integrated circuit, and these various blocks may be scattered throughout the circuit diagram. This can be confusing when actually building a circuit, but since pin (lead) numbers are given, you only have to remember where you put the part. You should know that the TRS-80 Technical Reference Handbook uses what are called 'functional' schematic elements, meaning identical parts are not necessarily drawn the same throughout the schematic. I have chosen not to use this method, which, although it makes circuit operation less evident, is clearer when doing actual wiring. Complete logical and physical diagrams of every circuit used in this book are give in an appendix. Those diagrams will help give you an idea of how these logical blocks are packaged inside 8-, 14-, 16-, 18-, 20-, 24-, 28- and 40-pin cases. Basically, that covers reading a schematic roadmap. Below is a section of circuit. See how the logic elements are connected to each other as well as to two resistors, a capacitor and a crystal. Notice also that the logic elements are all marked 'Z19', since they are separate blocks within a single component. An arrowhead indicates a wire leading off the board, and power and ground connections are shown. The numbers on the logic elements are the pin numbers for the component connections: R46 910 ISHTII R52 910 •■^74LS04 l0.6445MKr'^74LS04 TOGGLE + 5V 10 £R63 54.7K 1)3 CLOCK PRE CLR i/2 Q 74LS74 CLK 5|> 2 70 8 Be Tolerant Every electronic component is manufactured to work within specific limits, whether they be accuracy, temperature, speed, power use or other limit. These are the components parameters or tolerances. The circuits in this book have been designed to use the most commonly available parts, so the matter of tolerances is rarely important. However, sometimes those tolerances are important, such as when talking about memory speed or power supply voltages. Power supply should be within five percent of the voltage specified; a supply indicated at five volts may vary only from 4.5 volts to 5.5 volts. By using the power supply regulators shown in the schematics, these voltages should not be of concern. Unless you are familiar with power supply design, do not attempt to use other methods of regulation. Very few of the resistors have tolerances noted on the schematics. The rule of thumb is one quarter watt at five percent, but if you can only obtain half watt units, or 10 or 20 percent resistors, don't be concerned. The quarter watt 12 Introduction Building a Power Supply resistors are a bit less costly and are a bit more aesthetically appealing. Consider also that if a resistor is specified as 1,000 ohms, a 20 percent deviation gives a range of 800 ohms to 1,200 ohms. Thus, the standard values of 910 ohms or 1,200 ohms should do as well. Capacitors are notoriously sloppy in their tolerances, especially electrolytic types (those whose polarity is marked on the schematics). These normally vary from 20 percent low to more than 100 percent high - thus, when a 500 microfarad capacitor is noted, it can range from 400 to 1,000 microfarads. Also, there is some revision in the standard numbering method used for parts values: 470 microfarads is now being called 500 microfarads, for example. So when you try to obtain a capacitor value marked in the parts list, remember that a nearby higher value is fine. Voltage parameters for polarized (electrolytic) capacitors are important. Never get an electrolytic capacitor with a value less than that specified, but do not hesitate to take one with a higher voltage parameter. That is, a capacitor specified at 47 microfarads, 16 volts, can be replaced with one specified at 50 microfarads, 35 volts. It may be physically larger, but it will work equally well. If you walk into a store and hand the sales clerk a parts list, don't be surprised if you are asked a few more questions. You might be faced with chosing between parts which are identical as far as the parts list in this book is concerned, but which include other parameters. Resistors can be carbon composition, carbon film, glass or wire wound. These days, carbon film is common and cheap, and that's your first choice. Carbon composition is the next choice at a lower quality, and glass is excellent but at a higher cost. Forget wire wound, because they can contribute unwanted side effects. Ordinary capacitors are manufactured in many ways: ceramic, polystyrene, polyester, silver mica, polycarbonate and paper. For the bypass capacitors necessary for all the circuits in this book, ceramic types are your choice. Cheap. If you get silver mica, so much the better, but you'll pay a price. Watch out for polystryrenes or polyesters if you plan to solder, because they are delicate and you can damage them with too much heat. Otherwise they are excellent, but quality overkill. Polycarbonates are slick types, and you might consider using these if you build the 8-track mass storage system. Run the other way if you see paper capacitors. Electrolytic capacitors come in two basic types - metal cans (covered with plastic), and those manufactured using tantalum (an expensive metal of great strength and purity). For most digital projects, choose the ordinary cans. Tantalums of the same value, although smaller, high quality, and very pert looking, are costly and not required here. Digital integrated circuit part numbers are generic, which means that a 74LS00 circuit might be sold as an SN74LS00 or an NEC-74LS00. The prefix characters refer to manufacturers. On the other hand, those parts whose numbers contain 'LS' may not be substituted by parts marked 'S' or 'C or by those with no markings. 74LS00 may not be replaced by 7400, 74S00, or 74C00, nor may they be exchanged for each other. When integrated circuits are specified, try not to substitute with other circuit 'families'. This section will not make you a master schematic reader; only practice will do that. Pick up copies of the Engineer's Notebook mentioned above, as well as various of the project books sold by Radio Shack and others. Building a Power Supply All the projects presented in this book will either be modifications to the TRS-80, in which case they will draw power from the computer itself, or outboard devices which will need power. There are several ways to get this power: 1. Build a power supply from scratch for each device, including transformer, rectifiers, capacitors and regulators. 2. Build a main power supply providing substantial current at between 7.5 and 15 volts, and put a voltage regulator and a capacitor on board each project. 3. Use an assembled power supply providing a 7.5 to 9 volt output for each project, and use a voltage regulator and a capacitor on each board. 4. Use an assembled power supply providing 5 volts and feed all boards from it. My recommendation? Probably an assembled power supply of 7.5 to 9 volts feeding each project. Power supplies are important to projects, and they should be well regulated, free of residual 60 Hz (Hertz equals 'cycles per second)' ripple, and should not tend to transmit signals between projects. Some things to consider include: The Custom TRS-80 13 Building a Power Supply j V no Cl • Cl * •■■■ 1 ' * Unregulated positive power supply. 1. Building a power supply is not very time-consuming, but it is probably going to be bulkier than the project being constructed. Then there's the question of where do you put it? If it's in the project, you have to be very careful to shield the AC primary and secondary leads. Also, you have to be sure it's working properly before you can begin to test your project. +_ Cl\" I ^ h - + C4 ► 1 \\ + C3 i ^- Unregulated bipolar power supply. ', 6.3V 7M5 ~ + +_ Cl +_ C2 C3 -& +5 volt regulated power supply. ■ 1 » 7«05 — t ►— 1 ( ► 1 !!.♦» +_ 1 +_ C2 C3 [ * + Cl +_ cs C6 ^ +_ C4 7»05 +5/-5 uofe regulated power supply. 2. Small, assembled power supplies are inexpensive. They are normally sold as 'battery eliminators', with their current capabilities specified. The AC leads are encapsulated in plastic with the rest of the supply. Although you need a separate house-current outlet for each of these supplies, the work you do (both building and testing) is lessened and the safety to you and your project is increased. 3. Larger power supplies are expensive to buy and complicated to build. Unless they and each project being fed contain plenty of transient suppression (in other words, lots of extra capacitors), the actions of one device may affect another. But they do tend to be more immune to house current fluctuations than small homemade or purchased power supplies. With regulators on each project, moreover, you can provide more immunity to spikes and fluctuations. They are truly 'brute force' circuits. 4. Large regulated power supplies are highly stable, but expensive. They are capable of feeding a whole range of boards, less house current outlets are needed, and the level of regulation is usually substantial enough to prevent fluctuations at the board level. However, onboard filtering is still necessary to prevent interaction among external devices. The circuit diagrams that follow present a simple, unregulated, positive power supply; a simple, unregulated, bipolar power supply; a regulated five-volt power supply; a regulated dual-voltage (+5 and -1-12 volts) power supply; a regulated bipolar (+5 and -5 volts) power supply; a regulated four-voltage (+12, +5, -5 and -12 volts) supply, and last (but by no means least) the design of the power supply (+12, +5, and -5 volts) used in the TRS-80. All these supplies can use the transformer / rectifier 'power supply' sold for the TRS-80 as their source. 14 Introduction Box / Power Supplies Power Suppies Digital electronic circuits constructed by hand can perform as well as neatly-laid-out commercial circuits. In some ways, though, these circuits have to be designed better than commercial ones, because professionally etched boards are usually designed with careful consideration given to signal paths. Wire- wrapping or soldering, on the other hand, can look like a rat's nest and sometimes act that way. Most important: always use bypass capacitors in your projects. These are capacitors with a value of about 100 nanofarads (0.1 microfarads), ceramic discs or dipped mylar, attached between +5 volts and ground. These are physically placed near their respective integrated circuits. When I finish wire wrapping a circuit, I give it a quick test to make sure the wires are connected properly and the circuit behaves normally (barring occasional crashes) . Then I attach a 100-nanofarad bypass capacitor between the positive power supply and ground, directly between the wire-wrap pins carrying the power. Secondly: add termination resistors to the data lines whenever more than one project is connected to the computer. Termination resistors act as electronic clamps, holding the lines steady as the signals sweep through. These eliminate random noise, as well as signal 'overshoot', caused by capacitance introduced by the wires themselves. If you have an expansion interface of the new breed (no buffered cable), termination resistors are already in place. They are also standard with the LNW and Microtek interfaces (though I recommend doubling the value suggested by LNW, to at least 470 ohms and 1,000 ohms). The simplest addition of termination resistors involves connecting a 1,000 ohm resistor from each data line to ground. To ensure even better signal clarity (and also to maintain the 'high' level the computer normally sees on its lines), also attach a 470 ohm resistor from each data line to +5 volts. In all, then, eight resistors will be needed for each project you add. Finally, do not skimp on the power supply. Generally you will see a 2,200-microfarad capacitor followed by a regulator, a 470- microfarad capacitor and a 100-nanofarad capacitor. This is the absolute minimum configuration for a working power supply. If you have the room, increase the value of the first capacitor to 4,700 or 10,000 microfarads, and place a 100-nanofarad capacitor between input and ground physically near the voltage regulator. *■ +5V »- -12V +/-12, +/-5 volt regulated power supply. The Custom TRS-80 15 Box / Power Supplies 117 VAC TRS-80 transformer adaptor and supply. -•• + I2V TRS-80 power supply. O.I(iF I32 PLACES) C22,C23,C29, C3I,C33,C35-C38,0 C40,C4I,C44-C56 16 Introduction Box / Those Colors Those Colors: What They Mean and How to Read Them The color codes used for resistors, capacitors, and other parts are brought to you by the same folks that brought you phrases like 10W-40 and RS-232C: the standards-setting powers of the engineer- ing industry. It becomes an international shorthand. The colors are black, brown, red, orange, yellow, green, blue, purple, grey and white. If you can't immediately remember that, then pick up a piece of multi- conductor 'rainbow' cable. The colors are all there in the same order. The table below presents the color codes and how they can be read on the bodies of resistors, capacitors, and diodes. FIRST AND SECOND COLOR BANDS THIRD COLOR BAND BLACK BROWN 1 RED 2 ORANGE 3 YELLOW 4 GREEN 5 BLUE B VIOLET 7 GRAY 8 WHITE 9 BLACK BROWN RED ORANGE YELLOW GREEN BLUE SILVER GOLD X X X X X X 10 100 1000 10,000 100,000 1 ,000,000 100 10 FORTH COLOR BAND IS THE TOLERANCE GOLD = 5% SILVER = 10% NONE = 20% What do these values mean? Resistance is a kind of objection to electron flow, measured in ohms (pronounced with a long O). The abbreviation is a Greek omega ( £2 ). Thousands of ohms are kilo- ohms, or just kilohms, and abbreviated K (k in Europe). Millions of ohms are megohms, abbreviated simple M. The ability of a resistor to withstand electrical current is measured in Watts (W). Most computer work is done with 1/4 Watt resistors. For resistors without color bands, the values are stamped on using R (instead of omega) for ohms, K and M. Capacitance is the inclination of a non- conducting object to store an electrical charge, measured in Farads. The abbrevi- ation is a capital F. Since this is a very large amount of capacitance, real work is generally done in millionths of Farads, or microfarads (mF), and millionths of millionths of Farads, called picofarads (pF). Since many of the more popular capacitance ranges for computer work fall between these two figures, the abbrevia- Otion for thousandths of millionths of Farads, or nanofarads (nF) is common in Europe. The ability of a capacitor to withstand voltage is measured in voltage tolerance (V). Capacitance is usually printed on the capacitor in mF; color bands are rare. Picofarads are marked \"p'; the absence of an abbreviation indicates microfarads. Note that these capacitor 'base values' are equivalent: 18=20, 27=30, 39=40, 47=50. The Custom TRS-80 17 Abbreviations and Conventions Abbreviations and Conventions Used in this Book A0-A15 Computer address Lines. C A capacitor, specified in the parts List; positive and negative sides are marked. CLK CLock, usuaLLy a fLip-fLop input. CLR CLear, usual Ly to fLip-fLop or Latch. CR A diode, Radio Shack schematic reference. D A diode, specified in the parts List. D0-D7 Computer data Lines. F Farad; used only as part of mF, uF, pF. GND Common computer ground. K A relay, specified in the parts list. -K Resistance value suffix = x 1000. LEO A light-emitting diode, specified in the parts List. m- Capacitance prefix for x 0.000 001. H A motor, specified in the parts List. -M Resistance value suffix = x 1,000,000. MHz Megahertz (million cycles per second], p- Capacitance prefix = x 0.000 000 000 001 P Piggybacked integrated circuit. PRE Preset, usually to flip-flop or latch. 0. Transistor, specified in the parts List. 0. FLip-flop or Latch output. R A resistor, specified in the parts List. S A switch, specified in the parts List. T Transformer, specified in the parts list, u- Capacitance prefix for x 0.000 001. U Integrated circuit (LNW references only). Vcc Co L Lector-supply voltage, thet is, the 'five-volt supply 1 . W Watt; resistor power reference. X DIP shunt or jumper, R/Sheck reference. X Crystal oscilLator. Y Demultiplexer output signal. Z An integrated circuit, specified in the parts List. * Used in text references for 'not', in pLace of a horizontal bar across the top of the abbreviation. 0V Ground, zero-leveL, or center-ground. +5V Five— volt positive regulated power supply, the 'Five volt supply 1 . -5V 5-voLt negative regulated power supply. +12V 12-volt positive regulated power suppLy. 117V House current, 105-120 volts AC. BASIC commands; Z-80 mnemonics and opcodes; CPU and other schematic signals are printed in UPPER CASE letters. Hexadecimal numbering is printed in BOLD letters. 18 Getting Inside Getting Inside A TRS-80 is the proverbial black box. It's the first mass-marketed personal computer that was intended for simple home and business use. As far as retail sales are concerned - whether it's a car, a hi fi, or instant pudding - thinking of it as a black box is just fine. \"Yes, it's a complete computer with a keyboard unit, video display, and cassette storage.\" To have this small computer work to even a fraction of its potential, though, you've got to have the power to control it. As with driving a fine automobile, that power comes with understanding, comes with being able to look through and into the box, comes with keeping it carefully tuned and customized so that it can respond to your wishes. In this Chapter we'll open the electronic black box a little at a time. If this is all new to you, prepare for some exciting finds inside this box; if not, then follow along and discover just how much you've learned about microprocessors in their own age. What You See The main computer unit is in a small case looking something like a typewriter that has lost its carriage. There are 53 keys in a typewriter style layout, and perhaps on your unit a numeric keypad to the right. Connections on the back are marked Power, Video, and Tape, along with an on/off switch. The unit is entirely silent. It is electronic in conception and execution. A power supply lowers and isolates the 120-volt household supply to approximately one-seventh that value, and that feeds the keyboard unit. An ordinary cassette player is cabled in, and a partly disemboweled television set plugs in place, serving as a crude video monitor. The designers of the TRS-80 struggled with, and won, the battle of familiarity. Televisions, cassette recorders, and typewriters are among the most ordinary of home or office appliances. But by winning this battle of familiarity, the designers also clearly set themselves up to lose the battle of reliability (more on that later). Let's first take a look at some of the things the computer does, and then very generally try to discover how and with what the machine does them. When you power up your computer, you expect to be able to communicate with it. Unlike a television, it does not entertain, but rather evaluates and responds with an electronic psyche. If it were not capable of using a human-like language, we would be forced to use the machine's language. But since it will be asked to accomplish human tasks, we will demand that it speak a human sort of language - BASIC (Beginners' All-purpose Symbolic Instruction Code). BASIC has grown since its humble but inspired beginnings at Dartmouth College into a formidable tool capable of rocking other standard languages off their computational pedestals. If you have been using your TRS-80's BASIC, you know its fluidity. But it does not work alone. The BASIC that is in the TRS-80 works hand-in-hand with the electronics to produce a video display for us to read, and to examine a keyboard for us to type on. The keyboard gives The Custom TRS-80 19 Hesitation input to the computer, the video display shows output from the computer. Input and output are grouped together in computer terms, and are collectively called I/O. The tape recorder, which saves and loads computer programs, would also be called I/O. Forget the claims that the TRS-80 computer can do what this-or-that state-of-the-art computer could do five years ago. Maybe so, but it really can't. Because it isn't built like a piece of office furniture. Because it doesn't act, work, or 'think' the same. No matter how you paint it or pad it, a four cylinder sportscar will never be a luxury V-8 sedan. And Burger King is not a candidate for the four-star list. But they can do what they can do as well or better because of the simple, direct, streamlined nature of their operation and conception. Turn away the question of value judgment, and you discover that - considering portability, cost, ease of maintenance, accessibility and vastness of the software domain - the TRS-80 is probably a dimension better than that recently demised state-of-the-art dinosaur. That about covers what we can say about the minimal TRS-80 setup - a keyboard computer unit with I/O. Before popping off the cover, let's name some of the rest of the I/O devices that can be hooked up to the machine. Those might include: An Expansion Box. This attachment expands not only the internal capacity of the computer, but also forms an electronic saddle, permitting other devices to ride on the back of the keyboard unit. A Printer. Obviously, an attachment to provide a permanent record of the machinations of the TRS-80. A Diskette Drive. A place to store information and programs when the computer is turned off; it is very like the cassette player, except that it is speedier and can be accessed differently. More on that later. Voice Input/Output. An ability to speak and be spoken to on the part of the computer. This is one of the experimental options. Telephone Communications. Communications with other computers, similar or different, nearby or across the world. Control Centers. The power to change, activate or extinguish electrically-powered equipment throughout a home or office. There are more devices which might be considered, including clocks to tell the time of day, little circuits to create sound effects and music, even other computers used as 'slaves'. In fact, where electrically controlled equipment is involved, almost anything can be attached directly or indirectly to the TRS-80. Hesitation When you open the computer's case, you'll see an enormous amount of electronic circuitry. Before you open it though, you should have an idea why there are so many integrated circuits and circuit board traces connecting them. We live in an analog world. We judge size or volume or loudness not by how big or full or loud it is, but by how big or full or loud it seems in relation to something else, even if that 'something else' is merely what we are used to hearing in our normal world. In other words, all our evaluations are made by analogy. \"How big is it?\" \"As big as a basketball!\" \"Is she pretty?\" \"Pretty as a picture!\" \"Is it far?\" \"About a stone's throw from the corner.\" Our cliches are built on comparison or analogy. Ideally, then, we might like to build a machine that work for us in our own terms . . . \"Machine!\" \"Duh, yessir, sir.\" \"Add fourteen and thirty-seven, machine!\" \"Yup, yup. Lessee. Hmmm, fourteen is this big. And thirty-seven is this big. That makes a number this big Sir?\" \"yes, machine?\" \"That's as much as thirty-seven and fourteen, sir! Looks just like fifty-one, sir.\" \"Thank you, machine.\" This computer has a rather limited voice capacity, but what it did inside itself was electronically quite sophisticated. It took in a value and transformed it into an electrical voltage of fourteen units, stored it, accepted a 20 Chapter 1 second value and transformed it into a voltage of thirty-seven units. Then it added the voltages together; the resulting voltage worked out to be equivalent to a value the size of fifty-one voltage units. The manufacturers of the real world might be able to create electronic parts with this kind of accuracy, but chances are that these parts wouldn't be cheap. A TRS-80 made with them would be worth more than the previously mentioned V-8 auto. So in the stone age of computer activity, it was decided that the simplest level of evaluations would have to be made. A low voltage or 'off condition would be made equivalent to zero; a high voltage or 'On' condition would be set equal to one. That was it. All calculations would have to be done with ones and zeros - the binary system. You've probably heard of, and perhaps used, binary numbers and there will be more on this system later in the book. But the point is that you can well imagine that doing work with real, human numbers means quite a basketful of the individual ones and zeros. Which means, consequently, many separate signal lines to carry those groups of numbers. So Open It Already! So Open it Already! Turn the power off to your TRS-80 keyboard unit and flip over on its front. Carefully undo the cabinet, noting the different sizes of screws used to fasten it together. Holding the entire computer firmly together, again flip it on its back. Remove the top cover. Gently lift the keyboard forward and remove the five or six plastic spacers underneath it; in later 80's, one of these will be solid and the rest flexible. Note their positions. Now set the keyboard back, lift the electronics out of the case and place it on a spacious work surface. Time out. As you make changes to your TRS-80, add memory and the like, you will be opening the case many times. Two things might happen. First, the keyboard grommets will get lost. Their purpose is twofold: to prevent the keyboard from shorting against the main circuit card, and to cushion delicate parts against a constant onslaught of none too gentle typing. If you lose them, cut new ones out of bottle corks. They'll work just fine. Another more difficult problem is the keyboard cable itself. This is a band of springy copper leads covered with white plastic located 4 if 1 i* 1* Photo 1-1. The TRS-80 opened and spread out The Custom TRS-80 21 So Open It Already! Photo 1-2. Closeup of keyboard cable area Complete TRS-80 spread out for cable replacement Other visible changes include Level I/II switch on keyboard (bottom right of keyboard), new Level II interconnect cable (center), additional keyboard socket (top left), and external reset switch connector (bottom left). at the bottom left of the keyboard. It electrically, and physically, attaches the keyboard to the main circuit board. Very subtle cracks can occur in the copper after about a half-dozen flexes. Symptoms can be lost letters or odd combinations of letters, a system constantly crashing or otherwise acting up, constantly repeating letters, or complete lockup of the keyboard. Avoid flexing this cable quickly or bending it sharply. Later we'll replace this cable with something better, but for the moment be gentle with it. Now back to the machine. Spread the two sections connected by the keyboard cable out in front of you. The keyboard and the top of the circuit card will now be visible. The Central Processing Unit is a single integrated circuit, the Z-80; it is to the far left in the photograph on this page. The power supply is the block of 'heavy equipment' at the back; the two small potentiometers regulate the voltage to within five percent, so keep clear of these controls. The eight memory circuits are in a row near the power section, and the language memory (Level I and newer Level II BASIC) is located in the center of the circuit card. On most Level II units, this language required three integrated circuits, and so these were placed on a separate two-by-three-inch card taped to the main board and connected with a 24-conductor cable. Don't be tempted to remove that cable, yet! A group of circuits to the bottom left in the photograph hold the video image. Two important parts are socketed on the board; these are marked Z3 and Z71, and they are programmable shorting jumpers. What makes them programmable is the fact that with a gouging tool you can break the connections; not very subtle, but it works. Their purposes are different - one selects the amount of memory available in the keyboard unit, and the other selects which of the standard languages (Level I or Level II BASIC) is in use. At the top left, the video and cassette output is controlled. Two small potentiometers on that side of the board position the video image on the screen, so if you received a TRS with its image off center, twiddling these will straighten it out. The 22 Chapter 1 Put It Back 8 Bit DATA BUS DATA BUS CONTROL INSTRUCTION OECOOE CPU CONTROL c= INST REG C i) ALU INTERNAL DATA BUS > <c~ \"\"*> ^--ir-^ CPU AND SYSTEM ^ CPU ^s? CONTROL CPU REGISTERS CONTROL SIGNALS i) It 16BIT ADDRESS BUS Figure 1-1. Z-80 block diagram from Zilog. 16K RAM Expansion Service Manual and Addenda (Order). TTL Databook (National Semiconductor). Catalog No. 62-1370. This may not be stocked anymore; if so you can order it from National Semiconductor direct. And finally, a Z80-CPU / Z80A-CPU Technical Manual should be ordered from Zilog, Inc., 10340 Bubb Road, Cupertino, CA 95014. It costs $7.50. These references will not only help you to make the modifications suggested in this book, but also to understand the operation of the computer, bend it to your wishes, and repair it if it fails. Additional references which you will find valuable are listed in Appendix II. remainder of the board is dedicated to controlling the complex electronic traffic. One last item is the edge card connector, which can be viewed at the top right hand side of the photograph. Through this connector, the TRS-80 may speak to the outside world. Much more on that connector later in this book. On the keyboard itself there are a few circuits. Their job is to assist the Central Processing Unit (CPU) in determining which key is pressed. These circuits are sometimes remarkably sensitive; there will be more about these later. Put it Back Become familiar with the layout of this board, as it will assist you in locating work or repair areas. Functions of the computer parts are generally grouped together, so modifications will usually be restricted to a compact area of the board. Once you have a good idea of where everything is, put the keyboard unit back together carefully. To really get to understand your machine you will want to obtain, either off the shelf at Radio Shack, from a Repair Center, or 'National Parts', the following manuals: TRS-80 Micro Computer Technical Reference Handbook. Catalog No. 26-2103. TRSDOS & Disk BASIC Reference Manual. Catalog No. 26-2104. Printer Cable Service/Installation Manual (Order). Expansion Interface Service Manual (Order). Make sure this includes the FD1771 disk controller appendix from Western Digital. The Hidden Insides It's not much of a mystery to TRS-80 users that all that hardware is controlled by software. That's one of the first things you learn. But it's also as simplistic as saying that the driver makes the car go, and just as misleading. Complete computers are called 'turnkey' systems because they imply simple, appliance-level setup and use. But a customized TRS-80 suggests something more, and with that 'something more' comes a requirement to have a better handle on hardware and software. Let's define some terms. The TRS-80 is a personal computer, which is a popular way of saying a small, microprocessor-controlled, turnkey computer. The microprocessor, a Z-80, is a complicated, general-purpose, electronic switching center capable of accepting, changing, sending, and re-routing a complex array of electronic signals. Both the TRS-80 as a whole, and the Z-80 in microcosm, have something called architecture. Architecture is the overall dimension by which these devices define their electronic space. Put simply, it is 'how they work'. As with all human work, this involves defining tasks and their order, executing those tasks, and producing a result. In the Z-80, the architecture involves accepting electronic signal groups called instructions, decoding them into internal activities, and executing those activities. An arithmetic logic unit (ALU) performs simple mathematical functions, internal memory cells called registers hold signal information to be acted upon, and an internal bus controls the flow of electronic traffic. The order of entering signals is identified by means of an address, which The Custom TRS-80 23 The Hidden Insides identifies a fixed numbered slot in the Z-80's electronic universe. In the block diagram of this activity, shown opposite, note the terms '8-bit data bus' and '16-bit address bus'. The Z-80 is an integrated circuit with 40 external connections. The number 40 is arbitrary, chosen because manufacturing precision is currently limited to a physical 'package' of that size. That precision is also central to why the binary system is used, as mentioned earlier. From the viewpoint of ten-fingered humans, it would be simpler to do our computing in familiar decimal form. As with the uninspired conversation between human and computer presented earlier, different levels of voltage could be used. But such levels of precision are difficult to produce commercially and impossible to diagnose when they fail. That is the practical origin of the simple one/zero, on/off, true-false system of numbering used by the computer. To discover how these signals are arranged, we now turn back to the Z-80 itself and the 40 external pin connections. Information put into and called for out of the processor is called data, with a simple small value of zero. Any reasonable number of pins could have been dedicated to accepting data, but, based on the amount of work the processor had to do, eight of the 40 pins were assigned. This is the 8-bit (binary digit) data bus. I/O DRIVERS AND BOOTSTRAP LEVEL II BASIC/DISK BASIC MEMORY MAPPED I/O BASIC VECTORS DOS DISK BASIC DOS UTILITIES USER MEMORY FREE MEMORY ulWu 1 K ROM MOO t 1 K ROM 3OO0 I/O .1000 4200 5200 16K 1AM 7000 a ooo 16 K RAM cooo FFFF 16 K RAM ► EXPANSION MEMORY Figure 1-2. TRS-80 memory map. Likewise, there is the need to determine the order in which the processor is to do its work. In order to move from command to command, it identifies the order of those commands by their position, or address. Sixteen of the Z-80's pins are used to specify a number from 0000 0000 0000 0000 to 1111 1111 1111 1111. When the power is turned on, this address bus switches to all zeros. The computer fetches its first command along the data bus from that all-zero location. It executes the instruction, fetches the next, and the next, and the next. There's certainly more to this, but very basically that's the architecture of a microprocessor. Address lines for locations and order, and data lines for information. Now we'll turn to the TRS-80 and its architecture. The TRS-80 contains the microprocessor, which is the Central Processing Unit (CPU) of the computer. Along its address bus is found the computer's internal information and instruction storage block - its memory. Also along this bus will be found video memory, a block which is reserved to display information to us on the screen; a keyboard, which is given its own set of addresses; the BASIC language; some unused areas; and single memory slots in which are housed windows to the cassette recorder, disk drives, printer and so forth. This hardware is already familiar, so let's look at the hidden insides, the software. The BASIC system is found in permanent, Read-Only Memory (ROM). It consists of several major sections: • A keyboard scanning routine to discover and interpret activities at the keyboard. • A video processing routine which presents and updates the monitor information. • Input/output controls for saving and loading program material and operating a printer. • An interpreter capable of transforming the 'English' words which make up the BASIC we know, and determining what computational actions should be taken. • Memory-management systems which apportion the computer's available memory into blocks which will not conflict. • Arithmetic- and text-processing subroutines which can perform calculations and operations on numbers and alphanumeric characters. 24 Chapter 1 Power- Up Routines Overall, the Level II BASIC language requires more than 12,000 separate 8-bit groups, known as bytes, to perform its work. At the end of this Chapter is a detailed look at how the software operates from the time the machine is switched on to the time you read MEMORY SIZE? on the screen. In summary, that software disables any signals which might interrupt its operation, turns off the cassette relay and clears data from that output, restores the video screen to 64 characters per line, and sets up a block of memory for use by BASIC programs. A disk drive is searched for, and if one is found, a group of procedures are initiated in order that the disk program may take control of the TRS-80. If no disk drive is found, the screen is cleared with blanks, the MEMORY SIZE? prompt is displayed, and a keyboard scanning process is begun. A valid response to that question is accepted, and, if necessary the entire bank of memory is tested. Error messages are updated on the video screen as needed. Finally, the memory size and available room for text strings is created, the READY prompt is displayed, and control of the TRS-80 is given to the user. Power-Up Routines The initialization routine of the TRS-80 is a complicated and very interesting aspect of the computer. It must, of course, set up all the parameters that will be used by BASIC programs, but it also conducts a series of tests and makes hardware adjustments to the device. It double checks to assure the proper operation of memory, and to be certain that the parameters needed for proper operation of programs will be present. This section will take a look at the initialization process. Here are the first few instructions: 0000 ORG 0000H 0000 F3 DI 0001 AF X0R A 0002 C3 74 06 JP 0674H At power-up, the Z-80 chip 'homes in' on address 0000, and begins its execution there. The first action is significant: DI (Disable Interrupt) keeps the clock 'heartbeat', generated by the expansion interface, from disturbing any actions of the computer - especially important, since the necessary software for handling that interrupt request is not in ROM, but rather a part of the disk BASIC, or what is also offered as 'Level III' BASIC. So the interrupt is masked out. XOR A is the process of 'exclusive-ORing' the accumulator. Exclusive OR is a logical operation which states: of two elements, either may be zero or one, but not both. Thus, whatever is present in the accumulator is XORed with itself. Since each bit is identical with its exclusive-OR partner, each bit will be set to zero. This effectively clears the accumulator, readying it for processes to come. The final instruction of the group, JP 0674, gets out of the way of the Z-80's low memory, for it is in this area that the chip's restart codes - very frequently used subroutines - are found. Going on: 0674 D3 FF OUT (0FFH) ,A 0676 21 D2 06 LD HL.06D2H 0679 11 00 40 LD DE,4000H 067C 01 36 00 LD BC.0036H 067F ED B0 LDIR 0681 3D DEC A 0682 3D DEC A 0683 20 F1 JR NZ.0676H After the jump to 0674, the routine resets the output flip-flop at port FF (255 decimal). This flip-flop controls both cassette functions and the 32/64 character video, and by outputting the value in A (0, since it was exclusive-ORed earlier), the cassette will be off, no data will be present at its input, and video will come up normally. Following this is an interesting (and encouraging) piece of code. Using the Z-80's powerful block move command LDIR, 54 bytes stored at address 06D2 are transferred to the RAM address area starting at 4000. These are the most important pieces of information the TRS-80 must have, so the writers of this program took great care to assure that this transfer would be certain. The LDIR instruction itself takes data stored at an address specified by register pair HL (in this case, 06D2), and moves a block whose length is specified by register pair BC (36 hex, or 54 decimal), to the location indicated by register pair DE (4000). The interesting part is found just below. The value in A (0) is decremented twice (to FE), and the identical transfer instruction is repeated. This goes on until it reaches zero again, a total of 128 times! We may draw the conclusion that the Z-80 chip probably reaches full power and begins operating before memory gets to the point where it can reliably accept data . . . therefore, the instruction is repeated for a period of approximately 15 milliseconds. Now a portion of RAM is cleared to zero with the following few commands: 0685 06 27 LD B.27H 0687 12 LD [DEI ,A 0686 13 INC DE 068S 10 FC DJNZ 0687H The Custom TRS-80 25 Power-Up Routines Recall that after the previous setup process, the accumulator again contains zero. Here a block of RAM specified by the DE register (essentially where we left off) is loaded with zero. Using the fast DJNZ (decrement B, branch if not zero) instruction, 39 bytes are fixed at zero. A few instructions follow that are very significant at power-up. Address 3840 contains the keyboard row where the BREAK key sits. It is connected to data line 4; thus the instruction AND 04 checks to see if it is held down. If it is not being held down, the result of the AND instruction will not be zero . . . and a jump to address 0075 will be made. This is why expansion interface owners without disks must press the break key at power-up: 068B 3A 40 38 06BE E6 D4 0690 C2 75 00 L0 A, 13B4DH] AND 04 JP NZ.0075H How does the TRS-80 find out that a disk drive is in fact connected to the interface? The answer to that - and the reason that the computer 'hangs up' when an expansion interface is connected without a disk - is found in the next few bytes of code: 0693 31 7D 40 LD SP.407DH 0696 3A EC 37 LD A,(37ECH) 0699 3C INC A 069A FE 02 CP 02 069C DA 75 00 JP C.0075H The stack pointer is set at 407D for use by potential future programs; it is out of the way of all the BASIC pointers set up in the first data transfer, an obvious but important action. The accumulator is then loaded with the contents of memory location 37EC. There is no 'memory' per se at address 37EC; it is instead an instance of 'memory mapping'. That is, when this memory cell is read, a signal is sent to the expansion interface. This signal strobes information from the Floppy Disk Controller (FDC) to the TRS-80. What will it find? If no expansion interface is connected, there is no signal to strobe. Hence, the value will be floating, not pulled to ground (zero) on any bit. The computer sees all bits apparently 'high' at this location, and interprets it as binary 1111 1111, that is, hex FF. The next instruction increments the accumulator, in this case resulting in FF plus 1, or 00. In the following intruction this value is compared to 2. A compare (in effect a subtraction, with no 'result') will cause the carry flag to be set, since minus 2 is negative. (Note: Why compare with 02? Why not just 01 , as a carry would still be generated? My suspicion is that it is possible for those data lines to 'float' in the low state. In that case the CPU would 'see' 0000 0000, with the INC A instruction resulting in a value of 01 - which is still incorrect. So a compare with 02 guarantees the presence or absence of the disk controller.) Once the carry flag has been set, the instruction JP C,0075 would be executed, sending the program to address 0075. For the moment, however, let's assume that an expansion interface is connected to the TRS-80. The FDC, when queried by the command LD A,(37ECH), will respond with 80. Incremented by one it becomes 81, and comparing it with 02 generates no carry. The JP C,0075H is thus ignored, and the program simply goes on to find: 069F 3E 01 06A1 32 E1 37 06A4 21 EC 37 06A7 11 EF 37 06AA 36 03 LD A.1 LD (37E1H) ,A LD HL.37ECH LD DE.37EFH LD IHL) ,3 The accumulator is set to 1, and address 37E1 is made to accept the contents of the accumulator. Again, 37E1 is a location memory mapped in the expansion interface. This code starts the disk drives rotating (or keeps them rotating), and selects drive zero. That done, it loads HL with the disk controller address (37EC) and sends out a 'restore' command, which tells the controller to move to track zero. Thus, the data will come from drive zero and track zero. Register DE is prepared by loading it with the disk's data address, 37EF. Now: 06AC 01 00 00 LD BC.OOOO 06AF CD 60 00 CALL 0060H 0060 ORG 0060H 0060 0B DEC BC 0061 78 LD A,B 0062 B1 OR C 0063 20 FB J P. NZ.0Q60H 0065 CS RET This is a short but very useful subroutine. You may in fact want to call this yourself from time to time. Found at address 0060 is a simple delay loop; load the BC register pair (as is done just before the CALL instruction), and it is decremented and tested until it reaches zero. When it finally reaches zero, a return instruction sends the Z-80 back to the main program flow. Why a delay? Merely to give the disk drive time to come up to speed, obvious but very 26 Chapter 1 Power-Up Routines important. Moving ahead with this branch of the program: 06B2 ORG 0BB2H 06B2 CB 46 BIT D , (HL) Q684 20 FC JR NZ.06B2H This is a loop which waits until the disk control chip says, \"Okay, disk is up to speed and everything looks pretty good\", and sends along a zero. The program loop tests this bit until it receives a zero. It is this loop which is maddening to you expansion interface owners who have no disk drive. Like all the previous memory-mapped addresses, 37EC will never have that zero. If a disk is present and all is well, the loop will have found the acknowledging zero sent by the FDC: D6B6 AF X0H A D6B7 32 EE 37 L0 (37EEH) ,A 06BA 01 00 42 LD BC.4200H 06BD 3E BC LD A.BCH 06BF 77 LD (HL) ,A 06C0 CB 4E BIT 1 ,[HL) 06C2 2B FC JR NZ.06C0H 06C4 1A LD A, IDE) 06C5 02 LD (BC) ,A D6C6 oc INC C 06C7 20 F7 JR NZ.06C0H The accumulator is cleared again, and the BC register is set to 4200. This will be an area of RAM set aside for disk use. 37EE is loaded with 0, and 37EC is loaded with byte 8C. This selects sector 0, and sets the read condition. Thus, having previously been set to drive zero, track zero, it will now read sector zero. The accumulator will look for the incoming bytes in the memory location specified by the DE register pair (37EF). This is the memory-mapped location through which the actual data will flow. The accumulator picks up the data from DE, stores it in the RAM memory location indicated by BC (4200); the next instruction increments register C so that location 4201 is ready. The program loops back, waits for another message from the FDC, picks up another byte, and stores it. When register C finally reaches zero, the pointer will again contain 4200, and the loop terminates. Then: 0BC9 C3 00 42 JP 4200H Here the disk system takes over completely. As you recall, starting at 4200, data from the disk has been stored. By jumping to that location, the program direction is wrested from ROM and given to the first 256 bytes of the disk system bootstrap program. Here, then, is a quick review of the activity so far: Interrupts are disabled, cassette is turned off and data are cleared from that output, video is restored to normal, and significant pointers for BASIC program operation are set up. A disk drive is searched for and if one is found, a group of procedures is initiated in order to transfer control of the TRS-80 to these disk instructions. A series of control signals and acknowledgments is exchanged between the floppy disk controller and the CPU, a page (256 bytes) of data is poured into a RAM buffer area, and program control is given over to this new series of commands. If a disk drive is not found, or if the break key is held down during power-up, control is transferred to address 0075. At this point it should be noted that the 'reset' button on the TRS-80 is a non-maskable interrupt, that is, the only interrupt which the DI (Disable Interrupt) command first executed by the TRS-80 cannot mask out. When pressed, the reset button goes directly to address 0066, following a much shorter series of instructions reminiscent of the power-up routine. ' Because it is likely most important RAM pointers are still intact, this sequence does not reset them: 00B6 0R6 0066H 0066 31 00 06 LD SP,0600H 0069 3A EC 37 LD A, (37ECH) 006C 3C INC A 0060 FE D2 CP 02 006F D2 00 00 JP NC.0000 0072 C2 CC 06 JP D6CCH This group of instructions sets up the stack pointer, checks for the presence of a disk drive, and jumps to the complete initialization routine (reboot) if it finds one. If none is present, it goes to the READY sequence beginning at address 06CC. Now let us return to the initialization program flow we have been following, which is found at 0075: 0075 ORG 0075H 0075 11 B0 40 LD DE.4080H 0078 21 F7 IB LD HL.18F7H 007B D1 27 00 LD BC.0027H D07E LD BO LDIR Using the LDIR instruction described earlier, a block of information located at 18F7 is transferred to RAM beginning at 4080. These bytes describe ports in use, error storage, INKEY$ information, and so forth, as needed in the general operation of Level II BASIC (see Chapter 2). The Custom TRS-80 27 Power-Up Routines A few specific addresses are delineated, and a large group of RAM bytes is then prepared. These jump to the familiar '?L3 ERROR' message because they are disk commands not available to Level II, yet patch points are prepared for them. The result of the following program statements is to fill addresses 4152 to 41A5 with the direction JP 01 2D. QD8E 11 2D 01 0091 06 1C 0093 21 52 41 0096 36 C3 0098 23 0099 73 009A 23 009B 72 009C 23 009D 1D F7 LU DE.012DH LD B.1CH LD HL.41 52H LD !HL) ,0C3H INC HL LD (HL) ,E INC HL LD (HL) ,D INC HL DJNZ 009EH Another group of ROM 'breakout' points follows; they all become returns to the main program flow. But notice something interesting about them - three bytes are set aside, but only one is filled with the return instruction (C9). This means that a jump command could be placed there. Let's first look at the series of instructions, then examine the possible benefits of changing them: 009F 06 15 00A1 36 C9 00A3 23 00A4 23 OOAS 23 00A6 1 F9 LD B.15H LD [HL] ,0C9H INC HL INC HL INC HL DJNZ 00A1H If we wanted to break into the BASIC operating system, this area of RAM is one place in which we could do it. Most of these are error codes of one kind or another. We could 'rescue' a program from displaying an error message, and halting, by patching in one of our own routines. If our routine were located at 5000, for example, the C9 instruction (followed by two unused bytes) could be replaced with a JP 5000 command, which needs all three byte positions: C3 00 50. Essentially, the authors of Level II BASIC provided many areas for expansion. Now let's move on. BASIC programs begin at address 42E9. A pointer to that beginning is found as a zero at address 42E8. The next instruction sets that in place: 00A8 00AB 21 EB 42 70 LD LD HL.42E8H [HL] ,B The stack pointer is delineated, and a call is made to 1B8F, a subroutine to turn off or reset various devices, including the printer and cassette player. It is in part redundant, but a double-check is often worthwhile. 00AC 31 F8 41 LD SP.41FBH O0AF CD BF 1 B CALL 1BBFH 00B2 CD C9 01 CALL 01C9H The call to 01C9 results in the screen being cleared and the cursor being placed at position 0. Finally, 'MEMORY SIZE?' appears: 00B5 21 05 01 Q0B8 CD A7 28 00BB CD B3 1B LD HL.010SH CALL 28A7H CALL 1BB3H At address 0105 is a block of ASCII bytes which spell out MEMORY SIZE. The subroutine starting at 28A7 displays the string of data at the present location of the cursor, a byte at a time, until it finds a byte in the message whose value is 00. This terminates the display and advances the cursor. The call to 1BB3 is identical to the BASIC INPUT command, in that it displays the question mark and cursor, and halts for keyboard input. If the keyboard input is the BREAK key, a carry is generated, and the program skips back to MEMORY SIZE and displays it again, waiting for keyboard input. The instruction RST 10 (ReSTart at 0010) follows, which is the quickest way of calling a routine to locate the first character of an input. If one is found, the result of an OR instruction will not be zero. Here are the instructions that perform those functions: 00BE 00C0 00C1 00C2 38 F5 D7 B7 20 12 Jfl C.00B5H RST 10H OR A JH NZ.00DEH What if, on the other hand, there was no entry other than the ENTER key? You have no doubt noticed a slight pause in the action when you do not specifically set the memory size. Here's a look at that code: 00C4 00C7 00C8 00C9 00CA OOCC 00CD 00CE 00CF 00D0 00D1 D0D2 00D4 21 4C 43 23 7C B5 28 1B 7E 47 2F 77 BE 70 2B F3 18 11 LD HL.434CH INC HL LD A,H OR L JR Z.00E7H LD A,[HL) LD B,A CPL LD [HL] ,A CP (HL) LD [HL] ,B JR Z.00C7H JR 00E7H For the moment we will start at the instruction LD A,(HL). HL contains the address of a byte of RAM memory, the contents of which are placed in the accumulator. From the accumulator, they are also saved in the B register. The accumulator is complemented, which inverts all the ones to zeros and all the zeros to ones. This complemented value is then placed in the 28 Chapter 1 Power-Up Routines memory location still specified by HL. The accumulator is compared with what has been placed in HL. What, you ask? But this value was just placed in memory, why compare it? Because - and this is a very elegant piece of writing - if it does not compare: 1. The memory location is bad and only the block of memory below it should be used to be safe. 2. Or, this is the end of memory. If this is good memory, then, the test for zero passes, the contents saved in register B are returned to memory, and the program loops back, incrementing HL to the next potential memory location. We did skip a few instructions back there. They become important only after the first loop is complete. These commands OR the contents of H and L; when the result is zero, we are at address 0000 - full 48k memory has been found, and the test is complete. Here's what we would find, alternatively, if we entered some value (or other characters) in response to MEMORY SIZE?: 0006 CD 5A 1E 00D9 B7 000A C2 97 19 0000 EB 00DE 2B 00DF 3E BF 00E1 46 00E2 77 00E3 BE 00E4 70 00E5 20 CE CALL 1E5AH OR A JP NZ.1997H EX DE.HL DEC HL LD A.BFH LD B, (HL) LD (HL) ,A CP (HL) LD (HL) ,B JR NZ.00B5H The call to 1E5A checks for numeric input, and jumps to 1997 ('?SN ERROR'), if it is not numeric. If the input is properly numeric, then registers DE and HL are exchanged; this action puts DE (left off at the lowest usable memory location above pre-set RAM needed by BASIC) in HL, where it can be manipulated conveniently. Memory size minus one is usable; memory size and above is protected. So HL is decremented before being tested, then it is tested (in a manner similar, but not identical, to that done earlier). If the memory test fails, it's back to displaying MEMORY SIZE? again. We're not quite there yet, however, as the figure entered for memory size may be too small. BASIC needs a bit of room to work with, so DE is set to 4414, and the subtraction subroutine at RST 18 is called. If a carry is generated, we're shipped off to the '?OM ERROR' message found at 197A. Here's what it all looks like: 00E7 2B DEC HL 00E8 11 14 44 LD DE.4414H 00EB DF RST 18H 00EC DA 7A 19 JP C.1B7AH A little more work is left to do. Recall that a value for available string space is set aside, and it is 50 bytes. Here is how it is done: 00EF 11 CE FF LD DE.OFFCEH OOFS 22 B1 40 LD I40B1H) ,HL 00F5 19 ADD HL.OE 00F6 22 A0 40 LD (40A0H) ,HL Register pair DE is set up with FFCE, which, if you are not yet weary of manipulation of hex numbers, is the two's complement of 50 decimal. That is, when FFCE is added to 0000, the result is FFCE hex, or 50 decimal less than the original figure. Try it to see that it works. This bit of code saves the value for top of available memory in 40B1, adds register DE to it, and saves that result (memory size minus 50 bytes for string space) in address 40A0. There follows: DDF9 CD 4D 1B CALL 1B4DH Here let me quote Roger Fuller, whose TRS-80 Supermap identifies this subroutine this way: Revelation 21:5 -\"And behold. . . He shall make all things new.\" This subroutine identifies and sets up all pointers necessary for the start of a BASIC program: Variables reset, previous program deleted, etc. And now, the moment you've all been waiting for. Here it is: 00FC 21 11 01 0OFF CD A7 2B 0102 C3 19 1A LD CALL JP HL.0111H 28A7H 1A19H The call to 28A7, you may recall, displays a string of ASCII characters. The string displayed in this case is . . . RADIO SHACK LEVEL II BASIC The final instruction is a jump to 1A19, the address of the 'READY' display. To summarize this last portion of the initialization routine: all BASIC pointers, disk error codes, and ROM return codes are set up, the screen is cleared, and the MEMORY SIZE prompt is displayed. A valid response to that question is accepted, and, if necessary, the entire bank of memory is tested. Error messages are generated as needed. Finally, the memory size and available room for strings is recorded, the READY prompt is displayed, and control of the TRS-80 is given to the user. The Custom TRS-80 29 NOTES 30 Copacetic Comprehension Copacetic Comprehension There will doubtless be a day when books like this will be unnecessary. Personal computers will probably develop into the appliance area, with programmers, hobbyists, hardware designers and language specialists present only in the distant background of the market. But between now and then we are all faced with being either frustated users or solderer-programmers, tailoring machines according to our personal demands. To do this, certain skills are inevitably required. Among these are an understanding of non-decimal number systems, digital logic devices, machine-level languages, and a smattering of diagnostic sense. There are some fine books that cover all these topics (see Appendix II), so this chapter will only deal with them as far as needed to put this book to work. Among them are: • Binary, decimal and hexadecimal number systems, how they arose, how and why they can be used, and where understanding them is essential. • Common digital logic devices that appear in the TRS-80 and these projects, and how and where to use them. • Some of the basic elements of machine language, and a few personal considerations on where it is best applied, and when BASIC is a better choice. • A look inside the TRS-80, with an eye to diagnosing where troubles might lie and where changes might be in order. • The basics of creating a workable power supply for the projects in this book. Number Systems Numbering is the single most overrated problem in computer programming. The answer (posed before the question) is this: numbers are merely counting names. That is, it makes no difference whether we think in tenths of a mile or eighths of an inch. Nor does it bother us that a day is made up of 24 hours, while an hour is 60 minutes. That a year is 365 days frightens us not, nor that months are a motley collection of sizes. In parking lots, does it bother us that our vehicle may be parked in Row N as opposed to Row 14? There is no mystery when we mark off points with four scratches and a Crosshatch. And does a dozen always conjure up 'twelve', or is a dozen something we have understood since youth? Names are sizes are numbers; so it is with the number systems that we arbitrarily assign for the convenience of working with computers. When we are talking about electrical signals, it is clearest and easiest to think about ons and offs. Ons look pretty much like ones, and offs look like The Custom TRS-80 31 Box / Converting Binary to Decimal zeros. It's a nice, clean concept, and one that illuminates the way we can refer to the machinery. There's more convenience to naming a computer data condition 10110100 than to calling it an on off on on off on off off. Were data the only consideration, the binary one and zero method might have been satisfactory, without resorting to other means or stroking our memories. Finding a location in a computer's memory is a much more difficult task. Although a memory location called . . . 11101000100110101 . . . might be easier to think about than . . . onononoffonoffoffoffonoffoffononoffonoffon ... it could use another step forward. In music, a long string of sixteenth notes like this - Figure 2-1. Illustration of illegible musical notation. - is broken up to make it legible, so it looks instead like this - Figure 2-2. Illustration of legible musical notation. Likewise, that long binary string can be broken up from 1101000100110101 into convenient groups . . . Converting Binary to Decimal In the grade school years, students used to learn that a number like 5,163 contained a 3 in the ones place, a 6 in the tens place, a 1 in the hundreds place, and a 5 in the thousands place. It was to remind them that 5,163 was really 3 plus 60 (6 x 10) plus 100 (1 x 10 x 10) plus 5,000 (5 x 10 x 10 x 10). The way other number systems are written follows this same pattern for their own bases. In base eight the number 5,163 would have a 3 in the ones place, a 6 in the eights place, a 1 in the sixty-fours place, and a 5 in the five-hundred-twelves place. That means that 5,163 is really 3 plus 48 (6 x 8) plus 64 (1 x 8 x 8) plus 2,560 (5x8x8x8). But notice how that's decimal thinking! Really in base eight there could be no '8' . . . it would have to be called '10'! 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, and so on. So 5,163 in base eight is still 3 plus 60 plus 100 plus 5,000! The binary system sneaks in the same way. A number like 1101 0001 0001 0011 turns into a 1 in the ones place, a 1 in the twos place, a in the fours place, a in the eights place, all the way up to a 1 in the thirty-two-thousand-seven-hundred-sixty-sevens place. In binary, the one on the far left is still a 1 in the quadrillions place, don't forget. But the message is how to convert all this to decimal. And here it is: 3276B 16384 8192 4096 2048 1024 512 256 128 64 32 16 B 4 2 1 1 1 1010010011 Just add the numbers: lxl + 1x2 + 0x4 + 0x8 + 1x16 . . . + 1 times 32,768 = 41,619. Voila. No matter how long the number is, and in whatever base: 1. Start at the left and produce a chart of the base number's powers, starting with (X to the power is always 1). 2. Lay the number to be converted underneath the base number chart. 3. Multiply each base number power by the digit in its place. 4. Sum the resulting numbers. Does it work? Certainly. What is 163,341 in base 9? And in base 7? And in base 10? Base 9 powers : 5 4 3 2 1 D 9 to that power: 59049 6561 729 61 9 1 Number to convert 1 6 3 3 4 1 Multiplication: 1x59049 6x6561 3x729 3x81 4x9 1x1 Subtotals: 59049 +39366 +2187 +243 +36 +1 Converted result: 100882, base 10 Base 7 powers: 5 4 3 2 1 D 7 to that power: 16807 2401 343 43 7 1 Number to convert 1 6 3 3 4 1 Multiplication: 1x16807 6x2401 3x343 3x49 4x7 1x1 Subtotals: 16807 +14406 +1029 +147 +28 +1 Converted result: 32416, bese 10 Base 10 powers: 5 4 3 a 1 10 to that power: 100000 10000 1000 100 10 1 Number to convert 16 3 3 4 1 Multi plicetion: 1x100000 6x10000 3x1000 3x100 4x10 1x1 Subtotals: 100000+60000 +3000 +300 +40 +1 Converted result: 163341 , base 10 32 Chapter 2 Box / Reading the Pins 1101000100110101 . . . although the legibility is improved, the human spark, the ability to look and recognize (that aha! ) is not there. So the next step is to set about naming the sections. Since these on-off conditions can be written down as binary numbers, why not write them down in their decimal eauivalents? The question is rhetorical, of course, because not only can it be done, it is done. The only question is how to do it. Were a computer capable of swallowing all sixteen of those binary digits (bits) in one gulp, that question might be easily answered by calculating the conversion of 1101 0001 0011 0101 using a binary-to-decimal conversion table. The result, we find, is 53557. But the computer, alas, cannot swallow all those bits in one bite ... it can only swallow one byte full of bits (pardon). In other words, though a computer may need numbers sixteen bits long, only eight data lines exist to carry that data. The component parts of the number 1101000100110101 are needed, eight bits at a time: 11010001 00110101. There's the mathematical rub. 11010001 is 209 decimal, and 00110101 is 54 decimal. This seems hardly related to 53,557. Another solution is necessary, and it is a naming system as much as a numbering system. It names each of the sixteen possible combinations of four binary digits: Reading the Pins Finding your way through digital circuits is much easier than finding your way through an ordinary table radio. Industry standards have made the process simple. Consumer integrated circuits are packaged in small, rectangular, plastic or ceramic cases with anywhere from 8 to 40 external connections known as pins. Earlier integrated circuits - and many of the audio types currently being produced - were packaged in small metal cans and looked like transistors, with many wires protruding from the bottom. The wires were arranged around a keying tab on the edge of the can, and numbered like so: Figure 2-3. Can-type IC pin numbering. As such circuits developed into more sophisticated and powerful devices, more pins were needed for input and output. A rectangular package was developed, but it was still numbered in a circle, starting (when looking down from the top) from the left of the notch, so: rn m rn m All modern integrated circuits can be read from the top in this same way. 14- and 16-pin types start from the top left and read around: r r r r r r r LJ Id Ld LI Id Id Ld RRRRRRRR uuuy Figure 2-4. Dip- type IC pin number (8 pins). 'LdLdLdldldLdLdLd Figure 2-5. 14- and 16-pin Dip IC pin numbering. You can read the pinouts of 18-, 20-, 24-, 28- and 40-pin circuits in the same manner. The highest numbered pin sits just opposite the lowest numbered pin. In the beginning this practice may seem confusing; it is. But after using the circuits - and counting their pins over and again - you will probably feel comfortable with the pin arrangement. Just one thing: when you assemble TRS-80 add-ons, most of your work will be done from the bottom . . . which means reading backwards! The Custom TRS-80 33 Digital Logic Devices 0000 16 named and is equaL to decima L 0001 is named 1 and is equal to decimal 1 0010 is named 2 and is equal to decimal 2 0011 is named 3 and i s equal to decimal 3 0100 is named 4 and is equaL to decimal 4 0101 i s named 5 and is equaL to decimal 5 0110 i s named 6 and 1 s equaL to decimaL 6 0111 is named 7 and 1 s equal to decimel 7 1000 lb named B and is equal to decima L 8 1001 is named 9 and is equaL to decimaL 9 1010 is named A and is equal to decimal 10 1011 i s named B and 1 s equal to decimal 11 1100 is named C and i s equal to decimal 12 1101 i 5 named D and 16 equaL to decimal 13 1110 i s named E and is equal to decimal 14 1111 i s named F and i s equal to decimal 15 This may seem overdone; but A, B, C, D, E, and F are darn good names for binary values which exceed the number nine. If you don't have a name, make one up. For practical purposes, keep it within the symbols everyone has on the Royal typewriter. Back to the number 1101000100110101. Crack it into those four legible pieces (1101 0001 0011 0101), and it can be named D135. To convert it to decimal, remember the old rule: the 5 is in the ones place, the 3 is this time in the sixteens place, the 1 is in the two-hunded-fifty-sixes place, and the D is in the four-thousand-ninety-sixes place. Thus, D135 is 5 plus 3 x 16 plus 1 x 256 plus (see the chart) 13 x 4,096, or . . . 53,557! So, that long binary number can actually be digested by the computer as a byte of Dl and a byte of 35. After a while, the number system comes easily. My personal recommendation: work in it. Convert to decimal only when you absolutely must. Think in hexadecimal and binary. They are the tools with which you can speak to the computer. Throughout this book, numbers in hexadecimal are printed in BOLD. Digital Logic Devices Back to digital logic devices. The essence of digital logic is to evaluate binary, on-off input; sometimes to determine a pattern of similarity or difference, sometimes to sense a change and sometimes to search for a signal. An appropriate result is produced as a result of the logical operation. One of the logic building blocks is called a gate. A gate electronically evaluates its input to determine the pattern of similarity and difference of signals, and produces a specific output. A simple gate is shown below: Figure 2-6. Simple AND gate. Its job is to determine if the first AND second inputs are both at the one (high) level. Only under that condition will its output produce a high (one) signal. The table below shows how this AND gate works. If input #1 1s AND Gate If Input #2 is 1 o 1 1 1 Table 2-1. AND gate action. The output result 1s 1 The table is called a truth table, and its purpose is to present every possible input and output condition for a given gate. Below is an OR gate. Stated in words, if either the first OR the second input is high, the output will be high. Examine the OR gate truth table; it really is quite logical. The binary number system and digital logic devices were developed together as a way of solving a practical dilemma: how to mass produce computers which could work quickly and accurately, and yet be inexpensive. As noted in Chapter 1, the problems of creating consistently accurate circuits, working with many different voltages levels, are formidable. Thus, simple yes-no, on-off logic was developed. The intimidating term Boolean algebra is being used for the first, and last, time in this book - right in this sentence. You'll probably hear the phrase from time to time, but no matter - it's a professional's buzzword to keep the masses out. Forget it. O Figure 2-7. Simple OR gate. OR Gate Input 1 Input 2 Output 1 1 1 1 1 1 1 Table 2-2. OR gate action. Given a huge set of interconnected gates and their known inputs, the final output of the group can be determined by using truth tables like 34 Chapter 2 Digital Logic Devices these. Gates may have more inputs than two (some have sixteen), and may produce the opposite results from the two described above (NOT-AND and NOT-OR gates, known as NAND and NOR gates). Truth tables reveal how the integrated circuit's design engineer specified the pattern of binary logic inside the circuit. In this way, given a desired output and a known number of input signals, it is possible to determine what set of input values will trigger the desired output."
    }
}