{
    "id": "dbpedia_4551_0",
    "rank": 50,
    "data": {
        "url": "https://stackoverflow.com/questions/10324835/what-does-actual-machine-code-look-like-at-various-points",
        "read_more_link": "",
        "language": "en",
        "title": "What does actual machine code look like at various points?",
        "top_image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "meta_img": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
        "images": [
            "https://i.sstatic.net/3NGJ5.jpg?s=64",
            "https://www.gravatar.com/avatar/f9fc3249a341a64ee2721637915cd301?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/6b686fe7f07115890ca63099d088948d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/edd8638efe875601bfe394a8aea5b16d?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ef81dc344a7fa0e656267317fd70c633?s=64&d=identicon&r=PG",
            "https://stackoverflow.com/posts/10324835/ivc/c15d?prg=d8c0662e-d8bf-434e-bb37-5059939d68e8"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2012-04-25T22:39:43",
        "summary": "",
        "meta_description": "There seems to be many opinions on what machine code actually is.  I've heard some say it's assembly, or binary, or hex.\n\nIs it correct to say that machine code is essentially a set of instructions...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
        "meta_site_name": "Stack Overflow",
        "canonical_link": "https://stackoverflow.com/questions/10324835/what-does-actual-machine-code-look-like-at-various-points",
        "text": "And all skipping means is, instead of adding one to the program counter, we add two, or we add one twice, which is actually how these machines worked back then. And that just causes us to skip over a jump. So essentially that means we can branch to anywhere we want to in memory or continue on our way, which gives us, even though that's very simple, that gives us enough power to allow machines to make decisions. And we've got input/output; we've got math; we've got the ability to transfer data from one location in memory to another. Those are all the essentials of the way a machine functions. That is machine language.\n\nNow, the one layer of humanity that's put on top of that is what's called \"assembly language,\" which is nothing but naming things. For example, you create sort of a so-called mnemonic for the different instructions. So, for example, load the accumulator would be LDA. Store the accumulator, STA. You want them to be short because you're going to be typing them a lot. Remember that you end up using lots of little instructions in order to get something done. And then the only other thing really that assembly language does, it allows you to name locations in memory.\n\nSo, for example, you might say LDA, for load accumulator, current score. And current score would simply refer to a, like a variable essentially, a location in memory that you had labeled \"current score.\" And then if you did STA, store accumulator, new score, well, it would first load the current score into the accumulator, and then store that into a different location called new score. So really that's all we're talking about is some simple abbreviations for helping sort of remember and use these individual instructions and convenient labels for locations in memory so that you're not having to remember, oh, that's in location 329627. I mean, who can do that? So instead you just, you label that location with an English, an alphanumeric phrase of some sort, and then you refer to that location by the phrase rather than by its actual number.\n\nAnd in fact you don't care what the number is. That's one of the things that the assembler will do for you is you just say I need memory called these things. And it worries about where they go because it doesn't really matter to you as long as they're consistently referred to. And that's the whole process. That's machine language and assembly language. And that's the way it was 50 years ago, and more or less that's the way it is now."
    }
}